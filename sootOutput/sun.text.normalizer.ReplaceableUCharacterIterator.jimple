public class sun.text.normalizer.ReplaceableUCharacterIterator extends sun.text.normalizer.UCharacterIterator
{
    private sun.text.normalizer.Replaceable replaceable;
    private int currentIndex;

    public void <init>(java.lang.String)
    {
        sun.text.normalizer.ReplaceableUCharacterIterator r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;
        sun.text.normalizer.ReplaceableString $r3;

        r0 := @this: sun.text.normalizer.ReplaceableUCharacterIterator;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<sun.text.normalizer.UCharacterIterator: void <init>()>();
        if r1 != null goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r2;

     label0:
        $r3 = new sun.text.normalizer.ReplaceableString;
        specialinvoke $r3.<sun.text.normalizer.ReplaceableString: void <init>(java.lang.String)>(r1);
        r0.<sun.text.normalizer.ReplaceableUCharacterIterator: sun.text.normalizer.Replaceable replaceable> = $r3;
        r0.<sun.text.normalizer.ReplaceableUCharacterIterator: int currentIndex> = 0;
        return;
    }

    public void <init>(java.lang.StringBuffer)
    {
        sun.text.normalizer.ReplaceableUCharacterIterator r0;
        java.lang.StringBuffer r1;
        java.lang.IllegalArgumentException $r2;
        sun.text.normalizer.ReplaceableString $r3;

        r0 := @this: sun.text.normalizer.ReplaceableUCharacterIterator;
        r1 := @parameter0: java.lang.StringBuffer;
        specialinvoke r0.<sun.text.normalizer.UCharacterIterator: void <init>()>();
        if r1 != null goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r2;

     label0:
        $r3 = new sun.text.normalizer.ReplaceableString;
        specialinvoke $r3.<sun.text.normalizer.ReplaceableString: void <init>(java.lang.StringBuffer)>(r1);
        r0.<sun.text.normalizer.ReplaceableUCharacterIterator: sun.text.normalizer.Replaceable replaceable> = $r3;
        r0.<sun.text.normalizer.ReplaceableUCharacterIterator: int currentIndex> = 0;
        return;
    }

    public java.lang.Object clone()
    {
        sun.text.normalizer.ReplaceableUCharacterIterator r0;
        java.lang.CloneNotSupportedException r1, $r3;
        java.lang.Object $r2;

        r0 := @this: sun.text.normalizer.ReplaceableUCharacterIterator;

     label0:
        $r2 = specialinvoke r0.<sun.text.normalizer.UCharacterIterator: java.lang.Object clone()>();

     label1:
        return $r2;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        return null;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    public int current()
    {
        sun.text.normalizer.ReplaceableUCharacterIterator r0;
        int $i0, $i1, $i2;
        sun.text.normalizer.Replaceable $r1, $r2;
        char $c3;

        r0 := @this: sun.text.normalizer.ReplaceableUCharacterIterator;
        $i0 = r0.<sun.text.normalizer.ReplaceableUCharacterIterator: int currentIndex>;
        $r1 = r0.<sun.text.normalizer.ReplaceableUCharacterIterator: sun.text.normalizer.Replaceable replaceable>;
        $i1 = interfaceinvoke $r1.<sun.text.normalizer.Replaceable: int length()>();
        if $i0 >= $i1 goto label0;

        $r2 = r0.<sun.text.normalizer.ReplaceableUCharacterIterator: sun.text.normalizer.Replaceable replaceable>;
        $i2 = r0.<sun.text.normalizer.ReplaceableUCharacterIterator: int currentIndex>;
        $c3 = interfaceinvoke $r2.<sun.text.normalizer.Replaceable: char charAt(int)>($i2);
        return $c3;

     label0:
        return -1;
    }

    public int getLength()
    {
        sun.text.normalizer.ReplaceableUCharacterIterator r0;
        sun.text.normalizer.Replaceable $r1;
        int $i0;

        r0 := @this: sun.text.normalizer.ReplaceableUCharacterIterator;
        $r1 = r0.<sun.text.normalizer.ReplaceableUCharacterIterator: sun.text.normalizer.Replaceable replaceable>;
        $i0 = interfaceinvoke $r1.<sun.text.normalizer.Replaceable: int length()>();
        return $i0;
    }

    public int getIndex()
    {
        sun.text.normalizer.ReplaceableUCharacterIterator r0;
        int $i0;

        r0 := @this: sun.text.normalizer.ReplaceableUCharacterIterator;
        $i0 = r0.<sun.text.normalizer.ReplaceableUCharacterIterator: int currentIndex>;
        return $i0;
    }

    public int next()
    {
        sun.text.normalizer.ReplaceableUCharacterIterator r0;
        int $i0, $i1, $i2, $i3;
        sun.text.normalizer.Replaceable $r1, $r2;
        char $c4;

        r0 := @this: sun.text.normalizer.ReplaceableUCharacterIterator;
        $i1 = r0.<sun.text.normalizer.ReplaceableUCharacterIterator: int currentIndex>;
        $r1 = r0.<sun.text.normalizer.ReplaceableUCharacterIterator: sun.text.normalizer.Replaceable replaceable>;
        $i2 = interfaceinvoke $r1.<sun.text.normalizer.Replaceable: int length()>();
        if $i1 >= $i2 goto label0;

        $r2 = r0.<sun.text.normalizer.ReplaceableUCharacterIterator: sun.text.normalizer.Replaceable replaceable>;
        $i0 = r0.<sun.text.normalizer.ReplaceableUCharacterIterator: int currentIndex>;
        $i3 = $i0 + 1;
        r0.<sun.text.normalizer.ReplaceableUCharacterIterator: int currentIndex> = $i3;
        $c4 = interfaceinvoke $r2.<sun.text.normalizer.Replaceable: char charAt(int)>($i0);
        return $c4;

     label0:
        return -1;
    }

    public int previous()
    {
        sun.text.normalizer.ReplaceableUCharacterIterator r0;
        int $i0, $i1, $i2;
        sun.text.normalizer.Replaceable $r2;
        char $c3;

        r0 := @this: sun.text.normalizer.ReplaceableUCharacterIterator;
        $i0 = r0.<sun.text.normalizer.ReplaceableUCharacterIterator: int currentIndex>;
        if $i0 <= 0 goto label0;

        $r2 = r0.<sun.text.normalizer.ReplaceableUCharacterIterator: sun.text.normalizer.Replaceable replaceable>;
        $i1 = r0.<sun.text.normalizer.ReplaceableUCharacterIterator: int currentIndex>;
        $i2 = $i1 - 1;
        r0.<sun.text.normalizer.ReplaceableUCharacterIterator: int currentIndex> = $i2;
        $c3 = interfaceinvoke $r2.<sun.text.normalizer.Replaceable: char charAt(int)>($i2);
        return $c3;

     label0:
        return -1;
    }

    public void setIndex(int)
    {
        sun.text.normalizer.ReplaceableUCharacterIterator r0;
        int i0, $i1;
        sun.text.normalizer.Replaceable $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: sun.text.normalizer.ReplaceableUCharacterIterator;
        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        $r1 = r0.<sun.text.normalizer.ReplaceableUCharacterIterator: sun.text.normalizer.Replaceable replaceable>;
        $i1 = interfaceinvoke $r1.<sun.text.normalizer.Replaceable: int length()>();
        if i0 <= $i1 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r2;

     label1:
        r0.<sun.text.normalizer.ReplaceableUCharacterIterator: int currentIndex> = i0;
        return;
    }

    public int getText(char[], int)
    {
        sun.text.normalizer.ReplaceableUCharacterIterator r0;
        char[] r1;
        int i0, i1, $i2, $i3;
        sun.text.normalizer.Replaceable $r2, $r5;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.String $r4;

        r0 := @this: sun.text.normalizer.ReplaceableUCharacterIterator;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        $r2 = r0.<sun.text.normalizer.ReplaceableUCharacterIterator: sun.text.normalizer.Replaceable replaceable>;
        i1 = interfaceinvoke $r2.<sun.text.normalizer.Replaceable: int length()>();
        if i0 < 0 goto label0;

        $i2 = i0 + i1;
        $i3 = lengthof r1;
        if $i2 <= $i3 goto label1;

     label0:
        $r3 = new java.lang.IndexOutOfBoundsException;
        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);
        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);
        throw $r3;

     label1:
        $r5 = r0.<sun.text.normalizer.ReplaceableUCharacterIterator: sun.text.normalizer.Replaceable replaceable>;
        interfaceinvoke $r5.<sun.text.normalizer.Replaceable: void getChars(int,int,char[],int)>(0, i1, r1, i0);
        return i1;
    }
}
