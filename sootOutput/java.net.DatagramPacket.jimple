public final class java.net.DatagramPacket extends java.lang.Object
{
    byte[] buf;
    int offset;
    int length;
    int bufLength;
    java.net.InetAddress address;
    int port;

    public void <init>(byte[], int, int)
    {
        java.net.DatagramPacket r0;
        byte[] r1;
        int i0, i1;

        r0 := @this: java.net.DatagramPacket;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        virtualinvoke r0.<java.net.DatagramPacket: void setData(byte[],int,int)>(r1, i0, i1);
        r0.<java.net.DatagramPacket: java.net.InetAddress address> = null;
        r0.<java.net.DatagramPacket: int port> = -1;
        return;
    }

    public void <init>(byte[], int)
    {
        java.net.DatagramPacket r0;
        byte[] r1;
        int i0;

        r0 := @this: java.net.DatagramPacket;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        specialinvoke r0.<java.net.DatagramPacket: void <init>(byte[],int,int)>(r1, 0, i0);
        return;
    }

    public void <init>(byte[], int, int, java.net.InetAddress, int)
    {
        java.net.DatagramPacket r0;
        byte[] r1;
        int i0, i1, i2;
        java.net.InetAddress r2;

        r0 := @this: java.net.DatagramPacket;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: java.net.InetAddress;
        i2 := @parameter4: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        virtualinvoke r0.<java.net.DatagramPacket: void setData(byte[],int,int)>(r1, i0, i1);
        virtualinvoke r0.<java.net.DatagramPacket: void setAddress(java.net.InetAddress)>(r2);
        virtualinvoke r0.<java.net.DatagramPacket: void setPort(int)>(i2);
        return;
    }

    public void <init>(byte[], int, int, java.net.SocketAddress) throws java.net.SocketException
    {
        java.net.DatagramPacket r0;
        byte[] r1;
        int i0, i1;
        java.net.SocketAddress r2;

        r0 := @this: java.net.DatagramPacket;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: java.net.SocketAddress;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        virtualinvoke r0.<java.net.DatagramPacket: void setData(byte[],int,int)>(r1, i0, i1);
        virtualinvoke r0.<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)>(r2);
        return;
    }

    public void <init>(byte[], int, java.net.InetAddress, int)
    {
        java.net.DatagramPacket r0;
        byte[] r1;
        int i0, i1;
        java.net.InetAddress r2;

        r0 := @this: java.net.DatagramPacket;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: java.net.InetAddress;
        i1 := @parameter3: int;
        specialinvoke r0.<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.InetAddress,int)>(r1, 0, i0, r2, i1);
        return;
    }

    public void <init>(byte[], int, java.net.SocketAddress) throws java.net.SocketException
    {
        java.net.DatagramPacket r0;
        byte[] r1;
        int i0;
        java.net.SocketAddress r2;

        r0 := @this: java.net.DatagramPacket;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: java.net.SocketAddress;
        specialinvoke r0.<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.SocketAddress)>(r1, 0, i0, r2);
        return;
    }

    public synchronized java.net.InetAddress getAddress()
    {
        java.net.DatagramPacket r0;
        java.net.InetAddress $r1;

        r0 := @this: java.net.DatagramPacket;
        $r1 = r0.<java.net.DatagramPacket: java.net.InetAddress address>;
        return $r1;
    }

    public synchronized int getPort()
    {
        java.net.DatagramPacket r0;
        int $i0;

        r0 := @this: java.net.DatagramPacket;
        $i0 = r0.<java.net.DatagramPacket: int port>;
        return $i0;
    }

    public synchronized byte[] getData()
    {
        java.net.DatagramPacket r0;
        byte[] $r1;

        r0 := @this: java.net.DatagramPacket;
        $r1 = r0.<java.net.DatagramPacket: byte[] buf>;
        return $r1;
    }

    public synchronized int getOffset()
    {
        java.net.DatagramPacket r0;
        int $i0;

        r0 := @this: java.net.DatagramPacket;
        $i0 = r0.<java.net.DatagramPacket: int offset>;
        return $i0;
    }

    public synchronized int getLength()
    {
        java.net.DatagramPacket r0;
        int $i0;

        r0 := @this: java.net.DatagramPacket;
        $i0 = r0.<java.net.DatagramPacket: int length>;
        return $i0;
    }

    public synchronized void setData(byte[], int, int)
    {
        java.net.DatagramPacket r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.net.DatagramPacket;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i1 < 0 goto label0;

        if i0 < 0 goto label0;

        $i2 = i1 + i0;
        if $i2 < 0 goto label0;

        $i3 = i1 + i0;
        $i4 = lengthof r1;
        if $i3 <= $i4 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("illegal length or offset");
        throw $r2;

     label1:
        r0.<java.net.DatagramPacket: byte[] buf> = r1;
        r0.<java.net.DatagramPacket: int length> = i1;
        r0.<java.net.DatagramPacket: int bufLength> = i1;
        r0.<java.net.DatagramPacket: int offset> = i0;
        return;
    }

    public synchronized void setAddress(java.net.InetAddress)
    {
        java.net.DatagramPacket r0;
        java.net.InetAddress r1;

        r0 := @this: java.net.DatagramPacket;
        r1 := @parameter0: java.net.InetAddress;
        r0.<java.net.DatagramPacket: java.net.InetAddress address> = r1;
        return;
    }

    public synchronized void setPort(int)
    {
        java.net.DatagramPacket r0;
        int i0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r5;

        r0 := @this: java.net.DatagramPacket;
        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        if i0 <= 65535 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Port out of range:");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r2;

     label1:
        r0.<java.net.DatagramPacket: int port> = i0;
        return;
    }

    public synchronized void setSocketAddress(java.net.SocketAddress)
    {
        java.net.DatagramPacket r0;
        java.net.SocketAddress r1;
        java.net.InetSocketAddress r2;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3, $r4;
        java.net.InetAddress $r5;
        int $i0;

        r0 := @this: java.net.DatagramPacket;
        r1 := @parameter0: java.net.SocketAddress;
        if r1 == null goto label0;

        $z0 = r1 instanceof java.net.InetSocketAddress;
        if $z0 != 0 goto label1;

     label0:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unsupported address type");
        throw $r3;

     label1:
        r2 = (java.net.InetSocketAddress) r1;
        $z1 = virtualinvoke r2.<java.net.InetSocketAddress: boolean isUnresolved()>();
        if $z1 == 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unresolved address");
        throw $r4;

     label2:
        $r5 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        virtualinvoke r0.<java.net.DatagramPacket: void setAddress(java.net.InetAddress)>($r5);
        $i0 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();
        virtualinvoke r0.<java.net.DatagramPacket: void setPort(int)>($i0);
        return;
    }

    public synchronized java.net.SocketAddress getSocketAddress()
    {
        java.net.DatagramPacket r0;
        java.net.InetSocketAddress $r1;
        java.net.InetAddress $r2;
        int $i0;

        r0 := @this: java.net.DatagramPacket;
        $r1 = new java.net.InetSocketAddress;
        $r2 = virtualinvoke r0.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();
        $i0 = virtualinvoke r0.<java.net.DatagramPacket: int getPort()>();
        specialinvoke $r1.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r2, $i0);
        return $r1;
    }

    public synchronized void setData(byte[])
    {
        java.net.DatagramPacket r0;
        byte[] r1;
        java.lang.NullPointerException $r2;
        int $i0, $i1;

        r0 := @this: java.net.DatagramPacket;
        r1 := @parameter0: byte[];
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("null packet buffer");
        throw $r2;

     label0:
        r0.<java.net.DatagramPacket: byte[] buf> = r1;
        r0.<java.net.DatagramPacket: int offset> = 0;
        $i0 = lengthof r1;
        r0.<java.net.DatagramPacket: int length> = $i0;
        $i1 = lengthof r1;
        r0.<java.net.DatagramPacket: int bufLength> = $i1;
        return;
    }

    public synchronized void setLength(int)
    {
        java.net.DatagramPacket r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        byte[] $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.net.DatagramPacket;
        i0 := @parameter0: int;
        $i1 = r0.<java.net.DatagramPacket: int offset>;
        $i2 = i0 + $i1;
        $r1 = r0.<java.net.DatagramPacket: byte[] buf>;
        $i3 = lengthof $r1;
        if $i2 > $i3 goto label0;

        if i0 < 0 goto label0;

        $i4 = r0.<java.net.DatagramPacket: int offset>;
        $i5 = i0 + $i4;
        if $i5 >= 0 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("illegal length");
        throw $r2;

     label1:
        r0.<java.net.DatagramPacket: int length> = i0;
        $i6 = r0.<java.net.DatagramPacket: int length>;
        r0.<java.net.DatagramPacket: int bufLength> = $i6;
        return;
    }

    private static native void init();

    static void <clinit>()
    {
        sun.security.action.LoadLibraryAction $r0;

        $r0 = new sun.security.action.LoadLibraryAction;
        specialinvoke $r0.<sun.security.action.LoadLibraryAction: void <init>(java.lang.String)>("net");
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        staticinvoke <java.net.DatagramPacket: void init()>();
        return;
    }
}
