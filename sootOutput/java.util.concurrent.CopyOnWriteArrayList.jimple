public class java.util.concurrent.CopyOnWriteArrayList extends java.lang.Object implements java.util.List, java.util.RandomAccess, java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    final transient java.util.concurrent.locks.ReentrantLock lock;
    private transient volatile java.lang.Object[] array;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long lockOffset;

    final java.lang.Object[] getArray()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] array>;
        return $r1;
    }

    final void setArray(java.lang.Object[])
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] r1;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.lang.Object[];
        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] array> = r1;
        return;
    }

    public void <init>()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.concurrent.locks.ReentrantLock $r1;
        java.lang.Object[] $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new java.util.concurrent.locks.ReentrantLock;
        specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void <init>()>();
        r0.<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock> = $r1;
        $r2 = newarray (java.lang.Object)[0];
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>($r2);
        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.lang.Object[] r3;
        java.lang.Class $r4;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.util.Collection;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = new java.util.concurrent.locks.ReentrantLock;
        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();
        r0.<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock> = $r2;
        r3 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();
        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();
        if $r4 == class "[Ljava/lang/Object;" goto label0;

        $i0 = lengthof r3;
        r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>(r3, $i0, class "[Ljava/lang/Object;");

     label0:
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>(r3);
        return;
    }

    public void <init>(java.lang.Object[])
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] r1, $r3;
        java.util.concurrent.locks.ReentrantLock $r2;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.lang.Object[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = new java.util.concurrent.locks.ReentrantLock;
        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();
        r0.<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock> = $r2;
        $i0 = lengthof r1;
        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>(r1, $i0, class "[Ljava/lang/Object;");
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>($r3);
        return;
    }

    public int size()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        $r1 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        $i0 = lengthof $r1;
        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        $i0 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: int size()>();
        if $i0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private static boolean eq(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        if r0 != null goto label1;

        if r1 != null goto label0;

        $z0 = 1;
        goto label2;

     label0:
        $z0 = 0;
        goto label2;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

     label2:
        return $z0;
    }

    private static int indexOf(java.lang.Object, java.lang.Object[], int, int)
    {
        java.lang.Object r0, $r2, $r3;
        java.lang.Object[] r1;
        int i0, i1, i2, i3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        if r0 != null goto label3;

        i2 = i0;

     label0:
        if i2 >= i1 goto label2;

        $r2 = r1[i2];
        if $r2 != null goto label1;

        return i2;

     label1:
        i2 = i2 + 1;
        goto label0;

     label2:
        goto label6;

     label3:
        i3 = i0;

     label4:
        if i3 >= i1 goto label6;

        $r3 = r1[i3];
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);
        if $z0 == 0 goto label5;

        return i3;

     label5:
        i3 = i3 + 1;
        goto label4;

     label6:
        return -1;
    }

    private static int lastIndexOf(java.lang.Object, java.lang.Object[], int)
    {
        java.lang.Object r0, $r2, $r3;
        java.lang.Object[] r1;
        int i0, i1, i2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object[];
        i0 := @parameter2: int;
        if r0 != null goto label3;

        i1 = i0;

     label0:
        if i1 < 0 goto label2;

        $r2 = r1[i1];
        if $r2 != null goto label1;

        return i1;

     label1:
        i1 = i1 + -1;
        goto label0;

     label2:
        goto label6;

     label3:
        i2 = i0;

     label4:
        if i2 < 0 goto label6;

        $r3 = r1[i2];
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);
        if $z0 == 0 goto label5;

        return i2;

     label5:
        i2 = i2 + -1;
        goto label4;

     label6:
        return -1;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        java.lang.Object[] r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.lang.Object;
        r2 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        $i0 = lengthof r2;
        $i1 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>(r1, r2, 0, $i0);
        if $i1 < 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public int indexOf(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        java.lang.Object[] r2;
        int $i0, $i1;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.lang.Object;
        r2 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        $i0 = lengthof r2;
        $i1 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>(r1, r2, 0, $i0);
        return $i1;
    }

    public int indexOf(java.lang.Object, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        int i0, $i1, $i2;
        java.lang.Object[] r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        r2 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        $i1 = lengthof r2;
        $i2 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>(r1, r2, i0, $i1);
        return $i2;
    }

    public int lastIndexOf(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        java.lang.Object[] r2;
        int $i0, $i1, $i2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.lang.Object;
        r2 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        $i0 = lengthof r2;
        $i1 = $i0 - 1;
        $i2 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int lastIndexOf(java.lang.Object,java.lang.Object[],int)>(r1, r2, $i1);
        return $i2;
    }

    public int lastIndexOf(java.lang.Object, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        int i0, $i1;
        java.lang.Object[] r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        r2 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        $i1 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int lastIndexOf(java.lang.Object,java.lang.Object[],int)>(r1, r2, i0);
        return $i1;
    }

    public java.lang.Object clone()
    {
        java.util.concurrent.CopyOnWriteArrayList r0, r1, $r3;
        java.lang.Object $r2;
        java.lang.CloneNotSupportedException $r5, r6;
        java.lang.InternalError $r7;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (java.util.concurrent.CopyOnWriteArrayList) $r2;
        r1 = (java.util.concurrent.CopyOnWriteArrayList) $r3;
        specialinvoke r1.<java.util.concurrent.CopyOnWriteArrayList: void resetLock()>();

     label1:
        return r1;

     label2:
        $r5 := @caughtexception;
        r6 = $r5;
        $r7 = new java.lang.InternalError;
        specialinvoke $r7.<java.lang.InternalError: void <init>()>();
        throw $r7;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    public java.lang.Object[] toArray()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] r1, $r2;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        $i0 = lengthof r1;
        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, $i0);
        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] r1, r2, $r4, $r5;
        int i0, $i1, $i2;
        java.lang.Class $r3;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.lang.Object[];
        r2 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        i0 = lengthof r2;
        $i1 = lengthof r1;
        if $i1 >= i0 goto label0;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>(r2, i0, $r3);
        $r5 = (java.lang.Object[]) $r4;
        return $r5;

     label0:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, 0, i0);
        $i2 = lengthof r1;
        if $i2 <= i0 goto label1;

        r1[i0] = null;

     label1:
        return r1;
    }

    private java.lang.Object get(java.lang.Object[], int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] r1;
        int i0;
        java.lang.Object $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        $r2 = r1[i0];
        return $r2;
    }

    public java.lang.Object get(int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        i0 := @parameter0: int;
        $r1 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        $r2 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(java.lang.Object[],int)>($r1, i0);
        return $r2;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, i1;
        java.lang.Object r1, r4, r7;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Object[] r3, r5;
        java.lang.Throwable r6, $r8;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        r3 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        r4 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(java.lang.Object[],int)>(r3, i0);
        if r4 == r1 goto label1;

        i1 = lengthof r3;
        r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r3, i1);
        r5[i0] = r1;
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>(r5);
        goto label2;

     label1:
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>(r3);

     label2:
        r7 = r4;

     label3:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return r7;

     label4:
        $r8 := @caughtexception;

     label5:
        r6 = $r8;

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r6;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean add(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Object[] r3, r4;
        int i0, $i1;
        boolean z0;
        java.lang.Throwable r5, $r6;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.lang.Object;
        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        r3 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        i0 = lengthof r3;
        $i1 = i0 + 1;
        r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r3, $i1);
        r4[i0] = r1;
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>(r4);
        z0 = 1;

     label1:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z0;

     label2:
        $r6 := @caughtexception;

     label3:
        r5 = $r6;

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r5;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void add(int, java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.Object r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Object[] r3, r5;
        java.lang.StringBuilder $r4, $r8, $r9, $r10, $r11;
        java.lang.Throwable r6, $r13;
        java.lang.IndexOutOfBoundsException $r7;
        java.lang.String $r12;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        r3 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        i1 = lengthof r3;
        if i0 > i1 goto label1;

        if i0 >= 0 goto label2;

     label1:
        $r7 = new java.lang.IndexOutOfBoundsException;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Size: ");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r12);
        throw $r7;

     label2:
        i2 = i1 - i0;
        if i2 != 0 goto label3;

        $i3 = i1 + 1;
        r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r3, $i3);
        goto label4;

     label3:
        $i4 = i1 + 1;
        r5 = newarray (java.lang.Object)[$i4];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r5, 0, i0);
        $i5 = i0 + 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, i0, r5, $i5, i2);

     label4:
        r5[i0] = r1;
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>(r5);

     label5:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label9;

     label6:
        $r13 := @caughtexception;

     label7:
        r6 = $r13;

     label8:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r6;

     label9:
        return;

        catch java.lang.Throwable from label0 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.lang.Object remove(int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Object[] r2, r4, $r6;
        java.lang.Object r3, r7;
        java.lang.Throwable r5, $r8;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        i0 := @parameter0: int;
        r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        r2 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        i1 = lengthof r2;
        r3 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(java.lang.Object[],int)>(r2, i0);
        $i3 = i1 - i0;
        i2 = $i3 - 1;
        if i2 != 0 goto label1;

        $i4 = i1 - 1;
        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r2, $i4);
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>($r6);
        goto label2;

     label1:
        $i5 = i1 - 1;
        r4 = newarray (java.lang.Object)[$i5];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r4, 0, i0);
        $i6 = i0 + 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i6, r4, i0, i2);
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>(r4);

     label2:
        r7 = r3;

     label3:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return r7;

     label4:
        $r8 := @caughtexception;

     label5:
        r5 = $r8;

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r5;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1, $r6, $r7, $r8, $r9;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Object[] r3, r4;
        int i0, i1, i2, i3, $i4;
        java.lang.Throwable r5, $r10;
        boolean $z0, z1, $z2, z3, z4;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.lang.Object;
        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        r3 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        i0 = lengthof r3;
        if i0 == 0 goto label8;

        i1 = i0 - 1;
        r4 = newarray (java.lang.Object)[i1];
        i2 = 0;

     label1:
        if i2 >= i1 goto label6;

        $r6 = r3[i2];
        $z0 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>(r1, $r6);
        if $z0 == 0 goto label5;

        i3 = i2 + 1;

     label2:
        if i3 >= i0 goto label3;

        $i4 = i3 - 1;
        $r7 = r3[i3];
        r4[$i4] = $r7;
        i3 = i3 + 1;
        goto label2;

     label3:
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>(r4);
        z1 = 1;

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z1;

     label5:
        $r8 = r3[i2];
        r4[i2] = $r8;
        i2 = i2 + 1;
        goto label1;

     label6:
        $r9 = r3[i1];
        $z2 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>(r1, $r9);
        if $z2 == 0 goto label8;

        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>(r4);
        z3 = 1;

     label7:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z3;

     label8:
        z4 = 0;

     label9:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z4;

     label10:
        $r10 := @caughtexception;

     label11:
        r5 = $r10;

     label12:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r5;

        catch java.lang.Throwable from label0 to label4 with label10;
        catch java.lang.Throwable from label5 to label7 with label10;
        catch java.lang.Throwable from label8 to label9 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void removeRange(int, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, i1, i2, i3, i4, $i5;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Object[] r2, r3, $r6;
        java.lang.Throwable r4, $r7;
        java.lang.IndexOutOfBoundsException $r5;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        r2 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        i2 = lengthof r2;
        if i0 < 0 goto label1;

        if i1 > i2 goto label1;

        if i1 >= i0 goto label2;

     label1:
        $r5 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r5;

     label2:
        $i5 = i1 - i0;
        i3 = i2 - $i5;
        i4 = i2 - i1;
        if i4 != 0 goto label3;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r2, i3);
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>($r6);
        goto label4;

     label3:
        r3 = newarray (java.lang.Object)[i3];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, i0);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i1, r3, i0, i4);
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>(r3);

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label8;

     label5:
        $r7 := @caughtexception;

     label6:
        r4 = $r7;

     label7:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean addIfAbsent(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1, $r6, $r7;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Object[] r3, r4;
        int i0, i1, $i2;
        boolean z0, $z1, z2;
        java.lang.Throwable r5, $r8;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.lang.Object;
        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        r3 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        i0 = lengthof r3;
        $i2 = i0 + 1;
        r4 = newarray (java.lang.Object)[$i2];
        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $r6 = r3[i1];
        $z1 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>(r1, $r6);
        if $z1 == 0 goto label3;

        z0 = 0;

     label2:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z0;

     label3:
        $r7 = r3[i1];
        r4[i1] = $r7;
        i1 = i1 + 1;
        goto label1;

     label4:
        r4[i0] = r1;
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>(r4);
        z2 = 1;

     label5:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z2;

     label6:
        $r8 := @caughtexception;

     label7:
        r5 = $r8;

     label8:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r5;

        catch java.lang.Throwable from label0 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        java.lang.Object[] r2;
        int i0, $i1;
        java.util.Iterator r3;
        java.lang.Object r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.util.Collection;
        r2 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        i0 = lengthof r2;
        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        $i1 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>(r4, r2, 0, i0);
        if $i1 >= 0 goto label1;

        return 0;

     label1:
        goto label0;

     label2:
        return 1;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Object[] r3, r4, $r7;
        int i0, i1, i2, $i3;
        java.lang.Object r5;
        java.lang.Throwable r6, $r8;
        boolean $z0, z1, z2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.util.Collection;
        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        r3 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        i0 = lengthof r3;
        if i0 == 0 goto label5;

        i1 = 0;
        r4 = newarray (java.lang.Object)[i0];
        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r5 = r3[i2];
        $z0 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>(r5);
        if $z0 != 0 goto label2;

        $i3 = i1;
        i1 = i1 + 1;
        r4[$i3] = r5;

     label2:
        i2 = i2 + 1;
        goto label1;

     label3:
        if i1 == i0 goto label5;

        $r7 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r4, i1);
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>($r7);
        z1 = 1;

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z1;

     label5:
        z2 = 0;

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z2;

     label7:
        $r8 := @caughtexception;

     label8:
        r6 = $r8;

     label9:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r6;

        catch java.lang.Throwable from label0 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Object[] r3, r4, $r7;
        int i0, i1, i2, $i3;
        java.lang.Object r5;
        java.lang.Throwable r6, $r8;
        boolean $z0, z1, z2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.util.Collection;
        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        r3 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        i0 = lengthof r3;
        if i0 == 0 goto label5;

        i1 = 0;
        r4 = newarray (java.lang.Object)[i0];
        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r5 = r3[i2];
        $z0 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>(r5);
        if $z0 == 0 goto label2;

        $i3 = i1;
        i1 = i1 + 1;
        r4[$i3] = r5;

     label2:
        i2 = i2 + 1;
        goto label1;

     label3:
        if i1 == i0 goto label5;

        $r7 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r4, i1);
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>($r7);
        z1 = 1;

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z1;

     label5:
        z2 = 0;

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z2;

     label7:
        $r8 := @caughtexception;

     label8:
        r6 = $r8;

     label9:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r6;

        catch java.lang.Throwable from label0 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public int addAllAbsent(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        java.lang.Object[] r2, r3, r5, r8;
        java.util.concurrent.locks.ReentrantLock r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        java.lang.Object r6;
        java.lang.Throwable r7, $r9;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.util.Collection;
        r2 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();
        $i3 = lengthof r2;
        if $i3 != 0 goto label0;

        return 0;

     label0:
        $i4 = lengthof r2;
        r3 = newarray (java.lang.Object)[$i4];
        r4 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r4.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        r5 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        i0 = lengthof r5;
        i1 = 0;
        i2 = 0;

     label2:
        $i5 = lengthof r2;
        if i2 >= $i5 goto label4;

        r6 = r2[i2];
        $i6 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>(r6, r5, 0, i0);
        if $i6 >= 0 goto label3;

        $i7 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>(r6, r3, 0, i1);
        if $i7 >= 0 goto label3;

        $i8 = i1;
        i1 = i1 + 1;
        r3[$i8] = r6;

     label3:
        i2 = i2 + 1;
        goto label2;

     label4:
        if i1 <= 0 goto label5;

        $i9 = i0 + i1;
        r8 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r5, $i9);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r8, i0, i1);
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>(r8);

     label5:
        i10 = i1;

     label6:
        virtualinvoke r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return i10;

     label7:
        $r9 := @caughtexception;

     label8:
        r7 = $r9;

     label9:
        virtualinvoke r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r7;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void clear()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r4;
        java.lang.Object[] $r3;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        $r3 = newarray (java.lang.Object)[0];
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>($r3);

     label1:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label5;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        java.lang.Object[] r2, r4, r5;
        java.util.concurrent.locks.ReentrantLock r3;
        int i0, $i1, $i2, $i3, $i4;
        boolean z0;
        java.lang.Throwable r6, $r7;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.util.Collection;
        r2 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();
        $i1 = lengthof r2;
        if $i1 != 0 goto label0;

        return 0;

     label0:
        r3 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        r4 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        i0 = lengthof r4;
        $i2 = lengthof r2;
        $i3 = i0 + $i2;
        r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r4, $i3);
        $i4 = lengthof r2;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r5, i0, $i4);
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>(r5);
        z0 = 1;

     label2:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z0;

     label3:
        $r7 := @caughtexception;

     label4:
        r6 = $r7;

     label5:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.util.Collection r1;
        java.lang.Object[] r2, r4, r6;
        java.util.concurrent.locks.ReentrantLock r3;
        java.lang.StringBuilder $r5, $r9, $r10, $r11, $r12;
        boolean z0, z1;
        java.lang.Throwable r7, $r14;
        java.lang.IndexOutOfBoundsException $r8;
        java.lang.String $r13;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        i0 := @parameter0: int;
        r1 := @parameter1: java.util.Collection;
        r2 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();
        r3 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        r4 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        i1 = lengthof r4;
        if i0 > i1 goto label1;

        if i0 >= 0 goto label2;

     label1:
        $r8 = new java.lang.IndexOutOfBoundsException;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Size: ");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r13);
        throw $r8;

     label2:
        $i2 = lengthof r2;
        if $i2 != 0 goto label4;

        z0 = 0;

     label3:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z0;

     label4:
        i3 = i1 - i0;
        if i3 != 0 goto label5;

        $i4 = lengthof r2;
        $i5 = i1 + $i4;
        r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r4, $i5);
        goto label6;

     label5:
        $i6 = lengthof r2;
        $i7 = i1 + $i6;
        r6 = newarray (java.lang.Object)[$i7];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r6, 0, i0);
        $i8 = lengthof r2;
        $i9 = i0 + $i8;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, i0, r6, $i9, i3);

     label6:
        $i10 = lengthof r2;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r6, i0, $i10);
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>(r6);
        z1 = 1;

     label7:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z1;

     label8:
        $r14 := @caughtexception;

     label9:
        r7 = $r14;

     label10:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r7;

        catch java.lang.Throwable from label0 to label3 with label8;
        catch java.lang.Throwable from label4 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.io.ObjectOutputStream r1;
        java.lang.Object[] r2, r3;
        int i0, i1, $i2;
        java.lang.Object r4;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.io.ObjectOutputStream;
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        r2 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        $i2 = lengthof r2;
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i2);
        r3 = r2;
        i0 = lengthof r3;
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        r4 = r3[i1];
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r4);
        i1 = i1 + 1;
        goto label0;

     label1:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.io.ObjectInputStream r1;
        int i0, i1;
        java.lang.Object[] r2;
        java.lang.Object $r3;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void resetLock()>();
        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();
        r2 = newarray (java.lang.Object)[i0];
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        $r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        r2[i1] = $r3;
        i1 = i1 + 1;
        goto label0;

     label1:
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>(r2);
        return;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1;
        java.lang.String $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        $r1 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        $r2 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r1);
        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1, $r6, $r7;
        java.util.List r2, $r5;
        java.util.Iterator r3;
        java.lang.Object[] r4;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        r1 := @parameter0: java.lang.Object;
        if r1 != r0 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof java.util.List;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r5 = (java.util.List) r1;
        r2 = (java.util.List) $r5;
        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();
        r4 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        i0 = lengthof r4;
        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label3;

        $r6 = r4[i1];
        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        $z2 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: boolean eq(java.lang.Object,java.lang.Object)>($r6, $r7);
        if $z2 != 0 goto label4;

     label3:
        return 0;

     label4:
        i1 = i1 + 1;
        goto label2;

     label5:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z3 == 0 goto label6;

        return 0;

     label6:
        return 1;
    }

    public int hashCode()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, i1, i2, $i3, $i4;
        java.lang.Object[] r1;
        java.lang.Object r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        i0 = 1;
        r1 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        i1 = lengthof r1;
        i2 = 0;

     label0:
        if i2 >= i1 goto label3;

        r2 = r1[i2];
        $i3 = 31 * i0;
        if r2 != null goto label1;

        $i4 = 0;
        goto label2;

     label1:
        $i4 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

     label2:
        i0 = $i3 + $i4;
        i2 = i2 + 1;
        goto label0;

     label3:
        return i0;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.concurrent.CopyOnWriteArrayList$COWIterator $r1;
        java.lang.Object[] $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        $r1 = new java.util.concurrent.CopyOnWriteArrayList$COWIterator;
        $r2 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        specialinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: void <init>(java.lang.Object[],int,java.util.concurrent.CopyOnWriteArrayList$1)>($r2, 0, null);
        return $r1;
    }

    public java.util.ListIterator listIterator()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.concurrent.CopyOnWriteArrayList$COWIterator $r1;
        java.lang.Object[] $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        $r1 = new java.util.concurrent.CopyOnWriteArrayList$COWIterator;
        $r2 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        specialinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: void <init>(java.lang.Object[],int,java.util.concurrent.CopyOnWriteArrayList$1)>($r2, 0, null);
        return $r1;
    }

    public java.util.ListIterator listIterator(int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, i1;
        java.lang.Object[] r1;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.String $r6;
        java.util.concurrent.CopyOnWriteArrayList$COWIterator $r7;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        i0 := @parameter0: int;
        r1 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        i1 = lengthof r1;
        if i0 < 0 goto label0;

        if i0 <= i1 goto label1;

     label0:
        $r3 = new java.lang.IndexOutOfBoundsException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);
        throw $r3;

     label1:
        $r7 = new java.util.concurrent.CopyOnWriteArrayList$COWIterator;
        specialinvoke $r7.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: void <init>(java.lang.Object[],int,java.util.concurrent.CopyOnWriteArrayList$1)>(r1, i0, null);
        return $r7;
    }

    public java.util.List subList(int, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, i1, i2;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Object[] r2;
        java.util.concurrent.CopyOnWriteArrayList$COWSubList r3, $r6;
        java.lang.Throwable r4, $r7;
        java.lang.IndexOutOfBoundsException $r5;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        r2 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();
        i2 = lengthof r2;
        if i0 < 0 goto label1;

        if i1 > i2 goto label1;

        if i0 <= i1 goto label2;

     label1:
        $r5 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r5;

     label2:
        $r6 = new java.util.concurrent.CopyOnWriteArrayList$COWSubList;
        specialinvoke $r6.<java.util.concurrent.CopyOnWriteArrayList$COWSubList: void <init>(java.util.concurrent.CopyOnWriteArrayList,int,int)>(r0, i0, i1);
        r3 = $r6;

     label3:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return r3;

     label4:
        $r7 := @caughtexception;

     label5:
        r4 = $r7;

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void resetLock()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        sun.misc.Unsafe $r1;
        long $l0;
        java.util.concurrent.locks.ReentrantLock $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;
        $r1 = <java.util.concurrent.CopyOnWriteArrayList: sun.misc.Unsafe UNSAFE>;
        $l0 = <java.util.concurrent.CopyOnWriteArrayList: long lockOffset>;
        $r2 = new java.util.concurrent.locks.ReentrantLock;
        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();
        virtualinvoke $r1.<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>(r0, $l0, $r2);
        return;
    }

    static void access$100(java.util.concurrent.CopyOnWriteArrayList, int, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, i1;

        r0 := @parameter0: java.util.concurrent.CopyOnWriteArrayList;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void removeRange(int,int)>(i0, i1);
        return;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0, $r2;
        java.lang.Class r1;
        java.lang.reflect.Field $r3;
        long $l0;
        java.lang.Exception $r4, r5;
        java.lang.Error $r6;

     label0:
        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <java.util.concurrent.CopyOnWriteArrayList: sun.misc.Unsafe UNSAFE> = $r0;
        r1 = class "java/util/concurrent/CopyOnWriteArrayList";
        $r2 = <java.util.concurrent.CopyOnWriteArrayList: sun.misc.Unsafe UNSAFE>;
        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("lock");
        $l0 = virtualinvoke $r2.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);
        <java.util.concurrent.CopyOnWriteArrayList: long lockOffset> = $l0;

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r5 = $r4;
        $r6 = new java.lang.Error;
        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.Throwable)>(r5);
        throw $r6;

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }
}
