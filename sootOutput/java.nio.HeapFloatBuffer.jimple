class java.nio.HeapFloatBuffer extends java.nio.FloatBuffer
{

    void <init>(int, int)
    {
        java.nio.HeapFloatBuffer r0;
        int i0, i1;
        float[] $r1;

        r0 := @this: java.nio.HeapFloatBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = newarray (float)[i0];
        specialinvoke r0.<java.nio.FloatBuffer: void <init>(int,int,int,int,float[],int)>(-1, 0, i1, i0, $r1, 0);
        return;
    }

    void <init>(float[], int, int)
    {
        java.nio.HeapFloatBuffer r0;
        float[] r1;
        int i0, i1, $i2, $i3;

        r0 := @this: java.nio.HeapFloatBuffer;
        r1 := @parameter0: float[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = i0 + i1;
        $i3 = lengthof r1;
        specialinvoke r0.<java.nio.FloatBuffer: void <init>(int,int,int,int,float[],int)>(-1, i0, $i2, $i3, r1, 0);
        return;
    }

    protected void <init>(float[], int, int, int, int, int)
    {
        java.nio.HeapFloatBuffer r0;
        float[] r1;
        int i0, i1, i2, i3, i4;

        r0 := @this: java.nio.HeapFloatBuffer;
        r1 := @parameter0: float[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        specialinvoke r0.<java.nio.FloatBuffer: void <init>(int,int,int,int,float[],int)>(i0, i1, i2, i3, r1, i4);
        return;
    }

    public java.nio.FloatBuffer slice()
    {
        java.nio.HeapFloatBuffer r0, $r1;
        float[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapFloatBuffer;
        $r1 = new java.nio.HeapFloatBuffer;
        $r2 = r0.<java.nio.HeapFloatBuffer: float[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int remaining()>();
        $i1 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int remaining()>();
        $i2 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int position()>();
        $i3 = r0.<java.nio.HeapFloatBuffer: int offset>;
        $i4 = $i2 + $i3;
        specialinvoke $r1.<java.nio.HeapFloatBuffer: void <init>(float[],int,int,int,int,int)>($r2, -1, 0, $i0, $i1, $i4);
        return $r1;
    }

    public java.nio.FloatBuffer duplicate()
    {
        java.nio.HeapFloatBuffer r0, $r1;
        float[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapFloatBuffer;
        $r1 = new java.nio.HeapFloatBuffer;
        $r2 = r0.<java.nio.HeapFloatBuffer: float[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int position()>();
        $i2 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int capacity()>();
        $i4 = r0.<java.nio.HeapFloatBuffer: int offset>;
        specialinvoke $r1.<java.nio.HeapFloatBuffer: void <init>(float[],int,int,int,int,int)>($r2, $i0, $i1, $i2, $i3, $i4);
        return $r1;
    }

    public java.nio.FloatBuffer asReadOnlyBuffer()
    {
        java.nio.HeapFloatBuffer r0;
        java.nio.HeapFloatBufferR $r1;
        float[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapFloatBuffer;
        $r1 = new java.nio.HeapFloatBufferR;
        $r2 = r0.<java.nio.HeapFloatBuffer: float[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int position()>();
        $i2 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int capacity()>();
        $i4 = r0.<java.nio.HeapFloatBuffer: int offset>;
        specialinvoke $r1.<java.nio.HeapFloatBufferR: void <init>(float[],int,int,int,int,int)>($r2, $i0, $i1, $i2, $i3, $i4);
        return $r1;
    }

    protected int ix(int)
    {
        java.nio.HeapFloatBuffer r0;
        int i0, $i1, $i2;

        r0 := @this: java.nio.HeapFloatBuffer;
        i0 := @parameter0: int;
        $i1 = r0.<java.nio.HeapFloatBuffer: int offset>;
        $i2 = i0 + $i1;
        return $i2;
    }

    public float get()
    {
        java.nio.HeapFloatBuffer r0;
        float[] $r1;
        int $i0, $i1;
        float $f0;

        r0 := @this: java.nio.HeapFloatBuffer;
        $r1 = r0.<java.nio.HeapFloatBuffer: float[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int nextGetIndex()>();
        $i1 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int ix(int)>($i0);
        $f0 = $r1[$i1];
        return $f0;
    }

    public float get(int)
    {
        java.nio.HeapFloatBuffer r0;
        int i0, $i1, $i2;
        float[] $r1;
        float $f0;

        r0 := @this: java.nio.HeapFloatBuffer;
        i0 := @parameter0: int;
        $r1 = r0.<java.nio.HeapFloatBuffer: float[] hb>;
        $i1 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int checkIndex(int)>(i0);
        $i2 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int ix(int)>($i1);
        $f0 = $r1[$i2];
        return $f0;
    }

    public java.nio.FloatBuffer get(float[], int, int)
    {
        java.nio.HeapFloatBuffer r0;
        float[] r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.nio.BufferUnderflowException $r2;

        r0 := @this: java.nio.HeapFloatBuffer;
        r1 := @parameter0: float[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = lengthof r1;
        staticinvoke <java.nio.HeapFloatBuffer: void checkBounds(int,int,int)>(i0, i1, $i2);
        $i3 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int remaining()>();
        if i1 <= $i3 goto label0;

        $r2 = new java.nio.BufferUnderflowException;
        specialinvoke $r2.<java.nio.BufferUnderflowException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.nio.HeapFloatBuffer: float[] hb>;
        $i4 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int position()>();
        $i5 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int ix(int)>($i4);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i5, r1, i0, i1);
        $i6 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int position()>();
        $i7 = $i6 + i1;
        virtualinvoke r0.<java.nio.HeapFloatBuffer: java.nio.Buffer position(int)>($i7);
        return r0;
    }

    public boolean isDirect()
    {
        java.nio.HeapFloatBuffer r0;

        r0 := @this: java.nio.HeapFloatBuffer;
        return 0;
    }

    public boolean isReadOnly()
    {
        java.nio.HeapFloatBuffer r0;

        r0 := @this: java.nio.HeapFloatBuffer;
        return 0;
    }

    public java.nio.FloatBuffer put(float)
    {
        java.nio.HeapFloatBuffer r0;
        float f0;
        float[] $r1;
        int $i0, $i1;

        r0 := @this: java.nio.HeapFloatBuffer;
        f0 := @parameter0: float;
        $r1 = r0.<java.nio.HeapFloatBuffer: float[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int nextPutIndex()>();
        $i1 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int ix(int)>($i0);
        $r1[$i1] = f0;
        return r0;
    }

    public java.nio.FloatBuffer put(int, float)
    {
        java.nio.HeapFloatBuffer r0;
        int i0, $i1, $i2;
        float f0;
        float[] $r1;

        r0 := @this: java.nio.HeapFloatBuffer;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        $r1 = r0.<java.nio.HeapFloatBuffer: float[] hb>;
        $i1 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int checkIndex(int)>(i0);
        $i2 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int ix(int)>($i1);
        $r1[$i2] = f0;
        return r0;
    }

    public java.nio.FloatBuffer put(float[], int, int)
    {
        java.nio.HeapFloatBuffer r0;
        float[] r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.nio.BufferOverflowException $r2;

        r0 := @this: java.nio.HeapFloatBuffer;
        r1 := @parameter0: float[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = lengthof r1;
        staticinvoke <java.nio.HeapFloatBuffer: void checkBounds(int,int,int)>(i0, i1, $i2);
        $i3 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int remaining()>();
        if i1 <= $i3 goto label0;

        $r2 = new java.nio.BufferOverflowException;
        specialinvoke $r2.<java.nio.BufferOverflowException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.nio.HeapFloatBuffer: float[] hb>;
        $i4 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int position()>();
        $i5 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int ix(int)>($i4);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r3, $i5, i1);
        $i6 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int position()>();
        $i7 = $i6 + i1;
        virtualinvoke r0.<java.nio.HeapFloatBuffer: java.nio.Buffer position(int)>($i7);
        return r0;
    }

    public java.nio.FloatBuffer put(java.nio.FloatBuffer)
    {
        java.nio.HeapFloatBuffer r0, r2;
        java.nio.FloatBuffer r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, $i15;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;
        java.nio.BufferOverflowException $r4, $r9;
        float[] $r5, $r6, $r10;

        r0 := @this: java.nio.HeapFloatBuffer;
        r1 := @parameter0: java.nio.FloatBuffer;
        $z0 = r1 instanceof java.nio.HeapFloatBuffer;
        if $z0 == 0 goto label2;

        if r1 != r0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r3;

     label0:
        r2 = (java.nio.HeapFloatBuffer) r1;
        i0 = virtualinvoke r2.<java.nio.HeapFloatBuffer: int remaining()>();
        $i1 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int remaining()>();
        if i0 <= $i1 goto label1;

        $r4 = new java.nio.BufferOverflowException;
        specialinvoke $r4.<java.nio.BufferOverflowException: void <init>()>();
        throw $r4;

     label1:
        $r5 = r2.<java.nio.HeapFloatBuffer: float[] hb>;
        $i2 = virtualinvoke r2.<java.nio.HeapFloatBuffer: int position()>();
        $i3 = virtualinvoke r2.<java.nio.HeapFloatBuffer: int ix(int)>($i2);
        $r6 = r0.<java.nio.HeapFloatBuffer: float[] hb>;
        $i4 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int position()>();
        $i5 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int ix(int)>($i4);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i3, $r6, $i5, i0);
        $i6 = virtualinvoke r2.<java.nio.HeapFloatBuffer: int position()>();
        $i7 = $i6 + i0;
        virtualinvoke r2.<java.nio.HeapFloatBuffer: java.nio.Buffer position(int)>($i7);
        $i8 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int position()>();
        $i9 = $i8 + i0;
        virtualinvoke r0.<java.nio.HeapFloatBuffer: java.nio.Buffer position(int)>($i9);
        goto label5;

     label2:
        $z1 = virtualinvoke r1.<java.nio.FloatBuffer: boolean isDirect()>();
        if $z1 == 0 goto label4;

        i10 = virtualinvoke r1.<java.nio.FloatBuffer: int remaining()>();
        $i11 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int remaining()>();
        if i10 <= $i11 goto label3;

        $r9 = new java.nio.BufferOverflowException;
        specialinvoke $r9.<java.nio.BufferOverflowException: void <init>()>();
        throw $r9;

     label3:
        $r10 = r0.<java.nio.HeapFloatBuffer: float[] hb>;
        $i12 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int position()>();
        $i13 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int ix(int)>($i12);
        virtualinvoke r1.<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[],int,int)>($r10, $i13, i10);
        $i14 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int position()>();
        $i15 = $i14 + i10;
        virtualinvoke r0.<java.nio.HeapFloatBuffer: java.nio.Buffer position(int)>($i15);
        goto label5;

     label4:
        specialinvoke r0.<java.nio.FloatBuffer: java.nio.FloatBuffer put(java.nio.FloatBuffer)>(r1);

     label5:
        return r0;
    }

    public java.nio.FloatBuffer compact()
    {
        java.nio.HeapFloatBuffer r0;
        float[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: java.nio.HeapFloatBuffer;
        $r1 = r0.<java.nio.HeapFloatBuffer: float[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int position()>();
        $i1 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int ix(int)>($i0);
        $r2 = r0.<java.nio.HeapFloatBuffer: float[] hb>;
        $i2 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int ix(int)>(0);
        $i3 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int remaining()>();
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, $r2, $i2, $i3);
        $i4 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int remaining()>();
        virtualinvoke r0.<java.nio.HeapFloatBuffer: java.nio.Buffer position(int)>($i4);
        $i5 = virtualinvoke r0.<java.nio.HeapFloatBuffer: int capacity()>();
        virtualinvoke r0.<java.nio.HeapFloatBuffer: java.nio.Buffer limit(int)>($i5);
        virtualinvoke r0.<java.nio.HeapFloatBuffer: void discardMark()>();
        return r0;
    }

    public java.nio.ByteOrder order()
    {
        java.nio.HeapFloatBuffer r0;
        java.nio.ByteOrder $r1;

        r0 := @this: java.nio.HeapFloatBuffer;
        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();
        return $r1;
    }
}
