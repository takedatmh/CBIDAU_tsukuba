public abstract class org.apache.coyote.http11.AbstractHttp11Protocol extends org.apache.coyote.AbstractProtocol
{
    protected static final org.apache.tomcat.util.res.StringManager sm;
    private java.lang.String relaxedPathChars;
    private java.lang.String relaxedQueryChars;
    private boolean allowHostHeaderMismatch;
    private boolean rejectIllegalHeaderName;
    private int socketBuffer;
    private int maxSavePostSize;
    private int maxHttpHeaderSize;
    private int connectionUploadTimeout;
    private boolean disableUploadTimeout;
    private java.lang.String compression;
    private java.lang.String noCompressionUserAgents;
    private java.lang.String compressibleMimeTypes;
    private int compressionMinSize;
    private java.lang.String restrictedUserAgents;
    private java.lang.String server;
    private int maxTrailerSize;
    private int maxExtensionSize;
    private int maxSwallowSize;
    private boolean secure;
    private int upgradeAsyncWriteBufferSize;
    private java.util.Set allowedTrailerHeaders;

    static void <clinit>()
    {
        org.apache.tomcat.util.res.StringManager $r0;

        $r0 = staticinvoke <org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>("org.apache.coyote.http11");
        <org.apache.coyote.http11.AbstractHttp11Protocol: org.apache.tomcat.util.res.StringManager sm> = $r0;
        return;
    }

    public void <init>()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.util.Set $r2;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        specialinvoke r0.<org.apache.coyote.AbstractProtocol: void <init>()>();
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String relaxedPathChars> = null;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String relaxedQueryChars> = null;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: boolean allowHostHeaderMismatch> = 1;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: boolean rejectIllegalHeaderName> = 0;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int socketBuffer> = 9000;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int maxSavePostSize> = 4096;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int maxHttpHeaderSize> = 8192;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int connectionUploadTimeout> = 300000;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: boolean disableUploadTimeout> = 1;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String compression> = "off";
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String noCompressionUserAgents> = null;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String compressibleMimeTypes> = "text/html,text/xml,text/plain,text/css,text/javascript,application/javascript";
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int compressionMinSize> = 2048;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String restrictedUserAgents> = null;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int maxTrailerSize> = 8192;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int maxExtensionSize> = 8192;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int maxSwallowSize> = 2097152;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int upgradeAsyncWriteBufferSize> = 8192;
        $r1 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
        $r2 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r1);
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.util.Set allowedTrailerHeaders> = $r2;
        return;
    }

    protected java.lang.String getProtocolName()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        return "Http";
    }

    public java.lang.String getRelaxedPathChars()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String $r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $r1 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String relaxedPathChars>;
        return $r1;
    }

    public void setRelaxedPathChars(java.lang.String)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        r1 := @parameter0: java.lang.String;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String relaxedPathChars> = r1;
        return;
    }

    public java.lang.String getRelaxedQueryChars()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String $r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $r1 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String relaxedQueryChars>;
        return $r1;
    }

    public void setRelaxedQueryChars(java.lang.String)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        r1 := @parameter0: java.lang.String;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String relaxedQueryChars> = r1;
        return;
    }

    public boolean getAllowHostHeaderMismatch()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        boolean $z0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $z0 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: boolean allowHostHeaderMismatch>;
        return $z0;
    }

    public void setAllowHostHeaderMismatch(boolean)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        boolean z0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        z0 := @parameter0: boolean;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: boolean allowHostHeaderMismatch> = z0;
        return;
    }

    public boolean getRejectIllegalHeaderName()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        boolean $z0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $z0 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: boolean rejectIllegalHeaderName>;
        return $z0;
    }

    public void setRejectIllegalHeaderName(boolean)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        boolean z0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        z0 := @parameter0: boolean;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: boolean rejectIllegalHeaderName> = z0;
        return;
    }

    public int getSocketBuffer()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int $i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $i0 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int socketBuffer>;
        return $i0;
    }

    public void setSocketBuffer(int)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        i0 := @parameter0: int;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int socketBuffer> = i0;
        return;
    }

    public int getMaxSavePostSize()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int $i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $i0 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int maxSavePostSize>;
        return $i0;
    }

    public void setMaxSavePostSize(int)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        i0 := @parameter0: int;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int maxSavePostSize> = i0;
        return;
    }

    public int getMaxHttpHeaderSize()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int $i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $i0 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int maxHttpHeaderSize>;
        return $i0;
    }

    public void setMaxHttpHeaderSize(int)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        i0 := @parameter0: int;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int maxHttpHeaderSize> = i0;
        return;
    }

    public int getConnectionUploadTimeout()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int $i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $i0 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int connectionUploadTimeout>;
        return $i0;
    }

    public void setConnectionUploadTimeout(int)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        i0 := @parameter0: int;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int connectionUploadTimeout> = i0;
        return;
    }

    public boolean getDisableUploadTimeout()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        boolean $z0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $z0 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: boolean disableUploadTimeout>;
        return $z0;
    }

    public void setDisableUploadTimeout(boolean)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        boolean z0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        z0 := @parameter0: boolean;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: boolean disableUploadTimeout> = z0;
        return;
    }

    public java.lang.String getCompression()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String $r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $r1 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String compression>;
        return $r1;
    }

    public void setCompression(java.lang.String)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        r1 := @parameter0: java.lang.String;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String compression> = r1;
        return;
    }

    public java.lang.String getNoCompressionUserAgents()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String $r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $r1 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String noCompressionUserAgents>;
        return $r1;
    }

    public void setNoCompressionUserAgents(java.lang.String)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        r1 := @parameter0: java.lang.String;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String noCompressionUserAgents> = r1;
        return;
    }

    public java.lang.String getCompressableMimeType()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String $r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $r1 = virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String getCompressibleMimeType()>();
        return $r1;
    }

    public void setCompressableMimeType(java.lang.String)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        r1 := @parameter0: java.lang.String;
        virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: void setCompressibleMimeType(java.lang.String)>(r1);
        return;
    }

    public java.lang.String getCompressableMimeTypes()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String $r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $r1 = virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String getCompressibleMimeType()>();
        return $r1;
    }

    public void setCompressableMimeTypes(java.lang.String)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        r1 := @parameter0: java.lang.String;
        virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: void setCompressibleMimeType(java.lang.String)>(r1);
        return;
    }

    public java.lang.String getCompressibleMimeType()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String $r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $r1 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String compressibleMimeTypes>;
        return $r1;
    }

    public void setCompressibleMimeType(java.lang.String)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        r1 := @parameter0: java.lang.String;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String compressibleMimeTypes> = r1;
        return;
    }

    public int getCompressionMinSize()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int $i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $i0 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int compressionMinSize>;
        return $i0;
    }

    public void setCompressionMinSize(int)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        i0 := @parameter0: int;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int compressionMinSize> = i0;
        return;
    }

    public java.lang.String getRestrictedUserAgents()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String $r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $r1 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String restrictedUserAgents>;
        return $r1;
    }

    public void setRestrictedUserAgents(java.lang.String)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        r1 := @parameter0: java.lang.String;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String restrictedUserAgents> = r1;
        return;
    }

    public java.lang.String getServer()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String $r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $r1 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String server>;
        return $r1;
    }

    public void setServer(java.lang.String)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        r1 := @parameter0: java.lang.String;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String server> = r1;
        return;
    }

    public int getMaxTrailerSize()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int $i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $i0 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int maxTrailerSize>;
        return $i0;
    }

    public void setMaxTrailerSize(int)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        i0 := @parameter0: int;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int maxTrailerSize> = i0;
        return;
    }

    public int getMaxExtensionSize()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int $i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $i0 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int maxExtensionSize>;
        return $i0;
    }

    public void setMaxExtensionSize(int)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        i0 := @parameter0: int;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int maxExtensionSize> = i0;
        return;
    }

    public int getMaxSwallowSize()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int $i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $i0 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int maxSwallowSize>;
        return $i0;
    }

    public void setMaxSwallowSize(int)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        i0 := @parameter0: int;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int maxSwallowSize> = i0;
        return;
    }

    public boolean getSecure()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        boolean $z0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $z0 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: boolean secure>;
        return $z0;
    }

    public void setSecure(boolean)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        boolean z0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        z0 := @parameter0: boolean;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: boolean secure> = z0;
        return;
    }

    public int getUpgradeAsyncWriteBufferSize()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int $i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $i0 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int upgradeAsyncWriteBufferSize>;
        return $i0;
    }

    public void setUpgradeAsyncWriteBufferSize(int)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        i0 := @parameter0: int;
        r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int upgradeAsyncWriteBufferSize> = i0;
        return;
    }

    public void setAllowedTrailerHeaders(java.lang.String)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String r1, r6, r7, $r10;
        java.util.HashSet $r2, r3;
        java.lang.String[] r4, r5;
        int i0, i1;
        java.util.Set $r8, $r12, $r13;
        java.util.Locale $r11;
        boolean $z1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        r1 := @parameter0: java.lang.String;
        $r2 = new java.util.HashSet;
        specialinvoke $r2.<java.util.HashSet: void <init>()>();
        r3 = $r2;
        $r8 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.util.Set allowedTrailerHeaders>;
        interfaceinvoke r3.<java.util.Set: boolean addAll(java.util.Collection)>($r8);
        if r1 == null goto label4;

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");
        r5 = r4;
        i0 = lengthof r4;
        i1 = 0;
        goto label3;

     label0:
        r6 = r5[i1];
        $r10 = virtualinvoke r6.<java.lang.String: java.lang.String trim()>();
        $r11 = <java.util.Locale: java.util.Locale ENGLISH>;
        r7 = virtualinvoke $r10.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r11);
        $z1 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r7);
        if $z1 == 0 goto label1;

        interfaceinvoke r3.<java.util.Set: boolean remove(java.lang.Object)>(r7);
        goto label2;

     label1:
        $r12 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.util.Set allowedTrailerHeaders>;
        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>(r7);

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label0;

        $r13 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.util.Set allowedTrailerHeaders>;
        interfaceinvoke $r13.<java.util.Set: boolean removeAll(java.util.Collection)>(r3);

     label4:
        return;
    }

    public java.lang.String getAllowedTrailerHeaders()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.util.ArrayList $r1, r2;
        java.lang.StringBuilder r3, $r8;
        boolean z0, $z2;
        java.util.Iterator r4;
        java.lang.String r5, $r12;
        java.util.Set $r6, $r7;
        int $i0;
        java.lang.Object $r9;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $r1 = new java.util.ArrayList;
        $r6 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.util.Set allowedTrailerHeaders>;
        $i0 = interfaceinvoke $r6.<java.util.Set: int size()>();
        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);
        r2 = $r1;
        $r7 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.util.Set allowedTrailerHeaders>;
        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r7);
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        r3 = $r8;
        z0 = 1;
        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();
        goto label3;

     label0:
        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.lang.String) $r9;
        if z0 == 0 goto label1;

        z0 = 0;
        goto label2;

     label1:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

     label3:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z2 != 0 goto label0;

        $r12 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r12;
    }

    public void addAllowedTrailerHeader(java.lang.String)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String r1, $r4, $r5;
        java.util.Locale $r2;
        java.util.Set $r3;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        r1 := @parameter0: java.lang.String;
        if r1 == null goto label0;

        $r3 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.util.Set allowedTrailerHeaders>;
        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();
        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);
        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r5);

     label0:
        return;
    }

    public void removeAllowedTrailerHeader(java.lang.String)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.lang.String r1, $r4, $r5;
        java.util.Locale $r2;
        java.util.Set $r3;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        r1 := @parameter0: java.lang.String;
        if r1 == null goto label0;

        $r3 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.util.Set allowedTrailerHeaders>;
        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();
        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);
        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>($r5);

     label0:
        return;
    }

    protected java.util.Set getAllowedTrailerHeadersAsSet()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        java.util.Set $r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $r1 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.util.Set allowedTrailerHeaders>;
        return $r1;
    }

    public boolean isSSLEnabled()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        org.apache.tomcat.util.net.AbstractEndpoint $r1;
        boolean $z0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $r1 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: org.apache.tomcat.util.net.AbstractEndpoint endpoint>;
        $z0 = virtualinvoke $r1.<org.apache.tomcat.util.net.AbstractEndpoint: boolean isSSLEnabled()>();
        return $z0;
    }

    public void setSSLEnabled(boolean)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        boolean z0;
        org.apache.tomcat.util.net.AbstractEndpoint $r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        z0 := @parameter0: boolean;
        $r1 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: org.apache.tomcat.util.net.AbstractEndpoint endpoint>;
        virtualinvoke $r1.<org.apache.tomcat.util.net.AbstractEndpoint: void setSSLEnabled(boolean)>(z0);
        return;
    }

    public int getMaxKeepAliveRequests()
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        org.apache.tomcat.util.net.AbstractEndpoint $r1;
        int $i0;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        $r1 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: org.apache.tomcat.util.net.AbstractEndpoint endpoint>;
        $i0 = virtualinvoke $r1.<org.apache.tomcat.util.net.AbstractEndpoint: int getMaxKeepAliveRequests()>();
        return $i0;
    }

    public void setMaxKeepAliveRequests(int)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        int i0;
        org.apache.tomcat.util.net.AbstractEndpoint $r1;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        i0 := @parameter0: int;
        $r1 = r0.<org.apache.coyote.http11.AbstractHttp11Protocol: org.apache.tomcat.util.net.AbstractEndpoint endpoint>;
        virtualinvoke $r1.<org.apache.tomcat.util.net.AbstractEndpoint: void setMaxKeepAliveRequests(int)>(i0);
        return;
    }

    protected void configureProcessor(org.apache.coyote.http11.AbstractHttp11Processor)
    {
        org.apache.coyote.http11.AbstractHttp11Protocol r0;
        org.apache.coyote.http11.AbstractHttp11Processor r1;
        org.apache.coyote.Adapter $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1;
        java.lang.String $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.coyote.http11.AbstractHttp11Protocol;
        r1 := @parameter0: org.apache.coyote.http11.AbstractHttp11Processor;
        $r2 = virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: org.apache.coyote.Adapter getAdapter()>();
        virtualinvoke r1.<org.apache.coyote.http11.AbstractHttp11Processor: void setAdapter(org.apache.coyote.Adapter)>($r2);
        $i0 = virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int getMaxKeepAliveRequests()>();
        virtualinvoke r1.<org.apache.coyote.http11.AbstractHttp11Processor: void setMaxKeepAliveRequests(int)>($i0);
        $i1 = virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int getKeepAliveTimeout()>();
        virtualinvoke r1.<org.apache.coyote.http11.AbstractHttp11Processor: void setKeepAliveTimeout(int)>($i1);
        $i2 = virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int getConnectionUploadTimeout()>();
        virtualinvoke r1.<org.apache.coyote.http11.AbstractHttp11Processor: void setConnectionUploadTimeout(int)>($i2);
        $z0 = virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: boolean getDisableUploadTimeout()>();
        virtualinvoke r1.<org.apache.coyote.http11.AbstractHttp11Processor: void setDisableUploadTimeout(boolean)>($z0);
        $i3 = virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int getCompressionMinSize()>();
        virtualinvoke r1.<org.apache.coyote.http11.AbstractHttp11Processor: void setCompressionMinSize(int)>($i3);
        $r3 = virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String getCompression()>();
        virtualinvoke r1.<org.apache.coyote.http11.AbstractHttp11Processor: void setCompression(java.lang.String)>($r3);
        $r4 = virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String getNoCompressionUserAgents()>();
        virtualinvoke r1.<org.apache.coyote.http11.AbstractHttp11Processor: void setNoCompressionUserAgents(java.lang.String)>($r4);
        $r5 = virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String getCompressibleMimeType()>();
        virtualinvoke r1.<org.apache.coyote.http11.AbstractHttp11Processor: void setCompressibleMimeTypes(java.lang.String)>($r5);
        $r6 = virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String getRestrictedUserAgents()>();
        virtualinvoke r1.<org.apache.coyote.http11.AbstractHttp11Processor: void setRestrictedUserAgents(java.lang.String)>($r6);
        $i4 = virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int getSocketBuffer()>();
        virtualinvoke r1.<org.apache.coyote.http11.AbstractHttp11Processor: void setSocketBuffer(int)>($i4);
        $i5 = virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int getMaxSavePostSize()>();
        virtualinvoke r1.<org.apache.coyote.http11.AbstractHttp11Processor: void setMaxSavePostSize(int)>($i5);
        $r7 = virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: java.lang.String getServer()>();
        virtualinvoke r1.<org.apache.coyote.http11.AbstractHttp11Processor: void setServer(java.lang.String)>($r7);
        $i6 = virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: int getMaxCookieCount()>();
        virtualinvoke r1.<org.apache.coyote.http11.AbstractHttp11Processor: void setMaxCookieCount(int)>($i6);
        $z1 = virtualinvoke r0.<org.apache.coyote.http11.AbstractHttp11Protocol: boolean getAllowHostHeaderMismatch()>();
        virtualinvoke r1.<org.apache.coyote.http11.AbstractHttp11Processor: void setAllowHostHeaderMismatch(boolean)>($z1);
        return;
    }
}
