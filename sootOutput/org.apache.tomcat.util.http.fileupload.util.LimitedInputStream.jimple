public abstract class org.apache.tomcat.util.http.fileupload.util.LimitedInputStream extends java.io.FilterInputStream implements org.apache.tomcat.util.http.fileupload.util.Closeable
{
    private final long sizeMax;
    private long count;
    private boolean closed;

    public void <init>(java.io.InputStream, long)
    {
        org.apache.tomcat.util.http.fileupload.util.LimitedInputStream r0;
        java.io.InputStream r1;
        long l0;

        r0 := @this: org.apache.tomcat.util.http.fileupload.util.LimitedInputStream;
        r1 := @parameter0: java.io.InputStream;
        l0 := @parameter1: long;
        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);
        r0.<org.apache.tomcat.util.http.fileupload.util.LimitedInputStream: long sizeMax> = l0;
        return;
    }

    protected abstract void raiseError(long, long) throws java.io.IOException;

    private void checkLimit() throws java.io.IOException
    {
        org.apache.tomcat.util.http.fileupload.util.LimitedInputStream r0;
        long $l0, $l1, $l3, $l4;
        byte $b2;

        r0 := @this: org.apache.tomcat.util.http.fileupload.util.LimitedInputStream;
        $l0 = r0.<org.apache.tomcat.util.http.fileupload.util.LimitedInputStream: long count>;
        $l1 = r0.<org.apache.tomcat.util.http.fileupload.util.LimitedInputStream: long sizeMax>;
        $b2 = $l0 cmp $l1;
        if $b2 <= 0 goto label0;

        $l3 = r0.<org.apache.tomcat.util.http.fileupload.util.LimitedInputStream: long sizeMax>;
        $l4 = r0.<org.apache.tomcat.util.http.fileupload.util.LimitedInputStream: long count>;
        virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.util.LimitedInputStream: void raiseError(long,long)>($l3, $l4);

     label0:
        return;
    }

    public int read() throws java.io.IOException
    {
        org.apache.tomcat.util.http.fileupload.util.LimitedInputStream r0;
        int i0;
        long $l1, $l2;

        r0 := @this: org.apache.tomcat.util.http.fileupload.util.LimitedInputStream;
        i0 = specialinvoke r0.<java.io.FilterInputStream: int read()>();
        if i0 == -1 goto label0;

        $l1 = r0.<org.apache.tomcat.util.http.fileupload.util.LimitedInputStream: long count>;
        $l2 = $l1 + 1L;
        r0.<org.apache.tomcat.util.http.fileupload.util.LimitedInputStream: long count> = $l2;
        specialinvoke r0.<org.apache.tomcat.util.http.fileupload.util.LimitedInputStream: void checkLimit()>();

     label0:
        return i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.tomcat.util.http.fileupload.util.LimitedInputStream r0;
        byte[] r1;
        int i0, i1, i2;
        long $l3, $l4, $l5;

        r0 := @this: org.apache.tomcat.util.http.fileupload.util.LimitedInputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = specialinvoke r0.<java.io.FilterInputStream: int read(byte[],int,int)>(r1, i0, i1);
        if i2 <= 0 goto label0;

        $l3 = r0.<org.apache.tomcat.util.http.fileupload.util.LimitedInputStream: long count>;
        $l4 = (long) i2;
        $l5 = $l3 + $l4;
        r0.<org.apache.tomcat.util.http.fileupload.util.LimitedInputStream: long count> = $l5;
        specialinvoke r0.<org.apache.tomcat.util.http.fileupload.util.LimitedInputStream: void checkLimit()>();

     label0:
        return i2;
    }

    public boolean isClosed() throws java.io.IOException
    {
        org.apache.tomcat.util.http.fileupload.util.LimitedInputStream r0;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.http.fileupload.util.LimitedInputStream;
        $z0 = r0.<org.apache.tomcat.util.http.fileupload.util.LimitedInputStream: boolean closed>;
        return $z0;
    }

    public void close() throws java.io.IOException
    {
        org.apache.tomcat.util.http.fileupload.util.LimitedInputStream r0;

        r0 := @this: org.apache.tomcat.util.http.fileupload.util.LimitedInputStream;
        r0.<org.apache.tomcat.util.http.fileupload.util.LimitedInputStream: boolean closed> = 1;
        specialinvoke r0.<java.io.FilterInputStream: void close()>();
        return;
    }
}
