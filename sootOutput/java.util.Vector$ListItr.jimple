final class java.util.Vector$ListItr extends java.util.Vector$Itr implements java.util.ListIterator
{
    final java.util.Vector this$0;

    void <init>(java.util.Vector, int)
    {
        java.util.Vector$ListItr r0;
        java.util.Vector r1;
        int i0;

        r0 := @this: java.util.Vector$ListItr;
        r1 := @parameter0: java.util.Vector;
        i0 := @parameter1: int;
        r0.<java.util.Vector$ListItr: java.util.Vector this$0> = r1;
        specialinvoke r0.<java.util.Vector$Itr: void <init>(java.util.Vector,java.util.Vector$1)>(r1, null);
        r0.<java.util.Vector$ListItr: int cursor> = i0;
        return;
    }

    public boolean hasPrevious()
    {
        java.util.Vector$ListItr r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.Vector$ListItr;
        $i0 = r0.<java.util.Vector$ListItr: int cursor>;
        if $i0 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public int nextIndex()
    {
        java.util.Vector$ListItr r0;
        int $i0;

        r0 := @this: java.util.Vector$ListItr;
        $i0 = r0.<java.util.Vector$ListItr: int cursor>;
        return $i0;
    }

    public int previousIndex()
    {
        java.util.Vector$ListItr r0;
        int $i0, $i1;

        r0 := @this: java.util.Vector$ListItr;
        $i0 = r0.<java.util.Vector$ListItr: int cursor>;
        $i1 = $i0 - 1;
        return $i1;
    }

    public java.lang.Object previous()
    {
        java.util.Vector$ListItr r0;
        java.util.Vector r1, $r3, $r5;
        int i0, $i2;
        java.lang.Throwable r2, $r7;
        java.util.NoSuchElementException $r4;
        java.lang.Object $r6;

        r0 := @this: java.util.Vector$ListItr;
        $r3 = r0.<java.util.Vector$ListItr: java.util.Vector this$0>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        virtualinvoke r0.<java.util.Vector$ListItr: void checkForComodification()>();
        $i2 = r0.<java.util.Vector$ListItr: int cursor>;
        i0 = $i2 - 1;
        if i0 >= 0 goto label1;

        $r4 = new java.util.NoSuchElementException;
        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();
        throw $r4;

     label1:
        r0.<java.util.Vector$ListItr: int cursor> = i0;
        $r5 = r0.<java.util.Vector$ListItr: java.util.Vector this$0>;
        r0.<java.util.Vector$ListItr: int lastRet> = i0;
        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object elementData(int)>(i0);
        exitmonitor r1;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

     label4:
        r2 = $r7;
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void set(java.lang.Object)
    {
        java.util.Vector$ListItr r0;
        java.lang.Object r1;
        java.util.Vector r2, $r5, $r6;
        java.lang.Throwable r3, $r8;
        int $i0, $i1;
        java.lang.IllegalStateException $r4;

        r0 := @this: java.util.Vector$ListItr;
        r1 := @parameter0: java.lang.Object;
        $i0 = r0.<java.util.Vector$ListItr: int lastRet>;
        if $i0 != -1 goto label0;

        $r4 = new java.lang.IllegalStateException;
        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();
        throw $r4;

     label0:
        $r5 = r0.<java.util.Vector$ListItr: java.util.Vector this$0>;
        r2 = $r5;
        entermonitor $r5;

     label1:
        virtualinvoke r0.<java.util.Vector$ListItr: void checkForComodification()>();
        $r6 = r0.<java.util.Vector$ListItr: java.util.Vector this$0>;
        $i1 = r0.<java.util.Vector$ListItr: int lastRet>;
        virtualinvoke $r6.<java.util.Vector: java.lang.Object set(int,java.lang.Object)>($i1, r1);
        exitmonitor r2;

     label2:
        goto label6;

     label3:
        $r8 := @caughtexception;

     label4:
        r3 = $r8;
        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void add(java.lang.Object)
    {
        java.util.Vector$ListItr r0;
        java.lang.Object r1;
        int i0, $i1, $i2;
        java.util.Vector r2, $r4, $r5, $r6;
        java.lang.Throwable r3, $r7;

        r0 := @this: java.util.Vector$ListItr;
        r1 := @parameter0: java.lang.Object;
        i0 = r0.<java.util.Vector$ListItr: int cursor>;
        $r4 = r0.<java.util.Vector$ListItr: java.util.Vector this$0>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        virtualinvoke r0.<java.util.Vector$ListItr: void checkForComodification()>();
        $r5 = r0.<java.util.Vector$ListItr: java.util.Vector this$0>;
        virtualinvoke $r5.<java.util.Vector: void add(int,java.lang.Object)>(i0, r1);
        $r6 = r0.<java.util.Vector$ListItr: java.util.Vector this$0>;
        $i1 = $r6.<java.util.Vector: int modCount>;
        r0.<java.util.Vector$ListItr: int expectedModCount> = $i1;
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r7 := @caughtexception;

     label3:
        r3 = $r7;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        $i2 = i0 + 1;
        r0.<java.util.Vector$ListItr: int cursor> = $i2;
        r0.<java.util.Vector$ListItr: int lastRet> = -1;
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
}
