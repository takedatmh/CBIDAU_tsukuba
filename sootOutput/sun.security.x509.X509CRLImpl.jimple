public class sun.security.x509.X509CRLImpl extends java.security.cert.X509CRL implements sun.security.util.DerEncoder
{
    private byte[] signedCRL;
    private byte[] signature;
    private byte[] tbsCertList;
    private sun.security.x509.AlgorithmId sigAlgId;
    private int version;
    private sun.security.x509.AlgorithmId infoSigAlgId;
    private sun.security.x509.X500Name issuer;
    private javax.security.auth.x500.X500Principal issuerPrincipal;
    private java.util.Date thisUpdate;
    private java.util.Date nextUpdate;
    private java.util.Map revokedMap;
    private java.util.List revokedList;
    private sun.security.x509.CRLExtensions extensions;
    private static final boolean isExplicit;
    private static final long YR_2050;
    private boolean readOnly;
    private java.security.PublicKey verifiedPublicKey;
    private java.lang.String verifiedProvider;

    private void <init>()
    {
        sun.security.x509.X509CRLImpl r0;
        java.util.TreeMap $r1;
        java.util.LinkedList $r2;

        r0 := @this: sun.security.x509.X509CRLImpl;
        specialinvoke r0.<java.security.cert.X509CRL: void <init>()>();
        r0.<sun.security.x509.X509CRLImpl: byte[] signedCRL> = null;
        r0.<sun.security.x509.X509CRLImpl: byte[] signature> = null;
        r0.<sun.security.x509.X509CRLImpl: byte[] tbsCertList> = null;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId> = null;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.X500Name issuer> = null;
        r0.<sun.security.x509.X509CRLImpl: javax.security.auth.x500.X500Principal issuerPrincipal> = null;
        r0.<sun.security.x509.X509CRLImpl: java.util.Date thisUpdate> = null;
        r0.<sun.security.x509.X509CRLImpl: java.util.Date nextUpdate> = null;
        $r1 = new java.util.TreeMap;
        specialinvoke $r1.<java.util.TreeMap: void <init>()>();
        r0.<sun.security.x509.X509CRLImpl: java.util.Map revokedMap> = $r1;
        $r2 = new java.util.LinkedList;
        specialinvoke $r2.<java.util.LinkedList: void <init>()>();
        r0.<sun.security.x509.X509CRLImpl: java.util.List revokedList> = $r2;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions> = null;
        r0.<sun.security.x509.X509CRLImpl: boolean readOnly> = 0;
        return;
    }

    public void <init>(byte[]) throws java.security.cert.CRLException
    {
        sun.security.x509.X509CRLImpl r0;
        byte[] r1;
        java.io.IOException r2, $r6;
        java.util.TreeMap $r3;
        java.util.LinkedList $r4;
        sun.security.util.DerValue $r5;
        java.security.cert.CRLException $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r10, $r12;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: byte[];
        specialinvoke r0.<java.security.cert.X509CRL: void <init>()>();
        r0.<sun.security.x509.X509CRLImpl: byte[] signedCRL> = null;
        r0.<sun.security.x509.X509CRLImpl: byte[] signature> = null;
        r0.<sun.security.x509.X509CRLImpl: byte[] tbsCertList> = null;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId> = null;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.X500Name issuer> = null;
        r0.<sun.security.x509.X509CRLImpl: javax.security.auth.x500.X500Principal issuerPrincipal> = null;
        r0.<sun.security.x509.X509CRLImpl: java.util.Date thisUpdate> = null;
        r0.<sun.security.x509.X509CRLImpl: java.util.Date nextUpdate> = null;
        $r3 = new java.util.TreeMap;
        specialinvoke $r3.<java.util.TreeMap: void <init>()>();
        r0.<sun.security.x509.X509CRLImpl: java.util.Map revokedMap> = $r3;
        $r4 = new java.util.LinkedList;
        specialinvoke $r4.<java.util.LinkedList: void <init>()>();
        r0.<sun.security.x509.X509CRLImpl: java.util.List revokedList> = $r4;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions> = null;
        r0.<sun.security.x509.X509CRLImpl: boolean readOnly> = 0;

     label0:
        $r5 = new sun.security.util.DerValue;
        specialinvoke $r5.<sun.security.util.DerValue: void <init>(byte[])>(r1);
        specialinvoke r0.<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>($r5);

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        r0.<sun.security.x509.X509CRLImpl: byte[] signedCRL> = null;
        $r7 = new java.security.cert.CRLException;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parsing error: ");
        $r10 = virtualinvoke r2.<java.io.IOException: java.lang.String getMessage()>();
        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.security.cert.CRLException: void <init>(java.lang.String)>($r12);
        throw $r7;

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public void <init>(sun.security.util.DerValue) throws java.security.cert.CRLException
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.util.DerValue r1;
        java.io.IOException r2, $r5;
        java.util.TreeMap $r3;
        java.util.LinkedList $r4;
        java.security.cert.CRLException $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r9, $r11;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: sun.security.util.DerValue;
        specialinvoke r0.<java.security.cert.X509CRL: void <init>()>();
        r0.<sun.security.x509.X509CRLImpl: byte[] signedCRL> = null;
        r0.<sun.security.x509.X509CRLImpl: byte[] signature> = null;
        r0.<sun.security.x509.X509CRLImpl: byte[] tbsCertList> = null;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId> = null;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.X500Name issuer> = null;
        r0.<sun.security.x509.X509CRLImpl: javax.security.auth.x500.X500Principal issuerPrincipal> = null;
        r0.<sun.security.x509.X509CRLImpl: java.util.Date thisUpdate> = null;
        r0.<sun.security.x509.X509CRLImpl: java.util.Date nextUpdate> = null;
        $r3 = new java.util.TreeMap;
        specialinvoke $r3.<java.util.TreeMap: void <init>()>();
        r0.<sun.security.x509.X509CRLImpl: java.util.Map revokedMap> = $r3;
        $r4 = new java.util.LinkedList;
        specialinvoke $r4.<java.util.LinkedList: void <init>()>();
        r0.<sun.security.x509.X509CRLImpl: java.util.List revokedList> = $r4;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions> = null;
        r0.<sun.security.x509.X509CRLImpl: boolean readOnly> = 0;

     label0:
        specialinvoke r0.<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>(r1);

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r2 = $r5;
        r0.<sun.security.x509.X509CRLImpl: byte[] signedCRL> = null;
        $r6 = new java.security.cert.CRLException;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parsing error: ");
        $r9 = virtualinvoke r2.<java.io.IOException: java.lang.String getMessage()>();
        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.security.cert.CRLException: void <init>(java.lang.String)>($r11);
        throw $r6;

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public void <init>(java.io.InputStream) throws java.security.cert.CRLException
    {
        sun.security.x509.X509CRLImpl r0;
        java.io.InputStream r1;
        java.io.IOException r2, $r6;
        java.util.TreeMap $r3;
        java.util.LinkedList $r4;
        sun.security.util.DerValue $r5;
        java.security.cert.CRLException $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r10, $r12;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: java.io.InputStream;
        specialinvoke r0.<java.security.cert.X509CRL: void <init>()>();
        r0.<sun.security.x509.X509CRLImpl: byte[] signedCRL> = null;
        r0.<sun.security.x509.X509CRLImpl: byte[] signature> = null;
        r0.<sun.security.x509.X509CRLImpl: byte[] tbsCertList> = null;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId> = null;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.X500Name issuer> = null;
        r0.<sun.security.x509.X509CRLImpl: javax.security.auth.x500.X500Principal issuerPrincipal> = null;
        r0.<sun.security.x509.X509CRLImpl: java.util.Date thisUpdate> = null;
        r0.<sun.security.x509.X509CRLImpl: java.util.Date nextUpdate> = null;
        $r3 = new java.util.TreeMap;
        specialinvoke $r3.<java.util.TreeMap: void <init>()>();
        r0.<sun.security.x509.X509CRLImpl: java.util.Map revokedMap> = $r3;
        $r4 = new java.util.LinkedList;
        specialinvoke $r4.<java.util.LinkedList: void <init>()>();
        r0.<sun.security.x509.X509CRLImpl: java.util.List revokedList> = $r4;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions> = null;
        r0.<sun.security.x509.X509CRLImpl: boolean readOnly> = 0;

     label0:
        $r5 = new sun.security.util.DerValue;
        specialinvoke $r5.<sun.security.util.DerValue: void <init>(java.io.InputStream)>(r1);
        specialinvoke r0.<sun.security.x509.X509CRLImpl: void parse(sun.security.util.DerValue)>($r5);

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        r0.<sun.security.x509.X509CRLImpl: byte[] signedCRL> = null;
        $r7 = new java.security.cert.CRLException;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parsing error: ");
        $r10 = virtualinvoke r2.<java.io.IOException: java.lang.String getMessage()>();
        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.security.cert.CRLException: void <init>(java.lang.String)>($r12);
        throw $r7;

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public void <init>(sun.security.x509.X500Name, java.util.Date, java.util.Date)
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.x509.X500Name r1;
        java.util.Date r2, r3;
        java.util.TreeMap $r4;
        java.util.LinkedList $r5;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: sun.security.x509.X500Name;
        r2 := @parameter1: java.util.Date;
        r3 := @parameter2: java.util.Date;
        specialinvoke r0.<java.security.cert.X509CRL: void <init>()>();
        r0.<sun.security.x509.X509CRLImpl: byte[] signedCRL> = null;
        r0.<sun.security.x509.X509CRLImpl: byte[] signature> = null;
        r0.<sun.security.x509.X509CRLImpl: byte[] tbsCertList> = null;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId> = null;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.X500Name issuer> = null;
        r0.<sun.security.x509.X509CRLImpl: javax.security.auth.x500.X500Principal issuerPrincipal> = null;
        r0.<sun.security.x509.X509CRLImpl: java.util.Date thisUpdate> = null;
        r0.<sun.security.x509.X509CRLImpl: java.util.Date nextUpdate> = null;
        $r4 = new java.util.TreeMap;
        specialinvoke $r4.<java.util.TreeMap: void <init>()>();
        r0.<sun.security.x509.X509CRLImpl: java.util.Map revokedMap> = $r4;
        $r5 = new java.util.LinkedList;
        specialinvoke $r5.<java.util.LinkedList: void <init>()>();
        r0.<sun.security.x509.X509CRLImpl: java.util.List revokedList> = $r5;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions> = null;
        r0.<sun.security.x509.X509CRLImpl: boolean readOnly> = 0;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.X500Name issuer> = r1;
        r0.<sun.security.x509.X509CRLImpl: java.util.Date thisUpdate> = r2;
        r0.<sun.security.x509.X509CRLImpl: java.util.Date nextUpdate> = r3;
        return;
    }

    public void <init>(sun.security.x509.X500Name, java.util.Date, java.util.Date, java.security.cert.X509CRLEntry[]) throws java.security.cert.CRLException
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.x509.X500Name r1;
        java.util.Date r2, r3;
        java.security.cert.X509CRLEntry[] r4;
        javax.security.auth.x500.X500Principal r5, r6;
        int i0, $i1;
        sun.security.x509.X509CRLEntryImpl r7;
        java.io.IOException r8, $r12;
        java.util.TreeMap $r9;
        java.util.LinkedList $r10;
        java.security.cert.X509CRLEntry $r11;
        java.security.cert.CRLException $r13;
        sun.security.x509.X509CRLImpl$X509IssuerSerial $r14, r16;
        java.math.BigInteger $r15;
        java.util.Map $r17;
        java.util.List $r19;
        boolean $z1;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: sun.security.x509.X500Name;
        r2 := @parameter1: java.util.Date;
        r3 := @parameter2: java.util.Date;
        r4 := @parameter3: java.security.cert.X509CRLEntry[];
        specialinvoke r0.<java.security.cert.X509CRL: void <init>()>();
        r0.<sun.security.x509.X509CRLImpl: byte[] signedCRL> = null;
        r0.<sun.security.x509.X509CRLImpl: byte[] signature> = null;
        r0.<sun.security.x509.X509CRLImpl: byte[] tbsCertList> = null;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId> = null;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.X500Name issuer> = null;
        r0.<sun.security.x509.X509CRLImpl: javax.security.auth.x500.X500Principal issuerPrincipal> = null;
        r0.<sun.security.x509.X509CRLImpl: java.util.Date thisUpdate> = null;
        r0.<sun.security.x509.X509CRLImpl: java.util.Date nextUpdate> = null;
        $r9 = new java.util.TreeMap;
        specialinvoke $r9.<java.util.TreeMap: void <init>()>();
        r0.<sun.security.x509.X509CRLImpl: java.util.Map revokedMap> = $r9;
        $r10 = new java.util.LinkedList;
        specialinvoke $r10.<java.util.LinkedList: void <init>()>();
        r0.<sun.security.x509.X509CRLImpl: java.util.List revokedList> = $r10;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions> = null;
        r0.<sun.security.x509.X509CRLImpl: boolean readOnly> = 0;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.X500Name issuer> = r1;
        r0.<sun.security.x509.X509CRLImpl: java.util.Date thisUpdate> = r2;
        r0.<sun.security.x509.X509CRLImpl: java.util.Date nextUpdate> = r3;
        if r4 == null goto label6;

        r5 = virtualinvoke r0.<sun.security.x509.X509CRLImpl: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();
        r6 = r5;
        i0 = 0;

     label0:
        $i1 = lengthof r4;
        if i0 >= $i1 goto label6;

        $r11 = r4[i0];
        r7 = (sun.security.x509.X509CRLEntryImpl) $r11;

     label1:
        r6 = specialinvoke r0.<sun.security.x509.X509CRLImpl: javax.security.auth.x500.X500Principal getCertIssuer(sun.security.x509.X509CRLEntryImpl,javax.security.auth.x500.X500Principal)>(r7, r6);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;
        r8 = $r12;
        $r13 = new java.security.cert.CRLException;
        specialinvoke $r13.<java.security.cert.CRLException: void <init>(java.lang.Throwable)>(r8);
        throw $r13;

     label4:
        virtualinvoke r7.<sun.security.x509.X509CRLEntryImpl: void setCertificateIssuer(javax.security.auth.x500.X500Principal,javax.security.auth.x500.X500Principal)>(r5, r6);
        $r14 = new sun.security.x509.X509CRLImpl$X509IssuerSerial;
        $r15 = virtualinvoke r7.<sun.security.x509.X509CRLEntryImpl: java.math.BigInteger getSerialNumber()>();
        specialinvoke $r14.<sun.security.x509.X509CRLImpl$X509IssuerSerial: void <init>(javax.security.auth.x500.X500Principal,java.math.BigInteger)>(r6, $r15);
        r16 = $r14;
        $r17 = r0.<sun.security.x509.X509CRLImpl: java.util.Map revokedMap>;
        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r16, r7);
        $r19 = r0.<sun.security.x509.X509CRLImpl: java.util.List revokedList>;
        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>(r7);
        $z1 = virtualinvoke r7.<sun.security.x509.X509CRLEntryImpl: boolean hasExtensions()>();
        if $z1 == 0 goto label5;

        r0.<sun.security.x509.X509CRLImpl: int version> = 1;

     label5:
        i0 = i0 + 1;
        goto label0;

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void <init>(sun.security.x509.X500Name, java.util.Date, java.util.Date, java.security.cert.X509CRLEntry[], sun.security.x509.CRLExtensions) throws java.security.cert.CRLException
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.x509.X500Name r1;
        java.util.Date r2, r3;
        java.security.cert.X509CRLEntry[] r4;
        sun.security.x509.CRLExtensions r5;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: sun.security.x509.X500Name;
        r2 := @parameter1: java.util.Date;
        r3 := @parameter2: java.util.Date;
        r4 := @parameter3: java.security.cert.X509CRLEntry[];
        r5 := @parameter4: sun.security.x509.CRLExtensions;
        specialinvoke r0.<sun.security.x509.X509CRLImpl: void <init>(sun.security.x509.X500Name,java.util.Date,java.util.Date,java.security.cert.X509CRLEntry[])>(r1, r2, r3, r4);
        if r5 == null goto label0;

        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions> = r5;
        r0.<sun.security.x509.X509CRLImpl: int version> = 1;

     label0:
        return;
    }

    public byte[] getEncodedInternal() throws java.security.cert.CRLException
    {
        sun.security.x509.X509CRLImpl r0;
        byte[] $r1, $r3;
        java.security.cert.CRLException $r2;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r1 = r0.<sun.security.x509.X509CRLImpl: byte[] signedCRL>;
        if $r1 != null goto label0;

        $r2 = new java.security.cert.CRLException;
        specialinvoke $r2.<java.security.cert.CRLException: void <init>(java.lang.String)>("Null CRL to encode");
        throw $r2;

     label0:
        $r3 = r0.<sun.security.x509.X509CRLImpl: byte[] signedCRL>;
        return $r3;
    }

    public byte[] getEncoded() throws java.security.cert.CRLException
    {
        sun.security.x509.X509CRLImpl r0;
        byte[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r1 = virtualinvoke r0.<sun.security.x509.X509CRLImpl: byte[] getEncodedInternal()>();
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (byte[]) $r2;
        return $r3;
    }

    public void encodeInfo(java.io.OutputStream) throws java.security.cert.CRLException
    {
        sun.security.x509.X509CRLImpl r0;
        java.io.OutputStream r1;
        sun.security.util.DerOutputStream $r2, r3, r4, r5, $r8, $r9;
        java.util.Iterator r6;
        java.security.cert.X509CRLEntry r7;
        int $i0, $i1, $i2;
        sun.security.x509.AlgorithmId $r10;
        sun.security.x509.X500Name $r11, $r14;
        java.lang.String $r12, $r35, $r37;
        java.security.cert.CRLException $r13, $r32;
        java.util.Date $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        long $l3, $l5;
        byte $b4, $b6;
        java.util.List $r22, $r23;
        boolean $z0, $z1;
        java.lang.Object $r24;
        sun.security.x509.X509CRLEntryImpl $r25;
        sun.security.x509.CRLExtensions $r26, $r27;
        byte[] $r28, $r29;
        java.io.IOException $r30, r31;
        java.lang.StringBuilder $r33, $r34, $r36;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: java.io.OutputStream;

     label0:
        $r2 = new sun.security.util.DerOutputStream;
        specialinvoke $r2.<sun.security.util.DerOutputStream: void <init>()>();
        r3 = $r2;
        $r8 = new sun.security.util.DerOutputStream;
        specialinvoke $r8.<sun.security.util.DerOutputStream: void <init>()>();
        r4 = $r8;
        $r9 = new sun.security.util.DerOutputStream;
        specialinvoke $r9.<sun.security.util.DerOutputStream: void <init>()>();
        r5 = $r9;
        $i0 = r0.<sun.security.x509.X509CRLImpl: int version>;
        if $i0 == 0 goto label1;

        $i1 = r0.<sun.security.x509.X509CRLImpl: int version>;
        virtualinvoke r3.<sun.security.util.DerOutputStream: void putInteger(int)>($i1);

     label1:
        $r10 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId infoSigAlgId>;
        virtualinvoke $r10.<sun.security.x509.AlgorithmId: void encode(sun.security.util.DerOutputStream)>(r3);
        $i2 = r0.<sun.security.x509.X509CRLImpl: int version>;
        if $i2 != 0 goto label2;

        $r11 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.X500Name issuer>;
        $r12 = virtualinvoke $r11.<sun.security.x509.X500Name: java.lang.String toString()>();
        if $r12 != null goto label2;

        $r13 = new java.security.cert.CRLException;
        specialinvoke $r13.<java.security.cert.CRLException: void <init>(java.lang.String)>("Null Issuer DN not allowed in v1 CRL");
        throw $r13;

     label2:
        $r14 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.X500Name issuer>;
        virtualinvoke $r14.<sun.security.x509.X500Name: void encode(sun.security.util.DerOutputStream)>(r3);
        $r15 = r0.<sun.security.x509.X509CRLImpl: java.util.Date thisUpdate>;
        $l3 = virtualinvoke $r15.<java.util.Date: long getTime()>();
        $b4 = $l3 cmp 2524636800000L;
        if $b4 >= 0 goto label3;

        $r16 = r0.<sun.security.x509.X509CRLImpl: java.util.Date thisUpdate>;
        virtualinvoke r3.<sun.security.util.DerOutputStream: void putUTCTime(java.util.Date)>($r16);
        goto label4;

     label3:
        $r17 = r0.<sun.security.x509.X509CRLImpl: java.util.Date thisUpdate>;
        virtualinvoke r3.<sun.security.util.DerOutputStream: void putGeneralizedTime(java.util.Date)>($r17);

     label4:
        $r18 = r0.<sun.security.x509.X509CRLImpl: java.util.Date nextUpdate>;
        if $r18 == null goto label6;

        $r19 = r0.<sun.security.x509.X509CRLImpl: java.util.Date nextUpdate>;
        $l5 = virtualinvoke $r19.<java.util.Date: long getTime()>();
        $b6 = $l5 cmp 2524636800000L;
        if $b6 >= 0 goto label5;

        $r20 = r0.<sun.security.x509.X509CRLImpl: java.util.Date nextUpdate>;
        virtualinvoke r3.<sun.security.util.DerOutputStream: void putUTCTime(java.util.Date)>($r20);
        goto label6;

     label5:
        $r21 = r0.<sun.security.x509.X509CRLImpl: java.util.Date nextUpdate>;
        virtualinvoke r3.<sun.security.util.DerOutputStream: void putGeneralizedTime(java.util.Date)>($r21);

     label6:
        $r22 = r0.<sun.security.x509.X509CRLImpl: java.util.List revokedList>;
        $z0 = interfaceinvoke $r22.<java.util.List: boolean isEmpty()>();
        if $z0 != 0 goto label9;

        $r23 = r0.<sun.security.x509.X509CRLImpl: java.util.List revokedList>;
        r6 = interfaceinvoke $r23.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label8;

        $r24 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();
        r7 = (java.security.cert.X509CRLEntry) $r24;
        $r25 = (sun.security.x509.X509CRLEntryImpl) r7;
        virtualinvoke $r25.<sun.security.x509.X509CRLEntryImpl: void encode(sun.security.util.DerOutputStream)>(r4);
        goto label7;

     label8:
        virtualinvoke r3.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>(48, r4);

     label9:
        $r26 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions>;
        if $r26 == null goto label10;

        $r27 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions>;
        virtualinvoke $r27.<sun.security.x509.CRLExtensions: void encode(java.io.OutputStream,boolean)>(r3, 1);

     label10:
        virtualinvoke r5.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>(48, r3);
        $r28 = virtualinvoke r5.<sun.security.util.DerOutputStream: byte[] toByteArray()>();
        r0.<sun.security.x509.X509CRLImpl: byte[] tbsCertList> = $r28;
        $r29 = r0.<sun.security.x509.X509CRLImpl: byte[] tbsCertList>;
        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r29);

     label11:
        goto label13;

     label12:
        $r30 := @caughtexception;
        r31 = $r30;
        $r32 = new java.security.cert.CRLException;
        $r33 = new java.lang.StringBuilder;
        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encoding error: ");
        $r35 = virtualinvoke r31.<java.io.IOException: java.lang.String getMessage()>();
        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r32.<java.security.cert.CRLException: void <init>(java.lang.String)>($r37);
        throw $r32;

     label13:
        return;

        catch java.io.IOException from label0 to label11 with label12;
    }

    public void verify(java.security.PublicKey) throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        sun.security.x509.X509CRLImpl r0;
        java.security.PublicKey r1;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: java.security.PublicKey;
        virtualinvoke r0.<sun.security.x509.X509CRLImpl: void verify(java.security.PublicKey,java.lang.String)>(r1, "");
        return;
    }

    public synchronized void verify(java.security.PublicKey, java.lang.String) throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        sun.security.x509.X509CRLImpl r0;
        java.security.PublicKey r1, $r3, $r4;
        java.lang.String r2, $r5, $r9, $r12;
        null_type n0;
        boolean $z0, $z1, $z2;
        byte[] $r6, $r13, $r15, $r16, $r17;
        java.security.cert.CRLException $r7, $r14;
        int $i0, $i1;
        sun.security.x509.AlgorithmId $r8, $r11;
        java.security.Signature r10;
        java.security.SignatureException $r18;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: java.security.PublicKey;
        r2 := @parameter1: java.lang.String;
        if r2 != null goto label0;

        r2 = "";

     label0:
        $r3 = r0.<sun.security.x509.X509CRLImpl: java.security.PublicKey verifiedPublicKey>;
        if $r3 == null goto label1;

        $r4 = r0.<sun.security.x509.X509CRLImpl: java.security.PublicKey verifiedPublicKey>;
        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r1);
        if $z0 == 0 goto label1;

        $r5 = r0.<sun.security.x509.X509CRLImpl: java.lang.String verifiedProvider>;
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r5);
        if $z1 == 0 goto label1;

        return;

     label1:
        $r6 = r0.<sun.security.x509.X509CRLImpl: byte[] signedCRL>;
        if $r6 != null goto label2;

        $r7 = new java.security.cert.CRLException;
        specialinvoke $r7.<java.security.cert.CRLException: void <init>(java.lang.String)>("Uninitialized CRL");
        throw $r7;

     label2:
        n0 = null;
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i0 != 0 goto label3;

        $r8 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId>;
        $r9 = virtualinvoke $r8.<sun.security.x509.AlgorithmId: java.lang.String getName()>();
        r10 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r9);
        goto label4;

     label3:
        $r11 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId>;
        $r12 = virtualinvoke $r11.<sun.security.x509.AlgorithmId: java.lang.String getName()>();
        r10 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>($r12, r2);

     label4:
        virtualinvoke r10.<java.security.Signature: void initVerify(java.security.PublicKey)>(r1);
        $r13 = r0.<sun.security.x509.X509CRLImpl: byte[] tbsCertList>;
        if $r13 != null goto label5;

        $r14 = new java.security.cert.CRLException;
        specialinvoke $r14.<java.security.cert.CRLException: void <init>(java.lang.String)>("Uninitialized CRL");
        throw $r14;

     label5:
        $r15 = r0.<sun.security.x509.X509CRLImpl: byte[] tbsCertList>;
        $r16 = r0.<sun.security.x509.X509CRLImpl: byte[] tbsCertList>;
        $i1 = lengthof $r16;
        virtualinvoke r10.<java.security.Signature: void update(byte[],int,int)>($r15, 0, $i1);
        $r17 = r0.<sun.security.x509.X509CRLImpl: byte[] signature>;
        $z2 = virtualinvoke r10.<java.security.Signature: boolean verify(byte[])>($r17);
        if $z2 != 0 goto label6;

        $r18 = new java.security.SignatureException;
        specialinvoke $r18.<java.security.SignatureException: void <init>(java.lang.String)>("Signature does not match.");
        throw $r18;

     label6:
        r0.<sun.security.x509.X509CRLImpl: java.security.PublicKey verifiedPublicKey> = r1;
        r0.<sun.security.x509.X509CRLImpl: java.lang.String verifiedProvider> = r2;
        return;
    }

    public void sign(java.security.PrivateKey, java.lang.String) throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        sun.security.x509.X509CRLImpl r0;
        java.security.PrivateKey r1;
        java.lang.String r2;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: java.security.PrivateKey;
        r2 := @parameter1: java.lang.String;
        virtualinvoke r0.<sun.security.x509.X509CRLImpl: void sign(java.security.PrivateKey,java.lang.String,java.lang.String)>(r1, r2, null);
        return;
    }

    public void sign(java.security.PrivateKey, java.lang.String, java.lang.String) throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        sun.security.x509.X509CRLImpl r0;
        java.security.PrivateKey r1;
        java.lang.String r2, r3, $r8, $r24, $r26;
        null_type n0;
        sun.security.util.DerOutputStream r4, r5, $r11, $r12;
        boolean $z0;
        java.security.cert.CRLException $r6, $r21;
        int $i0, $i1;
        java.security.Signature r7;
        sun.security.x509.AlgorithmId $r9, $r10, $r13;
        byte[] $r14, $r15, $r16, $r17, $r18;
        java.io.IOException $r19, r20;
        java.lang.StringBuilder $r22, $r23, $r25;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: java.security.PrivateKey;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;

     label0:
        $z0 = r0.<sun.security.x509.X509CRLImpl: boolean readOnly>;
        if $z0 == 0 goto label1;

        $r6 = new java.security.cert.CRLException;
        specialinvoke $r6.<java.security.cert.CRLException: void <init>(java.lang.String)>("cannot over-write existing CRL");
        throw $r6;

     label1:
        n0 = null;
        if r3 == null goto label2;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();
        if $i0 != 0 goto label3;

     label2:
        r7 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(r2);
        goto label4;

     label3:
        r7 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>(r2, r3);

     label4:
        virtualinvoke r7.<java.security.Signature: void initSign(java.security.PrivateKey)>(r1);
        $r8 = virtualinvoke r7.<java.security.Signature: java.lang.String getAlgorithm()>();
        $r9 = staticinvoke <sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>($r8);
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId> = $r9;
        $r10 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId>;
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId infoSigAlgId> = $r10;
        $r11 = new sun.security.util.DerOutputStream;
        specialinvoke $r11.<sun.security.util.DerOutputStream: void <init>()>();
        r4 = $r11;
        $r12 = new sun.security.util.DerOutputStream;
        specialinvoke $r12.<sun.security.util.DerOutputStream: void <init>()>();
        r5 = $r12;
        virtualinvoke r0.<sun.security.x509.X509CRLImpl: void encodeInfo(java.io.OutputStream)>(r5);
        $r13 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId>;
        virtualinvoke $r13.<sun.security.x509.AlgorithmId: void encode(sun.security.util.DerOutputStream)>(r5);
        $r14 = r0.<sun.security.x509.X509CRLImpl: byte[] tbsCertList>;
        $r15 = r0.<sun.security.x509.X509CRLImpl: byte[] tbsCertList>;
        $i1 = lengthof $r15;
        virtualinvoke r7.<java.security.Signature: void update(byte[],int,int)>($r14, 0, $i1);
        $r16 = virtualinvoke r7.<java.security.Signature: byte[] sign()>();
        r0.<sun.security.x509.X509CRLImpl: byte[] signature> = $r16;
        $r17 = r0.<sun.security.x509.X509CRLImpl: byte[] signature>;
        virtualinvoke r5.<sun.security.util.DerOutputStream: void putBitString(byte[])>($r17);
        virtualinvoke r4.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>(48, r5);
        $r18 = virtualinvoke r4.<sun.security.util.DerOutputStream: byte[] toByteArray()>();
        r0.<sun.security.x509.X509CRLImpl: byte[] signedCRL> = $r18;
        r0.<sun.security.x509.X509CRLImpl: boolean readOnly> = 1;

     label5:
        goto label7;

     label6:
        $r19 := @caughtexception;
        r20 = $r19;
        $r21 = new java.security.cert.CRLException;
        $r22 = new java.lang.StringBuilder;
        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while encoding data: ");
        $r24 = virtualinvoke r20.<java.io.IOException: java.lang.String getMessage()>();
        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r21.<java.security.cert.CRLException: void <init>(java.lang.String)>($r26);
        throw $r21;

     label7:
        return;

        catch java.io.IOException from label0 to label5 with label6;
    }

    public java.lang.String toString()
    {
        sun.security.x509.X509CRLImpl r0;
        java.lang.StringBuffer $r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8;
        java.util.Iterator r3;
        java.security.cert.X509CRLEntry r4;
        sun.security.x509.Extension r5;
        byte[] r6, r95, $r109, $r114;
        sun.security.util.DerOutputStream r7, $r94;
        sun.misc.HexDumpEncoder r8, $r96, $r110, r111;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r16, $r17, $r20, $r21, $r25, $r26, $r30, $r31, $r34, $r35, $r39, $r40, $r43, $r44, $r48, $r49, $r52, $r53, $r58, $r59, $r61, $r66, $r67, $r68, $r69, $r71, $r78, $r79, $r80, $r83, $r84, $r85, $r86, $r97, $r98, $r100, $r101, $r112, $r113, $r116, $r117;
        java.lang.String $r13, $r19, $r24, $r27, $r33, $r36, $r42, $r45, $r51, $r54, $r62, $r70, $r72, $r81, $r87, $r92, $r99, $r102, $r104, $r115, $r118, $r121;
        sun.security.x509.AlgorithmId $r15, $r18, $r22;
        sun.security.util.ObjectIdentifier $r23, $r90;
        sun.security.x509.X500Name $r29, $r32;
        java.util.Date $r38, $r41, $r47, $r50;
        java.util.List $r56, $r60, $r64;
        boolean $z0, $z1;
        java.lang.Object $r65, $r89;
        sun.security.x509.CRLExtensions $r74, $r75;
        java.util.Collection r76;
        java.lang.Object[] r77;
        java.lang.Class $r91;
        java.lang.Exception $r106, r107;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        r2 = $r1;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X.509 CRL v");
        $i1 = r0.<sun.security.x509.X509CRLImpl: int version>;
        $i2 = $i1 + 1;
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);
        $r15 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId>;
        if $r15 == null goto label0;

        $r16 = new java.lang.StringBuilder;
        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature Algorithm: ");
        $r18 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId>;
        $r19 = virtualinvoke $r18.<sun.security.x509.AlgorithmId: java.lang.String toString()>();
        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", OID=");
        $r22 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId>;
        $r23 = virtualinvoke $r22.<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier getOID()>();
        $r24 = virtualinvoke $r23.<sun.security.util.ObjectIdentifier: java.lang.String toString()>();
        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

     label0:
        $r29 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.X500Name issuer>;
        if $r29 == null goto label1;

        $r30 = new java.lang.StringBuilder;
        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Issuer: ");
        $r32 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.X500Name issuer>;
        $r33 = virtualinvoke $r32.<sun.security.x509.X500Name: java.lang.String toString()>();
        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);
        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

     label1:
        $r38 = r0.<sun.security.x509.X509CRLImpl: java.util.Date thisUpdate>;
        if $r38 == null goto label2;

        $r39 = new java.lang.StringBuilder;
        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();
        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nThis Update: ");
        $r41 = r0.<sun.security.x509.X509CRLImpl: java.util.Date thisUpdate>;
        $r42 = virtualinvoke $r41.<java.util.Date: java.lang.String toString()>();
        $r43 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);
        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r45);

     label2:
        $r47 = r0.<sun.security.x509.X509CRLImpl: java.util.Date nextUpdate>;
        if $r47 == null goto label3;

        $r48 = new java.lang.StringBuilder;
        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();
        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Next Update: ");
        $r50 = r0.<sun.security.x509.X509CRLImpl: java.util.Date nextUpdate>;
        $r51 = virtualinvoke $r50.<java.util.Date: java.lang.String toString()>();
        $r52 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);
        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r54);

     label3:
        $r56 = r0.<sun.security.x509.X509CRLImpl: java.util.List revokedList>;
        $z0 = interfaceinvoke $r56.<java.util.List: boolean isEmpty()>();
        if $z0 == 0 goto label4;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nNO certificates have been revoked\n");
        goto label6;

     label4:
        $r58 = new java.lang.StringBuilder;
        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();
        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nRevoked Certificates: ");
        $r60 = r0.<sun.security.x509.X509CRLImpl: java.util.List revokedList>;
        $i3 = interfaceinvoke $r60.<java.util.List: int size()>();
        $r61 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r62);
        i0 = 1;
        $r64 = r0.<sun.security.x509.X509CRLImpl: java.util.List revokedList>;
        r3 = interfaceinvoke $r64.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label6;

        $r65 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.security.cert.X509CRLEntry) $r65;
        $r66 = new java.lang.StringBuilder;
        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();
        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n[");
        $i4 = i0;
        i0 = i0 + 1;
        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);
        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");
        $r70 = virtualinvoke r4.<java.security.cert.X509CRLEntry: java.lang.String toString()>();
        $r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);
        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r72);
        goto label5;

     label6:
        $r74 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions>;
        if $r74 == null goto label14;

        $r75 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions>;
        r76 = virtualinvoke $r75.<sun.security.x509.CRLExtensions: java.util.Collection getAllExtensions()>();
        r77 = interfaceinvoke r76.<java.util.Collection: java.lang.Object[] toArray()>();
        $r78 = new java.lang.StringBuilder;
        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();
        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nCRL Extensions: ");
        $i5 = lengthof r77;
        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);
        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r81);
        i6 = 0;

     label7:
        $i7 = lengthof r77;
        if i6 >= $i7 goto label14;

        $r83 = new java.lang.StringBuilder;
        specialinvoke $r83.<java.lang.StringBuilder: void <init>()>();
        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n[");
        $i8 = i6 + 1;
        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);
        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");
        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r87);
        $r89 = r77[i6];
        r5 = (sun.security.x509.Extension) $r89;

     label8:
        $r90 = virtualinvoke r5.<sun.security.x509.Extension: sun.security.util.ObjectIdentifier getExtensionId()>();
        $r91 = staticinvoke <sun.security.x509.OIDMap: java.lang.Class getClass(sun.security.util.ObjectIdentifier)>($r90);
        if $r91 != null goto label10;

        $r92 = virtualinvoke r5.<sun.security.x509.Extension: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r92);
        r6 = virtualinvoke r5.<sun.security.x509.Extension: byte[] getExtensionValue()>();
        if r6 == null goto label9;

        $r94 = new sun.security.util.DerOutputStream;
        specialinvoke $r94.<sun.security.util.DerOutputStream: void <init>()>();
        r7 = $r94;
        virtualinvoke r7.<sun.security.util.DerOutputStream: void putOctetString(byte[])>(r6);
        r95 = virtualinvoke r7.<sun.security.util.DerOutputStream: byte[] toByteArray()>();
        $r96 = new sun.misc.HexDumpEncoder;
        specialinvoke $r96.<sun.misc.HexDumpEncoder: void <init>()>();
        r8 = $r96;
        $r97 = new java.lang.StringBuilder;
        specialinvoke $r97.<java.lang.StringBuilder: void <init>()>();
        $r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Extension unknown: DER encoded OCTET string =\n");
        $r99 = virtualinvoke r8.<sun.misc.HexDumpEncoder: java.lang.String encodeBuffer(byte[])>(r95);
        $r100 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r99);
        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r102);

     label9:
        goto label11;

     label10:
        $r104 = virtualinvoke r5.<sun.security.x509.Extension: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r104);

     label11:
        goto label13;

     label12:
        $r106 := @caughtexception;
        r107 = $r106;
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", Error parsing this extension");

     label13:
        i6 = i6 + 1;
        goto label7;

     label14:
        $r109 = r0.<sun.security.x509.X509CRLImpl: byte[] signature>;
        if $r109 == null goto label15;

        $r110 = new sun.misc.HexDumpEncoder;
        specialinvoke $r110.<sun.misc.HexDumpEncoder: void <init>()>();
        r111 = $r110;
        $r112 = new java.lang.StringBuilder;
        specialinvoke $r112.<java.lang.StringBuilder: void <init>()>();
        $r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nSignature:\n");
        $r114 = r0.<sun.security.x509.X509CRLImpl: byte[] signature>;
        $r115 = virtualinvoke r111.<sun.misc.HexDumpEncoder: java.lang.String encodeBuffer(byte[])>($r114);
        $r116 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r115);
        $r117 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r118);
        goto label16;

     label15:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NOT signed yet\n");

     label16:
        $r121 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r121;

        catch java.lang.Exception from label8 to label11 with label12;
    }

    public boolean isRevoked(java.security.cert.Certificate)
    {
        sun.security.x509.X509CRLImpl r0;
        java.security.cert.Certificate r1;
        java.security.cert.X509Certificate r2;
        sun.security.x509.X509CRLImpl$X509IssuerSerial r3, $r5;
        java.util.Map $r4, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: java.security.cert.Certificate;
        $r4 = r0.<sun.security.x509.X509CRLImpl: java.util.Map revokedMap>;
        $z0 = interfaceinvoke $r4.<java.util.Map: boolean isEmpty()>();
        if $z0 != 0 goto label0;

        $z1 = r1 instanceof java.security.cert.X509Certificate;
        if $z1 != 0 goto label1;

     label0:
        return 0;

     label1:
        r2 = (java.security.cert.X509Certificate) r1;
        $r5 = new sun.security.x509.X509CRLImpl$X509IssuerSerial;
        specialinvoke $r5.<sun.security.x509.X509CRLImpl$X509IssuerSerial: void <init>(java.security.cert.X509Certificate)>(r2);
        r3 = $r5;
        $r6 = r0.<sun.security.x509.X509CRLImpl: java.util.Map revokedMap>;
        $z2 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);
        return $z2;
    }

    public int getVersion()
    {
        sun.security.x509.X509CRLImpl r0;
        int $i0, $i1;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $i0 = r0.<sun.security.x509.X509CRLImpl: int version>;
        $i1 = $i0 + 1;
        return $i1;
    }

    public java.security.Principal getIssuerDN()
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.x509.X500Name $r1;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r1 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.X500Name issuer>;
        return $r1;
    }

    public javax.security.auth.x500.X500Principal getIssuerX500Principal()
    {
        sun.security.x509.X509CRLImpl r0;
        javax.security.auth.x500.X500Principal $r1, $r3, $r4;
        sun.security.x509.X500Name $r2;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r1 = r0.<sun.security.x509.X509CRLImpl: javax.security.auth.x500.X500Principal issuerPrincipal>;
        if $r1 != null goto label0;

        $r2 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.X500Name issuer>;
        $r3 = virtualinvoke $r2.<sun.security.x509.X500Name: javax.security.auth.x500.X500Principal asX500Principal()>();
        r0.<sun.security.x509.X509CRLImpl: javax.security.auth.x500.X500Principal issuerPrincipal> = $r3;

     label0:
        $r4 = r0.<sun.security.x509.X509CRLImpl: javax.security.auth.x500.X500Principal issuerPrincipal>;
        return $r4;
    }

    public java.util.Date getThisUpdate()
    {
        sun.security.x509.X509CRLImpl r0;
        java.util.Date $r1, $r2;
        long $l0;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r1 = new java.util.Date;
        $r2 = r0.<sun.security.x509.X509CRLImpl: java.util.Date thisUpdate>;
        $l0 = virtualinvoke $r2.<java.util.Date: long getTime()>();
        specialinvoke $r1.<java.util.Date: void <init>(long)>($l0);
        return $r1;
    }

    public java.util.Date getNextUpdate()
    {
        sun.security.x509.X509CRLImpl r0;
        java.util.Date $r1, $r2, $r3;
        long $l0;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r1 = r0.<sun.security.x509.X509CRLImpl: java.util.Date nextUpdate>;
        if $r1 != null goto label0;

        return null;

     label0:
        $r2 = new java.util.Date;
        $r3 = r0.<sun.security.x509.X509CRLImpl: java.util.Date nextUpdate>;
        $l0 = virtualinvoke $r3.<java.util.Date: long getTime()>();
        specialinvoke $r2.<java.util.Date: void <init>(long)>($l0);
        return $r2;
    }

    public java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger)
    {
        sun.security.x509.X509CRLImpl r0;
        java.math.BigInteger r1;
        sun.security.x509.X509CRLImpl$X509IssuerSerial r2, $r4;
        java.util.Map $r3, $r6;
        boolean $z0;
        javax.security.auth.x500.X500Principal $r5;
        java.lang.Object $r7;
        java.security.cert.X509CRLEntry $r8;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: java.math.BigInteger;
        $r3 = r0.<sun.security.x509.X509CRLImpl: java.util.Map revokedMap>;
        $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();
        if $z0 == 0 goto label0;

        return null;

     label0:
        $r4 = new sun.security.x509.X509CRLImpl$X509IssuerSerial;
        $r5 = virtualinvoke r0.<sun.security.x509.X509CRLImpl: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();
        specialinvoke $r4.<sun.security.x509.X509CRLImpl$X509IssuerSerial: void <init>(javax.security.auth.x500.X500Principal,java.math.BigInteger)>($r5, r1);
        r2 = $r4;
        $r6 = r0.<sun.security.x509.X509CRLImpl: java.util.Map revokedMap>;
        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);
        $r8 = (java.security.cert.X509CRLEntry) $r7;
        return $r8;
    }

    public java.security.cert.X509CRLEntry getRevokedCertificate(java.security.cert.X509Certificate)
    {
        sun.security.x509.X509CRLImpl r0;
        java.security.cert.X509Certificate r1;
        sun.security.x509.X509CRLImpl$X509IssuerSerial r2, $r4;
        java.util.Map $r3, $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.security.cert.X509CRLEntry $r7;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: java.security.cert.X509Certificate;
        $r3 = r0.<sun.security.x509.X509CRLImpl: java.util.Map revokedMap>;
        $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();
        if $z0 == 0 goto label0;

        return null;

     label0:
        $r4 = new sun.security.x509.X509CRLImpl$X509IssuerSerial;
        specialinvoke $r4.<sun.security.x509.X509CRLImpl$X509IssuerSerial: void <init>(java.security.cert.X509Certificate)>(r1);
        r2 = $r4;
        $r5 = r0.<sun.security.x509.X509CRLImpl: java.util.Map revokedMap>;
        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);
        $r7 = (java.security.cert.X509CRLEntry) $r6;
        return $r7;
    }

    public java.util.Set getRevokedCertificates()
    {
        sun.security.x509.X509CRLImpl r0;
        java.util.List $r1, $r3;
        boolean $z0;
        java.util.TreeSet $r2;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r1 = r0.<sun.security.x509.X509CRLImpl: java.util.List revokedList>;
        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();
        if $z0 == 0 goto label0;

        return null;

     label0:
        $r2 = new java.util.TreeSet;
        $r3 = r0.<sun.security.x509.X509CRLImpl: java.util.List revokedList>;
        specialinvoke $r2.<java.util.TreeSet: void <init>(java.util.Collection)>($r3);
        return $r2;
    }

    public byte[] getTBSCertList() throws java.security.cert.CRLException
    {
        sun.security.x509.X509CRLImpl r0;
        byte[] r1, $r2, $r4, $r5;
        java.security.cert.CRLException $r3;
        int $i0, $i1;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r2 = r0.<sun.security.x509.X509CRLImpl: byte[] tbsCertList>;
        if $r2 != null goto label0;

        $r3 = new java.security.cert.CRLException;
        specialinvoke $r3.<java.security.cert.CRLException: void <init>(java.lang.String)>("Uninitialized CRL");
        throw $r3;

     label0:
        $r4 = r0.<sun.security.x509.X509CRLImpl: byte[] tbsCertList>;
        $i0 = lengthof $r4;
        r1 = newarray (byte)[$i0];
        $r5 = r0.<sun.security.x509.X509CRLImpl: byte[] tbsCertList>;
        $i1 = lengthof r1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, 0, $i1);
        return r1;
    }

    public byte[] getSignature()
    {
        sun.security.x509.X509CRLImpl r0;
        byte[] r1, $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r2 = r0.<sun.security.x509.X509CRLImpl: byte[] signature>;
        if $r2 != null goto label0;

        return null;

     label0:
        $r3 = r0.<sun.security.x509.X509CRLImpl: byte[] signature>;
        $i0 = lengthof $r3;
        r1 = newarray (byte)[$i0];
        $r4 = r0.<sun.security.x509.X509CRLImpl: byte[] signature>;
        $i1 = lengthof r1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i1);
        return r1;
    }

    public java.lang.String getSigAlgName()
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.x509.AlgorithmId $r1, $r2;
        java.lang.String $r3;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r1 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId>;
        if $r1 != null goto label0;

        return null;

     label0:
        $r2 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId>;
        $r3 = virtualinvoke $r2.<sun.security.x509.AlgorithmId: java.lang.String getName()>();
        return $r3;
    }

    public java.lang.String getSigAlgOID()
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.util.ObjectIdentifier r1;
        sun.security.x509.AlgorithmId $r2, $r3;
        java.lang.String $r4;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r2 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId>;
        if $r2 != null goto label0;

        return null;

     label0:
        $r3 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId>;
        r1 = virtualinvoke $r3.<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier getOID()>();
        $r4 = virtualinvoke r1.<sun.security.util.ObjectIdentifier: java.lang.String toString()>();
        return $r4;
    }

    public byte[] getSigAlgParams()
    {
        sun.security.x509.X509CRLImpl r0;
        java.io.IOException r1, $r5;
        sun.security.x509.AlgorithmId $r2, $r3;
        byte[] $r4;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r2 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId>;
        if $r2 != null goto label0;

        return null;

     label0:
        $r3 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId>;
        $r4 = virtualinvoke $r3.<sun.security.x509.AlgorithmId: byte[] getEncodedParams()>();

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;
        r1 = $r5;
        return null;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public sun.security.x509.AlgorithmId getSigAlgId()
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.x509.AlgorithmId $r1;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r1 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId>;
        return $r1;
    }

    public sun.security.x509.KeyIdentifier getAuthKeyId() throws java.io.IOException
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.x509.AuthorityKeyIdentifierExtension r1;
        sun.security.x509.KeyIdentifier r3;
        java.lang.Object $r4;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 = virtualinvoke r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AuthorityKeyIdentifierExtension getAuthKeyIdExtension()>();
        if r1 == null goto label0;

        $r4 = virtualinvoke r1.<sun.security.x509.AuthorityKeyIdentifierExtension: java.lang.Object get(java.lang.String)>("key_id");
        r3 = (sun.security.x509.KeyIdentifier) $r4;
        return r3;

     label0:
        return null;
    }

    public sun.security.x509.AuthorityKeyIdentifierExtension getAuthKeyIdExtension() throws java.io.IOException
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        java.lang.Object r2;
        sun.security.x509.AuthorityKeyIdentifierExtension $r3;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier AuthorityKey_Id>;
        r2 = virtualinvoke r0.<sun.security.x509.X509CRLImpl: java.lang.Object getExtension(sun.security.util.ObjectIdentifier)>($r1);
        $r3 = (sun.security.x509.AuthorityKeyIdentifierExtension) r2;
        return $r3;
    }

    public sun.security.x509.CRLNumberExtension getCRLNumberExtension() throws java.io.IOException
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        java.lang.Object r2;
        sun.security.x509.CRLNumberExtension $r3;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier CRLNumber_Id>;
        r2 = virtualinvoke r0.<sun.security.x509.X509CRLImpl: java.lang.Object getExtension(sun.security.util.ObjectIdentifier)>($r1);
        $r3 = (sun.security.x509.CRLNumberExtension) r2;
        return $r3;
    }

    public java.math.BigInteger getCRLNumber() throws java.io.IOException
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.x509.CRLNumberExtension r1;
        java.math.BigInteger r3;
        java.lang.Object $r4;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 = virtualinvoke r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLNumberExtension getCRLNumberExtension()>();
        if r1 == null goto label0;

        $r4 = virtualinvoke r1.<sun.security.x509.CRLNumberExtension: java.lang.Object get(java.lang.String)>("value");
        r3 = (java.math.BigInteger) $r4;
        return r3;

     label0:
        return null;
    }

    public sun.security.x509.DeltaCRLIndicatorExtension getDeltaCRLIndicatorExtension() throws java.io.IOException
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        java.lang.Object r2;
        sun.security.x509.DeltaCRLIndicatorExtension $r3;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier DeltaCRLIndicator_Id>;
        r2 = virtualinvoke r0.<sun.security.x509.X509CRLImpl: java.lang.Object getExtension(sun.security.util.ObjectIdentifier)>($r1);
        $r3 = (sun.security.x509.DeltaCRLIndicatorExtension) r2;
        return $r3;
    }

    public java.math.BigInteger getBaseCRLNumber() throws java.io.IOException
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.x509.DeltaCRLIndicatorExtension r1;
        java.math.BigInteger r3;
        java.lang.Object $r4;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 = virtualinvoke r0.<sun.security.x509.X509CRLImpl: sun.security.x509.DeltaCRLIndicatorExtension getDeltaCRLIndicatorExtension()>();
        if r1 == null goto label0;

        $r4 = virtualinvoke r1.<sun.security.x509.DeltaCRLIndicatorExtension: java.lang.Object get(java.lang.String)>("value");
        r3 = (java.math.BigInteger) $r4;
        return r3;

     label0:
        return null;
    }

    public sun.security.x509.IssuerAlternativeNameExtension getIssuerAltNameExtension() throws java.io.IOException
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        java.lang.Object r2;
        sun.security.x509.IssuerAlternativeNameExtension $r3;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier IssuerAlternativeName_Id>;
        r2 = virtualinvoke r0.<sun.security.x509.X509CRLImpl: java.lang.Object getExtension(sun.security.util.ObjectIdentifier)>($r1);
        $r3 = (sun.security.x509.IssuerAlternativeNameExtension) r2;
        return $r3;
    }

    public sun.security.x509.IssuingDistributionPointExtension getIssuingDistributionPointExtension() throws java.io.IOException
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        java.lang.Object r2;
        sun.security.x509.IssuingDistributionPointExtension $r3;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier IssuingDistributionPoint_Id>;
        r2 = virtualinvoke r0.<sun.security.x509.X509CRLImpl: java.lang.Object getExtension(sun.security.util.ObjectIdentifier)>($r1);
        $r3 = (sun.security.x509.IssuingDistributionPointExtension) r2;
        return $r3;
    }

    public boolean hasUnsupportedCriticalExtension()
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.x509.CRLExtensions $r1, $r2;
        boolean $z0;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r1 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions>;
        if $r1 != null goto label0;

        return 0;

     label0:
        $r2 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions>;
        $z0 = virtualinvoke $r2.<sun.security.x509.CRLExtensions: boolean hasUnsupportedCriticalExtension()>();
        return $z0;
    }

    public java.util.Set getCriticalExtensionOIDs()
    {
        sun.security.x509.X509CRLImpl r0;
        java.util.TreeSet r1, $r5;
        java.util.Iterator r2;
        sun.security.x509.Extension r3;
        sun.security.x509.CRLExtensions $r4, $r6;
        java.util.Collection $r7;
        boolean $z0, $z1;
        java.lang.Object $r8;
        sun.security.util.ObjectIdentifier $r9;
        java.lang.String $r10;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r4 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions>;
        if $r4 != null goto label0;

        return null;

     label0:
        $r5 = new java.util.TreeSet;
        specialinvoke $r5.<java.util.TreeSet: void <init>()>();
        r1 = $r5;
        $r6 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions>;
        $r7 = virtualinvoke $r6.<sun.security.x509.CRLExtensions: java.util.Collection getAllExtensions()>();
        r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (sun.security.x509.Extension) $r8;
        $z1 = virtualinvoke r3.<sun.security.x509.Extension: boolean isCritical()>();
        if $z1 == 0 goto label2;

        $r9 = virtualinvoke r3.<sun.security.x509.Extension: sun.security.util.ObjectIdentifier getExtensionId()>();
        $r10 = virtualinvoke $r9.<sun.security.util.ObjectIdentifier: java.lang.String toString()>();
        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r10);

     label2:
        goto label1;

     label3:
        return r1;
    }

    public java.util.Set getNonCriticalExtensionOIDs()
    {
        sun.security.x509.X509CRLImpl r0;
        java.util.TreeSet r1, $r5;
        java.util.Iterator r2;
        sun.security.x509.Extension r3;
        sun.security.x509.CRLExtensions $r4, $r6;
        java.util.Collection $r7;
        boolean $z0, $z1;
        java.lang.Object $r8;
        sun.security.util.ObjectIdentifier $r9;
        java.lang.String $r10;

        r0 := @this: sun.security.x509.X509CRLImpl;
        $r4 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions>;
        if $r4 != null goto label0;

        return null;

     label0:
        $r5 = new java.util.TreeSet;
        specialinvoke $r5.<java.util.TreeSet: void <init>()>();
        r1 = $r5;
        $r6 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions>;
        $r7 = virtualinvoke $r6.<sun.security.x509.CRLExtensions: java.util.Collection getAllExtensions()>();
        r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (sun.security.x509.Extension) $r8;
        $z1 = virtualinvoke r3.<sun.security.x509.Extension: boolean isCritical()>();
        if $z1 != 0 goto label2;

        $r9 = virtualinvoke r3.<sun.security.x509.Extension: sun.security.util.ObjectIdentifier getExtensionId()>();
        $r10 = virtualinvoke $r9.<sun.security.util.ObjectIdentifier: java.lang.String toString()>();
        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r10);

     label2:
        goto label1;

     label3:
        return r1;
    }

    public byte[] getExtensionValue(java.lang.String)
    {
        sun.security.x509.X509CRLImpl r0;
        java.lang.String r1, r2;
        sun.security.x509.Extension r3, r12;
        sun.security.util.ObjectIdentifier r4, r6, $r8, $r9;
        null_type n0, $n1, $n2;
        java.util.Enumeration r5;
        sun.security.x509.CRLExtensions $r7, $r10, $r13;
        boolean $z0, $z1;
        java.lang.Object $r11;
        byte[] r14, $r17;
        sun.security.util.DerOutputStream $r15, r16;
        java.lang.Exception $r18, r19;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: java.lang.String;
        $r7 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions>;
        if $r7 != null goto label0;

        return null;

     label0:
        $r8 = new sun.security.util.ObjectIdentifier;
        specialinvoke $r8.<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>(r1);
        r2 = staticinvoke <sun.security.x509.OIDMap: java.lang.String getName(sun.security.util.ObjectIdentifier)>($r8);
        r3 = null;
        if r2 != null goto label3;

        $r9 = new sun.security.util.ObjectIdentifier;
        specialinvoke $r9.<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>(r1);
        r4 = $r9;
        n0 = null;
        $r10 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions>;
        r5 = virtualinvoke $r10.<sun.security.x509.CRLExtensions: java.util.Enumeration getElements()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r5.<java.util.Enumeration: java.lang.Object nextElement()>();
        r12 = (sun.security.x509.Extension) $r11;
        r6 = virtualinvoke r12.<sun.security.x509.Extension: sun.security.util.ObjectIdentifier getExtensionId()>();
        $z1 = virtualinvoke r6.<sun.security.util.ObjectIdentifier: boolean equals(sun.security.util.ObjectIdentifier)>(r4);
        if $z1 == 0 goto label1;

        r3 = r12;
        goto label2;

     label2:
        goto label4;

     label3:
        $r13 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions>;
        r3 = virtualinvoke $r13.<sun.security.x509.CRLExtensions: sun.security.x509.Extension get(java.lang.String)>(r2);

     label4:
        if r3 != null goto label6;

        $n1 = null;

     label5:
        return $n1;

     label6:
        r14 = virtualinvoke r3.<sun.security.x509.Extension: byte[] getExtensionValue()>();
        if r14 != null goto label8;

        $n2 = null;

     label7:
        return $n2;

     label8:
        $r15 = new sun.security.util.DerOutputStream;
        specialinvoke $r15.<sun.security.util.DerOutputStream: void <init>()>();
        r16 = $r15;
        virtualinvoke r16.<sun.security.util.DerOutputStream: void putOctetString(byte[])>(r14);
        $r17 = virtualinvoke r16.<sun.security.util.DerOutputStream: byte[] toByteArray()>();

     label9:
        return $r17;

     label10:
        $r18 := @caughtexception;
        r19 = $r18;
        return null;

        catch java.lang.Exception from label0 to label5 with label10;
        catch java.lang.Exception from label6 to label7 with label10;
        catch java.lang.Exception from label8 to label9 with label10;
    }

    public java.lang.Object getExtension(sun.security.util.ObjectIdentifier)
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.util.ObjectIdentifier r1;
        sun.security.x509.CRLExtensions $r2, $r3;
        java.lang.String $r4;
        sun.security.x509.Extension $r5;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: sun.security.util.ObjectIdentifier;
        $r2 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions>;
        if $r2 != null goto label0;

        return null;

     label0:
        $r3 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions>;
        $r4 = staticinvoke <sun.security.x509.OIDMap: java.lang.String getName(sun.security.util.ObjectIdentifier)>(r1);
        $r5 = virtualinvoke $r3.<sun.security.x509.CRLExtensions: sun.security.x509.Extension get(java.lang.String)>($r4);
        return $r5;
    }

    private void parse(sun.security.util.DerValue) throws java.security.cert.CRLException, java.io.IOException
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.util.DerValue r1, r4, $r16, $r18, $r20, $r28, $r30, $r32, $r34, $r37, $r40, $r42, $r60, r66;
        sun.security.util.DerValue[] r2, r6;
        sun.security.util.DerInputStream r3, $r12, $r15, $r17, $r19, $r21, $r25, $r35, $r38, $r68;
        byte b0, $b2, $b5, b12, b15, b18;
        sun.security.x509.AlgorithmId r5, $r31, $r44;
        javax.security.auth.x500.X500Principal r7, r8;
        int i1, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i16, $i17, $i20, $i21;
        sun.security.x509.X509CRLEntryImpl r9, $r59;
        sun.security.x509.X509CRLImpl$X509IssuerSerial r10, $r61;
        boolean $z0, $z1, $z2, $z4, $z5;
        java.security.cert.CRLException $r11, $r13, $r22, $r29, $r36, $r39, $r43, $r45, $r48, $r51;
        byte[] $r14, $r33, $r41;
        java.lang.StringBuilder $r23, $r24, $r26, $r52, $r53, $r54, $r55;
        java.lang.String $r27, $r56;
        sun.security.x509.X500Name $r46, $r47;
        java.util.Date $r49, $r50, $r57, $r58;
        short $s19;
        java.math.BigInteger $r62;
        java.util.Map $r63;
        java.util.List $r65;
        sun.security.x509.CRLExtensions $r67;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: sun.security.util.DerValue;
        $z0 = r0.<sun.security.x509.X509CRLImpl: boolean readOnly>;
        if $z0 == 0 goto label0;

        $r11 = new java.security.cert.CRLException;
        specialinvoke $r11.<java.security.cert.CRLException: void <init>(java.lang.String)>("cannot over-write existing CRL");
        throw $r11;

     label0:
        $r12 = virtualinvoke r1.<sun.security.util.DerValue: sun.security.util.DerInputStream getData()>();
        if $r12 == null goto label1;

        $b2 = r1.<sun.security.util.DerValue: byte tag>;
        if $b2 == 48 goto label2;

     label1:
        $r13 = new java.security.cert.CRLException;
        specialinvoke $r13.<java.security.cert.CRLException: void <init>(java.lang.String)>("Invalid DER-encoded CRL data");
        throw $r13;

     label2:
        $r14 = virtualinvoke r1.<sun.security.util.DerValue: byte[] toByteArray()>();
        r0.<sun.security.x509.X509CRLImpl: byte[] signedCRL> = $r14;
        r2 = newarray (sun.security.util.DerValue)[3];
        $r15 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $r16 = virtualinvoke $r15.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        r2[0] = $r16;
        $r17 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $r18 = virtualinvoke $r17.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        r2[1] = $r18;
        $r19 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $r20 = virtualinvoke $r19.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        r2[2] = $r20;
        $r21 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $i3 = virtualinvoke $r21.<sun.security.util.DerInputStream: int available()>();
        if $i3 == 0 goto label3;

        $r22 = new java.security.cert.CRLException;
        $r23 = new java.lang.StringBuilder;
        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("signed overrun, bytes = ");
        $r25 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $i4 = virtualinvoke $r25.<sun.security.util.DerInputStream: int available()>();
        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r22.<java.security.cert.CRLException: void <init>(java.lang.String)>($r27);
        throw $r22;

     label3:
        $r28 = r2[0];
        $b5 = $r28.<sun.security.util.DerValue: byte tag>;
        if $b5 == 48 goto label4;

        $r29 = new java.security.cert.CRLException;
        specialinvoke $r29.<java.security.cert.CRLException: void <init>(java.lang.String)>("signed CRL fields invalid");
        throw $r29;

     label4:
        $r30 = r2[1];
        $r31 = staticinvoke <sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId parse(sun.security.util.DerValue)>($r30);
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId> = $r31;
        $r32 = r2[2];
        $r33 = virtualinvoke $r32.<sun.security.util.DerValue: byte[] getBitString()>();
        r0.<sun.security.x509.X509CRLImpl: byte[] signature> = $r33;
        $r34 = r2[1];
        $r35 = $r34.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $i6 = virtualinvoke $r35.<sun.security.util.DerInputStream: int available()>();
        if $i6 == 0 goto label5;

        $r36 = new java.security.cert.CRLException;
        specialinvoke $r36.<java.security.cert.CRLException: void <init>(java.lang.String)>("AlgorithmId field overrun");
        throw $r36;

     label5:
        $r37 = r2[2];
        $r38 = $r37.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $i7 = virtualinvoke $r38.<sun.security.util.DerInputStream: int available()>();
        if $i7 == 0 goto label6;

        $r39 = new java.security.cert.CRLException;
        specialinvoke $r39.<java.security.cert.CRLException: void <init>(java.lang.String)>("Signature field overrun");
        throw $r39;

     label6:
        $r40 = r2[0];
        $r41 = virtualinvoke $r40.<sun.security.util.DerValue: byte[] toByteArray()>();
        r0.<sun.security.x509.X509CRLImpl: byte[] tbsCertList> = $r41;
        $r42 = r2[0];
        r3 = $r42.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        r0.<sun.security.x509.X509CRLImpl: int version> = 0;
        $i8 = virtualinvoke r3.<sun.security.util.DerInputStream: int peekByte()>();
        b0 = (byte) $i8;
        if b0 != 2 goto label7;

        $i9 = virtualinvoke r3.<sun.security.util.DerInputStream: int getInteger()>();
        r0.<sun.security.x509.X509CRLImpl: int version> = $i9;
        $i10 = r0.<sun.security.x509.X509CRLImpl: int version>;
        if $i10 == 1 goto label7;

        $r43 = new java.security.cert.CRLException;
        specialinvoke $r43.<java.security.cert.CRLException: void <init>(java.lang.String)>("Invalid version");
        throw $r43;

     label7:
        r4 = virtualinvoke r3.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        r5 = staticinvoke <sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId parse(sun.security.util.DerValue)>(r4);
        $r44 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId sigAlgId>;
        $z1 = virtualinvoke r5.<sun.security.x509.AlgorithmId: boolean equals(sun.security.x509.AlgorithmId)>($r44);
        if $z1 != 0 goto label8;

        $r45 = new java.security.cert.CRLException;
        specialinvoke $r45.<java.security.cert.CRLException: void <init>(java.lang.String)>("Signature algorithm mismatch");
        throw $r45;

     label8:
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId infoSigAlgId> = r5;
        $r46 = new sun.security.x509.X500Name;
        specialinvoke $r46.<sun.security.x509.X500Name: void <init>(sun.security.util.DerInputStream)>(r3);
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.X500Name issuer> = $r46;
        $r47 = r0.<sun.security.x509.X509CRLImpl: sun.security.x509.X500Name issuer>;
        $z2 = virtualinvoke $r47.<sun.security.x509.X500Name: boolean isEmpty()>();
        if $z2 == 0 goto label9;

        $r48 = new java.security.cert.CRLException;
        specialinvoke $r48.<java.security.cert.CRLException: void <init>(java.lang.String)>("Empty issuer DN not allowed in X509CRLs");
        throw $r48;

     label9:
        $i11 = virtualinvoke r3.<sun.security.util.DerInputStream: int peekByte()>();
        b12 = (byte) $i11;
        if b12 != 23 goto label10;

        $r49 = virtualinvoke r3.<sun.security.util.DerInputStream: java.util.Date getUTCTime()>();
        r0.<sun.security.x509.X509CRLImpl: java.util.Date thisUpdate> = $r49;
        goto label12;

     label10:
        if b12 != 24 goto label11;

        $r50 = virtualinvoke r3.<sun.security.util.DerInputStream: java.util.Date getGeneralizedTime()>();
        r0.<sun.security.x509.X509CRLImpl: java.util.Date thisUpdate> = $r50;
        goto label12;

     label11:
        $r51 = new java.security.cert.CRLException;
        $r52 = new java.lang.StringBuilder;
        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();
        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid encoding for thisUpdate (tag=");
        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b12);
        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r51.<java.security.cert.CRLException: void <init>(java.lang.String)>($r56);
        throw $r51;

     label12:
        $i13 = virtualinvoke r3.<sun.security.util.DerInputStream: int available()>();
        if $i13 != 0 goto label13;

        return;

     label13:
        $i14 = virtualinvoke r3.<sun.security.util.DerInputStream: int peekByte()>();
        b15 = (byte) $i14;
        if b15 != 23 goto label14;

        $r57 = virtualinvoke r3.<sun.security.util.DerInputStream: java.util.Date getUTCTime()>();
        r0.<sun.security.x509.X509CRLImpl: java.util.Date nextUpdate> = $r57;
        goto label15;

     label14:
        if b15 != 24 goto label15;

        $r58 = virtualinvoke r3.<sun.security.util.DerInputStream: java.util.Date getGeneralizedTime()>();
        r0.<sun.security.x509.X509CRLImpl: java.util.Date nextUpdate> = $r58;

     label15:
        $i16 = virtualinvoke r3.<sun.security.util.DerInputStream: int available()>();
        if $i16 != 0 goto label16;

        return;

     label16:
        $i17 = virtualinvoke r3.<sun.security.util.DerInputStream: int peekByte()>();
        b18 = (byte) $i17;
        if b18 != 48 goto label18;

        $s19 = b18 & 192;
        if $s19 == 128 goto label18;

        r6 = virtualinvoke r3.<sun.security.util.DerInputStream: sun.security.util.DerValue[] getSequence(int)>(4);
        r7 = virtualinvoke r0.<sun.security.x509.X509CRLImpl: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();
        r8 = r7;
        i1 = 0;

     label17:
        $i20 = lengthof r6;
        if i1 >= $i20 goto label18;

        $r59 = new sun.security.x509.X509CRLEntryImpl;
        $r60 = r6[i1];
        specialinvoke $r59.<sun.security.x509.X509CRLEntryImpl: void <init>(sun.security.util.DerValue)>($r60);
        r9 = $r59;
        r8 = specialinvoke r0.<sun.security.x509.X509CRLImpl: javax.security.auth.x500.X500Principal getCertIssuer(sun.security.x509.X509CRLEntryImpl,javax.security.auth.x500.X500Principal)>(r9, r8);
        virtualinvoke r9.<sun.security.x509.X509CRLEntryImpl: void setCertificateIssuer(javax.security.auth.x500.X500Principal,javax.security.auth.x500.X500Principal)>(r7, r8);
        $r61 = new sun.security.x509.X509CRLImpl$X509IssuerSerial;
        $r62 = virtualinvoke r9.<sun.security.x509.X509CRLEntryImpl: java.math.BigInteger getSerialNumber()>();
        specialinvoke $r61.<sun.security.x509.X509CRLImpl$X509IssuerSerial: void <init>(javax.security.auth.x500.X500Principal,java.math.BigInteger)>(r8, $r62);
        r10 = $r61;
        $r63 = r0.<sun.security.x509.X509CRLImpl: java.util.Map revokedMap>;
        interfaceinvoke $r63.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r9);
        $r65 = r0.<sun.security.x509.X509CRLImpl: java.util.List revokedList>;
        interfaceinvoke $r65.<java.util.List: boolean add(java.lang.Object)>(r9);
        i1 = i1 + 1;
        goto label17;

     label18:
        $i21 = virtualinvoke r3.<sun.security.util.DerInputStream: int available()>();
        if $i21 != 0 goto label19;

        return;

     label19:
        r66 = virtualinvoke r3.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $z4 = virtualinvoke r66.<sun.security.util.DerValue: boolean isConstructed()>();
        if $z4 == 0 goto label20;

        $z5 = virtualinvoke r66.<sun.security.util.DerValue: boolean isContextSpecific(byte)>(0);
        if $z5 == 0 goto label20;

        $r67 = new sun.security.x509.CRLExtensions;
        $r68 = r66.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        specialinvoke $r67.<sun.security.x509.CRLExtensions: void <init>(sun.security.util.DerInputStream)>($r68);
        r0.<sun.security.x509.X509CRLImpl: sun.security.x509.CRLExtensions extensions> = $r67;

     label20:
        r0.<sun.security.x509.X509CRLImpl: boolean readOnly> = 1;
        return;
    }

    public static javax.security.auth.x500.X500Principal getIssuerX500Principal(java.security.cert.X509CRL)
    {
        java.security.cert.X509CRL r0;
        byte[] r1, r6;
        sun.security.util.DerInputStream r2, r4, $r7;
        sun.security.util.DerValue r3, r10;
        byte b0;
        sun.security.util.DerValue[] $r8;
        int $i1;
        javax.security.auth.x500.X500Principal $r11;
        java.lang.Exception $r12, r13;
        java.lang.RuntimeException $r14;

        r0 := @parameter0: java.security.cert.X509CRL;

     label0:
        r1 = virtualinvoke r0.<java.security.cert.X509CRL: byte[] getEncoded()>();
        $r7 = new sun.security.util.DerInputStream;
        specialinvoke $r7.<sun.security.util.DerInputStream: void <init>(byte[])>(r1);
        r2 = $r7;
        $r8 = virtualinvoke r2.<sun.security.util.DerInputStream: sun.security.util.DerValue[] getSequence(int)>(3);
        r3 = $r8[0];
        r4 = r3.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $i1 = virtualinvoke r4.<sun.security.util.DerInputStream: int peekByte()>();
        b0 = (byte) $i1;
        if b0 != 2 goto label1;

        virtualinvoke r4.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();

     label1:
        virtualinvoke r4.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        r10 = virtualinvoke r4.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        r6 = virtualinvoke r10.<sun.security.util.DerValue: byte[] toByteArray()>();
        $r11 = new javax.security.auth.x500.X500Principal;
        specialinvoke $r11.<javax.security.auth.x500.X500Principal: void <init>(byte[])>(r6);

     label2:
        return $r11;

     label3:
        $r12 := @caughtexception;
        r13 = $r12;
        $r14 = new java.lang.RuntimeException;
        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not parse issuer", r13);
        throw $r14;

        catch java.lang.Exception from label0 to label2 with label3;
    }

    public static byte[] getEncodedInternal(java.security.cert.X509CRL) throws java.security.cert.CRLException
    {
        java.security.cert.X509CRL r0;
        boolean $z0;
        sun.security.x509.X509CRLImpl $r1;
        byte[] $r2, $r3;

        r0 := @parameter0: java.security.cert.X509CRL;
        $z0 = r0 instanceof sun.security.x509.X509CRLImpl;
        if $z0 == 0 goto label0;

        $r1 = (sun.security.x509.X509CRLImpl) r0;
        $r2 = virtualinvoke $r1.<sun.security.x509.X509CRLImpl: byte[] getEncodedInternal()>();
        return $r2;

     label0:
        $r3 = virtualinvoke r0.<java.security.cert.X509CRL: byte[] getEncoded()>();
        return $r3;
    }

    public static sun.security.x509.X509CRLImpl toImpl(java.security.cert.X509CRL) throws java.security.cert.CRLException
    {
        java.security.cert.X509CRL r0;
        boolean $z0;
        sun.security.x509.X509CRLImpl $r1, $r2;

        r0 := @parameter0: java.security.cert.X509CRL;
        $z0 = r0 instanceof sun.security.x509.X509CRLImpl;
        if $z0 == 0 goto label0;

        $r1 = (sun.security.x509.X509CRLImpl) r0;
        return $r1;

     label0:
        $r2 = staticinvoke <sun.security.provider.X509Factory: sun.security.x509.X509CRLImpl intern(java.security.cert.X509CRL)>(r0);
        return $r2;
    }

    private javax.security.auth.x500.X500Principal getCertIssuer(sun.security.x509.X509CRLEntryImpl, javax.security.auth.x500.X500Principal) throws java.io.IOException
    {
        sun.security.x509.X509CRLImpl r0;
        sun.security.x509.X509CRLEntryImpl r1;
        javax.security.auth.x500.X500Principal r2, $r9;
        sun.security.x509.CertificateIssuerExtension r3;
        sun.security.x509.GeneralNames r4;
        sun.security.x509.X500Name r5;
        java.lang.Object $r6;
        sun.security.x509.GeneralName $r7;
        sun.security.x509.GeneralNameInterface $r8;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: sun.security.x509.X509CRLEntryImpl;
        r2 := @parameter1: javax.security.auth.x500.X500Principal;
        r3 = virtualinvoke r1.<sun.security.x509.X509CRLEntryImpl: sun.security.x509.CertificateIssuerExtension getCertificateIssuerExtension()>();
        if r3 == null goto label0;

        $r6 = virtualinvoke r3.<sun.security.x509.CertificateIssuerExtension: java.lang.Object get(java.lang.String)>("issuer");
        r4 = (sun.security.x509.GeneralNames) $r6;
        $r7 = virtualinvoke r4.<sun.security.x509.GeneralNames: sun.security.x509.GeneralName get(int)>(0);
        $r8 = virtualinvoke $r7.<sun.security.x509.GeneralName: sun.security.x509.GeneralNameInterface getName()>();
        r5 = (sun.security.x509.X500Name) $r8;
        $r9 = virtualinvoke r5.<sun.security.x509.X500Name: javax.security.auth.x500.X500Principal asX500Principal()>();
        return $r9;

     label0:
        return r2;
    }

    public void derEncode(java.io.OutputStream) throws java.io.IOException
    {
        sun.security.x509.X509CRLImpl r0;
        java.io.OutputStream r1;
        byte[] $r2, $r4, $r6;
        java.io.IOException $r3;
        java.lang.Object $r5;

        r0 := @this: sun.security.x509.X509CRLImpl;
        r1 := @parameter0: java.io.OutputStream;
        $r2 = r0.<sun.security.x509.X509CRLImpl: byte[] signedCRL>;
        if $r2 != null goto label0;

        $r3 = new java.io.IOException;
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Null CRL to encode");
        throw $r3;

     label0:
        $r4 = r0.<sun.security.x509.X509CRLImpl: byte[] signedCRL>;
        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();
        $r6 = (byte[]) $r5;
        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r6);
        return;
    }
}
