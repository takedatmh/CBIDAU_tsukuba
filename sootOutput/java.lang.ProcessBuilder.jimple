public final class java.lang.ProcessBuilder extends java.lang.Object
{
    private java.util.List command;
    private java.io.File directory;
    private java.util.Map environment;
    private boolean redirectErrorStream;
    private java.lang.ProcessBuilder$Redirect[] redirects;
    static final boolean $assertionsDisabled;

    public void <init>(java.util.List)
    {
        java.lang.ProcessBuilder r0;
        java.util.List r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.lang.ProcessBuilder;
        r1 := @parameter0: java.util.List;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        r0.<java.lang.ProcessBuilder: java.util.List command> = r1;
        return;
    }

    public transient void <init>(java.lang.String[])
    {
        java.lang.ProcessBuilder r0;
        java.lang.String[] r1, r3;
        java.util.ArrayList $r2;
        int i0, i1, $i2;
        java.lang.String r4;
        java.util.List $r5;

        r0 := @this: java.lang.ProcessBuilder;
        r1 := @parameter0: java.lang.String[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = new java.util.ArrayList;
        $i2 = lengthof r1;
        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i2);
        r0.<java.lang.ProcessBuilder: java.util.List command> = $r2;
        r3 = r1;
        i0 = lengthof r3;
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        r4 = r3[i1];
        $r5 = r0.<java.lang.ProcessBuilder: java.util.List command>;
        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);
        i1 = i1 + 1;
        goto label0;

     label1:
        return;
    }

    public java.lang.ProcessBuilder command(java.util.List)
    {
        java.lang.ProcessBuilder r0;
        java.util.List r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.lang.ProcessBuilder;
        r1 := @parameter0: java.util.List;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        r0.<java.lang.ProcessBuilder: java.util.List command> = r1;
        return r0;
    }

    public transient java.lang.ProcessBuilder command(java.lang.String[])
    {
        java.lang.ProcessBuilder r0;
        java.lang.String[] r1, r3;
        java.util.ArrayList $r2;
        int i0, i1, $i2;
        java.lang.String r4;
        java.util.List $r5;

        r0 := @this: java.lang.ProcessBuilder;
        r1 := @parameter0: java.lang.String[];
        $r2 = new java.util.ArrayList;
        $i2 = lengthof r1;
        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i2);
        r0.<java.lang.ProcessBuilder: java.util.List command> = $r2;
        r3 = r1;
        i0 = lengthof r3;
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        r4 = r3[i1];
        $r5 = r0.<java.lang.ProcessBuilder: java.util.List command>;
        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);
        i1 = i1 + 1;
        goto label0;

     label1:
        return r0;
    }

    public java.util.List command()
    {
        java.lang.ProcessBuilder r0;
        java.util.List $r1;

        r0 := @this: java.lang.ProcessBuilder;
        $r1 = r0.<java.lang.ProcessBuilder: java.util.List command>;
        return $r1;
    }

    public java.util.Map environment()
    {
        java.lang.ProcessBuilder r0;
        java.lang.SecurityManager r1;
        java.lang.RuntimePermission $r2;
        java.util.Map $r3, $r4, $r5, $r7;
        boolean $z0;
        java.lang.AssertionError $r6;

        r0 := @this: java.lang.ProcessBuilder;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = new java.lang.RuntimePermission;
        specialinvoke $r2.<java.lang.RuntimePermission: void <init>(java.lang.String)>("getenv.*");
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label0:
        $r3 = r0.<java.lang.ProcessBuilder: java.util.Map environment>;
        if $r3 != null goto label1;

        $r4 = staticinvoke <java.lang.ProcessEnvironment: java.util.Map environment()>();
        r0.<java.lang.ProcessBuilder: java.util.Map environment> = $r4;

     label1:
        $z0 = <java.lang.ProcessBuilder: boolean $assertionsDisabled>;
        if $z0 != 0 goto label2;

        $r5 = r0.<java.lang.ProcessBuilder: java.util.Map environment>;
        if $r5 != null goto label2;

        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label2:
        $r7 = r0.<java.lang.ProcessBuilder: java.util.Map environment>;
        return $r7;
    }

    java.lang.ProcessBuilder environment(java.lang.String[])
    {
        java.lang.ProcessBuilder r0;
        java.lang.String[] r1, r2;
        boolean $z0, $z1;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.String r3, $r10, $r11;
        java.util.Map $r4, $r6, $r7, $r9;
        java.lang.AssertionError $r5, $r8;

        r0 := @this: java.lang.ProcessBuilder;
        r1 := @parameter0: java.lang.String[];
        $z0 = <java.lang.ProcessBuilder: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r4 = r0.<java.lang.ProcessBuilder: java.util.Map environment>;
        if $r4 == null goto label0;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label0:
        if r1 == null goto label5;

        $i3 = lengthof r1;
        $r6 = staticinvoke <java.lang.ProcessEnvironment: java.util.Map emptyEnvironment(int)>($i3);
        r0.<java.lang.ProcessBuilder: java.util.Map environment> = $r6;
        $z1 = <java.lang.ProcessBuilder: boolean $assertionsDisabled>;
        if $z1 != 0 goto label1;

        $r7 = r0.<java.lang.ProcessBuilder: java.util.Map environment>;
        if $r7 != null goto label1;

        $r8 = new java.lang.AssertionError;
        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();
        throw $r8;

     label1:
        r2 = r1;
        i0 = lengthof r2;
        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r3 = r2[i1];
        $i4 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(0);
        if $i4 == -1 goto label3;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("\u0000.*", "");

     label3:
        i2 = virtualinvoke r3.<java.lang.String: int indexOf(int,int)>(61, 0);
        if i2 == -1 goto label4;

        $r9 = r0.<java.lang.ProcessBuilder: java.util.Map environment>;
        $r10 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i2);
        $i5 = i2 + 1;
        $r11 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i5);
        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

     label4:
        i1 = i1 + 1;
        goto label2;

     label5:
        return r0;
    }

    public java.io.File directory()
    {
        java.lang.ProcessBuilder r0;
        java.io.File $r1;

        r0 := @this: java.lang.ProcessBuilder;
        $r1 = r0.<java.lang.ProcessBuilder: java.io.File directory>;
        return $r1;
    }

    public java.lang.ProcessBuilder directory(java.io.File)
    {
        java.lang.ProcessBuilder r0;
        java.io.File r1;

        r0 := @this: java.lang.ProcessBuilder;
        r1 := @parameter0: java.io.File;
        r0.<java.lang.ProcessBuilder: java.io.File directory> = r1;
        return r0;
    }

    private java.lang.ProcessBuilder$Redirect[] redirects()
    {
        java.lang.ProcessBuilder r0;
        java.lang.ProcessBuilder$Redirect $r1, $r4, $r5;
        java.lang.ProcessBuilder$Redirect[] $r2, $r3, $r6;

        r0 := @this: java.lang.ProcessBuilder;
        $r2 = r0.<java.lang.ProcessBuilder: java.lang.ProcessBuilder$Redirect[] redirects>;
        if $r2 != null goto label0;

        $r3 = newarray (java.lang.ProcessBuilder$Redirect)[3];
        $r1 = <java.lang.ProcessBuilder$Redirect: java.lang.ProcessBuilder$Redirect PIPE>;
        $r3[0] = $r1;
        $r4 = <java.lang.ProcessBuilder$Redirect: java.lang.ProcessBuilder$Redirect PIPE>;
        $r3[1] = $r4;
        $r5 = <java.lang.ProcessBuilder$Redirect: java.lang.ProcessBuilder$Redirect PIPE>;
        $r3[2] = $r5;
        r0.<java.lang.ProcessBuilder: java.lang.ProcessBuilder$Redirect[] redirects> = $r3;

     label0:
        $r6 = r0.<java.lang.ProcessBuilder: java.lang.ProcessBuilder$Redirect[] redirects>;
        return $r6;
    }

    public java.lang.ProcessBuilder redirectInput(java.lang.ProcessBuilder$Redirect)
    {
        java.lang.ProcessBuilder r0;
        java.lang.ProcessBuilder$Redirect r1;
        java.lang.ProcessBuilder$Redirect$Type $r2, $r4, $r5, $r6;
        java.lang.StringBuilder $r3, $r8, $r9;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r10;
        java.lang.ProcessBuilder$Redirect[] $r11;

        r0 := @this: java.lang.ProcessBuilder;
        r1 := @parameter0: java.lang.ProcessBuilder$Redirect;
        $r4 = virtualinvoke r1.<java.lang.ProcessBuilder$Redirect: java.lang.ProcessBuilder$Redirect$Type type()>();
        $r2 = <java.lang.ProcessBuilder$Redirect$Type: java.lang.ProcessBuilder$Redirect$Type WRITE>;
        if $r4 == $r2 goto label0;

        $r5 = virtualinvoke r1.<java.lang.ProcessBuilder$Redirect: java.lang.ProcessBuilder$Redirect$Type type()>();
        $r6 = <java.lang.ProcessBuilder$Redirect$Type: java.lang.ProcessBuilder$Redirect$Type APPEND>;
        if $r5 != $r6 goto label1;

     label0:
        $r7 = new java.lang.IllegalArgumentException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Redirect invalid for reading: ");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);
        throw $r7;

     label1:
        $r11 = specialinvoke r0.<java.lang.ProcessBuilder: java.lang.ProcessBuilder$Redirect[] redirects()>();
        $r11[0] = r1;
        return r0;
    }

    public java.lang.ProcessBuilder redirectOutput(java.lang.ProcessBuilder$Redirect)
    {
        java.lang.ProcessBuilder r0;
        java.lang.ProcessBuilder$Redirect r1;
        java.lang.ProcessBuilder$Redirect$Type $r2, $r4;
        java.lang.StringBuilder $r3, $r6, $r7;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r8;
        java.lang.ProcessBuilder$Redirect[] $r9;

        r0 := @this: java.lang.ProcessBuilder;
        r1 := @parameter0: java.lang.ProcessBuilder$Redirect;
        $r4 = virtualinvoke r1.<java.lang.ProcessBuilder$Redirect: java.lang.ProcessBuilder$Redirect$Type type()>();
        $r2 = <java.lang.ProcessBuilder$Redirect$Type: java.lang.ProcessBuilder$Redirect$Type READ>;
        if $r4 != $r2 goto label0;

        $r5 = new java.lang.IllegalArgumentException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Redirect invalid for writing: ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);
        throw $r5;

     label0:
        $r9 = specialinvoke r0.<java.lang.ProcessBuilder: java.lang.ProcessBuilder$Redirect[] redirects()>();
        $r9[1] = r1;
        return r0;
    }

    public java.lang.ProcessBuilder redirectError(java.lang.ProcessBuilder$Redirect)
    {
        java.lang.ProcessBuilder r0;
        java.lang.ProcessBuilder$Redirect r1;
        java.lang.ProcessBuilder$Redirect$Type $r2, $r4;
        java.lang.StringBuilder $r3, $r6, $r7;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r8;
        java.lang.ProcessBuilder$Redirect[] $r9;

        r0 := @this: java.lang.ProcessBuilder;
        r1 := @parameter0: java.lang.ProcessBuilder$Redirect;
        $r4 = virtualinvoke r1.<java.lang.ProcessBuilder$Redirect: java.lang.ProcessBuilder$Redirect$Type type()>();
        $r2 = <java.lang.ProcessBuilder$Redirect$Type: java.lang.ProcessBuilder$Redirect$Type READ>;
        if $r4 != $r2 goto label0;

        $r5 = new java.lang.IllegalArgumentException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Redirect invalid for writing: ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);
        throw $r5;

     label0:
        $r9 = specialinvoke r0.<java.lang.ProcessBuilder: java.lang.ProcessBuilder$Redirect[] redirects()>();
        $r9[2] = r1;
        return r0;
    }

    public java.lang.ProcessBuilder redirectInput(java.io.File)
    {
        java.lang.ProcessBuilder r0, $r3;
        java.io.File r1;
        java.lang.ProcessBuilder$Redirect $r2;

        r0 := @this: java.lang.ProcessBuilder;
        r1 := @parameter0: java.io.File;
        $r2 = staticinvoke <java.lang.ProcessBuilder$Redirect: java.lang.ProcessBuilder$Redirect 'from'(java.io.File)>(r1);
        $r3 = virtualinvoke r0.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectInput(java.lang.ProcessBuilder$Redirect)>($r2);
        return $r3;
    }

    public java.lang.ProcessBuilder redirectOutput(java.io.File)
    {
        java.lang.ProcessBuilder r0, $r3;
        java.io.File r1;
        java.lang.ProcessBuilder$Redirect $r2;

        r0 := @this: java.lang.ProcessBuilder;
        r1 := @parameter0: java.io.File;
        $r2 = staticinvoke <java.lang.ProcessBuilder$Redirect: java.lang.ProcessBuilder$Redirect 'to'(java.io.File)>(r1);
        $r3 = virtualinvoke r0.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectOutput(java.lang.ProcessBuilder$Redirect)>($r2);
        return $r3;
    }

    public java.lang.ProcessBuilder redirectError(java.io.File)
    {
        java.lang.ProcessBuilder r0, $r3;
        java.io.File r1;
        java.lang.ProcessBuilder$Redirect $r2;

        r0 := @this: java.lang.ProcessBuilder;
        r1 := @parameter0: java.io.File;
        $r2 = staticinvoke <java.lang.ProcessBuilder$Redirect: java.lang.ProcessBuilder$Redirect 'to'(java.io.File)>(r1);
        $r3 = virtualinvoke r0.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectError(java.lang.ProcessBuilder$Redirect)>($r2);
        return $r3;
    }

    public java.lang.ProcessBuilder$Redirect redirectInput()
    {
        java.lang.ProcessBuilder r0;
        java.lang.ProcessBuilder$Redirect[] $r1, $r3;
        java.lang.ProcessBuilder$Redirect $r2;

        r0 := @this: java.lang.ProcessBuilder;
        $r1 = r0.<java.lang.ProcessBuilder: java.lang.ProcessBuilder$Redirect[] redirects>;
        if $r1 != null goto label0;

        $r2 = <java.lang.ProcessBuilder$Redirect: java.lang.ProcessBuilder$Redirect PIPE>;
        goto label1;

     label0:
        $r3 = r0.<java.lang.ProcessBuilder: java.lang.ProcessBuilder$Redirect[] redirects>;
        $r2 = $r3[0];

     label1:
        return $r2;
    }

    public java.lang.ProcessBuilder$Redirect redirectOutput()
    {
        java.lang.ProcessBuilder r0;
        java.lang.ProcessBuilder$Redirect[] $r1, $r3;
        java.lang.ProcessBuilder$Redirect $r2;

        r0 := @this: java.lang.ProcessBuilder;
        $r1 = r0.<java.lang.ProcessBuilder: java.lang.ProcessBuilder$Redirect[] redirects>;
        if $r1 != null goto label0;

        $r2 = <java.lang.ProcessBuilder$Redirect: java.lang.ProcessBuilder$Redirect PIPE>;
        goto label1;

     label0:
        $r3 = r0.<java.lang.ProcessBuilder: java.lang.ProcessBuilder$Redirect[] redirects>;
        $r2 = $r3[1];

     label1:
        return $r2;
    }

    public java.lang.ProcessBuilder$Redirect redirectError()
    {
        java.lang.ProcessBuilder r0;
        java.lang.ProcessBuilder$Redirect[] $r1, $r3;
        java.lang.ProcessBuilder$Redirect $r2;

        r0 := @this: java.lang.ProcessBuilder;
        $r1 = r0.<java.lang.ProcessBuilder: java.lang.ProcessBuilder$Redirect[] redirects>;
        if $r1 != null goto label0;

        $r2 = <java.lang.ProcessBuilder$Redirect: java.lang.ProcessBuilder$Redirect PIPE>;
        goto label1;

     label0:
        $r3 = r0.<java.lang.ProcessBuilder: java.lang.ProcessBuilder$Redirect[] redirects>;
        $r2 = $r3[2];

     label1:
        return $r2;
    }

    public java.lang.ProcessBuilder inheritIO()
    {
        java.lang.ProcessBuilder r0;
        java.lang.ProcessBuilder$Redirect $r1;
        java.lang.ProcessBuilder$Redirect[] $r2;

        r0 := @this: java.lang.ProcessBuilder;
        $r2 = specialinvoke r0.<java.lang.ProcessBuilder: java.lang.ProcessBuilder$Redirect[] redirects()>();
        $r1 = <java.lang.ProcessBuilder$Redirect: java.lang.ProcessBuilder$Redirect INHERIT>;
        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r2, $r1);
        return r0;
    }

    public boolean redirectErrorStream()
    {
        java.lang.ProcessBuilder r0;
        boolean $z0;

        r0 := @this: java.lang.ProcessBuilder;
        $z0 = r0.<java.lang.ProcessBuilder: boolean redirectErrorStream>;
        return $z0;
    }

    public java.lang.ProcessBuilder redirectErrorStream(boolean)
    {
        java.lang.ProcessBuilder r0;
        boolean z0;

        r0 := @this: java.lang.ProcessBuilder;
        z0 := @parameter0: boolean;
        r0.<java.lang.ProcessBuilder: boolean redirectErrorStream> = z0;
        return r0;
    }

    public java.lang.Process start() throws java.io.IOException
    {
        java.lang.ProcessBuilder r0;
        java.lang.String[] r1, r2, $r9, r12;
        int i0, i1, $i2, i3, $i4, $i5;
        java.lang.String r3, r4, r14, $r17, r19, $r20, $r29, $r38, $r45;
        java.lang.Exception r5, $r25, r26;
        java.security.AccessControlException r6, $r31;
        java.util.List $r7, $r8;
        java.lang.Object[] $r10;
        java.lang.Object $r11;
        java.lang.NullPointerException $r13;
        java.lang.SecurityManager r15;
        java.io.File $r16, $r18;
        java.io.IOException $r21, $r32;
        java.util.Map $r22;
        java.lang.ProcessBuilder$Redirect[] $r23;
        boolean $z0, $z1;
        java.lang.Process $r24;
        java.lang.StringBuilder $r27, $r28, $r30, $r34, $r35, $r36, $r37, $r39, $r40, $r41, $r42, $r43, $r44;

        r0 := @this: java.lang.ProcessBuilder;
        $r7 = r0.<java.lang.ProcessBuilder: java.util.List command>;
        $r8 = r0.<java.lang.ProcessBuilder: java.util.List command>;
        $i2 = interfaceinvoke $r8.<java.util.List: int size()>();
        $r9 = newarray (java.lang.String)[$i2];
        $r10 = interfaceinvoke $r7.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);
        r1 = (java.lang.String[]) $r10;
        $r11 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();
        r12 = (java.lang.String[]) $r11;
        r2 = r12;
        i0 = lengthof r2;
        i1 = 0;

     label0:
        if i1 >= i0 goto label2;

        r3 = r2[i1];
        if r3 != null goto label1;

        $r13 = new java.lang.NullPointerException;
        specialinvoke $r13.<java.lang.NullPointerException: void <init>()>();
        throw $r13;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        r14 = r12[0];
        r15 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r15 == null goto label3;

        virtualinvoke r15.<java.lang.SecurityManager: void checkExec(java.lang.String)>(r14);

     label3:
        $r16 = r0.<java.lang.ProcessBuilder: java.io.File directory>;
        if $r16 != null goto label4;

        $r17 = null;
        goto label5;

     label4:
        $r18 = r0.<java.lang.ProcessBuilder: java.io.File directory>;
        $r17 = virtualinvoke $r18.<java.io.File: java.lang.String toString()>();

     label5:
        r19 = $r17;
        i3 = 1;

     label6:
        $i4 = lengthof r12;
        if i3 >= $i4 goto label8;

        $r20 = r12[i3];
        $i5 = virtualinvoke $r20.<java.lang.String: int indexOf(int)>(0);
        if $i5 < 0 goto label7;

        $r21 = new java.io.IOException;
        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>("invalid null character in command");
        throw $r21;

     label7:
        i3 = i3 + 1;
        goto label6;

     label8:
        $r22 = r0.<java.lang.ProcessBuilder: java.util.Map environment>;
        $r23 = r0.<java.lang.ProcessBuilder: java.lang.ProcessBuilder$Redirect[] redirects>;
        $z0 = r0.<java.lang.ProcessBuilder: boolean redirectErrorStream>;
        $r24 = staticinvoke <java.lang.ProcessImpl: java.lang.Process start(java.lang.String[],java.util.Map,java.lang.String,java.lang.ProcessBuilder$Redirect[],boolean)>(r12, $r22, r19, $r23, $z0);

     label9:
        return $r24;

     label10:
        $r25 := @caughtexception;
        r26 = $r25;
        $r27 = new java.lang.StringBuilder;
        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");
        $r29 = virtualinvoke r26.<java.lang.Exception: java.lang.String getMessage()>();
        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);
        r4 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();
        r5 = r26;
        $z1 = r26 instanceof java.io.IOException;
        if $z1 == 0 goto label14;

        if r15 == null goto label14;

     label11:
        virtualinvoke r15.<java.lang.SecurityManager: void checkRead(java.lang.String)>(r14);

     label12:
        goto label14;

     label13:
        $r31 := @caughtexception;
        r6 = $r31;
        r4 = "";
        r5 = r6;

     label14:
        $r32 = new java.io.IOException;
        $r34 = new java.lang.StringBuilder;
        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();
        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot run program \"");
        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
        if r19 != null goto label15;

        $r38 = "";
        goto label16;

     label15:
        $r39 = new java.lang.StringBuilder;
        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();
        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (in directory \"");
        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);
        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\")");
        $r38 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

     label16:
        $r43 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);
        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r32.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r45, r5);
        throw $r32;

        catch java.io.IOException from label8 to label9 with label10;
        catch java.lang.IllegalArgumentException from label8 to label9 with label10;
        catch java.security.AccessControlException from label11 to label12 with label13;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/lang/ProcessBuilder";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.lang.ProcessBuilder: boolean $assertionsDisabled> = $z1;
        return;
    }
}
