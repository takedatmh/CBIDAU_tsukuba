public abstract class java.security.Signature extends java.security.SignatureSpi
{
    private static final sun.security.util.Debug debug;
    private java.lang.String algorithm;
    java.security.Provider provider;
    protected static final int UNINITIALIZED;
    protected static final int SIGN;
    protected static final int VERIFY;
    protected int state;
    private static final java.lang.String RSA_SIGNATURE;
    private static final java.lang.String RSA_CIPHER;
    private static final java.util.List rsaIds;
    private static final java.util.Map signatureInfo;

    protected void <init>(java.lang.String)
    {
        java.security.Signature r0;
        java.lang.String r1;

        r0 := @this: java.security.Signature;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.security.SignatureSpi: void <init>()>();
        r0.<java.security.Signature: int state> = 0;
        r0.<java.security.Signature: java.lang.String algorithm> = r1;
        return;
    }

    public static java.security.Signature getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0, $r11;
        java.util.List r1, $r7;
        java.util.Iterator r2;
        java.lang.StringBuilder $r3, $r9, $r10;
        java.security.Provider$Service r4;
        sun.security.jca.GetInstance$Instance r5;
        java.security.NoSuchAlgorithmException r6, $r8, $r15, r16;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r12;
        java.security.Signature$Delegate $r13;
        java.security.Signature $r14;

        r0 := @parameter0: java.lang.String;
        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NONEwithRSA");
        if $z0 == 0 goto label0;

        $r7 = <java.security.Signature: java.util.List rsaIds>;
        r1 = staticinvoke <sun.security.jca.GetInstance: java.util.List getServices(java.util.List)>($r7);
        goto label1;

     label0:
        r1 = staticinvoke <sun.security.jca.GetInstance: java.util.List getServices(java.lang.String,java.lang.String)>("Signature", r0);

     label1:
        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 != 0 goto label2;

        $r8 = new java.security.NoSuchAlgorithmException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Signature not available");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r11);
        throw $r8;

     label2:
        $r12 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.security.Provider$Service) $r12;
        $z2 = staticinvoke <java.security.Signature: boolean isSpi(java.security.Provider$Service)>(r4);
        if $z2 == 0 goto label3;

        $r13 = new java.security.Signature$Delegate;
        specialinvoke $r13.<java.security.Signature$Delegate: void <init>(java.security.Provider$Service,java.util.Iterator,java.lang.String)>(r4, r2, r0);
        return $r13;

     label3:
        r5 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.security.Provider$Service,java.lang.Class)>(r4, class "java/security/SignatureSpi");
        $r14 = staticinvoke <java.security.Signature: java.security.Signature getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>(r5, r0);

     label4:
        return $r14;

     label5:
        $r15 := @caughtexception;
        r16 = $r15;
        r6 = r16;
        $z3 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z3 != 0 goto label2;

        throw r6;

        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
    }

    private static java.security.Signature getInstance(sun.security.jca.GetInstance$Instance, java.lang.String)
    {
        sun.security.jca.GetInstance$Instance r0;
        java.lang.String r1;
        java.security.Signature r2;
        java.security.SignatureSpi r3;
        java.lang.Object $r4, $r5, $r6;
        boolean $z0;
        java.security.Signature$Delegate $r7;
        java.security.Provider $r8;

        r0 := @parameter0: sun.security.jca.GetInstance$Instance;
        r1 := @parameter1: java.lang.String;
        $r4 = r0.<sun.security.jca.GetInstance$Instance: java.lang.Object impl>;
        $z0 = $r4 instanceof java.security.Signature;
        if $z0 == 0 goto label0;

        $r5 = r0.<sun.security.jca.GetInstance$Instance: java.lang.Object impl>;
        r2 = (java.security.Signature) $r5;
        goto label1;

     label0:
        $r6 = r0.<sun.security.jca.GetInstance$Instance: java.lang.Object impl>;
        r3 = (java.security.SignatureSpi) $r6;
        $r7 = new java.security.Signature$Delegate;
        specialinvoke $r7.<java.security.Signature$Delegate: void <init>(java.security.SignatureSpi,java.lang.String)>(r3, r1);
        r2 = $r7;

     label1:
        $r8 = r0.<sun.security.jca.GetInstance$Instance: java.security.Provider provider>;
        r2.<java.security.Signature: java.security.Provider provider> = $r8;
        return r2;
    }

    private static boolean isSpi(java.security.Provider$Service)
    {
        java.security.Provider$Service r0;
        java.lang.String r1, $r4, $r12, $r16, $r18;
        java.lang.Boolean r2;
        java.lang.Object r3, $r6;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Map $r5, $r19;
        sun.security.util.Debug $r7, $r8, $r13;
        java.lang.StringBuilder $r9, $r10, $r11, $r14, $r15, $r17;
        java.lang.Exception $r21, r22;

        r0 := @parameter0: java.security.Provider$Service;
        $r4 = virtualinvoke r0.<java.security.Provider$Service: java.lang.String getType()>();
        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("Cipher");
        if $z1 == 0 goto label0;

        return 1;

     label0:
        r1 = virtualinvoke r0.<java.security.Provider$Service: java.lang.String getClassName()>();
        $r5 = <java.security.Signature: java.util.Map signatureInfo>;
        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        r2 = (java.lang.Boolean) $r6;
        if r2 != null goto label7;

     label1:
        r3 = virtualinvoke r0.<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>(null);
        $z2 = r3 instanceof java.security.SignatureSpi;
        if $z2 == 0 goto label2;

        $z3 = r3 instanceof java.security.Signature;
        if $z3 != 0 goto label2;

        $z4 = 1;
        goto label3;

     label2:
        $z4 = 0;

     label3:
        z0 = $z4;
        $r7 = <java.security.Signature: sun.security.util.Debug debug>;
        if $r7 == null goto label4;

        if z0 != 0 goto label4;

        $r8 = <java.security.Signature: sun.security.util.Debug debug>;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a SignatureSpi ");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r8.<sun.security.util.Debug: void println(java.lang.String)>($r12);
        $r13 = <java.security.Signature: sun.security.util.Debug debug>;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delayed provider selection may not be available for algorithm ");
        $r16 = virtualinvoke r0.<java.security.Provider$Service: java.lang.String getAlgorithm()>();
        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r13.<sun.security.util.Debug: void println(java.lang.String)>($r18);

     label4:
        r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);
        $r19 = <java.security.Signature: java.util.Map signatureInfo>;
        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

     label5:
        goto label7;

     label6:
        $r21 := @caughtexception;
        r22 = $r21;
        return 0;

     label7:
        $z5 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();
        return $z5;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    public static java.security.Signature getInstance(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        java.lang.String r0, r1, $r8;
        java.security.Provider r2;
        boolean $z0;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        java.security.NoSuchProviderException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.security.Signature $r9, $r11;
        sun.security.jca.GetInstance$Instance r10;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NONEwithRSA");
        if $z0 == 0 goto label3;

        if r1 == null goto label0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i0 != 0 goto label1;

     label0:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("missing provider");
        throw $r3;

     label1:
        r2 = staticinvoke <java.security.Security: java.security.Provider getProvider(java.lang.String)>(r1);
        if r2 != null goto label2;

        $r4 = new java.security.NoSuchProviderException;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no such provider: ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.security.NoSuchProviderException: void <init>(java.lang.String)>($r8);
        throw $r4;

     label2:
        $r9 = staticinvoke <java.security.Signature: java.security.Signature getInstanceRSA(java.security.Provider)>(r2);
        return $r9;

     label3:
        r10 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.lang.String)>("Signature", class "java/security/SignatureSpi", r0, r1);
        $r11 = staticinvoke <java.security.Signature: java.security.Signature getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>(r10, r0);
        return $r11;
    }

    public static java.security.Signature getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        java.security.Provider r1;
        sun.security.jca.GetInstance$Instance r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.security.Signature $r4, $r5;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.security.Provider;
        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NONEwithRSA");
        if $z0 == 0 goto label1;

        if r1 != null goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("missing provider");
        throw $r3;

     label0:
        $r4 = staticinvoke <java.security.Signature: java.security.Signature getInstanceRSA(java.security.Provider)>(r1);
        return $r4;

     label1:
        r2 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>("Signature", class "java/security/SignatureSpi", r0, r1);
        $r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>(r2, r0);
        return $r5;
    }

    private static java.security.Signature getInstanceRSA(java.security.Provider) throws java.security.NoSuchAlgorithmException
    {
        java.security.Provider r0;
        java.security.Provider$Service r1;
        sun.security.jca.GetInstance$Instance r2;
        java.security.Signature $r3;
        javax.crypto.Cipher r4;
        java.security.Signature$Delegate $r5;
        java.security.Signature$CipherAdapter $r6;
        java.security.GeneralSecurityException $r7, r8;
        java.security.NoSuchAlgorithmException $r9;
        java.lang.StringBuilder $r10, $r11, $r13;
        java.lang.String $r12, $r14;

        r0 := @parameter0: java.security.Provider;
        r1 = virtualinvoke r0.<java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>("Signature", "NONEwithRSA");
        if r1 == null goto label0;

        r2 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.security.Provider$Service,java.lang.Class)>(r1, class "java/security/SignatureSpi");
        $r3 = staticinvoke <java.security.Signature: java.security.Signature getInstance(sun.security.jca.GetInstance$Instance,java.lang.String)>(r2, "NONEwithRSA");
        return $r3;

     label0:
        r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>("RSA/ECB/PKCS1Padding", r0);
        $r5 = new java.security.Signature$Delegate;
        $r6 = new java.security.Signature$CipherAdapter;
        specialinvoke $r6.<java.security.Signature$CipherAdapter: void <init>(javax.crypto.Cipher)>(r4);
        specialinvoke $r5.<java.security.Signature$Delegate: void <init>(java.security.SignatureSpi,java.lang.String)>($r6, "NONEwithRSA");

     label1:
        return $r5;

     label2:
        $r7 := @caughtexception;
        r8 = $r7;
        $r9 = new java.security.NoSuchAlgorithmException;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no such algorithm: NONEwithRSA for provider ");
        $r12 = virtualinvoke r0.<java.security.Provider: java.lang.String getName()>();
        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>($r14, r8);
        throw $r9;

        catch java.security.GeneralSecurityException from label0 to label1 with label2;
    }

    public final java.security.Provider getProvider()
    {
        java.security.Signature r0;
        java.security.Provider $r1;

        r0 := @this: java.security.Signature;
        virtualinvoke r0.<java.security.Signature: void chooseFirstProvider()>();
        $r1 = r0.<java.security.Signature: java.security.Provider provider>;
        return $r1;
    }

    void chooseFirstProvider()
    {
        java.security.Signature r0;

        r0 := @this: java.security.Signature;
        return;
    }

    public final void initVerify(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        java.security.Signature r0;
        java.security.PublicKey r1;

        r0 := @this: java.security.Signature;
        r1 := @parameter0: java.security.PublicKey;
        virtualinvoke r0.<java.security.Signature: void engineInitVerify(java.security.PublicKey)>(r1);
        r0.<java.security.Signature: int state> = 3;
        return;
    }

    public final void initVerify(java.security.cert.Certificate) throws java.security.InvalidKeyException
    {
        java.security.Signature r0;
        java.security.cert.Certificate r1;
        java.security.cert.X509Certificate r2;
        java.util.Set r3;
        boolean[] r4;
        boolean $z0, $z1, $z2, $z3;
        java.security.InvalidKeyException $r5;
        java.security.PublicKey r6;

        r0 := @this: java.security.Signature;
        r1 := @parameter0: java.security.cert.Certificate;
        $z0 = r1 instanceof java.security.cert.X509Certificate;
        if $z0 == 0 goto label0;

        r2 = (java.security.cert.X509Certificate) r1;
        r3 = virtualinvoke r2.<java.security.cert.X509Certificate: java.util.Set getCriticalExtensionOIDs()>();
        if r3 == null goto label0;

        $z1 = interfaceinvoke r3.<java.util.Set: boolean isEmpty()>();
        if $z1 != 0 goto label0;

        $z2 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>("2.5.29.15");
        if $z2 == 0 goto label0;

        r4 = virtualinvoke r2.<java.security.cert.X509Certificate: boolean[] getKeyUsage()>();
        if r4 == null goto label0;

        $z3 = r4[0];
        if $z3 != 0 goto label0;

        $r5 = new java.security.InvalidKeyException;
        specialinvoke $r5.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Wrong key usage");
        throw $r5;

     label0:
        r6 = virtualinvoke r1.<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>();
        virtualinvoke r0.<java.security.Signature: void engineInitVerify(java.security.PublicKey)>(r6);
        r0.<java.security.Signature: int state> = 3;
        return;
    }

    public final void initSign(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        java.security.Signature r0;
        java.security.PrivateKey r1;

        r0 := @this: java.security.Signature;
        r1 := @parameter0: java.security.PrivateKey;
        virtualinvoke r0.<java.security.Signature: void engineInitSign(java.security.PrivateKey)>(r1);
        r0.<java.security.Signature: int state> = 2;
        return;
    }

    public final void initSign(java.security.PrivateKey, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        java.security.Signature r0;
        java.security.PrivateKey r1;
        java.security.SecureRandom r2;

        r0 := @this: java.security.Signature;
        r1 := @parameter0: java.security.PrivateKey;
        r2 := @parameter1: java.security.SecureRandom;
        virtualinvoke r0.<java.security.Signature: void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)>(r1, r2);
        r0.<java.security.Signature: int state> = 2;
        return;
    }

    public final byte[] sign() throws java.security.SignatureException
    {
        java.security.Signature r0;
        int $i0;
        byte[] $r1;
        java.security.SignatureException $r2;

        r0 := @this: java.security.Signature;
        $i0 = r0.<java.security.Signature: int state>;
        if $i0 != 2 goto label0;

        $r1 = virtualinvoke r0.<java.security.Signature: byte[] engineSign()>();
        return $r1;

     label0:
        $r2 = new java.security.SignatureException;
        specialinvoke $r2.<java.security.SignatureException: void <init>(java.lang.String)>("object not initialized for signing");
        throw $r2;
    }

    public final int sign(byte[], int, int) throws java.security.SignatureException
    {
        java.security.Signature r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r2, $r3, $r4;
        java.security.SignatureException $r5;

        r0 := @this: java.security.Signature;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if r1 != null goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No output buffer given");
        throw $r2;

     label0:
        if i0 < 0 goto label1;

        if i1 >= 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("offset or len is less than 0");
        throw $r3;

     label2:
        $i2 = lengthof r1;
        $i3 = $i2 - i0;
        if $i3 >= i1 goto label3;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output buffer too small for specified offset and length");
        throw $r4;

     label3:
        $i4 = r0.<java.security.Signature: int state>;
        if $i4 == 2 goto label4;

        $r5 = new java.security.SignatureException;
        specialinvoke $r5.<java.security.SignatureException: void <init>(java.lang.String)>("object not initialized for signing");
        throw $r5;

     label4:
        $i5 = virtualinvoke r0.<java.security.Signature: int engineSign(byte[],int,int)>(r1, i0, i1);
        return $i5;
    }

    public final boolean verify(byte[]) throws java.security.SignatureException
    {
        java.security.Signature r0;
        byte[] r1;
        int $i0;
        boolean $z0;
        java.security.SignatureException $r2;

        r0 := @this: java.security.Signature;
        r1 := @parameter0: byte[];
        $i0 = r0.<java.security.Signature: int state>;
        if $i0 != 3 goto label0;

        $z0 = virtualinvoke r0.<java.security.Signature: boolean engineVerify(byte[])>(r1);
        return $z0;

     label0:
        $r2 = new java.security.SignatureException;
        specialinvoke $r2.<java.security.SignatureException: void <init>(java.lang.String)>("object not initialized for verification");
        throw $r2;
    }

    public final boolean verify(byte[], int, int) throws java.security.SignatureException
    {
        java.security.Signature r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r2, $r3, $r4;
        boolean $z0;
        java.security.SignatureException $r5;

        r0 := @this: java.security.Signature;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = r0.<java.security.Signature: int state>;
        if $i2 != 3 goto label4;

        if r1 != null goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("signature is null");
        throw $r2;

     label0:
        if i0 < 0 goto label1;

        if i1 >= 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("offset or length is less than 0");
        throw $r3;

     label2:
        $i3 = lengthof r1;
        $i4 = $i3 - i0;
        if $i4 >= i1 goto label3;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("signature too small for specified offset and length");
        throw $r4;

     label3:
        $z0 = virtualinvoke r0.<java.security.Signature: boolean engineVerify(byte[],int,int)>(r1, i0, i1);
        return $z0;

     label4:
        $r5 = new java.security.SignatureException;
        specialinvoke $r5.<java.security.SignatureException: void <init>(java.lang.String)>("object not initialized for verification");
        throw $r5;
    }

    public final void update(byte) throws java.security.SignatureException
    {
        java.security.Signature r0;
        byte b0;
        int $i1, $i2;
        java.security.SignatureException $r1;

        r0 := @this: java.security.Signature;
        b0 := @parameter0: byte;
        $i1 = r0.<java.security.Signature: int state>;
        if $i1 == 3 goto label0;

        $i2 = r0.<java.security.Signature: int state>;
        if $i2 != 2 goto label1;

     label0:
        virtualinvoke r0.<java.security.Signature: void engineUpdate(byte)>(b0);
        goto label2;

     label1:
        $r1 = new java.security.SignatureException;
        specialinvoke $r1.<java.security.SignatureException: void <init>(java.lang.String)>("object not initialized for signature or verification");
        throw $r1;

     label2:
        return;
    }

    public final void update(byte[]) throws java.security.SignatureException
    {
        java.security.Signature r0;
        byte[] r1;
        int $i0;

        r0 := @this: java.security.Signature;
        r1 := @parameter0: byte[];
        $i0 = lengthof r1;
        virtualinvoke r0.<java.security.Signature: void update(byte[],int,int)>(r1, 0, $i0);
        return;
    }

    public final void update(byte[], int, int) throws java.security.SignatureException
    {
        java.security.Signature r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r2, $r3, $r4;
        java.security.SignatureException $r5;

        r0 := @this: java.security.Signature;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = r0.<java.security.Signature: int state>;
        if $i2 == 2 goto label0;

        $i3 = r0.<java.security.Signature: int state>;
        if $i3 != 3 goto label5;

     label0:
        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("data is null");
        throw $r2;

     label1:
        if i0 < 0 goto label2;

        if i1 >= 0 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("off or len is less than 0");
        throw $r3;

     label3:
        $i4 = lengthof r1;
        $i5 = $i4 - i0;
        if $i5 >= i1 goto label4;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("data too small for specified offset and length");
        throw $r4;

     label4:
        virtualinvoke r0.<java.security.Signature: void engineUpdate(byte[],int,int)>(r1, i0, i1);
        goto label6;

     label5:
        $r5 = new java.security.SignatureException;
        specialinvoke $r5.<java.security.SignatureException: void <init>(java.lang.String)>("object not initialized for signature or verification");
        throw $r5;

     label6:
        return;
    }

    public final void update(java.nio.ByteBuffer) throws java.security.SignatureException
    {
        java.security.Signature r0;
        java.nio.ByteBuffer r1;
        int $i0, $i1;
        java.security.SignatureException $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.security.Signature;
        r1 := @parameter0: java.nio.ByteBuffer;
        $i0 = r0.<java.security.Signature: int state>;
        if $i0 == 2 goto label0;

        $i1 = r0.<java.security.Signature: int state>;
        if $i1 == 3 goto label0;

        $r2 = new java.security.SignatureException;
        specialinvoke $r2.<java.security.SignatureException: void <init>(java.lang.String)>("object not initialized for signature or verification");
        throw $r2;

     label0:
        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label1:
        virtualinvoke r0.<java.security.Signature: void engineUpdate(java.nio.ByteBuffer)>(r1);
        return;
    }

    public final java.lang.String getAlgorithm()
    {
        java.security.Signature r0;
        java.lang.String $r1;

        r0 := @this: java.security.Signature;
        $r1 = r0.<java.security.Signature: java.lang.String algorithm>;
        return $r1;
    }

    public java.lang.String toString()
    {
        java.security.Signature r0;
        java.lang.String r1, $r4, $r7;
        int $i0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;

        r0 := @this: java.security.Signature;
        r1 = "";
        $i0 = r0.<java.security.Signature: int state>;
        tableswitch($i0)
        {
            case 0: goto label0;
            case 1: goto label3;
            case 2: goto label2;
            case 3: goto label1;
            default: goto label3;
        };

     label0:
        r1 = "<not initialized>";
        goto label3;

     label1:
        r1 = "<initialized for verifying>";
        goto label3;

     label2:
        r1 = "<initialized for signing>";

     label3:
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature object: ");
        $r4 = virtualinvoke r0.<java.security.Signature: java.lang.String getAlgorithm()>();
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r7;
    }

    public final void setParameter(java.lang.String, java.lang.Object) throws java.security.InvalidParameterException
    {
        java.security.Signature r0;
        java.lang.String r1;
        java.lang.Object r2;

        r0 := @this: java.security.Signature;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object;
        virtualinvoke r0.<java.security.Signature: void engineSetParameter(java.lang.String,java.lang.Object)>(r1, r2);
        return;
    }

    public final void setParameter(java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidAlgorithmParameterException
    {
        java.security.Signature r0;
        java.security.spec.AlgorithmParameterSpec r1;

        r0 := @this: java.security.Signature;
        r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;
        virtualinvoke r0.<java.security.Signature: void engineSetParameter(java.security.spec.AlgorithmParameterSpec)>(r1);
        return;
    }

    public final java.security.AlgorithmParameters getParameters()
    {
        java.security.Signature r0;
        java.security.AlgorithmParameters $r1;

        r0 := @this: java.security.Signature;
        $r1 = virtualinvoke r0.<java.security.Signature: java.security.AlgorithmParameters engineGetParameters()>();
        return $r1;
    }

    public final java.lang.Object getParameter(java.lang.String) throws java.security.InvalidParameterException
    {
        java.security.Signature r0;
        java.lang.String r1;
        java.lang.Object $r2;

        r0 := @this: java.security.Signature;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<java.security.Signature: java.lang.Object engineGetParameter(java.lang.String)>(r1);
        return $r2;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.security.Signature r0;
        boolean $z0;
        java.lang.Object $r1;
        java.lang.CloneNotSupportedException $r2;

        r0 := @this: java.security.Signature;
        $z0 = r0 instanceof java.lang.Cloneable;
        if $z0 == 0 goto label0;

        $r1 = specialinvoke r0.<java.security.SignatureSpi: java.lang.Object clone()>();
        return $r1;

     label0:
        $r2 = new java.lang.CloneNotSupportedException;
        specialinvoke $r2.<java.lang.CloneNotSupportedException: void <init>()>();
        throw $r2;
    }

    static java.lang.String access$000(java.security.Signature)
    {
        java.security.Signature r0;
        java.lang.String $r1;

        r0 := @parameter0: java.security.Signature;
        $r1 = r0.<java.security.Signature: java.lang.String algorithm>;
        return $r1;
    }

    static sun.security.util.Debug access$100()
    {
        sun.security.util.Debug $r0;

        $r0 = <java.security.Signature: sun.security.util.Debug debug>;
        return $r0;
    }

    static boolean access$200(java.security.Provider$Service)
    {
        java.security.Provider$Service r0;
        boolean $z0;

        r0 := @parameter0: java.security.Provider$Service;
        $z0 = staticinvoke <java.security.Signature: boolean isSpi(java.security.Provider$Service)>(r0);
        return $z0;
    }

    static void <clinit>()
    {
        sun.security.jca.ServiceId $r0, $r4, $r5, $r6, $r7;
        java.lang.Boolean r1;
        sun.security.util.Debug $r2;
        sun.security.jca.ServiceId[] $r3;
        java.util.List $r8;
        java.util.concurrent.ConcurrentHashMap $r9;
        java.util.Map $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28;

        $r2 = staticinvoke <sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String,java.lang.String)>("jca", "Signature");
        <java.security.Signature: sun.security.util.Debug debug> = $r2;
        $r3 = newarray (sun.security.jca.ServiceId)[5];
        $r0 = new sun.security.jca.ServiceId;
        specialinvoke $r0.<sun.security.jca.ServiceId: void <init>(java.lang.String,java.lang.String)>("Signature", "NONEwithRSA");
        $r3[0] = $r0;
        $r4 = new sun.security.jca.ServiceId;
        specialinvoke $r4.<sun.security.jca.ServiceId: void <init>(java.lang.String,java.lang.String)>("Cipher", "RSA/ECB/PKCS1Padding");
        $r3[1] = $r4;
        $r5 = new sun.security.jca.ServiceId;
        specialinvoke $r5.<sun.security.jca.ServiceId: void <init>(java.lang.String,java.lang.String)>("Cipher", "RSA/ECB");
        $r3[2] = $r5;
        $r6 = new sun.security.jca.ServiceId;
        specialinvoke $r6.<sun.security.jca.ServiceId: void <init>(java.lang.String,java.lang.String)>("Cipher", "RSA//PKCS1Padding");
        $r3[3] = $r6;
        $r7 = new sun.security.jca.ServiceId;
        specialinvoke $r7.<sun.security.jca.ServiceId: void <init>(java.lang.String,java.lang.String)>("Cipher", "RSA");
        $r3[4] = $r7;
        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);
        <java.security.Signature: java.util.List rsaIds> = $r8;
        $r9 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r9.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
        <java.security.Signature: java.util.Map signatureInfo> = $r9;
        r1 = <java.lang.Boolean: java.lang.Boolean TRUE>;
        $r10 = <java.security.Signature: java.util.Map signatureInfo>;
        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sun.security.provider.DSA$RawDSA", r1);
        $r12 = <java.security.Signature: java.util.Map signatureInfo>;
        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sun.security.provider.DSA$SHA1withDSA", r1);
        $r14 = <java.security.Signature: java.util.Map signatureInfo>;
        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sun.security.rsa.RSASignature$MD2withRSA", r1);
        $r16 = <java.security.Signature: java.util.Map signatureInfo>;
        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sun.security.rsa.RSASignature$MD5withRSA", r1);
        $r18 = <java.security.Signature: java.util.Map signatureInfo>;
        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sun.security.rsa.RSASignature$SHA1withRSA", r1);
        $r20 = <java.security.Signature: java.util.Map signatureInfo>;
        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sun.security.rsa.RSASignature$SHA256withRSA", r1);
        $r22 = <java.security.Signature: java.util.Map signatureInfo>;
        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sun.security.rsa.RSASignature$SHA384withRSA", r1);
        $r24 = <java.security.Signature: java.util.Map signatureInfo>;
        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sun.security.rsa.RSASignature$SHA512withRSA", r1);
        $r26 = <java.security.Signature: java.util.Map signatureInfo>;
        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("com.sun.net.ssl.internal.ssl.RSASignature", r1);
        $r28 = <java.security.Signature: java.util.Map signatureInfo>;
        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sun.security.pkcs11.P11Signature", r1);
        return;
    }
}
