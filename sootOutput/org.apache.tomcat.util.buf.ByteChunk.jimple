public final class org.apache.tomcat.util.buf.ByteChunk extends org.apache.tomcat.util.buf.AbstractChunk
{
    private static final long serialVersionUID;
    public static final java.nio.charset.Charset DEFAULT_CHARSET;
    private transient java.nio.charset.Charset charset;
    private byte[] buff;
    private transient org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel in;
    private transient org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel out;
    private boolean optimizedWrite;

    static void <clinit>()
    {
        java.nio.charset.Charset $r0;

        $r0 = <org.apache.tomcat.util.buf.B2CConverter: java.nio.charset.Charset ISO_8859_1>;
        <org.apache.tomcat.util.buf.ByteChunk: java.nio.charset.Charset DEFAULT_CHARSET> = $r0;
        return;
    }

    public void <init>()
    {
        org.apache.tomcat.util.buf.ByteChunk r0;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        specialinvoke r0.<org.apache.tomcat.util.buf.AbstractChunk: void <init>()>();
        r0.<org.apache.tomcat.util.buf.ByteChunk: org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel in> = null;
        r0.<org.apache.tomcat.util.buf.ByteChunk: org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel out> = null;
        r0.<org.apache.tomcat.util.buf.ByteChunk: boolean optimizedWrite> = 1;
        return;
    }

    public void <init>(int)
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        int i0;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        i0 := @parameter0: int;
        specialinvoke r0.<org.apache.tomcat.util.buf.AbstractChunk: void <init>()>();
        r0.<org.apache.tomcat.util.buf.ByteChunk: org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel in> = null;
        r0.<org.apache.tomcat.util.buf.ByteChunk: org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel out> = null;
        r0.<org.apache.tomcat.util.buf.ByteChunk: boolean optimizedWrite> = 1;
        virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: void allocate(int,int)>(i0, -1);
        return;
    }

    public org.apache.tomcat.util.buf.ByteChunk getClone()
    {
        org.apache.tomcat.util.buf.ByteChunk r0, $r3;
        java.lang.Exception r1, $r4;
        java.lang.Object $r2;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;

     label0:
        $r2 = virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: java.lang.Object clone()>();
        $r3 = (org.apache.tomcat.util.buf.ByteChunk) $r2;

     label1:
        return $r3;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        return null;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        java.io.ObjectOutputStream r1;
        java.nio.charset.Charset $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: java.io.ObjectOutputStream;
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        $r2 = virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: java.nio.charset.Charset getCharset()>();
        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>($r3);
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        java.io.ObjectInputStream r1;
        java.lang.String $r2;
        java.nio.charset.Charset $r3;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        $r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.String readUTF()>();
        $r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r2);
        r0.<org.apache.tomcat.util.buf.ByteChunk: java.nio.charset.Charset charset> = $r3;
        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        return $r1;
    }

    public void recycle()
    {
        org.apache.tomcat.util.buf.ByteChunk r0;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        specialinvoke r0.<org.apache.tomcat.util.buf.AbstractChunk: void recycle()>();
        r0.<org.apache.tomcat.util.buf.ByteChunk: java.nio.charset.Charset charset> = null;
        return;
    }

    public void reset()
    {
        org.apache.tomcat.util.buf.ByteChunk r0;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff> = null;
        return;
    }

    public void allocate(int, int)
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        int i0, i1, $i2;
        byte[] $r1, $r2, $r3;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        if $r1 == null goto label0;

        $r2 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i2 = lengthof $r2;
        if $i2 >= i0 goto label1;

     label0:
        $r3 = newarray (byte)[i0];
        r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff> = $r3;

     label1:
        virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: void setLimit(int)>(i1);
        r0.<org.apache.tomcat.util.buf.ByteChunk: int start> = 0;
        r0.<org.apache.tomcat.util.buf.ByteChunk: int end> = 0;
        r0.<org.apache.tomcat.util.buf.ByteChunk: boolean isSet> = 1;
        r0.<org.apache.tomcat.util.buf.ByteChunk: boolean hasHashCode> = 0;
        return;
    }

    public void setBytes(byte[], int, int)
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        byte[] r1;
        int i0, i1, $i2, $i3;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff> = r1;
        r0.<org.apache.tomcat.util.buf.ByteChunk: int start> = i0;
        $i2 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i3 = $i2 + i1;
        r0.<org.apache.tomcat.util.buf.ByteChunk: int end> = $i3;
        r0.<org.apache.tomcat.util.buf.ByteChunk: boolean isSet> = 1;
        r0.<org.apache.tomcat.util.buf.ByteChunk: boolean hasHashCode> = 0;
        return;
    }

    public void setOptimizedWrite(boolean)
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        boolean z0;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        z0 := @parameter0: boolean;
        r0.<org.apache.tomcat.util.buf.ByteChunk: boolean optimizedWrite> = z0;
        return;
    }

    public void setCharset(java.nio.charset.Charset)
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        java.nio.charset.Charset r1;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: java.nio.charset.Charset;
        r0.<org.apache.tomcat.util.buf.ByteChunk: java.nio.charset.Charset charset> = r1;
        return;
    }

    public java.nio.charset.Charset getCharset()
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        java.nio.charset.Charset $r1, $r2, $r3;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        $r2 = r0.<org.apache.tomcat.util.buf.ByteChunk: java.nio.charset.Charset charset>;
        if $r2 != null goto label0;

        $r1 = <org.apache.tomcat.util.buf.ByteChunk: java.nio.charset.Charset DEFAULT_CHARSET>;
        r0.<org.apache.tomcat.util.buf.ByteChunk: java.nio.charset.Charset charset> = $r1;

     label0:
        $r3 = r0.<org.apache.tomcat.util.buf.ByteChunk: java.nio.charset.Charset charset>;
        return $r3;
    }

    public byte[] getBytes()
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        byte[] $r1;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        $r1 = virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] getBuffer()>();
        return $r1;
    }

    public byte[] getBuffer()
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        byte[] $r1;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        $r1 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        return $r1;
    }

    public void setByteInputChannel(org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel)
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel r1;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel;
        r0.<org.apache.tomcat.util.buf.ByteChunk: org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel in> = r1;
        return;
    }

    public void setByteOutputChannel(org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel)
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel r1;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel;
        r0.<org.apache.tomcat.util.buf.ByteChunk: org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel out> = r1;
        return;
    }

    public void append(char) throws java.io.IOException
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        char c0;
        byte $b1;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        c0 := @parameter0: char;
        $b1 = (byte) c0;
        virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: void append(byte)>($b1);
        return;
    }

    public void append(byte) throws java.io.IOException
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        byte b0;
        int i1, $i2, $i3, $i4;
        byte[] $r1;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        b0 := @parameter0: byte;
        virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: void makeSpace(int)>(1);
        i1 = virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: int getLimitInternal()>();
        $i3 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        if $i3 < i1 goto label0;

        virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: void flushBuffer()>();

     label0:
        $r1 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i2 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i4 = $i2 + 1;
        r0.<org.apache.tomcat.util.buf.ByteChunk: int end> = $i4;
        $r1[$i2] = b0;
        return;
    }

    public void append(org.apache.tomcat.util.buf.ByteChunk) throws java.io.IOException
    {
        org.apache.tomcat.util.buf.ByteChunk r0, r1;
        byte[] $r2;
        int $i0, $i1;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: org.apache.tomcat.util.buf.ByteChunk;
        $r2 = virtualinvoke r1.<org.apache.tomcat.util.buf.ByteChunk: byte[] getBytes()>();
        $i0 = virtualinvoke r1.<org.apache.tomcat.util.buf.ByteChunk: int getStart()>();
        $i1 = virtualinvoke r1.<org.apache.tomcat.util.buf.ByteChunk: int getLength()>();
        virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: void append(byte[],int,int)>($r2, $i0, $i1);
        return;
    }

    public void append(byte[], int, int) throws java.io.IOException
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        byte[] r1, $r4, $r6, $r9;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28;
        boolean $z0;
        org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel $r2, $r3, $r8;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: void makeSpace(int)>(i1);
        i2 = virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: int getLimitInternal()>();
        $z0 = r0.<org.apache.tomcat.util.buf.ByteChunk: boolean optimizedWrite>;
        if $z0 == 0 goto label0;

        if i1 != i2 goto label0;

        $i5 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i6 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        if $i5 != $i6 goto label0;

        $r2 = r0.<org.apache.tomcat.util.buf.ByteChunk: org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel out>;
        if $r2 == null goto label0;

        $r3 = r0.<org.apache.tomcat.util.buf.ByteChunk: org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel out>;
        interfaceinvoke $r3.<org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel: void realWriteBytes(byte[],int,int)>(r1, i0, i1);
        return;

     label0:
        $i7 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i8 = i2 - $i7;
        if i1 > $i8 goto label1;

        $r4 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i9 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r4, $i9, i1);
        $i10 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i11 = $i10 + i1;
        r0.<org.apache.tomcat.util.buf.ByteChunk: int end> = $i11;
        return;

     label1:
        $i12 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        i3 = i2 - $i12;
        $r6 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i13 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r6, $i13, i3);
        $i14 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i15 = $i14 + i3;
        r0.<org.apache.tomcat.util.buf.ByteChunk: int end> = $i15;
        virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: void flushBuffer()>();
        i4 = i1 - i3;
        goto label3;

     label2:
        $r8 = r0.<org.apache.tomcat.util.buf.ByteChunk: org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel out>;
        $i16 = i0 + i1;
        $i17 = $i16 - i4;
        $i18 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i19 = i2 - $i18;
        interfaceinvoke $r8.<org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel: void realWriteBytes(byte[],int,int)>(r1, $i17, $i19);
        $i20 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i21 = i2 - $i20;
        i4 = i4 - $i21;

     label3:
        $i22 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i23 = i2 - $i22;
        if i4 > $i23 goto label2;

        $i24 = i0 + i1;
        $i25 = $i24 - i4;
        $r9 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i26 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i25, $r9, $i26, i4);
        $i27 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i28 = $i27 + i4;
        r0.<org.apache.tomcat.util.buf.ByteChunk: int end> = $i28;
        return;
    }

    public int substract() throws java.io.IOException
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        int $i0, $i1;
        boolean $z0;
        byte[] $r2;
        byte $b2;
        short $s3;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        $z0 = specialinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: boolean checkEof()>();
        if $z0 == 0 goto label0;

        return -1;

     label0:
        $r2 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i0 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i1 = $i0 + 1;
        r0.<org.apache.tomcat.util.buf.ByteChunk: int start> = $i1;
        $b2 = $r2[$i0];
        $s3 = $b2 & 255;
        return $s3;
    }

    public int substract(org.apache.tomcat.util.buf.ByteChunk) throws java.io.IOException
    {
        org.apache.tomcat.util.buf.ByteChunk r0, r1;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7;
        org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel $r2, $r3;
        byte[] $r4, $r5, $r6;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: org.apache.tomcat.util.buf.ByteChunk;
        $i1 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i2 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i3 = $i1 - $i2;
        if $i3 != 0 goto label1;

        $r2 = r0.<org.apache.tomcat.util.buf.ByteChunk: org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel in>;
        if $r2 != null goto label0;

        return -1;

     label0:
        $r3 = r0.<org.apache.tomcat.util.buf.ByteChunk: org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel in>;
        $r4 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $r5 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i4 = lengthof $r5;
        i0 = interfaceinvoke $r3.<org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel: int realReadBytes(byte[],int,int)>($r4, 0, $i4);
        if i0 >= 0 goto label1;

        return -1;

     label1:
        i5 = virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: int getLength()>();
        $r6 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i6 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        virtualinvoke r1.<org.apache.tomcat.util.buf.ByteChunk: void append(byte[],int,int)>($r6, $i6, i5);
        $i7 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        r0.<org.apache.tomcat.util.buf.ByteChunk: int start> = $i7;
        return i5;
    }

    public byte substractB() throws java.io.IOException
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        int $i0, $i1;
        boolean $z0;
        byte[] $r2;
        byte $b2;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        $z0 = specialinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: boolean checkEof()>();
        if $z0 == 0 goto label0;

        return -1;

     label0:
        $r2 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i0 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i1 = $i0 + 1;
        r0.<org.apache.tomcat.util.buf.ByteChunk: int start> = $i1;
        $b2 = $r2[$i0];
        return $b2;
    }

    public int substract(byte[], int, int) throws java.io.IOException
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        byte[] r1, $r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $z0 = specialinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: boolean checkEof()>();
        if $z0 == 0 goto label0;

        return -1;

     label0:
        i2 = i1;
        $i3 = virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: int getLength()>();
        if i1 <= $i3 goto label1;

        i2 = virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: int getLength()>();

     label1:
        $r2 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i4 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i4, r1, i0, i2);
        $i5 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i6 = $i5 + i2;
        r0.<org.apache.tomcat.util.buf.ByteChunk: int start> = $i6;
        return i2;
    }

    private boolean checkEof() throws java.io.IOException
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        int i0, $i1, $i2, $i3, $i4;
        org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel $r1, $r2;
        byte[] $r3, $r4;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        $i1 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i2 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i3 = $i1 - $i2;
        if $i3 != 0 goto label1;

        $r1 = r0.<org.apache.tomcat.util.buf.ByteChunk: org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel in>;
        if $r1 != null goto label0;

        return 1;

     label0:
        $r2 = r0.<org.apache.tomcat.util.buf.ByteChunk: org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel in>;
        $r3 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $r4 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i4 = lengthof $r4;
        i0 = interfaceinvoke $r2.<org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel: int realReadBytes(byte[],int,int)>($r3, 0, $i4);
        if i0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void flushBuffer() throws java.io.IOException
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7;
        org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel $r2, $r9;
        java.io.IOException $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        byte[] $r6, $r10;
        java.lang.String $r8;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        $r2 = r0.<org.apache.tomcat.util.buf.ByteChunk: org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel out>;
        if $r2 != null goto label0;

        $r3 = new java.io.IOException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Buffer overflow, no sink ");
        $i0 = virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: int getLimit()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r6 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i1 = lengthof $r6;
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r8);
        throw $r3;

     label0:
        $r9 = r0.<org.apache.tomcat.util.buf.ByteChunk: org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel out>;
        $r10 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i2 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i3 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i4 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i5 = $i3 - $i4;
        interfaceinvoke $r9.<org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel: void realWriteBytes(byte[],int,int)>($r10, $i2, $i5);
        $i6 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        r0.<org.apache.tomcat.util.buf.ByteChunk: int end> = $i6;
        return;
    }

    public void makeSpace(int)
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        int i0, i1, $i4, $i5, $i9, $i10, $i13, $i17, $i19, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32;
        null_type n0, n1;
        long l2, l3, $l6, $l11, $l14, $l15, $l18, $l20, $l21, $l22, $l23;
        byte $b7, $b8, $b12, $b16, $b24;
        byte[] $r1, $r2, $r3, $r4, $r5, $r6, r7, $r8;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        i0 := @parameter0: int;
        n0 = null;
        i1 = virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: int getLimitInternal()>();
        $i4 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i5 = $i4 + i0;
        l2 = (long) $i5;
        $l6 = (long) i1;
        $b7 = l2 cmp $l6;
        if $b7 <= 0 goto label0;

        l2 = (long) i1;

     label0:
        $r1 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        if $r1 != null goto label2;

        $b8 = l2 cmp 256L;
        if $b8 >= 0 goto label1;

        l2 = 256L;

     label1:
        $i9 = (int) l2;
        $r2 = newarray (byte)[$i9];
        r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff> = $r2;

     label2:
        $r3 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i10 = lengthof $r3;
        $l11 = (long) $i10;
        $b12 = l2 cmp $l11;
        if $b12 > 0 goto label3;

        return;

     label3:
        $r4 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i13 = lengthof $r4;
        $l14 = (long) $i13;
        $l15 = 2L * $l14;
        $b16 = l2 cmp $l15;
        if $b16 >= 0 goto label4;

        $r5 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i17 = lengthof $r5;
        $l18 = (long) $i17;
        l3 = $l18 * 2L;
        goto label5;

     label4:
        $r6 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i19 = lengthof $r6;
        $l20 = (long) $i19;
        $l21 = $l20 * 2L;
        $l22 = (long) i0;
        l3 = $l21 + $l22;

     label5:
        $l23 = (long) i1;
        $b24 = l3 cmp $l23;
        if $b24 <= 0 goto label6;

        l3 = (long) i1;

     label6:
        $i25 = (int) l3;
        r7 = newarray (byte)[$i25];
        $r8 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i26 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i27 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i28 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i29 = $i27 - $i28;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i26, r7, 0, $i29);
        r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff> = r7;
        n1 = null;
        $i30 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i31 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i32 = $i30 - $i31;
        r0.<org.apache.tomcat.util.buf.ByteChunk: int end> = $i32;
        r0.<org.apache.tomcat.util.buf.ByteChunk: int start> = 0;
        return;
    }

    public java.lang.String toString()
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        byte[] $r1;
        int $i0, $i1, $i2;
        java.lang.String $r2;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        $r1 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        if $r1 != null goto label0;

        return null;

     label0:
        $i0 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i1 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i2 = $i0 - $i1;
        if $i2 != 0 goto label1;

        return "";

     label1:
        $r2 = staticinvoke <org.apache.tomcat.util.buf.StringCache: java.lang.String toString(org.apache.tomcat.util.buf.ByteChunk)>(r0);
        return $r2;
    }

    public java.lang.String toStringInternal()
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        java.nio.charset.Charset $r1, $r3, $r4;
        java.nio.CharBuffer r2;
        byte[] $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.nio.ByteBuffer $r6;
        java.lang.String $r7;
        char[] $r8;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        $r3 = r0.<org.apache.tomcat.util.buf.ByteChunk: java.nio.charset.Charset charset>;
        if $r3 != null goto label0;

        $r1 = <org.apache.tomcat.util.buf.ByteChunk: java.nio.charset.Charset DEFAULT_CHARSET>;
        r0.<org.apache.tomcat.util.buf.ByteChunk: java.nio.charset.Charset charset> = $r1;

     label0:
        $r4 = r0.<org.apache.tomcat.util.buf.ByteChunk: java.nio.charset.Charset charset>;
        $r5 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i0 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i1 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i2 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i3 = $i1 - $i2;
        $r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r5, $i0, $i3);
        r2 = virtualinvoke $r4.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r6);
        $r7 = new java.lang.String;
        $r8 = virtualinvoke r2.<java.nio.CharBuffer: char[] array()>();
        $i4 = virtualinvoke r2.<java.nio.CharBuffer: int arrayOffset()>();
        $i5 = virtualinvoke r2.<java.nio.CharBuffer: int length()>();
        specialinvoke $r7.<java.lang.String: void <init>(char[],int,int)>($r8, $i4, $i5);
        return $r7;
    }

    public int getInt()
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        $r1 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i0 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i1 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i2 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i3 = $i1 - $i2;
        $i4 = staticinvoke <org.apache.tomcat.util.buf.Ascii: int parseInt(byte[],int,int)>($r1, $i0, $i3);
        return $i4;
    }

    public long getLong()
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        long $l4;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        $r1 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i0 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i1 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i2 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i3 = $i1 - $i2;
        $l4 = staticinvoke <org.apache.tomcat.util.buf.Ascii: long parseLong(byte[],int,int)>($r1, $i0, $i3);
        return $l4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.tomcat.util.buf.ByteChunk r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof org.apache.tomcat.util.buf.ByteChunk;
        if $z0 == 0 goto label0;

        $r2 = (org.apache.tomcat.util.buf.ByteChunk) r1;
        $z1 = virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: boolean equals(org.apache.tomcat.util.buf.ByteChunk)>($r2);
        return $z1;

     label0:
        return 0;
    }

    public boolean equals(java.lang.String)
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        java.lang.String r1;
        byte[] r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        byte $b7;
        char $c8;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: java.lang.String;
        r2 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i3 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i4 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        i0 = $i3 - $i4;
        if r2 == null goto label0;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();
        if i0 == $i5 goto label1;

     label0:
        return 0;

     label1:
        i1 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        i2 = 0;
        goto label4;

     label2:
        $i6 = i1;
        i1 = i1 + 1;
        $b7 = r2[$i6];
        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);
        if $b7 == $c8 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

     label4:
        if i2 < i0 goto label2;

        return 1;
    }

    public boolean equalsIgnoreCase(java.lang.String)
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        java.lang.String r1;
        byte[] r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i8, $i10;
        byte $b7;
        char $c9;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: java.lang.String;
        r2 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i3 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i4 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        i0 = $i3 - $i4;
        if r2 == null goto label0;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();
        if i0 == $i5 goto label1;

     label0:
        return 0;

     label1:
        i1 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        i2 = 0;
        goto label4;

     label2:
        $i6 = i1;
        i1 = i1 + 1;
        $b7 = r2[$i6];
        $i8 = staticinvoke <org.apache.tomcat.util.buf.Ascii: int toLower(int)>($b7);
        $c9 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);
        $i10 = staticinvoke <org.apache.tomcat.util.buf.Ascii: int toLower(int)>($c9);
        if $i8 == $i10 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

     label4:
        if i2 < i0 goto label2;

        return 1;
    }

    public boolean equals(org.apache.tomcat.util.buf.ByteChunk)
    {
        org.apache.tomcat.util.buf.ByteChunk r0, r1;
        byte[] $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: org.apache.tomcat.util.buf.ByteChunk;
        $r2 = virtualinvoke r1.<org.apache.tomcat.util.buf.ByteChunk: byte[] getBytes()>();
        $i0 = virtualinvoke r1.<org.apache.tomcat.util.buf.ByteChunk: int getStart()>();
        $i1 = virtualinvoke r1.<org.apache.tomcat.util.buf.ByteChunk: int getLength()>();
        $z0 = virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: boolean equals(byte[],int,int)>($r2, $i0, $i1);
        return $z0;
    }

    public boolean equals(byte[], int, int)
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        byte[] r1, r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i10;
        byte $b8, $b9;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        if r2 != null goto label0;

        if r1 != null goto label0;

        return 1;

     label0:
        $i5 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i6 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        i2 = $i5 - $i6;
        if i2 != i1 goto label1;

        if r2 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        i3 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        goto label4;

     label3:
        $i7 = i3;
        i3 = i3 + 1;
        $b8 = r2[$i7];
        $i4 = i0;
        i0 = i0 + 1;
        $b9 = r1[$i4];
        if $b8 == $b9 goto label4;

        return 0;

     label4:
        $i10 = i2;
        i2 = i2 + -1;
        if $i10 > 0 goto label3;

        return 1;
    }

    public boolean equals(org.apache.tomcat.util.buf.CharChunk)
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        org.apache.tomcat.util.buf.CharChunk r1;
        char[] $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: org.apache.tomcat.util.buf.CharChunk;
        $r2 = virtualinvoke r1.<org.apache.tomcat.util.buf.CharChunk: char[] getChars()>();
        $i0 = virtualinvoke r1.<org.apache.tomcat.util.buf.CharChunk: int getStart()>();
        $i1 = virtualinvoke r1.<org.apache.tomcat.util.buf.CharChunk: int getLength()>();
        $z0 = virtualinvoke r0.<org.apache.tomcat.util.buf.ByteChunk: boolean equals(char[],int,int)>($r2, $i0, $i1);
        return $z0;
    }

    public boolean equals(char[], int, int)
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        char[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i14;
        byte[] r2;
        byte $b11;
        char $c12, $c13;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        if r1 != null goto label0;

        if r2 != null goto label0;

        return 1;

     label0:
        if r2 == null goto label1;

        if r1 == null goto label1;

        $i5 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i6 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i7 = $i5 - $i6;
        if $i7 == i1 goto label2;

     label1:
        return 0;

     label2:
        i2 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i8 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i9 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        i3 = $i8 - $i9;
        goto label4;

     label3:
        $i10 = i2;
        i2 = i2 + 1;
        $b11 = r2[$i10];
        $c12 = (char) $b11;
        $i4 = i0;
        i0 = i0 + 1;
        $c13 = r1[$i4];
        if $c12 == $c13 goto label4;

        return 0;

     label4:
        $i14 = i3;
        i3 = i3 + -1;
        if $i14 > 0 goto label3;

        return 1;
    }

    public boolean startsWith(java.lang.String)
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        java.lang.String r1;
        byte[] r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        byte $b7;
        char $c8;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: java.lang.String;
        r2 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if r2 == null goto label0;

        $i3 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i4 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i5 = $i3 - $i4;
        if i0 <= $i5 goto label1;

     label0:
        return 0;

     label1:
        i1 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        i2 = 0;
        goto label4;

     label2:
        $i6 = i1;
        i1 = i1 + 1;
        $b7 = r2[$i6];
        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);
        if $b7 == $c8 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

     label4:
        if i2 < i0 goto label2;

        return 1;
    }

    public boolean startsWith(byte[])
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        byte[] r1, r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i10, $i11;
        byte $b8, $b9;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: byte[];
        r2 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        if r2 != null goto label0;

        if r1 != null goto label0;

        return 1;

     label0:
        $i4 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i5 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        i0 = $i4 - $i5;
        if r2 == null goto label1;

        if r1 == null goto label1;

        $i6 = lengthof r1;
        if $i6 <= i0 goto label2;

     label1:
        return 0;

     label2:
        i1 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        i2 = 0;
        goto label4;

     label3:
        $i7 = i1;
        i1 = i1 + 1;
        $b8 = r2[$i7];
        $i3 = i2;
        i2 = i2 + 1;
        $b9 = r1[$i3];
        if $b8 == $b9 goto label4;

        return 0;

     label4:
        $i10 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        if i1 >= $i10 goto label5;

        $i11 = lengthof r1;
        if i2 < $i11 goto label3;

     label5:
        return 1;
    }

    public boolean startsWith(java.lang.String, int)
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        java.lang.String r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        byte[] r2;
        byte $b10;
        char $c11;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r2 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if r2 == null goto label0;

        $i4 = i1 + i0;
        $i5 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i6 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i7 = $i5 - $i6;
        if $i4 <= $i7 goto label1;

     label0:
        return 0;

     label1:
        $i8 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        i2 = $i8 + i0;
        i3 = 0;
        goto label4;

     label2:
        $i9 = i2;
        i2 = i2 + 1;
        $b10 = r2[$i9];
        $c11 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);
        if $b10 == $c11 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

     label4:
        if i3 < i1 goto label2;

        return 1;
    }

    public boolean startsWithIgnoreCase(java.lang.String, int)
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        java.lang.String r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i13;
        byte[] r2;
        byte $b10;
        char $c12;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r2 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if r2 == null goto label0;

        $i4 = i1 + i0;
        $i5 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i6 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i7 = $i5 - $i6;
        if $i4 <= $i7 goto label1;

     label0:
        return 0;

     label1:
        $i8 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        i2 = $i8 + i0;
        i3 = 0;
        goto label4;

     label2:
        $i9 = i2;
        i2 = i2 + 1;
        $b10 = r2[$i9];
        $i11 = staticinvoke <org.apache.tomcat.util.buf.Ascii: int toLower(int)>($b10);
        $c12 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);
        $i13 = staticinvoke <org.apache.tomcat.util.buf.Ascii: int toLower(int)>($c12);
        if $i11 == $i13 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

     label4:
        if i3 < i1 goto label2;

        return 1;
    }

    protected int getBufferElement(int)
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        int i0;
        byte[] $r1;
        byte $b1;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        i0 := @parameter0: int;
        $r1 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $b1 = $r1[i0];
        return $b1;
    }

    public int hashIgnoreCase()
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        $r1 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i0 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i1 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        $i2 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i3 = $i1 - $i2;
        $i4 = staticinvoke <org.apache.tomcat.util.buf.ByteChunk: int hashBytesIC(byte[],int,int)>($r1, $i0, $i3);
        return $i4;
    }

    private static int hashBytesIC(byte[], int, int)
    {
        byte[] r0, r1;
        int i0, i1, i2, i3, i4, $i5, $i7;
        byte $b6;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = i0 + i1;
        r1 = r0;
        i3 = 0;
        i4 = i0;
        goto label1;

     label0:
        $i5 = i3 * 37;
        $b6 = r1[i4];
        $i7 = staticinvoke <org.apache.tomcat.util.buf.Ascii: int toLower(int)>($b6);
        i3 = $i5 + $i7;
        i4 = i4 + 1;

     label1:
        if i4 < i2 goto label0;

        return i3;
    }

    public int indexOf(char, int)
    {
        org.apache.tomcat.util.buf.ByteChunk r0;
        char c0;
        int i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        byte[] $r1;

        r0 := @this: org.apache.tomcat.util.buf.ByteChunk;
        c0 := @parameter0: char;
        i1 := @parameter1: int;
        $r1 = r0.<org.apache.tomcat.util.buf.ByteChunk: byte[] buff>;
        $i3 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i4 = $i3 + i1;
        $i5 = r0.<org.apache.tomcat.util.buf.ByteChunk: int end>;
        i2 = staticinvoke <org.apache.tomcat.util.buf.ByteChunk: int indexOf(byte[],int,int,char)>($r1, $i4, $i5, c0);
        $i6 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        if i2 < $i6 goto label0;

        $i7 = r0.<org.apache.tomcat.util.buf.ByteChunk: int start>;
        $i8 = i2 - $i7;
        goto label1;

     label0:
        $i8 = -1;

     label1:
        return $i8;
    }

    public static int indexOf(byte[], int, int, char)
    {
        byte[] r0;
        int i0, i1, i3;
        char c2;
        byte b4;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        c2 := @parameter3: char;
        i3 = i0;
        goto label2;

     label0:
        b4 = r0[i3];
        if b4 != c2 goto label1;

        return i3;

     label1:
        i3 = i3 + 1;

     label2:
        if i3 < i1 goto label0;

        return -1;
    }

    public static int findByte(byte[], int, int, byte)
    {
        byte[] r0;
        int i0, i1, i3;
        byte b2, $b4;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        b2 := @parameter3: byte;
        i3 = i0;
        goto label2;

     label0:
        $b4 = r0[i3];
        if $b4 != b2 goto label1;

        return i3;

     label1:
        i3 = i3 + 1;

     label2:
        if i3 < i1 goto label0;

        return -1;
    }

    public static int findBytes(byte[], int, int, byte[])
    {
        byte[] r0, r1;
        int i0, i1, i2, i3, i4;
        byte $b5, $b6;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 := @parameter3: byte[];
        i2 = lengthof r1;
        i3 = i0;
        goto label4;

     label0:
        i4 = 0;
        goto label3;

     label1:
        $b5 = r0[i3];
        $b6 = r1[i4];
        if $b5 != $b6 goto label2;

        return i3;

     label2:
        i4 = i4 + 1;

     label3:
        if i4 < i2 goto label1;

        i3 = i3 + 1;

     label4:
        if i3 < i1 goto label0;

        return -1;
    }

    public static int findNotBytes(byte[], int, int, byte[])
    {
        byte[] r0, r1;
        int i0, i1, i2, i3, i4;
        boolean z0;
        byte $b5, $b6;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 := @parameter3: byte[];
        i2 = lengthof r1;
        i3 = i0;
        goto label6;

     label0:
        z0 = 1;
        i4 = 0;
        goto label3;

     label1:
        $b5 = r0[i3];
        $b6 = r1[i4];
        if $b5 != $b6 goto label2;

        z0 = 0;
        goto label4;

     label2:
        i4 = i4 + 1;

     label3:
        if i4 < i2 goto label1;

     label4:
        if z0 == 0 goto label5;

        return i3;

     label5:
        i3 = i3 + 1;

     label6:
        if i3 < i1 goto label0;

        return -1;
    }

    public static final byte[] convertToBytes(java.lang.String)
    {
        java.lang.String r0;
        byte[] r1;
        int i0, $i1, $i4;
        char $c2;
        byte $b3;

        r0 := @parameter0: java.lang.String;
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();
        r1 = newarray (byte)[$i1];
        i0 = 0;
        goto label1;

     label0:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);
        $b3 = (byte) $c2;
        r1[i0] = $b3;
        i0 = i0 + 1;

     label1:
        $i4 = virtualinvoke r0.<java.lang.String: int length()>();
        if i0 < $i4 goto label0;

        return r1;
    }
}
