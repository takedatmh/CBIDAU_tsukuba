public class java.util.Random extends java.lang.Object implements java.io.Serializable
{
    static final long serialVersionUID;
    private final java.util.concurrent.atomic.AtomicLong seed;
    private static final long multiplier;
    private static final long addend;
    private static final long mask;
    private static final java.util.concurrent.atomic.AtomicLong seedUniquifier;
    private double nextNextGaussian;
    private boolean haveNextNextGaussian;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private static final sun.misc.Unsafe unsafe;
    private static final long seedOffset;

    public void <init>()
    {
        java.util.Random r0;
        long $l0, $l1, $l2;

        r0 := @this: java.util.Random;
        $l0 = staticinvoke <java.util.Random: long seedUniquifier()>();
        $l1 = staticinvoke <java.lang.System: long nanoTime()>();
        $l2 = $l0 ^ $l1;
        specialinvoke r0.<java.util.Random: void <init>(long)>($l2);
        return;
    }

    private static long seedUniquifier()
    {
        java.util.concurrent.atomic.AtomicLong $r0, $r1;
        long l0, l1;
        boolean $z0;

     label0:
        $r0 = <java.util.Random: java.util.concurrent.atomic.AtomicLong seedUniquifier>;
        l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long get()>();
        l1 = l0 * 181783497276652981L;
        $r1 = <java.util.Random: java.util.concurrent.atomic.AtomicLong seedUniquifier>;
        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(l0, l1);
        if $z0 == 0 goto label1;

        return l1;

     label1:
        goto label0;
    }

    public void <init>(long)
    {
        java.util.Random r0;
        long l0, $l1;
        java.lang.Class $r1;
        java.util.concurrent.atomic.AtomicLong $r2, $r3;

        r0 := @this: java.util.Random;
        l0 := @parameter0: long;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.Random: boolean haveNextNextGaussian> = 0;
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        if $r1 != class "java/util/Random" goto label0;

        $r2 = new java.util.concurrent.atomic.AtomicLong;
        $l1 = staticinvoke <java.util.Random: long initialScramble(long)>(l0);
        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l1);
        r0.<java.util.Random: java.util.concurrent.atomic.AtomicLong seed> = $r2;
        goto label1;

     label0:
        $r3 = new java.util.concurrent.atomic.AtomicLong;
        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
        r0.<java.util.Random: java.util.concurrent.atomic.AtomicLong seed> = $r3;
        virtualinvoke r0.<java.util.Random: void setSeed(long)>(l0);

     label1:
        return;
    }

    private static long initialScramble(long)
    {
        long l0, $l1, $l2;

        l0 := @parameter0: long;
        $l1 = l0 ^ 25214903917L;
        $l2 = $l1 & 281474976710655L;
        return $l2;
    }

    public synchronized void setSeed(long)
    {
        java.util.Random r0;
        long l0, $l1;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @this: java.util.Random;
        l0 := @parameter0: long;
        $r1 = r0.<java.util.Random: java.util.concurrent.atomic.AtomicLong seed>;
        $l1 = staticinvoke <java.util.Random: long initialScramble(long)>(l0);
        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l1);
        r0.<java.util.Random: boolean haveNextNextGaussian> = 0;
        return;
    }

    protected int next(int)
    {
        java.util.Random r0;
        int i0, $i5, $i7;
        java.util.concurrent.atomic.AtomicLong r1;
        long l1, l2, $l3, $l4, $l6;
        boolean $z0;

        r0 := @this: java.util.Random;
        i0 := @parameter0: int;
        r1 = r0.<java.util.Random: java.util.concurrent.atomic.AtomicLong seed>;

     label0:
        l1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicLong: long get()>();
        $l3 = l1 * 25214903917L;
        $l4 = $l3 + 11L;
        l2 = $l4 & 281474976710655L;
        $z0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(l1, l2);
        if $z0 == 0 goto label0;

        $i5 = 48 - i0;
        $l6 = l2 >>> $i5;
        $i7 = (int) $l6;
        return $i7;
    }

    public void nextBytes(byte[])
    {
        java.util.Random r0;
        byte[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        byte $b7;

        r0 := @this: java.util.Random;
        r1 := @parameter0: byte[];
        i0 = 0;
        i1 = lengthof r1;

     label0:
        if i0 >= i1 goto label3;

        i2 = virtualinvoke r0.<java.util.Random: int nextInt()>();
        $i4 = i1 - i0;
        i3 = staticinvoke <java.lang.Math: int min(int,int)>($i4, 4);

     label1:
        $i5 = i3;
        i3 = i3 + -1;
        if $i5 <= 0 goto label2;

        $i6 = i0;
        i0 = i0 + 1;
        $b7 = (byte) i2;
        r1[$i6] = $b7;
        i2 = i2 >> 8;
        goto label1;

     label2:
        goto label0;

     label3:
        return;
    }

    public int nextInt()
    {
        java.util.Random r0;
        int $i0;

        r0 := @this: java.util.Random;
        $i0 = virtualinvoke r0.<java.util.Random: int next(int)>(32);
        return $i0;
    }

    public int nextInt(int)
    {
        java.util.Random r0;
        int i0, i1, i2, $i3, $i4, $i6, $i10, $i11, $i12, $i13;
        java.lang.IllegalArgumentException $r1;
        long $l5, $l7, $l8, $l9;

        r0 := @this: java.util.Random;
        i0 := @parameter0: int;
        if i0 > 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("n must be positive");
        throw $r1;

     label0:
        $i3 = neg i0;
        $i4 = i0 & $i3;
        if $i4 != i0 goto label1;

        $l5 = (long) i0;
        $i6 = virtualinvoke r0.<java.util.Random: int next(int)>(31);
        $l7 = (long) $i6;
        $l8 = $l5 * $l7;
        $l9 = $l8 >> 31;
        $i10 = (int) $l9;
        return $i10;

     label1:
        i1 = virtualinvoke r0.<java.util.Random: int next(int)>(31);
        i2 = i1 % i0;
        $i11 = i1 - i2;
        $i12 = i0 - 1;
        $i13 = $i11 + $i12;
        if $i13 < 0 goto label1;

        return i2;
    }

    public long nextLong()
    {
        java.util.Random r0;
        int $i0, $i3;
        long $l1, $l2, $l4, $l5;

        r0 := @this: java.util.Random;
        $i0 = virtualinvoke r0.<java.util.Random: int next(int)>(32);
        $l1 = (long) $i0;
        $l2 = $l1 << 32;
        $i3 = virtualinvoke r0.<java.util.Random: int next(int)>(32);
        $l4 = (long) $i3;
        $l5 = $l2 + $l4;
        return $l5;
    }

    public boolean nextBoolean()
    {
        java.util.Random r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.Random;
        $i0 = virtualinvoke r0.<java.util.Random: int next(int)>(1);
        if $i0 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public float nextFloat()
    {
        java.util.Random r0;
        int $i0;
        float $f0, $f1;

        r0 := @this: java.util.Random;
        $i0 = virtualinvoke r0.<java.util.Random: int next(int)>(24);
        $f0 = (float) $i0;
        $f1 = $f0 / 1.6777216E7F;
        return $f1;
    }

    public double nextDouble()
    {
        java.util.Random r0;
        int $i0, $i3;
        long $l1, $l2, $l4, $l5;
        double $d0, $d1;

        r0 := @this: java.util.Random;
        $i0 = virtualinvoke r0.<java.util.Random: int next(int)>(26);
        $l1 = (long) $i0;
        $l2 = $l1 << 27;
        $i3 = virtualinvoke r0.<java.util.Random: int next(int)>(27);
        $l4 = (long) $i3;
        $l5 = $l2 + $l4;
        $d0 = (double) $l5;
        $d1 = $d0 / 9.007199254740992E15;
        return $d1;
    }

    public synchronized double nextGaussian()
    {
        java.util.Random r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        boolean $z0;
        byte $b0, $b1;

        r0 := @this: java.util.Random;
        $z0 = r0.<java.util.Random: boolean haveNextNextGaussian>;
        if $z0 == 0 goto label0;

        r0.<java.util.Random: boolean haveNextNextGaussian> = 0;
        $d4 = r0.<java.util.Random: double nextNextGaussian>;
        return $d4;

     label0:
        $d5 = virtualinvoke r0.<java.util.Random: double nextDouble()>();
        $d6 = 2.0 * $d5;
        d0 = $d6 - 1.0;
        $d7 = virtualinvoke r0.<java.util.Random: double nextDouble()>();
        $d8 = 2.0 * $d7;
        d1 = $d8 - 1.0;
        $d9 = d0 * d0;
        $d10 = d1 * d1;
        d2 = $d9 + $d10;
        $b0 = d2 cmpl 1.0;
        if $b0 >= 0 goto label0;

        $b1 = d2 cmpl 0.0;
        if $b1 == 0 goto label0;

        $d11 = staticinvoke <java.lang.StrictMath: double log(double)>(d2);
        $d12 = -2.0 * $d11;
        $d13 = $d12 / d2;
        d3 = staticinvoke <java.lang.StrictMath: double sqrt(double)>($d13);
        $d14 = d1 * d3;
        r0.<java.util.Random: double nextNextGaussian> = $d14;
        r0.<java.util.Random: boolean haveNextNextGaussian> = 1;
        $d15 = d0 * d3;
        return $d15;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.Random r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectInputStream$GetField r2;
        long l0;
        byte $b1;
        java.io.StreamCorruptedException $r3;
        double $d0;
        boolean $z0;

        r0 := @this: java.util.Random;
        r1 := @parameter0: java.io.ObjectInputStream;
        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();
        l0 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: long get(java.lang.String,long)>("seed", -1L);
        $b1 = l0 cmp 0L;
        if $b1 >= 0 goto label0;

        $r3 = new java.io.StreamCorruptedException;
        specialinvoke $r3.<java.io.StreamCorruptedException: void <init>(java.lang.String)>("Random: invalid seed");
        throw $r3;

     label0:
        specialinvoke r0.<java.util.Random: void resetSeed(long)>(l0);
        $d0 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: double get(java.lang.String,double)>("nextNextGaussian", 0.0);
        r0.<java.util.Random: double nextNextGaussian> = $d0;
        $z0 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: boolean get(java.lang.String,boolean)>("haveNextNextGaussian", 0);
        r0.<java.util.Random: boolean haveNextNextGaussian> = $z0;
        return;
    }

    private synchronized void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Random r0;
        java.io.ObjectOutputStream r1;
        java.io.ObjectOutputStream$PutField r2;
        java.util.concurrent.atomic.AtomicLong $r3;
        long $l0;
        double $d0;
        boolean $z0;

        r0 := @this: java.util.Random;
        r1 := @parameter0: java.io.ObjectOutputStream;
        r2 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();
        $r3 = r0.<java.util.Random: java.util.concurrent.atomic.AtomicLong seed>;
        $l0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long get()>();
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,long)>("seed", $l0);
        $d0 = r0.<java.util.Random: double nextNextGaussian>;
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,double)>("nextNextGaussian", $d0);
        $z0 = r0.<java.util.Random: boolean haveNextNextGaussian>;
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,boolean)>("haveNextNextGaussian", $z0);
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();
        return;
    }

    private void resetSeed(long)
    {
        java.util.Random r0;
        long l0, $l1;
        sun.misc.Unsafe $r1;
        java.util.concurrent.atomic.AtomicLong $r2;

        r0 := @this: java.util.Random;
        l0 := @parameter0: long;
        $r1 = <java.util.Random: sun.misc.Unsafe unsafe>;
        $l1 = <java.util.Random: long seedOffset>;
        $r2 = new java.util.concurrent.atomic.AtomicLong;
        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(l0);
        virtualinvoke $r1.<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>(r0, $l1, $r2);
        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicLong $r0;
        java.io.ObjectStreamField $r1, $r5, $r7;
        java.lang.Class $r2, $r6, $r8, $r11;
        java.lang.Exception r3, $r13;
        java.io.ObjectStreamField[] $r4;
        sun.misc.Unsafe $r9, $r10;
        java.lang.reflect.Field $r12;
        long $l0;
        java.lang.Error $r14;

        $r0 = new java.util.concurrent.atomic.AtomicLong;
        specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(8682522807148012L);
        <java.util.Random: java.util.concurrent.atomic.AtomicLong seedUniquifier> = $r0;
        $r4 = newarray (java.io.ObjectStreamField)[3];
        $r1 = new java.io.ObjectStreamField;
        $r2 = <java.lang.Long: java.lang.Class TYPE>;
        specialinvoke $r1.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("seed", $r2);
        $r4[0] = $r1;
        $r5 = new java.io.ObjectStreamField;
        $r6 = <java.lang.Double: java.lang.Class TYPE>;
        specialinvoke $r5.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("nextNextGaussian", $r6);
        $r4[1] = $r5;
        $r7 = new java.io.ObjectStreamField;
        $r8 = <java.lang.Boolean: java.lang.Class TYPE>;
        specialinvoke $r7.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("haveNextNextGaussian", $r8);
        $r4[2] = $r7;
        <java.util.Random: java.io.ObjectStreamField[] serialPersistentFields> = $r4;
        $r9 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <java.util.Random: sun.misc.Unsafe unsafe> = $r9;

     label0:
        $r10 = <java.util.Random: sun.misc.Unsafe unsafe>;
        $r11 = class "java/util/Random";
        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("seed");
        $l0 = virtualinvoke $r10.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r12);
        <java.util.Random: long seedOffset> = $l0;

     label1:
        goto label3;

     label2:
        $r13 := @caughtexception;
        r3 = $r13;
        $r14 = new java.lang.Error;
        specialinvoke $r14.<java.lang.Error: void <init>(java.lang.Throwable)>(r3);
        throw $r14;

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }
}
