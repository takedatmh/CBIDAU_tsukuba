class java.lang.ProcessEnvironment$StringEntrySet$1 extends java.lang.Object implements java.util.Iterator
{
    java.util.Iterator i;
    final java.lang.ProcessEnvironment$StringEntrySet this$0;

    void <init>(java.lang.ProcessEnvironment$StringEntrySet)
    {
        java.lang.ProcessEnvironment$StringEntrySet$1 r0;
        java.lang.ProcessEnvironment$StringEntrySet r1, $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;

        r0 := @this: java.lang.ProcessEnvironment$StringEntrySet$1;
        r1 := @parameter0: java.lang.ProcessEnvironment$StringEntrySet;
        r0.<java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.ProcessEnvironment$StringEntrySet this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = r0.<java.lang.ProcessEnvironment$StringEntrySet$1: java.lang.ProcessEnvironment$StringEntrySet this$0>;
        $r3 = staticinvoke <java.lang.ProcessEnvironment$StringEntrySet: java.util.Set access$500(java.lang.ProcessEnvironment$StringEntrySet)>($r2);
        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();
        r0.<java.lang.ProcessEnvironment$StringEntrySet$1: java.util.Iterator i> = $r4;
        return;
    }

    public boolean hasNext()
    {
        java.lang.ProcessEnvironment$StringEntrySet$1 r0;
        java.util.Iterator $r1;
        boolean $z0;

        r0 := @this: java.lang.ProcessEnvironment$StringEntrySet$1;
        $r1 = r0.<java.lang.ProcessEnvironment$StringEntrySet$1: java.util.Iterator i>;
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();
        return $z0;
    }

    public java.util.Map$Entry next()
    {
        java.lang.ProcessEnvironment$StringEntrySet$1 r0;
        java.lang.ProcessEnvironment$StringEntry $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.util.Map$Entry $r4;

        r0 := @this: java.lang.ProcessEnvironment$StringEntrySet$1;
        $r1 = new java.lang.ProcessEnvironment$StringEntry;
        $r2 = r0.<java.lang.ProcessEnvironment$StringEntrySet$1: java.util.Iterator i>;
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();
        $r4 = (java.util.Map$Entry) $r3;
        specialinvoke $r1.<java.lang.ProcessEnvironment$StringEntry: void <init>(java.util.Map$Entry)>($r4);
        return $r1;
    }

    public void remove()
    {
        java.lang.ProcessEnvironment$StringEntrySet$1 r0;
        java.util.Iterator $r1;

        r0 := @this: java.lang.ProcessEnvironment$StringEntrySet$1;
        $r1 = r0.<java.lang.ProcessEnvironment$StringEntrySet$1: java.util.Iterator i>;
        interfaceinvoke $r1.<java.util.Iterator: void remove()>();
        return;
    }

    public volatile java.lang.Object next()
    {
        java.lang.ProcessEnvironment$StringEntrySet$1 r0;
        java.util.Map$Entry $r1;

        r0 := @this: java.lang.ProcessEnvironment$StringEntrySet$1;
        $r1 = virtualinvoke r0.<java.lang.ProcessEnvironment$StringEntrySet$1: java.util.Map$Entry next()>();
        return $r1;
    }
}
