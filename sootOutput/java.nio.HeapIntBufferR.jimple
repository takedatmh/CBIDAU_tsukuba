class java.nio.HeapIntBufferR extends java.nio.HeapIntBuffer
{

    void <init>(int, int)
    {
        java.nio.HeapIntBufferR r0;
        int i0, i1;

        r0 := @this: java.nio.HeapIntBufferR;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        specialinvoke r0.<java.nio.HeapIntBuffer: void <init>(int,int)>(i0, i1);
        r0.<java.nio.HeapIntBufferR: boolean isReadOnly> = 1;
        return;
    }

    void <init>(int[], int, int)
    {
        java.nio.HeapIntBufferR r0;
        int[] r1;
        int i0, i1;

        r0 := @this: java.nio.HeapIntBufferR;
        r1 := @parameter0: int[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.nio.HeapIntBuffer: void <init>(int[],int,int)>(r1, i0, i1);
        r0.<java.nio.HeapIntBufferR: boolean isReadOnly> = 1;
        return;
    }

    protected void <init>(int[], int, int, int, int, int)
    {
        java.nio.HeapIntBufferR r0;
        int[] r1;
        int i0, i1, i2, i3, i4;

        r0 := @this: java.nio.HeapIntBufferR;
        r1 := @parameter0: int[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        specialinvoke r0.<java.nio.HeapIntBuffer: void <init>(int[],int,int,int,int,int)>(r1, i0, i1, i2, i3, i4);
        r0.<java.nio.HeapIntBufferR: boolean isReadOnly> = 1;
        return;
    }

    public java.nio.IntBuffer slice()
    {
        java.nio.HeapIntBufferR r0, $r1;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapIntBufferR;
        $r1 = new java.nio.HeapIntBufferR;
        $r2 = r0.<java.nio.HeapIntBufferR: int[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapIntBufferR: int remaining()>();
        $i1 = virtualinvoke r0.<java.nio.HeapIntBufferR: int remaining()>();
        $i2 = virtualinvoke r0.<java.nio.HeapIntBufferR: int position()>();
        $i3 = r0.<java.nio.HeapIntBufferR: int offset>;
        $i4 = $i2 + $i3;
        specialinvoke $r1.<java.nio.HeapIntBufferR: void <init>(int[],int,int,int,int,int)>($r2, -1, 0, $i0, $i1, $i4);
        return $r1;
    }

    public java.nio.IntBuffer duplicate()
    {
        java.nio.HeapIntBufferR r0, $r1;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapIntBufferR;
        $r1 = new java.nio.HeapIntBufferR;
        $r2 = r0.<java.nio.HeapIntBufferR: int[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapIntBufferR: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.HeapIntBufferR: int position()>();
        $i2 = virtualinvoke r0.<java.nio.HeapIntBufferR: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.HeapIntBufferR: int capacity()>();
        $i4 = r0.<java.nio.HeapIntBufferR: int offset>;
        specialinvoke $r1.<java.nio.HeapIntBufferR: void <init>(int[],int,int,int,int,int)>($r2, $i0, $i1, $i2, $i3, $i4);
        return $r1;
    }

    public java.nio.IntBuffer asReadOnlyBuffer()
    {
        java.nio.HeapIntBufferR r0;
        java.nio.IntBuffer $r1;

        r0 := @this: java.nio.HeapIntBufferR;
        $r1 = virtualinvoke r0.<java.nio.HeapIntBufferR: java.nio.IntBuffer duplicate()>();
        return $r1;
    }

    public boolean isReadOnly()
    {
        java.nio.HeapIntBufferR r0;

        r0 := @this: java.nio.HeapIntBufferR;
        return 1;
    }

    public java.nio.IntBuffer put(int)
    {
        java.nio.HeapIntBufferR r0;
        int i0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapIntBufferR;
        i0 := @parameter0: int;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.IntBuffer put(int, int)
    {
        java.nio.HeapIntBufferR r0;
        int i0, i1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapIntBufferR;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.IntBuffer put(int[], int, int)
    {
        java.nio.HeapIntBufferR r0;
        int[] r1;
        int i0, i1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.HeapIntBufferR;
        r1 := @parameter0: int[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r2;
    }

    public java.nio.IntBuffer put(java.nio.IntBuffer)
    {
        java.nio.HeapIntBufferR r0;
        java.nio.IntBuffer r1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.HeapIntBufferR;
        r1 := @parameter0: java.nio.IntBuffer;
        $r2 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r2;
    }

    public java.nio.IntBuffer compact()
    {
        java.nio.HeapIntBufferR r0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapIntBufferR;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteOrder order()
    {
        java.nio.HeapIntBufferR r0;
        java.nio.ByteOrder $r1;

        r0 := @this: java.nio.HeapIntBufferR;
        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();
        return $r1;
    }
}
