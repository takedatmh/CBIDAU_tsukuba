public class java.net.DatagramSocket extends java.lang.Object implements java.io.Closeable
{
    private boolean created;
    private boolean bound;
    private boolean closed;
    private java.lang.Object closeLock;
    java.net.DatagramSocketImpl impl;
    boolean oldImpl;
    private boolean explicitFilter;
    private int bytesLeftToFilter;
    static final int ST_NOT_CONNECTED;
    static final int ST_CONNECTED;
    static final int ST_CONNECTED_NO_IMPL;
    int connectState;
    java.net.InetAddress connectedAddress;
    int connectedPort;
    static java.lang.Class implClass;
    static java.net.DatagramSocketImplFactory factory;

    private synchronized void connectInternal(java.net.InetAddress, int) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.net.InetAddress r1;
        int i0, i1, $i2;
        java.lang.StringBuilder $r2, $r5, $r6;
        java.lang.SecurityManager r3;
        java.lang.IllegalArgumentException $r4, $r8;
        java.lang.String $r7, $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.net.InetSocketAddress $r11;
        java.net.DatagramSocketImpl $r12, $r13, $r15, $r16;
        java.net.AbstractPlainDatagramSocketImpl $r14;
        java.net.SocketException $r17, $r19, r20;

        r0 := @this: java.net.DatagramSocket;
        r1 := @parameter0: java.net.InetAddress;
        i0 := @parameter1: int;
        if i0 < 0 goto label0;

        if i0 <= 65535 goto label1;

     label0:
        $r4 = new java.lang.IllegalArgumentException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("connect: ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r4;

     label1:
        if r1 != null goto label2;

        $r8 = new java.lang.IllegalArgumentException;
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connect: null address");
        throw $r8;

     label2:
        virtualinvoke r0.<java.net.DatagramSocket: void checkAddress(java.net.InetAddress,java.lang.String)>(r1, "connect");
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z0 == 0 goto label3;

        return;

     label3:
        r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r3 == null goto label5;

        $z1 = virtualinvoke r1.<java.net.InetAddress: boolean isMulticastAddress()>();
        if $z1 == 0 goto label4;

        virtualinvoke r3.<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress)>(r1);
        goto label5;

     label4:
        $r9 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostAddress()>();
        virtualinvoke r3.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>($r9, i0);
        $r10 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostAddress()>();
        virtualinvoke r3.<java.lang.SecurityManager: void checkAccept(java.lang.String,int)>($r10, i0);

     label5:
        $z2 = virtualinvoke r0.<java.net.DatagramSocket: boolean isBound()>();
        if $z2 != 0 goto label6;

        $r11 = new java.net.InetSocketAddress;
        specialinvoke $r11.<java.net.InetSocketAddress: void <init>(int)>(0);
        virtualinvoke r0.<java.net.DatagramSocket: void bind(java.net.SocketAddress)>($r11);

     label6:
        $z3 = r0.<java.net.DatagramSocket: boolean oldImpl>;
        if $z3 != 0 goto label7;

        $r12 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;
        $z4 = $r12 instanceof java.net.AbstractPlainDatagramSocketImpl;
        if $z4 == 0 goto label8;

        $r13 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;
        $r14 = (java.net.AbstractPlainDatagramSocketImpl) $r13;
        $z5 = virtualinvoke $r14.<java.net.AbstractPlainDatagramSocketImpl: boolean nativeConnectDisabled()>();
        if $z5 == 0 goto label8;

     label7:
        r0.<java.net.DatagramSocket: int connectState> = 2;
        goto label14;

     label8:
        $r15 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r15.<java.net.DatagramSocketImpl: void connect(java.net.InetAddress,int)>(r1, i0);
        r0.<java.net.DatagramSocket: int connectState> = 1;
        $r16 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        i1 = virtualinvoke $r16.<java.net.DatagramSocketImpl: int dataAvailable()>();
        if i1 != -1 goto label9;

        $r17 = new java.net.SocketException;
        specialinvoke $r17.<java.net.SocketException: void <init>()>();
        throw $r17;

     label9:
        if i1 <= 0 goto label10;

        $z6 = 1;
        goto label11;

     label10:
        $z6 = 0;

     label11:
        r0.<java.net.DatagramSocket: boolean explicitFilter> = $z6;
        $z7 = r0.<java.net.DatagramSocket: boolean explicitFilter>;
        if $z7 == 0 goto label12;

        $i2 = virtualinvoke r0.<java.net.DatagramSocket: int getReceiveBufferSize()>();
        r0.<java.net.DatagramSocket: int bytesLeftToFilter> = $i2;

     label12:
        goto label14;

     label13:
        $r19 := @caughtexception;
        r20 = $r19;
        r0.<java.net.DatagramSocket: int connectState> = 2;

     label14:
        r0.<java.net.DatagramSocket: java.net.InetAddress connectedAddress> = r1;
        r0.<java.net.DatagramSocket: int connectedPort> = i0;
        return;

        catch java.net.SocketException from label8 to label12 with label13;
    }

    public void <init>() throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.net.SocketException r1, $r4, $r7;
        java.lang.Object $r2;
        java.net.InetSocketAddress $r3;
        java.io.IOException $r5, r6;
        java.lang.String $r8;

        r0 := @this: java.net.DatagramSocket;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.net.DatagramSocket: boolean created> = 0;
        r0.<java.net.DatagramSocket: boolean bound> = 0;
        r0.<java.net.DatagramSocket: boolean closed> = 0;
        $r2 = new java.lang.Object;
        specialinvoke $r2.<java.lang.Object: void <init>()>();
        r0.<java.net.DatagramSocket: java.lang.Object closeLock> = $r2;
        r0.<java.net.DatagramSocket: boolean oldImpl> = 0;
        r0.<java.net.DatagramSocket: boolean explicitFilter> = 0;
        r0.<java.net.DatagramSocket: int connectState> = 0;
        r0.<java.net.DatagramSocket: java.net.InetAddress connectedAddress> = null;
        r0.<java.net.DatagramSocket: int connectedPort> = -1;
        virtualinvoke r0.<java.net.DatagramSocket: void createImpl()>();

     label0:
        $r3 = new java.net.InetSocketAddress;
        specialinvoke $r3.<java.net.InetSocketAddress: void <init>(int)>(0);
        virtualinvoke r0.<java.net.DatagramSocket: void bind(java.net.SocketAddress)>($r3);

     label1:
        goto label4;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        throw r1;

     label3:
        $r5 := @caughtexception;
        r6 = $r5;
        $r7 = new java.net.SocketException;
        $r8 = virtualinvoke r6.<java.io.IOException: java.lang.String getMessage()>();
        specialinvoke $r7.<java.net.SocketException: void <init>(java.lang.String)>($r8);
        throw $r7;

     label4:
        return;

        catch java.net.SocketException from label0 to label1 with label2;
        catch java.io.IOException from label0 to label1 with label3;
    }

    protected void <init>(java.net.DatagramSocketImpl)
    {
        java.net.DatagramSocket r0;
        java.net.DatagramSocketImpl r1;
        java.lang.Object $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.net.DatagramSocket;
        r1 := @parameter0: java.net.DatagramSocketImpl;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.net.DatagramSocket: boolean created> = 0;
        r0.<java.net.DatagramSocket: boolean bound> = 0;
        r0.<java.net.DatagramSocket: boolean closed> = 0;
        $r2 = new java.lang.Object;
        specialinvoke $r2.<java.lang.Object: void <init>()>();
        r0.<java.net.DatagramSocket: java.lang.Object closeLock> = $r2;
        r0.<java.net.DatagramSocket: boolean oldImpl> = 0;
        r0.<java.net.DatagramSocket: boolean explicitFilter> = 0;
        r0.<java.net.DatagramSocket: int connectState> = 0;
        r0.<java.net.DatagramSocket: java.net.InetAddress connectedAddress> = null;
        r0.<java.net.DatagramSocket: int connectedPort> = -1;
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl> = r1;
        specialinvoke r0.<java.net.DatagramSocket: void checkOldImpl()>();
        return;
    }

    public void <init>(java.net.SocketAddress) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.net.SocketAddress r1;
        java.lang.Object $r2;

        r0 := @this: java.net.DatagramSocket;
        r1 := @parameter0: java.net.SocketAddress;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.net.DatagramSocket: boolean created> = 0;
        r0.<java.net.DatagramSocket: boolean bound> = 0;
        r0.<java.net.DatagramSocket: boolean closed> = 0;
        $r2 = new java.lang.Object;
        specialinvoke $r2.<java.lang.Object: void <init>()>();
        r0.<java.net.DatagramSocket: java.lang.Object closeLock> = $r2;
        r0.<java.net.DatagramSocket: boolean oldImpl> = 0;
        r0.<java.net.DatagramSocket: boolean explicitFilter> = 0;
        r0.<java.net.DatagramSocket: int connectState> = 0;
        r0.<java.net.DatagramSocket: java.net.InetAddress connectedAddress> = null;
        r0.<java.net.DatagramSocket: int connectedPort> = -1;
        virtualinvoke r0.<java.net.DatagramSocket: void createImpl()>();
        if r1 == null goto label0;

        virtualinvoke r0.<java.net.DatagramSocket: void bind(java.net.SocketAddress)>(r1);

     label0:
        return;
    }

    public void <init>(int) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        int i0;

        r0 := @this: java.net.DatagramSocket;
        i0 := @parameter0: int;
        specialinvoke r0.<java.net.DatagramSocket: void <init>(int,java.net.InetAddress)>(i0, null);
        return;
    }

    public void <init>(int, java.net.InetAddress) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        int i0;
        java.net.InetAddress r1;
        java.net.InetSocketAddress $r2;

        r0 := @this: java.net.DatagramSocket;
        i0 := @parameter0: int;
        r1 := @parameter1: java.net.InetAddress;
        $r2 = new java.net.InetSocketAddress;
        specialinvoke $r2.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r1, i0);
        specialinvoke r0.<java.net.DatagramSocket: void <init>(java.net.SocketAddress)>($r2);
        return;
    }

    private void checkOldImpl()
    {
        java.net.DatagramSocket r0;
        java.security.PrivilegedActionException r1, $r5;
        java.net.DatagramSocketImpl $r2;
        java.net.DatagramSocket$1 $r3;

        r0 := @this: java.net.DatagramSocket;
        $r2 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;
        if $r2 != null goto label0;

        return;

     label0:
        $r3 = new java.net.DatagramSocket$1;
        specialinvoke $r3.<java.net.DatagramSocket$1: void <init>(java.net.DatagramSocket)>(r0);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r3);

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r1 = $r5;
        r0.<java.net.DatagramSocket: boolean oldImpl> = 1;

     label3:
        return;

        catch java.security.PrivilegedActionException from label0 to label1 with label2;
    }

    void createImpl() throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.net.DatagramSocketImplFactory $r1, $r3;
        boolean z0, $z1, $z2;
        java.net.DatagramSocketImpl $r2, $r4, $r5, $r6;

        r0 := @this: java.net.DatagramSocket;
        $r2 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;
        if $r2 != null goto label3;

        $r3 = <java.net.DatagramSocket: java.net.DatagramSocketImplFactory factory>;
        if $r3 == null goto label0;

        $r1 = <java.net.DatagramSocket: java.net.DatagramSocketImplFactory factory>;
        $r4 = interfaceinvoke $r1.<java.net.DatagramSocketImplFactory: java.net.DatagramSocketImpl createDatagramSocketImpl()>();
        r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl> = $r4;
        specialinvoke r0.<java.net.DatagramSocket: void checkOldImpl()>();
        goto label3;

     label0:
        $z1 = r0 instanceof java.net.MulticastSocket;
        if $z1 == 0 goto label1;

        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;
        $r5 = staticinvoke <java.net.DefaultDatagramSocketImplFactory: java.net.DatagramSocketImpl createDatagramSocketImpl(boolean)>(z0);
        r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl> = $r5;
        specialinvoke r0.<java.net.DatagramSocket: void checkOldImpl()>();

     label3:
        $r6 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;
        virtualinvoke $r6.<java.net.DatagramSocketImpl: void create()>();
        r0.<java.net.DatagramSocket: boolean created> = 1;
        return;
    }

    java.net.DatagramSocketImpl getImpl() throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        boolean $z0;
        java.net.DatagramSocketImpl $r1;

        r0 := @this: java.net.DatagramSocket;
        $z0 = r0.<java.net.DatagramSocket: boolean created>;
        if $z0 != 0 goto label0;

        virtualinvoke r0.<java.net.DatagramSocket: void createImpl()>();

     label0:
        $r1 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;
        return $r1;
    }

    public synchronized void bind(java.net.SocketAddress) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.net.SocketAddress r1;
        java.net.InetSocketAddress r2, $r8;
        java.net.InetAddress r3;
        int i0;
        java.lang.SecurityManager r4;
        java.net.SocketException r5, $r6, $r7, $r10, $r12;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r9;
        java.net.DatagramSocketImpl $r11, $r13;

        r0 := @this: java.net.DatagramSocket;
        r1 := @parameter0: java.net.SocketAddress;
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r6 = new java.net.SocketException;
        specialinvoke $r6.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r6;

     label0:
        $z1 = virtualinvoke r0.<java.net.DatagramSocket: boolean isBound()>();
        if $z1 == 0 goto label1;

        $r7 = new java.net.SocketException;
        specialinvoke $r7.<java.net.SocketException: void <init>(java.lang.String)>("already bound");
        throw $r7;

     label1:
        if r1 != null goto label2;

        $r8 = new java.net.InetSocketAddress;
        specialinvoke $r8.<java.net.InetSocketAddress: void <init>(int)>(0);
        r1 = $r8;

     label2:
        $z2 = r1 instanceof java.net.InetSocketAddress;
        if $z2 != 0 goto label3;

        $r9 = new java.lang.IllegalArgumentException;
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported address type!");
        throw $r9;

     label3:
        r2 = (java.net.InetSocketAddress) r1;
        $z3 = virtualinvoke r2.<java.net.InetSocketAddress: boolean isUnresolved()>();
        if $z3 == 0 goto label4;

        $r10 = new java.net.SocketException;
        specialinvoke $r10.<java.net.SocketException: void <init>(java.lang.String)>("Unresolved address");
        throw $r10;

     label4:
        r3 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        i0 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();
        virtualinvoke r0.<java.net.DatagramSocket: void checkAddress(java.net.InetAddress,java.lang.String)>(r3, "bind");
        r4 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r4 == null goto label5;

        virtualinvoke r4.<java.lang.SecurityManager: void checkListen(int)>(i0);

     label5:
        $r11 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r11.<java.net.DatagramSocketImpl: void bind(int,java.net.InetAddress)>(i0, r3);

     label6:
        goto label8;

     label7:
        $r12 := @caughtexception;
        r5 = $r12;
        $r13 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r13.<java.net.DatagramSocketImpl: void close()>();
        throw r5;

     label8:
        r0.<java.net.DatagramSocket: boolean bound> = 1;
        return;

        catch java.net.SocketException from label5 to label6 with label7;
    }

    void checkAddress(java.net.InetAddress, java.lang.String)
    {
        java.net.DatagramSocket r0;
        java.net.InetAddress r1;
        java.lang.String r2, $r7;
        java.lang.StringBuilder $r3, $r5, $r6;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: java.net.DatagramSocket;
        r1 := @parameter0: java.net.InetAddress;
        r2 := @parameter1: java.lang.String;
        if r1 != null goto label0;

        return;

     label0:
        $z0 = r1 instanceof java.net.Inet4Address;
        if $z0 != 0 goto label1;

        $z1 = r1 instanceof java.net.Inet6Address;
        if $z1 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": invalid address type");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r4;

     label1:
        return;
    }

    public void connect(java.net.InetAddress, int)
    {
        java.net.DatagramSocket r0;
        java.net.InetAddress r1;
        int i0;
        java.net.SocketException r2, $r3;
        java.lang.Error $r4;

        r0 := @this: java.net.DatagramSocket;
        r1 := @parameter0: java.net.InetAddress;
        i0 := @parameter1: int;

     label0:
        specialinvoke r0.<java.net.DatagramSocket: void connectInternal(java.net.InetAddress,int)>(r1, i0);

     label1:
        goto label3;

     label2:
        $r3 := @caughtexception;
        r2 = $r3;
        $r4 = new java.lang.Error;
        specialinvoke $r4.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>("connect failed", r2);
        throw $r4;

     label3:
        return;

        catch java.net.SocketException from label0 to label1 with label2;
    }

    public void connect(java.net.SocketAddress) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.net.SocketAddress r1;
        java.net.InetSocketAddress r2;
        java.lang.IllegalArgumentException $r3, $r4;
        boolean $z0, $z1;
        java.net.SocketException $r5;
        java.net.InetAddress $r6;
        int $i0;

        r0 := @this: java.net.DatagramSocket;
        r1 := @parameter0: java.net.SocketAddress;
        if r1 != null goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Address can\'t be null");
        throw $r3;

     label0:
        $z0 = r1 instanceof java.net.InetSocketAddress;
        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported address type");
        throw $r4;

     label1:
        r2 = (java.net.InetSocketAddress) r1;
        $z1 = virtualinvoke r2.<java.net.InetSocketAddress: boolean isUnresolved()>();
        if $z1 == 0 goto label2;

        $r5 = new java.net.SocketException;
        specialinvoke $r5.<java.net.SocketException: void <init>(java.lang.String)>("Unresolved address");
        throw $r5;

     label2:
        $r6 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $i0 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();
        specialinvoke r0.<java.net.DatagramSocket: void connectInternal(java.net.InetAddress,int)>($r6, $i0);
        return;
    }

    public void disconnect()
    {
        java.net.DatagramSocket r0, r2;
        java.lang.Throwable r3, $r5;
        boolean $z0;
        int $i0;
        java.net.DatagramSocketImpl $r4;

        r0 := @this: java.net.DatagramSocket;
        r2 = r0;
        entermonitor r0;

     label0:
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z0 == 0 goto label2;

        exitmonitor r2;

     label1:
        return;

     label2:
        $i0 = r0.<java.net.DatagramSocket: int connectState>;
        if $i0 != 1 goto label3;

        $r4 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;
        virtualinvoke $r4.<java.net.DatagramSocketImpl: void disconnect()>();

     label3:
        r0.<java.net.DatagramSocket: java.net.InetAddress connectedAddress> = null;
        r0.<java.net.DatagramSocket: int connectedPort> = -1;
        r0.<java.net.DatagramSocket: int connectState> = 0;
        r0.<java.net.DatagramSocket: boolean explicitFilter> = 0;
        exitmonitor r2;

     label4:
        goto label8;

     label5:
        $r5 := @caughtexception;

     label6:
        r3 = $r5;
        exitmonitor r2;

     label7:
        throw r3;

     label8:
        return;

        catch java.lang.Throwable from label0 to label1 with label5;
        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean isBound()
    {
        java.net.DatagramSocket r0;
        boolean $z0;

        r0 := @this: java.net.DatagramSocket;
        $z0 = r0.<java.net.DatagramSocket: boolean bound>;
        return $z0;
    }

    public boolean isConnected()
    {
        java.net.DatagramSocket r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.net.DatagramSocket;
        $i0 = r0.<java.net.DatagramSocket: int connectState>;
        if $i0 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.net.InetAddress getInetAddress()
    {
        java.net.DatagramSocket r0;
        java.net.InetAddress $r1;

        r0 := @this: java.net.DatagramSocket;
        $r1 = r0.<java.net.DatagramSocket: java.net.InetAddress connectedAddress>;
        return $r1;
    }

    public int getPort()
    {
        java.net.DatagramSocket r0;
        int $i0;

        r0 := @this: java.net.DatagramSocket;
        $i0 = r0.<java.net.DatagramSocket: int connectedPort>;
        return $i0;
    }

    public java.net.SocketAddress getRemoteSocketAddress()
    {
        java.net.DatagramSocket r0;
        boolean $z0;
        java.net.InetSocketAddress $r1;
        java.net.InetAddress $r2;
        int $i0;

        r0 := @this: java.net.DatagramSocket;
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isConnected()>();
        if $z0 != 0 goto label0;

        return null;

     label0:
        $r1 = new java.net.InetSocketAddress;
        $r2 = virtualinvoke r0.<java.net.DatagramSocket: java.net.InetAddress getInetAddress()>();
        $i0 = virtualinvoke r0.<java.net.DatagramSocket: int getPort()>();
        specialinvoke $r1.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r2, $i0);
        return $r1;
    }

    public java.net.SocketAddress getLocalSocketAddress()
    {
        java.net.DatagramSocket r0;
        boolean $z0, $z1;
        java.net.InetSocketAddress $r1;
        java.net.InetAddress $r2;
        int $i0;

        r0 := @this: java.net.DatagramSocket;
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        return null;

     label0:
        $z1 = virtualinvoke r0.<java.net.DatagramSocket: boolean isBound()>();
        if $z1 != 0 goto label1;

        return null;

     label1:
        $r1 = new java.net.InetSocketAddress;
        $r2 = virtualinvoke r0.<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()>();
        $i0 = virtualinvoke r0.<java.net.DatagramSocket: int getLocalPort()>();
        specialinvoke $r1.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r2, $i0);
        return $r1;
    }

    public void send(java.net.DatagramPacket) throws java.io.IOException
    {
        java.net.DatagramSocket r0;
        java.net.DatagramPacket r1, r2;
        null_type n0;
        java.lang.SecurityManager r3;
        java.lang.Throwable r4, $r18;
        boolean $z0, $z1, $z2, $z3;
        java.net.SocketException $r6;
        java.net.InetAddress $r7, $r8, $r9, $r10, r12, $r13, $r14;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r11;
        java.lang.IllegalArgumentException $r15;
        java.net.InetSocketAddress $r16;
        java.net.DatagramSocketImpl $r17;

        r0 := @this: java.net.DatagramSocket;
        r1 := @parameter0: java.net.DatagramPacket;
        n0 = null;
        r2 = r1;
        entermonitor r1;

     label0:
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z0 == 0 goto label1;

        $r6 = new java.net.SocketException;
        specialinvoke $r6.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r6;

     label1:
        $r7 = virtualinvoke r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();
        virtualinvoke r0.<java.net.DatagramSocket: void checkAddress(java.net.InetAddress,java.lang.String)>($r7, "send");
        $i0 = r0.<java.net.DatagramSocket: int connectState>;
        if $i0 != 0 goto label4;

        r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r3 == null goto label3;

        $r8 = virtualinvoke r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();
        $z1 = virtualinvoke $r8.<java.net.InetAddress: boolean isMulticastAddress()>();
        if $z1 == 0 goto label2;

        $r9 = virtualinvoke r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();
        virtualinvoke r3.<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress)>($r9);
        goto label3;

     label2:
        $r10 = virtualinvoke r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();
        $r11 = virtualinvoke $r10.<java.net.InetAddress: java.lang.String getHostAddress()>();
        $i1 = virtualinvoke r1.<java.net.DatagramPacket: int getPort()>();
        virtualinvoke r3.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>($r11, $i1);

     label3:
        goto label7;

     label4:
        r12 = virtualinvoke r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();
        if r12 != null goto label5;

        $r13 = r0.<java.net.DatagramSocket: java.net.InetAddress connectedAddress>;
        virtualinvoke r1.<java.net.DatagramPacket: void setAddress(java.net.InetAddress)>($r13);
        $i2 = r0.<java.net.DatagramSocket: int connectedPort>;
        virtualinvoke r1.<java.net.DatagramPacket: void setPort(int)>($i2);
        goto label7;

     label5:
        $r14 = r0.<java.net.DatagramSocket: java.net.InetAddress connectedAddress>;
        $z2 = virtualinvoke r12.<java.net.InetAddress: boolean equals(java.lang.Object)>($r14);
        if $z2 == 0 goto label6;

        $i3 = virtualinvoke r1.<java.net.DatagramPacket: int getPort()>();
        $i4 = r0.<java.net.DatagramSocket: int connectedPort>;
        if $i3 == $i4 goto label7;

     label6:
        $r15 = new java.lang.IllegalArgumentException;
        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connected address and packet address differ");
        throw $r15;

     label7:
        $z3 = virtualinvoke r0.<java.net.DatagramSocket: boolean isBound()>();
        if $z3 != 0 goto label8;

        $r16 = new java.net.InetSocketAddress;
        specialinvoke $r16.<java.net.InetSocketAddress: void <init>(int)>(0);
        virtualinvoke r0.<java.net.DatagramSocket: void bind(java.net.SocketAddress)>($r16);

     label8:
        $r17 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r17.<java.net.DatagramSocketImpl: void send(java.net.DatagramPacket)>(r1);
        exitmonitor r2;

     label9:
        goto label13;

     label10:
        $r18 := @caughtexception;

     label11:
        r4 = $r18;
        exitmonitor r2;

     label12:
        throw r4;

     label13:
        return;

        catch java.lang.Throwable from label0 to label9 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public synchronized void receive(java.net.DatagramPacket) throws java.io.IOException
    {
        java.net.DatagramSocket r0;
        java.net.DatagramPacket r1, r3, r5, r6, $r9, $r19, r22, $r23, r25, $r31;
        java.lang.SecurityManager r4;
        null_type n0, n1;
        boolean z0, $z1, $z2, $z3, z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.Throwable r7, $r35;
        java.net.InetSocketAddress $r8;
        int $i0, i1, $i2, i4, $i5;
        byte[] $r10, $r20, $r24, $r32;
        java.net.DatagramSocketImpl $r11, $r16, $r21, $r26, $r29, $r33, $r34;
        java.net.InetAddress $r12, $r14, r15, r27, $r28, $r30;
        java.lang.String r13;
        java.lang.SecurityException $r17, r18;
        byte b3;

        r0 := @this: java.net.DatagramSocket;
        r1 := @parameter0: java.net.DatagramPacket;
        r3 = r1;
        entermonitor r1;

     label0:
        $z1 = virtualinvoke r0.<java.net.DatagramSocket: boolean isBound()>();
        if $z1 != 0 goto label1;

        $r8 = new java.net.InetSocketAddress;
        specialinvoke $r8.<java.net.InetSocketAddress: void <init>(int)>(0);
        virtualinvoke r0.<java.net.DatagramSocket: void bind(java.net.SocketAddress)>($r8);

     label1:
        $i0 = r0.<java.net.DatagramSocket: int connectState>;
        if $i0 != 0 goto label7;

        r4 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r4 == null goto label7;

     label2:
        n0 = null;
        z0 = 0;
        $z2 = r0.<java.net.DatagramSocket: boolean oldImpl>;
        if $z2 != 0 goto label3;

        $r9 = new java.net.DatagramPacket;
        $r10 = newarray (byte)[1];
        specialinvoke $r9.<java.net.DatagramPacket: void <init>(byte[],int)>($r10, 1);
        r5 = $r9;
        $r11 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        i1 = virtualinvoke $r11.<java.net.DatagramSocketImpl: int peekData(java.net.DatagramPacket)>(r5);
        $r12 = virtualinvoke r5.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();
        r13 = virtualinvoke $r12.<java.net.InetAddress: java.lang.String getHostAddress()>();
        goto label4;

     label3:
        $r14 = new java.net.InetAddress;
        specialinvoke $r14.<java.net.InetAddress: void <init>()>();
        r15 = $r14;
        $r16 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        i1 = virtualinvoke $r16.<java.net.DatagramSocketImpl: int peek(java.net.InetAddress)>(r15);
        r13 = virtualinvoke r15.<java.net.InetAddress: java.lang.String getHostAddress()>();

     label4:
        virtualinvoke r4.<java.lang.SecurityManager: void checkAccept(java.lang.String,int)>(r13, i1);

     label5:
        goto label7;

     label6:
        $r17 := @caughtexception;
        r18 = $r17;
        $r19 = new java.net.DatagramPacket;
        $r20 = newarray (byte)[1];
        specialinvoke $r19.<java.net.DatagramPacket: void <init>(byte[],int)>($r20, 1);
        r6 = $r19;
        $r21 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r21.<java.net.DatagramSocketImpl: void receive(java.net.DatagramPacket)>(r6);
        goto label2;

     label7:
        r22 = null;
        $i2 = r0.<java.net.DatagramSocket: int connectState>;
        if $i2 == 2 goto label8;

        $z3 = r0.<java.net.DatagramSocket: boolean explicitFilter>;
        if $z3 == 0 goto label15;

     label8:
        z4 = 0;

     label9:
        if z4 != 0 goto label15;

        n1 = null;
        b3 = -1;
        $z5 = r0.<java.net.DatagramSocket: boolean oldImpl>;
        if $z5 != 0 goto label10;

        $r23 = new java.net.DatagramPacket;
        $r24 = newarray (byte)[1];
        specialinvoke $r23.<java.net.DatagramPacket: void <init>(byte[],int)>($r24, 1);
        r25 = $r23;
        $r26 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        i4 = virtualinvoke $r26.<java.net.DatagramSocketImpl: int peekData(java.net.DatagramPacket)>(r25);
        r27 = virtualinvoke r25.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();
        goto label11;

     label10:
        $r28 = new java.net.InetAddress;
        specialinvoke $r28.<java.net.InetAddress: void <init>()>();
        r27 = $r28;
        $r29 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        i4 = virtualinvoke $r29.<java.net.DatagramSocketImpl: int peek(java.net.InetAddress)>(r27);

     label11:
        $r30 = r0.<java.net.DatagramSocket: java.net.InetAddress connectedAddress>;
        $z6 = virtualinvoke $r30.<java.net.InetAddress: boolean equals(java.lang.Object)>(r27);
        if $z6 == 0 goto label12;

        $i5 = r0.<java.net.DatagramSocket: int connectedPort>;
        if $i5 == i4 goto label13;

     label12:
        $r31 = new java.net.DatagramPacket;
        $r32 = newarray (byte)[1024];
        specialinvoke $r31.<java.net.DatagramPacket: void <init>(byte[],int)>($r32, 1024);
        r22 = $r31;
        $r33 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r33.<java.net.DatagramSocketImpl: void receive(java.net.DatagramPacket)>(r22);
        $z7 = r0.<java.net.DatagramSocket: boolean explicitFilter>;
        if $z7 == 0 goto label14;

        $z8 = specialinvoke r0.<java.net.DatagramSocket: boolean checkFiltering(java.net.DatagramPacket)>(r22);
        if $z8 == 0 goto label14;

        z4 = 1;
        goto label14;

     label13:
        z4 = 1;

     label14:
        goto label9;

     label15:
        $r34 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        virtualinvoke $r34.<java.net.DatagramSocketImpl: void receive(java.net.DatagramPacket)>(r1);
        $z9 = r0.<java.net.DatagramSocket: boolean explicitFilter>;
        if $z9 == 0 goto label16;

        if r22 != null goto label16;

        specialinvoke r0.<java.net.DatagramSocket: boolean checkFiltering(java.net.DatagramPacket)>(r1);

     label16:
        exitmonitor r3;

     label17:
        goto label21;

     label18:
        $r35 := @caughtexception;

     label19:
        r7 = $r35;
        exitmonitor r3;

     label20:
        throw r7;

     label21:
        return;

        catch java.lang.SecurityException from label4 to label5 with label6;
        catch java.lang.Throwable from label0 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    private boolean checkFiltering(java.net.DatagramPacket) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.net.DatagramPacket r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.net.DatagramSocketImpl $r3;

        r0 := @this: java.net.DatagramSocket;
        r1 := @parameter0: java.net.DatagramPacket;
        $i0 = r0.<java.net.DatagramSocket: int bytesLeftToFilter>;
        $i1 = virtualinvoke r1.<java.net.DatagramPacket: int getLength()>();
        $i2 = $i0 - $i1;
        r0.<java.net.DatagramSocket: int bytesLeftToFilter> = $i2;
        $i3 = r0.<java.net.DatagramSocket: int bytesLeftToFilter>;
        if $i3 <= 0 goto label0;

        $r3 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        $i4 = virtualinvoke $r3.<java.net.DatagramSocketImpl: int dataAvailable()>();
        if $i4 > 0 goto label1;

     label0:
        r0.<java.net.DatagramSocket: boolean explicitFilter> = 0;
        return 1;

     label1:
        return 0;
    }

    public java.net.InetAddress getLocalAddress()
    {
        java.net.DatagramSocket r0;
        null_type n0;
        java.lang.SecurityManager r1;
        boolean $z0, $z1;
        java.net.DatagramSocketImpl $r2;
        java.lang.Object $r3;
        java.net.InetAddress r4;
        java.lang.String $r5;
        java.lang.Exception $r6, r7;

        r0 := @this: java.net.DatagramSocket;
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        return null;

     label0:
        n0 = null;

     label1:
        $r2 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        $r3 = virtualinvoke $r2.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(15);
        r4 = (java.net.InetAddress) $r3;
        $z1 = virtualinvoke r4.<java.net.InetAddress: boolean isAnyLocalAddress()>();
        if $z1 == 0 goto label2;

        r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress anyLocalAddress()>();

     label2:
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label3;

        $r5 = virtualinvoke r4.<java.net.InetAddress: java.lang.String getHostAddress()>();
        virtualinvoke r1.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>($r5, -1);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;
        r7 = $r6;
        r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress anyLocalAddress()>();

     label5:
        return r4;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public int getLocalPort()
    {
        java.net.DatagramSocket r0;
        java.lang.Exception r1, $r3;
        boolean $z0;
        java.net.DatagramSocketImpl $r2;
        int $i0;

        r0 := @this: java.net.DatagramSocket;
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        return -1;

     label0:
        $r2 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        $i0 = virtualinvoke $r2.<java.net.DatagramSocketImpl: int getLocalPort()>();

     label1:
        return $i0;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        return 0;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public synchronized void setSoTimeout(int) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        int i0;
        boolean $z0;
        java.net.SocketException $r1;
        java.net.DatagramSocketImpl $r2;
        java.lang.Integer $r3;

        r0 := @this: java.net.DatagramSocket;
        i0 := @parameter0: int;
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r1 = new java.net.SocketException;
        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r1;

     label0:
        $r2 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        $r3 = new java.lang.Integer;
        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i0);
        virtualinvoke $r2.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(4102, $r3);
        return;
    }

    public synchronized int getSoTimeout() throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.net.SocketException $r2;
        java.net.DatagramSocketImpl $r3, $r4;
        java.lang.Integer $r5;
        int $i0;

        r0 := @this: java.net.DatagramSocket;
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r2 = new java.net.SocketException;
        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r2;

     label0:
        $r3 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        if $r3 != null goto label1;

        return 0;

     label1:
        $r4 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        r1 = virtualinvoke $r4.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(4102);
        $z1 = r1 instanceof java.lang.Integer;
        if $z1 == 0 goto label2;

        $r5 = (java.lang.Integer) r1;
        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();
        return $i0;

     label2:
        return 0;
    }

    public synchronized void setSendBufferSize(int) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;
        java.net.SocketException $r2;
        java.net.DatagramSocketImpl $r3;
        java.lang.Integer $r4;

        r0 := @this: java.net.DatagramSocket;
        i0 := @parameter0: int;
        if i0 > 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("negative send size");
        throw $r1;

     label0:
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z0 == 0 goto label1;

        $r2 = new java.net.SocketException;
        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r2;

     label1:
        $r3 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        $r4 = new java.lang.Integer;
        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i0);
        virtualinvoke $r3.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(4097, $r4);
        return;
    }

    public synchronized int getSendBufferSize() throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        int i0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.net.SocketException $r2;
        java.net.DatagramSocketImpl $r3;
        java.lang.Integer $r4;

        r0 := @this: java.net.DatagramSocket;
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r2 = new java.net.SocketException;
        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r2;

     label0:
        i0 = 0;
        $r3 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        r1 = virtualinvoke $r3.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(4097);
        $z1 = r1 instanceof java.lang.Integer;
        if $z1 == 0 goto label1;

        $r4 = (java.lang.Integer) r1;
        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

     label1:
        return i0;
    }

    public synchronized void setReceiveBufferSize(int) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;
        java.net.SocketException $r2;
        java.net.DatagramSocketImpl $r3;
        java.lang.Integer $r4;

        r0 := @this: java.net.DatagramSocket;
        i0 := @parameter0: int;
        if i0 > 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid receive size");
        throw $r1;

     label0:
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z0 == 0 goto label1;

        $r2 = new java.net.SocketException;
        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r2;

     label1:
        $r3 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        $r4 = new java.lang.Integer;
        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i0);
        virtualinvoke $r3.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(4098, $r4);
        return;
    }

    public synchronized int getReceiveBufferSize() throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        int i0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.net.SocketException $r2;
        java.net.DatagramSocketImpl $r3;
        java.lang.Integer $r4;

        r0 := @this: java.net.DatagramSocket;
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r2 = new java.net.SocketException;
        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r2;

     label0:
        i0 = 0;
        $r3 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        r1 = virtualinvoke $r3.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(4098);
        $z1 = r1 instanceof java.lang.Integer;
        if $z1 == 0 goto label1;

        $r4 = (java.lang.Integer) r1;
        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

     label1:
        return i0;
    }

    public synchronized void setReuseAddress(boolean) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        boolean z0, $z1, $z2;
        java.net.SocketException $r2;
        java.net.DatagramSocketImpl $r3, $r5;
        byte $b0, $b1;
        java.lang.Integer $r4;
        java.lang.Boolean $r6;

        r0 := @this: java.net.DatagramSocket;
        z0 := @parameter0: boolean;
        $z1 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z1 == 0 goto label0;

        $r2 = new java.net.SocketException;
        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r2;

     label0:
        $z2 = r0.<java.net.DatagramSocket: boolean oldImpl>;
        if $z2 == 0 goto label3;

        $r3 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        $b0 = 4;
        $r4 = new java.lang.Integer;
        if z0 == 0 goto label1;

        $b1 = -1;
        goto label2;

     label1:
        $b1 = 0;

     label2:
        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($b1);
        virtualinvoke $r3.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>($b0, $r4);
        goto label4;

     label3:
        $r5 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);
        virtualinvoke $r5.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(4, $r6);

     label4:
        return;
    }

    public synchronized boolean getReuseAddress() throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.net.SocketException $r2;
        java.net.DatagramSocketImpl $r3;
        java.lang.Boolean $r4;

        r0 := @this: java.net.DatagramSocket;
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r2 = new java.net.SocketException;
        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r2;

     label0:
        $r3 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        r1 = virtualinvoke $r3.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(4);
        $r4 = (java.lang.Boolean) r1;
        $z1 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();
        return $z1;
    }

    public synchronized void setBroadcast(boolean) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        boolean z0, $z1;
        java.net.SocketException $r1;
        java.net.DatagramSocketImpl $r2;
        java.lang.Boolean $r3;

        r0 := @this: java.net.DatagramSocket;
        z0 := @parameter0: boolean;
        $z1 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z1 == 0 goto label0;

        $r1 = new java.net.SocketException;
        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r1;

     label0:
        $r2 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);
        virtualinvoke $r2.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(32, $r3);
        return;
    }

    public synchronized boolean getBroadcast() throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        boolean $z0, $z1;
        java.net.SocketException $r1;
        java.net.DatagramSocketImpl $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4, $r5;

        r0 := @this: java.net.DatagramSocket;
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r1 = new java.net.SocketException;
        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r1;

     label0:
        $r2 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        $r3 = virtualinvoke $r2.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(32);
        $r4 = (java.lang.Boolean) $r3;
        $r5 = (java.lang.Boolean) $r4;
        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();
        return $z1;
    }

    public synchronized void setTrafficClass(int) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;
        java.net.SocketException $r2;
        java.net.DatagramSocketImpl $r3;
        java.lang.Integer $r4;

        r0 := @this: java.net.DatagramSocket;
        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        if i0 <= 255 goto label1;

     label0:
        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("tc is not in range 0 -- 255");
        throw $r1;

     label1:
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z0 == 0 goto label2;

        $r2 = new java.net.SocketException;
        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r2;

     label2:
        $r3 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        $r4 = new java.lang.Integer;
        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i0);
        virtualinvoke $r3.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(3, $r4);
        return;
    }

    public synchronized int getTrafficClass() throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        boolean $z0;
        java.net.SocketException $r1;
        java.net.DatagramSocketImpl $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4, $r5;
        int $i0;

        r0 := @this: java.net.DatagramSocket;
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r1 = new java.net.SocketException;
        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r1;

     label0:
        $r2 = virtualinvoke r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl getImpl()>();
        $r3 = virtualinvoke $r2.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(3);
        $r4 = (java.lang.Integer) $r3;
        $r5 = (java.lang.Integer) $r4;
        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();
        return $i0;
    }

    public void close()
    {
        java.net.DatagramSocket r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        boolean $z0;
        java.net.DatagramSocketImpl $r4;

        r0 := @this: java.net.DatagramSocket;
        $r3 = r0.<java.net.DatagramSocket: java.lang.Object closeLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();
        if $z0 == 0 goto label2;

        exitmonitor r1;

     label1:
        return;

     label2:
        $r4 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;
        virtualinvoke $r4.<java.net.DatagramSocketImpl: void close()>();
        r0.<java.net.DatagramSocket: boolean closed> = 1;
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r5 := @caughtexception;

     label5:
        r2 = $r5;
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean isClosed()
    {
        java.net.DatagramSocket r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: java.net.DatagramSocket;
        $r3 = r0.<java.net.DatagramSocket: java.lang.Object closeLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z0 = r0.<java.net.DatagramSocket: boolean closed>;
        exitmonitor r1;

     label1:
        return $z0;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.nio.channels.DatagramChannel getChannel()
    {
        java.net.DatagramSocket r0;

        r0 := @this: java.net.DatagramSocket;
        return null;
    }

    public static synchronized void setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory) throws java.io.IOException
    {
        java.net.DatagramSocketImplFactory r0, $r1;
        java.lang.SecurityManager r2;
        java.net.SocketException $r3;

        r0 := @parameter0: java.net.DatagramSocketImplFactory;
        $r1 = <java.net.DatagramSocket: java.net.DatagramSocketImplFactory factory>;
        if $r1 == null goto label0;

        $r3 = new java.net.SocketException;
        specialinvoke $r3.<java.net.SocketException: void <init>(java.lang.String)>("factory already defined");
        throw $r3;

     label0:
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label1;

        virtualinvoke r2.<java.lang.SecurityManager: void checkSetFactory()>();

     label1:
        <java.net.DatagramSocket: java.net.DatagramSocketImplFactory factory> = r0;
        return;
    }

    static void <clinit>()
    {
        <java.net.DatagramSocket: java.lang.Class implClass> = null;
        return;
    }
}
