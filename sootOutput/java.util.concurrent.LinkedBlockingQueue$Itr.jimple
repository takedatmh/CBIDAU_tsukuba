class java.util.concurrent.LinkedBlockingQueue$Itr extends java.lang.Object implements java.util.Iterator
{
    private java.util.concurrent.LinkedBlockingQueue$Node current;
    private java.util.concurrent.LinkedBlockingQueue$Node lastRet;
    private java.lang.Object currentElement;
    final java.util.concurrent.LinkedBlockingQueue this$0;

    void <init>(java.util.concurrent.LinkedBlockingQueue)
    {
        java.util.concurrent.LinkedBlockingQueue$Itr r0;
        java.util.concurrent.LinkedBlockingQueue r1;
        java.lang.Throwable r2, $r8;
        java.util.concurrent.LinkedBlockingQueue$Node $r3, $r4, $r5, $r6;
        java.lang.Object $r7;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue$Itr;
        r1 := @parameter0: java.util.concurrent.LinkedBlockingQueue;
        r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        virtualinvoke r1.<java.util.concurrent.LinkedBlockingQueue: void fullyLock()>();

     label0:
        $r3 = staticinvoke <java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node access$000(java.util.concurrent.LinkedBlockingQueue)>(r1);
        $r4 = $r3.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;
        r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue$Node current> = $r4;
        $r5 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue$Node current>;
        if $r5 == null goto label1;

        $r6 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue$Node current>;
        $r7 = $r6.<java.util.concurrent.LinkedBlockingQueue$Node: java.lang.Object item>;
        r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object currentElement> = $r7;

     label1:
        virtualinvoke r1.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();
        goto label5;

     label2:
        $r8 := @caughtexception;

     label3:
        r2 = $r8;

     label4:
        virtualinvoke r1.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public boolean hasNext()
    {
        java.util.concurrent.LinkedBlockingQueue$Itr r0;
        java.util.concurrent.LinkedBlockingQueue$Node $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue$Itr;
        $r1 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue$Node current>;
        if $r1 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private java.util.concurrent.LinkedBlockingQueue$Node nextNode(java.util.concurrent.LinkedBlockingQueue$Node)
    {
        java.util.concurrent.LinkedBlockingQueue$Itr r0;
        java.util.concurrent.LinkedBlockingQueue$Node r1, r2, $r4, $r5;
        java.util.concurrent.LinkedBlockingQueue $r3;
        java.lang.Object $r6;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue$Itr;
        r1 := @parameter0: java.util.concurrent.LinkedBlockingQueue$Node;

     label0:
        r2 = r1.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;
        if r2 != r1 goto label1;

        $r3 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue this$0>;
        $r4 = staticinvoke <java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node access$000(java.util.concurrent.LinkedBlockingQueue)>($r3);
        $r5 = $r4.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;
        return $r5;

     label1:
        if r2 == null goto label2;

        $r6 = r2.<java.util.concurrent.LinkedBlockingQueue$Node: java.lang.Object item>;
        if $r6 == null goto label3;

     label2:
        return r2;

     label3:
        r1 = r2;
        goto label0;
    }

    public java.lang.Object next()
    {
        java.util.concurrent.LinkedBlockingQueue$Itr r0;
        java.lang.Object r1, r2, $r12;
        java.lang.Throwable r3, $r15;
        java.util.concurrent.LinkedBlockingQueue $r4, $r14, $r16;
        java.util.concurrent.LinkedBlockingQueue$Node $r5, $r7, $r8, $r9, $r11, $r13;
        java.util.NoSuchElementException $r6;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue$Itr;
        $r4 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue this$0>;
        virtualinvoke $r4.<java.util.concurrent.LinkedBlockingQueue: void fullyLock()>();

     label0:
        $r5 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue$Node current>;
        if $r5 != null goto label1;

        $r6 = new java.util.NoSuchElementException;
        specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>();
        throw $r6;

     label1:
        r1 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object currentElement>;
        $r7 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue$Node current>;
        r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue$Node lastRet> = $r7;
        $r8 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue$Node current>;
        $r9 = specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue$Node nextNode(java.util.concurrent.LinkedBlockingQueue$Node)>($r8);
        r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue$Node current> = $r9;
        $r11 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue$Node current>;
        if $r11 != null goto label2;

        $r12 = null;
        goto label3;

     label2:
        $r13 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue$Node current>;
        $r12 = $r13.<java.util.concurrent.LinkedBlockingQueue$Node: java.lang.Object item>;

     label3:
        r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object currentElement> = $r12;
        r2 = r1;

     label4:
        $r14 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue this$0>;
        virtualinvoke $r14.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();
        return r2;

     label5:
        $r15 := @caughtexception;

     label6:
        r3 = $r15;

     label7:
        $r16 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue this$0>;
        virtualinvoke $r16.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void remove()
    {
        java.util.concurrent.LinkedBlockingQueue$Itr r0;
        java.util.concurrent.LinkedBlockingQueue$Node r1, r2, r3, $r5;
        java.lang.Throwable r4, $r11;
        java.lang.IllegalStateException $r6;
        java.util.concurrent.LinkedBlockingQueue $r7, $r8, $r9, $r10, $r12;

        r0 := @this: java.util.concurrent.LinkedBlockingQueue$Itr;
        $r5 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue$Node lastRet>;
        if $r5 != null goto label0;

        $r6 = new java.lang.IllegalStateException;
        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();
        throw $r6;

     label0:
        $r7 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue this$0>;
        virtualinvoke $r7.<java.util.concurrent.LinkedBlockingQueue: void fullyLock()>();

     label1:
        r1 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue$Node lastRet>;
        r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue$Node lastRet> = null;
        $r8 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue this$0>;
        r2 = staticinvoke <java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node access$000(java.util.concurrent.LinkedBlockingQueue)>($r8);
        r3 = r2.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

     label2:
        if r3 == null goto label4;

        if r3 != r1 goto label3;

        $r9 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue this$0>;
        virtualinvoke $r9.<java.util.concurrent.LinkedBlockingQueue: void unlink(java.util.concurrent.LinkedBlockingQueue$Node,java.util.concurrent.LinkedBlockingQueue$Node)>(r3, r2);
        goto label4;

     label3:
        r2 = r3;
        r3 = r3.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;
        goto label2;

     label4:
        $r10 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue this$0>;
        virtualinvoke $r10.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();
        goto label8;

     label5:
        $r11 := @caughtexception;

     label6:
        r4 = $r11;

     label7:
        $r12 = r0.<java.util.concurrent.LinkedBlockingQueue$Itr: java.util.concurrent.LinkedBlockingQueue this$0>;
        virtualinvoke $r12.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }
}
