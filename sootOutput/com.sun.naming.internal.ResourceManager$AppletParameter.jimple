class com.sun.naming.internal.ResourceManager$AppletParameter extends java.lang.Object
{
    private static final java.lang.Class clazz;
    private static final java.lang.reflect.Method getMethod;

    private void <init>()
    {
        com.sun.naming.internal.ResourceManager$AppletParameter r0;

        r0 := @this: com.sun.naming.internal.ResourceManager$AppletParameter;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    private static java.lang.Class getClass(java.lang.String)
    {
        java.lang.String r0;
        java.lang.ClassNotFoundException r1, $r3;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.String;

     label0:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r0, 1, null);

     label1:
        return $r2;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        return null;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    private static transient java.lang.reflect.Method getMethod(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.Class[] r2;
        java.lang.NoSuchMethodException r3, $r5;
        java.lang.reflect.Method $r4;
        java.lang.AssertionError $r6;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.Class[];
        if r0 == null goto label3;

     label0:
        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, r2);

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;
        r3 = $r5;
        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>(r3);
        throw $r6;

     label3:
        return null;

        catch java.lang.NoSuchMethodException from label0 to label1 with label2;
    }

    static java.lang.Object get(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0, $r10;
        java.lang.String r1, $r7;
        java.lang.Class $r2, $r4, $r6;
        java.lang.reflect.InvocationTargetException r3, $r11;
        boolean $z0;
        java.lang.ClassCastException $r5;
        java.lang.reflect.Method $r8;
        java.lang.Object[] $r9;
        java.lang.AssertionError $r12, $r15;
        java.lang.IllegalAccessException $r13, r14;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.String;
        $r2 = <com.sun.naming.internal.ResourceManager$AppletParameter: java.lang.Class clazz>;
        if $r2 == null goto label0;

        $r4 = <com.sun.naming.internal.ResourceManager$AppletParameter: java.lang.Class clazz>;
        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);
        if $z0 != 0 goto label1;

     label0:
        $r5 = new java.lang.ClassCastException;
        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();
        specialinvoke $r5.<java.lang.ClassCastException: void <init>(java.lang.String)>($r7);
        throw $r5;

     label1:
        $r8 = <com.sun.naming.internal.ResourceManager$AppletParameter: java.lang.reflect.Method getMethod>;
        $r9 = newarray (java.lang.Object)[1];
        $r9[0] = r1;
        $r10 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r9);

     label2:
        return $r10;

     label3:
        $r11 := @caughtexception;
        r3 = $r11;
        $r12 = new java.lang.AssertionError;
        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>(r3);
        throw $r12;

     label4:
        $r13 := @caughtexception;
        r14 = $r13;
        $r15 = new java.lang.AssertionError;
        specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>(r14);
        throw $r15;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        java.lang.Class[] $r2;
        java.lang.reflect.Method $r3;

        $r0 = staticinvoke <com.sun.naming.internal.ResourceManager$AppletParameter: java.lang.Class getClass(java.lang.String)>("java.applet.Applet");
        <com.sun.naming.internal.ResourceManager$AppletParameter: java.lang.Class clazz> = $r0;
        $r1 = <com.sun.naming.internal.ResourceManager$AppletParameter: java.lang.Class clazz>;
        $r2 = newarray (java.lang.Class)[1];
        $r2[0] = class "java/lang/String";
        $r3 = staticinvoke <com.sun.naming.internal.ResourceManager$AppletParameter: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, "getParameter", $r2);
        <com.sun.naming.internal.ResourceManager$AppletParameter: java.lang.reflect.Method getMethod> = $r3;
        return;
    }
}
