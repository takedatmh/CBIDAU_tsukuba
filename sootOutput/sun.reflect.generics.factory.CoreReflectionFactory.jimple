public class sun.reflect.generics.factory.CoreReflectionFactory extends java.lang.Object implements sun.reflect.generics.factory.GenericsFactory
{
    private java.lang.reflect.GenericDeclaration decl;
    private sun.reflect.generics.scope.Scope scope;
    static final boolean $assertionsDisabled;

    private void <init>(java.lang.reflect.GenericDeclaration, sun.reflect.generics.scope.Scope)
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        java.lang.reflect.GenericDeclaration r1;
        sun.reflect.generics.scope.Scope r2;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        r1 := @parameter0: java.lang.reflect.GenericDeclaration;
        r2 := @parameter1: sun.reflect.generics.scope.Scope;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.reflect.generics.factory.CoreReflectionFactory: java.lang.reflect.GenericDeclaration decl> = r1;
        r0.<sun.reflect.generics.factory.CoreReflectionFactory: sun.reflect.generics.scope.Scope scope> = r2;
        return;
    }

    private java.lang.reflect.GenericDeclaration getDecl()
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        java.lang.reflect.GenericDeclaration $r1;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        $r1 = r0.<sun.reflect.generics.factory.CoreReflectionFactory: java.lang.reflect.GenericDeclaration decl>;
        return $r1;
    }

    private sun.reflect.generics.scope.Scope getScope()
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        sun.reflect.generics.scope.Scope $r1;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        $r1 = r0.<sun.reflect.generics.factory.CoreReflectionFactory: sun.reflect.generics.scope.Scope scope>;
        return $r1;
    }

    private java.lang.ClassLoader getDeclsLoader()
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        java.lang.reflect.GenericDeclaration $r1, $r2, $r5, $r6, $r10, $r12;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class $r3, $r8, $r14;
        java.lang.ClassLoader $r4, $r9, $r15;
        java.lang.reflect.Method $r7;
        java.lang.AssertionError $r11;
        java.lang.reflect.Constructor $r13;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        $r1 = r0.<sun.reflect.generics.factory.CoreReflectionFactory: java.lang.reflect.GenericDeclaration decl>;
        $z0 = $r1 instanceof java.lang.Class;
        if $z0 == 0 goto label0;

        $r2 = r0.<sun.reflect.generics.factory.CoreReflectionFactory: java.lang.reflect.GenericDeclaration decl>;
        $r3 = (java.lang.Class) $r2;
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        return $r4;

     label0:
        $r5 = r0.<sun.reflect.generics.factory.CoreReflectionFactory: java.lang.reflect.GenericDeclaration decl>;
        $z1 = $r5 instanceof java.lang.reflect.Method;
        if $z1 == 0 goto label1;

        $r6 = r0.<sun.reflect.generics.factory.CoreReflectionFactory: java.lang.reflect.GenericDeclaration decl>;
        $r7 = (java.lang.reflect.Method) $r6;
        $r8 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        return $r9;

     label1:
        $z2 = <sun.reflect.generics.factory.CoreReflectionFactory: boolean $assertionsDisabled>;
        if $z2 != 0 goto label2;

        $r10 = r0.<sun.reflect.generics.factory.CoreReflectionFactory: java.lang.reflect.GenericDeclaration decl>;
        $z3 = $r10 instanceof java.lang.reflect.Constructor;
        if $z3 != 0 goto label2;

        $r11 = new java.lang.AssertionError;
        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>("Constructor expected");
        throw $r11;

     label2:
        $r12 = r0.<sun.reflect.generics.factory.CoreReflectionFactory: java.lang.reflect.GenericDeclaration decl>;
        $r13 = (java.lang.reflect.Constructor) $r12;
        $r14 = virtualinvoke $r13.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        return $r15;
    }

    public static sun.reflect.generics.factory.CoreReflectionFactory make(java.lang.reflect.GenericDeclaration, sun.reflect.generics.scope.Scope)
    {
        java.lang.reflect.GenericDeclaration r0;
        sun.reflect.generics.scope.Scope r1;
        sun.reflect.generics.factory.CoreReflectionFactory $r2;

        r0 := @parameter0: java.lang.reflect.GenericDeclaration;
        r1 := @parameter1: sun.reflect.generics.scope.Scope;
        $r2 = new sun.reflect.generics.factory.CoreReflectionFactory;
        specialinvoke $r2.<sun.reflect.generics.factory.CoreReflectionFactory: void <init>(java.lang.reflect.GenericDeclaration,sun.reflect.generics.scope.Scope)>(r0, r1);
        return $r2;
    }

    public java.lang.reflect.TypeVariable makeTypeVariable(java.lang.String, sun.reflect.generics.tree.FieldTypeSignature[])
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        java.lang.String r1;
        sun.reflect.generics.tree.FieldTypeSignature[] r2;
        java.lang.reflect.GenericDeclaration $r3;
        sun.reflect.generics.reflectiveObjects.TypeVariableImpl $r4;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: sun.reflect.generics.tree.FieldTypeSignature[];
        $r3 = specialinvoke r0.<sun.reflect.generics.factory.CoreReflectionFactory: java.lang.reflect.GenericDeclaration getDecl()>();
        $r4 = staticinvoke <sun.reflect.generics.reflectiveObjects.TypeVariableImpl: sun.reflect.generics.reflectiveObjects.TypeVariableImpl make(java.lang.reflect.GenericDeclaration,java.lang.String,sun.reflect.generics.tree.FieldTypeSignature[],sun.reflect.generics.factory.GenericsFactory)>($r3, r1, r2, r0);
        return $r4;
    }

    public java.lang.reflect.WildcardType makeWildcard(sun.reflect.generics.tree.FieldTypeSignature[], sun.reflect.generics.tree.FieldTypeSignature[])
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        sun.reflect.generics.tree.FieldTypeSignature[] r1, r2;
        sun.reflect.generics.reflectiveObjects.WildcardTypeImpl $r3;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        r1 := @parameter0: sun.reflect.generics.tree.FieldTypeSignature[];
        r2 := @parameter1: sun.reflect.generics.tree.FieldTypeSignature[];
        $r3 = staticinvoke <sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: sun.reflect.generics.reflectiveObjects.WildcardTypeImpl make(sun.reflect.generics.tree.FieldTypeSignature[],sun.reflect.generics.tree.FieldTypeSignature[],sun.reflect.generics.factory.GenericsFactory)>(r1, r2, r0);
        return $r3;
    }

    public java.lang.reflect.ParameterizedType makeParameterizedType(java.lang.reflect.Type, java.lang.reflect.Type[], java.lang.reflect.Type)
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        java.lang.reflect.Type r1, r3;
        java.lang.reflect.Type[] r2;
        java.lang.Class $r4;
        sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl $r5;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        r1 := @parameter0: java.lang.reflect.Type;
        r2 := @parameter1: java.lang.reflect.Type[];
        r3 := @parameter2: java.lang.reflect.Type;
        $r4 = (java.lang.Class) r1;
        $r5 = staticinvoke <sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl make(java.lang.Class,java.lang.reflect.Type[],java.lang.reflect.Type)>($r4, r2, r3);
        return $r5;
    }

    public java.lang.reflect.TypeVariable findTypeVariable(java.lang.String)
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        java.lang.String r1;
        sun.reflect.generics.scope.Scope $r2;
        java.lang.reflect.TypeVariable $r3;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        r1 := @parameter0: java.lang.String;
        $r2 = specialinvoke r0.<sun.reflect.generics.factory.CoreReflectionFactory: sun.reflect.generics.scope.Scope getScope()>();
        $r3 = interfaceinvoke $r2.<sun.reflect.generics.scope.Scope: java.lang.reflect.TypeVariable lookup(java.lang.String)>(r1);
        return $r3;
    }

    public java.lang.reflect.Type makeNamedType(java.lang.String)
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        java.lang.String r1;
        java.lang.ClassNotFoundException r2, $r5;
        java.lang.ClassLoader $r3;
        java.lang.Class $r4;
        java.lang.TypeNotPresentException $r6;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        r1 := @parameter0: java.lang.String;

     label0:
        $r3 = specialinvoke r0.<sun.reflect.generics.factory.CoreReflectionFactory: java.lang.ClassLoader getDeclsLoader()>();
        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 0, $r3);

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;
        r2 = $r5;
        $r6 = new java.lang.TypeNotPresentException;
        specialinvoke $r6.<java.lang.TypeNotPresentException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);
        throw $r6;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    public java.lang.reflect.Type makeArrayType(java.lang.reflect.Type)
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        java.lang.reflect.Type r1;
        boolean $z0;
        java.lang.Class $r2, $r4;
        java.lang.Object $r3;
        sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl $r5;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        r1 := @parameter0: java.lang.reflect.Type;
        $z0 = r1 instanceof java.lang.Class;
        if $z0 == 0 goto label0;

        $r2 = (java.lang.Class) r1;
        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r2, 0);
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();
        return $r4;

     label0:
        $r5 = staticinvoke <sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl make(java.lang.reflect.Type)>(r1);
        return $r5;
    }

    public java.lang.reflect.Type makeByte()
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        java.lang.Class $r1;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        $r1 = <java.lang.Byte: java.lang.Class TYPE>;
        return $r1;
    }

    public java.lang.reflect.Type makeBool()
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        java.lang.Class $r1;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        $r1 = <java.lang.Boolean: java.lang.Class TYPE>;
        return $r1;
    }

    public java.lang.reflect.Type makeShort()
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        java.lang.Class $r1;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        $r1 = <java.lang.Short: java.lang.Class TYPE>;
        return $r1;
    }

    public java.lang.reflect.Type makeChar()
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        java.lang.Class $r1;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        $r1 = <java.lang.Character: java.lang.Class TYPE>;
        return $r1;
    }

    public java.lang.reflect.Type makeInt()
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        java.lang.Class $r1;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        $r1 = <java.lang.Integer: java.lang.Class TYPE>;
        return $r1;
    }

    public java.lang.reflect.Type makeLong()
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        java.lang.Class $r1;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        $r1 = <java.lang.Long: java.lang.Class TYPE>;
        return $r1;
    }

    public java.lang.reflect.Type makeFloat()
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        java.lang.Class $r1;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        $r1 = <java.lang.Float: java.lang.Class TYPE>;
        return $r1;
    }

    public java.lang.reflect.Type makeDouble()
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        java.lang.Class $r1;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        $r1 = <java.lang.Double: java.lang.Class TYPE>;
        return $r1;
    }

    public java.lang.reflect.Type makeVoid()
    {
        sun.reflect.generics.factory.CoreReflectionFactory r0;
        java.lang.Class $r1;

        r0 := @this: sun.reflect.generics.factory.CoreReflectionFactory;
        $r1 = <java.lang.Void: java.lang.Class TYPE>;
        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/reflect/generics/factory/CoreReflectionFactory";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.reflect.generics.factory.CoreReflectionFactory: boolean $assertionsDisabled> = $z1;
        return;
    }
}
