class java.util.LinkedHashMap$Entry extends java.util.HashMap$Entry
{
    java.util.LinkedHashMap$Entry before;
    java.util.LinkedHashMap$Entry after;

    void <init>(int, java.lang.Object, java.lang.Object, java.util.HashMap$Entry)
    {
        java.util.LinkedHashMap$Entry r0;
        int i0;
        java.lang.Object r1, r2;
        java.util.HashMap$Entry r3;

        r0 := @this: java.util.LinkedHashMap$Entry;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.lang.Object;
        r3 := @parameter3: java.util.HashMap$Entry;
        specialinvoke r0.<java.util.HashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Entry)>(i0, r1, r2, r3);
        return;
    }

    private void remove()
    {
        java.util.LinkedHashMap$Entry r0, $r1, $r2, $r3, $r4;

        r0 := @this: java.util.LinkedHashMap$Entry;
        $r1 = r0.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before>;
        $r2 = r0.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after>;
        $r1.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after> = $r2;
        $r3 = r0.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after>;
        $r4 = r0.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before>;
        $r3.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before> = $r4;
        return;
    }

    private void addBefore(java.util.LinkedHashMap$Entry)
    {
        java.util.LinkedHashMap$Entry r0, r1, $r2, $r3, $r4;

        r0 := @this: java.util.LinkedHashMap$Entry;
        r1 := @parameter0: java.util.LinkedHashMap$Entry;
        r0.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after> = r1;
        $r2 = r1.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before>;
        r0.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before> = $r2;
        $r3 = r0.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before>;
        $r3.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after> = r0;
        $r4 = r0.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after>;
        $r4.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before> = r0;
        return;
    }

    void recordAccess(java.util.HashMap)
    {
        java.util.LinkedHashMap$Entry r0, $r4;
        java.util.HashMap r1;
        java.util.LinkedHashMap r2;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: java.util.LinkedHashMap$Entry;
        r1 := @parameter0: java.util.HashMap;
        r2 = (java.util.LinkedHashMap) r1;
        $z0 = staticinvoke <java.util.LinkedHashMap: boolean access$000(java.util.LinkedHashMap)>(r2);
        if $z0 == 0 goto label0;

        $i0 = r2.<java.util.LinkedHashMap: int modCount>;
        $i1 = $i0 + 1;
        r2.<java.util.LinkedHashMap: int modCount> = $i1;
        specialinvoke r0.<java.util.LinkedHashMap$Entry: void remove()>();
        $r4 = staticinvoke <java.util.LinkedHashMap: java.util.LinkedHashMap$Entry access$100(java.util.LinkedHashMap)>(r2);
        specialinvoke r0.<java.util.LinkedHashMap$Entry: void addBefore(java.util.LinkedHashMap$Entry)>($r4);

     label0:
        return;
    }

    void recordRemoval(java.util.HashMap)
    {
        java.util.LinkedHashMap$Entry r0;
        java.util.HashMap r1;

        r0 := @this: java.util.LinkedHashMap$Entry;
        r1 := @parameter0: java.util.HashMap;
        specialinvoke r0.<java.util.LinkedHashMap$Entry: void remove()>();
        return;
    }

    static void access$600(java.util.LinkedHashMap$Entry, java.util.LinkedHashMap$Entry)
    {
        java.util.LinkedHashMap$Entry r0, r1;

        r0 := @parameter0: java.util.LinkedHashMap$Entry;
        r1 := @parameter1: java.util.LinkedHashMap$Entry;
        specialinvoke r0.<java.util.LinkedHashMap$Entry: void addBefore(java.util.LinkedHashMap$Entry)>(r1);
        return;
    }
}
