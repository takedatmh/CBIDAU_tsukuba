public class sun.reflect.annotation.AnnotationType extends java.lang.Object
{
    private final java.util.Map memberTypes;
    private final java.util.Map memberDefaults;
    private final java.util.Map members;
    private final java.lang.annotation.RetentionPolicy retention;
    private final boolean inherited;
    static final boolean $assertionsDisabled;

    public static sun.reflect.annotation.AnnotationType getInstance(java.lang.Class)
    {
        java.lang.Class r0;
        sun.misc.JavaLangAccess r1;
        sun.reflect.annotation.AnnotationType r2, $r3;
        boolean $z0, $z1;
        java.lang.AssertionError $r4;

        r0 := @parameter0: java.lang.Class;
        r1 = staticinvoke <sun.misc.SharedSecrets: sun.misc.JavaLangAccess getJavaLangAccess()>();
        r2 = interfaceinvoke r1.<sun.misc.JavaLangAccess: sun.reflect.annotation.AnnotationType getAnnotationType(java.lang.Class)>(r0);
        if r2 != null goto label0;

        $r3 = new sun.reflect.annotation.AnnotationType;
        specialinvoke $r3.<sun.reflect.annotation.AnnotationType: void <init>(java.lang.Class)>(r0);
        r2 = $r3;
        $z0 = interfaceinvoke r1.<sun.misc.JavaLangAccess: boolean casAnnotationType(java.lang.Class,sun.reflect.annotation.AnnotationType,sun.reflect.annotation.AnnotationType)>(r0, null, r2);
        if $z0 != 0 goto label0;

        r2 = interfaceinvoke r1.<sun.misc.JavaLangAccess: sun.reflect.annotation.AnnotationType getAnnotationType(java.lang.Class)>(r0);
        $z1 = <sun.reflect.annotation.AnnotationType: boolean $assertionsDisabled>;
        if $z1 != 0 goto label0;

        if r2 != null goto label0;

        $r4 = new java.lang.AssertionError;
        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();
        throw $r4;

     label0:
        return r2;
    }

    private void <init>(java.lang.Class)
    {
        sun.reflect.annotation.AnnotationType r0;
        java.lang.Class r1, r6, $r21;
        java.lang.reflect.Method[] r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.reflect.Method r4;
        java.lang.String r5, $r19;
        java.lang.Object r7, $r10, $r32;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r8, $r15;
        sun.reflect.annotation.AnnotationType$1 $r9;
        java.util.HashMap $r11, $r12, $r13;
        java.lang.Class[] $r14, $r30;
        java.lang.StringBuilder $r16, $r17, $r18;
        java.util.Map $r20, $r23, $r25, r31;
        sun.misc.JavaLangAccess r27;
        byte[] $r28;
        sun.reflect.ConstantPool $r29;
        java.lang.annotation.Retention r33;
        java.lang.annotation.RetentionPolicy $r35, $r36;

        r0 := @this: sun.reflect.annotation.AnnotationType;
        r1 := @parameter0: java.lang.Class;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAnnotation()>();
        if $z0 != 0 goto label0;

        $r8 = new java.lang.IllegalArgumentException;
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not an annotation type");
        throw $r8;

     label0:
        $r9 = new sun.reflect.annotation.AnnotationType$1;
        specialinvoke $r9.<sun.reflect.annotation.AnnotationType$1: void <init>(sun.reflect.annotation.AnnotationType,java.lang.Class)>(r0, r1);
        $r10 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r9);
        r2 = (java.lang.reflect.Method[]) $r10;
        $r11 = new java.util.HashMap;
        $i2 = lengthof r2;
        $i3 = $i2 + 1;
        specialinvoke $r11.<java.util.HashMap: void <init>(int,float)>($i3, 1.0F);
        r0.<sun.reflect.annotation.AnnotationType: java.util.Map memberTypes> = $r11;
        $r12 = new java.util.HashMap;
        specialinvoke $r12.<java.util.HashMap: void <init>(int)>(0);
        r0.<sun.reflect.annotation.AnnotationType: java.util.Map memberDefaults> = $r12;
        $r13 = new java.util.HashMap;
        $i4 = lengthof r2;
        $i5 = $i4 + 1;
        specialinvoke $r13.<java.util.HashMap: void <init>(int,float)>($i5, 1.0F);
        r0.<sun.reflect.annotation.AnnotationType: java.util.Map members> = $r13;
        r3 = r2;
        i0 = lengthof r3;
        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r4 = r3[i1];
        $r14 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        $i6 = lengthof $r14;
        if $i6 == 0 goto label2;

        $r15 = new java.lang.IllegalArgumentException;
        $r16 = new java.lang.StringBuilder;
        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has params");
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);
        throw $r15;

     label2:
        r5 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>();
        r6 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
        $r20 = r0.<sun.reflect.annotation.AnnotationType: java.util.Map memberTypes>;
        $r21 = staticinvoke <sun.reflect.annotation.AnnotationType: java.lang.Class invocationHandlerReturnType(java.lang.Class)>(r6);
        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r21);
        $r23 = r0.<sun.reflect.annotation.AnnotationType: java.util.Map members>;
        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r4);
        r7 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object getDefaultValue()>();
        if r7 == null goto label3;

        $r25 = r0.<sun.reflect.annotation.AnnotationType: java.util.Map memberDefaults>;
        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r7);

     label3:
        i1 = i1 + 1;
        goto label1;

     label4:
        if r1 == class "java/lang/annotation/Retention" goto label7;

        if r1 == class "java/lang/annotation/Inherited" goto label7;

        r27 = staticinvoke <sun.misc.SharedSecrets: sun.misc.JavaLangAccess getJavaLangAccess()>();
        $r28 = interfaceinvoke r27.<sun.misc.JavaLangAccess: byte[] getRawClassAnnotations(java.lang.Class)>(r1);
        $r29 = interfaceinvoke r27.<sun.misc.JavaLangAccess: sun.reflect.ConstantPool getConstantPool(java.lang.Class)>(r1);
        $r30 = newarray (java.lang.Class)[2];
        $r30[0] = class "java/lang/annotation/Retention";
        $r30[1] = class "java/lang/annotation/Inherited";
        r31 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.util.Map parseSelectAnnotations(byte[],sun.reflect.ConstantPool,java.lang.Class,java.lang.Class[])>($r28, $r29, r1, $r30);
        $r32 = interfaceinvoke r31.<java.util.Map: java.lang.Object get(java.lang.Object)>(class "java/lang/annotation/Retention");
        r33 = (java.lang.annotation.Retention) $r32;
        if r33 != null goto label5;

        $r35 = <java.lang.annotation.RetentionPolicy: java.lang.annotation.RetentionPolicy CLASS>;
        goto label6;

     label5:
        $r35 = interfaceinvoke r33.<java.lang.annotation.Retention: java.lang.annotation.RetentionPolicy value()>();

     label6:
        r0.<sun.reflect.annotation.AnnotationType: java.lang.annotation.RetentionPolicy retention> = $r35;
        $z1 = interfaceinvoke r31.<java.util.Map: boolean containsKey(java.lang.Object)>(class "java/lang/annotation/Inherited");
        r0.<sun.reflect.annotation.AnnotationType: boolean inherited> = $z1;
        goto label8;

     label7:
        $r36 = <java.lang.annotation.RetentionPolicy: java.lang.annotation.RetentionPolicy RUNTIME>;
        r0.<sun.reflect.annotation.AnnotationType: java.lang.annotation.RetentionPolicy retention> = $r36;
        r0.<sun.reflect.annotation.AnnotationType: boolean inherited> = 0;

     label8:
        return;
    }

    public static java.lang.Class invocationHandlerReturnType(java.lang.Class)
    {
        java.lang.Class r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @parameter0: java.lang.Class;
        $r1 = <java.lang.Byte: java.lang.Class TYPE>;
        if r0 != $r1 goto label0;

        return class "java/lang/Byte";

     label0:
        $r2 = <java.lang.Character: java.lang.Class TYPE>;
        if r0 != $r2 goto label1;

        return class "java/lang/Character";

     label1:
        $r3 = <java.lang.Double: java.lang.Class TYPE>;
        if r0 != $r3 goto label2;

        return class "java/lang/Double";

     label2:
        $r4 = <java.lang.Float: java.lang.Class TYPE>;
        if r0 != $r4 goto label3;

        return class "java/lang/Float";

     label3:
        $r5 = <java.lang.Integer: java.lang.Class TYPE>;
        if r0 != $r5 goto label4;

        return class "java/lang/Integer";

     label4:
        $r6 = <java.lang.Long: java.lang.Class TYPE>;
        if r0 != $r6 goto label5;

        return class "java/lang/Long";

     label5:
        $r7 = <java.lang.Short: java.lang.Class TYPE>;
        if r0 != $r7 goto label6;

        return class "java/lang/Short";

     label6:
        $r8 = <java.lang.Boolean: java.lang.Class TYPE>;
        if r0 != $r8 goto label7;

        return class "java/lang/Boolean";

     label7:
        return r0;
    }

    public java.util.Map memberTypes()
    {
        sun.reflect.annotation.AnnotationType r0;
        java.util.Map $r1;

        r0 := @this: sun.reflect.annotation.AnnotationType;
        $r1 = r0.<sun.reflect.annotation.AnnotationType: java.util.Map memberTypes>;
        return $r1;
    }

    public java.util.Map members()
    {
        sun.reflect.annotation.AnnotationType r0;
        java.util.Map $r1;

        r0 := @this: sun.reflect.annotation.AnnotationType;
        $r1 = r0.<sun.reflect.annotation.AnnotationType: java.util.Map members>;
        return $r1;
    }

    public java.util.Map memberDefaults()
    {
        sun.reflect.annotation.AnnotationType r0;
        java.util.Map $r1;

        r0 := @this: sun.reflect.annotation.AnnotationType;
        $r1 = r0.<sun.reflect.annotation.AnnotationType: java.util.Map memberDefaults>;
        return $r1;
    }

    public java.lang.annotation.RetentionPolicy retention()
    {
        sun.reflect.annotation.AnnotationType r0;
        java.lang.annotation.RetentionPolicy $r1;

        r0 := @this: sun.reflect.annotation.AnnotationType;
        $r1 = r0.<sun.reflect.annotation.AnnotationType: java.lang.annotation.RetentionPolicy retention>;
        return $r1;
    }

    public boolean isInherited()
    {
        sun.reflect.annotation.AnnotationType r0;
        boolean $z0;

        r0 := @this: sun.reflect.annotation.AnnotationType;
        $z0 = r0.<sun.reflect.annotation.AnnotationType: boolean inherited>;
        return $z0;
    }

    public java.lang.String toString()
    {
        sun.reflect.annotation.AnnotationType r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6, $r8, $r9, $r10, $r12, $r13, $r14, $r15;
        java.util.Map $r3, $r7;
        java.lang.annotation.RetentionPolicy $r11;
        boolean $z0;
        java.lang.String $r16;

        r0 := @this: sun.reflect.annotation.AnnotationType;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Annotation Type:\n   Member types: ");
        $r3 = r0.<sun.reflect.annotation.AnnotationType: java.util.Map memberTypes>;
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   Member defaults: ");
        $r7 = r0.<sun.reflect.annotation.AnnotationType: java.util.Map memberDefaults>;
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   Retention policy: ");
        $r11 = r0.<sun.reflect.annotation.AnnotationType: java.lang.annotation.RetentionPolicy retention>;
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   Inherited: ");
        $z0 = r0.<sun.reflect.annotation.AnnotationType: boolean inherited>;
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r16;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/reflect/annotation/AnnotationType";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.reflect.annotation.AnnotationType: boolean $assertionsDisabled> = $z1;
        return;
    }
}
