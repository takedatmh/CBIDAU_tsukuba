class sun.nio.ch.NativeThreadSet extends java.lang.Object
{
    private long[] elts;
    private int used;
    private boolean waitingToEmpty;
    static final boolean $assertionsDisabled;

    void <init>(int)
    {
        sun.nio.ch.NativeThreadSet r0;
        int i0;
        long[] $r1;

        r0 := @this: sun.nio.ch.NativeThreadSet;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.NativeThreadSet: int used> = 0;
        $r1 = newarray (long)[i0];
        r0.<sun.nio.ch.NativeThreadSet: long[] elts> = $r1;
        return;
    }

    int add()
    {
        sun.nio.ch.NativeThreadSet r0, r1;
        long l0, $l9;
        int i1, i2, i3, $i5, $i6, i7, $i8, $i11, $i12;
        long[] r2, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.Throwable r3, $r13;
        byte $b4, $b10, $b14;
        boolean $z0;
        java.lang.AssertionError $r12;

        r0 := @this: sun.nio.ch.NativeThreadSet;
        l0 = staticinvoke <sun.nio.ch.NativeThread: long current()>();
        $b4 = l0 cmp 0L;
        if $b4 != 0 goto label0;

        l0 = -1L;

     label0:
        r1 = r0;
        entermonitor r0;

     label1:
        i1 = 0;
        $i5 = r0.<sun.nio.ch.NativeThreadSet: int used>;
        $r5 = r0.<sun.nio.ch.NativeThreadSet: long[] elts>;
        $i6 = lengthof $r5;
        if $i5 < $i6 goto label2;

        $r6 = r0.<sun.nio.ch.NativeThreadSet: long[] elts>;
        i2 = lengthof $r6;
        i3 = i2 * 2;
        r2 = newarray (long)[i3];
        $r7 = r0.<sun.nio.ch.NativeThreadSet: long[] elts>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r2, 0, i2);
        r0.<sun.nio.ch.NativeThreadSet: long[] elts> = r2;
        i1 = i2;

     label2:
        i7 = i1;

     label3:
        $r8 = r0.<sun.nio.ch.NativeThreadSet: long[] elts>;
        $i8 = lengthof $r8;
        if i7 >= $i8 goto label6;

        $r9 = r0.<sun.nio.ch.NativeThreadSet: long[] elts>;
        $l9 = $r9[i7];
        $b10 = $l9 cmp 0L;
        if $b10 != 0 goto label5;

        $r10 = r0.<sun.nio.ch.NativeThreadSet: long[] elts>;
        $r10[i7] = l0;
        $i11 = r0.<sun.nio.ch.NativeThreadSet: int used>;
        $i12 = $i11 + 1;
        r0.<sun.nio.ch.NativeThreadSet: int used> = $i12;
        exitmonitor r1;

     label4:
        return i7;

     label5:
        i7 = i7 + 1;
        goto label3;

     label6:
        $z0 = <sun.nio.ch.NativeThreadSet: boolean $assertionsDisabled>;
        if $z0 != 0 goto label7;

        $r12 = new java.lang.AssertionError;
        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();
        throw $r12;

     label7:
        $b14 = -1;
        exitmonitor r1;

     label8:
        return $b14;

     label9:
        $r13 := @caughtexception;

     label10:
        r3 = $r13;
        exitmonitor r1;

     label11:
        throw r3;

        catch java.lang.Throwable from label1 to label4 with label9;
        catch java.lang.Throwable from label5 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    void remove(int)
    {
        sun.nio.ch.NativeThreadSet r0, r2;
        int i0, $i1, $i2, $i3;
        java.lang.Throwable r3, $r6;
        long[] $r4;
        boolean $z0;

        r0 := @this: sun.nio.ch.NativeThreadSet;
        i0 := @parameter0: int;
        r2 = r0;
        entermonitor r0;

     label0:
        $r4 = r0.<sun.nio.ch.NativeThreadSet: long[] elts>;
        $r4[i0] = 0L;
        $i1 = r0.<sun.nio.ch.NativeThreadSet: int used>;
        $i2 = $i1 - 1;
        r0.<sun.nio.ch.NativeThreadSet: int used> = $i2;
        $i3 = r0.<sun.nio.ch.NativeThreadSet: int used>;
        if $i3 != 0 goto label1;

        $z0 = r0.<sun.nio.ch.NativeThreadSet: boolean waitingToEmpty>;
        if $z0 == 0 goto label1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label1:
        exitmonitor r2;

     label2:
        goto label6;

     label3:
        $r6 := @caughtexception;

     label4:
        r3 = $r6;
        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void signalAndWait()
    {
        sun.nio.ch.NativeThreadSet r0, r2;
        int i0, i1, i2, $i6;
        long l3;
        java.lang.Throwable r3, $r9;
        long[] $r4, $r5;
        byte $b4, $b5;
        boolean z0;
        java.lang.InterruptedException $r6, r7;
        java.lang.Thread $r8;

        r0 := @this: sun.nio.ch.NativeThreadSet;
        r2 = r0;
        entermonitor r0;

     label0:
        i0 = r0.<sun.nio.ch.NativeThreadSet: int used>;
        $r4 = r0.<sun.nio.ch.NativeThreadSet: long[] elts>;
        i1 = lengthof $r4;
        i2 = 0;

     label1:
        if i2 >= i1 goto label5;

        $r5 = r0.<sun.nio.ch.NativeThreadSet: long[] elts>;
        l3 = $r5[i2];
        $b4 = l3 cmp 0L;
        if $b4 != 0 goto label2;

        goto label4;

     label2:
        $b5 = l3 cmp -1L;
        if $b5 == 0 goto label3;

        staticinvoke <sun.nio.ch.NativeThread: void signal(long)>(l3);

     label3:
        i0 = i0 + -1;
        if i0 != 0 goto label4;

        goto label5;

     label4:
        i2 = i2 + 1;
        goto label1;

     label5:
        r0.<sun.nio.ch.NativeThreadSet: boolean waitingToEmpty> = 1;
        z0 = 0;

     label6:
        $i6 = r0.<sun.nio.ch.NativeThreadSet: int used>;
        if $i6 <= 0 goto label10;

     label7:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label8:
        goto label6;

     label9:
        $r6 := @caughtexception;
        r7 = $r6;
        z0 = 1;
        goto label6;

     label10:
        if z0 == 0 goto label11;

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        virtualinvoke $r8.<java.lang.Thread: void interrupt()>();

     label11:
        exitmonitor r2;

     label12:
        goto label16;

     label13:
        $r9 := @caughtexception;

     label14:
        r3 = $r9;
        exitmonitor r2;

     label15:
        throw r3;

     label16:
        return;

        catch java.lang.InterruptedException from label7 to label8 with label9;
        catch java.lang.Throwable from label0 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/nio/ch/NativeThreadSet";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.ch.NativeThreadSet: boolean $assertionsDisabled> = $z1;
        return;
    }
}
