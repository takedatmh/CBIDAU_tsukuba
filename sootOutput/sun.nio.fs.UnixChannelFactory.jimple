class sun.nio.fs.UnixChannelFactory extends java.lang.Object
{
    private static final sun.misc.JavaIOFileDescriptorAccess fdAccess;

    protected void <init>()
    {
        sun.nio.fs.UnixChannelFactory r0;

        r0 := @this: sun.nio.fs.UnixChannelFactory;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    static java.nio.channels.FileChannel newFileChannel(int, java.lang.String, boolean, boolean)
    {
        int i0;
        java.lang.String r0;
        boolean z0, z1;
        java.io.FileDescriptor $r1, r2;
        sun.misc.JavaIOFileDescriptorAccess $r3;
        java.nio.channels.FileChannel $r4;

        i0 := @parameter0: int;
        r0 := @parameter1: java.lang.String;
        z0 := @parameter2: boolean;
        z1 := @parameter3: boolean;
        $r1 = new java.io.FileDescriptor;
        specialinvoke $r1.<java.io.FileDescriptor: void <init>()>();
        r2 = $r1;
        $r3 = <sun.nio.fs.UnixChannelFactory: sun.misc.JavaIOFileDescriptorAccess fdAccess>;
        interfaceinvoke $r3.<sun.misc.JavaIOFileDescriptorAccess: void set(java.io.FileDescriptor,int)>(r2, i0);
        $r4 = staticinvoke <sun.nio.ch.FileChannelImpl: java.nio.channels.FileChannel open(java.io.FileDescriptor,java.lang.String,boolean,boolean,java.lang.Object)>(r2, r0, z0, z1, null);
        return $r4;
    }

    static java.nio.channels.FileChannel newFileChannel(int, sun.nio.fs.UnixPath, java.lang.String, java.util.Set, int) throws sun.nio.fs.UnixException
    {
        int i0, i1;
        sun.nio.fs.UnixPath r0;
        java.lang.String r1, $r7;
        java.util.Set r2;
        sun.nio.fs.UnixChannelFactory$Flags r3;
        java.io.FileDescriptor r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.IllegalArgumentException $r5, $r6;
        java.nio.channels.FileChannel $r8;

        i0 := @parameter0: int;
        r0 := @parameter1: sun.nio.fs.UnixPath;
        r1 := @parameter2: java.lang.String;
        r2 := @parameter3: java.util.Set;
        i1 := @parameter4: int;
        r3 = staticinvoke <sun.nio.fs.UnixChannelFactory$Flags: sun.nio.fs.UnixChannelFactory$Flags toFlags(java.util.Set)>(r2);
        $z0 = r3.<sun.nio.fs.UnixChannelFactory$Flags: boolean read>;
        if $z0 != 0 goto label1;

        $z1 = r3.<sun.nio.fs.UnixChannelFactory$Flags: boolean write>;
        if $z1 != 0 goto label1;

        $z2 = r3.<sun.nio.fs.UnixChannelFactory$Flags: boolean append>;
        if $z2 == 0 goto label0;

        r3.<sun.nio.fs.UnixChannelFactory$Flags: boolean write> = 1;
        goto label1;

     label0:
        r3.<sun.nio.fs.UnixChannelFactory$Flags: boolean read> = 1;

     label1:
        $z3 = r3.<sun.nio.fs.UnixChannelFactory$Flags: boolean read>;
        if $z3 == 0 goto label2;

        $z4 = r3.<sun.nio.fs.UnixChannelFactory$Flags: boolean append>;
        if $z4 == 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("READ + APPEND not allowed");
        throw $r5;

     label2:
        $z5 = r3.<sun.nio.fs.UnixChannelFactory$Flags: boolean append>;
        if $z5 == 0 goto label3;

        $z6 = r3.<sun.nio.fs.UnixChannelFactory$Flags: boolean truncateExisting>;
        if $z6 == 0 goto label3;

        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("APPEND + TRUNCATE_EXISTING not allowed");
        throw $r6;

     label3:
        r4 = staticinvoke <sun.nio.fs.UnixChannelFactory: java.io.FileDescriptor open(int,sun.nio.fs.UnixPath,java.lang.String,sun.nio.fs.UnixChannelFactory$Flags,int)>(i0, r0, r1, r3, i1);
        $r7 = virtualinvoke r0.<sun.nio.fs.UnixPath: java.lang.String toString()>();
        $z7 = r3.<sun.nio.fs.UnixChannelFactory$Flags: boolean read>;
        $z8 = r3.<sun.nio.fs.UnixChannelFactory$Flags: boolean write>;
        $z9 = r3.<sun.nio.fs.UnixChannelFactory$Flags: boolean append>;
        $r8 = staticinvoke <sun.nio.ch.FileChannelImpl: java.nio.channels.FileChannel open(java.io.FileDescriptor,java.lang.String,boolean,boolean,boolean,java.lang.Object)>(r4, $r7, $z7, $z8, $z9, null);
        return $r8;
    }

    static java.nio.channels.FileChannel newFileChannel(sun.nio.fs.UnixPath, java.util.Set, int) throws sun.nio.fs.UnixException
    {
        sun.nio.fs.UnixPath r0;
        java.util.Set r1;
        int i0;
        java.nio.channels.FileChannel $r2;

        r0 := @parameter0: sun.nio.fs.UnixPath;
        r1 := @parameter1: java.util.Set;
        i0 := @parameter2: int;
        $r2 = staticinvoke <sun.nio.fs.UnixChannelFactory: java.nio.channels.FileChannel newFileChannel(int,sun.nio.fs.UnixPath,java.lang.String,java.util.Set,int)>(-1, r0, null, r1, i0);
        return $r2;
    }

    static java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(sun.nio.fs.UnixPath, java.util.Set, int, sun.nio.ch.ThreadPool) throws sun.nio.fs.UnixException
    {
        sun.nio.fs.UnixPath r0;
        java.util.Set r1;
        int i0;
        sun.nio.ch.ThreadPool r2;
        sun.nio.fs.UnixChannelFactory$Flags r3;
        java.io.FileDescriptor r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.UnsupportedOperationException $r5;
        java.nio.channels.AsynchronousFileChannel $r6;

        r0 := @parameter0: sun.nio.fs.UnixPath;
        r1 := @parameter1: java.util.Set;
        i0 := @parameter2: int;
        r2 := @parameter3: sun.nio.ch.ThreadPool;
        r3 = staticinvoke <sun.nio.fs.UnixChannelFactory$Flags: sun.nio.fs.UnixChannelFactory$Flags toFlags(java.util.Set)>(r1);
        $z0 = r3.<sun.nio.fs.UnixChannelFactory$Flags: boolean read>;
        if $z0 != 0 goto label0;

        $z1 = r3.<sun.nio.fs.UnixChannelFactory$Flags: boolean write>;
        if $z1 != 0 goto label0;

        r3.<sun.nio.fs.UnixChannelFactory$Flags: boolean read> = 1;

     label0:
        $z2 = r3.<sun.nio.fs.UnixChannelFactory$Flags: boolean append>;
        if $z2 == 0 goto label1;

        $r5 = new java.lang.UnsupportedOperationException;
        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("APPEND not allowed");
        throw $r5;

     label1:
        r4 = staticinvoke <sun.nio.fs.UnixChannelFactory: java.io.FileDescriptor open(int,sun.nio.fs.UnixPath,java.lang.String,sun.nio.fs.UnixChannelFactory$Flags,int)>(-1, r0, null, r3, i0);
        $z3 = r3.<sun.nio.fs.UnixChannelFactory$Flags: boolean read>;
        $z4 = r3.<sun.nio.fs.UnixChannelFactory$Flags: boolean write>;
        $r6 = staticinvoke <sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.nio.channels.AsynchronousFileChannel open(java.io.FileDescriptor,boolean,boolean,sun.nio.ch.ThreadPool)>(r4, $z3, $z4, r2);
        return $r6;
    }

    protected static java.io.FileDescriptor open(int, sun.nio.fs.UnixPath, java.lang.String, sun.nio.fs.UnixChannelFactory$Flags, int) throws sun.nio.fs.UnixException
    {
        int i0, i1, i2, i3, $i5, $i6, $i8, $i9, $i10, $i12, $i13, $i14;
        sun.nio.fs.UnixPath r0;
        java.lang.String r1, $r15, $r18;
        sun.nio.fs.UnixChannelFactory$Flags r2;
        byte[] r3, $r11, $r19;
        sun.nio.fs.UnixException r4, r5, $r6, $r8, $r9, $r12, $r13, $r20, r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22;
        byte $b4, $b7, $b11;
        sun.nio.fs.UnixFileAttributes $r7;
        java.lang.SecurityManager r10;
        java.lang.StringBuilder $r14, $r16, $r17;
        java.io.FileDescriptor $r22, r23;
        sun.misc.JavaIOFileDescriptorAccess $r24;

        i0 := @parameter0: int;
        r0 := @parameter1: sun.nio.fs.UnixPath;
        r1 := @parameter2: java.lang.String;
        r2 := @parameter3: sun.nio.fs.UnixChannelFactory$Flags;
        i1 := @parameter4: int;
        $z0 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean read>;
        if $z0 == 0 goto label0;

        $z1 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean write>;
        if $z1 == 0 goto label0;

        i2 = 2;
        goto label3;

     label0:
        $z2 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean write>;
        if $z2 == 0 goto label1;

        $b4 = 1;
        goto label2;

     label1:
        $b4 = 0;

     label2:
        i2 = $b4;

     label3:
        $z3 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean write>;
        if $z3 == 0 goto label9;

        $z4 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean truncateExisting>;
        if $z4 == 0 goto label4;

        i2 = i2 | 1024;

     label4:
        $z5 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean append>;
        if $z5 == 0 goto label5;

        i2 = i2 | 8;

     label5:
        $z6 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean createNew>;
        if $z6 == 0 goto label8;

        r3 = virtualinvoke r0.<sun.nio.fs.UnixPath: byte[] asByteArray()>();
        $i5 = lengthof r3;
        $i6 = $i5 - 1;
        $b7 = r3[$i6];
        if $b7 != 46 goto label7;

        $i8 = lengthof r3;
        if $i8 == 1 goto label6;

        $i9 = lengthof r3;
        $i10 = $i9 - 2;
        $b11 = r3[$i10];
        if $b11 != 47 goto label7;

     label6:
        $r6 = new sun.nio.fs.UnixException;
        specialinvoke $r6.<sun.nio.fs.UnixException: void <init>(int)>(17);
        throw $r6;

     label7:
        i2 = i2 | 2560;
        goto label9;

     label8:
        $z7 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean create>;
        if $z7 == 0 goto label9;

        i2 = i2 | 512;

     label9:
        z8 = 1;
        $z9 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean createNew>;
        if $z9 != 0 goto label16;

        $z10 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean noFollowLinks>;
        if $z10 != 0 goto label10;

        $z11 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean deleteOnClose>;
        if $z11 == 0 goto label16;

     label10:
        $z12 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean deleteOnClose>;
        if $z12 == 0 goto label15;

        $z13 = staticinvoke <sun.nio.fs.UnixNativeDispatcher: boolean supportsNoFollowLinks()>();
        if $z13 != 0 goto label15;

     label11:
        $r7 = staticinvoke <sun.nio.fs.UnixFileAttributes: sun.nio.fs.UnixFileAttributes get(sun.nio.fs.UnixPath,boolean)>(r0, 0);
        $z14 = virtualinvoke $r7.<sun.nio.fs.UnixFileAttributes: boolean isSymbolicLink()>();
        if $z14 == 0 goto label12;

        $r8 = new sun.nio.fs.UnixException;
        specialinvoke $r8.<sun.nio.fs.UnixException: void <init>(java.lang.String)>("DELETE_ON_CLOSE specified and file is a symbolic link");
        throw $r8;

     label12:
        goto label15;

     label13:
        $r9 := @caughtexception;
        r4 = $r9;
        $z15 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean create>;
        if $z15 == 0 goto label14;

        $i12 = virtualinvoke r4.<sun.nio.fs.UnixException: int errno()>();
        if $i12 == 2 goto label15;

     label14:
        throw r4;

     label15:
        z8 = 0;
        i2 = i2 | 256;

     label16:
        $z16 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean dsync>;
        if $z16 == 0 goto label17;

        i2 = i2 | 4194304;

     label17:
        $z17 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean sync>;
        if $z17 == 0 goto label18;

        i2 = i2 | 128;

     label18:
        r10 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r10 == null goto label22;

        if r1 != null goto label19;

        r1 = virtualinvoke r0.<sun.nio.fs.UnixPath: java.lang.String getPathForPermissionCheck()>();

     label19:
        $z18 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean read>;
        if $z18 == 0 goto label20;

        virtualinvoke r10.<java.lang.SecurityManager: void checkRead(java.lang.String)>(r1);

     label20:
        $z19 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean write>;
        if $z19 == 0 goto label21;

        virtualinvoke r10.<java.lang.SecurityManager: void checkWrite(java.lang.String)>(r1);

     label21:
        $z20 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean deleteOnClose>;
        if $z20 == 0 goto label22;

        virtualinvoke r10.<java.lang.SecurityManager: void checkDelete(java.lang.String)>(r1);

     label22:
        if i0 < 0 goto label23;

        $r11 = virtualinvoke r0.<sun.nio.fs.UnixPath: byte[] asByteArray()>();
        i3 = staticinvoke <sun.nio.fs.UnixNativeDispatcher: int openat(int,byte[],int,int)>(i0, $r11, i2, i1);
        goto label24;

     label23:
        i3 = staticinvoke <sun.nio.fs.UnixNativeDispatcher: int open(sun.nio.fs.UnixPath,int,int)>(r0, i2, i1);

     label24:
        goto label28;

     label25:
        $r12 := @caughtexception;
        r5 = $r12;
        $z21 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean createNew>;
        if $z21 == 0 goto label26;

        $i13 = virtualinvoke r5.<sun.nio.fs.UnixException: int errno()>();
        if $i13 != 21 goto label26;

        virtualinvoke r5.<sun.nio.fs.UnixException: void setError(int)>(17);

     label26:
        if z8 != 0 goto label27;

        $i14 = virtualinvoke r5.<sun.nio.fs.UnixException: int errno()>();
        if $i14 != 62 goto label27;

        $r13 = new sun.nio.fs.UnixException;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke r5.<sun.nio.fs.UnixException: java.lang.String getMessage()>();
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (NOFOLLOW_LINKS specified)");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r13.<sun.nio.fs.UnixException: void <init>(java.lang.String)>($r18);
        r5 = $r13;

     label27:
        throw r5;

     label28:
        $z22 = r2.<sun.nio.fs.UnixChannelFactory$Flags: boolean deleteOnClose>;
        if $z22 == 0 goto label33;

     label29:
        if i0 < 0 goto label30;

        $r19 = virtualinvoke r0.<sun.nio.fs.UnixPath: byte[] asByteArray()>();
        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void unlinkat(int,byte[],int)>(i0, $r19, 0);
        goto label31;

     label30:
        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void unlink(sun.nio.fs.UnixPath)>(r0);

     label31:
        goto label33;

     label32:
        $r20 := @caughtexception;
        r21 = $r20;

     label33:
        $r22 = new java.io.FileDescriptor;
        specialinvoke $r22.<java.io.FileDescriptor: void <init>()>();
        r23 = $r22;
        $r24 = <sun.nio.fs.UnixChannelFactory: sun.misc.JavaIOFileDescriptorAccess fdAccess>;
        interfaceinvoke $r24.<sun.misc.JavaIOFileDescriptorAccess: void set(java.io.FileDescriptor,int)>(r23, i3);
        return r23;

        catch sun.nio.fs.UnixException from label11 to label12 with label13;
        catch sun.nio.fs.UnixException from label22 to label24 with label25;
        catch sun.nio.fs.UnixException from label29 to label31 with label32;
    }

    static void <clinit>()
    {
        sun.misc.JavaIOFileDescriptorAccess $r0;

        $r0 = staticinvoke <sun.misc.SharedSecrets: sun.misc.JavaIOFileDescriptorAccess getJavaIOFileDescriptorAccess()>();
        <sun.nio.fs.UnixChannelFactory: sun.misc.JavaIOFileDescriptorAccess fdAccess> = $r0;
        return;
    }
}
