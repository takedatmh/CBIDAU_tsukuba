public final class java.nio.file.DirectoryIteratorException extends java.util.ConcurrentModificationException
{
    private static final long serialVersionUID;

    public void <init>(java.io.IOException)
    {
        java.nio.file.DirectoryIteratorException r0;
        java.io.IOException r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;

        r0 := @this: java.nio.file.DirectoryIteratorException;
        r1 := @parameter0: java.io.IOException;
        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);
        $r3 = (java.lang.Throwable) $r2;
        specialinvoke r0.<java.util.ConcurrentModificationException: void <init>(java.lang.Throwable)>($r3);
        return;
    }

    public java.io.IOException getCause()
    {
        java.nio.file.DirectoryIteratorException r0;
        java.lang.Throwable $r1;
        java.io.IOException $r2;

        r0 := @this: java.nio.file.DirectoryIteratorException;
        $r1 = specialinvoke r0.<java.util.ConcurrentModificationException: java.lang.Throwable getCause()>();
        $r2 = (java.io.IOException) $r1;
        return $r2;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.nio.file.DirectoryIteratorException r0;
        java.io.ObjectInputStream r1;
        java.lang.Throwable r2;
        boolean $z0;
        java.io.InvalidObjectException $r3;

        r0 := @this: java.nio.file.DirectoryIteratorException;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        r2 = specialinvoke r0.<java.util.ConcurrentModificationException: java.lang.Throwable getCause()>();
        $z0 = r2 instanceof java.io.IOException;
        if $z0 != 0 goto label0;

        $r3 = new java.io.InvalidObjectException;
        specialinvoke $r3.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Cause must be an IOException");
        throw $r3;

     label0:
        return;
    }

    public volatile java.lang.Throwable getCause()
    {
        java.nio.file.DirectoryIteratorException r0;
        java.io.IOException $r1;

        r0 := @this: java.nio.file.DirectoryIteratorException;
        $r1 = virtualinvoke r0.<java.nio.file.DirectoryIteratorException: java.io.IOException getCause()>();
        return $r1;
    }
}
