public abstract class org.apache.catalina.valves.ValveBase extends org.apache.catalina.util.LifecycleMBeanBase implements org.apache.catalina.Contained, org.apache.catalina.Valve
{
    protected boolean asyncSupported;
    protected org.apache.catalina.Container container;
    protected org.apache.juli.logging.Log containerLog;
    protected static final java.lang.String info;
    protected org.apache.catalina.Valve next;
    protected static final org.apache.tomcat.util.res.StringManager sm;

    static void <clinit>()
    {
        org.apache.tomcat.util.res.StringManager $r0;

        $r0 = staticinvoke <org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>("org.apache.catalina.valves");
        <org.apache.catalina.valves.ValveBase: org.apache.tomcat.util.res.StringManager sm> = $r0;
        return;
    }

    public void <init>()
    {
        org.apache.catalina.valves.ValveBase r0;

        r0 := @this: org.apache.catalina.valves.ValveBase;
        specialinvoke r0.<org.apache.catalina.valves.ValveBase: void <init>(boolean)>(0);
        return;
    }

    public void <init>(boolean)
    {
        org.apache.catalina.valves.ValveBase r0;
        boolean z0;

        r0 := @this: org.apache.catalina.valves.ValveBase;
        z0 := @parameter0: boolean;
        specialinvoke r0.<org.apache.catalina.util.LifecycleMBeanBase: void <init>()>();
        r0.<org.apache.catalina.valves.ValveBase: org.apache.catalina.Container container> = null;
        r0.<org.apache.catalina.valves.ValveBase: org.apache.juli.logging.Log containerLog> = null;
        r0.<org.apache.catalina.valves.ValveBase: org.apache.catalina.Valve next> = null;
        r0.<org.apache.catalina.valves.ValveBase: boolean asyncSupported> = z0;
        return;
    }

    public org.apache.catalina.Container getContainer()
    {
        org.apache.catalina.valves.ValveBase r0;
        org.apache.catalina.Container $r1;

        r0 := @this: org.apache.catalina.valves.ValveBase;
        $r1 = r0.<org.apache.catalina.valves.ValveBase: org.apache.catalina.Container container>;
        return $r1;
    }

    public boolean isAsyncSupported()
    {
        org.apache.catalina.valves.ValveBase r0;
        boolean $z0;

        r0 := @this: org.apache.catalina.valves.ValveBase;
        $z0 = r0.<org.apache.catalina.valves.ValveBase: boolean asyncSupported>;
        return $z0;
    }

    public void setAsyncSupported(boolean)
    {
        org.apache.catalina.valves.ValveBase r0;
        boolean z0;

        r0 := @this: org.apache.catalina.valves.ValveBase;
        z0 := @parameter0: boolean;
        r0.<org.apache.catalina.valves.ValveBase: boolean asyncSupported> = z0;
        return;
    }

    public void setContainer(org.apache.catalina.Container)
    {
        org.apache.catalina.valves.ValveBase r0;
        org.apache.catalina.Container r1;

        r0 := @this: org.apache.catalina.valves.ValveBase;
        r1 := @parameter0: org.apache.catalina.Container;
        r0.<org.apache.catalina.valves.ValveBase: org.apache.catalina.Container container> = r1;
        return;
    }

    public java.lang.String getInfo()
    {
        org.apache.catalina.valves.ValveBase r0;

        r0 := @this: org.apache.catalina.valves.ValveBase;
        return "org.apache.catalina.core.ValveBase/1.0";
    }

    public org.apache.catalina.Valve getNext()
    {
        org.apache.catalina.valves.ValveBase r0;
        org.apache.catalina.Valve $r1;

        r0 := @this: org.apache.catalina.valves.ValveBase;
        $r1 = r0.<org.apache.catalina.valves.ValveBase: org.apache.catalina.Valve next>;
        return $r1;
    }

    public void setNext(org.apache.catalina.Valve)
    {
        org.apache.catalina.valves.ValveBase r0;
        org.apache.catalina.Valve r1;

        r0 := @this: org.apache.catalina.valves.ValveBase;
        r1 := @parameter0: org.apache.catalina.Valve;
        r0.<org.apache.catalina.valves.ValveBase: org.apache.catalina.Valve next> = r1;
        return;
    }

    public void backgroundProcess()
    {
        org.apache.catalina.valves.ValveBase r0;

        r0 := @this: org.apache.catalina.valves.ValveBase;
        return;
    }

    public abstract void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException;

    public void event(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, org.apache.catalina.comet.CometEvent) throws java.io.IOException, javax.servlet.ServletException
    {
        org.apache.catalina.valves.ValveBase r0;
        org.apache.catalina.connector.Request r1;
        org.apache.catalina.connector.Response r2;
        org.apache.catalina.comet.CometEvent r3;
        org.apache.catalina.Valve $r4;

        r0 := @this: org.apache.catalina.valves.ValveBase;
        r1 := @parameter0: org.apache.catalina.connector.Request;
        r2 := @parameter1: org.apache.catalina.connector.Response;
        r3 := @parameter2: org.apache.catalina.comet.CometEvent;
        $r4 = virtualinvoke r0.<org.apache.catalina.valves.ValveBase: org.apache.catalina.Valve getNext()>();
        interfaceinvoke $r4.<org.apache.catalina.Valve: void event(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,org.apache.catalina.comet.CometEvent)>(r1, r2, r3);
        return;
    }

    protected void initInternal() throws org.apache.catalina.LifecycleException
    {
        org.apache.catalina.valves.ValveBase r0;
        org.apache.catalina.Container $r1;
        org.apache.juli.logging.Log $r2;

        r0 := @this: org.apache.catalina.valves.ValveBase;
        specialinvoke r0.<org.apache.catalina.util.LifecycleMBeanBase: void initInternal()>();
        $r1 = virtualinvoke r0.<org.apache.catalina.valves.ValveBase: org.apache.catalina.Container getContainer()>();
        $r2 = interfaceinvoke $r1.<org.apache.catalina.Container: org.apache.juli.logging.Log getLogger()>();
        r0.<org.apache.catalina.valves.ValveBase: org.apache.juli.logging.Log containerLog> = $r2;
        return;
    }

    protected synchronized void startInternal() throws org.apache.catalina.LifecycleException
    {
        org.apache.catalina.valves.ValveBase r0;
        org.apache.catalina.LifecycleState $r1;

        r0 := @this: org.apache.catalina.valves.ValveBase;
        $r1 = <org.apache.catalina.LifecycleState: org.apache.catalina.LifecycleState STARTING>;
        virtualinvoke r0.<org.apache.catalina.valves.ValveBase: void setState(org.apache.catalina.LifecycleState)>($r1);
        return;
    }

    protected synchronized void stopInternal() throws org.apache.catalina.LifecycleException
    {
        org.apache.catalina.valves.ValveBase r0;
        org.apache.catalina.LifecycleState $r1;

        r0 := @this: org.apache.catalina.valves.ValveBase;
        $r1 = <org.apache.catalina.LifecycleState: org.apache.catalina.LifecycleState STOPPING>;
        virtualinvoke r0.<org.apache.catalina.valves.ValveBase: void setState(org.apache.catalina.LifecycleState)>($r1);
        return;
    }

    public java.lang.String toString()
    {
        org.apache.catalina.valves.ValveBase r0;
        java.lang.StringBuilder $r1, r2;
        java.lang.Class $r3;
        java.lang.String $r4, $r9, $r12;
        org.apache.catalina.Container $r6, $r8;

        r0 := @this: org.apache.catalina.valves.ValveBase;
        $r1 = new java.lang.StringBuilder;
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);
        r2 = $r1;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
        $r6 = r0.<org.apache.catalina.valves.ValveBase: org.apache.catalina.Container container>;
        if $r6 != null goto label0;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Container is null");
        goto label1;

     label0:
        $r8 = r0.<org.apache.catalina.valves.ValveBase: org.apache.catalina.Container container>;
        $r9 = interfaceinvoke $r8.<org.apache.catalina.Container: java.lang.String getName()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

     label1:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
        $r12 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r12;
    }

    public java.lang.String getObjectNameKeyProperties()
    {
        org.apache.catalina.valves.ValveBase r0;
        java.lang.StringBuilder $r1, r2;
        org.apache.catalina.Container r3;
        int i0, i1, i2, i3, $i4;
        org.apache.catalina.Pipeline r4;
        org.apache.catalina.Valve[] r5, $r9;
        org.apache.catalina.Valve r6;
        java.lang.String $r7, r15, $r18;
        java.lang.Class $r10, $r11, $r14;

        r0 := @this: org.apache.catalina.valves.ValveBase;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("type=Valve");
        r2 = $r1;
        r3 = virtualinvoke r0.<org.apache.catalina.valves.ValveBase: org.apache.catalina.Container getContainer()>();
        $r7 = staticinvoke <org.apache.catalina.mbeans.MBeanUtils: java.lang.String getContainerKeyProperties(org.apache.catalina.Container)>(r3);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        i0 = 0;
        r4 = interfaceinvoke r3.<org.apache.catalina.Container: org.apache.catalina.Pipeline getPipeline()>();
        if r4 == null goto label5;

        $r9 = interfaceinvoke r4.<org.apache.catalina.Pipeline: org.apache.catalina.Valve[] getValves()>();
        r5 = $r9;
        i1 = lengthof $r9;
        i2 = 0;
        goto label4;

     label0:
        r6 = r5[i2];
        if r6 != null goto label1;

        goto label3;

     label1:
        if r6 != r0 goto label2;

        goto label5;

     label2:
        $r10 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();
        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        if $r10 != $r11 goto label3;

        i0 = i0 + 1;

     label3:
        i2 = i2 + 1;

     label4:
        if i2 < i1 goto label0;

     label5:
        if i0 <= 0 goto label6;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",seq=");
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

     label6:
        $r14 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();
        i3 = virtualinvoke r15.<java.lang.String: int lastIndexOf(int)>(46);
        if i3 < 0 goto label7;

        $i4 = i3 + 1;
        r15 = virtualinvoke r15.<java.lang.String: java.lang.String substring(int)>($i4);

     label7:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",name=");
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);
        $r18 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r18;
    }

    public java.lang.String getDomainInternal()
    {
        org.apache.catalina.valves.ValveBase r0;
        org.apache.catalina.Container $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.catalina.valves.ValveBase;
        $r1 = virtualinvoke r0.<org.apache.catalina.valves.ValveBase: org.apache.catalina.Container getContainer()>();
        $r2 = staticinvoke <org.apache.catalina.mbeans.MBeanUtils: java.lang.String getDomain(org.apache.catalina.Container)>($r1);
        return $r2;
    }
}
