class java.lang.Class$MethodArray extends java.lang.Object
{
    private java.lang.reflect.Method[] methods;
    private int length;

    void <init>()
    {
        java.lang.Class$MethodArray r0;
        java.lang.reflect.Method[] $r1;

        r0 := @this: java.lang.Class$MethodArray;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = newarray (java.lang.reflect.Method)[20];
        r0.<java.lang.Class$MethodArray: java.lang.reflect.Method[] methods> = $r1;
        r0.<java.lang.Class$MethodArray: int length> = 0;
        return;
    }

    void add(java.lang.reflect.Method)
    {
        java.lang.Class$MethodArray r0;
        java.lang.reflect.Method r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.reflect.Method[] $r2, $r3, $r4, $r6, $r7;
        java.lang.Object[] $r5;

        r0 := @this: java.lang.Class$MethodArray;
        r1 := @parameter0: java.lang.reflect.Method;
        $i0 = r0.<java.lang.Class$MethodArray: int length>;
        $r2 = r0.<java.lang.Class$MethodArray: java.lang.reflect.Method[] methods>;
        $i1 = lengthof $r2;
        if $i0 != $i1 goto label0;

        $r3 = r0.<java.lang.Class$MethodArray: java.lang.reflect.Method[] methods>;
        $r4 = r0.<java.lang.Class$MethodArray: java.lang.reflect.Method[] methods>;
        $i2 = lengthof $r4;
        $i3 = 2 * $i2;
        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i3);
        $r6 = (java.lang.reflect.Method[]) $r5;
        r0.<java.lang.Class$MethodArray: java.lang.reflect.Method[] methods> = $r6;

     label0:
        $r7 = r0.<java.lang.Class$MethodArray: java.lang.reflect.Method[] methods>;
        $i4 = r0.<java.lang.Class$MethodArray: int length>;
        $i5 = $i4 + 1;
        r0.<java.lang.Class$MethodArray: int length> = $i5;
        $r7[$i4] = r1;
        return;
    }

    void addAll(java.lang.reflect.Method[])
    {
        java.lang.Class$MethodArray r0;
        java.lang.reflect.Method[] r1;
        int i0, $i1;
        java.lang.reflect.Method $r2;

        r0 := @this: java.lang.Class$MethodArray;
        r1 := @parameter0: java.lang.reflect.Method[];
        i0 = 0;

     label0:
        $i1 = lengthof r1;
        if i0 >= $i1 goto label1;

        $r2 = r1[i0];
        virtualinvoke r0.<java.lang.Class$MethodArray: void add(java.lang.reflect.Method)>($r2);
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    void addAll(java.lang.Class$MethodArray)
    {
        java.lang.Class$MethodArray r0, r1;
        int i0, $i1;
        java.lang.reflect.Method $r2;

        r0 := @this: java.lang.Class$MethodArray;
        r1 := @parameter0: java.lang.Class$MethodArray;
        i0 = 0;

     label0:
        $i1 = virtualinvoke r1.<java.lang.Class$MethodArray: int length()>();
        if i0 >= $i1 goto label1;

        $r2 = virtualinvoke r1.<java.lang.Class$MethodArray: java.lang.reflect.Method get(int)>(i0);
        virtualinvoke r0.<java.lang.Class$MethodArray: void add(java.lang.reflect.Method)>($r2);
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    void addIfNotPresent(java.lang.reflect.Method)
    {
        java.lang.Class$MethodArray r0;
        java.lang.reflect.Method r1, r2;
        int i0, $i1;
        java.lang.reflect.Method[] $r3;
        boolean $z0;

        r0 := @this: java.lang.Class$MethodArray;
        r1 := @parameter0: java.lang.reflect.Method;
        i0 = 0;

     label0:
        $i1 = r0.<java.lang.Class$MethodArray: int length>;
        if i0 >= $i1 goto label3;

        $r3 = r0.<java.lang.Class$MethodArray: java.lang.reflect.Method[] methods>;
        r2 = $r3[i0];
        if r2 == r1 goto label1;

        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<java.lang.reflect.Method: boolean equals(java.lang.Object)>(r1);
        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        i0 = i0 + 1;
        goto label0;

     label3:
        virtualinvoke r0.<java.lang.Class$MethodArray: void add(java.lang.reflect.Method)>(r1);
        return;
    }

    void addAllIfNotPresent(java.lang.Class$MethodArray)
    {
        java.lang.Class$MethodArray r0, r1;
        int i0, $i1;
        java.lang.reflect.Method r2;

        r0 := @this: java.lang.Class$MethodArray;
        r1 := @parameter0: java.lang.Class$MethodArray;
        i0 = 0;

     label0:
        $i1 = virtualinvoke r1.<java.lang.Class$MethodArray: int length()>();
        if i0 >= $i1 goto label2;

        r2 = virtualinvoke r1.<java.lang.Class$MethodArray: java.lang.reflect.Method get(int)>(i0);
        if r2 == null goto label1;

        virtualinvoke r0.<java.lang.Class$MethodArray: void addIfNotPresent(java.lang.reflect.Method)>(r2);

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        return;
    }

    int length()
    {
        java.lang.Class$MethodArray r0;
        int $i0;

        r0 := @this: java.lang.Class$MethodArray;
        $i0 = r0.<java.lang.Class$MethodArray: int length>;
        return $i0;
    }

    java.lang.reflect.Method get(int)
    {
        java.lang.Class$MethodArray r0;
        int i0;
        java.lang.reflect.Method[] $r1;
        java.lang.reflect.Method $r2;

        r0 := @this: java.lang.Class$MethodArray;
        i0 := @parameter0: int;
        $r1 = r0.<java.lang.Class$MethodArray: java.lang.reflect.Method[] methods>;
        $r2 = $r1[i0];
        return $r2;
    }

    void removeByNameAndSignature(java.lang.reflect.Method)
    {
        java.lang.Class$MethodArray r0;
        java.lang.reflect.Method r1, r2;
        int i0, $i1;
        java.lang.reflect.Method[] $r3, $r10;
        java.lang.Class $r4, $r5;
        java.lang.String $r6, $r7;
        java.lang.Class[] $r8, $r9;
        boolean $z0;

        r0 := @this: java.lang.Class$MethodArray;
        r1 := @parameter0: java.lang.reflect.Method;
        i0 = 0;

     label0:
        $i1 = r0.<java.lang.Class$MethodArray: int length>;
        if i0 >= $i1 goto label2;

        $r3 = r0.<java.lang.Class$MethodArray: java.lang.reflect.Method[] methods>;
        r2 = $r3[i0];
        if r2 == null goto label1;

        $r4 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
        $r5 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
        if $r4 != $r5 goto label1;

        $r6 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();
        $r7 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();
        if $r6 != $r7 goto label1;

        $r8 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        $r9 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        $z0 = staticinvoke <java.lang.Class: boolean access$400(java.lang.Object[],java.lang.Object[])>($r8, $r9);
        if $z0 == 0 goto label1;

        $r10 = r0.<java.lang.Class$MethodArray: java.lang.reflect.Method[] methods>;
        $r10[i0] = null;

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        return;
    }

    void compactAndTrim()
    {
        java.lang.Class$MethodArray r0;
        int i0, i1, $i2, $i3;
        java.lang.reflect.Method r1;
        java.lang.reflect.Method[] $r2, $r3, $r4, $r5, $r7;
        java.lang.Object[] $r6;

        r0 := @this: java.lang.Class$MethodArray;
        i0 = 0;
        i1 = 0;

     label0:
        $i2 = r0.<java.lang.Class$MethodArray: int length>;
        if i1 >= $i2 goto label3;

        $r2 = r0.<java.lang.Class$MethodArray: java.lang.reflect.Method[] methods>;
        r1 = $r2[i1];
        if r1 == null goto label2;

        if i1 == i0 goto label1;

        $r3 = r0.<java.lang.Class$MethodArray: java.lang.reflect.Method[] methods>;
        $r3[i0] = r1;

     label1:
        i0 = i0 + 1;

     label2:
        i1 = i1 + 1;
        goto label0;

     label3:
        $r4 = r0.<java.lang.Class$MethodArray: java.lang.reflect.Method[] methods>;
        $i3 = lengthof $r4;
        if i0 == $i3 goto label4;

        $r5 = r0.<java.lang.Class$MethodArray: java.lang.reflect.Method[] methods>;
        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, i0);
        $r7 = (java.lang.reflect.Method[]) $r6;
        r0.<java.lang.Class$MethodArray: java.lang.reflect.Method[] methods> = $r7;

     label4:
        return;
    }

    java.lang.reflect.Method[] getArray()
    {
        java.lang.Class$MethodArray r0;
        java.lang.reflect.Method[] $r1;

        r0 := @this: java.lang.Class$MethodArray;
        $r1 = r0.<java.lang.Class$MethodArray: java.lang.reflect.Method[] methods>;
        return $r1;
    }
}
