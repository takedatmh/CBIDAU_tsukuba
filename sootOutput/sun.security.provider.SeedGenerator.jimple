abstract class sun.security.provider.SeedGenerator extends java.lang.Object
{
    private static sun.security.provider.SeedGenerator instance;
    private static final sun.security.util.Debug debug;
    static final java.lang.String URL_DEV_RANDOM;
    static final java.lang.String URL_DEV_URANDOM;

    void <init>()
    {
        sun.security.provider.SeedGenerator r0;

        r0 := @this: sun.security.provider.SeedGenerator;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static void generateSeed(byte[])
    {
        byte[] r0;
        sun.security.provider.SeedGenerator $r1;

        r0 := @parameter0: byte[];
        $r1 = <sun.security.provider.SeedGenerator: sun.security.provider.SeedGenerator instance>;
        virtualinvoke $r1.<sun.security.provider.SeedGenerator: void getSeedBytes(byte[])>(r0);
        return;
    }

    abstract void getSeedBytes(byte[]);

    static byte[] getSystemEntropy()
    {
        java.security.MessageDigest r0;
        java.security.NoSuchAlgorithmException r1, $r2;
        java.lang.InternalError $r3;
        long $l0;
        int $i1;
        byte b2;
        sun.security.provider.SeedGenerator$1 $r4;
        byte[] $r6;

     label0:
        r0 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA");

     label1:
        goto label3;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;
        $r3 = new java.lang.InternalError;
        specialinvoke $r3.<java.lang.InternalError: void <init>(java.lang.String)>("internal error: SHA-1 not available.");
        throw $r3;

     label3:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $i1 = (int) $l0;
        b2 = (byte) $i1;
        virtualinvoke r0.<java.security.MessageDigest: void update(byte)>(b2);
        $r4 = new sun.security.provider.SeedGenerator$1;
        specialinvoke $r4.<sun.security.provider.SeedGenerator$1: void <init>(java.security.MessageDigest)>(r0);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r4);
        $r6 = virtualinvoke r0.<java.security.MessageDigest: byte[] digest()>();
        return $r6;

        catch java.security.NoSuchAlgorithmException from label0 to label1 with label2;
    }

    private static void addNetworkAdapterInfo(java.security.MessageDigest)
    {
        java.security.MessageDigest r0;
        java.util.Enumeration r1;
        java.net.NetworkInterface r2;
        byte[] r3, $r6;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.lang.String $r5;
        java.lang.Exception $r7, r8;

        r0 := @parameter0: java.security.MessageDigest;

     label0:
        r1 = staticinvoke <java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();
        r2 = (java.net.NetworkInterface) $r4;
        $r5 = virtualinvoke r2.<java.net.NetworkInterface: java.lang.String toString()>();
        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();
        virtualinvoke r0.<java.security.MessageDigest: void update(byte[])>($r6);
        $z1 = virtualinvoke r2.<java.net.NetworkInterface: boolean isVirtual()>();
        if $z1 != 0 goto label2;

        r3 = virtualinvoke r2.<java.net.NetworkInterface: byte[] getHardwareAddress()>();
        if r3 == null goto label2;

        virtualinvoke r0.<java.security.MessageDigest: void update(byte[])>(r3);
        goto label3;

     label2:
        goto label1;

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;
        r8 = $r7;

     label5:
        return;

        catch java.lang.Exception from label0 to label3 with label4;
    }

    private static byte[] longToByteArray(long)
    {
        long l0;
        byte[] r0;
        int i1, $i2;
        byte $b3;

        l0 := @parameter0: long;
        r0 = newarray (byte)[8];
        i1 = 0;

     label0:
        if i1 >= 8 goto label1;

        $i2 = (int) l0;
        $b3 = (byte) $i2;
        r0[i1] = $b3;
        l0 = l0 >> 8;
        i1 = i1 + 1;
        goto label0;

     label1:
        return r0;
    }

    static void access$000(java.security.MessageDigest)
    {
        java.security.MessageDigest r0;

        r0 := @parameter0: java.security.MessageDigest;
        staticinvoke <sun.security.provider.SeedGenerator: void addNetworkAdapterInfo(java.security.MessageDigest)>(r0);
        return;
    }

    static byte[] access$100(long)
    {
        long l0;
        byte[] $r0;

        l0 := @parameter0: long;
        $r0 = staticinvoke <sun.security.provider.SeedGenerator: byte[] longToByteArray(long)>(l0);
        return $r0;
    }

    static void <clinit>()
    {
        java.lang.String r0, $r11, $r13, $r20, $r29, $r31;
        java.io.IOException r1, $r6, $r21, r22;
        sun.security.util.Debug $r2, $r4, $r5, $r7, $r8, $r15, $r16, $r23, $r24, $r33, $r34;
        boolean $z0, $z1;
        sun.security.provider.NativeSeedGenerator $r3;
        java.lang.StringBuilder $r9, $r10, $r12, $r17, $r18, $r19, $r25, $r26, $r27, $r28, $r30;
        int $i0;
        sun.security.provider.SeedGenerator$URLSeedGenerator $r14;
        sun.security.provider.SeedGenerator $r32;
        sun.security.provider.SeedGenerator$ThreadedSeedGenerator $r35;

        $r2 = staticinvoke <sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String)>("provider");
        <sun.security.provider.SeedGenerator: sun.security.util.Debug debug> = $r2;
        r0 = staticinvoke <sun.security.provider.SunEntries: java.lang.String getSeedSource()>();
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("file:/dev/random");
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("file:/dev/urandom");
        if $z1 == 0 goto label4;

     label0:
        $r3 = new sun.security.provider.NativeSeedGenerator;
        specialinvoke $r3.<sun.security.provider.NativeSeedGenerator: void <init>()>();
        <sun.security.provider.SeedGenerator: sun.security.provider.SeedGenerator instance> = $r3;
        $r4 = <sun.security.provider.SeedGenerator: sun.security.util.Debug debug>;
        if $r4 == null goto label1;

        $r5 = <sun.security.provider.SeedGenerator: sun.security.util.Debug debug>;
        virtualinvoke $r5.<sun.security.util.Debug: void println(java.lang.String)>("Using operating system seed generator");

     label1:
        goto label8;

     label2:
        $r6 := @caughtexception;
        r1 = $r6;
        $r7 = <sun.security.provider.SeedGenerator: sun.security.util.Debug debug>;
        if $r7 == null goto label3;

        $r8 = <sun.security.provider.SeedGenerator: sun.security.util.Debug debug>;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to use operating system seed generator: ");
        $r11 = virtualinvoke r1.<java.io.IOException: java.lang.String toString()>();
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r8.<sun.security.util.Debug: void println(java.lang.String)>($r13);

     label3:
        goto label8;

     label4:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i0 == 0 goto label8;

     label5:
        $r14 = new sun.security.provider.SeedGenerator$URLSeedGenerator;
        specialinvoke $r14.<sun.security.provider.SeedGenerator$URLSeedGenerator: void <init>(java.lang.String)>(r0);
        <sun.security.provider.SeedGenerator: sun.security.provider.SeedGenerator instance> = $r14;
        $r15 = <sun.security.provider.SeedGenerator: sun.security.util.Debug debug>;
        if $r15 == null goto label6;

        $r16 = <sun.security.provider.SeedGenerator: sun.security.util.Debug debug>;
        $r17 = new java.lang.StringBuilder;
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using URL seed generator reading from ");
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r16.<sun.security.util.Debug: void println(java.lang.String)>($r20);

     label6:
        goto label8;

     label7:
        $r21 := @caughtexception;
        r22 = $r21;
        $r23 = <sun.security.provider.SeedGenerator: sun.security.util.Debug debug>;
        if $r23 == null goto label8;

        $r24 = <sun.security.provider.SeedGenerator: sun.security.util.Debug debug>;
        $r25 = new java.lang.StringBuilder;
        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create seed generator with ");
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");
        $r29 = virtualinvoke r22.<java.io.IOException: java.lang.String toString()>();
        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r24.<sun.security.util.Debug: void println(java.lang.String)>($r31);

     label8:
        $r32 = <sun.security.provider.SeedGenerator: sun.security.provider.SeedGenerator instance>;
        if $r32 != null goto label10;

        $r33 = <sun.security.provider.SeedGenerator: sun.security.util.Debug debug>;
        if $r33 == null goto label9;

        $r34 = <sun.security.provider.SeedGenerator: sun.security.util.Debug debug>;
        virtualinvoke $r34.<sun.security.util.Debug: void println(java.lang.String)>("Using default threaded seed generator");

     label9:
        $r35 = new sun.security.provider.SeedGenerator$ThreadedSeedGenerator;
        specialinvoke $r35.<sun.security.provider.SeedGenerator$ThreadedSeedGenerator: void <init>()>();
        <sun.security.provider.SeedGenerator: sun.security.provider.SeedGenerator instance> = $r35;

     label10:
        return;

        catch java.io.IOException from label0 to label1 with label2;
        catch java.io.IOException from label5 to label6 with label7;
    }
}
