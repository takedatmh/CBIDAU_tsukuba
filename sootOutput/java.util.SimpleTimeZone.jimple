public class java.util.SimpleTimeZone extends java.util.TimeZone
{
    private int startMonth;
    private int startDay;
    private int startDayOfWeek;
    private int startTime;
    private int startTimeMode;
    private int endMonth;
    private int endDay;
    private int endDayOfWeek;
    private int endTime;
    private int endTimeMode;
    private int startYear;
    private int rawOffset;
    private boolean useDaylight;
    private static final int millisPerHour;
    private static final int millisPerDay;
    private final byte[] monthLength;
    private static final byte[] staticMonthLength;
    private static final byte[] staticLeapMonthLength;
    private int startMode;
    private int endMode;
    private int dstSavings;
    private static final sun.util.calendar.Gregorian gcal;
    private transient long cacheYear;
    private transient long cacheStart;
    private transient long cacheEnd;
    private static final int DOM_MODE;
    private static final int DOW_IN_MONTH_MODE;
    private static final int DOW_GE_DOM_MODE;
    private static final int DOW_LE_DOM_MODE;
    public static final int WALL_TIME;
    public static final int STANDARD_TIME;
    public static final int UTC_TIME;
    static final long serialVersionUID;
    static final int currentSerialVersion;
    private int serialVersionOnStream;

    public void <init>(int, java.lang.String)
    {
        java.util.SimpleTimeZone r0;
        int i0;
        java.lang.String r1;
        byte[] $r2;

        r0 := @this: java.util.SimpleTimeZone;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        specialinvoke r0.<java.util.TimeZone: void <init>()>();
        r0.<java.util.SimpleTimeZone: boolean useDaylight> = 0;
        $r2 = <java.util.SimpleTimeZone: byte[] staticMonthLength>;
        r0.<java.util.SimpleTimeZone: byte[] monthLength> = $r2;
        r0.<java.util.SimpleTimeZone: int serialVersionOnStream> = 2;
        r0.<java.util.SimpleTimeZone: int rawOffset> = i0;
        virtualinvoke r0.<java.util.SimpleTimeZone: void setID(java.lang.String)>(r1);
        r0.<java.util.SimpleTimeZone: int dstSavings> = 3600000;
        return;
    }

    public void <init>(int, java.lang.String, int, int, int, int, int, int, int, int)
    {
        java.util.SimpleTimeZone r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8;
        java.lang.String r1;

        r0 := @this: java.util.SimpleTimeZone;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        i5 := @parameter6: int;
        i6 := @parameter7: int;
        i7 := @parameter8: int;
        i8 := @parameter9: int;
        specialinvoke r0.<java.util.SimpleTimeZone: void <init>(int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)>(i0, r1, i1, i2, i3, i4, 0, i5, i6, i7, i8, 0, 3600000);
        return;
    }

    public void <init>(int, java.lang.String, int, int, int, int, int, int, int, int, int)
    {
        java.util.SimpleTimeZone r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9;
        java.lang.String r1;

        r0 := @this: java.util.SimpleTimeZone;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        i5 := @parameter6: int;
        i6 := @parameter7: int;
        i7 := @parameter8: int;
        i8 := @parameter9: int;
        i9 := @parameter10: int;
        specialinvoke r0.<java.util.SimpleTimeZone: void <init>(int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)>(i0, r1, i1, i2, i3, i4, 0, i5, i6, i7, i8, 0, i9);
        return;
    }

    public void <init>(int, java.lang.String, int, int, int, int, int, int, int, int, int, int, int)
    {
        java.util.SimpleTimeZone r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11;
        java.lang.String r1, $r7;
        java.lang.StringBuilder $r2, $r5, $r6;
        byte[] $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: java.util.SimpleTimeZone;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        i5 := @parameter6: int;
        i6 := @parameter7: int;
        i7 := @parameter8: int;
        i8 := @parameter9: int;
        i9 := @parameter10: int;
        i10 := @parameter11: int;
        i11 := @parameter12: int;
        specialinvoke r0.<java.util.TimeZone: void <init>()>();
        r0.<java.util.SimpleTimeZone: boolean useDaylight> = 0;
        $r3 = <java.util.SimpleTimeZone: byte[] staticMonthLength>;
        r0.<java.util.SimpleTimeZone: byte[] monthLength> = $r3;
        r0.<java.util.SimpleTimeZone: int serialVersionOnStream> = 2;
        virtualinvoke r0.<java.util.SimpleTimeZone: void setID(java.lang.String)>(r1);
        r0.<java.util.SimpleTimeZone: int rawOffset> = i0;
        r0.<java.util.SimpleTimeZone: int startMonth> = i1;
        r0.<java.util.SimpleTimeZone: int startDay> = i2;
        r0.<java.util.SimpleTimeZone: int startDayOfWeek> = i3;
        r0.<java.util.SimpleTimeZone: int startTime> = i4;
        r0.<java.util.SimpleTimeZone: int startTimeMode> = i5;
        r0.<java.util.SimpleTimeZone: int endMonth> = i6;
        r0.<java.util.SimpleTimeZone: int endDay> = i7;
        r0.<java.util.SimpleTimeZone: int endDayOfWeek> = i8;
        r0.<java.util.SimpleTimeZone: int endTime> = i9;
        r0.<java.util.SimpleTimeZone: int endTimeMode> = i10;
        r0.<java.util.SimpleTimeZone: int dstSavings> = i11;
        specialinvoke r0.<java.util.SimpleTimeZone: void decodeRules()>();
        if i11 > 0 goto label0;

        $r4 = new java.lang.IllegalArgumentException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal daylight saving value: ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r4;

     label0:
        return;
    }

    public void setStartYear(int)
    {
        java.util.SimpleTimeZone r0;
        int i0;

        r0 := @this: java.util.SimpleTimeZone;
        i0 := @parameter0: int;
        r0.<java.util.SimpleTimeZone: int startYear> = i0;
        specialinvoke r0.<java.util.SimpleTimeZone: void invalidateCache()>();
        return;
    }

    public void setStartRule(int, int, int, int)
    {
        java.util.SimpleTimeZone r0;
        int i0, i1, i2, i3;

        r0 := @this: java.util.SimpleTimeZone;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        r0.<java.util.SimpleTimeZone: int startMonth> = i0;
        r0.<java.util.SimpleTimeZone: int startDay> = i1;
        r0.<java.util.SimpleTimeZone: int startDayOfWeek> = i2;
        r0.<java.util.SimpleTimeZone: int startTime> = i3;
        r0.<java.util.SimpleTimeZone: int startTimeMode> = 0;
        specialinvoke r0.<java.util.SimpleTimeZone: void decodeStartRule()>();
        specialinvoke r0.<java.util.SimpleTimeZone: void invalidateCache()>();
        return;
    }

    public void setStartRule(int, int, int)
    {
        java.util.SimpleTimeZone r0;
        int i0, i1, i2;

        r0 := @this: java.util.SimpleTimeZone;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        virtualinvoke r0.<java.util.SimpleTimeZone: void setStartRule(int,int,int,int)>(i0, i1, 0, i2);
        return;
    }

    public void setStartRule(int, int, int, int, boolean)
    {
        java.util.SimpleTimeZone r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        boolean z0;

        r0 := @this: java.util.SimpleTimeZone;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        z0 := @parameter4: boolean;
        if z0 == 0 goto label0;

        $i4 = neg i2;
        virtualinvoke r0.<java.util.SimpleTimeZone: void setStartRule(int,int,int,int)>(i0, i1, $i4, i3);
        goto label1;

     label0:
        $i5 = neg i1;
        $i6 = neg i2;
        virtualinvoke r0.<java.util.SimpleTimeZone: void setStartRule(int,int,int,int)>(i0, $i5, $i6, i3);

     label1:
        return;
    }

    public void setEndRule(int, int, int, int)
    {
        java.util.SimpleTimeZone r0;
        int i0, i1, i2, i3;

        r0 := @this: java.util.SimpleTimeZone;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        r0.<java.util.SimpleTimeZone: int endMonth> = i0;
        r0.<java.util.SimpleTimeZone: int endDay> = i1;
        r0.<java.util.SimpleTimeZone: int endDayOfWeek> = i2;
        r0.<java.util.SimpleTimeZone: int endTime> = i3;
        r0.<java.util.SimpleTimeZone: int endTimeMode> = 0;
        specialinvoke r0.<java.util.SimpleTimeZone: void decodeEndRule()>();
        specialinvoke r0.<java.util.SimpleTimeZone: void invalidateCache()>();
        return;
    }

    public void setEndRule(int, int, int)
    {
        java.util.SimpleTimeZone r0;
        int i0, i1, i2;

        r0 := @this: java.util.SimpleTimeZone;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        virtualinvoke r0.<java.util.SimpleTimeZone: void setEndRule(int,int,int,int)>(i0, i1, 0, i2);
        return;
    }

    public void setEndRule(int, int, int, int, boolean)
    {
        java.util.SimpleTimeZone r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        boolean z0;

        r0 := @this: java.util.SimpleTimeZone;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        z0 := @parameter4: boolean;
        if z0 == 0 goto label0;

        $i4 = neg i2;
        virtualinvoke r0.<java.util.SimpleTimeZone: void setEndRule(int,int,int,int)>(i0, i1, $i4, i3);
        goto label1;

     label0:
        $i5 = neg i1;
        $i6 = neg i2;
        virtualinvoke r0.<java.util.SimpleTimeZone: void setEndRule(int,int,int,int)>(i0, $i5, $i6, i3);

     label1:
        return;
    }

    public int getOffset(long)
    {
        java.util.SimpleTimeZone r0;
        long l0;
        int $i1;

        r0 := @this: java.util.SimpleTimeZone;
        l0 := @parameter0: long;
        $i1 = virtualinvoke r0.<java.util.SimpleTimeZone: int getOffsets(long,int[])>(l0, null);
        return $i1;
    }

    int getOffsets(long, int[])
    {
        java.util.SimpleTimeZone r0, r2;
        long l0, $l3, $l5, $l7, $l12, $l13;
        int[] r1;
        int i1, i2, $i9, $i11, $i14, $i15, $i16, $i17;
        java.lang.Throwable r3, $r5;
        boolean $z0;
        byte $b4, $b6, $b8, $b10;
        sun.util.calendar.BaseCalendar $r6, r8;
        sun.util.calendar.CalendarSystem $r7;
        java.util.TimeZone $r9;
        sun.util.calendar.CalendarDate $r10;
        sun.util.calendar.BaseCalendar$Date r11;

        r0 := @this: java.util.SimpleTimeZone;
        l0 := @parameter0: long;
        r1 := @parameter1: int[];
        i1 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        $z0 = r0.<java.util.SimpleTimeZone: boolean useDaylight>;
        if $z0 == 0 goto label10;

        r2 = r0;
        entermonitor r0;

     label0:
        $l3 = r0.<java.util.SimpleTimeZone: long cacheStart>;
        $b4 = $l3 cmp 0L;
        if $b4 == 0 goto label2;

        $l5 = r0.<java.util.SimpleTimeZone: long cacheStart>;
        $b6 = l0 cmp $l5;
        if $b6 < 0 goto label2;

        $l7 = r0.<java.util.SimpleTimeZone: long cacheEnd>;
        $b8 = l0 cmp $l7;
        if $b8 >= 0 goto label2;

        $i9 = r0.<java.util.SimpleTimeZone: int dstSavings>;
        i1 = i1 + $i9;
        exitmonitor r2;

     label1:
        goto label10;

     label2:
        exitmonitor r2;

     label3:
        goto label7;

     label4:
        $r5 := @caughtexception;

     label5:
        r3 = $r5;
        exitmonitor r2;

     label6:
        throw r3;

     label7:
        $b10 = l0 cmp -12219292800000L;
        if $b10 < 0 goto label8;

        $r6 = <java.util.SimpleTimeZone: sun.util.calendar.Gregorian gcal>;
        goto label9;

     label8:
        $r7 = staticinvoke <sun.util.calendar.CalendarSystem: sun.util.calendar.CalendarSystem forName(java.lang.String)>("julian");
        $r6 = (sun.util.calendar.BaseCalendar) $r7;

     label9:
        r8 = $r6;
        $r9 = <java.util.TimeZone: java.util.TimeZone NO_TIMEZONE>;
        $r10 = virtualinvoke r8.<sun.util.calendar.BaseCalendar: sun.util.calendar.CalendarDate newCalendarDate(java.util.TimeZone)>($r9);
        r11 = (sun.util.calendar.BaseCalendar$Date) $r10;
        $i11 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        $l12 = (long) $i11;
        $l13 = l0 + $l12;
        virtualinvoke r8.<sun.util.calendar.BaseCalendar: sun.util.calendar.CalendarDate getCalendarDate(long,sun.util.calendar.CalendarDate)>($l13, r11);
        i2 = virtualinvoke r11.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $i14 = r0.<java.util.SimpleTimeZone: int startYear>;
        if i2 < $i14 goto label10;

        virtualinvoke r11.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setTimeOfDay(int,int,int,int)>(0, 0, 0, 0);
        i1 = specialinvoke r0.<java.util.SimpleTimeZone: int getOffset(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int,long)>(r8, r11, i2, l0);

     label10:
        if r1 == null goto label11;

        $i15 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        r1[0] = $i15;
        $i16 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        $i17 = i1 - $i16;
        r1[1] = $i17;

     label11:
        return i1;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int getOffset(int, int, int, int, int, int)
    {
        java.util.SimpleTimeZone r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i9, $i12, $i13, $i20, $i22, $i23, $i24, $i25, $i26, $i27;
        java.lang.StringBuilder $r1, $r5, $r6;
        sun.util.calendar.BaseCalendar r2;
        sun.util.calendar.BaseCalendar$Date r3;
        long l8, $l10, $l11, $l14, l15, $l17, $l18, $l19, $l21;
        java.lang.IllegalArgumentException $r4, $r15;
        java.lang.String $r7;
        java.util.TimeZone $r8, $r12;
        sun.util.calendar.CalendarDate $r9, $r13;
        byte $b16;
        sun.util.calendar.CalendarSystem $r11;
        boolean $z0;

        r0 := @this: java.util.SimpleTimeZone;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        i4 := @parameter4: int;
        i5 := @parameter5: int;
        if i0 == 1 goto label0;

        if i0 == 0 goto label0;

        $r4 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal era ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r4;

     label0:
        i6 = i1;
        if i0 != 0 goto label1;

        i6 = 1 - i6;

     label1:
        if i6 < 292278994 goto label2;

        $i9 = i6 % 2800;
        i6 = 2800 + $i9;
        goto label3;

     label2:
        if i6 > -292269054 goto label3;

        $l10 = (long) i6;
        $l11 = staticinvoke <sun.util.calendar.CalendarUtils: long mod(long,long)>($l10, 28L);
        i6 = (int) $l11;

     label3:
        i7 = i2 + 1;
        r2 = <java.util.SimpleTimeZone: sun.util.calendar.Gregorian gcal>;
        $r8 = <java.util.TimeZone: java.util.TimeZone NO_TIMEZONE>;
        $r9 = virtualinvoke r2.<sun.util.calendar.BaseCalendar: sun.util.calendar.CalendarDate newCalendarDate(java.util.TimeZone)>($r8);
        r3 = (sun.util.calendar.BaseCalendar$Date) $r9;
        virtualinvoke r3.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setDate(int,int,int)>(i6, i7, i3);
        l8 = virtualinvoke r2.<sun.util.calendar.BaseCalendar: long getTime(sun.util.calendar.CalendarDate)>(r3);
        $i12 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        $i13 = i5 - $i12;
        $l14 = (long) $i13;
        l15 = l8 + $l14;
        $b16 = l15 cmp -12219292800000L;
        if $b16 >= 0 goto label4;

        $r11 = staticinvoke <sun.util.calendar.CalendarSystem: sun.util.calendar.CalendarSystem forName(java.lang.String)>("julian");
        r2 = (sun.util.calendar.BaseCalendar) $r11;
        $r12 = <java.util.TimeZone: java.util.TimeZone NO_TIMEZONE>;
        $r13 = virtualinvoke r2.<sun.util.calendar.BaseCalendar: sun.util.calendar.CalendarDate newCalendarDate(java.util.TimeZone)>($r12);
        r3 = (sun.util.calendar.BaseCalendar$Date) $r13;
        virtualinvoke r3.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.BaseCalendar$Date setNormalizedDate(int,int,int)>(i6, i7, i3);
        $l17 = virtualinvoke r2.<sun.util.calendar.BaseCalendar: long getTime(sun.util.calendar.CalendarDate)>(r3);
        $l18 = (long) i5;
        $l19 = $l17 + $l18;
        $i20 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        $l21 = (long) $i20;
        l15 = $l19 - $l21;

     label4:
        $i22 = virtualinvoke r3.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        if $i22 != i6 goto label5;

        $i23 = virtualinvoke r3.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        if $i23 != i7 goto label5;

        $i24 = virtualinvoke r3.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        if $i24 != i3 goto label5;

        if i4 < 1 goto label5;

        if i4 > 7 goto label5;

        if i5 < 0 goto label5;

        if i5 < 86400000 goto label6;

     label5:
        $r15 = new java.lang.IllegalArgumentException;
        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r15;

     label6:
        $z0 = r0.<java.util.SimpleTimeZone: boolean useDaylight>;
        if $z0 == 0 goto label7;

        $i25 = r0.<java.util.SimpleTimeZone: int startYear>;
        if i1 < $i25 goto label7;

        if i0 == 1 goto label8;

     label7:
        $i26 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        return $i26;

     label8:
        $i27 = specialinvoke r0.<java.util.SimpleTimeZone: int getOffset(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int,long)>(r2, r3, i6, l15);
        return $i27;
    }

    private int getOffset(sun.util.calendar.BaseCalendar, sun.util.calendar.BaseCalendar$Date, int, long)
    {
        java.util.SimpleTimeZone r0, r4, r6, r13;
        sun.util.calendar.BaseCalendar r1;
        sun.util.calendar.BaseCalendar$Date r2;
        int i0, i3, $i10, $i11, $i12, $i16, $i21, $i24, $i26, $i28, $i30, $i32;
        long l1, l2, $l4, $l6, $l8, $l13, $l14, l17, $l22, $l33, $l34;
        java.lang.Throwable r5, r7, r8, $r9, $r11, $r14;
        byte $b5, $b7, $b9, $b15, $b18, $b19, $b20, $b23, $b25, $b27, $b29, $b31;

        r0 := @this: java.util.SimpleTimeZone;
        r1 := @parameter0: sun.util.calendar.BaseCalendar;
        r2 := @parameter1: sun.util.calendar.BaseCalendar$Date;
        i0 := @parameter2: int;
        l1 := @parameter3: long;
        r4 = r0;
        entermonitor r0;

     label0:
        $l4 = r0.<java.util.SimpleTimeZone: long cacheStart>;
        $b5 = $l4 cmp 0L;
        if $b5 == 0 goto label4;

        $l6 = r0.<java.util.SimpleTimeZone: long cacheStart>;
        $b7 = l1 cmp $l6;
        if $b7 < 0 goto label2;

        $l8 = r0.<java.util.SimpleTimeZone: long cacheEnd>;
        $b9 = l1 cmp $l8;
        if $b9 >= 0 goto label2;

        $i10 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        $i11 = r0.<java.util.SimpleTimeZone: int dstSavings>;
        $i12 = $i10 + $i11;
        exitmonitor r4;

     label1:
        return $i12;

     label2:
        $l13 = (long) i0;
        $l14 = r0.<java.util.SimpleTimeZone: long cacheYear>;
        $b15 = $l13 cmp $l14;
        if $b15 != 0 goto label4;

        $i16 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        exitmonitor r4;

     label3:
        return $i16;

     label4:
        exitmonitor r4;

     label5:
        goto label9;

     label6:
        $r9 := @caughtexception;

     label7:
        r5 = $r9;
        exitmonitor r4;

     label8:
        throw r5;

     label9:
        l17 = specialinvoke r0.<java.util.SimpleTimeZone: long getStart(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int)>(r1, r2, i0);
        l2 = specialinvoke r0.<java.util.SimpleTimeZone: long getEnd(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int)>(r1, r2, i0);
        i3 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        $b18 = l17 cmp l2;
        if $b18 > 0 goto label17;

        $b19 = l1 cmp l17;
        if $b19 < 0 goto label10;

        $b20 = l1 cmp l2;
        if $b20 >= 0 goto label10;

        $i21 = r0.<java.util.SimpleTimeZone: int dstSavings>;
        i3 = i3 + $i21;

     label10:
        r6 = r0;
        entermonitor r0;

     label11:
        $l22 = (long) i0;
        r0.<java.util.SimpleTimeZone: long cacheYear> = $l22;
        r0.<java.util.SimpleTimeZone: long cacheStart> = l17;
        r0.<java.util.SimpleTimeZone: long cacheEnd> = l2;
        exitmonitor r6;

     label12:
        goto label16;

     label13:
        $r11 := @caughtexception;

     label14:
        r7 = $r11;
        exitmonitor r6;

     label15:
        throw r7;

     label16:
        goto label25;

     label17:
        $b23 = l1 cmp l2;
        if $b23 >= 0 goto label18;

        $i24 = i0 - 1;
        l17 = specialinvoke r0.<java.util.SimpleTimeZone: long getStart(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int)>(r1, r2, $i24);
        $b25 = l1 cmp l17;
        if $b25 < 0 goto label19;

        $i26 = r0.<java.util.SimpleTimeZone: int dstSavings>;
        i3 = i3 + $i26;
        goto label19;

     label18:
        $b27 = l1 cmp l17;
        if $b27 < 0 goto label19;

        $i28 = i0 + 1;
        l2 = specialinvoke r0.<java.util.SimpleTimeZone: long getEnd(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int)>(r1, r2, $i28);
        $b29 = l1 cmp l2;
        if $b29 >= 0 goto label19;

        $i30 = r0.<java.util.SimpleTimeZone: int dstSavings>;
        i3 = i3 + $i30;

     label19:
        $b31 = l17 cmp l2;
        if $b31 > 0 goto label25;

        r13 = r0;
        entermonitor r0;

     label20:
        $i32 = r0.<java.util.SimpleTimeZone: int startYear>;
        $l33 = (long) $i32;
        $l34 = $l33 - 1L;
        r0.<java.util.SimpleTimeZone: long cacheYear> = $l34;
        r0.<java.util.SimpleTimeZone: long cacheStart> = l17;
        r0.<java.util.SimpleTimeZone: long cacheEnd> = l2;
        exitmonitor r13;

     label21:
        goto label25;

     label22:
        $r14 := @caughtexception;

     label23:
        r8 = $r14;
        exitmonitor r13;

     label24:
        throw r8;

     label25:
        return i3;

        catch java.lang.Throwable from label0 to label1 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    private long getStart(sun.util.calendar.BaseCalendar, sun.util.calendar.BaseCalendar$Date, int)
    {
        java.util.SimpleTimeZone r0;
        sun.util.calendar.BaseCalendar r1;
        sun.util.calendar.BaseCalendar$Date r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        long $l8;

        r0 := @this: java.util.SimpleTimeZone;
        r1 := @parameter0: sun.util.calendar.BaseCalendar;
        r2 := @parameter1: sun.util.calendar.BaseCalendar$Date;
        i0 := @parameter2: int;
        i1 = r0.<java.util.SimpleTimeZone: int startTime>;
        $i2 = r0.<java.util.SimpleTimeZone: int startTimeMode>;
        if $i2 == 2 goto label0;

        $i3 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        i1 = i1 - $i3;

     label0:
        $i4 = r0.<java.util.SimpleTimeZone: int startMode>;
        $i5 = r0.<java.util.SimpleTimeZone: int startMonth>;
        $i6 = r0.<java.util.SimpleTimeZone: int startDay>;
        $i7 = r0.<java.util.SimpleTimeZone: int startDayOfWeek>;
        $l8 = specialinvoke r0.<java.util.SimpleTimeZone: long getTransition(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int,int,int,int,int,int)>(r1, r2, $i4, i0, $i5, $i6, $i7, i1);
        return $l8;
    }

    private long getEnd(sun.util.calendar.BaseCalendar, sun.util.calendar.BaseCalendar$Date, int)
    {
        java.util.SimpleTimeZone r0;
        sun.util.calendar.BaseCalendar r1;
        sun.util.calendar.BaseCalendar$Date r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        long $l10;

        r0 := @this: java.util.SimpleTimeZone;
        r1 := @parameter0: sun.util.calendar.BaseCalendar;
        r2 := @parameter1: sun.util.calendar.BaseCalendar$Date;
        i0 := @parameter2: int;
        i1 = r0.<java.util.SimpleTimeZone: int endTime>;
        $i2 = r0.<java.util.SimpleTimeZone: int endTimeMode>;
        if $i2 == 2 goto label0;

        $i3 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        i1 = i1 - $i3;

     label0:
        $i4 = r0.<java.util.SimpleTimeZone: int endTimeMode>;
        if $i4 != 0 goto label1;

        $i5 = r0.<java.util.SimpleTimeZone: int dstSavings>;
        i1 = i1 - $i5;

     label1:
        $i6 = r0.<java.util.SimpleTimeZone: int endMode>;
        $i7 = r0.<java.util.SimpleTimeZone: int endMonth>;
        $i8 = r0.<java.util.SimpleTimeZone: int endDay>;
        $i9 = r0.<java.util.SimpleTimeZone: int endDayOfWeek>;
        $l10 = specialinvoke r0.<java.util.SimpleTimeZone: long getTransition(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int,int,int,int,int,int)>(r1, r2, $i6, i0, $i7, $i8, $i9, i1);
        return $l10;
    }

    private long getTransition(sun.util.calendar.BaseCalendar, sun.util.calendar.BaseCalendar$Date, int, int, int, int, int, int)
    {
        java.util.SimpleTimeZone r0;
        sun.util.calendar.BaseCalendar r1;
        sun.util.calendar.BaseCalendar$Date r2;
        int i0, i1, i2, i3, i4, i5, $i6, $i7;
        sun.util.calendar.CalendarDate $r7, $r9, $r11;
        long $l8, $l9, $l10;

        r0 := @this: java.util.SimpleTimeZone;
        r1 := @parameter0: sun.util.calendar.BaseCalendar;
        r2 := @parameter1: sun.util.calendar.BaseCalendar$Date;
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        i2 := @parameter4: int;
        i3 := @parameter5: int;
        i4 := @parameter6: int;
        i5 := @parameter7: int;
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: void setNormalizedYear(int)>(i1);
        $i6 = i2 + 1;
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setMonth(int)>($i6);
        tableswitch(i0)
        {
            case 1: goto label0;
            case 2: goto label1;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label0:
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setDayOfMonth(int)>(i3);
        goto label5;

     label1:
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setDayOfMonth(int)>(1);
        if i3 >= 0 goto label2;

        $i7 = virtualinvoke r1.<sun.util.calendar.BaseCalendar: int getMonthLength(sun.util.calendar.CalendarDate)>(r2);
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setDayOfMonth(int)>($i7);

     label2:
        $r7 = virtualinvoke r1.<sun.util.calendar.BaseCalendar: sun.util.calendar.CalendarDate getNthDayOfWeek(int,int,sun.util.calendar.CalendarDate)>(i3, i4, r2);
        r2 = (sun.util.calendar.BaseCalendar$Date) $r7;
        goto label5;

     label3:
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setDayOfMonth(int)>(i3);
        $r9 = virtualinvoke r1.<sun.util.calendar.BaseCalendar: sun.util.calendar.CalendarDate getNthDayOfWeek(int,int,sun.util.calendar.CalendarDate)>(1, i4, r2);
        r2 = (sun.util.calendar.BaseCalendar$Date) $r9;
        goto label5;

     label4:
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setDayOfMonth(int)>(i3);
        $r11 = virtualinvoke r1.<sun.util.calendar.BaseCalendar: sun.util.calendar.CalendarDate getNthDayOfWeek(int,int,sun.util.calendar.CalendarDate)>(-1, i4, r2);
        r2 = (sun.util.calendar.BaseCalendar$Date) $r11;

     label5:
        $l8 = virtualinvoke r1.<sun.util.calendar.BaseCalendar: long getTime(sun.util.calendar.CalendarDate)>(r2);
        $l9 = (long) i5;
        $l10 = $l8 + $l9;
        return $l10;
    }

    public int getRawOffset()
    {
        java.util.SimpleTimeZone r0;
        int $i0;

        r0 := @this: java.util.SimpleTimeZone;
        $i0 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        return $i0;
    }

    public void setRawOffset(int)
    {
        java.util.SimpleTimeZone r0;
        int i0;

        r0 := @this: java.util.SimpleTimeZone;
        i0 := @parameter0: int;
        r0.<java.util.SimpleTimeZone: int rawOffset> = i0;
        return;
    }

    public void setDSTSavings(int)
    {
        java.util.SimpleTimeZone r0;
        int i0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r5;

        r0 := @this: java.util.SimpleTimeZone;
        i0 := @parameter0: int;
        if i0 > 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal daylight saving value: ");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r2;

     label0:
        r0.<java.util.SimpleTimeZone: int dstSavings> = i0;
        return;
    }

    public int getDSTSavings()
    {
        java.util.SimpleTimeZone r0;
        boolean $z0;
        int $i0;

        r0 := @this: java.util.SimpleTimeZone;
        $z0 = r0.<java.util.SimpleTimeZone: boolean useDaylight>;
        if $z0 == 0 goto label0;

        $i0 = r0.<java.util.SimpleTimeZone: int dstSavings>;
        goto label1;

     label0:
        $i0 = 0;

     label1:
        return $i0;
    }

    public boolean useDaylightTime()
    {
        java.util.SimpleTimeZone r0;
        boolean $z0;

        r0 := @this: java.util.SimpleTimeZone;
        $z0 = r0.<java.util.SimpleTimeZone: boolean useDaylight>;
        return $z0;
    }

    public boolean observesDaylightTime()
    {
        java.util.SimpleTimeZone r0;
        boolean $z0;

        r0 := @this: java.util.SimpleTimeZone;
        $z0 = virtualinvoke r0.<java.util.SimpleTimeZone: boolean useDaylightTime()>();
        return $z0;
    }

    public boolean inDaylightTime(java.util.Date)
    {
        java.util.SimpleTimeZone r0;
        java.util.Date r1;
        long $l0;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: java.util.SimpleTimeZone;
        r1 := @parameter0: java.util.Date;
        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();
        $i1 = virtualinvoke r0.<java.util.SimpleTimeZone: int getOffset(long)>($l0);
        $i2 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        if $i1 == $i2 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.Object clone()
    {
        java.util.SimpleTimeZone r0;
        java.lang.Object $r1;

        r0 := @this: java.util.SimpleTimeZone;
        $r1 = specialinvoke r0.<java.util.TimeZone: java.lang.Object clone()>();
        return $r1;
    }

    public synchronized int hashCode()
    {
        java.util.SimpleTimeZone r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;

        r0 := @this: java.util.SimpleTimeZone;
        $i0 = r0.<java.util.SimpleTimeZone: int startMonth>;
        $i1 = r0.<java.util.SimpleTimeZone: int startDay>;
        $i2 = $i0 ^ $i1;
        $i3 = r0.<java.util.SimpleTimeZone: int startDayOfWeek>;
        $i4 = $i2 ^ $i3;
        $i5 = r0.<java.util.SimpleTimeZone: int startTime>;
        $i6 = $i4 ^ $i5;
        $i7 = r0.<java.util.SimpleTimeZone: int endMonth>;
        $i8 = $i6 ^ $i7;
        $i9 = r0.<java.util.SimpleTimeZone: int endDay>;
        $i10 = $i8 ^ $i9;
        $i11 = r0.<java.util.SimpleTimeZone: int endDayOfWeek>;
        $i12 = $i10 ^ $i11;
        $i13 = r0.<java.util.SimpleTimeZone: int endTime>;
        $i14 = $i12 ^ $i13;
        $i15 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        $i16 = $i14 ^ $i15;
        return $i16;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.SimpleTimeZone r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r3, $r4;

        r0 := @this: java.util.SimpleTimeZone;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof java.util.SimpleTimeZone;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.util.SimpleTimeZone) r1;
        $r3 = virtualinvoke r0.<java.util.SimpleTimeZone: java.lang.String getID()>();
        $r4 = virtualinvoke r2.<java.util.SimpleTimeZone: java.lang.String getID()>();
        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);
        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<java.util.SimpleTimeZone: boolean hasSameRules(java.util.TimeZone)>(r2);
        if $z2 == 0 goto label2;

        $z3 = 1;
        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public boolean hasSameRules(java.util.TimeZone)
    {
        java.util.SimpleTimeZone r0, r2;
        java.util.TimeZone r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;

        r0 := @this: java.util.SimpleTimeZone;
        r1 := @parameter0: java.util.TimeZone;
        if r0 != r1 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof java.util.SimpleTimeZone;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.util.SimpleTimeZone) r1;
        $i0 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        $i1 = r2.<java.util.SimpleTimeZone: int rawOffset>;
        if $i0 != $i1 goto label3;

        $z1 = r0.<java.util.SimpleTimeZone: boolean useDaylight>;
        $z2 = r2.<java.util.SimpleTimeZone: boolean useDaylight>;
        if $z1 != $z2 goto label3;

        $z3 = r0.<java.util.SimpleTimeZone: boolean useDaylight>;
        if $z3 == 0 goto label2;

        $i2 = r0.<java.util.SimpleTimeZone: int dstSavings>;
        $i3 = r2.<java.util.SimpleTimeZone: int dstSavings>;
        if $i2 != $i3 goto label3;

        $i4 = r0.<java.util.SimpleTimeZone: int startMode>;
        $i5 = r2.<java.util.SimpleTimeZone: int startMode>;
        if $i4 != $i5 goto label3;

        $i6 = r0.<java.util.SimpleTimeZone: int startMonth>;
        $i7 = r2.<java.util.SimpleTimeZone: int startMonth>;
        if $i6 != $i7 goto label3;

        $i8 = r0.<java.util.SimpleTimeZone: int startDay>;
        $i9 = r2.<java.util.SimpleTimeZone: int startDay>;
        if $i8 != $i9 goto label3;

        $i10 = r0.<java.util.SimpleTimeZone: int startDayOfWeek>;
        $i11 = r2.<java.util.SimpleTimeZone: int startDayOfWeek>;
        if $i10 != $i11 goto label3;

        $i12 = r0.<java.util.SimpleTimeZone: int startTime>;
        $i13 = r2.<java.util.SimpleTimeZone: int startTime>;
        if $i12 != $i13 goto label3;

        $i14 = r0.<java.util.SimpleTimeZone: int startTimeMode>;
        $i15 = r2.<java.util.SimpleTimeZone: int startTimeMode>;
        if $i14 != $i15 goto label3;

        $i16 = r0.<java.util.SimpleTimeZone: int endMode>;
        $i17 = r2.<java.util.SimpleTimeZone: int endMode>;
        if $i16 != $i17 goto label3;

        $i18 = r0.<java.util.SimpleTimeZone: int endMonth>;
        $i19 = r2.<java.util.SimpleTimeZone: int endMonth>;
        if $i18 != $i19 goto label3;

        $i20 = r0.<java.util.SimpleTimeZone: int endDay>;
        $i21 = r2.<java.util.SimpleTimeZone: int endDay>;
        if $i20 != $i21 goto label3;

        $i22 = r0.<java.util.SimpleTimeZone: int endDayOfWeek>;
        $i23 = r2.<java.util.SimpleTimeZone: int endDayOfWeek>;
        if $i22 != $i23 goto label3;

        $i24 = r0.<java.util.SimpleTimeZone: int endTime>;
        $i25 = r2.<java.util.SimpleTimeZone: int endTime>;
        if $i24 != $i25 goto label3;

        $i26 = r0.<java.util.SimpleTimeZone: int endTimeMode>;
        $i27 = r2.<java.util.SimpleTimeZone: int endTimeMode>;
        if $i26 != $i27 goto label3;

        $i28 = r0.<java.util.SimpleTimeZone: int startYear>;
        $i29 = r2.<java.util.SimpleTimeZone: int startYear>;
        if $i28 != $i29 goto label3;

     label2:
        $z4 = 1;
        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    public java.lang.String toString()
    {
        java.util.SimpleTimeZone r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40;
        java.lang.Class $r2;
        java.lang.String $r3, $r6, $r41;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        boolean $z0;

        r0 := @this: java.util.SimpleTimeZone;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[id=");
        $r6 = virtualinvoke r0.<java.util.SimpleTimeZone: java.lang.String getID()>();
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",offset=");
        $i0 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",dstSavings=");
        $i1 = r0.<java.util.SimpleTimeZone: int dstSavings>;
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",useDaylight=");
        $z0 = r0.<java.util.SimpleTimeZone: boolean useDaylight>;
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",startYear=");
        $i2 = r0.<java.util.SimpleTimeZone: int startYear>;
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",startMode=");
        $i3 = r0.<java.util.SimpleTimeZone: int startMode>;
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",startMonth=");
        $i4 = r0.<java.util.SimpleTimeZone: int startMonth>;
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",startDay=");
        $i5 = r0.<java.util.SimpleTimeZone: int startDay>;
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",startDayOfWeek=");
        $i6 = r0.<java.util.SimpleTimeZone: int startDayOfWeek>;
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",startTime=");
        $i7 = r0.<java.util.SimpleTimeZone: int startTime>;
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",startTimeMode=");
        $i8 = r0.<java.util.SimpleTimeZone: int startTimeMode>;
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",endMode=");
        $i9 = r0.<java.util.SimpleTimeZone: int endMode>;
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",endMonth=");
        $i10 = r0.<java.util.SimpleTimeZone: int endMonth>;
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",endDay=");
        $i11 = r0.<java.util.SimpleTimeZone: int endDay>;
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",endDayOfWeek=");
        $i12 = r0.<java.util.SimpleTimeZone: int endDayOfWeek>;
        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);
        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",endTime=");
        $i13 = r0.<java.util.SimpleTimeZone: int endTime>;
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);
        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",endTimeMode=");
        $i14 = r0.<java.util.SimpleTimeZone: int endTimeMode>;
        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);
        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r41;
    }

    private synchronized void invalidateCache()
    {
        java.util.SimpleTimeZone r0;
        long $l0, $l3;
        int $i1, $i2;

        r0 := @this: java.util.SimpleTimeZone;
        $i1 = r0.<java.util.SimpleTimeZone: int startYear>;
        $i2 = $i1 - 1;
        $l3 = (long) $i2;
        r0.<java.util.SimpleTimeZone: long cacheYear> = $l3;
        $l0 = 0L;
        r0.<java.util.SimpleTimeZone: long cacheEnd> = $l0;
        r0.<java.util.SimpleTimeZone: long cacheStart> = $l0;
        return;
    }

    private void decodeRules()
    {
        java.util.SimpleTimeZone r0;

        r0 := @this: java.util.SimpleTimeZone;
        specialinvoke r0.<java.util.SimpleTimeZone: void decodeStartRule()>();
        specialinvoke r0.<java.util.SimpleTimeZone: void decodeEndRule()>();
        return;
    }

    private void decodeStartRule()
    {
        java.util.SimpleTimeZone r0;
        java.lang.StringBuilder $r2, $r4, $r5, $r8, $r9, $r10, $r13, $r14, $r15, $r18, $r19, $r20, $r24, $r25, $r26;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26;
        boolean $z0;
        java.lang.IllegalArgumentException $r3, $r7, $r12, $r17, $r23;
        java.lang.String $r6, $r11, $r16, $r21, $r27;
        byte[] $r22;
        byte $b25;

        r0 := @this: java.util.SimpleTimeZone;
        $i0 = r0.<java.util.SimpleTimeZone: int startDay>;
        if $i0 == 0 goto label0;

        $i1 = r0.<java.util.SimpleTimeZone: int endDay>;
        if $i1 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        r0.<java.util.SimpleTimeZone: boolean useDaylight> = $z0;
        $i2 = r0.<java.util.SimpleTimeZone: int startDay>;
        if $i2 == 0 goto label14;

        $i3 = r0.<java.util.SimpleTimeZone: int startMonth>;
        if $i3 < 0 goto label2;

        $i4 = r0.<java.util.SimpleTimeZone: int startMonth>;
        if $i4 <= 11 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal start month ");
        $i5 = r0.<java.util.SimpleTimeZone: int startMonth>;
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);
        throw $r3;

     label3:
        $i6 = r0.<java.util.SimpleTimeZone: int startTime>;
        if $i6 < 0 goto label4;

        $i7 = r0.<java.util.SimpleTimeZone: int startTime>;
        if $i7 <= 86400000 goto label5;

     label4:
        $r7 = new java.lang.IllegalArgumentException;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal start time ");
        $i8 = r0.<java.util.SimpleTimeZone: int startTime>;
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);
        throw $r7;

     label5:
        $i9 = r0.<java.util.SimpleTimeZone: int startDayOfWeek>;
        if $i9 != 0 goto label6;

        r0.<java.util.SimpleTimeZone: int startMode> = 1;
        goto label10;

     label6:
        $i10 = r0.<java.util.SimpleTimeZone: int startDayOfWeek>;
        if $i10 <= 0 goto label7;

        r0.<java.util.SimpleTimeZone: int startMode> = 2;
        goto label9;

     label7:
        $i11 = r0.<java.util.SimpleTimeZone: int startDayOfWeek>;
        $i12 = neg $i11;
        r0.<java.util.SimpleTimeZone: int startDayOfWeek> = $i12;
        $i13 = r0.<java.util.SimpleTimeZone: int startDay>;
        if $i13 <= 0 goto label8;

        r0.<java.util.SimpleTimeZone: int startMode> = 3;
        goto label9;

     label8:
        $i14 = r0.<java.util.SimpleTimeZone: int startDay>;
        $i15 = neg $i14;
        r0.<java.util.SimpleTimeZone: int startDay> = $i15;
        r0.<java.util.SimpleTimeZone: int startMode> = 4;

     label9:
        $i16 = r0.<java.util.SimpleTimeZone: int startDayOfWeek>;
        if $i16 <= 7 goto label10;

        $r12 = new java.lang.IllegalArgumentException;
        $r13 = new java.lang.StringBuilder;
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal start day of week ");
        $i17 = r0.<java.util.SimpleTimeZone: int startDayOfWeek>;
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);
        throw $r12;

     label10:
        $i18 = r0.<java.util.SimpleTimeZone: int startMode>;
        if $i18 != 2 goto label12;

        $i19 = r0.<java.util.SimpleTimeZone: int startDay>;
        if $i19 < -5 goto label11;

        $i20 = r0.<java.util.SimpleTimeZone: int startDay>;
        if $i20 <= 5 goto label14;

     label11:
        $r17 = new java.lang.IllegalArgumentException;
        $r18 = new java.lang.StringBuilder;
        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal start day of week in month ");
        $i21 = r0.<java.util.SimpleTimeZone: int startDay>;
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);
        throw $r17;

     label12:
        $i22 = r0.<java.util.SimpleTimeZone: int startDay>;
        if $i22 < 1 goto label13;

        $i23 = r0.<java.util.SimpleTimeZone: int startDay>;
        $r22 = <java.util.SimpleTimeZone: byte[] staticMonthLength>;
        $i24 = r0.<java.util.SimpleTimeZone: int startMonth>;
        $b25 = $r22[$i24];
        if $i23 <= $b25 goto label14;

     label13:
        $r23 = new java.lang.IllegalArgumentException;
        $r24 = new java.lang.StringBuilder;
        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal start day ");
        $i26 = r0.<java.util.SimpleTimeZone: int startDay>;
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i26);
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r27);
        throw $r23;

     label14:
        return;
    }

    private void decodeEndRule()
    {
        java.util.SimpleTimeZone r0;
        java.lang.StringBuilder $r2, $r4, $r5, $r8, $r9, $r10, $r13, $r14, $r15, $r18, $r19, $r20, $r24, $r25, $r26;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26;
        boolean $z0;
        java.lang.IllegalArgumentException $r3, $r7, $r12, $r17, $r23;
        java.lang.String $r6, $r11, $r16, $r21, $r27;
        byte[] $r22;
        byte $b25;

        r0 := @this: java.util.SimpleTimeZone;
        $i0 = r0.<java.util.SimpleTimeZone: int startDay>;
        if $i0 == 0 goto label0;

        $i1 = r0.<java.util.SimpleTimeZone: int endDay>;
        if $i1 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        r0.<java.util.SimpleTimeZone: boolean useDaylight> = $z0;
        $i2 = r0.<java.util.SimpleTimeZone: int endDay>;
        if $i2 == 0 goto label14;

        $i3 = r0.<java.util.SimpleTimeZone: int endMonth>;
        if $i3 < 0 goto label2;

        $i4 = r0.<java.util.SimpleTimeZone: int endMonth>;
        if $i4 <= 11 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal end month ");
        $i5 = r0.<java.util.SimpleTimeZone: int endMonth>;
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);
        throw $r3;

     label3:
        $i6 = r0.<java.util.SimpleTimeZone: int endTime>;
        if $i6 < 0 goto label4;

        $i7 = r0.<java.util.SimpleTimeZone: int endTime>;
        if $i7 <= 86400000 goto label5;

     label4:
        $r7 = new java.lang.IllegalArgumentException;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal end time ");
        $i8 = r0.<java.util.SimpleTimeZone: int endTime>;
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);
        throw $r7;

     label5:
        $i9 = r0.<java.util.SimpleTimeZone: int endDayOfWeek>;
        if $i9 != 0 goto label6;

        r0.<java.util.SimpleTimeZone: int endMode> = 1;
        goto label10;

     label6:
        $i10 = r0.<java.util.SimpleTimeZone: int endDayOfWeek>;
        if $i10 <= 0 goto label7;

        r0.<java.util.SimpleTimeZone: int endMode> = 2;
        goto label9;

     label7:
        $i11 = r0.<java.util.SimpleTimeZone: int endDayOfWeek>;
        $i12 = neg $i11;
        r0.<java.util.SimpleTimeZone: int endDayOfWeek> = $i12;
        $i13 = r0.<java.util.SimpleTimeZone: int endDay>;
        if $i13 <= 0 goto label8;

        r0.<java.util.SimpleTimeZone: int endMode> = 3;
        goto label9;

     label8:
        $i14 = r0.<java.util.SimpleTimeZone: int endDay>;
        $i15 = neg $i14;
        r0.<java.util.SimpleTimeZone: int endDay> = $i15;
        r0.<java.util.SimpleTimeZone: int endMode> = 4;

     label9:
        $i16 = r0.<java.util.SimpleTimeZone: int endDayOfWeek>;
        if $i16 <= 7 goto label10;

        $r12 = new java.lang.IllegalArgumentException;
        $r13 = new java.lang.StringBuilder;
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal end day of week ");
        $i17 = r0.<java.util.SimpleTimeZone: int endDayOfWeek>;
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);
        throw $r12;

     label10:
        $i18 = r0.<java.util.SimpleTimeZone: int endMode>;
        if $i18 != 2 goto label12;

        $i19 = r0.<java.util.SimpleTimeZone: int endDay>;
        if $i19 < -5 goto label11;

        $i20 = r0.<java.util.SimpleTimeZone: int endDay>;
        if $i20 <= 5 goto label14;

     label11:
        $r17 = new java.lang.IllegalArgumentException;
        $r18 = new java.lang.StringBuilder;
        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal end day of week in month ");
        $i21 = r0.<java.util.SimpleTimeZone: int endDay>;
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);
        throw $r17;

     label12:
        $i22 = r0.<java.util.SimpleTimeZone: int endDay>;
        if $i22 < 1 goto label13;

        $i23 = r0.<java.util.SimpleTimeZone: int endDay>;
        $r22 = <java.util.SimpleTimeZone: byte[] staticMonthLength>;
        $i24 = r0.<java.util.SimpleTimeZone: int endMonth>;
        $b25 = $r22[$i24];
        if $i23 <= $b25 goto label14;

     label13:
        $r23 = new java.lang.IllegalArgumentException;
        $r24 = new java.lang.StringBuilder;
        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal end day ");
        $i26 = r0.<java.util.SimpleTimeZone: int endDay>;
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i26);
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r27);
        throw $r23;

     label14:
        return;
    }

    private void makeRulesCompatible()
    {
        java.util.SimpleTimeZone r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62;

        r0 := @this: java.util.SimpleTimeZone;
        $i0 = r0.<java.util.SimpleTimeZone: int startMode>;
        tableswitch($i0)
        {
            case 1: goto label0;
            case 2: goto label4;
            case 3: goto label1;
            case 4: goto label2;
            default: goto label4;
        };

     label0:
        $i1 = r0.<java.util.SimpleTimeZone: int startDay>;
        $i2 = $i1 / 7;
        $i3 = 1 + $i2;
        r0.<java.util.SimpleTimeZone: int startDay> = $i3;
        r0.<java.util.SimpleTimeZone: int startDayOfWeek> = 1;
        goto label4;

     label1:
        $i4 = r0.<java.util.SimpleTimeZone: int startDay>;
        if $i4 == 1 goto label4;

        $i5 = r0.<java.util.SimpleTimeZone: int startDay>;
        $i6 = $i5 / 7;
        $i7 = 1 + $i6;
        r0.<java.util.SimpleTimeZone: int startDay> = $i7;
        goto label4;

     label2:
        $i8 = r0.<java.util.SimpleTimeZone: int startDay>;
        if $i8 < 30 goto label3;

        r0.<java.util.SimpleTimeZone: int startDay> = -1;
        goto label4;

     label3:
        $i9 = r0.<java.util.SimpleTimeZone: int startDay>;
        $i10 = $i9 / 7;
        $i11 = 1 + $i10;
        r0.<java.util.SimpleTimeZone: int startDay> = $i11;

     label4:
        $i12 = r0.<java.util.SimpleTimeZone: int endMode>;
        tableswitch($i12)
        {
            case 1: goto label5;
            case 2: goto label9;
            case 3: goto label6;
            case 4: goto label7;
            default: goto label9;
        };

     label5:
        $i13 = r0.<java.util.SimpleTimeZone: int endDay>;
        $i14 = $i13 / 7;
        $i15 = 1 + $i14;
        r0.<java.util.SimpleTimeZone: int endDay> = $i15;
        r0.<java.util.SimpleTimeZone: int endDayOfWeek> = 1;
        goto label9;

     label6:
        $i16 = r0.<java.util.SimpleTimeZone: int endDay>;
        if $i16 == 1 goto label9;

        $i17 = r0.<java.util.SimpleTimeZone: int endDay>;
        $i18 = $i17 / 7;
        $i19 = 1 + $i18;
        r0.<java.util.SimpleTimeZone: int endDay> = $i19;
        goto label9;

     label7:
        $i20 = r0.<java.util.SimpleTimeZone: int endDay>;
        if $i20 < 30 goto label8;

        r0.<java.util.SimpleTimeZone: int endDay> = -1;
        goto label9;

     label8:
        $i21 = r0.<java.util.SimpleTimeZone: int endDay>;
        $i22 = $i21 / 7;
        $i23 = 1 + $i22;
        r0.<java.util.SimpleTimeZone: int endDay> = $i23;

     label9:
        $i24 = r0.<java.util.SimpleTimeZone: int startTimeMode>;
        lookupswitch($i24)
        {
            case 2: goto label10;
            default: goto label11;
        };

     label10:
        $i25 = r0.<java.util.SimpleTimeZone: int startTime>;
        $i26 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        $i27 = $i25 + $i26;
        r0.<java.util.SimpleTimeZone: int startTime> = $i27;

     label11:
        $i28 = r0.<java.util.SimpleTimeZone: int startTime>;
        if $i28 >= 0 goto label12;

        $i29 = r0.<java.util.SimpleTimeZone: int startTime>;
        $i30 = $i29 + 86400000;
        r0.<java.util.SimpleTimeZone: int startTime> = $i30;
        $i31 = r0.<java.util.SimpleTimeZone: int startDayOfWeek>;
        $i32 = $i31 + 5;
        $i33 = $i32 % 7;
        $i34 = 1 + $i33;
        r0.<java.util.SimpleTimeZone: int startDayOfWeek> = $i34;
        goto label11;

     label12:
        $i35 = r0.<java.util.SimpleTimeZone: int startTime>;
        if $i35 < 86400000 goto label13;

        $i36 = r0.<java.util.SimpleTimeZone: int startTime>;
        $i37 = $i36 - 86400000;
        r0.<java.util.SimpleTimeZone: int startTime> = $i37;
        $i38 = r0.<java.util.SimpleTimeZone: int startDayOfWeek>;
        $i39 = $i38 % 7;
        $i40 = 1 + $i39;
        r0.<java.util.SimpleTimeZone: int startDayOfWeek> = $i40;
        goto label12;

     label13:
        $i41 = r0.<java.util.SimpleTimeZone: int endTimeMode>;
        lookupswitch($i41)
        {
            case 1: goto label15;
            case 2: goto label14;
            default: goto label16;
        };

     label14:
        $i42 = r0.<java.util.SimpleTimeZone: int endTime>;
        $i43 = r0.<java.util.SimpleTimeZone: int rawOffset>;
        $i44 = r0.<java.util.SimpleTimeZone: int dstSavings>;
        $i45 = $i43 + $i44;
        $i46 = $i42 + $i45;
        r0.<java.util.SimpleTimeZone: int endTime> = $i46;
        goto label16;

     label15:
        $i47 = r0.<java.util.SimpleTimeZone: int endTime>;
        $i48 = r0.<java.util.SimpleTimeZone: int dstSavings>;
        $i49 = $i47 + $i48;
        r0.<java.util.SimpleTimeZone: int endTime> = $i49;

     label16:
        $i50 = r0.<java.util.SimpleTimeZone: int endTime>;
        if $i50 >= 0 goto label17;

        $i51 = r0.<java.util.SimpleTimeZone: int endTime>;
        $i52 = $i51 + 86400000;
        r0.<java.util.SimpleTimeZone: int endTime> = $i52;
        $i53 = r0.<java.util.SimpleTimeZone: int endDayOfWeek>;
        $i54 = $i53 + 5;
        $i55 = $i54 % 7;
        $i56 = 1 + $i55;
        r0.<java.util.SimpleTimeZone: int endDayOfWeek> = $i56;
        goto label16;

     label17:
        $i57 = r0.<java.util.SimpleTimeZone: int endTime>;
        if $i57 < 86400000 goto label18;

        $i58 = r0.<java.util.SimpleTimeZone: int endTime>;
        $i59 = $i58 - 86400000;
        r0.<java.util.SimpleTimeZone: int endTime> = $i59;
        $i60 = r0.<java.util.SimpleTimeZone: int endDayOfWeek>;
        $i61 = $i60 % 7;
        $i62 = 1 + $i61;
        r0.<java.util.SimpleTimeZone: int endDayOfWeek> = $i62;
        goto label17;

     label18:
        return;
    }

    private byte[] packRules()
    {
        java.util.SimpleTimeZone r0;
        byte[] r1;
        int $i0, $i2, $i4, $i6, $i8, $i10;
        byte $b1, $b3, $b5, $b7, $b9, $b11;

        r0 := @this: java.util.SimpleTimeZone;
        r1 = newarray (byte)[6];
        $i0 = r0.<java.util.SimpleTimeZone: int startDay>;
        $b1 = (byte) $i0;
        r1[0] = $b1;
        $i2 = r0.<java.util.SimpleTimeZone: int startDayOfWeek>;
        $b3 = (byte) $i2;
        r1[1] = $b3;
        $i4 = r0.<java.util.SimpleTimeZone: int endDay>;
        $b5 = (byte) $i4;
        r1[2] = $b5;
        $i6 = r0.<java.util.SimpleTimeZone: int endDayOfWeek>;
        $b7 = (byte) $i6;
        r1[3] = $b7;
        $i8 = r0.<java.util.SimpleTimeZone: int startTimeMode>;
        $b9 = (byte) $i8;
        r1[4] = $b9;
        $i10 = r0.<java.util.SimpleTimeZone: int endTimeMode>;
        $b11 = (byte) $i10;
        r1[5] = $b11;
        return r1;
    }

    private void unpackRules(byte[])
    {
        java.util.SimpleTimeZone r0;
        byte[] r1;
        byte $b0, $b1, $b2, $b3, $b5, $b6;
        int $i4;

        r0 := @this: java.util.SimpleTimeZone;
        r1 := @parameter0: byte[];
        $b0 = r1[0];
        r0.<java.util.SimpleTimeZone: int startDay> = $b0;
        $b1 = r1[1];
        r0.<java.util.SimpleTimeZone: int startDayOfWeek> = $b1;
        $b2 = r1[2];
        r0.<java.util.SimpleTimeZone: int endDay> = $b2;
        $b3 = r1[3];
        r0.<java.util.SimpleTimeZone: int endDayOfWeek> = $b3;
        $i4 = lengthof r1;
        if $i4 < 6 goto label0;

        $b5 = r1[4];
        r0.<java.util.SimpleTimeZone: int startTimeMode> = $b5;
        $b6 = r1[5];
        r0.<java.util.SimpleTimeZone: int endTimeMode> = $b6;

     label0:
        return;
    }

    private int[] packTimes()
    {
        java.util.SimpleTimeZone r0;
        int[] r1;
        int $i0, $i1;

        r0 := @this: java.util.SimpleTimeZone;
        r1 = newarray (int)[2];
        $i0 = r0.<java.util.SimpleTimeZone: int startTime>;
        r1[0] = $i0;
        $i1 = r0.<java.util.SimpleTimeZone: int endTime>;
        r1[1] = $i1;
        return r1;
    }

    private void unpackTimes(int[])
    {
        java.util.SimpleTimeZone r0;
        int[] r1;
        int $i0, $i1;

        r0 := @this: java.util.SimpleTimeZone;
        r1 := @parameter0: int[];
        $i0 = r1[0];
        r0.<java.util.SimpleTimeZone: int startTime> = $i0;
        $i1 = r1[1];
        r0.<java.util.SimpleTimeZone: int endTime> = $i1;
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.SimpleTimeZone r0;
        java.io.ObjectOutputStream r1;
        byte[] r2;
        int[] r3;
        int $i0;

        r0 := @this: java.util.SimpleTimeZone;
        r1 := @parameter0: java.io.ObjectOutputStream;
        r2 = specialinvoke r0.<java.util.SimpleTimeZone: byte[] packRules()>();
        r3 = specialinvoke r0.<java.util.SimpleTimeZone: int[] packTimes()>();
        specialinvoke r0.<java.util.SimpleTimeZone: void makeRulesCompatible()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        $i0 = lengthof r2;
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);
        virtualinvoke r1.<java.io.ObjectOutputStream: void write(byte[])>(r2);
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r3);
        specialinvoke r0.<java.util.SimpleTimeZone: void unpackRules(byte[])>(r2);
        specialinvoke r0.<java.util.SimpleTimeZone: void unpackTimes(int[])>(r3);
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.SimpleTimeZone r0;
        java.io.ObjectInputStream r1;
        byte $b0;
        int i1, $i2, $i3, $i4, $i5;
        byte[] r2;
        java.lang.Object $r3;
        int[] $r4, r5;

        r0 := @this: java.util.SimpleTimeZone;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        $i2 = r0.<java.util.SimpleTimeZone: int serialVersionOnStream>;
        if $i2 >= 1 goto label2;

        $i3 = r0.<java.util.SimpleTimeZone: int startDayOfWeek>;
        if $i3 != 0 goto label0;

        r0.<java.util.SimpleTimeZone: int startDayOfWeek> = 1;

     label0:
        $i4 = r0.<java.util.SimpleTimeZone: int endDayOfWeek>;
        if $i4 != 0 goto label1;

        r0.<java.util.SimpleTimeZone: int endDayOfWeek> = 1;

     label1:
        $b0 = 2;
        r0.<java.util.SimpleTimeZone: int endMode> = $b0;
        r0.<java.util.SimpleTimeZone: int startMode> = $b0;
        r0.<java.util.SimpleTimeZone: int dstSavings> = 3600000;
        goto label3;

     label2:
        i1 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();
        r2 = newarray (byte)[i1];
        virtualinvoke r1.<java.io.ObjectInputStream: void readFully(byte[])>(r2);
        specialinvoke r0.<java.util.SimpleTimeZone: void unpackRules(byte[])>(r2);

     label3:
        $i5 = r0.<java.util.SimpleTimeZone: int serialVersionOnStream>;
        if $i5 < 2 goto label4;

        $r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        $r4 = (int[]) $r3;
        r5 = (int[]) $r4;
        specialinvoke r0.<java.util.SimpleTimeZone: void unpackTimes(int[])>(r5);

     label4:
        r0.<java.util.SimpleTimeZone: int serialVersionOnStream> = 2;
        return;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1;
        sun.util.calendar.Gregorian $r2;

        $r0 = newarray (byte)[12];
        $r0[0] = 31;
        $r0[1] = 28;
        $r0[2] = 31;
        $r0[3] = 30;
        $r0[4] = 31;
        $r0[5] = 30;
        $r0[6] = 31;
        $r0[7] = 31;
        $r0[8] = 30;
        $r0[9] = 31;
        $r0[10] = 30;
        $r0[11] = 31;
        <java.util.SimpleTimeZone: byte[] staticMonthLength> = $r0;
        $r1 = newarray (byte)[12];
        $r1[0] = 31;
        $r1[1] = 29;
        $r1[2] = 31;
        $r1[3] = 30;
        $r1[4] = 31;
        $r1[5] = 30;
        $r1[6] = 31;
        $r1[7] = 31;
        $r1[8] = 30;
        $r1[9] = 31;
        $r1[10] = 30;
        $r1[11] = 31;
        <java.util.SimpleTimeZone: byte[] staticLeapMonthLength> = $r1;
        $r2 = staticinvoke <sun.util.calendar.CalendarSystem: sun.util.calendar.Gregorian getGregorianCalendar()>();
        <java.util.SimpleTimeZone: sun.util.calendar.Gregorian gcal> = $r2;
        return;
    }
}
