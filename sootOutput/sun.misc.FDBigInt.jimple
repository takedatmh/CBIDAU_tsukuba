class sun.misc.FDBigInt extends java.lang.Object
{
    int nWords;
    int[] data;
    static final boolean $assertionsDisabled;

    public void <init>(int)
    {
        sun.misc.FDBigInt r0;
        int i0;
        int[] $r1, $r2;

        r0 := @this: sun.misc.FDBigInt;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.misc.FDBigInt: int nWords> = 1;
        $r1 = newarray (int)[1];
        r0.<sun.misc.FDBigInt: int[] data> = $r1;
        $r2 = r0.<sun.misc.FDBigInt: int[] data>;
        $r2[0] = i0;
        return;
    }

    public void <init>(long)
    {
        sun.misc.FDBigInt r0;
        long l0, $l2;
        int[] $r1, $r2, $r3, $r5;
        int $i1, $i3, $i4;
        byte $b5;

        r0 := @this: sun.misc.FDBigInt;
        l0 := @parameter0: long;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = newarray (int)[2];
        r0.<sun.misc.FDBigInt: int[] data> = $r1;
        $r2 = r0.<sun.misc.FDBigInt: int[] data>;
        $i1 = (int) l0;
        $r2[0] = $i1;
        $r3 = r0.<sun.misc.FDBigInt: int[] data>;
        $l2 = l0 >>> 32;
        $i3 = (int) $l2;
        $r3[1] = $i3;
        $r5 = r0.<sun.misc.FDBigInt: int[] data>;
        $i4 = $r5[1];
        if $i4 != 0 goto label0;

        $b5 = 1;
        goto label1;

     label0:
        $b5 = 2;

     label1:
        r0.<sun.misc.FDBigInt: int nWords> = $b5;
        return;
    }

    public void <init>(sun.misc.FDBigInt)
    {
        sun.misc.FDBigInt r0, r1;
        int $i0, $i1;
        int[] $r2, $r3, $r4;

        r0 := @this: sun.misc.FDBigInt;
        r1 := @parameter0: sun.misc.FDBigInt;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $i0 = r1.<sun.misc.FDBigInt: int nWords>;
        r0.<sun.misc.FDBigInt: int nWords> = $i0;
        $r2 = newarray (int)[$i0];
        r0.<sun.misc.FDBigInt: int[] data> = $r2;
        $r3 = r1.<sun.misc.FDBigInt: int[] data>;
        $r4 = r0.<sun.misc.FDBigInt: int[] data>;
        $i1 = r0.<sun.misc.FDBigInt: int nWords>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, 0, $i1);
        return;
    }

    private void <init>(int[], int)
    {
        sun.misc.FDBigInt r0;
        int[] r1;
        int i0;

        r0 := @this: sun.misc.FDBigInt;
        r1 := @parameter0: int[];
        i0 := @parameter1: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.misc.FDBigInt: int[] data> = r1;
        r0.<sun.misc.FDBigInt: int nWords> = i0;
        return;
    }

    public void <init>(long, char[], int, int)
    {
        sun.misc.FDBigInt r0;
        long l0, $l10;
        char[] r1;
        int i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i11, $i12, $i14, $i16, $i17, $i19, i20, i21, $i22, $i23, $i25;
        int[] $r2, $r3, $r4, $r6;
        byte $b13;
        char $c15, $c18, $c24;

        r0 := @this: sun.misc.FDBigInt;
        l0 := @parameter0: long;
        r1 := @parameter1: char[];
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $i8 = i2 + 8;
        i3 = $i8 / 9;
        if i3 >= 2 goto label0;

        i3 = 2;

     label0:
        $r2 = newarray (int)[i3];
        r0.<sun.misc.FDBigInt: int[] data> = $r2;
        $r3 = r0.<sun.misc.FDBigInt: int[] data>;
        $i9 = (int) l0;
        $r3[0] = $i9;
        $r4 = r0.<sun.misc.FDBigInt: int[] data>;
        $l10 = l0 >>> 32;
        $i11 = (int) $l10;
        $r4[1] = $i11;
        $r6 = r0.<sun.misc.FDBigInt: int[] data>;
        $i12 = $r6[1];
        if $i12 != 0 goto label1;

        $b13 = 1;
        goto label2;

     label1:
        $b13 = 2;

     label2:
        r0.<sun.misc.FDBigInt: int nWords> = $b13;
        i4 = i1;
        i5 = i2 - 5;

     label3:
        if i4 >= i5 goto label6;

        i6 = i4 + 5;
        $i14 = i4;
        i4 = i4 + 1;
        $c15 = r1[$i14];
        i7 = $c15 - 48;

     label4:
        if i4 >= i6 goto label5;

        $i16 = 10 * i7;
        $i17 = i4;
        i4 = i4 + 1;
        $c18 = r1[$i17];
        $i19 = $i16 + $c18;
        i7 = $i19 - 48;
        goto label4;

     label5:
        virtualinvoke r0.<sun.misc.FDBigInt: void multaddMe(int,int)>(100000, i7);
        goto label3;

     label6:
        i20 = 1;
        i21 = 0;

     label7:
        if i4 >= i2 goto label8;

        $i22 = 10 * i21;
        $i23 = i4;
        i4 = i4 + 1;
        $c24 = r1[$i23];
        $i25 = $i22 + $c24;
        i21 = $i25 - 48;
        i20 = i20 * 10;
        goto label7;

     label8:
        if i20 == 1 goto label9;

        virtualinvoke r0.<sun.misc.FDBigInt: void multaddMe(int,int)>(i20, i21);

     label9:
        return;
    }

    public void lshiftMe(int) throws java.lang.IllegalArgumentException
    {
        sun.misc.FDBigInt r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37;
        int[] r1, r2, $r5;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: sun.misc.FDBigInt;
        i0 := @parameter0: int;
        if i0 > 0 goto label1;

        if i0 != 0 goto label0;

        return;

     label0:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("negative shift count");
        throw $r3;

     label1:
        i1 = i0 >> 5;
        i2 = i0 & 31;
        i3 = 32 - i2;
        r1 = r0.<sun.misc.FDBigInt: int[] data>;
        r2 = r0.<sun.misc.FDBigInt: int[] data>;
        $i6 = r0.<sun.misc.FDBigInt: int nWords>;
        $i7 = $i6 + i1;
        $i8 = $i7 + 1;
        $i9 = lengthof r1;
        if $i8 <= $i9 goto label2;

        $i10 = r0.<sun.misc.FDBigInt: int nWords>;
        $i11 = $i10 + i1;
        $i12 = $i11 + 1;
        r1 = newarray (int)[$i12];

     label2:
        $i13 = r0.<sun.misc.FDBigInt: int nWords>;
        i4 = $i13 + i1;
        $i14 = r0.<sun.misc.FDBigInt: int nWords>;
        i5 = $i14 - 1;
        if i2 != 0 goto label3;

        $i15 = r0.<sun.misc.FDBigInt: int nWords>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, i1, $i15);
        i16 = i1 - 1;
        goto label6;

     label3:
        i17 = i4 + -1;
        $i18 = r2[i5];
        $i19 = $i18 >>> i3;
        r1[i4] = $i19;

     label4:
        if i5 < 1 goto label5;

        $i20 = i17;
        i17 = i17 + -1;
        $i21 = r2[i5];
        $i22 = $i21 << i2;
        i5 = i5 + -1;
        $i23 = r2[i5];
        $i24 = $i23 >>> i3;
        $i25 = $i22 | $i24;
        r1[$i20] = $i25;
        goto label4;

     label5:
        i16 = i17 + -1;
        $i26 = r2[i5];
        $i27 = $i26 << i2;
        r1[i17] = $i27;

     label6:
        if i16 < 0 goto label7;

        $i28 = i16;
        i16 = i16 + -1;
        r1[$i28] = 0;
        goto label6;

     label7:
        r0.<sun.misc.FDBigInt: int[] data> = r1;
        $i29 = r0.<sun.misc.FDBigInt: int nWords>;
        $i30 = i1 + 1;
        $i31 = $i29 + $i30;
        r0.<sun.misc.FDBigInt: int nWords> = $i31;

     label8:
        $i32 = r0.<sun.misc.FDBigInt: int nWords>;
        if $i32 <= 1 goto label9;

        $r5 = r0.<sun.misc.FDBigInt: int[] data>;
        $i33 = r0.<sun.misc.FDBigInt: int nWords>;
        $i34 = $i33 - 1;
        $i35 = $r5[$i34];
        if $i35 != 0 goto label9;

        $i36 = r0.<sun.misc.FDBigInt: int nWords>;
        $i37 = $i36 - 1;
        r0.<sun.misc.FDBigInt: int nWords> = $i37;
        goto label8;

     label9:
        return;
    }

    public int normalizeMe() throws java.lang.IllegalArgumentException
    {
        sun.misc.FDBigInt r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: sun.misc.FDBigInt;
        i0 = 0;
        i1 = 0;
        i2 = 0;
        $i4 = r0.<sun.misc.FDBigInt: int nWords>;
        i3 = $i4 - 1;

     label0:
        if i3 < 0 goto label1;

        $r1 = r0.<sun.misc.FDBigInt: int[] data>;
        $i5 = $r1[i3];
        i2 = $i5;
        if $i5 != 0 goto label1;

        i0 = i0 + 1;
        i3 = i3 + -1;
        goto label0;

     label1:
        if i3 >= 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("zero value");
        throw $r2;

     label2:
        $i6 = r0.<sun.misc.FDBigInt: int nWords>;
        $i7 = $i6 - i0;
        r0.<sun.misc.FDBigInt: int nWords> = $i7;
        $i8 = i2 & -268435456;
        if $i8 == 0 goto label4;

        i1 = 32;

     label3:
        $i9 = i2 & -268435456;
        if $i9 == 0 goto label6;

        i2 = i2 >>> 1;
        i1 = i1 + -1;
        goto label3;

     label4:
        if i2 > 1048575 goto label5;

        i2 = i2 << 8;
        i1 = i1 + 8;
        goto label4;

     label5:
        if i2 > 134217727 goto label6;

        i2 = i2 << 1;
        i1 = i1 + 1;
        goto label5;

     label6:
        if i1 == 0 goto label7;

        virtualinvoke r0.<sun.misc.FDBigInt: void lshiftMe(int)>(i1);

     label7:
        return i1;
    }

    public sun.misc.FDBigInt mult(int)
    {
        sun.misc.FDBigInt r0, $r4, $r5;
        int i0, i3, $i4, $i5, $i6, $i11, $i12, $i13, $i14, $i19, $i21, $i22, $i23, $i24, $i25;
        long l1, l2, $l7, $l8, $l9, $l15, $l16, $l17, l18;
        int[] r1, $r2, $r3;
        byte $b10, $b20;

        r0 := @this: sun.misc.FDBigInt;
        i0 := @parameter0: int;
        l1 = (long) i0;
        $r2 = r0.<sun.misc.FDBigInt: int[] data>;
        $i4 = r0.<sun.misc.FDBigInt: int nWords>;
        $i5 = $i4 - 1;
        $i6 = $r2[$i5];
        $l7 = (long) $i6;
        $l8 = $l7 & 4294967295L;
        $l9 = l1 * $l8;
        $b10 = $l9 cmp 268435455L;
        if $b10 <= 0 goto label0;

        $i11 = r0.<sun.misc.FDBigInt: int nWords>;
        $i12 = $i11 + 1;
        goto label1;

     label0:
        $i12 = r0.<sun.misc.FDBigInt: int nWords>;

     label1:
        r1 = newarray (int)[$i12];
        l2 = 0L;
        i3 = 0;

     label2:
        $i13 = r0.<sun.misc.FDBigInt: int nWords>;
        if i3 >= $i13 goto label3;

        $r3 = r0.<sun.misc.FDBigInt: int[] data>;
        $i14 = $r3[i3];
        $l15 = (long) $i14;
        $l16 = $l15 & 4294967295L;
        $l17 = l1 * $l16;
        l18 = l2 + $l17;
        $i19 = (int) l18;
        r1[i3] = $i19;
        l2 = l18 >>> 32;
        i3 = i3 + 1;
        goto label2;

     label3:
        $b20 = l2 cmp 0L;
        if $b20 != 0 goto label4;

        $r4 = new sun.misc.FDBigInt;
        $i21 = r0.<sun.misc.FDBigInt: int nWords>;
        specialinvoke $r4.<sun.misc.FDBigInt: void <init>(int[],int)>(r1, $i21);
        return $r4;

     label4:
        $i22 = r0.<sun.misc.FDBigInt: int nWords>;
        $i23 = (int) l2;
        r1[$i22] = $i23;
        $r5 = new sun.misc.FDBigInt;
        $i24 = r0.<sun.misc.FDBigInt: int nWords>;
        $i25 = $i24 + 1;
        specialinvoke $r5.<sun.misc.FDBigInt: void <init>(int[],int)>(r1, $i25);
        return $r5;
    }

    public void multaddMe(int, int)
    {
        sun.misc.FDBigInt r0;
        int i0, i1, i4, $i5, $i11, $i13, $i14, $i19, $i21, $i22, $i23, $i24;
        long l2, l3, $l6, $l7, $l8, $l9, $l10, l12, $l15, $l16, $l17, l18;
        int[] $r1, $r2, $r3, $r4, $r5;
        byte $b20;

        r0 := @this: sun.misc.FDBigInt;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        l2 = (long) i0;
        $r1 = r0.<sun.misc.FDBigInt: int[] data>;
        $i5 = $r1[0];
        $l6 = (long) $i5;
        $l7 = $l6 & 4294967295L;
        $l8 = l2 * $l7;
        $l9 = (long) i1;
        $l10 = $l9 & 4294967295L;
        l3 = $l8 + $l10;
        $r2 = r0.<sun.misc.FDBigInt: int[] data>;
        $i11 = (int) l3;
        $r2[0] = $i11;
        l12 = l3 >>> 32;
        i4 = 1;

     label0:
        $i13 = r0.<sun.misc.FDBigInt: int nWords>;
        if i4 >= $i13 goto label1;

        $r3 = r0.<sun.misc.FDBigInt: int[] data>;
        $i14 = $r3[i4];
        $l15 = (long) $i14;
        $l16 = $l15 & 4294967295L;
        $l17 = l2 * $l16;
        l18 = l12 + $l17;
        $r4 = r0.<sun.misc.FDBigInt: int[] data>;
        $i19 = (int) l18;
        $r4[i4] = $i19;
        l12 = l18 >>> 32;
        i4 = i4 + 1;
        goto label0;

     label1:
        $b20 = l12 cmp 0L;
        if $b20 == 0 goto label2;

        $r5 = r0.<sun.misc.FDBigInt: int[] data>;
        $i21 = r0.<sun.misc.FDBigInt: int nWords>;
        $i22 = (int) l12;
        $r5[$i21] = $i22;
        $i23 = r0.<sun.misc.FDBigInt: int nWords>;
        $i24 = $i23 + 1;
        r0.<sun.misc.FDBigInt: int nWords> = $i24;

     label2:
        return;
    }

    public sun.misc.FDBigInt mult(sun.misc.FDBigInt)
    {
        sun.misc.FDBigInt r0, r1, $r5;
        int[] r2, $r3, $r4;
        int i0, i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i15, $i21, $i22, $i23, $i24, $i25, i26, $i27, $i28;
        long l1, l2, $l9, $l13, $l14, $l16, $l17, $l18, $l19, l20;

        r0 := @this: sun.misc.FDBigInt;
        r1 := @parameter0: sun.misc.FDBigInt;
        $i4 = r0.<sun.misc.FDBigInt: int nWords>;
        $i5 = r1.<sun.misc.FDBigInt: int nWords>;
        $i6 = $i4 + $i5;
        r2 = newarray (int)[$i6];
        i0 = 0;

     label0:
        $i7 = r0.<sun.misc.FDBigInt: int nWords>;
        if i0 >= $i7 goto label3;

        $r3 = r0.<sun.misc.FDBigInt: int[] data>;
        $i8 = $r3[i0];
        $l9 = (long) $i8;
        l1 = $l9 & 4294967295L;
        l2 = 0L;
        i3 = 0;

     label1:
        $i10 = r1.<sun.misc.FDBigInt: int nWords>;
        if i3 >= $i10 goto label2;

        $i11 = i0 + i3;
        $i12 = r2[$i11];
        $l13 = (long) $i12;
        $l14 = $l13 & 4294967295L;
        $r4 = r1.<sun.misc.FDBigInt: int[] data>;
        $i15 = $r4[i3];
        $l16 = (long) $i15;
        $l17 = $l16 & 4294967295L;
        $l18 = l1 * $l17;
        $l19 = $l14 + $l18;
        l20 = l2 + $l19;
        $i21 = i0 + i3;
        $i22 = (int) l20;
        r2[$i21] = $i22;
        l2 = l20 >>> 32;
        i3 = i3 + 1;
        goto label1;

     label2:
        $i23 = i0 + i3;
        $i24 = (int) l2;
        r2[$i23] = $i24;
        i0 = i0 + 1;
        goto label0;

     label3:
        $i25 = lengthof r2;
        i26 = $i25 - 1;

     label4:
        if i26 <= 0 goto label6;

        $i27 = r2[i26];
        if $i27 == 0 goto label5;

        goto label6;

     label5:
        i26 = i26 + -1;
        goto label4;

     label6:
        $r5 = new sun.misc.FDBigInt;
        $i28 = i26 + 1;
        specialinvoke $r5.<sun.misc.FDBigInt: void <init>(int[],int)>(r2, $i28);
        return $r5;
    }

    public sun.misc.FDBigInt add(sun.misc.FDBigInt)
    {
        sun.misc.FDBigInt r0, r1, $r6, $r7;
        long l0, $l7, $l8, l9, $l11, $l12;
        int[] r2, r3, r4, r5;
        int i1, i2, i3, $i4, $i5, $i6, $i10, $i13, $i15, $i16, $i17, i18, $i19;
        byte $b14;

        r0 := @this: sun.misc.FDBigInt;
        r1 := @parameter0: sun.misc.FDBigInt;
        l0 = 0L;
        $i4 = r0.<sun.misc.FDBigInt: int nWords>;
        $i5 = r1.<sun.misc.FDBigInt: int nWords>;
        if $i4 < $i5 goto label0;

        r2 = r0.<sun.misc.FDBigInt: int[] data>;
        i1 = r0.<sun.misc.FDBigInt: int nWords>;
        r3 = r1.<sun.misc.FDBigInt: int[] data>;
        i2 = r1.<sun.misc.FDBigInt: int nWords>;
        goto label1;

     label0:
        r2 = r1.<sun.misc.FDBigInt: int[] data>;
        i1 = r1.<sun.misc.FDBigInt: int nWords>;
        r3 = r0.<sun.misc.FDBigInt: int[] data>;
        i2 = r0.<sun.misc.FDBigInt: int nWords>;

     label1:
        r4 = newarray (int)[i1];
        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        $i6 = r2[i3];
        $l7 = (long) $i6;
        $l8 = $l7 & 4294967295L;
        l9 = l0 + $l8;
        if i3 >= i2 goto label3;

        $i10 = r3[i3];
        $l11 = (long) $i10;
        $l12 = $l11 & 4294967295L;
        l9 = l9 + $l12;

     label3:
        $i13 = (int) l9;
        r4[i3] = $i13;
        l0 = l9 >> 32;
        i3 = i3 + 1;
        goto label2;

     label4:
        $b14 = l0 cmp 0L;
        if $b14 == 0 goto label5;

        $i15 = lengthof r4;
        $i16 = $i15 + 1;
        r5 = newarray (int)[$i16];
        $i17 = lengthof r4;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r5, 0, $i17);
        i18 = i3 + 1;
        $i19 = (int) l0;
        r5[i3] = $i19;
        $r6 = new sun.misc.FDBigInt;
        specialinvoke $r6.<sun.misc.FDBigInt: void <init>(int[],int)>(r5, i18);
        return $r6;

     label5:
        $r7 = new sun.misc.FDBigInt;
        specialinvoke $r7.<sun.misc.FDBigInt: void <init>(int[],int)>(r4, i3);
        return $r7;
    }

    public sun.misc.FDBigInt sub(sun.misc.FDBigInt)
    {
        sun.misc.FDBigInt r0, r1, $r7;
        int[] r2, $r3, $r4;
        int i0, i1, i2, i4, $i5, $i6, $i10, $i13, $i15;
        long l3, $l7, $l8, l9, $l11, $l12;
        boolean $z0, $z1, $z2;
        byte $b14;
        java.lang.AssertionError $r5, $r6;

        r0 := @this: sun.misc.FDBigInt;
        r1 := @parameter0: sun.misc.FDBigInt;
        $i5 = r0.<sun.misc.FDBigInt: int nWords>;
        r2 = newarray (int)[$i5];
        i0 = r0.<sun.misc.FDBigInt: int nWords>;
        i1 = r1.<sun.misc.FDBigInt: int nWords>;
        i2 = 0;
        l3 = 0L;
        i4 = 0;

     label0:
        if i4 >= i0 goto label4;

        $r3 = r0.<sun.misc.FDBigInt: int[] data>;
        $i6 = $r3[i4];
        $l7 = (long) $i6;
        $l8 = $l7 & 4294967295L;
        l9 = l3 + $l8;
        if i4 >= i1 goto label1;

        $r4 = r1.<sun.misc.FDBigInt: int[] data>;
        $i10 = $r4[i4];
        $l11 = (long) $i10;
        $l12 = $l11 & 4294967295L;
        l9 = l9 - $l12;

     label1:
        $i13 = (int) l9;
        r2[i4] = $i13;
        if $i13 != 0 goto label2;

        i2 = i2 + 1;
        goto label3;

     label2:
        i2 = 0;

     label3:
        l3 = l9 >> 32;
        i4 = i4 + 1;
        goto label0;

     label4:
        $z0 = <sun.misc.FDBigInt: boolean $assertionsDisabled>;
        if $z0 != 0 goto label5;

        $b14 = l3 cmp 0L;
        if $b14 == 0 goto label5;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>(long)>(l3);
        throw $r5;

     label5:
        $z1 = <sun.misc.FDBigInt: boolean $assertionsDisabled>;
        if $z1 != 0 goto label6;

        $z2 = staticinvoke <sun.misc.FDBigInt: boolean dataInRangeIsZero(int,int,sun.misc.FDBigInt)>(i4, i1, r1);
        if $z2 != 0 goto label6;

        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label6:
        $r7 = new sun.misc.FDBigInt;
        $i15 = i0 - i2;
        specialinvoke $r7.<sun.misc.FDBigInt: void <init>(int[],int)>(r2, $i15);
        return $r7;
    }

    private static boolean dataInRangeIsZero(int, int, sun.misc.FDBigInt)
    {
        int i0, i1, $i2, $i3;
        sun.misc.FDBigInt r0;
        int[] $r1;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r0 := @parameter2: sun.misc.FDBigInt;

     label0:
        if i0 >= i1 goto label1;

        $r1 = r0.<sun.misc.FDBigInt: int[] data>;
        $i2 = i0;
        i0 = i0 + 1;
        $i3 = $r1[$i2];
        if $i3 == 0 goto label0;

        return 0;

     label1:
        return 1;
    }

    public int 'cmp'(sun.misc.FDBigInt)
    {
        sun.misc.FDBigInt r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, i17, $i18, $i19;
        int[] $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: sun.misc.FDBigInt;
        r1 := @parameter0: sun.misc.FDBigInt;
        $i3 = r0.<sun.misc.FDBigInt: int nWords>;
        $i4 = r1.<sun.misc.FDBigInt: int nWords>;
        if $i3 <= $i4 goto label3;

        $i5 = r1.<sun.misc.FDBigInt: int nWords>;
        i0 = $i5 - 1;
        $i6 = r0.<sun.misc.FDBigInt: int nWords>;
        i1 = $i6 - 1;

     label0:
        if i1 <= i0 goto label2;

        $r2 = r0.<sun.misc.FDBigInt: int[] data>;
        $i7 = $r2[i1];
        if $i7 == 0 goto label1;

        return 1;

     label1:
        i1 = i1 + -1;
        goto label0;

     label2:
        goto label8;

     label3:
        $i8 = r0.<sun.misc.FDBigInt: int nWords>;
        $i9 = r1.<sun.misc.FDBigInt: int nWords>;
        if $i8 >= $i9 goto label7;

        $i10 = r0.<sun.misc.FDBigInt: int nWords>;
        i11 = $i10 - 1;
        $i12 = r1.<sun.misc.FDBigInt: int nWords>;
        i1 = $i12 - 1;

     label4:
        if i1 <= i11 goto label6;

        $r3 = r1.<sun.misc.FDBigInt: int[] data>;
        $i13 = $r3[i1];
        if $i13 == 0 goto label5;

        return -1;

     label5:
        i1 = i1 + -1;
        goto label4;

     label6:
        goto label8;

     label7:
        $i14 = r0.<sun.misc.FDBigInt: int nWords>;
        i1 = $i14 - 1;

     label8:
        if i1 <= 0 goto label10;

        $r4 = r0.<sun.misc.FDBigInt: int[] data>;
        $i15 = $r4[i1];
        $r5 = r1.<sun.misc.FDBigInt: int[] data>;
        $i16 = $r5[i1];
        if $i15 == $i16 goto label9;

        goto label10;

     label9:
        i1 = i1 + -1;
        goto label8;

     label10:
        $r6 = r0.<sun.misc.FDBigInt: int[] data>;
        i17 = $r6[i1];
        $r7 = r1.<sun.misc.FDBigInt: int[] data>;
        i2 = $r7[i1];
        if i17 >= 0 goto label12;

        if i2 >= 0 goto label11;

        $i18 = i17 - i2;
        return $i18;

     label11:
        return 1;

     label12:
        if i2 >= 0 goto label13;

        return -1;

     label13:
        $i19 = i17 - i2;
        return $i19;
    }

    public int quoRemIteration(sun.misc.FDBigInt) throws java.lang.IllegalArgumentException
    {
        sun.misc.FDBigInt r0, r1;
        int i0, i3, i4, $i5, $i6, $i7, $i8, $i11, $i13, $i16, $i22, $i26, $i29, $i34, i38, $i39, $i44, $i46;
        long l1, l2, $l9, $l10, $l12, $l14, $l15, $l17, $l18, $l19, $l20, l21, l24, $l27, $l28, $l30, $l31, $l32, l33, l37, $l40, $l41, $l42, l43;
        java.lang.IllegalArgumentException $r2;
        int[] $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13;
        byte $b23, $b25, $b35, $b36, $b45;
        boolean $z0, $z1;
        java.lang.AssertionError $r11, $r14;

        r0 := @this: sun.misc.FDBigInt;
        r1 := @parameter0: sun.misc.FDBigInt;
        $i5 = r0.<sun.misc.FDBigInt: int nWords>;
        $i6 = r1.<sun.misc.FDBigInt: int nWords>;
        if $i5 == $i6 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("disparate values");
        throw $r2;

     label0:
        $i7 = r0.<sun.misc.FDBigInt: int nWords>;
        i0 = $i7 - 1;
        $r3 = r0.<sun.misc.FDBigInt: int[] data>;
        $i8 = $r3[i0];
        $l9 = (long) $i8;
        $l10 = $l9 & 4294967295L;
        $r4 = r1.<sun.misc.FDBigInt: int[] data>;
        $i11 = $r4[i0];
        $l12 = (long) $i11;
        l1 = $l10 / $l12;
        l2 = 0L;
        i3 = 0;

     label1:
        if i3 > i0 goto label2;

        $r5 = r0.<sun.misc.FDBigInt: int[] data>;
        $i13 = $r5[i3];
        $l14 = (long) $i13;
        $l15 = $l14 & 4294967295L;
        $r6 = r1.<sun.misc.FDBigInt: int[] data>;
        $i16 = $r6[i3];
        $l17 = (long) $i16;
        $l18 = $l17 & 4294967295L;
        $l19 = l1 * $l18;
        $l20 = $l15 - $l19;
        l21 = l2 + $l20;
        $r7 = r0.<sun.misc.FDBigInt: int[] data>;
        $i22 = (int) l21;
        $r7[i3] = $i22;
        l2 = l21 >> 32;
        i3 = i3 + 1;
        goto label1;

     label2:
        $b23 = l2 cmp 0L;
        if $b23 == 0 goto label7;

        l24 = 0L;

     label3:
        $b25 = l24 cmp 0L;
        if $b25 != 0 goto label7;

        l24 = 0L;
        i4 = 0;

     label4:
        if i4 > i0 goto label5;

        $r8 = r0.<sun.misc.FDBigInt: int[] data>;
        $i26 = $r8[i4];
        $l27 = (long) $i26;
        $l28 = $l27 & 4294967295L;
        $r9 = r1.<sun.misc.FDBigInt: int[] data>;
        $i29 = $r9[i4];
        $l30 = (long) $i29;
        $l31 = $l30 & 4294967295L;
        $l32 = $l28 + $l31;
        l33 = l24 + $l32;
        $r10 = r0.<sun.misc.FDBigInt: int[] data>;
        $i34 = (int) l33;
        $r10[i4] = $i34;
        l24 = l33 >> 32;
        i4 = i4 + 1;
        goto label4;

     label5:
        $z0 = <sun.misc.FDBigInt: boolean $assertionsDisabled>;
        if $z0 != 0 goto label6;

        $b35 = l24 cmp 0L;
        if $b35 == 0 goto label6;

        $b36 = l24 cmp 1L;
        if $b36 == 0 goto label6;

        $r11 = new java.lang.AssertionError;
        specialinvoke $r11.<java.lang.AssertionError: void <init>(long)>(l24);
        throw $r11;

     label6:
        l1 = l1 - 1L;
        goto label3;

     label7:
        l37 = 0L;
        i38 = 0;

     label8:
        if i38 > i0 goto label9;

        $r12 = r0.<sun.misc.FDBigInt: int[] data>;
        $i39 = $r12[i38];
        $l40 = (long) $i39;
        $l41 = $l40 & 4294967295L;
        $l42 = 10L * $l41;
        l43 = l37 + $l42;
        $r13 = r0.<sun.misc.FDBigInt: int[] data>;
        $i44 = (int) l43;
        $r13[i38] = $i44;
        l37 = l43 >> 32;
        i38 = i38 + 1;
        goto label8;

     label9:
        $z1 = <sun.misc.FDBigInt: boolean $assertionsDisabled>;
        if $z1 != 0 goto label10;

        $b45 = l37 cmp 0L;
        if $b45 == 0 goto label10;

        $r14 = new java.lang.AssertionError;
        specialinvoke $r14.<java.lang.AssertionError: void <init>(long)>(l37);
        throw $r14;

     label10:
        $i46 = (int) l1;
        return $i46;
    }

    public long longValue()
    {
        sun.misc.FDBigInt r0;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i6, $i7, $i8, $i11;
        java.lang.AssertionError $r1, $r3, $r5;
        int[] $r2, $r4, $r6, $r7;
        long $l4, $l5, $l9, $l10, $l12, $l13, $l14;

        r0 := @this: sun.misc.FDBigInt;
        $z0 = <sun.misc.FDBigInt: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $i0 = r0.<sun.misc.FDBigInt: int nWords>;
        if $i0 > 0 goto label0;

        $r1 = new java.lang.AssertionError;
        $i1 = r0.<sun.misc.FDBigInt: int nWords>;
        specialinvoke $r1.<java.lang.AssertionError: void <init>(int)>($i1);
        throw $r1;

     label0:
        $i2 = r0.<sun.misc.FDBigInt: int nWords>;
        if $i2 != 1 goto label1;

        $r2 = r0.<sun.misc.FDBigInt: int[] data>;
        $i3 = $r2[0];
        $l4 = (long) $i3;
        $l5 = $l4 & 4294967295L;
        return $l5;

     label1:
        $z1 = <sun.misc.FDBigInt: boolean $assertionsDisabled>;
        if $z1 != 0 goto label2;

        $i6 = r0.<sun.misc.FDBigInt: int nWords>;
        $z2 = staticinvoke <sun.misc.FDBigInt: boolean dataInRangeIsZero(int,int,sun.misc.FDBigInt)>(2, $i6, r0);
        if $z2 != 0 goto label2;

        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label2:
        $z3 = <sun.misc.FDBigInt: boolean $assertionsDisabled>;
        if $z3 != 0 goto label3;

        $r4 = r0.<sun.misc.FDBigInt: int[] data>;
        $i7 = $r4[1];
        if $i7 >= 0 goto label3;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label3:
        $r6 = r0.<sun.misc.FDBigInt: int[] data>;
        $i8 = $r6[1];
        $l9 = (long) $i8;
        $l10 = $l9 << 32;
        $r7 = r0.<sun.misc.FDBigInt: int[] data>;
        $i11 = $r7[0];
        $l12 = (long) $i11;
        $l13 = $l12 & 4294967295L;
        $l14 = $l10 | $l13;
        return $l14;
    }

    public java.lang.String toString()
    {
        sun.misc.FDBigInt r0;
        java.lang.StringBuffer $r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        int[] $r4, $r5, $r8, $r15, $r19;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r11, $r12;
        java.lang.String $r13, $r16, $r20, $r23;

        r0 := @this: sun.misc.FDBigInt;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(30);
        r2 = $r1;
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);
        $i1 = r0.<sun.misc.FDBigInt: int nWords>;
        $i2 = $i1 - 1;
        $r4 = r0.<sun.misc.FDBigInt: int[] data>;
        $i3 = lengthof $r4;
        $i4 = $i3 - 1;
        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i4);
        $i5 = r0.<sun.misc.FDBigInt: int nWords>;
        $r5 = r0.<sun.misc.FDBigInt: int[] data>;
        $i6 = lengthof $r5;
        if $i5 <= $i6 goto label0;

        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");
        $r8 = r0.<sun.misc.FDBigInt: int[] data>;
        $i7 = lengthof $r8;
        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");
        $i8 = r0.<sun.misc.FDBigInt: int nWords>;
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!)");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

     label0:
        if i0 <= 0 goto label1;

        $r15 = r0.<sun.misc.FDBigInt: int[] data>;
        $i9 = $r15[i0];
        $r16 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i9);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);
        i0 = i0 + -1;
        goto label0;

     label1:
        $r19 = r0.<sun.misc.FDBigInt: int[] data>;
        $i10 = $r19[0];
        $r20 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i10);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);
        $r23 = new java.lang.String;
        specialinvoke $r23.<java.lang.String: void <init>(java.lang.StringBuffer)>(r2);
        return $r23;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/misc/FDBigInt";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.misc.FDBigInt: boolean $assertionsDisabled> = $z1;
        return;
    }
}
