public final class java.util.Locale extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
{
    private static final java.util.Locale$Cache LOCALECACHE;
    public static final java.util.Locale ENGLISH;
    public static final java.util.Locale FRENCH;
    public static final java.util.Locale GERMAN;
    public static final java.util.Locale ITALIAN;
    public static final java.util.Locale JAPANESE;
    public static final java.util.Locale KOREAN;
    public static final java.util.Locale CHINESE;
    public static final java.util.Locale SIMPLIFIED_CHINESE;
    public static final java.util.Locale TRADITIONAL_CHINESE;
    public static final java.util.Locale FRANCE;
    public static final java.util.Locale GERMANY;
    public static final java.util.Locale ITALY;
    public static final java.util.Locale JAPAN;
    public static final java.util.Locale KOREA;
    public static final java.util.Locale CHINA;
    public static final java.util.Locale PRC;
    public static final java.util.Locale TAIWAN;
    public static final java.util.Locale UK;
    public static final java.util.Locale US;
    public static final java.util.Locale CANADA;
    public static final java.util.Locale CANADA_FRENCH;
    public static final java.util.Locale ROOT;
    public static final char PRIVATE_USE_EXTENSION;
    public static final char UNICODE_LOCALE_EXTENSION;
    static final long serialVersionUID;
    private static final int DISPLAY_LANGUAGE;
    private static final int DISPLAY_COUNTRY;
    private static final int DISPLAY_VARIANT;
    private static final int DISPLAY_SCRIPT;
    private transient sun.util.locale.BaseLocale baseLocale;
    private transient sun.util.locale.LocaleExtensions localeExtensions;
    private transient volatile int hashCodeValue;
    private static java.util.Locale defaultLocale;
    private static java.util.Locale defaultDisplayLocale;
    private static java.util.Locale defaultFormatLocale;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private static volatile java.lang.String[] isoLanguages;
    private static volatile java.lang.String[] isoCountries;
    static final boolean $assertionsDisabled;

    private void <init>(sun.util.locale.BaseLocale, sun.util.locale.LocaleExtensions)
    {
        java.util.Locale r0;
        sun.util.locale.BaseLocale r1;
        sun.util.locale.LocaleExtensions r2;

        r0 := @this: java.util.Locale;
        r1 := @parameter0: sun.util.locale.BaseLocale;
        r2 := @parameter1: sun.util.locale.LocaleExtensions;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.Locale: int hashCodeValue> = 0;
        r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale> = r1;
        r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions> = r2;
        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.Locale r0;
        java.lang.String r1, r2, r3, $r5;
        java.lang.NullPointerException $r4;
        sun.util.locale.BaseLocale $r6;
        sun.util.locale.LocaleExtensions $r7;

        r0 := @this: java.util.Locale;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.Locale: int hashCodeValue> = 0;
        if r1 == null goto label0;

        if r2 == null goto label0;

        if r3 != null goto label1;

     label0:
        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label1:
        $r5 = staticinvoke <java.util.Locale: java.lang.String convertOldISOCodes(java.lang.String)>(r1);
        $r6 = staticinvoke <sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r5, "", r2, r3);
        r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale> = $r6;
        $r7 = staticinvoke <java.util.Locale: sun.util.locale.LocaleExtensions getCompatibilityExtensions(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, "", r2, r3);
        r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions> = $r7;
        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        java.util.Locale r0;
        java.lang.String r1, r2;

        r0 := @this: java.util.Locale;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        specialinvoke r0.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, "");
        return;
    }

    public void <init>(java.lang.String)
    {
        java.util.Locale r0;
        java.lang.String r1;

        r0 := @this: java.util.Locale;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r1, "", "");
        return;
    }

    private static java.util.Locale createConstant(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        sun.util.locale.BaseLocale r2;
        java.util.Locale $r3;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 = staticinvoke <sun.util.locale.BaseLocale: sun.util.locale.BaseLocale createInstance(java.lang.String,java.lang.String)>(r0, r1);
        $r3 = staticinvoke <java.util.Locale: java.util.Locale getInstance(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>(r2, null);
        return $r3;
    }

    static java.util.Locale getInstance(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2;
        java.util.Locale $r3;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        $r3 = staticinvoke <java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>(r0, "", r1, r2, null);
        return $r3;
    }

    static java.util.Locale getInstance(java.lang.String, java.lang.String, java.lang.String, java.lang.String, sun.util.locale.LocaleExtensions)
    {
        java.lang.String r0, r1, r2, r3;
        sun.util.locale.LocaleExtensions r4;
        sun.util.locale.BaseLocale r5;
        java.lang.NullPointerException $r6;
        java.util.Locale $r7;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        r3 := @parameter3: java.lang.String;
        r4 := @parameter4: sun.util.locale.LocaleExtensions;
        if r0 == null goto label0;

        if r1 == null goto label0;

        if r2 == null goto label0;

        if r3 != null goto label1;

     label0:
        $r6 = new java.lang.NullPointerException;
        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();
        throw $r6;

     label1:
        if r4 != null goto label2;

        r4 = staticinvoke <java.util.Locale: sun.util.locale.LocaleExtensions getCompatibilityExtensions(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2, r3);

     label2:
        r5 = staticinvoke <sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2, r3);
        $r7 = staticinvoke <java.util.Locale: java.util.Locale getInstance(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>(r5, r4);
        return $r7;
    }

    static java.util.Locale getInstance(sun.util.locale.BaseLocale, sun.util.locale.LocaleExtensions)
    {
        sun.util.locale.BaseLocale r0;
        sun.util.locale.LocaleExtensions r1;
        java.util.Locale$LocaleKey $r2, r3;
        java.util.Locale$Cache $r4;
        java.lang.Object $r5;
        java.util.Locale $r6;

        r0 := @parameter0: sun.util.locale.BaseLocale;
        r1 := @parameter1: sun.util.locale.LocaleExtensions;
        $r2 = new java.util.Locale$LocaleKey;
        specialinvoke $r2.<java.util.Locale$LocaleKey: void <init>(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions,java.util.Locale$1)>(r0, r1, null);
        r3 = $r2;
        $r4 = <java.util.Locale: java.util.Locale$Cache LOCALECACHE>;
        $r5 = virtualinvoke $r4.<java.util.Locale$Cache: java.lang.Object get(java.lang.Object)>(r3);
        $r6 = (java.util.Locale) $r5;
        return $r6;
    }

    public static java.util.Locale getDefault()
    {
        java.util.Locale $r0, $r1;

        $r0 = <java.util.Locale: java.util.Locale defaultLocale>;
        if $r0 != null goto label0;

        staticinvoke <java.util.Locale: void initDefault()>();

     label0:
        $r1 = <java.util.Locale: java.util.Locale defaultLocale>;
        return $r1;
    }

    public static java.util.Locale getDefault(java.util.Locale$Category)
    {
        java.util.Locale$Category r0;
        int[] $r1;
        int $i0, $i1;
        java.util.Locale $r2, $r3, $r4, $r5, $r7;
        boolean $z0;
        java.lang.AssertionError $r6;

        r0 := @parameter0: java.util.Locale$Category;
        $r1 = <java.util.Locale$1: int[] $SwitchMap$java$util$Locale$Category>;
        $i0 = virtualinvoke r0.<java.util.Locale$Category: int ordinal()>();
        $i1 = $r1[$i0];
        lookupswitch($i1)
        {
            case 1: goto label0;
            case 2: goto label2;
            default: goto label4;
        };

     label0:
        $r2 = <java.util.Locale: java.util.Locale defaultDisplayLocale>;
        if $r2 != null goto label1;

        staticinvoke <java.util.Locale: void initDefault(java.util.Locale$Category)>(r0);

     label1:
        $r3 = <java.util.Locale: java.util.Locale defaultDisplayLocale>;
        return $r3;

     label2:
        $r4 = <java.util.Locale: java.util.Locale defaultFormatLocale>;
        if $r4 != null goto label3;

        staticinvoke <java.util.Locale: void initDefault(java.util.Locale$Category)>(r0);

     label3:
        $r5 = <java.util.Locale: java.util.Locale defaultFormatLocale>;
        return $r5;

     label4:
        $z0 = <java.util.Locale: boolean $assertionsDisabled>;
        if $z0 != 0 goto label5;

        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("Unknown Category");
        throw $r6;

     label5:
        $r7 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();
        return $r7;
    }

    private static void initDefault()
    {
        sun.security.action.GetPropertyAction $r0, $r7, $r9, $r11, $r13;
        java.lang.String r1, r2, r3, r4, r5;
        int i0, $i1;
        java.lang.Object $r6, $r8, $r10, $r12, $r14;
        java.util.Locale $r15;

        $r0 = new sun.security.action.GetPropertyAction;
        specialinvoke $r0.<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>("user.language", "en");
        $r6 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        r1 = (java.lang.String) $r6;
        $r7 = new sun.security.action.GetPropertyAction;
        specialinvoke $r7.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("user.region");
        $r8 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r7);
        r2 = (java.lang.String) $r8;
        if r2 == null goto label2;

        i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(95);
        if i0 < 0 goto label0;

        r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        $i1 = i0 + 1;
        r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i1);
        goto label1;

     label0:
        r3 = r2;
        r4 = "";

     label1:
        r5 = "";
        goto label3;

     label2:
        $r9 = new sun.security.action.GetPropertyAction;
        specialinvoke $r9.<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>("user.script", "");
        $r10 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r9);
        r5 = (java.lang.String) $r10;
        $r11 = new sun.security.action.GetPropertyAction;
        specialinvoke $r11.<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>("user.country", "");
        $r12 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r11);
        r3 = (java.lang.String) $r12;
        $r13 = new sun.security.action.GetPropertyAction;
        specialinvoke $r13.<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>("user.variant", "");
        $r14 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r13);
        r4 = (java.lang.String) $r14;

     label3:
        $r15 = staticinvoke <java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>(r1, r5, r3, r4, null);
        <java.util.Locale: java.util.Locale defaultLocale> = $r15;
        return;
    }

    private static void initDefault(java.util.Locale$Category)
    {
        java.util.Locale$Category r0;
        java.util.Locale $r1, $r2, $r3, $r4, $r5, r6;
        sun.security.action.GetPropertyAction $r7, $r12, $r17, $r22;
        java.lang.String $r8, $r9, $r11, $r13, $r14, $r16, $r18, $r19, $r21, $r23, $r24, $r26;
        java.lang.Object $r10, $r15, $r20, $r25;
        int[] $r27;
        int $i0, $i1;

        r0 := @parameter0: java.util.Locale$Category;
        $r1 = <java.util.Locale: java.util.Locale defaultLocale>;
        if $r1 != null goto label0;

        staticinvoke <java.util.Locale: void initDefault()>();

     label0:
        $r7 = new sun.security.action.GetPropertyAction;
        $r8 = r0.<java.util.Locale$Category: java.lang.String languageKey>;
        $r2 = <java.util.Locale: java.util.Locale defaultLocale>;
        $r9 = virtualinvoke $r2.<java.util.Locale: java.lang.String getLanguage()>();
        specialinvoke $r7.<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>($r8, $r9);
        $r10 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r7);
        $r11 = (java.lang.String) $r10;
        $r12 = new sun.security.action.GetPropertyAction;
        $r13 = r0.<java.util.Locale$Category: java.lang.String scriptKey>;
        $r3 = <java.util.Locale: java.util.Locale defaultLocale>;
        $r14 = virtualinvoke $r3.<java.util.Locale: java.lang.String getScript()>();
        specialinvoke $r12.<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>($r13, $r14);
        $r15 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r12);
        $r16 = (java.lang.String) $r15;
        $r17 = new sun.security.action.GetPropertyAction;
        $r18 = r0.<java.util.Locale$Category: java.lang.String countryKey>;
        $r4 = <java.util.Locale: java.util.Locale defaultLocale>;
        $r19 = virtualinvoke $r4.<java.util.Locale: java.lang.String getCountry()>();
        specialinvoke $r17.<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>($r18, $r19);
        $r20 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r17);
        $r21 = (java.lang.String) $r20;
        $r22 = new sun.security.action.GetPropertyAction;
        $r23 = r0.<java.util.Locale$Category: java.lang.String variantKey>;
        $r5 = <java.util.Locale: java.util.Locale defaultLocale>;
        $r24 = virtualinvoke $r5.<java.util.Locale: java.lang.String getVariant()>();
        specialinvoke $r22.<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>($r23, $r24);
        $r25 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r22);
        $r26 = (java.lang.String) $r25;
        r6 = staticinvoke <java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>($r11, $r16, $r21, $r26, null);
        $r27 = <java.util.Locale$1: int[] $SwitchMap$java$util$Locale$Category>;
        $i0 = virtualinvoke r0.<java.util.Locale$Category: int ordinal()>();
        $i1 = $r27[$i0];
        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        <java.util.Locale: java.util.Locale defaultDisplayLocale> = r6;
        goto label3;

     label2:
        <java.util.Locale: java.util.Locale defaultFormatLocale> = r6;

     label3:
        return;
    }

    public static synchronized void setDefault(java.util.Locale)
    {
        java.util.Locale r0;
        java.util.Locale$Category $r1, $r2;

        r0 := @parameter0: java.util.Locale;
        $r1 = <java.util.Locale$Category: java.util.Locale$Category DISPLAY>;
        staticinvoke <java.util.Locale: void setDefault(java.util.Locale$Category,java.util.Locale)>($r1, r0);
        $r2 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        staticinvoke <java.util.Locale: void setDefault(java.util.Locale$Category,java.util.Locale)>($r2, r0);
        <java.util.Locale: java.util.Locale defaultLocale> = r0;
        return;
    }

    public static synchronized void setDefault(java.util.Locale$Category, java.util.Locale)
    {
        java.util.Locale$Category r0;
        java.util.Locale r1;
        java.lang.SecurityManager r2;
        java.lang.NullPointerException $r3, $r4;
        java.util.PropertyPermission $r5;
        int[] $r6;
        int $i0, $i1;
        boolean $z0;
        java.lang.AssertionError $r7;

        r0 := @parameter0: java.util.Locale$Category;
        r1 := @parameter1: java.util.Locale;
        if r0 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Category cannot be NULL");
        throw $r3;

     label0:
        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Can\'t set default locale to NULL");
        throw $r4;

     label1:
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label2;

        $r5 = new java.util.PropertyPermission;
        specialinvoke $r5.<java.util.PropertyPermission: void <init>(java.lang.String,java.lang.String)>("user.language", "write");
        virtualinvoke r2.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r5);

     label2:
        $r6 = <java.util.Locale$1: int[] $SwitchMap$java$util$Locale$Category>;
        $i0 = virtualinvoke r0.<java.util.Locale$Category: int ordinal()>();
        $i1 = $r6[$i0];
        lookupswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label4;
            default: goto label5;
        };

     label3:
        <java.util.Locale: java.util.Locale defaultDisplayLocale> = r1;
        goto label6;

     label4:
        <java.util.Locale: java.util.Locale defaultFormatLocale> = r1;
        goto label6;

     label5:
        $z0 = <java.util.Locale: boolean $assertionsDisabled>;
        if $z0 != 0 goto label6;

        $r7 = new java.lang.AssertionError;
        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>("Unknown Category");
        throw $r7;

     label6:
        return;
    }

    public static java.util.Locale[] getAvailableLocales()
    {
        java.util.Locale[] $r0;

        $r0 = staticinvoke <sun.util.LocaleServiceProviderPool: java.util.Locale[] getAllAvailableLocales()>();
        return $r0;
    }

    public static java.lang.String[] getISOCountries()
    {
        java.lang.String[] $r0, r1, $r2, $r3, $r4, $r5;
        int $i0, $i1;

        $r0 = <java.util.Locale: java.lang.String[] isoCountries>;
        if $r0 != null goto label0;

        $r3 = staticinvoke <java.util.Locale: java.lang.String[] getISO2Table(java.lang.String)>("ADANDAEAREAFAFGAGATGAIAIAALALBAMARMANANTAOAGOAQATAARARGASASMATAUTAUAUSAWABWAXALAAZAZEBABIHBBBRBBDBGDBEBELBFBFABGBGRBHBHRBIBDIBJBENBLBLMBMBMUBNBRNBOBOLBQBESBRBRABSBHSBTBTNBVBVTBWBWABYBLRBZBLZCACANCCCCKCDCODCFCAFCGCOGCHCHECICIVCKCOKCLCHLCMCMRCNCHNCOCOLCRCRICUCUBCVCPVCWCUWCXCXRCYCYPCZCZEDEDEUDJDJIDKDNKDMDMADODOMDZDZAECECUEEESTEGEGYEHESHERERIESESPETETHFIFINFJFJIFKFLKFMFSMFOFROFRFRAGAGABGBGBRGDGRDGEGEOGFGUFGGGGYGHGHAGIGIBGLGRLGMGMBGNGINGPGLPGQGNQGRGRCGSSGSGTGTMGUGUMGWGNBGYGUYHKHKGHMHMDHNHNDHRHRVHTHTIHUHUNIDIDNIEIRLILISRIMIMNININDIOIOTIQIRQIRIRNISISLITITAJEJEYJMJAMJOJORJPJPNKEKENKGKGZKHKHMKIKIRKMCOMKNKNAKPPRKKRKORKWKWTKYCYMKZKAZLALAOLBLBNLCLCALILIELKLKALRLBRLSLSOLTLTULULUXLVLVALYLBYMAMARMCMCOMDMDAMEMNEMFMAFMGMDGMHMHLMKMKDMLMLIMMMMRMNMNGMOMACMPMNPMQMTQMRMRTMSMSRMTMLTMUMUSMVMDVMWMWIMXMEXMYMYSMZMOZNANAMNCNCLNENERNFNFKNGNGANINICNLNLDNONORNPNPLNRNRUNUNIUNZNZLOMOMNPAPANPEPERPFPYFPGPNGPHPHLPKPAKPLPOLPMSPMPNPCNPRPRIPSPSEPTPRTPWPLWPYPRYQAQATREREUROROURSSRBRURUSRWRWASASAUSBSLBSCSYCSDSDNSESWESGSGPSHSHNSISVNSJSJMSKSVKSLSLESMSMRSNSENSOSOMSRSURSSSSDSTSTPSVSLVSXSXMSYSYRSZSWZTCTCATDTCDTFATFTGTGOTHTHATJTJKTKTKLTLTLSTMTKMTNTUNTOTONTRTURTTTTOTVTUVTWTWNTZTZAUAUKRUGUGAUMUMIUSUSAUYURYUZUZBVAVATVCVCTVEVENVGVGBVIVIRVNVNMVUVUTWFWLFWSWSMYEYEMYTMYTZAZAFZMZMBZWZWE");
        <java.util.Locale: java.lang.String[] isoCountries> = $r3;

     label0:
        $r4 = <java.util.Locale: java.lang.String[] isoCountries>;
        $i0 = lengthof $r4;
        r1 = newarray (java.lang.String)[$i0];
        $r5 = <java.util.Locale: java.lang.String[] isoCountries>;
        $r2 = <java.util.Locale: java.lang.String[] isoCountries>;
        $i1 = lengthof $r2;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, 0, $i1);
        return r1;
    }

    public static java.lang.String[] getISOLanguages()
    {
        java.lang.String[] $r0, r1, $r2, $r3, $r4, $r5;
        int $i0, $i1;

        $r0 = <java.util.Locale: java.lang.String[] isoLanguages>;
        if $r0 != null goto label0;

        $r3 = staticinvoke <java.util.Locale: java.lang.String[] getISO2Table(java.lang.String)>("aaaarababkaeaveafafrakakaamamhanargararaasasmavavaayaymazazebabakbebelbgbulbhbihbibisbmbambnbenbobodbrbrebsboscacatcechechchacocoscrcrecscescuchucvchvcycymdadandedeudvdivdzdzoeeeweelellenengeoepoesspaetesteueusfafasfffulfifinfjfijfofaofrfrafyfrygaglegdglaglglggngrngugujgvglvhahauhehebhihinhohmohrhrvhthathuhunhyhyehzheriainaidindieileigiboiiiiiikipkinindioidoisislititaiuikuiwhebjajpnjiyidjvjavkakatkgkonkikikkjkuakkkazklkalkmkhmknkankokorkrkaukskaskukurkvkomkwcorkykirlalatlbltzlgluglilimlnlinlolaoltlitlulublvlavmgmlgmhmahmimrimkmkdmlmalmnmonmomolmrmarmsmsamtmltmymyananaunbnobndndenenepngndonlnldnnnnononornrnblnvnavnynyaocociojojiomormororiososspapanpipliplpolpspusptporququermrohrnrunroronrurusrwkinsasanscsrdsdsndsesmesgsagsisinskslkslslvsmsmosnsnasosomsqsqisrsrpsssswstsotsusunsvsweswswatatamteteltgtgkththatitirtktuktltgltntsntotontrturtstsotttattwtwitytahuguigukukrururduzuzbvevenvivievovolwawlnwowolxhxhoyiyidyoyorzazhazhzhozuzul");
        <java.util.Locale: java.lang.String[] isoLanguages> = $r3;

     label0:
        $r4 = <java.util.Locale: java.lang.String[] isoLanguages>;
        $i0 = lengthof $r4;
        r1 = newarray (java.lang.String)[$i0];
        $r5 = <java.util.Locale: java.lang.String[] isoLanguages>;
        $r2 = <java.util.Locale: java.lang.String[] isoLanguages>;
        $i1 = lengthof $r2;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, 0, $i1);
        return r1;
    }

    private static final java.lang.String[] getISO2Table(java.lang.String)
    {
        java.lang.String r0, $r2;
        int i0, i1, i2, $i3, $i4;
        java.lang.String[] r1;

        r0 := @parameter0: java.lang.String;
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();
        i0 = $i3 / 5;
        r1 = newarray (java.lang.String)[i0];
        i1 = 0;
        i2 = 0;

     label0:
        if i1 >= i0 goto label1;

        $i4 = i2 + 2;
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i2, $i4);
        r1[i1] = $r2;
        i1 = i1 + 1;
        i2 = i2 + 5;
        goto label0;

     label1:
        return r1;
    }

    public java.lang.String getLanguage()
    {
        java.util.Locale r0;
        sun.util.locale.BaseLocale $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Locale;
        $r1 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r2 = virtualinvoke $r1.<sun.util.locale.BaseLocale: java.lang.String getLanguage()>();
        return $r2;
    }

    public java.lang.String getScript()
    {
        java.util.Locale r0;
        sun.util.locale.BaseLocale $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Locale;
        $r1 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r2 = virtualinvoke $r1.<sun.util.locale.BaseLocale: java.lang.String getScript()>();
        return $r2;
    }

    public java.lang.String getCountry()
    {
        java.util.Locale r0;
        sun.util.locale.BaseLocale $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Locale;
        $r1 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r2 = virtualinvoke $r1.<sun.util.locale.BaseLocale: java.lang.String getRegion()>();
        return $r2;
    }

    public java.lang.String getVariant()
    {
        java.util.Locale r0;
        sun.util.locale.BaseLocale $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Locale;
        $r1 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r2 = virtualinvoke $r1.<sun.util.locale.BaseLocale: java.lang.String getVariant()>();
        return $r2;
    }

    public java.lang.String getExtension(char)
    {
        java.util.Locale r0;
        char c0;
        java.lang.StringBuilder $r1, $r3, $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r5, $r7;
        sun.util.locale.LocaleExtensions $r6, $r8;
        java.lang.Character $r9;

        r0 := @this: java.util.Locale;
        c0 := @parameter0: char;
        $z0 = staticinvoke <sun.util.locale.LocaleExtensions: boolean isValidKey(char)>(c0);
        if $z0 != 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ill-formed extension key: ");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r2;

     label0:
        $r6 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        if $r6 != null goto label1;

        $r7 = null;
        goto label2;

     label1:
        $r8 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        $r9 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);
        $r7 = virtualinvoke $r8.<sun.util.locale.LocaleExtensions: java.lang.String getExtensionValue(java.lang.Character)>($r9);

     label2:
        return $r7;
    }

    public java.util.Set getExtensionKeys()
    {
        java.util.Locale r0;
        sun.util.locale.LocaleExtensions $r1, $r3;
        java.util.Set $r2, $r4;

        r0 := @this: java.util.Locale;
        $r1 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        if $r1 != null goto label0;

        $r2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
        return $r2;

     label0:
        $r3 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        $r4 = virtualinvoke $r3.<sun.util.locale.LocaleExtensions: java.util.Set getKeys()>();
        return $r4;
    }

    public java.util.Set getUnicodeLocaleAttributes()
    {
        java.util.Locale r0;
        sun.util.locale.LocaleExtensions $r1, $r3;
        java.util.Set $r2, $r4;

        r0 := @this: java.util.Locale;
        $r1 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        if $r1 != null goto label0;

        $r2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
        return $r2;

     label0:
        $r3 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        $r4 = virtualinvoke $r3.<sun.util.locale.LocaleExtensions: java.util.Set getUnicodeLocaleAttributes()>();
        return $r4;
    }

    public java.lang.String getUnicodeLocaleType(java.lang.String)
    {
        java.util.Locale r0;
        java.lang.String r1, $r6, $r8;
        java.lang.StringBuilder $r2, $r4, $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        sun.util.locale.LocaleExtensions $r7, $r9;

        r0 := @this: java.util.Locale;
        r1 := @parameter0: java.lang.String;
        $z0 = staticinvoke <sun.util.locale.UnicodeLocaleExtension: boolean isKey(java.lang.String)>(r1);
        if $z0 != 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ill-formed Unicode locale key: ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);
        throw $r3;

     label0:
        $r7 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        if $r7 != null goto label1;

        $r8 = null;
        goto label2;

     label1:
        $r9 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        $r8 = virtualinvoke $r9.<sun.util.locale.LocaleExtensions: java.lang.String getUnicodeLocaleType(java.lang.String)>(r1);

     label2:
        return $r8;
    }

    public java.util.Set getUnicodeLocaleKeys()
    {
        java.util.Locale r0;
        sun.util.locale.LocaleExtensions $r1, $r3;
        java.util.Set $r2, $r4;

        r0 := @this: java.util.Locale;
        $r1 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        if $r1 != null goto label0;

        $r2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
        return $r2;

     label0:
        $r3 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        $r4 = virtualinvoke $r3.<sun.util.locale.LocaleExtensions: java.util.Set getUnicodeLocaleKeys()>();
        return $r4;
    }

    sun.util.locale.BaseLocale getBaseLocale()
    {
        java.util.Locale r0;
        sun.util.locale.BaseLocale $r1;

        r0 := @this: java.util.Locale;
        $r1 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        return $r1;
    }

    sun.util.locale.LocaleExtensions getLocaleExtensions()
    {
        java.util.Locale r0;
        sun.util.locale.LocaleExtensions $r1;

        r0 := @this: java.util.Locale;
        $r1 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        return $r1;
    }

    public final java.lang.String toString()
    {
        java.util.Locale r0;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.StringBuilder r1, $r13, $r16, $r20, $r24;
        sun.util.locale.BaseLocale $r2, $r4, $r6, $r8, $r14, $r17, $r21, $r25;
        java.lang.String $r3, $r5, $r7, $r9, $r12, $r15, $r18, $r22, $r26, $r31, $r33;
        int $i0, $i1, $i2, $i3, $i4;
        sun.util.locale.LocaleExtensions $r10, $r11, $r30;

        r0 := @this: java.util.Locale;
        $r2 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r3 = virtualinvoke $r2.<sun.util.locale.BaseLocale: java.lang.String getLanguage()>();
        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();
        if $i0 == 0 goto label0;

        $z5 = 1;
        goto label1;

     label0:
        $z5 = 0;

     label1:
        z0 = $z5;
        $r4 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r5 = virtualinvoke $r4.<sun.util.locale.BaseLocale: java.lang.String getScript()>();
        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();
        if $i1 == 0 goto label2;

        $z6 = 1;
        goto label3;

     label2:
        $z6 = 0;

     label3:
        z1 = $z6;
        $r6 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r7 = virtualinvoke $r6.<sun.util.locale.BaseLocale: java.lang.String getRegion()>();
        $i2 = virtualinvoke $r7.<java.lang.String: int length()>();
        if $i2 == 0 goto label4;

        $z7 = 1;
        goto label5;

     label4:
        $z7 = 0;

     label5:
        z2 = $z7;
        $r8 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r9 = virtualinvoke $r8.<sun.util.locale.BaseLocale: java.lang.String getVariant()>();
        $i3 = virtualinvoke $r9.<java.lang.String: int length()>();
        if $i3 == 0 goto label6;

        $z8 = 1;
        goto label7;

     label6:
        $z8 = 0;

     label7:
        z3 = $z8;
        $r10 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        if $r10 == null goto label8;

        $r11 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        $r12 = virtualinvoke $r11.<sun.util.locale.LocaleExtensions: java.lang.String getID()>();
        $i4 = virtualinvoke $r12.<java.lang.String: int length()>();
        if $i4 == 0 goto label8;

        $z9 = 1;
        goto label9;

     label8:
        $z9 = 0;

     label9:
        z4 = $z9;
        $r13 = new java.lang.StringBuilder;
        $r14 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r15 = virtualinvoke $r14.<sun.util.locale.BaseLocale: java.lang.String getLanguage()>();
        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15);
        r1 = $r13;
        if z2 != 0 goto label10;

        if z0 == 0 goto label11;

        if z3 != 0 goto label10;

        if z1 != 0 goto label10;

        if z4 == 0 goto label11;

     label10:
        $r16 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);
        $r17 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r18 = virtualinvoke $r17.<sun.util.locale.BaseLocale: java.lang.String getRegion()>();
        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

     label11:
        if z3 == 0 goto label13;

        if z0 != 0 goto label12;

        if z2 == 0 goto label13;

     label12:
        $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);
        $r21 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r22 = virtualinvoke $r21.<sun.util.locale.BaseLocale: java.lang.String getVariant()>();
        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

     label13:
        if z1 == 0 goto label15;

        if z0 != 0 goto label14;

        if z2 == 0 goto label15;

     label14:
        $r24 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_#");
        $r25 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r26 = virtualinvoke $r25.<sun.util.locale.BaseLocale: java.lang.String getScript()>();
        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

     label15:
        if z4 == 0 goto label18;

        if z0 != 0 goto label16;

        if z2 == 0 goto label18;

     label16:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);
        if z1 != 0 goto label17;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);

     label17:
        $r30 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        $r31 = virtualinvoke $r30.<sun.util.locale.LocaleExtensions: java.lang.String getID()>();
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

     label18:
        $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r33;
    }

    public java.lang.String toLanguageTag()
    {
        java.util.Locale r0;
        sun.util.locale.LanguageTag r1;
        java.lang.StringBuilder r2, $r9, $r32;
        java.lang.String r3, r6, $r10, r12, $r14, r16, $r18, r26, $r28, r30, $r35;
        java.util.List r4, r23;
        java.util.Iterator r5, r24;
        sun.util.locale.BaseLocale $r7;
        sun.util.locale.LocaleExtensions $r8;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;
        java.lang.Object $r20, $r25;

        r0 := @this: java.util.Locale;
        $r7 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r8 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        r1 = staticinvoke <sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parseLocale(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>($r7, $r8);
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        r2 = $r9;
        r3 = virtualinvoke r1.<sun.util.locale.LanguageTag: java.lang.String getLanguage()>();
        $i0 = virtualinvoke r3.<java.lang.String: int length()>();
        if $i0 <= 0 goto label0;

        $r10 = staticinvoke <sun.util.locale.LanguageTag: java.lang.String canonicalizeLanguage(java.lang.String)>(r3);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

     label0:
        r12 = virtualinvoke r1.<sun.util.locale.LanguageTag: java.lang.String getScript()>();
        $i1 = virtualinvoke r12.<java.lang.String: int length()>();
        if $i1 <= 0 goto label1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");
        $r14 = staticinvoke <sun.util.locale.LanguageTag: java.lang.String canonicalizeScript(java.lang.String)>(r12);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

     label1:
        r16 = virtualinvoke r1.<sun.util.locale.LanguageTag: java.lang.String getRegion()>();
        $i2 = virtualinvoke r16.<java.lang.String: int length()>();
        if $i2 <= 0 goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");
        $r18 = staticinvoke <sun.util.locale.LanguageTag: java.lang.String canonicalizeRegion(java.lang.String)>(r16);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

     label2:
        r4 = virtualinvoke r1.<sun.util.locale.LanguageTag: java.util.List getVariants()>();
        r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label4;

        $r20 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        r6 = (java.lang.String) $r20;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);
        goto label3;

     label4:
        r23 = virtualinvoke r1.<sun.util.locale.LanguageTag: java.util.List getExtensions()>();
        r24 = interfaceinvoke r23.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label6;

        $r25 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();
        r26 = (java.lang.String) $r25;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");
        $r28 = staticinvoke <sun.util.locale.LanguageTag: java.lang.String canonicalizeExtension(java.lang.String)>(r26);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);
        goto label5;

     label6:
        r30 = virtualinvoke r1.<sun.util.locale.LanguageTag: java.lang.String getPrivateuse()>();
        $i3 = virtualinvoke r30.<java.lang.String: int length()>();
        if $i3 <= 0 goto label8;

        $i4 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();
        if $i4 <= 0 goto label7;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

     label7:
        $r32 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");
        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);

     label8:
        $r35 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r35;
    }

    public static java.util.Locale forLanguageTag(java.lang.String)
    {
        java.lang.String r0, $r7, $r8, $r9, $r10, $r11;
        sun.util.locale.LanguageTag r1;
        sun.util.locale.InternalLocaleBuilder r2, $r5;
        sun.util.locale.BaseLocale r3;
        sun.util.locale.LocaleExtensions r4;
        int $i0;
        java.util.Locale $r12;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <sun.util.locale.LanguageTag: sun.util.locale.LanguageTag parse(java.lang.String,sun.util.locale.ParseStatus)>(r0, null);
        $r5 = new sun.util.locale.InternalLocaleBuilder;
        specialinvoke $r5.<sun.util.locale.InternalLocaleBuilder: void <init>()>();
        r2 = $r5;
        virtualinvoke r2.<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)>(r1);
        r3 = virtualinvoke r2.<sun.util.locale.InternalLocaleBuilder: sun.util.locale.BaseLocale getBaseLocale()>();
        r4 = virtualinvoke r2.<sun.util.locale.InternalLocaleBuilder: sun.util.locale.LocaleExtensions getLocaleExtensions()>();
        if r4 != null goto label0;

        $r7 = virtualinvoke r3.<sun.util.locale.BaseLocale: java.lang.String getVariant()>();
        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();
        if $i0 <= 0 goto label0;

        $r8 = virtualinvoke r3.<sun.util.locale.BaseLocale: java.lang.String getLanguage()>();
        $r9 = virtualinvoke r3.<sun.util.locale.BaseLocale: java.lang.String getScript()>();
        $r10 = virtualinvoke r3.<sun.util.locale.BaseLocale: java.lang.String getRegion()>();
        $r11 = virtualinvoke r3.<sun.util.locale.BaseLocale: java.lang.String getVariant()>();
        r4 = staticinvoke <java.util.Locale: sun.util.locale.LocaleExtensions getCompatibilityExtensions(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r8, $r9, $r10, $r11);

     label0:
        $r12 = staticinvoke <java.util.Locale: java.util.Locale getInstance(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>(r3, r4);
        return $r12;
    }

    public java.lang.String getISO3Language() throws java.util.MissingResourceException
    {
        java.util.Locale r0;
        java.lang.String r1, r2, $r8, $r11, $r13;
        java.lang.StringBuilder $r3, $r6, $r7, $r9, $r10, $r12;
        sun.util.locale.BaseLocale $r4;
        int $i0;
        java.util.MissingResourceException $r5;

        r0 := @this: java.util.Locale;
        $r4 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        r1 = virtualinvoke $r4.<sun.util.locale.BaseLocale: java.lang.String getLanguage()>();
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i0 != 3 goto label0;

        return r1;

     label0:
        r2 = staticinvoke <java.util.Locale: java.lang.String getISO3Code(java.lang.String,java.lang.String)>(r1, "aaaarababkaeaveafafrakakaamamhanargararaasasmavavaayaymazazebabakbebelbgbulbhbihbibisbmbambnbenbobodbrbrebsboscacatcechechchacocoscrcrecscescuchucvchvcycymdadandedeudvdivdzdzoeeeweelellenengeoepoesspaetesteueusfafasfffulfifinfjfijfofaofrfrafyfrygaglegdglaglglggngrngugujgvglvhahauhehebhihinhohmohrhrvhthathuhunhyhyehzheriainaidindieileigiboiiiiiikipkinindioidoisislititaiuikuiwhebjajpnjiyidjvjavkakatkgkonkikikkjkuakkkazklkalkmkhmknkankokorkrkaukskaskukurkvkomkwcorkykirlalatlbltzlgluglilimlnlinlolaoltlitlulublvlavmgmlgmhmahmimrimkmkdmlmalmnmonmomolmrmarmsmsamtmltmymyananaunbnobndndenenepngndonlnldnnnnononornrnblnvnavnynyaocociojojiomormororiososspapanpipliplpolpspusptporququermrohrnrunroronrurusrwkinsasanscsrdsdsndsesmesgsagsisinskslkslslvsmsmosnsnasosomsqsqisrsrpsssswstsotsusunsvsweswswatatamteteltgtgkththatitirtktuktltgltntsntotontrturtstsotttattwtwitytahuguigukukrururduzuzbvevenvivievovolwawlnwowolxhxhoyiyidyoyorzazhazhzhozuzul");
        if r2 != null goto label1;

        $r5 = new java.util.MissingResourceException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t find 3-letter language code for ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FormatData_");
        $r11 = virtualinvoke r0.<java.util.Locale: java.lang.String toString()>();
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r8, $r13, "ShortLanguage");
        throw $r5;

     label1:
        return r2;
    }

    public java.lang.String getISO3Country() throws java.util.MissingResourceException
    {
        java.util.Locale r0;
        java.lang.String r1, $r4, $r8, $r10, $r13, $r15;
        java.lang.StringBuilder $r2, $r6, $r9, $r11, $r12, $r14;
        sun.util.locale.BaseLocale $r3, $r7;
        java.util.MissingResourceException $r5;

        r0 := @this: java.util.Locale;
        $r3 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r4 = virtualinvoke $r3.<sun.util.locale.BaseLocale: java.lang.String getRegion()>();
        r1 = staticinvoke <java.util.Locale: java.lang.String getISO3Code(java.lang.String,java.lang.String)>($r4, "ADANDAEAREAFAFGAGATGAIAIAALALBAMARMANANTAOAGOAQATAARARGASASMATAUTAUAUSAWABWAXALAAZAZEBABIHBBBRBBDBGDBEBELBFBFABGBGRBHBHRBIBDIBJBENBLBLMBMBMUBNBRNBOBOLBQBESBRBRABSBHSBTBTNBVBVTBWBWABYBLRBZBLZCACANCCCCKCDCODCFCAFCGCOGCHCHECICIVCKCOKCLCHLCMCMRCNCHNCOCOLCRCRICUCUBCVCPVCWCUWCXCXRCYCYPCZCZEDEDEUDJDJIDKDNKDMDMADODOMDZDZAECECUEEESTEGEGYEHESHERERIESESPETETHFIFINFJFJIFKFLKFMFSMFOFROFRFRAGAGABGBGBRGDGRDGEGEOGFGUFGGGGYGHGHAGIGIBGLGRLGMGMBGNGINGPGLPGQGNQGRGRCGSSGSGTGTMGUGUMGWGNBGYGUYHKHKGHMHMDHNHNDHRHRVHTHTIHUHUNIDIDNIEIRLILISRIMIMNININDIOIOTIQIRQIRIRNISISLITITAJEJEYJMJAMJOJORJPJPNKEKENKGKGZKHKHMKIKIRKMCOMKNKNAKPPRKKRKORKWKWTKYCYMKZKAZLALAOLBLBNLCLCALILIELKLKALRLBRLSLSOLTLTULULUXLVLVALYLBYMAMARMCMCOMDMDAMEMNEMFMAFMGMDGMHMHLMKMKDMLMLIMMMMRMNMNGMOMACMPMNPMQMTQMRMRTMSMSRMTMLTMUMUSMVMDVMWMWIMXMEXMYMYSMZMOZNANAMNCNCLNENERNFNFKNGNGANINICNLNLDNONORNPNPLNRNRUNUNIUNZNZLOMOMNPAPANPEPERPFPYFPGPNGPHPHLPKPAKPLPOLPMSPMPNPCNPRPRIPSPSEPTPRTPWPLWPYPRYQAQATREREUROROURSSRBRURUSRWRWASASAUSBSLBSCSYCSDSDNSESWESGSGPSHSHNSISVNSJSJMSKSVKSLSLESMSMRSNSENSOSOMSRSURSSSSDSTSTPSVSLVSXSXMSYSYRSZSWZTCTCATDTCDTFATFTGTGOTHTHATJTJKTKTKLTLTLSTMTKMTNTUNTOTONTRTURTTTTOTVTUVTWTWNTZTZAUAUKRUGUGAUMUMIUSUSAUYURYUZUZBVAVATVCVCTVEVENVGVGBVIVIRVNVNMVUVUTWFWLFWSWSMYEYEMYTMYTZAZAFZMZMBZWZWE");
        if r1 != null goto label0;

        $r5 = new java.util.MissingResourceException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t find 3-letter country code for ");
        $r7 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r8 = virtualinvoke $r7.<sun.util.locale.BaseLocale: java.lang.String getRegion()>();
        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FormatData_");
        $r13 = virtualinvoke r0.<java.util.Locale: java.lang.String toString()>();
        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r10, $r15, "ShortCountry");
        throw $r5;

     label0:
        return r1;
    }

    private static final java.lang.String getISO3Code(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int i0, i1, i2, $i6, $i8, $i9;
        char c3, c4, $c5, $c7;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        if i0 != 0 goto label0;

        return "";

     label0:
        i1 = virtualinvoke r1.<java.lang.String: int length()>();
        i2 = i1;
        if i0 != 2 goto label3;

        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);
        c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);
        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);
        if $c5 != c3 goto label2;

        $i6 = i2 + 1;
        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i6);
        if $c7 != c4 goto label2;

        goto label3;

     label2:
        i2 = i2 + 5;
        goto label1;

     label3:
        if i2 >= i1 goto label4;

        $i8 = i2 + 2;
        $i9 = i2 + 5;
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i8, $i9);
        goto label5;

     label4:
        $r2 = null;

     label5:
        return $r2;
    }

    public final java.lang.String getDisplayLanguage()
    {
        java.util.Locale r0, $r2;
        java.util.Locale$Category $r1;
        java.lang.String $r3;

        r0 := @this: java.util.Locale;
        $r1 = <java.util.Locale$Category: java.util.Locale$Category DISPLAY>;
        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r1);
        $r3 = virtualinvoke r0.<java.util.Locale: java.lang.String getDisplayLanguage(java.util.Locale)>($r2);
        return $r3;
    }

    public java.lang.String getDisplayLanguage(java.util.Locale)
    {
        java.util.Locale r0, r1;
        sun.util.locale.BaseLocale $r2;
        java.lang.String $r3, $r4;

        r0 := @this: java.util.Locale;
        r1 := @parameter0: java.util.Locale;
        $r2 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r3 = virtualinvoke $r2.<sun.util.locale.BaseLocale: java.lang.String getLanguage()>();
        $r4 = specialinvoke r0.<java.util.Locale: java.lang.String getDisplayString(java.lang.String,java.util.Locale,int)>($r3, r1, 0);
        return $r4;
    }

    public java.lang.String getDisplayScript()
    {
        java.util.Locale r0, $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Locale;
        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();
        $r2 = virtualinvoke r0.<java.util.Locale: java.lang.String getDisplayScript(java.util.Locale)>($r1);
        return $r2;
    }

    public java.lang.String getDisplayScript(java.util.Locale)
    {
        java.util.Locale r0, r1;
        sun.util.locale.BaseLocale $r2;
        java.lang.String $r3, $r4;

        r0 := @this: java.util.Locale;
        r1 := @parameter0: java.util.Locale;
        $r2 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r3 = virtualinvoke $r2.<sun.util.locale.BaseLocale: java.lang.String getScript()>();
        $r4 = specialinvoke r0.<java.util.Locale: java.lang.String getDisplayString(java.lang.String,java.util.Locale,int)>($r3, r1, 3);
        return $r4;
    }

    public final java.lang.String getDisplayCountry()
    {
        java.util.Locale r0, $r2;
        java.util.Locale$Category $r1;
        java.lang.String $r3;

        r0 := @this: java.util.Locale;
        $r1 = <java.util.Locale$Category: java.util.Locale$Category DISPLAY>;
        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r1);
        $r3 = virtualinvoke r0.<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)>($r2);
        return $r3;
    }

    public java.lang.String getDisplayCountry(java.util.Locale)
    {
        java.util.Locale r0, r1;
        sun.util.locale.BaseLocale $r2;
        java.lang.String $r3, $r4;

        r0 := @this: java.util.Locale;
        r1 := @parameter0: java.util.Locale;
        $r2 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r3 = virtualinvoke $r2.<sun.util.locale.BaseLocale: java.lang.String getRegion()>();
        $r4 = specialinvoke r0.<java.util.Locale: java.lang.String getDisplayString(java.lang.String,java.util.Locale,int)>($r3, r1, 1);
        return $r4;
    }

    private java.lang.String getDisplayString(java.lang.String, java.util.Locale, int)
    {
        java.util.Locale r0, r2;
        java.lang.String r1, r4, r5, $r11;
        int i0, $i1;
        sun.util.resources.OpenListResourceBundle r3;
        sun.util.LocaleServiceProviderPool r6;
        java.lang.NullPointerException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        boolean $z0;
        java.util.Locale$LocaleNameGetter $r12;
        java.lang.Object[] $r13;
        java.lang.Integer $r14;
        java.lang.Object $r15;
        java.lang.Exception $r17, r18;

        r0 := @this: java.util.Locale;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.util.Locale;
        i0 := @parameter2: int;
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i1 != 0 goto label0;

        return "";

     label0:
        if r2 != null goto label1;

        $r7 = new java.lang.NullPointerException;
        specialinvoke $r7.<java.lang.NullPointerException: void <init>()>();
        throw $r7;

     label1:
        r3 = staticinvoke <sun.util.resources.LocaleData: sun.util.resources.OpenListResourceBundle getLocaleNames(java.util.Locale)>(r2);
        if i0 != 2 goto label2;

        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%%");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        goto label3;

     label2:
        $r11 = r1;

     label3:
        r4 = $r11;
        r5 = null;
        r6 = staticinvoke <sun.util.LocaleServiceProviderPool: sun.util.LocaleServiceProviderPool getPool(java.lang.Class)>(class "java/util/spi/LocaleNameProvider");
        $z0 = virtualinvoke r6.<sun.util.LocaleServiceProviderPool: boolean hasProviders()>();
        if $z0 == 0 goto label4;

        $r12 = staticinvoke <java.util.Locale$LocaleNameGetter: java.util.Locale$LocaleNameGetter access$500()>();
        $r13 = newarray (java.lang.Object)[2];
        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        $r13[0] = $r14;
        $r13[1] = r1;
        $r15 = virtualinvoke r6.<sun.util.LocaleServiceProviderPool: java.lang.Object getLocalizedObject(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,sun.util.resources.OpenListResourceBundle,java.lang.String,java.lang.Object[])>($r12, r2, r3, r4, $r13);
        r5 = (java.lang.String) $r15;

     label4:
        if r5 != null goto label5;

        r5 = virtualinvoke r3.<sun.util.resources.OpenListResourceBundle: java.lang.String getString(java.lang.String)>(r4);

     label5:
        if r5 == null goto label7;

     label6:
        return r5;

     label7:
        goto label9;

     label8:
        $r17 := @caughtexception;
        r18 = $r17;

     label9:
        return r1;

        catch java.lang.Exception from label1 to label6 with label8;
    }

    public final java.lang.String getDisplayVariant()
    {
        java.util.Locale r0, $r2;
        java.util.Locale$Category $r1;
        java.lang.String $r3;

        r0 := @this: java.util.Locale;
        $r1 = <java.util.Locale$Category: java.util.Locale$Category DISPLAY>;
        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r1);
        $r3 = virtualinvoke r0.<java.util.Locale: java.lang.String getDisplayVariant(java.util.Locale)>($r2);
        return $r3;
    }

    public java.lang.String getDisplayVariant(java.util.Locale)
    {
        java.util.Locale r0, r1;
        sun.util.resources.OpenListResourceBundle r2;
        java.lang.String[] r3;
        java.lang.String r4, r5, $r8, $r10;
        java.util.MissingResourceException r6, $r9;
        sun.util.locale.BaseLocale $r7;
        int $i0;

        r0 := @this: java.util.Locale;
        r1 := @parameter0: java.util.Locale;
        $r7 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r8 = virtualinvoke $r7.<sun.util.locale.BaseLocale: java.lang.String getVariant()>();
        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();
        if $i0 != 0 goto label0;

        return "";

     label0:
        r2 = staticinvoke <sun.util.resources.LocaleData: sun.util.resources.OpenListResourceBundle getLocaleNames(java.util.Locale)>(r1);
        r3 = specialinvoke r0.<java.util.Locale: java.lang.String[] getDisplayVariantArray(sun.util.resources.OpenListResourceBundle,java.util.Locale)>(r2, r1);
        r4 = null;
        r5 = null;

     label1:
        r4 = virtualinvoke r2.<sun.util.resources.OpenListResourceBundle: java.lang.String getString(java.lang.String)>("ListPattern");
        r5 = virtualinvoke r2.<sun.util.resources.OpenListResourceBundle: java.lang.String getString(java.lang.String)>("ListCompositionPattern");

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;
        r6 = $r9;

     label4:
        $r10 = staticinvoke <java.util.Locale: java.lang.String formatList(java.lang.String[],java.lang.String,java.lang.String)>(r3, r4, r5);
        return $r10;

        catch java.util.MissingResourceException from label1 to label2 with label3;
    }

    public final java.lang.String getDisplayName()
    {
        java.util.Locale r0, $r2;
        java.util.Locale$Category $r1;
        java.lang.String $r3;

        r0 := @this: java.util.Locale;
        $r1 = <java.util.Locale$Category: java.util.Locale$Category DISPLAY>;
        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r1);
        $r3 = virtualinvoke r0.<java.util.Locale: java.lang.String getDisplayName(java.util.Locale)>($r2);
        return $r3;
    }

    public java.lang.String getDisplayName(java.util.Locale)
    {
        java.util.Locale r0, r1;
        sun.util.resources.OpenListResourceBundle r2;
        java.lang.String r3, r4, r5, r7, r8, r9, r13, $r17, r20, $r29, $r32, $r36, $r40, $r43;
        java.lang.String[] r6, r12, $r22, $r24, r25;
        java.util.MissingResourceException r10, $r16;
        null_type n0, n1;
        java.util.ArrayList r11, $r18;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i13, $i16, $i17;
        java.lang.Integer $r14;
        java.lang.Object $r19, $r35, $r39;
        java.util.List $r21;
        java.lang.Object[] $r23, $r26, r30;
        byte $b12, $b14, $b15;
        java.text.MessageFormat $r31;
        java.lang.StringBuilder $r33, r34;

        r0 := @this: java.util.Locale;
        r1 := @parameter0: java.util.Locale;
        r2 = staticinvoke <sun.util.resources.LocaleData: sun.util.resources.OpenListResourceBundle getLocaleNames(java.util.Locale)>(r1);
        r3 = virtualinvoke r0.<java.util.Locale: java.lang.String getDisplayLanguage(java.util.Locale)>(r1);
        r4 = virtualinvoke r0.<java.util.Locale: java.lang.String getDisplayScript(java.util.Locale)>(r1);
        r5 = virtualinvoke r0.<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)>(r1);
        r6 = specialinvoke r0.<java.util.Locale: java.lang.String[] getDisplayVariantArray(sun.util.resources.OpenListResourceBundle,java.util.Locale)>(r2, r1);
        r7 = null;
        r8 = null;
        r9 = null;

     label0:
        r7 = virtualinvoke r2.<sun.util.resources.OpenListResourceBundle: java.lang.String getString(java.lang.String)>("DisplayNamePattern");
        r8 = virtualinvoke r2.<sun.util.resources.OpenListResourceBundle: java.lang.String getString(java.lang.String)>("ListPattern");
        r9 = virtualinvoke r2.<sun.util.resources.OpenListResourceBundle: java.lang.String getString(java.lang.String)>("ListCompositionPattern");

     label1:
        goto label3;

     label2:
        $r16 := @caughtexception;
        r10 = $r16;

     label3:
        n1 = null;
        n0 = null;
        $i2 = virtualinvoke r3.<java.lang.String: int length()>();
        if $i2 != 0 goto label5;

        $i3 = virtualinvoke r4.<java.lang.String: int length()>();
        if $i3 != 0 goto label5;

        $i4 = virtualinvoke r5.<java.lang.String: int length()>();
        if $i4 != 0 goto label5;

        $i5 = lengthof r6;
        if $i5 != 0 goto label4;

        return "";

     label4:
        $r17 = staticinvoke <java.util.Locale: java.lang.String formatList(java.lang.String[],java.lang.String,java.lang.String)>(r6, r8, r9);
        return $r17;

     label5:
        $r18 = new java.util.ArrayList;
        specialinvoke $r18.<java.util.ArrayList: void <init>(int)>(4);
        r11 = $r18;
        $i6 = virtualinvoke r3.<java.lang.String: int length()>();
        if $i6 == 0 goto label6;

        virtualinvoke r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label6:
        $i7 = virtualinvoke r4.<java.lang.String: int length()>();
        if $i7 == 0 goto label7;

        virtualinvoke r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label7:
        $i8 = virtualinvoke r5.<java.lang.String: int length()>();
        if $i8 == 0 goto label8;

        virtualinvoke r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

     label8:
        $i9 = lengthof r6;
        if $i9 == 0 goto label10;

        r12 = r6;
        i0 = lengthof r12;
        i1 = 0;

     label9:
        if i1 >= i0 goto label10;

        r13 = r12[i1];
        virtualinvoke r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r13);
        i1 = i1 + 1;
        goto label9;

     label10:
        $r19 = virtualinvoke r11.<java.util.ArrayList: java.lang.Object get(int)>(0);
        r20 = (java.lang.String) $r19;
        i10 = virtualinvoke r11.<java.util.ArrayList: int size()>();
        if i10 <= 1 goto label11;

        $r21 = virtualinvoke r11.<java.util.ArrayList: java.util.List subList(int,int)>(1, i10);
        $i11 = i10 - 1;
        $r22 = newarray (java.lang.String)[$i11];
        $r23 = interfaceinvoke $r21.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r22);
        $r24 = (java.lang.String[]) $r23;
        goto label12;

     label11:
        $r24 = newarray (java.lang.String)[0];

     label12:
        r25 = $r24;
        $r26 = newarray (java.lang.Object)[3];
        $b12 = 0;
        $r14 = new java.lang.Integer;
        $i13 = lengthof r25;
        if $i13 == 0 goto label13;

        $b14 = 2;
        goto label14;

     label13:
        $b14 = 1;

     label14:
        specialinvoke $r14.<java.lang.Integer: void <init>(int)>($b14);
        $r26[$b12] = $r14;
        $r26[1] = r20;
        $b15 = 2;
        $i16 = lengthof r25;
        if $i16 == 0 goto label15;

        $r29 = staticinvoke <java.util.Locale: java.lang.String formatList(java.lang.String[],java.lang.String,java.lang.String)>(r25, r8, r9);
        goto label16;

     label15:
        $r29 = null;

     label16:
        $r26[$b15] = $r29;
        r30 = $r26;
        if r7 == null goto label17;

        $r31 = new java.text.MessageFormat;
        specialinvoke $r31.<java.text.MessageFormat: void <init>(java.lang.String)>(r7);
        $r32 = virtualinvoke $r31.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>(r30);
        return $r32;

     label17:
        $r33 = new java.lang.StringBuilder;
        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();
        r34 = $r33;
        $r35 = r30[1];
        $r36 = (java.lang.String) $r35;
        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);
        $i17 = lengthof r30;
        if $i17 <= 2 goto label18;

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");
        $r39 = r30[2];
        $r40 = (java.lang.String) $r39;
        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);
        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

     label18:
        $r43 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r43;

        catch java.util.MissingResourceException from label0 to label1 with label2;
    }

    public java.lang.Object clone()
    {
        java.util.Locale r0, r1;
        java.lang.Object $r2;
        java.lang.CloneNotSupportedException $r4, r5;
        java.lang.InternalError $r6;

        r0 := @this: java.util.Locale;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        r1 = (java.util.Locale) $r2;

     label1:
        return r1;

     label2:
        $r4 := @caughtexception;
        r5 = $r4;
        $r6 = new java.lang.InternalError;
        specialinvoke $r6.<java.lang.InternalError: void <init>()>();
        throw $r6;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    public int hashCode()
    {
        java.util.Locale r0;
        int i0, $i1;
        sun.util.locale.BaseLocale $r1;
        sun.util.locale.LocaleExtensions $r2, $r3;

        r0 := @this: java.util.Locale;
        i0 = r0.<java.util.Locale: int hashCodeValue>;
        if i0 != 0 goto label1;

        $r1 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        i0 = virtualinvoke $r1.<sun.util.locale.BaseLocale: int hashCode()>();
        $r2 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        if $r2 == null goto label0;

        $r3 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        $i1 = virtualinvoke $r3.<sun.util.locale.LocaleExtensions: int hashCode()>();
        i0 = i0 ^ $i1;

     label0:
        r0.<java.util.Locale: int hashCodeValue> = i0;

     label1:
        return i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Locale r0, $r3, $r6, $r9;
        java.lang.Object r1;
        sun.util.locale.BaseLocale r2, $r4;
        boolean $z0, $z1, $z2, $z3;
        sun.util.locale.LocaleExtensions $r5, $r7, $r8, $r10;

        r0 := @this: java.util.Locale;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof java.util.Locale;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = (java.util.Locale) r1;
        r2 = $r3.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r4 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $z1 = virtualinvoke $r4.<sun.util.locale.BaseLocale: boolean equals(java.lang.Object)>(r2);
        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r5 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        if $r5 != null goto label5;

        $r6 = (java.util.Locale) r1;
        $r7 = $r6.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        if $r7 != null goto label3;

        $z2 = 1;
        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;

     label5:
        $r8 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        $r9 = (java.util.Locale) r1;
        $r10 = $r9.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        $z3 = virtualinvoke $r8.<sun.util.locale.LocaleExtensions: boolean equals(java.lang.Object)>($r10);
        return $z3;
    }

    private java.lang.String[] getDisplayVariantArray(sun.util.resources.OpenListResourceBundle, java.util.Locale)
    {
        java.util.Locale r0, r2;
        sun.util.resources.OpenListResourceBundle r1;
        java.util.StringTokenizer $r3, r4;
        java.lang.String[] r5;
        int i0, $i1, $i2;
        sun.util.locale.BaseLocale $r6;
        java.lang.String $r7, $r8, $r9;

        r0 := @this: java.util.Locale;
        r1 := @parameter0: sun.util.resources.OpenListResourceBundle;
        r2 := @parameter1: java.util.Locale;
        $r3 = new java.util.StringTokenizer;
        $r6 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r7 = virtualinvoke $r6.<sun.util.locale.BaseLocale: java.lang.String getVariant()>();
        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r7, "_");
        r4 = $r3;
        $i1 = virtualinvoke r4.<java.util.StringTokenizer: int countTokens()>();
        r5 = newarray (java.lang.String)[$i1];
        i0 = 0;

     label0:
        $i2 = lengthof r5;
        if i0 >= $i2 goto label1;

        $r8 = virtualinvoke r4.<java.util.StringTokenizer: java.lang.String nextToken()>();
        $r9 = specialinvoke r0.<java.util.Locale: java.lang.String getDisplayString(java.lang.String,java.util.Locale,int)>($r8, r2, 2);
        r5[i0] = $r9;
        i0 = i0 + 1;
        goto label0;

     label1:
        return r5;
    }

    private static java.lang.String formatList(java.lang.String[], java.lang.String, java.lang.String)
    {
        java.lang.String[] r0;
        java.lang.String r1, r2, $r6, $r8, $r15;
        java.lang.StringBuffer r3, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.text.MessageFormat $r9, r10, $r13, r14;
        java.lang.Object[] r11;
        java.lang.Integer $r12;

        r0 := @parameter0: java.lang.String[];
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        if r1 == null goto label0;

        if r2 != null goto label4;

     label0:
        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();
        r3 = $r4;
        i0 = 0;

     label1:
        $i1 = lengthof r0;
        if i0 >= $i1 goto label3;

        if i0 <= 0 goto label2;

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

     label2:
        $r6 = r0[i0];
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);
        i0 = i0 + 1;
        goto label1;

     label3:
        $r8 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r8;

     label4:
        $i2 = lengthof r0;
        if $i2 <= 3 goto label5;

        $r9 = new java.text.MessageFormat;
        specialinvoke $r9.<java.text.MessageFormat: void <init>(java.lang.String)>(r2);
        r10 = $r9;
        r0 = staticinvoke <java.util.Locale: java.lang.String[] composeList(java.text.MessageFormat,java.lang.String[])>(r10, r0);

     label5:
        $i3 = lengthof r0;
        $i4 = $i3 + 1;
        r11 = newarray (java.lang.Object)[$i4];
        $i5 = lengthof r0;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r11, 1, $i5);
        $r12 = new java.lang.Integer;
        $i6 = lengthof r0;
        specialinvoke $r12.<java.lang.Integer: void <init>(int)>($i6);
        r11[0] = $r12;
        $r13 = new java.text.MessageFormat;
        specialinvoke $r13.<java.text.MessageFormat: void <init>(java.lang.String)>(r1);
        r14 = $r13;
        $r15 = virtualinvoke r14.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>(r11);
        return $r15;
    }

    private static java.lang.String[] composeList(java.text.MessageFormat, java.lang.String[])
    {
        java.text.MessageFormat r0;
        java.lang.String[] r1, r2, r4, $r5, $r8;
        java.lang.String r3, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @parameter0: java.text.MessageFormat;
        r1 := @parameter1: java.lang.String[];
        $i0 = lengthof r1;
        if $i0 > 3 goto label0;

        return r1;

     label0:
        $r5 = newarray (java.lang.String)[2];
        $r6 = r1[0];
        $r5[0] = $r6;
        $r7 = r1[1];
        $r5[1] = $r7;
        r2 = $r5;
        r3 = virtualinvoke r0.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>(r2);
        $i1 = lengthof r1;
        $i2 = $i1 - 1;
        r4 = newarray (java.lang.String)[$i2];
        $i3 = lengthof r4;
        $i4 = $i3 - 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 2, r4, 1, $i4);
        r4[0] = r3;
        $r8 = staticinvoke <java.util.Locale: java.lang.String[] composeList(java.text.MessageFormat,java.lang.String[])>(r0, r4);
        return $r8;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Locale r0;
        java.io.ObjectOutputStream r1;
        java.io.ObjectOutputStream$PutField r2;
        sun.util.locale.BaseLocale $r3, $r5, $r7, $r9;
        java.lang.String $r4, $r6, $r8, $r10, $r12, $r14;
        sun.util.locale.LocaleExtensions $r13, $r15;

        r0 := @this: java.util.Locale;
        r1 := @parameter0: java.io.ObjectOutputStream;
        r2 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();
        $r3 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r4 = virtualinvoke $r3.<sun.util.locale.BaseLocale: java.lang.String getLanguage()>();
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("language", $r4);
        $r5 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r6 = virtualinvoke $r5.<sun.util.locale.BaseLocale: java.lang.String getScript()>();
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("script", $r6);
        $r7 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r8 = virtualinvoke $r7.<sun.util.locale.BaseLocale: java.lang.String getRegion()>();
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("country", $r8);
        $r9 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r10 = virtualinvoke $r9.<sun.util.locale.BaseLocale: java.lang.String getVariant()>();
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("variant", $r10);
        $r12 = "extensions";
        $r13 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        if $r13 != null goto label0;

        $r14 = "";
        goto label1;

     label0:
        $r15 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        $r14 = virtualinvoke $r15.<sun.util.locale.LocaleExtensions: java.lang.String getID()>();

     label1:
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>($r12, $r14);
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("hashcode", -1);
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.Locale r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectInputStream$GetField r2;
        java.lang.String r3, r4, r5, r6, r7, $r14, $r22;
        sun.util.locale.InternalLocaleBuilder r8, $r16;
        java.lang.Object $r9, $r10, $r11, $r12, $r13;
        sun.util.locale.BaseLocale $r15;
        int $i0;
        sun.util.locale.LocaleExtensions $r18;
        sun.util.locale.LocaleSyntaxException $r19, r20;
        java.util.IllformedLocaleException $r21;

        r0 := @this: java.util.Locale;
        r1 := @parameter0: java.io.ObjectInputStream;
        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();
        $r9 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("language", "");
        r3 = (java.lang.String) $r9;
        $r10 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("script", "");
        r4 = (java.lang.String) $r10;
        $r11 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("country", "");
        r5 = (java.lang.String) $r11;
        $r12 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("variant", "");
        r6 = (java.lang.String) $r12;
        $r13 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("extensions", "");
        r7 = (java.lang.String) $r13;
        $r14 = staticinvoke <java.util.Locale: java.lang.String convertOldISOCodes(java.lang.String)>(r3);
        $r15 = staticinvoke <sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r14, r4, r5, r6);
        r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale> = $r15;
        $i0 = virtualinvoke r7.<java.lang.String: int length()>();
        if $i0 <= 0 goto label3;

     label0:
        $r16 = new sun.util.locale.InternalLocaleBuilder;
        specialinvoke $r16.<sun.util.locale.InternalLocaleBuilder: void <init>()>();
        r8 = $r16;
        virtualinvoke r8.<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.lang.String)>(r7);
        $r18 = virtualinvoke r8.<sun.util.locale.InternalLocaleBuilder: sun.util.locale.LocaleExtensions getLocaleExtensions()>();
        r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions> = $r18;

     label1:
        goto label4;

     label2:
        $r19 := @caughtexception;
        r20 = $r19;
        $r21 = new java.util.IllformedLocaleException;
        $r22 = virtualinvoke r20.<sun.util.locale.LocaleSyntaxException: java.lang.String getMessage()>();
        specialinvoke $r21.<java.util.IllformedLocaleException: void <init>(java.lang.String)>($r22);
        throw $r21;

     label3:
        r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions> = null;

     label4:
        return;

        catch sun.util.locale.LocaleSyntaxException from label0 to label1 with label2;
    }

    private java.lang.Object readResolve() throws java.io.ObjectStreamException
    {
        java.util.Locale r0, $r10;
        sun.util.locale.BaseLocale $r1, $r3, $r5, $r7;
        java.lang.String $r2, $r4, $r6, $r8;
        sun.util.locale.LocaleExtensions $r9;

        r0 := @this: java.util.Locale;
        $r1 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r2 = virtualinvoke $r1.<sun.util.locale.BaseLocale: java.lang.String getLanguage()>();
        $r3 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r4 = virtualinvoke $r3.<sun.util.locale.BaseLocale: java.lang.String getScript()>();
        $r5 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r6 = virtualinvoke $r5.<sun.util.locale.BaseLocale: java.lang.String getRegion()>();
        $r7 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        $r8 = virtualinvoke $r7.<sun.util.locale.BaseLocale: java.lang.String getVariant()>();
        $r9 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        $r10 = staticinvoke <java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.LocaleExtensions)>($r2, $r4, $r6, $r8, $r9);
        return $r10;
    }

    private static java.lang.String convertOldISOCodes(java.lang.String)
    {
        java.lang.String r0, $r1, r2;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>(r0);
        r2 = virtualinvoke $r1.<java.lang.String: java.lang.String intern()>();
        if r2 != "he" goto label0;

        return "iw";

     label0:
        if r2 != "yi" goto label1;

        return "ji";

     label1:
        if r2 != "id" goto label2;

        return "in";

     label2:
        return r2;
    }

    private static sun.util.locale.LocaleExtensions getCompatibilityExtensions(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, r3, $r5, $r6;
        sun.util.locale.LocaleExtensions r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        r3 := @parameter3: java.lang.String;
        r4 = null;
        $z0 = staticinvoke <sun.util.locale.LocaleUtils: boolean caseIgnoreMatch(java.lang.String,java.lang.String)>(r0, "ja");
        if $z0 == 0 goto label0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i0 != 0 goto label0;

        $z1 = staticinvoke <sun.util.locale.LocaleUtils: boolean caseIgnoreMatch(java.lang.String,java.lang.String)>(r2, "jp");
        if $z1 == 0 goto label0;

        $r5 = "JP";
        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r3);
        if $z2 == 0 goto label0;

        r4 = <sun.util.locale.LocaleExtensions: sun.util.locale.LocaleExtensions CALENDAR_JAPANESE>;
        goto label1;

     label0:
        $z3 = staticinvoke <sun.util.locale.LocaleUtils: boolean caseIgnoreMatch(java.lang.String,java.lang.String)>(r0, "th");
        if $z3 == 0 goto label1;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i1 != 0 goto label1;

        $z4 = staticinvoke <sun.util.locale.LocaleUtils: boolean caseIgnoreMatch(java.lang.String,java.lang.String)>(r2, "th");
        if $z4 == 0 goto label1;

        $r6 = "TH";
        $z5 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r3);
        if $z5 == 0 goto label1;

        r4 = <sun.util.locale.LocaleExtensions: sun.util.locale.LocaleExtensions NUMBER_THAI>;

     label1:
        return r4;
    }

    void <init>(sun.util.locale.BaseLocale, sun.util.locale.LocaleExtensions, java.util.Locale$1)
    {
        java.util.Locale r0;
        sun.util.locale.BaseLocale r1;
        sun.util.locale.LocaleExtensions r2;
        java.util.Locale$1 r3;

        r0 := @this: java.util.Locale;
        r1 := @parameter0: sun.util.locale.BaseLocale;
        r2 := @parameter1: sun.util.locale.LocaleExtensions;
        r3 := @parameter2: java.util.Locale$1;
        specialinvoke r0.<java.util.Locale: void <init>(sun.util.locale.BaseLocale,sun.util.locale.LocaleExtensions)>(r1, r2);
        return;
    }

    static sun.util.locale.BaseLocale access$600(java.util.Locale)
    {
        java.util.Locale r0;
        sun.util.locale.BaseLocale $r1;

        r0 := @parameter0: java.util.Locale;
        $r1 = r0.<java.util.Locale: sun.util.locale.BaseLocale baseLocale>;
        return $r1;
    }

    static sun.util.locale.LocaleExtensions access$700(java.util.Locale)
    {
        java.util.Locale r0;
        sun.util.locale.LocaleExtensions $r1;

        r0 := @parameter0: java.util.Locale;
        $r1 = r0.<java.util.Locale: sun.util.locale.LocaleExtensions localeExtensions>;
        return $r1;
    }

    static sun.util.locale.LocaleExtensions access$800(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, r3;
        sun.util.locale.LocaleExtensions $r4;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        r3 := @parameter3: java.lang.String;
        $r4 = staticinvoke <java.util.Locale: sun.util.locale.LocaleExtensions getCompatibilityExtensions(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2, r3);
        return $r4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r29;
        java.io.ObjectStreamField $r1, $r26, $r27, $r28, $r30, $r31;
        boolean $z0, $z1;
        java.util.Locale$Cache $r2;
        java.util.Locale $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        java.io.ObjectStreamField[] $r25;

        $r0 = class "java/util/Locale";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.util.Locale: boolean $assertionsDisabled> = $z1;
        $r2 = new java.util.Locale$Cache;
        specialinvoke $r2.<java.util.Locale$Cache: void <init>(java.util.Locale$1)>(null);
        <java.util.Locale: java.util.Locale$Cache LOCALECACHE> = $r2;
        $r3 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("en", "");
        <java.util.Locale: java.util.Locale ENGLISH> = $r3;
        $r4 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("fr", "");
        <java.util.Locale: java.util.Locale FRENCH> = $r4;
        $r5 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("de", "");
        <java.util.Locale: java.util.Locale GERMAN> = $r5;
        $r6 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("it", "");
        <java.util.Locale: java.util.Locale ITALIAN> = $r6;
        $r7 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("ja", "");
        <java.util.Locale: java.util.Locale JAPANESE> = $r7;
        $r8 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("ko", "");
        <java.util.Locale: java.util.Locale KOREAN> = $r8;
        $r9 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("zh", "");
        <java.util.Locale: java.util.Locale CHINESE> = $r9;
        $r10 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("zh", "CN");
        <java.util.Locale: java.util.Locale SIMPLIFIED_CHINESE> = $r10;
        $r11 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("zh", "TW");
        <java.util.Locale: java.util.Locale TRADITIONAL_CHINESE> = $r11;
        $r12 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("fr", "FR");
        <java.util.Locale: java.util.Locale FRANCE> = $r12;
        $r13 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("de", "DE");
        <java.util.Locale: java.util.Locale GERMANY> = $r13;
        $r14 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("it", "IT");
        <java.util.Locale: java.util.Locale ITALY> = $r14;
        $r15 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("ja", "JP");
        <java.util.Locale: java.util.Locale JAPAN> = $r15;
        $r16 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("ko", "KR");
        <java.util.Locale: java.util.Locale KOREA> = $r16;
        $r17 = <java.util.Locale: java.util.Locale SIMPLIFIED_CHINESE>;
        <java.util.Locale: java.util.Locale CHINA> = $r17;
        $r18 = <java.util.Locale: java.util.Locale SIMPLIFIED_CHINESE>;
        <java.util.Locale: java.util.Locale PRC> = $r18;
        $r19 = <java.util.Locale: java.util.Locale TRADITIONAL_CHINESE>;
        <java.util.Locale: java.util.Locale TAIWAN> = $r19;
        $r20 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("en", "GB");
        <java.util.Locale: java.util.Locale UK> = $r20;
        $r21 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("en", "US");
        <java.util.Locale: java.util.Locale US> = $r21;
        $r22 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("en", "CA");
        <java.util.Locale: java.util.Locale CANADA> = $r22;
        $r23 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("fr", "CA");
        <java.util.Locale: java.util.Locale CANADA_FRENCH> = $r23;
        $r24 = staticinvoke <java.util.Locale: java.util.Locale createConstant(java.lang.String,java.lang.String)>("", "");
        <java.util.Locale: java.util.Locale ROOT> = $r24;
        <java.util.Locale: java.util.Locale defaultLocale> = null;
        <java.util.Locale: java.util.Locale defaultDisplayLocale> = null;
        <java.util.Locale: java.util.Locale defaultFormatLocale> = null;
        $r25 = newarray (java.io.ObjectStreamField)[6];
        $r1 = new java.io.ObjectStreamField;
        specialinvoke $r1.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("language", class "java/lang/String");
        $r25[0] = $r1;
        $r26 = new java.io.ObjectStreamField;
        specialinvoke $r26.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("country", class "java/lang/String");
        $r25[1] = $r26;
        $r27 = new java.io.ObjectStreamField;
        specialinvoke $r27.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("variant", class "java/lang/String");
        $r25[2] = $r27;
        $r28 = new java.io.ObjectStreamField;
        $r29 = <java.lang.Integer: java.lang.Class TYPE>;
        specialinvoke $r28.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("hashcode", $r29);
        $r25[3] = $r28;
        $r30 = new java.io.ObjectStreamField;
        specialinvoke $r30.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("script", class "java/lang/String");
        $r25[4] = $r30;
        $r31 = new java.io.ObjectStreamField;
        specialinvoke $r31.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("extensions", class "java/lang/String");
        $r25[5] = $r31;
        <java.util.Locale: java.io.ObjectStreamField[] serialPersistentFields> = $r25;
        <java.util.Locale: java.lang.String[] isoLanguages> = null;
        <java.util.Locale: java.lang.String[] isoCountries> = null;
        return;
    }
}
