class java.util.IdentityHashMap$EntrySet extends java.util.AbstractSet
{
    final java.util.IdentityHashMap this$0;

    private void <init>(java.util.IdentityHashMap)
    {
        java.util.IdentityHashMap$EntrySet r0;
        java.util.IdentityHashMap r1;

        r0 := @this: java.util.IdentityHashMap$EntrySet;
        r1 := @parameter0: java.util.IdentityHashMap;
        r0.<java.util.IdentityHashMap$EntrySet: java.util.IdentityHashMap this$0> = r1;
        specialinvoke r0.<java.util.AbstractSet: void <init>()>();
        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.IdentityHashMap$EntrySet r0;
        java.util.IdentityHashMap$EntryIterator $r1;
        java.util.IdentityHashMap $r2;

        r0 := @this: java.util.IdentityHashMap$EntrySet;
        $r1 = new java.util.IdentityHashMap$EntryIterator;
        $r2 = r0.<java.util.IdentityHashMap$EntrySet: java.util.IdentityHashMap this$0>;
        specialinvoke $r1.<java.util.IdentityHashMap$EntryIterator: void <init>(java.util.IdentityHashMap,java.util.IdentityHashMap$1)>($r2, null);
        return $r1;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.IdentityHashMap$EntrySet r0;
        java.lang.Object r1, $r4, $r5;
        java.util.Map$Entry r2;
        boolean $z0, $z1;
        java.util.IdentityHashMap $r3;

        r0 := @this: java.util.IdentityHashMap$EntrySet;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.util.Map$Entry;
        if $z0 != 0 goto label0;

        return 0;

     label0:
        r2 = (java.util.Map$Entry) r1;
        $r3 = r0.<java.util.IdentityHashMap$EntrySet: java.util.IdentityHashMap this$0>;
        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();
        $z1 = staticinvoke <java.util.IdentityHashMap: boolean access$1500(java.util.IdentityHashMap,java.lang.Object,java.lang.Object)>($r3, $r4, $r5);
        return $z1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.IdentityHashMap$EntrySet r0;
        java.lang.Object r1, $r4, $r5;
        java.util.Map$Entry r2;
        boolean $z0, $z1;
        java.util.IdentityHashMap $r3;

        r0 := @this: java.util.IdentityHashMap$EntrySet;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.util.Map$Entry;
        if $z0 != 0 goto label0;

        return 0;

     label0:
        r2 = (java.util.Map$Entry) r1;
        $r3 = r0.<java.util.IdentityHashMap$EntrySet: java.util.IdentityHashMap this$0>;
        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();
        $z1 = staticinvoke <java.util.IdentityHashMap: boolean access$1600(java.util.IdentityHashMap,java.lang.Object,java.lang.Object)>($r3, $r4, $r5);
        return $z1;
    }

    public int size()
    {
        java.util.IdentityHashMap$EntrySet r0;
        java.util.IdentityHashMap $r1;
        int $i0;

        r0 := @this: java.util.IdentityHashMap$EntrySet;
        $r1 = r0.<java.util.IdentityHashMap$EntrySet: java.util.IdentityHashMap this$0>;
        $i0 = staticinvoke <java.util.IdentityHashMap: int access$000(java.util.IdentityHashMap)>($r1);
        return $i0;
    }

    public void clear()
    {
        java.util.IdentityHashMap$EntrySet r0;
        java.util.IdentityHashMap $r1;

        r0 := @this: java.util.IdentityHashMap$EntrySet;
        $r1 = r0.<java.util.IdentityHashMap$EntrySet: java.util.IdentityHashMap this$0>;
        virtualinvoke $r1.<java.util.IdentityHashMap: void clear()>();
        return;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.IdentityHashMap$EntrySet r0;
        java.util.Collection r1;
        boolean z0, $z1, $z2;
        java.util.Iterator r2;
        java.lang.Object $r3;

        r0 := @this: java.util.IdentityHashMap$EntrySet;
        r1 := @parameter0: java.util.Collection;
        z0 = 0;
        r2 = virtualinvoke r0.<java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>();

     label0:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label1;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $z2 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r3);
        if $z2 == 0 goto label0;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();
        z0 = 1;
        goto label0;

     label1:
        return z0;
    }

    public java.lang.Object[] toArray()
    {
        java.util.IdentityHashMap$EntrySet r0;
        int i0, i1;
        java.lang.Object[] r1;
        java.util.Iterator r2;
        java.util.AbstractMap$SimpleEntry $r3;
        java.lang.Object $r4;
        java.util.Map$Entry $r5;

        r0 := @this: java.util.IdentityHashMap$EntrySet;
        i0 = virtualinvoke r0.<java.util.IdentityHashMap$EntrySet: int size()>();
        r1 = newarray (java.lang.Object)[i0];
        r2 = virtualinvoke r0.<java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>();
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        $r3 = new java.util.AbstractMap$SimpleEntry;
        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $r5 = (java.util.Map$Entry) $r4;
        specialinvoke $r3.<java.util.AbstractMap$SimpleEntry: void <init>(java.util.Map$Entry)>($r5);
        r1[i1] = $r3;
        i1 = i1 + 1;
        goto label0;

     label1:
        return r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.IdentityHashMap$EntrySet r0;
        java.lang.Object[] r1, $r7;
        int i0, i1, $i2, $i3;
        java.util.Iterator r2;
        java.util.AbstractMap$SimpleEntry $r3;
        java.lang.Class $r4, $r5;
        java.lang.Object $r6, $r8;
        java.util.Map$Entry $r9;

        r0 := @this: java.util.IdentityHashMap$EntrySet;
        r1 := @parameter0: java.lang.Object[];
        i0 = virtualinvoke r0.<java.util.IdentityHashMap$EntrySet: int size()>();
        $i2 = lengthof r1;
        if $i2 >= i0 goto label0;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();
        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r5, i0);
        $r7 = (java.lang.Object[]) $r6;
        r1 = (java.lang.Object[]) $r7;

     label0:
        r2 = virtualinvoke r0.<java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>();
        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = new java.util.AbstractMap$SimpleEntry;
        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $r9 = (java.util.Map$Entry) $r8;
        specialinvoke $r3.<java.util.AbstractMap$SimpleEntry: void <init>(java.util.Map$Entry)>($r9);
        r1[i1] = $r3;
        i1 = i1 + 1;
        goto label1;

     label2:
        $i3 = lengthof r1;
        if $i3 <= i0 goto label3;

        r1[i0] = null;

     label3:
        return r1;
    }

    void <init>(java.util.IdentityHashMap, java.util.IdentityHashMap$1)
    {
        java.util.IdentityHashMap$EntrySet r0;
        java.util.IdentityHashMap r1;
        java.util.IdentityHashMap$1 r2;

        r0 := @this: java.util.IdentityHashMap$EntrySet;
        r1 := @parameter0: java.util.IdentityHashMap;
        r2 := @parameter1: java.util.IdentityHashMap$1;
        specialinvoke r0.<java.util.IdentityHashMap$EntrySet: void <init>(java.util.IdentityHashMap)>(r1);
        return;
    }
}
