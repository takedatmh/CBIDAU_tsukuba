public abstract class sun.security.krb5.internal.crypto.dk.DkCrypto extends java.lang.Object
{
    protected static final boolean debug;
    static final byte[] KERBEROS_CONSTANT;

    public void <init>()
    {
        sun.security.krb5.internal.crypto.dk.DkCrypto r0;

        r0 := @this: sun.security.krb5.internal.crypto.dk.DkCrypto;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    protected abstract int getKeySeedLength();

    protected abstract byte[] randomToKey(byte[]);

    protected abstract javax.crypto.Cipher getCipher(byte[], byte[], int) throws java.security.GeneralSecurityException;

    public abstract int getChecksumLength();

    protected abstract byte[] getHmac(byte[], byte[]) throws java.security.GeneralSecurityException;

    public byte[] encrypt(byte[], int, byte[], byte[], byte[], int, int) throws java.security.GeneralSecurityException, sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.dk.DkCrypto r0;
        byte[] r1, r2, r3, r4, r6, r7, r8, r10, r11, r12, r13, r14;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i10, $i11, $i13, $i14, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i29, $i30, $i31, $i32;
        java.lang.StringBuilder $r5, $r17, $r18;
        javax.crypto.Cipher r9;
        java.lang.Throwable r15, $r20;
        boolean $z0;
        java.security.GeneralSecurityException $r16;
        java.lang.String $r19;
        byte $b9, $b12, $b15, $b17;

        r0 := @this: sun.security.krb5.internal.crypto.dk.DkCrypto;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: byte[];
        r3 := @parameter3: byte[];
        r4 := @parameter4: byte[];
        i1 := @parameter5: int;
        i2 := @parameter6: int;
        $z0 = staticinvoke <sun.security.krb5.internal.crypto.KeyUsage: boolean isValid(int)>(i0);
        if $z0 != 0 goto label0;

        $r16 = new java.security.GeneralSecurityException;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r17 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid key usage number: ");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r16.<java.security.GeneralSecurityException: void <init>(java.lang.String)>($r19);
        throw $r16;

     label0:
        r6 = null;
        r7 = null;

     label1:
        r8 = newarray (byte)[5];
        $i7 = i0 >> 24;
        $i8 = $i7 & 255;
        $b9 = (byte) $i8;
        r8[0] = $b9;
        $i10 = i0 >> 16;
        $i11 = $i10 & 255;
        $b12 = (byte) $i11;
        r8[1] = $b12;
        $i13 = i0 >> 8;
        $i14 = $i13 & 255;
        $b15 = (byte) $i14;
        r8[2] = $b15;
        $i16 = i0 & 255;
        $b17 = (byte) $i16;
        r8[3] = $b17;
        r8[4] = -86;
        r6 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: byte[] dk(byte[],byte[])>(r1, r8);
        r9 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: javax.crypto.Cipher getCipher(byte[],byte[],int)>(r6, r2, 1);
        i3 = virtualinvoke r9.<javax.crypto.Cipher: int getBlockSize()>();
        r10 = staticinvoke <sun.security.krb5.Confounder: byte[] bytes(int)>(i3);
        $i18 = lengthof r10;
        $i19 = $i18 + i2;
        i4 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: int roundup(int,int)>($i19, i3);
        r11 = newarray (byte)[i4];
        $i20 = lengthof r10;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, r11, 0, $i20);
        $i21 = lengthof r10;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, i1, r11, $i21, i2);
        $i22 = lengthof r10;
        $i23 = $i22 + i2;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r11, $i23, i4, 0);
        i5 = virtualinvoke r9.<javax.crypto.Cipher: int getOutputSize(int)>(i4);
        $i24 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: int getChecksumLength()>();
        i6 = i5 + $i24;
        r12 = newarray (byte)[i6];
        virtualinvoke r9.<javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int)>(r11, 0, i4, r12, 0);
        if r3 == null goto label2;

        $i26 = lengthof r3;
        if $i26 != i3 goto label2;

        $i27 = i5 - i3;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, $i27, r3, 0, i3);

     label2:
        r8[4] = 85;
        r7 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: byte[] dk(byte[],byte[])>(r1, r8);
        r13 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: byte[] getHmac(byte[],byte[])>(r7, r11);
        $i28 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: int getChecksumLength()>();
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r13, 0, r12, i5, $i28);
        r14 = r12;

     label3:
        if r6 == null goto label4;

        $i29 = lengthof r6;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r6, 0, $i29, 0);

     label4:
        if r7 == null goto label5;

        $i30 = lengthof r7;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r7, 0, $i30, 0);

     label5:
        return r14;

     label6:
        $r20 := @caughtexception;

     label7:
        r15 = $r20;

     label8:
        if r6 == null goto label9;

        $i31 = lengthof r6;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r6, 0, $i31, 0);

     label9:
        if r7 == null goto label10;

        $i32 = lengthof r7;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r7, 0, $i32, 0);

     label10:
        throw r15;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public byte[] encryptRaw(byte[], int, byte[], byte[], int, int) throws java.security.GeneralSecurityException, sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.dk.DkCrypto r0;
        byte[] r1, r2, r3, r5;
        int i0, i1, i2, i3, i4, $i5;
        javax.crypto.Cipher r4;
        java.security.GeneralSecurityException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.String $r13;

        r0 := @this: sun.security.krb5.internal.crypto.dk.DkCrypto;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: byte[];
        r3 := @parameter3: byte[];
        i1 := @parameter4: int;
        i2 := @parameter5: int;
        r4 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: javax.crypto.Cipher getCipher(byte[],byte[],int)>(r1, r2, 1);
        i3 = virtualinvoke r4.<javax.crypto.Cipher: int getBlockSize()>();
        $i5 = i2 % i3;
        if $i5 == 0 goto label0;

        $r6 = new java.security.GeneralSecurityException;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("length of data to be encrypted (");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not a multiple of the blocksize (");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.security.GeneralSecurityException: void <init>(java.lang.String)>($r13);
        throw $r6;

     label0:
        i4 = virtualinvoke r4.<javax.crypto.Cipher: int getOutputSize(int)>(i2);
        r5 = newarray (byte)[i4];
        virtualinvoke r4.<javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int)>(r3, 0, i2, r5, 0);
        return r5;
    }

    public byte[] decryptRaw(byte[], int, byte[], byte[], int, int) throws java.security.GeneralSecurityException
    {
        sun.security.krb5.internal.crypto.dk.DkCrypto r0;
        byte[] r1, r2, r3, r5;
        int i0, i1, i2, i3, $i4;
        javax.crypto.Cipher r4;
        java.security.GeneralSecurityException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.String $r13;

        r0 := @this: sun.security.krb5.internal.crypto.dk.DkCrypto;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: byte[];
        r3 := @parameter3: byte[];
        i1 := @parameter4: int;
        i2 := @parameter5: int;
        r4 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: javax.crypto.Cipher getCipher(byte[],byte[],int)>(r1, r2, 2);
        i3 = virtualinvoke r4.<javax.crypto.Cipher: int getBlockSize()>();
        $i4 = i2 % i3;
        if $i4 == 0 goto label0;

        $r6 = new java.security.GeneralSecurityException;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("length of data to be decrypted (");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not a multiple of the blocksize (");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.security.GeneralSecurityException: void <init>(java.lang.String)>($r13);
        throw $r6;

     label0:
        r5 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i1, i2);
        return r5;
    }

    public byte[] decrypt(byte[], int, byte[], byte[], int, int) throws java.security.GeneralSecurityException
    {
        sun.security.krb5.internal.crypto.dk.DkCrypto r0;
        byte[] r1, r2, r3, r5, r6, r7, r9, r10, r11, r18;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i10, $i11, $i13, $i14, $i16, $i18, $i20, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        java.lang.StringBuilder $r4, $r14, $r15;
        javax.crypto.Cipher r8;
        boolean z0, $z1;
        java.lang.Throwable r12, $r19;
        java.security.GeneralSecurityException $r13, $r17;
        java.lang.String $r16;
        byte $b9, $b12, $b15, $b17, $b19, $b21;

        r0 := @this: sun.security.krb5.internal.crypto.dk.DkCrypto;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: byte[];
        r3 := @parameter3: byte[];
        i1 := @parameter4: int;
        i2 := @parameter5: int;
        $z1 = staticinvoke <sun.security.krb5.internal.crypto.KeyUsage: boolean isValid(int)>(i0);
        if $z1 != 0 goto label0;

        $r13 = new java.security.GeneralSecurityException;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r14 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid key usage number: ");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r13.<java.security.GeneralSecurityException: void <init>(java.lang.String)>($r16);
        throw $r13;

     label0:
        r5 = null;
        r6 = null;

     label1:
        r7 = newarray (byte)[5];
        $i7 = i0 >> 24;
        $i8 = $i7 & 255;
        $b9 = (byte) $i8;
        r7[0] = $b9;
        $i10 = i0 >> 16;
        $i11 = $i10 & 255;
        $b12 = (byte) $i11;
        r7[1] = $b12;
        $i13 = i0 >> 8;
        $i14 = $i13 & 255;
        $b15 = (byte) $i14;
        r7[2] = $b15;
        $i16 = i0 & 255;
        $b17 = (byte) $i16;
        r7[3] = $b17;
        r7[4] = -86;
        r5 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: byte[] dk(byte[],byte[])>(r1, r7);
        r8 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: javax.crypto.Cipher getCipher(byte[],byte[],int)>(r5, r2, 2);
        i3 = virtualinvoke r8.<javax.crypto.Cipher: int getBlockSize()>();
        i4 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: int getChecksumLength()>();
        i5 = i2 - i4;
        r9 = virtualinvoke r8.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i1, i5);
        r7[4] = 85;
        r6 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: byte[] dk(byte[],byte[])>(r1, r7);
        r10 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: byte[] getHmac(byte[],byte[])>(r6, r9);
        z0 = 0;
        $i18 = lengthof r10;
        if $i18 < i4 goto label4;

        i6 = 0;

     label2:
        if i6 >= i4 goto label4;

        $b19 = r10[i6];
        $i20 = i5 + i6;
        $b21 = r3[$i20];
        if $b19 == $b21 goto label3;

        z0 = 1;
        goto label4;

     label3:
        i6 = i6 + 1;
        goto label2;

     label4:
        if z0 == 0 goto label5;

        $r17 = new java.security.GeneralSecurityException;
        specialinvoke $r17.<java.security.GeneralSecurityException: void <init>(java.lang.String)>("Checksum failed");
        throw $r17;

     label5:
        if r2 == null goto label6;

        $i22 = lengthof r2;
        if $i22 != i3 goto label6;

        $i23 = i1 + i5;
        $i24 = $i23 - i3;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, $i24, r2, 0, i3);

     label6:
        $i25 = lengthof r9;
        $i26 = $i25 - i3;
        r18 = newarray (byte)[$i26];
        $i27 = lengthof r18;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, i3, r18, 0, $i27);
        r11 = r18;

     label7:
        if r5 == null goto label8;

        $i28 = lengthof r5;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r5, 0, $i28, 0);

     label8:
        if r6 == null goto label9;

        $i29 = lengthof r6;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r6, 0, $i29, 0);

     label9:
        return r11;

     label10:
        $r19 := @caughtexception;

     label11:
        r12 = $r19;

     label12:
        if r5 == null goto label13;

        $i30 = lengthof r5;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r5, 0, $i30, 0);

     label13:
        if r6 == null goto label14;

        $i31 = lengthof r6;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r6, 0, $i31, 0);

     label14:
        throw r12;

        catch java.lang.Throwable from label1 to label7 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    int roundup(int, int)
    {
        sun.security.krb5.internal.crypto.dk.DkCrypto r0;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: sun.security.krb5.internal.crypto.dk.DkCrypto;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i2 = i0 + i1;
        $i3 = $i2 - 1;
        $i4 = $i3 / i1;
        $i5 = $i4 * i1;
        return $i5;
    }

    public byte[] calculateChecksum(byte[], int, byte[], int, int) throws java.security.GeneralSecurityException
    {
        sun.security.krb5.internal.crypto.dk.DkCrypto r0;
        byte[] r1, r2, r4, r5, r6, r7, r8, r14;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i9, $i10, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.lang.StringBuilder $r3, $r11, $r12, $r16, $r17, $r18, $r19, $r20;
        java.lang.Throwable r9, $r22;
        boolean $z0;
        java.security.GeneralSecurityException $r10, $r15;
        java.lang.String $r13, $r21;
        byte $b5, $b8, $b11, $b13;

        r0 := @this: sun.security.krb5.internal.crypto.dk.DkCrypto;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: byte[];
        i1 := @parameter3: int;
        i2 := @parameter4: int;
        $z0 = staticinvoke <sun.security.krb5.internal.crypto.KeyUsage: boolean isValid(int)>(i0);
        if $z0 != 0 goto label0;

        $r10 = new java.security.GeneralSecurityException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid key usage number: ");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r10.<java.security.GeneralSecurityException: void <init>(java.lang.String)>($r13);
        throw $r10;

     label0:
        r4 = newarray (byte)[5];
        $i3 = i0 >> 24;
        $i4 = $i3 & 255;
        $b5 = (byte) $i4;
        r4[0] = $b5;
        $i6 = i0 >> 16;
        $i7 = $i6 & 255;
        $b8 = (byte) $i7;
        r4[1] = $b8;
        $i9 = i0 >> 8;
        $i10 = $i9 & 255;
        $b11 = (byte) $i10;
        r4[2] = $b11;
        $i12 = i0 & 255;
        $b13 = (byte) $i12;
        r4[3] = $b13;
        r4[4] = -103;
        r5 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: byte[] dk(byte[],byte[])>(r1, r4);

     label1:
        r6 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: byte[] getHmac(byte[],byte[])>(r5, r2);
        $i14 = lengthof r6;
        $i15 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: int getChecksumLength()>();
        if $i14 != $i15 goto label3;

        r7 = r6;

     label2:
        $i16 = lengthof r5;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r5, 0, $i16, 0);
        return r7;

     label3:
        $i17 = lengthof r6;
        $i18 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: int getChecksumLength()>();
        if $i17 <= $i18 goto label5;

        $i19 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: int getChecksumLength()>();
        r14 = newarray (byte)[$i19];
        $i20 = lengthof r14;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r14, 0, $i20);
        r8 = r14;

     label4:
        $i21 = lengthof r5;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r5, 0, $i21, 0);
        return r8;

     label5:
        $r15 = new java.security.GeneralSecurityException;
        $r16 = new java.lang.StringBuilder;
        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checksum size too short: ");
        $i22 = lengthof r6;
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; expecting : ");
        $i23 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: int getChecksumLength()>();
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r15.<java.security.GeneralSecurityException: void <init>(java.lang.String)>($r21);
        throw $r15;

     label6:
        $r22 := @caughtexception;
        r9 = $r22;

     label7:
        $i24 = lengthof r5;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r5, 0, $i24, 0);
        throw r9;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    byte[] dk(byte[], byte[]) throws java.security.GeneralSecurityException
    {
        sun.security.krb5.internal.crypto.dk.DkCrypto r0;
        byte[] r1, r2, $r3, $r4;

        r0 := @this: sun.security.krb5.internal.crypto.dk.DkCrypto;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        $r3 = specialinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: byte[] dr(byte[],byte[])>(r1, r2);
        $r4 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: byte[] randomToKey(byte[])>($r3);
        return $r4;
    }

    private byte[] dr(byte[], byte[]) throws java.security.GeneralSecurityException
    {
        sun.security.krb5.internal.crypto.dk.DkCrypto r0;
        byte[] r1, r2, r4, r5, r6;
        javax.crypto.Cipher r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean z0;

        r0 := @this: sun.security.krb5.internal.crypto.dk.DkCrypto;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        r3 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: javax.crypto.Cipher getCipher(byte[],byte[],int)>(r1, null, 1);
        i0 = virtualinvoke r3.<javax.crypto.Cipher: int getBlockSize()>();
        $i4 = lengthof r2;
        if $i4 == i0 goto label0;

        $i5 = i0 * 8;
        r2 = staticinvoke <sun.security.krb5.internal.crypto.dk.DkCrypto: byte[] nfold(byte[],int)>(r2, $i5);

     label0:
        r4 = r2;
        $i6 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: int getKeySeedLength()>();
        i1 = $i6 >> 3;
        r5 = newarray (byte)[i1];
        z0 = 0;
        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        r6 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r4);
        $i7 = i1 - i2;
        $i8 = lengthof r6;
        if $i7 > $i8 goto label2;

        $i9 = i1 - i2;
        goto label3;

     label2:
        $i9 = lengthof r6;

     label3:
        i3 = $i9;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r5, i2, i3);
        i2 = i2 + i3;
        r4 = r6;
        goto label1;

     label4:
        return r5;
    }

    static byte[] nfold(byte[], int)
    {
        byte[] r0, r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i31, $i32, $i33, $i34, $i37, $i38, $i39, $i40, i41, $i42, i44, $i45, $i46, i48, i51, $i52;
        short s10, $s30, $s36, $s50;
        byte $b29, $b35, $b43, $b47, $b49, $b53;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 = lengthof r0;
        i11 = i0 >> 3;
        i2 = i11;
        i3 = i1;

     label0:
        if i3 == 0 goto label1;

        i4 = i3;
        i3 = i2 % i3;
        i2 = i4;
        goto label0;

     label1:
        $i12 = i11 * i1;
        i5 = $i12 / i2;
        r1 = newarray (byte)[i11];
        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r1, 0);
        i6 = 0;
        i7 = i5 - 1;

     label2:
        if i7 < 0 goto label3;

        $i13 = i1 << 3;
        $i14 = $i13 - 1;
        $i15 = i1 << 3;
        $i16 = $i15 + 13;
        $i17 = i7 / i1;
        $i18 = $i16 * $i17;
        $i19 = $i14 + $i18;
        $i20 = i7 % i1;
        $i21 = i1 - $i20;
        $i22 = $i21 << 3;
        $i23 = $i19 + $i22;
        $i24 = i1 << 3;
        i8 = $i23 % $i24;
        $i25 = i1 - 1;
        $i26 = i8 >>> 3;
        $i27 = $i25 - $i26;
        $i28 = $i27 % i1;
        $b29 = r0[$i28];
        $s30 = $b29 & 255;
        $i31 = $s30 << 8;
        $i32 = i8 >>> 3;
        $i33 = i1 - $i32;
        $i34 = $i33 % i1;
        $b35 = r0[$i34];
        $s36 = $b35 & 255;
        $i37 = $i31 | $s36;
        $i38 = i8 & 7;
        $i39 = $i38 + 1;
        $i40 = $i37 >>> $i39;
        i9 = $i40 & 255;
        i41 = i6 + i9;
        $i42 = i7 % i11;
        $b43 = r1[$i42];
        s10 = $b43 & 255;
        i44 = i41 + s10;
        $i45 = i7 % i11;
        $i46 = i44 & 255;
        $b47 = (byte) $i46;
        r1[$i45] = $b47;
        i6 = i44 >>> 8;
        i7 = i7 + -1;
        goto label2;

     label3:
        if i6 == 0 goto label5;

        i48 = i11 - 1;

     label4:
        if i48 < 0 goto label5;

        $b49 = r1[i48];
        $s50 = $b49 & 255;
        i51 = i6 + $s50;
        $i52 = i51 & 255;
        $b53 = (byte) $i52;
        r1[i48] = $b53;
        i6 = i51 >>> 8;
        i48 = i48 + -1;
        goto label4;

     label5:
        return r1;
    }

    static java.lang.String bytesToString(byte[])
    {
        byte[] r0;
        java.lang.StringBuffer $r1, r2;
        int i0, $i1;
        byte $b2, $b4, $b6;
        short $s3, $s5, $s7;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7, $r9, $r11;

        r0 := @parameter0: byte[];
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        r2 = $r1;
        i0 = 0;

     label0:
        $i1 = lengthof r0;
        if i0 >= $i1 goto label3;

        $b2 = r0[i0];
        $s3 = $b2 & 255;
        if $s3 >= 16 goto label1;

        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");
        $b4 = r0[i0];
        $s5 = $b4 & 255;
        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($s5);
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        goto label2;

     label1:
        $b6 = r0[i0];
        $s7 = $b6 & 255;
        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($s7);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

     label2:
        i0 = i0 + 1;
        goto label0;

     label3:
        $r11 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r11;
    }

    private static byte[] binaryStringToBytes(java.lang.String)
    {
        java.lang.String r0, $r3, $r4;
        char[] r1;
        byte[] r2;
        int i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        byte b1, b2, $b11;

        r0 := @parameter0: java.lang.String;
        r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();
        $i3 = lengthof r1;
        $i4 = $i3 / 2;
        r2 = newarray (byte)[$i4];
        i0 = 0;

     label0:
        $i5 = lengthof r2;
        if i0 >= $i5 goto label1;

        $r3 = new java.lang.String;
        $i6 = i0 * 2;
        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>(r1, $i6, 1);
        b1 = staticinvoke <java.lang.Byte: byte parseByte(java.lang.String,int)>($r3, 16);
        $r4 = new java.lang.String;
        $i7 = i0 * 2;
        $i8 = $i7 + 1;
        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r1, $i8, 1);
        b2 = staticinvoke <java.lang.Byte: byte parseByte(java.lang.String,int)>($r4, 16);
        $i9 = b1 << 4;
        $i10 = $i9 | b2;
        $b11 = (byte) $i10;
        r2[i0] = $b11;
        i0 = i0 + 1;
        goto label0;

     label1:
        return r2;
    }

    static void traceOutput(java.lang.String, byte[], int, int)
    {
        java.lang.String r0, $r10, $r12;
        byte[] r1;
        int i0, i1;
        java.io.ByteArrayOutputStream $r2, r3;
        sun.misc.HexDumpEncoder $r4;
        java.io.ByteArrayInputStream $r5;
        java.io.PrintStream $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r11;
        java.lang.Exception $r13, r14;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: byte[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;

     label0:
        $r2 = new java.io.ByteArrayOutputStream;
        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>(int)>(i1);
        r3 = $r2;
        $r4 = new sun.misc.HexDumpEncoder;
        specialinvoke $r4.<sun.misc.HexDumpEncoder: void <init>()>();
        $r5 = new java.io.ByteArrayInputStream;
        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>(r1, i0, i1);
        virtualinvoke $r4.<sun.misc.HexDumpEncoder: void encodeBuffer(java.io.InputStream,java.io.OutputStream)>($r5, r3);
        $r6 = <java.lang.System: java.io.PrintStream err>;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        $r10 = virtualinvoke r3.<java.io.ByteArrayOutputStream: java.lang.String toString()>();
        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label1:
        goto label3;

     label2:
        $r13 := @caughtexception;
        r14 = $r13;

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    static byte[] charToUtf8(char[])
    {
        char[] r0;
        java.nio.charset.Charset r1;
        java.nio.CharBuffer r2;
        java.nio.ByteBuffer r3;
        int i0;
        byte[] r4;

        r0 := @parameter0: char[];
        r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");
        r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(r0);
        r3 = virtualinvoke r1.<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>(r2);
        i0 = virtualinvoke r3.<java.nio.ByteBuffer: int limit()>();
        r4 = newarray (byte)[i0];
        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r4, 0, i0);
        return r4;
    }

    static byte[] charToUtf16(char[])
    {
        char[] r0;
        java.nio.charset.Charset r1;
        java.nio.CharBuffer r2;
        java.nio.ByteBuffer r3;
        int i0;
        byte[] r4;

        r0 := @parameter0: char[];
        r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-16LE");
        r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(r0);
        r3 = virtualinvoke r1.<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>(r2);
        i0 = virtualinvoke r3.<java.nio.ByteBuffer: int limit()>();
        r4 = newarray (byte)[i0];
        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r4, 0, i0);
        return r4;
    }

    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[8];
        $r0[0] = 107;
        $r0[1] = 101;
        $r0[2] = 114;
        $r0[3] = 98;
        $r0[4] = 101;
        $r0[5] = 114;
        $r0[6] = 111;
        $r0[7] = 115;
        <sun.security.krb5.internal.crypto.dk.DkCrypto: byte[] KERBEROS_CONSTANT> = $r0;
        return;
    }
}
