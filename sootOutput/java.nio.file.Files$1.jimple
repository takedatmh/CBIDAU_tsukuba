final class java.nio.file.Files$1 extends java.lang.Object implements java.nio.file.DirectoryStream$Filter
{
    final java.nio.file.PathMatcher val$matcher;

    void <init>(java.nio.file.PathMatcher)
    {
        java.nio.file.Files$1 r0;
        java.nio.file.PathMatcher r1;

        r0 := @this: java.nio.file.Files$1;
        r1 := @parameter0: java.nio.file.PathMatcher;
        r0.<java.nio.file.Files$1: java.nio.file.PathMatcher val$matcher> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public boolean accept(java.nio.file.Path)
    {
        java.nio.file.Files$1 r0;
        java.nio.file.Path r1, $r3;
        java.nio.file.PathMatcher $r2;
        boolean $z0;

        r0 := @this: java.nio.file.Files$1;
        r1 := @parameter0: java.nio.file.Path;
        $r2 = r0.<java.nio.file.Files$1: java.nio.file.PathMatcher val$matcher>;
        $r3 = interfaceinvoke r1.<java.nio.file.Path: java.nio.file.Path getFileName()>();
        $z0 = interfaceinvoke $r2.<java.nio.file.PathMatcher: boolean matches(java.nio.file.Path)>($r3);
        return $z0;
    }

    public volatile boolean accept(java.lang.Object) throws java.io.IOException
    {
        java.nio.file.Files$1 r0;
        java.lang.Object r1;
        java.nio.file.Path $r2;
        boolean $z0;

        r0 := @this: java.nio.file.Files$1;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.nio.file.Path) r1;
        $z0 = virtualinvoke r0.<java.nio.file.Files$1: boolean accept(java.nio.file.Path)>($r2);
        return $z0;
    }
}
