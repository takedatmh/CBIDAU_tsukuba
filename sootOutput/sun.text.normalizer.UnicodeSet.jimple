public class sun.text.normalizer.UnicodeSet extends java.lang.Object implements sun.text.normalizer.UnicodeMatcher
{
    private static final int LOW;
    private static final int HIGH;
    public static final int MIN_VALUE;
    public static final int MAX_VALUE;
    private int len;
    private int[] list;
    private int[] rangeList;
    private int[] buffer;
    java.util.TreeSet strings;
    private java.lang.String pat;
    private static final int START_EXTRA;
    private static final int GROW_EXTRA;
    private static sun.text.normalizer.UnicodeSet[] INCLUSIONS;
    static final sun.text.normalizer.VersionInfo NO_VERSION;
    public static final int IGNORE_SPACE;

    public void <init>()
    {
        sun.text.normalizer.UnicodeSet r0;
        java.util.TreeSet $r1;
        int $i0, $i1;
        int[] $r2, $r3;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new java.util.TreeSet;
        specialinvoke $r1.<java.util.TreeSet: void <init>()>();
        r0.<sun.text.normalizer.UnicodeSet: java.util.TreeSet strings> = $r1;
        r0.<sun.text.normalizer.UnicodeSet: java.lang.String pat> = null;
        $r2 = newarray (int)[17];
        r0.<sun.text.normalizer.UnicodeSet: int[] list> = $r2;
        $r3 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i0 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i1 = $i0 + 1;
        r0.<sun.text.normalizer.UnicodeSet: int len> = $i1;
        $r3[$i0] = 1114112;
        return;
    }

    public void <init>(int, int)
    {
        sun.text.normalizer.UnicodeSet r0;
        int i0, i1;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: void <init>()>();
        virtualinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet complement(int,int)>(i0, i1);
        return;
    }

    public void <init>(java.lang.String)
    {
        sun.text.normalizer.UnicodeSet r0;
        java.lang.String r1;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: void <init>()>();
        virtualinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable,int)>(r1, null, null, 1);
        return;
    }

    public sun.text.normalizer.UnicodeSet set(sun.text.normalizer.UnicodeSet)
    {
        sun.text.normalizer.UnicodeSet r0, r1;
        int[] $r2, $r4, $r5;
        java.lang.Object $r3, $r8;
        int $i0;
        java.lang.String $r6;
        java.util.TreeSet $r7, $r9;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        r1 := @parameter0: sun.text.normalizer.UnicodeSet;
        $r2 = r1.<sun.text.normalizer.UnicodeSet: int[] list>;
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();
        $r4 = (int[]) $r3;
        $r5 = (int[]) $r4;
        r0.<sun.text.normalizer.UnicodeSet: int[] list> = $r5;
        $i0 = r1.<sun.text.normalizer.UnicodeSet: int len>;
        r0.<sun.text.normalizer.UnicodeSet: int len> = $i0;
        $r6 = r1.<sun.text.normalizer.UnicodeSet: java.lang.String pat>;
        r0.<sun.text.normalizer.UnicodeSet: java.lang.String pat> = $r6;
        $r7 = r1.<sun.text.normalizer.UnicodeSet: java.util.TreeSet strings>;
        $r8 = virtualinvoke $r7.<java.util.TreeSet: java.lang.Object clone()>();
        $r9 = (java.util.TreeSet) $r8;
        r0.<sun.text.normalizer.UnicodeSet: java.util.TreeSet strings> = $r9;
        return r0;
    }

    public final sun.text.normalizer.UnicodeSet applyPattern(java.lang.String)
    {
        sun.text.normalizer.UnicodeSet r0, $r2;
        java.lang.String r1;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable,int)>(r1, null, null, 1);
        return $r2;
    }

    private static void _appendToPat(java.lang.StringBuffer, java.lang.String, boolean)
    {
        java.lang.StringBuffer r0;
        java.lang.String r1;
        boolean z0;
        int i0, $i1, $i2, $i3;

        r0 := @parameter0: java.lang.StringBuffer;
        r1 := @parameter1: java.lang.String;
        z0 := @parameter2: boolean;
        i0 = 0;

     label0:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if i0 >= $i1 goto label1;

        $i2 = staticinvoke <sun.text.normalizer.UTF16: int charAt(java.lang.String,int)>(r1, i0);
        staticinvoke <sun.text.normalizer.UnicodeSet: void _appendToPat(java.lang.StringBuffer,int,boolean)>(r0, $i2, z0);
        $i3 = staticinvoke <sun.text.normalizer.UTF16: int getCharCount(int)>(i0);
        i0 = i0 + $i3;
        goto label0;

     label1:
        return;
    }

    private static void _appendToPat(java.lang.StringBuffer, int, boolean)
    {
        java.lang.StringBuffer r0;
        int i0;
        boolean z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.StringBuffer;
        i0 := @parameter1: int;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        $z1 = staticinvoke <sun.text.normalizer.Utility: boolean isUnprintable(int)>(i0);
        if $z1 == 0 goto label0;

        $z2 = staticinvoke <sun.text.normalizer.Utility: boolean escapeUnprintable(java.lang.StringBuffer,int)>(r0, i0);
        if $z2 == 0 goto label0;

        return;

     label0:
        lookupswitch(i0)
        {
            case 36: goto label1;
            case 38: goto label1;
            case 45: goto label1;
            case 58: goto label1;
            case 91: goto label1;
            case 92: goto label1;
            case 93: goto label1;
            case 94: goto label1;
            case 123: goto label1;
            case 125: goto label1;
            default: goto label2;
        };

     label1:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);
        goto label3;

     label2:
        $z3 = staticinvoke <sun.text.normalizer.UCharacterProperty: boolean isRuleWhiteSpace(int)>(i0);
        if $z3 == 0 goto label3;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

     label3:
        staticinvoke <sun.text.normalizer.UTF16: java.lang.StringBuffer append(java.lang.StringBuffer,int)>(r0, i0);
        return;
    }

    private java.lang.StringBuffer _toPattern(java.lang.StringBuffer, boolean)
    {
        sun.text.normalizer.UnicodeSet r0;
        java.lang.StringBuffer r1, $r6;
        boolean z0, $z1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r2, $r3, $r4;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        r1 := @parameter0: java.lang.StringBuffer;
        z0 := @parameter1: boolean;
        $r2 = r0.<sun.text.normalizer.UnicodeSet: java.lang.String pat>;
        if $r2 == null goto label6;

        i0 = 0;
        i1 = 0;

     label0:
        $r3 = r0.<sun.text.normalizer.UnicodeSet: java.lang.String pat>;
        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();
        if i1 >= $i3 goto label5;

        $r4 = r0.<sun.text.normalizer.UnicodeSet: java.lang.String pat>;
        i2 = staticinvoke <sun.text.normalizer.UTF16: int charAt(java.lang.String,int)>($r4, i1);
        $i4 = staticinvoke <sun.text.normalizer.UTF16: int getCharCount(int)>(i2);
        i1 = i1 + $i4;
        if z0 == 0 goto label2;

        $z1 = staticinvoke <sun.text.normalizer.Utility: boolean isUnprintable(int)>(i2);
        if $z1 == 0 goto label2;

        $i5 = i0 % 2;
        if $i5 != 1 goto label1;

        $i6 = virtualinvoke r1.<java.lang.StringBuffer: int length()>();
        $i7 = $i6 - 1;
        virtualinvoke r1.<java.lang.StringBuffer: void setLength(int)>($i7);

     label1:
        staticinvoke <sun.text.normalizer.Utility: boolean escapeUnprintable(java.lang.StringBuffer,int)>(r1, i2);
        i0 = 0;
        goto label4;

     label2:
        staticinvoke <sun.text.normalizer.UTF16: java.lang.StringBuffer append(java.lang.StringBuffer,int)>(r1, i2);
        if i2 != 92 goto label3;

        i0 = i0 + 1;
        goto label4;

     label3:
        i0 = 0;

     label4:
        goto label0;

     label5:
        return r1;

     label6:
        $r6 = virtualinvoke r0.<sun.text.normalizer.UnicodeSet: java.lang.StringBuffer _generatePattern(java.lang.StringBuffer,boolean,boolean)>(r1, z0, 1);
        return $r6;
    }

    public java.lang.StringBuffer _generatePattern(java.lang.StringBuffer, boolean, boolean)
    {
        sun.text.normalizer.UnicodeSet r0;
        java.lang.StringBuffer r1, $r13;
        boolean z0, z1, $z2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, $i14, $i15;
        java.util.TreeSet $r6, $r7;
        java.util.Iterator r8;
        java.lang.Object $r10;
        java.lang.String $r11;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        r1 := @parameter0: java.lang.StringBuffer;
        z0 := @parameter1: boolean;
        z1 := @parameter2: boolean;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);
        i0 = virtualinvoke r0.<sun.text.normalizer.UnicodeSet: int getRangeCount()>();
        if i0 <= 1 goto label4;

        $i4 = virtualinvoke r0.<sun.text.normalizer.UnicodeSet: int getRangeStart(int)>(0);
        if $i4 != 0 goto label4;

        $i5 = i0 - 1;
        $i6 = virtualinvoke r0.<sun.text.normalizer.UnicodeSet: int getRangeEnd(int)>($i5);
        if $i6 != 1114111 goto label4;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(94);
        i1 = 1;

     label0:
        if i1 >= i0 goto label3;

        $i7 = i1 - 1;
        $i8 = virtualinvoke r0.<sun.text.normalizer.UnicodeSet: int getRangeEnd(int)>($i7);
        i2 = $i8 + 1;
        $i9 = virtualinvoke r0.<sun.text.normalizer.UnicodeSet: int getRangeStart(int)>(i1);
        i3 = $i9 - 1;
        staticinvoke <sun.text.normalizer.UnicodeSet: void _appendToPat(java.lang.StringBuffer,int,boolean)>(r1, i2, z0);
        if i2 == i3 goto label2;

        $i10 = i2 + 1;
        if $i10 == i3 goto label1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

     label1:
        staticinvoke <sun.text.normalizer.UnicodeSet: void _appendToPat(java.lang.StringBuffer,int,boolean)>(r1, i3, z0);

     label2:
        i1 = i1 + 1;
        goto label0;

     label3:
        goto label8;

     label4:
        i11 = 0;

     label5:
        if i11 >= i0 goto label8;

        i12 = virtualinvoke r0.<sun.text.normalizer.UnicodeSet: int getRangeStart(int)>(i11);
        i13 = virtualinvoke r0.<sun.text.normalizer.UnicodeSet: int getRangeEnd(int)>(i11);
        staticinvoke <sun.text.normalizer.UnicodeSet: void _appendToPat(java.lang.StringBuffer,int,boolean)>(r1, i12, z0);
        if i12 == i13 goto label7;

        $i14 = i12 + 1;
        if $i14 == i13 goto label6;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

     label6:
        staticinvoke <sun.text.normalizer.UnicodeSet: void _appendToPat(java.lang.StringBuffer,int,boolean)>(r1, i13, z0);

     label7:
        i11 = i11 + 1;
        goto label5;

     label8:
        if z1 == 0 goto label10;

        $r6 = r0.<sun.text.normalizer.UnicodeSet: java.util.TreeSet strings>;
        $i15 = virtualinvoke $r6.<java.util.TreeSet: int size()>();
        if $i15 <= 0 goto label10;

        $r7 = r0.<sun.text.normalizer.UnicodeSet: java.util.TreeSet strings>;
        r8 = virtualinvoke $r7.<java.util.TreeSet: java.util.Iterator iterator()>();

     label9:
        $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label10;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(123);
        $r10 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();
        $r11 = (java.lang.String) $r10;
        staticinvoke <sun.text.normalizer.UnicodeSet: void _appendToPat(java.lang.StringBuffer,java.lang.String,boolean)>(r1, $r11, z0);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);
        goto label9;

     label10:
        $r13 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);
        return $r13;
    }

    private sun.text.normalizer.UnicodeSet add_unchecked(int, int)
    {
        sun.text.normalizer.UnicodeSet r0;
        int i0, i1;
        java.lang.StringBuilder $r1, $r3, $r5, $r8, $r9, $r11;
        java.lang.IllegalArgumentException $r2, $r7;
        java.lang.String $r4, $r6, $r10, $r12;
        int[] $r13;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i0 < 0 goto label0;

        if i0 <= 1114111 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid code point U+");
        $r4 = staticinvoke <sun.text.normalizer.Utility: java.lang.String hex(int,int)>(i0, 6);
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);
        throw $r2;

     label1:
        if i1 < 0 goto label2;

        if i1 <= 1114111 goto label3;

     label2:
        $r7 = new java.lang.IllegalArgumentException;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid code point U+");
        $r10 = staticinvoke <sun.text.normalizer.Utility: java.lang.String hex(int,int)>(i1, 6);
        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);
        throw $r7;

     label3:
        if i0 >= i1 goto label4;

        $r13 = specialinvoke r0.<sun.text.normalizer.UnicodeSet: int[] range(int,int)>(i0, i1);
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add(int[],int,int)>($r13, 2, 0);
        goto label5;

     label4:
        if i0 != i1 goto label5;

        virtualinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add(int)>(i0);

     label5:
        return r0;
    }

    public final sun.text.normalizer.UnicodeSet add(int)
    {
        sun.text.normalizer.UnicodeSet r0, $r1;
        int i0;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        i0 := @parameter0: int;
        $r1 = specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int)>(i0);
        return $r1;
    }

    private final sun.text.normalizer.UnicodeSet add_unchecked(int)
    {
        sun.text.normalizer.UnicodeSet r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38;
        java.lang.StringBuilder $r1, $r4, $r6;
        int[] r2, $r8, $r9, $r10, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r5, $r7;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        if i0 <= 1114111 goto label1;

     label0:
        $r3 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid code point U+");
        $r5 = staticinvoke <sun.text.normalizer.Utility: java.lang.String hex(int,int)>(i0, 6);
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r3;

     label1:
        i1 = specialinvoke r0.<sun.text.normalizer.UnicodeSet: int findCodePoint(int)>(i0);
        $i2 = i1 & 1;
        if $i2 == 0 goto label2;

        return r0;

     label2:
        $r8 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i3 = $r8[i1];
        $i4 = $i3 - 1;
        if i0 != $i4 goto label4;

        $r9 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $r9[i1] = i0;
        if i0 != 1114111 goto label3;

        $i5 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i6 = $i5 + 1;
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: void ensureCapacity(int)>($i6);
        $r10 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i7 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i8 = $i7 + 1;
        r0.<sun.text.normalizer.UnicodeSet: int len> = $i8;
        $r10[$i7] = 1114112;

     label3:
        if i1 <= 0 goto label9;

        $r12 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i9 = i1 - 1;
        $i10 = $r12[$i9];
        if i0 != $i10 goto label9;

        $r13 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i11 = i1 + 1;
        $r14 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i12 = i1 - 1;
        $i13 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i14 = $i13 - i1;
        $i15 = $i14 - 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, $i11, $r14, $i12, $i15);
        $i16 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i17 = $i16 - 2;
        r0.<sun.text.normalizer.UnicodeSet: int len> = $i17;
        goto label9;

     label4:
        if i1 <= 0 goto label5;

        $r16 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i18 = i1 - 1;
        $i19 = $r16[$i18];
        if i0 != $i19 goto label5;

        $r17 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i20 = i1 - 1;
        $i21 = $r17[$i20];
        $i22 = $i21 + 1;
        $r17[$i20] = $i22;
        goto label9;

     label5:
        $i23 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i24 = $i23 + 2;
        $r18 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i25 = lengthof $r18;
        if $i24 <= $i25 goto label7;

        $i26 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i27 = $i26 + 2;
        $i28 = $i27 + 16;
        r2 = newarray (int)[$i28];
        if i1 == 0 goto label6;

        $r19 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r19, 0, r2, 0, i1);

     label6:
        $r20 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i29 = i1 + 2;
        $i30 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i31 = $i30 - i1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r20, i1, r2, $i29, $i31);
        r0.<sun.text.normalizer.UnicodeSet: int[] list> = r2;
        goto label8;

     label7:
        $r21 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $r22 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i32 = i1 + 2;
        $i33 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i34 = $i33 - i1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r21, i1, $r22, $i32, $i34);

     label8:
        $r23 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $r23[i1] = i0;
        $r24 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i35 = i1 + 1;
        $i36 = i0 + 1;
        $r24[$i35] = $i36;
        $i37 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i38 = $i37 + 2;
        r0.<sun.text.normalizer.UnicodeSet: int len> = $i38;

     label9:
        r0.<sun.text.normalizer.UnicodeSet: java.lang.String pat> = null;
        return r0;
    }

    public final sun.text.normalizer.UnicodeSet add(java.lang.String)
    {
        sun.text.normalizer.UnicodeSet r0;
        java.lang.String r1;
        int i0;
        java.util.TreeSet $r2;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        r1 := @parameter0: java.lang.String;
        i0 = staticinvoke <sun.text.normalizer.UnicodeSet: int getSingleCP(java.lang.String)>(r1);
        if i0 >= 0 goto label0;

        $r2 = r0.<sun.text.normalizer.UnicodeSet: java.util.TreeSet strings>;
        virtualinvoke $r2.<java.util.TreeSet: boolean add(java.lang.Object)>(r1);
        r0.<sun.text.normalizer.UnicodeSet: java.lang.String pat> = null;
        goto label1;

     label0:
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int,int)>(i0, i0);

     label1:
        return r0;
    }

    private static int getSingleCP(java.lang.String)
    {
        java.lang.String r0;
        int i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r1;
        char $c4;

        r0 := @parameter0: java.lang.String;
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i1 >= 1 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t use zero-length strings in UnicodeSet");
        throw $r1;

     label0:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i2 <= 2 goto label1;

        return -1;

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i3 != 1 goto label2;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);
        return $c4;

     label2:
        i0 = staticinvoke <sun.text.normalizer.UTF16: int charAt(java.lang.String,int)>(r0, 0);
        if i0 <= 65535 goto label3;

        return i0;

     label3:
        return -1;
    }

    public sun.text.normalizer.UnicodeSet complement(int, int)
    {
        sun.text.normalizer.UnicodeSet r0;
        int i0, i1;
        java.lang.StringBuilder $r1, $r3, $r5, $r8, $r9, $r11;
        java.lang.IllegalArgumentException $r2, $r7;
        java.lang.String $r4, $r6, $r10, $r12;
        int[] $r13;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i0 < 0 goto label0;

        if i0 <= 1114111 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid code point U+");
        $r4 = staticinvoke <sun.text.normalizer.Utility: java.lang.String hex(int,int)>(i0, 6);
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);
        throw $r2;

     label1:
        if i1 < 0 goto label2;

        if i1 <= 1114111 goto label3;

     label2:
        $r7 = new java.lang.IllegalArgumentException;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid code point U+");
        $r10 = staticinvoke <sun.text.normalizer.Utility: java.lang.String hex(int,int)>(i1, 6);
        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);
        throw $r7;

     label3:
        if i0 > i1 goto label4;

        $r13 = specialinvoke r0.<sun.text.normalizer.UnicodeSet: int[] range(int,int)>(i0, i1);
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet xor(int[],int,int)>($r13, 2, 0);

     label4:
        r0.<sun.text.normalizer.UnicodeSet: java.lang.String pat> = null;
        return r0;
    }

    public sun.text.normalizer.UnicodeSet complement()
    {
        sun.text.normalizer.UnicodeSet r0;
        int[] $r1, $r2, $r3, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        $r1 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i0 = $r1[0];
        if $i0 != 0 goto label0;

        $r2 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $r3 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i1 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i2 = $i1 - 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 1, $r3, 0, $i2);
        $i3 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i4 = $i3 - 1;
        r0.<sun.text.normalizer.UnicodeSet: int len> = $i4;
        goto label1;

     label0:
        $i5 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i6 = $i5 + 1;
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: void ensureCapacity(int)>($i6);
        $r5 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $r6 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i7 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r6, 1, $i7);
        $r7 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $r7[0] = 0;
        $i8 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i9 = $i8 + 1;
        r0.<sun.text.normalizer.UnicodeSet: int len> = $i9;

     label1:
        r0.<sun.text.normalizer.UnicodeSet: java.lang.String pat> = null;
        return r0;
    }

    public boolean contains(int)
    {
        sun.text.normalizer.UnicodeSet r0;
        int i0, i1, $i2;
        java.lang.StringBuilder $r1, $r3, $r5;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r4, $r6;
        boolean $z0;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        if i0 <= 1114111 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid code point U+");
        $r4 = staticinvoke <sun.text.normalizer.Utility: java.lang.String hex(int,int)>(i0, 6);
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);
        throw $r2;

     label1:
        i1 = specialinvoke r0.<sun.text.normalizer.UnicodeSet: int findCodePoint(int)>(i0);
        $i2 = i1 & 1;
        if $i2 == 0 goto label2;

        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private final int findCodePoint(int)
    {
        sun.text.normalizer.UnicodeSet r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        int[] $r1, $r2, $r3;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        i0 := @parameter0: int;
        $r1 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i4 = $r1[0];
        if i0 >= $i4 goto label0;

        return 0;

     label0:
        $i5 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        if $i5 < 2 goto label1;

        $r2 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i6 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i7 = $i6 - 2;
        $i8 = $r2[$i7];
        if i0 < $i8 goto label1;

        $i9 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i10 = $i9 - 1;
        return $i10;

     label1:
        i1 = 0;
        $i11 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        i2 = $i11 - 1;

     label2:
        $i12 = i1 + i2;
        i3 = $i12 >>> 1;
        if i3 != i1 goto label3;

        return i2;

     label3:
        $r3 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i13 = $r3[i3];
        if i0 >= $i13 goto label4;

        i2 = i3;
        goto label5;

     label4:
        i1 = i3;

     label5:
        goto label2;
    }

    public sun.text.normalizer.UnicodeSet addAll(sun.text.normalizer.UnicodeSet)
    {
        sun.text.normalizer.UnicodeSet r0, r1;
        int[] $r2;
        int $i0;
        java.util.TreeSet $r4, $r5;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        r1 := @parameter0: sun.text.normalizer.UnicodeSet;
        $r2 = r1.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i0 = r1.<sun.text.normalizer.UnicodeSet: int len>;
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add(int[],int,int)>($r2, $i0, 0);
        $r4 = r0.<sun.text.normalizer.UnicodeSet: java.util.TreeSet strings>;
        $r5 = r1.<sun.text.normalizer.UnicodeSet: java.util.TreeSet strings>;
        virtualinvoke $r4.<java.util.TreeSet: boolean addAll(java.util.Collection)>($r5);
        return r0;
    }

    public sun.text.normalizer.UnicodeSet retainAll(sun.text.normalizer.UnicodeSet)
    {
        sun.text.normalizer.UnicodeSet r0, r1;
        int[] $r2;
        int $i0;
        java.util.TreeSet $r4, $r5;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        r1 := @parameter0: sun.text.normalizer.UnicodeSet;
        $r2 = r1.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i0 = r1.<sun.text.normalizer.UnicodeSet: int len>;
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet retain(int[],int,int)>($r2, $i0, 0);
        $r4 = r0.<sun.text.normalizer.UnicodeSet: java.util.TreeSet strings>;
        $r5 = r1.<sun.text.normalizer.UnicodeSet: java.util.TreeSet strings>;
        virtualinvoke $r4.<java.util.TreeSet: boolean retainAll(java.util.Collection)>($r5);
        return r0;
    }

    public sun.text.normalizer.UnicodeSet removeAll(sun.text.normalizer.UnicodeSet)
    {
        sun.text.normalizer.UnicodeSet r0, r1;
        int[] $r2;
        int $i0;
        java.util.TreeSet $r4, $r5;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        r1 := @parameter0: sun.text.normalizer.UnicodeSet;
        $r2 = r1.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i0 = r1.<sun.text.normalizer.UnicodeSet: int len>;
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet retain(int[],int,int)>($r2, $i0, 2);
        $r4 = r0.<sun.text.normalizer.UnicodeSet: java.util.TreeSet strings>;
        $r5 = r1.<sun.text.normalizer.UnicodeSet: java.util.TreeSet strings>;
        virtualinvoke $r4.<java.util.TreeSet: boolean removeAll(java.util.Collection)>($r5);
        return r0;
    }

    public sun.text.normalizer.UnicodeSet clear()
    {
        sun.text.normalizer.UnicodeSet r0;
        int[] $r1;
        java.util.TreeSet $r2;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        $r1 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $r1[0] = 1114112;
        r0.<sun.text.normalizer.UnicodeSet: int len> = 1;
        r0.<sun.text.normalizer.UnicodeSet: java.lang.String pat> = null;
        $r2 = r0.<sun.text.normalizer.UnicodeSet: java.util.TreeSet strings>;
        virtualinvoke $r2.<java.util.TreeSet: void clear()>();
        return r0;
    }

    public int getRangeCount()
    {
        sun.text.normalizer.UnicodeSet r0;
        int $i0, $i1;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        $i0 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i1 = $i0 / 2;
        return $i1;
    }

    public int getRangeStart(int)
    {
        sun.text.normalizer.UnicodeSet r0;
        int i0, $i1, $i2;
        int[] $r1;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        i0 := @parameter0: int;
        $r1 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i1 = i0 * 2;
        $i2 = $r1[$i1];
        return $i2;
    }

    public int getRangeEnd(int)
    {
        sun.text.normalizer.UnicodeSet r0;
        int i0, $i1, $i2, $i3, $i4;
        int[] $r1;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        i0 := @parameter0: int;
        $r1 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i1 = i0 * 2;
        $i2 = $i1 + 1;
        $i3 = $r1[$i2];
        $i4 = $i3 - 1;
        return $i4;
    }

    sun.text.normalizer.UnicodeSet applyPattern(java.lang.String, java.text.ParsePosition, sun.text.normalizer.SymbolTable, int)
    {
        sun.text.normalizer.UnicodeSet r0;
        java.lang.String r1, $r9, $r16;
        java.text.ParsePosition r2, $r6;
        sun.text.normalizer.SymbolTable r3;
        int i0, i1, $i2, $i3;
        boolean z0, $z1, $z2;
        java.lang.StringBuffer r4, $r7;
        sun.text.normalizer.RuleCharacterIterator r5, $r8;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.text.ParsePosition;
        r3 := @parameter2: sun.text.normalizer.SymbolTable;
        i0 := @parameter3: int;
        if r2 != null goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        z0 = $z1;
        if z0 == 0 goto label2;

        $r6 = new java.text.ParsePosition;
        specialinvoke $r6.<java.text.ParsePosition: void <init>(int)>(0);
        r2 = $r6;

     label2:
        $r7 = new java.lang.StringBuffer;
        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();
        r4 = $r7;
        $r8 = new sun.text.normalizer.RuleCharacterIterator;
        specialinvoke $r8.<sun.text.normalizer.RuleCharacterIterator: void <init>(java.lang.String,sun.text.normalizer.SymbolTable,java.text.ParsePosition)>(r1, r3, r2);
        r5 = $r8;
        virtualinvoke r0.<sun.text.normalizer.UnicodeSet: void applyPattern(sun.text.normalizer.RuleCharacterIterator,sun.text.normalizer.SymbolTable,java.lang.StringBuffer,int)>(r5, r3, r4, i0);
        $z2 = virtualinvoke r5.<sun.text.normalizer.RuleCharacterIterator: boolean inVariable()>();
        if $z2 == 0 goto label3;

        staticinvoke <sun.text.normalizer.UnicodeSet: void syntaxError(sun.text.normalizer.RuleCharacterIterator,java.lang.String)>(r5, "Extra chars in variable value");

     label3:
        $r9 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();
        r0.<sun.text.normalizer.UnicodeSet: java.lang.String pat> = $r9;
        if z0 == 0 goto label5;

        i1 = virtualinvoke r2.<java.text.ParsePosition: int getIndex()>();
        $i2 = i0 & 1;
        if $i2 == 0 goto label4;

        i1 = staticinvoke <sun.text.normalizer.Utility: int skipWhitespace(java.lang.String,int)>(r1, i1);

     label4:
        $i3 = virtualinvoke r1.<java.lang.String: int length()>();
        if i1 == $i3 goto label5;

        $r10 = new java.lang.IllegalArgumentException;
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parse of \"");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" failed at ");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);
        throw $r10;

     label5:
        return r0;
    }

    void applyPattern(sun.text.normalizer.RuleCharacterIterator, sun.text.normalizer.SymbolTable, java.lang.StringBuffer, int)
    {
        sun.text.normalizer.UnicodeSet r0, r6, r8, $r18;
        sun.text.normalizer.RuleCharacterIterator r1;
        sun.text.normalizer.SymbolTable r2;
        java.lang.StringBuffer r3, r4, r5, $r11, $r31, $r40;
        int i0, i3, i6, $i8, i11, $i12;
        byte b1, b4, b7;
        boolean z0, z1, z2, $z3, $z4, z5, z7, z8, $z9, z10, z11, $z12, z13;
        java.lang.Object r7;
        char c2, c5, $c9, c10, $c13;
        sun.text.normalizer.UnicodeMatcher r9;
        java.lang.ClassCastException r10, $r15;
        java.lang.String $r33, $r36, $r46;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        r1 := @parameter0: sun.text.normalizer.RuleCharacterIterator;
        r2 := @parameter1: sun.text.normalizer.SymbolTable;
        r3 := @parameter2: java.lang.StringBuffer;
        i0 := @parameter3: int;
        b1 = 3;
        $i8 = i0 & 1;
        if $i8 == 0 goto label0;

        b1 = b1 | 4;

     label0:
        $r11 = new java.lang.StringBuffer;
        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();
        r4 = $r11;
        r5 = null;
        z0 = 0;
        r6 = null;
        r7 = null;
        c2 = 0;
        i3 = 0;
        b4 = 0;
        c5 = 0;
        z1 = 0;
        virtualinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet clear()>();

     label1:
        if b4 == 2 goto label62;

        $z3 = virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: boolean atEnd()>();
        if $z3 != 0 goto label62;

        i6 = 0;
        z2 = 0;
        r8 = null;
        b7 = 0;
        $z4 = staticinvoke <sun.text.normalizer.UnicodeSet: boolean resemblesPropertyPattern(sun.text.normalizer.RuleCharacterIterator,int)>(r1, b1);
        if $z4 == 0 goto label2;

        b7 = 2;
        goto label10;

     label2:
        r7 = virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: java.lang.Object getPos(java.lang.Object)>(r7);
        i6 = virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: int next(int)>(b1);
        z2 = virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: boolean isEscaped()>();
        if i6 != 91 goto label6;

        if z2 != 0 goto label6;

        if b4 != 1 goto label3;

        virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: void setPos(java.lang.Object)>(r7);
        b7 = 1;
        goto label10;

     label3:
        b4 = 1;
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);
        r7 = virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: java.lang.Object getPos(java.lang.Object)>(r7);
        i6 = virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: int next(int)>(b1);
        z5 = virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: boolean isEscaped()>();
        if i6 != 94 goto label4;

        if z5 != 0 goto label4;

        z1 = 1;
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(94);
        r7 = virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: java.lang.Object getPos(java.lang.Object)>(r7);
        i6 = virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: int next(int)>(b1);
        virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: boolean isEscaped()>();

     label4:
        if i6 != 45 goto label5;

        z2 = 1;
        goto label10;

     label5:
        virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: void setPos(java.lang.Object)>(r7);
        goto label1;

     label6:
        if r2 == null goto label10;

        r9 = interfaceinvoke r2.<sun.text.normalizer.SymbolTable: sun.text.normalizer.UnicodeMatcher lookupMatcher(int)>(i6);
        if r9 == null goto label10;

     label7:
        r8 = (sun.text.normalizer.UnicodeSet) r9;
        b7 = 3;

     label8:
        goto label10;

     label9:
        $r15 := @caughtexception;
        r10 = $r15;
        staticinvoke <sun.text.normalizer.UnicodeSet: void syntaxError(sun.text.normalizer.RuleCharacterIterator,java.lang.String)>(r1, "Syntax error");

     label10:
        if b7 == 0 goto label26;

        if c2 != 1 goto label12;

        if c5 == 0 goto label11;

        staticinvoke <sun.text.normalizer.UnicodeSet: void syntaxError(sun.text.normalizer.RuleCharacterIterator,java.lang.String)>(r1, "Char expected after operator");

     label11:
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int,int)>(i3, i3);
        staticinvoke <sun.text.normalizer.UnicodeSet: void _appendToPat(java.lang.StringBuffer,int,boolean)>(r4, i3, 0);
        $c9 = 0;
        c5 = $c9;
        c10 = $c9;

     label12:
        if c5 == 45 goto label13;

        if c5 != 38 goto label14;

     label13:
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c5);

     label14:
        if r8 != null goto label16;

        if r6 != null goto label15;

        $r18 = new sun.text.normalizer.UnicodeSet;
        specialinvoke $r18.<sun.text.normalizer.UnicodeSet: void <init>()>();
        r6 = $r18;

     label15:
        r8 = r6;

     label16:
        tableswitch(b7)
        {
            case 1: goto label17;
            case 2: goto label18;
            case 3: goto label19;
            default: goto label20;
        };

     label17:
        virtualinvoke r8.<sun.text.normalizer.UnicodeSet: void applyPattern(sun.text.normalizer.RuleCharacterIterator,sun.text.normalizer.SymbolTable,java.lang.StringBuffer,int)>(r1, r2, r4, i0);
        goto label20;

     label18:
        virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: void skipIgnored(int)>(b1);
        specialinvoke r8.<sun.text.normalizer.UnicodeSet: void applyPropertyPattern(sun.text.normalizer.RuleCharacterIterator,java.lang.StringBuffer,sun.text.normalizer.SymbolTable)>(r1, r4, r2);
        goto label20;

     label19:
        specialinvoke r8.<sun.text.normalizer.UnicodeSet: java.lang.StringBuffer _toPattern(java.lang.StringBuffer,boolean)>(r4, 0);

     label20:
        z0 = 1;
        if b4 != 0 goto label21;

        virtualinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet set(sun.text.normalizer.UnicodeSet)>(r8);
        b4 = 2;
        goto label62;

     label21:
        lookupswitch(c5)
        {
            case 0: goto label24;
            case 38: goto label23;
            case 45: goto label22;
            default: goto label25;
        };

     label22:
        virtualinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet removeAll(sun.text.normalizer.UnicodeSet)>(r8);
        goto label25;

     label23:
        virtualinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet retainAll(sun.text.normalizer.UnicodeSet)>(r8);
        goto label25;

     label24:
        virtualinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet addAll(sun.text.normalizer.UnicodeSet)>(r8);

     label25:
        c5 = 0;
        c2 = 2;
        goto label1;

     label26:
        if b4 != 0 goto label27;

        staticinvoke <sun.text.normalizer.UnicodeSet: void syntaxError(sun.text.normalizer.RuleCharacterIterator,java.lang.String)>(r1, "Missing \'[\'");

     label27:
        if z2 != 0 goto label54;

        lookupswitch(i6)
        {
            case 36: goto label48;
            case 38: goto label35;
            case 45: goto label32;
            case 93: goto label28;
            case 94: goto label37;
            case 123: goto label38;
            default: goto label54;
        };

     label28:
        if c2 != 1 goto label29;

        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int,int)>(i3, i3);
        staticinvoke <sun.text.normalizer.UnicodeSet: void _appendToPat(java.lang.StringBuffer,int,boolean)>(r4, i3, 0);

     label29:
        if c5 != 45 goto label30;

        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int,int)>(c5, c5);
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c5);
        goto label31;

     label30:
        if c5 != 38 goto label31;

        staticinvoke <sun.text.normalizer.UnicodeSet: void syntaxError(sun.text.normalizer.RuleCharacterIterator,java.lang.String)>(r1, "Trailing \'&\'");

     label31:
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);
        b4 = 2;
        goto label1;

     label32:
        if c5 != 0 goto label34;

        if c2 == 0 goto label33;

        c5 = (char) i6;
        goto label1;

     label33:
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int,int)>(i6, i6);
        i6 = virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: int next(int)>(b1);
        z7 = virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: boolean isEscaped()>();
        if i6 != 93 goto label34;

        if z7 != 0 goto label34;

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-]");
        b4 = 2;
        goto label1;

     label34:
        staticinvoke <sun.text.normalizer.UnicodeSet: void syntaxError(sun.text.normalizer.RuleCharacterIterator,java.lang.String)>(r1, "\'-\' not after char or set");

     label35:
        if c2 != 2 goto label36;

        if c5 != 0 goto label36;

        c5 = (char) i6;
        goto label1;

     label36:
        staticinvoke <sun.text.normalizer.UnicodeSet: void syntaxError(sun.text.normalizer.RuleCharacterIterator,java.lang.String)>(r1, "\'&\' not after set");

     label37:
        staticinvoke <sun.text.normalizer.UnicodeSet: void syntaxError(sun.text.normalizer.RuleCharacterIterator,java.lang.String)>(r1, "\'^\' not after \'[\'");

     label38:
        if c5 == 0 goto label39;

        staticinvoke <sun.text.normalizer.UnicodeSet: void syntaxError(sun.text.normalizer.RuleCharacterIterator,java.lang.String)>(r1, "Missing operand after operator");

     label39:
        if c2 != 1 goto label40;

        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int,int)>(i3, i3);
        staticinvoke <sun.text.normalizer.UnicodeSet: void _appendToPat(java.lang.StringBuffer,int,boolean)>(r4, i3, 0);

     label40:
        c2 = 0;
        if r5 != null goto label41;

        $r31 = new java.lang.StringBuffer;
        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();
        r5 = $r31;
        goto label42;

     label41:
        virtualinvoke r5.<java.lang.StringBuffer: void setLength(int)>(0);

     label42:
        z8 = 0;

     label43:
        $z9 = virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: boolean atEnd()>();
        if $z9 != 0 goto label45;

        i11 = virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: int next(int)>(b1);
        z10 = virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: boolean isEscaped()>();
        if i11 != 125 goto label44;

        if z10 != 0 goto label44;

        z8 = 1;
        goto label45;

     label44:
        staticinvoke <sun.text.normalizer.UTF16: java.lang.StringBuffer append(java.lang.StringBuffer,int)>(r5, i11);
        goto label43;

     label45:
        $i12 = virtualinvoke r5.<java.lang.StringBuffer: int length()>();
        if $i12 < 1 goto label46;

        if z8 != 0 goto label47;

     label46:
        staticinvoke <sun.text.normalizer.UnicodeSet: void syntaxError(sun.text.normalizer.RuleCharacterIterator,java.lang.String)>(r1, "Invalid multicharacter string");

     label47:
        $r33 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add(java.lang.String)>($r33);
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(123);
        $r36 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.String toString()>();
        staticinvoke <sun.text.normalizer.UnicodeSet: void _appendToPat(java.lang.StringBuffer,java.lang.String,boolean)>(r4, $r36, 0);
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);
        goto label1;

     label48:
        r7 = virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: java.lang.Object getPos(java.lang.Object)>(r7);
        i6 = virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: int next(int)>(b1);
        z11 = virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: boolean isEscaped()>();
        if i6 != 93 goto label49;

        if z11 != 0 goto label49;

        $z12 = 1;
        goto label50;

     label49:
        $z12 = 0;

     label50:
        z13 = $z12;
        if r2 != null goto label51;

        if z13 != 0 goto label51;

        i6 = 36;
        virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: void setPos(java.lang.Object)>(r7);
        goto label54;

     label51:
        if z13 == 0 goto label53;

        if c5 != 0 goto label53;

        if c2 != 1 goto label52;

        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int,int)>(i3, i3);
        staticinvoke <sun.text.normalizer.UnicodeSet: void _appendToPat(java.lang.StringBuffer,int,boolean)>(r4, i3, 0);

     label52:
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int)>(65535);
        z0 = 1;
        $r40 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(36);
        virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);
        b4 = 2;
        goto label1;

     label53:
        staticinvoke <sun.text.normalizer.UnicodeSet: void syntaxError(sun.text.normalizer.RuleCharacterIterator,java.lang.String)>(r1, "Unquoted \'$\'");

     label54:
        tableswitch(c2)
        {
            case 0: goto label55;
            case 1: goto label56;
            case 2: goto label59;
            default: goto label61;
        };

     label55:
        c2 = 1;
        i3 = i6;
        goto label61;

     label56:
        if c5 != 45 goto label58;

        if i3 < i6 goto label57;

        staticinvoke <sun.text.normalizer.UnicodeSet: void syntaxError(sun.text.normalizer.RuleCharacterIterator,java.lang.String)>(r1, "Invalid range");

     label57:
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int,int)>(i3, i6);
        staticinvoke <sun.text.normalizer.UnicodeSet: void _appendToPat(java.lang.StringBuffer,int,boolean)>(r4, i3, 0);
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c5);
        staticinvoke <sun.text.normalizer.UnicodeSet: void _appendToPat(java.lang.StringBuffer,int,boolean)>(r4, i6, 0);
        $c13 = 0;
        c5 = $c13;
        c2 = $c13;
        goto label61;

     label58:
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int,int)>(i3, i3);
        staticinvoke <sun.text.normalizer.UnicodeSet: void _appendToPat(java.lang.StringBuffer,int,boolean)>(r4, i3, 0);
        i3 = i6;
        goto label61;

     label59:
        if c5 == 0 goto label60;

        staticinvoke <sun.text.normalizer.UnicodeSet: void syntaxError(sun.text.normalizer.RuleCharacterIterator,java.lang.String)>(r1, "Set expected after operator");

     label60:
        i3 = i6;
        c2 = 1;

     label61:
        goto label1;

     label62:
        if b4 == 2 goto label63;

        staticinvoke <sun.text.normalizer.UnicodeSet: void syntaxError(sun.text.normalizer.RuleCharacterIterator,java.lang.String)>(r1, "Missing \']\'");

     label63:
        virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: void skipIgnored(int)>(b1);
        if z1 == 0 goto label64;

        virtualinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet complement()>();

     label64:
        if z0 == 0 goto label65;

        $r46 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);
        goto label66;

     label65:
        virtualinvoke r0.<sun.text.normalizer.UnicodeSet: java.lang.StringBuffer _generatePattern(java.lang.StringBuffer,boolean,boolean)>(r3, 0, 1);

     label66:
        return;

        catch java.lang.ClassCastException from label7 to label8 with label9;
    }

    private static void syntaxError(sun.text.normalizer.RuleCharacterIterator, java.lang.String)
    {
        sun.text.normalizer.RuleCharacterIterator r0;
        java.lang.String r1, $r7, $r8, $r11;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r9, $r10;

        r0 := @parameter0: sun.text.normalizer.RuleCharacterIterator;
        r1 := @parameter1: java.lang.String;
        $r2 = new java.lang.IllegalArgumentException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at \"");
        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();
        $r8 = staticinvoke <sun.text.normalizer.Utility: java.lang.String escape(java.lang.String)>($r7);
        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);
        throw $r2;
    }

    private void ensureCapacity(int)
    {
        sun.text.normalizer.UnicodeSet r0;
        int i0, $i1, $i2, $i3;
        int[] r1, $r2, $r3;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        i0 := @parameter0: int;
        $r2 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i1 = lengthof $r2;
        if i0 > $i1 goto label0;

        return;

     label0:
        $i2 = i0 + 16;
        r1 = newarray (int)[$i2];
        $r3 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i3 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i3);
        r0.<sun.text.normalizer.UnicodeSet: int[] list> = r1;
        return;
    }

    private void ensureBufferCapacity(int)
    {
        sun.text.normalizer.UnicodeSet r0;
        int i0, $i1, $i2;
        int[] $r1, $r2, $r3;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        i0 := @parameter0: int;
        $r1 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        if $r1 == null goto label0;

        $r2 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i1 = lengthof $r2;
        if i0 > $i1 goto label0;

        return;

     label0:
        $i2 = i0 + 16;
        $r3 = newarray (int)[$i2];
        r0.<sun.text.normalizer.UnicodeSet: int[] buffer> = $r3;
        return;
    }

    private int[] range(int, int)
    {
        sun.text.normalizer.UnicodeSet r0;
        int i0, i1, $i2, $i3;
        int[] $r1, $r2, $r3, $r4, $r5;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = r0.<sun.text.normalizer.UnicodeSet: int[] rangeList>;
        if $r1 != null goto label0;

        $r2 = newarray (int)[3];
        $r2[0] = i0;
        $i2 = i1 + 1;
        $r2[1] = $i2;
        $r2[2] = 1114112;
        r0.<sun.text.normalizer.UnicodeSet: int[] rangeList> = $r2;
        goto label1;

     label0:
        $r3 = r0.<sun.text.normalizer.UnicodeSet: int[] rangeList>;
        $r3[0] = i0;
        $r4 = r0.<sun.text.normalizer.UnicodeSet: int[] rangeList>;
        $i3 = i1 + 1;
        $r4[1] = $i3;

     label1:
        $r5 = r0.<sun.text.normalizer.UnicodeSet: int[] rangeList>;
        return $r5;
    }

    private sun.text.normalizer.UnicodeSet xor(int[], int, int)
    {
        sun.text.normalizer.UnicodeSet r0;
        int[] r1, r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int i0, i1, i3, i4, i5, i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18;
        byte b2;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        r1 := @parameter0: int[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i7 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i8 = $i7 + i0;
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: void ensureBufferCapacity(int)>($i8);
        b2 = 0;
        i3 = 0;
        i4 = 0;
        $r3 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        i9 = b2 + 1;
        i5 = $r3[b2];
        if i1 == 1 goto label0;

        if i1 != 2 goto label1;

     label0:
        i6 = 0;
        $i10 = r1[i3];
        if $i10 != 0 goto label2;

        i3 = i3 + 1;
        i6 = r1[i3];
        goto label2;

     label1:
        $i11 = i3;
        i3 = i3 + 1;
        i6 = r1[$i11];

     label2:
        if i5 >= i6 goto label3;

        $r4 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i12 = i4;
        i4 = i4 + 1;
        $r4[$i12] = i5;
        $r5 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i13 = i9;
        i9 = i9 + 1;
        i5 = $r5[$i13];
        goto label2;

     label3:
        if i6 >= i5 goto label4;

        $r6 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i14 = i4;
        i4 = i4 + 1;
        $r6[$i14] = i6;
        $i15 = i3;
        i3 = i3 + 1;
        i6 = r1[$i15];
        goto label2;

     label4:
        if i5 == 1114112 goto label5;

        $r7 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i16 = i9;
        i9 = i9 + 1;
        i5 = $r7[$i16];
        $i17 = i3;
        i3 = i3 + 1;
        i6 = r1[$i17];
        goto label2;

     label5:
        $r8 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        i18 = i4 + 1;
        $r8[i4] = 1114112;
        r0.<sun.text.normalizer.UnicodeSet: int len> = i18;
        goto label6;

     label6:
        r2 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $r9 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        r0.<sun.text.normalizer.UnicodeSet: int[] list> = $r9;
        r0.<sun.text.normalizer.UnicodeSet: int[] buffer> = r2;
        r0.<sun.text.normalizer.UnicodeSet: java.lang.String pat> = null;
        return r0;
    }

    private sun.text.normalizer.UnicodeSet add(int[], int, int)
    {
        sun.text.normalizer.UnicodeSet r0;
        int[] r1, r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;
        int i0, i1, i4, i5, i6, $i7, $i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, $i27, $i28, $i29, $i30, i31, $i32, $i33, $i34, $i35, $i36, i37, $i38, $i39, $i40, $i41, $i42, i43, $i44, i45;
        byte b2, b3;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        r1 := @parameter0: int[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i7 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i8 = $i7 + i0;
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: void ensureBufferCapacity(int)>($i8);
        b2 = 0;
        b3 = 0;
        i4 = 0;
        $r3 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        i9 = b2 + 1;
        i5 = $r3[b2];
        i10 = b3 + 1;
        i6 = r1[b3];

     label0:
        tableswitch(i1)
        {
            case 0: goto label1;
            case 1: goto label16;
            case 2: goto label20;
            case 3: goto label11;
            default: goto label24;
        };

     label1:
        if i5 >= i6 goto label4;

        if i4 <= 0 goto label2;

        $r4 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i11 = i4 - 1;
        $i12 = $r4[$i11];
        if i5 > $i12 goto label2;

        $r5 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i13 = $r5[i9];
        $r6 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        i4 = i4 + -1;
        $i14 = $r6[i4];
        i5 = staticinvoke <sun.text.normalizer.UnicodeSet: int max(int,int)>($i13, $i14);
        goto label3;

     label2:
        $r7 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i15 = i4;
        i4 = i4 + 1;
        $r7[$i15] = i5;
        $r8 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        i5 = $r8[i9];

     label3:
        i9 = i9 + 1;
        i1 = i1 ^ 1;
        goto label24;

     label4:
        if i6 >= i5 goto label7;

        if i4 <= 0 goto label5;

        $r9 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i16 = i4 - 1;
        $i17 = $r9[$i16];
        if i6 > $i17 goto label5;

        $i18 = r1[i10];
        $r10 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        i4 = i4 + -1;
        $i19 = $r10[i4];
        i6 = staticinvoke <sun.text.normalizer.UnicodeSet: int max(int,int)>($i18, $i19);
        goto label6;

     label5:
        $r11 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i20 = i4;
        i4 = i4 + 1;
        $r11[$i20] = i6;
        i6 = r1[i10];

     label6:
        i10 = i10 + 1;
        i1 = i1 ^ 2;
        goto label24;

     label7:
        if i5 != 1114112 goto label8;

        goto label25;

     label8:
        if i4 <= 0 goto label9;

        $r12 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i21 = i4 - 1;
        $i22 = $r12[$i21];
        if i5 > $i22 goto label9;

        $r13 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i23 = $r13[i9];
        $r14 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        i4 = i4 + -1;
        $i24 = $r14[i4];
        i5 = staticinvoke <sun.text.normalizer.UnicodeSet: int max(int,int)>($i23, $i24);
        goto label10;

     label9:
        $r15 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i25 = i4;
        i4 = i4 + 1;
        $r15[$i25] = i5;
        $r16 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        i5 = $r16[i9];

     label10:
        i9 = i9 + 1;
        i26 = i1 ^ 1;
        $i27 = i10;
        i10 = i10 + 1;
        i6 = r1[$i27];
        i1 = i26 ^ 2;
        goto label24;

     label11:
        if i6 > i5 goto label13;

        if i5 != 1114112 goto label12;

        goto label25;

     label12:
        $r17 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i28 = i4;
        i4 = i4 + 1;
        $r17[$i28] = i5;
        goto label15;

     label13:
        if i6 != 1114112 goto label14;

        goto label25;

     label14:
        $r18 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i29 = i4;
        i4 = i4 + 1;
        $r18[$i29] = i6;

     label15:
        $r19 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i30 = i9;
        i9 = i9 + 1;
        i5 = $r19[$i30];
        i31 = i1 ^ 1;
        $i32 = i10;
        i10 = i10 + 1;
        i6 = r1[$i32];
        i1 = i31 ^ 2;
        goto label24;

     label16:
        if i5 >= i6 goto label17;

        $r20 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i33 = i4;
        i4 = i4 + 1;
        $r20[$i33] = i5;
        $r21 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i34 = i9;
        i9 = i9 + 1;
        i5 = $r21[$i34];
        i1 = i1 ^ 1;
        goto label24;

     label17:
        if i6 >= i5 goto label18;

        $i35 = i10;
        i10 = i10 + 1;
        i6 = r1[$i35];
        i1 = i1 ^ 2;
        goto label24;

     label18:
        if i5 != 1114112 goto label19;

        goto label25;

     label19:
        $r22 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i36 = i9;
        i9 = i9 + 1;
        i5 = $r22[$i36];
        i37 = i1 ^ 1;
        $i38 = i10;
        i10 = i10 + 1;
        i6 = r1[$i38];
        i1 = i37 ^ 2;
        goto label24;

     label20:
        if i6 >= i5 goto label21;

        $r23 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i39 = i4;
        i4 = i4 + 1;
        $r23[$i39] = i6;
        $i40 = i10;
        i10 = i10 + 1;
        i6 = r1[$i40];
        i1 = i1 ^ 2;
        goto label24;

     label21:
        if i5 >= i6 goto label22;

        $r24 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i41 = i9;
        i9 = i9 + 1;
        i5 = $r24[$i41];
        i1 = i1 ^ 1;
        goto label24;

     label22:
        if i5 != 1114112 goto label23;

        goto label25;

     label23:
        $r25 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i42 = i9;
        i9 = i9 + 1;
        i5 = $r25[$i42];
        i43 = i1 ^ 1;
        $i44 = i10;
        i10 = i10 + 1;
        i6 = r1[$i44];
        i1 = i43 ^ 2;

     label24:
        goto label0;

     label25:
        $r26 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        i45 = i4 + 1;
        $r26[i4] = 1114112;
        r0.<sun.text.normalizer.UnicodeSet: int len> = i45;
        r2 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $r27 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        r0.<sun.text.normalizer.UnicodeSet: int[] list> = $r27;
        r0.<sun.text.normalizer.UnicodeSet: int[] buffer> = r2;
        r0.<sun.text.normalizer.UnicodeSet: java.lang.String pat> = null;
        return r0;
    }

    private sun.text.normalizer.UnicodeSet retain(int[], int, int)
    {
        sun.text.normalizer.UnicodeSet r0;
        int[] r1, r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        int i0, i1, i4, i5, i6, $i7, $i8, i9, i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, $i24, $i25, $i26, $i27, $i28, i29, $i30, $i31, $i32, $i33, $i34, i35, $i36, i37;
        byte b2, b3;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        r1 := @parameter0: int[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i7 = r0.<sun.text.normalizer.UnicodeSet: int len>;
        $i8 = $i7 + i0;
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: void ensureBufferCapacity(int)>($i8);
        b2 = 0;
        b3 = 0;
        i4 = 0;
        $r3 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        i9 = b2 + 1;
        i5 = $r3[b2];
        i10 = b3 + 1;
        i6 = r1[b3];

     label0:
        tableswitch(i1)
        {
            case 0: goto label1;
            case 1: goto label9;
            case 2: goto label13;
            case 3: goto label5;
            default: goto label17;
        };

     label1:
        if i5 >= i6 goto label2;

        $r4 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i11 = i9;
        i9 = i9 + 1;
        i5 = $r4[$i11];
        i1 = i1 ^ 1;
        goto label17;

     label2:
        if i6 >= i5 goto label3;

        $i12 = i10;
        i10 = i10 + 1;
        i6 = r1[$i12];
        i1 = i1 ^ 2;
        goto label17;

     label3:
        if i5 != 1114112 goto label4;

        goto label18;

     label4:
        $r5 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i13 = i4;
        i4 = i4 + 1;
        $r5[$i13] = i5;
        $r6 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i14 = i9;
        i9 = i9 + 1;
        i5 = $r6[$i14];
        i15 = i1 ^ 1;
        $i16 = i10;
        i10 = i10 + 1;
        i6 = r1[$i16];
        i1 = i15 ^ 2;
        goto label17;

     label5:
        if i5 >= i6 goto label6;

        $r7 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i17 = i4;
        i4 = i4 + 1;
        $r7[$i17] = i5;
        $r8 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i18 = i9;
        i9 = i9 + 1;
        i5 = $r8[$i18];
        i1 = i1 ^ 1;
        goto label17;

     label6:
        if i6 >= i5 goto label7;

        $r9 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i19 = i4;
        i4 = i4 + 1;
        $r9[$i19] = i6;
        $i20 = i10;
        i10 = i10 + 1;
        i6 = r1[$i20];
        i1 = i1 ^ 2;
        goto label17;

     label7:
        if i5 != 1114112 goto label8;

        goto label18;

     label8:
        $r10 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i21 = i4;
        i4 = i4 + 1;
        $r10[$i21] = i5;
        $r11 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i22 = i9;
        i9 = i9 + 1;
        i5 = $r11[$i22];
        i23 = i1 ^ 1;
        $i24 = i10;
        i10 = i10 + 1;
        i6 = r1[$i24];
        i1 = i23 ^ 2;
        goto label17;

     label9:
        if i5 >= i6 goto label10;

        $r12 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i25 = i9;
        i9 = i9 + 1;
        i5 = $r12[$i25];
        i1 = i1 ^ 1;
        goto label17;

     label10:
        if i6 >= i5 goto label11;

        $r13 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i26 = i4;
        i4 = i4 + 1;
        $r13[$i26] = i6;
        $i27 = i10;
        i10 = i10 + 1;
        i6 = r1[$i27];
        i1 = i1 ^ 2;
        goto label17;

     label11:
        if i5 != 1114112 goto label12;

        goto label18;

     label12:
        $r14 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i28 = i9;
        i9 = i9 + 1;
        i5 = $r14[$i28];
        i29 = i1 ^ 1;
        $i30 = i10;
        i10 = i10 + 1;
        i6 = r1[$i30];
        i1 = i29 ^ 2;
        goto label17;

     label13:
        if i6 >= i5 goto label14;

        $i31 = i10;
        i10 = i10 + 1;
        i6 = r1[$i31];
        i1 = i1 ^ 2;
        goto label17;

     label14:
        if i5 >= i6 goto label15;

        $r15 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        $i32 = i4;
        i4 = i4 + 1;
        $r15[$i32] = i5;
        $r16 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i33 = i9;
        i9 = i9 + 1;
        i5 = $r16[$i33];
        i1 = i1 ^ 1;
        goto label17;

     label15:
        if i5 != 1114112 goto label16;

        goto label18;

     label16:
        $r17 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $i34 = i9;
        i9 = i9 + 1;
        i5 = $r17[$i34];
        i35 = i1 ^ 1;
        $i36 = i10;
        i10 = i10 + 1;
        i6 = r1[$i36];
        i1 = i35 ^ 2;

     label17:
        goto label0;

     label18:
        $r18 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        i37 = i4 + 1;
        $r18[i4] = 1114112;
        r0.<sun.text.normalizer.UnicodeSet: int len> = i37;
        r2 = r0.<sun.text.normalizer.UnicodeSet: int[] list>;
        $r19 = r0.<sun.text.normalizer.UnicodeSet: int[] buffer>;
        r0.<sun.text.normalizer.UnicodeSet: int[] list> = $r19;
        r0.<sun.text.normalizer.UnicodeSet: int[] buffer> = r2;
        r0.<sun.text.normalizer.UnicodeSet: java.lang.String pat> = null;
        return r0;
    }

    private static final int max(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i0 <= i1 goto label0;

        $i2 = i0;
        goto label1;

     label0:
        $i2 = i1;

     label1:
        return $i2;
    }

    private static synchronized sun.text.normalizer.UnicodeSet getInclusions(int)
    {
        int i0;
        sun.text.normalizer.UnicodeSet[] $r0, $r3, $r4, $r13, $r14;
        sun.text.normalizer.UnicodeSet r1, $r5, $r6, $r15;
        java.lang.StringBuilder $r2, $r9, $r10, $r11;
        sun.text.normalizer.UCharacterProperty $r7;
        java.lang.IllegalStateException $r8;
        java.lang.String $r12;

        i0 := @parameter0: int;
        $r0 = <sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet[] INCLUSIONS>;
        if $r0 != null goto label0;

        $r3 = newarray (sun.text.normalizer.UnicodeSet)[9];
        <sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet[] INCLUSIONS> = $r3;

     label0:
        $r4 = <sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet[] INCLUSIONS>;
        $r5 = $r4[i0];
        if $r5 != null goto label4;

        $r6 = new sun.text.normalizer.UnicodeSet;
        specialinvoke $r6.<sun.text.normalizer.UnicodeSet: void <init>()>();
        r1 = $r6;
        lookupswitch(i0)
        {
            case 2: goto label1;
            default: goto label2;
        };

     label1:
        $r7 = staticinvoke <sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty getInstance()>();
        virtualinvoke $r7.<sun.text.normalizer.UCharacterProperty: void upropsvec_addPropertyStarts(sun.text.normalizer.UnicodeSet)>(r1);
        goto label3;

     label2:
        $r8 = new java.lang.IllegalStateException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UnicodeSet.getInclusions(unknown src ");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);
        throw $r8;

     label3:
        $r13 = <sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet[] INCLUSIONS>;
        $r13[i0] = r1;

     label4:
        $r14 = <sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet[] INCLUSIONS>;
        $r15 = $r14[i0];
        return $r15;
    }

    private sun.text.normalizer.UnicodeSet applyFilter(sun.text.normalizer.UnicodeSet$Filter, int)
    {
        sun.text.normalizer.UnicodeSet r0, r2;
        sun.text.normalizer.UnicodeSet$Filter r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7;
        boolean $z0;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        r1 := @parameter0: sun.text.normalizer.UnicodeSet$Filter;
        i0 := @parameter1: int;
        virtualinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet clear()>();
        i1 = -1;
        r2 = staticinvoke <sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet getInclusions(int)>(i0);
        i2 = virtualinvoke r2.<sun.text.normalizer.UnicodeSet: int getRangeCount()>();
        i3 = 0;

     label0:
        if i3 >= i2 goto label5;

        i4 = virtualinvoke r2.<sun.text.normalizer.UnicodeSet: int getRangeStart(int)>(i3);
        i5 = virtualinvoke r2.<sun.text.normalizer.UnicodeSet: int getRangeEnd(int)>(i3);
        i6 = i4;

     label1:
        if i6 > i5 goto label4;

        $z0 = interfaceinvoke r1.<sun.text.normalizer.UnicodeSet$Filter: boolean contains(int)>(i6);
        if $z0 == 0 goto label2;

        if i1 >= 0 goto label3;

        i1 = i6;
        goto label3;

     label2:
        if i1 < 0 goto label3;

        $i7 = i6 - 1;
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int,int)>(i1, $i7);
        i1 = -1;

     label3:
        i6 = i6 + 1;
        goto label1;

     label4:
        i3 = i3 + 1;
        goto label0;

     label5:
        if i1 < 0 goto label6;

        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add_unchecked(int,int)>(i1, 1114111);

     label6:
        return r0;
    }

    private static java.lang.String mungeCharName(java.lang.String)
    {
        java.lang.String r0, $r4;
        java.lang.StringBuffer $r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i12, $i13;
        boolean $z0;
        char $c7, $c11;

        r0 := @parameter0: java.lang.String;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        r2 = $r1;
        i0 = 0;

     label0:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();
        if i0 >= $i2 goto label3;

        i1 = staticinvoke <sun.text.normalizer.UTF16: int charAt(java.lang.String,int)>(r0, i0);
        $i3 = staticinvoke <sun.text.normalizer.UTF16: int getCharCount(int)>(i1);
        i0 = i0 + $i3;
        $z0 = staticinvoke <sun.text.normalizer.UCharacterProperty: boolean isRuleWhiteSpace(int)>(i1);
        if $z0 == 0 goto label2;

        $i4 = virtualinvoke r2.<java.lang.StringBuffer: int length()>();
        if $i4 == 0 goto label0;

        $i5 = virtualinvoke r2.<java.lang.StringBuffer: int length()>();
        $i6 = $i5 - 1;
        $c7 = virtualinvoke r2.<java.lang.StringBuffer: char charAt(int)>($i6);
        if $c7 != 32 goto label1;

        goto label0;

     label1:
        i1 = 32;

     label2:
        staticinvoke <sun.text.normalizer.UTF16: java.lang.StringBuffer append(java.lang.StringBuffer,int)>(r2, i1);
        goto label0;

     label3:
        $i8 = virtualinvoke r2.<java.lang.StringBuffer: int length()>();
        if $i8 == 0 goto label4;

        $i9 = virtualinvoke r2.<java.lang.StringBuffer: int length()>();
        $i10 = $i9 - 1;
        $c11 = virtualinvoke r2.<java.lang.StringBuffer: char charAt(int)>($i10);
        if $c11 != 32 goto label4;

        $i12 = virtualinvoke r2.<java.lang.StringBuffer: int length()>();
        $i13 = $i12 - 1;
        virtualinvoke r2.<java.lang.StringBuffer: void setLength(int)>($i13);

     label4:
        $r4 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r4;
    }

    public sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String, java.lang.String, sun.text.normalizer.SymbolTable)
    {
        sun.text.normalizer.UnicodeSet r0;
        java.lang.String r1, r2, $r5, $r12;
        sun.text.normalizer.SymbolTable r3;
        sun.text.normalizer.VersionInfo r4;
        int $i0;
        boolean $z0;
        sun.text.normalizer.UnicodeSet$VersionFilter $r6;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: sun.text.normalizer.SymbolTable;
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i0 <= 0 goto label0;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Age");
        if $z0 == 0 goto label0;

        $r5 = staticinvoke <sun.text.normalizer.UnicodeSet: java.lang.String mungeCharName(java.lang.String)>(r2);
        r4 = staticinvoke <sun.text.normalizer.VersionInfo: sun.text.normalizer.VersionInfo getInstance(java.lang.String)>($r5);
        $r6 = new sun.text.normalizer.UnicodeSet$VersionFilter;
        specialinvoke $r6.<sun.text.normalizer.UnicodeSet$VersionFilter: void <init>(sun.text.normalizer.VersionInfo)>(r4);
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyFilter(sun.text.normalizer.UnicodeSet$Filter,int)>($r6, 2);
        return r0;

     label0:
        $r8 = new java.lang.IllegalArgumentException;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported property: ");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);
        throw $r8;
    }

    private static boolean resemblesPropertyPattern(sun.text.normalizer.RuleCharacterIterator, int)
    {
        sun.text.normalizer.RuleCharacterIterator r0;
        int i0, i1, i2, i3, $i4;
        boolean z0, $z1;
        java.lang.Object r1;

        r0 := @parameter0: sun.text.normalizer.RuleCharacterIterator;
        i0 := @parameter1: int;
        z0 = 0;
        i3 = i0 & -3;
        r1 = virtualinvoke r0.<sun.text.normalizer.RuleCharacterIterator: java.lang.Object getPos(java.lang.Object)>(null);
        i1 = virtualinvoke r0.<sun.text.normalizer.RuleCharacterIterator: int next(int)>(i3);
        if i1 == 91 goto label0;

        if i1 != 92 goto label6;

     label0:
        $i4 = i3 & -5;
        i2 = virtualinvoke r0.<sun.text.normalizer.RuleCharacterIterator: int next(int)>($i4);
        if i1 != 91 goto label2;

        if i2 != 58 goto label1;

        $z1 = 1;
        goto label5;

     label1:
        $z1 = 0;
        goto label5;

     label2:
        if i2 == 78 goto label3;

        if i2 == 112 goto label3;

        if i2 != 80 goto label4;

     label3:
        $z1 = 1;
        goto label5;

     label4:
        $z1 = 0;

     label5:
        z0 = $z1;

     label6:
        virtualinvoke r0.<sun.text.normalizer.RuleCharacterIterator: void setPos(java.lang.Object)>(r1);
        return z0;
    }

    private sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String, java.text.ParsePosition, sun.text.normalizer.SymbolTable)
    {
        sun.text.normalizer.UnicodeSet r0;
        java.lang.String r1, r4, r5, $r7;
        java.text.ParsePosition r2;
        sun.text.normalizer.SymbolTable r3;
        int i0, i2, $i3, $i4, $i5, i6, $i7, $i9, $i10, i11, $i12, i14, $i15, $i18;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7;
        char c1, $c8, $c13;
        byte $b17;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.text.ParsePosition;
        r3 := @parameter2: sun.text.normalizer.SymbolTable;
        i0 = virtualinvoke r2.<java.text.ParsePosition: int getIndex()>();
        $i3 = i0 + 5;
        $i4 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i3 <= $i4 goto label0;

        return null;

     label0:
        z0 = 0;
        z1 = 0;
        z2 = 0;
        $z3 = virtualinvoke r1.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(i0, "[:", 0, 2);
        if $z3 == 0 goto label1;

        z0 = 1;
        $i5 = i0 + 2;
        i6 = staticinvoke <sun.text.normalizer.Utility: int skipWhitespace(java.lang.String,int)>(r1, $i5);
        $i7 = virtualinvoke r1.<java.lang.String: int length()>();
        if i6 >= $i7 goto label10;

        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6);
        if $c8 != 94 goto label10;

        i6 = i6 + 1;
        z2 = 1;
        goto label10;

     label1:
        $z4 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, "\\p", 0, 2);
        if $z4 != 0 goto label2;

        $z5 = virtualinvoke r1.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(i0, "\\N", 0, 2);
        if $z5 == 0 goto label9;

     label2:
        $i9 = i0 + 1;
        c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i9);
        if c1 != 80 goto label3;

        $z6 = 1;
        goto label4;

     label3:
        $z6 = 0;

     label4:
        z2 = $z6;
        if c1 != 78 goto label5;

        $z7 = 1;
        goto label6;

     label5:
        $z7 = 0;

     label6:
        z1 = $z7;
        $i10 = i0 + 2;
        i11 = staticinvoke <sun.text.normalizer.Utility: int skipWhitespace(java.lang.String,int)>(r1, $i10);
        $i12 = virtualinvoke r1.<java.lang.String: int length()>();
        if i11 == $i12 goto label7;

        i6 = i11 + 1;
        $c13 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i11);
        if $c13 == 123 goto label8;

     label7:
        return null;

     label8:
        goto label10;

     label9:
        return null;

     label10:
        if z0 == 0 goto label11;

        $r7 = ":]";
        goto label12;

     label11:
        $r7 = "}";

     label12:
        i14 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String,int)>($r7, i6);
        if i14 >= 0 goto label13;

        return null;

     label13:
        i2 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(61, i6);
        if i2 < 0 goto label14;

        if i2 >= i14 goto label14;

        if z1 != 0 goto label14;

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i6, i2);
        $i15 = i2 + 1;
        r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i15, i14);
        goto label15;

     label14:
        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i6, i14);
        r5 = "";
        if z1 == 0 goto label15;

        r5 = r4;
        r4 = "na";

     label15:
        virtualinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyAlias(java.lang.String,java.lang.String,sun.text.normalizer.SymbolTable)>(r4, r5, r3);
        if z2 == 0 goto label16;

        virtualinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet complement()>();

     label16:
        if z0 == 0 goto label17;

        $b17 = 2;
        goto label18;

     label17:
        $b17 = 1;

     label18:
        $i18 = i14 + $b17;
        virtualinvoke r2.<java.text.ParsePosition: void setIndex(int)>($i18);
        return r0;
    }

    private void applyPropertyPattern(sun.text.normalizer.RuleCharacterIterator, java.lang.StringBuffer, sun.text.normalizer.SymbolTable)
    {
        sun.text.normalizer.UnicodeSet r0;
        sun.text.normalizer.RuleCharacterIterator r1;
        java.lang.StringBuffer r2;
        sun.text.normalizer.SymbolTable r3;
        java.lang.String r4, $r8;
        java.text.ParsePosition r5, $r6;
        int $i0, $i1, $i2;

        r0 := @this: sun.text.normalizer.UnicodeSet;
        r1 := @parameter0: sun.text.normalizer.RuleCharacterIterator;
        r2 := @parameter1: java.lang.StringBuffer;
        r3 := @parameter2: sun.text.normalizer.SymbolTable;
        r4 = virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: java.lang.String lookahead()>();
        $r6 = new java.text.ParsePosition;
        specialinvoke $r6.<java.text.ParsePosition: void <init>(int)>(0);
        r5 = $r6;
        specialinvoke r0.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet applyPropertyPattern(java.lang.String,java.text.ParsePosition,sun.text.normalizer.SymbolTable)>(r4, r5, r3);
        $i0 = virtualinvoke r5.<java.text.ParsePosition: int getIndex()>();
        if $i0 != 0 goto label0;

        staticinvoke <sun.text.normalizer.UnicodeSet: void syntaxError(sun.text.normalizer.RuleCharacterIterator,java.lang.String)>(r1, "Invalid property pattern");

     label0:
        $i1 = virtualinvoke r5.<java.text.ParsePosition: int getIndex()>();
        virtualinvoke r1.<sun.text.normalizer.RuleCharacterIterator: void jumpahead(int)>($i1);
        $i2 = virtualinvoke r5.<java.text.ParsePosition: int getIndex()>();
        $r8 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);
        return;
    }

    static void <clinit>()
    {
        sun.text.normalizer.VersionInfo $r0;

        <sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet[] INCLUSIONS> = null;
        $r0 = staticinvoke <sun.text.normalizer.VersionInfo: sun.text.normalizer.VersionInfo getInstance(int,int,int,int)>(0, 0, 0, 0);
        <sun.text.normalizer.UnicodeSet: sun.text.normalizer.VersionInfo NO_VERSION> = $r0;
        return;
    }
}
