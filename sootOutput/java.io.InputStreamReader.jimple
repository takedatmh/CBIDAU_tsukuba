public class java.io.InputStreamReader extends java.io.Reader
{
    private final sun.nio.cs.StreamDecoder sd;

    public void <init>(java.io.InputStream)
    {
        java.io.InputStreamReader r0;
        java.io.InputStream r1;
        java.io.UnsupportedEncodingException r2, $r5;
        java.lang.String $r3;
        sun.nio.cs.StreamDecoder $r4;
        java.lang.Error $r6;

        r0 := @this: java.io.InputStreamReader;
        r1 := @parameter0: java.io.InputStream;
        specialinvoke r0.<java.io.Reader: void <init>(java.lang.Object)>(r1);

     label0:
        $r3 = (java.lang.String) null;
        $r4 = staticinvoke <sun.nio.cs.StreamDecoder: sun.nio.cs.StreamDecoder forInputStreamReader(java.io.InputStream,java.lang.Object,java.lang.String)>(r1, r0, $r3);
        r0.<java.io.InputStreamReader: sun.nio.cs.StreamDecoder sd> = $r4;

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r2 = $r5;
        $r6 = new java.lang.Error;
        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.Throwable)>(r2);
        throw $r6;

     label3:
        return;

        catch java.io.UnsupportedEncodingException from label0 to label1 with label2;
    }

    public void <init>(java.io.InputStream, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.io.InputStreamReader r0;
        java.io.InputStream r1;
        java.lang.String r2;
        java.lang.NullPointerException $r3;
        sun.nio.cs.StreamDecoder $r4;

        r0 := @this: java.io.InputStreamReader;
        r1 := @parameter0: java.io.InputStream;
        r2 := @parameter1: java.lang.String;
        specialinvoke r0.<java.io.Reader: void <init>(java.lang.Object)>(r1);
        if r2 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("charsetName");
        throw $r3;

     label0:
        $r4 = staticinvoke <sun.nio.cs.StreamDecoder: sun.nio.cs.StreamDecoder forInputStreamReader(java.io.InputStream,java.lang.Object,java.lang.String)>(r1, r0, r2);
        r0.<java.io.InputStreamReader: sun.nio.cs.StreamDecoder sd> = $r4;
        return;
    }

    public void <init>(java.io.InputStream, java.nio.charset.Charset)
    {
        java.io.InputStreamReader r0;
        java.io.InputStream r1;
        java.nio.charset.Charset r2;
        java.lang.NullPointerException $r3;
        sun.nio.cs.StreamDecoder $r4;

        r0 := @this: java.io.InputStreamReader;
        r1 := @parameter0: java.io.InputStream;
        r2 := @parameter1: java.nio.charset.Charset;
        specialinvoke r0.<java.io.Reader: void <init>(java.lang.Object)>(r1);
        if r2 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("charset");
        throw $r3;

     label0:
        $r4 = staticinvoke <sun.nio.cs.StreamDecoder: sun.nio.cs.StreamDecoder forInputStreamReader(java.io.InputStream,java.lang.Object,java.nio.charset.Charset)>(r1, r0, r2);
        r0.<java.io.InputStreamReader: sun.nio.cs.StreamDecoder sd> = $r4;
        return;
    }

    public void <init>(java.io.InputStream, java.nio.charset.CharsetDecoder)
    {
        java.io.InputStreamReader r0;
        java.io.InputStream r1;
        java.nio.charset.CharsetDecoder r2;
        java.lang.NullPointerException $r3;
        sun.nio.cs.StreamDecoder $r4;

        r0 := @this: java.io.InputStreamReader;
        r1 := @parameter0: java.io.InputStream;
        r2 := @parameter1: java.nio.charset.CharsetDecoder;
        specialinvoke r0.<java.io.Reader: void <init>(java.lang.Object)>(r1);
        if r2 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("charset decoder");
        throw $r3;

     label0:
        $r4 = staticinvoke <sun.nio.cs.StreamDecoder: sun.nio.cs.StreamDecoder forInputStreamReader(java.io.InputStream,java.lang.Object,java.nio.charset.CharsetDecoder)>(r1, r0, r2);
        r0.<java.io.InputStreamReader: sun.nio.cs.StreamDecoder sd> = $r4;
        return;
    }

    public java.lang.String getEncoding()
    {
        java.io.InputStreamReader r0;
        sun.nio.cs.StreamDecoder $r1;
        java.lang.String $r2;

        r0 := @this: java.io.InputStreamReader;
        $r1 = r0.<java.io.InputStreamReader: sun.nio.cs.StreamDecoder sd>;
        $r2 = virtualinvoke $r1.<sun.nio.cs.StreamDecoder: java.lang.String getEncoding()>();
        return $r2;
    }

    public int read() throws java.io.IOException
    {
        java.io.InputStreamReader r0;
        sun.nio.cs.StreamDecoder $r1;
        int $i0;

        r0 := @this: java.io.InputStreamReader;
        $r1 = r0.<java.io.InputStreamReader: sun.nio.cs.StreamDecoder sd>;
        $i0 = virtualinvoke $r1.<sun.nio.cs.StreamDecoder: int read()>();
        return $i0;
    }

    public int read(char[], int, int) throws java.io.IOException
    {
        java.io.InputStreamReader r0;
        char[] r1;
        int i0, i1, $i2;
        sun.nio.cs.StreamDecoder $r2;

        r0 := @this: java.io.InputStreamReader;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = r0.<java.io.InputStreamReader: sun.nio.cs.StreamDecoder sd>;
        $i2 = virtualinvoke $r2.<sun.nio.cs.StreamDecoder: int read(char[],int,int)>(r1, i0, i1);
        return $i2;
    }

    public boolean ready() throws java.io.IOException
    {
        java.io.InputStreamReader r0;
        sun.nio.cs.StreamDecoder $r1;
        boolean $z0;

        r0 := @this: java.io.InputStreamReader;
        $r1 = r0.<java.io.InputStreamReader: sun.nio.cs.StreamDecoder sd>;
        $z0 = virtualinvoke $r1.<sun.nio.cs.StreamDecoder: boolean ready()>();
        return $z0;
    }

    public void close() throws java.io.IOException
    {
        java.io.InputStreamReader r0;
        sun.nio.cs.StreamDecoder $r1;

        r0 := @this: java.io.InputStreamReader;
        $r1 = r0.<java.io.InputStreamReader: sun.nio.cs.StreamDecoder sd>;
        virtualinvoke $r1.<sun.nio.cs.StreamDecoder: void close()>();
        return;
    }
}
