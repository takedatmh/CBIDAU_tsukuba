class sun.nio.ch.Net extends java.lang.Object
{
    static final java.net.ProtocolFamily UNSPEC;
    private static boolean revealLocalAddress;
    private static volatile boolean propRevealLocalAddress;
    private static final boolean exclusiveBind;
    private static volatile boolean checkedIPv6;
    private static volatile boolean isIPv6Available;
    public static final int SHUT_RD;
    public static final int SHUT_WR;
    public static final int SHUT_RDWR;

    private void <init>()
    {
        sun.nio.ch.Net r0;

        r0 := @this: sun.nio.ch.Net;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    static boolean isIPv6Available()
    {
        boolean $z0, $z1, $z2;

        $z0 = <sun.nio.ch.Net: boolean checkedIPv6>;
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <sun.nio.ch.Net: boolean isIPv6Available0()>();
        <sun.nio.ch.Net: boolean isIPv6Available> = $z1;
        <sun.nio.ch.Net: boolean checkedIPv6> = 1;

     label0:
        $z2 = <sun.nio.ch.Net: boolean isIPv6Available>;
        return $z2;
    }

    static boolean useExclusiveBind()
    {
        boolean $z0;

        $z0 = <sun.nio.ch.Net: boolean exclusiveBind>;
        return $z0;
    }

    static boolean canIPv6SocketJoinIPv4Group()
    {
        boolean $z0;

        $z0 = staticinvoke <sun.nio.ch.Net: boolean canIPv6SocketJoinIPv4Group0()>();
        return $z0;
    }

    static boolean canJoin6WithIPv4Group()
    {
        boolean $z0;

        $z0 = staticinvoke <sun.nio.ch.Net: boolean canJoin6WithIPv4Group0()>();
        return $z0;
    }

    static java.net.InetSocketAddress checkAddress(java.net.SocketAddress)
    {
        java.net.SocketAddress r0;
        java.net.InetSocketAddress r1;
        java.net.InetAddress r2;
        java.lang.NullPointerException $r3;
        boolean $z0, $z1, $z2, $z3;
        java.nio.channels.UnsupportedAddressTypeException $r4;
        java.nio.channels.UnresolvedAddressException $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @parameter0: java.net.SocketAddress;
        if r0 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        $z0 = r0 instanceof java.net.InetSocketAddress;
        if $z0 != 0 goto label1;

        $r4 = new java.nio.channels.UnsupportedAddressTypeException;
        specialinvoke $r4.<java.nio.channels.UnsupportedAddressTypeException: void <init>()>();
        throw $r4;

     label1:
        r1 = (java.net.InetSocketAddress) r0;
        $z1 = virtualinvoke r1.<java.net.InetSocketAddress: boolean isUnresolved()>();
        if $z1 == 0 goto label2;

        $r5 = new java.nio.channels.UnresolvedAddressException;
        specialinvoke $r5.<java.nio.channels.UnresolvedAddressException: void <init>()>();
        throw $r5;

     label2:
        r2 = virtualinvoke r1.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $z2 = r2 instanceof java.net.Inet4Address;
        if $z2 != 0 goto label3;

        $z3 = r2 instanceof java.net.Inet6Address;
        if $z3 != 0 goto label3;

        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid address type");
        throw $r6;

     label3:
        return r1;
    }

    static java.net.InetSocketAddress asInetSocketAddress(java.net.SocketAddress)
    {
        java.net.SocketAddress r0;
        boolean $z0;
        java.nio.channels.UnsupportedAddressTypeException $r1;
        java.net.InetSocketAddress $r2;

        r0 := @parameter0: java.net.SocketAddress;
        $z0 = r0 instanceof java.net.InetSocketAddress;
        if $z0 != 0 goto label0;

        $r1 = new java.nio.channels.UnsupportedAddressTypeException;
        specialinvoke $r1.<java.nio.channels.UnsupportedAddressTypeException: void <init>()>();
        throw $r1;

     label0:
        $r2 = (java.net.InetSocketAddress) r0;
        return $r2;
    }

    static void translateToSocketException(java.lang.Exception) throws java.net.SocketException
    {
        java.lang.Exception r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.net.SocketException $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10;
        java.lang.RuntimeException $r11;
        java.lang.Error $r12;

        r0 := @parameter0: java.lang.Exception;
        $z0 = r0 instanceof java.net.SocketException;
        if $z0 == 0 goto label0;

        $r2 = (java.net.SocketException) r0;
        throw $r2;

     label0:
        r1 = r0;
        $z1 = r0 instanceof java.nio.channels.ClosedChannelException;
        if $z1 == 0 goto label1;

        $r3 = new java.net.SocketException;
        specialinvoke $r3.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        r1 = $r3;
        goto label6;

     label1:
        $z2 = r0 instanceof java.nio.channels.NotYetConnectedException;
        if $z2 == 0 goto label2;

        $r4 = new java.net.SocketException;
        specialinvoke $r4.<java.net.SocketException: void <init>(java.lang.String)>("Socket is not connected");
        r1 = $r4;
        goto label6;

     label2:
        $z3 = r0 instanceof java.nio.channels.AlreadyBoundException;
        if $z3 == 0 goto label3;

        $r5 = new java.net.SocketException;
        specialinvoke $r5.<java.net.SocketException: void <init>(java.lang.String)>("Already bound");
        r1 = $r5;
        goto label6;

     label3:
        $z4 = r0 instanceof java.nio.channels.NotYetBoundException;
        if $z4 == 0 goto label4;

        $r6 = new java.net.SocketException;
        specialinvoke $r6.<java.net.SocketException: void <init>(java.lang.String)>("Socket is not bound yet");
        r1 = $r6;
        goto label6;

     label4:
        $z5 = r0 instanceof java.nio.channels.UnsupportedAddressTypeException;
        if $z5 == 0 goto label5;

        $r7 = new java.net.SocketException;
        specialinvoke $r7.<java.net.SocketException: void <init>(java.lang.String)>("Unsupported address type");
        r1 = $r7;
        goto label6;

     label5:
        $z6 = r0 instanceof java.nio.channels.UnresolvedAddressException;
        if $z6 == 0 goto label6;

        $r8 = new java.net.SocketException;
        specialinvoke $r8.<java.net.SocketException: void <init>(java.lang.String)>("Unresolved address");
        r1 = $r8;

     label6:
        if r1 == r0 goto label7;

        virtualinvoke r1.<java.lang.Exception: java.lang.Throwable initCause(java.lang.Throwable)>(r0);

     label7:
        $z7 = r1 instanceof java.net.SocketException;
        if $z7 == 0 goto label8;

        $r10 = (java.net.SocketException) r1;
        throw $r10;

     label8:
        $z8 = r1 instanceof java.lang.RuntimeException;
        if $z8 == 0 goto label9;

        $r11 = (java.lang.RuntimeException) r1;
        throw $r11;

     label9:
        $r12 = new java.lang.Error;
        specialinvoke $r12.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>("Untranslated exception", r1);
        throw $r12;
    }

    static void translateException(java.lang.Exception, boolean) throws java.io.IOException
    {
        java.lang.Exception r0;
        boolean z0, $z1, $z2;
        java.io.IOException $r1;
        java.net.UnknownHostException $r2;

        r0 := @parameter0: java.lang.Exception;
        z0 := @parameter1: boolean;
        $z1 = r0 instanceof java.io.IOException;
        if $z1 == 0 goto label0;

        $r1 = (java.io.IOException) r0;
        throw $r1;

     label0:
        if z0 == 0 goto label1;

        $z2 = r0 instanceof java.nio.channels.UnresolvedAddressException;
        if $z2 == 0 goto label1;

        $r2 = new java.net.UnknownHostException;
        specialinvoke $r2.<java.net.UnknownHostException: void <init>()>();
        throw $r2;

     label1:
        staticinvoke <sun.nio.ch.Net: void translateToSocketException(java.lang.Exception)>(r0);
        return;
    }

    static void translateException(java.lang.Exception) throws java.io.IOException
    {
        java.lang.Exception r0;

        r0 := @parameter0: java.lang.Exception;
        staticinvoke <sun.nio.ch.Net: void translateException(java.lang.Exception,boolean)>(r0, 0);
        return;
    }

    static java.net.InetSocketAddress getRevealedLocalAddress(java.net.InetSocketAddress)
    {
        java.net.InetSocketAddress r0;
        java.lang.SecurityManager r1;
        java.lang.SecurityException r2, $r5;
        boolean $z0;
        java.net.InetAddress $r3;
        java.lang.String $r4;
        int $i0;

        r0 := @parameter0: java.net.InetSocketAddress;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r0 == null goto label0;

        if r1 != null goto label1;

     label0:
        return r0;

     label1:
        $z0 = staticinvoke <sun.nio.ch.Net: boolean getRevealLocalAddress()>();
        if $z0 != 0 goto label5;

     label2:
        $r3 = virtualinvoke r0.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $r4 = virtualinvoke $r3.<java.net.InetAddress: java.lang.String getHostAddress()>();
        virtualinvoke r1.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>($r4, -1);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;
        r2 = $r5;
        $i0 = virtualinvoke r0.<java.net.InetSocketAddress: int getPort()>();
        r0 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress getLoopbackAddress(int)>($i0);

     label5:
        return r0;

        catch java.lang.SecurityException from label2 to label3 with label4;
    }

    static java.lang.String getRevealedLocalAddressAsString(java.net.InetSocketAddress)
    {
        java.net.InetSocketAddress r0;
        boolean $z0;
        java.lang.SecurityManager $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @parameter0: java.net.InetSocketAddress;
        $z0 = staticinvoke <sun.nio.ch.Net: boolean getRevealLocalAddress()>();
        if $z0 != 0 goto label0;

        $r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if $r1 == null goto label0;

        $i0 = virtualinvoke r0.<java.net.InetSocketAddress: int getPort()>();
        r0 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress getLoopbackAddress(int)>($i0);

     label0:
        $r2 = virtualinvoke r0.<java.net.InetSocketAddress: java.lang.String toString()>();
        return $r2;
    }

    private static boolean getRevealLocalAddress()
    {
        boolean $z0, $z1, $z2;
        java.lang.Exception r0, $r4;
        sun.nio.ch.Net$3 $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        $z0 = <sun.nio.ch.Net: boolean propRevealLocalAddress>;
        if $z0 != 0 goto label4;

     label0:
        $r1 = new sun.nio.ch.Net$3;
        specialinvoke $r1.<sun.nio.ch.Net$3: void <init>()>();
        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r1);
        $r3 = (java.lang.String) $r2;
        $z1 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r3);
        <sun.nio.ch.Net: boolean revealLocalAddress> = $z1;

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r0 = $r4;

     label3:
        <sun.nio.ch.Net: boolean propRevealLocalAddress> = 1;

     label4:
        $z2 = <sun.nio.ch.Net: boolean revealLocalAddress>;
        return $z2;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    private static java.net.InetSocketAddress getLoopbackAddress(int)
    {
        int i0;
        java.net.InetSocketAddress $r0;
        java.net.InetAddress $r1;

        i0 := @parameter0: int;
        $r0 = new java.net.InetSocketAddress;
        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLoopbackAddress()>();
        specialinvoke $r0.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r1, i0);
        return $r0;
    }

    static java.net.Inet4Address anyInet4Address(java.net.NetworkInterface)
    {
        java.net.NetworkInterface r0;
        sun.nio.ch.Net$4 $r1;
        java.lang.Object $r2;
        java.net.Inet4Address $r3;

        r0 := @parameter0: java.net.NetworkInterface;
        $r1 = new sun.nio.ch.Net$4;
        specialinvoke $r1.<sun.nio.ch.Net$4: void <init>(java.net.NetworkInterface)>(r0);
        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        $r3 = (java.net.Inet4Address) $r2;
        return $r3;
    }

    static int inet4AsInt(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        byte[] r1;
        short s0;
        boolean $z0;
        byte $b1, $b2, $b6, $b10;
        int $i3, $i4, i5, $i7, $i8, i9, $i11, $i12, i13;
        java.lang.AssertionError $r2;

        r0 := @parameter0: java.net.InetAddress;
        $z0 = r0 instanceof java.net.Inet4Address;
        if $z0 == 0 goto label0;

        r1 = virtualinvoke r0.<java.net.InetAddress: byte[] getAddress()>();
        $b1 = r1[3];
        s0 = $b1 & 255;
        $b2 = r1[2];
        $i3 = $b2 << 8;
        $i4 = $i3 & 65280;
        i5 = s0 | $i4;
        $b6 = r1[1];
        $i7 = $b6 << 16;
        $i8 = $i7 & 16711680;
        i9 = i5 | $i8;
        $b10 = r1[0];
        $i11 = $b10 << 24;
        $i12 = $i11 & -16777216;
        i13 = i9 | $i12;
        return i13;

     label0:
        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("Should not reach here");
        throw $r2;
    }

    static java.net.InetAddress inet4FromInt(int)
    {
        int i0, $i1, $i2, $i4, $i5, $i7, $i8, $i10;
        byte[] r0;
        java.net.UnknownHostException r1, $r3;
        byte $b3, $b6, $b9, $b11;
        java.net.InetAddress $r2;
        java.lang.AssertionError $r4;

        i0 := @parameter0: int;
        r0 = newarray (byte)[4];
        $i1 = i0 >>> 24;
        $i2 = $i1 & 255;
        $b3 = (byte) $i2;
        r0[0] = $b3;
        $i4 = i0 >>> 16;
        $i5 = $i4 & 255;
        $b6 = (byte) $i5;
        r0[1] = $b6;
        $i7 = i0 >>> 8;
        $i8 = $i7 & 255;
        $b9 = (byte) $i8;
        r0[2] = $b9;
        $i10 = i0 & 255;
        $b11 = (byte) $i10;
        r0[3] = $b11;

     label0:
        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r0);

     label1:
        return $r2;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        $r4 = new java.lang.AssertionError;
        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("Should not reach here");
        throw $r4;

        catch java.net.UnknownHostException from label0 to label1 with label2;
    }

    static byte[] inet6AsByteArray(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        byte[] r1, r2, $r3;
        boolean $z0, $z1;
        byte $b0, $b1, $b2, $b3;
        java.lang.AssertionError $r4;

        r0 := @parameter0: java.net.InetAddress;
        $z0 = r0 instanceof java.net.Inet6Address;
        if $z0 == 0 goto label0;

        $r3 = virtualinvoke r0.<java.net.InetAddress: byte[] getAddress()>();
        return $r3;

     label0:
        $z1 = r0 instanceof java.net.Inet4Address;
        if $z1 == 0 goto label1;

        r1 = virtualinvoke r0.<java.net.InetAddress: byte[] getAddress()>();
        r2 = newarray (byte)[16];
        r2[10] = -1;
        r2[11] = -1;
        $b0 = r1[0];
        r2[12] = $b0;
        $b1 = r1[1];
        r2[13] = $b1;
        $b2 = r1[2];
        r2[14] = $b2;
        $b3 = r1[3];
        r2[15] = $b3;
        return r2;

     label1:
        $r4 = new java.lang.AssertionError;
        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("Should not reach here");
        throw $r4;
    }

    static void setSocketOption(java.io.FileDescriptor, java.net.ProtocolFamily, java.net.SocketOption, java.lang.Object) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        java.net.ProtocolFamily r1, $r23;
        java.net.SocketOption r2, $r7, $r8, $r11, $r13, $r16;
        java.lang.Object r3;
        java.lang.Class r4;
        int i0, i1, i2, i3, i4, $i6, $i7;
        boolean z0, $z1, z2;
        java.lang.IllegalArgumentException $r5, $r10, $r15, $r18;
        java.lang.AssertionError $r6, $r20;
        java.lang.Integer $r9, $r12, $r14, $r17, $r21;
        sun.nio.ch.OptionKey r19;
        java.lang.Boolean $r22;
        byte $b5;

        r0 := @parameter0: java.io.FileDescriptor;
        r1 := @parameter1: java.net.ProtocolFamily;
        r2 := @parameter2: java.net.SocketOption;
        r3 := @parameter3: java.lang.Object;
        if r3 != null goto label0;

        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid option value");
        throw $r5;

     label0:
        r4 = interfaceinvoke r2.<java.net.SocketOption: java.lang.Class type()>();
        if r4 == class "java/lang/Integer" goto label1;

        if r4 == class "java/lang/Boolean" goto label1;

        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("Should not reach here");
        throw $r6;

     label1:
        $r7 = <java.net.StandardSocketOptions: java.net.SocketOption SO_RCVBUF>;
        if r2 == $r7 goto label2;

        $r8 = <java.net.StandardSocketOptions: java.net.SocketOption SO_SNDBUF>;
        if r2 != $r8 goto label3;

     label2:
        $r9 = (java.lang.Integer) r3;
        i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();
        if i0 >= 0 goto label3;

        $r10 = new java.lang.IllegalArgumentException;
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid send/receive buffer size");
        throw $r10;

     label3:
        $r11 = <java.net.StandardSocketOptions: java.net.SocketOption SO_LINGER>;
        if r2 != $r11 goto label5;

        $r12 = (java.lang.Integer) r3;
        i2 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();
        if i2 >= 0 goto label4;

        r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

     label4:
        if i2 <= 65535 goto label5;

        r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(65535);

     label5:
        $r13 = <java.net.StandardSocketOptions: java.net.SocketOption IP_TOS>;
        if r2 != $r13 goto label7;

        $r14 = (java.lang.Integer) r3;
        i3 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();
        if i3 < 0 goto label6;

        if i3 <= 255 goto label7;

     label6:
        $r15 = new java.lang.IllegalArgumentException;
        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid IP_TOS value");
        throw $r15;

     label7:
        $r16 = <java.net.StandardSocketOptions: java.net.SocketOption IP_MULTICAST_TTL>;
        if r2 != $r16 goto label9;

        $r17 = (java.lang.Integer) r3;
        i4 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();
        if i4 < 0 goto label8;

        if i4 <= 255 goto label9;

     label8:
        $r18 = new java.lang.IllegalArgumentException;
        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid TTL/hop value");
        throw $r18;

     label9:
        r19 = staticinvoke <sun.nio.ch.SocketOptionRegistry: sun.nio.ch.OptionKey findOption(java.net.SocketOption,java.net.ProtocolFamily)>(r2, r1);
        if r19 != null goto label10;

        $r20 = new java.lang.AssertionError;
        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>("Option not found");
        throw $r20;

     label10:
        if r4 != class "java/lang/Integer" goto label11;

        $r21 = (java.lang.Integer) r3;
        i1 = virtualinvoke $r21.<java.lang.Integer: int intValue()>();
        goto label14;

     label11:
        $r22 = (java.lang.Boolean) r3;
        z0 = virtualinvoke $r22.<java.lang.Boolean: boolean booleanValue()>();
        if z0 == 0 goto label12;

        $b5 = 1;
        goto label13;

     label12:
        $b5 = 0;

     label13:
        i1 = $b5;

     label14:
        $r23 = <sun.nio.ch.Net: java.net.ProtocolFamily UNSPEC>;
        if r1 != $r23 goto label15;

        $z1 = 1;
        goto label16;

     label15:
        $z1 = 0;

     label16:
        z2 = $z1;
        $i6 = virtualinvoke r19.<sun.nio.ch.OptionKey: int level()>();
        $i7 = virtualinvoke r19.<sun.nio.ch.OptionKey: int name()>();
        staticinvoke <sun.nio.ch.Net: void setIntOption0(java.io.FileDescriptor,boolean,int,int,int)>(r0, z2, $i6, $i7, i1);
        return;
    }

    static java.lang.Object getSocketOption(java.io.FileDescriptor, java.net.ProtocolFamily, java.net.SocketOption) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        java.net.ProtocolFamily r1, $r7;
        java.net.SocketOption r2;
        java.lang.Class r3;
        sun.nio.ch.OptionKey r4;
        boolean z0, $z1;
        int i0, $i1, $i2;
        java.lang.AssertionError $r5, $r6;
        java.lang.Integer $r8;
        java.lang.Boolean $r9;

        r0 := @parameter0: java.io.FileDescriptor;
        r1 := @parameter1: java.net.ProtocolFamily;
        r2 := @parameter2: java.net.SocketOption;
        r3 = interfaceinvoke r2.<java.net.SocketOption: java.lang.Class type()>();
        if r3 == class "java/lang/Integer" goto label0;

        if r3 == class "java/lang/Boolean" goto label0;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Should not reach here");
        throw $r5;

     label0:
        r4 = staticinvoke <sun.nio.ch.SocketOptionRegistry: sun.nio.ch.OptionKey findOption(java.net.SocketOption,java.net.ProtocolFamily)>(r2, r1);
        if r4 != null goto label1;

        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("Option not found");
        throw $r6;

     label1:
        $r7 = <sun.nio.ch.Net: java.net.ProtocolFamily UNSPEC>;
        if r1 != $r7 goto label2;

        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;
        $i1 = virtualinvoke r4.<sun.nio.ch.OptionKey: int level()>();
        $i2 = virtualinvoke r4.<sun.nio.ch.OptionKey: int name()>();
        i0 = staticinvoke <sun.nio.ch.Net: int getIntOption0(java.io.FileDescriptor,boolean,int,int)>(r0, z0, $i1, $i2);
        if r3 != class "java/lang/Integer" goto label4;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        return $r8;

     label4:
        if i0 != 0 goto label5;

        $r9 = <java.lang.Boolean: java.lang.Boolean FALSE>;
        goto label6;

     label5:
        $r9 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label6:
        return $r9;
    }

    private static native boolean isIPv6Available0();

    private static native int isExclusiveBindAvailable();

    private static native boolean canIPv6SocketJoinIPv4Group0();

    private static native boolean canJoin6WithIPv4Group0();

    static java.io.FileDescriptor socket(boolean) throws java.io.IOException
    {
        boolean z0;
        java.net.ProtocolFamily $r0;
        java.io.FileDescriptor $r1;

        z0 := @parameter0: boolean;
        $r0 = <sun.nio.ch.Net: java.net.ProtocolFamily UNSPEC>;
        $r1 = staticinvoke <sun.nio.ch.Net: java.io.FileDescriptor socket(java.net.ProtocolFamily,boolean)>($r0, z0);
        return $r1;
    }

    static java.io.FileDescriptor socket(java.net.ProtocolFamily, boolean) throws java.io.IOException
    {
        java.net.ProtocolFamily r0;
        boolean z0, $z1, z2, $z3;
        java.net.StandardProtocolFamily $r1;
        int $i0;
        java.io.FileDescriptor $r2;

        r0 := @parameter0: java.net.ProtocolFamily;
        z0 := @parameter1: boolean;
        $z1 = staticinvoke <sun.nio.ch.Net: boolean isIPv6Available()>();
        if $z1 == 0 goto label0;

        $r1 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET>;
        if r0 == $r1 goto label0;

        $z3 = 1;
        goto label1;

     label0:
        $z3 = 0;

     label1:
        z2 = $z3;
        $i0 = staticinvoke <sun.nio.ch.Net: int socket0(boolean,boolean,boolean)>(z2, z0, 0);
        $r2 = staticinvoke <sun.nio.ch.IOUtil: java.io.FileDescriptor newFD(int)>($i0);
        return $r2;
    }

    static java.io.FileDescriptor serverSocket(boolean)
    {
        boolean z0, $z1;
        int $i0;
        java.io.FileDescriptor $r0;

        z0 := @parameter0: boolean;
        $z1 = staticinvoke <sun.nio.ch.Net: boolean isIPv6Available()>();
        $i0 = staticinvoke <sun.nio.ch.Net: int socket0(boolean,boolean,boolean)>($z1, z0, 1);
        $r0 = staticinvoke <sun.nio.ch.IOUtil: java.io.FileDescriptor newFD(int)>($i0);
        return $r0;
    }

    private static native int socket0(boolean, boolean, boolean);

    static void bind(java.io.FileDescriptor, java.net.InetAddress, int) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        java.net.InetAddress r1;
        int i0;
        java.net.ProtocolFamily $r2;

        r0 := @parameter0: java.io.FileDescriptor;
        r1 := @parameter1: java.net.InetAddress;
        i0 := @parameter2: int;
        $r2 = <sun.nio.ch.Net: java.net.ProtocolFamily UNSPEC>;
        staticinvoke <sun.nio.ch.Net: void bind(java.net.ProtocolFamily,java.io.FileDescriptor,java.net.InetAddress,int)>($r2, r0, r1, i0);
        return;
    }

    static void bind(java.net.ProtocolFamily, java.io.FileDescriptor, java.net.InetAddress, int) throws java.io.IOException
    {
        java.net.ProtocolFamily r0;
        java.io.FileDescriptor r1;
        java.net.InetAddress r2;
        int i0;
        boolean $z0, z1, $z2, $z3;
        java.net.StandardProtocolFamily $r3;

        r0 := @parameter0: java.net.ProtocolFamily;
        r1 := @parameter1: java.io.FileDescriptor;
        r2 := @parameter2: java.net.InetAddress;
        i0 := @parameter3: int;
        $z0 = staticinvoke <sun.nio.ch.Net: boolean isIPv6Available()>();
        if $z0 == 0 goto label0;

        $r3 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET>;
        if r0 == $r3 goto label0;

        $z3 = 1;
        goto label1;

     label0:
        $z3 = 0;

     label1:
        z1 = $z3;
        $z2 = <sun.nio.ch.Net: boolean exclusiveBind>;
        staticinvoke <sun.nio.ch.Net: void bind0(java.io.FileDescriptor,boolean,boolean,java.net.InetAddress,int)>(r1, z1, $z2, r2, i0);
        return;
    }

    private static native void bind0(java.io.FileDescriptor, boolean, boolean, java.net.InetAddress, int) throws java.io.IOException;

    static native void listen(java.io.FileDescriptor, int) throws java.io.IOException;

    static int connect(java.io.FileDescriptor, java.net.InetAddress, int) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        java.net.InetAddress r1;
        int i0, $i1;
        java.net.ProtocolFamily $r2;

        r0 := @parameter0: java.io.FileDescriptor;
        r1 := @parameter1: java.net.InetAddress;
        i0 := @parameter2: int;
        $r2 = <sun.nio.ch.Net: java.net.ProtocolFamily UNSPEC>;
        $i1 = staticinvoke <sun.nio.ch.Net: int connect(java.net.ProtocolFamily,java.io.FileDescriptor,java.net.InetAddress,int)>($r2, r0, r1, i0);
        return $i1;
    }

    static int connect(java.net.ProtocolFamily, java.io.FileDescriptor, java.net.InetAddress, int) throws java.io.IOException
    {
        java.net.ProtocolFamily r0;
        java.io.FileDescriptor r1;
        java.net.InetAddress r2;
        int i0, $i1;
        boolean $z0, z1, $z2;
        java.net.StandardProtocolFamily $r3;

        r0 := @parameter0: java.net.ProtocolFamily;
        r1 := @parameter1: java.io.FileDescriptor;
        r2 := @parameter2: java.net.InetAddress;
        i0 := @parameter3: int;
        $z0 = staticinvoke <sun.nio.ch.Net: boolean isIPv6Available()>();
        if $z0 == 0 goto label0;

        $r3 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET>;
        if r0 == $r3 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        z1 = $z2;
        $i1 = staticinvoke <sun.nio.ch.Net: int connect0(boolean,java.io.FileDescriptor,java.net.InetAddress,int)>(z1, r1, r2, i0);
        return $i1;
    }

    private static native int connect0(boolean, java.io.FileDescriptor, java.net.InetAddress, int) throws java.io.IOException;

    static native void shutdown(java.io.FileDescriptor, int) throws java.io.IOException;

    private static native int localPort(java.io.FileDescriptor) throws java.io.IOException;

    private static native java.net.InetAddress localInetAddress(java.io.FileDescriptor) throws java.io.IOException;

    static java.net.InetSocketAddress localAddress(java.io.FileDescriptor) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        java.net.InetSocketAddress $r1;
        java.net.InetAddress $r2;
        int $i0;

        r0 := @parameter0: java.io.FileDescriptor;
        $r1 = new java.net.InetSocketAddress;
        $r2 = staticinvoke <sun.nio.ch.Net: java.net.InetAddress localInetAddress(java.io.FileDescriptor)>(r0);
        $i0 = staticinvoke <sun.nio.ch.Net: int localPort(java.io.FileDescriptor)>(r0);
        specialinvoke $r1.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r2, $i0);
        return $r1;
    }

    private static native int remotePort(java.io.FileDescriptor) throws java.io.IOException;

    private static native java.net.InetAddress remoteInetAddress(java.io.FileDescriptor) throws java.io.IOException;

    static java.net.InetSocketAddress remoteAddress(java.io.FileDescriptor) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        java.net.InetSocketAddress $r1;
        java.net.InetAddress $r2;
        int $i0;

        r0 := @parameter0: java.io.FileDescriptor;
        $r1 = new java.net.InetSocketAddress;
        $r2 = staticinvoke <sun.nio.ch.Net: java.net.InetAddress remoteInetAddress(java.io.FileDescriptor)>(r0);
        $i0 = staticinvoke <sun.nio.ch.Net: int remotePort(java.io.FileDescriptor)>(r0);
        specialinvoke $r1.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r2, $i0);
        return $r1;
    }

    private static native int getIntOption0(java.io.FileDescriptor, boolean, int, int) throws java.io.IOException;

    private static native void setIntOption0(java.io.FileDescriptor, boolean, int, int, int) throws java.io.IOException;

    static int join4(java.io.FileDescriptor, int, int, int) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        int i0, i1, i2, $i3;

        r0 := @parameter0: java.io.FileDescriptor;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        $i3 = staticinvoke <sun.nio.ch.Net: int joinOrDrop4(boolean,java.io.FileDescriptor,int,int,int)>(1, r0, i0, i1, i2);
        return $i3;
    }

    static void drop4(java.io.FileDescriptor, int, int, int) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        int i0, i1, i2;

        r0 := @parameter0: java.io.FileDescriptor;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        staticinvoke <sun.nio.ch.Net: int joinOrDrop4(boolean,java.io.FileDescriptor,int,int,int)>(0, r0, i0, i1, i2);
        return;
    }

    private static native int joinOrDrop4(boolean, java.io.FileDescriptor, int, int, int) throws java.io.IOException;

    static int block4(java.io.FileDescriptor, int, int, int) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        int i0, i1, i2, $i3;

        r0 := @parameter0: java.io.FileDescriptor;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        $i3 = staticinvoke <sun.nio.ch.Net: int blockOrUnblock4(boolean,java.io.FileDescriptor,int,int,int)>(1, r0, i0, i1, i2);
        return $i3;
    }

    static void unblock4(java.io.FileDescriptor, int, int, int) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        int i0, i1, i2;

        r0 := @parameter0: java.io.FileDescriptor;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        staticinvoke <sun.nio.ch.Net: int blockOrUnblock4(boolean,java.io.FileDescriptor,int,int,int)>(0, r0, i0, i1, i2);
        return;
    }

    private static native int blockOrUnblock4(boolean, java.io.FileDescriptor, int, int, int) throws java.io.IOException;

    static int join6(java.io.FileDescriptor, byte[], int, byte[]) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        byte[] r1, r2;
        int i0, $i1;

        r0 := @parameter0: java.io.FileDescriptor;
        r1 := @parameter1: byte[];
        i0 := @parameter2: int;
        r2 := @parameter3: byte[];
        $i1 = staticinvoke <sun.nio.ch.Net: int joinOrDrop6(boolean,java.io.FileDescriptor,byte[],int,byte[])>(1, r0, r1, i0, r2);
        return $i1;
    }

    static void drop6(java.io.FileDescriptor, byte[], int, byte[]) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        byte[] r1, r2;
        int i0;

        r0 := @parameter0: java.io.FileDescriptor;
        r1 := @parameter1: byte[];
        i0 := @parameter2: int;
        r2 := @parameter3: byte[];
        staticinvoke <sun.nio.ch.Net: int joinOrDrop6(boolean,java.io.FileDescriptor,byte[],int,byte[])>(0, r0, r1, i0, r2);
        return;
    }

    private static native int joinOrDrop6(boolean, java.io.FileDescriptor, byte[], int, byte[]) throws java.io.IOException;

    static int block6(java.io.FileDescriptor, byte[], int, byte[]) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        byte[] r1, r2;
        int i0, $i1;

        r0 := @parameter0: java.io.FileDescriptor;
        r1 := @parameter1: byte[];
        i0 := @parameter2: int;
        r2 := @parameter3: byte[];
        $i1 = staticinvoke <sun.nio.ch.Net: int blockOrUnblock6(boolean,java.io.FileDescriptor,byte[],int,byte[])>(1, r0, r1, i0, r2);
        return $i1;
    }

    static void unblock6(java.io.FileDescriptor, byte[], int, byte[]) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        byte[] r1, r2;
        int i0;

        r0 := @parameter0: java.io.FileDescriptor;
        r1 := @parameter1: byte[];
        i0 := @parameter2: int;
        r2 := @parameter3: byte[];
        staticinvoke <sun.nio.ch.Net: int blockOrUnblock6(boolean,java.io.FileDescriptor,byte[],int,byte[])>(0, r0, r1, i0, r2);
        return;
    }

    static native int blockOrUnblock6(boolean, java.io.FileDescriptor, byte[], int, byte[]) throws java.io.IOException;

    static native void setInterface4(java.io.FileDescriptor, int) throws java.io.IOException;

    static native int getInterface4(java.io.FileDescriptor) throws java.io.IOException;

    static native void setInterface6(java.io.FileDescriptor, int) throws java.io.IOException;

    static native int getInterface6(java.io.FileDescriptor) throws java.io.IOException;

    private static native void initIDs();

    static void <clinit>()
    {
        sun.nio.ch.Net$1 $r0;
        int i0, $i1;
        java.lang.String r1;
        sun.nio.ch.Net$2 $r2;
        java.lang.Object $r3;
        boolean $z0;

        $r0 = new sun.nio.ch.Net$1;
        specialinvoke $r0.<sun.nio.ch.Net$1: void <init>()>();
        <sun.nio.ch.Net: java.net.ProtocolFamily UNSPEC> = $r0;
        i0 = staticinvoke <sun.nio.ch.Net: int isExclusiveBindAvailable()>();
        if i0 < 0 goto label5;

        $r2 = new sun.nio.ch.Net$2;
        specialinvoke $r2.<sun.nio.ch.Net$2: void <init>()>();
        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);
        r1 = (java.lang.String) $r3;
        if r1 == null goto label2;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i1 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r1);

     label1:
        <sun.nio.ch.Net: boolean exclusiveBind> = $z0;
        goto label4;

     label2:
        if i0 != 1 goto label3;

        <sun.nio.ch.Net: boolean exclusiveBind> = 1;
        goto label4;

     label3:
        <sun.nio.ch.Net: boolean exclusiveBind> = 0;

     label4:
        goto label6;

     label5:
        <sun.nio.ch.Net: boolean exclusiveBind> = 0;

     label6:
        <sun.nio.ch.Net: boolean checkedIPv6> = 0;
        staticinvoke <sun.nio.ch.Util: void load()>();
        staticinvoke <sun.nio.ch.Net: void initIDs()>();
        return;
    }
}
