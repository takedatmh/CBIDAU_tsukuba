public class org.apache.tomcat.util.http.fileupload.disk.DiskFileItem extends java.lang.Object implements org.apache.tomcat.util.http.fileupload.FileItem
{
    public static final java.lang.String DEFAULT_CHARSET;
    private static final java.lang.String UID;
    private static final java.util.concurrent.atomic.AtomicInteger COUNTER;
    private java.lang.String fieldName;
    private final java.lang.String contentType;
    private boolean isFormField;
    private final java.lang.String fileName;
    private long size;
    private final int sizeThreshold;
    private final java.io.File repository;
    private byte[] cachedContent;
    private transient org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream dfos;
    private transient java.io.File tempFile;
    private org.apache.tomcat.util.http.fileupload.FileItemHeaders headers;
    private java.lang.String defaultCharset;

    static void <clinit>()
    {
        java.util.UUID $r0;
        java.lang.String $r1, $r2;
        java.util.concurrent.atomic.AtomicInteger $r3;

        $r0 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();
        $r1 = virtualinvoke $r0.<java.util.UUID: java.lang.String toString()>();
        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(45, 95);
        <org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.lang.String UID> = $r2;
        $r3 = new java.util.concurrent.atomic.AtomicInteger;
        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);
        <org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.util.concurrent.atomic.AtomicInteger COUNTER> = $r3;
        return;
    }

    public void <init>(java.lang.String, java.lang.String, boolean, java.lang.String, int, java.io.File)
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        java.lang.String r1, r2, r3;
        boolean z0;
        int i0;
        java.io.File r4;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        z0 := @parameter2: boolean;
        r3 := @parameter3: java.lang.String;
        i0 := @parameter4: int;
        r4 := @parameter5: java.io.File;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: long size> = -1L;
        r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.lang.String defaultCharset> = "ISO-8859-1";
        r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.lang.String fieldName> = r1;
        r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.lang.String contentType> = r2;
        r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: boolean isFormField> = z0;
        r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.lang.String fileName> = r3;
        r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: int sizeThreshold> = i0;
        r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.io.File repository> = r4;
        return;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        boolean $z0;
        java.io.FileInputStream $r1;
        org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream $r2, $r5;
        java.io.File $r3;
        byte[] $r4, $r6, $r8;
        java.io.ByteArrayInputStream $r7;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        $z0 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: boolean isInMemory()>();
        if $z0 != 0 goto label0;

        $r1 = new java.io.FileInputStream;
        $r2 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream dfos>;
        $r3 = virtualinvoke $r2.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.io.File getFile()>();
        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>($r3);
        return $r1;

     label0:
        $r4 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: byte[] cachedContent>;
        if $r4 != null goto label1;

        $r5 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream dfos>;
        $r6 = virtualinvoke $r5.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: byte[] getData()>();
        r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: byte[] cachedContent> = $r6;

     label1:
        $r7 = new java.io.ByteArrayInputStream;
        $r8 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: byte[] cachedContent>;
        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>($r8);
        return $r7;
    }

    public java.lang.String getContentType()
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        java.lang.String $r1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        $r1 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.lang.String contentType>;
        return $r1;
    }

    public java.lang.String getCharSet()
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        org.apache.tomcat.util.http.fileupload.ParameterParser $r1, r2;
        java.util.Map r3;
        java.lang.String $r4, $r6;
        java.lang.Object $r5;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        $r1 = new org.apache.tomcat.util.http.fileupload.ParameterParser;
        specialinvoke $r1.<org.apache.tomcat.util.http.fileupload.ParameterParser: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<org.apache.tomcat.util.http.fileupload.ParameterParser: void setLowerCaseNames(boolean)>(1);
        $r4 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.lang.String getContentType()>();
        r3 = virtualinvoke r2.<org.apache.tomcat.util.http.fileupload.ParameterParser: java.util.Map parse(java.lang.String,char)>($r4, 59);
        $r5 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("charset");
        $r6 = (java.lang.String) $r5;
        return $r6;
    }

    public java.lang.String getName()
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        $r1 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.lang.String fileName>;
        $r2 = staticinvoke <org.apache.tomcat.util.http.fileupload.util.Streams: java.lang.String checkFileName(java.lang.String)>($r1);
        return $r2;
    }

    public boolean isInMemory()
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        byte[] $r1;
        org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream $r2;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        $r1 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: byte[] cachedContent>;
        if $r1 == null goto label0;

        return 1;

     label0:
        $r2 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream dfos>;
        $z0 = virtualinvoke $r2.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: boolean isInMemory()>();
        return $z0;
    }

    public long getSize()
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        long $l0, $l2, $l4, $l6, $l7;
        byte $b1;
        byte[] $r1, $r2, $r5;
        int $i3, $i5;
        org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream $r3, $r4, $r6;
        boolean $z0;
        java.io.File $r7;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        $l0 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: long size>;
        $b1 = $l0 cmp 0L;
        if $b1 < 0 goto label0;

        $l2 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: long size>;
        return $l2;

     label0:
        $r1 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: byte[] cachedContent>;
        if $r1 == null goto label1;

        $r2 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: byte[] cachedContent>;
        $i3 = lengthof $r2;
        $l4 = (long) $i3;
        return $l4;

     label1:
        $r3 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream dfos>;
        $z0 = virtualinvoke $r3.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: boolean isInMemory()>();
        if $z0 == 0 goto label2;

        $r4 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream dfos>;
        $r5 = virtualinvoke $r4.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: byte[] getData()>();
        $i5 = lengthof $r5;
        $l6 = (long) $i5;
        return $l6;

     label2:
        $r6 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream dfos>;
        $r7 = virtualinvoke $r6.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.io.File getFile()>();
        $l7 = virtualinvoke $r7.<java.io.File: long length()>();
        return $l7;
    }

    public byte[] get()
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        byte[] r1, $r5, $r8, $r9;
        java.io.FileInputStream r2, $r10;
        java.io.IOException r3, $r13;
        java.lang.Throwable r4, $r14;
        boolean $z0;
        org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream $r6, $r7, $r11;
        long $l0;
        int $i1;
        java.io.File $r12;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        $z0 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: boolean isInMemory()>();
        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: byte[] cachedContent>;
        if $r5 != null goto label0;

        $r6 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream dfos>;
        if $r6 == null goto label0;

        $r7 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream dfos>;
        $r8 = virtualinvoke $r7.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: byte[] getData()>();
        r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: byte[] cachedContent> = $r8;

     label0:
        $r9 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: byte[] cachedContent>;
        return $r9;

     label1:
        $l0 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: long getSize()>();
        $i1 = (int) $l0;
        r1 = newarray (byte)[$i1];
        r2 = null;

     label2:
        $r10 = new java.io.FileInputStream;
        $r11 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream dfos>;
        $r12 = virtualinvoke $r11.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.io.File getFile()>();
        specialinvoke $r10.<java.io.FileInputStream: void <init>(java.io.File)>($r12);
        r2 = $r10;
        staticinvoke <org.apache.tomcat.util.http.fileupload.IOUtils: void readFully(java.io.InputStream,byte[])>(r2, r1);

     label3:
        goto label7;

     label4:
        $r13 := @caughtexception;
        r3 = $r13;
        r1 = null;

     label5:
        staticinvoke <org.apache.tomcat.util.http.fileupload.IOUtils: void closeQuietly(java.io.Closeable)>(r2);
        goto label8;

     label6:
        $r14 := @caughtexception;
        r4 = $r14;
        staticinvoke <org.apache.tomcat.util.http.fileupload.IOUtils: void closeQuietly(java.io.Closeable)>(r2);
        throw r4;

     label7:
        staticinvoke <org.apache.tomcat.util.http.fileupload.IOUtils: void closeQuietly(java.io.Closeable)>(r2);

     label8:
        return r1;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label5 with label6;
    }

    public java.lang.String getString(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        java.lang.String r1, $r2;
        byte[] $r3;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        r1 := @parameter0: java.lang.String;
        $r2 = new java.lang.String;
        $r3 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: byte[] get()>();
        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>($r3, r1);
        return $r2;
    }

    public java.lang.String getString()
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        byte[] r1;
        java.lang.String r2, $r4, $r6;
        java.io.UnsupportedEncodingException r3, $r5;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        r1 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: byte[] get()>();
        r2 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.lang.String getCharSet()>();
        if r2 != null goto label0;

        r2 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.lang.String defaultCharset>;

     label0:
        $r4 = new java.lang.String;
        specialinvoke $r4.<java.lang.String: void <init>(byte[],java.lang.String)>(r1, r2);

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;
        r3 = $r5;
        $r6 = new java.lang.String;
        specialinvoke $r6.<java.lang.String: void <init>(byte[])>(r1);
        return $r6;

        catch java.io.UnsupportedEncodingException from label0 to label1 with label2;
    }

    public void write(java.io.File) throws java.lang.Exception
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        java.io.File r1, r9;
        java.io.FileOutputStream r2, $r6, $r14;
        java.lang.Throwable r3, r5, $r8, $r15;
        java.io.BufferedOutputStream r4, $r13;
        boolean $z0, $z1;
        byte[] $r7;
        long $l0;
        java.io.BufferedInputStream r10, $r11;
        java.io.FileInputStream $r12;
        org.apache.tomcat.util.http.fileupload.FileUploadException $r16;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        r1 := @parameter0: java.io.File;
        $z0 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: boolean isInMemory()>();
        if $z0 == 0 goto label3;

        r2 = null;

     label0:
        $r6 = new java.io.FileOutputStream;
        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);
        r2 = $r6;
        $r7 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: byte[] get()>();
        virtualinvoke r2.<java.io.FileOutputStream: void write(byte[])>($r7);
        virtualinvoke r2.<java.io.FileOutputStream: void close()>();
        goto label2;

     label1:
        $r8 := @caughtexception;
        r3 = $r8;
        staticinvoke <org.apache.tomcat.util.http.fileupload.IOUtils: void closeQuietly(java.io.Closeable)>(r2);
        throw r3;

     label2:
        staticinvoke <org.apache.tomcat.util.http.fileupload.IOUtils: void closeQuietly(java.io.Closeable)>(r2);
        goto label8;

     label3:
        r9 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.io.File getStoreLocation()>();
        if r9 == null goto label7;

        $l0 = virtualinvoke r9.<java.io.File: long length()>();
        r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: long size> = $l0;
        $z1 = virtualinvoke r9.<java.io.File: boolean renameTo(java.io.File)>(r1);
        if $z1 != 0 goto label8;

        r10 = null;
        r4 = null;

     label4:
        $r11 = new java.io.BufferedInputStream;
        $r12 = new java.io.FileInputStream;
        specialinvoke $r12.<java.io.FileInputStream: void <init>(java.io.File)>(r9);
        specialinvoke $r11.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r12);
        r10 = $r11;
        $r13 = new java.io.BufferedOutputStream;
        $r14 = new java.io.FileOutputStream;
        specialinvoke $r14.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);
        specialinvoke $r13.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r14);
        r4 = $r13;
        staticinvoke <org.apache.tomcat.util.http.fileupload.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r10, r4);
        virtualinvoke r4.<java.io.BufferedOutputStream: void close()>();
        goto label6;

     label5:
        $r15 := @caughtexception;
        r5 = $r15;
        staticinvoke <org.apache.tomcat.util.http.fileupload.IOUtils: void closeQuietly(java.io.Closeable)>(r10);
        staticinvoke <org.apache.tomcat.util.http.fileupload.IOUtils: void closeQuietly(java.io.Closeable)>(r4);
        throw r5;

     label6:
        staticinvoke <org.apache.tomcat.util.http.fileupload.IOUtils: void closeQuietly(java.io.Closeable)>(r10);
        staticinvoke <org.apache.tomcat.util.http.fileupload.IOUtils: void closeQuietly(java.io.Closeable)>(r4);
        goto label8;

     label7:
        $r16 = new org.apache.tomcat.util.http.fileupload.FileUploadException;
        specialinvoke $r16.<org.apache.tomcat.util.http.fileupload.FileUploadException: void <init>(java.lang.String)>("Cannot write uploaded file to disk!");
        throw $r16;

     label8:
        return;

        catch java.lang.Throwable from label0 to label1 with label1;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public void delete()
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        java.io.File r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: byte[] cachedContent> = null;
        r1 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.io.File getStoreLocation()>();
        if r1 == null goto label0;

        $z0 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: boolean isInMemory()>();
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();
        if $z1 == 0 goto label0;

        virtualinvoke r1.<java.io.File: boolean delete()>();

     label0:
        return;
    }

    public java.lang.String getFieldName()
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        java.lang.String $r1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        $r1 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.lang.String fieldName>;
        return $r1;
    }

    public void setFieldName(java.lang.String)
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        java.lang.String r1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        r1 := @parameter0: java.lang.String;
        r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.lang.String fieldName> = r1;
        return;
    }

    public boolean isFormField()
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        $z0 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: boolean isFormField>;
        return $z0;
    }

    public void setFormField(boolean)
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        boolean z0;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        z0 := @parameter0: boolean;
        r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: boolean isFormField> = z0;
        return;
    }

    public java.io.OutputStream getOutputStream() throws java.io.IOException
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        java.io.File r1;
        org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream $r2, $r3, $r4;
        int $i0;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        $r3 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream dfos>;
        if $r3 != null goto label0;

        r1 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.io.File getTempFile()>();
        $r2 = new org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream;
        $i0 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: int sizeThreshold>;
        specialinvoke $r2.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: void <init>(int,java.io.File)>($i0, r1);
        r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream dfos> = $r2;

     label0:
        $r4 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream dfos>;
        return $r4;
    }

    public java.io.File getStoreLocation()
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream $r1, $r2;
        boolean $z0;
        java.io.File $r3;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        $r1 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream dfos>;
        if $r1 != null goto label0;

        return null;

     label0:
        $z0 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: boolean isInMemory()>();
        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream dfos>;
        $r3 = virtualinvoke $r2.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.io.File getFile()>();
        return $r3;
    }

    protected void finalize()
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        java.io.File r1;
        org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        $r2 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream dfos>;
        if $r2 == null goto label0;

        $r3 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream dfos>;
        $z0 = virtualinvoke $r3.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: boolean isInMemory()>();
        if $z0 == 0 goto label1;

     label0:
        return;

     label1:
        $r4 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream dfos>;
        r1 = virtualinvoke $r4.<org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream: java.io.File getFile()>();
        if r1 == null goto label2;

        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();
        if $z1 == 0 goto label2;

        virtualinvoke r1.<java.io.File: boolean delete()>();

     label2:
        return;
    }

    protected java.io.File getTempFile()
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        java.io.File r1, $r4, $r5, $r9, $r10;
        java.lang.String $r2, r3, $r6, $r8;
        java.lang.Object[] $r7;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        $r4 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.io.File tempFile>;
        if $r4 != null goto label1;

        r1 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.io.File repository>;
        if r1 != null goto label0;

        $r5 = new java.io.File;
        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");
        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r6);
        r1 = $r5;

     label0:
        $r7 = newarray (java.lang.Object)[2];
        $r2 = <org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.lang.String UID>;
        $r7[0] = $r2;
        $r8 = staticinvoke <org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.lang.String getUniqueId()>();
        $r7[1] = $r8;
        r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("upload_%s_%s.tmp", $r7);
        $r9 = new java.io.File;
        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, r3);
        r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.io.File tempFile> = $r9;

     label1:
        $r10 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.io.File tempFile>;
        return $r10;
    }

    private static java.lang.String getUniqueId()
    {
        int i0, i1, $i2;
        java.lang.String r0, $r4;
        java.util.concurrent.atomic.AtomicInteger $r1;
        java.lang.StringBuilder $r2, $r3;

        i0 = 100000000;
        $r1 = <org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.util.concurrent.atomic.AtomicInteger COUNTER>;
        i1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
        r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);
        if i1 >= 100000000 goto label0;

        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("00000000");
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();
        r0 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i2);

     label0:
        return r0;
    }

    public java.lang.String toString()
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        java.lang.Object[] $r1;
        java.lang.String $r2, $r6, $r7;
        java.io.File $r3;
        long $l0;
        java.lang.Long $r4;
        boolean $z0;
        java.lang.Boolean $r5;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        $r1 = newarray (java.lang.Object)[5];
        $r2 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.lang.String getName()>();
        $r1[0] = $r2;
        $r3 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.io.File getStoreLocation()>();
        $r1[1] = $r3;
        $l0 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: long getSize()>();
        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);
        $r1[2] = $r4;
        $z0 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: boolean isFormField()>();
        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);
        $r1[3] = $r5;
        $r6 = virtualinvoke r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.lang.String getFieldName()>();
        $r1[4] = $r6;
        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("name=%s, StoreLocation=%s, size=%s bytes, isFormField=%s, FieldName=%s", $r1);
        return $r7;
    }

    public org.apache.tomcat.util.http.fileupload.FileItemHeaders getHeaders()
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        org.apache.tomcat.util.http.fileupload.FileItemHeaders $r1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        $r1 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.FileItemHeaders headers>;
        return $r1;
    }

    public void setHeaders(org.apache.tomcat.util.http.fileupload.FileItemHeaders)
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        org.apache.tomcat.util.http.fileupload.FileItemHeaders r1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        r1 := @parameter0: org.apache.tomcat.util.http.fileupload.FileItemHeaders;
        r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: org.apache.tomcat.util.http.fileupload.FileItemHeaders headers> = r1;
        return;
    }

    public java.lang.String getDefaultCharset()
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        java.lang.String $r1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        $r1 = r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.lang.String defaultCharset>;
        return $r1;
    }

    public void setDefaultCharset(java.lang.String)
    {
        org.apache.tomcat.util.http.fileupload.disk.DiskFileItem r0;
        java.lang.String r1;

        r0 := @this: org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
        r1 := @parameter0: java.lang.String;
        r0.<org.apache.tomcat.util.http.fileupload.disk.DiskFileItem: java.lang.String defaultCharset> = r1;
        return;
    }
}
