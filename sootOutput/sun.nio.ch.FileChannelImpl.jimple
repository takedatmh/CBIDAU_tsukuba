public class sun.nio.ch.FileChannelImpl extends java.nio.channels.FileChannel
{
    private static final long allocationGranularity;
    private final sun.nio.ch.FileDispatcher nd;
    private final java.io.FileDescriptor fd;
    private final boolean writable;
    private final boolean readable;
    private final boolean append;
    private final java.lang.Object parent;
    private final java.lang.String path;
    private final sun.nio.ch.NativeThreadSet threads;
    private final java.lang.Object positionLock;
    private static volatile boolean transferSupported;
    private static volatile boolean pipeSupported;
    private static volatile boolean fileSupported;
    private static final long MAPPED_TRANSFER_SIZE;
    private static final int TRANSFER_SIZE;
    private static final int MAP_RO;
    private static final int MAP_RW;
    private static final int MAP_PV;
    private volatile sun.nio.ch.FileLockTable fileLockTable;
    private static boolean isSharedFileLockTable;
    private static volatile boolean propertyChecked;
    static final boolean $assertionsDisabled;

    private void <init>(java.io.FileDescriptor, java.lang.String, boolean, boolean, boolean, java.lang.Object)
    {
        sun.nio.ch.FileChannelImpl r0;
        java.io.FileDescriptor r1;
        java.lang.String r2;
        boolean z0, z1, z2;
        java.lang.Object r3, $r5;
        sun.nio.ch.NativeThreadSet $r4;
        sun.nio.ch.FileDispatcherImpl $r6;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        r2 := @parameter1: java.lang.String;
        z0 := @parameter2: boolean;
        z1 := @parameter3: boolean;
        z2 := @parameter4: boolean;
        r3 := @parameter5: java.lang.Object;
        specialinvoke r0.<java.nio.channels.FileChannel: void <init>()>();
        $r4 = new sun.nio.ch.NativeThreadSet;
        specialinvoke $r4.<sun.nio.ch.NativeThreadSet: void <init>(int)>(2);
        r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads> = $r4;
        $r5 = new java.lang.Object;
        specialinvoke $r5.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.FileChannelImpl: java.lang.Object positionLock> = $r5;
        r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd> = r1;
        r0.<sun.nio.ch.FileChannelImpl: boolean readable> = z0;
        r0.<sun.nio.ch.FileChannelImpl: boolean writable> = z1;
        r0.<sun.nio.ch.FileChannelImpl: boolean append> = z2;
        r0.<sun.nio.ch.FileChannelImpl: java.lang.Object parent> = r3;
        r0.<sun.nio.ch.FileChannelImpl: java.lang.String path> = r2;
        $r6 = new sun.nio.ch.FileDispatcherImpl;
        specialinvoke $r6.<sun.nio.ch.FileDispatcherImpl: void <init>(boolean)>(z2);
        r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd> = $r6;
        return;
    }

    public static java.nio.channels.FileChannel open(java.io.FileDescriptor, java.lang.String, boolean, boolean, java.lang.Object)
    {
        java.io.FileDescriptor r0;
        java.lang.String r1;
        boolean z0, z1;
        java.lang.Object r2;
        sun.nio.ch.FileChannelImpl $r3;

        r0 := @parameter0: java.io.FileDescriptor;
        r1 := @parameter1: java.lang.String;
        z0 := @parameter2: boolean;
        z1 := @parameter3: boolean;
        r2 := @parameter4: java.lang.Object;
        $r3 = new sun.nio.ch.FileChannelImpl;
        specialinvoke $r3.<sun.nio.ch.FileChannelImpl: void <init>(java.io.FileDescriptor,java.lang.String,boolean,boolean,boolean,java.lang.Object)>(r0, r1, z0, z1, 0, r2);
        return $r3;
    }

    public static java.nio.channels.FileChannel open(java.io.FileDescriptor, java.lang.String, boolean, boolean, boolean, java.lang.Object)
    {
        java.io.FileDescriptor r0;
        java.lang.String r1;
        boolean z0, z1, z2;
        java.lang.Object r2;
        sun.nio.ch.FileChannelImpl $r3;

        r0 := @parameter0: java.io.FileDescriptor;
        r1 := @parameter1: java.lang.String;
        z0 := @parameter2: boolean;
        z1 := @parameter3: boolean;
        z2 := @parameter4: boolean;
        r2 := @parameter5: java.lang.Object;
        $r3 = new sun.nio.ch.FileChannelImpl;
        specialinvoke $r3.<sun.nio.ch.FileChannelImpl: void <init>(java.io.FileDescriptor,java.lang.String,boolean,boolean,boolean,java.lang.Object)>(r0, r1, z0, z1, z2, r2);
        return $r3;
    }

    private void ensureOpen() throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        boolean $z0;
        java.nio.channels.ClosedChannelException $r1;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        $z0 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label0;

        $r1 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r1.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r1;

     label0:
        return;
    }

    protected void implCloseChannel() throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        java.util.Iterator r1;
        java.nio.channels.FileLock r2, r3;
        java.lang.Throwable r4, $r13;
        sun.nio.ch.FileLockTable $r5, $r6;
        java.util.List $r7;
        boolean $z0, $z1;
        java.lang.Object $r8, $r17, $r18;
        sun.nio.ch.FileDispatcher $r10, $r14, $r20;
        java.io.FileDescriptor $r11, $r15, $r21;
        long $l0, $l1;
        sun.nio.ch.FileLockImpl $r12;
        sun.nio.ch.NativeThreadSet $r16;
        java.io.Closeable $r19;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        $r5 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileLockTable fileLockTable>;
        if $r5 == null goto label8;

        $r6 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileLockTable fileLockTable>;
        $r7 = virtualinvoke $r6.<sun.nio.ch.FileLockTable: java.util.List removeAll()>();
        r1 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label8;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        r2 = (java.nio.channels.FileLock) $r8;
        r3 = r2;
        entermonitor r2;

     label1:
        $z1 = virtualinvoke r2.<java.nio.channels.FileLock: boolean isValid()>();
        if $z1 == 0 goto label2;

        $r10 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r11 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        $l0 = virtualinvoke r2.<java.nio.channels.FileLock: long position()>();
        $l1 = virtualinvoke r2.<java.nio.channels.FileLock: long size()>();
        virtualinvoke $r10.<sun.nio.ch.FileDispatcher: void release(java.io.FileDescriptor,long,long)>($r11, $l0, $l1);
        $r12 = (sun.nio.ch.FileLockImpl) r2;
        virtualinvoke $r12.<sun.nio.ch.FileLockImpl: void invalidate()>();

     label2:
        exitmonitor r3;

     label3:
        goto label7;

     label4:
        $r13 := @caughtexception;

     label5:
        r4 = $r13;
        exitmonitor r3;

     label6:
        throw r4;

     label7:
        goto label0;

     label8:
        $r14 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r15 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        virtualinvoke $r14.<sun.nio.ch.FileDispatcher: void preClose(java.io.FileDescriptor)>($r15);
        $r16 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r16.<sun.nio.ch.NativeThreadSet: void signalAndWait()>();
        $r17 = r0.<sun.nio.ch.FileChannelImpl: java.lang.Object parent>;
        if $r17 == null goto label9;

        $r18 = r0.<sun.nio.ch.FileChannelImpl: java.lang.Object parent>;
        $r19 = (java.io.Closeable) $r18;
        interfaceinvoke $r19.<java.io.Closeable: void close()>();
        goto label10;

     label9:
        $r20 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r21 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        virtualinvoke $r20.<sun.nio.ch.FileDispatcher: void close(java.io.FileDescriptor)>($r21);

     label10:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int read(java.nio.ByteBuffer) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        java.nio.ByteBuffer r1;
        java.lang.Object r2, r3, $r7;
        int i0, i1, i4;
        byte b2;
        java.lang.Throwable r4, r5, $r20, $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.nio.channels.NonReadableChannelException $r6;
        java.lang.String $r8;
        sun.nio.ch.NativeThreadSet $r9, $r10, $r16, $r21;
        long $l3, $l5, $l6;
        java.lang.AssertionError $r13, $r19, $r24;
        java.io.FileDescriptor $r14;
        sun.nio.ch.FileDispatcher $r15;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        $z0 = r0.<sun.nio.ch.FileChannelImpl: boolean readable>;
        if $z0 != 0 goto label0;

        $r6 = new java.nio.channels.NonReadableChannelException;
        specialinvoke $r6.<java.nio.channels.NonReadableChannelException: void <init>()>();
        throw $r6;

     label0:
        $r7 = r0.<sun.nio.ch.FileChannelImpl: java.lang.Object positionLock>;
        r2 = $r7;
        entermonitor $r7;

     label1:
        i0 = 0;
        i1 = -1;
        $r8 = r0.<sun.nio.ch.FileChannelImpl: java.lang.String path>;
        r3 = staticinvoke <sun.misc.IoTrace: java.lang.Object fileReadBegin(java.lang.String)>($r8);

     label2:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void begin()>();
        $r9 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i1 = virtualinvoke $r9.<sun.nio.ch.NativeThreadSet: int add()>();
        $z1 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label10;

        b2 = 0;

     label3:
        $r10 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r10.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        if i0 <= 0 goto label4;

        $l3 = (long) i0;
        goto label5;

     label4:
        $l3 = 0L;

     label5:
        staticinvoke <sun.misc.IoTrace: void fileReadEnd(java.lang.Object,long)>(r3, $l3);
        if i0 <= 0 goto label6;

        $z2 = 1;
        goto label7;

     label6:
        $z2 = 0;

     label7:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z2);
        $z3 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z3 != 0 goto label8;

        $z4 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z4 != 0 goto label8;

        $r13 = new java.lang.AssertionError;
        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();
        throw $r13;

     label8:
        exitmonitor r2;

     label9:
        return b2;

     label10:
        $r14 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        $r15 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        i0 = staticinvoke <sun.nio.ch.IOUtil: int read(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>($r14, r1, -1L, $r15);
        if i0 != -3 goto label11;

        $z5 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z5 != 0 goto label10;

     label11:
        i4 = staticinvoke <sun.nio.ch.IOStatus: int normalize(int)>(i0);

     label12:
        $r16 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r16.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        if i0 <= 0 goto label13;

        $l5 = (long) i0;
        goto label14;

     label13:
        $l5 = 0L;

     label14:
        staticinvoke <sun.misc.IoTrace: void fileReadEnd(java.lang.Object,long)>(r3, $l5);
        if i0 <= 0 goto label15;

        $z6 = 1;
        goto label16;

     label15:
        $z6 = 0;

     label16:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z6);
        $z7 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z7 != 0 goto label17;

        $z8 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z8 != 0 goto label17;

        $r19 = new java.lang.AssertionError;
        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();
        throw $r19;

     label17:
        exitmonitor r2;

     label18:
        return i4;

     label19:
        $r20 := @caughtexception;

     label20:
        r4 = $r20;

     label21:
        $r21 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r21.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        if i0 <= 0 goto label22;

        $l6 = (long) i0;
        goto label23;

     label22:
        $l6 = 0L;

     label23:
        staticinvoke <sun.misc.IoTrace: void fileReadEnd(java.lang.Object,long)>(r3, $l6);
        if i0 <= 0 goto label24;

        $z9 = 1;
        goto label25;

     label24:
        $z9 = 0;

     label25:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z9);
        $z10 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z10 != 0 goto label26;

        $z11 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z11 != 0 goto label26;

        $r24 = new java.lang.AssertionError;
        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();
        throw $r24;

     label26:
        throw r4;

     label27:
        $r25 := @caughtexception;
        r5 = $r25;
        exitmonitor r2;

     label28:
        throw r5;

        catch java.lang.Throwable from label2 to label3 with label19;
        catch java.lang.Throwable from label10 to label12 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label1 to label9 with label27;
        catch java.lang.Throwable from label10 to label18 with label27;
        catch java.lang.Throwable from label20 to label28 with label27;
    }

    public long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1, i3, $i5, $i6;
        java.lang.Object r2, r3, $r8;
        long l2, l4, $l8, l11, $l13, $l16;
        java.lang.Throwable r4, r5, $r21, $r26;
        java.lang.IndexOutOfBoundsException $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.nio.channels.NonReadableChannelException $r7;
        java.lang.String $r9;
        sun.nio.ch.NativeThreadSet $r10, $r11, $r17, $r22;
        byte $b7, $b9, $b10, $b12, $b14, $b15, $b17;
        java.lang.AssertionError $r14, $r20, $r25;
        java.io.FileDescriptor $r15;
        sun.nio.ch.FileDispatcher $r16;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i0 < 0 goto label0;

        if i1 < 0 goto label0;

        $i5 = lengthof r1;
        $i6 = $i5 - i1;
        if i0 <= $i6 goto label1;

     label0:
        $r6 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r6.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r6;

     label1:
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        $z0 = r0.<sun.nio.ch.FileChannelImpl: boolean readable>;
        if $z0 != 0 goto label2;

        $r7 = new java.nio.channels.NonReadableChannelException;
        specialinvoke $r7.<java.nio.channels.NonReadableChannelException: void <init>()>();
        throw $r7;

     label2:
        $r8 = r0.<sun.nio.ch.FileChannelImpl: java.lang.Object positionLock>;
        r2 = $r8;
        entermonitor $r8;

     label3:
        l2 = 0L;
        i3 = -1;
        $r9 = r0.<sun.nio.ch.FileChannelImpl: java.lang.String path>;
        r3 = staticinvoke <sun.misc.IoTrace: java.lang.Object fileReadBegin(java.lang.String)>($r9);

     label4:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void begin()>();
        $r10 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i3 = virtualinvoke $r10.<sun.nio.ch.NativeThreadSet: int add()>();
        $z1 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label12;

        l4 = 0L;

     label5:
        $r11 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r11.<sun.nio.ch.NativeThreadSet: void remove(int)>(i3);
        $b7 = l2 cmp 0L;
        if $b7 <= 0 goto label6;

        $l8 = l2;
        goto label7;

     label6:
        $l8 = 0L;

     label7:
        staticinvoke <sun.misc.IoTrace: void fileReadEnd(java.lang.Object,long)>(r3, $l8);
        $b9 = l2 cmp 0L;
        if $b9 <= 0 goto label8;

        $z2 = 1;
        goto label9;

     label8:
        $z2 = 0;

     label9:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z2);
        $z3 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z3 != 0 goto label10;

        $z4 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l2);
        if $z4 != 0 goto label10;

        $r14 = new java.lang.AssertionError;
        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();
        throw $r14;

     label10:
        exitmonitor r2;

     label11:
        return l4;

     label12:
        $r15 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        $r16 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        l2 = staticinvoke <sun.nio.ch.IOUtil: long read(java.io.FileDescriptor,java.nio.ByteBuffer[],int,int,sun.nio.ch.NativeDispatcher)>($r15, r1, i0, i1, $r16);
        $b10 = l2 cmp -3L;
        if $b10 != 0 goto label13;

        $z5 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z5 != 0 goto label12;

     label13:
        l11 = staticinvoke <sun.nio.ch.IOStatus: long normalize(long)>(l2);

     label14:
        $r17 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r17.<sun.nio.ch.NativeThreadSet: void remove(int)>(i3);
        $b12 = l2 cmp 0L;
        if $b12 <= 0 goto label15;

        $l13 = l2;
        goto label16;

     label15:
        $l13 = 0L;

     label16:
        staticinvoke <sun.misc.IoTrace: void fileReadEnd(java.lang.Object,long)>(r3, $l13);
        $b14 = l2 cmp 0L;
        if $b14 <= 0 goto label17;

        $z6 = 1;
        goto label18;

     label17:
        $z6 = 0;

     label18:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z6);
        $z7 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z7 != 0 goto label19;

        $z8 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l2);
        if $z8 != 0 goto label19;

        $r20 = new java.lang.AssertionError;
        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();
        throw $r20;

     label19:
        exitmonitor r2;

     label20:
        return l11;

     label21:
        $r21 := @caughtexception;

     label22:
        r4 = $r21;

     label23:
        $r22 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r22.<sun.nio.ch.NativeThreadSet: void remove(int)>(i3);
        $b15 = l2 cmp 0L;
        if $b15 <= 0 goto label24;

        $l16 = l2;
        goto label25;

     label24:
        $l16 = 0L;

     label25:
        staticinvoke <sun.misc.IoTrace: void fileReadEnd(java.lang.Object,long)>(r3, $l16);
        $b17 = l2 cmp 0L;
        if $b17 <= 0 goto label26;

        $z9 = 1;
        goto label27;

     label26:
        $z9 = 0;

     label27:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z9);
        $z10 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z10 != 0 goto label28;

        $z11 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l2);
        if $z11 != 0 goto label28;

        $r25 = new java.lang.AssertionError;
        specialinvoke $r25.<java.lang.AssertionError: void <init>()>();
        throw $r25;

     label28:
        throw r4;

     label29:
        $r26 := @caughtexception;
        r5 = $r26;
        exitmonitor r2;

     label30:
        throw r5;

        catch java.lang.Throwable from label4 to label5 with label21;
        catch java.lang.Throwable from label12 to label14 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
        catch java.lang.Throwable from label3 to label11 with label29;
        catch java.lang.Throwable from label12 to label20 with label29;
        catch java.lang.Throwable from label22 to label30 with label29;
    }

    public int write(java.nio.ByteBuffer) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        java.nio.ByteBuffer r1;
        java.lang.Object r2, r3, $r7;
        int i0, i1, i4;
        byte b2;
        java.lang.Throwable r4, r5, $r20, $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.nio.channels.NonWritableChannelException $r6;
        java.lang.String $r8;
        sun.nio.ch.NativeThreadSet $r9, $r10, $r16, $r21;
        long $l3, $l5, $l6;
        java.lang.AssertionError $r13, $r19, $r24;
        java.io.FileDescriptor $r14;
        sun.nio.ch.FileDispatcher $r15;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        $z0 = r0.<sun.nio.ch.FileChannelImpl: boolean writable>;
        if $z0 != 0 goto label0;

        $r6 = new java.nio.channels.NonWritableChannelException;
        specialinvoke $r6.<java.nio.channels.NonWritableChannelException: void <init>()>();
        throw $r6;

     label0:
        $r7 = r0.<sun.nio.ch.FileChannelImpl: java.lang.Object positionLock>;
        r2 = $r7;
        entermonitor $r7;

     label1:
        i0 = 0;
        i1 = -1;
        $r8 = r0.<sun.nio.ch.FileChannelImpl: java.lang.String path>;
        r3 = staticinvoke <sun.misc.IoTrace: java.lang.Object fileWriteBegin(java.lang.String)>($r8);

     label2:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void begin()>();
        $r9 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i1 = virtualinvoke $r9.<sun.nio.ch.NativeThreadSet: int add()>();
        $z1 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label10;

        b2 = 0;

     label3:
        $r10 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r10.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        if i0 <= 0 goto label4;

        $z2 = 1;
        goto label5;

     label4:
        $z2 = 0;

     label5:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z2);
        if i0 <= 0 goto label6;

        $l3 = (long) i0;
        goto label7;

     label6:
        $l3 = 0L;

     label7:
        staticinvoke <sun.misc.IoTrace: void fileWriteEnd(java.lang.Object,long)>(r3, $l3);
        $z3 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z3 != 0 goto label8;

        $z4 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z4 != 0 goto label8;

        $r13 = new java.lang.AssertionError;
        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();
        throw $r13;

     label8:
        exitmonitor r2;

     label9:
        return b2;

     label10:
        $r14 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        $r15 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        i0 = staticinvoke <sun.nio.ch.IOUtil: int write(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>($r14, r1, -1L, $r15);
        if i0 != -3 goto label11;

        $z5 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z5 != 0 goto label10;

     label11:
        i4 = staticinvoke <sun.nio.ch.IOStatus: int normalize(int)>(i0);

     label12:
        $r16 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r16.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        if i0 <= 0 goto label13;

        $z6 = 1;
        goto label14;

     label13:
        $z6 = 0;

     label14:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z6);
        if i0 <= 0 goto label15;

        $l5 = (long) i0;
        goto label16;

     label15:
        $l5 = 0L;

     label16:
        staticinvoke <sun.misc.IoTrace: void fileWriteEnd(java.lang.Object,long)>(r3, $l5);
        $z7 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z7 != 0 goto label17;

        $z8 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z8 != 0 goto label17;

        $r19 = new java.lang.AssertionError;
        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();
        throw $r19;

     label17:
        exitmonitor r2;

     label18:
        return i4;

     label19:
        $r20 := @caughtexception;

     label20:
        r4 = $r20;

     label21:
        $r21 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r21.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        if i0 <= 0 goto label22;

        $z9 = 1;
        goto label23;

     label22:
        $z9 = 0;

     label23:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z9);
        if i0 <= 0 goto label24;

        $l6 = (long) i0;
        goto label25;

     label24:
        $l6 = 0L;

     label25:
        staticinvoke <sun.misc.IoTrace: void fileWriteEnd(java.lang.Object,long)>(r3, $l6);
        $z10 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z10 != 0 goto label26;

        $z11 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z11 != 0 goto label26;

        $r24 = new java.lang.AssertionError;
        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();
        throw $r24;

     label26:
        throw r4;

     label27:
        $r25 := @caughtexception;
        r5 = $r25;
        exitmonitor r2;

     label28:
        throw r5;

        catch java.lang.Throwable from label2 to label3 with label19;
        catch java.lang.Throwable from label10 to label12 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label1 to label9 with label27;
        catch java.lang.Throwable from label10 to label18 with label27;
        catch java.lang.Throwable from label20 to label28 with label27;
    }

    public long write(java.nio.ByteBuffer[], int, int) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1, i3, $i5, $i6;
        java.lang.Object r2, r3, $r8;
        long l2, l4, $l8, l11, $l13, $l16;
        java.lang.Throwable r4, r5, $r21, $r26;
        java.lang.IndexOutOfBoundsException $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.nio.channels.NonWritableChannelException $r7;
        java.lang.String $r9;
        sun.nio.ch.NativeThreadSet $r10, $r11, $r17, $r22;
        byte $b7, $b9, $b10, $b12, $b14, $b15, $b17;
        java.lang.AssertionError $r14, $r20, $r25;
        java.io.FileDescriptor $r15;
        sun.nio.ch.FileDispatcher $r16;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i0 < 0 goto label0;

        if i1 < 0 goto label0;

        $i5 = lengthof r1;
        $i6 = $i5 - i1;
        if i0 <= $i6 goto label1;

     label0:
        $r6 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r6.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r6;

     label1:
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        $z0 = r0.<sun.nio.ch.FileChannelImpl: boolean writable>;
        if $z0 != 0 goto label2;

        $r7 = new java.nio.channels.NonWritableChannelException;
        specialinvoke $r7.<java.nio.channels.NonWritableChannelException: void <init>()>();
        throw $r7;

     label2:
        $r8 = r0.<sun.nio.ch.FileChannelImpl: java.lang.Object positionLock>;
        r2 = $r8;
        entermonitor $r8;

     label3:
        l2 = 0L;
        i3 = -1;
        $r9 = r0.<sun.nio.ch.FileChannelImpl: java.lang.String path>;
        r3 = staticinvoke <sun.misc.IoTrace: java.lang.Object fileWriteBegin(java.lang.String)>($r9);

     label4:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void begin()>();
        $r10 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i3 = virtualinvoke $r10.<sun.nio.ch.NativeThreadSet: int add()>();
        $z1 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label12;

        l4 = 0L;

     label5:
        $r11 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r11.<sun.nio.ch.NativeThreadSet: void remove(int)>(i3);
        $b7 = l2 cmp 0L;
        if $b7 <= 0 goto label6;

        $l8 = l2;
        goto label7;

     label6:
        $l8 = 0L;

     label7:
        staticinvoke <sun.misc.IoTrace: void fileWriteEnd(java.lang.Object,long)>(r3, $l8);
        $b9 = l2 cmp 0L;
        if $b9 <= 0 goto label8;

        $z2 = 1;
        goto label9;

     label8:
        $z2 = 0;

     label9:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z2);
        $z3 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z3 != 0 goto label10;

        $z4 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l2);
        if $z4 != 0 goto label10;

        $r14 = new java.lang.AssertionError;
        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();
        throw $r14;

     label10:
        exitmonitor r2;

     label11:
        return l4;

     label12:
        $r15 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        $r16 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        l2 = staticinvoke <sun.nio.ch.IOUtil: long write(java.io.FileDescriptor,java.nio.ByteBuffer[],int,int,sun.nio.ch.NativeDispatcher)>($r15, r1, i0, i1, $r16);
        $b10 = l2 cmp -3L;
        if $b10 != 0 goto label13;

        $z5 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z5 != 0 goto label12;

     label13:
        l11 = staticinvoke <sun.nio.ch.IOStatus: long normalize(long)>(l2);

     label14:
        $r17 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r17.<sun.nio.ch.NativeThreadSet: void remove(int)>(i3);
        $b12 = l2 cmp 0L;
        if $b12 <= 0 goto label15;

        $l13 = l2;
        goto label16;

     label15:
        $l13 = 0L;

     label16:
        staticinvoke <sun.misc.IoTrace: void fileWriteEnd(java.lang.Object,long)>(r3, $l13);
        $b14 = l2 cmp 0L;
        if $b14 <= 0 goto label17;

        $z6 = 1;
        goto label18;

     label17:
        $z6 = 0;

     label18:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z6);
        $z7 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z7 != 0 goto label19;

        $z8 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l2);
        if $z8 != 0 goto label19;

        $r20 = new java.lang.AssertionError;
        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();
        throw $r20;

     label19:
        exitmonitor r2;

     label20:
        return l11;

     label21:
        $r21 := @caughtexception;

     label22:
        r4 = $r21;

     label23:
        $r22 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r22.<sun.nio.ch.NativeThreadSet: void remove(int)>(i3);
        $b15 = l2 cmp 0L;
        if $b15 <= 0 goto label24;

        $l16 = l2;
        goto label25;

     label24:
        $l16 = 0L;

     label25:
        staticinvoke <sun.misc.IoTrace: void fileWriteEnd(java.lang.Object,long)>(r3, $l16);
        $b17 = l2 cmp 0L;
        if $b17 <= 0 goto label26;

        $z9 = 1;
        goto label27;

     label26:
        $z9 = 0;

     label27:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z9);
        $z10 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z10 != 0 goto label28;

        $z11 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l2);
        if $z11 != 0 goto label28;

        $r25 = new java.lang.AssertionError;
        specialinvoke $r25.<java.lang.AssertionError: void <init>()>();
        throw $r25;

     label28:
        throw r4;

     label29:
        $r26 := @caughtexception;
        r5 = $r26;
        exitmonitor r2;

     label30:
        throw r5;

        catch java.lang.Throwable from label4 to label5 with label21;
        catch java.lang.Throwable from label12 to label14 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
        catch java.lang.Throwable from label3 to label11 with label29;
        catch java.lang.Throwable from label12 to label20 with label29;
        catch java.lang.Throwable from label22 to label30 with label29;
    }

    public long position() throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        java.lang.Object r1, $r4;
        long l0, l2, $l4, l6;
        int i1;
        java.lang.Throwable r2, r3, $r15, $r19;
        sun.nio.ch.NativeThreadSet $r5, $r6, $r12, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        byte $b3, $b5, $b7, $b8;
        java.lang.AssertionError $r8, $r14, $r18;
        sun.nio.ch.FileDispatcher $r9;
        java.io.FileDescriptor $r10, $r11;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        $r4 = r0.<sun.nio.ch.FileChannelImpl: java.lang.Object positionLock>;
        r1 = $r4;
        entermonitor $r4;

     label0:
        l0 = -1L;
        i1 = -1;

     label1:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void begin()>();
        $r5 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i1 = virtualinvoke $r5.<sun.nio.ch.NativeThreadSet: int add()>();
        $z0 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label7;

        l2 = 0L;

     label2:
        $r6 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r6.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        $b3 = l0 cmp -1L;
        if $b3 <= 0 goto label3;

        $z1 = 1;
        goto label4;

     label3:
        $z1 = 0;

     label4:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z1);
        $z2 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z2 != 0 goto label5;

        $z3 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l0);
        if $z3 != 0 goto label5;

        $r8 = new java.lang.AssertionError;
        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();
        throw $r8;

     label5:
        exitmonitor r1;

     label6:
        return l2;

     label7:
        $z4 = r0.<sun.nio.ch.FileChannelImpl: boolean append>;
        if $z4 == 0 goto label8;

        $r9 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r10 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        $l4 = virtualinvoke $r9.<sun.nio.ch.FileDispatcher: long size(java.io.FileDescriptor)>($r10);
        goto label9;

     label8:
        $r11 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        $l4 = specialinvoke r0.<sun.nio.ch.FileChannelImpl: long position0(java.io.FileDescriptor,long)>($r11, -1L);

     label9:
        l0 = $l4;
        $b5 = l0 cmp -3L;
        if $b5 != 0 goto label10;

        $z5 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z5 != 0 goto label7;

     label10:
        l6 = staticinvoke <sun.nio.ch.IOStatus: long normalize(long)>(l0);

     label11:
        $r12 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r12.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        $b7 = l0 cmp -1L;
        if $b7 <= 0 goto label12;

        $z6 = 1;
        goto label13;

     label12:
        $z6 = 0;

     label13:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z6);
        $z7 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z7 != 0 goto label14;

        $z8 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l0);
        if $z8 != 0 goto label14;

        $r14 = new java.lang.AssertionError;
        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();
        throw $r14;

     label14:
        exitmonitor r1;

     label15:
        return l6;

     label16:
        $r15 := @caughtexception;

     label17:
        r2 = $r15;

     label18:
        $r16 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r16.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        $b8 = l0 cmp -1L;
        if $b8 <= 0 goto label19;

        $z9 = 1;
        goto label20;

     label19:
        $z9 = 0;

     label20:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z9);
        $z10 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z10 != 0 goto label21;

        $z11 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l0);
        if $z11 != 0 goto label21;

        $r18 = new java.lang.AssertionError;
        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();
        throw $r18;

     label21:
        throw r2;

     label22:
        $r19 := @caughtexception;
        r3 = $r19;
        exitmonitor r1;

     label23:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label16;
        catch java.lang.Throwable from label7 to label11 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label0 to label6 with label22;
        catch java.lang.Throwable from label7 to label15 with label22;
        catch java.lang.Throwable from label17 to label23 with label22;
    }

    public java.nio.channels.FileChannel position(long) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0, r11;
        long l0, l1;
        java.lang.Object r1, $r5;
        int i2;
        null_type n0;
        java.lang.Throwable r2, r3, $r15, $r19;
        byte $b3, $b4, $b5, $b6, $b7;
        java.lang.IllegalArgumentException $r4;
        sun.nio.ch.NativeThreadSet $r6, $r7, $r12, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.AssertionError $r9, $r14, $r18;
        java.io.FileDescriptor $r10;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        l0 := @parameter0: long;
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        $b3 = l0 cmp 0L;
        if $b3 >= 0 goto label0;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r4;

     label0:
        $r5 = r0.<sun.nio.ch.FileChannelImpl: java.lang.Object positionLock>;
        r1 = $r5;
        entermonitor $r5;

     label1:
        l1 = -1L;
        i2 = -1;

     label2:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void begin()>();
        $r6 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i2 = virtualinvoke $r6.<sun.nio.ch.NativeThreadSet: int add()>();
        $z0 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label8;

        n0 = null;

     label3:
        $r7 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r7.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);
        $b4 = l1 cmp -1L;
        if $b4 <= 0 goto label4;

        $z1 = 1;
        goto label5;

     label4:
        $z1 = 0;

     label5:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z1);
        $z2 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z2 != 0 goto label6;

        $z3 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l1);
        if $z3 != 0 goto label6;

        $r9 = new java.lang.AssertionError;
        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();
        throw $r9;

     label6:
        exitmonitor r1;

     label7:
        return n0;

     label8:
        $r10 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        l1 = specialinvoke r0.<sun.nio.ch.FileChannelImpl: long position0(java.io.FileDescriptor,long)>($r10, l0);
        $b5 = l1 cmp -3L;
        if $b5 != 0 goto label9;

        $z4 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z4 != 0 goto label8;

     label9:
        r11 = r0;

     label10:
        $r12 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r12.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);
        $b6 = l1 cmp -1L;
        if $b6 <= 0 goto label11;

        $z5 = 1;
        goto label12;

     label11:
        $z5 = 0;

     label12:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z5);
        $z6 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z6 != 0 goto label13;

        $z7 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l1);
        if $z7 != 0 goto label13;

        $r14 = new java.lang.AssertionError;
        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();
        throw $r14;

     label13:
        exitmonitor r1;

     label14:
        return r11;

     label15:
        $r15 := @caughtexception;

     label16:
        r2 = $r15;

     label17:
        $r16 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r16.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);
        $b7 = l1 cmp -1L;
        if $b7 <= 0 goto label18;

        $z8 = 1;
        goto label19;

     label18:
        $z8 = 0;

     label19:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z8);
        $z9 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z9 != 0 goto label20;

        $z10 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l1);
        if $z10 != 0 goto label20;

        $r18 = new java.lang.AssertionError;
        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();
        throw $r18;

     label20:
        throw r2;

     label21:
        $r19 := @caughtexception;
        r3 = $r19;
        exitmonitor r1;

     label22:
        throw r3;

        catch java.lang.Throwable from label2 to label3 with label15;
        catch java.lang.Throwable from label8 to label10 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label1 to label7 with label21;
        catch java.lang.Throwable from label8 to label14 with label21;
        catch java.lang.Throwable from label16 to label22 with label21;
    }

    public long size() throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        java.lang.Object r1, $r4;
        long l0, l2, l5;
        int i1;
        java.lang.Throwable r2, r3, $r14, $r18;
        sun.nio.ch.NativeThreadSet $r5, $r6, $r11, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        byte $b3, $b4, $b6, $b7;
        java.lang.AssertionError $r8, $r13, $r17;
        sun.nio.ch.FileDispatcher $r9;
        java.io.FileDescriptor $r10;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        $r4 = r0.<sun.nio.ch.FileChannelImpl: java.lang.Object positionLock>;
        r1 = $r4;
        entermonitor $r4;

     label0:
        l0 = -1L;
        i1 = -1;

     label1:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void begin()>();
        $r5 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i1 = virtualinvoke $r5.<sun.nio.ch.NativeThreadSet: int add()>();
        $z0 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label7;

        l2 = -1L;

     label2:
        $r6 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r6.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        $b3 = l0 cmp -1L;
        if $b3 <= 0 goto label3;

        $z1 = 1;
        goto label4;

     label3:
        $z1 = 0;

     label4:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z1);
        $z2 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z2 != 0 goto label5;

        $z3 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l0);
        if $z3 != 0 goto label5;

        $r8 = new java.lang.AssertionError;
        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();
        throw $r8;

     label5:
        exitmonitor r1;

     label6:
        return l2;

     label7:
        $r9 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r10 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        l0 = virtualinvoke $r9.<sun.nio.ch.FileDispatcher: long size(java.io.FileDescriptor)>($r10);
        $b4 = l0 cmp -3L;
        if $b4 != 0 goto label8;

        $z4 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z4 != 0 goto label7;

     label8:
        l5 = staticinvoke <sun.nio.ch.IOStatus: long normalize(long)>(l0);

     label9:
        $r11 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r11.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        $b6 = l0 cmp -1L;
        if $b6 <= 0 goto label10;

        $z5 = 1;
        goto label11;

     label10:
        $z5 = 0;

     label11:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z5);
        $z6 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z6 != 0 goto label12;

        $z7 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l0);
        if $z7 != 0 goto label12;

        $r13 = new java.lang.AssertionError;
        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();
        throw $r13;

     label12:
        exitmonitor r1;

     label13:
        return l5;

     label14:
        $r14 := @caughtexception;

     label15:
        r2 = $r14;

     label16:
        $r15 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r15.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        $b7 = l0 cmp -1L;
        if $b7 <= 0 goto label17;

        $z8 = 1;
        goto label18;

     label17:
        $z8 = 0;

     label18:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z8);
        $z9 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z9 != 0 goto label19;

        $z10 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l0);
        if $z10 != 0 goto label19;

        $r17 = new java.lang.AssertionError;
        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();
        throw $r17;

     label19:
        throw r2;

     label20:
        $r18 := @caughtexception;
        r3 = $r18;
        exitmonitor r1;

     label21:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label14;
        catch java.lang.Throwable from label7 to label9 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label0 to label6 with label20;
        catch java.lang.Throwable from label7 to label13 with label20;
        catch java.lang.Throwable from label15 to label21 with label20;
    }

    public java.nio.channels.FileChannel truncate(long) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0, r22;
        long l0, l2, $l5, l7, $l11;
        java.lang.Object r1, $r6;
        int i1, i3;
        null_type n0, n1, n2;
        java.lang.Throwable r2, r3, $r26, $r30;
        byte $b4, $b6, $b8, $b9, $b10;
        java.lang.IllegalArgumentException $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22;
        java.nio.channels.NonWritableChannelException $r5;
        sun.nio.ch.NativeThreadSet $r7, $r8, $r12, $r18, $r23, $r27;
        java.lang.AssertionError $r10, $r14, $r15, $r20, $r25, $r29;
        java.io.FileDescriptor $r11, $r17, $r21;
        sun.nio.ch.FileDispatcher $r16;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        l0 := @parameter0: long;
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        $b4 = l0 cmp 0L;
        if $b4 >= 0 goto label0;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r4;

     label0:
        $l5 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: long size()>();
        $b6 = l0 cmp $l5;
        if $b6 <= 0 goto label1;

        return r0;

     label1:
        $z0 = r0.<sun.nio.ch.FileChannelImpl: boolean writable>;
        if $z0 != 0 goto label2;

        $r5 = new java.nio.channels.NonWritableChannelException;
        specialinvoke $r5.<java.nio.channels.NonWritableChannelException: void <init>()>();
        throw $r5;

     label2:
        $r6 = r0.<sun.nio.ch.FileChannelImpl: java.lang.Object positionLock>;
        r1 = $r6;
        entermonitor $r6;

     label3:
        i1 = -1;
        l2 = -1L;
        i3 = -1;

     label4:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void begin()>();
        $r7 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i3 = virtualinvoke $r7.<sun.nio.ch.NativeThreadSet: int add()>();
        $z1 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label10;

        n0 = null;

     label5:
        $r8 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r8.<sun.nio.ch.NativeThreadSet: void remove(int)>(i3);
        if i1 <= -1 goto label6;

        $z2 = 1;
        goto label7;

     label6:
        $z2 = 0;

     label7:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z2);
        $z3 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z3 != 0 goto label8;

        $z4 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i1);
        if $z4 != 0 goto label8;

        $r10 = new java.lang.AssertionError;
        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();
        throw $r10;

     label8:
        exitmonitor r1;

     label9:
        return n0;

     label10:
        $r11 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        l7 = specialinvoke r0.<sun.nio.ch.FileChannelImpl: long position0(java.io.FileDescriptor,long)>($r11, -1L);
        $b8 = l7 cmp -3L;
        if $b8 != 0 goto label11;

        $z5 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z5 != 0 goto label10;

     label11:
        $z6 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z6 != 0 goto label17;

        n1 = null;

     label12:
        $r12 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r12.<sun.nio.ch.NativeThreadSet: void remove(int)>(i3);
        if i1 <= -1 goto label13;

        $z7 = 1;
        goto label14;

     label13:
        $z7 = 0;

     label14:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z7);
        $z8 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z8 != 0 goto label15;

        $z9 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i1);
        if $z9 != 0 goto label15;

        $r14 = new java.lang.AssertionError;
        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();
        throw $r14;

     label15:
        exitmonitor r1;

     label16:
        return n1;

     label17:
        $z10 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z10 != 0 goto label18;

        $b9 = l7 cmp 0L;
        if $b9 >= 0 goto label18;

        $r15 = new java.lang.AssertionError;
        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();
        throw $r15;

     label18:
        $r16 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r17 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        i1 = virtualinvoke $r16.<sun.nio.ch.FileDispatcher: int truncate(java.io.FileDescriptor,long)>($r17, l0);
        if i1 != -3 goto label19;

        $z11 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z11 != 0 goto label18;

     label19:
        $z12 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z12 != 0 goto label25;

        n2 = null;

     label20:
        $r18 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r18.<sun.nio.ch.NativeThreadSet: void remove(int)>(i3);
        if i1 <= -1 goto label21;

        $z13 = 1;
        goto label22;

     label21:
        $z13 = 0;

     label22:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z13);
        $z14 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z14 != 0 goto label23;

        $z15 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i1);
        if $z15 != 0 goto label23;

        $r20 = new java.lang.AssertionError;
        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();
        throw $r20;

     label23:
        exitmonitor r1;

     label24:
        return n2;

     label25:
        $b10 = l7 cmp l0;
        if $b10 <= 0 goto label26;

        l7 = l0;

     label26:
        $r21 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        $l11 = specialinvoke r0.<sun.nio.ch.FileChannelImpl: long position0(java.io.FileDescriptor,long)>($r21, l7);
        i1 = (int) $l11;
        if i1 != -3 goto label27;

        $z16 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z16 != 0 goto label26;

     label27:
        r22 = r0;

     label28:
        $r23 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r23.<sun.nio.ch.NativeThreadSet: void remove(int)>(i3);
        if i1 <= -1 goto label29;

        $z17 = 1;
        goto label30;

     label29:
        $z17 = 0;

     label30:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z17);
        $z18 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z18 != 0 goto label31;

        $z19 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i1);
        if $z19 != 0 goto label31;

        $r25 = new java.lang.AssertionError;
        specialinvoke $r25.<java.lang.AssertionError: void <init>()>();
        throw $r25;

     label31:
        exitmonitor r1;

     label32:
        return r22;

     label33:
        $r26 := @caughtexception;

     label34:
        r2 = $r26;

     label35:
        $r27 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r27.<sun.nio.ch.NativeThreadSet: void remove(int)>(i3);
        if i1 <= -1 goto label36;

        $z20 = 1;
        goto label37;

     label36:
        $z20 = 0;

     label37:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z20);
        $z21 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z21 != 0 goto label38;

        $z22 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i1);
        if $z22 != 0 goto label38;

        $r29 = new java.lang.AssertionError;
        specialinvoke $r29.<java.lang.AssertionError: void <init>()>();
        throw $r29;

     label38:
        throw r2;

     label39:
        $r30 := @caughtexception;
        r3 = $r30;
        exitmonitor r1;

     label40:
        throw r3;

        catch java.lang.Throwable from label4 to label5 with label33;
        catch java.lang.Throwable from label10 to label12 with label33;
        catch java.lang.Throwable from label17 to label20 with label33;
        catch java.lang.Throwable from label25 to label28 with label33;
        catch java.lang.Throwable from label34 to label35 with label33;
        catch java.lang.Throwable from label3 to label9 with label39;
        catch java.lang.Throwable from label10 to label16 with label39;
        catch java.lang.Throwable from label17 to label24 with label39;
        catch java.lang.Throwable from label25 to label32 with label39;
        catch java.lang.Throwable from label34 to label40 with label39;
    }

    public void force(boolean) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        int i0, i1;
        java.lang.Throwable r1, $r11;
        sun.nio.ch.NativeThreadSet $r2, $r3, $r8, $r12;
        java.lang.AssertionError $r5, $r10, $r14;
        sun.nio.ch.FileDispatcher $r6;
        java.io.FileDescriptor $r7;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        z0 := @parameter0: boolean;
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        i0 = -1;
        i1 = -1;

     label0:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void begin()>();
        $r2 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i1 = virtualinvoke $r2.<sun.nio.ch.NativeThreadSet: int add()>();
        $z1 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label5;

     label1:
        $r3 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r3.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        if i0 <= -1 goto label2;

        $z2 = 1;
        goto label3;

     label2:
        $z2 = 0;

     label3:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z2);
        $z3 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z3 != 0 goto label4;

        $z4 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z4 != 0 goto label4;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label4:
        return;

     label5:
        $r6 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r7 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        i0 = virtualinvoke $r6.<sun.nio.ch.FileDispatcher: int force(java.io.FileDescriptor,boolean)>($r7, z0);
        if i0 != -3 goto label6;

        $z5 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z5 != 0 goto label5;

     label6:
        $r8 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r8.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        if i0 <= -1 goto label7;

        $z6 = 1;
        goto label8;

     label7:
        $z6 = 0;

     label8:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z6);
        $z7 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z7 != 0 goto label15;

        $z8 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z8 != 0 goto label15;

        $r10 = new java.lang.AssertionError;
        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();
        throw $r10;

     label9:
        $r11 := @caughtexception;

     label10:
        r1 = $r11;

     label11:
        $r12 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r12.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        if i0 <= -1 goto label12;

        $z9 = 1;
        goto label13;

     label12:
        $z9 = 0;

     label13:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z9);
        $z10 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z10 != 0 goto label14;

        $z11 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z11 != 0 goto label14;

        $r14 = new java.lang.AssertionError;
        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();
        throw $r14;

     label14:
        throw r1;

     label15:
        return;

        catch java.lang.Throwable from label0 to label1 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    private long transferToDirectly(long, int, java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0, $r4;
        long l0, l4, l6, $l8, l11, l14, l16;
        int i1, i2, i3, i5;
        java.nio.channels.WritableByteChannel r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.io.FileDescriptor r2, $r6;
        java.lang.Throwable r3, $r16;
        sun.nio.ch.SelChImpl $r5;
        sun.nio.ch.NativeThreadSet $r7, $r8, $r10, $r12, $r14, $r17;
        byte $b7, $b9, $b10, $b12, $b13, $b15, $b17, $b18;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        l0 := @parameter0: long;
        i1 := @parameter1: int;
        r1 := @parameter2: java.nio.channels.WritableByteChannel;
        $z0 = <sun.nio.ch.FileChannelImpl: boolean transferSupported>;
        if $z0 != 0 goto label0;

        return -4L;

     label0:
        r2 = null;
        $z1 = r1 instanceof sun.nio.ch.FileChannelImpl;
        if $z1 == 0 goto label2;

        $z2 = <sun.nio.ch.FileChannelImpl: boolean fileSupported>;
        if $z2 != 0 goto label1;

        return -6L;

     label1:
        $r4 = (sun.nio.ch.FileChannelImpl) r1;
        r2 = $r4.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        goto label4;

     label2:
        $z3 = r1 instanceof sun.nio.ch.SelChImpl;
        if $z3 == 0 goto label4;

        $z4 = r1 instanceof sun.nio.ch.SinkChannelImpl;
        if $z4 == 0 goto label3;

        $z5 = <sun.nio.ch.FileChannelImpl: boolean pipeSupported>;
        if $z5 != 0 goto label3;

        return -6L;

     label3:
        $r5 = (sun.nio.ch.SelChImpl) r1;
        r2 = interfaceinvoke $r5.<sun.nio.ch.SelChImpl: java.io.FileDescriptor getFD()>();

     label4:
        if r2 != null goto label5;

        return -4L;

     label5:
        $r6 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        i2 = staticinvoke <sun.nio.ch.IOUtil: int fdVal(java.io.FileDescriptor)>($r6);
        i3 = staticinvoke <sun.nio.ch.IOUtil: int fdVal(java.io.FileDescriptor)>(r2);
        if i2 != i3 goto label6;

        return -4L;

     label6:
        l4 = -1L;
        i5 = -1;

     label7:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void begin()>();
        $r7 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i5 = virtualinvoke $r7.<sun.nio.ch.NativeThreadSet: int add()>();
        $z6 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z6 != 0 goto label11;

        l6 = -1L;

     label8:
        $r8 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r8.<sun.nio.ch.NativeThreadSet: void remove(int)>(i5);
        $b7 = l4 cmp -1L;
        if $b7 <= 0 goto label9;

        $z7 = 1;
        goto label10;

     label9:
        $z7 = 0;

     label10:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z7);
        return l6;

     label11:
        $l8 = (long) i1;
        l4 = specialinvoke r0.<sun.nio.ch.FileChannelImpl: long transferTo0(int,long,long,int)>(i2, l0, $l8, i3);
        $b9 = l4 cmp -3L;
        if $b9 != 0 goto label12;

        $z8 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z8 != 0 goto label11;

     label12:
        $b10 = l4 cmp -6L;
        if $b10 != 0 goto label18;

        $z9 = r1 instanceof sun.nio.ch.SinkChannelImpl;
        if $z9 == 0 goto label13;

        <sun.nio.ch.FileChannelImpl: boolean pipeSupported> = 0;

     label13:
        $z10 = r1 instanceof sun.nio.ch.FileChannelImpl;
        if $z10 == 0 goto label14;

        <sun.nio.ch.FileChannelImpl: boolean fileSupported> = 0;

     label14:
        l11 = -6L;

     label15:
        $r10 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r10.<sun.nio.ch.NativeThreadSet: void remove(int)>(i5);
        $b12 = l4 cmp -1L;
        if $b12 <= 0 goto label16;

        $z11 = 1;
        goto label17;

     label16:
        $z11 = 0;

     label17:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z11);
        return l11;

     label18:
        $b13 = l4 cmp -4L;
        if $b13 != 0 goto label22;

        <sun.nio.ch.FileChannelImpl: boolean transferSupported> = 0;
        l14 = -4L;

     label19:
        $r12 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r12.<sun.nio.ch.NativeThreadSet: void remove(int)>(i5);
        $b15 = l4 cmp -1L;
        if $b15 <= 0 goto label20;

        $z12 = 1;
        goto label21;

     label20:
        $z12 = 0;

     label21:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z12);
        return l14;

     label22:
        l16 = staticinvoke <sun.nio.ch.IOStatus: long normalize(long)>(l4);

     label23:
        $r14 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r14.<sun.nio.ch.NativeThreadSet: void remove(int)>(i5);
        $b17 = l4 cmp -1L;
        if $b17 <= 0 goto label24;

        $z13 = 1;
        goto label25;

     label24:
        $z13 = 0;

     label25:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z13);
        return l16;

     label26:
        $r16 := @caughtexception;

     label27:
        r3 = $r16;

     label28:
        $r17 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r17.<sun.nio.ch.NativeThreadSet: void remove(int)>(i5);
        $b18 = l4 cmp -1L;
        if $b18 <= 0 goto label29;

        $z14 = 1;
        goto label30;

     label29:
        $z14 = 0;

     label30:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z14);
        throw r3;

        catch java.lang.Throwable from label7 to label8 with label26;
        catch java.lang.Throwable from label11 to label15 with label26;
        catch java.lang.Throwable from label18 to label19 with label26;
        catch java.lang.Throwable from label22 to label23 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
    }

    private long transferToTrustedChannel(long, long, java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        long l0, l1, l2, l3, $l6, $l7, $l9;
        java.nio.channels.WritableByteChannel r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.nio.channels.FileChannel$MapMode $r2;
        java.nio.MappedByteBuffer r3;
        int i4;
        java.lang.Throwable r4, $r7, $r11, r12;
        byte $b5, $b8;
        java.lang.AssertionError $r5, $r6, $r10;
        java.nio.channels.ClosedByInterruptException $r8, r9;
        java.io.IOException $r13, r14;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        r1 := @parameter2: java.nio.channels.WritableByteChannel;
        z0 = r1 instanceof sun.nio.ch.SelChImpl;
        $z1 = r1 instanceof sun.nio.ch.FileChannelImpl;
        if $z1 != 0 goto label0;

        if z0 != 0 goto label0;

        return -4L;

     label0:
        l2 = l1;

     label1:
        $b5 = l2 cmp 0L;
        if $b5 <= 0 goto label22;

        l3 = staticinvoke <java.lang.Math: long min(long,long)>(l2, 8388608L);

     label2:
        $r2 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;
        r3 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r2, l0, l3);

     label3:
        i4 = interfaceinvoke r1.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>(r3);
        $z2 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z2 != 0 goto label4;

        if i4 >= 0 goto label4;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label4:
        $l6 = (long) i4;
        l2 = l2 - $l6;
        if z0 == 0 goto label7;

     label5:
        staticinvoke <sun.nio.ch.FileChannelImpl: void unmap(java.nio.MappedByteBuffer)>(r3);

     label6:
        goto label22;

     label7:
        $z3 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z3 != 0 goto label8;

        if i4 > 0 goto label8;

        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label8:
        $l7 = (long) i4;
        l0 = l0 + $l7;

     label9:
        staticinvoke <sun.nio.ch.FileChannelImpl: void unmap(java.nio.MappedByteBuffer)>(r3);
        goto label13;

     label10:
        $r7 := @caughtexception;

     label11:
        r4 = $r7;

     label12:
        staticinvoke <sun.nio.ch.FileChannelImpl: void unmap(java.nio.MappedByteBuffer)>(r3);
        throw r4;

     label13:
        goto label21;

     label14:
        $r8 := @caughtexception;
        r9 = $r8;
        $z4 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z4 != 0 goto label15;

        $z5 = interfaceinvoke r1.<java.nio.channels.WritableByteChannel: boolean isOpen()>();
        if $z5 == 0 goto label15;

        $r10 = new java.lang.AssertionError;
        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();
        throw $r10;

     label15:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void close()>();

     label16:
        goto label18;

     label17:
        $r11 := @caughtexception;
        r12 = $r11;
        virtualinvoke r9.<java.nio.channels.ClosedByInterruptException: void addSuppressed(java.lang.Throwable)>(r12);

     label18:
        throw r9;

     label19:
        $r13 := @caughtexception;
        r14 = $r13;
        $b8 = l2 cmp l1;
        if $b8 != 0 goto label20;

        throw r14;

     label20:
        goto label22;

     label21:
        goto label1;

     label22:
        $l9 = l1 - l2;
        return $l9;

        catch java.lang.Throwable from label3 to label5 with label10;
        catch java.lang.Throwable from label7 to label9 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.nio.channels.ClosedByInterruptException from label2 to label6 with label14;
        catch java.nio.channels.ClosedByInterruptException from label7 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.io.IOException from label2 to label6 with label19;
        catch java.io.IOException from label7 to label13 with label19;
    }

    private long transferToArbitraryChannel(long, int, java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        long l0, l3, l4, $l7, $l9, $l10, $l13, $l14, l15, l17;
        int i1, i2, i5, i6, $i11, $i12;
        java.nio.channels.WritableByteChannel r1;
        java.nio.ByteBuffer r2;
        java.lang.Throwable r3, $r9;
        byte $b8, $b16;
        java.io.IOException $r7, r8;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        l0 := @parameter0: long;
        i1 := @parameter1: int;
        r1 := @parameter2: java.nio.channels.WritableByteChannel;
        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i1, 8192);
        r2 = staticinvoke <sun.nio.ch.Util: java.nio.ByteBuffer getTemporaryDirectBuffer(int)>(i2);
        l3 = 0L;
        l4 = l0;

     label0:
        staticinvoke <sun.nio.ch.Util: void erase(java.nio.ByteBuffer)>(r2);

     label1:
        $l7 = (long) i1;
        $b8 = l3 cmp $l7;
        if $b8 >= 0 goto label4;

        $l9 = (long) i1;
        $l10 = $l9 - l3;
        $i11 = (int) $l10;
        $i12 = staticinvoke <java.lang.Math: int min(int,int)>($i11, 8192);
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i12);
        i5 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: int read(java.nio.ByteBuffer,long)>(r2, l4);
        if i5 > 0 goto label2;

        goto label4;

     label2:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        i6 = interfaceinvoke r1.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>(r2);
        $l13 = (long) i6;
        l3 = l3 + $l13;
        if i6 == i5 goto label3;

        goto label4;

     label3:
        $l14 = (long) i6;
        l4 = l4 + $l14;
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();
        goto label1;

     label4:
        l15 = l3;

     label5:
        staticinvoke <sun.nio.ch.Util: void releaseTemporaryDirectBuffer(java.nio.ByteBuffer)>(r2);
        return l15;

     label6:
        $r7 := @caughtexception;

     label7:
        r8 = $r7;
        $b16 = l3 cmp 0L;
        if $b16 <= 0 goto label9;

        l17 = l3;

     label8:
        staticinvoke <sun.nio.ch.Util: void releaseTemporaryDirectBuffer(java.nio.ByteBuffer)>(r2);
        return l17;

     label9:
        throw r8;

     label10:
        $r9 := @caughtexception;
        r3 = $r9;

     label11:
        staticinvoke <sun.nio.ch.Util: void releaseTemporaryDirectBuffer(java.nio.ByteBuffer)>(r2);
        throw r3;

        catch java.io.IOException from label0 to label5 with label6;
        catch java.lang.Throwable from label0 to label5 with label10;
        catch java.lang.Throwable from label7 to label8 with label10;
        catch java.lang.Throwable from label9 to label11 with label10;
    }

    public long transferTo(long, long, java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0, $r4;
        long l0, l1, l2, l4, $l8, $l9, $l10, $l12, $l13, $l15, $l16, l17, $l19;
        java.nio.channels.WritableByteChannel r1;
        int i3;
        boolean $z0, $z1, $z2, $z3;
        java.nio.channels.ClosedChannelException $r2;
        java.nio.channels.NonReadableChannelException $r3;
        java.nio.channels.NonWritableChannelException $r5;
        byte $b5, $b6, $b7, $b11, $b14, $b18;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        r1 := @parameter2: java.nio.channels.WritableByteChannel;
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        $z0 = interfaceinvoke r1.<java.nio.channels.WritableByteChannel: boolean isOpen()>();
        if $z0 != 0 goto label0;

        $r2 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r2.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r2;

     label0:
        $z1 = r0.<sun.nio.ch.FileChannelImpl: boolean readable>;
        if $z1 != 0 goto label1;

        $r3 = new java.nio.channels.NonReadableChannelException;
        specialinvoke $r3.<java.nio.channels.NonReadableChannelException: void <init>()>();
        throw $r3;

     label1:
        $z2 = r1 instanceof sun.nio.ch.FileChannelImpl;
        if $z2 == 0 goto label2;

        $r4 = (sun.nio.ch.FileChannelImpl) r1;
        $z3 = $r4.<sun.nio.ch.FileChannelImpl: boolean writable>;
        if $z3 != 0 goto label2;

        $r5 = new java.nio.channels.NonWritableChannelException;
        specialinvoke $r5.<java.nio.channels.NonWritableChannelException: void <init>()>();
        throw $r5;

     label2:
        $b5 = l0 cmp 0L;
        if $b5 < 0 goto label3;

        $b6 = l1 cmp 0L;
        if $b6 >= 0 goto label4;

     label3:
        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r6;

     label4:
        l2 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: long size()>();
        $b7 = l0 cmp l2;
        if $b7 <= 0 goto label5;

        return 0L;

     label5:
        $l8 = staticinvoke <java.lang.Math: long min(long,long)>(l1, 2147483647L);
        i3 = (int) $l8;
        $l9 = l2 - l0;
        $l10 = (long) i3;
        $b11 = $l9 cmp $l10;
        if $b11 >= 0 goto label6;

        $l12 = l2 - l0;
        i3 = (int) $l12;

     label6:
        $l13 = specialinvoke r0.<sun.nio.ch.FileChannelImpl: long transferToDirectly(long,int,java.nio.channels.WritableByteChannel)>(l0, i3, r1);
        l4 = $l13;
        $b14 = $l13 cmp 0L;
        if $b14 < 0 goto label7;

        return l4;

     label7:
        $l15 = (long) i3;
        $l16 = specialinvoke r0.<sun.nio.ch.FileChannelImpl: long transferToTrustedChannel(long,long,java.nio.channels.WritableByteChannel)>(l0, $l15, r1);
        l17 = $l16;
        $b18 = $l16 cmp 0L;
        if $b18 < 0 goto label8;

        return l17;

     label8:
        $l19 = specialinvoke r0.<sun.nio.ch.FileChannelImpl: long transferToArbitraryChannel(long,int,java.nio.channels.WritableByteChannel)>(l0, i3, r1);
        return $l19;
    }

    private long transferFromFileChannel(sun.nio.ch.FileChannelImpl, long, long) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0, r1;
        long l0, l1, l2, l3, l4, l5, l6, l7, $l8, $l9, l14, $l15;
        java.lang.Object r2, $r7;
        java.nio.MappedByteBuffer r3;
        java.lang.Throwable r4, r5, $r12, $r14;
        boolean $z0, $z1;
        java.nio.channels.NonReadableChannelException $r6;
        byte $b10, $b12, $b13;
        java.nio.channels.FileChannel$MapMode $r8;
        int $i11;
        java.lang.AssertionError $r9;
        java.io.IOException $r10, r11;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        r1 := @parameter0: sun.nio.ch.FileChannelImpl;
        l0 := @parameter1: long;
        l1 := @parameter2: long;
        $z0 = r1.<sun.nio.ch.FileChannelImpl: boolean readable>;
        if $z0 != 0 goto label0;

        $r6 = new java.nio.channels.NonReadableChannelException;
        specialinvoke $r6.<java.nio.channels.NonReadableChannelException: void <init>()>();
        throw $r6;

     label0:
        $r7 = r1.<sun.nio.ch.FileChannelImpl: java.lang.Object positionLock>;
        r2 = $r7;
        entermonitor $r7;

     label1:
        l2 = virtualinvoke r1.<sun.nio.ch.FileChannelImpl: long position()>();
        $l8 = virtualinvoke r1.<sun.nio.ch.FileChannelImpl: long size()>();
        $l9 = $l8 - l2;
        l3 = staticinvoke <java.lang.Math: long min(long,long)>(l1, $l9);
        l4 = l3;
        l5 = l2;

     label2:
        $b10 = l4 cmp 0L;
        if $b10 <= 0 goto label13;

        l6 = staticinvoke <java.lang.Math: long min(long,long)>(l4, 8388608L);
        $r8 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;
        r3 = virtualinvoke r1.<sun.nio.ch.FileChannelImpl: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r8, l5, l6);

     label3:
        $i11 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: int write(java.nio.ByteBuffer,long)>(r3, l0);
        l7 = (long) $i11;
        $z1 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z1 != 0 goto label4;

        $b12 = l7 cmp 0L;
        if $b12 > 0 goto label4;

        $r9 = new java.lang.AssertionError;
        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();
        throw $r9;

     label4:
        l5 = l5 + l7;
        l0 = l0 + l7;
        l4 = l4 - l7;

     label5:
        staticinvoke <sun.nio.ch.FileChannelImpl: void unmap(java.nio.MappedByteBuffer)>(r3);
        goto label12;

     label6:
        $r10 := @caughtexception;

     label7:
        r11 = $r10;
        $b13 = l4 cmp l3;
        if $b13 != 0 goto label8;

        throw r11;

     label8:
        staticinvoke <sun.nio.ch.FileChannelImpl: void unmap(java.nio.MappedByteBuffer)>(r3);
        goto label13;

     label9:
        $r12 := @caughtexception;

     label10:
        r4 = $r12;

     label11:
        staticinvoke <sun.nio.ch.FileChannelImpl: void unmap(java.nio.MappedByteBuffer)>(r3);
        throw r4;

     label12:
        goto label2;

     label13:
        l14 = l3 - l4;
        $l15 = l2 + l14;
        virtualinvoke r1.<sun.nio.ch.FileChannelImpl: java.nio.channels.FileChannel position(long)>($l15);
        exitmonitor r2;

     label14:
        return l14;

     label15:
        $r14 := @caughtexception;

     label16:
        r5 = $r14;
        exitmonitor r2;

     label17:
        throw r5;

        catch java.io.IOException from label3 to label5 with label6;
        catch java.lang.Throwable from label3 to label5 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
        catch java.lang.Throwable from label1 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private long transferFromArbitraryChannel(java.nio.channels.ReadableByteChannel, long, long) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        java.nio.channels.ReadableByteChannel r1;
        long l0, l1, l3, l4, $l7, $l9, $l10, $l12, $l13, l14, l16;
        int i2, i5, i6, $i11;
        java.nio.ByteBuffer r2;
        java.lang.Throwable r3, $r9;
        byte $b8, $b15;
        java.io.IOException $r7, r8;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        r1 := @parameter0: java.nio.channels.ReadableByteChannel;
        l0 := @parameter1: long;
        l1 := @parameter2: long;
        $l7 = staticinvoke <java.lang.Math: long min(long,long)>(l1, 8192L);
        i2 = (int) $l7;
        r2 = staticinvoke <sun.nio.ch.Util: java.nio.ByteBuffer getTemporaryDirectBuffer(int)>(i2);
        l3 = 0L;
        l4 = l0;

     label0:
        staticinvoke <sun.nio.ch.Util: void erase(java.nio.ByteBuffer)>(r2);

     label1:
        $b8 = l3 cmp l1;
        if $b8 >= 0 goto label4;

        $l9 = l1 - l3;
        $l10 = staticinvoke <java.lang.Math: long min(long,long)>($l9, 8192L);
        $i11 = (int) $l10;
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i11);
        i5 = interfaceinvoke r1.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(r2);
        if i5 > 0 goto label2;

        goto label4;

     label2:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        i6 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: int write(java.nio.ByteBuffer,long)>(r2, l4);
        $l12 = (long) i6;
        l3 = l3 + $l12;
        if i6 == i5 goto label3;

        goto label4;

     label3:
        $l13 = (long) i6;
        l4 = l4 + $l13;
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();
        goto label1;

     label4:
        l14 = l3;

     label5:
        staticinvoke <sun.nio.ch.Util: void releaseTemporaryDirectBuffer(java.nio.ByteBuffer)>(r2);
        return l14;

     label6:
        $r7 := @caughtexception;

     label7:
        r8 = $r7;
        $b15 = l3 cmp 0L;
        if $b15 <= 0 goto label9;

        l16 = l3;

     label8:
        staticinvoke <sun.nio.ch.Util: void releaseTemporaryDirectBuffer(java.nio.ByteBuffer)>(r2);
        return l16;

     label9:
        throw r8;

     label10:
        $r9 := @caughtexception;
        r3 = $r9;

     label11:
        staticinvoke <sun.nio.ch.Util: void releaseTemporaryDirectBuffer(java.nio.ByteBuffer)>(r2);
        throw r3;

        catch java.io.IOException from label0 to label5 with label6;
        catch java.lang.Throwable from label0 to label5 with label10;
        catch java.lang.Throwable from label7 to label8 with label10;
        catch java.lang.Throwable from label9 to label11 with label10;
    }

    public long transferFrom(java.nio.channels.ReadableByteChannel, long, long) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0, $r5;
        java.nio.channels.ReadableByteChannel r1;
        long l0, l1, $l4, $l6, $l7;
        boolean $z0, $z1, $z2;
        java.nio.channels.ClosedChannelException $r2;
        java.nio.channels.NonWritableChannelException $r3;
        byte $b2, $b3, $b5;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        r1 := @parameter0: java.nio.channels.ReadableByteChannel;
        l0 := @parameter1: long;
        l1 := @parameter2: long;
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        $z0 = interfaceinvoke r1.<java.nio.channels.ReadableByteChannel: boolean isOpen()>();
        if $z0 != 0 goto label0;

        $r2 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r2.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r2;

     label0:
        $z1 = r0.<sun.nio.ch.FileChannelImpl: boolean writable>;
        if $z1 != 0 goto label1;

        $r3 = new java.nio.channels.NonWritableChannelException;
        specialinvoke $r3.<java.nio.channels.NonWritableChannelException: void <init>()>();
        throw $r3;

     label1:
        $b2 = l0 cmp 0L;
        if $b2 < 0 goto label2;

        $b3 = l1 cmp 0L;
        if $b3 >= 0 goto label3;

     label2:
        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r4;

     label3:
        $l4 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: long size()>();
        $b5 = l0 cmp $l4;
        if $b5 <= 0 goto label4;

        return 0L;

     label4:
        $z2 = r1 instanceof sun.nio.ch.FileChannelImpl;
        if $z2 == 0 goto label5;

        $r5 = (sun.nio.ch.FileChannelImpl) r1;
        $l6 = specialinvoke r0.<sun.nio.ch.FileChannelImpl: long transferFromFileChannel(sun.nio.ch.FileChannelImpl,long,long)>($r5, l0, l1);
        return $l6;

     label5:
        $l7 = specialinvoke r0.<sun.nio.ch.FileChannelImpl: long transferFromArbitraryChannel(java.nio.channels.ReadableByteChannel,long,long)>(r1, l0, l1);
        return $l7;
    }

    public int read(java.nio.ByteBuffer, long) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        java.nio.ByteBuffer r1;
        long l0;
        java.lang.Object r2, $r8;
        java.lang.Throwable r3, $r9;
        java.lang.NullPointerException $r4;
        byte $b1;
        java.lang.IllegalArgumentException $r5;
        boolean $z0, $z1;
        java.nio.channels.NonReadableChannelException $r6;
        sun.nio.ch.FileDispatcher $r7;
        int $i2, $i3;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        l0 := @parameter1: long;
        if r1 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label0:
        $b1 = l0 cmp 0L;
        if $b1 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative position");
        throw $r5;

     label1:
        $z0 = r0.<sun.nio.ch.FileChannelImpl: boolean readable>;
        if $z0 != 0 goto label2;

        $r6 = new java.nio.channels.NonReadableChannelException;
        specialinvoke $r6.<java.nio.channels.NonReadableChannelException: void <init>()>();
        throw $r6;

     label2:
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        $r7 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $z1 = virtualinvoke $r7.<sun.nio.ch.FileDispatcher: boolean needsPositionLock()>();
        if $z1 == 0 goto label8;

        $r8 = r0.<sun.nio.ch.FileChannelImpl: java.lang.Object positionLock>;
        r2 = $r8;
        entermonitor $r8;

     label3:
        $i2 = specialinvoke r0.<sun.nio.ch.FileChannelImpl: int readInternal(java.nio.ByteBuffer,long)>(r1, l0);
        exitmonitor r2;

     label4:
        return $i2;

     label5:
        $r9 := @caughtexception;

     label6:
        r3 = $r9;
        exitmonitor r2;

     label7:
        throw r3;

     label8:
        $i3 = specialinvoke r0.<sun.nio.ch.FileChannelImpl: int readInternal(java.nio.ByteBuffer,long)>(r1, l0);
        return $i3;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private int readInternal(java.nio.ByteBuffer, long) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        java.nio.ByteBuffer r1;
        long l0, $l4, $l6, $l7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        int i1, i2, i5;
        java.lang.Object r2, $r5;
        byte b3;
        java.lang.Throwable r3, $r19;
        sun.nio.ch.FileDispatcher $r4, $r14;
        java.lang.AssertionError $r6, $r12, $r18, $r23;
        java.lang.String $r7;
        sun.nio.ch.NativeThreadSet $r8, $r9, $r15, $r20;
        java.io.FileDescriptor $r13;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        l0 := @parameter1: long;
        $z0 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r4 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $z1 = virtualinvoke $r4.<sun.nio.ch.FileDispatcher: boolean needsPositionLock()>();
        if $z1 == 0 goto label0;

        $r5 = r0.<sun.nio.ch.FileChannelImpl: java.lang.Object positionLock>;
        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r5);
        if $z2 != 0 goto label0;

        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label0:
        i1 = 0;
        i2 = -1;
        $r7 = r0.<sun.nio.ch.FileChannelImpl: java.lang.String path>;
        r2 = staticinvoke <sun.misc.IoTrace: java.lang.Object fileReadBegin(java.lang.String)>($r7);

     label1:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void begin()>();
        $r8 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i2 = virtualinvoke $r8.<sun.nio.ch.NativeThreadSet: int add()>();
        $z3 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z3 != 0 goto label8;

        b3 = -1;

     label2:
        $r9 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r9.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);
        if i1 <= 0 goto label3;

        $l4 = (long) i1;
        goto label4;

     label3:
        $l4 = 0L;

     label4:
        staticinvoke <sun.misc.IoTrace: void fileReadEnd(java.lang.Object,long)>(r2, $l4);
        if i1 <= 0 goto label5;

        $z4 = 1;
        goto label6;

     label5:
        $z4 = 0;

     label6:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z4);
        $z5 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z5 != 0 goto label7;

        $z6 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i1);
        if $z6 != 0 goto label7;

        $r12 = new java.lang.AssertionError;
        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();
        throw $r12;

     label7:
        return b3;

     label8:
        $r13 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        $r14 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        i1 = staticinvoke <sun.nio.ch.IOUtil: int read(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>($r13, r1, l0, $r14);
        if i1 != -3 goto label9;

        $z7 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z7 != 0 goto label8;

     label9:
        i5 = staticinvoke <sun.nio.ch.IOStatus: int normalize(int)>(i1);

     label10:
        $r15 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r15.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);
        if i1 <= 0 goto label11;

        $l6 = (long) i1;
        goto label12;

     label11:
        $l6 = 0L;

     label12:
        staticinvoke <sun.misc.IoTrace: void fileReadEnd(java.lang.Object,long)>(r2, $l6);
        if i1 <= 0 goto label13;

        $z8 = 1;
        goto label14;

     label13:
        $z8 = 0;

     label14:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z8);
        $z9 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z9 != 0 goto label15;

        $z10 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i1);
        if $z10 != 0 goto label15;

        $r18 = new java.lang.AssertionError;
        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();
        throw $r18;

     label15:
        return i5;

     label16:
        $r19 := @caughtexception;

     label17:
        r3 = $r19;

     label18:
        $r20 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r20.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);
        if i1 <= 0 goto label19;

        $l7 = (long) i1;
        goto label20;

     label19:
        $l7 = 0L;

     label20:
        staticinvoke <sun.misc.IoTrace: void fileReadEnd(java.lang.Object,long)>(r2, $l7);
        if i1 <= 0 goto label21;

        $z11 = 1;
        goto label22;

     label21:
        $z11 = 0;

     label22:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z11);
        $z12 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z12 != 0 goto label23;

        $z13 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i1);
        if $z13 != 0 goto label23;

        $r23 = new java.lang.AssertionError;
        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();
        throw $r23;

     label23:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label16;
        catch java.lang.Throwable from label8 to label10 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public int write(java.nio.ByteBuffer, long) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        java.nio.ByteBuffer r1;
        long l0;
        java.lang.Object r2, $r8;
        java.lang.Throwable r3, $r9;
        java.lang.NullPointerException $r4;
        byte $b1;
        java.lang.IllegalArgumentException $r5;
        boolean $z0, $z1;
        java.nio.channels.NonWritableChannelException $r6;
        sun.nio.ch.FileDispatcher $r7;
        int $i2, $i3;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        l0 := @parameter1: long;
        if r1 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label0:
        $b1 = l0 cmp 0L;
        if $b1 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative position");
        throw $r5;

     label1:
        $z0 = r0.<sun.nio.ch.FileChannelImpl: boolean writable>;
        if $z0 != 0 goto label2;

        $r6 = new java.nio.channels.NonWritableChannelException;
        specialinvoke $r6.<java.nio.channels.NonWritableChannelException: void <init>()>();
        throw $r6;

     label2:
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        $r7 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $z1 = virtualinvoke $r7.<sun.nio.ch.FileDispatcher: boolean needsPositionLock()>();
        if $z1 == 0 goto label8;

        $r8 = r0.<sun.nio.ch.FileChannelImpl: java.lang.Object positionLock>;
        r2 = $r8;
        entermonitor $r8;

     label3:
        $i2 = specialinvoke r0.<sun.nio.ch.FileChannelImpl: int writeInternal(java.nio.ByteBuffer,long)>(r1, l0);
        exitmonitor r2;

     label4:
        return $i2;

     label5:
        $r9 := @caughtexception;

     label6:
        r3 = $r9;
        exitmonitor r2;

     label7:
        throw r3;

     label8:
        $i3 = specialinvoke r0.<sun.nio.ch.FileChannelImpl: int writeInternal(java.nio.ByteBuffer,long)>(r1, l0);
        return $i3;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private int writeInternal(java.nio.ByteBuffer, long) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        java.nio.ByteBuffer r1;
        long l0, $l4, $l6, $l7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        int i1, i2, i5;
        java.lang.Object r2, $r5;
        byte b3;
        java.lang.Throwable r3, $r19;
        sun.nio.ch.FileDispatcher $r4, $r14;
        java.lang.AssertionError $r6, $r12, $r18, $r23;
        java.lang.String $r7;
        sun.nio.ch.NativeThreadSet $r8, $r9, $r15, $r20;
        java.io.FileDescriptor $r13;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        l0 := @parameter1: long;
        $z0 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r4 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $z1 = virtualinvoke $r4.<sun.nio.ch.FileDispatcher: boolean needsPositionLock()>();
        if $z1 == 0 goto label0;

        $r5 = r0.<sun.nio.ch.FileChannelImpl: java.lang.Object positionLock>;
        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r5);
        if $z2 != 0 goto label0;

        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label0:
        i1 = 0;
        i2 = -1;
        $r7 = r0.<sun.nio.ch.FileChannelImpl: java.lang.String path>;
        r2 = staticinvoke <sun.misc.IoTrace: java.lang.Object fileWriteBegin(java.lang.String)>($r7);

     label1:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void begin()>();
        $r8 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i2 = virtualinvoke $r8.<sun.nio.ch.NativeThreadSet: int add()>();
        $z3 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z3 != 0 goto label8;

        b3 = -1;

     label2:
        $r9 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r9.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);
        if i1 <= 0 goto label3;

        $z4 = 1;
        goto label4;

     label3:
        $z4 = 0;

     label4:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z4);
        if i1 <= 0 goto label5;

        $l4 = (long) i1;
        goto label6;

     label5:
        $l4 = 0L;

     label6:
        staticinvoke <sun.misc.IoTrace: void fileWriteEnd(java.lang.Object,long)>(r2, $l4);
        $z5 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z5 != 0 goto label7;

        $z6 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i1);
        if $z6 != 0 goto label7;

        $r12 = new java.lang.AssertionError;
        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();
        throw $r12;

     label7:
        return b3;

     label8:
        $r13 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        $r14 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        i1 = staticinvoke <sun.nio.ch.IOUtil: int write(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>($r13, r1, l0, $r14);
        if i1 != -3 goto label9;

        $z7 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z7 != 0 goto label8;

     label9:
        i5 = staticinvoke <sun.nio.ch.IOStatus: int normalize(int)>(i1);

     label10:
        $r15 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r15.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);
        if i1 <= 0 goto label11;

        $z8 = 1;
        goto label12;

     label11:
        $z8 = 0;

     label12:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z8);
        if i1 <= 0 goto label13;

        $l6 = (long) i1;
        goto label14;

     label13:
        $l6 = 0L;

     label14:
        staticinvoke <sun.misc.IoTrace: void fileWriteEnd(java.lang.Object,long)>(r2, $l6);
        $z9 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z9 != 0 goto label15;

        $z10 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i1);
        if $z10 != 0 goto label15;

        $r18 = new java.lang.AssertionError;
        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();
        throw $r18;

     label15:
        return i5;

     label16:
        $r19 := @caughtexception;

     label17:
        r3 = $r19;

     label18:
        $r20 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r20.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);
        if i1 <= 0 goto label19;

        $z11 = 1;
        goto label20;

     label19:
        $z11 = 0;

     label20:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z11);
        if i1 <= 0 goto label21;

        $l7 = (long) i1;
        goto label22;

     label21:
        $l7 = 0L;

     label22:
        staticinvoke <sun.misc.IoTrace: void fileWriteEnd(java.lang.Object,long)>(r2, $l7);
        $z12 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z12 != 0 goto label23;

        $z13 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i1);
        if $z13 != 0 goto label23;

        $r23 = new java.lang.AssertionError;
        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();
        throw $r23;

     label23:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label16;
        catch java.lang.Throwable from label8 to label10 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    private static void unmap(java.nio.MappedByteBuffer)
    {
        java.nio.MappedByteBuffer r0;
        sun.misc.Cleaner r1;
        sun.nio.ch.DirectBuffer $r2;

        r0 := @parameter0: java.nio.MappedByteBuffer;
        $r2 = (sun.nio.ch.DirectBuffer) r0;
        r1 = interfaceinvoke $r2.<sun.nio.ch.DirectBuffer: sun.misc.Cleaner cleaner()>();
        if r1 == null goto label0;

        virtualinvoke r1.<sun.misc.Cleaner: void clean()>();

     label0:
        return;
    }

    public java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode, long, long) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        java.nio.channels.FileChannel$MapMode r1, $r12, $r13, $r14, $r16;
        long l0, l1, l3, l5, $l8, $l11, $l12, $l14, $l17, $l18, $l20, l21, $l22, $l24, $l25, $l28, $l29, $l30, $l31;
        byte b2, $b6, $b7, $b9, $b10, $b13, $b16, $b26;
        int i4, i15, i19, i27;
        null_type n0;
        java.nio.MappedByteBuffer r2, r6, r27, r44;
        java.lang.OutOfMemoryError r3, $r29, $r32, r33;
        java.lang.InterruptedException r4, $r30;
        sun.nio.ch.FileChannelImpl$Unmapper r5, $r42;
        java.lang.Throwable r7, $r46;
        java.lang.IllegalArgumentException $r8, $r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.lang.AssertionError $r15, $r40, $r41;
        java.nio.channels.NonWritableChannelException $r17;
        java.nio.channels.NonReadableChannelException $r18;
        sun.nio.ch.NativeThreadSet $r19, $r20, $r26, $r28, $r43, $r45, $r47;
        java.io.IOException $r21, $r34, $r38, r39;
        sun.nio.ch.FileDispatcher $r22, $r35;
        java.io.FileDescriptor $r23, $r24, r25, $r36, r37;
        java.lang.Thread $r31;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        r1 := @parameter0: java.nio.channels.FileChannel$MapMode;
        l0 := @parameter1: long;
        l1 := @parameter2: long;
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        $b6 = l0 cmp 0L;
        if $b6 >= 0 goto label0;

        $r8 = new java.lang.IllegalArgumentException;
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative position");
        throw $r8;

     label0:
        $b7 = l1 cmp 0L;
        if $b7 >= 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative size");
        throw $r9;

     label1:
        $l8 = l0 + l1;
        $b9 = $l8 cmp 0L;
        if $b9 >= 0 goto label2;

        $r10 = new java.lang.IllegalArgumentException;
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Position + size overflow");
        throw $r10;

     label2:
        $b10 = l1 cmp 2147483647L;
        if $b10 <= 0 goto label3;

        $r11 = new java.lang.IllegalArgumentException;
        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Size exceeds Integer.MAX_VALUE");
        throw $r11;

     label3:
        b2 = -1;
        $r12 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;
        if r1 != $r12 goto label4;

        b2 = 0;
        goto label6;

     label4:
        $r13 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_WRITE>;
        if r1 != $r13 goto label5;

        b2 = 1;
        goto label6;

     label5:
        $r14 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode PRIVATE>;
        if r1 != $r14 goto label6;

        b2 = 2;

     label6:
        $z0 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z0 != 0 goto label7;

        if b2 >= 0 goto label7;

        $r15 = new java.lang.AssertionError;
        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();
        throw $r15;

     label7:
        $r16 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;
        if r1 == $r16 goto label8;

        $z1 = r0.<sun.nio.ch.FileChannelImpl: boolean writable>;
        if $z1 != 0 goto label8;

        $r17 = new java.nio.channels.NonWritableChannelException;
        specialinvoke $r17.<java.nio.channels.NonWritableChannelException: void <init>()>();
        throw $r17;

     label8:
        $z2 = r0.<sun.nio.ch.FileChannelImpl: boolean readable>;
        if $z2 != 0 goto label9;

        $r18 = new java.nio.channels.NonReadableChannelException;
        specialinvoke $r18.<java.nio.channels.NonReadableChannelException: void <init>()>();
        throw $r18;

     label9:
        l3 = -1L;
        i4 = -1;

     label10:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void begin()>();
        $r19 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i4 = virtualinvoke $r19.<sun.nio.ch.NativeThreadSet: int add()>();
        $z3 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z3 != 0 goto label12;

        n0 = null;

     label11:
        $r20 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r20.<sun.nio.ch.NativeThreadSet: void remove(int)>(i4);
        $z4 = staticinvoke <sun.nio.ch.IOStatus: boolean checkAll(long)>(l3);
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z4);
        return n0;

     label12:
        $l11 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: long size()>();
        $l12 = l0 + l1;
        $b13 = $l11 cmp $l12;
        if $b13 >= 0 goto label14;

        $z5 = r0.<sun.nio.ch.FileChannelImpl: boolean writable>;
        if $z5 != 0 goto label13;

        $r21 = new java.io.IOException;
        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>("Channel not open for writing - cannot extend file to required size");
        throw $r21;

     label13:
        $r22 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r23 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        $l14 = l0 + l1;
        i15 = virtualinvoke $r22.<sun.nio.ch.FileDispatcher: int truncate(java.io.FileDescriptor,long)>($r23, $l14);
        if i15 != -3 goto label14;

        $z6 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z6 != 0 goto label13;

     label14:
        $b16 = l1 cmp 0L;
        if $b16 != 0 goto label19;

        l3 = 0L;
        $r24 = new java.io.FileDescriptor;
        specialinvoke $r24.<java.io.FileDescriptor: void <init>()>();
        r25 = $r24;
        $z7 = r0.<sun.nio.ch.FileChannelImpl: boolean writable>;
        if $z7 == 0 goto label15;

        if b2 != 0 goto label17;

     label15:
        r2 = staticinvoke <sun.nio.ch.Util: java.nio.MappedByteBuffer newMappedByteBufferR(int,long,java.io.FileDescriptor,java.lang.Runnable)>(0, 0L, r25, null);

     label16:
        $r26 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r26.<sun.nio.ch.NativeThreadSet: void remove(int)>(i4);
        $z8 = staticinvoke <sun.nio.ch.IOStatus: boolean checkAll(long)>(l3);
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z8);
        return r2;

     label17:
        r27 = staticinvoke <sun.nio.ch.Util: java.nio.MappedByteBuffer newMappedByteBuffer(int,long,java.io.FileDescriptor,java.lang.Runnable)>(0, 0L, r25, null);

     label18:
        $r28 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r28.<sun.nio.ch.NativeThreadSet: void remove(int)>(i4);
        $z9 = staticinvoke <sun.nio.ch.IOStatus: boolean checkAll(long)>(l3);
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z9);
        return r27;

     label19:
        $l17 = <sun.nio.ch.FileChannelImpl: long allocationGranularity>;
        $l18 = l0 % $l17;
        i19 = (int) $l18;
        $l20 = (long) i19;
        l21 = l0 - $l20;
        $l22 = (long) i19;
        l5 = l1 + $l22;

     label20:
        l3 = specialinvoke r0.<sun.nio.ch.FileChannelImpl: long map0(int,long,long)>(b2, l21, l5);

     label21:
        goto label29;

     label22:
        $r29 := @caughtexception;
        r3 = $r29;
        staticinvoke <java.lang.System: void gc()>();

     label23:
        staticinvoke <java.lang.Thread: void sleep(long)>(100L);

     label24:
        goto label26;

     label25:
        $r30 := @caughtexception;
        r4 = $r30;
        $r31 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        virtualinvoke $r31.<java.lang.Thread: void interrupt()>();

     label26:
        l3 = specialinvoke r0.<sun.nio.ch.FileChannelImpl: long map0(int,long,long)>(b2, l21, l5);

     label27:
        goto label29;

     label28:
        $r32 := @caughtexception;
        r33 = $r32;
        $r34 = new java.io.IOException;
        specialinvoke $r34.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Map failed", r33);
        throw $r34;

     label29:
        $r35 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r36 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        r37 = virtualinvoke $r35.<sun.nio.ch.FileDispatcher: java.io.FileDescriptor duplicateForMapping(java.io.FileDescriptor)>($r36);

     label30:
        goto label32;

     label31:
        $r38 := @caughtexception;
        r39 = $r38;
        staticinvoke <sun.nio.ch.FileChannelImpl: int unmap0(long,long)>(l3, l5);
        throw r39;

     label32:
        $z10 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z10 != 0 goto label33;

        $z11 = staticinvoke <sun.nio.ch.IOStatus: boolean checkAll(long)>(l3);
        if $z11 != 0 goto label33;

        $r40 = new java.lang.AssertionError;
        specialinvoke $r40.<java.lang.AssertionError: void <init>()>();
        throw $r40;

     label33:
        $z12 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z12 != 0 goto label34;

        $l24 = <sun.nio.ch.FileChannelImpl: long allocationGranularity>;
        $l25 = l3 % $l24;
        $b26 = $l25 cmp 0L;
        if $b26 == 0 goto label34;

        $r41 = new java.lang.AssertionError;
        specialinvoke $r41.<java.lang.AssertionError: void <init>()>();
        throw $r41;

     label34:
        i27 = (int) l1;
        $r42 = new sun.nio.ch.FileChannelImpl$Unmapper;
        specialinvoke $r42.<sun.nio.ch.FileChannelImpl$Unmapper: void <init>(long,long,int,java.io.FileDescriptor,sun.nio.ch.FileChannelImpl$1)>(l3, l5, i27, r37, null);
        r5 = $r42;
        $z13 = r0.<sun.nio.ch.FileChannelImpl: boolean writable>;
        if $z13 == 0 goto label35;

        if b2 != 0 goto label37;

     label35:
        $l28 = (long) i19;
        $l29 = l3 + $l28;
        r6 = staticinvoke <sun.nio.ch.Util: java.nio.MappedByteBuffer newMappedByteBufferR(int,long,java.io.FileDescriptor,java.lang.Runnable)>(i27, $l29, r37, r5);

     label36:
        $r43 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r43.<sun.nio.ch.NativeThreadSet: void remove(int)>(i4);
        $z14 = staticinvoke <sun.nio.ch.IOStatus: boolean checkAll(long)>(l3);
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z14);
        return r6;

     label37:
        $l30 = (long) i19;
        $l31 = l3 + $l30;
        r44 = staticinvoke <sun.nio.ch.Util: java.nio.MappedByteBuffer newMappedByteBuffer(int,long,java.io.FileDescriptor,java.lang.Runnable)>(i27, $l31, r37, r5);

     label38:
        $r45 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r45.<sun.nio.ch.NativeThreadSet: void remove(int)>(i4);
        $z15 = staticinvoke <sun.nio.ch.IOStatus: boolean checkAll(long)>(l3);
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z15);
        return r44;

     label39:
        $r46 := @caughtexception;

     label40:
        r7 = $r46;

     label41:
        $r47 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r47.<sun.nio.ch.NativeThreadSet: void remove(int)>(i4);
        $z16 = staticinvoke <sun.nio.ch.IOStatus: boolean checkAll(long)>(l3);
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>($z16);
        throw r7;

        catch java.lang.OutOfMemoryError from label20 to label21 with label22;
        catch java.lang.InterruptedException from label23 to label24 with label25;
        catch java.lang.OutOfMemoryError from label26 to label27 with label28;
        catch java.io.IOException from label29 to label30 with label31;
        catch java.lang.Throwable from label10 to label11 with label39;
        catch java.lang.Throwable from label12 to label16 with label39;
        catch java.lang.Throwable from label17 to label18 with label39;
        catch java.lang.Throwable from label19 to label36 with label39;
        catch java.lang.Throwable from label37 to label38 with label39;
        catch java.lang.Throwable from label40 to label41 with label39;
    }

    public static sun.misc.JavaNioAccess$BufferPool getMappedBufferPool()
    {
        sun.nio.ch.FileChannelImpl$1 $r0;

        $r0 = new sun.nio.ch.FileChannelImpl$1;
        specialinvoke $r0.<sun.nio.ch.FileChannelImpl$1: void <init>()>();
        return $r0;
    }

    private static boolean isSharedFileLockTable()
    {
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Class r0, $r3;
        java.lang.String r1;
        java.lang.Throwable r2, $r6;
        sun.security.action.GetPropertyAction $r4;
        java.lang.Object $r5;

        $z0 = <sun.nio.ch.FileChannelImpl: boolean propertyChecked>;
        if $z0 != 0 goto label9;

        $r3 = class "sun/nio/ch/FileChannelImpl";
        r0 = $r3;
        entermonitor $r3;

     label0:
        $z1 = <sun.nio.ch.FileChannelImpl: boolean propertyChecked>;
        if $z1 != 0 goto label4;

        $r4 = new sun.security.action.GetPropertyAction;
        specialinvoke $r4.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("sun.nio.ch.disableSystemWideOverlappingFileLockCheck");
        $r5 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r4);
        r1 = (java.lang.String) $r5;
        if r1 == null goto label1;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("false");
        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;
        goto label3;

     label2:
        $z3 = 0;

     label3:
        <sun.nio.ch.FileChannelImpl: boolean isSharedFileLockTable> = $z3;
        <sun.nio.ch.FileChannelImpl: boolean propertyChecked> = 1;

     label4:
        exitmonitor r0;

     label5:
        goto label9;

     label6:
        $r6 := @caughtexception;

     label7:
        r2 = $r6;
        exitmonitor r0;

     label8:
        throw r2;

     label9:
        $z4 = <sun.nio.ch.FileChannelImpl: boolean isSharedFileLockTable>;
        return $z4;

        catch java.lang.Throwable from label0 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private sun.nio.ch.FileLockTable fileLockTable() throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0, r1;
        int i0;
        java.lang.Throwable r2, r3, $r11, $r14;
        sun.nio.ch.FileLockTable $r4, $r6, $r9, $r15;
        boolean $z0;
        sun.nio.ch.NativeThreadSet $r7, $r10, $r12;
        java.io.FileDescriptor $r8;
        sun.nio.ch.FileChannelImpl$SimpleFileLockTable $r13;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        $r4 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileLockTable fileLockTable>;
        if $r4 != null goto label13;

        r1 = r0;
        entermonitor r0;

     label0:
        $r6 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileLockTable fileLockTable>;
        if $r6 != null goto label8;

        $z0 = staticinvoke <sun.nio.ch.FileChannelImpl: boolean isSharedFileLockTable()>();
        if $z0 == 0 goto label7;

        $r7 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i0 = virtualinvoke $r7.<sun.nio.ch.NativeThreadSet: int add()>();

     label1:
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        $r8 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        $r9 = staticinvoke <sun.nio.ch.FileLockTable: sun.nio.ch.FileLockTable newSharedFileLockTable(java.nio.channels.Channel,java.io.FileDescriptor)>(r0, $r8);
        r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileLockTable fileLockTable> = $r9;

     label2:
        $r10 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r10.<sun.nio.ch.NativeThreadSet: void remove(int)>(i0);
        goto label6;

     label3:
        $r11 := @caughtexception;

     label4:
        r2 = $r11;

     label5:
        $r12 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r12.<sun.nio.ch.NativeThreadSet: void remove(int)>(i0);
        throw r2;

     label6:
        goto label8;

     label7:
        $r13 = new sun.nio.ch.FileChannelImpl$SimpleFileLockTable;
        specialinvoke $r13.<sun.nio.ch.FileChannelImpl$SimpleFileLockTable: void <init>()>();
        r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileLockTable fileLockTable> = $r13;

     label8:
        exitmonitor r1;

     label9:
        goto label13;

     label10:
        $r14 := @caughtexception;

     label11:
        r3 = $r14;
        exitmonitor r1;

     label12:
        throw r3;

     label13:
        $r15 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileLockTable fileLockTable>;
        return $r15;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label0 to label9 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public java.nio.channels.FileLock lock(long, long, boolean) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        long l0, l1;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        sun.nio.ch.FileLockImpl r1, $r8, $r16, r17;
        sun.nio.ch.FileLockTable r2;
        int i2, i3;
        null_type n0;
        java.nio.channels.ClosedByInterruptException r3, r5, $r11, $r19, r20, $r24;
        java.lang.Throwable r4, $r22;
        java.nio.channels.NonReadableChannelException $r6;
        java.nio.channels.NonWritableChannelException $r7;
        sun.nio.ch.NativeThreadSet $r9, $r10, $r18, $r23;
        java.nio.channels.FileLockInterruptionException $r12, $r21, $r25;
        sun.nio.ch.FileDispatcher $r13;
        java.io.FileDescriptor $r14;
        java.lang.AssertionError $r15;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        z0 := @parameter2: boolean;
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        if z0 == 0 goto label0;

        $z2 = r0.<sun.nio.ch.FileChannelImpl: boolean readable>;
        if $z2 != 0 goto label0;

        $r6 = new java.nio.channels.NonReadableChannelException;
        specialinvoke $r6.<java.nio.channels.NonReadableChannelException: void <init>()>();
        throw $r6;

     label0:
        if z0 != 0 goto label1;

        $z3 = r0.<sun.nio.ch.FileChannelImpl: boolean writable>;
        if $z3 != 0 goto label1;

        $r7 = new java.nio.channels.NonWritableChannelException;
        specialinvoke $r7.<java.nio.channels.NonWritableChannelException: void <init>()>();
        throw $r7;

     label1:
        $r8 = new sun.nio.ch.FileLockImpl;
        specialinvoke $r8.<sun.nio.ch.FileLockImpl: void <init>(java.nio.channels.FileChannel,long,long,boolean)>(r0, l0, l1, z0);
        r1 = $r8;
        r2 = specialinvoke r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileLockTable fileLockTable()>();
        virtualinvoke r2.<sun.nio.ch.FileLockTable: void add(java.nio.channels.FileLock)>(r1);
        z1 = 0;
        i2 = -1;

     label2:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void begin()>();
        $r9 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i2 = virtualinvoke $r9.<sun.nio.ch.NativeThreadSet: int add()>();
        $z4 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z4 != 0 goto label9;

        n0 = null;

     label3:
        if z1 != 0 goto label4;

        virtualinvoke r2.<sun.nio.ch.FileLockTable: void remove(java.nio.channels.FileLock)>(r1);

     label4:
        $r10 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r10.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);

     label5:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>(z1);

     label6:
        goto label8;

     label7:
        $r11 := @caughtexception;
        r3 = $r11;
        $r12 = new java.nio.channels.FileLockInterruptionException;
        specialinvoke $r12.<java.nio.channels.FileLockInterruptionException: void <init>()>();
        throw $r12;

     label8:
        return n0;

     label9:
        $r13 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r14 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        i3 = virtualinvoke $r13.<sun.nio.ch.FileDispatcher: int lock(java.io.FileDescriptor,boolean,long,long,boolean)>($r14, 1, l0, l1, z0);
        if i3 != 2 goto label10;

        $z5 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z5 != 0 goto label9;

     label10:
        $z6 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: boolean isOpen()>();
        if $z6 == 0 goto label13;

        if i3 != 1 goto label12;

        $z7 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z7 != 0 goto label11;

        if z0 != 0 goto label11;

        $r15 = new java.lang.AssertionError;
        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();
        throw $r15;

     label11:
        $r16 = new sun.nio.ch.FileLockImpl;
        specialinvoke $r16.<sun.nio.ch.FileLockImpl: void <init>(java.nio.channels.FileChannel,long,long,boolean)>(r0, l0, l1, 0);
        r17 = $r16;
        virtualinvoke r2.<sun.nio.ch.FileLockTable: void replace(java.nio.channels.FileLock,java.nio.channels.FileLock)>(r1, r17);
        r1 = r17;

     label12:
        z1 = 1;

     label13:
        if z1 != 0 goto label14;

        virtualinvoke r2.<sun.nio.ch.FileLockTable: void remove(java.nio.channels.FileLock)>(r1);

     label14:
        $r18 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r18.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);

     label15:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>(z1);

     label16:
        goto label26;

     label17:
        $r19 := @caughtexception;
        r20 = $r19;
        $r21 = new java.nio.channels.FileLockInterruptionException;
        specialinvoke $r21.<java.nio.channels.FileLockInterruptionException: void <init>()>();
        throw $r21;

     label18:
        $r22 := @caughtexception;

     label19:
        r4 = $r22;

     label20:
        if z1 != 0 goto label21;

        virtualinvoke r2.<sun.nio.ch.FileLockTable: void remove(java.nio.channels.FileLock)>(r1);

     label21:
        $r23 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r23.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);

     label22:
        virtualinvoke r0.<sun.nio.ch.FileChannelImpl: void end(boolean)>(z1);

     label23:
        goto label25;

     label24:
        $r24 := @caughtexception;
        r5 = $r24;
        $r25 = new java.nio.channels.FileLockInterruptionException;
        specialinvoke $r25.<java.nio.channels.FileLockInterruptionException: void <init>()>();
        throw $r25;

     label25:
        throw r4;

     label26:
        return r1;

        catch java.nio.channels.ClosedByInterruptException from label5 to label6 with label7;
        catch java.nio.channels.ClosedByInterruptException from label15 to label16 with label17;
        catch java.lang.Throwable from label2 to label3 with label18;
        catch java.lang.Throwable from label9 to label13 with label18;
        catch java.nio.channels.ClosedByInterruptException from label22 to label23 with label24;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public java.nio.channels.FileLock tryLock(long, long, boolean) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        long l0, l1;
        boolean z0, $z1, $z2, $z3;
        sun.nio.ch.FileLockImpl r1, r4, $r8, $r15, r16, r18;
        sun.nio.ch.FileLockTable r2;
        int i2, i3;
        java.io.IOException r3, $r12;
        java.lang.Throwable r5, $r20;
        java.nio.channels.NonReadableChannelException $r6;
        java.nio.channels.NonWritableChannelException $r7;
        sun.nio.ch.NativeThreadSet $r9, $r13, $r17, $r19, $r21;
        sun.nio.ch.FileDispatcher $r10;
        java.io.FileDescriptor $r11;
        null_type n0;
        java.lang.AssertionError $r14;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        z0 := @parameter2: boolean;
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        if z0 == 0 goto label0;

        $z1 = r0.<sun.nio.ch.FileChannelImpl: boolean readable>;
        if $z1 != 0 goto label0;

        $r6 = new java.nio.channels.NonReadableChannelException;
        specialinvoke $r6.<java.nio.channels.NonReadableChannelException: void <init>()>();
        throw $r6;

     label0:
        if z0 != 0 goto label1;

        $z2 = r0.<sun.nio.ch.FileChannelImpl: boolean writable>;
        if $z2 != 0 goto label1;

        $r7 = new java.nio.channels.NonWritableChannelException;
        specialinvoke $r7.<java.nio.channels.NonWritableChannelException: void <init>()>();
        throw $r7;

     label1:
        $r8 = new sun.nio.ch.FileLockImpl;
        specialinvoke $r8.<sun.nio.ch.FileLockImpl: void <init>(java.nio.channels.FileChannel,long,long,boolean)>(r0, l0, l1, z0);
        r1 = $r8;
        r2 = specialinvoke r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileLockTable fileLockTable()>();
        virtualinvoke r2.<sun.nio.ch.FileLockTable: void add(java.nio.channels.FileLock)>(r1);
        $r9 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i2 = virtualinvoke $r9.<sun.nio.ch.NativeThreadSet: int add()>();

     label2:
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        $r10 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r11 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        i3 = virtualinvoke $r10.<sun.nio.ch.FileDispatcher: int lock(java.io.FileDescriptor,boolean,long,long,boolean)>($r11, 0, l0, l1, z0);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;
        r3 = $r12;
        virtualinvoke r2.<sun.nio.ch.FileLockTable: void remove(java.nio.channels.FileLock)>(r1);
        throw r3;

     label5:
        if i3 != -1 goto label7;

        virtualinvoke r2.<sun.nio.ch.FileLockTable: void remove(java.nio.channels.FileLock)>(r1);
        n0 = null;

     label6:
        $r13 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r13.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);
        return n0;

     label7:
        if i3 != 1 goto label10;

        $z3 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z3 != 0 goto label8;

        if z0 != 0 goto label8;

        $r14 = new java.lang.AssertionError;
        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();
        throw $r14;

     label8:
        $r15 = new sun.nio.ch.FileLockImpl;
        specialinvoke $r15.<sun.nio.ch.FileLockImpl: void <init>(java.nio.channels.FileChannel,long,long,boolean)>(r0, l0, l1, 0);
        r16 = $r15;
        virtualinvoke r2.<sun.nio.ch.FileLockTable: void replace(java.nio.channels.FileLock,java.nio.channels.FileLock)>(r1, r16);
        r4 = r16;

     label9:
        $r17 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r17.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);
        return r4;

     label10:
        r18 = r1;

     label11:
        $r19 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r19.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);
        return r18;

     label12:
        $r20 := @caughtexception;

     label13:
        r5 = $r20;

     label14:
        $r21 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r21.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);
        throw r5;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label6 with label12;
        catch java.lang.Throwable from label7 to label9 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    void release(sun.nio.ch.FileLockImpl) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        sun.nio.ch.FileLockImpl r1;
        int i0;
        java.lang.Throwable r2, $r7;
        sun.nio.ch.NativeThreadSet $r3, $r6, $r8;
        sun.nio.ch.FileDispatcher $r4;
        java.io.FileDescriptor $r5;
        long $l1, $l2;
        boolean $z0;
        sun.nio.ch.FileLockTable $r9, $r11;
        java.lang.AssertionError $r10;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        r1 := @parameter0: sun.nio.ch.FileLockImpl;
        $r3 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i0 = virtualinvoke $r3.<sun.nio.ch.NativeThreadSet: int add()>();

     label0:
        specialinvoke r0.<sun.nio.ch.FileChannelImpl: void ensureOpen()>();
        $r4 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r5 = r0.<sun.nio.ch.FileChannelImpl: java.io.FileDescriptor fd>;
        $l1 = virtualinvoke r1.<sun.nio.ch.FileLockImpl: long position()>();
        $l2 = virtualinvoke r1.<sun.nio.ch.FileLockImpl: long size()>();
        virtualinvoke $r4.<sun.nio.ch.FileDispatcher: void release(java.io.FileDescriptor,long,long)>($r5, $l1, $l2);

     label1:
        $r6 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r6.<sun.nio.ch.NativeThreadSet: void remove(int)>(i0);
        goto label5;

     label2:
        $r7 := @caughtexception;

     label3:
        r2 = $r7;

     label4:
        $r8 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r8.<sun.nio.ch.NativeThreadSet: void remove(int)>(i0);
        throw r2;

     label5:
        $z0 = <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled>;
        if $z0 != 0 goto label6;

        $r9 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileLockTable fileLockTable>;
        if $r9 != null goto label6;

        $r10 = new java.lang.AssertionError;
        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();
        throw $r10;

     label6:
        $r11 = r0.<sun.nio.ch.FileChannelImpl: sun.nio.ch.FileLockTable fileLockTable>;
        virtualinvoke $r11.<sun.nio.ch.FileLockTable: void remove(java.nio.channels.FileLock)>(r1);
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    private native long map0(int, long, long) throws java.io.IOException;

    private static native int unmap0(long, long);

    private native long transferTo0(int, long, long, int);

    private native long position0(java.io.FileDescriptor, long);

    private static native long initIDs();

    public volatile java.nio.channels.SeekableByteChannel truncate(long) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        long l0;
        java.nio.channels.FileChannel $r1;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        l0 := @parameter0: long;
        $r1 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: java.nio.channels.FileChannel truncate(long)>(l0);
        return $r1;
    }

    public volatile java.nio.channels.SeekableByteChannel position(long) throws java.io.IOException
    {
        sun.nio.ch.FileChannelImpl r0;
        long l0;
        java.nio.channels.FileChannel $r1;

        r0 := @this: sun.nio.ch.FileChannelImpl;
        l0 := @parameter0: long;
        $r1 = virtualinvoke r0.<sun.nio.ch.FileChannelImpl: java.nio.channels.FileChannel position(long)>(l0);
        return $r1;
    }

    static int access$000(long, long)
    {
        long l0, l1;
        int $i2;

        l0 := @parameter0: long;
        l1 := @parameter1: long;
        $i2 = staticinvoke <sun.nio.ch.FileChannelImpl: int unmap0(long,long)>(l0, l1);
        return $i2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        long $l0;

        $r0 = class "sun/nio/ch/FileChannelImpl";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.ch.FileChannelImpl: boolean $assertionsDisabled> = $z1;
        <sun.nio.ch.FileChannelImpl: boolean transferSupported> = 1;
        <sun.nio.ch.FileChannelImpl: boolean pipeSupported> = 1;
        <sun.nio.ch.FileChannelImpl: boolean fileSupported> = 1;
        staticinvoke <sun.nio.ch.Util: void load()>();
        $l0 = staticinvoke <sun.nio.ch.FileChannelImpl: long initIDs()>();
        <sun.nio.ch.FileChannelImpl: long allocationGranularity> = $l0;
        return;
    }
}
