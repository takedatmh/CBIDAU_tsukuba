public abstract class java.security.Policy extends java.lang.Object
{
    public static final java.security.PermissionCollection UNSUPPORTED_EMPTY_COLLECTION;
    private static java.util.concurrent.atomic.AtomicReference policy;
    private static final sun.security.util.Debug debug;
    private java.util.WeakHashMap pdMapping;

    public void <init>()
    {
        java.security.Policy r0;

        r0 := @this: java.security.Policy;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    static boolean isSet()
    {
        java.util.concurrent.atomic.AtomicReference $r0;
        java.security.Policy$PolicyInfo r1;
        java.lang.Object $r2;
        java.security.Policy $r3;
        boolean $z0, $z1;

        $r0 = <java.security.Policy: java.util.concurrent.atomic.AtomicReference policy>;
        $r2 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
        r1 = (java.security.Policy$PolicyInfo) $r2;
        $r3 = r1.<java.security.Policy$PolicyInfo: java.security.Policy policy>;
        if $r3 == null goto label0;

        $z0 = r1.<java.security.Policy$PolicyInfo: boolean initialized>;
        if $z0 != 1 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    private static void checkPermission(java.lang.String)
    {
        java.lang.String r0, $r6;
        java.lang.SecurityManager r1;
        java.security.SecurityPermission $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = new java.security.SecurityPermission;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createPolicy.");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.security.SecurityPermission: void <init>(java.lang.String)>($r6);
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label0:
        return;
    }

    public static java.security.Policy getPolicy()
    {
        java.lang.SecurityManager r0;
        java.security.SecurityPermission $r1;
        java.security.Policy $r2;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r0 == null goto label0;

        $r1 = <sun.security.util.SecurityConstants: java.security.SecurityPermission GET_POLICY_PERMISSION>;
        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r1);

     label0:
        $r2 = staticinvoke <java.security.Policy: java.security.Policy getPolicyNoCheck()>();
        return $r2;
    }

    static java.security.Policy getPolicyNoCheck()
    {
        java.util.concurrent.atomic.AtomicReference $r0, $r13, $r26, $r33;
        java.security.Policy$PolicyInfo r1, r3, $r18, $r24, r25, $r29, $r32;
        java.lang.Class r2, $r12, $r19;
        java.lang.String r4, r7;
        java.lang.Exception r5, $r22;
        sun.security.provider.PolicyFile r6, $r23;
        java.security.Policy r8, $r11, $r15, $r21, $r34, $r36;
        java.lang.Throwable r9, $r35;
        java.lang.Object $r10, $r14, $r17, $r20, $r28;
        boolean $z0;
        java.security.Policy$1 $r16;
        java.security.Policy$2 $r27;
        sun.security.util.Debug $r30, $r31;

        $r0 = <java.security.Policy: java.util.concurrent.atomic.AtomicReference policy>;
        $r10 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
        r1 = (java.security.Policy$PolicyInfo) $r10;
        $z0 = r1.<java.security.Policy$PolicyInfo: boolean initialized>;
        if $z0 == 0 goto label0;

        $r11 = r1.<java.security.Policy$PolicyInfo: java.security.Policy policy>;
        if $r11 != null goto label13;

     label0:
        $r12 = class "java/security/Policy";
        r2 = $r12;
        entermonitor $r12;

     label1:
        $r13 = <java.security.Policy: java.util.concurrent.atomic.AtomicReference policy>;
        $r14 = virtualinvoke $r13.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
        r3 = (java.security.Policy$PolicyInfo) $r14;
        $r15 = r3.<java.security.Policy$PolicyInfo: java.security.Policy policy>;
        if $r15 != null goto label8;

        $r16 = new java.security.Policy$1;
        specialinvoke $r16.<java.security.Policy$1: void <init>()>();
        $r17 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r16);
        r4 = (java.lang.String) $r17;
        if r4 != null goto label2;

        r4 = "sun.security.provider.PolicyFile";

     label2:
        $r18 = new java.security.Policy$PolicyInfo;
        $r19 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r4);
        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.Object newInstance()>();
        $r21 = (java.security.Policy) $r20;
        specialinvoke $r18.<java.security.Policy$PolicyInfo: void <init>(java.security.Policy,boolean)>($r21, 1);
        r3 = $r18;

     label3:
        goto label7;

     label4:
        $r22 := @caughtexception;
        r5 = $r22;
        $r23 = new sun.security.provider.PolicyFile;
        specialinvoke $r23.<sun.security.provider.PolicyFile: void <init>()>();
        r6 = $r23;
        $r24 = new java.security.Policy$PolicyInfo;
        specialinvoke $r24.<java.security.Policy$PolicyInfo: void <init>(java.security.Policy,boolean)>(r6, 0);
        r25 = $r24;
        $r26 = <java.security.Policy: java.util.concurrent.atomic.AtomicReference policy>;
        virtualinvoke $r26.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r25);
        r7 = r4;
        $r27 = new java.security.Policy$2;
        specialinvoke $r27.<java.security.Policy$2: void <init>(java.lang.String)>(r7);
        $r28 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r27);
        r8 = (java.security.Policy) $r28;
        if r8 == null goto label5;

        $r29 = new java.security.Policy$PolicyInfo;
        specialinvoke $r29.<java.security.Policy$PolicyInfo: void <init>(java.security.Policy,boolean)>(r8, 1);
        r3 = $r29;
        goto label7;

     label5:
        $r30 = <java.security.Policy: sun.security.util.Debug debug>;
        if $r30 == null goto label6;

        $r31 = <java.security.Policy: sun.security.util.Debug debug>;
        virtualinvoke $r31.<sun.security.util.Debug: void println(java.lang.String)>("using sun.security.provider.PolicyFile");

     label6:
        $r32 = new java.security.Policy$PolicyInfo;
        specialinvoke $r32.<java.security.Policy$PolicyInfo: void <init>(java.security.Policy,boolean)>(r6, 1);
        r3 = $r32;

     label7:
        $r33 = <java.security.Policy: java.util.concurrent.atomic.AtomicReference policy>;
        virtualinvoke $r33.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r3);

     label8:
        $r34 = r3.<java.security.Policy$PolicyInfo: java.security.Policy policy>;
        exitmonitor r2;

     label9:
        return $r34;

     label10:
        $r35 := @caughtexception;

     label11:
        r9 = $r35;
        exitmonitor r2;

     label12:
        throw r9;

     label13:
        $r36 = r1.<java.security.Policy$PolicyInfo: java.security.Policy policy>;
        return $r36;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label9 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public static void setPolicy(java.security.Policy)
    {
        java.security.Policy r0;
        java.lang.SecurityManager r1;
        java.security.SecurityPermission $r2;
        java.lang.Class r3, $r5;
        java.lang.Throwable r4, $r10;
        java.util.concurrent.atomic.AtomicReference $r6;
        java.security.Policy$PolicyInfo $r7;
        boolean $z0;

        r0 := @parameter0: java.security.Policy;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = new java.security.SecurityPermission;
        specialinvoke $r2.<java.security.SecurityPermission: void <init>(java.lang.String)>("setPolicy");
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label0:
        if r0 == null goto label1;

        staticinvoke <java.security.Policy: void initPolicy(java.security.Policy)>(r0);

     label1:
        $r5 = class "java/security/Policy";
        r3 = $r5;
        entermonitor $r5;

     label2:
        $r6 = <java.security.Policy: java.util.concurrent.atomic.AtomicReference policy>;
        $r7 = new java.security.Policy$PolicyInfo;
        if r0 == null goto label3;

        $z0 = 1;
        goto label4;

     label3:
        $z0 = 0;

     label4:
        specialinvoke $r7.<java.security.Policy$PolicyInfo: void <init>(java.security.Policy,boolean)>(r0, $z0);
        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r7);
        exitmonitor r3;

     label5:
        goto label9;

     label6:
        $r10 := @caughtexception;

     label7:
        r4 = $r10;
        exitmonitor r3;

     label8:
        throw r4;

     label9:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private static void initPolicy(java.security.Policy)
    {
        java.security.Policy r0, r4, r16;
        java.security.Policy$3 $r1;
        java.security.ProtectionDomain r2;
        java.security.PermissionCollection r3;
        java.lang.Throwable r5, r6, $r11, $r24;
        java.lang.Object $r7, $r14;
        java.util.WeakHashMap $r9, $r10, $r19, r20, $r21;
        java.security.CodeSource $r12;
        java.util.concurrent.atomic.AtomicReference $r13;
        java.security.Policy$PolicyInfo $r15;
        java.security.Permissions $r17;
        java.security.AllPermission $r18;
        java.security.ProtectionDomain$Key $r22;

        r0 := @parameter0: java.security.Policy;
        $r1 = new java.security.Policy$3;
        specialinvoke $r1.<java.security.Policy$3: void <init>(java.security.Policy)>(r0);
        $r7 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        r2 = (java.security.ProtectionDomain) $r7;
        r3 = null;
        r4 = r0;
        entermonitor r0;

     label0:
        $r9 = r0.<java.security.Policy: java.util.WeakHashMap pdMapping>;
        if $r9 != null goto label1;

        $r10 = new java.util.WeakHashMap;
        specialinvoke $r10.<java.util.WeakHashMap: void <init>()>();
        r0.<java.security.Policy: java.util.WeakHashMap pdMapping> = $r10;

     label1:
        exitmonitor r4;

     label2:
        goto label6;

     label3:
        $r11 := @caughtexception;

     label4:
        r5 = $r11;
        exitmonitor r4;

     label5:
        throw r5;

     label6:
        $r12 = virtualinvoke r2.<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>();
        if $r12 == null goto label14;

        $r13 = <java.security.Policy: java.util.concurrent.atomic.AtomicReference policy>;
        $r14 = virtualinvoke $r13.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
        $r15 = (java.security.Policy$PolicyInfo) $r14;
        r16 = $r15.<java.security.Policy$PolicyInfo: java.security.Policy policy>;
        if r16 == null goto label7;

        r3 = virtualinvoke r16.<java.security.Policy: java.security.PermissionCollection getPermissions(java.security.ProtectionDomain)>(r2);

     label7:
        if r3 != null goto label8;

        $r17 = new java.security.Permissions;
        specialinvoke $r17.<java.security.Permissions: void <init>()>();
        r3 = $r17;
        $r18 = <sun.security.util.SecurityConstants: java.security.AllPermission ALL_PERMISSION>;
        virtualinvoke r3.<java.security.PermissionCollection: void add(java.security.Permission)>($r18);

     label8:
        $r19 = r0.<java.security.Policy: java.util.WeakHashMap pdMapping>;
        r20 = $r19;
        entermonitor $r19;

     label9:
        $r21 = r0.<java.security.Policy: java.util.WeakHashMap pdMapping>;
        $r22 = r2.<java.security.ProtectionDomain: java.security.ProtectionDomain$Key key>;
        virtualinvoke $r21.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, r3);
        exitmonitor r20;

     label10:
        goto label14;

     label11:
        $r24 := @caughtexception;

     label12:
        r6 = $r24;
        exitmonitor r20;

     label13:
        throw r6;

     label14:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label9 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public static java.security.Policy getInstance(java.lang.String, java.security.Policy$Parameters) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        java.security.Policy$Parameters r1;
        sun.security.jca.GetInstance$Instance r2;
        java.security.Policy$PolicyDelegate $r3;
        java.lang.Object $r4;
        java.security.PolicySpi $r5;
        java.security.Provider $r6;
        java.security.NoSuchAlgorithmException $r7, r8;
        java.security.Policy $r9;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.security.Policy$Parameters;
        staticinvoke <java.security.Policy: void checkPermission(java.lang.String)>(r0);

     label0:
        r2 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.lang.Object)>("Policy", class "java/security/PolicySpi", r0, r1);
        $r3 = new java.security.Policy$PolicyDelegate;
        $r4 = r2.<sun.security.jca.GetInstance$Instance: java.lang.Object impl>;
        $r5 = (java.security.PolicySpi) $r4;
        $r6 = r2.<sun.security.jca.GetInstance$Instance: java.security.Provider provider>;
        specialinvoke $r3.<java.security.Policy$PolicyDelegate: void <init>(java.security.PolicySpi,java.security.Provider,java.lang.String,java.security.Policy$Parameters,java.security.Policy$1)>($r5, $r6, r0, r1, null);

     label1:
        return $r3;

     label2:
        $r7 := @caughtexception;
        r8 = $r7;
        $r9 = staticinvoke <java.security.Policy: java.security.Policy handleException(java.security.NoSuchAlgorithmException)>(r8);
        return $r9;

        catch java.security.NoSuchAlgorithmException from label0 to label1 with label2;
    }

    public static java.security.Policy getInstance(java.lang.String, java.security.Policy$Parameters, java.lang.String) throws java.security.NoSuchProviderException, java.security.NoSuchAlgorithmException
    {
        java.lang.String r0, r2;
        java.security.Policy$Parameters r1;
        sun.security.jca.GetInstance$Instance r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;
        java.security.Policy$PolicyDelegate $r5;
        java.lang.Object $r6;
        java.security.PolicySpi $r7;
        java.security.Provider $r8;
        java.security.NoSuchAlgorithmException $r9, r10;
        java.security.Policy $r11;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.security.Policy$Parameters;
        r2 := @parameter2: java.lang.String;
        if r2 == null goto label0;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i0 != 0 goto label1;

     label0:
        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("missing provider");
        throw $r4;

     label1:
        staticinvoke <java.security.Policy: void checkPermission(java.lang.String)>(r0);

     label2:
        r3 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.lang.Object,java.lang.String)>("Policy", class "java/security/PolicySpi", r0, r1, r2);
        $r5 = new java.security.Policy$PolicyDelegate;
        $r6 = r3.<sun.security.jca.GetInstance$Instance: java.lang.Object impl>;
        $r7 = (java.security.PolicySpi) $r6;
        $r8 = r3.<sun.security.jca.GetInstance$Instance: java.security.Provider provider>;
        specialinvoke $r5.<java.security.Policy$PolicyDelegate: void <init>(java.security.PolicySpi,java.security.Provider,java.lang.String,java.security.Policy$Parameters,java.security.Policy$1)>($r7, $r8, r0, r1, null);

     label3:
        return $r5;

     label4:
        $r9 := @caughtexception;
        r10 = $r9;
        $r11 = staticinvoke <java.security.Policy: java.security.Policy handleException(java.security.NoSuchAlgorithmException)>(r10);
        return $r11;

        catch java.security.NoSuchAlgorithmException from label2 to label3 with label4;
    }

    public static java.security.Policy getInstance(java.lang.String, java.security.Policy$Parameters, java.security.Provider) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        java.security.Policy$Parameters r1;
        java.security.Provider r2, $r8;
        sun.security.jca.GetInstance$Instance r3;
        java.lang.IllegalArgumentException $r4;
        java.security.Policy$PolicyDelegate $r5;
        java.lang.Object $r6;
        java.security.PolicySpi $r7;
        java.security.NoSuchAlgorithmException $r9, r10;
        java.security.Policy $r11;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.security.Policy$Parameters;
        r2 := @parameter2: java.security.Provider;
        if r2 != null goto label0;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("missing provider");
        throw $r4;

     label0:
        staticinvoke <java.security.Policy: void checkPermission(java.lang.String)>(r0);

     label1:
        r3 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.lang.Object,java.security.Provider)>("Policy", class "java/security/PolicySpi", r0, r1, r2);
        $r5 = new java.security.Policy$PolicyDelegate;
        $r6 = r3.<sun.security.jca.GetInstance$Instance: java.lang.Object impl>;
        $r7 = (java.security.PolicySpi) $r6;
        $r8 = r3.<sun.security.jca.GetInstance$Instance: java.security.Provider provider>;
        specialinvoke $r5.<java.security.Policy$PolicyDelegate: void <init>(java.security.PolicySpi,java.security.Provider,java.lang.String,java.security.Policy$Parameters,java.security.Policy$1)>($r7, $r8, r0, r1, null);

     label2:
        return $r5;

     label3:
        $r9 := @caughtexception;
        r10 = $r9;
        $r11 = staticinvoke <java.security.Policy: java.security.Policy handleException(java.security.NoSuchAlgorithmException)>(r10);
        return $r11;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private static java.security.Policy handleException(java.security.NoSuchAlgorithmException) throws java.security.NoSuchAlgorithmException
    {
        java.security.NoSuchAlgorithmException r0;
        java.lang.Throwable r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.security.NoSuchAlgorithmException;
        r1 = virtualinvoke r0.<java.security.NoSuchAlgorithmException: java.lang.Throwable getCause()>();
        $z0 = r1 instanceof java.lang.IllegalArgumentException;
        if $z0 == 0 goto label0;

        $r2 = (java.lang.IllegalArgumentException) r1;
        throw $r2;

     label0:
        throw r0;
    }

    public java.security.Provider getProvider()
    {
        java.security.Policy r0;

        r0 := @this: java.security.Policy;
        return null;
    }

    public java.lang.String getType()
    {
        java.security.Policy r0;

        r0 := @this: java.security.Policy;
        return null;
    }

    public java.security.Policy$Parameters getParameters()
    {
        java.security.Policy r0;

        r0 := @this: java.security.Policy;
        return null;
    }

    public java.security.PermissionCollection getPermissions(java.security.CodeSource)
    {
        java.security.Policy r0;
        java.security.CodeSource r1;
        java.security.PermissionCollection $r2;

        r0 := @this: java.security.Policy;
        r1 := @parameter0: java.security.CodeSource;
        $r2 = <java.security.Policy: java.security.PermissionCollection UNSUPPORTED_EMPTY_COLLECTION>;
        return $r2;
    }

    public java.security.PermissionCollection getPermissions(java.security.ProtectionDomain)
    {
        java.security.Policy r0;
        java.security.ProtectionDomain r1;
        null_type n0;
        java.util.WeakHashMap r2, $r7, $r8, $r9;
        java.lang.Throwable r3, r5, $r13, $r20;
        java.util.Enumeration r4;
        java.security.Permissions $r6, $r14, r15, $r24;
        java.security.ProtectionDomain$Key $r10;
        java.lang.Object $r11, $r18;
        java.security.PermissionCollection r12, r17, r22, $r23, $r25;
        boolean $z0;
        java.security.Permission $r19;
        java.security.CodeSource $r21;

        r0 := @this: java.security.Policy;
        r1 := @parameter0: java.security.ProtectionDomain;
        n0 = null;
        if r1 != null goto label0;

        $r6 = new java.security.Permissions;
        specialinvoke $r6.<java.security.Permissions: void <init>()>();
        return $r6;

     label0:
        $r7 = r0.<java.security.Policy: java.util.WeakHashMap pdMapping>;
        if $r7 != null goto label1;

        staticinvoke <java.security.Policy: void initPolicy(java.security.Policy)>(r0);

     label1:
        $r8 = r0.<java.security.Policy: java.util.WeakHashMap pdMapping>;
        r2 = $r8;
        entermonitor $r8;

     label2:
        $r9 = r0.<java.security.Policy: java.util.WeakHashMap pdMapping>;
        $r10 = r1.<java.security.ProtectionDomain: java.security.ProtectionDomain$Key key>;
        $r11 = virtualinvoke $r9.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>($r10);
        r12 = (java.security.PermissionCollection) $r11;
        exitmonitor r2;

     label3:
        goto label7;

     label4:
        $r13 := @caughtexception;

     label5:
        r3 = $r13;
        exitmonitor r2;

     label6:
        throw r3;

     label7:
        if r12 == null goto label16;

        $r14 = new java.security.Permissions;
        specialinvoke $r14.<java.security.Permissions: void <init>()>();
        r15 = $r14;
        r17 = r12;
        entermonitor r12;

     label8:
        r4 = virtualinvoke r12.<java.security.PermissionCollection: java.util.Enumeration elements()>();

     label9:
        $z0 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label10;

        $r18 = interfaceinvoke r4.<java.util.Enumeration: java.lang.Object nextElement()>();
        $r19 = (java.security.Permission) $r18;
        virtualinvoke r15.<java.security.Permissions: void add(java.security.Permission)>($r19);
        goto label9;

     label10:
        exitmonitor r17;

     label11:
        goto label15;

     label12:
        $r20 := @caughtexception;

     label13:
        r5 = $r20;
        exitmonitor r17;

     label14:
        throw r5;

     label15:
        return r15;

     label16:
        $r21 = virtualinvoke r1.<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>();
        r22 = virtualinvoke r0.<java.security.Policy: java.security.PermissionCollection getPermissions(java.security.CodeSource)>($r21);
        if r22 == null goto label17;

        $r23 = <java.security.Policy: java.security.PermissionCollection UNSUPPORTED_EMPTY_COLLECTION>;
        if r22 != $r23 goto label18;

     label17:
        $r24 = new java.security.Permissions;
        specialinvoke $r24.<java.security.Permissions: void <init>()>();
        r22 = $r24;

     label18:
        $r25 = virtualinvoke r1.<java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()>();
        specialinvoke r0.<java.security.Policy: void addStaticPerms(java.security.PermissionCollection,java.security.PermissionCollection)>(r22, $r25);
        return r22;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label8 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private void addStaticPerms(java.security.PermissionCollection, java.security.PermissionCollection)
    {
        java.security.Policy r0;
        java.security.PermissionCollection r1, r2, r3;
        java.util.Enumeration r4;
        java.lang.Throwable r5, $r9;
        boolean $z0;
        java.lang.Object $r7;
        java.security.Permission $r8;

        r0 := @this: java.security.Policy;
        r1 := @parameter0: java.security.PermissionCollection;
        r2 := @parameter1: java.security.PermissionCollection;
        if r2 == null goto label7;

        r3 = r2;
        entermonitor r2;

     label0:
        r4 = virtualinvoke r2.<java.security.PermissionCollection: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r4.<java.util.Enumeration: java.lang.Object nextElement()>();
        $r8 = (java.security.Permission) $r7;
        virtualinvoke r1.<java.security.PermissionCollection: void add(java.security.Permission)>($r8);
        goto label1;

     label2:
        exitmonitor r3;

     label3:
        goto label7;

     label4:
        $r9 := @caughtexception;

     label5:
        r5 = $r9;
        exitmonitor r3;

     label6:
        throw r5;

     label7:
        return;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean implies(java.security.ProtectionDomain, java.security.Permission)
    {
        java.security.Policy r0;
        java.security.ProtectionDomain r1;
        java.security.Permission r2;
        java.util.WeakHashMap r3, $r7, $r8, $r9, $r14, r15, $r16;
        java.security.PermissionCollection r4, r13;
        java.lang.Throwable r5, r6, $r12, $r19;
        java.security.ProtectionDomain$Key $r10, $r17;
        java.lang.Object $r11;
        boolean $z0, $z1;

        r0 := @this: java.security.Policy;
        r1 := @parameter0: java.security.ProtectionDomain;
        r2 := @parameter1: java.security.Permission;
        $r7 = r0.<java.security.Policy: java.util.WeakHashMap pdMapping>;
        if $r7 != null goto label0;

        staticinvoke <java.security.Policy: void initPolicy(java.security.Policy)>(r0);

     label0:
        $r8 = r0.<java.security.Policy: java.util.WeakHashMap pdMapping>;
        r3 = $r8;
        entermonitor $r8;

     label1:
        $r9 = r0.<java.security.Policy: java.util.WeakHashMap pdMapping>;
        $r10 = r1.<java.security.ProtectionDomain: java.security.ProtectionDomain$Key key>;
        $r11 = virtualinvoke $r9.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>($r10);
        r4 = (java.security.PermissionCollection) $r11;
        exitmonitor r3;

     label2:
        goto label6;

     label3:
        $r12 := @caughtexception;

     label4:
        r5 = $r12;
        exitmonitor r3;

     label5:
        throw r5;

     label6:
        if r4 == null goto label7;

        $z0 = virtualinvoke r4.<java.security.PermissionCollection: boolean implies(java.security.Permission)>(r2);
        return $z0;

     label7:
        r13 = virtualinvoke r0.<java.security.Policy: java.security.PermissionCollection getPermissions(java.security.ProtectionDomain)>(r1);
        if r13 != null goto label8;

        return 0;

     label8:
        $r14 = r0.<java.security.Policy: java.util.WeakHashMap pdMapping>;
        r15 = $r14;
        entermonitor $r14;

     label9:
        $r16 = r0.<java.security.Policy: java.util.WeakHashMap pdMapping>;
        $r17 = r1.<java.security.ProtectionDomain: java.security.ProtectionDomain$Key key>;
        virtualinvoke $r16.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r13);
        exitmonitor r15;

     label10:
        goto label14;

     label11:
        $r19 := @caughtexception;

     label12:
        r6 = $r19;
        exitmonitor r15;

     label13:
        throw r6;

     label14:
        $z1 = virtualinvoke r13.<java.security.PermissionCollection: boolean implies(java.security.Permission)>(r2);
        return $z1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label9 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void refresh()
    {
        java.security.Policy r0;

        r0 := @this: java.security.Policy;
        return;
    }

    static sun.security.util.Debug access$000()
    {
        sun.security.util.Debug $r0;

        $r0 = <java.security.Policy: sun.security.util.Debug debug>;
        return $r0;
    }

    static void <clinit>()
    {
        java.security.Policy$UnsupportedEmptyCollection $r0;
        java.security.Policy$PolicyInfo $r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        sun.security.util.Debug $r3;

        $r0 = new java.security.Policy$UnsupportedEmptyCollection;
        specialinvoke $r0.<java.security.Policy$UnsupportedEmptyCollection: void <init>()>();
        <java.security.Policy: java.security.PermissionCollection UNSUPPORTED_EMPTY_COLLECTION> = $r0;
        $r2 = new java.util.concurrent.atomic.AtomicReference;
        $r1 = new java.security.Policy$PolicyInfo;
        specialinvoke $r1.<java.security.Policy$PolicyInfo: void <init>(java.security.Policy,boolean)>(null, 0);
        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r1);
        <java.security.Policy: java.util.concurrent.atomic.AtomicReference policy> = $r2;
        $r3 = staticinvoke <sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String)>("policy");
        <java.security.Policy: sun.security.util.Debug debug> = $r3;
        return;
    }
}
