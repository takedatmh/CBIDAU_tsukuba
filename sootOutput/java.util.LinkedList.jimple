public class java.util.LinkedList extends java.util.AbstractSequentialList implements java.util.List, java.util.Deque, java.lang.Cloneable, java.io.Serializable
{
    transient int size;
    transient java.util.LinkedList$Node first;
    transient java.util.LinkedList$Node last;
    private static final long serialVersionUID;

    public void <init>()
    {
        java.util.LinkedList r0;

        r0 := @this: java.util.LinkedList;
        specialinvoke r0.<java.util.AbstractSequentialList: void <init>()>();
        r0.<java.util.LinkedList: int size> = 0;
        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.LinkedList r0;
        java.util.Collection r1;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.util.Collection;
        specialinvoke r0.<java.util.LinkedList: void <init>()>();
        virtualinvoke r0.<java.util.LinkedList: boolean addAll(java.util.Collection)>(r1);
        return;
    }

    private void linkFirst(java.lang.Object)
    {
        java.util.LinkedList r0;
        java.lang.Object r1;
        java.util.LinkedList$Node r2, r3, $r4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.lang.Object;
        r2 = r0.<java.util.LinkedList: java.util.LinkedList$Node first>;
        $r4 = new java.util.LinkedList$Node;
        specialinvoke $r4.<java.util.LinkedList$Node: void <init>(java.util.LinkedList$Node,java.lang.Object,java.util.LinkedList$Node)>(null, r1, r2);
        r3 = $r4;
        r0.<java.util.LinkedList: java.util.LinkedList$Node first> = r3;
        if r2 != null goto label0;

        r0.<java.util.LinkedList: java.util.LinkedList$Node last> = r3;
        goto label1;

     label0:
        r2.<java.util.LinkedList$Node: java.util.LinkedList$Node prev> = r3;

     label1:
        $i0 = r0.<java.util.LinkedList: int size>;
        $i1 = $i0 + 1;
        r0.<java.util.LinkedList: int size> = $i1;
        $i2 = r0.<java.util.LinkedList: int modCount>;
        $i3 = $i2 + 1;
        r0.<java.util.LinkedList: int modCount> = $i3;
        return;
    }

    void linkLast(java.lang.Object)
    {
        java.util.LinkedList r0;
        java.lang.Object r1;
        java.util.LinkedList$Node r2, r3, $r4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.lang.Object;
        r2 = r0.<java.util.LinkedList: java.util.LinkedList$Node last>;
        $r4 = new java.util.LinkedList$Node;
        specialinvoke $r4.<java.util.LinkedList$Node: void <init>(java.util.LinkedList$Node,java.lang.Object,java.util.LinkedList$Node)>(r2, r1, null);
        r3 = $r4;
        r0.<java.util.LinkedList: java.util.LinkedList$Node last> = r3;
        if r2 != null goto label0;

        r0.<java.util.LinkedList: java.util.LinkedList$Node first> = r3;
        goto label1;

     label0:
        r2.<java.util.LinkedList$Node: java.util.LinkedList$Node next> = r3;

     label1:
        $i0 = r0.<java.util.LinkedList: int size>;
        $i1 = $i0 + 1;
        r0.<java.util.LinkedList: int size> = $i1;
        $i2 = r0.<java.util.LinkedList: int modCount>;
        $i3 = $i2 + 1;
        r0.<java.util.LinkedList: int modCount> = $i3;
        return;
    }

    void linkBefore(java.lang.Object, java.util.LinkedList$Node)
    {
        java.util.LinkedList r0;
        java.lang.Object r1;
        java.util.LinkedList$Node r2, r3, r4, $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.util.LinkedList$Node;
        r3 = r2.<java.util.LinkedList$Node: java.util.LinkedList$Node prev>;
        $r5 = new java.util.LinkedList$Node;
        specialinvoke $r5.<java.util.LinkedList$Node: void <init>(java.util.LinkedList$Node,java.lang.Object,java.util.LinkedList$Node)>(r3, r1, r2);
        r4 = $r5;
        r2.<java.util.LinkedList$Node: java.util.LinkedList$Node prev> = r4;
        if r3 != null goto label0;

        r0.<java.util.LinkedList: java.util.LinkedList$Node first> = r4;
        goto label1;

     label0:
        r3.<java.util.LinkedList$Node: java.util.LinkedList$Node next> = r4;

     label1:
        $i0 = r0.<java.util.LinkedList: int size>;
        $i1 = $i0 + 1;
        r0.<java.util.LinkedList: int size> = $i1;
        $i2 = r0.<java.util.LinkedList: int modCount>;
        $i3 = $i2 + 1;
        r0.<java.util.LinkedList: int modCount> = $i3;
        return;
    }

    private java.lang.Object unlinkFirst(java.util.LinkedList$Node)
    {
        java.util.LinkedList r0;
        java.util.LinkedList$Node r1, r3;
        java.lang.Object r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.util.LinkedList$Node;
        r2 = r1.<java.util.LinkedList$Node: java.lang.Object item>;
        r3 = r1.<java.util.LinkedList$Node: java.util.LinkedList$Node next>;
        r1.<java.util.LinkedList$Node: java.lang.Object item> = null;
        r1.<java.util.LinkedList$Node: java.util.LinkedList$Node next> = null;
        r0.<java.util.LinkedList: java.util.LinkedList$Node first> = r3;
        if r3 != null goto label0;

        r0.<java.util.LinkedList: java.util.LinkedList$Node last> = null;
        goto label1;

     label0:
        r3.<java.util.LinkedList$Node: java.util.LinkedList$Node prev> = null;

     label1:
        $i0 = r0.<java.util.LinkedList: int size>;
        $i1 = $i0 - 1;
        r0.<java.util.LinkedList: int size> = $i1;
        $i2 = r0.<java.util.LinkedList: int modCount>;
        $i3 = $i2 + 1;
        r0.<java.util.LinkedList: int modCount> = $i3;
        return r2;
    }

    private java.lang.Object unlinkLast(java.util.LinkedList$Node)
    {
        java.util.LinkedList r0;
        java.util.LinkedList$Node r1, r3;
        java.lang.Object r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.util.LinkedList$Node;
        r2 = r1.<java.util.LinkedList$Node: java.lang.Object item>;
        r3 = r1.<java.util.LinkedList$Node: java.util.LinkedList$Node prev>;
        r1.<java.util.LinkedList$Node: java.lang.Object item> = null;
        r1.<java.util.LinkedList$Node: java.util.LinkedList$Node prev> = null;
        r0.<java.util.LinkedList: java.util.LinkedList$Node last> = r3;
        if r3 != null goto label0;

        r0.<java.util.LinkedList: java.util.LinkedList$Node first> = null;
        goto label1;

     label0:
        r3.<java.util.LinkedList$Node: java.util.LinkedList$Node next> = null;

     label1:
        $i0 = r0.<java.util.LinkedList: int size>;
        $i1 = $i0 - 1;
        r0.<java.util.LinkedList: int size> = $i1;
        $i2 = r0.<java.util.LinkedList: int modCount>;
        $i3 = $i2 + 1;
        r0.<java.util.LinkedList: int modCount> = $i3;
        return r2;
    }

    java.lang.Object unlink(java.util.LinkedList$Node)
    {
        java.util.LinkedList r0;
        java.util.LinkedList$Node r1, r3, r4;
        java.lang.Object r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.util.LinkedList$Node;
        r2 = r1.<java.util.LinkedList$Node: java.lang.Object item>;
        r3 = r1.<java.util.LinkedList$Node: java.util.LinkedList$Node next>;
        r4 = r1.<java.util.LinkedList$Node: java.util.LinkedList$Node prev>;
        if r4 != null goto label0;

        r0.<java.util.LinkedList: java.util.LinkedList$Node first> = r3;
        goto label1;

     label0:
        r4.<java.util.LinkedList$Node: java.util.LinkedList$Node next> = r3;
        r1.<java.util.LinkedList$Node: java.util.LinkedList$Node prev> = null;

     label1:
        if r3 != null goto label2;

        r0.<java.util.LinkedList: java.util.LinkedList$Node last> = r4;
        goto label3;

     label2:
        r3.<java.util.LinkedList$Node: java.util.LinkedList$Node prev> = r4;
        r1.<java.util.LinkedList$Node: java.util.LinkedList$Node next> = null;

     label3:
        r1.<java.util.LinkedList$Node: java.lang.Object item> = null;
        $i0 = r0.<java.util.LinkedList: int size>;
        $i1 = $i0 - 1;
        r0.<java.util.LinkedList: int size> = $i1;
        $i2 = r0.<java.util.LinkedList: int modCount>;
        $i3 = $i2 + 1;
        r0.<java.util.LinkedList: int modCount> = $i3;
        return r2;
    }

    public java.lang.Object getFirst()
    {
        java.util.LinkedList r0;
        java.util.LinkedList$Node r1;
        java.util.NoSuchElementException $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.LinkedList;
        r1 = r0.<java.util.LinkedList: java.util.LinkedList$Node first>;
        if r1 != null goto label0;

        $r2 = new java.util.NoSuchElementException;
        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r1.<java.util.LinkedList$Node: java.lang.Object item>;
        return $r3;
    }

    public java.lang.Object getLast()
    {
        java.util.LinkedList r0;
        java.util.LinkedList$Node r1;
        java.util.NoSuchElementException $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.LinkedList;
        r1 = r0.<java.util.LinkedList: java.util.LinkedList$Node last>;
        if r1 != null goto label0;

        $r2 = new java.util.NoSuchElementException;
        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r1.<java.util.LinkedList$Node: java.lang.Object item>;
        return $r3;
    }

    public java.lang.Object removeFirst()
    {
        java.util.LinkedList r0;
        java.util.LinkedList$Node r1;
        java.util.NoSuchElementException $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.LinkedList;
        r1 = r0.<java.util.LinkedList: java.util.LinkedList$Node first>;
        if r1 != null goto label0;

        $r2 = new java.util.NoSuchElementException;
        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();
        throw $r2;

     label0:
        $r3 = specialinvoke r0.<java.util.LinkedList: java.lang.Object unlinkFirst(java.util.LinkedList$Node)>(r1);
        return $r3;
    }

    public java.lang.Object removeLast()
    {
        java.util.LinkedList r0;
        java.util.LinkedList$Node r1;
        java.util.NoSuchElementException $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.LinkedList;
        r1 = r0.<java.util.LinkedList: java.util.LinkedList$Node last>;
        if r1 != null goto label0;

        $r2 = new java.util.NoSuchElementException;
        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();
        throw $r2;

     label0:
        $r3 = specialinvoke r0.<java.util.LinkedList: java.lang.Object unlinkLast(java.util.LinkedList$Node)>(r1);
        return $r3;
    }

    public void addFirst(java.lang.Object)
    {
        java.util.LinkedList r0;
        java.lang.Object r1;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.lang.Object;
        specialinvoke r0.<java.util.LinkedList: void linkFirst(java.lang.Object)>(r1);
        return;
    }

    public void addLast(java.lang.Object)
    {
        java.util.LinkedList r0;
        java.lang.Object r1;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.lang.Object;
        virtualinvoke r0.<java.util.LinkedList: void linkLast(java.lang.Object)>(r1);
        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.LinkedList r0;
        java.lang.Object r1;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.lang.Object;
        $i0 = virtualinvoke r0.<java.util.LinkedList: int indexOf(java.lang.Object)>(r1);
        if $i0 == -1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public int size()
    {
        java.util.LinkedList r0;
        int $i0;

        r0 := @this: java.util.LinkedList;
        $i0 = r0.<java.util.LinkedList: int size>;
        return $i0;
    }

    public boolean add(java.lang.Object)
    {
        java.util.LinkedList r0;
        java.lang.Object r1;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.lang.Object;
        virtualinvoke r0.<java.util.LinkedList: void linkLast(java.lang.Object)>(r1);
        return 1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.LinkedList r0;
        java.lang.Object r1, $r3, $r6;
        java.util.LinkedList$Node r2, r5;
        boolean $z0;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label3;

        r2 = r0.<java.util.LinkedList: java.util.LinkedList$Node first>;

     label0:
        if r2 == null goto label2;

        $r3 = r2.<java.util.LinkedList$Node: java.lang.Object item>;
        if $r3 != null goto label1;

        virtualinvoke r0.<java.util.LinkedList: java.lang.Object unlink(java.util.LinkedList$Node)>(r2);
        return 1;

     label1:
        r2 = r2.<java.util.LinkedList$Node: java.util.LinkedList$Node next>;
        goto label0;

     label2:
        goto label6;

     label3:
        r5 = r0.<java.util.LinkedList: java.util.LinkedList$Node first>;

     label4:
        if r5 == null goto label6;

        $r6 = r5.<java.util.LinkedList$Node: java.lang.Object item>;
        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r6);
        if $z0 == 0 goto label5;

        virtualinvoke r0.<java.util.LinkedList: java.lang.Object unlink(java.util.LinkedList$Node)>(r5);
        return 1;

     label5:
        r5 = r5.<java.util.LinkedList$Node: java.util.LinkedList$Node next>;
        goto label4;

     label6:
        return 0;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.LinkedList r0;
        java.util.Collection r1;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.util.Collection;
        $i0 = r0.<java.util.LinkedList: int size>;
        $z0 = virtualinvoke r0.<java.util.LinkedList: boolean addAll(int,java.util.Collection)>($i0, r1);
        return $z0;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.util.LinkedList r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        java.util.Collection r1;
        java.lang.Object[] r2, r5;
        java.util.LinkedList$Node r3, r4, r8, $r9;
        java.lang.Object r6, r7;

        r0 := @this: java.util.LinkedList;
        i0 := @parameter0: int;
        r1 := @parameter1: java.util.Collection;
        specialinvoke r0.<java.util.LinkedList: void checkPositionIndex(int)>(i0);
        r2 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();
        i1 = lengthof r2;
        if i1 != 0 goto label0;

        return 0;

     label0:
        $i4 = r0.<java.util.LinkedList: int size>;
        if i0 != $i4 goto label1;

        r3 = null;
        r4 = r0.<java.util.LinkedList: java.util.LinkedList$Node last>;
        goto label2;

     label1:
        r3 = virtualinvoke r0.<java.util.LinkedList: java.util.LinkedList$Node node(int)>(i0);
        r4 = r3.<java.util.LinkedList$Node: java.util.LinkedList$Node prev>;

     label2:
        r5 = r2;
        i2 = lengthof r5;
        i3 = 0;

     label3:
        if i3 >= i2 goto label6;

        r6 = r5[i3];
        r7 = r6;
        $r9 = new java.util.LinkedList$Node;
        specialinvoke $r9.<java.util.LinkedList$Node: void <init>(java.util.LinkedList$Node,java.lang.Object,java.util.LinkedList$Node)>(r4, r7, null);
        r8 = $r9;
        if r4 != null goto label4;

        r0.<java.util.LinkedList: java.util.LinkedList$Node first> = r8;
        goto label5;

     label4:
        r4.<java.util.LinkedList$Node: java.util.LinkedList$Node next> = r8;

     label5:
        r4 = r8;
        i3 = i3 + 1;
        goto label3;

     label6:
        if r3 != null goto label7;

        r0.<java.util.LinkedList: java.util.LinkedList$Node last> = r4;
        goto label8;

     label7:
        r4.<java.util.LinkedList$Node: java.util.LinkedList$Node next> = r3;
        r3.<java.util.LinkedList$Node: java.util.LinkedList$Node prev> = r4;

     label8:
        $i5 = r0.<java.util.LinkedList: int size>;
        $i6 = $i5 + i1;
        r0.<java.util.LinkedList: int size> = $i6;
        $i7 = r0.<java.util.LinkedList: int modCount>;
        $i8 = $i7 + 1;
        r0.<java.util.LinkedList: int modCount> = $i8;
        return 1;
    }

    public void clear()
    {
        java.util.LinkedList r0;
        java.util.LinkedList$Node r1, r2;
        null_type $n0;
        int $i0, $i1;

        r0 := @this: java.util.LinkedList;
        r1 = r0.<java.util.LinkedList: java.util.LinkedList$Node first>;

     label0:
        if r1 == null goto label1;

        r2 = r1.<java.util.LinkedList$Node: java.util.LinkedList$Node next>;
        r1.<java.util.LinkedList$Node: java.lang.Object item> = null;
        r1.<java.util.LinkedList$Node: java.util.LinkedList$Node next> = null;
        r1.<java.util.LinkedList$Node: java.util.LinkedList$Node prev> = null;
        r1 = r2;
        goto label0;

     label1:
        $n0 = null;
        r0.<java.util.LinkedList: java.util.LinkedList$Node last> = $n0;
        r0.<java.util.LinkedList: java.util.LinkedList$Node first> = $n0;
        r0.<java.util.LinkedList: int size> = 0;
        $i0 = r0.<java.util.LinkedList: int modCount>;
        $i1 = $i0 + 1;
        r0.<java.util.LinkedList: int modCount> = $i1;
        return;
    }

    public java.lang.Object get(int)
    {
        java.util.LinkedList r0;
        int i0;
        java.util.LinkedList$Node $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.LinkedList;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.LinkedList: void checkElementIndex(int)>(i0);
        $r1 = virtualinvoke r0.<java.util.LinkedList: java.util.LinkedList$Node node(int)>(i0);
        $r2 = $r1.<java.util.LinkedList$Node: java.lang.Object item>;
        return $r2;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        java.util.LinkedList r0;
        int i0;
        java.lang.Object r1, r3;
        java.util.LinkedList$Node r2;

        r0 := @this: java.util.LinkedList;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        specialinvoke r0.<java.util.LinkedList: void checkElementIndex(int)>(i0);
        r2 = virtualinvoke r0.<java.util.LinkedList: java.util.LinkedList$Node node(int)>(i0);
        r3 = r2.<java.util.LinkedList$Node: java.lang.Object item>;
        r2.<java.util.LinkedList$Node: java.lang.Object item> = r1;
        return r3;
    }

    public void add(int, java.lang.Object)
    {
        java.util.LinkedList r0;
        int i0, $i1;
        java.lang.Object r1;
        java.util.LinkedList$Node $r2;

        r0 := @this: java.util.LinkedList;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        specialinvoke r0.<java.util.LinkedList: void checkPositionIndex(int)>(i0);
        $i1 = r0.<java.util.LinkedList: int size>;
        if i0 != $i1 goto label0;

        virtualinvoke r0.<java.util.LinkedList: void linkLast(java.lang.Object)>(r1);
        goto label1;

     label0:
        $r2 = virtualinvoke r0.<java.util.LinkedList: java.util.LinkedList$Node node(int)>(i0);
        virtualinvoke r0.<java.util.LinkedList: void linkBefore(java.lang.Object,java.util.LinkedList$Node)>(r1, $r2);

     label1:
        return;
    }

    public java.lang.Object remove(int)
    {
        java.util.LinkedList r0;
        int i0;
        java.util.LinkedList$Node $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.LinkedList;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.LinkedList: void checkElementIndex(int)>(i0);
        $r1 = virtualinvoke r0.<java.util.LinkedList: java.util.LinkedList$Node node(int)>(i0);
        $r2 = virtualinvoke r0.<java.util.LinkedList: java.lang.Object unlink(java.util.LinkedList$Node)>($r1);
        return $r2;
    }

    private boolean isElementIndex(int)
    {
        java.util.LinkedList r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: java.util.LinkedList;
        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        $i1 = r0.<java.util.LinkedList: int size>;
        if i0 >= $i1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private boolean isPositionIndex(int)
    {
        java.util.LinkedList r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: java.util.LinkedList;
        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        $i1 = r0.<java.util.LinkedList: int size>;
        if i0 > $i1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private java.lang.String outOfBoundsMsg(int)
    {
        java.util.LinkedList r0;
        int i0, $i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: java.util.LinkedList;
        i0 := @parameter0: int;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Size: ");
        $i1 = r0.<java.util.LinkedList: int size>;
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r6;
    }

    private void checkElementIndex(int)
    {
        java.util.LinkedList r0;
        int i0;
        boolean $z0;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.String $r2;

        r0 := @this: java.util.LinkedList;
        i0 := @parameter0: int;
        $z0 = specialinvoke r0.<java.util.LinkedList: boolean isElementIndex(int)>(i0);
        if $z0 != 0 goto label0;

        $r1 = new java.lang.IndexOutOfBoundsException;
        $r2 = specialinvoke r0.<java.util.LinkedList: java.lang.String outOfBoundsMsg(int)>(i0);
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r2);
        throw $r1;

     label0:
        return;
    }

    private void checkPositionIndex(int)
    {
        java.util.LinkedList r0;
        int i0;
        boolean $z0;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.String $r2;

        r0 := @this: java.util.LinkedList;
        i0 := @parameter0: int;
        $z0 = specialinvoke r0.<java.util.LinkedList: boolean isPositionIndex(int)>(i0);
        if $z0 != 0 goto label0;

        $r1 = new java.lang.IndexOutOfBoundsException;
        $r2 = specialinvoke r0.<java.util.LinkedList: java.lang.String outOfBoundsMsg(int)>(i0);
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r2);
        throw $r1;

     label0:
        return;
    }

    java.util.LinkedList$Node node(int)
    {
        java.util.LinkedList r0;
        int i0, i1, $i2, $i3, $i4, i5;
        java.util.LinkedList$Node r1, r2;

        r0 := @this: java.util.LinkedList;
        i0 := @parameter0: int;
        $i2 = r0.<java.util.LinkedList: int size>;
        $i3 = $i2 >> 1;
        if i0 >= $i3 goto label2;

        r1 = r0.<java.util.LinkedList: java.util.LinkedList$Node first>;
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        r1 = r1.<java.util.LinkedList$Node: java.util.LinkedList$Node next>;
        i1 = i1 + 1;
        goto label0;

     label1:
        return r1;

     label2:
        r2 = r0.<java.util.LinkedList: java.util.LinkedList$Node last>;
        $i4 = r0.<java.util.LinkedList: int size>;
        i5 = $i4 - 1;

     label3:
        if i5 <= i0 goto label4;

        r2 = r2.<java.util.LinkedList$Node: java.util.LinkedList$Node prev>;
        i5 = i5 + -1;
        goto label3;

     label4:
        return r2;
    }

    public int indexOf(java.lang.Object)
    {
        java.util.LinkedList r0;
        java.lang.Object r1, $r3, $r5;
        int i0;
        java.util.LinkedList$Node r2, r4;
        boolean $z0;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.lang.Object;
        i0 = 0;
        if r1 != null goto label3;

        r2 = r0.<java.util.LinkedList: java.util.LinkedList$Node first>;

     label0:
        if r2 == null goto label2;

        $r3 = r2.<java.util.LinkedList$Node: java.lang.Object item>;
        if $r3 != null goto label1;

        return i0;

     label1:
        i0 = i0 + 1;
        r2 = r2.<java.util.LinkedList$Node: java.util.LinkedList$Node next>;
        goto label0;

     label2:
        goto label6;

     label3:
        r4 = r0.<java.util.LinkedList: java.util.LinkedList$Node first>;

     label4:
        if r4 == null goto label6;

        $r5 = r4.<java.util.LinkedList$Node: java.lang.Object item>;
        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);
        if $z0 == 0 goto label5;

        return i0;

     label5:
        i0 = i0 + 1;
        r4 = r4.<java.util.LinkedList$Node: java.util.LinkedList$Node next>;
        goto label4;

     label6:
        return -1;
    }

    public int lastIndexOf(java.lang.Object)
    {
        java.util.LinkedList r0;
        java.lang.Object r1, $r3, $r5;
        int i0;
        java.util.LinkedList$Node r2, r4;
        boolean $z0;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.lang.Object;
        i0 = r0.<java.util.LinkedList: int size>;
        if r1 != null goto label3;

        r2 = r0.<java.util.LinkedList: java.util.LinkedList$Node last>;

     label0:
        if r2 == null goto label2;

        i0 = i0 + -1;
        $r3 = r2.<java.util.LinkedList$Node: java.lang.Object item>;
        if $r3 != null goto label1;

        return i0;

     label1:
        r2 = r2.<java.util.LinkedList$Node: java.util.LinkedList$Node prev>;
        goto label0;

     label2:
        goto label6;

     label3:
        r4 = r0.<java.util.LinkedList: java.util.LinkedList$Node last>;

     label4:
        if r4 == null goto label6;

        i0 = i0 + -1;
        $r5 = r4.<java.util.LinkedList$Node: java.lang.Object item>;
        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);
        if $z0 == 0 goto label5;

        return i0;

     label5:
        r4 = r4.<java.util.LinkedList$Node: java.util.LinkedList$Node prev>;
        goto label4;

     label6:
        return -1;
    }

    public java.lang.Object peek()
    {
        java.util.LinkedList r0;
        java.util.LinkedList$Node r1;
        java.lang.Object $r2;

        r0 := @this: java.util.LinkedList;
        r1 = r0.<java.util.LinkedList: java.util.LinkedList$Node first>;
        if r1 != null goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r2 = r1.<java.util.LinkedList$Node: java.lang.Object item>;

     label1:
        return $r2;
    }

    public java.lang.Object element()
    {
        java.util.LinkedList r0;
        java.lang.Object $r1;

        r0 := @this: java.util.LinkedList;
        $r1 = virtualinvoke r0.<java.util.LinkedList: java.lang.Object getFirst()>();
        return $r1;
    }

    public java.lang.Object poll()
    {
        java.util.LinkedList r0;
        java.util.LinkedList$Node r1;
        java.lang.Object $r2;

        r0 := @this: java.util.LinkedList;
        r1 = r0.<java.util.LinkedList: java.util.LinkedList$Node first>;
        if r1 != null goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r2 = specialinvoke r0.<java.util.LinkedList: java.lang.Object unlinkFirst(java.util.LinkedList$Node)>(r1);

     label1:
        return $r2;
    }

    public java.lang.Object remove()
    {
        java.util.LinkedList r0;
        java.lang.Object $r1;

        r0 := @this: java.util.LinkedList;
        $r1 = virtualinvoke r0.<java.util.LinkedList: java.lang.Object removeFirst()>();
        return $r1;
    }

    public boolean offer(java.lang.Object)
    {
        java.util.LinkedList r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.lang.Object;
        $z0 = virtualinvoke r0.<java.util.LinkedList: boolean add(java.lang.Object)>(r1);
        return $z0;
    }

    public boolean offerFirst(java.lang.Object)
    {
        java.util.LinkedList r0;
        java.lang.Object r1;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.lang.Object;
        virtualinvoke r0.<java.util.LinkedList: void addFirst(java.lang.Object)>(r1);
        return 1;
    }

    public boolean offerLast(java.lang.Object)
    {
        java.util.LinkedList r0;
        java.lang.Object r1;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.lang.Object;
        virtualinvoke r0.<java.util.LinkedList: void addLast(java.lang.Object)>(r1);
        return 1;
    }

    public java.lang.Object peekFirst()
    {
        java.util.LinkedList r0;
        java.util.LinkedList$Node r1;
        java.lang.Object $r2;

        r0 := @this: java.util.LinkedList;
        r1 = r0.<java.util.LinkedList: java.util.LinkedList$Node first>;
        if r1 != null goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r2 = r1.<java.util.LinkedList$Node: java.lang.Object item>;

     label1:
        return $r2;
    }

    public java.lang.Object peekLast()
    {
        java.util.LinkedList r0;
        java.util.LinkedList$Node r1;
        java.lang.Object $r2;

        r0 := @this: java.util.LinkedList;
        r1 = r0.<java.util.LinkedList: java.util.LinkedList$Node last>;
        if r1 != null goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r2 = r1.<java.util.LinkedList$Node: java.lang.Object item>;

     label1:
        return $r2;
    }

    public java.lang.Object pollFirst()
    {
        java.util.LinkedList r0;
        java.util.LinkedList$Node r1;
        java.lang.Object $r2;

        r0 := @this: java.util.LinkedList;
        r1 = r0.<java.util.LinkedList: java.util.LinkedList$Node first>;
        if r1 != null goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r2 = specialinvoke r0.<java.util.LinkedList: java.lang.Object unlinkFirst(java.util.LinkedList$Node)>(r1);

     label1:
        return $r2;
    }

    public java.lang.Object pollLast()
    {
        java.util.LinkedList r0;
        java.util.LinkedList$Node r1;
        java.lang.Object $r2;

        r0 := @this: java.util.LinkedList;
        r1 = r0.<java.util.LinkedList: java.util.LinkedList$Node last>;
        if r1 != null goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r2 = specialinvoke r0.<java.util.LinkedList: java.lang.Object unlinkLast(java.util.LinkedList$Node)>(r1);

     label1:
        return $r2;
    }

    public void push(java.lang.Object)
    {
        java.util.LinkedList r0;
        java.lang.Object r1;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.lang.Object;
        virtualinvoke r0.<java.util.LinkedList: void addFirst(java.lang.Object)>(r1);
        return;
    }

    public java.lang.Object pop()
    {
        java.util.LinkedList r0;
        java.lang.Object $r1;

        r0 := @this: java.util.LinkedList;
        $r1 = virtualinvoke r0.<java.util.LinkedList: java.lang.Object removeFirst()>();
        return $r1;
    }

    public boolean removeFirstOccurrence(java.lang.Object)
    {
        java.util.LinkedList r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.lang.Object;
        $z0 = virtualinvoke r0.<java.util.LinkedList: boolean remove(java.lang.Object)>(r1);
        return $z0;
    }

    public boolean removeLastOccurrence(java.lang.Object)
    {
        java.util.LinkedList r0;
        java.lang.Object r1, $r3, $r6;
        java.util.LinkedList$Node r2, r5;
        boolean $z0;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label3;

        r2 = r0.<java.util.LinkedList: java.util.LinkedList$Node last>;

     label0:
        if r2 == null goto label2;

        $r3 = r2.<java.util.LinkedList$Node: java.lang.Object item>;
        if $r3 != null goto label1;

        virtualinvoke r0.<java.util.LinkedList: java.lang.Object unlink(java.util.LinkedList$Node)>(r2);
        return 1;

     label1:
        r2 = r2.<java.util.LinkedList$Node: java.util.LinkedList$Node prev>;
        goto label0;

     label2:
        goto label6;

     label3:
        r5 = r0.<java.util.LinkedList: java.util.LinkedList$Node last>;

     label4:
        if r5 == null goto label6;

        $r6 = r5.<java.util.LinkedList$Node: java.lang.Object item>;
        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r6);
        if $z0 == 0 goto label5;

        virtualinvoke r0.<java.util.LinkedList: java.lang.Object unlink(java.util.LinkedList$Node)>(r5);
        return 1;

     label5:
        r5 = r5.<java.util.LinkedList$Node: java.util.LinkedList$Node prev>;
        goto label4;

     label6:
        return 0;
    }

    public java.util.ListIterator listIterator(int)
    {
        java.util.LinkedList r0;
        int i0;
        java.util.LinkedList$ListItr $r1;

        r0 := @this: java.util.LinkedList;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.LinkedList: void checkPositionIndex(int)>(i0);
        $r1 = new java.util.LinkedList$ListItr;
        specialinvoke $r1.<java.util.LinkedList$ListItr: void <init>(java.util.LinkedList,int)>(r0, i0);
        return $r1;
    }

    public java.util.Iterator descendingIterator()
    {
        java.util.LinkedList r0;
        java.util.LinkedList$DescendingIterator $r1;

        r0 := @this: java.util.LinkedList;
        $r1 = new java.util.LinkedList$DescendingIterator;
        specialinvoke $r1.<java.util.LinkedList$DescendingIterator: void <init>(java.util.LinkedList,java.util.LinkedList$1)>(r0, null);
        return $r1;
    }

    private java.util.LinkedList superClone()
    {
        java.util.LinkedList r0, $r3;
        java.lang.CloneNotSupportedException r1, $r4;
        java.lang.Object $r2;
        java.lang.InternalError $r5;

        r0 := @this: java.util.LinkedList;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (java.util.LinkedList) $r2;

     label1:
        return $r3;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        $r5 = new java.lang.InternalError;
        specialinvoke $r5.<java.lang.InternalError: void <init>()>();
        throw $r5;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    public java.lang.Object clone()
    {
        java.util.LinkedList r0, r1;
        null_type $n0;
        java.util.LinkedList$Node r2;
        java.lang.Object $r3;

        r0 := @this: java.util.LinkedList;
        r1 = specialinvoke r0.<java.util.LinkedList: java.util.LinkedList superClone()>();
        $n0 = null;
        r1.<java.util.LinkedList: java.util.LinkedList$Node last> = $n0;
        r1.<java.util.LinkedList: java.util.LinkedList$Node first> = $n0;
        r1.<java.util.LinkedList: int size> = 0;
        r1.<java.util.LinkedList: int modCount> = 0;
        r2 = r0.<java.util.LinkedList: java.util.LinkedList$Node first>;

     label0:
        if r2 == null goto label1;

        $r3 = r2.<java.util.LinkedList$Node: java.lang.Object item>;
        virtualinvoke r1.<java.util.LinkedList: boolean add(java.lang.Object)>($r3);
        r2 = r2.<java.util.LinkedList$Node: java.util.LinkedList$Node next>;
        goto label0;

     label1:
        return r1;
    }

    public java.lang.Object[] toArray()
    {
        java.util.LinkedList r0;
        java.lang.Object[] r1;
        int i0, $i1, $i2;
        java.util.LinkedList$Node r2;
        java.lang.Object $r3;

        r0 := @this: java.util.LinkedList;
        $i2 = r0.<java.util.LinkedList: int size>;
        r1 = newarray (java.lang.Object)[$i2];
        i0 = 0;
        r2 = r0.<java.util.LinkedList: java.util.LinkedList$Node first>;

     label0:
        if r2 == null goto label1;

        $i1 = i0;
        i0 = i0 + 1;
        $r3 = r2.<java.util.LinkedList$Node: java.lang.Object item>;
        r1[$i1] = $r3;
        r2 = r2.<java.util.LinkedList$Node: java.util.LinkedList$Node next>;
        goto label0;

     label1:
        return r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.LinkedList r0;
        java.lang.Object[] r1, r2, $r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.LinkedList$Node r3;
        java.lang.Class $r4, $r5;
        java.lang.Object $r6, $r8;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.lang.Object[];
        $i1 = lengthof r1;
        $i2 = r0.<java.util.LinkedList: int size>;
        if $i1 >= $i2 goto label0;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();
        $i3 = r0.<java.util.LinkedList: int size>;
        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r5, $i3);
        $r7 = (java.lang.Object[]) $r6;
        r1 = (java.lang.Object[]) $r7;

     label0:
        i0 = 0;
        r2 = r1;
        r3 = r0.<java.util.LinkedList: java.util.LinkedList$Node first>;

     label1:
        if r3 == null goto label2;

        $i4 = i0;
        i0 = i0 + 1;
        $r8 = r3.<java.util.LinkedList$Node: java.lang.Object item>;
        r2[$i4] = $r8;
        r3 = r3.<java.util.LinkedList$Node: java.util.LinkedList$Node next>;
        goto label1;

     label2:
        $i5 = lengthof r1;
        $i6 = r0.<java.util.LinkedList: int size>;
        if $i5 <= $i6 goto label3;

        $i7 = r0.<java.util.LinkedList: int size>;
        r1[$i7] = null;

     label3:
        return r1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.LinkedList r0;
        java.io.ObjectOutputStream r1;
        java.util.LinkedList$Node r2;
        int $i0;
        java.lang.Object $r3;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.io.ObjectOutputStream;
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        $i0 = r0.<java.util.LinkedList: int size>;
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);
        r2 = r0.<java.util.LinkedList: java.util.LinkedList$Node first>;

     label0:
        if r2 == null goto label1;

        $r3 = r2.<java.util.LinkedList$Node: java.lang.Object item>;
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);
        r2 = r2.<java.util.LinkedList$Node: java.util.LinkedList$Node next>;
        goto label0;

     label1:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.LinkedList r0;
        java.io.ObjectInputStream r1;
        int i0, i1;
        java.lang.Object $r2;

        r0 := @this: java.util.LinkedList;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        $r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        virtualinvoke r0.<java.util.LinkedList: void linkLast(java.lang.Object)>($r2);
        i1 = i1 + 1;
        goto label0;

     label1:
        return;
    }
}
