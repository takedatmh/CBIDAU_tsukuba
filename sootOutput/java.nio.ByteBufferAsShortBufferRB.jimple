class java.nio.ByteBufferAsShortBufferRB extends java.nio.ByteBufferAsShortBufferB
{
    static final boolean $assertionsDisabled;

    void <init>(java.nio.ByteBuffer)
    {
        java.nio.ByteBufferAsShortBufferRB r0;
        java.nio.ByteBuffer r1;

        r0 := @this: java.nio.ByteBufferAsShortBufferRB;
        r1 := @parameter0: java.nio.ByteBuffer;
        specialinvoke r0.<java.nio.ByteBufferAsShortBufferB: void <init>(java.nio.ByteBuffer)>(r1);
        return;
    }

    void <init>(java.nio.ByteBuffer, int, int, int, int, int)
    {
        java.nio.ByteBufferAsShortBufferRB r0;
        java.nio.ByteBuffer r1;
        int i0, i1, i2, i3, i4;

        r0 := @this: java.nio.ByteBufferAsShortBufferRB;
        r1 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        specialinvoke r0.<java.nio.ByteBufferAsShortBufferB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r1, i0, i1, i2, i3, i4);
        return;
    }

    public java.nio.ShortBuffer slice()
    {
        java.nio.ByteBufferAsShortBufferRB r0, $r3;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        boolean $z0, $z1;
        java.lang.AssertionError $r1, $r2;
        java.nio.ByteBuffer $r4;

        r0 := @this: java.nio.ByteBufferAsShortBufferRB;
        i0 = virtualinvoke r0.<java.nio.ByteBufferAsShortBufferRB: int position()>();
        i1 = virtualinvoke r0.<java.nio.ByteBufferAsShortBufferRB: int limit()>();
        $z0 = <java.nio.ByteBufferAsShortBufferRB: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label0:
        if i0 > i1 goto label1;

        $i4 = i1 - i0;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i2 = $i4;
        $i5 = i0 << 1;
        $i6 = r0.<java.nio.ByteBufferAsShortBufferRB: int offset>;
        i3 = $i5 + $i6;
        $z1 = <java.nio.ByteBufferAsShortBufferRB: boolean $assertionsDisabled>;
        if $z1 != 0 goto label3;

        if i3 >= 0 goto label3;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label3:
        $r3 = new java.nio.ByteBufferAsShortBufferRB;
        $r4 = r0.<java.nio.ByteBufferAsShortBufferRB: java.nio.ByteBuffer bb>;
        specialinvoke $r3.<java.nio.ByteBufferAsShortBufferRB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>($r4, -1, 0, i2, i2, i3);
        return $r3;
    }

    public java.nio.ShortBuffer duplicate()
    {
        java.nio.ByteBufferAsShortBufferRB r0, $r1;
        java.nio.ByteBuffer $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.ByteBufferAsShortBufferRB;
        $r1 = new java.nio.ByteBufferAsShortBufferRB;
        $r2 = r0.<java.nio.ByteBufferAsShortBufferRB: java.nio.ByteBuffer bb>;
        $i0 = virtualinvoke r0.<java.nio.ByteBufferAsShortBufferRB: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.ByteBufferAsShortBufferRB: int position()>();
        $i2 = virtualinvoke r0.<java.nio.ByteBufferAsShortBufferRB: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.ByteBufferAsShortBufferRB: int capacity()>();
        $i4 = r0.<java.nio.ByteBufferAsShortBufferRB: int offset>;
        specialinvoke $r1.<java.nio.ByteBufferAsShortBufferRB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>($r2, $i0, $i1, $i2, $i3, $i4);
        return $r1;
    }

    public java.nio.ShortBuffer asReadOnlyBuffer()
    {
        java.nio.ByteBufferAsShortBufferRB r0;
        java.nio.ShortBuffer $r1;

        r0 := @this: java.nio.ByteBufferAsShortBufferRB;
        $r1 = virtualinvoke r0.<java.nio.ByteBufferAsShortBufferRB: java.nio.ShortBuffer duplicate()>();
        return $r1;
    }

    public java.nio.ShortBuffer put(short)
    {
        java.nio.ByteBufferAsShortBufferRB r0;
        short s0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.ByteBufferAsShortBufferRB;
        s0 := @parameter0: short;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ShortBuffer put(int, short)
    {
        java.nio.ByteBufferAsShortBufferRB r0;
        int i0;
        short s1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.ByteBufferAsShortBufferRB;
        i0 := @parameter0: int;
        s1 := @parameter1: short;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ShortBuffer compact()
    {
        java.nio.ByteBufferAsShortBufferRB r0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.ByteBufferAsShortBufferRB;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public boolean isDirect()
    {
        java.nio.ByteBufferAsShortBufferRB r0;
        java.nio.ByteBuffer $r1;
        boolean $z0;

        r0 := @this: java.nio.ByteBufferAsShortBufferRB;
        $r1 = r0.<java.nio.ByteBufferAsShortBufferRB: java.nio.ByteBuffer bb>;
        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean isDirect()>();
        return $z0;
    }

    public boolean isReadOnly()
    {
        java.nio.ByteBufferAsShortBufferRB r0;

        r0 := @this: java.nio.ByteBufferAsShortBufferRB;
        return 1;
    }

    public java.nio.ByteOrder order()
    {
        java.nio.ByteBufferAsShortBufferRB r0;
        java.nio.ByteOrder $r1;

        r0 := @this: java.nio.ByteBufferAsShortBufferRB;
        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;
        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/nio/ByteBufferAsShortBufferRB";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.nio.ByteBufferAsShortBufferRB: boolean $assertionsDisabled> = $z1;
        return;
    }
}
