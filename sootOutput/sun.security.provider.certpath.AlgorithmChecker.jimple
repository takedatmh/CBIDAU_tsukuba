public final class sun.security.provider.certpath.AlgorithmChecker extends java.security.cert.PKIXCertPathChecker
{
    private final java.security.AlgorithmConstraints constraints;
    private final java.security.PublicKey trustedPubKey;
    private java.security.PublicKey prevPubKey;
    private static final java.util.Set SIGNATURE_PRIMITIVE_SET;
    private static final sun.security.util.DisabledAlgorithmConstraints certPathDefaultConstraints;

    public void <init>(java.security.cert.TrustAnchor)
    {
        sun.security.provider.certpath.AlgorithmChecker r0;
        java.security.cert.TrustAnchor r1;
        sun.security.util.DisabledAlgorithmConstraints $r2;

        r0 := @this: sun.security.provider.certpath.AlgorithmChecker;
        r1 := @parameter0: java.security.cert.TrustAnchor;
        $r2 = <sun.security.provider.certpath.AlgorithmChecker: sun.security.util.DisabledAlgorithmConstraints certPathDefaultConstraints>;
        specialinvoke r0.<sun.security.provider.certpath.AlgorithmChecker: void <init>(java.security.cert.TrustAnchor,java.security.AlgorithmConstraints)>(r1, $r2);
        return;
    }

    public void <init>(java.security.AlgorithmConstraints)
    {
        sun.security.provider.certpath.AlgorithmChecker r0;
        java.security.AlgorithmConstraints r1;

        r0 := @this: sun.security.provider.certpath.AlgorithmChecker;
        r1 := @parameter0: java.security.AlgorithmConstraints;
        specialinvoke r0.<java.security.cert.PKIXCertPathChecker: void <init>()>();
        r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.PublicKey prevPubKey> = null;
        r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.PublicKey trustedPubKey> = null;
        r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.AlgorithmConstraints constraints> = r1;
        return;
    }

    public void <init>(java.security.cert.TrustAnchor, java.security.AlgorithmConstraints)
    {
        sun.security.provider.certpath.AlgorithmChecker r0;
        java.security.cert.TrustAnchor r1;
        java.security.AlgorithmConstraints r2;
        java.lang.IllegalArgumentException $r3;
        java.security.cert.X509Certificate $r4, $r5;
        java.security.PublicKey $r6, $r7, $r8;

        r0 := @this: sun.security.provider.certpath.AlgorithmChecker;
        r1 := @parameter0: java.security.cert.TrustAnchor;
        r2 := @parameter1: java.security.AlgorithmConstraints;
        specialinvoke r0.<java.security.cert.PKIXCertPathChecker: void <init>()>();
        if r1 != null goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The trust anchor cannot be null");
        throw $r3;

     label0:
        $r4 = virtualinvoke r1.<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>();
        if $r4 == null goto label1;

        $r5 = virtualinvoke r1.<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>();
        $r6 = virtualinvoke $r5.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();
        r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.PublicKey trustedPubKey> = $r6;
        goto label2;

     label1:
        $r7 = virtualinvoke r1.<java.security.cert.TrustAnchor: java.security.PublicKey getCAPublicKey()>();
        r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.PublicKey trustedPubKey> = $r7;

     label2:
        $r8 = r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.PublicKey trustedPubKey>;
        r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.PublicKey prevPubKey> = $r8;
        r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.AlgorithmConstraints constraints> = r2;
        return;
    }

    public void init(boolean) throws java.security.cert.CertPathValidatorException
    {
        sun.security.provider.certpath.AlgorithmChecker r0;
        boolean z0;
        java.security.PublicKey $r1, $r2;
        java.security.cert.CertPathValidatorException $r3;

        r0 := @this: sun.security.provider.certpath.AlgorithmChecker;
        z0 := @parameter0: boolean;
        if z0 != 0 goto label1;

        $r1 = r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.PublicKey trustedPubKey>;
        if $r1 == null goto label0;

        $r2 = r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.PublicKey trustedPubKey>;
        r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.PublicKey prevPubKey> = $r2;
        goto label2;

     label0:
        r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.PublicKey prevPubKey> = null;
        goto label2;

     label1:
        $r3 = new java.security.cert.CertPathValidatorException;
        specialinvoke $r3.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String)>("forward checking not supported");
        throw $r3;

     label2:
        return;
    }

    public boolean isForwardCheckingSupported()
    {
        sun.security.provider.certpath.AlgorithmChecker r0;

        r0 := @this: sun.security.provider.certpath.AlgorithmChecker;
        return 0;
    }

    public java.util.Set getSupportedExtensions()
    {
        sun.security.provider.certpath.AlgorithmChecker r0;

        r0 := @this: sun.security.provider.certpath.AlgorithmChecker;
        return null;
    }

    public void check(java.security.cert.Certificate, java.util.Collection) throws java.security.cert.CertPathValidatorException
    {
        sun.security.provider.certpath.AlgorithmChecker r0;
        java.security.cert.Certificate r1;
        java.util.Collection r2;
        null_type n0, n1;
        java.security.cert.CertificateException r3, r5, $r15, $r20;
        java.lang.String r4, $r29, $r47, $r67, $r69;
        java.security.cert.CertPathValidatorException$BasicReason $r6, $r38, $r48;
        boolean[] r7;
        java.util.EnumSet r8;
        java.math.BigInteger r9, $r59, $r60, $r61;
        java.security.KeyFactory r10;
        java.security.spec.DSAPublicKeySpec r11, $r58;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7, $z9, $z11, $z13, $z14, $z15, $z16, $z17;
        java.security.AlgorithmConstraints $r12, $r23, $r36, $r40;
        java.security.cert.X509Certificate $r13;
        sun.security.x509.X509CertImpl r14;
        java.security.cert.CertPathValidatorException $r16, $r21, $r25, $r30, $r37, $r43, $r52, $r56, $r64;
        java.security.PublicKey r17, $r39, $r42, $r51, $r53;
        java.lang.Object $r18;
        sun.security.x509.AlgorithmId r19;
        java.security.AlgorithmParameters r22;
        java.util.Set $r24, $r41;
        java.lang.StringBuilder $r26, $r27, $r28, $r44, $r45, $r46, $r65, $r66, $r68;
        int $i0;
        java.security.cert.PKIXReason $r31;
        java.security.CryptoPrimitive $r32, $r33, $r34, $r35;
        java.security.interfaces.DSAPublicKey $r49, $r54, $r57;
        java.security.interfaces.DSAParams $r50, r55;
        java.security.GeneralSecurityException $r62, r63;

        r0 := @this: sun.security.provider.certpath.AlgorithmChecker;
        r1 := @parameter0: java.security.cert.Certificate;
        r2 := @parameter1: java.util.Collection;
        $z0 = r1 instanceof java.security.cert.X509Certificate;
        if $z0 == 0 goto label0;

        $r12 = r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.AlgorithmConstraints constraints>;
        if $r12 != null goto label1;

     label0:
        return;

     label1:
        n0 = null;

     label2:
        $r13 = (java.security.cert.X509Certificate) r1;
        r14 = staticinvoke <sun.security.x509.X509CertImpl: sun.security.x509.X509CertImpl toImpl(java.security.cert.X509Certificate)>($r13);

     label3:
        goto label5;

     label4:
        $r15 := @caughtexception;
        r3 = $r15;
        $r16 = new java.security.cert.CertPathValidatorException;
        specialinvoke $r16.<java.security.cert.CertPathValidatorException: void <init>(java.lang.Throwable)>(r3);
        throw $r16;

     label5:
        r17 = virtualinvoke r14.<sun.security.x509.X509CertImpl: java.security.PublicKey getPublicKey()>();
        r4 = virtualinvoke r14.<sun.security.x509.X509CertImpl: java.lang.String getSigAlgName()>();
        n1 = null;

     label6:
        $r18 = virtualinvoke r14.<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>("x509.algorithm");
        r19 = (sun.security.x509.AlgorithmId) $r18;

     label7:
        goto label9;

     label8:
        $r20 := @caughtexception;
        r5 = $r20;
        $r21 = new java.security.cert.CertPathValidatorException;
        specialinvoke $r21.<java.security.cert.CertPathValidatorException: void <init>(java.lang.Throwable)>(r5);
        throw $r21;

     label9:
        r22 = virtualinvoke r19.<sun.security.x509.AlgorithmId: java.security.AlgorithmParameters getParameters()>();
        $r23 = r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.AlgorithmConstraints constraints>;
        $r24 = <sun.security.provider.certpath.AlgorithmChecker: java.util.Set SIGNATURE_PRIMITIVE_SET>;
        $z1 = interfaceinvoke $r23.<java.security.AlgorithmConstraints: boolean permits(java.util.Set,java.lang.String,java.security.AlgorithmParameters)>($r24, r4, r22);
        if $z1 != 0 goto label10;

        $r25 = new java.security.cert.CertPathValidatorException;
        $r26 = new java.lang.StringBuilder;
        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Algorithm constraints check failed: ");
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();
        $r6 = <java.security.cert.CertPathValidatorException$BasicReason: java.security.cert.CertPathValidatorException$BasicReason ALGORITHM_CONSTRAINED>;
        specialinvoke $r25.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int,java.security.cert.CertPathValidatorException$Reason)>($r29, null, null, -1, $r6);
        throw $r25;

     label10:
        r7 = virtualinvoke r14.<sun.security.x509.X509CertImpl: boolean[] getKeyUsage()>();
        if r7 == null goto label11;

        $i0 = lengthof r7;
        if $i0 >= 9 goto label11;

        $r30 = new java.security.cert.CertPathValidatorException;
        $r31 = <java.security.cert.PKIXReason: java.security.cert.PKIXReason INVALID_KEY_USAGE>;
        specialinvoke $r30.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int,java.security.cert.CertPathValidatorException$Reason)>("incorrect KeyUsage extension", null, null, -1, $r31);
        throw $r30;

     label11:
        if r7 == null goto label17;

        r8 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(class "java/security/CryptoPrimitive");
        $z2 = r7[0];
        if $z2 != 0 goto label12;

        $z3 = r7[1];
        if $z3 != 0 goto label12;

        $z4 = r7[5];
        if $z4 != 0 goto label12;

        $z5 = r7[6];
        if $z5 == 0 goto label13;

     label12:
        $r32 = <java.security.CryptoPrimitive: java.security.CryptoPrimitive SIGNATURE>;
        interfaceinvoke r8.<java.util.Set: boolean add(java.lang.Object)>($r32);

     label13:
        $z7 = r7[2];
        if $z7 == 0 goto label14;

        $r33 = <java.security.CryptoPrimitive: java.security.CryptoPrimitive KEY_ENCAPSULATION>;
        interfaceinvoke r8.<java.util.Set: boolean add(java.lang.Object)>($r33);

     label14:
        $z9 = r7[3];
        if $z9 == 0 goto label15;

        $r34 = <java.security.CryptoPrimitive: java.security.CryptoPrimitive PUBLIC_KEY_ENCRYPTION>;
        interfaceinvoke r8.<java.util.Set: boolean add(java.lang.Object)>($r34);

     label15:
        $z11 = r7[4];
        if $z11 == 0 goto label16;

        $r35 = <java.security.CryptoPrimitive: java.security.CryptoPrimitive KEY_AGREEMENT>;
        interfaceinvoke r8.<java.util.Set: boolean add(java.lang.Object)>($r35);

     label16:
        $z13 = interfaceinvoke r8.<java.util.Set: boolean isEmpty()>();
        if $z13 != 0 goto label17;

        $r36 = r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.AlgorithmConstraints constraints>;
        $z14 = interfaceinvoke $r36.<java.security.AlgorithmConstraints: boolean permits(java.util.Set,java.security.Key)>(r8, r17);
        if $z14 != 0 goto label17;

        $r37 = new java.security.cert.CertPathValidatorException;
        $r38 = <java.security.cert.CertPathValidatorException$BasicReason: java.security.cert.CertPathValidatorException$BasicReason ALGORITHM_CONSTRAINED>;
        specialinvoke $r37.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int,java.security.cert.CertPathValidatorException$Reason)>("algorithm constraints check failed", null, null, -1, $r38);
        throw $r37;

     label17:
        $r39 = r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.PublicKey prevPubKey>;
        if $r39 == null goto label23;

        if r4 == null goto label18;

        $r40 = r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.AlgorithmConstraints constraints>;
        $r41 = <sun.security.provider.certpath.AlgorithmChecker: java.util.Set SIGNATURE_PRIMITIVE_SET>;
        $r42 = r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.PublicKey prevPubKey>;
        $z15 = interfaceinvoke $r40.<java.security.AlgorithmConstraints: boolean permits(java.util.Set,java.lang.String,java.security.Key,java.security.AlgorithmParameters)>($r41, r4, $r42, r22);
        if $z15 != 0 goto label18;

        $r43 = new java.security.cert.CertPathValidatorException;
        $r44 = new java.lang.StringBuilder;
        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();
        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Algorithm constraints check failed: ");
        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();
        $r48 = <java.security.cert.CertPathValidatorException$BasicReason: java.security.cert.CertPathValidatorException$BasicReason ALGORITHM_CONSTRAINED>;
        specialinvoke $r43.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int,java.security.cert.CertPathValidatorException$Reason)>($r47, null, null, -1, $r48);
        throw $r43;

     label18:
        $z16 = r17 instanceof java.security.interfaces.DSAPublicKey;
        if $z16 == 0 goto label23;

        $r49 = (java.security.interfaces.DSAPublicKey) r17;
        $r50 = interfaceinvoke $r49.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();
        if $r50 != null goto label23;

        $r51 = r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.PublicKey prevPubKey>;
        $z17 = $r51 instanceof java.security.interfaces.DSAPublicKey;
        if $z17 != 0 goto label19;

        $r52 = new java.security.cert.CertPathValidatorException;
        specialinvoke $r52.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String)>("Input key is not of a appropriate type for inheriting parameters");
        throw $r52;

     label19:
        $r53 = r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.PublicKey prevPubKey>;
        $r54 = (java.security.interfaces.DSAPublicKey) $r53;
        r55 = interfaceinvoke $r54.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();
        if r55 != null goto label20;

        $r56 = new java.security.cert.CertPathValidatorException;
        specialinvoke $r56.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String)>("Key parameters missing");
        throw $r56;

     label20:
        $r57 = (java.security.interfaces.DSAPublicKey) r17;
        r9 = interfaceinvoke $r57.<java.security.interfaces.DSAPublicKey: java.math.BigInteger getY()>();
        r10 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("DSA");
        $r58 = new java.security.spec.DSAPublicKeySpec;
        $r59 = interfaceinvoke r55.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();
        $r60 = interfaceinvoke r55.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();
        $r61 = interfaceinvoke r55.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();
        specialinvoke $r58.<java.security.spec.DSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>(r9, $r59, $r60, $r61);
        r11 = $r58;
        r17 = virtualinvoke r10.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r11);

     label21:
        goto label23;

     label22:
        $r62 := @caughtexception;
        r63 = $r62;
        $r64 = new java.security.cert.CertPathValidatorException;
        $r65 = new java.lang.StringBuilder;
        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();
        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to generate key with inherited parameters: ");
        $r67 = virtualinvoke r63.<java.security.GeneralSecurityException: java.lang.String getMessage()>();
        $r68 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);
        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r64.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable)>($r69, r63);
        throw $r64;

     label23:
        r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.PublicKey prevPubKey> = r17;
        return;

        catch java.security.cert.CertificateException from label2 to label3 with label4;
        catch java.security.cert.CertificateException from label6 to label7 with label8;
        catch java.security.GeneralSecurityException from label20 to label21 with label22;
    }

    void trySetTrustAnchor(java.security.cert.TrustAnchor)
    {
        sun.security.provider.certpath.AlgorithmChecker r0;
        java.security.cert.TrustAnchor r1;
        java.security.PublicKey $r2, $r6, $r7;
        java.lang.IllegalArgumentException $r3;
        java.security.cert.X509Certificate $r4, $r5;

        r0 := @this: sun.security.provider.certpath.AlgorithmChecker;
        r1 := @parameter0: java.security.cert.TrustAnchor;
        $r2 = r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.PublicKey prevPubKey>;
        if $r2 != null goto label2;

        if r1 != null goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The trust anchor cannot be null");
        throw $r3;

     label0:
        $r4 = virtualinvoke r1.<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>();
        if $r4 == null goto label1;

        $r5 = virtualinvoke r1.<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>();
        $r6 = virtualinvoke $r5.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();
        r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.PublicKey prevPubKey> = $r6;
        goto label2;

     label1:
        $r7 = virtualinvoke r1.<java.security.cert.TrustAnchor: java.security.PublicKey getCAPublicKey()>();
        r0.<sun.security.provider.certpath.AlgorithmChecker: java.security.PublicKey prevPubKey> = $r7;

     label2:
        return;
    }

    static void check(java.security.PublicKey, java.security.cert.X509CRL) throws java.security.cert.CertPathValidatorException
    {
        java.security.PublicKey r0;
        java.security.cert.X509CRL r1;
        null_type n0;
        java.security.cert.CRLException r2, $r4;
        sun.security.x509.X509CRLImpl r3;
        java.security.cert.CertPathValidatorException $r5;
        sun.security.x509.AlgorithmId r6;

        r0 := @parameter0: java.security.PublicKey;
        r1 := @parameter1: java.security.cert.X509CRL;
        n0 = null;

     label0:
        r3 = staticinvoke <sun.security.x509.X509CRLImpl: sun.security.x509.X509CRLImpl toImpl(java.security.cert.X509CRL)>(r1);

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        $r5 = new java.security.cert.CertPathValidatorException;
        specialinvoke $r5.<java.security.cert.CertPathValidatorException: void <init>(java.lang.Throwable)>(r2);
        throw $r5;

     label3:
        r6 = virtualinvoke r3.<sun.security.x509.X509CRLImpl: sun.security.x509.AlgorithmId getSigAlgId()>();
        staticinvoke <sun.security.provider.certpath.AlgorithmChecker: void check(java.security.PublicKey,sun.security.x509.AlgorithmId)>(r0, r6);
        return;

        catch java.security.cert.CRLException from label0 to label1 with label2;
    }

    static void check(java.security.PublicKey, sun.security.x509.AlgorithmId) throws java.security.cert.CertPathValidatorException
    {
        java.security.PublicKey r0;
        sun.security.x509.AlgorithmId r1;
        java.lang.String r2, $r12;
        java.security.AlgorithmParameters r3;
        java.util.Set $r4;
        java.security.cert.CertPathValidatorException$BasicReason $r5;
        sun.security.util.DisabledAlgorithmConstraints $r6;
        boolean $z0;
        java.security.cert.CertPathValidatorException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;

        r0 := @parameter0: java.security.PublicKey;
        r1 := @parameter1: sun.security.x509.AlgorithmId;
        r2 = virtualinvoke r1.<sun.security.x509.AlgorithmId: java.lang.String getName()>();
        r3 = virtualinvoke r1.<sun.security.x509.AlgorithmId: java.security.AlgorithmParameters getParameters()>();
        $r6 = <sun.security.provider.certpath.AlgorithmChecker: sun.security.util.DisabledAlgorithmConstraints certPathDefaultConstraints>;
        $r4 = <sun.security.provider.certpath.AlgorithmChecker: java.util.Set SIGNATURE_PRIMITIVE_SET>;
        $z0 = virtualinvoke $r6.<sun.security.util.DisabledAlgorithmConstraints: boolean permits(java.util.Set,java.lang.String,java.security.Key,java.security.AlgorithmParameters)>($r4, r2, r0, r3);
        if $z0 != 0 goto label0;

        $r7 = new java.security.cert.CertPathValidatorException;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("algorithm check failed: ");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is disabled");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        $r5 = <java.security.cert.CertPathValidatorException$BasicReason: java.security.cert.CertPathValidatorException$BasicReason ALGORITHM_CONSTRAINED>;
        specialinvoke $r7.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int,java.security.cert.CertPathValidatorException$Reason)>($r12, null, null, -1, $r5);
        throw $r7;

     label0:
        return;
    }

    static void <clinit>()
    {
        java.security.CryptoPrimitive $r0;
        java.util.EnumSet $r1;
        java.util.Set $r2;
        sun.security.util.DisabledAlgorithmConstraints $r3;

        $r0 = <java.security.CryptoPrimitive: java.security.CryptoPrimitive SIGNATURE>;
        $r1 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>($r0);
        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);
        <sun.security.provider.certpath.AlgorithmChecker: java.util.Set SIGNATURE_PRIMITIVE_SET> = $r2;
        $r3 = new sun.security.util.DisabledAlgorithmConstraints;
        specialinvoke $r3.<sun.security.util.DisabledAlgorithmConstraints: void <init>(java.lang.String)>("jdk.certpath.disabledAlgorithms");
        <sun.security.provider.certpath.AlgorithmChecker: sun.security.util.DisabledAlgorithmConstraints certPathDefaultConstraints> = $r3;
        return;
    }
}
