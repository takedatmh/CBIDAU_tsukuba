class sun.reflect.Label extends java.lang.Object
{
    private java.util.List patches;

    public void <init>()
    {
        sun.reflect.Label r0;
        java.util.ArrayList $r1;

        r0 := @this: sun.reflect.Label;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>()>();
        r0.<sun.reflect.Label: java.util.List patches> = $r1;
        return;
    }

    void add(sun.reflect.ClassFileAssembler, short, short, int)
    {
        sun.reflect.Label r0;
        sun.reflect.ClassFileAssembler r1;
        short s0, s1;
        int i2;
        sun.reflect.Label$PatchInfo $r2;
        java.util.List $r3;

        r0 := @this: sun.reflect.Label;
        r1 := @parameter0: sun.reflect.ClassFileAssembler;
        s0 := @parameter1: short;
        s1 := @parameter2: short;
        i2 := @parameter3: int;
        $r3 = r0.<sun.reflect.Label: java.util.List patches>;
        $r2 = new sun.reflect.Label$PatchInfo;
        specialinvoke $r2.<sun.reflect.Label$PatchInfo: void <init>(sun.reflect.ClassFileAssembler,short,short,int)>(r1, s0, s1, i2);
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);
        return;
    }

    public void bind()
    {
        sun.reflect.Label r0;
        java.util.Iterator r1;
        sun.reflect.Label$PatchInfo r2;
        short s0, s1, $s2, $s4;
        java.util.List $r3;
        boolean $z0;
        java.lang.Object $r4;
        sun.reflect.ClassFileAssembler $r5, $r6, $r7;
        int $i3, $i5;

        r0 := @this: sun.reflect.Label;
        $r3 = r0.<sun.reflect.Label: java.util.List patches>;
        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        r2 = (sun.reflect.Label$PatchInfo) $r4;
        $r5 = r2.<sun.reflect.Label$PatchInfo: sun.reflect.ClassFileAssembler asm>;
        s0 = virtualinvoke $r5.<sun.reflect.ClassFileAssembler: short getLength()>();
        $s2 = r2.<sun.reflect.Label$PatchInfo: short instrBCI>;
        $i3 = s0 - $s2;
        s1 = (short) $i3;
        $r6 = r2.<sun.reflect.Label$PatchInfo: sun.reflect.ClassFileAssembler asm>;
        $s4 = r2.<sun.reflect.Label$PatchInfo: short patchBCI>;
        virtualinvoke $r6.<sun.reflect.ClassFileAssembler: void emitShort(short,short)>($s4, s1);
        $r7 = r2.<sun.reflect.Label$PatchInfo: sun.reflect.ClassFileAssembler asm>;
        $i5 = r2.<sun.reflect.Label$PatchInfo: int stackDepth>;
        virtualinvoke $r7.<sun.reflect.ClassFileAssembler: void setStack(int)>($i5);
        goto label0;

     label1:
        return;
    }
}
