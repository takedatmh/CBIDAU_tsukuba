public class org.apache.tomcat.util.http.parser.Host extends java.lang.Object
{

    public void <init>()
    {
        org.apache.tomcat.util.http.parser.Host r0;

        r0 := @this: org.apache.tomcat.util.http.parser.Host;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static int parse(org.apache.tomcat.util.buf.MessageBytes)
    {
        org.apache.tomcat.util.buf.MessageBytes r0;
        org.apache.tomcat.util.http.parser.Host$MessageBytesReader $r1;
        int $i0;

        r0 := @parameter0: org.apache.tomcat.util.buf.MessageBytes;
        $r1 = new org.apache.tomcat.util.http.parser.Host$MessageBytesReader;
        specialinvoke $r1.<org.apache.tomcat.util.http.parser.Host$MessageBytesReader: void <init>(org.apache.tomcat.util.buf.MessageBytes)>(r0);
        $i0 = staticinvoke <org.apache.tomcat.util.http.parser.Host: int parse(java.io.Reader)>($r1);
        return $i0;
    }

    public static int parse(java.lang.String)
    {
        java.lang.String r0;
        java.io.StringReader $r1;
        int $i0;

        r0 := @parameter0: java.lang.String;
        $r1 = new java.io.StringReader;
        specialinvoke $r1.<java.io.StringReader: void <init>(java.lang.String)>(r0);
        $i0 = staticinvoke <org.apache.tomcat.util.http.parser.Host: int parse(java.io.Reader)>($r1);
        return $i0;
    }

    private static int parse(java.io.Reader)
    {
        java.io.Reader r0;
        int i0, $i1, $i2, $i3;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r1, $r4;
        java.io.IOException $r2, r3;

        r0 := @parameter0: java.io.Reader;

     label0:
        virtualinvoke r0.<java.io.Reader: void mark(int)>(1);
        i0 = virtualinvoke r0.<java.io.Reader: int read()>();
        virtualinvoke r0.<java.io.Reader: void reset()>();
        $z0 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: boolean isAlpha(int)>(i0);
        if $z0 == 0 goto label2;

        $i1 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: int readHostDomainName(java.io.Reader)>(r0);

     label1:
        return $i1;

     label2:
        $z1 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: boolean isNumeric(int)>(i0);
        if $z1 == 0 goto label4;

        $i2 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: int readHostIPv4(java.io.Reader,boolean)>(r0, 0);

     label3:
        return $i2;

     label4:
        if 91 != i0 goto label6;

        $i3 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: int readHostIPv6(java.io.Reader)>(r0);

     label5:
        return $i3;

     label6:
        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r1;

     label7:
        $r2 := @caughtexception;
        r3 = $r2;
        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r3);
        throw $r4;

        catch java.io.IOException from label0 to label1 with label7;
        catch java.io.IOException from label2 to label3 with label7;
        catch java.io.IOException from label4 to label5 with label7;
        catch java.io.IOException from label6 to label7 with label7;
    }
}
