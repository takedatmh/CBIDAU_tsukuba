public class java.util.Stack extends java.util.Vector
{
    private static final long serialVersionUID;

    public void <init>()
    {
        java.util.Stack r0;

        r0 := @this: java.util.Stack;
        specialinvoke r0.<java.util.Vector: void <init>()>();
        return;
    }

    public java.lang.Object push(java.lang.Object)
    {
        java.util.Stack r0;
        java.lang.Object r1;

        r0 := @this: java.util.Stack;
        r1 := @parameter0: java.lang.Object;
        virtualinvoke r0.<java.util.Stack: void addElement(java.lang.Object)>(r1);
        return r1;
    }

    public synchronized java.lang.Object pop()
    {
        java.util.Stack r0;
        int i0, $i1;
        java.lang.Object r1;

        r0 := @this: java.util.Stack;
        i0 = virtualinvoke r0.<java.util.Stack: int size()>();
        r1 = virtualinvoke r0.<java.util.Stack: java.lang.Object peek()>();
        $i1 = i0 - 1;
        virtualinvoke r0.<java.util.Stack: void removeElementAt(int)>($i1);
        return r1;
    }

    public synchronized java.lang.Object peek()
    {
        java.util.Stack r0;
        int i0, $i1;
        java.util.EmptyStackException $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.Stack;
        i0 = virtualinvoke r0.<java.util.Stack: int size()>();
        if i0 != 0 goto label0;

        $r1 = new java.util.EmptyStackException;
        specialinvoke $r1.<java.util.EmptyStackException: void <init>()>();
        throw $r1;

     label0:
        $i1 = i0 - 1;
        $r2 = virtualinvoke r0.<java.util.Stack: java.lang.Object elementAt(int)>($i1);
        return $r2;
    }

    public boolean empty()
    {
        java.util.Stack r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.Stack;
        $i0 = virtualinvoke r0.<java.util.Stack: int size()>();
        if $i0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public synchronized int search(java.lang.Object)
    {
        java.util.Stack r0;
        java.lang.Object r1;
        int i0, $i1, $i2;

        r0 := @this: java.util.Stack;
        r1 := @parameter0: java.lang.Object;
        i0 = virtualinvoke r0.<java.util.Stack: int lastIndexOf(java.lang.Object)>(r1);
        if i0 < 0 goto label0;

        $i1 = virtualinvoke r0.<java.util.Stack: int size()>();
        $i2 = $i1 - i0;
        return $i2;

     label0:
        return -1;
    }
}
