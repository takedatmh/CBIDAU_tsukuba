class java.nio.DirectByteBuffer$Deallocator extends java.lang.Object implements java.lang.Runnable
{
    private static sun.misc.Unsafe unsafe;
    private long address;
    private long size;
    private int capacity;
    static final boolean $assertionsDisabled;

    private void <init>(long, long, int)
    {
        java.nio.DirectByteBuffer$Deallocator r0;
        long l0, l1;
        int i2;
        boolean $z0;
        byte $b3;
        java.lang.AssertionError $r1;

        r0 := @this: java.nio.DirectByteBuffer$Deallocator;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        i2 := @parameter2: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $z0 = <java.nio.DirectByteBuffer$Deallocator: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $b3 = l0 cmp 0L;
        if $b3 != 0 goto label0;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label0:
        r0.<java.nio.DirectByteBuffer$Deallocator: long address> = l0;
        r0.<java.nio.DirectByteBuffer$Deallocator: long size> = l1;
        r0.<java.nio.DirectByteBuffer$Deallocator: int capacity> = i2;
        return;
    }

    public void run()
    {
        java.nio.DirectByteBuffer$Deallocator r0;
        long $l0, $l2, $l3;
        byte $b1;
        sun.misc.Unsafe $r1;
        int $i4;

        r0 := @this: java.nio.DirectByteBuffer$Deallocator;
        $l0 = r0.<java.nio.DirectByteBuffer$Deallocator: long address>;
        $b1 = $l0 cmp 0L;
        if $b1 != 0 goto label0;

        return;

     label0:
        $r1 = <java.nio.DirectByteBuffer$Deallocator: sun.misc.Unsafe unsafe>;
        $l2 = r0.<java.nio.DirectByteBuffer$Deallocator: long address>;
        virtualinvoke $r1.<sun.misc.Unsafe: void freeMemory(long)>($l2);
        r0.<java.nio.DirectByteBuffer$Deallocator: long address> = 0L;
        $l3 = r0.<java.nio.DirectByteBuffer$Deallocator: long size>;
        $i4 = r0.<java.nio.DirectByteBuffer$Deallocator: int capacity>;
        staticinvoke <java.nio.Bits: void unreserveMemory(long,int)>($l3, $i4);
        return;
    }

    void <init>(long, long, int, java.nio.DirectByteBuffer$1)
    {
        java.nio.DirectByteBuffer$Deallocator r0;
        long l0, l1;
        int i2;
        java.nio.DirectByteBuffer$1 r1;

        r0 := @this: java.nio.DirectByteBuffer$Deallocator;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        i2 := @parameter2: int;
        r1 := @parameter3: java.nio.DirectByteBuffer$1;
        specialinvoke r0.<java.nio.DirectByteBuffer$Deallocator: void <init>(long,long,int)>(l0, l1, i2);
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        sun.misc.Unsafe $r1;

        $r0 = class "java/nio/DirectByteBuffer";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.nio.DirectByteBuffer$Deallocator: boolean $assertionsDisabled> = $z1;
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <java.nio.DirectByteBuffer$Deallocator: sun.misc.Unsafe unsafe> = $r1;
        return;
    }
}
