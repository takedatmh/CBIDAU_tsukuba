public class java.util.logging.LogManager extends java.lang.Object
{
    private static java.util.logging.LogManager manager;
    private volatile java.util.Properties props;
    private java.beans.PropertyChangeSupport changes;
    private static final java.util.logging.Level defaultLevel;
    private final java.util.logging.LogManager$LoggerContext systemContext;
    private final java.util.logging.LogManager$LoggerContext userContext;
    private java.util.logging.Logger rootLogger;
    private volatile boolean readPrimordialConfiguration;
    private boolean initializedGlobalHandlers;
    private boolean deathImminent;
    private static java.util.WeakHashMap contextsMap;
    private final java.lang.ref.ReferenceQueue loggerRefQueue;
    private static final int MAX_ITERATIONS;
    private final java.security.Permission controlPermission;
    private static java.util.logging.LoggingMXBean loggingMXBean;
    public static final java.lang.String LOGGING_MXBEAN_NAME;

    protected void <init>()
    {
        java.util.logging.LogManager r0;
        java.lang.Void $r1;

        r0 := @this: java.util.logging.LogManager;
        $r1 = staticinvoke <java.util.logging.LogManager: java.lang.Void checkSubclassPermissions()>();
        specialinvoke r0.<java.util.logging.LogManager: void <init>(java.lang.Void)>($r1);
        return;
    }

    private void <init>(java.lang.Void)
    {
        java.util.logging.LogManager r0;
        java.lang.Void r1;
        java.util.Properties $r2;
        java.lang.IllegalStateException r3, $r11;
        java.beans.PropertyChangeSupport $r4;
        java.util.logging.LogManager$SystemLoggerContext $r5;
        java.util.logging.LogManager$LoggerContext $r6;
        java.lang.ref.ReferenceQueue $r7;
        java.util.logging.LoggingPermission $r8;
        java.lang.Runtime $r9;
        java.util.logging.LogManager$Cleaner $r10;

        r0 := @this: java.util.logging.LogManager;
        r1 := @parameter0: java.lang.Void;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = new java.util.Properties;
        specialinvoke $r2.<java.util.Properties: void <init>()>();
        r0.<java.util.logging.LogManager: java.util.Properties props> = $r2;
        $r4 = new java.beans.PropertyChangeSupport;
        specialinvoke $r4.<java.beans.PropertyChangeSupport: void <init>(java.lang.Object)>(class "java/util/logging/LogManager");
        r0.<java.util.logging.LogManager: java.beans.PropertyChangeSupport changes> = $r4;
        $r5 = new java.util.logging.LogManager$SystemLoggerContext;
        specialinvoke $r5.<java.util.logging.LogManager$SystemLoggerContext: void <init>()>();
        r0.<java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext systemContext> = $r5;
        $r6 = new java.util.logging.LogManager$LoggerContext;
        specialinvoke $r6.<java.util.logging.LogManager$LoggerContext: void <init>(java.util.logging.LogManager$1)>(null);
        r0.<java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext userContext> = $r6;
        r0.<java.util.logging.LogManager: boolean initializedGlobalHandlers> = 1;
        $r7 = new java.lang.ref.ReferenceQueue;
        specialinvoke $r7.<java.lang.ref.ReferenceQueue: void <init>()>();
        r0.<java.util.logging.LogManager: java.lang.ref.ReferenceQueue loggerRefQueue> = $r7;
        $r8 = new java.util.logging.LoggingPermission;
        specialinvoke $r8.<java.util.logging.LoggingPermission: void <init>(java.lang.String,java.lang.String)>("control", null);
        r0.<java.util.logging.LogManager: java.security.Permission controlPermission> = $r8;

     label0:
        $r9 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
        $r10 = new java.util.logging.LogManager$Cleaner;
        specialinvoke $r10.<java.util.logging.LogManager$Cleaner: void <init>(java.util.logging.LogManager,java.util.logging.LogManager$1)>(r0, null);
        virtualinvoke $r9.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r10);

     label1:
        goto label3;

     label2:
        $r11 := @caughtexception;
        r3 = $r11;

     label3:
        return;

        catch java.lang.IllegalStateException from label0 to label1 with label2;
    }

    private static java.lang.Void checkSubclassPermissions()
    {
        java.lang.SecurityManager r0;
        java.lang.RuntimePermission $r1, $r2;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r0 == null goto label0;

        $r1 = new java.lang.RuntimePermission;
        specialinvoke $r1.<java.lang.RuntimePermission: void <init>(java.lang.String)>("shutdownHooks");
        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r1);
        $r2 = new java.lang.RuntimePermission;
        specialinvoke $r2.<java.lang.RuntimePermission: void <init>(java.lang.String)>("setContextClassLoader");
        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label0:
        return null;
    }

    public static java.util.logging.LogManager getLogManager()
    {
        java.util.logging.LogManager $r0, $r1, $r2;

        $r0 = <java.util.logging.LogManager: java.util.logging.LogManager manager>;
        if $r0 == null goto label0;

        $r1 = <java.util.logging.LogManager: java.util.logging.LogManager manager>;
        specialinvoke $r1.<java.util.logging.LogManager: void readPrimordialConfiguration()>();

     label0:
        $r2 = <java.util.logging.LogManager: java.util.logging.LogManager manager>;
        return $r2;
    }

    private void readPrimordialConfiguration()
    {
        java.util.logging.LogManager r0, r1;
        java.lang.Exception r2, $r8;
        java.lang.Throwable r3, $r9;
        boolean $z0, $z1;
        java.io.PrintStream $r5;
        java.util.logging.LogManager$2 $r6;

        r0 := @this: java.util.logging.LogManager;
        $z0 = r0.<java.util.logging.LogManager: boolean readPrimordialConfiguration>;
        if $z0 != 0 goto label11;

        r1 = r0;
        entermonitor r0;

     label0:
        $z1 = r0.<java.util.logging.LogManager: boolean readPrimordialConfiguration>;
        if $z1 != 0 goto label6;

        $r5 = <java.lang.System: java.io.PrintStream out>;
        if $r5 != null goto label2;

        exitmonitor r1;

     label1:
        return;

     label2:
        r0.<java.util.logging.LogManager: boolean readPrimordialConfiguration> = 1;

     label3:
        $r6 = new java.util.logging.LogManager$2;
        specialinvoke $r6.<java.util.logging.LogManager$2: void <init>(java.util.logging.LogManager)>(r0);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r6);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;
        r2 = $r8;

     label6:
        exitmonitor r1;

     label7:
        goto label11;

     label8:
        $r9 := @caughtexception;

     label9:
        r3 = $r9;
        exitmonitor r1;

     label10:
        throw r3;

     label11:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
        catch java.lang.Throwable from label0 to label1 with label8;
        catch java.lang.Throwable from label2 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    public void addPropertyChangeListener(java.beans.PropertyChangeListener) throws java.lang.SecurityException
    {
        java.util.logging.LogManager r0;
        java.beans.PropertyChangeListener r1;
        java.lang.NullPointerException $r2;
        java.beans.PropertyChangeSupport $r3;

        r0 := @this: java.util.logging.LogManager;
        r1 := @parameter0: java.beans.PropertyChangeListener;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        virtualinvoke r0.<java.util.logging.LogManager: void checkPermission()>();
        $r3 = r0.<java.util.logging.LogManager: java.beans.PropertyChangeSupport changes>;
        virtualinvoke $r3.<java.beans.PropertyChangeSupport: void addPropertyChangeListener(java.beans.PropertyChangeListener)>(r1);
        return;
    }

    public void removePropertyChangeListener(java.beans.PropertyChangeListener) throws java.lang.SecurityException
    {
        java.util.logging.LogManager r0;
        java.beans.PropertyChangeListener r1;
        java.beans.PropertyChangeSupport $r2;

        r0 := @this: java.util.logging.LogManager;
        r1 := @parameter0: java.beans.PropertyChangeListener;
        virtualinvoke r0.<java.util.logging.LogManager: void checkPermission()>();
        $r2 = r0.<java.util.logging.LogManager: java.beans.PropertyChangeSupport changes>;
        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void removePropertyChangeListener(java.beans.PropertyChangeListener)>(r1);
        return;
    }

    private java.util.logging.LogManager$LoggerContext getUserContext()
    {
        java.util.logging.LogManager r0;
        java.util.logging.LogManager$LoggerContext r1, $r12, $r16;
        java.lang.SecurityManager r2;
        sun.misc.JavaAWTAccess r3, r5;
        java.lang.Object r4, $r11;
        java.lang.Throwable r6, $r15;
        java.util.WeakHashMap $r8, $r9, $r10, $r13;

        r0 := @this: java.util.logging.LogManager;
        r1 = null;
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        r3 = staticinvoke <sun.misc.SharedSecrets: sun.misc.JavaAWTAccess getJavaAWTAccess()>();
        if r2 == null goto label7;

        if r3 == null goto label7;

        r4 = interfaceinvoke r3.<sun.misc.JavaAWTAccess: java.lang.Object getAppletContext()>();
        if r4 == null goto label7;

        r5 = r3;
        entermonitor r3;

     label0:
        $r8 = <java.util.logging.LogManager: java.util.WeakHashMap contextsMap>;
        if $r8 != null goto label1;

        $r9 = new java.util.WeakHashMap;
        specialinvoke $r9.<java.util.WeakHashMap: void <init>()>();
        <java.util.logging.LogManager: java.util.WeakHashMap contextsMap> = $r9;

     label1:
        $r10 = <java.util.logging.LogManager: java.util.WeakHashMap contextsMap>;
        $r11 = virtualinvoke $r10.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r4);
        r1 = (java.util.logging.LogManager$LoggerContext) $r11;
        if r1 != null goto label2;

        $r12 = new java.util.logging.LogManager$LoggerContext;
        specialinvoke $r12.<java.util.logging.LogManager$LoggerContext: void <init>(boolean,java.util.logging.LogManager$1)>(1, null);
        r1 = $r12;
        $r13 = <java.util.logging.LogManager: java.util.WeakHashMap contextsMap>;
        virtualinvoke $r13.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r1);

     label2:
        exitmonitor r5;

     label3:
        goto label7;

     label4:
        $r15 := @caughtexception;

     label5:
        r6 = $r15;
        exitmonitor r5;

     label6:
        throw r6;

     label7:
        if r1 == null goto label8;

        $r16 = r1;
        goto label9;

     label8:
        $r16 = r0.<java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext userContext>;

     label9:
        return $r16;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private java.util.List contexts()
    {
        java.util.logging.LogManager r0;
        java.util.ArrayList $r1, r2;
        java.util.logging.LogManager$LoggerContext $r3, $r4;

        r0 := @this: java.util.logging.LogManager;
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>()>();
        r2 = $r1;
        $r3 = r0.<java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext systemContext>;
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3);
        $r4 = specialinvoke r0.<java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext getUserContext()>();
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r4);
        return r2;
    }

    java.util.logging.Logger demandLogger(java.lang.String, java.lang.String, java.lang.Class)
    {
        java.util.logging.LogManager r0;
        java.lang.String r1, r2;
        java.lang.Class r3;
        java.util.logging.Logger r4, r5, $r6;
        boolean $z0;

        r0 := @this: java.util.logging.LogManager;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Class;
        r4 = virtualinvoke r0.<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>(r1);
        if r4 != null goto label2;

        $r6 = new java.util.logging.Logger;
        specialinvoke $r6.<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String,java.lang.Class,boolean)>(r1, r2, r3, 0);
        r5 = $r6;

     label0:
        $z0 = virtualinvoke r0.<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>(r5);
        if $z0 == 0 goto label1;

        return r5;

     label1:
        r4 = virtualinvoke r0.<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>(r1);
        if r4 == null goto label0;

     label2:
        return r4;
    }

    java.util.logging.Logger demandSystemLogger(java.lang.String, java.lang.String)
    {
        java.util.logging.LogManager r0;
        java.lang.String r1, r2;
        java.util.logging.Logger r3, r4, r5;
        java.util.logging.LogManager$LoggerContext $r6;
        boolean $z0;
        java.util.logging.Handler[] $r7;
        int $i0;
        java.util.logging.LogManager$3 $r8;

        r0 := @this: java.util.logging.LogManager;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        $r6 = r0.<java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext systemContext>;
        r3 = virtualinvoke $r6.<java.util.logging.LogManager$LoggerContext: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String)>(r1, r2);

     label0:
        $z0 = virtualinvoke r0.<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>(r3);
        if $z0 == 0 goto label1;

        r4 = r3;
        goto label2;

     label1:
        r4 = virtualinvoke r0.<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>(r1);

     label2:
        if r4 == null goto label0;

        if r4 == r3 goto label3;

        $r7 = virtualinvoke r3.<java.util.logging.Logger: java.util.logging.Handler[] accessCheckedHandlers()>();
        $i0 = lengthof $r7;
        if $i0 != 0 goto label3;

        r5 = r4;
        $r8 = new java.util.logging.LogManager$3;
        specialinvoke $r8.<java.util.logging.LogManager$3: void <init>(java.util.logging.LogManager,java.util.logging.Logger,java.util.logging.Logger)>(r0, r5, r3);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r8);

     label3:
        return r3;
    }

    private void loadLoggerHandlers(java.util.logging.Logger, java.lang.String, java.lang.String)
    {
        java.util.logging.LogManager r0;
        java.util.logging.Logger r1;
        java.lang.String r2, r3;
        java.util.logging.LogManager$4 $r4;

        r0 := @this: java.util.logging.LogManager;
        r1 := @parameter0: java.util.logging.Logger;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        $r4 = new java.util.logging.LogManager$4;
        specialinvoke $r4.<java.util.logging.LogManager$4: void <init>(java.util.logging.LogManager,java.lang.String,java.util.logging.Logger)>(r0, r3, r1);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r4);
        return;
    }

    final void drainLoggerRefQueueBounded()
    {
        java.util.logging.LogManager r0;
        int i0;
        java.util.logging.LogManager$LoggerWeakRef r1;
        java.lang.ref.ReferenceQueue $r2, $r3;
        java.lang.ref.Reference $r4;

        r0 := @this: java.util.logging.LogManager;
        i0 = 0;

     label0:
        if i0 >= 400 goto label3;

        $r2 = r0.<java.util.logging.LogManager: java.lang.ref.ReferenceQueue loggerRefQueue>;
        if $r2 != null goto label1;

        goto label3;

     label1:
        $r3 = r0.<java.util.logging.LogManager: java.lang.ref.ReferenceQueue loggerRefQueue>;
        $r4 = virtualinvoke $r3.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();
        r1 = (java.util.logging.LogManager$LoggerWeakRef) $r4;
        if r1 != null goto label2;

        goto label3;

     label2:
        virtualinvoke r1.<java.util.logging.LogManager$LoggerWeakRef: void dispose()>();
        i0 = i0 + 1;
        goto label0;

     label3:
        return;
    }

    public boolean addLogger(java.util.logging.Logger)
    {
        java.util.logging.LogManager r0;
        java.util.logging.Logger r1;
        java.lang.String r2, $r8;
        java.util.logging.LogManager$LoggerContext r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.NullPointerException $r5;
        boolean $z0;

        r0 := @this: java.util.logging.LogManager;
        r1 := @parameter0: java.util.logging.Logger;
        r2 = virtualinvoke r1.<java.util.logging.Logger: java.lang.String getName()>();
        if r2 != null goto label0;

        $r5 = new java.lang.NullPointerException;
        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();
        throw $r5;

     label0:
        virtualinvoke r0.<java.util.logging.LogManager: void drainLoggerRefQueueBounded()>();
        r3 = specialinvoke r0.<java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext getUserContext()>();
        $z0 = virtualinvoke r3.<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger)>(r1);
        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".handlers");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke r0.<java.util.logging.LogManager: void loadLoggerHandlers(java.util.logging.Logger,java.lang.String,java.lang.String)>(r1, r2, $r8);
        return 1;

     label1:
        return 0;
    }

    private static void doSetLevel(java.util.logging.Logger, java.util.logging.Level)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.SecurityManager r2;
        java.util.logging.LogManager$5 $r3;

        r0 := @parameter0: java.util.logging.Logger;
        r1 := @parameter1: java.util.logging.Level;
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 != null goto label0;

        virtualinvoke r0.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>(r1);
        return;

     label0:
        $r3 = new java.util.logging.LogManager$5;
        specialinvoke $r3.<java.util.logging.LogManager$5: void <init>(java.util.logging.Logger,java.util.logging.Level)>(r0, r1);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r3);
        return;
    }

    private static void doSetParent(java.util.logging.Logger, java.util.logging.Logger)
    {
        java.util.logging.Logger r0, r1;
        java.lang.SecurityManager r2;
        java.util.logging.LogManager$6 $r3;

        r0 := @parameter0: java.util.logging.Logger;
        r1 := @parameter1: java.util.logging.Logger;
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 != null goto label0;

        virtualinvoke r0.<java.util.logging.Logger: void setParent(java.util.logging.Logger)>(r1);
        return;

     label0:
        $r3 = new java.util.logging.LogManager$6;
        specialinvoke $r3.<java.util.logging.LogManager$6: void <init>(java.util.logging.Logger,java.util.logging.Logger)>(r0, r1);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r3);
        return;
    }

    public java.util.logging.Logger getLogger(java.lang.String)
    {
        java.util.logging.LogManager r0;
        java.lang.String r1;
        java.util.logging.LogManager$LoggerContext $r2;
        java.util.logging.Logger $r3;

        r0 := @this: java.util.logging.LogManager;
        r1 := @parameter0: java.lang.String;
        $r2 = specialinvoke r0.<java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext getUserContext()>();
        $r3 = virtualinvoke $r2.<java.util.logging.LogManager$LoggerContext: java.util.logging.Logger findLogger(java.lang.String)>(r1);
        return $r3;
    }

    public java.util.Enumeration getLoggerNames()
    {
        java.util.logging.LogManager r0;
        java.util.logging.LogManager$LoggerContext $r1;
        java.util.Enumeration $r2;

        r0 := @this: java.util.logging.LogManager;
        $r1 = specialinvoke r0.<java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext getUserContext()>();
        $r2 = virtualinvoke $r1.<java.util.logging.LogManager$LoggerContext: java.util.Enumeration getLoggerNames()>();
        return $r2;
    }

    public void readConfiguration() throws java.io.IOException, java.lang.SecurityException
    {
        java.util.logging.LogManager r0;
        java.lang.String r1, $r20, $r25, r26, r27;
        java.lang.Class r2, r3;
        java.io.BufferedInputStream r4, $r35;
        java.lang.Throwable r5, $r36;
        java.lang.ClassLoader $r6, $r11;
        java.lang.ClassNotFoundException $r8, r9;
        java.lang.Thread $r10;
        java.lang.Exception $r13, r14;
        java.io.PrintStream $r15, $r21;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r22, $r23, $r24;
        java.lang.Error $r28;
        java.io.File $r29, r30, $r31, r32;
        java.io.FileInputStream $r33, r34;

        r0 := @this: java.util.logging.LogManager;
        virtualinvoke r0.<java.util.logging.LogManager: void checkPermission()>();
        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.logging.config.class");
        if r1 == null goto label6;

     label0:
        $r6 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        r2 = virtualinvoke $r6.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);
        virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();

     label1:
        return;

     label2:
        $r8 := @caughtexception;

     label3:
        r9 = $r8;
        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $r11 = virtualinvoke $r10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
        r3 = virtualinvoke $r11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);
        virtualinvoke r3.<java.lang.Class: java.lang.Object newInstance()>();

     label4:
        return;

     label5:
        $r13 := @caughtexception;
        r14 = $r13;
        $r15 = <java.lang.System: java.io.PrintStream err>;
        $r16 = new java.lang.StringBuilder;
        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Logging configuration class \"");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" failed");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r20);
        $r21 = <java.lang.System: java.io.PrintStream err>;
        $r22 = new java.lang.StringBuilder;
        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r25);

     label6:
        r26 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.logging.config.file");
        if r26 != null goto label8;

        r27 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");
        if r27 != null goto label7;

        $r28 = new java.lang.Error;
        specialinvoke $r28.<java.lang.Error: void <init>(java.lang.String)>("Can\'t find java.home ??");
        throw $r28;

     label7:
        $r29 = new java.io.File;
        specialinvoke $r29.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r27, "lib");
        r30 = $r29;
        $r31 = new java.io.File;
        specialinvoke $r31.<java.io.File: void <init>(java.io.File,java.lang.String)>(r30, "logging.properties");
        r32 = $r31;
        r26 = virtualinvoke r32.<java.io.File: java.lang.String getCanonicalPath()>();

     label8:
        $r33 = new java.io.FileInputStream;
        specialinvoke $r33.<java.io.FileInputStream: void <init>(java.lang.String)>(r26);
        r34 = $r33;
        $r35 = new java.io.BufferedInputStream;
        specialinvoke $r35.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r34);
        r4 = $r35;

     label9:
        virtualinvoke r0.<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>(r4);

     label10:
        if r34 == null goto label15;

        virtualinvoke r34.<java.io.InputStream: void close()>();
        goto label15;

     label11:
        $r36 := @caughtexception;

     label12:
        r5 = $r36;

     label13:
        if r34 == null goto label14;

        virtualinvoke r34.<java.io.InputStream: void close()>();

     label14:
        throw r5;

     label15:
        return;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
        catch java.lang.Exception from label0 to label1 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
        catch java.lang.Throwable from label9 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void reset() throws java.lang.SecurityException
    {
        java.util.logging.LogManager r0, r1;
        java.lang.Throwable r2, $r8;
        java.util.Enumeration r3;
        java.lang.String r4;
        java.util.logging.Logger r5;
        java.util.Properties $r7;
        java.util.List $r9;
        java.util.Iterator r10;
        boolean $z0, $z1;
        java.lang.Object $r11, $r13;
        java.util.logging.LogManager$LoggerContext r12;

        r0 := @this: java.util.logging.LogManager;
        virtualinvoke r0.<java.util.logging.LogManager: void checkPermission()>();
        r1 = r0;
        entermonitor r0;

     label0:
        $r7 = new java.util.Properties;
        specialinvoke $r7.<java.util.Properties: void <init>()>();
        r0.<java.util.logging.LogManager: java.util.Properties props> = $r7;
        r0.<java.util.logging.LogManager: boolean initializedGlobalHandlers> = 1;
        exitmonitor r1;

     label1:
        goto label5;

     label2:
        $r8 := @caughtexception;

     label3:
        r2 = $r8;
        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r9 = specialinvoke r0.<java.util.logging.LogManager: java.util.List contexts()>();
        r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label10;

        $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();
        r12 = (java.util.logging.LogManager$LoggerContext) $r11;
        r3 = virtualinvoke r12.<java.util.logging.LogManager$LoggerContext: java.util.Enumeration getLoggerNames()>();

     label7:
        $z1 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z1 == 0 goto label9;

        $r13 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>();
        r4 = (java.lang.String) $r13;
        r5 = virtualinvoke r12.<java.util.logging.LogManager$LoggerContext: java.util.logging.Logger findLogger(java.lang.String)>(r4);
        if r5 == null goto label8;

        specialinvoke r0.<java.util.logging.LogManager: void resetLogger(java.util.logging.Logger)>(r5);

     label8:
        goto label7;

     label9:
        goto label6;

     label10:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    private void resetLogger(java.util.logging.Logger)
    {
        java.util.logging.LogManager r0;
        java.util.logging.Logger r1;
        java.util.logging.Handler[] r2;
        int i0, $i1;
        java.util.logging.Handler r3;
        java.lang.Exception r4, $r5;
        java.lang.String r6;
        boolean $z0;
        java.util.logging.Level $r7;

        r0 := @this: java.util.logging.LogManager;
        r1 := @parameter0: java.util.logging.Logger;
        r2 = virtualinvoke r1.<java.util.logging.Logger: java.util.logging.Handler[] getHandlers()>();
        i0 = 0;

     label0:
        $i1 = lengthof r2;
        if i0 >= $i1 goto label5;

        r3 = r2[i0];
        virtualinvoke r1.<java.util.logging.Logger: void removeHandler(java.util.logging.Handler)>(r3);

     label1:
        virtualinvoke r3.<java.util.logging.Handler: void close()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;
        r4 = $r5;

     label4:
        i0 = i0 + 1;
        goto label0;

     label5:
        r6 = virtualinvoke r1.<java.util.logging.Logger: java.lang.String getName()>();
        if r6 == null goto label6;

        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("");
        if $z0 == 0 goto label6;

        $r7 = <java.util.logging.LogManager: java.util.logging.Level defaultLevel>;
        virtualinvoke r1.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>($r7);
        goto label7;

     label6:
        virtualinvoke r1.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>(null);

     label7:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private java.lang.String[] parseClassNames(java.lang.String)
    {
        java.util.logging.LogManager r0;
        java.lang.String r1, r2, r4, r6, r8;
        int i0, i1, $i2, $i3, $i6, $i7;
        java.util.Vector r3, $r7;
        java.lang.String[] $r5, $r9, $r11;
        char $c4, $c5;
        boolean $z0;
        java.lang.Object[] $r10;

        r0 := @this: java.util.logging.LogManager;
        r1 := @parameter0: java.lang.String;
        r2 = virtualinvoke r0.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>(r1);
        if r2 != null goto label0;

        $r5 = newarray (java.lang.String)[0];
        return $r5;

     label0:
        r6 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();
        i0 = 0;
        $r7 = new java.util.Vector;
        specialinvoke $r7.<java.util.Vector: void <init>()>();
        r3 = $r7;

     label1:
        $i2 = virtualinvoke r6.<java.lang.String: int length()>();
        if i0 >= $i2 goto label7;

        i1 = i0;

     label2:
        $i3 = virtualinvoke r6.<java.lang.String: int length()>();
        if i1 >= $i3 goto label5;

        $c4 = virtualinvoke r6.<java.lang.String: char charAt(int)>(i1);
        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c4);
        if $z0 == 0 goto label3;

        goto label5;

     label3:
        $c5 = virtualinvoke r6.<java.lang.String: char charAt(int)>(i1);
        if $c5 != 44 goto label4;

        goto label5;

     label4:
        i1 = i1 + 1;
        goto label2;

     label5:
        r4 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);
        i0 = i1 + 1;
        r8 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();
        $i6 = virtualinvoke r8.<java.lang.String: int length()>();
        if $i6 != 0 goto label6;

        goto label1;

     label6:
        virtualinvoke r3.<java.util.Vector: boolean add(java.lang.Object)>(r8);
        goto label1;

     label7:
        $i7 = virtualinvoke r3.<java.util.Vector: int size()>();
        $r9 = newarray (java.lang.String)[$i7];
        $r10 = virtualinvoke r3.<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>($r9);
        $r11 = (java.lang.String[]) $r10;
        return $r11;
    }

    public void readConfiguration(java.io.InputStream) throws java.io.IOException, java.lang.SecurityException
    {
        java.util.logging.LogManager r0, r24;
        java.io.InputStream r1;
        java.lang.String[] r2;
        int i0, $i1;
        java.lang.String r3, $r16, $r21;
        java.lang.Class r4;
        java.lang.Throwable r5, $r25;
        java.util.Properties $r6;
        java.lang.ClassLoader $r7;
        java.lang.Exception $r9, r10;
        java.io.PrintStream $r11, $r17;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r18, $r19, $r20;
        java.beans.PropertyChangeSupport $r22;

        r0 := @this: java.util.logging.LogManager;
        r1 := @parameter0: java.io.InputStream;
        virtualinvoke r0.<java.util.logging.LogManager: void checkPermission()>();
        virtualinvoke r0.<java.util.logging.LogManager: void reset()>();
        $r6 = r0.<java.util.logging.LogManager: java.util.Properties props>;
        virtualinvoke $r6.<java.util.Properties: void load(java.io.InputStream)>(r1);
        r2 = specialinvoke r0.<java.util.logging.LogManager: java.lang.String[] parseClassNames(java.lang.String)>("config");
        i0 = 0;

     label0:
        $i1 = lengthof r2;
        if i0 >= $i1 goto label5;

        r3 = r2[i0];

     label1:
        $r7 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        r4 = virtualinvoke $r7.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r3);
        virtualinvoke r4.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;
        r10 = $r9;
        $r11 = <java.lang.System: java.io.PrintStream err>;
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t load config class \"");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r16);
        $r17 = <java.lang.System: java.io.PrintStream err>;
        $r18 = new java.lang.StringBuilder;
        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r21);

     label4:
        i0 = i0 + 1;
        goto label0;

     label5:
        specialinvoke r0.<java.util.logging.LogManager: void setLevelsOnExistingLoggers()>();
        $r22 = r0.<java.util.logging.LogManager: java.beans.PropertyChangeSupport changes>;
        virtualinvoke $r22.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>(null, null, null);
        r24 = r0;
        entermonitor r0;

     label6:
        r0.<java.util.logging.LogManager: boolean initializedGlobalHandlers> = 0;
        exitmonitor r24;

     label7:
        goto label11;

     label8:
        $r25 := @caughtexception;

     label9:
        r5 = $r25;
        exitmonitor r24;

     label10:
        throw r5;

     label11:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    public java.lang.String getProperty(java.lang.String)
    {
        java.util.logging.LogManager r0;
        java.lang.String r1, $r3;
        java.util.Properties $r2;

        r0 := @this: java.util.logging.LogManager;
        r1 := @parameter0: java.lang.String;
        $r2 = r0.<java.util.logging.LogManager: java.util.Properties props>;
        $r3 = virtualinvoke $r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1);
        return $r3;
    }

    java.lang.String getStringProperty(java.lang.String, java.lang.String)
    {
        java.util.logging.LogManager r0;
        java.lang.String r1, r2, r3, $r4;

        r0 := @this: java.util.logging.LogManager;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 = virtualinvoke r0.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>(r1);
        if r3 != null goto label0;

        return r2;

     label0:
        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();
        return $r4;
    }

    int getIntProperty(java.lang.String, int)
    {
        java.util.logging.LogManager r0;
        java.lang.String r1, r2, $r4;
        int i0, $i1;
        java.lang.Exception r3, $r5;

        r0 := @this: java.util.logging.LogManager;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r2 = virtualinvoke r0.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>(r1);
        if r2 != null goto label0;

        return i0;

     label0:
        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

     label1:
        return $i1;

     label2:
        $r5 := @caughtexception;
        r3 = $r5;
        return i0;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    boolean getBooleanProperty(java.lang.String, boolean)
    {
        java.util.logging.LogManager r0;
        java.lang.String r1, r2, r3;
        boolean z0, $z1, $z2, $z3, $z4;

        r0 := @this: java.util.logging.LogManager;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        r2 = virtualinvoke r0.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>(r1);
        if r2 != null goto label0;

        return z0;

     label0:
        r3 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase()>();
        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("true");
        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("1");
        if $z2 == 0 goto label2;

     label1:
        return 1;

     label2:
        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("false");
        if $z3 != 0 goto label3;

        $z4 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("0");
        if $z4 == 0 goto label4;

     label3:
        return 0;

     label4:
        return z0;
    }

    java.util.logging.Level getLevelProperty(java.lang.String, java.util.logging.Level)
    {
        java.util.logging.LogManager r0;
        java.lang.String r1, r3, $r5;
        java.util.logging.Level r2, r4, $r6;

        r0 := @this: java.util.logging.LogManager;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.util.logging.Level;
        r3 = virtualinvoke r0.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>(r1);
        if r3 != null goto label0;

        return r2;

     label0:
        $r5 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();
        r4 = staticinvoke <java.util.logging.Level: java.util.logging.Level findLevel(java.lang.String)>($r5);
        if r4 == null goto label1;

        $r6 = r4;
        goto label2;

     label1:
        $r6 = r2;

     label2:
        return $r6;
    }

    java.util.logging.Filter getFilterProperty(java.lang.String, java.util.logging.Filter)
    {
        java.util.logging.LogManager r0;
        java.lang.String r1, r3;
        java.util.logging.Filter r2, $r7;
        java.lang.Class r4;
        java.lang.ClassLoader $r5;
        java.lang.Object $r6;
        java.lang.Exception $r8, r9;

        r0 := @this: java.util.logging.LogManager;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.util.logging.Filter;
        r3 = virtualinvoke r0.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>(r1);

     label0:
        if r3 == null goto label2;

        $r5 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        r4 = virtualinvoke $r5.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r3);
        $r6 = virtualinvoke r4.<java.lang.Class: java.lang.Object newInstance()>();
        $r7 = (java.util.logging.Filter) $r6;

     label1:
        return $r7;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;
        r9 = $r8;

     label4:
        return r2;

        catch java.lang.Exception from label0 to label1 with label3;
    }

    java.util.logging.Formatter getFormatterProperty(java.lang.String, java.util.logging.Formatter)
    {
        java.util.logging.LogManager r0;
        java.lang.String r1, r3;
        java.util.logging.Formatter r2, $r7;
        java.lang.Class r4;
        java.lang.ClassLoader $r5;
        java.lang.Object $r6;
        java.lang.Exception $r8, r9;

        r0 := @this: java.util.logging.LogManager;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.util.logging.Formatter;
        r3 = virtualinvoke r0.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>(r1);

     label0:
        if r3 == null goto label2;

        $r5 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        r4 = virtualinvoke $r5.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r3);
        $r6 = virtualinvoke r4.<java.lang.Class: java.lang.Object newInstance()>();
        $r7 = (java.util.logging.Formatter) $r6;

     label1:
        return $r7;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;
        r9 = $r8;

     label4:
        return r2;

        catch java.lang.Exception from label0 to label1 with label3;
    }

    private synchronized void initializeGlobalHandlers()
    {
        java.util.logging.LogManager r0;
        boolean $z0, $z1;
        java.util.logging.Logger $r1;

        r0 := @this: java.util.logging.LogManager;
        $z0 = r0.<java.util.logging.LogManager: boolean initializedGlobalHandlers>;
        if $z0 == 0 goto label0;

        return;

     label0:
        r0.<java.util.logging.LogManager: boolean initializedGlobalHandlers> = 1;
        $z1 = r0.<java.util.logging.LogManager: boolean deathImminent>;
        if $z1 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<java.util.logging.LogManager: java.util.logging.Logger rootLogger>;
        specialinvoke r0.<java.util.logging.LogManager: void loadLoggerHandlers(java.util.logging.Logger,java.lang.String,java.lang.String)>($r1, null, "handlers");
        return;
    }

    void checkPermission()
    {
        java.util.logging.LogManager r0;
        java.lang.SecurityManager r1;
        java.security.Permission $r2;

        r0 := @this: java.util.logging.LogManager;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = r0.<java.util.logging.LogManager: java.security.Permission controlPermission>;
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label0:
        return;
    }

    public void checkAccess() throws java.lang.SecurityException
    {
        java.util.logging.LogManager r0;

        r0 := @this: java.util.logging.LogManager;
        virtualinvoke r0.<java.util.logging.LogManager: void checkPermission()>();
        return;
    }

    private synchronized void setLevelsOnExistingLoggers()
    {
        java.util.logging.LogManager r0;
        java.util.Enumeration r1;
        java.lang.String r2, r3, $r14;
        int i0, $i1;
        java.util.logging.Level r4;
        java.util.Iterator r5;
        java.util.logging.LogManager$LoggerContext r6;
        java.util.logging.Logger r7;
        java.util.Properties $r8;
        boolean $z0, $z1, $z2;
        java.lang.Object $r9, $r16;
        java.io.PrintStream $r10;
        java.lang.StringBuilder $r11, $r12, $r13;
        java.util.List $r15;

        r0 := @this: java.util.logging.LogManager;
        $r8 = r0.<java.util.logging.LogManager: java.util.Properties props>;
        r1 = virtualinvoke $r8.<java.util.Properties: java.util.Enumeration propertyNames()>();

     label0:
        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label6;

        $r9 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();
        r2 = (java.lang.String) $r9;
        $z1 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>(".level");
        if $z1 != 0 goto label1;

        goto label0;

     label1:
        $i1 = virtualinvoke r2.<java.lang.String: int length()>();
        i0 = $i1 - 6;
        r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        r4 = virtualinvoke r0.<java.util.logging.LogManager: java.util.logging.Level getLevelProperty(java.lang.String,java.util.logging.Level)>(r2, null);
        if r4 != null goto label2;

        $r10 = <java.lang.System: java.io.PrintStream err>;
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad level value for property: ");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r14);
        goto label0;

     label2:
        $r15 = specialinvoke r0.<java.util.logging.LogManager: java.util.List contexts()>();
        r5 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label5;

        $r16 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        r6 = (java.util.logging.LogManager$LoggerContext) $r16;
        r7 = virtualinvoke r6.<java.util.logging.LogManager$LoggerContext: java.util.logging.Logger findLogger(java.lang.String)>(r3);
        if r7 != null goto label4;

        goto label3;

     label4:
        virtualinvoke r7.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>(r4);
        goto label3;

     label5:
        goto label0;

     label6:
        return;
    }

    public static synchronized java.util.logging.LoggingMXBean getLoggingMXBean()
    {
        java.util.logging.LoggingMXBean $r0, $r2;
        java.util.logging.Logging $r1;

        $r0 = <java.util.logging.LogManager: java.util.logging.LoggingMXBean loggingMXBean>;
        if $r0 != null goto label0;

        $r1 = new java.util.logging.Logging;
        specialinvoke $r1.<java.util.logging.Logging: void <init>()>();
        <java.util.logging.LogManager: java.util.logging.LoggingMXBean loggingMXBean> = $r1;

     label0:
        $r2 = <java.util.logging.LogManager: java.util.logging.LoggingMXBean loggingMXBean>;
        return $r2;
    }

    static java.util.logging.LogManager access$102(java.util.logging.LogManager)
    {
        java.util.logging.LogManager r0;

        r0 := @parameter0: java.util.logging.LogManager;
        <java.util.logging.LogManager: java.util.logging.LogManager manager> = r0;
        return r0;
    }

    static java.util.logging.LogManager access$100()
    {
        java.util.logging.LogManager $r0;

        $r0 = <java.util.logging.LogManager: java.util.logging.LogManager manager>;
        return $r0;
    }

    static java.util.logging.Logger access$202(java.util.logging.LogManager, java.util.logging.Logger)
    {
        java.util.logging.LogManager r0;
        java.util.logging.Logger r1;

        r0 := @parameter0: java.util.logging.LogManager;
        r1 := @parameter1: java.util.logging.Logger;
        r0.<java.util.logging.LogManager: java.util.logging.Logger rootLogger> = r1;
        return r1;
    }

    static java.util.logging.Logger access$200(java.util.logging.LogManager)
    {
        java.util.logging.LogManager r0;
        java.util.logging.Logger $r1;

        r0 := @parameter0: java.util.logging.LogManager;
        $r1 = r0.<java.util.logging.LogManager: java.util.logging.Logger rootLogger>;
        return $r1;
    }

    static java.util.logging.LogManager$LoggerContext access$400(java.util.logging.LogManager)
    {
        java.util.logging.LogManager r0;
        java.util.logging.LogManager$LoggerContext $r1;

        r0 := @parameter0: java.util.logging.LogManager;
        $r1 = r0.<java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext systemContext>;
        return $r1;
    }

    static java.util.logging.LogManager$LoggerContext access$500(java.util.logging.LogManager)
    {
        java.util.logging.LogManager r0;
        java.util.logging.LogManager$LoggerContext $r1;

        r0 := @parameter0: java.util.logging.LogManager;
        $r1 = r0.<java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext userContext>;
        return $r1;
    }

    static boolean access$602(java.util.logging.LogManager, boolean)
    {
        java.util.logging.LogManager r0;
        boolean z0;

        r0 := @parameter0: java.util.logging.LogManager;
        z0 := @parameter1: boolean;
        r0.<java.util.logging.LogManager: boolean deathImminent> = z0;
        return z0;
    }

    static boolean access$702(java.util.logging.LogManager, boolean)
    {
        java.util.logging.LogManager r0;
        boolean z0;

        r0 := @parameter0: java.util.logging.LogManager;
        z0 := @parameter1: boolean;
        r0.<java.util.logging.LogManager: boolean initializedGlobalHandlers> = z0;
        return z0;
    }

    static void access$1000(java.util.logging.Logger, java.util.logging.Level)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;

        r0 := @parameter0: java.util.logging.Logger;
        r1 := @parameter1: java.util.logging.Level;
        staticinvoke <java.util.logging.LogManager: void doSetLevel(java.util.logging.Logger,java.util.logging.Level)>(r0, r1);
        return;
    }

    static void access$1100(java.util.logging.Logger, java.util.logging.Logger)
    {
        java.util.logging.Logger r0, r1;

        r0 := @parameter0: java.util.logging.Logger;
        r1 := @parameter1: java.util.logging.Logger;
        staticinvoke <java.util.logging.LogManager: void doSetParent(java.util.logging.Logger,java.util.logging.Logger)>(r0, r1);
        return;
    }

    static java.lang.String[] access$1200(java.util.logging.LogManager, java.lang.String)
    {
        java.util.logging.LogManager r0;
        java.lang.String r1;
        java.lang.String[] $r2;

        r0 := @parameter0: java.util.logging.LogManager;
        r1 := @parameter1: java.lang.String;
        $r2 = specialinvoke r0.<java.util.logging.LogManager: java.lang.String[] parseClassNames(java.lang.String)>(r1);
        return $r2;
    }

    static java.lang.ref.ReferenceQueue access$1300(java.util.logging.LogManager)
    {
        java.util.logging.LogManager r0;
        java.lang.ref.ReferenceQueue $r1;

        r0 := @parameter0: java.util.logging.LogManager;
        $r1 = r0.<java.util.logging.LogManager: java.lang.ref.ReferenceQueue loggerRefQueue>;
        return $r1;
    }

    static java.util.logging.Level access$1400()
    {
        java.util.logging.Level $r0;

        $r0 = <java.util.logging.LogManager: java.util.logging.Level defaultLevel>;
        return $r0;
    }

    static void access$1500(java.util.logging.LogManager)
    {
        java.util.logging.LogManager r0;

        r0 := @parameter0: java.util.logging.LogManager;
        specialinvoke r0.<java.util.logging.LogManager: void initializeGlobalHandlers()>();
        return;
    }

    static void <clinit>()
    {
        java.util.logging.Level $r0;
        java.util.logging.LogManager$1 $r1;

        $r0 = <java.util.logging.Level: java.util.logging.Level INFO>;
        <java.util.logging.LogManager: java.util.logging.Level defaultLevel> = $r0;
        $r1 = new java.util.logging.LogManager$1;
        specialinvoke $r1.<java.util.logging.LogManager$1: void <init>()>();
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        <java.util.logging.LogManager: java.util.WeakHashMap contextsMap> = null;
        <java.util.logging.LogManager: java.util.logging.LoggingMXBean loggingMXBean> = null;
        return;
    }
}
