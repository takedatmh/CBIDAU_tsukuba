abstract class java.util.TreeMap$NavigableSubMap$EntrySetView extends java.util.AbstractSet
{
    private transient int size;
    private transient int sizeModCount;
    final java.util.TreeMap$NavigableSubMap this$0;

    void <init>(java.util.TreeMap$NavigableSubMap)
    {
        java.util.TreeMap$NavigableSubMap$EntrySetView r0;
        java.util.TreeMap$NavigableSubMap r1;

        r0 := @this: java.util.TreeMap$NavigableSubMap$EntrySetView;
        r1 := @parameter0: java.util.TreeMap$NavigableSubMap;
        r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: java.util.TreeMap$NavigableSubMap this$0> = r1;
        specialinvoke r0.<java.util.AbstractSet: void <init>()>();
        r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: int size> = -1;
        return;
    }

    public int size()
    {
        java.util.TreeMap$NavigableSubMap$EntrySetView r0;
        java.util.Iterator r1;
        java.util.TreeMap$NavigableSubMap $r2, $r3, $r4, $r6, $r8;
        boolean $z0, $z1, $z2;
        java.util.TreeMap $r5, $r7, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: java.util.TreeMap$NavigableSubMap$EntrySetView;
        $r2 = r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: java.util.TreeMap$NavigableSubMap this$0>;
        $z0 = $r2.<java.util.TreeMap$NavigableSubMap: boolean fromStart>;
        if $z0 == 0 goto label0;

        $r3 = r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: java.util.TreeMap$NavigableSubMap this$0>;
        $z1 = $r3.<java.util.TreeMap$NavigableSubMap: boolean toEnd>;
        if $z1 == 0 goto label0;

        $r4 = r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: java.util.TreeMap$NavigableSubMap this$0>;
        $r5 = $r4.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $i0 = virtualinvoke $r5.<java.util.TreeMap: int size()>();
        return $i0;

     label0:
        $i1 = r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: int size>;
        if $i1 == -1 goto label1;

        $i2 = r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: int sizeModCount>;
        $r6 = r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: java.util.TreeMap$NavigableSubMap this$0>;
        $r7 = $r6.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $i3 = staticinvoke <java.util.TreeMap: int access$100(java.util.TreeMap)>($r7);
        if $i2 == $i3 goto label3;

     label1:
        $r8 = r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: java.util.TreeMap$NavigableSubMap this$0>;
        $r9 = $r8.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $i4 = staticinvoke <java.util.TreeMap: int access$100(java.util.TreeMap)>($r9);
        r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: int sizeModCount> = $i4;
        r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: int size> = 0;
        r1 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label3;

        $i5 = r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: int size>;
        $i6 = $i5 + 1;
        r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: int size> = $i6;
        interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        goto label2;

     label3:
        $i7 = r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: int size>;
        return $i7;
    }

    public boolean isEmpty()
    {
        java.util.TreeMap$NavigableSubMap$EntrySetView r0;
        java.util.TreeMap$Entry r1;
        java.util.TreeMap$NavigableSubMap $r2, $r3;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: java.util.TreeMap$NavigableSubMap$EntrySetView;
        $r2 = r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: java.util.TreeMap$NavigableSubMap this$0>;
        r1 = virtualinvoke $r2.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry absLowest()>();
        if r1 == null goto label0;

        $r3 = r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: java.util.TreeMap$NavigableSubMap this$0>;
        $r4 = r1.<java.util.TreeMap$Entry: java.lang.Object key>;
        $z0 = virtualinvoke $r3.<java.util.TreeMap$NavigableSubMap: boolean tooHigh(java.lang.Object)>($r4);
        if $z0 == 0 goto label1;

     label0:
        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap$EntrySetView r0;
        java.lang.Object r1, r3, $r8, $r9;
        java.util.Map$Entry r2;
        java.util.TreeMap$Entry r4;
        boolean $z0, $z1, $z2, $z3;
        java.util.TreeMap$NavigableSubMap $r5, $r6;
        java.util.TreeMap $r7;

        r0 := @this: java.util.TreeMap$NavigableSubMap$EntrySetView;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.util.Map$Entry;
        if $z0 != 0 goto label0;

        return 0;

     label0:
        r2 = (java.util.Map$Entry) r1;
        r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r5 = r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: java.util.TreeMap$NavigableSubMap this$0>;
        $z1 = virtualinvoke $r5.<java.util.TreeMap$NavigableSubMap: boolean inRange(java.lang.Object)>(r3);
        if $z1 != 0 goto label1;

        return 0;

     label1:
        $r6 = r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: java.util.TreeMap$NavigableSubMap this$0>;
        $r7 = $r6.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        r4 = virtualinvoke $r7.<java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>(r3);
        if r4 == null goto label2;

        $r8 = virtualinvoke r4.<java.util.TreeMap$Entry: java.lang.Object getValue()>();
        $r9 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();
        $z2 = staticinvoke <java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>($r8, $r9);
        if $z2 == 0 goto label2;

        $z3 = 1;
        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap$EntrySetView r0;
        java.lang.Object r1, r3, $r8, $r9;
        java.util.Map$Entry r2;
        java.util.TreeMap$Entry r4;
        boolean $z0, $z1, $z2;
        java.util.TreeMap$NavigableSubMap $r5, $r6, $r10;
        java.util.TreeMap $r7, $r11;

        r0 := @this: java.util.TreeMap$NavigableSubMap$EntrySetView;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.util.Map$Entry;
        if $z0 != 0 goto label0;

        return 0;

     label0:
        r2 = (java.util.Map$Entry) r1;
        r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r5 = r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: java.util.TreeMap$NavigableSubMap this$0>;
        $z1 = virtualinvoke $r5.<java.util.TreeMap$NavigableSubMap: boolean inRange(java.lang.Object)>(r3);
        if $z1 != 0 goto label1;

        return 0;

     label1:
        $r6 = r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: java.util.TreeMap$NavigableSubMap this$0>;
        $r7 = $r6.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        r4 = virtualinvoke $r7.<java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>(r3);
        if r4 == null goto label2;

        $r8 = virtualinvoke r4.<java.util.TreeMap$Entry: java.lang.Object getValue()>();
        $r9 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();
        $z2 = staticinvoke <java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>($r8, $r9);
        if $z2 == 0 goto label2;

        $r10 = r0.<java.util.TreeMap$NavigableSubMap$EntrySetView: java.util.TreeMap$NavigableSubMap this$0>;
        $r11 = $r10.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        staticinvoke <java.util.TreeMap: void access$000(java.util.TreeMap,java.util.TreeMap$Entry)>($r11, r4);
        return 1;

     label2:
        return 0;
    }
}
