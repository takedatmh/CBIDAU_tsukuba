public abstract class java.security.MessageDigestSpi extends java.lang.Object
{
    private byte[] tempArray;

    public void <init>()
    {
        java.security.MessageDigestSpi r0;

        r0 := @this: java.security.MessageDigestSpi;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    protected int engineGetDigestLength()
    {
        java.security.MessageDigestSpi r0;

        r0 := @this: java.security.MessageDigestSpi;
        return 0;
    }

    protected abstract void engineUpdate(byte);

    protected abstract void engineUpdate(byte[], int, int);

    protected void engineUpdate(java.nio.ByteBuffer)
    {
        java.security.MessageDigestSpi r0;
        java.nio.ByteBuffer r1;
        byte[] r2, $r4, $r5, $r6, $r7, $r8, $r10;
        int i0, i1, i2, $i3, $i4, i5, i6, $i7, $i8, i9;
        boolean $z0, $z1;

        r0 := @this: java.security.MessageDigestSpi;
        r1 := @parameter0: java.nio.ByteBuffer;
        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();
        if $z0 != 0 goto label0;

        return;

     label0:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();
        if $z1 == 0 goto label1;

        r2 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();
        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();
        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();
        i2 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();
        $i3 = i0 + i1;
        $i4 = i2 - i1;
        virtualinvoke r0.<java.security.MessageDigestSpi: void engineUpdate(byte[],int,int)>(r2, $i3, $i4);
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i2);
        goto label4;

     label1:
        i5 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();
        i6 = staticinvoke <sun.security.jca.JCAUtil: int getTempArraySize(int)>(i5);
        $r4 = r0.<java.security.MessageDigestSpi: byte[] tempArray>;
        if $r4 == null goto label2;

        $r5 = r0.<java.security.MessageDigestSpi: byte[] tempArray>;
        $i7 = lengthof $r5;
        if i6 <= $i7 goto label3;

     label2:
        $r6 = newarray (byte)[i6];
        r0.<java.security.MessageDigestSpi: byte[] tempArray> = $r6;

     label3:
        if i5 <= 0 goto label4;

        $r7 = r0.<java.security.MessageDigestSpi: byte[] tempArray>;
        $i8 = lengthof $r7;
        i9 = staticinvoke <java.lang.Math: int min(int,int)>(i5, $i8);
        $r8 = r0.<java.security.MessageDigestSpi: byte[] tempArray>;
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r8, 0, i9);
        $r10 = r0.<java.security.MessageDigestSpi: byte[] tempArray>;
        virtualinvoke r0.<java.security.MessageDigestSpi: void engineUpdate(byte[],int,int)>($r10, 0, i9);
        i5 = i5 - i9;
        goto label3;

     label4:
        return;
    }

    protected abstract byte[] engineDigest();

    protected int engineDigest(byte[], int, int) throws java.security.DigestException
    {
        java.security.MessageDigestSpi r0;
        byte[] r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.security.DigestException $r3, $r4;

        r0 := @this: java.security.MessageDigestSpi;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 = virtualinvoke r0.<java.security.MessageDigestSpi: byte[] engineDigest()>();
        $i2 = lengthof r2;
        if i1 >= $i2 goto label0;

        $r3 = new java.security.DigestException;
        specialinvoke $r3.<java.security.DigestException: void <init>(java.lang.String)>("partial digests not returned");
        throw $r3;

     label0:
        $i3 = lengthof r1;
        $i4 = $i3 - i0;
        $i5 = lengthof r2;
        if $i4 >= $i5 goto label1;

        $r4 = new java.security.DigestException;
        specialinvoke $r4.<java.security.DigestException: void <init>(java.lang.String)>("insufficient space in the output buffer to store the digest");
        throw $r4;

     label1:
        $i6 = lengthof r2;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, i0, $i6);
        $i7 = lengthof r2;
        return $i7;
    }

    protected abstract void engineReset();

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.security.MessageDigestSpi r0;
        boolean $z0;
        java.lang.Object $r1;
        java.lang.CloneNotSupportedException $r2;

        r0 := @this: java.security.MessageDigestSpi;
        $z0 = r0 instanceof java.lang.Cloneable;
        if $z0 == 0 goto label0;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        return $r1;

     label0:
        $r2 = new java.lang.CloneNotSupportedException;
        specialinvoke $r2.<java.lang.CloneNotSupportedException: void <init>()>();
        throw $r2;
    }
}
