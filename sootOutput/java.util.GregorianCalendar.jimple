public class java.util.GregorianCalendar extends java.util.Calendar
{
    public static final int BC;
    static final int BCE;
    public static final int AD;
    static final int CE;
    private static final int EPOCH_OFFSET;
    private static final int EPOCH_YEAR;
    static final int[] MONTH_LENGTH;
    static final int[] LEAP_MONTH_LENGTH;
    private static final int ONE_SECOND;
    private static final int ONE_MINUTE;
    private static final int ONE_HOUR;
    private static final long ONE_DAY;
    private static final long ONE_WEEK;
    static final int[] MIN_VALUES;
    static final int[] LEAST_MAX_VALUES;
    static final int[] MAX_VALUES;
    static final long serialVersionUID;
    private static final sun.util.calendar.Gregorian gcal;
    private static sun.util.calendar.JulianCalendar jcal;
    private static sun.util.calendar.Era[] jeras;
    static final long DEFAULT_GREGORIAN_CUTOVER;
    private long gregorianCutover;
    private transient long gregorianCutoverDate;
    private transient int gregorianCutoverYear;
    private transient int gregorianCutoverYearJulian;
    private transient sun.util.calendar.BaseCalendar$Date gdate;
    private transient sun.util.calendar.BaseCalendar$Date cdate;
    private transient sun.util.calendar.BaseCalendar calsys;
    private transient int[] zoneOffsets;
    private transient int[] originalFields;
    private transient long cachedFixedDate;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        java.util.GregorianCalendar r0;
        java.util.TimeZone $r1;
        java.util.Locale$Category $r2;
        java.util.Locale $r3;

        r0 := @this: java.util.GregorianCalendar;
        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefaultRef()>();
        $r2 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r2);
        specialinvoke r0.<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>($r1, $r3);
        virtualinvoke r0.<java.util.GregorianCalendar: void setZoneShared(boolean)>(1);
        return;
    }

    public void <init>(java.util.TimeZone)
    {
        java.util.GregorianCalendar r0;
        java.util.TimeZone r1;
        java.util.Locale$Category $r2;
        java.util.Locale $r3;

        r0 := @this: java.util.GregorianCalendar;
        r1 := @parameter0: java.util.TimeZone;
        $r2 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r2);
        specialinvoke r0.<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>(r1, $r3);
        return;
    }

    public void <init>(java.util.Locale)
    {
        java.util.GregorianCalendar r0;
        java.util.Locale r1;
        java.util.TimeZone $r2;

        r0 := @this: java.util.GregorianCalendar;
        r1 := @parameter0: java.util.Locale;
        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefaultRef()>();
        specialinvoke r0.<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>($r2, r1);
        virtualinvoke r0.<java.util.GregorianCalendar: void setZoneShared(boolean)>(1);
        return;
    }

    public void <init>(java.util.TimeZone, java.util.Locale)
    {
        java.util.GregorianCalendar r0;
        java.util.TimeZone r1;
        java.util.Locale r2;
        sun.util.calendar.Gregorian $r3;
        sun.util.calendar.Gregorian$Date $r4;
        long $l0;

        r0 := @this: java.util.GregorianCalendar;
        r1 := @parameter0: java.util.TimeZone;
        r2 := @parameter1: java.util.Locale;
        specialinvoke r0.<java.util.Calendar: void <init>(java.util.TimeZone,java.util.Locale)>(r1, r2);
        r0.<java.util.GregorianCalendar: long gregorianCutover> = -12219292800000L;
        r0.<java.util.GregorianCalendar: long gregorianCutoverDate> = 577736L;
        r0.<java.util.GregorianCalendar: int gregorianCutoverYear> = 1582;
        r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian> = 1582;
        r0.<java.util.GregorianCalendar: long cachedFixedDate> = -9223372036854775808L;
        $r3 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        $r4 = virtualinvoke $r3.<sun.util.calendar.Gregorian: sun.util.calendar.Gregorian$Date newCalendarDate(java.util.TimeZone)>(r1);
        r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate> = $r4;
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        virtualinvoke r0.<java.util.GregorianCalendar: void setTimeInMillis(long)>($l0);
        return;
    }

    public void <init>(int, int, int)
    {
        java.util.GregorianCalendar r0;
        int i0, i1, i2;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        specialinvoke r0.<java.util.GregorianCalendar: void <init>(int,int,int,int,int,int,int)>(i0, i1, i2, 0, 0, 0, 0);
        return;
    }

    public void <init>(int, int, int, int, int)
    {
        java.util.GregorianCalendar r0;
        int i0, i1, i2, i3, i4;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        i4 := @parameter4: int;
        specialinvoke r0.<java.util.GregorianCalendar: void <init>(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, 0, 0);
        return;
    }

    public void <init>(int, int, int, int, int, int)
    {
        java.util.GregorianCalendar r0;
        int i0, i1, i2, i3, i4, i5;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        i4 := @parameter4: int;
        i5 := @parameter5: int;
        specialinvoke r0.<java.util.GregorianCalendar: void <init>(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, 0);
        return;
    }

    void <init>(int, int, int, int, int, int, int)
    {
        java.util.GregorianCalendar r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7;
        sun.util.calendar.Gregorian $r1;
        java.util.TimeZone $r2;
        sun.util.calendar.Gregorian$Date $r3;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        i4 := @parameter4: int;
        i5 := @parameter5: int;
        i6 := @parameter6: int;
        specialinvoke r0.<java.util.Calendar: void <init>()>();
        r0.<java.util.GregorianCalendar: long gregorianCutover> = -12219292800000L;
        r0.<java.util.GregorianCalendar: long gregorianCutoverDate> = 577736L;
        r0.<java.util.GregorianCalendar: int gregorianCutoverYear> = 1582;
        r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian> = 1582;
        r0.<java.util.GregorianCalendar: long cachedFixedDate> = -9223372036854775808L;
        $r1 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        $r2 = virtualinvoke r0.<java.util.GregorianCalendar: java.util.TimeZone getZone()>();
        $r3 = virtualinvoke $r1.<sun.util.calendar.Gregorian: sun.util.calendar.Gregorian$Date newCalendarDate(java.util.TimeZone)>($r2);
        r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate> = $r3;
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(1, i0);
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(2, i1);
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(5, i2);
        if i3 < 12 goto label0;

        if i3 > 23 goto label0;

        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(9, 1);
        $i7 = i3 - 12;
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(10, $i7);
        goto label1;

     label0:
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(10, i3);

     label1:
        virtualinvoke r0.<java.util.GregorianCalendar: void setFieldsComputed(int)>(1536);
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(11, i3);
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(12, i4);
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(13, i5);
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(14, i6);
        return;
    }

    public void setGregorianChange(java.util.Date)
    {
        java.util.GregorianCalendar r0;
        java.util.Date r1;
        long l0, $l1;
        byte $b2;

        r0 := @this: java.util.GregorianCalendar;
        r1 := @parameter0: java.util.Date;
        l0 = virtualinvoke r1.<java.util.Date: long getTime()>();
        $l1 = r0.<java.util.GregorianCalendar: long gregorianCutover>;
        $b2 = l0 cmp $l1;
        if $b2 != 0 goto label0;

        return;

     label0:
        virtualinvoke r0.<java.util.GregorianCalendar: void complete()>();
        specialinvoke r0.<java.util.GregorianCalendar: void setGregorianChange(long)>(l0);
        return;
    }

    private void setGregorianChange(long)
    {
        java.util.GregorianCalendar r0;
        long l0, $l1, $l2, $l4, $l5, $l7, $l8, $l10, $l11;
        sun.util.calendar.BaseCalendar$Date r1, r6;
        sun.util.calendar.BaseCalendar r2;
        byte $b3, $b12;
        int $i6, $i9;
        java.util.TimeZone $r4;
        sun.util.calendar.CalendarDate $r5;

        r0 := @this: java.util.GregorianCalendar;
        l0 := @parameter0: long;
        r0.<java.util.GregorianCalendar: long gregorianCutover> = l0;
        $l1 = staticinvoke <sun.util.calendar.CalendarUtils: long floorDivide(long,long)>(l0, 86400000L);
        $l2 = $l1 + 719163L;
        r0.<java.util.GregorianCalendar: long gregorianCutoverDate> = $l2;
        $b3 = l0 cmp 9223372036854775807L;
        if $b3 != 0 goto label0;

        $l4 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $l5 = $l4 + 1L;
        r0.<java.util.GregorianCalendar: long gregorianCutoverDate> = $l5;

     label0:
        r1 = specialinvoke r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date getGregorianCutoverDate()>();
        $i6 = virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: int getYear()>();
        r0.<java.util.GregorianCalendar: int gregorianCutoverYear> = $i6;
        r2 = staticinvoke <java.util.GregorianCalendar: sun.util.calendar.BaseCalendar getJulianCalendarSystem()>();
        $r4 = <java.util.TimeZone: java.util.TimeZone NO_TIMEZONE>;
        $r5 = virtualinvoke r2.<sun.util.calendar.BaseCalendar: sun.util.calendar.CalendarDate newCalendarDate(java.util.TimeZone)>($r4);
        r6 = (sun.util.calendar.BaseCalendar$Date) $r5;
        $l7 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $l8 = $l7 - 1L;
        virtualinvoke r2.<sun.util.calendar.BaseCalendar: void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate,long)>(r6, $l8);
        $i9 = virtualinvoke r6.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian> = $i9;
        $l10 = r0.<java.util.GregorianCalendar: long time>;
        $l11 = r0.<java.util.GregorianCalendar: long gregorianCutover>;
        $b12 = $l10 cmp $l11;
        if $b12 >= 0 goto label1;

        virtualinvoke r0.<java.util.GregorianCalendar: void setUnnormalized()>();

     label1:
        return;
    }

    public final java.util.Date getGregorianChange()
    {
        java.util.GregorianCalendar r0;
        java.util.Date $r1;
        long $l0;

        r0 := @this: java.util.GregorianCalendar;
        $r1 = new java.util.Date;
        $l0 = r0.<java.util.GregorianCalendar: long gregorianCutover>;
        specialinvoke $r1.<java.util.Date: void <init>(long)>($l0);
        return $r1;
    }

    public boolean isLeapYear(int)
    {
        java.util.GregorianCalendar r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12;
        sun.util.calendar.BaseCalendar$Date r1;
        boolean z0, $z1, $z2, $z3, $z4;
        long $l8;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        $i1 = i0 & 3;
        if $i1 == 0 goto label0;

        return 0;

     label0:
        $i2 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if i0 <= $i2 goto label4;

        $i3 = i0 % 100;
        if $i3 != 0 goto label1;

        $i4 = i0 % 400;
        if $i4 != 0 goto label2;

     label1:
        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $i5 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if i0 >= $i5 goto label5;

        return 1;

     label5:
        $i6 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        $i7 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if $i6 != $i7 goto label8;

        $l8 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        r1 = specialinvoke r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date getCalendarDate(long)>($l8);
        $i9 = virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        if $i9 >= 3 goto label6;

        $z2 = 1;
        goto label7;

     label6:
        $z2 = 0;

     label7:
        z0 = $z2;
        goto label11;

     label8:
        $i10 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if i0 != $i10 goto label9;

        $z3 = 1;
        goto label10;

     label9:
        $z3 = 0;

     label10:
        z0 = $z3;

     label11:
        if z0 == 0 goto label14;

        $i11 = i0 % 100;
        if $i11 != 0 goto label12;

        $i12 = i0 % 400;
        if $i12 != 0 goto label13;

     label12:
        $z4 = 1;
        goto label15;

     label13:
        $z4 = 0;
        goto label15;

     label14:
        $z4 = 1;

     label15:
        return $z4;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.GregorianCalendar r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        long $l0, $l1;
        byte $b2;

        r0 := @this: java.util.GregorianCalendar;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.util.GregorianCalendar;
        if $z0 == 0 goto label0;

        $z1 = specialinvoke r0.<java.util.Calendar: boolean equals(java.lang.Object)>(r1);
        if $z1 == 0 goto label0;

        $l0 = r0.<java.util.GregorianCalendar: long gregorianCutover>;
        $r2 = (java.util.GregorianCalendar) r1;
        $l1 = $r2.<java.util.GregorianCalendar: long gregorianCutover>;
        $b2 = $l0 cmp $l1;
        if $b2 != 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;
    }

    public int hashCode()
    {
        java.util.GregorianCalendar r0;
        int $i0, $i2, $i3;
        long $l1;

        r0 := @this: java.util.GregorianCalendar;
        $i0 = specialinvoke r0.<java.util.Calendar: int hashCode()>();
        $l1 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $i2 = (int) $l1;
        $i3 = $i0 ^ $i2;
        return $i3;
    }

    public void add(int, int)
    {
        java.util.GregorianCalendar r0;
        int i0, i1, i2, i3, i4, i6, $i8, i9, $i10, i11, $i12, $i13, i14, $i15, $i16, $i17, i18, $i19, i20, $i21, $i22, i23, $i24, $i25, i26, $i29, $i30, $i31, $i34, $i38, $i42, $i46, $i52, $i53, $i59, $i60, $i61, i62;
        long l5, l7, l27, l28, $l32, $l33, $l35, l36, l37, $l39, l40, l41, $l43, l44, l45, $l47, l48, l51, $l54, $l55, $l56, $l57, $l58, $l63, $l64, $l65, $l67, $l68, $l69;
        java.lang.IllegalArgumentException $r1;
        byte $b49, $b50, $b66;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i1 != 0 goto label0;

        return;

     label0:
        if i0 < 0 goto label1;

        if i0 < 15 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r1;

     label2:
        virtualinvoke r0.<java.util.GregorianCalendar: void complete()>();
        if i0 != 1 goto label7;

        i2 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(1);
        $i8 = specialinvoke r0.<java.util.GregorianCalendar: int internalGetEra()>();
        if $i8 != 1 goto label4;

        i9 = i2 + i1;
        if i9 <= 0 goto label3;

        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(1, i9);
        goto label6;

     label3:
        $i10 = 1 - i9;
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(1, $i10);
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(0, 0);
        goto label6;

     label4:
        i11 = i2 - i1;
        if i11 <= 0 goto label5;

        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(1, i11);
        goto label6;

     label5:
        $i12 = 1 - i11;
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(1, $i12);
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(0, 1);

     label6:
        specialinvoke r0.<java.util.GregorianCalendar: void pinDayOfMonth()>();
        goto label32;

     label7:
        if i0 != 2 goto label17;

        $i13 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(2);
        i14 = $i13 + i1;
        i3 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(1);
        if i14 < 0 goto label8;

        i4 = i14 / 12;
        goto label9;

     label8:
        $i15 = i14 + 1;
        $i16 = $i15 / 12;
        i4 = $i16 - 1;

     label9:
        if i4 == 0 goto label13;

        $i17 = specialinvoke r0.<java.util.GregorianCalendar: int internalGetEra()>();
        if $i17 != 1 goto label11;

        i18 = i3 + i4;
        if i18 <= 0 goto label10;

        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(1, i18);
        goto label13;

     label10:
        $i19 = 1 - i18;
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(1, $i19);
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(0, 0);
        goto label13;

     label11:
        i20 = i3 - i4;
        if i20 <= 0 goto label12;

        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(1, i20);
        goto label13;

     label12:
        $i21 = 1 - i20;
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(1, $i21);
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(0, 1);

     label13:
        if i14 < 0 goto label14;

        $i22 = i14 % 12;
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(2, $i22);
        goto label16;

     label14:
        i23 = i14 % 12;
        if i23 >= 0 goto label15;

        i23 = i23 + 12;

     label15:
        $i24 = 0 + i23;
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(2, $i24);

     label16:
        specialinvoke r0.<java.util.GregorianCalendar: void pinDayOfMonth()>();
        goto label32;

     label17:
        if i0 != 0 goto label20;

        $i25 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(0);
        i26 = $i25 + i1;
        if i26 >= 0 goto label18;

        i26 = 0;

     label18:
        if i26 <= 1 goto label19;

        i26 = 1;

     label19:
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(0, i26);
        goto label32;

     label20:
        l27 = (long) i1;
        l28 = 0L;
        tableswitch(i0)
        {
            case 3: goto label25;
            case 4: goto label25;
            case 5: goto label26;
            case 6: goto label26;
            case 7: goto label26;
            case 8: goto label25;
            case 9: goto label27;
            case 10: goto label21;
            case 11: goto label21;
            case 12: goto label22;
            case 13: goto label23;
            case 14: goto label24;
            default: goto label28;
        };

     label21:
        l27 = l27 * 3600000L;
        goto label28;

     label22:
        l27 = l27 * 60000L;
        goto label28;

     label23:
        l27 = l27 * 1000L;
        goto label28;

     label24:
        goto label28;

     label25:
        l27 = l27 * 7L;
        goto label28;

     label26:
        goto label28;

     label27:
        $i29 = i1 / 2;
        l27 = (long) $i29;
        $i30 = i1 % 2;
        $i31 = 12 * $i30;
        l28 = (long) $i31;

     label28:
        if i0 < 10 goto label29;

        $l32 = r0.<java.util.GregorianCalendar: long time>;
        $l33 = $l32 + l27;
        virtualinvoke r0.<java.util.GregorianCalendar: void setTimeInMillis(long)>($l33);
        return;

     label29:
        l5 = specialinvoke r0.<java.util.GregorianCalendar: long getCurrentFixedDate()>();
        $i34 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(11);
        $l35 = (long) $i34;
        l36 = l28 + $l35;
        l37 = l36 * 60L;
        $i38 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(12);
        $l39 = (long) $i38;
        l40 = l37 + $l39;
        l41 = l40 * 60L;
        $i42 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(13);
        $l43 = (long) $i42;
        l44 = l41 + $l43;
        l45 = l44 * 1000L;
        $i46 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(14);
        $l47 = (long) $i46;
        l48 = l45 + $l47;
        $b49 = l48 cmp 86400000L;
        if $b49 < 0 goto label30;

        l5 = l5 + 1L;
        l48 = l48 - 86400000L;
        goto label31;

     label30:
        $b50 = l48 cmp 0L;
        if $b50 >= 0 goto label31;

        l5 = l5 - 1L;
        l48 = l48 + 86400000L;

     label31:
        l51 = l5 + l27;
        $i52 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(15);
        $i53 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(16);
        i6 = $i52 + $i53;
        $l54 = l51 - 719163L;
        $l55 = $l54 * 86400000L;
        $l56 = $l55 + l48;
        $l57 = (long) i6;
        $l58 = $l56 - $l57;
        virtualinvoke r0.<java.util.GregorianCalendar: void setTimeInMillis(long)>($l58);
        $i59 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(15);
        $i60 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(16);
        $i61 = $i59 + $i60;
        i62 = i6 - $i61;
        if i62 == 0 goto label32;

        $l63 = r0.<java.util.GregorianCalendar: long time>;
        $l64 = (long) i62;
        $l65 = $l63 + $l64;
        virtualinvoke r0.<java.util.GregorianCalendar: void setTimeInMillis(long)>($l65);
        l7 = specialinvoke r0.<java.util.GregorianCalendar: long getCurrentFixedDate()>();
        $b66 = l7 cmp l51;
        if $b66 == 0 goto label32;

        $l67 = r0.<java.util.GregorianCalendar: long time>;
        $l68 = (long) i62;
        $l69 = $l67 - $l68;
        virtualinvoke r0.<java.util.GregorianCalendar: void setTimeInMillis(long)>($l69);

     label32:
        return;
    }

    public void roll(int, boolean)
    {
        java.util.GregorianCalendar r0;
        int i0;
        boolean z0;
        byte $b2;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        z0 := @parameter1: boolean;
        if z0 == 0 goto label0;

        $b2 = 1;
        goto label1;

     label0:
        $b2 = -1;

     label1:
        virtualinvoke r0.<java.util.GregorianCalendar: void roll(int,int)>(i0, $b2);
        return;
    }

    public void roll(int, int)
    {
        java.util.GregorianCalendar r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i11, i13, $i14, $i16, $i17, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i30, $i31, $i32, $i33, $i34, $i35, i36, i37, $i38, $i39, i40, $i41, $i42, i43, i44, $i45, i46, $i47, i48, i49, $i51, $i52, $i55, $i56, $i57, $i58, $i61, $i63, $i64, $i65, $i66, $i67, $i70, $i71, $i72, $i77, $i78, i79, $i80, $i83, $i84, $i85, $i86, $i87, $i88, i89, i92, $i93, $i97, $i99, $i100, i101, $i102, $i103, $i104, $i115, $i116, $i120, $i121, $i122, i123, $i126, $i127, $i128, $i129, $i130, $i132, $i137, $i138, i139, $i143, $i144, $i145, $i146, i147, i148, $i150, $i158, $i160, $i161, $i162, $i163, $i164, i165, i166, i167, $i168, i169, $i170, i173, i174, i175, $i177, i178, $i179, $i180, i181, $i182, $i189, $i190, $i191;
        sun.util.calendar.CalendarDate r1, $r43;
        sun.util.calendar.BaseCalendar$Date r2, r3, $r12, $r13, $r19, $r20, $r22, $r24, $r26, $r27, r28, $r30, r31, $r32, r34, $r36, $r38, $r39, r44;
        long l10, l12, $l15, $l18, $l19, $l20, $l28, l50, $l53, l54, $l59, l60, l62, $l68, l69, $l73, l74, $l75, $l81, $l82, l90, l91, $l94, $l95, $l96, $l98, $l105, $l106, $l107, $l109, $l110, $l112, $l113, $l114, l117, l118, $l119, $l124, $l125, l131, $l133, $l134, l135, $l136, $l140, $l141, $l142, l149, l151, $l152, l153, $l155, l171, l172, $l176, $l183, $l184, $l185, l186, $l187;
        java.lang.IllegalArgumentException $r4;
        sun.util.calendar.BaseCalendar $r6, $r11, $r14, $r15, r16, $r17, r18, $r21, $r25, $r37, $r40, r41;
        java.util.TimeZone $r7, $r42;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.AssertionError $r9, $r29;
        byte $b76, $b108, $b111, $b154, $b156, $b157, $b159, $b188;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i1 != 0 goto label0;

        return;

     label0:
        if i0 < 0 goto label1;

        if i0 < 15 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r4;

     label2:
        virtualinvoke r0.<java.util.GregorianCalendar: void complete()>();
        i2 = virtualinvoke r0.<java.util.GregorianCalendar: int getMinimum(int)>(i0);
        i3 = virtualinvoke r0.<java.util.GregorianCalendar: int getMaximum(int)>(i0);
        tableswitch(i0)
        {
            case 0: goto label3;
            case 1: goto label3;
            case 2: goto label11;
            case 3: goto label17;
            case 4: goto label28;
            case 5: goto label37;
            case 6: goto label40;
            case 7: goto label42;
            case 8: goto label49;
            case 9: goto label3;
            case 10: goto label4;
            case 11: goto label4;
            case 12: goto label3;
            case 13: goto label3;
            case 14: goto label3;
            default: goto label55;
        };

     label3:
        goto label55;

     label4:
        i4 = i3 + 1;
        i5 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(i0);
        $i14 = i5 + i1;
        i6 = $i14 % i4;
        if i6 >= 0 goto label5;

        i6 = i6 + i4;

     label5:
        $l15 = r0.<java.util.GregorianCalendar: long time>;
        $i16 = i6 - i5;
        $i17 = 3600000 * $i16;
        $l18 = (long) $i17;
        $l19 = $l15 + $l18;
        r0.<java.util.GregorianCalendar: long time> = $l19;
        $r6 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        $l20 = r0.<java.util.GregorianCalendar: long time>;
        $r7 = virtualinvoke r0.<java.util.GregorianCalendar: java.util.TimeZone getZone()>();
        r1 = virtualinvoke $r6.<sun.util.calendar.BaseCalendar: sun.util.calendar.CalendarDate getCalendarDate(long,java.util.TimeZone)>($l20, $r7);
        $i21 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(5);
        $i22 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getDayOfMonth()>();
        if $i21 == $i22 goto label8;

        $i23 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(1);
        $i24 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(2);
        $i25 = $i24 + 1;
        $i26 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(5);
        virtualinvoke r1.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setDate(int,int,int)>($i23, $i25, $i26);
        if i0 != 10 goto label7;

        $z0 = <java.util.GregorianCalendar: boolean $assertionsDisabled>;
        if $z0 != 0 goto label6;

        $i27 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(9);
        if $i27 == 1 goto label6;

        $r9 = new java.lang.AssertionError;
        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();
        throw $r9;

     label6:
        virtualinvoke r1.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate addHours(int)>(12);

     label7:
        $r11 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        $l28 = virtualinvoke $r11.<sun.util.calendar.BaseCalendar: long getTime(sun.util.calendar.CalendarDate)>(r1);
        r0.<java.util.GregorianCalendar: long time> = $l28;

     label8:
        i7 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getHours()>();
        $i29 = i7 % i4;
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(i0, $i29);
        if i0 != 10 goto label9;

        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(11, i7);
        goto label10;

     label9:
        $i30 = i7 / 12;
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(9, $i30);
        $i31 = i7 % 12;
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(10, $i31);

     label10:
        i8 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getZoneOffset()>();
        i9 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getDaylightSaving()>();
        $i32 = i8 - i9;
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(15, $i32);
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(16, i9);
        return;

     label11:
        $r12 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $i33 = virtualinvoke $r12.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $z1 = specialinvoke r0.<java.util.GregorianCalendar: boolean isCutoverYear(int)>($i33);
        if $z1 != 0 goto label14;

        $i34 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(2);
        $i35 = $i34 + i1;
        i36 = $i35 % 12;
        if i36 >= 0 goto label12;

        i36 = i36 + 12;

     label12:
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(2, i36);
        i37 = specialinvoke r0.<java.util.GregorianCalendar: int monthLength(int)>(i36);
        $i38 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(5);
        if $i38 <= i37 goto label13;

        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(5, i37);

     label13:
        goto label16;

     label14:
        $i39 = virtualinvoke r0.<java.util.GregorianCalendar: int getActualMaximum(int)>(2);
        i40 = $i39 + 1;
        $i41 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(2);
        $i42 = $i41 + i1;
        i43 = $i42 % i40;
        if i43 >= 0 goto label15;

        i43 = i43 + i40;

     label15:
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(2, i43);
        i44 = virtualinvoke r0.<java.util.GregorianCalendar: int getActualMaximum(int)>(5);
        $i45 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(5);
        if $i45 <= i44 goto label16;

        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(5, i44);

     label16:
        return;

     label17:
        $r13 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        i46 = virtualinvoke $r13.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        i3 = virtualinvoke r0.<java.util.GregorianCalendar: int getActualMaximum(int)>(3);
        $i47 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(7);
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(7, $i47);
        i48 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(3);
        i49 = i48 + i1;
        $z2 = specialinvoke r0.<java.util.GregorianCalendar: boolean isCutoverYear(int)>(i46);
        if $z2 != 0 goto label20;

        if i49 <= i2 goto label18;

        if i49 >= i3 goto label18;

        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(3, i49);
        return;

     label18:
        l50 = specialinvoke r0.<java.util.GregorianCalendar: long getCurrentFixedDate()>();
        $i51 = i48 - i2;
        $i52 = 7 * $i51;
        $l53 = (long) $i52;
        l54 = l50 - $l53;
        $r14 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        $i55 = virtualinvoke $r14.<sun.util.calendar.BaseCalendar: int getYearFromFixedDate(long)>(l54);
        if $i55 == i46 goto label19;

        i2 = i2 + 1;

     label19:
        $i56 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(3);
        $i57 = i3 - $i56;
        $i58 = 7 * $i57;
        $l59 = (long) $i58;
        l60 = l50 + $l59;
        $r15 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        $i61 = virtualinvoke $r15.<sun.util.calendar.BaseCalendar: int getYearFromFixedDate(long)>(l60);
        if $i61 == i46 goto label55;

        i3 = i3 + -1;
        goto label55;

     label20:
        l62 = specialinvoke r0.<java.util.GregorianCalendar: long getCurrentFixedDate()>();
        $i63 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        $i64 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if $i63 != $i64 goto label21;

        r16 = specialinvoke r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar getCutoverCalendarSystem()>();
        goto label23;

     label21:
        $i65 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if i46 != $i65 goto label22;

        r16 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        goto label23;

     label22:
        r16 = staticinvoke <java.util.GregorianCalendar: sun.util.calendar.BaseCalendar getJulianCalendarSystem()>();

     label23:
        $i66 = i48 - i2;
        $i67 = 7 * $i66;
        $l68 = (long) $i67;
        l69 = l62 - $l68;
        $i70 = virtualinvoke r16.<sun.util.calendar.BaseCalendar: int getYearFromFixedDate(long)>(l69);
        if $i70 == i46 goto label24;

        i2 = i2 + 1;

     label24:
        $i71 = i3 - i48;
        $i72 = 7 * $i71;
        $l73 = (long) $i72;
        l74 = l62 + $l73;
        $l75 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $b76 = l74 cmp $l75;
        if $b76 < 0 goto label25;

        $r17 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        goto label26;

     label25:
        $r17 = staticinvoke <java.util.GregorianCalendar: sun.util.calendar.BaseCalendar getJulianCalendarSystem()>();

     label26:
        r18 = $r17;
        $i77 = virtualinvoke r18.<sun.util.calendar.BaseCalendar: int getYearFromFixedDate(long)>(l74);
        if $i77 == i46 goto label27;

        i3 = i3 + -1;

     label27:
        $i78 = staticinvoke <java.util.GregorianCalendar: int getRolledValue(int,int,int,int)>(i48, i1, i2, i3);
        i79 = $i78 - 1;
        $i80 = i79 * 7;
        $l81 = (long) $i80;
        $l82 = l69 + $l81;
        r2 = specialinvoke r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date getCalendarDate(long)>($l82);
        $i83 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        $i84 = $i83 - 1;
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(2, $i84);
        $i85 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(5, $i85);
        return;

     label28:
        $r19 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $i86 = virtualinvoke $r19.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        z3 = specialinvoke r0.<java.util.GregorianCalendar: boolean isCutoverYear(int)>($i86);
        $i87 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(7);
        $i88 = virtualinvoke r0.<java.util.GregorianCalendar: int getFirstDayOfWeek()>();
        i89 = $i87 - $i88;
        if i89 >= 0 goto label29;

        i89 = i89 + 7;

     label29:
        l90 = specialinvoke r0.<java.util.GregorianCalendar: long getCurrentFixedDate()>();
        if z3 == 0 goto label30;

        $r20 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        l91 = specialinvoke r0.<java.util.GregorianCalendar: long getFixedDateMonth1(sun.util.calendar.BaseCalendar$Date,long)>($r20, l90);
        i92 = specialinvoke r0.<java.util.GregorianCalendar: int actualMonthLength()>();
        goto label31;

     label30:
        $i93 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(5);
        $l94 = (long) $i93;
        $l95 = l90 - $l94;
        l91 = $l95 + 1L;
        $r21 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        $r22 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        i92 = virtualinvoke $r21.<sun.util.calendar.BaseCalendar: int getMonthLength(sun.util.calendar.CalendarDate)>($r22);

     label31:
        $l96 = l91 + 6L;
        $i97 = virtualinvoke r0.<java.util.GregorianCalendar: int getFirstDayOfWeek()>();
        l10 = staticinvoke <sun.util.calendar.BaseCalendar: long getDayOfWeekDateOnOrBefore(long,int)>($l96, $i97);
        $l98 = l10 - l91;
        $i99 = (int) $l98;
        $i100 = virtualinvoke r0.<java.util.GregorianCalendar: int getMinimalDaysInFirstWeek()>();
        if $i99 < $i100 goto label32;

        l10 = l10 - 7L;

     label32:
        i101 = virtualinvoke r0.<java.util.GregorianCalendar: int getActualMaximum(int)>(i0);
        $i102 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(i0);
        $i103 = staticinvoke <java.util.GregorianCalendar: int getRolledValue(int,int,int,int)>($i102, i1, 1, i101);
        i11 = $i103 - 1;
        $i104 = i11 * 7;
        $l105 = (long) $i104;
        $l106 = l10 + $l105;
        $l107 = (long) i89;
        l12 = $l106 + $l107;
        $b108 = l12 cmp l91;
        if $b108 >= 0 goto label33;

        l12 = l91;
        goto label34;

     label33:
        $l109 = (long) i92;
        $l110 = l91 + $l109;
        $b111 = l12 cmp $l110;
        if $b111 < 0 goto label34;

        $l112 = (long) i92;
        $l113 = l91 + $l112;
        l12 = $l113 - 1L;

     label34:
        if z3 == 0 goto label35;

        r3 = specialinvoke r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date getCalendarDate(long)>(l12);
        i13 = virtualinvoke r3.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        goto label36;

     label35:
        $l114 = l12 - l91;
        $i115 = (int) $l114;
        i13 = $i115 + 1;

     label36:
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(5, i13);
        return;

     label37:
        $r24 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $i116 = virtualinvoke $r24.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $z4 = specialinvoke r0.<java.util.GregorianCalendar: boolean isCutoverYear(int)>($i116);
        if $z4 != 0 goto label38;

        $r25 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        $r26 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        i3 = virtualinvoke $r25.<sun.util.calendar.BaseCalendar: int getMonthLength(sun.util.calendar.CalendarDate)>($r26);
        goto label55;

     label38:
        l117 = specialinvoke r0.<java.util.GregorianCalendar: long getCurrentFixedDate()>();
        $r27 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        l118 = specialinvoke r0.<java.util.GregorianCalendar: long getFixedDateMonth1(sun.util.calendar.BaseCalendar$Date,long)>($r27, l117);
        $l119 = l117 - l118;
        $i120 = (int) $l119;
        $i121 = specialinvoke r0.<java.util.GregorianCalendar: int actualMonthLength()>();
        $i122 = $i121 - 1;
        i123 = staticinvoke <java.util.GregorianCalendar: int getRolledValue(int,int,int,int)>($i120, i1, 0, $i122);
        $l124 = (long) i123;
        $l125 = l118 + $l124;
        r28 = specialinvoke r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date getCalendarDate(long)>($l125);
        $z5 = <java.util.GregorianCalendar: boolean $assertionsDisabled>;
        if $z5 != 0 goto label39;

        $i126 = virtualinvoke r28.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        $i127 = $i126 - 1;
        $i128 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(2);
        if $i127 == $i128 goto label39;

        $r29 = new java.lang.AssertionError;
        specialinvoke $r29.<java.lang.AssertionError: void <init>()>();
        throw $r29;

     label39:
        $i129 = virtualinvoke r28.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(5, $i129);
        return;

     label40:
        i3 = virtualinvoke r0.<java.util.GregorianCalendar: int getActualMaximum(int)>(i0);
        $r30 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $i130 = virtualinvoke $r30.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $z6 = specialinvoke r0.<java.util.GregorianCalendar: boolean isCutoverYear(int)>($i130);
        if $z6 != 0 goto label41;

        goto label55;

     label41:
        l131 = specialinvoke r0.<java.util.GregorianCalendar: long getCurrentFixedDate()>();
        $i132 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(6);
        $l133 = (long) $i132;
        $l134 = l131 - $l133;
        l135 = $l134 + 1L;
        $l136 = l131 - l135;
        $i137 = (int) $l136;
        $i138 = $i137 + 1;
        i139 = staticinvoke <java.util.GregorianCalendar: int getRolledValue(int,int,int,int)>($i138, i1, i2, i3);
        $l140 = (long) i139;
        $l141 = l135 + $l140;
        $l142 = $l141 - 1L;
        r31 = specialinvoke r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date getCalendarDate(long)>($l142);
        $i143 = virtualinvoke r31.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        $i144 = $i143 - 1;
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(2, $i144);
        $i145 = virtualinvoke r31.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(5, $i145);
        return;

     label42:
        $r32 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $i146 = virtualinvoke $r32.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $z7 = specialinvoke r0.<java.util.GregorianCalendar: boolean isCutoverYear(int)>($i146);
        if $z7 != 0 goto label43;

        i147 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(3);
        if i147 <= 1 goto label43;

        if i147 >= 52 goto label43;

        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(3, i147);
        i3 = 7;
        goto label55;

     label43:
        i148 = i1 % 7;
        if i148 != 0 goto label44;

        return;

     label44:
        l149 = specialinvoke r0.<java.util.GregorianCalendar: long getCurrentFixedDate()>();
        $i150 = virtualinvoke r0.<java.util.GregorianCalendar: int getFirstDayOfWeek()>();
        l151 = staticinvoke <sun.util.calendar.BaseCalendar: long getDayOfWeekDateOnOrBefore(long,int)>(l149, $i150);
        $l152 = (long) i148;
        l153 = l149 + $l152;
        $b154 = l153 cmp l151;
        if $b154 >= 0 goto label45;

        l153 = l153 + 7L;
        goto label46;

     label45:
        $l155 = l151 + 7L;
        $b156 = l153 cmp $l155;
        if $b156 < 0 goto label46;

        l153 = l153 - 7L;

     label46:
        r34 = specialinvoke r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date getCalendarDate(long)>(l153);
        $b157 = 0;
        $i158 = virtualinvoke r34.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        if $i158 > 0 goto label47;

        $b159 = 0;
        goto label48;

     label47:
        $b159 = 1;

     label48:
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>($b157, $b159);
        $i160 = virtualinvoke r34.<sun.util.calendar.BaseCalendar$Date: int getYear()>();
        $i161 = virtualinvoke r34.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        $i162 = $i161 - 1;
        $i163 = virtualinvoke r34.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int,int)>($i160, $i162, $i163);
        return;

     label49:
        i2 = 1;
        $r36 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $i164 = virtualinvoke $r36.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $z8 = specialinvoke r0.<java.util.GregorianCalendar: boolean isCutoverYear(int)>($i164);
        if $z8 != 0 goto label51;

        i165 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(5);
        $r37 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        $r38 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        i166 = virtualinvoke $r37.<sun.util.calendar.BaseCalendar: int getMonthLength(sun.util.calendar.CalendarDate)>($r38);
        i167 = i166 % 7;
        i3 = i166 / 7;
        $i168 = i165 - 1;
        i169 = $i168 % 7;
        if i169 >= i167 goto label50;

        i3 = i3 + 1;

     label50:
        $i170 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(7);
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(7, $i170);
        goto label55;

     label51:
        l171 = specialinvoke r0.<java.util.GregorianCalendar: long getCurrentFixedDate()>();
        $r39 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        l172 = specialinvoke r0.<java.util.GregorianCalendar: long getFixedDateMonth1(sun.util.calendar.BaseCalendar$Date,long)>($r39, l171);
        i173 = specialinvoke r0.<java.util.GregorianCalendar: int actualMonthLength()>();
        i174 = i173 % 7;
        i175 = i173 / 7;
        $l176 = l171 - l172;
        $i177 = (int) $l176;
        i178 = $i177 % 7;
        if i178 >= i174 goto label52;

        i175 = i175 + 1;

     label52:
        $i179 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(i0);
        $i180 = staticinvoke <java.util.GregorianCalendar: int getRolledValue(int,int,int,int)>($i179, i1, i2, i175);
        i181 = $i180 - 1;
        $i182 = i181 * 7;
        $l183 = (long) $i182;
        $l184 = l172 + $l183;
        $l185 = (long) i178;
        l186 = $l184 + $l185;
        $l187 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $b188 = l186 cmp $l187;
        if $b188 < 0 goto label53;

        $r40 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        goto label54;

     label53:
        $r40 = staticinvoke <java.util.GregorianCalendar: sun.util.calendar.BaseCalendar getJulianCalendarSystem()>();

     label54:
        r41 = $r40;
        $r42 = <java.util.TimeZone: java.util.TimeZone NO_TIMEZONE>;
        $r43 = virtualinvoke r41.<sun.util.calendar.BaseCalendar: sun.util.calendar.CalendarDate newCalendarDate(java.util.TimeZone)>($r42);
        r44 = (sun.util.calendar.BaseCalendar$Date) $r43;
        virtualinvoke r41.<sun.util.calendar.BaseCalendar: void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate,long)>(r44, l186);
        $i189 = virtualinvoke r44.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(5, $i189);
        return;

     label55:
        $i190 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(i0);
        $i191 = staticinvoke <java.util.GregorianCalendar: int getRolledValue(int,int,int,int)>($i190, i1, i2, i3);
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(i0, $i191);
        return;
    }

    public int getMinimum(int)
    {
        java.util.GregorianCalendar r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        $r1 = <java.util.GregorianCalendar: int[] MIN_VALUES>;
        $i1 = $r1[i0];
        return $i1;
    }

    public int getMaximum(int)
    {
        java.util.GregorianCalendar r0, r1;
        int i0, i1, i2, $i3, $i7, $i8, $i9, $i10;
        java.lang.Object $r2;
        long $l4, $l5, $l6;
        int[] $r3, $r4;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        tableswitch(i0)
        {
            case 1: goto label0;
            case 2: goto label0;
            case 3: goto label0;
            case 4: goto label0;
            case 5: goto label0;
            case 6: goto label0;
            case 7: goto label2;
            case 8: goto label0;
            default: goto label2;
        };

     label0:
        $i3 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if $i3 <= 200 goto label1;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<java.util.GregorianCalendar: java.lang.Object clone()>();
        r1 = (java.util.GregorianCalendar) $r2;
        virtualinvoke r1.<java.util.GregorianCalendar: void setLenient(boolean)>(1);
        $l4 = r0.<java.util.GregorianCalendar: long gregorianCutover>;
        virtualinvoke r1.<java.util.GregorianCalendar: void setTimeInMillis(long)>($l4);
        i1 = virtualinvoke r1.<java.util.GregorianCalendar: int getActualMaximum(int)>(i0);
        $l5 = r0.<java.util.GregorianCalendar: long gregorianCutover>;
        $l6 = $l5 - 1L;
        virtualinvoke r1.<java.util.GregorianCalendar: void setTimeInMillis(long)>($l6);
        i2 = virtualinvoke r1.<java.util.GregorianCalendar: int getActualMaximum(int)>(i0);
        $r3 = <java.util.GregorianCalendar: int[] MAX_VALUES>;
        $i7 = $r3[i0];
        $i8 = staticinvoke <java.lang.Math: int max(int,int)>(i1, i2);
        $i9 = staticinvoke <java.lang.Math: int max(int,int)>($i7, $i8);
        return $i9;

     label2:
        $r4 = <java.util.GregorianCalendar: int[] MAX_VALUES>;
        $i10 = $r4[i0];
        return $i10;
    }

    public int getGreatestMinimum(int)
    {
        java.util.GregorianCalendar r0;
        int i0, $i3, $i4, $i5, $i6;
        sun.util.calendar.BaseCalendar$Date r1, r2;
        long l1, $l2;
        int[] $r3, $r4;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        if i0 != 5 goto label0;

        r1 = specialinvoke r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date getGregorianCutoverDate()>();
        $l2 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        l1 = specialinvoke r0.<java.util.GregorianCalendar: long getFixedDateMonth1(sun.util.calendar.BaseCalendar$Date,long)>(r1, $l2);
        r2 = specialinvoke r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date getCalendarDate(long)>(l1);
        $r3 = <java.util.GregorianCalendar: int[] MIN_VALUES>;
        $i3 = $r3[i0];
        $i4 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i4);
        return $i5;

     label0:
        $r4 = <java.util.GregorianCalendar: int[] MIN_VALUES>;
        $i6 = $r4[i0];
        return $i6;
    }

    public int getLeastMaximum(int)
    {
        java.util.GregorianCalendar r0, r1;
        int i0, i1, i2, $i6, $i7, $i8, $i9;
        java.lang.Object $r2;
        long $l3, $l4, $l5;
        int[] $r3, $r4;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        tableswitch(i0)
        {
            case 1: goto label0;
            case 2: goto label0;
            case 3: goto label0;
            case 4: goto label0;
            case 5: goto label0;
            case 6: goto label0;
            case 7: goto label1;
            case 8: goto label0;
            default: goto label1;
        };

     label0:
        $r2 = virtualinvoke r0.<java.util.GregorianCalendar: java.lang.Object clone()>();
        r1 = (java.util.GregorianCalendar) $r2;
        virtualinvoke r1.<java.util.GregorianCalendar: void setLenient(boolean)>(1);
        $l3 = r0.<java.util.GregorianCalendar: long gregorianCutover>;
        virtualinvoke r1.<java.util.GregorianCalendar: void setTimeInMillis(long)>($l3);
        i1 = virtualinvoke r1.<java.util.GregorianCalendar: int getActualMaximum(int)>(i0);
        $l4 = r0.<java.util.GregorianCalendar: long gregorianCutover>;
        $l5 = $l4 - 1L;
        virtualinvoke r1.<java.util.GregorianCalendar: void setTimeInMillis(long)>($l5);
        i2 = virtualinvoke r1.<java.util.GregorianCalendar: int getActualMaximum(int)>(i0);
        $r3 = <java.util.GregorianCalendar: int[] LEAST_MAX_VALUES>;
        $i6 = $r3[i0];
        $i7 = staticinvoke <java.lang.Math: int min(int,int)>(i1, i2);
        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i7);
        return $i8;

     label1:
        $r4 = <java.util.GregorianCalendar: int[] LEAST_MAX_VALUES>;
        $i9 = $r4[i0];
        return $i9;
    }

    public int getActualMinimum(int)
    {
        java.util.GregorianCalendar r0, r1;
        int i0, i1, $i3, $i4, $i6, $i7;
        long l2, $l5;
        sun.util.calendar.BaseCalendar$Date r2, $r3, $r4, $r6;
        sun.util.calendar.BaseCalendar $r5;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        if i0 != 5 goto label1;

        r1 = specialinvoke r0.<java.util.GregorianCalendar: java.util.GregorianCalendar getNormalizedCalendar()>();
        $r3 = r1.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        i1 = virtualinvoke $r3.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $i3 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if i1 == $i3 goto label0;

        $i4 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if i1 != $i4 goto label1;

     label0:
        $r4 = r1.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $r5 = r1.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        $r6 = r1.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $l5 = virtualinvoke $r5.<sun.util.calendar.BaseCalendar: long getFixedDate(sun.util.calendar.CalendarDate)>($r6);
        l2 = specialinvoke r0.<java.util.GregorianCalendar: long getFixedDateMonth1(sun.util.calendar.BaseCalendar$Date,long)>($r4, $l5);
        r2 = specialinvoke r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date getCalendarDate(long)>(l2);
        $i6 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        return $i6;

     label1:
        $i7 = virtualinvoke r0.<java.util.GregorianCalendar: int getMinimum(int)>(i0);
        return $i7;
    }

    public int getActualMaximum(int)
    {
        java.util.GregorianCalendar r0, r1;
        int i0, i1, i5, $i7, $i8, $i9, i10, $i14, $i15, i19, $i23, $i24, $i26, i27, $i31, $i32, $i33, $i36, $i37, $i38, $i42, $i43, i44, $i45, $i46, i47, i48, $i49, $i50, $i51, $i52, $i53, i54, i55, $i56, i57, i58, $i59, $i60, i61, i62, i63, $i64, $i65, i66, i67, i68, $i69, i70, i71, $i72, $i74, $i83, $i86, $i90, $i94;
        sun.util.calendar.BaseCalendar$Date r2, r4, r5, $r8, r21;
        sun.util.calendar.BaseCalendar r3, r9, $r25, r26;
        byte b2, $b12, $b18, $b30, $b35, $b40, $b76, $b79, $b97;
        long l3, l4, l6, $l11, $l13, l16, $l17, $l20, $l21, $l22, l25, l28, $l29, $l34, $l39, $l41, l73, l75, $l77, $l78, $l80, $l81, $l82, $l84, l85, $l87, l88, l89, $l91, l92, l93, $l95, l96;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z10;
        sun.util.calendar.Gregorian $r6, $r10, $r29;
        java.lang.Object $r7, $r16, $r19, $r20, $r23, $r24;
        java.lang.AssertionError $r11, $r12, $r30;
        java.util.TimeZone $r13, $r27;
        sun.util.calendar.CalendarDate r14, r17, r28;
        java.lang.ArrayIndexOutOfBoundsException $r31;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        $i7 = 1 << i0;
        $i8 = 130689 & $i7;
        if $i8 == 0 goto label0;

        $i9 = virtualinvoke r0.<java.util.GregorianCalendar: int getMaximum(int)>(i0);
        return $i9;

     label0:
        r1 = specialinvoke r0.<java.util.GregorianCalendar: java.util.GregorianCalendar getNormalizedCalendar()>();
        r2 = r1.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        r3 = r1.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        i1 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        b2 = -1;
        tableswitch(i0)
        {
            case 1: goto label32;
            case 2: goto label1;
            case 3: goto label14;
            case 4: goto label20;
            case 5: goto label3;
            case 6: goto label6;
            case 7: goto label41;
            case 8: goto label27;
            default: goto label41;
        };

     label1:
        $z0 = specialinvoke r1.<java.util.GregorianCalendar: boolean isCutoverYear(int)>(i1);
        if $z0 != 0 goto label2;

        i10 = 11;
        goto label42;

     label2:
        $r6 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        i1 = i1 + 1;
        l3 = virtualinvoke $r6.<sun.util.calendar.Gregorian: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>(i1, 1, 1, null);
        $l11 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $b12 = l3 cmp $l11;
        if $b12 < 0 goto label2;

        $r7 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: java.lang.Object clone()>();
        r4 = (sun.util.calendar.BaseCalendar$Date) $r7;
        $l13 = l3 - 1L;
        virtualinvoke r3.<sun.util.calendar.BaseCalendar: void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate,long)>(r4, $l13);
        $i14 = virtualinvoke r4.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        i10 = $i14 - 1;
        goto label42;

     label3:
        i10 = virtualinvoke r3.<sun.util.calendar.BaseCalendar: int getMonthLength(sun.util.calendar.CalendarDate)>(r2);
        $z1 = specialinvoke r1.<java.util.GregorianCalendar: boolean isCutoverYear(int)>(i1);
        if $z1 == 0 goto label42;

        $i15 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        if $i15 != i10 goto label4;

        goto label42;

     label4:
        l16 = specialinvoke r1.<java.util.GregorianCalendar: long getCurrentFixedDate()>();
        $l17 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $b18 = l16 cmp $l17;
        if $b18 < 0 goto label5;

        goto label42;

     label5:
        i19 = specialinvoke r1.<java.util.GregorianCalendar: int actualMonthLength()>();
        $r8 = r1.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $l20 = specialinvoke r1.<java.util.GregorianCalendar: long getFixedDateMonth1(sun.util.calendar.BaseCalendar$Date,long)>($r8, l16);
        $l21 = (long) i19;
        $l22 = $l20 + $l21;
        l4 = $l22 - 1L;
        r5 = specialinvoke r1.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date getCalendarDate(long)>(l4);
        i10 = virtualinvoke r5.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        goto label42;

     label6:
        $z2 = specialinvoke r1.<java.util.GregorianCalendar: boolean isCutoverYear(int)>(i1);
        if $z2 != 0 goto label7;

        i10 = virtualinvoke r3.<sun.util.calendar.BaseCalendar: int getYearLength(sun.util.calendar.CalendarDate)>(r2);
        goto label42;

     label7:
        $i23 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        $i24 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if $i23 != $i24 goto label8;

        r9 = specialinvoke r1.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar getCutoverCalendarSystem()>();
        l25 = virtualinvoke r9.<sun.util.calendar.BaseCalendar: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>(i1, 1, 1, null);
        goto label10;

     label8:
        $i26 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if i1 != $i26 goto label9;

        l25 = virtualinvoke r3.<sun.util.calendar.BaseCalendar: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>(i1, 1, 1, null);
        goto label10;

     label9:
        l25 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;

     label10:
        $r10 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        i27 = i1 + 1;
        l28 = virtualinvoke $r10.<sun.util.calendar.Gregorian: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>(i27, 1, 1, null);
        $l29 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $b30 = l28 cmp $l29;
        if $b30 >= 0 goto label11;

        l28 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;

     label11:
        $z3 = <java.util.GregorianCalendar: boolean $assertionsDisabled>;
        if $z3 != 0 goto label12;

        $i31 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $i32 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        $i33 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        $l34 = virtualinvoke r3.<sun.util.calendar.BaseCalendar: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>($i31, $i32, $i33, r2);
        $b35 = l25 cmp $l34;
        if $b35 <= 0 goto label12;

        $r11 = new java.lang.AssertionError;
        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();
        throw $r11;

     label12:
        $z4 = <java.util.GregorianCalendar: boolean $assertionsDisabled>;
        if $z4 != 0 goto label13;

        $i36 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $i37 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        $i38 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        $l39 = virtualinvoke r3.<sun.util.calendar.BaseCalendar: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>($i36, $i37, $i38, r2);
        $b40 = l28 cmp $l39;
        if $b40 >= 0 goto label13;

        $r12 = new java.lang.AssertionError;
        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();
        throw $r12;

     label13:
        $l41 = l28 - l25;
        i10 = (int) $l41;
        goto label42;

     label14:
        $z5 = specialinvoke r1.<java.util.GregorianCalendar: boolean isCutoverYear(int)>(i1);
        if $z5 != 0 goto label17;

        $r13 = <java.util.TimeZone: java.util.TimeZone NO_TIMEZONE>;
        r14 = virtualinvoke r3.<sun.util.calendar.BaseCalendar: sun.util.calendar.CalendarDate newCalendarDate(java.util.TimeZone)>($r13);
        $i42 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getYear()>();
        virtualinvoke r14.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setDate(int,int,int)>($i42, 1, 1);
        i5 = virtualinvoke r3.<sun.util.calendar.BaseCalendar: int getDayOfWeek(sun.util.calendar.CalendarDate)>(r14);
        $i43 = virtualinvoke r0.<java.util.GregorianCalendar: int getFirstDayOfWeek()>();
        i44 = i5 - $i43;
        if i44 >= 0 goto label15;

        i44 = i44 + 7;

     label15:
        i10 = 52;
        $i45 = virtualinvoke r0.<java.util.GregorianCalendar: int getMinimalDaysInFirstWeek()>();
        $i46 = i44 + $i45;
        i47 = $i46 - 1;
        if i47 == 6 goto label16;

        $z6 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: boolean isLeapYear()>();
        if $z6 == 0 goto label42;

        if i47 == 5 goto label16;

        if i47 != 12 goto label42;

     label16:
        i10 = i10 + 1;
        goto label42;

     label17:
        if r1 != r0 goto label18;

        $r16 = virtualinvoke r1.<java.util.GregorianCalendar: java.lang.Object clone()>();
        r1 = (java.util.GregorianCalendar) $r16;

     label18:
        i48 = virtualinvoke r0.<java.util.GregorianCalendar: int getActualMaximum(int)>(6);
        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(6, i48);
        i10 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(3);
        $i49 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(1);
        $i50 = virtualinvoke r1.<java.util.GregorianCalendar: int getWeekYear()>();
        if $i49 == $i50 goto label19;

        $i51 = i48 - 7;
        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(6, $i51);
        i10 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(3);

     label19:
        goto label42;

     label20:
        $z7 = specialinvoke r1.<java.util.GregorianCalendar: boolean isCutoverYear(int)>(i1);
        if $z7 != 0 goto label23;

        r17 = virtualinvoke r3.<sun.util.calendar.BaseCalendar: sun.util.calendar.CalendarDate newCalendarDate(java.util.TimeZone)>(null);
        $i52 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getYear()>();
        $i53 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        virtualinvoke r17.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setDate(int,int,int)>($i52, $i53, 1);
        i54 = virtualinvoke r3.<sun.util.calendar.BaseCalendar: int getDayOfWeek(sun.util.calendar.CalendarDate)>(r17);
        i55 = virtualinvoke r3.<sun.util.calendar.BaseCalendar: int getMonthLength(sun.util.calendar.CalendarDate)>(r17);
        $i56 = virtualinvoke r0.<java.util.GregorianCalendar: int getFirstDayOfWeek()>();
        i57 = i54 - $i56;
        if i57 >= 0 goto label21;

        i57 = i57 + 7;

     label21:
        i58 = 7 - i57;
        i10 = 3;
        $i59 = virtualinvoke r0.<java.util.GregorianCalendar: int getMinimalDaysInFirstWeek()>();
        if i58 < $i59 goto label22;

        i10 = i10 + 1;

     label22:
        $i60 = i58 + 21;
        i61 = i55 - $i60;
        if i61 <= 0 goto label42;

        i10 = i10 + 1;
        if i61 <= 7 goto label42;

        i10 = i10 + 1;
        goto label42;

     label23:
        if r1 != r0 goto label24;

        $r19 = virtualinvoke r1.<java.util.GregorianCalendar: java.lang.Object clone()>();
        r1 = (java.util.GregorianCalendar) $r19;

     label24:
        i62 = virtualinvoke r1.<java.util.GregorianCalendar: int internalGet(int)>(1);
        i63 = virtualinvoke r1.<java.util.GregorianCalendar: int internalGet(int)>(2);

     label25:
        i10 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(4);
        virtualinvoke r1.<java.util.GregorianCalendar: void add(int,int)>(4, 1);
        $i64 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(1);
        if $i64 != i62 goto label26;

        $i65 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(2);
        if $i65 == i63 goto label25;

     label26:
        goto label42;

     label27:
        i66 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getDayOfWeek()>();
        $z8 = specialinvoke r1.<java.util.GregorianCalendar: boolean isCutoverYear(int)>(i1);
        if $z8 != 0 goto label28;

        $r20 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: java.lang.Object clone()>();
        r21 = (sun.util.calendar.BaseCalendar$Date) $r20;
        i67 = virtualinvoke r3.<sun.util.calendar.BaseCalendar: int getMonthLength(sun.util.calendar.CalendarDate)>(r21);
        virtualinvoke r21.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setDayOfMonth(int)>(1);
        virtualinvoke r3.<sun.util.calendar.BaseCalendar: boolean normalize(sun.util.calendar.CalendarDate)>(r21);
        i68 = virtualinvoke r21.<sun.util.calendar.BaseCalendar$Date: int getDayOfWeek()>();
        goto label30;

     label28:
        if r1 != r0 goto label29;

        $r23 = virtualinvoke r0.<java.util.GregorianCalendar: java.lang.Object clone()>();
        r1 = (java.util.GregorianCalendar) $r23;

     label29:
        i67 = specialinvoke r1.<java.util.GregorianCalendar: int actualMonthLength()>();
        $i69 = virtualinvoke r1.<java.util.GregorianCalendar: int getActualMinimum(int)>(5);
        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(5, $i69);
        i68 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(7);

     label30:
        i70 = i66 - i68;
        if i70 >= 0 goto label31;

        i70 = i70 + 7;

     label31:
        i71 = i67 - i70;
        $i72 = i71 + 6;
        i10 = $i72 / 7;
        goto label42;

     label32:
        if r1 != r0 goto label33;

        $r24 = virtualinvoke r0.<java.util.GregorianCalendar: java.lang.Object clone()>();
        r1 = (java.util.GregorianCalendar) $r24;

     label33:
        l73 = specialinvoke r1.<java.util.GregorianCalendar: long getYearOffsetInMillis()>();
        $i74 = specialinvoke r1.<java.util.GregorianCalendar: int internalGetEra()>();
        if $i74 != 1 goto label35;

        virtualinvoke r1.<java.util.GregorianCalendar: void setTimeInMillis(long)>(9223372036854775807L);
        i10 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(1);
        l75 = specialinvoke r1.<java.util.GregorianCalendar: long getYearOffsetInMillis()>();
        $b76 = l73 cmp l75;
        if $b76 <= 0 goto label34;

        i10 = i10 + -1;

     label34:
        goto label40;

     label35:
        $l77 = virtualinvoke r1.<java.util.GregorianCalendar: long getTimeInMillis()>();
        $l78 = r0.<java.util.GregorianCalendar: long gregorianCutover>;
        $b79 = $l77 cmp $l78;
        if $b79 < 0 goto label36;

        $r25 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        goto label37;

     label36:
        $r25 = staticinvoke <java.util.GregorianCalendar: sun.util.calendar.BaseCalendar getJulianCalendarSystem()>();

     label37:
        r26 = $r25;
        $r27 = virtualinvoke r0.<java.util.GregorianCalendar: java.util.TimeZone getZone()>();
        r28 = virtualinvoke r26.<sun.util.calendar.CalendarSystem: sun.util.calendar.CalendarDate getCalendarDate(long,java.util.TimeZone)>(-9223372036854775808L, $r27);
        $l80 = virtualinvoke r3.<sun.util.calendar.BaseCalendar: long getDayOfYear(sun.util.calendar.CalendarDate)>(r28);
        $l81 = $l80 - 1L;
        $l82 = $l81 * 24L;
        $i83 = virtualinvoke r28.<sun.util.calendar.CalendarDate: int getHours()>();
        $l84 = (long) $i83;
        l6 = $l82 + $l84;
        l85 = l6 * 60L;
        $i86 = virtualinvoke r28.<sun.util.calendar.CalendarDate: int getMinutes()>();
        $l87 = (long) $i86;
        l88 = l85 + $l87;
        l89 = l88 * 60L;
        $i90 = virtualinvoke r28.<sun.util.calendar.CalendarDate: int getSeconds()>();
        $l91 = (long) $i90;
        l92 = l89 + $l91;
        l93 = l92 * 1000L;
        $i94 = virtualinvoke r28.<sun.util.calendar.CalendarDate: int getMillis()>();
        $l95 = (long) $i94;
        l96 = l93 + $l95;
        i10 = virtualinvoke r28.<sun.util.calendar.CalendarDate: int getYear()>();
        if i10 > 0 goto label39;

        $z10 = <java.util.GregorianCalendar: boolean $assertionsDisabled>;
        if $z10 != 0 goto label38;

        $r29 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        if r26 == $r29 goto label38;

        $r30 = new java.lang.AssertionError;
        specialinvoke $r30.<java.lang.AssertionError: void <init>()>();
        throw $r30;

     label38:
        i10 = 1 - i10;

     label39:
        $b97 = l73 cmp l96;
        if $b97 >= 0 goto label40;

        i10 = i10 + -1;

     label40:
        goto label42;

     label41:
        $r31 = new java.lang.ArrayIndexOutOfBoundsException;
        specialinvoke $r31.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>(i0);
        throw $r31;

     label42:
        return i10;
    }

    private final long getYearOffsetInMillis()
    {
        java.util.GregorianCalendar r0;
        long l0, $l5, l6, l7, $l9, l10, l11, $l13, l14, l15, $l17, $l18, $l22, $l23;
        int $i1, $i2, $i3, $i4, $i8, $i12, $i16, $i19, $i20, $i21;

        r0 := @this: java.util.GregorianCalendar;
        $i1 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(6);
        $i2 = $i1 - 1;
        $i3 = $i2 * 24;
        l0 = (long) $i3;
        $i4 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(11);
        $l5 = (long) $i4;
        l6 = l0 + $l5;
        l7 = l6 * 60L;
        $i8 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(12);
        $l9 = (long) $i8;
        l10 = l7 + $l9;
        l11 = l10 * 60L;
        $i12 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(13);
        $l13 = (long) $i12;
        l14 = l11 + $l13;
        l15 = l14 * 1000L;
        $i16 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(14);
        $l17 = (long) $i16;
        $l18 = l15 + $l17;
        $i19 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(15);
        $i20 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(16);
        $i21 = $i19 + $i20;
        $l22 = (long) $i21;
        $l23 = $l18 - $l22;
        return $l23;
    }

    public java.lang.Object clone()
    {
        java.util.GregorianCalendar r0, r1;
        java.lang.Object $r2, $r4, $r10;
        sun.util.calendar.BaseCalendar$Date $r3, $r5, $r6, $r7, $r8, $r9, $r11, $r12;

        r0 := @this: java.util.GregorianCalendar;
        $r2 = specialinvoke r0.<java.util.Calendar: java.lang.Object clone()>();
        r1 = (java.util.GregorianCalendar) $r2;
        $r3 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        $r4 = virtualinvoke $r3.<sun.util.calendar.BaseCalendar$Date: java.lang.Object clone()>();
        $r5 = (sun.util.calendar.BaseCalendar$Date) $r4;
        r1.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate> = $r5;
        $r6 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        if $r6 == null goto label1;

        $r7 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $r8 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        if $r7 == $r8 goto label0;

        $r9 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $r10 = virtualinvoke $r9.<sun.util.calendar.BaseCalendar$Date: java.lang.Object clone()>();
        $r11 = (sun.util.calendar.BaseCalendar$Date) $r10;
        r1.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate> = $r11;
        goto label1;

     label0:
        $r12 = r1.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        r1.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate> = $r12;

     label1:
        r1.<java.util.GregorianCalendar: int[] originalFields> = null;
        r1.<java.util.GregorianCalendar: int[] zoneOffsets> = null;
        return r1;
    }

    public java.util.TimeZone getTimeZone()
    {
        java.util.GregorianCalendar r0;
        java.util.TimeZone r1;
        sun.util.calendar.BaseCalendar$Date $r2, $r4, $r5, $r6, $r7;

        r0 := @this: java.util.GregorianCalendar;
        r1 = specialinvoke r0.<java.util.Calendar: java.util.TimeZone getTimeZone()>();
        $r2 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        virtualinvoke $r2.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setZone(java.util.TimeZone)>(r1);
        $r4 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        if $r4 == null goto label0;

        $r5 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $r6 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        if $r5 == $r6 goto label0;

        $r7 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        virtualinvoke $r7.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setZone(java.util.TimeZone)>(r1);

     label0:
        return r1;
    }

    public void setTimeZone(java.util.TimeZone)
    {
        java.util.GregorianCalendar r0;
        java.util.TimeZone r1;
        sun.util.calendar.BaseCalendar$Date $r2, $r4, $r5, $r6, $r7;

        r0 := @this: java.util.GregorianCalendar;
        r1 := @parameter0: java.util.TimeZone;
        specialinvoke r0.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>(r1);
        $r2 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        virtualinvoke $r2.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setZone(java.util.TimeZone)>(r1);
        $r4 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        if $r4 == null goto label0;

        $r5 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $r6 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        if $r5 == $r6 goto label0;

        $r7 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        virtualinvoke $r7.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setZone(java.util.TimeZone)>(r1);

     label0:
        return;
    }

    public final boolean isWeekDateSupported()
    {
        java.util.GregorianCalendar r0;

        r0 := @this: java.util.GregorianCalendar;
        return 1;
    }

    public int getWeekYear()
    {
        java.util.GregorianCalendar r0, r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, $i21, $i22;
        java.lang.Object $r2;
        java.util.TimeZone $r3;

        r0 := @this: java.util.GregorianCalendar;
        i0 = virtualinvoke r0.<java.util.GregorianCalendar: int get(int)>(1);
        $i8 = specialinvoke r0.<java.util.GregorianCalendar: int internalGetEra()>();
        if $i8 != 0 goto label0;

        i0 = 1 - i0;

     label0:
        $i9 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        $i10 = $i9 + 1;
        if i0 <= $i10 goto label3;

        i1 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(3);
        $i11 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(2);
        if $i11 != 0 goto label1;

        if i1 < 52 goto label2;

        i0 = i0 + -1;
        goto label2;

     label1:
        if i1 != 1 goto label2;

        i0 = i0 + 1;

     label2:
        return i0;

     label3:
        i12 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(6);
        i2 = virtualinvoke r0.<java.util.GregorianCalendar: int getActualMaximum(int)>(6);
        i3 = virtualinvoke r0.<java.util.GregorianCalendar: int getMinimalDaysInFirstWeek()>();
        if i12 <= i3 goto label4;

        $i13 = i2 - 6;
        if i12 >= $i13 goto label4;

        return i0;

     label4:
        $r2 = virtualinvoke r0.<java.util.GregorianCalendar: java.lang.Object clone()>();
        r1 = (java.util.GregorianCalendar) $r2;
        virtualinvoke r1.<java.util.GregorianCalendar: void setLenient(boolean)>(1);
        $r3 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");
        virtualinvoke r1.<java.util.GregorianCalendar: void setTimeZone(java.util.TimeZone)>($r3);
        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(6, 1);
        virtualinvoke r1.<java.util.GregorianCalendar: void complete()>();
        $i14 = virtualinvoke r0.<java.util.GregorianCalendar: int getFirstDayOfWeek()>();
        $i15 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(7);
        i4 = $i14 - $i15;
        if i4 == 0 goto label6;

        if i4 >= 0 goto label5;

        i4 = i4 + 7;

     label5:
        virtualinvoke r1.<java.util.GregorianCalendar: void add(int,int)>(6, i4);

     label6:
        i5 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(6);
        if i12 >= i5 goto label7;

        if i5 > i3 goto label11;

        i0 = i0 + -1;
        goto label11;

     label7:
        $i16 = i0 + 1;
        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(1, $i16);
        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(6, 1);
        virtualinvoke r1.<java.util.GregorianCalendar: void complete()>();
        $i17 = virtualinvoke r0.<java.util.GregorianCalendar: int getFirstDayOfWeek()>();
        $i18 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(7);
        i6 = $i17 - $i18;
        if i6 == 0 goto label9;

        if i6 >= 0 goto label8;

        i6 = i6 + 7;

     label8:
        virtualinvoke r1.<java.util.GregorianCalendar: void add(int,int)>(6, i6);

     label9:
        $i19 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(6);
        i20 = $i19 - 1;
        if i20 != 0 goto label10;

        i20 = 7;

     label10:
        if i20 < i3 goto label11;

        $i21 = i2 - i12;
        i7 = $i21 + 1;
        $i22 = 7 - i20;
        if i7 > $i22 goto label11;

        i0 = i0 + 1;

     label11:
        return i0;
    }

    public void setWeekDate(int, int, int)
    {
        java.util.GregorianCalendar r0, r2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.StringBuilder $r1, $r4, $r5;
        java.lang.IllegalArgumentException $r3, $r9;
        java.lang.String $r6;
        java.lang.Object $r7;
        java.util.TimeZone $r8;
        boolean $z0;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        if i2 < 1 goto label0;

        if i2 <= 7 goto label1;

     label0:
        $r3 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid dayOfWeek: ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);
        throw $r3;

     label1:
        $r7 = virtualinvoke r0.<java.util.GregorianCalendar: java.lang.Object clone()>();
        r2 = (java.util.GregorianCalendar) $r7;
        virtualinvoke r2.<java.util.GregorianCalendar: void setLenient(boolean)>(1);
        i3 = virtualinvoke r2.<java.util.GregorianCalendar: int get(int)>(0);
        virtualinvoke r2.<java.util.GregorianCalendar: void clear()>();
        $r8 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");
        virtualinvoke r2.<java.util.GregorianCalendar: void setTimeZone(java.util.TimeZone)>($r8);
        virtualinvoke r2.<java.util.GregorianCalendar: void set(int,int)>(0, i3);
        virtualinvoke r2.<java.util.GregorianCalendar: void set(int,int)>(1, i0);
        virtualinvoke r2.<java.util.GregorianCalendar: void set(int,int)>(3, 1);
        $i5 = virtualinvoke r0.<java.util.GregorianCalendar: int getFirstDayOfWeek()>();
        virtualinvoke r2.<java.util.GregorianCalendar: void set(int,int)>(7, $i5);
        $i6 = virtualinvoke r0.<java.util.GregorianCalendar: int getFirstDayOfWeek()>();
        i4 = i2 - $i6;
        if i4 >= 0 goto label2;

        i4 = i4 + 7;

     label2:
        $i7 = i1 - 1;
        $i8 = 7 * $i7;
        i9 = i4 + $i8;
        if i9 == 0 goto label3;

        virtualinvoke r2.<java.util.GregorianCalendar: void add(int,int)>(6, i9);
        goto label4;

     label3:
        virtualinvoke r2.<java.util.GregorianCalendar: void complete()>();

     label4:
        $z0 = virtualinvoke r0.<java.util.GregorianCalendar: boolean isLenient()>();
        if $z0 != 0 goto label6;

        $i10 = virtualinvoke r2.<java.util.GregorianCalendar: int getWeekYear()>();
        if $i10 != i0 goto label5;

        $i11 = virtualinvoke r2.<java.util.GregorianCalendar: int internalGet(int)>(3);
        if $i11 != i1 goto label5;

        $i12 = virtualinvoke r2.<java.util.GregorianCalendar: int internalGet(int)>(7);
        if $i12 == i2 goto label6;

     label5:
        $r9 = new java.lang.IllegalArgumentException;
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r9;

     label6:
        $i13 = virtualinvoke r2.<java.util.GregorianCalendar: int internalGet(int)>(0);
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(0, $i13);
        $i14 = virtualinvoke r2.<java.util.GregorianCalendar: int internalGet(int)>(1);
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(1, $i14);
        $i15 = virtualinvoke r2.<java.util.GregorianCalendar: int internalGet(int)>(2);
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(2, $i15);
        $i16 = virtualinvoke r2.<java.util.GregorianCalendar: int internalGet(int)>(5);
        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(5, $i16);
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(3, i1);
        virtualinvoke r0.<java.util.GregorianCalendar: void complete()>();
        return;
    }

    public int getWeeksInWeekYear()
    {
        java.util.GregorianCalendar r0, r1;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r2;

        r0 := @this: java.util.GregorianCalendar;
        r1 = specialinvoke r0.<java.util.GregorianCalendar: java.util.GregorianCalendar getNormalizedCalendar()>();
        i0 = virtualinvoke r1.<java.util.GregorianCalendar: int getWeekYear()>();
        $i1 = virtualinvoke r1.<java.util.GregorianCalendar: int internalGet(int)>(1);
        if i0 != $i1 goto label0;

        $i2 = virtualinvoke r1.<java.util.GregorianCalendar: int getActualMaximum(int)>(3);
        return $i2;

     label0:
        if r1 != r0 goto label1;

        $r2 = virtualinvoke r1.<java.util.GregorianCalendar: java.lang.Object clone()>();
        r1 = (java.util.GregorianCalendar) $r2;

     label1:
        $i3 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(7);
        virtualinvoke r1.<java.util.GregorianCalendar: void setWeekDate(int,int,int)>(i0, 2, $i3);
        $i4 = virtualinvoke r1.<java.util.GregorianCalendar: int getActualMaximum(int)>(3);
        return $i4;
    }

    protected void computeFields()
    {
        java.util.GregorianCalendar r0;
        boolean z0, $z1, $z2;
        int i0, i1, $i2, $i3, $i4;
        sun.util.calendar.BaseCalendar $r1;
        java.lang.AssertionError $r2;

        r0 := @this: java.util.GregorianCalendar;
        z0 = 0;
        $z1 = virtualinvoke r0.<java.util.GregorianCalendar: boolean isPartiallyNormalized()>();
        if $z1 == 0 goto label2;

        i1 = virtualinvoke r0.<java.util.GregorianCalendar: int getSetStateFields()>();
        $i2 = i1 ^ -1;
        i0 = $i2 & 131071;
        if i0 != 0 goto label0;

        $r1 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        if $r1 != null goto label1;

     label0:
        $i3 = i1 & 98304;
        $i4 = specialinvoke r0.<java.util.GregorianCalendar: int computeFields(int,int)>(i0, $i3);
        i1 = i1 | $i4;
        $z2 = <java.util.GregorianCalendar: boolean $assertionsDisabled>;
        if $z2 != 0 goto label1;

        if i1 == 131071 goto label1;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label1:
        goto label3;

     label2:
        i1 = 131071;
        specialinvoke r0.<java.util.GregorianCalendar: int computeFields(int,int)>(i1, 0);

     label3:
        virtualinvoke r0.<java.util.GregorianCalendar: void setFieldsComputed(int)>(i1);
        return;
    }

    private int computeFields(int, int)
    {
        java.util.GregorianCalendar r0;
        int i0, i1, i2, i4, i6, i7, i8, i9, i10, i11, i13, i14, i15, i18, i19, i20, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i36, i37, $i51, $i52, $i53, $i58, $i59, $i60, $i64, $i65, i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, i74, $i75, $i76, $i77, $i78, $i79, $i80, i81, $i84, $i87, $i88, $i89, $i93, i94, $i96, $i97, i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i110, i113, $i114, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i127, $i130, $i133;
        java.util.TimeZone r1, $r54;
        long l3, l12, l16, l17, $l21, $l22, $l30, $l31, $l32, l33, $l34, $l35, $l38, $l40, $l41, $l42, $l43, l44, $l45, $l47, $l49, $l54, $l55, $l57, $l61, $l62, l82, $l83, $l85, $l86, $l90, $l92, $l95, l108, $l109, l111, $l112, $l115, l125, $l126, l128, $l129, $l131;
        byte b5, $b39, $b46, $b48, $b50, $b56, $b63, $b91, $b116, $b132;
        sun.util.calendar.Era r2, $r60;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        sun.util.calendar.BaseCalendar r3, $r52, $r68, $r70, r75, r78, r81;
        int[] $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r65, $r66;
        sun.util.calendar.ZoneInfo $r6;
        sun.util.calendar.BaseCalendar$Date $r15, $r18, $r19, $r20, $r21, $r28, $r29, $r30, $r31, $r34, $r38, $r39, $r41, $r42, $r46, $r49, $r57, $r58, $r61, $r62, $r63, $r64, $r67, $r69, $r72, $r73, $r74, $r79;
        java.lang.AssertionError $r16, $r22, $r43;
        sun.util.calendar.Gregorian $r17, $r27, $r37, $r40, $r71, r77;
        java.lang.StringBuilder $r23, $r24, $r25, $r26, $r32, $r33, $r35, $r44, $r45, $r47, $r48, $r50;
        java.lang.String $r36, $r51;
        sun.util.calendar.JulianCalendar $r53, $r56, $r76;
        sun.util.calendar.JulianCalendar$Date $r55;
        sun.util.calendar.Era[] $r59;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 = 0;
        r1 = virtualinvoke r0.<java.util.GregorianCalendar: java.util.TimeZone getZone()>();
        $r4 = r0.<java.util.GregorianCalendar: int[] zoneOffsets>;
        if $r4 != null goto label0;

        $r5 = newarray (int)[2];
        r0.<java.util.GregorianCalendar: int[] zoneOffsets> = $r5;

     label0:
        if i1 == 98304 goto label2;

        $z1 = r1 instanceof sun.util.calendar.ZoneInfo;
        if $z1 == 0 goto label1;

        $r6 = (sun.util.calendar.ZoneInfo) r1;
        $l21 = r0.<java.util.GregorianCalendar: long time>;
        $r7 = r0.<java.util.GregorianCalendar: int[] zoneOffsets>;
        i2 = virtualinvoke $r6.<sun.util.calendar.ZoneInfo: int getOffsets(long,int[])>($l21, $r7);
        goto label2;

     label1:
        $l22 = r0.<java.util.GregorianCalendar: long time>;
        i2 = virtualinvoke r1.<java.util.TimeZone: int getOffset(long)>($l22);
        $r8 = r0.<java.util.GregorianCalendar: int[] zoneOffsets>;
        $i23 = virtualinvoke r1.<java.util.TimeZone: int getRawOffset()>();
        $r8[0] = $i23;
        $r9 = r0.<java.util.GregorianCalendar: int[] zoneOffsets>;
        $r10 = r0.<java.util.GregorianCalendar: int[] zoneOffsets>;
        $i24 = $r10[0];
        $i25 = i2 - $i24;
        $r9[1] = $i25;

     label2:
        if i1 == 0 goto label5;

        $z2 = staticinvoke <java.util.GregorianCalendar: boolean isFieldSet(int,int)>(i1, 15);
        if $z2 == 0 goto label3;

        $r11 = r0.<java.util.GregorianCalendar: int[] zoneOffsets>;
        $i26 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(15);
        $r11[0] = $i26;

     label3:
        $z3 = staticinvoke <java.util.GregorianCalendar: boolean isFieldSet(int,int)>(i1, 16);
        if $z3 == 0 goto label4;

        $r12 = r0.<java.util.GregorianCalendar: int[] zoneOffsets>;
        $i27 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(16);
        $r12[1] = $i27;

     label4:
        $r13 = r0.<java.util.GregorianCalendar: int[] zoneOffsets>;
        $i28 = $r13[0];
        $r14 = r0.<java.util.GregorianCalendar: int[] zoneOffsets>;
        $i29 = $r14[1];
        i2 = $i28 + $i29;

     label5:
        $l30 = (long) i2;
        l3 = $l30 / 86400000L;
        i4 = i2 % 86400000;
        $l31 = r0.<java.util.GregorianCalendar: long time>;
        $l32 = $l31 / 86400000L;
        l33 = l3 + $l32;
        $l34 = r0.<java.util.GregorianCalendar: long time>;
        $l35 = $l34 % 86400000L;
        $i36 = (int) $l35;
        i37 = i4 + $i36;
        $l38 = (long) i37;
        $b39 = $l38 cmp 86400000L;
        if $b39 < 0 goto label6;

        $l40 = (long) i37;
        $l41 = $l40 - 86400000L;
        i37 = (int) $l41;
        l33 = l33 + 1L;
        goto label7;

     label6:
        if i37 >= 0 goto label7;

        $l42 = (long) i37;
        $l43 = $l42 + 86400000L;
        i37 = (int) $l43;
        l33 = l33 - 1L;
        goto label6;

     label7:
        l44 = l33 + 719163L;
        b5 = 1;
        $l45 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $b46 = l44 cmp $l45;
        if $b46 < 0 goto label12;

        $z4 = <java.util.GregorianCalendar: boolean $assertionsDisabled>;
        if $z4 != 0 goto label8;

        $l47 = r0.<java.util.GregorianCalendar: long cachedFixedDate>;
        $b48 = $l47 cmp -9223372036854775808L;
        if $b48 == 0 goto label8;

        $r15 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        $z5 = virtualinvoke $r15.<sun.util.calendar.BaseCalendar$Date: boolean isNormalized()>();
        if $z5 != 0 goto label8;

        $r16 = new java.lang.AssertionError;
        specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>("cache control: not normalized");
        throw $r16;

     label8:
        $z6 = <java.util.GregorianCalendar: boolean $assertionsDisabled>;
        if $z6 != 0 goto label9;

        $l49 = r0.<java.util.GregorianCalendar: long cachedFixedDate>;
        $b50 = $l49 cmp -9223372036854775808L;
        if $b50 == 0 goto label9;

        $r17 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        $r18 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        $i51 = virtualinvoke $r18.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $r19 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        $i52 = virtualinvoke $r19.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        $r20 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        $i53 = virtualinvoke $r20.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        $r21 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        $l54 = virtualinvoke $r17.<sun.util.calendar.Gregorian: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>($i51, $i52, $i53, $r21);
        $l55 = r0.<java.util.GregorianCalendar: long cachedFixedDate>;
        $b56 = $l54 cmp $l55;
        if $b56 == 0 goto label9;

        $r22 = new java.lang.AssertionError;
        $r23 = new java.lang.StringBuilder;
        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cache control: inconsictency, cachedFixedDate=");
        $l57 = r0.<java.util.GregorianCalendar: long cachedFixedDate>;
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l57);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", computed=");
        $r27 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        $r28 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        $i58 = virtualinvoke $r28.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $r29 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        $i59 = virtualinvoke $r29.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        $r30 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        $i60 = virtualinvoke $r30.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        $r31 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        $l61 = virtualinvoke $r27.<sun.util.calendar.Gregorian: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>($i58, $i59, $i60, $r31);
        $r32 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l61);
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", date=");
        $r34 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);
        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>($r36);
        throw $r22;

     label9:
        $l62 = r0.<java.util.GregorianCalendar: long cachedFixedDate>;
        $b63 = l44 cmp $l62;
        if $b63 == 0 goto label10;

        $r37 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        $r38 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        virtualinvoke $r37.<sun.util.calendar.Gregorian: void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate,long)>($r38, l44);
        r0.<java.util.GregorianCalendar: long cachedFixedDate> = l44;

     label10:
        $r39 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        i6 = virtualinvoke $r39.<sun.util.calendar.BaseCalendar$Date: int getYear()>();
        if i6 > 0 goto label11;

        i6 = 1 - i6;
        b5 = 0;

     label11:
        $r40 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys> = $r40;
        $r41 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate> = $r41;
        $z7 = <java.util.GregorianCalendar: boolean $assertionsDisabled>;
        if $z7 != 0 goto label14;

        $r42 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $i64 = virtualinvoke $r42.<sun.util.calendar.BaseCalendar$Date: int getDayOfWeek()>();
        if $i64 > 0 goto label14;

        $r43 = new java.lang.AssertionError;
        $r44 = new java.lang.StringBuilder;
        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();
        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dow=");
        $r46 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $i65 = virtualinvoke $r46.<sun.util.calendar.BaseCalendar$Date: int getDayOfWeek()>();
        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i65);
        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", date=");
        $r49 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49);
        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r43.<java.lang.AssertionError: void <init>(java.lang.Object)>($r51);
        throw $r43;

     label12:
        $r52 = staticinvoke <java.util.GregorianCalendar: sun.util.calendar.BaseCalendar getJulianCalendarSystem()>();
        r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys> = $r52;
        $r53 = <java.util.GregorianCalendar: sun.util.calendar.JulianCalendar jcal>;
        $r54 = virtualinvoke r0.<java.util.GregorianCalendar: java.util.TimeZone getZone()>();
        $r55 = virtualinvoke $r53.<sun.util.calendar.JulianCalendar: sun.util.calendar.JulianCalendar$Date newCalendarDate(java.util.TimeZone)>($r54);
        r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate> = $r55;
        $r56 = <java.util.GregorianCalendar: sun.util.calendar.JulianCalendar jcal>;
        $r57 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        virtualinvoke $r56.<sun.util.calendar.JulianCalendar: void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate,long)>($r57, l44);
        $r58 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        r2 = virtualinvoke $r58.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.Era getEra()>();
        $r59 = <java.util.GregorianCalendar: sun.util.calendar.Era[] jeras>;
        $r60 = $r59[0];
        if r2 != $r60 goto label13;

        b5 = 0;

     label13:
        $r61 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        i6 = virtualinvoke $r61.<sun.util.calendar.BaseCalendar$Date: int getYear()>();

     label14:
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(0, b5);
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(1, i6);
        i66 = i0 | 3;
        $r62 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $i67 = virtualinvoke $r62.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        i7 = $i67 - 1;
        $r63 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        i8 = virtualinvoke $r63.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        $i68 = i0 & 164;
        if $i68 == 0 goto label15;

        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(2, i7);
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(5, i8);
        $r64 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $i69 = virtualinvoke $r64.<sun.util.calendar.BaseCalendar$Date: int getDayOfWeek()>();
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(7, $i69);
        i66 = i66 | 164;

     label15:
        $i70 = i0 & 32256;
        if $i70 == 0 goto label18;

        if i37 == 0 goto label16;

        i9 = i37 / 3600000;
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(11, i9);
        $i71 = i9 / 12;
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(9, $i71);
        $i72 = i9 % 12;
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(10, $i72);
        i10 = i37 % 3600000;
        $i73 = i10 / 60000;
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(12, $i73);
        i74 = i10 % 60000;
        $i75 = i74 / 1000;
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(13, $i75);
        $i76 = i74 % 1000;
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(14, $i76);
        goto label17;

     label16:
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(11, 0);
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(9, 0);
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(10, 0);
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(12, 0);
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(13, 0);
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(14, 0);

     label17:
        i66 = i66 | 32256;

     label18:
        $i77 = i0 & 98304;
        if $i77 == 0 goto label19;

        $r65 = r0.<java.util.GregorianCalendar: int[] zoneOffsets>;
        $i78 = $r65[0];
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(15, $i78);
        $r66 = r0.<java.util.GregorianCalendar: int[] zoneOffsets>;
        $i79 = $r66[1];
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(16, $i79);
        i66 = i66 | 98304;

     label19:
        $i80 = i0 & 344;
        if $i80 == 0 goto label40;

        $r67 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        i81 = virtualinvoke $r67.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $r68 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        $r69 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        l82 = virtualinvoke $r68.<sun.util.calendar.BaseCalendar: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>(i81, 1, 1, $r69);
        $l83 = l44 - l82;
        $i84 = (int) $l83;
        i11 = $i84 + 1;
        $l85 = (long) i8;
        $l86 = l44 - $l85;
        l12 = $l86 + 1L;
        z0 = 0;
        $r70 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        $r71 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        if $r70 != $r71 goto label20;

        $i87 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        goto label21;

     label20:
        $i87 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;

     label21:
        i13 = $i87;
        i14 = i8 - 1;
        if i81 != i13 goto label23;

        $i88 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        $i89 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if $i88 > $i89 goto label22;

        $r72 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        l82 = specialinvoke r0.<java.util.GregorianCalendar: long getFixedDateJan1(sun.util.calendar.BaseCalendar$Date,long)>($r72, l44);
        $l90 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $b91 = l44 cmp $l90;
        if $b91 < 0 goto label22;

        $r73 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        l12 = specialinvoke r0.<java.util.GregorianCalendar: long getFixedDateMonth1(sun.util.calendar.BaseCalendar$Date,long)>($r73, l44);

     label22:
        $l92 = l44 - l82;
        $i93 = (int) $l92;
        i15 = $i93 + 1;
        i94 = i11 - i15;
        i11 = i15;
        $l95 = l44 - l12;
        i14 = (int) $l95;

     label23:
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(6, i11);
        $i96 = i14 / 7;
        $i97 = $i96 + 1;
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(8, $i97);
        i98 = specialinvoke r0.<java.util.GregorianCalendar: int getWeekNumber(long,long)>(l82, l44);
        if i98 != 0 goto label29;

        l16 = l82 - 1L;
        l17 = l82 - 365L;
        $i99 = i13 + 1;
        if i81 <= $i99 goto label24;

        $i100 = i81 - 1;
        $z8 = staticinvoke <sun.util.calendar.CalendarUtils: boolean isGregorianLeapYear(int)>($i100);
        if $z8 == 0 goto label28;

        l17 = l17 - 1L;
        goto label28;

     label24:
        $i101 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if i81 > $i101 goto label25;

        $i102 = i81 - 1;
        $z9 = staticinvoke <sun.util.calendar.CalendarUtils: boolean isJulianLeapYear(int)>($i102);
        if $z9 == 0 goto label28;

        l17 = l17 - 1L;
        goto label28;

     label25:
        r3 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        $r74 = specialinvoke r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date getCalendarDate(long)>(l16);
        i18 = virtualinvoke $r74.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $i103 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if i18 != $i103 goto label27;

        r75 = specialinvoke r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar getCutoverCalendarSystem()>();
        $r76 = <java.util.GregorianCalendar: sun.util.calendar.JulianCalendar jcal>;
        if r75 != $r76 goto label26;

        l17 = virtualinvoke r75.<sun.util.calendar.BaseCalendar: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>(i18, 1, 1, null);
        goto label28;

     label26:
        l17 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        r77 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        goto label28;

     label27:
        $i104 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if i18 > $i104 goto label28;

        r78 = staticinvoke <java.util.GregorianCalendar: sun.util.calendar.BaseCalendar getJulianCalendarSystem()>();
        l17 = virtualinvoke r78.<sun.util.calendar.BaseCalendar: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>(i18, 1, 1, null);

     label28:
        i98 = specialinvoke r0.<java.util.GregorianCalendar: int getWeekNumber(long,long)>(l17, l16);
        goto label39;

     label29:
        $i105 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if i81 > $i105 goto label30;

        $i106 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        $i107 = $i106 - 1;
        if i81 >= $i107 goto label33;

     label30:
        if i98 < 52 goto label39;

        l108 = l82 + 365L;
        $r79 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $z10 = virtualinvoke $r79.<sun.util.calendar.BaseCalendar$Date: boolean isLeapYear()>();
        if $z10 == 0 goto label31;

        l108 = l108 + 1L;

     label31:
        $l109 = l108 + 6L;
        $i110 = virtualinvoke r0.<java.util.GregorianCalendar: int getFirstDayOfWeek()>();
        l111 = staticinvoke <sun.util.calendar.BaseCalendar: long getDayOfWeekDateOnOrBefore(long,int)>($l109, $i110);
        $l112 = l111 - l108;
        i113 = (int) $l112;
        $i114 = virtualinvoke r0.<java.util.GregorianCalendar: int getMinimalDaysInFirstWeek()>();
        if i113 < $i114 goto label32;

        $l115 = l111 - 7L;
        $b116 = l44 cmp $l115;
        if $b116 < 0 goto label32;

        i98 = 1;

     label32:
        goto label39;

     label33:
        r81 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        i19 = i81 + 1;
        $i117 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        $i118 = $i117 + 1;
        if i19 != $i118 goto label34;

        $i119 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if i19 >= $i119 goto label34;

        i19 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;

     label34:
        $i120 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if i19 != $i120 goto label35;

        r81 = specialinvoke r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar getCutoverCalendarSystem()>();

     label35:
        $i121 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if i19 > $i121 goto label36;

        $i122 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        $i123 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if $i122 == $i123 goto label36;

        $i124 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if i19 != $i124 goto label37;

     label36:
        l125 = virtualinvoke r81.<sun.util.calendar.BaseCalendar: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>(i19, 1, 1, null);
        goto label38;

     label37:
        l125 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        r81 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;

     label38:
        $l126 = l125 + 6L;
        $i127 = virtualinvoke r0.<java.util.GregorianCalendar: int getFirstDayOfWeek()>();
        l128 = staticinvoke <sun.util.calendar.BaseCalendar: long getDayOfWeekDateOnOrBefore(long,int)>($l126, $i127);
        $l129 = l128 - l125;
        i20 = (int) $l129;
        $i130 = virtualinvoke r0.<java.util.GregorianCalendar: int getMinimalDaysInFirstWeek()>();
        if i20 < $i130 goto label39;

        $l131 = l128 - 7L;
        $b132 = l44 cmp $l131;
        if $b132 < 0 goto label39;

        i98 = 1;

     label39:
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(3, i98);
        $i133 = specialinvoke r0.<java.util.GregorianCalendar: int getWeekNumber(long,long)>(l12, l44);
        virtualinvoke r0.<java.util.GregorianCalendar: void internalSet(int,int)>(4, $i133);
        i66 = i66 | 344;

     label40:
        return i66;
    }

    private final int getWeekNumber(long, long)
    {
        java.util.GregorianCalendar r0;
        long l0, l1, l2, $l5, $l7, $l9;
        sun.util.calendar.Gregorian $r1;
        int i3, i4, $i6, $i8, $i10, $i11, $i12, $i13;
        boolean $z0;
        java.lang.AssertionError $r2;

        r0 := @this: java.util.GregorianCalendar;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        $r1 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        $l5 = l0 + 6L;
        $i6 = virtualinvoke r0.<java.util.GregorianCalendar: int getFirstDayOfWeek()>();
        l2 = staticinvoke <sun.util.calendar.Gregorian: long getDayOfWeekDateOnOrBefore(long,int)>($l5, $i6);
        $l7 = l2 - l0;
        i3 = (int) $l7;
        $z0 = <java.util.GregorianCalendar: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i3 <= 7 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $i8 = virtualinvoke r0.<java.util.GregorianCalendar: int getMinimalDaysInFirstWeek()>();
        if i3 < $i8 goto label1;

        l2 = l2 - 7L;

     label1:
        $l9 = l1 - l2;
        i4 = (int) $l9;
        if i4 < 0 goto label2;

        $i10 = i4 / 7;
        $i11 = $i10 + 1;
        return $i11;

     label2:
        $i12 = staticinvoke <sun.util.calendar.CalendarUtils: int floorDivide(int,int)>(i4, 7);
        $i13 = $i12 + 1;
        return $i13;
    }

    protected void computeTime()
    {
        java.util.GregorianCalendar r0;
        int i0, i1, i2, i7, i8, i9, $i10, $i11, i12, $i13, i14, $i15, $i18, $i20, $i21, $i24, $i28, $i32, $i37, $i38, $i44, $i45, $i51, $i52, $i53, $i64, $i68, $i69, $i70, $i71, $i72, $i75, $i76, i77, $i78, $i79, $i80, $i81, $i82;
        long l3, l4, l5, l6, $l16, l17, $l19, $l22, l23, $l25, l26, l27, $l29, l30, l31, $l33, l34, l35, $l39, $l40, l42, $l43, $l46, $l47, $l49, $l50, $l54, $l56, $l58, $l60, $l61, l62, $l65, $l66, $l73, l74;
        java.lang.String r1, $r5, $r38, $r42;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        int[] $r2, $r3, $r6, $r18, $r19, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r29, $r33, $r34, $r35;
        java.lang.IllegalArgumentException $r4, $r7, $r16, $r36;
        byte $b36, $b41, $b48, $b55, $b57, $b59;
        sun.util.calendar.Gregorian $r8, $r12, $r14;
        sun.util.calendar.BaseCalendar $r9, $r10, $r11, $r13, $r15;
        java.util.TimeZone r17;
        sun.util.calendar.ZoneInfo $r20;
        java.lang.StringBuilder $r28, $r30, $r31, $r32, $r37, $r39, $r40, $r41;

        r0 := @this: java.util.GregorianCalendar;
        $z0 = virtualinvoke r0.<java.util.GregorianCalendar: boolean isLenient()>();
        if $z0 != 0 goto label4;

        $r2 = r0.<java.util.GregorianCalendar: int[] originalFields>;
        if $r2 != null goto label0;

        $r3 = newarray (int)[17];
        r0.<java.util.GregorianCalendar: int[] originalFields> = $r3;

     label0:
        i0 = 0;

     label1:
        if i0 >= 17 goto label4;

        i1 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(i0);
        $z1 = virtualinvoke r0.<java.util.GregorianCalendar: boolean isExternallySet(int)>(i0);
        if $z1 == 0 goto label3;

        $i10 = virtualinvoke r0.<java.util.GregorianCalendar: int getMinimum(int)>(i0);
        if i1 < $i10 goto label2;

        $i11 = virtualinvoke r0.<java.util.GregorianCalendar: int getMaximum(int)>(i0);
        if i1 <= $i11 goto label3;

     label2:
        $r4 = new java.lang.IllegalArgumentException;
        $r5 = staticinvoke <java.util.GregorianCalendar: java.lang.String getFieldName(int)>(i0);
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label3:
        $r6 = r0.<java.util.GregorianCalendar: int[] originalFields>;
        $r6[i0] = i1;
        i0 = i0 + 1;
        goto label1;

     label4:
        i12 = virtualinvoke r0.<java.util.GregorianCalendar: int selectFields()>();
        $z2 = virtualinvoke r0.<java.util.GregorianCalendar: boolean isSet(int)>(1);
        if $z2 == 0 goto label5;

        $i13 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(1);
        goto label6;

     label5:
        $i13 = 1970;

     label6:
        i14 = $i13;
        i2 = specialinvoke r0.<java.util.GregorianCalendar: int internalGetEra()>();
        if i2 != 0 goto label7;

        i14 = 1 - i14;
        goto label8;

     label7:
        if i2 == 1 goto label8;

        $r7 = new java.lang.IllegalArgumentException;
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid era");
        throw $r7;

     label8:
        if i14 > 0 goto label9;

        $z3 = virtualinvoke r0.<java.util.GregorianCalendar: boolean isSet(int)>(0);
        if $z3 != 0 goto label9;

        i12 = i12 | 1;
        virtualinvoke r0.<java.util.GregorianCalendar: void setFieldsComputed(int)>(1);

     label9:
        l3 = 0L;
        $z4 = staticinvoke <java.util.GregorianCalendar: boolean isFieldSet(int,int)>(i12, 11);
        if $z4 == 0 goto label10;

        $i15 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(11);
        $l16 = (long) $i15;
        l17 = l3 + $l16;
        goto label11;

     label10:
        $i18 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(10);
        $l19 = (long) $i18;
        l17 = l3 + $l19;
        $z5 = staticinvoke <java.util.GregorianCalendar: boolean isFieldSet(int,int)>(i12, 9);
        if $z5 == 0 goto label11;

        $i20 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(9);
        $i21 = 12 * $i20;
        $l22 = (long) $i21;
        l17 = l17 + $l22;

     label11:
        l23 = l17 * 60L;
        $i24 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(12);
        $l25 = (long) $i24;
        l26 = l23 + $l25;
        l27 = l26 * 60L;
        $i28 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(13);
        $l29 = (long) $i28;
        l30 = l27 + $l29;
        l31 = l30 * 1000L;
        $i32 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(14);
        $l33 = (long) $i32;
        l34 = l31 + $l33;
        l4 = l34 / 86400000L;
        l35 = l34 % 86400000L;

     label12:
        $b36 = l35 cmp 0L;
        if $b36 >= 0 goto label13;

        l35 = l35 + 86400000L;
        l4 = l4 - 1L;
        goto label12;

     label13:
        $i37 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if i14 <= $i37 goto label15;

        $i38 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if i14 <= $i38 goto label15;

        $r8 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        $l39 = specialinvoke r0.<java.util.GregorianCalendar: long getFixedDate(sun.util.calendar.BaseCalendar,int,int)>($r8, i14, i12);
        l5 = l4 + $l39;
        $l40 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $b41 = l5 cmp $l40;
        if $b41 < 0 goto label14;

        l42 = l5;
        goto label28;

     label14:
        $r9 = staticinvoke <java.util.GregorianCalendar: sun.util.calendar.BaseCalendar getJulianCalendarSystem()>();
        $l43 = specialinvoke r0.<java.util.GregorianCalendar: long getFixedDate(sun.util.calendar.BaseCalendar,int,int)>($r9, i14, i12);
        l6 = l4 + $l43;
        goto label18;

     label15:
        $i44 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if i14 >= $i44 goto label17;

        $i45 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if i14 >= $i45 goto label17;

        $r10 = staticinvoke <java.util.GregorianCalendar: sun.util.calendar.BaseCalendar getJulianCalendarSystem()>();
        $l46 = specialinvoke r0.<java.util.GregorianCalendar: long getFixedDate(sun.util.calendar.BaseCalendar,int,int)>($r10, i14, i12);
        l6 = l4 + $l46;
        $l47 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $b48 = l6 cmp $l47;
        if $b48 >= 0 goto label16;

        l42 = l6;
        goto label28;

     label16:
        l5 = l6;
        goto label18;

     label17:
        $r11 = staticinvoke <java.util.GregorianCalendar: sun.util.calendar.BaseCalendar getJulianCalendarSystem()>();
        $l49 = specialinvoke r0.<java.util.GregorianCalendar: long getFixedDate(sun.util.calendar.BaseCalendar,int,int)>($r11, i14, i12);
        l6 = l4 + $l49;
        $r12 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        $l50 = specialinvoke r0.<java.util.GregorianCalendar: long getFixedDate(sun.util.calendar.BaseCalendar,int,int)>($r12, i14, i12);
        l5 = l4 + $l50;

     label18:
        $z6 = staticinvoke <java.util.GregorianCalendar: boolean isFieldSet(int,int)>(i12, 6);
        if $z6 != 0 goto label19;

        $z7 = staticinvoke <java.util.GregorianCalendar: boolean isFieldSet(int,int)>(i12, 3);
        if $z7 == 0 goto label21;

     label19:
        $i51 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        $i52 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if $i51 != $i52 goto label20;

        l42 = l6;
        goto label28;

     label20:
        $i53 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if i14 != $i53 goto label21;

        l42 = l5;
        goto label28;

     label21:
        $l54 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $b55 = l5 cmp $l54;
        if $b55 < 0 goto label25;

        $l56 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $b57 = l6 cmp $l56;
        if $b57 < 0 goto label22;

        l42 = l5;
        goto label28;

     label22:
        $r13 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        $r14 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        if $r13 == $r14 goto label23;

        $r15 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        if $r15 != null goto label24;

     label23:
        l42 = l5;
        goto label28;

     label24:
        l42 = l6;
        goto label28;

     label25:
        $l58 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $b59 = l6 cmp $l58;
        if $b59 >= 0 goto label26;

        l42 = l6;
        goto label28;

     label26:
        $z8 = virtualinvoke r0.<java.util.GregorianCalendar: boolean isLenient()>();
        if $z8 != 0 goto label27;

        $r16 = new java.lang.IllegalArgumentException;
        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("the specified date doesn\'t exist");
        throw $r16;

     label27:
        l42 = l6;

     label28:
        $l60 = l42 - 719163L;
        $l61 = $l60 * 86400000L;
        l62 = $l61 + l35;
        r17 = virtualinvoke r0.<java.util.GregorianCalendar: java.util.TimeZone getZone()>();
        $r18 = r0.<java.util.GregorianCalendar: int[] zoneOffsets>;
        if $r18 != null goto label29;

        $r19 = newarray (int)[2];
        r0.<java.util.GregorianCalendar: int[] zoneOffsets> = $r19;

     label29:
        i7 = i12 & 98304;
        if i7 == 98304 goto label33;

        $z9 = r17 instanceof sun.util.calendar.ZoneInfo;
        if $z9 == 0 goto label30;

        $r20 = (sun.util.calendar.ZoneInfo) r17;
        $r21 = r0.<java.util.GregorianCalendar: int[] zoneOffsets>;
        virtualinvoke $r20.<sun.util.calendar.ZoneInfo: int getOffsetsByWall(long,int[])>(l62, $r21);
        goto label33;

     label30:
        $z10 = staticinvoke <java.util.GregorianCalendar: boolean isFieldSet(int,int)>(i12, 15);
        if $z10 == 0 goto label31;

        $i64 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(15);
        goto label32;

     label31:
        $i64 = virtualinvoke r17.<java.util.TimeZone: int getRawOffset()>();

     label32:
        i8 = $i64;
        $l65 = (long) i8;
        $l66 = l62 - $l65;
        $r22 = r0.<java.util.GregorianCalendar: int[] zoneOffsets>;
        virtualinvoke r17.<java.util.TimeZone: int getOffsets(long,int[])>($l66, $r22);

     label33:
        if i7 == 0 goto label35;

        $z11 = staticinvoke <java.util.GregorianCalendar: boolean isFieldSet(int,int)>(i7, 15);
        if $z11 == 0 goto label34;

        $r23 = r0.<java.util.GregorianCalendar: int[] zoneOffsets>;
        $i68 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(15);
        $r23[0] = $i68;

     label34:
        $z12 = staticinvoke <java.util.GregorianCalendar: boolean isFieldSet(int,int)>(i7, 16);
        if $z12 == 0 goto label35;

        $r24 = r0.<java.util.GregorianCalendar: int[] zoneOffsets>;
        $i69 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(16);
        $r24[1] = $i69;

     label35:
        $r25 = r0.<java.util.GregorianCalendar: int[] zoneOffsets>;
        $i70 = $r25[0];
        $r26 = r0.<java.util.GregorianCalendar: int[] zoneOffsets>;
        $i71 = $r26[1];
        $i72 = $i70 + $i71;
        $l73 = (long) $i72;
        l74 = l62 - $l73;
        r0.<java.util.GregorianCalendar: long time> = l74;
        $i75 = virtualinvoke r0.<java.util.GregorianCalendar: int getSetStateFields()>();
        $i76 = i12 | $i75;
        i77 = specialinvoke r0.<java.util.GregorianCalendar: int computeFields(int,int)>($i76, i7);
        $z13 = virtualinvoke r0.<java.util.GregorianCalendar: boolean isLenient()>();
        if $z13 != 0 goto label39;

        i9 = 0;

     label36:
        if i9 >= 17 goto label39;

        $z14 = virtualinvoke r0.<java.util.GregorianCalendar: boolean isExternallySet(int)>(i9);
        if $z14 != 0 goto label37;

        goto label38;

     label37:
        $r27 = r0.<java.util.GregorianCalendar: int[] originalFields>;
        $i78 = $r27[i9];
        $i79 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(i9);
        if $i78 == $i79 goto label38;

        $r28 = new java.lang.StringBuilder;
        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();
        $r29 = r0.<java.util.GregorianCalendar: int[] originalFields>;
        $i80 = $r29[i9];
        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i80);
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");
        $i81 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(i9);
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i81);
        r1 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();
        $r33 = r0.<java.util.GregorianCalendar: int[] originalFields>;
        $r34 = r0.<java.util.GregorianCalendar: int[] fields>;
        $r35 = r0.<java.util.GregorianCalendar: int[] fields>;
        $i82 = lengthof $r35;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r33, 0, $r34, 0, $i82);
        $r36 = new java.lang.IllegalArgumentException;
        $r37 = new java.lang.StringBuilder;
        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();
        $r38 = staticinvoke <java.util.GregorianCalendar: java.lang.String getFieldName(int)>(i9);
        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);
        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");
        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r42);
        throw $r36;

     label38:
        i9 = i9 + 1;
        goto label36;

     label39:
        virtualinvoke r0.<java.util.GregorianCalendar: void setFieldsNormalized(int)>(i77);
        return;
    }

    private long getFixedDate(sun.util.calendar.BaseCalendar, int, int)
    {
        java.util.GregorianCalendar r0;
        sun.util.calendar.BaseCalendar r1;
        int i0, i1, i2, i4, i5, $i6, $i7, $i8, $i9, $i12, $i16, $i18, $i22, $i23, $i24, $i25, i27, $i28, $i32, $i33, $i34, $i38, $i41, $i42, $i43, $i47, $i50, i53, $i54, $i56;
        int[] r2;
        sun.util.calendar.Gregorian $r3, $r10;
        long l3, l11, $l13, l14, $l15, $l17, $l19, $l21, $l26, $l29, $l30, $l31, $l35, $l36, $l37, $l39, $l44, l45, $l46, l48, $l49, $l51, $l55, $l57, $l58, $l59;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        byte $b10, $b20, $b40, $b52;
        sun.util.calendar.BaseCalendar$Date $r5;

        r0 := @this: java.util.GregorianCalendar;
        r1 := @parameter0: sun.util.calendar.BaseCalendar;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = 0;
        $z0 = staticinvoke <java.util.GregorianCalendar: boolean isFieldSet(int,int)>(i1, 2);
        if $z0 == 0 goto label1;

        i2 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(2);
        if i2 <= 11 goto label0;

        $i6 = i2 / 12;
        i0 = i0 + $i6;
        i2 = i2 % 12;
        goto label1;

     label0:
        if i2 >= 0 goto label1;

        r2 = newarray (int)[1];
        $i7 = staticinvoke <sun.util.calendar.CalendarUtils: int floorDivide(int,int,int[])>(i2, 12, r2);
        i0 = i0 + $i7;
        i2 = r2[0];

     label1:
        $i8 = i0;
        $i9 = i2 + 1;
        $b10 = 1;
        $r3 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        if r1 != $r3 goto label2;

        $r5 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        goto label3;

     label2:
        $r5 = null;

     label3:
        l11 = virtualinvoke r1.<sun.util.calendar.BaseCalendar: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>($i8, $i9, $b10, $r5);
        $z1 = staticinvoke <java.util.GregorianCalendar: boolean isFieldSet(int,int)>(i1, 2);
        if $z1 == 0 goto label14;

        $z2 = staticinvoke <java.util.GregorianCalendar: boolean isFieldSet(int,int)>(i1, 5);
        if $z2 == 0 goto label4;

        $z3 = virtualinvoke r0.<java.util.GregorianCalendar: boolean isSet(int)>(5);
        if $z3 == 0 goto label19;

        $i12 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(5);
        $l13 = (long) $i12;
        l14 = l11 + $l13;
        l11 = l14 - 1L;
        goto label19;

     label4:
        $z4 = staticinvoke <java.util.GregorianCalendar: boolean isFieldSet(int,int)>(i1, 4);
        if $z4 == 0 goto label7;

        $l15 = l11 + 6L;
        $i16 = virtualinvoke r0.<java.util.GregorianCalendar: int getFirstDayOfWeek()>();
        l3 = staticinvoke <sun.util.calendar.BaseCalendar: long getDayOfWeekDateOnOrBefore(long,int)>($l15, $i16);
        $l17 = l3 - l11;
        $i18 = virtualinvoke r0.<java.util.GregorianCalendar: int getMinimalDaysInFirstWeek()>();
        $l19 = (long) $i18;
        $b20 = $l17 cmp $l19;
        if $b20 < 0 goto label5;

        l3 = l3 - 7L;

     label5:
        $z5 = staticinvoke <java.util.GregorianCalendar: boolean isFieldSet(int,int)>(i1, 7);
        if $z5 == 0 goto label6;

        $l21 = l3 + 6L;
        $i22 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(7);
        l3 = staticinvoke <sun.util.calendar.BaseCalendar: long getDayOfWeekDateOnOrBefore(long,int)>($l21, $i22);

     label6:
        $i23 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(4);
        $i24 = $i23 - 1;
        $i25 = 7 * $i24;
        $l26 = (long) $i25;
        l11 = l3 + $l26;
        goto label19;

     label7:
        $z6 = staticinvoke <java.util.GregorianCalendar: boolean isFieldSet(int,int)>(i1, 7);
        if $z6 == 0 goto label8;

        i27 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(7);
        goto label9;

     label8:
        i27 = virtualinvoke r0.<java.util.GregorianCalendar: int getFirstDayOfWeek()>();

     label9:
        $z7 = staticinvoke <java.util.GregorianCalendar: boolean isFieldSet(int,int)>(i1, 8);
        if $z7 == 0 goto label10;

        i4 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(8);
        goto label11;

     label10:
        i4 = 1;

     label11:
        if i4 < 0 goto label12;

        $i28 = 7 * i4;
        $l29 = (long) $i28;
        $l30 = l11 + $l29;
        $l31 = $l30 - 1L;
        l11 = staticinvoke <sun.util.calendar.BaseCalendar: long getDayOfWeekDateOnOrBefore(long,int)>($l31, i27);
        goto label13;

     label12:
        $i32 = specialinvoke r0.<java.util.GregorianCalendar: int monthLength(int,int)>(i2, i0);
        $i33 = i4 + 1;
        $i34 = 7 * $i33;
        i5 = $i32 + $i34;
        $l35 = (long) i5;
        $l36 = l11 + $l35;
        $l37 = $l36 - 1L;
        l11 = staticinvoke <sun.util.calendar.BaseCalendar: long getDayOfWeekDateOnOrBefore(long,int)>($l37, i27);

     label13:
        goto label19;

     label14:
        $i38 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if i0 != $i38 goto label15;

        $r10 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        if r1 != $r10 goto label15;

        $l39 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $b40 = l11 cmp $l39;
        if $b40 >= 0 goto label15;

        $i41 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        $i42 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if $i41 == $i42 goto label15;

        l11 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;

     label15:
        $z8 = staticinvoke <java.util.GregorianCalendar: boolean isFieldSet(int,int)>(i1, 6);
        if $z8 == 0 goto label16;

        $i43 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(6);
        $l44 = (long) $i43;
        l45 = l11 + $l44;
        l11 = l45 - 1L;
        goto label19;

     label16:
        $l46 = l11 + 6L;
        $i47 = virtualinvoke r0.<java.util.GregorianCalendar: int getFirstDayOfWeek()>();
        l48 = staticinvoke <sun.util.calendar.BaseCalendar: long getDayOfWeekDateOnOrBefore(long,int)>($l46, $i47);
        $l49 = l48 - l11;
        $i50 = virtualinvoke r0.<java.util.GregorianCalendar: int getMinimalDaysInFirstWeek()>();
        $l51 = (long) $i50;
        $b52 = $l49 cmp $l51;
        if $b52 < 0 goto label17;

        l48 = l48 - 7L;

     label17:
        $z9 = staticinvoke <java.util.GregorianCalendar: boolean isFieldSet(int,int)>(i1, 7);
        if $z9 == 0 goto label18;

        i53 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(7);
        $i54 = virtualinvoke r0.<java.util.GregorianCalendar: int getFirstDayOfWeek()>();
        if i53 == $i54 goto label18;

        $l55 = l48 + 6L;
        l48 = staticinvoke <sun.util.calendar.BaseCalendar: long getDayOfWeekDateOnOrBefore(long,int)>($l55, i53);

     label18:
        $i56 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(3);
        $l57 = (long) $i56;
        $l58 = $l57 - 1L;
        $l59 = 7L * $l58;
        l11 = l48 + $l59;

     label19:
        return l11;
    }

    private final java.util.GregorianCalendar getNormalizedCalendar()
    {
        java.util.GregorianCalendar r0, r1;
        boolean $z0;
        java.lang.Object $r2;

        r0 := @this: java.util.GregorianCalendar;
        $z0 = virtualinvoke r0.<java.util.GregorianCalendar: boolean isFullyNormalized()>();
        if $z0 == 0 goto label0;

        r1 = r0;
        goto label1;

     label0:
        $r2 = virtualinvoke r0.<java.util.GregorianCalendar: java.lang.Object clone()>();
        r1 = (java.util.GregorianCalendar) $r2;
        virtualinvoke r1.<java.util.GregorianCalendar: void setLenient(boolean)>(1);
        virtualinvoke r1.<java.util.GregorianCalendar: void complete()>();

     label1:
        return r1;
    }

    private static final synchronized sun.util.calendar.BaseCalendar getJulianCalendarSystem()
    {
        sun.util.calendar.JulianCalendar $r0, $r2, $r3, $r5;
        sun.util.calendar.CalendarSystem $r1;
        sun.util.calendar.Era[] $r4;

        $r0 = <java.util.GregorianCalendar: sun.util.calendar.JulianCalendar jcal>;
        if $r0 != null goto label0;

        $r1 = staticinvoke <sun.util.calendar.CalendarSystem: sun.util.calendar.CalendarSystem forName(java.lang.String)>("julian");
        $r2 = (sun.util.calendar.JulianCalendar) $r1;
        <java.util.GregorianCalendar: sun.util.calendar.JulianCalendar jcal> = $r2;
        $r3 = <java.util.GregorianCalendar: sun.util.calendar.JulianCalendar jcal>;
        $r4 = virtualinvoke $r3.<sun.util.calendar.JulianCalendar: sun.util.calendar.Era[] getEras()>();
        <java.util.GregorianCalendar: sun.util.calendar.Era[] jeras> = $r4;

     label0:
        $r5 = <java.util.GregorianCalendar: sun.util.calendar.JulianCalendar jcal>;
        return $r5;
    }

    private sun.util.calendar.BaseCalendar getCutoverCalendarSystem()
    {
        java.util.GregorianCalendar r0;
        int $i0, $i1;
        sun.util.calendar.Gregorian $r1;
        sun.util.calendar.BaseCalendar $r2;

        r0 := @this: java.util.GregorianCalendar;
        $i0 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        $i1 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if $i0 >= $i1 goto label0;

        $r1 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        return $r1;

     label0:
        $r2 = staticinvoke <java.util.GregorianCalendar: sun.util.calendar.BaseCalendar getJulianCalendarSystem()>();
        return $r2;
    }

    private final boolean isCutoverYear(int)
    {
        java.util.GregorianCalendar r0;
        int i0, i1, $i2;
        sun.util.calendar.Gregorian $r1;
        sun.util.calendar.BaseCalendar $r2;
        boolean $z0;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        $r2 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        $r1 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        if $r2 != $r1 goto label0;

        $i2 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        goto label1;

     label0:
        $i2 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;

     label1:
        i1 = $i2;
        if i0 != i1 goto label2;

        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private final long getFixedDateJan1(sun.util.calendar.BaseCalendar$Date, long)
    {
        java.util.GregorianCalendar r0;
        sun.util.calendar.BaseCalendar$Date r1;
        long l0, $l7, $l9, $l11;
        boolean $z0;
        sun.util.calendar.BaseCalendar r2;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i10;
        java.lang.AssertionError $r3;
        byte $b8;

        r0 := @this: java.util.GregorianCalendar;
        r1 := @parameter0: sun.util.calendar.BaseCalendar$Date;
        l0 := @parameter1: long;
        $z0 = <java.util.GregorianCalendar: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $i1 = virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $i2 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if $i1 == $i2 goto label0;

        $i3 = virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $i4 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if $i3 == $i4 goto label0;

        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label0:
        $i5 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        $i6 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if $i5 == $i6 goto label1;

        $l7 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $b8 = l0 cmp $l7;
        if $b8 < 0 goto label1;

        $l9 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        return $l9;

     label1:
        r2 = staticinvoke <java.util.GregorianCalendar: sun.util.calendar.BaseCalendar getJulianCalendarSystem()>();
        $i10 = virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $l11 = virtualinvoke r2.<sun.util.calendar.BaseCalendar: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>($i10, 1, 1, null);
        return $l11;
    }

    private final long getFixedDateMonth1(sun.util.calendar.BaseCalendar$Date, long)
    {
        java.util.GregorianCalendar r0;
        sun.util.calendar.BaseCalendar$Date r1, r2, r3;
        long l0, l1, $l9, $l10, $l11, $l21, $l22;
        boolean $z0;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        java.lang.AssertionError $r4;
        sun.util.calendar.JulianCalendar $r5;

        r0 := @this: java.util.GregorianCalendar;
        r1 := @parameter0: sun.util.calendar.BaseCalendar$Date;
        l0 := @parameter1: long;
        $z0 = <java.util.GregorianCalendar: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $i2 = virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $i3 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if $i2 == $i3 goto label0;

        $i4 = virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $i5 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if $i4 == $i5 goto label0;

        $r4 = new java.lang.AssertionError;
        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();
        throw $r4;

     label0:
        r2 = specialinvoke r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date getGregorianCutoverDate()>();
        $i6 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        if $i6 != 1 goto label1;

        $i7 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        if $i7 != 1 goto label1;

        $i8 = virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        $l9 = (long) $i8;
        $l10 = l0 - $l9;
        $l11 = $l10 + 1L;
        return $l11;

     label1:
        $i12 = virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        $i13 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        if $i12 != $i13 goto label4;

        r3 = specialinvoke r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date getLastJulianDate()>();
        $i14 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        $i15 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if $i14 != $i15 goto label2;

        $i16 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        $i17 = virtualinvoke r3.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        if $i16 != $i17 goto label2;

        $r5 = <java.util.GregorianCalendar: sun.util.calendar.JulianCalendar jcal>;
        $i18 = virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $i19 = virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        l1 = virtualinvoke $r5.<sun.util.calendar.JulianCalendar: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>($i18, $i19, 1, null);
        goto label3;

     label2:
        l1 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;

     label3:
        goto label5;

     label4:
        $i20 = virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        $l21 = (long) $i20;
        $l22 = l0 - $l21;
        l1 = $l22 + 1L;

     label5:
        return l1;
    }

    private final sun.util.calendar.BaseCalendar$Date getCalendarDate(long)
    {
        java.util.GregorianCalendar r0;
        long l0, $l1;
        sun.util.calendar.BaseCalendar r1, $r4;
        java.util.TimeZone $r2;
        sun.util.calendar.BaseCalendar$Date r3;
        byte $b2;
        sun.util.calendar.CalendarDate $r5;

        r0 := @this: java.util.GregorianCalendar;
        l0 := @parameter0: long;
        $l1 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $b2 = l0 cmp $l1;
        if $b2 < 0 goto label0;

        $r4 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        goto label1;

     label0:
        $r4 = staticinvoke <java.util.GregorianCalendar: sun.util.calendar.BaseCalendar getJulianCalendarSystem()>();

     label1:
        r1 = $r4;
        $r2 = <java.util.TimeZone: java.util.TimeZone NO_TIMEZONE>;
        $r5 = virtualinvoke r1.<sun.util.calendar.BaseCalendar: sun.util.calendar.CalendarDate newCalendarDate(java.util.TimeZone)>($r2);
        r3 = (sun.util.calendar.BaseCalendar$Date) $r5;
        virtualinvoke r1.<sun.util.calendar.BaseCalendar: void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate,long)>(r3, l0);
        return r3;
    }

    private final sun.util.calendar.BaseCalendar$Date getGregorianCutoverDate()
    {
        java.util.GregorianCalendar r0;
        long $l0;
        sun.util.calendar.BaseCalendar$Date $r1;

        r0 := @this: java.util.GregorianCalendar;
        $l0 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $r1 = specialinvoke r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date getCalendarDate(long)>($l0);
        return $r1;
    }

    private final sun.util.calendar.BaseCalendar$Date getLastJulianDate()
    {
        java.util.GregorianCalendar r0;
        long $l0, $l1;
        sun.util.calendar.BaseCalendar$Date $r1;

        r0 := @this: java.util.GregorianCalendar;
        $l0 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $l1 = $l0 - 1L;
        $r1 = specialinvoke r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date getCalendarDate(long)>($l1);
        return $r1;
    }

    private final int monthLength(int, int)
    {
        java.util.GregorianCalendar r0;
        int i0, i1, $i2;
        boolean $z0;
        int[] $r1, $r2;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $z0 = virtualinvoke r0.<java.util.GregorianCalendar: boolean isLeapYear(int)>(i1);
        if $z0 == 0 goto label0;

        $r1 = <java.util.GregorianCalendar: int[] LEAP_MONTH_LENGTH>;
        $i2 = $r1[i0];
        goto label1;

     label0:
        $r2 = <java.util.GregorianCalendar: int[] MONTH_LENGTH>;
        $i2 = $r2[i0];

     label1:
        return $i2;
    }

    private final int monthLength(int)
    {
        java.util.GregorianCalendar r0;
        int i0, i1, $i2, $i3;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        i1 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(1);
        $i2 = specialinvoke r0.<java.util.GregorianCalendar: int internalGetEra()>();
        if $i2 != 0 goto label0;

        i1 = 1 - i1;

     label0:
        $i3 = specialinvoke r0.<java.util.GregorianCalendar: int monthLength(int,int)>(i0, i1);
        return $i3;
    }

    private final int actualMonthLength()
    {
        java.util.GregorianCalendar r0;
        int i0, $i4, $i5, $i6, $i7, $i12, $i15;
        sun.util.calendar.BaseCalendar$Date r1, $r2, $r4, $r5, $r9, $r10;
        long l1, l2, l3, $l8, $l9, $l11, l13, $l14;
        sun.util.calendar.BaseCalendar $r3, $r7, $r8;
        java.lang.Object $r6;
        byte $b10;
        sun.util.calendar.Gregorian $r11, $r13;
        java.util.TimeZone $r12;

        r0 := @this: java.util.GregorianCalendar;
        $r2 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        i0 = virtualinvoke $r2.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $i4 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if i0 == $i4 goto label0;

        $i5 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if i0 == $i5 goto label0;

        $r3 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        $r4 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $i6 = virtualinvoke $r3.<sun.util.calendar.BaseCalendar: int getMonthLength(sun.util.calendar.CalendarDate)>($r4);
        return $i6;

     label0:
        $r5 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $r6 = virtualinvoke $r5.<sun.util.calendar.BaseCalendar$Date: java.lang.Object clone()>();
        r1 = (sun.util.calendar.BaseCalendar$Date) $r6;
        $r7 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        l1 = virtualinvoke $r7.<sun.util.calendar.BaseCalendar: long getFixedDate(sun.util.calendar.CalendarDate)>(r1);
        l2 = specialinvoke r0.<java.util.GregorianCalendar: long getFixedDateMonth1(sun.util.calendar.BaseCalendar$Date,long)>(r1, l1);
        $r8 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        $i7 = virtualinvoke $r8.<sun.util.calendar.BaseCalendar: int getMonthLength(sun.util.calendar.CalendarDate)>(r1);
        $l8 = (long) $i7;
        l3 = l2 + $l8;
        $l9 = r0.<java.util.GregorianCalendar: long gregorianCutoverDate>;
        $b10 = l3 cmp $l9;
        if $b10 >= 0 goto label1;

        $l11 = l3 - l2;
        $i12 = (int) $l11;
        return $i12;

     label1:
        $r9 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $r10 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        if $r9 == $r10 goto label2;

        $r11 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        $r12 = <java.util.TimeZone: java.util.TimeZone NO_TIMEZONE>;
        r1 = virtualinvoke $r11.<sun.util.calendar.Gregorian: sun.util.calendar.Gregorian$Date newCalendarDate(java.util.TimeZone)>($r12);

     label2:
        $r13 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        virtualinvoke $r13.<sun.util.calendar.Gregorian: void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate,long)>(r1, l3);
        l13 = specialinvoke r0.<java.util.GregorianCalendar: long getFixedDateMonth1(sun.util.calendar.BaseCalendar$Date,long)>(r1, l3);
        $l14 = l13 - l2;
        $i15 = (int) $l14;
        return $i15;
    }

    private final int yearLength(int)
    {
        java.util.GregorianCalendar r0;
        int i0;
        boolean $z0;
        short $s1;

        r0 := @this: java.util.GregorianCalendar;
        i0 := @parameter0: int;
        $z0 = virtualinvoke r0.<java.util.GregorianCalendar: boolean isLeapYear(int)>(i0);
        if $z0 == 0 goto label0;

        $s1 = 366;
        goto label1;

     label0:
        $s1 = 365;

     label1:
        return $s1;
    }

    private final int yearLength()
    {
        java.util.GregorianCalendar r0;
        int i0, $i1, $i2;

        r0 := @this: java.util.GregorianCalendar;
        i0 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(1);
        $i1 = specialinvoke r0.<java.util.GregorianCalendar: int internalGetEra()>();
        if $i1 != 0 goto label0;

        i0 = 1 - i0;

     label0:
        $i2 = specialinvoke r0.<java.util.GregorianCalendar: int yearLength(int)>(i0);
        return $i2;
    }

    private final void pinDayOfMonth()
    {
        java.util.GregorianCalendar r0, r1;
        int i0, i1, $i2, $i3, $i4, i5;

        r0 := @this: java.util.GregorianCalendar;
        i0 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(1);
        $i2 = r0.<java.util.GregorianCalendar: int gregorianCutoverYear>;
        if i0 > $i2 goto label0;

        $i3 = r0.<java.util.GregorianCalendar: int gregorianCutoverYearJulian>;
        if i0 >= $i3 goto label1;

     label0:
        $i4 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(2);
        i1 = specialinvoke r0.<java.util.GregorianCalendar: int monthLength(int)>($i4);
        goto label2;

     label1:
        r1 = specialinvoke r0.<java.util.GregorianCalendar: java.util.GregorianCalendar getNormalizedCalendar()>();
        i1 = virtualinvoke r1.<java.util.GregorianCalendar: int getActualMaximum(int)>(5);

     label2:
        i5 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(5);
        if i5 <= i1 goto label3;

        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int)>(5, i1);

     label3:
        return;
    }

    private final long getCurrentFixedDate()
    {
        java.util.GregorianCalendar r0;
        sun.util.calendar.Gregorian $r1;
        sun.util.calendar.BaseCalendar $r2, $r3;
        long $l0;
        sun.util.calendar.BaseCalendar$Date $r4;

        r0 := @this: java.util.GregorianCalendar;
        $r2 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        $r1 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        if $r2 != $r1 goto label0;

        $l0 = r0.<java.util.GregorianCalendar: long cachedFixedDate>;
        goto label1;

     label0:
        $r3 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar calsys>;
        $r4 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date cdate>;
        $l0 = virtualinvoke $r3.<sun.util.calendar.BaseCalendar: long getFixedDate(sun.util.calendar.CalendarDate)>($r4);

     label1:
        return $l0;
    }

    private static final int getRolledValue(int, int, int, int)
    {
        int i0, i1, i2, i3, i4, i5, $i6, i7;
        boolean $z0, $z1;
        java.lang.AssertionError $r0, $r1;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        $z0 = <java.util.GregorianCalendar: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        if i0 < i2 goto label0;

        if i0 <= i3 goto label1;

     label0:
        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label1:
        $i6 = i3 - i2;
        i4 = $i6 + 1;
        i7 = i1 % i4;
        i5 = i0 + i7;
        if i5 <= i3 goto label2;

        i5 = i5 - i4;
        goto label3;

     label2:
        if i5 >= i2 goto label3;

        i5 = i5 + i4;

     label3:
        $z1 = <java.util.GregorianCalendar: boolean $assertionsDisabled>;
        if $z1 != 0 goto label5;

        if i5 < i2 goto label4;

        if i5 <= i3 goto label5;

     label4:
        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label5:
        return i5;
    }

    private final int internalGetEra()
    {
        java.util.GregorianCalendar r0;
        boolean $z0;
        int $i0;

        r0 := @this: java.util.GregorianCalendar;
        $z0 = virtualinvoke r0.<java.util.GregorianCalendar: boolean isSet(int)>(0);
        if $z0 == 0 goto label0;

        $i0 = virtualinvoke r0.<java.util.GregorianCalendar: int internalGet(int)>(0);
        goto label1;

     label0:
        $i0 = 1;

     label1:
        return $i0;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.GregorianCalendar r0;
        java.io.ObjectInputStream r1;
        sun.util.calendar.Gregorian $r2;
        sun.util.calendar.BaseCalendar$Date $r3;
        java.util.TimeZone $r4;
        sun.util.calendar.Gregorian$Date $r5;
        long $l0;

        r0 := @this: java.util.GregorianCalendar;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        $r3 = r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate>;
        if $r3 != null goto label0;

        $r2 = <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal>;
        $r4 = virtualinvoke r0.<java.util.GregorianCalendar: java.util.TimeZone getZone()>();
        $r5 = virtualinvoke $r2.<sun.util.calendar.Gregorian: sun.util.calendar.Gregorian$Date newCalendarDate(java.util.TimeZone)>($r4);
        r0.<java.util.GregorianCalendar: sun.util.calendar.BaseCalendar$Date gdate> = $r5;
        r0.<java.util.GregorianCalendar: long cachedFixedDate> = -9223372036854775808L;

     label0:
        $l0 = r0.<java.util.GregorianCalendar: long gregorianCutover>;
        specialinvoke r0.<java.util.GregorianCalendar: void setGregorianChange(long)>($l0);
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        int[] $r1, $r2, $r3, $r4, $r5;
        sun.util.calendar.Gregorian $r6;

        $r0 = class "java/util/GregorianCalendar";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.util.GregorianCalendar: boolean $assertionsDisabled> = $z1;
        $r1 = newarray (int)[12];
        $r1[0] = 31;
        $r1[1] = 28;
        $r1[2] = 31;
        $r1[3] = 30;
        $r1[4] = 31;
        $r1[5] = 30;
        $r1[6] = 31;
        $r1[7] = 31;
        $r1[8] = 30;
        $r1[9] = 31;
        $r1[10] = 30;
        $r1[11] = 31;
        <java.util.GregorianCalendar: int[] MONTH_LENGTH> = $r1;
        $r2 = newarray (int)[12];
        $r2[0] = 31;
        $r2[1] = 29;
        $r2[2] = 31;
        $r2[3] = 30;
        $r2[4] = 31;
        $r2[5] = 30;
        $r2[6] = 31;
        $r2[7] = 31;
        $r2[8] = 30;
        $r2[9] = 31;
        $r2[10] = 30;
        $r2[11] = 31;
        <java.util.GregorianCalendar: int[] LEAP_MONTH_LENGTH> = $r2;
        $r3 = newarray (int)[17];
        $r3[0] = 0;
        $r3[1] = 1;
        $r3[2] = 0;
        $r3[3] = 1;
        $r3[4] = 0;
        $r3[5] = 1;
        $r3[6] = 1;
        $r3[7] = 1;
        $r3[8] = 1;
        $r3[9] = 0;
        $r3[10] = 0;
        $r3[11] = 0;
        $r3[12] = 0;
        $r3[13] = 0;
        $r3[14] = 0;
        $r3[15] = -46800000;
        $r3[16] = 0;
        <java.util.GregorianCalendar: int[] MIN_VALUES> = $r3;
        $r4 = newarray (int)[17];
        $r4[0] = 1;
        $r4[1] = 292269054;
        $r4[2] = 11;
        $r4[3] = 52;
        $r4[4] = 4;
        $r4[5] = 28;
        $r4[6] = 365;
        $r4[7] = 7;
        $r4[8] = 4;
        $r4[9] = 1;
        $r4[10] = 11;
        $r4[11] = 23;
        $r4[12] = 59;
        $r4[13] = 59;
        $r4[14] = 999;
        $r4[15] = 50400000;
        $r4[16] = 1200000;
        <java.util.GregorianCalendar: int[] LEAST_MAX_VALUES> = $r4;
        $r5 = newarray (int)[17];
        $r5[0] = 1;
        $r5[1] = 292278994;
        $r5[2] = 11;
        $r5[3] = 53;
        $r5[4] = 6;
        $r5[5] = 31;
        $r5[6] = 366;
        $r5[7] = 7;
        $r5[8] = 6;
        $r5[9] = 1;
        $r5[10] = 11;
        $r5[11] = 23;
        $r5[12] = 59;
        $r5[13] = 59;
        $r5[14] = 999;
        $r5[15] = 50400000;
        $r5[16] = 7200000;
        <java.util.GregorianCalendar: int[] MAX_VALUES> = $r5;
        $r6 = staticinvoke <sun.util.calendar.CalendarSystem: sun.util.calendar.Gregorian getGregorianCalendar()>();
        <java.util.GregorianCalendar: sun.util.calendar.Gregorian gcal> = $r6;
        return;
    }
}
