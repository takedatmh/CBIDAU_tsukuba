abstract class java.io.FileSystem extends java.lang.Object
{
    public static final int BA_EXISTS;
    public static final int BA_REGULAR;
    public static final int BA_DIRECTORY;
    public static final int BA_HIDDEN;
    public static final int ACCESS_READ;
    public static final int ACCESS_WRITE;
    public static final int ACCESS_EXECUTE;
    public static final int SPACE_TOTAL;
    public static final int SPACE_FREE;
    public static final int SPACE_USABLE;
    static boolean useCanonCaches;
    static boolean useCanonPrefixCache;

    void <init>()
    {
        java.io.FileSystem r0;

        r0 := @this: java.io.FileSystem;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static native java.io.FileSystem getFileSystem();

    public abstract char getSeparator();

    public abstract char getPathSeparator();

    public abstract java.lang.String normalize(java.lang.String);

    public abstract int prefixLength(java.lang.String);

    public abstract java.lang.String resolve(java.lang.String, java.lang.String);

    public abstract java.lang.String getDefaultParent();

    public abstract java.lang.String fromURIPath(java.lang.String);

    public abstract boolean isAbsolute(java.io.File);

    public abstract java.lang.String resolve(java.io.File);

    public abstract java.lang.String canonicalize(java.lang.String) throws java.io.IOException;

    public abstract int getBooleanAttributes(java.io.File);

    public abstract boolean checkAccess(java.io.File, int);

    public abstract boolean setPermission(java.io.File, int, boolean, boolean);

    public abstract long getLastModifiedTime(java.io.File);

    public abstract long getLength(java.io.File);

    public abstract boolean createFileExclusively(java.lang.String) throws java.io.IOException;

    public abstract boolean delete(java.io.File);

    public abstract java.lang.String[] list(java.io.File);

    public abstract boolean createDirectory(java.io.File);

    public abstract boolean rename(java.io.File, java.io.File);

    public abstract boolean setLastModifiedTime(java.io.File, long);

    public abstract boolean setReadOnly(java.io.File);

    public abstract java.io.File[] listRoots();

    public abstract long getSpace(java.io.File, int);

    public abstract int compare(java.io.File, java.io.File);

    public abstract int hashCode(java.io.File);

    private static boolean getBooleanProperty(java.lang.String, boolean)
    {
        java.lang.String r0, r1;
        boolean z0, $z1;

        r0 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0);
        if r1 != null goto label0;

        return z0;

     label0:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");
        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    static void <clinit>()
    {
        boolean $z0, $z1, $z2, $z3;

        <java.io.FileSystem: boolean useCanonCaches> = 1;
        <java.io.FileSystem: boolean useCanonPrefixCache> = 1;
        $z0 = <java.io.FileSystem: boolean useCanonCaches>;
        $z1 = staticinvoke <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)>("sun.io.useCanonCaches", $z0);
        <java.io.FileSystem: boolean useCanonCaches> = $z1;
        $z2 = <java.io.FileSystem: boolean useCanonPrefixCache>;
        $z3 = staticinvoke <java.io.FileSystem: boolean getBooleanProperty(java.lang.String,boolean)>("sun.io.useCanonPrefixCache", $z2);
        <java.io.FileSystem: boolean useCanonPrefixCache> = $z3;
        return;
    }
}
