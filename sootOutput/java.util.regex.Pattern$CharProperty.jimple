abstract class java.util.regex.Pattern$CharProperty extends java.util.regex.Pattern$Node
{

    private void <init>()
    {
        java.util.regex.Pattern$CharProperty r0;

        r0 := @this: java.util.regex.Pattern$CharProperty;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        return;
    }

    abstract boolean isSatisfiedBy(int);

    java.util.regex.Pattern$CharProperty complement()
    {
        java.util.regex.Pattern$CharProperty r0;
        java.util.regex.Pattern$CharProperty$1 $r1;

        r0 := @this: java.util.regex.Pattern$CharProperty;
        $r1 = new java.util.regex.Pattern$CharProperty$1;
        specialinvoke $r1.<java.util.regex.Pattern$CharProperty$1: void <init>(java.util.regex.Pattern$CharProperty)>(r0);
        return $r1;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$CharProperty r0;
        java.util.regex.Matcher r1;
        int i0, i1, $i2, $i3, $i4;
        java.lang.CharSequence r2;
        boolean $z0, $z1, $z2;
        java.util.regex.Pattern$Node $r3;

        r0 := @this: java.util.regex.Pattern$CharProperty;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $i2 = r1.<java.util.regex.Matcher: int 'to'>;
        if i0 >= $i2 goto label2;

        i1 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r2, i0);
        $z0 = virtualinvoke r0.<java.util.regex.Pattern$CharProperty: boolean isSatisfiedBy(int)>(i1);
        if $z0 == 0 goto label0;

        $r3 = r0.<java.util.regex.Pattern$CharProperty: java.util.regex.Pattern$Node next>;
        $i3 = staticinvoke <java.lang.Character: int charCount(int)>(i1);
        $i4 = i0 + $i3;
        $z1 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, $i4, r2);
        if $z1 == 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;

     label2:
        r1.<java.util.regex.Matcher: boolean hitEnd> = 1;
        return 0;
    }

    boolean study(java.util.regex.Pattern$TreeInfo)
    {
        java.util.regex.Pattern$CharProperty r0;
        java.util.regex.Pattern$TreeInfo r1;
        int $i0, $i1, $i2, $i3;
        java.util.regex.Pattern$Node $r4;
        boolean $z0;

        r0 := @this: java.util.regex.Pattern$CharProperty;
        r1 := @parameter0: java.util.regex.Pattern$TreeInfo;
        $i0 = r1.<java.util.regex.Pattern$TreeInfo: int minLength>;
        $i1 = $i0 + 1;
        r1.<java.util.regex.Pattern$TreeInfo: int minLength> = $i1;
        $i2 = r1.<java.util.regex.Pattern$TreeInfo: int maxLength>;
        $i3 = $i2 + 1;
        r1.<java.util.regex.Pattern$TreeInfo: int maxLength> = $i3;
        $r4 = r0.<java.util.regex.Pattern$CharProperty: java.util.regex.Pattern$Node next>;
        $z0 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        return $z0;
    }

    void <init>(java.util.regex.Pattern$1)
    {
        java.util.regex.Pattern$CharProperty r0;
        java.util.regex.Pattern$1 r1;

        r0 := @this: java.util.regex.Pattern$CharProperty;
        r1 := @parameter0: java.util.regex.Pattern$1;
        specialinvoke r0.<java.util.regex.Pattern$CharProperty: void <init>()>();
        return;
    }
}
