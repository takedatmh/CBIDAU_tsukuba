abstract class sun.nio.ch.AsynchronousChannelGroupImpl extends java.nio.channels.AsynchronousChannelGroup implements java.util.concurrent.Executor
{
    private static final int internalThreadCount;
    private final sun.nio.ch.ThreadPool pool;
    private final java.util.concurrent.atomic.AtomicInteger threadCount;
    private java.util.concurrent.ScheduledThreadPoolExecutor timeoutExecutor;
    private final java.util.Queue taskQueue;
    private final java.util.concurrent.atomic.AtomicBoolean shutdown;
    private final java.lang.Object shutdownNowLock;
    private volatile boolean terminateInitiated;

    void <init>(java.nio.channels.spi.AsynchronousChannelProvider, sun.nio.ch.ThreadPool)
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        java.nio.channels.spi.AsynchronousChannelProvider r1;
        sun.nio.ch.ThreadPool r2;
        java.util.concurrent.atomic.AtomicInteger $r3;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        java.lang.Object $r5;
        boolean $z0;
        java.util.concurrent.ConcurrentLinkedQueue $r6;
        java.util.concurrent.ThreadFactory $r7;
        java.util.concurrent.ScheduledExecutorService $r8;
        java.util.concurrent.ScheduledThreadPoolExecutor $r9, $r10;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        r1 := @parameter0: java.nio.channels.spi.AsynchronousChannelProvider;
        r2 := @parameter1: sun.nio.ch.ThreadPool;
        specialinvoke r0.<java.nio.channels.AsynchronousChannelGroup: void <init>(java.nio.channels.spi.AsynchronousChannelProvider)>(r1);
        $r3 = new java.util.concurrent.atomic.AtomicInteger;
        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
        r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.concurrent.atomic.AtomicInteger threadCount> = $r3;
        $r4 = new java.util.concurrent.atomic.AtomicBoolean;
        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
        r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.concurrent.atomic.AtomicBoolean shutdown> = $r4;
        $r5 = new java.lang.Object;
        specialinvoke $r5.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.lang.Object shutdownNowLock> = $r5;
        r0.<sun.nio.ch.AsynchronousChannelGroupImpl: sun.nio.ch.ThreadPool pool> = r2;
        $z0 = virtualinvoke r2.<sun.nio.ch.ThreadPool: boolean isFixedThreadPool()>();
        if $z0 == 0 goto label0;

        $r6 = new java.util.concurrent.ConcurrentLinkedQueue;
        specialinvoke $r6.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();
        r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.Queue taskQueue> = $r6;
        goto label1;

     label0:
        r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.Queue taskQueue> = null;

     label1:
        $r7 = staticinvoke <sun.nio.ch.ThreadPool: java.util.concurrent.ThreadFactory defaultThreadFactory()>();
        $r8 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)>(1, $r7);
        $r9 = (java.util.concurrent.ScheduledThreadPoolExecutor) $r8;
        r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.concurrent.ScheduledThreadPoolExecutor timeoutExecutor> = $r9;
        $r10 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.concurrent.ScheduledThreadPoolExecutor timeoutExecutor>;
        virtualinvoke $r10.<java.util.concurrent.ScheduledThreadPoolExecutor: void setRemoveOnCancelPolicy(boolean)>(1);
        return;
    }

    final java.util.concurrent.ExecutorService executor()
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        sun.nio.ch.ThreadPool $r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        $r1 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: sun.nio.ch.ThreadPool pool>;
        $r2 = virtualinvoke $r1.<sun.nio.ch.ThreadPool: java.util.concurrent.ExecutorService executor()>();
        return $r2;
    }

    final boolean isFixedThreadPool()
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        sun.nio.ch.ThreadPool $r1;
        boolean $z0;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        $r1 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: sun.nio.ch.ThreadPool pool>;
        $z0 = virtualinvoke $r1.<sun.nio.ch.ThreadPool: boolean isFixedThreadPool()>();
        return $z0;
    }

    final int fixedThreadCount()
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        sun.nio.ch.ThreadPool $r1, $r2;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        $z0 = virtualinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: boolean isFixedThreadPool()>();
        if $z0 == 0 goto label0;

        $r1 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: sun.nio.ch.ThreadPool pool>;
        $i1 = virtualinvoke $r1.<sun.nio.ch.ThreadPool: int poolSize()>();
        return $i1;

     label0:
        $r2 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: sun.nio.ch.ThreadPool pool>;
        $i2 = virtualinvoke $r2.<sun.nio.ch.ThreadPool: int poolSize()>();
        $i0 = <sun.nio.ch.AsynchronousChannelGroupImpl: int internalThreadCount>;
        $i3 = $i2 + $i0;
        return $i3;
    }

    private java.lang.Runnable bindToGroup(java.lang.Runnable)
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0, r2;
        java.lang.Runnable r1;
        sun.nio.ch.AsynchronousChannelGroupImpl$1 $r3;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        r1 := @parameter0: java.lang.Runnable;
        r2 = r0;
        $r3 = new sun.nio.ch.AsynchronousChannelGroupImpl$1;
        specialinvoke $r3.<sun.nio.ch.AsynchronousChannelGroupImpl$1: void <init>(sun.nio.ch.AsynchronousChannelGroupImpl,sun.nio.ch.AsynchronousChannelGroupImpl,java.lang.Runnable)>(r0, r2, r1);
        return $r3;
    }

    private void startInternalThread(java.lang.Runnable)
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        java.lang.Runnable r1;
        sun.nio.ch.AsynchronousChannelGroupImpl$2 $r2;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        r1 := @parameter0: java.lang.Runnable;
        $r2 = new sun.nio.ch.AsynchronousChannelGroupImpl$2;
        specialinvoke $r2.<sun.nio.ch.AsynchronousChannelGroupImpl$2: void <init>(sun.nio.ch.AsynchronousChannelGroupImpl,java.lang.Runnable)>(r0, r1);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);
        return;
    }

    protected final void startThreads(java.lang.Runnable)
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        java.lang.Runnable r1, r4;
        int i0, $i1, $i3, i4, $i5;
        boolean $z0;
        java.util.concurrent.atomic.AtomicInteger $r2, $r8;
        sun.nio.ch.ThreadPool $r3, $r5, $r6;
        java.util.concurrent.ExecutorService $r7;
        java.util.concurrent.RejectedExecutionException $r9, r10;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        r1 := @parameter0: java.lang.Runnable;
        $z0 = virtualinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: boolean isFixedThreadPool()>();
        if $z0 != 0 goto label1;

        i0 = 0;

     label0:
        $i1 = <sun.nio.ch.AsynchronousChannelGroupImpl: int internalThreadCount>;
        if i0 >= $i1 goto label1;

        specialinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: void startInternalThread(java.lang.Runnable)>(r1);
        $r2 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.concurrent.atomic.AtomicInteger threadCount>;
        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
        i0 = i0 + 1;
        goto label0;

     label1:
        $r3 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: sun.nio.ch.ThreadPool pool>;
        $i3 = virtualinvoke $r3.<sun.nio.ch.ThreadPool: int poolSize()>();
        if $i3 <= 0 goto label6;

        r4 = specialinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.lang.Runnable bindToGroup(java.lang.Runnable)>(r1);

     label2:
        i4 = 0;

     label3:
        $r5 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: sun.nio.ch.ThreadPool pool>;
        $i5 = virtualinvoke $r5.<sun.nio.ch.ThreadPool: int poolSize()>();
        if i4 >= $i5 goto label4;

        $r6 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: sun.nio.ch.ThreadPool pool>;
        $r7 = virtualinvoke $r6.<sun.nio.ch.ThreadPool: java.util.concurrent.ExecutorService executor()>();
        interfaceinvoke $r7.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r4);
        $r8 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.concurrent.atomic.AtomicInteger threadCount>;
        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
        i4 = i4 + 1;
        goto label3;

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;
        r10 = $r9;

     label6:
        return;

        catch java.util.concurrent.RejectedExecutionException from label2 to label4 with label5;
    }

    final int threadCount()
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        $r1 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.concurrent.atomic.AtomicInteger threadCount>;
        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        return $i0;
    }

    final int threadExit(java.lang.Runnable, boolean)
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        java.lang.Runnable r1, $r5;
        boolean z0, $z1;
        java.util.concurrent.RejectedExecutionException r2, $r7;
        sun.nio.ch.ThreadPool $r3;
        java.util.concurrent.ExecutorService $r4;
        java.util.concurrent.atomic.AtomicInteger $r6, $r8;
        int $i0, $i1;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        r1 := @parameter0: java.lang.Runnable;
        z0 := @parameter1: boolean;
        if z0 == 0 goto label5;

     label0:
        $z1 = staticinvoke <sun.nio.ch.Invoker: boolean isBoundToAnyGroup()>();
        if $z1 == 0 goto label1;

        $r3 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: sun.nio.ch.ThreadPool pool>;
        $r4 = virtualinvoke $r3.<sun.nio.ch.ThreadPool: java.util.concurrent.ExecutorService executor()>();
        $r5 = specialinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.lang.Runnable bindToGroup(java.lang.Runnable)>(r1);
        interfaceinvoke $r4.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r5);
        goto label2;

     label1:
        specialinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: void startInternalThread(java.lang.Runnable)>(r1);

     label2:
        $r6 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.concurrent.atomic.AtomicInteger threadCount>;
        $i0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label3:
        return $i0;

     label4:
        $r7 := @caughtexception;
        r2 = $r7;

     label5:
        $r8 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.concurrent.atomic.AtomicInteger threadCount>;
        $i1 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
        return $i1;

        catch java.util.concurrent.RejectedExecutionException from label0 to label3 with label4;
    }

    abstract void executeOnHandlerTask(java.lang.Runnable);

    final void executeOnPooledThread(java.lang.Runnable)
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        java.lang.Runnable r1, $r4;
        boolean $z0;
        sun.nio.ch.ThreadPool $r2;
        java.util.concurrent.ExecutorService $r3;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        r1 := @parameter0: java.lang.Runnable;
        $z0 = virtualinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: boolean isFixedThreadPool()>();
        if $z0 == 0 goto label0;

        virtualinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: void executeOnHandlerTask(java.lang.Runnable)>(r1);
        goto label1;

     label0:
        $r2 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: sun.nio.ch.ThreadPool pool>;
        $r3 = virtualinvoke $r2.<sun.nio.ch.ThreadPool: java.util.concurrent.ExecutorService executor()>();
        $r4 = specialinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.lang.Runnable bindToGroup(java.lang.Runnable)>(r1);
        interfaceinvoke $r3.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r4);

     label1:
        return;
    }

    final void offerTask(java.lang.Runnable)
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        java.lang.Runnable r1;
        java.util.Queue $r2;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        r1 := @parameter0: java.lang.Runnable;
        $r2 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.Queue taskQueue>;
        interfaceinvoke $r2.<java.util.Queue: boolean offer(java.lang.Object)>(r1);
        return;
    }

    final java.lang.Runnable pollTask()
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        java.util.Queue $r1, $r3;
        java.lang.Runnable $r2;
        java.lang.Object $r4;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        $r1 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.Queue taskQueue>;
        if $r1 != null goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r3 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.Queue taskQueue>;
        $r4 = interfaceinvoke $r3.<java.util.Queue: java.lang.Object poll()>();
        $r2 = (java.lang.Runnable) $r4;

     label1:
        return $r2;
    }

    final java.util.concurrent.Future schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        java.lang.Runnable r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.RejectedExecutionException r3, $r6;
        java.util.concurrent.ScheduledThreadPoolExecutor $r4;
        java.util.concurrent.ScheduledFuture $r5;
        boolean $z0;
        java.lang.AssertionError $r7;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        r1 := @parameter0: java.lang.Runnable;
        l0 := @parameter1: long;
        r2 := @parameter2: java.util.concurrent.TimeUnit;

     label0:
        $r4 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.concurrent.ScheduledThreadPoolExecutor timeoutExecutor>;
        $r5 = virtualinvoke $r4.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(r1, l0, r2);

     label1:
        return $r5;

     label2:
        $r6 := @caughtexception;
        r3 = $r6;
        $z0 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: boolean terminateInitiated>;
        if $z0 == 0 goto label3;

        return null;

     label3:
        $r7 = new java.lang.AssertionError;
        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(r3);
        throw $r7;

        catch java.util.concurrent.RejectedExecutionException from label0 to label1 with label2;
    }

    public final boolean isShutdown()
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        $r1 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.concurrent.atomic.AtomicBoolean shutdown>;
        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
        return $z0;
    }

    public final boolean isTerminated()
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        sun.nio.ch.ThreadPool $r1;
        java.util.concurrent.ExecutorService $r2;
        boolean $z0;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        $r1 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: sun.nio.ch.ThreadPool pool>;
        $r2 = virtualinvoke $r1.<sun.nio.ch.ThreadPool: java.util.concurrent.ExecutorService executor()>();
        $z0 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: boolean isTerminated()>();
        return $z0;
    }

    abstract boolean isEmpty();

    abstract java.lang.Object attachForeignChannel(java.nio.channels.Channel, java.io.FileDescriptor) throws java.io.IOException;

    abstract void detachForeignChannel(java.lang.Object);

    abstract void closeAllChannels() throws java.io.IOException;

    abstract void shutdownHandlerTasks();

    private void shutdownExecutors()
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        sun.nio.ch.AsynchronousChannelGroupImpl$3 $r1;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        $r1 = new sun.nio.ch.AsynchronousChannelGroupImpl$3;
        specialinvoke $r1.<sun.nio.ch.AsynchronousChannelGroupImpl$3: void <init>(sun.nio.ch.AsynchronousChannelGroupImpl)>(r0);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        return;
    }

    public final void shutdown()
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r5;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        $r3 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.concurrent.atomic.AtomicBoolean shutdown>;
        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);
        if $z0 == 0 goto label0;

        return;

     label0:
        $z1 = virtualinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: boolean isEmpty()>();
        if $z1 != 0 goto label1;

        return;

     label1:
        $r4 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.lang.Object shutdownNowLock>;
        r1 = $r4;
        entermonitor $r4;

     label2:
        $z2 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: boolean terminateInitiated>;
        if $z2 != 0 goto label3;

        r0.<sun.nio.ch.AsynchronousChannelGroupImpl: boolean terminateInitiated> = 1;
        virtualinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: void shutdownHandlerTasks()>();
        specialinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: void shutdownExecutors()>();

     label3:
        exitmonitor r1;

     label4:
        goto label8;

     label5:
        $r5 := @caughtexception;

     label6:
        r2 = $r5;
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public final void shutdownNow() throws java.io.IOException
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r5;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        boolean $z0;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        $r3 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.concurrent.atomic.AtomicBoolean shutdown>;
        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);
        $r4 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.lang.Object shutdownNowLock>;
        r1 = $r4;
        entermonitor $r4;

     label0:
        $z0 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: boolean terminateInitiated>;
        if $z0 != 0 goto label1;

        r0.<sun.nio.ch.AsynchronousChannelGroupImpl: boolean terminateInitiated> = 1;
        virtualinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: void closeAllChannels()>();
        virtualinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: void shutdownHandlerTasks()>();
        specialinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: void shutdownExecutors()>();

     label1:
        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        r2 = $r5;
        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    final void detachFromThreadPool()
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0, $z1;
        java.lang.AssertionError $r2, $r3;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        $r1 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.concurrent.atomic.AtomicBoolean shutdown>;
        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);
        if $z0 == 0 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("Already shutdown");
        throw $r2;

     label0:
        $z1 = virtualinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: boolean isEmpty()>();
        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("Group not empty");
        throw $r3;

     label1:
        virtualinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: void shutdownHandlerTasks()>();
        return;
    }

    public final boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        sun.nio.ch.ThreadPool $r2;
        java.util.concurrent.ExecutorService $r3;
        boolean $z0;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.concurrent.TimeUnit;
        $r2 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: sun.nio.ch.ThreadPool pool>;
        $r3 = virtualinvoke $r2.<sun.nio.ch.ThreadPool: java.util.concurrent.ExecutorService executor()>();
        $z0 = interfaceinvoke $r3.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(l0, r1);
        return $z0;
    }

    public final void execute(java.lang.Runnable)
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        java.lang.Runnable r1, r4;
        java.lang.SecurityManager r2;
        java.security.AccessControlContext r3;
        sun.nio.ch.AsynchronousChannelGroupImpl$4 $r5;

        r0 := @this: sun.nio.ch.AsynchronousChannelGroupImpl;
        r1 := @parameter0: java.lang.Runnable;
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label0;

        r3 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getContext()>();
        r4 = r1;
        $r5 = new sun.nio.ch.AsynchronousChannelGroupImpl$4;
        specialinvoke $r5.<sun.nio.ch.AsynchronousChannelGroupImpl$4: void <init>(sun.nio.ch.AsynchronousChannelGroupImpl,java.lang.Runnable,java.security.AccessControlContext)>(r0, r4, r3);
        r1 = $r5;

     label0:
        virtualinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: void executeOnPooledThread(java.lang.Runnable)>(r1);
        return;
    }

    static sun.nio.ch.ThreadPool access$000(sun.nio.ch.AsynchronousChannelGroupImpl)
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        sun.nio.ch.ThreadPool $r1;

        r0 := @parameter0: sun.nio.ch.AsynchronousChannelGroupImpl;
        $r1 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: sun.nio.ch.ThreadPool pool>;
        return $r1;
    }

    static java.util.concurrent.ScheduledThreadPoolExecutor access$100(sun.nio.ch.AsynchronousChannelGroupImpl)
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        java.util.concurrent.ScheduledThreadPoolExecutor $r1;

        r0 := @parameter0: sun.nio.ch.AsynchronousChannelGroupImpl;
        $r1 = r0.<sun.nio.ch.AsynchronousChannelGroupImpl: java.util.concurrent.ScheduledThreadPoolExecutor timeoutExecutor>;
        return $r1;
    }

    static void <clinit>()
    {
        sun.security.action.GetIntegerAction $r0;
        java.lang.Object $r1;
        java.lang.Integer $r2;
        int $i0;

        $r0 = new sun.security.action.GetIntegerAction;
        specialinvoke $r0.<sun.security.action.GetIntegerAction: void <init>(java.lang.String,int)>("sun.nio.ch.internalThreadPoolSize", 1);
        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        $r2 = (java.lang.Integer) $r1;
        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();
        <sun.nio.ch.AsynchronousChannelGroupImpl: int internalThreadCount> = $i0;
        return;
    }
}
