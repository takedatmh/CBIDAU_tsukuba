class java.net.SocketOutputStream extends java.io.FileOutputStream
{
    private java.net.AbstractPlainSocketImpl impl;
    private byte[] temp;
    private java.net.Socket socket;
    private boolean closing;

    void <init>(java.net.AbstractPlainSocketImpl) throws java.io.IOException
    {
        java.net.SocketOutputStream r0;
        java.net.AbstractPlainSocketImpl r1;
        java.io.FileDescriptor $r2;
        byte[] $r3;
        java.net.Socket $r4;

        r0 := @this: java.net.SocketOutputStream;
        r1 := @parameter0: java.net.AbstractPlainSocketImpl;
        $r2 = virtualinvoke r1.<java.net.AbstractPlainSocketImpl: java.io.FileDescriptor getFileDescriptor()>();
        specialinvoke r0.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>($r2);
        r0.<java.net.SocketOutputStream: java.net.AbstractPlainSocketImpl impl> = null;
        $r3 = newarray (byte)[1];
        r0.<java.net.SocketOutputStream: byte[] temp> = $r3;
        r0.<java.net.SocketOutputStream: java.net.Socket socket> = null;
        r0.<java.net.SocketOutputStream: boolean closing> = 0;
        r0.<java.net.SocketOutputStream: java.net.AbstractPlainSocketImpl impl> = r1;
        $r4 = virtualinvoke r1.<java.net.AbstractPlainSocketImpl: java.net.Socket getSocket()>();
        r0.<java.net.SocketOutputStream: java.net.Socket socket> = $r4;
        return;
    }

    public final java.nio.channels.FileChannel getChannel()
    {
        java.net.SocketOutputStream r0;

        r0 := @this: java.net.SocketOutputStream;
        return null;
    }

    private native void socketWrite0(java.io.FileDescriptor, byte[], int, int) throws java.io.IOException;

    private void socketWrite(byte[], int, int) throws java.io.IOException
    {
        java.net.SocketOutputStream r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i7;
        java.lang.Object r2;
        java.io.FileDescriptor r3;
        java.net.SocketException r4, $r12, $r14, $r16;
        java.lang.Throwable r5, $r17;
        java.lang.ArrayIndexOutOfBoundsException $r6;
        java.net.AbstractPlainSocketImpl $r7, $r8, $r9, $r11, $r13, $r15, $r18, $r19, $r21;
        java.net.InetAddress $r10, $r20;
        long $l6, $l8;
        boolean $z0, $z1;

        r0 := @this: java.net.SocketOutputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i1 <= 0 goto label0;

        if i0 < 0 goto label0;

        $i3 = i0 + i1;
        $i4 = lengthof r1;
        if $i3 <= $i4 goto label2;

     label0:
        if i1 != 0 goto label1;

        return;

     label1:
        $r6 = new java.lang.ArrayIndexOutOfBoundsException;
        specialinvoke $r6.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();
        throw $r6;

     label2:
        r2 = staticinvoke <sun.misc.IoTrace: java.lang.Object socketWriteBegin()>();
        i2 = 0;
        $r7 = r0.<java.net.SocketOutputStream: java.net.AbstractPlainSocketImpl impl>;
        r3 = virtualinvoke $r7.<java.net.AbstractPlainSocketImpl: java.io.FileDescriptor acquireFD()>();

     label3:
        specialinvoke r0.<java.net.SocketOutputStream: void socketWrite0(java.io.FileDescriptor,byte[],int,int)>(r3, r1, i0, i1);
        i2 = i1;

     label4:
        $r8 = r0.<java.net.SocketOutputStream: java.net.AbstractPlainSocketImpl impl>;
        virtualinvoke $r8.<java.net.AbstractPlainSocketImpl: void releaseFD()>();
        $r9 = r0.<java.net.SocketOutputStream: java.net.AbstractPlainSocketImpl impl>;
        $r10 = $r9.<java.net.AbstractPlainSocketImpl: java.net.InetAddress address>;
        $r11 = r0.<java.net.SocketOutputStream: java.net.AbstractPlainSocketImpl impl>;
        $i5 = $r11.<java.net.AbstractPlainSocketImpl: int port>;
        $l6 = (long) i2;
        staticinvoke <sun.misc.IoTrace: void socketWriteEnd(java.lang.Object,java.net.InetAddress,int,long)>(r2, $r10, $i5, $l6);
        goto label11;

     label5:
        $r12 := @caughtexception;

     label6:
        r4 = $r12;
        $z0 = r4 instanceof sun.net.ConnectionResetException;
        if $z0 == 0 goto label7;

        $r13 = r0.<java.net.SocketOutputStream: java.net.AbstractPlainSocketImpl impl>;
        virtualinvoke $r13.<java.net.AbstractPlainSocketImpl: void setConnectionResetPending()>();
        $r14 = new java.net.SocketException;
        specialinvoke $r14.<java.net.SocketException: void <init>(java.lang.String)>("Connection reset");
        r4 = $r14;

     label7:
        $r15 = r0.<java.net.SocketOutputStream: java.net.AbstractPlainSocketImpl impl>;
        $z1 = virtualinvoke $r15.<java.net.AbstractPlainSocketImpl: boolean isClosedOrPending()>();
        if $z1 == 0 goto label8;

        $r16 = new java.net.SocketException;
        specialinvoke $r16.<java.net.SocketException: void <init>(java.lang.String)>("Socket closed");
        throw $r16;

     label8:
        throw r4;

     label9:
        $r17 := @caughtexception;
        r5 = $r17;

     label10:
        $r18 = r0.<java.net.SocketOutputStream: java.net.AbstractPlainSocketImpl impl>;
        virtualinvoke $r18.<java.net.AbstractPlainSocketImpl: void releaseFD()>();
        $r19 = r0.<java.net.SocketOutputStream: java.net.AbstractPlainSocketImpl impl>;
        $r20 = $r19.<java.net.AbstractPlainSocketImpl: java.net.InetAddress address>;
        $r21 = r0.<java.net.SocketOutputStream: java.net.AbstractPlainSocketImpl impl>;
        $i7 = $r21.<java.net.AbstractPlainSocketImpl: int port>;
        $l8 = (long) i2;
        staticinvoke <sun.misc.IoTrace: void socketWriteEnd(java.lang.Object,java.net.InetAddress,int,long)>(r2, $r20, $i7, $l8);
        throw r5;

     label11:
        return;

        catch java.net.SocketException from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label6 to label10 with label9;
    }

    public void write(int) throws java.io.IOException
    {
        java.net.SocketOutputStream r0;
        int i0;
        byte[] $r1, $r2;
        byte $b1;

        r0 := @this: java.net.SocketOutputStream;
        i0 := @parameter0: int;
        $r1 = r0.<java.net.SocketOutputStream: byte[] temp>;
        $b1 = (byte) i0;
        $r1[0] = $b1;
        $r2 = r0.<java.net.SocketOutputStream: byte[] temp>;
        specialinvoke r0.<java.net.SocketOutputStream: void socketWrite(byte[],int,int)>($r2, 0, 1);
        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        java.net.SocketOutputStream r0;
        byte[] r1;
        int $i0;

        r0 := @this: java.net.SocketOutputStream;
        r1 := @parameter0: byte[];
        $i0 = lengthof r1;
        specialinvoke r0.<java.net.SocketOutputStream: void socketWrite(byte[],int,int)>(r1, 0, $i0);
        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.net.SocketOutputStream r0;
        byte[] r1;
        int i0, i1;

        r0 := @this: java.net.SocketOutputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.net.SocketOutputStream: void socketWrite(byte[],int,int)>(r1, i0, i1);
        return;
    }

    public void close() throws java.io.IOException
    {
        java.net.SocketOutputStream r0;
        boolean $z0, $z1;
        java.net.Socket $r1, $r2, $r3;
        java.net.AbstractPlainSocketImpl $r4;

        r0 := @this: java.net.SocketOutputStream;
        $z0 = r0.<java.net.SocketOutputStream: boolean closing>;
        if $z0 == 0 goto label0;

        return;

     label0:
        r0.<java.net.SocketOutputStream: boolean closing> = 1;
        $r1 = r0.<java.net.SocketOutputStream: java.net.Socket socket>;
        if $r1 == null goto label1;

        $r2 = r0.<java.net.SocketOutputStream: java.net.Socket socket>;
        $z1 = virtualinvoke $r2.<java.net.Socket: boolean isClosed()>();
        if $z1 != 0 goto label2;

        $r3 = r0.<java.net.SocketOutputStream: java.net.Socket socket>;
        virtualinvoke $r3.<java.net.Socket: void close()>();
        goto label2;

     label1:
        $r4 = r0.<java.net.SocketOutputStream: java.net.AbstractPlainSocketImpl impl>;
        virtualinvoke $r4.<java.net.AbstractPlainSocketImpl: void close()>();

     label2:
        r0.<java.net.SocketOutputStream: boolean closing> = 0;
        return;
    }

    protected void finalize()
    {
        java.net.SocketOutputStream r0;

        r0 := @this: java.net.SocketOutputStream;
        return;
    }

    private static native void init();

    static void <clinit>()
    {
        staticinvoke <java.net.SocketOutputStream: void init()>();
        return;
    }
}
