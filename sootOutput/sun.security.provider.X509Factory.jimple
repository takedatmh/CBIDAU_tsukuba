public class sun.security.provider.X509Factory extends java.security.cert.CertificateFactorySpi
{
    public static final java.lang.String BEGIN_CERT;
    public static final java.lang.String END_CERT;
    private static final int ENC_MAX_LENGTH;
    private static final sun.security.util.Cache certCache;
    private static final sun.security.util.Cache crlCache;

    public void <init>()
    {
        sun.security.provider.X509Factory r0;

        r0 := @this: sun.security.provider.X509Factory;
        specialinvoke r0.<java.security.cert.CertificateFactorySpi: void <init>()>();
        return;
    }

    public java.security.cert.Certificate engineGenerateCertificate(java.io.InputStream) throws java.security.cert.CertificateException
    {
        sun.security.provider.X509Factory r0;
        java.io.InputStream r1;
        byte[] r2, $r12;
        sun.security.x509.X509CertImpl r3, $r9, r10;
        sun.security.util.Cache $r4, $r6, $r11;
        java.security.cert.CertificateException $r5, $r17, $r24;
        java.lang.Object $r7;
        java.io.IOException $r14, $r15, r16;
        java.lang.StringBuilder $r18, $r19, $r21;
        java.lang.String $r20, $r22;
        java.lang.Throwable $r23;

        r0 := @this: sun.security.provider.X509Factory;
        r1 := @parameter0: java.io.InputStream;
        if r1 != null goto label0;

        $r4 = <sun.security.provider.X509Factory: sun.security.util.Cache certCache>;
        virtualinvoke $r4.<sun.security.util.Cache: void clear()>();
        staticinvoke <sun.security.provider.certpath.X509CertificatePair: void clearCache()>();
        $r5 = new java.security.cert.CertificateException;
        specialinvoke $r5.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Missing input stream");
        throw $r5;

     label0:
        r2 = staticinvoke <sun.security.provider.X509Factory: byte[] readOneBlock(java.io.InputStream)>(r1);
        if r2 == null goto label4;

        $r6 = <sun.security.provider.X509Factory: sun.security.util.Cache certCache>;
        $r7 = staticinvoke <sun.security.provider.X509Factory: java.lang.Object getFromCache(sun.security.util.Cache,byte[])>($r6, r2);
        r3 = (sun.security.x509.X509CertImpl) $r7;
        if r3 == null goto label2;

     label1:
        return r3;

     label2:
        $r9 = new sun.security.x509.X509CertImpl;
        specialinvoke $r9.<sun.security.x509.X509CertImpl: void <init>(byte[])>(r2);
        r10 = $r9;
        $r11 = <sun.security.provider.X509Factory: sun.security.util.Cache certCache>;
        $r12 = virtualinvoke r10.<sun.security.x509.X509CertImpl: byte[] getEncodedInternal()>();
        staticinvoke <sun.security.provider.X509Factory: void addToCache(sun.security.util.Cache,byte[],java.lang.Object)>($r11, $r12, r10);

     label3:
        return r10;

     label4:
        $r14 = new java.io.IOException;
        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Empty input");
        throw $r14;

     label5:
        $r15 := @caughtexception;
        r16 = $r15;
        $r17 = new java.security.cert.CertificateException;
        $r18 = new java.lang.StringBuilder;
        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse certificate: ");
        $r20 = virtualinvoke r16.<java.io.IOException: java.lang.String toString()>();
        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r17.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r22);
        $r23 = virtualinvoke $r17.<java.security.cert.CertificateException: java.lang.Throwable initCause(java.lang.Throwable)>(r16);
        $r24 = (java.security.cert.CertificateException) $r23;
        throw $r24;

        catch java.io.IOException from label0 to label1 with label5;
        catch java.io.IOException from label2 to label3 with label5;
        catch java.io.IOException from label4 to label5 with label5;
    }

    private static int readFully(java.io.InputStream, java.io.ByteArrayOutputStream, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.ByteArrayOutputStream r1;
        int i0, i1, i3, $i4;
        byte[] r2;
        byte $b2;

        r0 := @parameter0: java.io.InputStream;
        r1 := @parameter1: java.io.ByteArrayOutputStream;
        i0 := @parameter2: int;
        i1 = 0;
        r2 = newarray (byte)[2048];

     label0:
        if i0 <= 0 goto label4;

        $b2 = 0;
        if i0 >= 2048 goto label1;

        $i4 = i0;
        goto label2;

     label1:
        $i4 = 2048;

     label2:
        i3 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r2, $b2, $i4);
        if i3 > 0 goto label3;

        goto label4;

     label3:
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r2, 0, i3);
        i1 = i1 + i3;
        i0 = i0 - i3;
        goto label0;

     label4:
        return i1;
    }

    public static synchronized sun.security.x509.X509CertImpl intern(java.security.cert.X509Certificate) throws java.security.cert.CertificateException
    {
        java.security.cert.X509Certificate r0;
        boolean z0;
        byte[] r1;
        sun.security.x509.X509CertImpl r2, $r3, r6, $r7;
        sun.security.util.Cache $r4, $r8;
        java.lang.Object $r5;

        r0 := @parameter0: java.security.cert.X509Certificate;
        if r0 != null goto label0;

        return null;

     label0:
        z0 = r0 instanceof sun.security.x509.X509CertImpl;
        if z0 == 0 goto label1;

        $r3 = (sun.security.x509.X509CertImpl) r0;
        r1 = virtualinvoke $r3.<sun.security.x509.X509CertImpl: byte[] getEncodedInternal()>();
        goto label2;

     label1:
        r1 = virtualinvoke r0.<java.security.cert.X509Certificate: byte[] getEncoded()>();

     label2:
        $r4 = <sun.security.provider.X509Factory: sun.security.util.Cache certCache>;
        $r5 = staticinvoke <sun.security.provider.X509Factory: java.lang.Object getFromCache(sun.security.util.Cache,byte[])>($r4, r1);
        r2 = (sun.security.x509.X509CertImpl) $r5;
        if r2 == null goto label3;

        return r2;

     label3:
        if z0 == 0 goto label4;

        r6 = (sun.security.x509.X509CertImpl) r0;
        goto label5;

     label4:
        $r7 = new sun.security.x509.X509CertImpl;
        specialinvoke $r7.<sun.security.x509.X509CertImpl: void <init>(byte[])>(r1);
        r6 = $r7;
        r1 = virtualinvoke r6.<sun.security.x509.X509CertImpl: byte[] getEncodedInternal()>();

     label5:
        $r8 = <sun.security.provider.X509Factory: sun.security.util.Cache certCache>;
        staticinvoke <sun.security.provider.X509Factory: void addToCache(sun.security.util.Cache,byte[],java.lang.Object)>($r8, r1, r6);
        return r6;
    }

    public static synchronized sun.security.x509.X509CRLImpl intern(java.security.cert.X509CRL) throws java.security.cert.CRLException
    {
        java.security.cert.X509CRL r0;
        boolean z0;
        byte[] r1;
        sun.security.x509.X509CRLImpl r2, $r3, r6, $r7;
        sun.security.util.Cache $r4, $r8;
        java.lang.Object $r5;

        r0 := @parameter0: java.security.cert.X509CRL;
        if r0 != null goto label0;

        return null;

     label0:
        z0 = r0 instanceof sun.security.x509.X509CRLImpl;
        if z0 == 0 goto label1;

        $r3 = (sun.security.x509.X509CRLImpl) r0;
        r1 = virtualinvoke $r3.<sun.security.x509.X509CRLImpl: byte[] getEncodedInternal()>();
        goto label2;

     label1:
        r1 = virtualinvoke r0.<java.security.cert.X509CRL: byte[] getEncoded()>();

     label2:
        $r4 = <sun.security.provider.X509Factory: sun.security.util.Cache crlCache>;
        $r5 = staticinvoke <sun.security.provider.X509Factory: java.lang.Object getFromCache(sun.security.util.Cache,byte[])>($r4, r1);
        r2 = (sun.security.x509.X509CRLImpl) $r5;
        if r2 == null goto label3;

        return r2;

     label3:
        if z0 == 0 goto label4;

        r6 = (sun.security.x509.X509CRLImpl) r0;
        goto label5;

     label4:
        $r7 = new sun.security.x509.X509CRLImpl;
        specialinvoke $r7.<sun.security.x509.X509CRLImpl: void <init>(byte[])>(r1);
        r6 = $r7;
        r1 = virtualinvoke r6.<sun.security.x509.X509CRLImpl: byte[] getEncodedInternal()>();

     label5:
        $r8 = <sun.security.provider.X509Factory: sun.security.util.Cache crlCache>;
        staticinvoke <sun.security.provider.X509Factory: void addToCache(sun.security.util.Cache,byte[],java.lang.Object)>($r8, r1, r6);
        return r6;
    }

    private static synchronized java.lang.Object getFromCache(sun.security.util.Cache, byte[])
    {
        sun.security.util.Cache r0;
        byte[] r1;
        sun.security.util.Cache$EqualByteArray $r2, r3;
        java.lang.Object r4;

        r0 := @parameter0: sun.security.util.Cache;
        r1 := @parameter1: byte[];
        $r2 = new sun.security.util.Cache$EqualByteArray;
        specialinvoke $r2.<sun.security.util.Cache$EqualByteArray: void <init>(byte[])>(r1);
        r3 = $r2;
        r4 = virtualinvoke r0.<sun.security.util.Cache: java.lang.Object get(java.lang.Object)>(r3);
        return r4;
    }

    private static synchronized void addToCache(sun.security.util.Cache, byte[], java.lang.Object)
    {
        sun.security.util.Cache r0;
        byte[] r1;
        java.lang.Object r2;
        sun.security.util.Cache$EqualByteArray r3, $r4;
        int $i0;

        r0 := @parameter0: sun.security.util.Cache;
        r1 := @parameter1: byte[];
        r2 := @parameter2: java.lang.Object;
        $i0 = lengthof r1;
        if $i0 <= 4194304 goto label0;

        return;

     label0:
        $r4 = new sun.security.util.Cache$EqualByteArray;
        specialinvoke $r4.<sun.security.util.Cache$EqualByteArray: void <init>(byte[])>(r1);
        r3 = $r4;
        virtualinvoke r0.<sun.security.util.Cache: void put(java.lang.Object,java.lang.Object)>(r3, r2);
        return;
    }

    public java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream) throws java.security.cert.CertificateException
    {
        sun.security.provider.X509Factory r0;
        java.io.InputStream r1;
        byte[] r2;
        java.security.cert.CertificateException $r3, $r9;
        sun.security.provider.certpath.X509CertPath $r4;
        java.io.ByteArrayInputStream $r5;
        java.io.IOException $r6, $r7, r8;
        java.lang.String $r10;

        r0 := @this: sun.security.provider.X509Factory;
        r1 := @parameter0: java.io.InputStream;
        if r1 != null goto label0;

        $r3 = new java.security.cert.CertificateException;
        specialinvoke $r3.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Missing input stream");
        throw $r3;

     label0:
        r2 = staticinvoke <sun.security.provider.X509Factory: byte[] readOneBlock(java.io.InputStream)>(r1);
        if r2 == null goto label2;

        $r4 = new sun.security.provider.certpath.X509CertPath;
        $r5 = new java.io.ByteArrayInputStream;
        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);
        specialinvoke $r4.<sun.security.provider.certpath.X509CertPath: void <init>(java.io.InputStream)>($r5);

     label1:
        return $r4;

     label2:
        $r6 = new java.io.IOException;
        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Empty input");
        throw $r6;

     label3:
        $r7 := @caughtexception;
        r8 = $r7;
        $r9 = new java.security.cert.CertificateException;
        $r10 = virtualinvoke r8.<java.io.IOException: java.lang.String getMessage()>();
        specialinvoke $r9.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r10);
        throw $r9;

        catch java.io.IOException from label0 to label1 with label3;
        catch java.io.IOException from label2 to label3 with label3;
    }

    public java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream, java.lang.String) throws java.security.cert.CertificateException
    {
        sun.security.provider.X509Factory r0;
        java.io.InputStream r1;
        java.lang.String r2, $r11;
        byte[] r3;
        java.security.cert.CertificateException $r4, $r10;
        sun.security.provider.certpath.X509CertPath $r5;
        java.io.ByteArrayInputStream $r6;
        java.io.IOException $r7, $r8, r9;

        r0 := @this: sun.security.provider.X509Factory;
        r1 := @parameter0: java.io.InputStream;
        r2 := @parameter1: java.lang.String;
        if r1 != null goto label0;

        $r4 = new java.security.cert.CertificateException;
        specialinvoke $r4.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Missing input stream");
        throw $r4;

     label0:
        r3 = staticinvoke <sun.security.provider.X509Factory: byte[] readOneBlock(java.io.InputStream)>(r1);
        if r3 == null goto label2;

        $r5 = new sun.security.provider.certpath.X509CertPath;
        $r6 = new java.io.ByteArrayInputStream;
        specialinvoke $r6.<java.io.ByteArrayInputStream: void <init>(byte[])>(r3);
        specialinvoke $r5.<sun.security.provider.certpath.X509CertPath: void <init>(java.io.InputStream,java.lang.String)>($r6, r2);

     label1:
        return $r5;

     label2:
        $r7 = new java.io.IOException;
        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Empty input");
        throw $r7;

     label3:
        $r8 := @caughtexception;
        r9 = $r8;
        $r10 = new java.security.cert.CertificateException;
        $r11 = virtualinvoke r9.<java.io.IOException: java.lang.String getMessage()>();
        specialinvoke $r10.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r11);
        throw $r10;

        catch java.io.IOException from label0 to label1 with label3;
        catch java.io.IOException from label2 to label3 with label3;
    }

    public java.security.cert.CertPath engineGenerateCertPath(java.util.List) throws java.security.cert.CertificateException
    {
        sun.security.provider.X509Factory r0;
        java.util.List r1;
        sun.security.provider.certpath.X509CertPath $r2;

        r0 := @this: sun.security.provider.X509Factory;
        r1 := @parameter0: java.util.List;
        $r2 = new sun.security.provider.certpath.X509CertPath;
        specialinvoke $r2.<sun.security.provider.certpath.X509CertPath: void <init>(java.util.List)>(r1);
        return $r2;
    }

    public java.util.Iterator engineGetCertPathEncodings()
    {
        sun.security.provider.X509Factory r0;
        java.util.Iterator $r1;

        r0 := @this: sun.security.provider.X509Factory;
        $r1 = staticinvoke <sun.security.provider.certpath.X509CertPath: java.util.Iterator getEncodingsStatic()>();
        return $r1;
    }

    public java.util.Collection engineGenerateCertificates(java.io.InputStream) throws java.security.cert.CertificateException
    {
        sun.security.provider.X509Factory r0;
        java.io.InputStream r1;
        java.io.IOException r2, $r5;
        java.security.cert.CertificateException $r3, $r6;
        java.util.Collection $r4;

        r0 := @this: sun.security.provider.X509Factory;
        r1 := @parameter0: java.io.InputStream;
        if r1 != null goto label0;

        $r3 = new java.security.cert.CertificateException;
        specialinvoke $r3.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Missing input stream");
        throw $r3;

     label0:
        $r4 = specialinvoke r0.<sun.security.provider.X509Factory: java.util.Collection parseX509orPKCS7Cert(java.io.InputStream)>(r1);

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;
        r2 = $r5;
        $r6 = new java.security.cert.CertificateException;
        specialinvoke $r6.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r2);
        throw $r6;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public java.security.cert.CRL engineGenerateCRL(java.io.InputStream) throws java.security.cert.CRLException
    {
        sun.security.provider.X509Factory r0;
        java.io.InputStream r1;
        byte[] r2, $r12;
        sun.security.x509.X509CRLImpl r3, $r9, r10;
        sun.security.util.Cache $r4, $r6, $r11;
        java.security.cert.CRLException $r5, $r17;
        java.lang.Object $r7;
        java.io.IOException $r14, $r15, r16;
        java.lang.String $r18;

        r0 := @this: sun.security.provider.X509Factory;
        r1 := @parameter0: java.io.InputStream;
        if r1 != null goto label0;

        $r4 = <sun.security.provider.X509Factory: sun.security.util.Cache crlCache>;
        virtualinvoke $r4.<sun.security.util.Cache: void clear()>();
        $r5 = new java.security.cert.CRLException;
        specialinvoke $r5.<java.security.cert.CRLException: void <init>(java.lang.String)>("Missing input stream");
        throw $r5;

     label0:
        r2 = staticinvoke <sun.security.provider.X509Factory: byte[] readOneBlock(java.io.InputStream)>(r1);
        if r2 == null goto label4;

        $r6 = <sun.security.provider.X509Factory: sun.security.util.Cache crlCache>;
        $r7 = staticinvoke <sun.security.provider.X509Factory: java.lang.Object getFromCache(sun.security.util.Cache,byte[])>($r6, r2);
        r3 = (sun.security.x509.X509CRLImpl) $r7;
        if r3 == null goto label2;

     label1:
        return r3;

     label2:
        $r9 = new sun.security.x509.X509CRLImpl;
        specialinvoke $r9.<sun.security.x509.X509CRLImpl: void <init>(byte[])>(r2);
        r10 = $r9;
        $r11 = <sun.security.provider.X509Factory: sun.security.util.Cache crlCache>;
        $r12 = virtualinvoke r10.<sun.security.x509.X509CRLImpl: byte[] getEncodedInternal()>();
        staticinvoke <sun.security.provider.X509Factory: void addToCache(sun.security.util.Cache,byte[],java.lang.Object)>($r11, $r12, r10);

     label3:
        return r10;

     label4:
        $r14 = new java.io.IOException;
        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Empty input");
        throw $r14;

     label5:
        $r15 := @caughtexception;
        r16 = $r15;
        $r17 = new java.security.cert.CRLException;
        $r18 = virtualinvoke r16.<java.io.IOException: java.lang.String getMessage()>();
        specialinvoke $r17.<java.security.cert.CRLException: void <init>(java.lang.String)>($r18);
        throw $r17;

        catch java.io.IOException from label0 to label1 with label5;
        catch java.io.IOException from label2 to label3 with label5;
        catch java.io.IOException from label4 to label5 with label5;
    }

    public java.util.Collection engineGenerateCRLs(java.io.InputStream) throws java.security.cert.CRLException
    {
        sun.security.provider.X509Factory r0;
        java.io.InputStream r1;
        java.io.IOException r2, $r5;
        java.security.cert.CRLException $r3, $r6;
        java.util.Collection $r4;
        java.lang.String $r7;

        r0 := @this: sun.security.provider.X509Factory;
        r1 := @parameter0: java.io.InputStream;
        if r1 != null goto label0;

        $r3 = new java.security.cert.CRLException;
        specialinvoke $r3.<java.security.cert.CRLException: void <init>(java.lang.String)>("Missing input stream");
        throw $r3;

     label0:
        $r4 = specialinvoke r0.<sun.security.provider.X509Factory: java.util.Collection parseX509orPKCS7CRL(java.io.InputStream)>(r1);

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;
        r2 = $r5;
        $r6 = new java.security.cert.CRLException;
        $r7 = virtualinvoke r2.<java.io.IOException: java.lang.String getMessage()>();
        specialinvoke $r6.<java.security.cert.CRLException: void <init>(java.lang.String)>($r7);
        throw $r6;

        catch java.io.IOException from label0 to label1 with label2;
    }

    private java.util.Collection parseX509orPKCS7Cert(java.io.InputStream) throws java.security.cert.CertificateException, java.io.IOException
    {
        sun.security.provider.X509Factory r0;
        java.io.InputStream r1;
        java.util.ArrayList $r2, r3, $r7, $r10;
        byte[] r4;
        sun.security.pkcs.PKCS7 r5, $r8;
        java.security.cert.X509Certificate[] r6;
        java.util.List $r9;
        sun.security.pkcs.ParsingException $r11, r12;
        sun.security.x509.X509CertImpl $r13;

        r0 := @this: sun.security.provider.X509Factory;
        r1 := @parameter0: java.io.InputStream;
        $r2 = new java.util.ArrayList;
        specialinvoke $r2.<java.util.ArrayList: void <init>()>();
        r3 = $r2;
        r4 = staticinvoke <sun.security.provider.X509Factory: byte[] readOneBlock(java.io.InputStream)>(r1);
        if r4 != null goto label0;

        $r7 = new java.util.ArrayList;
        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(0);
        return $r7;

     label0:
        $r8 = new sun.security.pkcs.PKCS7;
        specialinvoke $r8.<sun.security.pkcs.PKCS7: void <init>(byte[])>(r4);
        r5 = $r8;
        r6 = virtualinvoke r5.<sun.security.pkcs.PKCS7: java.security.cert.X509Certificate[] getCertificates()>();
        if r6 == null goto label2;

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r6);

     label1:
        return $r9;

     label2:
        $r10 = new java.util.ArrayList;
        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(0);

     label3:
        return $r10;

     label4:
        $r11 := @caughtexception;
        r12 = $r11;

     label5:
        if r4 == null goto label6;

        $r13 = new sun.security.x509.X509CertImpl;
        specialinvoke $r13.<sun.security.x509.X509CertImpl: void <init>(byte[])>(r4);
        interfaceinvoke r3.<java.util.Collection: boolean add(java.lang.Object)>($r13);
        r4 = staticinvoke <sun.security.provider.X509Factory: byte[] readOneBlock(java.io.InputStream)>(r1);
        goto label5;

     label6:
        return r3;

        catch sun.security.pkcs.ParsingException from label0 to label1 with label4;
        catch sun.security.pkcs.ParsingException from label2 to label3 with label4;
    }

    private java.util.Collection parseX509orPKCS7CRL(java.io.InputStream) throws java.security.cert.CRLException, java.io.IOException
    {
        sun.security.provider.X509Factory r0;
        java.io.InputStream r1;
        java.util.ArrayList $r2, r3, $r7, $r10;
        byte[] r4;
        sun.security.pkcs.PKCS7 r5, $r8;
        java.security.cert.X509CRL[] r6;
        java.util.List $r9;
        sun.security.pkcs.ParsingException $r11, r12;
        sun.security.x509.X509CRLImpl $r13;

        r0 := @this: sun.security.provider.X509Factory;
        r1 := @parameter0: java.io.InputStream;
        $r2 = new java.util.ArrayList;
        specialinvoke $r2.<java.util.ArrayList: void <init>()>();
        r3 = $r2;
        r4 = staticinvoke <sun.security.provider.X509Factory: byte[] readOneBlock(java.io.InputStream)>(r1);
        if r4 != null goto label0;

        $r7 = new java.util.ArrayList;
        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(0);
        return $r7;

     label0:
        $r8 = new sun.security.pkcs.PKCS7;
        specialinvoke $r8.<sun.security.pkcs.PKCS7: void <init>(byte[])>(r4);
        r5 = $r8;
        r6 = virtualinvoke r5.<sun.security.pkcs.PKCS7: java.security.cert.X509CRL[] getCRLs()>();
        if r6 == null goto label2;

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r6);

     label1:
        return $r9;

     label2:
        $r10 = new java.util.ArrayList;
        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(0);

     label3:
        return $r10;

     label4:
        $r11 := @caughtexception;
        r12 = $r11;

     label5:
        if r4 == null goto label6;

        $r13 = new sun.security.x509.X509CRLImpl;
        specialinvoke $r13.<sun.security.x509.X509CRLImpl: void <init>(byte[])>(r4);
        interfaceinvoke r3.<java.util.Collection: boolean add(java.lang.Object)>($r13);
        r4 = staticinvoke <sun.security.provider.X509Factory: byte[] readOneBlock(java.io.InputStream)>(r1);
        goto label5;

     label6:
        return r3;

        catch sun.security.pkcs.ParsingException from label0 to label1 with label4;
        catch sun.security.pkcs.ParsingException from label2 to label3 with label4;
    }

    private static byte[] readOneBlock(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        int i0, i1, i2, i3, i4, i5, i6, $i9, i11, $i12, i15, $i16, $i18, $i19, $i20;
        java.io.ByteArrayOutputStream r1, $r3;
        java.lang.StringBuffer r2, $r6, $r11, r12;
        byte[] $r4, $r19;
        char[] r5;
        byte $b8, b10;
        java.io.IOException $r7, $r8, $r10;
        char $c13, $c14, $c17, $c21;
        java.lang.String $r14, $r15, $r18;
        sun.misc.BASE64Decoder $r16, r17;

        r0 := @parameter0: java.io.InputStream;
        i0 = virtualinvoke r0.<java.io.InputStream: int read()>();
        if i0 != -1 goto label0;

        return null;

     label0:
        if i0 != 48 goto label1;

        $r3 = new java.io.ByteArrayOutputStream;
        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>(int)>(2048);
        r1 = $r3;
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>(i0);
        staticinvoke <sun.security.provider.X509Factory: int readBERInternal(java.io.InputStream,java.io.ByteArrayOutputStream,int)>(r0, r1, i0);
        $r4 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
        return $r4;

     label1:
        r5 = newarray (char)[2048];
        i1 = 0;
        if i0 != 45 goto label2;

        $b8 = 1;
        goto label3;

     label2:
        $b8 = 0;

     label3:
        i2 = $b8;
        if i0 != 45 goto label4;

        $i9 = -1;
        goto label5;

     label4:
        $i9 = i0;

     label5:
        i3 = $i9;

     label6:
        i4 = virtualinvoke r0.<java.io.InputStream: int read()>();
        if i4 != -1 goto label7;

        return null;

     label7:
        if i4 != 45 goto label8;

        i2 = i2 + 1;
        goto label9;

     label8:
        i2 = 0;
        i3 = i4;

     label9:
        if i2 != 5 goto label10;

        if i3 == -1 goto label11;

        if i3 == 13 goto label11;

        if i3 != 10 goto label10;

        goto label11;

     label10:
        goto label6;

     label11:
        $r6 = new java.lang.StringBuffer;
        specialinvoke $r6.<java.lang.StringBuffer: void <init>(java.lang.String)>("-----");
        r2 = $r6;

     label12:
        i5 = virtualinvoke r0.<java.io.InputStream: int read()>();
        if i5 != -1 goto label13;

        $r7 = new java.io.IOException;
        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Incomplete data");
        throw $r7;

     label13:
        if i5 != 10 goto label14;

        b10 = 10;
        goto label18;

     label14:
        if i5 != 13 goto label17;

        i11 = virtualinvoke r0.<java.io.InputStream: int read()>();
        if i11 != -1 goto label15;

        $r8 = new java.io.IOException;
        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Incomplete data");
        throw $r8;

     label15:
        if i11 != 10 goto label16;

        b10 = 10;
        goto label18;

     label16:
        b10 = 13;
        $i12 = i1;
        i1 = i1 + 1;
        $c13 = (char) i11;
        r5[$i12] = $c13;
        goto label18;

     label17:
        $c14 = (char) i5;
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14);
        goto label12;

     label18:
        i15 = virtualinvoke r0.<java.io.InputStream: int read()>();
        if i15 != -1 goto label19;

        $r10 = new java.io.IOException;
        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Incomplete data");
        throw $r10;

     label19:
        if i15 == 45 goto label21;

        $i16 = i1;
        i1 = i1 + 1;
        $c17 = (char) i15;
        r5[$i16] = $c17;
        $i18 = lengthof r5;
        if i1 < $i18 goto label20;

        $i19 = lengthof r5;
        $i20 = $i19 + 1024;
        r5 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(r5, $i20);

     label20:
        goto label18;

     label21:
        $r11 = new java.lang.StringBuffer;
        specialinvoke $r11.<java.lang.StringBuffer: void <init>(java.lang.String)>("-");
        r12 = $r11;

     label22:
        i6 = virtualinvoke r0.<java.io.InputStream: int read()>();
        if i6 == -1 goto label25;

        if i6 == b10 goto label25;

        if i6 != 10 goto label23;

        goto label25;

     label23:
        if i6 == 13 goto label24;

        $c21 = (char) i6;
        virtualinvoke r12.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c21);

     label24:
        goto label22;

     label25:
        $r14 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        $r15 = virtualinvoke r12.<java.lang.StringBuffer: java.lang.String toString()>();
        staticinvoke <sun.security.provider.X509Factory: void checkHeaderFooter(java.lang.String,java.lang.String)>($r14, $r15);
        $r16 = new sun.misc.BASE64Decoder;
        specialinvoke $r16.<sun.misc.BASE64Decoder: void <init>()>();
        r17 = $r16;
        $r18 = new java.lang.String;
        specialinvoke $r18.<java.lang.String: void <init>(char[],int,int)>(r5, 0, i1);
        $r19 = virtualinvoke r17.<sun.misc.BASE64Decoder: byte[] decodeBuffer(java.lang.String)>($r18);
        return $r19;
    }

    private static void checkHeaderFooter(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, r1, r3, r4, $r8, $r13, $r20;
        java.lang.StringBuilder $r2, $r6, $r7, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.IOException $r5, $r9, $r14;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i0 < 16 goto label0;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("-----BEGIN ");
        if $z0 == 0 goto label0;

        $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("-----");
        if $z1 != 0 goto label1;

     label0:
        $r5 = new java.io.IOException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal header: ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r8);
        throw $r5;

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i1 < 14 goto label2;

        $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("-----END ");
        if $z2 == 0 goto label2;

        $z3 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("-----");
        if $z3 != 0 goto label3;

     label2:
        $r9 = new java.io.IOException;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal footer: ");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r13);
        throw $r9;

     label3:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();
        $i3 = $i2 - 5;
        r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(11, $i3);
        $i4 = virtualinvoke r1.<java.lang.String: int length()>();
        $i5 = $i4 - 5;
        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(9, $i5);
        $z4 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);
        if $z4 != 0 goto label4;

        $r14 = new java.io.IOException;
        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header and footer do not match: ");
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r20);
        throw $r14;

     label4:
        return;
    }

    private static int readBERInternal(java.io.InputStream, java.io.ByteArrayOutputStream, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.ByteArrayOutputStream r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, i9, $i10, i11, i12, $i13, $i14, $i15, i16, i17, i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.io.IOException $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @parameter0: java.io.InputStream;
        r1 := @parameter1: java.io.ByteArrayOutputStream;
        i0 := @parameter2: int;
        if i0 != -1 goto label2;

        i0 = virtualinvoke r0.<java.io.InputStream: int read()>();
        if i0 != -1 goto label0;

        $r2 = new java.io.IOException;
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("BER/DER tag info absent");
        throw $r2;

     label0:
        $i7 = i0 & 31;
        if $i7 != 31 goto label1;

        $r3 = new java.io.IOException;
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Multi octets tag not supported");
        throw $r3;

     label1:
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>(i0);

     label2:
        i1 = virtualinvoke r0.<java.io.InputStream: int read()>();
        if i1 != -1 goto label3;

        $r4 = new java.io.IOException;
        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("BER/DER length info ansent");
        throw $r4;

     label3:
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>(i1);
        if i1 != 128 goto label6;

        $i8 = i0 & 32;
        if $i8 == 32 goto label4;

        $r5 = new java.io.IOException;
        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Non constructed encoding must have definite length");
        throw $r5;

     label4:
        i2 = staticinvoke <sun.security.provider.X509Factory: int readBERInternal(java.io.InputStream,java.io.ByteArrayOutputStream,int)>(r0, r1, -1);
        if i2 != 0 goto label5;

        goto label18;

     label5:
        goto label4;

     label6:
        if i1 >= 128 goto label7;

        i3 = i1;
        goto label17;

     label7:
        if i1 != 129 goto label9;

        i3 = virtualinvoke r0.<java.io.InputStream: int read()>();
        if i3 != -1 goto label8;

        $r6 = new java.io.IOException;
        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Incomplete BER/DER length info");
        throw $r6;

     label8:
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>(i3);
        goto label17;

     label9:
        if i1 != 130 goto label11;

        i9 = virtualinvoke r0.<java.io.InputStream: int read()>();
        i4 = virtualinvoke r0.<java.io.InputStream: int read()>();
        if i4 != -1 goto label10;

        $r7 = new java.io.IOException;
        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Incomplete BER/DER length info");
        throw $r7;

     label10:
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>(i9);
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>(i4);
        $i10 = i9 << 8;
        i3 = $i10 | i4;
        goto label17;

     label11:
        if i1 != 131 goto label13;

        i11 = virtualinvoke r0.<java.io.InputStream: int read()>();
        i12 = virtualinvoke r0.<java.io.InputStream: int read()>();
        i5 = virtualinvoke r0.<java.io.InputStream: int read()>();
        if i5 != -1 goto label12;

        $r8 = new java.io.IOException;
        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Incomplete BER/DER length info");
        throw $r8;

     label12:
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>(i11);
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>(i12);
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>(i5);
        $i13 = i11 << 16;
        $i14 = i12 << 8;
        $i15 = $i13 | $i14;
        i3 = $i15 | i5;
        goto label17;

     label13:
        if i1 != 132 goto label16;

        i16 = virtualinvoke r0.<java.io.InputStream: int read()>();
        i17 = virtualinvoke r0.<java.io.InputStream: int read()>();
        i18 = virtualinvoke r0.<java.io.InputStream: int read()>();
        i6 = virtualinvoke r0.<java.io.InputStream: int read()>();
        if i6 != -1 goto label14;

        $r9 = new java.io.IOException;
        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Incomplete BER/DER length info");
        throw $r9;

     label14:
        if i16 <= 127 goto label15;

        $r10 = new java.io.IOException;
        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Invalid BER/DER data (a little huge?)");
        throw $r10;

     label15:
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>(i16);
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>(i17);
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>(i18);
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>(i6);
        $i19 = i16 << 24;
        $i20 = i17 << 16;
        $i21 = $i19 | $i20;
        $i22 = i18 << 8;
        $i23 = $i21 | $i22;
        i3 = $i23 | i6;
        goto label17;

     label16:
        $r11 = new java.io.IOException;
        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Invalid BER/DER data (too huge?)");
        throw $r11;

     label17:
        $i24 = staticinvoke <sun.security.provider.X509Factory: int readFully(java.io.InputStream,java.io.ByteArrayOutputStream,int)>(r0, r1, i3);
        if $i24 == i3 goto label18;

        $r12 = new java.io.IOException;
        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("Incomplete BER/DER data");
        throw $r12;

     label18:
        return i0;
    }

    static void <clinit>()
    {
        sun.security.util.Cache $r0, $r1;

        $r0 = staticinvoke <sun.security.util.Cache: sun.security.util.Cache newSoftMemoryCache(int)>(750);
        <sun.security.provider.X509Factory: sun.security.util.Cache certCache> = $r0;
        $r1 = staticinvoke <sun.security.util.Cache: sun.security.util.Cache newSoftMemoryCache(int)>(750);
        <sun.security.provider.X509Factory: sun.security.util.Cache crlCache> = $r1;
        return;
    }
}
