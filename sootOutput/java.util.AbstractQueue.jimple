public abstract class java.util.AbstractQueue extends java.util.AbstractCollection implements java.util.Queue
{

    protected void <init>()
    {
        java.util.AbstractQueue r0;

        r0 := @this: java.util.AbstractQueue;
        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();
        return;
    }

    public boolean add(java.lang.Object)
    {
        java.util.AbstractQueue r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: java.util.AbstractQueue;
        r1 := @parameter0: java.lang.Object;
        $z0 = virtualinvoke r0.<java.util.AbstractQueue: boolean offer(java.lang.Object)>(r1);
        if $z0 == 0 goto label0;

        return 1;

     label0:
        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Queue full");
        throw $r2;
    }

    public java.lang.Object remove()
    {
        java.util.AbstractQueue r0;
        java.lang.Object r1;
        java.util.NoSuchElementException $r2;

        r0 := @this: java.util.AbstractQueue;
        r1 = virtualinvoke r0.<java.util.AbstractQueue: java.lang.Object poll()>();
        if r1 == null goto label0;

        return r1;

     label0:
        $r2 = new java.util.NoSuchElementException;
        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();
        throw $r2;
    }

    public java.lang.Object element()
    {
        java.util.AbstractQueue r0;
        java.lang.Object r1;
        java.util.NoSuchElementException $r2;

        r0 := @this: java.util.AbstractQueue;
        r1 = virtualinvoke r0.<java.util.AbstractQueue: java.lang.Object peek()>();
        if r1 == null goto label0;

        return r1;

     label0:
        $r2 = new java.util.NoSuchElementException;
        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();
        throw $r2;
    }

    public void clear()
    {
        java.util.AbstractQueue r0;
        java.lang.Object $r1;

        r0 := @this: java.util.AbstractQueue;

     label0:
        $r1 = virtualinvoke r0.<java.util.AbstractQueue: java.lang.Object poll()>();
        if $r1 == null goto label1;

        goto label0;

     label1:
        return;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.AbstractQueue r0;
        java.util.Collection r1;
        boolean z0, $z1, $z2;
        java.util.Iterator r2;
        java.lang.Object r3;
        java.lang.NullPointerException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: java.util.AbstractQueue;
        r1 := @parameter0: java.util.Collection;
        if r1 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label0:
        if r1 != r0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r5;

     label1:
        z0 = 0;
        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label4;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $z2 = virtualinvoke r0.<java.util.AbstractQueue: boolean add(java.lang.Object)>(r3);
        if $z2 == 0 goto label3;

        z0 = 1;

     label3:
        goto label2;

     label4:
        return z0;
    }
}
