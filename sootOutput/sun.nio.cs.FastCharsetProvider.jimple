public class sun.nio.cs.FastCharsetProvider extends java.nio.charset.spi.CharsetProvider
{
    private java.util.Map classMap;
    private java.util.Map aliasMap;
    private java.util.Map cache;
    private java.lang.String packagePrefix;

    protected void <init>(java.lang.String, java.util.Map, java.util.Map, java.util.Map)
    {
        sun.nio.cs.FastCharsetProvider r0;
        java.lang.String r1;
        java.util.Map r2, r3, r4;

        r0 := @this: sun.nio.cs.FastCharsetProvider;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.util.Map;
        r3 := @parameter2: java.util.Map;
        r4 := @parameter3: java.util.Map;
        specialinvoke r0.<java.nio.charset.spi.CharsetProvider: void <init>()>();
        r0.<sun.nio.cs.FastCharsetProvider: java.lang.String packagePrefix> = r1;
        r0.<sun.nio.cs.FastCharsetProvider: java.util.Map aliasMap> = r2;
        r0.<sun.nio.cs.FastCharsetProvider: java.util.Map classMap> = r3;
        r0.<sun.nio.cs.FastCharsetProvider: java.util.Map cache> = r4;
        return;
    }

    private java.lang.String canonicalize(java.lang.String)
    {
        sun.nio.cs.FastCharsetProvider r0;
        java.lang.String r1, r2, $r5;
        java.util.Map $r3;
        java.lang.Object $r4;

        r0 := @this: sun.nio.cs.FastCharsetProvider;
        r1 := @parameter0: java.lang.String;
        $r3 = r0.<sun.nio.cs.FastCharsetProvider: java.util.Map aliasMap>;
        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        r2 = (java.lang.String) $r4;
        if r2 == null goto label0;

        $r5 = r2;
        goto label1;

     label0:
        $r5 = r1;

     label1:
        return $r5;
    }

    private static java.lang.String toLower(java.lang.String)
    {
        java.lang.String r0, $r2;
        int i0, i1, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11;
        boolean z0;
        char c2, c3, $c12, $c13;
        char[] r1;

        r0 := @parameter0: java.lang.String;
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        z0 = 1;
        i1 = 0;

     label0:
        if i1 >= i0 goto label2;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);
        $i4 = c2 - 65;
        $i5 = 90 - c2;
        $i6 = $i4 | $i5;
        if $i6 < 0 goto label1;

        z0 = 0;
        goto label2;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        if z0 == 0 goto label3;

        return r0;

     label3:
        r1 = newarray (char)[i0];
        i7 = 0;

     label4:
        if i7 >= i0 goto label7;

        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);
        $i8 = c3 - 65;
        $i9 = 90 - c3;
        $i10 = $i8 | $i9;
        if $i10 < 0 goto label5;

        $i11 = c3 + 32;
        $c12 = (char) $i11;
        r1[i7] = $c12;
        goto label6;

     label5:
        $c13 = (char) c3;
        r1[i7] = $c13;

     label6:
        i7 = i7 + 1;
        goto label4;

     label7:
        $r2 = new java.lang.String;
        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);
        return $r2;
    }

    private java.nio.charset.Charset lookup(java.lang.String)
    {
        sun.nio.cs.FastCharsetProvider r0;
        java.lang.String r1, r2, r4, $r6, $r16, $r20;
        java.nio.charset.Charset r3, r24;
        java.lang.Class r5, $r21;
        java.util.Map $r7, $r9, $r13, $r25;
        java.lang.Object $r8, $r10, $r23;
        boolean $z0;
        sun.nio.cs.US_ASCII $r11, r12;
        java.lang.StringBuilder $r15, $r17, $r18, $r19;
        java.lang.ClassLoader $r22;
        java.lang.ClassNotFoundException $r28, r29;
        java.lang.IllegalAccessException $r30, r31;
        java.lang.InstantiationException $r32, r33;

        r0 := @this: sun.nio.cs.FastCharsetProvider;
        r1 := @parameter0: java.lang.String;
        $r6 = staticinvoke <sun.nio.cs.FastCharsetProvider: java.lang.String toLower(java.lang.String)>(r1);
        r2 = specialinvoke r0.<sun.nio.cs.FastCharsetProvider: java.lang.String canonicalize(java.lang.String)>($r6);
        $r7 = r0.<sun.nio.cs.FastCharsetProvider: java.util.Map cache>;
        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);
        r3 = (java.nio.charset.Charset) $r8;
        if r3 == null goto label0;

        return r3;

     label0:
        $r9 = r0.<sun.nio.cs.FastCharsetProvider: java.util.Map classMap>;
        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);
        r4 = (java.lang.String) $r10;
        if r4 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("US_ASCII");
        if $z0 == 0 goto label2;

        $r11 = new sun.nio.cs.US_ASCII;
        specialinvoke $r11.<sun.nio.cs.US_ASCII: void <init>()>();
        r12 = $r11;
        $r13 = r0.<sun.nio.cs.FastCharsetProvider: java.util.Map cache>;
        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r12);
        return r12;

     label2:
        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
        $r16 = r0.<sun.nio.cs.FastCharsetProvider: java.lang.String packagePrefix>;
        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        $r21 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r20, 1, $r22);
        $r23 = virtualinvoke r5.<java.lang.Class: java.lang.Object newInstance()>();
        r24 = (java.nio.charset.Charset) $r23;
        $r25 = r0.<sun.nio.cs.FastCharsetProvider: java.util.Map cache>;
        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r24);

     label3:
        return r24;

     label4:
        $r28 := @caughtexception;
        r29 = $r28;
        return null;

     label5:
        $r30 := @caughtexception;
        r31 = $r30;
        return null;

     label6:
        $r32 := @caughtexception;
        r33 = $r32;
        return null;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
        catch java.lang.IllegalAccessException from label2 to label3 with label5;
        catch java.lang.InstantiationException from label2 to label3 with label6;
    }

    public final java.nio.charset.Charset charsetForName(java.lang.String)
    {
        sun.nio.cs.FastCharsetProvider r0, r3;
        java.lang.String r1, $r5;
        java.lang.Throwable r4, $r7;
        java.nio.charset.Charset $r6;

        r0 := @this: sun.nio.cs.FastCharsetProvider;
        r1 := @parameter0: java.lang.String;
        r3 = r0;
        entermonitor r0;

     label0:
        $r5 = specialinvoke r0.<sun.nio.cs.FastCharsetProvider: java.lang.String canonicalize(java.lang.String)>(r1);
        $r6 = specialinvoke r0.<sun.nio.cs.FastCharsetProvider: java.nio.charset.Charset lookup(java.lang.String)>($r5);
        exitmonitor r3;

     label1:
        return $r6;

     label2:
        $r7 := @caughtexception;

     label3:
        r4 = $r7;
        exitmonitor r3;

     label4:
        throw r4;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public final java.util.Iterator charsets()
    {
        sun.nio.cs.FastCharsetProvider r0;
        sun.nio.cs.FastCharsetProvider$1 $r1;

        r0 := @this: sun.nio.cs.FastCharsetProvider;
        $r1 = new sun.nio.cs.FastCharsetProvider$1;
        specialinvoke $r1.<sun.nio.cs.FastCharsetProvider$1: void <init>(sun.nio.cs.FastCharsetProvider)>(r0);
        return $r1;
    }

    static java.util.Map access$000(sun.nio.cs.FastCharsetProvider)
    {
        sun.nio.cs.FastCharsetProvider r0;
        java.util.Map $r1;

        r0 := @parameter0: sun.nio.cs.FastCharsetProvider;
        $r1 = r0.<sun.nio.cs.FastCharsetProvider: java.util.Map classMap>;
        return $r1;
    }

    static java.nio.charset.Charset access$100(sun.nio.cs.FastCharsetProvider, java.lang.String)
    {
        sun.nio.cs.FastCharsetProvider r0;
        java.lang.String r1;
        java.nio.charset.Charset $r2;

        r0 := @parameter0: sun.nio.cs.FastCharsetProvider;
        r1 := @parameter1: java.lang.String;
        $r2 = specialinvoke r0.<sun.nio.cs.FastCharsetProvider: java.nio.charset.Charset lookup(java.lang.String)>(r1);
        return $r2;
    }
}
