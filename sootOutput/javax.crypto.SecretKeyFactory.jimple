public class javax.crypto.SecretKeyFactory extends java.lang.Object
{
    private java.security.Provider provider;
    private final java.lang.String algorithm;
    private volatile javax.crypto.SecretKeyFactorySpi spi;
    private final java.lang.Object lock;
    private java.util.Iterator serviceIterator;

    protected void <init>(javax.crypto.SecretKeyFactorySpi, java.security.Provider, java.lang.String)
    {
        javax.crypto.SecretKeyFactory r0;
        javax.crypto.SecretKeyFactorySpi r1;
        java.security.Provider r2;
        java.lang.String r3;
        java.lang.Object $r4;

        r0 := @this: javax.crypto.SecretKeyFactory;
        r1 := @parameter0: javax.crypto.SecretKeyFactorySpi;
        r2 := @parameter1: java.security.Provider;
        r3 := @parameter2: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r4 = new java.lang.Object;
        specialinvoke $r4.<java.lang.Object: void <init>()>();
        r0.<javax.crypto.SecretKeyFactory: java.lang.Object lock> = $r4;
        r0.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactorySpi spi> = r1;
        r0.<javax.crypto.SecretKeyFactory: java.security.Provider provider> = r2;
        r0.<javax.crypto.SecretKeyFactory: java.lang.String algorithm> = r3;
        return;
    }

    private void <init>(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        javax.crypto.SecretKeyFactory r0;
        java.lang.String r1, $r10;
        java.lang.Object $r2;
        java.util.List r3;
        java.util.Iterator $r4;
        javax.crypto.SecretKeyFactorySpi $r5;
        java.security.NoSuchAlgorithmException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @this: javax.crypto.SecretKeyFactory;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = new java.lang.Object;
        specialinvoke $r2.<java.lang.Object: void <init>()>();
        r0.<javax.crypto.SecretKeyFactory: java.lang.Object lock> = $r2;
        r0.<javax.crypto.SecretKeyFactory: java.lang.String algorithm> = r1;
        r3 = staticinvoke <sun.security.jca.GetInstance: java.util.List getServices(java.lang.String,java.lang.String)>("SecretKeyFactory", r1);
        $r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();
        r0.<javax.crypto.SecretKeyFactory: java.util.Iterator serviceIterator> = $r4;
        $r5 = specialinvoke r0.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactorySpi nextSpi(javax.crypto.SecretKeyFactorySpi)>(null);
        if $r5 != null goto label0;

        $r6 = new java.security.NoSuchAlgorithmException;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SecretKeyFactory not available");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r10);
        throw $r6;

     label0:
        return;
    }

    public static final javax.crypto.SecretKeyFactory getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        javax.crypto.SecretKeyFactory $r1;

        r0 := @parameter0: java.lang.String;
        $r1 = new javax.crypto.SecretKeyFactory;
        specialinvoke $r1.<javax.crypto.SecretKeyFactory: void <init>(java.lang.String)>(r0);
        return $r1;
    }

    public static final javax.crypto.SecretKeyFactory getInstance(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        java.lang.String r0, r1;
        sun.security.jca.GetInstance$Instance r2;
        javax.crypto.SecretKeyFactory $r3;
        java.lang.Object $r4;
        javax.crypto.SecretKeyFactorySpi $r5;
        java.security.Provider $r6;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 = staticinvoke <javax.crypto.JceSecurity: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.lang.String)>("SecretKeyFactory", class "javax/crypto/SecretKeyFactorySpi", r0, r1);
        $r3 = new javax.crypto.SecretKeyFactory;
        $r4 = r2.<sun.security.jca.GetInstance$Instance: java.lang.Object impl>;
        $r5 = (javax.crypto.SecretKeyFactorySpi) $r4;
        $r6 = r2.<sun.security.jca.GetInstance$Instance: java.security.Provider provider>;
        specialinvoke $r3.<javax.crypto.SecretKeyFactory: void <init>(javax.crypto.SecretKeyFactorySpi,java.security.Provider,java.lang.String)>($r5, $r6, r0);
        return $r3;
    }

    public static final javax.crypto.SecretKeyFactory getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        java.security.Provider r1, $r6;
        sun.security.jca.GetInstance$Instance r2;
        javax.crypto.SecretKeyFactory $r3;
        java.lang.Object $r4;
        javax.crypto.SecretKeyFactorySpi $r5;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.security.Provider;
        r2 = staticinvoke <javax.crypto.JceSecurity: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>("SecretKeyFactory", class "javax/crypto/SecretKeyFactorySpi", r0, r1);
        $r3 = new javax.crypto.SecretKeyFactory;
        $r4 = r2.<sun.security.jca.GetInstance$Instance: java.lang.Object impl>;
        $r5 = (javax.crypto.SecretKeyFactorySpi) $r4;
        $r6 = r2.<sun.security.jca.GetInstance$Instance: java.security.Provider provider>;
        specialinvoke $r3.<javax.crypto.SecretKeyFactory: void <init>(javax.crypto.SecretKeyFactorySpi,java.security.Provider,java.lang.String)>($r5, $r6, r0);
        return $r3;
    }

    public final java.security.Provider getProvider()
    {
        javax.crypto.SecretKeyFactory r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.security.Provider $r4;

        r0 := @this: javax.crypto.SecretKeyFactory;
        $r3 = r0.<javax.crypto.SecretKeyFactory: java.lang.Object lock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        r0.<javax.crypto.SecretKeyFactory: java.util.Iterator serviceIterator> = null;
        $r4 = r0.<javax.crypto.SecretKeyFactory: java.security.Provider provider>;
        exitmonitor r1;

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;

     label3:
        r2 = $r5;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public final java.lang.String getAlgorithm()
    {
        javax.crypto.SecretKeyFactory r0;
        java.lang.String $r1;

        r0 := @this: javax.crypto.SecretKeyFactory;
        $r1 = r0.<javax.crypto.SecretKeyFactory: java.lang.String algorithm>;
        return $r1;
    }

    private javax.crypto.SecretKeyFactorySpi nextSpi(javax.crypto.SecretKeyFactorySpi)
    {
        javax.crypto.SecretKeyFactory r0;
        javax.crypto.SecretKeyFactorySpi r1, r5, $r8, $r9;
        java.lang.Object r2, r4, $r7, $r13;
        java.security.Provider$Service r3;
        java.lang.Throwable r6, $r19;
        java.util.Iterator $r10, $r11, $r12;
        null_type $n0, $n1;
        boolean $z0, $z1, $z2;
        java.security.Provider $r14, $r15;
        java.security.NoSuchAlgorithmException $r17, r18;

        r0 := @this: javax.crypto.SecretKeyFactory;
        r1 := @parameter0: javax.crypto.SecretKeyFactorySpi;
        $r7 = r0.<javax.crypto.SecretKeyFactory: java.lang.Object lock>;
        r2 = $r7;
        entermonitor $r7;

     label0:
        if r1 == null goto label2;

        $r8 = r0.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactorySpi spi>;
        if r1 == $r8 goto label2;

        $r9 = r0.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactorySpi spi>;
        exitmonitor r2;

     label1:
        return $r9;

     label2:
        $r10 = r0.<javax.crypto.SecretKeyFactory: java.util.Iterator serviceIterator>;
        if $r10 != null goto label4;

        $n0 = null;
        exitmonitor r2;

     label3:
        return $n0;

     label4:
        $r11 = r0.<javax.crypto.SecretKeyFactory: java.util.Iterator serviceIterator>;
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label12;

        $r12 = r0.<javax.crypto.SecretKeyFactory: java.util.Iterator serviceIterator>;
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.security.Provider$Service) $r13;
        $r14 = virtualinvoke r3.<java.security.Provider$Service: java.security.Provider getProvider()>();
        $z1 = staticinvoke <javax.crypto.JceSecurity: boolean canUseProvider(java.security.Provider)>($r14);
        if $z1 != 0 goto label5;

        goto label4;

     label5:
        r4 = virtualinvoke r3.<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>(null);
        $z2 = r4 instanceof javax.crypto.SecretKeyFactorySpi;
        if $z2 != 0 goto label7;

     label6:
        goto label4;

     label7:
        r5 = (javax.crypto.SecretKeyFactorySpi) r4;
        $r15 = virtualinvoke r3.<java.security.Provider$Service: java.security.Provider getProvider()>();
        r0.<javax.crypto.SecretKeyFactory: java.security.Provider provider> = $r15;
        r0.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactorySpi spi> = r5;

     label8:
        exitmonitor r2;

     label9:
        return r5;

     label10:
        $r17 := @caughtexception;

     label11:
        r18 = $r17;
        goto label4;

     label12:
        r0.<javax.crypto.SecretKeyFactory: java.util.Iterator serviceIterator> = null;
        $n1 = null;
        exitmonitor r2;

     label13:
        return $n1;

     label14:
        $r19 := @caughtexception;

     label15:
        r6 = $r19;
        exitmonitor r2;

     label16:
        throw r6;

        catch java.security.NoSuchAlgorithmException from label5 to label6 with label10;
        catch java.security.NoSuchAlgorithmException from label7 to label8 with label10;
        catch java.lang.Throwable from label0 to label1 with label14;
        catch java.lang.Throwable from label2 to label3 with label14;
        catch java.lang.Throwable from label4 to label9 with label14;
        catch java.lang.Throwable from label11 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public final javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        javax.crypto.SecretKeyFactory r0;
        java.security.spec.KeySpec r1;
        java.lang.Exception r2, r4, $r9;
        javax.crypto.SecretKeyFactorySpi r3, $r6;
        java.util.Iterator $r5;
        javax.crypto.SecretKey $r7, $r8;
        boolean $z0;
        java.security.spec.InvalidKeySpecException $r10, $r11;

        r0 := @this: javax.crypto.SecretKeyFactory;
        r1 := @parameter0: java.security.spec.KeySpec;
        $r5 = r0.<javax.crypto.SecretKeyFactory: java.util.Iterator serviceIterator>;
        if $r5 != null goto label0;

        $r6 = r0.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactorySpi spi>;
        $r7 = virtualinvoke $r6.<javax.crypto.SecretKeyFactorySpi: javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)>(r1);
        return $r7;

     label0:
        r2 = null;
        r3 = r0.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactorySpi spi>;

     label1:
        $r8 = virtualinvoke r3.<javax.crypto.SecretKeyFactorySpi: javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)>(r1);

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;
        r4 = $r9;
        if r2 != null goto label4;

        r2 = r4;

     label4:
        r3 = specialinvoke r0.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactorySpi nextSpi(javax.crypto.SecretKeyFactorySpi)>(r3);
        if r3 != null goto label1;

        $z0 = r2 instanceof java.security.spec.InvalidKeySpecException;
        if $z0 == 0 goto label5;

        $r10 = (java.security.spec.InvalidKeySpecException) r2;
        throw $r10;

     label5:
        $r11 = new java.security.spec.InvalidKeySpecException;
        specialinvoke $r11.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String,java.lang.Throwable)>("Could not generate secret key", r2);
        throw $r11;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public final java.security.spec.KeySpec getKeySpec(javax.crypto.SecretKey, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        javax.crypto.SecretKeyFactory r0;
        javax.crypto.SecretKey r1;
        java.lang.Class r2;
        java.lang.Exception r3, r5, $r10;
        javax.crypto.SecretKeyFactorySpi r4, $r7;
        java.util.Iterator $r6;
        java.security.spec.KeySpec $r8, $r9;
        boolean $z0;
        java.security.spec.InvalidKeySpecException $r11, $r12;

        r0 := @this: javax.crypto.SecretKeyFactory;
        r1 := @parameter0: javax.crypto.SecretKey;
        r2 := @parameter1: java.lang.Class;
        $r6 = r0.<javax.crypto.SecretKeyFactory: java.util.Iterator serviceIterator>;
        if $r6 != null goto label0;

        $r7 = r0.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactorySpi spi>;
        $r8 = virtualinvoke $r7.<javax.crypto.SecretKeyFactorySpi: java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey,java.lang.Class)>(r1, r2);
        return $r8;

     label0:
        r3 = null;
        r4 = r0.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactorySpi spi>;

     label1:
        $r9 = virtualinvoke r4.<javax.crypto.SecretKeyFactorySpi: java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey,java.lang.Class)>(r1, r2);

     label2:
        return $r9;

     label3:
        $r10 := @caughtexception;
        r5 = $r10;
        if r3 != null goto label4;

        r3 = r5;

     label4:
        r4 = specialinvoke r0.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactorySpi nextSpi(javax.crypto.SecretKeyFactorySpi)>(r4);
        if r4 != null goto label1;

        $z0 = r3 instanceof java.security.spec.InvalidKeySpecException;
        if $z0 == 0 goto label5;

        $r11 = (java.security.spec.InvalidKeySpecException) r3;
        throw $r11;

     label5:
        $r12 = new java.security.spec.InvalidKeySpecException;
        specialinvoke $r12.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String,java.lang.Throwable)>("Could not get key spec", r3);
        throw $r12;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public final javax.crypto.SecretKey translateKey(javax.crypto.SecretKey) throws java.security.InvalidKeyException
    {
        javax.crypto.SecretKeyFactory r0;
        javax.crypto.SecretKey r1, $r7, $r8;
        java.lang.Exception r2, r4, $r9;
        javax.crypto.SecretKeyFactorySpi r3, $r6;
        java.util.Iterator $r5;
        boolean $z0;
        java.security.InvalidKeyException $r10, $r11;

        r0 := @this: javax.crypto.SecretKeyFactory;
        r1 := @parameter0: javax.crypto.SecretKey;
        $r5 = r0.<javax.crypto.SecretKeyFactory: java.util.Iterator serviceIterator>;
        if $r5 != null goto label0;

        $r6 = r0.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactorySpi spi>;
        $r7 = virtualinvoke $r6.<javax.crypto.SecretKeyFactorySpi: javax.crypto.SecretKey engineTranslateKey(javax.crypto.SecretKey)>(r1);
        return $r7;

     label0:
        r2 = null;
        r3 = r0.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactorySpi spi>;

     label1:
        $r8 = virtualinvoke r3.<javax.crypto.SecretKeyFactorySpi: javax.crypto.SecretKey engineTranslateKey(javax.crypto.SecretKey)>(r1);

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;
        r4 = $r9;
        if r2 != null goto label4;

        r2 = r4;

     label4:
        r3 = specialinvoke r0.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactorySpi nextSpi(javax.crypto.SecretKeyFactorySpi)>(r3);
        if r3 != null goto label1;

        $z0 = r2 instanceof java.security.InvalidKeyException;
        if $z0 == 0 goto label5;

        $r10 = (java.security.InvalidKeyException) r2;
        throw $r10;

     label5:
        $r11 = new java.security.InvalidKeyException;
        specialinvoke $r11.<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>("Could not translate key", r2);
        throw $r11;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
