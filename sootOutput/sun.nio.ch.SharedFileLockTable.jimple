class sun.nio.ch.SharedFileLockTable extends sun.nio.ch.FileLockTable
{
    private static java.util.concurrent.ConcurrentHashMap lockMap;
    private static java.lang.ref.ReferenceQueue queue;
    private final java.nio.channels.Channel channel;
    private final sun.nio.ch.FileKey fileKey;
    static final boolean $assertionsDisabled;

    void <init>(java.nio.channels.Channel, java.io.FileDescriptor) throws java.io.IOException
    {
        sun.nio.ch.SharedFileLockTable r0;
        java.nio.channels.Channel r1;
        java.io.FileDescriptor r2;
        sun.nio.ch.FileKey $r3;

        r0 := @this: sun.nio.ch.SharedFileLockTable;
        r1 := @parameter0: java.nio.channels.Channel;
        r2 := @parameter1: java.io.FileDescriptor;
        specialinvoke r0.<sun.nio.ch.FileLockTable: void <init>()>();
        r0.<sun.nio.ch.SharedFileLockTable: java.nio.channels.Channel channel> = r1;
        $r3 = staticinvoke <sun.nio.ch.FileKey: sun.nio.ch.FileKey create(java.io.FileDescriptor)>(r2);
        r0.<sun.nio.ch.SharedFileLockTable: sun.nio.ch.FileKey fileKey> = $r3;
        return;
    }

    public void add(java.nio.channels.FileLock) throws java.nio.channels.OverlappingFileLockException
    {
        sun.nio.ch.SharedFileLockTable r0;
        java.nio.channels.FileLock r1;
        java.util.concurrent.ConcurrentHashMap $r2, $r14, $r22;
        java.util.List r3, r5, r21, r25;
        java.util.ArrayList r4, $r11, r12;
        java.lang.ref.ReferenceQueue $r6, $r27;
        java.lang.Throwable r7, r8, $r19, $r29;
        sun.nio.ch.FileKey $r9, $r15, $r18, $r23, $r28;
        java.lang.Object $r10, $r16, $r24;
        sun.nio.ch.SharedFileLockTable$FileLockReference $r17, $r26;
        long $l0, $l1;

        r0 := @this: sun.nio.ch.SharedFileLockTable;
        r1 := @parameter0: java.nio.channels.FileLock;
        $r2 = <sun.nio.ch.SharedFileLockTable: java.util.concurrent.ConcurrentHashMap lockMap>;
        $r9 = r0.<sun.nio.ch.SharedFileLockTable: sun.nio.ch.FileKey fileKey>;
        $r10 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r9);
        r3 = (java.util.List) $r10;

     label0:
        if r3 != null goto label9;

        $r11 = new java.util.ArrayList;
        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>(2);
        r12 = $r11;
        r4 = r12;
        entermonitor r12;

     label1:
        $r14 = <sun.nio.ch.SharedFileLockTable: java.util.concurrent.ConcurrentHashMap lockMap>;
        $r15 = r0.<sun.nio.ch.SharedFileLockTable: sun.nio.ch.FileKey fileKey>;
        $r16 = virtualinvoke $r14.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r15, r12);
        r5 = (java.util.List) $r16;
        if r5 != null goto label3;

        $r17 = new sun.nio.ch.SharedFileLockTable$FileLockReference;
        $r6 = <sun.nio.ch.SharedFileLockTable: java.lang.ref.ReferenceQueue queue>;
        $r18 = r0.<sun.nio.ch.SharedFileLockTable: sun.nio.ch.FileKey fileKey>;
        specialinvoke $r17.<sun.nio.ch.SharedFileLockTable$FileLockReference: void <init>(java.nio.channels.FileLock,java.lang.ref.ReferenceQueue,sun.nio.ch.FileKey)>(r1, $r6, $r18);
        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>($r17);
        exitmonitor r4;

     label2:
        goto label18;

     label3:
        exitmonitor r4;

     label4:
        goto label8;

     label5:
        $r19 := @caughtexception;

     label6:
        r7 = $r19;
        exitmonitor r4;

     label7:
        throw r7;

     label8:
        r3 = r5;

     label9:
        r21 = r3;
        entermonitor r3;

     label10:
        $r22 = <sun.nio.ch.SharedFileLockTable: java.util.concurrent.ConcurrentHashMap lockMap>;
        $r23 = r0.<sun.nio.ch.SharedFileLockTable: sun.nio.ch.FileKey fileKey>;
        $r24 = virtualinvoke $r22.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r23);
        r25 = (java.util.List) $r24;
        if r3 != r25 goto label12;

        $l0 = virtualinvoke r1.<java.nio.channels.FileLock: long position()>();
        $l1 = virtualinvoke r1.<java.nio.channels.FileLock: long size()>();
        specialinvoke r0.<sun.nio.ch.SharedFileLockTable: void checkList(java.util.List,long,long)>(r3, $l0, $l1);
        $r26 = new sun.nio.ch.SharedFileLockTable$FileLockReference;
        $r27 = <sun.nio.ch.SharedFileLockTable: java.lang.ref.ReferenceQueue queue>;
        $r28 = r0.<sun.nio.ch.SharedFileLockTable: sun.nio.ch.FileKey fileKey>;
        specialinvoke $r26.<sun.nio.ch.SharedFileLockTable$FileLockReference: void <init>(java.nio.channels.FileLock,java.lang.ref.ReferenceQueue,sun.nio.ch.FileKey)>(r1, $r27, $r28);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r26);
        exitmonitor r21;

     label11:
        goto label18;

     label12:
        r3 = r25;
        exitmonitor r21;

     label13:
        goto label17;

     label14:
        $r29 := @caughtexception;

     label15:
        r8 = $r29;
        exitmonitor r21;

     label16:
        throw r8;

     label17:
        goto label0;

     label18:
        specialinvoke r0.<sun.nio.ch.SharedFileLockTable: void removeStaleEntries()>();
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private void removeKeyIfEmpty(sun.nio.ch.FileKey, java.util.List)
    {
        sun.nio.ch.SharedFileLockTable r0;
        sun.nio.ch.FileKey r1;
        java.util.List r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r3, $r6;
        java.util.concurrent.ConcurrentHashMap $r4, $r7;
        java.lang.Object $r5;

        r0 := @this: sun.nio.ch.SharedFileLockTable;
        r1 := @parameter0: sun.nio.ch.FileKey;
        r2 := @parameter1: java.util.List;
        $z0 = <sun.nio.ch.SharedFileLockTable: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r2);
        if $z1 != 0 goto label0;

        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label0:
        $z2 = <sun.nio.ch.SharedFileLockTable: boolean $assertionsDisabled>;
        if $z2 != 0 goto label1;

        $r4 = <sun.nio.ch.SharedFileLockTable: java.util.concurrent.ConcurrentHashMap lockMap>;
        $r5 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);
        if $r5 == r2 goto label1;

        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label1:
        $z3 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();
        if $z3 == 0 goto label2;

        $r7 = <sun.nio.ch.SharedFileLockTable: java.util.concurrent.ConcurrentHashMap lockMap>;
        virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r1);

     label2:
        return;
    }

    public void remove(java.nio.channels.FileLock)
    {
        sun.nio.ch.SharedFileLockTable r0;
        java.nio.channels.FileLock r1, r5;
        boolean $z0, $z1;
        java.util.List r2, r3;
        int i0, $i1;
        sun.nio.ch.SharedFileLockTable$FileLockReference r4;
        java.lang.Throwable r6, $r18;
        java.lang.AssertionError $r7, $r16;
        java.util.concurrent.ConcurrentHashMap $r8;
        sun.nio.ch.FileKey $r9;
        java.lang.Object $r10, $r12, $r13;
        java.nio.channels.Channel $r14, $r15;

        r0 := @this: sun.nio.ch.SharedFileLockTable;
        r1 := @parameter0: java.nio.channels.FileLock;
        $z0 = <sun.nio.ch.SharedFileLockTable: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if r1 != null goto label0;

        $r7 = new java.lang.AssertionError;
        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();
        throw $r7;

     label0:
        $r8 = <sun.nio.ch.SharedFileLockTable: java.util.concurrent.ConcurrentHashMap lockMap>;
        $r9 = r0.<sun.nio.ch.SharedFileLockTable: sun.nio.ch.FileKey fileKey>;
        $r10 = virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r9);
        r2 = (java.util.List) $r10;
        if r2 != null goto label1;

        return;

     label1:
        r3 = r2;
        entermonitor r2;

     label2:
        i0 = 0;

     label3:
        $i1 = interfaceinvoke r2.<java.util.List: int size()>();
        if i0 >= $i1 goto label7;

        $r12 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i0);
        r4 = (sun.nio.ch.SharedFileLockTable$FileLockReference) $r12;
        $r13 = virtualinvoke r4.<sun.nio.ch.SharedFileLockTable$FileLockReference: java.lang.Object get()>();
        r5 = (java.nio.channels.FileLock) $r13;
        if r5 != r1 goto label6;

        $z1 = <sun.nio.ch.SharedFileLockTable: boolean $assertionsDisabled>;
        if $z1 != 0 goto label5;

        if r5 == null goto label4;

        $r14 = virtualinvoke r5.<java.nio.channels.FileLock: java.nio.channels.Channel acquiredBy()>();
        $r15 = r0.<sun.nio.ch.SharedFileLockTable: java.nio.channels.Channel channel>;
        if $r14 == $r15 goto label5;

     label4:
        $r16 = new java.lang.AssertionError;
        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();
        throw $r16;

     label5:
        virtualinvoke r4.<sun.nio.ch.SharedFileLockTable$FileLockReference: void clear()>();
        interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>(i0);
        goto label7;

     label6:
        i0 = i0 + 1;
        goto label3;

     label7:
        exitmonitor r3;

     label8:
        goto label12;

     label9:
        $r18 := @caughtexception;

     label10:
        r6 = $r18;
        exitmonitor r3;

     label11:
        throw r6;

     label12:
        return;

        catch java.lang.Throwable from label2 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    public java.util.List removeAll()
    {
        sun.nio.ch.SharedFileLockTable r0;
        java.util.ArrayList $r1, r2;
        java.util.List r3, r4;
        int i0, $i1;
        sun.nio.ch.SharedFileLockTable$FileLockReference r5;
        java.nio.channels.FileLock r6;
        java.lang.Throwable r7, $r18;
        java.util.concurrent.ConcurrentHashMap $r8;
        sun.nio.ch.FileKey $r9, $r17;
        java.lang.Object $r10, $r12, $r13;
        java.nio.channels.Channel $r14, $r15;

        r0 := @this: sun.nio.ch.SharedFileLockTable;
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>()>();
        r2 = $r1;
        $r8 = <sun.nio.ch.SharedFileLockTable: java.util.concurrent.ConcurrentHashMap lockMap>;
        $r9 = r0.<sun.nio.ch.SharedFileLockTable: sun.nio.ch.FileKey fileKey>;
        $r10 = virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r9);
        r3 = (java.util.List) $r10;
        if r3 == null goto label9;

        r4 = r3;
        entermonitor r3;

     label0:
        i0 = 0;

     label1:
        $i1 = interfaceinvoke r3.<java.util.List: int size()>();
        if i0 >= $i1 goto label4;

        $r12 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i0);
        r5 = (sun.nio.ch.SharedFileLockTable$FileLockReference) $r12;
        $r13 = virtualinvoke r5.<sun.nio.ch.SharedFileLockTable$FileLockReference: java.lang.Object get()>();
        r6 = (java.nio.channels.FileLock) $r13;
        if r6 == null goto label2;

        $r14 = virtualinvoke r6.<java.nio.channels.FileLock: java.nio.channels.Channel acquiredBy()>();
        $r15 = r0.<sun.nio.ch.SharedFileLockTable: java.nio.channels.Channel channel>;
        if $r14 != $r15 goto label2;

        virtualinvoke r5.<sun.nio.ch.SharedFileLockTable$FileLockReference: void clear()>();
        interfaceinvoke r3.<java.util.List: java.lang.Object remove(int)>(i0);
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r6);
        goto label3;

     label2:
        i0 = i0 + 1;

     label3:
        goto label1;

     label4:
        $r17 = r0.<sun.nio.ch.SharedFileLockTable: sun.nio.ch.FileKey fileKey>;
        specialinvoke r0.<sun.nio.ch.SharedFileLockTable: void removeKeyIfEmpty(sun.nio.ch.FileKey,java.util.List)>($r17, r3);
        exitmonitor r4;

     label5:
        goto label9;

     label6:
        $r18 := @caughtexception;

     label7:
        r7 = $r18;
        exitmonitor r4;

     label8:
        throw r7;

     label9:
        return r2;

        catch java.lang.Throwable from label0 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void replace(java.nio.channels.FileLock, java.nio.channels.FileLock)
    {
        sun.nio.ch.SharedFileLockTable r0;
        java.nio.channels.FileLock r1, r2, r7;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.util.List r4, r5;
        int i0, $i1;
        sun.nio.ch.SharedFileLockTable$FileLockReference r6, $r8;
        java.lang.ref.ReferenceQueue $r9;
        java.lang.Throwable r10, $r19;
        sun.nio.ch.FileKey $r11, $r17;
        java.lang.Object $r12, $r15, $r16;
        boolean $z0;
        java.lang.AssertionError $r13;

        r0 := @this: sun.nio.ch.SharedFileLockTable;
        r1 := @parameter0: java.nio.channels.FileLock;
        r2 := @parameter1: java.nio.channels.FileLock;
        $r3 = <sun.nio.ch.SharedFileLockTable: java.util.concurrent.ConcurrentHashMap lockMap>;
        $r11 = r0.<sun.nio.ch.SharedFileLockTable: sun.nio.ch.FileKey fileKey>;
        $r12 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r11);
        r4 = (java.util.List) $r12;
        $z0 = <sun.nio.ch.SharedFileLockTable: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if r4 != null goto label0;

        $r13 = new java.lang.AssertionError;
        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();
        throw $r13;

     label0:
        r5 = r4;
        entermonitor r4;

     label1:
        i0 = 0;

     label2:
        $i1 = interfaceinvoke r4.<java.util.List: int size()>();
        if i0 >= $i1 goto label4;

        $r15 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i0);
        r6 = (sun.nio.ch.SharedFileLockTable$FileLockReference) $r15;
        $r16 = virtualinvoke r6.<sun.nio.ch.SharedFileLockTable$FileLockReference: java.lang.Object get()>();
        r7 = (java.nio.channels.FileLock) $r16;
        if r7 != r1 goto label3;

        virtualinvoke r6.<sun.nio.ch.SharedFileLockTable$FileLockReference: void clear()>();
        $r8 = new sun.nio.ch.SharedFileLockTable$FileLockReference;
        $r9 = <sun.nio.ch.SharedFileLockTable: java.lang.ref.ReferenceQueue queue>;
        $r17 = r0.<sun.nio.ch.SharedFileLockTable: sun.nio.ch.FileKey fileKey>;
        specialinvoke $r8.<sun.nio.ch.SharedFileLockTable$FileLockReference: void <init>(java.nio.channels.FileLock,java.lang.ref.ReferenceQueue,sun.nio.ch.FileKey)>(r2, $r9, $r17);
        interfaceinvoke r4.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r8);
        goto label4;

     label3:
        i0 = i0 + 1;
        goto label2;

     label4:
        exitmonitor r5;

     label5:
        goto label9;

     label6:
        $r19 := @caughtexception;

     label7:
        r10 = $r19;
        exitmonitor r5;

     label8:
        throw r10;

     label9:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void checkList(java.util.List, long, long) throws java.nio.channels.OverlappingFileLockException
    {
        sun.nio.ch.SharedFileLockTable r0;
        java.util.List r1;
        long l0, l1;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator r2;
        sun.nio.ch.SharedFileLockTable$FileLockReference r3;
        java.nio.channels.FileLock r4;
        java.lang.AssertionError $r5;
        java.lang.Object $r6, $r7;
        java.nio.channels.OverlappingFileLockException $r8;

        r0 := @this: sun.nio.ch.SharedFileLockTable;
        r1 := @parameter0: java.util.List;
        l0 := @parameter1: long;
        l1 := @parameter2: long;
        $z0 = <sun.nio.ch.SharedFileLockTable: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r1);
        if $z1 != 0 goto label0;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label0:
        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (sun.nio.ch.SharedFileLockTable$FileLockReference) $r6;
        $r7 = virtualinvoke r3.<sun.nio.ch.SharedFileLockTable$FileLockReference: java.lang.Object get()>();
        r4 = (java.nio.channels.FileLock) $r7;
        if r4 == null goto label2;

        $z3 = virtualinvoke r4.<java.nio.channels.FileLock: boolean overlaps(long,long)>(l0, l1);
        if $z3 == 0 goto label2;

        $r8 = new java.nio.channels.OverlappingFileLockException;
        specialinvoke $r8.<java.nio.channels.OverlappingFileLockException: void <init>()>();
        throw $r8;

     label2:
        goto label1;

     label3:
        return;
    }

    private void removeStaleEntries()
    {
        sun.nio.ch.SharedFileLockTable r0;
        java.lang.ref.ReferenceQueue $r1;
        sun.nio.ch.SharedFileLockTable$FileLockReference r2, $r8;
        sun.nio.ch.FileKey r3;
        java.util.List r4, r5;
        java.lang.Throwable r6, $r12;
        java.lang.ref.Reference $r7;
        java.util.concurrent.ConcurrentHashMap $r9;
        java.lang.Object $r10;

        r0 := @this: sun.nio.ch.SharedFileLockTable;

     label0:
        $r1 = <sun.nio.ch.SharedFileLockTable: java.lang.ref.ReferenceQueue queue>;
        $r7 = virtualinvoke $r1.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();
        $r8 = (sun.nio.ch.SharedFileLockTable$FileLockReference) $r7;
        r2 = $r8;
        if $r8 == null goto label7;

        r3 = virtualinvoke r2.<sun.nio.ch.SharedFileLockTable$FileLockReference: sun.nio.ch.FileKey fileKey()>();
        $r9 = <sun.nio.ch.SharedFileLockTable: java.util.concurrent.ConcurrentHashMap lockMap>;
        $r10 = virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r3);
        r4 = (java.util.List) $r10;
        if r4 == null goto label6;

        r5 = r4;
        entermonitor r4;

     label1:
        interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>(r2);
        specialinvoke r0.<sun.nio.ch.SharedFileLockTable: void removeKeyIfEmpty(sun.nio.ch.FileKey,java.util.List)>(r3, r4);
        exitmonitor r5;

     label2:
        goto label6;

     label3:
        $r12 := @caughtexception;

     label4:
        r6 = $r12;
        exitmonitor r5;

     label5:
        throw r6;

     label6:
        goto label0;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.lang.ref.ReferenceQueue $r2;

        $r0 = class "sun/nio/ch/SharedFileLockTable";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.ch.SharedFileLockTable: boolean $assertionsDisabled> = $z1;
        $r1 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
        <sun.nio.ch.SharedFileLockTable: java.util.concurrent.ConcurrentHashMap lockMap> = $r1;
        $r2 = new java.lang.ref.ReferenceQueue;
        specialinvoke $r2.<java.lang.ref.ReferenceQueue: void <init>()>();
        <sun.nio.ch.SharedFileLockTable: java.lang.ref.ReferenceQueue queue> = $r2;
        return;
    }
}
