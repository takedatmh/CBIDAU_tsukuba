public class java.lang.reflect.AccessibleObject extends java.lang.Object implements java.lang.reflect.AnnotatedElement
{
    private static final java.security.Permission ACCESS_PERMISSION;
    boolean override;
    static final sun.reflect.ReflectionFactory reflectionFactory;
    volatile java.lang.Object securityCheckCache;

    public static void setAccessible(java.lang.reflect.AccessibleObject[], boolean) throws java.lang.SecurityException
    {
        java.lang.reflect.AccessibleObject[] r0;
        boolean z0;
        java.lang.SecurityManager r1;
        java.security.Permission $r2;
        int i0, $i1;
        java.lang.reflect.AccessibleObject $r3;

        r0 := @parameter0: java.lang.reflect.AccessibleObject[];
        z0 := @parameter1: boolean;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = <java.lang.reflect.AccessibleObject: java.security.Permission ACCESS_PERMISSION>;
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label0:
        i0 = 0;

     label1:
        $i1 = lengthof r0;
        if i0 >= $i1 goto label2;

        $r3 = r0[i0];
        staticinvoke <java.lang.reflect.AccessibleObject: void setAccessible0(java.lang.reflect.AccessibleObject,boolean)>($r3, z0);
        i0 = i0 + 1;
        goto label1;

     label2:
        return;
    }

    public void setAccessible(boolean) throws java.lang.SecurityException
    {
        java.lang.reflect.AccessibleObject r0;
        boolean z0;
        java.lang.SecurityManager r1;
        java.security.Permission $r2;

        r0 := @this: java.lang.reflect.AccessibleObject;
        z0 := @parameter0: boolean;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = <java.lang.reflect.AccessibleObject: java.security.Permission ACCESS_PERMISSION>;
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label0:
        staticinvoke <java.lang.reflect.AccessibleObject: void setAccessible0(java.lang.reflect.AccessibleObject,boolean)>(r0, z0);
        return;
    }

    private static void setAccessible0(java.lang.reflect.AccessibleObject, boolean) throws java.lang.SecurityException
    {
        java.lang.reflect.AccessibleObject r0;
        boolean z0, $z1;
        java.lang.reflect.Constructor r1;
        java.lang.Class $r2;
        java.lang.SecurityException $r3;

        r0 := @parameter0: java.lang.reflect.AccessibleObject;
        z0 := @parameter1: boolean;
        $z1 = r0 instanceof java.lang.reflect.Constructor;
        if $z1 == 0 goto label0;

        if z0 != 1 goto label0;

        r1 = (java.lang.reflect.Constructor) r0;
        $r2 = virtualinvoke r1.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
        if $r2 != class "java/lang/Class" goto label0;

        $r3 = new java.lang.SecurityException;
        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Can not make a java.lang.Class constructor accessible");
        throw $r3;

     label0:
        r0.<java.lang.reflect.AccessibleObject: boolean override> = z0;
        return;
    }

    public boolean isAccessible()
    {
        java.lang.reflect.AccessibleObject r0;
        boolean $z0;

        r0 := @this: java.lang.reflect.AccessibleObject;
        $z0 = r0.<java.lang.reflect.AccessibleObject: boolean override>;
        return $z0;
    }

    protected void <init>()
    {
        java.lang.reflect.AccessibleObject r0;

        r0 := @this: java.lang.reflect.AccessibleObject;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public java.lang.annotation.Annotation getAnnotation(java.lang.Class)
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.Class r1;
        java.lang.AssertionError $r2;

        r0 := @this: java.lang.reflect.AccessibleObject;
        r1 := @parameter0: java.lang.Class;
        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("All subclasses should override this method");
        throw $r2;
    }

    public boolean isAnnotationPresent(java.lang.Class)
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.Class r1;
        java.lang.annotation.Annotation $r2;
        boolean $z0;

        r0 := @this: java.lang.reflect.AccessibleObject;
        r1 := @parameter0: java.lang.Class;
        $r2 = virtualinvoke r0.<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(r1);
        if $r2 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.annotation.Annotation[] getAnnotations()
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.annotation.Annotation[] $r1;

        r0 := @this: java.lang.reflect.AccessibleObject;
        $r1 = virtualinvoke r0.<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getDeclaredAnnotations()>();
        return $r1;
    }

    public java.lang.annotation.Annotation[] getDeclaredAnnotations()
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.AssertionError $r1;

        r0 := @this: java.lang.reflect.AccessibleObject;
        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("All subclasses should override this method");
        throw $r1;
    }

    void checkAccess(java.lang.Class, java.lang.Class, java.lang.Object, int) throws java.lang.IllegalAccessException
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.Class r1, r2, r5, $r7, $r9, $r10;
        java.lang.Object r3, r4;
        int i0;
        java.lang.Class[] r6, $r8;
        boolean $z0, $z1;

        r0 := @this: java.lang.reflect.AccessibleObject;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.Class;
        r3 := @parameter2: java.lang.Object;
        i0 := @parameter3: int;
        if r1 != r2 goto label0;

        return;

     label0:
        r4 = r0.<java.lang.reflect.AccessibleObject: java.lang.Object securityCheckCache>;
        r5 = r2;
        if r3 == null goto label2;

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>(i0);
        if $z0 == 0 goto label2;

        $r7 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();
        r5 = $r7;
        if $r7 == r2 goto label2;

        $z1 = r4 instanceof java.lang.Class[];
        if $z1 == 0 goto label3;

        $r8 = (java.lang.Class[]) r4;
        r6 = (java.lang.Class[]) $r8;
        $r9 = r6[1];
        if $r9 != r5 goto label1;

        $r10 = r6[0];
        if $r10 != r1 goto label1;

        return;

     label1:
        goto label3;

     label2:
        if r4 != r1 goto label3;

        return;

     label3:
        virtualinvoke r0.<java.lang.reflect.AccessibleObject: void slowCheckMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int,java.lang.Class)>(r1, r2, r3, i0, r5);
        return;
    }

    void slowCheckMemberAccess(java.lang.Class, java.lang.Class, java.lang.Object, int, java.lang.Class) throws java.lang.IllegalAccessException
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.Class r1, r2, r4;
        java.lang.Object r3;
        int i0;
        java.io.Serializable r5, $r6;

        r0 := @this: java.lang.reflect.AccessibleObject;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.Class;
        r3 := @parameter2: java.lang.Object;
        i0 := @parameter3: int;
        r4 := @parameter4: java.lang.Class;
        staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(r1, r2, r3, i0);
        if r4 != r2 goto label0;

        $r6 = r1;
        goto label1;

     label0:
        $r6 = newarray (java.lang.Class)[2];
        $r6[0] = r1;
        $r6[1] = r4;

     label1:
        r5 = $r6;
        r0.<java.lang.reflect.AccessibleObject: java.lang.Object securityCheckCache> = r5;
        return;
    }

    static void <clinit>()
    {
        java.lang.reflect.ReflectPermission $r0;
        sun.reflect.ReflectionFactory$GetReflectionFactoryAction $r1;
        java.lang.Object $r2;
        sun.reflect.ReflectionFactory $r3;

        $r0 = new java.lang.reflect.ReflectPermission;
        specialinvoke $r0.<java.lang.reflect.ReflectPermission: void <init>(java.lang.String)>("suppressAccessChecks");
        <java.lang.reflect.AccessibleObject: java.security.Permission ACCESS_PERMISSION> = $r0;
        $r1 = new sun.reflect.ReflectionFactory$GetReflectionFactoryAction;
        specialinvoke $r1.<sun.reflect.ReflectionFactory$GetReflectionFactoryAction: void <init>()>();
        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        $r3 = (sun.reflect.ReflectionFactory) $r2;
        <java.lang.reflect.AccessibleObject: sun.reflect.ReflectionFactory reflectionFactory> = $r3;
        return;
    }
}
