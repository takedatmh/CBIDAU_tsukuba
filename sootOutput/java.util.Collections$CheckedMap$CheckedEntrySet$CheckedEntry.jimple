class java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry extends java.lang.Object implements java.util.Map$Entry
{
    private final java.util.Map$Entry e;
    private final java.lang.Class valueType;

    void <init>(java.util.Map$Entry, java.lang.Class)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry r0;
        java.util.Map$Entry r1;
        java.lang.Class r2;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry;
        r1 := @parameter0: java.util.Map$Entry;
        r2 := @parameter1: java.lang.Class;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.util.Map$Entry e> = r1;
        r0.<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.lang.Class valueType> = r2;
        return;
    }

    public java.lang.Object getKey()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry r0;
        java.util.Map$Entry $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry;
        $r1 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.util.Map$Entry e>;
        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>();
        return $r2;
    }

    public java.lang.Object getValue()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry r0;
        java.util.Map$Entry $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry;
        $r1 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.util.Map$Entry e>;
        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();
        return $r2;
    }

    public int hashCode()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry r0;
        java.util.Map$Entry $r1;
        int $i0;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry;
        $r1 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.util.Map$Entry e>;
        $i0 = interfaceinvoke $r1.<java.util.Map$Entry: int hashCode()>();
        return $i0;
    }

    public java.lang.String toString()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry r0;
        java.util.Map$Entry $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry;
        $r1 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.util.Map$Entry e>;
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();
        return $r2;
    }

    public java.lang.Object setValue(java.lang.Object)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry r0;
        java.lang.Object r1, $r6;
        java.lang.Class $r2;
        boolean $z0;
        java.lang.ClassCastException $r3;
        java.lang.String $r4;
        java.util.Map$Entry $r5;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry;
        r1 := @parameter0: java.lang.Object;
        if r1 == null goto label0;

        $r2 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.lang.Class valueType>;
        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);
        if $z0 != 0 goto label0;

        $r3 = new java.lang.ClassCastException;
        $r4 = specialinvoke r0.<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.lang.String badValueMsg(java.lang.Object)>(r1);
        specialinvoke $r3.<java.lang.ClassCastException: void <init>(java.lang.String)>($r4);
        throw $r3;

     label0:
        $r5 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.util.Map$Entry e>;
        $r6 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(r1);
        return $r6;
    }

    private java.lang.String badValueMsg(java.lang.Object)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry r0;
        java.lang.Object r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8;
        java.lang.Class $r4, $r7;
        java.lang.String $r9;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry;
        r1 := @parameter0: java.lang.Object;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to insert ");
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" value into map with value type ");
        $r7 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.lang.Class valueType>;
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r9;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.util.Map$Entry $r2, $r4;
        java.util.AbstractMap$SimpleImmutableEntry $r3;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry;
        r1 := @parameter0: java.lang.Object;
        if r1 != r0 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof java.util.Map$Entry;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.util.Map$Entry e>;
        $r3 = new java.util.AbstractMap$SimpleImmutableEntry;
        $r4 = (java.util.Map$Entry) r1;
        specialinvoke $r3.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.util.Map$Entry)>($r4);
        $z1 = interfaceinvoke $r2.<java.util.Map$Entry: boolean equals(java.lang.Object)>($r3);
        return $z1;
    }
}
