public class sun.util.calendar.JulianCalendar extends sun.util.calendar.BaseCalendar
{
    private static final int BCE;
    private static final int CE;
    private static final sun.util.calendar.Era[] eras;
    private static final int JULIAN_EPOCH;
    static final boolean $assertionsDisabled;

    void <init>()
    {
        sun.util.calendar.JulianCalendar r0;
        sun.util.calendar.Era[] $r1;

        r0 := @this: sun.util.calendar.JulianCalendar;
        specialinvoke r0.<sun.util.calendar.BaseCalendar: void <init>()>();
        $r1 = <sun.util.calendar.JulianCalendar: sun.util.calendar.Era[] eras>;
        virtualinvoke r0.<sun.util.calendar.JulianCalendar: void setEras(sun.util.calendar.Era[])>($r1);
        return;
    }

    public java.lang.String getName()
    {
        sun.util.calendar.JulianCalendar r0;

        r0 := @this: sun.util.calendar.JulianCalendar;
        return "julian";
    }

    public sun.util.calendar.JulianCalendar$Date getCalendarDate()
    {
        sun.util.calendar.JulianCalendar r0;
        long $l0;
        sun.util.calendar.JulianCalendar$Date $r1, $r2;

        r0 := @this: sun.util.calendar.JulianCalendar;
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $r1 = virtualinvoke r0.<sun.util.calendar.JulianCalendar: sun.util.calendar.JulianCalendar$Date newCalendarDate()>();
        $r2 = virtualinvoke r0.<sun.util.calendar.JulianCalendar: sun.util.calendar.JulianCalendar$Date getCalendarDate(long,sun.util.calendar.CalendarDate)>($l0, $r1);
        return $r2;
    }

    public sun.util.calendar.JulianCalendar$Date getCalendarDate(long)
    {
        sun.util.calendar.JulianCalendar r0;
        long l0;
        sun.util.calendar.JulianCalendar$Date $r1, $r2;

        r0 := @this: sun.util.calendar.JulianCalendar;
        l0 := @parameter0: long;
        $r1 = virtualinvoke r0.<sun.util.calendar.JulianCalendar: sun.util.calendar.JulianCalendar$Date newCalendarDate()>();
        $r2 = virtualinvoke r0.<sun.util.calendar.JulianCalendar: sun.util.calendar.JulianCalendar$Date getCalendarDate(long,sun.util.calendar.CalendarDate)>(l0, $r1);
        return $r2;
    }

    public sun.util.calendar.JulianCalendar$Date getCalendarDate(long, sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.JulianCalendar r0;
        long l0;
        sun.util.calendar.CalendarDate r1, $r2;
        sun.util.calendar.JulianCalendar$Date $r3;

        r0 := @this: sun.util.calendar.JulianCalendar;
        l0 := @parameter0: long;
        r1 := @parameter1: sun.util.calendar.CalendarDate;
        $r2 = specialinvoke r0.<sun.util.calendar.BaseCalendar: sun.util.calendar.CalendarDate getCalendarDate(long,sun.util.calendar.CalendarDate)>(l0, r1);
        $r3 = (sun.util.calendar.JulianCalendar$Date) $r2;
        return $r3;
    }

    public sun.util.calendar.JulianCalendar$Date getCalendarDate(long, java.util.TimeZone)
    {
        sun.util.calendar.JulianCalendar r0;
        long l0;
        java.util.TimeZone r1;
        sun.util.calendar.JulianCalendar$Date $r2, $r3;

        r0 := @this: sun.util.calendar.JulianCalendar;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.TimeZone;
        $r2 = virtualinvoke r0.<sun.util.calendar.JulianCalendar: sun.util.calendar.JulianCalendar$Date newCalendarDate(java.util.TimeZone)>(r1);
        $r3 = virtualinvoke r0.<sun.util.calendar.JulianCalendar: sun.util.calendar.JulianCalendar$Date getCalendarDate(long,sun.util.calendar.CalendarDate)>(l0, $r2);
        return $r3;
    }

    public sun.util.calendar.JulianCalendar$Date newCalendarDate()
    {
        sun.util.calendar.JulianCalendar r0;
        sun.util.calendar.JulianCalendar$Date $r1;

        r0 := @this: sun.util.calendar.JulianCalendar;
        $r1 = new sun.util.calendar.JulianCalendar$Date;
        specialinvoke $r1.<sun.util.calendar.JulianCalendar$Date: void <init>()>();
        return $r1;
    }

    public sun.util.calendar.JulianCalendar$Date newCalendarDate(java.util.TimeZone)
    {
        sun.util.calendar.JulianCalendar r0;
        java.util.TimeZone r1;
        sun.util.calendar.JulianCalendar$Date $r2;

        r0 := @this: sun.util.calendar.JulianCalendar;
        r1 := @parameter0: java.util.TimeZone;
        $r2 = new sun.util.calendar.JulianCalendar$Date;
        specialinvoke $r2.<sun.util.calendar.JulianCalendar$Date: void <init>(java.util.TimeZone)>(r1);
        return $r2;
    }

    public long getFixedDate(int, int, int, sun.util.calendar.BaseCalendar$Date)
    {
        sun.util.calendar.JulianCalendar r0;
        int i0, i1, i2;
        sun.util.calendar.BaseCalendar$Date r1;
        boolean z0, $z1, $z2, $z3, $z4;
        long l3, l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l15, $l16, l17, $l18, $l19, $l20, $l21, $l22, $l23, l24, $l25, $l26, $l27, $l28, $l29, $l30, $l32;
        byte $b14;
        short $s33;

        r0 := @this: sun.util.calendar.JulianCalendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        r1 := @parameter3: sun.util.calendar.BaseCalendar$Date;
        if i1 != 1 goto label0;

        if i2 != 1 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        z0 = $z1;
        if r1 == null goto label3;

        $z2 = virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: boolean hit(int)>(i0);
        if $z2 == 0 goto label3;

        if z0 == 0 goto label2;

        $l5 = virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: long getCachedJan1()>();
        return $l5;

     label2:
        $l6 = virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: long getCachedJan1()>();
        $l7 = virtualinvoke r0.<sun.util.calendar.JulianCalendar: long getDayOfYear(int,int,int)>(i0, i1, i2);
        $l8 = $l6 + $l7;
        $l9 = $l8 - 1L;
        return $l9;

     label3:
        l3 = (long) i0;
        $l10 = l3 - 1L;
        $l11 = 365L * $l10;
        $l12 = -2L + $l11;
        $l13 = (long) i2;
        l4 = $l12 + $l13;
        $b14 = l3 cmp 0L;
        if $b14 <= 0 goto label4;

        $l15 = l3 - 1L;
        $l16 = $l15 / 4L;
        l17 = l4 + $l16;
        goto label5;

     label4:
        $l18 = l3 - 1L;
        $l19 = staticinvoke <sun.util.calendar.CalendarUtils: long floorDivide(long,long)>($l18, 4L);
        l17 = l4 + $l19;

     label5:
        if i1 <= 0 goto label6;

        $l20 = (long) i1;
        $l21 = 367L * $l20;
        $l22 = $l21 - 362L;
        $l23 = $l22 / 12L;
        l24 = l17 + $l23;
        goto label7;

     label6:
        $l25 = (long) i1;
        $l26 = 367L * $l25;
        $l27 = $l26 - 362L;
        $l28 = staticinvoke <sun.util.calendar.CalendarUtils: long floorDivide(long,long)>($l27, 12L);
        l24 = l17 + $l28;

     label7:
        if i1 <= 2 goto label10;

        $l29 = l24;
        $z3 = staticinvoke <sun.util.calendar.CalendarUtils: boolean isJulianLeapYear(int)>(i0);
        if $z3 == 0 goto label8;

        $l30 = 1L;
        goto label9;

     label8:
        $l30 = 2L;

     label9:
        l24 = $l29 - $l30;

     label10:
        if r1 == null goto label13;

        if z0 == 0 goto label13;

        $l32 = l24;
        $z4 = staticinvoke <sun.util.calendar.CalendarUtils: boolean isJulianLeapYear(int)>(i0);
        if $z4 == 0 goto label11;

        $s33 = 366;
        goto label12;

     label11:
        $s33 = 365;

     label12:
        virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: void setCache(int,long,int)>(i0, $l32, $s33);

     label13:
        return l24;
    }

    public void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate, long)
    {
        sun.util.calendar.JulianCalendar r0;
        sun.util.calendar.CalendarDate r1;
        long l0, l1, $l7, $l8, $l10, $l11, $l12, $l13, $l14, $l20, $l21;
        sun.util.calendar.JulianCalendar$Date r2;
        int i2, i3, i4, i5, i6, $i16, $i18, i19, $i22;
        boolean z0, $z1;
        byte $b9, $b15, $b17;
        java.lang.AssertionError $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: sun.util.calendar.JulianCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        l0 := @parameter1: long;
        r2 = (sun.util.calendar.JulianCalendar$Date) r1;
        $l7 = l0 - -1L;
        $l8 = 4L * $l7;
        l1 = $l8 + 1464L;
        $b9 = l1 cmp 0L;
        if $b9 < 0 goto label0;

        $l10 = l1 / 1461L;
        i2 = (int) $l10;
        goto label1;

     label0:
        $l11 = staticinvoke <sun.util.calendar.CalendarUtils: long floorDivide(long,long)>(l1, 1461L);
        i2 = (int) $l11;

     label1:
        $l12 = virtualinvoke r0.<sun.util.calendar.JulianCalendar: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>(i2, 1, 1, r2);
        $l13 = l0 - $l12;
        i3 = (int) $l13;
        z0 = staticinvoke <sun.util.calendar.CalendarUtils: boolean isJulianLeapYear(int)>(i2);
        $l14 = virtualinvoke r0.<sun.util.calendar.JulianCalendar: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>(i2, 3, 1, r2);
        $b15 = l0 cmp $l14;
        if $b15 < 0 goto label4;

        $i16 = i3;
        if z0 == 0 goto label2;

        $b17 = 1;
        goto label3;

     label2:
        $b17 = 2;

     label3:
        i3 = $i16 + $b17;

     label4:
        $i18 = 12 * i3;
        i4 = $i18 + 373;
        if i4 <= 0 goto label5;

        i19 = i4 / 367;
        goto label6;

     label5:
        i19 = staticinvoke <sun.util.calendar.CalendarUtils: int floorDivide(int,int)>(i4, 367);

     label6:
        $l20 = virtualinvoke r0.<sun.util.calendar.JulianCalendar: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>(i2, i19, 1, r2);
        $l21 = l0 - $l20;
        $i22 = (int) $l21;
        i5 = $i22 + 1;
        i6 = staticinvoke <sun.util.calendar.JulianCalendar: int getDayOfWeekFromFixedDate(long)>(l0);
        $z1 = <sun.util.calendar.JulianCalendar: boolean $assertionsDisabled>;
        if $z1 != 0 goto label7;

        if i6 > 0 goto label7;

        $r3 = new java.lang.AssertionError;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("negative day of week ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);
        throw $r3;

     label7:
        virtualinvoke r2.<sun.util.calendar.JulianCalendar$Date: void setNormalizedYear(int)>(i2);
        virtualinvoke r2.<sun.util.calendar.JulianCalendar$Date: sun.util.calendar.CalendarDate setMonth(int)>(i19);
        virtualinvoke r2.<sun.util.calendar.JulianCalendar$Date: sun.util.calendar.CalendarDate setDayOfMonth(int)>(i5);
        virtualinvoke r2.<sun.util.calendar.JulianCalendar$Date: void setDayOfWeek(int)>(i6);
        virtualinvoke r2.<sun.util.calendar.JulianCalendar$Date: void setLeapYear(boolean)>(z0);
        virtualinvoke r2.<sun.util.calendar.JulianCalendar$Date: void setNormalized(boolean)>(1);
        return;
    }

    public int getYearFromFixedDate(long)
    {
        sun.util.calendar.JulianCalendar r0;
        long l0, $l2, $l3, $l4, $l5;
        int i1;

        r0 := @this: sun.util.calendar.JulianCalendar;
        l0 := @parameter0: long;
        $l2 = l0 - -1L;
        $l3 = 4L * $l2;
        $l4 = $l3 + 1464L;
        $l5 = staticinvoke <sun.util.calendar.CalendarUtils: long floorDivide(long,long)>($l4, 1461L);
        i1 = (int) $l5;
        return i1;
    }

    public int getDayOfWeek(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.JulianCalendar r0;
        sun.util.calendar.CalendarDate r1;
        long l0;
        int $i1;

        r0 := @this: sun.util.calendar.JulianCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        l0 = virtualinvoke r0.<sun.util.calendar.JulianCalendar: long getFixedDate(sun.util.calendar.CalendarDate)>(r1);
        $i1 = staticinvoke <sun.util.calendar.JulianCalendar: int getDayOfWeekFromFixedDate(long)>(l0);
        return $i1;
    }

    boolean isLeapYear(int)
    {
        sun.util.calendar.JulianCalendar r0;
        int i0;
        boolean $z0;

        r0 := @this: sun.util.calendar.JulianCalendar;
        i0 := @parameter0: int;
        $z0 = staticinvoke <sun.util.calendar.CalendarUtils: boolean isJulianLeapYear(int)>(i0);
        return $z0;
    }

    public volatile sun.util.calendar.CalendarDate getCalendarDate(long, sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.JulianCalendar r0;
        long l0;
        sun.util.calendar.CalendarDate r1;
        sun.util.calendar.JulianCalendar$Date $r2;

        r0 := @this: sun.util.calendar.JulianCalendar;
        l0 := @parameter0: long;
        r1 := @parameter1: sun.util.calendar.CalendarDate;
        $r2 = virtualinvoke r0.<sun.util.calendar.JulianCalendar: sun.util.calendar.JulianCalendar$Date getCalendarDate(long,sun.util.calendar.CalendarDate)>(l0, r1);
        return $r2;
    }

    public volatile sun.util.calendar.CalendarDate getCalendarDate(long, java.util.TimeZone)
    {
        sun.util.calendar.JulianCalendar r0;
        long l0;
        java.util.TimeZone r1;
        sun.util.calendar.JulianCalendar$Date $r2;

        r0 := @this: sun.util.calendar.JulianCalendar;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.TimeZone;
        $r2 = virtualinvoke r0.<sun.util.calendar.JulianCalendar: sun.util.calendar.JulianCalendar$Date getCalendarDate(long,java.util.TimeZone)>(l0, r1);
        return $r2;
    }

    public volatile sun.util.calendar.CalendarDate getCalendarDate(long)
    {
        sun.util.calendar.JulianCalendar r0;
        long l0;
        sun.util.calendar.JulianCalendar$Date $r1;

        r0 := @this: sun.util.calendar.JulianCalendar;
        l0 := @parameter0: long;
        $r1 = virtualinvoke r0.<sun.util.calendar.JulianCalendar: sun.util.calendar.JulianCalendar$Date getCalendarDate(long)>(l0);
        return $r1;
    }

    public volatile sun.util.calendar.CalendarDate getCalendarDate()
    {
        sun.util.calendar.JulianCalendar r0;
        sun.util.calendar.JulianCalendar$Date $r1;

        r0 := @this: sun.util.calendar.JulianCalendar;
        $r1 = virtualinvoke r0.<sun.util.calendar.JulianCalendar: sun.util.calendar.JulianCalendar$Date getCalendarDate()>();
        return $r1;
    }

    public volatile sun.util.calendar.CalendarDate newCalendarDate(java.util.TimeZone)
    {
        sun.util.calendar.JulianCalendar r0;
        java.util.TimeZone r1;
        sun.util.calendar.JulianCalendar$Date $r2;

        r0 := @this: sun.util.calendar.JulianCalendar;
        r1 := @parameter0: java.util.TimeZone;
        $r2 = virtualinvoke r0.<sun.util.calendar.JulianCalendar: sun.util.calendar.JulianCalendar$Date newCalendarDate(java.util.TimeZone)>(r1);
        return $r2;
    }

    public volatile sun.util.calendar.CalendarDate newCalendarDate()
    {
        sun.util.calendar.JulianCalendar r0;
        sun.util.calendar.JulianCalendar$Date $r1;

        r0 := @this: sun.util.calendar.JulianCalendar;
        $r1 = virtualinvoke r0.<sun.util.calendar.JulianCalendar: sun.util.calendar.JulianCalendar$Date newCalendarDate()>();
        return $r1;
    }

    static sun.util.calendar.Era[] access$000()
    {
        sun.util.calendar.Era[] $r0;

        $r0 = <sun.util.calendar.JulianCalendar: sun.util.calendar.Era[] eras>;
        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        sun.util.calendar.Era $r1, $r3;
        boolean $z0, $z1;
        sun.util.calendar.Era[] $r2;

        $r0 = class "sun/util/calendar/JulianCalendar";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.util.calendar.JulianCalendar: boolean $assertionsDisabled> = $z1;
        $r2 = newarray (sun.util.calendar.Era)[2];
        $r1 = new sun.util.calendar.Era;
        specialinvoke $r1.<sun.util.calendar.Era: void <init>(java.lang.String,java.lang.String,long,boolean)>("BeforeCommonEra", "B.C.E.", -9223372036854775808L, 0);
        $r2[0] = $r1;
        $r3 = new sun.util.calendar.Era;
        specialinvoke $r3.<sun.util.calendar.Era: void <init>(java.lang.String,java.lang.String,long,boolean)>("CommonEra", "C.E.", -62135709175808L, 1);
        $r2[1] = $r3;
        <sun.util.calendar.JulianCalendar: sun.util.calendar.Era[] eras> = $r2;
        return;
    }
}
