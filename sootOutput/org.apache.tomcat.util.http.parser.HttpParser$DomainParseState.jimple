final enum class org.apache.tomcat.util.http.parser.HttpParser$DomainParseState extends java.lang.Enum
{
    public static final enum org.apache.tomcat.util.http.parser.HttpParser$DomainParseState NEW;
    public static final enum org.apache.tomcat.util.http.parser.HttpParser$DomainParseState ALPHA;
    public static final enum org.apache.tomcat.util.http.parser.HttpParser$DomainParseState NUMERIC;
    public static final enum org.apache.tomcat.util.http.parser.HttpParser$DomainParseState PERIOD;
    public static final enum org.apache.tomcat.util.http.parser.HttpParser$DomainParseState HYPHEN;
    public static final enum org.apache.tomcat.util.http.parser.HttpParser$DomainParseState COLON;
    public static final enum org.apache.tomcat.util.http.parser.HttpParser$DomainParseState END;
    private final boolean mayContinue;
    private final boolean allowsHyphen;
    private final boolean allowsPeriod;
    private final boolean allowsEnd;
    private final java.lang.String errorLocation;
    private static final org.apache.tomcat.util.http.parser.HttpParser$DomainParseState[] ENUM$VALUES;

    static void <clinit>()
    {
        org.apache.tomcat.util.http.parser.HttpParser$DomainParseState $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        org.apache.tomcat.util.http.parser.HttpParser$DomainParseState[] $r7;

        $r0 = new org.apache.tomcat.util.http.parser.HttpParser$DomainParseState;
        specialinvoke $r0.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean,java.lang.String)>("NEW", 0, 1, 0, 0, 0, " at the start of");
        <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState NEW> = $r0;
        $r1 = new org.apache.tomcat.util.http.parser.HttpParser$DomainParseState;
        specialinvoke $r1.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean,java.lang.String)>("ALPHA", 1, 1, 1, 1, 1, " after a letter in");
        <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState ALPHA> = $r1;
        $r2 = new org.apache.tomcat.util.http.parser.HttpParser$DomainParseState;
        specialinvoke $r2.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean,java.lang.String)>("NUMERIC", 2, 1, 1, 1, 1, " after a number in");
        <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState NUMERIC> = $r2;
        $r3 = new org.apache.tomcat.util.http.parser.HttpParser$DomainParseState;
        specialinvoke $r3.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean,java.lang.String)>("PERIOD", 3, 1, 0, 0, 1, " after a period in");
        <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState PERIOD> = $r3;
        $r4 = new org.apache.tomcat.util.http.parser.HttpParser$DomainParseState;
        specialinvoke $r4.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean,java.lang.String)>("HYPHEN", 4, 1, 1, 0, 0, " after a hypen in");
        <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState HYPHEN> = $r4;
        $r5 = new org.apache.tomcat.util.http.parser.HttpParser$DomainParseState;
        specialinvoke $r5.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean,java.lang.String)>("COLON", 5, 0, 0, 0, 0, " after a colon in");
        <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState COLON> = $r5;
        $r6 = new org.apache.tomcat.util.http.parser.HttpParser$DomainParseState;
        specialinvoke $r6.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean,java.lang.String)>("END", 6, 0, 0, 0, 0, " at the end of");
        <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState END> = $r6;
        $r7 = newarray (org.apache.tomcat.util.http.parser.HttpParser$DomainParseState)[7];
        $r8 = <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState NEW>;
        $r7[0] = $r8;
        $r9 = <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState ALPHA>;
        $r7[1] = $r9;
        $r10 = <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState NUMERIC>;
        $r7[2] = $r10;
        $r11 = <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState PERIOD>;
        $r7[3] = $r11;
        $r12 = <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState HYPHEN>;
        $r7[4] = $r12;
        $r13 = <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState COLON>;
        $r7[5] = $r13;
        $r14 = <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState END>;
        $r7[6] = $r14;
        <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState[] ENUM$VALUES> = $r7;
        return;
    }

    private void <init>(java.lang.String, int, boolean, boolean, boolean, boolean, java.lang.String)
    {
        org.apache.tomcat.util.http.parser.HttpParser$DomainParseState r0;
        java.lang.String r1, r2;
        int i0;
        boolean z0, z1, z2, z3;

        r0 := @this: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        z0 := @parameter2: boolean;
        z1 := @parameter3: boolean;
        z2 := @parameter4: boolean;
        z3 := @parameter5: boolean;
        r2 := @parameter6: java.lang.String;
        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);
        r0.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: boolean mayContinue> = z0;
        r0.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: boolean allowsHyphen> = z1;
        r0.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: boolean allowsPeriod> = z2;
        r0.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: boolean allowsEnd> = z3;
        r0.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: java.lang.String errorLocation> = r2;
        return;
    }

    public boolean mayContinue()
    {
        org.apache.tomcat.util.http.parser.HttpParser$DomainParseState r0;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState;
        $z0 = r0.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: boolean mayContinue>;
        return $z0;
    }

    public org.apache.tomcat.util.http.parser.HttpParser$DomainParseState next(int)
    {
        org.apache.tomcat.util.http.parser.HttpParser$DomainParseState r0, $r2, $r3, $r4, $r10, $r17, $r23;
        int i0;
        org.apache.tomcat.util.res.StringManager $r1, $r12, $r19, $r25, $r31;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalArgumentException $r5, $r11, $r18, $r24, $r30;
        java.lang.Object[] $r6, $r13, $r20, $r26, $r32;
        char $c1, $c2, $c3, $c4;
        java.lang.String $r7, $r8, $r9, $r14, $r15, $r16, $r21, $r22, $r27, $r28, $r29, $r33, $r34;

        r0 := @this: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState;
        i0 := @parameter0: int;
        $z0 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: boolean isAlpha(int)>(i0);
        if $z0 == 0 goto label0;

        $r2 = <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState ALPHA>;
        return $r2;

     label0:
        $z1 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: boolean isNumeric(int)>(i0);
        if $z1 == 0 goto label1;

        $r3 = <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState NUMERIC>;
        return $r3;

     label1:
        if i0 != 46 goto label3;

        $z2 = r0.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: boolean allowsPeriod>;
        if $z2 == 0 goto label2;

        $r4 = <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState PERIOD>;
        return $r4;

     label2:
        $r5 = new java.lang.IllegalArgumentException;
        $r1 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager access$0()>();
        $r6 = newarray (java.lang.Object)[2];
        $c1 = (char) i0;
        $r7 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c1);
        $r6[0] = $r7;
        $r8 = r0.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: java.lang.String errorLocation>;
        $r6[1] = $r8;
        $r9 = virtualinvoke $r1.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("http.invalidCharacterDomain", $r6);
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);
        throw $r5;

     label3:
        if i0 != 58 goto label5;

        $z3 = r0.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: boolean allowsEnd>;
        if $z3 == 0 goto label4;

        $r10 = <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState COLON>;
        return $r10;

     label4:
        $r11 = new java.lang.IllegalArgumentException;
        $r12 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager access$0()>();
        $r13 = newarray (java.lang.Object)[2];
        $c2 = (char) i0;
        $r14 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c2);
        $r13[0] = $r14;
        $r15 = r0.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: java.lang.String errorLocation>;
        $r13[1] = $r15;
        $r16 = virtualinvoke $r12.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("http.invalidCharacterDomain", $r13);
        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);
        throw $r11;

     label5:
        if i0 != -1 goto label7;

        $z4 = r0.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: boolean allowsEnd>;
        if $z4 == 0 goto label6;

        $r17 = <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState END>;
        return $r17;

     label6:
        $r18 = new java.lang.IllegalArgumentException;
        $r19 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager access$0()>();
        $r20 = newarray (java.lang.Object)[1];
        $r21 = virtualinvoke r0.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: java.lang.String name()>();
        $r20[0] = $r21;
        $r22 = virtualinvoke $r19.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("http.invalidSegmentEndState", $r20);
        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);
        throw $r18;

     label7:
        if i0 != 45 goto label9;

        $z5 = r0.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: boolean allowsHyphen>;
        if $z5 == 0 goto label8;

        $r23 = <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState HYPHEN>;
        return $r23;

     label8:
        $r24 = new java.lang.IllegalArgumentException;
        $r25 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager access$0()>();
        $r26 = newarray (java.lang.Object)[2];
        $c3 = (char) i0;
        $r27 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c3);
        $r26[0] = $r27;
        $r28 = r0.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: java.lang.String errorLocation>;
        $r26[1] = $r28;
        $r29 = virtualinvoke $r25.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("http.invalidCharacterDomain", $r26);
        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);
        throw $r24;

     label9:
        $r30 = new java.lang.IllegalArgumentException;
        $r31 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager access$0()>();
        $r32 = newarray (java.lang.Object)[1];
        $c4 = (char) i0;
        $r33 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c4);
        $r32[0] = $r33;
        $r34 = virtualinvoke $r31.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("http.illegalCharacterDomain", $r32);
        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r34);
        throw $r30;
    }

    public static org.apache.tomcat.util.http.parser.HttpParser$DomainParseState[] values()
    {
        org.apache.tomcat.util.http.parser.HttpParser$DomainParseState[] $r0, r1, r2, $r3;
        int i0, $i1;

        $r0 = <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState[] ENUM$VALUES>;
        r1 = $r0;
        $i1 = lengthof r1;
        i0 = $i1;
        $r3 = newarray (org.apache.tomcat.util.http.parser.HttpParser$DomainParseState)[$i1];
        r2 = $r3;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r3, 0, i0);
        return r2;
    }

    public static org.apache.tomcat.util.http.parser.HttpParser$DomainParseState valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.apache.tomcat.util.http.parser.HttpParser$DomainParseState $r2;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "org/apache/tomcat/util/http/parser/HttpParser$DomainParseState", r0);
        $r2 = (org.apache.tomcat.util.http.parser.HttpParser$DomainParseState) $r1;
        return $r2;
    }
}
