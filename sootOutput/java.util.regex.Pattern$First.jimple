final class java.util.regex.Pattern$First extends java.util.regex.Pattern$Node
{
    java.util.regex.Pattern$Node atom;

    void <init>(java.util.regex.Pattern$Node)
    {
        java.util.regex.Pattern$First r0;
        java.util.regex.Pattern$Node r1, $r2;

        r0 := @this: java.util.regex.Pattern$First;
        r1 := @parameter0: java.util.regex.Pattern$Node;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        $r2 = staticinvoke <java.util.regex.Pattern$BnM: java.util.regex.Pattern$Node optimize(java.util.regex.Pattern$Node)>(r1);
        r0.<java.util.regex.Pattern$First: java.util.regex.Pattern$Node atom> = $r2;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$First r0;
        java.util.regex.Matcher r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.CharSequence r2;
        java.util.regex.Pattern$Node $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: java.util.regex.Pattern$First;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $r3 = r0.<java.util.regex.Pattern$First: java.util.regex.Pattern$Node atom>;
        $z0 = $r3 instanceof java.util.regex.Pattern$BnM;
        if $z0 == 0 goto label2;

        $r4 = r0.<java.util.regex.Pattern$First: java.util.regex.Pattern$Node atom>;
        $z1 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z1 == 0 goto label0;

        $r5 = r0.<java.util.regex.Pattern$First: java.util.regex.Pattern$Node next>;
        $i1 = r1.<java.util.regex.Matcher: int last>;
        $z2 = virtualinvoke $r5.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, $i1, r2);
        if $z2 == 0 goto label0;

        $z3 = 1;
        goto label1;

     label0:
        $z3 = 0;

     label1:
        return $z3;

     label2:
        $i2 = r1.<java.util.regex.Matcher: int 'to'>;
        if i0 <= $i2 goto label3;

        r1.<java.util.regex.Matcher: boolean hitEnd> = 1;
        return 0;

     label3:
        $r6 = r0.<java.util.regex.Pattern$First: java.util.regex.Pattern$Node atom>;
        $z4 = virtualinvoke $r6.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z4 == 0 goto label4;

        $r7 = r0.<java.util.regex.Pattern$First: java.util.regex.Pattern$Node next>;
        $i3 = r1.<java.util.regex.Matcher: int last>;
        $z5 = virtualinvoke $r7.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, $i3, r2);
        return $z5;

     label4:
        $i4 = staticinvoke <java.util.regex.Pattern: int access$300(java.lang.CharSequence,int,int)>(r2, i0, 1);
        i0 = i0 + $i4;
        $i5 = r1.<java.util.regex.Matcher: int first>;
        $i6 = $i5 + 1;
        r1.<java.util.regex.Matcher: int first> = $i6;
        goto label2;
    }

    boolean study(java.util.regex.Pattern$TreeInfo)
    {
        java.util.regex.Pattern$First r0;
        java.util.regex.Pattern$TreeInfo r1;
        java.util.regex.Pattern$Node $r2, $r3;
        boolean $z1;

        r0 := @this: java.util.regex.Pattern$First;
        r1 := @parameter0: java.util.regex.Pattern$TreeInfo;
        $r2 = r0.<java.util.regex.Pattern$First: java.util.regex.Pattern$Node atom>;
        virtualinvoke $r2.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid> = 0;
        r1.<java.util.regex.Pattern$TreeInfo: boolean deterministic> = 0;
        $r3 = r0.<java.util.regex.Pattern$First: java.util.regex.Pattern$Node next>;
        $z1 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        return $z1;
    }
}
