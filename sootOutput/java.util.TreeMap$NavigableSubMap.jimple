abstract class java.util.TreeMap$NavigableSubMap extends java.util.AbstractMap implements java.util.NavigableMap, java.io.Serializable
{
    final java.util.TreeMap m;
    final java.lang.Object lo;
    final java.lang.Object hi;
    final boolean fromStart;
    final boolean toEnd;
    final boolean loInclusive;
    final boolean hiInclusive;
    transient java.util.NavigableMap descendingMapView;
    transient java.util.TreeMap$NavigableSubMap$EntrySetView entrySetView;
    transient java.util.TreeMap$KeySet navigableKeySetView;

    void <init>(java.util.TreeMap, boolean, java.lang.Object, boolean, boolean, java.lang.Object, boolean)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.util.TreeMap r1;
        boolean z0, z1, z2, z3;
        java.lang.Object r2, r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.util.TreeMap;
        z0 := @parameter1: boolean;
        r2 := @parameter2: java.lang.Object;
        z1 := @parameter3: boolean;
        z2 := @parameter4: boolean;
        r3 := @parameter5: java.lang.Object;
        z3 := @parameter6: boolean;
        specialinvoke r0.<java.util.AbstractMap: void <init>()>();
        r0.<java.util.TreeMap$NavigableSubMap: java.util.NavigableMap descendingMapView> = null;
        r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$NavigableSubMap$EntrySetView entrySetView> = null;
        r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$KeySet navigableKeySetView> = null;
        if z0 != 0 goto label0;

        if z2 != 0 goto label0;

        $i0 = virtualinvoke r1.<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>(r2, r3);
        if $i0 <= 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("fromKey > toKey");
        throw $r4;

     label0:
        if z0 != 0 goto label1;

        virtualinvoke r1.<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>(r2, r2);

     label1:
        if z2 != 0 goto label2;

        virtualinvoke r1.<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>(r3, r3);

     label2:
        r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m> = r1;
        r0.<java.util.TreeMap$NavigableSubMap: boolean fromStart> = z0;
        r0.<java.util.TreeMap$NavigableSubMap: java.lang.Object lo> = r2;
        r0.<java.util.TreeMap$NavigableSubMap: boolean loInclusive> = z1;
        r0.<java.util.TreeMap$NavigableSubMap: boolean toEnd> = z2;
        r0.<java.util.TreeMap$NavigableSubMap: java.lang.Object hi> = r3;
        r0.<java.util.TreeMap$NavigableSubMap: boolean hiInclusive> = z3;
        return;
    }

    final boolean tooLow(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1, $r3;
        int i0;
        boolean $z0, $z1;
        java.util.TreeMap $r2;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $z0 = r0.<java.util.TreeMap$NavigableSubMap: boolean fromStart>;
        if $z0 != 0 goto label1;

        $r2 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r3 = r0.<java.util.TreeMap$NavigableSubMap: java.lang.Object lo>;
        i0 = virtualinvoke $r2.<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>(r1, $r3);
        if i0 < 0 goto label0;

        if i0 != 0 goto label1;

        $z1 = r0.<java.util.TreeMap$NavigableSubMap: boolean loInclusive>;
        if $z1 != 0 goto label1;

     label0:
        return 1;

     label1:
        return 0;
    }

    final boolean tooHigh(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1, $r3;
        int i0;
        boolean $z0, $z1;
        java.util.TreeMap $r2;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $z0 = r0.<java.util.TreeMap$NavigableSubMap: boolean toEnd>;
        if $z0 != 0 goto label1;

        $r2 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r3 = r0.<java.util.TreeMap$NavigableSubMap: java.lang.Object hi>;
        i0 = virtualinvoke $r2.<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>(r1, $r3);
        if i0 > 0 goto label0;

        if i0 != 0 goto label1;

        $z1 = r0.<java.util.TreeMap$NavigableSubMap: boolean hiInclusive>;
        if $z1 != 0 goto label1;

     label0:
        return 1;

     label1:
        return 0;
    }

    final boolean inRange(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $z0 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: boolean tooLow(java.lang.Object)>(r1);
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: boolean tooHigh(java.lang.Object)>(r1);
        if $z1 != 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;
    }

    final boolean inClosedRange(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1, $r3, $r5;
        boolean $z0, $z1, $z2;
        java.util.TreeMap $r2, $r4;
        int $i0, $i1;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $z0 = r0.<java.util.TreeMap$NavigableSubMap: boolean fromStart>;
        if $z0 != 0 goto label0;

        $r2 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r3 = r0.<java.util.TreeMap$NavigableSubMap: java.lang.Object lo>;
        $i0 = virtualinvoke $r2.<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>(r1, $r3);
        if $i0 < 0 goto label2;

     label0:
        $z1 = r0.<java.util.TreeMap$NavigableSubMap: boolean toEnd>;
        if $z1 != 0 goto label1;

        $r4 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r5 = r0.<java.util.TreeMap$NavigableSubMap: java.lang.Object hi>;
        $i1 = virtualinvoke $r4.<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>($r5, r1);
        if $i1 < 0 goto label2;

     label1:
        $z2 = 1;
        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    final boolean inRange(java.lang.Object, boolean)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1;
        boolean z0, $z1;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        z0 := @parameter1: boolean;
        if z0 == 0 goto label0;

        $z1 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: boolean inRange(java.lang.Object)>(r1);
        goto label1;

     label0:
        $z1 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: boolean inClosedRange(java.lang.Object)>(r1);

     label1:
        return $z1;
    }

    final java.util.TreeMap$Entry absLowest()
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.util.TreeMap$Entry r1, $r3, $r9;
        boolean $z0, $z1, $z2;
        java.util.TreeMap $r2, $r4, $r6;
        java.lang.Object $r5, $r7, $r8;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        $z0 = r0.<java.util.TreeMap$NavigableSubMap: boolean fromStart>;
        if $z0 == 0 goto label0;

        $r2 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.util.TreeMap$Entry getFirstEntry()>();
        goto label2;

     label0:
        $z1 = r0.<java.util.TreeMap$NavigableSubMap: boolean loInclusive>;
        if $z1 == 0 goto label1;

        $r4 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r5 = r0.<java.util.TreeMap$NavigableSubMap: java.lang.Object lo>;
        $r3 = virtualinvoke $r4.<java.util.TreeMap: java.util.TreeMap$Entry getCeilingEntry(java.lang.Object)>($r5);
        goto label2;

     label1:
        $r6 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r7 = r0.<java.util.TreeMap$NavigableSubMap: java.lang.Object lo>;
        $r3 = virtualinvoke $r6.<java.util.TreeMap: java.util.TreeMap$Entry getHigherEntry(java.lang.Object)>($r7);

     label2:
        r1 = $r3;
        if r1 == null goto label3;

        $r8 = r1.<java.util.TreeMap$Entry: java.lang.Object key>;
        $z2 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: boolean tooHigh(java.lang.Object)>($r8);
        if $z2 == 0 goto label4;

     label3:
        $r9 = null;
        goto label5;

     label4:
        $r9 = r1;

     label5:
        return $r9;
    }

    final java.util.TreeMap$Entry absHighest()
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.util.TreeMap$Entry r1, $r3, $r9;
        boolean $z0, $z1, $z2;
        java.util.TreeMap $r2, $r4, $r6;
        java.lang.Object $r5, $r7, $r8;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        $z0 = r0.<java.util.TreeMap$NavigableSubMap: boolean toEnd>;
        if $z0 == 0 goto label0;

        $r2 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.util.TreeMap$Entry getLastEntry()>();
        goto label2;

     label0:
        $z1 = r0.<java.util.TreeMap$NavigableSubMap: boolean hiInclusive>;
        if $z1 == 0 goto label1;

        $r4 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r5 = r0.<java.util.TreeMap$NavigableSubMap: java.lang.Object hi>;
        $r3 = virtualinvoke $r4.<java.util.TreeMap: java.util.TreeMap$Entry getFloorEntry(java.lang.Object)>($r5);
        goto label2;

     label1:
        $r6 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r7 = r0.<java.util.TreeMap$NavigableSubMap: java.lang.Object hi>;
        $r3 = virtualinvoke $r6.<java.util.TreeMap: java.util.TreeMap$Entry getLowerEntry(java.lang.Object)>($r7);

     label2:
        r1 = $r3;
        if r1 == null goto label3;

        $r8 = r1.<java.util.TreeMap$Entry: java.lang.Object key>;
        $z2 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: boolean tooLow(java.lang.Object)>($r8);
        if $z2 == 0 goto label4;

     label3:
        $r9 = null;
        goto label5;

     label4:
        $r9 = r1;

     label5:
        return $r9;
    }

    final java.util.TreeMap$Entry absCeiling(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1, $r5;
        java.util.TreeMap$Entry r2, $r3, $r6;
        boolean $z0, $z1;
        java.util.TreeMap $r4;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $z0 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: boolean tooLow(java.lang.Object)>(r1);
        if $z0 == 0 goto label0;

        $r3 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry absLowest()>();
        return $r3;

     label0:
        $r4 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        r2 = virtualinvoke $r4.<java.util.TreeMap: java.util.TreeMap$Entry getCeilingEntry(java.lang.Object)>(r1);
        if r2 == null goto label1;

        $r5 = r2.<java.util.TreeMap$Entry: java.lang.Object key>;
        $z1 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: boolean tooHigh(java.lang.Object)>($r5);
        if $z1 == 0 goto label2;

     label1:
        $r6 = null;
        goto label3;

     label2:
        $r6 = r2;

     label3:
        return $r6;
    }

    final java.util.TreeMap$Entry absHigher(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1, $r5;
        java.util.TreeMap$Entry r2, $r3, $r6;
        boolean $z0, $z1;
        java.util.TreeMap $r4;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $z0 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: boolean tooLow(java.lang.Object)>(r1);
        if $z0 == 0 goto label0;

        $r3 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry absLowest()>();
        return $r3;

     label0:
        $r4 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        r2 = virtualinvoke $r4.<java.util.TreeMap: java.util.TreeMap$Entry getHigherEntry(java.lang.Object)>(r1);
        if r2 == null goto label1;

        $r5 = r2.<java.util.TreeMap$Entry: java.lang.Object key>;
        $z1 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: boolean tooHigh(java.lang.Object)>($r5);
        if $z1 == 0 goto label2;

     label1:
        $r6 = null;
        goto label3;

     label2:
        $r6 = r2;

     label3:
        return $r6;
    }

    final java.util.TreeMap$Entry absFloor(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1, $r5;
        java.util.TreeMap$Entry r2, $r3, $r6;
        boolean $z0, $z1;
        java.util.TreeMap $r4;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $z0 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: boolean tooHigh(java.lang.Object)>(r1);
        if $z0 == 0 goto label0;

        $r3 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry absHighest()>();
        return $r3;

     label0:
        $r4 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        r2 = virtualinvoke $r4.<java.util.TreeMap: java.util.TreeMap$Entry getFloorEntry(java.lang.Object)>(r1);
        if r2 == null goto label1;

        $r5 = r2.<java.util.TreeMap$Entry: java.lang.Object key>;
        $z1 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: boolean tooLow(java.lang.Object)>($r5);
        if $z1 == 0 goto label2;

     label1:
        $r6 = null;
        goto label3;

     label2:
        $r6 = r2;

     label3:
        return $r6;
    }

    final java.util.TreeMap$Entry absLower(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1, $r5;
        java.util.TreeMap$Entry r2, $r3, $r6;
        boolean $z0, $z1;
        java.util.TreeMap $r4;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $z0 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: boolean tooHigh(java.lang.Object)>(r1);
        if $z0 == 0 goto label0;

        $r3 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry absHighest()>();
        return $r3;

     label0:
        $r4 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        r2 = virtualinvoke $r4.<java.util.TreeMap: java.util.TreeMap$Entry getLowerEntry(java.lang.Object)>(r1);
        if r2 == null goto label1;

        $r5 = r2.<java.util.TreeMap$Entry: java.lang.Object key>;
        $z1 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: boolean tooLow(java.lang.Object)>($r5);
        if $z1 == 0 goto label2;

     label1:
        $r6 = null;
        goto label3;

     label2:
        $r6 = r2;

     label3:
        return $r6;
    }

    final java.util.TreeMap$Entry absHighFence()
    {
        java.util.TreeMap$NavigableSubMap r0;
        boolean $z0, $z1;
        java.util.TreeMap$Entry $r1;
        java.util.TreeMap $r2, $r4;
        java.lang.Object $r3, $r5;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        $z0 = r0.<java.util.TreeMap$NavigableSubMap: boolean toEnd>;
        if $z0 == 0 goto label0;

        $r1 = null;
        goto label2;

     label0:
        $z1 = r0.<java.util.TreeMap$NavigableSubMap: boolean hiInclusive>;
        if $z1 == 0 goto label1;

        $r2 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r3 = r0.<java.util.TreeMap$NavigableSubMap: java.lang.Object hi>;
        $r1 = virtualinvoke $r2.<java.util.TreeMap: java.util.TreeMap$Entry getHigherEntry(java.lang.Object)>($r3);
        goto label2;

     label1:
        $r4 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r5 = r0.<java.util.TreeMap$NavigableSubMap: java.lang.Object hi>;
        $r1 = virtualinvoke $r4.<java.util.TreeMap: java.util.TreeMap$Entry getCeilingEntry(java.lang.Object)>($r5);

     label2:
        return $r1;
    }

    final java.util.TreeMap$Entry absLowFence()
    {
        java.util.TreeMap$NavigableSubMap r0;
        boolean $z0, $z1;
        java.util.TreeMap$Entry $r1;
        java.util.TreeMap $r2, $r4;
        java.lang.Object $r3, $r5;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        $z0 = r0.<java.util.TreeMap$NavigableSubMap: boolean fromStart>;
        if $z0 == 0 goto label0;

        $r1 = null;
        goto label2;

     label0:
        $z1 = r0.<java.util.TreeMap$NavigableSubMap: boolean loInclusive>;
        if $z1 == 0 goto label1;

        $r2 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r3 = r0.<java.util.TreeMap$NavigableSubMap: java.lang.Object lo>;
        $r1 = virtualinvoke $r2.<java.util.TreeMap: java.util.TreeMap$Entry getLowerEntry(java.lang.Object)>($r3);
        goto label2;

     label1:
        $r4 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r5 = r0.<java.util.TreeMap$NavigableSubMap: java.lang.Object lo>;
        $r1 = virtualinvoke $r4.<java.util.TreeMap: java.util.TreeMap$Entry getFloorEntry(java.lang.Object)>($r5);

     label2:
        return $r1;
    }

    abstract java.util.TreeMap$Entry subLowest();

    abstract java.util.TreeMap$Entry subHighest();

    abstract java.util.TreeMap$Entry subCeiling(java.lang.Object);

    abstract java.util.TreeMap$Entry subHigher(java.lang.Object);

    abstract java.util.TreeMap$Entry subFloor(java.lang.Object);

    abstract java.util.TreeMap$Entry subLower(java.lang.Object);

    abstract java.util.Iterator keyIterator();

    abstract java.util.Iterator descendingKeyIterator();

    public boolean isEmpty()
    {
        java.util.TreeMap$NavigableSubMap r0;
        boolean $z0, $z1, $z2;
        java.util.TreeMap $r1;
        java.util.Set $r2;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        $z0 = r0.<java.util.TreeMap$NavigableSubMap: boolean fromStart>;
        if $z0 == 0 goto label0;

        $z1 = r0.<java.util.TreeMap$NavigableSubMap: boolean toEnd>;
        if $z1 == 0 goto label0;

        $r1 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $z2 = virtualinvoke $r1.<java.util.TreeMap: boolean isEmpty()>();
        goto label1;

     label0:
        $r2 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.Set entrySet()>();
        $z2 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

     label1:
        return $z2;
    }

    public int size()
    {
        java.util.TreeMap$NavigableSubMap r0;
        boolean $z0, $z1;
        java.util.TreeMap $r1;
        int $i0;
        java.util.Set $r2;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        $z0 = r0.<java.util.TreeMap$NavigableSubMap: boolean fromStart>;
        if $z0 == 0 goto label0;

        $z1 = r0.<java.util.TreeMap$NavigableSubMap: boolean toEnd>;
        if $z1 == 0 goto label0;

        $r1 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $i0 = virtualinvoke $r1.<java.util.TreeMap: int size()>();
        goto label1;

     label0:
        $r2 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.Set entrySet()>();
        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

     label1:
        return $i0;
    }

    public final boolean containsKey(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.util.TreeMap $r2;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $z0 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: boolean inRange(java.lang.Object)>(r1);
        if $z0 == 0 goto label0;

        $r2 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $z1 = virtualinvoke $r2.<java.util.TreeMap: boolean containsKey(java.lang.Object)>(r1);
        if $z1 == 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;
    }

    public final java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1, r2, $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.util.TreeMap $r4;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $z0 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: boolean inRange(java.lang.Object)>(r1);
        if $z0 != 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key out of range");
        throw $r3;

     label0:
        $r4 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r5 = virtualinvoke $r4.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);
        return $r5;
    }

    public final java.lang.Object get(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1, $r2;
        boolean $z0;
        java.util.TreeMap $r3;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $z0 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: boolean inRange(java.lang.Object)>(r1);
        if $z0 != 0 goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r3 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r2 = virtualinvoke $r3.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(r1);

     label1:
        return $r2;
    }

    public final java.lang.Object remove(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1, $r2;
        boolean $z0;
        java.util.TreeMap $r3;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $z0 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: boolean inRange(java.lang.Object)>(r1);
        if $z0 != 0 goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r3 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r2 = virtualinvoke $r3.<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>(r1);

     label1:
        return $r2;
    }

    public final java.util.Map$Entry ceilingEntry(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Entry $r2;
        java.util.Map$Entry $r3;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry subCeiling(java.lang.Object)>(r1);
        $r3 = staticinvoke <java.util.TreeMap: java.util.Map$Entry exportEntry(java.util.TreeMap$Entry)>($r2);
        return $r3;
    }

    public final java.lang.Object ceilingKey(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap$Entry $r2;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry subCeiling(java.lang.Object)>(r1);
        $r3 = staticinvoke <java.util.TreeMap: java.lang.Object keyOrNull(java.util.TreeMap$Entry)>($r2);
        return $r3;
    }

    public final java.util.Map$Entry higherEntry(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Entry $r2;
        java.util.Map$Entry $r3;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry subHigher(java.lang.Object)>(r1);
        $r3 = staticinvoke <java.util.TreeMap: java.util.Map$Entry exportEntry(java.util.TreeMap$Entry)>($r2);
        return $r3;
    }

    public final java.lang.Object higherKey(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap$Entry $r2;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry subHigher(java.lang.Object)>(r1);
        $r3 = staticinvoke <java.util.TreeMap: java.lang.Object keyOrNull(java.util.TreeMap$Entry)>($r2);
        return $r3;
    }

    public final java.util.Map$Entry floorEntry(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Entry $r2;
        java.util.Map$Entry $r3;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry subFloor(java.lang.Object)>(r1);
        $r3 = staticinvoke <java.util.TreeMap: java.util.Map$Entry exportEntry(java.util.TreeMap$Entry)>($r2);
        return $r3;
    }

    public final java.lang.Object floorKey(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap$Entry $r2;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry subFloor(java.lang.Object)>(r1);
        $r3 = staticinvoke <java.util.TreeMap: java.lang.Object keyOrNull(java.util.TreeMap$Entry)>($r2);
        return $r3;
    }

    public final java.util.Map$Entry lowerEntry(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Entry $r2;
        java.util.Map$Entry $r3;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry subLower(java.lang.Object)>(r1);
        $r3 = staticinvoke <java.util.TreeMap: java.util.Map$Entry exportEntry(java.util.TreeMap$Entry)>($r2);
        return $r3;
    }

    public final java.lang.Object lowerKey(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap$Entry $r2;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry subLower(java.lang.Object)>(r1);
        $r3 = staticinvoke <java.util.TreeMap: java.lang.Object keyOrNull(java.util.TreeMap$Entry)>($r2);
        return $r3;
    }

    public final java.lang.Object firstKey()
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.util.TreeMap$Entry $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        $r1 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry subLowest()>();
        $r2 = staticinvoke <java.util.TreeMap: java.lang.Object key(java.util.TreeMap$Entry)>($r1);
        return $r2;
    }

    public final java.lang.Object lastKey()
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.util.TreeMap$Entry $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        $r1 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry subHighest()>();
        $r2 = staticinvoke <java.util.TreeMap: java.lang.Object key(java.util.TreeMap$Entry)>($r1);
        return $r2;
    }

    public final java.util.Map$Entry firstEntry()
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.util.TreeMap$Entry $r1;
        java.util.Map$Entry $r2;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        $r1 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry subLowest()>();
        $r2 = staticinvoke <java.util.TreeMap: java.util.Map$Entry exportEntry(java.util.TreeMap$Entry)>($r1);
        return $r2;
    }

    public final java.util.Map$Entry lastEntry()
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.util.TreeMap$Entry $r1;
        java.util.Map$Entry $r2;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        $r1 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry subHighest()>();
        $r2 = staticinvoke <java.util.TreeMap: java.util.Map$Entry exportEntry(java.util.TreeMap$Entry)>($r1);
        return $r2;
    }

    public final java.util.Map$Entry pollFirstEntry()
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.util.TreeMap$Entry r1;
        java.util.Map$Entry r2;
        java.util.TreeMap $r3;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry subLowest()>();
        r2 = staticinvoke <java.util.TreeMap: java.util.Map$Entry exportEntry(java.util.TreeMap$Entry)>(r1);
        if r1 == null goto label0;

        $r3 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        staticinvoke <java.util.TreeMap: void access$000(java.util.TreeMap,java.util.TreeMap$Entry)>($r3, r1);

     label0:
        return r2;
    }

    public final java.util.Map$Entry pollLastEntry()
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.util.TreeMap$Entry r1;
        java.util.Map$Entry r2;
        java.util.TreeMap $r3;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry subHighest()>();
        r2 = staticinvoke <java.util.TreeMap: java.util.Map$Entry exportEntry(java.util.TreeMap$Entry)>(r1);
        if r1 == null goto label0;

        $r3 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        staticinvoke <java.util.TreeMap: void access$000(java.util.TreeMap,java.util.TreeMap$Entry)>($r3, r1);

     label0:
        return r2;
    }

    public final java.util.NavigableSet navigableKeySet()
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.util.TreeMap$KeySet r1, $r2, $r3;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 = r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$KeySet navigableKeySetView>;
        if r1 == null goto label0;

        $r3 = r1;
        goto label1;

     label0:
        $r2 = new java.util.TreeMap$KeySet;
        specialinvoke $r2.<java.util.TreeMap$KeySet: void <init>(java.util.NavigableMap)>(r0);
        $r3 = $r2;
        r0.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap$KeySet navigableKeySetView> = $r2;

     label1:
        return $r3;
    }

    public final java.util.Set keySet()
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.util.NavigableSet $r1;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        $r1 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.NavigableSet navigableKeySet()>();
        return $r1;
    }

    public java.util.NavigableSet descendingKeySet()
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.util.NavigableMap $r1;
        java.util.NavigableSet $r2;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        $r1 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.NavigableMap descendingMap()>();
        $r2 = interfaceinvoke $r1.<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>();
        return $r2;
    }

    public final java.util.SortedMap subMap(java.lang.Object, java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1, r2;
        java.util.NavigableMap $r3;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r3 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, 1, r2, 0);
        return $r3;
    }

    public final java.util.SortedMap headMap(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1;
        java.util.NavigableMap $r2;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.NavigableMap headMap(java.lang.Object,boolean)>(r1, 0);
        return $r2;
    }

    public final java.util.SortedMap tailMap(java.lang.Object)
    {
        java.util.TreeMap$NavigableSubMap r0;
        java.lang.Object r1;
        java.util.NavigableMap $r2;

        r0 := @this: java.util.TreeMap$NavigableSubMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap: java.util.NavigableMap tailMap(java.lang.Object,boolean)>(r1, 1);
        return $r2;
    }
}
