public final class java.nio.file.Paths extends java.lang.Object
{

    private void <init>()
    {
        java.nio.file.Paths r0;

        r0 := @this: java.nio.file.Paths;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static transient java.nio.file.Path get(java.lang.String, java.lang.String[])
    {
        java.lang.String r0;
        java.lang.String[] r1;
        java.nio.file.FileSystem $r2;
        java.nio.file.Path $r3;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String[];
        $r2 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>();
        $r3 = virtualinvoke $r2.<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>(r0, r1);
        return $r3;
    }

    public static java.nio.file.Path get(java.net.URI)
    {
        java.net.URI r0;
        java.lang.String r1, $r10, $r17;
        java.util.Iterator r2;
        java.nio.file.spi.FileSystemProvider r3, $r6;
        java.lang.IllegalArgumentException $r4;
        boolean $z0, $z1, $z2;
        java.nio.file.FileSystem $r5;
        java.nio.file.Path $r7, $r11;
        java.util.List $r8;
        java.lang.Object $r9;
        java.nio.file.FileSystemNotFoundException $r12;
        java.lang.StringBuilder $r13, $r14, $r15, $r16;

        r0 := @parameter0: java.net.URI;
        r1 = virtualinvoke r0.<java.net.URI: java.lang.String getScheme()>();
        if r1 != null goto label0;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Missing scheme");
        throw $r4;

     label0:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("file");
        if $z0 == 0 goto label1;

        $r5 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>();
        $r6 = virtualinvoke $r5.<java.nio.file.FileSystem: java.nio.file.spi.FileSystemProvider provider()>();
        $r7 = virtualinvoke $r6.<java.nio.file.spi.FileSystemProvider: java.nio.file.Path getPath(java.net.URI)>(r0);
        return $r7;

     label1:
        $r8 = staticinvoke <java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()>();
        r2 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.nio.file.spi.FileSystemProvider) $r9;
        $r10 = virtualinvoke r3.<java.nio.file.spi.FileSystemProvider: java.lang.String getScheme()>();
        $z2 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);
        if $z2 == 0 goto label3;

        $r11 = virtualinvoke r3.<java.nio.file.spi.FileSystemProvider: java.nio.file.Path getPath(java.net.URI)>(r0);
        return $r11;

     label3:
        goto label2;

     label4:
        $r12 = new java.nio.file.FileSystemNotFoundException;
        $r13 = new java.lang.StringBuilder;
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not installed");
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r12.<java.nio.file.FileSystemNotFoundException: void <init>(java.lang.String)>($r17);
        throw $r12;
    }
}
