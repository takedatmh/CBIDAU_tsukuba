abstract class sun.nio.fs.AbstractFileSystemProvider extends java.nio.file.spi.FileSystemProvider
{

    protected void <init>()
    {
        sun.nio.fs.AbstractFileSystemProvider r0;

        r0 := @this: sun.nio.fs.AbstractFileSystemProvider;
        specialinvoke r0.<java.nio.file.spi.FileSystemProvider: void <init>()>();
        return;
    }

    private static java.lang.String[] split(java.lang.String)
    {
        java.lang.String r0, $r2, $r4;
        java.lang.String[] r1;
        int i0, i1, $i3;
        byte $b2;

        r0 := @parameter0: java.lang.String;
        r1 = newarray (java.lang.String)[2];
        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);
        if i0 != -1 goto label0;

        r1[0] = "basic";
        r1[1] = r0;
        goto label3;

     label0:
        i1 = i0 + 1;
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        r1[0] = $r2;
        $b2 = 1;
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();
        if i1 != $i3 goto label1;

        $r4 = "";
        goto label2;

     label1:
        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i1);

     label2:
        r1[$b2] = $r4;

     label3:
        return r1;
    }

    abstract transient sun.nio.fs.DynamicFileAttributeView getFileAttributeView(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]);

    public final transient void setAttribute(java.nio.file.Path, java.lang.String, java.lang.Object, java.nio.file.LinkOption[]) throws java.io.IOException
    {
        sun.nio.fs.AbstractFileSystemProvider r0;
        java.nio.file.Path r1;
        java.lang.String r2, $r7, $r9, $r13, $r16, $r17;
        java.lang.Object r3;
        java.nio.file.LinkOption[] r4;
        java.lang.String[] r5;
        sun.nio.fs.DynamicFileAttributeView r6;
        int $i0;
        java.lang.IllegalArgumentException $r8;
        java.lang.UnsupportedOperationException $r10;
        java.lang.StringBuilder $r11, $r12, $r14, $r15;

        r0 := @this: sun.nio.fs.AbstractFileSystemProvider;
        r1 := @parameter0: java.nio.file.Path;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Object;
        r4 := @parameter3: java.nio.file.LinkOption[];
        r5 = staticinvoke <sun.nio.fs.AbstractFileSystemProvider: java.lang.String[] split(java.lang.String)>(r2);
        $r7 = r5[0];
        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();
        if $i0 != 0 goto label0;

        $r8 = new java.lang.IllegalArgumentException;
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r2);
        throw $r8;

     label0:
        $r9 = r5[0];
        r6 = virtualinvoke r0.<sun.nio.fs.AbstractFileSystemProvider: sun.nio.fs.DynamicFileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[])>(r1, $r9, r4);
        if r6 != null goto label1;

        $r10 = new java.lang.UnsupportedOperationException;
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View \'");
        $r13 = r5[0];
        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not available");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r10.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r16);
        throw $r10;

     label1:
        $r17 = r5[1];
        interfaceinvoke r6.<sun.nio.fs.DynamicFileAttributeView: void setAttribute(java.lang.String,java.lang.Object)>($r17, r3);
        return;
    }

    public final transient java.util.Map readAttributes(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) throws java.io.IOException
    {
        sun.nio.fs.AbstractFileSystemProvider r0;
        java.nio.file.Path r1;
        java.lang.String r2, $r6, $r8, $r12, $r15, $r16;
        java.nio.file.LinkOption[] r3;
        java.lang.String[] r4, $r17;
        sun.nio.fs.DynamicFileAttributeView r5;
        int $i0;
        java.lang.IllegalArgumentException $r7;
        java.lang.UnsupportedOperationException $r9;
        java.lang.StringBuilder $r10, $r11, $r13, $r14;
        java.util.Map $r18;

        r0 := @this: sun.nio.fs.AbstractFileSystemProvider;
        r1 := @parameter0: java.nio.file.Path;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.nio.file.LinkOption[];
        r4 = staticinvoke <sun.nio.fs.AbstractFileSystemProvider: java.lang.String[] split(java.lang.String)>(r2);
        $r6 = r4[0];
        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();
        if $i0 != 0 goto label0;

        $r7 = new java.lang.IllegalArgumentException;
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r2);
        throw $r7;

     label0:
        $r8 = r4[0];
        r5 = virtualinvoke r0.<sun.nio.fs.AbstractFileSystemProvider: sun.nio.fs.DynamicFileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[])>(r1, $r8, r3);
        if r5 != null goto label1;

        $r9 = new java.lang.UnsupportedOperationException;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View \'");
        $r12 = r4[0];
        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not available");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r15);
        throw $r9;

     label1:
        $r16 = r4[1];
        $r17 = virtualinvoke $r16.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");
        $r18 = interfaceinvoke r5.<sun.nio.fs.DynamicFileAttributeView: java.util.Map readAttributes(java.lang.String[])>($r17);
        return $r18;
    }

    abstract boolean implDelete(java.nio.file.Path, boolean) throws java.io.IOException;

    public final void delete(java.nio.file.Path) throws java.io.IOException
    {
        sun.nio.fs.AbstractFileSystemProvider r0;
        java.nio.file.Path r1;

        r0 := @this: sun.nio.fs.AbstractFileSystemProvider;
        r1 := @parameter0: java.nio.file.Path;
        virtualinvoke r0.<sun.nio.fs.AbstractFileSystemProvider: boolean implDelete(java.nio.file.Path,boolean)>(r1, 1);
        return;
    }

    public final boolean deleteIfExists(java.nio.file.Path) throws java.io.IOException
    {
        sun.nio.fs.AbstractFileSystemProvider r0;
        java.nio.file.Path r1;
        boolean $z0;

        r0 := @this: sun.nio.fs.AbstractFileSystemProvider;
        r1 := @parameter0: java.nio.file.Path;
        $z0 = virtualinvoke r0.<sun.nio.fs.AbstractFileSystemProvider: boolean implDelete(java.nio.file.Path,boolean)>(r1, 0);
        return $z0;
    }
}
