class java.util.ArrayList$Itr extends java.lang.Object implements java.util.Iterator
{
    int cursor;
    int lastRet;
    int expectedModCount;
    final java.util.ArrayList this$0;

    private void <init>(java.util.ArrayList)
    {
        java.util.ArrayList$Itr r0;
        java.util.ArrayList r1, $r2;
        int $i0;

        r0 := @this: java.util.ArrayList$Itr;
        r1 := @parameter0: java.util.ArrayList;
        r0.<java.util.ArrayList$Itr: java.util.ArrayList this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.ArrayList$Itr: int lastRet> = -1;
        $r2 = r0.<java.util.ArrayList$Itr: java.util.ArrayList this$0>;
        $i0 = $r2.<java.util.ArrayList: int modCount>;
        r0.<java.util.ArrayList$Itr: int expectedModCount> = $i0;
        return;
    }

    public boolean hasNext()
    {
        java.util.ArrayList$Itr r0;
        int $i0, $i1;
        java.util.ArrayList $r1;
        boolean $z0;

        r0 := @this: java.util.ArrayList$Itr;
        $i0 = r0.<java.util.ArrayList$Itr: int cursor>;
        $r1 = r0.<java.util.ArrayList$Itr: java.util.ArrayList this$0>;
        $i1 = staticinvoke <java.util.ArrayList: int access$100(java.util.ArrayList)>($r1);
        if $i0 == $i1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.Object next()
    {
        java.util.ArrayList$Itr r0;
        int i0, $i2, $i3, $i4;
        java.lang.Object[] r1;
        java.util.ArrayList $r2, $r4;
        java.util.NoSuchElementException $r3;
        java.util.ConcurrentModificationException $r5;
        java.lang.Object $r6;

        r0 := @this: java.util.ArrayList$Itr;
        virtualinvoke r0.<java.util.ArrayList$Itr: void checkForComodification()>();
        i0 = r0.<java.util.ArrayList$Itr: int cursor>;
        $r2 = r0.<java.util.ArrayList$Itr: java.util.ArrayList this$0>;
        $i2 = staticinvoke <java.util.ArrayList: int access$100(java.util.ArrayList)>($r2);
        if i0 < $i2 goto label0;

        $r3 = new java.util.NoSuchElementException;
        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();
        throw $r3;

     label0:
        $r4 = r0.<java.util.ArrayList$Itr: java.util.ArrayList this$0>;
        r1 = staticinvoke <java.util.ArrayList: java.lang.Object[] access$200(java.util.ArrayList)>($r4);
        $i3 = lengthof r1;
        if i0 < $i3 goto label1;

        $r5 = new java.util.ConcurrentModificationException;
        specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r5;

     label1:
        $i4 = i0 + 1;
        r0.<java.util.ArrayList$Itr: int cursor> = $i4;
        r0.<java.util.ArrayList$Itr: int lastRet> = i0;
        $r6 = r1[i0];
        return $r6;
    }

    public void remove()
    {
        java.util.ArrayList$Itr r0;
        java.lang.IndexOutOfBoundsException r1, $r6;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalStateException $r2;
        java.util.ArrayList $r3, $r5;
        java.util.ConcurrentModificationException $r7;

        r0 := @this: java.util.ArrayList$Itr;
        $i0 = r0.<java.util.ArrayList$Itr: int lastRet>;
        if $i0 >= 0 goto label0;

        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();
        throw $r2;

     label0:
        virtualinvoke r0.<java.util.ArrayList$Itr: void checkForComodification()>();

     label1:
        $r3 = r0.<java.util.ArrayList$Itr: java.util.ArrayList this$0>;
        $i1 = r0.<java.util.ArrayList$Itr: int lastRet>;
        virtualinvoke $r3.<java.util.ArrayList: java.lang.Object remove(int)>($i1);
        $i2 = r0.<java.util.ArrayList$Itr: int lastRet>;
        r0.<java.util.ArrayList$Itr: int cursor> = $i2;
        r0.<java.util.ArrayList$Itr: int lastRet> = -1;
        $r5 = r0.<java.util.ArrayList$Itr: java.util.ArrayList this$0>;
        $i3 = $r5.<java.util.ArrayList: int modCount>;
        r0.<java.util.ArrayList$Itr: int expectedModCount> = $i3;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;
        r1 = $r6;
        $r7 = new java.util.ConcurrentModificationException;
        specialinvoke $r7.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r7;

     label4:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    final void checkForComodification()
    {
        java.util.ArrayList$Itr r0;
        java.util.ArrayList $r1;
        int $i0, $i1;
        java.util.ConcurrentModificationException $r2;

        r0 := @this: java.util.ArrayList$Itr;
        $r1 = r0.<java.util.ArrayList$Itr: java.util.ArrayList this$0>;
        $i0 = $r1.<java.util.ArrayList: int modCount>;
        $i1 = r0.<java.util.ArrayList$Itr: int expectedModCount>;
        if $i0 == $i1 goto label0;

        $r2 = new java.util.ConcurrentModificationException;
        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r2;

     label0:
        return;
    }

    void <init>(java.util.ArrayList, java.util.ArrayList$1)
    {
        java.util.ArrayList$Itr r0;
        java.util.ArrayList r1;
        java.util.ArrayList$1 r2;

        r0 := @this: java.util.ArrayList$Itr;
        r1 := @parameter0: java.util.ArrayList;
        r2 := @parameter1: java.util.ArrayList$1;
        specialinvoke r0.<java.util.ArrayList$Itr: void <init>(java.util.ArrayList)>(r1);
        return;
    }
}
