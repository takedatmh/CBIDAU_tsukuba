class java.nio.HeapDoubleBufferR extends java.nio.HeapDoubleBuffer
{

    void <init>(int, int)
    {
        java.nio.HeapDoubleBufferR r0;
        int i0, i1;

        r0 := @this: java.nio.HeapDoubleBufferR;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        specialinvoke r0.<java.nio.HeapDoubleBuffer: void <init>(int,int)>(i0, i1);
        r0.<java.nio.HeapDoubleBufferR: boolean isReadOnly> = 1;
        return;
    }

    void <init>(double[], int, int)
    {
        java.nio.HeapDoubleBufferR r0;
        double[] r1;
        int i0, i1;

        r0 := @this: java.nio.HeapDoubleBufferR;
        r1 := @parameter0: double[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.nio.HeapDoubleBuffer: void <init>(double[],int,int)>(r1, i0, i1);
        r0.<java.nio.HeapDoubleBufferR: boolean isReadOnly> = 1;
        return;
    }

    protected void <init>(double[], int, int, int, int, int)
    {
        java.nio.HeapDoubleBufferR r0;
        double[] r1;
        int i0, i1, i2, i3, i4;

        r0 := @this: java.nio.HeapDoubleBufferR;
        r1 := @parameter0: double[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        specialinvoke r0.<java.nio.HeapDoubleBuffer: void <init>(double[],int,int,int,int,int)>(r1, i0, i1, i2, i3, i4);
        r0.<java.nio.HeapDoubleBufferR: boolean isReadOnly> = 1;
        return;
    }

    public java.nio.DoubleBuffer slice()
    {
        java.nio.HeapDoubleBufferR r0, $r1;
        double[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapDoubleBufferR;
        $r1 = new java.nio.HeapDoubleBufferR;
        $r2 = r0.<java.nio.HeapDoubleBufferR: double[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapDoubleBufferR: int remaining()>();
        $i1 = virtualinvoke r0.<java.nio.HeapDoubleBufferR: int remaining()>();
        $i2 = virtualinvoke r0.<java.nio.HeapDoubleBufferR: int position()>();
        $i3 = r0.<java.nio.HeapDoubleBufferR: int offset>;
        $i4 = $i2 + $i3;
        specialinvoke $r1.<java.nio.HeapDoubleBufferR: void <init>(double[],int,int,int,int,int)>($r2, -1, 0, $i0, $i1, $i4);
        return $r1;
    }

    public java.nio.DoubleBuffer duplicate()
    {
        java.nio.HeapDoubleBufferR r0, $r1;
        double[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapDoubleBufferR;
        $r1 = new java.nio.HeapDoubleBufferR;
        $r2 = r0.<java.nio.HeapDoubleBufferR: double[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapDoubleBufferR: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.HeapDoubleBufferR: int position()>();
        $i2 = virtualinvoke r0.<java.nio.HeapDoubleBufferR: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.HeapDoubleBufferR: int capacity()>();
        $i4 = r0.<java.nio.HeapDoubleBufferR: int offset>;
        specialinvoke $r1.<java.nio.HeapDoubleBufferR: void <init>(double[],int,int,int,int,int)>($r2, $i0, $i1, $i2, $i3, $i4);
        return $r1;
    }

    public java.nio.DoubleBuffer asReadOnlyBuffer()
    {
        java.nio.HeapDoubleBufferR r0;
        java.nio.DoubleBuffer $r1;

        r0 := @this: java.nio.HeapDoubleBufferR;
        $r1 = virtualinvoke r0.<java.nio.HeapDoubleBufferR: java.nio.DoubleBuffer duplicate()>();
        return $r1;
    }

    public boolean isReadOnly()
    {
        java.nio.HeapDoubleBufferR r0;

        r0 := @this: java.nio.HeapDoubleBufferR;
        return 1;
    }

    public java.nio.DoubleBuffer put(double)
    {
        java.nio.HeapDoubleBufferR r0;
        double d0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapDoubleBufferR;
        d0 := @parameter0: double;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.DoubleBuffer put(int, double)
    {
        java.nio.HeapDoubleBufferR r0;
        int i0;
        double d0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapDoubleBufferR;
        i0 := @parameter0: int;
        d0 := @parameter1: double;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.DoubleBuffer put(double[], int, int)
    {
        java.nio.HeapDoubleBufferR r0;
        double[] r1;
        int i0, i1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.HeapDoubleBufferR;
        r1 := @parameter0: double[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r2;
    }

    public java.nio.DoubleBuffer put(java.nio.DoubleBuffer)
    {
        java.nio.HeapDoubleBufferR r0;
        java.nio.DoubleBuffer r1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.HeapDoubleBufferR;
        r1 := @parameter0: java.nio.DoubleBuffer;
        $r2 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r2;
    }

    public java.nio.DoubleBuffer compact()
    {
        java.nio.HeapDoubleBufferR r0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapDoubleBufferR;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteOrder order()
    {
        java.nio.HeapDoubleBufferR r0;
        java.nio.ByteOrder $r1;

        r0 := @this: java.nio.HeapDoubleBufferR;
        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();
        return $r1;
    }
}
