public class org.apache.tomcat.util.net.NioSelectorPool extends java.lang.Object
{
    private static final org.apache.juli.logging.Log log;
    protected static final boolean SHARED;
    protected org.apache.tomcat.util.net.NioBlockingSelector blockingSelector;
    protected volatile java.nio.channels.Selector SHARED_SELECTOR;
    protected int maxSelectors;
    protected long sharedSelectorTimeout;
    protected int maxSpareSelectors;
    protected boolean enabled;
    protected java.util.concurrent.atomic.AtomicInteger active;
    protected java.util.concurrent.atomic.AtomicInteger spare;
    protected java.util.concurrent.ConcurrentLinkedQueue selectors;

    static void <clinit>()
    {
        org.apache.juli.logging.Log $r0;
        java.lang.String $r1;
        boolean $z0;

        $r0 = staticinvoke <org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>(class "org/apache/tomcat/util/net/NioSelectorPool");
        <org.apache.tomcat.util.net.NioSelectorPool: org.apache.juli.logging.Log log> = $r0;
        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("org.apache.tomcat.util.net.NioSelectorShared", "true");
        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r1);
        <org.apache.tomcat.util.net.NioSelectorPool: boolean SHARED> = $z0;
        return;
    }

    public void <init>()
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        java.util.concurrent.atomic.AtomicInteger $r1, $r2;
        java.util.concurrent.ConcurrentLinkedQueue $r3;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<org.apache.tomcat.util.net.NioSelectorPool: int maxSelectors> = 200;
        r0.<org.apache.tomcat.util.net.NioSelectorPool: long sharedSelectorTimeout> = 30000L;
        r0.<org.apache.tomcat.util.net.NioSelectorPool: int maxSpareSelectors> = -1;
        r0.<org.apache.tomcat.util.net.NioSelectorPool: boolean enabled> = 1;
        $r1 = new java.util.concurrent.atomic.AtomicInteger;
        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);
        r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.atomic.AtomicInteger active> = $r1;
        $r2 = new java.util.concurrent.atomic.AtomicInteger;
        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);
        r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.atomic.AtomicInteger spare> = $r2;
        $r3 = new java.util.concurrent.ConcurrentLinkedQueue;
        specialinvoke $r3.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();
        r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.ConcurrentLinkedQueue selectors> = $r3;
        return;
    }

    protected java.nio.channels.Selector getSharedSelector() throws java.io.IOException
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        boolean $z0;
        java.lang.Class r1, r2, $r4, $r6;
        java.nio.channels.Selector $r3, $r5, $r7, $r11;
        java.lang.Throwable $r8, $r10;
        org.apache.juli.logging.Log $r9;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        $z0 = <org.apache.tomcat.util.net.NioSelectorPool: boolean SHARED>;
        if $z0 == 0 goto label12;

        $r3 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.nio.channels.Selector SHARED_SELECTOR>;
        if $r3 != null goto label12;

        $r4 = class "org/apache/tomcat/util/net/NioSelectorPool";
        r1 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.nio.channels.Selector SHARED_SELECTOR>;
        if $r5 != null goto label7;

        $r6 = class "java/nio/channels/Selector";
        r2 = $r6;
        entermonitor $r6;

     label1:
        $r7 = staticinvoke <java.nio.channels.Selector: java.nio.channels.Selector open()>();
        r0.<org.apache.tomcat.util.net.NioSelectorPool: java.nio.channels.Selector SHARED_SELECTOR> = $r7;
        exitmonitor r2;

     label2:
        goto label6;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r8;

     label6:
        $r9 = <org.apache.tomcat.util.net.NioSelectorPool: org.apache.juli.logging.Log log>;
        interfaceinvoke $r9.<org.apache.juli.logging.Log: void info(java.lang.Object)>("Using a shared selector for servlet write/read");

     label7:
        exitmonitor r1;

     label8:
        goto label12;

     label9:
        $r10 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r10;

     label12:
        $r11 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.nio.channels.Selector SHARED_SELECTOR>;
        return $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label0 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    public java.nio.channels.Selector get() throws java.io.IOException
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        boolean $z0, $z1, $z2;
        java.nio.channels.Selector r1, $r5, $r11;
        java.lang.Class r2, r3, $r12, $r17;
        java.lang.Throwable r4, $r13, $r18, $r22;
        java.util.concurrent.atomic.AtomicInteger $r6, $r7, $r14, $r21, $r23, $r24;
        int $i0, $i1, $i3;
        java.util.concurrent.ConcurrentLinkedQueue $r8, $r9;
        java.lang.Object $r10;
        java.util.NoSuchElementException $r15, r16;
        java.io.IOException $r19, r20;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        $z0 = <org.apache.tomcat.util.net.NioSelectorPool: boolean SHARED>;
        if $z0 == 0 goto label0;

        $r5 = virtualinvoke r0.<org.apache.tomcat.util.net.NioSelectorPool: java.nio.channels.Selector getSharedSelector()>();
        return $r5;

     label0:
        $z1 = r0.<org.apache.tomcat.util.net.NioSelectorPool: boolean enabled>;
        if $z1 == 0 goto label1;

        $r6 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.atomic.AtomicInteger active>;
        $i0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
        $i1 = r0.<org.apache.tomcat.util.net.NioSelectorPool: int maxSelectors>;
        if $i0 < $i1 goto label3;

     label1:
        $z2 = r0.<org.apache.tomcat.util.net.NioSelectorPool: boolean enabled>;
        if $z2 == 0 goto label2;

        $r7 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.atomic.AtomicInteger active>;
        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

     label2:
        return null;

     label3:
        r1 = null;

     label4:
        $r8 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.ConcurrentLinkedQueue selectors>;
        $i3 = virtualinvoke $r8.<java.util.concurrent.ConcurrentLinkedQueue: int size()>();
        if $i3 <= 0 goto label5;

        $r9 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.ConcurrentLinkedQueue selectors>;
        $r10 = virtualinvoke $r9.<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>();
        $r11 = (java.nio.channels.Selector) $r10;
        goto label6;

     label5:
        $r11 = null;

     label6:
        r1 = $r11;
        if r1 != null goto label12;

        $r12 = class "java/nio/channels/Selector";
        r2 = $r12;
        entermonitor $r12;

     label7:
        r1 = staticinvoke <java.nio.channels.Selector: java.nio.channels.Selector open()>();
        exitmonitor r2;

     label8:
        goto label25;

     label9:
        $r13 := @caughtexception;

     label10:
        exitmonitor r2;

     label11:
        throw $r13;

     label12:
        $r14 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.atomic.AtomicInteger spare>;
        virtualinvoke $r14.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

     label13:
        goto label25;

     label14:
        $r15 := @caughtexception;
        r16 = $r15;

     label15:
        $r17 = class "java/nio/channels/Selector";
        r3 = $r17;
        entermonitor $r17;

     label16:
        r1 = staticinvoke <java.nio.channels.Selector: java.nio.channels.Selector open()>();
        exitmonitor r3;

     label17:
        goto label22;

     label18:
        $r18 := @caughtexception;

     label19:
        exitmonitor r3;

     label20:
        throw $r18;

     label21:
        $r19 := @caughtexception;
        r20 = $r19;

     label22:
        if r1 != null goto label26;

        $r21 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.atomic.AtomicInteger active>;
        virtualinvoke $r21.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
        goto label26;

     label23:
        $r22 := @caughtexception;
        r4 = $r22;
        if r1 != null goto label24;

        $r23 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.atomic.AtomicInteger active>;
        virtualinvoke $r23.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

     label24:
        throw r4;

     label25:
        if r1 != null goto label26;

        $r24 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.atomic.AtomicInteger active>;
        virtualinvoke $r24.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

     label26:
        return r1;

        catch java.lang.Throwable from label7 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
        catch java.util.NoSuchElementException from label4 to label13 with label14;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.io.IOException from label15 to label21 with label21;
        catch java.lang.Throwable from label4 to label22 with label23;
    }

    public void put(java.nio.channels.Selector) throws java.io.IOException
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        java.nio.channels.Selector r1;
        boolean $z0, $z1, $z2;
        java.util.concurrent.atomic.AtomicInteger $r2, $r3, $r4;
        int $i1, $i2, $i3, $i4, $i5;
        java.util.concurrent.ConcurrentLinkedQueue $r5;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        r1 := @parameter0: java.nio.channels.Selector;
        $z0 = <org.apache.tomcat.util.net.NioSelectorPool: boolean SHARED>;
        if $z0 == 0 goto label0;

        return;

     label0:
        $z1 = r0.<org.apache.tomcat.util.net.NioSelectorPool: boolean enabled>;
        if $z1 == 0 goto label1;

        $r2 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.atomic.AtomicInteger active>;
        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

     label1:
        $z2 = r0.<org.apache.tomcat.util.net.NioSelectorPool: boolean enabled>;
        if $z2 == 0 goto label3;

        $i1 = r0.<org.apache.tomcat.util.net.NioSelectorPool: int maxSpareSelectors>;
        if $i1 == -1 goto label2;

        $r3 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.atomic.AtomicInteger spare>;
        $i2 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $i3 = r0.<org.apache.tomcat.util.net.NioSelectorPool: int maxSpareSelectors>;
        $i4 = r0.<org.apache.tomcat.util.net.NioSelectorPool: int maxSelectors>;
        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i4);
        if $i2 >= $i5 goto label3;

     label2:
        $r4 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.atomic.AtomicInteger spare>;
        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
        $r5 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.ConcurrentLinkedQueue selectors>;
        virtualinvoke $r5.<java.util.concurrent.ConcurrentLinkedQueue: boolean offer(java.lang.Object)>(r1);
        goto label4;

     label3:
        virtualinvoke r1.<java.nio.channels.Selector: void close()>();

     label4:
        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        java.nio.channels.Selector r1, $r4, $r9, $r10;
        java.util.concurrent.ConcurrentLinkedQueue $r2;
        java.lang.Object $r3;
        java.util.concurrent.atomic.AtomicInteger $r5, $r6;
        org.apache.tomcat.util.net.NioBlockingSelector $r7, $r8;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        r0.<org.apache.tomcat.util.net.NioSelectorPool: boolean enabled> = 0;
        goto label1;

     label0:
        virtualinvoke r1.<java.nio.channels.Selector: void close()>();

     label1:
        $r2 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.ConcurrentLinkedQueue selectors>;
        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>();
        $r4 = (java.nio.channels.Selector) $r3;
        r1 = $r4;
        if $r4 != null goto label0;

        $r5 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.atomic.AtomicInteger spare>;
        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(0);
        $r6 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.atomic.AtomicInteger active>;
        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(0);
        $r7 = r0.<org.apache.tomcat.util.net.NioSelectorPool: org.apache.tomcat.util.net.NioBlockingSelector blockingSelector>;
        if $r7 == null goto label2;

        $r8 = r0.<org.apache.tomcat.util.net.NioSelectorPool: org.apache.tomcat.util.net.NioBlockingSelector blockingSelector>;
        virtualinvoke $r8.<org.apache.tomcat.util.net.NioBlockingSelector: void close()>();

     label2:
        $z0 = <org.apache.tomcat.util.net.NioSelectorPool: boolean SHARED>;
        if $z0 == 0 goto label3;

        $r9 = virtualinvoke r0.<org.apache.tomcat.util.net.NioSelectorPool: java.nio.channels.Selector getSharedSelector()>();
        if $r9 == null goto label3;

        $r10 = virtualinvoke r0.<org.apache.tomcat.util.net.NioSelectorPool: java.nio.channels.Selector getSharedSelector()>();
        virtualinvoke $r10.<java.nio.channels.Selector: void close()>();
        r0.<org.apache.tomcat.util.net.NioSelectorPool: java.nio.channels.Selector SHARED_SELECTOR> = null;

     label3:
        return;
    }

    public void open() throws java.io.IOException
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        boolean $z0;
        org.apache.tomcat.util.net.NioBlockingSelector $r2, $r3;
        java.nio.channels.Selector $r4;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        r0.<org.apache.tomcat.util.net.NioSelectorPool: boolean enabled> = 1;
        virtualinvoke r0.<org.apache.tomcat.util.net.NioSelectorPool: java.nio.channels.Selector getSharedSelector()>();
        $z0 = <org.apache.tomcat.util.net.NioSelectorPool: boolean SHARED>;
        if $z0 == 0 goto label0;

        $r2 = new org.apache.tomcat.util.net.NioBlockingSelector;
        specialinvoke $r2.<org.apache.tomcat.util.net.NioBlockingSelector: void <init>()>();
        r0.<org.apache.tomcat.util.net.NioSelectorPool: org.apache.tomcat.util.net.NioBlockingSelector blockingSelector> = $r2;
        $r3 = r0.<org.apache.tomcat.util.net.NioSelectorPool: org.apache.tomcat.util.net.NioBlockingSelector blockingSelector>;
        $r4 = virtualinvoke r0.<org.apache.tomcat.util.net.NioSelectorPool: java.nio.channels.Selector getSharedSelector()>();
        virtualinvoke $r3.<org.apache.tomcat.util.net.NioBlockingSelector: void open(java.nio.channels.Selector)>($r4);

     label0:
        return;
    }

    public int write(java.nio.ByteBuffer, org.apache.tomcat.util.net.NioChannel, java.nio.channels.Selector, long) throws java.io.IOException
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        java.nio.ByteBuffer r1;
        org.apache.tomcat.util.net.NioChannel r2;
        java.nio.channels.Selector r3;
        long l0;
        int $i1;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        r1 := @parameter0: java.nio.ByteBuffer;
        r2 := @parameter1: org.apache.tomcat.util.net.NioChannel;
        r3 := @parameter2: java.nio.channels.Selector;
        l0 := @parameter3: long;
        $i1 = virtualinvoke r0.<org.apache.tomcat.util.net.NioSelectorPool: int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)>(r1, r2, r3, l0, 1);
        return $i1;
    }

    public int write(java.nio.ByteBuffer, org.apache.tomcat.util.net.NioChannel, java.nio.channels.Selector, long, boolean) throws java.io.IOException
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        java.nio.ByteBuffer r1;
        org.apache.tomcat.util.net.NioChannel r2;
        java.nio.channels.Selector r3;
        long l0, l3, $l7, $l8;
        boolean z0, $z1, z2, z3, $z4, $z5;
        java.nio.channels.SelectionKey r4;
        int i1, i2, $i4, i5;
        java.lang.Throwable r5, $r11;
        org.apache.tomcat.util.net.NioBlockingSelector $r6;
        java.io.EOFException $r7;
        java.nio.channels.SocketChannel $r8;
        byte $b6, $b9;
        java.net.SocketTimeoutException $r10;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        r1 := @parameter0: java.nio.ByteBuffer;
        r2 := @parameter1: org.apache.tomcat.util.net.NioChannel;
        r3 := @parameter2: java.nio.channels.Selector;
        l0 := @parameter3: long;
        z0 := @parameter4: boolean;
        $z1 = <org.apache.tomcat.util.net.NioSelectorPool: boolean SHARED>;
        if $z1 == 0 goto label0;

        if z0 == 0 goto label0;

        $r6 = r0.<org.apache.tomcat.util.net.NioSelectorPool: org.apache.tomcat.util.net.NioBlockingSelector blockingSelector>;
        $i4 = virtualinvoke $r6.<org.apache.tomcat.util.net.NioBlockingSelector: int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,long)>(r1, r2, l0);
        return $i4;

     label0:
        r4 = null;
        i1 = 0;
        z2 = 0;
        i2 = 1;
        l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label1:
        goto label12;

     label2:
        z3 = 0;
        if i2 <= 0 goto label5;

        i5 = virtualinvoke r2.<org.apache.tomcat.util.net.NioChannel: int write(java.nio.ByteBuffer)>(r1);
        if i5 != -1 goto label3;

        $r7 = new java.io.EOFException;
        specialinvoke $r7.<java.io.EOFException: void <init>()>();
        throw $r7;

     label3:
        i1 = i1 + i5;
        if i5 <= 0 goto label4;

        l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        goto label12;

     label4:
        if i5 != 0 goto label5;

        if z0 != 0 goto label5;

        goto label13;

     label5:
        if r3 == null goto label8;

        if r4 != null goto label6;

        $r8 = virtualinvoke r2.<org.apache.tomcat.util.net.NioChannel: java.nio.channels.SocketChannel getIOChannel()>();
        r4 = virtualinvoke $r8.<java.nio.channels.SocketChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>(r3, 4);
        goto label7;

     label6:
        virtualinvoke r4.<java.nio.channels.SelectionKey: java.nio.channels.SelectionKey interestOps(int)>(4);

     label7:
        i2 = virtualinvoke r3.<java.nio.channels.Selector: int select(long)>(l0);

     label8:
        $b6 = l0 cmp 0L;
        if $b6 <= 0 goto label12;

        if r3 == null goto label9;

        if i2 != 0 goto label12;

     label9:
        $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l8 = $l7 - l3;
        $b9 = $l8 cmp l0;
        if $b9 < 0 goto label10;

        $z4 = 1;
        goto label11;

     label10:
        $z4 = 0;

     label11:
        z2 = $z4;

     label12:
        if z2 != 0 goto label13;

        $z5 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();
        if $z5 != 0 goto label2;

     label13:
        if z2 == 0 goto label16;

        $r10 = new java.net.SocketTimeoutException;
        specialinvoke $r10.<java.net.SocketTimeoutException: void <init>()>();
        throw $r10;

     label14:
        $r11 := @caughtexception;
        r5 = $r11;
        if r4 == null goto label15;

        virtualinvoke r4.<java.nio.channels.SelectionKey: void cancel()>();
        if r3 == null goto label15;

        virtualinvoke r3.<java.nio.channels.Selector: int selectNow()>();

     label15:
        throw r5;

     label16:
        if r4 == null goto label17;

        virtualinvoke r4.<java.nio.channels.SelectionKey: void cancel()>();
        if r3 == null goto label17;

        virtualinvoke r3.<java.nio.channels.Selector: int selectNow()>();

     label17:
        return i1;

        catch java.lang.Throwable from label1 to label14 with label14;
    }

    public int read(java.nio.ByteBuffer, org.apache.tomcat.util.net.NioChannel, java.nio.channels.Selector, long) throws java.io.IOException
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        java.nio.ByteBuffer r1;
        org.apache.tomcat.util.net.NioChannel r2;
        java.nio.channels.Selector r3;
        long l0;
        int $i1;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        r1 := @parameter0: java.nio.ByteBuffer;
        r2 := @parameter1: org.apache.tomcat.util.net.NioChannel;
        r3 := @parameter2: java.nio.channels.Selector;
        l0 := @parameter3: long;
        $i1 = virtualinvoke r0.<org.apache.tomcat.util.net.NioSelectorPool: int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)>(r1, r2, r3, l0, 1);
        return $i1;
    }

    public int read(java.nio.ByteBuffer, org.apache.tomcat.util.net.NioChannel, java.nio.channels.Selector, long, boolean) throws java.io.IOException
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        java.nio.ByteBuffer r1;
        org.apache.tomcat.util.net.NioChannel r2;
        java.nio.channels.Selector r3;
        long l0, l3, $l7, $l8;
        boolean z0, $z1, z2, z3, $z4;
        java.nio.channels.SelectionKey r4;
        int i1, i2, $i4, i5;
        java.lang.Throwable r5, $r11;
        org.apache.tomcat.util.net.NioBlockingSelector $r6;
        java.io.EOFException $r7;
        java.nio.channels.SocketChannel $r8;
        byte $b6, $b9;
        java.net.SocketTimeoutException $r10;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        r1 := @parameter0: java.nio.ByteBuffer;
        r2 := @parameter1: org.apache.tomcat.util.net.NioChannel;
        r3 := @parameter2: java.nio.channels.Selector;
        l0 := @parameter3: long;
        z0 := @parameter4: boolean;
        $z1 = <org.apache.tomcat.util.net.NioSelectorPool: boolean SHARED>;
        if $z1 == 0 goto label0;

        if z0 == 0 goto label0;

        $r6 = r0.<org.apache.tomcat.util.net.NioSelectorPool: org.apache.tomcat.util.net.NioBlockingSelector blockingSelector>;
        $i4 = virtualinvoke $r6.<org.apache.tomcat.util.net.NioBlockingSelector: int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,long)>(r1, r2, l0);
        return $i4;

     label0:
        r4 = null;
        i1 = 0;
        z2 = 0;
        i2 = 1;
        l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label1:
        goto label12;

     label2:
        z3 = 0;
        if i2 <= 0 goto label5;

        i5 = virtualinvoke r2.<org.apache.tomcat.util.net.NioChannel: int read(java.nio.ByteBuffer)>(r1);
        if i5 != -1 goto label3;

        $r7 = new java.io.EOFException;
        specialinvoke $r7.<java.io.EOFException: void <init>()>();
        throw $r7;

     label3:
        i1 = i1 + i5;
        if i5 <= 0 goto label4;

        goto label12;

     label4:
        if i5 != 0 goto label5;

        if i1 > 0 goto label13;

        if z0 != 0 goto label5;

        goto label13;

     label5:
        if r3 == null goto label8;

        if r4 != null goto label6;

        $r8 = virtualinvoke r2.<org.apache.tomcat.util.net.NioChannel: java.nio.channels.SocketChannel getIOChannel()>();
        r4 = virtualinvoke $r8.<java.nio.channels.SocketChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>(r3, 1);
        goto label7;

     label6:
        virtualinvoke r4.<java.nio.channels.SelectionKey: java.nio.channels.SelectionKey interestOps(int)>(1);

     label7:
        i2 = virtualinvoke r3.<java.nio.channels.Selector: int select(long)>(l0);

     label8:
        $b6 = l0 cmp 0L;
        if $b6 <= 0 goto label12;

        if r3 == null goto label9;

        if i2 != 0 goto label12;

     label9:
        $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l8 = $l7 - l3;
        $b9 = $l8 cmp l0;
        if $b9 < 0 goto label10;

        $z4 = 1;
        goto label11;

     label10:
        $z4 = 0;

     label11:
        z2 = $z4;

     label12:
        if z2 == 0 goto label2;

     label13:
        if z2 == 0 goto label16;

        $r10 = new java.net.SocketTimeoutException;
        specialinvoke $r10.<java.net.SocketTimeoutException: void <init>()>();
        throw $r10;

     label14:
        $r11 := @caughtexception;
        r5 = $r11;
        if r4 == null goto label15;

        virtualinvoke r4.<java.nio.channels.SelectionKey: void cancel()>();
        if r3 == null goto label15;

        virtualinvoke r3.<java.nio.channels.Selector: int selectNow()>();

     label15:
        throw r5;

     label16:
        if r4 == null goto label17;

        virtualinvoke r4.<java.nio.channels.SelectionKey: void cancel()>();
        if r3 == null goto label17;

        virtualinvoke r3.<java.nio.channels.Selector: int selectNow()>();

     label17:
        return i1;

        catch java.lang.Throwable from label1 to label14 with label14;
    }

    public void setMaxSelectors(int)
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        int i0;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        i0 := @parameter0: int;
        r0.<org.apache.tomcat.util.net.NioSelectorPool: int maxSelectors> = i0;
        return;
    }

    public void setMaxSpareSelectors(int)
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        int i0;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        i0 := @parameter0: int;
        r0.<org.apache.tomcat.util.net.NioSelectorPool: int maxSpareSelectors> = i0;
        return;
    }

    public void setEnabled(boolean)
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        boolean z0;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        z0 := @parameter0: boolean;
        r0.<org.apache.tomcat.util.net.NioSelectorPool: boolean enabled> = z0;
        return;
    }

    public void setSharedSelectorTimeout(long)
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        long l0;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        l0 := @parameter0: long;
        r0.<org.apache.tomcat.util.net.NioSelectorPool: long sharedSelectorTimeout> = l0;
        return;
    }

    public int getMaxSelectors()
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        int $i0;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        $i0 = r0.<org.apache.tomcat.util.net.NioSelectorPool: int maxSelectors>;
        return $i0;
    }

    public int getMaxSpareSelectors()
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        int $i0;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        $i0 = r0.<org.apache.tomcat.util.net.NioSelectorPool: int maxSpareSelectors>;
        return $i0;
    }

    public boolean isEnabled()
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        $z0 = r0.<org.apache.tomcat.util.net.NioSelectorPool: boolean enabled>;
        return $z0;
    }

    public long getSharedSelectorTimeout()
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        long $l0;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        $l0 = r0.<org.apache.tomcat.util.net.NioSelectorPool: long sharedSelectorTimeout>;
        return $l0;
    }

    public java.util.concurrent.ConcurrentLinkedQueue getSelectors()
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        java.util.concurrent.ConcurrentLinkedQueue $r1;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        $r1 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.ConcurrentLinkedQueue selectors>;
        return $r1;
    }

    public java.util.concurrent.atomic.AtomicInteger getSpare()
    {
        org.apache.tomcat.util.net.NioSelectorPool r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: org.apache.tomcat.util.net.NioSelectorPool;
        $r1 = r0.<org.apache.tomcat.util.net.NioSelectorPool: java.util.concurrent.atomic.AtomicInteger spare>;
        return $r1;
    }
}
