abstract class sun.nio.fs.AbstractWatchService extends java.lang.Object implements java.nio.file.WatchService
{
    private final java.util.concurrent.LinkedBlockingDeque pendingKeys;
    private final java.nio.file.WatchKey CLOSE_KEY;
    private volatile boolean closed;
    private final java.lang.Object closeLock;

    protected void <init>()
    {
        sun.nio.fs.AbstractWatchService r0;
        java.util.concurrent.LinkedBlockingDeque $r1;
        sun.nio.fs.AbstractWatchService$1 $r2;
        java.lang.Object $r3;

        r0 := @this: sun.nio.fs.AbstractWatchService;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new java.util.concurrent.LinkedBlockingDeque;
        specialinvoke $r1.<java.util.concurrent.LinkedBlockingDeque: void <init>()>();
        r0.<sun.nio.fs.AbstractWatchService: java.util.concurrent.LinkedBlockingDeque pendingKeys> = $r1;
        $r2 = new sun.nio.fs.AbstractWatchService$1;
        specialinvoke $r2.<sun.nio.fs.AbstractWatchService$1: void <init>(sun.nio.fs.AbstractWatchService,java.nio.file.Path,sun.nio.fs.AbstractWatchService)>(r0, null, null);
        r0.<sun.nio.fs.AbstractWatchService: java.nio.file.WatchKey CLOSE_KEY> = $r2;
        $r3 = new java.lang.Object;
        specialinvoke $r3.<java.lang.Object: void <init>()>();
        r0.<sun.nio.fs.AbstractWatchService: java.lang.Object closeLock> = $r3;
        return;
    }

    abstract transient java.nio.file.WatchKey register(java.nio.file.Path, java.nio.file.WatchEvent$Kind[], java.nio.file.WatchEvent$Modifier[]) throws java.io.IOException;

    final void enqueueKey(java.nio.file.WatchKey)
    {
        sun.nio.fs.AbstractWatchService r0;
        java.nio.file.WatchKey r1;
        java.util.concurrent.LinkedBlockingDeque $r2;

        r0 := @this: sun.nio.fs.AbstractWatchService;
        r1 := @parameter0: java.nio.file.WatchKey;
        $r2 = r0.<sun.nio.fs.AbstractWatchService: java.util.concurrent.LinkedBlockingDeque pendingKeys>;
        virtualinvoke $r2.<java.util.concurrent.LinkedBlockingDeque: boolean offer(java.lang.Object)>(r1);
        return;
    }

    private void checkOpen()
    {
        sun.nio.fs.AbstractWatchService r0;
        boolean $z0;
        java.nio.file.ClosedWatchServiceException $r1;

        r0 := @this: sun.nio.fs.AbstractWatchService;
        $z0 = r0.<sun.nio.fs.AbstractWatchService: boolean closed>;
        if $z0 == 0 goto label0;

        $r1 = new java.nio.file.ClosedWatchServiceException;
        specialinvoke $r1.<java.nio.file.ClosedWatchServiceException: void <init>()>();
        throw $r1;

     label0:
        return;
    }

    private void checkKey(java.nio.file.WatchKey)
    {
        sun.nio.fs.AbstractWatchService r0;
        java.nio.file.WatchKey r1, $r2;

        r0 := @this: sun.nio.fs.AbstractWatchService;
        r1 := @parameter0: java.nio.file.WatchKey;
        $r2 = r0.<sun.nio.fs.AbstractWatchService: java.nio.file.WatchKey CLOSE_KEY>;
        if r1 != $r2 goto label0;

        virtualinvoke r0.<sun.nio.fs.AbstractWatchService: void enqueueKey(java.nio.file.WatchKey)>(r1);

     label0:
        specialinvoke r0.<sun.nio.fs.AbstractWatchService: void checkOpen()>();
        return;
    }

    public final java.nio.file.WatchKey poll()
    {
        sun.nio.fs.AbstractWatchService r0;
        java.nio.file.WatchKey r1;
        java.util.concurrent.LinkedBlockingDeque $r2;
        java.lang.Object $r3;

        r0 := @this: sun.nio.fs.AbstractWatchService;
        specialinvoke r0.<sun.nio.fs.AbstractWatchService: void checkOpen()>();
        $r2 = r0.<sun.nio.fs.AbstractWatchService: java.util.concurrent.LinkedBlockingDeque pendingKeys>;
        $r3 = virtualinvoke $r2.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object poll()>();
        r1 = (java.nio.file.WatchKey) $r3;
        specialinvoke r0.<sun.nio.fs.AbstractWatchService: void checkKey(java.nio.file.WatchKey)>(r1);
        return r1;
    }

    public final java.nio.file.WatchKey poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        sun.nio.fs.AbstractWatchService r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        java.nio.file.WatchKey r2;
        java.util.concurrent.LinkedBlockingDeque $r3;
        java.lang.Object $r4;

        r0 := @this: sun.nio.fs.AbstractWatchService;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.concurrent.TimeUnit;
        specialinvoke r0.<sun.nio.fs.AbstractWatchService: void checkOpen()>();
        $r3 = r0.<sun.nio.fs.AbstractWatchService: java.util.concurrent.LinkedBlockingDeque pendingKeys>;
        $r4 = virtualinvoke $r3.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>(l0, r1);
        r2 = (java.nio.file.WatchKey) $r4;
        specialinvoke r0.<sun.nio.fs.AbstractWatchService: void checkKey(java.nio.file.WatchKey)>(r2);
        return r2;
    }

    public final java.nio.file.WatchKey take() throws java.lang.InterruptedException
    {
        sun.nio.fs.AbstractWatchService r0;
        java.nio.file.WatchKey r1;
        java.util.concurrent.LinkedBlockingDeque $r2;
        java.lang.Object $r3;

        r0 := @this: sun.nio.fs.AbstractWatchService;
        specialinvoke r0.<sun.nio.fs.AbstractWatchService: void checkOpen()>();
        $r2 = r0.<sun.nio.fs.AbstractWatchService: java.util.concurrent.LinkedBlockingDeque pendingKeys>;
        $r3 = virtualinvoke $r2.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object take()>();
        r1 = (java.nio.file.WatchKey) $r3;
        specialinvoke r0.<sun.nio.fs.AbstractWatchService: void checkKey(java.nio.file.WatchKey)>(r1);
        return r1;
    }

    final boolean isOpen()
    {
        sun.nio.fs.AbstractWatchService r0;
        boolean $z0, $z1;

        r0 := @this: sun.nio.fs.AbstractWatchService;
        $z0 = r0.<sun.nio.fs.AbstractWatchService: boolean closed>;
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    final java.lang.Object closeLock()
    {
        sun.nio.fs.AbstractWatchService r0;
        java.lang.Object $r1;

        r0 := @this: sun.nio.fs.AbstractWatchService;
        $r1 = r0.<sun.nio.fs.AbstractWatchService: java.lang.Object closeLock>;
        return $r1;
    }

    abstract void implClose() throws java.io.IOException;

    public final void close() throws java.io.IOException
    {
        sun.nio.fs.AbstractWatchService r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r7;
        boolean $z0;
        java.util.concurrent.LinkedBlockingDeque $r4, $r5;
        java.nio.file.WatchKey $r6;

        r0 := @this: sun.nio.fs.AbstractWatchService;
        $r3 = r0.<sun.nio.fs.AbstractWatchService: java.lang.Object closeLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z0 = r0.<sun.nio.fs.AbstractWatchService: boolean closed>;
        if $z0 == 0 goto label2;

        exitmonitor r1;

     label1:
        return;

     label2:
        r0.<sun.nio.fs.AbstractWatchService: boolean closed> = 1;
        virtualinvoke r0.<sun.nio.fs.AbstractWatchService: void implClose()>();
        $r4 = r0.<sun.nio.fs.AbstractWatchService: java.util.concurrent.LinkedBlockingDeque pendingKeys>;
        virtualinvoke $r4.<java.util.concurrent.LinkedBlockingDeque: void clear()>();
        $r5 = r0.<sun.nio.fs.AbstractWatchService: java.util.concurrent.LinkedBlockingDeque pendingKeys>;
        $r6 = r0.<sun.nio.fs.AbstractWatchService: java.nio.file.WatchKey CLOSE_KEY>;
        virtualinvoke $r5.<java.util.concurrent.LinkedBlockingDeque: boolean offer(java.lang.Object)>($r6);
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r7 := @caughtexception;

     label5:
        r2 = $r7;
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
}
