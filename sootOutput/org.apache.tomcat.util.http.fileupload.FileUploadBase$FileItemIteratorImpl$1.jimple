class org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl$1 extends org.apache.tomcat.util.http.fileupload.util.LimitedInputStream
{
    final org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl this$1;

    void <init>(org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl, java.io.InputStream, long)
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl$1 r0;
        org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl r1;
        java.io.InputStream r2;
        long l0;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl$1;
        r1 := @parameter0: org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl;
        r2 := @parameter1: java.io.InputStream;
        l0 := @parameter2: long;
        r0.<org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl$1: org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl this$1> = r1;
        specialinvoke r0.<org.apache.tomcat.util.http.fileupload.util.LimitedInputStream: void <init>(java.io.InputStream,long)>(r2, l0);
        return;
    }

    protected void raiseError(long, long) throws java.io.IOException
    {
        org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl$1 r0;
        long l0, l1;
        org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException $r1, r2;
        java.lang.Object[] $r3;
        java.lang.Long $r4, $r5;
        java.lang.String $r6;
        org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException $r7;

        r0 := @this: org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl$1;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        $r1 = new org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException;
        $r3 = newarray (java.lang.Object)[2];
        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);
        $r3[0] = $r4;
        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);
        $r3[1] = $r5;
        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("the request was rejected because its size (%s) exceeds the configured maximum (%s)", $r3);
        specialinvoke $r1.<org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: void <init>(java.lang.String,long,long)>($r6, l1, l0);
        r2 = $r1;
        $r7 = new org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException;
        specialinvoke $r7.<org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException: void <init>(java.lang.Throwable)>(r2);
        throw $r7;
    }
}
