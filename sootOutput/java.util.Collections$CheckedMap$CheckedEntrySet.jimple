class java.util.Collections$CheckedMap$CheckedEntrySet extends java.lang.Object implements java.util.Set
{
    private final java.util.Set s;
    private final java.lang.Class valueType;

    void <init>(java.util.Set, java.lang.Class)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Set r1;
        java.lang.Class r2;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        r1 := @parameter0: java.util.Set;
        r2 := @parameter1: java.lang.Class;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s> = r1;
        r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.lang.Class valueType> = r2;
        return;
    }

    public int size()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Set $r1;
        int $i0;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        $r1 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;
        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();
        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Set $r1;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        $r1 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;
        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();
        return $z0;
    }

    public java.lang.String toString()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Set $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        $r1 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();
        return $r2;
    }

    public int hashCode()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Set $r1;
        int $i0;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        $r1 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;
        $i0 = interfaceinvoke $r1.<java.util.Set: int hashCode()>();
        return $i0;
    }

    public void clear()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Set $r1;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        $r1 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;
        interfaceinvoke $r1.<java.util.Set: void clear()>();
        return;
    }

    public boolean add(java.util.Map$Entry)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Map$Entry r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        r1 := @parameter0: java.util.Map$Entry;
        $r2 = new java.lang.UnsupportedOperationException;
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r2;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Collection r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        r1 := @parameter0: java.util.Collection;
        $r2 = new java.lang.UnsupportedOperationException;
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r2;
    }

    public java.util.Iterator iterator()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Iterator r1;
        java.lang.Class r2;
        java.util.Set $r3;
        java.util.Collections$CheckedMap$CheckedEntrySet$1 $r4;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        $r3 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;
        r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();
        r2 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.lang.Class valueType>;
        $r4 = new java.util.Collections$CheckedMap$CheckedEntrySet$1;
        specialinvoke $r4.<java.util.Collections$CheckedMap$CheckedEntrySet$1: void <init>(java.util.Collections$CheckedMap$CheckedEntrySet,java.util.Iterator,java.lang.Class)>(r0, r1, r2);
        return $r4;
    }

    public java.lang.Object[] toArray()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.lang.Object[] r1, r2, $r7;
        int i0, $i1, $i2;
        java.util.Set $r3;
        java.lang.Class $r4, $r5, $r6, $r10;
        boolean $z0;
        java.lang.Object $r8;
        java.util.Map$Entry $r9;
        java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry $r11;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        $r3 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;
        r1 = interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray()>();
        $r4 = class "java/util/Collections$CheckedMap$CheckedEntrySet$CheckedEntry";
        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class getComponentType()>();
        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isInstance(java.lang.Object)>($r6);
        if $z0 == 0 goto label0;

        $r7 = r1;
        goto label1;

     label0:
        $i1 = lengthof r1;
        $r7 = newarray (java.lang.Object)[$i1];

     label1:
        r2 = $r7;
        i0 = 0;

     label2:
        $i2 = lengthof r1;
        if i0 >= $i2 goto label3;

        $r8 = r1[i0];
        $r9 = (java.util.Map$Entry) $r8;
        $r10 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.lang.Class valueType>;
        $r11 = staticinvoke <java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry checkedEntry(java.util.Map$Entry,java.lang.Class)>($r9, $r10);
        r2[i0] = $r11;
        i0 = i0 + 1;
        goto label2;

     label3:
        return r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.lang.Object[] r1, r2, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.Set $r3;
        java.lang.Object $r5;
        java.util.Map$Entry $r6;
        java.lang.Class $r7;
        java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry $r8;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        r1 := @parameter0: java.lang.Object[];
        $r3 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;
        $i1 = lengthof r1;
        if $i1 != 0 goto label0;

        $r4 = r1;
        goto label1;

     label0:
        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, 0);

     label1:
        r2 = interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r4);
        i0 = 0;

     label2:
        $i2 = lengthof r2;
        if i0 >= $i2 goto label3;

        $r5 = r2[i0];
        $r6 = (java.util.Map$Entry) $r5;
        $r7 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.lang.Class valueType>;
        $r8 = staticinvoke <java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry checkedEntry(java.util.Map$Entry,java.lang.Class)>($r6, $r7);
        r2[i0] = $r8;
        i0 = i0 + 1;
        goto label2;

     label3:
        $i3 = lengthof r2;
        $i4 = lengthof r1;
        if $i3 <= $i4 goto label4;

        return r2;

     label4:
        $i5 = lengthof r2;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, 0, $i5);
        $i6 = lengthof r1;
        $i7 = lengthof r2;
        if $i6 <= $i7 goto label5;

        $i8 = lengthof r2;
        r1[$i8] = null;

     label5:
        return r1;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.lang.Object r1;
        java.util.Map$Entry r2, $r4;
        boolean $z0, $z1, $z2;
        java.util.Set $r3;
        java.lang.Class $r5;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.util.Map$Entry;
        if $z0 != 0 goto label0;

        return 0;

     label0:
        r2 = (java.util.Map$Entry) r1;
        $r3 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;
        $z1 = r2 instanceof java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry;
        if $z1 == 0 goto label1;

        $r4 = r2;
        goto label2;

     label1:
        $r5 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.lang.Class valueType>;
        $r4 = staticinvoke <java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry checkedEntry(java.util.Map$Entry,java.lang.Class)>(r2, $r5);

     label2:
        $z2 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r4);
        return $z2;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        boolean $z0, $z1;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        r1 := @parameter0: java.util.Collection;
        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $z1 = virtualinvoke r0.<java.util.Collections$CheckedMap$CheckedEntrySet: boolean contains(java.lang.Object)>(r3);
        if $z1 != 0 goto label1;

        return 0;

     label1:
        goto label0;

     label2:
        return 1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.lang.Object r1;
        java.util.AbstractMap$SimpleImmutableEntry $r2;
        boolean $z0, $z1;
        java.util.Set $r3;
        java.util.Map$Entry $r4;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.util.Map$Entry;
        if $z0 != 0 goto label0;

        return 0;

     label0:
        $r3 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;
        $r2 = new java.util.AbstractMap$SimpleImmutableEntry;
        $r4 = (java.util.Map$Entry) r1;
        specialinvoke $r2.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.util.Map$Entry)>($r4);
        $z1 = interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>($r2);
        return $z1;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        r1 := @parameter0: java.util.Collection;
        $z0 = specialinvoke r0.<java.util.Collections$CheckedMap$CheckedEntrySet: boolean batchRemove(java.util.Collection,boolean)>(r1, 0);
        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        r1 := @parameter0: java.util.Collection;
        $z0 = specialinvoke r0.<java.util.Collections$CheckedMap$CheckedEntrySet: boolean batchRemove(java.util.Collection,boolean)>(r1, 1);
        return $z0;
    }

    private boolean batchRemove(java.util.Collection, boolean)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.util.Collection r1;
        boolean z0, z1, $z2, $z3;
        java.util.Iterator r2;
        java.lang.Object $r3;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        r1 := @parameter0: java.util.Collection;
        z0 := @parameter1: boolean;
        z1 = 0;
        r2 = virtualinvoke r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Iterator iterator()>();

     label0:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label1;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $z3 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r3);
        if $z3 == z0 goto label0;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();
        z1 = 1;
        goto label0;

     label1:
        return z1;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.lang.Object r1;
        java.util.Set r2, $r3;
        boolean $z0, $z1, $z2;
        int $i0, $i1;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        r1 := @parameter0: java.lang.Object;
        if r1 != r0 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof java.util.Set;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.util.Set) r1;
        $i0 = interfaceinvoke r2.<java.util.Set: int size()>();
        $r3 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Set s>;
        $i1 = interfaceinvoke $r3.<java.util.Set: int size()>();
        if $i0 != $i1 goto label2;

        $z1 = virtualinvoke r0.<java.util.Collections$CheckedMap$CheckedEntrySet: boolean containsAll(java.util.Collection)>(r2);
        if $z1 == 0 goto label2;

        $z2 = 1;
        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    static java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry checkedEntry(java.util.Map$Entry, java.lang.Class)
    {
        java.util.Map$Entry r0;
        java.lang.Class r1;
        java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry $r2;

        r0 := @parameter0: java.util.Map$Entry;
        r1 := @parameter1: java.lang.Class;
        $r2 = new java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry;
        specialinvoke $r2.<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: void <init>(java.util.Map$Entry,java.lang.Class)>(r0, r1);
        return $r2;
    }

    public volatile boolean add(java.lang.Object)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet r0;
        java.lang.Object r1;
        java.util.Map$Entry $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.util.Map$Entry) r1;
        $z0 = virtualinvoke r0.<java.util.Collections$CheckedMap$CheckedEntrySet: boolean add(java.util.Map$Entry)>($r2);
        return $z0;
    }
}
