class java.util.Collections$SynchronizedMap extends java.lang.Object implements java.util.Map, java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.Map m;
    final java.lang.Object mutex;
    private transient java.util.Set keySet;
    private transient java.util.Set entrySet;
    private transient java.util.Collection values;

    void <init>(java.util.Map)
    {
        java.util.Collections$SynchronizedMap r0;
        java.util.Map r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.Collections$SynchronizedMap;
        r1 := @parameter0: java.util.Map;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.Collections$SynchronizedMap: java.util.Set keySet> = null;
        r0.<java.util.Collections$SynchronizedMap: java.util.Set entrySet> = null;
        r0.<java.util.Collections$SynchronizedMap: java.util.Collection values> = null;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        r0.<java.util.Collections$SynchronizedMap: java.util.Map m> = r1;
        r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex> = r0;
        return;
    }

    void <init>(java.util.Map, java.lang.Object)
    {
        java.util.Collections$SynchronizedMap r0;
        java.util.Map r1;
        java.lang.Object r2;

        r0 := @this: java.util.Collections$SynchronizedMap;
        r1 := @parameter0: java.util.Map;
        r2 := @parameter1: java.lang.Object;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.Collections$SynchronizedMap: java.util.Set keySet> = null;
        r0.<java.util.Collections$SynchronizedMap: java.util.Set entrySet> = null;
        r0.<java.util.Collections$SynchronizedMap: java.util.Collection values> = null;
        r0.<java.util.Collections$SynchronizedMap: java.util.Map m> = r1;
        r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex> = r2;
        return;
    }

    public int size()
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.util.Map $r4;
        int $i0;

        r0 := @this: java.util.Collections$SynchronizedMap;
        $r3 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;
        $i0 = interfaceinvoke $r4.<java.util.Map: int size()>();
        exitmonitor r1;

     label1:
        return $i0;

     label2:
        $r5 := @caughtexception;

     label3:
        r2 = $r5;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public boolean isEmpty()
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.util.Map $r4;
        boolean $z0;

        r0 := @this: java.util.Collections$SynchronizedMap;
        $r3 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;
        $z0 = interfaceinvoke $r4.<java.util.Map: boolean isEmpty()>();
        exitmonitor r1;

     label1:
        return $z0;

     label2:
        $r5 := @caughtexception;

     label3:
        r2 = $r5;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, r2, $r4;
        java.lang.Throwable r3, $r6;
        java.util.Map $r5;
        boolean $z0;

        r0 := @this: java.util.Collections$SynchronizedMap;
        r1 := @parameter0: java.lang.Object;
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;
        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);
        exitmonitor r2;

     label1:
        return $z0;

     label2:
        $r6 := @caughtexception;

     label3:
        r3 = $r6;
        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, r2, $r4;
        java.lang.Throwable r3, $r6;
        java.util.Map $r5;
        boolean $z0;

        r0 := @this: java.util.Collections$SynchronizedMap;
        r1 := @parameter0: java.lang.Object;
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;
        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsValue(java.lang.Object)>(r1);
        exitmonitor r2;

     label1:
        return $z0;

     label2:
        $r6 := @caughtexception;

     label3:
        r3 = $r6;
        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, r2, $r4, $r6;
        java.lang.Throwable r3, $r7;
        java.util.Map $r5;

        r0 := @this: java.util.Collections$SynchronizedMap;
        r1 := @parameter0: java.lang.Object;
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;
        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        exitmonitor r2;

     label1:
        return $r6;

     label2:
        $r7 := @caughtexception;

     label3:
        r3 = $r7;
        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, r2, r3, $r5, $r7;
        java.lang.Throwable r4, $r8;
        java.util.Map $r6;

        r0 := @this: java.util.Collections$SynchronizedMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r5 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        r3 = $r5;
        entermonitor $r5;

     label0:
        $r6 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;
        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);
        exitmonitor r3;

     label1:
        return $r7;

     label2:
        $r8 := @caughtexception;

     label3:
        r4 = $r8;
        exitmonitor r3;

     label4:
        throw r4;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, r2, $r4, $r6;
        java.lang.Throwable r3, $r7;
        java.util.Map $r5;

        r0 := @this: java.util.Collections$SynchronizedMap;
        r1 := @parameter0: java.lang.Object;
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;
        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);
        exitmonitor r2;

     label1:
        return $r6;

     label2:
        $r7 := @caughtexception;

     label3:
        r3 = $r7;
        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void putAll(java.util.Map)
    {
        java.util.Collections$SynchronizedMap r0;
        java.util.Map r1, $r5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;

        r0 := @this: java.util.Collections$SynchronizedMap;
        r1 := @parameter0: java.util.Map;
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;
        interfaceinvoke $r5.<java.util.Map: void putAll(java.util.Map)>(r1);
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r6 := @caughtexception;

     label3:
        r3 = $r6;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void clear()
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.util.Map $r4;

        r0 := @this: java.util.Collections$SynchronizedMap;
        $r3 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;
        interfaceinvoke $r4.<java.util.Map: void clear()>();
        exitmonitor r1;

     label1:
        goto label5;

     label2:
        $r5 := @caughtexception;

     label3:
        r2 = $r5;
        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.util.Set keySet()
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, $r3, $r8;
        java.lang.Throwable r2, $r10;
        java.util.Set $r4, $r7, $r9;
        java.util.Collections$SynchronizedSet $r5;
        java.util.Map $r6;

        r0 := @this: java.util.Collections$SynchronizedMap;
        $r3 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.util.Set keySet>;
        if $r4 != null goto label1;

        $r5 = new java.util.Collections$SynchronizedSet;
        $r6 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;
        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();
        $r8 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        specialinvoke $r5.<java.util.Collections$SynchronizedSet: void <init>(java.util.Set,java.lang.Object)>($r7, $r8);
        r0.<java.util.Collections$SynchronizedMap: java.util.Set keySet> = $r5;

     label1:
        $r9 = r0.<java.util.Collections$SynchronizedMap: java.util.Set keySet>;
        exitmonitor r1;

     label2:
        return $r9;

     label3:
        $r10 := @caughtexception;

     label4:
        r2 = $r10;
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.Set entrySet()
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, $r3, $r8;
        java.lang.Throwable r2, $r10;
        java.util.Set $r4, $r7, $r9;
        java.util.Collections$SynchronizedSet $r5;
        java.util.Map $r6;

        r0 := @this: java.util.Collections$SynchronizedMap;
        $r3 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.util.Set entrySet>;
        if $r4 != null goto label1;

        $r5 = new java.util.Collections$SynchronizedSet;
        $r6 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;
        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();
        $r8 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        specialinvoke $r5.<java.util.Collections$SynchronizedSet: void <init>(java.util.Set,java.lang.Object)>($r7, $r8);
        r0.<java.util.Collections$SynchronizedMap: java.util.Set entrySet> = $r5;

     label1:
        $r9 = r0.<java.util.Collections$SynchronizedMap: java.util.Set entrySet>;
        exitmonitor r1;

     label2:
        return $r9;

     label3:
        $r10 := @caughtexception;

     label4:
        r2 = $r10;
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.Collection values()
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, $r3, $r8;
        java.lang.Throwable r2, $r10;
        java.util.Collection $r4, $r7, $r9;
        java.util.Collections$SynchronizedCollection $r5;
        java.util.Map $r6;

        r0 := @this: java.util.Collections$SynchronizedMap;
        $r3 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.util.Collection values>;
        if $r4 != null goto label1;

        $r5 = new java.util.Collections$SynchronizedCollection;
        $r6 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;
        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();
        $r8 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        specialinvoke $r5.<java.util.Collections$SynchronizedCollection: void <init>(java.util.Collection,java.lang.Object)>($r7, $r8);
        r0.<java.util.Collections$SynchronizedMap: java.util.Collection values> = $r5;

     label1:
        $r9 = r0.<java.util.Collections$SynchronizedMap: java.util.Collection values>;
        exitmonitor r1;

     label2:
        return $r9;

     label3:
        $r10 := @caughtexception;

     label4:
        r2 = $r10;
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, r2, $r4;
        java.lang.Throwable r3, $r6;
        java.util.Map $r5;
        boolean $z0;

        r0 := @this: java.util.Collections$SynchronizedMap;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        r2 = $r4;
        entermonitor $r4;

     label1:
        $r5 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;
        $z0 = interfaceinvoke $r5.<java.util.Map: boolean equals(java.lang.Object)>(r1);
        exitmonitor r2;

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

     label4:
        r3 = $r6;
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int hashCode()
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.util.Map $r4;
        int $i0;

        r0 := @this: java.util.Collections$SynchronizedMap;
        $r3 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;
        $i0 = interfaceinvoke $r4.<java.util.Map: int hashCode()>();
        exitmonitor r1;

     label1:
        return $i0;

     label2:
        $r5 := @caughtexception;

     label3:
        r2 = $r5;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.lang.String toString()
    {
        java.util.Collections$SynchronizedMap r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        java.util.Map $r4;
        java.lang.String $r5;

        r0 := @this: java.util.Collections$SynchronizedMap;
        $r3 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.util.Map m>;
        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();
        exitmonitor r1;

     label1:
        return $r5;

     label2:
        $r6 := @caughtexception;

     label3:
        r2 = $r6;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Collections$SynchronizedMap r0;
        java.io.ObjectOutputStream r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: java.util.Collections$SynchronizedMap;
        r1 := @parameter0: java.io.ObjectOutputStream;
        $r4 = r0.<java.util.Collections$SynchronizedMap: java.lang.Object mutex>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r5 := @caughtexception;

     label3:
        r3 = $r5;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
}
