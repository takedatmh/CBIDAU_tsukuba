class org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1 extends java.util.AbstractSet
{
    final org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap this$0;

    void <init>(org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap)
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1 r0;
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r1;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1;
        r1 := @parameter0: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap this$0> = r1;
        specialinvoke r0.<java.util.AbstractSet: void <init>()>();
        return;
    }

    public boolean isEmpty()
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1 r0;
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap $r1;
        java.util.concurrent.ConcurrentMap $r2;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1;
        $r1 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap this$0>;
        $r2 = staticinvoke <org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.util.concurrent.ConcurrentMap access$0(org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap)>($r1);
        $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();
        return $z0;
    }

    public int size()
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1 r0;
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap $r1;
        java.util.concurrent.ConcurrentMap $r2;
        int $i0;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1;
        $r1 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap this$0>;
        $r2 = staticinvoke <org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.util.concurrent.ConcurrentMap access$0(org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap)>($r1);
        $i0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: int size()>();
        return $i0;
    }

    public java.util.Iterator iterator()
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1 r0;
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1$1 $r1;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1;
        $r1 = new org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1$1;
        specialinvoke $r1.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1$1: void <init>(org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1)>(r0);
        return $r1;
    }

    static org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap access$0(org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1)
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1 r0;
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap $r1;

        r0 := @parameter0: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1;
        $r1 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap this$0>;
        return $r1;
    }
}
