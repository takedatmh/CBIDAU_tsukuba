public class java.util.HashSet extends java.util.AbstractSet implements java.util.Set, java.lang.Cloneable, java.io.Serializable
{
    static final long serialVersionUID;
    private transient java.util.HashMap map;
    private static final java.lang.Object PRESENT;

    public void <init>()
    {
        java.util.HashSet r0;
        java.util.HashMap $r1;

        r0 := @this: java.util.HashSet;
        specialinvoke r0.<java.util.AbstractSet: void <init>()>();
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>()>();
        r0.<java.util.HashSet: java.util.HashMap map> = $r1;
        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.HashSet r0;
        java.util.Collection r1;
        java.util.HashMap $r2;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;

        r0 := @this: java.util.HashSet;
        r1 := @parameter0: java.util.Collection;
        specialinvoke r0.<java.util.AbstractSet: void <init>()>();
        $r2 = new java.util.HashMap;
        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();
        $f0 = (float) $i0;
        $f1 = $f0 / 0.75F;
        $i1 = (int) $f1;
        $i2 = $i1 + 1;
        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, 16);
        specialinvoke $r2.<java.util.HashMap: void <init>(int)>($i3);
        r0.<java.util.HashSet: java.util.HashMap map> = $r2;
        virtualinvoke r0.<java.util.HashSet: boolean addAll(java.util.Collection)>(r1);
        return;
    }

    public void <init>(int, float)
    {
        java.util.HashSet r0;
        int i0;
        float f0;
        java.util.HashMap $r1;

        r0 := @this: java.util.HashSet;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        specialinvoke r0.<java.util.AbstractSet: void <init>()>();
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>(int,float)>(i0, f0);
        r0.<java.util.HashSet: java.util.HashMap map> = $r1;
        return;
    }

    public void <init>(int)
    {
        java.util.HashSet r0;
        int i0;
        java.util.HashMap $r1;

        r0 := @this: java.util.HashSet;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.AbstractSet: void <init>()>();
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(i0);
        r0.<java.util.HashSet: java.util.HashMap map> = $r1;
        return;
    }

    void <init>(int, float, boolean)
    {
        java.util.HashSet r0;
        int i0;
        float f0;
        boolean z0;
        java.util.LinkedHashMap $r1;

        r0 := @this: java.util.HashSet;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        z0 := @parameter2: boolean;
        specialinvoke r0.<java.util.AbstractSet: void <init>()>();
        $r1 = new java.util.LinkedHashMap;
        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int,float)>(i0, f0);
        r0.<java.util.HashSet: java.util.HashMap map> = $r1;
        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.HashSet r0;
        java.util.HashMap $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;

        r0 := @this: java.util.HashSet;
        $r1 = r0.<java.util.HashSet: java.util.HashMap map>;
        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();
        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();
        return $r3;
    }

    public int size()
    {
        java.util.HashSet r0;
        java.util.HashMap $r1;
        int $i0;

        r0 := @this: java.util.HashSet;
        $r1 = r0.<java.util.HashSet: java.util.HashMap map>;
        $i0 = virtualinvoke $r1.<java.util.HashMap: int size()>();
        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.HashSet r0;
        java.util.HashMap $r1;
        boolean $z0;

        r0 := @this: java.util.HashSet;
        $r1 = r0.<java.util.HashSet: java.util.HashMap map>;
        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean isEmpty()>();
        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.HashSet r0;
        java.lang.Object r1;
        java.util.HashMap $r2;
        boolean $z0;

        r0 := @this: java.util.HashSet;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.HashSet: java.util.HashMap map>;
        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);
        return $z0;
    }

    public boolean add(java.lang.Object)
    {
        java.util.HashSet r0;
        java.lang.Object r1, $r2, $r4;
        java.util.HashMap $r3;
        boolean $z0;

        r0 := @this: java.util.HashSet;
        r1 := @parameter0: java.lang.Object;
        $r3 = r0.<java.util.HashSet: java.util.HashMap map>;
        $r2 = <java.util.HashSet: java.lang.Object PRESENT>;
        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);
        if $r4 != null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.HashSet r0;
        java.lang.Object r1, $r3, $r4;
        java.util.HashMap $r2;
        boolean $z0;

        r0 := @this: java.util.HashSet;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.HashSet: java.util.HashMap map>;
        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);
        $r4 = <java.util.HashSet: java.lang.Object PRESENT>;
        if $r3 != $r4 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public void clear()
    {
        java.util.HashSet r0;
        java.util.HashMap $r1;

        r0 := @this: java.util.HashSet;
        $r1 = r0.<java.util.HashSet: java.util.HashMap map>;
        virtualinvoke $r1.<java.util.HashMap: void clear()>();
        return;
    }

    public java.lang.Object clone()
    {
        java.util.HashSet r0, r1;
        java.lang.Object $r2, $r4;
        java.util.HashMap $r3, $r5;
        java.lang.CloneNotSupportedException $r7, r8;
        java.lang.InternalError $r9;

        r0 := @this: java.util.HashSet;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        r1 = (java.util.HashSet) $r2;
        $r3 = r0.<java.util.HashSet: java.util.HashMap map>;
        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object clone()>();
        $r5 = (java.util.HashMap) $r4;
        r1.<java.util.HashSet: java.util.HashMap map> = $r5;

     label1:
        return r1;

     label2:
        $r7 := @caughtexception;
        r8 = $r7;
        $r9 = new java.lang.InternalError;
        specialinvoke $r9.<java.lang.InternalError: void <init>()>();
        throw $r9;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.HashSet r0;
        java.io.ObjectOutputStream r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        java.util.HashMap $r4, $r5, $r6, $r7;
        int $i0, $i1;
        float $f0;
        java.util.Set $r8;
        boolean $z0;

        r0 := @this: java.util.HashSet;
        r1 := @parameter0: java.io.ObjectOutputStream;
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        $r4 = r0.<java.util.HashSet: java.util.HashMap map>;
        $i0 = virtualinvoke $r4.<java.util.HashMap: int capacity()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);
        $r5 = r0.<java.util.HashSet: java.util.HashMap map>;
        $f0 = virtualinvoke $r5.<java.util.HashMap: float loadFactor()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFloat(float)>($f0);
        $r6 = r0.<java.util.HashSet: java.util.HashMap map>;
        $i1 = virtualinvoke $r6.<java.util.HashMap: int size()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i1);
        $r7 = r0.<java.util.HashSet: java.util.HashMap map>;
        $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Set keySet()>();
        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r3);
        goto label0;

     label1:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.HashSet r0;
        java.io.ObjectInputStream r1;
        int i0, i1, i2;
        float f0;
        java.lang.Object r2, $r6;
        boolean $z0;
        java.util.HashMap $r4, $r5, r9;
        java.util.LinkedHashMap r8;

        r0 := @this: java.util.HashSet;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();
        f0 = virtualinvoke r1.<java.io.ObjectInputStream: float readFloat()>();
        $z0 = r0 instanceof java.util.LinkedHashSet;
        if $z0 == 0 goto label0;

        r8 = new java.util.LinkedHashMap;
        $r4 = r8;
        specialinvoke r8.<java.util.LinkedHashMap: void <init>(int,float)>(i0, f0);
        goto label1;

     label0:
        r9 = new java.util.HashMap;
        $r4 = r9;
        specialinvoke r9.<java.util.HashMap: void <init>(int,float)>(i0, f0);

     label1:
        r0.<java.util.HashSet: java.util.HashMap map> = $r4;
        i1 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();
        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        $r5 = r0.<java.util.HashSet: java.util.HashMap map>;
        $r6 = <java.util.HashSet: java.lang.Object PRESENT>;
        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6);
        i2 = i2 + 1;
        goto label2;

     label3:
        return;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;
        specialinvoke $r0.<java.lang.Object: void <init>()>();
        <java.util.HashSet: java.lang.Object PRESENT> = $r0;
        return;
    }
}
