class java.util.concurrent.CopyOnWriteArrayList$COWIterator extends java.lang.Object implements java.util.ListIterator
{
    private final java.lang.Object[] snapshot;
    private int cursor;

    private void <init>(java.lang.Object[], int)
    {
        java.util.concurrent.CopyOnWriteArrayList$COWIterator r0;
        java.lang.Object[] r1;
        int i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList$COWIterator;
        r1 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: int cursor> = i0;
        r0.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object[] snapshot> = r1;
        return;
    }

    public boolean hasNext()
    {
        java.util.concurrent.CopyOnWriteArrayList$COWIterator r0;
        int $i0, $i1;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList$COWIterator;
        $i0 = r0.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: int cursor>;
        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object[] snapshot>;
        $i1 = lengthof $r1;
        if $i0 >= $i1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean hasPrevious()
    {
        java.util.concurrent.CopyOnWriteArrayList$COWIterator r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList$COWIterator;
        $i0 = r0.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: int cursor>;
        if $i0 <= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.Object next()
    {
        java.util.concurrent.CopyOnWriteArrayList$COWIterator r0;
        int $i0, $i1;
        boolean $z0;
        java.util.NoSuchElementException $r1;
        java.lang.Object[] $r2;
        java.lang.Object $r4;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList$COWIterator;
        $z0 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>();
        if $z0 != 0 goto label0;

        $r1 = new java.util.NoSuchElementException;
        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();
        throw $r1;

     label0:
        $r2 = r0.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object[] snapshot>;
        $i0 = r0.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: int cursor>;
        $i1 = $i0 + 1;
        r0.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: int cursor> = $i1;
        $r4 = $r2[$i0];
        return $r4;
    }

    public java.lang.Object previous()
    {
        java.util.concurrent.CopyOnWriteArrayList$COWIterator r0;
        boolean $z0;
        java.util.NoSuchElementException $r1;
        java.lang.Object[] $r2;
        int $i0, $i1;
        java.lang.Object $r4;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList$COWIterator;
        $z0 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasPrevious()>();
        if $z0 != 0 goto label0;

        $r1 = new java.util.NoSuchElementException;
        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();
        throw $r1;

     label0:
        $r2 = r0.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object[] snapshot>;
        $i0 = r0.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: int cursor>;
        $i1 = $i0 - 1;
        r0.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: int cursor> = $i1;
        $r4 = $r2[$i1];
        return $r4;
    }

    public int nextIndex()
    {
        java.util.concurrent.CopyOnWriteArrayList$COWIterator r0;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList$COWIterator;
        $i0 = r0.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: int cursor>;
        return $i0;
    }

    public int previousIndex()
    {
        java.util.concurrent.CopyOnWriteArrayList$COWIterator r0;
        int $i0, $i1;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList$COWIterator;
        $i0 = r0.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: int cursor>;
        $i1 = $i0 - 1;
        return $i1;
    }

    public void remove()
    {
        java.util.concurrent.CopyOnWriteArrayList$COWIterator r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList$COWIterator;
        $r1 = new java.lang.UnsupportedOperationException;
        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r1;
    }

    public void set(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList$COWIterator r0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList$COWIterator;
        r1 := @parameter0: java.lang.Object;
        $r2 = new java.lang.UnsupportedOperationException;
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r2;
    }

    public void add(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList$COWIterator r0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList$COWIterator;
        r1 := @parameter0: java.lang.Object;
        $r2 = new java.lang.UnsupportedOperationException;
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r2;
    }

    void <init>(java.lang.Object[], int, java.util.concurrent.CopyOnWriteArrayList$1)
    {
        java.util.concurrent.CopyOnWriteArrayList$COWIterator r0;
        java.lang.Object[] r1;
        int i0;
        java.util.concurrent.CopyOnWriteArrayList$1 r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList$COWIterator;
        r1 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        r2 := @parameter2: java.util.concurrent.CopyOnWriteArrayList$1;
        specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList$COWIterator: void <init>(java.lang.Object[],int)>(r1, i0);
        return;
    }
}
