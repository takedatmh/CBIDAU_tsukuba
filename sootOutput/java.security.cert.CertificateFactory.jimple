public class java.security.cert.CertificateFactory extends java.lang.Object
{
    private java.lang.String type;
    private java.security.Provider provider;
    private java.security.cert.CertificateFactorySpi certFacSpi;

    protected void <init>(java.security.cert.CertificateFactorySpi, java.security.Provider, java.lang.String)
    {
        java.security.cert.CertificateFactory r0;
        java.security.cert.CertificateFactorySpi r1;
        java.security.Provider r2;
        java.lang.String r3;

        r0 := @this: java.security.cert.CertificateFactory;
        r1 := @parameter0: java.security.cert.CertificateFactorySpi;
        r2 := @parameter1: java.security.Provider;
        r3 := @parameter2: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.security.cert.CertificateFactory: java.security.cert.CertificateFactorySpi certFacSpi> = r1;
        r0.<java.security.cert.CertificateFactory: java.security.Provider provider> = r2;
        r0.<java.security.cert.CertificateFactory: java.lang.String type> = r3;
        return;
    }

    public static final java.security.cert.CertificateFactory getInstance(java.lang.String) throws java.security.cert.CertificateException
    {
        java.lang.String r0, $r12;
        sun.security.jca.GetInstance$Instance r1;
        java.security.cert.CertificateFactory $r2;
        java.lang.Object $r3;
        java.security.cert.CertificateFactorySpi $r4;
        java.security.Provider $r5;
        java.security.NoSuchAlgorithmException $r6, r7;
        java.security.cert.CertificateException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @parameter0: java.lang.String;

     label0:
        r1 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>("CertificateFactory", class "java/security/cert/CertificateFactorySpi", r0);
        $r2 = new java.security.cert.CertificateFactory;
        $r3 = r1.<sun.security.jca.GetInstance$Instance: java.lang.Object impl>;
        $r4 = (java.security.cert.CertificateFactorySpi) $r3;
        $r5 = r1.<sun.security.jca.GetInstance$Instance: java.security.Provider provider>;
        specialinvoke $r2.<java.security.cert.CertificateFactory: void <init>(java.security.cert.CertificateFactorySpi,java.security.Provider,java.lang.String)>($r4, $r5, r0);

     label1:
        return $r2;

     label2:
        $r6 := @caughtexception;
        r7 = $r6;
        $r8 = new java.security.cert.CertificateException;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>($r12, r7);
        throw $r8;

        catch java.security.NoSuchAlgorithmException from label0 to label1 with label2;
    }

    public static final java.security.cert.CertificateFactory getInstance(java.lang.String, java.lang.String) throws java.security.cert.CertificateException, java.security.NoSuchProviderException
    {
        java.lang.String r0, r1, $r13;
        sun.security.jca.GetInstance$Instance r2;
        java.security.cert.CertificateFactory $r3;
        java.lang.Object $r4;
        java.security.cert.CertificateFactorySpi $r5;
        java.security.Provider $r6;
        java.security.NoSuchAlgorithmException $r7, r8;
        java.security.cert.CertificateException $r9;
        java.lang.StringBuilder $r10, $r11, $r12;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;

     label0:
        r2 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.lang.String)>("CertificateFactory", class "java/security/cert/CertificateFactorySpi", r0, r1);
        $r3 = new java.security.cert.CertificateFactory;
        $r4 = r2.<sun.security.jca.GetInstance$Instance: java.lang.Object impl>;
        $r5 = (java.security.cert.CertificateFactorySpi) $r4;
        $r6 = r2.<sun.security.jca.GetInstance$Instance: java.security.Provider provider>;
        specialinvoke $r3.<java.security.cert.CertificateFactory: void <init>(java.security.cert.CertificateFactorySpi,java.security.Provider,java.lang.String)>($r5, $r6, r0);

     label1:
        return $r3;

     label2:
        $r7 := @caughtexception;
        r8 = $r7;
        $r9 = new java.security.cert.CertificateException;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>($r13, r8);
        throw $r9;

        catch java.security.NoSuchAlgorithmException from label0 to label1 with label2;
    }

    public static final java.security.cert.CertificateFactory getInstance(java.lang.String, java.security.Provider) throws java.security.cert.CertificateException
    {
        java.lang.String r0, $r13;
        java.security.Provider r1, $r6;
        sun.security.jca.GetInstance$Instance r2;
        java.security.cert.CertificateFactory $r3;
        java.lang.Object $r4;
        java.security.cert.CertificateFactorySpi $r5;
        java.security.NoSuchAlgorithmException $r7, r8;
        java.security.cert.CertificateException $r9;
        java.lang.StringBuilder $r10, $r11, $r12;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.security.Provider;

     label0:
        r2 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>("CertificateFactory", class "java/security/cert/CertificateFactorySpi", r0, r1);
        $r3 = new java.security.cert.CertificateFactory;
        $r4 = r2.<sun.security.jca.GetInstance$Instance: java.lang.Object impl>;
        $r5 = (java.security.cert.CertificateFactorySpi) $r4;
        $r6 = r2.<sun.security.jca.GetInstance$Instance: java.security.Provider provider>;
        specialinvoke $r3.<java.security.cert.CertificateFactory: void <init>(java.security.cert.CertificateFactorySpi,java.security.Provider,java.lang.String)>($r5, $r6, r0);

     label1:
        return $r3;

     label2:
        $r7 := @caughtexception;
        r8 = $r7;
        $r9 = new java.security.cert.CertificateException;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>($r13, r8);
        throw $r9;

        catch java.security.NoSuchAlgorithmException from label0 to label1 with label2;
    }

    public final java.security.Provider getProvider()
    {
        java.security.cert.CertificateFactory r0;
        java.security.Provider $r1;

        r0 := @this: java.security.cert.CertificateFactory;
        $r1 = r0.<java.security.cert.CertificateFactory: java.security.Provider provider>;
        return $r1;
    }

    public final java.lang.String getType()
    {
        java.security.cert.CertificateFactory r0;
        java.lang.String $r1;

        r0 := @this: java.security.cert.CertificateFactory;
        $r1 = r0.<java.security.cert.CertificateFactory: java.lang.String type>;
        return $r1;
    }

    public final java.security.cert.Certificate generateCertificate(java.io.InputStream) throws java.security.cert.CertificateException
    {
        java.security.cert.CertificateFactory r0;
        java.io.InputStream r1;
        java.security.cert.CertificateFactorySpi $r2;
        java.security.cert.Certificate $r3;

        r0 := @this: java.security.cert.CertificateFactory;
        r1 := @parameter0: java.io.InputStream;
        $r2 = r0.<java.security.cert.CertificateFactory: java.security.cert.CertificateFactorySpi certFacSpi>;
        $r3 = virtualinvoke $r2.<java.security.cert.CertificateFactorySpi: java.security.cert.Certificate engineGenerateCertificate(java.io.InputStream)>(r1);
        return $r3;
    }

    public final java.util.Iterator getCertPathEncodings()
    {
        java.security.cert.CertificateFactory r0;
        java.security.cert.CertificateFactorySpi $r1;
        java.util.Iterator $r2;

        r0 := @this: java.security.cert.CertificateFactory;
        $r1 = r0.<java.security.cert.CertificateFactory: java.security.cert.CertificateFactorySpi certFacSpi>;
        $r2 = virtualinvoke $r1.<java.security.cert.CertificateFactorySpi: java.util.Iterator engineGetCertPathEncodings()>();
        return $r2;
    }

    public final java.security.cert.CertPath generateCertPath(java.io.InputStream) throws java.security.cert.CertificateException
    {
        java.security.cert.CertificateFactory r0;
        java.io.InputStream r1;
        java.security.cert.CertificateFactorySpi $r2;
        java.security.cert.CertPath $r3;

        r0 := @this: java.security.cert.CertificateFactory;
        r1 := @parameter0: java.io.InputStream;
        $r2 = r0.<java.security.cert.CertificateFactory: java.security.cert.CertificateFactorySpi certFacSpi>;
        $r3 = virtualinvoke $r2.<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream)>(r1);
        return $r3;
    }

    public final java.security.cert.CertPath generateCertPath(java.io.InputStream, java.lang.String) throws java.security.cert.CertificateException
    {
        java.security.cert.CertificateFactory r0;
        java.io.InputStream r1;
        java.lang.String r2;
        java.security.cert.CertificateFactorySpi $r3;
        java.security.cert.CertPath $r4;

        r0 := @this: java.security.cert.CertificateFactory;
        r1 := @parameter0: java.io.InputStream;
        r2 := @parameter1: java.lang.String;
        $r3 = r0.<java.security.cert.CertificateFactory: java.security.cert.CertificateFactorySpi certFacSpi>;
        $r4 = virtualinvoke $r3.<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream,java.lang.String)>(r1, r2);
        return $r4;
    }

    public final java.security.cert.CertPath generateCertPath(java.util.List) throws java.security.cert.CertificateException
    {
        java.security.cert.CertificateFactory r0;
        java.util.List r1;
        java.security.cert.CertificateFactorySpi $r2;
        java.security.cert.CertPath $r3;

        r0 := @this: java.security.cert.CertificateFactory;
        r1 := @parameter0: java.util.List;
        $r2 = r0.<java.security.cert.CertificateFactory: java.security.cert.CertificateFactorySpi certFacSpi>;
        $r3 = virtualinvoke $r2.<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.util.List)>(r1);
        return $r3;
    }

    public final java.util.Collection generateCertificates(java.io.InputStream) throws java.security.cert.CertificateException
    {
        java.security.cert.CertificateFactory r0;
        java.io.InputStream r1;
        java.security.cert.CertificateFactorySpi $r2;
        java.util.Collection $r3;

        r0 := @this: java.security.cert.CertificateFactory;
        r1 := @parameter0: java.io.InputStream;
        $r2 = r0.<java.security.cert.CertificateFactory: java.security.cert.CertificateFactorySpi certFacSpi>;
        $r3 = virtualinvoke $r2.<java.security.cert.CertificateFactorySpi: java.util.Collection engineGenerateCertificates(java.io.InputStream)>(r1);
        return $r3;
    }

    public final java.security.cert.CRL generateCRL(java.io.InputStream) throws java.security.cert.CRLException
    {
        java.security.cert.CertificateFactory r0;
        java.io.InputStream r1;
        java.security.cert.CertificateFactorySpi $r2;
        java.security.cert.CRL $r3;

        r0 := @this: java.security.cert.CertificateFactory;
        r1 := @parameter0: java.io.InputStream;
        $r2 = r0.<java.security.cert.CertificateFactory: java.security.cert.CertificateFactorySpi certFacSpi>;
        $r3 = virtualinvoke $r2.<java.security.cert.CertificateFactorySpi: java.security.cert.CRL engineGenerateCRL(java.io.InputStream)>(r1);
        return $r3;
    }

    public final java.util.Collection generateCRLs(java.io.InputStream) throws java.security.cert.CRLException
    {
        java.security.cert.CertificateFactory r0;
        java.io.InputStream r1;
        java.security.cert.CertificateFactorySpi $r2;
        java.util.Collection $r3;

        r0 := @this: java.security.cert.CertificateFactory;
        r1 := @parameter0: java.io.InputStream;
        $r2 = r0.<java.security.cert.CertificateFactory: java.security.cert.CertificateFactorySpi certFacSpi>;
        $r3 = virtualinvoke $r2.<java.security.cert.CertificateFactorySpi: java.util.Collection engineGenerateCRLs(java.io.InputStream)>(r1);
        return $r3;
    }
}
