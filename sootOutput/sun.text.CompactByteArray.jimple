public final class sun.text.CompactByteArray extends java.lang.Object implements java.lang.Cloneable
{
    public static final int UNICODECOUNT;
    private static final int BLOCKSHIFT;
    private static final int BLOCKCOUNT;
    private static final int INDEXSHIFT;
    private static final int INDEXCOUNT;
    private static final int BLOCKMASK;
    private byte[] values;
    private short[] indices;
    private boolean isCompact;
    private int[] hashes;

    public void <init>(byte)
    {
        sun.text.CompactByteArray r0;
        byte b0;
        int i1, i2, $i3;
        byte[] $r1, $r4;
        short[] $r2, $r5;
        int[] $r3, $r6;
        short $s4;

        r0 := @this: sun.text.CompactByteArray;
        b0 := @parameter0: byte;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = newarray (byte)[65536];
        r0.<sun.text.CompactByteArray: byte[] values> = $r1;
        $r2 = newarray (short)[512];
        r0.<sun.text.CompactByteArray: short[] indices> = $r2;
        $r3 = newarray (int)[512];
        r0.<sun.text.CompactByteArray: int[] hashes> = $r3;
        i1 = 0;

     label0:
        if i1 >= 65536 goto label1;

        $r4 = r0.<sun.text.CompactByteArray: byte[] values>;
        $r4[i1] = b0;
        i1 = i1 + 1;
        goto label0;

     label1:
        i2 = 0;

     label2:
        if i2 >= 512 goto label3;

        $r5 = r0.<sun.text.CompactByteArray: short[] indices>;
        $i3 = i2 << 7;
        $s4 = (short) $i3;
        $r5[i2] = $s4;
        $r6 = r0.<sun.text.CompactByteArray: int[] hashes>;
        $r6[i2] = 0;
        i2 = i2 + 1;
        goto label2;

     label3:
        r0.<sun.text.CompactByteArray: boolean isCompact> = 0;
        return;
    }

    public void <init>(short[], byte[])
    {
        sun.text.CompactByteArray r0;
        short[] r1;
        byte[] r2;
        int i0, $i2, $i3, $i4;
        short s1;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @this: sun.text.CompactByteArray;
        r1 := @parameter0: short[];
        r2 := @parameter1: byte[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $i2 = lengthof r1;
        if $i2 == 512 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Index out of bounds!");
        throw $r3;

     label0:
        i0 = 0;

     label1:
        if i0 >= 512 goto label4;

        s1 = r1[i0];
        if s1 < 0 goto label2;

        $i3 = lengthof r2;
        $i4 = $i3 + 128;
        if s1 < $i4 goto label3;

     label2:
        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Index out of bounds!");
        throw $r4;

     label3:
        i0 = i0 + 1;
        goto label1;

     label4:
        r0.<sun.text.CompactByteArray: short[] indices> = r1;
        r0.<sun.text.CompactByteArray: byte[] values> = r2;
        r0.<sun.text.CompactByteArray: boolean isCompact> = 1;
        return;
    }

    public byte elementAt(char)
    {
        sun.text.CompactByteArray r0;
        char c0, $c1, $c4;
        byte[] $r1;
        short[] $r2;
        short $s2;
        int $i3, $i5;
        byte $b6;

        r0 := @this: sun.text.CompactByteArray;
        c0 := @parameter0: char;
        $r1 = r0.<sun.text.CompactByteArray: byte[] values>;
        $r2 = r0.<sun.text.CompactByteArray: short[] indices>;
        $c1 = c0 >> 7;
        $s2 = $r2[$c1];
        $i3 = $s2 & 65535;
        $c4 = c0 & 127;
        $i5 = $i3 + $c4;
        $b6 = $r1[$i5];
        return $b6;
    }

    public void setElementAt(char, byte)
    {
        sun.text.CompactByteArray r0;
        char c0, $c2;
        byte b1;
        boolean $z0;
        byte[] $r1;

        r0 := @this: sun.text.CompactByteArray;
        c0 := @parameter0: char;
        b1 := @parameter1: byte;
        $z0 = r0.<sun.text.CompactByteArray: boolean isCompact>;
        if $z0 == 0 goto label0;

        specialinvoke r0.<sun.text.CompactByteArray: void expand()>();

     label0:
        $r1 = r0.<sun.text.CompactByteArray: byte[] values>;
        $r1[c0] = b1;
        $c2 = c0 >> 7;
        specialinvoke r0.<sun.text.CompactByteArray: void touchBlock(int,int)>($c2, b1);
        return;
    }

    public void setElementAt(char, char, byte)
    {
        sun.text.CompactByteArray r0;
        char c0, c1;
        byte b2;
        int i3, $i4;
        boolean $z0;
        byte[] $r1;

        r0 := @this: sun.text.CompactByteArray;
        c0 := @parameter0: char;
        c1 := @parameter1: char;
        b2 := @parameter2: byte;
        $z0 = r0.<sun.text.CompactByteArray: boolean isCompact>;
        if $z0 == 0 goto label0;

        specialinvoke r0.<sun.text.CompactByteArray: void expand()>();

     label0:
        i3 = c0;

     label1:
        if i3 > c1 goto label2;

        $r1 = r0.<sun.text.CompactByteArray: byte[] values>;
        $r1[i3] = b2;
        $i4 = i3 >> 7;
        specialinvoke r0.<sun.text.CompactByteArray: void touchBlock(int,int)>($i4, b2);
        i3 = i3 + 1;
        goto label1;

     label2:
        return;
    }

    public void compact()
    {
        sun.text.CompactByteArray r0;
        int i0, i1, i3, i4, $i5, i6, $i7, $i8, $i12, i13;
        short s2, $s9, $s10, $s11;
        boolean z0, z1, $z2, $z3;
        short[] $r1, $r2, $r3, $r8, $r9, $r12;
        int[] $r4, $r5, $r13, $r14;
        byte[] $r6, $r7, $r10, $r11, r15, $r16;

        r0 := @this: sun.text.CompactByteArray;
        $z2 = r0.<sun.text.CompactByteArray: boolean isCompact>;
        if $z2 != 0 goto label7;

        i0 = 0;
        i1 = 0;
        s2 = -1;
        i3 = 0;

     label0:
        $r1 = r0.<sun.text.CompactByteArray: short[] indices>;
        $i5 = lengthof $r1;
        if i3 >= $i5 goto label6;

        $r2 = r0.<sun.text.CompactByteArray: short[] indices>;
        $r2[i3] = -1;
        z0 = specialinvoke r0.<sun.text.CompactByteArray: boolean blockTouched(int)>(i3);
        if z0 != 0 goto label1;

        if s2 == -1 goto label1;

        $r3 = r0.<sun.text.CompactByteArray: short[] indices>;
        $r3[i3] = s2;
        goto label5;

     label1:
        i4 = 0;
        z1 = 0;
        i6 = 0;

     label2:
        if i6 >= i0 goto label4;

        $r4 = r0.<sun.text.CompactByteArray: int[] hashes>;
        $i7 = $r4[i3];
        $r5 = r0.<sun.text.CompactByteArray: int[] hashes>;
        $i8 = $r5[i6];
        if $i7 != $i8 goto label3;

        $r6 = r0.<sun.text.CompactByteArray: byte[] values>;
        $r7 = r0.<sun.text.CompactByteArray: byte[] values>;
        $z3 = staticinvoke <sun.text.CompactByteArray: boolean arrayRegionMatches(byte[],int,byte[],int,int)>($r6, i1, $r7, i4, 128);
        if $z3 == 0 goto label3;

        $r8 = r0.<sun.text.CompactByteArray: short[] indices>;
        $s9 = (short) i4;
        $r8[i3] = $s9;
        goto label4;

     label3:
        i6 = i6 + 1;
        i4 = i4 + 128;
        goto label2;

     label4:
        $r9 = r0.<sun.text.CompactByteArray: short[] indices>;
        $s10 = $r9[i3];
        if $s10 != -1 goto label5;

        $r10 = r0.<sun.text.CompactByteArray: byte[] values>;
        $r11 = r0.<sun.text.CompactByteArray: byte[] values>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, i1, $r11, i4, 128);
        $r12 = r0.<sun.text.CompactByteArray: short[] indices>;
        $s11 = (short) i4;
        $r12[i3] = $s11;
        $r13 = r0.<sun.text.CompactByteArray: int[] hashes>;
        $r14 = r0.<sun.text.CompactByteArray: int[] hashes>;
        $i12 = $r14[i3];
        $r13[i6] = $i12;
        i0 = i0 + 1;
        if z0 != 0 goto label5;

        s2 = (short) i4;

     label5:
        i3 = i3 + 1;
        i1 = i1 + 128;
        goto label0;

     label6:
        i13 = i0 * 128;
        r15 = newarray (byte)[i13];
        $r16 = r0.<sun.text.CompactByteArray: byte[] values>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, 0, r15, 0, i13);
        r0.<sun.text.CompactByteArray: byte[] values> = r15;
        r0.<sun.text.CompactByteArray: boolean isCompact> = 1;
        r0.<sun.text.CompactByteArray: int[] hashes> = null;

     label7:
        return;
    }

    static final boolean arrayRegionMatches(byte[], int, byte[], int, int)
    {
        byte[] r0, r1;
        int i0, i1, i2, i3, i4, i5, $i7;
        byte $b6, $b8;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        r1 := @parameter2: byte[];
        i1 := @parameter3: int;
        i2 := @parameter4: int;
        i3 = i0 + i2;
        i4 = i1 - i0;
        i5 = i0;

     label0:
        if i5 >= i3 goto label2;

        $b6 = r0[i5];
        $i7 = i5 + i4;
        $b8 = r1[$i7];
        if $b6 == $b8 goto label1;

        return 0;

     label1:
        i5 = i5 + 1;
        goto label0;

     label2:
        return 1;
    }

    private final void touchBlock(int, int)
    {
        sun.text.CompactByteArray r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        int[] $r1, $r2;

        r0 := @this: sun.text.CompactByteArray;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = r0.<sun.text.CompactByteArray: int[] hashes>;
        $r2 = r0.<sun.text.CompactByteArray: int[] hashes>;
        $i2 = $r2[i0];
        $i3 = i1 << 1;
        $i4 = $i2 + $i3;
        $i5 = $i4 | 1;
        $r1[i0] = $i5;
        return;
    }

    private final boolean blockTouched(int)
    {
        sun.text.CompactByteArray r0;
        int i0, $i1;
        int[] $r1;
        boolean $z0;

        r0 := @this: sun.text.CompactByteArray;
        i0 := @parameter0: int;
        $r1 = r0.<sun.text.CompactByteArray: int[] hashes>;
        $i1 = $r1[i0];
        if $i1 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public short[] getIndexArray()
    {
        sun.text.CompactByteArray r0;
        short[] $r1;

        r0 := @this: sun.text.CompactByteArray;
        $r1 = r0.<sun.text.CompactByteArray: short[] indices>;
        return $r1;
    }

    public byte[] getStringArray()
    {
        sun.text.CompactByteArray r0;
        byte[] $r1;

        r0 := @this: sun.text.CompactByteArray;
        $r1 = r0.<sun.text.CompactByteArray: byte[] values>;
        return $r1;
    }

    public java.lang.Object clone()
    {
        sun.text.CompactByteArray r0, r1;
        java.lang.Object $r2, $r4, $r8, $r13;
        byte[] $r3, $r5, $r6;
        short[] $r7, $r9, $r10;
        int[] $r11, $r12, $r14, $r15;
        java.lang.CloneNotSupportedException $r17, r18;
        java.lang.InternalError $r19;

        r0 := @this: sun.text.CompactByteArray;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        r1 = (sun.text.CompactByteArray) $r2;
        $r3 = r0.<sun.text.CompactByteArray: byte[] values>;
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();
        $r5 = (byte[]) $r4;
        $r6 = (byte[]) $r5;
        r1.<sun.text.CompactByteArray: byte[] values> = $r6;
        $r7 = r0.<sun.text.CompactByteArray: short[] indices>;
        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>();
        $r9 = (short[]) $r8;
        $r10 = (short[]) $r9;
        r1.<sun.text.CompactByteArray: short[] indices> = $r10;
        $r11 = r0.<sun.text.CompactByteArray: int[] hashes>;
        if $r11 == null goto label1;

        $r12 = r0.<sun.text.CompactByteArray: int[] hashes>;
        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.Object clone()>();
        $r14 = (int[]) $r13;
        $r15 = (int[]) $r14;
        r1.<sun.text.CompactByteArray: int[] hashes> = $r15;

     label1:
        return r1;

     label2:
        $r17 := @caughtexception;
        r18 = $r17;
        $r19 = new java.lang.InternalError;
        specialinvoke $r19.<java.lang.InternalError: void <init>()>();
        throw $r19;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    public boolean equals(java.lang.Object)
    {
        sun.text.CompactByteArray r0, r2;
        java.lang.Object r1;
        int i0;
        java.lang.Class $r3, $r4;
        char $c1, $c3;
        byte $b2, $b4;

        r0 := @this: sun.text.CompactByteArray;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        return 0;

     label0:
        if r0 != r1 goto label1;

        return 1;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        if $r3 == $r4 goto label2;

        return 0;

     label2:
        r2 = (sun.text.CompactByteArray) r1;
        i0 = 0;

     label3:
        if i0 >= 65536 goto label5;

        $c1 = (char) i0;
        $b2 = virtualinvoke r0.<sun.text.CompactByteArray: byte elementAt(char)>($c1);
        $c3 = (char) i0;
        $b4 = virtualinvoke r2.<sun.text.CompactByteArray: byte elementAt(char)>($c3);
        if $b2 == $b4 goto label4;

        return 0;

     label4:
        i0 = i0 + 1;
        goto label3;

     label5:
        return 1;
    }

    public int hashCode()
    {
        sun.text.CompactByteArray r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        byte[] $r1, $r2, $r3;
        byte $b7;

        r0 := @this: sun.text.CompactByteArray;
        i0 = 0;
        $r1 = r0.<sun.text.CompactByteArray: byte[] values>;
        $i3 = lengthof $r1;
        $i4 = $i3 / 16;
        i1 = staticinvoke <java.lang.Math: int min(int,int)>(3, $i4);
        i2 = 0;

     label0:
        $r2 = r0.<sun.text.CompactByteArray: byte[] values>;
        $i5 = lengthof $r2;
        if i2 >= $i5 goto label1;

        $i6 = i0 * 37;
        $r3 = r0.<sun.text.CompactByteArray: byte[] values>;
        $b7 = $r3[i2];
        i0 = $i6 + $b7;
        i2 = i2 + i1;
        goto label0;

     label1:
        return i0;
    }

    private void expand()
    {
        sun.text.CompactByteArray r0;
        byte[] r1;
        int i0, $i3, i4, $i5;
        byte b1;
        boolean $z0;
        int[] $r2;
        char $c2;
        short[] $r3;
        short $s6;

        r0 := @this: sun.text.CompactByteArray;
        $z0 = r0.<sun.text.CompactByteArray: boolean isCompact>;
        if $z0 == 0 goto label4;

        $r2 = newarray (int)[512];
        r0.<sun.text.CompactByteArray: int[] hashes> = $r2;
        r1 = newarray (byte)[65536];
        i0 = 0;

     label0:
        if i0 >= 65536 goto label1;

        $c2 = (char) i0;
        b1 = virtualinvoke r0.<sun.text.CompactByteArray: byte elementAt(char)>($c2);
        r1[i0] = b1;
        $i3 = i0 >> 7;
        specialinvoke r0.<sun.text.CompactByteArray: void touchBlock(int,int)>($i3, b1);
        i0 = i0 + 1;
        goto label0;

     label1:
        i4 = 0;

     label2:
        if i4 >= 512 goto label3;

        $r3 = r0.<sun.text.CompactByteArray: short[] indices>;
        $i5 = i4 << 7;
        $s6 = (short) $i5;
        $r3[i4] = $s6;
        i4 = i4 + 1;
        goto label2;

     label3:
        r0.<sun.text.CompactByteArray: byte[] values> = null;
        r0.<sun.text.CompactByteArray: byte[] values> = r1;
        r0.<sun.text.CompactByteArray: boolean isCompact> = 0;

     label4:
        return;
    }

    private byte[] getArray()
    {
        sun.text.CompactByteArray r0;
        byte[] $r1;

        r0 := @this: sun.text.CompactByteArray;
        $r1 = r0.<sun.text.CompactByteArray: byte[] values>;
        return $r1;
    }
}
