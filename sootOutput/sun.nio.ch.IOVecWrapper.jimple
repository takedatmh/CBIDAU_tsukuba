class sun.nio.ch.IOVecWrapper extends java.lang.Object
{
    private static final int BASE_OFFSET;
    private static final int LEN_OFFSET;
    private static final int SIZE_IOVEC;
    private final sun.nio.ch.AllocatedNativeObject vecArray;
    private final int size;
    private final java.nio.ByteBuffer[] buf;
    private final int[] position;
    private final int[] remaining;
    private final java.nio.ByteBuffer[] shadow;
    final long address;
    static int addressSize;
    private static final java.lang.ThreadLocal cached;

    private void <init>(int)
    {
        sun.nio.ch.IOVecWrapper r0;
        int i0, $i1, $i2;
        java.nio.ByteBuffer[] $r1, $r4;
        int[] $r2, $r3;
        sun.nio.ch.AllocatedNativeObject $r5, $r6;
        long $l3;

        r0 := @this: sun.nio.ch.IOVecWrapper;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.IOVecWrapper: int size> = i0;
        $r1 = newarray (java.nio.ByteBuffer)[i0];
        r0.<sun.nio.ch.IOVecWrapper: java.nio.ByteBuffer[] buf> = $r1;
        $r2 = newarray (int)[i0];
        r0.<sun.nio.ch.IOVecWrapper: int[] position> = $r2;
        $r3 = newarray (int)[i0];
        r0.<sun.nio.ch.IOVecWrapper: int[] remaining> = $r3;
        $r4 = newarray (java.nio.ByteBuffer)[i0];
        r0.<sun.nio.ch.IOVecWrapper: java.nio.ByteBuffer[] shadow> = $r4;
        $r5 = new sun.nio.ch.AllocatedNativeObject;
        $i1 = <sun.nio.ch.IOVecWrapper: int SIZE_IOVEC>;
        $i2 = i0 * $i1;
        specialinvoke $r5.<sun.nio.ch.AllocatedNativeObject: void <init>(int,boolean)>($i2, 0);
        r0.<sun.nio.ch.IOVecWrapper: sun.nio.ch.AllocatedNativeObject vecArray> = $r5;
        $r6 = r0.<sun.nio.ch.IOVecWrapper: sun.nio.ch.AllocatedNativeObject vecArray>;
        $l3 = virtualinvoke $r6.<sun.nio.ch.AllocatedNativeObject: long address()>();
        r0.<sun.nio.ch.IOVecWrapper: long address> = $l3;
        return;
    }

    static sun.nio.ch.IOVecWrapper get(int)
    {
        int i0, $i1;
        java.lang.ThreadLocal $r0, $r8;
        sun.nio.ch.IOVecWrapper r1, $r4;
        java.lang.Object $r2;
        sun.nio.ch.AllocatedNativeObject $r3, $r6;
        sun.nio.ch.IOVecWrapper$Deallocator $r5;

        i0 := @parameter0: int;
        $r0 = <sun.nio.ch.IOVecWrapper: java.lang.ThreadLocal cached>;
        $r2 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();
        r1 = (sun.nio.ch.IOVecWrapper) $r2;
        if r1 == null goto label0;

        $i1 = r1.<sun.nio.ch.IOVecWrapper: int size>;
        if $i1 >= i0 goto label0;

        $r3 = r1.<sun.nio.ch.IOVecWrapper: sun.nio.ch.AllocatedNativeObject vecArray>;
        virtualinvoke $r3.<sun.nio.ch.AllocatedNativeObject: void free()>();
        r1 = null;

     label0:
        if r1 != null goto label1;

        $r4 = new sun.nio.ch.IOVecWrapper;
        specialinvoke $r4.<sun.nio.ch.IOVecWrapper: void <init>(int)>(i0);
        r1 = $r4;
        $r5 = new sun.nio.ch.IOVecWrapper$Deallocator;
        $r6 = r1.<sun.nio.ch.IOVecWrapper: sun.nio.ch.AllocatedNativeObject vecArray>;
        specialinvoke $r5.<sun.nio.ch.IOVecWrapper$Deallocator: void <init>(sun.nio.ch.AllocatedNativeObject)>($r6);
        staticinvoke <sun.misc.Cleaner: sun.misc.Cleaner create(java.lang.Object,java.lang.Runnable)>(r1, $r5);
        $r8 = <sun.nio.ch.IOVecWrapper: java.lang.ThreadLocal cached>;
        virtualinvoke $r8.<java.lang.ThreadLocal: void set(java.lang.Object)>(r1);

     label1:
        return r1;
    }

    void setBuffer(int, java.nio.ByteBuffer, int, int)
    {
        sun.nio.ch.IOVecWrapper r0;
        int i0, i1, i2;
        java.nio.ByteBuffer r1;
        java.nio.ByteBuffer[] $r2;
        int[] $r3, $r4;

        r0 := @this: sun.nio.ch.IOVecWrapper;
        i0 := @parameter0: int;
        r1 := @parameter1: java.nio.ByteBuffer;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        $r2 = r0.<sun.nio.ch.IOVecWrapper: java.nio.ByteBuffer[] buf>;
        $r2[i0] = r1;
        $r3 = r0.<sun.nio.ch.IOVecWrapper: int[] position>;
        $r3[i0] = i1;
        $r4 = r0.<sun.nio.ch.IOVecWrapper: int[] remaining>;
        $r4[i0] = i2;
        return;
    }

    void setShadow(int, java.nio.ByteBuffer)
    {
        sun.nio.ch.IOVecWrapper r0;
        int i0;
        java.nio.ByteBuffer r1;
        java.nio.ByteBuffer[] $r2;

        r0 := @this: sun.nio.ch.IOVecWrapper;
        i0 := @parameter0: int;
        r1 := @parameter1: java.nio.ByteBuffer;
        $r2 = r0.<sun.nio.ch.IOVecWrapper: java.nio.ByteBuffer[] shadow>;
        $r2[i0] = r1;
        return;
    }

    java.nio.ByteBuffer getBuffer(int)
    {
        sun.nio.ch.IOVecWrapper r0;
        int i0;
        java.nio.ByteBuffer[] $r1;
        java.nio.ByteBuffer $r2;

        r0 := @this: sun.nio.ch.IOVecWrapper;
        i0 := @parameter0: int;
        $r1 = r0.<sun.nio.ch.IOVecWrapper: java.nio.ByteBuffer[] buf>;
        $r2 = $r1[i0];
        return $r2;
    }

    int getPosition(int)
    {
        sun.nio.ch.IOVecWrapper r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: sun.nio.ch.IOVecWrapper;
        i0 := @parameter0: int;
        $r1 = r0.<sun.nio.ch.IOVecWrapper: int[] position>;
        $i1 = $r1[i0];
        return $i1;
    }

    int getRemaining(int)
    {
        sun.nio.ch.IOVecWrapper r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: sun.nio.ch.IOVecWrapper;
        i0 := @parameter0: int;
        $r1 = r0.<sun.nio.ch.IOVecWrapper: int[] remaining>;
        $i1 = $r1[i0];
        return $i1;
    }

    java.nio.ByteBuffer getShadow(int)
    {
        sun.nio.ch.IOVecWrapper r0;
        int i0;
        java.nio.ByteBuffer[] $r1;
        java.nio.ByteBuffer $r2;

        r0 := @this: sun.nio.ch.IOVecWrapper;
        i0 := @parameter0: int;
        $r1 = r0.<sun.nio.ch.IOVecWrapper: java.nio.ByteBuffer[] shadow>;
        $r2 = $r1[i0];
        return $r2;
    }

    void clearRefs(int)
    {
        sun.nio.ch.IOVecWrapper r0;
        int i0;
        java.nio.ByteBuffer[] $r1, $r2;

        r0 := @this: sun.nio.ch.IOVecWrapper;
        i0 := @parameter0: int;
        $r1 = r0.<sun.nio.ch.IOVecWrapper: java.nio.ByteBuffer[] buf>;
        $r1[i0] = null;
        $r2 = r0.<sun.nio.ch.IOVecWrapper: java.nio.ByteBuffer[] shadow>;
        $r2[i0] = null;
        return;
    }

    void putBase(int, long)
    {
        sun.nio.ch.IOVecWrapper r0;
        int i0, $i2, i3, $i4, $i5, $i6;
        long l1;
        sun.nio.ch.AllocatedNativeObject $r1, $r2;

        r0 := @this: sun.nio.ch.IOVecWrapper;
        i0 := @parameter0: int;
        l1 := @parameter1: long;
        $i2 = <sun.nio.ch.IOVecWrapper: int SIZE_IOVEC>;
        $i4 = $i2 * i0;
        i3 = $i4 + 0;
        $i5 = <sun.nio.ch.IOVecWrapper: int addressSize>;
        if $i5 != 4 goto label0;

        $r1 = r0.<sun.nio.ch.IOVecWrapper: sun.nio.ch.AllocatedNativeObject vecArray>;
        $i6 = (int) l1;
        virtualinvoke $r1.<sun.nio.ch.AllocatedNativeObject: void putInt(int,int)>(i3, $i6);
        goto label1;

     label0:
        $r2 = r0.<sun.nio.ch.IOVecWrapper: sun.nio.ch.AllocatedNativeObject vecArray>;
        virtualinvoke $r2.<sun.nio.ch.AllocatedNativeObject: void putLong(int,long)>(i3, l1);

     label1:
        return;
    }

    void putLen(int, long)
    {
        sun.nio.ch.IOVecWrapper r0;
        int i0, $i2, i3, $i4, $i5, $i6, $i7;
        long l1;
        sun.nio.ch.AllocatedNativeObject $r1, $r2;

        r0 := @this: sun.nio.ch.IOVecWrapper;
        i0 := @parameter0: int;
        l1 := @parameter1: long;
        $i2 = <sun.nio.ch.IOVecWrapper: int SIZE_IOVEC>;
        $i4 = $i2 * i0;
        $i5 = <sun.nio.ch.IOVecWrapper: int LEN_OFFSET>;
        i3 = $i4 + $i5;
        $i6 = <sun.nio.ch.IOVecWrapper: int addressSize>;
        if $i6 != 4 goto label0;

        $r1 = r0.<sun.nio.ch.IOVecWrapper: sun.nio.ch.AllocatedNativeObject vecArray>;
        $i7 = (int) l1;
        virtualinvoke $r1.<sun.nio.ch.AllocatedNativeObject: void putInt(int,int)>(i3, $i7);
        goto label1;

     label0:
        $r2 = r0.<sun.nio.ch.IOVecWrapper: sun.nio.ch.AllocatedNativeObject vecArray>;
        virtualinvoke $r2.<sun.nio.ch.AllocatedNativeObject: void putLong(int,long)>(i3, l1);

     label1:
        return;
    }

    static void <clinit>()
    {
        java.lang.ThreadLocal $r0;
        sun.misc.Unsafe $r1;
        int $i0, $i1, $i2, $i3;
        short $s4;

        $r0 = new java.lang.ThreadLocal;
        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();
        <sun.nio.ch.IOVecWrapper: java.lang.ThreadLocal cached> = $r0;
        $r1 = staticinvoke <sun.nio.ch.Util: sun.misc.Unsafe unsafe()>();
        $i0 = virtualinvoke $r1.<sun.misc.Unsafe: int addressSize()>();
        <sun.nio.ch.IOVecWrapper: int addressSize> = $i0;
        $i1 = <sun.nio.ch.IOVecWrapper: int addressSize>;
        <sun.nio.ch.IOVecWrapper: int LEN_OFFSET> = $i1;
        $i2 = <sun.nio.ch.IOVecWrapper: int addressSize>;
        $i3 = $i2 * 2;
        $s4 = (short) $i3;
        <sun.nio.ch.IOVecWrapper: int SIZE_IOVEC> = $s4;
        return;
    }
}
