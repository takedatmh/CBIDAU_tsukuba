class sun.nio.ch.SolarisEventPort$EventHandlerTask extends java.lang.Object implements java.lang.Runnable
{
    final sun.nio.ch.SolarisEventPort this$0;

    private void <init>(sun.nio.ch.SolarisEventPort)
    {
        sun.nio.ch.SolarisEventPort$EventHandlerTask r0;
        sun.nio.ch.SolarisEventPort r1;

        r0 := @this: sun.nio.ch.SolarisEventPort$EventHandlerTask;
        r1 := @parameter0: sun.nio.ch.SolarisEventPort;
        r0.<sun.nio.ch.SolarisEventPort$EventHandlerTask: sun.nio.ch.SolarisEventPort this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public void run()
    {
        sun.nio.ch.SolarisEventPort$EventHandlerTask r0;
        sun.nio.ch.Invoker$GroupAndInvokeCount r1;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        int $i0, i2, i3, i4, $i6, i11, i13;
        long l1, $l5, $l7, $l9, $l10, $l12;
        java.io.IOException r2, $r8;
        sun.nio.ch.Port$PollableChannel r3;
        java.lang.Throwable r4, r5, $r32, $r36;
        sun.misc.Unsafe $r6, $r9, $r13, $r16, $r20, $r21, $r37;
        sun.nio.ch.SolarisEventPort $r7, $r10, $r11, $r12, $r14, $r17, $r18, $r19, $r22, $r25, $r29, $r33, $r38, $r39, $r40;
        short s8;
        java.lang.Runnable r15;
        java.util.concurrent.locks.ReadWriteLock $r23, $r30, $r34;
        java.util.concurrent.locks.Lock $r24, $r31, $r35;
        java.util.Map $r26;
        java.lang.Integer $r27;
        java.lang.Object $r28;

        r0 := @this: sun.nio.ch.SolarisEventPort$EventHandlerTask;
        r1 = staticinvoke <sun.nio.ch.Invoker: sun.nio.ch.Invoker$GroupAndInvokeCount getGroupAndInvokeCount()>();
        if r1 == null goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        z0 = $z2;
        z1 = 0;
        $r6 = staticinvoke <sun.nio.ch.SolarisEventPort: sun.misc.Unsafe access$100()>();
        $i0 = <sun.nio.ch.SolarisEventPort: int SIZEOF_PORT_EVENT>;
        $l5 = (long) $i0;
        l1 = virtualinvoke $r6.<sun.misc.Unsafe: long allocateMemory(long)>($l5);

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r1.<sun.nio.ch.Invoker$GroupAndInvokeCount: void resetInvokeCount()>();

     label3:
        z1 = 0;

     label4:
        $r7 = r0.<sun.nio.ch.SolarisEventPort$EventHandlerTask: sun.nio.ch.SolarisEventPort this$0>;
        $i6 = staticinvoke <sun.nio.ch.SolarisEventPort: int access$200(sun.nio.ch.SolarisEventPort)>($r7);
        staticinvoke <sun.nio.ch.SolarisEventPort: void port_get(int,long)>($i6, l1);

     label5:
        goto label9;

     label6:
        $r8 := @caughtexception;
        r2 = $r8;
        virtualinvoke r2.<java.io.IOException: void printStackTrace()>();

     label7:
        $r9 = staticinvoke <sun.nio.ch.SolarisEventPort: sun.misc.Unsafe access$100()>();
        virtualinvoke $r9.<sun.misc.Unsafe: void freeMemory(long)>(l1);
        $r10 = r0.<sun.nio.ch.SolarisEventPort$EventHandlerTask: sun.nio.ch.SolarisEventPort this$0>;
        i2 = virtualinvoke $r10.<sun.nio.ch.SolarisEventPort: int threadExit(java.lang.Runnable,boolean)>(r0, z1);
        if i2 != 0 goto label8;

        $r11 = r0.<sun.nio.ch.SolarisEventPort$EventHandlerTask: sun.nio.ch.SolarisEventPort this$0>;
        $z3 = virtualinvoke $r11.<sun.nio.ch.SolarisEventPort: boolean isShutdown()>();
        if $z3 == 0 goto label8;

        $r12 = r0.<sun.nio.ch.SolarisEventPort$EventHandlerTask: sun.nio.ch.SolarisEventPort this$0>;
        staticinvoke <sun.nio.ch.SolarisEventPort: void access$300(sun.nio.ch.SolarisEventPort)>($r12);

     label8:
        return;

     label9:
        $r13 = staticinvoke <sun.nio.ch.SolarisEventPort: sun.misc.Unsafe access$100()>();
        $l7 = l1 + 4L;
        s8 = virtualinvoke $r13.<sun.misc.Unsafe: short getShort(long)>($l7);
        if s8 == 4 goto label13;

        if s8 != 3 goto label2;

        $r14 = r0.<sun.nio.ch.SolarisEventPort$EventHandlerTask: sun.nio.ch.SolarisEventPort this$0>;
        r15 = virtualinvoke $r14.<sun.nio.ch.SolarisEventPort: java.lang.Runnable pollTask()>();
        if r15 != null goto label12;

     label10:
        $r16 = staticinvoke <sun.nio.ch.SolarisEventPort: sun.misc.Unsafe access$100()>();
        virtualinvoke $r16.<sun.misc.Unsafe: void freeMemory(long)>(l1);
        $r17 = r0.<sun.nio.ch.SolarisEventPort$EventHandlerTask: sun.nio.ch.SolarisEventPort this$0>;
        i3 = virtualinvoke $r17.<sun.nio.ch.SolarisEventPort: int threadExit(java.lang.Runnable,boolean)>(r0, z1);
        if i3 != 0 goto label11;

        $r18 = r0.<sun.nio.ch.SolarisEventPort$EventHandlerTask: sun.nio.ch.SolarisEventPort this$0>;
        $z4 = virtualinvoke $r18.<sun.nio.ch.SolarisEventPort: boolean isShutdown()>();
        if $z4 == 0 goto label11;

        $r19 = r0.<sun.nio.ch.SolarisEventPort$EventHandlerTask: sun.nio.ch.SolarisEventPort this$0>;
        staticinvoke <sun.nio.ch.SolarisEventPort: void access$300(sun.nio.ch.SolarisEventPort)>($r19);

     label11:
        return;

     label12:
        z1 = 1;
        interfaceinvoke r15.<java.lang.Runnable: void run()>();
        goto label2;

     label13:
        $r20 = staticinvoke <sun.nio.ch.SolarisEventPort: sun.misc.Unsafe access$100()>();
        $l9 = l1 + 8L;
        $l10 = virtualinvoke $r20.<sun.misc.Unsafe: long getAddress(long)>($l9);
        i11 = (int) $l10;
        $r21 = staticinvoke <sun.nio.ch.SolarisEventPort: sun.misc.Unsafe access$100()>();
        $l12 = l1 + 0L;
        i13 = virtualinvoke $r21.<sun.misc.Unsafe: int getInt(long)>($l12);
        $r22 = r0.<sun.nio.ch.SolarisEventPort$EventHandlerTask: sun.nio.ch.SolarisEventPort this$0>;
        $r23 = $r22.<sun.nio.ch.SolarisEventPort: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r24 = interfaceinvoke $r23.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r24.<java.util.concurrent.locks.Lock: void lock()>();

     label14:
        $r25 = r0.<sun.nio.ch.SolarisEventPort$EventHandlerTask: sun.nio.ch.SolarisEventPort this$0>;
        $r26 = $r25.<sun.nio.ch.SolarisEventPort: java.util.Map fdToChannel>;
        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i11);
        $r28 = interfaceinvoke $r26.<java.util.Map: java.lang.Object get(java.lang.Object)>($r27);
        r3 = (sun.nio.ch.Port$PollableChannel) $r28;

     label15:
        $r29 = r0.<sun.nio.ch.SolarisEventPort$EventHandlerTask: sun.nio.ch.SolarisEventPort this$0>;
        $r30 = $r29.<sun.nio.ch.SolarisEventPort: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r31 = interfaceinvoke $r30.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r31.<java.util.concurrent.locks.Lock: void unlock()>();
        goto label19;

     label16:
        $r32 := @caughtexception;

     label17:
        r4 = $r32;

     label18:
        $r33 = r0.<sun.nio.ch.SolarisEventPort$EventHandlerTask: sun.nio.ch.SolarisEventPort this$0>;
        $r34 = $r33.<sun.nio.ch.SolarisEventPort: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r35 = interfaceinvoke $r34.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r35.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r4;

     label19:
        if r3 == null goto label20;

        z1 = 1;
        interfaceinvoke r3.<sun.nio.ch.Port$PollableChannel: void onEvent(int,boolean)>(i13, z0);

     label20:
        goto label2;

     label21:
        $r36 := @caughtexception;
        r5 = $r36;

     label22:
        $r37 = staticinvoke <sun.nio.ch.SolarisEventPort: sun.misc.Unsafe access$100()>();
        virtualinvoke $r37.<sun.misc.Unsafe: void freeMemory(long)>(l1);
        $r38 = r0.<sun.nio.ch.SolarisEventPort$EventHandlerTask: sun.nio.ch.SolarisEventPort this$0>;
        i4 = virtualinvoke $r38.<sun.nio.ch.SolarisEventPort: int threadExit(java.lang.Runnable,boolean)>(r0, z1);
        if i4 != 0 goto label23;

        $r39 = r0.<sun.nio.ch.SolarisEventPort$EventHandlerTask: sun.nio.ch.SolarisEventPort this$0>;
        $z5 = virtualinvoke $r39.<sun.nio.ch.SolarisEventPort: boolean isShutdown()>();
        if $z5 == 0 goto label23;

        $r40 = r0.<sun.nio.ch.SolarisEventPort$EventHandlerTask: sun.nio.ch.SolarisEventPort this$0>;
        staticinvoke <sun.nio.ch.SolarisEventPort: void access$300(sun.nio.ch.SolarisEventPort)>($r40);

     label23:
        throw r5;

        catch java.io.IOException from label4 to label5 with label6;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label2 to label7 with label21;
        catch java.lang.Throwable from label9 to label10 with label21;
        catch java.lang.Throwable from label12 to label22 with label21;
    }

    void <init>(sun.nio.ch.SolarisEventPort, sun.nio.ch.SolarisEventPort$1)
    {
        sun.nio.ch.SolarisEventPort$EventHandlerTask r0;
        sun.nio.ch.SolarisEventPort r1;
        sun.nio.ch.SolarisEventPort$1 r2;

        r0 := @this: sun.nio.ch.SolarisEventPort$EventHandlerTask;
        r1 := @parameter0: sun.nio.ch.SolarisEventPort;
        r2 := @parameter1: sun.nio.ch.SolarisEventPort$1;
        specialinvoke r0.<sun.nio.ch.SolarisEventPort$EventHandlerTask: void <init>(sun.nio.ch.SolarisEventPort)>(r1);
        return;
    }
}
