public class sun.misc.SoftCache extends java.util.AbstractMap implements java.util.Map
{
    private java.util.Map hash;
    private java.lang.ref.ReferenceQueue queue;
    private java.util.Set entrySet;

    private void processQueue()
    {
        sun.misc.SoftCache r0;
        sun.misc.SoftCache$ValueCell r1, $r4;
        java.lang.ref.ReferenceQueue $r2;
        java.lang.ref.Reference $r3;
        boolean $z0;
        java.util.Map $r5;
        java.lang.Object $r6;

        r0 := @this: sun.misc.SoftCache;

     label0:
        $r2 = r0.<sun.misc.SoftCache: java.lang.ref.ReferenceQueue queue>;
        $r3 = virtualinvoke $r2.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();
        $r4 = (sun.misc.SoftCache$ValueCell) $r3;
        r1 = $r4;
        if $r4 == null goto label2;

        $z0 = staticinvoke <sun.misc.SoftCache$ValueCell: boolean access$000(sun.misc.SoftCache$ValueCell)>(r1);
        if $z0 == 0 goto label1;

        $r5 = r0.<sun.misc.SoftCache: java.util.Map hash>;
        $r6 = staticinvoke <sun.misc.SoftCache$ValueCell: java.lang.Object access$100(sun.misc.SoftCache$ValueCell)>(r1);
        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r6);
        goto label0;

     label1:
        staticinvoke <sun.misc.SoftCache$ValueCell: int access$210()>();
        goto label0;

     label2:
        return;
    }

    public void <init>(int, float)
    {
        sun.misc.SoftCache r0;
        int i0;
        float f0;
        java.lang.ref.ReferenceQueue $r1;
        java.util.HashMap $r2;

        r0 := @this: sun.misc.SoftCache;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        specialinvoke r0.<java.util.AbstractMap: void <init>()>();
        $r1 = new java.lang.ref.ReferenceQueue;
        specialinvoke $r1.<java.lang.ref.ReferenceQueue: void <init>()>();
        r0.<sun.misc.SoftCache: java.lang.ref.ReferenceQueue queue> = $r1;
        r0.<sun.misc.SoftCache: java.util.Set entrySet> = null;
        $r2 = new java.util.HashMap;
        specialinvoke $r2.<java.util.HashMap: void <init>(int,float)>(i0, f0);
        r0.<sun.misc.SoftCache: java.util.Map hash> = $r2;
        return;
    }

    public void <init>(int)
    {
        sun.misc.SoftCache r0;
        int i0;
        java.lang.ref.ReferenceQueue $r1;
        java.util.HashMap $r2;

        r0 := @this: sun.misc.SoftCache;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.AbstractMap: void <init>()>();
        $r1 = new java.lang.ref.ReferenceQueue;
        specialinvoke $r1.<java.lang.ref.ReferenceQueue: void <init>()>();
        r0.<sun.misc.SoftCache: java.lang.ref.ReferenceQueue queue> = $r1;
        r0.<sun.misc.SoftCache: java.util.Set entrySet> = null;
        $r2 = new java.util.HashMap;
        specialinvoke $r2.<java.util.HashMap: void <init>(int)>(i0);
        r0.<sun.misc.SoftCache: java.util.Map hash> = $r2;
        return;
    }

    public void <init>()
    {
        sun.misc.SoftCache r0;
        java.lang.ref.ReferenceQueue $r1;
        java.util.HashMap $r2;

        r0 := @this: sun.misc.SoftCache;
        specialinvoke r0.<java.util.AbstractMap: void <init>()>();
        $r1 = new java.lang.ref.ReferenceQueue;
        specialinvoke $r1.<java.lang.ref.ReferenceQueue: void <init>()>();
        r0.<sun.misc.SoftCache: java.lang.ref.ReferenceQueue queue> = $r1;
        r0.<sun.misc.SoftCache: java.util.Set entrySet> = null;
        $r2 = new java.util.HashMap;
        specialinvoke $r2.<java.util.HashMap: void <init>()>();
        r0.<sun.misc.SoftCache: java.util.Map hash> = $r2;
        return;
    }

    public int size()
    {
        sun.misc.SoftCache r0;
        java.util.Set $r1;
        int $i0;

        r0 := @this: sun.misc.SoftCache;
        $r1 = virtualinvoke r0.<sun.misc.SoftCache: java.util.Set entrySet()>();
        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();
        return $i0;
    }

    public boolean isEmpty()
    {
        sun.misc.SoftCache r0;
        java.util.Set $r1;
        boolean $z0;

        r0 := @this: sun.misc.SoftCache;
        $r1 = virtualinvoke r0.<sun.misc.SoftCache: java.util.Set entrySet()>();
        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();
        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        sun.misc.SoftCache r0;
        java.lang.Object r1, $r3, $r4;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: sun.misc.SoftCache;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<sun.misc.SoftCache: java.util.Map hash>;
        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        $r4 = staticinvoke <sun.misc.SoftCache$ValueCell: java.lang.Object access$300(java.lang.Object,boolean)>($r3, 0);
        if $r4 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    protected java.lang.Object fill(java.lang.Object)
    {
        sun.misc.SoftCache r0;
        java.lang.Object r1;

        r0 := @this: sun.misc.SoftCache;
        r1 := @parameter0: java.lang.Object;
        return null;
    }

    public java.lang.Object get(java.lang.Object)
    {
        sun.misc.SoftCache r0;
        java.lang.Object r1, r2, $r8;
        java.util.Map $r3, $r4;
        java.lang.ref.ReferenceQueue $r5;
        sun.misc.SoftCache$ValueCell $r6;

        r0 := @this: sun.misc.SoftCache;
        r1 := @parameter0: java.lang.Object;
        specialinvoke r0.<sun.misc.SoftCache: void processQueue()>();
        $r3 = r0.<sun.misc.SoftCache: java.util.Map hash>;
        r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        if r2 != null goto label0;

        r2 = virtualinvoke r0.<sun.misc.SoftCache: java.lang.Object fill(java.lang.Object)>(r1);
        if r2 == null goto label0;

        $r4 = r0.<sun.misc.SoftCache: java.util.Map hash>;
        $r5 = r0.<sun.misc.SoftCache: java.lang.ref.ReferenceQueue queue>;
        $r6 = staticinvoke <sun.misc.SoftCache$ValueCell: sun.misc.SoftCache$ValueCell access$400(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue)>(r1, r2, $r5);
        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);
        return r2;

     label0:
        $r8 = staticinvoke <sun.misc.SoftCache$ValueCell: java.lang.Object access$300(java.lang.Object,boolean)>(r2, 0);
        return $r8;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        sun.misc.SoftCache r0;
        java.lang.Object r1, r2, $r6, $r7;
        sun.misc.SoftCache$ValueCell r3;
        java.lang.ref.ReferenceQueue $r4;
        java.util.Map $r5;

        r0 := @this: sun.misc.SoftCache;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        specialinvoke r0.<sun.misc.SoftCache: void processQueue()>();
        $r4 = r0.<sun.misc.SoftCache: java.lang.ref.ReferenceQueue queue>;
        r3 = staticinvoke <sun.misc.SoftCache$ValueCell: sun.misc.SoftCache$ValueCell access$400(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue)>(r1, r2, $r4);
        $r5 = r0.<sun.misc.SoftCache: java.util.Map hash>;
        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);
        $r7 = staticinvoke <sun.misc.SoftCache$ValueCell: java.lang.Object access$300(java.lang.Object,boolean)>($r6, 1);
        return $r7;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        sun.misc.SoftCache r0;
        java.lang.Object r1, $r3, $r4;
        java.util.Map $r2;

        r0 := @this: sun.misc.SoftCache;
        r1 := @parameter0: java.lang.Object;
        specialinvoke r0.<sun.misc.SoftCache: void processQueue()>();
        $r2 = r0.<sun.misc.SoftCache: java.util.Map hash>;
        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);
        $r4 = staticinvoke <sun.misc.SoftCache$ValueCell: java.lang.Object access$300(java.lang.Object,boolean)>($r3, 1);
        return $r4;
    }

    public void clear()
    {
        sun.misc.SoftCache r0;
        java.util.Map $r1;

        r0 := @this: sun.misc.SoftCache;
        specialinvoke r0.<sun.misc.SoftCache: void processQueue()>();
        $r1 = r0.<sun.misc.SoftCache: java.util.Map hash>;
        interfaceinvoke $r1.<java.util.Map: void clear()>();
        return;
    }

    private static boolean valEquals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        if r0 != null goto label1;

        if r1 != null goto label0;

        $z0 = 1;
        goto label2;

     label0:
        $z0 = 0;
        goto label2;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

     label2:
        return $z0;
    }

    public java.util.Set entrySet()
    {
        sun.misc.SoftCache r0;
        sun.misc.SoftCache$EntrySet $r1;
        java.util.Set $r2, $r3;

        r0 := @this: sun.misc.SoftCache;
        $r2 = r0.<sun.misc.SoftCache: java.util.Set entrySet>;
        if $r2 != null goto label0;

        $r1 = new sun.misc.SoftCache$EntrySet;
        specialinvoke $r1.<sun.misc.SoftCache$EntrySet: void <init>(sun.misc.SoftCache,sun.misc.SoftCache$1)>(r0, null);
        r0.<sun.misc.SoftCache: java.util.Set entrySet> = $r1;

     label0:
        $r3 = r0.<sun.misc.SoftCache: java.util.Set entrySet>;
        return $r3;
    }

    static java.lang.ref.ReferenceQueue access$500(sun.misc.SoftCache)
    {
        sun.misc.SoftCache r0;
        java.lang.ref.ReferenceQueue $r1;

        r0 := @parameter0: sun.misc.SoftCache;
        $r1 = r0.<sun.misc.SoftCache: java.lang.ref.ReferenceQueue queue>;
        return $r1;
    }

    static boolean access$600(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        $z0 = staticinvoke <sun.misc.SoftCache: boolean valEquals(java.lang.Object,java.lang.Object)>(r0, r1);
        return $z0;
    }

    static java.util.Map access$700(sun.misc.SoftCache)
    {
        sun.misc.SoftCache r0;
        java.util.Map $r1;

        r0 := @parameter0: sun.misc.SoftCache;
        $r1 = r0.<sun.misc.SoftCache: java.util.Map hash>;
        return $r1;
    }

    static void access$800(sun.misc.SoftCache)
    {
        sun.misc.SoftCache r0;

        r0 := @parameter0: sun.misc.SoftCache;
        specialinvoke r0.<sun.misc.SoftCache: void processQueue()>();
        return;
    }
}
