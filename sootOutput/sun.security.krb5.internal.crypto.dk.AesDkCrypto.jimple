public class sun.security.krb5.internal.crypto.dk.AesDkCrypto extends sun.security.krb5.internal.crypto.dk.DkCrypto
{
    private static final boolean debug;
    private static final int BLOCK_SIZE;
    private static final int DEFAULT_ITERATION_COUNT;
    private static final byte[] ZERO_IV;
    private static final int hashSize;
    private final int keyLength;

    public void <init>(int)
    {
        sun.security.krb5.internal.crypto.dk.AesDkCrypto r0;
        int i0;

        r0 := @this: sun.security.krb5.internal.crypto.dk.AesDkCrypto;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: void <init>()>();
        r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: int keyLength> = i0;
        return;
    }

    protected int getKeySeedLength()
    {
        sun.security.krb5.internal.crypto.dk.AesDkCrypto r0;
        int $i0;

        r0 := @this: sun.security.krb5.internal.crypto.dk.AesDkCrypto;
        $i0 = r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: int keyLength>;
        return $i0;
    }

    public byte[] stringToKey(char[], java.lang.String, byte[]) throws java.security.GeneralSecurityException
    {
        sun.security.krb5.internal.crypto.dk.AesDkCrypto r0;
        char[] r1;
        java.lang.String r2;
        byte[] r3, r4, r5;
        null_type n0;
        java.lang.Throwable r6, $r9;
        java.lang.Exception $r7, r8;

        r0 := @this: sun.security.krb5.internal.crypto.dk.AesDkCrypto;
        r1 := @parameter0: char[];
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: byte[];
        r4 = null;

     label0:
        r4 = virtualinvoke r2.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");
        r5 = specialinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] stringToKey(char[],byte[],byte[])>(r1, r4, r3);

     label1:
        if r4 == null goto label2;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r4, 0);

     label2:
        return r5;

     label3:
        $r7 := @caughtexception;

     label4:
        r8 = $r7;
        n0 = null;

     label5:
        if r4 == null goto label6;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r4, 0);

     label6:
        return n0;

     label7:
        $r9 := @caughtexception;

     label8:
        r6 = $r9;

     label9:
        if r4 == null goto label10;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r4, 0);

     label10:
        throw r6;

        catch java.lang.Exception from label0 to label1 with label3;
        catch java.lang.Throwable from label0 to label1 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private byte[] stringToKey(char[], byte[], byte[]) throws java.security.GeneralSecurityException
    {
        sun.security.krb5.internal.crypto.dk.AesDkCrypto r0;
        char[] r1;
        byte[] r2, r3, r4, r5, $r7, $r8;
        int i0, $i1, $i2;
        java.lang.RuntimeException $r6;

        r0 := @this: sun.security.krb5.internal.crypto.dk.AesDkCrypto;
        r1 := @parameter0: char[];
        r2 := @parameter1: byte[];
        r3 := @parameter2: byte[];
        i0 = 4096;
        if r3 == null goto label1;

        $i1 = lengthof r3;
        if $i1 == 4 goto label0;

        $r6 = new java.lang.RuntimeException;
        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Invalid parameter to stringToKey");
        throw $r6;

     label0:
        i0 = staticinvoke <sun.security.krb5.internal.crypto.dk.AesDkCrypto: int readBigEndian(byte[],int,int)>(r3, 0, 4);

     label1:
        $i2 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: int getKeySeedLength()>();
        $r7 = staticinvoke <sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] PBKDF2(char[],byte[],int,int)>(r1, r2, i0, $i2);
        r4 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] randomToKey(byte[])>($r7);
        $r8 = <sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] KERBEROS_CONSTANT>;
        r5 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] dk(byte[],byte[])>(r4, $r8);
        return r5;
    }

    protected byte[] randomToKey(byte[])
    {
        sun.security.krb5.internal.crypto.dk.AesDkCrypto r0;
        byte[] r1;

        r0 := @this: sun.security.krb5.internal.crypto.dk.AesDkCrypto;
        r1 := @parameter0: byte[];
        return r1;
    }

    protected javax.crypto.Cipher getCipher(byte[], byte[], int) throws java.security.GeneralSecurityException
    {
        sun.security.krb5.internal.crypto.dk.AesDkCrypto r0;
        byte[] r1, r2;
        int i0, $i1;
        javax.crypto.spec.SecretKeySpec r3, $r6;
        javax.crypto.Cipher r4;
        javax.crypto.spec.IvParameterSpec r5, $r7;

        r0 := @this: sun.security.krb5.internal.crypto.dk.AesDkCrypto;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        i0 := @parameter2: int;
        if r2 != null goto label0;

        r2 = <sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] ZERO_IV>;

     label0:
        $r6 = new javax.crypto.spec.SecretKeySpec;
        specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, "AES");
        r3 = $r6;
        r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/NoPadding");
        $r7 = new javax.crypto.spec.IvParameterSpec;
        $i1 = lengthof r2;
        specialinvoke $r7.<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>(r2, 0, $i1);
        r5 = $r7;
        virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(i0, r3, r5);
        return r4;
    }

    public int getChecksumLength()
    {
        sun.security.krb5.internal.crypto.dk.AesDkCrypto r0;

        r0 := @this: sun.security.krb5.internal.crypto.dk.AesDkCrypto;
        return 12;
    }

    protected byte[] getHmac(byte[], byte[]) throws java.security.GeneralSecurityException
    {
        sun.security.krb5.internal.crypto.dk.AesDkCrypto r0;
        byte[] r1, r2, r6, r7;
        javax.crypto.spec.SecretKeySpec $r3, r4;
        javax.crypto.Mac r5;

        r0 := @this: sun.security.krb5.internal.crypto.dk.AesDkCrypto;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        $r3 = new javax.crypto.spec.SecretKeySpec;
        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, "HMAC");
        r4 = $r3;
        r5 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>("HmacSHA1");
        virtualinvoke r5.<javax.crypto.Mac: void init(java.security.Key)>(r4);
        r6 = virtualinvoke r5.<javax.crypto.Mac: byte[] doFinal(byte[])>(r2);
        r7 = newarray (byte)[12];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r7, 0, 12);
        return r7;
    }

    public byte[] calculateChecksum(byte[], int, byte[], int, int) throws java.security.GeneralSecurityException
    {
        sun.security.krb5.internal.crypto.dk.AesDkCrypto r0;
        byte[] r1, r2, r4, r5, r6, r7, r8, r14;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i9, $i10, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.lang.StringBuilder $r3, $r11, $r12, $r16, $r17, $r18, $r19, $r20;
        java.lang.Throwable r9, $r22;
        boolean $z0;
        java.security.GeneralSecurityException $r10, $r15;
        java.lang.String $r13, $r21;
        byte $b5, $b8, $b11, $b13;

        r0 := @this: sun.security.krb5.internal.crypto.dk.AesDkCrypto;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: byte[];
        i1 := @parameter3: int;
        i2 := @parameter4: int;
        $z0 = staticinvoke <sun.security.krb5.internal.crypto.KeyUsage: boolean isValid(int)>(i0);
        if $z0 != 0 goto label0;

        $r10 = new java.security.GeneralSecurityException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid key usage number: ");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r10.<java.security.GeneralSecurityException: void <init>(java.lang.String)>($r13);
        throw $r10;

     label0:
        r4 = newarray (byte)[5];
        $i3 = i0 >> 24;
        $i4 = $i3 & 255;
        $b5 = (byte) $i4;
        r4[0] = $b5;
        $i6 = i0 >> 16;
        $i7 = $i6 & 255;
        $b8 = (byte) $i7;
        r4[1] = $b8;
        $i9 = i0 >> 8;
        $i10 = $i9 & 255;
        $b11 = (byte) $i10;
        r4[2] = $b11;
        $i12 = i0 & 255;
        $b13 = (byte) $i12;
        r4[3] = $b13;
        r4[4] = -103;
        r5 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] dk(byte[],byte[])>(r1, r4);

     label1:
        r6 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] getHmac(byte[],byte[])>(r5, r2);
        $i14 = lengthof r6;
        $i15 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: int getChecksumLength()>();
        if $i14 != $i15 goto label3;

        r7 = r6;

     label2:
        $i16 = lengthof r5;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r5, 0, $i16, 0);
        return r7;

     label3:
        $i17 = lengthof r6;
        $i18 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: int getChecksumLength()>();
        if $i17 <= $i18 goto label5;

        $i19 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: int getChecksumLength()>();
        r14 = newarray (byte)[$i19];
        $i20 = lengthof r14;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r14, 0, $i20);
        r8 = r14;

     label4:
        $i21 = lengthof r5;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r5, 0, $i21, 0);
        return r8;

     label5:
        $r15 = new java.security.GeneralSecurityException;
        $r16 = new java.lang.StringBuilder;
        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checksum size too short: ");
        $i22 = lengthof r6;
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; expecting : ");
        $i23 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: int getChecksumLength()>();
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r15.<java.security.GeneralSecurityException: void <init>(java.lang.String)>($r21);
        throw $r15;

     label6:
        $r22 := @caughtexception;
        r9 = $r22;

     label7:
        $i24 = lengthof r5;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r5, 0, $i24, 0);
        throw r9;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    public byte[] encrypt(byte[], int, byte[], byte[], byte[], int, int) throws java.security.GeneralSecurityException, sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.dk.AesDkCrypto r0;
        byte[] r1, r2, r3, r4, r6;
        int i0, i1, i2;
        java.lang.StringBuilder $r5, $r8, $r9;
        boolean $z0;
        java.security.GeneralSecurityException $r7;
        java.lang.String $r10;

        r0 := @this: sun.security.krb5.internal.crypto.dk.AesDkCrypto;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: byte[];
        r3 := @parameter3: byte[];
        r4 := @parameter4: byte[];
        i1 := @parameter5: int;
        i2 := @parameter6: int;
        $z0 = staticinvoke <sun.security.krb5.internal.crypto.KeyUsage: boolean isValid(int)>(i0);
        if $z0 != 0 goto label0;

        $r7 = new java.security.GeneralSecurityException;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid key usage number: ");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.security.GeneralSecurityException: void <init>(java.lang.String)>($r10);
        throw $r7;

     label0:
        r6 = specialinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] encryptCTS(byte[],int,byte[],byte[],byte[],int,int,boolean)>(r1, i0, r2, r3, r4, i1, i2, 1);
        return r6;
    }

    public byte[] encryptRaw(byte[], int, byte[], byte[], int, int) throws java.security.GeneralSecurityException, sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.dk.AesDkCrypto r0;
        byte[] r1, r2, r3, r5;
        int i0, i1, i2;
        java.lang.StringBuilder $r4, $r7, $r8;
        boolean $z0;
        java.security.GeneralSecurityException $r6;
        java.lang.String $r9;

        r0 := @this: sun.security.krb5.internal.crypto.dk.AesDkCrypto;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: byte[];
        r3 := @parameter3: byte[];
        i1 := @parameter4: int;
        i2 := @parameter5: int;
        $z0 = staticinvoke <sun.security.krb5.internal.crypto.KeyUsage: boolean isValid(int)>(i0);
        if $z0 != 0 goto label0;

        $r6 = new java.security.GeneralSecurityException;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid key usage number: ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.security.GeneralSecurityException: void <init>(java.lang.String)>($r9);
        throw $r6;

     label0:
        r5 = specialinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] encryptCTS(byte[],int,byte[],byte[],byte[],int,int,boolean)>(r1, i0, r2, null, r3, i1, i2, 0);
        return r5;
    }

    public byte[] decrypt(byte[], int, byte[], byte[], int, int) throws java.security.GeneralSecurityException
    {
        sun.security.krb5.internal.crypto.dk.AesDkCrypto r0;
        byte[] r1, r2, r3, r5;
        int i0, i1, i2;
        java.lang.StringBuilder $r4, $r7, $r8;
        boolean $z0;
        java.security.GeneralSecurityException $r6;
        java.lang.String $r9;

        r0 := @this: sun.security.krb5.internal.crypto.dk.AesDkCrypto;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: byte[];
        r3 := @parameter3: byte[];
        i1 := @parameter4: int;
        i2 := @parameter5: int;
        $z0 = staticinvoke <sun.security.krb5.internal.crypto.KeyUsage: boolean isValid(int)>(i0);
        if $z0 != 0 goto label0;

        $r6 = new java.security.GeneralSecurityException;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid key usage number: ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.security.GeneralSecurityException: void <init>(java.lang.String)>($r9);
        throw $r6;

     label0:
        r5 = specialinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] decryptCTS(byte[],int,byte[],byte[],int,int,boolean)>(r1, i0, r2, r3, i1, i2, 1);
        return r5;
    }

    public byte[] decryptRaw(byte[], int, byte[], byte[], int, int) throws java.security.GeneralSecurityException
    {
        sun.security.krb5.internal.crypto.dk.AesDkCrypto r0;
        byte[] r1, r2, r3, r5;
        int i0, i1, i2;
        java.lang.StringBuilder $r4, $r7, $r8;
        boolean $z0;
        java.security.GeneralSecurityException $r6;
        java.lang.String $r9;

        r0 := @this: sun.security.krb5.internal.crypto.dk.AesDkCrypto;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: byte[];
        r3 := @parameter3: byte[];
        i1 := @parameter4: int;
        i2 := @parameter5: int;
        $z0 = staticinvoke <sun.security.krb5.internal.crypto.KeyUsage: boolean isValid(int)>(i0);
        if $z0 != 0 goto label0;

        $r6 = new java.security.GeneralSecurityException;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid key usage number: ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.security.GeneralSecurityException: void <init>(java.lang.String)>($r9);
        throw $r6;

     label0:
        r5 = specialinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] decryptCTS(byte[],int,byte[],byte[],int,int,boolean)>(r1, i0, r2, r3, i1, i2, 0);
        return r5;
    }

    private byte[] encryptCTS(byte[], int, byte[], byte[], byte[], int, int, boolean) throws java.security.GeneralSecurityException, sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.dk.AesDkCrypto r0;
        byte[] r1, r2, r3, r4, r5, r6, r7, r8, r12, r13, r15, r16;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i9, $i10, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i28;
        boolean z0;
        null_type n0;
        javax.crypto.Cipher r9;
        javax.crypto.spec.SecretKeySpec r10, $r17;
        javax.crypto.spec.IvParameterSpec r11, $r18;
        java.lang.Throwable r14, $r19;
        byte $b5, $b8, $b11, $b13;

        r0 := @this: sun.security.krb5.internal.crypto.dk.AesDkCrypto;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: byte[];
        r3 := @parameter3: byte[];
        r4 := @parameter4: byte[];
        i1 := @parameter5: int;
        i2 := @parameter6: int;
        z0 := @parameter7: boolean;
        r5 = null;
        r6 = null;

     label0:
        r7 = newarray (byte)[5];
        $i3 = i0 >> 24;
        $i4 = $i3 & 255;
        $b5 = (byte) $i4;
        r7[0] = $b5;
        $i6 = i0 >> 16;
        $i7 = $i6 & 255;
        $b8 = (byte) $i7;
        r7[1] = $b8;
        $i9 = i0 >> 8;
        $i10 = $i9 & 255;
        $b11 = (byte) $i10;
        r7[2] = $b11;
        $i12 = i0 & 255;
        $b13 = (byte) $i12;
        r7[3] = $b13;
        r7[4] = -86;
        r5 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] dk(byte[],byte[])>(r1, r7);
        n0 = null;
        if z0 == 0 goto label1;

        r8 = staticinvoke <sun.security.krb5.Confounder: byte[] bytes(int)>(16);
        $i14 = lengthof r8;
        $i15 = $i14 + i2;
        r15 = newarray (byte)[$i15];
        $i16 = lengthof r8;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r15, 0, $i16);
        $i17 = lengthof r8;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, i1, r15, $i17, i2);
        goto label2;

     label1:
        r15 = newarray (byte)[i2];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, i1, r15, 0, i2);

     label2:
        $i18 = lengthof r15;
        $i19 = $i18 + 12;
        r16 = newarray (byte)[$i19];
        r9 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CTS/NoPadding");
        $r17 = new javax.crypto.spec.SecretKeySpec;
        specialinvoke $r17.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r5, "AES");
        r10 = $r17;
        $r18 = new javax.crypto.spec.IvParameterSpec;
        $i20 = lengthof r2;
        specialinvoke $r18.<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>(r2, 0, $i20);
        r11 = $r18;
        virtualinvoke r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, r10, r11);
        $i21 = lengthof r15;
        virtualinvoke r9.<javax.crypto.Cipher: int doFinal(byte[],int,int,byte[])>(r15, 0, $i21, r16);
        r7[4] = 85;
        r6 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] dk(byte[],byte[])>(r1, r7);
        r12 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] getHmac(byte[],byte[])>(r6, r15);
        $i23 = lengthof r15;
        $i24 = lengthof r12;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, r16, $i23, $i24);
        r13 = r16;

     label3:
        if r5 == null goto label4;

        $i25 = lengthof r5;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r5, 0, $i25, 0);

     label4:
        if r6 == null goto label5;

        $i26 = lengthof r6;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r6, 0, $i26, 0);

     label5:
        return r13;

     label6:
        $r19 := @caughtexception;

     label7:
        r14 = $r19;

     label8:
        if r5 == null goto label9;

        $i27 = lengthof r5;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r5, 0, $i27, 0);

     label9:
        if r6 == null goto label10;

        $i28 = lengthof r6;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r6, 0, $i28, 0);

     label10:
        throw r14;

        catch java.lang.Throwable from label0 to label3 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private byte[] decryptCTS(byte[], int, byte[], byte[], int, int, boolean) throws java.security.GeneralSecurityException
    {
        sun.security.krb5.internal.crypto.dk.AesDkCrypto r0;
        byte[] r1, r2, r3, r4, r5, r6, r10, r11, r12, r17, r18;
        int i0, i1, i2, i3, i4, $i5, $i6, $i8, $i9, $i11, $i12, $i14, $i16, $i17, $i18, $i19, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        boolean z0, z1;
        javax.crypto.Cipher r7;
        javax.crypto.spec.SecretKeySpec r8, $r14;
        javax.crypto.spec.IvParameterSpec r9, $r15;
        java.lang.Throwable r13, $r19;
        byte $b7, $b10, $b13, $b15, $b20, $b22;
        java.security.GeneralSecurityException $r16;

        r0 := @this: sun.security.krb5.internal.crypto.dk.AesDkCrypto;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: byte[];
        r3 := @parameter3: byte[];
        i1 := @parameter4: int;
        i2 := @parameter5: int;
        z0 := @parameter6: boolean;
        r4 = null;
        r5 = null;

     label0:
        r6 = newarray (byte)[5];
        $i5 = i0 >> 24;
        $i6 = $i5 & 255;
        $b7 = (byte) $i6;
        r6[0] = $b7;
        $i8 = i0 >> 16;
        $i9 = $i8 & 255;
        $b10 = (byte) $i9;
        r6[1] = $b10;
        $i11 = i0 >> 8;
        $i12 = $i11 & 255;
        $b13 = (byte) $i12;
        r6[2] = $b13;
        $i14 = i0 & 255;
        $b15 = (byte) $i14;
        r6[3] = $b15;
        r6[4] = -86;
        r4 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] dk(byte[],byte[])>(r1, r6);
        r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CTS/NoPadding");
        $r14 = new javax.crypto.spec.SecretKeySpec;
        specialinvoke $r14.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r4, "AES");
        r8 = $r14;
        $r15 = new javax.crypto.spec.IvParameterSpec;
        $i16 = lengthof r2;
        specialinvoke $r15.<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>(r2, 0, $i16);
        r9 = $r15;
        virtualinvoke r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, r8, r9);
        $i17 = i2 - 12;
        r10 = virtualinvoke r7.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>(r3, i1, $i17);
        r6[4] = 85;
        r5 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] dk(byte[],byte[])>(r1, r6);
        r11 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] getHmac(byte[],byte[])>(r5, r10);
        $i18 = i1 + i2;
        i3 = $i18 - 12;
        z1 = 0;
        $i19 = lengthof r11;
        if $i19 < 12 goto label3;

        i4 = 0;

     label1:
        if i4 >= 12 goto label3;

        $b20 = r11[i4];
        $i21 = i3 + i4;
        $b22 = r3[$i21];
        if $b20 == $b22 goto label2;

        z1 = 1;
        goto label3;

     label2:
        i4 = i4 + 1;
        goto label1;

     label3:
        if z1 == 0 goto label4;

        $r16 = new java.security.GeneralSecurityException;
        specialinvoke $r16.<java.security.GeneralSecurityException: void <init>(java.lang.String)>("Checksum failed");
        throw $r16;

     label4:
        if z0 == 0 goto label8;

        $i23 = lengthof r10;
        $i24 = $i23 - 16;
        r17 = newarray (byte)[$i24];
        $i25 = lengthof r17;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 16, r17, 0, $i25);
        r12 = r17;

     label5:
        if r4 == null goto label6;

        $i26 = lengthof r4;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r4, 0, $i26, 0);

     label6:
        if r5 == null goto label7;

        $i27 = lengthof r5;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r5, 0, $i27, 0);

     label7:
        return r12;

     label8:
        r18 = r10;

     label9:
        if r4 == null goto label10;

        $i28 = lengthof r4;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r4, 0, $i28, 0);

     label10:
        if r5 == null goto label11;

        $i29 = lengthof r5;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r5, 0, $i29, 0);

     label11:
        return r18;

     label12:
        $r19 := @caughtexception;

     label13:
        r13 = $r19;

     label14:
        if r4 == null goto label15;

        $i30 = lengthof r4;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r4, 0, $i30, 0);

     label15:
        if r5 == null goto label16;

        $i31 = lengthof r5;
        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r5, 0, $i31, 0);

     label16:
        throw r13;

        catch java.lang.Throwable from label0 to label5 with label12;
        catch java.lang.Throwable from label8 to label9 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private static byte[] PBKDF2(char[], byte[], int, int) throws java.security.GeneralSecurityException
    {
        char[] r0;
        byte[] r1, r6;
        int i0, i1;
        javax.crypto.spec.PBEKeySpec $r2, r3;
        javax.crypto.SecretKeyFactory r4;
        javax.crypto.SecretKey r5;

        r0 := @parameter0: char[];
        r1 := @parameter1: byte[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        $r2 = new javax.crypto.spec.PBEKeySpec;
        specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>(r0, r1, i0, i1);
        r3 = $r2;
        r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("PBKDF2WithHmacSHA1");
        r5 = virtualinvoke r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r3);
        r6 = interfaceinvoke r5.<javax.crypto.SecretKey: byte[] getEncoded()>();
        return r6;
    }

    public static final int readBigEndian(byte[], int, int)
    {
        byte[] r0;
        int i0, i1, i2, i3, $i4, $i7;
        byte $b5;
        short $s6;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = 0;
        $i4 = i1 - 1;
        i3 = $i4 * 8;

     label0:
        if i1 <= 0 goto label1;

        $b5 = r0[i0];
        $s6 = $b5 & 255;
        $i7 = $s6 << i3;
        i2 = i2 + $i7;
        i3 = i3 + -8;
        i0 = i0 + 1;
        i1 = i1 + -1;
        goto label0;

     label1:
        return i2;
    }

    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[16];
        $r0[0] = 0;
        $r0[1] = 0;
        $r0[2] = 0;
        $r0[3] = 0;
        $r0[4] = 0;
        $r0[5] = 0;
        $r0[6] = 0;
        $r0[7] = 0;
        $r0[8] = 0;
        $r0[9] = 0;
        $r0[10] = 0;
        $r0[11] = 0;
        $r0[12] = 0;
        $r0[13] = 0;
        $r0[14] = 0;
        $r0[15] = 0;
        <sun.security.krb5.internal.crypto.dk.AesDkCrypto: byte[] ZERO_IV> = $r0;
        return;
    }
}
