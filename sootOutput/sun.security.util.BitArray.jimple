public class sun.security.util.BitArray extends java.lang.Object
{
    private byte[] repn;
    private int length;
    private static final int BITS_PER_UNIT;
    private static final byte[][] NYBBLE;
    private static final int BYTES_PER_LINE;

    private static int subscript(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;
        $i1 = i0 / 8;
        return $i1;
    }

    private static int position(int)
    {
        int i0, $i1, $i2, $i3;

        i0 := @parameter0: int;
        $i1 = i0 % 8;
        $i2 = 7 - $i1;
        $i3 = 1 << $i2;
        return $i3;
    }

    public void <init>(int) throws java.lang.IllegalArgumentException
    {
        sun.security.util.BitArray r0;
        int i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r1;
        byte[] $r2;

        r0 := @this: sun.security.util.BitArray;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if i0 >= 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative length for BitArray");
        throw $r1;

     label0:
        r0.<sun.security.util.BitArray: int length> = i0;
        $i1 = i0 + 8;
        $i2 = $i1 - 1;
        $i3 = $i2 / 8;
        $r2 = newarray (byte)[$i3];
        r0.<sun.security.util.BitArray: byte[] repn> = $r2;
        return;
    }

    public void <init>(int, byte[]) throws java.lang.IllegalArgumentException
    {
        sun.security.util.BitArray r0;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        byte[] r1, $r4, $r5, $r6;
        byte b3, $b11, $b12, $b13;
        java.lang.IllegalArgumentException $r2, $r3;

        r0 := @this: sun.security.util.BitArray;
        i0 := @parameter0: int;
        r1 := @parameter1: byte[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if i0 >= 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative length for BitArray");
        throw $r2;

     label0:
        $i4 = lengthof r1;
        $i5 = $i4 * 8;
        if $i5 >= i0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Byte array too short to represent bit array of given length");
        throw $r3;

     label1:
        r0.<sun.security.util.BitArray: int length> = i0;
        $i6 = i0 + 8;
        $i7 = $i6 - 1;
        i1 = $i7 / 8;
        $i8 = i1 * 8;
        i2 = $i8 - i0;
        $i9 = 255 << i2;
        b3 = (byte) $i9;
        $r4 = newarray (byte)[i1];
        r0.<sun.security.util.BitArray: byte[] repn> = $r4;
        $r5 = r0.<sun.security.util.BitArray: byte[] repn>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r5, 0, i1);
        if i1 <= 0 goto label2;

        $r6 = r0.<sun.security.util.BitArray: byte[] repn>;
        $i10 = i1 - 1;
        $b11 = $r6[$i10];
        $b12 = $b11 & b3;
        $b13 = (byte) $b12;
        $r6[$i10] = $b13;

     label2:
        return;
    }

    public void <init>(boolean[])
    {
        sun.security.util.BitArray r0;
        boolean[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        byte[] $r2;
        boolean $z0;

        r0 := @this: sun.security.util.BitArray;
        r1 := @parameter0: boolean[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $i1 = lengthof r1;
        r0.<sun.security.util.BitArray: int length> = $i1;
        $i2 = r0.<sun.security.util.BitArray: int length>;
        $i3 = $i2 + 7;
        $i4 = $i3 / 8;
        $r2 = newarray (byte)[$i4];
        r0.<sun.security.util.BitArray: byte[] repn> = $r2;
        i0 = 0;

     label0:
        $i5 = r0.<sun.security.util.BitArray: int length>;
        if i0 >= $i5 goto label1;

        $z0 = r1[i0];
        virtualinvoke r0.<sun.security.util.BitArray: void set(int,boolean)>(i0, $z0);
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    private void <init>(sun.security.util.BitArray)
    {
        sun.security.util.BitArray r0, r1;
        int $i0;
        byte[] $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: sun.security.util.BitArray;
        r1 := @parameter0: sun.security.util.BitArray;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $i0 = r1.<sun.security.util.BitArray: int length>;
        r0.<sun.security.util.BitArray: int length> = $i0;
        $r2 = r1.<sun.security.util.BitArray: byte[] repn>;
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();
        $r4 = (byte[]) $r3;
        r0.<sun.security.util.BitArray: byte[] repn> = $r4;
        return;
    }

    public boolean get(int) throws java.lang.ArrayIndexOutOfBoundsException
    {
        sun.security.util.BitArray r0;
        int i0, $i1, $i2, $i4, $i5;
        java.lang.ArrayIndexOutOfBoundsException $r1;
        java.lang.String $r2;
        byte[] $r3;
        byte $b3;
        boolean $z0;

        r0 := @this: sun.security.util.BitArray;
        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        $i1 = r0.<sun.security.util.BitArray: int length>;
        if i0 < $i1 goto label1;

     label0:
        $r1 = new java.lang.ArrayIndexOutOfBoundsException;
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);
        specialinvoke $r1.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r2);
        throw $r1;

     label1:
        $r3 = r0.<sun.security.util.BitArray: byte[] repn>;
        $i2 = staticinvoke <sun.security.util.BitArray: int subscript(int)>(i0);
        $b3 = $r3[$i2];
        $i4 = staticinvoke <sun.security.util.BitArray: int position(int)>(i0);
        $i5 = $b3 & $i4;
        if $i5 == 0 goto label2;

        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void set(int, boolean) throws java.lang.ArrayIndexOutOfBoundsException
    {
        sun.security.util.BitArray r0;
        int i0, i1, i2, $i3, $i6, $i10, $i11;
        boolean z0;
        java.lang.ArrayIndexOutOfBoundsException $r1;
        java.lang.String $r2;
        byte[] $r3, $r4;
        byte $b5, $b7, $b9, $b12;

        r0 := @this: sun.security.util.BitArray;
        i0 := @parameter0: int;
        z0 := @parameter1: boolean;
        if i0 < 0 goto label0;

        $i3 = r0.<sun.security.util.BitArray: int length>;
        if i0 < $i3 goto label1;

     label0:
        $r1 = new java.lang.ArrayIndexOutOfBoundsException;
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);
        specialinvoke $r1.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r2);
        throw $r1;

     label1:
        i1 = staticinvoke <sun.security.util.BitArray: int subscript(int)>(i0);
        i2 = staticinvoke <sun.security.util.BitArray: int position(int)>(i0);
        if z0 == 0 goto label2;

        $r3 = r0.<sun.security.util.BitArray: byte[] repn>;
        $b5 = $r3[i1];
        $i6 = $b5 | i2;
        $b7 = (byte) $i6;
        $r3[i1] = $b7;
        goto label3;

     label2:
        $r4 = r0.<sun.security.util.BitArray: byte[] repn>;
        $b9 = $r4[i1];
        $i10 = i2 ^ -1;
        $i11 = $b9 & $i10;
        $b12 = (byte) $i11;
        $r4[i1] = $b12;

     label3:
        return;
    }

    public int length()
    {
        sun.security.util.BitArray r0;
        int $i0;

        r0 := @this: sun.security.util.BitArray;
        $i0 = r0.<sun.security.util.BitArray: int length>;
        return $i0;
    }

    public byte[] toByteArray()
    {
        sun.security.util.BitArray r0;
        byte[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: sun.security.util.BitArray;
        $r1 = r0.<sun.security.util.BitArray: byte[] repn>;
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (byte[]) $r2;
        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        sun.security.util.BitArray r0, r2;
        java.lang.Object r1;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        byte[] $r3, $r4, $r5;
        byte $b4, $b5;

        r0 := @this: sun.security.util.BitArray;
        r1 := @parameter0: java.lang.Object;
        if r1 != r0 goto label0;

        return 1;

     label0:
        if r1 == null goto label1;

        $z0 = r1 instanceof sun.security.util.BitArray;
        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        r2 = (sun.security.util.BitArray) r1;
        $i1 = r2.<sun.security.util.BitArray: int length>;
        $i2 = r0.<sun.security.util.BitArray: int length>;
        if $i1 == $i2 goto label3;

        return 0;

     label3:
        i0 = 0;

     label4:
        $r3 = r0.<sun.security.util.BitArray: byte[] repn>;
        $i3 = lengthof $r3;
        if i0 >= $i3 goto label6;

        $r4 = r0.<sun.security.util.BitArray: byte[] repn>;
        $b4 = $r4[i0];
        $r5 = r2.<sun.security.util.BitArray: byte[] repn>;
        $b5 = $r5[i0];
        if $b4 == $b5 goto label5;

        return 0;

     label5:
        i0 = i0 + 1;
        goto label4;

     label6:
        return 1;
    }

    public boolean[] toBooleanArray()
    {
        sun.security.util.BitArray r0;
        boolean[] r1;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: sun.security.util.BitArray;
        $i1 = r0.<sun.security.util.BitArray: int length>;
        r1 = newarray (boolean)[$i1];
        i0 = 0;

     label0:
        $i2 = r0.<sun.security.util.BitArray: int length>;
        if i0 >= $i2 goto label1;

        $z0 = virtualinvoke r0.<sun.security.util.BitArray: boolean get(int)>(i0);
        r1[i0] = $z0;
        i0 = i0 + 1;
        goto label0;

     label1:
        return r1;
    }

    public int hashCode()
    {
        sun.security.util.BitArray r0;
        int i0, i1, $i2, $i3, $i5, $i6;
        byte[] $r1, $r2;
        byte $b4;

        r0 := @this: sun.security.util.BitArray;
        i0 = 0;
        i1 = 0;

     label0:
        $r1 = r0.<sun.security.util.BitArray: byte[] repn>;
        $i2 = lengthof $r1;
        if i1 >= $i2 goto label1;

        $i3 = 31 * i0;
        $r2 = r0.<sun.security.util.BitArray: byte[] repn>;
        $b4 = $r2[i1];
        i0 = $i3 + $b4;
        i1 = i1 + 1;
        goto label0;

     label1:
        $i5 = r0.<sun.security.util.BitArray: int length>;
        $i6 = i0 ^ $i5;
        return $i6;
    }

    public java.lang.Object clone()
    {
        sun.security.util.BitArray r0, $r1;

        r0 := @this: sun.security.util.BitArray;
        $r1 = new sun.security.util.BitArray;
        specialinvoke $r1.<sun.security.util.BitArray: void <init>(sun.security.util.BitArray)>(r0);
        return $r1;
    }

    public java.lang.String toString()
    {
        sun.security.util.BitArray r0;
        java.io.ByteArrayOutputStream $r1, r2;
        int i0, $i1, $i2, $i8, $i9, $i10, i11, $i12;
        byte[] $r3, $r5, $r6, $r8, $r9, $r10, $r13;
        byte[][] $r4, $r7;
        byte $b3, $b4, $b5, $b6, $b7, $b13;
        boolean $z0;
        java.lang.String $r12;

        r0 := @this: sun.security.util.BitArray;
        $r1 = new java.io.ByteArrayOutputStream;
        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();
        r2 = $r1;
        i0 = 0;

     label0:
        $r3 = r0.<sun.security.util.BitArray: byte[] repn>;
        $i1 = lengthof $r3;
        $i2 = $i1 - 1;
        if i0 >= $i2 goto label3;

        $r4 = <sun.security.util.BitArray: byte[][] NYBBLE>;
        $r5 = r0.<sun.security.util.BitArray: byte[] repn>;
        $b3 = $r5[i0];
        $b4 = $b3 >> 4;
        $b5 = $b4 & 15;
        $r6 = $r4[$b5];
        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r6, 0, 4);
        $r7 = <sun.security.util.BitArray: byte[][] NYBBLE>;
        $r8 = r0.<sun.security.util.BitArray: byte[] repn>;
        $b6 = $r8[i0];
        $b7 = $b6 & 15;
        $r9 = $r7[$b7];
        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r9, 0, 4);
        $i8 = i0 % 8;
        if $i8 != 7 goto label1;

        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(int)>(10);
        goto label2;

     label1:
        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(int)>(32);

     label2:
        i0 = i0 + 1;
        goto label0;

     label3:
        $r10 = r0.<sun.security.util.BitArray: byte[] repn>;
        $i9 = lengthof $r10;
        $i10 = $i9 - 1;
        i11 = 8 * $i10;

     label4:
        $i12 = r0.<sun.security.util.BitArray: int length>;
        if i11 >= $i12 goto label7;

        $z0 = virtualinvoke r0.<sun.security.util.BitArray: boolean get(int)>(i11);
        if $z0 == 0 goto label5;

        $b13 = 49;
        goto label6;

     label5:
        $b13 = 48;

     label6:
        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(int)>($b13);
        i11 = i11 + 1;
        goto label4;

     label7:
        $r12 = new java.lang.String;
        $r13 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
        specialinvoke $r12.<java.lang.String: void <init>(byte[])>($r13);
        return $r12;
    }

    public sun.security.util.BitArray truncate()
    {
        sun.security.util.BitArray r0, $r1, $r4;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        byte[] $r2, $r3;

        r0 := @this: sun.security.util.BitArray;
        $i1 = r0.<sun.security.util.BitArray: int length>;
        i0 = $i1 - 1;

     label0:
        if i0 < 0 goto label2;

        $z0 = virtualinvoke r0.<sun.security.util.BitArray: boolean get(int)>(i0);
        if $z0 == 0 goto label1;

        $r1 = new sun.security.util.BitArray;
        $i2 = i0 + 1;
        $r2 = r0.<sun.security.util.BitArray: byte[] repn>;
        $i3 = i0 + 8;
        $i4 = $i3 / 8;
        $r3 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r2, $i4);
        specialinvoke $r1.<sun.security.util.BitArray: void <init>(int,byte[])>($i2, $r3);
        return $r1;

     label1:
        i0 = i0 + -1;
        goto label0;

     label2:
        $r4 = new sun.security.util.BitArray;
        specialinvoke $r4.<sun.security.util.BitArray: void <init>(int)>(1);
        return $r4;
    }

    static void <clinit>()
    {
        byte[][] $r0;
        byte[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;

        $r0 = newarray (byte[])[16];
        $r1 = newarray (byte)[4];
        $r1[0] = 48;
        $r1[1] = 48;
        $r1[2] = 48;
        $r1[3] = 48;
        $r0[0] = $r1;
        $r2 = newarray (byte)[4];
        $r2[0] = 48;
        $r2[1] = 48;
        $r2[2] = 48;
        $r2[3] = 49;
        $r0[1] = $r2;
        $r3 = newarray (byte)[4];
        $r3[0] = 48;
        $r3[1] = 48;
        $r3[2] = 49;
        $r3[3] = 48;
        $r0[2] = $r3;
        $r4 = newarray (byte)[4];
        $r4[0] = 48;
        $r4[1] = 48;
        $r4[2] = 49;
        $r4[3] = 49;
        $r0[3] = $r4;
        $r5 = newarray (byte)[4];
        $r5[0] = 48;
        $r5[1] = 49;
        $r5[2] = 48;
        $r5[3] = 48;
        $r0[4] = $r5;
        $r6 = newarray (byte)[4];
        $r6[0] = 48;
        $r6[1] = 49;
        $r6[2] = 48;
        $r6[3] = 49;
        $r0[5] = $r6;
        $r7 = newarray (byte)[4];
        $r7[0] = 48;
        $r7[1] = 49;
        $r7[2] = 49;
        $r7[3] = 48;
        $r0[6] = $r7;
        $r8 = newarray (byte)[4];
        $r8[0] = 48;
        $r8[1] = 49;
        $r8[2] = 49;
        $r8[3] = 49;
        $r0[7] = $r8;
        $r9 = newarray (byte)[4];
        $r9[0] = 49;
        $r9[1] = 48;
        $r9[2] = 48;
        $r9[3] = 48;
        $r0[8] = $r9;
        $r10 = newarray (byte)[4];
        $r10[0] = 49;
        $r10[1] = 48;
        $r10[2] = 48;
        $r10[3] = 49;
        $r0[9] = $r10;
        $r11 = newarray (byte)[4];
        $r11[0] = 49;
        $r11[1] = 48;
        $r11[2] = 49;
        $r11[3] = 48;
        $r0[10] = $r11;
        $r12 = newarray (byte)[4];
        $r12[0] = 49;
        $r12[1] = 48;
        $r12[2] = 49;
        $r12[3] = 49;
        $r0[11] = $r12;
        $r13 = newarray (byte)[4];
        $r13[0] = 49;
        $r13[1] = 49;
        $r13[2] = 48;
        $r13[3] = 48;
        $r0[12] = $r13;
        $r14 = newarray (byte)[4];
        $r14[0] = 49;
        $r14[1] = 49;
        $r14[2] = 48;
        $r14[3] = 49;
        $r0[13] = $r14;
        $r15 = newarray (byte)[4];
        $r15[0] = 49;
        $r15[1] = 49;
        $r15[2] = 49;
        $r15[3] = 48;
        $r0[14] = $r15;
        $r16 = newarray (byte)[4];
        $r16[0] = 49;
        $r16[1] = 49;
        $r16[2] = 49;
        $r16[3] = 49;
        $r0[15] = $r16;
        <sun.security.util.BitArray: byte[][] NYBBLE> = $r0;
        return;
    }
}
