final class java.util.regex.Pattern$SliceS extends java.util.regex.Pattern$SliceNode
{

    void <init>(int[])
    {
        java.util.regex.Pattern$SliceS r0;
        int[] r1;

        r0 := @this: java.util.regex.Pattern$SliceS;
        r1 := @parameter0: int[];
        specialinvoke r0.<java.util.regex.Pattern$SliceNode: void <init>(int[])>(r1);
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$SliceS r0;
        java.util.regex.Matcher r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.CharSequence r2;
        int[] r3;
        java.util.regex.Pattern$Node $r4;
        boolean $z0;

        r0 := @this: java.util.regex.Pattern$SliceS;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        r3 = r0.<java.util.regex.Pattern$SliceS: int[] buffer>;
        i1 = i0;
        i2 = 0;

     label0:
        $i4 = lengthof r3;
        if i2 >= $i4 goto label4;

        $i5 = r1.<java.util.regex.Matcher: int 'to'>;
        if i1 < $i5 goto label1;

        r1.<java.util.regex.Matcher: boolean hitEnd> = 1;
        return 0;

     label1:
        i3 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r2, i1);
        $i6 = r3[i2];
        if $i6 == i3 goto label2;

        return 0;

     label2:
        $i7 = staticinvoke <java.lang.Character: int charCount(int)>(i3);
        i1 = i1 + $i7;
        $i8 = r1.<java.util.regex.Matcher: int 'to'>;
        if i1 <= $i8 goto label3;

        r1.<java.util.regex.Matcher: boolean hitEnd> = 1;
        return 0;

     label3:
        i2 = i2 + 1;
        goto label0;

     label4:
        $r4 = r0.<java.util.regex.Pattern$SliceS: java.util.regex.Pattern$Node next>;
        $z0 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i1, r2);
        return $z0;
    }
}
