public final class org.apache.tomcat.util.buf.CharChunk extends org.apache.tomcat.util.buf.AbstractChunk implements java.lang.CharSequence
{
    private static final long serialVersionUID;
    private char[] buff;
    private transient org.apache.tomcat.util.buf.CharChunk$CharInputChannel in;
    private transient org.apache.tomcat.util.buf.CharChunk$CharOutputChannel out;
    private boolean optimizedWrite;

    public void <init>()
    {
        org.apache.tomcat.util.buf.CharChunk r0;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        specialinvoke r0.<org.apache.tomcat.util.buf.AbstractChunk: void <init>()>();
        r0.<org.apache.tomcat.util.buf.CharChunk: org.apache.tomcat.util.buf.CharChunk$CharInputChannel in> = null;
        r0.<org.apache.tomcat.util.buf.CharChunk: org.apache.tomcat.util.buf.CharChunk$CharOutputChannel out> = null;
        r0.<org.apache.tomcat.util.buf.CharChunk: boolean optimizedWrite> = 1;
        return;
    }

    public void <init>(int)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        int i0;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        i0 := @parameter0: int;
        specialinvoke r0.<org.apache.tomcat.util.buf.AbstractChunk: void <init>()>();
        r0.<org.apache.tomcat.util.buf.CharChunk: org.apache.tomcat.util.buf.CharChunk$CharInputChannel in> = null;
        r0.<org.apache.tomcat.util.buf.CharChunk: org.apache.tomcat.util.buf.CharChunk$CharOutputChannel out> = null;
        r0.<org.apache.tomcat.util.buf.CharChunk: boolean optimizedWrite> = 1;
        virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: void allocate(int,int)>(i0, -1);
        return;
    }

    public org.apache.tomcat.util.buf.CharChunk getClone()
    {
        org.apache.tomcat.util.buf.CharChunk r0, $r3;
        java.lang.Exception r1, $r4;
        java.lang.Object $r2;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;

     label0:
        $r2 = virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: java.lang.Object clone()>();
        $r3 = (org.apache.tomcat.util.buf.CharChunk) $r2;

     label1:
        return $r3;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        return null;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public void reset()
    {
        org.apache.tomcat.util.buf.CharChunk r0;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff> = null;
        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        return $r1;
    }

    public void allocate(int, int)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        int i0, i1, $i2;
        char[] $r1, $r2, $r3;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        if $r1 == null goto label0;

        $r2 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i2 = lengthof $r2;
        if $i2 >= i0 goto label1;

     label0:
        $r3 = newarray (char)[i0];
        r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff> = $r3;

     label1:
        virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: void setLimit(int)>(i1);
        r0.<org.apache.tomcat.util.buf.CharChunk: int start> = 0;
        r0.<org.apache.tomcat.util.buf.CharChunk: int end> = 0;
        r0.<org.apache.tomcat.util.buf.CharChunk: boolean isSet> = 1;
        r0.<org.apache.tomcat.util.buf.CharChunk: boolean hasHashCode> = 0;
        return;
    }

    public void setOptimizedWrite(boolean)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        boolean z0;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        z0 := @parameter0: boolean;
        r0.<org.apache.tomcat.util.buf.CharChunk: boolean optimizedWrite> = z0;
        return;
    }

    public void setChars(char[], int, int)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        char[] r1;
        int i0, i1, $i2, $i3;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff> = r1;
        r0.<org.apache.tomcat.util.buf.CharChunk: int start> = i0;
        $i2 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i3 = $i2 + i1;
        r0.<org.apache.tomcat.util.buf.CharChunk: int end> = $i3;
        r0.<org.apache.tomcat.util.buf.CharChunk: boolean isSet> = 1;
        r0.<org.apache.tomcat.util.buf.CharChunk: boolean hasHashCode> = 0;
        return;
    }

    public char[] getChars()
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        char[] $r1;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        $r1 = virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: char[] getBuffer()>();
        return $r1;
    }

    public char[] getBuffer()
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        char[] $r1;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        $r1 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        return $r1;
    }

    public void setCharInputChannel(org.apache.tomcat.util.buf.CharChunk$CharInputChannel)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        org.apache.tomcat.util.buf.CharChunk$CharInputChannel r1;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: org.apache.tomcat.util.buf.CharChunk$CharInputChannel;
        r0.<org.apache.tomcat.util.buf.CharChunk: org.apache.tomcat.util.buf.CharChunk$CharInputChannel in> = r1;
        return;
    }

    public void setCharOutputChannel(org.apache.tomcat.util.buf.CharChunk$CharOutputChannel)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        org.apache.tomcat.util.buf.CharChunk$CharOutputChannel r1;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: org.apache.tomcat.util.buf.CharChunk$CharOutputChannel;
        r0.<org.apache.tomcat.util.buf.CharChunk: org.apache.tomcat.util.buf.CharChunk$CharOutputChannel out> = r1;
        return;
    }

    public void append(char) throws java.io.IOException
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        char c0;
        int i1, $i2, $i3, $i4;
        char[] $r1;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        c0 := @parameter0: char;
        virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: void makeSpace(int)>(1);
        i1 = virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: int getLimitInternal()>();
        $i3 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        if $i3 < i1 goto label0;

        virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: void flushBuffer()>();

     label0:
        $r1 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i2 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i4 = $i2 + 1;
        r0.<org.apache.tomcat.util.buf.CharChunk: int end> = $i4;
        $r1[$i2] = c0;
        return;
    }

    public void append(org.apache.tomcat.util.buf.CharChunk) throws java.io.IOException
    {
        org.apache.tomcat.util.buf.CharChunk r0, r1;
        char[] $r2;
        int $i0, $i1;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: org.apache.tomcat.util.buf.CharChunk;
        $r2 = virtualinvoke r1.<org.apache.tomcat.util.buf.CharChunk: char[] getBuffer()>();
        $i0 = virtualinvoke r1.<org.apache.tomcat.util.buf.CharChunk: int getOffset()>();
        $i1 = virtualinvoke r1.<org.apache.tomcat.util.buf.CharChunk: int getLength()>();
        virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: void append(char[],int,int)>($r2, $i0, $i1);
        return;
    }

    public void append(char[], int, int) throws java.io.IOException
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        char[] r1, $r4, $r6, $r8;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        boolean $z0;
        org.apache.tomcat.util.buf.CharChunk$CharOutputChannel $r2, $r3, $r10;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: void makeSpace(int)>(i1);
        i2 = virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: int getLimitInternal()>();
        $z0 = r0.<org.apache.tomcat.util.buf.CharChunk: boolean optimizedWrite>;
        if $z0 == 0 goto label0;

        if i1 != i2 goto label0;

        $i4 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i5 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        if $i4 != $i5 goto label0;

        $r2 = r0.<org.apache.tomcat.util.buf.CharChunk: org.apache.tomcat.util.buf.CharChunk$CharOutputChannel out>;
        if $r2 == null goto label0;

        $r3 = r0.<org.apache.tomcat.util.buf.CharChunk: org.apache.tomcat.util.buf.CharChunk$CharOutputChannel out>;
        interfaceinvoke $r3.<org.apache.tomcat.util.buf.CharChunk$CharOutputChannel: void realWriteChars(char[],int,int)>(r1, i0, i1);
        return;

     label0:
        $i6 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i7 = i2 - $i6;
        if i1 > $i7 goto label1;

        $r4 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i8 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r4, $i8, i1);
        $i9 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i10 = $i9 + i1;
        r0.<org.apache.tomcat.util.buf.CharChunk: int end> = $i10;
        return;

     label1:
        $i11 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i12 = i1 + $i11;
        $i13 = 2 * i2;
        if $i12 >= $i13 goto label2;

        $i14 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        i3 = i2 - $i14;
        $r6 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i15 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r6, $i15, i3);
        $i16 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i17 = $i16 + i3;
        r0.<org.apache.tomcat.util.buf.CharChunk: int end> = $i17;
        virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: void flushBuffer()>();
        $i18 = i0 + i3;
        $r8 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i19 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i20 = i1 - i3;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i18, $r8, $i19, $i20);
        $i21 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i22 = i1 - i3;
        $i23 = $i21 + $i22;
        r0.<org.apache.tomcat.util.buf.CharChunk: int end> = $i23;
        goto label3;

     label2:
        virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: void flushBuffer()>();
        $r10 = r0.<org.apache.tomcat.util.buf.CharChunk: org.apache.tomcat.util.buf.CharChunk$CharOutputChannel out>;
        interfaceinvoke $r10.<org.apache.tomcat.util.buf.CharChunk$CharOutputChannel: void realWriteChars(char[],int,int)>(r1, i0, i1);

     label3:
        return;
    }

    public void append(java.lang.StringBuilder) throws java.io.IOException
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        java.lang.StringBuilder r1;
        int i0, i1, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        byte b2;
        char[] $r2;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: java.lang.StringBuilder;
        i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();
        virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: void makeSpace(int)>(i0);
        i1 = virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: int getLimitInternal()>();
        b2 = 0;
        i3 = b2;
        i4 = b2 + i0;
        goto label1;

     label0:
        $i6 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i7 = i1 - $i6;
        $i8 = i4 - i3;
        i5 = specialinvoke r0.<org.apache.tomcat.util.buf.CharChunk: int min(int,int)>($i7, $i8);
        $i9 = i3 + i5;
        $r2 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i10 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        virtualinvoke r1.<java.lang.StringBuilder: void getChars(int,int,char[],int)>(i3, $i9, $r2, $i10);
        i3 = i3 + i5;
        $i11 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i12 = $i11 + i5;
        r0.<org.apache.tomcat.util.buf.CharChunk: int end> = $i12;
        $i13 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        if $i13 < i1 goto label1;

        virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: void flushBuffer()>();

     label1:
        if i3 < i4 goto label0;

        return;
    }

    public void append(java.lang.String) throws java.io.IOException
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: java.lang.String;
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: void append(java.lang.String,int,int)>(r1, 0, $i0);
        return;
    }

    public void append(java.lang.String, int, int) throws java.io.IOException
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        java.lang.String r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        char[] $r2;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if r1 != null goto label0;

        return;

     label0:
        virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: void makeSpace(int)>(i1);
        i2 = virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: int getLimitInternal()>();
        i3 = i0;
        i4 = i0 + i1;
        goto label2;

     label1:
        $i6 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i7 = i2 - $i6;
        $i8 = i4 - i3;
        i5 = specialinvoke r0.<org.apache.tomcat.util.buf.CharChunk: int min(int,int)>($i7, $i8);
        $i9 = i3 + i5;
        $r2 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i10 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(i3, $i9, $r2, $i10);
        i3 = i3 + i5;
        $i11 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i12 = $i11 + i5;
        r0.<org.apache.tomcat.util.buf.CharChunk: int end> = $i12;
        $i13 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        if $i13 < i2 goto label2;

        virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: void flushBuffer()>();

     label2:
        if i3 < i4 goto label1;

        return;
    }

    public int substract() throws java.io.IOException
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        int $i0, $i1;
        boolean $z0;
        char[] $r2;
        char $c2;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        $z0 = specialinvoke r0.<org.apache.tomcat.util.buf.CharChunk: boolean checkEof()>();
        if $z0 == 0 goto label0;

        return -1;

     label0:
        $r2 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i0 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i1 = $i0 + 1;
        r0.<org.apache.tomcat.util.buf.CharChunk: int start> = $i1;
        $c2 = $r2[$i0];
        return $c2;
    }

    public int substract(org.apache.tomcat.util.buf.CharChunk) throws java.io.IOException
    {
        org.apache.tomcat.util.buf.CharChunk r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10;
        org.apache.tomcat.util.buf.CharChunk$CharInputChannel $r2, $r3;
        char[] $r4, $r5, $r6;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: org.apache.tomcat.util.buf.CharChunk;
        $i1 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i2 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i3 = $i1 - $i2;
        if $i3 != 0 goto label1;

        $r2 = r0.<org.apache.tomcat.util.buf.CharChunk: org.apache.tomcat.util.buf.CharChunk$CharInputChannel in>;
        if $r2 != null goto label0;

        return -1;

     label0:
        $r3 = r0.<org.apache.tomcat.util.buf.CharChunk: org.apache.tomcat.util.buf.CharChunk$CharInputChannel in>;
        $r4 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i4 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $r5 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i5 = lengthof $r5;
        $i6 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i7 = $i5 - $i6;
        i0 = interfaceinvoke $r3.<org.apache.tomcat.util.buf.CharChunk$CharInputChannel: int realReadChars(char[],int,int)>($r4, $i4, $i7);
        if i0 >= 0 goto label1;

        return -1;

     label1:
        i8 = virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: int getLength()>();
        $r6 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i9 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        virtualinvoke r1.<org.apache.tomcat.util.buf.CharChunk: void append(char[],int,int)>($r6, $i9, i8);
        $i10 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        r0.<org.apache.tomcat.util.buf.CharChunk: int start> = $i10;
        return i8;
    }

    public int substract(char[], int, int) throws java.io.IOException
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        char[] r1, $r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $z0 = specialinvoke r0.<org.apache.tomcat.util.buf.CharChunk: boolean checkEof()>();
        if $z0 == 0 goto label0;

        return -1;

     label0:
        i2 = i1;
        $i3 = virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: int getLength()>();
        if i1 <= $i3 goto label1;

        i2 = virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: int getLength()>();

     label1:
        $r2 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i4 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i4, r1, i0, i2);
        $i5 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i6 = $i5 + i2;
        r0.<org.apache.tomcat.util.buf.CharChunk: int start> = $i6;
        return i2;
    }

    private boolean checkEof() throws java.io.IOException
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.tomcat.util.buf.CharChunk$CharInputChannel $r1, $r2;
        char[] $r3, $r4;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        $i1 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i2 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i3 = $i1 - $i2;
        if $i3 != 0 goto label1;

        $r1 = r0.<org.apache.tomcat.util.buf.CharChunk: org.apache.tomcat.util.buf.CharChunk$CharInputChannel in>;
        if $r1 != null goto label0;

        return 1;

     label0:
        $r2 = r0.<org.apache.tomcat.util.buf.CharChunk: org.apache.tomcat.util.buf.CharChunk$CharInputChannel in>;
        $r3 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i4 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $r4 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i5 = lengthof $r4;
        $i6 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i7 = $i5 - $i6;
        i0 = interfaceinvoke $r2.<org.apache.tomcat.util.buf.CharChunk$CharInputChannel: int realReadChars(char[],int,int)>($r3, $i4, $i7);
        if i0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void flushBuffer() throws java.io.IOException
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7;
        org.apache.tomcat.util.buf.CharChunk$CharOutputChannel $r2, $r9;
        java.io.IOException $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        char[] $r6, $r10;
        java.lang.String $r8;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        $r2 = r0.<org.apache.tomcat.util.buf.CharChunk: org.apache.tomcat.util.buf.CharChunk$CharOutputChannel out>;
        if $r2 != null goto label0;

        $r3 = new java.io.IOException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Buffer overflow, no sink ");
        $i0 = virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: int getLimit()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r6 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i1 = lengthof $r6;
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r8);
        throw $r3;

     label0:
        $r9 = r0.<org.apache.tomcat.util.buf.CharChunk: org.apache.tomcat.util.buf.CharChunk$CharOutputChannel out>;
        $r10 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i2 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i3 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i4 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i5 = $i3 - $i4;
        interfaceinvoke $r9.<org.apache.tomcat.util.buf.CharChunk$CharOutputChannel: void realWriteChars(char[],int,int)>($r10, $i2, $i5);
        $i6 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        r0.<org.apache.tomcat.util.buf.CharChunk: int end> = $i6;
        return;
    }

    public void makeSpace(int)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        int i0, i1, $i4, $i5, $i9, $i10, $i13, $i17, $i19, $i25, $i26;
        null_type n0, n1;
        long l2, l3, $l6, $l11, $l14, $l15, $l18, $l20, $l21, $l22, $l23;
        byte $b7, $b8, $b12, $b16, $b24;
        char[] $r1, $r2, $r3, $r4, $r5, $r6, r7, $r8;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        i0 := @parameter0: int;
        n0 = null;
        i1 = virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: int getLimitInternal()>();
        $i4 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i5 = $i4 + i0;
        l2 = (long) $i5;
        $l6 = (long) i1;
        $b7 = l2 cmp $l6;
        if $b7 <= 0 goto label0;

        l2 = (long) i1;

     label0:
        $r1 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        if $r1 != null goto label2;

        $b8 = l2 cmp 256L;
        if $b8 >= 0 goto label1;

        l2 = 256L;

     label1:
        $i9 = (int) l2;
        $r2 = newarray (char)[$i9];
        r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff> = $r2;

     label2:
        $r3 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i10 = lengthof $r3;
        $l11 = (long) $i10;
        $b12 = l2 cmp $l11;
        if $b12 > 0 goto label3;

        return;

     label3:
        $r4 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i13 = lengthof $r4;
        $l14 = (long) $i13;
        $l15 = 2L * $l14;
        $b16 = l2 cmp $l15;
        if $b16 >= 0 goto label4;

        $r5 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i17 = lengthof $r5;
        $l18 = (long) $i17;
        l3 = $l18 * 2L;
        goto label5;

     label4:
        $r6 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i19 = lengthof $r6;
        $l20 = (long) $i19;
        $l21 = $l20 * 2L;
        $l22 = (long) i0;
        l3 = $l21 + $l22;

     label5:
        $l23 = (long) i1;
        $b24 = l3 cmp $l23;
        if $b24 <= 0 goto label6;

        l3 = (long) i1;

     label6:
        $i25 = (int) l3;
        r7 = newarray (char)[$i25];
        $r8 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i26 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r7, 0, $i26);
        r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff> = r7;
        n1 = null;
        return;
    }

    public java.lang.String toString()
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        char[] $r1;
        int $i0, $i1, $i2;
        java.lang.String $r2;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        $r1 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        if $r1 != null goto label0;

        return null;

     label0:
        $i0 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i1 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i2 = $i0 - $i1;
        if $i2 != 0 goto label1;

        return "";

     label1:
        $r2 = staticinvoke <org.apache.tomcat.util.buf.StringCache: java.lang.String toString(org.apache.tomcat.util.buf.CharChunk)>(r0);
        return $r2;
    }

    public java.lang.String toStringInternal()
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        java.lang.String $r1;
        char[] $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        $r1 = new java.lang.String;
        $r2 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i0 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i1 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i2 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i3 = $i1 - $i2;
        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, $i0, $i3);
        return $r1;
    }

    public int getInt()
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        char[] $r1;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        $r1 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i0 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i1 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i2 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i3 = $i1 - $i2;
        $i4 = staticinvoke <org.apache.tomcat.util.buf.Ascii: int parseInt(char[],int,int)>($r1, $i0, $i3);
        return $i4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.tomcat.util.buf.CharChunk r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof org.apache.tomcat.util.buf.CharChunk;
        if $z0 == 0 goto label0;

        $r2 = (org.apache.tomcat.util.buf.CharChunk) r1;
        $z1 = virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: boolean equals(org.apache.tomcat.util.buf.CharChunk)>($r2);
        return $z1;

     label0:
        return 0;
    }

    public boolean equals(java.lang.String)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        java.lang.String r1;
        char[] r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        char $c7, $c8;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: java.lang.String;
        r2 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i3 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i4 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        i0 = $i3 - $i4;
        if r2 == null goto label0;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();
        if i0 == $i5 goto label1;

     label0:
        return 0;

     label1:
        i1 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        i2 = 0;
        goto label4;

     label2:
        $i6 = i1;
        i1 = i1 + 1;
        $c7 = r2[$i6];
        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);
        if $c7 == $c8 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

     label4:
        if i2 < i0 goto label2;

        return 1;
    }

    public boolean equalsIgnoreCase(java.lang.String)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        java.lang.String r1;
        char[] r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i8, $i10;
        char $c7, $c9;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: java.lang.String;
        r2 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i3 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i4 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        i0 = $i3 - $i4;
        if r2 == null goto label0;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();
        if i0 == $i5 goto label1;

     label0:
        return 0;

     label1:
        i1 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        i2 = 0;
        goto label4;

     label2:
        $i6 = i1;
        i1 = i1 + 1;
        $c7 = r2[$i6];
        $i8 = staticinvoke <org.apache.tomcat.util.buf.Ascii: int toLower(int)>($c7);
        $c9 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);
        $i10 = staticinvoke <org.apache.tomcat.util.buf.Ascii: int toLower(int)>($c9);
        if $i8 == $i10 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

     label4:
        if i2 < i0 goto label2;

        return 1;
    }

    public boolean equals(org.apache.tomcat.util.buf.CharChunk)
    {
        org.apache.tomcat.util.buf.CharChunk r0, r1;
        char[] $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: org.apache.tomcat.util.buf.CharChunk;
        $r2 = virtualinvoke r1.<org.apache.tomcat.util.buf.CharChunk: char[] getChars()>();
        $i0 = virtualinvoke r1.<org.apache.tomcat.util.buf.CharChunk: int getOffset()>();
        $i1 = virtualinvoke r1.<org.apache.tomcat.util.buf.CharChunk: int getLength()>();
        $z0 = virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: boolean equals(char[],int,int)>($r2, $i0, $i1);
        return $z0;
    }

    public boolean equals(char[], int, int)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        char[] r1, r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i10;
        char $c8, $c9;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        if r2 != null goto label0;

        if r1 != null goto label0;

        return 1;

     label0:
        $i5 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i6 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        i2 = $i5 - $i6;
        if i2 != i1 goto label1;

        if r2 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        i3 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        goto label4;

     label3:
        $i7 = i3;
        i3 = i3 + 1;
        $c8 = r2[$i7];
        $i4 = i0;
        i0 = i0 + 1;
        $c9 = r1[$i4];
        if $c8 == $c9 goto label4;

        return 0;

     label4:
        $i10 = i2;
        i2 = i2 + -1;
        if $i10 > 0 goto label3;

        return 1;
    }

    public boolean equals(byte[], int, int)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        byte[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i14;
        char[] r2;
        char $c11, $c13;
        byte $b12;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        if r1 != null goto label0;

        if r2 != null goto label0;

        return 1;

     label0:
        if r2 == null goto label1;

        if r1 == null goto label1;

        $i5 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i6 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i7 = $i5 - $i6;
        if $i7 == i1 goto label2;

     label1:
        return 0;

     label2:
        i2 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i8 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i9 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        i3 = $i8 - $i9;
        goto label4;

     label3:
        $i10 = i2;
        i2 = i2 + 1;
        $c11 = r2[$i10];
        $i4 = i0;
        i0 = i0 + 1;
        $b12 = r1[$i4];
        $c13 = (char) $b12;
        if $c11 == $c13 goto label4;

        return 0;

     label4:
        $i14 = i3;
        i3 = i3 + -1;
        if $i14 > 0 goto label3;

        return 1;
    }

    public boolean startsWith(java.lang.String)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        java.lang.String r1;
        char[] r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        char $c7, $c8;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: java.lang.String;
        r2 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if r2 == null goto label0;

        $i3 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i4 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i5 = $i3 - $i4;
        if i0 <= $i5 goto label1;

     label0:
        return 0;

     label1:
        i1 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        i2 = 0;
        goto label4;

     label2:
        $i6 = i1;
        i1 = i1 + 1;
        $c7 = r2[$i6];
        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);
        if $c7 == $c8 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

     label4:
        if i2 < i0 goto label2;

        return 1;
    }

    public boolean startsWithIgnoreCase(java.lang.String, int)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        java.lang.String r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i13;
        char[] r2;
        char $c10, $c12;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r2 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if r2 == null goto label0;

        $i4 = i1 + i0;
        $i5 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i6 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i7 = $i5 - $i6;
        if $i4 <= $i7 goto label1;

     label0:
        return 0;

     label1:
        $i8 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        i2 = $i8 + i0;
        i3 = 0;
        goto label4;

     label2:
        $i9 = i2;
        i2 = i2 + 1;
        $c10 = r2[$i9];
        $i11 = staticinvoke <org.apache.tomcat.util.buf.Ascii: int toLower(int)>($c10);
        $c12 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);
        $i13 = staticinvoke <org.apache.tomcat.util.buf.Ascii: int toLower(int)>($c12);
        if $i11 == $i13 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

     label4:
        if i3 < i1 goto label2;

        return 1;
    }

    public boolean endsWith(java.lang.String)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        java.lang.String r1;
        char[] r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        char $c8, $c9;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        r1 := @parameter0: java.lang.String;
        r2 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if r2 == null goto label0;

        $i3 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i4 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i5 = $i3 - $i4;
        if i0 <= $i5 goto label1;

     label0:
        return 0;

     label1:
        $i6 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        i1 = $i6 - i0;
        i2 = 0;
        goto label4;

     label2:
        $i7 = i1;
        i1 = i1 + 1;
        $c8 = r2[$i7];
        $c9 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);
        if $c8 == $c9 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

     label4:
        if i2 < i0 goto label2;

        return 1;
    }

    protected int getBufferElement(int)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        int i0;
        char[] $r1;
        char $c1;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        i0 := @parameter0: int;
        $r1 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $c1 = $r1[i0];
        return $c1;
    }

    public int hashIgnoreCase()
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        int i0, i1, $i2, $i4, $i5;
        char[] $r1;
        char $c3;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        i0 = 0;
        i1 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        goto label1;

     label0:
        $i2 = i0 * 37;
        $r1 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $c3 = $r1[i1];
        $i4 = staticinvoke <org.apache.tomcat.util.buf.Ascii: int toLower(int)>($c3);
        i0 = $i2 + $i4;
        i1 = i1 + 1;

     label1:
        $i5 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        if i1 < $i5 goto label0;

        return i0;
    }

    public int indexOf(char)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        char c0;
        int $i1, $i2;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        c0 := @parameter0: char;
        $i1 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i2 = virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: int indexOf(char,int)>(c0, $i1);
        return $i2;
    }

    public int indexOf(char, int)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        char c0;
        int i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        char[] $r1;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        c0 := @parameter0: char;
        i1 := @parameter1: int;
        $r1 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i3 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i4 = $i3 + i1;
        $i5 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        i2 = staticinvoke <org.apache.tomcat.util.buf.CharChunk: int indexOf(char[],int,int,char)>($r1, $i4, $i5, c0);
        $i6 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        if i2 < $i6 goto label0;

        $i7 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i8 = i2 - $i7;
        goto label1;

     label0:
        $i8 = -1;

     label1:
        return $i8;
    }

    public static int indexOf(char[], int, int, char)
    {
        char[] r0;
        int i0, i1, i3;
        char c2, c4;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        c2 := @parameter3: char;
        i3 = i0;
        goto label2;

     label0:
        c4 = r0[i3];
        if c4 != c2 goto label1;

        return i3;

     label1:
        i3 = i3 + 1;

     label2:
        if i3 < i1 goto label0;

        return -1;
    }

    private int min(int, int)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        int i0, i1;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i0 >= i1 goto label0;

        return i0;

     label0:
        return i1;
    }

    public char charAt(int)
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        int i0, $i1, $i2;
        char[] $r1;
        char $c3;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        i0 := @parameter0: int;
        $r1 = r0.<org.apache.tomcat.util.buf.CharChunk: char[] buff>;
        $i1 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i2 = i0 + $i1;
        $c3 = $r1[$i2];
        return $c3;
    }

    public java.lang.CharSequence subSequence(int, int)
    {
        org.apache.tomcat.util.buf.CharChunk r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r2;
        java.lang.CloneNotSupportedException $r4, r5;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        i0 := @parameter0: int;
        i1 := @parameter1: int;

     label0:
        $r2 = virtualinvoke r0.<org.apache.tomcat.util.buf.CharChunk: java.lang.Object clone()>();
        r1 = (org.apache.tomcat.util.buf.CharChunk) $r2;
        $i2 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i3 = $i2 + i0;
        virtualinvoke r1.<org.apache.tomcat.util.buf.CharChunk: void setOffset(int)>($i3);
        $i4 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i5 = $i4 + i1;
        virtualinvoke r1.<org.apache.tomcat.util.buf.CharChunk: void setEnd(int)>($i5);

     label1:
        return r1;

     label2:
        $r4 := @caughtexception;
        r5 = $r4;
        return null;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    public int length()
    {
        org.apache.tomcat.util.buf.CharChunk r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.tomcat.util.buf.CharChunk;
        $i0 = r0.<org.apache.tomcat.util.buf.CharChunk: int end>;
        $i1 = r0.<org.apache.tomcat.util.buf.CharChunk: int start>;
        $i2 = $i0 - $i1;
        return $i2;
    }
}
