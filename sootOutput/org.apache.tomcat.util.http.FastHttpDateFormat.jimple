public final class org.apache.tomcat.util.http.FastHttpDateFormat extends java.lang.Object
{
    private static final int CACHE_SIZE;
    private static final java.text.SimpleDateFormat format;
    private static final java.text.SimpleDateFormat[] formats;
    private static final java.util.TimeZone gmtZone;
    private static volatile long currentDateGenerated;
    private static java.lang.String currentDate;
    private static final java.util.Map formatCache;
    private static final java.util.Map parseCache;

    static void <clinit>()
    {
        java.util.Locale $r0, $r1, $r7, $r9;
        java.lang.String $r2;
        int $i0, $i1, $i2;
        java.text.SimpleDateFormat $r3, $r5, $r6, $r8, $r11, $r14, $r17, $r20;
        java.text.SimpleDateFormat[] $r4, $r13, $r16, $r19;
        java.util.TimeZone $r10, $r12, $r15, $r18, $r21;
        java.util.concurrent.ConcurrentHashMap $r22, $r23;

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("org.apache.tomcat.util.http.FastHttpDateFormat.CACHE_SIZE", "1000");
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);
        <org.apache.tomcat.util.http.FastHttpDateFormat: int CACHE_SIZE> = $i0;
        $r3 = new java.text.SimpleDateFormat;
        $r0 = <java.util.Locale: java.util.Locale US>;
        specialinvoke $r3.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("EEE, dd MMM yyyy HH:mm:ss zzz", $r0);
        <org.apache.tomcat.util.http.FastHttpDateFormat: java.text.SimpleDateFormat format> = $r3;
        $r4 = newarray (java.text.SimpleDateFormat)[3];
        $r5 = new java.text.SimpleDateFormat;
        $r1 = <java.util.Locale: java.util.Locale US>;
        specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("EEE, dd MMM yyyy HH:mm:ss zzz", $r1);
        $r4[0] = $r5;
        $r6 = new java.text.SimpleDateFormat;
        $r7 = <java.util.Locale: java.util.Locale US>;
        specialinvoke $r6.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("EEEEEE, dd-MMM-yy HH:mm:ss zzz", $r7);
        $r4[1] = $r6;
        $r8 = new java.text.SimpleDateFormat;
        $r9 = <java.util.Locale: java.util.Locale US>;
        specialinvoke $r8.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("EEE MMMM d HH:mm:ss yyyy", $r9);
        $r4[2] = $r8;
        <org.apache.tomcat.util.http.FastHttpDateFormat: java.text.SimpleDateFormat[] formats> = $r4;
        $r10 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");
        <org.apache.tomcat.util.http.FastHttpDateFormat: java.util.TimeZone gmtZone> = $r10;
        $r11 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.text.SimpleDateFormat format>;
        $r12 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.util.TimeZone gmtZone>;
        virtualinvoke $r11.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r12);
        $r13 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.text.SimpleDateFormat[] formats>;
        $r14 = $r13[0];
        $r15 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.util.TimeZone gmtZone>;
        virtualinvoke $r14.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r15);
        $r16 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.text.SimpleDateFormat[] formats>;
        $r17 = $r16[1];
        $r18 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.util.TimeZone gmtZone>;
        virtualinvoke $r17.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r18);
        $r19 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.text.SimpleDateFormat[] formats>;
        $r20 = $r19[2];
        $r21 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.util.TimeZone gmtZone>;
        virtualinvoke $r20.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r21);
        <org.apache.tomcat.util.http.FastHttpDateFormat: long currentDateGenerated> = 0L;
        <org.apache.tomcat.util.http.FastHttpDateFormat: java.lang.String currentDate> = null;
        $r22 = new java.util.concurrent.ConcurrentHashMap;
        $i1 = <org.apache.tomcat.util.http.FastHttpDateFormat: int CACHE_SIZE>;
        specialinvoke $r22.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>($i1);
        <org.apache.tomcat.util.http.FastHttpDateFormat: java.util.Map formatCache> = $r22;
        $r23 = new java.util.concurrent.ConcurrentHashMap;
        $i2 = <org.apache.tomcat.util.http.FastHttpDateFormat: int CACHE_SIZE>;
        specialinvoke $r23.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>($i2);
        <org.apache.tomcat.util.http.FastHttpDateFormat: java.util.Map parseCache> = $r23;
        return;
    }

    public void <init>()
    {
        org.apache.tomcat.util.http.FastHttpDateFormat r0;

        r0 := @this: org.apache.tomcat.util.http.FastHttpDateFormat;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static final java.lang.String getCurrentDate()
    {
        long l0, $l1, $l2, $l4, $l5;
        java.text.SimpleDateFormat r0, $r1, $r2;
        byte $b3, $b6;
        java.util.Date $r3;
        java.lang.String $r4, $r6;
        java.lang.Throwable $r5;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l1 = <org.apache.tomcat.util.http.FastHttpDateFormat: long currentDateGenerated>;
        $l2 = l0 - $l1;
        $b3 = $l2 cmp 1000L;
        if $b3 <= 0 goto label6;

        $r1 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.text.SimpleDateFormat format>;
        r0 = $r1;
        entermonitor $r1;

     label0:
        $l4 = <org.apache.tomcat.util.http.FastHttpDateFormat: long currentDateGenerated>;
        $l5 = l0 - $l4;
        $b6 = $l5 cmp 1000L;
        if $b6 <= 0 goto label1;

        $r2 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.text.SimpleDateFormat format>;
        $r3 = new java.util.Date;
        specialinvoke $r3.<java.util.Date: void <init>(long)>(l0);
        $r4 = virtualinvoke $r2.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r3);
        <org.apache.tomcat.util.http.FastHttpDateFormat: java.lang.String currentDate> = $r4;
        <org.apache.tomcat.util.http.FastHttpDateFormat: long currentDateGenerated> = l0;

     label1:
        exitmonitor r0;

     label2:
        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r5;

     label6:
        $r6 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.lang.String currentDate>;
        return $r6;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static final java.lang.String formatDate(long, java.text.DateFormat)
    {
        long l0;
        java.text.DateFormat r0;
        java.lang.Long r1;
        java.lang.String r2, r8;
        null_type n0;
        java.util.Date r3, $r7;
        java.text.SimpleDateFormat r4, $r9, $r10;
        java.util.Map $r5;
        java.lang.Object $r6;
        java.lang.Throwable $r11;

        l0 := @parameter0: long;
        r0 := @parameter1: java.text.DateFormat;
        r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);
        $r5 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.util.Map formatCache>;
        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        r2 = (java.lang.String) $r6;
        if r2 == null goto label0;

        return r2;

     label0:
        n0 = null;
        $r7 = new java.util.Date;
        specialinvoke $r7.<java.util.Date: void <init>(long)>(l0);
        r3 = $r7;
        if r0 == null goto label1;

        r8 = virtualinvoke r0.<java.text.DateFormat: java.lang.String format(java.util.Date)>(r3);
        staticinvoke <org.apache.tomcat.util.http.FastHttpDateFormat: void updateFormatCache(java.lang.Long,java.lang.String)>(r1, r8);
        goto label8;

     label1:
        $r9 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.text.SimpleDateFormat format>;
        r4 = $r9;
        entermonitor $r9;

     label2:
        $r10 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.text.SimpleDateFormat format>;
        r8 = virtualinvoke $r10.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r3);
        exitmonitor r4;

     label3:
        goto label7;

     label4:
        $r11 := @caughtexception;

     label5:
        exitmonitor r4;

     label6:
        throw $r11;

     label7:
        staticinvoke <org.apache.tomcat.util.http.FastHttpDateFormat: void updateFormatCache(java.lang.Long,java.lang.String)>(r1, r8);

     label8:
        return r8;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static final long parseDate(java.lang.String, java.text.DateFormat[])
    {
        java.lang.String r0;
        java.text.DateFormat[] r1;
        java.util.Map $r2;
        java.lang.Long r3, r5;
        null_type n0;
        java.lang.Object $r4;
        long $l0, $l1;
        java.text.SimpleDateFormat[] $r6;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.text.DateFormat[];
        $r2 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.util.Map parseCache>;
        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);
        r3 = (java.lang.Long) $r4;
        if r3 == null goto label0;

        $l0 = virtualinvoke r3.<java.lang.Long: long longValue()>();
        return $l0;

     label0:
        n0 = null;
        if r1 == null goto label1;

        r5 = staticinvoke <org.apache.tomcat.util.http.FastHttpDateFormat: java.lang.Long internalParseDate(java.lang.String,java.text.DateFormat[])>(r0, r1);
        staticinvoke <org.apache.tomcat.util.http.FastHttpDateFormat: void updateParseCache(java.lang.String,java.lang.Long)>(r0, r5);
        goto label2;

     label1:
        $r6 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.text.SimpleDateFormat[] formats>;
        r5 = staticinvoke <org.apache.tomcat.util.http.FastHttpDateFormat: java.lang.Long internalParseDate(java.lang.String,java.text.DateFormat[])>(r0, $r6);
        staticinvoke <org.apache.tomcat.util.http.FastHttpDateFormat: void updateParseCache(java.lang.String,java.lang.Long)>(r0, r5);

     label2:
        if r5 != null goto label3;

        return -1L;

     label3:
        $l1 = virtualinvoke r5.<java.lang.Long: long longValue()>();
        return $l1;
    }

    private static final java.lang.Long internalParseDate(java.lang.String, java.text.DateFormat[])
    {
        java.lang.String r0;
        java.text.DateFormat[] r1;
        java.util.Date r2;
        int i0, $i1;
        java.text.ParseException r3, $r5;
        java.text.DateFormat $r4;
        long $l2;
        java.lang.Long $r6;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.text.DateFormat[];
        r2 = null;
        i0 = 0;
        goto label4;

     label0:
        $r4 = r1[i0];
        r2 = virtualinvoke $r4.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r0);

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r3 = $r5;

     label3:
        i0 = i0 + 1;

     label4:
        if r2 != null goto label5;

        $i1 = lengthof r1;
        if i0 < $i1 goto label0;

     label5:
        if r2 != null goto label6;

        return null;

     label6:
        $l2 = virtualinvoke r2.<java.util.Date: long getTime()>();
        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);
        return $r6;

        catch java.text.ParseException from label0 to label1 with label2;
    }

    private static void updateFormatCache(java.lang.Long, java.lang.String)
    {
        java.lang.Long r0;
        java.lang.String r1;
        int $i0, $i1;
        java.util.Map $r2, $r3, $r4;

        r0 := @parameter0: java.lang.Long;
        r1 := @parameter1: java.lang.String;
        if r1 != null goto label0;

        return;

     label0:
        $r2 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.util.Map formatCache>;
        $i1 = interfaceinvoke $r2.<java.util.Map: int size()>();
        $i0 = <org.apache.tomcat.util.http.FastHttpDateFormat: int CACHE_SIZE>;
        if $i1 <= $i0 goto label1;

        $r3 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.util.Map formatCache>;
        interfaceinvoke $r3.<java.util.Map: void clear()>();

     label1:
        $r4 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.util.Map formatCache>;
        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);
        return;
    }

    private static void updateParseCache(java.lang.String, java.lang.Long)
    {
        java.lang.String r0;
        java.lang.Long r1;
        int $i0, $i1;
        java.util.Map $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.Long;
        if r1 != null goto label0;

        return;

     label0:
        $r2 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.util.Map parseCache>;
        $i1 = interfaceinvoke $r2.<java.util.Map: int size()>();
        $i0 = <org.apache.tomcat.util.http.FastHttpDateFormat: int CACHE_SIZE>;
        if $i1 <= $i0 goto label1;

        $r3 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.util.Map parseCache>;
        interfaceinvoke $r3.<java.util.Map: void clear()>();

     label1:
        $r4 = <org.apache.tomcat.util.http.FastHttpDateFormat: java.util.Map parseCache>;
        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);
        return;
    }
}
