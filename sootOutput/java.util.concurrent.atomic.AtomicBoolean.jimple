public class java.util.concurrent.atomic.AtomicBoolean extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private static final sun.misc.Unsafe unsafe;
    private static final long valueOffset;
    private volatile int value;

    public void <init>(boolean)
    {
        java.util.concurrent.atomic.AtomicBoolean r0;
        boolean z0;
        byte $b0;

        r0 := @this: java.util.concurrent.atomic.AtomicBoolean;
        z0 := @parameter0: boolean;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if z0 == 0 goto label0;

        $b0 = 1;
        goto label1;

     label0:
        $b0 = 0;

     label1:
        r0.<java.util.concurrent.atomic.AtomicBoolean: int value> = $b0;
        return;
    }

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicBoolean r0;

        r0 := @this: java.util.concurrent.atomic.AtomicBoolean;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public final boolean get()
    {
        java.util.concurrent.atomic.AtomicBoolean r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicBoolean;
        $i0 = r0.<java.util.concurrent.atomic.AtomicBoolean: int value>;
        if $i0 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public final boolean compareAndSet(boolean, boolean)
    {
        java.util.concurrent.atomic.AtomicBoolean r0;
        boolean z0, z1, $z2;
        byte b0, b1, $b3, $b4;
        long $l2;
        sun.misc.Unsafe $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicBoolean;
        z0 := @parameter0: boolean;
        z1 := @parameter1: boolean;
        if z0 == 0 goto label0;

        $b3 = 1;
        goto label1;

     label0:
        $b3 = 0;

     label1:
        b0 = $b3;
        if z1 == 0 goto label2;

        $b4 = 1;
        goto label3;

     label2:
        $b4 = 0;

     label3:
        b1 = $b4;
        $r1 = <java.util.concurrent.atomic.AtomicBoolean: sun.misc.Unsafe unsafe>;
        $l2 = <java.util.concurrent.atomic.AtomicBoolean: long valueOffset>;
        $z2 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l2, b0, b1);
        return $z2;
    }

    public boolean weakCompareAndSet(boolean, boolean)
    {
        java.util.concurrent.atomic.AtomicBoolean r0;
        boolean z0, z1, $z2;
        byte b0, b1, $b3, $b4;
        long $l2;
        sun.misc.Unsafe $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicBoolean;
        z0 := @parameter0: boolean;
        z1 := @parameter1: boolean;
        if z0 == 0 goto label0;

        $b3 = 1;
        goto label1;

     label0:
        $b3 = 0;

     label1:
        b0 = $b3;
        if z1 == 0 goto label2;

        $b4 = 1;
        goto label3;

     label2:
        $b4 = 0;

     label3:
        b1 = $b4;
        $r1 = <java.util.concurrent.atomic.AtomicBoolean: sun.misc.Unsafe unsafe>;
        $l2 = <java.util.concurrent.atomic.AtomicBoolean: long valueOffset>;
        $z2 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l2, b0, b1);
        return $z2;
    }

    public final void set(boolean)
    {
        java.util.concurrent.atomic.AtomicBoolean r0;
        boolean z0;
        byte $b0;

        r0 := @this: java.util.concurrent.atomic.AtomicBoolean;
        z0 := @parameter0: boolean;
        if z0 == 0 goto label0;

        $b0 = 1;
        goto label1;

     label0:
        $b0 = 0;

     label1:
        r0.<java.util.concurrent.atomic.AtomicBoolean: int value> = $b0;
        return;
    }

    public final void lazySet(boolean)
    {
        java.util.concurrent.atomic.AtomicBoolean r0;
        boolean z0;
        byte b0, $b2;
        long $l1;
        sun.misc.Unsafe $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicBoolean;
        z0 := @parameter0: boolean;
        if z0 == 0 goto label0;

        $b2 = 1;
        goto label1;

     label0:
        $b2 = 0;

     label1:
        b0 = $b2;
        $r1 = <java.util.concurrent.atomic.AtomicBoolean: sun.misc.Unsafe unsafe>;
        $l1 = <java.util.concurrent.atomic.AtomicBoolean: long valueOffset>;
        virtualinvoke $r1.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(r0, $l1, b0);
        return;
    }

    public final boolean getAndSet(boolean)
    {
        java.util.concurrent.atomic.AtomicBoolean r0;
        boolean z0, z1, $z2;

        r0 := @this: java.util.concurrent.atomic.AtomicBoolean;
        z0 := @parameter0: boolean;

     label0:
        z1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
        $z2 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(z1, z0);
        if $z2 == 0 goto label1;

        return z1;

     label1:
        goto label0;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.atomic.AtomicBoolean r0;
        boolean $z0;
        java.lang.String $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicBoolean;
        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
        $r1 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z0);
        return $r1;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0, $r3;
        java.lang.Class $r1;
        java.lang.Exception r2, $r5;
        java.lang.reflect.Field $r4;
        long $l0;
        java.lang.Error $r6;

        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <java.util.concurrent.atomic.AtomicBoolean: sun.misc.Unsafe unsafe> = $r0;

     label0:
        $r3 = <java.util.concurrent.atomic.AtomicBoolean: sun.misc.Unsafe unsafe>;
        $r1 = class "java/util/concurrent/atomic/AtomicBoolean";
        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("value");
        $l0 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);
        <java.util.concurrent.atomic.AtomicBoolean: long valueOffset> = $l0;

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r2 = $r5;
        $r6 = new java.lang.Error;
        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.Throwable)>(r2);
        throw $r6;

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }
}
