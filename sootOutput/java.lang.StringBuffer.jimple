public final class java.lang.StringBuffer extends java.lang.AbstractStringBuilder implements java.io.Serializable, java.lang.CharSequence
{
    static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;

    public void <init>()
    {
        java.lang.StringBuffer r0;

        r0 := @this: java.lang.StringBuffer;
        specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>(int)>(16);
        return;
    }

    public void <init>(int)
    {
        java.lang.StringBuffer r0;
        int i0;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>(int)>(i0);
        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.StringBuffer r0;
        java.lang.String r1;
        int $i0, $i1;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.lang.String;
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        $i1 = $i0 + 16;
        specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>(int)>($i1);
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);
        return;
    }

    public void <init>(java.lang.CharSequence)
    {
        java.lang.StringBuffer r0;
        java.lang.CharSequence r1;
        int $i0, $i1;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.lang.CharSequence;
        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();
        $i1 = $i0 + 16;
        specialinvoke r0.<java.lang.StringBuffer: void <init>(int)>($i1);
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r1);
        return;
    }

    public synchronized int length()
    {
        java.lang.StringBuffer r0;
        int $i0;

        r0 := @this: java.lang.StringBuffer;
        $i0 = r0.<java.lang.StringBuffer: int count>;
        return $i0;
    }

    public synchronized int capacity()
    {
        java.lang.StringBuffer r0;
        char[] $r1;
        int $i0;

        r0 := @this: java.lang.StringBuffer;
        $r1 = r0.<java.lang.StringBuffer: char[] value>;
        $i0 = lengthof $r1;
        return $i0;
    }

    public synchronized void ensureCapacity(int)
    {
        java.lang.StringBuffer r0;
        int i0, $i1;
        char[] $r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        $r1 = r0.<java.lang.StringBuffer: char[] value>;
        $i1 = lengthof $r1;
        if i0 <= $i1 goto label0;

        virtualinvoke r0.<java.lang.StringBuffer: void expandCapacity(int)>(i0);

     label0:
        return;
    }

    public synchronized void trimToSize()
    {
        java.lang.StringBuffer r0;

        r0 := @this: java.lang.StringBuffer;
        specialinvoke r0.<java.lang.AbstractStringBuilder: void trimToSize()>();
        return;
    }

    public synchronized void setLength(int)
    {
        java.lang.StringBuffer r0;
        int i0;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: void setLength(int)>(i0);
        return;
    }

    public synchronized char charAt(int)
    {
        java.lang.StringBuffer r0;
        int i0, $i1;
        java.lang.StringIndexOutOfBoundsException $r1;
        char[] $r2;
        char $c2;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        $i1 = r0.<java.lang.StringBuffer: int count>;
        if i0 < $i1 goto label1;

     label0:
        $r1 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i0);
        throw $r1;

     label1:
        $r2 = r0.<java.lang.StringBuffer: char[] value>;
        $c2 = $r2[i0];
        return $c2;
    }

    public synchronized int codePointAt(int)
    {
        java.lang.StringBuffer r0;
        int i0, $i1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        $i1 = specialinvoke r0.<java.lang.AbstractStringBuilder: int codePointAt(int)>(i0);
        return $i1;
    }

    public synchronized int codePointBefore(int)
    {
        java.lang.StringBuffer r0;
        int i0, $i1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        $i1 = specialinvoke r0.<java.lang.AbstractStringBuilder: int codePointBefore(int)>(i0);
        return $i1;
    }

    public synchronized int codePointCount(int, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1, $i2;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i2 = specialinvoke r0.<java.lang.AbstractStringBuilder: int codePointCount(int,int)>(i0, i1);
        return $i2;
    }

    public synchronized int offsetByCodePoints(int, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1, $i2;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i2 = specialinvoke r0.<java.lang.AbstractStringBuilder: int offsetByCodePoints(int,int)>(i0, i1);
        return $i2;
    }

    public synchronized void getChars(int, int, char[], int)
    {
        java.lang.StringBuffer r0;
        int i0, i1, i2;
        char[] r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: char[];
        i2 := @parameter3: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: void getChars(int,int,char[],int)>(i0, i1, r1, i2);
        return;
    }

    public synchronized void setCharAt(int, char)
    {
        java.lang.StringBuffer r0;
        int i0, $i2;
        char c1;
        java.lang.StringIndexOutOfBoundsException $r1;
        char[] $r2;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        c1 := @parameter1: char;
        if i0 < 0 goto label0;

        $i2 = r0.<java.lang.StringBuffer: int count>;
        if i0 < $i2 goto label1;

     label0:
        $r1 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i0);
        throw $r1;

     label1:
        $r2 = r0.<java.lang.StringBuffer: char[] value>;
        $r2[i0] = c1;
        return;
    }

    public synchronized java.lang.StringBuffer append(java.lang.Object)
    {
        java.lang.StringBuffer r0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.lang.Object;
        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>($r2);
        return r0;
    }

    public synchronized java.lang.StringBuffer append(java.lang.String)
    {
        java.lang.StringBuffer r0;
        java.lang.String r1;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>(r1);
        return r0;
    }

    public synchronized java.lang.StringBuffer append(java.lang.StringBuffer)
    {
        java.lang.StringBuffer r0, r1;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.lang.StringBuffer;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.StringBuffer)>(r1);
        return r0;
    }

    public java.lang.StringBuffer append(java.lang.CharSequence)
    {
        java.lang.StringBuffer r0, $r3, $r4, $r5, $r6;
        java.lang.CharSequence r1;
        boolean $z0, $z1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.lang.CharSequence;
        if r1 != null goto label0;

        r1 = "null";

     label0:
        $z0 = r1 instanceof java.lang.String;
        if $z0 == 0 goto label1;

        $r2 = (java.lang.String) r1;
        $r3 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        return $r3;

     label1:
        $z1 = r1 instanceof java.lang.StringBuffer;
        if $z1 == 0 goto label2;

        $r4 = (java.lang.StringBuffer) r1;
        $r5 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>($r4);
        return $r5;

     label2:
        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();
        $r6 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>(r1, 0, $i0);
        return $r6;
    }

    public synchronized java.lang.StringBuffer append(java.lang.CharSequence, int, int)
    {
        java.lang.StringBuffer r0;
        java.lang.CharSequence r1;
        int i0, i1;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.lang.CharSequence;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence,int,int)>(r1, i0, i1);
        return r0;
    }

    public synchronized java.lang.StringBuffer append(char[])
    {
        java.lang.StringBuffer r0;
        char[] r1;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: char[];
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(char[])>(r1);
        return r0;
    }

    public synchronized java.lang.StringBuffer append(char[], int, int)
    {
        java.lang.StringBuffer r0;
        char[] r1;
        int i0, i1;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(char[],int,int)>(r1, i0, i1);
        return r0;
    }

    public synchronized java.lang.StringBuffer append(boolean)
    {
        java.lang.StringBuffer r0;
        boolean z0;

        r0 := @this: java.lang.StringBuffer;
        z0 := @parameter0: boolean;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(boolean)>(z0);
        return r0;
    }

    public synchronized java.lang.StringBuffer append(char)
    {
        java.lang.StringBuffer r0;
        char c0;

        r0 := @this: java.lang.StringBuffer;
        c0 := @parameter0: char;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(char)>(c0);
        return r0;
    }

    public synchronized java.lang.StringBuffer append(int)
    {
        java.lang.StringBuffer r0;
        int i0;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(int)>(i0);
        return r0;
    }

    public synchronized java.lang.StringBuffer appendCodePoint(int)
    {
        java.lang.StringBuffer r0;
        int i0;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder appendCodePoint(int)>(i0);
        return r0;
    }

    public synchronized java.lang.StringBuffer append(long)
    {
        java.lang.StringBuffer r0;
        long l0;

        r0 := @this: java.lang.StringBuffer;
        l0 := @parameter0: long;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(long)>(l0);
        return r0;
    }

    public synchronized java.lang.StringBuffer append(float)
    {
        java.lang.StringBuffer r0;
        float f0;

        r0 := @this: java.lang.StringBuffer;
        f0 := @parameter0: float;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(float)>(f0);
        return r0;
    }

    public synchronized java.lang.StringBuffer append(double)
    {
        java.lang.StringBuffer r0;
        double d0;

        r0 := @this: java.lang.StringBuffer;
        d0 := @parameter0: double;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(double)>(d0);
        return r0;
    }

    public synchronized java.lang.StringBuffer delete(int, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder delete(int,int)>(i0, i1);
        return r0;
    }

    public synchronized java.lang.StringBuffer deleteCharAt(int)
    {
        java.lang.StringBuffer r0;
        int i0;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder deleteCharAt(int)>(i0);
        return r0;
    }

    public synchronized java.lang.StringBuffer replace(int, int, java.lang.String)
    {
        java.lang.StringBuffer r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.lang.String;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder replace(int,int,java.lang.String)>(i0, i1, r1);
        return r0;
    }

    public synchronized java.lang.String substring(int)
    {
        java.lang.StringBuffer r0;
        int i0, $i1;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        $i1 = r0.<java.lang.StringBuffer: int count>;
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.String substring(int,int)>(i0, $i1);
        return $r1;
    }

    public synchronized java.lang.CharSequence subSequence(int, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)>(i0, i1);
        return $r1;
    }

    public synchronized java.lang.String substring(int, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)>(i0, i1);
        return $r1;
    }

    public synchronized java.lang.StringBuffer insert(int, char[], int, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1, i2;
        char[] r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        r1 := @parameter1: char[];
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder insert(int,char[],int,int)>(i0, r1, i1, i2);
        return r0;
    }

    public synchronized java.lang.StringBuffer insert(int, java.lang.Object)
    {
        java.lang.StringBuffer r0;
        int i0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder insert(int,java.lang.String)>(i0, $r2);
        return r0;
    }

    public synchronized java.lang.StringBuffer insert(int, java.lang.String)
    {
        java.lang.StringBuffer r0;
        int i0;
        java.lang.String r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder insert(int,java.lang.String)>(i0, r1);
        return r0;
    }

    public synchronized java.lang.StringBuffer insert(int, char[])
    {
        java.lang.StringBuffer r0;
        int i0;
        char[] r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        r1 := @parameter1: char[];
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder insert(int,char[])>(i0, r1);
        return r0;
    }

    public java.lang.StringBuffer insert(int, java.lang.CharSequence)
    {
        java.lang.StringBuffer r0, $r3, $r4;
        int i0, $i1;
        java.lang.CharSequence r1;
        boolean $z0;
        java.lang.String $r2;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.CharSequence;
        if r1 != null goto label0;

        r1 = "null";

     label0:
        $z0 = r1 instanceof java.lang.String;
        if $z0 == 0 goto label1;

        $r2 = (java.lang.String) r1;
        $r3 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(i0, $r2);
        return $r3;

     label1:
        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();
        $r4 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)>(i0, r1, 0, $i1);
        return $r4;
    }

    public synchronized java.lang.StringBuffer insert(int, java.lang.CharSequence, int, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1, i2;
        java.lang.CharSequence r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.CharSequence;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder insert(int,java.lang.CharSequence,int,int)>(i0, r1, i1, i2);
        return r0;
    }

    public java.lang.StringBuffer insert(int, boolean)
    {
        java.lang.StringBuffer r0, $r2;
        int i0;
        boolean z0;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        z0 := @parameter1: boolean;
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(z0);
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(i0, $r1);
        return $r2;
    }

    public synchronized java.lang.StringBuffer insert(int, char)
    {
        java.lang.StringBuffer r0;
        int i0;
        char c1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        c1 := @parameter1: char;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder insert(int,char)>(i0, c1);
        return r0;
    }

    public java.lang.StringBuffer insert(int, int)
    {
        java.lang.StringBuffer r0, $r2;
        int i0, i1;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(i0, $r1);
        return $r2;
    }

    public java.lang.StringBuffer insert(int, long)
    {
        java.lang.StringBuffer r0, $r2;
        int i0;
        long l1;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        l1 := @parameter1: long;
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(i0, $r1);
        return $r2;
    }

    public java.lang.StringBuffer insert(int, float)
    {
        java.lang.StringBuffer r0, $r2;
        int i0;
        float f0;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(f0);
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(i0, $r1);
        return $r2;
    }

    public java.lang.StringBuffer insert(int, double)
    {
        java.lang.StringBuffer r0, $r2;
        int i0;
        double d0;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        d0 := @parameter1: double;
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0);
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(i0, $r1);
        return $r2;
    }

    public int indexOf(java.lang.String)
    {
        java.lang.StringBuffer r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.lang.String;
        $i0 = virtualinvoke r0.<java.lang.StringBuffer: int indexOf(java.lang.String,int)>(r1, 0);
        return $i0;
    }

    public synchronized int indexOf(java.lang.String, int)
    {
        java.lang.StringBuffer r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3;
        char[] $r2, $r3;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        $r2 = r0.<java.lang.StringBuffer: char[] value>;
        $i1 = r0.<java.lang.StringBuffer: int count>;
        $r3 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();
        $i3 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($r2, 0, $i1, $r3, 0, $i2, i0);
        return $i3;
    }

    public int lastIndexOf(java.lang.String)
    {
        java.lang.StringBuffer r0;
        java.lang.String r1;
        int $i0, $i1;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.lang.String;
        $i0 = r0.<java.lang.StringBuffer: int count>;
        $i1 = virtualinvoke r0.<java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)>(r1, $i0);
        return $i1;
    }

    public synchronized int lastIndexOf(java.lang.String, int)
    {
        java.lang.StringBuffer r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3;
        char[] $r2, $r3;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        $r2 = r0.<java.lang.StringBuffer: char[] value>;
        $i1 = r0.<java.lang.StringBuffer: int count>;
        $r3 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();
        $i3 = staticinvoke <java.lang.String: int lastIndexOf(char[],int,int,char[],int,int,int)>($r2, 0, $i1, $r3, 0, $i2, i0);
        return $i3;
    }

    public synchronized java.lang.StringBuffer reverse()
    {
        java.lang.StringBuffer r0;

        r0 := @this: java.lang.StringBuffer;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder reverse()>();
        return r0;
    }

    public synchronized java.lang.String toString()
    {
        java.lang.StringBuffer r0;
        java.lang.String $r1;
        char[] $r2;
        int $i0;

        r0 := @this: java.lang.StringBuffer;
        $r1 = new java.lang.String;
        $r2 = r0.<java.lang.StringBuffer: char[] value>;
        $i0 = r0.<java.lang.StringBuffer: int count>;
        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, 0, $i0);
        return $r1;
    }

    private synchronized void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.lang.StringBuffer r0;
        java.io.ObjectOutputStream r1;
        java.io.ObjectOutputStream$PutField r2;
        char[] $r3;
        int $i0;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.io.ObjectOutputStream;
        r2 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();
        $r3 = r0.<java.lang.StringBuffer: char[] value>;
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("value", $r3);
        $i0 = r0.<java.lang.StringBuffer: int count>;
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("count", $i0);
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,boolean)>("shared", 0);
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.StringBuffer r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectInputStream$GetField r2;
        java.lang.Object $r3;
        char[] $r4, $r5;
        int $i0;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.io.ObjectInputStream;
        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();
        $r3 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("value", null);
        $r4 = (char[]) $r3;
        $r5 = (char[]) $r4;
        r0.<java.lang.StringBuffer: char[] value> = $r5;
        $i0 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("count", 0);
        r0.<java.lang.StringBuffer: int count> = $i0;
        return;
    }

    public volatile java.lang.AbstractStringBuilder reverse()
    {
        java.lang.StringBuffer r0, $r1;

        r0 := @this: java.lang.StringBuffer;
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer reverse()>();
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, double)
    {
        java.lang.StringBuffer r0, $r1;
        int i0;
        double d0;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        d0 := @parameter1: double;
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)>(i0, d0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, float)
    {
        java.lang.StringBuffer r0, $r1;
        int i0;
        float f0;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)>(i0, f0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, long)
    {
        java.lang.StringBuffer r0, $r1;
        int i0;
        long l1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        l1 := @parameter1: long;
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)>(i0, l1);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, int)
    {
        java.lang.StringBuffer r0, $r1;
        int i0, i1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)>(i0, i1);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, char)
    {
        java.lang.StringBuffer r0, $r1;
        int i0;
        char c1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        c1 := @parameter1: char;
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>(i0, c1);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, boolean)
    {
        java.lang.StringBuffer r0, $r1;
        int i0;
        boolean z0;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        z0 := @parameter1: boolean;
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)>(i0, z0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, java.lang.CharSequence, int, int)
    {
        java.lang.StringBuffer r0, $r2;
        int i0, i1, i2;
        java.lang.CharSequence r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.CharSequence;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)>(i0, r1, i1, i2);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, java.lang.CharSequence)
    {
        java.lang.StringBuffer r0, $r2;
        int i0;
        java.lang.CharSequence r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.CharSequence;
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)>(i0, r1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, char[])
    {
        java.lang.StringBuffer r0, $r2;
        int i0;
        char[] r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        r1 := @parameter1: char[];
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])>(i0, r1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, java.lang.String)
    {
        java.lang.StringBuffer r0, $r2;
        int i0;
        java.lang.String r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(i0, r1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, java.lang.Object)
    {
        java.lang.StringBuffer r0, $r2;
        int i0;
        java.lang.Object r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)>(i0, r1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, char[], int, int)
    {
        java.lang.StringBuffer r0, $r2;
        int i0, i1, i2;
        char[] r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        r1 := @parameter1: char[];
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)>(i0, r1, i1, i2);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder replace(int, int, java.lang.String)
    {
        java.lang.StringBuffer r0, $r2;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.lang.String;
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>(i0, i1, r1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder deleteCharAt(int)
    {
        java.lang.StringBuffer r0, $r1;
        int i0;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>(i0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder appendCodePoint(int)
    {
        java.lang.StringBuffer r0, $r1;
        int i0;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)>(i0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder delete(int, int)
    {
        java.lang.StringBuffer r0, $r1;
        int i0, i1;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>(i0, i1);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder append(double)
    {
        java.lang.StringBuffer r0, $r1;
        double d0;

        r0 := @this: java.lang.StringBuffer;
        d0 := @parameter0: double;
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(d0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder append(float)
    {
        java.lang.StringBuffer r0, $r1;
        float f0;

        r0 := @this: java.lang.StringBuffer;
        f0 := @parameter0: float;
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(f0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder append(long)
    {
        java.lang.StringBuffer r0, $r1;
        long l0;

        r0 := @this: java.lang.StringBuffer;
        l0 := @parameter0: long;
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder append(int)
    {
        java.lang.StringBuffer r0, $r1;
        int i0;

        r0 := @this: java.lang.StringBuffer;
        i0 := @parameter0: int;
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder append(char)
    {
        java.lang.StringBuffer r0, $r1;
        char c0;

        r0 := @this: java.lang.StringBuffer;
        c0 := @parameter0: char;
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder append(boolean)
    {
        java.lang.StringBuffer r0, $r1;
        boolean z0;

        r0 := @this: java.lang.StringBuffer;
        z0 := @parameter0: boolean;
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder append(char[], int, int)
    {
        java.lang.StringBuffer r0, $r2;
        char[] r1;
        int i0, i1;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r1, i0, i1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder append(char[])
    {
        java.lang.StringBuffer r0, $r2;
        char[] r1;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: char[];
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>(r1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder append(java.lang.CharSequence, int, int)
    {
        java.lang.StringBuffer r0, $r2;
        java.lang.CharSequence r1;
        int i0, i1;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.lang.CharSequence;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>(r1, i0, i1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder append(java.lang.CharSequence)
    {
        java.lang.StringBuffer r0, $r2;
        java.lang.CharSequence r1;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.lang.CharSequence;
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder append(java.lang.StringBuffer)
    {
        java.lang.StringBuffer r0, r1, $r2;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.lang.StringBuffer;
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(r1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder append(java.lang.String)
    {
        java.lang.StringBuffer r0, $r2;
        java.lang.String r1;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder append(java.lang.Object)
    {
        java.lang.StringBuffer r0, $r2;
        java.lang.Object r1;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);
        return $r2;
    }

    public volatile java.lang.Appendable append(char) throws java.io.IOException
    {
        java.lang.StringBuffer r0, $r1;
        char c0;

        r0 := @this: java.lang.StringBuffer;
        c0 := @parameter0: char;
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);
        return $r1;
    }

    public volatile java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException
    {
        java.lang.StringBuffer r0, $r2;
        java.lang.CharSequence r1;
        int i0, i1;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.lang.CharSequence;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>(r1, i0, i1);
        return $r2;
    }

    public volatile java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException
    {
        java.lang.StringBuffer r0, $r2;
        java.lang.CharSequence r1;

        r0 := @this: java.lang.StringBuffer;
        r1 := @parameter0: java.lang.CharSequence;
        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r1);
        return $r2;
    }

    static void <clinit>()
    {
        java.io.ObjectStreamField $r0, $r2, $r4;
        java.io.ObjectStreamField[] $r1;
        java.lang.Class $r3, $r5;

        $r1 = newarray (java.io.ObjectStreamField)[3];
        $r0 = new java.io.ObjectStreamField;
        specialinvoke $r0.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("value", class "[C");
        $r1[0] = $r0;
        $r2 = new java.io.ObjectStreamField;
        $r3 = <java.lang.Integer: java.lang.Class TYPE>;
        specialinvoke $r2.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("count", $r3);
        $r1[1] = $r2;
        $r4 = new java.io.ObjectStreamField;
        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;
        specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("shared", $r5);
        $r1[2] = $r4;
        <java.lang.StringBuffer: java.io.ObjectStreamField[] serialPersistentFields> = $r1;
        return;
    }
}
