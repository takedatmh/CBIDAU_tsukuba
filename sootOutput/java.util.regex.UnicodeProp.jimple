abstract enum class java.util.regex.UnicodeProp extends java.lang.Enum
{
    public static final enum java.util.regex.UnicodeProp ALPHABETIC;
    public static final enum java.util.regex.UnicodeProp LETTER;
    public static final enum java.util.regex.UnicodeProp IDEOGRAPHIC;
    public static final enum java.util.regex.UnicodeProp LOWERCASE;
    public static final enum java.util.regex.UnicodeProp UPPERCASE;
    public static final enum java.util.regex.UnicodeProp TITLECASE;
    public static final enum java.util.regex.UnicodeProp WHITE_SPACE;
    public static final enum java.util.regex.UnicodeProp CONTROL;
    public static final enum java.util.regex.UnicodeProp PUNCTUATION;
    public static final enum java.util.regex.UnicodeProp HEX_DIGIT;
    public static final enum java.util.regex.UnicodeProp ASSIGNED;
    public static final enum java.util.regex.UnicodeProp NONCHARACTER_CODE_POINT;
    public static final enum java.util.regex.UnicodeProp DIGIT;
    public static final enum java.util.regex.UnicodeProp ALNUM;
    public static final enum java.util.regex.UnicodeProp BLANK;
    public static final enum java.util.regex.UnicodeProp GRAPH;
    public static final enum java.util.regex.UnicodeProp PRINT;
    public static final enum java.util.regex.UnicodeProp WORD;
    private static final java.util.HashMap posix;
    private static final java.util.HashMap aliases;
    private static final java.util.regex.UnicodeProp[] $VALUES;

    public static java.util.regex.UnicodeProp[] values()
    {
        java.util.regex.UnicodeProp[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp[] $VALUES>;
        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();
        $r2 = (java.util.regex.UnicodeProp[]) $r1;
        return $r2;
    }

    public static java.util.regex.UnicodeProp valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        java.util.regex.UnicodeProp $r2;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "java/util/regex/UnicodeProp", r0);
        $r2 = (java.util.regex.UnicodeProp) $r1;
        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        java.util.regex.UnicodeProp r0;
        java.lang.String r1;
        int i0;

        r0 := @this: java.util.regex.UnicodeProp;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);
        return;
    }

    public static java.util.regex.UnicodeProp forName(java.lang.String)
    {
        java.lang.String r0, r2, r4;
        java.util.Locale $r1;
        java.lang.IllegalArgumentException r3, $r8;
        java.util.HashMap $r5;
        java.lang.Object $r6;
        java.util.regex.UnicodeProp $r7;

        r0 := @parameter0: java.lang.String;
        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;
        r4 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r1);
        $r5 = <java.util.regex.UnicodeProp: java.util.HashMap aliases>;
        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);
        r2 = (java.lang.String) $r6;
        if r2 == null goto label0;

        r4 = r2;

     label0:
        $r7 = staticinvoke <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp valueOf(java.lang.String)>(r4);

     label1:
        return $r7;

     label2:
        $r8 := @caughtexception;
        r3 = $r8;
        return null;

        catch java.lang.IllegalArgumentException from label0 to label1 with label2;
    }

    public static java.util.regex.UnicodeProp forPOSIXName(java.lang.String)
    {
        java.lang.String r0, $r3, r5;
        java.util.HashMap $r1;
        java.util.Locale $r2;
        java.lang.Object $r4;
        java.util.regex.UnicodeProp $r6;

        r0 := @parameter0: java.lang.String;
        $r1 = <java.util.regex.UnicodeProp: java.util.HashMap posix>;
        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);
        $r4 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);
        r5 = (java.lang.String) $r4;
        if r5 != null goto label0;

        return null;

     label0:
        $r6 = staticinvoke <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp valueOf(java.lang.String)>(r5);
        return $r6;
    }

    public abstract boolean is(int);

    void <init>(java.lang.String, int, java.util.regex.UnicodeProp$1)
    {
        java.util.regex.UnicodeProp r0;
        java.lang.String r1;
        int i0;
        java.util.regex.UnicodeProp$1 r2;

        r0 := @this: java.util.regex.UnicodeProp;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r2 := @parameter2: java.util.regex.UnicodeProp$1;
        specialinvoke r0.<java.util.regex.UnicodeProp: void <init>(java.lang.String,int)>(r1, i0);
        return;
    }

    static void <clinit>()
    {
        java.util.regex.UnicodeProp$1 $r0;
        java.util.regex.UnicodeProp$2 $r1;
        java.util.regex.UnicodeProp$3 $r2;
        java.util.regex.UnicodeProp$4 $r3;
        java.util.regex.UnicodeProp$5 $r4;
        java.util.regex.UnicodeProp$6 $r5;
        java.util.regex.UnicodeProp$7 $r6;
        java.util.regex.UnicodeProp$8 $r7;
        java.util.regex.UnicodeProp$9 $r8;
        java.util.regex.UnicodeProp$10 $r9;
        java.util.regex.UnicodeProp$11 $r10;
        java.util.regex.UnicodeProp$12 $r11;
        java.util.regex.UnicodeProp$13 $r12;
        java.util.regex.UnicodeProp$14 $r13;
        java.util.regex.UnicodeProp$15 $r14;
        java.util.regex.UnicodeProp$16 $r15;
        java.util.regex.UnicodeProp$17 $r16;
        java.util.regex.UnicodeProp$18 $r17;
        java.util.regex.UnicodeProp[] $r18;
        java.util.regex.UnicodeProp $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36;
        java.util.HashMap $r37, $r38, $r39, $r41, $r43, $r45, $r47, $r49, $r51, $r53, $r55, $r57, $r59, $r61, $r63, $r65, $r67;

        $r0 = new java.util.regex.UnicodeProp$1;
        specialinvoke $r0.<java.util.regex.UnicodeProp$1: void <init>(java.lang.String,int)>("ALPHABETIC", 0);
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp ALPHABETIC> = $r0;
        $r1 = new java.util.regex.UnicodeProp$2;
        specialinvoke $r1.<java.util.regex.UnicodeProp$2: void <init>(java.lang.String,int)>("LETTER", 1);
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp LETTER> = $r1;
        $r2 = new java.util.regex.UnicodeProp$3;
        specialinvoke $r2.<java.util.regex.UnicodeProp$3: void <init>(java.lang.String,int)>("IDEOGRAPHIC", 2);
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp IDEOGRAPHIC> = $r2;
        $r3 = new java.util.regex.UnicodeProp$4;
        specialinvoke $r3.<java.util.regex.UnicodeProp$4: void <init>(java.lang.String,int)>("LOWERCASE", 3);
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp LOWERCASE> = $r3;
        $r4 = new java.util.regex.UnicodeProp$5;
        specialinvoke $r4.<java.util.regex.UnicodeProp$5: void <init>(java.lang.String,int)>("UPPERCASE", 4);
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp UPPERCASE> = $r4;
        $r5 = new java.util.regex.UnicodeProp$6;
        specialinvoke $r5.<java.util.regex.UnicodeProp$6: void <init>(java.lang.String,int)>("TITLECASE", 5);
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp TITLECASE> = $r5;
        $r6 = new java.util.regex.UnicodeProp$7;
        specialinvoke $r6.<java.util.regex.UnicodeProp$7: void <init>(java.lang.String,int)>("WHITE_SPACE", 6);
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp WHITE_SPACE> = $r6;
        $r7 = new java.util.regex.UnicodeProp$8;
        specialinvoke $r7.<java.util.regex.UnicodeProp$8: void <init>(java.lang.String,int)>("CONTROL", 7);
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp CONTROL> = $r7;
        $r8 = new java.util.regex.UnicodeProp$9;
        specialinvoke $r8.<java.util.regex.UnicodeProp$9: void <init>(java.lang.String,int)>("PUNCTUATION", 8);
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp PUNCTUATION> = $r8;
        $r9 = new java.util.regex.UnicodeProp$10;
        specialinvoke $r9.<java.util.regex.UnicodeProp$10: void <init>(java.lang.String,int)>("HEX_DIGIT", 9);
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp HEX_DIGIT> = $r9;
        $r10 = new java.util.regex.UnicodeProp$11;
        specialinvoke $r10.<java.util.regex.UnicodeProp$11: void <init>(java.lang.String,int)>("ASSIGNED", 10);
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp ASSIGNED> = $r10;
        $r11 = new java.util.regex.UnicodeProp$12;
        specialinvoke $r11.<java.util.regex.UnicodeProp$12: void <init>(java.lang.String,int)>("NONCHARACTER_CODE_POINT", 11);
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp NONCHARACTER_CODE_POINT> = $r11;
        $r12 = new java.util.regex.UnicodeProp$13;
        specialinvoke $r12.<java.util.regex.UnicodeProp$13: void <init>(java.lang.String,int)>("DIGIT", 12);
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp DIGIT> = $r12;
        $r13 = new java.util.regex.UnicodeProp$14;
        specialinvoke $r13.<java.util.regex.UnicodeProp$14: void <init>(java.lang.String,int)>("ALNUM", 13);
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp ALNUM> = $r13;
        $r14 = new java.util.regex.UnicodeProp$15;
        specialinvoke $r14.<java.util.regex.UnicodeProp$15: void <init>(java.lang.String,int)>("BLANK", 14);
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp BLANK> = $r14;
        $r15 = new java.util.regex.UnicodeProp$16;
        specialinvoke $r15.<java.util.regex.UnicodeProp$16: void <init>(java.lang.String,int)>("GRAPH", 15);
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp GRAPH> = $r15;
        $r16 = new java.util.regex.UnicodeProp$17;
        specialinvoke $r16.<java.util.regex.UnicodeProp$17: void <init>(java.lang.String,int)>("PRINT", 16);
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp PRINT> = $r16;
        $r17 = new java.util.regex.UnicodeProp$18;
        specialinvoke $r17.<java.util.regex.UnicodeProp$18: void <init>(java.lang.String,int)>("WORD", 17);
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp WORD> = $r17;
        $r18 = newarray (java.util.regex.UnicodeProp)[18];
        $r19 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp ALPHABETIC>;
        $r18[0] = $r19;
        $r20 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp LETTER>;
        $r18[1] = $r20;
        $r21 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp IDEOGRAPHIC>;
        $r18[2] = $r21;
        $r22 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp LOWERCASE>;
        $r18[3] = $r22;
        $r23 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp UPPERCASE>;
        $r18[4] = $r23;
        $r24 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp TITLECASE>;
        $r18[5] = $r24;
        $r25 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp WHITE_SPACE>;
        $r18[6] = $r25;
        $r26 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp CONTROL>;
        $r18[7] = $r26;
        $r27 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp PUNCTUATION>;
        $r18[8] = $r27;
        $r28 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp HEX_DIGIT>;
        $r18[9] = $r28;
        $r29 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp ASSIGNED>;
        $r18[10] = $r29;
        $r30 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp NONCHARACTER_CODE_POINT>;
        $r18[11] = $r30;
        $r31 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp DIGIT>;
        $r18[12] = $r31;
        $r32 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp ALNUM>;
        $r18[13] = $r32;
        $r33 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp BLANK>;
        $r18[14] = $r33;
        $r34 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp GRAPH>;
        $r18[15] = $r34;
        $r35 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp PRINT>;
        $r18[16] = $r35;
        $r36 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp WORD>;
        $r18[17] = $r36;
        <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp[] $VALUES> = $r18;
        $r37 = new java.util.HashMap;
        specialinvoke $r37.<java.util.HashMap: void <init>()>();
        <java.util.regex.UnicodeProp: java.util.HashMap posix> = $r37;
        $r38 = new java.util.HashMap;
        specialinvoke $r38.<java.util.HashMap: void <init>()>();
        <java.util.regex.UnicodeProp: java.util.HashMap aliases> = $r38;
        $r39 = <java.util.regex.UnicodeProp: java.util.HashMap posix>;
        virtualinvoke $r39.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("ALPHA", "ALPHABETIC");
        $r41 = <java.util.regex.UnicodeProp: java.util.HashMap posix>;
        virtualinvoke $r41.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("LOWER", "LOWERCASE");
        $r43 = <java.util.regex.UnicodeProp: java.util.HashMap posix>;
        virtualinvoke $r43.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("UPPER", "UPPERCASE");
        $r45 = <java.util.regex.UnicodeProp: java.util.HashMap posix>;
        virtualinvoke $r45.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("SPACE", "WHITE_SPACE");
        $r47 = <java.util.regex.UnicodeProp: java.util.HashMap posix>;
        virtualinvoke $r47.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("PUNCT", "PUNCTUATION");
        $r49 = <java.util.regex.UnicodeProp: java.util.HashMap posix>;
        virtualinvoke $r49.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("XDIGIT", "HEX_DIGIT");
        $r51 = <java.util.regex.UnicodeProp: java.util.HashMap posix>;
        virtualinvoke $r51.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("ALNUM", "ALNUM");
        $r53 = <java.util.regex.UnicodeProp: java.util.HashMap posix>;
        virtualinvoke $r53.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("CNTRL", "CONTROL");
        $r55 = <java.util.regex.UnicodeProp: java.util.HashMap posix>;
        virtualinvoke $r55.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("DIGIT", "DIGIT");
        $r57 = <java.util.regex.UnicodeProp: java.util.HashMap posix>;
        virtualinvoke $r57.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("BLANK", "BLANK");
        $r59 = <java.util.regex.UnicodeProp: java.util.HashMap posix>;
        virtualinvoke $r59.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("GRAPH", "GRAPH");
        $r61 = <java.util.regex.UnicodeProp: java.util.HashMap posix>;
        virtualinvoke $r61.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("PRINT", "PRINT");
        $r63 = <java.util.regex.UnicodeProp: java.util.HashMap aliases>;
        virtualinvoke $r63.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("WHITESPACE", "WHITE_SPACE");
        $r65 = <java.util.regex.UnicodeProp: java.util.HashMap aliases>;
        virtualinvoke $r65.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("HEXDIGIT", "HEX_DIGIT");
        $r67 = <java.util.regex.UnicodeProp: java.util.HashMap aliases>;
        virtualinvoke $r67.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("NONCHARACTERCODEPOINT", "NONCHARACTER_CODE_POINT");
        return;
    }
}
