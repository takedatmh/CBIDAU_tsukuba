public class sun.misc.URLClassPath extends java.lang.Object
{
    static final java.lang.String USER_AGENT_JAVA_VERSION;
    static final java.lang.String JAVA_VERSION;
    private static final boolean DEBUG;
    private static final boolean DISABLE_JAR_CHECKING;
    private java.util.ArrayList path;
    java.util.Stack urls;
    java.util.ArrayList loaders;
    java.util.HashMap lmap;
    private java.net.URLStreamHandler jarHandler;
    private boolean closed;

    public void <init>(java.net.URL[], java.net.URLStreamHandlerFactory)
    {
        sun.misc.URLClassPath r0;
        java.net.URL[] r1;
        java.net.URLStreamHandlerFactory r2;
        java.util.ArrayList $r3, $r5, $r7;
        int i0, $i1;
        java.util.Stack $r4;
        java.util.HashMap $r6;
        java.net.URL $r8;
        java.net.URLStreamHandler $r9;

        r0 := @this: sun.misc.URLClassPath;
        r1 := @parameter0: java.net.URL[];
        r2 := @parameter1: java.net.URLStreamHandlerFactory;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r3 = new java.util.ArrayList;
        specialinvoke $r3.<java.util.ArrayList: void <init>()>();
        r0.<sun.misc.URLClassPath: java.util.ArrayList path> = $r3;
        $r4 = new java.util.Stack;
        specialinvoke $r4.<java.util.Stack: void <init>()>();
        r0.<sun.misc.URLClassPath: java.util.Stack urls> = $r4;
        $r5 = new java.util.ArrayList;
        specialinvoke $r5.<java.util.ArrayList: void <init>()>();
        r0.<sun.misc.URLClassPath: java.util.ArrayList loaders> = $r5;
        $r6 = new java.util.HashMap;
        specialinvoke $r6.<java.util.HashMap: void <init>()>();
        r0.<sun.misc.URLClassPath: java.util.HashMap lmap> = $r6;
        r0.<sun.misc.URLClassPath: boolean closed> = 0;
        i0 = 0;

     label0:
        $i1 = lengthof r1;
        if i0 >= $i1 goto label1;

        $r7 = r0.<sun.misc.URLClassPath: java.util.ArrayList path>;
        $r8 = r1[i0];
        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);
        i0 = i0 + 1;
        goto label0;

     label1:
        specialinvoke r0.<sun.misc.URLClassPath: void push(java.net.URL[])>(r1);
        if r2 == null goto label2;

        $r9 = interfaceinvoke r2.<java.net.URLStreamHandlerFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>("jar");
        r0.<sun.misc.URLClassPath: java.net.URLStreamHandler jarHandler> = $r9;

     label2:
        return;
    }

    public void <init>(java.net.URL[])
    {
        sun.misc.URLClassPath r0;
        java.net.URL[] r1;

        r0 := @this: sun.misc.URLClassPath;
        r1 := @parameter0: java.net.URL[];
        specialinvoke r0.<sun.misc.URLClassPath: void <init>(java.net.URL[],java.net.URLStreamHandlerFactory)>(r1, null);
        return;
    }

    public synchronized java.util.List closeLoaders()
    {
        sun.misc.URLClassPath r0;
        java.util.LinkedList r1, $r6;
        java.util.Iterator r2;
        sun.misc.URLClassPath$Loader r3;
        java.io.IOException r4, $r9;
        boolean $z0, $z1;
        java.util.List $r5;
        java.util.ArrayList $r7;
        java.lang.Object $r8;

        r0 := @this: sun.misc.URLClassPath;
        $z0 = r0.<sun.misc.URLClassPath: boolean closed>;
        if $z0 == 0 goto label0;

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
        return $r5;

     label0:
        $r6 = new java.util.LinkedList;
        specialinvoke $r6.<java.util.LinkedList: void <init>()>();
        r1 = $r6;
        $r7 = r0.<sun.misc.URLClassPath: java.util.ArrayList loaders>;
        r2 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label6;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (sun.misc.URLClassPath$Loader) $r8;

     label2:
        virtualinvoke r3.<sun.misc.URLClassPath$Loader: void close()>();

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;
        r4 = $r9;
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r4);

     label5:
        goto label1;

     label6:
        r0.<sun.misc.URLClassPath: boolean closed> = 1;
        return r1;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public synchronized void addURL(java.net.URL)
    {
        sun.misc.URLClassPath r0;
        java.net.URL r1;
        java.util.Stack r2, $r4, $r6;
        java.lang.Throwable r3, $r8;
        boolean $z0, $z1;
        java.util.ArrayList $r5, $r7;

        r0 := @this: sun.misc.URLClassPath;
        r1 := @parameter0: java.net.URL;
        $z0 = r0.<sun.misc.URLClassPath: boolean closed>;
        if $z0 == 0 goto label0;

        return;

     label0:
        $r4 = r0.<sun.misc.URLClassPath: java.util.Stack urls>;
        r2 = $r4;
        entermonitor $r4;

     label1:
        if r1 == null goto label2;

        $r5 = r0.<sun.misc.URLClassPath: java.util.ArrayList path>;
        $z1 = virtualinvoke $r5.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);
        if $z1 == 0 goto label4;

     label2:
        exitmonitor r2;

     label3:
        return;

     label4:
        $r6 = r0.<sun.misc.URLClassPath: java.util.Stack urls>;
        virtualinvoke $r6.<java.util.Stack: void add(int,java.lang.Object)>(0, r1);
        $r7 = r0.<sun.misc.URLClassPath: java.util.ArrayList path>;
        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);
        exitmonitor r2;

     label5:
        goto label9;

     label6:
        $r8 := @caughtexception;

     label7:
        r3 = $r8;
        exitmonitor r2;

     label8:
        throw r3;

     label9:
        return;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.net.URL[] getURLs()
    {
        sun.misc.URLClassPath r0;
        java.util.Stack r1, $r3;
        java.lang.Throwable r2, $r9;
        java.util.ArrayList $r4, $r5;
        int $i0;
        java.net.URL[] $r6, $r8;
        java.lang.Object[] $r7;

        r0 := @this: sun.misc.URLClassPath;
        $r3 = r0.<sun.misc.URLClassPath: java.util.Stack urls>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = r0.<sun.misc.URLClassPath: java.util.ArrayList path>;
        $r5 = r0.<sun.misc.URLClassPath: java.util.ArrayList path>;
        $i0 = virtualinvoke $r5.<java.util.ArrayList: int size()>();
        $r6 = newarray (java.net.URL)[$i0];
        $r7 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6);
        $r8 = (java.net.URL[]) $r7;
        exitmonitor r1;

     label1:
        return $r8;

     label2:
        $r9 := @caughtexception;

     label3:
        r2 = $r9;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.net.URL findResource(java.lang.String, boolean)
    {
        sun.misc.URLClassPath r0;
        java.lang.String r1;
        boolean z0;
        int i0;
        sun.misc.URLClassPath$Loader r2, $r4;
        java.net.URL r3;

        r0 := @this: sun.misc.URLClassPath;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        i0 = 0;

     label0:
        $r4 = specialinvoke r0.<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>(i0);
        r2 = $r4;
        if $r4 == null goto label2;

        r3 = virtualinvoke r2.<sun.misc.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>(r1, z0);
        if r3 == null goto label1;

        return r3;

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        return null;
    }

    public sun.misc.Resource getResource(java.lang.String, boolean)
    {
        sun.misc.URLClassPath r0;
        java.lang.String r1, $r9;
        boolean z0, $z1;
        java.lang.StringBuilder $r2, $r6, $r7, $r8;
        int i0;
        sun.misc.URLClassPath$Loader r3, $r10;
        sun.misc.Resource r4;
        java.io.PrintStream $r5;

        r0 := @this: sun.misc.URLClassPath;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        $z1 = <sun.misc.URLClassPath: boolean DEBUG>;
        if $z1 == 0 goto label0;

        $r5 = <java.lang.System: java.io.PrintStream err>;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("URLClassPath.getResource(\"");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\")");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label0:
        i0 = 0;

     label1:
        $r10 = specialinvoke r0.<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>(i0);
        r3 = $r10;
        if $r10 == null goto label3;

        r4 = virtualinvoke r3.<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>(r1, z0);
        if r4 == null goto label2;

        return r4;

     label2:
        i0 = i0 + 1;
        goto label1;

     label3:
        return null;
    }

    public java.util.Enumeration findResources(java.lang.String, boolean)
    {
        sun.misc.URLClassPath r0;
        java.lang.String r1;
        boolean z0;
        sun.misc.URLClassPath$1 $r2;

        r0 := @this: sun.misc.URLClassPath;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        $r2 = new sun.misc.URLClassPath$1;
        specialinvoke $r2.<sun.misc.URLClassPath$1: void <init>(sun.misc.URLClassPath,java.lang.String,boolean)>(r0, r1, z0);
        return $r2;
    }

    public sun.misc.Resource getResource(java.lang.String)
    {
        sun.misc.URLClassPath r0;
        java.lang.String r1;
        sun.misc.Resource $r2;

        r0 := @this: sun.misc.URLClassPath;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String,boolean)>(r1, 1);
        return $r2;
    }

    public java.util.Enumeration getResources(java.lang.String, boolean)
    {
        sun.misc.URLClassPath r0;
        java.lang.String r1;
        boolean z0;
        sun.misc.URLClassPath$2 $r2;

        r0 := @this: sun.misc.URLClassPath;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        $r2 = new sun.misc.URLClassPath$2;
        specialinvoke $r2.<sun.misc.URLClassPath$2: void <init>(sun.misc.URLClassPath,java.lang.String,boolean)>(r0, r1, z0);
        return $r2;
    }

    public java.util.Enumeration getResources(java.lang.String)
    {
        sun.misc.URLClassPath r0;
        java.lang.String r1;
        java.util.Enumeration $r2;

        r0 := @this: sun.misc.URLClassPath;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<sun.misc.URLClassPath: java.util.Enumeration getResources(java.lang.String,boolean)>(r1, 1);
        return $r2;
    }

    private synchronized sun.misc.URLClassPath$Loader getLoader(int)
    {
        sun.misc.URLClassPath r0;
        int i0, $i1, $i2;
        java.util.Stack r1, $r6, $r7, $r8;
        java.net.URL r2;
        java.lang.Throwable r3, $r10;
        java.net.URL[] r4;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r5, $r16, $r19;
        null_type $n0;
        java.lang.Object $r9, $r20;
        java.lang.String r11;
        java.util.HashMap $r12, $r17;
        sun.misc.URLClassPath$Loader r13, $r21;
        java.io.IOException $r14, r15;

        r0 := @this: sun.misc.URLClassPath;
        i0 := @parameter0: int;
        $z0 = r0.<sun.misc.URLClassPath: boolean closed>;
        if $z0 == 0 goto label0;

        return null;

     label0:
        $r5 = r0.<sun.misc.URLClassPath: java.util.ArrayList loaders>;
        $i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();
        $i2 = i0 + 1;
        if $i1 >= $i2 goto label13;

        $r6 = r0.<sun.misc.URLClassPath: java.util.Stack urls>;
        r1 = $r6;
        entermonitor $r6;

     label1:
        $r7 = r0.<sun.misc.URLClassPath: java.util.Stack urls>;
        $z1 = virtualinvoke $r7.<java.util.Stack: boolean empty()>();
        if $z1 == 0 goto label3;

        $n0 = null;
        exitmonitor r1;

     label2:
        return $n0;

     label3:
        $r8 = r0.<sun.misc.URLClassPath: java.util.Stack urls>;
        $r9 = virtualinvoke $r8.<java.util.Stack: java.lang.Object pop()>();
        r2 = (java.net.URL) $r9;
        exitmonitor r1;

     label4:
        goto label8;

     label5:
        $r10 := @caughtexception;

     label6:
        r3 = $r10;
        exitmonitor r1;

     label7:
        throw r3;

     label8:
        r11 = staticinvoke <sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>(r2);
        $r12 = r0.<sun.misc.URLClassPath: java.util.HashMap lmap>;
        $z2 = virtualinvoke $r12.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r11);
        if $z2 == 0 goto label9;

        goto label0;

     label9:
        r13 = specialinvoke r0.<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(java.net.URL)>(r2);
        r4 = virtualinvoke r13.<sun.misc.URLClassPath$Loader: java.net.URL[] getClassPath()>();
        if r4 == null goto label10;

        specialinvoke r0.<sun.misc.URLClassPath: void push(java.net.URL[])>(r4);

     label10:
        goto label12;

     label11:
        $r14 := @caughtexception;
        r15 = $r14;
        goto label0;

     label12:
        $r16 = r0.<sun.misc.URLClassPath: java.util.ArrayList loaders>;
        virtualinvoke $r16.<java.util.ArrayList: boolean add(java.lang.Object)>(r13);
        $r17 = r0.<sun.misc.URLClassPath: java.util.HashMap lmap>;
        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r13);
        goto label0;

     label13:
        $r19 = r0.<sun.misc.URLClassPath: java.util.ArrayList loaders>;
        $r20 = virtualinvoke $r19.<java.util.ArrayList: java.lang.Object get(int)>(i0);
        $r21 = (sun.misc.URLClassPath$Loader) $r20;
        return $r21;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.io.IOException from label9 to label10 with label11;
    }

    private sun.misc.URLClassPath$Loader getLoader(java.net.URL) throws java.io.IOException
    {
        sun.misc.URLClassPath r0;
        java.net.URL r1;
        sun.misc.URLClassPath$3 $r2;
        java.security.PrivilegedActionException r3, $r6;
        java.lang.Object $r4;
        sun.misc.URLClassPath$Loader $r5;
        java.lang.Exception $r7;
        java.io.IOException $r8;

        r0 := @this: sun.misc.URLClassPath;
        r1 := @parameter0: java.net.URL;

     label0:
        $r2 = new sun.misc.URLClassPath$3;
        specialinvoke $r2.<sun.misc.URLClassPath$3: void <init>(sun.misc.URLClassPath,java.net.URL)>(r0, r1);
        $r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r2);
        $r5 = (sun.misc.URLClassPath$Loader) $r4;

     label1:
        return $r5;

     label2:
        $r6 := @caughtexception;
        r3 = $r6;
        $r7 = virtualinvoke r3.<java.security.PrivilegedActionException: java.lang.Exception getException()>();
        $r8 = (java.io.IOException) $r7;
        throw $r8;

        catch java.security.PrivilegedActionException from label0 to label1 with label2;
    }

    private void push(java.net.URL[])
    {
        sun.misc.URLClassPath r0;
        java.net.URL[] r1;
        java.util.Stack r2, $r4, $r5;
        int i0, $i1;
        java.lang.Throwable r3, $r8;
        java.net.URL $r6;

        r0 := @this: sun.misc.URLClassPath;
        r1 := @parameter0: java.net.URL[];
        $r4 = r0.<sun.misc.URLClassPath: java.util.Stack urls>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $i1 = lengthof r1;
        i0 = $i1 - 1;

     label1:
        if i0 < 0 goto label2;

        $r5 = r0.<sun.misc.URLClassPath: java.util.Stack urls>;
        $r6 = r1[i0];
        virtualinvoke $r5.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r6);
        i0 = i0 + -1;
        goto label1;

     label2:
        exitmonitor r2;

     label3:
        goto label7;

     label4:
        $r8 := @caughtexception;

     label5:
        r3 = $r8;
        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static java.net.URL[] pathToURLs(java.lang.String)
    {
        java.lang.String r0, $r2, $r8, $r10;
        java.util.StringTokenizer $r1, r3;
        java.net.URL[] r4, r15;
        int i0, $i1, $i2, $i3;
        java.io.File r5, $r7, $r9;
        java.io.IOException r6, $r11, $r13, r14;
        boolean $z0;
        java.net.URL $r12;

        r0 := @parameter0: java.lang.String;
        $r1 = new java.util.StringTokenizer;
        $r2 = <java.io.File: java.lang.String pathSeparator>;
        specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r0, $r2);
        r3 = $r1;
        $i1 = virtualinvoke r3.<java.util.StringTokenizer: int countTokens()>();
        r4 = newarray (java.net.URL)[$i1];
        i0 = 0;

     label0:
        $z0 = virtualinvoke r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z0 == 0 goto label8;

        $r7 = new java.io.File;
        $r8 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();
        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r8);
        r5 = $r7;

     label1:
        $r9 = new java.io.File;
        $r10 = virtualinvoke r5.<java.io.File: java.lang.String getCanonicalPath()>();
        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>($r10);
        r5 = $r9;

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;
        r6 = $r11;

     label4:
        $i2 = i0;
        i0 = i0 + 1;
        $r12 = staticinvoke <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>(r5);
        r4[$i2] = $r12;

     label5:
        goto label7;

     label6:
        $r13 := @caughtexception;
        r14 = $r13;

     label7:
        goto label0;

     label8:
        $i3 = lengthof r4;
        if $i3 == i0 goto label9;

        r15 = newarray (java.net.URL)[i0];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r15, 0, i0);
        r4 = r15;

     label9:
        return r4;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label4 to label5 with label6;
    }

    public java.net.URL checkURL(java.net.URL)
    {
        sun.misc.URLClassPath r0;
        java.net.URL r1;
        java.lang.Exception r2, $r3;

        r0 := @this: sun.misc.URLClassPath;
        r1 := @parameter0: java.net.URL;

     label0:
        staticinvoke <sun.misc.URLClassPath: void check(java.net.URL)>(r1);

     label1:
        goto label3;

     label2:
        $r3 := @caughtexception;
        r2 = $r3;
        return null;

     label3:
        return r1;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    static void check(java.net.URL) throws java.io.IOException
    {
        java.net.URL r0, r5;
        java.lang.SecurityManager r1;
        java.net.URLConnection r2;
        java.security.Permission r3;
        java.lang.SecurityException r4, $r6;
        boolean $z0, $z1, $z2;
        java.lang.String $r7, $r8, $r9, $r11;
        int $i0, $i1, $i2;
        java.net.JarURLConnection $r10;

        r0 := @parameter0: java.net.URL;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label6;

        r2 = virtualinvoke r0.<java.net.URL: java.net.URLConnection openConnection()>();
        r3 = virtualinvoke r2.<java.net.URLConnection: java.security.Permission getPermission()>();
        if r3 == null goto label6;

     label0:
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>(r3);

     label1:
        goto label6;

     label2:
        $r6 := @caughtexception;
        r4 = $r6;
        $z0 = r3 instanceof java.io.FilePermission;
        if $z0 == 0 goto label3;

        $r7 = virtualinvoke r3.<java.security.Permission: java.lang.String getActions()>();
        $i0 = virtualinvoke $r7.<java.lang.String: int indexOf(java.lang.String)>("read");
        if $i0 == -1 goto label3;

        $r8 = virtualinvoke r3.<java.security.Permission: java.lang.String getName()>();
        virtualinvoke r1.<java.lang.SecurityManager: void checkRead(java.lang.String)>($r8);
        goto label6;

     label3:
        $z1 = r3 instanceof java.net.SocketPermission;
        if $z1 == 0 goto label5;

        $r9 = virtualinvoke r3.<java.security.Permission: java.lang.String getActions()>();
        $i1 = virtualinvoke $r9.<java.lang.String: int indexOf(java.lang.String)>("connect");
        if $i1 == -1 goto label5;

        r5 = r0;
        $z2 = r2 instanceof java.net.JarURLConnection;
        if $z2 == 0 goto label4;

        $r10 = (java.net.JarURLConnection) r2;
        r5 = virtualinvoke $r10.<java.net.JarURLConnection: java.net.URL getJarFileURL()>();

     label4:
        $r11 = virtualinvoke r5.<java.net.URL: java.lang.String getHost()>();
        $i2 = virtualinvoke r5.<java.net.URL: int getPort()>();
        virtualinvoke r1.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>($r11, $i2);
        goto label6;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.SecurityException from label0 to label1 with label2;
    }

    static sun.misc.URLClassPath$Loader access$000(sun.misc.URLClassPath, int)
    {
        sun.misc.URLClassPath r0;
        int i0;
        sun.misc.URLClassPath$Loader $r1;

        r0 := @parameter0: sun.misc.URLClassPath;
        i0 := @parameter1: int;
        $r1 = specialinvoke r0.<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>(i0);
        return $r1;
    }

    static java.net.URLStreamHandler access$100(sun.misc.URLClassPath)
    {
        sun.misc.URLClassPath r0;
        java.net.URLStreamHandler $r1;

        r0 := @parameter0: sun.misc.URLClassPath;
        $r1 = r0.<sun.misc.URLClassPath: java.net.URLStreamHandler jarHandler>;
        return $r1;
    }

    static boolean access$300()
    {
        boolean $z0;

        $z0 = <sun.misc.URLClassPath: boolean DEBUG>;
        return $z0;
    }

    static boolean access$1000()
    {
        boolean $z0;

        $z0 = <sun.misc.URLClassPath: boolean DISABLE_JAR_CHECKING>;
        return $z0;
    }

    static void <clinit>()
    {
        sun.security.action.GetPropertyAction $r0, $r4, $r6;
        java.lang.String r1, $r3;
        java.lang.Object $r2, $r5, $r7;
        boolean $z0, $z1, $z2, $z3;

        $r0 = new sun.security.action.GetPropertyAction;
        specialinvoke $r0.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("java.version");
        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        $r3 = (java.lang.String) $r2;
        <sun.misc.URLClassPath: java.lang.String JAVA_VERSION> = $r3;
        $r4 = new sun.security.action.GetPropertyAction;
        specialinvoke $r4.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("sun.misc.URLClassPath.debug");
        $r5 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r4);
        if $r5 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        <sun.misc.URLClassPath: boolean DEBUG> = $z0;
        $r6 = new sun.security.action.GetPropertyAction;
        specialinvoke $r6.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("sun.misc.URLClassPath.disableJarChecking");
        $r7 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r6);
        r1 = (java.lang.String) $r7;
        if r1 == null goto label4;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("true");
        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("");
        if $z2 == 0 goto label3;

     label2:
        $z3 = 1;
        goto label5;

     label3:
        $z3 = 0;
        goto label5;

     label4:
        $z3 = 0;

     label5:
        <sun.misc.URLClassPath: boolean DISABLE_JAR_CHECKING> = $z3;
        return;
    }
}
