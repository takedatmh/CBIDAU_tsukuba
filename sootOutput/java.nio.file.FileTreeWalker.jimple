class java.nio.file.FileTreeWalker extends java.lang.Object
{
    private final boolean followLinks;
    private final java.nio.file.LinkOption[] linkOptions;
    private final java.nio.file.FileVisitor visitor;
    private final int maxDepth;

    void <init>(java.util.Set, java.nio.file.FileVisitor, int)
    {
        java.nio.file.FileTreeWalker r0;
        java.util.Set r1;
        java.nio.file.FileVisitor r2;
        int i0, $i1, $i2;
        boolean z0, $z1;
        java.util.Iterator r3;
        java.nio.file.FileVisitOption r4;
        java.nio.file.LinkOption $r5;
        java.lang.Object $r6;
        int[] $r7;
        java.lang.AssertionError $r8;
        java.nio.file.LinkOption[] $r10;

        r0 := @this: java.nio.file.FileTreeWalker;
        r1 := @parameter0: java.util.Set;
        r2 := @parameter1: java.nio.file.FileVisitor;
        i0 := @parameter2: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        z0 = 0;
        r3 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.nio.file.FileVisitOption) $r6;
        $r7 = <java.nio.file.FileTreeWalker$1: int[] $SwitchMap$java$nio$file$FileVisitOption>;
        $i1 = virtualinvoke r4.<java.nio.file.FileVisitOption: int ordinal()>();
        $i2 = $r7[$i1];
        lookupswitch($i2)
        {
            case 1: goto label1;
            default: goto label2;
        };

     label1:
        z0 = 1;
        goto label3;

     label2:
        $r8 = new java.lang.AssertionError;
        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>("Should not get here");
        throw $r8;

     label3:
        goto label0;

     label4:
        r0.<java.nio.file.FileTreeWalker: boolean followLinks> = z0;
        if z0 == 0 goto label5;

        $r10 = newarray (java.nio.file.LinkOption)[0];
        goto label6;

     label5:
        $r10 = newarray (java.nio.file.LinkOption)[1];
        $r5 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;
        $r10[0] = $r5;

     label6:
        r0.<java.nio.file.FileTreeWalker: java.nio.file.LinkOption[] linkOptions> = $r10;
        r0.<java.nio.file.FileTreeWalker: java.nio.file.FileVisitor visitor> = r2;
        r0.<java.nio.file.FileTreeWalker: int maxDepth> = i0;
        return;
    }

    void walk(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.FileTreeWalker r0;
        java.nio.file.Path r1;
        java.util.ArrayList $r2;
        java.nio.file.FileVisitResult r3;

        r0 := @this: java.nio.file.FileTreeWalker;
        r1 := @parameter0: java.nio.file.Path;
        $r2 = new java.util.ArrayList;
        specialinvoke $r2.<java.util.ArrayList: void <init>()>();
        r3 = specialinvoke r0.<java.nio.file.FileTreeWalker: java.nio.file.FileVisitResult walk(java.nio.file.Path,int,java.util.List)>(r1, 0, $r2);
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r3, "FileVisitor returned null");
        return;
    }

    private java.nio.file.FileVisitResult walk(java.nio.file.Path, int, java.util.List) throws java.io.IOException
    {
        java.nio.file.FileTreeWalker r0;
        java.nio.file.Path r1, $r36, r66;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.util.List r2;
        java.nio.file.attribute.BasicFileAttributes r3, r4;
        java.io.IOException r5, r7, r10, r11, r13, r17, $r19, $r21, $r37, $r46, r47, r55, $r60, r61, r62, $r70, r71, $r76, r77, $r79, r80;
        java.nio.file.LinkOption $r6;
        java.nio.file.FileTreeWalker$AncestorDirectory r8, $r44;
        java.lang.Object r9, r29, $r31, $r65;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.lang.Throwable r12, r14, $r78, $r84;
        java.lang.SecurityManager $r15;
        sun.nio.fs.BasicFileAttributesHolder $r16;
        java.nio.file.LinkOption[] $r18, $r20;
        java.lang.SecurityException $r22, r23, $r38, r39, $r51, r52;
        java.nio.file.FileVisitResult $r24, $r26, $r28, $r35, $r43, r49, r53, r57, $r58, r59, r67, $r68, r69, $r73, r82;
        java.nio.file.FileVisitor $r25, $r27, $r32, $r40, $r48, $r56, $r81;
        java.util.Iterator r30, r64;
        java.nio.file.FileSystemLoopException $r33, $r41;
        java.lang.String $r34, $r42;
        null_type n0;
        java.nio.file.DirectoryStream r45;
        java.nio.file.DirectoryIteratorException $r74, r75;

        r0 := @this: java.nio.file.FileTreeWalker;
        r1 := @parameter0: java.nio.file.Path;
        i0 := @parameter1: int;
        r2 := @parameter2: java.util.List;
        r3 = null;
        if i0 <= 0 goto label1;

        $z1 = r1 instanceof sun.nio.fs.BasicFileAttributesHolder;
        if $z1 == 0 goto label1;

        $r15 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if $r15 != null goto label1;

        $r16 = (sun.nio.fs.BasicFileAttributesHolder) r1;
        r4 = interfaceinvoke $r16.<sun.nio.fs.BasicFileAttributesHolder: java.nio.file.attribute.BasicFileAttributes get()>();
        if r4 == null goto label1;

        $z2 = r0.<java.nio.file.FileTreeWalker: boolean followLinks>;
        if $z2 == 0 goto label0;

        $z3 = interfaceinvoke r4.<java.nio.file.attribute.BasicFileAttributes: boolean isSymbolicLink()>();
        if $z3 != 0 goto label1;

     label0:
        r3 = r4;

     label1:
        r17 = null;
        if r3 != null goto label12;

     label2:
        $r18 = r0.<java.nio.file.FileTreeWalker: java.nio.file.LinkOption[] linkOptions>;
        r3 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r1, class "java/nio/file/attribute/BasicFileAttributes", $r18);

     label3:
        goto label9;

     label4:
        $r19 := @caughtexception;
        r5 = $r19;
        $z4 = r0.<java.nio.file.FileTreeWalker: boolean followLinks>;
        if $z4 == 0 goto label8;

     label5:
        $r20 = newarray (java.nio.file.LinkOption)[1];
        $r6 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;
        $r20[0] = $r6;
        r3 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r1, class "java/nio/file/attribute/BasicFileAttributes", $r20);

     label6:
        goto label9;

     label7:
        $r21 := @caughtexception;
        r7 = $r21;
        r17 = r7;
        goto label9;

     label8:
        r17 = r5;

     label9:
        goto label12;

     label10:
        $r22 := @caughtexception;
        r23 = $r22;
        if i0 != 0 goto label11;

        throw r23;

     label11:
        $r24 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
        return $r24;

     label12:
        if r17 == null goto label13;

        $r25 = r0.<java.nio.file.FileTreeWalker: java.nio.file.FileVisitor visitor>;
        $r26 = interfaceinvoke $r25.<java.nio.file.FileVisitor: java.nio.file.FileVisitResult visitFileFailed(java.lang.Object,java.io.IOException)>(r1, r17);
        return $r26;

     label13:
        $i1 = r0.<java.nio.file.FileTreeWalker: int maxDepth>;
        if i0 >= $i1 goto label14;

        $z5 = interfaceinvoke r3.<java.nio.file.attribute.BasicFileAttributes: boolean isDirectory()>();
        if $z5 != 0 goto label15;

     label14:
        $r27 = r0.<java.nio.file.FileTreeWalker: java.nio.file.FileVisitor visitor>;
        $r28 = interfaceinvoke $r27.<java.nio.file.FileVisitor: java.nio.file.FileVisitResult visitFile(java.lang.Object,java.nio.file.attribute.BasicFileAttributes)>(r1, r3);
        return $r28;

     label15:
        $z6 = r0.<java.nio.file.FileTreeWalker: boolean followLinks>;
        if $z6 == 0 goto label25;

        r29 = interfaceinvoke r3.<java.nio.file.attribute.BasicFileAttributes: java.lang.Object fileKey()>();
        r30 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z7 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();
        if $z7 == 0 goto label24;

        $r31 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();
        r8 = (java.nio.file.FileTreeWalker$AncestorDirectory) $r31;
        r9 = virtualinvoke r8.<java.nio.file.FileTreeWalker$AncestorDirectory: java.lang.Object fileKey()>();
        if r29 == null goto label17;

        if r9 == null goto label17;

        $z8 = virtualinvoke r29.<java.lang.Object: boolean equals(java.lang.Object)>(r9);
        if $z8 == 0 goto label23;

        $r32 = r0.<java.nio.file.FileTreeWalker: java.nio.file.FileVisitor visitor>;
        $r33 = new java.nio.file.FileSystemLoopException;
        $r34 = interfaceinvoke r1.<java.nio.file.Path: java.lang.String toString()>();
        specialinvoke $r33.<java.nio.file.FileSystemLoopException: void <init>(java.lang.String)>($r34);
        $r35 = interfaceinvoke $r32.<java.nio.file.FileVisitor: java.nio.file.FileVisitResult visitFileFailed(java.lang.Object,java.io.IOException)>(r1, $r33);
        return $r35;

     label17:
        z0 = 0;

     label18:
        $r36 = virtualinvoke r8.<java.nio.file.FileTreeWalker$AncestorDirectory: java.nio.file.Path file()>();
        z0 = staticinvoke <java.nio.file.Files: boolean isSameFile(java.nio.file.Path,java.nio.file.Path)>(r1, $r36);

     label19:
        goto label22;

     label20:
        $r37 := @caughtexception;
        r10 = $r37;
        goto label22;

     label21:
        $r38 := @caughtexception;
        r39 = $r38;

     label22:
        if z0 == 0 goto label23;

        $r40 = r0.<java.nio.file.FileTreeWalker: java.nio.file.FileVisitor visitor>;
        $r41 = new java.nio.file.FileSystemLoopException;
        $r42 = interfaceinvoke r1.<java.nio.file.Path: java.lang.String toString()>();
        specialinvoke $r41.<java.nio.file.FileSystemLoopException: void <init>(java.lang.String)>($r42);
        $r43 = interfaceinvoke $r40.<java.nio.file.FileVisitor: java.nio.file.FileVisitResult visitFileFailed(java.lang.Object,java.io.IOException)>(r1, $r41);
        return $r43;

     label23:
        goto label16;

     label24:
        $r44 = new java.nio.file.FileTreeWalker$AncestorDirectory;
        specialinvoke $r44.<java.nio.file.FileTreeWalker$AncestorDirectory: void <init>(java.nio.file.Path,java.lang.Object)>(r1, r29);
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r44);

     label25:
        n0 = null;

     label26:
        r45 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path)>(r1);

     label27:
        goto label35;

     label28:
        $r46 := @caughtexception;
        r47 = $r46;
        $r48 = r0.<java.nio.file.FileTreeWalker: java.nio.file.FileVisitor visitor>;
        r49 = interfaceinvoke $r48.<java.nio.file.FileVisitor: java.nio.file.FileVisitResult visitFileFailed(java.lang.Object,java.io.IOException)>(r1, r47);

     label29:
        $z10 = r0.<java.nio.file.FileTreeWalker: boolean followLinks>;
        if $z10 == 0 goto label30;

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();
        $i3 = $i2 - 1;
        interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>($i3);

     label30:
        return r49;

     label31:
        $r51 := @caughtexception;

     label32:
        r52 = $r51;
        r53 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;

     label33:
        $z11 = r0.<java.nio.file.FileTreeWalker: boolean followLinks>;
        if $z11 == 0 goto label34;

        $i4 = interfaceinvoke r2.<java.util.List: int size()>();
        $i5 = $i4 - 1;
        interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>($i5);

     label34:
        return r53;

     label35:
        r55 = null;

     label36:
        $r56 = r0.<java.nio.file.FileTreeWalker: java.nio.file.FileVisitor visitor>;
        r57 = interfaceinvoke $r56.<java.nio.file.FileVisitor: java.nio.file.FileVisitResult preVisitDirectory(java.lang.Object,java.nio.file.attribute.BasicFileAttributes)>(r1, r3);
        $r58 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
        if r57 == $r58 goto label42;

        r59 = r57;

     label37:
        interfaceinvoke r45.<java.nio.file.DirectoryStream: void close()>();

     label38:
        goto label40;

     label39:
        $r60 := @caughtexception;
        r61 = $r60;
        if r55 != null goto label40;

        r62 = r61;

     label40:
        $z12 = r0.<java.nio.file.FileTreeWalker: boolean followLinks>;
        if $z12 == 0 goto label41;

        $i6 = interfaceinvoke r2.<java.util.List: int size()>();
        $i7 = $i6 - 1;
        interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>($i7);

     label41:
        return r59;

     label42:
        r64 = interfaceinvoke r45.<java.nio.file.DirectoryStream: java.util.Iterator iterator()>();

     label43:
        $z13 = interfaceinvoke r64.<java.util.Iterator: boolean hasNext()>();
        if $z13 == 0 goto label52;

        $r65 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>();
        r66 = (java.nio.file.Path) $r65;
        $i8 = i0 + 1;
        r67 = specialinvoke r0.<java.nio.file.FileTreeWalker: java.nio.file.FileVisitResult walk(java.nio.file.Path,int,java.util.List)>(r66, $i8, r2);
        if r67 == null goto label44;

        $r68 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult TERMINATE>;
        if r67 != $r68 goto label50;

     label44:
        r69 = r67;

     label45:
        interfaceinvoke r45.<java.nio.file.DirectoryStream: void close()>();

     label46:
        goto label48;

     label47:
        $r70 := @caughtexception;
        r11 = $r70;
        if r55 != null goto label48;

        r71 = r11;

     label48:
        $z14 = r0.<java.nio.file.FileTreeWalker: boolean followLinks>;
        if $z14 == 0 goto label49;

        $i9 = interfaceinvoke r2.<java.util.List: int size()>();
        $i10 = $i9 - 1;
        interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>($i10);

     label49:
        return r69;

     label50:
        $r73 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult SKIP_SIBLINGS>;
        if r67 != $r73 goto label51;

        goto label52;

     label51:
        goto label43;

     label52:
        goto label54;

     label53:
        $r74 := @caughtexception;
        r75 = $r74;
        r55 = virtualinvoke r75.<java.nio.file.DirectoryIteratorException: java.io.IOException getCause()>();

     label54:
        interfaceinvoke r45.<java.nio.file.DirectoryStream: void close()>();

     label55:
        goto label64;

     label56:
        $r76 := @caughtexception;
        r77 = $r76;
        if r55 != null goto label57;

        r55 = r77;

     label57:
        goto label64;

     label58:
        $r78 := @caughtexception;

     label59:
        r12 = $r78;

     label60:
        interfaceinvoke r45.<java.nio.file.DirectoryStream: void close()>();

     label61:
        goto label63;

     label62:
        $r79 := @caughtexception;
        r13 = $r79;
        if r55 != null goto label63;

        r80 = r13;

     label63:
        throw r12;

     label64:
        $r81 = r0.<java.nio.file.FileTreeWalker: java.nio.file.FileVisitor visitor>;
        r82 = interfaceinvoke $r81.<java.nio.file.FileVisitor: java.nio.file.FileVisitResult postVisitDirectory(java.lang.Object,java.io.IOException)>(r1, r55);

     label65:
        $z15 = r0.<java.nio.file.FileTreeWalker: boolean followLinks>;
        if $z15 == 0 goto label66;

        $i11 = interfaceinvoke r2.<java.util.List: int size()>();
        $i12 = $i11 - 1;
        interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>($i12);

     label66:
        return r82;

     label67:
        $r84 := @caughtexception;

     label68:
        r14 = $r84;

     label69:
        $z16 = r0.<java.nio.file.FileTreeWalker: boolean followLinks>;
        if $z16 == 0 goto label70;

        $i13 = interfaceinvoke r2.<java.util.List: int size()>();
        $i14 = $i13 - 1;
        interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>($i14);

     label70:
        throw r14;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.io.IOException from label5 to label6 with label7;
        catch java.lang.SecurityException from label2 to label9 with label10;
        catch java.io.IOException from label18 to label19 with label20;
        catch java.lang.SecurityException from label18 to label19 with label21;
        catch java.io.IOException from label26 to label27 with label28;
        catch java.lang.SecurityException from label26 to label27 with label31;
        catch java.io.IOException from label37 to label38 with label39;
        catch java.io.IOException from label45 to label46 with label47;
        catch java.nio.file.DirectoryIteratorException from label42 to label45 with label53;
        catch java.nio.file.DirectoryIteratorException from label50 to label52 with label53;
        catch java.io.IOException from label54 to label55 with label56;
        catch java.lang.Throwable from label36 to label37 with label58;
        catch java.lang.Throwable from label42 to label45 with label58;
        catch java.lang.Throwable from label50 to label54 with label58;
        catch java.io.IOException from label60 to label61 with label62;
        catch java.lang.Throwable from label59 to label60 with label58;
        catch java.lang.Throwable from label25 to label29 with label67;
        catch java.lang.Throwable from label32 to label33 with label67;
        catch java.lang.Throwable from label35 to label40 with label67;
        catch java.lang.Throwable from label42 to label48 with label67;
        catch java.lang.Throwable from label50 to label65 with label67;
        catch java.lang.Throwable from label68 to label69 with label67;
    }
}
