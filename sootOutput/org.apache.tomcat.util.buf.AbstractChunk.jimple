public abstract class org.apache.tomcat.util.buf.AbstractChunk extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final int ARRAY_MAX_SIZE;
    private int hashCode;
    protected boolean hasHashCode;
    protected boolean isSet;
    private int limit;
    protected int start;
    protected int end;

    public void <init>()
    {
        org.apache.tomcat.util.buf.AbstractChunk r0;

        r0 := @this: org.apache.tomcat.util.buf.AbstractChunk;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<org.apache.tomcat.util.buf.AbstractChunk: int hashCode> = 0;
        r0.<org.apache.tomcat.util.buf.AbstractChunk: boolean hasHashCode> = 0;
        r0.<org.apache.tomcat.util.buf.AbstractChunk: int limit> = -1;
        return;
    }

    public void setLimit(int)
    {
        org.apache.tomcat.util.buf.AbstractChunk r0;
        int i0;

        r0 := @this: org.apache.tomcat.util.buf.AbstractChunk;
        i0 := @parameter0: int;
        r0.<org.apache.tomcat.util.buf.AbstractChunk: int limit> = i0;
        return;
    }

    public int getLimit()
    {
        org.apache.tomcat.util.buf.AbstractChunk r0;
        int $i0;

        r0 := @this: org.apache.tomcat.util.buf.AbstractChunk;
        $i0 = r0.<org.apache.tomcat.util.buf.AbstractChunk: int limit>;
        return $i0;
    }

    protected int getLimitInternal()
    {
        org.apache.tomcat.util.buf.AbstractChunk r0;
        int $i0, $i1;

        r0 := @this: org.apache.tomcat.util.buf.AbstractChunk;
        $i0 = r0.<org.apache.tomcat.util.buf.AbstractChunk: int limit>;
        if $i0 <= 0 goto label0;

        $i1 = r0.<org.apache.tomcat.util.buf.AbstractChunk: int limit>;
        return $i1;

     label0:
        return 2147483639;
    }

    public int getStart()
    {
        org.apache.tomcat.util.buf.AbstractChunk r0;
        int $i0;

        r0 := @this: org.apache.tomcat.util.buf.AbstractChunk;
        $i0 = r0.<org.apache.tomcat.util.buf.AbstractChunk: int start>;
        return $i0;
    }

    public int getEnd()
    {
        org.apache.tomcat.util.buf.AbstractChunk r0;
        int $i0;

        r0 := @this: org.apache.tomcat.util.buf.AbstractChunk;
        $i0 = r0.<org.apache.tomcat.util.buf.AbstractChunk: int end>;
        return $i0;
    }

    public void setEnd(int)
    {
        org.apache.tomcat.util.buf.AbstractChunk r0;
        int i0;

        r0 := @this: org.apache.tomcat.util.buf.AbstractChunk;
        i0 := @parameter0: int;
        r0.<org.apache.tomcat.util.buf.AbstractChunk: int end> = i0;
        return;
    }

    public int getOffset()
    {
        org.apache.tomcat.util.buf.AbstractChunk r0;
        int $i0;

        r0 := @this: org.apache.tomcat.util.buf.AbstractChunk;
        $i0 = r0.<org.apache.tomcat.util.buf.AbstractChunk: int start>;
        return $i0;
    }

    public void setOffset(int)
    {
        org.apache.tomcat.util.buf.AbstractChunk r0;
        int i0, $i1;

        r0 := @this: org.apache.tomcat.util.buf.AbstractChunk;
        i0 := @parameter0: int;
        $i1 = r0.<org.apache.tomcat.util.buf.AbstractChunk: int end>;
        if $i1 >= i0 goto label0;

        r0.<org.apache.tomcat.util.buf.AbstractChunk: int end> = i0;

     label0:
        r0.<org.apache.tomcat.util.buf.AbstractChunk: int start> = i0;
        return;
    }

    public int getLength()
    {
        org.apache.tomcat.util.buf.AbstractChunk r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.tomcat.util.buf.AbstractChunk;
        $i0 = r0.<org.apache.tomcat.util.buf.AbstractChunk: int end>;
        $i1 = r0.<org.apache.tomcat.util.buf.AbstractChunk: int start>;
        $i2 = $i0 - $i1;
        return $i2;
    }

    public boolean isNull()
    {
        org.apache.tomcat.util.buf.AbstractChunk r0;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: org.apache.tomcat.util.buf.AbstractChunk;
        $i0 = r0.<org.apache.tomcat.util.buf.AbstractChunk: int end>;
        if $i0 <= 0 goto label0;

        return 0;

     label0:
        $z0 = r0.<org.apache.tomcat.util.buf.AbstractChunk: boolean isSet>;
        if $z0 == 0 goto label1;

        $z1 = 0;
        goto label2;

     label1:
        $z1 = 1;

     label2:
        return $z1;
    }

    public int indexOf(java.lang.String, int, int, int)
    {
        org.apache.tomcat.util.buf.AbstractChunk r0;
        java.lang.String r1;
        int i0, i1, i2, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i17;
        char c3, $c13;

        r0 := @this: org.apache.tomcat.util.buf.AbstractChunk;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);
        i4 = i0 + i1;
        $i9 = r0.<org.apache.tomcat.util.buf.AbstractChunk: int start>;
        i5 = i2 + $i9;
        goto label5;

     label0:
        $i10 = virtualinvoke r0.<org.apache.tomcat.util.buf.AbstractChunk: int getBufferElement(int)>(i5);
        if $i10 == c3 goto label1;

        goto label4;

     label1:
        i6 = i5 + 1;
        i7 = i0 + 1;
        goto label3;

     label2:
        $i11 = i6;
        i6 = i6 + 1;
        $i12 = virtualinvoke r0.<org.apache.tomcat.util.buf.AbstractChunk: int getBufferElement(int)>($i11);
        $i8 = i7;
        i7 = i7 + 1;
        $c13 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i8);
        if $i12 == $c13 goto label3;

        goto label4;

     label3:
        if i7 < i4 goto label2;

        $i14 = r0.<org.apache.tomcat.util.buf.AbstractChunk: int start>;
        $i15 = i5 - $i14;
        return $i15;

     label4:
        i5 = i5 + 1;

     label5:
        $i16 = r0.<org.apache.tomcat.util.buf.AbstractChunk: int end>;
        $i17 = $i16 - i1;
        if i5 <= $i17 goto label0;

        return -1;
    }

    public void recycle()
    {
        org.apache.tomcat.util.buf.AbstractChunk r0;

        r0 := @this: org.apache.tomcat.util.buf.AbstractChunk;
        r0.<org.apache.tomcat.util.buf.AbstractChunk: boolean hasHashCode> = 0;
        r0.<org.apache.tomcat.util.buf.AbstractChunk: boolean isSet> = 0;
        r0.<org.apache.tomcat.util.buf.AbstractChunk: int start> = 0;
        r0.<org.apache.tomcat.util.buf.AbstractChunk: int end> = 0;
        return;
    }

    public int hashCode()
    {
        org.apache.tomcat.util.buf.AbstractChunk r0;
        boolean z0, $z1;
        int $i0, i1;

        r0 := @this: org.apache.tomcat.util.buf.AbstractChunk;
        $z1 = r0.<org.apache.tomcat.util.buf.AbstractChunk: boolean hasHashCode>;
        if $z1 == 0 goto label0;

        $i0 = r0.<org.apache.tomcat.util.buf.AbstractChunk: int hashCode>;
        return $i0;

     label0:
        z0 = 0;
        i1 = virtualinvoke r0.<org.apache.tomcat.util.buf.AbstractChunk: int hash()>();
        r0.<org.apache.tomcat.util.buf.AbstractChunk: int hashCode> = i1;
        r0.<org.apache.tomcat.util.buf.AbstractChunk: boolean hasHashCode> = 1;
        return i1;
    }

    public int hash()
    {
        org.apache.tomcat.util.buf.AbstractChunk r0;
        int i0, i1, $i2, $i3, $i4;

        r0 := @this: org.apache.tomcat.util.buf.AbstractChunk;
        i0 = 0;
        i1 = r0.<org.apache.tomcat.util.buf.AbstractChunk: int start>;
        goto label1;

     label0:
        $i2 = i0 * 37;
        $i3 = virtualinvoke r0.<org.apache.tomcat.util.buf.AbstractChunk: int getBufferElement(int)>(i1);
        i0 = $i2 + $i3;
        i1 = i1 + 1;

     label1:
        $i4 = r0.<org.apache.tomcat.util.buf.AbstractChunk: int end>;
        if i1 < $i4 goto label0;

        return i0;
    }

    protected abstract int getBufferElement(int);
}
