public class sun.reflect.annotation.AnnotationParser extends java.lang.Object
{
    private static final java.lang.annotation.Annotation[] EMPTY_ANNOTATIONS_ARRAY;
    private static final java.lang.annotation.Annotation[] EMPTY_ANNOTATION_ARRAY;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        sun.reflect.annotation.AnnotationParser r0;

        r0 := @this: sun.reflect.annotation.AnnotationParser;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static java.util.Map parseAnnotations(byte[], sun.reflect.ConstantPool, java.lang.Class)
    {
        byte[] r0;
        sun.reflect.ConstantPool r1;
        java.lang.Class r2;
        java.nio.BufferUnderflowException r3, $r6;
        java.util.Map $r4, $r5;
        java.lang.annotation.AnnotationFormatError $r7, $r10;
        java.lang.IllegalArgumentException $r8, r9;

        r0 := @parameter0: byte[];
        r1 := @parameter1: sun.reflect.ConstantPool;
        r2 := @parameter2: java.lang.Class;
        if r0 != null goto label0;

        $r4 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
        return $r4;

     label0:
        $r5 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.util.Map parseAnnotations2(byte[],sun.reflect.ConstantPool,java.lang.Class,java.lang.Class[])>(r0, r1, r2, null);

     label1:
        return $r5;

     label2:
        $r6 := @caughtexception;
        r3 = $r6;
        $r7 = new java.lang.annotation.AnnotationFormatError;
        specialinvoke $r7.<java.lang.annotation.AnnotationFormatError: void <init>(java.lang.String)>("Unexpected end of annotations.");
        throw $r7;

     label3:
        $r8 := @caughtexception;
        r9 = $r8;
        $r10 = new java.lang.annotation.AnnotationFormatError;
        specialinvoke $r10.<java.lang.annotation.AnnotationFormatError: void <init>(java.lang.Throwable)>(r9);
        throw $r10;

        catch java.nio.BufferUnderflowException from label0 to label1 with label2;
        catch java.lang.IllegalArgumentException from label0 to label1 with label3;
    }

    static transient java.util.Map parseSelectAnnotations(byte[], sun.reflect.ConstantPool, java.lang.Class, java.lang.Class[])
    {
        byte[] r0;
        sun.reflect.ConstantPool r1;
        java.lang.Class r2;
        java.lang.Class[] r3;
        java.nio.BufferUnderflowException r4, $r7;
        java.util.Map $r5, $r6;
        java.lang.annotation.AnnotationFormatError $r8, $r11;
        java.lang.IllegalArgumentException $r9, r10;

        r0 := @parameter0: byte[];
        r1 := @parameter1: sun.reflect.ConstantPool;
        r2 := @parameter2: java.lang.Class;
        r3 := @parameter3: java.lang.Class[];
        if r0 != null goto label0;

        $r5 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
        return $r5;

     label0:
        $r6 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.util.Map parseAnnotations2(byte[],sun.reflect.ConstantPool,java.lang.Class,java.lang.Class[])>(r0, r1, r2, r3);

     label1:
        return $r6;

     label2:
        $r7 := @caughtexception;
        r4 = $r7;
        $r8 = new java.lang.annotation.AnnotationFormatError;
        specialinvoke $r8.<java.lang.annotation.AnnotationFormatError: void <init>(java.lang.String)>("Unexpected end of annotations.");
        throw $r8;

     label3:
        $r9 := @caughtexception;
        r10 = $r9;
        $r11 = new java.lang.annotation.AnnotationFormatError;
        specialinvoke $r11.<java.lang.annotation.AnnotationFormatError: void <init>(java.lang.Throwable)>(r10);
        throw $r11;

        catch java.nio.BufferUnderflowException from label0 to label1 with label2;
        catch java.lang.IllegalArgumentException from label0 to label1 with label3;
    }

    private static java.util.Map parseAnnotations2(byte[], sun.reflect.ConstantPool, java.lang.Class, java.lang.Class[])
    {
        byte[] r0;
        sun.reflect.ConstantPool r1;
        java.lang.Class r2, r8;
        java.lang.Class[] r3;
        java.util.LinkedHashMap $r4, r5;
        java.nio.ByteBuffer r6;
        int i0, i1;
        java.lang.annotation.Annotation r7;
        short $s2;
        sun.reflect.annotation.AnnotationType $r9;
        java.lang.annotation.RetentionPolicy $r10, $r11;
        java.lang.Object $r12;
        java.lang.annotation.AnnotationFormatError $r13;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18;
        java.lang.String $r19;

        r0 := @parameter0: byte[];
        r1 := @parameter1: sun.reflect.ConstantPool;
        r2 := @parameter2: java.lang.Class;
        r3 := @parameter3: java.lang.Class[];
        $r4 = new java.util.LinkedHashMap;
        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();
        r5 = $r4;
        r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r0);
        $s2 = virtualinvoke r6.<java.nio.ByteBuffer: short getShort()>();
        i0 = $s2 & 65535;
        i1 = 0;

     label0:
        if i1 >= i0 goto label2;

        r7 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation parseAnnotation2(java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class,boolean,java.lang.Class[])>(r6, r1, r2, 0, r3);
        if r7 == null goto label1;

        r8 = interfaceinvoke r7.<java.lang.annotation.Annotation: java.lang.Class annotationType()>();
        $r9 = staticinvoke <sun.reflect.annotation.AnnotationType: sun.reflect.annotation.AnnotationType getInstance(java.lang.Class)>(r8);
        $r10 = virtualinvoke $r9.<sun.reflect.annotation.AnnotationType: java.lang.annotation.RetentionPolicy retention()>();
        $r11 = <java.lang.annotation.RetentionPolicy: java.lang.annotation.RetentionPolicy RUNTIME>;
        if $r10 != $r11 goto label1;

        $r12 = interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r7);
        if $r12 == null goto label1;

        $r13 = new java.lang.annotation.AnnotationFormatError;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate annotation for class: ");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r13.<java.lang.annotation.AnnotationFormatError: void <init>(java.lang.String)>($r19);
        throw $r13;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        return r5;
    }

    public static java.lang.annotation.Annotation[][] parseParameterAnnotations(byte[], sun.reflect.ConstantPool, java.lang.Class)
    {
        byte[] r0;
        sun.reflect.ConstantPool r1;
        java.lang.Class r2;
        java.nio.BufferUnderflowException r3, $r5;
        java.lang.annotation.Annotation[][] $r4;
        java.lang.annotation.AnnotationFormatError $r6, $r9;
        java.lang.IllegalArgumentException $r7, r8;

        r0 := @parameter0: byte[];
        r1 := @parameter1: sun.reflect.ConstantPool;
        r2 := @parameter2: java.lang.Class;

     label0:
        $r4 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[][] parseParameterAnnotations2(byte[],sun.reflect.ConstantPool,java.lang.Class)>(r0, r1, r2);

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;
        r3 = $r5;
        $r6 = new java.lang.annotation.AnnotationFormatError;
        specialinvoke $r6.<java.lang.annotation.AnnotationFormatError: void <init>(java.lang.String)>("Unexpected end of parameter annotations.");
        throw $r6;

     label3:
        $r7 := @caughtexception;
        r8 = $r7;
        $r9 = new java.lang.annotation.AnnotationFormatError;
        specialinvoke $r9.<java.lang.annotation.AnnotationFormatError: void <init>(java.lang.Throwable)>(r8);
        throw $r9;

        catch java.nio.BufferUnderflowException from label0 to label1 with label2;
        catch java.lang.IllegalArgumentException from label0 to label1 with label3;
    }

    private static java.lang.annotation.Annotation[][] parseParameterAnnotations2(byte[], sun.reflect.ConstantPool, java.lang.Class)
    {
        byte[] r0;
        sun.reflect.ConstantPool r1;
        java.lang.Class r2, $r9;
        java.nio.ByteBuffer r3;
        short s0, $s5;
        java.lang.annotation.Annotation[][] r4;
        int i1, i2, i3;
        java.util.ArrayList r5, $r8;
        java.lang.annotation.Annotation r6;
        sun.reflect.annotation.AnnotationType r7;
        byte $b4;
        java.lang.annotation.RetentionPolicy $r10, $r11;
        java.lang.annotation.Annotation[] $r12, $r14;
        java.lang.Object[] $r13;

        r0 := @parameter0: byte[];
        r1 := @parameter1: sun.reflect.ConstantPool;
        r2 := @parameter2: java.lang.Class;
        r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r0);
        $b4 = virtualinvoke r3.<java.nio.ByteBuffer: byte get()>();
        s0 = $b4 & 255;
        r4 = newarray (java.lang.annotation.Annotation[])[s0];
        i1 = 0;

     label0:
        if i1 >= s0 goto label4;

        $s5 = virtualinvoke r3.<java.nio.ByteBuffer: short getShort()>();
        i2 = $s5 & 65535;
        $r8 = new java.util.ArrayList;
        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(i2);
        r5 = $r8;
        i3 = 0;

     label1:
        if i3 >= i2 goto label3;

        r6 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation parseAnnotation(java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class,boolean)>(r3, r1, r2, 0);
        if r6 == null goto label2;

        $r9 = interfaceinvoke r6.<java.lang.annotation.Annotation: java.lang.Class annotationType()>();
        r7 = staticinvoke <sun.reflect.annotation.AnnotationType: sun.reflect.annotation.AnnotationType getInstance(java.lang.Class)>($r9);
        $r10 = virtualinvoke r7.<sun.reflect.annotation.AnnotationType: java.lang.annotation.RetentionPolicy retention()>();
        $r11 = <java.lang.annotation.RetentionPolicy: java.lang.annotation.RetentionPolicy RUNTIME>;
        if $r10 != $r11 goto label2;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r6);

     label2:
        i3 = i3 + 1;
        goto label1;

     label3:
        $r12 = <sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[] EMPTY_ANNOTATIONS_ARRAY>;
        $r13 = interfaceinvoke r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r12);
        $r14 = (java.lang.annotation.Annotation[]) $r13;
        r4[i1] = $r14;
        i1 = i1 + 1;
        goto label0;

     label4:
        return r4;
    }

    private static java.lang.annotation.Annotation parseAnnotation(java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class, boolean)
    {
        java.nio.ByteBuffer r0;
        sun.reflect.ConstantPool r1;
        java.lang.Class r2;
        boolean z0;
        java.lang.annotation.Annotation $r3;

        r0 := @parameter0: java.nio.ByteBuffer;
        r1 := @parameter1: sun.reflect.ConstantPool;
        r2 := @parameter2: java.lang.Class;
        z0 := @parameter3: boolean;
        $r3 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation parseAnnotation2(java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class,boolean,java.lang.Class[])>(r0, r1, r2, z0, null);
        return $r3;
    }

    private static java.lang.annotation.Annotation parseAnnotation2(java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class, boolean, java.lang.Class[])
    {
        java.nio.ByteBuffer r0;
        sun.reflect.ConstantPool r1;
        java.lang.Class r2, r9, r11;
        boolean z0, $z1, $z2;
        java.lang.Class[] r3;
        int i0, i1, i2, i3;
        null_type n0, n1;
        java.lang.String r4, r8;
        java.lang.IllegalArgumentException r5, r6, $r12, $r19;
        java.util.LinkedHashMap r7, $r21;
        java.lang.Object r10, $r23, $r26;
        short $s4, $s5, $s6;
        java.lang.NoClassDefFoundError $r13, r14;
        java.lang.TypeNotPresentException $r15, $r16, r17;
        sun.reflect.annotation.AnnotationType r18;
        java.util.Map r20, $r22, $r25;
        sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy $r24;
        java.lang.reflect.Method $r27;
        java.lang.annotation.Annotation $r30;

        r0 := @parameter0: java.nio.ByteBuffer;
        r1 := @parameter1: sun.reflect.ConstantPool;
        r2 := @parameter2: java.lang.Class;
        z0 := @parameter3: boolean;
        r3 := @parameter4: java.lang.Class[];
        $s4 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();
        i0 = $s4 & 65535;
        n0 = null;
        r4 = "[unknown]";

     label0:
        r4 = virtualinvoke r1.<sun.reflect.ConstantPool: java.lang.String getUTF8At(int)>(i0);
        r11 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Class parseSig(java.lang.String,java.lang.Class)>(r4, r2);

     label1:
        goto label3;

     label2:
        $r12 := @caughtexception;
        r5 = $r12;
        r11 = virtualinvoke r1.<sun.reflect.ConstantPool: java.lang.Class getClassAt(int)>(i0);

     label3:
        goto label8;

     label4:
        $r13 := @caughtexception;
        r14 = $r13;
        if z0 == 0 goto label5;

        $r15 = new java.lang.TypeNotPresentException;
        specialinvoke $r15.<java.lang.TypeNotPresentException: void <init>(java.lang.String,java.lang.Throwable)>(r4, r14);
        throw $r15;

     label5:
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipAnnotation(java.nio.ByteBuffer,boolean)>(r0, 0);
        return null;

     label6:
        $r16 := @caughtexception;
        r17 = $r16;
        if z0 == 0 goto label7;

        throw r17;

     label7:
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipAnnotation(java.nio.ByteBuffer,boolean)>(r0, 0);
        return null;

     label8:
        if r3 == null goto label9;

        $z1 = staticinvoke <sun.reflect.annotation.AnnotationParser: boolean contains(java.lang.Object[],java.lang.Object)>(r3, r11);
        if $z1 != 0 goto label9;

        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipAnnotation(java.nio.ByteBuffer,boolean)>(r0, 0);
        return null;

     label9:
        n1 = null;

     label10:
        r18 = staticinvoke <sun.reflect.annotation.AnnotationType: sun.reflect.annotation.AnnotationType getInstance(java.lang.Class)>(r11);

     label11:
        goto label13;

     label12:
        $r19 := @caughtexception;
        r6 = $r19;
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipAnnotation(java.nio.ByteBuffer,boolean)>(r0, 0);
        return null;

     label13:
        r20 = virtualinvoke r18.<sun.reflect.annotation.AnnotationType: java.util.Map memberTypes()>();
        $r21 = new java.util.LinkedHashMap;
        $r22 = virtualinvoke r18.<sun.reflect.annotation.AnnotationType: java.util.Map memberDefaults()>();
        specialinvoke $r21.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r22);
        r7 = $r21;
        $s5 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();
        i1 = $s5 & 65535;
        i2 = 0;

     label14:
        if i2 >= i1 goto label18;

        $s6 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();
        i3 = $s6 & 65535;
        r8 = virtualinvoke r1.<sun.reflect.ConstantPool: java.lang.String getUTF8At(int)>(i3);
        $r23 = interfaceinvoke r20.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);
        r9 = (java.lang.Class) $r23;
        if r9 != null goto label15;

        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipMemberValue(java.nio.ByteBuffer)>(r0);
        goto label17;

     label15:
        r10 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseMemberValue(java.lang.Class,java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class)>(r9, r0, r1, r2);
        $z2 = r10 instanceof sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy;
        if $z2 == 0 goto label16;

        $r24 = (sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy) r10;
        $r25 = virtualinvoke r18.<sun.reflect.annotation.AnnotationType: java.util.Map members()>();
        $r26 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);
        $r27 = (java.lang.reflect.Method) $r26;
        virtualinvoke $r24.<sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy: sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy setMember(java.lang.reflect.Method)>($r27);

     label16:
        interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r10);

     label17:
        i2 = i2 + 1;
        goto label14;

     label18:
        $r30 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation annotationForMap(java.lang.Class,java.util.Map)>(r11, r7);
        return $r30;

        catch java.lang.IllegalArgumentException from label0 to label1 with label2;
        catch java.lang.NoClassDefFoundError from label0 to label3 with label4;
        catch java.lang.TypeNotPresentException from label0 to label3 with label6;
        catch java.lang.IllegalArgumentException from label10 to label11 with label12;
    }

    public static java.lang.annotation.Annotation annotationForMap(java.lang.Class, java.util.Map)
    {
        java.lang.Class r0;
        java.util.Map r1;
        java.lang.ClassLoader $r2;
        java.lang.Class[] $r3;
        sun.reflect.annotation.AnnotationInvocationHandler $r4;
        java.lang.Object $r5;
        java.lang.annotation.Annotation $r6;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.util.Map;
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        $r3 = newarray (java.lang.Class)[1];
        $r3[0] = r0;
        $r4 = new sun.reflect.annotation.AnnotationInvocationHandler;
        specialinvoke $r4.<sun.reflect.annotation.AnnotationInvocationHandler: void <init>(java.lang.Class,java.util.Map)>(r0, r1);
        $r5 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r2, $r3, $r4);
        $r6 = (java.lang.annotation.Annotation) $r5;
        return $r6;
    }

    public static java.lang.Object parseMemberValue(java.lang.Class, java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class)
    {
        java.lang.Class r0, r3, $r9;
        java.nio.ByteBuffer r1;
        sun.reflect.ConstantPool r2;
        null_type n0;
        byte b0;
        java.lang.Object $r4, r5, $r6;
        boolean $z0, $z1;
        sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy $r7;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13;
        java.lang.String $r14;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.nio.ByteBuffer;
        r2 := @parameter2: sun.reflect.ConstantPool;
        r3 := @parameter3: java.lang.Class;
        n0 = null;
        b0 = virtualinvoke r1.<java.nio.ByteBuffer: byte get()>();
        lookupswitch(b0)
        {
            case 64: goto label2;
            case 91: goto label3;
            case 99: goto label1;
            case 101: goto label0;
            default: goto label4;
        };

     label0:
        $r4 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseEnumValue(java.lang.Class,java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class)>(r0, r1, r2, r3);
        return $r4;

     label1:
        r5 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseClassValue(java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class)>(r1, r2, r3);
        goto label5;

     label2:
        r5 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation parseAnnotation(java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class,boolean)>(r1, r2, r3, 1);
        goto label5;

     label3:
        $r6 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseArray(java.lang.Class,java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class)>(r0, r1, r2, r3);
        return $r6;

     label4:
        r5 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseConst(int,java.nio.ByteBuffer,sun.reflect.ConstantPool)>(b0, r1, r2);

     label5:
        $z0 = r5 instanceof sun.reflect.annotation.ExceptionProxy;
        if $z0 != 0 goto label6;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r5);
        if $z1 != 0 goto label6;

        $r7 = new sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();
        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy: void <init>(java.lang.String)>($r14);
        r5 = $r7;

     label6:
        return r5;
    }

    private static java.lang.Object parseConst(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)
    {
        int i0, i1, $i3, $i5, $i7, $i9, $i11;
        java.nio.ByteBuffer r0;
        sun.reflect.ConstantPool r1;
        java.lang.StringBuilder $r2, $r13, $r14;
        short $s2, $s10;
        byte $b4;
        java.lang.Byte $r3;
        char $c6;
        java.lang.Character $r4;
        double $d0;
        java.lang.Double $r5;
        float $f0;
        java.lang.Float $r6;
        java.lang.Integer $r7;
        long $l8;
        java.lang.Long $r8;
        java.lang.Short $r9;
        boolean $z0;
        java.lang.Boolean $r10;
        java.lang.String $r11, $r15;
        java.lang.annotation.AnnotationFormatError $r12;

        i0 := @parameter0: int;
        r0 := @parameter1: java.nio.ByteBuffer;
        r1 := @parameter2: sun.reflect.ConstantPool;
        $s2 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();
        i1 = $s2 & 65535;
        lookupswitch(i0)
        {
            case 66: goto label0;
            case 67: goto label1;
            case 68: goto label2;
            case 70: goto label3;
            case 73: goto label4;
            case 74: goto label5;
            case 83: goto label6;
            case 90: goto label7;
            case 115: goto label10;
            default: goto label11;
        };

     label0:
        $i3 = virtualinvoke r1.<sun.reflect.ConstantPool: int getIntAt(int)>(i1);
        $b4 = (byte) $i3;
        $r3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b4);
        return $r3;

     label1:
        $i5 = virtualinvoke r1.<sun.reflect.ConstantPool: int getIntAt(int)>(i1);
        $c6 = (char) $i5;
        $r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c6);
        return $r4;

     label2:
        $d0 = virtualinvoke r1.<sun.reflect.ConstantPool: double getDoubleAt(int)>(i1);
        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);
        return $r5;

     label3:
        $f0 = virtualinvoke r1.<sun.reflect.ConstantPool: float getFloatAt(int)>(i1);
        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);
        return $r6;

     label4:
        $i7 = virtualinvoke r1.<sun.reflect.ConstantPool: int getIntAt(int)>(i1);
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);
        return $r7;

     label5:
        $l8 = virtualinvoke r1.<sun.reflect.ConstantPool: long getLongAt(int)>(i1);
        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);
        return $r8;

     label6:
        $i9 = virtualinvoke r1.<sun.reflect.ConstantPool: int getIntAt(int)>(i1);
        $s10 = (short) $i9;
        $r9 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s10);
        return $r9;

     label7:
        $i11 = virtualinvoke r1.<sun.reflect.ConstantPool: int getIntAt(int)>(i1);
        if $i11 == 0 goto label8;

        $z0 = 1;
        goto label9;

     label8:
        $z0 = 0;

     label9:
        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);
        return $r10;

     label10:
        $r11 = virtualinvoke r1.<sun.reflect.ConstantPool: java.lang.String getUTF8At(int)>(i1);
        return $r11;

     label11:
        $r12 = new java.lang.annotation.AnnotationFormatError;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid member-value tag in annotation: ");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r12.<java.lang.annotation.AnnotationFormatError: void <init>(java.lang.String)>($r15);
        throw $r12;
    }

    private static java.lang.Object parseClassValue(java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class)
    {
        java.nio.ByteBuffer r0;
        sun.reflect.ConstantPool r1;
        java.lang.Class r2, $r4, $r7;
        int i0;
        java.lang.String r3, $r14;
        short $s1;
        java.lang.IllegalArgumentException $r5, r6;
        java.lang.NoClassDefFoundError $r8, r9;
        sun.reflect.annotation.TypeNotPresentExceptionProxy $r10, $r13;
        java.lang.TypeNotPresentException $r11, r12;
        java.lang.Throwable $r15;

        r0 := @parameter0: java.nio.ByteBuffer;
        r1 := @parameter1: sun.reflect.ConstantPool;
        r2 := @parameter2: java.lang.Class;
        $s1 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();
        i0 = $s1 & 65535;

     label0:
        r3 = virtualinvoke r1.<sun.reflect.ConstantPool: java.lang.String getUTF8At(int)>(i0);
        $r4 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Class parseSig(java.lang.String,java.lang.Class)>(r3, r2);

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;

     label3:
        r6 = $r5;
        $r7 = virtualinvoke r1.<sun.reflect.ConstantPool: java.lang.Class getClassAt(int)>(i0);

     label4:
        return $r7;

     label5:
        $r8 := @caughtexception;
        r9 = $r8;
        $r10 = new sun.reflect.annotation.TypeNotPresentExceptionProxy;
        specialinvoke $r10.<sun.reflect.annotation.TypeNotPresentExceptionProxy: void <init>(java.lang.String,java.lang.Throwable)>("[unknown]", r9);
        return $r10;

     label6:
        $r11 := @caughtexception;
        r12 = $r11;
        $r13 = new sun.reflect.annotation.TypeNotPresentExceptionProxy;
        $r14 = virtualinvoke r12.<java.lang.TypeNotPresentException: java.lang.String typeName()>();
        $r15 = virtualinvoke r12.<java.lang.TypeNotPresentException: java.lang.Throwable getCause()>();
        specialinvoke $r13.<sun.reflect.annotation.TypeNotPresentExceptionProxy: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r15);
        return $r13;

        catch java.lang.IllegalArgumentException from label0 to label1 with label2;
        catch java.lang.NoClassDefFoundError from label0 to label1 with label5;
        catch java.lang.NoClassDefFoundError from label3 to label4 with label5;
        catch java.lang.TypeNotPresentException from label0 to label1 with label6;
        catch java.lang.TypeNotPresentException from label3 to label4 with label6;
    }

    private static java.lang.Class parseSig(java.lang.String, java.lang.Class)
    {
        java.lang.String r0;
        java.lang.Class r1, $r7, $r9;
        sun.reflect.generics.parser.SignatureParser r2;
        sun.reflect.generics.tree.TypeSignature r3;
        sun.reflect.generics.factory.CoreReflectionFactory r4;
        sun.reflect.generics.visitor.Reifier r5;
        java.lang.reflect.Type r6;
        boolean $z0;
        sun.reflect.generics.scope.ClassScope $r8;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.Class;
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("V");
        if $z0 == 0 goto label0;

        $r7 = <java.lang.Void: java.lang.Class TYPE>;
        return $r7;

     label0:
        r2 = staticinvoke <sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.parser.SignatureParser make()>();
        r3 = virtualinvoke r2.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.TypeSignature parseTypeSig(java.lang.String)>(r0);
        $r8 = staticinvoke <sun.reflect.generics.scope.ClassScope: sun.reflect.generics.scope.ClassScope make(java.lang.Class)>(r1);
        r4 = staticinvoke <sun.reflect.generics.factory.CoreReflectionFactory: sun.reflect.generics.factory.CoreReflectionFactory make(java.lang.reflect.GenericDeclaration,sun.reflect.generics.scope.Scope)>(r1, $r8);
        r5 = staticinvoke <sun.reflect.generics.visitor.Reifier: sun.reflect.generics.visitor.Reifier make(sun.reflect.generics.factory.GenericsFactory)>(r4);
        interfaceinvoke r3.<sun.reflect.generics.tree.TypeSignature: void accept(sun.reflect.generics.visitor.TypeTreeVisitor)>(r5);
        r6 = virtualinvoke r5.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type getResult()>();
        $r9 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Class toClass(java.lang.reflect.Type)>(r6);
        return $r9;
    }

    static java.lang.Class toClass(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0, $r2;
        boolean $z0;
        java.lang.reflect.GenericArrayType $r1;
        java.lang.Class $r3, $r5, $r6;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.reflect.Type;
        $z0 = r0 instanceof java.lang.reflect.GenericArrayType;
        if $z0 == 0 goto label0;

        $r1 = (java.lang.reflect.GenericArrayType) r0;
        $r2 = interfaceinvoke $r1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
        $r3 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Class toClass(java.lang.reflect.Type)>($r2);
        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r3, 0);
        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();
        return $r5;

     label0:
        $r6 = (java.lang.Class) r0;
        return $r6;
    }

    private static java.lang.Object parseEnumValue(java.lang.Class, java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class)
    {
        java.lang.Class r0, r3, $r14;
        java.nio.ByteBuffer r1;
        sun.reflect.ConstantPool r2;
        int i0, i1;
        java.lang.String r4, r5, $r8, $r13, $r20;
        java.lang.StringBuilder $r6, $r10, $r11, $r12, $r16, $r17, $r18, $r19;
        java.lang.IllegalArgumentException r7, $r22;
        short $s2, $s3;
        boolean $z0, $z1;
        sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy $r9, $r15;
        java.lang.Enum $r21;
        sun.reflect.annotation.EnumConstantNotPresentExceptionProxy $r23;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.nio.ByteBuffer;
        r2 := @parameter2: sun.reflect.ConstantPool;
        r3 := @parameter3: java.lang.Class;
        $s2 = virtualinvoke r1.<java.nio.ByteBuffer: short getShort()>();
        i0 = $s2 & 65535;
        r4 = virtualinvoke r2.<sun.reflect.ConstantPool: java.lang.String getUTF8At(int)>(i0);
        $s3 = virtualinvoke r1.<java.nio.ByteBuffer: short getShort()>();
        i1 = $s3 & 65535;
        r5 = virtualinvoke r2.<sun.reflect.ConstantPool: java.lang.String getUTF8At(int)>(i1);
        $z0 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>(";");
        if $z0 != 0 goto label0;

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r4);
        if $z1 != 0 goto label1;

        $r9 = new sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy: void <init>(java.lang.String)>($r13);
        return $r9;

     label0:
        $r14 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Class parseSig(java.lang.String,java.lang.Class)>(r4, r3);
        if r0 == $r14 goto label1;

        $r15 = new sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy;
        $r16 = new java.lang.StringBuilder;
        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r15.<sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy: void <init>(java.lang.String)>($r20);
        return $r15;

     label1:
        $r21 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(r0, r5);

     label2:
        return $r21;

     label3:
        $r22 := @caughtexception;
        r7 = $r22;
        $r23 = new sun.reflect.annotation.EnumConstantNotPresentExceptionProxy;
        specialinvoke $r23.<sun.reflect.annotation.EnumConstantNotPresentExceptionProxy: void <init>(java.lang.Class,java.lang.String)>(r0, r5);
        return $r23;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    private static java.lang.Object parseArray(java.lang.Class, java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class)
    {
        java.lang.Class r0, r3, r4, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19;
        java.nio.ByteBuffer r1;
        sun.reflect.ConstantPool r2;
        int i0;
        short $s1;
        java.lang.Object $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r21, $r22, $r23, $r25;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r24;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.nio.ByteBuffer;
        r2 := @parameter2: sun.reflect.ConstantPool;
        r3 := @parameter3: java.lang.Class;
        $s1 = virtualinvoke r1.<java.nio.ByteBuffer: short getShort()>();
        i0 = $s1 & 65535;
        r4 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();
        $r5 = <java.lang.Byte: java.lang.Class TYPE>;
        if r4 != $r5 goto label0;

        $r6 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseByteArray(int,java.nio.ByteBuffer,sun.reflect.ConstantPool)>(i0, r1, r2);
        return $r6;

     label0:
        $r7 = <java.lang.Character: java.lang.Class TYPE>;
        if r4 != $r7 goto label1;

        $r8 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseCharArray(int,java.nio.ByteBuffer,sun.reflect.ConstantPool)>(i0, r1, r2);
        return $r8;

     label1:
        $r9 = <java.lang.Double: java.lang.Class TYPE>;
        if r4 != $r9 goto label2;

        $r10 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseDoubleArray(int,java.nio.ByteBuffer,sun.reflect.ConstantPool)>(i0, r1, r2);
        return $r10;

     label2:
        $r11 = <java.lang.Float: java.lang.Class TYPE>;
        if r4 != $r11 goto label3;

        $r12 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseFloatArray(int,java.nio.ByteBuffer,sun.reflect.ConstantPool)>(i0, r1, r2);
        return $r12;

     label3:
        $r13 = <java.lang.Integer: java.lang.Class TYPE>;
        if r4 != $r13 goto label4;

        $r14 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseIntArray(int,java.nio.ByteBuffer,sun.reflect.ConstantPool)>(i0, r1, r2);
        return $r14;

     label4:
        $r15 = <java.lang.Long: java.lang.Class TYPE>;
        if r4 != $r15 goto label5;

        $r16 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseLongArray(int,java.nio.ByteBuffer,sun.reflect.ConstantPool)>(i0, r1, r2);
        return $r16;

     label5:
        $r17 = <java.lang.Short: java.lang.Class TYPE>;
        if r4 != $r17 goto label6;

        $r18 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseShortArray(int,java.nio.ByteBuffer,sun.reflect.ConstantPool)>(i0, r1, r2);
        return $r18;

     label6:
        $r19 = <java.lang.Boolean: java.lang.Class TYPE>;
        if r4 != $r19 goto label7;

        $r20 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseBooleanArray(int,java.nio.ByteBuffer,sun.reflect.ConstantPool)>(i0, r1, r2);
        return $r20;

     label7:
        if r4 != class "java/lang/String" goto label8;

        $r21 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseStringArray(int,java.nio.ByteBuffer,sun.reflect.ConstantPool)>(i0, r1, r2);
        return $r21;

     label8:
        if r4 != class "java/lang/Class" goto label9;

        $r22 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseClassArray(int,java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class)>(i0, r1, r2, r3);
        return $r22;

     label9:
        $z0 = virtualinvoke r4.<java.lang.Class: boolean isEnum()>();
        if $z0 == 0 goto label10;

        $r23 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseEnumArray(int,java.lang.Class,java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class)>(i0, r4, r1, r2, r3);
        return $r23;

     label10:
        $z1 = <sun.reflect.annotation.AnnotationParser: boolean $assertionsDisabled>;
        if $z1 != 0 goto label11;

        $z2 = virtualinvoke r4.<java.lang.Class: boolean isAnnotation()>();
        if $z2 != 0 goto label11;

        $r24 = new java.lang.AssertionError;
        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();
        throw $r24;

     label11:
        $r25 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseAnnotationArray(int,java.lang.Class,java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class)>(i0, r4, r1, r2, r3);
        return $r25;
    }

    private static java.lang.Object parseByteArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)
    {
        int i0, i2, i3, $i5;
        java.nio.ByteBuffer r0;
        sun.reflect.ConstantPool r1;
        byte[] r2;
        boolean z0;
        byte b1, $b6;
        short $s4;
        java.io.Serializable $r3;

        i0 := @parameter0: int;
        r0 := @parameter1: java.nio.ByteBuffer;
        r1 := @parameter2: sun.reflect.ConstantPool;
        r2 = newarray (byte)[i0];
        z0 = 0;
        b1 = 0;
        i2 = 0;

     label0:
        if i2 >= i0 goto label3;

        b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();
        if b1 != 66 goto label1;

        $s4 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();
        i3 = $s4 & 65535;
        $i5 = virtualinvoke r1.<sun.reflect.ConstantPool: int getIntAt(int)>(i3);
        $b6 = (byte) $i5;
        r2[i2] = $b6;
        goto label2;

     label1:
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipMemberValue(int,java.nio.ByteBuffer)>(b1, r0);
        z0 = 1;

     label2:
        i2 = i2 + 1;
        goto label0;

     label3:
        if z0 == 0 goto label4;

        $r3 = staticinvoke <sun.reflect.annotation.AnnotationParser: sun.reflect.annotation.ExceptionProxy exceptionProxy(int)>(b1);
        goto label5;

     label4:
        $r3 = r2;

     label5:
        return $r3;
    }

    private static java.lang.Object parseCharArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)
    {
        int i0, i2, i3, $i5;
        java.nio.ByteBuffer r0;
        sun.reflect.ConstantPool r1;
        char[] r2;
        boolean z0;
        byte b1;
        short $s4;
        char $c6;
        java.io.Serializable $r3;

        i0 := @parameter0: int;
        r0 := @parameter1: java.nio.ByteBuffer;
        r1 := @parameter2: sun.reflect.ConstantPool;
        r2 = newarray (char)[i0];
        z0 = 0;
        b1 = 0;
        i2 = 0;

     label0:
        if i2 >= i0 goto label3;

        b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();
        if b1 != 67 goto label1;

        $s4 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();
        i3 = $s4 & 65535;
        $i5 = virtualinvoke r1.<sun.reflect.ConstantPool: int getIntAt(int)>(i3);
        $c6 = (char) $i5;
        r2[i2] = $c6;
        goto label2;

     label1:
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipMemberValue(int,java.nio.ByteBuffer)>(b1, r0);
        z0 = 1;

     label2:
        i2 = i2 + 1;
        goto label0;

     label3:
        if z0 == 0 goto label4;

        $r3 = staticinvoke <sun.reflect.annotation.AnnotationParser: sun.reflect.annotation.ExceptionProxy exceptionProxy(int)>(b1);
        goto label5;

     label4:
        $r3 = r2;

     label5:
        return $r3;
    }

    private static java.lang.Object parseDoubleArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)
    {
        int i0, i2, i3;
        java.nio.ByteBuffer r0;
        sun.reflect.ConstantPool r1;
        double[] r2;
        boolean z0;
        byte b1;
        short $s4;
        double $d0;
        java.io.Serializable $r3;

        i0 := @parameter0: int;
        r0 := @parameter1: java.nio.ByteBuffer;
        r1 := @parameter2: sun.reflect.ConstantPool;
        r2 = newarray (double)[i0];
        z0 = 0;
        b1 = 0;
        i2 = 0;

     label0:
        if i2 >= i0 goto label3;

        b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();
        if b1 != 68 goto label1;

        $s4 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();
        i3 = $s4 & 65535;
        $d0 = virtualinvoke r1.<sun.reflect.ConstantPool: double getDoubleAt(int)>(i3);
        r2[i2] = $d0;
        goto label2;

     label1:
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipMemberValue(int,java.nio.ByteBuffer)>(b1, r0);
        z0 = 1;

     label2:
        i2 = i2 + 1;
        goto label0;

     label3:
        if z0 == 0 goto label4;

        $r3 = staticinvoke <sun.reflect.annotation.AnnotationParser: sun.reflect.annotation.ExceptionProxy exceptionProxy(int)>(b1);
        goto label5;

     label4:
        $r3 = r2;

     label5:
        return $r3;
    }

    private static java.lang.Object parseFloatArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)
    {
        int i0, i2, i3;
        java.nio.ByteBuffer r0;
        sun.reflect.ConstantPool r1;
        float[] r2;
        boolean z0;
        byte b1;
        short $s4;
        float $f0;
        java.io.Serializable $r3;

        i0 := @parameter0: int;
        r0 := @parameter1: java.nio.ByteBuffer;
        r1 := @parameter2: sun.reflect.ConstantPool;
        r2 = newarray (float)[i0];
        z0 = 0;
        b1 = 0;
        i2 = 0;

     label0:
        if i2 >= i0 goto label3;

        b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();
        if b1 != 70 goto label1;

        $s4 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();
        i3 = $s4 & 65535;
        $f0 = virtualinvoke r1.<sun.reflect.ConstantPool: float getFloatAt(int)>(i3);
        r2[i2] = $f0;
        goto label2;

     label1:
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipMemberValue(int,java.nio.ByteBuffer)>(b1, r0);
        z0 = 1;

     label2:
        i2 = i2 + 1;
        goto label0;

     label3:
        if z0 == 0 goto label4;

        $r3 = staticinvoke <sun.reflect.annotation.AnnotationParser: sun.reflect.annotation.ExceptionProxy exceptionProxy(int)>(b1);
        goto label5;

     label4:
        $r3 = r2;

     label5:
        return $r3;
    }

    private static java.lang.Object parseIntArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)
    {
        int i0, i2, i3, $i5;
        java.nio.ByteBuffer r0;
        sun.reflect.ConstantPool r1;
        int[] r2;
        boolean z0;
        byte b1;
        short $s4;
        java.io.Serializable $r3;

        i0 := @parameter0: int;
        r0 := @parameter1: java.nio.ByteBuffer;
        r1 := @parameter2: sun.reflect.ConstantPool;
        r2 = newarray (int)[i0];
        z0 = 0;
        b1 = 0;
        i2 = 0;

     label0:
        if i2 >= i0 goto label3;

        b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();
        if b1 != 73 goto label1;

        $s4 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();
        i3 = $s4 & 65535;
        $i5 = virtualinvoke r1.<sun.reflect.ConstantPool: int getIntAt(int)>(i3);
        r2[i2] = $i5;
        goto label2;

     label1:
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipMemberValue(int,java.nio.ByteBuffer)>(b1, r0);
        z0 = 1;

     label2:
        i2 = i2 + 1;
        goto label0;

     label3:
        if z0 == 0 goto label4;

        $r3 = staticinvoke <sun.reflect.annotation.AnnotationParser: sun.reflect.annotation.ExceptionProxy exceptionProxy(int)>(b1);
        goto label5;

     label4:
        $r3 = r2;

     label5:
        return $r3;
    }

    private static java.lang.Object parseLongArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)
    {
        int i0, i2, i3;
        java.nio.ByteBuffer r0;
        sun.reflect.ConstantPool r1;
        long[] r2;
        boolean z0;
        byte b1;
        short $s4;
        long $l5;
        java.io.Serializable $r3;

        i0 := @parameter0: int;
        r0 := @parameter1: java.nio.ByteBuffer;
        r1 := @parameter2: sun.reflect.ConstantPool;
        r2 = newarray (long)[i0];
        z0 = 0;
        b1 = 0;
        i2 = 0;

     label0:
        if i2 >= i0 goto label3;

        b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();
        if b1 != 74 goto label1;

        $s4 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();
        i3 = $s4 & 65535;
        $l5 = virtualinvoke r1.<sun.reflect.ConstantPool: long getLongAt(int)>(i3);
        r2[i2] = $l5;
        goto label2;

     label1:
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipMemberValue(int,java.nio.ByteBuffer)>(b1, r0);
        z0 = 1;

     label2:
        i2 = i2 + 1;
        goto label0;

     label3:
        if z0 == 0 goto label4;

        $r3 = staticinvoke <sun.reflect.annotation.AnnotationParser: sun.reflect.annotation.ExceptionProxy exceptionProxy(int)>(b1);
        goto label5;

     label4:
        $r3 = r2;

     label5:
        return $r3;
    }

    private static java.lang.Object parseShortArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)
    {
        int i0, i2, i3, $i5;
        java.nio.ByteBuffer r0;
        sun.reflect.ConstantPool r1;
        short[] r2;
        boolean z0;
        byte b1;
        short $s4, $s6;
        java.io.Serializable $r3;

        i0 := @parameter0: int;
        r0 := @parameter1: java.nio.ByteBuffer;
        r1 := @parameter2: sun.reflect.ConstantPool;
        r2 = newarray (short)[i0];
        z0 = 0;
        b1 = 0;
        i2 = 0;

     label0:
        if i2 >= i0 goto label3;

        b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();
        if b1 != 83 goto label1;

        $s4 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();
        i3 = $s4 & 65535;
        $i5 = virtualinvoke r1.<sun.reflect.ConstantPool: int getIntAt(int)>(i3);
        $s6 = (short) $i5;
        r2[i2] = $s6;
        goto label2;

     label1:
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipMemberValue(int,java.nio.ByteBuffer)>(b1, r0);
        z0 = 1;

     label2:
        i2 = i2 + 1;
        goto label0;

     label3:
        if z0 == 0 goto label4;

        $r3 = staticinvoke <sun.reflect.annotation.AnnotationParser: sun.reflect.annotation.ExceptionProxy exceptionProxy(int)>(b1);
        goto label5;

     label4:
        $r3 = r2;

     label5:
        return $r3;
    }

    private static java.lang.Object parseBooleanArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)
    {
        int i0, i2, i3, $i5, $i6;
        java.nio.ByteBuffer r0;
        sun.reflect.ConstantPool r1;
        boolean[] r2;
        boolean z0, $z1;
        byte b1;
        short $s4;
        java.io.Serializable $r4;

        i0 := @parameter0: int;
        r0 := @parameter1: java.nio.ByteBuffer;
        r1 := @parameter2: sun.reflect.ConstantPool;
        r2 = newarray (boolean)[i0];
        z0 = 0;
        b1 = 0;
        i2 = 0;

     label0:
        if i2 >= i0 goto label5;

        b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();
        if b1 != 90 goto label3;

        $s4 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();
        i3 = $s4 & 65535;
        $i5 = i2;
        $i6 = virtualinvoke r1.<sun.reflect.ConstantPool: int getIntAt(int)>(i3);
        if $i6 == 0 goto label1;

        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        r2[$i5] = $z1;
        goto label4;

     label3:
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipMemberValue(int,java.nio.ByteBuffer)>(b1, r0);
        z0 = 1;

     label4:
        i2 = i2 + 1;
        goto label0;

     label5:
        if z0 == 0 goto label6;

        $r4 = staticinvoke <sun.reflect.annotation.AnnotationParser: sun.reflect.annotation.ExceptionProxy exceptionProxy(int)>(b1);
        goto label7;

     label6:
        $r4 = r2;

     label7:
        return $r4;
    }

    private static java.lang.Object parseStringArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool)
    {
        int i0, i2, i3;
        java.nio.ByteBuffer r0;
        sun.reflect.ConstantPool r1;
        java.lang.String[] r2;
        boolean z0;
        byte b1;
        short $s4;
        java.lang.String $r3;
        java.io.Serializable $r4;

        i0 := @parameter0: int;
        r0 := @parameter1: java.nio.ByteBuffer;
        r1 := @parameter2: sun.reflect.ConstantPool;
        r2 = newarray (java.lang.String)[i0];
        z0 = 0;
        b1 = 0;
        i2 = 0;

     label0:
        if i2 >= i0 goto label3;

        b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();
        if b1 != 115 goto label1;

        $s4 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();
        i3 = $s4 & 65535;
        $r3 = virtualinvoke r1.<sun.reflect.ConstantPool: java.lang.String getUTF8At(int)>(i3);
        r2[i2] = $r3;
        goto label2;

     label1:
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipMemberValue(int,java.nio.ByteBuffer)>(b1, r0);
        z0 = 1;

     label2:
        i2 = i2 + 1;
        goto label0;

     label3:
        if z0 == 0 goto label4;

        $r4 = staticinvoke <sun.reflect.annotation.AnnotationParser: sun.reflect.annotation.ExceptionProxy exceptionProxy(int)>(b1);
        goto label5;

     label4:
        $r4 = r2;

     label5:
        return $r4;
    }

    private static java.lang.Object parseClassArray(int, java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class)
    {
        int i0, i2;
        java.nio.ByteBuffer r0;
        sun.reflect.ConstantPool r1;
        java.lang.Class r2;
        java.lang.Object[] r3;
        boolean z0;
        byte b1;
        java.lang.Object $r4;
        java.io.Serializable $r5;

        i0 := @parameter0: int;
        r0 := @parameter1: java.nio.ByteBuffer;
        r1 := @parameter2: sun.reflect.ConstantPool;
        r2 := @parameter3: java.lang.Class;
        r3 = newarray (java.lang.Class)[i0];
        z0 = 0;
        b1 = 0;
        i2 = 0;

     label0:
        if i2 >= i0 goto label3;

        b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();
        if b1 != 99 goto label1;

        $r4 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseClassValue(java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class)>(r0, r1, r2);
        r3[i2] = $r4;
        goto label2;

     label1:
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipMemberValue(int,java.nio.ByteBuffer)>(b1, r0);
        z0 = 1;

     label2:
        i2 = i2 + 1;
        goto label0;

     label3:
        if z0 == 0 goto label4;

        $r5 = staticinvoke <sun.reflect.annotation.AnnotationParser: sun.reflect.annotation.ExceptionProxy exceptionProxy(int)>(b1);
        goto label5;

     label4:
        $r5 = r3;

     label5:
        return $r5;
    }

    private static java.lang.Object parseEnumArray(int, java.lang.Class, java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class)
    {
        int i0, i2;
        java.lang.Class r0, r3;
        java.nio.ByteBuffer r1;
        sun.reflect.ConstantPool r2;
        java.lang.Object[] r4, $r6;
        boolean z0;
        byte b1;
        java.lang.Object $r5, $r7;
        java.io.Serializable $r8;

        i0 := @parameter0: int;
        r0 := @parameter1: java.lang.Class;
        r1 := @parameter2: java.nio.ByteBuffer;
        r2 := @parameter3: sun.reflect.ConstantPool;
        r3 := @parameter4: java.lang.Class;
        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r0, i0);
        $r6 = (java.lang.Object[]) $r5;
        r4 = (java.lang.Object[]) $r6;
        z0 = 0;
        b1 = 0;
        i2 = 0;

     label0:
        if i2 >= i0 goto label3;

        b1 = virtualinvoke r1.<java.nio.ByteBuffer: byte get()>();
        if b1 != 101 goto label1;

        $r7 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.Object parseEnumValue(java.lang.Class,java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class)>(r0, r1, r2, r3);
        r4[i2] = $r7;
        goto label2;

     label1:
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipMemberValue(int,java.nio.ByteBuffer)>(b1, r1);
        z0 = 1;

     label2:
        i2 = i2 + 1;
        goto label0;

     label3:
        if z0 == 0 goto label4;

        $r8 = staticinvoke <sun.reflect.annotation.AnnotationParser: sun.reflect.annotation.ExceptionProxy exceptionProxy(int)>(b1);
        goto label5;

     label4:
        $r8 = r4;

     label5:
        return $r8;
    }

    private static java.lang.Object parseAnnotationArray(int, java.lang.Class, java.nio.ByteBuffer, sun.reflect.ConstantPool, java.lang.Class)
    {
        int i0, i2;
        java.lang.Class r0, r3;
        java.nio.ByteBuffer r1;
        sun.reflect.ConstantPool r2;
        java.lang.Object[] r4, $r6;
        boolean z0;
        byte b1;
        java.lang.Object $r5;
        java.lang.annotation.Annotation $r7;
        java.io.Serializable $r8;

        i0 := @parameter0: int;
        r0 := @parameter1: java.lang.Class;
        r1 := @parameter2: java.nio.ByteBuffer;
        r2 := @parameter3: sun.reflect.ConstantPool;
        r3 := @parameter4: java.lang.Class;
        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r0, i0);
        $r6 = (java.lang.Object[]) $r5;
        r4 = (java.lang.Object[]) $r6;
        z0 = 0;
        b1 = 0;
        i2 = 0;

     label0:
        if i2 >= i0 goto label3;

        b1 = virtualinvoke r1.<java.nio.ByteBuffer: byte get()>();
        if b1 != 64 goto label1;

        $r7 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation parseAnnotation(java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class,boolean)>(r1, r2, r3, 1);
        r4[i2] = $r7;
        goto label2;

     label1:
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipMemberValue(int,java.nio.ByteBuffer)>(b1, r1);
        z0 = 1;

     label2:
        i2 = i2 + 1;
        goto label0;

     label3:
        if z0 == 0 goto label4;

        $r8 = staticinvoke <sun.reflect.annotation.AnnotationParser: sun.reflect.annotation.ExceptionProxy exceptionProxy(int)>(b1);
        goto label5;

     label4:
        $r8 = r4;

     label5:
        return $r8;
    }

    private static sun.reflect.annotation.ExceptionProxy exceptionProxy(int)
    {
        int i0;
        sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;
        $r0 = new sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Array with component tag: ");
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy: void <init>(java.lang.String)>($r4);
        return $r0;
    }

    private static void skipAnnotation(java.nio.ByteBuffer, boolean)
    {
        java.nio.ByteBuffer r0;
        boolean z0;
        int i0, i1;
        short $s3;

        r0 := @parameter0: java.nio.ByteBuffer;
        z0 := @parameter1: boolean;
        if z0 == 0 goto label0;

        virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();

     label0:
        $s3 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();
        i0 = $s3 & 65535;
        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipMemberValue(java.nio.ByteBuffer)>(r0);
        i1 = i1 + 1;
        goto label1;

     label2:
        return;
    }

    private static void skipMemberValue(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        byte b0;

        r0 := @parameter0: java.nio.ByteBuffer;
        b0 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipMemberValue(int,java.nio.ByteBuffer)>(b0, r0);
        return;
    }

    private static void skipMemberValue(int, java.nio.ByteBuffer)
    {
        int i0;
        java.nio.ByteBuffer r0;

        i0 := @parameter0: int;
        r0 := @parameter1: java.nio.ByteBuffer;
        lookupswitch(i0)
        {
            case 64: goto label1;
            case 91: goto label2;
            case 101: goto label0;
            default: goto label3;
        };

     label0:
        virtualinvoke r0.<java.nio.ByteBuffer: int getInt()>();
        goto label4;

     label1:
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipAnnotation(java.nio.ByteBuffer,boolean)>(r0, 1);
        goto label4;

     label2:
        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipArray(java.nio.ByteBuffer)>(r0);
        goto label4;

     label3:
        virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();

     label4:
        return;
    }

    private static void skipArray(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        int i0, i1;
        short $s2;

        r0 := @parameter0: java.nio.ByteBuffer;
        $s2 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();
        i0 = $s2 & 65535;
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        staticinvoke <sun.reflect.annotation.AnnotationParser: void skipMemberValue(java.nio.ByteBuffer)>(r0);
        i1 = i1 + 1;
        goto label0;

     label1:
        return;
    }

    private static boolean contains(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0, r2;
        java.lang.Object r1, r3;
        int i0, i1;

        r0 := @parameter0: java.lang.Object[];
        r1 := @parameter1: java.lang.Object;
        r2 = r0;
        i0 = lengthof r2;
        i1 = 0;

     label0:
        if i1 >= i0 goto label2;

        r3 = r2[i1];
        if r3 != r1 goto label1;

        return 1;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        return 0;
    }

    public static java.lang.annotation.Annotation[] toArray(java.util.Map)
    {
        java.util.Map r0;
        java.lang.annotation.Annotation[] $r1, $r4;
        java.util.Collection $r2;
        java.lang.Object[] $r3;

        r0 := @parameter0: java.util.Map;
        $r2 = interfaceinvoke r0.<java.util.Map: java.util.Collection values()>();
        $r1 = <sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[] EMPTY_ANNOTATION_ARRAY>;
        $r3 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r1);
        $r4 = (java.lang.annotation.Annotation[]) $r3;
        return $r4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.lang.annotation.Annotation[] $r1, $r2;

        $r0 = class "sun/reflect/annotation/AnnotationParser";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.reflect.annotation.AnnotationParser: boolean $assertionsDisabled> = $z1;
        $r1 = newarray (java.lang.annotation.Annotation)[0];
        <sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[] EMPTY_ANNOTATIONS_ARRAY> = $r1;
        $r2 = newarray (java.lang.annotation.Annotation)[0];
        <sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[] EMPTY_ANNOTATION_ARRAY> = $r2;
        return;
    }
}
