public class sun.security.util.Debug extends java.lang.Object
{
    private java.lang.String prefix;
    private static java.lang.String args;
    private static final char[] hexDigits;

    public void <init>()
    {
        sun.security.util.Debug r0;

        r0 := @this: sun.security.util.Debug;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static void Help()
    {
        java.io.PrintStream $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30;

        $r0 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r0.<java.io.PrintStream: void println()>();
        $r1 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("all           turn on all debugging");
        $r2 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("access        print all checkPermission results");
        $r3 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("combiner      SubjectDomainCombiner debugging");
        $r4 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("gssloginconfig");
        $r5 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("configfile    JAAS ConfigFile loading");
        $r6 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("configparser  JAAS ConfigFile parsing");
        $r7 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("              GSS LoginConfigImpl debugging");
        $r8 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("jar           jar verification");
        $r9 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("logincontext  login context results");
        $r10 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("policy        loading and granting");
        $r11 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("provider      security provider debugging");
        $r12 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("scl           permissions SecureClassLoader assigns");
        $r13 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r13.<java.io.PrintStream: void println()>();
        $r14 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>("The following can be used with access:");
        $r15 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r15.<java.io.PrintStream: void println()>();
        $r16 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>("stack         include stack trace");
        $r17 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>("domain        dump all domains in context");
        $r18 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>("failure       before throwing exception, dump stack");
        $r19 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>("              and domain that didn\'t have permission");
        $r20 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r20.<java.io.PrintStream: void println()>();
        $r21 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>("The following can be used with stack and domain:");
        $r22 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r22.<java.io.PrintStream: void println()>();
        $r23 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>("permission=<classname>");
        $r24 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>("              only dump output if specified permission");
        $r25 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>("              is being checked");
        $r26 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>("codebase=<URL>");
        $r27 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r27.<java.io.PrintStream: void println(java.lang.String)>("              only dump output if specified codebase");
        $r28 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.String)>("              is being checked");
        $r29 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r29.<java.io.PrintStream: void println()>();
        $r30 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>("Note: Separate multiple options with a comma");
        staticinvoke <java.lang.System: void exit(int)>(0);
        return;
    }

    public static sun.security.util.Debug getInstance(java.lang.String)
    {
        java.lang.String r0;
        sun.security.util.Debug $r1;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String,java.lang.String)>(r0, r0);
        return $r1;
    }

    public static sun.security.util.Debug getInstance(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        sun.security.util.Debug r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        $z0 = staticinvoke <sun.security.util.Debug: boolean isOn(java.lang.String)>(r0);
        if $z0 == 0 goto label0;

        $r3 = new sun.security.util.Debug;
        specialinvoke $r3.<sun.security.util.Debug: void <init>()>();
        r2 = $r3;
        r2.<sun.security.util.Debug: java.lang.String prefix> = r1;
        return r2;

     label0:
        return null;
    }

    public static boolean isOn(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        $r1 = <sun.security.util.Debug: java.lang.String args>;
        if $r1 != null goto label0;

        return 0;

     label0:
        $r2 = <sun.security.util.Debug: java.lang.String args>;
        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("all");
        if $i0 == -1 goto label1;

        return 1;

     label1:
        $r3 = <sun.security.util.Debug: java.lang.String args>;
        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>(r0);
        if $i1 == -1 goto label2;

        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void println(java.lang.String)
    {
        sun.security.util.Debug r0;
        java.lang.String r1, $r4, $r8;
        java.io.PrintStream $r2;
        java.lang.StringBuilder $r3, $r5, $r6, $r7;

        r0 := @this: sun.security.util.Debug;
        r1 := @parameter0: java.lang.String;
        $r2 = <java.lang.System: java.io.PrintStream err>;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = r0.<sun.security.util.Debug: java.lang.String prefix>;
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r8);
        return;
    }

    public void println()
    {
        sun.security.util.Debug r0;
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        r0 := @this: sun.security.util.Debug;
        $r1 = <java.lang.System: java.io.PrintStream err>;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r3 = r0.<sun.security.util.Debug: java.lang.String prefix>;
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6);
        return;
    }

    public static void println(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r7;
        java.io.PrintStream $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        $r2 = <java.lang.System: java.io.PrintStream err>;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r7);
        return;
    }

    public static java.lang.String toHexString(java.math.BigInteger)
    {
        java.math.BigInteger r0;
        java.lang.String r1, $r9, $r13;
        java.lang.StringBuffer r2, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @parameter0: java.math.BigInteger;
        r1 = virtualinvoke r0.<java.math.BigInteger: java.lang.String toString(int)>(16);
        $r3 = new java.lang.StringBuffer;
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        $i2 = $i1 * 2;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>($i2);
        r2 = $r3;
        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("-");
        if $z0 == 0 goto label0;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   -");
        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);
        goto label1;

     label0:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    ");

     label1:
        $i3 = virtualinvoke r1.<java.lang.String: int length()>();
        $i4 = $i3 % 2;
        if $i4 == 0 goto label2;

        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        i0 = 0;

     label3:
        $i5 = virtualinvoke r1.<java.lang.String: int length()>();
        if i0 >= $i5 goto label5;

        $i6 = i0 + 2;
        $r9 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i6);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);
        i0 = i0 + 2;
        $i7 = virtualinvoke r1.<java.lang.String: int length()>();
        if i0 == $i7 goto label3;

        $i8 = i0 % 64;
        if $i8 != 0 goto label4;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n    ");
        goto label3;

     label4:
        $i9 = i0 % 8;
        if $i9 != 0 goto label3;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        goto label3;

     label5:
        $r13 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r13;
    }

    private static java.lang.String marshal(java.lang.String)
    {
        java.lang.String r0, r3, r4, r5, r9, $r16, r22, r23, r27, r32, $r33, $r39, $r41, $r43;
        java.lang.StringBuffer r1, r2, r8, $r10, $r11, $r15, r21, $r30, r31, r38;
        java.util.regex.Pattern r6, r28;
        java.util.regex.Matcher r7, r29;
        java.lang.StringBuilder $r12, $r13, $r14, $r24, $r25, $r26;
        boolean $z0, $z1;
        java.util.Locale $r40;

        r0 := @parameter0: java.lang.String;
        if r0 == null goto label4;

        $r10 = new java.lang.StringBuffer;
        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();
        r1 = $r10;
        $r11 = new java.lang.StringBuffer;
        specialinvoke $r11.<java.lang.StringBuffer: void <init>(java.lang.String)>(r0);
        r2 = $r11;
        r3 = "[Pp][Ee][Rr][Mm][Ii][Ss][Ss][Ii][Oo][Nn]=";
        r4 = "permission=";
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a-zA-Z_$][a-zA-Z0-9_$]*([.][a-zA-Z_$][a-zA-Z0-9_$]*)*");
        r5 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        r6 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r5);
        r7 = virtualinvoke r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);
        $r15 = new java.lang.StringBuffer;
        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();
        r8 = $r15;

     label0:
        $z0 = virtualinvoke r7.<java.util.regex.Matcher: boolean find()>();
        if $z0 == 0 goto label1;

        r9 = virtualinvoke r7.<java.util.regex.Matcher: java.lang.String group()>();
        $r16 = virtualinvoke r9.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>(r3, r4);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ");
        virtualinvoke r7.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>(r8, "");
        goto label0;

     label1:
        virtualinvoke r7.<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>(r8);
        r21 = r8;
        r22 = "[Cc][Oo][Dd][Ee][Bb][Aa][Ss][Ee]=";
        r23 = "codebase=";
        $r24 = new java.lang.StringBuilder;
        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[^, ;]*");
        r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();
        r28 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r27);
        r29 = virtualinvoke r28.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r21);
        $r30 = new java.lang.StringBuffer;
        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();
        r31 = $r30;

     label2:
        $z1 = virtualinvoke r29.<java.util.regex.Matcher: boolean find()>();
        if $z1 == 0 goto label3;

        r32 = virtualinvoke r29.<java.util.regex.Matcher: java.lang.String group()>();
        $r33 = virtualinvoke r32.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>(r22, r23);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ");
        virtualinvoke r29.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>(r31, "");
        goto label2;

     label3:
        virtualinvoke r29.<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>(r31);
        r38 = r31;
        $r39 = virtualinvoke r38.<java.lang.StringBuffer: java.lang.String toString()>();
        $r40 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r41 = virtualinvoke $r39.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r40);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r41);
        $r43 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r43;

     label4:
        return null;
    }

    public static java.lang.String toString(byte[])
    {
        byte[] r0;
        java.lang.StringBuilder r1, $r2;
        int i0, $i2, $i3, $i4;
        short s1, $s6, $s8;
        byte $b5;
        char[] $r4, $r6;
        char $c7, $c9;
        java.lang.String $r8;

        r0 := @parameter0: byte[];
        if r0 != null goto label0;

        return "(null)";

     label0:
        $r2 = new java.lang.StringBuilder;
        $i2 = lengthof r0;
        $i3 = $i2 * 3;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i3);
        r1 = $r2;
        i0 = 0;

     label1:
        $i4 = lengthof r0;
        if i0 >= $i4 goto label3;

        $b5 = r0[i0];
        s1 = $b5 & 255;
        if i0 == 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

     label2:
        $r4 = <sun.security.util.Debug: char[] hexDigits>;
        $s6 = s1 >>> 4;
        $c7 = $r4[$s6];
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);
        $r6 = <sun.security.util.Debug: char[] hexDigits>;
        $s8 = s1 & 15;
        $c9 = $r6[$s8];
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c9);
        i0 = i0 + 1;
        goto label1;

     label3:
        $r8 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r8;
    }

    static void <clinit>()
    {
        sun.security.action.GetPropertyAction $r0, $r4;
        java.lang.String r1, $r3, $r6, $r8, $r12, $r13, $r14, $r15, $r16, $r17;
        java.lang.Object $r2, $r5;
        java.lang.StringBuilder $r7, $r9, $r10, $r11;
        boolean $z0;
        char[] $r18;

        $r0 = new sun.security.action.GetPropertyAction;
        specialinvoke $r0.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("java.security.debug");
        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        $r3 = (java.lang.String) $r2;
        <sun.security.util.Debug: java.lang.String args> = $r3;
        $r4 = new sun.security.action.GetPropertyAction;
        specialinvoke $r4.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("java.security.auth.debug");
        $r5 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r4);
        r1 = (java.lang.String) $r5;
        $r6 = <sun.security.util.Debug: java.lang.String args>;
        if $r6 != null goto label0;

        <sun.security.util.Debug: java.lang.String args> = r1;
        goto label1;

     label0:
        if r1 == null goto label1;

        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = <sun.security.util.Debug: java.lang.String args>;
        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        <sun.security.util.Debug: java.lang.String args> = $r12;

     label1:
        $r13 = <sun.security.util.Debug: java.lang.String args>;
        if $r13 == null goto label2;

        $r14 = <sun.security.util.Debug: java.lang.String args>;
        $r15 = staticinvoke <sun.security.util.Debug: java.lang.String marshal(java.lang.String)>($r14);
        <sun.security.util.Debug: java.lang.String args> = $r15;
        $r16 = <sun.security.util.Debug: java.lang.String args>;
        $z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("help");
        if $z0 == 0 goto label2;

        staticinvoke <sun.security.util.Debug: void Help()>();

     label2:
        $r17 = "0123456789abcdef";
        $r18 = virtualinvoke $r17.<java.lang.String: char[] toCharArray()>();
        <sun.security.util.Debug: char[] hexDigits> = $r18;
        return;
    }
}
