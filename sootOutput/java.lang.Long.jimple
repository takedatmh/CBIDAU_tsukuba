public final class java.lang.Long extends java.lang.Number implements java.lang.Comparable
{
    public static final long MIN_VALUE;
    public static final long MAX_VALUE;
    public static final java.lang.Class TYPE;
    private final long value;
    public static final int SIZE;
    private static final long serialVersionUID;

    public static java.lang.String toString(long, int)
    {
        long l0, $l5, $l8, $l9, $l10, $l13, $l14;
        int i1, i2, $i4, $i7, $i11, $i15, $i17;
        char[] r0, $r2, $r3;
        boolean z0, $z1;
        java.lang.String $r1, $r4;
        byte $b3, $b6;
        char $c12, $c16;

        l0 := @parameter0: long;
        i1 := @parameter1: int;
        if i1 < 2 goto label0;

        if i1 <= 36 goto label1;

     label0:
        i1 = 10;

     label1:
        if i1 != 10 goto label2;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);
        return $r1;

     label2:
        r0 = newarray (char)[65];
        i2 = 64;
        $b3 = l0 cmp 0L;
        if $b3 >= 0 goto label3;

        $z1 = 1;
        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;
        if z0 != 0 goto label5;

        l0 = neg l0;

     label5:
        $i4 = neg i1;
        $l5 = (long) $i4;
        $b6 = l0 cmp $l5;
        if $b6 > 0 goto label6;

        $i7 = i2;
        i2 = i2 + -1;
        $r2 = <java.lang.Integer: char[] digits>;
        $l8 = (long) i1;
        $l9 = l0 % $l8;
        $l10 = neg $l9;
        $i11 = (int) $l10;
        $c12 = $r2[$i11];
        r0[$i7] = $c12;
        $l13 = (long) i1;
        l0 = l0 / $l13;
        goto label5;

     label6:
        $r3 = <java.lang.Integer: char[] digits>;
        $l14 = neg l0;
        $i15 = (int) $l14;
        $c16 = $r3[$i15];
        r0[i2] = $c16;
        if z0 == 0 goto label7;

        i2 = i2 + -1;
        r0[i2] = 45;

     label7:
        $r4 = new java.lang.String;
        $i17 = 65 - i2;
        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r0, i2, $i17);
        return $r4;
    }

    public static java.lang.String toHexString(long)
    {
        long l0;
        java.lang.String $r0;

        l0 := @parameter0: long;
        $r0 = staticinvoke <java.lang.Long: java.lang.String toUnsignedString(long,int)>(l0, 4);
        return $r0;
    }

    public static java.lang.String toOctalString(long)
    {
        long l0;
        java.lang.String $r0;

        l0 := @parameter0: long;
        $r0 = staticinvoke <java.lang.Long: java.lang.String toUnsignedString(long,int)>(l0, 3);
        return $r0;
    }

    public static java.lang.String toBinaryString(long)
    {
        long l0;
        java.lang.String $r0;

        l0 := @parameter0: long;
        $r0 = staticinvoke <java.lang.Long: java.lang.String toUnsignedString(long,int)>(l0, 1);
        return $r0;
    }

    private static java.lang.String toUnsignedString(long, int)
    {
        long l0, l4, $l6;
        int i1, i2, i3, $i5, $i7, $i10;
        char[] r0, $r1;
        char $c8;
        byte $b9;
        java.lang.String $r2;

        l0 := @parameter0: long;
        i1 := @parameter1: int;
        r0 = newarray (char)[64];
        i2 = 64;
        i3 = 1 << i1;
        $i5 = i3 - 1;
        l4 = (long) $i5;

     label0:
        i2 = i2 + -1;
        $r1 = <java.lang.Integer: char[] digits>;
        $l6 = l0 & l4;
        $i7 = (int) $l6;
        $c8 = $r1[$i7];
        r0[i2] = $c8;
        l0 = l0 >>> i1;
        $b9 = l0 cmp 0L;
        if $b9 != 0 goto label0;

        $r2 = new java.lang.String;
        $i10 = 64 - i2;
        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>(r0, i2, $i10);
        return $r2;
    }

    public static java.lang.String toString(long)
    {
        long l0, $l4;
        int i1, $i5, $i6;
        char[] r0;
        byte $b2, $b3;
        java.lang.String $r1;

        l0 := @parameter0: long;
        $b2 = l0 cmp -9223372036854775808L;
        if $b2 != 0 goto label0;

        return "-9223372036854775808";

     label0:
        $b3 = l0 cmp 0L;
        if $b3 >= 0 goto label1;

        $l4 = neg l0;
        $i5 = staticinvoke <java.lang.Long: int stringSize(long)>($l4);
        $i6 = $i5 + 1;
        goto label2;

     label1:
        $i6 = staticinvoke <java.lang.Long: int stringSize(long)>(l0);

     label2:
        i1 = $i6;
        r0 = newarray (char)[i1];
        staticinvoke <java.lang.Long: void getChars(long,int,char[])>(l0, i1, r0);
        $r1 = new java.lang.String;
        specialinvoke $r1.<java.lang.String: void <init>(char[],boolean)>(r0, 1);
        return $r1;
    }

    static void getChars(long, int, char[])
    {
        long l0, l4, $l10, $l11, $l12, $l13, $l14, $l15;
        int i1, i2, i5, i6, i7, i16, $i19, $i20, $i21, $i22, $i23, i24, i25, $i28, i29, $i30, $i31, $i32, i33, i35;
        char[] r0, $r1, $r2, $r3, $r4, $r5;
        char c3, $c17, $c18, $c26, $c27, $c34;
        byte $b8, $b9;

        l0 := @parameter0: long;
        i1 := @parameter1: int;
        r0 := @parameter2: char[];
        i2 = i1;
        c3 = 0;
        $b8 = l0 cmp 0L;
        if $b8 >= 0 goto label0;

        c3 = 45;
        l0 = neg l0;

     label0:
        $b9 = l0 cmp 2147483647L;
        if $b9 <= 0 goto label1;

        l4 = l0 / 100L;
        $l10 = l4 << 6;
        $l11 = l4 << 5;
        $l12 = $l10 + $l11;
        $l13 = l4 << 2;
        $l14 = $l12 + $l13;
        $l15 = l0 - $l14;
        i5 = (int) $l15;
        l0 = l4;
        i16 = i2 + -1;
        $r1 = <java.lang.Integer: char[] DigitOnes>;
        $c17 = $r1[i5];
        r0[i16] = $c17;
        i2 = i16 + -1;
        $r2 = <java.lang.Integer: char[] DigitTens>;
        $c18 = $r2[i5];
        r0[i2] = $c18;
        goto label0;

     label1:
        i6 = (int) l0;

     label2:
        if i6 < 65536 goto label3;

        i7 = i6 / 100;
        $i19 = i7 << 6;
        $i20 = i7 << 5;
        $i21 = $i19 + $i20;
        $i22 = i7 << 2;
        $i23 = $i21 + $i22;
        i24 = i6 - $i23;
        i6 = i7;
        i25 = i2 + -1;
        $r3 = <java.lang.Integer: char[] DigitOnes>;
        $c26 = $r3[i24];
        r0[i25] = $c26;
        i2 = i25 + -1;
        $r4 = <java.lang.Integer: char[] DigitTens>;
        $c27 = $r4[i24];
        r0[i2] = $c27;
        goto label2;

     label3:
        $i28 = i6 * 52429;
        i29 = $i28 >>> 19;
        $i30 = i29 << 3;
        $i31 = i29 << 1;
        $i32 = $i30 + $i31;
        i33 = i6 - $i32;
        i2 = i2 + -1;
        $r5 = <java.lang.Integer: char[] digits>;
        $c34 = $r5[i33];
        r0[i2] = $c34;
        i6 = i29;
        if i6 != 0 goto label3;

        goto label4;

     label4:
        if c3 == 0 goto label5;

        i35 = i2 + -1;
        r0[i35] = c3;

     label5:
        return;
    }

    static int stringSize(long)
    {
        long l0, l1;
        int i2;
        byte $b3;

        l0 := @parameter0: long;
        l1 = 10L;
        i2 = 1;

     label0:
        if i2 >= 19 goto label2;

        $b3 = l0 cmp l1;
        if $b3 >= 0 goto label1;

        return i2;

     label1:
        l1 = 10L * l1;
        i2 = i2 + 1;
        goto label0;

     label2:
        return 19;
    }

    public static long parseLong(java.lang.String, int) throws java.lang.NumberFormatException
    {
        java.lang.String r0, $r7, $r13;
        int i0, i2, i3, i7, $i9;
        long l1, l4, l6, $l8, $l12, l13, $l14, $l15, $l17, $l18;
        boolean z0;
        char c5, $c10;
        java.lang.NumberFormatException $r1, $r2, $r8, $r14, $r15, $r16, $r17, $r18, $r19;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12;
        byte $b11, $b16;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        if r0 != null goto label0;

        $r1 = new java.lang.NumberFormatException;
        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>("null");
        throw $r1;

     label0:
        if i0 >= 2 goto label1;

        $r2 = new java.lang.NumberFormatException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("radix ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" less than Character.MIN_RADIX");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r7);
        throw $r2;

     label1:
        if i0 <= 36 goto label2;

        $r8 = new java.lang.NumberFormatException;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("radix ");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" greater than Character.MAX_RADIX");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r13);
        throw $r8;

     label2:
        l1 = 0L;
        z0 = 0;
        i2 = 0;
        i3 = virtualinvoke r0.<java.lang.String: int length()>();
        l4 = -9223372036854775807L;
        if i3 <= 0 goto label12;

        c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);
        if c5 >= 48 goto label6;

        if c5 != 45 goto label3;

        z0 = 1;
        l4 = -9223372036854775808L;
        goto label4;

     label3:
        if c5 == 43 goto label4;

        $r14 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(r0);
        throw $r14;

     label4:
        if i3 != 1 goto label5;

        $r15 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(r0);
        throw $r15;

     label5:
        i2 = i2 + 1;

     label6:
        $l8 = (long) i0;
        l6 = l4 / $l8;

     label7:
        if i2 >= i3 goto label11;

        $i9 = i2;
        i2 = i2 + 1;
        $c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i9);
        i7 = staticinvoke <java.lang.Character: int digit(char,int)>($c10, i0);
        if i7 >= 0 goto label8;

        $r16 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(r0);
        throw $r16;

     label8:
        $b11 = l1 cmp l6;
        if $b11 >= 0 goto label9;

        $r17 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(r0);
        throw $r17;

     label9:
        $l12 = (long) i0;
        l13 = l1 * $l12;
        $l14 = (long) i7;
        $l15 = l4 + $l14;
        $b16 = l13 cmp $l15;
        if $b16 >= 0 goto label10;

        $r18 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(r0);
        throw $r18;

     label10:
        $l17 = (long) i7;
        l1 = l13 - $l17;
        goto label7;

     label11:
        goto label13;

     label12:
        $r19 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(r0);
        throw $r19;

     label13:
        if z0 == 0 goto label14;

        $l18 = l1;
        goto label15;

     label14:
        $l18 = neg l1;

     label15:
        return $l18;
    }

    public static long parseLong(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        long $l0;

        r0 := @parameter0: java.lang.String;
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r0, 10);
        return $l0;
    }

    public static java.lang.Long valueOf(java.lang.String, int) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        int i0;
        long $l1;
        java.lang.Long $r1;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r0, i0);
        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);
        return $r1;
    }

    public static java.lang.Long valueOf(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        long $l0;
        java.lang.Long $r1;

        r0 := @parameter0: java.lang.String;
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r0, 10);
        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);
        return $r1;
    }

    public static java.lang.Long valueOf(long)
    {
        long l0;
        byte $b1, $b2;
        java.lang.Long[] $r0;
        int $i3, $i4;
        java.lang.Long $r1, $r2;

        l0 := @parameter0: long;
        $b1 = l0 cmp -128L;
        if $b1 < 0 goto label0;

        $b2 = l0 cmp 127L;
        if $b2 > 0 goto label0;

        $r0 = <java.lang.Long$LongCache: java.lang.Long[] cache>;
        $i3 = (int) l0;
        $i4 = $i3 + 128;
        $r1 = $r0[$i4];
        return $r1;

     label0:
        $r2 = new java.lang.Long;
        specialinvoke $r2.<java.lang.Long: void <init>(long)>(l0);
        return $r2;
    }

    public static java.lang.Long decode(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0, r3, $r6, $r12, $r14;
        byte b0;
        int i1, $i3, $i4, $i5;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        char c2;
        java.lang.Long r1, $r7, r8;
        java.lang.NumberFormatException r2, $r4, $r5, $r9;
        long $l6, $l7;
        java.lang.StringBuilder $r10, $r11, $r13;

        r0 := @parameter0: java.lang.String;
        b0 = 10;
        i1 = 0;
        z0 = 0;
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i3 != 0 goto label0;

        $r4 = new java.lang.NumberFormatException;
        specialinvoke $r4.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Zero length string");
        throw $r4;

     label0:
        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);
        if c2 != 45 goto label1;

        z0 = 1;
        i1 = i1 + 1;
        goto label2;

     label1:
        if c2 != 43 goto label2;

        i1 = i1 + 1;

     label2:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", i1);
        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0X", i1);
        if $z2 == 0 goto label4;

     label3:
        i1 = i1 + 2;
        b0 = 16;
        goto label6;

     label4:
        $z3 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", i1);
        if $z3 == 0 goto label5;

        i1 = i1 + 1;
        b0 = 16;
        goto label6;

     label5:
        $z4 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", i1);
        if $z4 == 0 goto label6;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();
        $i5 = 1 + i1;
        if $i4 <= $i5 goto label6;

        i1 = i1 + 1;
        b0 = 8;

     label6:
        $z5 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("-", i1);
        if $z5 != 0 goto label7;

        $z6 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("+", i1);
        if $z6 == 0 goto label8;

     label7:
        $r5 = new java.lang.NumberFormatException;
        specialinvoke $r5.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Sign character in wrong position");
        throw $r5;

     label8:
        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i1);
        r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String,int)>($r6, b0);
        if z0 == 0 goto label9;

        $l6 = virtualinvoke r1.<java.lang.Long: long longValue()>();
        $l7 = neg $l6;
        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);
        goto label10;

     label9:
        $r7 = r1;

     label10:
        r8 = $r7;

     label11:
        goto label15;

     label12:
        $r9 := @caughtexception;
        r2 = $r9;
        if z0 == 0 goto label13;

        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");
        $r12 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i1);
        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        goto label14;

     label13:
        $r14 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i1);

     label14:
        r3 = $r14;
        r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String,int)>(r3, b0);

     label15:
        return r8;

        catch java.lang.NumberFormatException from label8 to label11 with label12;
    }

    public void <init>(long)
    {
        java.lang.Long r0;
        long l0;

        r0 := @this: java.lang.Long;
        l0 := @parameter0: long;
        specialinvoke r0.<java.lang.Number: void <init>()>();
        r0.<java.lang.Long: long value> = l0;
        return;
    }

    public void <init>(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.Long r0;
        java.lang.String r1;
        long $l0;

        r0 := @this: java.lang.Long;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.lang.Number: void <init>()>();
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r1, 10);
        r0.<java.lang.Long: long value> = $l0;
        return;
    }

    public byte byteValue()
    {
        java.lang.Long r0;
        long $l0;
        int $i1;
        byte $b2;

        r0 := @this: java.lang.Long;
        $l0 = r0.<java.lang.Long: long value>;
        $i1 = (int) $l0;
        $b2 = (byte) $i1;
        return $b2;
    }

    public short shortValue()
    {
        java.lang.Long r0;
        long $l0;
        int $i1;
        short $s2;

        r0 := @this: java.lang.Long;
        $l0 = r0.<java.lang.Long: long value>;
        $i1 = (int) $l0;
        $s2 = (short) $i1;
        return $s2;
    }

    public int intValue()
    {
        java.lang.Long r0;
        long $l0;
        int $i1;

        r0 := @this: java.lang.Long;
        $l0 = r0.<java.lang.Long: long value>;
        $i1 = (int) $l0;
        return $i1;
    }

    public long longValue()
    {
        java.lang.Long r0;
        long $l0;

        r0 := @this: java.lang.Long;
        $l0 = r0.<java.lang.Long: long value>;
        return $l0;
    }

    public float floatValue()
    {
        java.lang.Long r0;
        long $l0;
        float $f0;

        r0 := @this: java.lang.Long;
        $l0 = r0.<java.lang.Long: long value>;
        $f0 = (float) $l0;
        return $f0;
    }

    public double doubleValue()
    {
        java.lang.Long r0;
        long $l0;
        double $d0;

        r0 := @this: java.lang.Long;
        $l0 = r0.<java.lang.Long: long value>;
        $d0 = (double) $l0;
        return $d0;
    }

    public java.lang.String toString()
    {
        java.lang.Long r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: java.lang.Long;
        $l0 = r0.<java.lang.Long: long value>;
        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);
        return $r1;
    }

    public int hashCode()
    {
        java.lang.Long r0;
        long $l0, $l1, $l2, $l3;
        int $i4;

        r0 := @this: java.lang.Long;
        $l0 = r0.<java.lang.Long: long value>;
        $l1 = r0.<java.lang.Long: long value>;
        $l2 = $l1 >>> 32;
        $l3 = $l0 ^ $l2;
        $i4 = (int) $l3;
        return $i4;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Long r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        long $l0, $l1;
        byte $b2;

        r0 := @this: java.lang.Long;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.lang.Long;
        if $z0 == 0 goto label2;

        $l0 = r0.<java.lang.Long: long value>;
        $r2 = (java.lang.Long) r1;
        $l1 = virtualinvoke $r2.<java.lang.Long: long longValue()>();
        $b2 = $l0 cmp $l1;
        if $b2 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;

     label2:
        return 0;
    }

    public static java.lang.Long getLong(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Long $r1;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)>(r0, null);
        return $r1;
    }

    public static java.lang.Long getLong(java.lang.String, long)
    {
        java.lang.String r0;
        long l0;
        java.lang.Long r1, $r2;

        r0 := @parameter0: java.lang.String;
        l0 := @parameter1: long;
        r1 = staticinvoke <java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)>(r0, null);
        if r1 != null goto label0;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);
        goto label1;

     label0:
        $r2 = r1;

     label1:
        return $r2;
    }

    public static java.lang.Long getLong(java.lang.String, java.lang.Long)
    {
        java.lang.String r0, r2;
        java.lang.Long r1, $r7;
        java.lang.IllegalArgumentException r3, $r4;
        java.lang.NullPointerException $r5, r6;
        java.lang.NumberFormatException $r8, r9;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.Long;
        r2 = null;

     label0:
        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0);

     label1:
        goto label4;

     label2:
        $r4 := @caughtexception;
        r3 = $r4;
        goto label4;

     label3:
        $r5 := @caughtexception;
        r6 = $r5;

     label4:
        if r2 == null goto label8;

     label5:
        $r7 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(r2);

     label6:
        return $r7;

     label7:
        $r8 := @caughtexception;
        r9 = $r8;

     label8:
        return r1;

        catch java.lang.IllegalArgumentException from label0 to label1 with label2;
        catch java.lang.NullPointerException from label0 to label1 with label3;
        catch java.lang.NumberFormatException from label5 to label6 with label7;
    }

    public int compareTo(java.lang.Long)
    {
        java.lang.Long r0, r1;
        long $l0, $l1;
        int $i2;

        r0 := @this: java.lang.Long;
        r1 := @parameter0: java.lang.Long;
        $l0 = r0.<java.lang.Long: long value>;
        $l1 = r1.<java.lang.Long: long value>;
        $i2 = staticinvoke <java.lang.Long: int compare(long,long)>($l0, $l1);
        return $i2;
    }

    public static int compare(long, long)
    {
        long l0, l1;
        byte $b2, $b3, $b4;

        l0 := @parameter0: long;
        l1 := @parameter1: long;
        $b2 = l0 cmp l1;
        if $b2 >= 0 goto label0;

        $b3 = -1;
        goto label2;

     label0:
        $b4 = l0 cmp l1;
        if $b4 != 0 goto label1;

        $b3 = 0;
        goto label2;

     label1:
        $b3 = 1;

     label2:
        return $b3;
    }

    public static long highestOneBit(long)
    {
        long l0, $l1, l2, $l3, l4, $l5, l6, $l7, l8, $l9, l10, $l11, l12, $l13, $l14;

        l0 := @parameter0: long;
        $l1 = l0 >> 1;
        l2 = l0 | $l1;
        $l3 = l2 >> 2;
        l4 = l2 | $l3;
        $l5 = l4 >> 4;
        l6 = l4 | $l5;
        $l7 = l6 >> 8;
        l8 = l6 | $l7;
        $l9 = l8 >> 16;
        l10 = l8 | $l9;
        $l11 = l10 >> 32;
        l12 = l10 | $l11;
        $l13 = l12 >>> 1;
        $l14 = l12 - $l13;
        return $l14;
    }

    public static long lowestOneBit(long)
    {
        long l0, $l1, $l2;

        l0 := @parameter0: long;
        $l1 = neg l0;
        $l2 = l0 & $l1;
        return $l2;
    }

    public static int numberOfLeadingZeros(long)
    {
        long l0, $l4;
        int i1, i2, $i5, $i6, $i7, $i8, $i9, i10;
        byte $b3;

        l0 := @parameter0: long;
        $b3 = l0 cmp 0L;
        if $b3 != 0 goto label0;

        return 64;

     label0:
        i1 = 1;
        $l4 = l0 >>> 32;
        i2 = (int) $l4;
        if i2 != 0 goto label1;

        i1 = i1 + 32;
        i2 = (int) l0;

     label1:
        $i5 = i2 >>> 16;
        if $i5 != 0 goto label2;

        i1 = i1 + 16;
        i2 = i2 << 16;

     label2:
        $i6 = i2 >>> 24;
        if $i6 != 0 goto label3;

        i1 = i1 + 8;
        i2 = i2 << 8;

     label3:
        $i7 = i2 >>> 28;
        if $i7 != 0 goto label4;

        i1 = i1 + 4;
        i2 = i2 << 4;

     label4:
        $i8 = i2 >>> 30;
        if $i8 != 0 goto label5;

        i1 = i1 + 2;
        i2 = i2 << 2;

     label5:
        $i9 = i2 >>> 31;
        i10 = i1 - $i9;
        return i10;
    }

    public static int numberOfTrailingZeros(long)
    {
        long l0, $l5;
        int i1, i2, i3, i6, i7, i8, i9, $i10, $i11, $i12;
        byte $b4;

        l0 := @parameter0: long;
        $b4 = l0 cmp 0L;
        if $b4 != 0 goto label0;

        return 64;

     label0:
        i1 = 63;
        i2 = (int) l0;
        if i2 == 0 goto label1;

        i1 = i1 - 32;
        i3 = i2;
        goto label2;

     label1:
        $l5 = l0 >>> 32;
        i3 = (int) $l5;

     label2:
        i6 = i3 << 16;
        if i6 == 0 goto label3;

        i1 = i1 - 16;
        i3 = i6;

     label3:
        i7 = i3 << 8;
        if i7 == 0 goto label4;

        i1 = i1 - 8;
        i3 = i7;

     label4:
        i8 = i3 << 4;
        if i8 == 0 goto label5;

        i1 = i1 - 4;
        i3 = i8;

     label5:
        i9 = i3 << 2;
        if i9 == 0 goto label6;

        i1 = i1 - 2;
        i3 = i9;

     label6:
        $i10 = i3 << 1;
        $i11 = $i10 >>> 31;
        $i12 = i1 - $i11;
        return $i12;
    }

    public static int bitCount(long)
    {
        long l0, $l1, $l2, l3, $l4, $l5, $l6, l7, $l8, $l9, l10, $l11, l12, $l13, l14, $l15, l16;
        int $i17, $i18;

        l0 := @parameter0: long;
        $l1 = l0 >>> 1;
        $l2 = $l1 & 6148914691236517205L;
        l3 = l0 - $l2;
        $l4 = l3 & 3689348814741910323L;
        $l5 = l3 >>> 2;
        $l6 = $l5 & 3689348814741910323L;
        l7 = $l4 + $l6;
        $l8 = l7 >>> 4;
        $l9 = l7 + $l8;
        l10 = $l9 & 1085102592571150095L;
        $l11 = l10 >>> 8;
        l12 = l10 + $l11;
        $l13 = l12 >>> 16;
        l14 = l12 + $l13;
        $l15 = l14 >>> 32;
        l16 = l14 + $l15;
        $i17 = (int) l16;
        $i18 = $i17 & 127;
        return $i18;
    }

    public static long rotateLeft(long, int)
    {
        long l0, $l2, $l4, $l5;
        int i1, $i3;

        l0 := @parameter0: long;
        i1 := @parameter1: int;
        $l2 = l0 << i1;
        $i3 = neg i1;
        $l4 = l0 >>> $i3;
        $l5 = $l2 | $l4;
        return $l5;
    }

    public static long rotateRight(long, int)
    {
        long l0, $l2, $l4, $l5;
        int i1, $i3;

        l0 := @parameter0: long;
        i1 := @parameter1: int;
        $l2 = l0 >>> i1;
        $i3 = neg i1;
        $l4 = l0 << $i3;
        $l5 = $l2 | $l4;
        return $l5;
    }

    public static long reverse(long)
    {
        long l0, $l1, $l2, $l3, $l4, l5, $l6, $l7, $l8, $l9, l10, $l11, $l12, $l13, $l14, l15, $l16, $l17, $l18, $l19, l20, $l21, $l22, $l23, $l24, $l25, $l26, $l27, $l28, l29;

        l0 := @parameter0: long;
        $l1 = l0 & 6148914691236517205L;
        $l2 = $l1 << 1;
        $l3 = l0 >>> 1;
        $l4 = $l3 & 6148914691236517205L;
        l5 = $l2 | $l4;
        $l6 = l5 & 3689348814741910323L;
        $l7 = $l6 << 2;
        $l8 = l5 >>> 2;
        $l9 = $l8 & 3689348814741910323L;
        l10 = $l7 | $l9;
        $l11 = l10 & 1085102592571150095L;
        $l12 = $l11 << 4;
        $l13 = l10 >>> 4;
        $l14 = $l13 & 1085102592571150095L;
        l15 = $l12 | $l14;
        $l16 = l15 & 71777214294589695L;
        $l17 = $l16 << 8;
        $l18 = l15 >>> 8;
        $l19 = $l18 & 71777214294589695L;
        l20 = $l17 | $l19;
        $l21 = l20 << 48;
        $l22 = l20 & 4294901760L;
        $l23 = $l22 << 16;
        $l24 = $l21 | $l23;
        $l25 = l20 >>> 16;
        $l26 = $l25 & 4294901760L;
        $l27 = $l24 | $l26;
        $l28 = l20 >>> 48;
        l29 = $l27 | $l28;
        return l29;
    }

    public static int signum(long)
    {
        long l0, $l1, $l2, $l3, $l4;
        int $i5;

        l0 := @parameter0: long;
        $l1 = l0 >> 63;
        $l2 = neg l0;
        $l3 = $l2 >>> 63;
        $l4 = $l1 | $l3;
        $i5 = (int) $l4;
        return $i5;
    }

    public static long reverseBytes(long)
    {
        long l0, $l1, $l2, $l3, $l4, l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14;

        l0 := @parameter0: long;
        $l1 = l0 & 71777214294589695L;
        $l2 = $l1 << 8;
        $l3 = l0 >>> 8;
        $l4 = $l3 & 71777214294589695L;
        l5 = $l2 | $l4;
        $l6 = l5 << 48;
        $l7 = l5 & 4294901760L;
        $l8 = $l7 << 16;
        $l9 = $l6 | $l8;
        $l10 = l5 >>> 16;
        $l11 = $l10 & 4294901760L;
        $l12 = $l9 | $l11;
        $l13 = l5 >>> 48;
        $l14 = $l12 | $l13;
        return $l14;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Long r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.lang.Long;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.lang.Long) r1;
        $i0 = virtualinvoke r0.<java.lang.Long: int compareTo(java.lang.Long)>($r2);
        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;

        $r0 = staticinvoke <java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>("long");
        <java.lang.Long: java.lang.Class TYPE> = $r0;
        return;
    }
}
