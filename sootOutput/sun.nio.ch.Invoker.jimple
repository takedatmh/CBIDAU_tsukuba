class sun.nio.ch.Invoker extends java.lang.Object
{
    private static final int maxHandlerInvokeCount;
    private static final java.lang.ThreadLocal myGroupAndInvokeCount;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        sun.nio.ch.Invoker r0;

        r0 := @this: sun.nio.ch.Invoker;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    static void bindToGroup(sun.nio.ch.AsynchronousChannelGroupImpl)
    {
        sun.nio.ch.AsynchronousChannelGroupImpl r0;
        java.lang.ThreadLocal $r1;
        sun.nio.ch.Invoker$GroupAndInvokeCount $r2;

        r0 := @parameter0: sun.nio.ch.AsynchronousChannelGroupImpl;
        $r1 = <sun.nio.ch.Invoker: java.lang.ThreadLocal myGroupAndInvokeCount>;
        $r2 = new sun.nio.ch.Invoker$GroupAndInvokeCount;
        specialinvoke $r2.<sun.nio.ch.Invoker$GroupAndInvokeCount: void <init>(sun.nio.ch.AsynchronousChannelGroupImpl)>(r0);
        virtualinvoke $r1.<java.lang.ThreadLocal: void set(java.lang.Object)>($r2);
        return;
    }

    static sun.nio.ch.Invoker$GroupAndInvokeCount getGroupAndInvokeCount()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        sun.nio.ch.Invoker$GroupAndInvokeCount $r2;

        $r0 = <sun.nio.ch.Invoker: java.lang.ThreadLocal myGroupAndInvokeCount>;
        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();
        $r2 = (sun.nio.ch.Invoker$GroupAndInvokeCount) $r1;
        return $r2;
    }

    static boolean isBoundToAnyGroup()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 = <sun.nio.ch.Invoker: java.lang.ThreadLocal myGroupAndInvokeCount>;
        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();
        if $r1 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    static boolean mayInvokeDirect(sun.nio.ch.Invoker$GroupAndInvokeCount, sun.nio.ch.AsynchronousChannelGroupImpl)
    {
        sun.nio.ch.Invoker$GroupAndInvokeCount r0;
        sun.nio.ch.AsynchronousChannelGroupImpl r1, $r2;
        int $i0, $i1;

        r0 := @parameter0: sun.nio.ch.Invoker$GroupAndInvokeCount;
        r1 := @parameter1: sun.nio.ch.AsynchronousChannelGroupImpl;
        if r0 == null goto label0;

        $r2 = virtualinvoke r0.<sun.nio.ch.Invoker$GroupAndInvokeCount: sun.nio.ch.AsynchronousChannelGroupImpl group()>();
        if $r2 != r1 goto label0;

        $i0 = virtualinvoke r0.<sun.nio.ch.Invoker$GroupAndInvokeCount: int invokeCount()>();
        $i1 = <sun.nio.ch.Invoker: int maxHandlerInvokeCount>;
        if $i0 >= $i1 goto label0;

        return 1;

     label0:
        return 0;
    }

    static void invokeUnchecked(java.nio.channels.CompletionHandler, java.lang.Object, java.lang.Object, java.lang.Throwable)
    {
        java.nio.channels.CompletionHandler r0;
        java.lang.Object r1, r2, $r8;
        java.lang.Throwable r3;
        java.lang.Thread r4;
        sun.nio.ch.Invoker$GroupAndInvokeCount r5;
        java.lang.SecurityManager $r6;
        boolean $z1;
        java.lang.ThreadLocal $r7, $r10;
        sun.misc.InnocuousThread $r9;

        r0 := @parameter0: java.nio.channels.CompletionHandler;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.lang.Object;
        r3 := @parameter3: java.lang.Throwable;
        if r3 != null goto label0;

        interfaceinvoke r0.<java.nio.channels.CompletionHandler: void completed(java.lang.Object,java.lang.Object)>(r2, r1);
        goto label1;

     label0:
        interfaceinvoke r0.<java.nio.channels.CompletionHandler: void failed(java.lang.Throwable,java.lang.Object)>(r3, r1);

     label1:
        staticinvoke <java.lang.Thread: boolean interrupted()>();
        $r6 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if $r6 == null goto label2;

        r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $z1 = r4 instanceof sun.misc.InnocuousThread;
        if $z1 == 0 goto label2;

        $r7 = <sun.nio.ch.Invoker: java.lang.ThreadLocal myGroupAndInvokeCount>;
        $r8 = virtualinvoke $r7.<java.lang.ThreadLocal: java.lang.Object get()>();
        r5 = (sun.nio.ch.Invoker$GroupAndInvokeCount) $r8;
        $r9 = (sun.misc.InnocuousThread) r4;
        virtualinvoke $r9.<sun.misc.InnocuousThread: void eraseThreadLocals()>();
        if r5 == null goto label2;

        $r10 = <sun.nio.ch.Invoker: java.lang.ThreadLocal myGroupAndInvokeCount>;
        virtualinvoke $r10.<java.lang.ThreadLocal: void set(java.lang.Object)>(r5);

     label2:
        return;
    }

    static void invokeDirect(sun.nio.ch.Invoker$GroupAndInvokeCount, java.nio.channels.CompletionHandler, java.lang.Object, java.lang.Object, java.lang.Throwable)
    {
        sun.nio.ch.Invoker$GroupAndInvokeCount r0;
        java.nio.channels.CompletionHandler r1;
        java.lang.Object r2, r3;
        java.lang.Throwable r4;

        r0 := @parameter0: sun.nio.ch.Invoker$GroupAndInvokeCount;
        r1 := @parameter1: java.nio.channels.CompletionHandler;
        r2 := @parameter2: java.lang.Object;
        r3 := @parameter3: java.lang.Object;
        r4 := @parameter4: java.lang.Throwable;
        virtualinvoke r0.<sun.nio.ch.Invoker$GroupAndInvokeCount: void incrementInvokeCount()>();
        staticinvoke <sun.nio.ch.Invoker: void invokeUnchecked(java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r1, r2, r3, r4);
        return;
    }

    static void invoke(java.nio.channels.AsynchronousChannel, java.nio.channels.CompletionHandler, java.lang.Object, java.lang.Object, java.lang.Throwable)
    {
        java.nio.channels.AsynchronousChannel r0;
        java.nio.channels.CompletionHandler r1;
        java.lang.Object r2, r3, $r8;
        java.lang.Throwable r4;
        boolean z0, z1;
        sun.nio.ch.Invoker$GroupAndInvokeCount r5;
        java.util.concurrent.RejectedExecutionException r6, $r12;
        java.lang.ThreadLocal $r7;
        sun.nio.ch.AsynchronousChannelGroupImpl $r9, $r11;
        sun.nio.ch.Groupable $r10;
        int $i0, $i1;
        java.nio.channels.ShutdownChannelGroupException $r13;

        r0 := @parameter0: java.nio.channels.AsynchronousChannel;
        r1 := @parameter1: java.nio.channels.CompletionHandler;
        r2 := @parameter2: java.lang.Object;
        r3 := @parameter3: java.lang.Object;
        r4 := @parameter4: java.lang.Throwable;
        z0 = 0;
        z1 = 0;
        $r7 = <sun.nio.ch.Invoker: java.lang.ThreadLocal myGroupAndInvokeCount>;
        $r8 = virtualinvoke $r7.<java.lang.ThreadLocal: java.lang.Object get()>();
        r5 = (sun.nio.ch.Invoker$GroupAndInvokeCount) $r8;
        if r5 == null goto label1;

        $r9 = virtualinvoke r5.<sun.nio.ch.Invoker$GroupAndInvokeCount: sun.nio.ch.AsynchronousChannelGroupImpl group()>();
        $r10 = (sun.nio.ch.Groupable) r0;
        $r11 = interfaceinvoke $r10.<sun.nio.ch.Groupable: sun.nio.ch.AsynchronousChannelGroupImpl group()>();
        if $r9 != $r11 goto label0;

        z1 = 1;

     label0:
        if z1 == 0 goto label1;

        $i0 = virtualinvoke r5.<sun.nio.ch.Invoker$GroupAndInvokeCount: int invokeCount()>();
        $i1 = <sun.nio.ch.Invoker: int maxHandlerInvokeCount>;
        if $i0 >= $i1 goto label1;

        z0 = 1;

     label1:
        if z0 == 0 goto label2;

        staticinvoke <sun.nio.ch.Invoker: void invokeDirect(sun.nio.ch.Invoker$GroupAndInvokeCount,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r5, r1, r2, r3, r4);
        goto label6;

     label2:
        staticinvoke <sun.nio.ch.Invoker: void invokeIndirectly(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r0, r1, r2, r3, r4);

     label3:
        goto label6;

     label4:
        $r12 := @caughtexception;
        r6 = $r12;
        if z1 == 0 goto label5;

        staticinvoke <sun.nio.ch.Invoker: void invokeDirect(sun.nio.ch.Invoker$GroupAndInvokeCount,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r5, r1, r2, r3, r4);
        goto label6;

     label5:
        $r13 = new java.nio.channels.ShutdownChannelGroupException;
        specialinvoke $r13.<java.nio.channels.ShutdownChannelGroupException: void <init>()>();
        throw $r13;

     label6:
        return;

        catch java.util.concurrent.RejectedExecutionException from label2 to label3 with label4;
    }

    static void invokeIndirectly(java.nio.channels.AsynchronousChannel, java.nio.channels.CompletionHandler, java.lang.Object, java.lang.Object, java.lang.Throwable)
    {
        java.nio.channels.AsynchronousChannel r0;
        java.nio.channels.CompletionHandler r1;
        java.lang.Object r2, r3;
        java.lang.Throwable r4;
        sun.nio.ch.Invoker$2 $r5;
        java.util.concurrent.RejectedExecutionException r6, $r9;
        sun.nio.ch.Groupable $r7;
        sun.nio.ch.AsynchronousChannelGroupImpl $r8;
        java.nio.channels.ShutdownChannelGroupException $r10;

        r0 := @parameter0: java.nio.channels.AsynchronousChannel;
        r1 := @parameter1: java.nio.channels.CompletionHandler;
        r2 := @parameter2: java.lang.Object;
        r3 := @parameter3: java.lang.Object;
        r4 := @parameter4: java.lang.Throwable;

     label0:
        $r7 = (sun.nio.ch.Groupable) r0;
        $r8 = interfaceinvoke $r7.<sun.nio.ch.Groupable: sun.nio.ch.AsynchronousChannelGroupImpl group()>();
        $r5 = new sun.nio.ch.Invoker$2;
        specialinvoke $r5.<sun.nio.ch.Invoker$2: void <init>(java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r1, r2, r3, r4);
        virtualinvoke $r8.<sun.nio.ch.AsynchronousChannelGroupImpl: void executeOnPooledThread(java.lang.Runnable)>($r5);

     label1:
        goto label3;

     label2:
        $r9 := @caughtexception;
        r6 = $r9;
        $r10 = new java.nio.channels.ShutdownChannelGroupException;
        specialinvoke $r10.<java.nio.channels.ShutdownChannelGroupException: void <init>()>();
        throw $r10;

     label3:
        return;

        catch java.util.concurrent.RejectedExecutionException from label0 to label1 with label2;
    }

    static void invokeIndirectly(java.nio.channels.CompletionHandler, java.lang.Object, java.lang.Object, java.lang.Throwable, java.util.concurrent.Executor)
    {
        java.nio.channels.CompletionHandler r0;
        java.lang.Object r1, r2;
        java.lang.Throwable r3;
        java.util.concurrent.Executor r4;
        sun.nio.ch.Invoker$3 $r5;
        java.util.concurrent.RejectedExecutionException r6, $r7;
        java.nio.channels.ShutdownChannelGroupException $r8;

        r0 := @parameter0: java.nio.channels.CompletionHandler;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.lang.Object;
        r3 := @parameter3: java.lang.Throwable;
        r4 := @parameter4: java.util.concurrent.Executor;

     label0:
        $r5 = new sun.nio.ch.Invoker$3;
        specialinvoke $r5.<sun.nio.ch.Invoker$3: void <init>(java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r0, r1, r2, r3);
        interfaceinvoke r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

     label1:
        goto label3;

     label2:
        $r7 := @caughtexception;
        r6 = $r7;
        $r8 = new java.nio.channels.ShutdownChannelGroupException;
        specialinvoke $r8.<java.nio.channels.ShutdownChannelGroupException: void <init>()>();
        throw $r8;

     label3:
        return;

        catch java.util.concurrent.RejectedExecutionException from label0 to label1 with label2;
    }

    static void invokeOnThreadInThreadPool(sun.nio.ch.Groupable, java.lang.Runnable)
    {
        sun.nio.ch.Groupable r0;
        java.lang.Runnable r1;
        java.lang.ThreadLocal $r2;
        sun.nio.ch.Invoker$GroupAndInvokeCount r3;
        sun.nio.ch.AsynchronousChannelGroupImpl r4, $r7;
        boolean z0, $z1;
        java.util.concurrent.RejectedExecutionException r5, $r8;
        java.lang.Object $r6;
        java.nio.channels.ShutdownChannelGroupException $r9;

        r0 := @parameter0: sun.nio.ch.Groupable;
        r1 := @parameter1: java.lang.Runnable;
        $r2 = <sun.nio.ch.Invoker: java.lang.ThreadLocal myGroupAndInvokeCount>;
        $r6 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();
        r3 = (sun.nio.ch.Invoker$GroupAndInvokeCount) $r6;
        r4 = interfaceinvoke r0.<sun.nio.ch.Groupable: sun.nio.ch.AsynchronousChannelGroupImpl group()>();
        if r3 != null goto label0;

        z0 = 0;
        goto label3;

     label0:
        $r7 = staticinvoke <sun.nio.ch.Invoker$GroupAndInvokeCount: sun.nio.ch.AsynchronousChannelGroupImpl access$100(sun.nio.ch.Invoker$GroupAndInvokeCount)>(r3);
        if $r7 != r4 goto label1;

        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

     label3:
        if z0 == 0 goto label4;

        interfaceinvoke r1.<java.lang.Runnable: void run()>();
        goto label5;

     label4:
        virtualinvoke r4.<sun.nio.ch.AsynchronousChannelGroupImpl: void executeOnPooledThread(java.lang.Runnable)>(r1);

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;
        r5 = $r8;
        $r9 = new java.nio.channels.ShutdownChannelGroupException;
        specialinvoke $r9.<java.nio.channels.ShutdownChannelGroupException: void <init>()>();
        throw $r9;

     label7:
        return;

        catch java.util.concurrent.RejectedExecutionException from label3 to label5 with label6;
    }

    static void invokeUnchecked(sun.nio.ch.PendingFuture)
    {
        sun.nio.ch.PendingFuture r0;
        boolean $z0, $z1;
        java.nio.channels.CompletionHandler r1;
        java.lang.AssertionError $r2;
        java.lang.Object $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @parameter0: sun.nio.ch.PendingFuture;
        $z0 = <sun.nio.ch.Invoker: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r0.<sun.nio.ch.PendingFuture: boolean isDone()>();
        if $z1 != 0 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        r1 = virtualinvoke r0.<sun.nio.ch.PendingFuture: java.nio.channels.CompletionHandler handler()>();
        if r1 == null goto label1;

        $r3 = virtualinvoke r0.<sun.nio.ch.PendingFuture: java.lang.Object attachment()>();
        $r4 = virtualinvoke r0.<sun.nio.ch.PendingFuture: java.lang.Object value()>();
        $r5 = virtualinvoke r0.<sun.nio.ch.PendingFuture: java.lang.Throwable exception()>();
        staticinvoke <sun.nio.ch.Invoker: void invokeUnchecked(java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r1, $r3, $r4, $r5);

     label1:
        return;
    }

    static void invoke(sun.nio.ch.PendingFuture)
    {
        sun.nio.ch.PendingFuture r0;
        boolean $z0, $z1;
        java.nio.channels.CompletionHandler r1;
        java.lang.AssertionError $r2;
        java.nio.channels.AsynchronousChannel $r3;
        java.lang.Object $r4, $r5;
        java.lang.Throwable $r6;

        r0 := @parameter0: sun.nio.ch.PendingFuture;
        $z0 = <sun.nio.ch.Invoker: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r0.<sun.nio.ch.PendingFuture: boolean isDone()>();
        if $z1 != 0 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        r1 = virtualinvoke r0.<sun.nio.ch.PendingFuture: java.nio.channels.CompletionHandler handler()>();
        if r1 == null goto label1;

        $r3 = virtualinvoke r0.<sun.nio.ch.PendingFuture: java.nio.channels.AsynchronousChannel channel()>();
        $r4 = virtualinvoke r0.<sun.nio.ch.PendingFuture: java.lang.Object attachment()>();
        $r5 = virtualinvoke r0.<sun.nio.ch.PendingFuture: java.lang.Object value()>();
        $r6 = virtualinvoke r0.<sun.nio.ch.PendingFuture: java.lang.Throwable exception()>();
        staticinvoke <sun.nio.ch.Invoker: void invoke(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>($r3, r1, $r4, $r5, $r6);

     label1:
        return;
    }

    static void invokeIndirectly(sun.nio.ch.PendingFuture)
    {
        sun.nio.ch.PendingFuture r0;
        boolean $z0, $z1;
        java.nio.channels.CompletionHandler r1;
        java.lang.AssertionError $r2;
        java.nio.channels.AsynchronousChannel $r3;
        java.lang.Object $r4, $r5;
        java.lang.Throwable $r6;

        r0 := @parameter0: sun.nio.ch.PendingFuture;
        $z0 = <sun.nio.ch.Invoker: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r0.<sun.nio.ch.PendingFuture: boolean isDone()>();
        if $z1 != 0 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        r1 = virtualinvoke r0.<sun.nio.ch.PendingFuture: java.nio.channels.CompletionHandler handler()>();
        if r1 == null goto label1;

        $r3 = virtualinvoke r0.<sun.nio.ch.PendingFuture: java.nio.channels.AsynchronousChannel channel()>();
        $r4 = virtualinvoke r0.<sun.nio.ch.PendingFuture: java.lang.Object attachment()>();
        $r5 = virtualinvoke r0.<sun.nio.ch.PendingFuture: java.lang.Object value()>();
        $r6 = virtualinvoke r0.<sun.nio.ch.PendingFuture: java.lang.Throwable exception()>();
        staticinvoke <sun.nio.ch.Invoker: void invokeIndirectly(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>($r3, r1, $r4, $r5, $r6);

     label1:
        return;
    }

    static java.lang.ThreadLocal access$000()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <sun.nio.ch.Invoker: java.lang.ThreadLocal myGroupAndInvokeCount>;
        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        sun.security.action.GetIntegerAction $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        int $i0;
        sun.nio.ch.Invoker$1 $r4;

        $r0 = class "sun/nio/ch/Invoker";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.ch.Invoker: boolean $assertionsDisabled> = $z1;
        $r1 = new sun.security.action.GetIntegerAction;
        specialinvoke $r1.<sun.security.action.GetIntegerAction: void <init>(java.lang.String,int)>("sun.nio.ch.maxCompletionHandlersOnStack", 16);
        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        $r3 = (java.lang.Integer) $r2;
        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();
        <sun.nio.ch.Invoker: int maxHandlerInvokeCount> = $i0;
        $r4 = new sun.nio.ch.Invoker$1;
        specialinvoke $r4.<sun.nio.ch.Invoker$1: void <init>()>();
        <sun.nio.ch.Invoker: java.lang.ThreadLocal myGroupAndInvokeCount> = $r4;
        return;
    }
}
