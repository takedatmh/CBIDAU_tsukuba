class sun.nio.cs.US_ASCII$Encoder extends java.nio.charset.CharsetEncoder implements sun.nio.cs.ArrayEncoder
{
    private final sun.nio.cs.Surrogate$Parser sgp;
    private byte repl;
    static final boolean $assertionsDisabled;

    private void <init>(java.nio.charset.Charset)
    {
        sun.nio.cs.US_ASCII$Encoder r0;
        java.nio.charset.Charset r1;
        sun.nio.cs.Surrogate$Parser $r2;

        r0 := @this: sun.nio.cs.US_ASCII$Encoder;
        r1 := @parameter0: java.nio.charset.Charset;
        specialinvoke r0.<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float)>(r1, 1.0F, 1.0F);
        $r2 = new sun.nio.cs.Surrogate$Parser;
        specialinvoke $r2.<sun.nio.cs.Surrogate$Parser: void <init>()>();
        r0.<sun.nio.cs.US_ASCII$Encoder: sun.nio.cs.Surrogate$Parser sgp> = $r2;
        r0.<sun.nio.cs.US_ASCII$Encoder: byte repl> = 63;
        return;
    }

    public boolean canEncode(char)
    {
        sun.nio.cs.US_ASCII$Encoder r0;
        char c0;
        boolean $z0;

        r0 := @this: sun.nio.cs.US_ASCII$Encoder;
        c0 := @parameter0: char;
        if c0 >= 128 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isLegalReplacement(byte[])
    {
        sun.nio.cs.US_ASCII$Encoder r0;
        byte[] r1;
        int $i0;
        byte $b1;
        boolean $z0, $z1;

        r0 := @this: sun.nio.cs.US_ASCII$Encoder;
        r1 := @parameter0: byte[];
        $i0 = lengthof r1;
        if $i0 != 1 goto label0;

        $b1 = r1[0];
        if $b1 >= 0 goto label1;

     label0:
        $z0 = specialinvoke r0.<java.nio.charset.CharsetEncoder: boolean isLegalReplacement(byte[])>(r1);
        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private java.nio.charset.CoderResult encodeArrayLoop(java.nio.CharBuffer, java.nio.ByteBuffer)
    {
        sun.nio.cs.US_ASCII$Encoder r0;
        java.nio.CharBuffer r1;
        java.nio.ByteBuffer r2;
        char[] r3;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, $i15, i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38;
        byte[] r4;
        char c4;
        java.nio.charset.CoderResult r5, r13, r17, r20;
        java.lang.Throwable r6, $r23;
        boolean $z0, $z1;
        java.lang.AssertionError $r7, $r8;
        byte $b21;
        sun.nio.cs.Surrogate$Parser $r11, $r12, $r16;

        r0 := @this: sun.nio.cs.US_ASCII$Encoder;
        r1 := @parameter0: java.nio.CharBuffer;
        r2 := @parameter1: java.nio.ByteBuffer;
        r3 = virtualinvoke r1.<java.nio.CharBuffer: char[] array()>();
        $i5 = virtualinvoke r1.<java.nio.CharBuffer: int arrayOffset()>();
        $i6 = virtualinvoke r1.<java.nio.CharBuffer: int position()>();
        i0 = $i5 + $i6;
        $i7 = virtualinvoke r1.<java.nio.CharBuffer: int arrayOffset()>();
        $i8 = virtualinvoke r1.<java.nio.CharBuffer: int limit()>();
        i1 = $i7 + $i8;
        $z0 = <sun.nio.cs.US_ASCII$Encoder: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        $r7 = new java.lang.AssertionError;
        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();
        throw $r7;

     label0:
        if i0 > i1 goto label1;

        $i9 = i0;
        goto label2;

     label1:
        $i9 = i1;

     label2:
        i10 = $i9;
        r4 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>();
        $i11 = virtualinvoke r2.<java.nio.ByteBuffer: int arrayOffset()>();
        $i12 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();
        i2 = $i11 + $i12;
        $i13 = virtualinvoke r2.<java.nio.ByteBuffer: int arrayOffset()>();
        $i14 = virtualinvoke r2.<java.nio.ByteBuffer: int limit()>();
        i3 = $i13 + $i14;
        $z1 = <sun.nio.cs.US_ASCII$Encoder: boolean $assertionsDisabled>;
        if $z1 != 0 goto label3;

        if i2 <= i3 goto label3;

        $r8 = new java.lang.AssertionError;
        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();
        throw $r8;

     label3:
        if i2 > i3 goto label4;

        $i15 = i2;
        goto label5;

     label4:
        $i15 = i3;

     label5:
        i16 = $i15;

     label6:
        if i10 >= i1 goto label13;

        c4 = r3[i10];
        if c4 >= 128 goto label9;

        if i16 < i3 goto label8;

        r5 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult OVERFLOW>;

     label7:
        $i17 = virtualinvoke r1.<java.nio.CharBuffer: int arrayOffset()>();
        $i18 = i10 - $i17;
        virtualinvoke r1.<java.nio.CharBuffer: java.nio.Buffer position(int)>($i18);
        $i19 = virtualinvoke r2.<java.nio.ByteBuffer: int arrayOffset()>();
        $i20 = i16 - $i19;
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i20);
        return r5;

     label8:
        $b21 = (byte) c4;
        r4[i16] = $b21;
        i10 = i10 + 1;
        i16 = i16 + 1;
        goto label6;

     label9:
        $r11 = r0.<sun.nio.cs.US_ASCII$Encoder: sun.nio.cs.Surrogate$Parser sgp>;
        $i22 = virtualinvoke $r11.<sun.nio.cs.Surrogate$Parser: int parse(char,char[],int,int)>(c4, r3, i10, i1);
        if $i22 >= 0 goto label11;

        $r12 = r0.<sun.nio.cs.US_ASCII$Encoder: sun.nio.cs.Surrogate$Parser sgp>;
        r13 = virtualinvoke $r12.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error()>();

     label10:
        $i23 = virtualinvoke r1.<java.nio.CharBuffer: int arrayOffset()>();
        $i24 = i10 - $i23;
        virtualinvoke r1.<java.nio.CharBuffer: java.nio.Buffer position(int)>($i24);
        $i25 = virtualinvoke r2.<java.nio.ByteBuffer: int arrayOffset()>();
        $i26 = i16 - $i25;
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i26);
        return r13;

     label11:
        $r16 = r0.<sun.nio.cs.US_ASCII$Encoder: sun.nio.cs.Surrogate$Parser sgp>;
        r17 = virtualinvoke $r16.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult unmappableResult()>();

     label12:
        $i27 = virtualinvoke r1.<java.nio.CharBuffer: int arrayOffset()>();
        $i28 = i10 - $i27;
        virtualinvoke r1.<java.nio.CharBuffer: java.nio.Buffer position(int)>($i28);
        $i29 = virtualinvoke r2.<java.nio.ByteBuffer: int arrayOffset()>();
        $i30 = i16 - $i29;
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i30);
        return r17;

     label13:
        r20 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

     label14:
        $i31 = virtualinvoke r1.<java.nio.CharBuffer: int arrayOffset()>();
        $i32 = i10 - $i31;
        virtualinvoke r1.<java.nio.CharBuffer: java.nio.Buffer position(int)>($i32);
        $i33 = virtualinvoke r2.<java.nio.ByteBuffer: int arrayOffset()>();
        $i34 = i16 - $i33;
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i34);
        return r20;

     label15:
        $r23 := @caughtexception;

     label16:
        r6 = $r23;

     label17:
        $i35 = virtualinvoke r1.<java.nio.CharBuffer: int arrayOffset()>();
        $i36 = i10 - $i35;
        virtualinvoke r1.<java.nio.CharBuffer: java.nio.Buffer position(int)>($i36);
        $i37 = virtualinvoke r2.<java.nio.ByteBuffer: int arrayOffset()>();
        $i38 = i16 - $i37;
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i38);
        throw r6;

        catch java.lang.Throwable from label6 to label7 with label15;
        catch java.lang.Throwable from label8 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private java.nio.charset.CoderResult encodeBufferLoop(java.nio.CharBuffer, java.nio.ByteBuffer)
    {
        sun.nio.cs.US_ASCII$Encoder r0;
        java.nio.CharBuffer r1;
        java.nio.ByteBuffer r2;
        int i0, $i3;
        char c1;
        java.nio.charset.CoderResult r3, r9, r12, r14;
        java.lang.Throwable r4, $r16;
        boolean $z0, $z1;
        byte $b2;
        sun.nio.cs.Surrogate$Parser $r7, $r8, $r11;

        r0 := @this: sun.nio.cs.US_ASCII$Encoder;
        r1 := @parameter0: java.nio.CharBuffer;
        r2 := @parameter1: java.nio.ByteBuffer;
        i0 = virtualinvoke r1.<java.nio.CharBuffer: int position()>();

     label0:
        $z0 = virtualinvoke r1.<java.nio.CharBuffer: boolean hasRemaining()>();
        if $z0 == 0 goto label7;

        c1 = virtualinvoke r1.<java.nio.CharBuffer: char get()>();
        if c1 >= 128 goto label3;

        $z1 = virtualinvoke r2.<java.nio.ByteBuffer: boolean hasRemaining()>();
        if $z1 != 0 goto label2;

        r3 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult OVERFLOW>;

     label1:
        virtualinvoke r1.<java.nio.CharBuffer: java.nio.Buffer position(int)>(i0);
        return r3;

     label2:
        $b2 = (byte) c1;
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b2);
        i0 = i0 + 1;
        goto label0;

     label3:
        $r7 = r0.<sun.nio.cs.US_ASCII$Encoder: sun.nio.cs.Surrogate$Parser sgp>;
        $i3 = virtualinvoke $r7.<sun.nio.cs.Surrogate$Parser: int parse(char,java.nio.CharBuffer)>(c1, r1);
        if $i3 >= 0 goto label5;

        $r8 = r0.<sun.nio.cs.US_ASCII$Encoder: sun.nio.cs.Surrogate$Parser sgp>;
        r9 = virtualinvoke $r8.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error()>();

     label4:
        virtualinvoke r1.<java.nio.CharBuffer: java.nio.Buffer position(int)>(i0);
        return r9;

     label5:
        $r11 = r0.<sun.nio.cs.US_ASCII$Encoder: sun.nio.cs.Surrogate$Parser sgp>;
        r12 = virtualinvoke $r11.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult unmappableResult()>();

     label6:
        virtualinvoke r1.<java.nio.CharBuffer: java.nio.Buffer position(int)>(i0);
        return r12;

     label7:
        r14 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

     label8:
        virtualinvoke r1.<java.nio.CharBuffer: java.nio.Buffer position(int)>(i0);
        return r14;

     label9:
        $r16 := @caughtexception;

     label10:
        r4 = $r16;

     label11:
        virtualinvoke r1.<java.nio.CharBuffer: java.nio.Buffer position(int)>(i0);
        throw r4;

        catch java.lang.Throwable from label0 to label1 with label9;
        catch java.lang.Throwable from label2 to label4 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    protected java.nio.charset.CoderResult encodeLoop(java.nio.CharBuffer, java.nio.ByteBuffer)
    {
        sun.nio.cs.US_ASCII$Encoder r0;
        java.nio.CharBuffer r1;
        java.nio.ByteBuffer r2;
        boolean $z0, $z1;
        java.nio.charset.CoderResult $r3, $r4;

        r0 := @this: sun.nio.cs.US_ASCII$Encoder;
        r1 := @parameter0: java.nio.CharBuffer;
        r2 := @parameter1: java.nio.ByteBuffer;
        $z0 = virtualinvoke r1.<java.nio.CharBuffer: boolean hasArray()>();
        if $z0 == 0 goto label0;

        $z1 = virtualinvoke r2.<java.nio.ByteBuffer: boolean hasArray()>();
        if $z1 == 0 goto label0;

        $r3 = specialinvoke r0.<sun.nio.cs.US_ASCII$Encoder: java.nio.charset.CoderResult encodeArrayLoop(java.nio.CharBuffer,java.nio.ByteBuffer)>(r1, r2);
        return $r3;

     label0:
        $r4 = specialinvoke r0.<sun.nio.cs.US_ASCII$Encoder: java.nio.charset.CoderResult encodeBufferLoop(java.nio.CharBuffer,java.nio.ByteBuffer)>(r1, r2);
        return $r4;
    }

    protected void implReplaceWith(byte[])
    {
        sun.nio.cs.US_ASCII$Encoder r0;
        byte[] r1;
        byte $b0;

        r0 := @this: sun.nio.cs.US_ASCII$Encoder;
        r1 := @parameter0: byte[];
        $b0 = r1[0];
        r0.<sun.nio.cs.US_ASCII$Encoder: byte repl> = $b0;
        return;
    }

    public int encode(char[], int, int, byte[])
    {
        sun.nio.cs.US_ASCII$Encoder r0;
        char[] r1;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8, $i11, $i12;
        byte[] r2;
        char c4, $c10;
        byte $b9, $b13;
        boolean $z0, $z1;

        r0 := @this: sun.nio.cs.US_ASCII$Encoder;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: byte[];
        i2 = 0;
        $i5 = lengthof r2;
        $i6 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i5);
        i3 = i0 + $i6;

     label0:
        if i0 >= i3 goto label4;

        $i7 = i0;
        i0 = i0 + 1;
        c4 = r1[$i7];
        if c4 >= 128 goto label1;

        $i8 = i2;
        i2 = i2 + 1;
        $b9 = (byte) c4;
        r2[$i8] = $b9;
        goto label0;

     label1:
        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c4);
        if $z0 == 0 goto label3;

        if i0 >= i3 goto label3;

        $c10 = r1[i0];
        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c10);
        if $z1 == 0 goto label3;

        $i11 = lengthof r2;
        if i1 <= $i11 goto label2;

        i3 = i3 + 1;
        i1 = i1 + -1;

     label2:
        i0 = i0 + 1;

     label3:
        $i12 = i2;
        i2 = i2 + 1;
        $b13 = r0.<sun.nio.cs.US_ASCII$Encoder: byte repl>;
        r2[$i12] = $b13;
        goto label0;

     label4:
        return i2;
    }

    void <init>(java.nio.charset.Charset, sun.nio.cs.US_ASCII$1)
    {
        sun.nio.cs.US_ASCII$Encoder r0;
        java.nio.charset.Charset r1;
        sun.nio.cs.US_ASCII$1 r2;

        r0 := @this: sun.nio.cs.US_ASCII$Encoder;
        r1 := @parameter0: java.nio.charset.Charset;
        r2 := @parameter1: sun.nio.cs.US_ASCII$1;
        specialinvoke r0.<sun.nio.cs.US_ASCII$Encoder: void <init>(java.nio.charset.Charset)>(r1);
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/nio/cs/US_ASCII";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.cs.US_ASCII$Encoder: boolean $assertionsDisabled> = $z1;
        return;
    }
}
