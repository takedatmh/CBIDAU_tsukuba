final class java.util.regex.Pattern$Neg extends java.util.regex.Pattern$Node
{
    java.util.regex.Pattern$Node cond;

    void <init>(java.util.regex.Pattern$Node)
    {
        java.util.regex.Pattern$Neg r0;
        java.util.regex.Pattern$Node r1;

        r0 := @this: java.util.regex.Pattern$Neg;
        r1 := @parameter0: java.util.regex.Pattern$Node;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        r0.<java.util.regex.Pattern$Neg: java.util.regex.Pattern$Node cond> = r1;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$Neg r0;
        java.util.regex.Matcher r1;
        int i0, i1, $i2, $i3;
        java.lang.CharSequence r2;
        boolean z0, $z1, $z2, $z3, z4, $z5, $z6, $z7, $z8;
        java.lang.Throwable r3, $r6;
        java.util.regex.Pattern$Node $r4, $r5, $r7;

        r0 := @this: java.util.regex.Pattern$Neg;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        i1 = r1.<java.util.regex.Matcher: int 'to'>;
        z0 = 0;
        $z1 = r1.<java.util.regex.Matcher: boolean transparentBounds>;
        if $z1 == 0 goto label0;

        $i2 = virtualinvoke r1.<java.util.regex.Matcher: int getTextLength()>();
        r1.<java.util.regex.Matcher: int 'to'> = $i2;

     label0:
        $i3 = r1.<java.util.regex.Matcher: int 'to'>;
        if i0 >= $i3 goto label3;

        $r4 = r0.<java.util.regex.Pattern$Neg: java.util.regex.Pattern$Node cond>;
        $z2 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z2 != 0 goto label1;

        $z3 = 1;
        goto label2;

     label1:
        $z3 = 0;

     label2:
        z4 = $z3;
        goto label6;

     label3:
        r1.<java.util.regex.Matcher: boolean requireEnd> = 1;
        $r5 = r0.<java.util.regex.Pattern$Neg: java.util.regex.Pattern$Node cond>;
        $z5 = virtualinvoke $r5.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z5 != 0 goto label4;

        $z6 = 1;
        goto label5;

     label4:
        $z6 = 0;

     label5:
        z4 = $z6;

     label6:
        r1.<java.util.regex.Matcher: int 'to'> = i1;
        goto label10;

     label7:
        $r6 := @caughtexception;

     label8:
        r3 = $r6;

     label9:
        r1.<java.util.regex.Matcher: int 'to'> = i1;
        throw r3;

     label10:
        if z4 == 0 goto label11;

        $r7 = r0.<java.util.regex.Pattern$Neg: java.util.regex.Pattern$Node next>;
        $z7 = virtualinvoke $r7.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z7 == 0 goto label11;

        $z8 = 1;
        goto label12;

     label11:
        $z8 = 0;

     label12:
        return $z8;

        catch java.lang.Throwable from label0 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }
}
