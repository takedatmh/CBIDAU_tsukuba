class java.util.logging.Logger$LoggerHelper extends java.lang.Object
{
    static boolean disableCallerCheck;
    static boolean allowStackWalkSearch;

    private void <init>()
    {
        java.util.logging.Logger$LoggerHelper r0;

        r0 := @this: java.util.logging.Logger$LoggerHelper;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    private static boolean getBooleanProperty(java.lang.String)
    {
        java.lang.String r0, r2;
        java.util.logging.Logger$LoggerHelper$1 $r1;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        $r1 = new java.util.logging.Logger$LoggerHelper$1;
        specialinvoke $r1.<java.util.logging.Logger$LoggerHelper$1: void <init>(java.lang.String)>(r0);
        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        r2 = (java.lang.String) $r3;
        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r2);
        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();
        return $z0;
    }

    static void <clinit>()
    {
        boolean $z0, $z1;

        $z0 = staticinvoke <java.util.logging.Logger$LoggerHelper: boolean getBooleanProperty(java.lang.String)>("sun.util.logging.disableCallerCheck");
        <java.util.logging.Logger$LoggerHelper: boolean disableCallerCheck> = $z0;
        $z1 = staticinvoke <java.util.logging.Logger$LoggerHelper: boolean getBooleanProperty(java.lang.String)>("jdk.logging.allowStackWalkSearch");
        <java.util.logging.Logger$LoggerHelper: boolean allowStackWalkSearch> = $z1;
        return;
    }
}
