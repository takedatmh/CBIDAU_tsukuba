class sun.net.www.protocol.http.HttpURLConnection$HttpInputStream extends java.io.FilterInputStream
{
    private java.net.CacheRequest cacheRequest;
    private java.io.OutputStream outputStream;
    private boolean marked;
    private int inCache;
    private int markCount;
    private byte[] skipBuffer;
    private static final int SKIP_BUFFER_SIZE;
    final sun.net.www.protocol.http.HttpURLConnection this$0;

    public void <init>(sun.net.www.protocol.http.HttpURLConnection, java.io.InputStream)
    {
        sun.net.www.protocol.http.HttpURLConnection$HttpInputStream r0;
        sun.net.www.protocol.http.HttpURLConnection r1;
        java.io.InputStream r2;

        r0 := @this: sun.net.www.protocol.http.HttpURLConnection$HttpInputStream;
        r1 := @parameter0: sun.net.www.protocol.http.HttpURLConnection;
        r2 := @parameter1: java.io.InputStream;
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: sun.net.www.protocol.http.HttpURLConnection this$0> = r1;
        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r2);
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: boolean marked> = 0;
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int inCache> = 0;
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int markCount> = 0;
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.net.CacheRequest cacheRequest> = null;
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.io.OutputStream outputStream> = null;
        return;
    }

    public void <init>(sun.net.www.protocol.http.HttpURLConnection, java.io.InputStream, java.net.CacheRequest)
    {
        sun.net.www.protocol.http.HttpURLConnection$HttpInputStream r0;
        sun.net.www.protocol.http.HttpURLConnection r1;
        java.io.InputStream r2;
        java.net.CacheRequest r3, $r7;
        java.io.IOException r4, $r6;
        java.io.OutputStream $r5;

        r0 := @this: sun.net.www.protocol.http.HttpURLConnection$HttpInputStream;
        r1 := @parameter0: sun.net.www.protocol.http.HttpURLConnection;
        r2 := @parameter1: java.io.InputStream;
        r3 := @parameter2: java.net.CacheRequest;
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: sun.net.www.protocol.http.HttpURLConnection this$0> = r1;
        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r2);
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: boolean marked> = 0;
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int inCache> = 0;
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int markCount> = 0;
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.net.CacheRequest cacheRequest> = r3;

     label0:
        $r5 = virtualinvoke r3.<java.net.CacheRequest: java.io.OutputStream getBody()>();
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.io.OutputStream outputStream> = $r5;

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r4 = $r6;
        $r7 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.net.CacheRequest cacheRequest>;
        virtualinvoke $r7.<java.net.CacheRequest: void abort()>();
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.net.CacheRequest cacheRequest> = null;
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.io.OutputStream outputStream> = null;

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public synchronized void mark(int)
    {
        sun.net.www.protocol.http.HttpURLConnection$HttpInputStream r0;
        int i0;
        java.net.CacheRequest $r1;

        r0 := @this: sun.net.www.protocol.http.HttpURLConnection$HttpInputStream;
        i0 := @parameter0: int;
        specialinvoke r0.<java.io.FilterInputStream: void mark(int)>(i0);
        $r1 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.net.CacheRequest cacheRequest>;
        if $r1 == null goto label0;

        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: boolean marked> = 1;
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int markCount> = 0;

     label0:
        return;
    }

    public synchronized void reset() throws java.io.IOException
    {
        sun.net.www.protocol.http.HttpURLConnection$HttpInputStream r0;
        java.net.CacheRequest $r1;
        int $i0, $i1, $i2;

        r0 := @this: sun.net.www.protocol.http.HttpURLConnection$HttpInputStream;
        specialinvoke r0.<java.io.FilterInputStream: void reset()>();
        $r1 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.net.CacheRequest cacheRequest>;
        if $r1 == null goto label0;

        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: boolean marked> = 0;
        $i0 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int inCache>;
        $i1 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int markCount>;
        $i2 = $i0 + $i1;
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int inCache> = $i2;

     label0:
        return;
    }

    public int read() throws java.io.IOException
    {
        sun.net.www.protocol.http.HttpURLConnection$HttpInputStream r0;
        byte[] r1;
        int i0, $i1;
        byte $b2;
        java.io.IOException $r2, r3;
        java.net.CacheRequest $r4, $r5;

        r0 := @this: sun.net.www.protocol.http.HttpURLConnection$HttpInputStream;

     label0:
        r1 = newarray (byte)[1];
        i0 = virtualinvoke r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[])>(r1);
        if i0 != -1 goto label1;

        $i1 = i0;
        goto label2;

     label1:
        $b2 = r1[0];
        $i1 = $b2 & 255;

     label2:
        return $i1;

     label3:
        $r2 := @caughtexception;
        r3 = $r2;
        $r4 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.net.CacheRequest cacheRequest>;
        if $r4 == null goto label4;

        $r5 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.net.CacheRequest cacheRequest>;
        virtualinvoke $r5.<java.net.CacheRequest: void abort()>();

     label4:
        throw r3;

        catch java.io.IOException from label0 to label2 with label3;
    }

    public int read(byte[]) throws java.io.IOException
    {
        sun.net.www.protocol.http.HttpURLConnection$HttpInputStream r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: sun.net.www.protocol.http.HttpURLConnection$HttpInputStream;
        r1 := @parameter0: byte[];
        $i0 = lengthof r1;
        $i1 = virtualinvoke r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>(r1, 0, $i0);
        return $i1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        sun.net.www.protocol.http.HttpURLConnection$HttpInputStream r0;
        byte[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.io.OutputStream $r3, $r4;
        boolean $z0;
        java.io.IOException $r6, r7;
        java.net.CacheRequest $r8, $r9;

        r0 := @this: sun.net.www.protocol.http.HttpURLConnection$HttpInputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;

     label0:
        i2 = specialinvoke r0.<java.io.FilterInputStream: int read(byte[],int,int)>(r1, i0, i1);
        $i4 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int inCache>;
        if $i4 <= 0 goto label2;

        $i5 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int inCache>;
        if $i5 < i2 goto label1;

        $i6 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int inCache>;
        $i7 = $i6 - i2;
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int inCache> = $i7;
        i3 = 0;
        goto label3;

     label1:
        $i8 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int inCache>;
        i3 = i2 - $i8;
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int inCache> = 0;
        goto label3;

     label2:
        i3 = i2;

     label3:
        if i3 <= 0 goto label4;

        $r3 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.io.OutputStream outputStream>;
        if $r3 == null goto label4;

        $r4 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.io.OutputStream outputStream>;
        $i9 = i2 - i3;
        $i10 = i0 + $i9;
        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>(r1, $i10, i3);

     label4:
        $z0 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: boolean marked>;
        if $z0 == 0 goto label5;

        $i11 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int markCount>;
        $i12 = $i11 + i2;
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int markCount> = $i12;

     label5:
        return i2;

     label6:
        $r6 := @caughtexception;
        r7 = $r6;
        $r8 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.net.CacheRequest cacheRequest>;
        if $r8 == null goto label7;

        $r9 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.net.CacheRequest cacheRequest>;
        virtualinvoke $r9.<java.net.CacheRequest: void abort()>();

     label7:
        throw r7;

        catch java.io.IOException from label0 to label5 with label6;
    }

    public long skip(long) throws java.io.IOException
    {
        sun.net.www.protocol.http.HttpURLConnection$HttpInputStream r0;
        long l0, l1, $l5, $l7, $l8;
        byte[] r1, $r2, $r3;
        int i2, $i6;
        byte $b3, $b4;

        r0 := @this: sun.net.www.protocol.http.HttpURLConnection$HttpInputStream;
        l0 := @parameter0: long;
        l1 = l0;
        $r2 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: byte[] skipBuffer>;
        if $r2 != null goto label0;

        $r3 = newarray (byte)[8096];
        r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: byte[] skipBuffer> = $r3;

     label0:
        r1 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: byte[] skipBuffer>;
        $b3 = l0 cmp 0L;
        if $b3 > 0 goto label1;

        return 0L;

     label1:
        $b4 = l1 cmp 0L;
        if $b4 <= 0 goto label3;

        $l5 = staticinvoke <java.lang.Math: long min(long,long)>(8096L, l1);
        $i6 = (int) $l5;
        i2 = virtualinvoke r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read(byte[],int,int)>(r1, 0, $i6);
        if i2 >= 0 goto label2;

        goto label3;

     label2:
        $l7 = (long) i2;
        l1 = l1 - $l7;
        goto label1;

     label3:
        $l8 = l0 - l1;
        return $l8;
    }

    public void close() throws java.io.IOException
    {
        sun.net.www.protocol.http.HttpURLConnection$HttpInputStream r0;
        java.io.IOException r1, $r8;
        java.lang.Throwable r2, $r11;
        java.io.OutputStream $r3, $r5;
        int $i0;
        java.net.CacheRequest $r4, $r9, $r10;
        sun.net.www.protocol.http.HttpURLConnection $r6, $r7, $r12, $r13;

        r0 := @this: sun.net.www.protocol.http.HttpURLConnection$HttpInputStream;

     label0:
        $r3 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.io.OutputStream outputStream>;
        if $r3 == null goto label2;

        $i0 = virtualinvoke r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: int read()>();
        if $i0 == -1 goto label1;

        $r4 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.net.CacheRequest cacheRequest>;
        virtualinvoke $r4.<java.net.CacheRequest: void abort()>();
        goto label2;

     label1:
        $r5 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.io.OutputStream outputStream>;
        virtualinvoke $r5.<java.io.OutputStream: void close()>();

     label2:
        specialinvoke r0.<java.io.FilterInputStream: void close()>();

     label3:
        $r6 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: sun.net.www.protocol.http.HttpURLConnection this$0>;
        $r6.<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.http.HttpClient http> = null;
        $r7 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: sun.net.www.protocol.http.HttpURLConnection this$0>;
        staticinvoke <sun.net.www.protocol.http.HttpURLConnection: void access$100(sun.net.www.protocol.http.HttpURLConnection,boolean)>($r7, 1);
        goto label9;

     label4:
        $r8 := @caughtexception;

     label5:
        r1 = $r8;
        $r9 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.net.CacheRequest cacheRequest>;
        if $r9 == null goto label6;

        $r10 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: java.net.CacheRequest cacheRequest>;
        virtualinvoke $r10.<java.net.CacheRequest: void abort()>();

     label6:
        throw r1;

     label7:
        $r11 := @caughtexception;
        r2 = $r11;

     label8:
        $r12 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: sun.net.www.protocol.http.HttpURLConnection this$0>;
        $r12.<sun.net.www.protocol.http.HttpURLConnection: sun.net.www.http.HttpClient http> = null;
        $r13 = r0.<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: sun.net.www.protocol.http.HttpURLConnection this$0>;
        staticinvoke <sun.net.www.protocol.http.HttpURLConnection: void access$100(sun.net.www.protocol.http.HttpURLConnection,boolean)>($r13, 1);
        throw r2;

     label9:
        return;

        catch java.io.IOException from label0 to label3 with label4;
        catch java.lang.Throwable from label0 to label3 with label7;
        catch java.lang.Throwable from label5 to label8 with label7;
    }
}
