class sun.nio.ch.FileChannelImpl$SimpleFileLockTable extends sun.nio.ch.FileLockTable
{
    private final java.util.List lockList;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        sun.nio.ch.FileChannelImpl$SimpleFileLockTable r0;
        java.util.ArrayList $r1;

        r0 := @this: sun.nio.ch.FileChannelImpl$SimpleFileLockTable;
        specialinvoke r0.<sun.nio.ch.FileLockTable: void <init>()>();
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(2);
        r0.<sun.nio.ch.FileChannelImpl$SimpleFileLockTable: java.util.List lockList> = $r1;
        return;
    }

    private void checkList(long, long) throws java.nio.channels.OverlappingFileLockException
    {
        sun.nio.ch.FileChannelImpl$SimpleFileLockTable r0;
        long l0, l1;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator r1;
        java.nio.channels.FileLock r2;
        java.util.List $r3, $r5;
        java.lang.AssertionError $r4;
        java.lang.Object $r6;
        java.nio.channels.OverlappingFileLockException $r7;

        r0 := @this: sun.nio.ch.FileChannelImpl$SimpleFileLockTable;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        $z0 = <sun.nio.ch.FileChannelImpl$SimpleFileLockTable: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r3 = r0.<sun.nio.ch.FileChannelImpl$SimpleFileLockTable: java.util.List lockList>;
        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r3);
        if $z1 != 0 goto label0;

        $r4 = new java.lang.AssertionError;
        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();
        throw $r4;

     label0:
        $r5 = r0.<sun.nio.ch.FileChannelImpl$SimpleFileLockTable: java.util.List lockList>;
        r1 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label3;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        r2 = (java.nio.channels.FileLock) $r6;
        $z3 = virtualinvoke r2.<java.nio.channels.FileLock: boolean overlaps(long,long)>(l0, l1);
        if $z3 == 0 goto label2;

        $r7 = new java.nio.channels.OverlappingFileLockException;
        specialinvoke $r7.<java.nio.channels.OverlappingFileLockException: void <init>()>();
        throw $r7;

     label2:
        goto label1;

     label3:
        return;
    }

    public void add(java.nio.channels.FileLock) throws java.nio.channels.OverlappingFileLockException
    {
        sun.nio.ch.FileChannelImpl$SimpleFileLockTable r0;
        java.nio.channels.FileLock r1;
        java.util.List r2, $r4, $r5;
        java.lang.Throwable r3, $r6;
        long $l0, $l1;

        r0 := @this: sun.nio.ch.FileChannelImpl$SimpleFileLockTable;
        r1 := @parameter0: java.nio.channels.FileLock;
        $r4 = r0.<sun.nio.ch.FileChannelImpl$SimpleFileLockTable: java.util.List lockList>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $l0 = virtualinvoke r1.<java.nio.channels.FileLock: long position()>();
        $l1 = virtualinvoke r1.<java.nio.channels.FileLock: long size()>();
        specialinvoke r0.<sun.nio.ch.FileChannelImpl$SimpleFileLockTable: void checkList(long,long)>($l0, $l1);
        $r5 = r0.<sun.nio.ch.FileChannelImpl$SimpleFileLockTable: java.util.List lockList>;
        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r6 := @caughtexception;

     label3:
        r3 = $r6;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void remove(java.nio.channels.FileLock)
    {
        sun.nio.ch.FileChannelImpl$SimpleFileLockTable r0;
        java.nio.channels.FileLock r1;
        java.util.List r2, $r4, $r5;
        java.lang.Throwable r3, $r6;

        r0 := @this: sun.nio.ch.FileChannelImpl$SimpleFileLockTable;
        r1 := @parameter0: java.nio.channels.FileLock;
        $r4 = r0.<sun.nio.ch.FileChannelImpl$SimpleFileLockTable: java.util.List lockList>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<sun.nio.ch.FileChannelImpl$SimpleFileLockTable: java.util.List lockList>;
        interfaceinvoke $r5.<java.util.List: boolean remove(java.lang.Object)>(r1);
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r6 := @caughtexception;

     label3:
        r3 = $r6;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.util.List removeAll()
    {
        sun.nio.ch.FileChannelImpl$SimpleFileLockTable r0;
        java.util.List r1, $r4, $r6, $r7;
        java.util.ArrayList r2, $r5;
        java.lang.Throwable r3, $r9;

        r0 := @this: sun.nio.ch.FileChannelImpl$SimpleFileLockTable;
        $r4 = r0.<sun.nio.ch.FileChannelImpl$SimpleFileLockTable: java.util.List lockList>;
        r1 = $r4;
        entermonitor $r4;

     label0:
        $r5 = new java.util.ArrayList;
        $r6 = r0.<sun.nio.ch.FileChannelImpl$SimpleFileLockTable: java.util.List lockList>;
        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);
        r2 = $r5;
        $r7 = r0.<sun.nio.ch.FileChannelImpl$SimpleFileLockTable: java.util.List lockList>;
        interfaceinvoke $r7.<java.util.List: void clear()>();
        exitmonitor r1;

     label1:
        return r2;

     label2:
        $r9 := @caughtexception;

     label3:
        r3 = $r9;
        exitmonitor r1;

     label4:
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void replace(java.nio.channels.FileLock, java.nio.channels.FileLock)
    {
        sun.nio.ch.FileChannelImpl$SimpleFileLockTable r0;
        java.nio.channels.FileLock r1, r2;
        java.util.List r3, $r5, $r6, $r7;
        java.lang.Throwable r4, $r8;

        r0 := @this: sun.nio.ch.FileChannelImpl$SimpleFileLockTable;
        r1 := @parameter0: java.nio.channels.FileLock;
        r2 := @parameter1: java.nio.channels.FileLock;
        $r5 = r0.<sun.nio.ch.FileChannelImpl$SimpleFileLockTable: java.util.List lockList>;
        r3 = $r5;
        entermonitor $r5;

     label0:
        $r6 = r0.<sun.nio.ch.FileChannelImpl$SimpleFileLockTable: java.util.List lockList>;
        interfaceinvoke $r6.<java.util.List: boolean remove(java.lang.Object)>(r1);
        $r7 = r0.<sun.nio.ch.FileChannelImpl$SimpleFileLockTable: java.util.List lockList>;
        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r2);
        exitmonitor r3;

     label1:
        goto label5;

     label2:
        $r8 := @caughtexception;

     label3:
        r4 = $r8;
        exitmonitor r3;

     label4:
        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/nio/ch/FileChannelImpl";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.ch.FileChannelImpl$SimpleFileLockTable: boolean $assertionsDisabled> = $z1;
        return;
    }
}
