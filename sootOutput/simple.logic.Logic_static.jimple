public class simple.logic.Logic_static extends java.lang.Object
{
    public int flag;
    protected java.lang.String code;
    private java.util.List data;
    public java.util.logging.Logger logger;
    public static java.lang.String staticVariable;

    static void <clinit>()
    {
        <simple.logic.Logic_static: java.lang.String staticVariable> = "Static Data";
        return;
    }

    public void <init>(int, java.lang.String, java.util.List, java.lang.String)
    {
        simple.logic.Logic_static r0;
        int i0;
        java.lang.String r1, r3;
        java.util.List r2;
        java.util.logging.FileHandler r4, $r7;
        java.util.logging.SimpleFormatter r5, $r9;
        java.util.logging.Logger $r6, $r8;
        java.lang.SecurityException $r10, r11;
        java.io.IOException $r12, r13;

        r0 := @this: simple.logic.Logic_static;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.util.List;
        r3 := @parameter3: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r6 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>("LOGGER");
        r0.<simple.logic.Logic_static: java.util.logging.Logger logger> = $r6;
        r0.<simple.logic.Logic_static: int flag> = i0;
        r0.<simple.logic.Logic_static: java.lang.String code> = r1;
        r0.<simple.logic.Logic_static: java.util.List data> = r2;

     label0:
        $r7 = new java.util.logging.FileHandler;
        specialinvoke $r7.<java.util.logging.FileHandler: void <init>(java.lang.String)>(r3);
        r4 = $r7;
        $r8 = r0.<simple.logic.Logic_static: java.util.logging.Logger logger>;
        virtualinvoke $r8.<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>(r4);
        $r9 = new java.util.logging.SimpleFormatter;
        specialinvoke $r9.<java.util.logging.SimpleFormatter: void <init>()>();
        r5 = $r9;
        virtualinvoke r4.<java.util.logging.Handler: void setFormatter(java.util.logging.Formatter)>(r5);

     label1:
        goto label4;

     label2:
        $r10 := @caughtexception;
        r11 = $r10;
        virtualinvoke r11.<java.lang.SecurityException: void printStackTrace()>();
        goto label4;

     label3:
        $r12 := @caughtexception;
        r13 = $r12;
        virtualinvoke r13.<java.io.IOException: void printStackTrace()>();

     label4:
        return;

        catch java.lang.SecurityException from label0 to label1 with label2;
        catch java.io.IOException from label0 to label1 with label3;
    }

    public java.lang.String create()
    {
        simple.logic.Logic_static r0;
        java.util.ArrayList $r1;
        java.lang.Exception r2, $r4;
        java.lang.String $r3, $r9;
        java.util.logging.Logger $r5, $r7;
        java.util.logging.Level $r6, $r8;

        r0 := @this: simple.logic.Logic_static;

     label0:
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>()>();
        r0.<simple.logic.Logic_static: java.util.List data> = $r1;
        $r3 = <simple.logic.Logic_static: java.lang.String staticVariable>;
        r0.<simple.logic.Logic_static: java.lang.String code> = $r3;

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        $r5 = r0.<simple.logic.Logic_static: java.util.logging.Logger logger>;
        $r6 = <java.util.logging.Level: java.util.logging.Level WARNING>;
        virtualinvoke $r5.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r6, "Fail to execute create method.");
        r0.<simple.logic.Logic_static: java.lang.String code> = "254";

     label3:
        $r7 = r0.<simple.logic.Logic_static: java.util.logging.Logger logger>;
        $r8 = <java.util.logging.Level: java.util.logging.Level INFO>;
        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r8, "Success create method execution.");
        $r9 = r0.<simple.logic.Logic_static: java.lang.String code>;
        return $r9;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public java.lang.String read()
    {
        simple.logic.Logic_static r0;
        java.io.File $r1, r2;
        java.io.FileReader r3, $r4;
        int i0, $i3;
        java.util.List $r5;
        char $c1, $c2;
        java.lang.String $r6, $r10, $r13, $r18, $r19, $r24, $r25, $r28;
        java.util.logging.Logger $r7, $r16, $r22, $r26;
        java.util.logging.Level $r8, $r17, $r23, $r27;
        java.lang.StringBuilder $r9, $r11, $r12;
        java.io.FileNotFoundException $r14, r15;
        java.io.IOException $r20, r21;

        r0 := @this: simple.logic.Logic_static;

     label0:
        $r1 = new java.io.File;
        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("test.txt");
        r2 = $r1;
        $r4 = new java.io.FileReader;
        specialinvoke $r4.<java.io.FileReader: void <init>(java.io.File)>(r2);
        r3 = $r4;
        goto label2;

     label1:
        $r5 = r0.<simple.logic.Logic_static: java.util.List data>;
        $c1 = (char) i0;
        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c1);
        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);
        $r7 = r0.<simple.logic.Logic_static: java.util.logging.Logger logger>;
        $r8 = <java.util.logging.Level: java.util.logging.Level INFO>;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Read data which is ");
        $c2 = (char) i0;
        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c2);
        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r8, $r13);

     label2:
        $i3 = virtualinvoke r3.<java.io.FileReader: int read()>();
        i0 = $i3;
        if $i3 != -1 goto label1;

        virtualinvoke r3.<java.io.FileReader: void close()>();

     label3:
        goto label6;

     label4:
        $r14 := @caughtexception;
        r15 = $r14;
        r0.<simple.logic.Logic_static: int flag> = 1;
        $r16 = r0.<simple.logic.Logic_static: java.util.logging.Logger logger>;
        $r17 = <java.util.logging.Level: java.util.logging.Level WARNING>;
        $r18 = virtualinvoke r15.<java.io.FileNotFoundException: java.lang.String toString()>();
        virtualinvoke $r16.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r17, $r18);
        $r19 = "254";
        r0.<simple.logic.Logic_static: java.lang.String code> = $r19;
        return $r19;

     label5:
        $r20 := @caughtexception;
        r21 = $r20;
        r0.<simple.logic.Logic_static: int flag> = 1;
        $r22 = r0.<simple.logic.Logic_static: java.util.logging.Logger logger>;
        $r23 = <java.util.logging.Level: java.util.logging.Level WARNING>;
        $r24 = virtualinvoke r21.<java.io.IOException: java.lang.String toString()>();
        virtualinvoke $r22.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r23, $r24);
        $r25 = "254";
        r0.<simple.logic.Logic_static: java.lang.String code> = $r25;
        return $r25;

     label6:
        $r26 = r0.<simple.logic.Logic_static: java.util.logging.Logger logger>;
        $r27 = <java.util.logging.Level: java.util.logging.Level INFO>;
        virtualinvoke $r26.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r27, "Success read method execution.");
        $r28 = r0.<simple.logic.Logic_static: java.lang.String code>;
        return $r28;

        catch java.io.FileNotFoundException from label0 to label3 with label4;
        catch java.io.IOException from label0 to label3 with label5;
    }

    public java.lang.String update(java.lang.String)
    {
        simple.logic.Logic_static r0;
        java.lang.String r1, $r6;
        java.util.List $r2;
        java.util.logging.Logger $r4;
        java.util.logging.Level $r5;

        r0 := @this: simple.logic.Logic_static;
        r1 := @parameter0: java.lang.String;
        $r2 = r0.<simple.logic.Logic_static: java.util.List data>;
        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, "UPDATED");
        $r4 = r0.<simple.logic.Logic_static: java.util.logging.Logger logger>;
        $r5 = <java.util.logging.Level: java.util.logging.Level INFO>;
        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r5, "Success to update list data.");
        $r6 = r0.<simple.logic.Logic_static: java.lang.String code>;
        return $r6;
    }

    public java.lang.String delete()
    {
        simple.logic.Logic_static r0;
        java.util.List $r1;
        java.util.logging.Logger $r3;
        java.util.logging.Level $r4;
        java.lang.String $r5;

        r0 := @this: simple.logic.Logic_static;
        $r1 = r0.<simple.logic.Logic_static: java.util.List data>;
        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(0);
        $r3 = r0.<simple.logic.Logic_static: java.util.logging.Logger logger>;
        $r4 = <java.util.logging.Level: java.util.logging.Level INFO>;
        virtualinvoke $r3.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r4, "Success to delete list data.");
        $r5 = r0.<simple.logic.Logic_static: java.lang.String code>;
        return $r5;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];
        return;
    }
}
