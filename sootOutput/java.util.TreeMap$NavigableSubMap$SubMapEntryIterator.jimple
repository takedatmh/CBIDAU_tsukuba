final class java.util.TreeMap$NavigableSubMap$SubMapEntryIterator extends java.util.TreeMap$NavigableSubMap$SubMapIterator
{
    final java.util.TreeMap$NavigableSubMap this$0;

    void <init>(java.util.TreeMap$NavigableSubMap, java.util.TreeMap$Entry, java.util.TreeMap$Entry)
    {
        java.util.TreeMap$NavigableSubMap$SubMapEntryIterator r0;
        java.util.TreeMap$NavigableSubMap r1;
        java.util.TreeMap$Entry r2, r3;

        r0 := @this: java.util.TreeMap$NavigableSubMap$SubMapEntryIterator;
        r1 := @parameter0: java.util.TreeMap$NavigableSubMap;
        r2 := @parameter1: java.util.TreeMap$Entry;
        r3 := @parameter2: java.util.TreeMap$Entry;
        r0.<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: java.util.TreeMap$NavigableSubMap this$0> = r1;
        specialinvoke r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: void <init>(java.util.TreeMap$NavigableSubMap,java.util.TreeMap$Entry,java.util.TreeMap$Entry)>(r1, r2, r3);
        return;
    }

    public java.util.Map$Entry next()
    {
        java.util.TreeMap$NavigableSubMap$SubMapEntryIterator r0;
        java.util.TreeMap$Entry $r1;

        r0 := @this: java.util.TreeMap$NavigableSubMap$SubMapEntryIterator;
        $r1 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: java.util.TreeMap$Entry nextEntry()>();
        return $r1;
    }

    public void remove()
    {
        java.util.TreeMap$NavigableSubMap$SubMapEntryIterator r0;

        r0 := @this: java.util.TreeMap$NavigableSubMap$SubMapEntryIterator;
        virtualinvoke r0.<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: void removeAscending()>();
        return;
    }

    public volatile java.lang.Object next()
    {
        java.util.TreeMap$NavigableSubMap$SubMapEntryIterator r0;
        java.util.Map$Entry $r1;

        r0 := @this: java.util.TreeMap$NavigableSubMap$SubMapEntryIterator;
        $r1 = virtualinvoke r0.<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: java.util.Map$Entry next()>();
        return $r1;
    }
}
