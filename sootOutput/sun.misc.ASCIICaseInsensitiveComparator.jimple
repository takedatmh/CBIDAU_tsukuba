public class sun.misc.ASCIICaseInsensitiveComparator extends java.lang.Object implements java.util.Comparator
{
    public static final java.util.Comparator CASE_INSENSITIVE_ORDER;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        sun.misc.ASCIICaseInsensitiveComparator r0;

        r0 := @this: sun.misc.ASCIICaseInsensitiveComparator;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public int compare(java.lang.String, java.lang.String)
    {
        sun.misc.ASCIICaseInsensitiveComparator r0;
        java.lang.String r1, r2;
        int i0, i1, i2, i3, $i6, $i7, $i9, $i11, $i12;
        char c4, c5, c8, c10;
        boolean $z0;
        java.lang.AssertionError $r3;

        r0 := @this: sun.misc.ASCIICaseInsensitiveComparator;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        i0 = virtualinvoke r1.<java.lang.String: int length()>();
        i1 = virtualinvoke r2.<java.lang.String: int length()>();
        if i0 >= i1 goto label0;

        $i6 = i0;
        goto label1;

     label0:
        $i6 = i1;

     label1:
        i2 = $i6;
        i3 = 0;

     label2:
        if i3 >= i2 goto label6;

        c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);
        c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i3);
        $z0 = <sun.misc.ASCIICaseInsensitiveComparator: boolean $assertionsDisabled>;
        if $z0 != 0 goto label4;

        if c4 > 127 goto label3;

        if c5 <= 127 goto label4;

     label3:
        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label4:
        if c4 == c5 goto label5;

        $i7 = staticinvoke <sun.misc.ASCIICaseInsensitiveComparator: int toLower(int)>(c4);
        c8 = (char) $i7;
        $i9 = staticinvoke <sun.misc.ASCIICaseInsensitiveComparator: int toLower(int)>(c5);
        c10 = (char) $i9;
        if c8 == c10 goto label5;

        $i11 = c8 - c10;
        return $i11;

     label5:
        i3 = i3 + 1;
        goto label2;

     label6:
        $i12 = i0 - i1;
        return $i12;
    }

    public static int lowerCaseHashCode(java.lang.String)
    {
        java.lang.String r0;
        int i0, i1, i2, $i3, $i5;
        char $c4;

        r0 := @parameter0: java.lang.String;
        i0 = 0;
        i1 = virtualinvoke r0.<java.lang.String: int length()>();
        i2 = 0;

     label0:
        if i2 >= i1 goto label1;

        $i3 = 31 * i0;
        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        $i5 = staticinvoke <sun.misc.ASCIICaseInsensitiveComparator: int toLower(int)>($c4);
        i0 = $i3 + $i5;
        i2 = i2 + 1;
        goto label0;

     label1:
        return i0;
    }

    static boolean isLower(int)
    {
        int i0, $i1, $i2, $i3;
        boolean $z0;

        i0 := @parameter0: int;
        $i1 = i0 - 97;
        $i2 = 122 - i0;
        $i3 = $i1 | $i2;
        if $i3 < 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    static boolean isUpper(int)
    {
        int i0, $i1, $i2, $i3;
        boolean $z0;

        i0 := @parameter0: int;
        $i1 = i0 - 65;
        $i2 = 90 - i0;
        $i3 = $i1 | $i2;
        if $i3 < 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    static int toLower(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;
        $z0 = staticinvoke <sun.misc.ASCIICaseInsensitiveComparator: boolean isUpper(int)>(i0);
        if $z0 == 0 goto label0;

        $i1 = i0 + 32;
        goto label1;

     label0:
        $i1 = i0;

     label1:
        return $i1;
    }

    static int toUpper(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;
        $z0 = staticinvoke <sun.misc.ASCIICaseInsensitiveComparator: boolean isLower(int)>(i0);
        if $z0 == 0 goto label0;

        $i1 = i0 - 32;
        goto label1;

     label0:
        $i1 = i0;

     label1:
        return $i1;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        sun.misc.ASCIICaseInsensitiveComparator r0;
        java.lang.Object r1, r2;
        java.lang.String $r3, $r4;
        int $i0;

        r0 := @this: sun.misc.ASCIICaseInsensitiveComparator;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r3 = (java.lang.String) r1;
        $r4 = (java.lang.String) r2;
        $i0 = virtualinvoke r0.<sun.misc.ASCIICaseInsensitiveComparator: int compare(java.lang.String,java.lang.String)>($r3, $r4);
        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        sun.misc.ASCIICaseInsensitiveComparator $r1;

        $r0 = class "sun/misc/ASCIICaseInsensitiveComparator";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.misc.ASCIICaseInsensitiveComparator: boolean $assertionsDisabled> = $z1;
        $r1 = new sun.misc.ASCIICaseInsensitiveComparator;
        specialinvoke $r1.<sun.misc.ASCIICaseInsensitiveComparator: void <init>()>();
        <sun.misc.ASCIICaseInsensitiveComparator: java.util.Comparator CASE_INSENSITIVE_ORDER> = $r1;
        return;
    }
}
