public final class sun.text.normalizer.UBiDiProps extends java.lang.Object
{
    private static sun.text.normalizer.UBiDiProps gBdp;
    private static sun.text.normalizer.UBiDiProps gBdpDummy;
    private int[] indexes;
    private int[] mirrors;
    private byte[] jgArray;
    private sun.text.normalizer.CharTrie trie;
    private static final java.lang.String DATA_FILE_NAME;
    private static final byte[] FMT;
    private static final int IX_INDEX_TOP;
    private static final int IX_MIRROR_LENGTH;
    private static final int IX_JG_START;
    private static final int IX_JG_LIMIT;
    private static final int IX_TOP;
    private static final int CLASS_MASK;

    public void <init>() throws java.io.IOException
    {
        sun.text.normalizer.UBiDiProps r0;
        java.io.InputStream r1;
        java.io.BufferedInputStream r2, $r3;

        r0 := @this: sun.text.normalizer.UBiDiProps;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r1 = staticinvoke <sun.text.normalizer.ICUData: java.io.InputStream getStream(java.lang.String)>("/sun/text/resources/ubidi.icu");
        $r3 = new java.io.BufferedInputStream;
        specialinvoke $r3.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>(r1, 4096);
        r2 = $r3;
        specialinvoke r0.<sun.text.normalizer.UBiDiProps: void readData(java.io.InputStream)>(r2);
        virtualinvoke r2.<java.io.BufferedInputStream: void close()>();
        virtualinvoke r1.<java.io.InputStream: void close()>();
        return;
    }

    private void readData(java.io.InputStream) throws java.io.IOException
    {
        sun.text.normalizer.UBiDiProps r0;
        java.io.InputStream r1;
        java.io.DataInputStream $r2, r3;
        int i0, i1, $i2, i3, i4, $i5, $i6, $i7, i8, i9;
        byte[] $r4, $r17, $r18;
        sun.text.normalizer.UBiDiProps$IsAcceptable $r5;
        java.io.IOException $r7;
        int[] $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16;
        sun.text.normalizer.CharTrie $r11;
        byte $b10;

        r0 := @this: sun.text.normalizer.UBiDiProps;
        r1 := @parameter0: java.io.InputStream;
        $r2 = new java.io.DataInputStream;
        specialinvoke $r2.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r1);
        r3 = $r2;
        $r4 = <sun.text.normalizer.UBiDiProps: byte[] FMT>;
        $r5 = new sun.text.normalizer.UBiDiProps$IsAcceptable;
        specialinvoke $r5.<sun.text.normalizer.UBiDiProps$IsAcceptable: void <init>(sun.text.normalizer.UBiDiProps,sun.text.normalizer.UBiDiProps$1)>(r0, null);
        staticinvoke <sun.text.normalizer.ICUBinary: byte[] readHeader(java.io.InputStream,byte[],sun.text.normalizer.ICUBinary$Authenticate)>(r3, $r4, $r5);
        i0 = virtualinvoke r3.<java.io.DataInputStream: int readInt()>();
        if i0 >= 0 goto label0;

        $r7 = new java.io.IOException;
        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("indexes[0] too small in /sun/text/resources/ubidi.icu");
        throw $r7;

     label0:
        $r8 = newarray (int)[i0];
        r0.<sun.text.normalizer.UBiDiProps: int[] indexes> = $r8;
        $r9 = r0.<sun.text.normalizer.UBiDiProps: int[] indexes>;
        $r9[0] = i0;
        i1 = 1;

     label1:
        if i1 >= i0 goto label2;

        $r10 = r0.<sun.text.normalizer.UBiDiProps: int[] indexes>;
        $i2 = virtualinvoke r3.<java.io.DataInputStream: int readInt()>();
        $r10[i1] = $i2;
        i1 = i1 + 1;
        goto label1;

     label2:
        $r11 = new sun.text.normalizer.CharTrie;
        specialinvoke $r11.<sun.text.normalizer.CharTrie: void <init>(java.io.InputStream,sun.text.normalizer.Trie$DataManipulate)>(r3, null);
        r0.<sun.text.normalizer.UBiDiProps: sun.text.normalizer.CharTrie trie> = $r11;
        $r12 = r0.<sun.text.normalizer.UBiDiProps: int[] indexes>;
        i3 = $r12[3];
        if i3 <= 0 goto label4;

        $r13 = newarray (int)[i3];
        r0.<sun.text.normalizer.UBiDiProps: int[] mirrors> = $r13;
        i4 = 0;

     label3:
        if i4 >= i3 goto label4;

        $r14 = r0.<sun.text.normalizer.UBiDiProps: int[] mirrors>;
        $i5 = virtualinvoke r3.<java.io.DataInputStream: int readInt()>();
        $r14[i4] = $i5;
        i4 = i4 + 1;
        goto label3;

     label4:
        $r15 = r0.<sun.text.normalizer.UBiDiProps: int[] indexes>;
        $i6 = $r15[5];
        $r16 = r0.<sun.text.normalizer.UBiDiProps: int[] indexes>;
        $i7 = $r16[4];
        i8 = $i6 - $i7;
        $r17 = newarray (byte)[i8];
        r0.<sun.text.normalizer.UBiDiProps: byte[] jgArray> = $r17;
        i9 = 0;

     label5:
        if i9 >= i8 goto label6;

        $r18 = r0.<sun.text.normalizer.UBiDiProps: byte[] jgArray>;
        $b10 = virtualinvoke r3.<java.io.DataInputStream: byte readByte()>();
        $r18[i9] = $b10;
        i9 = i9 + 1;
        goto label5;

     label6:
        return;
    }

    public static final synchronized sun.text.normalizer.UBiDiProps getSingleton() throws java.io.IOException
    {
        sun.text.normalizer.UBiDiProps $r0, $r1, $r2;

        $r0 = <sun.text.normalizer.UBiDiProps: sun.text.normalizer.UBiDiProps gBdp>;
        if $r0 != null goto label0;

        $r1 = new sun.text.normalizer.UBiDiProps;
        specialinvoke $r1.<sun.text.normalizer.UBiDiProps: void <init>()>();
        <sun.text.normalizer.UBiDiProps: sun.text.normalizer.UBiDiProps gBdp> = $r1;

     label0:
        $r2 = <sun.text.normalizer.UBiDiProps: sun.text.normalizer.UBiDiProps gBdp>;
        return $r2;
    }

    private void <init>(boolean)
    {
        sun.text.normalizer.UBiDiProps r0;
        boolean z0;
        int[] $r1, $r2;
        sun.text.normalizer.CharTrie $r3;

        r0 := @this: sun.text.normalizer.UBiDiProps;
        z0 := @parameter0: boolean;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = newarray (int)[16];
        r0.<sun.text.normalizer.UBiDiProps: int[] indexes> = $r1;
        $r2 = r0.<sun.text.normalizer.UBiDiProps: int[] indexes>;
        $r2[0] = 16;
        $r3 = new sun.text.normalizer.CharTrie;
        specialinvoke $r3.<sun.text.normalizer.CharTrie: void <init>(int,int,sun.text.normalizer.Trie$DataManipulate)>(0, 0, null);
        r0.<sun.text.normalizer.UBiDiProps: sun.text.normalizer.CharTrie trie> = $r3;
        return;
    }

    public static final synchronized sun.text.normalizer.UBiDiProps getDummy()
    {
        sun.text.normalizer.UBiDiProps $r0, $r1, $r2;

        $r0 = <sun.text.normalizer.UBiDiProps: sun.text.normalizer.UBiDiProps gBdpDummy>;
        if $r0 != null goto label0;

        $r1 = new sun.text.normalizer.UBiDiProps;
        specialinvoke $r1.<sun.text.normalizer.UBiDiProps: void <init>(boolean)>(1);
        <sun.text.normalizer.UBiDiProps: sun.text.normalizer.UBiDiProps gBdpDummy> = $r1;

     label0:
        $r2 = <sun.text.normalizer.UBiDiProps: sun.text.normalizer.UBiDiProps gBdpDummy>;
        return $r2;
    }

    public final int getClass(int)
    {
        sun.text.normalizer.UBiDiProps r0;
        int i0, $i2;
        sun.text.normalizer.CharTrie $r1;
        char $c1;

        r0 := @this: sun.text.normalizer.UBiDiProps;
        i0 := @parameter0: int;
        $r1 = r0.<sun.text.normalizer.UBiDiProps: sun.text.normalizer.CharTrie trie>;
        $c1 = virtualinvoke $r1.<sun.text.normalizer.CharTrie: char getCodePointValue(int)>(i0);
        $i2 = staticinvoke <sun.text.normalizer.UBiDiProps: int getClassFromProps(int)>($c1);
        return $i2;
    }

    private static final int getClassFromProps(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;
        $i1 = i0 & 31;
        return $i1;
    }

    static void <clinit>()
    {
        byte[] $r0;

        <sun.text.normalizer.UBiDiProps: sun.text.normalizer.UBiDiProps gBdp> = null;
        <sun.text.normalizer.UBiDiProps: sun.text.normalizer.UBiDiProps gBdpDummy> = null;
        $r0 = newarray (byte)[4];
        $r0[0] = 66;
        $r0[1] = 105;
        $r0[2] = 68;
        $r0[3] = 105;
        <sun.text.normalizer.UBiDiProps: byte[] FMT> = $r0;
        return;
    }
}
