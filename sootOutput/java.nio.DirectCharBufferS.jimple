class java.nio.DirectCharBufferS extends java.nio.CharBuffer implements sun.nio.ch.DirectBuffer
{
    protected static final sun.misc.Unsafe unsafe;
    private static final long arrayBaseOffset;
    protected static final boolean unaligned;
    private final java.lang.Object att;
    static final boolean $assertionsDisabled;

    public java.lang.Object attachment()
    {
        java.nio.DirectCharBufferS r0;
        java.lang.Object $r1;

        r0 := @this: java.nio.DirectCharBufferS;
        $r1 = r0.<java.nio.DirectCharBufferS: java.lang.Object att>;
        return $r1;
    }

    public sun.misc.Cleaner cleaner()
    {
        java.nio.DirectCharBufferS r0;

        r0 := @this: java.nio.DirectCharBufferS;
        return null;
    }

    void <init>(sun.nio.ch.DirectBuffer, int, int, int, int, int)
    {
        java.nio.DirectCharBufferS r0;
        sun.nio.ch.DirectBuffer r1;
        int i0, i1, i2, i3, i4;
        long $l5, $l6, $l7;

        r0 := @this: java.nio.DirectCharBufferS;
        r1 := @parameter0: sun.nio.ch.DirectBuffer;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        specialinvoke r0.<java.nio.CharBuffer: void <init>(int,int,int,int)>(i0, i1, i2, i3);
        $l5 = interfaceinvoke r1.<sun.nio.ch.DirectBuffer: long address()>();
        $l6 = (long) i4;
        $l7 = $l5 + $l6;
        r0.<java.nio.DirectCharBufferS: long address> = $l7;
        r0.<java.nio.DirectCharBufferS: java.lang.Object att> = r1;
        return;
    }

    public java.nio.CharBuffer slice()
    {
        java.nio.DirectCharBufferS r0, $r3;
        int i0, i1, i2, i3, $i4;
        boolean $z0, $z1;
        java.lang.AssertionError $r1, $r2;

        r0 := @this: java.nio.DirectCharBufferS;
        i0 = virtualinvoke r0.<java.nio.DirectCharBufferS: int position()>();
        i1 = virtualinvoke r0.<java.nio.DirectCharBufferS: int limit()>();
        $z0 = <java.nio.DirectCharBufferS: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label0:
        if i0 > i1 goto label1;

        $i4 = i1 - i0;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i2 = $i4;
        i3 = i0 << 1;
        $z1 = <java.nio.DirectCharBufferS: boolean $assertionsDisabled>;
        if $z1 != 0 goto label3;

        if i3 >= 0 goto label3;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label3:
        $r3 = new java.nio.DirectCharBufferS;
        specialinvoke $r3.<java.nio.DirectCharBufferS: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i2, i2, i3);
        return $r3;
    }

    public java.nio.CharBuffer duplicate()
    {
        java.nio.DirectCharBufferS r0, $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.nio.DirectCharBufferS;
        $r1 = new java.nio.DirectCharBufferS;
        $i0 = virtualinvoke r0.<java.nio.DirectCharBufferS: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.DirectCharBufferS: int position()>();
        $i2 = virtualinvoke r0.<java.nio.DirectCharBufferS: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.DirectCharBufferS: int capacity()>();
        specialinvoke $r1.<java.nio.DirectCharBufferS: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, $i0, $i1, $i2, $i3, 0);
        return $r1;
    }

    public java.nio.CharBuffer asReadOnlyBuffer()
    {
        java.nio.DirectCharBufferS r0;
        java.nio.DirectCharBufferRS $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.nio.DirectCharBufferS;
        $r1 = new java.nio.DirectCharBufferRS;
        $i0 = virtualinvoke r0.<java.nio.DirectCharBufferS: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.DirectCharBufferS: int position()>();
        $i2 = virtualinvoke r0.<java.nio.DirectCharBufferS: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.DirectCharBufferS: int capacity()>();
        specialinvoke $r1.<java.nio.DirectCharBufferRS: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, $i0, $i1, $i2, $i3, 0);
        return $r1;
    }

    public long address()
    {
        java.nio.DirectCharBufferS r0;
        long $l0;

        r0 := @this: java.nio.DirectCharBufferS;
        $l0 = r0.<java.nio.DirectCharBufferS: long address>;
        return $l0;
    }

    private long ix(int)
    {
        java.nio.DirectCharBufferS r0;
        int i0, $i2;
        long $l1, $l3, $l4;

        r0 := @this: java.nio.DirectCharBufferS;
        i0 := @parameter0: int;
        $l1 = r0.<java.nio.DirectCharBufferS: long address>;
        $i2 = i0 << 1;
        $l3 = (long) $i2;
        $l4 = $l1 + $l3;
        return $l4;
    }

    public char get()
    {
        java.nio.DirectCharBufferS r0;
        sun.misc.Unsafe $r1;
        int $i0;
        long $l1;
        char $c2, $c3;

        r0 := @this: java.nio.DirectCharBufferS;
        $r1 = <java.nio.DirectCharBufferS: sun.misc.Unsafe unsafe>;
        $i0 = virtualinvoke r0.<java.nio.DirectCharBufferS: int nextGetIndex()>();
        $l1 = specialinvoke r0.<java.nio.DirectCharBufferS: long ix(int)>($i0);
        $c2 = virtualinvoke $r1.<sun.misc.Unsafe: char getChar(long)>($l1);
        $c3 = staticinvoke <java.nio.Bits: char swap(char)>($c2);
        return $c3;
    }

    public char get(int)
    {
        java.nio.DirectCharBufferS r0;
        int i0, $i1;
        sun.misc.Unsafe $r1;
        long $l2;
        char $c3, $c4;

        r0 := @this: java.nio.DirectCharBufferS;
        i0 := @parameter0: int;
        $r1 = <java.nio.DirectCharBufferS: sun.misc.Unsafe unsafe>;
        $i1 = virtualinvoke r0.<java.nio.DirectCharBufferS: int checkIndex(int)>(i0);
        $l2 = specialinvoke r0.<java.nio.DirectCharBufferS: long ix(int)>($i1);
        $c3 = virtualinvoke $r1.<sun.misc.Unsafe: char getChar(long)>($l2);
        $c4 = staticinvoke <java.nio.Bits: char swap(char)>($c3);
        return $c4;
    }

    public java.nio.CharBuffer get(char[], int, int)
    {
        java.nio.DirectCharBufferS r0;
        char[] r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i9, $i11, $i15, $i17, $i19;
        boolean $z0;
        java.lang.AssertionError $r2;
        java.nio.BufferUnderflowException $r3;
        java.nio.ByteOrder $r4, $r5;
        long $l8, $l10, $l12, $l13, $l14, $l16, $l18;

        r0 := @this: java.nio.DirectCharBufferS;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i5 = i1 << 1;
        if $i5 <= 6 goto label6;

        $i6 = lengthof r1;
        staticinvoke <java.nio.DirectCharBufferS: void checkBounds(int,int,int)>(i0, i1, $i6);
        i2 = virtualinvoke r0.<java.nio.DirectCharBufferS: int position()>();
        i3 = virtualinvoke r0.<java.nio.DirectCharBufferS: int limit()>();
        $z0 = <java.nio.DirectCharBufferS: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i2 <= i3 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        if i2 > i3 goto label1;

        $i7 = i3 - i2;
        goto label2;

     label1:
        $i7 = 0;

     label2:
        i4 = $i7;
        if i1 <= i4 goto label3;

        $r3 = new java.nio.BufferUnderflowException;
        specialinvoke $r3.<java.nio.BufferUnderflowException: void <init>()>();
        throw $r3;

     label3:
        $r4 = virtualinvoke r0.<java.nio.DirectCharBufferS: java.nio.ByteOrder order()>();
        $r5 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();
        if $r4 == $r5 goto label4;

        $l8 = specialinvoke r0.<java.nio.DirectCharBufferS: long ix(int)>(i2);
        $i9 = i0 << 1;
        $l10 = (long) $i9;
        $i11 = i1 << 1;
        $l12 = (long) $i11;
        staticinvoke <java.nio.Bits: void copyToCharArray(long,java.lang.Object,long,long)>($l8, r1, $l10, $l12);
        goto label5;

     label4:
        $l13 = specialinvoke r0.<java.nio.DirectCharBufferS: long ix(int)>(i2);
        $l14 = <java.nio.DirectCharBufferS: long arrayBaseOffset>;
        $i15 = i0 << 1;
        $l16 = (long) $i15;
        $i17 = i1 << 1;
        $l18 = (long) $i17;
        staticinvoke <java.nio.Bits: void copyToArray(long,java.lang.Object,long,long,long)>($l13, r1, $l14, $l16, $l18);

     label5:
        $i19 = i2 + i1;
        virtualinvoke r0.<java.nio.DirectCharBufferS: java.nio.Buffer position(int)>($i19);
        goto label7;

     label6:
        specialinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer get(char[],int,int)>(r1, i0, i1);

     label7:
        return r0;
    }

    public java.nio.CharBuffer put(char)
    {
        java.nio.DirectCharBufferS r0;
        char c0, $c3;
        sun.misc.Unsafe $r1;
        int $i1;
        long $l2;

        r0 := @this: java.nio.DirectCharBufferS;
        c0 := @parameter0: char;
        $r1 = <java.nio.DirectCharBufferS: sun.misc.Unsafe unsafe>;
        $i1 = virtualinvoke r0.<java.nio.DirectCharBufferS: int nextPutIndex()>();
        $l2 = specialinvoke r0.<java.nio.DirectCharBufferS: long ix(int)>($i1);
        $c3 = staticinvoke <java.nio.Bits: char swap(char)>(c0);
        virtualinvoke $r1.<sun.misc.Unsafe: void putChar(long,char)>($l2, $c3);
        return r0;
    }

    public java.nio.CharBuffer put(int, char)
    {
        java.nio.DirectCharBufferS r0;
        int i0, $i2;
        char c1, $c4;
        sun.misc.Unsafe $r1;
        long $l3;

        r0 := @this: java.nio.DirectCharBufferS;
        i0 := @parameter0: int;
        c1 := @parameter1: char;
        $r1 = <java.nio.DirectCharBufferS: sun.misc.Unsafe unsafe>;
        $i2 = virtualinvoke r0.<java.nio.DirectCharBufferS: int checkIndex(int)>(i0);
        $l3 = specialinvoke r0.<java.nio.DirectCharBufferS: long ix(int)>($i2);
        $c4 = staticinvoke <java.nio.Bits: char swap(char)>(c1);
        virtualinvoke $r1.<sun.misc.Unsafe: void putChar(long,char)>($l3, $c4);
        return r0;
    }

    public java.nio.CharBuffer put(java.nio.CharBuffer)
    {
        java.nio.DirectCharBufferS r0, r2;
        java.nio.CharBuffer r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i10, $i12, $i13, i14, i15, $i16, i17, $i18, $i19, $i20;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r3;
        java.lang.AssertionError $r4, $r5, $r11;
        java.nio.BufferOverflowException $r6;
        sun.misc.Unsafe $r7;
        long $l8, $l9, $l11;
        char[] $r10, $r12;

        r0 := @this: java.nio.DirectCharBufferS;
        r1 := @parameter0: java.nio.CharBuffer;
        $z0 = r1 instanceof java.nio.DirectCharBufferS;
        if $z0 == 0 goto label8;

        if r1 != r0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r3;

     label0:
        r2 = (java.nio.DirectCharBufferS) r1;
        i0 = virtualinvoke r2.<java.nio.DirectCharBufferS: int position()>();
        i1 = virtualinvoke r2.<java.nio.DirectCharBufferS: int limit()>();
        $z1 = <java.nio.DirectCharBufferS: boolean $assertionsDisabled>;
        if $z1 != 0 goto label1;

        if i0 <= i1 goto label1;

        $r4 = new java.lang.AssertionError;
        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();
        throw $r4;

     label1:
        if i0 > i1 goto label2;

        $i6 = i1 - i0;
        goto label3;

     label2:
        $i6 = 0;

     label3:
        i2 = $i6;
        i3 = virtualinvoke r0.<java.nio.DirectCharBufferS: int position()>();
        i4 = virtualinvoke r0.<java.nio.DirectCharBufferS: int limit()>();
        $z2 = <java.nio.DirectCharBufferS: boolean $assertionsDisabled>;
        if $z2 != 0 goto label4;

        if i3 <= i4 goto label4;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label4:
        if i3 > i4 goto label5;

        $i7 = i4 - i3;
        goto label6;

     label5:
        $i7 = 0;

     label6:
        i5 = $i7;
        if i2 <= i5 goto label7;

        $r6 = new java.nio.BufferOverflowException;
        specialinvoke $r6.<java.nio.BufferOverflowException: void <init>()>();
        throw $r6;

     label7:
        $r7 = <java.nio.DirectCharBufferS: sun.misc.Unsafe unsafe>;
        $l8 = specialinvoke r2.<java.nio.DirectCharBufferS: long ix(int)>(i0);
        $l9 = specialinvoke r0.<java.nio.DirectCharBufferS: long ix(int)>(i3);
        $i10 = i2 << 1;
        $l11 = (long) $i10;
        virtualinvoke $r7.<sun.misc.Unsafe: void copyMemory(long,long,long)>($l8, $l9, $l11);
        $i12 = i0 + i2;
        virtualinvoke r2.<java.nio.DirectCharBufferS: java.nio.Buffer position(int)>($i12);
        $i13 = i3 + i2;
        virtualinvoke r0.<java.nio.DirectCharBufferS: java.nio.Buffer position(int)>($i13);
        goto label13;

     label8:
        $r10 = r1.<java.nio.CharBuffer: char[] hb>;
        if $r10 == null goto label12;

        i14 = virtualinvoke r1.<java.nio.CharBuffer: int position()>();
        i15 = virtualinvoke r1.<java.nio.CharBuffer: int limit()>();
        $z3 = <java.nio.DirectCharBufferS: boolean $assertionsDisabled>;
        if $z3 != 0 goto label9;

        if i14 <= i15 goto label9;

        $r11 = new java.lang.AssertionError;
        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();
        throw $r11;

     label9:
        if i14 > i15 goto label10;

        $i16 = i15 - i14;
        goto label11;

     label10:
        $i16 = 0;

     label11:
        i17 = $i16;
        $r12 = r1.<java.nio.CharBuffer: char[] hb>;
        $i18 = r1.<java.nio.CharBuffer: int offset>;
        $i19 = $i18 + i14;
        virtualinvoke r0.<java.nio.DirectCharBufferS: java.nio.CharBuffer put(char[],int,int)>($r12, $i19, i17);
        $i20 = i14 + i17;
        virtualinvoke r1.<java.nio.CharBuffer: java.nio.Buffer position(int)>($i20);
        goto label13;

     label12:
        specialinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer put(java.nio.CharBuffer)>(r1);

     label13:
        return r0;
    }

    public java.nio.CharBuffer put(char[], int, int)
    {
        java.nio.DirectCharBufferS r0;
        char[] r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i11, $i14, $i17, $i19;
        boolean $z0;
        java.lang.AssertionError $r2;
        java.nio.BufferOverflowException $r3;
        java.nio.ByteOrder $r4, $r5;
        long $l9, $l10, $l12, $l13, $l15, $l16, $l18;

        r0 := @this: java.nio.DirectCharBufferS;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i5 = i1 << 1;
        if $i5 <= 6 goto label6;

        $i6 = lengthof r1;
        staticinvoke <java.nio.DirectCharBufferS: void checkBounds(int,int,int)>(i0, i1, $i6);
        i2 = virtualinvoke r0.<java.nio.DirectCharBufferS: int position()>();
        i3 = virtualinvoke r0.<java.nio.DirectCharBufferS: int limit()>();
        $z0 = <java.nio.DirectCharBufferS: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i2 <= i3 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        if i2 > i3 goto label1;

        $i7 = i3 - i2;
        goto label2;

     label1:
        $i7 = 0;

     label2:
        i4 = $i7;
        if i1 <= i4 goto label3;

        $r3 = new java.nio.BufferOverflowException;
        specialinvoke $r3.<java.nio.BufferOverflowException: void <init>()>();
        throw $r3;

     label3:
        $r4 = virtualinvoke r0.<java.nio.DirectCharBufferS: java.nio.ByteOrder order()>();
        $r5 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();
        if $r4 == $r5 goto label4;

        $i8 = i0 << 1;
        $l9 = (long) $i8;
        $l10 = specialinvoke r0.<java.nio.DirectCharBufferS: long ix(int)>(i2);
        $i11 = i1 << 1;
        $l12 = (long) $i11;
        staticinvoke <java.nio.Bits: void copyFromCharArray(java.lang.Object,long,long,long)>(r1, $l9, $l10, $l12);
        goto label5;

     label4:
        $l13 = <java.nio.DirectCharBufferS: long arrayBaseOffset>;
        $i14 = i0 << 1;
        $l15 = (long) $i14;
        $l16 = specialinvoke r0.<java.nio.DirectCharBufferS: long ix(int)>(i2);
        $i17 = i1 << 1;
        $l18 = (long) $i17;
        staticinvoke <java.nio.Bits: void copyFromArray(java.lang.Object,long,long,long,long)>(r1, $l13, $l15, $l16, $l18);

     label5:
        $i19 = i2 + i1;
        virtualinvoke r0.<java.nio.DirectCharBufferS: java.nio.Buffer position(int)>($i19);
        goto label7;

     label6:
        specialinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer put(char[],int,int)>(r1, i0, i1);

     label7:
        return r0;
    }

    public java.nio.CharBuffer compact()
    {
        java.nio.DirectCharBufferS r0;
        int i0, i1, i2, $i3, $i6, $i8;
        boolean $z0;
        java.lang.AssertionError $r1;
        sun.misc.Unsafe $r2;
        long $l4, $l5, $l7;

        r0 := @this: java.nio.DirectCharBufferS;
        i0 = virtualinvoke r0.<java.nio.DirectCharBufferS: int position()>();
        i1 = virtualinvoke r0.<java.nio.DirectCharBufferS: int limit()>();
        $z0 = <java.nio.DirectCharBufferS: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label0:
        if i0 > i1 goto label1;

        $i3 = i1 - i0;
        goto label2;

     label1:
        $i3 = 0;

     label2:
        i2 = $i3;
        $r2 = <java.nio.DirectCharBufferS: sun.misc.Unsafe unsafe>;
        $l4 = specialinvoke r0.<java.nio.DirectCharBufferS: long ix(int)>(i0);
        $l5 = specialinvoke r0.<java.nio.DirectCharBufferS: long ix(int)>(0);
        $i6 = i2 << 1;
        $l7 = (long) $i6;
        virtualinvoke $r2.<sun.misc.Unsafe: void copyMemory(long,long,long)>($l4, $l5, $l7);
        virtualinvoke r0.<java.nio.DirectCharBufferS: java.nio.Buffer position(int)>(i2);
        $i8 = virtualinvoke r0.<java.nio.DirectCharBufferS: int capacity()>();
        virtualinvoke r0.<java.nio.DirectCharBufferS: java.nio.Buffer limit(int)>($i8);
        virtualinvoke r0.<java.nio.DirectCharBufferS: void discardMark()>();
        return r0;
    }

    public boolean isDirect()
    {
        java.nio.DirectCharBufferS r0;

        r0 := @this: java.nio.DirectCharBufferS;
        return 1;
    }

    public boolean isReadOnly()
    {
        java.nio.DirectCharBufferS r0;

        r0 := @this: java.nio.DirectCharBufferS;
        return 0;
    }

    public java.lang.String toString(int, int)
    {
        java.nio.DirectCharBufferS r0;
        int i0, i1, i2, $i3;
        char[] r1;
        java.nio.CharBuffer r2, r3;
        java.lang.IndexOutOfBoundsException $r4, $r11;
        java.lang.String $r8;
        java.lang.StringIndexOutOfBoundsException $r9, r10;

        r0 := @this: java.nio.DirectCharBufferS;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i3 = virtualinvoke r0.<java.nio.DirectCharBufferS: int limit()>();
        if i1 > $i3 goto label0;

        if i0 <= i1 goto label1;

     label0:
        $r4 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r4;

     label1:
        i2 = i1 - i0;
        r1 = newarray (char)[i2];
        r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(r1);
        r3 = virtualinvoke r0.<java.nio.DirectCharBufferS: java.nio.CharBuffer duplicate()>();
        virtualinvoke r3.<java.nio.CharBuffer: java.nio.Buffer position(int)>(i0);
        virtualinvoke r3.<java.nio.CharBuffer: java.nio.Buffer limit(int)>(i1);
        virtualinvoke r2.<java.nio.CharBuffer: java.nio.CharBuffer put(java.nio.CharBuffer)>(r3);
        $r8 = new java.lang.String;
        specialinvoke $r8.<java.lang.String: void <init>(char[])>(r1);

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;
        r10 = $r9;
        $r11 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r11.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r11;

        catch java.lang.StringIndexOutOfBoundsException from label1 to label2 with label3;
    }

    public java.nio.CharBuffer subSequence(int, int)
    {
        java.nio.DirectCharBufferS r0, $r3;
        int i0, i1, i2, i3, i4, $i5, i6, $i7, $i8, $i9, $i10;
        boolean $z0;
        java.lang.AssertionError $r1;
        java.lang.IndexOutOfBoundsException $r2;

        r0 := @this: java.nio.DirectCharBufferS;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 = virtualinvoke r0.<java.nio.DirectCharBufferS: int position()>();
        i3 = virtualinvoke r0.<java.nio.DirectCharBufferS: int limit()>();
        $z0 = <java.nio.DirectCharBufferS: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i2 <= i3 goto label0;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label0:
        if i2 > i3 goto label1;

        $i5 = i2;
        goto label2;

     label1:
        $i5 = i3;

     label2:
        i6 = $i5;
        i4 = i3 - i6;
        if i0 < 0 goto label3;

        if i1 > i4 goto label3;

        if i0 <= i1 goto label4;

     label3:
        $r2 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r2;

     label4:
        $r3 = new java.nio.DirectCharBufferS;
        $i7 = i6 + i0;
        $i8 = i6 + i1;
        $i9 = virtualinvoke r0.<java.nio.DirectCharBufferS: int capacity()>();
        $i10 = r0.<java.nio.DirectCharBufferS: int offset>;
        specialinvoke $r3.<java.nio.DirectCharBufferS: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, $i7, $i8, $i9, $i10);
        return $r3;
    }

    public java.nio.ByteOrder order()
    {
        java.nio.DirectCharBufferS r0;
        java.nio.ByteOrder $r1, $r2, $r3;

        r0 := @this: java.nio.DirectCharBufferS;
        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();
        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;
        if $r1 != $r2 goto label0;

        $r3 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;
        goto label1;

     label0:
        $r3 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

     label1:
        return $r3;
    }

    public volatile java.lang.CharSequence subSequence(int, int)
    {
        java.nio.DirectCharBufferS r0;
        int i0, i1;
        java.nio.CharBuffer $r1;

        r0 := @this: java.nio.DirectCharBufferS;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = virtualinvoke r0.<java.nio.DirectCharBufferS: java.nio.CharBuffer subSequence(int,int)>(i0, i1);
        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1, $z2;
        sun.misc.Unsafe $r1, $r2;
        int $i0;
        long $l1;

        $r0 = class "java/nio/DirectCharBufferS";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.nio.DirectCharBufferS: boolean $assertionsDisabled> = $z1;
        $r1 = staticinvoke <java.nio.Bits: sun.misc.Unsafe unsafe()>();
        <java.nio.DirectCharBufferS: sun.misc.Unsafe unsafe> = $r1;
        $r2 = <java.nio.DirectCharBufferS: sun.misc.Unsafe unsafe>;
        $i0 = virtualinvoke $r2.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[C");
        $l1 = (long) $i0;
        <java.nio.DirectCharBufferS: long arrayBaseOffset> = $l1;
        $z2 = staticinvoke <java.nio.Bits: boolean unaligned()>();
        <java.nio.DirectCharBufferS: boolean unaligned> = $z2;
        return;
    }
}
