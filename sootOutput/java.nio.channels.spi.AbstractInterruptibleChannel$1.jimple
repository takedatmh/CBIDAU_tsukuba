class java.nio.channels.spi.AbstractInterruptibleChannel$1 extends java.lang.Object implements sun.nio.ch.Interruptible
{
    final java.nio.channels.spi.AbstractInterruptibleChannel this$0;

    void <init>(java.nio.channels.spi.AbstractInterruptibleChannel)
    {
        java.nio.channels.spi.AbstractInterruptibleChannel$1 r0;
        java.nio.channels.spi.AbstractInterruptibleChannel r1;

        r0 := @this: java.nio.channels.spi.AbstractInterruptibleChannel$1;
        r1 := @parameter0: java.nio.channels.spi.AbstractInterruptibleChannel;
        r0.<java.nio.channels.spi.AbstractInterruptibleChannel$1: java.nio.channels.spi.AbstractInterruptibleChannel this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public void interrupt(java.lang.Thread)
    {
        java.nio.channels.spi.AbstractInterruptibleChannel$1 r0;
        java.lang.Thread r1;
        java.lang.Object r2, $r6;
        java.io.IOException r3, $r12;
        java.lang.Throwable r4, $r13;
        java.nio.channels.spi.AbstractInterruptibleChannel $r5, $r7, $r8, $r9, $r11;
        boolean $z0;

        r0 := @this: java.nio.channels.spi.AbstractInterruptibleChannel$1;
        r1 := @parameter0: java.lang.Thread;
        $r5 = r0.<java.nio.channels.spi.AbstractInterruptibleChannel$1: java.nio.channels.spi.AbstractInterruptibleChannel this$0>;
        $r6 = staticinvoke <java.nio.channels.spi.AbstractInterruptibleChannel: java.lang.Object access$000(java.nio.channels.spi.AbstractInterruptibleChannel)>($r5);
        r2 = $r6;
        entermonitor $r6;

     label0:
        $r7 = r0.<java.nio.channels.spi.AbstractInterruptibleChannel$1: java.nio.channels.spi.AbstractInterruptibleChannel this$0>;
        $z0 = staticinvoke <java.nio.channels.spi.AbstractInterruptibleChannel: boolean access$100(java.nio.channels.spi.AbstractInterruptibleChannel)>($r7);
        if $z0 != 0 goto label2;

        exitmonitor r2;

     label1:
        return;

     label2:
        $r8 = r0.<java.nio.channels.spi.AbstractInterruptibleChannel$1: java.nio.channels.spi.AbstractInterruptibleChannel this$0>;
        staticinvoke <java.nio.channels.spi.AbstractInterruptibleChannel: boolean access$102(java.nio.channels.spi.AbstractInterruptibleChannel,boolean)>($r8, 0);
        $r9 = r0.<java.nio.channels.spi.AbstractInterruptibleChannel$1: java.nio.channels.spi.AbstractInterruptibleChannel this$0>;
        staticinvoke <java.nio.channels.spi.AbstractInterruptibleChannel: java.lang.Thread access$202(java.nio.channels.spi.AbstractInterruptibleChannel,java.lang.Thread)>($r9, r1);

     label3:
        $r11 = r0.<java.nio.channels.spi.AbstractInterruptibleChannel$1: java.nio.channels.spi.AbstractInterruptibleChannel this$0>;
        virtualinvoke $r11.<java.nio.channels.spi.AbstractInterruptibleChannel: void implCloseChannel()>();

     label4:
        goto label6;

     label5:
        $r12 := @caughtexception;
        r3 = $r12;

     label6:
        exitmonitor r2;

     label7:
        goto label11;

     label8:
        $r13 := @caughtexception;

     label9:
        r4 = $r13;
        exitmonitor r2;

     label10:
        throw r4;

     label11:
        return;

        catch java.io.IOException from label3 to label4 with label5;
        catch java.lang.Throwable from label0 to label1 with label8;
        catch java.lang.Throwable from label2 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }
}
