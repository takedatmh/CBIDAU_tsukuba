class java.util.regex.Pattern$BnM extends java.util.regex.Pattern$Node
{
    int[] buffer;
    int[] lastOcc;
    int[] optoSft;

    static java.util.regex.Pattern$Node optimize(java.util.regex.Pattern$Node)
    {
        java.util.regex.Pattern$Node r0, $r6, $r8;
        int[] r1, r2, r3;
        int i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0, $z1;
        java.util.regex.Pattern$Slice $r4;
        java.util.regex.Pattern$BnMS $r5;
        java.util.regex.Pattern$BnM $r7;

        r0 := @parameter0: java.util.regex.Pattern$Node;
        $z0 = r0 instanceof java.util.regex.Pattern$Slice;
        if $z0 != 0 goto label0;

        return r0;

     label0:
        $r4 = (java.util.regex.Pattern$Slice) r0;
        r1 = $r4.<java.util.regex.Pattern$Slice: int[] buffer>;
        i0 = lengthof r1;
        if i0 >= 4 goto label1;

        return r0;

     label1:
        r2 = newarray (int)[128];
        r3 = newarray (int)[i0];
        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $i3 = r1[i1];
        $i4 = $i3 & 127;
        $i5 = i1 + 1;
        r2[$i4] = $i5;
        i1 = i1 + 1;
        goto label2;

     label3:
        i6 = i0;

     label4:
        if i6 <= 0 goto label8;

        i2 = i0 - 1;

     label5:
        if i2 < i6 goto label6;

        $i7 = r1[i2];
        $i8 = i2 - i6;
        $i9 = r1[$i8];
        if $i7 != $i9 goto label7;

        $i10 = i2 - 1;
        r3[$i10] = i6;
        i2 = i2 + -1;
        goto label5;

     label6:
        if i2 <= 0 goto label7;

        i2 = i2 + -1;
        r3[i2] = i6;
        goto label6;

     label7:
        i6 = i6 + -1;
        goto label4;

     label8:
        $i11 = i0 - 1;
        r3[$i11] = 1;
        $z1 = r0 instanceof java.util.regex.Pattern$SliceS;
        if $z1 == 0 goto label9;

        $r5 = new java.util.regex.Pattern$BnMS;
        $r6 = r0.<java.util.regex.Pattern$Node: java.util.regex.Pattern$Node next>;
        specialinvoke $r5.<java.util.regex.Pattern$BnMS: void <init>(int[],int[],int[],java.util.regex.Pattern$Node)>(r1, r2, r3, $r6);
        return $r5;

     label9:
        $r7 = new java.util.regex.Pattern$BnM;
        $r8 = r0.<java.util.regex.Pattern$Node: java.util.regex.Pattern$Node next>;
        specialinvoke $r7.<java.util.regex.Pattern$BnM: void <init>(int[],int[],int[],java.util.regex.Pattern$Node)>(r1, r2, r3, $r8);
        return $r7;
    }

    void <init>(int[], int[], int[], java.util.regex.Pattern$Node)
    {
        java.util.regex.Pattern$BnM r0;
        int[] r1, r2, r3;
        java.util.regex.Pattern$Node r4;

        r0 := @this: java.util.regex.Pattern$BnM;
        r1 := @parameter0: int[];
        r2 := @parameter1: int[];
        r3 := @parameter2: int[];
        r4 := @parameter3: java.util.regex.Pattern$Node;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        r0.<java.util.regex.Pattern$BnM: int[] buffer> = r1;
        r0.<java.util.regex.Pattern$BnM: int[] lastOcc> = r2;
        r0.<java.util.regex.Pattern$BnM: int[] optoSft> = r3;
        r0.<java.util.regex.Pattern$BnM: java.util.regex.Pattern$Node next> = r4;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$BnM r0;
        java.util.regex.Matcher r1;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.CharSequence r2;
        int[] r3, $r4, $r5, $r7, $r8;
        char c4, $c9;
        java.util.regex.Pattern$Node $r6;
        boolean z0;

        r0 := @this: java.util.regex.Pattern$BnM;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        r3 = r0.<java.util.regex.Pattern$BnM: int[] buffer>;
        i1 = lengthof r3;
        $i5 = r1.<java.util.regex.Matcher: int 'to'>;
        i2 = $i5 - i1;

     label0:
        if i0 > i2 goto label5;

        i3 = i1 - 1;

     label1:
        if i3 < 0 goto label3;

        $i6 = i0 + i3;
        c4 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i6);
        $i7 = r3[i3];
        if c4 == $i7 goto label2;

        $i8 = i3 + 1;
        $r4 = r0.<java.util.regex.Pattern$BnM: int[] lastOcc>;
        $c9 = c4 & 127;
        $i10 = $r4[$c9];
        $i11 = $i8 - $i10;
        $r5 = r0.<java.util.regex.Pattern$BnM: int[] optoSft>;
        $i12 = $r5[i3];
        $i13 = staticinvoke <java.lang.Math: int max(int,int)>($i11, $i12);
        i0 = i0 + $i13;
        goto label0;

     label2:
        i3 = i3 + -1;
        goto label1;

     label3:
        r1.<java.util.regex.Matcher: int first> = i0;
        $r6 = r0.<java.util.regex.Pattern$BnM: java.util.regex.Pattern$Node next>;
        $i14 = i0 + i1;
        z0 = virtualinvoke $r6.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, $i14, r2);
        if z0 == 0 goto label4;

        r1.<java.util.regex.Matcher: int first> = i0;
        $r7 = r1.<java.util.regex.Matcher: int[] groups>;
        $i15 = r1.<java.util.regex.Matcher: int first>;
        $r7[0] = $i15;
        $r8 = r1.<java.util.regex.Matcher: int[] groups>;
        $i16 = r1.<java.util.regex.Matcher: int last>;
        $r8[1] = $i16;
        return 1;

     label4:
        i0 = i0 + 1;
        goto label0;

     label5:
        r1.<java.util.regex.Matcher: boolean hitEnd> = 1;
        return 0;
    }

    boolean study(java.util.regex.Pattern$TreeInfo)
    {
        java.util.regex.Pattern$BnM r0;
        java.util.regex.Pattern$TreeInfo r1;
        int $i0, $i1, $i2;
        int[] $r3;
        java.util.regex.Pattern$Node $r4;
        boolean $z0;

        r0 := @this: java.util.regex.Pattern$BnM;
        r1 := @parameter0: java.util.regex.Pattern$TreeInfo;
        $i0 = r1.<java.util.regex.Pattern$TreeInfo: int minLength>;
        $r3 = r0.<java.util.regex.Pattern$BnM: int[] buffer>;
        $i1 = lengthof $r3;
        $i2 = $i0 + $i1;
        r1.<java.util.regex.Pattern$TreeInfo: int minLength> = $i2;
        r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid> = 0;
        $r4 = r0.<java.util.regex.Pattern$BnM: java.util.regex.Pattern$Node next>;
        $z0 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        return $z0;
    }
}
