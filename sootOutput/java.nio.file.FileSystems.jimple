public final class java.nio.file.FileSystems extends java.lang.Object
{

    private void <init>()
    {
        java.nio.file.FileSystems r0;

        r0 := @this: java.nio.file.FileSystems;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static java.nio.file.FileSystem getDefault()
    {
        java.nio.file.FileSystem $r0;

        $r0 = <java.nio.file.FileSystems$DefaultFileSystemHolder: java.nio.file.FileSystem defaultFileSystem>;
        return $r0;
    }

    public static java.nio.file.FileSystem getFileSystem(java.net.URI)
    {
        java.net.URI r0;
        java.lang.String r1, $r7, $r13;
        java.util.Iterator r2;
        java.nio.file.spi.FileSystemProvider r3;
        java.lang.StringBuilder $r4, $r10, $r11, $r12;
        java.util.List $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        java.nio.file.FileSystem $r8;
        java.nio.file.ProviderNotFoundException $r9;

        r0 := @parameter0: java.net.URI;
        r1 = virtualinvoke r0.<java.net.URI: java.lang.String getScheme()>();
        $r5 = staticinvoke <java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()>();
        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.nio.file.spi.FileSystemProvider) $r6;
        $r7 = virtualinvoke r3.<java.nio.file.spi.FileSystemProvider: java.lang.String getScheme()>();
        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r7);
        if $z1 == 0 goto label1;

        $r8 = virtualinvoke r3.<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem getFileSystem(java.net.URI)>(r0);
        return $r8;

     label1:
        goto label0;

     label2:
        $r9 = new java.nio.file.ProviderNotFoundException;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not found");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.nio.file.ProviderNotFoundException: void <init>(java.lang.String)>($r13);
        throw $r9;
    }

    public static java.nio.file.FileSystem newFileSystem(java.net.URI, java.util.Map) throws java.io.IOException
    {
        java.net.URI r0;
        java.util.Map r1;
        java.nio.file.FileSystem $r2;

        r0 := @parameter0: java.net.URI;
        r1 := @parameter1: java.util.Map;
        $r2 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map,java.lang.ClassLoader)>(r0, r1, null);
        return $r2;
    }

    public static java.nio.file.FileSystem newFileSystem(java.net.URI, java.util.Map, java.lang.ClassLoader) throws java.io.IOException
    {
        java.net.URI r0;
        java.util.Map r1;
        java.lang.ClassLoader r2;
        java.lang.String r3, $r9, $r14, $r21;
        java.util.Iterator r4, r12;
        java.nio.file.spi.FileSystemProvider r5, r6;
        java.util.List $r7;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r8, $r13;
        java.nio.file.FileSystem $r10, $r15;
        java.util.ServiceLoader r11;
        java.nio.file.ProviderNotFoundException $r16;
        java.lang.StringBuilder $r17, $r18, $r19, $r20;

        r0 := @parameter0: java.net.URI;
        r1 := @parameter1: java.util.Map;
        r2 := @parameter2: java.lang.ClassLoader;
        r3 = virtualinvoke r0.<java.net.URI: java.lang.String getScheme()>();
        $r7 = staticinvoke <java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()>();
        r4 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.nio.file.spi.FileSystemProvider) $r8;
        $r9 = virtualinvoke r5.<java.nio.file.spi.FileSystemProvider: java.lang.String getScheme()>();
        $z1 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r9);
        if $z1 == 0 goto label1;

        $r10 = virtualinvoke r5.<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map)>(r0, r1);
        return $r10;

     label1:
        goto label0;

     label2:
        if r2 == null goto label5;

        r11 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "java/nio/file/spi/FileSystemProvider", r2);
        r12 = virtualinvoke r11.<java.util.ServiceLoader: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label5;

        $r13 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();
        r6 = (java.nio.file.spi.FileSystemProvider) $r13;
        $r14 = virtualinvoke r6.<java.nio.file.spi.FileSystemProvider: java.lang.String getScheme()>();
        $z3 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r14);
        if $z3 == 0 goto label4;

        $r15 = virtualinvoke r6.<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map)>(r0, r1);
        return $r15;

     label4:
        goto label3;

     label5:
        $r16 = new java.nio.file.ProviderNotFoundException;
        $r17 = new java.lang.StringBuilder;
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not found");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r16.<java.nio.file.ProviderNotFoundException: void <init>(java.lang.String)>($r21);
        throw $r16;
    }

    public static java.nio.file.FileSystem newFileSystem(java.nio.file.Path, java.lang.ClassLoader) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.lang.ClassLoader r1;
        java.util.Map r2;
        java.util.Iterator r3, r13;
        java.nio.file.spi.FileSystemProvider r4, r15;
        java.lang.UnsupportedOperationException r5, r6, $r11, $r17;
        java.lang.NullPointerException $r7;
        java.util.List $r8;
        boolean $z0, $z1;
        java.lang.Object $r9, $r14;
        java.nio.file.FileSystem $r10, $r16;
        java.util.ServiceLoader r12;
        java.nio.file.ProviderNotFoundException $r18;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.lang.ClassLoader;
        if r0 != null goto label0;

        $r7 = new java.lang.NullPointerException;
        specialinvoke $r7.<java.lang.NullPointerException: void <init>()>();
        throw $r7;

     label0:
        r2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
        $r8 = staticinvoke <java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()>();
        r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.nio.file.spi.FileSystemProvider) $r9;

     label2:
        $r10 = virtualinvoke r4.<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.nio.file.Path,java.util.Map)>(r0, r2);

     label3:
        return $r10;

     label4:
        $r11 := @caughtexception;
        r5 = $r11;
        goto label1;

     label5:
        if r1 == null goto label10;

        r12 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "java/nio/file/spi/FileSystemProvider", r1);
        r13 = virtualinvoke r12.<java.util.ServiceLoader: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label10;

        $r14 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();
        r15 = (java.nio.file.spi.FileSystemProvider) $r14;

     label7:
        $r16 = virtualinvoke r15.<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.nio.file.Path,java.util.Map)>(r0, r2);

     label8:
        return $r16;

     label9:
        $r17 := @caughtexception;
        r6 = $r17;
        goto label6;

     label10:
        $r18 = new java.nio.file.ProviderNotFoundException;
        specialinvoke $r18.<java.nio.file.ProviderNotFoundException: void <init>(java.lang.String)>("Provider not found");
        throw $r18;

        catch java.lang.UnsupportedOperationException from label2 to label3 with label4;
        catch java.lang.UnsupportedOperationException from label7 to label8 with label9;
    }
}
