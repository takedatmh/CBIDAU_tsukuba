class java.util.AbstractList$ListItr extends java.util.AbstractList$Itr implements java.util.ListIterator
{
    final java.util.AbstractList this$0;

    void <init>(java.util.AbstractList, int)
    {
        java.util.AbstractList$ListItr r0;
        java.util.AbstractList r1;
        int i0;

        r0 := @this: java.util.AbstractList$ListItr;
        r1 := @parameter0: java.util.AbstractList;
        i0 := @parameter1: int;
        r0.<java.util.AbstractList$ListItr: java.util.AbstractList this$0> = r1;
        specialinvoke r0.<java.util.AbstractList$Itr: void <init>(java.util.AbstractList,java.util.AbstractList$1)>(r1, null);
        r0.<java.util.AbstractList$ListItr: int cursor> = i0;
        return;
    }

    public boolean hasPrevious()
    {
        java.util.AbstractList$ListItr r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.AbstractList$ListItr;
        $i0 = r0.<java.util.AbstractList$ListItr: int cursor>;
        if $i0 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.Object previous()
    {
        java.util.AbstractList$ListItr r0;
        int i0, $i2;
        java.lang.Object r1;
        java.util.AbstractList $r2;
        java.lang.IndexOutOfBoundsException $r4, r5;
        java.util.NoSuchElementException $r6;

        r0 := @this: java.util.AbstractList$ListItr;
        virtualinvoke r0.<java.util.AbstractList$ListItr: void checkForComodification()>();

     label0:
        $i2 = r0.<java.util.AbstractList$ListItr: int cursor>;
        i0 = $i2 - 1;
        $r2 = r0.<java.util.AbstractList$ListItr: java.util.AbstractList this$0>;
        r1 = virtualinvoke $r2.<java.util.AbstractList: java.lang.Object get(int)>(i0);
        r0.<java.util.AbstractList$ListItr: int cursor> = i0;
        r0.<java.util.AbstractList$ListItr: int lastRet> = i0;

     label1:
        return r1;

     label2:
        $r4 := @caughtexception;
        r5 = $r4;
        virtualinvoke r0.<java.util.AbstractList$ListItr: void checkForComodification()>();
        $r6 = new java.util.NoSuchElementException;
        specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>();
        throw $r6;

        catch java.lang.IndexOutOfBoundsException from label0 to label1 with label2;
    }

    public int nextIndex()
    {
        java.util.AbstractList$ListItr r0;
        int $i0;

        r0 := @this: java.util.AbstractList$ListItr;
        $i0 = r0.<java.util.AbstractList$ListItr: int cursor>;
        return $i0;
    }

    public int previousIndex()
    {
        java.util.AbstractList$ListItr r0;
        int $i0, $i1;

        r0 := @this: java.util.AbstractList$ListItr;
        $i0 = r0.<java.util.AbstractList$ListItr: int cursor>;
        $i1 = $i0 - 1;
        return $i1;
    }

    public void set(java.lang.Object)
    {
        java.util.AbstractList$ListItr r0;
        java.lang.Object r1;
        java.lang.IndexOutOfBoundsException r2, $r7;
        int $i0, $i1, $i2;
        java.lang.IllegalStateException $r3;
        java.util.AbstractList $r4, $r6;
        java.util.ConcurrentModificationException $r8;

        r0 := @this: java.util.AbstractList$ListItr;
        r1 := @parameter0: java.lang.Object;
        $i0 = r0.<java.util.AbstractList$ListItr: int lastRet>;
        if $i0 >= 0 goto label0;

        $r3 = new java.lang.IllegalStateException;
        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();
        throw $r3;

     label0:
        virtualinvoke r0.<java.util.AbstractList$ListItr: void checkForComodification()>();

     label1:
        $r4 = r0.<java.util.AbstractList$ListItr: java.util.AbstractList this$0>;
        $i1 = r0.<java.util.AbstractList$ListItr: int lastRet>;
        virtualinvoke $r4.<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)>($i1, r1);
        $r6 = r0.<java.util.AbstractList$ListItr: java.util.AbstractList this$0>;
        $i2 = $r6.<java.util.AbstractList: int modCount>;
        r0.<java.util.AbstractList$ListItr: int expectedModCount> = $i2;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;
        r2 = $r7;
        $r8 = new java.util.ConcurrentModificationException;
        specialinvoke $r8.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r8;

     label4:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void add(java.lang.Object)
    {
        java.util.AbstractList$ListItr r0;
        java.lang.Object r1;
        int i0, $i1, $i2;
        java.util.AbstractList $r2, $r3;
        java.lang.IndexOutOfBoundsException $r4, r5;
        java.util.ConcurrentModificationException $r6;

        r0 := @this: java.util.AbstractList$ListItr;
        r1 := @parameter0: java.lang.Object;
        virtualinvoke r0.<java.util.AbstractList$ListItr: void checkForComodification()>();

     label0:
        i0 = r0.<java.util.AbstractList$ListItr: int cursor>;
        $r2 = r0.<java.util.AbstractList$ListItr: java.util.AbstractList this$0>;
        virtualinvoke $r2.<java.util.AbstractList: void add(int,java.lang.Object)>(i0, r1);
        r0.<java.util.AbstractList$ListItr: int lastRet> = -1;
        $i1 = i0 + 1;
        r0.<java.util.AbstractList$ListItr: int cursor> = $i1;
        $r3 = r0.<java.util.AbstractList$ListItr: java.util.AbstractList this$0>;
        $i2 = $r3.<java.util.AbstractList: int modCount>;
        r0.<java.util.AbstractList$ListItr: int expectedModCount> = $i2;

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r5 = $r4;
        $r6 = new java.util.ConcurrentModificationException;
        specialinvoke $r6.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r6;

     label3:
        return;

        catch java.lang.IndexOutOfBoundsException from label0 to label1 with label2;
    }
}
