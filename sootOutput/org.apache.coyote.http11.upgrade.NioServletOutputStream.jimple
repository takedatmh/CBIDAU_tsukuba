public class org.apache.coyote.http11.upgrade.NioServletOutputStream extends org.apache.coyote.http11.upgrade.AbstractServletOutputStream
{
    private final org.apache.tomcat.util.net.NioChannel channel;
    private final org.apache.tomcat.util.net.NioSelectorPool pool;
    private final int maxWrite;

    public void <init>(org.apache.tomcat.util.net.SocketWrapper, int, org.apache.tomcat.util.net.NioSelectorPool)
    {
        org.apache.coyote.http11.upgrade.NioServletOutputStream r0;
        org.apache.tomcat.util.net.SocketWrapper r1;
        int i0, $i1;
        org.apache.tomcat.util.net.NioSelectorPool r2;
        java.lang.Object $r3;
        org.apache.tomcat.util.net.NioChannel $r4, $r5;
        org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler $r6;
        java.nio.ByteBuffer $r7;

        r0 := @this: org.apache.coyote.http11.upgrade.NioServletOutputStream;
        r1 := @parameter0: org.apache.tomcat.util.net.SocketWrapper;
        i0 := @parameter1: int;
        r2 := @parameter2: org.apache.tomcat.util.net.NioSelectorPool;
        specialinvoke r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: void <init>(int)>(i0);
        $r3 = virtualinvoke r1.<org.apache.tomcat.util.net.SocketWrapper: java.lang.Object getSocket()>();
        $r4 = (org.apache.tomcat.util.net.NioChannel) $r3;
        r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioChannel channel> = $r4;
        r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioSelectorPool pool> = r2;
        $r5 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioChannel channel>;
        $r6 = virtualinvoke $r5.<org.apache.tomcat.util.net.NioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r7 = interfaceinvoke $r6.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getWriteBuffer()>();
        $i1 = virtualinvoke $r7.<java.nio.ByteBuffer: int capacity()>();
        r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: int maxWrite> = $i1;
        return;
    }

    protected int doWrite(boolean, byte[], int, int) throws java.io.IOException
    {
        org.apache.coyote.http11.upgrade.NioServletOutputStream r0;
        boolean z0;
        byte[] r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7;

        r0 := @this: org.apache.coyote.http11.upgrade.NioServletOutputStream;
        z0 := @parameter0: boolean;
        r1 := @parameter1: byte[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        i2 = i1;
        i3 = 0;
        i4 = i0;
        goto label3;

     label0:
        $i7 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: int maxWrite>;
        if i2 <= $i7 goto label1;

        i5 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: int maxWrite>;
        goto label2;

     label1:
        i5 = i2;

     label2:
        i6 = specialinvoke r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: int doWriteInternal(boolean,byte[],int,int)>(z0, r1, i4, i5);
        i3 = i3 + i6;
        i4 = i4 + i6;
        i2 = i2 - i6;
        if i6 >= i5 goto label3;

        goto label4;

     label3:
        if i2 > 0 goto label0;

     label4:
        return i3;
    }

    private int doWriteInternal(boolean, byte[], int, int) throws java.io.IOException
    {
        org.apache.coyote.http11.upgrade.NioServletOutputStream r0;
        boolean z0, z1;
        byte[] r1;
        int i0, i1, i3;
        org.apache.tomcat.util.net.NioEndpoint$KeyAttachment r2;
        long l2;
        java.nio.channels.Selector r3;
        java.io.IOException r4, $r19, $r21;
        org.apache.tomcat.util.net.NioChannel $r5, $r9, $r13, $r17, $r23, $r26, $r31, $r33;
        org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler $r6, $r10, $r14, $r24;
        java.nio.ByteBuffer $r7, $r11, $r15, $r25;
        java.lang.Object $r18;
        org.apache.tomcat.util.net.NioSelectorPool $r20, $r22, $r29, $r30;
        java.lang.Throwable $r27, r28;
        org.apache.tomcat.util.net.NioEndpoint$Poller $r32;

        r0 := @this: org.apache.coyote.http11.upgrade.NioServletOutputStream;
        z0 := @parameter0: boolean;
        r1 := @parameter1: byte[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        $r5 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioChannel channel>;
        $r6 = virtualinvoke $r5.<org.apache.tomcat.util.net.NioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r7 = interfaceinvoke $r6.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getWriteBuffer()>();
        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer clear()>();
        $r9 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioChannel channel>;
        $r10 = virtualinvoke $r9.<org.apache.tomcat.util.net.NioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r11 = interfaceinvoke $r10.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getWriteBuffer()>();
        virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r1, i0, i1);
        $r13 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioChannel channel>;
        $r14 = virtualinvoke $r13.<org.apache.tomcat.util.net.NioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r15 = interfaceinvoke $r14.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getWriteBuffer()>();
        virtualinvoke $r15.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        z1 = 0;
        $r17 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioChannel channel>;
        $r18 = virtualinvoke $r17.<org.apache.tomcat.util.net.NioChannel: java.lang.Object getAttachment()>();
        r2 = (org.apache.tomcat.util.net.NioEndpoint$KeyAttachment) $r18;
        if r2 != null goto label0;

        $r19 = new java.io.IOException;
        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>("Key must be cancelled");
        throw $r19;

     label0:
        l2 = virtualinvoke r2.<org.apache.tomcat.util.net.NioEndpoint$KeyAttachment: long getWriteTimeout()>();
        r3 = null;

     label1:
        $r20 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioSelectorPool pool>;
        r3 = virtualinvoke $r20.<org.apache.tomcat.util.net.NioSelectorPool: java.nio.channels.Selector get()>();

     label2:
        goto label4;

     label3:
        $r21 := @caughtexception;
        r4 = $r21;

     label4:
        $r22 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioSelectorPool pool>;
        $r23 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioChannel channel>;
        $r24 = virtualinvoke $r23.<org.apache.tomcat.util.net.NioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r25 = interfaceinvoke $r24.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getWriteBuffer()>();
        $r26 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioChannel channel>;
        i3 = virtualinvoke $r22.<org.apache.tomcat.util.net.NioSelectorPool: int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)>($r25, $r26, r3, l2, z0);
        goto label7;

     label5:
        $r27 := @caughtexception;
        r28 = $r27;
        if r3 == null goto label6;

        $r29 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioSelectorPool pool>;
        virtualinvoke $r29.<org.apache.tomcat.util.net.NioSelectorPool: void put(java.nio.channels.Selector)>(r3);

     label6:
        throw r28;

     label7:
        if r3 == null goto label8;

        $r30 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioSelectorPool pool>;
        virtualinvoke $r30.<org.apache.tomcat.util.net.NioSelectorPool: void put(java.nio.channels.Selector)>(r3);

     label8:
        if i3 >= i1 goto label9;

        $r31 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioChannel channel>;
        $r32 = virtualinvoke $r31.<org.apache.tomcat.util.net.NioChannel: org.apache.tomcat.util.net.NioEndpoint$Poller getPoller()>();
        $r33 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioChannel channel>;
        virtualinvoke $r32.<org.apache.tomcat.util.net.NioEndpoint$Poller: void add(org.apache.tomcat.util.net.NioChannel,int)>($r33, 4);

     label9:
        return i3;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    protected void doFlush() throws java.io.IOException
    {
        org.apache.coyote.http11.upgrade.NioServletOutputStream r0;
        org.apache.tomcat.util.net.NioEndpoint$KeyAttachment r1;
        long l0;
        java.nio.channels.Selector r2;
        java.io.IOException r3, $r6, $r8;
        org.apache.tomcat.util.net.NioChannel $r4, $r9;
        java.lang.Object $r5;
        org.apache.tomcat.util.net.NioSelectorPool $r7, $r12, $r13;
        boolean $z0;
        java.lang.Throwable $r10, r11;

        r0 := @this: org.apache.coyote.http11.upgrade.NioServletOutputStream;
        $r4 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioChannel channel>;
        $r5 = virtualinvoke $r4.<org.apache.tomcat.util.net.NioChannel: java.lang.Object getAttachment()>();
        r1 = (org.apache.tomcat.util.net.NioEndpoint$KeyAttachment) $r5;
        if r1 != null goto label0;

        $r6 = new java.io.IOException;
        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Key must be cancelled");
        throw $r6;

     label0:
        l0 = virtualinvoke r1.<org.apache.tomcat.util.net.NioEndpoint$KeyAttachment: long getWriteTimeout()>();
        r2 = null;

     label1:
        $r7 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioSelectorPool pool>;
        r2 = virtualinvoke $r7.<org.apache.tomcat.util.net.NioSelectorPool: java.nio.channels.Selector get()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;
        r3 = $r8;

     label4:
        $r9 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioChannel channel>;
        $z0 = virtualinvoke $r9.<org.apache.tomcat.util.net.NioChannel: boolean flush(boolean,java.nio.channels.Selector,long)>(1, r2, l0);
        if $z0 == 0 goto label4;

        goto label7;

     label5:
        $r10 := @caughtexception;
        r11 = $r10;
        if r2 == null goto label6;

        $r12 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioSelectorPool pool>;
        virtualinvoke $r12.<org.apache.tomcat.util.net.NioSelectorPool: void put(java.nio.channels.Selector)>(r2);

     label6:
        throw r11;

     label7:
        if r2 == null goto label8;

        $r13 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioSelectorPool pool>;
        virtualinvoke $r13.<org.apache.tomcat.util.net.NioSelectorPool: void put(java.nio.channels.Selector)>(r2);

     label8:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    protected void doClose() throws java.io.IOException
    {
        org.apache.coyote.http11.upgrade.NioServletOutputStream r0;
        org.apache.tomcat.util.net.NioChannel $r1;

        r0 := @this: org.apache.coyote.http11.upgrade.NioServletOutputStream;
        $r1 = r0.<org.apache.coyote.http11.upgrade.NioServletOutputStream: org.apache.tomcat.util.net.NioChannel channel>;
        virtualinvoke $r1.<org.apache.tomcat.util.net.NioChannel: void close(boolean)>(1);
        return;
    }
}
