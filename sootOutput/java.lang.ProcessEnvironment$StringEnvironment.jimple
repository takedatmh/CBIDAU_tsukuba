class java.lang.ProcessEnvironment$StringEnvironment extends java.util.AbstractMap
{
    private java.util.Map m;

    private static java.lang.String toString(java.lang.ProcessEnvironment$Value)
    {
        java.lang.ProcessEnvironment$Value r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.ProcessEnvironment$Value;
        if r0 != null goto label0;

        $r1 = null;
        goto label1;

     label0:
        $r1 = virtualinvoke r0.<java.lang.ProcessEnvironment$Value: java.lang.String toString()>();

     label1:
        return $r1;
    }

    public void <init>(java.util.Map)
    {
        java.lang.ProcessEnvironment$StringEnvironment r0;
        java.util.Map r1;

        r0 := @this: java.lang.ProcessEnvironment$StringEnvironment;
        r1 := @parameter0: java.util.Map;
        specialinvoke r0.<java.util.AbstractMap: void <init>()>();
        r0.<java.lang.ProcessEnvironment$StringEnvironment: java.util.Map m> = r1;
        return;
    }

    public int size()
    {
        java.lang.ProcessEnvironment$StringEnvironment r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: java.lang.ProcessEnvironment$StringEnvironment;
        $r1 = r0.<java.lang.ProcessEnvironment$StringEnvironment: java.util.Map m>;
        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();
        return $i0;
    }

    public boolean isEmpty()
    {
        java.lang.ProcessEnvironment$StringEnvironment r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: java.lang.ProcessEnvironment$StringEnvironment;
        $r1 = r0.<java.lang.ProcessEnvironment$StringEnvironment: java.util.Map m>;
        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();
        return $z0;
    }

    public void clear()
    {
        java.lang.ProcessEnvironment$StringEnvironment r0;
        java.util.Map $r1;

        r0 := @this: java.lang.ProcessEnvironment$StringEnvironment;
        $r1 = r0.<java.lang.ProcessEnvironment$StringEnvironment: java.util.Map m>;
        interfaceinvoke $r1.<java.util.Map: void clear()>();
        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.lang.ProcessEnvironment$StringEnvironment r0;
        java.lang.Object r1;
        java.util.Map $r2;
        java.lang.ProcessEnvironment$Variable $r3;
        boolean $z0;

        r0 := @this: java.lang.ProcessEnvironment$StringEnvironment;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.lang.ProcessEnvironment$StringEnvironment: java.util.Map m>;
        $r3 = staticinvoke <java.lang.ProcessEnvironment$Variable: java.lang.ProcessEnvironment$Variable valueOfQueryOnly(java.lang.Object)>(r1);
        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);
        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.lang.ProcessEnvironment$StringEnvironment r0;
        java.lang.Object r1;
        java.util.Map $r2;
        java.lang.ProcessEnvironment$Value $r3;
        boolean $z0;

        r0 := @this: java.lang.ProcessEnvironment$StringEnvironment;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.lang.ProcessEnvironment$StringEnvironment: java.util.Map m>;
        $r3 = staticinvoke <java.lang.ProcessEnvironment$Value: java.lang.ProcessEnvironment$Value valueOfQueryOnly(java.lang.Object)>(r1);
        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>($r3);
        return $z0;
    }

    public java.lang.String get(java.lang.Object)
    {
        java.lang.ProcessEnvironment$StringEnvironment r0;
        java.lang.Object r1, $r4;
        java.util.Map $r2;
        java.lang.ProcessEnvironment$Variable $r3;
        java.lang.ProcessEnvironment$Value $r5;
        java.lang.String $r6;

        r0 := @this: java.lang.ProcessEnvironment$StringEnvironment;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.lang.ProcessEnvironment$StringEnvironment: java.util.Map m>;
        $r3 = staticinvoke <java.lang.ProcessEnvironment$Variable: java.lang.ProcessEnvironment$Variable valueOfQueryOnly(java.lang.Object)>(r1);
        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);
        $r5 = (java.lang.ProcessEnvironment$Value) $r4;
        $r6 = staticinvoke <java.lang.ProcessEnvironment$StringEnvironment: java.lang.String toString(java.lang.ProcessEnvironment$Value)>($r5);
        return $r6;
    }

    public java.lang.String put(java.lang.String, java.lang.String)
    {
        java.lang.ProcessEnvironment$StringEnvironment r0;
        java.lang.String r1, r2, $r8;
        java.util.Map $r3;
        java.lang.ProcessEnvironment$Variable $r4;
        java.lang.ProcessEnvironment$Value $r5, $r7;
        java.lang.Object $r6;

        r0 := @this: java.lang.ProcessEnvironment$StringEnvironment;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        $r3 = r0.<java.lang.ProcessEnvironment$StringEnvironment: java.util.Map m>;
        $r4 = staticinvoke <java.lang.ProcessEnvironment$Variable: java.lang.ProcessEnvironment$Variable valueOf(java.lang.String)>(r1);
        $r5 = staticinvoke <java.lang.ProcessEnvironment$Value: java.lang.ProcessEnvironment$Value valueOf(java.lang.String)>(r2);
        $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);
        $r7 = (java.lang.ProcessEnvironment$Value) $r6;
        $r8 = staticinvoke <java.lang.ProcessEnvironment$StringEnvironment: java.lang.String toString(java.lang.ProcessEnvironment$Value)>($r7);
        return $r8;
    }

    public java.lang.String remove(java.lang.Object)
    {
        java.lang.ProcessEnvironment$StringEnvironment r0;
        java.lang.Object r1, $r4;
        java.util.Map $r2;
        java.lang.ProcessEnvironment$Variable $r3;
        java.lang.ProcessEnvironment$Value $r5;
        java.lang.String $r6;

        r0 := @this: java.lang.ProcessEnvironment$StringEnvironment;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.lang.ProcessEnvironment$StringEnvironment: java.util.Map m>;
        $r3 = staticinvoke <java.lang.ProcessEnvironment$Variable: java.lang.ProcessEnvironment$Variable valueOfQueryOnly(java.lang.Object)>(r1);
        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);
        $r5 = (java.lang.ProcessEnvironment$Value) $r4;
        $r6 = staticinvoke <java.lang.ProcessEnvironment$StringEnvironment: java.lang.String toString(java.lang.ProcessEnvironment$Value)>($r5);
        return $r6;
    }

    public java.util.Set keySet()
    {
        java.lang.ProcessEnvironment$StringEnvironment r0;
        java.lang.ProcessEnvironment$StringKeySet $r1;
        java.util.Map $r2;
        java.util.Set $r3;

        r0 := @this: java.lang.ProcessEnvironment$StringEnvironment;
        $r1 = new java.lang.ProcessEnvironment$StringKeySet;
        $r2 = r0.<java.lang.ProcessEnvironment$StringEnvironment: java.util.Map m>;
        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();
        specialinvoke $r1.<java.lang.ProcessEnvironment$StringKeySet: void <init>(java.util.Set)>($r3);
        return $r1;
    }

    public java.util.Set entrySet()
    {
        java.lang.ProcessEnvironment$StringEnvironment r0;
        java.lang.ProcessEnvironment$StringEntrySet $r1;
        java.util.Map $r2;
        java.util.Set $r3;

        r0 := @this: java.lang.ProcessEnvironment$StringEnvironment;
        $r1 = new java.lang.ProcessEnvironment$StringEntrySet;
        $r2 = r0.<java.lang.ProcessEnvironment$StringEnvironment: java.util.Map m>;
        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();
        specialinvoke $r1.<java.lang.ProcessEnvironment$StringEntrySet: void <init>(java.util.Set)>($r3);
        return $r1;
    }

    public java.util.Collection values()
    {
        java.lang.ProcessEnvironment$StringEnvironment r0;
        java.lang.ProcessEnvironment$StringValues $r1;
        java.util.Map $r2;
        java.util.Collection $r3;

        r0 := @this: java.lang.ProcessEnvironment$StringEnvironment;
        $r1 = new java.lang.ProcessEnvironment$StringValues;
        $r2 = r0.<java.lang.ProcessEnvironment$StringEnvironment: java.util.Map m>;
        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();
        specialinvoke $r1.<java.lang.ProcessEnvironment$StringValues: void <init>(java.util.Collection)>($r3);
        return $r1;
    }

    public byte[] toEnvironmentBlock(int[])
    {
        java.lang.ProcessEnvironment$StringEnvironment r0;
        int[] r1;
        int i0, $i1, $i2, i3, $i4, i5, $i6, $i7, i8, i9, $i10, $i11, $i12, $i13;
        java.util.Iterator r2, r4;
        java.util.Map$Entry r3, r5;
        byte[] r6, r7, $r14, $r17, r18;
        java.util.Map $r8, $r9, $r19, $r26;
        java.util.Set $r10, $r20;
        boolean $z0, $z1;
        java.lang.Object $r11, $r12, $r15, $r21, $r22, $r24;
        java.lang.ProcessEnvironment$Variable $r13, $r23;
        java.lang.ProcessEnvironment$Value $r16, $r25;

        r0 := @this: java.lang.ProcessEnvironment$StringEnvironment;
        r1 := @parameter0: int[];
        $r8 = r0.<java.lang.ProcessEnvironment$StringEnvironment: java.util.Map m>;
        $i1 = interfaceinvoke $r8.<java.util.Map: int size()>();
        i0 = $i1 * 2;
        $r9 = r0.<java.lang.ProcessEnvironment$StringEnvironment: java.util.Map m>;
        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>();
        r2 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.Map$Entry) $r11;
        $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r13 = (java.lang.ProcessEnvironment$Variable) $r12;
        $r14 = virtualinvoke $r13.<java.lang.ProcessEnvironment$Variable: byte[] getBytes()>();
        $i2 = lengthof $r14;
        i3 = i0 + $i2;
        $r15 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();
        $r16 = (java.lang.ProcessEnvironment$Value) $r15;
        $r17 = virtualinvoke $r16.<java.lang.ProcessEnvironment$Value: byte[] getBytes()>();
        $i4 = lengthof $r17;
        i0 = i3 + $i4;
        goto label0;

     label1:
        r18 = newarray (byte)[i0];
        i5 = 0;
        $r19 = r0.<java.lang.ProcessEnvironment$StringEnvironment: java.util.Map m>;
        $r20 = interfaceinvoke $r19.<java.util.Map: java.util.Set entrySet()>();
        r4 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label3;

        $r21 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.util.Map$Entry) $r21;
        $r22 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r23 = (java.lang.ProcessEnvironment$Variable) $r22;
        r6 = virtualinvoke $r23.<java.lang.ProcessEnvironment$Variable: byte[] getBytes()>();
        $r24 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();
        $r25 = (java.lang.ProcessEnvironment$Value) $r24;
        r7 = virtualinvoke $r25.<java.lang.ProcessEnvironment$Value: byte[] getBytes()>();
        $i6 = lengthof r6;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r18, i5, $i6);
        $i7 = lengthof r6;
        i8 = i5 + $i7;
        i9 = i8 + 1;
        r18[i8] = 61;
        $i10 = lengthof r7;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r18, i9, $i10);
        $i11 = lengthof r7;
        $i12 = $i11 + 1;
        i5 = i9 + $i12;
        goto label2;

     label3:
        $r26 = r0.<java.lang.ProcessEnvironment$StringEnvironment: java.util.Map m>;
        $i13 = interfaceinvoke $r26.<java.util.Map: int size()>();
        r1[0] = $i13;
        return r18;
    }

    public volatile java.lang.Object remove(java.lang.Object)
    {
        java.lang.ProcessEnvironment$StringEnvironment r0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: java.lang.ProcessEnvironment$StringEnvironment;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.lang.ProcessEnvironment$StringEnvironment: java.lang.String remove(java.lang.Object)>(r1);
        return $r2;
    }

    public volatile java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.ProcessEnvironment$StringEnvironment r0;
        java.lang.Object r1, r2;
        java.lang.String $r3, $r4, $r5;

        r0 := @this: java.lang.ProcessEnvironment$StringEnvironment;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r3 = (java.lang.String) r1;
        $r4 = (java.lang.String) r2;
        $r5 = virtualinvoke r0.<java.lang.ProcessEnvironment$StringEnvironment: java.lang.String put(java.lang.String,java.lang.String)>($r3, $r4);
        return $r5;
    }

    public volatile java.lang.Object get(java.lang.Object)
    {
        java.lang.ProcessEnvironment$StringEnvironment r0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: java.lang.ProcessEnvironment$StringEnvironment;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.lang.ProcessEnvironment$StringEnvironment: java.lang.String get(java.lang.Object)>(r1);
        return $r2;
    }
}
