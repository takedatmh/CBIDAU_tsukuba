public final class sun.misc.Unsafe extends java.lang.Object
{
    private static final sun.misc.Unsafe theUnsafe;
    public static final int INVALID_FIELD_OFFSET;
    public static final int ARRAY_BOOLEAN_BASE_OFFSET;
    public static final int ARRAY_BYTE_BASE_OFFSET;
    public static final int ARRAY_SHORT_BASE_OFFSET;
    public static final int ARRAY_CHAR_BASE_OFFSET;
    public static final int ARRAY_INT_BASE_OFFSET;
    public static final int ARRAY_LONG_BASE_OFFSET;
    public static final int ARRAY_FLOAT_BASE_OFFSET;
    public static final int ARRAY_DOUBLE_BASE_OFFSET;
    public static final int ARRAY_OBJECT_BASE_OFFSET;
    public static final int ARRAY_BOOLEAN_INDEX_SCALE;
    public static final int ARRAY_BYTE_INDEX_SCALE;
    public static final int ARRAY_SHORT_INDEX_SCALE;
    public static final int ARRAY_CHAR_INDEX_SCALE;
    public static final int ARRAY_INT_INDEX_SCALE;
    public static final int ARRAY_LONG_INDEX_SCALE;
    public static final int ARRAY_FLOAT_INDEX_SCALE;
    public static final int ARRAY_DOUBLE_INDEX_SCALE;
    public static final int ARRAY_OBJECT_INDEX_SCALE;
    public static final int ADDRESS_SIZE;

    private static native void registerNatives();

    private void <init>()
    {
        sun.misc.Unsafe r0;

        r0 := @this: sun.misc.Unsafe;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static sun.misc.Unsafe getUnsafe()
    {
        java.lang.Class r0;
        java.lang.ClassLoader $r1;
        java.lang.SecurityException $r2;
        sun.misc.Unsafe $r3;

        r0 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        if $r1 == null goto label0;

        $r2 = new java.lang.SecurityException;
        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Unsafe");
        throw $r2;

     label0:
        $r3 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        return $r3;
    }

    public native int getInt(java.lang.Object, long);

    public native void putInt(java.lang.Object, long, int);

    public native java.lang.Object getObject(java.lang.Object, long);

    public native void putObject(java.lang.Object, long, java.lang.Object);

    public native boolean getBoolean(java.lang.Object, long);

    public native void putBoolean(java.lang.Object, long, boolean);

    public native byte getByte(java.lang.Object, long);

    public native void putByte(java.lang.Object, long, byte);

    public native short getShort(java.lang.Object, long);

    public native void putShort(java.lang.Object, long, short);

    public native char getChar(java.lang.Object, long);

    public native void putChar(java.lang.Object, long, char);

    public native long getLong(java.lang.Object, long);

    public native void putLong(java.lang.Object, long, long);

    public native float getFloat(java.lang.Object, long);

    public native void putFloat(java.lang.Object, long, float);

    public native double getDouble(java.lang.Object, long);

    public native void putDouble(java.lang.Object, long, double);

    public int getInt(java.lang.Object, int)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1;
        int i0, $i2;
        long $l1;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        $l1 = (long) i0;
        $i2 = virtualinvoke r0.<sun.misc.Unsafe: int getInt(java.lang.Object,long)>(r1, $l1);
        return $i2;
    }

    public void putInt(java.lang.Object, int, int)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1;
        int i0, i1;
        long $l2;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $l2 = (long) i0;
        virtualinvoke r0.<sun.misc.Unsafe: void putInt(java.lang.Object,long,int)>(r1, $l2, i1);
        return;
    }

    public java.lang.Object getObject(java.lang.Object, int)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1, $r2;
        int i0;
        long $l1;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        $l1 = (long) i0;
        $r2 = virtualinvoke r0.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>(r1, $l1);
        return $r2;
    }

    public void putObject(java.lang.Object, int, java.lang.Object)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1, r2;
        int i0;
        long $l1;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.Object;
        $l1 = (long) i0;
        virtualinvoke r0.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r1, $l1, r2);
        return;
    }

    public boolean getBoolean(java.lang.Object, int)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        $l1 = (long) i0;
        $z0 = virtualinvoke r0.<sun.misc.Unsafe: boolean getBoolean(java.lang.Object,long)>(r1, $l1);
        return $z0;
    }

    public void putBoolean(java.lang.Object, int, boolean)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1;
        int i0;
        boolean z0;
        long $l1;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        z0 := @parameter2: boolean;
        $l1 = (long) i0;
        virtualinvoke r0.<sun.misc.Unsafe: void putBoolean(java.lang.Object,long,boolean)>(r1, $l1, z0);
        return;
    }

    public byte getByte(java.lang.Object, int)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1;
        int i0;
        long $l1;
        byte $b2;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        $l1 = (long) i0;
        $b2 = virtualinvoke r0.<sun.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, $l1);
        return $b2;
    }

    public void putByte(java.lang.Object, int, byte)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1;
        int i0;
        byte b1;
        long $l2;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        b1 := @parameter2: byte;
        $l2 = (long) i0;
        virtualinvoke r0.<sun.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(r1, $l2, b1);
        return;
    }

    public short getShort(java.lang.Object, int)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1;
        int i0;
        long $l1;
        short $s2;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        $l1 = (long) i0;
        $s2 = virtualinvoke r0.<sun.misc.Unsafe: short getShort(java.lang.Object,long)>(r1, $l1);
        return $s2;
    }

    public void putShort(java.lang.Object, int, short)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1;
        int i0;
        short s1;
        long $l2;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        s1 := @parameter2: short;
        $l2 = (long) i0;
        virtualinvoke r0.<sun.misc.Unsafe: void putShort(java.lang.Object,long,short)>(r1, $l2, s1);
        return;
    }

    public char getChar(java.lang.Object, int)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1;
        int i0;
        long $l1;
        char $c2;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        $l1 = (long) i0;
        $c2 = virtualinvoke r0.<sun.misc.Unsafe: char getChar(java.lang.Object,long)>(r1, $l1);
        return $c2;
    }

    public void putChar(java.lang.Object, int, char)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1;
        int i0;
        char c1;
        long $l2;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        c1 := @parameter2: char;
        $l2 = (long) i0;
        virtualinvoke r0.<sun.misc.Unsafe: void putChar(java.lang.Object,long,char)>(r1, $l2, c1);
        return;
    }

    public long getLong(java.lang.Object, int)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1;
        int i0;
        long $l1, $l2;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        $l1 = (long) i0;
        $l2 = virtualinvoke r0.<sun.misc.Unsafe: long getLong(java.lang.Object,long)>(r1, $l1);
        return $l2;
    }

    public void putLong(java.lang.Object, int, long)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1;
        int i0;
        long l1, $l2;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        l1 := @parameter2: long;
        $l2 = (long) i0;
        virtualinvoke r0.<sun.misc.Unsafe: void putLong(java.lang.Object,long,long)>(r1, $l2, l1);
        return;
    }

    public float getFloat(java.lang.Object, int)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1;
        int i0;
        long $l1;
        float $f0;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        $l1 = (long) i0;
        $f0 = virtualinvoke r0.<sun.misc.Unsafe: float getFloat(java.lang.Object,long)>(r1, $l1);
        return $f0;
    }

    public void putFloat(java.lang.Object, int, float)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1;
        int i0;
        float f0;
        long $l1;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        f0 := @parameter2: float;
        $l1 = (long) i0;
        virtualinvoke r0.<sun.misc.Unsafe: void putFloat(java.lang.Object,long,float)>(r1, $l1, f0);
        return;
    }

    public double getDouble(java.lang.Object, int)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1;
        int i0;
        long $l1;
        double $d0;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        $l1 = (long) i0;
        $d0 = virtualinvoke r0.<sun.misc.Unsafe: double getDouble(java.lang.Object,long)>(r1, $l1);
        return $d0;
    }

    public void putDouble(java.lang.Object, int, double)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1;
        int i0;
        double d0;
        long $l1;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        d0 := @parameter2: double;
        $l1 = (long) i0;
        virtualinvoke r0.<sun.misc.Unsafe: void putDouble(java.lang.Object,long,double)>(r1, $l1, d0);
        return;
    }

    public native byte getByte(long);

    public native void putByte(long, byte);

    public native short getShort(long);

    public native void putShort(long, short);

    public native char getChar(long);

    public native void putChar(long, char);

    public native int getInt(long);

    public native void putInt(long, int);

    public native long getLong(long);

    public native void putLong(long, long);

    public native float getFloat(long);

    public native void putFloat(long, float);

    public native double getDouble(long);

    public native void putDouble(long, double);

    public native long getAddress(long);

    public native void putAddress(long, long);

    public native long allocateMemory(long);

    public native long reallocateMemory(long, long);

    public native void setMemory(java.lang.Object, long, long, byte);

    public void setMemory(long, long, byte)
    {
        sun.misc.Unsafe r0;
        long l0, l1;
        byte b2;

        r0 := @this: sun.misc.Unsafe;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        b2 := @parameter2: byte;
        virtualinvoke r0.<sun.misc.Unsafe: void setMemory(java.lang.Object,long,long,byte)>(null, l0, l1, b2);
        return;
    }

    public native void copyMemory(java.lang.Object, long, java.lang.Object, long, long);

    public void copyMemory(long, long, long)
    {
        sun.misc.Unsafe r0;
        long l0, l1, l2;

        r0 := @this: sun.misc.Unsafe;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        l2 := @parameter2: long;
        virtualinvoke r0.<sun.misc.Unsafe: void copyMemory(java.lang.Object,long,java.lang.Object,long,long)>(null, l0, null, l1, l2);
        return;
    }

    public native void freeMemory(long);

    public int fieldOffset(java.lang.reflect.Field)
    {
        sun.misc.Unsafe r0;
        java.lang.reflect.Field r1;
        int $i0, $i2, $i4;
        boolean $z0;
        long $l1, $l3;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.reflect.Field;
        $i0 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>();
        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);
        if $z0 == 0 goto label0;

        $l1 = virtualinvoke r0.<sun.misc.Unsafe: long staticFieldOffset(java.lang.reflect.Field)>(r1);
        $i2 = (int) $l1;
        return $i2;

     label0:
        $l3 = virtualinvoke r0.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>(r1);
        $i4 = (int) $l3;
        return $i4;
    }

    public java.lang.Object staticFieldBase(java.lang.Class)
    {
        sun.misc.Unsafe r0;
        java.lang.Class r1;
        java.lang.reflect.Field[] r2;
        int i0, $i1, $i2;
        java.lang.reflect.Field $r3, $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: sun.misc.Unsafe;
        r1 := @parameter0: java.lang.Class;
        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();
        i0 = 0;

     label0:
        $i1 = lengthof r2;
        if i0 >= $i1 goto label2;

        $r3 = r2[i0];
        $i2 = virtualinvoke $r3.<java.lang.reflect.Field: int getModifiers()>();
        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);
        if $z0 == 0 goto label1;

        $r4 = r2[i0];
        $r5 = virtualinvoke r0.<sun.misc.Unsafe: java.lang.Object staticFieldBase(java.lang.reflect.Field)>($r4);
        return $r5;

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        return null;
    }

    public native long staticFieldOffset(java.lang.reflect.Field);

    public native long objectFieldOffset(java.lang.reflect.Field);

    public native java.lang.Object staticFieldBase(java.lang.reflect.Field);

    public native boolean shouldBeInitialized(java.lang.Class);

    public native void ensureClassInitialized(java.lang.Class);

    public native int arrayBaseOffset(java.lang.Class);

    public native int arrayIndexScale(java.lang.Class);

    public native int addressSize();

    public native int pageSize();

    public native java.lang.Class defineClass(java.lang.String, byte[], int, int, java.lang.ClassLoader, java.security.ProtectionDomain);

    public native java.lang.Class defineClass(java.lang.String, byte[], int, int);

    public native java.lang.Class defineAnonymousClass(java.lang.Class, byte[], java.lang.Object[]);

    public native java.lang.Object allocateInstance(java.lang.Class) throws java.lang.InstantiationException;

    public native void monitorEnter(java.lang.Object);

    public native void monitorExit(java.lang.Object);

    public native boolean tryMonitorEnter(java.lang.Object);

    public native void throwException(java.lang.Throwable);

    public final native boolean compareAndSwapObject(java.lang.Object, long, java.lang.Object, java.lang.Object);

    public final native boolean compareAndSwapInt(java.lang.Object, long, int, int);

    public final native boolean compareAndSwapLong(java.lang.Object, long, long, long);

    public native java.lang.Object getObjectVolatile(java.lang.Object, long);

    public native void putObjectVolatile(java.lang.Object, long, java.lang.Object);

    public native int getIntVolatile(java.lang.Object, long);

    public native void putIntVolatile(java.lang.Object, long, int);

    public native boolean getBooleanVolatile(java.lang.Object, long);

    public native void putBooleanVolatile(java.lang.Object, long, boolean);

    public native byte getByteVolatile(java.lang.Object, long);

    public native void putByteVolatile(java.lang.Object, long, byte);

    public native short getShortVolatile(java.lang.Object, long);

    public native void putShortVolatile(java.lang.Object, long, short);

    public native char getCharVolatile(java.lang.Object, long);

    public native void putCharVolatile(java.lang.Object, long, char);

    public native long getLongVolatile(java.lang.Object, long);

    public native void putLongVolatile(java.lang.Object, long, long);

    public native float getFloatVolatile(java.lang.Object, long);

    public native void putFloatVolatile(java.lang.Object, long, float);

    public native double getDoubleVolatile(java.lang.Object, long);

    public native void putDoubleVolatile(java.lang.Object, long, double);

    public native void putOrderedObject(java.lang.Object, long, java.lang.Object);

    public native void putOrderedInt(java.lang.Object, long, int);

    public native void putOrderedLong(java.lang.Object, long, long);

    public native void unpark(java.lang.Object);

    public native void park(boolean, long);

    public native int getLoadAverage(double[], int);

    static void <clinit>()
    {
        java.lang.String[] $r0;
        sun.misc.Unsafe $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;

        staticinvoke <sun.misc.Unsafe: void registerNatives()>();
        $r0 = newarray (java.lang.String)[1];
        $r0[0] = "getUnsafe";
        staticinvoke <sun.reflect.Reflection: void registerMethodsToFilter(java.lang.Class,java.lang.String[])>(class "sun/misc/Unsafe", $r0);
        $r1 = new sun.misc.Unsafe;
        specialinvoke $r1.<sun.misc.Unsafe: void <init>()>();
        <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe> = $r1;
        $r2 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i0 = virtualinvoke $r2.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[Z");
        <sun.misc.Unsafe: int ARRAY_BOOLEAN_BASE_OFFSET> = $i0;
        $r3 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i1 = virtualinvoke $r3.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[B");
        <sun.misc.Unsafe: int ARRAY_BYTE_BASE_OFFSET> = $i1;
        $r4 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i2 = virtualinvoke $r4.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[S");
        <sun.misc.Unsafe: int ARRAY_SHORT_BASE_OFFSET> = $i2;
        $r5 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i3 = virtualinvoke $r5.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[C");
        <sun.misc.Unsafe: int ARRAY_CHAR_BASE_OFFSET> = $i3;
        $r6 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i4 = virtualinvoke $r6.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[I");
        <sun.misc.Unsafe: int ARRAY_INT_BASE_OFFSET> = $i4;
        $r7 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i5 = virtualinvoke $r7.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[J");
        <sun.misc.Unsafe: int ARRAY_LONG_BASE_OFFSET> = $i5;
        $r8 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i6 = virtualinvoke $r8.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[F");
        <sun.misc.Unsafe: int ARRAY_FLOAT_BASE_OFFSET> = $i6;
        $r9 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i7 = virtualinvoke $r9.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[D");
        <sun.misc.Unsafe: int ARRAY_DOUBLE_BASE_OFFSET> = $i7;
        $r10 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i8 = virtualinvoke $r10.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[Ljava/lang/Object;");
        <sun.misc.Unsafe: int ARRAY_OBJECT_BASE_OFFSET> = $i8;
        $r11 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i9 = virtualinvoke $r11.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[Z");
        <sun.misc.Unsafe: int ARRAY_BOOLEAN_INDEX_SCALE> = $i9;
        $r12 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i10 = virtualinvoke $r12.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[B");
        <sun.misc.Unsafe: int ARRAY_BYTE_INDEX_SCALE> = $i10;
        $r13 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i11 = virtualinvoke $r13.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[S");
        <sun.misc.Unsafe: int ARRAY_SHORT_INDEX_SCALE> = $i11;
        $r14 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i12 = virtualinvoke $r14.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[C");
        <sun.misc.Unsafe: int ARRAY_CHAR_INDEX_SCALE> = $i12;
        $r15 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i13 = virtualinvoke $r15.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[I");
        <sun.misc.Unsafe: int ARRAY_INT_INDEX_SCALE> = $i13;
        $r16 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i14 = virtualinvoke $r16.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[J");
        <sun.misc.Unsafe: int ARRAY_LONG_INDEX_SCALE> = $i14;
        $r17 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i15 = virtualinvoke $r17.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[F");
        <sun.misc.Unsafe: int ARRAY_FLOAT_INDEX_SCALE> = $i15;
        $r18 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i16 = virtualinvoke $r18.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[D");
        <sun.misc.Unsafe: int ARRAY_DOUBLE_INDEX_SCALE> = $i16;
        $r19 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i17 = virtualinvoke $r19.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[Ljava/lang/Object;");
        <sun.misc.Unsafe: int ARRAY_OBJECT_INDEX_SCALE> = $i17;
        $r20 = <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe>;
        $i18 = virtualinvoke $r20.<sun.misc.Unsafe: int addressSize()>();
        <sun.misc.Unsafe: int ADDRESS_SIZE> = $i18;
        return;
    }
}
