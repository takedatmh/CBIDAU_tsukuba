public abstract class sun.util.calendar.AbstractCalendar extends sun.util.calendar.CalendarSystem
{
    static final int SECOND_IN_MILLIS;
    static final int MINUTE_IN_MILLIS;
    static final int HOUR_IN_MILLIS;
    static final int DAY_IN_MILLIS;
    static final int EPOCH_OFFSET;
    private sun.util.calendar.Era[] eras;

    protected void <init>()
    {
        sun.util.calendar.AbstractCalendar r0;

        r0 := @this: sun.util.calendar.AbstractCalendar;
        specialinvoke r0.<sun.util.calendar.CalendarSystem: void <init>()>();
        return;
    }

    public sun.util.calendar.Era getEra(java.lang.String)
    {
        sun.util.calendar.AbstractCalendar r0;
        java.lang.String r1;
        int i0, $i1;
        sun.util.calendar.Era[] $r2, $r3, $r4, $r6;
        sun.util.calendar.Era $r5, $r7;
        boolean $z0;

        r0 := @this: sun.util.calendar.AbstractCalendar;
        r1 := @parameter0: java.lang.String;
        $r2 = r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.Era[] eras>;
        if $r2 == null goto label2;

        i0 = 0;

     label0:
        $r3 = r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.Era[] eras>;
        $i1 = lengthof $r3;
        if i0 >= $i1 goto label2;

        $r4 = r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.Era[] eras>;
        $r5 = $r4[i0];
        $z0 = virtualinvoke $r5.<sun.util.calendar.Era: boolean equals(java.lang.Object)>(r1);
        if $z0 == 0 goto label1;

        $r6 = r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.Era[] eras>;
        $r7 = $r6[i0];
        return $r7;

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        return null;
    }

    public sun.util.calendar.Era[] getEras()
    {
        sun.util.calendar.AbstractCalendar r0;
        sun.util.calendar.Era[] r1, $r2, $r3, $r4, $r5;
        int $i0, $i1;

        r0 := @this: sun.util.calendar.AbstractCalendar;
        r1 = null;
        $r2 = r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.Era[] eras>;
        if $r2 == null goto label0;

        $r3 = r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.Era[] eras>;
        $i0 = lengthof $r3;
        r1 = newarray (sun.util.calendar.Era)[$i0];
        $r4 = r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.Era[] eras>;
        $r5 = r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.Era[] eras>;
        $i1 = lengthof $r5;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i1);

     label0:
        return r1;
    }

    public void setEra(sun.util.calendar.CalendarDate, java.lang.String)
    {
        sun.util.calendar.AbstractCalendar r0;
        sun.util.calendar.CalendarDate r1;
        java.lang.String r2, $r8, $r13;
        int i0, $i1;
        sun.util.calendar.Era r3;
        java.lang.StringBuilder $r4, $r11, $r12;
        sun.util.calendar.Era[] $r5, $r6, $r7;
        boolean $z0;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: sun.util.calendar.AbstractCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        r2 := @parameter1: java.lang.String;
        $r5 = r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.Era[] eras>;
        if $r5 != null goto label0;

        return;

     label0:
        i0 = 0;

     label1:
        $r6 = r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.Era[] eras>;
        $i1 = lengthof $r6;
        if i0 >= $i1 goto label3;

        $r7 = r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.Era[] eras>;
        r3 = $r7[i0];
        if r3 == null goto label2;

        $r8 = virtualinvoke r3.<sun.util.calendar.Era: java.lang.String getName()>();
        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r2);
        if $z0 == 0 goto label2;

        virtualinvoke r1.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setEra(sun.util.calendar.Era)>(r3);
        return;

     label2:
        i0 = i0 + 1;
        goto label1;

     label3:
        $r10 = new java.lang.IllegalArgumentException;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown era name: ");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);
        throw $r10;
    }

    protected void setEras(sun.util.calendar.Era[])
    {
        sun.util.calendar.AbstractCalendar r0;
        sun.util.calendar.Era[] r1;

        r0 := @this: sun.util.calendar.AbstractCalendar;
        r1 := @parameter0: sun.util.calendar.Era[];
        r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.Era[] eras> = r1;
        return;
    }

    public sun.util.calendar.CalendarDate getCalendarDate()
    {
        sun.util.calendar.AbstractCalendar r0;
        long $l0;
        sun.util.calendar.CalendarDate $r1, $r2;

        r0 := @this: sun.util.calendar.AbstractCalendar;
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $r1 = virtualinvoke r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate newCalendarDate()>();
        $r2 = virtualinvoke r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate getCalendarDate(long,sun.util.calendar.CalendarDate)>($l0, $r1);
        return $r2;
    }

    public sun.util.calendar.CalendarDate getCalendarDate(long)
    {
        sun.util.calendar.AbstractCalendar r0;
        long l0;
        sun.util.calendar.CalendarDate $r1, $r2;

        r0 := @this: sun.util.calendar.AbstractCalendar;
        l0 := @parameter0: long;
        $r1 = virtualinvoke r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate newCalendarDate()>();
        $r2 = virtualinvoke r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate getCalendarDate(long,sun.util.calendar.CalendarDate)>(l0, $r1);
        return $r2;
    }

    public sun.util.calendar.CalendarDate getCalendarDate(long, java.util.TimeZone)
    {
        sun.util.calendar.AbstractCalendar r0;
        long l0;
        java.util.TimeZone r1;
        sun.util.calendar.CalendarDate r2, $r3;

        r0 := @this: sun.util.calendar.AbstractCalendar;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.TimeZone;
        r2 = virtualinvoke r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate newCalendarDate(java.util.TimeZone)>(r1);
        $r3 = virtualinvoke r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate getCalendarDate(long,sun.util.calendar.CalendarDate)>(l0, r2);
        return $r3;
    }

    public sun.util.calendar.CalendarDate getCalendarDate(long, sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.AbstractCalendar r0;
        long l0, l4, $l9, l10, $l11, l14;
        sun.util.calendar.CalendarDate r1;
        int i1, i2, i3, $i5, $i6, $i7, $i8, $i12, i13;
        java.util.TimeZone r2;
        int[] r3;
        boolean $z0, $z1;
        sun.util.calendar.ZoneInfo $r4;

        r0 := @this: sun.util.calendar.AbstractCalendar;
        l0 := @parameter0: long;
        r1 := @parameter1: sun.util.calendar.CalendarDate;
        i1 = 0;
        i2 = 0;
        i3 = 0;
        l4 = 0L;
        r2 = virtualinvoke r1.<sun.util.calendar.CalendarDate: java.util.TimeZone getZone()>();
        if r2 == null goto label2;

        r3 = newarray (int)[2];
        $z0 = r2 instanceof sun.util.calendar.ZoneInfo;
        if $z0 == 0 goto label0;

        $r4 = (sun.util.calendar.ZoneInfo) r2;
        i2 = virtualinvoke $r4.<sun.util.calendar.ZoneInfo: int getOffsets(long,int[])>(l0, r3);
        goto label1;

     label0:
        i2 = virtualinvoke r2.<java.util.TimeZone: int getOffset(long)>(l0);
        $i5 = virtualinvoke r2.<java.util.TimeZone: int getRawOffset()>();
        r3[0] = $i5;
        $i6 = r3[0];
        $i7 = i2 - $i6;
        r3[1] = $i7;

     label1:
        $i8 = i2 / 86400000;
        l4 = (long) $i8;
        i1 = i2 % 86400000;
        i3 = r3[1];

     label2:
        virtualinvoke r1.<sun.util.calendar.CalendarDate: void setZoneOffset(int)>(i2);
        virtualinvoke r1.<sun.util.calendar.CalendarDate: void setDaylightSaving(int)>(i3);
        $l9 = l0 / 86400000L;
        l10 = l4 + $l9;
        $l11 = l0 % 86400000L;
        $i12 = (int) $l11;
        i13 = i1 + $i12;
        if i13 < 86400000 goto label3;

        i13 = i13 - 86400000;
        l10 = l10 + 1L;
        goto label4;

     label3:
        if i13 >= 0 goto label4;

        i13 = i13 + 86400000;
        l10 = l10 - 1L;
        goto label3;

     label4:
        l14 = l10 + 719163L;
        virtualinvoke r0.<sun.util.calendar.AbstractCalendar: void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate,long)>(r1, l14);
        virtualinvoke r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate setTimeOfDay(sun.util.calendar.CalendarDate,int)>(r1, i13);
        $z1 = virtualinvoke r0.<sun.util.calendar.AbstractCalendar: boolean isLeapYear(sun.util.calendar.CalendarDate)>(r1);
        virtualinvoke r1.<sun.util.calendar.CalendarDate: void setLeapYear(boolean)>($z1);
        virtualinvoke r1.<sun.util.calendar.CalendarDate: void setNormalized(boolean)>(1);
        return r1;
    }

    public long getTime(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.AbstractCalendar r0;
        sun.util.calendar.CalendarDate r1;
        long l0, l1, $l3, $l4, $l5, $l7, $l8, $l11, $l12, $l14, $l15, $l16, l17;
        int i2, $i6, $i10, $i13;
        java.util.TimeZone r2;
        int[] r3;
        boolean $z0, $z1, $z2, $z3;
        sun.util.calendar.ZoneInfo $r4, $r5;

        r0 := @this: sun.util.calendar.AbstractCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        l0 = virtualinvoke r0.<sun.util.calendar.AbstractCalendar: long getFixedDate(sun.util.calendar.CalendarDate)>(r1);
        $l3 = l0 - 719163L;
        $l4 = $l3 * 86400000L;
        $l5 = virtualinvoke r0.<sun.util.calendar.AbstractCalendar: long getTimeOfDay(sun.util.calendar.CalendarDate)>(r1);
        l1 = $l4 + $l5;
        i2 = 0;
        r2 = virtualinvoke r1.<sun.util.calendar.CalendarDate: java.util.TimeZone getZone()>();
        if r2 == null goto label4;

        $z0 = virtualinvoke r1.<sun.util.calendar.CalendarDate: boolean isNormalized()>();
        if $z0 == 0 goto label0;

        $i6 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getZoneOffset()>();
        $l7 = (long) $i6;
        $l8 = l1 - $l7;
        return $l8;

     label0:
        r3 = newarray (int)[2];
        $z1 = virtualinvoke r1.<sun.util.calendar.CalendarDate: boolean isStandardTime()>();
        if $z1 == 0 goto label2;

        $z2 = r2 instanceof sun.util.calendar.ZoneInfo;
        if $z2 == 0 goto label1;

        $r4 = (sun.util.calendar.ZoneInfo) r2;
        virtualinvoke $r4.<sun.util.calendar.ZoneInfo: int getOffsetsByStandard(long,int[])>(l1, r3);
        i2 = r3[0];
        goto label4;

     label1:
        $i10 = virtualinvoke r2.<java.util.TimeZone: int getRawOffset()>();
        $l11 = (long) $i10;
        $l12 = l1 - $l11;
        i2 = virtualinvoke r2.<java.util.TimeZone: int getOffset(long)>($l12);
        goto label4;

     label2:
        $z3 = r2 instanceof sun.util.calendar.ZoneInfo;
        if $z3 == 0 goto label3;

        $r5 = (sun.util.calendar.ZoneInfo) r2;
        i2 = virtualinvoke $r5.<sun.util.calendar.ZoneInfo: int getOffsetsByWall(long,int[])>(l1, r3);
        goto label4;

     label3:
        $i13 = virtualinvoke r2.<java.util.TimeZone: int getRawOffset()>();
        $l14 = (long) $i13;
        $l15 = l1 - $l14;
        i2 = virtualinvoke r2.<java.util.TimeZone: int getOffset(long)>($l15);

     label4:
        $l16 = (long) i2;
        l17 = l1 - $l16;
        virtualinvoke r0.<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate getCalendarDate(long,sun.util.calendar.CalendarDate)>(l17, r1);
        return l17;
    }

    protected long getTimeOfDay(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.AbstractCalendar r0;
        sun.util.calendar.CalendarDate r1;
        long l0, l2;
        byte $b1;

        r0 := @this: sun.util.calendar.AbstractCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        l0 = virtualinvoke r1.<sun.util.calendar.CalendarDate: long getTimeOfDay()>();
        $b1 = l0 cmp -9223372036854775808L;
        if $b1 == 0 goto label0;

        return l0;

     label0:
        l2 = virtualinvoke r0.<sun.util.calendar.AbstractCalendar: long getTimeOfDayValue(sun.util.calendar.CalendarDate)>(r1);
        virtualinvoke r1.<sun.util.calendar.CalendarDate: void setTimeOfDay(long)>(l2);
        return l2;
    }

    public long getTimeOfDayValue(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.AbstractCalendar r0;
        sun.util.calendar.CalendarDate r1;
        long l0, l2, $l4, l5, l6, $l8, l9, l10, $l12, l13;
        int $i1, $i3, $i7, $i11;

        r0 := @this: sun.util.calendar.AbstractCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        $i1 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getHours()>();
        l0 = (long) $i1;
        l2 = l0 * 60L;
        $i3 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getMinutes()>();
        $l4 = (long) $i3;
        l5 = l2 + $l4;
        l6 = l5 * 60L;
        $i7 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getSeconds()>();
        $l8 = (long) $i7;
        l9 = l6 + $l8;
        l10 = l9 * 1000L;
        $i11 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getMillis()>();
        $l12 = (long) $i11;
        l13 = l10 + $l12;
        return l13;
    }

    public sun.util.calendar.CalendarDate setTimeOfDay(sun.util.calendar.CalendarDate, int)
    {
        sun.util.calendar.AbstractCalendar r0;
        sun.util.calendar.CalendarDate r1;
        int i0, i1, i2, i3, i4, i5, i6, i7;
        boolean z0;
        java.lang.IllegalArgumentException $r2;
        long $l8;

        r0 := @this: sun.util.calendar.AbstractCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        i0 := @parameter1: int;
        if i0 >= 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r2;

     label0:
        z0 = virtualinvoke r1.<sun.util.calendar.CalendarDate: boolean isNormalized()>();
        i1 = i0;
        i2 = i1 / 3600000;
        i5 = i1 % 3600000;
        i3 = i5 / 60000;
        i6 = i5 % 60000;
        i4 = i6 / 1000;
        i7 = i6 % 1000;
        virtualinvoke r1.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setHours(int)>(i2);
        virtualinvoke r1.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMinutes(int)>(i3);
        virtualinvoke r1.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setSeconds(int)>(i4);
        virtualinvoke r1.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMillis(int)>(i7);
        $l8 = (long) i0;
        virtualinvoke r1.<sun.util.calendar.CalendarDate: void setTimeOfDay(long)>($l8);
        if i2 >= 24 goto label1;

        if z0 == 0 goto label1;

        virtualinvoke r1.<sun.util.calendar.CalendarDate: void setNormalized(boolean)>(z0);

     label1:
        return r1;
    }

    public int getWeekLength()
    {
        sun.util.calendar.AbstractCalendar r0;

        r0 := @this: sun.util.calendar.AbstractCalendar;
        return 7;
    }

    protected abstract boolean isLeapYear(sun.util.calendar.CalendarDate);

    public sun.util.calendar.CalendarDate getNthDayOfWeek(int, int, sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.AbstractCalendar r0;
        int i0, i1, $i4, $i7;
        sun.util.calendar.CalendarDate r1, r2;
        long l2, l3, $l5, $l6, $l8, $l9;
        java.lang.Object $r3;

        r0 := @this: sun.util.calendar.AbstractCalendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: sun.util.calendar.CalendarDate;
        $r3 = virtualinvoke r1.<sun.util.calendar.CalendarDate: java.lang.Object clone()>();
        r2 = (sun.util.calendar.CalendarDate) $r3;
        virtualinvoke r0.<sun.util.calendar.AbstractCalendar: boolean normalize(sun.util.calendar.CalendarDate)>(r2);
        l2 = virtualinvoke r0.<sun.util.calendar.AbstractCalendar: long getFixedDate(sun.util.calendar.CalendarDate)>(r2);
        if i0 <= 0 goto label0;

        $i4 = 7 * i0;
        $l5 = (long) $i4;
        $l6 = staticinvoke <sun.util.calendar.AbstractCalendar: long getDayOfWeekDateBefore(long,int)>(l2, i1);
        l3 = $l5 + $l6;
        goto label1;

     label0:
        $i7 = 7 * i0;
        $l8 = (long) $i7;
        $l9 = staticinvoke <sun.util.calendar.AbstractCalendar: long getDayOfWeekDateAfter(long,int)>(l2, i1);
        l3 = $l8 + $l9;

     label1:
        virtualinvoke r0.<sun.util.calendar.AbstractCalendar: void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate,long)>(r2, l3);
        return r2;
    }

    static long getDayOfWeekDateBefore(long, int)
    {
        long l0, $l2, $l3;
        int i1;

        l0 := @parameter0: long;
        i1 := @parameter1: int;
        $l2 = l0 - 1L;
        $l3 = staticinvoke <sun.util.calendar.AbstractCalendar: long getDayOfWeekDateOnOrBefore(long,int)>($l2, i1);
        return $l3;
    }

    static long getDayOfWeekDateAfter(long, int)
    {
        long l0, $l2, $l3;
        int i1;

        l0 := @parameter0: long;
        i1 := @parameter1: int;
        $l2 = l0 + 7L;
        $l3 = staticinvoke <sun.util.calendar.AbstractCalendar: long getDayOfWeekDateOnOrBefore(long,int)>($l2, i1);
        return $l3;
    }

    public static long getDayOfWeekDateOnOrBefore(long, int)
    {
        long l0, l2, $l4, $l6, $l7, $l8, $l9;
        int i1, $i3;
        byte $b5;

        l0 := @parameter0: long;
        i1 := @parameter1: int;
        $i3 = i1 - 1;
        $l4 = (long) $i3;
        l2 = l0 - $l4;
        $b5 = l2 cmp 0L;
        if $b5 < 0 goto label0;

        $l6 = l2 % 7L;
        $l7 = l0 - $l6;
        return $l7;

     label0:
        $l8 = staticinvoke <sun.util.calendar.CalendarUtils: long mod(long,long)>(l2, 7L);
        $l9 = l0 - $l8;
        return $l9;
    }

    protected abstract long getFixedDate(sun.util.calendar.CalendarDate);

    protected abstract void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate, long);

    public boolean validateTime(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.AbstractCalendar r0;
        sun.util.calendar.CalendarDate r1;
        int i0, i1, i2, i3;

        r0 := @this: sun.util.calendar.AbstractCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        i0 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getHours()>();
        if i0 < 0 goto label0;

        if i0 < 24 goto label1;

     label0:
        return 0;

     label1:
        i1 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getMinutes()>();
        if i1 < 0 goto label2;

        if i1 < 60 goto label3;

     label2:
        return 0;

     label3:
        i2 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getSeconds()>();
        if i2 < 0 goto label4;

        if i2 < 60 goto label5;

     label4:
        return 0;

     label5:
        i3 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getMillis()>();
        if i3 < 0 goto label6;

        if i3 < 1000 goto label7;

     label6:
        return 0;

     label7:
        return 1;
    }

    int normalizeTime(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.AbstractCalendar r0;
        sun.util.calendar.CalendarDate r1;
        long l0, l1, $l5, $l7, l9, $l10, l12, $l13, $l15;
        byte $b2, $b3, $b4, $b6;
        int $i8, $i11, $i14, $i16, $i17;

        r0 := @this: sun.util.calendar.AbstractCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        l0 = virtualinvoke r0.<sun.util.calendar.AbstractCalendar: long getTimeOfDay(sun.util.calendar.CalendarDate)>(r1);
        l1 = 0L;
        $b2 = l0 cmp 86400000L;
        if $b2 < 0 goto label0;

        l1 = l0 / 86400000L;
        l0 = l0 % 86400000L;
        goto label1;

     label0:
        $b3 = l0 cmp 0L;
        if $b3 >= 0 goto label1;

        l1 = staticinvoke <sun.util.calendar.CalendarUtils: long floorDivide(long,long)>(l0, 86400000L);
        $b4 = l1 cmp 0L;
        if $b4 == 0 goto label1;

        $l5 = 86400000L * l1;
        l0 = l0 - $l5;

     label1:
        $b6 = l1 cmp 0L;
        if $b6 == 0 goto label2;

        virtualinvoke r1.<sun.util.calendar.CalendarDate: void setTimeOfDay(long)>(l0);

     label2:
        $l7 = l0 % 1000L;
        $i8 = (int) $l7;
        virtualinvoke r1.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMillis(int)>($i8);
        l9 = l0 / 1000L;
        $l10 = l9 % 60L;
        $i11 = (int) $l10;
        virtualinvoke r1.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setSeconds(int)>($i11);
        l12 = l9 / 60L;
        $l13 = l12 % 60L;
        $i14 = (int) $l13;
        virtualinvoke r1.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMinutes(int)>($i14);
        $l15 = l12 / 60L;
        $i16 = (int) $l15;
        virtualinvoke r1.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setHours(int)>($i16);
        $i17 = (int) l1;
        return $i17;
    }
}
