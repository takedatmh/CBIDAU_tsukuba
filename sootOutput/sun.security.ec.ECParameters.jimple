public final class sun.security.ec.ECParameters extends java.security.AlgorithmParametersSpi
{
    private java.security.spec.ECParameterSpec paramSpec;

    public void <init>()
    {
        sun.security.ec.ECParameters r0;

        r0 := @this: sun.security.ec.ECParameters;
        specialinvoke r0.<java.security.AlgorithmParametersSpi: void <init>()>();
        return;
    }

    public static java.security.spec.ECPoint decodePoint(byte[], java.security.spec.EllipticCurve) throws java.io.IOException
    {
        byte[] r0, r2, r3;
        java.security.spec.EllipticCurve r1;
        int i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8;
        byte $b2;
        java.io.IOException $r4, $r6;
        java.security.spec.ECField $r5;
        java.security.spec.ECPoint $r7;
        java.math.BigInteger $r8, $r9;

        r0 := @parameter0: byte[];
        r1 := @parameter1: java.security.spec.EllipticCurve;
        $i1 = lengthof r0;
        if $i1 == 0 goto label0;

        $b2 = r0[0];
        if $b2 == 4 goto label1;

     label0:
        $r4 = new java.io.IOException;
        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Only uncompressed point format supported");
        throw $r4;

     label1:
        $r5 = virtualinvoke r1.<java.security.spec.EllipticCurve: java.security.spec.ECField getField()>();
        $i3 = interfaceinvoke $r5.<java.security.spec.ECField: int getFieldSize()>();
        $i4 = $i3 + 7;
        i0 = $i4 >> 3;
        $i5 = lengthof r0;
        $i6 = i0 * 2;
        $i7 = $i6 + 1;
        if $i5 == $i7 goto label2;

        $r6 = new java.io.IOException;
        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Point does not match field size");
        throw $r6;

     label2:
        r2 = newarray (byte)[i0];
        r3 = newarray (byte)[i0];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 1, r2, 0, i0);
        $i8 = i0 + 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i8, r3, 0, i0);
        $r7 = new java.security.spec.ECPoint;
        $r8 = new java.math.BigInteger;
        specialinvoke $r8.<java.math.BigInteger: void <init>(int,byte[])>(1, r2);
        $r9 = new java.math.BigInteger;
        specialinvoke $r9.<java.math.BigInteger: void <init>(int,byte[])>(1, r3);
        specialinvoke $r7.<java.security.spec.ECPoint: void <init>(java.math.BigInteger,java.math.BigInteger)>($r8, $r9);
        return $r7;
    }

    public static byte[] encodePoint(java.security.spec.ECPoint, java.security.spec.EllipticCurve)
    {
        java.security.spec.ECPoint r0;
        java.security.spec.EllipticCurve r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        byte[] r2, r3, r4, $r7, $r9;
        java.security.spec.ECField $r5;
        java.math.BigInteger $r6, $r8;
        java.lang.RuntimeException $r10;

        r0 := @parameter0: java.security.spec.ECPoint;
        r1 := @parameter1: java.security.spec.EllipticCurve;
        $r5 = virtualinvoke r1.<java.security.spec.EllipticCurve: java.security.spec.ECField getField()>();
        $i1 = interfaceinvoke $r5.<java.security.spec.ECField: int getFieldSize()>();
        $i2 = $i1 + 7;
        i0 = $i2 >> 3;
        $r6 = virtualinvoke r0.<java.security.spec.ECPoint: java.math.BigInteger getAffineX()>();
        $r7 = virtualinvoke $r6.<java.math.BigInteger: byte[] toByteArray()>();
        r2 = staticinvoke <sun.security.ec.ECParameters: byte[] trimZeroes(byte[])>($r7);
        $r8 = virtualinvoke r0.<java.security.spec.ECPoint: java.math.BigInteger getAffineY()>();
        $r9 = virtualinvoke $r8.<java.math.BigInteger: byte[] toByteArray()>();
        r3 = staticinvoke <sun.security.ec.ECParameters: byte[] trimZeroes(byte[])>($r9);
        $i3 = lengthof r2;
        if $i3 > i0 goto label0;

        $i4 = lengthof r3;
        if $i4 <= i0 goto label1;

     label0:
        $r10 = new java.lang.RuntimeException;
        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("Point coordinates do not match field size");
        throw $r10;

     label1:
        $i5 = i0 << 1;
        $i6 = 1 + $i5;
        r4 = newarray (byte)[$i6];
        r4[0] = 4;
        $i7 = lengthof r2;
        $i8 = i0 - $i7;
        $i9 = $i8 + 1;
        $i10 = lengthof r2;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r4, $i9, $i10);
        $i11 = lengthof r4;
        $i12 = lengthof r3;
        $i13 = $i11 - $i12;
        $i14 = lengthof r3;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, $i13, $i14);
        return r4;
    }

    static byte[] trimZeroes(byte[])
    {
        byte[] r0, r1;
        int i0, $i1, $i2, $i4, $i5, $i6;
        byte $b3;

        r0 := @parameter0: byte[];
        i0 = 0;

     label0:
        $i1 = lengthof r0;
        $i2 = $i1 - 1;
        if i0 >= $i2 goto label1;

        $b3 = r0[i0];
        if $b3 != 0 goto label1;

        i0 = i0 + 1;
        goto label0;

     label1:
        if i0 != 0 goto label2;

        return r0;

     label2:
        $i4 = lengthof r0;
        $i5 = $i4 - i0;
        r1 = newarray (byte)[$i5];
        $i6 = lengthof r1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r1, 0, $i6);
        return r1;
    }

    public static sun.security.ec.NamedCurve getNamedCurve(java.security.spec.ECParameterSpec)
    {
        java.security.spec.ECParameterSpec r0, r2;
        int i0, $i1, $i2, $i3;
        java.util.Iterator r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        sun.security.ec.NamedCurve $r3, $r16;
        java.security.spec.EllipticCurve $r4, $r8, $r10, $r11;
        java.security.spec.ECField $r5, $r9;
        java.util.Collection $r6;
        java.lang.Object $r7;
        java.security.spec.ECPoint $r12, $r13;
        java.math.BigInteger $r14, $r15;

        r0 := @parameter0: java.security.spec.ECParameterSpec;
        $z0 = r0 instanceof sun.security.ec.NamedCurve;
        if $z0 != 0 goto label0;

        if r0 != null goto label1;

     label0:
        $r3 = (sun.security.ec.NamedCurve) r0;
        return $r3;

     label1:
        $r4 = virtualinvoke r0.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();
        $r5 = virtualinvoke $r4.<java.security.spec.EllipticCurve: java.security.spec.ECField getField()>();
        i0 = interfaceinvoke $r5.<java.security.spec.ECField: int getFieldSize()>();
        $r6 = staticinvoke <sun.security.ec.NamedCurve: java.util.Collection knownECParameterSpecs()>();
        r1 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label8;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        r2 = (java.security.spec.ECParameterSpec) $r7;
        $r8 = virtualinvoke r2.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();
        $r9 = virtualinvoke $r8.<java.security.spec.EllipticCurve: java.security.spec.ECField getField()>();
        $i1 = interfaceinvoke $r9.<java.security.spec.ECField: int getFieldSize()>();
        if $i1 == i0 goto label3;

        goto label2;

     label3:
        $r10 = virtualinvoke r2.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();
        $r11 = virtualinvoke r0.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();
        $z2 = virtualinvoke $r10.<java.security.spec.EllipticCurve: boolean equals(java.lang.Object)>($r11);
        if $z2 != 0 goto label4;

        goto label2;

     label4:
        $r12 = virtualinvoke r2.<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()>();
        $r13 = virtualinvoke r0.<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()>();
        $z3 = virtualinvoke $r12.<java.security.spec.ECPoint: boolean equals(java.lang.Object)>($r13);
        if $z3 != 0 goto label5;

        goto label2;

     label5:
        $r14 = virtualinvoke r2.<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()>();
        $r15 = virtualinvoke r0.<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()>();
        $z4 = virtualinvoke $r14.<java.math.BigInteger: boolean equals(java.lang.Object)>($r15);
        if $z4 != 0 goto label6;

        goto label2;

     label6:
        $i2 = virtualinvoke r2.<java.security.spec.ECParameterSpec: int getCofactor()>();
        $i3 = virtualinvoke r0.<java.security.spec.ECParameterSpec: int getCofactor()>();
        if $i2 == $i3 goto label7;

        goto label2;

     label7:
        $r16 = (sun.security.ec.NamedCurve) r2;
        return $r16;

     label8:
        return null;
    }

    public static java.lang.String getCurveName(java.security.spec.ECParameterSpec)
    {
        java.security.spec.ECParameterSpec r0;
        sun.security.ec.NamedCurve r1;
        java.lang.String $r2;
        sun.security.util.ObjectIdentifier $r3;

        r0 := @parameter0: java.security.spec.ECParameterSpec;
        r1 = staticinvoke <sun.security.ec.ECParameters: sun.security.ec.NamedCurve getNamedCurve(java.security.spec.ECParameterSpec)>(r0);
        if r1 != null goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r3 = virtualinvoke r1.<sun.security.ec.NamedCurve: sun.security.util.ObjectIdentifier getObjectIdentifier()>();
        $r2 = virtualinvoke $r3.<sun.security.util.ObjectIdentifier: java.lang.String toString()>();

     label1:
        return $r2;
    }

    public static byte[] encodeParameters(java.security.spec.ECParameterSpec)
    {
        java.security.spec.ECParameterSpec r0;
        sun.security.ec.NamedCurve r1;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.RuntimeException $r3;
        java.lang.String $r6;
        byte[] $r7;

        r0 := @parameter0: java.security.spec.ECParameterSpec;
        r1 = staticinvoke <sun.security.ec.ECParameters: sun.security.ec.NamedCurve getNamedCurve(java.security.spec.ECParameterSpec)>(r0);
        if r1 != null goto label0;

        $r3 = new java.lang.RuntimeException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a known named curve: ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);
        throw $r3;

     label0:
        $r7 = virtualinvoke r1.<sun.security.ec.NamedCurve: byte[] getEncoded()>();
        return $r7;
    }

    public static java.security.spec.ECParameterSpec decodeParameters(byte[]) throws java.io.IOException
    {
        byte[] r0;
        sun.security.util.DerValue $r1, r2;
        sun.security.util.ObjectIdentifier r3;
        java.security.spec.ECParameterSpec r4;
        byte $b0;
        java.io.IOException $r5, $r10;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @parameter0: byte[];
        $r1 = new sun.security.util.DerValue;
        specialinvoke $r1.<sun.security.util.DerValue: void <init>(byte[])>(r0);
        r2 = $r1;
        $b0 = r2.<sun.security.util.DerValue: byte tag>;
        if $b0 != 6 goto label1;

        r3 = virtualinvoke r2.<sun.security.util.DerValue: sun.security.util.ObjectIdentifier getOID()>();
        r4 = staticinvoke <sun.security.ec.NamedCurve: java.security.spec.ECParameterSpec getECParameterSpec(sun.security.util.ObjectIdentifier)>(r3);
        if r4 != null goto label0;

        $r5 = new java.io.IOException;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown named curve: ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r9);
        throw $r5;

     label0:
        return r4;

     label1:
        $r10 = new java.io.IOException;
        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Only named ECParameters supported");
        throw $r10;
    }

    static java.security.AlgorithmParameters getAlgorithmParameters(java.security.spec.ECParameterSpec) throws java.security.InvalidKeyException
    {
        java.security.spec.ECParameterSpec r0;
        java.security.Provider $r1;
        java.security.AlgorithmParameters r2;
        java.security.GeneralSecurityException $r4, r5;
        java.security.InvalidKeyException $r6;

        r0 := @parameter0: java.security.spec.ECParameterSpec;

     label0:
        $r1 = <sun.security.ec.ECKeyFactory: java.security.Provider ecInternalProvider>;
        r2 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.security.Provider)>("EC", $r1);
        virtualinvoke r2.<java.security.AlgorithmParameters: void init(java.security.spec.AlgorithmParameterSpec)>(r0);

     label1:
        return r2;

     label2:
        $r4 := @caughtexception;
        r5 = $r4;
        $r6 = new java.security.InvalidKeyException;
        specialinvoke $r6.<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>("EC parameters error", r5);
        throw $r6;

        catch java.security.GeneralSecurityException from label0 to label1 with label2;
    }

    protected void engineInit(java.security.spec.AlgorithmParameterSpec) throws java.security.spec.InvalidParameterSpecException
    {
        sun.security.ec.ECParameters r0;
        java.security.spec.AlgorithmParameterSpec r1;
        java.lang.StringBuilder $r2, $r9, $r10, $r14, $r15, $r16;
        java.lang.String r3, $r11, $r17;
        java.security.spec.ECParameterSpec r4, $r5, $r7;
        boolean $z0, $z1;
        sun.security.ec.NamedCurve $r6;
        java.security.spec.InvalidParameterSpecException $r8, $r13, $r18, $r19;
        java.security.spec.ECGenParameterSpec $r12;

        r0 := @this: sun.security.ec.ECParameters;
        r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;
        $z0 = r1 instanceof java.security.spec.ECParameterSpec;
        if $z0 == 0 goto label0;

        $r5 = (java.security.spec.ECParameterSpec) r1;
        $r6 = staticinvoke <sun.security.ec.ECParameters: sun.security.ec.NamedCurve getNamedCurve(java.security.spec.ECParameterSpec)>($r5);
        r0.<sun.security.ec.ECParameters: java.security.spec.ECParameterSpec paramSpec> = $r6;
        $r7 = r0.<sun.security.ec.ECParameters: java.security.spec.ECParameterSpec paramSpec>;
        if $r7 != null goto label4;

        $r8 = new java.security.spec.InvalidParameterSpecException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a supported named curve: ");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.security.spec.InvalidParameterSpecException: void <init>(java.lang.String)>($r11);
        throw $r8;

     label0:
        $z1 = r1 instanceof java.security.spec.ECGenParameterSpec;
        if $z1 == 0 goto label2;

        $r12 = (java.security.spec.ECGenParameterSpec) r1;
        r3 = virtualinvoke $r12.<java.security.spec.ECGenParameterSpec: java.lang.String getName()>();
        r4 = staticinvoke <sun.security.ec.NamedCurve: java.security.spec.ECParameterSpec getECParameterSpec(java.lang.String)>(r3);
        if r4 != null goto label1;

        $r13 = new java.security.spec.InvalidParameterSpecException;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown curve: ");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r13.<java.security.spec.InvalidParameterSpecException: void <init>(java.lang.String)>($r17);
        throw $r13;

     label1:
        r0.<sun.security.ec.ECParameters: java.security.spec.ECParameterSpec paramSpec> = r4;
        goto label4;

     label2:
        if r1 != null goto label3;

        $r18 = new java.security.spec.InvalidParameterSpecException;
        specialinvoke $r18.<java.security.spec.InvalidParameterSpecException: void <init>(java.lang.String)>("paramSpec must not be null");
        throw $r18;

     label3:
        $r19 = new java.security.spec.InvalidParameterSpecException;
        specialinvoke $r19.<java.security.spec.InvalidParameterSpecException: void <init>(java.lang.String)>("Only ECParameterSpec and ECGenParameterSpec supported");
        throw $r19;

     label4:
        return;
    }

    protected void engineInit(byte[]) throws java.io.IOException
    {
        sun.security.ec.ECParameters r0;
        byte[] r1;
        java.security.spec.ECParameterSpec $r2;

        r0 := @this: sun.security.ec.ECParameters;
        r1 := @parameter0: byte[];
        $r2 = staticinvoke <sun.security.ec.ECParameters: java.security.spec.ECParameterSpec decodeParameters(byte[])>(r1);
        r0.<sun.security.ec.ECParameters: java.security.spec.ECParameterSpec paramSpec> = $r2;
        return;
    }

    protected void engineInit(byte[], java.lang.String) throws java.io.IOException
    {
        sun.security.ec.ECParameters r0;
        byte[] r1;
        java.lang.String r2;

        r0 := @this: sun.security.ec.ECParameters;
        r1 := @parameter0: byte[];
        r2 := @parameter1: java.lang.String;
        virtualinvoke r0.<sun.security.ec.ECParameters: void engineInit(byte[])>(r1);
        return;
    }

    protected java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) throws java.security.spec.InvalidParameterSpecException
    {
        sun.security.ec.ECParameters r0;
        java.lang.Class r1;
        boolean $z0, $z1;
        java.security.spec.ECParameterSpec $r2, $r4;
        java.security.spec.ECGenParameterSpec $r3;
        java.lang.String $r5;
        java.security.spec.InvalidParameterSpecException $r6;

        r0 := @this: sun.security.ec.ECParameters;
        r1 := @parameter0: java.lang.Class;
        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "java/security/spec/ECParameterSpec");
        if $z0 == 0 goto label0;

        $r2 = r0.<sun.security.ec.ECParameters: java.security.spec.ECParameterSpec paramSpec>;
        return $r2;

     label0:
        $z1 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "java/security/spec/ECGenParameterSpec");
        if $z1 == 0 goto label1;

        $r3 = new java.security.spec.ECGenParameterSpec;
        $r4 = r0.<sun.security.ec.ECParameters: java.security.spec.ECParameterSpec paramSpec>;
        $r5 = staticinvoke <sun.security.ec.ECParameters: java.lang.String getCurveName(java.security.spec.ECParameterSpec)>($r4);
        specialinvoke $r3.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>($r5);
        return $r3;

     label1:
        $r6 = new java.security.spec.InvalidParameterSpecException;
        specialinvoke $r6.<java.security.spec.InvalidParameterSpecException: void <init>(java.lang.String)>("Only ECParameterSpec and ECGenParameterSpec supported");
        throw $r6;
    }

    protected byte[] engineGetEncoded() throws java.io.IOException
    {
        sun.security.ec.ECParameters r0;
        java.security.spec.ECParameterSpec $r1;
        byte[] $r2;

        r0 := @this: sun.security.ec.ECParameters;
        $r1 = r0.<sun.security.ec.ECParameters: java.security.spec.ECParameterSpec paramSpec>;
        $r2 = staticinvoke <sun.security.ec.ECParameters: byte[] encodeParameters(java.security.spec.ECParameterSpec)>($r1);
        return $r2;
    }

    protected byte[] engineGetEncoded(java.lang.String) throws java.io.IOException
    {
        sun.security.ec.ECParameters r0;
        java.lang.String r1;
        byte[] $r2;

        r0 := @this: sun.security.ec.ECParameters;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<sun.security.ec.ECParameters: byte[] engineGetEncoded()>();
        return $r2;
    }

    protected java.lang.String engineToString()
    {
        sun.security.ec.ECParameters r0;
        java.security.spec.ECParameterSpec $r1;
        java.lang.String $r2;

        r0 := @this: sun.security.ec.ECParameters;
        $r1 = r0.<sun.security.ec.ECParameters: java.security.spec.ECParameterSpec paramSpec>;
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();
        return $r2;
    }
}
