abstract class sun.nio.cs.ThreadLocalCoders$Cache extends java.lang.Object
{
    private java.lang.ThreadLocal cache;
    private final int size;

    void <init>(int)
    {
        sun.nio.cs.ThreadLocalCoders$Cache r0;
        int i0;
        java.lang.ThreadLocal $r1;

        r0 := @this: sun.nio.cs.ThreadLocalCoders$Cache;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new java.lang.ThreadLocal;
        specialinvoke $r1.<java.lang.ThreadLocal: void <init>()>();
        r0.<sun.nio.cs.ThreadLocalCoders$Cache: java.lang.ThreadLocal cache> = $r1;
        r0.<sun.nio.cs.ThreadLocalCoders$Cache: int size> = i0;
        return;
    }

    abstract java.lang.Object create(java.lang.Object);

    private void moveToFront(java.lang.Object[], int)
    {
        sun.nio.cs.ThreadLocalCoders$Cache r0;
        java.lang.Object[] r1;
        int i0, i1, $i2;
        java.lang.Object r2, $r3;

        r0 := @this: sun.nio.cs.ThreadLocalCoders$Cache;
        r1 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        r2 = r1[i0];
        i1 = i0;

     label0:
        if i1 <= 0 goto label1;

        $i2 = i1 - 1;
        $r3 = r1[$i2];
        r1[i1] = $r3;
        i1 = i1 + -1;
        goto label0;

     label1:
        r1[0] = r2;
        return;
    }

    abstract boolean hasName(java.lang.Object, java.lang.Object);

    java.lang.Object forName(java.lang.Object)
    {
        sun.nio.cs.ThreadLocalCoders$Cache r0;
        java.lang.Object r1, r3, $r5, r8;
        java.lang.Object[] r2, $r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.ThreadLocal $r4, $r7;
        boolean $z0;

        r0 := @this: sun.nio.cs.ThreadLocalCoders$Cache;
        r1 := @parameter0: java.lang.Object;
        $r4 = r0.<sun.nio.cs.ThreadLocalCoders$Cache: java.lang.ThreadLocal cache>;
        $r5 = virtualinvoke $r4.<java.lang.ThreadLocal: java.lang.Object get()>();
        $r6 = (java.lang.Object[]) $r5;
        r2 = (java.lang.Object[]) $r6;
        if r2 != null goto label0;

        $i1 = r0.<sun.nio.cs.ThreadLocalCoders$Cache: int size>;
        r2 = newarray (java.lang.Object)[$i1];
        $r7 = r0.<sun.nio.cs.ThreadLocalCoders$Cache: java.lang.ThreadLocal cache>;
        virtualinvoke $r7.<java.lang.ThreadLocal: void set(java.lang.Object)>(r2);
        goto label5;

     label0:
        i0 = 0;

     label1:
        $i2 = lengthof r2;
        if i0 >= $i2 goto label5;

        r3 = r2[i0];
        if r3 != null goto label2;

        goto label4;

     label2:
        $z0 = virtualinvoke r0.<sun.nio.cs.ThreadLocalCoders$Cache: boolean hasName(java.lang.Object,java.lang.Object)>(r3, r1);
        if $z0 == 0 goto label4;

        if i0 <= 0 goto label3;

        specialinvoke r0.<sun.nio.cs.ThreadLocalCoders$Cache: void moveToFront(java.lang.Object[],int)>(r2, i0);

     label3:
        return r3;

     label4:
        i0 = i0 + 1;
        goto label1;

     label5:
        r8 = virtualinvoke r0.<sun.nio.cs.ThreadLocalCoders$Cache: java.lang.Object create(java.lang.Object)>(r1);
        $i3 = lengthof r2;
        $i4 = $i3 - 1;
        r2[$i4] = r8;
        $i5 = lengthof r2;
        $i6 = $i5 - 1;
        specialinvoke r0.<sun.nio.cs.ThreadLocalCoders$Cache: void moveToFront(java.lang.Object[],int)>(r2, $i6);
        return r8;
    }
}
