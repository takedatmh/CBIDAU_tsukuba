public abstract class sun.util.calendar.BaseCalendar extends sun.util.calendar.AbstractCalendar
{
    public static final int JANUARY;
    public static final int FEBRUARY;
    public static final int MARCH;
    public static final int APRIL;
    public static final int MAY;
    public static final int JUNE;
    public static final int JULY;
    public static final int AUGUST;
    public static final int SEPTEMBER;
    public static final int OCTOBER;
    public static final int NOVEMBER;
    public static final int DECEMBER;
    public static final int SUNDAY;
    public static final int MONDAY;
    public static final int TUESDAY;
    public static final int WEDNESDAY;
    public static final int THURSDAY;
    public static final int FRIDAY;
    public static final int SATURDAY;
    private static final int BASE_YEAR;
    private static final int[] FIXED_DATES;
    static final int[] DAYS_IN_MONTH;
    static final int[] ACCUMULATED_DAYS_IN_MONTH;
    static final int[] ACCUMULATED_DAYS_IN_MONTH_LEAP;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        sun.util.calendar.BaseCalendar r0;

        r0 := @this: sun.util.calendar.BaseCalendar;
        specialinvoke r0.<sun.util.calendar.AbstractCalendar: void <init>()>();
        return;
    }

    public boolean validate(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.BaseCalendar r0;
        sun.util.calendar.CalendarDate r1;
        sun.util.calendar.BaseCalendar$Date r2;
        int i0, i1, i2, $i3, $i4, $i5;
        boolean $z0, $z1;

        r0 := @this: sun.util.calendar.BaseCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        r2 = (sun.util.calendar.BaseCalendar$Date) r1;
        $z0 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: boolean isNormalized()>();
        if $z0 == 0 goto label0;

        return 1;

     label0:
        i0 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        if i0 < 1 goto label1;

        if i0 <= 12 goto label2;

     label1:
        return 0;

     label2:
        i1 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        if i1 <= 0 goto label3;

        $i3 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $i4 = specialinvoke r0.<sun.util.calendar.BaseCalendar: int getMonthLength(int,int)>($i3, i0);
        if i1 <= $i4 goto label4;

     label3:
        return 0;

     label4:
        i2 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getDayOfWeek()>();
        if i2 == -2147483648 goto label5;

        $i5 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: int getDayOfWeek(sun.util.calendar.CalendarDate)>(r2);
        if i2 == $i5 goto label5;

        return 0;

     label5:
        $z1 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: boolean validateTime(sun.util.calendar.CalendarDate)>(r1);
        if $z1 != 0 goto label6;

        return 0;

     label6:
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: void setNormalized(boolean)>(1);
        return 1;
    }

    public boolean normalize(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.BaseCalendar r0;
        sun.util.calendar.CalendarDate r1;
        sun.util.calendar.BaseCalendar$Date r2;
        java.util.TimeZone r3;
        int i0, i2, i3, i4, $i7, i15, i16, $i19, $i20, $i23, i28, $i29, $i30, $i33, $i34;
        long l1, l5, $l8, $l9, $l11, $l17, l18, $l21, $l24, $l26, l27, $l31, $l32;
        boolean $z0, $z1;
        byte $b10, $b12, $b13, $b14, $b22, $b25;

        r0 := @this: sun.util.calendar.BaseCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        $z0 = virtualinvoke r1.<sun.util.calendar.CalendarDate: boolean isNormalized()>();
        if $z0 == 0 goto label0;

        return 1;

     label0:
        r2 = (sun.util.calendar.BaseCalendar$Date) r1;
        r3 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: java.util.TimeZone getZone()>();
        if r3 == null goto label1;

        virtualinvoke r0.<sun.util.calendar.BaseCalendar: long getTime(sun.util.calendar.CalendarDate)>(r1);
        return 1;

     label1:
        i0 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: int normalizeTime(sun.util.calendar.CalendarDate)>(r2);
        virtualinvoke r0.<sun.util.calendar.BaseCalendar: void normalizeMonth(sun.util.calendar.CalendarDate)>(r2);
        $i7 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getDayOfMonth()>();
        $l8 = (long) $i7;
        $l9 = (long) i0;
        l1 = $l8 + $l9;
        i2 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        i3 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        i4 = specialinvoke r0.<sun.util.calendar.BaseCalendar: int getMonthLength(int,int)>(i3, i2);
        $b10 = l1 cmp 0L;
        if $b10 <= 0 goto label2;

        $l11 = (long) i4;
        $b12 = l1 cmp $l11;
        if $b12 <= 0 goto label7;

     label2:
        $b13 = l1 cmp 0L;
        if $b13 > 0 goto label4;

        $b14 = l1 cmp -28L;
        if $b14 <= 0 goto label4;

        i15 = i2 + -1;
        i16 = specialinvoke r0.<sun.util.calendar.BaseCalendar: int getMonthLength(int,int)>(i3, i15);
        $l17 = (long) i16;
        l18 = l1 + $l17;
        $i19 = (int) l18;
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setDayOfMonth(int)>($i19);
        if i15 != 0 goto label3;

        i15 = 12;
        $i20 = i3 - 1;
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: void setNormalizedYear(int)>($i20);

     label3:
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setMonth(int)>(i15);
        goto label8;

     label4:
        $l21 = (long) i4;
        $b22 = l1 cmp $l21;
        if $b22 <= 0 goto label6;

        $i23 = i4 + 28;
        $l24 = (long) $i23;
        $b25 = l1 cmp $l24;
        if $b25 >= 0 goto label6;

        $l26 = (long) i4;
        l27 = l1 - $l26;
        i28 = i2 + 1;
        $i29 = (int) l27;
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setDayOfMonth(int)>($i29);
        if i28 <= 12 goto label5;

        $i30 = i3 + 1;
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: void setNormalizedYear(int)>($i30);
        i28 = 1;

     label5:
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setMonth(int)>(i28);
        goto label8;

     label6:
        $l31 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>(i3, i2, 1, r2);
        $l32 = l1 + $l31;
        l5 = $l32 - 1L;
        virtualinvoke r0.<sun.util.calendar.BaseCalendar: void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate,long)>(r2, l5);
        goto label8;

     label7:
        $i33 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: int getDayOfWeek(sun.util.calendar.CalendarDate)>(r2);
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: void setDayOfWeek(int)>($i33);

     label8:
        $i34 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $z1 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: boolean isLeapYear(int)>($i34);
        virtualinvoke r1.<sun.util.calendar.CalendarDate: void setLeapYear(boolean)>($z1);
        virtualinvoke r1.<sun.util.calendar.CalendarDate: void setZoneOffset(int)>(0);
        virtualinvoke r1.<sun.util.calendar.CalendarDate: void setDaylightSaving(int)>(0);
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: void setNormalized(boolean)>(1);
        return 1;
    }

    void normalizeMonth(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.BaseCalendar r0;
        sun.util.calendar.CalendarDate r1;
        sun.util.calendar.BaseCalendar$Date r2;
        int i0, $i3, $i7, i8, $i11, $i15, i16, $i20;
        long l1, l2, $l5, $l6, $l9, l10, $l13, $l14, $l17, $l18, l19;
        byte $b4, $b12;

        r0 := @this: sun.util.calendar.BaseCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        r2 = (sun.util.calendar.BaseCalendar$Date) r1;
        i0 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $i3 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        l1 = (long) $i3;
        $b4 = l1 cmp 0L;
        if $b4 > 0 goto label0;

        l2 = 1L - l1;
        $l5 = l2 / 12L;
        $l6 = $l5 + 1L;
        $i7 = (int) $l6;
        i8 = i0 - $i7;
        $l9 = l2 % 12L;
        l10 = 13L - $l9;
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: void setNormalizedYear(int)>(i8);
        $i11 = (int) l10;
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setMonth(int)>($i11);
        goto label1;

     label0:
        $b12 = l1 cmp 12L;
        if $b12 <= 0 goto label1;

        $l13 = l1 - 1L;
        $l14 = $l13 / 12L;
        $i15 = (int) $l14;
        i16 = i0 + $i15;
        $l17 = l1 - 1L;
        $l18 = $l17 % 12L;
        l19 = $l18 + 1L;
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: void setNormalizedYear(int)>(i16);
        $i20 = (int) l19;
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setMonth(int)>($i20);

     label1:
        return;
    }

    public int getYearLength(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.BaseCalendar r0;
        sun.util.calendar.CalendarDate r1;
        sun.util.calendar.BaseCalendar$Date $r2;
        int $i0;
        boolean $z0;
        short $s1;

        r0 := @this: sun.util.calendar.BaseCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        $r2 = (sun.util.calendar.BaseCalendar$Date) r1;
        $i0 = virtualinvoke $r2.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $z0 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: boolean isLeapYear(int)>($i0);
        if $z0 == 0 goto label0;

        $s1 = 366;
        goto label1;

     label0:
        $s1 = 365;

     label1:
        return $s1;
    }

    public int getYearLengthInMonths(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.BaseCalendar r0;
        sun.util.calendar.CalendarDate r1;

        r0 := @this: sun.util.calendar.BaseCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        return 12;
    }

    public int getMonthLength(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.BaseCalendar r0;
        sun.util.calendar.CalendarDate r1;
        sun.util.calendar.BaseCalendar$Date r2;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r7;

        r0 := @this: sun.util.calendar.BaseCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        r2 = (sun.util.calendar.BaseCalendar$Date) r1;
        i0 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getMonth()>();
        if i0 < 1 goto label0;

        if i0 <= 12 goto label1;

     label0:
        $r4 = new java.lang.IllegalArgumentException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal month value: ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r4;

     label1:
        $i1 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $i2 = specialinvoke r0.<sun.util.calendar.BaseCalendar: int getMonthLength(int,int)>($i1, i0);
        return $i2;
    }

    private final int getMonthLength(int, int)
    {
        sun.util.calendar.BaseCalendar r0;
        int i0, i1, i2;
        int[] $r1;
        boolean $z0;

        r0 := @this: sun.util.calendar.BaseCalendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = <sun.util.calendar.BaseCalendar: int[] DAYS_IN_MONTH>;
        i2 = $r1[i1];
        if i1 != 2 goto label0;

        $z0 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: boolean isLeapYear(int)>(i0);
        if $z0 == 0 goto label0;

        i2 = i2 + 1;

     label0:
        return i2;
    }

    public long getDayOfYear(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.BaseCalendar r0;
        sun.util.calendar.CalendarDate r1;
        sun.util.calendar.BaseCalendar$Date $r2;
        int $i0, $i1, $i2;
        long $l3;

        r0 := @this: sun.util.calendar.BaseCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        $r2 = (sun.util.calendar.BaseCalendar$Date) r1;
        $i0 = virtualinvoke $r2.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $i1 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getMonth()>();
        $i2 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getDayOfMonth()>();
        $l3 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: long getDayOfYear(int,int,int)>($i0, $i1, $i2);
        return $l3;
    }

    final long getDayOfYear(int, int, int)
    {
        sun.util.calendar.BaseCalendar r0;
        int i0, i1, i2, $i4;
        long $l3, $l5, $l6;
        boolean $z0;
        int[] $r1, $r2;

        r0 := @this: sun.util.calendar.BaseCalendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        $l3 = (long) i2;
        $z0 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: boolean isLeapYear(int)>(i0);
        if $z0 == 0 goto label0;

        $r1 = <sun.util.calendar.BaseCalendar: int[] ACCUMULATED_DAYS_IN_MONTH_LEAP>;
        $i4 = $r1[i1];
        goto label1;

     label0:
        $r2 = <sun.util.calendar.BaseCalendar: int[] ACCUMULATED_DAYS_IN_MONTH>;
        $i4 = $r2[i1];

     label1:
        $l5 = (long) $i4;
        $l6 = $l3 + $l5;
        return $l6;
    }

    public long getFixedDate(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.BaseCalendar r0;
        sun.util.calendar.CalendarDate r1;
        boolean $z0;
        sun.util.calendar.BaseCalendar$Date $r2, $r3;
        int $i0, $i1, $i2;
        long $l3;

        r0 := @this: sun.util.calendar.BaseCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        $z0 = virtualinvoke r1.<sun.util.calendar.CalendarDate: boolean isNormalized()>();
        if $z0 != 0 goto label0;

        virtualinvoke r0.<sun.util.calendar.BaseCalendar: void normalizeMonth(sun.util.calendar.CalendarDate)>(r1);

     label0:
        $r2 = (sun.util.calendar.BaseCalendar$Date) r1;
        $i0 = virtualinvoke $r2.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $i1 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getMonth()>();
        $i2 = virtualinvoke r1.<sun.util.calendar.CalendarDate: int getDayOfMonth()>();
        $r3 = (sun.util.calendar.BaseCalendar$Date) r1;
        $l3 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>($i0, $i1, $i2, $r3);
        return $l3;
    }

    public long getFixedDate(int, int, int, sun.util.calendar.BaseCalendar$Date)
    {
        sun.util.calendar.BaseCalendar r0;
        int i0, i1, i2, i3, $i11, $i12, $i29, $i30, $i31, $i42, $i43, $i44;
        sun.util.calendar.BaseCalendar$Date r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        long l4, l5, $l6, $l7, $l8, $l9, $l10, $l16, $l17, $l18, $l19, l20, $l22, $l23, $l24, $l25, $l26, $l27, $l28, $l32, $l33, l34, $l35, $l36, $l37, $l38, $l39, $l40, $l41, $l45, $l46, $l47, $l48, $l50;
        int[] $r2, $r3;
        short $s15, $s51;
        byte $b21;

        r0 := @this: sun.util.calendar.BaseCalendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        r1 := @parameter3: sun.util.calendar.BaseCalendar$Date;
        if i1 != 1 goto label0;

        if i2 != 1 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        z0 = $z1;
        if r1 == null goto label3;

        $z2 = virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: boolean hit(int)>(i0);
        if $z2 == 0 goto label3;

        if z0 == 0 goto label2;

        $l6 = virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: long getCachedJan1()>();
        return $l6;

     label2:
        $l7 = virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: long getCachedJan1()>();
        $l8 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: long getDayOfYear(int,int,int)>(i0, i1, i2);
        $l9 = $l7 + $l8;
        $l10 = $l9 - 1L;
        return $l10;

     label3:
        i3 = i0 - 1970;
        if i3 < 0 goto label9;

        $r2 = <sun.util.calendar.BaseCalendar: int[] FIXED_DATES>;
        $i11 = lengthof $r2;
        if i3 >= $i11 goto label9;

        $r3 = <sun.util.calendar.BaseCalendar: int[] FIXED_DATES>;
        $i12 = $r3[i3];
        l4 = (long) $i12;
        if r1 == null goto label6;

        $z3 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: boolean isLeapYear(int)>(i0);
        if $z3 == 0 goto label4;

        $s15 = 366;
        goto label5;

     label4:
        $s15 = 365;

     label5:
        virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: void setCache(int,long,int)>(i0, l4, $s15);

     label6:
        if z0 == 0 goto label7;

        $l16 = l4;
        goto label8;

     label7:
        $l17 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: long getDayOfYear(int,int,int)>(i0, i1, i2);
        $l18 = l4 + $l17;
        $l16 = $l18 - 1L;

     label8:
        return $l16;

     label9:
        $l19 = (long) i0;
        l20 = $l19 - 1L;
        l5 = (long) i2;
        $b21 = l20 cmp 0L;
        if $b21 < 0 goto label10;

        $l22 = 365L * l20;
        $l23 = l20 / 4L;
        $l24 = $l22 + $l23;
        $l25 = l20 / 100L;
        $l26 = $l24 - $l25;
        $l27 = l20 / 400L;
        $l28 = $l26 + $l27;
        $i29 = 367 * i1;
        $i30 = $i29 - 362;
        $i31 = $i30 / 12;
        $l32 = (long) $i31;
        $l33 = $l28 + $l32;
        l34 = l5 + $l33;
        goto label11;

     label10:
        $l35 = 365L * l20;
        $l36 = staticinvoke <sun.util.calendar.CalendarUtils: long floorDivide(long,long)>(l20, 4L);
        $l37 = $l35 + $l36;
        $l38 = staticinvoke <sun.util.calendar.CalendarUtils: long floorDivide(long,long)>(l20, 100L);
        $l39 = $l37 - $l38;
        $l40 = staticinvoke <sun.util.calendar.CalendarUtils: long floorDivide(long,long)>(l20, 400L);
        $l41 = $l39 + $l40;
        $i42 = 367 * i1;
        $i43 = $i42 - 362;
        $i44 = staticinvoke <sun.util.calendar.CalendarUtils: int floorDivide(int,int)>($i43, 12);
        $l45 = (long) $i44;
        $l46 = $l41 + $l45;
        l34 = l5 + $l46;

     label11:
        if i1 <= 2 goto label14;

        $l47 = l34;
        $z4 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: boolean isLeapYear(int)>(i0);
        if $z4 == 0 goto label12;

        $l48 = 1L;
        goto label13;

     label12:
        $l48 = 2L;

     label13:
        l34 = $l47 - $l48;

     label14:
        if r1 == null goto label17;

        if z0 == 0 goto label17;

        $l50 = l34;
        $z5 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: boolean isLeapYear(int)>(i0);
        if $z5 == 0 goto label15;

        $s51 = 366;
        goto label16;

     label15:
        $s51 = 365;

     label16:
        virtualinvoke r1.<sun.util.calendar.BaseCalendar$Date: void setCache(int,long,int)>(i0, $l50, $s51);

     label17:
        return l34;
    }

    public void getCalendarDateFromFixedDate(sun.util.calendar.CalendarDate, long)
    {
        sun.util.calendar.BaseCalendar r0;
        sun.util.calendar.CalendarDate r1;
        long l0, l2, l4, l6, $l10, $l12, $l13, $l20, $l21;
        sun.util.calendar.BaseCalendar$Date r2;
        int i1, i3, i5, i7, i8, $i9, $i15, $i17, i18, $i19, $i22;
        boolean z0, $z1, $z2;
        short $s11;
        byte $b14, $b16;
        int[] $r4;
        java.lang.AssertionError $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: sun.util.calendar.BaseCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        l0 := @parameter1: long;
        r2 = (sun.util.calendar.BaseCalendar$Date) r1;
        $z1 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: boolean hit(long)>(l0);
        if $z1 == 0 goto label0;

        i1 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: int getCachedYear()>();
        l2 = virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: long getCachedJan1()>();
        z0 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: boolean isLeapYear(int)>(i1);
        goto label3;

     label0:
        i1 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: int getGregorianYearFromFixedDate(long)>(l0);
        l2 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: long getFixedDate(int,int,int,sun.util.calendar.BaseCalendar$Date)>(i1, 1, 1, null);
        z0 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: boolean isLeapYear(int)>(i1);
        $i9 = i1;
        $l10 = l2;
        if z0 == 0 goto label1;

        $s11 = 366;
        goto label2;

     label1:
        $s11 = 365;

     label2:
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: void setCache(int,long,int)>($i9, $l10, $s11);

     label3:
        $l12 = l0 - l2;
        i3 = (int) $l12;
        $l13 = l2 + 31L;
        l4 = $l13 + 28L;
        if z0 == 0 goto label4;

        l4 = l4 + 1L;

     label4:
        $b14 = l0 cmp l4;
        if $b14 < 0 goto label7;

        $i15 = i3;
        if z0 == 0 goto label5;

        $b16 = 1;
        goto label6;

     label5:
        $b16 = 2;

     label6:
        i3 = $i15 + $b16;

     label7:
        $i17 = 12 * i3;
        i5 = $i17 + 373;
        if i5 <= 0 goto label8;

        i18 = i5 / 367;
        goto label9;

     label8:
        i18 = staticinvoke <sun.util.calendar.CalendarUtils: int floorDivide(int,int)>(i5, 367);

     label9:
        $r4 = <sun.util.calendar.BaseCalendar: int[] ACCUMULATED_DAYS_IN_MONTH>;
        $i19 = $r4[i18];
        $l20 = (long) $i19;
        l6 = l2 + $l20;
        if z0 == 0 goto label10;

        if i18 < 3 goto label10;

        l6 = l6 + 1L;

     label10:
        $l21 = l0 - l6;
        $i22 = (int) $l21;
        i7 = $i22 + 1;
        i8 = staticinvoke <sun.util.calendar.BaseCalendar: int getDayOfWeekFromFixedDate(long)>(l0);
        $z2 = <sun.util.calendar.BaseCalendar: boolean $assertionsDisabled>;
        if $z2 != 0 goto label11;

        if i8 > 0 goto label11;

        $r5 = new java.lang.AssertionError;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("negative day of week ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);
        throw $r5;

     label11:
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: void setNormalizedYear(int)>(i1);
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setMonth(int)>(i18);
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setDayOfMonth(int)>(i7);
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: void setDayOfWeek(int)>(i8);
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: void setLeapYear(boolean)>(z0);
        virtualinvoke r2.<sun.util.calendar.BaseCalendar$Date: void setNormalized(boolean)>(1);
        return;
    }

    public int getDayOfWeek(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.BaseCalendar r0;
        sun.util.calendar.CalendarDate r1;
        long l0;
        int $i1;

        r0 := @this: sun.util.calendar.BaseCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        l0 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: long getFixedDate(sun.util.calendar.CalendarDate)>(r1);
        $i1 = staticinvoke <sun.util.calendar.BaseCalendar: int getDayOfWeekFromFixedDate(long)>(l0);
        return $i1;
    }

    public static final int getDayOfWeekFromFixedDate(long)
    {
        long l0, $l2, $l5;
        byte $b1;
        int $i3, $i4, $i6, $i7;

        l0 := @parameter0: long;
        $b1 = l0 cmp 0L;
        if $b1 < 0 goto label0;

        $l2 = l0 % 7L;
        $i3 = (int) $l2;
        $i4 = $i3 + 1;
        return $i4;

     label0:
        $l5 = staticinvoke <sun.util.calendar.CalendarUtils: long mod(long,long)>(l0, 7L);
        $i6 = (int) $l5;
        $i7 = $i6 + 1;
        return $i7;
    }

    public int getYearFromFixedDate(long)
    {
        sun.util.calendar.BaseCalendar r0;
        long l0;
        int $i1;

        r0 := @this: sun.util.calendar.BaseCalendar;
        l0 := @parameter0: long;
        $i1 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: int getGregorianYearFromFixedDate(long)>(l0);
        return $i1;
    }

    final int getGregorianYearFromFixedDate(long)
    {
        sun.util.calendar.BaseCalendar r0;
        long l0, l1, $l12, $l13, l15, $l16, $l17;
        int i2, i3, i4, i5, i6, i7, i8, i9, i10, $i14, i18, i19, i20, $i21, i22, $i23, $i24, $i25, $i26, $i27;
        byte $b11;

        r0 := @this: sun.util.calendar.BaseCalendar;
        l0 := @parameter0: long;
        $b11 = l0 cmp 0L;
        if $b11 <= 0 goto label0;

        l1 = l0 - 1L;
        $l12 = l1 / 146097L;
        i2 = (int) $l12;
        $l13 = l1 % 146097L;
        i3 = (int) $l13;
        i4 = i3 / 36524;
        i5 = i3 % 36524;
        i6 = i5 / 1461;
        i7 = i5 % 1461;
        i8 = i7 / 365;
        $i14 = i7 % 365;
        i9 = $i14 + 1;
        goto label1;

     label0:
        l15 = l0 - 1L;
        $l16 = staticinvoke <sun.util.calendar.CalendarUtils: long floorDivide(long,long)>(l15, 146097L);
        i2 = (int) $l16;
        $l17 = staticinvoke <sun.util.calendar.CalendarUtils: long mod(long,long)>(l15, 146097L);
        i18 = (int) $l17;
        i4 = staticinvoke <sun.util.calendar.CalendarUtils: int floorDivide(int,int)>(i18, 36524);
        i19 = staticinvoke <sun.util.calendar.CalendarUtils: int mod(int,int)>(i18, 36524);
        i6 = staticinvoke <sun.util.calendar.CalendarUtils: int floorDivide(int,int)>(i19, 1461);
        i20 = staticinvoke <sun.util.calendar.CalendarUtils: int mod(int,int)>(i19, 1461);
        i8 = staticinvoke <sun.util.calendar.CalendarUtils: int floorDivide(int,int)>(i20, 365);
        $i21 = staticinvoke <sun.util.calendar.CalendarUtils: int mod(int,int)>(i20, 365);
        i22 = $i21 + 1;

     label1:
        $i23 = 400 * i2;
        $i24 = 100 * i4;
        $i25 = $i23 + $i24;
        $i26 = 4 * i6;
        $i27 = $i25 + $i26;
        i10 = $i27 + i8;
        if i4 == 4 goto label2;

        if i8 == 4 goto label2;

        i10 = i10 + 1;

     label2:
        return i10;
    }

    protected boolean isLeapYear(sun.util.calendar.CalendarDate)
    {
        sun.util.calendar.BaseCalendar r0;
        sun.util.calendar.CalendarDate r1;
        sun.util.calendar.BaseCalendar$Date $r2;
        int $i0;
        boolean $z0;

        r0 := @this: sun.util.calendar.BaseCalendar;
        r1 := @parameter0: sun.util.calendar.CalendarDate;
        $r2 = (sun.util.calendar.BaseCalendar$Date) r1;
        $i0 = virtualinvoke $r2.<sun.util.calendar.BaseCalendar$Date: int getNormalizedYear()>();
        $z0 = virtualinvoke r0.<sun.util.calendar.BaseCalendar: boolean isLeapYear(int)>($i0);
        return $z0;
    }

    boolean isLeapYear(int)
    {
        sun.util.calendar.BaseCalendar r0;
        int i0;
        boolean $z0;

        r0 := @this: sun.util.calendar.BaseCalendar;
        i0 := @parameter0: int;
        $z0 = staticinvoke <sun.util.calendar.CalendarUtils: boolean isGregorianLeapYear(int)>(i0);
        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        int[] $r1, $r2, $r3, $r4;

        $r0 = class "sun/util/calendar/BaseCalendar";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.util.calendar.BaseCalendar: boolean $assertionsDisabled> = $z1;
        $r1 = newarray (int)[70];
        $r1[0] = 719163;
        $r1[1] = 719528;
        $r1[2] = 719893;
        $r1[3] = 720259;
        $r1[4] = 720624;
        $r1[5] = 720989;
        $r1[6] = 721354;
        $r1[7] = 721720;
        $r1[8] = 722085;
        $r1[9] = 722450;
        $r1[10] = 722815;
        $r1[11] = 723181;
        $r1[12] = 723546;
        $r1[13] = 723911;
        $r1[14] = 724276;
        $r1[15] = 724642;
        $r1[16] = 725007;
        $r1[17] = 725372;
        $r1[18] = 725737;
        $r1[19] = 726103;
        $r1[20] = 726468;
        $r1[21] = 726833;
        $r1[22] = 727198;
        $r1[23] = 727564;
        $r1[24] = 727929;
        $r1[25] = 728294;
        $r1[26] = 728659;
        $r1[27] = 729025;
        $r1[28] = 729390;
        $r1[29] = 729755;
        $r1[30] = 730120;
        $r1[31] = 730486;
        $r1[32] = 730851;
        $r1[33] = 731216;
        $r1[34] = 731581;
        $r1[35] = 731947;
        $r1[36] = 732312;
        $r1[37] = 732677;
        $r1[38] = 733042;
        $r1[39] = 733408;
        $r1[40] = 733773;
        $r1[41] = 734138;
        $r1[42] = 734503;
        $r1[43] = 734869;
        $r1[44] = 735234;
        $r1[45] = 735599;
        $r1[46] = 735964;
        $r1[47] = 736330;
        $r1[48] = 736695;
        $r1[49] = 737060;
        $r1[50] = 737425;
        $r1[51] = 737791;
        $r1[52] = 738156;
        $r1[53] = 738521;
        $r1[54] = 738886;
        $r1[55] = 739252;
        $r1[56] = 739617;
        $r1[57] = 739982;
        $r1[58] = 740347;
        $r1[59] = 740713;
        $r1[60] = 741078;
        $r1[61] = 741443;
        $r1[62] = 741808;
        $r1[63] = 742174;
        $r1[64] = 742539;
        $r1[65] = 742904;
        $r1[66] = 743269;
        $r1[67] = 743635;
        $r1[68] = 744000;
        $r1[69] = 744365;
        <sun.util.calendar.BaseCalendar: int[] FIXED_DATES> = $r1;
        $r2 = newarray (int)[13];
        $r2[0] = 31;
        $r2[1] = 31;
        $r2[2] = 28;
        $r2[3] = 31;
        $r2[4] = 30;
        $r2[5] = 31;
        $r2[6] = 30;
        $r2[7] = 31;
        $r2[8] = 31;
        $r2[9] = 30;
        $r2[10] = 31;
        $r2[11] = 30;
        $r2[12] = 31;
        <sun.util.calendar.BaseCalendar: int[] DAYS_IN_MONTH> = $r2;
        $r3 = newarray (int)[13];
        $r3[0] = -30;
        $r3[1] = 0;
        $r3[2] = 31;
        $r3[3] = 59;
        $r3[4] = 90;
        $r3[5] = 120;
        $r3[6] = 151;
        $r3[7] = 181;
        $r3[8] = 212;
        $r3[9] = 243;
        $r3[10] = 273;
        $r3[11] = 304;
        $r3[12] = 334;
        <sun.util.calendar.BaseCalendar: int[] ACCUMULATED_DAYS_IN_MONTH> = $r3;
        $r4 = newarray (int)[13];
        $r4[0] = -30;
        $r4[1] = 0;
        $r4[2] = 31;
        $r4[3] = 60;
        $r4[4] = 91;
        $r4[5] = 121;
        $r4[6] = 152;
        $r4[7] = 182;
        $r4[8] = 213;
        $r4[9] = 244;
        $r4[10] = 274;
        $r4[11] = 305;
        $r4[12] = 335;
        <sun.util.calendar.BaseCalendar: int[] ACCUMULATED_DAYS_IN_MONTH_LEAP> = $r4;
        return;
    }
}
