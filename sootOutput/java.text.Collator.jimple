public abstract class java.text.Collator extends java.lang.Object implements java.util.Comparator, java.lang.Cloneable
{
    public static final int PRIMARY;
    public static final int SECONDARY;
    public static final int TERTIARY;
    public static final int IDENTICAL;
    public static final int NO_DECOMPOSITION;
    public static final int CANONICAL_DECOMPOSITION;
    public static final int FULL_DECOMPOSITION;
    private int strength;
    private int decmp;
    private static sun.misc.SoftCache cache;
    static final int LESS;
    static final int EQUAL;
    static final int GREATER;

    public static synchronized java.text.Collator getInstance()
    {
        java.util.Locale $r0;
        java.text.Collator $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();
        $r1 = staticinvoke <java.text.Collator: java.text.Collator getInstance(java.util.Locale)>($r0);
        return $r1;
    }

    public static synchronized java.text.Collator getInstance(java.util.Locale)
    {
        java.util.Locale r0;
        sun.misc.SoftCache $r1, $r27;
        java.text.Collator r2, r4, $r9, $r30;
        sun.util.LocaleServiceProviderPool r3;
        java.util.ResourceBundle r5;
        java.text.ParseException r6, $r22, r23, $r26;
        java.lang.Object $r7, $r8, $r12, $r29;
        boolean $z0;
        java.text.Collator$CollatorGetter $r10;
        java.lang.Object[] $r11;
        java.lang.String r13, $r18, $r21, $r25;
        java.util.MissingResourceException $r14, r15;
        java.text.RuleBasedCollator $r16, $r24;
        java.lang.StringBuilder $r17, $r19, $r20;

        r0 := @parameter0: java.util.Locale;
        $r1 = <java.text.Collator: sun.misc.SoftCache cache>;
        $r7 = virtualinvoke $r1.<sun.misc.SoftCache: java.lang.Object get(java.lang.Object)>(r0);
        r2 = (java.text.Collator) $r7;
        if r2 == null goto label0;

        $r8 = virtualinvoke r2.<java.text.Collator: java.lang.Object clone()>();
        $r9 = (java.text.Collator) $r8;
        return $r9;

     label0:
        r3 = staticinvoke <sun.util.LocaleServiceProviderPool: sun.util.LocaleServiceProviderPool getPool(java.lang.Class)>(class "java/text/spi/CollatorProvider");
        $z0 = virtualinvoke r3.<sun.util.LocaleServiceProviderPool: boolean hasProviders()>();
        if $z0 == 0 goto label1;

        $r10 = staticinvoke <java.text.Collator$CollatorGetter: java.text.Collator$CollatorGetter access$000()>();
        $r11 = newarray (java.lang.Object)[1];
        $r11[0] = r0;
        $r12 = virtualinvoke r3.<sun.util.LocaleServiceProviderPool: java.lang.Object getLocalizedObject(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,java.lang.Object[])>($r10, r0, $r11);
        r4 = (java.text.Collator) $r12;
        if r4 == null goto label1;

        return r4;

     label1:
        r13 = "";

     label2:
        r5 = staticinvoke <sun.util.resources.LocaleData: java.util.ResourceBundle getCollationData(java.util.Locale)>(r0);
        r13 = virtualinvoke r5.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Rule");

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;
        r15 = $r14;

     label5:
        $r16 = new java.text.RuleBasedCollator;
        $r17 = new java.lang.StringBuilder;
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
        $r18 = <java.text.CollationRules: java.lang.String DEFAULTRULES>;
        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r16.<java.text.RuleBasedCollator: void <init>(java.lang.String,int)>($r21, 1);
        r2 = $r16;

     label6:
        goto label11;

     label7:
        $r22 := @caughtexception;
        r23 = $r22;

     label8:
        $r24 = new java.text.RuleBasedCollator;
        $r25 = <java.text.CollationRules: java.lang.String DEFAULTRULES>;
        specialinvoke $r24.<java.text.RuleBasedCollator: void <init>(java.lang.String)>($r25);
        r2 = $r24;

     label9:
        goto label11;

     label10:
        $r26 := @caughtexception;
        r6 = $r26;

     label11:
        virtualinvoke r2.<java.text.Collator: void setDecomposition(int)>(0);
        $r27 = <java.text.Collator: sun.misc.SoftCache cache>;
        virtualinvoke $r27.<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2);
        $r29 = virtualinvoke r2.<java.text.Collator: java.lang.Object clone()>();
        $r30 = (java.text.Collator) $r29;
        return $r30;

        catch java.util.MissingResourceException from label2 to label3 with label4;
        catch java.text.ParseException from label5 to label6 with label7;
        catch java.text.ParseException from label8 to label9 with label10;
    }

    public abstract int compare(java.lang.String, java.lang.String);

    public int compare(java.lang.Object, java.lang.Object)
    {
        java.text.Collator r0;
        java.lang.Object r1, r2;
        java.lang.String $r3, $r4;
        int $i0;

        r0 := @this: java.text.Collator;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r3 = (java.lang.String) r1;
        $r4 = (java.lang.String) r2;
        $i0 = virtualinvoke r0.<java.text.Collator: int compare(java.lang.String,java.lang.String)>($r3, $r4);
        return $i0;
    }

    public abstract java.text.CollationKey getCollationKey(java.lang.String);

    public boolean equals(java.lang.String, java.lang.String)
    {
        java.text.Collator r0;
        java.lang.String r1, r2;
        int $i0;
        boolean $z0;

        r0 := @this: java.text.Collator;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        $i0 = virtualinvoke r0.<java.text.Collator: int compare(java.lang.String,java.lang.String)>(r1, r2);
        if $i0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public synchronized int getStrength()
    {
        java.text.Collator r0;
        int $i0;

        r0 := @this: java.text.Collator;
        $i0 = r0.<java.text.Collator: int strength>;
        return $i0;
    }

    public synchronized void setStrength(int)
    {
        java.text.Collator r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.text.Collator;
        i0 := @parameter0: int;
        if i0 == 0 goto label0;

        if i0 == 1 goto label0;

        if i0 == 2 goto label0;

        if i0 == 3 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incorrect comparison level.");
        throw $r1;

     label0:
        r0.<java.text.Collator: int strength> = i0;
        return;
    }

    public synchronized int getDecomposition()
    {
        java.text.Collator r0;
        int $i0;

        r0 := @this: java.text.Collator;
        $i0 = r0.<java.text.Collator: int decmp>;
        return $i0;
    }

    public synchronized void setDecomposition(int)
    {
        java.text.Collator r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.text.Collator;
        i0 := @parameter0: int;
        if i0 == 0 goto label0;

        if i0 == 1 goto label0;

        if i0 == 2 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wrong decomposition mode.");
        throw $r1;

     label0:
        r0.<java.text.Collator: int decmp> = i0;
        return;
    }

    public static synchronized java.util.Locale[] getAvailableLocales()
    {
        sun.util.LocaleServiceProviderPool r0;
        java.util.Locale[] $r1;

        r0 = staticinvoke <sun.util.LocaleServiceProviderPool: sun.util.LocaleServiceProviderPool getPool(java.lang.Class)>(class "java/text/spi/CollatorProvider");
        $r1 = virtualinvoke r0.<sun.util.LocaleServiceProviderPool: java.util.Locale[] getAvailableLocales()>();
        return $r1;
    }

    public java.lang.Object clone()
    {
        java.text.Collator r0, $r3;
        java.lang.CloneNotSupportedException r1, $r4;
        java.lang.Object $r2;
        java.lang.InternalError $r5;

        r0 := @this: java.text.Collator;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (java.text.Collator) $r2;

     label1:
        return $r3;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        $r5 = new java.lang.InternalError;
        specialinvoke $r5.<java.lang.InternalError: void <init>()>();
        throw $r5;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    public boolean equals(java.lang.Object)
    {
        java.text.Collator r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: java.text.Collator;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        if r1 != null goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        if $r3 == $r4 goto label2;

        return 0;

     label2:
        r2 = (java.text.Collator) r1;
        $i0 = r0.<java.text.Collator: int strength>;
        $i1 = r2.<java.text.Collator: int strength>;
        if $i0 != $i1 goto label3;

        $i2 = r0.<java.text.Collator: int decmp>;
        $i3 = r2.<java.text.Collator: int decmp>;
        if $i2 != $i3 goto label3;

        $z0 = 1;
        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public abstract int hashCode();

    protected void <init>()
    {
        java.text.Collator r0;

        r0 := @this: java.text.Collator;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.text.Collator: int strength> = 0;
        r0.<java.text.Collator: int decmp> = 0;
        r0.<java.text.Collator: int strength> = 2;
        r0.<java.text.Collator: int decmp> = 1;
        return;
    }

    static sun.misc.SoftCache access$100()
    {
        sun.misc.SoftCache $r0;

        $r0 = <java.text.Collator: sun.misc.SoftCache cache>;
        return $r0;
    }

    static void <clinit>()
    {
        sun.misc.SoftCache $r0;

        $r0 = new sun.misc.SoftCache;
        specialinvoke $r0.<sun.misc.SoftCache: void <init>()>();
        <java.text.Collator: sun.misc.SoftCache cache> = $r0;
        return;
    }
}
