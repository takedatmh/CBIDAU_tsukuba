class java.util.ArrayList$SubList extends java.util.AbstractList implements java.util.RandomAccess
{
    private final java.util.AbstractList parent;
    private final int parentOffset;
    private final int offset;
    int size;
    final java.util.ArrayList this$0;

    void <init>(java.util.ArrayList, java.util.AbstractList, int, int, int)
    {
        java.util.ArrayList$SubList r0;
        java.util.ArrayList r1;
        java.util.AbstractList r2;
        int i0, i1, i2, $i3, $i4, $i5;

        r0 := @this: java.util.ArrayList$SubList;
        r1 := @parameter0: java.util.ArrayList;
        r2 := @parameter1: java.util.AbstractList;
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        i2 := @parameter4: int;
        r0.<java.util.ArrayList$SubList: java.util.ArrayList this$0> = r1;
        specialinvoke r0.<java.util.AbstractList: void <init>()>();
        r0.<java.util.ArrayList$SubList: java.util.AbstractList parent> = r2;
        r0.<java.util.ArrayList$SubList: int parentOffset> = i1;
        $i3 = i0 + i1;
        r0.<java.util.ArrayList$SubList: int offset> = $i3;
        $i4 = i2 - i1;
        r0.<java.util.ArrayList$SubList: int size> = $i4;
        $i5 = r1.<java.util.ArrayList: int modCount>;
        r0.<java.util.ArrayList$SubList: int modCount> = $i5;
        return;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        java.util.ArrayList$SubList r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1, r2;
        java.util.ArrayList $r3, $r4;
        java.lang.Object[] $r5;

        r0 := @this: java.util.ArrayList$SubList;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        specialinvoke r0.<java.util.ArrayList$SubList: void rangeCheck(int)>(i0);
        specialinvoke r0.<java.util.ArrayList$SubList: void checkForComodification()>();
        $r3 = r0.<java.util.ArrayList$SubList: java.util.ArrayList this$0>;
        $i1 = r0.<java.util.ArrayList$SubList: int offset>;
        $i2 = $i1 + i0;
        r2 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object elementData(int)>($i2);
        $r4 = r0.<java.util.ArrayList$SubList: java.util.ArrayList this$0>;
        $r5 = staticinvoke <java.util.ArrayList: java.lang.Object[] access$200(java.util.ArrayList)>($r4);
        $i3 = r0.<java.util.ArrayList$SubList: int offset>;
        $i4 = $i3 + i0;
        $r5[$i4] = r1;
        return r2;
    }

    public java.lang.Object get(int)
    {
        java.util.ArrayList$SubList r0;
        int i0, $i1, $i2;
        java.util.ArrayList $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.ArrayList$SubList;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.ArrayList$SubList: void rangeCheck(int)>(i0);
        specialinvoke r0.<java.util.ArrayList$SubList: void checkForComodification()>();
        $r1 = r0.<java.util.ArrayList$SubList: java.util.ArrayList this$0>;
        $i1 = r0.<java.util.ArrayList$SubList: int offset>;
        $i2 = $i1 + i0;
        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object elementData(int)>($i2);
        return $r2;
    }

    public int size()
    {
        java.util.ArrayList$SubList r0;
        int $i0;

        r0 := @this: java.util.ArrayList$SubList;
        specialinvoke r0.<java.util.ArrayList$SubList: void checkForComodification()>();
        $i0 = r0.<java.util.ArrayList$SubList: int size>;
        return $i0;
    }

    public void add(int, java.lang.Object)
    {
        java.util.ArrayList$SubList r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object r1;
        java.util.AbstractList $r2, $r3;

        r0 := @this: java.util.ArrayList$SubList;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        specialinvoke r0.<java.util.ArrayList$SubList: void rangeCheckForAdd(int)>(i0);
        specialinvoke r0.<java.util.ArrayList$SubList: void checkForComodification()>();
        $r2 = r0.<java.util.ArrayList$SubList: java.util.AbstractList parent>;
        $i1 = r0.<java.util.ArrayList$SubList: int parentOffset>;
        $i2 = $i1 + i0;
        virtualinvoke $r2.<java.util.AbstractList: void add(int,java.lang.Object)>($i2, r1);
        $r3 = r0.<java.util.ArrayList$SubList: java.util.AbstractList parent>;
        $i3 = $r3.<java.util.AbstractList: int modCount>;
        r0.<java.util.ArrayList$SubList: int modCount> = $i3;
        $i4 = r0.<java.util.ArrayList$SubList: int size>;
        $i5 = $i4 + 1;
        r0.<java.util.ArrayList$SubList: int size> = $i5;
        return;
    }

    public java.lang.Object remove(int)
    {
        java.util.ArrayList$SubList r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object r1;
        java.util.AbstractList $r2, $r3;

        r0 := @this: java.util.ArrayList$SubList;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.ArrayList$SubList: void rangeCheck(int)>(i0);
        specialinvoke r0.<java.util.ArrayList$SubList: void checkForComodification()>();
        $r2 = r0.<java.util.ArrayList$SubList: java.util.AbstractList parent>;
        $i1 = r0.<java.util.ArrayList$SubList: int parentOffset>;
        $i2 = $i1 + i0;
        r1 = virtualinvoke $r2.<java.util.AbstractList: java.lang.Object remove(int)>($i2);
        $r3 = r0.<java.util.ArrayList$SubList: java.util.AbstractList parent>;
        $i3 = $r3.<java.util.AbstractList: int modCount>;
        r0.<java.util.ArrayList$SubList: int modCount> = $i3;
        $i4 = r0.<java.util.ArrayList$SubList: int size>;
        $i5 = $i4 - 1;
        r0.<java.util.ArrayList$SubList: int size> = $i5;
        return r1;
    }

    protected void removeRange(int, int)
    {
        java.util.ArrayList$SubList r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.AbstractList $r1, $r2;

        r0 := @this: java.util.ArrayList$SubList;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        specialinvoke r0.<java.util.ArrayList$SubList: void checkForComodification()>();
        $r1 = r0.<java.util.ArrayList$SubList: java.util.AbstractList parent>;
        $i2 = r0.<java.util.ArrayList$SubList: int parentOffset>;
        $i3 = $i2 + i0;
        $i4 = r0.<java.util.ArrayList$SubList: int parentOffset>;
        $i5 = $i4 + i1;
        virtualinvoke $r1.<java.util.AbstractList: void removeRange(int,int)>($i3, $i5);
        $r2 = r0.<java.util.ArrayList$SubList: java.util.AbstractList parent>;
        $i6 = $r2.<java.util.AbstractList: int modCount>;
        r0.<java.util.ArrayList$SubList: int modCount> = $i6;
        $i7 = r0.<java.util.ArrayList$SubList: int size>;
        $i8 = i1 - i0;
        $i9 = $i7 - $i8;
        r0.<java.util.ArrayList$SubList: int size> = $i9;
        return;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.ArrayList$SubList r0;
        java.util.Collection r1;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.ArrayList$SubList;
        r1 := @parameter0: java.util.Collection;
        $i0 = r0.<java.util.ArrayList$SubList: int size>;
        $z0 = virtualinvoke r0.<java.util.ArrayList$SubList: boolean addAll(int,java.util.Collection)>($i0, r1);
        return $z0;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.util.ArrayList$SubList r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.util.Collection r1;
        java.util.AbstractList $r2, $r3;

        r0 := @this: java.util.ArrayList$SubList;
        i0 := @parameter0: int;
        r1 := @parameter1: java.util.Collection;
        specialinvoke r0.<java.util.ArrayList$SubList: void rangeCheckForAdd(int)>(i0);
        i1 = interfaceinvoke r1.<java.util.Collection: int size()>();
        if i1 != 0 goto label0;

        return 0;

     label0:
        specialinvoke r0.<java.util.ArrayList$SubList: void checkForComodification()>();
        $r2 = r0.<java.util.ArrayList$SubList: java.util.AbstractList parent>;
        $i2 = r0.<java.util.ArrayList$SubList: int parentOffset>;
        $i3 = $i2 + i0;
        virtualinvoke $r2.<java.util.AbstractList: boolean addAll(int,java.util.Collection)>($i3, r1);
        $r3 = r0.<java.util.ArrayList$SubList: java.util.AbstractList parent>;
        $i4 = $r3.<java.util.AbstractList: int modCount>;
        r0.<java.util.ArrayList$SubList: int modCount> = $i4;
        $i5 = r0.<java.util.ArrayList$SubList: int size>;
        $i6 = $i5 + i1;
        r0.<java.util.ArrayList$SubList: int size> = $i6;
        return 1;
    }

    public java.util.Iterator iterator()
    {
        java.util.ArrayList$SubList r0;
        java.util.ListIterator $r1;

        r0 := @this: java.util.ArrayList$SubList;
        $r1 = virtualinvoke r0.<java.util.ArrayList$SubList: java.util.ListIterator listIterator()>();
        return $r1;
    }

    public java.util.ListIterator listIterator(int)
    {
        java.util.ArrayList$SubList r0;
        int i0, i1;
        java.util.ArrayList$SubList$1 $r1;

        r0 := @this: java.util.ArrayList$SubList;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.ArrayList$SubList: void checkForComodification()>();
        specialinvoke r0.<java.util.ArrayList$SubList: void rangeCheckForAdd(int)>(i0);
        i1 = r0.<java.util.ArrayList$SubList: int offset>;
        $r1 = new java.util.ArrayList$SubList$1;
        specialinvoke $r1.<java.util.ArrayList$SubList$1: void <init>(java.util.ArrayList$SubList,int,int)>(r0, i0, i1);
        return $r1;
    }

    public java.util.List subList(int, int)
    {
        java.util.ArrayList$SubList r0, $r1;
        int i0, i1, $i2, $i3;
        java.util.ArrayList $r2;

        r0 := @this: java.util.ArrayList$SubList;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i2 = r0.<java.util.ArrayList$SubList: int size>;
        staticinvoke <java.util.ArrayList: void subListRangeCheck(int,int,int)>(i0, i1, $i2);
        $r1 = new java.util.ArrayList$SubList;
        $r2 = r0.<java.util.ArrayList$SubList: java.util.ArrayList this$0>;
        $i3 = r0.<java.util.ArrayList$SubList: int offset>;
        specialinvoke $r1.<java.util.ArrayList$SubList: void <init>(java.util.ArrayList,java.util.AbstractList,int,int,int)>($r2, r0, $i3, i0, i1);
        return $r1;
    }

    private void rangeCheck(int)
    {
        java.util.ArrayList$SubList r0;
        int i0, $i1;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.String $r2;

        r0 := @this: java.util.ArrayList$SubList;
        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        $i1 = r0.<java.util.ArrayList$SubList: int size>;
        if i0 < $i1 goto label1;

     label0:
        $r1 = new java.lang.IndexOutOfBoundsException;
        $r2 = specialinvoke r0.<java.util.ArrayList$SubList: java.lang.String outOfBoundsMsg(int)>(i0);
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r2);
        throw $r1;

     label1:
        return;
    }

    private void rangeCheckForAdd(int)
    {
        java.util.ArrayList$SubList r0;
        int i0, $i1;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.String $r2;

        r0 := @this: java.util.ArrayList$SubList;
        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        $i1 = r0.<java.util.ArrayList$SubList: int size>;
        if i0 <= $i1 goto label1;

     label0:
        $r1 = new java.lang.IndexOutOfBoundsException;
        $r2 = specialinvoke r0.<java.util.ArrayList$SubList: java.lang.String outOfBoundsMsg(int)>(i0);
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r2);
        throw $r1;

     label1:
        return;
    }

    private java.lang.String outOfBoundsMsg(int)
    {
        java.util.ArrayList$SubList r0;
        int i0, $i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: java.util.ArrayList$SubList;
        i0 := @parameter0: int;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Size: ");
        $i1 = r0.<java.util.ArrayList$SubList: int size>;
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r6;
    }

    private void checkForComodification()
    {
        java.util.ArrayList$SubList r0;
        java.util.ArrayList $r1;
        int $i0, $i1;
        java.util.ConcurrentModificationException $r2;

        r0 := @this: java.util.ArrayList$SubList;
        $r1 = r0.<java.util.ArrayList$SubList: java.util.ArrayList this$0>;
        $i0 = $r1.<java.util.ArrayList: int modCount>;
        $i1 = r0.<java.util.ArrayList$SubList: int modCount>;
        if $i0 == $i1 goto label0;

        $r2 = new java.util.ConcurrentModificationException;
        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r2;

     label0:
        return;
    }
}
