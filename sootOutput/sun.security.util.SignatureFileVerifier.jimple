public class sun.security.util.SignatureFileVerifier extends java.lang.Object
{
    private static final sun.security.util.Debug debug;
    private java.util.ArrayList signerCache;
    private static final java.lang.String ATTR_DIGEST;
    private sun.security.pkcs.PKCS7 block;
    private byte[] sfBytes;
    private java.lang.String name;
    private sun.security.util.ManifestDigester md;
    private java.util.HashMap createdDigests;
    private boolean workaround;
    private java.security.cert.CertificateFactory certificateFactory;
    private static final char[] hexc;

    public void <init>(java.util.ArrayList, sun.security.util.ManifestDigester, java.lang.String, byte[]) throws java.io.IOException, java.security.cert.CertificateException
    {
        sun.security.util.SignatureFileVerifier r0;
        java.util.ArrayList r1;
        sun.security.util.ManifestDigester r2;
        java.lang.String r3, $r13, $r15;
        byte[] r4, $r10;
        java.lang.Object r5;
        java.lang.Throwable r6, $r12;
        sun.security.pkcs.PKCS7 $r7, $r8;
        sun.security.pkcs.ContentInfo $r9;
        java.security.cert.CertificateFactory $r11;
        int $i0;
        java.util.Locale $r14;

        r0 := @this: sun.security.util.SignatureFileVerifier;
        r1 := @parameter0: java.util.ArrayList;
        r2 := @parameter1: sun.security.util.ManifestDigester;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: byte[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.security.util.SignatureFileVerifier: boolean workaround> = 0;
        r0.<sun.security.util.SignatureFileVerifier: java.security.cert.CertificateFactory certificateFactory> = null;
        r5 = null;

     label0:
        r5 = staticinvoke <sun.security.jca.Providers: java.lang.Object startJarVerification()>();
        $r7 = new sun.security.pkcs.PKCS7;
        specialinvoke $r7.<sun.security.pkcs.PKCS7: void <init>(byte[])>(r4);
        r0.<sun.security.util.SignatureFileVerifier: sun.security.pkcs.PKCS7 block> = $r7;
        $r8 = r0.<sun.security.util.SignatureFileVerifier: sun.security.pkcs.PKCS7 block>;
        $r9 = virtualinvoke $r8.<sun.security.pkcs.PKCS7: sun.security.pkcs.ContentInfo getContentInfo()>();
        $r10 = virtualinvoke $r9.<sun.security.pkcs.ContentInfo: byte[] getData()>();
        r0.<sun.security.util.SignatureFileVerifier: byte[] sfBytes> = $r10;
        $r11 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X509");
        r0.<sun.security.util.SignatureFileVerifier: java.security.cert.CertificateFactory certificateFactory> = $r11;

     label1:
        staticinvoke <sun.security.jca.Providers: void stopJarVerification(java.lang.Object)>(r5);
        goto label5;

     label2:
        $r12 := @caughtexception;

     label3:
        r6 = $r12;

     label4:
        staticinvoke <sun.security.jca.Providers: void stopJarVerification(java.lang.Object)>(r5);
        throw r6;

     label5:
        $i0 = virtualinvoke r3.<java.lang.String: int lastIndexOf(java.lang.String)>(".");
        $r13 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);
        $r14 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r15 = virtualinvoke $r13.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r14);
        r0.<sun.security.util.SignatureFileVerifier: java.lang.String name> = $r15;
        r0.<sun.security.util.SignatureFileVerifier: sun.security.util.ManifestDigester md> = r2;
        r0.<sun.security.util.SignatureFileVerifier: java.util.ArrayList signerCache> = r1;
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public boolean needSignatureFileBytes()
    {
        sun.security.util.SignatureFileVerifier r0;
        byte[] $r1;
        boolean $z0;

        r0 := @this: sun.security.util.SignatureFileVerifier;
        $r1 = r0.<sun.security.util.SignatureFileVerifier: byte[] sfBytes>;
        if $r1 != null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean needSignatureFile(java.lang.String)
    {
        sun.security.util.SignatureFileVerifier r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: sun.security.util.SignatureFileVerifier;
        r1 := @parameter0: java.lang.String;
        $r2 = r0.<sun.security.util.SignatureFileVerifier: java.lang.String name>;
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);
        return $z0;
    }

    public void setSignatureFile(byte[])
    {
        sun.security.util.SignatureFileVerifier r0;
        byte[] r1;

        r0 := @this: sun.security.util.SignatureFileVerifier;
        r1 := @parameter0: byte[];
        r0.<sun.security.util.SignatureFileVerifier: byte[] sfBytes> = r1;
        return;
    }

    public static boolean isBlockOrSF(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.String;
        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".SF");
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".DSA");
        if $z1 != 0 goto label0;

        $z2 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".RSA");
        if $z2 != 0 goto label0;

        $z3 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".EC");
        if $z3 == 0 goto label1;

     label0:
        return 1;

     label1:
        return 0;
    }

    public static boolean isSigningRelated(java.lang.String)
    {
        java.lang.String r0, r2, r3, r4;
        java.util.Locale $r1;
        int i0, i1, $i3, $i4, $i5, $i6, $i7;
        char c2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.String;
        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;
        r3 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r1);
        $z0 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("META-INF/");
        if $z0 != 0 goto label0;

        return 0;

     label0:
        r4 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(9);
        $i3 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(47);
        if $i3 == -1 goto label1;

        return 0;

     label1:
        $z1 = staticinvoke <sun.security.util.SignatureFileVerifier: boolean isBlockOrSF(java.lang.String)>(r4);
        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("MANIFEST.MF");
        if $z2 == 0 goto label3;

     label2:
        return 1;

     label3:
        $z3 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("SIG-");
        if $z3 == 0 goto label11;

        i0 = virtualinvoke r4.<java.lang.String: int lastIndexOf(int)>(46);
        if i0 == -1 goto label10;

        $i4 = i0 + 1;
        r2 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i4);
        $i5 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i5 > 3 goto label4;

        $i6 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i6 >= 1 goto label5;

     label4:
        return 0;

     label5:
        i1 = 0;

     label6:
        $i7 = virtualinvoke r2.<java.lang.String: int length()>();
        if i1 >= $i7 goto label10;

        c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i1);
        if c2 < 65 goto label7;

        if c2 <= 90 goto label9;

     label7:
        if c2 < 48 goto label8;

        if c2 <= 57 goto label9;

     label8:
        return 0;

     label9:
        i1 = i1 + 1;
        goto label6;

     label10:
        return 1;

     label11:
        return 0;
    }

    private java.security.MessageDigest getDigest(java.lang.String)
    {
        sun.security.util.SignatureFileVerifier r0;
        java.lang.String r1;
        java.util.HashMap $r2, $r5, $r6, $r8;
        java.security.MessageDigest r3;
        java.security.NoSuchAlgorithmException r4, $r10;
        java.lang.Object $r7;

        r0 := @this: sun.security.util.SignatureFileVerifier;
        r1 := @parameter0: java.lang.String;
        $r5 = r0.<sun.security.util.SignatureFileVerifier: java.util.HashMap createdDigests>;
        if $r5 != null goto label0;

        $r2 = new java.util.HashMap;
        specialinvoke $r2.<java.util.HashMap: void <init>()>();
        r0.<sun.security.util.SignatureFileVerifier: java.util.HashMap createdDigests> = $r2;

     label0:
        $r6 = r0.<sun.security.util.SignatureFileVerifier: java.util.HashMap createdDigests>;
        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);
        r3 = (java.security.MessageDigest) $r7;
        if r3 != null goto label4;

     label1:
        r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r1);
        $r8 = r0.<sun.security.util.SignatureFileVerifier: java.util.HashMap createdDigests>;
        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;
        r4 = $r10;

     label4:
        return r3;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public void process(java.util.Hashtable, java.util.List) throws java.io.IOException, java.security.SignatureException, java.security.NoSuchAlgorithmException, java.util.jar.JarException, java.security.cert.CertificateException
    {
        sun.security.util.SignatureFileVerifier r0;
        java.util.Hashtable r1;
        java.util.List r2;
        java.lang.Object r3;
        java.lang.Throwable r4, $r5;

        r0 := @this: sun.security.util.SignatureFileVerifier;
        r1 := @parameter0: java.util.Hashtable;
        r2 := @parameter1: java.util.List;
        r3 = null;

     label0:
        r3 = staticinvoke <sun.security.jca.Providers: java.lang.Object startJarVerification()>();
        specialinvoke r0.<sun.security.util.SignatureFileVerifier: void processImpl(java.util.Hashtable,java.util.List)>(r1, r2);

     label1:
        staticinvoke <sun.security.jca.Providers: void stopJarVerification(java.lang.Object)>(r3);
        goto label5;

     label2:
        $r5 := @caughtexception;

     label3:
        r4 = $r5;

     label4:
        staticinvoke <sun.security.jca.Providers: void stopJarVerification(java.lang.Object)>(r3);
        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    private void processImpl(java.util.Hashtable, java.util.List) throws java.io.IOException, java.security.SignatureException, java.security.NoSuchAlgorithmException, java.util.jar.JarException, java.security.cert.CertificateException
    {
        sun.security.util.SignatureFileVerifier r0;
        java.util.Hashtable r1;
        java.util.List r2;
        java.util.jar.Manifest $r3, r4;
        java.lang.String r5, r11, $r21, $r23, $r41, $r47;
        sun.security.pkcs.SignerInfo[] r6;
        sun.misc.BASE64Decoder r7, $r24;
        java.security.CodeSigner[] r8;
        java.util.Iterator r9;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Map$Entry r10;
        java.io.ByteArrayInputStream $r12;
        byte[] $r13, $r17;
        java.util.jar.Attributes $r14, $r34;
        java.util.jar.Attributes$Name $r15;
        sun.security.pkcs.PKCS7 $r16, $r25;
        java.lang.SecurityException $r18, $r30;
        java.lang.StringBuilder $r19, $r20, $r22, $r38, $r39, $r40, $r44, $r45, $r46;
        java.util.Map $r26;
        java.util.Set $r27;
        sun.security.util.ManifestDigester $r28, $r29, $r35;
        java.lang.Object $r31, $r32, $r33;
        sun.security.util.Debug $r36, $r37, $r42, $r43;

        r0 := @this: sun.security.util.SignatureFileVerifier;
        r1 := @parameter0: java.util.Hashtable;
        r2 := @parameter1: java.util.List;
        $r3 = new java.util.jar.Manifest;
        specialinvoke $r3.<java.util.jar.Manifest: void <init>()>();
        r4 = $r3;
        $r12 = new java.io.ByteArrayInputStream;
        $r13 = r0.<sun.security.util.SignatureFileVerifier: byte[] sfBytes>;
        specialinvoke $r12.<java.io.ByteArrayInputStream: void <init>(byte[])>($r13);
        virtualinvoke r4.<java.util.jar.Manifest: void read(java.io.InputStream)>($r12);
        $r14 = virtualinvoke r4.<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>();
        $r15 = <java.util.jar.Attributes$Name: java.util.jar.Attributes$Name SIGNATURE_VERSION>;
        r5 = virtualinvoke $r14.<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes$Name)>($r15);
        if r5 == null goto label0;

        $z1 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("1.0");
        if $z1 != 0 goto label1;

     label0:
        return;

     label1:
        $r16 = r0.<sun.security.util.SignatureFileVerifier: sun.security.pkcs.PKCS7 block>;
        $r17 = r0.<sun.security.util.SignatureFileVerifier: byte[] sfBytes>;
        r6 = virtualinvoke $r16.<sun.security.pkcs.PKCS7: sun.security.pkcs.SignerInfo[] verify(byte[])>($r17);
        if r6 != null goto label2;

        $r18 = new java.lang.SecurityException;
        $r19 = new java.lang.StringBuilder;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot verify signature block file ");
        $r21 = r0.<sun.security.util.SignatureFileVerifier: java.lang.String name>;
        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r18.<java.lang.SecurityException: void <init>(java.lang.String)>($r23);
        throw $r18;

     label2:
        $r24 = new sun.misc.BASE64Decoder;
        specialinvoke $r24.<sun.misc.BASE64Decoder: void <init>()>();
        r7 = $r24;
        $r25 = r0.<sun.security.util.SignatureFileVerifier: sun.security.pkcs.PKCS7 block>;
        r8 = specialinvoke r0.<sun.security.util.SignatureFileVerifier: java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[],sun.security.pkcs.PKCS7)>(r6, $r25);
        if r8 != null goto label3;

        return;

     label3:
        $r26 = virtualinvoke r4.<java.util.jar.Manifest: java.util.Map getEntries()>();
        $r27 = interfaceinvoke $r26.<java.util.Map: java.util.Set entrySet()>();
        r9 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();
        $r28 = r0.<sun.security.util.SignatureFileVerifier: sun.security.util.ManifestDigester md>;
        z0 = specialinvoke r0.<sun.security.util.SignatureFileVerifier: boolean verifyManifestHash(java.util.jar.Manifest,sun.security.util.ManifestDigester,sun.misc.BASE64Decoder,java.util.List)>(r4, $r28, r7, r2);
        if z0 != 0 goto label4;

        $r29 = r0.<sun.security.util.SignatureFileVerifier: sun.security.util.ManifestDigester md>;
        $z2 = specialinvoke r0.<sun.security.util.SignatureFileVerifier: boolean verifyManifestMainAttrs(java.util.jar.Manifest,sun.security.util.ManifestDigester,sun.misc.BASE64Decoder)>(r4, $r29, r7);
        if $z2 != 0 goto label4;

        $r30 = new java.lang.SecurityException;
        specialinvoke $r30.<java.lang.SecurityException: void <init>(java.lang.String)>("Invalid signature file digest for Manifest main attributes");
        throw $r30;

     label4:
        $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();
        if $z3 == 0 goto label10;

        $r31 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();
        r10 = (java.util.Map$Entry) $r31;
        $r32 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();
        r11 = (java.lang.String) $r32;
        if z0 != 0 goto label5;

        $r33 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();
        $r34 = (java.util.jar.Attributes) $r33;
        $r35 = r0.<sun.security.util.SignatureFileVerifier: sun.security.util.ManifestDigester md>;
        $z4 = specialinvoke r0.<sun.security.util.SignatureFileVerifier: boolean verifySection(java.util.jar.Attributes,java.lang.String,sun.security.util.ManifestDigester,sun.misc.BASE64Decoder)>($r34, r11, $r35, r7);
        if $z4 == 0 goto label8;

     label5:
        $z5 = virtualinvoke r11.<java.lang.String: boolean startsWith(java.lang.String)>("./");
        if $z5 == 0 goto label6;

        r11 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int)>(2);

     label6:
        $z6 = virtualinvoke r11.<java.lang.String: boolean startsWith(java.lang.String)>("/");
        if $z6 == 0 goto label7;

        r11 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int)>(1);

     label7:
        virtualinvoke r0.<sun.security.util.SignatureFileVerifier: void updateSigners(java.security.CodeSigner[],java.util.Hashtable,java.lang.String)>(r8, r1, r11);
        $r36 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        if $r36 == null goto label9;

        $r37 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        $r38 = new java.lang.StringBuilder;
        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();
        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("processSignature signed name = ");
        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);
        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r37.<sun.security.util.Debug: void println(java.lang.String)>($r41);
        goto label9;

     label8:
        $r42 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        if $r42 == null goto label9;

        $r43 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        $r44 = new java.lang.StringBuilder;
        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();
        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("processSignature unsigned name = ");
        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);
        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r43.<sun.security.util.Debug: void println(java.lang.String)>($r47);

     label9:
        goto label4;

     label10:
        virtualinvoke r0.<sun.security.util.SignatureFileVerifier: void updateSigners(java.security.CodeSigner[],java.util.Hashtable,java.lang.String)>(r8, r1, "META-INF/MANIFEST.MF");
        return;
    }

    private boolean verifyManifestHash(java.util.jar.Manifest, sun.security.util.ManifestDigester, sun.misc.BASE64Decoder, java.util.List) throws java.io.IOException
    {
        sun.security.util.SignatureFileVerifier r0;
        java.util.jar.Manifest r1;
        sun.security.util.ManifestDigester r2;
        sun.misc.BASE64Decoder r3;
        java.util.List r4;
        java.util.jar.Attributes r5;
        boolean z0, $z1, $z2, $z5;
        java.util.Iterator r6;
        java.util.Map$Entry r7;
        java.lang.String r8, r10, $r17, $r20, $r25, $r27, $r31, $r33, $r37, $r39;
        java.util.Locale $r9;
        java.security.MessageDigest r11;
        byte[] r12, r13;
        java.util.Set $r14;
        java.lang.Object $r15, $r16, $r18, $r19;
        int $i0, $i1;
        sun.security.util.Debug $r21, $r22, $r28, $r34, $r40;
        java.lang.StringBuilder $r23, $r24, $r26, $r29, $r30, $r32, $r35, $r36, $r38;

        r0 := @this: sun.security.util.SignatureFileVerifier;
        r1 := @parameter0: java.util.jar.Manifest;
        r2 := @parameter1: sun.security.util.ManifestDigester;
        r3 := @parameter2: sun.misc.BASE64Decoder;
        r4 := @parameter3: java.util.List;
        r5 = virtualinvoke r1.<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>();
        z0 = 0;
        $r14 = virtualinvoke r5.<java.util.jar.Attributes: java.util.Set entrySet()>();
        r6 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label3;

        $r15 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();
        r7 = (java.util.Map$Entry) $r15;
        $r16 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();
        r8 = virtualinvoke $r16.<java.lang.Object: java.lang.String toString()>();
        $r9 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r17 = virtualinvoke r8.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r9);
        $z2 = virtualinvoke $r17.<java.lang.String: boolean endsWith(java.lang.String)>("-DIGEST-MANIFEST");
        if $z2 == 0 goto label2;

        $i0 = virtualinvoke r8.<java.lang.String: int length()>();
        $i1 = $i0 - 16;
        r10 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);
        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r8);
        $r18 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();
        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r18);
        r11 = specialinvoke r0.<sun.security.util.SignatureFileVerifier: java.security.MessageDigest getDigest(java.lang.String)>(r10);
        if r11 == null goto label2;

        r12 = virtualinvoke r2.<sun.security.util.ManifestDigester: byte[] manifestDigest(java.security.MessageDigest)>(r11);
        $r19 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();
        $r20 = (java.lang.String) $r19;
        r13 = virtualinvoke r3.<sun.misc.BASE64Decoder: byte[] decodeBuffer(java.lang.String)>($r20);
        $r21 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        if $r21 == null goto label1;

        $r22 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        $r23 = new java.lang.StringBuilder;
        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature File: Manifest digest ");
        $r25 = virtualinvoke r11.<java.security.MessageDigest: java.lang.String getAlgorithm()>();
        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r22.<sun.security.util.Debug: void println(java.lang.String)>($r27);
        $r28 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        $r29 = new java.lang.StringBuilder;
        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  sigfile  ");
        $r31 = staticinvoke <sun.security.util.SignatureFileVerifier: java.lang.String toHex(byte[])>(r13);
        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r28.<sun.security.util.Debug: void println(java.lang.String)>($r33);
        $r34 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        $r35 = new java.lang.StringBuilder;
        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();
        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  computed ");
        $r37 = staticinvoke <sun.security.util.SignatureFileVerifier: java.lang.String toHex(byte[])>(r12);
        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);
        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r34.<sun.security.util.Debug: void println(java.lang.String)>($r39);
        $r40 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        virtualinvoke $r40.<sun.security.util.Debug: void println()>();

     label1:
        $z5 = staticinvoke <java.security.MessageDigest: boolean isEqual(byte[],byte[])>(r12, r13);
        if $z5 == 0 goto label2;

        z0 = 1;

     label2:
        goto label0;

     label3:
        return z0;
    }

    private boolean verifyManifestMainAttrs(java.util.jar.Manifest, sun.security.util.ManifestDigester, sun.misc.BASE64Decoder) throws java.io.IOException
    {
        sun.security.util.SignatureFileVerifier r0;
        java.util.jar.Manifest r1;
        sun.security.util.ManifestDigester r2;
        sun.misc.BASE64Decoder r3;
        java.util.jar.Attributes r4;
        boolean z0, $z1, $z2, $z3;
        java.util.Iterator r5;
        java.util.Map$Entry r6;
        java.lang.String r7, $r9, r10, $r18, $r19, $r21, $r26, $r28, $r32, $r34, $r38, $r40;
        java.util.Locale $r8;
        java.security.MessageDigest r11;
        sun.security.util.ManifestDigester$Entry r12;
        byte[] r13, r14;
        java.util.Set $r15;
        java.lang.Object $r16, $r17, $r20;
        int $i0, $i1, $i2;
        sun.security.util.Debug $r22, $r23, $r29, $r35, $r41, $r42, $r43, $r44;
        java.lang.StringBuilder $r24, $r25, $r27, $r30, $r31, $r33, $r36, $r37, $r39;

        r0 := @this: sun.security.util.SignatureFileVerifier;
        r1 := @parameter0: java.util.jar.Manifest;
        r2 := @parameter1: sun.security.util.ManifestDigester;
        r3 := @parameter2: sun.misc.BASE64Decoder;
        r4 = virtualinvoke r1.<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>();
        z0 = 1;
        $r15 = virtualinvoke r4.<java.util.jar.Attributes: java.util.Set entrySet()>();
        r5 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label4;

        $r16 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        r6 = (java.util.Map$Entry) $r16;
        $r17 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();
        r7 = virtualinvoke $r17.<java.lang.Object: java.lang.String toString()>();
        $r8 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r18 = virtualinvoke r7.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r8);
        $r19 = <sun.security.util.SignatureFileVerifier: java.lang.String ATTR_DIGEST>;
        $z2 = virtualinvoke $r18.<java.lang.String: boolean endsWith(java.lang.String)>($r19);
        if $z2 == 0 goto label3;

        $i0 = virtualinvoke r7.<java.lang.String: int length()>();
        $r9 = <sun.security.util.SignatureFileVerifier: java.lang.String ATTR_DIGEST>;
        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();
        $i2 = $i0 - $i1;
        r10 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);
        r11 = specialinvoke r0.<sun.security.util.SignatureFileVerifier: java.security.MessageDigest getDigest(java.lang.String)>(r10);
        if r11 == null goto label3;

        r12 = virtualinvoke r2.<sun.security.util.ManifestDigester: sun.security.util.ManifestDigester$Entry get(java.lang.String,boolean)>("Manifest-Main-Attributes", 0);
        r13 = virtualinvoke r12.<sun.security.util.ManifestDigester$Entry: byte[] digest(java.security.MessageDigest)>(r11);
        $r20 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();
        $r21 = (java.lang.String) $r20;
        r14 = virtualinvoke r3.<sun.misc.BASE64Decoder: byte[] decodeBuffer(java.lang.String)>($r21);
        $r22 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        if $r22 == null goto label1;

        $r23 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        $r24 = new java.lang.StringBuilder;
        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature File: Manifest Main Attributes digest ");
        $r26 = virtualinvoke r11.<java.security.MessageDigest: java.lang.String getAlgorithm()>();
        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r23.<sun.security.util.Debug: void println(java.lang.String)>($r28);
        $r29 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        $r30 = new java.lang.StringBuilder;
        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  sigfile  ");
        $r32 = staticinvoke <sun.security.util.SignatureFileVerifier: java.lang.String toHex(byte[])>(r14);
        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r29.<sun.security.util.Debug: void println(java.lang.String)>($r34);
        $r35 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        $r36 = new java.lang.StringBuilder;
        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  computed ");
        $r38 = staticinvoke <sun.security.util.SignatureFileVerifier: java.lang.String toHex(byte[])>(r13);
        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);
        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r35.<sun.security.util.Debug: void println(java.lang.String)>($r40);
        $r41 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        virtualinvoke $r41.<sun.security.util.Debug: void println()>();

     label1:
        $z3 = staticinvoke <java.security.MessageDigest: boolean isEqual(byte[],byte[])>(r13, r14);
        if $z3 == 0 goto label2;

        goto label3;

     label2:
        z0 = 0;
        $r42 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        if $r42 == null goto label4;

        $r43 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        virtualinvoke $r43.<sun.security.util.Debug: void println(java.lang.String)>("Verification of Manifest main attributes failed");
        $r44 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        virtualinvoke $r44.<sun.security.util.Debug: void println()>();
        goto label4;

     label3:
        goto label0;

     label4:
        return z0;
    }

    private boolean verifySection(java.util.jar.Attributes, java.lang.String, sun.security.util.ManifestDigester, sun.misc.BASE64Decoder) throws java.io.IOException
    {
        sun.security.util.SignatureFileVerifier r0;
        java.util.jar.Attributes r1;
        java.lang.String r2, r8, r9, $r18, $r23, $r25, $r32, $r34, $r38, $r40, $r44, $r46, $r53, $r55, $r60, $r64;
        sun.security.util.ManifestDigester r3;
        sun.misc.BASE64Decoder r4;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        sun.security.util.ManifestDigester$Entry r5;
        java.util.Iterator r6;
        java.util.Map$Entry r7;
        java.security.MessageDigest r10;
        byte[] r11, r12, r48;
        sun.security.pkcs.PKCS7 $r13;
        java.lang.SecurityException $r14, $r57;
        java.lang.StringBuilder $r15, $r16, $r17, $r28, $r29, $r30, $r31, $r33, $r36, $r37, $r39, $r42, $r43, $r45, $r51, $r52, $r54, $r58, $r59, $r61, $r62, $r63;
        java.util.Set $r19;
        java.lang.Object $r20, $r21, $r24;
        java.util.Locale $r22;
        int $i0, $i1;
        sun.security.util.Debug $r26, $r27, $r35, $r41, $r47, $r49, $r50, $r56;

        r0 := @this: sun.security.util.SignatureFileVerifier;
        r1 := @parameter0: java.util.jar.Attributes;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: sun.security.util.ManifestDigester;
        r4 := @parameter3: sun.misc.BASE64Decoder;
        z0 = 0;
        $r13 = r0.<sun.security.util.SignatureFileVerifier: sun.security.pkcs.PKCS7 block>;
        $z2 = virtualinvoke $r13.<sun.security.pkcs.PKCS7: boolean isOldStyle()>();
        r5 = virtualinvoke r3.<sun.security.util.ManifestDigester: sun.security.util.ManifestDigester$Entry get(java.lang.String,boolean)>(r2, $z2);
        if r5 != null goto label0;

        $r14 = new java.lang.SecurityException;
        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no manifiest section for signature file entry ");
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r14.<java.lang.SecurityException: void <init>(java.lang.String)>($r18);
        throw $r14;

     label0:
        if r1 == null goto label9;

        $r19 = virtualinvoke r1.<java.util.jar.Attributes: java.util.Set entrySet()>();
        r6 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();
        if $z3 == 0 goto label9;

        $r20 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();
        r7 = (java.util.Map$Entry) $r20;
        $r21 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();
        r8 = virtualinvoke $r21.<java.lang.Object: java.lang.String toString()>();
        $r22 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r23 = virtualinvoke r8.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r22);
        $z4 = virtualinvoke $r23.<java.lang.String: boolean endsWith(java.lang.String)>("-DIGEST");
        if $z4 == 0 goto label8;

        $i0 = virtualinvoke r8.<java.lang.String: int length()>();
        $i1 = $i0 - 7;
        r9 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);
        r10 = specialinvoke r0.<sun.security.util.SignatureFileVerifier: java.security.MessageDigest getDigest(java.lang.String)>(r9);
        if r10 == null goto label8;

        z1 = 0;
        $r24 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();
        $r25 = (java.lang.String) $r24;
        r11 = virtualinvoke r4.<sun.misc.BASE64Decoder: byte[] decodeBuffer(java.lang.String)>($r25);
        $z5 = r0.<sun.security.util.SignatureFileVerifier: boolean workaround>;
        if $z5 == 0 goto label2;

        r12 = virtualinvoke r5.<sun.security.util.ManifestDigester$Entry: byte[] digestWorkaround(java.security.MessageDigest)>(r10);
        goto label3;

     label2:
        r12 = virtualinvoke r5.<sun.security.util.ManifestDigester$Entry: byte[] digest(java.security.MessageDigest)>(r10);

     label3:
        $r26 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        if $r26 == null goto label4;

        $r27 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        $r28 = new java.lang.StringBuilder;
        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature Block File: ");
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" digest=");
        $r32 = virtualinvoke r10.<java.security.MessageDigest: java.lang.String getAlgorithm()>();
        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r27.<sun.security.util.Debug: void println(java.lang.String)>($r34);
        $r35 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        $r36 = new java.lang.StringBuilder;
        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  expected ");
        $r38 = staticinvoke <sun.security.util.SignatureFileVerifier: java.lang.String toHex(byte[])>(r11);
        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);
        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r35.<sun.security.util.Debug: void println(java.lang.String)>($r40);
        $r41 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        $r42 = new java.lang.StringBuilder;
        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();
        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  computed ");
        $r44 = staticinvoke <sun.security.util.SignatureFileVerifier: java.lang.String toHex(byte[])>(r12);
        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);
        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r41.<sun.security.util.Debug: void println(java.lang.String)>($r46);
        $r47 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        virtualinvoke $r47.<sun.security.util.Debug: void println()>();

     label4:
        $z6 = staticinvoke <java.security.MessageDigest: boolean isEqual(byte[],byte[])>(r12, r11);
        if $z6 == 0 goto label5;

        z0 = 1;
        z1 = 1;
        goto label7;

     label5:
        $z7 = r0.<sun.security.util.SignatureFileVerifier: boolean workaround>;
        if $z7 != 0 goto label7;

        r48 = virtualinvoke r5.<sun.security.util.ManifestDigester$Entry: byte[] digestWorkaround(java.security.MessageDigest)>(r10);
        $z8 = staticinvoke <java.security.MessageDigest: boolean isEqual(byte[],byte[])>(r48, r11);
        if $z8 == 0 goto label7;

        $r49 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        if $r49 == null goto label6;

        $r50 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        $r51 = new java.lang.StringBuilder;
        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();
        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  re-computed ");
        $r53 = staticinvoke <sun.security.util.SignatureFileVerifier: java.lang.String toHex(byte[])>(r48);
        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);
        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r50.<sun.security.util.Debug: void println(java.lang.String)>($r55);
        $r56 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        virtualinvoke $r56.<sun.security.util.Debug: void println()>();

     label6:
        r0.<sun.security.util.SignatureFileVerifier: boolean workaround> = 1;
        z0 = 1;
        z1 = 1;

     label7:
        if z1 != 0 goto label8;

        $r57 = new java.lang.SecurityException;
        $r58 = new java.lang.StringBuilder;
        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();
        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid ");
        $r60 = virtualinvoke r10.<java.security.MessageDigest: java.lang.String getAlgorithm()>();
        $r61 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60);
        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signature file digest for ");
        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r57.<java.lang.SecurityException: void <init>(java.lang.String)>($r64);
        throw $r57;

     label8:
        goto label1;

     label9:
        return z0;
    }

    private java.security.CodeSigner[] getSigners(sun.security.pkcs.SignerInfo[], sun.security.pkcs.PKCS7) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.cert.CertificateException
    {
        sun.security.util.SignatureFileVerifier r0;
        sun.security.pkcs.SignerInfo[] r1;
        sun.security.pkcs.PKCS7 r2;
        java.util.ArrayList r3, r5, $r8;
        int i0, $i1, $i2;
        sun.security.pkcs.SignerInfo r4;
        java.security.cert.CertPath r6;
        java.security.cert.CertificateFactory $r7;
        java.security.CodeSigner $r9;
        java.security.Timestamp $r10;
        sun.security.util.Debug $r11, $r12;
        java.lang.StringBuilder $r13, $r14, $r16;
        java.lang.Object $r15;
        java.lang.String $r17;
        java.security.CodeSigner[] $r18, $r20;
        java.lang.Object[] $r19;

        r0 := @this: sun.security.util.SignatureFileVerifier;
        r1 := @parameter0: sun.security.pkcs.SignerInfo[];
        r2 := @parameter1: sun.security.pkcs.PKCS7;
        r3 = null;
        i0 = 0;

     label0:
        $i1 = lengthof r1;
        if i0 >= $i1 goto label3;

        r4 = r1[i0];
        r5 = virtualinvoke r4.<sun.security.pkcs.SignerInfo: java.util.ArrayList getCertificateChain(sun.security.pkcs.PKCS7)>(r2);
        $r7 = r0.<sun.security.util.SignatureFileVerifier: java.security.cert.CertificateFactory certificateFactory>;
        r6 = virtualinvoke $r7.<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.util.List)>(r5);
        if r3 != null goto label1;

        $r8 = new java.util.ArrayList;
        specialinvoke $r8.<java.util.ArrayList: void <init>()>();
        r3 = $r8;

     label1:
        $r9 = new java.security.CodeSigner;
        $r10 = specialinvoke r0.<sun.security.util.SignatureFileVerifier: java.security.Timestamp getTimestamp(sun.security.pkcs.SignerInfo)>(r4);
        specialinvoke $r9.<java.security.CodeSigner: void <init>(java.security.cert.CertPath,java.security.Timestamp)>(r6, $r10);
        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);
        $r11 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        if $r11 == null goto label2;

        $r12 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        $r13 = new java.lang.StringBuilder;
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature Block Certificate: ");
        $r15 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object get(int)>(0);
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r12.<sun.security.util.Debug: void println(java.lang.String)>($r17);

     label2:
        i0 = i0 + 1;
        goto label0;

     label3:
        if r3 == null goto label4;

        $i2 = virtualinvoke r3.<java.util.ArrayList: int size()>();
        $r18 = newarray (java.security.CodeSigner)[$i2];
        $r19 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r18);
        $r20 = (java.security.CodeSigner[]) $r19;
        return $r20;

     label4:
        return null;
    }

    private java.security.Timestamp getTimestamp(sun.security.pkcs.SignerInfo) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.cert.CertificateException
    {
        sun.security.util.SignatureFileVerifier r0;
        sun.security.pkcs.SignerInfo r1, $r16;
        java.security.Timestamp r2, $r20;
        sun.security.pkcs.PKCS9Attributes r3;
        sun.security.pkcs.PKCS9Attribute r4;
        sun.security.pkcs.PKCS7 r5, $r11;
        byte[] r6, $r13, $r14, $r19;
        sun.security.pkcs.SignerInfo[] r7;
        java.util.ArrayList r8;
        java.security.cert.CertPath r9;
        sun.security.timestamp.TimestampToken r10, $r18;
        java.lang.Object $r12;
        sun.security.pkcs.ContentInfo $r15;
        java.security.cert.CertificateFactory $r17;
        java.util.Date $r21;

        r0 := @this: sun.security.util.SignatureFileVerifier;
        r1 := @parameter0: sun.security.pkcs.SignerInfo;
        r2 = null;
        r3 = virtualinvoke r1.<sun.security.pkcs.SignerInfo: sun.security.pkcs.PKCS9Attributes getUnauthenticatedAttributes()>();
        if r3 == null goto label0;

        r4 = virtualinvoke r3.<sun.security.pkcs.PKCS9Attributes: sun.security.pkcs.PKCS9Attribute getAttribute(java.lang.String)>("signatureTimestampToken");
        if r4 == null goto label0;

        $r11 = new sun.security.pkcs.PKCS7;
        $r12 = virtualinvoke r4.<sun.security.pkcs.PKCS9Attribute: java.lang.Object getValue()>();
        $r13 = (byte[]) $r12;
        $r14 = (byte[]) $r13;
        specialinvoke $r11.<sun.security.pkcs.PKCS7: void <init>(byte[])>($r14);
        r5 = $r11;
        $r15 = virtualinvoke r5.<sun.security.pkcs.PKCS7: sun.security.pkcs.ContentInfo getContentInfo()>();
        r6 = virtualinvoke $r15.<sun.security.pkcs.ContentInfo: byte[] getData()>();
        r7 = virtualinvoke r5.<sun.security.pkcs.PKCS7: sun.security.pkcs.SignerInfo[] verify(byte[])>(r6);
        $r16 = r7[0];
        r8 = virtualinvoke $r16.<sun.security.pkcs.SignerInfo: java.util.ArrayList getCertificateChain(sun.security.pkcs.PKCS7)>(r5);
        $r17 = r0.<sun.security.util.SignatureFileVerifier: java.security.cert.CertificateFactory certificateFactory>;
        r9 = virtualinvoke $r17.<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.util.List)>(r8);
        $r18 = new sun.security.timestamp.TimestampToken;
        specialinvoke $r18.<sun.security.timestamp.TimestampToken: void <init>(byte[])>(r6);
        r10 = $r18;
        $r19 = virtualinvoke r1.<sun.security.pkcs.SignerInfo: byte[] getEncryptedDigest()>();
        specialinvoke r0.<sun.security.util.SignatureFileVerifier: void verifyTimestamp(sun.security.timestamp.TimestampToken,byte[])>(r10, $r19);
        $r20 = new java.security.Timestamp;
        $r21 = virtualinvoke r10.<sun.security.timestamp.TimestampToken: java.util.Date getDate()>();
        specialinvoke $r20.<java.security.Timestamp: void <init>(java.util.Date,java.security.cert.CertPath)>($r21, r9);
        r2 = $r20;

     label0:
        return r2;
    }

    private void verifyTimestamp(sun.security.timestamp.TimestampToken, byte[]) throws java.security.NoSuchAlgorithmException, java.security.SignatureException
    {
        sun.security.util.SignatureFileVerifier r0;
        sun.security.timestamp.TimestampToken r1;
        byte[] r2, $r7, $r8;
        java.security.MessageDigest r3;
        sun.security.x509.AlgorithmId $r4;
        java.lang.String $r5, $r6, $r18, $r29;
        boolean $z0;
        java.security.SignatureException $r9;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r16, $r17, $r22, $r23, $r25, $r26, $r28;
        java.math.BigInteger $r12, $r24;
        java.util.Date $r15, $r27;
        sun.security.util.Debug $r19, $r20, $r21, $r30;

        r0 := @this: sun.security.util.SignatureFileVerifier;
        r1 := @parameter0: sun.security.timestamp.TimestampToken;
        r2 := @parameter1: byte[];
        $r4 = virtualinvoke r1.<sun.security.timestamp.TimestampToken: sun.security.x509.AlgorithmId getHashAlgorithm()>();
        $r5 = virtualinvoke $r4.<sun.security.x509.AlgorithmId: java.lang.String getName()>();
        $r6 = staticinvoke <sun.security.x509.AlgorithmId: java.lang.String getStandardDigestName(java.lang.String)>($r5);
        r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r6);
        $r7 = virtualinvoke r1.<sun.security.timestamp.TimestampToken: byte[] getHashedMessage()>();
        $r8 = virtualinvoke r3.<java.security.MessageDigest: byte[] digest(byte[])>(r2);
        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r7, $r8);
        if $z0 != 0 goto label0;

        $r9 = new java.security.SignatureException;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature timestamp (#");
        $r12 = virtualinvoke r1.<sun.security.timestamp.TimestampToken: java.math.BigInteger getSerialNumber()>();
        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") generated on ");
        $r15 = virtualinvoke r1.<sun.security.timestamp.TimestampToken: java.util.Date getDate()>();
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is inapplicable");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.security.SignatureException: void <init>(java.lang.String)>($r18);
        throw $r9;

     label0:
        $r19 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        if $r19 == null goto label1;

        $r20 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        virtualinvoke $r20.<sun.security.util.Debug: void println()>();
        $r21 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        $r22 = new java.lang.StringBuilder;
        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Detected signature timestamp (#");
        $r24 = virtualinvoke r1.<sun.security.timestamp.TimestampToken: java.math.BigInteger getSerialNumber()>();
        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") generated on ");
        $r27 = virtualinvoke r1.<sun.security.timestamp.TimestampToken: java.util.Date getDate()>();
        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r21.<sun.security.util.Debug: void println(java.lang.String)>($r29);
        $r30 = <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug>;
        virtualinvoke $r30.<sun.security.util.Debug: void println()>();

     label1:
        return;
    }

    static java.lang.String toHex(byte[])
    {
        byte[] r0;
        java.lang.StringBuffer $r1, r2;
        int i0, $i1, $i2, $i3;
        char[] $r3, $r5;
        byte $b4, $b5, $b6, $b8, $b9;
        char $c7, $c10;
        java.lang.String $r7;

        r0 := @parameter0: byte[];
        $r1 = new java.lang.StringBuffer;
        $i1 = lengthof r0;
        $i2 = $i1 * 2;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>($i2);
        r2 = $r1;
        i0 = 0;

     label0:
        $i3 = lengthof r0;
        if i0 >= $i3 goto label1;

        $r3 = <sun.security.util.SignatureFileVerifier: char[] hexc>;
        $b4 = r0[i0];
        $b5 = $b4 >> 4;
        $b6 = $b5 & 15;
        $c7 = $r3[$b6];
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c7);
        $r5 = <sun.security.util.SignatureFileVerifier: char[] hexc>;
        $b8 = r0[i0];
        $b9 = $b8 & 15;
        $c10 = $r5[$b9];
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c10);
        i0 = i0 + 1;
        goto label0;

     label1:
        $r7 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r7;
    }

    static boolean contains(java.security.CodeSigner[], java.security.CodeSigner)
    {
        java.security.CodeSigner[] r0;
        java.security.CodeSigner r1, $r2;
        int i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.security.CodeSigner[];
        r1 := @parameter1: java.security.CodeSigner;
        i0 = 0;

     label0:
        $i1 = lengthof r0;
        if i0 >= $i1 goto label2;

        $r2 = r0[i0];
        $z0 = virtualinvoke $r2.<java.security.CodeSigner: boolean equals(java.lang.Object)>(r1);
        if $z0 == 0 goto label1;

        return 1;

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        return 0;
    }

    static boolean isSubSet(java.security.CodeSigner[], java.security.CodeSigner[])
    {
        java.security.CodeSigner[] r0, r1;
        int i0, $i1;
        java.security.CodeSigner $r2;
        boolean $z0;

        r0 := @parameter0: java.security.CodeSigner[];
        r1 := @parameter1: java.security.CodeSigner[];
        if r1 != r0 goto label0;

        return 1;

     label0:
        i0 = 0;

     label1:
        $i1 = lengthof r0;
        if i0 >= $i1 goto label3;

        $r2 = r0[i0];
        $z0 = staticinvoke <sun.security.util.SignatureFileVerifier: boolean contains(java.security.CodeSigner[],java.security.CodeSigner)>(r1, $r2);
        if $z0 != 0 goto label2;

        return 0;

     label2:
        i0 = i0 + 1;
        goto label1;

     label3:
        return 1;
    }

    static boolean matches(java.security.CodeSigner[], java.security.CodeSigner[], java.security.CodeSigner[])
    {
        java.security.CodeSigner[] r0, r1, r2;
        int i0, $i1;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.security.CodeSigner $r3, $r4;

        r0 := @parameter0: java.security.CodeSigner[];
        r1 := @parameter1: java.security.CodeSigner[];
        r2 := @parameter2: java.security.CodeSigner[];
        if r1 != null goto label0;

        if r0 != r2 goto label0;

        return 1;

     label0:
        if r1 == null goto label1;

        $z1 = staticinvoke <sun.security.util.SignatureFileVerifier: boolean isSubSet(java.security.CodeSigner[],java.security.CodeSigner[])>(r1, r0);
        if $z1 != 0 goto label1;

        return 0;

     label1:
        $z2 = staticinvoke <sun.security.util.SignatureFileVerifier: boolean isSubSet(java.security.CodeSigner[],java.security.CodeSigner[])>(r2, r0);
        if $z2 != 0 goto label2;

        return 0;

     label2:
        i0 = 0;

     label3:
        $i1 = lengthof r0;
        if i0 >= $i1 goto label9;

        if r1 == null goto label4;

        $r3 = r0[i0];
        $z3 = staticinvoke <sun.security.util.SignatureFileVerifier: boolean contains(java.security.CodeSigner[],java.security.CodeSigner)>(r1, $r3);
        if $z3 != 0 goto label5;

     label4:
        $r4 = r0[i0];
        $z4 = staticinvoke <sun.security.util.SignatureFileVerifier: boolean contains(java.security.CodeSigner[],java.security.CodeSigner)>(r2, $r4);
        if $z4 == 0 goto label6;

     label5:
        $z5 = 1;
        goto label7;

     label6:
        $z5 = 0;

     label7:
        z0 = $z5;
        if z0 != 0 goto label8;

        return 0;

     label8:
        i0 = i0 + 1;
        goto label3;

     label9:
        return 1;
    }

    void updateSigners(java.security.CodeSigner[], java.util.Hashtable, java.lang.String)
    {
        sun.security.util.SignatureFileVerifier r0;
        java.security.CodeSigner[] r1, r4, r5, r11;
        java.util.Hashtable r2;
        java.lang.String r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object $r6, $r9;
        java.util.ArrayList $r7, $r8, $r12;
        boolean $z0;

        r0 := @this: sun.security.util.SignatureFileVerifier;
        r1 := @parameter0: java.security.CodeSigner[];
        r2 := @parameter1: java.util.Hashtable;
        r3 := @parameter2: java.lang.String;
        $r6 = virtualinvoke r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r3);
        r4 = (java.security.CodeSigner[]) $r6;
        $r7 = r0.<sun.security.util.SignatureFileVerifier: java.util.ArrayList signerCache>;
        $i1 = virtualinvoke $r7.<java.util.ArrayList: int size()>();
        i0 = $i1 - 1;

     label0:
        if i0 == -1 goto label2;

        $r8 = r0.<sun.security.util.SignatureFileVerifier: java.util.ArrayList signerCache>;
        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i0);
        r5 = (java.security.CodeSigner[]) $r9;
        $z0 = staticinvoke <sun.security.util.SignatureFileVerifier: boolean matches(java.security.CodeSigner[],java.security.CodeSigner[],java.security.CodeSigner[])>(r5, r4, r1);
        if $z0 == 0 goto label1;

        virtualinvoke r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r5);
        return;

     label1:
        i0 = i0 + -1;
        goto label0;

     label2:
        if r4 != null goto label3;

        r11 = r1;
        goto label4;

     label3:
        $i2 = lengthof r4;
        $i3 = lengthof r1;
        $i4 = $i2 + $i3;
        r11 = newarray (java.security.CodeSigner)[$i4];
        $i5 = lengthof r4;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r11, 0, $i5);
        $i6 = lengthof r4;
        $i7 = lengthof r1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r11, $i6, $i7);

     label4:
        $r12 = r0.<sun.security.util.SignatureFileVerifier: java.util.ArrayList signerCache>;
        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r11);
        virtualinvoke r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r11);
        return;
    }

    static void <clinit>()
    {
        java.util.Locale $r0;
        sun.security.util.Debug $r1;
        java.lang.String $r2, $r3;
        char[] $r4;

        $r1 = staticinvoke <sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String)>("jar");
        <sun.security.util.SignatureFileVerifier: sun.security.util.Debug debug> = $r1;
        $r2 = "-DIGEST-Manifest-Main-Attributes";
        $r0 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r0);
        <sun.security.util.SignatureFileVerifier: java.lang.String ATTR_DIGEST> = $r3;
        $r4 = newarray (char)[16];
        $r4[0] = 48;
        $r4[1] = 49;
        $r4[2] = 50;
        $r4[3] = 51;
        $r4[4] = 52;
        $r4[5] = 53;
        $r4[6] = 54;
        $r4[7] = 55;
        $r4[8] = 56;
        $r4[9] = 57;
        $r4[10] = 97;
        $r4[11] = 98;
        $r4[12] = 99;
        $r4[13] = 100;
        $r4[14] = 101;
        $r4[15] = 102;
        <sun.security.util.SignatureFileVerifier: char[] hexc> = $r4;
        return;
    }
}
