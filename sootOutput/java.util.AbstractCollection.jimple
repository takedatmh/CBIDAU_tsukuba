public abstract class java.util.AbstractCollection extends java.lang.Object implements java.util.Collection
{
    private static final int MAX_ARRAY_SIZE;

    protected void <init>()
    {
        java.util.AbstractCollection r0;

        r0 := @this: java.util.AbstractCollection;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public abstract java.util.Iterator iterator();

    public abstract int size();

    public boolean isEmpty()
    {
        java.util.AbstractCollection r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.AbstractCollection;
        $i0 = virtualinvoke r0.<java.util.AbstractCollection: int size()>();
        if $i0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.AbstractCollection r0;
        java.lang.Object r1, $r3, $r4;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.AbstractCollection;
        r1 := @parameter0: java.lang.Object;
        r2 = virtualinvoke r0.<java.util.AbstractCollection: java.util.Iterator iterator()>();
        if r1 != null goto label1;

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        if $r3 != null goto label0;

        return 1;

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);
        if $z2 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    public java.lang.Object[] toArray()
    {
        java.util.AbstractCollection r0;
        java.lang.Object[] r1, $r3, $r5;
        java.util.Iterator r2;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @this: java.util.AbstractCollection;
        $i1 = virtualinvoke r0.<java.util.AbstractCollection: int size()>();
        r1 = newarray (java.lang.Object)[$i1];
        r2 = virtualinvoke r0.<java.util.AbstractCollection: java.util.Iterator iterator()>();
        i0 = 0;

     label0:
        $i2 = lengthof r1;
        if i0 >= $i2 goto label2;

        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 != 0 goto label1;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, i0);
        return $r3;

     label1:
        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r1[i0] = $r4;
        i0 = i0 + 1;
        goto label0;

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label3;

        $r5 = staticinvoke <java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>(r1, r2);
        goto label4;

     label3:
        $r5 = r1;

     label4:
        return $r5;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.AbstractCollection r0;
        java.lang.Object[] r1, r2, $r4, $r8, $r9, $r11;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.util.Iterator r3;
        java.lang.Class $r5, $r6;
        java.lang.Object $r7, $r10;
        boolean $z0, $z1;

        r0 := @this: java.util.AbstractCollection;
        r1 := @parameter0: java.lang.Object[];
        i0 = virtualinvoke r0.<java.util.AbstractCollection: int size()>();
        $i2 = lengthof r1;
        if $i2 < i0 goto label0;

        $r4 = r1;
        goto label1;

     label0:
        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class getComponentType()>();
        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r6, i0);
        $r8 = (java.lang.Object[]) $r7;
        $r4 = (java.lang.Object[]) $r8;

     label1:
        r2 = $r4;
        r3 = virtualinvoke r0.<java.util.AbstractCollection: java.util.Iterator iterator()>();
        i1 = 0;

     label2:
        $i3 = lengthof r2;
        if i1 >= $i3 goto label7;

        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z0 != 0 goto label6;

        if r1 != r2 goto label3;

        r2[i1] = null;
        goto label5;

     label3:
        $i4 = lengthof r1;
        if $i4 >= i1 goto label4;

        $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r2, i1);
        return $r9;

     label4:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, 0, i1);
        $i5 = lengthof r1;
        if $i5 <= i1 goto label5;

        r1[i1] = null;

     label5:
        return r1;

     label6:
        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r2[i1] = $r10;
        i1 = i1 + 1;
        goto label2;

     label7:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label8;

        $r11 = staticinvoke <java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>(r2, r3);
        goto label9;

     label8:
        $r11 = r2;

     label9:
        return $r11;
    }

    private static java.lang.Object[] finishToArray(java.lang.Object[], java.util.Iterator)
    {
        java.lang.Object[] r0, $r3;
        java.util.Iterator r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Object[];
        r1 := @parameter1: java.util.Iterator;
        i0 = lengthof r0;

     label0:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        i1 = lengthof r0;
        if i0 != i1 goto label2;

        $i3 = i1 >> 1;
        $i4 = i1 + $i3;
        i2 = $i4 + 1;
        $i5 = i2 - 2147483639;
        if $i5 <= 0 goto label1;

        $i6 = i1 + 1;
        i2 = staticinvoke <java.util.AbstractCollection: int hugeCapacity(int)>($i6);

     label1:
        r0 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r0, i2);

     label2:
        $i7 = i0;
        i0 = i0 + 1;
        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        r0[$i7] = $r2;
        goto label0;

     label3:
        $i8 = lengthof r0;
        if i0 != $i8 goto label4;

        $r3 = r0;
        goto label5;

     label4:
        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r0, i0);

     label5:
        return $r3;
    }

    private static int hugeCapacity(int)
    {
        int i0, $i1;
        java.lang.OutOfMemoryError $r0;

        i0 := @parameter0: int;
        if i0 >= 0 goto label0;

        $r0 = new java.lang.OutOfMemoryError;
        specialinvoke $r0.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("Required array size too large");
        throw $r0;

     label0:
        if i0 <= 2147483639 goto label1;

        $i1 = 2147483647;
        goto label2;

     label1:
        $i1 = 2147483639;

     label2:
        return $i1;
    }

    public boolean add(java.lang.Object)
    {
        java.util.AbstractCollection r0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.util.AbstractCollection;
        r1 := @parameter0: java.lang.Object;
        $r2 = new java.lang.UnsupportedOperationException;
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r2;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.AbstractCollection r0;
        java.lang.Object r1, $r3, $r4;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.AbstractCollection;
        r1 := @parameter0: java.lang.Object;
        r2 = virtualinvoke r0.<java.util.AbstractCollection: java.util.Iterator iterator()>();
        if r1 != null goto label1;

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        if $r3 != null goto label0;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();
        return 1;

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);
        if $z2 == 0 goto label1;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();
        return 1;

     label2:
        return 0;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.AbstractCollection r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        boolean $z0, $z1;

        r0 := @this: java.util.AbstractCollection;
        r1 := @parameter0: java.util.Collection;
        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $z1 = virtualinvoke r0.<java.util.AbstractCollection: boolean contains(java.lang.Object)>(r3);
        if $z1 != 0 goto label1;

        return 0;

     label1:
        goto label0;

     label2:
        return 1;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.AbstractCollection r0;
        java.util.Collection r1;
        boolean z0, $z1, $z2;
        java.util.Iterator r2;
        java.lang.Object r3;

        r0 := @this: java.util.AbstractCollection;
        r1 := @parameter0: java.util.Collection;
        z0 = 0;
        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label0:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $z2 = virtualinvoke r0.<java.util.AbstractCollection: boolean add(java.lang.Object)>(r3);
        if $z2 == 0 goto label1;

        z0 = 1;

     label1:
        goto label0;

     label2:
        return z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.AbstractCollection r0;
        java.util.Collection r1;
        boolean z0, $z1, $z2;
        java.util.Iterator r2;
        java.lang.Object $r3;

        r0 := @this: java.util.AbstractCollection;
        r1 := @parameter0: java.util.Collection;
        z0 = 0;
        r2 = virtualinvoke r0.<java.util.AbstractCollection: java.util.Iterator iterator()>();

     label0:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label1;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $z2 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r3);
        if $z2 == 0 goto label0;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();
        z0 = 1;
        goto label0;

     label1:
        return z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.AbstractCollection r0;
        java.util.Collection r1;
        boolean z0, $z1, $z2;
        java.util.Iterator r2;
        java.lang.Object $r3;

        r0 := @this: java.util.AbstractCollection;
        r1 := @parameter0: java.util.Collection;
        z0 = 0;
        r2 = virtualinvoke r0.<java.util.AbstractCollection: java.util.Iterator iterator()>();

     label0:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label1;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $z2 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r3);
        if $z2 != 0 goto label0;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();
        z0 = 1;
        goto label0;

     label1:
        return z0;
    }

    public void clear()
    {
        java.util.AbstractCollection r0;
        java.util.Iterator r1;
        boolean $z0;

        r0 := @this: java.util.AbstractCollection;
        r1 = virtualinvoke r0.<java.util.AbstractCollection: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        interfaceinvoke r1.<java.util.Iterator: void remove()>();
        goto label0;

     label1:
        return;
    }

    public java.lang.String toString()
    {
        java.util.AbstractCollection r0;
        java.util.Iterator r1;
        java.lang.StringBuilder r2, $r4, $r9, $r11;
        java.lang.Object r3, $r7;
        boolean $z0, $z1;
        java.lang.String $r10;

        r0 := @this: java.util.AbstractCollection;
        r1 = virtualinvoke r0.<java.util.AbstractCollection: java.util.Iterator iterator()>();
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z0 != 0 goto label0;

        return "[]";

     label0:
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        r2 = $r4;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

     label1:
        r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        if r3 != r0 goto label2;

        $r7 = "(this Collection)";
        goto label3;

     label2:
        $r7 = r3;

     label3:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z1 != 0 goto label4;

        $r9 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r10;

     label4:
        $r11 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);
        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
        goto label1;
    }
}
