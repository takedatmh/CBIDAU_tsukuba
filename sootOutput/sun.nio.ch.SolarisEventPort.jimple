class sun.nio.ch.SolarisEventPort extends sun.nio.ch.Port
{
    private static final sun.misc.Unsafe unsafe;
    private static final int addressSize;
    static final int SIZEOF_PORT_EVENT;
    static final int OFFSETOF_EVENTS;
    static final int OFFSETOF_SOURCE;
    static final int OFFSETOF_OBJECT;
    static final short PORT_SOURCE_USER;
    static final short PORT_SOURCE_FD;
    private final int port;
    private boolean closed;

    private static int dependsArch(int, int)
    {
        int i0, i1, $i2, $i3;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i2 = <sun.nio.ch.SolarisEventPort: int addressSize>;
        if $i2 != 4 goto label0;

        $i3 = i0;
        goto label1;

     label0:
        $i3 = i1;

     label1:
        return $i3;
    }

    void <init>(java.nio.channels.spi.AsynchronousChannelProvider, sun.nio.ch.ThreadPool) throws java.io.IOException
    {
        sun.nio.ch.SolarisEventPort r0;
        java.nio.channels.spi.AsynchronousChannelProvider r1;
        sun.nio.ch.ThreadPool r2;
        int $i0;

        r0 := @this: sun.nio.ch.SolarisEventPort;
        r1 := @parameter0: java.nio.channels.spi.AsynchronousChannelProvider;
        r2 := @parameter1: sun.nio.ch.ThreadPool;
        specialinvoke r0.<sun.nio.ch.Port: void <init>(java.nio.channels.spi.AsynchronousChannelProvider,sun.nio.ch.ThreadPool)>(r1, r2);
        $i0 = staticinvoke <sun.nio.ch.SolarisEventPort: int port_create()>();
        r0.<sun.nio.ch.SolarisEventPort: int port> = $i0;
        return;
    }

    sun.nio.ch.SolarisEventPort start()
    {
        sun.nio.ch.SolarisEventPort r0;
        sun.nio.ch.SolarisEventPort$EventHandlerTask $r1;

        r0 := @this: sun.nio.ch.SolarisEventPort;
        $r1 = new sun.nio.ch.SolarisEventPort$EventHandlerTask;
        specialinvoke $r1.<sun.nio.ch.SolarisEventPort$EventHandlerTask: void <init>(sun.nio.ch.SolarisEventPort,sun.nio.ch.SolarisEventPort$1)>(r0, null);
        virtualinvoke r0.<sun.nio.ch.SolarisEventPort: void startThreads(java.lang.Runnable)>($r1);
        return r0;
    }

    private void implClose()
    {
        sun.nio.ch.SolarisEventPort r0, r2;
        java.lang.Throwable r3, $r4;
        boolean $z0;
        int $i0;

        r0 := @this: sun.nio.ch.SolarisEventPort;
        r2 = r0;
        entermonitor r0;

     label0:
        $z0 = r0.<sun.nio.ch.SolarisEventPort: boolean closed>;
        if $z0 == 0 goto label2;

        exitmonitor r2;

     label1:
        return;

     label2:
        r0.<sun.nio.ch.SolarisEventPort: boolean closed> = 1;
        exitmonitor r2;

     label3:
        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        r3 = $r4;
        exitmonitor r2;

     label6:
        throw r3;

     label7:
        $i0 = r0.<sun.nio.ch.SolarisEventPort: int port>;
        staticinvoke <sun.nio.ch.SolarisEventPort: void port_close(int)>($i0);
        return;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void wakeup()
    {
        sun.nio.ch.SolarisEventPort r0;
        java.io.IOException r1, $r2;
        int $i0;
        java.lang.AssertionError $r3;

        r0 := @this: sun.nio.ch.SolarisEventPort;

     label0:
        $i0 = r0.<sun.nio.ch.SolarisEventPort: int port>;
        staticinvoke <sun.nio.ch.SolarisEventPort: void port_send(int,int)>($i0, 0);

     label1:
        goto label3;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;
        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);
        throw $r3;

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    void executeOnHandlerTask(java.lang.Runnable)
    {
        sun.nio.ch.SolarisEventPort r0, r3;
        java.lang.Runnable r1;
        java.lang.Throwable r4, $r6;
        boolean $z0;
        java.util.concurrent.RejectedExecutionException $r5;

        r0 := @this: sun.nio.ch.SolarisEventPort;
        r1 := @parameter0: java.lang.Runnable;
        r3 = r0;
        entermonitor r0;

     label0:
        $z0 = r0.<sun.nio.ch.SolarisEventPort: boolean closed>;
        if $z0 == 0 goto label1;

        $r5 = new java.util.concurrent.RejectedExecutionException;
        specialinvoke $r5.<java.util.concurrent.RejectedExecutionException: void <init>()>();
        throw $r5;

     label1:
        virtualinvoke r0.<sun.nio.ch.SolarisEventPort: void offerTask(java.lang.Runnable)>(r1);
        specialinvoke r0.<sun.nio.ch.SolarisEventPort: void wakeup()>();
        exitmonitor r3;

     label2:
        goto label6;

     label3:
        $r6 := @caughtexception;

     label4:
        r4 = $r6;
        exitmonitor r3;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void shutdownHandlerTasks()
    {
        sun.nio.ch.SolarisEventPort r0;
        int i0, $i1, $i2;
        java.io.IOException r1, $r2;
        java.lang.AssertionError $r3;

        r0 := @this: sun.nio.ch.SolarisEventPort;
        i0 = virtualinvoke r0.<sun.nio.ch.SolarisEventPort: int threadCount()>();
        if i0 != 0 goto label0;

        specialinvoke r0.<sun.nio.ch.SolarisEventPort: void implClose()>();
        goto label4;

     label0:
        $i1 = i0;
        i0 = i0 + -1;
        if $i1 <= 0 goto label4;

     label1:
        $i2 = r0.<sun.nio.ch.SolarisEventPort: int port>;
        staticinvoke <sun.nio.ch.SolarisEventPort: void port_send(int,int)>($i2, 0);

     label2:
        goto label0;

     label3:
        $r2 := @caughtexception;
        r1 = $r2;
        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);
        throw $r3;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    void startPoll(int, int)
    {
        sun.nio.ch.SolarisEventPort r0;
        int i0, i1, $i2;
        java.io.IOException r1, $r2;
        long $l3;
        java.lang.AssertionError $r3;

        r0 := @this: sun.nio.ch.SolarisEventPort;
        i0 := @parameter0: int;
        i1 := @parameter1: int;

     label0:
        $i2 = r0.<sun.nio.ch.SolarisEventPort: int port>;
        $l3 = (long) i0;
        staticinvoke <sun.nio.ch.SolarisEventPort: boolean port_associate(int,int,long,int)>($i2, 4, $l3, i1);

     label1:
        goto label3;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;
        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    static native int port_create() throws java.io.IOException;

    static native boolean port_associate(int, int, long, int) throws java.io.IOException;

    static native boolean port_dissociate(int, int, long) throws java.io.IOException;

    static native void port_get(int, long) throws java.io.IOException;

    static native int port_getn(int, long, int, long) throws java.io.IOException;

    static native void port_send(int, int) throws java.io.IOException;

    static native void port_close(int);

    static sun.misc.Unsafe access$100()
    {
        sun.misc.Unsafe $r0;

        $r0 = <sun.nio.ch.SolarisEventPort: sun.misc.Unsafe unsafe>;
        return $r0;
    }

    static int access$200(sun.nio.ch.SolarisEventPort)
    {
        sun.nio.ch.SolarisEventPort r0;
        int $i0;

        r0 := @parameter0: sun.nio.ch.SolarisEventPort;
        $i0 = r0.<sun.nio.ch.SolarisEventPort: int port>;
        return $i0;
    }

    static void access$300(sun.nio.ch.SolarisEventPort)
    {
        sun.nio.ch.SolarisEventPort r0;

        r0 := @parameter0: sun.nio.ch.SolarisEventPort;
        specialinvoke r0.<sun.nio.ch.SolarisEventPort: void implClose()>();
        return;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0, $r1;
        int $i0, $i1;

        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <sun.nio.ch.SolarisEventPort: sun.misc.Unsafe unsafe> = $r0;
        $r1 = <sun.nio.ch.SolarisEventPort: sun.misc.Unsafe unsafe>;
        $i0 = virtualinvoke $r1.<sun.misc.Unsafe: int addressSize()>();
        <sun.nio.ch.SolarisEventPort: int addressSize> = $i0;
        $i1 = staticinvoke <sun.nio.ch.SolarisEventPort: int dependsArch(int,int)>(16, 24);
        <sun.nio.ch.SolarisEventPort: int SIZEOF_PORT_EVENT> = $i1;
        staticinvoke <sun.nio.ch.Util: void load()>();
        return;
    }
}
