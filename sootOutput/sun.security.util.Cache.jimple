public abstract class sun.security.util.Cache extends java.lang.Object
{

    protected void <init>()
    {
        sun.security.util.Cache r0;

        r0 := @this: sun.security.util.Cache;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public abstract int size();

    public abstract void clear();

    public abstract void put(java.lang.Object, java.lang.Object);

    public abstract java.lang.Object get(java.lang.Object);

    public abstract void remove(java.lang.Object);

    public abstract void setCapacity(int);

    public abstract void setTimeout(int);

    public abstract void accept(sun.security.util.Cache$CacheVisitor);

    public static sun.security.util.Cache newSoftMemoryCache(int)
    {
        int i0;
        sun.security.util.MemoryCache $r0;

        i0 := @parameter0: int;
        $r0 = new sun.security.util.MemoryCache;
        specialinvoke $r0.<sun.security.util.MemoryCache: void <init>(boolean,int)>(1, i0);
        return $r0;
    }

    public static sun.security.util.Cache newSoftMemoryCache(int, int)
    {
        int i0, i1;
        sun.security.util.MemoryCache $r0;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r0 = new sun.security.util.MemoryCache;
        specialinvoke $r0.<sun.security.util.MemoryCache: void <init>(boolean,int,int)>(1, i0, i1);
        return $r0;
    }

    public static sun.security.util.Cache newHardMemoryCache(int)
    {
        int i0;
        sun.security.util.MemoryCache $r0;

        i0 := @parameter0: int;
        $r0 = new sun.security.util.MemoryCache;
        specialinvoke $r0.<sun.security.util.MemoryCache: void <init>(boolean,int)>(0, i0);
        return $r0;
    }

    public static sun.security.util.Cache newNullCache()
    {
        sun.security.util.Cache $r0;

        $r0 = <sun.security.util.NullCache: sun.security.util.Cache INSTANCE>;
        return $r0;
    }

    public static sun.security.util.Cache newHardMemoryCache(int, int)
    {
        int i0, i1;
        sun.security.util.MemoryCache $r0;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r0 = new sun.security.util.MemoryCache;
        specialinvoke $r0.<sun.security.util.MemoryCache: void <init>(boolean,int,int)>(0, i0, i1);
        return $r0;
    }
}
