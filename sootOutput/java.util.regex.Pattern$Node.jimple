class java.util.regex.Pattern$Node extends java.lang.Object
{
    java.util.regex.Pattern$Node next;

    void <init>()
    {
        java.util.regex.Pattern$Node r0, $r1;

        r0 := @this: java.util.regex.Pattern$Node;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = <java.util.regex.Pattern: java.util.regex.Pattern$Node accept>;
        r0.<java.util.regex.Pattern$Node: java.util.regex.Pattern$Node next> = $r1;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$Node r0;
        java.util.regex.Matcher r1;
        int i0, $i1, $i2;
        java.lang.CharSequence r2;
        int[] $r3, $r4;

        r0 := @this: java.util.regex.Pattern$Node;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        r1.<java.util.regex.Matcher: int last> = i0;
        $r3 = r1.<java.util.regex.Matcher: int[] groups>;
        $i1 = r1.<java.util.regex.Matcher: int first>;
        $r3[0] = $i1;
        $r4 = r1.<java.util.regex.Matcher: int[] groups>;
        $i2 = r1.<java.util.regex.Matcher: int last>;
        $r4[1] = $i2;
        return 1;
    }

    boolean study(java.util.regex.Pattern$TreeInfo)
    {
        java.util.regex.Pattern$Node r0, $r2, $r3;
        java.util.regex.Pattern$TreeInfo r1;
        boolean $z0, $z1;

        r0 := @this: java.util.regex.Pattern$Node;
        r1 := @parameter0: java.util.regex.Pattern$TreeInfo;
        $r2 = r0.<java.util.regex.Pattern$Node: java.util.regex.Pattern$Node next>;
        if $r2 == null goto label0;

        $r3 = r0.<java.util.regex.Pattern$Node: java.util.regex.Pattern$Node next>;
        $z0 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        return $z0;

     label0:
        $z1 = r1.<java.util.regex.Pattern$TreeInfo: boolean deterministic>;
        return $z1;
    }
}
