class java.text.RuleBasedBreakIterator extends java.text.BreakIterator
{
    protected static final byte IGNORE;
    private static final short START_STATE;
    private static final short STOP_STATE;
    static final byte[] LABEL;
    static final int LABEL_LENGTH;
    static final byte supportedVersion;
    private static final int HEADER_LENGTH;
    private static final int BMP_INDICES_LENGTH;
    private sun.text.CompactByteArray charCategoryTable;
    private sun.text.SupplementaryCharacterData supplementaryCharCategoryTable;
    private short[] stateTable;
    private short[] backwardsStateTable;
    private boolean[] endStates;
    private boolean[] lookaheadStates;
    private byte[] additionalData;
    private int numCategories;
    private java.text.CharacterIterator text;
    private long checksum;
    private int cachedLastKnownBreak;

    public void <init>(java.lang.String) throws java.io.IOException, java.util.MissingResourceException
    {
        java.text.RuleBasedBreakIterator r0;
        java.lang.String r1;

        r0 := @this: java.text.RuleBasedBreakIterator;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.text.BreakIterator: void <init>()>();
        r0.<java.text.RuleBasedBreakIterator: sun.text.CompactByteArray charCategoryTable> = null;
        r0.<java.text.RuleBasedBreakIterator: sun.text.SupplementaryCharacterData supplementaryCharCategoryTable> = null;
        r0.<java.text.RuleBasedBreakIterator: short[] stateTable> = null;
        r0.<java.text.RuleBasedBreakIterator: short[] backwardsStateTable> = null;
        r0.<java.text.RuleBasedBreakIterator: boolean[] endStates> = null;
        r0.<java.text.RuleBasedBreakIterator: boolean[] lookaheadStates> = null;
        r0.<java.text.RuleBasedBreakIterator: byte[] additionalData> = null;
        r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text> = null;
        r0.<java.text.RuleBasedBreakIterator: int cachedLastKnownBreak> = -1;
        virtualinvoke r0.<java.text.RuleBasedBreakIterator: void readTables(java.lang.String)>(r1);
        return;
    }

    protected void readTables(java.lang.String) throws java.io.IOException, java.util.MissingResourceException
    {
        java.text.RuleBasedBreakIterator r0;
        java.lang.String r1;
        byte[] r2, r13, $r16, $r17;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i13, i15, $i16, i18, $i19, i22, $i23, $i24, $i25, $i26;
        int[] r3;
        long $l11;
        short[] $r4, $r5, $r6, $r7, r12, $r18;
        short $s12, $s14, $s21;
        boolean[] $r8, $r9, $r10, $r11, $r19;
        byte $b17, $b20;
        boolean $z0, $z1;
        sun.text.CompactByteArray $r14;
        sun.text.SupplementaryCharacterData $r15;

        r0 := @this: java.text.RuleBasedBreakIterator;
        r1 := @parameter0: java.lang.String;
        r2 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: byte[] readFile(java.lang.String)>(r1);
        i0 = staticinvoke <java.text.BreakIterator: int getInt(byte[],int)>(r2, 0);
        i1 = staticinvoke <java.text.BreakIterator: int getInt(byte[],int)>(r2, 4);
        i2 = staticinvoke <java.text.BreakIterator: int getInt(byte[],int)>(r2, 8);
        i3 = staticinvoke <java.text.BreakIterator: int getInt(byte[],int)>(r2, 12);
        i4 = staticinvoke <java.text.BreakIterator: int getInt(byte[],int)>(r2, 16);
        i5 = staticinvoke <java.text.BreakIterator: int getInt(byte[],int)>(r2, 20);
        i6 = staticinvoke <java.text.BreakIterator: int getInt(byte[],int)>(r2, 24);
        $l11 = staticinvoke <java.text.BreakIterator: long getLong(byte[],int)>(r2, 28);
        r0.<java.text.RuleBasedBreakIterator: long checksum> = $l11;
        $r4 = newarray (short)[i0];
        r0.<java.text.RuleBasedBreakIterator: short[] stateTable> = $r4;
        i7 = 36;
        i8 = 0;

     label0:
        if i8 >= i0 goto label1;

        $r5 = r0.<java.text.RuleBasedBreakIterator: short[] stateTable>;
        $s12 = staticinvoke <java.text.BreakIterator: short getShort(byte[],int)>(r2, i7);
        $r5[i8] = $s12;
        i8 = i8 + 1;
        i7 = i7 + 2;
        goto label0;

     label1:
        $r6 = newarray (short)[i1];
        r0.<java.text.RuleBasedBreakIterator: short[] backwardsStateTable> = $r6;
        i13 = 0;

     label2:
        if i13 >= i1 goto label3;

        $r7 = r0.<java.text.RuleBasedBreakIterator: short[] backwardsStateTable>;
        $s14 = staticinvoke <java.text.BreakIterator: short getShort(byte[],int)>(r2, i7);
        $r7[i13] = $s14;
        i13 = i13 + 1;
        i7 = i7 + 2;
        goto label2;

     label3:
        $r8 = newarray (boolean)[i2];
        r0.<java.text.RuleBasedBreakIterator: boolean[] endStates> = $r8;
        i15 = 0;

     label4:
        if i15 >= i2 goto label7;

        $r9 = r0.<java.text.RuleBasedBreakIterator: boolean[] endStates>;
        $i16 = i15;
        $b17 = r2[i7];
        if $b17 != 1 goto label5;

        $z0 = 1;
        goto label6;

     label5:
        $z0 = 0;

     label6:
        $r9[$i16] = $z0;
        i15 = i15 + 1;
        i7 = i7 + 1;
        goto label4;

     label7:
        $r10 = newarray (boolean)[i3];
        r0.<java.text.RuleBasedBreakIterator: boolean[] lookaheadStates> = $r10;
        i18 = 0;

     label8:
        if i18 >= i3 goto label11;

        $r11 = r0.<java.text.RuleBasedBreakIterator: boolean[] lookaheadStates>;
        $i19 = i18;
        $b20 = r2[i7];
        if $b20 != 1 goto label9;

        $z1 = 1;
        goto label10;

     label9:
        $z1 = 0;

     label10:
        $r11[$i19] = $z1;
        i18 = i18 + 1;
        i7 = i7 + 1;
        goto label8;

     label11:
        r12 = newarray (short)[512];
        i9 = 0;

     label12:
        if i9 >= 512 goto label13;

        $s21 = staticinvoke <java.text.BreakIterator: short getShort(byte[],int)>(r2, i7);
        r12[i9] = $s21;
        i9 = i9 + 1;
        i7 = i7 + 2;
        goto label12;

     label13:
        r13 = newarray (byte)[i4];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i7, r13, 0, i4);
        i22 = i7 + i4;
        $r14 = new sun.text.CompactByteArray;
        specialinvoke $r14.<sun.text.CompactByteArray: void <init>(short[],byte[])>(r12, r13);
        r0.<java.text.RuleBasedBreakIterator: sun.text.CompactByteArray charCategoryTable> = $r14;
        r3 = newarray (int)[i5];
        i10 = 0;

     label14:
        if i10 >= i5 goto label15;

        $i23 = staticinvoke <java.text.BreakIterator: int getInt(byte[],int)>(r2, i22);
        r3[i10] = $i23;
        i10 = i10 + 1;
        i22 = i22 + 4;
        goto label14;

     label15:
        $r15 = new sun.text.SupplementaryCharacterData;
        specialinvoke $r15.<sun.text.SupplementaryCharacterData: void <init>(int[])>(r3);
        r0.<java.text.RuleBasedBreakIterator: sun.text.SupplementaryCharacterData supplementaryCharCategoryTable> = $r15;
        if i6 <= 0 goto label16;

        $r16 = newarray (byte)[i6];
        r0.<java.text.RuleBasedBreakIterator: byte[] additionalData> = $r16;
        $r17 = r0.<java.text.RuleBasedBreakIterator: byte[] additionalData>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i22, $r17, 0, i6);

     label16:
        $r18 = r0.<java.text.RuleBasedBreakIterator: short[] stateTable>;
        $i24 = lengthof $r18;
        $r19 = r0.<java.text.RuleBasedBreakIterator: boolean[] endStates>;
        $i25 = lengthof $r19;
        $i26 = $i24 / $i25;
        r0.<java.text.RuleBasedBreakIterator: int numCategories> = $i26;
        return;
    }

    protected byte[] readFile(java.lang.String) throws java.io.IOException, java.util.MissingResourceException
    {
        java.text.RuleBasedBreakIterator r0;
        java.lang.String r1, $r9, $r18;
        java.text.RuleBasedBreakIterator$1 $r2;
        java.io.BufferedInputStream r3;
        java.security.PrivilegedActionException r4, $r7;
        int i0, i1, i2, $i3, $i4, $i5, i10, i11, $i12;
        byte[] r5, $r11, r19;
        java.lang.Object $r6;
        java.lang.InternalError $r8;
        java.util.MissingResourceException $r10, $r12, $r13, $r20;
        byte $b6, $b7, $b8, $b9;
        java.lang.StringBuilder $r14, $r15, $r16, $r17;

        r0 := @this: java.text.RuleBasedBreakIterator;
        r1 := @parameter0: java.lang.String;

     label0:
        $r2 = new java.text.RuleBasedBreakIterator$1;
        specialinvoke $r2.<java.text.RuleBasedBreakIterator$1: void <init>(java.text.RuleBasedBreakIterator,java.lang.String)>(r0, r1);
        $r6 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r2);
        r3 = (java.io.BufferedInputStream) $r6;

     label1:
        goto label3;

     label2:
        $r7 := @caughtexception;
        r4 = $r7;
        $r8 = new java.lang.InternalError;
        $r9 = virtualinvoke r4.<java.security.PrivilegedActionException: java.lang.String toString()>();
        specialinvoke $r8.<java.lang.InternalError: void <init>(java.lang.String)>($r9);
        throw $r8;

     label3:
        i2 = 0;
        $i3 = <java.text.RuleBasedBreakIterator: int LABEL_LENGTH>;
        i0 = $i3 + 5;
        r5 = newarray (byte)[i0];
        $i4 = virtualinvoke r3.<java.io.BufferedInputStream: int read(byte[])>(r5);
        if $i4 == i0 goto label4;

        $r10 = new java.util.MissingResourceException;
        specialinvoke $r10.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>("Wrong header length", r1, "");
        throw $r10;

     label4:
        i1 = 0;

     label5:
        $i5 = <java.text.RuleBasedBreakIterator: int LABEL_LENGTH>;
        if i1 >= $i5 goto label7;

        $b6 = r5[i2];
        $r11 = <java.text.RuleBasedBreakIterator: byte[] LABEL>;
        $b7 = $r11[i2];
        if $b6 == $b7 goto label6;

        $r12 = new java.util.MissingResourceException;
        specialinvoke $r12.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>("Wrong magic number", r1, "");
        throw $r12;

     label6:
        i1 = i1 + 1;
        i2 = i2 + 1;
        goto label5;

     label7:
        $b8 = r5[i2];
        if $b8 == 1 goto label8;

        $r13 = new java.util.MissingResourceException;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported version(");
        $b9 = r5[i2];
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b9);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r13.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r18, r1, "");
        throw $r13;

     label8:
        i10 = i2 + 1;
        i11 = staticinvoke <java.text.BreakIterator: int getInt(byte[],int)>(r5, i10);
        r19 = newarray (byte)[i11];
        $i12 = virtualinvoke r3.<java.io.BufferedInputStream: int read(byte[])>(r19);
        if $i12 == i11 goto label9;

        $r20 = new java.util.MissingResourceException;
        specialinvoke $r20.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>("Wrong data length", r1, "");
        throw $r20;

     label9:
        virtualinvoke r3.<java.io.BufferedInputStream: void close()>();
        return r19;

        catch java.security.PrivilegedActionException from label0 to label1 with label2;
    }

    byte[] getAdditionalData()
    {
        java.text.RuleBasedBreakIterator r0;
        byte[] $r1;

        r0 := @this: java.text.RuleBasedBreakIterator;
        $r1 = r0.<java.text.RuleBasedBreakIterator: byte[] additionalData>;
        return $r1;
    }

    void setAdditionalData(byte[])
    {
        java.text.RuleBasedBreakIterator r0;
        byte[] r1;

        r0 := @this: java.text.RuleBasedBreakIterator;
        r1 := @parameter0: byte[];
        r0.<java.text.RuleBasedBreakIterator: byte[] additionalData> = r1;
        return;
    }

    public java.lang.Object clone()
    {
        java.text.RuleBasedBreakIterator r0, r1;
        java.lang.Object $r2, $r5;
        java.text.CharacterIterator $r3, $r4, $r6;

        r0 := @this: java.text.RuleBasedBreakIterator;
        $r2 = specialinvoke r0.<java.text.BreakIterator: java.lang.Object clone()>();
        r1 = (java.text.RuleBasedBreakIterator) $r2;
        $r3 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        if $r3 == null goto label0;

        $r4 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        $r5 = interfaceinvoke $r4.<java.text.CharacterIterator: java.lang.Object clone()>();
        $r6 = (java.text.CharacterIterator) $r5;
        r1.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text> = $r6;

     label0:
        return r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.text.RuleBasedBreakIterator r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        long $l0, $l1;
        byte $b2;
        java.text.CharacterIterator $r3, $r4, $r5, $r6;
        java.lang.ClassCastException $r7, r8;

        r0 := @this: java.text.RuleBasedBreakIterator;
        r1 := @parameter0: java.lang.Object;

     label0:
        if r1 != null goto label2;

        $z0 = 0;

     label1:
        return $z0;

     label2:
        r2 = (java.text.RuleBasedBreakIterator) r1;
        $l0 = r0.<java.text.RuleBasedBreakIterator: long checksum>;
        $l1 = r2.<java.text.RuleBasedBreakIterator: long checksum>;
        $b2 = $l0 cmp $l1;
        if $b2 == 0 goto label4;

        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r3 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        if $r3 != null goto label7;

        $r4 = r2.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        if $r4 != null goto label5;

        $z2 = 1;
        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;

     label7:
        $r5 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        $r6 = r2.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        $z3 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

     label8:
        return $z3;

     label9:
        $r7 := @caughtexception;
        r8 = $r7;
        return 0;

        catch java.lang.ClassCastException from label0 to label1 with label9;
        catch java.lang.ClassCastException from label2 to label3 with label9;
        catch java.lang.ClassCastException from label4 to label6 with label9;
        catch java.lang.ClassCastException from label7 to label8 with label9;
    }

    public java.lang.String toString()
    {
        java.text.RuleBasedBreakIterator r0;
        java.lang.StringBuffer $r1, r2;
        java.lang.StringBuilder $r4, $r5, $r7;
        long $l0;
        java.lang.String $r6, $r8, $r11;

        r0 := @this: java.text.RuleBasedBreakIterator;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checksum=0x");
        $l0 = r0.<java.text.RuleBasedBreakIterator: long checksum>;
        $r6 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l0);
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);
        $r11 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r11;
    }

    public int hashCode()
    {
        java.text.RuleBasedBreakIterator r0;
        long $l0;
        int $i1;

        r0 := @this: java.text.RuleBasedBreakIterator;
        $l0 = r0.<java.text.RuleBasedBreakIterator: long checksum>;
        $i1 = (int) $l0;
        return $i1;
    }

    public int first()
    {
        java.text.RuleBasedBreakIterator r0;
        java.text.CharacterIterator r1;
        int $i1;

        r0 := @this: java.text.RuleBasedBreakIterator;
        r1 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator getText()>();
        interfaceinvoke r1.<java.text.CharacterIterator: char first()>();
        $i1 = interfaceinvoke r1.<java.text.CharacterIterator: int getIndex()>();
        return $i1;
    }

    public int last()
    {
        java.text.RuleBasedBreakIterator r0;
        java.text.CharacterIterator r1;
        int $i0, $i2;

        r0 := @this: java.text.RuleBasedBreakIterator;
        r1 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator getText()>();
        $i0 = interfaceinvoke r1.<java.text.CharacterIterator: int getEndIndex()>();
        interfaceinvoke r1.<java.text.CharacterIterator: char setIndex(int)>($i0);
        $i2 = interfaceinvoke r1.<java.text.CharacterIterator: int getIndex()>();
        return $i2;
    }

    public int next(int)
    {
        java.text.RuleBasedBreakIterator r0;
        int i0, i1;

        r0 := @this: java.text.RuleBasedBreakIterator;
        i0 := @parameter0: int;
        i1 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int current()>();

     label0:
        if i0 <= 0 goto label1;

        i1 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int handleNext()>();
        i0 = i0 + -1;
        goto label0;

     label1:
        if i0 >= 0 goto label2;

        i1 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int previous()>();
        i0 = i0 + 1;
        goto label1;

     label2:
        return i1;
    }

    public int next()
    {
        java.text.RuleBasedBreakIterator r0;
        int $i0;

        r0 := @this: java.text.RuleBasedBreakIterator;
        $i0 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int handleNext()>();
        return $i0;
    }

    public int previous()
    {
        java.text.RuleBasedBreakIterator r0;
        java.text.CharacterIterator r1;
        int i0, i1, i2, $i3, $i4;

        r0 := @this: java.text.RuleBasedBreakIterator;
        r1 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator getText()>();
        $i3 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int current()>();
        $i4 = interfaceinvoke r1.<java.text.CharacterIterator: int getBeginIndex()>();
        if $i3 != $i4 goto label0;

        return -1;

     label0:
        i0 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int current()>();
        i1 = r0.<java.text.RuleBasedBreakIterator: int cachedLastKnownBreak>;
        if i1 >= i0 goto label1;

        if i1 > -1 goto label2;

     label1:
        specialinvoke r0.<java.text.RuleBasedBreakIterator: int getPrevious()>();
        i1 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int handlePrevious()>();
        goto label3;

     label2:
        interfaceinvoke r1.<java.text.CharacterIterator: char setIndex(int)>(i1);

     label3:
        i2 = i1;

     label4:
        if i2 == -1 goto label5;

        if i2 >= i0 goto label5;

        i1 = i2;
        i2 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int handleNext()>();
        goto label4;

     label5:
        interfaceinvoke r1.<java.text.CharacterIterator: char setIndex(int)>(i1);
        r0.<java.text.RuleBasedBreakIterator: int cachedLastKnownBreak> = i1;
        return i1;
    }

    private int getPrevious()
    {
        java.text.RuleBasedBreakIterator r0;
        char c0, c1;
        java.text.CharacterIterator $r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1;
        int $i2, $i3, $i4;

        r0 := @this: java.text.RuleBasedBreakIterator;
        $r1 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        c0 = interfaceinvoke $r1.<java.text.CharacterIterator: char previous()>();
        $z0 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(c0);
        if $z0 == 0 goto label1;

        $r2 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        $i2 = interfaceinvoke $r2.<java.text.CharacterIterator: int getIndex()>();
        $r3 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        $i3 = interfaceinvoke $r3.<java.text.CharacterIterator: int getBeginIndex()>();
        if $i2 <= $i3 goto label1;

        $r4 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        c1 = interfaceinvoke $r4.<java.text.CharacterIterator: char previous()>();
        $z1 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c1);
        if $z1 == 0 goto label0;

        $i4 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(c1, c0);
        return $i4;

     label0:
        $r5 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        interfaceinvoke $r5.<java.text.CharacterIterator: char next()>();

     label1:
        return c0;
    }

    int getCurrent()
    {
        java.text.RuleBasedBreakIterator r0;
        char c0, c1;
        java.text.CharacterIterator $r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1;
        int $i2, $i3, $i5;

        r0 := @this: java.text.RuleBasedBreakIterator;
        $r1 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        c0 = interfaceinvoke $r1.<java.text.CharacterIterator: char current()>();
        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c0);
        if $z0 == 0 goto label0;

        $r2 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        $i2 = interfaceinvoke $r2.<java.text.CharacterIterator: int getIndex()>();
        $r3 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        $i3 = interfaceinvoke $r3.<java.text.CharacterIterator: int getEndIndex()>();
        if $i2 >= $i3 goto label0;

        $r4 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        c1 = interfaceinvoke $r4.<java.text.CharacterIterator: char next()>();
        $r5 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        interfaceinvoke $r5.<java.text.CharacterIterator: char previous()>();
        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(c1);
        if $z1 == 0 goto label0;

        $i5 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(c0, c1);
        return $i5;

     label0:
        return c0;
    }

    private int getCurrentCodePointCount()
    {
        java.text.RuleBasedBreakIterator r0;
        char c0, c1;
        java.text.CharacterIterator $r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1;
        int $i2, $i3;

        r0 := @this: java.text.RuleBasedBreakIterator;
        $r1 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        c0 = interfaceinvoke $r1.<java.text.CharacterIterator: char current()>();
        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c0);
        if $z0 == 0 goto label0;

        $r2 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        $i2 = interfaceinvoke $r2.<java.text.CharacterIterator: int getIndex()>();
        $r3 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        $i3 = interfaceinvoke $r3.<java.text.CharacterIterator: int getEndIndex()>();
        if $i2 >= $i3 goto label0;

        $r4 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        c1 = interfaceinvoke $r4.<java.text.CharacterIterator: char next()>();
        $r5 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        interfaceinvoke $r5.<java.text.CharacterIterator: char previous()>();
        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(c1);
        if $z1 == 0 goto label0;

        return 2;

     label0:
        return 1;
    }

    int getNext()
    {
        java.text.RuleBasedBreakIterator r0;
        int i0, i1, $i2, $i3, i4, $i6;
        java.text.CharacterIterator $r1, $r2, $r3;

        r0 := @this: java.text.RuleBasedBreakIterator;
        $r1 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        i0 = interfaceinvoke $r1.<java.text.CharacterIterator: int getIndex()>();
        $r2 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        i1 = interfaceinvoke $r2.<java.text.CharacterIterator: int getEndIndex()>();
        if i0 == i1 goto label0;

        $i2 = specialinvoke r0.<java.text.RuleBasedBreakIterator: int getCurrentCodePointCount()>();
        $i3 = i0 + $i2;
        i4 = $i3;
        if $i3 < i1 goto label1;

     label0:
        return 65535;

     label1:
        $r3 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        interfaceinvoke $r3.<java.text.CharacterIterator: char setIndex(int)>(i4);
        $i6 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int getCurrent()>();
        return $i6;
    }

    private int getNextIndex()
    {
        java.text.RuleBasedBreakIterator r0;
        int i0, i1, $i2, $i3;
        java.text.CharacterIterator $r1, $r2;

        r0 := @this: java.text.RuleBasedBreakIterator;
        $r1 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        $i2 = interfaceinvoke $r1.<java.text.CharacterIterator: int getIndex()>();
        $i3 = specialinvoke r0.<java.text.RuleBasedBreakIterator: int getCurrentCodePointCount()>();
        i0 = $i2 + $i3;
        $r2 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        i1 = interfaceinvoke $r2.<java.text.CharacterIterator: int getEndIndex()>();
        if i0 <= i1 goto label0;

        return i1;

     label0:
        return i0;
    }

    protected static final void checkOffset(int, java.text.CharacterIterator)
    {
        int i0, $i1, $i2;
        java.text.CharacterIterator r0;
        java.lang.IllegalArgumentException $r1;

        i0 := @parameter0: int;
        r0 := @parameter1: java.text.CharacterIterator;
        $i1 = interfaceinvoke r0.<java.text.CharacterIterator: int getBeginIndex()>();
        if i0 < $i1 goto label0;

        $i2 = interfaceinvoke r0.<java.text.CharacterIterator: int getEndIndex()>();
        if i0 <= $i2 goto label1;

     label0:
        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("offset out of bounds");
        throw $r1;

     label1:
        return;
    }

    public int following(int)
    {
        java.text.RuleBasedBreakIterator r0;
        int i0, i1, $i3, $i4, $i5;
        java.text.CharacterIterator r1;

        r0 := @this: java.text.RuleBasedBreakIterator;
        i0 := @parameter0: int;
        r1 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator getText()>();
        staticinvoke <java.text.RuleBasedBreakIterator: void checkOffset(int,java.text.CharacterIterator)>(i0, r1);
        interfaceinvoke r1.<java.text.CharacterIterator: char setIndex(int)>(i0);
        $i3 = interfaceinvoke r1.<java.text.CharacterIterator: int getBeginIndex()>();
        if i0 != $i3 goto label0;

        $i4 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int handleNext()>();
        r0.<java.text.RuleBasedBreakIterator: int cachedLastKnownBreak> = $i4;
        $i5 = r0.<java.text.RuleBasedBreakIterator: int cachedLastKnownBreak>;
        return $i5;

     label0:
        i1 = r0.<java.text.RuleBasedBreakIterator: int cachedLastKnownBreak>;
        if i1 >= i0 goto label1;

        if i1 > -1 goto label2;

     label1:
        i1 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int handlePrevious()>();
        goto label3;

     label2:
        interfaceinvoke r1.<java.text.CharacterIterator: char setIndex(int)>(i1);

     label3:
        if i1 == -1 goto label4;

        if i1 > i0 goto label4;

        i1 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int handleNext()>();
        goto label3;

     label4:
        r0.<java.text.RuleBasedBreakIterator: int cachedLastKnownBreak> = i1;
        return i1;
    }

    public int preceding(int)
    {
        java.text.RuleBasedBreakIterator r0;
        int i0, $i2;
        java.text.CharacterIterator r1;

        r0 := @this: java.text.RuleBasedBreakIterator;
        i0 := @parameter0: int;
        r1 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator getText()>();
        staticinvoke <java.text.RuleBasedBreakIterator: void checkOffset(int,java.text.CharacterIterator)>(i0, r1);
        interfaceinvoke r1.<java.text.CharacterIterator: char setIndex(int)>(i0);
        $i2 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int previous()>();
        return $i2;
    }

    public boolean isBoundary(int)
    {
        java.text.RuleBasedBreakIterator r0;
        int i0, $i1, $i2, $i3;
        java.text.CharacterIterator r1;
        boolean $z0;

        r0 := @this: java.text.RuleBasedBreakIterator;
        i0 := @parameter0: int;
        r1 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator getText()>();
        staticinvoke <java.text.RuleBasedBreakIterator: void checkOffset(int,java.text.CharacterIterator)>(i0, r1);
        $i1 = interfaceinvoke r1.<java.text.CharacterIterator: int getBeginIndex()>();
        if i0 != $i1 goto label0;

        return 1;

     label0:
        $i2 = i0 - 1;
        $i3 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int following(int)>($i2);
        if $i3 != i0 goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int current()
    {
        java.text.RuleBasedBreakIterator r0;
        java.text.CharacterIterator $r1;
        int $i0;

        r0 := @this: java.text.RuleBasedBreakIterator;
        $r1 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator getText()>();
        $i0 = interfaceinvoke $r1.<java.text.CharacterIterator: int getIndex()>();
        return $i0;
    }

    public java.text.CharacterIterator getText()
    {
        java.text.RuleBasedBreakIterator r0;
        java.text.StringCharacterIterator $r1;
        java.text.CharacterIterator $r2, $r3;

        r0 := @this: java.text.RuleBasedBreakIterator;
        $r2 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        if $r2 != null goto label0;

        $r1 = new java.text.StringCharacterIterator;
        specialinvoke $r1.<java.text.StringCharacterIterator: void <init>(java.lang.String)>("");
        r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text> = $r1;

     label0:
        $r3 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        return $r3;
    }

    public void setText(java.text.CharacterIterator)
    {
        java.text.RuleBasedBreakIterator r0;
        java.text.CharacterIterator r1, $r5;
        int i0, $i2;
        boolean z0, $z1;
        java.lang.IllegalArgumentException r2, $r3;
        java.text.RuleBasedBreakIterator$SafeCharIterator $r4;

        r0 := @this: java.text.RuleBasedBreakIterator;
        r1 := @parameter0: java.text.CharacterIterator;
        i0 = interfaceinvoke r1.<java.text.CharacterIterator: int getEndIndex()>();

     label0:
        interfaceinvoke r1.<java.text.CharacterIterator: char setIndex(int)>(i0);
        $i2 = interfaceinvoke r1.<java.text.CharacterIterator: int getIndex()>();
        if $i2 != i0 goto label1;

        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;
        r2 = $r3;
        z0 = 0;

     label5:
        if z0 == 0 goto label6;

        r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text> = r1;
        goto label7;

     label6:
        $r4 = new java.text.RuleBasedBreakIterator$SafeCharIterator;
        specialinvoke $r4.<java.text.RuleBasedBreakIterator$SafeCharIterator: void <init>(java.text.CharacterIterator)>(r1);
        r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text> = $r4;

     label7:
        $r5 = r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator text>;
        interfaceinvoke $r5.<java.text.CharacterIterator: char first()>();
        r0.<java.text.RuleBasedBreakIterator: int cachedLastKnownBreak> = -1;
        return;

        catch java.lang.IllegalArgumentException from label0 to label3 with label4;
    }

    protected int handleNext()
    {
        java.text.RuleBasedBreakIterator r0;
        java.text.CharacterIterator r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        boolean[] $r2, $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: java.text.RuleBasedBreakIterator;
        r1 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator getText()>();
        $i5 = interfaceinvoke r1.<java.text.CharacterIterator: int getIndex()>();
        $i6 = interfaceinvoke r1.<java.text.CharacterIterator: int getEndIndex()>();
        if $i5 != $i6 goto label0;

        return -1;

     label0:
        i0 = specialinvoke r0.<java.text.RuleBasedBreakIterator: int getNextIndex()>();
        i1 = 0;
        i2 = 1;
        i3 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int getCurrent()>();

     label1:
        if i3 == 65535 goto label6;

        if i2 == 0 goto label6;

        i4 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int lookupCategory(int)>(i3);
        if i4 == -1 goto label2;

        i2 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int lookupState(int,int)>(i2, i4);

     label2:
        $r2 = r0.<java.text.RuleBasedBreakIterator: boolean[] lookaheadStates>;
        $z0 = $r2[i2];
        if $z0 == 0 goto label4;

        $r3 = r0.<java.text.RuleBasedBreakIterator: boolean[] endStates>;
        $z1 = $r3[i2];
        if $z1 == 0 goto label3;

        i0 = i1;
        goto label5;

     label3:
        i1 = specialinvoke r0.<java.text.RuleBasedBreakIterator: int getNextIndex()>();
        goto label5;

     label4:
        $r4 = r0.<java.text.RuleBasedBreakIterator: boolean[] endStates>;
        $z2 = $r4[i2];
        if $z2 == 0 goto label5;

        i0 = specialinvoke r0.<java.text.RuleBasedBreakIterator: int getNextIndex()>();

     label5:
        i3 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int getNext()>();
        goto label1;

     label6:
        if i3 != 65535 goto label7;

        $i7 = interfaceinvoke r1.<java.text.CharacterIterator: int getEndIndex()>();
        if i1 != $i7 goto label7;

        i0 = i1;

     label7:
        interfaceinvoke r1.<java.text.CharacterIterator: char setIndex(int)>(i0);
        return i0;
    }

    protected int handlePrevious()
    {
        java.text.RuleBasedBreakIterator r0;
        java.text.CharacterIterator r1;
        int i0, i1, i2, i3, $i7;

        r0 := @this: java.text.RuleBasedBreakIterator;
        r1 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: java.text.CharacterIterator getText()>();
        i0 = 1;
        i1 = 0;
        i2 = 0;
        i3 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int getCurrent()>();

     label0:
        if i3 == 65535 goto label2;

        if i0 == 0 goto label2;

        i2 = i1;
        i1 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int lookupCategory(int)>(i3);
        if i1 == -1 goto label1;

        i0 = virtualinvoke r0.<java.text.RuleBasedBreakIterator: int lookupBackwardState(int,int)>(i0, i1);

     label1:
        i3 = specialinvoke r0.<java.text.RuleBasedBreakIterator: int getPrevious()>();
        goto label0;

     label2:
        if i3 == 65535 goto label4;

        if i2 == -1 goto label3;

        virtualinvoke r0.<java.text.RuleBasedBreakIterator: int getNext()>();
        virtualinvoke r0.<java.text.RuleBasedBreakIterator: int getNext()>();
        goto label4;

     label3:
        virtualinvoke r0.<java.text.RuleBasedBreakIterator: int getNext()>();

     label4:
        $i7 = interfaceinvoke r1.<java.text.CharacterIterator: int getIndex()>();
        return $i7;
    }

    protected int lookupCategory(int)
    {
        java.text.RuleBasedBreakIterator r0;
        int i0, $i3;
        sun.text.CompactByteArray $r1;
        char $c1;
        byte $b2;
        sun.text.SupplementaryCharacterData $r2;

        r0 := @this: java.text.RuleBasedBreakIterator;
        i0 := @parameter0: int;
        if i0 >= 65536 goto label0;

        $r1 = r0.<java.text.RuleBasedBreakIterator: sun.text.CompactByteArray charCategoryTable>;
        $c1 = (char) i0;
        $b2 = virtualinvoke $r1.<sun.text.CompactByteArray: byte elementAt(char)>($c1);
        return $b2;

     label0:
        $r2 = r0.<java.text.RuleBasedBreakIterator: sun.text.SupplementaryCharacterData supplementaryCharCategoryTable>;
        $i3 = virtualinvoke $r2.<sun.text.SupplementaryCharacterData: int getValue(int)>(i0);
        return $i3;
    }

    protected int lookupState(int, int)
    {
        java.text.RuleBasedBreakIterator r0;
        int i0, i1, $i2, $i3, $i4;
        short[] $r1;
        short $s5;

        r0 := @this: java.text.RuleBasedBreakIterator;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = r0.<java.text.RuleBasedBreakIterator: short[] stateTable>;
        $i2 = r0.<java.text.RuleBasedBreakIterator: int numCategories>;
        $i3 = i0 * $i2;
        $i4 = $i3 + i1;
        $s5 = $r1[$i4];
        return $s5;
    }

    protected int lookupBackwardState(int, int)
    {
        java.text.RuleBasedBreakIterator r0;
        int i0, i1, $i2, $i3, $i4;
        short[] $r1;
        short $s5;

        r0 := @this: java.text.RuleBasedBreakIterator;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = r0.<java.text.RuleBasedBreakIterator: short[] backwardsStateTable>;
        $i2 = r0.<java.text.RuleBasedBreakIterator: int numCategories>;
        $i3 = i0 * $i2;
        $i4 = $i3 + i1;
        $s5 = $r1[$i4];
        return $s5;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1;
        int $i0;

        $r0 = newarray (byte)[7];
        $r0[0] = 66;
        $r0[1] = 73;
        $r0[2] = 100;
        $r0[3] = 97;
        $r0[4] = 116;
        $r0[5] = 97;
        $r0[6] = 0;
        <java.text.RuleBasedBreakIterator: byte[] LABEL> = $r0;
        $r1 = <java.text.RuleBasedBreakIterator: byte[] LABEL>;
        $i0 = lengthof $r1;
        <java.text.RuleBasedBreakIterator: int LABEL_LENGTH> = $i0;
        return;
    }
}
