public interface  sun.reflect.LangReflectAccess extends java.lang.Object
{

    public abstract java.lang.reflect.Field newField(java.lang.Class, java.lang.String, java.lang.Class, int, int, java.lang.String, byte[]);

    public abstract java.lang.reflect.Method newMethod(java.lang.Class, java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class[], int, int, java.lang.String, byte[], byte[], byte[]);

    public abstract java.lang.reflect.Constructor newConstructor(java.lang.Class, java.lang.Class[], java.lang.Class[], int, int, java.lang.String, byte[], byte[]);

    public abstract sun.reflect.MethodAccessor getMethodAccessor(java.lang.reflect.Method);

    public abstract void setMethodAccessor(java.lang.reflect.Method, sun.reflect.MethodAccessor);

    public abstract sun.reflect.ConstructorAccessor getConstructorAccessor(java.lang.reflect.Constructor);

    public abstract void setConstructorAccessor(java.lang.reflect.Constructor, sun.reflect.ConstructorAccessor);

    public abstract int getConstructorSlot(java.lang.reflect.Constructor);

    public abstract java.lang.String getConstructorSignature(java.lang.reflect.Constructor);

    public abstract byte[] getConstructorAnnotations(java.lang.reflect.Constructor);

    public abstract byte[] getConstructorParameterAnnotations(java.lang.reflect.Constructor);

    public abstract java.lang.reflect.Method copyMethod(java.lang.reflect.Method);

    public abstract java.lang.reflect.Field copyField(java.lang.reflect.Field);

    public abstract java.lang.reflect.Constructor copyConstructor(java.lang.reflect.Constructor);
}
