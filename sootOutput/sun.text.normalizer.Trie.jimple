public abstract class sun.text.normalizer.Trie extends java.lang.Object
{
    protected static final int LEAD_INDEX_OFFSET_;
    protected static final int INDEX_STAGE_1_SHIFT_;
    protected static final int INDEX_STAGE_2_SHIFT_;
    protected static final int DATA_BLOCK_LENGTH;
    protected static final int INDEX_STAGE_3_MASK_;
    protected static final int SURROGATE_BLOCK_BITS;
    protected static final int SURROGATE_BLOCK_COUNT;
    protected static final int BMP_INDEX_LENGTH;
    protected static final int SURROGATE_MASK_;
    protected char[] m_index_;
    protected sun.text.normalizer.Trie$DataManipulate m_dataManipulate_;
    protected int m_dataOffset_;
    protected int m_dataLength_;
    protected static final int HEADER_OPTIONS_LATIN1_IS_LINEAR_MASK_;
    protected static final int HEADER_SIGNATURE_;
    private static final int HEADER_OPTIONS_SHIFT_MASK_;
    protected static final int HEADER_OPTIONS_INDEX_SHIFT_;
    protected static final int HEADER_OPTIONS_DATA_IS_32_BIT_;
    private boolean m_isLatin1Linear_;
    private int m_options_;

    protected void <init>(java.io.InputStream, sun.text.normalizer.Trie$DataManipulate) throws java.io.IOException
    {
        sun.text.normalizer.Trie r0;
        java.io.InputStream r1;
        sun.text.normalizer.Trie$DataManipulate r2;
        java.io.DataInputStream r3, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r5;
        sun.text.normalizer.Trie$DefaultGetFoldingOffset $r6;

        r0 := @this: sun.text.normalizer.Trie;
        r1 := @parameter0: java.io.InputStream;
        r2 := @parameter1: sun.text.normalizer.Trie$DataManipulate;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r4 = new java.io.DataInputStream;
        specialinvoke $r4.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r1);
        r3 = $r4;
        i0 = virtualinvoke r3.<java.io.DataInputStream: int readInt()>();
        $i1 = virtualinvoke r3.<java.io.DataInputStream: int readInt()>();
        r0.<sun.text.normalizer.Trie: int m_options_> = $i1;
        $z0 = specialinvoke r0.<sun.text.normalizer.Trie: boolean checkHeader(int)>(i0);
        if $z0 != 0 goto label0;

        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ICU data file error: Trie header authentication failed, please check if you have the most updated ICU data file");
        throw $r5;

     label0:
        if r2 == null goto label1;

        r0.<sun.text.normalizer.Trie: sun.text.normalizer.Trie$DataManipulate m_dataManipulate_> = r2;
        goto label2;

     label1:
        $r6 = new sun.text.normalizer.Trie$DefaultGetFoldingOffset;
        specialinvoke $r6.<sun.text.normalizer.Trie$DefaultGetFoldingOffset: void <init>(sun.text.normalizer.Trie$1)>(null);
        r0.<sun.text.normalizer.Trie: sun.text.normalizer.Trie$DataManipulate m_dataManipulate_> = $r6;

     label2:
        $i2 = r0.<sun.text.normalizer.Trie: int m_options_>;
        $i3 = $i2 & 512;
        if $i3 == 0 goto label3;

        $z1 = 1;
        goto label4;

     label3:
        $z1 = 0;

     label4:
        r0.<sun.text.normalizer.Trie: boolean m_isLatin1Linear_> = $z1;
        $i4 = virtualinvoke r3.<java.io.DataInputStream: int readInt()>();
        r0.<sun.text.normalizer.Trie: int m_dataOffset_> = $i4;
        $i5 = virtualinvoke r3.<java.io.DataInputStream: int readInt()>();
        r0.<sun.text.normalizer.Trie: int m_dataLength_> = $i5;
        virtualinvoke r0.<sun.text.normalizer.Trie: void unserialize(java.io.InputStream)>(r1);
        return;
    }

    protected void <init>(char[], int, sun.text.normalizer.Trie$DataManipulate)
    {
        sun.text.normalizer.Trie r0;
        char[] r1, $r5;
        int i0, $i1, $i2, $i3;
        sun.text.normalizer.Trie$DataManipulate r2;
        sun.text.normalizer.Trie$DefaultGetFoldingOffset $r3;
        boolean $z0;

        r0 := @this: sun.text.normalizer.Trie;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        r2 := @parameter2: sun.text.normalizer.Trie$DataManipulate;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.text.normalizer.Trie: int m_options_> = i0;
        if r2 == null goto label0;

        r0.<sun.text.normalizer.Trie: sun.text.normalizer.Trie$DataManipulate m_dataManipulate_> = r2;
        goto label1;

     label0:
        $r3 = new sun.text.normalizer.Trie$DefaultGetFoldingOffset;
        specialinvoke $r3.<sun.text.normalizer.Trie$DefaultGetFoldingOffset: void <init>(sun.text.normalizer.Trie$1)>(null);
        r0.<sun.text.normalizer.Trie: sun.text.normalizer.Trie$DataManipulate m_dataManipulate_> = $r3;

     label1:
        $i1 = r0.<sun.text.normalizer.Trie: int m_options_>;
        $i2 = $i1 & 512;
        if $i2 == 0 goto label2;

        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        r0.<sun.text.normalizer.Trie: boolean m_isLatin1Linear_> = $z0;
        r0.<sun.text.normalizer.Trie: char[] m_index_> = r1;
        $r5 = r0.<sun.text.normalizer.Trie: char[] m_index_>;
        $i3 = lengthof $r5;
        r0.<sun.text.normalizer.Trie: int m_dataOffset_> = $i3;
        return;
    }

    protected abstract int getSurrogateOffset(char, char);

    protected abstract int getValue(int);

    protected abstract int getInitialValue();

    protected final int getRawOffset(int, char)
    {
        sun.text.normalizer.Trie r0;
        int i0, $i3, $i5, $i7;
        char c1, $c2, $c4, $c6;
        char[] $r1;

        r0 := @this: sun.text.normalizer.Trie;
        i0 := @parameter0: int;
        c1 := @parameter1: char;
        $r1 = r0.<sun.text.normalizer.Trie: char[] m_index_>;
        $c2 = c1 >> 5;
        $i3 = i0 + $c2;
        $c4 = $r1[$i3];
        $i5 = $c4 << 2;
        $c6 = c1 & 31;
        $i7 = $i5 + $c6;
        return $i7;
    }

    protected final int getBMPOffset(char)
    {
        sun.text.normalizer.Trie r0;
        char c0;
        int $i1;

        r0 := @this: sun.text.normalizer.Trie;
        c0 := @parameter0: char;
        if c0 < 55296 goto label0;

        if c0 > 56319 goto label0;

        $i1 = virtualinvoke r0.<sun.text.normalizer.Trie: int getRawOffset(int,char)>(320, c0);
        goto label1;

     label0:
        $i1 = virtualinvoke r0.<sun.text.normalizer.Trie: int getRawOffset(int,char)>(0, c0);

     label1:
        return $i1;
    }

    protected final int getLeadOffset(char)
    {
        sun.text.normalizer.Trie r0;
        char c0;
        int $i1;

        r0 := @this: sun.text.normalizer.Trie;
        c0 := @parameter0: char;
        $i1 = virtualinvoke r0.<sun.text.normalizer.Trie: int getRawOffset(int,char)>(0, c0);
        return $i1;
    }

    protected final int getCodePointOffset(int)
    {
        sun.text.normalizer.Trie r0;
        int i0, $i2, $i4, $i6, $i8;
        char $c1, $c3, $c5, $c7;

        r0 := @this: sun.text.normalizer.Trie;
        i0 := @parameter0: int;
        if i0 >= 0 goto label0;

        return -1;

     label0:
        if i0 >= 55296 goto label1;

        $c1 = (char) i0;
        $i2 = virtualinvoke r0.<sun.text.normalizer.Trie: int getRawOffset(int,char)>(0, $c1);
        return $i2;

     label1:
        if i0 >= 65536 goto label2;

        $c3 = (char) i0;
        $i4 = virtualinvoke r0.<sun.text.normalizer.Trie: int getBMPOffset(char)>($c3);
        return $i4;

     label2:
        if i0 > 1114111 goto label3;

        $c5 = staticinvoke <sun.text.normalizer.UTF16: char getLeadSurrogate(int)>(i0);
        $i6 = i0 & 1023;
        $c7 = (char) $i6;
        $i8 = virtualinvoke r0.<sun.text.normalizer.Trie: int getSurrogateOffset(char,char)>($c5, $c7);
        return $i8;

     label3:
        return -1;
    }

    protected void unserialize(java.io.InputStream) throws java.io.IOException
    {
        sun.text.normalizer.Trie r0;
        java.io.InputStream r1;
        java.io.DataInputStream r2, $r4;
        int i0, $i1, $i2;
        char[] $r3, $r5;
        char $c3;

        r0 := @this: sun.text.normalizer.Trie;
        r1 := @parameter0: java.io.InputStream;
        $i1 = r0.<sun.text.normalizer.Trie: int m_dataOffset_>;
        $r3 = newarray (char)[$i1];
        r0.<sun.text.normalizer.Trie: char[] m_index_> = $r3;
        $r4 = new java.io.DataInputStream;
        specialinvoke $r4.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r1);
        r2 = $r4;
        i0 = 0;

     label0:
        $i2 = r0.<sun.text.normalizer.Trie: int m_dataOffset_>;
        if i0 >= $i2 goto label1;

        $r5 = r0.<sun.text.normalizer.Trie: char[] m_index_>;
        $c3 = virtualinvoke r2.<java.io.DataInputStream: char readChar()>();
        $r5[i0] = $c3;
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    protected final boolean isIntTrie()
    {
        sun.text.normalizer.Trie r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: sun.text.normalizer.Trie;
        $i0 = r0.<sun.text.normalizer.Trie: int m_options_>;
        $i1 = $i0 & 256;
        if $i1 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    protected final boolean isCharTrie()
    {
        sun.text.normalizer.Trie r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: sun.text.normalizer.Trie;
        $i0 = r0.<sun.text.normalizer.Trie: int m_options_>;
        $i1 = $i0 & 256;
        if $i1 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private final boolean checkHeader(int)
    {
        sun.text.normalizer.Trie r0;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: sun.text.normalizer.Trie;
        i0 := @parameter0: int;
        if i0 == 1416784229 goto label0;

        return 0;

     label0:
        $i1 = r0.<sun.text.normalizer.Trie: int m_options_>;
        $i2 = $i1 & 15;
        if $i2 != 5 goto label1;

        $i3 = r0.<sun.text.normalizer.Trie: int m_options_>;
        $i4 = $i3 >> 4;
        $i5 = $i4 & 15;
        if $i5 == 2 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }
}
