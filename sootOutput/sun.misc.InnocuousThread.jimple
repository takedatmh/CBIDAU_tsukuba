public final class sun.misc.InnocuousThread extends java.lang.Thread
{
    private static final sun.misc.Unsafe UNSAFE;
    private static final java.lang.ThreadGroup THREADGROUP;
    private static final java.security.AccessControlContext ACC;
    private static final long THREADLOCALS;
    private static final long INHERITABLETHREADLOCALS;
    private static final long INHERITEDACCESSCONTROLCONTEXT;
    private volatile boolean hasRun;

    public void <init>(java.lang.Runnable)
    {
        sun.misc.InnocuousThread r0;
        java.lang.Runnable r1;
        java.lang.ThreadGroup $r2;
        java.security.AccessControlContext $r3;
        sun.misc.Unsafe $r4;
        long $l0;

        r0 := @this: sun.misc.InnocuousThread;
        r1 := @parameter0: java.lang.Runnable;
        $r2 = <sun.misc.InnocuousThread: java.lang.ThreadGroup THREADGROUP>;
        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>($r2, r1, "anInnocuousThread");
        $r4 = <sun.misc.InnocuousThread: sun.misc.Unsafe UNSAFE>;
        $l0 = <sun.misc.InnocuousThread: long INHERITEDACCESSCONTROLCONTEXT>;
        $r3 = <sun.misc.InnocuousThread: java.security.AccessControlContext ACC>;
        virtualinvoke $r4.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r0, $l0, $r3);
        virtualinvoke r0.<sun.misc.InnocuousThread: void eraseThreadLocals()>();
        return;
    }

    public java.lang.ClassLoader getContextClassLoader()
    {
        sun.misc.InnocuousThread r0;
        java.lang.ClassLoader $r1;

        r0 := @this: sun.misc.InnocuousThread;
        $r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        return $r1;
    }

    public void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
    {
        sun.misc.InnocuousThread r0;
        java.lang.Thread$UncaughtExceptionHandler r1;

        r0 := @this: sun.misc.InnocuousThread;
        r1 := @parameter0: java.lang.Thread$UncaughtExceptionHandler;
        return;
    }

    public void setContextClassLoader(java.lang.ClassLoader)
    {
        sun.misc.InnocuousThread r0;
        java.lang.ClassLoader r1;
        java.lang.SecurityException $r2;

        r0 := @this: sun.misc.InnocuousThread;
        r1 := @parameter0: java.lang.ClassLoader;
        $r2 = new java.lang.SecurityException;
        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("setContextClassLoader");
        throw $r2;
    }

    public void run()
    {
        sun.misc.InnocuousThread r0;
        java.lang.Thread $r1;
        boolean $z0;

        r0 := @this: sun.misc.InnocuousThread;
        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        if $r1 != r0 goto label0;

        $z0 = r0.<sun.misc.InnocuousThread: boolean hasRun>;
        if $z0 != 0 goto label0;

        r0.<sun.misc.InnocuousThread: boolean hasRun> = 1;
        specialinvoke r0.<java.lang.Thread: void run()>();

     label0:
        return;
    }

    public void eraseThreadLocals()
    {
        sun.misc.InnocuousThread r0;
        sun.misc.Unsafe $r1, $r2;
        long $l0, $l1;

        r0 := @this: sun.misc.InnocuousThread;
        $r1 = <sun.misc.InnocuousThread: sun.misc.Unsafe UNSAFE>;
        $l0 = <sun.misc.InnocuousThread: long THREADLOCALS>;
        virtualinvoke $r1.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r0, $l0, null);
        $r2 = <sun.misc.InnocuousThread: sun.misc.Unsafe UNSAFE>;
        $l1 = <sun.misc.InnocuousThread: long INHERITABLETHREADLOCALS>;
        virtualinvoke $r2.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r0, $l1, null);
        return;
    }

    static void <clinit>()
    {
        java.security.AccessControlContext $r0;
        java.security.ProtectionDomain $r1;
        java.lang.Class r2, r3;
        long l0, l1, $l2, $l3, $l4;
        java.lang.ThreadGroup r4, r5, $r23;
        java.security.ProtectionDomain[] $r6;
        sun.misc.Unsafe $r7, $r8, $r10, $r12, $r14, $r16, $r18, $r21;
        java.lang.reflect.Field $r9, $r11, $r13, $r15, $r17;
        java.lang.Thread $r19;
        java.lang.Object $r20, $r22;
        java.lang.Exception $r24, r25;
        java.lang.Error $r26;

     label0:
        $r0 = new java.security.AccessControlContext;
        $r6 = newarray (java.security.ProtectionDomain)[1];
        $r1 = new java.security.ProtectionDomain;
        specialinvoke $r1.<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection)>(null, null);
        $r6[0] = $r1;
        specialinvoke $r0.<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[])>($r6);
        <sun.misc.InnocuousThread: java.security.AccessControlContext ACC> = $r0;
        $r7 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <sun.misc.InnocuousThread: sun.misc.Unsafe UNSAFE> = $r7;
        r2 = class "java/lang/Thread";
        r3 = class "java/lang/ThreadGroup";
        $r8 = <sun.misc.InnocuousThread: sun.misc.Unsafe UNSAFE>;
        $r9 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("threadLocals");
        $l2 = virtualinvoke $r8.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r9);
        <sun.misc.InnocuousThread: long THREADLOCALS> = $l2;
        $r10 = <sun.misc.InnocuousThread: sun.misc.Unsafe UNSAFE>;
        $r11 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("inheritableThreadLocals");
        $l3 = virtualinvoke $r10.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r11);
        <sun.misc.InnocuousThread: long INHERITABLETHREADLOCALS> = $l3;
        $r12 = <sun.misc.InnocuousThread: sun.misc.Unsafe UNSAFE>;
        $r13 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("inheritedAccessControlContext");
        $l4 = virtualinvoke $r12.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r13);
        <sun.misc.InnocuousThread: long INHERITEDACCESSCONTROLCONTEXT> = $l4;
        $r14 = <sun.misc.InnocuousThread: sun.misc.Unsafe UNSAFE>;
        $r15 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("group");
        l0 = virtualinvoke $r14.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r15);
        $r16 = <sun.misc.InnocuousThread: sun.misc.Unsafe UNSAFE>;
        $r17 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("parent");
        l1 = virtualinvoke $r16.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r17);
        $r18 = <sun.misc.InnocuousThread: sun.misc.Unsafe UNSAFE>;
        $r19 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $r20 = virtualinvoke $r18.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>($r19, l0);
        r4 = (java.lang.ThreadGroup) $r20;

     label1:
        if r4 == null goto label3;

        $r21 = <sun.misc.InnocuousThread: sun.misc.Unsafe UNSAFE>;
        $r22 = virtualinvoke $r21.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>(r4, l1);
        r5 = (java.lang.ThreadGroup) $r22;
        if r5 != null goto label2;

        goto label3;

     label2:
        r4 = r5;
        goto label1;

     label3:
        $r23 = new java.lang.ThreadGroup;
        specialinvoke $r23.<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>(r4, "InnocuousThreadGroup");
        <sun.misc.InnocuousThread: java.lang.ThreadGroup THREADGROUP> = $r23;

     label4:
        goto label6;

     label5:
        $r24 := @caughtexception;
        r25 = $r24;
        $r26 = new java.lang.Error;
        specialinvoke $r26.<java.lang.Error: void <init>(java.lang.Throwable)>(r25);
        throw $r26;

     label6:
        return;

        catch java.lang.Exception from label0 to label4 with label5;
    }
}
