public final class sun.text.normalizer.UCharacterProperty extends java.lang.Object
{
    public sun.text.normalizer.CharTrie m_trie_;
    public char[] m_trieIndex_;
    public char[] m_trieData_;
    public int m_trieInitialValue_;
    public sun.text.normalizer.VersionInfo m_unicodeVersion_;
    public static final int SRC_PROPSVEC;
    public static final int SRC_COUNT;
    sun.text.normalizer.CharTrie m_additionalTrie_;
    int[] m_additionalVectors_;
    int m_additionalColumnsCount_;
    int m_maxBlockScriptValue_;
    int m_maxJTGValue_;
    private static sun.text.normalizer.UCharacterProperty INSTANCE_;
    private static final java.lang.String DATA_FILE_NAME_;
    private static final int DATA_BUFFER_SIZE_;
    private static final int VALUE_SHIFT_;
    private static final int UNSIGNED_VALUE_MASK_AFTER_SHIFT_;
    private static final int LEAD_SURROGATE_SHIFT_;
    private static final int SURROGATE_OFFSET_;
    private static final int FIRST_NIBBLE_SHIFT_;
    private static final int LAST_NIBBLE_MASK_;
    private static final int AGE_SHIFT_;

    public void setIndexData(sun.text.normalizer.CharTrie$FriendAgent)
    {
        sun.text.normalizer.UCharacterProperty r0;
        sun.text.normalizer.CharTrie$FriendAgent r1;
        char[] $r2, $r3;
        int $i0;

        r0 := @this: sun.text.normalizer.UCharacterProperty;
        r1 := @parameter0: sun.text.normalizer.CharTrie$FriendAgent;
        $r2 = virtualinvoke r1.<sun.text.normalizer.CharTrie$FriendAgent: char[] getPrivateIndex()>();
        r0.<sun.text.normalizer.UCharacterProperty: char[] m_trieIndex_> = $r2;
        $r3 = virtualinvoke r1.<sun.text.normalizer.CharTrie$FriendAgent: char[] getPrivateData()>();
        r0.<sun.text.normalizer.UCharacterProperty: char[] m_trieData_> = $r3;
        $i0 = virtualinvoke r1.<sun.text.normalizer.CharTrie$FriendAgent: int getPrivateInitialValue()>();
        r0.<sun.text.normalizer.UCharacterProperty: int m_trieInitialValue_> = $i0;
        return;
    }

    public final int getProperty(int)
    {
        sun.text.normalizer.UCharacterProperty r0;
        int i0, $i1, $i3, $i4, $i5, $i7, $i8, $i9, $i11, $i12, $i13, $i16, $i19;
        java.lang.ArrayIndexOutOfBoundsException r1, $r4;
        char[] $r2, $r3, $r5, $r6;
        char $c2, $c6, $c10, $c14, $c15, $c17, $c18;
        sun.text.normalizer.CharTrie $r7;

        r0 := @this: sun.text.normalizer.UCharacterProperty;
        i0 := @parameter0: int;
        if i0 < 55296 goto label0;

        if i0 <= 56319 goto label3;

        if i0 >= 65536 goto label3;

     label0:
        $r2 = r0.<sun.text.normalizer.UCharacterProperty: char[] m_trieData_>;
        $r3 = r0.<sun.text.normalizer.UCharacterProperty: char[] m_trieIndex_>;
        $i1 = i0 >> 5;
        $c2 = $r3[$i1];
        $i3 = $c2 << 2;
        $i4 = i0 & 31;
        $i5 = $i3 + $i4;
        $c6 = $r2[$i5];

     label1:
        return $c6;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        $i7 = r0.<sun.text.normalizer.UCharacterProperty: int m_trieInitialValue_>;
        return $i7;

     label3:
        if i0 > 56319 goto label4;

        $r5 = r0.<sun.text.normalizer.UCharacterProperty: char[] m_trieData_>;
        $r6 = r0.<sun.text.normalizer.UCharacterProperty: char[] m_trieIndex_>;
        $i8 = i0 >> 5;
        $i9 = 320 + $i8;
        $c10 = $r6[$i9];
        $i11 = $c10 << 2;
        $i12 = i0 & 31;
        $i13 = $i11 + $i12;
        $c14 = $r5[$i13];
        return $c14;

     label4:
        if i0 > 1114111 goto label5;

        $r7 = r0.<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.CharTrie m_trie_>;
        $c15 = staticinvoke <sun.text.normalizer.UTF16: char getLeadSurrogate(int)>(i0);
        $i16 = i0 & 1023;
        $c17 = (char) $i16;
        $c18 = virtualinvoke $r7.<sun.text.normalizer.CharTrie: char getSurrogateValue(char,char)>($c15, $c17);
        return $c18;

     label5:
        $i19 = r0.<sun.text.normalizer.UCharacterProperty: int m_trieInitialValue_>;
        return $i19;

        catch java.lang.ArrayIndexOutOfBoundsException from label0 to label1 with label2;
    }

    public static int getUnsignedValue(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;
        $i1 = i0 >> 8;
        $i2 = $i1 & 255;
        return $i2;
    }

    public int getAdditional(int, int)
    {
        sun.text.normalizer.UCharacterProperty r0;
        int i0, i1, $i2, $i3, $i5, $i6;
        int[] $r1;
        sun.text.normalizer.CharTrie $r2;
        char $c4;

        r0 := @this: sun.text.normalizer.UCharacterProperty;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i1 != -1 goto label0;

        $i2 = virtualinvoke r0.<sun.text.normalizer.UCharacterProperty: int getProperty(int)>(i0);
        return $i2;

     label0:
        if i1 < 0 goto label1;

        $i3 = r0.<sun.text.normalizer.UCharacterProperty: int m_additionalColumnsCount_>;
        if i1 < $i3 goto label2;

     label1:
        return 0;

     label2:
        $r1 = r0.<sun.text.normalizer.UCharacterProperty: int[] m_additionalVectors_>;
        $r2 = r0.<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.CharTrie m_additionalTrie_>;
        $c4 = virtualinvoke $r2.<sun.text.normalizer.CharTrie: char getCodePointValue(int)>(i0);
        $i5 = $c4 + i1;
        $i6 = $r1[$i5];
        return $i6;
    }

    public sun.text.normalizer.VersionInfo getAge(int)
    {
        sun.text.normalizer.UCharacterProperty r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        sun.text.normalizer.VersionInfo $r1;

        r0 := @this: sun.text.normalizer.UCharacterProperty;
        i0 := @parameter0: int;
        $i2 = virtualinvoke r0.<sun.text.normalizer.UCharacterProperty: int getAdditional(int,int)>(i0, 0);
        i1 = $i2 >> 24;
        $i3 = i1 >> 4;
        $i4 = $i3 & 15;
        $i5 = i1 & 15;
        $r1 = staticinvoke <sun.text.normalizer.VersionInfo: sun.text.normalizer.VersionInfo getInstance(int,int,int,int)>($i4, $i5, 0, 0);
        return $r1;
    }

    public static int getRawSupplementary(char, char)
    {
        char c0, c1;
        int $i2, $i3, $i4;

        c0 := @parameter0: char;
        c1 := @parameter1: char;
        $i2 = c0 << 10;
        $i3 = $i2 + c1;
        $i4 = $i3 + -56613888;
        return $i4;
    }

    public static sun.text.normalizer.UCharacterProperty getInstance()
    {
        sun.text.normalizer.UCharacterProperty $r0, $r2, $r6;
        java.lang.Exception r1, $r3;
        java.util.MissingResourceException $r4;
        java.lang.String $r5;

        $r0 = <sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty INSTANCE_>;
        if $r0 != null goto label3;

     label0:
        $r2 = new sun.text.normalizer.UCharacterProperty;
        specialinvoke $r2.<sun.text.normalizer.UCharacterProperty: void <init>()>();
        <sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty INSTANCE_> = $r2;

     label1:
        goto label3;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        $r4 = new java.util.MissingResourceException;
        $r5 = virtualinvoke r1.<java.lang.Exception: java.lang.String getMessage()>();
        specialinvoke $r4.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r5, "", "");
        throw $r4;

     label3:
        $r6 = <sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty INSTANCE_>;
        return $r6;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public static boolean isRuleWhiteSpace(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;
        if i0 < 9 goto label1;

        if i0 > 8233 goto label1;

        if i0 <= 13 goto label0;

        if i0 == 32 goto label0;

        if i0 == 133 goto label0;

        if i0 == 8206 goto label0;

        if i0 == 8207 goto label0;

        if i0 < 8232 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void <init>() throws java.io.IOException
    {
        sun.text.normalizer.UCharacterProperty r0;
        java.io.InputStream r1;
        java.io.BufferedInputStream r2, $r4;
        sun.text.normalizer.UCharacterPropertyReader r3, $r5;
        sun.text.normalizer.CharTrie $r6;

        r0 := @this: sun.text.normalizer.UCharacterProperty;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r1 = staticinvoke <sun.text.normalizer.ICUData: java.io.InputStream getRequiredStream(java.lang.String)>("/sun/text/resources/uprops.icu");
        $r4 = new java.io.BufferedInputStream;
        specialinvoke $r4.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>(r1, 25000);
        r2 = $r4;
        $r5 = new sun.text.normalizer.UCharacterPropertyReader;
        specialinvoke $r5.<sun.text.normalizer.UCharacterPropertyReader: void <init>(java.io.InputStream)>(r2);
        r3 = $r5;
        virtualinvoke r3.<sun.text.normalizer.UCharacterPropertyReader: void read(sun.text.normalizer.UCharacterProperty)>(r0);
        virtualinvoke r2.<java.io.BufferedInputStream: void close()>();
        $r6 = r0.<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.CharTrie m_trie_>;
        virtualinvoke $r6.<sun.text.normalizer.CharTrie: void putIndexData(sun.text.normalizer.UCharacterProperty)>(r0);
        return;
    }

    public void upropsvec_addPropertyStarts(sun.text.normalizer.UnicodeSet)
    {
        sun.text.normalizer.UCharacterProperty r0;
        sun.text.normalizer.UnicodeSet r1;
        sun.text.normalizer.TrieIterator r2, $r4;
        sun.text.normalizer.RangeValueIterator$Element r3, $r6;
        int $i0, $i1;
        sun.text.normalizer.CharTrie $r5;
        boolean $z0;

        r0 := @this: sun.text.normalizer.UCharacterProperty;
        r1 := @parameter0: sun.text.normalizer.UnicodeSet;
        $i0 = r0.<sun.text.normalizer.UCharacterProperty: int m_additionalColumnsCount_>;
        if $i0 <= 0 goto label1;

        $r4 = new sun.text.normalizer.TrieIterator;
        $r5 = r0.<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.CharTrie m_additionalTrie_>;
        specialinvoke $r4.<sun.text.normalizer.TrieIterator: void <init>(sun.text.normalizer.Trie)>($r5);
        r2 = $r4;
        $r6 = new sun.text.normalizer.RangeValueIterator$Element;
        specialinvoke $r6.<sun.text.normalizer.RangeValueIterator$Element: void <init>()>();
        r3 = $r6;

     label0:
        $z0 = virtualinvoke r2.<sun.text.normalizer.TrieIterator: boolean next(sun.text.normalizer.RangeValueIterator$Element)>(r3);
        if $z0 == 0 goto label1;

        $i1 = r3.<sun.text.normalizer.RangeValueIterator$Element: int start>;
        virtualinvoke r1.<sun.text.normalizer.UnicodeSet: sun.text.normalizer.UnicodeSet add(int)>($i1);
        goto label0;

     label1:
        return;
    }

    static void <clinit>()
    {
        <sun.text.normalizer.UCharacterProperty: sun.text.normalizer.UCharacterProperty INSTANCE_> = null;
        return;
    }
}
