class java.lang.Class$Atomic extends java.lang.Object
{
    private static final sun.misc.Unsafe unsafe;
    private static final long reflectionDataOffset;
    private static final long annotationTypeOffset;

    private void <init>()
    {
        java.lang.Class$Atomic r0;

        r0 := @this: java.lang.Class$Atomic;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    private static long objectFieldOffset(java.lang.reflect.Field[], java.lang.String)
    {
        java.lang.reflect.Field[] r0;
        java.lang.String r1, $r8;
        java.lang.reflect.Field r2;
        java.lang.StringBuilder $r3, $r5, $r6, $r7;
        java.lang.Error $r4;
        sun.misc.Unsafe $r9;
        long $l0;

        r0 := @parameter0: java.lang.reflect.Field[];
        r1 := @parameter1: java.lang.String;
        r2 = staticinvoke <java.lang.Class: java.lang.reflect.Field access$300(java.lang.reflect.Field[],java.lang.String)>(r0, r1);
        if r2 != null goto label0;

        $r4 = new java.lang.Error;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" field found in java.lang.Class");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.Error: void <init>(java.lang.String)>($r8);
        throw $r4;

     label0:
        $r9 = <java.lang.Class$Atomic: sun.misc.Unsafe unsafe>;
        $l0 = virtualinvoke $r9.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>(r2);
        return $l0;
    }

    static boolean casReflectionData(java.lang.Class, java.lang.ref.SoftReference, java.lang.ref.SoftReference)
    {
        java.lang.Class r0;
        java.lang.ref.SoftReference r1, r2;
        sun.misc.Unsafe $r3;
        long $l0;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.ref.SoftReference;
        r2 := @parameter2: java.lang.ref.SoftReference;
        $r3 = <java.lang.Class$Atomic: sun.misc.Unsafe unsafe>;
        $l0 = <java.lang.Class$Atomic: long reflectionDataOffset>;
        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);
        return $z0;
    }

    static boolean casAnnotationType(java.lang.Class, sun.reflect.annotation.AnnotationType, sun.reflect.annotation.AnnotationType)
    {
        java.lang.Class r0;
        sun.reflect.annotation.AnnotationType r1, r2;
        sun.misc.Unsafe $r3;
        long $l0;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: sun.reflect.annotation.AnnotationType;
        r2 := @parameter2: sun.reflect.annotation.AnnotationType;
        $r3 = <java.lang.Class$Atomic: sun.misc.Unsafe unsafe>;
        $l0 = <java.lang.Class$Atomic: long annotationTypeOffset>;
        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);
        return $z0;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0;
        java.lang.reflect.Field[] r1;
        long $l0, $l1;

        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <java.lang.Class$Atomic: sun.misc.Unsafe unsafe> = $r0;
        r1 = staticinvoke <java.lang.Class: java.lang.reflect.Field[] access$200(java.lang.Class,boolean)>(class "java/lang/Class", 0);
        $l0 = staticinvoke <java.lang.Class$Atomic: long objectFieldOffset(java.lang.reflect.Field[],java.lang.String)>(r1, "reflectionData");
        <java.lang.Class$Atomic: long reflectionDataOffset> = $l0;
        $l1 = staticinvoke <java.lang.Class$Atomic: long objectFieldOffset(java.lang.reflect.Field[],java.lang.String)>(r1, "annotationType");
        <java.lang.Class$Atomic: long annotationTypeOffset> = $l1;
        return;
    }
}
