final class java.util.logging.LogManager$LoggerWeakRef extends java.lang.ref.WeakReference
{
    private java.lang.String name;
    private java.util.logging.LogManager$LogNode node;
    private java.lang.ref.WeakReference parentRef;
    private boolean disposed;
    final java.util.logging.LogManager this$0;

    void <init>(java.util.logging.LogManager, java.util.logging.Logger)
    {
        java.util.logging.LogManager$LoggerWeakRef r0;
        java.util.logging.LogManager r1;
        java.util.logging.Logger r2;
        java.lang.ref.ReferenceQueue $r3;
        java.lang.String $r4;

        r0 := @this: java.util.logging.LogManager$LoggerWeakRef;
        r1 := @parameter0: java.util.logging.LogManager;
        r2 := @parameter1: java.util.logging.Logger;
        r0.<java.util.logging.LogManager$LoggerWeakRef: java.util.logging.LogManager this$0> = r1;
        $r3 = staticinvoke <java.util.logging.LogManager: java.lang.ref.ReferenceQueue access$1300(java.util.logging.LogManager)>(r1);
        specialinvoke r0.<java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r2, $r3);
        r0.<java.util.logging.LogManager$LoggerWeakRef: boolean disposed> = 0;
        $r4 = virtualinvoke r2.<java.util.logging.Logger: java.lang.String getName()>();
        r0.<java.util.logging.LogManager$LoggerWeakRef: java.lang.String name> = $r4;
        return;
    }

    void dispose()
    {
        java.util.logging.LogManager$LoggerWeakRef r0, r2, $r11;
        java.lang.Throwable r3, r4, $r5, $r12;
        boolean $z0;
        java.util.logging.LogManager$LogNode r6;
        java.util.logging.LogManager$LoggerContext $r7, r8, $r9;
        java.lang.String $r10;
        java.lang.ref.WeakReference $r13, $r14;
        java.lang.Object $r15;
        java.util.logging.Logger r16;

        r0 := @this: java.util.logging.LogManager$LoggerWeakRef;
        r2 = r0;
        entermonitor r0;

     label0:
        $z0 = r0.<java.util.logging.LogManager$LoggerWeakRef: boolean disposed>;
        if $z0 == 0 goto label2;

        exitmonitor r2;

     label1:
        return;

     label2:
        r0.<java.util.logging.LogManager$LoggerWeakRef: boolean disposed> = 1;
        exitmonitor r2;

     label3:
        goto label7;

     label4:
        $r5 := @caughtexception;

     label5:
        r3 = $r5;
        exitmonitor r2;

     label6:
        throw r3;

     label7:
        r6 = r0.<java.util.logging.LogManager$LoggerWeakRef: java.util.logging.LogManager$LogNode node>;
        if r6 == null goto label14;

        $r7 = r6.<java.util.logging.LogManager$LogNode: java.util.logging.LogManager$LoggerContext context>;
        r8 = $r7;
        entermonitor $r7;

     label8:
        $r9 = r6.<java.util.logging.LogManager$LogNode: java.util.logging.LogManager$LoggerContext context>;
        $r10 = r0.<java.util.logging.LogManager$LoggerWeakRef: java.lang.String name>;
        virtualinvoke $r9.<java.util.logging.LogManager$LoggerContext: void removeLoggerRef(java.lang.String,java.util.logging.LogManager$LoggerWeakRef)>($r10, r0);
        r0.<java.util.logging.LogManager$LoggerWeakRef: java.lang.String name> = null;
        $r11 = r6.<java.util.logging.LogManager$LogNode: java.util.logging.LogManager$LoggerWeakRef loggerRef>;
        if $r11 != r0 goto label9;

        r6.<java.util.logging.LogManager$LogNode: java.util.logging.LogManager$LoggerWeakRef loggerRef> = null;

     label9:
        r0.<java.util.logging.LogManager$LoggerWeakRef: java.util.logging.LogManager$LogNode node> = null;
        exitmonitor r8;

     label10:
        goto label14;

     label11:
        $r12 := @caughtexception;

     label12:
        r4 = $r12;
        exitmonitor r8;

     label13:
        throw r4;

     label14:
        $r13 = r0.<java.util.logging.LogManager$LoggerWeakRef: java.lang.ref.WeakReference parentRef>;
        if $r13 == null goto label16;

        $r14 = r0.<java.util.logging.LogManager$LoggerWeakRef: java.lang.ref.WeakReference parentRef>;
        $r15 = virtualinvoke $r14.<java.lang.ref.WeakReference: java.lang.Object get()>();
        r16 = (java.util.logging.Logger) $r15;
        if r16 == null goto label15;

        virtualinvoke r16.<java.util.logging.Logger: void removeChildLogger(java.util.logging.LogManager$LoggerWeakRef)>(r0);

     label15:
        r0.<java.util.logging.LogManager$LoggerWeakRef: java.lang.ref.WeakReference parentRef> = null;

     label16:
        return;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label8 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    void setNode(java.util.logging.LogManager$LogNode)
    {
        java.util.logging.LogManager$LoggerWeakRef r0;
        java.util.logging.LogManager$LogNode r1;

        r0 := @this: java.util.logging.LogManager$LoggerWeakRef;
        r1 := @parameter0: java.util.logging.LogManager$LogNode;
        r0.<java.util.logging.LogManager$LoggerWeakRef: java.util.logging.LogManager$LogNode node> = r1;
        return;
    }

    void setParentRef(java.lang.ref.WeakReference)
    {
        java.util.logging.LogManager$LoggerWeakRef r0;
        java.lang.ref.WeakReference r1;

        r0 := @this: java.util.logging.LogManager$LoggerWeakRef;
        r1 := @parameter0: java.lang.ref.WeakReference;
        r0.<java.util.logging.LogManager$LoggerWeakRef: java.lang.ref.WeakReference parentRef> = r1;
        return;
    }
}
