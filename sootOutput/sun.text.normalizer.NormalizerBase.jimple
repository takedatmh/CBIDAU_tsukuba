public final class sun.text.normalizer.NormalizerBase extends java.lang.Object implements java.lang.Cloneable
{
    private char[] buffer;
    private int bufferStart;
    private int bufferPos;
    private int bufferLimit;
    private sun.text.normalizer.UCharacterIterator text;
    private sun.text.normalizer.NormalizerBase$Mode mode;
    private int options;
    private int currentIndex;
    private int nextIndex;
    public static final int UNICODE_3_2;
    public static final int DONE;
    public static final sun.text.normalizer.NormalizerBase$Mode NONE;
    public static final sun.text.normalizer.NormalizerBase$Mode NFD;
    public static final sun.text.normalizer.NormalizerBase$Mode NFKD;
    public static final sun.text.normalizer.NormalizerBase$Mode NFC;
    public static final sun.text.normalizer.NormalizerBase$Mode NFKC;
    public static final sun.text.normalizer.NormalizerBase$QuickCheckResult NO;
    public static final sun.text.normalizer.NormalizerBase$QuickCheckResult YES;
    public static final sun.text.normalizer.NormalizerBase$QuickCheckResult MAYBE;
    private static final int MAX_BUF_SIZE_COMPOSE;
    private static final int MAX_BUF_SIZE_DECOMPOSE;
    public static final int UNICODE_3_2_0_ORIGINAL;
    public static final int UNICODE_LATEST;

    public void <init>(java.lang.String, sun.text.normalizer.NormalizerBase$Mode, int)
    {
        sun.text.normalizer.NormalizerBase r0;
        java.lang.String r1;
        sun.text.normalizer.NormalizerBase$Mode r2, $r4;
        int i0;
        char[] $r3;
        sun.text.normalizer.UCharacterIterator $r5;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: sun.text.normalizer.NormalizerBase$Mode;
        i0 := @parameter2: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r3 = newarray (char)[100];
        r0.<sun.text.normalizer.NormalizerBase: char[] buffer> = $r3;
        r0.<sun.text.normalizer.NormalizerBase: int bufferStart> = 0;
        r0.<sun.text.normalizer.NormalizerBase: int bufferPos> = 0;
        r0.<sun.text.normalizer.NormalizerBase: int bufferLimit> = 0;
        $r4 = <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode NFC>;
        r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode mode> = $r4;
        r0.<sun.text.normalizer.NormalizerBase: int options> = 0;
        $r5 = staticinvoke <sun.text.normalizer.UCharacterIterator: sun.text.normalizer.UCharacterIterator getInstance(java.lang.String)>(r1);
        r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.UCharacterIterator text> = $r5;
        r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode mode> = r2;
        r0.<sun.text.normalizer.NormalizerBase: int options> = i0;
        return;
    }

    public void <init>(java.text.CharacterIterator, sun.text.normalizer.NormalizerBase$Mode)
    {
        sun.text.normalizer.NormalizerBase r0;
        java.text.CharacterIterator r1;
        sun.text.normalizer.NormalizerBase$Mode r2;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        r1 := @parameter0: java.text.CharacterIterator;
        r2 := @parameter1: sun.text.normalizer.NormalizerBase$Mode;
        specialinvoke r0.<sun.text.normalizer.NormalizerBase: void <init>(java.text.CharacterIterator,sun.text.normalizer.NormalizerBase$Mode,int)>(r1, r2, 0);
        return;
    }

    public void <init>(java.text.CharacterIterator, sun.text.normalizer.NormalizerBase$Mode, int)
    {
        sun.text.normalizer.NormalizerBase r0;
        java.text.CharacterIterator r1, $r6;
        sun.text.normalizer.NormalizerBase$Mode r2, $r4;
        int i0;
        char[] $r3;
        java.lang.Object $r5;
        sun.text.normalizer.UCharacterIterator $r7;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        r1 := @parameter0: java.text.CharacterIterator;
        r2 := @parameter1: sun.text.normalizer.NormalizerBase$Mode;
        i0 := @parameter2: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r3 = newarray (char)[100];
        r0.<sun.text.normalizer.NormalizerBase: char[] buffer> = $r3;
        r0.<sun.text.normalizer.NormalizerBase: int bufferStart> = 0;
        r0.<sun.text.normalizer.NormalizerBase: int bufferPos> = 0;
        r0.<sun.text.normalizer.NormalizerBase: int bufferLimit> = 0;
        $r4 = <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode NFC>;
        r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode mode> = $r4;
        r0.<sun.text.normalizer.NormalizerBase: int options> = 0;
        $r5 = interfaceinvoke r1.<java.text.CharacterIterator: java.lang.Object clone()>();
        $r6 = (java.text.CharacterIterator) $r5;
        $r7 = staticinvoke <sun.text.normalizer.UCharacterIterator: sun.text.normalizer.UCharacterIterator getInstance(java.text.CharacterIterator)>($r6);
        r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.UCharacterIterator text> = $r7;
        r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode mode> = r2;
        r0.<sun.text.normalizer.NormalizerBase: int options> = i0;
        return;
    }

    public java.lang.Object clone()
    {
        sun.text.normalizer.NormalizerBase r0, r1;
        java.lang.Object $r2, $r4;
        sun.text.normalizer.UCharacterIterator $r3, $r5;
        char[] $r6, $r7, $r8, $r9, $r10, $r11;
        int $i0, $i1;
        java.lang.CloneNotSupportedException $r13, r14;
        java.lang.InternalError $r15;
        java.lang.String $r16;

        r0 := @this: sun.text.normalizer.NormalizerBase;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        r1 = (sun.text.normalizer.NormalizerBase) $r2;
        $r3 = r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.UCharacterIterator text>;
        $r4 = virtualinvoke $r3.<sun.text.normalizer.UCharacterIterator: java.lang.Object clone()>();
        $r5 = (sun.text.normalizer.UCharacterIterator) $r4;
        r1.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.UCharacterIterator text> = $r5;
        $r6 = r0.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        if $r6 == null goto label1;

        $r7 = r0.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        $i0 = lengthof $r7;
        $r8 = newarray (char)[$i0];
        r1.<sun.text.normalizer.NormalizerBase: char[] buffer> = $r8;
        $r9 = r0.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        $r10 = r1.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        $r11 = r0.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        $i1 = lengthof $r11;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r10, 0, $i1);

     label1:
        return r1;

     label2:
        $r13 := @caughtexception;
        r14 = $r13;
        $r15 = new java.lang.InternalError;
        $r16 = virtualinvoke r14.<java.lang.CloneNotSupportedException: java.lang.String toString()>();
        specialinvoke $r15.<java.lang.InternalError: void <init>(java.lang.String)>($r16);
        throw $r15;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    public static java.lang.String compose(java.lang.String, boolean, int)
    {
        java.lang.String r0, r1, $r5;
        boolean z0, z1;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, i8, $i9;
        char[] r2, r3;
        sun.text.normalizer.UnicodeSet r4;

        r0 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        i0 := @parameter2: int;
        if i0 != 262432 goto label0;

        r1 = staticinvoke <sun.text.normalizer.NormalizerImpl: java.lang.String convert(java.lang.String)>(r0);
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        $i2 = $i1 * 2;
        r2 = newarray (char)[$i2];
        r3 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();
        goto label1;

     label0:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();
        $i4 = $i3 * 2;
        r2 = newarray (char)[$i4];
        r3 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

     label1:
        z1 = 0;
        r4 = staticinvoke <sun.text.normalizer.NormalizerImpl: sun.text.normalizer.UnicodeSet getNX(int)>(i0);
        i5 = i0 & -12544;
        if z0 == 0 goto label2;

        i5 = i5 | 4096;

     label2:
        $i6 = lengthof r3;
        $i7 = lengthof r2;
        i8 = staticinvoke <sun.text.normalizer.NormalizerImpl: int compose(char[],int,int,char[],int,int,int,sun.text.normalizer.UnicodeSet)>(r3, 0, $i6, r2, 0, $i7, i5, r4);
        $i9 = lengthof r2;
        if i8 > $i9 goto label3;

        $r5 = new java.lang.String;
        specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>(r2, 0, i8);
        return $r5;

     label3:
        r2 = newarray (char)[i8];
        goto label2;
    }

    public static java.lang.String decompose(java.lang.String, boolean)
    {
        java.lang.String r0, $r1;
        boolean z0;

        r0 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        $r1 = staticinvoke <sun.text.normalizer.NormalizerBase: java.lang.String decompose(java.lang.String,boolean,int)>(r0, z0, 0);
        return $r1;
    }

    public static java.lang.String decompose(java.lang.String, boolean, int)
    {
        java.lang.String r0, r3, $r6, $r9;
        boolean z0, z1;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, i11, $i12;
        int[] r1;
        sun.text.normalizer.UnicodeSet r2;
        char[] r4, $r5, r7, $r8;

        r0 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        i0 := @parameter2: int;
        r1 = newarray (int)[1];
        z1 = 0;
        r2 = staticinvoke <sun.text.normalizer.NormalizerImpl: sun.text.normalizer.UnicodeSet getNX(int)>(i0);
        if i0 != 262432 goto label2;

        r3 = staticinvoke <sun.text.normalizer.NormalizerImpl: java.lang.String convert(java.lang.String)>(r0);
        $i1 = virtualinvoke r3.<java.lang.String: int length()>();
        $i2 = $i1 * 3;
        r4 = newarray (char)[$i2];

     label0:
        $r5 = virtualinvoke r3.<java.lang.String: char[] toCharArray()>();
        $i3 = virtualinvoke r3.<java.lang.String: int length()>();
        $i4 = lengthof r4;
        i5 = staticinvoke <sun.text.normalizer.NormalizerImpl: int decompose(char[],int,int,char[],int,int,boolean,int[],sun.text.normalizer.UnicodeSet)>($r5, 0, $i3, r4, 0, $i4, z0, r1, r2);
        $i6 = lengthof r4;
        if i5 > $i6 goto label1;

        $r6 = new java.lang.String;
        specialinvoke $r6.<java.lang.String: void <init>(char[],int,int)>(r4, 0, i5);
        return $r6;

     label1:
        r4 = newarray (char)[i5];
        goto label0;

     label2:
        $i7 = virtualinvoke r0.<java.lang.String: int length()>();
        $i8 = $i7 * 3;
        r7 = newarray (char)[$i8];

     label3:
        $r8 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();
        $i9 = virtualinvoke r0.<java.lang.String: int length()>();
        $i10 = lengthof r7;
        i11 = staticinvoke <sun.text.normalizer.NormalizerImpl: int decompose(char[],int,int,char[],int,int,boolean,int[],sun.text.normalizer.UnicodeSet)>($r8, 0, $i9, r7, 0, $i10, z0, r1, r2);
        $i12 = lengthof r7;
        if i11 > $i12 goto label4;

        $r9 = new java.lang.String;
        specialinvoke $r9.<java.lang.String: void <init>(char[],int,int)>(r7, 0, i11);
        return $r9;

     label4:
        r7 = newarray (char)[i11];
        goto label3;
    }

    public static int normalize(char[], int, int, char[], int, int, sun.text.normalizer.NormalizerBase$Mode, int)
    {
        char[] r0, r1;
        int i0, i1, i2, i3, i4, i5, $i6;
        sun.text.normalizer.NormalizerBase$Mode r2;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.String $r4;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 := @parameter3: char[];
        i2 := @parameter4: int;
        i3 := @parameter5: int;
        r2 := @parameter6: sun.text.normalizer.NormalizerBase$Mode;
        i4 := @parameter7: int;
        i5 = virtualinvoke r2.<sun.text.normalizer.NormalizerBase$Mode: int normalize(char[],int,int,char[],int,int,int)>(r0, i0, i1, r1, i2, i3, i4);
        $i6 = i3 - i2;
        if i5 > $i6 goto label0;

        return i5;

     label0:
        $r3 = new java.lang.IndexOutOfBoundsException;
        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i5);
        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);
        throw $r3;
    }

    public int current()
    {
        sun.text.normalizer.NormalizerBase r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        $i0 = r0.<sun.text.normalizer.NormalizerBase: int bufferPos>;
        $i1 = r0.<sun.text.normalizer.NormalizerBase: int bufferLimit>;
        if $i0 < $i1 goto label0;

        $z0 = specialinvoke r0.<sun.text.normalizer.NormalizerBase: boolean nextNormalize()>();
        if $z0 == 0 goto label1;

     label0:
        $i2 = r0.<sun.text.normalizer.NormalizerBase: int bufferPos>;
        $i3 = specialinvoke r0.<sun.text.normalizer.NormalizerBase: int getCodePointAt(int)>($i2);
        return $i3;

     label1:
        return -1;
    }

    public int next()
    {
        sun.text.normalizer.NormalizerBase r0;
        int i0, $i1, $i2, $i3, $i4, $i6;
        boolean $z0;
        byte $b5;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        $i1 = r0.<sun.text.normalizer.NormalizerBase: int bufferPos>;
        $i2 = r0.<sun.text.normalizer.NormalizerBase: int bufferLimit>;
        if $i1 < $i2 goto label0;

        $z0 = specialinvoke r0.<sun.text.normalizer.NormalizerBase: boolean nextNormalize()>();
        if $z0 == 0 goto label3;

     label0:
        $i3 = r0.<sun.text.normalizer.NormalizerBase: int bufferPos>;
        i0 = specialinvoke r0.<sun.text.normalizer.NormalizerBase: int getCodePointAt(int)>($i3);
        $i4 = r0.<sun.text.normalizer.NormalizerBase: int bufferPos>;
        if i0 <= 65535 goto label1;

        $b5 = 2;
        goto label2;

     label1:
        $b5 = 1;

     label2:
        $i6 = $i4 + $b5;
        r0.<sun.text.normalizer.NormalizerBase: int bufferPos> = $i6;
        return i0;

     label3:
        return -1;
    }

    public int previous()
    {
        sun.text.normalizer.NormalizerBase r0;
        int i0, $i1, $i2, $i3, $i4, $i6;
        boolean $z0;
        byte $b5;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        $i1 = r0.<sun.text.normalizer.NormalizerBase: int bufferPos>;
        if $i1 > 0 goto label0;

        $z0 = specialinvoke r0.<sun.text.normalizer.NormalizerBase: boolean previousNormalize()>();
        if $z0 == 0 goto label3;

     label0:
        $i2 = r0.<sun.text.normalizer.NormalizerBase: int bufferPos>;
        $i3 = $i2 - 1;
        i0 = specialinvoke r0.<sun.text.normalizer.NormalizerBase: int getCodePointAt(int)>($i3);
        $i4 = r0.<sun.text.normalizer.NormalizerBase: int bufferPos>;
        if i0 <= 65535 goto label1;

        $b5 = 2;
        goto label2;

     label1:
        $b5 = 1;

     label2:
        $i6 = $i4 - $b5;
        r0.<sun.text.normalizer.NormalizerBase: int bufferPos> = $i6;
        return i0;

     label3:
        return -1;
    }

    public void reset()
    {
        sun.text.normalizer.NormalizerBase r0;
        byte $b0;
        sun.text.normalizer.UCharacterIterator $r1;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        $r1 = r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.UCharacterIterator text>;
        virtualinvoke $r1.<sun.text.normalizer.UCharacterIterator: void setIndex(int)>(0);
        $b0 = 0;
        r0.<sun.text.normalizer.NormalizerBase: int nextIndex> = $b0;
        r0.<sun.text.normalizer.NormalizerBase: int currentIndex> = $b0;
        specialinvoke r0.<sun.text.normalizer.NormalizerBase: void clearBuffer()>();
        return;
    }

    public void setIndexOnly(int)
    {
        sun.text.normalizer.NormalizerBase r0;
        int i0;
        sun.text.normalizer.UCharacterIterator $r1;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        i0 := @parameter0: int;
        $r1 = r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.UCharacterIterator text>;
        virtualinvoke $r1.<sun.text.normalizer.UCharacterIterator: void setIndex(int)>(i0);
        r0.<sun.text.normalizer.NormalizerBase: int nextIndex> = i0;
        r0.<sun.text.normalizer.NormalizerBase: int currentIndex> = i0;
        specialinvoke r0.<sun.text.normalizer.NormalizerBase: void clearBuffer()>();
        return;
    }

    public int setIndex(int)
    {
        sun.text.normalizer.NormalizerBase r0;
        int i0, $i1;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        i0 := @parameter0: int;
        virtualinvoke r0.<sun.text.normalizer.NormalizerBase: void setIndexOnly(int)>(i0);
        $i1 = virtualinvoke r0.<sun.text.normalizer.NormalizerBase: int current()>();
        return $i1;
    }

    public int getBeginIndex()
    {
        sun.text.normalizer.NormalizerBase r0;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        return 0;
    }

    public int getEndIndex()
    {
        sun.text.normalizer.NormalizerBase r0;
        int $i0;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        $i0 = virtualinvoke r0.<sun.text.normalizer.NormalizerBase: int endIndex()>();
        return $i0;
    }

    public int getIndex()
    {
        sun.text.normalizer.NormalizerBase r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        $i0 = r0.<sun.text.normalizer.NormalizerBase: int bufferPos>;
        $i1 = r0.<sun.text.normalizer.NormalizerBase: int bufferLimit>;
        if $i0 >= $i1 goto label0;

        $i2 = r0.<sun.text.normalizer.NormalizerBase: int currentIndex>;
        return $i2;

     label0:
        $i3 = r0.<sun.text.normalizer.NormalizerBase: int nextIndex>;
        return $i3;
    }

    public int endIndex()
    {
        sun.text.normalizer.NormalizerBase r0;
        sun.text.normalizer.UCharacterIterator $r1;
        int $i0;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        $r1 = r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.UCharacterIterator text>;
        $i0 = virtualinvoke $r1.<sun.text.normalizer.UCharacterIterator: int getLength()>();
        return $i0;
    }

    public void setMode(sun.text.normalizer.NormalizerBase$Mode)
    {
        sun.text.normalizer.NormalizerBase r0;
        sun.text.normalizer.NormalizerBase$Mode r1;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        r1 := @parameter0: sun.text.normalizer.NormalizerBase$Mode;
        r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode mode> = r1;
        return;
    }

    public sun.text.normalizer.NormalizerBase$Mode getMode()
    {
        sun.text.normalizer.NormalizerBase r0;
        sun.text.normalizer.NormalizerBase$Mode $r1;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        $r1 = r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode mode>;
        return $r1;
    }

    public void setText(java.lang.String)
    {
        sun.text.normalizer.NormalizerBase r0;
        java.lang.String r1;
        sun.text.normalizer.UCharacterIterator r2;
        java.lang.InternalError $r3;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        r1 := @parameter0: java.lang.String;
        r2 = staticinvoke <sun.text.normalizer.UCharacterIterator: sun.text.normalizer.UCharacterIterator getInstance(java.lang.String)>(r1);
        if r2 != null goto label0;

        $r3 = new java.lang.InternalError;
        specialinvoke $r3.<java.lang.InternalError: void <init>(java.lang.String)>("Could not create a new UCharacterIterator");
        throw $r3;

     label0:
        r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.UCharacterIterator text> = r2;
        virtualinvoke r0.<sun.text.normalizer.NormalizerBase: void reset()>();
        return;
    }

    public void setText(java.text.CharacterIterator)
    {
        sun.text.normalizer.NormalizerBase r0;
        java.text.CharacterIterator r1;
        sun.text.normalizer.UCharacterIterator r2;
        byte $b0;
        java.lang.InternalError $r3;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        r1 := @parameter0: java.text.CharacterIterator;
        r2 = staticinvoke <sun.text.normalizer.UCharacterIterator: sun.text.normalizer.UCharacterIterator getInstance(java.text.CharacterIterator)>(r1);
        if r2 != null goto label0;

        $r3 = new java.lang.InternalError;
        specialinvoke $r3.<java.lang.InternalError: void <init>(java.lang.String)>("Could not create a new UCharacterIterator");
        throw $r3;

     label0:
        r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.UCharacterIterator text> = r2;
        $b0 = 0;
        r0.<sun.text.normalizer.NormalizerBase: int nextIndex> = $b0;
        r0.<sun.text.normalizer.NormalizerBase: int currentIndex> = $b0;
        specialinvoke r0.<sun.text.normalizer.NormalizerBase: void clearBuffer()>();
        return;
    }

    private static long getPrevNorm32(sun.text.normalizer.UCharacterIterator, int, int, char[])
    {
        sun.text.normalizer.UCharacterIterator r0;
        int i0, i1, $i4, i5, $i12, $i13, $i15;
        char[] r1;
        boolean z0, $z1, $z2, $z3;
        char $c2, $c6, $c7, $c8, $c9, $c11, $c14, $c16, $c20;
        long l3, $l10, $l17, $l18, $l21;
        byte $b19;

        r0 := @parameter0: sun.text.normalizer.UCharacterIterator;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 := @parameter3: char[];
        z0 = 0;
        $i4 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int previous()>();
        i5 = $i4;
        if $i4 != -1 goto label0;

        return 0L;

     label0:
        $c6 = (char) i5;
        r1[0] = $c6;
        r1[1] = 0;
        $c7 = r1[0];
        if $c7 >= i0 goto label1;

        return 0L;

     label1:
        $c8 = r1[0];
        $z1 = staticinvoke <sun.text.normalizer.UTF16: boolean isSurrogate(char)>($c8);
        if $z1 != 0 goto label2;

        $c9 = r1[0];
        $l10 = staticinvoke <sun.text.normalizer.NormalizerImpl: long getNorm32(char)>($c9);
        return $l10;

     label2:
        $c11 = r1[0];
        $z2 = staticinvoke <sun.text.normalizer.UTF16: boolean isLeadSurrogate(char)>($c11);
        if $z2 != 0 goto label3;

        $i12 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int getIndex()>();
        if $i12 != 0 goto label4;

     label3:
        $i13 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int current()>();
        $c14 = (char) $i13;
        r1[1] = $c14;
        return 0L;

     label4:
        $i15 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int previous()>();
        $c2 = (char) $i15;
        r1[1] = $c2;
        $z3 = staticinvoke <sun.text.normalizer.UTF16: boolean isLeadSurrogate(char)>($c2);
        if $z3 == 0 goto label6;

        $c16 = r1[1];
        l3 = staticinvoke <sun.text.normalizer.NormalizerImpl: long getNorm32(char)>($c16);
        $l17 = (long) i1;
        $l18 = l3 & $l17;
        $b19 = $l18 cmp 0L;
        if $b19 != 0 goto label5;

        return 0L;

     label5:
        $c20 = r1[0];
        $l21 = staticinvoke <sun.text.normalizer.NormalizerImpl: long getNorm32FromSurrogatePair(long,char)>(l3, $c20);
        return $l21;

     label6:
        virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int moveIndex(int)>(1);
        return 0L;
    }

    private static int findPreviousIterationBoundary(sun.text.normalizer.UCharacterIterator, sun.text.normalizer.NormalizerBase$IsPrevBoundary, int, int, char[], int[])
    {
        sun.text.normalizer.UCharacterIterator r0;
        sun.text.normalizer.NormalizerBase$IsPrevBoundary r1;
        int i0, i1, $i2, $i3, $i5, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i31, $i32, $i34, $i35, $i36;
        char[] r2, r4, r5;
        int[] r3;
        boolean z0;
        char $c4, $c6, $c28, $c29, $c33;
        byte $b7, $b19, $b25, $b30;
        null_type n0;

        r0 := @parameter0: sun.text.normalizer.UCharacterIterator;
        r1 := @parameter1: sun.text.normalizer.NormalizerBase$IsPrevBoundary;
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        r2 := @parameter4: char[];
        r3 := @parameter5: int[];
        r4 = newarray (char)[2];
        $i2 = lengthof r2;
        r3[0] = $i2;
        r4[0] = 0;

     label0:
        $i3 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int getIndex()>();
        if $i3 <= 0 goto label5;

        $c4 = r4[0];
        if $c4 == -1 goto label5;

        z0 = interfaceinvoke r1.<sun.text.normalizer.NormalizerBase$IsPrevBoundary: boolean isPrevBoundary(sun.text.normalizer.UCharacterIterator,int,int,char[])>(r0, i0, i1, r4);
        $i5 = r3[0];
        $c6 = r4[1];
        if $c6 != 0 goto label1;

        $b7 = 1;
        goto label2;

     label1:
        $b7 = 2;

     label2:
        if $i5 >= $b7 goto label3;

        $i8 = lengthof r2;
        $i9 = $i8 * 2;
        r5 = newarray (char)[$i9];
        $i10 = r3[0];
        $i11 = lengthof r5;
        $i12 = lengthof r2;
        $i13 = r3[0];
        $i14 = $i12 - $i13;
        $i15 = $i11 - $i14;
        $i16 = lengthof r2;
        $i17 = r3[0];
        $i18 = $i16 - $i17;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i10, r5, $i15, $i18);
        $b19 = 0;
        $i20 = r3[$b19];
        $i21 = lengthof r5;
        $i22 = lengthof r2;
        $i23 = $i21 - $i22;
        $i24 = $i20 + $i23;
        r3[$b19] = $i24;
        r2 = r5;
        n0 = null;

     label3:
        $b25 = 0;
        $i26 = r3[$b25];
        $i27 = $i26 - 1;
        r3[$b25] = $i27;
        $c28 = r4[0];
        r2[$i27] = $c28;
        $c29 = r4[1];
        if $c29 == 0 goto label4;

        $b30 = 0;
        $i31 = r3[$b30];
        $i32 = $i31 - 1;
        r3[$b30] = $i32;
        $c33 = r4[1];
        r2[$i32] = $c33;

     label4:
        if z0 == 0 goto label0;

        goto label5;

     label5:
        $i34 = lengthof r2;
        $i35 = r3[0];
        $i36 = $i34 - $i35;
        return $i36;
    }

    private static int previous(sun.text.normalizer.UCharacterIterator, char[], int, int, sun.text.normalizer.NormalizerBase$Mode, boolean, boolean[], int)
    {
        sun.text.normalizer.UCharacterIterator r0;
        char[] r1, r5;
        int i0, i1, i2, i3, i4, i6, i7, i8, i9, $i10, $i12, $i18, $i19, $i20, $i22, $i24;
        sun.text.normalizer.NormalizerBase$Mode r2;
        boolean z0, $z1, $z2, $z3, $z4;
        boolean[] r3;
        char c5, $c13, $c14, $c15, $c17;
        sun.text.normalizer.NormalizerBase$IsPrevBoundary r4;
        int[] r6;
        byte b11, $b21, $b23;

        r0 := @parameter0: sun.text.normalizer.UCharacterIterator;
        r1 := @parameter1: char[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        r2 := @parameter4: sun.text.normalizer.NormalizerBase$Mode;
        z0 := @parameter5: boolean;
        r3 := @parameter6: boolean[];
        i2 := @parameter7: int;
        i3 = i1 - i0;
        i4 = 0;
        if r3 == null goto label0;

        r3[0] = 0;

     label0:
        $i10 = virtualinvoke r2.<sun.text.normalizer.NormalizerBase$Mode: int getMinC()>();
        c5 = (char) $i10;
        i6 = virtualinvoke r2.<sun.text.normalizer.NormalizerBase$Mode: int getMask()>();
        r4 = virtualinvoke r2.<sun.text.normalizer.NormalizerBase$Mode: sun.text.normalizer.NormalizerBase$IsPrevBoundary getPrevBoundary()>();
        if r4 != null goto label5;

        b11 = 0;
        $i12 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int previous()>();
        i7 = $i12;
        if $i12 < 0 goto label4;

        b11 = 1;
        $c13 = (char) i7;
        $z1 = staticinvoke <sun.text.normalizer.UTF16: boolean isTrailSurrogate(char)>($c13);
        if $z1 == 0 goto label3;

        i8 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int previous()>();
        if i8 == -1 goto label3;

        $c14 = (char) i8;
        $z2 = staticinvoke <sun.text.normalizer.UTF16: boolean isLeadSurrogate(char)>($c14);
        if $z2 == 0 goto label2;

        if i3 < 2 goto label1;

        $c15 = (char) i7;
        r1[1] = $c15;
        b11 = 2;

     label1:
        i7 = i8;
        goto label3;

     label2:
        virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int moveIndex(int)>(1);

     label3:
        if i3 <= 0 goto label4;

        $c17 = (char) i7;
        r1[0] = $c17;

     label4:
        return b11;

     label5:
        r5 = newarray (char)[100];
        r6 = newarray (int)[1];
        i9 = staticinvoke <sun.text.normalizer.NormalizerBase: int findPreviousIterationBoundary(sun.text.normalizer.UCharacterIterator,sun.text.normalizer.NormalizerBase$IsPrevBoundary,int,int,char[],int[])>(r0, r4, c5, i6, r5, r6);
        if i9 <= 0 goto label12;

        if z0 == 0 goto label9;

        $i18 = r6[0];
        $i19 = r6[0];
        $i20 = $i19 + i9;
        i4 = staticinvoke <sun.text.normalizer.NormalizerBase: int normalize(char[],int,int,char[],int,int,sun.text.normalizer.NormalizerBase$Mode,int)>(r5, $i18, $i20, r1, i0, i1, r2, i2);
        if r3 == null goto label12;

        $b21 = 0;
        if i4 != i9 goto label6;

        $z3 = staticinvoke <sun.text.normalizer.Utility: boolean arrayRegionMatches(char[],int,char[],int,int)>(r5, 0, r1, i0, i1);
        if $z3 == 0 goto label7;

     label6:
        $z4 = 1;
        goto label8;

     label7:
        $z4 = 0;

     label8:
        r3[$b21] = $z4;
        goto label12;

     label9:
        if i3 <= 0 goto label12;

        $i22 = r6[0];
        $b23 = 0;
        if i9 >= i3 goto label10;

        $i24 = i9;
        goto label11;

     label10:
        $i24 = i3;

     label11:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, $i22, r1, $b23, $i24);

     label12:
        return i4;
    }

    private static long getNextNorm32(sun.text.normalizer.UCharacterIterator, int, int, int[])
    {
        sun.text.normalizer.UCharacterIterator r0;
        int i0, i1, $i3, $i4, $i5, $i6, $i8, $i10, $i16;
        int[] r1;
        long l2, $l13, $l14, $l18;
        char $c7, $c9, $c11, $c17;
        boolean $z0, $z1;
        byte $b15;

        r0 := @parameter0: sun.text.normalizer.UCharacterIterator;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 := @parameter3: int[];
        $i4 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int next()>();
        r1[0] = $i4;
        r1[1] = 0;
        $i5 = r1[0];
        if $i5 >= i0 goto label0;

        return 0L;

     label0:
        $i6 = r1[0];
        $c7 = (char) $i6;
        l2 = staticinvoke <sun.text.normalizer.NormalizerImpl: long getNorm32(char)>($c7);
        $i8 = r1[0];
        $c9 = (char) $i8;
        $z0 = staticinvoke <sun.text.normalizer.UTF16: boolean isLeadSurrogate(char)>($c9);
        if $z0 == 0 goto label3;

        $i10 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int current()>();
        if $i10 == -1 goto label2;

        $i3 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int current()>();
        r1[1] = $i3;
        $c11 = (char) $i3;
        $z1 = staticinvoke <sun.text.normalizer.UTF16: boolean isTrailSurrogate(char)>($c11);
        if $z1 == 0 goto label2;

        virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int moveIndex(int)>(1);
        $l13 = (long) i1;
        $l14 = l2 & $l13;
        $b15 = $l14 cmp 0L;
        if $b15 != 0 goto label1;

        return 0L;

     label1:
        $i16 = r1[1];
        $c17 = (char) $i16;
        $l18 = staticinvoke <sun.text.normalizer.NormalizerImpl: long getNorm32FromSurrogatePair(long,char)>(l2, $c17);
        return $l18;

     label2:
        return 0L;

     label3:
        return l2;
    }

    private static int findNextIterationBoundary(sun.text.normalizer.UCharacterIterator, sun.text.normalizer.NormalizerBase$IsNextBoundary, int, int, char[])
    {
        sun.text.normalizer.UCharacterIterator r0;
        sun.text.normalizer.NormalizerBase$IsNextBoundary r1;
        int i0, i1, i2, $i3, $i4, $i5, $i7, $i9, $i10, $i12, $i13, $i16, $i17, $i20, $i21, $i23, $i24, $i25, $i26, $i28, $i29, $i30, $i32, $i33, $i34, $i35, $i37, $i38, $i39;
        char[] r2, r4;
        int[] r3;
        char $c6, $c8, $c11, $c14, $c27, $c31, $c36, $c40;
        boolean $z0, $z1, $z2;
        byte $b18, $b22;

        r0 := @parameter0: sun.text.normalizer.UCharacterIterator;
        r1 := @parameter1: sun.text.normalizer.NormalizerBase$IsNextBoundary;
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        r2 := @parameter4: char[];
        $i3 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int current()>();
        if $i3 != -1 goto label0;

        return 0;

     label0:
        r3 = newarray (int)[2];
        $i4 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int next()>();
        r3[0] = $i4;
        $i5 = r3[0];
        $c6 = (char) $i5;
        r2[0] = $c6;
        i2 = 1;
        $i7 = r3[0];
        $c8 = (char) $i7;
        $z0 = staticinvoke <sun.text.normalizer.UTF16: boolean isLeadSurrogate(char)>($c8);
        if $z0 == 0 goto label2;

        $i9 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int current()>();
        if $i9 == -1 goto label2;

        $i10 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int next()>();
        r3[1] = $i10;
        $c11 = (char) $i10;
        $z1 = staticinvoke <sun.text.normalizer.UTF16: boolean isTrailSurrogate(char)>($c11);
        if $z1 == 0 goto label1;

        $i12 = i2;
        i2 = i2 + 1;
        $i13 = r3[1];
        $c14 = (char) $i13;
        r2[$i12] = $c14;
        goto label2;

     label1:
        virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int moveIndex(int)>(-1);

     label2:
        $i16 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int current()>();
        if $i16 == -1 goto label10;

        $z2 = interfaceinvoke r1.<sun.text.normalizer.NormalizerBase$IsNextBoundary: boolean isNextBoundary(sun.text.normalizer.UCharacterIterator,int,int,int[])>(r0, i0, i1, r3);
        if $z2 == 0 goto label5;

        $i17 = r3[1];
        if $i17 != 0 goto label3;

        $b18 = -1;
        goto label4;

     label3:
        $b18 = -2;

     label4:
        virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int moveIndex(int)>($b18);
        goto label10;

     label5:
        $i20 = i2;
        $i21 = r3[1];
        if $i21 != 0 goto label6;

        $b22 = 1;
        goto label7;

     label6:
        $b22 = 2;

     label7:
        $i23 = $i20 + $b22;
        $i24 = lengthof r2;
        if $i23 > $i24 goto label8;

        $i25 = i2;
        i2 = i2 + 1;
        $i26 = r3[0];
        $c27 = (char) $i26;
        r2[$i25] = $c27;
        $i28 = r3[1];
        if $i28 == 0 goto label2;

        $i29 = i2;
        i2 = i2 + 1;
        $i30 = r3[1];
        $c31 = (char) $i30;
        r2[$i29] = $c31;
        goto label2;

     label8:
        $i32 = lengthof r2;
        $i33 = $i32 * 2;
        r4 = newarray (char)[$i33];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r4, 0, i2);
        r2 = r4;
        $i34 = i2;
        i2 = i2 + 1;
        $i35 = r3[0];
        $c36 = (char) $i35;
        r2[$i34] = $c36;
        $i37 = r3[1];
        if $i37 == 0 goto label9;

        $i38 = i2;
        i2 = i2 + 1;
        $i39 = r3[1];
        $c40 = (char) $i39;
        r2[$i38] = $c40;

     label9:
        goto label2;

     label10:
        return i2;
    }

    private static int next(sun.text.normalizer.UCharacterIterator, char[], int, int, sun.text.normalizer.NormalizerBase$Mode, boolean, boolean[], int)
    {
        sun.text.normalizer.UCharacterIterator r0;
        char[] r1, r5;
        int i0, i1, i2, i3, i4, i6, i7, i8, i9, $i10, $i17, $i19, $i20;
        sun.text.normalizer.NormalizerBase$Mode r2;
        boolean z0, $z1, $z2, $z3, $z4;
        boolean[] r3;
        char c5, $c12, $c13, $c14, $c16;
        sun.text.normalizer.NormalizerBase$IsNextBoundary r4;
        int[] r6;
        byte b11, $b18;

        r0 := @parameter0: sun.text.normalizer.UCharacterIterator;
        r1 := @parameter1: char[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        r2 := @parameter4: sun.text.normalizer.NormalizerBase$Mode;
        z0 := @parameter5: boolean;
        r3 := @parameter6: boolean[];
        i2 := @parameter7: int;
        i3 = i1 - i0;
        i4 = 0;
        if r3 == null goto label0;

        r3[0] = 0;

     label0:
        $i10 = virtualinvoke r2.<sun.text.normalizer.NormalizerBase$Mode: int getMinC()>();
        c5 = (char) $i10;
        i6 = virtualinvoke r2.<sun.text.normalizer.NormalizerBase$Mode: int getMask()>();
        r4 = virtualinvoke r2.<sun.text.normalizer.NormalizerBase$Mode: sun.text.normalizer.NormalizerBase$IsNextBoundary getNextBoundary()>();
        if r4 != null goto label4;

        b11 = 0;
        i7 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int next()>();
        if i7 == -1 goto label3;

        b11 = 1;
        $c12 = (char) i7;
        $z1 = staticinvoke <sun.text.normalizer.UTF16: boolean isLeadSurrogate(char)>($c12);
        if $z1 == 0 goto label2;

        i8 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int next()>();
        if i8 == -1 goto label2;

        $c13 = (char) i8;
        $z2 = staticinvoke <sun.text.normalizer.UTF16: boolean isTrailSurrogate(char)>($c13);
        if $z2 == 0 goto label1;

        if i3 < 2 goto label2;

        $c14 = (char) i8;
        r1[1] = $c14;
        b11 = 2;
        goto label2;

     label1:
        virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int moveIndex(int)>(-1);

     label2:
        if i3 <= 0 goto label3;

        $c16 = (char) i7;
        r1[0] = $c16;

     label3:
        return b11;

     label4:
        r5 = newarray (char)[100];
        r6 = newarray (int)[1];
        i9 = staticinvoke <sun.text.normalizer.NormalizerBase: int findNextIterationBoundary(sun.text.normalizer.UCharacterIterator,sun.text.normalizer.NormalizerBase$IsNextBoundary,int,int,char[])>(r0, r4, c5, i6, r5);
        if i9 <= 0 goto label9;

        if z0 == 0 goto label8;

        $i17 = r6[0];
        i4 = virtualinvoke r2.<sun.text.normalizer.NormalizerBase$Mode: int normalize(char[],int,int,char[],int,int,int)>(r5, $i17, i9, r1, i0, i1, i2);
        if r3 == null goto label9;

        $b18 = 0;
        if i4 != i9 goto label5;

        $i19 = r6[0];
        $z3 = staticinvoke <sun.text.normalizer.Utility: boolean arrayRegionMatches(char[],int,char[],int,int)>(r5, $i19, r1, i0, i4);
        if $z3 == 0 goto label6;

     label5:
        $z4 = 1;
        goto label7;

     label6:
        $z4 = 0;

     label7:
        r3[$b18] = $z4;
        goto label9;

     label8:
        if i3 <= 0 goto label9;

        $i20 = staticinvoke <java.lang.Math: int min(int,int)>(i9, i3);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r1, i0, $i20);

     label9:
        return i4;
    }

    private void clearBuffer()
    {
        sun.text.normalizer.NormalizerBase r0;
        byte $b0;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        $b0 = 0;
        r0.<sun.text.normalizer.NormalizerBase: int bufferPos> = $b0;
        r0.<sun.text.normalizer.NormalizerBase: int bufferStart> = $b0;
        r0.<sun.text.normalizer.NormalizerBase: int bufferLimit> = $b0;
        return;
    }

    private boolean nextNormalize()
    {
        sun.text.normalizer.NormalizerBase r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        sun.text.normalizer.UCharacterIterator $r1, $r2, $r6;
        char[] $r3, $r4;
        sun.text.normalizer.NormalizerBase$Mode $r5;
        boolean $z0;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        specialinvoke r0.<sun.text.normalizer.NormalizerBase: void clearBuffer()>();
        $i0 = r0.<sun.text.normalizer.NormalizerBase: int nextIndex>;
        r0.<sun.text.normalizer.NormalizerBase: int currentIndex> = $i0;
        $r1 = r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.UCharacterIterator text>;
        $i1 = r0.<sun.text.normalizer.NormalizerBase: int nextIndex>;
        virtualinvoke $r1.<sun.text.normalizer.UCharacterIterator: void setIndex(int)>($i1);
        $r2 = r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.UCharacterIterator text>;
        $r3 = r0.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        $i2 = r0.<sun.text.normalizer.NormalizerBase: int bufferStart>;
        $r4 = r0.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        $i3 = lengthof $r4;
        $r5 = r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode mode>;
        $i4 = r0.<sun.text.normalizer.NormalizerBase: int options>;
        $i5 = staticinvoke <sun.text.normalizer.NormalizerBase: int next(sun.text.normalizer.UCharacterIterator,char[],int,int,sun.text.normalizer.NormalizerBase$Mode,boolean,boolean[],int)>($r2, $r3, $i2, $i3, $r5, 1, null, $i4);
        r0.<sun.text.normalizer.NormalizerBase: int bufferLimit> = $i5;
        $r6 = r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.UCharacterIterator text>;
        $i6 = virtualinvoke $r6.<sun.text.normalizer.UCharacterIterator: int getIndex()>();
        r0.<sun.text.normalizer.NormalizerBase: int nextIndex> = $i6;
        $i7 = r0.<sun.text.normalizer.NormalizerBase: int bufferLimit>;
        if $i7 <= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private boolean previousNormalize()
    {
        sun.text.normalizer.NormalizerBase r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        sun.text.normalizer.UCharacterIterator $r1, $r2, $r6;
        char[] $r3, $r4;
        sun.text.normalizer.NormalizerBase$Mode $r5;
        boolean $z0;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        specialinvoke r0.<sun.text.normalizer.NormalizerBase: void clearBuffer()>();
        $i0 = r0.<sun.text.normalizer.NormalizerBase: int currentIndex>;
        r0.<sun.text.normalizer.NormalizerBase: int nextIndex> = $i0;
        $r1 = r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.UCharacterIterator text>;
        $i1 = r0.<sun.text.normalizer.NormalizerBase: int currentIndex>;
        virtualinvoke $r1.<sun.text.normalizer.UCharacterIterator: void setIndex(int)>($i1);
        $r2 = r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.UCharacterIterator text>;
        $r3 = r0.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        $i2 = r0.<sun.text.normalizer.NormalizerBase: int bufferStart>;
        $r4 = r0.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        $i3 = lengthof $r4;
        $r5 = r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode mode>;
        $i4 = r0.<sun.text.normalizer.NormalizerBase: int options>;
        $i5 = staticinvoke <sun.text.normalizer.NormalizerBase: int previous(sun.text.normalizer.UCharacterIterator,char[],int,int,sun.text.normalizer.NormalizerBase$Mode,boolean,boolean[],int)>($r2, $r3, $i2, $i3, $r5, 1, null, $i4);
        r0.<sun.text.normalizer.NormalizerBase: int bufferLimit> = $i5;
        $r6 = r0.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.UCharacterIterator text>;
        $i6 = virtualinvoke $r6.<sun.text.normalizer.UCharacterIterator: int getIndex()>();
        r0.<sun.text.normalizer.NormalizerBase: int currentIndex> = $i6;
        $i7 = r0.<sun.text.normalizer.NormalizerBase: int bufferLimit>;
        r0.<sun.text.normalizer.NormalizerBase: int bufferPos> = $i7;
        $i8 = r0.<sun.text.normalizer.NormalizerBase: int bufferLimit>;
        if $i8 <= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private int getCodePointAt(int)
    {
        sun.text.normalizer.NormalizerBase r0;
        int i0, $i3, $i4, $i5, $i8, $i10, $i12, $i14, $i17;
        char[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        char $c1, $c2, $c6, $c7, $c9, $c11, $c13, $c15, $c16, $c18;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        i0 := @parameter0: int;
        $r1 = r0.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        $c1 = $r1[i0];
        $z0 = staticinvoke <sun.text.normalizer.UTF16: boolean isSurrogate(char)>($c1);
        if $z0 == 0 goto label1;

        $r2 = r0.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        $c2 = $r2[i0];
        $z1 = staticinvoke <sun.text.normalizer.UTF16: boolean isLeadSurrogate(char)>($c2);
        if $z1 == 0 goto label0;

        $i3 = i0 + 1;
        $i4 = r0.<sun.text.normalizer.NormalizerBase: int bufferLimit>;
        if $i3 >= $i4 goto label1;

        $r3 = r0.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        $i5 = i0 + 1;
        $c6 = $r3[$i5];
        $z2 = staticinvoke <sun.text.normalizer.UTF16: boolean isTrailSurrogate(char)>($c6);
        if $z2 == 0 goto label1;

        $r4 = r0.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        $c7 = $r4[i0];
        $r5 = r0.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        $i8 = i0 + 1;
        $c9 = $r5[$i8];
        $i10 = staticinvoke <sun.text.normalizer.UCharacterProperty: int getRawSupplementary(char,char)>($c7, $c9);
        return $i10;

     label0:
        $r6 = r0.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        $c11 = $r6[i0];
        $z3 = staticinvoke <sun.text.normalizer.UTF16: boolean isTrailSurrogate(char)>($c11);
        if $z3 == 0 goto label1;

        if i0 <= 0 goto label1;

        $r7 = r0.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        $i12 = i0 - 1;
        $c13 = $r7[$i12];
        $z4 = staticinvoke <sun.text.normalizer.UTF16: boolean isLeadSurrogate(char)>($c13);
        if $z4 == 0 goto label1;

        $r8 = r0.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        $i14 = i0 - 1;
        $c15 = $r8[$i14];
        $r9 = r0.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        $c16 = $r9[i0];
        $i17 = staticinvoke <sun.text.normalizer.UCharacterProperty: int getRawSupplementary(char,char)>($c15, $c16);
        return $i17;

     label1:
        $r10 = r0.<sun.text.normalizer.NormalizerBase: char[] buffer>;
        $c18 = $r10[i0];
        return $c18;
    }

    public static boolean isNFSkippable(int, sun.text.normalizer.NormalizerBase$Mode)
    {
        int i0;
        sun.text.normalizer.NormalizerBase$Mode r0;
        boolean $z0;

        i0 := @parameter0: int;
        r0 := @parameter1: sun.text.normalizer.NormalizerBase$Mode;
        $z0 = virtualinvoke r0.<sun.text.normalizer.NormalizerBase$Mode: boolean isNFSkippable(int)>(i0);
        return $z0;
    }

    public void <init>(java.lang.String, sun.text.normalizer.NormalizerBase$Mode)
    {
        sun.text.normalizer.NormalizerBase r0;
        java.lang.String r1;
        sun.text.normalizer.NormalizerBase$Mode r2;

        r0 := @this: sun.text.normalizer.NormalizerBase;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: sun.text.normalizer.NormalizerBase$Mode;
        specialinvoke r0.<sun.text.normalizer.NormalizerBase: void <init>(java.lang.String,sun.text.normalizer.NormalizerBase$Mode,int)>(r1, r2, 0);
        return;
    }

    public static java.lang.String normalize(java.lang.String, java.text.Normalizer$Form)
    {
        java.lang.String r0, $r2;
        java.text.Normalizer$Form r1;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.text.Normalizer$Form;
        $r2 = staticinvoke <sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>(r0, r1, 0);
        return $r2;
    }

    public static java.lang.String normalize(java.lang.String, java.text.Normalizer$Form, int)
    {
        java.lang.String r0, $r4, $r6, $r8, $r10, $r16;
        java.text.Normalizer$Form r1;
        int i0, i1, i2, i3, $i6, $i7;
        boolean z0;
        char $c4, $c5;
        char[] r2;
        int[] $r3;
        sun.text.normalizer.NormalizerBase$Mode $r5, $r7, $r9, $r11;
        java.lang.IllegalArgumentException $r12;
        java.lang.StringBuilder $r13, $r14, $r15;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.text.Normalizer$Form;
        i0 := @parameter2: int;
        i1 = virtualinvoke r0.<java.lang.String: int length()>();
        z0 = 1;
        if i1 >= 80 goto label3;

        i2 = 0;

     label0:
        if i2 >= i1 goto label2;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        if $c4 <= 127 goto label1;

        z0 = 0;
        goto label2;

     label1:
        i2 = i2 + 1;
        goto label0;

     label2:
        goto label6;

     label3:
        r2 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();
        i3 = 0;

     label4:
        if i3 >= i1 goto label6;

        $c5 = r2[i3];
        if $c5 <= 127 goto label5;

        z0 = 0;
        goto label6;

     label5:
        i3 = i3 + 1;
        goto label4;

     label6:
        $r3 = <sun.text.normalizer.NormalizerBase$1: int[] $SwitchMap$java$text$Normalizer$Form>;
        $i6 = virtualinvoke r1.<java.text.Normalizer$Form: int ordinal()>();
        $i7 = $r3[$i6];
        tableswitch($i7)
        {
            case 1: goto label7;
            case 2: goto label10;
            case 3: goto label13;
            case 4: goto label16;
            default: goto label19;
        };

     label7:
        if z0 == 0 goto label8;

        $r4 = r0;
        goto label9;

     label8:
        $r5 = <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode NFC>;
        $r4 = virtualinvoke $r5.<sun.text.normalizer.NormalizerBase$Mode: java.lang.String normalize(java.lang.String,int)>(r0, i0);

     label9:
        return $r4;

     label10:
        if z0 == 0 goto label11;

        $r6 = r0;
        goto label12;

     label11:
        $r7 = <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode NFD>;
        $r6 = virtualinvoke $r7.<sun.text.normalizer.NormalizerBase$Mode: java.lang.String normalize(java.lang.String,int)>(r0, i0);

     label12:
        return $r6;

     label13:
        if z0 == 0 goto label14;

        $r8 = r0;
        goto label15;

     label14:
        $r9 = <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode NFKC>;
        $r8 = virtualinvoke $r9.<sun.text.normalizer.NormalizerBase$Mode: java.lang.String normalize(java.lang.String,int)>(r0, i0);

     label15:
        return $r8;

     label16:
        if z0 == 0 goto label17;

        $r10 = r0;
        goto label18;

     label17:
        $r11 = <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode NFKD>;
        $r10 = virtualinvoke $r11.<sun.text.normalizer.NormalizerBase$Mode: java.lang.String normalize(java.lang.String,int)>(r0, i0);

     label18:
        return $r10;

     label19:
        $r12 = new java.lang.IllegalArgumentException;
        $r13 = new java.lang.StringBuilder;
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected normalization form: ");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);
        throw $r12;
    }

    public static boolean isNormalized(java.lang.String, java.text.Normalizer$Form)
    {
        java.lang.String r0;
        java.text.Normalizer$Form r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.text.Normalizer$Form;
        $z0 = staticinvoke <sun.text.normalizer.NormalizerBase: boolean isNormalized(java.lang.String,java.text.Normalizer$Form,int)>(r0, r1, 0);
        return $z0;
    }

    public static boolean isNormalized(java.lang.String, java.text.Normalizer$Form, int)
    {
        java.lang.String r0, $r27;
        java.text.Normalizer$Form r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r2;
        sun.text.normalizer.NormalizerBase$Mode $r3, $r8, $r13, $r18;
        char[] $r4, $r9, $r14, $r19;
        sun.text.normalizer.UnicodeSet $r5, $r10, $r15, $r20;
        sun.text.normalizer.NormalizerBase$QuickCheckResult $r6, $r7, $r11, $r12, $r16, $r17, $r21, $r22;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r23;
        java.lang.StringBuilder $r24, $r25, $r26;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.text.Normalizer$Form;
        i0 := @parameter2: int;
        $r2 = <sun.text.normalizer.NormalizerBase$1: int[] $SwitchMap$java$text$Normalizer$Form>;
        $i1 = virtualinvoke r1.<java.text.Normalizer$Form: int ordinal()>();
        $i2 = $r2[$i1];
        tableswitch($i2)
        {
            case 1: goto label0;
            case 2: goto label3;
            case 3: goto label6;
            case 4: goto label9;
            default: goto label12;
        };

     label0:
        $r3 = <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode NFC>;
        $r4 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();
        $r5 = staticinvoke <sun.text.normalizer.NormalizerImpl: sun.text.normalizer.UnicodeSet getNX(int)>(i0);
        $r6 = virtualinvoke $r3.<sun.text.normalizer.NormalizerBase$Mode: sun.text.normalizer.NormalizerBase$QuickCheckResult quickCheck(char[],int,int,boolean,sun.text.normalizer.UnicodeSet)>($r4, 0, $i3, 0, $r5);
        $r7 = <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$QuickCheckResult YES>;
        if $r6 != $r7 goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $r8 = <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode NFD>;
        $r9 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();
        $i4 = virtualinvoke r0.<java.lang.String: int length()>();
        $r10 = staticinvoke <sun.text.normalizer.NormalizerImpl: sun.text.normalizer.UnicodeSet getNX(int)>(i0);
        $r11 = virtualinvoke $r8.<sun.text.normalizer.NormalizerBase$Mode: sun.text.normalizer.NormalizerBase$QuickCheckResult quickCheck(char[],int,int,boolean,sun.text.normalizer.UnicodeSet)>($r9, 0, $i4, 0, $r10);
        $r12 = <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$QuickCheckResult YES>;
        if $r11 != $r12 goto label4;

        $z1 = 1;
        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;

     label6:
        $r13 = <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode NFKC>;
        $r14 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();
        $i5 = virtualinvoke r0.<java.lang.String: int length()>();
        $r15 = staticinvoke <sun.text.normalizer.NormalizerImpl: sun.text.normalizer.UnicodeSet getNX(int)>(i0);
        $r16 = virtualinvoke $r13.<sun.text.normalizer.NormalizerBase$Mode: sun.text.normalizer.NormalizerBase$QuickCheckResult quickCheck(char[],int,int,boolean,sun.text.normalizer.UnicodeSet)>($r14, 0, $i5, 0, $r15);
        $r17 = <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$QuickCheckResult YES>;
        if $r16 != $r17 goto label7;

        $z2 = 1;
        goto label8;

     label7:
        $z2 = 0;

     label8:
        return $z2;

     label9:
        $r18 = <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode NFKD>;
        $r19 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();
        $i6 = virtualinvoke r0.<java.lang.String: int length()>();
        $r20 = staticinvoke <sun.text.normalizer.NormalizerImpl: sun.text.normalizer.UnicodeSet getNX(int)>(i0);
        $r21 = virtualinvoke $r18.<sun.text.normalizer.NormalizerBase$Mode: sun.text.normalizer.NormalizerBase$QuickCheckResult quickCheck(char[],int,int,boolean,sun.text.normalizer.UnicodeSet)>($r19, 0, $i6, 0, $r20);
        $r22 = <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$QuickCheckResult YES>;
        if $r21 != $r22 goto label10;

        $z3 = 1;
        goto label11;

     label10:
        $z3 = 0;

     label11:
        return $z3;

     label12:
        $r23 = new java.lang.IllegalArgumentException;
        $r24 = new java.lang.StringBuilder;
        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected normalization form: ");
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r27);
        throw $r23;
    }

    static long access$1000(sun.text.normalizer.UCharacterIterator, int, int, char[])
    {
        sun.text.normalizer.UCharacterIterator r0;
        int i0, i1;
        char[] r1;
        long $l2;

        r0 := @parameter0: sun.text.normalizer.UCharacterIterator;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 := @parameter3: char[];
        $l2 = staticinvoke <sun.text.normalizer.NormalizerBase: long getPrevNorm32(sun.text.normalizer.UCharacterIterator,int,int,char[])>(r0, i0, i1, r1);
        return $l2;
    }

    static long access$1100(sun.text.normalizer.UCharacterIterator, int, int, int[])
    {
        sun.text.normalizer.UCharacterIterator r0;
        int i0, i1;
        int[] r1;
        long $l2;

        r0 := @parameter0: sun.text.normalizer.UCharacterIterator;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 := @parameter3: int[];
        $l2 = staticinvoke <sun.text.normalizer.NormalizerBase: long getNextNorm32(sun.text.normalizer.UCharacterIterator,int,int,int[])>(r0, i0, i1, r1);
        return $l2;
    }

    static void <clinit>()
    {
        sun.text.normalizer.NormalizerBase$Mode $r0;
        sun.text.normalizer.NormalizerBase$NFDMode $r1;
        sun.text.normalizer.NormalizerBase$NFKDMode $r2;
        sun.text.normalizer.NormalizerBase$NFCMode $r3;
        sun.text.normalizer.NormalizerBase$NFKCMode $r4;
        sun.text.normalizer.NormalizerBase$QuickCheckResult $r5, $r6, $r7;

        $r0 = new sun.text.normalizer.NormalizerBase$Mode;
        specialinvoke $r0.<sun.text.normalizer.NormalizerBase$Mode: void <init>(int,sun.text.normalizer.NormalizerBase$1)>(1, null);
        <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode NONE> = $r0;
        $r1 = new sun.text.normalizer.NormalizerBase$NFDMode;
        specialinvoke $r1.<sun.text.normalizer.NormalizerBase$NFDMode: void <init>(int,sun.text.normalizer.NormalizerBase$1)>(2, null);
        <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode NFD> = $r1;
        $r2 = new sun.text.normalizer.NormalizerBase$NFKDMode;
        specialinvoke $r2.<sun.text.normalizer.NormalizerBase$NFKDMode: void <init>(int,sun.text.normalizer.NormalizerBase$1)>(3, null);
        <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode NFKD> = $r2;
        $r3 = new sun.text.normalizer.NormalizerBase$NFCMode;
        specialinvoke $r3.<sun.text.normalizer.NormalizerBase$NFCMode: void <init>(int,sun.text.normalizer.NormalizerBase$1)>(4, null);
        <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode NFC> = $r3;
        $r4 = new sun.text.normalizer.NormalizerBase$NFKCMode;
        specialinvoke $r4.<sun.text.normalizer.NormalizerBase$NFKCMode: void <init>(int,sun.text.normalizer.NormalizerBase$1)>(5, null);
        <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode NFKC> = $r4;
        $r5 = new sun.text.normalizer.NormalizerBase$QuickCheckResult;
        specialinvoke $r5.<sun.text.normalizer.NormalizerBase$QuickCheckResult: void <init>(int,sun.text.normalizer.NormalizerBase$1)>(0, null);
        <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$QuickCheckResult NO> = $r5;
        $r6 = new sun.text.normalizer.NormalizerBase$QuickCheckResult;
        specialinvoke $r6.<sun.text.normalizer.NormalizerBase$QuickCheckResult: void <init>(int,sun.text.normalizer.NormalizerBase$1)>(1, null);
        <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$QuickCheckResult YES> = $r6;
        $r7 = new sun.text.normalizer.NormalizerBase$QuickCheckResult;
        specialinvoke $r7.<sun.text.normalizer.NormalizerBase$QuickCheckResult: void <init>(int,sun.text.normalizer.NormalizerBase$1)>(2, null);
        <sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$QuickCheckResult MAYBE> = $r7;
        return;
    }
}
