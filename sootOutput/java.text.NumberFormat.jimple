public abstract class java.text.NumberFormat extends java.text.Format
{
    public static final int INTEGER_FIELD;
    public static final int FRACTION_FIELD;
    private static final java.util.Hashtable cachedLocaleData;
    private static final int NUMBERSTYLE;
    private static final int CURRENCYSTYLE;
    private static final int PERCENTSTYLE;
    private static final int SCIENTIFICSTYLE;
    private static final int INTEGERSTYLE;
    private boolean groupingUsed;
    private byte maxIntegerDigits;
    private byte minIntegerDigits;
    private byte maxFractionDigits;
    private byte minFractionDigits;
    private boolean parseIntegerOnly;
    private int maximumIntegerDigits;
    private int minimumIntegerDigits;
    private int maximumFractionDigits;
    private int minimumFractionDigits;
    static final int currentSerialVersion;
    private int serialVersionOnStream;
    static final long serialVersionUID;

    protected void <init>()
    {
        java.text.NumberFormat r0;

        r0 := @this: java.text.NumberFormat;
        specialinvoke r0.<java.text.Format: void <init>()>();
        r0.<java.text.NumberFormat: boolean groupingUsed> = 1;
        r0.<java.text.NumberFormat: byte maxIntegerDigits> = 40;
        r0.<java.text.NumberFormat: byte minIntegerDigits> = 1;
        r0.<java.text.NumberFormat: byte maxFractionDigits> = 3;
        r0.<java.text.NumberFormat: byte minFractionDigits> = 0;
        r0.<java.text.NumberFormat: boolean parseIntegerOnly> = 0;
        r0.<java.text.NumberFormat: int maximumIntegerDigits> = 40;
        r0.<java.text.NumberFormat: int minimumIntegerDigits> = 1;
        r0.<java.text.NumberFormat: int maximumFractionDigits> = 3;
        r0.<java.text.NumberFormat: int minimumFractionDigits> = 0;
        r0.<java.text.NumberFormat: int serialVersionOnStream> = 1;
        return;
    }

    public java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)
    {
        java.text.NumberFormat r0;
        java.lang.Object r1;
        java.lang.StringBuffer r2, $r6, $r8;
        java.text.FieldPosition r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.math.BigInteger $r4;
        int $i0;
        java.lang.Number $r5, $r7;
        long $l1;
        double $d0;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: java.text.NumberFormat;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.StringBuffer;
        r3 := @parameter2: java.text.FieldPosition;
        $z0 = r1 instanceof java.lang.Long;
        if $z0 != 0 goto label0;

        $z1 = r1 instanceof java.lang.Integer;
        if $z1 != 0 goto label0;

        $z2 = r1 instanceof java.lang.Short;
        if $z2 != 0 goto label0;

        $z3 = r1 instanceof java.lang.Byte;
        if $z3 != 0 goto label0;

        $z4 = r1 instanceof java.util.concurrent.atomic.AtomicInteger;
        if $z4 != 0 goto label0;

        $z5 = r1 instanceof java.util.concurrent.atomic.AtomicLong;
        if $z5 != 0 goto label0;

        $z6 = r1 instanceof java.math.BigInteger;
        if $z6 == 0 goto label1;

        $r4 = (java.math.BigInteger) r1;
        $i0 = virtualinvoke $r4.<java.math.BigInteger: int bitLength()>();
        if $i0 >= 64 goto label1;

     label0:
        $r5 = (java.lang.Number) r1;
        $l1 = virtualinvoke $r5.<java.lang.Number: long longValue()>();
        $r6 = virtualinvoke r0.<java.text.NumberFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>($l1, r2, r3);
        return $r6;

     label1:
        $z7 = r1 instanceof java.lang.Number;
        if $z7 == 0 goto label2;

        $r7 = (java.lang.Number) r1;
        $d0 = virtualinvoke $r7.<java.lang.Number: double doubleValue()>();
        $r8 = virtualinvoke r0.<java.text.NumberFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>($d0, r2, r3);
        return $r8;

     label2:
        $r9 = new java.lang.IllegalArgumentException;
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot format given Object as a Number");
        throw $r9;
    }

    public final java.lang.Object parseObject(java.lang.String, java.text.ParsePosition)
    {
        java.text.NumberFormat r0;
        java.lang.String r1;
        java.text.ParsePosition r2;
        java.lang.Number $r3;

        r0 := @this: java.text.NumberFormat;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.text.ParsePosition;
        $r3 = virtualinvoke r0.<java.text.NumberFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>(r1, r2);
        return $r3;
    }

    public final java.lang.String format(double)
    {
        java.text.NumberFormat r0;
        double d0;
        java.lang.StringBuffer $r1, $r3;
        java.text.FieldPosition $r2;
        java.lang.String $r4;

        r0 := @this: java.text.NumberFormat;
        d0 := @parameter0: double;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r2 = <java.text.DontCareFieldPosition: java.text.FieldPosition INSTANCE>;
        $r3 = virtualinvoke r0.<java.text.NumberFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>(d0, $r1, $r2);
        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r4;
    }

    public final java.lang.String format(long)
    {
        java.text.NumberFormat r0;
        long l0;
        java.lang.StringBuffer $r1, $r3;
        java.text.FieldPosition $r2;
        java.lang.String $r4;

        r0 := @this: java.text.NumberFormat;
        l0 := @parameter0: long;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r2 = <java.text.DontCareFieldPosition: java.text.FieldPosition INSTANCE>;
        $r3 = virtualinvoke r0.<java.text.NumberFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>(l0, $r1, $r2);
        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r4;
    }

    public abstract java.lang.StringBuffer format(double, java.lang.StringBuffer, java.text.FieldPosition);

    public abstract java.lang.StringBuffer format(long, java.lang.StringBuffer, java.text.FieldPosition);

    public abstract java.lang.Number parse(java.lang.String, java.text.ParsePosition);

    public java.lang.Number parse(java.lang.String) throws java.text.ParseException
    {
        java.text.NumberFormat r0;
        java.lang.String r1, $r10;
        java.text.ParsePosition $r2, r3;
        java.lang.Number r4;
        int $i0, $i1;
        java.text.ParseException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @this: java.text.NumberFormat;
        r1 := @parameter0: java.lang.String;
        $r2 = new java.text.ParsePosition;
        specialinvoke $r2.<java.text.ParsePosition: void <init>(int)>(0);
        r3 = $r2;
        r4 = virtualinvoke r0.<java.text.NumberFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>(r1, r3);
        $i0 = r3.<java.text.ParsePosition: int index>;
        if $i0 != 0 goto label0;

        $r5 = new java.text.ParseException;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unparseable number: \"");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        $i1 = r3.<java.text.ParsePosition: int errorIndex>;
        specialinvoke $r5.<java.text.ParseException: void <init>(java.lang.String,int)>($r10, $i1);
        throw $r5;

     label0:
        return r4;
    }

    public boolean isParseIntegerOnly()
    {
        java.text.NumberFormat r0;
        boolean $z0;

        r0 := @this: java.text.NumberFormat;
        $z0 = r0.<java.text.NumberFormat: boolean parseIntegerOnly>;
        return $z0;
    }

    public void setParseIntegerOnly(boolean)
    {
        java.text.NumberFormat r0;
        boolean z0;

        r0 := @this: java.text.NumberFormat;
        z0 := @parameter0: boolean;
        r0.<java.text.NumberFormat: boolean parseIntegerOnly> = z0;
        return;
    }

    public static final java.text.NumberFormat getInstance()
    {
        java.util.Locale$Category $r0;
        java.util.Locale $r1;
        java.text.NumberFormat $r2;

        $r0 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r0);
        $r2 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale,int)>($r1, 0);
        return $r2;
    }

    public static java.text.NumberFormat getInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.NumberFormat $r1;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale,int)>(r0, 0);
        return $r1;
    }

    public static final java.text.NumberFormat getNumberInstance()
    {
        java.util.Locale$Category $r0;
        java.util.Locale $r1;
        java.text.NumberFormat $r2;

        $r0 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r0);
        $r2 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale,int)>($r1, 0);
        return $r2;
    }

    public static java.text.NumberFormat getNumberInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.NumberFormat $r1;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale,int)>(r0, 0);
        return $r1;
    }

    public static final java.text.NumberFormat getIntegerInstance()
    {
        java.util.Locale$Category $r0;
        java.util.Locale $r1;
        java.text.NumberFormat $r2;

        $r0 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r0);
        $r2 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale,int)>($r1, 4);
        return $r2;
    }

    public static java.text.NumberFormat getIntegerInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.NumberFormat $r1;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale,int)>(r0, 4);
        return $r1;
    }

    public static final java.text.NumberFormat getCurrencyInstance()
    {
        java.util.Locale$Category $r0;
        java.util.Locale $r1;
        java.text.NumberFormat $r2;

        $r0 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r0);
        $r2 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale,int)>($r1, 1);
        return $r2;
    }

    public static java.text.NumberFormat getCurrencyInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.NumberFormat $r1;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale,int)>(r0, 1);
        return $r1;
    }

    public static final java.text.NumberFormat getPercentInstance()
    {
        java.util.Locale$Category $r0;
        java.util.Locale $r1;
        java.text.NumberFormat $r2;

        $r0 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r0);
        $r2 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale,int)>($r1, 2);
        return $r2;
    }

    public static java.text.NumberFormat getPercentInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.NumberFormat $r1;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale,int)>(r0, 2);
        return $r1;
    }

    static final java.text.NumberFormat getScientificInstance()
    {
        java.util.Locale$Category $r0;
        java.util.Locale $r1;
        java.text.NumberFormat $r2;

        $r0 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r0);
        $r2 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale,int)>($r1, 3);
        return $r2;
    }

    static java.text.NumberFormat getScientificInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.NumberFormat $r1;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale,int)>(r0, 3);
        return $r1;
    }

    public static java.util.Locale[] getAvailableLocales()
    {
        sun.util.LocaleServiceProviderPool r0;
        java.util.Locale[] $r1;

        r0 = staticinvoke <sun.util.LocaleServiceProviderPool: sun.util.LocaleServiceProviderPool getPool(java.lang.Class)>(class "java/text/spi/NumberFormatProvider");
        $r1 = virtualinvoke r0.<sun.util.LocaleServiceProviderPool: java.util.Locale[] getAvailableLocales()>();
        return $r1;
    }

    public int hashCode()
    {
        java.text.NumberFormat r0;
        int $i0, $i1, $i3;
        byte $b2;

        r0 := @this: java.text.NumberFormat;
        $i0 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;
        $i1 = $i0 * 37;
        $b2 = r0.<java.text.NumberFormat: byte maxFractionDigits>;
        $i3 = $i1 + $b2;
        return $i3;
    }

    public boolean equals(java.lang.Object)
    {
        java.text.NumberFormat r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: java.text.NumberFormat;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        return 0;

     label0:
        if r0 != r1 goto label1;

        return 1;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        if $r3 == $r4 goto label2;

        return 0;

     label2:
        r2 = (java.text.NumberFormat) r1;
        $i0 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;
        $i1 = r2.<java.text.NumberFormat: int maximumIntegerDigits>;
        if $i0 != $i1 goto label3;

        $i2 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;
        $i3 = r2.<java.text.NumberFormat: int minimumIntegerDigits>;
        if $i2 != $i3 goto label3;

        $i4 = r0.<java.text.NumberFormat: int maximumFractionDigits>;
        $i5 = r2.<java.text.NumberFormat: int maximumFractionDigits>;
        if $i4 != $i5 goto label3;

        $i6 = r0.<java.text.NumberFormat: int minimumFractionDigits>;
        $i7 = r2.<java.text.NumberFormat: int minimumFractionDigits>;
        if $i6 != $i7 goto label3;

        $z0 = r0.<java.text.NumberFormat: boolean groupingUsed>;
        $z1 = r2.<java.text.NumberFormat: boolean groupingUsed>;
        if $z0 != $z1 goto label3;

        $z2 = r0.<java.text.NumberFormat: boolean parseIntegerOnly>;
        $z3 = r2.<java.text.NumberFormat: boolean parseIntegerOnly>;
        if $z2 != $z3 goto label3;

        $z4 = 1;
        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    public java.lang.Object clone()
    {
        java.text.NumberFormat r0, r1;
        java.lang.Object $r2;

        r0 := @this: java.text.NumberFormat;
        $r2 = specialinvoke r0.<java.text.Format: java.lang.Object clone()>();
        r1 = (java.text.NumberFormat) $r2;
        return r1;
    }

    public boolean isGroupingUsed()
    {
        java.text.NumberFormat r0;
        boolean $z0;

        r0 := @this: java.text.NumberFormat;
        $z0 = r0.<java.text.NumberFormat: boolean groupingUsed>;
        return $z0;
    }

    public void setGroupingUsed(boolean)
    {
        java.text.NumberFormat r0;
        boolean z0;

        r0 := @this: java.text.NumberFormat;
        z0 := @parameter0: boolean;
        r0.<java.text.NumberFormat: boolean groupingUsed> = z0;
        return;
    }

    public int getMaximumIntegerDigits()
    {
        java.text.NumberFormat r0;
        int $i0;

        r0 := @this: java.text.NumberFormat;
        $i0 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;
        return $i0;
    }

    public void setMaximumIntegerDigits(int)
    {
        java.text.NumberFormat r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.text.NumberFormat;
        i0 := @parameter0: int;
        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, i0);
        r0.<java.text.NumberFormat: int maximumIntegerDigits> = $i1;
        $i2 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;
        $i3 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;
        if $i2 <= $i3 goto label0;

        $i4 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;
        r0.<java.text.NumberFormat: int minimumIntegerDigits> = $i4;

     label0:
        return;
    }

    public int getMinimumIntegerDigits()
    {
        java.text.NumberFormat r0;
        int $i0;

        r0 := @this: java.text.NumberFormat;
        $i0 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;
        return $i0;
    }

    public void setMinimumIntegerDigits(int)
    {
        java.text.NumberFormat r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.text.NumberFormat;
        i0 := @parameter0: int;
        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, i0);
        r0.<java.text.NumberFormat: int minimumIntegerDigits> = $i1;
        $i2 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;
        $i3 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;
        if $i2 <= $i3 goto label0;

        $i4 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;
        r0.<java.text.NumberFormat: int maximumIntegerDigits> = $i4;

     label0:
        return;
    }

    public int getMaximumFractionDigits()
    {
        java.text.NumberFormat r0;
        int $i0;

        r0 := @this: java.text.NumberFormat;
        $i0 = r0.<java.text.NumberFormat: int maximumFractionDigits>;
        return $i0;
    }

    public void setMaximumFractionDigits(int)
    {
        java.text.NumberFormat r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.text.NumberFormat;
        i0 := @parameter0: int;
        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, i0);
        r0.<java.text.NumberFormat: int maximumFractionDigits> = $i1;
        $i2 = r0.<java.text.NumberFormat: int maximumFractionDigits>;
        $i3 = r0.<java.text.NumberFormat: int minimumFractionDigits>;
        if $i2 >= $i3 goto label0;

        $i4 = r0.<java.text.NumberFormat: int maximumFractionDigits>;
        r0.<java.text.NumberFormat: int minimumFractionDigits> = $i4;

     label0:
        return;
    }

    public int getMinimumFractionDigits()
    {
        java.text.NumberFormat r0;
        int $i0;

        r0 := @this: java.text.NumberFormat;
        $i0 = r0.<java.text.NumberFormat: int minimumFractionDigits>;
        return $i0;
    }

    public void setMinimumFractionDigits(int)
    {
        java.text.NumberFormat r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.text.NumberFormat;
        i0 := @parameter0: int;
        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, i0);
        r0.<java.text.NumberFormat: int minimumFractionDigits> = $i1;
        $i2 = r0.<java.text.NumberFormat: int maximumFractionDigits>;
        $i3 = r0.<java.text.NumberFormat: int minimumFractionDigits>;
        if $i2 >= $i3 goto label0;

        $i4 = r0.<java.text.NumberFormat: int minimumFractionDigits>;
        r0.<java.text.NumberFormat: int maximumFractionDigits> = $i4;

     label0:
        return;
    }

    public java.util.Currency getCurrency()
    {
        java.text.NumberFormat r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.text.NumberFormat;
        $r1 = new java.lang.UnsupportedOperationException;
        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r1;
    }

    public void setCurrency(java.util.Currency)
    {
        java.text.NumberFormat r0;
        java.util.Currency r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.text.NumberFormat;
        r1 := @parameter0: java.util.Currency;
        $r2 = new java.lang.UnsupportedOperationException;
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r2;
    }

    public java.math.RoundingMode getRoundingMode()
    {
        java.text.NumberFormat r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.text.NumberFormat;
        $r1 = new java.lang.UnsupportedOperationException;
        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r1;
    }

    public void setRoundingMode(java.math.RoundingMode)
    {
        java.text.NumberFormat r0;
        java.math.RoundingMode r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.text.NumberFormat;
        r1 := @parameter0: java.math.RoundingMode;
        $r2 = new java.lang.UnsupportedOperationException;
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r2;
    }

    private static java.text.NumberFormat getInstance(java.util.Locale, int)
    {
        java.util.Locale r0;
        int i0, i1, $i2;
        sun.util.LocaleServiceProviderPool r1;
        java.text.NumberFormat$NumberFormatGetter $r2;
        java.text.NumberFormat r3;
        java.util.ResourceBundle r4;
        java.text.DecimalFormat r5, $r16;
        boolean $z0;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;
        java.lang.Object $r8, $r10;
        java.util.Hashtable $r9, $r13;
        java.lang.String[] $r11, r12;
        java.text.DecimalFormatSymbols r15;
        java.lang.String $r17;

        r0 := @parameter0: java.util.Locale;
        i0 := @parameter1: int;
        r1 = staticinvoke <sun.util.LocaleServiceProviderPool: sun.util.LocaleServiceProviderPool getPool(java.lang.Class)>(class "java/text/spi/NumberFormatProvider");
        $z0 = virtualinvoke r1.<sun.util.LocaleServiceProviderPool: boolean hasProviders()>();
        if $z0 == 0 goto label0;

        $r2 = staticinvoke <java.text.NumberFormat$NumberFormatGetter: java.text.NumberFormat$NumberFormatGetter access$000()>();
        $r6 = newarray (java.lang.Object)[1];
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        $r6[0] = $r7;
        $r8 = virtualinvoke r1.<sun.util.LocaleServiceProviderPool: java.lang.Object getLocalizedObject(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,java.lang.Object[])>($r2, r0, $r6);
        r3 = (java.text.NumberFormat) $r8;
        if r3 == null goto label0;

        return r3;

     label0:
        $r9 = <java.text.NumberFormat: java.util.Hashtable cachedLocaleData>;
        $r10 = virtualinvoke $r9.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);
        $r11 = (java.lang.String[]) $r10;
        r12 = (java.lang.String[]) $r11;
        if r12 != null goto label1;

        r4 = staticinvoke <sun.util.resources.LocaleData: java.util.ResourceBundle getNumberFormatData(java.util.Locale)>(r0);
        r12 = virtualinvoke r4.<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>("NumberPatterns");
        $r13 = <java.text.NumberFormat: java.util.Hashtable cachedLocaleData>;
        virtualinvoke $r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r12);

     label1:
        r15 = staticinvoke <java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>(r0);
        if i0 != 4 goto label2;

        $i2 = 0;
        goto label3;

     label2:
        $i2 = i0;

     label3:
        i1 = $i2;
        $r16 = new java.text.DecimalFormat;
        $r17 = r12[i1];
        specialinvoke $r16.<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>($r17, r15);
        r5 = $r16;
        if i0 != 4 goto label4;

        virtualinvoke r5.<java.text.DecimalFormat: void setMaximumFractionDigits(int)>(0);
        virtualinvoke r5.<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>(0);
        virtualinvoke r5.<java.text.DecimalFormat: void setParseIntegerOnly(boolean)>(1);
        goto label5;

     label4:
        if i0 != 1 goto label5;

        virtualinvoke r5.<java.text.DecimalFormat: void adjustForCurrencyDefaultFractionDigits()>();

     label5:
        return r5;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.text.NumberFormat r0;
        java.io.ObjectInputStream r1;
        int $i0, $i5, $i6, $i7, $i8, $i9, $i10;
        byte $b1, $b2, $b3, $b4;
        java.io.InvalidObjectException $r2;

        r0 := @this: java.text.NumberFormat;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        $i0 = r0.<java.text.NumberFormat: int serialVersionOnStream>;
        if $i0 >= 1 goto label0;

        $b1 = r0.<java.text.NumberFormat: byte maxIntegerDigits>;
        r0.<java.text.NumberFormat: int maximumIntegerDigits> = $b1;
        $b2 = r0.<java.text.NumberFormat: byte minIntegerDigits>;
        r0.<java.text.NumberFormat: int minimumIntegerDigits> = $b2;
        $b3 = r0.<java.text.NumberFormat: byte maxFractionDigits>;
        r0.<java.text.NumberFormat: int maximumFractionDigits> = $b3;
        $b4 = r0.<java.text.NumberFormat: byte minFractionDigits>;
        r0.<java.text.NumberFormat: int minimumFractionDigits> = $b4;

     label0:
        $i5 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;
        $i6 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;
        if $i5 > $i6 goto label1;

        $i7 = r0.<java.text.NumberFormat: int minimumFractionDigits>;
        $i8 = r0.<java.text.NumberFormat: int maximumFractionDigits>;
        if $i7 > $i8 goto label1;

        $i9 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;
        if $i9 < 0 goto label1;

        $i10 = r0.<java.text.NumberFormat: int minimumFractionDigits>;
        if $i10 >= 0 goto label2;

     label1:
        $r2 = new java.io.InvalidObjectException;
        specialinvoke $r2.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Digit count range invalid");
        throw $r2;

     label2:
        r0.<java.text.NumberFormat: int serialVersionOnStream> = 1;
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.text.NumberFormat r0;
        java.io.ObjectOutputStream r1;
        int $i0, $i2, $i3, $i5, $i6, $i8, $i9, $i11;
        byte $b1, $b4, $b7, $b10;

        r0 := @this: java.text.NumberFormat;
        r1 := @parameter0: java.io.ObjectOutputStream;
        $i0 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;
        if $i0 <= 127 goto label0;

        $b1 = 127;
        goto label1;

     label0:
        $i2 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;
        $b1 = (byte) $i2;

     label1:
        r0.<java.text.NumberFormat: byte maxIntegerDigits> = $b1;
        $i3 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;
        if $i3 <= 127 goto label2;

        $b4 = 127;
        goto label3;

     label2:
        $i5 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;
        $b4 = (byte) $i5;

     label3:
        r0.<java.text.NumberFormat: byte minIntegerDigits> = $b4;
        $i6 = r0.<java.text.NumberFormat: int maximumFractionDigits>;
        if $i6 <= 127 goto label4;

        $b7 = 127;
        goto label5;

     label4:
        $i8 = r0.<java.text.NumberFormat: int maximumFractionDigits>;
        $b7 = (byte) $i8;

     label5:
        r0.<java.text.NumberFormat: byte maxFractionDigits> = $b7;
        $i9 = r0.<java.text.NumberFormat: int minimumFractionDigits>;
        if $i9 <= 127 goto label6;

        $b10 = 127;
        goto label7;

     label6:
        $i11 = r0.<java.text.NumberFormat: int minimumFractionDigits>;
        $b10 = (byte) $i11;

     label7:
        r0.<java.text.NumberFormat: byte minFractionDigits> = $b10;
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        return;
    }

    static void <clinit>()
    {
        java.util.Hashtable $r0;

        $r0 = new java.util.Hashtable;
        specialinvoke $r0.<java.util.Hashtable: void <init>(int)>(3);
        <java.text.NumberFormat: java.util.Hashtable cachedLocaleData> = $r0;
        return;
    }
}
