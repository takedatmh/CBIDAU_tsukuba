class java.nio.StringCharBuffer extends java.nio.CharBuffer
{
    java.lang.CharSequence str;

    void <init>(java.lang.CharSequence, int, int)
    {
        java.nio.StringCharBuffer r0;
        java.lang.CharSequence r1;
        int i0, i1, i2, $i3;
        java.lang.IndexOutOfBoundsException $r2;

        r0 := @this: java.nio.StringCharBuffer;
        r1 := @parameter0: java.lang.CharSequence;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i3 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();
        specialinvoke r0.<java.nio.CharBuffer: void <init>(int,int,int,int)>(-1, i0, i1, $i3);
        i2 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();
        if i0 < 0 goto label0;

        if i0 > i2 goto label0;

        if i1 < i0 goto label0;

        if i1 <= i2 goto label1;

     label0:
        $r2 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r2;

     label1:
        r0.<java.nio.StringCharBuffer: java.lang.CharSequence str> = r1;
        return;
    }

    public java.nio.CharBuffer slice()
    {
        java.nio.StringCharBuffer r0, $r1;
        java.lang.CharSequence $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.StringCharBuffer;
        $r1 = new java.nio.StringCharBuffer;
        $r2 = r0.<java.nio.StringCharBuffer: java.lang.CharSequence str>;
        $i0 = virtualinvoke r0.<java.nio.StringCharBuffer: int remaining()>();
        $i1 = virtualinvoke r0.<java.nio.StringCharBuffer: int remaining()>();
        $i2 = r0.<java.nio.StringCharBuffer: int offset>;
        $i3 = virtualinvoke r0.<java.nio.StringCharBuffer: int position()>();
        $i4 = $i2 + $i3;
        specialinvoke $r1.<java.nio.StringCharBuffer: void <init>(java.lang.CharSequence,int,int,int,int,int)>($r2, -1, 0, $i0, $i1, $i4);
        return $r1;
    }

    private void <init>(java.lang.CharSequence, int, int, int, int, int)
    {
        java.nio.StringCharBuffer r0;
        java.lang.CharSequence r1;
        int i0, i1, i2, i3, i4;

        r0 := @this: java.nio.StringCharBuffer;
        r1 := @parameter0: java.lang.CharSequence;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        specialinvoke r0.<java.nio.CharBuffer: void <init>(int,int,int,int,char[],int)>(i0, i1, i2, i3, null, i4);
        r0.<java.nio.StringCharBuffer: java.lang.CharSequence str> = r1;
        return;
    }

    public java.nio.CharBuffer duplicate()
    {
        java.nio.StringCharBuffer r0, $r1;
        java.lang.CharSequence $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.StringCharBuffer;
        $r1 = new java.nio.StringCharBuffer;
        $r2 = r0.<java.nio.StringCharBuffer: java.lang.CharSequence str>;
        $i0 = virtualinvoke r0.<java.nio.StringCharBuffer: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.StringCharBuffer: int position()>();
        $i2 = virtualinvoke r0.<java.nio.StringCharBuffer: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.StringCharBuffer: int capacity()>();
        $i4 = r0.<java.nio.StringCharBuffer: int offset>;
        specialinvoke $r1.<java.nio.StringCharBuffer: void <init>(java.lang.CharSequence,int,int,int,int,int)>($r2, $i0, $i1, $i2, $i3, $i4);
        return $r1;
    }

    public java.nio.CharBuffer asReadOnlyBuffer()
    {
        java.nio.StringCharBuffer r0;
        java.nio.CharBuffer $r1;

        r0 := @this: java.nio.StringCharBuffer;
        $r1 = virtualinvoke r0.<java.nio.StringCharBuffer: java.nio.CharBuffer duplicate()>();
        return $r1;
    }

    public final char get()
    {
        java.nio.StringCharBuffer r0;
        java.lang.CharSequence $r1;
        int $i0, $i1, $i2;
        char $c3;

        r0 := @this: java.nio.StringCharBuffer;
        $r1 = r0.<java.nio.StringCharBuffer: java.lang.CharSequence str>;
        $i0 = virtualinvoke r0.<java.nio.StringCharBuffer: int nextGetIndex()>();
        $i1 = r0.<java.nio.StringCharBuffer: int offset>;
        $i2 = $i0 + $i1;
        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i2);
        return $c3;
    }

    public final char get(int)
    {
        java.nio.StringCharBuffer r0;
        int i0, $i1, $i2, $i3;
        java.lang.CharSequence $r1;
        char $c4;

        r0 := @this: java.nio.StringCharBuffer;
        i0 := @parameter0: int;
        $r1 = r0.<java.nio.StringCharBuffer: java.lang.CharSequence str>;
        $i1 = virtualinvoke r0.<java.nio.StringCharBuffer: int checkIndex(int)>(i0);
        $i2 = r0.<java.nio.StringCharBuffer: int offset>;
        $i3 = $i1 + $i2;
        $c4 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i3);
        return $c4;
    }

    public final java.nio.CharBuffer put(char)
    {
        java.nio.StringCharBuffer r0;
        char c0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.StringCharBuffer;
        c0 := @parameter0: char;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public final java.nio.CharBuffer put(int, char)
    {
        java.nio.StringCharBuffer r0;
        int i0;
        char c1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.StringCharBuffer;
        i0 := @parameter0: int;
        c1 := @parameter1: char;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public final java.nio.CharBuffer compact()
    {
        java.nio.StringCharBuffer r0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.StringCharBuffer;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public final boolean isReadOnly()
    {
        java.nio.StringCharBuffer r0;

        r0 := @this: java.nio.StringCharBuffer;
        return 1;
    }

    final java.lang.String toString(int, int)
    {
        java.nio.StringCharBuffer r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.CharSequence $r1;
        java.lang.String $r2, $r3;

        r0 := @this: java.nio.StringCharBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = r0.<java.nio.StringCharBuffer: java.lang.CharSequence str>;
        $r2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();
        $i2 = r0.<java.nio.StringCharBuffer: int offset>;
        $i3 = i0 + $i2;
        $i4 = r0.<java.nio.StringCharBuffer: int offset>;
        $i5 = i1 + $i4;
        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i3, $i5);
        return $r3;
    }

    public final java.nio.CharBuffer subSequence(int, int)
    {
        java.nio.StringCharBuffer r0, $r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.CharSequence $r2;
        java.lang.IllegalArgumentException $r3, r4;
        java.lang.IndexOutOfBoundsException $r5;

        r0 := @this: java.nio.StringCharBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;

     label0:
        i2 = virtualinvoke r0.<java.nio.StringCharBuffer: int position()>();
        $r1 = new java.nio.StringCharBuffer;
        $r2 = r0.<java.nio.StringCharBuffer: java.lang.CharSequence str>;
        $i3 = virtualinvoke r0.<java.nio.StringCharBuffer: int checkIndex(int,int)>(i0, i2);
        $i4 = i2 + $i3;
        $i5 = virtualinvoke r0.<java.nio.StringCharBuffer: int checkIndex(int,int)>(i1, i2);
        $i6 = i2 + $i5;
        $i7 = virtualinvoke r0.<java.nio.StringCharBuffer: int capacity()>();
        $i8 = r0.<java.nio.StringCharBuffer: int offset>;
        specialinvoke $r1.<java.nio.StringCharBuffer: void <init>(java.lang.CharSequence,int,int,int,int,int)>($r2, -1, $i4, $i6, $i7, $i8);

     label1:
        return $r1;

     label2:
        $r3 := @caughtexception;
        r4 = $r3;
        $r5 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r5;

        catch java.lang.IllegalArgumentException from label0 to label1 with label2;
    }

    public boolean isDirect()
    {
        java.nio.StringCharBuffer r0;

        r0 := @this: java.nio.StringCharBuffer;
        return 0;
    }

    public java.nio.ByteOrder order()
    {
        java.nio.StringCharBuffer r0;
        java.nio.ByteOrder $r1;

        r0 := @this: java.nio.StringCharBuffer;
        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();
        return $r1;
    }

    public volatile java.lang.CharSequence subSequence(int, int)
    {
        java.nio.StringCharBuffer r0;
        int i0, i1;
        java.nio.CharBuffer $r1;

        r0 := @this: java.nio.StringCharBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = virtualinvoke r0.<java.nio.StringCharBuffer: java.nio.CharBuffer subSequence(int,int)>(i0, i1);
        return $r1;
    }
}
