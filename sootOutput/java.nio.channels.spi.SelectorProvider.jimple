public abstract class java.nio.channels.spi.SelectorProvider extends java.lang.Object
{
    private static final java.lang.Object lock;
    private static java.nio.channels.spi.SelectorProvider provider;

    protected void <init>()
    {
        java.nio.channels.spi.SelectorProvider r0;
        java.lang.SecurityManager r1;
        java.lang.RuntimePermission $r2;

        r0 := @this: java.nio.channels.spi.SelectorProvider;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = new java.lang.RuntimePermission;
        specialinvoke $r2.<java.lang.RuntimePermission: void <init>(java.lang.String)>("selectorProvider");
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label0:
        return;
    }

    private static boolean loadProviderFromProperty()
    {
        java.lang.String r0;
        java.lang.ClassLoader $r1;
        java.lang.Class r2;
        java.lang.Object $r3;
        java.nio.channels.spi.SelectorProvider $r4;
        boolean $z0;
        java.lang.ClassNotFoundException $r5, r6;
        java.util.ServiceConfigurationError $r7, $r10, $r13, $r16;
        java.lang.IllegalAccessException $r8, r9;
        java.lang.InstantiationException $r11, r12;
        java.lang.SecurityException $r14, r15;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.nio.channels.spi.SelectorProvider");
        if r0 != null goto label0;

        return 0;

     label0:
        $r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r0, 1, $r1);
        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();
        $r4 = (java.nio.channels.spi.SelectorProvider) $r3;
        <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider> = $r4;
        $z0 = 1;

     label1:
        return $z0;

     label2:
        $r5 := @caughtexception;
        r6 = $r5;
        $r7 = new java.util.ServiceConfigurationError;
        specialinvoke $r7.<java.util.ServiceConfigurationError: void <init>(java.lang.String,java.lang.Throwable)>(null, r6);
        throw $r7;

     label3:
        $r8 := @caughtexception;
        r9 = $r8;
        $r10 = new java.util.ServiceConfigurationError;
        specialinvoke $r10.<java.util.ServiceConfigurationError: void <init>(java.lang.String,java.lang.Throwable)>(null, r9);
        throw $r10;

     label4:
        $r11 := @caughtexception;
        r12 = $r11;
        $r13 = new java.util.ServiceConfigurationError;
        specialinvoke $r13.<java.util.ServiceConfigurationError: void <init>(java.lang.String,java.lang.Throwable)>(null, r12);
        throw $r13;

     label5:
        $r14 := @caughtexception;
        r15 = $r14;
        $r16 = new java.util.ServiceConfigurationError;
        specialinvoke $r16.<java.util.ServiceConfigurationError: void <init>(java.lang.String,java.lang.Throwable)>(null, r15);
        throw $r16;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
        catch java.lang.IllegalAccessException from label0 to label1 with label3;
        catch java.lang.InstantiationException from label0 to label1 with label4;
        catch java.lang.SecurityException from label0 to label1 with label5;
    }

    private static boolean loadProviderAsService()
    {
        java.lang.ClassLoader $r0;
        java.util.ServiceLoader r1;
        java.util.Iterator r2;
        java.util.ServiceConfigurationError r3, $r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r4;
        java.nio.channels.spi.SelectorProvider $r5;
        java.lang.Throwable $r7;

        $r0 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        r1 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "java/nio/channels/spi/SelectorProvider", $r0);
        r2 = virtualinvoke r1.<java.util.ServiceLoader: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 != 0 goto label2;

        $z1 = 0;

     label1:
        return $z1;

     label2:
        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $r5 = (java.nio.channels.spi.SelectorProvider) $r4;
        <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider> = $r5;
        $z2 = 1;

     label3:
        return $z2;

     label4:
        $r6 := @caughtexception;
        r3 = $r6;
        $r7 = virtualinvoke r3.<java.util.ServiceConfigurationError: java.lang.Throwable getCause()>();
        $z3 = $r7 instanceof java.lang.SecurityException;
        if $z3 == 0 goto label5;

        goto label0;

     label5:
        throw r3;

        catch java.util.ServiceConfigurationError from label0 to label1 with label4;
        catch java.util.ServiceConfigurationError from label2 to label3 with label4;
    }

    public static java.nio.channels.spi.SelectorProvider provider()
    {
        java.lang.Object $r0, r1, $r6;
        java.lang.Throwable r2, $r8;
        java.nio.channels.spi.SelectorProvider $r3, $r4, $r7;
        java.nio.channels.spi.SelectorProvider$1 $r5;

        $r0 = <java.nio.channels.spi.SelectorProvider: java.lang.Object lock>;
        r1 = $r0;
        entermonitor $r0;

     label0:
        $r3 = <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider>;
        if $r3 == null goto label2;

        $r4 = <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider>;
        exitmonitor r1;

     label1:
        return $r4;

     label2:
        $r5 = new java.nio.channels.spi.SelectorProvider$1;
        specialinvoke $r5.<java.nio.channels.spi.SelectorProvider$1: void <init>()>();
        $r6 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r5);
        $r7 = (java.nio.channels.spi.SelectorProvider) $r6;
        exitmonitor r1;

     label3:
        return $r7;

     label4:
        $r8 := @caughtexception;

     label5:
        r2 = $r8;
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public abstract java.nio.channels.DatagramChannel openDatagramChannel() throws java.io.IOException;

    public abstract java.nio.channels.DatagramChannel openDatagramChannel(java.net.ProtocolFamily) throws java.io.IOException;

    public abstract java.nio.channels.Pipe openPipe() throws java.io.IOException;

    public abstract java.nio.channels.spi.AbstractSelector openSelector() throws java.io.IOException;

    public abstract java.nio.channels.ServerSocketChannel openServerSocketChannel() throws java.io.IOException;

    public abstract java.nio.channels.SocketChannel openSocketChannel() throws java.io.IOException;

    public java.nio.channels.Channel inheritedChannel() throws java.io.IOException
    {
        java.nio.channels.spi.SelectorProvider r0;

        r0 := @this: java.nio.channels.spi.SelectorProvider;
        return null;
    }

    static boolean access$000()
    {
        boolean $z0;

        $z0 = staticinvoke <java.nio.channels.spi.SelectorProvider: boolean loadProviderFromProperty()>();
        return $z0;
    }

    static java.nio.channels.spi.SelectorProvider access$100()
    {
        java.nio.channels.spi.SelectorProvider $r0;

        $r0 = <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider>;
        return $r0;
    }

    static boolean access$200()
    {
        boolean $z0;

        $z0 = staticinvoke <java.nio.channels.spi.SelectorProvider: boolean loadProviderAsService()>();
        return $z0;
    }

    static java.nio.channels.spi.SelectorProvider access$102(java.nio.channels.spi.SelectorProvider)
    {
        java.nio.channels.spi.SelectorProvider r0;

        r0 := @parameter0: java.nio.channels.spi.SelectorProvider;
        <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider> = r0;
        return r0;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;
        specialinvoke $r0.<java.lang.Object: void <init>()>();
        <java.nio.channels.spi.SelectorProvider: java.lang.Object lock> = $r0;
        <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider> = null;
        return;
    }
}
