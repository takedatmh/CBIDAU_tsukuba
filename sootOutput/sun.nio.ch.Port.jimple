abstract class sun.nio.ch.Port extends sun.nio.ch.AsynchronousChannelGroupImpl
{
    static final short POLLIN;
    static final short POLLOUT;
    static final short POLLERR;
    static final short POLLHUP;
    protected final java.util.concurrent.locks.ReadWriteLock fdToChannelLock;
    protected final java.util.Map fdToChannel;

    void <init>(java.nio.channels.spi.AsynchronousChannelProvider, sun.nio.ch.ThreadPool)
    {
        sun.nio.ch.Port r0;
        java.nio.channels.spi.AsynchronousChannelProvider r1;
        sun.nio.ch.ThreadPool r2;
        java.util.concurrent.locks.ReentrantReadWriteLock $r3;
        java.util.HashMap $r4;

        r0 := @this: sun.nio.ch.Port;
        r1 := @parameter0: java.nio.channels.spi.AsynchronousChannelProvider;
        r2 := @parameter1: sun.nio.ch.ThreadPool;
        specialinvoke r0.<sun.nio.ch.AsynchronousChannelGroupImpl: void <init>(java.nio.channels.spi.AsynchronousChannelProvider,sun.nio.ch.ThreadPool)>(r1, r2);
        $r3 = new java.util.concurrent.locks.ReentrantReadWriteLock;
        specialinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();
        r0.<sun.nio.ch.Port: java.util.concurrent.locks.ReadWriteLock fdToChannelLock> = $r3;
        $r4 = new java.util.HashMap;
        specialinvoke $r4.<java.util.HashMap: void <init>()>();
        r0.<sun.nio.ch.Port: java.util.Map fdToChannel> = $r4;
        return;
    }

    final void register(int, sun.nio.ch.Port$PollableChannel)
    {
        sun.nio.ch.Port r0;
        int i0;
        sun.nio.ch.Port$PollableChannel r1;
        java.lang.Throwable r2, $r11;
        java.util.concurrent.locks.ReadWriteLock $r3, $r9, $r12;
        java.util.concurrent.locks.Lock $r4, $r10, $r13;
        boolean $z0;
        java.nio.channels.ShutdownChannelGroupException $r5;
        java.util.Map $r6;
        java.lang.Integer $r7;

        r0 := @this: sun.nio.ch.Port;
        i0 := @parameter0: int;
        r1 := @parameter1: sun.nio.ch.Port$PollableChannel;
        $r3 = r0.<sun.nio.ch.Port: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r4 = interfaceinvoke $r3.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        $z0 = virtualinvoke r0.<sun.nio.ch.Port: boolean isShutdown()>();
        if $z0 == 0 goto label1;

        $r5 = new java.nio.channels.ShutdownChannelGroupException;
        specialinvoke $r5.<java.nio.channels.ShutdownChannelGroupException: void <init>()>();
        throw $r5;

     label1:
        $r6 = r0.<sun.nio.ch.Port: java.util.Map fdToChannel>;
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r1);

     label2:
        $r9 = r0.<sun.nio.ch.Port: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r10 = interfaceinvoke $r9.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r10.<java.util.concurrent.locks.Lock: void unlock()>();
        goto label6;

     label3:
        $r11 := @caughtexception;

     label4:
        r2 = $r11;

     label5:
        $r12 = r0.<sun.nio.ch.Port: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r13 = interfaceinvoke $r12.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r13.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    final void unregister(int)
    {
        sun.nio.ch.Port r0;
        int i0;
        boolean z0, $z1, $z2;
        java.lang.Throwable r1, $r10;
        java.util.concurrent.locks.ReadWriteLock $r2, $r8, $r11;
        java.util.concurrent.locks.Lock $r3, $r9, $r12;
        java.util.Map $r4, $r7;
        java.lang.Integer $r5;
        java.io.IOException $r13, r14;

        r0 := @this: sun.nio.ch.Port;
        i0 := @parameter0: int;
        z0 = 0;
        $r2 = r0.<sun.nio.ch.Port: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r3 = interfaceinvoke $r2.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        $r4 = r0.<sun.nio.ch.Port: java.util.Map fdToChannel>;
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);
        $r7 = r0.<sun.nio.ch.Port: java.util.Map fdToChannel>;
        $z1 = interfaceinvoke $r7.<java.util.Map: boolean isEmpty()>();
        if $z1 == 0 goto label1;

        z0 = 1;

     label1:
        $r8 = r0.<sun.nio.ch.Port: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r9 = interfaceinvoke $r8.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();
        goto label5;

     label2:
        $r10 := @caughtexception;

     label3:
        r1 = $r10;

     label4:
        $r11 = r0.<sun.nio.ch.Port: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r12 = interfaceinvoke $r11.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r12.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r1;

     label5:
        if z0 == 0 goto label9;

        $z2 = virtualinvoke r0.<sun.nio.ch.Port: boolean isShutdown()>();
        if $z2 == 0 goto label9;

     label6:
        virtualinvoke r0.<sun.nio.ch.Port: void shutdownNow()>();

     label7:
        goto label9;

     label8:
        $r13 := @caughtexception;
        r14 = $r13;

     label9:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.io.IOException from label6 to label7 with label8;
    }

    abstract void startPoll(int, int);

    final boolean isEmpty()
    {
        sun.nio.ch.Port r0;
        boolean z0;
        java.lang.Throwable r1, $r7;
        java.util.concurrent.locks.ReadWriteLock $r2, $r5, $r8;
        java.util.concurrent.locks.Lock $r3, $r6, $r9;
        java.util.Map $r4;

        r0 := @this: sun.nio.ch.Port;
        $r2 = r0.<sun.nio.ch.Port: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r3 = interfaceinvoke $r2.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        $r4 = r0.<sun.nio.ch.Port: java.util.Map fdToChannel>;
        z0 = interfaceinvoke $r4.<java.util.Map: boolean isEmpty()>();

     label1:
        $r5 = r0.<sun.nio.ch.Port: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r6 = interfaceinvoke $r5.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();
        return z0;

     label2:
        $r7 := @caughtexception;

     label3:
        r1 = $r7;

     label4:
        $r8 = r0.<sun.nio.ch.Port: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r9 = interfaceinvoke $r8.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r1;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    final java.lang.Object attachForeignChannel(java.nio.channels.Channel, java.io.FileDescriptor)
    {
        sun.nio.ch.Port r0;
        java.nio.channels.Channel r1;
        java.io.FileDescriptor r2;
        int i0;
        sun.nio.ch.Port$1 $r3;
        java.lang.Integer $r4;

        r0 := @this: sun.nio.ch.Port;
        r1 := @parameter0: java.nio.channels.Channel;
        r2 := @parameter1: java.io.FileDescriptor;
        i0 = staticinvoke <sun.nio.ch.IOUtil: int fdVal(java.io.FileDescriptor)>(r2);
        $r3 = new sun.nio.ch.Port$1;
        specialinvoke $r3.<sun.nio.ch.Port$1: void <init>(sun.nio.ch.Port,java.nio.channels.Channel)>(r0, r1);
        virtualinvoke r0.<sun.nio.ch.Port: void register(int,sun.nio.ch.Port$PollableChannel)>(i0, $r3);
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        return $r4;
    }

    final void detachForeignChannel(java.lang.Object)
    {
        sun.nio.ch.Port r0;
        java.lang.Object r1;
        java.lang.Integer $r2;
        int $i0;

        r0 := @this: sun.nio.ch.Port;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.lang.Integer) r1;
        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();
        virtualinvoke r0.<sun.nio.ch.Port: void unregister(int)>($i0);
        return;
    }

    final void closeAllChannels()
    {
        sun.nio.ch.Port r0;
        sun.nio.ch.Port$PollableChannel[] r1;
        int i0, $i1, i2;
        java.util.Iterator r2;
        java.lang.Integer r3;
        java.lang.Throwable r4, $r15;
        java.util.concurrent.locks.ReadWriteLock $r5, $r13, $r16;
        java.util.concurrent.locks.Lock $r6, $r14, $r17;
        java.util.Map $r7, $r10;
        java.util.Set $r8;
        boolean $z0;
        java.lang.Object $r9, $r11;
        sun.nio.ch.Port$PollableChannel $r12, $r18;
        java.io.IOException $r19, r20;

        r0 := @this: sun.nio.ch.Port;
        r1 = newarray (sun.nio.ch.Port$PollableChannel)[128];

     label0:
        $r5 = r0.<sun.nio.ch.Port: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r6 = interfaceinvoke $r5.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void lock()>();
        i0 = 0;

     label1:
        $r7 = r0.<sun.nio.ch.Port: java.util.Map fdToChannel>;
        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set keySet()>();
        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.lang.Integer) $r9;
        $i1 = i0;
        i0 = i0 + 1;
        $r10 = r0.<sun.nio.ch.Port: java.util.Map fdToChannel>;
        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);
        $r12 = (sun.nio.ch.Port$PollableChannel) $r11;
        r1[$i1] = $r12;
        if i0 < 128 goto label3;

        goto label4;

     label3:
        goto label2;

     label4:
        $r13 = r0.<sun.nio.ch.Port: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r14 = interfaceinvoke $r13.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r14.<java.util.concurrent.locks.Lock: void unlock()>();
        goto label8;

     label5:
        $r15 := @caughtexception;

     label6:
        r4 = $r15;

     label7:
        $r16 = r0.<sun.nio.ch.Port: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r17 = interfaceinvoke $r16.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r17.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r4;

     label8:
        i2 = 0;

     label9:
        if i2 >= i0 goto label14;

     label10:
        $r18 = r1[i2];
        interfaceinvoke $r18.<sun.nio.ch.Port$PollableChannel: void close()>();

     label11:
        goto label13;

     label12:
        $r19 := @caughtexception;
        r20 = $r19;

     label13:
        i2 = i2 + 1;
        goto label9;

     label14:
        if i0 > 0 goto label0;

        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.io.IOException from label10 to label11 with label12;
    }
}
