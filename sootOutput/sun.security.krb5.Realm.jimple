public class sun.security.krb5.Realm extends java.lang.Object implements java.lang.Cloneable
{
    private java.lang.String realm;
    private static boolean DEBUG;

    private void <init>()
    {
        sun.security.krb5.Realm r0;

        r0 := @this: sun.security.krb5.Realm;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public void <init>(java.lang.String) throws sun.security.krb5.RealmException
    {
        sun.security.krb5.Realm r0;
        java.lang.String r1, $r2;

        r0 := @this: sun.security.krb5.Realm;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = staticinvoke <sun.security.krb5.Realm: java.lang.String parseRealm(java.lang.String)>(r1);
        r0.<sun.security.krb5.Realm: java.lang.String realm> = $r2;
        return;
    }

    public java.lang.Object clone()
    {
        sun.security.krb5.Realm r0, $r1, r2;
        java.lang.String $r3, $r4, $r5;

        r0 := @this: sun.security.krb5.Realm;
        $r1 = new sun.security.krb5.Realm;
        specialinvoke $r1.<sun.security.krb5.Realm: void <init>()>();
        r2 = $r1;
        $r3 = r0.<sun.security.krb5.Realm: java.lang.String realm>;
        if $r3 == null goto label0;

        $r4 = new java.lang.String;
        $r5 = r0.<sun.security.krb5.Realm: java.lang.String realm>;
        specialinvoke $r4.<java.lang.String: void <init>(java.lang.String)>($r5);
        r2.<sun.security.krb5.Realm: java.lang.String realm> = $r4;

     label0:
        return r2;
    }

    public boolean equals(java.lang.Object)
    {
        sun.security.krb5.Realm r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: sun.security.krb5.Realm;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof sun.security.krb5.Realm;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (sun.security.krb5.Realm) r1;
        $r3 = r0.<sun.security.krb5.Realm: java.lang.String realm>;
        if $r3 == null goto label2;

        $r4 = r2.<sun.security.krb5.Realm: java.lang.String realm>;
        if $r4 == null goto label2;

        $r5 = r0.<sun.security.krb5.Realm: java.lang.String realm>;
        $r6 = r2.<sun.security.krb5.Realm: java.lang.String realm>;
        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);
        return $z1;

     label2:
        $r7 = r0.<sun.security.krb5.Realm: java.lang.String realm>;
        if $r7 != null goto label3;

        $r8 = r2.<sun.security.krb5.Realm: java.lang.String realm>;
        if $r8 != null goto label3;

        $z2 = 1;
        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public int hashCode()
    {
        sun.security.krb5.Realm r0;
        int i0, $i1, $i2;
        java.lang.String $r1, $r2;

        r0 := @this: sun.security.krb5.Realm;
        i0 = 17;
        $r1 = r0.<sun.security.krb5.Realm: java.lang.String realm>;
        if $r1 == null goto label0;

        $i1 = 37 * i0;
        $r2 = r0.<sun.security.krb5.Realm: java.lang.String realm>;
        $i2 = virtualinvoke $r2.<java.lang.String: int hashCode()>();
        i0 = $i1 + $i2;

     label0:
        return i0;
    }

    public void <init>(sun.security.util.DerValue) throws sun.security.krb5.Asn1Exception, sun.security.krb5.RealmException, java.io.IOException
    {
        sun.security.krb5.Realm r0;
        sun.security.util.DerValue r1;
        java.lang.IllegalArgumentException $r2;
        sun.security.krb5.internal.util.KerberosString $r3;
        java.lang.String $r4, $r5, $r6, $r8;
        int $i0;
        sun.security.krb5.RealmException $r7, $r9;
        boolean $z0;

        r0 := @this: sun.security.krb5.Realm;
        r1 := @parameter0: sun.security.util.DerValue;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r1 != null goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("encoding can not be null");
        throw $r2;

     label0:
        $r3 = new sun.security.krb5.internal.util.KerberosString;
        specialinvoke $r3.<sun.security.krb5.internal.util.KerberosString: void <init>(sun.security.util.DerValue)>(r1);
        $r4 = virtualinvoke $r3.<sun.security.krb5.internal.util.KerberosString: java.lang.String toString()>();
        r0.<sun.security.krb5.Realm: java.lang.String realm> = $r4;
        $r5 = r0.<sun.security.krb5.Realm: java.lang.String realm>;
        if $r5 == null goto label1;

        $r6 = r0.<sun.security.krb5.Realm: java.lang.String realm>;
        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();
        if $i0 != 0 goto label2;

     label1:
        $r7 = new sun.security.krb5.RealmException;
        specialinvoke $r7.<sun.security.krb5.RealmException: void <init>(int)>(601);
        throw $r7;

     label2:
        $r8 = r0.<sun.security.krb5.Realm: java.lang.String realm>;
        $z0 = staticinvoke <sun.security.krb5.Realm: boolean isValidRealmString(java.lang.String)>($r8);
        if $z0 != 0 goto label3;

        $r9 = new sun.security.krb5.RealmException;
        specialinvoke $r9.<sun.security.krb5.RealmException: void <init>(int)>(600);
        throw $r9;

     label3:
        return;
    }

    public java.lang.String toString()
    {
        sun.security.krb5.Realm r0;
        java.lang.String $r1;

        r0 := @this: sun.security.krb5.Realm;
        $r1 = r0.<sun.security.krb5.Realm: java.lang.String realm>;
        return $r1;
    }

    public static java.lang.String parseRealmAtSeparator(java.lang.String) throws sun.security.krb5.RealmException
    {
        java.lang.String r0, r1, r2, $r4;
        int i0, $i1, $i3, $i5, $i6, $i7, $i8, $i9;
        java.lang.IllegalArgumentException $r3;
        char $c2, $c4;
        sun.security.krb5.RealmException $r5, $r6;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        if r0 != null goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null input name is not allowed");
        throw $r3;

     label0:
        $r4 = new java.lang.String;
        specialinvoke $r4.<java.lang.String: void <init>(java.lang.String)>(r0);
        r1 = $r4;
        r2 = null;
        i0 = 0;

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if i0 >= $i1 goto label4;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);
        if $c2 != 64 goto label3;

        if i0 == 0 goto label2;

        $i3 = i0 - 1;
        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i3);
        if $c4 == 92 goto label3;

     label2:
        $i5 = i0 + 1;
        $i6 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i5 >= $i6 goto label4;

        $i7 = i0 + 1;
        $i8 = virtualinvoke r1.<java.lang.String: int length()>();
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i7, $i8);
        goto label4;

     label3:
        i0 = i0 + 1;
        goto label1;

     label4:
        if r2 == null goto label6;

        $i9 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i9 != 0 goto label5;

        $r5 = new sun.security.krb5.RealmException;
        specialinvoke $r5.<sun.security.krb5.RealmException: void <init>(int)>(601);
        throw $r5;

     label5:
        $z0 = staticinvoke <sun.security.krb5.Realm: boolean isValidRealmString(java.lang.String)>(r2);
        if $z0 != 0 goto label6;

        $r6 = new sun.security.krb5.RealmException;
        specialinvoke $r6.<sun.security.krb5.RealmException: void <init>(int)>(600);
        throw $r6;

     label6:
        return r2;
    }

    public static java.lang.String parseRealmComponent(java.lang.String)
    {
        java.lang.String r0, r1, r2, $r4;
        int i0, $i1, $i3, $i5, $i6, $i7, $i8;
        java.lang.IllegalArgumentException $r3;
        char $c2, $c4;

        r0 := @parameter0: java.lang.String;
        if r0 != null goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null input name is not allowed");
        throw $r3;

     label0:
        $r4 = new java.lang.String;
        specialinvoke $r4.<java.lang.String: void <init>(java.lang.String)>(r0);
        r1 = $r4;
        r2 = null;
        i0 = 0;

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if i0 >= $i1 goto label4;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);
        if $c2 != 46 goto label3;

        if i0 == 0 goto label2;

        $i3 = i0 - 1;
        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i3);
        if $c4 == 92 goto label3;

     label2:
        $i5 = i0 + 1;
        $i6 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i5 >= $i6 goto label4;

        $i7 = i0 + 1;
        $i8 = virtualinvoke r1.<java.lang.String: int length()>();
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i7, $i8);
        goto label4;

     label3:
        i0 = i0 + 1;
        goto label1;

     label4:
        return r2;
    }

    protected static java.lang.String parseRealm(java.lang.String) throws sun.security.krb5.RealmException
    {
        java.lang.String r0, r1;
        int $i0;
        sun.security.krb5.RealmException $r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <sun.security.krb5.Realm: java.lang.String parseRealmAtSeparator(java.lang.String)>(r0);
        if r1 != null goto label0;

        r1 = r0;

     label0:
        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i0 != 0 goto label2;

     label1:
        $r2 = new sun.security.krb5.RealmException;
        specialinvoke $r2.<sun.security.krb5.RealmException: void <init>(int)>(601);
        throw $r2;

     label2:
        $z0 = staticinvoke <sun.security.krb5.Realm: boolean isValidRealmString(java.lang.String)>(r1);
        if $z0 != 0 goto label3;

        $r3 = new sun.security.krb5.RealmException;
        specialinvoke $r3.<sun.security.krb5.RealmException: void <init>(int)>(600);
        throw $r3;

     label3:
        return r1;
    }

    protected static boolean isValidRealmString(java.lang.String)
    {
        java.lang.String r0;
        int i0, $i1, $i2;
        char $c3, $c4, $c5;

        r0 := @parameter0: java.lang.String;
        if r0 != null goto label0;

        return 0;

     label0:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i1 != 0 goto label1;

        return 0;

     label1:
        i0 = 0;

     label2:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();
        if i0 >= $i2 goto label5;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);
        if $c3 == 47 goto label3;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);
        if $c4 == 58 goto label3;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);
        if $c5 != 0 goto label4;

     label3:
        return 0;

     label4:
        i0 = i0 + 1;
        goto label2;

     label5:
        return 1;
    }

    public byte[] asn1Encode() throws sun.security.krb5.Asn1Exception, java.io.IOException
    {
        sun.security.krb5.Realm r0;
        sun.security.util.DerOutputStream $r1, r2;
        sun.security.krb5.internal.util.KerberosString $r3;
        java.lang.String $r4;
        sun.security.util.DerValue $r5;
        byte[] $r6;

        r0 := @this: sun.security.krb5.Realm;
        $r1 = new sun.security.util.DerOutputStream;
        specialinvoke $r1.<sun.security.util.DerOutputStream: void <init>()>();
        r2 = $r1;
        $r3 = new sun.security.krb5.internal.util.KerberosString;
        $r4 = r0.<sun.security.krb5.Realm: java.lang.String realm>;
        specialinvoke $r3.<sun.security.krb5.internal.util.KerberosString: void <init>(java.lang.String)>($r4);
        $r5 = virtualinvoke $r3.<sun.security.krb5.internal.util.KerberosString: sun.security.util.DerValue toDerValue()>();
        virtualinvoke r2.<sun.security.util.DerOutputStream: void putDerValue(sun.security.util.DerValue)>($r5);
        $r6 = virtualinvoke r2.<sun.security.util.DerOutputStream: byte[] toByteArray()>();
        return $r6;
    }

    public static sun.security.krb5.Realm parse(sun.security.util.DerInputStream, byte, boolean) throws sun.security.krb5.Asn1Exception, java.io.IOException, sun.security.krb5.RealmException
    {
        sun.security.util.DerInputStream r0, $r4;
        byte b0, $b2, $b3, $b4, $b5;
        boolean z0;
        sun.security.util.DerValue r1, r2;
        int $i1;
        sun.security.krb5.Asn1Exception $r3;
        sun.security.krb5.Realm $r5;

        r0 := @parameter0: sun.security.util.DerInputStream;
        b0 := @parameter1: byte;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        $i1 = virtualinvoke r0.<sun.security.util.DerInputStream: int peekByte()>();
        $b2 = (byte) $i1;
        $b3 = $b2 & 31;
        if $b3 == b0 goto label0;

        return null;

     label0:
        r1 = virtualinvoke r0.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $b4 = virtualinvoke r1.<sun.security.util.DerValue: byte getTag()>();
        $b5 = $b4 & 31;
        if b0 == $b5 goto label1;

        $r3 = new sun.security.krb5.Asn1Exception;
        specialinvoke $r3.<sun.security.krb5.Asn1Exception: void <init>(int)>(906);
        throw $r3;

     label1:
        $r4 = virtualinvoke r1.<sun.security.util.DerValue: sun.security.util.DerInputStream getData()>();
        r2 = virtualinvoke $r4.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $r5 = new sun.security.krb5.Realm;
        specialinvoke $r5.<sun.security.krb5.Realm: void <init>(sun.security.util.DerValue)>(r2);
        return $r5;
    }

    private static java.lang.String[] doInitialParse(java.lang.String, java.lang.String) throws sun.security.krb5.KrbException
    {
        java.lang.String r0, r1, $r10, $r12, $r16, $r18;
        null_type n0;
        sun.security.krb5.KrbException $r2;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r3, $r13;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r14, $r15, $r17;
        java.lang.String[] r11;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        if r0 == null goto label0;

        if r1 != null goto label1;

     label0:
        $r2 = new sun.security.krb5.KrbException;
        specialinvoke $r2.<sun.security.krb5.KrbException: void <init>(int)>(400);
        throw $r2;

     label1:
        $z0 = <sun.security.krb5.Realm: boolean DEBUG>;
        if $z0 == 0 goto label2;

        $r3 = <java.lang.System: java.io.PrintStream out>;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">>> Realm doInitialParse: cRealm=[");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], sRealm=[");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label2:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z1 == 0 goto label4;

        n0 = null;
        r11 = newarray (java.lang.String)[1];
        $r12 = new java.lang.String;
        specialinvoke $r12.<java.lang.String: void <init>(java.lang.String)>(r0);
        r11[0] = $r12;
        $z2 = <sun.security.krb5.Realm: boolean DEBUG>;
        if $z2 == 0 goto label3;

        $r13 = <java.lang.System: java.io.PrintStream out>;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">>> Realm doInitialParse: ");
        $r16 = r11[0];
        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label3:
        return r11;

     label4:
        return null;
    }

    public static java.lang.String[] getRealmsList(java.lang.String, java.lang.String) throws sun.security.krb5.KrbException
    {
        java.lang.String r0, r1;
        java.lang.String[] r2, r3, r4;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 = staticinvoke <sun.security.krb5.Realm: java.lang.String[] doInitialParse(java.lang.String,java.lang.String)>(r0, r1);
        if r2 == null goto label0;

        $i0 = lengthof r2;
        if $i0 == 0 goto label0;

        return r2;

     label0:
        r3 = staticinvoke <sun.security.krb5.Realm: java.lang.String[] parseCapaths(java.lang.String,java.lang.String)>(r0, r1);
        if r3 == null goto label1;

        $i1 = lengthof r3;
        if $i1 == 0 goto label1;

        return r3;

     label1:
        r4 = staticinvoke <sun.security.krb5.Realm: java.lang.String[] parseHierarchy(java.lang.String,java.lang.String)>(r0, r1);
        return r4;
    }

    private static java.lang.String[] parseCapaths(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r5, r6, $r12, $r14, r15, $r18, $r19, $r20, $r21, $r22, $r23;
        null_type n0;
        java.lang.Exception r2, $r9;
        java.lang.StringBuilder $r3, $r11, $r13;
        java.util.LinkedList r4, $r17;
        java.lang.String[] r7, $r25, $r27;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int i0, $i1, $i2;
        sun.security.krb5.Config r8;
        java.io.PrintStream $r10, $r16;
        java.lang.Object $r24;
        java.lang.Object[] $r26;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        n0 = null;

     label0:
        r8 = staticinvoke <sun.security.krb5.Config: sun.security.krb5.Config getInstance()>();

     label1:
        goto label4;

     label2:
        $r9 := @caughtexception;
        r2 = $r9;
        $z1 = <sun.security.krb5.Realm: boolean DEBUG>;
        if $z1 == 0 goto label3;

        $r10 = <java.lang.System: java.io.PrintStream out>;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Configuration information can not be obtained ");
        $r12 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();
        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r14);

     label3:
        return null;

     label4:
        r15 = virtualinvoke r8.<sun.security.krb5.Config: java.lang.String getDefault(java.lang.String,java.lang.String)>(r1, r0);
        if r15 != null goto label6;

        $z2 = <sun.security.krb5.Realm: boolean DEBUG>;
        if $z2 == 0 goto label5;

        $r16 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>(">>> Realm parseCapaths: no cfg entry");

     label5:
        return null;

     label6:
        $r17 = new java.util.LinkedList;
        specialinvoke $r17.<java.util.LinkedList: void <init>()>();
        r4 = $r17;
        r5 = r1;

     label7:
        r6 = virtualinvoke r8.<sun.security.krb5.Config: java.lang.String getDefault(java.lang.String,java.lang.String)>(r5, r0);
        if r6 != null goto label8;

        goto label14;

     label8:
        r7 = virtualinvoke r6.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");
        z0 = 0;
        $i1 = lengthof r7;
        i0 = $i1 - 1;

     label9:
        if i0 < 0 goto label12;

        $r18 = r7[i0];
        $z3 = virtualinvoke r4.<java.util.LinkedList: boolean contains(java.lang.Object)>($r18);
        if $z3 != 0 goto label11;

        $r19 = r7[i0];
        $z4 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(".");
        if $z4 != 0 goto label11;

        $r20 = r7[i0];
        $z5 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>(r0);
        if $z5 != 0 goto label11;

        $r21 = r7[i0];
        $z6 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z6 != 0 goto label11;

        $r22 = r7[i0];
        $z7 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r5);
        if $z7 == 0 goto label10;

        goto label11;

     label10:
        z0 = 1;
        $r23 = r7[i0];
        virtualinvoke r4.<java.util.LinkedList: void addFirst(java.lang.Object)>($r23);

     label11:
        i0 = i0 + -1;
        goto label9;

     label12:
        if z0 != 0 goto label13;

        goto label14;

     label13:
        $r24 = virtualinvoke r4.<java.util.LinkedList: java.lang.Object getFirst()>();
        r5 = (java.lang.String) $r24;
        goto label7;

     label14:
        virtualinvoke r4.<java.util.LinkedList: void addFirst(java.lang.Object)>(r0);
        $i2 = virtualinvoke r4.<java.util.LinkedList: int size()>();
        $r25 = newarray (java.lang.String)[$i2];
        $r26 = virtualinvoke r4.<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>($r25);
        $r27 = (java.lang.String[]) $r26;
        return $r27;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    private static java.lang.String[] parseHierarchy(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r5, $r6, $r8, $r9, $r10;
        java.lang.String[] r2, r3, $r12, $r14;
        int i0, i1, i2, i3, i4, $i5, i6, $i7;
        boolean z0, $z1;
        java.util.LinkedList r4, $r7;
        java.lang.Object[] $r13;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");
        r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");
        i0 = lengthof r2;
        i1 = lengthof r3;
        z0 = 0;
        i3 = i1 + -1;
        i4 = i0 + -1;

     label0:
        if i3 < 0 goto label1;

        if i4 < 0 goto label1;

        $r5 = r3[i3];
        $r6 = r2[i4];
        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);
        if $z1 == 0 goto label1;

        z0 = 1;
        i3 = i3 + -1;
        i4 = i4 + -1;
        goto label0;

     label1:
        $r7 = new java.util.LinkedList;
        specialinvoke $r7.<java.util.LinkedList: void <init>()>();
        r4 = $r7;
        i2 = 0;

     label2:
        if i2 > i4 goto label3;

        $r8 = staticinvoke <sun.security.krb5.Realm: java.lang.String subStringFrom(java.lang.String[],int)>(r2, i2);
        virtualinvoke r4.<java.util.LinkedList: void addLast(java.lang.Object)>($r8);
        i2 = i2 + 1;
        goto label2;

     label3:
        if z0 == 0 goto label4;

        $i5 = i4 + 1;
        $r9 = staticinvoke <sun.security.krb5.Realm: java.lang.String subStringFrom(java.lang.String[],int)>(r2, $i5);
        virtualinvoke r4.<java.util.LinkedList: void addLast(java.lang.Object)>($r9);

     label4:
        i6 = i3;

     label5:
        if i6 < 0 goto label6;

        $r10 = staticinvoke <sun.security.krb5.Realm: java.lang.String subStringFrom(java.lang.String[],int)>(r3, i6);
        virtualinvoke r4.<java.util.LinkedList: void addLast(java.lang.Object)>($r10);
        i6 = i6 + -1;
        goto label5;

     label6:
        virtualinvoke r4.<java.util.LinkedList: java.lang.Object removeLast()>();
        $i7 = virtualinvoke r4.<java.util.LinkedList: int size()>();
        $r12 = newarray (java.lang.String)[$i7];
        $r13 = virtualinvoke r4.<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>($r12);
        $r14 = (java.lang.String[]) $r13;
        return $r14;
    }

    private static java.lang.String subStringFrom(java.lang.String[], int)
    {
        java.lang.String[] r0;
        int i0, i1, $i2, $i3;
        java.lang.StringBuilder $r1, r2;
        java.lang.String $r4, $r6;

        r0 := @parameter0: java.lang.String[];
        i0 := @parameter1: int;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        r2 = $r1;
        i1 = i0;

     label0:
        $i2 = lengthof r0;
        if i1 >= $i2 goto label2;

        $i3 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();
        if $i3 == 0 goto label1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

     label1:
        $r4 = r0[i1];
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        i1 = i1 + 1;
        goto label0;

     label2:
        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r6;
    }

    static void <clinit>()
    {
        boolean $z0;

        $z0 = <sun.security.krb5.internal.Krb5: boolean DEBUG>;
        <sun.security.krb5.Realm: boolean DEBUG> = $z0;
        return;
    }
}
