final class java.util.concurrent.SynchronousQueue$TransferStack extends java.util.concurrent.SynchronousQueue$Transferer
{
    static final int REQUEST;
    static final int DATA;
    static final int FULFILLING;
    volatile java.util.concurrent.SynchronousQueue$TransferStack$SNode head;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long headOffset;

    void <init>()
    {
        java.util.concurrent.SynchronousQueue$TransferStack r0;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferStack;
        specialinvoke r0.<java.util.concurrent.SynchronousQueue$Transferer: void <init>()>();
        return;
    }

    static boolean isFulfilling(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;
        $i1 = i0 & 2;
        if $i1 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode, java.util.concurrent.SynchronousQueue$TransferStack$SNode)
    {
        java.util.concurrent.SynchronousQueue$TransferStack r0;
        java.util.concurrent.SynchronousQueue$TransferStack$SNode r1, r2, $r3;
        long $l0;
        sun.misc.Unsafe $r4;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferStack;
        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferStack$SNode;
        r2 := @parameter1: java.util.concurrent.SynchronousQueue$TransferStack$SNode;
        $r3 = r0.<java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode head>;
        if r1 != $r3 goto label0;

        $r4 = <java.util.concurrent.SynchronousQueue$TransferStack: sun.misc.Unsafe UNSAFE>;
        $l0 = <java.util.concurrent.SynchronousQueue$TransferStack: long headOffset>;
        $z0 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);
        if $z0 == 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    static java.util.concurrent.SynchronousQueue$TransferStack$SNode snode(java.util.concurrent.SynchronousQueue$TransferStack$SNode, java.lang.Object, java.util.concurrent.SynchronousQueue$TransferStack$SNode, int)
    {
        java.util.concurrent.SynchronousQueue$TransferStack$SNode r0, r2, $r3;
        java.lang.Object r1;
        int i0;

        r0 := @parameter0: java.util.concurrent.SynchronousQueue$TransferStack$SNode;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.util.concurrent.SynchronousQueue$TransferStack$SNode;
        i0 := @parameter3: int;
        if r0 != null goto label0;

        $r3 = new java.util.concurrent.SynchronousQueue$TransferStack$SNode;
        specialinvoke $r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: void <init>(java.lang.Object)>(r1);
        r0 = $r3;

     label0:
        r0.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: int mode> = i0;
        r0.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next> = r2;
        return r0;
    }

    java.lang.Object transfer(java.lang.Object, boolean, long)
    {
        java.util.concurrent.SynchronousQueue$TransferStack r0;
        java.lang.Object r1, $r12, $r16;
        boolean z0, $z1, $z3, $z5, $z6, $z8, $z10, $z14;
        long l0;
        java.util.concurrent.SynchronousQueue$TransferStack$SNode r2, r3, r4, r5, $r6, $r7, $r8, r9, $r10, $r11, $r13, $r14, r15, r17, r18;
        byte b1, $b2, $b4, $b6;
        int $i3, $i5;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferStack;
        r1 := @parameter0: java.lang.Object;
        z0 := @parameter1: boolean;
        l0 := @parameter2: long;
        r2 = null;
        if r1 != null goto label0;

        $b2 = 0;
        goto label1;

     label0:
        $b2 = 1;

     label1:
        b1 = $b2;

     label2:
        r3 = r0.<java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode head>;
        if r3 == null goto label3;

        $i3 = r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: int mode>;
        if $i3 != b1 goto label10;

     label3:
        if z0 == 0 goto label5;

        $b4 = l0 cmp 0L;
        if $b4 > 0 goto label5;

        if r3 == null goto label4;

        $z1 = virtualinvoke r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean isCancelled()>();
        if $z1 == 0 goto label4;

        $r6 = r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;
        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r3, $r6);
        goto label20;

     label4:
        return null;

     label5:
        $r7 = staticinvoke <java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode snode(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.lang.Object,java.util.concurrent.SynchronousQueue$TransferStack$SNode,int)>(r2, r1, r3, b1);
        r2 = $r7;
        $z3 = virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r3, $r7);
        if $z3 == 0 goto label20;

        r4 = virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode awaitFulfill(java.util.concurrent.SynchronousQueue$TransferStack$SNode,boolean,long)>(r2, z0, l0);
        if r4 != r2 goto label6;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: void clean(java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r2);
        return null;

     label6:
        $r8 = r0.<java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode head>;
        r9 = $r8;
        if $r8 == null goto label7;

        $r10 = r9.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;
        if $r10 != r2 goto label7;

        $r11 = r2.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;
        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r9, $r11);

     label7:
        if b1 != 0 goto label8;

        $r12 = r4.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.lang.Object item>;
        goto label9;

     label8:
        $r12 = r2.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.lang.Object item>;

     label9:
        return $r12;

     label10:
        $i5 = r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: int mode>;
        $z5 = staticinvoke <java.util.concurrent.SynchronousQueue$TransferStack: boolean isFulfilling(int)>($i5);
        if $z5 != 0 goto label17;

        $z6 = virtualinvoke r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean isCancelled()>();
        if $z6 == 0 goto label11;

        $r13 = r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;
        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r3, $r13);
        goto label20;

     label11:
        $b6 = 2 | b1;
        $r14 = staticinvoke <java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode snode(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.lang.Object,java.util.concurrent.SynchronousQueue$TransferStack$SNode,int)>(r2, r1, r3, $b6);
        r2 = $r14;
        $z8 = virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r3, $r14);
        if $z8 == 0 goto label20;

     label12:
        r15 = r2.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;
        if r15 != null goto label13;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r2, null);
        r2 = null;
        goto label20;

     label13:
        r5 = r15.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;
        $z10 = virtualinvoke r15.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean tryMatch(java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r2);
        if $z10 == 0 goto label16;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r2, r5);
        if b1 != 0 goto label14;

        $r16 = r15.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.lang.Object item>;
        goto label15;

     label14:
        $r16 = r2.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.lang.Object item>;

     label15:
        return $r16;

     label16:
        virtualinvoke r2.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean casNext(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r15, r5);
        goto label12;

     label17:
        r17 = r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;
        if r17 != null goto label18;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r3, null);
        goto label20;

     label18:
        r18 = r17.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;
        $z14 = virtualinvoke r17.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean tryMatch(java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r3);
        if $z14 == 0 goto label19;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r3, r18);
        goto label20;

     label19:
        virtualinvoke r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean casNext(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r17, r18);

     label20:
        goto label2;
    }

    java.util.concurrent.SynchronousQueue$TransferStack$SNode awaitFulfill(java.util.concurrent.SynchronousQueue$TransferStack$SNode, boolean, long)
    {
        java.util.concurrent.SynchronousQueue$TransferStack r0;
        java.util.concurrent.SynchronousQueue$TransferStack$SNode r1, r3, r4;
        boolean z0, $z1, $z2, $z3;
        long l0, l1, l3, $l4, $l6;
        java.lang.Thread r2, $r5;
        int i2, $i5, $i8;
        byte $b7, $b9;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferStack;
        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferStack$SNode;
        z0 := @parameter1: boolean;
        l0 := @parameter2: long;
        if z0 == 0 goto label0;

        $l4 = staticinvoke <java.lang.System: long nanoTime()>();
        goto label1;

     label0:
        $l4 = 0L;

     label1:
        l1 = $l4;
        r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r3 = r0.<java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode head>;
        $z1 = virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean shouldSpin(java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r1);
        if $z1 == 0 goto label3;

        if z0 == 0 goto label2;

        $i5 = <java.util.concurrent.SynchronousQueue: int maxTimedSpins>;
        goto label4;

     label2:
        $i5 = <java.util.concurrent.SynchronousQueue: int maxUntimedSpins>;
        goto label4;

     label3:
        $i5 = 0;

     label4:
        i2 = $i5;

     label5:
        $z2 = virtualinvoke r2.<java.lang.Thread: boolean isInterrupted()>();
        if $z2 == 0 goto label6;

        virtualinvoke r1.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: void tryCancel()>();

     label6:
        r4 = r1.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode match>;
        if r4 == null goto label7;

        return r4;

     label7:
        if z0 == 0 goto label8;

        l3 = staticinvoke <java.lang.System: long nanoTime()>();
        $l6 = l3 - l1;
        l0 = l0 - $l6;
        l1 = l3;
        $b7 = l0 cmp 0L;
        if $b7 > 0 goto label8;

        virtualinvoke r1.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: void tryCancel()>();
        goto label5;

     label8:
        if i2 <= 0 goto label11;

        $z3 = virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean shouldSpin(java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r1);
        if $z3 == 0 goto label9;

        $i8 = i2 - 1;
        goto label10;

     label9:
        $i8 = 0;

     label10:
        i2 = $i8;
        goto label14;

     label11:
        $r5 = r1.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.lang.Thread waiter>;
        if $r5 != null goto label12;

        r1.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.lang.Thread waiter> = r2;
        goto label14;

     label12:
        if z0 != 0 goto label13;

        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(r0);
        goto label14;

     label13:
        $b9 = l0 cmp 1000L;
        if $b9 <= 0 goto label14;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, l0);

     label14:
        goto label5;
    }

    boolean shouldSpin(java.util.concurrent.SynchronousQueue$TransferStack$SNode)
    {
        java.util.concurrent.SynchronousQueue$TransferStack r0;
        java.util.concurrent.SynchronousQueue$TransferStack$SNode r1, r2;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferStack;
        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferStack$SNode;
        r2 = r0.<java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode head>;
        if r2 == r1 goto label0;

        if r2 == null goto label0;

        $i0 = r2.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: int mode>;
        $z0 = staticinvoke <java.util.concurrent.SynchronousQueue$TransferStack: boolean isFulfilling(int)>($i0);
        if $z0 == 0 goto label1;

     label0:
        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    void clean(java.util.concurrent.SynchronousQueue$TransferStack$SNode)
    {
        java.util.concurrent.SynchronousQueue$TransferStack r0;
        java.util.concurrent.SynchronousQueue$TransferStack$SNode r1, r2, r3, r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z3;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferStack;
        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferStack$SNode;
        r1.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.lang.Object item> = null;
        r1.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.lang.Thread waiter> = null;
        r2 = r1.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;
        if r2 == null goto label0;

        $z0 = virtualinvoke r2.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean isCancelled()>();
        if $z0 == 0 goto label0;

        r2 = r2.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;

     label0:
        $r5 = r0.<java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode head>;
        r3 = $r5;
        if $r5 == null goto label1;

        if r3 == r2 goto label1;

        $z1 = virtualinvoke r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean isCancelled()>();
        if $z1 == 0 goto label1;

        $r6 = r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;
        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r3, $r6);
        goto label0;

     label1:
        if r3 == null goto label4;

        if r3 == r2 goto label4;

        r4 = r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;
        if r4 == null goto label2;

        $z3 = virtualinvoke r4.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean isCancelled()>();
        if $z3 == 0 goto label2;

        $r7 = r4.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;
        virtualinvoke r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean casNext(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r4, $r7);
        goto label3;

     label2:
        r3 = r4;

     label3:
        goto label1;

     label4:
        return;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0, $r2;
        java.lang.Class r1;
        java.lang.reflect.Field $r3;
        long $l0;
        java.lang.Exception $r4, r5;
        java.lang.Error $r6;

     label0:
        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <java.util.concurrent.SynchronousQueue$TransferStack: sun.misc.Unsafe UNSAFE> = $r0;
        r1 = class "java/util/concurrent/SynchronousQueue$TransferStack";
        $r2 = <java.util.concurrent.SynchronousQueue$TransferStack: sun.misc.Unsafe UNSAFE>;
        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("head");
        $l0 = virtualinvoke $r2.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);
        <java.util.concurrent.SynchronousQueue$TransferStack: long headOffset> = $l0;

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r5 = $r4;
        $r6 = new java.lang.Error;
        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.Throwable)>(r5);
        throw $r6;

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }
}
