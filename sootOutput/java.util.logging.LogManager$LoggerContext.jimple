class java.util.logging.LogManager$LoggerContext extends java.lang.Object
{
    private final java.util.Hashtable namedLoggers;
    private final java.util.logging.LogManager$LogNode root;
    private final boolean requiresDefaultLoggers;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        java.util.logging.LogManager$LoggerContext r0;

        r0 := @this: java.util.logging.LogManager$LoggerContext;
        specialinvoke r0.<java.util.logging.LogManager$LoggerContext: void <init>(boolean)>(0);
        return;
    }

    private void <init>(boolean)
    {
        java.util.logging.LogManager$LoggerContext r0;
        boolean z0;
        java.util.Hashtable $r1;
        java.util.logging.LogManager$LogNode $r2;

        r0 := @this: java.util.logging.LogManager$LoggerContext;
        z0 := @parameter0: boolean;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new java.util.Hashtable;
        specialinvoke $r1.<java.util.Hashtable: void <init>()>();
        r0.<java.util.logging.LogManager$LoggerContext: java.util.Hashtable namedLoggers> = $r1;
        $r2 = new java.util.logging.LogManager$LogNode;
        specialinvoke $r2.<java.util.logging.LogManager$LogNode: void <init>(java.util.logging.LogManager$LogNode,java.util.logging.LogManager$LoggerContext)>(null, r0);
        r0.<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode root> = $r2;
        r0.<java.util.logging.LogManager$LoggerContext: boolean requiresDefaultLoggers> = z0;
        return;
    }

    java.util.logging.Logger demandLogger(java.lang.String, java.lang.String)
    {
        java.util.logging.LogManager$LoggerContext r0;
        java.lang.String r1, r2;
        java.util.logging.LogManager $r3;
        java.util.logging.Logger $r4;

        r0 := @this: java.util.logging.LogManager$LoggerContext;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        $r3 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        $r4 = virtualinvoke $r3.<java.util.logging.LogManager: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String,java.lang.Class)>(r1, r2, null);
        return $r4;
    }

    private void ensureInitialized()
    {
        java.util.logging.LogManager$LoggerContext r0;
        java.util.logging.LogManager $r1;
        boolean $z0;
        java.util.logging.Logger $r2, $r3;

        r0 := @this: java.util.logging.LogManager$LoggerContext;
        $z0 = r0.<java.util.logging.LogManager$LoggerContext: boolean requiresDefaultLoggers>;
        if $z0 == 0 goto label0;

        $r1 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        $r2 = staticinvoke <java.util.logging.LogManager: java.util.logging.Logger access$200(java.util.logging.LogManager)>($r1);
        specialinvoke r0.<java.util.logging.LogManager$LoggerContext: void ensureDefaultLogger(java.util.logging.Logger)>($r2);
        $r3 = <java.util.logging.Logger: java.util.logging.Logger global>;
        specialinvoke r0.<java.util.logging.LogManager$LoggerContext: void ensureDefaultLogger(java.util.logging.Logger)>($r3);

     label0:
        return;
    }

    synchronized java.util.logging.Logger findLogger(java.lang.String)
    {
        java.util.logging.LogManager$LoggerContext r0;
        java.lang.String r1;
        java.util.logging.LogManager$LoggerWeakRef r2;
        java.util.logging.Logger r3;
        java.util.Hashtable $r4;
        java.lang.Object $r5, $r6;

        r0 := @this: java.util.logging.LogManager$LoggerContext;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.util.logging.LogManager$LoggerContext: void ensureInitialized()>();
        $r4 = r0.<java.util.logging.LogManager$LoggerContext: java.util.Hashtable namedLoggers>;
        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);
        r2 = (java.util.logging.LogManager$LoggerWeakRef) $r5;
        if r2 != null goto label0;

        return null;

     label0:
        $r6 = virtualinvoke r2.<java.util.logging.LogManager$LoggerWeakRef: java.lang.Object get()>();
        r3 = (java.util.logging.Logger) $r6;
        if r3 != null goto label1;

        virtualinvoke r2.<java.util.logging.LogManager$LoggerWeakRef: void dispose()>();

     label1:
        return r3;
    }

    private void ensureAllDefaultLoggers(java.util.logging.Logger)
    {
        java.util.logging.LogManager$LoggerContext r0;
        java.util.logging.Logger r1, $r4, $r6;
        java.lang.String r2, $r5;
        java.util.logging.LogManager $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.logging.LogManager$LoggerContext;
        r1 := @parameter0: java.util.logging.Logger;
        $z0 = r0.<java.util.logging.LogManager$LoggerContext: boolean requiresDefaultLoggers>;
        if $z0 == 0 goto label1;

        r2 = virtualinvoke r1.<java.util.logging.Logger: java.lang.String getName()>();
        $z1 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();
        if $z1 != 0 goto label0;

        $r3 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        $r4 = staticinvoke <java.util.logging.LogManager: java.util.logging.Logger access$200(java.util.logging.LogManager)>($r3);
        specialinvoke r0.<java.util.logging.LogManager$LoggerContext: void ensureDefaultLogger(java.util.logging.Logger)>($r4);

     label0:
        $r5 = "global";
        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r2);
        if $z2 != 0 goto label1;

        $r6 = <java.util.logging.Logger: java.util.logging.Logger global>;
        specialinvoke r0.<java.util.logging.LogManager$LoggerContext: void ensureDefaultLogger(java.util.logging.Logger)>($r6);

     label1:
        return;
    }

    private void ensureDefaultLogger(java.util.logging.Logger)
    {
        java.util.logging.LogManager$LoggerContext r0;
        java.util.logging.Logger r1, $r2, $r4;
        boolean $z0, $z1, $z2;
        java.util.logging.LogManager $r3;
        java.lang.AssertionError $r5;
        java.util.Hashtable $r6;
        java.lang.String $r7;

        r0 := @this: java.util.logging.LogManager$LoggerContext;
        r1 := @parameter0: java.util.logging.Logger;
        $z0 = r0.<java.util.logging.LogManager$LoggerContext: boolean requiresDefaultLoggers>;
        if $z0 == 0 goto label0;

        if r1 == null goto label0;

        $r2 = <java.util.logging.Logger: java.util.logging.Logger global>;
        if r1 == $r2 goto label2;

        $r3 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        $r4 = staticinvoke <java.util.logging.LogManager: java.util.logging.Logger access$200(java.util.logging.LogManager)>($r3);
        if r1 == $r4 goto label2;

     label0:
        $z1 = <java.util.logging.LogManager$LoggerContext: boolean $assertionsDisabled>;
        if $z1 != 0 goto label1;

        if r1 == null goto label1;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label1:
        return;

     label2:
        $r6 = r0.<java.util.logging.LogManager$LoggerContext: java.util.Hashtable namedLoggers>;
        $r7 = virtualinvoke r1.<java.util.logging.Logger: java.lang.String getName()>();
        $z2 = virtualinvoke $r6.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r7);
        if $z2 != 0 goto label3;

        virtualinvoke r0.<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>(r1, 0);

     label3:
        return;
    }

    boolean addLocalLogger(java.util.logging.Logger)
    {
        java.util.logging.LogManager$LoggerContext r0;
        java.util.logging.Logger r1;
        boolean $z0, $z1;

        r0 := @this: java.util.logging.LogManager$LoggerContext;
        r1 := @parameter0: java.util.logging.Logger;
        $z0 = r0.<java.util.logging.LogManager$LoggerContext: boolean requiresDefaultLoggers>;
        $z1 = virtualinvoke r0.<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>(r1, $z0);
        return $z1;
    }

    synchronized boolean addLocalLogger(java.util.logging.Logger, boolean)
    {
        java.util.logging.LogManager$LoggerContext r0;
        java.util.logging.Logger r1, r7;
        boolean z0;
        java.lang.String r2, $r23;
        java.util.logging.LogManager$LoggerWeakRef r3, r9, $r14, r16;
        java.util.logging.LogManager $r4, $r19;
        java.util.logging.Level r5;
        java.util.logging.LogManager$LogNode r6, r8;
        java.lang.NullPointerException $r10;
        java.util.Hashtable $r11, $r17;
        java.lang.Object $r12, $r13, $r24;
        java.lang.StringBuilder $r20, $r21, $r22;

        r0 := @this: java.util.logging.LogManager$LoggerContext;
        r1 := @parameter0: java.util.logging.Logger;
        z0 := @parameter1: boolean;
        if z0 == 0 goto label0;

        specialinvoke r0.<java.util.logging.LogManager$LoggerContext: void ensureAllDefaultLoggers(java.util.logging.Logger)>(r1);

     label0:
        r2 = virtualinvoke r1.<java.util.logging.Logger: java.lang.String getName()>();
        if r2 != null goto label1;

        $r10 = new java.lang.NullPointerException;
        specialinvoke $r10.<java.lang.NullPointerException: void <init>()>();
        throw $r10;

     label1:
        $r11 = r0.<java.util.logging.LogManager$LoggerContext: java.util.Hashtable namedLoggers>;
        $r12 = virtualinvoke $r11.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);
        r3 = (java.util.logging.LogManager$LoggerWeakRef) $r12;
        if r3 == null goto label3;

        $r13 = virtualinvoke r3.<java.util.logging.LogManager$LoggerWeakRef: java.lang.Object get()>();
        if $r13 != null goto label2;

        virtualinvoke r3.<java.util.logging.LogManager$LoggerWeakRef: void dispose()>();
        goto label3;

     label2:
        return 0;

     label3:
        $r14 = new java.util.logging.LogManager$LoggerWeakRef;
        $r4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();
        specialinvoke $r14.<java.util.logging.LogManager$LoggerWeakRef: void <init>(java.util.logging.LogManager,java.util.logging.Logger)>($r4, r1);
        r16 = $r14;
        $r17 = r0.<java.util.logging.LogManager$LoggerContext: java.util.Hashtable namedLoggers>;
        virtualinvoke $r17.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r16);
        $r19 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        $r20 = new java.lang.StringBuilder;
        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".level");
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        r5 = virtualinvoke $r19.<java.util.logging.LogManager: java.util.logging.Level getLevelProperty(java.lang.String,java.util.logging.Level)>($r23, null);
        if r5 == null goto label4;

        staticinvoke <java.util.logging.LogManager: void access$1000(java.util.logging.Logger,java.util.logging.Level)>(r1, r5);

     label4:
        specialinvoke r0.<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>(r1, r2);
        r6 = virtualinvoke r0.<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode getNode(java.lang.String)>(r2);
        r6.<java.util.logging.LogManager$LogNode: java.util.logging.LogManager$LoggerWeakRef loggerRef> = r16;
        r7 = null;
        r8 = r6.<java.util.logging.LogManager$LogNode: java.util.logging.LogManager$LogNode parent>;

     label5:
        if r8 == null goto label7;

        r9 = r8.<java.util.logging.LogManager$LogNode: java.util.logging.LogManager$LoggerWeakRef loggerRef>;
        if r9 == null goto label6;

        $r24 = virtualinvoke r9.<java.util.logging.LogManager$LoggerWeakRef: java.lang.Object get()>();
        r7 = (java.util.logging.Logger) $r24;
        if r7 == null goto label6;

        goto label7;

     label6:
        r8 = r8.<java.util.logging.LogManager$LogNode: java.util.logging.LogManager$LogNode parent>;
        goto label5;

     label7:
        if r7 == null goto label8;

        staticinvoke <java.util.logging.LogManager: void access$1100(java.util.logging.Logger,java.util.logging.Logger)>(r1, r7);

     label8:
        virtualinvoke r6.<java.util.logging.LogManager$LogNode: void walkAndSetParent(java.util.logging.Logger)>(r1);
        virtualinvoke r16.<java.util.logging.LogManager$LoggerWeakRef: void setNode(java.util.logging.LogManager$LogNode)>(r6);
        return 1;
    }

    synchronized void removeLoggerRef(java.lang.String, java.util.logging.LogManager$LoggerWeakRef)
    {
        java.util.logging.LogManager$LoggerContext r0;
        java.lang.String r1;
        java.util.logging.LogManager$LoggerWeakRef r2;
        java.util.Hashtable $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: java.util.logging.LogManager$LoggerContext;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.util.logging.LogManager$LoggerWeakRef;
        $r3 = r0.<java.util.logging.LogManager$LoggerContext: java.util.Hashtable namedLoggers>;
        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);
        if $r4 != r2 goto label0;

        $r5 = r0.<java.util.logging.LogManager$LoggerContext: java.util.Hashtable namedLoggers>;
        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r1);

     label0:
        return;
    }

    synchronized java.util.Enumeration getLoggerNames()
    {
        java.util.logging.LogManager$LoggerContext r0;
        java.util.Hashtable $r1;
        java.util.Enumeration $r2;

        r0 := @this: java.util.logging.LogManager$LoggerContext;
        specialinvoke r0.<java.util.logging.LogManager$LoggerContext: void ensureInitialized()>();
        $r1 = r0.<java.util.logging.LogManager$LoggerContext: java.util.Hashtable namedLoggers>;
        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration keys()>();
        return $r2;
    }

    private void processParentHandlers(java.util.logging.Logger, java.lang.String)
    {
        java.util.logging.LogManager$LoggerContext r0;
        java.util.logging.Logger r1;
        java.lang.String r2, r4, $r10, $r11, $r16, $r17;
        java.util.logging.LogManager$LoggerContext$1 $r3;
        int i0, i1;
        java.util.logging.LogManager $r6, $r12;
        java.lang.StringBuilder $r7, $r8, $r9, $r13, $r14, $r15;

        r0 := @this: java.util.logging.LogManager$LoggerContext;
        r1 := @parameter0: java.util.logging.Logger;
        r2 := @parameter1: java.lang.String;
        $r3 = new java.util.logging.LogManager$LoggerContext$1;
        specialinvoke $r3.<java.util.logging.LogManager$LoggerContext$1: void <init>(java.util.logging.LogManager$LoggerContext,java.util.logging.Logger,java.lang.String)>(r0, r1, r2);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r3);
        i0 = 1;

     label0:
        i1 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String,int)>(".", i0);
        if i1 >= 0 goto label1;

        goto label4;

     label1:
        r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i1);
        $r6 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".level");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        $r11 = virtualinvoke $r6.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r10);
        if $r11 != null goto label2;

        $r12 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        $r13 = new java.lang.StringBuilder;
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".handlers");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        $r17 = virtualinvoke $r12.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r16);
        if $r17 == null goto label3;

     label2:
        virtualinvoke r0.<java.util.logging.LogManager$LoggerContext: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String)>(r4, null);

     label3:
        i0 = i1 + 1;
        goto label0;

     label4:
        return;
    }

    java.util.logging.LogManager$LogNode getNode(java.lang.String)
    {
        java.util.logging.LogManager$LoggerContext r0;
        java.lang.String r1, r3;
        java.util.logging.LogManager$LogNode r2, r4, $r5, $r10;
        int i0, $i1, $i2;
        boolean $z0;
        java.util.HashMap $r6, $r7, $r8, $r11;
        java.lang.Object $r9;

        r0 := @this: java.util.logging.LogManager$LoggerContext;
        r1 := @parameter0: java.lang.String;
        if r1 == null goto label0;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("");
        if $z0 == 0 goto label1;

     label0:
        $r5 = r0.<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode root>;
        return $r5;

     label1:
        r2 = r0.<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode root>;

     label2:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i1 <= 0 goto label7;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(".");
        if i0 <= 0 goto label3;

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        $i2 = i0 + 1;
        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i2);
        goto label4;

     label3:
        r3 = r1;
        r1 = "";

     label4:
        $r6 = r2.<java.util.logging.LogManager$LogNode: java.util.HashMap children>;
        if $r6 != null goto label5;

        $r7 = new java.util.HashMap;
        specialinvoke $r7.<java.util.HashMap: void <init>()>();
        r2.<java.util.logging.LogManager$LogNode: java.util.HashMap children> = $r7;

     label5:
        $r8 = r2.<java.util.logging.LogManager$LogNode: java.util.HashMap children>;
        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);
        r4 = (java.util.logging.LogManager$LogNode) $r9;
        if r4 != null goto label6;

        $r10 = new java.util.logging.LogManager$LogNode;
        specialinvoke $r10.<java.util.logging.LogManager$LogNode: void <init>(java.util.logging.LogManager$LogNode,java.util.logging.LogManager$LoggerContext)>(r2, r0);
        r4 = $r10;
        $r11 = r2.<java.util.logging.LogManager$LogNode: java.util.HashMap children>;
        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

     label6:
        r2 = r4;
        goto label2;

     label7:
        return r2;
    }

    void <init>(java.util.logging.LogManager$1)
    {
        java.util.logging.LogManager$LoggerContext r0;
        java.util.logging.LogManager$1 r1;

        r0 := @this: java.util.logging.LogManager$LoggerContext;
        r1 := @parameter0: java.util.logging.LogManager$1;
        specialinvoke r0.<java.util.logging.LogManager$LoggerContext: void <init>()>();
        return;
    }

    void <init>(boolean, java.util.logging.LogManager$1)
    {
        java.util.logging.LogManager$LoggerContext r0;
        boolean z0;
        java.util.logging.LogManager$1 r1;

        r0 := @this: java.util.logging.LogManager$LoggerContext;
        z0 := @parameter0: boolean;
        r1 := @parameter1: java.util.logging.LogManager$1;
        specialinvoke r0.<java.util.logging.LogManager$LoggerContext: void <init>(boolean)>(z0);
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/util/logging/LogManager";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.util.logging.LogManager$LoggerContext: boolean $assertionsDisabled> = $z1;
        return;
    }
}
