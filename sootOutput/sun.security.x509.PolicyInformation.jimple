public class sun.security.x509.PolicyInformation extends java.lang.Object
{
    public static final java.lang.String NAME;
    public static final java.lang.String ID;
    public static final java.lang.String QUALIFIERS;
    private sun.security.x509.CertificatePolicyId policyIdentifier;
    private java.util.Set policyQualifiers;

    public void <init>(sun.security.x509.CertificatePolicyId, java.util.Set) throws java.io.IOException
    {
        sun.security.x509.PolicyInformation r0;
        sun.security.x509.CertificatePolicyId r1;
        java.util.Set r2;
        java.lang.NullPointerException $r3;
        java.util.LinkedHashSet $r4;

        r0 := @this: sun.security.x509.PolicyInformation;
        r1 := @parameter0: sun.security.x509.CertificatePolicyId;
        r2 := @parameter1: java.util.Set;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r2 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("policyQualifiers is null");
        throw $r3;

     label0:
        $r4 = new java.util.LinkedHashSet;
        specialinvoke $r4.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r2);
        r0.<sun.security.x509.PolicyInformation: java.util.Set policyQualifiers> = $r4;
        r0.<sun.security.x509.PolicyInformation: sun.security.x509.CertificatePolicyId policyIdentifier> = r1;
        return;
    }

    public void <init>(sun.security.util.DerValue) throws java.io.IOException
    {
        sun.security.x509.PolicyInformation r0;
        sun.security.util.DerValue r1, r2, $r6, $r17;
        byte $b0, $b2;
        java.io.IOException $r3, $r10, $r12;
        sun.security.x509.CertificatePolicyId $r4;
        sun.security.util.DerInputStream $r5, $r7, $r9, $r11, $r13, $r16;
        int $i1, $i3, $i4;
        java.util.LinkedHashSet $r8;
        java.util.Set $r14, $r19;
        java.security.cert.PolicyQualifierInfo $r15;
        byte[] $r18;

        r0 := @this: sun.security.x509.PolicyInformation;
        r1 := @parameter0: sun.security.util.DerValue;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $b0 = r1.<sun.security.util.DerValue: byte tag>;
        if $b0 == 48 goto label0;

        $r3 = new java.io.IOException;
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Invalid encoding of PolicyInformation");
        throw $r3;

     label0:
        $r4 = new sun.security.x509.CertificatePolicyId;
        $r5 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $r6 = virtualinvoke $r5.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        specialinvoke $r4.<sun.security.x509.CertificatePolicyId: void <init>(sun.security.util.DerValue)>($r6);
        r0.<sun.security.x509.PolicyInformation: sun.security.x509.CertificatePolicyId policyIdentifier> = $r4;
        $r7 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $i1 = virtualinvoke $r7.<sun.security.util.DerInputStream: int available()>();
        if $i1 == 0 goto label4;

        $r8 = new java.util.LinkedHashSet;
        specialinvoke $r8.<java.util.LinkedHashSet: void <init>()>();
        r0.<sun.security.x509.PolicyInformation: java.util.Set policyQualifiers> = $r8;
        $r9 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        r2 = virtualinvoke $r9.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $b2 = r2.<sun.security.util.DerValue: byte tag>;
        if $b2 == 48 goto label1;

        $r10 = new java.io.IOException;
        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Invalid encoding of PolicyInformation");
        throw $r10;

     label1:
        $r11 = r2.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $i3 = virtualinvoke $r11.<sun.security.util.DerInputStream: int available()>();
        if $i3 != 0 goto label2;

        $r12 = new java.io.IOException;
        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("No data available in policyQualifiers");
        throw $r12;

     label2:
        $r13 = r2.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $i4 = virtualinvoke $r13.<sun.security.util.DerInputStream: int available()>();
        if $i4 == 0 goto label3;

        $r14 = r0.<sun.security.x509.PolicyInformation: java.util.Set policyQualifiers>;
        $r15 = new java.security.cert.PolicyQualifierInfo;
        $r16 = r2.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $r17 = virtualinvoke $r16.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $r18 = virtualinvoke $r17.<sun.security.util.DerValue: byte[] toByteArray()>();
        specialinvoke $r15.<java.security.cert.PolicyQualifierInfo: void <init>(byte[])>($r18);
        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>($r15);
        goto label2;

     label3:
        goto label5;

     label4:
        $r19 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
        r0.<sun.security.x509.PolicyInformation: java.util.Set policyQualifiers> = $r19;

     label5:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        sun.security.x509.PolicyInformation r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        sun.security.x509.CertificatePolicyId $r3, $r4;
        java.util.Set $r5, $r6;

        r0 := @this: sun.security.x509.PolicyInformation;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof sun.security.x509.PolicyInformation;
        if $z0 != 0 goto label0;

        return 0;

     label0:
        r2 = (sun.security.x509.PolicyInformation) r1;
        $r3 = r0.<sun.security.x509.PolicyInformation: sun.security.x509.CertificatePolicyId policyIdentifier>;
        $r4 = virtualinvoke r2.<sun.security.x509.PolicyInformation: sun.security.x509.CertificatePolicyId getPolicyIdentifier()>();
        $z1 = virtualinvoke $r3.<sun.security.x509.CertificatePolicyId: boolean equals(java.lang.Object)>($r4);
        if $z1 != 0 goto label1;

        return 0;

     label1:
        $r5 = r0.<sun.security.x509.PolicyInformation: java.util.Set policyQualifiers>;
        $r6 = virtualinvoke r2.<sun.security.x509.PolicyInformation: java.util.Set getPolicyQualifiers()>();
        $z2 = interfaceinvoke $r5.<java.util.Set: boolean equals(java.lang.Object)>($r6);
        return $z2;
    }

    public int hashCode()
    {
        sun.security.x509.PolicyInformation r0;
        int i0, $i1, $i2, $i3, i4;
        sun.security.x509.CertificatePolicyId $r1;
        java.util.Set $r2;

        r0 := @this: sun.security.x509.PolicyInformation;
        $r1 = r0.<sun.security.x509.PolicyInformation: sun.security.x509.CertificatePolicyId policyIdentifier>;
        $i1 = virtualinvoke $r1.<sun.security.x509.CertificatePolicyId: int hashCode()>();
        i0 = 37 + $i1;
        $i2 = 37 * i0;
        $r2 = r0.<sun.security.x509.PolicyInformation: java.util.Set policyQualifiers>;
        $i3 = interfaceinvoke $r2.<java.util.Set: int hashCode()>();
        i4 = $i2 + $i3;
        return i4;
    }

    public sun.security.x509.CertificatePolicyId getPolicyIdentifier()
    {
        sun.security.x509.PolicyInformation r0;
        sun.security.x509.CertificatePolicyId $r1;

        r0 := @this: sun.security.x509.PolicyInformation;
        $r1 = r0.<sun.security.x509.PolicyInformation: sun.security.x509.CertificatePolicyId policyIdentifier>;
        return $r1;
    }

    public java.util.Set getPolicyQualifiers()
    {
        sun.security.x509.PolicyInformation r0;
        java.util.Set $r1;

        r0 := @this: sun.security.x509.PolicyInformation;
        $r1 = r0.<sun.security.x509.PolicyInformation: java.util.Set policyQualifiers>;
        return $r1;
    }

    public java.lang.Object get(java.lang.String) throws java.io.IOException
    {
        sun.security.x509.PolicyInformation r0;
        java.lang.String r1, $r9;
        java.lang.StringBuilder $r2, $r6, $r7, $r8;
        boolean $z0, $z1;
        sun.security.x509.CertificatePolicyId $r3;
        java.util.Set $r4;
        java.io.IOException $r5;

        r0 := @this: sun.security.x509.PolicyInformation;
        r1 := @parameter0: java.lang.String;
        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("id");
        if $z0 == 0 goto label0;

        $r3 = r0.<sun.security.x509.PolicyInformation: sun.security.x509.CertificatePolicyId policyIdentifier>;
        return $r3;

     label0:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("qualifiers");
        if $z1 == 0 goto label1;

        $r4 = r0.<sun.security.x509.PolicyInformation: java.util.Set policyQualifiers>;
        return $r4;

     label1:
        $r5 = new java.io.IOException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attribute name [");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] not recognized by PolicyInformation.");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r9);
        throw $r5;
    }

    public void set(java.lang.String, java.lang.Object) throws java.io.IOException
    {
        sun.security.x509.PolicyInformation r0;
        java.lang.String r1, $r18;
        java.lang.Object r2, r4;
        java.util.Iterator r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        sun.security.x509.CertificatePolicyId $r5, $r7;
        java.io.IOException $r6, $r8, $r10, $r12, $r13;
        java.util.Set $r9, $r11;
        java.lang.StringBuilder $r14, $r15, $r16, $r17;

        r0 := @this: sun.security.x509.PolicyInformation;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object;
        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("id");
        if $z0 == 0 goto label1;

        $z1 = r2 instanceof sun.security.x509.CertificatePolicyId;
        if $z1 == 0 goto label0;

        $r5 = (sun.security.x509.CertificatePolicyId) r2;
        r0.<sun.security.x509.PolicyInformation: sun.security.x509.CertificatePolicyId policyIdentifier> = $r5;
        goto label8;

     label0:
        $r6 = new java.io.IOException;
        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Attribute value must be instance of CertificatePolicyId.");
        throw $r6;

     label1:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("qualifiers");
        if $z2 == 0 goto label7;

        $r7 = r0.<sun.security.x509.PolicyInformation: sun.security.x509.CertificatePolicyId policyIdentifier>;
        if $r7 != null goto label2;

        $r8 = new java.io.IOException;
        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Attribute must have a CertificatePolicyIdentifier value before PolicyQualifierInfo can be set.");
        throw $r8;

     label2:
        $z3 = r2 instanceof java.util.Set;
        if $z3 == 0 goto label6;

        $r9 = (java.util.Set) r2;
        r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z4 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z4 == 0 goto label5;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        $z5 = r4 instanceof java.security.cert.PolicyQualifierInfo;
        if $z5 != 0 goto label4;

        $r10 = new java.io.IOException;
        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Attribute value must be aSet of PolicyQualifierInfo objects.");
        throw $r10;

     label4:
        goto label3;

     label5:
        $r11 = (java.util.Set) r2;
        r0.<sun.security.x509.PolicyInformation: java.util.Set policyQualifiers> = $r11;
        goto label8;

     label6:
        $r12 = new java.io.IOException;
        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("Attribute value must be of type Set.");
        throw $r12;

     label7:
        $r13 = new java.io.IOException;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attribute name [");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] not recognized by PolicyInformation");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r18);
        throw $r13;

     label8:
        return;
    }

    public void delete(java.lang.String) throws java.io.IOException
    {
        sun.security.x509.PolicyInformation r0;
        java.lang.String r1, $r9;
        boolean $z0, $z1;
        java.util.Set $r2;
        java.io.IOException $r3, $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: sun.security.x509.PolicyInformation;
        r1 := @parameter0: java.lang.String;
        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("qualifiers");
        if $z0 == 0 goto label0;

        $r2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
        r0.<sun.security.x509.PolicyInformation: java.util.Set policyQualifiers> = $r2;
        goto label2;

     label0:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("id");
        if $z1 == 0 goto label1;

        $r3 = new java.io.IOException;
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Attribute ID may not be deleted from PolicyInformation.");
        throw $r3;

     label1:
        $r4 = new java.io.IOException;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attribute name [");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] not recognized by PolicyInformation.");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9);
        throw $r4;

     label2:
        return;
    }

    public java.util.Enumeration getElements()
    {
        sun.security.x509.PolicyInformation r0;
        sun.security.x509.AttributeNameEnumeration $r1, r2;
        java.util.Enumeration $r3;

        r0 := @this: sun.security.x509.PolicyInformation;
        $r1 = new sun.security.x509.AttributeNameEnumeration;
        specialinvoke $r1.<sun.security.x509.AttributeNameEnumeration: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<sun.security.x509.AttributeNameEnumeration: void addElement(java.lang.Object)>("id");
        virtualinvoke r2.<sun.security.x509.AttributeNameEnumeration: void addElement(java.lang.Object)>("qualifiers");
        $r3 = virtualinvoke r2.<sun.security.x509.AttributeNameEnumeration: java.util.Enumeration elements()>();
        return $r3;
    }

    public java.lang.String getName()
    {
        sun.security.x509.PolicyInformation r0;

        r0 := @this: sun.security.x509.PolicyInformation;
        return "PolicyInformation";
    }

    public java.lang.String toString()
    {
        sun.security.x509.PolicyInformation r0;
        java.lang.StringBuilder $r1, $r2, r3, $r4, $r7, $r9, $r11, $r12;
        sun.security.x509.CertificatePolicyId $r5;
        java.lang.String $r6, $r8, $r13, $r15;
        java.util.Set $r10;

        r0 := @this: sun.security.x509.PolicyInformation;
        $r1 = new java.lang.StringBuilder;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  [");
        $r5 = r0.<sun.security.x509.PolicyInformation: sun.security.x509.CertificatePolicyId policyIdentifier>;
        $r6 = virtualinvoke $r5.<sun.security.x509.CertificatePolicyId: java.lang.String toString()>();
        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);
        r3 = $r1;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = r0.<sun.security.x509.PolicyInformation: java.util.Set policyQualifiers>;
        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ]\n");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
        $r15 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r15;
    }

    public void encode(sun.security.util.DerOutputStream) throws java.io.IOException
    {
        sun.security.x509.PolicyInformation r0;
        sun.security.util.DerOutputStream r1, $r2, r3, r4, $r9;
        java.util.Iterator r5;
        java.security.cert.PolicyQualifierInfo r6;
        sun.security.x509.CertificatePolicyId $r7;
        java.util.Set $r8, $r10;
        boolean $z0, $z1;
        java.lang.Object $r11;
        byte[] $r12;

        r0 := @this: sun.security.x509.PolicyInformation;
        r1 := @parameter0: sun.security.util.DerOutputStream;
        $r2 = new sun.security.util.DerOutputStream;
        specialinvoke $r2.<sun.security.util.DerOutputStream: void <init>()>();
        r3 = $r2;
        $r7 = r0.<sun.security.x509.PolicyInformation: sun.security.x509.CertificatePolicyId policyIdentifier>;
        virtualinvoke $r7.<sun.security.x509.CertificatePolicyId: void encode(sun.security.util.DerOutputStream)>(r3);
        $r8 = r0.<sun.security.x509.PolicyInformation: java.util.Set policyQualifiers>;
        $z0 = interfaceinvoke $r8.<java.util.Set: boolean isEmpty()>();
        if $z0 != 0 goto label2;

        $r9 = new sun.security.util.DerOutputStream;
        specialinvoke $r9.<sun.security.util.DerOutputStream: void <init>()>();
        r4 = $r9;
        $r10 = r0.<sun.security.x509.PolicyInformation: java.util.Set policyQualifiers>;
        r5 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label1;

        $r11 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        r6 = (java.security.cert.PolicyQualifierInfo) $r11;
        $r12 = virtualinvoke r6.<java.security.cert.PolicyQualifierInfo: byte[] getEncoded()>();
        virtualinvoke r4.<sun.security.util.DerOutputStream: void write(byte[])>($r12);
        goto label0;

     label1:
        virtualinvoke r3.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>(48, r4);

     label2:
        virtualinvoke r1.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>(48, r3);
        return;
    }
}
