public abstract class java.nio.channels.spi.AbstractSelectableChannel extends java.nio.channels.SelectableChannel
{
    private final java.nio.channels.spi.SelectorProvider provider;
    private java.nio.channels.SelectionKey[] keys;
    private int keyCount;
    private final java.lang.Object keyLock;
    private final java.lang.Object regLock;
    boolean blocking;
    static final boolean $assertionsDisabled;

    protected void <init>(java.nio.channels.spi.SelectorProvider)
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.nio.channels.spi.SelectorProvider r1;
        java.lang.Object $r2, $r3;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;
        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;
        specialinvoke r0.<java.nio.channels.SelectableChannel: void <init>()>();
        r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys> = null;
        r0.<java.nio.channels.spi.AbstractSelectableChannel: int keyCount> = 0;
        $r2 = new java.lang.Object;
        specialinvoke $r2.<java.lang.Object: void <init>()>();
        r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object keyLock> = $r2;
        $r3 = new java.lang.Object;
        specialinvoke $r3.<java.lang.Object: void <init>()>();
        r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object regLock> = $r3;
        r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean blocking> = 1;
        r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.spi.SelectorProvider provider> = r1;
        return;
    }

    public final java.nio.channels.spi.SelectorProvider provider()
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.nio.channels.spi.SelectorProvider $r1;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;
        $r1 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.spi.SelectorProvider provider>;
        return $r1;
    }

    private void addKey(java.nio.channels.SelectionKey)
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.nio.channels.SelectionKey r1, $r9, $r15;
        boolean $z0, $z1;
        int i0, i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9;
        java.nio.channels.SelectionKey[] r2, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r16;
        java.lang.Object $r3;
        java.lang.AssertionError $r4;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;
        r1 := @parameter0: java.nio.channels.SelectionKey;
        $z0 = <java.nio.channels.spi.AbstractSelectableChannel: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r3 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object keyLock>;
        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r3);
        if $z1 != 0 goto label0;

        $r4 = new java.lang.AssertionError;
        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();
        throw $r4;

     label0:
        i0 = 0;
        $r5 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        if $r5 == null goto label3;

        $i2 = r0.<java.nio.channels.spi.AbstractSelectableChannel: int keyCount>;
        $r6 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        $i3 = lengthof $r6;
        if $i2 >= $i3 goto label3;

        i0 = 0;

     label1:
        $r7 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        $i4 = lengthof $r7;
        if i0 >= $i4 goto label7;

        $r8 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        $r9 = $r8[i0];
        if $r9 != null goto label2;

        goto label7;

     label2:
        i0 = i0 + 1;
        goto label1;

     label3:
        $r10 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        if $r10 != null goto label4;

        $r11 = newarray (java.nio.channels.SelectionKey)[3];
        r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys> = $r11;
        goto label7;

     label4:
        $r12 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        $i5 = lengthof $r12;
        i1 = $i5 * 2;
        r2 = newarray (java.nio.channels.SelectionKey)[i1];
        i6 = 0;

     label5:
        $r13 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        $i7 = lengthof $r13;
        if i6 >= $i7 goto label6;

        $r14 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        $r15 = $r14[i6];
        r2[i6] = $r15;
        i6 = i6 + 1;
        goto label5;

     label6:
        r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys> = r2;
        i0 = r0.<java.nio.channels.spi.AbstractSelectableChannel: int keyCount>;

     label7:
        $r16 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        $r16[i0] = r1;
        $i8 = r0.<java.nio.channels.spi.AbstractSelectableChannel: int keyCount>;
        $i9 = $i8 + 1;
        r0.<java.nio.channels.spi.AbstractSelectableChannel: int keyCount> = $i9;
        return;
    }

    private java.nio.channels.SelectionKey findKey(java.nio.channels.Selector)
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.nio.channels.Selector r1, $r11;
        java.lang.Object r2, $r4;
        int i0, $i1;
        java.lang.Throwable r3, $r14;
        java.nio.channels.SelectionKey[] $r5, $r6, $r7, $r9, $r12;
        null_type $n0, $n1;
        java.nio.channels.SelectionKey $r8, $r10, $r13;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;
        r1 := @parameter0: java.nio.channels.Selector;
        $r4 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object keyLock>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        if $r5 != null goto label2;

        $n0 = null;
        exitmonitor r2;

     label1:
        return $n0;

     label2:
        i0 = 0;

     label3:
        $r6 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        $i1 = lengthof $r6;
        if i0 >= $i1 goto label6;

        $r7 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        $r8 = $r7[i0];
        if $r8 == null goto label5;

        $r9 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        $r10 = $r9[i0];
        $r11 = virtualinvoke $r10.<java.nio.channels.SelectionKey: java.nio.channels.Selector selector()>();
        if $r11 != r1 goto label5;

        $r12 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        $r13 = $r12[i0];
        exitmonitor r2;

     label4:
        return $r13;

     label5:
        i0 = i0 + 1;
        goto label3;

     label6:
        $n1 = null;
        exitmonitor r2;

     label7:
        return $n1;

     label8:
        $r14 := @caughtexception;

     label9:
        r3 = $r14;
        exitmonitor r2;

     label10:
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label8;
        catch java.lang.Throwable from label2 to label4 with label8;
        catch java.lang.Throwable from label5 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    void removeKey(java.nio.channels.SelectionKey)
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.nio.channels.SelectionKey r1, $r7;
        java.lang.Object r2, $r4;
        int i0, $i1, $i2, $i3;
        java.lang.Throwable r3, $r11;
        java.nio.channels.SelectionKey[] $r5, $r6, $r8;
        java.nio.channels.spi.AbstractSelectionKey $r10;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;
        r1 := @parameter0: java.nio.channels.SelectionKey;
        $r4 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object keyLock>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        i0 = 0;

     label1:
        $r5 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        $i1 = lengthof $r5;
        if i0 >= $i1 goto label3;

        $r6 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        $r7 = $r6[i0];
        if $r7 != r1 goto label2;

        $r8 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        $r8[i0] = null;
        $i2 = r0.<java.nio.channels.spi.AbstractSelectableChannel: int keyCount>;
        $i3 = $i2 - 1;
        r0.<java.nio.channels.spi.AbstractSelectableChannel: int keyCount> = $i3;

     label2:
        i0 = i0 + 1;
        goto label1;

     label3:
        $r10 = (java.nio.channels.spi.AbstractSelectionKey) r1;
        virtualinvoke $r10.<java.nio.channels.spi.AbstractSelectionKey: void invalidate()>();
        exitmonitor r2;

     label4:
        goto label8;

     label5:
        $r11 := @caughtexception;

     label6:
        r3 = $r11;
        exitmonitor r2;

     label7:
        throw r3;

     label8:
        return;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private boolean haveValidKeys()
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.lang.Object r1, $r3;
        int i0, $i1, $i2;
        java.lang.Throwable r2, $r9;
        boolean $z0, $z1, $z2, $z3;
        java.nio.channels.SelectionKey[] $r4, $r5, $r7;
        java.nio.channels.SelectionKey $r6, $r8;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;
        $r3 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object keyLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $i1 = r0.<java.nio.channels.spi.AbstractSelectableChannel: int keyCount>;
        if $i1 != 0 goto label2;

        $z0 = 0;
        exitmonitor r1;

     label1:
        return $z0;

     label2:
        i0 = 0;

     label3:
        $r4 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        $i2 = lengthof $r4;
        if i0 >= $i2 goto label6;

        $r5 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        $r6 = $r5[i0];
        if $r6 == null goto label5;

        $r7 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        $r8 = $r7[i0];
        $z1 = virtualinvoke $r8.<java.nio.channels.SelectionKey: boolean isValid()>();
        if $z1 == 0 goto label5;

        $z2 = 1;
        exitmonitor r1;

     label4:
        return $z2;

     label5:
        i0 = i0 + 1;
        goto label3;

     label6:
        $z3 = 0;
        exitmonitor r1;

     label7:
        return $z3;

     label8:
        $r9 := @caughtexception;

     label9:
        r2 = $r9;
        exitmonitor r1;

     label10:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label8;
        catch java.lang.Throwable from label2 to label4 with label8;
        catch java.lang.Throwable from label5 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    public final boolean isRegistered()
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;
        boolean $z0;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;
        $r3 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object keyLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $i0 = r0.<java.nio.channels.spi.AbstractSelectableChannel: int keyCount>;
        if $i0 == 0 goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        exitmonitor r1;

     label3:
        return $z0;

     label4:
        $r4 := @caughtexception;

     label5:
        r2 = $r4;
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public final java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.nio.channels.Selector r1;
        java.nio.channels.SelectionKey $r2;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;
        r1 := @parameter0: java.nio.channels.Selector;
        $r2 = specialinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey findKey(java.nio.channels.Selector)>(r1);
        return $r2;
    }

    public final java.nio.channels.SelectionKey register(java.nio.channels.Selector, int, java.lang.Object) throws java.nio.channels.ClosedChannelException
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.nio.channels.Selector r1;
        int i0, $i1, $i2, $i3;
        java.lang.Object r2, r3, r5, $r8, $r14;
        java.nio.channels.SelectionKey r4;
        java.lang.Throwable r6, r7, $r17, $r19;
        boolean $z0, $z1, $z2;
        java.nio.channels.ClosedChannelException $r9, $r15;
        java.lang.IllegalArgumentException $r10;
        java.nio.channels.IllegalBlockingModeException $r11;
        java.nio.channels.spi.AbstractSelector $r16;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;
        r1 := @parameter0: java.nio.channels.Selector;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.Object;
        $r8 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object regLock>;
        r3 = $r8;
        entermonitor $r8;

     label0:
        $z0 = virtualinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isOpen()>();
        if $z0 != 0 goto label1;

        $r9 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r9.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r9;

     label1:
        $i1 = virtualinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: int validOps()>();
        $i2 = $i1 ^ -1;
        $i3 = i0 & $i2;
        if $i3 == 0 goto label2;

        $r10 = new java.lang.IllegalArgumentException;
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r10;

     label2:
        $z1 = r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean blocking>;
        if $z1 == 0 goto label3;

        $r11 = new java.nio.channels.IllegalBlockingModeException;
        specialinvoke $r11.<java.nio.channels.IllegalBlockingModeException: void <init>()>();
        throw $r11;

     label3:
        r4 = specialinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey findKey(java.nio.channels.Selector)>(r1);
        if r4 == null goto label4;

        virtualinvoke r4.<java.nio.channels.SelectionKey: java.nio.channels.SelectionKey interestOps(int)>(i0);
        virtualinvoke r4.<java.nio.channels.SelectionKey: java.lang.Object attach(java.lang.Object)>(r2);

     label4:
        if r4 != null goto label11;

        $r14 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object keyLock>;
        r5 = $r14;
        entermonitor $r14;

     label5:
        $z2 = virtualinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isOpen()>();
        if $z2 != 0 goto label6;

        $r15 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r15.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r15;

     label6:
        $r16 = (java.nio.channels.spi.AbstractSelector) r1;
        r4 = virtualinvoke $r16.<java.nio.channels.spi.AbstractSelector: java.nio.channels.SelectionKey register(java.nio.channels.spi.AbstractSelectableChannel,int,java.lang.Object)>(r0, i0, r2);
        specialinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: void addKey(java.nio.channels.SelectionKey)>(r4);
        exitmonitor r5;

     label7:
        goto label11;

     label8:
        $r17 := @caughtexception;

     label9:
        r6 = $r17;
        exitmonitor r5;

     label10:
        throw r6;

     label11:
        exitmonitor r3;

     label12:
        return r4;

     label13:
        $r19 := @caughtexception;

     label14:
        r7 = $r19;
        exitmonitor r3;

     label15:
        throw r7;

        catch java.lang.Throwable from label5 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
        catch java.lang.Throwable from label0 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    protected final void implCloseChannel() throws java.io.IOException
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.lang.Object r1, $r4;
        int i0, i1, $i2;
        java.nio.channels.SelectionKey r2;
        java.lang.Throwable r3, $r8;
        java.nio.channels.SelectionKey[] $r5, $r6, $r7;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;
        virtualinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: void implCloseSelectableChannel()>();
        $r4 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object keyLock>;
        r1 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        if $r5 != null goto label1;

        $i2 = 0;
        goto label2;

     label1:
        $r6 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        $i2 = lengthof $r6;

     label2:
        i0 = $i2;
        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        $r7 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey[] keys>;
        r2 = $r7[i1];
        if r2 == null goto label4;

        virtualinvoke r2.<java.nio.channels.SelectionKey: void cancel()>();

     label4:
        i1 = i1 + 1;
        goto label3;

     label5:
        exitmonitor r1;

     label6:
        goto label10;

     label7:
        $r8 := @caughtexception;

     label8:
        r3 = $r8;
        exitmonitor r1;

     label9:
        throw r3;

     label10:
        return;

        catch java.lang.Throwable from label0 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    protected abstract void implCloseSelectableChannel() throws java.io.IOException;

    public final boolean isBlocking()
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;
        $r3 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object regLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z0 = r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean blocking>;
        exitmonitor r1;

     label1:
        return $z0;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public final java.lang.Object blockingLock()
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.lang.Object $r1;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;
        $r1 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object regLock>;
        return $r1;
    }

    public final java.nio.channels.SelectableChannel configureBlocking(boolean) throws java.io.IOException
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r7;
        java.nio.channels.ClosedChannelException $r4;
        java.nio.channels.IllegalBlockingModeException $r6;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;
        z0 := @parameter0: boolean;
        $r3 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object regLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z1 = virtualinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isOpen()>();
        if $z1 != 0 goto label1;

        $r4 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r4.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r4;

     label1:
        $z2 = r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean blocking>;
        if $z2 != z0 goto label3;

        exitmonitor r1;

     label2:
        return r0;

     label3:
        if z0 == 0 goto label4;

        $z3 = specialinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean haveValidKeys()>();
        if $z3 == 0 goto label4;

        $r6 = new java.nio.channels.IllegalBlockingModeException;
        specialinvoke $r6.<java.nio.channels.IllegalBlockingModeException: void <init>()>();
        throw $r6;

     label4:
        virtualinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: void implConfigureBlocking(boolean)>(z0);
        r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean blocking> = z0;
        exitmonitor r1;

     label5:
        goto label9;

     label6:
        $r7 := @caughtexception;

     label7:
        r2 = $r7;
        exitmonitor r1;

     label8:
        throw r2;

     label9:
        return r0;

        catch java.lang.Throwable from label0 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    protected abstract void implConfigureBlocking(boolean) throws java.io.IOException;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/nio/channels/spi/AbstractSelectableChannel";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.nio.channels.spi.AbstractSelectableChannel: boolean $assertionsDisabled> = $z1;
        return;
    }
}
