final class java.lang.reflect.Proxy$ProxyClassFactory extends java.lang.Object implements java.lang.reflect.WeakCache$BiFunction
{
    private static final java.lang.String proxyClassNamePrefix;
    private static final java.util.concurrent.atomic.AtomicLong nextUniqueNumber;

    private void <init>()
    {
        java.lang.reflect.Proxy$ProxyClassFactory r0;

        r0 := @this: java.lang.reflect.Proxy$ProxyClassFactory;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public java.lang.Class apply(java.lang.ClassLoader, java.lang.Class[])
    {
        java.lang.reflect.Proxy$ProxyClassFactory r0;
        java.lang.ClassLoader r1;
        java.lang.Class[] r2, r5, r33;
        java.util.IdentityHashMap $r3, r4;
        int i0, i1, i2, $i3, i4, i5, i6, $i7, $i9;
        java.lang.Class r6, r7, r34, $r44;
        java.lang.ClassNotFoundException r8, $r12;
        java.lang.String r9, r10, $r11, $r17, $r20, $r23, $r29, $r31, r32, $r35, r42, $r48;
        java.lang.IllegalArgumentException $r13, $r18, $r26, $r36, $r47;
        java.lang.StringBuilder $r14, $r15, $r16, $r19, $r21, $r22, $r27, $r28, $r30, $r38, $r39, $r40, $r41;
        boolean $z0, $z1, $z2;
        java.lang.Boolean $r24;
        java.lang.Object $r25;
        java.util.concurrent.atomic.AtomicLong $r37;
        long l8;
        byte[] r43;
        java.lang.ClassFormatError $r45, r46;

        r0 := @this: java.lang.reflect.Proxy$ProxyClassFactory;
        r1 := @parameter0: java.lang.ClassLoader;
        r2 := @parameter1: java.lang.Class[];
        $r3 = new java.util.IdentityHashMap;
        $i3 = lengthof r2;
        specialinvoke $r3.<java.util.IdentityHashMap: void <init>(int)>($i3);
        r4 = $r3;
        r5 = r2;
        i0 = lengthof r5;
        i1 = 0;

     label0:
        if i1 >= i0 goto label8;

        r6 = r5[i1];
        r7 = null;

     label1:
        $r11 = virtualinvoke r6.<java.lang.Class: java.lang.String getName()>();
        r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r11, 0, r1);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;
        r8 = $r12;

     label4:
        if r7 == r6 goto label5;

        $r13 = new java.lang.IllegalArgumentException;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not visible from class loader");
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);
        throw $r13;

     label5:
        $z0 = virtualinvoke r7.<java.lang.Class: boolean isInterface()>();
        if $z0 != 0 goto label6;

        $r18 = new java.lang.IllegalArgumentException;
        $r19 = new java.lang.StringBuilder;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
        $r20 = virtualinvoke r7.<java.lang.Class: java.lang.String getName()>();
        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not an interface");
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);
        throw $r18;

     label6:
        $r24 = <java.lang.Boolean: java.lang.Boolean TRUE>;
        $r25 = interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r24);
        if $r25 == null goto label7;

        $r26 = new java.lang.IllegalArgumentException;
        $r27 = new java.lang.StringBuilder;
        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("repeated interface: ");
        $r29 = virtualinvoke r7.<java.lang.Class: java.lang.String getName()>();
        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r31);
        throw $r26;

     label7:
        i1 = i1 + 1;
        goto label0;

     label8:
        r32 = null;
        r33 = r2;
        i4 = lengthof r33;
        i5 = 0;

     label9:
        if i5 >= i4 goto label14;

        r34 = r33[i5];
        i6 = virtualinvoke r34.<java.lang.Class: int getModifiers()>();
        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(i6);
        if $z1 != 0 goto label13;

        r9 = virtualinvoke r34.<java.lang.Class: java.lang.String getName()>();
        i2 = virtualinvoke r9.<java.lang.String: int lastIndexOf(int)>(46);
        if i2 != -1 goto label10;

        $r35 = "";
        goto label11;

     label10:
        $i7 = i2 + 1;
        $r35 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, $i7);

     label11:
        r10 = $r35;
        if r32 != null goto label12;

        r32 = r10;
        goto label13;

     label12:
        $z2 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>(r32);
        if $z2 != 0 goto label13;

        $r36 = new java.lang.IllegalArgumentException;
        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("non-public interfaces from different packages");
        throw $r36;

     label13:
        i5 = i5 + 1;
        goto label9;

     label14:
        if r32 != null goto label15;

        r32 = "com.sun.proxy.";

     label15:
        $r37 = <java.lang.reflect.Proxy$ProxyClassFactory: java.util.concurrent.atomic.AtomicLong nextUniqueNumber>;
        l8 = virtualinvoke $r37.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();
        $r38 = new java.lang.StringBuilder;
        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();
        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);
        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$Proxy");
        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l8);
        r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();
        r43 = staticinvoke <sun.misc.ProxyGenerator: byte[] generateProxyClass(java.lang.String,java.lang.Class[])>(r42, r2);

     label16:
        $i9 = lengthof r43;
        $r44 = staticinvoke <java.lang.reflect.Proxy: java.lang.Class access$300(java.lang.ClassLoader,java.lang.String,byte[],int,int)>(r1, r42, r43, 0, $i9);

     label17:
        return $r44;

     label18:
        $r45 := @caughtexception;
        r46 = $r45;
        $r47 = new java.lang.IllegalArgumentException;
        $r48 = virtualinvoke r46.<java.lang.ClassFormatError: java.lang.String toString()>();
        specialinvoke $r47.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r48);
        throw $r47;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.ClassFormatError from label16 to label17 with label18;
    }

    public volatile java.lang.Object apply(java.lang.Object, java.lang.Object)
    {
        java.lang.reflect.Proxy$ProxyClassFactory r0;
        java.lang.Object r1, r2;
        java.lang.ClassLoader $r3;
        java.lang.Class[] $r4;
        java.lang.Class $r5;

        r0 := @this: java.lang.reflect.Proxy$ProxyClassFactory;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r3 = (java.lang.ClassLoader) r1;
        $r4 = (java.lang.Class[]) r2;
        $r5 = virtualinvoke r0.<java.lang.reflect.Proxy$ProxyClassFactory: java.lang.Class apply(java.lang.ClassLoader,java.lang.Class[])>($r3, $r4);
        return $r5;
    }

    void <init>(java.lang.reflect.Proxy$1)
    {
        java.lang.reflect.Proxy$ProxyClassFactory r0;
        java.lang.reflect.Proxy$1 r1;

        r0 := @this: java.lang.reflect.Proxy$ProxyClassFactory;
        r1 := @parameter0: java.lang.reflect.Proxy$1;
        specialinvoke r0.<java.lang.reflect.Proxy$ProxyClassFactory: void <init>()>();
        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicLong $r0;

        $r0 = new java.util.concurrent.atomic.AtomicLong;
        specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
        <java.lang.reflect.Proxy$ProxyClassFactory: java.util.concurrent.atomic.AtomicLong nextUniqueNumber> = $r0;
        return;
    }
}
