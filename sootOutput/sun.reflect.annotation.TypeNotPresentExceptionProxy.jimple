public class sun.reflect.annotation.TypeNotPresentExceptionProxy extends sun.reflect.annotation.ExceptionProxy
{
    private static final long serialVersionUID;
    java.lang.String typeName;
    java.lang.Throwable cause;

    public void <init>(java.lang.String, java.lang.Throwable)
    {
        sun.reflect.annotation.TypeNotPresentExceptionProxy r0;
        java.lang.String r1;
        java.lang.Throwable r2;

        r0 := @this: sun.reflect.annotation.TypeNotPresentExceptionProxy;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Throwable;
        specialinvoke r0.<sun.reflect.annotation.ExceptionProxy: void <init>()>();
        r0.<sun.reflect.annotation.TypeNotPresentExceptionProxy: java.lang.String typeName> = r1;
        r0.<sun.reflect.annotation.TypeNotPresentExceptionProxy: java.lang.Throwable cause> = r2;
        return;
    }

    protected java.lang.RuntimeException generateException()
    {
        sun.reflect.annotation.TypeNotPresentExceptionProxy r0;
        java.lang.TypeNotPresentException $r1;
        java.lang.String $r2;
        java.lang.Throwable $r3;

        r0 := @this: sun.reflect.annotation.TypeNotPresentExceptionProxy;
        $r1 = new java.lang.TypeNotPresentException;
        $r2 = r0.<sun.reflect.annotation.TypeNotPresentExceptionProxy: java.lang.String typeName>;
        $r3 = r0.<sun.reflect.annotation.TypeNotPresentExceptionProxy: java.lang.Throwable cause>;
        specialinvoke $r1.<java.lang.TypeNotPresentException: void <init>(java.lang.String,java.lang.Throwable)>($r2, $r3);
        return $r1;
    }
}
