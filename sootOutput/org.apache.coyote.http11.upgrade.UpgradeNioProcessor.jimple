public class org.apache.coyote.http11.upgrade.UpgradeNioProcessor extends org.apache.coyote.http11.upgrade.UpgradeProcessor
{
    private final org.apache.tomcat.util.net.NioChannel nioChannel;
    private final org.apache.tomcat.util.net.NioSelectorPool pool;
    private final int maxRead;
    private final int maxWrite;

    public void <init>(org.apache.tomcat.util.net.SocketWrapper, org.apache.coyote.http11.upgrade.UpgradeInbound, org.apache.tomcat.util.net.NioSelectorPool)
    {
        org.apache.coyote.http11.upgrade.UpgradeNioProcessor r0;
        org.apache.tomcat.util.net.SocketWrapper r1;
        org.apache.coyote.http11.upgrade.UpgradeInbound r2;
        org.apache.tomcat.util.net.NioSelectorPool r3;
        int $i0, $i2, $i3;
        long $l1;
        java.lang.Object $r4;
        org.apache.tomcat.util.net.NioChannel $r5, $r6, $r9;
        org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler $r7, $r10;
        java.nio.ByteBuffer $r8, $r11;

        r0 := @this: org.apache.coyote.http11.upgrade.UpgradeNioProcessor;
        r1 := @parameter0: org.apache.tomcat.util.net.SocketWrapper;
        r2 := @parameter1: org.apache.coyote.http11.upgrade.UpgradeInbound;
        r3 := @parameter2: org.apache.tomcat.util.net.NioSelectorPool;
        specialinvoke r0.<org.apache.coyote.http11.upgrade.UpgradeProcessor: void <init>(org.apache.coyote.http11.upgrade.UpgradeInbound)>(r2);
        $i0 = interfaceinvoke r2.<org.apache.coyote.http11.upgrade.UpgradeInbound: int getReadTimeout()>();
        $l1 = (long) $i0;
        virtualinvoke r1.<org.apache.tomcat.util.net.SocketWrapper: void setTimeout(long)>($l1);
        $r4 = virtualinvoke r1.<org.apache.tomcat.util.net.SocketWrapper: java.lang.Object getSocket()>();
        $r5 = (org.apache.tomcat.util.net.NioChannel) $r4;
        r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioChannel nioChannel> = $r5;
        r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioSelectorPool pool> = r3;
        $r6 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioChannel nioChannel>;
        $r7 = virtualinvoke $r6.<org.apache.tomcat.util.net.NioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r8 = interfaceinvoke $r7.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getReadBuffer()>();
        $i2 = virtualinvoke $r8.<java.nio.ByteBuffer: int capacity()>();
        r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: int maxRead> = $i2;
        $r9 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioChannel nioChannel>;
        $r10 = virtualinvoke $r9.<org.apache.tomcat.util.net.NioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r11 = interfaceinvoke $r10.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getWriteBuffer()>();
        $i3 = virtualinvoke $r11.<java.nio.ByteBuffer: int capacity()>();
        r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: int maxWrite> = $i3;
        return;
    }

    public void flush() throws java.io.IOException
    {
        org.apache.coyote.http11.upgrade.UpgradeNioProcessor r0;
        org.apache.tomcat.util.net.NioEndpoint$KeyAttachment r1;
        long l0;
        java.nio.channels.Selector r2;
        java.io.IOException r3, $r6, $r8;
        org.apache.tomcat.util.net.NioChannel $r4, $r9;
        java.lang.Object $r5;
        org.apache.tomcat.util.net.NioSelectorPool $r7, $r12, $r13;
        boolean $z0;
        java.lang.Throwable $r10, r11;

        r0 := @this: org.apache.coyote.http11.upgrade.UpgradeNioProcessor;
        $r4 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioChannel nioChannel>;
        $r5 = virtualinvoke $r4.<org.apache.tomcat.util.net.NioChannel: java.lang.Object getAttachment()>();
        r1 = (org.apache.tomcat.util.net.NioEndpoint$KeyAttachment) $r5;
        if r1 != null goto label0;

        $r6 = new java.io.IOException;
        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Key must be cancelled");
        throw $r6;

     label0:
        l0 = virtualinvoke r1.<org.apache.tomcat.util.net.NioEndpoint$KeyAttachment: long getTimeout()>();
        r2 = null;

     label1:
        $r7 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioSelectorPool pool>;
        r2 = virtualinvoke $r7.<org.apache.tomcat.util.net.NioSelectorPool: java.nio.channels.Selector get()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;
        r3 = $r8;

     label4:
        $r9 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioChannel nioChannel>;
        $z0 = virtualinvoke $r9.<org.apache.tomcat.util.net.NioChannel: boolean flush(boolean,java.nio.channels.Selector,long)>(1, r2, l0);
        if $z0 == 0 goto label4;

        goto label7;

     label5:
        $r10 := @caughtexception;
        r11 = $r10;
        if r2 == null goto label6;

        $r12 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioSelectorPool pool>;
        virtualinvoke $r12.<org.apache.tomcat.util.net.NioSelectorPool: void put(java.nio.channels.Selector)>(r2);

     label6:
        throw r11;

     label7:
        if r2 == null goto label8;

        $r13 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioSelectorPool pool>;
        virtualinvoke $r13.<org.apache.tomcat.util.net.NioSelectorPool: void put(java.nio.channels.Selector)>(r2);

     label8:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public void write(int) throws java.io.IOException
    {
        org.apache.coyote.http11.upgrade.UpgradeNioProcessor r0;
        int i0;
        byte[] $r1;
        byte $b1;

        r0 := @this: org.apache.coyote.http11.upgrade.UpgradeNioProcessor;
        i0 := @parameter0: int;
        $r1 = newarray (byte)[1];
        $b1 = (byte) i0;
        $r1[0] = $b1;
        specialinvoke r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: int writeToSocket(byte[],int,int)>($r1, 0, 1);
        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        org.apache.coyote.http11.upgrade.UpgradeNioProcessor r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: org.apache.coyote.http11.upgrade.UpgradeNioProcessor;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = 0;
        goto label1;

     label0:
        $i3 = i0 + i2;
        $i4 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: int maxWrite>;
        $i5 = specialinvoke r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: int writeToSocket(byte[],int,int)>(r1, $i3, $i4);
        i2 = i2 + $i5;

     label1:
        $i6 = i1 - i2;
        $i7 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: int maxWrite>;
        if $i6 > $i7 goto label0;

        $i8 = i0 + i2;
        $i9 = i1 - i2;
        specialinvoke r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: int writeToSocket(byte[],int,int)>(r1, $i8, $i9);
        return;
    }

    public int read() throws java.io.IOException
    {
        org.apache.coyote.http11.upgrade.UpgradeNioProcessor r0;
        byte[] r1;
        int i0;
        byte $b1;
        short $s2;

        r0 := @this: org.apache.coyote.http11.upgrade.UpgradeNioProcessor;
        r1 = newarray (byte)[1];
        i0 = specialinvoke r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: int readSocket(boolean,byte[],int,int)>(1, r1, 0, 1);
        if i0 != -1 goto label0;

        return -1;

     label0:
        $b1 = r1[0];
        $s2 = $b1 & 255;
        return $s2;
    }

    public int read(boolean, byte[], int, int) throws java.io.IOException
    {
        org.apache.coyote.http11.upgrade.UpgradeNioProcessor r0;
        boolean z0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.coyote.http11.upgrade.UpgradeNioProcessor;
        z0 := @parameter0: boolean;
        r1 := @parameter1: byte[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        $i2 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: int maxRead>;
        if i1 <= $i2 goto label0;

        $i3 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: int maxRead>;
        $i4 = specialinvoke r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: int readSocket(boolean,byte[],int,int)>(z0, r1, i0, $i3);
        return $i4;

     label0:
        $i5 = specialinvoke r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: int readSocket(boolean,byte[],int,int)>(z0, r1, i0, i1);
        return $i5;
    }

    private int readSocket(boolean, byte[], int, int) throws java.io.IOException
    {
        org.apache.coyote.http11.upgrade.UpgradeNioProcessor r0;
        boolean z0;
        byte[] r1;
        int i0, i1, i2, i3, i4, i5, $i6;
        java.nio.ByteBuffer r2;
        org.apache.tomcat.util.net.NioChannel $r3;
        org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler $r4;
        java.io.EOFException $r14;
        org.apache.tomcat.util.res.StringManager $r15;
        java.lang.String $r16;

        r0 := @this: org.apache.coyote.http11.upgrade.UpgradeNioProcessor;
        z0 := @parameter0: boolean;
        r1 := @parameter1: byte[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        $r3 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioChannel nioChannel>;
        $r4 = virtualinvoke $r3.<org.apache.tomcat.util.net.NioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        r2 = interfaceinvoke $r4.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getReadBuffer()>();
        i2 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();
        if i2 < i1 goto label0;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, i0, i1);
        return i1;

     label0:
        i3 = i1;
        i4 = i0;
        if i2 <= 0 goto label1;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, i0, i2);
        i3 = i3 - i2;
        i4 = i4 + i2;

     label1:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();
        i5 = specialinvoke r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: int fillReadBuffer(boolean)>(z0);
        if i5 <= 0 goto label3;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i5);
        if i5 <= i3 goto label2;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, i4, i3);
        i3 = 0;
        goto label5;

     label2:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, i4, i5);
        i3 = i3 - i5;
        goto label5;

     label3:
        if i5 != 0 goto label4;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i5);
        goto label5;

     label4:
        if i5 != -1 goto label5;

        $r14 = new java.io.EOFException;
        $r15 = <org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.res.StringManager sm>;
        $r16 = virtualinvoke $r15.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("nio.eof.error");
        specialinvoke $r14.<java.io.EOFException: void <init>(java.lang.String)>($r16);
        throw $r14;

     label5:
        $i6 = i1 - i3;
        return $i6;
    }

    private int fillReadBuffer(boolean) throws java.io.IOException
    {
        org.apache.coyote.http11.upgrade.UpgradeNioProcessor r0;
        boolean z0;
        java.nio.channels.Selector r1;
        java.io.IOException r2, $r5, $r9;
        int i0;
        java.lang.Throwable r3, $r18;
        org.apache.tomcat.util.net.NioSelectorPool $r4, $r10, $r17, $r19, $r20;
        org.apache.tomcat.util.net.NioChannel $r6, $r11, $r14, $r21, $r22;
        java.lang.Object $r7;
        org.apache.tomcat.util.net.NioEndpoint$KeyAttachment r8;
        org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler $r12, $r23;
        java.nio.ByteBuffer $r13, $r24;
        long $l1;
        java.io.EOFException $r15, r16;

        r0 := @this: org.apache.coyote.http11.upgrade.UpgradeNioProcessor;
        z0 := @parameter0: boolean;
        if z0 == 0 goto label11;

        r1 = null;

     label0:
        $r4 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioSelectorPool pool>;
        r1 = virtualinvoke $r4.<org.apache.tomcat.util.net.NioSelectorPool: java.nio.channels.Selector get()>();

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r2 = $r5;

     label3:
        $r6 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioChannel nioChannel>;
        $r7 = virtualinvoke $r6.<org.apache.tomcat.util.net.NioChannel: java.lang.Object getAttachment()>();
        r8 = (org.apache.tomcat.util.net.NioEndpoint$KeyAttachment) $r7;
        if r8 != null goto label4;

        $r9 = new java.io.IOException;
        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Key must be cancelled.");
        throw $r9;

     label4:
        $r10 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioSelectorPool pool>;
        $r11 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioChannel nioChannel>;
        $r12 = virtualinvoke $r11.<org.apache.tomcat.util.net.NioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r13 = interfaceinvoke $r12.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getReadBuffer()>();
        $r14 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioChannel nioChannel>;
        $l1 = virtualinvoke r8.<org.apache.tomcat.util.net.NioEndpoint$KeyAttachment: long getTimeout()>();
        i0 = virtualinvoke $r10.<org.apache.tomcat.util.net.NioSelectorPool: int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long)>($r13, $r14, r1, $l1);

     label5:
        goto label10;

     label6:
        $r15 := @caughtexception;
        r16 = $r15;
        i0 = -1;

     label7:
        if r1 == null goto label12;

        $r17 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioSelectorPool pool>;
        virtualinvoke $r17.<org.apache.tomcat.util.net.NioSelectorPool: void put(java.nio.channels.Selector)>(r1);
        goto label12;

     label8:
        $r18 := @caughtexception;
        r3 = $r18;
        if r1 == null goto label9;

        $r19 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioSelectorPool pool>;
        virtualinvoke $r19.<org.apache.tomcat.util.net.NioSelectorPool: void put(java.nio.channels.Selector)>(r1);

     label9:
        throw r3;

     label10:
        if r1 == null goto label12;

        $r20 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioSelectorPool pool>;
        virtualinvoke $r20.<org.apache.tomcat.util.net.NioSelectorPool: void put(java.nio.channels.Selector)>(r1);
        goto label12;

     label11:
        $r21 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioChannel nioChannel>;
        $r22 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioChannel nioChannel>;
        $r23 = virtualinvoke $r22.<org.apache.tomcat.util.net.NioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r24 = interfaceinvoke $r23.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getReadBuffer()>();
        i0 = virtualinvoke $r21.<org.apache.tomcat.util.net.NioChannel: int read(java.nio.ByteBuffer)>($r24);

     label12:
        return i0;

        catch java.io.IOException from label0 to label1 with label2;
        catch java.io.EOFException from label3 to label5 with label6;
        catch java.lang.Throwable from label3 to label7 with label8;
    }

    private synchronized int writeToSocket(byte[], int, int) throws java.io.IOException
    {
        org.apache.coyote.http11.upgrade.UpgradeNioProcessor r0;
        byte[] r1;
        int i0, i1, i3;
        boolean z0;
        org.apache.tomcat.util.net.NioEndpoint$KeyAttachment r2;
        long l2;
        java.nio.channels.Selector r3;
        java.io.IOException r4, $r19, $r21;
        org.apache.tomcat.util.net.NioChannel $r5, $r9, $r13, $r17, $r23, $r26;
        org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler $r6, $r10, $r14, $r24;
        java.nio.ByteBuffer $r7, $r11, $r15, $r25;
        java.lang.Object $r18;
        org.apache.tomcat.util.net.NioSelectorPool $r20, $r22, $r29, $r30;
        java.lang.Throwable $r27, r28;

        r0 := @this: org.apache.coyote.http11.upgrade.UpgradeNioProcessor;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r5 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioChannel nioChannel>;
        $r6 = virtualinvoke $r5.<org.apache.tomcat.util.net.NioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r7 = interfaceinvoke $r6.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getWriteBuffer()>();
        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer clear()>();
        $r9 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioChannel nioChannel>;
        $r10 = virtualinvoke $r9.<org.apache.tomcat.util.net.NioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r11 = interfaceinvoke $r10.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getWriteBuffer()>();
        virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r1, i0, i1);
        $r13 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioChannel nioChannel>;
        $r14 = virtualinvoke $r13.<org.apache.tomcat.util.net.NioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r15 = interfaceinvoke $r14.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getWriteBuffer()>();
        virtualinvoke $r15.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        z0 = 0;
        $r17 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioChannel nioChannel>;
        $r18 = virtualinvoke $r17.<org.apache.tomcat.util.net.NioChannel: java.lang.Object getAttachment()>();
        r2 = (org.apache.tomcat.util.net.NioEndpoint$KeyAttachment) $r18;
        if r2 != null goto label0;

        $r19 = new java.io.IOException;
        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>("Key must be cancelled");
        throw $r19;

     label0:
        l2 = virtualinvoke r2.<org.apache.tomcat.util.net.NioEndpoint$KeyAttachment: long getTimeout()>();
        r3 = null;

     label1:
        $r20 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioSelectorPool pool>;
        r3 = virtualinvoke $r20.<org.apache.tomcat.util.net.NioSelectorPool: java.nio.channels.Selector get()>();

     label2:
        goto label4;

     label3:
        $r21 := @caughtexception;
        r4 = $r21;

     label4:
        $r22 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioSelectorPool pool>;
        $r23 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioChannel nioChannel>;
        $r24 = virtualinvoke $r23.<org.apache.tomcat.util.net.NioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r25 = interfaceinvoke $r24.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getWriteBuffer()>();
        $r26 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioChannel nioChannel>;
        i3 = virtualinvoke $r22.<org.apache.tomcat.util.net.NioSelectorPool: int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)>($r25, $r26, r3, l2, 1);
        goto label7;

     label5:
        $r27 := @caughtexception;
        r28 = $r27;
        if r3 == null goto label6;

        $r29 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioSelectorPool pool>;
        virtualinvoke $r29.<org.apache.tomcat.util.net.NioSelectorPool: void put(java.nio.channels.Selector)>(r3);

     label6:
        throw r28;

     label7:
        if r3 == null goto label8;

        $r30 = r0.<org.apache.coyote.http11.upgrade.UpgradeNioProcessor: org.apache.tomcat.util.net.NioSelectorPool pool>;
        virtualinvoke $r30.<org.apache.tomcat.util.net.NioSelectorPool: void put(java.nio.channels.Selector)>(r3);

     label8:
        return i3;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }
}
