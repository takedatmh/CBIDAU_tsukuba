public class java.text.AttributedString extends java.lang.Object
{
    private static final int ARRAY_SIZE_INCREMENT;
    java.lang.String text;
    int runArraySize;
    int runCount;
    int[] runStarts;
    java.util.Vector[] runAttributes;
    java.util.Vector[] runAttributeValues;

    void <init>(java.text.AttributedCharacterIterator[])
    {
        java.text.AttributedString r0;
        java.text.AttributedCharacterIterator[] r1;
        java.lang.StringBuffer r2, $r7;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, i8, $i9, $i11, $i12, $i13;
        java.util.Map r3, r5;
        java.text.AttributedCharacterIterator r4, $r8;
        java.lang.NullPointerException $r6;
        java.lang.String $r9, $r10;
        boolean $z0;

        r0 := @this: java.text.AttributedString;
        r1 := @parameter0: java.text.AttributedCharacterIterator[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r1 != null goto label0;

        $r6 = new java.lang.NullPointerException;
        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("Iterators must not be null");
        throw $r6;

     label0:
        $i5 = lengthof r1;
        if $i5 != 0 goto label1;

        r0.<java.text.AttributedString: java.lang.String text> = "";
        goto label8;

     label1:
        $r7 = new java.lang.StringBuffer;
        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();
        r2 = $r7;
        i0 = 0;

     label2:
        $i6 = lengthof r1;
        if i0 >= $i6 goto label3;

        $r8 = r1[i0];
        specialinvoke r0.<java.text.AttributedString: void appendContents(java.lang.StringBuffer,java.text.CharacterIterator)>(r2, $r8);
        i0 = i0 + 1;
        goto label2;

     label3:
        $r9 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        r0.<java.text.AttributedString: java.lang.String text> = $r9;
        $r10 = r0.<java.text.AttributedString: java.lang.String text>;
        $i7 = virtualinvoke $r10.<java.lang.String: int length()>();
        if $i7 <= 0 goto label8;

        i8 = 0;
        r3 = null;
        i1 = 0;

     label4:
        $i9 = lengthof r1;
        if i1 >= $i9 goto label8;

        r4 = r1[i1];
        i2 = interfaceinvoke r4.<java.text.AttributedCharacterIterator: int getBeginIndex()>();
        i3 = interfaceinvoke r4.<java.text.AttributedCharacterIterator: int getEndIndex()>();
        i4 = i2;

     label5:
        if i4 >= i3 goto label7;

        interfaceinvoke r4.<java.text.AttributedCharacterIterator: char setIndex(int)>(i4);
        r5 = interfaceinvoke r4.<java.text.AttributedCharacterIterator: java.util.Map getAttributes()>();
        $z0 = staticinvoke <java.text.AttributedString: boolean mapsDiffer(java.util.Map,java.util.Map)>(r3, r5);
        if $z0 == 0 goto label6;

        $i11 = i4 - i2;
        $i12 = $i11 + i8;
        specialinvoke r0.<java.text.AttributedString: void setAttributes(java.util.Map,int)>(r5, $i12);

     label6:
        r3 = r5;
        i4 = interfaceinvoke r4.<java.text.AttributedCharacterIterator: int getRunLimit()>();
        goto label5;

     label7:
        $i13 = i3 - i2;
        i8 = i8 + $i13;
        i1 = i1 + 1;
        goto label4;

     label8:
        return;
    }

    public void <init>(java.lang.String)
    {
        java.text.AttributedString r0;
        java.lang.String r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.text.AttributedString;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        r0.<java.text.AttributedString: java.lang.String text> = r1;
        return;
    }

    public void <init>(java.lang.String, java.util.Map)
    {
        java.text.AttributedString r0;
        java.lang.String r1;
        java.util.Map r2;
        int i0, $i1;
        java.util.Vector r3, r4, $r9, $r10;
        java.util.Iterator r5;
        java.util.Map$Entry r6;
        java.lang.NullPointerException $r7;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r8;
        java.util.Vector[] $r11, $r12;
        java.util.Set $r13;
        java.lang.Object $r14, $r15, $r16;

        r0 := @this: java.text.AttributedString;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.util.Map;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r1 == null goto label0;

        if r2 != null goto label1;

     label0:
        $r7 = new java.lang.NullPointerException;
        specialinvoke $r7.<java.lang.NullPointerException: void <init>()>();
        throw $r7;

     label1:
        r0.<java.text.AttributedString: java.lang.String text> = r1;
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i1 != 0 goto label3;

        $z0 = interfaceinvoke r2.<java.util.Map: boolean isEmpty()>();
        if $z0 == 0 goto label2;

        return;

     label2:
        $r8 = new java.lang.IllegalArgumentException;
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t add attribute to 0-length text");
        throw $r8;

     label3:
        i0 = interfaceinvoke r2.<java.util.Map: int size()>();
        if i0 <= 0 goto label5;

        specialinvoke r0.<java.text.AttributedString: void createRunAttributeDataVectors()>();
        $r9 = new java.util.Vector;
        specialinvoke $r9.<java.util.Vector: void <init>(int)>(i0);
        r3 = $r9;
        $r10 = new java.util.Vector;
        specialinvoke $r10.<java.util.Vector: void <init>(int)>(i0);
        r4 = $r10;
        $r11 = r0.<java.text.AttributedString: java.util.Vector[] runAttributes>;
        $r11[0] = r3;
        $r12 = r0.<java.text.AttributedString: java.util.Vector[] runAttributeValues>;
        $r12[0] = r4;
        $r13 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();
        r5 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label5;

        $r14 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        r6 = (java.util.Map$Entry) $r14;
        $r15 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();
        virtualinvoke r3.<java.util.Vector: void addElement(java.lang.Object)>($r15);
        $r16 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();
        virtualinvoke r4.<java.util.Vector: void addElement(java.lang.Object)>($r16);
        goto label4;

     label5:
        return;
    }

    public void <init>(java.text.AttributedCharacterIterator)
    {
        java.text.AttributedString r0;
        java.text.AttributedCharacterIterator r1;
        int $i0, $i1;

        r0 := @this: java.text.AttributedString;
        r1 := @parameter0: java.text.AttributedCharacterIterator;
        $i0 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: int getBeginIndex()>();
        $i1 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: int getEndIndex()>();
        specialinvoke r0.<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator,int,int,java.text.AttributedCharacterIterator$Attribute[])>(r1, $i0, $i1, null);
        return;
    }

    public void <init>(java.text.AttributedCharacterIterator, int, int)
    {
        java.text.AttributedString r0;
        java.text.AttributedCharacterIterator r1;
        int i0, i1;

        r0 := @this: java.text.AttributedString;
        r1 := @parameter0: java.text.AttributedCharacterIterator;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator,int,int,java.text.AttributedCharacterIterator$Attribute[])>(r1, i0, i1, null);
        return;
    }

    public void <init>(java.text.AttributedCharacterIterator, int, int, java.text.AttributedCharacterIterator$Attribute[])
    {
        java.text.AttributedString r0;
        java.text.AttributedCharacterIterator r1;
        int i0, i1, i2, i3, i5, i6, i7, $i9, $i10, $i12, $i13, $i14, $i15, $i16;
        java.text.AttributedCharacterIterator$Attribute[] r2;
        java.lang.StringBuffer r3, $r8;
        char c4;
        java.text.AttributedCharacterIterator$Attribute r4, $r14;
        java.lang.Object r5, $r17;
        java.lang.NullPointerException $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r10;
        java.util.HashSet $r11, r12;
        java.util.Set $r13, $r15;
        boolean $z3, $z4, $z5;
        java.util.Iterator r16;

        r0 := @this: java.text.AttributedString;
        r1 := @parameter0: java.text.AttributedCharacterIterator;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: java.text.AttributedCharacterIterator$Attribute[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r1 != null goto label0;

        $r6 = new java.lang.NullPointerException;
        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();
        throw $r6;

     label0:
        i2 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: int getBeginIndex()>();
        i3 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: int getEndIndex()>();
        if i0 < i2 goto label1;

        if i1 > i3 goto label1;

        if i0 <= i1 goto label2;

     label1:
        $r7 = new java.lang.IllegalArgumentException;
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid substring range");
        throw $r7;

     label2:
        $r8 = new java.lang.StringBuffer;
        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();
        r3 = $r8;
        interfaceinvoke r1.<java.text.AttributedCharacterIterator: char setIndex(int)>(i0);
        c4 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: char current()>();

     label3:
        $i9 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: int getIndex()>();
        if $i9 >= i1 goto label4;

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c4);
        c4 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: char next()>();
        goto label3;

     label4:
        $r10 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();
        r0.<java.text.AttributedString: java.lang.String text> = $r10;
        if i0 != i1 goto label5;

        return;

     label5:
        $r11 = new java.util.HashSet;
        specialinvoke $r11.<java.util.HashSet: void <init>()>();
        r12 = $r11;
        if r2 != null goto label6;

        $r13 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.util.Set getAllAttributeKeys()>();
        virtualinvoke r12.<java.util.HashSet: boolean addAll(java.util.Collection)>($r13);
        goto label9;

     label6:
        i5 = 0;

     label7:
        $i10 = lengthof r2;
        if i5 >= $i10 goto label8;

        $r14 = r2[i5];
        virtualinvoke r12.<java.util.HashSet: boolean add(java.lang.Object)>($r14);
        i5 = i5 + 1;
        goto label7;

     label8:
        $r15 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.util.Set getAllAttributeKeys()>();
        virtualinvoke r12.<java.util.HashSet: boolean retainAll(java.util.Collection)>($r15);

     label9:
        $z3 = virtualinvoke r12.<java.util.HashSet: boolean isEmpty()>();
        if $z3 == 0 goto label10;

        return;

     label10:
        r16 = virtualinvoke r12.<java.util.HashSet: java.util.Iterator iterator()>();

     label11:
        $z4 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();
        if $z4 == 0 goto label20;

        $r17 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.text.AttributedCharacterIterator$Attribute) $r17;
        interfaceinvoke r1.<java.text.AttributedCharacterIterator: char setIndex(int)>(i2);

     label12:
        $i12 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: int getIndex()>();
        if $i12 >= i1 goto label19;

        i6 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: int getRunStart(java.text.AttributedCharacterIterator$Attribute)>(r4);
        i7 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: int getRunLimit(java.text.AttributedCharacterIterator$Attribute)>(r4);
        r5 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>(r4);
        if r5 == null goto label18;

        $z5 = r5 instanceof java.text.Annotation;
        if $z5 == 0 goto label14;

        if i6 < i0 goto label13;

        if i7 > i1 goto label13;

        $i13 = i6 - i0;
        $i14 = i7 - i0;
        virtualinvoke r0.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>(r4, r5, $i13, $i14);
        goto label18;

     label13:
        if i7 <= i1 goto label18;

        goto label19;

     label14:
        if i6 < i1 goto label15;

        goto label19;

     label15:
        if i7 <= i0 goto label18;

        if i6 >= i0 goto label16;

        i6 = i0;

     label16:
        if i7 <= i1 goto label17;

        i7 = i1;

     label17:
        if i6 == i7 goto label18;

        $i15 = i6 - i0;
        $i16 = i7 - i0;
        virtualinvoke r0.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>(r4, r5, $i15, $i16);

     label18:
        interfaceinvoke r1.<java.text.AttributedCharacterIterator: char setIndex(int)>(i7);
        goto label12;

     label19:
        goto label11;

     label20:
        return;
    }

    public void addAttribute(java.text.AttributedCharacterIterator$Attribute, java.lang.Object)
    {
        java.text.AttributedString r0;
        java.text.AttributedCharacterIterator$Attribute r1;
        java.lang.Object r2;
        int i0;
        java.lang.NullPointerException $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: java.text.AttributedString;
        r1 := @parameter0: java.text.AttributedCharacterIterator$Attribute;
        r2 := @parameter1: java.lang.Object;
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        i0 = virtualinvoke r0.<java.text.AttributedString: int length()>();
        if i0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t add attribute to 0-length text");
        throw $r4;

     label1:
        specialinvoke r0.<java.text.AttributedString: void addAttributeImpl(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>(r1, r2, 0, i0);
        return;
    }

    public void addAttribute(java.text.AttributedCharacterIterator$Attribute, java.lang.Object, int, int)
    {
        java.text.AttributedString r0;
        java.text.AttributedCharacterIterator$Attribute r1;
        java.lang.Object r2;
        int i0, i1, $i2;
        java.lang.NullPointerException $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: java.text.AttributedString;
        r1 := @parameter0: java.text.AttributedCharacterIterator$Attribute;
        r2 := @parameter1: java.lang.Object;
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        if i0 < 0 goto label1;

        $i2 = virtualinvoke r0.<java.text.AttributedString: int length()>();
        if i1 > $i2 goto label1;

        if i0 < i1 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid substring range");
        throw $r4;

     label2:
        specialinvoke r0.<java.text.AttributedString: void addAttributeImpl(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>(r1, r2, i0, i1);
        return;
    }

    public void addAttributes(java.util.Map, int, int)
    {
        java.text.AttributedString r0;
        java.util.Map r1;
        int i0, i1, i2, i3, $i4, $i5;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.NullPointerException $r4;
        java.lang.IllegalArgumentException $r5, $r6;
        boolean $z0, $z1;
        java.util.Set $r7;
        java.lang.Object $r8, $r9, $r11;
        java.text.AttributedCharacterIterator$Attribute $r10;

        r0 := @this: java.text.AttributedString;
        r1 := @parameter0: java.util.Map;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if r1 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label0:
        if i0 < 0 goto label1;

        $i4 = virtualinvoke r0.<java.text.AttributedString: int length()>();
        if i1 > $i4 goto label1;

        if i0 <= i1 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid substring range");
        throw $r5;

     label2:
        if i0 != i1 goto label4;

        $z0 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();
        if $z0 == 0 goto label3;

        return;

     label3:
        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t add attribute to 0-length text");
        throw $r6;

     label4:
        $i5 = r0.<java.text.AttributedString: int runCount>;
        if $i5 != 0 goto label5;

        specialinvoke r0.<java.text.AttributedString: void createRunAttributeDataVectors()>();

     label5:
        i2 = specialinvoke r0.<java.text.AttributedString: int ensureRunBreak(int)>(i0);
        i3 = specialinvoke r0.<java.text.AttributedString: int ensureRunBreak(int)>(i1);
        $r7 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();
        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label7;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.Map$Entry) $r8;
        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r10 = (java.text.AttributedCharacterIterator$Attribute) $r9;
        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();
        specialinvoke r0.<java.text.AttributedString: void addAttributeRunData(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r10, $r11, i2, i3);
        goto label6;

     label7:
        return;
    }

    private synchronized void addAttributeImpl(java.text.AttributedCharacterIterator$Attribute, java.lang.Object, int, int)
    {
        java.text.AttributedString r0;
        java.text.AttributedCharacterIterator$Attribute r1;
        java.lang.Object r2;
        int i0, i1, i2, i3, $i4;

        r0 := @this: java.text.AttributedString;
        r1 := @parameter0: java.text.AttributedCharacterIterator$Attribute;
        r2 := @parameter1: java.lang.Object;
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        $i4 = r0.<java.text.AttributedString: int runCount>;
        if $i4 != 0 goto label0;

        specialinvoke r0.<java.text.AttributedString: void createRunAttributeDataVectors()>();

     label0:
        i2 = specialinvoke r0.<java.text.AttributedString: int ensureRunBreak(int)>(i0);
        i3 = specialinvoke r0.<java.text.AttributedString: int ensureRunBreak(int)>(i1);
        specialinvoke r0.<java.text.AttributedString: void addAttributeRunData(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>(r1, r2, i2, i3);
        return;
    }

    private final void createRunAttributeDataVectors()
    {
        java.text.AttributedString r0;
        int[] r1;
        java.util.Vector[] r2, r3;

        r0 := @this: java.text.AttributedString;
        r1 = newarray (int)[10];
        r2 = newarray (java.util.Vector)[10];
        r3 = newarray (java.util.Vector)[10];
        r0.<java.text.AttributedString: int[] runStarts> = r1;
        r0.<java.text.AttributedString: java.util.Vector[] runAttributes> = r2;
        r0.<java.text.AttributedString: java.util.Vector[] runAttributeValues> = r3;
        r0.<java.text.AttributedString: int runArraySize> = 10;
        r0.<java.text.AttributedString: int runCount> = 1;
        return;
    }

    private final int ensureRunBreak(int)
    {
        java.text.AttributedString r0;
        int i0, $i1;

        r0 := @this: java.text.AttributedString;
        i0 := @parameter0: int;
        $i1 = specialinvoke r0.<java.text.AttributedString: int ensureRunBreak(int,boolean)>(i0, 1);
        return $i1;
    }

    private final int ensureRunBreak(int, boolean)
    {
        java.text.AttributedString r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, $i21, $i22, $i23, $i24;
        boolean z0;
        int[] r1, $r4, $r5, $r6, $r20, $r21, $r28;
        java.util.Vector[] r2, r3, $r7, $r9, $r13, $r15, $r22, $r23, $r25, $r26, $r29, $r30;
        java.util.Vector $r8, $r10, r11, r12, r14, r16, $r24, $r27;
        java.lang.Object $r17, $r18;

        r0 := @this: java.text.AttributedString;
        i0 := @parameter0: int;
        z0 := @parameter1: boolean;
        $i4 = virtualinvoke r0.<java.text.AttributedString: int length()>();
        if i0 != $i4 goto label0;

        $i5 = r0.<java.text.AttributedString: int runCount>;
        return $i5;

     label0:
        i1 = 0;

     label1:
        $i6 = r0.<java.text.AttributedString: int runCount>;
        if i1 >= $i6 goto label2;

        $r4 = r0.<java.text.AttributedString: int[] runStarts>;
        $i7 = $r4[i1];
        if $i7 >= i0 goto label2;

        i1 = i1 + 1;
        goto label1;

     label2:
        $i8 = r0.<java.text.AttributedString: int runCount>;
        if i1 >= $i8 goto label3;

        $r5 = r0.<java.text.AttributedString: int[] runStarts>;
        $i9 = $r5[i1];
        if $i9 != i0 goto label3;

        return i1;

     label3:
        $i10 = r0.<java.text.AttributedString: int runCount>;
        $i11 = r0.<java.text.AttributedString: int runArraySize>;
        if $i10 != $i11 goto label6;

        $i12 = r0.<java.text.AttributedString: int runArraySize>;
        i2 = $i12 + 10;
        r1 = newarray (int)[i2];
        r2 = newarray (java.util.Vector)[i2];
        r3 = newarray (java.util.Vector)[i2];
        i3 = 0;

     label4:
        $i13 = r0.<java.text.AttributedString: int runArraySize>;
        if i3 >= $i13 goto label5;

        $r6 = r0.<java.text.AttributedString: int[] runStarts>;
        $i14 = $r6[i3];
        r1[i3] = $i14;
        $r7 = r0.<java.text.AttributedString: java.util.Vector[] runAttributes>;
        $r8 = $r7[i3];
        r2[i3] = $r8;
        $r9 = r0.<java.text.AttributedString: java.util.Vector[] runAttributeValues>;
        $r10 = $r9[i3];
        r3[i3] = $r10;
        i3 = i3 + 1;
        goto label4;

     label5:
        r0.<java.text.AttributedString: int[] runStarts> = r1;
        r0.<java.text.AttributedString: java.util.Vector[] runAttributes> = r2;
        r0.<java.text.AttributedString: java.util.Vector[] runAttributeValues> = r3;
        r0.<java.text.AttributedString: int runArraySize> = i2;

     label6:
        r11 = null;
        r12 = null;
        if z0 == 0 goto label8;

        $r13 = r0.<java.text.AttributedString: java.util.Vector[] runAttributes>;
        $i15 = i1 - 1;
        r14 = $r13[$i15];
        $r15 = r0.<java.text.AttributedString: java.util.Vector[] runAttributeValues>;
        $i16 = i1 - 1;
        r16 = $r15[$i16];
        if r14 == null goto label7;

        $r17 = virtualinvoke r14.<java.util.Vector: java.lang.Object clone()>();
        r11 = (java.util.Vector) $r17;

     label7:
        if r16 == null goto label8;

        $r18 = virtualinvoke r16.<java.util.Vector: java.lang.Object clone()>();
        r12 = (java.util.Vector) $r18;

     label8:
        $i17 = r0.<java.text.AttributedString: int runCount>;
        $i18 = $i17 + 1;
        r0.<java.text.AttributedString: int runCount> = $i18;
        $i19 = r0.<java.text.AttributedString: int runCount>;
        i20 = $i19 - 1;

     label9:
        if i20 <= i1 goto label10;

        $r20 = r0.<java.text.AttributedString: int[] runStarts>;
        $r21 = r0.<java.text.AttributedString: int[] runStarts>;
        $i21 = i20 - 1;
        $i22 = $r21[$i21];
        $r20[i20] = $i22;
        $r22 = r0.<java.text.AttributedString: java.util.Vector[] runAttributes>;
        $r23 = r0.<java.text.AttributedString: java.util.Vector[] runAttributes>;
        $i23 = i20 - 1;
        $r24 = $r23[$i23];
        $r22[i20] = $r24;
        $r25 = r0.<java.text.AttributedString: java.util.Vector[] runAttributeValues>;
        $r26 = r0.<java.text.AttributedString: java.util.Vector[] runAttributeValues>;
        $i24 = i20 - 1;
        $r27 = $r26[$i24];
        $r25[i20] = $r27;
        i20 = i20 + -1;
        goto label9;

     label10:
        $r28 = r0.<java.text.AttributedString: int[] runStarts>;
        $r28[i1] = i0;
        $r29 = r0.<java.text.AttributedString: java.util.Vector[] runAttributes>;
        $r29[i1] = r11;
        $r30 = r0.<java.text.AttributedString: java.util.Vector[] runAttributeValues>;
        $r30[i1] = r12;
        return i1;
    }

    private void addAttributeRunData(java.text.AttributedCharacterIterator$Attribute, java.lang.Object, int, int)
    {
        java.text.AttributedString r0;
        java.text.AttributedCharacterIterator$Attribute r1;
        java.lang.Object r2;
        int i0, i1, i2, i3, i4;
        java.util.Vector r3, r4, $r6, $r7, $r8, $r12, $r14, $r16, $r18, $r22, $r24, $r26;
        java.util.Vector[] $r5, $r9, $r10, $r11, $r13, $r15, $r17, $r21, $r23, $r25;
        java.lang.Exception $r19, r20;

        r0 := @this: java.text.AttributedString;
        r1 := @parameter0: java.text.AttributedCharacterIterator$Attribute;
        r2 := @parameter1: java.lang.Object;
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        i2 = i0;

     label0:
        if i2 >= i1 goto label9;

        i3 = -1;
        $r5 = r0.<java.text.AttributedString: java.util.Vector[] runAttributes>;
        $r6 = $r5[i2];
        if $r6 != null goto label1;

        $r7 = new java.util.Vector;
        specialinvoke $r7.<java.util.Vector: void <init>()>();
        r3 = $r7;
        $r8 = new java.util.Vector;
        specialinvoke $r8.<java.util.Vector: void <init>()>();
        r4 = $r8;
        $r9 = r0.<java.text.AttributedString: java.util.Vector[] runAttributes>;
        $r9[i2] = r3;
        $r10 = r0.<java.text.AttributedString: java.util.Vector[] runAttributeValues>;
        $r10[i2] = r4;
        goto label2;

     label1:
        $r11 = r0.<java.text.AttributedString: java.util.Vector[] runAttributes>;
        $r12 = $r11[i2];
        i3 = virtualinvoke $r12.<java.util.Vector: int indexOf(java.lang.Object)>(r1);

     label2:
        if i3 != -1 goto label7;

        $r13 = r0.<java.text.AttributedString: java.util.Vector[] runAttributes>;
        $r14 = $r13[i2];
        i4 = virtualinvoke $r14.<java.util.Vector: int size()>();
        $r15 = r0.<java.text.AttributedString: java.util.Vector[] runAttributes>;
        $r16 = $r15[i2];
        virtualinvoke $r16.<java.util.Vector: void addElement(java.lang.Object)>(r1);

     label3:
        $r17 = r0.<java.text.AttributedString: java.util.Vector[] runAttributeValues>;
        $r18 = $r17[i2];
        virtualinvoke $r18.<java.util.Vector: void addElement(java.lang.Object)>(r2);

     label4:
        goto label6;

     label5:
        $r19 := @caughtexception;
        r20 = $r19;
        $r21 = r0.<java.text.AttributedString: java.util.Vector[] runAttributes>;
        $r22 = $r21[i2];
        virtualinvoke $r22.<java.util.Vector: void setSize(int)>(i4);
        $r23 = r0.<java.text.AttributedString: java.util.Vector[] runAttributeValues>;
        $r24 = $r23[i2];
        virtualinvoke $r24.<java.util.Vector: void setSize(int)>(i4);

     label6:
        goto label8;

     label7:
        $r25 = r0.<java.text.AttributedString: java.util.Vector[] runAttributeValues>;
        $r26 = $r25[i2];
        virtualinvoke $r26.<java.util.Vector: java.lang.Object set(int,java.lang.Object)>(i3, r2);

     label8:
        i2 = i2 + 1;
        goto label0;

     label9:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public java.text.AttributedCharacterIterator getIterator()
    {
        java.text.AttributedString r0;
        int $i0;
        java.text.AttributedCharacterIterator $r1;

        r0 := @this: java.text.AttributedString;
        $i0 = virtualinvoke r0.<java.text.AttributedString: int length()>();
        $r1 = virtualinvoke r0.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator$Attribute[],int,int)>(null, 0, $i0);
        return $r1;
    }

    public java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator$Attribute[])
    {
        java.text.AttributedString r0;
        java.text.AttributedCharacterIterator$Attribute[] r1;
        int $i0;
        java.text.AttributedCharacterIterator $r2;

        r0 := @this: java.text.AttributedString;
        r1 := @parameter0: java.text.AttributedCharacterIterator$Attribute[];
        $i0 = virtualinvoke r0.<java.text.AttributedString: int length()>();
        $r2 = virtualinvoke r0.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator$Attribute[],int,int)>(r1, 0, $i0);
        return $r2;
    }

    public java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator$Attribute[], int, int)
    {
        java.text.AttributedString r0;
        java.text.AttributedCharacterIterator$Attribute[] r1;
        int i0, i1;
        java.text.AttributedString$AttributedStringIterator $r2;

        r0 := @this: java.text.AttributedString;
        r1 := @parameter0: java.text.AttributedCharacterIterator$Attribute[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = new java.text.AttributedString$AttributedStringIterator;
        specialinvoke $r2.<java.text.AttributedString$AttributedStringIterator: void <init>(java.text.AttributedString,java.text.AttributedCharacterIterator$Attribute[],int,int)>(r0, r1, i0, i1);
        return $r2;
    }

    int length()
    {
        java.text.AttributedString r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: java.text.AttributedString;
        $r1 = r0.<java.text.AttributedString: java.lang.String text>;
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();
        return $i0;
    }

    private char charAt(int)
    {
        java.text.AttributedString r0;
        int i0;
        java.lang.String $r1;
        char $c1;

        r0 := @this: java.text.AttributedString;
        i0 := @parameter0: int;
        $r1 = r0.<java.text.AttributedString: java.lang.String text>;
        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i0);
        return $c1;
    }

    private synchronized java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute, int)
    {
        java.text.AttributedString r0;
        java.text.AttributedCharacterIterator$Attribute r1;
        int i0, i1;
        java.util.Vector r2, r3;
        java.util.Vector[] $r4, $r5;
        java.lang.Object $r6;

        r0 := @this: java.text.AttributedString;
        r1 := @parameter0: java.text.AttributedCharacterIterator$Attribute;
        i0 := @parameter1: int;
        $r4 = r0.<java.text.AttributedString: java.util.Vector[] runAttributes>;
        r2 = $r4[i0];
        $r5 = r0.<java.text.AttributedString: java.util.Vector[] runAttributeValues>;
        r3 = $r5[i0];
        if r2 != null goto label0;

        return null;

     label0:
        i1 = virtualinvoke r2.<java.util.Vector: int indexOf(java.lang.Object)>(r1);
        if i1 == -1 goto label1;

        $r6 = virtualinvoke r3.<java.util.Vector: java.lang.Object elementAt(int)>(i1);
        return $r6;

     label1:
        return null;
    }

    private java.lang.Object getAttributeCheckRange(java.text.AttributedCharacterIterator$Attribute, int, int, int)
    {
        java.text.AttributedString r0;
        java.text.AttributedCharacterIterator$Attribute r1;
        int i0, i1, i2, i3, i4, i5, $i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.lang.Object r2, $r4, $r7;
        boolean $z0, $z1, $z2;
        int[] $r3, $r5, $r6, $r8;

        r0 := @this: java.text.AttributedString;
        r1 := @parameter0: java.text.AttributedCharacterIterator$Attribute;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        r2 = specialinvoke r0.<java.text.AttributedString: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute,int)>(r1, i0);
        $z0 = r2 instanceof java.text.Annotation;
        if $z0 == 0 goto label9;

        if i1 <= 0 goto label2;

        i3 = i0;
        $r3 = r0.<java.text.AttributedString: int[] runStarts>;
        i4 = $r3[i3];

     label0:
        if i4 < i1 goto label1;

        $i6 = i3 - 1;
        $r4 = specialinvoke r0.<java.text.AttributedString: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute,int)>(r1, $i6);
        $z1 = staticinvoke <java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>(r2, $r4);
        if $z1 == 0 goto label1;

        i3 = i3 + -1;
        $r5 = r0.<java.text.AttributedString: int[] runStarts>;
        i4 = $r5[i3];
        goto label0;

     label1:
        if i4 >= i1 goto label2;

        return null;

     label2:
        i7 = virtualinvoke r0.<java.text.AttributedString: int length()>();
        if i2 >= i7 goto label9;

        i8 = i0;
        $i9 = r0.<java.text.AttributedString: int runCount>;
        $i10 = $i9 - 1;
        if i8 >= $i10 goto label3;

        $r6 = r0.<java.text.AttributedString: int[] runStarts>;
        $i11 = i8 + 1;
        $i12 = $r6[$i11];
        goto label4;

     label3:
        $i12 = i7;

     label4:
        i5 = $i12;

     label5:
        if i5 > i2 goto label8;

        $i13 = i8 + 1;
        $r7 = specialinvoke r0.<java.text.AttributedString: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute,int)>(r1, $i13);
        $z2 = staticinvoke <java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>(r2, $r7);
        if $z2 == 0 goto label8;

        i8 = i8 + 1;
        $i14 = r0.<java.text.AttributedString: int runCount>;
        $i15 = $i14 - 1;
        if i8 >= $i15 goto label6;

        $r8 = r0.<java.text.AttributedString: int[] runStarts>;
        $i16 = i8 + 1;
        $i17 = $r8[$i16];
        goto label7;

     label6:
        $i17 = i7;

     label7:
        i5 = $i17;
        goto label5;

     label8:
        if i5 <= i2 goto label9;

        return null;

     label9:
        return r2;
    }

    private boolean attributeValuesMatch(java.util.Set, int, int)
    {
        java.text.AttributedString r0;
        java.util.Set r1;
        int i0, i1;
        java.util.Iterator r2;
        java.text.AttributedCharacterIterator$Attribute r3;
        boolean $z0, $z1;
        java.lang.Object $r4, $r5, $r6;

        r0 := @this: java.text.AttributedString;
        r1 := @parameter0: java.util.Set;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.text.AttributedCharacterIterator$Attribute) $r4;
        $r5 = specialinvoke r0.<java.text.AttributedString: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute,int)>(r3, i0);
        $r6 = specialinvoke r0.<java.text.AttributedString: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute,int)>(r3, i1);
        $z1 = staticinvoke <java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>($r5, $r6);
        if $z1 != 0 goto label1;

        return 0;

     label1:
        goto label0;

     label2:
        return 1;
    }

    private static final boolean valuesMatch(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        if r0 != null goto label2;

        if r1 != null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;

     label2:
        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);
        return $z1;
    }

    private final void appendContents(java.lang.StringBuffer, java.text.CharacterIterator)
    {
        java.text.AttributedString r0;
        java.lang.StringBuffer r1;
        java.text.CharacterIterator r2;
        int i0, i1, $i2;
        char $c4;

        r0 := @this: java.text.AttributedString;
        r1 := @parameter0: java.lang.StringBuffer;
        r2 := @parameter1: java.text.CharacterIterator;
        i0 = interfaceinvoke r2.<java.text.CharacterIterator: int getBeginIndex()>();
        i1 = interfaceinvoke r2.<java.text.CharacterIterator: int getEndIndex()>();

     label0:
        if i0 >= i1 goto label1;

        $i2 = i0;
        i0 = i0 + 1;
        interfaceinvoke r2.<java.text.CharacterIterator: char setIndex(int)>($i2);
        $c4 = interfaceinvoke r2.<java.text.CharacterIterator: char current()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);
        goto label0;

     label1:
        return;
    }

    private void setAttributes(java.util.Map, int)
    {
        java.text.AttributedString r0;
        java.util.Map r1;
        int i0, i1, i2, $i3, $i4;
        java.util.Vector r2, r3, $r6, $r7;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        java.util.Set $r8;
        boolean $z0;
        java.lang.Object $r9, $r10, $r11;
        java.util.Vector[] $r12, $r13;

        r0 := @this: java.text.AttributedString;
        r1 := @parameter0: java.util.Map;
        i0 := @parameter1: int;
        $i3 = r0.<java.text.AttributedString: int runCount>;
        if $i3 != 0 goto label0;

        specialinvoke r0.<java.text.AttributedString: void createRunAttributeDataVectors()>();

     label0:
        i1 = specialinvoke r0.<java.text.AttributedString: int ensureRunBreak(int,boolean)>(i0, 0);
        if r1 == null goto label3;

        $i4 = interfaceinvoke r1.<java.util.Map: int size()>();
        i2 = $i4;
        if $i4 <= 0 goto label3;

        $r6 = new java.util.Vector;
        specialinvoke $r6.<java.util.Vector: void <init>(int)>(i2);
        r2 = $r6;
        $r7 = new java.util.Vector;
        specialinvoke $r7.<java.util.Vector: void <init>(int)>(i2);
        r3 = $r7;
        $r8 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();
        r4 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.util.Map$Entry) $r9;
        $r10 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();
        virtualinvoke r2.<java.util.Vector: boolean add(java.lang.Object)>($r10);
        $r11 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();
        virtualinvoke r3.<java.util.Vector: boolean add(java.lang.Object)>($r11);
        goto label1;

     label2:
        $r12 = r0.<java.text.AttributedString: java.util.Vector[] runAttributes>;
        $r12[i1] = r2;
        $r13 = r0.<java.text.AttributedString: java.util.Vector[] runAttributeValues>;
        $r13[i1] = r3;

     label3:
        return;
    }

    private static boolean mapsDiffer(java.util.Map, java.util.Map)
    {
        java.util.Map r0, r1;
        int $i0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.Map;
        r1 := @parameter1: java.util.Map;
        if r0 != null goto label2;

        if r1 == null goto label0;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();
        if $i0 <= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;

     label2:
        $z1 = interfaceinvoke r0.<java.util.Map: boolean equals(java.lang.Object)>(r1);
        if $z1 != 0 goto label3;

        $z2 = 1;
        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    static char access$000(java.text.AttributedString, int)
    {
        java.text.AttributedString r0;
        int i0;
        char $c1;

        r0 := @parameter0: java.text.AttributedString;
        i0 := @parameter1: int;
        $c1 = specialinvoke r0.<java.text.AttributedString: char charAt(int)>(i0);
        return $c1;
    }

    static java.lang.Object access$100(java.text.AttributedString, java.text.AttributedCharacterIterator$Attribute, int)
    {
        java.text.AttributedString r0;
        java.text.AttributedCharacterIterator$Attribute r1;
        int i0;
        java.lang.Object $r2;

        r0 := @parameter0: java.text.AttributedString;
        r1 := @parameter1: java.text.AttributedCharacterIterator$Attribute;
        i0 := @parameter2: int;
        $r2 = specialinvoke r0.<java.text.AttributedString: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute,int)>(r1, i0);
        return $r2;
    }

    static boolean access$200(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        $z0 = staticinvoke <java.text.AttributedString: boolean valuesMatch(java.lang.Object,java.lang.Object)>(r0, r1);
        return $z0;
    }

    static boolean access$300(java.text.AttributedString, java.util.Set, int, int)
    {
        java.text.AttributedString r0;
        java.util.Set r1;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.text.AttributedString;
        r1 := @parameter1: java.util.Set;
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        $z0 = specialinvoke r0.<java.text.AttributedString: boolean attributeValuesMatch(java.util.Set,int,int)>(r1, i0, i1);
        return $z0;
    }

    static java.lang.Object access$400(java.text.AttributedString, java.text.AttributedCharacterIterator$Attribute, int, int, int)
    {
        java.text.AttributedString r0;
        java.text.AttributedCharacterIterator$Attribute r1;
        int i0, i1, i2;
        java.lang.Object $r2;

        r0 := @parameter0: java.text.AttributedString;
        r1 := @parameter1: java.text.AttributedCharacterIterator$Attribute;
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        i2 := @parameter4: int;
        $r2 = specialinvoke r0.<java.text.AttributedString: java.lang.Object getAttributeCheckRange(java.text.AttributedCharacterIterator$Attribute,int,int,int)>(r1, i0, i1, i2);
        return $r2;
    }
}
