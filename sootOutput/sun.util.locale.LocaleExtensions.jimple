public class sun.util.locale.LocaleExtensions extends java.lang.Object
{
    private final java.util.Map extensionMap;
    private final java.lang.String id;
    public static final sun.util.locale.LocaleExtensions CALENDAR_JAPANESE;
    public static final sun.util.locale.LocaleExtensions NUMBER_THAI;
    static final boolean $assertionsDisabled;

    private void <init>(java.lang.String, java.lang.Character, sun.util.locale.Extension)
    {
        sun.util.locale.LocaleExtensions r0;
        java.lang.String r1;
        java.lang.Character r2;
        sun.util.locale.Extension r3;
        java.util.Map $r4;

        r0 := @this: sun.util.locale.LocaleExtensions;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Character;
        r3 := @parameter2: sun.util.locale.Extension;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.util.locale.LocaleExtensions: java.lang.String id> = r1;
        $r4 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>(r2, r3);
        r0.<sun.util.locale.LocaleExtensions: java.util.Map extensionMap> = $r4;
        return;
    }

    void <init>(java.util.Map, java.util.Set, java.util.Map)
    {
        sun.util.locale.LocaleExtensions r0;
        java.util.Map r1, r3, $r11, $r44;
        java.util.Set r2, $r13, $r30;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z13, $z14;
        java.util.TreeMap r4, $r12, r22, $r29;
        java.util.Iterator r5, r24, r31;
        java.util.Map$Entry r6, r33;
        char c0, $c1;
        java.lang.String r7, r9, r10, $r19, $r27, $r28, $r36, $r38, $r45;
        sun.util.locale.Extension $r8;
        java.lang.Object $r14, $r15, $r17, $r25, $r32, $r34, $r37;
        sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar $r16;
        java.lang.Character $r18, $r42;
        java.util.TreeSet r21, $r23;
        sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString r26, $r35;
        sun.util.locale.UnicodeLocaleExtension $r40, r41;

        r0 := @this: sun.util.locale.LocaleExtensions;
        r1 := @parameter0: java.util.Map;
        r2 := @parameter1: java.util.Set;
        r3 := @parameter2: java.util.Map;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $z3 = staticinvoke <sun.util.locale.LocaleUtils: boolean isEmpty(java.util.Map)>(r1);
        if $z3 != 0 goto label0;

        $z4 = 1;
        goto label1;

     label0:
        $z4 = 0;

     label1:
        z0 = $z4;
        $z5 = staticinvoke <sun.util.locale.LocaleUtils: boolean isEmpty(java.util.Set)>(r2);
        if $z5 != 0 goto label2;

        $z6 = 1;
        goto label3;

     label2:
        $z6 = 0;

     label3:
        z1 = $z6;
        $z7 = staticinvoke <sun.util.locale.LocaleUtils: boolean isEmpty(java.util.Map)>(r3);
        if $z7 != 0 goto label4;

        $z8 = 1;
        goto label5;

     label4:
        $z8 = 0;

     label5:
        z2 = $z8;
        if z0 != 0 goto label6;

        if z1 != 0 goto label6;

        if z2 != 0 goto label6;

        r0.<sun.util.locale.LocaleExtensions: java.lang.String id> = "";
        $r11 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
        r0.<sun.util.locale.LocaleExtensions: java.util.Map extensionMap> = $r11;
        return;

     label6:
        $r12 = new java.util.TreeMap;
        specialinvoke $r12.<java.util.TreeMap: void <init>()>();
        r4 = $r12;
        if z0 == 0 goto label9;

        $r13 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();
        r5 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label7:
        $z9 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
        if $z9 == 0 goto label9;

        $r14 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        r6 = (java.util.Map$Entry) $r14;
        $r15 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r16 = (sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar) $r15;
        $c1 = virtualinvoke $r16.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: char value()>();
        c0 = staticinvoke <sun.util.locale.LocaleUtils: char toLower(char)>($c1);
        $r17 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();
        r7 = (java.lang.String) $r17;
        $z10 = staticinvoke <sun.util.locale.LanguageTag: boolean isPrivateusePrefixChar(char)>(c0);
        if $z10 == 0 goto label8;

        r7 = staticinvoke <sun.util.locale.InternalLocaleBuilder: java.lang.String removePrivateuseVariant(java.lang.String)>(r7);
        if r7 != null goto label8;

        goto label7;

     label8:
        $r18 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);
        $r8 = new sun.util.locale.Extension;
        $r19 = staticinvoke <sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>(r7);
        specialinvoke $r8.<sun.util.locale.Extension: void <init>(char,java.lang.String)>(c0, $r19);
        interfaceinvoke r4.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r8);
        goto label7;

     label9:
        if z1 != 0 goto label10;

        if z2 == 0 goto label15;

     label10:
        r21 = null;
        r22 = null;
        if z1 == 0 goto label12;

        $r23 = new java.util.TreeSet;
        specialinvoke $r23.<java.util.TreeSet: void <init>()>();
        r21 = $r23;
        r24 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z11 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();
        if $z11 == 0 goto label12;

        $r25 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();
        r26 = (sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString) $r25;
        $r27 = virtualinvoke r26.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String value()>();
        $r28 = staticinvoke <sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>($r27);
        interfaceinvoke r21.<java.util.SortedSet: boolean add(java.lang.Object)>($r28);
        goto label11;

     label12:
        if z2 == 0 goto label14;

        $r29 = new java.util.TreeMap;
        specialinvoke $r29.<java.util.TreeMap: void <init>()>();
        r22 = $r29;
        $r30 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();
        r31 = interfaceinvoke $r30.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z13 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();
        if $z13 == 0 goto label14;

        $r32 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();
        r33 = (java.util.Map$Entry) $r32;
        $r34 = interfaceinvoke r33.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r35 = (sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString) $r34;
        $r36 = virtualinvoke $r35.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: java.lang.String value()>();
        r9 = staticinvoke <sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>($r36);
        $r37 = interfaceinvoke r33.<java.util.Map$Entry: java.lang.Object getValue()>();
        $r38 = (java.lang.String) $r37;
        r10 = staticinvoke <sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>($r38);
        interfaceinvoke r22.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r10);
        goto label13;

     label14:
        $r40 = new sun.util.locale.UnicodeLocaleExtension;
        specialinvoke $r40.<sun.util.locale.UnicodeLocaleExtension: void <init>(java.util.SortedSet,java.util.SortedMap)>(r21, r22);
        r41 = $r40;
        $r42 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(117);
        interfaceinvoke r4.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r42, r41);

     label15:
        $z14 = interfaceinvoke r4.<java.util.SortedMap: boolean isEmpty()>();
        if $z14 == 0 goto label16;

        r0.<sun.util.locale.LocaleExtensions: java.lang.String id> = "";
        $r44 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
        r0.<sun.util.locale.LocaleExtensions: java.util.Map extensionMap> = $r44;
        goto label17;

     label16:
        $r45 = staticinvoke <sun.util.locale.LocaleExtensions: java.lang.String toID(java.util.SortedMap)>(r4);
        r0.<sun.util.locale.LocaleExtensions: java.lang.String id> = $r45;
        r0.<sun.util.locale.LocaleExtensions: java.util.Map extensionMap> = r4;

     label17:
        return;
    }

    public java.util.Set getKeys()
    {
        sun.util.locale.LocaleExtensions r0;
        java.util.Map $r1, $r3;
        boolean $z0;
        java.util.Set $r2, $r4, $r5;

        r0 := @this: sun.util.locale.LocaleExtensions;
        $r1 = r0.<sun.util.locale.LocaleExtensions: java.util.Map extensionMap>;
        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();
        if $z0 == 0 goto label0;

        $r2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
        return $r2;

     label0:
        $r3 = r0.<sun.util.locale.LocaleExtensions: java.util.Map extensionMap>;
        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();
        $r5 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r4);
        return $r5;
    }

    public sun.util.locale.Extension getExtension(java.lang.Character)
    {
        sun.util.locale.LocaleExtensions r0;
        java.lang.Character r1, $r3;
        java.util.Map $r2;
        char $c0, $c1;
        java.lang.Object $r4;
        sun.util.locale.Extension $r5;

        r0 := @this: sun.util.locale.LocaleExtensions;
        r1 := @parameter0: java.lang.Character;
        $r2 = r0.<sun.util.locale.LocaleExtensions: java.util.Map extensionMap>;
        $c0 = virtualinvoke r1.<java.lang.Character: char charValue()>();
        $c1 = staticinvoke <sun.util.locale.LocaleUtils: char toLower(char)>($c0);
        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);
        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);
        $r5 = (sun.util.locale.Extension) $r4;
        return $r5;
    }

    public java.lang.String getExtensionValue(java.lang.Character)
    {
        sun.util.locale.LocaleExtensions r0;
        java.lang.Character r1, $r4;
        sun.util.locale.Extension r2;
        java.util.Map $r3;
        char $c0, $c1;
        java.lang.Object $r5;
        java.lang.String $r6;

        r0 := @this: sun.util.locale.LocaleExtensions;
        r1 := @parameter0: java.lang.Character;
        $r3 = r0.<sun.util.locale.LocaleExtensions: java.util.Map extensionMap>;
        $c0 = virtualinvoke r1.<java.lang.Character: char charValue()>();
        $c1 = staticinvoke <sun.util.locale.LocaleUtils: char toLower(char)>($c0);
        $r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);
        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);
        r2 = (sun.util.locale.Extension) $r5;
        if r2 != null goto label0;

        return null;

     label0:
        $r6 = virtualinvoke r2.<sun.util.locale.Extension: java.lang.String getValue()>();
        return $r6;
    }

    public java.util.Set getUnicodeLocaleAttributes()
    {
        sun.util.locale.LocaleExtensions r0;
        sun.util.locale.Extension r1;
        java.util.Map $r2;
        java.lang.Character $r3;
        java.lang.Object $r4;
        java.util.Set $r5, $r8;
        boolean $z0, $z1;
        java.lang.AssertionError $r6;
        sun.util.locale.UnicodeLocaleExtension $r7;

        r0 := @this: sun.util.locale.LocaleExtensions;
        $r2 = r0.<sun.util.locale.LocaleExtensions: java.util.Map extensionMap>;
        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(117);
        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);
        r1 = (sun.util.locale.Extension) $r4;
        if r1 != null goto label0;

        $r5 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
        return $r5;

     label0:
        $z0 = <sun.util.locale.LocaleExtensions: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        $z1 = r1 instanceof sun.util.locale.UnicodeLocaleExtension;
        if $z1 != 0 goto label1;

        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label1:
        $r7 = (sun.util.locale.UnicodeLocaleExtension) r1;
        $r8 = virtualinvoke $r7.<sun.util.locale.UnicodeLocaleExtension: java.util.Set getUnicodeLocaleAttributes()>();
        return $r8;
    }

    public java.util.Set getUnicodeLocaleKeys()
    {
        sun.util.locale.LocaleExtensions r0;
        sun.util.locale.Extension r1;
        java.util.Map $r2;
        java.lang.Character $r3;
        java.lang.Object $r4;
        java.util.Set $r5, $r8;
        boolean $z0, $z1;
        java.lang.AssertionError $r6;
        sun.util.locale.UnicodeLocaleExtension $r7;

        r0 := @this: sun.util.locale.LocaleExtensions;
        $r2 = r0.<sun.util.locale.LocaleExtensions: java.util.Map extensionMap>;
        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(117);
        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);
        r1 = (sun.util.locale.Extension) $r4;
        if r1 != null goto label0;

        $r5 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
        return $r5;

     label0:
        $z0 = <sun.util.locale.LocaleExtensions: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        $z1 = r1 instanceof sun.util.locale.UnicodeLocaleExtension;
        if $z1 != 0 goto label1;

        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label1:
        $r7 = (sun.util.locale.UnicodeLocaleExtension) r1;
        $r8 = virtualinvoke $r7.<sun.util.locale.UnicodeLocaleExtension: java.util.Set getUnicodeLocaleKeys()>();
        return $r8;
    }

    public java.lang.String getUnicodeLocaleType(java.lang.String)
    {
        sun.util.locale.LocaleExtensions r0;
        java.lang.String r1, $r8, $r9;
        sun.util.locale.Extension r2;
        java.util.Map $r3;
        java.lang.Character $r4;
        java.lang.Object $r5;
        boolean $z0, $z1;
        java.lang.AssertionError $r6;
        sun.util.locale.UnicodeLocaleExtension $r7;

        r0 := @this: sun.util.locale.LocaleExtensions;
        r1 := @parameter0: java.lang.String;
        $r3 = r0.<sun.util.locale.LocaleExtensions: java.util.Map extensionMap>;
        $r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(117);
        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);
        r2 = (sun.util.locale.Extension) $r5;
        if r2 != null goto label0;

        return null;

     label0:
        $z0 = <sun.util.locale.LocaleExtensions: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        $z1 = r2 instanceof sun.util.locale.UnicodeLocaleExtension;
        if $z1 != 0 goto label1;

        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label1:
        $r7 = (sun.util.locale.UnicodeLocaleExtension) r2;
        $r8 = staticinvoke <sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>(r1);
        $r9 = virtualinvoke $r7.<sun.util.locale.UnicodeLocaleExtension: java.lang.String getUnicodeLocaleType(java.lang.String)>($r8);
        return $r9;
    }

    public boolean isEmpty()
    {
        sun.util.locale.LocaleExtensions r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: sun.util.locale.LocaleExtensions;
        $r1 = r0.<sun.util.locale.LocaleExtensions: java.util.Map extensionMap>;
        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();
        return $z0;
    }

    public static boolean isValidKey(char)
    {
        char c0;
        boolean $z0, $z1, $z2;

        c0 := @parameter0: char;
        $z0 = staticinvoke <sun.util.locale.LanguageTag: boolean isExtensionSingletonChar(char)>(c0);
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <sun.util.locale.LanguageTag: boolean isPrivateusePrefixChar(char)>(c0);
        if $z1 == 0 goto label1;

     label0:
        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static boolean isValidUnicodeLocaleKey(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        $z0 = staticinvoke <sun.util.locale.UnicodeLocaleExtension: boolean isKey(java.lang.String)>(r0);
        return $z0;
    }

    private static java.lang.String toID(java.util.SortedMap)
    {
        java.util.SortedMap r0;
        java.lang.StringBuilder $r1, r2;
        sun.util.locale.Extension r3, r6;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        char c0;
        java.util.Set $r7;
        boolean $z0, $z1;
        java.lang.Object $r8, $r9, $r11;
        java.lang.Character $r10;
        int $i1, $i2;
        java.lang.String $r16;

        r0 := @parameter0: java.util.SortedMap;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        r2 = $r1;
        r3 = null;
        $r7 = interfaceinvoke r0.<java.util.SortedMap: java.util.Set entrySet()>();
        r4 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.util.Map$Entry) $r8;
        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r10 = (java.lang.Character) $r9;
        c0 = virtualinvoke $r10.<java.lang.Character: char charValue()>();
        $r11 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();
        r6 = (sun.util.locale.Extension) $r11;
        $z1 = staticinvoke <sun.util.locale.LanguageTag: boolean isPrivateusePrefixChar(char)>(c0);
        if $z1 == 0 goto label1;

        r3 = r6;
        goto label3;

     label1:
        $i1 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();
        if $i1 <= 0 goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

     label2:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

     label3:
        goto label0;

     label4:
        if r3 == null goto label6;

        $i2 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();
        if $i2 <= 0 goto label5;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

     label5:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

     label6:
        $r16 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r16;
    }

    public java.lang.String toString()
    {
        sun.util.locale.LocaleExtensions r0;
        java.lang.String $r1;

        r0 := @this: sun.util.locale.LocaleExtensions;
        $r1 = r0.<sun.util.locale.LocaleExtensions: java.lang.String id>;
        return $r1;
    }

    public java.lang.String getID()
    {
        sun.util.locale.LocaleExtensions r0;
        java.lang.String $r1;

        r0 := @this: sun.util.locale.LocaleExtensions;
        $r1 = r0.<sun.util.locale.LocaleExtensions: java.lang.String id>;
        return $r1;
    }

    public int hashCode()
    {
        sun.util.locale.LocaleExtensions r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: sun.util.locale.LocaleExtensions;
        $r1 = r0.<sun.util.locale.LocaleExtensions: java.lang.String id>;
        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();
        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        sun.util.locale.LocaleExtensions r0, $r3;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.String $r2, $r4;

        r0 := @this: sun.util.locale.LocaleExtensions;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof sun.util.locale.LocaleExtensions;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<sun.util.locale.LocaleExtensions: java.lang.String id>;
        $r3 = (sun.util.locale.LocaleExtensions) r1;
        $r4 = $r3.<sun.util.locale.LocaleExtensions: java.lang.String id>;
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);
        return $z1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        sun.util.locale.UnicodeLocaleExtension $r1, $r6;
        boolean $z0, $z1;
        sun.util.locale.LocaleExtensions $r2, $r4;
        java.lang.Character $r3, $r5;

        $r0 = class "sun/util/locale/LocaleExtensions";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.util.locale.LocaleExtensions: boolean $assertionsDisabled> = $z1;
        $r2 = new sun.util.locale.LocaleExtensions;
        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(117);
        $r1 = <sun.util.locale.UnicodeLocaleExtension: sun.util.locale.UnicodeLocaleExtension CA_JAPANESE>;
        specialinvoke $r2.<sun.util.locale.LocaleExtensions: void <init>(java.lang.String,java.lang.Character,sun.util.locale.Extension)>("u-ca-japanese", $r3, $r1);
        <sun.util.locale.LocaleExtensions: sun.util.locale.LocaleExtensions CALENDAR_JAPANESE> = $r2;
        $r4 = new sun.util.locale.LocaleExtensions;
        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(117);
        $r6 = <sun.util.locale.UnicodeLocaleExtension: sun.util.locale.UnicodeLocaleExtension NU_THAI>;
        specialinvoke $r4.<sun.util.locale.LocaleExtensions: void <init>(java.lang.String,java.lang.Character,sun.util.locale.Extension)>("u-nu-thai", $r5, $r6);
        <sun.util.locale.LocaleExtensions: sun.util.locale.LocaleExtensions NUMBER_THAI> = $r4;
        return;
    }
}
