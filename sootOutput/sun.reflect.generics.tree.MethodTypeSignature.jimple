public class sun.reflect.generics.tree.MethodTypeSignature extends java.lang.Object implements sun.reflect.generics.tree.Signature
{
    private sun.reflect.generics.tree.FormalTypeParameter[] formalTypeParams;
    private sun.reflect.generics.tree.TypeSignature[] parameterTypes;
    private sun.reflect.generics.tree.ReturnType returnType;
    private sun.reflect.generics.tree.FieldTypeSignature[] exceptionTypes;

    private void <init>(sun.reflect.generics.tree.FormalTypeParameter[], sun.reflect.generics.tree.TypeSignature[], sun.reflect.generics.tree.ReturnType, sun.reflect.generics.tree.FieldTypeSignature[])
    {
        sun.reflect.generics.tree.MethodTypeSignature r0;
        sun.reflect.generics.tree.FormalTypeParameter[] r1;
        sun.reflect.generics.tree.TypeSignature[] r2;
        sun.reflect.generics.tree.ReturnType r3;
        sun.reflect.generics.tree.FieldTypeSignature[] r4;

        r0 := @this: sun.reflect.generics.tree.MethodTypeSignature;
        r1 := @parameter0: sun.reflect.generics.tree.FormalTypeParameter[];
        r2 := @parameter1: sun.reflect.generics.tree.TypeSignature[];
        r3 := @parameter2: sun.reflect.generics.tree.ReturnType;
        r4 := @parameter3: sun.reflect.generics.tree.FieldTypeSignature[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.reflect.generics.tree.MethodTypeSignature: sun.reflect.generics.tree.FormalTypeParameter[] formalTypeParams> = r1;
        r0.<sun.reflect.generics.tree.MethodTypeSignature: sun.reflect.generics.tree.TypeSignature[] parameterTypes> = r2;
        r0.<sun.reflect.generics.tree.MethodTypeSignature: sun.reflect.generics.tree.ReturnType returnType> = r3;
        r0.<sun.reflect.generics.tree.MethodTypeSignature: sun.reflect.generics.tree.FieldTypeSignature[] exceptionTypes> = r4;
        return;
    }

    public static sun.reflect.generics.tree.MethodTypeSignature make(sun.reflect.generics.tree.FormalTypeParameter[], sun.reflect.generics.tree.TypeSignature[], sun.reflect.generics.tree.ReturnType, sun.reflect.generics.tree.FieldTypeSignature[])
    {
        sun.reflect.generics.tree.FormalTypeParameter[] r0;
        sun.reflect.generics.tree.TypeSignature[] r1;
        sun.reflect.generics.tree.ReturnType r2;
        sun.reflect.generics.tree.FieldTypeSignature[] r3;
        sun.reflect.generics.tree.MethodTypeSignature $r4;

        r0 := @parameter0: sun.reflect.generics.tree.FormalTypeParameter[];
        r1 := @parameter1: sun.reflect.generics.tree.TypeSignature[];
        r2 := @parameter2: sun.reflect.generics.tree.ReturnType;
        r3 := @parameter3: sun.reflect.generics.tree.FieldTypeSignature[];
        $r4 = new sun.reflect.generics.tree.MethodTypeSignature;
        specialinvoke $r4.<sun.reflect.generics.tree.MethodTypeSignature: void <init>(sun.reflect.generics.tree.FormalTypeParameter[],sun.reflect.generics.tree.TypeSignature[],sun.reflect.generics.tree.ReturnType,sun.reflect.generics.tree.FieldTypeSignature[])>(r0, r1, r2, r3);
        return $r4;
    }

    public sun.reflect.generics.tree.FormalTypeParameter[] getFormalTypeParameters()
    {
        sun.reflect.generics.tree.MethodTypeSignature r0;
        sun.reflect.generics.tree.FormalTypeParameter[] $r1;

        r0 := @this: sun.reflect.generics.tree.MethodTypeSignature;
        $r1 = r0.<sun.reflect.generics.tree.MethodTypeSignature: sun.reflect.generics.tree.FormalTypeParameter[] formalTypeParams>;
        return $r1;
    }

    public sun.reflect.generics.tree.TypeSignature[] getParameterTypes()
    {
        sun.reflect.generics.tree.MethodTypeSignature r0;
        sun.reflect.generics.tree.TypeSignature[] $r1;

        r0 := @this: sun.reflect.generics.tree.MethodTypeSignature;
        $r1 = r0.<sun.reflect.generics.tree.MethodTypeSignature: sun.reflect.generics.tree.TypeSignature[] parameterTypes>;
        return $r1;
    }

    public sun.reflect.generics.tree.ReturnType getReturnType()
    {
        sun.reflect.generics.tree.MethodTypeSignature r0;
        sun.reflect.generics.tree.ReturnType $r1;

        r0 := @this: sun.reflect.generics.tree.MethodTypeSignature;
        $r1 = r0.<sun.reflect.generics.tree.MethodTypeSignature: sun.reflect.generics.tree.ReturnType returnType>;
        return $r1;
    }

    public sun.reflect.generics.tree.FieldTypeSignature[] getExceptionTypes()
    {
        sun.reflect.generics.tree.MethodTypeSignature r0;
        sun.reflect.generics.tree.FieldTypeSignature[] $r1;

        r0 := @this: sun.reflect.generics.tree.MethodTypeSignature;
        $r1 = r0.<sun.reflect.generics.tree.MethodTypeSignature: sun.reflect.generics.tree.FieldTypeSignature[] exceptionTypes>;
        return $r1;
    }

    public void accept(sun.reflect.generics.visitor.Visitor)
    {
        sun.reflect.generics.tree.MethodTypeSignature r0;
        sun.reflect.generics.visitor.Visitor r1;

        r0 := @this: sun.reflect.generics.tree.MethodTypeSignature;
        r1 := @parameter0: sun.reflect.generics.visitor.Visitor;
        interfaceinvoke r1.<sun.reflect.generics.visitor.Visitor: void visitMethodTypeSignature(sun.reflect.generics.tree.MethodTypeSignature)>(r0);
        return;
    }
}
