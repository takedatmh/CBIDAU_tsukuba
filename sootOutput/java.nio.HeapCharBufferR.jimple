class java.nio.HeapCharBufferR extends java.nio.HeapCharBuffer
{

    void <init>(int, int)
    {
        java.nio.HeapCharBufferR r0;
        int i0, i1;

        r0 := @this: java.nio.HeapCharBufferR;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        specialinvoke r0.<java.nio.HeapCharBuffer: void <init>(int,int)>(i0, i1);
        r0.<java.nio.HeapCharBufferR: boolean isReadOnly> = 1;
        return;
    }

    void <init>(char[], int, int)
    {
        java.nio.HeapCharBufferR r0;
        char[] r1;
        int i0, i1;

        r0 := @this: java.nio.HeapCharBufferR;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.nio.HeapCharBuffer: void <init>(char[],int,int)>(r1, i0, i1);
        r0.<java.nio.HeapCharBufferR: boolean isReadOnly> = 1;
        return;
    }

    protected void <init>(char[], int, int, int, int, int)
    {
        java.nio.HeapCharBufferR r0;
        char[] r1;
        int i0, i1, i2, i3, i4;

        r0 := @this: java.nio.HeapCharBufferR;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        specialinvoke r0.<java.nio.HeapCharBuffer: void <init>(char[],int,int,int,int,int)>(r1, i0, i1, i2, i3, i4);
        r0.<java.nio.HeapCharBufferR: boolean isReadOnly> = 1;
        return;
    }

    public java.nio.CharBuffer slice()
    {
        java.nio.HeapCharBufferR r0, $r1;
        char[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapCharBufferR;
        $r1 = new java.nio.HeapCharBufferR;
        $r2 = r0.<java.nio.HeapCharBufferR: char[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapCharBufferR: int remaining()>();
        $i1 = virtualinvoke r0.<java.nio.HeapCharBufferR: int remaining()>();
        $i2 = virtualinvoke r0.<java.nio.HeapCharBufferR: int position()>();
        $i3 = r0.<java.nio.HeapCharBufferR: int offset>;
        $i4 = $i2 + $i3;
        specialinvoke $r1.<java.nio.HeapCharBufferR: void <init>(char[],int,int,int,int,int)>($r2, -1, 0, $i0, $i1, $i4);
        return $r1;
    }

    public java.nio.CharBuffer duplicate()
    {
        java.nio.HeapCharBufferR r0, $r1;
        char[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapCharBufferR;
        $r1 = new java.nio.HeapCharBufferR;
        $r2 = r0.<java.nio.HeapCharBufferR: char[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapCharBufferR: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.HeapCharBufferR: int position()>();
        $i2 = virtualinvoke r0.<java.nio.HeapCharBufferR: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.HeapCharBufferR: int capacity()>();
        $i4 = r0.<java.nio.HeapCharBufferR: int offset>;
        specialinvoke $r1.<java.nio.HeapCharBufferR: void <init>(char[],int,int,int,int,int)>($r2, $i0, $i1, $i2, $i3, $i4);
        return $r1;
    }

    public java.nio.CharBuffer asReadOnlyBuffer()
    {
        java.nio.HeapCharBufferR r0;
        java.nio.CharBuffer $r1;

        r0 := @this: java.nio.HeapCharBufferR;
        $r1 = virtualinvoke r0.<java.nio.HeapCharBufferR: java.nio.CharBuffer duplicate()>();
        return $r1;
    }

    public boolean isReadOnly()
    {
        java.nio.HeapCharBufferR r0;

        r0 := @this: java.nio.HeapCharBufferR;
        return 1;
    }

    public java.nio.CharBuffer put(char)
    {
        java.nio.HeapCharBufferR r0;
        char c0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapCharBufferR;
        c0 := @parameter0: char;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.CharBuffer put(int, char)
    {
        java.nio.HeapCharBufferR r0;
        int i0;
        char c1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapCharBufferR;
        i0 := @parameter0: int;
        c1 := @parameter1: char;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.CharBuffer put(char[], int, int)
    {
        java.nio.HeapCharBufferR r0;
        char[] r1;
        int i0, i1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.HeapCharBufferR;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r2;
    }

    public java.nio.CharBuffer put(java.nio.CharBuffer)
    {
        java.nio.HeapCharBufferR r0;
        java.nio.CharBuffer r1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.HeapCharBufferR;
        r1 := @parameter0: java.nio.CharBuffer;
        $r2 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r2;
    }

    public java.nio.CharBuffer compact()
    {
        java.nio.HeapCharBufferR r0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapCharBufferR;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    java.lang.String toString(int, int)
    {
        java.nio.HeapCharBufferR r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.String $r1;
        java.lang.StringIndexOutOfBoundsException r2, $r4;
        char[] $r3;
        java.lang.IndexOutOfBoundsException $r5;

        r0 := @this: java.nio.HeapCharBufferR;
        i0 := @parameter0: int;
        i1 := @parameter1: int;

     label0:
        $r1 = new java.lang.String;
        $r3 = r0.<java.nio.HeapCharBufferR: char[] hb>;
        $i2 = r0.<java.nio.HeapCharBufferR: int offset>;
        $i3 = i0 + $i2;
        $i4 = i1 - i0;
        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r3, $i3, $i4);

     label1:
        return $r1;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        $r5 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r5;

        catch java.lang.StringIndexOutOfBoundsException from label0 to label1 with label2;
    }

    public java.nio.CharBuffer subSequence(int, int)
    {
        java.nio.HeapCharBufferR r0, $r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.IndexOutOfBoundsException $r1;
        char[] $r3;

        r0 := @this: java.nio.HeapCharBufferR;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i0 < 0 goto label0;

        $i3 = virtualinvoke r0.<java.nio.HeapCharBufferR: int length()>();
        if i1 > $i3 goto label0;

        if i0 <= i1 goto label1;

     label0:
        $r1 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r1;

     label1:
        i2 = virtualinvoke r0.<java.nio.HeapCharBufferR: int position()>();
        $r2 = new java.nio.HeapCharBufferR;
        $r3 = r0.<java.nio.HeapCharBufferR: char[] hb>;
        $i4 = i2 + i0;
        $i5 = i2 + i1;
        $i6 = virtualinvoke r0.<java.nio.HeapCharBufferR: int capacity()>();
        $i7 = r0.<java.nio.HeapCharBufferR: int offset>;
        specialinvoke $r2.<java.nio.HeapCharBufferR: void <init>(char[],int,int,int,int,int)>($r3, -1, $i4, $i5, $i6, $i7);
        return $r2;
    }

    public java.nio.ByteOrder order()
    {
        java.nio.HeapCharBufferR r0;
        java.nio.ByteOrder $r1;

        r0 := @this: java.nio.HeapCharBufferR;
        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();
        return $r1;
    }

    public volatile java.lang.CharSequence subSequence(int, int)
    {
        java.nio.HeapCharBufferR r0;
        int i0, i1;
        java.nio.CharBuffer $r1;

        r0 := @this: java.nio.HeapCharBufferR;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = virtualinvoke r0.<java.nio.HeapCharBufferR: java.nio.CharBuffer subSequence(int,int)>(i0, i1);
        return $r1;
    }
}
