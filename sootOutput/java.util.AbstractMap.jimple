public abstract class java.util.AbstractMap extends java.lang.Object implements java.util.Map
{
    transient volatile java.util.Set keySet;
    transient volatile java.util.Collection values;

    protected void <init>()
    {
        java.util.AbstractMap r0;

        r0 := @this: java.util.AbstractMap;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.AbstractMap: java.util.Set keySet> = null;
        r0.<java.util.AbstractMap: java.util.Collection values> = null;
        return;
    }

    public int size()
    {
        java.util.AbstractMap r0;
        java.util.Set $r1;
        int $i0;

        r0 := @this: java.util.AbstractMap;
        $r1 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>();
        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();
        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.AbstractMap r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.AbstractMap;
        $i0 = virtualinvoke r0.<java.util.AbstractMap: int size()>();
        if $i0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.AbstractMap r0;
        java.lang.Object r1, $r5, $r6, $r7, $r9;
        java.util.Iterator r2;
        java.util.Map$Entry r3, r8;
        java.util.Set $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.AbstractMap;
        r1 := @parameter0: java.lang.Object;
        $r4 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>();
        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();
        if r1 != null goto label2;

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.Map$Entry) $r5;
        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();
        if $r6 != null goto label1;

        return 1;

     label1:
        goto label0;

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r8 = (java.util.Map$Entry) $r7;
        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();
        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r9);
        if $z2 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.AbstractMap r0;
        java.lang.Object r1, $r5, $r6, $r7, $r9;
        java.util.Iterator r2;
        java.util.Map$Entry r3, r8;
        java.util.Set $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.AbstractMap;
        r1 := @parameter0: java.lang.Object;
        $r4 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>();
        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();
        if r1 != null goto label2;

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.Map$Entry) $r5;
        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();
        if $r6 != null goto label1;

        return 1;

     label1:
        goto label0;

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r8 = (java.util.Map$Entry) $r7;
        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();
        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r9);
        if $z2 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.AbstractMap r0;
        java.lang.Object r1, $r5, $r6, $r7, $r8, $r10, $r11;
        java.util.Iterator r2;
        java.util.Map$Entry r3, r9;
        java.util.Set $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.AbstractMap;
        r1 := @parameter0: java.lang.Object;
        $r4 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>();
        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();
        if r1 != null goto label2;

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.Map$Entry) $r5;
        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();
        if $r6 != null goto label1;

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();
        return $r7;

     label1:
        goto label0;

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r9 = (java.util.Map$Entry) $r8;
        $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();
        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r10);
        if $z2 == 0 goto label3;

        $r11 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();
        return $r11;

     label3:
        goto label2;

     label4:
        return null;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.AbstractMap r0;
        java.lang.Object r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: java.util.AbstractMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r3 = new java.lang.UnsupportedOperationException;
        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r3;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.AbstractMap r0;
        java.lang.Object r1, $r6, $r7, $r8, $r10, r11;
        java.util.Iterator r2;
        java.util.Map$Entry r3, r4, r9;
        java.util.Set $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.AbstractMap;
        r1 := @parameter0: java.lang.Object;
        $r5 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>();
        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();
        r3 = null;
        if r1 != null goto label2;

     label0:
        if r3 != null goto label4;

        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.util.Map$Entry) $r6;
        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();
        if $r7 != null goto label1;

        r3 = r4;

     label1:
        goto label0;

     label2:
        if r3 != null goto label4;

        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r9 = (java.util.Map$Entry) $r8;
        $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();
        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r10);
        if $z2 == 0 goto label3;

        r3 = r9;

     label3:
        goto label2;

     label4:
        r11 = null;
        if r3 == null goto label5;

        r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();
        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label5:
        return r11;
    }

    public void putAll(java.util.Map)
    {
        java.util.AbstractMap r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: java.util.AbstractMap;
        r1 := @parameter0: java.util.Map;
        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();
        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.Map$Entry) $r5;
        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();
        virtualinvoke r0.<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);
        goto label0;

     label1:
        return;
    }

    public void clear()
    {
        java.util.AbstractMap r0;
        java.util.Set $r1;

        r0 := @this: java.util.AbstractMap;
        $r1 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>();
        interfaceinvoke $r1.<java.util.Set: void clear()>();
        return;
    }

    public java.util.Set keySet()
    {
        java.util.AbstractMap r0;
        java.util.AbstractMap$1 $r1;
        java.util.Set $r2, $r3;

        r0 := @this: java.util.AbstractMap;
        $r2 = r0.<java.util.AbstractMap: java.util.Set keySet>;
        if $r2 != null goto label0;

        $r1 = new java.util.AbstractMap$1;
        specialinvoke $r1.<java.util.AbstractMap$1: void <init>(java.util.AbstractMap)>(r0);
        r0.<java.util.AbstractMap: java.util.Set keySet> = $r1;

     label0:
        $r3 = r0.<java.util.AbstractMap: java.util.Set keySet>;
        return $r3;
    }

    public java.util.Collection values()
    {
        java.util.AbstractMap r0;
        java.util.AbstractMap$2 $r1;
        java.util.Collection $r2, $r3;

        r0 := @this: java.util.AbstractMap;
        $r2 = r0.<java.util.AbstractMap: java.util.Collection values>;
        if $r2 != null goto label0;

        $r1 = new java.util.AbstractMap$2;
        specialinvoke $r1.<java.util.AbstractMap$2: void <init>(java.util.AbstractMap)>(r0);
        r0.<java.util.AbstractMap: java.util.Collection values> = $r1;

     label0:
        $r3 = r0.<java.util.AbstractMap: java.util.Collection values>;
        return $r3;
    }

    public abstract java.util.Set entrySet();

    public boolean equals(java.lang.Object)
    {
        java.util.AbstractMap r0;
        java.lang.Object r1, r5, r6, $r8, $r9, $r10;
        java.util.Map r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0, $i1;
        java.util.Set $r7;
        java.lang.ClassCastException $r11, r12;
        java.lang.NullPointerException $r13, r14;

        r0 := @this: java.util.AbstractMap;
        r1 := @parameter0: java.lang.Object;
        if r1 != r0 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof java.util.Map;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.util.Map) r1;
        $i0 = interfaceinvoke r2.<java.util.Map: int size()>();
        $i1 = virtualinvoke r0.<java.util.AbstractMap: int size()>();
        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $r7 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>();
        r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label9;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.util.Map$Entry) $r8;
        r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();
        r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();
        if r6 != null goto label6;

        $r9 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);
        if $r9 != null goto label4;

        $z2 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);
        if $z2 != 0 goto label8;

     label4:
        $z3 = 0;

     label5:
        return $z3;

     label6:
        $r10 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);
        $z4 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r10);
        if $z4 != 0 goto label8;

        $z5 = 0;

     label7:
        return $z5;

     label8:
        goto label3;

     label9:
        goto label12;

     label10:
        $r11 := @caughtexception;
        r12 = $r11;
        return 0;

     label11:
        $r13 := @caughtexception;
        r14 = $r13;
        return 0;

     label12:
        return 1;

        catch java.lang.ClassCastException from label2 to label5 with label10;
        catch java.lang.ClassCastException from label6 to label7 with label10;
        catch java.lang.ClassCastException from label8 to label9 with label10;
        catch java.lang.NullPointerException from label2 to label5 with label11;
        catch java.lang.NullPointerException from label6 to label7 with label11;
        catch java.lang.NullPointerException from label8 to label9 with label11;
    }

    public int hashCode()
    {
        java.util.AbstractMap r0;
        int i0, $i1;
        java.util.Iterator r1;
        java.util.Set $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.util.Map$Entry $r4;

        r0 := @this: java.util.AbstractMap;
        i0 = 0;
        $r2 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>();
        r1 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        $r4 = (java.util.Map$Entry) $r3;
        $i1 = interfaceinvoke $r4.<java.util.Map$Entry: int hashCode()>();
        i0 = i0 + $i1;
        goto label0;

     label1:
        return i0;
    }

    public java.lang.String toString()
    {
        java.util.AbstractMap r0;
        java.util.Iterator r1;
        java.lang.StringBuilder r2, $r7, $r17, $r19;
        java.util.Map$Entry r3;
        java.lang.Object r4, r5, $r9, $r11, $r15;
        java.util.Set $r6;
        boolean $z0, $z1;
        java.lang.String $r18;

        r0 := @this: java.util.AbstractMap;
        $r6 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>();
        r1 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z0 != 0 goto label0;

        return "{}";

     label0:
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        r2 = $r7;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

     label1:
        $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.Map$Entry) $r9;
        r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();
        r5 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();
        if r4 != r0 goto label2;

        $r11 = "(this Map)";
        goto label3;

     label2:
        $r11 = r4;

     label3:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);
        if r5 != r0 goto label4;

        $r15 = "(this Map)";
        goto label5;

     label4:
        $r15 = r5;

     label5:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z1 != 0 goto label6;

        $r17 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r18;

     label6:
        $r19 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);
        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
        goto label1;
    }

    protected java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.util.AbstractMap r0, r1;
        java.lang.Object $r2;

        r0 := @this: java.util.AbstractMap;
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        r1 = (java.util.AbstractMap) $r2;
        r1.<java.util.AbstractMap: java.util.Set keySet> = null;
        r1.<java.util.AbstractMap: java.util.Collection values> = null;
        return r1;
    }

    private static boolean eq(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        if r0 != null goto label1;

        if r1 != null goto label0;

        $z0 = 1;
        goto label2;

     label0:
        $z0 = 0;
        goto label2;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

     label2:
        return $z0;
    }

    static boolean access$000(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        $z0 = staticinvoke <java.util.AbstractMap: boolean eq(java.lang.Object,java.lang.Object)>(r0, r1);
        return $z0;
    }
}
