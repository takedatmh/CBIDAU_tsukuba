public final class java.security.Security extends java.lang.Object
{
    private static final sun.security.util.Debug sdebug;
    private static java.util.Properties props;
    private static final java.util.Map spiMap;

    private static void initialize()
    {
        java.util.Properties $r0, $r10, $r38, $r41, $r57;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        java.io.File r1, $r45, r46;
        java.io.BufferedInputStream r2, $r9, r44, $r55;
        java.io.FileInputStream r3, $r8;
        java.lang.Throwable r4, r6, $r33, $r81;
        java.io.IOException r5, r7, $r17, r18, $r21, r22, $r29, r30, $r34, $r65, r66, $r77, r78, $r82;
        sun.security.util.Debug $r11, $r12, $r19, $r20, $r23, $r24, $r31, $r32, $r35, $r36, $r42, $r43, $r58, $r59, $r64, $r67, $r68, $r71, $r72, $r79, $r80, $r83, $r84, $r85, $r86;
        java.lang.StringBuilder $r13, $r14, $r15, $r25, $r26, $r27, $r48, $r49, $r51, $r60, $r61, $r62, $r73, $r74, $r75;
        java.lang.String $r16, $r28, $r37, $r39, r40, $r50, $r52, $r63, $r76;
        java.net.URL $r47, r53, $r54;
        java.io.InputStream $r56;
        java.lang.Exception $r69, r70;

        $r0 = new java.util.Properties;
        specialinvoke $r0.<java.util.Properties: void <init>()>();
        <java.security.Security: java.util.Properties props> = $r0;
        z0 = 0;
        z1 = 0;
        r1 = staticinvoke <java.security.Security: java.io.File securityPropFile(java.lang.String)>("java.security");
        $z2 = virtualinvoke r1.<java.io.File: boolean exists()>();
        if $z2 == 0 goto label20;

        r2 = null;

     label0:
        $r8 = new java.io.FileInputStream;
        specialinvoke $r8.<java.io.FileInputStream: void <init>(java.io.File)>(r1);
        r3 = $r8;
        $r9 = new java.io.BufferedInputStream;
        specialinvoke $r9.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r3);
        r2 = $r9;
        $r10 = <java.security.Security: java.util.Properties props>;
        virtualinvoke $r10.<java.util.Properties: void load(java.io.InputStream)>(r2);
        z0 = 1;
        $r11 = <java.security.Security: sun.security.util.Debug sdebug>;
        if $r11 == null goto label1;

        $r12 = <java.security.Security: sun.security.util.Debug sdebug>;
        $r13 = new java.lang.StringBuilder;
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reading security properties file: ");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r12.<sun.security.util.Debug: void println(java.lang.String)>($r16);

     label1:
        if r2 == null goto label20;

     label2:
        virtualinvoke r2.<java.io.InputStream: void close()>();

     label3:
        goto label20;

     label4:
        $r17 := @caughtexception;
        r18 = $r17;
        $r19 = <java.security.Security: sun.security.util.Debug sdebug>;
        if $r19 == null goto label5;

        $r20 = <java.security.Security: sun.security.util.Debug sdebug>;
        virtualinvoke $r20.<sun.security.util.Debug: void println(java.lang.String)>("unable to close input stream");

     label5:
        goto label20;

     label6:
        $r21 := @caughtexception;

     label7:
        r22 = $r21;
        $r23 = <java.security.Security: sun.security.util.Debug sdebug>;
        if $r23 == null goto label8;

        $r24 = <java.security.Security: sun.security.util.Debug sdebug>;
        $r25 = new java.lang.StringBuilder;
        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to load security properties from ");
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r24.<sun.security.util.Debug: void println(java.lang.String)>($r28);
        virtualinvoke r22.<java.io.IOException: void printStackTrace()>();

     label8:
        if r2 == null goto label20;

     label9:
        virtualinvoke r2.<java.io.InputStream: void close()>();

     label10:
        goto label20;

     label11:
        $r29 := @caughtexception;
        r30 = $r29;
        $r31 = <java.security.Security: sun.security.util.Debug sdebug>;
        if $r31 == null goto label12;

        $r32 = <java.security.Security: sun.security.util.Debug sdebug>;
        virtualinvoke $r32.<sun.security.util.Debug: void println(java.lang.String)>("unable to close input stream");

     label12:
        goto label20;

     label13:
        $r33 := @caughtexception;

     label14:
        r4 = $r33;

     label15:
        if r2 == null goto label19;

     label16:
        virtualinvoke r2.<java.io.InputStream: void close()>();

     label17:
        goto label19;

     label18:
        $r34 := @caughtexception;
        r5 = $r34;
        $r35 = <java.security.Security: sun.security.util.Debug sdebug>;
        if $r35 == null goto label19;

        $r36 = <java.security.Security: sun.security.util.Debug sdebug>;
        virtualinvoke $r36.<sun.security.util.Debug: void println(java.lang.String)>("unable to close input stream");

     label19:
        throw r4;

     label20:
        $r37 = "true";
        $r38 = <java.security.Security: java.util.Properties props>;
        $r39 = virtualinvoke $r38.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("security.overridePropertiesFile");
        $z3 = virtualinvoke $r37.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r39);
        if $z3 == 0 goto label45;

        r40 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.security.properties");
        if r40 == null goto label21;

        $z4 = virtualinvoke r40.<java.lang.String: boolean startsWith(java.lang.String)>("=");
        if $z4 == 0 goto label21;

        z1 = 1;
        r40 = virtualinvoke r40.<java.lang.String: java.lang.String substring(int)>(1);

     label21:
        if z1 == 0 goto label22;

        $r41 = new java.util.Properties;
        specialinvoke $r41.<java.util.Properties: void <init>()>();
        <java.security.Security: java.util.Properties props> = $r41;
        $r42 = <java.security.Security: sun.security.util.Debug sdebug>;
        if $r42 == null goto label22;

        $r43 = <java.security.Security: sun.security.util.Debug sdebug>;
        virtualinvoke $r43.<sun.security.util.Debug: void println(java.lang.String)>("overriding other security properties files!");

     label22:
        if r40 == null goto label45;

        r44 = null;

     label23:
        r40 = staticinvoke <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String)>(r40);
        $r45 = new java.io.File;
        specialinvoke $r45.<java.io.File: void <init>(java.lang.String)>(r40);
        r46 = $r45;
        $z5 = virtualinvoke r46.<java.io.File: boolean exists()>();
        if $z5 == 0 goto label24;

        $r47 = new java.net.URL;
        $r48 = new java.lang.StringBuilder;
        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();
        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file:");
        $r50 = virtualinvoke r46.<java.io.File: java.lang.String getCanonicalPath()>();
        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);
        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r47.<java.net.URL: void <init>(java.lang.String)>($r52);
        r53 = $r47;
        goto label25;

     label24:
        $r54 = new java.net.URL;
        specialinvoke $r54.<java.net.URL: void <init>(java.lang.String)>(r40);
        r53 = $r54;

     label25:
        $r55 = new java.io.BufferedInputStream;
        $r56 = virtualinvoke r53.<java.net.URL: java.io.InputStream openStream()>();
        specialinvoke $r55.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r56);
        r44 = $r55;
        $r57 = <java.security.Security: java.util.Properties props>;
        virtualinvoke $r57.<java.util.Properties: void load(java.io.InputStream)>(r44);
        z0 = 1;
        $r58 = <java.security.Security: sun.security.util.Debug sdebug>;
        if $r58 == null goto label26;

        $r59 = <java.security.Security: sun.security.util.Debug sdebug>;
        $r60 = new java.lang.StringBuilder;
        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();
        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reading security properties file: ");
        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r53);
        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r59.<sun.security.util.Debug: void println(java.lang.String)>($r63);
        if z1 == 0 goto label26;

        $r64 = <java.security.Security: sun.security.util.Debug sdebug>;
        virtualinvoke $r64.<sun.security.util.Debug: void println(java.lang.String)>("overriding other security properties files!");

     label26:
        if r44 == null goto label45;

     label27:
        virtualinvoke r44.<java.io.BufferedInputStream: void close()>();

     label28:
        goto label45;

     label29:
        $r65 := @caughtexception;
        r66 = $r65;
        $r67 = <java.security.Security: sun.security.util.Debug sdebug>;
        if $r67 == null goto label30;

        $r68 = <java.security.Security: sun.security.util.Debug sdebug>;
        virtualinvoke $r68.<sun.security.util.Debug: void println(java.lang.String)>("unable to close input stream");

     label30:
        goto label45;

     label31:
        $r69 := @caughtexception;

     label32:
        r70 = $r69;
        $r71 = <java.security.Security: sun.security.util.Debug sdebug>;
        if $r71 == null goto label33;

        $r72 = <java.security.Security: sun.security.util.Debug sdebug>;
        $r73 = new java.lang.StringBuilder;
        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();
        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to load security properties from ");
        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);
        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r72.<sun.security.util.Debug: void println(java.lang.String)>($r76);
        virtualinvoke r70.<java.lang.Exception: void printStackTrace()>();

     label33:
        if r44 == null goto label45;

     label34:
        virtualinvoke r44.<java.io.BufferedInputStream: void close()>();

     label35:
        goto label45;

     label36:
        $r77 := @caughtexception;
        r78 = $r77;
        $r79 = <java.security.Security: sun.security.util.Debug sdebug>;
        if $r79 == null goto label37;

        $r80 = <java.security.Security: sun.security.util.Debug sdebug>;
        virtualinvoke $r80.<sun.security.util.Debug: void println(java.lang.String)>("unable to close input stream");

     label37:
        goto label45;

     label38:
        $r81 := @caughtexception;

     label39:
        r6 = $r81;

     label40:
        if r44 == null goto label44;

     label41:
        virtualinvoke r44.<java.io.BufferedInputStream: void close()>();

     label42:
        goto label44;

     label43:
        $r82 := @caughtexception;
        r7 = $r82;
        $r83 = <java.security.Security: sun.security.util.Debug sdebug>;
        if $r83 == null goto label44;

        $r84 = <java.security.Security: sun.security.util.Debug sdebug>;
        virtualinvoke $r84.<sun.security.util.Debug: void println(java.lang.String)>("unable to close input stream");

     label44:
        throw r6;

     label45:
        if z0 != 0 goto label46;

        staticinvoke <java.security.Security: void initializeStatic()>();
        $r85 = <java.security.Security: sun.security.util.Debug sdebug>;
        if $r85 == null goto label46;

        $r86 = <java.security.Security: sun.security.util.Debug sdebug>;
        virtualinvoke $r86.<sun.security.util.Debug: void println(java.lang.String)>("unable to load security properties -- using defaults");

     label46:
        return;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.io.IOException from label0 to label1 with label6;
        catch java.io.IOException from label9 to label10 with label11;
        catch java.lang.Throwable from label0 to label1 with label13;
        catch java.lang.Throwable from label7 to label8 with label13;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.io.IOException from label27 to label28 with label29;
        catch java.lang.Exception from label23 to label26 with label31;
        catch java.io.IOException from label34 to label35 with label36;
        catch java.lang.Throwable from label23 to label26 with label38;
        catch java.lang.Throwable from label32 to label33 with label38;
        catch java.io.IOException from label41 to label42 with label43;
        catch java.lang.Throwable from label39 to label40 with label38;
    }

    private static void initializeStatic()
    {
        java.util.Properties $r0, $r2, $r4, $r6, $r8, $r10;

        $r0 = <java.security.Security: java.util.Properties props>;
        virtualinvoke $r0.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("security.provider.1", "sun.security.provider.Sun");
        $r2 = <java.security.Security: java.util.Properties props>;
        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("security.provider.2", "sun.security.rsa.SunRsaSign");
        $r4 = <java.security.Security: java.util.Properties props>;
        virtualinvoke $r4.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("security.provider.3", "com.sun.net.ssl.internal.ssl.Provider");
        $r6 = <java.security.Security: java.util.Properties props>;
        virtualinvoke $r6.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("security.provider.4", "com.sun.crypto.provider.SunJCE");
        $r8 = <java.security.Security: java.util.Properties props>;
        virtualinvoke $r8.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("security.provider.5", "sun.security.jgss.SunProvider");
        $r10 = <java.security.Security: java.util.Properties props>;
        virtualinvoke $r10.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("security.provider.6", "com.sun.security.sasl.Provider");
        return;
    }

    private void <init>()
    {
        java.security.Security r0;

        r0 := @this: java.security.Security;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    private static java.io.File securityPropFile(java.lang.String)
    {
        java.lang.String r0, r1, $r4, $r12;
        java.lang.StringBuilder $r2, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.io.File $r3;

        r0 := @parameter0: java.lang.String;
        r1 = <java.io.File: java.lang.String separator>;
        $r3 = new java.io.File;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lib");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("security");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r12);
        return $r3;
    }

    private static java.security.Security$ProviderProperty getProviderProperty(java.lang.String)
    {
        java.lang.String r0, r3, r8;
        null_type n0, n1;
        java.util.List r1;
        int i0, $i1;
        java.security.Provider r2;
        java.util.Enumeration r4;
        sun.security.jca.ProviderList $r5;
        java.lang.Object $r6, $r7;
        boolean $z0, $z1;
        java.security.Security$ProviderProperty $r9, r10;

        r0 := @parameter0: java.lang.String;
        n0 = null;
        $r5 = staticinvoke <sun.security.jca.Providers: sun.security.jca.ProviderList getProviderList()>();
        r1 = virtualinvoke $r5.<sun.security.jca.ProviderList: java.util.List providers()>();
        i0 = 0;

     label0:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();
        if i0 >= $i1 goto label4;

        n1 = null;
        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);
        r2 = (java.security.Provider) $r6;
        r3 = virtualinvoke r2.<java.security.Provider: java.lang.String getProperty(java.lang.String)>(r0);
        if r3 != null goto label2;

        r4 = virtualinvoke r2.<java.security.Provider: java.util.Enumeration keys()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label2;

        if r3 != null goto label2;

        $r7 = interfaceinvoke r4.<java.util.Enumeration: java.lang.Object nextElement()>();
        r8 = (java.lang.String) $r7;
        $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r8);
        if $z1 == 0 goto label1;

        r3 = virtualinvoke r2.<java.security.Provider: java.lang.String getProperty(java.lang.String)>(r8);
        goto label2;

     label2:
        if r3 == null goto label3;

        $r9 = new java.security.Security$ProviderProperty;
        specialinvoke $r9.<java.security.Security$ProviderProperty: void <init>(java.security.Security$1)>(null);
        r10 = $r9;
        r10.<java.security.Security$ProviderProperty: java.lang.String className> = r3;
        r10.<java.security.Security$ProviderProperty: java.security.Provider provider> = r2;
        return r10;

     label3:
        i0 = i0 + 1;
        goto label0;

     label4:
        return n0;
    }

    private static java.lang.String getProviderProperty(java.lang.String, java.security.Provider)
    {
        java.lang.String r0, r2, r4;
        java.security.Provider r1;
        java.util.Enumeration r3;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.security.Provider;
        r2 = virtualinvoke r1.<java.security.Provider: java.lang.String getProperty(java.lang.String)>(r0);
        if r2 != null goto label2;

        r3 = virtualinvoke r1.<java.security.Provider: java.util.Enumeration keys()>();

     label0:
        $z0 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label2;

        if r2 != null goto label2;

        $r5 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>();
        r4 = (java.lang.String) $r5;
        $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);
        if $z1 == 0 goto label1;

        r2 = virtualinvoke r1.<java.security.Provider: java.lang.String getProperty(java.lang.String)>(r4);
        goto label2;

     label1:
        goto label0;

     label2:
        return r2;
    }

    public static java.lang.String getAlgorithmProperty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r8, $r9;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r7;
        java.security.Security$ProviderProperty r3;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Alg.");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        r3 = staticinvoke <java.security.Security: java.security.Security$ProviderProperty getProviderProperty(java.lang.String)>($r8);
        if r3 == null goto label0;

        $r9 = r3.<java.security.Security$ProviderProperty: java.lang.String className>;
        return $r9;

     label0:
        return null;
    }

    public static synchronized int insertProviderAt(java.security.Provider, int)
    {
        java.security.Provider r0;
        int i0, $i1, $i2, $i3;
        java.lang.String r1, $r7;
        sun.security.jca.ProviderList r2, r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @parameter0: java.security.Provider;
        i0 := @parameter1: int;
        r1 = virtualinvoke r0.<java.security.Provider: java.lang.String getName()>();
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("insertProvider.");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <java.security.Security: void check(java.lang.String)>($r7);
        r2 = staticinvoke <sun.security.jca.Providers: sun.security.jca.ProviderList getFullProviderList()>();
        $i1 = i0 - 1;
        r3 = staticinvoke <sun.security.jca.ProviderList: sun.security.jca.ProviderList insertAt(sun.security.jca.ProviderList,java.security.Provider,int)>(r2, r0, $i1);
        if r2 != r3 goto label0;

        return -1;

     label0:
        staticinvoke <sun.security.jca.Providers: void setProviderList(sun.security.jca.ProviderList)>(r3);
        $i2 = virtualinvoke r3.<sun.security.jca.ProviderList: int getIndex(java.lang.String)>(r1);
        $i3 = $i2 + 1;
        return $i3;
    }

    public static int addProvider(java.security.Provider)
    {
        java.security.Provider r0;
        int $i0;

        r0 := @parameter0: java.security.Provider;
        $i0 = staticinvoke <java.security.Security: int insertProviderAt(java.security.Provider,int)>(r0, 0);
        return $i0;
    }

    public static synchronized void removeProvider(java.lang.String)
    {
        java.lang.String r0, $r6;
        java.lang.StringBuilder $r1, $r4, $r5;
        sun.security.jca.ProviderList r2, r3;

        r0 := @parameter0: java.lang.String;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeProvider.");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <java.security.Security: void check(java.lang.String)>($r6);
        r2 = staticinvoke <sun.security.jca.Providers: sun.security.jca.ProviderList getFullProviderList()>();
        r3 = staticinvoke <sun.security.jca.ProviderList: sun.security.jca.ProviderList remove(sun.security.jca.ProviderList,java.lang.String)>(r2, r0);
        staticinvoke <sun.security.jca.Providers: void setProviderList(sun.security.jca.ProviderList)>(r3);
        return;
    }

    public static java.security.Provider[] getProviders()
    {
        sun.security.jca.ProviderList $r0;
        java.security.Provider[] $r1;

        $r0 = staticinvoke <sun.security.jca.Providers: sun.security.jca.ProviderList getFullProviderList()>();
        $r1 = virtualinvoke $r0.<sun.security.jca.ProviderList: java.security.Provider[] toArray()>();
        return $r1;
    }

    public static java.security.Provider getProvider(java.lang.String)
    {
        java.lang.String r0;
        sun.security.jca.ProviderList $r1;
        java.security.Provider $r2;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <sun.security.jca.Providers: sun.security.jca.ProviderList getProviderList()>();
        $r2 = virtualinvoke $r1.<sun.security.jca.ProviderList: java.security.Provider getProvider(java.lang.String)>(r0);
        return $r2;
    }

    public static java.security.Provider[] getProviders(java.lang.String)
    {
        java.lang.String r0, r2, r3;
        null_type n0, n1;
        int i0, $i1;
        java.util.Hashtable r1, $r4;
        java.security.Provider[] $r6;

        r0 := @parameter0: java.lang.String;
        n0 = null;
        n1 = null;
        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);
        if i0 != -1 goto label0;

        r2 = r0;
        r3 = "";
        goto label1;

     label0:
        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        $i1 = i0 + 1;
        r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

     label1:
        $r4 = new java.util.Hashtable;
        specialinvoke $r4.<java.util.Hashtable: void <init>(int)>(1);
        r1 = $r4;
        virtualinvoke r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);
        $r6 = staticinvoke <java.security.Security: java.security.Provider[] getProviders(java.util.Map)>(r1);
        return $r6;
    }

    public static java.security.Provider[] getProviders(java.util.Map)
    {
        java.util.Map r0;
        java.security.Provider[] r1, r15;
        java.util.Set r2;
        java.util.LinkedHashSet r3, r7, $r10;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator r4, r8;
        java.lang.String r5, r6;
        java.security.Provider r9, $r17;
        java.lang.Object $r11, $r12, $r13, $r16;
        java.lang.Object[] r14;
        int $i0, i1, $i2;

        r0 := @parameter0: java.util.Map;
        r1 = staticinvoke <java.security.Security: java.security.Provider[] getProviders()>();
        r2 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();
        $r10 = new java.util.LinkedHashSet;
        specialinvoke $r10.<java.util.LinkedHashSet: void <init>(int)>(5);
        r3 = $r10;
        if r2 == null goto label0;

        if r1 != null goto label1;

     label0:
        return r1;

     label1:
        z0 = 1;
        r4 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label9;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.lang.String) $r11;
        $r12 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);
        r6 = (java.lang.String) $r12;
        r7 = staticinvoke <java.security.Security: java.util.LinkedHashSet getAllQualifyingCandidates(java.lang.String,java.lang.String,java.security.Provider[])>(r5, r6, r1);
        if z0 == 0 goto label3;

        r3 = r7;
        z0 = 0;

     label3:
        if r7 == null goto label7;

        $z2 = virtualinvoke r7.<java.util.LinkedHashSet: boolean isEmpty()>();
        if $z2 != 0 goto label7;

        r8 = virtualinvoke r3.<java.util.LinkedHashSet: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();
        if $z3 == 0 goto label6;

        $r13 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();
        r9 = (java.security.Provider) $r13;
        $z4 = virtualinvoke r7.<java.util.LinkedHashSet: boolean contains(java.lang.Object)>(r9);
        if $z4 != 0 goto label5;

        interfaceinvoke r8.<java.util.Iterator: void remove()>();

     label5:
        goto label4;

     label6:
        goto label8;

     label7:
        r3 = null;
        goto label9;

     label8:
        goto label2;

     label9:
        if r3 == null goto label10;

        $z5 = virtualinvoke r3.<java.util.LinkedHashSet: boolean isEmpty()>();
        if $z5 == 0 goto label11;

     label10:
        return null;

     label11:
        r14 = virtualinvoke r3.<java.util.LinkedHashSet: java.lang.Object[] toArray()>();
        $i0 = lengthof r14;
        r15 = newarray (java.security.Provider)[$i0];
        i1 = 0;

     label12:
        $i2 = lengthof r15;
        if i1 >= $i2 goto label13;

        $r16 = r14[i1];
        $r17 = (java.security.Provider) $r16;
        r15[i1] = $r17;
        i1 = i1 + 1;
        goto label12;

     label13:
        return r15;
    }

    private static java.lang.Class getSpiClass(java.lang.String)
    {
        java.lang.String r0, $r9;
        java.util.Map $r1, $r11;
        java.lang.Class r2, r10;
        java.lang.ClassNotFoundException r3, $r14;
        java.lang.Object $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.AssertionError $r15;

        r0 := @parameter0: java.lang.String;
        $r1 = <java.security.Security: java.util.Map spiMap>;
        $r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);
        r2 = (java.lang.Class) $r4;
        if r2 == null goto label0;

        return r2;

     label0:
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("java.security.");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Spi");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        r10 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r9);
        $r11 = <java.security.Security: java.util.Map spiMap>;
        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r10);

     label1:
        return r10;

     label2:
        $r14 := @caughtexception;
        r3 = $r14;
        $r15 = new java.lang.AssertionError;
        specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)>("Spi class not found", r3);
        throw $r15;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static java.lang.Object[] getImpl(java.lang.String, java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        java.lang.String r0, r1, r2;
        java.lang.Class $r3, $r6;
        sun.security.jca.GetInstance$Instance $r4, $r7;
        java.lang.Object[] $r5, $r8;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        if r2 != null goto label0;

        $r3 = staticinvoke <java.security.Security: java.lang.Class getSpiClass(java.lang.String)>(r1);
        $r4 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>(r1, $r3, r0);
        $r5 = virtualinvoke $r4.<sun.security.jca.GetInstance$Instance: java.lang.Object[] toArray()>();
        return $r5;

     label0:
        $r6 = staticinvoke <java.security.Security: java.lang.Class getSpiClass(java.lang.String)>(r1);
        $r7 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.lang.String)>(r1, $r6, r0, r2);
        $r8 = virtualinvoke $r7.<sun.security.jca.GetInstance$Instance: java.lang.Object[] toArray()>();
        return $r8;
    }

    static java.lang.Object[] getImpl(java.lang.String, java.lang.String, java.lang.String, java.lang.Object) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.InvalidAlgorithmParameterException
    {
        java.lang.String r0, r1, r2;
        java.lang.Object r3;
        java.lang.Class $r4, $r7;
        sun.security.jca.GetInstance$Instance $r5, $r8;
        java.lang.Object[] $r6, $r9;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        r3 := @parameter3: java.lang.Object;
        if r2 != null goto label0;

        $r4 = staticinvoke <java.security.Security: java.lang.Class getSpiClass(java.lang.String)>(r1);
        $r5 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.lang.Object)>(r1, $r4, r0, r3);
        $r6 = virtualinvoke $r5.<sun.security.jca.GetInstance$Instance: java.lang.Object[] toArray()>();
        return $r6;

     label0:
        $r7 = staticinvoke <java.security.Security: java.lang.Class getSpiClass(java.lang.String)>(r1);
        $r8 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.lang.Object,java.lang.String)>(r1, $r7, r0, r3, r2);
        $r9 = virtualinvoke $r8.<sun.security.jca.GetInstance$Instance: java.lang.Object[] toArray()>();
        return $r9;
    }

    static java.lang.Object[] getImpl(java.lang.String, java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0, r1;
        java.security.Provider r2;
        java.lang.Class $r3;
        sun.security.jca.GetInstance$Instance $r4;
        java.lang.Object[] $r5;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.security.Provider;
        $r3 = staticinvoke <java.security.Security: java.lang.Class getSpiClass(java.lang.String)>(r1);
        $r4 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>(r1, $r3, r0, r2);
        $r5 = virtualinvoke $r4.<sun.security.jca.GetInstance$Instance: java.lang.Object[] toArray()>();
        return $r5;
    }

    static java.lang.Object[] getImpl(java.lang.String, java.lang.String, java.security.Provider, java.lang.Object) throws java.security.NoSuchAlgorithmException, java.security.InvalidAlgorithmParameterException
    {
        java.lang.String r0, r1;
        java.security.Provider r2;
        java.lang.Object r3;
        java.lang.Class $r4;
        sun.security.jca.GetInstance$Instance $r5;
        java.lang.Object[] $r6;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.security.Provider;
        r3 := @parameter3: java.lang.Object;
        $r4 = staticinvoke <java.security.Security: java.lang.Class getSpiClass(java.lang.String)>(r1);
        $r5 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.lang.Object,java.security.Provider)>(r1, $r4, r0, r3, r2);
        $r6 = virtualinvoke $r5.<sun.security.jca.GetInstance$Instance: java.lang.Object[] toArray()>();
        return $r6;
    }

    public static java.lang.String getProperty(java.lang.String)
    {
        java.lang.String r0, r4, $r7;
        java.lang.SecurityManager r1;
        java.security.SecurityPermission $r2;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.util.Properties $r8;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = new java.security.SecurityPermission;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getProperty.");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.security.SecurityPermission: void <init>(java.lang.String)>($r7);
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label0:
        $r8 = <java.security.Security: java.util.Properties props>;
        r4 = virtualinvoke $r8.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r0);
        if r4 == null goto label1;

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

     label1:
        return r4;
    }

    public static void setProperty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r5;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.util.Properties $r6;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setProperty.");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <java.security.Security: void check(java.lang.String)>($r5);
        $r6 = <java.security.Security: java.util.Properties props>;
        virtualinvoke $r6.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);
        staticinvoke <java.security.Security: void invalidateSMCache(java.lang.String)>(r0);
        return;
    }

    private static void invalidateSMCache(java.lang.String)
    {
        java.lang.String r0;
        boolean z0, z1;
        java.security.Security$2 $r1;

        r0 := @parameter0: java.lang.String;
        z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("package.access");
        z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("package.definition");
        if z0 != 0 goto label0;

        if z1 == 0 goto label1;

     label0:
        $r1 = new java.security.Security$2;
        specialinvoke $r1.<java.security.Security$2: void <init>(boolean)>(z0);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);

     label1:
        return;
    }

    private static void check(java.lang.String)
    {
        java.lang.String r0;
        java.lang.SecurityManager r1;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        virtualinvoke r1.<java.lang.SecurityManager: void checkSecurityAccess(java.lang.String)>(r0);

     label0:
        return;
    }

    private static java.util.LinkedHashSet getAllQualifyingCandidates(java.lang.String, java.lang.String, java.security.Provider[])
    {
        java.lang.String r0, r1, r4, r5, r6;
        java.security.Provider[] r2;
        java.lang.String[] r3;
        java.util.LinkedHashSet $r7;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.security.Provider[];
        r3 = staticinvoke <java.security.Security: java.lang.String[] getFilterComponents(java.lang.String,java.lang.String)>(r0, r1);
        r4 = r3[0];
        r5 = r3[1];
        r6 = r3[2];
        $r7 = staticinvoke <java.security.Security: java.util.LinkedHashSet getProvidersNotUsingCache(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.Provider[])>(r4, r5, r6, r1, r2);
        return $r7;
    }

    private static java.util.LinkedHashSet getProvidersNotUsingCache(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.security.Provider[])
    {
        java.lang.String r0, r1, r2, r3;
        java.security.Provider[] r4;
        java.util.LinkedHashSet $r5, r6;
        int i0, $i1;
        java.security.Provider $r7, $r8;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        r3 := @parameter3: java.lang.String;
        r4 := @parameter4: java.security.Provider[];
        $r5 = new java.util.LinkedHashSet;
        specialinvoke $r5.<java.util.LinkedHashSet: void <init>(int)>(5);
        r6 = $r5;
        i0 = 0;

     label0:
        $i1 = lengthof r4;
        if i0 >= $i1 goto label2;

        $r7 = r4[i0];
        $z0 = staticinvoke <java.security.Security: boolean isCriterionSatisfied(java.security.Provider,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r7, r0, r1, r2, r3);
        if $z0 == 0 goto label1;

        $r8 = r4[i0];
        virtualinvoke r6.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r8);

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        return r6;
    }

    private static boolean isCriterionSatisfied(java.security.Provider, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.security.Provider r0;
        java.lang.String r1, r2, r3, r4, r6, r7, r8, $r21, r26;
        java.lang.StringBuilder $r5, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25, $r27, $r28, $r29, $r30;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.security.Provider;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        r3 := @parameter3: java.lang.String;
        r4 := @parameter4: java.lang.String;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        r6 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        if r3 == null goto label0;

        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        r6 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label0:
        r7 = staticinvoke <java.security.Security: java.lang.String getProviderProperty(java.lang.String,java.security.Provider)>(r6, r0);
        if r7 != null goto label3;

        $r16 = new java.lang.StringBuilder;
        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Alg.Alias.");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        r8 = staticinvoke <java.security.Security: java.lang.String getProviderProperty(java.lang.String,java.security.Provider)>($r21, r0);
        if r8 == null goto label2;

        $r22 = new java.lang.StringBuilder;
        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);
        r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();
        if r3 == null goto label1;

        $r27 = new java.lang.StringBuilder;
        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        r26 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        r7 = staticinvoke <java.security.Security: java.lang.String getProviderProperty(java.lang.String,java.security.Provider)>(r26, r0);

     label2:
        if r7 != null goto label3;

        return 0;

     label3:
        if r3 != null goto label4;

        return 1;

     label4:
        $z0 = staticinvoke <java.security.Security: boolean isStandardAttr(java.lang.String)>(r3);
        if $z0 == 0 goto label5;

        $z1 = staticinvoke <java.security.Security: boolean isConstraintSatisfied(java.lang.String,java.lang.String,java.lang.String)>(r3, r4, r7);
        return $z1;

     label5:
        $z2 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r7);
        return $z2;
    }

    private static boolean isStandardAttr(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;
        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("KeySize");
        if $z0 == 0 goto label0;

        return 1;

     label0:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ImplementedIn");
        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static boolean isConstraintSatisfied(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2;
        int i0, i1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("KeySize");
        if $z0 == 0 goto label1;

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);
        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);
        if i0 > i1 goto label0;

        return 1;

     label0:
        return 0;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ImplementedIn");
        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);
        return $z2;

     label2:
        return 0;
    }

    static java.lang.String[] getFilterComponents(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, r3, $r5, r6, $r9;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        null_type n0;
        java.security.InvalidParameterException $r4, $r7, $r8, $r10, $r11;
        java.lang.String[] r12;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46);
        if i0 >= 0 goto label0;

        $r4 = new java.security.InvalidParameterException;
        specialinvoke $r4.<java.security.InvalidParameterException: void <init>(java.lang.String)>("Invalid filter");
        throw $r4;

     label0:
        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        n0 = null;
        r3 = null;
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i2 != 0 goto label1;

        $i3 = i0 + 1;
        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i3);
        r6 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();
        $i4 = virtualinvoke r6.<java.lang.String: int length()>();
        if $i4 != 0 goto label6;

        $r7 = new java.security.InvalidParameterException;
        specialinvoke $r7.<java.security.InvalidParameterException: void <init>(java.lang.String)>("Invalid filter");
        throw $r7;

     label1:
        i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(32);
        if i1 != -1 goto label2;

        $r8 = new java.security.InvalidParameterException;
        specialinvoke $r8.<java.security.InvalidParameterException: void <init>(java.lang.String)>("Invalid filter");
        throw $r8;

     label2:
        $i5 = i1 + 1;
        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i5);
        r3 = virtualinvoke $r9.<java.lang.String: java.lang.String trim()>();
        $i6 = virtualinvoke r3.<java.lang.String: int length()>();
        if $i6 != 0 goto label3;

        $r10 = new java.security.InvalidParameterException;
        specialinvoke $r10.<java.security.InvalidParameterException: void <init>(java.lang.String)>("Invalid filter");
        throw $r10;

     label3:
        if i1 < i0 goto label4;

        $i7 = i1 - 1;
        if i0 != $i7 goto label5;

     label4:
        $r11 = new java.security.InvalidParameterException;
        specialinvoke $r11.<java.security.InvalidParameterException: void <init>(java.lang.String)>("Invalid filter");
        throw $r11;

     label5:
        $i8 = i0 + 1;
        r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i8, i1);

     label6:
        r12 = newarray (java.lang.String)[3];
        r12[0] = r2;
        r12[1] = r6;
        r12[2] = r3;
        return r12;
    }

    public static java.util.Set getAlgorithms(java.lang.String)
    {
        java.lang.String r0, r4, $r9, $r10, $r11;
        java.util.HashSet r1, $r6;
        java.security.Provider[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.Enumeration r3;
        boolean $z0, $z1, $z2;
        java.util.Set $r5, $r12;
        java.security.Provider $r7;
        java.lang.Object $r8;

        r0 := @parameter0: java.lang.String;
        if r0 == null goto label0;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i1 == 0 goto label0;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".");
        if $z0 == 0 goto label1;

     label0:
        $r5 = <java.util.Collections: java.util.Set EMPTY_SET>;
        return $r5;

     label1:
        $r6 = new java.util.HashSet;
        specialinvoke $r6.<java.util.HashSet: void <init>()>();
        r1 = $r6;
        r2 = staticinvoke <java.security.Security: java.security.Provider[] getProviders()>();
        i0 = 0;

     label2:
        $i2 = lengthof r2;
        if i0 >= $i2 goto label6;

        $r7 = r2[i0];
        r3 = virtualinvoke $r7.<java.security.Provider: java.util.Enumeration keys()>();

     label3:
        $z1 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z1 == 0 goto label5;

        $r8 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>();
        $r9 = (java.lang.String) $r8;
        r4 = virtualinvoke $r9.<java.lang.String: java.lang.String toUpperCase()>();
        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase()>();
        $z2 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>($r10);
        if $z2 == 0 goto label4;

        $i3 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>(" ");
        if $i3 >= 0 goto label4;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();
        $i5 = $i4 + 1;
        $r11 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i5);
        virtualinvoke r1.<java.util.HashSet: boolean add(java.lang.Object)>($r11);

     label4:
        goto label3;

     label5:
        i0 = i0 + 1;
        goto label2;

     label6:
        $r12 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r1);
        return $r12;
    }

    static void access$000()
    {
        staticinvoke <java.security.Security: void initialize()>();
        return;
    }

    static void <clinit>()
    {
        sun.security.util.Debug $r0;
        java.security.Security$1 $r1;
        java.util.concurrent.ConcurrentHashMap $r3;

        $r0 = staticinvoke <sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String)>("properties");
        <java.security.Security: sun.security.util.Debug sdebug> = $r0;
        $r1 = new java.security.Security$1;
        specialinvoke $r1.<java.security.Security$1: void <init>()>();
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        $r3 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
        <java.security.Security: java.util.Map spiMap> = $r3;
        return;
    }
}
