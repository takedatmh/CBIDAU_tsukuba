public class sun.nio.ch.ThreadPool extends java.lang.Object
{
    private static final java.lang.String DEFAULT_THREAD_POOL_THREAD_FACTORY;
    private static final java.lang.String DEFAULT_THREAD_POOL_INITIAL_SIZE;
    private final java.util.concurrent.ExecutorService executor;
    private final boolean isFixed;
    private final int poolSize;

    private void <init>(java.util.concurrent.ExecutorService, boolean, int)
    {
        sun.nio.ch.ThreadPool r0;
        java.util.concurrent.ExecutorService r1;
        boolean z0;
        int i0;

        r0 := @this: sun.nio.ch.ThreadPool;
        r1 := @parameter0: java.util.concurrent.ExecutorService;
        z0 := @parameter1: boolean;
        i0 := @parameter2: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.ThreadPool: java.util.concurrent.ExecutorService executor> = r1;
        r0.<sun.nio.ch.ThreadPool: boolean isFixed> = z0;
        r0.<sun.nio.ch.ThreadPool: int poolSize> = i0;
        return;
    }

    java.util.concurrent.ExecutorService executor()
    {
        sun.nio.ch.ThreadPool r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: sun.nio.ch.ThreadPool;
        $r1 = r0.<sun.nio.ch.ThreadPool: java.util.concurrent.ExecutorService executor>;
        return $r1;
    }

    boolean isFixedThreadPool()
    {
        sun.nio.ch.ThreadPool r0;
        boolean $z0;

        r0 := @this: sun.nio.ch.ThreadPool;
        $z0 = r0.<sun.nio.ch.ThreadPool: boolean isFixed>;
        return $z0;
    }

    int poolSize()
    {
        sun.nio.ch.ThreadPool r0;
        int $i0;

        r0 := @this: sun.nio.ch.ThreadPool;
        $i0 = r0.<sun.nio.ch.ThreadPool: int poolSize>;
        return $i0;
    }

    static java.util.concurrent.ThreadFactory defaultThreadFactory()
    {
        java.lang.SecurityManager $r0;
        sun.nio.ch.ThreadPool$1 $r1;
        sun.nio.ch.ThreadPool$2 $r2;

        $r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if $r0 != null goto label0;

        $r1 = new sun.nio.ch.ThreadPool$1;
        specialinvoke $r1.<sun.nio.ch.ThreadPool$1: void <init>()>();
        return $r1;

     label0:
        $r2 = new sun.nio.ch.ThreadPool$2;
        specialinvoke $r2.<sun.nio.ch.ThreadPool$2: void <init>()>();
        return $r2;
    }

    static sun.nio.ch.ThreadPool getDefault()
    {
        sun.nio.ch.ThreadPool $r0;

        $r0 = <sun.nio.ch.ThreadPool$DefaultThreadPoolHolder: sun.nio.ch.ThreadPool defaultThreadPool>;
        return $r0;
    }

    static sun.nio.ch.ThreadPool createDefault()
    {
        int i0;
        java.util.concurrent.ThreadFactory r0;
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.SynchronousQueue $r2;
        java.util.concurrent.ThreadPoolExecutor r3, $r5;
        java.lang.Runtime $r4;
        sun.nio.ch.ThreadPool $r6;

        i0 = staticinvoke <sun.nio.ch.ThreadPool: int getDefaultThreadPoolInitialSize()>();
        if i0 >= 0 goto label0;

        $r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
        i0 = virtualinvoke $r4.<java.lang.Runtime: int availableProcessors()>();

     label0:
        r0 = staticinvoke <sun.nio.ch.ThreadPool: java.util.concurrent.ThreadFactory getDefaultThreadPoolThreadFactory()>();
        if r0 != null goto label1;

        r0 = staticinvoke <sun.nio.ch.ThreadPool: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

     label1:
        $r5 = new java.util.concurrent.ThreadPoolExecutor;
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
        $r2 = new java.util.concurrent.SynchronousQueue;
        specialinvoke $r2.<java.util.concurrent.SynchronousQueue: void <init>()>();
        specialinvoke $r5.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(0, 2147483647, 9223372036854775807L, $r1, $r2, r0);
        r3 = $r5;
        $r6 = new sun.nio.ch.ThreadPool;
        specialinvoke $r6.<sun.nio.ch.ThreadPool: void <init>(java.util.concurrent.ExecutorService,boolean,int)>(r3, 0, i0);
        return $r6;
    }

    static sun.nio.ch.ThreadPool create(int, java.util.concurrent.ThreadFactory)
    {
        int i0;
        java.util.concurrent.ThreadFactory r0;
        java.util.concurrent.ExecutorService r1;
        java.lang.IllegalArgumentException $r2;
        sun.nio.ch.ThreadPool $r3;

        i0 := @parameter0: int;
        r0 := @parameter1: java.util.concurrent.ThreadFactory;
        if i0 > 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'nThreads\' must be > 0");
        throw $r2;

     label0:
        r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>(i0, r0);
        $r3 = new sun.nio.ch.ThreadPool;
        specialinvoke $r3.<sun.nio.ch.ThreadPool: void <init>(java.util.concurrent.ExecutorService,boolean,int)>(r1, 1, i0);
        return $r3;
    }

    public static sun.nio.ch.ThreadPool wrap(java.util.concurrent.ExecutorService, int)
    {
        java.util.concurrent.ExecutorService r0;
        int i0, i1;
        java.lang.NullPointerException $r1;
        boolean $z0;
        java.util.concurrent.ThreadPoolExecutor $r2;
        java.lang.Runtime $r3;
        sun.nio.ch.ThreadPool $r4;

        r0 := @parameter0: java.util.concurrent.ExecutorService;
        i0 := @parameter1: int;
        if r0 != null goto label0;

        $r1 = new java.lang.NullPointerException;
        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("\'executor\' is null");
        throw $r1;

     label0:
        $z0 = r0 instanceof java.util.concurrent.ThreadPoolExecutor;
        if $z0 == 0 goto label3;

        $r2 = (java.util.concurrent.ThreadPoolExecutor) r0;
        i1 = virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: int getMaximumPoolSize()>();
        if i1 != 2147483647 goto label2;

        if i0 >= 0 goto label1;

        $r3 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
        i0 = virtualinvoke $r3.<java.lang.Runtime: int availableProcessors()>();
        goto label2;

     label1:
        i0 = 0;

     label2:
        goto label4;

     label3:
        if i0 >= 0 goto label4;

        i0 = 0;

     label4:
        $r4 = new sun.nio.ch.ThreadPool;
        specialinvoke $r4.<sun.nio.ch.ThreadPool: void <init>(java.util.concurrent.ExecutorService,boolean,int)>(r0, 0, i0);
        return $r4;
    }

    private static int getDefaultThreadPoolInitialSize()
    {
        sun.security.action.GetPropertyAction $r0;
        java.lang.String r1, $r9;
        java.lang.NumberFormatException r2, $r4;
        java.lang.Object $r3;
        int $i0;
        java.lang.Error $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        $r0 = new sun.security.action.GetPropertyAction;
        specialinvoke $r0.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("java.nio.channels.DefaultThreadPool.initialSize");
        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        r1 = (java.lang.String) $r3;
        if r1 == null goto label3;

     label0:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

     label1:
        return $i0;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        $r5 = new java.lang.Error;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value of property \'java.nio.channels.DefaultThreadPool.initialSize\' is invalid: ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.Error: void <init>(java.lang.String)>($r9);
        throw $r5;

     label3:
        return -1;

        catch java.lang.NumberFormatException from label0 to label1 with label2;
    }

    private static java.util.concurrent.ThreadFactory getDefaultThreadPoolThreadFactory()
    {
        sun.security.action.GetPropertyAction $r0;
        java.lang.String r1;
        java.lang.Class r2;
        java.lang.Object $r3, $r5;
        java.lang.ClassLoader $r4;
        java.util.concurrent.ThreadFactory $r6;
        java.lang.ClassNotFoundException $r7, r8;
        java.lang.Error $r9, $r12, $r15;
        java.lang.InstantiationException $r10, r11;
        java.lang.IllegalAccessException $r13, r14;

        $r0 = new sun.security.action.GetPropertyAction;
        specialinvoke $r0.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("java.nio.channels.DefaultThreadPool.threadFactory");
        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        r1 = (java.lang.String) $r3;
        if r1 == null goto label5;

     label0:
        $r4 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 1, $r4);
        $r5 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();
        $r6 = (java.util.concurrent.ThreadFactory) $r5;

     label1:
        return $r6;

     label2:
        $r7 := @caughtexception;
        r8 = $r7;
        $r9 = new java.lang.Error;
        specialinvoke $r9.<java.lang.Error: void <init>(java.lang.Throwable)>(r8);
        throw $r9;

     label3:
        $r10 := @caughtexception;
        r11 = $r10;
        $r12 = new java.lang.Error;
        specialinvoke $r12.<java.lang.Error: void <init>(java.lang.Throwable)>(r11);
        throw $r12;

     label4:
        $r13 := @caughtexception;
        r14 = $r13;
        $r15 = new java.lang.Error;
        specialinvoke $r15.<java.lang.Error: void <init>(java.lang.Throwable)>(r14);
        throw $r15;

     label5:
        return null;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
        catch java.lang.InstantiationException from label0 to label1 with label3;
        catch java.lang.IllegalAccessException from label0 to label1 with label4;
    }
}
