public final class sun.net.sdp.SdpSupport extends java.lang.Object
{
    private static final java.lang.String os;
    private static final boolean isSupported;
    private static final sun.misc.JavaIOFileDescriptorAccess fdAccess;

    private void <init>()
    {
        sun.net.sdp.SdpSupport r0;

        r0 := @this: sun.net.sdp.SdpSupport;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static java.io.FileDescriptor createSocket() throws java.io.IOException
    {
        boolean $z0;
        int i0;
        java.io.FileDescriptor r0, $r2;
        java.lang.UnsupportedOperationException $r1;
        sun.misc.JavaIOFileDescriptorAccess $r3;

        $z0 = <sun.net.sdp.SdpSupport: boolean isSupported>;
        if $z0 != 0 goto label0;

        $r1 = new java.lang.UnsupportedOperationException;
        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("SDP not supported on this platform");
        throw $r1;

     label0:
        i0 = staticinvoke <sun.net.sdp.SdpSupport: int create0()>();
        $r2 = new java.io.FileDescriptor;
        specialinvoke $r2.<java.io.FileDescriptor: void <init>()>();
        r0 = $r2;
        $r3 = <sun.net.sdp.SdpSupport: sun.misc.JavaIOFileDescriptorAccess fdAccess>;
        interfaceinvoke $r3.<sun.misc.JavaIOFileDescriptorAccess: void set(java.io.FileDescriptor,int)>(r0, i0);
        return r0;
    }

    public static void convertSocket(java.io.FileDescriptor) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        boolean $z0;
        int i0;
        java.lang.UnsupportedOperationException $r1;
        sun.misc.JavaIOFileDescriptorAccess $r2;

        r0 := @parameter0: java.io.FileDescriptor;
        $z0 = <sun.net.sdp.SdpSupport: boolean isSupported>;
        if $z0 != 0 goto label0;

        $r1 = new java.lang.UnsupportedOperationException;
        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("SDP not supported on this platform");
        throw $r1;

     label0:
        $r2 = <sun.net.sdp.SdpSupport: sun.misc.JavaIOFileDescriptorAccess fdAccess>;
        i0 = interfaceinvoke $r2.<sun.misc.JavaIOFileDescriptorAccess: int get(java.io.FileDescriptor)>(r0);
        staticinvoke <sun.net.sdp.SdpSupport: void convert0(int)>(i0);
        return;
    }

    private static native int create0() throws java.io.IOException;

    private static native void convert0(int) throws java.io.IOException;

    static void <clinit>()
    {
        sun.security.action.GetPropertyAction $r0;
        java.lang.Object $r1;
        java.lang.String $r2, $r3, $r4;
        boolean $z0, $z1, $z2;
        sun.misc.JavaIOFileDescriptorAccess $r5;
        sun.security.action.LoadLibraryAction $r6;

        $r0 = new sun.security.action.GetPropertyAction;
        specialinvoke $r0.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("os.name");
        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        $r2 = (java.lang.String) $r1;
        <sun.net.sdp.SdpSupport: java.lang.String os> = $r2;
        $r3 = <sun.net.sdp.SdpSupport: java.lang.String os>;
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("SunOS");
        if $z0 != 0 goto label0;

        $r4 = <sun.net.sdp.SdpSupport: java.lang.String os>;
        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("Linux");
        if $z1 == 0 goto label1;

     label0:
        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        <sun.net.sdp.SdpSupport: boolean isSupported> = $z2;
        $r5 = staticinvoke <sun.misc.SharedSecrets: sun.misc.JavaIOFileDescriptorAccess getJavaIOFileDescriptorAccess()>();
        <sun.net.sdp.SdpSupport: sun.misc.JavaIOFileDescriptorAccess fdAccess> = $r5;
        $r6 = new sun.security.action.LoadLibraryAction;
        specialinvoke $r6.<sun.security.action.LoadLibraryAction: void <init>(java.lang.String)>("net");
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r6);
        return;
    }
}
