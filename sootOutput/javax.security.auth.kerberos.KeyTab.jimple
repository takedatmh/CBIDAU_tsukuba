public final class javax.security.auth.kerberos.KeyTab extends java.lang.Object
{
    private final java.io.File file;

    private void <init>(java.io.File)
    {
        javax.security.auth.kerberos.KeyTab r0;
        java.io.File r1;

        r0 := @this: javax.security.auth.kerberos.KeyTab;
        r1 := @parameter0: java.io.File;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<javax.security.auth.kerberos.KeyTab: java.io.File file> = r1;
        return;
    }

    public static javax.security.auth.kerberos.KeyTab getInstance(java.io.File)
    {
        java.io.File r0;
        java.lang.NullPointerException $r1;
        javax.security.auth.kerberos.KeyTab $r2;

        r0 := @parameter0: java.io.File;
        if r0 != null goto label0;

        $r1 = new java.lang.NullPointerException;
        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("file must be non null");
        throw $r1;

     label0:
        $r2 = new javax.security.auth.kerberos.KeyTab;
        specialinvoke $r2.<javax.security.auth.kerberos.KeyTab: void <init>(java.io.File)>(r0);
        return $r2;
    }

    public static javax.security.auth.kerberos.KeyTab getInstance()
    {
        javax.security.auth.kerberos.KeyTab $r0;

        $r0 = new javax.security.auth.kerberos.KeyTab;
        specialinvoke $r0.<javax.security.auth.kerberos.KeyTab: void <init>(java.io.File)>(null);
        return $r0;
    }

    private sun.security.krb5.internal.ktab.KeyTab takeSnapshot()
    {
        javax.security.auth.kerberos.KeyTab r0;
        java.security.AccessControlException r1, r2, $r5, $r7;
        java.io.File $r3, $r6;
        sun.security.krb5.internal.ktab.KeyTab $r4;
        java.lang.StackTraceElement[] $r8;

        r0 := @this: javax.security.auth.kerberos.KeyTab;

     label0:
        $r3 = r0.<javax.security.auth.kerberos.KeyTab: java.io.File file>;
        $r4 = staticinvoke <sun.security.krb5.internal.ktab.KeyTab: sun.security.krb5.internal.ktab.KeyTab getInstance(java.io.File)>($r3);

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;
        r1 = $r5;
        $r6 = r0.<javax.security.auth.kerberos.KeyTab: java.io.File file>;
        if $r6 == null goto label3;

        throw r1;

     label3:
        $r7 = new java.security.AccessControlException;
        specialinvoke $r7.<java.security.AccessControlException: void <init>(java.lang.String)>("Access to default keytab denied (modified exception)");
        r2 = $r7;
        $r8 = virtualinvoke r1.<java.security.AccessControlException: java.lang.StackTraceElement[] getStackTrace()>();
        virtualinvoke r2.<java.security.AccessControlException: void setStackTrace(java.lang.StackTraceElement[])>($r8);
        throw r2;

        catch java.security.AccessControlException from label0 to label1 with label2;
    }

    public javax.security.auth.kerberos.KerberosKey[] getKeys(javax.security.auth.kerberos.KerberosPrincipal)
    {
        javax.security.auth.kerberos.KeyTab r0;
        javax.security.auth.kerberos.KerberosPrincipal r1;
        sun.security.krb5.PrincipalName $r2;
        sun.security.krb5.EncryptionKey[] r3;
        javax.security.auth.kerberos.KerberosKey[] r4, $r20;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Integer r5;
        sun.security.krb5.internal.ktab.KeyTab $r7;
        java.lang.String $r8;
        sun.security.krb5.EncryptionKey $r9, $r13, $r15, $r16;
        javax.security.auth.kerberos.KerberosKey $r11;
        byte[] $r14;
        sun.security.krb5.RealmException $r18, r19;

        r0 := @this: javax.security.auth.kerberos.KeyTab;
        r1 := @parameter0: javax.security.auth.kerberos.KerberosPrincipal;

     label0:
        $r7 = specialinvoke r0.<javax.security.auth.kerberos.KeyTab: sun.security.krb5.internal.ktab.KeyTab takeSnapshot()>();
        $r2 = new sun.security.krb5.PrincipalName;
        $r8 = virtualinvoke r1.<javax.security.auth.kerberos.KerberosPrincipal: java.lang.String getName()>();
        specialinvoke $r2.<sun.security.krb5.PrincipalName: void <init>(java.lang.String)>($r8);
        r3 = virtualinvoke $r7.<sun.security.krb5.internal.ktab.KeyTab: sun.security.krb5.EncryptionKey[] readServiceKeys(sun.security.krb5.PrincipalName)>($r2);
        $i1 = lengthof r3;
        r4 = newarray (javax.security.auth.kerberos.KerberosKey)[$i1];
        i0 = 0;

     label1:
        $i2 = lengthof r4;
        if i0 >= $i2 goto label4;

        $r9 = r3[i0];
        r5 = virtualinvoke $r9.<sun.security.krb5.EncryptionKey: java.lang.Integer getKeyVersionNumber()>();
        $i3 = i0;
        $r11 = new javax.security.auth.kerberos.KerberosKey;
        $r13 = r3[i0];
        $r14 = virtualinvoke $r13.<sun.security.krb5.EncryptionKey: byte[] getBytes()>();
        $r15 = r3[i0];
        $i4 = virtualinvoke $r15.<sun.security.krb5.EncryptionKey: int getEType()>();
        if r5 != null goto label2;

        $i5 = 0;
        goto label3;

     label2:
        $i5 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

     label3:
        specialinvoke $r11.<javax.security.auth.kerberos.KerberosKey: void <init>(javax.security.auth.kerberos.KerberosPrincipal,byte[],int,int)>(r1, $r14, $i4, $i5);
        r4[$i3] = $r11;
        $r16 = r3[i0];
        virtualinvoke $r16.<sun.security.krb5.EncryptionKey: void destroy()>();
        i0 = i0 + 1;
        goto label1;

     label4:
        return r4;

     label5:
        $r18 := @caughtexception;
        r19 = $r18;
        $r20 = newarray (javax.security.auth.kerberos.KerberosKey)[0];
        return $r20;

        catch sun.security.krb5.RealmException from label0 to label4 with label5;
    }

    sun.security.krb5.EncryptionKey[] getEncryptionKeys(sun.security.krb5.PrincipalName)
    {
        javax.security.auth.kerberos.KeyTab r0;
        sun.security.krb5.PrincipalName r1;
        sun.security.krb5.internal.ktab.KeyTab $r2;
        sun.security.krb5.EncryptionKey[] $r3;

        r0 := @this: javax.security.auth.kerberos.KeyTab;
        r1 := @parameter0: sun.security.krb5.PrincipalName;
        $r2 = specialinvoke r0.<javax.security.auth.kerberos.KeyTab: sun.security.krb5.internal.ktab.KeyTab takeSnapshot()>();
        $r3 = virtualinvoke $r2.<sun.security.krb5.internal.ktab.KeyTab: sun.security.krb5.EncryptionKey[] readServiceKeys(sun.security.krb5.PrincipalName)>(r1);
        return $r3;
    }

    public boolean exists()
    {
        javax.security.auth.kerberos.KeyTab r0;
        sun.security.krb5.internal.ktab.KeyTab $r1;
        boolean $z0, $z1;

        r0 := @this: javax.security.auth.kerberos.KeyTab;
        $r1 = specialinvoke r0.<javax.security.auth.kerberos.KeyTab: sun.security.krb5.internal.ktab.KeyTab takeSnapshot()>();
        $z0 = virtualinvoke $r1.<sun.security.krb5.internal.ktab.KeyTab: boolean isMissing()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    public java.lang.String toString()
    {
        javax.security.auth.kerberos.KeyTab r0;
        java.io.File $r1, $r3;
        java.lang.String $r2;

        r0 := @this: javax.security.auth.kerberos.KeyTab;
        $r1 = r0.<javax.security.auth.kerberos.KeyTab: java.io.File file>;
        if $r1 != null goto label0;

        $r2 = "Default keytab";
        goto label1;

     label0:
        $r3 = r0.<javax.security.auth.kerberos.KeyTab: java.io.File file>;
        $r2 = virtualinvoke $r3.<java.io.File: java.lang.String toString()>();

     label1:
        return $r2;
    }

    public int hashCode()
    {
        javax.security.auth.kerberos.KeyTab r0;
        java.lang.Object[] $r1;
        java.io.File $r2;
        int $i0;

        r0 := @this: javax.security.auth.kerberos.KeyTab;
        $r1 = newarray (java.lang.Object)[1];
        $r2 = r0.<javax.security.auth.kerberos.KeyTab: java.io.File file>;
        $r1[0] = $r2;
        $i0 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);
        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        javax.security.auth.kerberos.KeyTab r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.io.File $r3, $r4;

        r0 := @this: javax.security.auth.kerberos.KeyTab;
        r1 := @parameter0: java.lang.Object;
        if r1 != r0 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof javax.security.auth.kerberos.KeyTab;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (javax.security.auth.kerberos.KeyTab) r1;
        $r3 = r2.<javax.security.auth.kerberos.KeyTab: java.io.File file>;
        $r4 = r0.<javax.security.auth.kerberos.KeyTab: java.io.File file>;
        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r4);
        return $z1;
    }

    static void <clinit>()
    {
        javax.security.auth.kerberos.JavaxSecurityAuthKerberosAccessImpl $r0;

        $r0 = new javax.security.auth.kerberos.JavaxSecurityAuthKerberosAccessImpl;
        specialinvoke $r0.<javax.security.auth.kerberos.JavaxSecurityAuthKerberosAccessImpl: void <init>()>();
        staticinvoke <sun.misc.SharedSecrets: void setJavaxSecurityAuthKerberosAccess(sun.misc.JavaxSecurityAuthKerberosAccess)>($r0);
        return;
    }
}
