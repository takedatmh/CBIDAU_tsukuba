final class java.lang.UNIXProcess extends java.lang.Process
{
    private static final sun.misc.JavaIOFileDescriptorAccess fdAccess;
    private final int pid;
    private int exitcode;
    private boolean hasExited;
    private java.io.OutputStream stdin;
    private java.io.InputStream stdout;
    private java.io.InputStream stderr;
    private static final java.lang.UNIXProcess$LaunchMechanism launchMechanism;
    private static byte[] helperpath;
    private static final java.util.concurrent.Executor processReaperExecutor;

    private static byte[] toCString(java.lang.String)
    {
        java.lang.String r0;
        byte[] r1, r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @parameter0: java.lang.String;
        if r0 != null goto label0;

        return null;

     label0:
        r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();
        $i0 = lengthof r1;
        $i1 = $i0 + 1;
        r2 = newarray (byte)[$i1];
        $i2 = lengthof r1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i2);
        $i3 = lengthof r2;
        $i4 = $i3 - 1;
        r2[$i4] = 0;
        return r2;
    }

    private native int waitForProcessExit(int);

    private native int forkAndExec(int, byte[], byte[], byte[], int, byte[], int, byte[], int[], boolean) throws java.io.IOException;

    void <init>(byte[], byte[], int, byte[], int, byte[], int[], boolean) throws java.io.IOException
    {
        java.lang.UNIXProcess r0;
        byte[] r1, r2, r3, r4, $r7;
        int i0, i1, $i2, $i3;
        int[] r5;
        boolean z0;
        java.lang.UNIXProcess$LaunchMechanism $r6;
        java.security.PrivilegedActionException r8, $r11;
        java.lang.UNIXProcess$3 $r9;
        java.lang.Exception $r12;
        java.io.IOException $r13;

        r0 := @this: java.lang.UNIXProcess;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        i0 := @parameter2: int;
        r3 := @parameter3: byte[];
        i1 := @parameter4: int;
        r4 := @parameter5: byte[];
        r5 := @parameter6: int[];
        z0 := @parameter7: boolean;
        specialinvoke r0.<java.lang.Process: void <init>()>();
        $r6 = <java.lang.UNIXProcess: java.lang.UNIXProcess$LaunchMechanism launchMechanism>;
        $i2 = staticinvoke <java.lang.UNIXProcess$LaunchMechanism: int access$300(java.lang.UNIXProcess$LaunchMechanism)>($r6);
        $r7 = <java.lang.UNIXProcess: byte[] helperpath>;
        $i3 = specialinvoke r0.<java.lang.UNIXProcess: int forkAndExec(int,byte[],byte[],byte[],int,byte[],int,byte[],int[],boolean)>($i2, $r7, r1, r2, i0, r3, i1, r4, r5, z0);
        r0.<java.lang.UNIXProcess: int pid> = $i3;

     label0:
        $r9 = new java.lang.UNIXProcess$3;
        specialinvoke $r9.<java.lang.UNIXProcess$3: void <init>(java.lang.UNIXProcess,int[])>(r0, r5);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r9);

     label1:
        goto label3;

     label2:
        $r11 := @caughtexception;
        r8 = $r11;
        $r12 = virtualinvoke r8.<java.security.PrivilegedActionException: java.lang.Exception getException()>();
        $r13 = (java.io.IOException) $r12;
        throw $r13;

     label3:
        return;

        catch java.security.PrivilegedActionException from label0 to label1 with label2;
    }

    static java.io.FileDescriptor newFileDescriptor(int)
    {
        int i0;
        java.io.FileDescriptor $r0, r1;
        sun.misc.JavaIOFileDescriptorAccess $r2;

        i0 := @parameter0: int;
        $r0 = new java.io.FileDescriptor;
        specialinvoke $r0.<java.io.FileDescriptor: void <init>()>();
        r1 = $r0;
        $r2 = <java.lang.UNIXProcess: sun.misc.JavaIOFileDescriptorAccess fdAccess>;
        interfaceinvoke $r2.<sun.misc.JavaIOFileDescriptorAccess: void set(java.io.FileDescriptor,int)>(r1, i0);
        return r1;
    }

    void initStreams(int[]) throws java.io.IOException
    {
        java.lang.UNIXProcess r0;
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.io.OutputStream $r3;
        java.io.InputStream $r5, $r7;
        java.util.concurrent.Executor $r8;
        java.lang.UNIXProcess$ProcessPipeOutputStream r10;
        java.lang.UNIXProcess$ProcessPipeInputStream r11, r12;
        java.lang.UNIXProcess$4 r13;

        r0 := @this: java.lang.UNIXProcess;
        r1 := @parameter0: int[];
        $i0 = r1[0];
        if $i0 != -1 goto label0;

        $r3 = <java.lang.ProcessBuilder$NullOutputStream: java.lang.ProcessBuilder$NullOutputStream INSTANCE>;
        goto label1;

     label0:
        r10 = new java.lang.UNIXProcess$ProcessPipeOutputStream;
        $r3 = r10;
        $i1 = r1[0];
        specialinvoke r10.<java.lang.UNIXProcess$ProcessPipeOutputStream: void <init>(int)>($i1);

     label1:
        r0.<java.lang.UNIXProcess: java.io.OutputStream stdin> = $r3;
        $i2 = r1[1];
        if $i2 != -1 goto label2;

        $r5 = <java.lang.ProcessBuilder$NullInputStream: java.lang.ProcessBuilder$NullInputStream INSTANCE>;
        goto label3;

     label2:
        r11 = new java.lang.UNIXProcess$ProcessPipeInputStream;
        $r5 = r11;
        $i3 = r1[1];
        specialinvoke r11.<java.lang.UNIXProcess$ProcessPipeInputStream: void <init>(int)>($i3);

     label3:
        r0.<java.lang.UNIXProcess: java.io.InputStream stdout> = $r5;
        $i4 = r1[2];
        if $i4 != -1 goto label4;

        $r7 = <java.lang.ProcessBuilder$NullInputStream: java.lang.ProcessBuilder$NullInputStream INSTANCE>;
        goto label5;

     label4:
        r12 = new java.lang.UNIXProcess$ProcessPipeInputStream;
        $r7 = r12;
        $i5 = r1[2];
        specialinvoke r12.<java.lang.UNIXProcess$ProcessPipeInputStream: void <init>(int)>($i5);

     label5:
        r0.<java.lang.UNIXProcess: java.io.InputStream stderr> = $r7;
        $r8 = <java.lang.UNIXProcess: java.util.concurrent.Executor processReaperExecutor>;
        r13 = new java.lang.UNIXProcess$4;
        specialinvoke r13.<java.lang.UNIXProcess$4: void <init>(java.lang.UNIXProcess)>(r0);
        interfaceinvoke $r8.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r13);
        return;
    }

    void processExited(int)
    {
        java.lang.UNIXProcess r0, r2;
        int i0;
        java.lang.Throwable r3, $r4;
        java.io.InputStream $r5, $r6, $r8, $r9;
        boolean $z0, $z1, $z2;
        java.lang.UNIXProcess$ProcessPipeInputStream $r7, $r10;
        java.io.OutputStream $r11, $r12;
        java.lang.UNIXProcess$ProcessPipeOutputStream $r13;

        r0 := @this: java.lang.UNIXProcess;
        i0 := @parameter0: int;
        r2 = r0;
        entermonitor r0;

     label0:
        r0.<java.lang.UNIXProcess: int exitcode> = i0;
        r0.<java.lang.UNIXProcess: boolean hasExited> = 1;
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r4 := @caughtexception;

     label3:
        r3 = $r4;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        $r5 = r0.<java.lang.UNIXProcess: java.io.InputStream stdout>;
        $z0 = $r5 instanceof java.lang.UNIXProcess$ProcessPipeInputStream;
        if $z0 == 0 goto label6;

        $r6 = r0.<java.lang.UNIXProcess: java.io.InputStream stdout>;
        $r7 = (java.lang.UNIXProcess$ProcessPipeInputStream) $r6;
        virtualinvoke $r7.<java.lang.UNIXProcess$ProcessPipeInputStream: void processExited()>();

     label6:
        $r8 = r0.<java.lang.UNIXProcess: java.io.InputStream stderr>;
        $z1 = $r8 instanceof java.lang.UNIXProcess$ProcessPipeInputStream;
        if $z1 == 0 goto label7;

        $r9 = r0.<java.lang.UNIXProcess: java.io.InputStream stderr>;
        $r10 = (java.lang.UNIXProcess$ProcessPipeInputStream) $r9;
        virtualinvoke $r10.<java.lang.UNIXProcess$ProcessPipeInputStream: void processExited()>();

     label7:
        $r11 = r0.<java.lang.UNIXProcess: java.io.OutputStream stdin>;
        $z2 = $r11 instanceof java.lang.UNIXProcess$ProcessPipeOutputStream;
        if $z2 == 0 goto label8;

        $r12 = r0.<java.lang.UNIXProcess: java.io.OutputStream stdin>;
        $r13 = (java.lang.UNIXProcess$ProcessPipeOutputStream) $r12;
        virtualinvoke $r13.<java.lang.UNIXProcess$ProcessPipeOutputStream: void processExited()>();

     label8:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.io.OutputStream getOutputStream()
    {
        java.lang.UNIXProcess r0;
        java.io.OutputStream $r1;

        r0 := @this: java.lang.UNIXProcess;
        $r1 = r0.<java.lang.UNIXProcess: java.io.OutputStream stdin>;
        return $r1;
    }

    public java.io.InputStream getInputStream()
    {
        java.lang.UNIXProcess r0;
        java.io.InputStream $r1;

        r0 := @this: java.lang.UNIXProcess;
        $r1 = r0.<java.lang.UNIXProcess: java.io.InputStream stdout>;
        return $r1;
    }

    public java.io.InputStream getErrorStream()
    {
        java.lang.UNIXProcess r0;
        java.io.InputStream $r1;

        r0 := @this: java.lang.UNIXProcess;
        $r1 = r0.<java.lang.UNIXProcess: java.io.InputStream stderr>;
        return $r1;
    }

    public synchronized int waitFor() throws java.lang.InterruptedException
    {
        java.lang.UNIXProcess r0;
        boolean $z0;
        int $i0;

        r0 := @this: java.lang.UNIXProcess;

     label0:
        $z0 = r0.<java.lang.UNIXProcess: boolean hasExited>;
        if $z0 != 0 goto label1;

        virtualinvoke r0.<java.lang.Object: void wait()>();
        goto label0;

     label1:
        $i0 = r0.<java.lang.UNIXProcess: int exitcode>;
        return $i0;
    }

    public synchronized int exitValue()
    {
        java.lang.UNIXProcess r0;
        boolean $z0;
        java.lang.IllegalThreadStateException $r1;
        int $i0;

        r0 := @this: java.lang.UNIXProcess;
        $z0 = r0.<java.lang.UNIXProcess: boolean hasExited>;
        if $z0 != 0 goto label0;

        $r1 = new java.lang.IllegalThreadStateException;
        specialinvoke $r1.<java.lang.IllegalThreadStateException: void <init>(java.lang.String)>("process hasn\'t exited");
        throw $r1;

     label0:
        $i0 = r0.<java.lang.UNIXProcess: int exitcode>;
        return $i0;
    }

    private static native void destroyProcess(int);

    public void destroy()
    {
        java.lang.UNIXProcess r0, r2;
        java.lang.Throwable r3, $r4;
        boolean $z0;
        int $i0;
        java.io.OutputStream $r5;
        java.io.IOException $r6, r7, $r9, r10, $r12, r13;
        java.io.InputStream $r8, $r11;

        r0 := @this: java.lang.UNIXProcess;
        r2 = r0;
        entermonitor r0;

     label0:
        $z0 = r0.<java.lang.UNIXProcess: boolean hasExited>;
        if $z0 != 0 goto label1;

        $i0 = r0.<java.lang.UNIXProcess: int pid>;
        staticinvoke <java.lang.UNIXProcess: void destroyProcess(int)>($i0);

     label1:
        exitmonitor r2;

     label2:
        goto label6;

     label3:
        $r4 := @caughtexception;

     label4:
        r3 = $r4;
        exitmonitor r2;

     label5:
        throw r3;

     label6:
        $r5 = r0.<java.lang.UNIXProcess: java.io.OutputStream stdin>;
        virtualinvoke $r5.<java.io.OutputStream: void close()>();

     label7:
        goto label9;

     label8:
        $r6 := @caughtexception;
        r7 = $r6;

     label9:
        $r8 = r0.<java.lang.UNIXProcess: java.io.InputStream stdout>;
        virtualinvoke $r8.<java.io.InputStream: void close()>();

     label10:
        goto label12;

     label11:
        $r9 := @caughtexception;
        r10 = $r9;

     label12:
        $r11 = r0.<java.lang.UNIXProcess: java.io.InputStream stderr>;
        virtualinvoke $r11.<java.io.InputStream: void close()>();

     label13:
        goto label15;

     label14:
        $r12 := @caughtexception;
        r13 = $r12;

     label15:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.io.IOException from label6 to label7 with label8;
        catch java.io.IOException from label9 to label10 with label11;
        catch java.io.IOException from label12 to label13 with label14;
    }

    private static native void init();

    static byte[] access$002(byte[])
    {
        byte[] r0;

        r0 := @parameter0: byte[];
        <java.lang.UNIXProcess: byte[] helperpath> = r0;
        return r0;
    }

    static byte[] access$100(java.lang.String)
    {
        java.lang.String r0;
        byte[] $r1;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <java.lang.UNIXProcess: byte[] toCString(java.lang.String)>(r0);
        return $r1;
    }

    static int access$400(java.lang.UNIXProcess)
    {
        java.lang.UNIXProcess r0;
        int $i0;

        r0 := @parameter0: java.lang.UNIXProcess;
        $i0 = r0.<java.lang.UNIXProcess: int pid>;
        return $i0;
    }

    static int access$500(java.lang.UNIXProcess, int)
    {
        java.lang.UNIXProcess r0;
        int i0, $i1;

        r0 := @parameter0: java.lang.UNIXProcess;
        i0 := @parameter1: int;
        $i1 = specialinvoke r0.<java.lang.UNIXProcess: int waitForProcessExit(int)>(i0);
        return $i1;
    }

    static void <clinit>()
    {
        sun.misc.JavaIOFileDescriptorAccess $r0;
        java.lang.UNIXProcess$1 $r1;
        java.lang.Object $r2, $r5;
        java.lang.UNIXProcess$LaunchMechanism $r3;
        java.lang.UNIXProcess$2 $r4;
        java.util.concurrent.Executor $r6;

        $r0 = staticinvoke <sun.misc.SharedSecrets: sun.misc.JavaIOFileDescriptorAccess getJavaIOFileDescriptorAccess()>();
        <java.lang.UNIXProcess: sun.misc.JavaIOFileDescriptorAccess fdAccess> = $r0;
        $r1 = new java.lang.UNIXProcess$1;
        specialinvoke $r1.<java.lang.UNIXProcess$1: void <init>()>();
        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        $r3 = (java.lang.UNIXProcess$LaunchMechanism) $r2;
        <java.lang.UNIXProcess: java.lang.UNIXProcess$LaunchMechanism launchMechanism> = $r3;
        $r4 = new java.lang.UNIXProcess$2;
        specialinvoke $r4.<java.lang.UNIXProcess$2: void <init>()>();
        $r5 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r4);
        $r6 = (java.util.concurrent.Executor) $r5;
        <java.lang.UNIXProcess: java.util.concurrent.Executor processReaperExecutor> = $r6;
        staticinvoke <java.lang.UNIXProcess: void init()>();
        return;
    }
}
