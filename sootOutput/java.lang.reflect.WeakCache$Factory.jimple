final class java.lang.reflect.WeakCache$Factory extends java.lang.Object implements java.lang.reflect.WeakCache$Supplier
{
    private final java.lang.Object key;
    private final java.lang.Object parameter;
    private final java.lang.Object subKey;
    private final java.util.concurrent.ConcurrentMap valuesMap;
    static final boolean $assertionsDisabled;
    final java.lang.reflect.WeakCache this$0;

    void <init>(java.lang.reflect.WeakCache, java.lang.Object, java.lang.Object, java.lang.Object, java.util.concurrent.ConcurrentMap)
    {
        java.lang.reflect.WeakCache$Factory r0;
        java.lang.reflect.WeakCache r1;
        java.lang.Object r2, r3, r4;
        java.util.concurrent.ConcurrentMap r5;

        r0 := @this: java.lang.reflect.WeakCache$Factory;
        r1 := @parameter0: java.lang.reflect.WeakCache;
        r2 := @parameter1: java.lang.Object;
        r3 := @parameter2: java.lang.Object;
        r4 := @parameter3: java.lang.Object;
        r5 := @parameter4: java.util.concurrent.ConcurrentMap;
        r0.<java.lang.reflect.WeakCache$Factory: java.lang.reflect.WeakCache this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.reflect.WeakCache$Factory: java.lang.Object key> = r2;
        r0.<java.lang.reflect.WeakCache$Factory: java.lang.Object parameter> = r3;
        r0.<java.lang.reflect.WeakCache$Factory: java.lang.Object subKey> = r4;
        r0.<java.lang.reflect.WeakCache$Factory: java.util.concurrent.ConcurrentMap valuesMap> = r5;
        return;
    }

    public synchronized java.lang.Object get()
    {
        java.lang.reflect.WeakCache$Factory r0;
        java.lang.reflect.WeakCache$Supplier r1;
        java.lang.Object r2, $r5, $r6, $r9, $r10, $r11, $r13, $r16, $r21;
        java.lang.Throwable r3, $r14;
        java.util.concurrent.ConcurrentMap $r4, $r12, $r15, $r20, $r23;
        java.lang.reflect.WeakCache $r7, $r22;
        java.lang.reflect.WeakCache$BiFunction $r8;
        boolean $z2, $z3;
        java.lang.AssertionError $r17, $r26;
        java.lang.reflect.WeakCache$CacheValue $r18, r19;
        java.lang.Boolean $r24;

        r0 := @this: java.lang.reflect.WeakCache$Factory;
        $r4 = r0.<java.lang.reflect.WeakCache$Factory: java.util.concurrent.ConcurrentMap valuesMap>;
        $r5 = r0.<java.lang.reflect.WeakCache$Factory: java.lang.Object subKey>;
        $r6 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r5);
        r1 = (java.lang.reflect.WeakCache$Supplier) $r6;
        if r1 == r0 goto label0;

        return null;

     label0:
        r2 = null;

     label1:
        $r7 = r0.<java.lang.reflect.WeakCache$Factory: java.lang.reflect.WeakCache this$0>;
        $r8 = staticinvoke <java.lang.reflect.WeakCache: java.lang.reflect.WeakCache$BiFunction access$000(java.lang.reflect.WeakCache)>($r7);
        $r9 = r0.<java.lang.reflect.WeakCache$Factory: java.lang.Object key>;
        $r10 = r0.<java.lang.reflect.WeakCache$Factory: java.lang.Object parameter>;
        $r11 = interfaceinvoke $r8.<java.lang.reflect.WeakCache$BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>($r9, $r10);
        r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r11);

     label2:
        if r2 != null goto label7;

        $r12 = r0.<java.lang.reflect.WeakCache$Factory: java.util.concurrent.ConcurrentMap valuesMap>;
        $r13 = r0.<java.lang.reflect.WeakCache$Factory: java.lang.Object subKey>;
        interfaceinvoke $r12.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>($r13, r0);
        goto label7;

     label3:
        $r14 := @caughtexception;

     label4:
        r3 = $r14;

     label5:
        if r2 != null goto label6;

        $r15 = r0.<java.lang.reflect.WeakCache$Factory: java.util.concurrent.ConcurrentMap valuesMap>;
        $r16 = r0.<java.lang.reflect.WeakCache$Factory: java.lang.Object subKey>;
        interfaceinvoke $r15.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>($r16, r0);

     label6:
        throw r3;

     label7:
        $z2 = <java.lang.reflect.WeakCache$Factory: boolean $assertionsDisabled>;
        if $z2 != 0 goto label8;

        if r2 != null goto label8;

        $r17 = new java.lang.AssertionError;
        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();
        throw $r17;

     label8:
        $r18 = new java.lang.reflect.WeakCache$CacheValue;
        specialinvoke $r18.<java.lang.reflect.WeakCache$CacheValue: void <init>(java.lang.Object)>(r2);
        r19 = $r18;
        $r20 = r0.<java.lang.reflect.WeakCache$Factory: java.util.concurrent.ConcurrentMap valuesMap>;
        $r21 = r0.<java.lang.reflect.WeakCache$Factory: java.lang.Object subKey>;
        $z3 = interfaceinvoke $r20.<java.util.concurrent.ConcurrentMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>($r21, r0, r19);
        if $z3 == 0 goto label9;

        $r22 = r0.<java.lang.reflect.WeakCache$Factory: java.lang.reflect.WeakCache this$0>;
        $r23 = staticinvoke <java.lang.reflect.WeakCache: java.util.concurrent.ConcurrentMap access$100(java.lang.reflect.WeakCache)>($r22);
        $r24 = <java.lang.Boolean: java.lang.Boolean TRUE>;
        interfaceinvoke $r23.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, $r24);
        goto label10;

     label9:
        $r26 = new java.lang.AssertionError;
        specialinvoke $r26.<java.lang.AssertionError: void <init>(java.lang.Object)>("Should not reach here");
        throw $r26;

     label10:
        return r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/lang/reflect/WeakCache";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.lang.reflect.WeakCache$Factory: boolean $assertionsDisabled> = $z1;
        return;
    }
}
