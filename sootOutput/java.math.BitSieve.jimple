class java.math.BitSieve extends java.lang.Object
{
    private long[] bits;
    private int length;
    private static java.math.BitSieve smallSieve;

    private void <init>()
    {
        java.math.BitSieve r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        long[] $r1;

        r0 := @this: java.math.BitSieve;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.math.BitSieve: int length> = 9600;
        $i2 = r0.<java.math.BitSieve: int length>;
        $i3 = $i2 - 1;
        $i4 = staticinvoke <java.math.BitSieve: int unitIndex(int)>($i3);
        $i5 = $i4 + 1;
        $r1 = newarray (long)[$i5];
        r0.<java.math.BitSieve: long[] bits> = $r1;
        specialinvoke r0.<java.math.BitSieve: void set(int)>(0);
        i0 = 1;
        i1 = 3;

     label0:
        $i6 = r0.<java.math.BitSieve: int length>;
        $i7 = i0 + i1;
        specialinvoke r0.<java.math.BitSieve: void sieveSingle(int,int,int)>($i6, $i7, i1);
        $i8 = r0.<java.math.BitSieve: int length>;
        $i9 = i0 + 1;
        i0 = specialinvoke r0.<java.math.BitSieve: int sieveSearch(int,int)>($i8, $i9);
        $i10 = 2 * i0;
        i1 = $i10 + 1;
        if i0 <= 0 goto label1;

        $i11 = r0.<java.math.BitSieve: int length>;
        if i1 < $i11 goto label0;

     label1:
        return;
    }

    void <init>(java.math.BigInteger, int)
    {
        java.math.BitSieve r0, $r5, $r6, $r9, $r10;
        java.math.BigInteger r1;
        int i0, i2, i3, $i4, $i5, $i6, $i7, $i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16;
        byte b1;
        java.math.MutableBigInteger r2, r3, $r7, $r8;
        long[] $r4;

        r0 := @this: java.math.BitSieve;
        r1 := @parameter0: java.math.BigInteger;
        i0 := @parameter1: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $i4 = i0 - 1;
        $i5 = staticinvoke <java.math.BitSieve: int unitIndex(int)>($i4);
        $i6 = $i5 + 1;
        $r4 = newarray (long)[$i6];
        r0.<java.math.BitSieve: long[] bits> = $r4;
        r0.<java.math.BitSieve: int length> = i0;
        b1 = 0;
        $r5 = <java.math.BitSieve: java.math.BitSieve smallSieve>;
        $r6 = <java.math.BitSieve: java.math.BitSieve smallSieve>;
        $i7 = $r6.<java.math.BitSieve: int length>;
        i2 = specialinvoke $r5.<java.math.BitSieve: int sieveSearch(int,int)>($i7, b1);
        $i8 = i2 * 2;
        i3 = $i8 + 1;
        $r7 = new java.math.MutableBigInteger;
        specialinvoke $r7.<java.math.MutableBigInteger: void <init>(java.math.BigInteger)>(r1);
        r2 = $r7;
        $r8 = new java.math.MutableBigInteger;
        specialinvoke $r8.<java.math.MutableBigInteger: void <init>()>();
        r3 = $r8;

     label0:
        i9 = virtualinvoke r2.<java.math.MutableBigInteger: int divideOneWord(int,java.math.MutableBigInteger)>(i3, r3);
        i10 = i3 - i9;
        $i11 = i10 % 2;
        if $i11 != 0 goto label1;

        i10 = i10 + i3;

     label1:
        $i12 = i10 - 1;
        $i13 = $i12 / 2;
        specialinvoke r0.<java.math.BitSieve: void sieveSingle(int,int,int)>(i0, $i13, i3);
        $r9 = <java.math.BitSieve: java.math.BitSieve smallSieve>;
        $r10 = <java.math.BitSieve: java.math.BitSieve smallSieve>;
        $i14 = $r10.<java.math.BitSieve: int length>;
        $i15 = i2 + 1;
        i2 = specialinvoke $r9.<java.math.BitSieve: int sieveSearch(int,int)>($i14, $i15);
        $i16 = i2 * 2;
        i3 = $i16 + 1;
        if i2 > 0 goto label0;

        return;
    }

    private static int unitIndex(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;
        $i1 = i0 >>> 6;
        return $i1;
    }

    private static long bit(int)
    {
        int i0, $i1;
        long $l2;

        i0 := @parameter0: int;
        $i1 = i0 & 63;
        $l2 = 1L << $i1;
        return $l2;
    }

    private boolean get(int)
    {
        java.math.BitSieve r0;
        int i0, i1;
        long[] $r1;
        long $l2, $l3, $l4;
        byte $b5;
        boolean $z0;

        r0 := @this: java.math.BitSieve;
        i0 := @parameter0: int;
        i1 = staticinvoke <java.math.BitSieve: int unitIndex(int)>(i0);
        $r1 = r0.<java.math.BitSieve: long[] bits>;
        $l2 = $r1[i1];
        $l3 = staticinvoke <java.math.BitSieve: long bit(int)>(i0);
        $l4 = $l2 & $l3;
        $b5 = $l4 cmp 0L;
        if $b5 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private void set(int)
    {
        java.math.BitSieve r0;
        int i0, i1;
        long[] $r1;
        long $l3, $l4, $l5;

        r0 := @this: java.math.BitSieve;
        i0 := @parameter0: int;
        i1 = staticinvoke <java.math.BitSieve: int unitIndex(int)>(i0);
        $r1 = r0.<java.math.BitSieve: long[] bits>;
        $l3 = $r1[i1];
        $l4 = staticinvoke <java.math.BitSieve: long bit(int)>(i0);
        $l5 = $l3 | $l4;
        $r1[i1] = $l5;
        return;
    }

    private int sieveSearch(int, int)
    {
        java.math.BitSieve r0;
        int i0, i1, i2, $i3;
        boolean $z0;

        r0 := @this: java.math.BitSieve;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i1 < i0 goto label0;

        return -1;

     label0:
        i2 = i1;

     label1:
        $z0 = specialinvoke r0.<java.math.BitSieve: boolean get(int)>(i2);
        if $z0 != 0 goto label2;

        return i2;

     label2:
        i2 = i2 + 1;
        $i3 = i0 - 1;
        if i2 < $i3 goto label1;

        return -1;
    }

    private void sieveSingle(int, int, int)
    {
        java.math.BitSieve r0;
        int i0, i1, i2;

        r0 := @this: java.math.BitSieve;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;

     label0:
        if i1 >= i0 goto label1;

        specialinvoke r0.<java.math.BitSieve: void set(int)>(i1);
        i1 = i1 + i2;
        goto label0;

     label1:
        return;
    }

    java.math.BigInteger retrieve(java.math.BigInteger, int, java.util.Random)
    {
        java.math.BitSieve r0;
        java.math.BigInteger r1, r3, $r6;
        int i0, i1, i2, i4, $i5;
        java.util.Random r2;
        long l3, $l6, $l7, $l9;
        long[] $r4, $r5;
        byte $b8;
        boolean $z0;

        r0 := @this: java.math.BitSieve;
        r1 := @parameter0: java.math.BigInteger;
        i0 := @parameter1: int;
        r2 := @parameter2: java.util.Random;
        i1 = 1;
        i2 = 0;

     label0:
        $r4 = r0.<java.math.BitSieve: long[] bits>;
        $i5 = lengthof $r4;
        if i2 >= $i5 goto label4;

        $r5 = r0.<java.math.BitSieve: long[] bits>;
        $l6 = $r5[i2];
        l3 = $l6 ^ -1L;
        i4 = 0;

     label1:
        if i4 >= 64 goto label3;

        $l7 = l3 & 1L;
        $b8 = $l7 cmp 1L;
        if $b8 != 0 goto label2;

        $l9 = (long) i1;
        $r6 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l9);
        r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r6);
        $z0 = virtualinvoke r3.<java.math.BigInteger: boolean primeToCertainty(int,java.util.Random)>(i0, r2);
        if $z0 == 0 goto label2;

        return r3;

     label2:
        l3 = l3 >>> 1;
        i1 = i1 + 2;
        i4 = i4 + 1;
        goto label1;

     label3:
        i2 = i2 + 1;
        goto label0;

     label4:
        return null;
    }

    static void <clinit>()
    {
        java.math.BitSieve $r0;

        $r0 = new java.math.BitSieve;
        specialinvoke $r0.<java.math.BitSieve: void <init>()>();
        <java.math.BitSieve: java.math.BitSieve smallSieve> = $r0;
        return;
    }
}
