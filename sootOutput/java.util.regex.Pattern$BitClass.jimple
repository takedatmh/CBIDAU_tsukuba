final class java.util.regex.Pattern$BitClass extends java.util.regex.Pattern$BmpCharProperty
{
    final boolean[] bits;
    static final boolean $assertionsDisabled;

    void <init>()
    {
        java.util.regex.Pattern$BitClass r0;
        boolean[] $r1;

        r0 := @this: java.util.regex.Pattern$BitClass;
        specialinvoke r0.<java.util.regex.Pattern$BmpCharProperty: void <init>(java.util.regex.Pattern$1)>(null);
        $r1 = newarray (boolean)[256];
        r0.<java.util.regex.Pattern$BitClass: boolean[] bits> = $r1;
        return;
    }

    private void <init>(boolean[])
    {
        java.util.regex.Pattern$BitClass r0;
        boolean[] r1;

        r0 := @this: java.util.regex.Pattern$BitClass;
        r1 := @parameter0: boolean[];
        specialinvoke r0.<java.util.regex.Pattern$BmpCharProperty: void <init>(java.util.regex.Pattern$1)>(null);
        r0.<java.util.regex.Pattern$BitClass: boolean[] bits> = r1;
        return;
    }

    java.util.regex.Pattern$BitClass add(int, int)
    {
        java.util.regex.Pattern$BitClass r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;
        java.lang.AssertionError $r1;
        boolean[] $r2, $r3, $r4, $r5, $r6;

        r0 := @this: java.util.regex.Pattern$BitClass;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $z0 = <java.util.regex.Pattern$BitClass: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        if i0 < 0 goto label0;

        if i0 <= 255 goto label1;

     label0:
        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label1:
        $i2 = i1 & 2;
        if $i2 == 0 goto label3;

        $z1 = staticinvoke <java.util.regex.ASCII: boolean isAscii(int)>(i0);
        if $z1 == 0 goto label2;

        $r2 = r0.<java.util.regex.Pattern$BitClass: boolean[] bits>;
        $i3 = staticinvoke <java.util.regex.ASCII: int toUpper(int)>(i0);
        $r2[$i3] = 1;
        $r3 = r0.<java.util.regex.Pattern$BitClass: boolean[] bits>;
        $i4 = staticinvoke <java.util.regex.ASCII: int toLower(int)>(i0);
        $r3[$i4] = 1;
        goto label3;

     label2:
        $i5 = i1 & 64;
        if $i5 == 0 goto label3;

        $r4 = r0.<java.util.regex.Pattern$BitClass: boolean[] bits>;
        $i6 = staticinvoke <java.lang.Character: int toLowerCase(int)>(i0);
        $r4[$i6] = 1;
        $r5 = r0.<java.util.regex.Pattern$BitClass: boolean[] bits>;
        $i7 = staticinvoke <java.lang.Character: int toUpperCase(int)>(i0);
        $r5[$i7] = 1;

     label3:
        $r6 = r0.<java.util.regex.Pattern$BitClass: boolean[] bits>;
        $r6[i0] = 1;
        return r0;
    }

    boolean isSatisfiedBy(int)
    {
        java.util.regex.Pattern$BitClass r0;
        int i0;
        boolean[] $r1;
        boolean $z0, $z1;

        r0 := @this: java.util.regex.Pattern$BitClass;
        i0 := @parameter0: int;
        if i0 >= 256 goto label0;

        $r1 = r0.<java.util.regex.Pattern$BitClass: boolean[] bits>;
        $z0 = $r1[i0];
        if $z0 == 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/util/regex/Pattern";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.util.regex.Pattern$BitClass: boolean $assertionsDisabled> = $z1;
        return;
    }
}
