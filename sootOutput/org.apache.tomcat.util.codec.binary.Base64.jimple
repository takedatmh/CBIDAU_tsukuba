public class org.apache.tomcat.util.codec.binary.Base64 extends org.apache.tomcat.util.codec.binary.BaseNCodec
{
    private static final int BITS_PER_ENCODED_BYTE;
    private static final int BYTES_PER_UNENCODED_BLOCK;
    private static final int BYTES_PER_ENCODED_BLOCK;
    static final byte[] CHUNK_SEPARATOR;
    private static final byte[] STANDARD_ENCODE_TABLE;
    private static final byte[] URL_SAFE_ENCODE_TABLE;
    private static final byte[] DECODE_TABLE;
    private static final int MASK_6BITS;
    private final byte[] encodeTable;
    private final byte[] decodeTable;
    private final byte[] lineSeparator;
    private final int decodeSize;
    private final int encodeSize;

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2, $r3;

        $r0 = newarray (byte)[2];
        $r0[0] = 13;
        $r0[1] = 10;
        <org.apache.tomcat.util.codec.binary.Base64: byte[] CHUNK_SEPARATOR> = $r0;
        $r1 = newarray (byte)[64];
        $r1[0] = 65;
        $r1[1] = 66;
        $r1[2] = 67;
        $r1[3] = 68;
        $r1[4] = 69;
        $r1[5] = 70;
        $r1[6] = 71;
        $r1[7] = 72;
        $r1[8] = 73;
        $r1[9] = 74;
        $r1[10] = 75;
        $r1[11] = 76;
        $r1[12] = 77;
        $r1[13] = 78;
        $r1[14] = 79;
        $r1[15] = 80;
        $r1[16] = 81;
        $r1[17] = 82;
        $r1[18] = 83;
        $r1[19] = 84;
        $r1[20] = 85;
        $r1[21] = 86;
        $r1[22] = 87;
        $r1[23] = 88;
        $r1[24] = 89;
        $r1[25] = 90;
        $r1[26] = 97;
        $r1[27] = 98;
        $r1[28] = 99;
        $r1[29] = 100;
        $r1[30] = 101;
        $r1[31] = 102;
        $r1[32] = 103;
        $r1[33] = 104;
        $r1[34] = 105;
        $r1[35] = 106;
        $r1[36] = 107;
        $r1[37] = 108;
        $r1[38] = 109;
        $r1[39] = 110;
        $r1[40] = 111;
        $r1[41] = 112;
        $r1[42] = 113;
        $r1[43] = 114;
        $r1[44] = 115;
        $r1[45] = 116;
        $r1[46] = 117;
        $r1[47] = 118;
        $r1[48] = 119;
        $r1[49] = 120;
        $r1[50] = 121;
        $r1[51] = 122;
        $r1[52] = 48;
        $r1[53] = 49;
        $r1[54] = 50;
        $r1[55] = 51;
        $r1[56] = 52;
        $r1[57] = 53;
        $r1[58] = 54;
        $r1[59] = 55;
        $r1[60] = 56;
        $r1[61] = 57;
        $r1[62] = 43;
        $r1[63] = 47;
        <org.apache.tomcat.util.codec.binary.Base64: byte[] STANDARD_ENCODE_TABLE> = $r1;
        $r2 = newarray (byte)[64];
        $r2[0] = 65;
        $r2[1] = 66;
        $r2[2] = 67;
        $r2[3] = 68;
        $r2[4] = 69;
        $r2[5] = 70;
        $r2[6] = 71;
        $r2[7] = 72;
        $r2[8] = 73;
        $r2[9] = 74;
        $r2[10] = 75;
        $r2[11] = 76;
        $r2[12] = 77;
        $r2[13] = 78;
        $r2[14] = 79;
        $r2[15] = 80;
        $r2[16] = 81;
        $r2[17] = 82;
        $r2[18] = 83;
        $r2[19] = 84;
        $r2[20] = 85;
        $r2[21] = 86;
        $r2[22] = 87;
        $r2[23] = 88;
        $r2[24] = 89;
        $r2[25] = 90;
        $r2[26] = 97;
        $r2[27] = 98;
        $r2[28] = 99;
        $r2[29] = 100;
        $r2[30] = 101;
        $r2[31] = 102;
        $r2[32] = 103;
        $r2[33] = 104;
        $r2[34] = 105;
        $r2[35] = 106;
        $r2[36] = 107;
        $r2[37] = 108;
        $r2[38] = 109;
        $r2[39] = 110;
        $r2[40] = 111;
        $r2[41] = 112;
        $r2[42] = 113;
        $r2[43] = 114;
        $r2[44] = 115;
        $r2[45] = 116;
        $r2[46] = 117;
        $r2[47] = 118;
        $r2[48] = 119;
        $r2[49] = 120;
        $r2[50] = 121;
        $r2[51] = 122;
        $r2[52] = 48;
        $r2[53] = 49;
        $r2[54] = 50;
        $r2[55] = 51;
        $r2[56] = 52;
        $r2[57] = 53;
        $r2[58] = 54;
        $r2[59] = 55;
        $r2[60] = 56;
        $r2[61] = 57;
        $r2[62] = 45;
        $r2[63] = 95;
        <org.apache.tomcat.util.codec.binary.Base64: byte[] URL_SAFE_ENCODE_TABLE> = $r2;
        $r3 = newarray (byte)[123];
        $r3[0] = -1;
        $r3[1] = -1;
        $r3[2] = -1;
        $r3[3] = -1;
        $r3[4] = -1;
        $r3[5] = -1;
        $r3[6] = -1;
        $r3[7] = -1;
        $r3[8] = -1;
        $r3[9] = -1;
        $r3[10] = -1;
        $r3[11] = -1;
        $r3[12] = -1;
        $r3[13] = -1;
        $r3[14] = -1;
        $r3[15] = -1;
        $r3[16] = -1;
        $r3[17] = -1;
        $r3[18] = -1;
        $r3[19] = -1;
        $r3[20] = -1;
        $r3[21] = -1;
        $r3[22] = -1;
        $r3[23] = -1;
        $r3[24] = -1;
        $r3[25] = -1;
        $r3[26] = -1;
        $r3[27] = -1;
        $r3[28] = -1;
        $r3[29] = -1;
        $r3[30] = -1;
        $r3[31] = -1;
        $r3[32] = -1;
        $r3[33] = -1;
        $r3[34] = -1;
        $r3[35] = -1;
        $r3[36] = -1;
        $r3[37] = -1;
        $r3[38] = -1;
        $r3[39] = -1;
        $r3[40] = -1;
        $r3[41] = -1;
        $r3[42] = -1;
        $r3[43] = 62;
        $r3[44] = -1;
        $r3[45] = 62;
        $r3[46] = -1;
        $r3[47] = 63;
        $r3[48] = 52;
        $r3[49] = 53;
        $r3[50] = 54;
        $r3[51] = 55;
        $r3[52] = 56;
        $r3[53] = 57;
        $r3[54] = 58;
        $r3[55] = 59;
        $r3[56] = 60;
        $r3[57] = 61;
        $r3[58] = -1;
        $r3[59] = -1;
        $r3[60] = -1;
        $r3[61] = -1;
        $r3[62] = -1;
        $r3[63] = -1;
        $r3[64] = -1;
        $r3[66] = 1;
        $r3[67] = 2;
        $r3[68] = 3;
        $r3[69] = 4;
        $r3[70] = 5;
        $r3[71] = 6;
        $r3[72] = 7;
        $r3[73] = 8;
        $r3[74] = 9;
        $r3[75] = 10;
        $r3[76] = 11;
        $r3[77] = 12;
        $r3[78] = 13;
        $r3[79] = 14;
        $r3[80] = 15;
        $r3[81] = 16;
        $r3[82] = 17;
        $r3[83] = 18;
        $r3[84] = 19;
        $r3[85] = 20;
        $r3[86] = 21;
        $r3[87] = 22;
        $r3[88] = 23;
        $r3[89] = 24;
        $r3[90] = 25;
        $r3[91] = -1;
        $r3[92] = -1;
        $r3[93] = -1;
        $r3[94] = -1;
        $r3[95] = 63;
        $r3[96] = -1;
        $r3[97] = 26;
        $r3[98] = 27;
        $r3[99] = 28;
        $r3[100] = 29;
        $r3[101] = 30;
        $r3[102] = 31;
        $r3[103] = 32;
        $r3[104] = 33;
        $r3[105] = 34;
        $r3[106] = 35;
        $r3[107] = 36;
        $r3[108] = 37;
        $r3[109] = 38;
        $r3[110] = 39;
        $r3[111] = 40;
        $r3[112] = 41;
        $r3[113] = 42;
        $r3[114] = 43;
        $r3[115] = 44;
        $r3[116] = 45;
        $r3[117] = 46;
        $r3[118] = 47;
        $r3[119] = 48;
        $r3[120] = 49;
        $r3[121] = 50;
        $r3[122] = 51;
        <org.apache.tomcat.util.codec.binary.Base64: byte[] DECODE_TABLE> = $r3;
        return;
    }

    public void <init>()
    {
        org.apache.tomcat.util.codec.binary.Base64 r0;

        r0 := @this: org.apache.tomcat.util.codec.binary.Base64;
        specialinvoke r0.<org.apache.tomcat.util.codec.binary.Base64: void <init>(int)>(0);
        return;
    }

    public void <init>(boolean)
    {
        org.apache.tomcat.util.codec.binary.Base64 r0;
        boolean z0;
        byte[] $r1;

        r0 := @this: org.apache.tomcat.util.codec.binary.Base64;
        z0 := @parameter0: boolean;
        $r1 = <org.apache.tomcat.util.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;
        specialinvoke r0.<org.apache.tomcat.util.codec.binary.Base64: void <init>(int,byte[],boolean)>(76, $r1, z0);
        return;
    }

    public void <init>(int)
    {
        org.apache.tomcat.util.codec.binary.Base64 r0;
        int i0;
        byte[] $r1;

        r0 := @this: org.apache.tomcat.util.codec.binary.Base64;
        i0 := @parameter0: int;
        $r1 = <org.apache.tomcat.util.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;
        specialinvoke r0.<org.apache.tomcat.util.codec.binary.Base64: void <init>(int,byte[])>(i0, $r1);
        return;
    }

    public void <init>(int, byte[])
    {
        org.apache.tomcat.util.codec.binary.Base64 r0;
        int i0;
        byte[] r1;

        r0 := @this: org.apache.tomcat.util.codec.binary.Base64;
        i0 := @parameter0: int;
        r1 := @parameter1: byte[];
        specialinvoke r0.<org.apache.tomcat.util.codec.binary.Base64: void <init>(int,byte[],boolean)>(i0, r1, 0);
        return;
    }

    public void <init>(int, byte[], boolean)
    {
        org.apache.tomcat.util.codec.binary.Base64 r0;
        int i0, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        byte[] r1, $r4, $r10, $r11, $r13;
        boolean z0, $z1;
        byte $b1, $b2;
        java.lang.String r3, $r9;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: org.apache.tomcat.util.codec.binary.Base64;
        i0 := @parameter0: int;
        r1 := @parameter1: byte[];
        z0 := @parameter2: boolean;
        $b1 = 3;
        $b2 = 4;
        if r1 != null goto label0;

        $i4 = 0;
        goto label1;

     label0:
        $i4 = lengthof r1;

     label1:
        specialinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: void <init>(int,int,int,int)>($b1, $b2, i0, $i4);
        $r4 = <org.apache.tomcat.util.codec.binary.Base64: byte[] DECODE_TABLE>;
        r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] decodeTable> = $r4;
        if r1 == null goto label4;

        $z1 = virtualinvoke r0.<org.apache.tomcat.util.codec.binary.Base64: boolean containsAlphabetOrPad(byte[])>(r1);
        if $z1 == 0 goto label2;

        r3 = staticinvoke <org.apache.tomcat.util.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>(r1);
        $r5 = new java.lang.IllegalArgumentException;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("lineSeparator must not contain base64 characters: [");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);
        throw $r5;

     label2:
        if i0 <= 0 goto label3;

        $i5 = lengthof r1;
        $i6 = 4 + $i5;
        r0.<org.apache.tomcat.util.codec.binary.Base64: int encodeSize> = $i6;
        $i7 = lengthof r1;
        $r10 = newarray (byte)[$i7];
        r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] lineSeparator> = $r10;
        $r11 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] lineSeparator>;
        $i8 = lengthof r1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r11, 0, $i8);
        goto label5;

     label3:
        r0.<org.apache.tomcat.util.codec.binary.Base64: int encodeSize> = 4;
        r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] lineSeparator> = null;
        goto label5;

     label4:
        r0.<org.apache.tomcat.util.codec.binary.Base64: int encodeSize> = 4;
        r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] lineSeparator> = null;

     label5:
        $i9 = r0.<org.apache.tomcat.util.codec.binary.Base64: int encodeSize>;
        $i10 = $i9 - 1;
        r0.<org.apache.tomcat.util.codec.binary.Base64: int decodeSize> = $i10;
        if z0 == 0 goto label6;

        $r13 = <org.apache.tomcat.util.codec.binary.Base64: byte[] URL_SAFE_ENCODE_TABLE>;
        goto label7;

     label6:
        $r13 = <org.apache.tomcat.util.codec.binary.Base64: byte[] STANDARD_ENCODE_TABLE>;

     label7:
        r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] encodeTable> = $r13;
        return;
    }

    public boolean isUrlSafe()
    {
        org.apache.tomcat.util.codec.binary.Base64 r0;
        byte[] $r1, $r2;

        r0 := @this: org.apache.tomcat.util.codec.binary.Base64;
        $r2 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] encodeTable>;
        $r1 = <org.apache.tomcat.util.codec.binary.Base64: byte[] URL_SAFE_ENCODE_TABLE>;
        if $r2 != $r1 goto label0;

        return 1;

     label0:
        return 0;
    }

    void encode(byte[], int, int, org.apache.tomcat.util.codec.binary.BaseNCodec$Context)
    {
        org.apache.tomcat.util.codec.binary.Base64 r0;
        byte[] r1, r3, $r5, $r7, $r8, $r9, $r13, $r15, $r17, $r18, $r19, $r26, $r27, $r29, r30, $r32, $r34, $r36, $r38, $r40, $r41, $r43;
        int i0, i1, i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, $i31, $i32, $i33, $i34, $i36, $i37, $i38, $i39, $i40, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i72, $i73, $i74, $i75, $i76, $i78, $i79, $i80, $i81, $i82, $i84, $i85, $i86, $i87, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98;
        org.apache.tomcat.util.codec.binary.BaseNCodec$Context r2;
        boolean $z0;
        byte $b13, $b19, $b29, $b35, $b41, $b71, $b77, $b83, $b88;
        java.lang.IllegalStateException $r21;
        java.lang.StringBuilder $r22, $r23;
        java.lang.String $r24;

        r0 := @this: org.apache.tomcat.util.codec.binary.Base64;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: org.apache.tomcat.util.codec.binary.BaseNCodec$Context;
        $z0 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: boolean eof>;
        if $z0 == 0 goto label0;

        return;

     label0:
        if i1 >= 0 goto label7;

        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: boolean eof> = 1;
        $i5 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int modulus>;
        if $i5 != 0 goto label1;

        $i6 = r0.<org.apache.tomcat.util.codec.binary.Base64: int lineLength>;
        if $i6 != 0 goto label1;

        return;

     label1:
        $i7 = r0.<org.apache.tomcat.util.codec.binary.Base64: int encodeSize>;
        r3 = virtualinvoke r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] ensureBufferSize(int,org.apache.tomcat.util.codec.binary.BaseNCodec$Context)>($i7, r2);
        i2 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i8 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int modulus>;
        tableswitch($i8)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            default: goto label5;
        };

     label2:
        goto label6;

     label3:
        $i3 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i9 = $i3 + 1;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i9;
        $r5 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] encodeTable>;
        $i10 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i11 = $i10 >> 2;
        $i12 = $i11 & 63;
        $b13 = $r5[$i12];
        r3[$i3] = $b13;
        $i14 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i15 = $i14 + 1;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i15;
        $r7 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] encodeTable>;
        $i16 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i17 = $i16 << 4;
        $i18 = $i17 & 63;
        $b19 = $r7[$i18];
        r3[$i14] = $b19;
        $r8 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] encodeTable>;
        $r9 = <org.apache.tomcat.util.codec.binary.Base64: byte[] STANDARD_ENCODE_TABLE>;
        if $r8 != $r9 goto label6;

        $i20 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i21 = $i20 + 1;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i21;
        r3[$i20] = 61;
        $i22 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i23 = $i22 + 1;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i23;
        r3[$i22] = 61;
        goto label6;

     label4:
        $i24 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i25 = $i24 + 1;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i25;
        $r13 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] encodeTable>;
        $i26 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i27 = $i26 >> 10;
        $i28 = $i27 & 63;
        $b29 = $r13[$i28];
        r3[$i24] = $b29;
        $i30 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i31 = $i30 + 1;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i31;
        $r15 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] encodeTable>;
        $i32 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i33 = $i32 >> 4;
        $i34 = $i33 & 63;
        $b35 = $r15[$i34];
        r3[$i30] = $b35;
        $i36 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i37 = $i36 + 1;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i37;
        $r17 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] encodeTable>;
        $i38 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i39 = $i38 << 2;
        $i40 = $i39 & 63;
        $b41 = $r17[$i40];
        r3[$i36] = $b41;
        $r18 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] encodeTable>;
        $r19 = <org.apache.tomcat.util.codec.binary.Base64: byte[] STANDARD_ENCODE_TABLE>;
        if $r18 != $r19 goto label6;

        $i42 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i43 = $i42 + 1;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i43;
        r3[$i42] = 61;
        goto label6;

     label5:
        $r21 = new java.lang.IllegalStateException;
        $r22 = new java.lang.StringBuilder;
        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Impossible modulus ");
        $i44 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int modulus>;
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i44);
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r24);
        throw $r21;

     label6:
        $i45 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int currentLinePos>;
        $i46 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i47 = $i46 - i2;
        $i48 = $i45 + $i47;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int currentLinePos> = $i48;
        $i49 = r0.<org.apache.tomcat.util.codec.binary.Base64: int lineLength>;
        if $i49 <= 0 goto label12;

        $i50 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int currentLinePos>;
        if $i50 <= 0 goto label12;

        $r26 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] lineSeparator>;
        $i51 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $r27 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] lineSeparator>;
        $i52 = lengthof $r27;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r26, 0, r3, $i51, $i52);
        $i53 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $r29 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] lineSeparator>;
        $i54 = lengthof $r29;
        $i55 = $i53 + $i54;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i55;
        goto label12;

     label7:
        i56 = 0;
        goto label11;

     label8:
        $i57 = r0.<org.apache.tomcat.util.codec.binary.Base64: int encodeSize>;
        r30 = virtualinvoke r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] ensureBufferSize(int,org.apache.tomcat.util.codec.binary.BaseNCodec$Context)>($i57, r2);
        $i58 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int modulus>;
        $i59 = $i58 + 1;
        $i60 = $i59 % 3;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int modulus> = $i60;
        $i61 = i0;
        i0 = i0 + 1;
        i4 = r1[$i61];
        if i4 >= 0 goto label9;

        i4 = i4 + 256;

     label9:
        $i62 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i63 = $i62 << 8;
        $i64 = $i63 + i4;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea> = $i64;
        $i65 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int modulus>;
        if $i65 != 0 goto label10;

        $i66 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i67 = $i66 + 1;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i67;
        $r32 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] encodeTable>;
        $i68 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i69 = $i68 >> 18;
        $i70 = $i69 & 63;
        $b71 = $r32[$i70];
        r30[$i66] = $b71;
        $i72 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i73 = $i72 + 1;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i73;
        $r34 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] encodeTable>;
        $i74 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i75 = $i74 >> 12;
        $i76 = $i75 & 63;
        $b77 = $r34[$i76];
        r30[$i72] = $b77;
        $i78 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i79 = $i78 + 1;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i79;
        $r36 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] encodeTable>;
        $i80 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i81 = $i80 >> 6;
        $i82 = $i81 & 63;
        $b83 = $r36[$i82];
        r30[$i78] = $b83;
        $i84 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i85 = $i84 + 1;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i85;
        $r38 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] encodeTable>;
        $i86 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i87 = $i86 & 63;
        $b88 = $r38[$i87];
        r30[$i84] = $b88;
        $i89 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int currentLinePos>;
        $i90 = $i89 + 4;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int currentLinePos> = $i90;
        $i91 = r0.<org.apache.tomcat.util.codec.binary.Base64: int lineLength>;
        if $i91 <= 0 goto label10;

        $i92 = r0.<org.apache.tomcat.util.codec.binary.Base64: int lineLength>;
        $i93 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int currentLinePos>;
        if $i92 > $i93 goto label10;

        $r40 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] lineSeparator>;
        $i94 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $r41 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] lineSeparator>;
        $i95 = lengthof $r41;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r40, 0, r30, $i94, $i95);
        $i96 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $r43 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] lineSeparator>;
        $i97 = lengthof $r43;
        $i98 = $i96 + $i97;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i98;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int currentLinePos> = 0;

     label10:
        i56 = i56 + 1;

     label11:
        if i56 < i1 goto label8;

     label12:
        return;
    }

    void decode(byte[], int, int, org.apache.tomcat.util.codec.binary.BaseNCodec$Context)
    {
        org.apache.tomcat.util.codec.binary.Base64 r0;
        byte[] r1, r3, $r4, $r5, r9;
        int i0, i1, i2, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i50, $i51, $i52, $i53, $i55;
        org.apache.tomcat.util.codec.binary.BaseNCodec$Context r2;
        byte b3, b4, $b20, $b26, $b31, $b41, $b49, $b54;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r13;
        java.lang.StringBuilder $r14, $r15;
        java.lang.String $r16;

        r0 := @this: org.apache.tomcat.util.codec.binary.Base64;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: org.apache.tomcat.util.codec.binary.BaseNCodec$Context;
        $z0 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: boolean eof>;
        if $z0 == 0 goto label0;

        return;

     label0:
        if i1 >= 0 goto label1;

        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: boolean eof> = 1;

     label1:
        i2 = 0;
        goto label5;

     label2:
        $i6 = r0.<org.apache.tomcat.util.codec.binary.Base64: int decodeSize>;
        r3 = virtualinvoke r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] ensureBufferSize(int,org.apache.tomcat.util.codec.binary.BaseNCodec$Context)>($i6, r2);
        $i7 = i0;
        i0 = i0 + 1;
        b3 = r1[$i7];
        if b3 != 61 goto label3;

        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: boolean eof> = 1;
        goto label6;

     label3:
        if b3 < 0 goto label4;

        $r4 = <org.apache.tomcat.util.codec.binary.Base64: byte[] DECODE_TABLE>;
        $i8 = lengthof $r4;
        if b3 >= $i8 goto label4;

        $r5 = <org.apache.tomcat.util.codec.binary.Base64: byte[] DECODE_TABLE>;
        b4 = $r5[b3];
        if b4 < 0 goto label4;

        $i9 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int modulus>;
        $i10 = $i9 + 1;
        $i11 = $i10 % 4;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int modulus> = $i11;
        $i12 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i13 = $i12 << 6;
        $i14 = $i13 + b4;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea> = $i14;
        $i15 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int modulus>;
        if $i15 != 0 goto label4;

        $i5 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i16 = $i5 + 1;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i16;
        $i17 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i18 = $i17 >> 16;
        $i19 = $i18 & 255;
        $b20 = (byte) $i19;
        r3[$i5] = $b20;
        $i21 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i22 = $i21 + 1;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i22;
        $i23 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i24 = $i23 >> 8;
        $i25 = $i24 & 255;
        $b26 = (byte) $i25;
        r3[$i21] = $b26;
        $i27 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i28 = $i27 + 1;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i28;
        $i29 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i30 = $i29 & 255;
        $b31 = (byte) $i30;
        r3[$i27] = $b31;

     label4:
        i2 = i2 + 1;

     label5:
        if i2 < i1 goto label2;

     label6:
        $z1 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: boolean eof>;
        if $z1 == 0 goto label11;

        $i32 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int modulus>;
        if $i32 == 0 goto label11;

        $i33 = r0.<org.apache.tomcat.util.codec.binary.Base64: int decodeSize>;
        r9 = virtualinvoke r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] ensureBufferSize(int,org.apache.tomcat.util.codec.binary.BaseNCodec$Context)>($i33, r2);
        $i34 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int modulus>;
        tableswitch($i34)
        {
            case 1: goto label7;
            case 2: goto label8;
            case 3: goto label9;
            default: goto label10;
        };

     label7:
        goto label11;

     label8:
        $i35 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i36 = $i35 >> 4;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea> = $i36;
        $i37 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i38 = $i37 + 1;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i38;
        $i39 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i40 = $i39 & 255;
        $b41 = (byte) $i40;
        r9[$i37] = $b41;
        goto label11;

     label9:
        $i42 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i43 = $i42 >> 2;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea> = $i43;
        $i44 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i45 = $i44 + 1;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i45;
        $i46 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i47 = $i46 >> 8;
        $i48 = $i47 & 255;
        $b49 = (byte) $i48;
        r9[$i44] = $b49;
        $i50 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i51 = $i50 + 1;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = $i51;
        $i52 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int ibitWorkArea>;
        $i53 = $i52 & 255;
        $b54 = (byte) $i53;
        r9[$i50] = $b54;
        goto label11;

     label10:
        $r13 = new java.lang.IllegalStateException;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Impossible modulus ");
        $i55 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int modulus>;
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i55);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);
        throw $r13;

     label11:
        return;
    }

    public static boolean isArrayByteBase64(byte[])
    {
        byte[] r0;
        boolean $z0;

        r0 := @parameter0: byte[];
        $z0 = staticinvoke <org.apache.tomcat.util.codec.binary.Base64: boolean isBase64(byte[])>(r0);
        return $z0;
    }

    public static boolean isBase64(byte)
    {
        byte b0, $b2;
        byte[] $r0, $r1;
        int $i1;

        b0 := @parameter0: byte;
        if b0 == 61 goto label1;

        if b0 < 0 goto label0;

        $r0 = <org.apache.tomcat.util.codec.binary.Base64: byte[] DECODE_TABLE>;
        $i1 = lengthof $r0;
        if b0 >= $i1 goto label0;

        $r1 = <org.apache.tomcat.util.codec.binary.Base64: byte[] DECODE_TABLE>;
        $b2 = $r1[b0];
        if $b2 != -1 goto label1;

     label0:
        return 0;

     label1:
        return 1;
    }

    public static boolean isBase64(java.lang.String)
    {
        java.lang.String r0;
        byte[] $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <org.apache.tomcat.util.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(r0);
        $z0 = staticinvoke <org.apache.tomcat.util.codec.binary.Base64: boolean isBase64(byte[])>($r1);
        return $z0;
    }

    public static boolean isBase64(byte[])
    {
        byte[] r0;
        int i0, $i3;
        byte $b1, $b2;
        boolean $z0, $z1;

        r0 := @parameter0: byte[];
        i0 = 0;
        goto label2;

     label0:
        $b1 = r0[i0];
        $z0 = staticinvoke <org.apache.tomcat.util.codec.binary.Base64: boolean isBase64(byte)>($b1);
        if $z0 != 0 goto label1;

        $b2 = r0[i0];
        $z1 = staticinvoke <org.apache.tomcat.util.codec.binary.Base64: boolean isWhiteSpace(byte)>($b2);
        if $z1 != 0 goto label1;

        return 0;

     label1:
        i0 = i0 + 1;

     label2:
        $i3 = lengthof r0;
        if i0 < $i3 goto label0;

        return 1;
    }

    public static byte[] encodeBase64(byte[])
    {
        byte[] r0, $r1;

        r0 := @parameter0: byte[];
        $r1 = staticinvoke <org.apache.tomcat.util.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>(r0, 0);
        return $r1;
    }

    public static java.lang.String encodeBase64String(byte[])
    {
        byte[] r0, $r1;
        java.lang.String $r2;

        r0 := @parameter0: byte[];
        $r1 = staticinvoke <org.apache.tomcat.util.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>(r0, 0);
        $r2 = staticinvoke <org.apache.tomcat.util.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r1);
        return $r2;
    }

    public static byte[] encodeBase64URLSafe(byte[])
    {
        byte[] r0, $r1;

        r0 := @parameter0: byte[];
        $r1 = staticinvoke <org.apache.tomcat.util.codec.binary.Base64: byte[] encodeBase64(byte[],boolean,boolean)>(r0, 0, 1);
        return $r1;
    }

    public static java.lang.String encodeBase64URLSafeString(byte[])
    {
        byte[] r0, $r1;
        java.lang.String $r2;

        r0 := @parameter0: byte[];
        $r1 = staticinvoke <org.apache.tomcat.util.codec.binary.Base64: byte[] encodeBase64(byte[],boolean,boolean)>(r0, 0, 1);
        $r2 = staticinvoke <org.apache.tomcat.util.codec.binary.StringUtils: java.lang.String newStringUsAscii(byte[])>($r1);
        return $r2;
    }

    public static byte[] encodeBase64Chunked(byte[])
    {
        byte[] r0, $r1;

        r0 := @parameter0: byte[];
        $r1 = staticinvoke <org.apache.tomcat.util.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>(r0, 1);
        return $r1;
    }

    public static byte[] encodeBase64(byte[], boolean)
    {
        byte[] r0, $r1;
        boolean z0;

        r0 := @parameter0: byte[];
        z0 := @parameter1: boolean;
        $r1 = staticinvoke <org.apache.tomcat.util.codec.binary.Base64: byte[] encodeBase64(byte[],boolean,boolean)>(r0, z0, 0);
        return $r1;
    }

    public static byte[] encodeBase64(byte[], boolean, boolean)
    {
        byte[] r0, $r1;
        boolean z0, z1;

        r0 := @parameter0: byte[];
        z0 := @parameter1: boolean;
        z1 := @parameter2: boolean;
        $r1 = staticinvoke <org.apache.tomcat.util.codec.binary.Base64: byte[] encodeBase64(byte[],boolean,boolean,int)>(r0, z0, z1, 2147483647);
        return $r1;
    }

    public static byte[] encodeBase64(byte[], boolean, boolean, int)
    {
        byte[] r0, $r1, $r10;
        boolean z0, z1;
        int i0, $i2;
        org.apache.tomcat.util.codec.binary.Base64 r2, $r3;
        long l1, $l3;
        byte $b4;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @parameter0: byte[];
        z0 := @parameter1: boolean;
        z1 := @parameter2: boolean;
        i0 := @parameter3: int;
        if r0 == null goto label0;

        $i2 = lengthof r0;
        if $i2 != 0 goto label1;

     label0:
        return r0;

     label1:
        if z0 == 0 goto label2;

        $r3 = new org.apache.tomcat.util.codec.binary.Base64;
        specialinvoke $r3.<org.apache.tomcat.util.codec.binary.Base64: void <init>(boolean)>(z1);
        goto label3;

     label2:
        $r3 = new org.apache.tomcat.util.codec.binary.Base64;
        $r1 = <org.apache.tomcat.util.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;
        specialinvoke $r3.<org.apache.tomcat.util.codec.binary.Base64: void <init>(int,byte[],boolean)>(0, $r1, z1);

     label3:
        r2 = $r3;
        l1 = virtualinvoke r2.<org.apache.tomcat.util.codec.binary.Base64: long getEncodedLength(byte[])>(r0);
        $l3 = (long) i0;
        $b4 = l1 cmp $l3;
        if $b4 <= 0 goto label4;

        $r4 = new java.lang.IllegalArgumentException;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Input array too big, the output array would be bigger (");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") than the specified maximum size of ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);
        throw $r4;

     label4:
        $r10 = virtualinvoke r2.<org.apache.tomcat.util.codec.binary.Base64: byte[] encode(byte[])>(r0);
        return $r10;
    }

    public static byte[] decodeBase64(java.lang.String)
    {
        java.lang.String r0;
        org.apache.tomcat.util.codec.binary.Base64 $r1;
        byte[] $r2;

        r0 := @parameter0: java.lang.String;
        $r1 = new org.apache.tomcat.util.codec.binary.Base64;
        specialinvoke $r1.<org.apache.tomcat.util.codec.binary.Base64: void <init>()>();
        $r2 = virtualinvoke $r1.<org.apache.tomcat.util.codec.binary.Base64: byte[] decode(java.lang.String)>(r0);
        return $r2;
    }

    public static byte[] decodeBase64(byte[])
    {
        byte[] r0, $r1;
        int $i0;

        r0 := @parameter0: byte[];
        $i0 = lengthof r0;
        $r1 = staticinvoke <org.apache.tomcat.util.codec.binary.Base64: byte[] decodeBase64(byte[],int,int)>(r0, 0, $i0);
        return $r1;
    }

    public static byte[] decodeBase64(byte[], int, int)
    {
        byte[] r0, $r2;
        int i0, i1;
        org.apache.tomcat.util.codec.binary.Base64 $r1;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r1 = new org.apache.tomcat.util.codec.binary.Base64;
        specialinvoke $r1.<org.apache.tomcat.util.codec.binary.Base64: void <init>()>();
        $r2 = virtualinvoke $r1.<org.apache.tomcat.util.codec.binary.Base64: byte[] decode(byte[],int,int)>(r0, i0, i1);
        return $r2;
    }

    public static java.math.BigInteger decodeInteger(byte[])
    {
        byte[] r0, $r2;
        java.math.BigInteger $r1;

        r0 := @parameter0: byte[];
        $r1 = new java.math.BigInteger;
        $r2 = staticinvoke <org.apache.tomcat.util.codec.binary.Base64: byte[] decodeBase64(byte[])>(r0);
        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);
        return $r1;
    }

    public static byte[] encodeInteger(java.math.BigInteger)
    {
        java.math.BigInteger r0;
        java.lang.NullPointerException $r1;
        byte[] $r2, $r3;

        r0 := @parameter0: java.math.BigInteger;
        if r0 != null goto label0;

        $r1 = new java.lang.NullPointerException;
        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("encodeInteger called with null parameter");
        throw $r1;

     label0:
        $r2 = staticinvoke <org.apache.tomcat.util.codec.binary.Base64: byte[] toIntegerBytes(java.math.BigInteger)>(r0);
        $r3 = staticinvoke <org.apache.tomcat.util.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>($r2, 0);
        return $r3;
    }

    static byte[] toIntegerBytes(java.math.BigInteger)
    {
        java.math.BigInteger r0;
        int i0, i2, i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        byte[] r1, r2;
        byte b1;

        r0 := @parameter0: java.math.BigInteger;
        i0 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();
        $i4 = i0 + 7;
        $i5 = $i4 >> 3;
        i6 = $i5 << 3;
        r1 = virtualinvoke r0.<java.math.BigInteger: byte[] toByteArray()>();
        $i7 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();
        $i8 = $i7 % 8;
        if $i8 == 0 goto label0;

        $i9 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();
        $i10 = $i9 / 8;
        $i11 = $i10 + 1;
        $i12 = i6 / 8;
        if $i11 != $i12 goto label0;

        return r1;

     label0:
        b1 = 0;
        i2 = lengthof r1;
        $i13 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();
        $i14 = $i13 % 8;
        if $i14 != 0 goto label1;

        b1 = 1;
        i2 = i2 + -1;

     label1:
        $i15 = i6 / 8;
        i3 = $i15 - i2;
        $i16 = i6 / 8;
        r2 = newarray (byte)[$i16];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, b1, r2, i3, i2);
        return r2;
    }

    protected boolean isInAlphabet(byte)
    {
        org.apache.tomcat.util.codec.binary.Base64 r0;
        byte b0, $b2;
        byte[] $r1, $r2;
        int $i1;

        r0 := @this: org.apache.tomcat.util.codec.binary.Base64;
        b0 := @parameter0: byte;
        if b0 < 0 goto label0;

        $r1 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] decodeTable>;
        $i1 = lengthof $r1;
        if b0 >= $i1 goto label0;

        $r2 = r0.<org.apache.tomcat.util.codec.binary.Base64: byte[] decodeTable>;
        $b2 = $r2[b0];
        if $b2 == -1 goto label0;

        return 1;

     label0:
        return 0;
    }
}
