class sun.nio.ch.DatagramChannelImpl extends java.nio.channels.DatagramChannel implements sun.nio.ch.SelChImpl
{
    private static sun.nio.ch.NativeDispatcher nd;
    private final java.io.FileDescriptor fd;
    private final int fdVal;
    private final java.net.ProtocolFamily family;
    private volatile long readerThread;
    private volatile long writerThread;
    private java.net.InetAddress cachedSenderInetAddress;
    private int cachedSenderPort;
    private final java.lang.Object readLock;
    private final java.lang.Object writeLock;
    private final java.lang.Object stateLock;
    private static final int ST_UNINITIALIZED;
    private static final int ST_UNCONNECTED;
    private static final int ST_CONNECTED;
    private static final int ST_KILLED;
    private int state;
    private java.net.InetSocketAddress localAddress;
    private java.net.InetSocketAddress remoteAddress;
    private java.net.DatagramSocket socket;
    private sun.nio.ch.MembershipRegistry registry;
    private boolean reuseAddressEmulated;
    private boolean isReuseAddress;
    private java.net.SocketAddress sender;
    static final boolean $assertionsDisabled;

    public void <init>(java.nio.channels.spi.SelectorProvider) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.nio.channels.spi.SelectorProvider r1;
        java.io.IOException r2, $r11;
        java.lang.Object $r3, $r4, $r5;
        boolean $z0;
        java.net.StandardProtocolFamily $r7;
        java.net.ProtocolFamily $r8;
        java.io.FileDescriptor $r9, $r10;
        int $i0;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;
        specialinvoke r0.<java.nio.channels.DatagramChannel: void <init>(java.nio.channels.spi.SelectorProvider)>(r1);
        r0.<sun.nio.ch.DatagramChannelImpl: long readerThread> = 0L;
        r0.<sun.nio.ch.DatagramChannelImpl: long writerThread> = 0L;
        $r3 = new java.lang.Object;
        specialinvoke $r3.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object readLock> = $r3;
        $r4 = new java.lang.Object;
        specialinvoke $r4.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object writeLock> = $r4;
        $r5 = new java.lang.Object;
        specialinvoke $r5.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock> = $r5;
        r0.<sun.nio.ch.DatagramChannelImpl: int state> = -1;
        staticinvoke <sun.net.ResourceManager: void beforeUdpCreate()>();

     label0:
        $z0 = staticinvoke <sun.nio.ch.Net: boolean isIPv6Available()>();
        if $z0 == 0 goto label1;

        $r7 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET6>;
        goto label2;

     label1:
        $r7 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET>;

     label2:
        r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family> = $r7;
        $r8 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family>;
        $r9 = staticinvoke <sun.nio.ch.Net: java.io.FileDescriptor socket(java.net.ProtocolFamily,boolean)>($r8, 0);
        r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd> = $r9;
        $r10 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $i0 = staticinvoke <sun.nio.ch.IOUtil: int fdVal(java.io.FileDescriptor)>($r10);
        r0.<sun.nio.ch.DatagramChannelImpl: int fdVal> = $i0;
        r0.<sun.nio.ch.DatagramChannelImpl: int state> = 0;

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;
        r2 = $r11;
        staticinvoke <sun.net.ResourceManager: void afterUdpClose()>();
        throw r2;

     label5:
        return;

        catch java.io.IOException from label0 to label3 with label4;
    }

    public void <init>(java.nio.channels.spi.SelectorProvider, java.net.ProtocolFamily) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.nio.channels.spi.SelectorProvider r1;
        java.net.ProtocolFamily r2;
        java.lang.Object $r3, $r4, $r5;
        java.net.StandardProtocolFamily $r6, $r7, $r10;
        java.lang.NullPointerException $r8;
        java.lang.UnsupportedOperationException $r9, $r11;
        boolean $z0;
        java.io.FileDescriptor $r12, $r13;
        int $i0;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;
        r2 := @parameter1: java.net.ProtocolFamily;
        specialinvoke r0.<java.nio.channels.DatagramChannel: void <init>(java.nio.channels.spi.SelectorProvider)>(r1);
        r0.<sun.nio.ch.DatagramChannelImpl: long readerThread> = 0L;
        r0.<sun.nio.ch.DatagramChannelImpl: long writerThread> = 0L;
        $r3 = new java.lang.Object;
        specialinvoke $r3.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object readLock> = $r3;
        $r4 = new java.lang.Object;
        specialinvoke $r4.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object writeLock> = $r4;
        $r5 = new java.lang.Object;
        specialinvoke $r5.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock> = $r5;
        r0.<sun.nio.ch.DatagramChannelImpl: int state> = -1;
        $r6 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET>;
        if r2 == $r6 goto label1;

        $r7 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET6>;
        if r2 == $r7 goto label1;

        if r2 != null goto label0;

        $r8 = new java.lang.NullPointerException;
        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("\'family\' is null");
        throw $r8;

     label0:
        $r9 = new java.lang.UnsupportedOperationException;
        specialinvoke $r9.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Protocol family not supported");
        throw $r9;

     label1:
        $r10 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET6>;
        if r2 != $r10 goto label2;

        $z0 = staticinvoke <sun.nio.ch.Net: boolean isIPv6Available()>();
        if $z0 != 0 goto label2;

        $r11 = new java.lang.UnsupportedOperationException;
        specialinvoke $r11.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("IPv6 not available");
        throw $r11;

     label2:
        r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family> = r2;
        $r12 = staticinvoke <sun.nio.ch.Net: java.io.FileDescriptor socket(java.net.ProtocolFamily,boolean)>(r2, 0);
        r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd> = $r12;
        $r13 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $i0 = staticinvoke <sun.nio.ch.IOUtil: int fdVal(java.io.FileDescriptor)>($r13);
        r0.<sun.nio.ch.DatagramChannelImpl: int fdVal> = $i0;
        r0.<sun.nio.ch.DatagramChannelImpl: int state> = 0;
        return;
    }

    public void <init>(java.nio.channels.spi.SelectorProvider, java.io.FileDescriptor) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.nio.channels.spi.SelectorProvider r1;
        java.io.FileDescriptor r2;
        java.lang.Object $r3, $r4, $r5;
        boolean $z0;
        java.net.StandardProtocolFamily $r7;
        int $i0;
        java.net.InetSocketAddress $r8;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;
        r2 := @parameter1: java.io.FileDescriptor;
        specialinvoke r0.<java.nio.channels.DatagramChannel: void <init>(java.nio.channels.spi.SelectorProvider)>(r1);
        r0.<sun.nio.ch.DatagramChannelImpl: long readerThread> = 0L;
        r0.<sun.nio.ch.DatagramChannelImpl: long writerThread> = 0L;
        $r3 = new java.lang.Object;
        specialinvoke $r3.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object readLock> = $r3;
        $r4 = new java.lang.Object;
        specialinvoke $r4.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object writeLock> = $r4;
        $r5 = new java.lang.Object;
        specialinvoke $r5.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock> = $r5;
        r0.<sun.nio.ch.DatagramChannelImpl: int state> = -1;
        $z0 = staticinvoke <sun.nio.ch.Net: boolean isIPv6Available()>();
        if $z0 == 0 goto label0;

        $r7 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET6>;
        goto label1;

     label0:
        $r7 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET>;

     label1:
        r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family> = $r7;
        r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd> = r2;
        $i0 = staticinvoke <sun.nio.ch.IOUtil: int fdVal(java.io.FileDescriptor)>(r2);
        r0.<sun.nio.ch.DatagramChannelImpl: int fdVal> = $i0;
        r0.<sun.nio.ch.DatagramChannelImpl: int state> = 0;
        $r8 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress localAddress(java.io.FileDescriptor)>(r2);
        r0.<sun.nio.ch.DatagramChannelImpl: java.net.InetSocketAddress localAddress> = $r8;
        return;
    }

    public java.net.DatagramSocket socket()
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r7;
        java.net.DatagramSocket $r4, $r5, $r6;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        $r3 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.DatagramSocket socket>;
        if $r4 != null goto label1;

        $r5 = staticinvoke <sun.nio.ch.DatagramSocketAdaptor: java.net.DatagramSocket create(sun.nio.ch.DatagramChannelImpl)>(r0);
        r0.<sun.nio.ch.DatagramChannelImpl: java.net.DatagramSocket socket> = $r5;

     label1:
        $r6 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.DatagramSocket socket>;
        exitmonitor r1;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

     label4:
        r2 = $r7;
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.net.SocketAddress getLocalAddress() throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r7;
        boolean $z0;
        java.nio.channels.ClosedChannelException $r4;
        java.net.InetSocketAddress $r5, $r6;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        $r3 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z0 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label1;

        $r4 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r4.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r4;

     label1:
        $r5 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.InetSocketAddress localAddress>;
        $r6 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress getRevealedLocalAddress(java.net.InetSocketAddress)>($r5);
        exitmonitor r1;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

     label4:
        r2 = $r7;
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.net.SocketAddress getRemoteAddress() throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        boolean $z0;
        java.nio.channels.ClosedChannelException $r4;
        java.net.InetSocketAddress $r5;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        $r3 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z0 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label1;

        $r4 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r4.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r4;

     label1:
        $r5 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.InetSocketAddress remoteAddress>;
        exitmonitor r1;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

     label4:
        r2 = $r6;
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.nio.channels.DatagramChannel setOption(java.net.SocketOption, java.lang.Object) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.net.SocketOption r1, $r15, $r21, $r22, $r26, $r36;
        java.lang.Object r2, r4, $r14;
        java.lang.StringBuilder $r3, $r10, $r11, $r12;
        java.net.NetworkInterface r5;
        int i0, i1;
        java.lang.Throwable r6, $r42;
        java.lang.NullPointerException $r7;
        java.util.Set $r8;
        boolean $z0, $z1, $z2;
        java.lang.UnsupportedOperationException $r9;
        java.lang.String $r13;
        java.net.ProtocolFamily $r16, $r19, $r24, $r28, $r40;
        java.net.StandardProtocolFamily $r17, $r29;
        java.io.FileDescriptor $r18, $r23, $r31, $r34, $r39;
        java.lang.IllegalArgumentException $r27;
        java.io.IOException $r30, $r33;
        java.net.Inet4Address r32;
        java.net.InetSocketAddress $r37;
        java.lang.Boolean $r38;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.net.SocketOption;
        r2 := @parameter1: java.lang.Object;
        if r1 != null goto label0;

        $r7 = new java.lang.NullPointerException;
        specialinvoke $r7.<java.lang.NullPointerException: void <init>()>();
        throw $r7;

     label0:
        $r8 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: java.util.Set supportedOptions()>();
        $z0 = interfaceinvoke $r8.<java.util.Set: boolean contains(java.lang.Object)>(r1);
        if $z0 != 0 goto label1;

        $r9 = new java.lang.UnsupportedOperationException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not supported");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r13);
        throw $r9;

     label1:
        $r14 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r4 = $r14;
        entermonitor $r14;

     label2:
        specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: void ensureOpen()>();
        $r15 = <java.net.StandardSocketOptions: java.net.SocketOption IP_TOS>;
        if r1 != $r15 goto label5;

        $r16 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family>;
        $r17 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET>;
        if $r16 != $r17 goto label3;

        $r18 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r19 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family>;
        staticinvoke <sun.nio.ch.Net: void setSocketOption(java.io.FileDescriptor,java.net.ProtocolFamily,java.net.SocketOption,java.lang.Object)>($r18, $r19, r1, r2);

     label3:
        exitmonitor r4;

     label4:
        return r0;

     label5:
        $r21 = <java.net.StandardSocketOptions: java.net.SocketOption IP_MULTICAST_TTL>;
        if r1 == $r21 goto label6;

        $r22 = <java.net.StandardSocketOptions: java.net.SocketOption IP_MULTICAST_LOOP>;
        if r1 != $r22 goto label8;

     label6:
        $r23 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r24 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family>;
        staticinvoke <sun.nio.ch.Net: void setSocketOption(java.io.FileDescriptor,java.net.ProtocolFamily,java.net.SocketOption,java.lang.Object)>($r23, $r24, r1, r2);
        exitmonitor r4;

     label7:
        return r0;

     label8:
        $r26 = <java.net.StandardSocketOptions: java.net.SocketOption IP_MULTICAST_IF>;
        if r1 != $r26 goto label15;

        if r2 != null goto label9;

        $r27 = new java.lang.IllegalArgumentException;
        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot set IP_MULTICAST_IF to \'null\'");
        throw $r27;

     label9:
        r5 = (java.net.NetworkInterface) r2;
        $r28 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family>;
        $r29 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET6>;
        if $r28 != $r29 goto label11;

        i0 = virtualinvoke r5.<java.net.NetworkInterface: int getIndex()>();
        if i0 != -1 goto label10;

        $r30 = new java.io.IOException;
        specialinvoke $r30.<java.io.IOException: void <init>(java.lang.String)>("Network interface cannot be identified");
        throw $r30;

     label10:
        $r31 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        staticinvoke <sun.nio.ch.Net: void setInterface6(java.io.FileDescriptor,int)>($r31, i0);
        goto label13;

     label11:
        r32 = staticinvoke <sun.nio.ch.Net: java.net.Inet4Address anyInet4Address(java.net.NetworkInterface)>(r5);
        if r32 != null goto label12;

        $r33 = new java.io.IOException;
        specialinvoke $r33.<java.io.IOException: void <init>(java.lang.String)>("Network interface not configured for IPv4");
        throw $r33;

     label12:
        i1 = staticinvoke <sun.nio.ch.Net: int inet4AsInt(java.net.InetAddress)>(r32);
        $r34 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        staticinvoke <sun.nio.ch.Net: void setInterface4(java.io.FileDescriptor,int)>($r34, i1);

     label13:
        exitmonitor r4;

     label14:
        return r0;

     label15:
        $r36 = <java.net.StandardSocketOptions: java.net.SocketOption SO_REUSEADDR>;
        if r1 != $r36 goto label16;

        $z1 = staticinvoke <sun.nio.ch.Net: boolean useExclusiveBind()>();
        if $z1 == 0 goto label16;

        $r37 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.InetSocketAddress localAddress>;
        if $r37 == null goto label16;

        r0.<sun.nio.ch.DatagramChannelImpl: boolean reuseAddressEmulated> = 1;
        $r38 = (java.lang.Boolean) r2;
        $z2 = virtualinvoke $r38.<java.lang.Boolean: boolean booleanValue()>();
        r0.<sun.nio.ch.DatagramChannelImpl: boolean isReuseAddress> = $z2;

     label16:
        $r39 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r40 = <sun.nio.ch.Net: java.net.ProtocolFamily UNSPEC>;
        staticinvoke <sun.nio.ch.Net: void setSocketOption(java.io.FileDescriptor,java.net.ProtocolFamily,java.net.SocketOption,java.lang.Object)>($r39, $r40, r1, r2);
        exitmonitor r4;

     label17:
        return r0;

     label18:
        $r42 := @caughtexception;

     label19:
        r6 = $r42;
        exitmonitor r4;

     label20:
        throw r6;

        catch java.lang.Throwable from label2 to label4 with label18;
        catch java.lang.Throwable from label5 to label7 with label18;
        catch java.lang.Throwable from label8 to label14 with label18;
        catch java.lang.Throwable from label15 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public java.lang.Object getOption(java.net.SocketOption) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.net.SocketOption r1, $r15, $r22, $r23, $r27, $r37;
        java.lang.StringBuilder $r2, $r10, $r11, $r12;
        java.lang.Object r3, $r14, $r20, $r26, $r41;
        int i0, i1;
        java.net.InetAddress r4;
        java.net.NetworkInterface r5, r34;
        java.lang.Throwable r6, $r42;
        java.lang.NullPointerException $r7;
        java.util.Set $r8;
        boolean $z0, $z1, $z2;
        java.lang.UnsupportedOperationException $r9;
        java.lang.String $r13;
        java.net.ProtocolFamily $r16, $r19, $r25, $r28, $r40;
        java.net.StandardProtocolFamily $r17, $r29;
        java.io.FileDescriptor $r18, $r24, $r30, $r33, $r39;
        java.lang.Integer $r21;
        null_type $n0, $n1;
        java.io.IOException $r31, $r35;
        java.lang.Boolean $r38;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.net.SocketOption;
        if r1 != null goto label0;

        $r7 = new java.lang.NullPointerException;
        specialinvoke $r7.<java.lang.NullPointerException: void <init>()>();
        throw $r7;

     label0:
        $r8 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: java.util.Set supportedOptions()>();
        $z0 = interfaceinvoke $r8.<java.util.Set: boolean contains(java.lang.Object)>(r1);
        if $z0 != 0 goto label1;

        $r9 = new java.lang.UnsupportedOperationException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not supported");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r13);
        throw $r9;

     label1:
        $r14 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r3 = $r14;
        entermonitor $r14;

     label2:
        specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: void ensureOpen()>();
        $r15 = <java.net.StandardSocketOptions: java.net.SocketOption IP_TOS>;
        if r1 != $r15 goto label6;

        $r16 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family>;
        $r17 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET>;
        if $r16 != $r17 goto label4;

        $r18 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r19 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family>;
        $r20 = staticinvoke <sun.nio.ch.Net: java.lang.Object getSocketOption(java.io.FileDescriptor,java.net.ProtocolFamily,java.net.SocketOption)>($r18, $r19, r1);
        exitmonitor r3;

     label3:
        return $r20;

     label4:
        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
        exitmonitor r3;

     label5:
        return $r21;

     label6:
        $r22 = <java.net.StandardSocketOptions: java.net.SocketOption IP_MULTICAST_TTL>;
        if r1 == $r22 goto label7;

        $r23 = <java.net.StandardSocketOptions: java.net.SocketOption IP_MULTICAST_LOOP>;
        if r1 != $r23 goto label9;

     label7:
        $r24 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r25 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family>;
        $r26 = staticinvoke <sun.nio.ch.Net: java.lang.Object getSocketOption(java.io.FileDescriptor,java.net.ProtocolFamily,java.net.SocketOption)>($r24, $r25, r1);
        exitmonitor r3;

     label8:
        return $r26;

     label9:
        $r27 = <java.net.StandardSocketOptions: java.net.SocketOption IP_MULTICAST_IF>;
        if r1 != $r27 goto label19;

        $r28 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family>;
        $r29 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET>;
        if $r28 != $r29 goto label14;

        $r30 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        i0 = staticinvoke <sun.nio.ch.Net: int getInterface4(java.io.FileDescriptor)>($r30);
        if i0 != 0 goto label11;

        $n0 = null;
        exitmonitor r3;

     label10:
        return $n0;

     label11:
        r4 = staticinvoke <sun.nio.ch.Net: java.net.InetAddress inet4FromInt(int)>(i0);
        r5 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)>(r4);
        if r5 != null goto label12;

        $r31 = new java.io.IOException;
        specialinvoke $r31.<java.io.IOException: void <init>(java.lang.String)>("Unable to map address to interface");
        throw $r31;

     label12:
        exitmonitor r3;

     label13:
        return r5;

     label14:
        $r33 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        i1 = staticinvoke <sun.nio.ch.Net: int getInterface6(java.io.FileDescriptor)>($r33);
        if i1 != 0 goto label16;

        $n1 = null;
        exitmonitor r3;

     label15:
        return $n1;

     label16:
        r34 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface getByIndex(int)>(i1);
        if r34 != null goto label17;

        $r35 = new java.io.IOException;
        specialinvoke $r35.<java.io.IOException: void <init>(java.lang.String)>("Unable to map index to interface");
        throw $r35;

     label17:
        exitmonitor r3;

     label18:
        return r34;

     label19:
        $r37 = <java.net.StandardSocketOptions: java.net.SocketOption SO_REUSEADDR>;
        if r1 != $r37 goto label21;

        $z1 = r0.<sun.nio.ch.DatagramChannelImpl: boolean reuseAddressEmulated>;
        if $z1 == 0 goto label21;

        $z2 = r0.<sun.nio.ch.DatagramChannelImpl: boolean isReuseAddress>;
        $r38 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);
        exitmonitor r3;

     label20:
        return $r38;

     label21:
        $r39 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r40 = <sun.nio.ch.Net: java.net.ProtocolFamily UNSPEC>;
        $r41 = staticinvoke <sun.nio.ch.Net: java.lang.Object getSocketOption(java.io.FileDescriptor,java.net.ProtocolFamily,java.net.SocketOption)>($r39, $r40, r1);
        exitmonitor r3;

     label22:
        return $r41;

     label23:
        $r42 := @caughtexception;

     label24:
        r6 = $r42;
        exitmonitor r3;

     label25:
        throw r6;

        catch java.lang.Throwable from label2 to label3 with label23;
        catch java.lang.Throwable from label4 to label5 with label23;
        catch java.lang.Throwable from label6 to label8 with label23;
        catch java.lang.Throwable from label9 to label10 with label23;
        catch java.lang.Throwable from label11 to label13 with label23;
        catch java.lang.Throwable from label14 to label15 with label23;
        catch java.lang.Throwable from label16 to label18 with label23;
        catch java.lang.Throwable from label19 to label20 with label23;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
    }

    public final java.util.Set supportedOptions()
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.util.Set $r1;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        $r1 = <sun.nio.ch.DatagramChannelImpl$DefaultOptionsHolder: java.util.Set defaultOptions>;
        return $r1;
    }

    private void ensureOpen() throws java.nio.channels.ClosedChannelException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        boolean $z0;
        java.nio.channels.ClosedChannelException $r1;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        $z0 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label0;

        $r1 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r1.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r1;

     label0:
        return;
    }

    public java.net.SocketAddress receive(java.nio.ByteBuffer) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1, r3;
        java.lang.Object r2, $r9;
        int i0, $i2, $i3;
        null_type n0, n1, n2;
        java.lang.SecurityException r4, $r25;
        java.lang.Throwable r5, r6, $r32, $r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        java.lang.IllegalArgumentException $r7;
        java.lang.NullPointerException $r8;
        java.net.SocketAddress $r10, $r21, r29;
        java.lang.AssertionError $r13, $r17, $r20, $r31, $r34;
        java.lang.SecurityManager r14;
        long $l1;
        java.io.FileDescriptor $r15, $r18;
        java.net.InetSocketAddress r22;
        java.net.InetAddress $r23;
        java.lang.String $r24;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isReadOnly()>();
        if $z0 == 0 goto label0;

        $r7 = new java.lang.IllegalArgumentException;
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Read-only buffer");
        throw $r7;

     label0:
        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;
        specialinvoke $r8.<java.lang.NullPointerException: void <init>()>();
        throw $r8;

     label1:
        $r9 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object readLock>;
        r2 = $r9;
        entermonitor $r9;

     label2:
        specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: void ensureOpen()>();
        $r10 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: java.net.SocketAddress localAddress()>();
        if $r10 != null goto label3;

        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: java.nio.channels.DatagramChannel bind(java.net.SocketAddress)>(null);

     label3:
        i0 = 0;
        r3 = null;

     label4:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void begin()>();
        $z1 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label12;

        n0 = null;

     label5:
        if r3 == null goto label6;

        staticinvoke <sun.nio.ch.Util: void releaseTemporaryDirectBuffer(java.nio.ByteBuffer)>(r3);

     label6:
        r0.<sun.nio.ch.DatagramChannelImpl: long readerThread> = 0L;
        if i0 > 0 goto label7;

        if i0 != -2 goto label8;

     label7:
        $z2 = 1;
        goto label9;

     label8:
        $z2 = 0;

     label9:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z2);
        $z3 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z3 != 0 goto label10;

        $z4 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z4 != 0 goto label10;

        $r13 = new java.lang.AssertionError;
        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();
        throw $r13;

     label10:
        exitmonitor r2;

     label11:
        return n0;

     label12:
        r14 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        $l1 = staticinvoke <sun.nio.ch.NativeThread: long current()>();
        r0.<sun.nio.ch.DatagramChannelImpl: long readerThread> = $l1;
        $z5 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isConnected()>();
        if $z5 != 0 goto label13;

        if r14 != null goto label22;

     label13:
        $r15 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        i0 = specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: int receive(java.io.FileDescriptor,java.nio.ByteBuffer)>($r15, r1);
        if i0 != -3 goto label14;

        $z6 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z6 != 0 goto label13;

     label14:
        if i0 != -2 goto label37;

        n1 = null;

     label15:
        if r3 == null goto label16;

        staticinvoke <sun.nio.ch.Util: void releaseTemporaryDirectBuffer(java.nio.ByteBuffer)>(r3);

     label16:
        r0.<sun.nio.ch.DatagramChannelImpl: long readerThread> = 0L;
        if i0 > 0 goto label17;

        if i0 != -2 goto label18;

     label17:
        $z7 = 1;
        goto label19;

     label18:
        $z7 = 0;

     label19:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z7);
        $z8 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z8 != 0 goto label20;

        $z9 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z9 != 0 goto label20;

        $r17 = new java.lang.AssertionError;
        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();
        throw $r17;

     label20:
        exitmonitor r2;

     label21:
        return n1;

     label22:
        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();
        r3 = staticinvoke <sun.nio.ch.Util: java.nio.ByteBuffer getTemporaryDirectBuffer(int)>($i2);

     label23:
        $r18 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        i0 = specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: int receive(java.io.FileDescriptor,java.nio.ByteBuffer)>($r18, r3);
        if i0 != -3 goto label24;

        $z10 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z10 != 0 goto label23;

     label24:
        if i0 != -2 goto label32;

        n2 = null;

     label25:
        if r3 == null goto label26;

        staticinvoke <sun.nio.ch.Util: void releaseTemporaryDirectBuffer(java.nio.ByteBuffer)>(r3);

     label26:
        r0.<sun.nio.ch.DatagramChannelImpl: long readerThread> = 0L;
        if i0 > 0 goto label27;

        if i0 != -2 goto label28;

     label27:
        $z11 = 1;
        goto label29;

     label28:
        $z11 = 0;

     label29:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z11);
        $z12 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z12 != 0 goto label30;

        $z13 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z13 != 0 goto label30;

        $r20 = new java.lang.AssertionError;
        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();
        throw $r20;

     label30:
        exitmonitor r2;

     label31:
        return n2;

     label32:
        $r21 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.SocketAddress sender>;
        r22 = (java.net.InetSocketAddress) $r21;

     label33:
        $r23 = virtualinvoke r22.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $r24 = virtualinvoke $r23.<java.net.InetAddress: java.lang.String getHostAddress()>();
        $i3 = virtualinvoke r22.<java.net.InetSocketAddress: int getPort()>();
        virtualinvoke r14.<java.lang.SecurityManager: void checkAccept(java.lang.String,int)>($r24, $i3);

     label34:
        goto label36;

     label35:
        $r25 := @caughtexception;
        r4 = $r25;
        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer clear()>();
        i0 = 0;
        goto label23;

     label36:
        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r3);
        goto label37;

     label37:
        r29 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.SocketAddress sender>;

     label38:
        if r3 == null goto label39;

        staticinvoke <sun.nio.ch.Util: void releaseTemporaryDirectBuffer(java.nio.ByteBuffer)>(r3);

     label39:
        r0.<sun.nio.ch.DatagramChannelImpl: long readerThread> = 0L;
        if i0 > 0 goto label40;

        if i0 != -2 goto label41;

     label40:
        $z14 = 1;
        goto label42;

     label41:
        $z14 = 0;

     label42:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z14);
        $z15 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z15 != 0 goto label43;

        $z16 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z16 != 0 goto label43;

        $r31 = new java.lang.AssertionError;
        specialinvoke $r31.<java.lang.AssertionError: void <init>()>();
        throw $r31;

     label43:
        exitmonitor r2;

     label44:
        return r29;

     label45:
        $r32 := @caughtexception;

     label46:
        r5 = $r32;

     label47:
        if r3 == null goto label48;

        staticinvoke <sun.nio.ch.Util: void releaseTemporaryDirectBuffer(java.nio.ByteBuffer)>(r3);

     label48:
        r0.<sun.nio.ch.DatagramChannelImpl: long readerThread> = 0L;
        if i0 > 0 goto label49;

        if i0 != -2 goto label50;

     label49:
        $z17 = 1;
        goto label51;

     label50:
        $z17 = 0;

     label51:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z17);
        $z18 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z18 != 0 goto label52;

        $z19 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z19 != 0 goto label52;

        $r34 = new java.lang.AssertionError;
        specialinvoke $r34.<java.lang.AssertionError: void <init>()>();
        throw $r34;

     label52:
        throw r5;

     label53:
        $r35 := @caughtexception;
        r6 = $r35;
        exitmonitor r2;

     label54:
        throw r6;

        catch java.lang.SecurityException from label33 to label34 with label35;
        catch java.lang.Throwable from label4 to label5 with label45;
        catch java.lang.Throwable from label12 to label15 with label45;
        catch java.lang.Throwable from label22 to label25 with label45;
        catch java.lang.Throwable from label32 to label38 with label45;
        catch java.lang.Throwable from label46 to label47 with label45;
        catch java.lang.Throwable from label2 to label11 with label53;
        catch java.lang.Throwable from label12 to label21 with label53;
        catch java.lang.Throwable from label22 to label31 with label53;
        catch java.lang.Throwable from label32 to label44 with label53;
        catch java.lang.Throwable from label46 to label54 with label53;
    }

    private int receive(java.io.FileDescriptor, java.nio.ByteBuffer) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.io.FileDescriptor r1;
        java.nio.ByteBuffer r2, r3;
        int i0, i1, i2, i3, i4, i5, $i6, $i7;
        java.lang.Throwable r4, $r8;
        boolean $z0, $z1;
        java.lang.AssertionError $r5;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        r2 := @parameter1: java.nio.ByteBuffer;
        i0 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();
        i1 = virtualinvoke r2.<java.nio.ByteBuffer: int limit()>();
        $z0 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label0:
        if i0 > i1 goto label1;

        $i6 = i1 - i0;
        goto label2;

     label1:
        $i6 = 0;

     label2:
        i2 = $i6;
        $z1 = r2 instanceof sun.nio.ch.DirectBuffer;
        if $z1 == 0 goto label3;

        if i2 <= 0 goto label3;

        $i7 = specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: int receiveIntoNativeBuffer(java.io.FileDescriptor,java.nio.ByteBuffer,int,int)>(r1, r2, i2, i0);
        return $i7;

     label3:
        i3 = staticinvoke <java.lang.Math: int max(int,int)>(i2, 1);
        r3 = staticinvoke <sun.nio.ch.Util: java.nio.ByteBuffer getTemporaryDirectBuffer(int)>(i3);

     label4:
        i4 = specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: int receiveIntoNativeBuffer(java.io.FileDescriptor,java.nio.ByteBuffer,int,int)>(r1, r3, i3, 0);
        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        if i4 <= 0 goto label5;

        if i2 <= 0 goto label5;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r3);

     label5:
        i5 = i4;

     label6:
        staticinvoke <sun.nio.ch.Util: void releaseTemporaryDirectBuffer(java.nio.ByteBuffer)>(r3);
        return i5;

     label7:
        $r8 := @caughtexception;

     label8:
        r4 = $r8;

     label9:
        staticinvoke <sun.nio.ch.Util: void releaseTemporaryDirectBuffer(java.nio.ByteBuffer)>(r3);
        throw r4;

        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private int receiveIntoNativeBuffer(java.io.FileDescriptor, java.nio.ByteBuffer, int, int) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.io.FileDescriptor r1;
        java.nio.ByteBuffer r2;
        int i0, i1, i2, $i6;
        sun.nio.ch.DirectBuffer $r3;
        long $l3, $l4, $l5;
        boolean $z0;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        r2 := @parameter1: java.nio.ByteBuffer;
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        $r3 = (sun.nio.ch.DirectBuffer) r2;
        $l3 = interfaceinvoke $r3.<sun.nio.ch.DirectBuffer: long address()>();
        $l4 = (long) i1;
        $l5 = $l3 + $l4;
        $z0 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isConnected()>();
        i2 = specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: int receive0(java.io.FileDescriptor,long,int,boolean)>(r1, $l5, i0, $z0);
        if i2 <= 0 goto label0;

        $i6 = i1 + i2;
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i6);

     label0:
        return i2;
    }

    public int send(java.nio.ByteBuffer, java.net.SocketAddress) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        java.net.SocketAddress r2;
        java.lang.Object r3, r6, $r13, $r15, $r24, r25;
        java.net.InetSocketAddress r4, $r18, $r26, $r28;
        java.net.InetAddress r5;
        java.lang.SecurityManager r7;
        java.lang.Throwable r8, r9, r10, r11, $r20, $r29, $r32, $r35;
        java.lang.NullPointerException $r12, $r16;
        java.io.IOException $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.lang.String $r17;
        int $i0, $i1, i2, i5;
        java.lang.IllegalArgumentException $r19;
        byte b3;
        java.lang.AssertionError $r22, $r31, $r34;
        long $l4;
        java.io.FileDescriptor $r23, $r27;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        r2 := @parameter1: java.net.SocketAddress;
        if r1 != null goto label0;

        $r12 = new java.lang.NullPointerException;
        specialinvoke $r12.<java.lang.NullPointerException: void <init>()>();
        throw $r12;

     label0:
        $r13 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object writeLock>;
        r3 = $r13;
        entermonitor $r13;

     label1:
        specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: void ensureOpen()>();
        r4 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress checkAddress(java.net.SocketAddress)>(r2);
        r5 = virtualinvoke r4.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        if r5 != null goto label2;

        $r14 = new java.io.IOException;
        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Target address not resolved");
        throw $r14;

     label2:
        $r15 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r6 = $r15;
        entermonitor $r15;

     label3:
        $z0 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isConnected()>();
        if $z0 != 0 goto label7;

        if r2 != null goto label4;

        $r16 = new java.lang.NullPointerException;
        specialinvoke $r16.<java.lang.NullPointerException: void <init>()>();
        throw $r16;

     label4:
        r7 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r7 == null goto label6;

        $z1 = virtualinvoke r5.<java.net.InetAddress: boolean isMulticastAddress()>();
        if $z1 == 0 goto label5;

        virtualinvoke r7.<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress)>(r5);
        goto label6;

     label5:
        $r17 = virtualinvoke r5.<java.net.InetAddress: java.lang.String getHostAddress()>();
        $i0 = virtualinvoke r4.<java.net.InetSocketAddress: int getPort()>();
        virtualinvoke r7.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>($r17, $i0);

     label6:
        goto label11;

     label7:
        $r18 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.InetSocketAddress remoteAddress>;
        $z2 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r18);
        if $z2 != 0 goto label8;

        $r19 = new java.lang.IllegalArgumentException;
        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connected address not equal to target address");
        throw $r19;

     label8:
        $i1 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: int write(java.nio.ByteBuffer)>(r1);
        exitmonitor r6;

     label9:
        exitmonitor r3;

     label10:
        return $i1;

     label11:
        exitmonitor r6;

     label12:
        goto label16;

     label13:
        $r20 := @caughtexception;

     label14:
        r8 = $r20;
        exitmonitor r6;

     label15:
        throw r8;

     label16:
        i2 = 0;

     label17:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void begin()>();
        $z3 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z3 != 0 goto label24;

        b3 = 0;

     label18:
        r0.<sun.nio.ch.DatagramChannelImpl: long writerThread> = 0L;
        if i2 > 0 goto label19;

        if i2 != -2 goto label20;

     label19:
        $z4 = 1;
        goto label21;

     label20:
        $z4 = 0;

     label21:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z4);
        $z5 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z5 != 0 goto label22;

        $z6 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i2);
        if $z6 != 0 goto label22;

        $r22 = new java.lang.AssertionError;
        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();
        throw $r22;

     label22:
        exitmonitor r3;

     label23:
        return b3;

     label24:
        $l4 = staticinvoke <sun.nio.ch.NativeThread: long current()>();
        r0.<sun.nio.ch.DatagramChannelImpl: long writerThread> = $l4;

     label25:
        $r23 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        i2 = specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: int send(java.io.FileDescriptor,java.nio.ByteBuffer,java.net.InetSocketAddress)>($r23, r1, r4);
        if i2 != -3 goto label26;

        $z7 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z7 != 0 goto label25;

     label26:
        $r24 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r25 = $r24;
        entermonitor $r24;

     label27:
        $z8 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z8 == 0 goto label28;

        $r26 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.InetSocketAddress localAddress>;
        if $r26 != null goto label28;

        $r27 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r28 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress localAddress(java.io.FileDescriptor)>($r27);
        r0.<sun.nio.ch.DatagramChannelImpl: java.net.InetSocketAddress localAddress> = $r28;

     label28:
        exitmonitor r25;

     label29:
        goto label33;

     label30:
        $r29 := @caughtexception;

     label31:
        r9 = $r29;
        exitmonitor r25;

     label32:
        throw r9;

     label33:
        i5 = staticinvoke <sun.nio.ch.IOStatus: int normalize(int)>(i2);

     label34:
        r0.<sun.nio.ch.DatagramChannelImpl: long writerThread> = 0L;
        if i2 > 0 goto label35;

        if i2 != -2 goto label36;

     label35:
        $z9 = 1;
        goto label37;

     label36:
        $z9 = 0;

     label37:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z9);
        $z10 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z10 != 0 goto label38;

        $z11 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i2);
        if $z11 != 0 goto label38;

        $r31 = new java.lang.AssertionError;
        specialinvoke $r31.<java.lang.AssertionError: void <init>()>();
        throw $r31;

     label38:
        exitmonitor r3;

     label39:
        return i5;

     label40:
        $r32 := @caughtexception;

     label41:
        r10 = $r32;

     label42:
        r0.<sun.nio.ch.DatagramChannelImpl: long writerThread> = 0L;
        if i2 > 0 goto label43;

        if i2 != -2 goto label44;

     label43:
        $z12 = 1;
        goto label45;

     label44:
        $z12 = 0;

     label45:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z12);
        $z13 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z13 != 0 goto label46;

        $z14 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i2);
        if $z14 != 0 goto label46;

        $r34 = new java.lang.AssertionError;
        specialinvoke $r34.<java.lang.AssertionError: void <init>()>();
        throw $r34;

     label46:
        throw r10;

     label47:
        $r35 := @caughtexception;
        r11 = $r35;
        exitmonitor r3;

     label48:
        throw r11;

        catch java.lang.Throwable from label3 to label9 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label27 to label29 with label30;
        catch java.lang.Throwable from label31 to label32 with label30;
        catch java.lang.Throwable from label17 to label18 with label40;
        catch java.lang.Throwable from label24 to label34 with label40;
        catch java.lang.Throwable from label41 to label42 with label40;
        catch java.lang.Throwable from label1 to label10 with label47;
        catch java.lang.Throwable from label11 to label23 with label47;
        catch java.lang.Throwable from label24 to label39 with label47;
        catch java.lang.Throwable from label41 to label48 with label47;
    }

    private int send(java.io.FileDescriptor, java.nio.ByteBuffer, java.net.InetSocketAddress) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.io.FileDescriptor r1;
        java.nio.ByteBuffer r2, r4;
        java.net.InetSocketAddress r3;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        java.lang.Throwable r5, $r11;
        boolean $z0, $z1;
        java.lang.AssertionError $r6;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        r2 := @parameter1: java.nio.ByteBuffer;
        r3 := @parameter2: java.net.InetSocketAddress;
        $z0 = r2 instanceof sun.nio.ch.DirectBuffer;
        if $z0 == 0 goto label0;

        $i5 = specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: int sendFromNativeBuffer(java.io.FileDescriptor,java.nio.ByteBuffer,java.net.InetSocketAddress)>(r1, r2, r3);
        return $i5;

     label0:
        i0 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();
        i1 = virtualinvoke r2.<java.nio.ByteBuffer: int limit()>();
        $z1 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z1 != 0 goto label1;

        if i0 <= i1 goto label1;

        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label1:
        if i0 > i1 goto label2;

        $i6 = i1 - i0;
        goto label3;

     label2:
        $i6 = 0;

     label3:
        i2 = $i6;
        r4 = staticinvoke <sun.nio.ch.Util: java.nio.ByteBuffer getTemporaryDirectBuffer(int)>(i2);

     label4:
        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r2);
        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i0);
        i3 = specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: int sendFromNativeBuffer(java.io.FileDescriptor,java.nio.ByteBuffer,java.net.InetSocketAddress)>(r1, r4, r3);
        if i3 <= 0 goto label5;

        $i7 = i0 + i3;
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i7);

     label5:
        i4 = i3;

     label6:
        staticinvoke <sun.nio.ch.Util: void releaseTemporaryDirectBuffer(java.nio.ByteBuffer)>(r4);
        return i4;

     label7:
        $r11 := @caughtexception;

     label8:
        r5 = $r11;

     label9:
        staticinvoke <sun.nio.ch.Util: void releaseTemporaryDirectBuffer(java.nio.ByteBuffer)>(r4);
        throw r5;

        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private int sendFromNativeBuffer(java.io.FileDescriptor, java.nio.ByteBuffer, java.net.InetSocketAddress) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.io.FileDescriptor r1;
        java.nio.ByteBuffer r2;
        java.net.InetSocketAddress r3;
        int i0, i1, i2, i3, $i4, $i8, $i9;
        boolean z0, $z1, $z2, $z3;
        java.net.PortUnreachableException r4, $r10;
        java.lang.AssertionError $r5;
        java.net.ProtocolFamily $r6;
        java.net.StandardProtocolFamily $r7;
        sun.nio.ch.DirectBuffer $r8;
        long $l5, $l6, $l7;
        java.net.InetAddress $r9;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        r2 := @parameter1: java.nio.ByteBuffer;
        r3 := @parameter2: java.net.InetSocketAddress;
        i0 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();
        i1 = virtualinvoke r2.<java.nio.ByteBuffer: int limit()>();
        $z1 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z1 != 0 goto label0;

        if i0 <= i1 goto label0;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label0:
        if i0 > i1 goto label1;

        $i4 = i1 - i0;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i2 = $i4;
        $r6 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family>;
        $r7 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET>;
        if $r6 == $r7 goto label3;

        $z2 = 1;
        goto label4;

     label3:
        $z2 = 0;

     label4:
        z0 = $z2;

     label5:
        $r8 = (sun.nio.ch.DirectBuffer) r2;
        $l5 = interfaceinvoke $r8.<sun.nio.ch.DirectBuffer: long address()>();
        $l6 = (long) i0;
        $l7 = $l5 + $l6;
        $r9 = virtualinvoke r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $i8 = virtualinvoke r3.<java.net.InetSocketAddress: int getPort()>();
        i3 = specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: int send0(boolean,java.io.FileDescriptor,long,int,java.net.InetAddress,int)>(z0, r1, $l7, i2, $r9, $i8);

     label6:
        goto label9;

     label7:
        $r10 := @caughtexception;
        r4 = $r10;
        $z3 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isConnected()>();
        if $z3 == 0 goto label8;

        throw r4;

     label8:
        i3 = i2;

     label9:
        if i3 <= 0 goto label10;

        $i9 = i0 + i3;
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i9);

     label10:
        return i3;

        catch java.net.PortUnreachableException from label5 to label6 with label7;
    }

    public int read(java.nio.ByteBuffer) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        java.lang.Object r2, r3, $r9, $r10;
        java.lang.Throwable r4, r6, r7, $r12, $r18, $r21;
        sun.nio.ch.NativeDispatcher $r5;
        java.lang.NullPointerException $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.nio.channels.NotYetConnectedException $r11;
        int i0, i3;
        byte b1;
        java.lang.AssertionError $r14, $r17, $r20;
        long $l2;
        java.io.FileDescriptor $r15;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        if r1 != null goto label0;

        $r8 = new java.lang.NullPointerException;
        specialinvoke $r8.<java.lang.NullPointerException: void <init>()>();
        throw $r8;

     label0:
        $r9 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object readLock>;
        r2 = $r9;
        entermonitor $r9;

     label1:
        $r10 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r3 = $r10;
        entermonitor $r10;

     label2:
        specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: void ensureOpen()>();
        $z0 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isConnected()>();
        if $z0 != 0 goto label3;

        $r11 = new java.nio.channels.NotYetConnectedException;
        specialinvoke $r11.<java.nio.channels.NotYetConnectedException: void <init>()>();
        throw $r11;

     label3:
        exitmonitor r3;

     label4:
        goto label8;

     label5:
        $r12 := @caughtexception;

     label6:
        r4 = $r12;
        exitmonitor r3;

     label7:
        throw r4;

     label8:
        i0 = 0;

     label9:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void begin()>();
        $z1 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label16;

        b1 = 0;

     label10:
        r0.<sun.nio.ch.DatagramChannelImpl: long readerThread> = 0L;
        if i0 > 0 goto label11;

        if i0 != -2 goto label12;

     label11:
        $z2 = 1;
        goto label13;

     label12:
        $z2 = 0;

     label13:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z2);
        $z3 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z3 != 0 goto label14;

        $z4 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z4 != 0 goto label14;

        $r14 = new java.lang.AssertionError;
        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();
        throw $r14;

     label14:
        exitmonitor r2;

     label15:
        return b1;

     label16:
        $l2 = staticinvoke <sun.nio.ch.NativeThread: long current()>();
        r0.<sun.nio.ch.DatagramChannelImpl: long readerThread> = $l2;

     label17:
        $r15 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r5 = <sun.nio.ch.DatagramChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        i0 = staticinvoke <sun.nio.ch.IOUtil: int read(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>($r15, r1, -1L, $r5);
        if i0 != -3 goto label18;

        $z5 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z5 != 0 goto label17;

     label18:
        i3 = staticinvoke <sun.nio.ch.IOStatus: int normalize(int)>(i0);

     label19:
        r0.<sun.nio.ch.DatagramChannelImpl: long readerThread> = 0L;
        if i0 > 0 goto label20;

        if i0 != -2 goto label21;

     label20:
        $z6 = 1;
        goto label22;

     label21:
        $z6 = 0;

     label22:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z6);
        $z7 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z7 != 0 goto label23;

        $z8 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z8 != 0 goto label23;

        $r17 = new java.lang.AssertionError;
        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();
        throw $r17;

     label23:
        exitmonitor r2;

     label24:
        return i3;

     label25:
        $r18 := @caughtexception;

     label26:
        r6 = $r18;

     label27:
        r0.<sun.nio.ch.DatagramChannelImpl: long readerThread> = 0L;
        if i0 > 0 goto label28;

        if i0 != -2 goto label29;

     label28:
        $z9 = 1;
        goto label30;

     label29:
        $z9 = 0;

     label30:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z9);
        $z10 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z10 != 0 goto label31;

        $z11 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z11 != 0 goto label31;

        $r20 = new java.lang.AssertionError;
        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();
        throw $r20;

     label31:
        throw r6;

     label32:
        $r21 := @caughtexception;
        r7 = $r21;
        exitmonitor r2;

     label33:
        throw r7;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label9 to label10 with label25;
        catch java.lang.Throwable from label16 to label19 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
        catch java.lang.Throwable from label1 to label15 with label32;
        catch java.lang.Throwable from label16 to label24 with label32;
        catch java.lang.Throwable from label26 to label33 with label32;
    }

    public long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1, $i3, $i4;
        java.lang.Object r2, r3, $r9, $r10;
        java.lang.Throwable r4, r6, r7, $r12, $r18, $r21;
        long l2, l5, $l8, l10;
        sun.nio.ch.NativeDispatcher $r5;
        java.lang.IndexOutOfBoundsException $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.nio.channels.NotYetConnectedException $r11;
        byte $b6, $b7, $b9, $b11, $b12, $b13, $b14;
        java.lang.AssertionError $r14, $r17, $r20;
        java.io.FileDescriptor $r15;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i0 < 0 goto label0;

        if i1 < 0 goto label0;

        $i3 = lengthof r1;
        $i4 = $i3 - i1;
        if i0 <= $i4 goto label1;

     label0:
        $r8 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r8;

     label1:
        $r9 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object readLock>;
        r2 = $r9;
        entermonitor $r9;

     label2:
        $r10 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r3 = $r10;
        entermonitor $r10;

     label3:
        specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: void ensureOpen()>();
        $z0 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isConnected()>();
        if $z0 != 0 goto label4;

        $r11 = new java.nio.channels.NotYetConnectedException;
        specialinvoke $r11.<java.nio.channels.NotYetConnectedException: void <init>()>();
        throw $r11;

     label4:
        exitmonitor r3;

     label5:
        goto label9;

     label6:
        $r12 := @caughtexception;

     label7:
        r4 = $r12;
        exitmonitor r3;

     label8:
        throw r4;

     label9:
        l5 = 0L;

     label10:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void begin()>();
        $z1 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label17;

        l2 = 0L;

     label11:
        r0.<sun.nio.ch.DatagramChannelImpl: long readerThread> = 0L;
        $b6 = l5 cmp 0L;
        if $b6 > 0 goto label12;

        $b7 = l5 cmp -2L;
        if $b7 != 0 goto label13;

     label12:
        $z2 = 1;
        goto label14;

     label13:
        $z2 = 0;

     label14:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z2);
        $z3 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z3 != 0 goto label15;

        $z4 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l5);
        if $z4 != 0 goto label15;

        $r14 = new java.lang.AssertionError;
        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();
        throw $r14;

     label15:
        exitmonitor r2;

     label16:
        return l2;

     label17:
        $l8 = staticinvoke <sun.nio.ch.NativeThread: long current()>();
        r0.<sun.nio.ch.DatagramChannelImpl: long readerThread> = $l8;

     label18:
        $r15 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r5 = <sun.nio.ch.DatagramChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        l5 = staticinvoke <sun.nio.ch.IOUtil: long read(java.io.FileDescriptor,java.nio.ByteBuffer[],int,int,sun.nio.ch.NativeDispatcher)>($r15, r1, i0, i1, $r5);
        $b9 = l5 cmp -3L;
        if $b9 != 0 goto label19;

        $z5 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z5 != 0 goto label18;

     label19:
        l10 = staticinvoke <sun.nio.ch.IOStatus: long normalize(long)>(l5);

     label20:
        r0.<sun.nio.ch.DatagramChannelImpl: long readerThread> = 0L;
        $b11 = l5 cmp 0L;
        if $b11 > 0 goto label21;

        $b12 = l5 cmp -2L;
        if $b12 != 0 goto label22;

     label21:
        $z6 = 1;
        goto label23;

     label22:
        $z6 = 0;

     label23:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z6);
        $z7 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z7 != 0 goto label24;

        $z8 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l5);
        if $z8 != 0 goto label24;

        $r17 = new java.lang.AssertionError;
        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();
        throw $r17;

     label24:
        exitmonitor r2;

     label25:
        return l10;

     label26:
        $r18 := @caughtexception;

     label27:
        r6 = $r18;

     label28:
        r0.<sun.nio.ch.DatagramChannelImpl: long readerThread> = 0L;
        $b13 = l5 cmp 0L;
        if $b13 > 0 goto label29;

        $b14 = l5 cmp -2L;
        if $b14 != 0 goto label30;

     label29:
        $z9 = 1;
        goto label31;

     label30:
        $z9 = 0;

     label31:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z9);
        $z10 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z10 != 0 goto label32;

        $z11 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l5);
        if $z11 != 0 goto label32;

        $r20 = new java.lang.AssertionError;
        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();
        throw $r20;

     label32:
        throw r6;

     label33:
        $r21 := @caughtexception;
        r7 = $r21;
        exitmonitor r2;

     label34:
        throw r7;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label10 to label11 with label26;
        catch java.lang.Throwable from label17 to label20 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
        catch java.lang.Throwable from label2 to label16 with label33;
        catch java.lang.Throwable from label17 to label25 with label33;
        catch java.lang.Throwable from label27 to label34 with label33;
    }

    public int write(java.nio.ByteBuffer) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        java.lang.Object r2, r3, $r9, $r10;
        java.lang.Throwable r4, r6, r7, $r12, $r18, $r21;
        sun.nio.ch.NativeDispatcher $r5;
        java.lang.NullPointerException $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.nio.channels.NotYetConnectedException $r11;
        int i0, i3;
        byte b1;
        java.lang.AssertionError $r14, $r17, $r20;
        long $l2;
        java.io.FileDescriptor $r15;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        if r1 != null goto label0;

        $r8 = new java.lang.NullPointerException;
        specialinvoke $r8.<java.lang.NullPointerException: void <init>()>();
        throw $r8;

     label0:
        $r9 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object writeLock>;
        r2 = $r9;
        entermonitor $r9;

     label1:
        $r10 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r3 = $r10;
        entermonitor $r10;

     label2:
        specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: void ensureOpen()>();
        $z0 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isConnected()>();
        if $z0 != 0 goto label3;

        $r11 = new java.nio.channels.NotYetConnectedException;
        specialinvoke $r11.<java.nio.channels.NotYetConnectedException: void <init>()>();
        throw $r11;

     label3:
        exitmonitor r3;

     label4:
        goto label8;

     label5:
        $r12 := @caughtexception;

     label6:
        r4 = $r12;
        exitmonitor r3;

     label7:
        throw r4;

     label8:
        i0 = 0;

     label9:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void begin()>();
        $z1 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label16;

        b1 = 0;

     label10:
        r0.<sun.nio.ch.DatagramChannelImpl: long writerThread> = 0L;
        if i0 > 0 goto label11;

        if i0 != -2 goto label12;

     label11:
        $z2 = 1;
        goto label13;

     label12:
        $z2 = 0;

     label13:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z2);
        $z3 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z3 != 0 goto label14;

        $z4 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z4 != 0 goto label14;

        $r14 = new java.lang.AssertionError;
        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();
        throw $r14;

     label14:
        exitmonitor r2;

     label15:
        return b1;

     label16:
        $l2 = staticinvoke <sun.nio.ch.NativeThread: long current()>();
        r0.<sun.nio.ch.DatagramChannelImpl: long writerThread> = $l2;

     label17:
        $r15 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r5 = <sun.nio.ch.DatagramChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        i0 = staticinvoke <sun.nio.ch.IOUtil: int write(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>($r15, r1, -1L, $r5);
        if i0 != -3 goto label18;

        $z5 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z5 != 0 goto label17;

     label18:
        i3 = staticinvoke <sun.nio.ch.IOStatus: int normalize(int)>(i0);

     label19:
        r0.<sun.nio.ch.DatagramChannelImpl: long writerThread> = 0L;
        if i0 > 0 goto label20;

        if i0 != -2 goto label21;

     label20:
        $z6 = 1;
        goto label22;

     label21:
        $z6 = 0;

     label22:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z6);
        $z7 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z7 != 0 goto label23;

        $z8 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z8 != 0 goto label23;

        $r17 = new java.lang.AssertionError;
        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();
        throw $r17;

     label23:
        exitmonitor r2;

     label24:
        return i3;

     label25:
        $r18 := @caughtexception;

     label26:
        r6 = $r18;

     label27:
        r0.<sun.nio.ch.DatagramChannelImpl: long writerThread> = 0L;
        if i0 > 0 goto label28;

        if i0 != -2 goto label29;

     label28:
        $z9 = 1;
        goto label30;

     label29:
        $z9 = 0;

     label30:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z9);
        $z10 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z10 != 0 goto label31;

        $z11 = staticinvoke <sun.nio.ch.IOStatus: boolean check(int)>(i0);
        if $z11 != 0 goto label31;

        $r20 = new java.lang.AssertionError;
        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();
        throw $r20;

     label31:
        throw r6;

     label32:
        $r21 := @caughtexception;
        r7 = $r21;
        exitmonitor r2;

     label33:
        throw r7;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label9 to label10 with label25;
        catch java.lang.Throwable from label16 to label19 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
        catch java.lang.Throwable from label1 to label15 with label32;
        catch java.lang.Throwable from label16 to label24 with label32;
        catch java.lang.Throwable from label26 to label33 with label32;
    }

    public long write(java.nio.ByteBuffer[], int, int) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1, $i3, $i4;
        java.lang.Object r2, r3, $r9, $r10;
        java.lang.Throwable r4, r6, r7, $r12, $r18, $r21;
        long l2, l5, $l8, l10;
        sun.nio.ch.NativeDispatcher $r5;
        java.lang.IndexOutOfBoundsException $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.nio.channels.NotYetConnectedException $r11;
        byte $b6, $b7, $b9, $b11, $b12, $b13, $b14;
        java.lang.AssertionError $r14, $r17, $r20;
        java.io.FileDescriptor $r15;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i0 < 0 goto label0;

        if i1 < 0 goto label0;

        $i3 = lengthof r1;
        $i4 = $i3 - i1;
        if i0 <= $i4 goto label1;

     label0:
        $r8 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r8;

     label1:
        $r9 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object writeLock>;
        r2 = $r9;
        entermonitor $r9;

     label2:
        $r10 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r3 = $r10;
        entermonitor $r10;

     label3:
        specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: void ensureOpen()>();
        $z0 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isConnected()>();
        if $z0 != 0 goto label4;

        $r11 = new java.nio.channels.NotYetConnectedException;
        specialinvoke $r11.<java.nio.channels.NotYetConnectedException: void <init>()>();
        throw $r11;

     label4:
        exitmonitor r3;

     label5:
        goto label9;

     label6:
        $r12 := @caughtexception;

     label7:
        r4 = $r12;
        exitmonitor r3;

     label8:
        throw r4;

     label9:
        l5 = 0L;

     label10:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void begin()>();
        $z1 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label17;

        l2 = 0L;

     label11:
        r0.<sun.nio.ch.DatagramChannelImpl: long writerThread> = 0L;
        $b6 = l5 cmp 0L;
        if $b6 > 0 goto label12;

        $b7 = l5 cmp -2L;
        if $b7 != 0 goto label13;

     label12:
        $z2 = 1;
        goto label14;

     label13:
        $z2 = 0;

     label14:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z2);
        $z3 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z3 != 0 goto label15;

        $z4 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l5);
        if $z4 != 0 goto label15;

        $r14 = new java.lang.AssertionError;
        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();
        throw $r14;

     label15:
        exitmonitor r2;

     label16:
        return l2;

     label17:
        $l8 = staticinvoke <sun.nio.ch.NativeThread: long current()>();
        r0.<sun.nio.ch.DatagramChannelImpl: long writerThread> = $l8;

     label18:
        $r15 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r5 = <sun.nio.ch.DatagramChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        l5 = staticinvoke <sun.nio.ch.IOUtil: long write(java.io.FileDescriptor,java.nio.ByteBuffer[],int,int,sun.nio.ch.NativeDispatcher)>($r15, r1, i0, i1, $r5);
        $b9 = l5 cmp -3L;
        if $b9 != 0 goto label19;

        $z5 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z5 != 0 goto label18;

     label19:
        l10 = staticinvoke <sun.nio.ch.IOStatus: long normalize(long)>(l5);

     label20:
        r0.<sun.nio.ch.DatagramChannelImpl: long writerThread> = 0L;
        $b11 = l5 cmp 0L;
        if $b11 > 0 goto label21;

        $b12 = l5 cmp -2L;
        if $b12 != 0 goto label22;

     label21:
        $z6 = 1;
        goto label23;

     label22:
        $z6 = 0;

     label23:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z6);
        $z7 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z7 != 0 goto label24;

        $z8 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l5);
        if $z8 != 0 goto label24;

        $r17 = new java.lang.AssertionError;
        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();
        throw $r17;

     label24:
        exitmonitor r2;

     label25:
        return l10;

     label26:
        $r18 := @caughtexception;

     label27:
        r6 = $r18;

     label28:
        r0.<sun.nio.ch.DatagramChannelImpl: long writerThread> = 0L;
        $b13 = l5 cmp 0L;
        if $b13 > 0 goto label29;

        $b14 = l5 cmp -2L;
        if $b14 != 0 goto label30;

     label29:
        $z9 = 1;
        goto label31;

     label30:
        $z9 = 0;

     label31:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void end(boolean)>($z9);
        $z10 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z10 != 0 goto label32;

        $z11 = staticinvoke <sun.nio.ch.IOStatus: boolean check(long)>(l5);
        if $z11 != 0 goto label32;

        $r20 = new java.lang.AssertionError;
        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();
        throw $r20;

     label32:
        throw r6;

     label33:
        $r21 := @caughtexception;
        r7 = $r21;
        exitmonitor r2;

     label34:
        throw r7;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label10 to label11 with label26;
        catch java.lang.Throwable from label17 to label20 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
        catch java.lang.Throwable from label2 to label16 with label33;
        catch java.lang.Throwable from label17 to label25 with label33;
        catch java.lang.Throwable from label27 to label34 with label33;
    }

    protected void implConfigureBlocking(boolean) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        boolean z0;
        java.io.FileDescriptor $r1;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        z0 := @parameter0: boolean;
        $r1 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        staticinvoke <sun.nio.ch.IOUtil: void configureBlocking(java.io.FileDescriptor,boolean)>($r1, z0);
        return;
    }

    public java.net.SocketAddress localAddress()
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.net.InetSocketAddress $r4;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        $r3 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.InetSocketAddress localAddress>;
        exitmonitor r1;

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;

     label3:
        r2 = $r5;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.net.SocketAddress remoteAddress()
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.net.InetSocketAddress $r4;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        $r3 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.InetSocketAddress remoteAddress>;
        exitmonitor r1;

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;

     label3:
        r2 = $r5;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.nio.channels.DatagramChannel bind(java.net.SocketAddress) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.net.SocketAddress r1;
        java.lang.Object r2, r3, r4, $r10, $r11, $r12;
        java.net.InetSocketAddress r5, $r13, $r17, $r19, $r28;
        java.net.InetAddress r6, $r18, $r26;
        java.lang.Throwable r7, r8, r9, $r29, $r30, $r31;
        java.nio.channels.AlreadyBoundException $r14;
        java.net.ProtocolFamily $r15, $r20, $r24;
        java.net.StandardProtocolFamily $r16, $r21;
        boolean $z0;
        java.nio.channels.UnsupportedAddressTypeException $r22;
        java.lang.SecurityManager r23;
        int $i0, $i1;
        java.io.FileDescriptor $r25, $r27;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.net.SocketAddress;
        $r10 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object readLock>;
        r2 = $r10;
        entermonitor $r10;

     label0:
        $r11 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object writeLock>;
        r3 = $r11;
        entermonitor $r11;

     label1:
        $r12 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r4 = $r12;
        entermonitor $r12;

     label2:
        specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: void ensureOpen()>();
        $r13 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.InetSocketAddress localAddress>;
        if $r13 == null goto label3;

        $r14 = new java.nio.channels.AlreadyBoundException;
        specialinvoke $r14.<java.nio.channels.AlreadyBoundException: void <init>()>();
        throw $r14;

     label3:
        if r1 != null goto label5;

        $r15 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family>;
        $r16 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET>;
        if $r15 != $r16 goto label4;

        $r17 = new java.net.InetSocketAddress;
        $r18 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>("0.0.0.0");
        specialinvoke $r17.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r18, 0);
        r5 = $r17;
        goto label6;

     label4:
        $r19 = new java.net.InetSocketAddress;
        specialinvoke $r19.<java.net.InetSocketAddress: void <init>(int)>(0);
        r5 = $r19;
        goto label6;

     label5:
        r5 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress checkAddress(java.net.SocketAddress)>(r1);
        $r20 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family>;
        $r21 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET>;
        if $r20 != $r21 goto label6;

        r6 = virtualinvoke r5.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $z0 = r6 instanceof java.net.Inet4Address;
        if $z0 != 0 goto label6;

        $r22 = new java.nio.channels.UnsupportedAddressTypeException;
        specialinvoke $r22.<java.nio.channels.UnsupportedAddressTypeException: void <init>()>();
        throw $r22;

     label6:
        r23 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r23 == null goto label7;

        $i0 = virtualinvoke r5.<java.net.InetSocketAddress: int getPort()>();
        virtualinvoke r23.<java.lang.SecurityManager: void checkListen(int)>($i0);

     label7:
        $r24 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family>;
        $r25 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r26 = virtualinvoke r5.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $i1 = virtualinvoke r5.<java.net.InetSocketAddress: int getPort()>();
        staticinvoke <sun.nio.ch.Net: void bind(java.net.ProtocolFamily,java.io.FileDescriptor,java.net.InetAddress,int)>($r24, $r25, $r26, $i1);
        $r27 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r28 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress localAddress(java.io.FileDescriptor)>($r27);
        r0.<sun.nio.ch.DatagramChannelImpl: java.net.InetSocketAddress localAddress> = $r28;
        exitmonitor r4;

     label8:
        goto label12;

     label9:
        $r29 := @caughtexception;

     label10:
        r7 = $r29;
        exitmonitor r4;

     label11:
        throw r7;

     label12:
        exitmonitor r3;

     label13:
        goto label17;

     label14:
        $r30 := @caughtexception;

     label15:
        r8 = $r30;
        exitmonitor r3;

     label16:
        throw r8;

     label17:
        exitmonitor r2;

     label18:
        goto label22;

     label19:
        $r31 := @caughtexception;

     label20:
        r9 = $r31;
        exitmonitor r2;

     label21:
        throw r9;

     label22:
        return r0;

        catch java.lang.Throwable from label2 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
        catch java.lang.Throwable from label1 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label0 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public boolean isConnected()
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;
        boolean $z0;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        $r3 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $i0 = r0.<sun.nio.ch.DatagramChannelImpl: int state>;
        if $i0 != 1 goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        exitmonitor r1;

     label3:
        return $z0;

     label4:
        $r4 := @caughtexception;

     label5:
        r2 = $r4;
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void ensureOpenAndUnconnected() throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        boolean $z0;
        java.nio.channels.ClosedChannelException $r4;
        int $i0;
        java.lang.IllegalStateException $r5;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        $r3 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z0 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label1;

        $r4 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r4.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r4;

     label1:
        $i0 = r0.<sun.nio.ch.DatagramChannelImpl: int state>;
        if $i0 == 0 goto label2;

        $r5 = new java.lang.IllegalStateException;
        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connect already invoked");
        throw $r5;

     label2:
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r6 := @caughtexception;

     label5:
        r2 = $r6;
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.nio.channels.DatagramChannel connect(java.net.SocketAddress) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.net.SocketAddress r1, $r29;
        boolean z0, z1;
        java.lang.Object r2, r3, r4, r7, $r14, $r15, $r16, $r26;
        java.net.InetSocketAddress r5, $r25;
        java.lang.SecurityManager r6;
        int i0, $i1, $i2, $i3;
        java.nio.ByteBuffer r8;
        java.lang.Throwable r9, r10, r11, r12, r13, $r31, $r33, $r34, $r35, $r36;
        java.net.InetAddress $r17, $r21, $r23;
        java.lang.String $r18;
        java.net.ProtocolFamily $r19;
        java.io.FileDescriptor $r20, $r24;
        java.lang.Error $r22;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.net.SocketAddress;
        z0 = 0;
        $r14 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object readLock>;
        r2 = $r14;
        entermonitor $r14;

     label0:
        $r15 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object writeLock>;
        r3 = $r15;
        entermonitor $r15;

     label1:
        $r16 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r4 = $r16;
        entermonitor $r16;

     label2:
        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void ensureOpenAndUnconnected()>();
        r5 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress checkAddress(java.net.SocketAddress)>(r1);
        r6 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r6 == null goto label3;

        $r17 = virtualinvoke r5.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $r18 = virtualinvoke $r17.<java.net.InetAddress: java.lang.String getHostAddress()>();
        $i1 = virtualinvoke r5.<java.net.InetSocketAddress: int getPort()>();
        virtualinvoke r6.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>($r18, $i1);

     label3:
        $r19 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family>;
        $r20 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r21 = virtualinvoke r5.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $i2 = virtualinvoke r5.<java.net.InetSocketAddress: int getPort()>();
        i0 = staticinvoke <sun.nio.ch.Net: int connect(java.net.ProtocolFamily,java.io.FileDescriptor,java.net.InetAddress,int)>($r19, $r20, $r21, $i2);
        if i0 > 0 goto label4;

        $r22 = new java.lang.Error;
        specialinvoke $r22.<java.lang.Error: void <init>()>();
        throw $r22;

     label4:
        r0.<sun.nio.ch.DatagramChannelImpl: int state> = 1;
        r0.<sun.nio.ch.DatagramChannelImpl: java.net.InetSocketAddress remoteAddress> = r5;
        r0.<sun.nio.ch.DatagramChannelImpl: java.net.SocketAddress sender> = r5;
        $r23 = virtualinvoke r5.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        r0.<sun.nio.ch.DatagramChannelImpl: java.net.InetAddress cachedSenderInetAddress> = $r23;
        $i3 = virtualinvoke r5.<java.net.InetSocketAddress: int getPort()>();
        r0.<sun.nio.ch.DatagramChannelImpl: int cachedSenderPort> = $i3;
        $r24 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r25 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress localAddress(java.io.FileDescriptor)>($r24);
        r0.<sun.nio.ch.DatagramChannelImpl: java.net.InetSocketAddress localAddress> = $r25;
        z1 = 0;
        $r26 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object blockingLock()>();
        r7 = $r26;
        entermonitor $r26;

     label5:
        z1 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isBlocking()>();
        r8 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(1);
        if z1 == 0 goto label6;

        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: java.nio.channels.SelectableChannel configureBlocking(boolean)>(0);

     label6:
        virtualinvoke r8.<java.nio.ByteBuffer: java.nio.Buffer clear()>();
        $r29 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: java.net.SocketAddress receive(java.nio.ByteBuffer)>(r8);
        if $r29 != null goto label6;

     label7:
        if z1 == 0 goto label12;

        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);
        goto label12;

     label8:
        $r31 := @caughtexception;

     label9:
        r9 = $r31;

     label10:
        if z1 == 0 goto label11;

        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);

     label11:
        throw r9;

     label12:
        exitmonitor r7;

     label13:
        goto label17;

     label14:
        $r33 := @caughtexception;

     label15:
        r10 = $r33;
        exitmonitor r7;

     label16:
        throw r10;

     label17:
        exitmonitor r4;

     label18:
        goto label22;

     label19:
        $r34 := @caughtexception;

     label20:
        r11 = $r34;
        exitmonitor r4;

     label21:
        throw r11;

     label22:
        exitmonitor r3;

     label23:
        goto label27;

     label24:
        $r35 := @caughtexception;

     label25:
        r12 = $r35;
        exitmonitor r3;

     label26:
        throw r12;

     label27:
        exitmonitor r2;

     label28:
        goto label32;

     label29:
        $r36 := @caughtexception;

     label30:
        r13 = $r36;
        exitmonitor r2;

     label31:
        throw r13;

     label32:
        return r0;

        catch java.lang.Throwable from label5 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
        catch java.lang.Throwable from label5 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label2 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label1 to label23 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
        catch java.lang.Throwable from label0 to label28 with label29;
        catch java.lang.Throwable from label30 to label31 with label29;
    }

    public java.nio.channels.DatagramChannel disconnect() throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.lang.Object r1, r2, r3, $r9, $r10, $r11;
        java.net.InetSocketAddress r4, $r19;
        java.lang.SecurityManager r5;
        boolean z0, $z1, $z2, $z3;
        java.lang.Throwable r6, r7, r8, $r20, $r21, $r22;
        java.net.InetAddress $r13;
        java.lang.String $r14;
        int $i0;
        java.net.ProtocolFamily $r15;
        java.net.StandardProtocolFamily $r16;
        java.io.FileDescriptor $r17, $r18;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        $r9 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object readLock>;
        r1 = $r9;
        entermonitor $r9;

     label0:
        $r10 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object writeLock>;
        r2 = $r10;
        entermonitor $r10;

     label1:
        $r11 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r3 = $r11;
        entermonitor $r11;

     label2:
        $z1 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isConnected()>();
        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z2 != 0 goto label7;

     label3:
        exitmonitor r3;

     label4:
        exitmonitor r2;

     label5:
        exitmonitor r1;

     label6:
        return r0;

     label7:
        r4 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.InetSocketAddress remoteAddress>;
        r5 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r5 == null goto label8;

        $r13 = virtualinvoke r4.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $r14 = virtualinvoke $r13.<java.net.InetAddress: java.lang.String getHostAddress()>();
        $i0 = virtualinvoke r4.<java.net.InetSocketAddress: int getPort()>();
        virtualinvoke r5.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>($r14, $i0);

     label8:
        $r15 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family>;
        $r16 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET6>;
        if $r15 != $r16 goto label9;

        $z3 = 1;
        goto label10;

     label9:
        $z3 = 0;

     label10:
        z0 = $z3;
        $r17 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        staticinvoke <sun.nio.ch.DatagramChannelImpl: void disconnect0(java.io.FileDescriptor,boolean)>($r17, z0);
        r0.<sun.nio.ch.DatagramChannelImpl: java.net.InetSocketAddress remoteAddress> = null;
        r0.<sun.nio.ch.DatagramChannelImpl: int state> = 0;
        $r18 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r19 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress localAddress(java.io.FileDescriptor)>($r18);
        r0.<sun.nio.ch.DatagramChannelImpl: java.net.InetSocketAddress localAddress> = $r19;
        exitmonitor r3;

     label11:
        goto label15;

     label12:
        $r20 := @caughtexception;

     label13:
        r6 = $r20;
        exitmonitor r3;

     label14:
        throw r6;

     label15:
        exitmonitor r2;

     label16:
        goto label20;

     label17:
        $r21 := @caughtexception;

     label18:
        r7 = $r21;
        exitmonitor r2;

     label19:
        throw r7;

     label20:
        exitmonitor r1;

     label21:
        goto label25;

     label22:
        $r22 := @caughtexception;

     label23:
        r8 = $r22;
        exitmonitor r1;

     label24:
        throw r8;

     label25:
        return r0;

        catch java.lang.Throwable from label2 to label4 with label12;
        catch java.lang.Throwable from label7 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label1 to label5 with label17;
        catch java.lang.Throwable from label7 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.Throwable from label0 to label6 with label22;
        catch java.lang.Throwable from label7 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    private java.nio.channels.MembershipKey innerJoin(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.net.InetAddress r1, r3;
        java.net.NetworkInterface r2;
        java.lang.SecurityManager r4;
        java.lang.Object r5, $r23;
        java.nio.channels.MembershipKey r6;
        int i0, i1, i2, i3, i4, $i5, i6;
        byte[] r7, r8, $r32;
        java.lang.Throwable r9, $r44;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.IllegalArgumentException $r10, $r13, $r16, $r17, $r18, $r19, $r22;
        java.net.ProtocolFamily $r11, $r14, $r29;
        java.net.StandardProtocolFamily $r12, $r15, $r30;
        java.lang.Class $r20, $r21;
        java.nio.channels.ClosedChannelException $r24;
        sun.nio.ch.MembershipRegistry $r25, $r26, $r27, $r42;
        java.io.IOException $r31, $r38;
        java.io.FileDescriptor $r33, $r39;
        java.lang.UnsupportedOperationException $r34, $r40;
        sun.nio.ch.MembershipKeyImpl$Type6 $r35;
        sun.nio.ch.MembershipKeyImpl r36;
        java.net.Inet4Address r37;
        sun.nio.ch.MembershipKeyImpl$Type4 $r41;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.net.InetAddress;
        r2 := @parameter1: java.net.NetworkInterface;
        r3 := @parameter2: java.net.InetAddress;
        $z0 = virtualinvoke r1.<java.net.InetAddress: boolean isMulticastAddress()>();
        if $z0 != 0 goto label0;

        $r10 = new java.lang.IllegalArgumentException;
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Group not a multicast address");
        throw $r10;

     label0:
        $z1 = r1 instanceof java.net.Inet4Address;
        if $z1 == 0 goto label1;

        $r11 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family>;
        $r12 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET6>;
        if $r11 != $r12 goto label3;

        $z2 = staticinvoke <sun.nio.ch.Net: boolean canIPv6SocketJoinIPv4Group()>();
        if $z2 != 0 goto label3;

        $r13 = new java.lang.IllegalArgumentException;
        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("IPv6 socket cannot join IPv4 multicast group");
        throw $r13;

     label1:
        $z3 = r1 instanceof java.net.Inet6Address;
        if $z3 == 0 goto label2;

        $r14 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family>;
        $r15 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET6>;
        if $r14 == $r15 goto label3;

        $r16 = new java.lang.IllegalArgumentException;
        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only IPv6 sockets can join IPv6 multicast group");
        throw $r16;

     label2:
        $r17 = new java.lang.IllegalArgumentException;
        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Address type not supported");
        throw $r17;

     label3:
        if r3 == null goto label6;

        $z4 = virtualinvoke r3.<java.net.InetAddress: boolean isAnyLocalAddress()>();
        if $z4 == 0 goto label4;

        $r18 = new java.lang.IllegalArgumentException;
        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Source address is a wildcard address");
        throw $r18;

     label4:
        $z5 = virtualinvoke r3.<java.net.InetAddress: boolean isMulticastAddress()>();
        if $z5 == 0 goto label5;

        $r19 = new java.lang.IllegalArgumentException;
        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Source address is multicast address");
        throw $r19;

     label5:
        $r20 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();
        $r21 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        if $r20 == $r21 goto label6;

        $r22 = new java.lang.IllegalArgumentException;
        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Source address is different type to group");
        throw $r22;

     label6:
        r4 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r4 == null goto label7;

        virtualinvoke r4.<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress)>(r1);

     label7:
        $r23 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r5 = $r23;
        entermonitor $r23;

     label8:
        $z6 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z6 != 0 goto label9;

        $r24 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r24.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r24;

     label9:
        $r25 = r0.<sun.nio.ch.DatagramChannelImpl: sun.nio.ch.MembershipRegistry registry>;
        if $r25 != null goto label10;

        $r26 = new sun.nio.ch.MembershipRegistry;
        specialinvoke $r26.<sun.nio.ch.MembershipRegistry: void <init>()>();
        r0.<sun.nio.ch.DatagramChannelImpl: sun.nio.ch.MembershipRegistry registry> = $r26;
        goto label12;

     label10:
        $r27 = r0.<sun.nio.ch.DatagramChannelImpl: sun.nio.ch.MembershipRegistry registry>;
        r6 = virtualinvoke $r27.<sun.nio.ch.MembershipRegistry: java.nio.channels.MembershipKey checkMembership(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)>(r1, r2, r3);
        if r6 == null goto label12;

        exitmonitor r5;

     label11:
        return r6;

     label12:
        $r29 = r0.<sun.nio.ch.DatagramChannelImpl: java.net.ProtocolFamily family>;
        $r30 = <java.net.StandardProtocolFamily: java.net.StandardProtocolFamily INET6>;
        if $r29 != $r30 goto label18;

        $z7 = r1 instanceof java.net.Inet6Address;
        if $z7 != 0 goto label13;

        $z8 = staticinvoke <sun.nio.ch.Net: boolean canJoin6WithIPv4Group()>();
        if $z8 == 0 goto label18;

     label13:
        i0 = virtualinvoke r2.<java.net.NetworkInterface: int getIndex()>();
        if i0 != -1 goto label14;

        $r31 = new java.io.IOException;
        specialinvoke $r31.<java.io.IOException: void <init>(java.lang.String)>("Network interface cannot be identified");
        throw $r31;

     label14:
        r7 = staticinvoke <sun.nio.ch.Net: byte[] inet6AsByteArray(java.net.InetAddress)>(r1);
        if r3 != null goto label15;

        $r32 = null;
        goto label16;

     label15:
        $r32 = staticinvoke <sun.nio.ch.Net: byte[] inet6AsByteArray(java.net.InetAddress)>(r3);

     label16:
        r8 = $r32;
        $r33 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        i1 = staticinvoke <sun.nio.ch.Net: int join6(java.io.FileDescriptor,byte[],int,byte[])>($r33, r7, i0, r8);
        if i1 != -2 goto label17;

        $r34 = new java.lang.UnsupportedOperationException;
        specialinvoke $r34.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r34;

     label17:
        $r35 = new sun.nio.ch.MembershipKeyImpl$Type6;
        specialinvoke $r35.<sun.nio.ch.MembershipKeyImpl$Type6: void <init>(java.nio.channels.MulticastChannel,java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,byte[],int,byte[])>(r0, r1, r2, r3, r7, i0, r8);
        r36 = $r35;
        goto label23;

     label18:
        r37 = staticinvoke <sun.nio.ch.Net: java.net.Inet4Address anyInet4Address(java.net.NetworkInterface)>(r2);
        if r37 != null goto label19;

        $r38 = new java.io.IOException;
        specialinvoke $r38.<java.io.IOException: void <init>(java.lang.String)>("Network interface not configured for IPv4");
        throw $r38;

     label19:
        i3 = staticinvoke <sun.nio.ch.Net: int inet4AsInt(java.net.InetAddress)>(r1);
        i4 = staticinvoke <sun.nio.ch.Net: int inet4AsInt(java.net.InetAddress)>(r37);
        if r3 != null goto label20;

        $i5 = 0;
        goto label21;

     label20:
        $i5 = staticinvoke <sun.nio.ch.Net: int inet4AsInt(java.net.InetAddress)>(r3);

     label21:
        i6 = $i5;
        $r39 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        i2 = staticinvoke <sun.nio.ch.Net: int join4(java.io.FileDescriptor,int,int,int)>($r39, i3, i4, i6);
        if i2 != -2 goto label22;

        $r40 = new java.lang.UnsupportedOperationException;
        specialinvoke $r40.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r40;

     label22:
        $r41 = new sun.nio.ch.MembershipKeyImpl$Type4;
        specialinvoke $r41.<sun.nio.ch.MembershipKeyImpl$Type4: void <init>(java.nio.channels.MulticastChannel,java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,int,int,int)>(r0, r1, r2, r3, i3, i4, i6);
        r36 = $r41;

     label23:
        $r42 = r0.<sun.nio.ch.DatagramChannelImpl: sun.nio.ch.MembershipRegistry registry>;
        virtualinvoke $r42.<sun.nio.ch.MembershipRegistry: void add(sun.nio.ch.MembershipKeyImpl)>(r36);
        exitmonitor r5;

     label24:
        return r36;

     label25:
        $r44 := @caughtexception;

     label26:
        r9 = $r44;
        exitmonitor r5;

     label27:
        throw r9;

        catch java.lang.Throwable from label8 to label11 with label25;
        catch java.lang.Throwable from label12 to label24 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
    }

    public java.nio.channels.MembershipKey join(java.net.InetAddress, java.net.NetworkInterface) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.net.InetAddress r1;
        java.net.NetworkInterface r2;
        java.nio.channels.MembershipKey $r3;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.net.InetAddress;
        r2 := @parameter1: java.net.NetworkInterface;
        $r3 = specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: java.nio.channels.MembershipKey innerJoin(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)>(r1, r2, null);
        return $r3;
    }

    public java.nio.channels.MembershipKey join(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.net.InetAddress r1, r3;
        java.net.NetworkInterface r2;
        java.lang.NullPointerException $r4;
        java.nio.channels.MembershipKey $r5;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.net.InetAddress;
        r2 := @parameter1: java.net.NetworkInterface;
        r3 := @parameter2: java.net.InetAddress;
        if r3 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("source address is null");
        throw $r4;

     label0:
        $r5 = specialinvoke r0.<sun.nio.ch.DatagramChannelImpl: java.nio.channels.MembershipKey innerJoin(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)>(r1, r2, r3);
        return $r5;
    }

    void drop(sun.nio.ch.MembershipKeyImpl)
    {
        sun.nio.ch.DatagramChannelImpl r0;
        sun.nio.ch.MembershipKeyImpl r1;
        boolean $z0, $z1, $z2;
        java.lang.Object r2, $r7;
        sun.nio.ch.MembershipKeyImpl$Type6 r3;
        java.lang.Throwable r4, $r17;
        java.nio.channels.MulticastChannel $r5;
        java.lang.AssertionError $r6, $r15;
        java.io.FileDescriptor $r8, $r12;
        byte[] $r9, $r10;
        int $i0, $i1, $i2, $i3;
        sun.nio.ch.MembershipKeyImpl$Type4 r11;
        java.io.IOException $r13, r14;
        sun.nio.ch.MembershipRegistry $r16;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: sun.nio.ch.MembershipKeyImpl;
        $z0 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r5 = virtualinvoke r1.<sun.nio.ch.MembershipKeyImpl: java.nio.channels.MulticastChannel channel()>();
        if $r5 == r0 goto label0;

        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label0:
        $r7 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r2 = $r7;
        entermonitor $r7;

     label1:
        $z1 = virtualinvoke r1.<sun.nio.ch.MembershipKeyImpl: boolean isValid()>();
        if $z1 != 0 goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        $z2 = r1 instanceof sun.nio.ch.MembershipKeyImpl$Type6;
        if $z2 == 0 goto label4;

        r3 = (sun.nio.ch.MembershipKeyImpl$Type6) r1;
        $r8 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r9 = virtualinvoke r3.<sun.nio.ch.MembershipKeyImpl$Type6: byte[] groupAddress()>();
        $i0 = virtualinvoke r3.<sun.nio.ch.MembershipKeyImpl$Type6: int index()>();
        $r10 = virtualinvoke r3.<sun.nio.ch.MembershipKeyImpl$Type6: byte[] source()>();
        staticinvoke <sun.nio.ch.Net: void drop6(java.io.FileDescriptor,byte[],int,byte[])>($r8, $r9, $i0, $r10);
        goto label5;

     label4:
        r11 = (sun.nio.ch.MembershipKeyImpl$Type4) r1;
        $r12 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $i1 = virtualinvoke r11.<sun.nio.ch.MembershipKeyImpl$Type4: int groupAddress()>();
        $i2 = virtualinvoke r11.<sun.nio.ch.MembershipKeyImpl$Type4: int interfaceAddress()>();
        $i3 = virtualinvoke r11.<sun.nio.ch.MembershipKeyImpl$Type4: int source()>();
        staticinvoke <sun.nio.ch.Net: void drop4(java.io.FileDescriptor,int,int,int)>($r12, $i1, $i2, $i3);

     label5:
        goto label7;

     label6:
        $r13 := @caughtexception;
        r14 = $r13;
        $r15 = new java.lang.AssertionError;
        specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>(r14);
        throw $r15;

     label7:
        virtualinvoke r1.<sun.nio.ch.MembershipKeyImpl: void invalidate()>();
        $r16 = r0.<sun.nio.ch.DatagramChannelImpl: sun.nio.ch.MembershipRegistry registry>;
        virtualinvoke $r16.<sun.nio.ch.MembershipRegistry: void remove(sun.nio.ch.MembershipKeyImpl)>(r1);
        exitmonitor r2;

     label8:
        goto label12;

     label9:
        $r17 := @caughtexception;

     label10:
        r4 = $r17;
        exitmonitor r2;

     label11:
        throw r4;

     label12:
        return;

        catch java.io.IOException from label3 to label5 with label6;
        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    void block(sun.nio.ch.MembershipKeyImpl, java.net.InetAddress) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        sun.nio.ch.MembershipKeyImpl r1;
        java.net.InetAddress r2, $r8, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object r3, $r10;
        sun.nio.ch.MembershipKeyImpl$Type6 r4;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Throwable r5, $r24;
        java.nio.channels.MulticastChannel $r6;
        java.lang.AssertionError $r7, $r9;
        java.lang.IllegalStateException $r11;
        java.lang.IllegalArgumentException $r12, $r13, $r17;
        java.lang.Class $r14, $r16;
        java.io.FileDescriptor $r18, $r22;
        byte[] $r19, $r20;
        sun.nio.ch.MembershipKeyImpl$Type4 r21;
        java.lang.UnsupportedOperationException $r23;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: sun.nio.ch.MembershipKeyImpl;
        r2 := @parameter1: java.net.InetAddress;
        $z0 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r6 = virtualinvoke r1.<sun.nio.ch.MembershipKeyImpl: java.nio.channels.MulticastChannel channel()>();
        if $r6 == r0 goto label0;

        $r7 = new java.lang.AssertionError;
        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();
        throw $r7;

     label0:
        $z1 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z1 != 0 goto label1;

        $r8 = virtualinvoke r1.<sun.nio.ch.MembershipKeyImpl: java.net.InetAddress sourceAddress()>();
        if $r8 == null goto label1;

        $r9 = new java.lang.AssertionError;
        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();
        throw $r9;

     label1:
        $r10 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r3 = $r10;
        entermonitor $r10;

     label2:
        $z2 = virtualinvoke r1.<sun.nio.ch.MembershipKeyImpl: boolean isValid()>();
        if $z2 != 0 goto label3;

        $r11 = new java.lang.IllegalStateException;
        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("key is no longer valid");
        throw $r11;

     label3:
        $z3 = virtualinvoke r2.<java.net.InetAddress: boolean isAnyLocalAddress()>();
        if $z3 == 0 goto label4;

        $r12 = new java.lang.IllegalArgumentException;
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Source address is a wildcard address");
        throw $r12;

     label4:
        $z4 = virtualinvoke r2.<java.net.InetAddress: boolean isMulticastAddress()>();
        if $z4 == 0 goto label5;

        $r13 = new java.lang.IllegalArgumentException;
        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Source address is multicast address");
        throw $r13;

     label5:
        $r14 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();
        $r15 = virtualinvoke r1.<sun.nio.ch.MembershipKeyImpl: java.net.InetAddress group()>();
        $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.Class getClass()>();
        if $r14 == $r16 goto label6;

        $r17 = new java.lang.IllegalArgumentException;
        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Source address is different type to group");
        throw $r17;

     label6:
        $z5 = r1 instanceof sun.nio.ch.MembershipKeyImpl$Type6;
        if $z5 == 0 goto label7;

        r4 = (sun.nio.ch.MembershipKeyImpl$Type6) r1;
        $r18 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r19 = virtualinvoke r4.<sun.nio.ch.MembershipKeyImpl$Type6: byte[] groupAddress()>();
        $i1 = virtualinvoke r4.<sun.nio.ch.MembershipKeyImpl$Type6: int index()>();
        $r20 = staticinvoke <sun.nio.ch.Net: byte[] inet6AsByteArray(java.net.InetAddress)>(r2);
        i0 = staticinvoke <sun.nio.ch.Net: int block6(java.io.FileDescriptor,byte[],int,byte[])>($r18, $r19, $i1, $r20);
        goto label8;

     label7:
        r21 = (sun.nio.ch.MembershipKeyImpl$Type4) r1;
        $r22 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $i2 = virtualinvoke r21.<sun.nio.ch.MembershipKeyImpl$Type4: int groupAddress()>();
        $i3 = virtualinvoke r21.<sun.nio.ch.MembershipKeyImpl$Type4: int interfaceAddress()>();
        $i4 = staticinvoke <sun.nio.ch.Net: int inet4AsInt(java.net.InetAddress)>(r2);
        i0 = staticinvoke <sun.nio.ch.Net: int block4(java.io.FileDescriptor,int,int,int)>($r22, $i2, $i3, $i4);

     label8:
        if i0 != -2 goto label9;

        $r23 = new java.lang.UnsupportedOperationException;
        specialinvoke $r23.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r23;

     label9:
        exitmonitor r3;

     label10:
        goto label14;

     label11:
        $r24 := @caughtexception;

     label12:
        r5 = $r24;
        exitmonitor r3;

     label13:
        throw r5;

     label14:
        return;

        catch java.lang.Throwable from label2 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    void unblock(sun.nio.ch.MembershipKeyImpl, java.net.InetAddress)
    {
        sun.nio.ch.DatagramChannelImpl r0;
        sun.nio.ch.MembershipKeyImpl r1;
        java.net.InetAddress r2, $r8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object r3, $r10;
        sun.nio.ch.MembershipKeyImpl$Type6 r4;
        java.lang.Throwable r5, $r20;
        java.nio.channels.MulticastChannel $r6;
        java.lang.AssertionError $r7, $r9, $r19;
        java.lang.IllegalStateException $r11;
        java.io.FileDescriptor $r12, $r16;
        byte[] $r13, $r14;
        int $i0, $i1, $i2, $i3;
        sun.nio.ch.MembershipKeyImpl$Type4 r15;
        java.io.IOException $r17, r18;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: sun.nio.ch.MembershipKeyImpl;
        r2 := @parameter1: java.net.InetAddress;
        $z0 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r6 = virtualinvoke r1.<sun.nio.ch.MembershipKeyImpl: java.nio.channels.MulticastChannel channel()>();
        if $r6 == r0 goto label0;

        $r7 = new java.lang.AssertionError;
        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();
        throw $r7;

     label0:
        $z1 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z1 != 0 goto label1;

        $r8 = virtualinvoke r1.<sun.nio.ch.MembershipKeyImpl: java.net.InetAddress sourceAddress()>();
        if $r8 == null goto label1;

        $r9 = new java.lang.AssertionError;
        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();
        throw $r9;

     label1:
        $r10 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r3 = $r10;
        entermonitor $r10;

     label2:
        $z2 = virtualinvoke r1.<sun.nio.ch.MembershipKeyImpl: boolean isValid()>();
        if $z2 != 0 goto label3;

        $r11 = new java.lang.IllegalStateException;
        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("key is no longer valid");
        throw $r11;

     label3:
        $z3 = r1 instanceof sun.nio.ch.MembershipKeyImpl$Type6;
        if $z3 == 0 goto label4;

        r4 = (sun.nio.ch.MembershipKeyImpl$Type6) r1;
        $r12 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $r13 = virtualinvoke r4.<sun.nio.ch.MembershipKeyImpl$Type6: byte[] groupAddress()>();
        $i0 = virtualinvoke r4.<sun.nio.ch.MembershipKeyImpl$Type6: int index()>();
        $r14 = staticinvoke <sun.nio.ch.Net: byte[] inet6AsByteArray(java.net.InetAddress)>(r2);
        staticinvoke <sun.nio.ch.Net: void unblock6(java.io.FileDescriptor,byte[],int,byte[])>($r12, $r13, $i0, $r14);
        goto label5;

     label4:
        r15 = (sun.nio.ch.MembershipKeyImpl$Type4) r1;
        $r16 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        $i1 = virtualinvoke r15.<sun.nio.ch.MembershipKeyImpl$Type4: int groupAddress()>();
        $i2 = virtualinvoke r15.<sun.nio.ch.MembershipKeyImpl$Type4: int interfaceAddress()>();
        $i3 = staticinvoke <sun.nio.ch.Net: int inet4AsInt(java.net.InetAddress)>(r2);
        staticinvoke <sun.nio.ch.Net: void unblock4(java.io.FileDescriptor,int,int,int)>($r16, $i1, $i2, $i3);

     label5:
        goto label7;

     label6:
        $r17 := @caughtexception;
        r18 = $r17;
        $r19 = new java.lang.AssertionError;
        specialinvoke $r19.<java.lang.AssertionError: void <init>(java.lang.Object)>(r18);
        throw $r19;

     label7:
        exitmonitor r3;

     label8:
        goto label12;

     label9:
        $r20 := @caughtexception;

     label10:
        r5 = $r20;
        exitmonitor r3;

     label11:
        throw r5;

     label12:
        return;

        catch java.io.IOException from label3 to label5 with label6;
        catch java.lang.Throwable from label2 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    protected void implCloseSelectableChannel() throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.lang.Object r1, $r3;
        long l0, $l2, $l4, l5;
        java.lang.Throwable r2, $r8;
        int $i1;
        sun.nio.ch.NativeDispatcher $r4;
        java.io.FileDescriptor $r5;
        sun.nio.ch.MembershipRegistry $r6, $r7;
        byte $b3, $b6;
        boolean $z0;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        $r3 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $i1 = r0.<sun.nio.ch.DatagramChannelImpl: int state>;
        if $i1 == 2 goto label1;

        $r4 = <sun.nio.ch.DatagramChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        $r5 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        virtualinvoke $r4.<sun.nio.ch.NativeDispatcher: void preClose(java.io.FileDescriptor)>($r5);

     label1:
        staticinvoke <sun.net.ResourceManager: void afterUdpClose()>();
        $r6 = r0.<sun.nio.ch.DatagramChannelImpl: sun.nio.ch.MembershipRegistry registry>;
        if $r6 == null goto label2;

        $r7 = r0.<sun.nio.ch.DatagramChannelImpl: sun.nio.ch.MembershipRegistry registry>;
        virtualinvoke $r7.<sun.nio.ch.MembershipRegistry: void invalidateAll()>();

     label2:
        $l2 = r0.<sun.nio.ch.DatagramChannelImpl: long readerThread>;
        l0 = $l2;
        $b3 = $l2 cmp 0L;
        if $b3 == 0 goto label3;

        staticinvoke <sun.nio.ch.NativeThread: void signal(long)>(l0);

     label3:
        $l4 = r0.<sun.nio.ch.DatagramChannelImpl: long writerThread>;
        l5 = $l4;
        $b6 = $l4 cmp 0L;
        if $b6 == 0 goto label4;

        staticinvoke <sun.nio.ch.NativeThread: void signal(long)>(l5);

     label4:
        $z0 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isRegistered()>();
        if $z0 != 0 goto label5;

        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void kill()>();

     label5:
        exitmonitor r1;

     label6:
        goto label10;

     label7:
        $r8 := @caughtexception;

     label8:
        r2 = $r8;
        exitmonitor r1;

     label9:
        throw r2;

     label10:
        return;

        catch java.lang.Throwable from label0 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void kill() throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r7;
        int $i0, $i1;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r4;
        sun.nio.ch.NativeDispatcher $r5;
        java.io.FileDescriptor $r6;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        $r3 = r0.<sun.nio.ch.DatagramChannelImpl: java.lang.Object stateLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $i0 = r0.<sun.nio.ch.DatagramChannelImpl: int state>;
        if $i0 != 2 goto label2;

        exitmonitor r1;

     label1:
        return;

     label2:
        $i1 = r0.<sun.nio.ch.DatagramChannelImpl: int state>;
        if $i1 != -1 goto label4;

        r0.<sun.nio.ch.DatagramChannelImpl: int state> = 2;
        exitmonitor r1;

     label3:
        return;

     label4:
        $z0 = <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled>;
        if $z0 != 0 goto label6;

        $z1 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label5;

        $z2 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean isRegistered()>();
        if $z2 == 0 goto label6;

     label5:
        $r4 = new java.lang.AssertionError;
        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();
        throw $r4;

     label6:
        $r5 = <sun.nio.ch.DatagramChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        $r6 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        virtualinvoke $r5.<sun.nio.ch.NativeDispatcher: void close(java.io.FileDescriptor)>($r6);
        r0.<sun.nio.ch.DatagramChannelImpl: int state> = 2;
        exitmonitor r1;

     label7:
        goto label11;

     label8:
        $r7 := @caughtexception;

     label9:
        r2 = $r7;
        exitmonitor r1;

     label10:
        throw r2;

     label11:
        return;

        catch java.lang.Throwable from label0 to label1 with label8;
        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    protected void finalize() throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.io.FileDescriptor $r1;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        $r1 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        if $r1 == null goto label0;

        virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: void close()>();

     label0:
        return;
    }

    public boolean translateReadyOps(int, int, sun.nio.ch.SelectionKeyImpl)
    {
        sun.nio.ch.DatagramChannelImpl r0;
        int i0, i1, i2, i3, i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        sun.nio.ch.SelectionKeyImpl r1;
        boolean $z0, $z1;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: sun.nio.ch.SelectionKeyImpl;
        i2 = virtualinvoke r1.<sun.nio.ch.SelectionKeyImpl: int nioInterestOps()>();
        i3 = virtualinvoke r1.<sun.nio.ch.SelectionKeyImpl: int nioReadyOps()>();
        i4 = i1;
        $i5 = i0 & 32;
        if $i5 == 0 goto label0;

        return 0;

     label0:
        $i6 = i0 & 24;
        if $i6 == 0 goto label3;

        i7 = i2;
        virtualinvoke r1.<sun.nio.ch.SelectionKeyImpl: void nioReadyOps(int)>(i7);
        $i8 = i3 ^ -1;
        $i9 = i7 & $i8;
        if $i9 == 0 goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $i10 = i0 & 1;
        if $i10 == 0 goto label4;

        $i11 = i2 & 1;
        if $i11 == 0 goto label4;

        i4 = i4 | 1;

     label4:
        $i12 = i0 & 4;
        if $i12 == 0 goto label5;

        $i13 = i2 & 4;
        if $i13 == 0 goto label5;

        i4 = i4 | 4;

     label5:
        virtualinvoke r1.<sun.nio.ch.SelectionKeyImpl: void nioReadyOps(int)>(i4);
        $i14 = i3 ^ -1;
        $i15 = i4 & $i14;
        if $i15 == 0 goto label6;

        $z1 = 1;
        goto label7;

     label6:
        $z1 = 0;

     label7:
        return $z1;
    }

    public boolean translateAndUpdateReadyOps(int, sun.nio.ch.SelectionKeyImpl)
    {
        sun.nio.ch.DatagramChannelImpl r0;
        int i0, $i1;
        sun.nio.ch.SelectionKeyImpl r1;
        boolean $z0;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        i0 := @parameter0: int;
        r1 := @parameter1: sun.nio.ch.SelectionKeyImpl;
        $i1 = virtualinvoke r1.<sun.nio.ch.SelectionKeyImpl: int nioReadyOps()>();
        $z0 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean translateReadyOps(int,int,sun.nio.ch.SelectionKeyImpl)>(i0, $i1, r1);
        return $z0;
    }

    public boolean translateAndSetReadyOps(int, sun.nio.ch.SelectionKeyImpl)
    {
        sun.nio.ch.DatagramChannelImpl r0;
        int i0;
        sun.nio.ch.SelectionKeyImpl r1;
        boolean $z0;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        i0 := @parameter0: int;
        r1 := @parameter1: sun.nio.ch.SelectionKeyImpl;
        $z0 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: boolean translateReadyOps(int,int,sun.nio.ch.SelectionKeyImpl)>(i0, 0, r1);
        return $z0;
    }

    public void translateAndSetInterestOps(int, sun.nio.ch.SelectionKeyImpl)
    {
        sun.nio.ch.DatagramChannelImpl r0;
        int i0, $i2, $i3, $i4;
        sun.nio.ch.SelectionKeyImpl r1;
        byte b1;
        sun.nio.ch.SelectorImpl $r2;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        i0 := @parameter0: int;
        r1 := @parameter1: sun.nio.ch.SelectionKeyImpl;
        b1 = 0;
        $i2 = i0 & 1;
        if $i2 == 0 goto label0;

        b1 = b1 | 1;

     label0:
        $i3 = i0 & 4;
        if $i3 == 0 goto label1;

        b1 = b1 | 4;

     label1:
        $i4 = i0 & 8;
        if $i4 == 0 goto label2;

        b1 = b1 | 1;

     label2:
        $r2 = r1.<sun.nio.ch.SelectionKeyImpl: sun.nio.ch.SelectorImpl selector>;
        virtualinvoke $r2.<sun.nio.ch.SelectorImpl: void putEventOps(sun.nio.ch.SelectionKeyImpl,int)>(r1, b1);
        return;
    }

    public java.io.FileDescriptor getFD()
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.io.FileDescriptor $r1;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        $r1 = r0.<sun.nio.ch.DatagramChannelImpl: java.io.FileDescriptor fd>;
        return $r1;
    }

    public int getFDVal()
    {
        sun.nio.ch.DatagramChannelImpl r0;
        int $i0;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        $i0 = r0.<sun.nio.ch.DatagramChannelImpl: int fdVal>;
        return $i0;
    }

    private static native void initIDs();

    private static native void disconnect0(java.io.FileDescriptor, boolean) throws java.io.IOException;

    private native int receive0(java.io.FileDescriptor, long, int, boolean) throws java.io.IOException;

    private native int send0(boolean, java.io.FileDescriptor, long, int, java.net.InetAddress, int) throws java.io.IOException;

    public volatile java.nio.channels.NetworkChannel setOption(java.net.SocketOption, java.lang.Object) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.net.SocketOption r1;
        java.lang.Object r2;
        java.nio.channels.DatagramChannel $r3;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.net.SocketOption;
        r2 := @parameter1: java.lang.Object;
        $r3 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: java.nio.channels.DatagramChannel setOption(java.net.SocketOption,java.lang.Object)>(r1, r2);
        return $r3;
    }

    public volatile java.nio.channels.NetworkChannel bind(java.net.SocketAddress) throws java.io.IOException
    {
        sun.nio.ch.DatagramChannelImpl r0;
        java.net.SocketAddress r1;
        java.nio.channels.DatagramChannel $r2;

        r0 := @this: sun.nio.ch.DatagramChannelImpl;
        r1 := @parameter0: java.net.SocketAddress;
        $r2 = virtualinvoke r0.<sun.nio.ch.DatagramChannelImpl: java.nio.channels.DatagramChannel bind(java.net.SocketAddress)>(r1);
        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        sun.nio.ch.DatagramDispatcher $r1;

        $r0 = class "sun/nio/ch/DatagramChannelImpl";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.ch.DatagramChannelImpl: boolean $assertionsDisabled> = $z1;
        $r1 = new sun.nio.ch.DatagramDispatcher;
        specialinvoke $r1.<sun.nio.ch.DatagramDispatcher: void <init>()>();
        <sun.nio.ch.DatagramChannelImpl: sun.nio.ch.NativeDispatcher nd> = $r1;
        staticinvoke <sun.nio.ch.Util: void load()>();
        staticinvoke <sun.nio.ch.DatagramChannelImpl: void initIDs()>();
        return;
    }
}
