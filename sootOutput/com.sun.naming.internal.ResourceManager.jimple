public final class com.sun.naming.internal.ResourceManager extends java.lang.Object
{
    private static final java.lang.String PROVIDER_RESOURCE_FILE_NAME;
    private static final java.lang.String APP_RESOURCE_FILE_NAME;
    private static final java.lang.String JRELIB_PROPERTY_FILE_NAME;
    private static final java.lang.String DISABLE_APP_RESOURCE_FILES;
    private static final java.lang.String[] listProperties;
    private static final com.sun.naming.internal.VersionHelper helper;
    private static final java.util.WeakHashMap propertiesCache;
    private static final java.util.WeakHashMap factoryCache;
    private static final java.util.WeakHashMap urlFactoryCache;
    private static final java.lang.ref.WeakReference NO_FACTORY;

    private void <init>()
    {
        com.sun.naming.internal.ResourceManager r0;

        r0 := @this: com.sun.naming.internal.ResourceManager;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static java.util.Hashtable getInitialEnvironment(java.util.Hashtable) throws javax.naming.NamingException
    {
        java.util.Hashtable r0, $r5, $r15;
        java.lang.String[] r1, r3;
        java.lang.Object r2, r4, $r13;
        int i0, $i1;
        com.sun.naming.internal.VersionHelper $r6, $r10;
        java.lang.String $r7, $r8, $r9, $r11, r14;
        boolean $z0;

        r0 := @parameter0: java.util.Hashtable;
        r1 = <com.sun.naming.internal.VersionHelper: java.lang.String[] PROPS>;
        if r0 != null goto label0;

        $r5 = new java.util.Hashtable;
        specialinvoke $r5.<java.util.Hashtable: void <init>(int)>(11);
        r0 = $r5;

     label0:
        r2 = virtualinvoke r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("java.naming.applet");
        $r6 = <com.sun.naming.internal.ResourceManager: com.sun.naming.internal.VersionHelper helper>;
        r3 = virtualinvoke $r6.<com.sun.naming.internal.VersionHelper: java.lang.String[] getJndiProperties()>();
        i0 = 0;

     label1:
        $i1 = lengthof r1;
        if i0 >= $i1 goto label7;

        $r7 = r1[i0];
        r4 = virtualinvoke r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r7);
        if r4 != null goto label6;

        if r2 == null goto label2;

        $r8 = r1[i0];
        r4 = staticinvoke <com.sun.naming.internal.ResourceManager$AppletParameter: java.lang.Object get(java.lang.Object,java.lang.String)>(r2, $r8);

     label2:
        if r4 != null goto label5;

        if r3 == null goto label3;

        $r9 = r3[i0];
        goto label4;

     label3:
        $r10 = <com.sun.naming.internal.ResourceManager: com.sun.naming.internal.VersionHelper helper>;
        $r9 = virtualinvoke $r10.<com.sun.naming.internal.VersionHelper: java.lang.String getJndiProperty(int)>(i0);

     label4:
        r4 = $r9;

     label5:
        if r4 == null goto label6;

        $r11 = r1[i0];
        virtualinvoke r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r4);

     label6:
        i0 = i0 + 1;
        goto label1;

     label7:
        $r13 = virtualinvoke r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("com.sun.naming.disable.app.resource.files");
        r14 = (java.lang.String) $r13;
        if r14 == null goto label8;

        $z0 = virtualinvoke r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");
        if $z0 == 0 goto label8;

        return r0;

     label8:
        $r15 = staticinvoke <com.sun.naming.internal.ResourceManager: java.util.Hashtable getApplicationResources()>();
        staticinvoke <com.sun.naming.internal.ResourceManager: void mergeTables(java.util.Hashtable,java.util.Hashtable)>(r0, $r15);
        return r0;
    }

    public static java.lang.String getProperty(java.lang.String, java.util.Hashtable, javax.naming.Context, boolean) throws javax.naming.NamingException
    {
        java.lang.String r0, r3, r4, $r6, $r13;
        java.util.Hashtable r1, $r7;
        javax.naming.Context r2;
        boolean z0;
        java.lang.Object $r5, $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.util.Hashtable;
        r2 := @parameter2: javax.naming.Context;
        z0 := @parameter3: boolean;
        if r1 == null goto label0;

        $r5 = virtualinvoke r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);
        $r6 = (java.lang.String) $r5;
        goto label1;

     label0:
        $r6 = null;

     label1:
        r3 = $r6;
        if r2 == null goto label2;

        if r3 == null goto label3;

        if z0 != 0 goto label3;

     label2:
        return r3;

     label3:
        $r7 = staticinvoke <com.sun.naming.internal.ResourceManager: java.util.Hashtable getProviderResource(java.lang.Object)>(r2);
        $r8 = virtualinvoke $r7.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);
        r4 = (java.lang.String) $r8;
        if r3 != null goto label4;

        return r4;

     label4:
        if r4 == null goto label5;

        if z0 != 0 goto label6;

     label5:
        return r3;

     label6:
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r13;
    }

    public static com.sun.naming.internal.FactoryEnumeration getFactories(java.lang.String, java.util.Hashtable, javax.naming.Context) throws javax.naming.NamingException
    {
        java.lang.String r0, r3, r8;
        java.util.Hashtable r1;
        javax.naming.Context r2;
        java.lang.ClassLoader r4;
        null_type n0;
        java.util.WeakHashMap r5, $r12, $r13, $r17;
        java.lang.Throwable r6, r10, $r19, $r34;
        java.util.StringTokenizer r7, $r25;
        java.lang.Class r9;
        com.sun.naming.internal.VersionHelper $r11, $r28;
        java.lang.Object $r14, $r22;
        java.util.Map r15, r21;
        java.util.HashMap $r16;
        java.util.List r23;
        int $i0;
        com.sun.naming.internal.FactoryEnumeration $r24, $r33;
        java.util.ArrayList $r26, r27;
        boolean $z0;
        com.sun.naming.internal.NamedWeakReference $r29;
        java.lang.Exception $r30, r31;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.util.Hashtable;
        r2 := @parameter2: javax.naming.Context;
        r3 = staticinvoke <com.sun.naming.internal.ResourceManager: java.lang.String getProperty(java.lang.String,java.util.Hashtable,javax.naming.Context,boolean)>(r0, r1, r2, 1);
        if r3 != null goto label0;

        return null;

     label0:
        $r11 = <com.sun.naming.internal.ResourceManager: com.sun.naming.internal.VersionHelper helper>;
        r4 = virtualinvoke $r11.<com.sun.naming.internal.VersionHelper: java.lang.ClassLoader getContextClassLoader()>();
        n0 = null;
        $r12 = <com.sun.naming.internal.ResourceManager: java.util.WeakHashMap factoryCache>;
        r5 = $r12;
        entermonitor $r12;

     label1:
        $r13 = <com.sun.naming.internal.ResourceManager: java.util.WeakHashMap factoryCache>;
        $r14 = virtualinvoke $r13.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r4);
        r15 = (java.util.Map) $r14;
        if r15 != null goto label2;

        $r16 = new java.util.HashMap;
        specialinvoke $r16.<java.util.HashMap: void <init>(int)>(11);
        r15 = $r16;
        $r17 = <com.sun.naming.internal.ResourceManager: java.util.WeakHashMap factoryCache>;
        virtualinvoke $r17.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r15);

     label2:
        exitmonitor r5;

     label3:
        goto label7;

     label4:
        $r19 := @caughtexception;

     label5:
        r6 = $r19;
        exitmonitor r5;

     label6:
        throw r6;

     label7:
        r21 = r15;
        entermonitor r15;

     label8:
        $r22 = interfaceinvoke r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);
        r23 = (java.util.List) $r22;
        if r23 == null goto label12;

        $i0 = interfaceinvoke r23.<java.util.List: int size()>();
        if $i0 != 0 goto label9;

        $r24 = null;
        goto label10;

     label9:
        $r24 = new com.sun.naming.internal.FactoryEnumeration;
        specialinvoke $r24.<com.sun.naming.internal.FactoryEnumeration: void <init>(java.util.List,java.lang.ClassLoader)>(r23, r4);

     label10:
        exitmonitor r21;

     label11:
        return $r24;

     label12:
        $r25 = new java.util.StringTokenizer;
        specialinvoke $r25.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r3, ":");
        r7 = $r25;
        $r26 = new java.util.ArrayList;
        specialinvoke $r26.<java.util.ArrayList: void <init>(int)>(5);
        r27 = $r26;

     label13:
        $z0 = virtualinvoke r7.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z0 == 0 goto label17;

     label14:
        r8 = virtualinvoke r7.<java.util.StringTokenizer: java.lang.String nextToken()>();
        $r28 = <com.sun.naming.internal.ResourceManager: com.sun.naming.internal.VersionHelper helper>;
        r9 = virtualinvoke $r28.<com.sun.naming.internal.VersionHelper: java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader)>(r8, r4);
        $r29 = new com.sun.naming.internal.NamedWeakReference;
        specialinvoke $r29.<com.sun.naming.internal.NamedWeakReference: void <init>(java.lang.Object,java.lang.String)>(r9, r8);
        interfaceinvoke r27.<java.util.List: boolean add(java.lang.Object)>($r29);

     label15:
        goto label13;

     label16:
        $r30 := @caughtexception;
        r31 = $r30;
        goto label13;

     label17:
        interfaceinvoke r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r27);
        $r33 = new com.sun.naming.internal.FactoryEnumeration;
        specialinvoke $r33.<com.sun.naming.internal.FactoryEnumeration: void <init>(java.util.List,java.lang.ClassLoader)>(r27, r4);
        exitmonitor r21;

     label18:
        return $r33;

     label19:
        $r34 := @caughtexception;

     label20:
        r10 = $r34;
        exitmonitor r21;

     label21:
        throw r10;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Exception from label14 to label15 with label16;
        catch java.lang.Throwable from label8 to label11 with label19;
        catch java.lang.Throwable from label12 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public static java.lang.Object getFactory(java.lang.String, java.util.Hashtable, javax.naming.Context, java.lang.String, java.lang.String) throws javax.naming.NamingException
    {
        java.lang.String r0, r3, r4, r5, r7, r12, r20, $r42, $r52, $r59;
        java.util.Hashtable r1;
        javax.naming.Context r2;
        java.lang.ClassLoader r6;
        null_type n0, $n1;
        java.util.WeakHashMap r8, $r26, $r27, $r31;
        java.lang.Throwable r9, r15, $r33, $r68;
        java.lang.ref.WeakReference r10, $r38, $r65;
        java.util.StringTokenizer r11, $r40;
        java.lang.InstantiationException r13, $r47;
        javax.naming.NamingException r14, $r48, $r55, r60;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r22, $r23, $r24, $r25, $r41, $r43, $r44, $r49, $r50, $r51, $r56, $r57, $r58;
        com.sun.naming.internal.VersionHelper $r21, $r45;
        java.lang.Object $r28, r36, $r37;
        java.util.Map r29, r35, $r63;
        java.util.HashMap $r30;
        boolean $z0;
        java.lang.Class $r46;
        java.lang.IllegalAccessException $r53, r54;
        java.lang.Exception $r61, r62;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.util.Hashtable;
        r2 := @parameter2: javax.naming.Context;
        r3 := @parameter3: java.lang.String;
        r4 := @parameter4: java.lang.String;
        r5 = staticinvoke <com.sun.naming.internal.ResourceManager: java.lang.String getProperty(java.lang.String,java.util.Hashtable,javax.naming.Context,boolean)>(r0, r1, r2, 1);
        if r5 == null goto label0;

        $r16 = new java.lang.StringBuilder;
        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        goto label1;

     label0:
        r20 = r4;

     label1:
        $r21 = <com.sun.naming.internal.ResourceManager: com.sun.naming.internal.VersionHelper helper>;
        r6 = virtualinvoke $r21.<com.sun.naming.internal.VersionHelper: java.lang.ClassLoader getContextClassLoader()>();
        $r22 = new java.lang.StringBuilder;
        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);
        r7 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();
        n0 = null;
        $r26 = <com.sun.naming.internal.ResourceManager: java.util.WeakHashMap urlFactoryCache>;
        r8 = $r26;
        entermonitor $r26;

     label2:
        $r27 = <com.sun.naming.internal.ResourceManager: java.util.WeakHashMap urlFactoryCache>;
        $r28 = virtualinvoke $r27.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r6);
        r29 = (java.util.Map) $r28;
        if r29 != null goto label3;

        $r30 = new java.util.HashMap;
        specialinvoke $r30.<java.util.HashMap: void <init>(int)>(11);
        r29 = $r30;
        $r31 = <com.sun.naming.internal.ResourceManager: java.util.WeakHashMap urlFactoryCache>;
        virtualinvoke $r31.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r29);

     label3:
        exitmonitor r8;

     label4:
        goto label8;

     label5:
        $r33 := @caughtexception;

     label6:
        r9 = $r33;
        exitmonitor r8;

     label7:
        throw r9;

     label8:
        r35 = r29;
        entermonitor r29;

     label9:
        r36 = null;
        $r37 = interfaceinvoke r29.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);
        r10 = (java.lang.ref.WeakReference) $r37;
        $r38 = <com.sun.naming.internal.ResourceManager: java.lang.ref.WeakReference NO_FACTORY>;
        if r10 != $r38 goto label11;

        $n1 = null;
        exitmonitor r35;

     label10:
        return $n1;

     label11:
        if r10 == null goto label13;

        r36 = virtualinvoke r10.<java.lang.ref.WeakReference: java.lang.Object get()>();
        if r36 == null goto label13;

        exitmonitor r35;

     label12:
        return r36;

     label13:
        $r40 = new java.util.StringTokenizer;
        specialinvoke $r40.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r20, ":");
        r11 = $r40;

     label14:
        if r36 != null goto label20;

        $z0 = virtualinvoke r11.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z0 == 0 goto label20;

        $r41 = new java.lang.StringBuilder;
        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();
        $r42 = virtualinvoke r11.<java.util.StringTokenizer: java.lang.String nextToken()>();
        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);
        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        r12 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

     label15:
        $r45 = <com.sun.naming.internal.ResourceManager: com.sun.naming.internal.VersionHelper helper>;
        $r46 = virtualinvoke $r45.<com.sun.naming.internal.VersionHelper: java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader)>(r12, r6);
        r36 = virtualinvoke $r46.<java.lang.Class: java.lang.Object newInstance()>();

     label16:
        goto label14;

     label17:
        $r47 := @caughtexception;
        r13 = $r47;
        $r48 = new javax.naming.NamingException;
        $r49 = new java.lang.StringBuilder;
        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();
        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot instantiate ");
        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r48.<javax.naming.NamingException: void <init>(java.lang.String)>($r52);
        r14 = $r48;
        virtualinvoke r14.<javax.naming.NamingException: void setRootCause(java.lang.Throwable)>(r13);
        throw r14;

     label18:
        $r53 := @caughtexception;
        r54 = $r53;
        $r55 = new javax.naming.NamingException;
        $r56 = new java.lang.StringBuilder;
        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();
        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot access ");
        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);
        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r55.<javax.naming.NamingException: void <init>(java.lang.String)>($r59);
        r60 = $r55;
        virtualinvoke r60.<javax.naming.NamingException: void setRootCause(java.lang.Throwable)>(r54);
        throw r60;

     label19:
        $r61 := @caughtexception;
        r62 = $r61;
        goto label14;

     label20:
        $r63 = r29;
        if r36 == null goto label21;

        $r65 = new java.lang.ref.WeakReference;
        specialinvoke $r65.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r36);
        goto label22;

     label21:
        $r65 = <com.sun.naming.internal.ResourceManager: java.lang.ref.WeakReference NO_FACTORY>;

     label22:
        interfaceinvoke $r63.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r65);
        exitmonitor r35;

     label23:
        return r36;

     label24:
        $r68 := @caughtexception;

     label25:
        r15 = $r68;
        exitmonitor r35;

     label26:
        throw r15;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.InstantiationException from label15 to label16 with label17;
        catch java.lang.IllegalAccessException from label15 to label16 with label18;
        catch java.lang.Exception from label15 to label16 with label19;
        catch java.lang.Throwable from label9 to label10 with label24;
        catch java.lang.Throwable from label11 to label12 with label24;
        catch java.lang.Throwable from label13 to label23 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
    }

    private static java.util.Hashtable getProviderResource(java.lang.Object) throws javax.naming.NamingException
    {
        java.lang.Object r0, $r11;
        java.util.WeakHashMap r1, $r9, $r10, $r23;
        java.lang.Class r2;
        java.util.Hashtable r3, $r8;
        java.io.InputStream r4;
        java.io.IOException r5, $r17;
        javax.naming.ConfigurationException r6, $r18;
        java.lang.Throwable r7, $r26;
        java.util.Properties $r13, r14, $r16;
        com.sun.naming.internal.VersionHelper $r15;
        java.lang.StringBuilder $r19, $r20, $r21;
        java.lang.String $r22;

        r0 := @parameter0: java.lang.Object;
        if r0 != null goto label0;

        $r8 = new java.util.Hashtable;
        specialinvoke $r8.<java.util.Hashtable: void <init>(int)>(1);
        return $r8;

     label0:
        $r9 = <com.sun.naming.internal.ResourceManager: java.util.WeakHashMap propertiesCache>;
        r1 = $r9;
        entermonitor $r9;

     label1:
        r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r10 = <com.sun.naming.internal.ResourceManager: java.util.WeakHashMap propertiesCache>;
        $r11 = virtualinvoke $r10.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r2);
        r3 = (java.util.Hashtable) $r11;
        if r3 == null goto label3;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r13 = new java.util.Properties;
        specialinvoke $r13.<java.util.Properties: void <init>()>();
        r14 = $r13;
        $r15 = <com.sun.naming.internal.ResourceManager: com.sun.naming.internal.VersionHelper helper>;
        r4 = virtualinvoke $r15.<com.sun.naming.internal.VersionHelper: java.io.InputStream getResourceAsStream(java.lang.Class,java.lang.String)>(r2, "jndiprovider.properties");
        if r4 == null goto label7;

     label4:
        $r16 = (java.util.Properties) r14;
        virtualinvoke $r16.<java.util.Properties: void load(java.io.InputStream)>(r4);

     label5:
        goto label7;

     label6:
        $r17 := @caughtexception;
        r5 = $r17;
        $r18 = new javax.naming.ConfigurationException;
        $r19 = new java.lang.StringBuilder;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading provider resource file for ");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r18.<javax.naming.ConfigurationException: void <init>(java.lang.String)>($r22);
        r6 = $r18;
        virtualinvoke r6.<javax.naming.NamingException: void setRootCause(java.lang.Throwable)>(r5);
        throw r6;

     label7:
        $r23 = <com.sun.naming.internal.ResourceManager: java.util.WeakHashMap propertiesCache>;
        virtualinvoke $r23.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r14);
        exitmonitor r1;

     label8:
        return r14;

     label9:
        $r26 := @caughtexception;

     label10:
        r7 = $r26;
        exitmonitor r1;

     label11:
        throw r7;

        catch java.io.IOException from label4 to label5 with label6;
        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    private static java.util.Hashtable getApplicationResources() throws javax.naming.NamingException
    {
        com.sun.naming.internal.VersionHelper $r0, $r12, $r16;
        java.lang.ClassLoader r1;
        java.util.WeakHashMap r2, $r8, $r9, $r24;
        java.util.Hashtable r3, $r23;
        javax.naming.NamingEnumeration r4;
        java.util.Properties r5, r6, $r13, $r18;
        java.lang.Throwable r7, $r27;
        java.lang.Object $r10, $r14;
        boolean $z0;
        java.io.InputStream $r15, r17;
        java.io.IOException $r19, r20;
        javax.naming.ConfigurationException $r21, r22;

        $r0 = <com.sun.naming.internal.ResourceManager: com.sun.naming.internal.VersionHelper helper>;
        r1 = virtualinvoke $r0.<com.sun.naming.internal.VersionHelper: java.lang.ClassLoader getContextClassLoader()>();
        $r8 = <com.sun.naming.internal.ResourceManager: java.util.WeakHashMap propertiesCache>;
        r2 = $r8;
        entermonitor $r8;

     label0:
        $r9 = <com.sun.naming.internal.ResourceManager: java.util.WeakHashMap propertiesCache>;
        $r10 = virtualinvoke $r9.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r1);
        r3 = (java.util.Hashtable) $r10;
        if r3 == null goto label2;

        exitmonitor r2;

     label1:
        return r3;

     label2:
        $r12 = <com.sun.naming.internal.ResourceManager: com.sun.naming.internal.VersionHelper helper>;
        r4 = virtualinvoke $r12.<com.sun.naming.internal.VersionHelper: javax.naming.NamingEnumeration getResources(java.lang.ClassLoader,java.lang.String)>(r1, "jndi.properties");

     label3:
        $z0 = interfaceinvoke r4.<javax.naming.NamingEnumeration: boolean hasMore()>();
        if $z0 == 0 goto label6;

        $r13 = new java.util.Properties;
        specialinvoke $r13.<java.util.Properties: void <init>()>();
        r5 = $r13;
        $r14 = interfaceinvoke r4.<javax.naming.NamingEnumeration: java.lang.Object next()>();
        $r15 = (java.io.InputStream) $r14;
        virtualinvoke r5.<java.util.Properties: void load(java.io.InputStream)>($r15);
        if r3 != null goto label4;

        r3 = r5;
        goto label5;

     label4:
        staticinvoke <com.sun.naming.internal.ResourceManager: void mergeTables(java.util.Hashtable,java.util.Hashtable)>(r3, r5);

     label5:
        goto label3;

     label6:
        $r16 = <com.sun.naming.internal.ResourceManager: com.sun.naming.internal.VersionHelper helper>;
        r17 = virtualinvoke $r16.<com.sun.naming.internal.VersionHelper: java.io.InputStream getJavaHomeLibStream(java.lang.String)>("jndi.properties");
        if r17 == null goto label8;

        $r18 = new java.util.Properties;
        specialinvoke $r18.<java.util.Properties: void <init>()>();
        r6 = $r18;
        virtualinvoke r6.<java.util.Properties: void load(java.io.InputStream)>(r17);
        if r3 != null goto label7;

        r3 = r6;
        goto label8;

     label7:
        staticinvoke <com.sun.naming.internal.ResourceManager: void mergeTables(java.util.Hashtable,java.util.Hashtable)>(r3, r6);

     label8:
        goto label10;

     label9:
        $r19 := @caughtexception;
        r20 = $r19;
        $r21 = new javax.naming.ConfigurationException;
        specialinvoke $r21.<javax.naming.ConfigurationException: void <init>(java.lang.String)>("Error reading application resource file");
        r22 = $r21;
        virtualinvoke r22.<javax.naming.NamingException: void setRootCause(java.lang.Throwable)>(r20);
        throw r22;

     label10:
        if r3 != null goto label11;

        $r23 = new java.util.Hashtable;
        specialinvoke $r23.<java.util.Hashtable: void <init>(int)>(11);
        r3 = $r23;

     label11:
        $r24 = <com.sun.naming.internal.ResourceManager: java.util.WeakHashMap propertiesCache>;
        virtualinvoke $r24.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);
        exitmonitor r2;

     label12:
        return r3;

     label13:
        $r27 := @caughtexception;

     label14:
        r7 = $r27;
        exitmonitor r2;

     label15:
        throw r7;

        catch java.io.IOException from label2 to label8 with label9;
        catch java.lang.Throwable from label0 to label1 with label13;
        catch java.lang.Throwable from label2 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private static void mergeTables(java.util.Hashtable, java.util.Hashtable)
    {
        java.util.Hashtable r0, r1;
        java.util.Enumeration r2;
        java.lang.String r3, r5, $r11, $r15;
        java.lang.Object r4, $r6, $r7, $r9;
        boolean $z0, $z1;
        java.lang.StringBuilder $r10, $r12, $r13, $r14;

        r0 := @parameter0: java.util.Hashtable;
        r1 := @parameter1: java.util.Hashtable;
        r2 = virtualinvoke r1.<java.util.Hashtable: java.util.Enumeration keys()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();
        r3 = (java.lang.String) $r6;
        r4 = virtualinvoke r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r3);
        if r4 != null goto label1;

        $r7 = virtualinvoke r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r3);
        virtualinvoke r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r7);
        goto label2;

     label1:
        $z1 = staticinvoke <com.sun.naming.internal.ResourceManager: boolean isListProperty(java.lang.String)>(r3);
        if $z1 == 0 goto label2;

        $r9 = virtualinvoke r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r3);
        r5 = (java.lang.String) $r9;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = (java.lang.String) r4;
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r15);

     label2:
        goto label0;

     label3:
        return;
    }

    private static boolean isListProperty(java.lang.String)
    {
        java.lang.String r0, r2, $r4;
        int i0, $i1;
        java.lang.String[] $r1, $r3;

        r0 := @parameter0: java.lang.String;
        r2 = virtualinvoke r0.<java.lang.String: java.lang.String intern()>();
        i0 = 0;

     label0:
        $r1 = <com.sun.naming.internal.ResourceManager: java.lang.String[] listProperties>;
        $i1 = lengthof $r1;
        if i0 >= $i1 goto label2;

        $r3 = <com.sun.naming.internal.ResourceManager: java.lang.String[] listProperties>;
        $r4 = $r3[i0];
        if r2 != $r4 goto label1;

        return 1;

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        return 0;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        com.sun.naming.internal.VersionHelper $r1;
        java.util.WeakHashMap $r2, $r3, $r4;
        java.lang.ref.WeakReference $r5;

        $r0 = newarray (java.lang.String)[4];
        $r0[0] = "java.naming.factory.object";
        $r0[1] = "java.naming.factory.url.pkgs";
        $r0[2] = "java.naming.factory.state";
        $r0[3] = "java.naming.factory.control";
        <com.sun.naming.internal.ResourceManager: java.lang.String[] listProperties> = $r0;
        $r1 = staticinvoke <com.sun.naming.internal.VersionHelper: com.sun.naming.internal.VersionHelper getVersionHelper()>();
        <com.sun.naming.internal.ResourceManager: com.sun.naming.internal.VersionHelper helper> = $r1;
        $r2 = new java.util.WeakHashMap;
        specialinvoke $r2.<java.util.WeakHashMap: void <init>(int)>(11);
        <com.sun.naming.internal.ResourceManager: java.util.WeakHashMap propertiesCache> = $r2;
        $r3 = new java.util.WeakHashMap;
        specialinvoke $r3.<java.util.WeakHashMap: void <init>(int)>(11);
        <com.sun.naming.internal.ResourceManager: java.util.WeakHashMap factoryCache> = $r3;
        $r4 = new java.util.WeakHashMap;
        specialinvoke $r4.<java.util.WeakHashMap: void <init>(int)>(11);
        <com.sun.naming.internal.ResourceManager: java.util.WeakHashMap urlFactoryCache> = $r4;
        $r5 = new java.lang.ref.WeakReference;
        specialinvoke $r5.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(null);
        <com.sun.naming.internal.ResourceManager: java.lang.ref.WeakReference NO_FACTORY> = $r5;
        return;
    }
}
