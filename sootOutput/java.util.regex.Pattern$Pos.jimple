final class java.util.regex.Pattern$Pos extends java.util.regex.Pattern$Node
{
    java.util.regex.Pattern$Node cond;

    void <init>(java.util.regex.Pattern$Node)
    {
        java.util.regex.Pattern$Pos r0;
        java.util.regex.Pattern$Node r1;

        r0 := @this: java.util.regex.Pattern$Pos;
        r1 := @parameter0: java.util.regex.Pattern$Node;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        r0.<java.util.regex.Pattern$Pos: java.util.regex.Pattern$Node cond> = r1;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$Pos r0;
        java.util.regex.Matcher r1;
        int i0, i1, $i2;
        java.lang.CharSequence r2;
        boolean z0, $z1, z2, $z3, $z4;
        java.lang.Throwable r3, $r5;
        java.util.regex.Pattern$Node $r4, $r6;

        r0 := @this: java.util.regex.Pattern$Pos;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        i1 = r1.<java.util.regex.Matcher: int 'to'>;
        z0 = 0;
        $z1 = r1.<java.util.regex.Matcher: boolean transparentBounds>;
        if $z1 == 0 goto label0;

        $i2 = virtualinvoke r1.<java.util.regex.Matcher: int getTextLength()>();
        r1.<java.util.regex.Matcher: int 'to'> = $i2;

     label0:
        $r4 = r0.<java.util.regex.Pattern$Pos: java.util.regex.Pattern$Node cond>;
        z2 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);

     label1:
        r1.<java.util.regex.Matcher: int 'to'> = i1;
        goto label5;

     label2:
        $r5 := @caughtexception;

     label3:
        r3 = $r5;

     label4:
        r1.<java.util.regex.Matcher: int 'to'> = i1;
        throw r3;

     label5:
        if z2 == 0 goto label6;

        $r6 = r0.<java.util.regex.Pattern$Pos: java.util.regex.Pattern$Node next>;
        $z3 = virtualinvoke $r6.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z3 == 0 goto label6;

        $z4 = 1;
        goto label7;

     label6:
        $z4 = 0;

     label7:
        return $z4;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
}
