class sun.misc.SoftCache$ValueCell extends java.lang.ref.SoftReference
{
    private static java.lang.Object INVALID_KEY;
    private static int dropped;
    private java.lang.Object key;

    private void <init>(java.lang.Object, java.lang.Object, java.lang.ref.ReferenceQueue)
    {
        sun.misc.SoftCache$ValueCell r0;
        java.lang.Object r1, r2;
        java.lang.ref.ReferenceQueue r3;

        r0 := @this: sun.misc.SoftCache$ValueCell;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        r3 := @parameter2: java.lang.ref.ReferenceQueue;
        specialinvoke r0.<java.lang.ref.SoftReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r2, r3);
        r0.<sun.misc.SoftCache$ValueCell: java.lang.Object key> = r1;
        return;
    }

    private static sun.misc.SoftCache$ValueCell create(java.lang.Object, java.lang.Object, java.lang.ref.ReferenceQueue)
    {
        java.lang.Object r0, r1;
        java.lang.ref.ReferenceQueue r2;
        sun.misc.SoftCache$ValueCell $r3;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.lang.ref.ReferenceQueue;
        if r1 != null goto label0;

        return null;

     label0:
        $r3 = new sun.misc.SoftCache$ValueCell;
        specialinvoke $r3.<sun.misc.SoftCache$ValueCell: void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue)>(r0, r1, r2);
        return $r3;
    }

    private static java.lang.Object strip(java.lang.Object, boolean)
    {
        java.lang.Object r0, r2;
        boolean z0;
        sun.misc.SoftCache$ValueCell r1;

        r0 := @parameter0: java.lang.Object;
        z0 := @parameter1: boolean;
        if r0 != null goto label0;

        return null;

     label0:
        r1 = (sun.misc.SoftCache$ValueCell) r0;
        r2 = virtualinvoke r1.<sun.misc.SoftCache$ValueCell: java.lang.Object get()>();
        if z0 == 0 goto label1;

        specialinvoke r1.<sun.misc.SoftCache$ValueCell: void drop()>();

     label1:
        return r2;
    }

    private boolean isValid()
    {
        sun.misc.SoftCache$ValueCell r0;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: sun.misc.SoftCache$ValueCell;
        $r2 = r0.<sun.misc.SoftCache$ValueCell: java.lang.Object key>;
        $r1 = <sun.misc.SoftCache$ValueCell: java.lang.Object INVALID_KEY>;
        if $r2 == $r1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private void drop()
    {
        sun.misc.SoftCache$ValueCell r0;
        java.lang.Object $r1;
        int $i0, $i1;

        r0 := @this: sun.misc.SoftCache$ValueCell;
        specialinvoke r0.<java.lang.ref.SoftReference: void clear()>();
        $r1 = <sun.misc.SoftCache$ValueCell: java.lang.Object INVALID_KEY>;
        r0.<sun.misc.SoftCache$ValueCell: java.lang.Object key> = $r1;
        $i0 = <sun.misc.SoftCache$ValueCell: int dropped>;
        $i1 = $i0 + 1;
        <sun.misc.SoftCache$ValueCell: int dropped> = $i1;
        return;
    }

    static boolean access$000(sun.misc.SoftCache$ValueCell)
    {
        sun.misc.SoftCache$ValueCell r0;
        boolean $z0;

        r0 := @parameter0: sun.misc.SoftCache$ValueCell;
        $z0 = specialinvoke r0.<sun.misc.SoftCache$ValueCell: boolean isValid()>();
        return $z0;
    }

    static java.lang.Object access$100(sun.misc.SoftCache$ValueCell)
    {
        sun.misc.SoftCache$ValueCell r0;
        java.lang.Object $r1;

        r0 := @parameter0: sun.misc.SoftCache$ValueCell;
        $r1 = r0.<sun.misc.SoftCache$ValueCell: java.lang.Object key>;
        return $r1;
    }

    static int access$210()
    {
        int $i0, $i1;

        $i0 = <sun.misc.SoftCache$ValueCell: int dropped>;
        $i1 = $i0 - 1;
        <sun.misc.SoftCache$ValueCell: int dropped> = $i1;
        return $i0;
    }

    static java.lang.Object access$300(java.lang.Object, boolean)
    {
        java.lang.Object r0, $r1;
        boolean z0;

        r0 := @parameter0: java.lang.Object;
        z0 := @parameter1: boolean;
        $r1 = staticinvoke <sun.misc.SoftCache$ValueCell: java.lang.Object strip(java.lang.Object,boolean)>(r0, z0);
        return $r1;
    }

    static sun.misc.SoftCache$ValueCell access$400(java.lang.Object, java.lang.Object, java.lang.ref.ReferenceQueue)
    {
        java.lang.Object r0, r1;
        java.lang.ref.ReferenceQueue r2;
        sun.misc.SoftCache$ValueCell $r3;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.lang.ref.ReferenceQueue;
        $r3 = staticinvoke <sun.misc.SoftCache$ValueCell: sun.misc.SoftCache$ValueCell create(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue)>(r0, r1, r2);
        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;
        specialinvoke $r0.<java.lang.Object: void <init>()>();
        <sun.misc.SoftCache$ValueCell: java.lang.Object INVALID_KEY> = $r0;
        <sun.misc.SoftCache$ValueCell: int dropped> = 0;
        return;
    }
}
