public class org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap extends java.util.AbstractMap implements java.util.concurrent.ConcurrentMap
{
    private final java.util.concurrent.ConcurrentMap map;
    private final java.lang.ref.ReferenceQueue queue;

    public void <init>()
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.lang.ref.ReferenceQueue $r2;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        specialinvoke r0.<java.util.AbstractMap: void <init>()>();
        $r1 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
        r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.util.concurrent.ConcurrentMap map> = $r1;
        $r2 = new java.lang.ref.ReferenceQueue;
        specialinvoke $r2.<java.lang.ref.ReferenceQueue: void <init>()>();
        r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.lang.ref.ReferenceQueue queue> = $r2;
        return;
    }

    public void maintain()
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key r1, $r6;
        boolean $z0;
        java.util.concurrent.ConcurrentMap $r2;
        java.lang.ref.ReferenceQueue $r4;
        java.lang.ref.Reference $r5;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        goto label2;

     label0:
        $z0 = virtualinvoke r1.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key: boolean isDead()>();
        if $z0 == 0 goto label1;

        goto label2;

     label1:
        virtualinvoke r1.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key: void ackDeath()>();
        $r2 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.util.concurrent.ConcurrentMap map>;
        interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(r1);

     label2:
        $r4 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.lang.ref.ReferenceQueue queue>;
        $r5 = virtualinvoke $r4.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();
        $r6 = (org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key) $r5;
        r1 = $r6;
        if $r6 != null goto label0;

        return;
    }

    private org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key createStoreKey(java.lang.Object)
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        java.lang.Object r1;
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key $r2;
        java.lang.ref.ReferenceQueue $r3;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = new org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key;
        $r3 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.lang.ref.ReferenceQueue queue>;
        specialinvoke $r2.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r1, $r3);
        return $r2;
    }

    private org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key createLookupKey(java.lang.Object)
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        java.lang.Object r1;
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key $r2;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = new org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key;
        specialinvoke $r2.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r1, null);
        return $r2;
    }

    private static void checkNotNull(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.NullPointerException $r1;

        r0 := @parameter0: java.lang.Object;
        if r0 != null goto label0;

        $r1 = new java.lang.NullPointerException;
        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();
        throw $r1;

     label0:
        return;
    }

    public int size()
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        java.util.concurrent.ConcurrentMap $r1;
        int $i0;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        $r1 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.util.concurrent.ConcurrentMap map>;
        $i0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: int size()>();
        return $i0;
    }

    public boolean isEmpty()
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        java.util.concurrent.ConcurrentMap $r1;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        $r1 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.util.concurrent.ConcurrentMap map>;
        $z0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();
        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        java.lang.Object r1;
        java.util.concurrent.ConcurrentMap $r2;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        return 0;

     label0:
        $r2 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.util.concurrent.ConcurrentMap map>;
        $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsValue(java.lang.Object)>(r1);
        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        java.lang.Object r1;
        java.util.concurrent.ConcurrentMap $r2;
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key $r3;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        return 0;

     label0:
        $r2 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.util.concurrent.ConcurrentMap map>;
        $r3 = specialinvoke r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key createLookupKey(java.lang.Object)>(r1);
        $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>($r3);
        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        java.lang.Object r1, $r4;
        java.util.concurrent.ConcurrentMap $r2;
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key $r3;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        return null;

     label0:
        $r2 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.util.concurrent.ConcurrentMap map>;
        $r3 = specialinvoke r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key createLookupKey(java.lang.Object)>(r1);
        $r4 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r3);
        return $r4;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        java.lang.Object r1, r2, $r5;
        java.util.concurrent.ConcurrentMap $r3;
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key $r4;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        staticinvoke <org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: void checkNotNull(java.lang.Object)>(r2);
        $r3 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.util.concurrent.ConcurrentMap map>;
        $r4 = specialinvoke r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key createStoreKey(java.lang.Object)>(r1);
        $r5 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r2);
        return $r5;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        java.lang.Object r1, $r4;
        java.util.concurrent.ConcurrentMap $r2;
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key $r3;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.util.concurrent.ConcurrentMap map>;
        $r3 = specialinvoke r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key createLookupKey(java.lang.Object)>(r1);
        $r4 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r3);
        return $r4;
    }

    public void clear()
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        $r1 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.util.concurrent.ConcurrentMap map>;
        interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: void clear()>();
        virtualinvoke r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: void maintain()>();
        return;
    }

    public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        java.lang.Object r1, r2, r4;
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key r3;
        java.util.concurrent.ConcurrentMap $r5;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        staticinvoke <org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: void checkNotNull(java.lang.Object)>(r2);
        r3 = specialinvoke r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key createStoreKey(java.lang.Object)>(r1);
        $r5 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.util.concurrent.ConcurrentMap map>;
        r4 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r3, r2);
        if r4 == null goto label0;

        virtualinvoke r3.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key: void ackDeath()>();

     label0:
        return r4;
    }

    public boolean remove(java.lang.Object, java.lang.Object)
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        java.lang.Object r1, r2;
        java.util.concurrent.ConcurrentMap $r3;
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key $r4;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        if r2 != null goto label0;

        return 0;

     label0:
        $r3 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.util.concurrent.ConcurrentMap map>;
        $r4 = specialinvoke r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key createLookupKey(java.lang.Object)>(r1);
        $z0 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>($r4, r2);
        return $z0;
    }

    public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        java.lang.Object r1, r2, r3;
        java.util.concurrent.ConcurrentMap $r4;
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key $r5;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        r3 := @parameter2: java.lang.Object;
        staticinvoke <org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: void checkNotNull(java.lang.Object)>(r3);
        $r4 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.util.concurrent.ConcurrentMap map>;
        $r5 = specialinvoke r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key createLookupKey(java.lang.Object)>(r1);
        $z0 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, r2, r3);
        return $z0;
    }

    public java.lang.Object replace(java.lang.Object, java.lang.Object)
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        java.lang.Object r1, r2, $r5;
        java.util.concurrent.ConcurrentMap $r3;
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key $r4;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        staticinvoke <org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: void checkNotNull(java.lang.Object)>(r2);
        $r3 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.util.concurrent.ConcurrentMap map>;
        $r4 = specialinvoke r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key createLookupKey(java.lang.Object)>(r1);
        $r5 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>($r4, r2);
        return $r5;
    }

    public java.util.Collection values()
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        java.util.concurrent.ConcurrentMap $r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        $r1 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.util.concurrent.ConcurrentMap map>;
        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
        return $r2;
    }

    public java.util.Set entrySet()
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1 $r1;

        r0 := @this: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        $r1 = new org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1;
        specialinvoke $r1.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1: void <init>(org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap)>(r0);
        return $r1;
    }

    static java.util.concurrent.ConcurrentMap access$0(org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap)
    {
        org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @parameter0: org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap;
        $r1 = r0.<org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: java.util.concurrent.ConcurrentMap map>;
        return $r1;
    }

    static void access$1(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;
        staticinvoke <org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap: void checkNotNull(java.lang.Object)>(r0);
        return;
    }
}
