class java.util.regex.Pattern$Start extends java.util.regex.Pattern$Node
{
    int minLength;

    void <init>(java.util.regex.Pattern$Node)
    {
        java.util.regex.Pattern$Start r0;
        java.util.regex.Pattern$Node r1, $r4;
        java.util.regex.Pattern$TreeInfo r2, $r3;
        int $i0;

        r0 := @this: java.util.regex.Pattern$Start;
        r1 := @parameter0: java.util.regex.Pattern$Node;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        r0.<java.util.regex.Pattern$Start: java.util.regex.Pattern$Node next> = r1;
        $r3 = new java.util.regex.Pattern$TreeInfo;
        specialinvoke $r3.<java.util.regex.Pattern$TreeInfo: void <init>()>();
        r2 = $r3;
        $r4 = r0.<java.util.regex.Pattern$Start: java.util.regex.Pattern$Node next>;
        virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r2);
        $i0 = r2.<java.util.regex.Pattern$TreeInfo: int minLength>;
        r0.<java.util.regex.Pattern$Start: int minLength> = $i0;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$Start r0;
        java.util.regex.Matcher r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.CharSequence r2;
        java.util.regex.Pattern$Node $r3;
        boolean $z0;
        int[] $r4, $r5;

        r0 := @this: java.util.regex.Pattern$Start;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $i2 = r1.<java.util.regex.Matcher: int 'to'>;
        $i3 = r0.<java.util.regex.Pattern$Start: int minLength>;
        $i4 = $i2 - $i3;
        if i0 <= $i4 goto label0;

        r1.<java.util.regex.Matcher: boolean hitEnd> = 1;
        return 0;

     label0:
        $i5 = r1.<java.util.regex.Matcher: int 'to'>;
        $i6 = r0.<java.util.regex.Pattern$Start: int minLength>;
        i1 = $i5 - $i6;

     label1:
        if i0 > i1 goto label3;

        $r3 = r0.<java.util.regex.Pattern$Start: java.util.regex.Pattern$Node next>;
        $z0 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z0 == 0 goto label2;

        r1.<java.util.regex.Matcher: int first> = i0;
        $r4 = r1.<java.util.regex.Matcher: int[] groups>;
        $i7 = r1.<java.util.regex.Matcher: int first>;
        $r4[0] = $i7;
        $r5 = r1.<java.util.regex.Matcher: int[] groups>;
        $i8 = r1.<java.util.regex.Matcher: int last>;
        $r5[1] = $i8;
        return 1;

     label2:
        i0 = i0 + 1;
        goto label1;

     label3:
        r1.<java.util.regex.Matcher: boolean hitEnd> = 1;
        return 0;
    }

    boolean study(java.util.regex.Pattern$TreeInfo)
    {
        java.util.regex.Pattern$Start r0;
        java.util.regex.Pattern$TreeInfo r1;
        java.util.regex.Pattern$Node $r2;

        r0 := @this: java.util.regex.Pattern$Start;
        r1 := @parameter0: java.util.regex.Pattern$TreeInfo;
        $r2 = r0.<java.util.regex.Pattern$Start: java.util.regex.Pattern$Node next>;
        virtualinvoke $r2.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid> = 0;
        r1.<java.util.regex.Pattern$TreeInfo: boolean deterministic> = 0;
        return 0;
    }
}
