class java.nio.DirectByteBufferR extends java.nio.DirectByteBuffer implements sun.nio.ch.DirectBuffer
{
    static final boolean $assertionsDisabled;

    void <init>(int)
    {
        java.nio.DirectByteBufferR r0;
        int i0;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 := @parameter0: int;
        specialinvoke r0.<java.nio.DirectByteBuffer: void <init>(int)>(i0);
        return;
    }

    protected void <init>(int, long, java.io.FileDescriptor, java.lang.Runnable)
    {
        java.nio.DirectByteBufferR r0;
        int i0;
        long l1;
        java.io.FileDescriptor r1;
        java.lang.Runnable r2;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 := @parameter0: int;
        l1 := @parameter1: long;
        r1 := @parameter2: java.io.FileDescriptor;
        r2 := @parameter3: java.lang.Runnable;
        specialinvoke r0.<java.nio.DirectByteBuffer: void <init>(int,long,java.io.FileDescriptor,java.lang.Runnable)>(i0, l1, r1, r2);
        return;
    }

    void <init>(sun.nio.ch.DirectBuffer, int, int, int, int, int)
    {
        java.nio.DirectByteBufferR r0;
        sun.nio.ch.DirectBuffer r1;
        int i0, i1, i2, i3, i4;

        r0 := @this: java.nio.DirectByteBufferR;
        r1 := @parameter0: sun.nio.ch.DirectBuffer;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        specialinvoke r0.<java.nio.DirectByteBuffer: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r1, i0, i1, i2, i3, i4);
        return;
    }

    public java.nio.ByteBuffer slice()
    {
        java.nio.DirectByteBufferR r0, $r3;
        int i0, i1, i2, i3, $i4;
        boolean $z0, $z1;
        java.lang.AssertionError $r1, $r2;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 = virtualinvoke r0.<java.nio.DirectByteBufferR: int position()>();
        i1 = virtualinvoke r0.<java.nio.DirectByteBufferR: int limit()>();
        $z0 = <java.nio.DirectByteBufferR: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label0:
        if i0 > i1 goto label1;

        $i4 = i1 - i0;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i2 = $i4;
        i3 = i0 << 0;
        $z1 = <java.nio.DirectByteBufferR: boolean $assertionsDisabled>;
        if $z1 != 0 goto label3;

        if i3 >= 0 goto label3;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label3:
        $r3 = new java.nio.DirectByteBufferR;
        specialinvoke $r3.<java.nio.DirectByteBufferR: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i2, i2, i3);
        return $r3;
    }

    public java.nio.ByteBuffer duplicate()
    {
        java.nio.DirectByteBufferR r0, $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.nio.DirectByteBufferR;
        $r1 = new java.nio.DirectByteBufferR;
        $i0 = virtualinvoke r0.<java.nio.DirectByteBufferR: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.DirectByteBufferR: int position()>();
        $i2 = virtualinvoke r0.<java.nio.DirectByteBufferR: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.DirectByteBufferR: int capacity()>();
        specialinvoke $r1.<java.nio.DirectByteBufferR: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, $i0, $i1, $i2, $i3, 0);
        return $r1;
    }

    public java.nio.ByteBuffer asReadOnlyBuffer()
    {
        java.nio.DirectByteBufferR r0;
        java.nio.ByteBuffer $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        $r1 = virtualinvoke r0.<java.nio.DirectByteBufferR: java.nio.ByteBuffer duplicate()>();
        return $r1;
    }

    public java.nio.ByteBuffer put(byte)
    {
        java.nio.DirectByteBufferR r0;
        byte b0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        b0 := @parameter0: byte;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer put(int, byte)
    {
        java.nio.DirectByteBufferR r0;
        int i0;
        byte b1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 := @parameter0: int;
        b1 := @parameter1: byte;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer put(java.nio.ByteBuffer)
    {
        java.nio.DirectByteBufferR r0;
        java.nio.ByteBuffer r1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.DirectByteBufferR;
        r1 := @parameter0: java.nio.ByteBuffer;
        $r2 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r2;
    }

    public java.nio.ByteBuffer put(byte[], int, int)
    {
        java.nio.DirectByteBufferR r0;
        byte[] r1;
        int i0, i1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.DirectByteBufferR;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r2;
    }

    public java.nio.ByteBuffer compact()
    {
        java.nio.DirectByteBufferR r0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public boolean isDirect()
    {
        java.nio.DirectByteBufferR r0;

        r0 := @this: java.nio.DirectByteBufferR;
        return 1;
    }

    public boolean isReadOnly()
    {
        java.nio.DirectByteBufferR r0;

        r0 := @this: java.nio.DirectByteBufferR;
        return 1;
    }

    byte _get(int)
    {
        java.nio.DirectByteBufferR r0;
        int i0;
        sun.misc.Unsafe $r1;
        long $l1, $l2, $l3;
        byte $b4;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 := @parameter0: int;
        $r1 = <java.nio.DirectByteBufferR: sun.misc.Unsafe unsafe>;
        $l1 = r0.<java.nio.DirectByteBufferR: long address>;
        $l2 = (long) i0;
        $l3 = $l1 + $l2;
        $b4 = virtualinvoke $r1.<sun.misc.Unsafe: byte getByte(long)>($l3);
        return $b4;
    }

    void _put(int, byte)
    {
        java.nio.DirectByteBufferR r0;
        int i0;
        byte b1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 := @parameter0: int;
        b1 := @parameter1: byte;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    private java.nio.ByteBuffer putChar(long, char)
    {
        java.nio.DirectByteBufferR r0;
        long l0;
        char c1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        l0 := @parameter0: long;
        c1 := @parameter1: char;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putChar(char)
    {
        java.nio.DirectByteBufferR r0;
        char c0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        c0 := @parameter0: char;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putChar(int, char)
    {
        java.nio.DirectByteBufferR r0;
        int i0;
        char c1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 := @parameter0: int;
        c1 := @parameter1: char;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.CharBuffer asCharBuffer()
    {
        java.nio.DirectByteBufferR r0;
        int i0, i1, i2, i3, $i4;
        boolean $z0, $z1, $z2, $z3;
        long $l5, $l6, $l7, $l8;
        byte $b9;
        java.nio.CharBuffer $r2, $r3;
        java.lang.AssertionError r4;
        java.nio.ByteBufferAsCharBufferRB r5;
        java.nio.ByteBufferAsCharBufferRL r6;
        java.nio.DirectCharBufferRU r7;
        java.nio.DirectCharBufferRS r8;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 = virtualinvoke r0.<java.nio.DirectByteBufferR: int position()>();
        i1 = virtualinvoke r0.<java.nio.DirectByteBufferR: int limit()>();
        $z0 = <java.nio.DirectByteBufferR: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        r4 = new java.lang.AssertionError;
        specialinvoke r4.<java.lang.AssertionError: void <init>()>();
        throw r4;

     label0:
        if i0 > i1 goto label1;

        $i4 = i1 - i0;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i2 = $i4;
        i3 = i2 >> 1;
        $z1 = <java.nio.DirectByteBufferR: boolean unaligned>;
        if $z1 != 0 goto label5;

        $l5 = r0.<java.nio.DirectByteBufferR: long address>;
        $l6 = (long) i0;
        $l7 = $l5 + $l6;
        $l8 = $l7 % 2L;
        $b9 = $l8 cmp 0L;
        if $b9 == 0 goto label5;

        $z2 = r0.<java.nio.DirectByteBufferR: boolean bigEndian>;
        if $z2 == 0 goto label3;

        r5 = new java.nio.ByteBufferAsCharBufferRB;
        $r2 = r5;
        specialinvoke r5.<java.nio.ByteBufferAsCharBufferRB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label4;

     label3:
        r6 = new java.nio.ByteBufferAsCharBufferRL;
        $r2 = r6;
        specialinvoke r6.<java.nio.ByteBufferAsCharBufferRL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label4:
        return $r2;

     label5:
        $z3 = r0.<java.nio.DirectByteBufferR: boolean nativeByteOrder>;
        if $z3 == 0 goto label6;

        r7 = new java.nio.DirectCharBufferRU;
        $r3 = r7;
        specialinvoke r7.<java.nio.DirectCharBufferRU: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label7;

     label6:
        r8 = new java.nio.DirectCharBufferRS;
        $r3 = r8;
        specialinvoke r8.<java.nio.DirectCharBufferRS: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label7:
        return $r3;
    }

    private java.nio.ByteBuffer putShort(long, short)
    {
        java.nio.DirectByteBufferR r0;
        long l0;
        short s1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        l0 := @parameter0: long;
        s1 := @parameter1: short;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putShort(short)
    {
        java.nio.DirectByteBufferR r0;
        short s0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        s0 := @parameter0: short;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putShort(int, short)
    {
        java.nio.DirectByteBufferR r0;
        int i0;
        short s1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 := @parameter0: int;
        s1 := @parameter1: short;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ShortBuffer asShortBuffer()
    {
        java.nio.DirectByteBufferR r0;
        int i0, i1, i2, i3, $i4;
        boolean $z0, $z1, $z2, $z3;
        long $l5, $l6, $l7, $l8;
        byte $b9;
        java.nio.ShortBuffer $r2, $r3;
        java.lang.AssertionError r4;
        java.nio.ByteBufferAsShortBufferRB r5;
        java.nio.ByteBufferAsShortBufferRL r6;
        java.nio.DirectShortBufferRU r7;
        java.nio.DirectShortBufferRS r8;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 = virtualinvoke r0.<java.nio.DirectByteBufferR: int position()>();
        i1 = virtualinvoke r0.<java.nio.DirectByteBufferR: int limit()>();
        $z0 = <java.nio.DirectByteBufferR: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        r4 = new java.lang.AssertionError;
        specialinvoke r4.<java.lang.AssertionError: void <init>()>();
        throw r4;

     label0:
        if i0 > i1 goto label1;

        $i4 = i1 - i0;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i2 = $i4;
        i3 = i2 >> 1;
        $z1 = <java.nio.DirectByteBufferR: boolean unaligned>;
        if $z1 != 0 goto label5;

        $l5 = r0.<java.nio.DirectByteBufferR: long address>;
        $l6 = (long) i0;
        $l7 = $l5 + $l6;
        $l8 = $l7 % 2L;
        $b9 = $l8 cmp 0L;
        if $b9 == 0 goto label5;

        $z2 = r0.<java.nio.DirectByteBufferR: boolean bigEndian>;
        if $z2 == 0 goto label3;

        r5 = new java.nio.ByteBufferAsShortBufferRB;
        $r2 = r5;
        specialinvoke r5.<java.nio.ByteBufferAsShortBufferRB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label4;

     label3:
        r6 = new java.nio.ByteBufferAsShortBufferRL;
        $r2 = r6;
        specialinvoke r6.<java.nio.ByteBufferAsShortBufferRL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label4:
        return $r2;

     label5:
        $z3 = r0.<java.nio.DirectByteBufferR: boolean nativeByteOrder>;
        if $z3 == 0 goto label6;

        r7 = new java.nio.DirectShortBufferRU;
        $r3 = r7;
        specialinvoke r7.<java.nio.DirectShortBufferRU: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label7;

     label6:
        r8 = new java.nio.DirectShortBufferRS;
        $r3 = r8;
        specialinvoke r8.<java.nio.DirectShortBufferRS: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label7:
        return $r3;
    }

    private java.nio.ByteBuffer putInt(long, int)
    {
        java.nio.DirectByteBufferR r0;
        long l0;
        int i1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        l0 := @parameter0: long;
        i1 := @parameter1: int;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putInt(int)
    {
        java.nio.DirectByteBufferR r0;
        int i0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 := @parameter0: int;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putInt(int, int)
    {
        java.nio.DirectByteBufferR r0;
        int i0, i1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.IntBuffer asIntBuffer()
    {
        java.nio.DirectByteBufferR r0;
        int i0, i1, i2, i3, $i4;
        boolean $z0, $z1, $z2, $z3;
        long $l5, $l6, $l7, $l8;
        byte $b9;
        java.nio.IntBuffer $r2, $r3;
        java.lang.AssertionError r4;
        java.nio.ByteBufferAsIntBufferRB r5;
        java.nio.ByteBufferAsIntBufferRL r6;
        java.nio.DirectIntBufferRU r7;
        java.nio.DirectIntBufferRS r8;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 = virtualinvoke r0.<java.nio.DirectByteBufferR: int position()>();
        i1 = virtualinvoke r0.<java.nio.DirectByteBufferR: int limit()>();
        $z0 = <java.nio.DirectByteBufferR: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        r4 = new java.lang.AssertionError;
        specialinvoke r4.<java.lang.AssertionError: void <init>()>();
        throw r4;

     label0:
        if i0 > i1 goto label1;

        $i4 = i1 - i0;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i2 = $i4;
        i3 = i2 >> 2;
        $z1 = <java.nio.DirectByteBufferR: boolean unaligned>;
        if $z1 != 0 goto label5;

        $l5 = r0.<java.nio.DirectByteBufferR: long address>;
        $l6 = (long) i0;
        $l7 = $l5 + $l6;
        $l8 = $l7 % 4L;
        $b9 = $l8 cmp 0L;
        if $b9 == 0 goto label5;

        $z2 = r0.<java.nio.DirectByteBufferR: boolean bigEndian>;
        if $z2 == 0 goto label3;

        r5 = new java.nio.ByteBufferAsIntBufferRB;
        $r2 = r5;
        specialinvoke r5.<java.nio.ByteBufferAsIntBufferRB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label4;

     label3:
        r6 = new java.nio.ByteBufferAsIntBufferRL;
        $r2 = r6;
        specialinvoke r6.<java.nio.ByteBufferAsIntBufferRL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label4:
        return $r2;

     label5:
        $z3 = r0.<java.nio.DirectByteBufferR: boolean nativeByteOrder>;
        if $z3 == 0 goto label6;

        r7 = new java.nio.DirectIntBufferRU;
        $r3 = r7;
        specialinvoke r7.<java.nio.DirectIntBufferRU: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label7;

     label6:
        r8 = new java.nio.DirectIntBufferRS;
        $r3 = r8;
        specialinvoke r8.<java.nio.DirectIntBufferRS: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label7:
        return $r3;
    }

    private java.nio.ByteBuffer putLong(long, long)
    {
        java.nio.DirectByteBufferR r0;
        long l0, l1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putLong(long)
    {
        java.nio.DirectByteBufferR r0;
        long l0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        l0 := @parameter0: long;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putLong(int, long)
    {
        java.nio.DirectByteBufferR r0;
        int i0;
        long l1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 := @parameter0: int;
        l1 := @parameter1: long;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.LongBuffer asLongBuffer()
    {
        java.nio.DirectByteBufferR r0;
        int i0, i1, i2, i3, $i4;
        boolean $z0, $z1, $z2, $z3;
        long $l5, $l6, $l7, $l8;
        byte $b9;
        java.nio.LongBuffer $r2, $r3;
        java.lang.AssertionError r4;
        java.nio.ByteBufferAsLongBufferRB r5;
        java.nio.ByteBufferAsLongBufferRL r6;
        java.nio.DirectLongBufferRU r7;
        java.nio.DirectLongBufferRS r8;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 = virtualinvoke r0.<java.nio.DirectByteBufferR: int position()>();
        i1 = virtualinvoke r0.<java.nio.DirectByteBufferR: int limit()>();
        $z0 = <java.nio.DirectByteBufferR: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        r4 = new java.lang.AssertionError;
        specialinvoke r4.<java.lang.AssertionError: void <init>()>();
        throw r4;

     label0:
        if i0 > i1 goto label1;

        $i4 = i1 - i0;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i2 = $i4;
        i3 = i2 >> 3;
        $z1 = <java.nio.DirectByteBufferR: boolean unaligned>;
        if $z1 != 0 goto label5;

        $l5 = r0.<java.nio.DirectByteBufferR: long address>;
        $l6 = (long) i0;
        $l7 = $l5 + $l6;
        $l8 = $l7 % 8L;
        $b9 = $l8 cmp 0L;
        if $b9 == 0 goto label5;

        $z2 = r0.<java.nio.DirectByteBufferR: boolean bigEndian>;
        if $z2 == 0 goto label3;

        r5 = new java.nio.ByteBufferAsLongBufferRB;
        $r2 = r5;
        specialinvoke r5.<java.nio.ByteBufferAsLongBufferRB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label4;

     label3:
        r6 = new java.nio.ByteBufferAsLongBufferRL;
        $r2 = r6;
        specialinvoke r6.<java.nio.ByteBufferAsLongBufferRL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label4:
        return $r2;

     label5:
        $z3 = r0.<java.nio.DirectByteBufferR: boolean nativeByteOrder>;
        if $z3 == 0 goto label6;

        r7 = new java.nio.DirectLongBufferRU;
        $r3 = r7;
        specialinvoke r7.<java.nio.DirectLongBufferRU: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label7;

     label6:
        r8 = new java.nio.DirectLongBufferRS;
        $r3 = r8;
        specialinvoke r8.<java.nio.DirectLongBufferRS: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label7:
        return $r3;
    }

    private java.nio.ByteBuffer putFloat(long, float)
    {
        java.nio.DirectByteBufferR r0;
        long l0;
        float f0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        l0 := @parameter0: long;
        f0 := @parameter1: float;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putFloat(float)
    {
        java.nio.DirectByteBufferR r0;
        float f0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        f0 := @parameter0: float;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putFloat(int, float)
    {
        java.nio.DirectByteBufferR r0;
        int i0;
        float f0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.FloatBuffer asFloatBuffer()
    {
        java.nio.DirectByteBufferR r0;
        int i0, i1, i2, i3, $i4;
        boolean $z0, $z1, $z2, $z3;
        long $l5, $l6, $l7, $l8;
        byte $b9;
        java.nio.FloatBuffer $r2, $r3;
        java.lang.AssertionError r4;
        java.nio.ByteBufferAsFloatBufferRB r5;
        java.nio.ByteBufferAsFloatBufferRL r6;
        java.nio.DirectFloatBufferRU r7;
        java.nio.DirectFloatBufferRS r8;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 = virtualinvoke r0.<java.nio.DirectByteBufferR: int position()>();
        i1 = virtualinvoke r0.<java.nio.DirectByteBufferR: int limit()>();
        $z0 = <java.nio.DirectByteBufferR: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        r4 = new java.lang.AssertionError;
        specialinvoke r4.<java.lang.AssertionError: void <init>()>();
        throw r4;

     label0:
        if i0 > i1 goto label1;

        $i4 = i1 - i0;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i2 = $i4;
        i3 = i2 >> 2;
        $z1 = <java.nio.DirectByteBufferR: boolean unaligned>;
        if $z1 != 0 goto label5;

        $l5 = r0.<java.nio.DirectByteBufferR: long address>;
        $l6 = (long) i0;
        $l7 = $l5 + $l6;
        $l8 = $l7 % 4L;
        $b9 = $l8 cmp 0L;
        if $b9 == 0 goto label5;

        $z2 = r0.<java.nio.DirectByteBufferR: boolean bigEndian>;
        if $z2 == 0 goto label3;

        r5 = new java.nio.ByteBufferAsFloatBufferRB;
        $r2 = r5;
        specialinvoke r5.<java.nio.ByteBufferAsFloatBufferRB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label4;

     label3:
        r6 = new java.nio.ByteBufferAsFloatBufferRL;
        $r2 = r6;
        specialinvoke r6.<java.nio.ByteBufferAsFloatBufferRL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label4:
        return $r2;

     label5:
        $z3 = r0.<java.nio.DirectByteBufferR: boolean nativeByteOrder>;
        if $z3 == 0 goto label6;

        r7 = new java.nio.DirectFloatBufferRU;
        $r3 = r7;
        specialinvoke r7.<java.nio.DirectFloatBufferRU: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label7;

     label6:
        r8 = new java.nio.DirectFloatBufferRS;
        $r3 = r8;
        specialinvoke r8.<java.nio.DirectFloatBufferRS: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label7:
        return $r3;
    }

    private java.nio.ByteBuffer putDouble(long, double)
    {
        java.nio.DirectByteBufferR r0;
        long l0;
        double d0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        l0 := @parameter0: long;
        d0 := @parameter1: double;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putDouble(double)
    {
        java.nio.DirectByteBufferR r0;
        double d0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        d0 := @parameter0: double;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putDouble(int, double)
    {
        java.nio.DirectByteBufferR r0;
        int i0;
        double d0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 := @parameter0: int;
        d0 := @parameter1: double;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.DoubleBuffer asDoubleBuffer()
    {
        java.nio.DirectByteBufferR r0;
        int i0, i1, i2, i3, $i4;
        boolean $z0, $z1, $z2, $z3;
        long $l5, $l6, $l7, $l8;
        byte $b9;
        java.nio.DoubleBuffer $r2, $r3;
        java.lang.AssertionError r4;
        java.nio.ByteBufferAsDoubleBufferRB r5;
        java.nio.ByteBufferAsDoubleBufferRL r6;
        java.nio.DirectDoubleBufferRU r7;
        java.nio.DirectDoubleBufferRS r8;

        r0 := @this: java.nio.DirectByteBufferR;
        i0 = virtualinvoke r0.<java.nio.DirectByteBufferR: int position()>();
        i1 = virtualinvoke r0.<java.nio.DirectByteBufferR: int limit()>();
        $z0 = <java.nio.DirectByteBufferR: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        r4 = new java.lang.AssertionError;
        specialinvoke r4.<java.lang.AssertionError: void <init>()>();
        throw r4;

     label0:
        if i0 > i1 goto label1;

        $i4 = i1 - i0;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i2 = $i4;
        i3 = i2 >> 3;
        $z1 = <java.nio.DirectByteBufferR: boolean unaligned>;
        if $z1 != 0 goto label5;

        $l5 = r0.<java.nio.DirectByteBufferR: long address>;
        $l6 = (long) i0;
        $l7 = $l5 + $l6;
        $l8 = $l7 % 8L;
        $b9 = $l8 cmp 0L;
        if $b9 == 0 goto label5;

        $z2 = r0.<java.nio.DirectByteBufferR: boolean bigEndian>;
        if $z2 == 0 goto label3;

        r5 = new java.nio.ByteBufferAsDoubleBufferRB;
        $r2 = r5;
        specialinvoke r5.<java.nio.ByteBufferAsDoubleBufferRB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label4;

     label3:
        r6 = new java.nio.ByteBufferAsDoubleBufferRL;
        $r2 = r6;
        specialinvoke r6.<java.nio.ByteBufferAsDoubleBufferRL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label4:
        return $r2;

     label5:
        $z3 = r0.<java.nio.DirectByteBufferR: boolean nativeByteOrder>;
        if $z3 == 0 goto label6;

        r7 = new java.nio.DirectDoubleBufferRU;
        $r3 = r7;
        specialinvoke r7.<java.nio.DirectDoubleBufferRU: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label7;

     label6:
        r8 = new java.nio.DirectDoubleBufferRS;
        $r3 = r8;
        specialinvoke r8.<java.nio.DirectDoubleBufferRS: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label7:
        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/nio/DirectByteBufferR";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.nio.DirectByteBufferR: boolean $assertionsDisabled> = $z1;
        return;
    }
}
