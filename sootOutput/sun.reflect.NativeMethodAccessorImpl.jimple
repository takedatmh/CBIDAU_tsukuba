class sun.reflect.NativeMethodAccessorImpl extends sun.reflect.MethodAccessorImpl
{
    private java.lang.reflect.Method method;
    private sun.reflect.DelegatingMethodAccessorImpl parent;
    private int numInvocations;

    void <init>(java.lang.reflect.Method)
    {
        sun.reflect.NativeMethodAccessorImpl r0;
        java.lang.reflect.Method r1;

        r0 := @this: sun.reflect.NativeMethodAccessorImpl;
        r1 := @parameter0: java.lang.reflect.Method;
        specialinvoke r0.<sun.reflect.MethodAccessorImpl: void <init>()>();
        r0.<sun.reflect.NativeMethodAccessorImpl: java.lang.reflect.Method method> = r1;
        return;
    }

    public java.lang.Object invoke(java.lang.Object, java.lang.Object[]) throws java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException
    {
        sun.reflect.NativeMethodAccessorImpl r0;
        java.lang.Object r1, $r20;
        java.lang.Object[] r2;
        sun.reflect.MethodAccessorImpl r4;
        int $i0, $i1, $i2, $i3;
        sun.reflect.MethodAccessorGenerator $r5;
        java.lang.reflect.Method $r6, $r8, $r10, $r12, $r14, $r16, $r19;
        java.lang.Class $r7, $r13;
        java.lang.String $r9;
        java.lang.Class[] $r11, $r15;
        sun.reflect.MethodAccessor $r17;
        sun.reflect.DelegatingMethodAccessorImpl $r18;

        r0 := @this: sun.reflect.NativeMethodAccessorImpl;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object[];
        $i0 = r0.<sun.reflect.NativeMethodAccessorImpl: int numInvocations>;
        $i1 = $i0 + 1;
        r0.<sun.reflect.NativeMethodAccessorImpl: int numInvocations> = $i1;
        $i2 = staticinvoke <sun.reflect.ReflectionFactory: int inflationThreshold()>();
        if $i1 <= $i2 goto label0;

        $r5 = new sun.reflect.MethodAccessorGenerator;
        specialinvoke $r5.<sun.reflect.MethodAccessorGenerator: void <init>()>();
        $r6 = r0.<sun.reflect.NativeMethodAccessorImpl: java.lang.reflect.Method method>;
        $r7 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
        $r8 = r0.<sun.reflect.NativeMethodAccessorImpl: java.lang.reflect.Method method>;
        $r9 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.String getName()>();
        $r10 = r0.<sun.reflect.NativeMethodAccessorImpl: java.lang.reflect.Method method>;
        $r11 = virtualinvoke $r10.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        $r12 = r0.<sun.reflect.NativeMethodAccessorImpl: java.lang.reflect.Method method>;
        $r13 = virtualinvoke $r12.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
        $r14 = r0.<sun.reflect.NativeMethodAccessorImpl: java.lang.reflect.Method method>;
        $r15 = virtualinvoke $r14.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();
        $r16 = r0.<sun.reflect.NativeMethodAccessorImpl: java.lang.reflect.Method method>;
        $i3 = virtualinvoke $r16.<java.lang.reflect.Method: int getModifiers()>();
        $r17 = virtualinvoke $r5.<sun.reflect.MethodAccessorGenerator: sun.reflect.MethodAccessor generateMethod(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int)>($r7, $r9, $r11, $r13, $r15, $i3);
        r4 = (sun.reflect.MethodAccessorImpl) $r17;
        $r18 = r0.<sun.reflect.NativeMethodAccessorImpl: sun.reflect.DelegatingMethodAccessorImpl parent>;
        virtualinvoke $r18.<sun.reflect.DelegatingMethodAccessorImpl: void setDelegate(sun.reflect.MethodAccessorImpl)>(r4);

     label0:
        $r19 = r0.<sun.reflect.NativeMethodAccessorImpl: java.lang.reflect.Method method>;
        $r20 = staticinvoke <sun.reflect.NativeMethodAccessorImpl: java.lang.Object invoke0(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r19, r1, r2);
        return $r20;
    }

    void setParent(sun.reflect.DelegatingMethodAccessorImpl)
    {
        sun.reflect.NativeMethodAccessorImpl r0;
        sun.reflect.DelegatingMethodAccessorImpl r1;

        r0 := @this: sun.reflect.NativeMethodAccessorImpl;
        r1 := @parameter0: sun.reflect.DelegatingMethodAccessorImpl;
        r0.<sun.reflect.NativeMethodAccessorImpl: sun.reflect.DelegatingMethodAccessorImpl parent> = r1;
        return;
    }

    private static native java.lang.Object invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]);
}
