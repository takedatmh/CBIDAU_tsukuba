public class java.security.spec.EllipticCurve extends java.lang.Object
{
    private final java.security.spec.ECField field;
    private final java.math.BigInteger a;
    private final java.math.BigInteger b;
    private final byte[] seed;

    private static void checkValidity(java.security.spec.ECField, java.math.BigInteger, java.lang.String)
    {
        java.security.spec.ECField r0;
        java.math.BigInteger r1, r3;
        java.lang.String r2, $r9, $r14, $r20;
        java.lang.StringBuilder $r4, $r7, $r8, $r11, $r12, $r13, $r17, $r18, $r19;
        boolean $z0, $z1;
        java.security.spec.ECFieldFp $r5;
        int $i0, $i1, i2, $i3;
        java.lang.IllegalArgumentException $r6, $r10, $r16;
        java.security.spec.ECFieldF2m $r15;

        r0 := @parameter0: java.security.spec.ECField;
        r1 := @parameter1: java.math.BigInteger;
        r2 := @parameter2: java.lang.String;
        $z0 = r0 instanceof java.security.spec.ECFieldFp;
        if $z0 == 0 goto label2;

        $r5 = (java.security.spec.ECFieldFp) r0;
        r3 = virtualinvoke $r5.<java.security.spec.ECFieldFp: java.math.BigInteger getP()>();
        $i0 = virtualinvoke r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r1);
        if $i0 == 1 goto label0;

        $r6 = new java.lang.IllegalArgumentException;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too large");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);
        throw $r6;

     label0:
        $i1 = virtualinvoke r1.<java.math.BigInteger: int signum()>();
        if $i1 >= 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is negative");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);
        throw $r10;

     label1:
        goto label3;

     label2:
        $z1 = r0 instanceof java.security.spec.ECFieldF2m;
        if $z1 == 0 goto label3;

        $r15 = (java.security.spec.ECFieldF2m) r0;
        i2 = virtualinvoke $r15.<java.security.spec.ECFieldF2m: int getM()>();
        $i3 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();
        if $i3 <= i2 goto label3;

        $r16 = new java.lang.IllegalArgumentException;
        $r17 = new java.lang.StringBuilder;
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too large");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);
        throw $r16;

     label3:
        return;
    }

    public void <init>(java.security.spec.ECField, java.math.BigInteger, java.math.BigInteger)
    {
        java.security.spec.EllipticCurve r0;
        java.security.spec.ECField r1;
        java.math.BigInteger r2, r3;

        r0 := @this: java.security.spec.EllipticCurve;
        r1 := @parameter0: java.security.spec.ECField;
        r2 := @parameter1: java.math.BigInteger;
        r3 := @parameter2: java.math.BigInteger;
        specialinvoke r0.<java.security.spec.EllipticCurve: void <init>(java.security.spec.ECField,java.math.BigInteger,java.math.BigInteger,byte[])>(r1, r2, r3, null);
        return;
    }

    public void <init>(java.security.spec.ECField, java.math.BigInteger, java.math.BigInteger, byte[])
    {
        java.security.spec.EllipticCurve r0;
        java.security.spec.ECField r1;
        java.math.BigInteger r2, r3;
        byte[] r4, $r9;
        java.lang.NullPointerException $r5, $r6, $r7;
        java.lang.Object $r8;

        r0 := @this: java.security.spec.EllipticCurve;
        r1 := @parameter0: java.security.spec.ECField;
        r2 := @parameter1: java.math.BigInteger;
        r3 := @parameter2: java.math.BigInteger;
        r4 := @parameter3: byte[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r1 != null goto label0;

        $r5 = new java.lang.NullPointerException;
        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("field is null");
        throw $r5;

     label0:
        if r2 != null goto label1;

        $r6 = new java.lang.NullPointerException;
        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("first coefficient is null");
        throw $r6;

     label1:
        if r3 != null goto label2;

        $r7 = new java.lang.NullPointerException;
        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("second coefficient is null");
        throw $r7;

     label2:
        staticinvoke <java.security.spec.EllipticCurve: void checkValidity(java.security.spec.ECField,java.math.BigInteger,java.lang.String)>(r1, r2, "first coefficient");
        staticinvoke <java.security.spec.EllipticCurve: void checkValidity(java.security.spec.ECField,java.math.BigInteger,java.lang.String)>(r1, r3, "second coefficient");
        r0.<java.security.spec.EllipticCurve: java.security.spec.ECField field> = r1;
        r0.<java.security.spec.EllipticCurve: java.math.BigInteger a> = r2;
        r0.<java.security.spec.EllipticCurve: java.math.BigInteger b> = r3;
        if r4 == null goto label3;

        $r8 = virtualinvoke r4.<java.lang.Object: java.lang.Object clone()>();
        $r9 = (byte[]) $r8;
        r0.<java.security.spec.EllipticCurve: byte[] seed> = $r9;
        goto label4;

     label3:
        r0.<java.security.spec.EllipticCurve: byte[] seed> = null;

     label4:
        return;
    }

    public java.security.spec.ECField getField()
    {
        java.security.spec.EllipticCurve r0;
        java.security.spec.ECField $r1;

        r0 := @this: java.security.spec.EllipticCurve;
        $r1 = r0.<java.security.spec.EllipticCurve: java.security.spec.ECField field>;
        return $r1;
    }

    public java.math.BigInteger getA()
    {
        java.security.spec.EllipticCurve r0;
        java.math.BigInteger $r1;

        r0 := @this: java.security.spec.EllipticCurve;
        $r1 = r0.<java.security.spec.EllipticCurve: java.math.BigInteger a>;
        return $r1;
    }

    public java.math.BigInteger getB()
    {
        java.security.spec.EllipticCurve r0;
        java.math.BigInteger $r1;

        r0 := @this: java.security.spec.EllipticCurve;
        $r1 = r0.<java.security.spec.EllipticCurve: java.math.BigInteger b>;
        return $r1;
    }

    public byte[] getSeed()
    {
        java.security.spec.EllipticCurve r0;
        byte[] $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: java.security.spec.EllipticCurve;
        $r1 = r0.<java.security.spec.EllipticCurve: byte[] seed>;
        if $r1 != null goto label0;

        return null;

     label0:
        $r2 = r0.<java.security.spec.EllipticCurve: byte[] seed>;
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();
        $r4 = (byte[]) $r3;
        return $r4;
    }

    public boolean equals(java.lang.Object)
    {
        java.security.spec.EllipticCurve r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        java.security.spec.ECField $r3, $r4;
        java.math.BigInteger $r5, $r6, $r7, $r8;

        r0 := @this: java.security.spec.EllipticCurve;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof java.security.spec.EllipticCurve;
        if $z0 == 0 goto label1;

        r2 = (java.security.spec.EllipticCurve) r1;
        $r3 = r0.<java.security.spec.EllipticCurve: java.security.spec.ECField field>;
        $r4 = r2.<java.security.spec.EllipticCurve: java.security.spec.ECField field>;
        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);
        if $z1 == 0 goto label1;

        $r5 = r0.<java.security.spec.EllipticCurve: java.math.BigInteger a>;
        $r6 = r2.<java.security.spec.EllipticCurve: java.math.BigInteger a>;
        $z2 = virtualinvoke $r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r6);
        if $z2 == 0 goto label1;

        $r7 = r0.<java.security.spec.EllipticCurve: java.math.BigInteger b>;
        $r8 = r2.<java.security.spec.EllipticCurve: java.math.BigInteger b>;
        $z3 = virtualinvoke $r7.<java.math.BigInteger: boolean equals(java.lang.Object)>($r8);
        if $z3 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        java.security.spec.EllipticCurve r0;
        java.security.spec.ECField $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.math.BigInteger $r2, $r3;

        r0 := @this: java.security.spec.EllipticCurve;
        $r1 = r0.<java.security.spec.EllipticCurve: java.security.spec.ECField field>;
        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();
        $r2 = r0.<java.security.spec.EllipticCurve: java.math.BigInteger a>;
        $i1 = virtualinvoke $r2.<java.math.BigInteger: int hashCode()>();
        $i2 = $i1 << 4;
        $i3 = 6 + $i2;
        $r3 = r0.<java.security.spec.EllipticCurve: java.math.BigInteger b>;
        $i4 = virtualinvoke $r3.<java.math.BigInteger: int hashCode()>();
        $i5 = $i4 << 2;
        $i6 = $i3 + $i5;
        $i7 = $i0 << $i6;
        return $i7;
    }
}
