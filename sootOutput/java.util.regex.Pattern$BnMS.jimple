final class java.util.regex.Pattern$BnMS extends java.util.regex.Pattern$BnM
{
    int lengthInChars;

    void <init>(int[], int[], int[], java.util.regex.Pattern$Node)
    {
        java.util.regex.Pattern$BnMS r0;
        int[] r1, r2, r3, $r5, $r7;
        java.util.regex.Pattern$Node r4;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: java.util.regex.Pattern$BnMS;
        r1 := @parameter0: int[];
        r2 := @parameter1: int[];
        r3 := @parameter2: int[];
        r4 := @parameter3: java.util.regex.Pattern$Node;
        specialinvoke r0.<java.util.regex.Pattern$BnM: void <init>(int[],int[],int[],java.util.regex.Pattern$Node)>(r1, r2, r3, r4);
        i0 = 0;

     label0:
        $r5 = r0.<java.util.regex.Pattern$BnMS: int[] buffer>;
        $i1 = lengthof $r5;
        if i0 >= $i1 goto label1;

        $i2 = r0.<java.util.regex.Pattern$BnMS: int lengthInChars>;
        $r7 = r0.<java.util.regex.Pattern$BnMS: int[] buffer>;
        $i3 = $r7[i0];
        $i4 = staticinvoke <java.lang.Character: int charCount(int)>($i3);
        $i5 = $i2 + $i4;
        r0.<java.util.regex.Pattern$BnMS: int lengthInChars> = $i5;
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$BnMS r0;
        java.util.regex.Matcher r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        java.lang.CharSequence r2;
        int[] r3, $r4, $r5, $r7, $r8;
        java.util.regex.Pattern$Node $r6;
        boolean z0;

        r0 := @this: java.util.regex.Pattern$BnMS;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        r3 = r0.<java.util.regex.Pattern$BnMS: int[] buffer>;
        i1 = lengthof r3;
        $i7 = r1.<java.util.regex.Matcher: int 'to'>;
        $i8 = r0.<java.util.regex.Pattern$BnMS: int lengthInChars>;
        i2 = $i7 - $i8;

     label0:
        if i0 > i2 goto label5;

        i3 = staticinvoke <java.util.regex.Pattern: int access$300(java.lang.CharSequence,int,int)>(r2, i0, i1);
        i4 = i1 - 1;

     label1:
        if i3 <= 0 goto label3;

        $i9 = i0 + i3;
        i5 = staticinvoke <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)>(r2, $i9);
        $i10 = r3[i4];
        if i5 == $i10 goto label2;

        $i11 = i4 + 1;
        $r4 = r0.<java.util.regex.Pattern$BnMS: int[] lastOcc>;
        $i12 = i5 & 127;
        $i13 = $r4[$i12];
        $i14 = $i11 - $i13;
        $r5 = r0.<java.util.regex.Pattern$BnMS: int[] optoSft>;
        $i15 = $r5[i4];
        i6 = staticinvoke <java.lang.Math: int max(int,int)>($i14, $i15);
        $i16 = staticinvoke <java.util.regex.Pattern: int access$300(java.lang.CharSequence,int,int)>(r2, i0, i6);
        i0 = i0 + $i16;
        goto label0;

     label2:
        $i17 = staticinvoke <java.lang.Character: int charCount(int)>(i5);
        i3 = i3 - $i17;
        i4 = i4 + -1;
        goto label1;

     label3:
        r1.<java.util.regex.Matcher: int first> = i0;
        $r6 = r0.<java.util.regex.Pattern$BnMS: java.util.regex.Pattern$Node next>;
        $i18 = r0.<java.util.regex.Pattern$BnMS: int lengthInChars>;
        $i19 = i0 + $i18;
        z0 = virtualinvoke $r6.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, $i19, r2);
        if z0 == 0 goto label4;

        r1.<java.util.regex.Matcher: int first> = i0;
        $r7 = r1.<java.util.regex.Matcher: int[] groups>;
        $i20 = r1.<java.util.regex.Matcher: int first>;
        $r7[0] = $i20;
        $r8 = r1.<java.util.regex.Matcher: int[] groups>;
        $i21 = r1.<java.util.regex.Matcher: int last>;
        $r8[1] = $i21;
        return 1;

     label4:
        $i22 = staticinvoke <java.util.regex.Pattern: int access$300(java.lang.CharSequence,int,int)>(r2, i0, 1);
        i0 = i0 + $i22;
        goto label0;

     label5:
        r1.<java.util.regex.Matcher: boolean hitEnd> = 1;
        return 0;
    }
}
