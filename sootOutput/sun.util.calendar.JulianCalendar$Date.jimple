class sun.util.calendar.JulianCalendar$Date extends sun.util.calendar.BaseCalendar$Date
{

    protected void <init>()
    {
        sun.util.calendar.JulianCalendar$Date r0;

        r0 := @this: sun.util.calendar.JulianCalendar$Date;
        specialinvoke r0.<sun.util.calendar.BaseCalendar$Date: void <init>()>();
        virtualinvoke r0.<sun.util.calendar.JulianCalendar$Date: void setCache(int,long,int)>(1, -1L, 365);
        return;
    }

    protected void <init>(java.util.TimeZone)
    {
        sun.util.calendar.JulianCalendar$Date r0;
        java.util.TimeZone r1;

        r0 := @this: sun.util.calendar.JulianCalendar$Date;
        r1 := @parameter0: java.util.TimeZone;
        specialinvoke r0.<sun.util.calendar.BaseCalendar$Date: void <init>(java.util.TimeZone)>(r1);
        virtualinvoke r0.<sun.util.calendar.JulianCalendar$Date: void setCache(int,long,int)>(1, -1L, 365);
        return;
    }

    public sun.util.calendar.JulianCalendar$Date setEra(sun.util.calendar.Era)
    {
        sun.util.calendar.JulianCalendar$Date r0;
        sun.util.calendar.Era r1, $r4, $r6;
        java.lang.NullPointerException $r2;
        sun.util.calendar.Era[] $r3, $r5;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: sun.util.calendar.JulianCalendar$Date;
        r1 := @parameter0: sun.util.calendar.Era;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        $r3 = staticinvoke <sun.util.calendar.JulianCalendar: sun.util.calendar.Era[] access$000()>();
        $r4 = $r3[0];
        if r1 != $r4 goto label1;

        $r5 = staticinvoke <sun.util.calendar.JulianCalendar: sun.util.calendar.Era[] access$000()>();
        $r6 = $r5[1];
        if r1 == $r6 goto label2;

     label1:
        $r7 = new java.lang.IllegalArgumentException;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown era: ");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);
        throw $r7;

     label2:
        specialinvoke r0.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setEra(sun.util.calendar.Era)>(r1);
        return r0;
    }

    protected void setKnownEra(sun.util.calendar.Era)
    {
        sun.util.calendar.JulianCalendar$Date r0;
        sun.util.calendar.Era r1;

        r0 := @this: sun.util.calendar.JulianCalendar$Date;
        r1 := @parameter0: sun.util.calendar.Era;
        specialinvoke r0.<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.CalendarDate setEra(sun.util.calendar.Era)>(r1);
        return;
    }

    public int getNormalizedYear()
    {
        sun.util.calendar.JulianCalendar$Date r0;
        sun.util.calendar.Era[] $r1;
        sun.util.calendar.Era $r2, $r3;
        int $i0, $i1, $i2;

        r0 := @this: sun.util.calendar.JulianCalendar$Date;
        $r2 = virtualinvoke r0.<sun.util.calendar.JulianCalendar$Date: sun.util.calendar.Era getEra()>();
        $r1 = staticinvoke <sun.util.calendar.JulianCalendar: sun.util.calendar.Era[] access$000()>();
        $r3 = $r1[0];
        if $r2 != $r3 goto label0;

        $i0 = virtualinvoke r0.<sun.util.calendar.JulianCalendar$Date: int getYear()>();
        $i1 = 1 - $i0;
        return $i1;

     label0:
        $i2 = virtualinvoke r0.<sun.util.calendar.JulianCalendar$Date: int getYear()>();
        return $i2;
    }

    public void setNormalizedYear(int)
    {
        sun.util.calendar.JulianCalendar$Date r0;
        int i0, $i1;
        sun.util.calendar.Era[] $r2, $r5;
        sun.util.calendar.Era $r3, $r6;

        r0 := @this: sun.util.calendar.JulianCalendar$Date;
        i0 := @parameter0: int;
        if i0 > 0 goto label0;

        $i1 = 1 - i0;
        virtualinvoke r0.<sun.util.calendar.JulianCalendar$Date: sun.util.calendar.CalendarDate setYear(int)>($i1);
        $r2 = staticinvoke <sun.util.calendar.JulianCalendar: sun.util.calendar.Era[] access$000()>();
        $r3 = $r2[0];
        virtualinvoke r0.<sun.util.calendar.JulianCalendar$Date: void setKnownEra(sun.util.calendar.Era)>($r3);
        goto label1;

     label0:
        virtualinvoke r0.<sun.util.calendar.JulianCalendar$Date: sun.util.calendar.CalendarDate setYear(int)>(i0);
        $r5 = staticinvoke <sun.util.calendar.JulianCalendar: sun.util.calendar.Era[] access$000()>();
        $r6 = $r5[1];
        virtualinvoke r0.<sun.util.calendar.JulianCalendar$Date: void setKnownEra(sun.util.calendar.Era)>($r6);

     label1:
        return;
    }

    public java.lang.String toString()
    {
        sun.util.calendar.JulianCalendar$Date r0;
        java.lang.String r1, r4, r5, $r15;
        java.lang.StringBuffer r2, $r6, $r7, $r9, $r11;
        sun.util.calendar.Era r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: sun.util.calendar.JulianCalendar$Date;
        r1 = specialinvoke r0.<sun.util.calendar.BaseCalendar$Date: java.lang.String toString()>();
        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(84);
        r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i0);
        $r6 = new java.lang.StringBuffer;
        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();
        r2 = $r6;
        r3 = virtualinvoke r0.<sun.util.calendar.JulianCalendar$Date: sun.util.calendar.Era getEra()>();
        if r3 == null goto label0;

        r4 = virtualinvoke r3.<sun.util.calendar.Era: java.lang.String getAbbreviation()>();
        if r4 == null goto label0;

        $r7 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);
        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

     label0:
        $i1 = virtualinvoke r0.<sun.util.calendar.JulianCalendar$Date: int getYear()>();
        $r9 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);
        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);
        $i2 = virtualinvoke r0.<sun.util.calendar.JulianCalendar$Date: int getMonth()>();
        $r11 = staticinvoke <sun.util.calendar.CalendarUtils: java.lang.StringBuffer sprintf0d(java.lang.StringBuffer,int,int)>(r2, $i2, 2);
        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);
        $i3 = virtualinvoke r0.<sun.util.calendar.JulianCalendar$Date: int getDayOfMonth()>();
        staticinvoke <sun.util.calendar.CalendarUtils: java.lang.StringBuffer sprintf0d(java.lang.StringBuffer,int,int)>(r2, $i3, 2);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);
        $r15 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r15;
    }

    public volatile sun.util.calendar.CalendarDate setEra(sun.util.calendar.Era)
    {
        sun.util.calendar.JulianCalendar$Date r0, $r2;
        sun.util.calendar.Era r1;

        r0 := @this: sun.util.calendar.JulianCalendar$Date;
        r1 := @parameter0: sun.util.calendar.Era;
        $r2 = virtualinvoke r0.<sun.util.calendar.JulianCalendar$Date: sun.util.calendar.JulianCalendar$Date setEra(sun.util.calendar.Era)>(r1);
        return $r2;
    }
}
