public class sun.misc.PerfCounter extends java.lang.Object
{
    private static final sun.misc.Perf perf;
    private static final int V_Constant;
    private static final int V_Monotonic;
    private static final int V_Variable;
    private static final int U_None;
    private final java.lang.String name;
    private final java.nio.LongBuffer lb;

    private void <init>(java.lang.String, int)
    {
        sun.misc.PerfCounter r0;
        java.lang.String r1;
        int i0;
        java.nio.ByteBuffer r2;
        sun.misc.Perf $r3;
        java.nio.ByteOrder $r4;
        java.nio.LongBuffer $r6;

        r0 := @this: sun.misc.PerfCounter;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.misc.PerfCounter: java.lang.String name> = r1;
        $r3 = <sun.misc.PerfCounter: sun.misc.Perf perf>;
        r2 = virtualinvoke $r3.<sun.misc.Perf: java.nio.ByteBuffer createLong(java.lang.String,int,int,long)>(r1, 1, i0, 0L);
        $r4 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r4);
        $r6 = virtualinvoke r2.<java.nio.ByteBuffer: java.nio.LongBuffer asLongBuffer()>();
        r0.<sun.misc.PerfCounter: java.nio.LongBuffer lb> = $r6;
        return;
    }

    static sun.misc.PerfCounter newPerfCounter(java.lang.String)
    {
        java.lang.String r0;
        sun.misc.PerfCounter $r1;

        r0 := @parameter0: java.lang.String;
        $r1 = new sun.misc.PerfCounter;
        specialinvoke $r1.<sun.misc.PerfCounter: void <init>(java.lang.String,int)>(r0, 3);
        return $r1;
    }

    static sun.misc.PerfCounter newConstantPerfCounter(java.lang.String)
    {
        java.lang.String r0;
        sun.misc.PerfCounter $r1, r2;

        r0 := @parameter0: java.lang.String;
        $r1 = new sun.misc.PerfCounter;
        specialinvoke $r1.<sun.misc.PerfCounter: void <init>(java.lang.String,int)>(r0, 1);
        r2 = $r1;
        return r2;
    }

    public synchronized long get()
    {
        sun.misc.PerfCounter r0;
        java.nio.LongBuffer $r1;
        long $l0;

        r0 := @this: sun.misc.PerfCounter;
        $r1 = r0.<sun.misc.PerfCounter: java.nio.LongBuffer lb>;
        $l0 = virtualinvoke $r1.<java.nio.LongBuffer: long get(int)>(0);
        return $l0;
    }

    public synchronized void set(long)
    {
        sun.misc.PerfCounter r0;
        long l0;
        java.nio.LongBuffer $r1;

        r0 := @this: sun.misc.PerfCounter;
        l0 := @parameter0: long;
        $r1 = r0.<sun.misc.PerfCounter: java.nio.LongBuffer lb>;
        virtualinvoke $r1.<java.nio.LongBuffer: java.nio.LongBuffer put(int,long)>(0, l0);
        return;
    }

    public synchronized void add(long)
    {
        sun.misc.PerfCounter r0;
        long l0, l1, $l2;
        java.nio.LongBuffer $r1;

        r0 := @this: sun.misc.PerfCounter;
        l0 := @parameter0: long;
        $l2 = virtualinvoke r0.<sun.misc.PerfCounter: long get()>();
        l1 = $l2 + l0;
        $r1 = r0.<sun.misc.PerfCounter: java.nio.LongBuffer lb>;
        virtualinvoke $r1.<java.nio.LongBuffer: java.nio.LongBuffer put(int,long)>(0, l1);
        return;
    }

    public void increment()
    {
        sun.misc.PerfCounter r0;

        r0 := @this: sun.misc.PerfCounter;
        virtualinvoke r0.<sun.misc.PerfCounter: void add(long)>(1L);
        return;
    }

    public void addTime(long)
    {
        sun.misc.PerfCounter r0;
        long l0;

        r0 := @this: sun.misc.PerfCounter;
        l0 := @parameter0: long;
        virtualinvoke r0.<sun.misc.PerfCounter: void add(long)>(l0);
        return;
    }

    public void addElapsedTimeFrom(long)
    {
        sun.misc.PerfCounter r0;
        long l0, $l1, $l2;

        r0 := @this: sun.misc.PerfCounter;
        l0 := @parameter0: long;
        $l1 = staticinvoke <java.lang.System: long nanoTime()>();
        $l2 = $l1 - l0;
        virtualinvoke r0.<sun.misc.PerfCounter: void add(long)>($l2);
        return;
    }

    public java.lang.String toString()
    {
        sun.misc.PerfCounter r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;
        java.lang.String $r2, $r6;
        long $l0;

        r0 := @this: sun.misc.PerfCounter;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = r0.<sun.misc.PerfCounter: java.lang.String name>;
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");
        $l0 = virtualinvoke r0.<sun.misc.PerfCounter: long get()>();
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r6;
    }

    public static sun.misc.PerfCounter getFindClasses()
    {
        sun.misc.PerfCounter $r0;

        $r0 = <sun.misc.PerfCounter$CoreCounters: sun.misc.PerfCounter lc>;
        return $r0;
    }

    public static sun.misc.PerfCounter getFindClassTime()
    {
        sun.misc.PerfCounter $r0;

        $r0 = <sun.misc.PerfCounter$CoreCounters: sun.misc.PerfCounter lct>;
        return $r0;
    }

    public static sun.misc.PerfCounter getReadClassBytesTime()
    {
        sun.misc.PerfCounter $r0;

        $r0 = <sun.misc.PerfCounter$CoreCounters: sun.misc.PerfCounter rcbt>;
        return $r0;
    }

    public static sun.misc.PerfCounter getParentDelegationTime()
    {
        sun.misc.PerfCounter $r0;

        $r0 = <sun.misc.PerfCounter$CoreCounters: sun.misc.PerfCounter pdt>;
        return $r0;
    }

    public static sun.misc.PerfCounter getZipFileCount()
    {
        sun.misc.PerfCounter $r0;

        $r0 = <sun.misc.PerfCounter$CoreCounters: sun.misc.PerfCounter zfc>;
        return $r0;
    }

    public static sun.misc.PerfCounter getZipFileOpenTime()
    {
        sun.misc.PerfCounter $r0;

        $r0 = <sun.misc.PerfCounter$CoreCounters: sun.misc.PerfCounter zfot>;
        return $r0;
    }

    public static sun.misc.PerfCounter getD3DAvailable()
    {
        sun.misc.PerfCounter $r0;

        $r0 = <sun.misc.PerfCounter$WindowsClientCounters: sun.misc.PerfCounter d3dAvailable>;
        return $r0;
    }

    static void <clinit>()
    {
        sun.misc.Perf$GetPerfAction $r0;
        java.lang.Object $r1;
        sun.misc.Perf $r2;

        $r0 = new sun.misc.Perf$GetPerfAction;
        specialinvoke $r0.<sun.misc.Perf$GetPerfAction: void <init>()>();
        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        $r2 = (sun.misc.Perf) $r1;
        <sun.misc.PerfCounter: sun.misc.Perf perf> = $r2;
        return;
    }
}
