class sun.net.www.protocol.http.BasicAuthentication extends sun.net.www.protocol.http.AuthenticationInfo
{
    private static final long serialVersionUID;
    java.lang.String auth;
    static final boolean $assertionsDisabled;

    public void <init>(boolean, java.lang.String, int, java.lang.String, java.net.PasswordAuthentication)
    {
        sun.net.www.protocol.http.BasicAuthentication r0;
        boolean z0, $z1;
        java.lang.String r1, r2, r6, $r11, $r21, $r23;
        int i0, i1, $i3, $i4, $i7, $i8, $i9, $i10, $i11, $i12;
        java.net.PasswordAuthentication r3;
        sun.net.www.protocol.http.AuthScheme $r5;
        byte[] r7, r9, r17;
        java.io.UnsupportedEncodingException r8, $r14;
        char $c2, $c5;
        java.lang.StringBuilder $r10, $r12, $r13, $r18, $r19, $r22;
        java.lang.AssertionError $r15;
        char[] r16;
        byte $b6;
        sun.net.www.protocol.http.BasicAuthentication$BasicBASE64Encoder $r20;

        r0 := @this: sun.net.www.protocol.http.BasicAuthentication;
        z0 := @parameter0: boolean;
        r1 := @parameter1: java.lang.String;
        i0 := @parameter2: int;
        r2 := @parameter3: java.lang.String;
        r3 := @parameter4: java.net.PasswordAuthentication;
        if z0 == 0 goto label0;

        $c2 = 112;
        goto label1;

     label0:
        $c2 = 115;

     label1:
        $r5 = <sun.net.www.protocol.http.AuthScheme: sun.net.www.protocol.http.AuthScheme BASIC>;
        specialinvoke r0.<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.lang.String,int,java.lang.String)>($c2, $r5, r1, i0, r2);
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke r3.<java.net.PasswordAuthentication: java.lang.String getUserName()>();
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        r6 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        r7 = null;

     label2:
        r7 = virtualinvoke r6.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;
        r8 = $r14;
        $z1 = <sun.net.www.protocol.http.BasicAuthentication: boolean $assertionsDisabled>;
        if $z1 != 0 goto label5;

        $r15 = new java.lang.AssertionError;
        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();
        throw $r15;

     label5:
        r16 = virtualinvoke r3.<java.net.PasswordAuthentication: char[] getPassword()>();
        $i3 = lengthof r16;
        r9 = newarray (byte)[$i3];
        i1 = 0;

     label6:
        $i4 = lengthof r16;
        if i1 >= $i4 goto label7;

        $c5 = r16[i1];
        $b6 = (byte) $c5;
        r9[i1] = $b6;
        i1 = i1 + 1;
        goto label6;

     label7:
        $i7 = lengthof r7;
        $i8 = lengthof r9;
        $i9 = $i7 + $i8;
        r17 = newarray (byte)[$i9];
        $i10 = lengthof r7;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r17, 0, $i10);
        $i11 = lengthof r7;
        $i12 = lengthof r9;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, r17, $i11, $i12);
        $r18 = new java.lang.StringBuilder;
        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Basic ");
        $r20 = new sun.net.www.protocol.http.BasicAuthentication$BasicBASE64Encoder;
        specialinvoke $r20.<sun.net.www.protocol.http.BasicAuthentication$BasicBASE64Encoder: void <init>(sun.net.www.protocol.http.BasicAuthentication,sun.net.www.protocol.http.BasicAuthentication$1)>(r0, null);
        $r21 = virtualinvoke $r20.<sun.net.www.protocol.http.BasicAuthentication$BasicBASE64Encoder: java.lang.String encode(byte[])>(r17);
        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        r0.<sun.net.www.protocol.http.BasicAuthentication: java.lang.String auth> = $r23;
        r0.<sun.net.www.protocol.http.BasicAuthentication: java.net.PasswordAuthentication pw> = r3;
        return;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }

    public void <init>(boolean, java.lang.String, int, java.lang.String, java.lang.String)
    {
        sun.net.www.protocol.http.BasicAuthentication r0;
        boolean z0;
        java.lang.String r1, r2, r3, $r9;
        int i0;
        sun.net.www.protocol.http.AuthScheme $r5;
        char $c1;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: sun.net.www.protocol.http.BasicAuthentication;
        z0 := @parameter0: boolean;
        r1 := @parameter1: java.lang.String;
        i0 := @parameter2: int;
        r2 := @parameter3: java.lang.String;
        r3 := @parameter4: java.lang.String;
        if z0 == 0 goto label0;

        $c1 = 112;
        goto label1;

     label0:
        $c1 = 115;

     label1:
        $r5 = <sun.net.www.protocol.http.AuthScheme: sun.net.www.protocol.http.AuthScheme BASIC>;
        specialinvoke r0.<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.lang.String,int,java.lang.String)>($c1, $r5, r1, i0, r2);
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Basic ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        r0.<sun.net.www.protocol.http.BasicAuthentication: java.lang.String auth> = $r9;
        return;
    }

    public void <init>(boolean, java.net.URL, java.lang.String, java.net.PasswordAuthentication)
    {
        sun.net.www.protocol.http.BasicAuthentication r0;
        boolean z0, $z1;
        java.net.URL r1;
        java.lang.String r2, r6, $r11, $r21, $r23;
        java.net.PasswordAuthentication r3;
        sun.net.www.protocol.http.AuthScheme $r5;
        byte[] r7, r9, r17;
        java.io.UnsupportedEncodingException r8, $r14;
        int i0, $i2, $i3, $i6, $i7, $i8, $i9, $i10, $i11;
        char $c1, $c4;
        java.lang.StringBuilder $r10, $r12, $r13, $r18, $r19, $r22;
        java.lang.AssertionError $r15;
        char[] r16;
        byte $b5;
        sun.net.www.protocol.http.BasicAuthentication$BasicBASE64Encoder $r20;

        r0 := @this: sun.net.www.protocol.http.BasicAuthentication;
        z0 := @parameter0: boolean;
        r1 := @parameter1: java.net.URL;
        r2 := @parameter2: java.lang.String;
        r3 := @parameter3: java.net.PasswordAuthentication;
        if z0 == 0 goto label0;

        $c1 = 112;
        goto label1;

     label0:
        $c1 = 115;

     label1:
        $r5 = <sun.net.www.protocol.http.AuthScheme: sun.net.www.protocol.http.AuthScheme BASIC>;
        specialinvoke r0.<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>($c1, $r5, r1, r2);
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke r3.<java.net.PasswordAuthentication: java.lang.String getUserName()>();
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        r6 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        r7 = null;

     label2:
        r7 = virtualinvoke r6.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;
        r8 = $r14;
        $z1 = <sun.net.www.protocol.http.BasicAuthentication: boolean $assertionsDisabled>;
        if $z1 != 0 goto label5;

        $r15 = new java.lang.AssertionError;
        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();
        throw $r15;

     label5:
        r16 = virtualinvoke r3.<java.net.PasswordAuthentication: char[] getPassword()>();
        $i2 = lengthof r16;
        r9 = newarray (byte)[$i2];
        i0 = 0;

     label6:
        $i3 = lengthof r16;
        if i0 >= $i3 goto label7;

        $c4 = r16[i0];
        $b5 = (byte) $c4;
        r9[i0] = $b5;
        i0 = i0 + 1;
        goto label6;

     label7:
        $i6 = lengthof r7;
        $i7 = lengthof r9;
        $i8 = $i6 + $i7;
        r17 = newarray (byte)[$i8];
        $i9 = lengthof r7;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r17, 0, $i9);
        $i10 = lengthof r7;
        $i11 = lengthof r9;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, r17, $i10, $i11);
        $r18 = new java.lang.StringBuilder;
        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Basic ");
        $r20 = new sun.net.www.protocol.http.BasicAuthentication$BasicBASE64Encoder;
        specialinvoke $r20.<sun.net.www.protocol.http.BasicAuthentication$BasicBASE64Encoder: void <init>(sun.net.www.protocol.http.BasicAuthentication,sun.net.www.protocol.http.BasicAuthentication$1)>(r0, null);
        $r21 = virtualinvoke $r20.<sun.net.www.protocol.http.BasicAuthentication$BasicBASE64Encoder: java.lang.String encode(byte[])>(r17);
        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        r0.<sun.net.www.protocol.http.BasicAuthentication: java.lang.String auth> = $r23;
        r0.<sun.net.www.protocol.http.BasicAuthentication: java.net.PasswordAuthentication pw> = r3;
        return;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }

    public void <init>(boolean, java.net.URL, java.lang.String, java.lang.String)
    {
        sun.net.www.protocol.http.BasicAuthentication r0;
        boolean z0;
        java.net.URL r1;
        java.lang.String r2, r3, $r9;
        sun.net.www.protocol.http.AuthScheme $r5;
        char $c0;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: sun.net.www.protocol.http.BasicAuthentication;
        z0 := @parameter0: boolean;
        r1 := @parameter1: java.net.URL;
        r2 := @parameter2: java.lang.String;
        r3 := @parameter3: java.lang.String;
        if z0 == 0 goto label0;

        $c0 = 112;
        goto label1;

     label0:
        $c0 = 115;

     label1:
        $r5 = <sun.net.www.protocol.http.AuthScheme: sun.net.www.protocol.http.AuthScheme BASIC>;
        specialinvoke r0.<sun.net.www.protocol.http.AuthenticationInfo: void <init>(char,sun.net.www.protocol.http.AuthScheme,java.net.URL,java.lang.String)>($c0, $r5, r1, r2);
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Basic ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        r0.<sun.net.www.protocol.http.BasicAuthentication: java.lang.String auth> = $r9;
        return;
    }

    public boolean supportsPreemptiveAuthorization()
    {
        sun.net.www.protocol.http.BasicAuthentication r0;

        r0 := @this: sun.net.www.protocol.http.BasicAuthentication;
        return 1;
    }

    public boolean setHeaders(sun.net.www.protocol.http.HttpURLConnection, sun.net.www.HeaderParser, java.lang.String)
    {
        sun.net.www.protocol.http.BasicAuthentication r0;
        sun.net.www.protocol.http.HttpURLConnection r1;
        sun.net.www.HeaderParser r2;
        java.lang.String r3, $r4, $r5;

        r0 := @this: sun.net.www.protocol.http.BasicAuthentication;
        r1 := @parameter0: sun.net.www.protocol.http.HttpURLConnection;
        r2 := @parameter1: sun.net.www.HeaderParser;
        r3 := @parameter2: java.lang.String;
        $r4 = virtualinvoke r0.<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getHeaderName()>();
        $r5 = virtualinvoke r0.<sun.net.www.protocol.http.BasicAuthentication: java.lang.String getHeaderValue(java.net.URL,java.lang.String)>(null, null);
        virtualinvoke r1.<sun.net.www.protocol.http.HttpURLConnection: void setAuthenticationProperty(java.lang.String,java.lang.String)>($r4, $r5);
        return 1;
    }

    public java.lang.String getHeaderValue(java.net.URL, java.lang.String)
    {
        sun.net.www.protocol.http.BasicAuthentication r0;
        java.net.URL r1;
        java.lang.String r2, $r3;

        r0 := @this: sun.net.www.protocol.http.BasicAuthentication;
        r1 := @parameter0: java.net.URL;
        r2 := @parameter1: java.lang.String;
        $r3 = r0.<sun.net.www.protocol.http.BasicAuthentication: java.lang.String auth>;
        return $r3;
    }

    public boolean isAuthorizationStale(java.lang.String)
    {
        sun.net.www.protocol.http.BasicAuthentication r0;
        java.lang.String r1;

        r0 := @this: sun.net.www.protocol.http.BasicAuthentication;
        r1 := @parameter0: java.lang.String;
        return 0;
    }

    static java.lang.String getRootPath(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r8;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.net.URISyntaxException r2, $r7;
        java.net.URI $r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        i0 = 0;

     label0:
        $r3 = new java.net.URI;
        specialinvoke $r3.<java.net.URI: void <init>(java.lang.String)>(r0);
        $r4 = virtualinvoke $r3.<java.net.URI: java.net.URI normalize()>();
        r0 = virtualinvoke $r4.<java.net.URI: java.lang.String getPath()>();
        $r5 = new java.net.URI;
        specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>(r1);
        $r6 = virtualinvoke $r5.<java.net.URI: java.net.URI normalize()>();
        r1 = virtualinvoke $r6.<java.net.URI: java.lang.String getPath()>();

     label1:
        goto label3;

     label2:
        $r7 := @caughtexception;
        r2 = $r7;

     label3:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();
        if i0 >= $i2 goto label5;

        $i3 = i0 + 1;
        i1 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(47, $i3);
        if i1 == -1 goto label4;

        $i4 = i1 + 1;
        $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(0, r0, 0, $i4);
        if $z0 == 0 goto label4;

        i0 = i1;
        goto label3;

     label4:
        $i5 = i0 + 1;
        $r8 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);
        return $r8;

     label5:
        return r0;

        catch java.net.URISyntaxException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/net/www/protocol/http/BasicAuthentication";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.net.www.protocol.http.BasicAuthentication: boolean $assertionsDisabled> = $z1;
        return;
    }
}
