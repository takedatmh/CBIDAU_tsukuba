public abstract class sun.util.PreHashedMap extends java.util.AbstractMap
{
    private final int rows;
    private final int size;
    private final int shift;
    private final int mask;
    private final java.lang.Object[] ht;

    protected void <init>(int, int, int, int)
    {
        sun.util.PreHashedMap r0;
        int i0, i1, i2, i3;
        java.lang.Object[] $r1, $r2;

        r0 := @this: sun.util.PreHashedMap;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        specialinvoke r0.<java.util.AbstractMap: void <init>()>();
        r0.<sun.util.PreHashedMap: int rows> = i0;
        r0.<sun.util.PreHashedMap: int size> = i1;
        r0.<sun.util.PreHashedMap: int shift> = i2;
        r0.<sun.util.PreHashedMap: int mask> = i3;
        $r1 = newarray (java.lang.Object)[i0];
        r0.<sun.util.PreHashedMap: java.lang.Object[] ht> = $r1;
        $r2 = r0.<sun.util.PreHashedMap: java.lang.Object[] ht>;
        virtualinvoke r0.<sun.util.PreHashedMap: void init(java.lang.Object[])>($r2);
        return;
    }

    protected abstract void init(java.lang.Object[]);

    private java.lang.Object toV(java.lang.Object)
    {
        sun.util.PreHashedMap r0;
        java.lang.Object r1;

        r0 := @this: sun.util.PreHashedMap;
        r1 := @parameter0: java.lang.Object;
        return r1;
    }

    public java.lang.Object get(java.lang.Object)
    {
        sun.util.PreHashedMap r0;
        java.lang.Object r1, $r4, $r6, $r7, $r8, $r9;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] r2, $r3, $r5, $r10;
        boolean $z0;

        r0 := @this: sun.util.PreHashedMap;
        r1 := @parameter0: java.lang.Object;
        $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>();
        $i2 = r0.<sun.util.PreHashedMap: int shift>;
        $i3 = $i1 >> $i2;
        $i4 = r0.<sun.util.PreHashedMap: int mask>;
        i0 = $i3 & $i4;
        $r3 = r0.<sun.util.PreHashedMap: java.lang.Object[] ht>;
        $r4 = $r3[i0];
        $r5 = (java.lang.Object[]) $r4;
        r2 = (java.lang.Object[]) $r5;
        if r2 != null goto label0;

        return null;

     label0:
        $r6 = r2[0];
        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r1);
        if $z0 == 0 goto label1;

        $r7 = r2[1];
        $r8 = specialinvoke r0.<sun.util.PreHashedMap: java.lang.Object toV(java.lang.Object)>($r7);
        return $r8;

     label1:
        $i5 = lengthof r2;
        if $i5 >= 3 goto label2;

        return null;

     label2:
        $r9 = r2[2];
        $r10 = (java.lang.Object[]) $r9;
        r2 = (java.lang.Object[]) $r10;
        goto label0;
    }

    public java.lang.Object put(java.lang.String, java.lang.Object)
    {
        sun.util.PreHashedMap r0;
        java.lang.String r1;
        java.lang.Object r2, r4, $r6, $r9, $r10, $r12;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] r3, $r5, $r7, $r13;
        java.lang.UnsupportedOperationException $r8, $r11;
        boolean $z0;

        r0 := @this: sun.util.PreHashedMap;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object;
        $i1 = virtualinvoke r1.<java.lang.String: int hashCode()>();
        $i2 = r0.<sun.util.PreHashedMap: int shift>;
        $i3 = $i1 >> $i2;
        $i4 = r0.<sun.util.PreHashedMap: int mask>;
        i0 = $i3 & $i4;
        $r5 = r0.<sun.util.PreHashedMap: java.lang.Object[] ht>;
        $r6 = $r5[i0];
        $r7 = (java.lang.Object[]) $r6;
        r3 = (java.lang.Object[]) $r7;
        if r3 != null goto label0;

        $r8 = new java.lang.UnsupportedOperationException;
        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(r1);
        throw $r8;

     label0:
        $r9 = r3[0];
        $z0 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>(r1);
        if $z0 == 0 goto label1;

        $r10 = r3[1];
        r4 = specialinvoke r0.<sun.util.PreHashedMap: java.lang.Object toV(java.lang.Object)>($r10);
        r3[1] = r2;
        return r4;

     label1:
        $i5 = lengthof r3;
        if $i5 >= 3 goto label2;

        $r11 = new java.lang.UnsupportedOperationException;
        specialinvoke $r11.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(r1);
        throw $r11;

     label2:
        $r12 = r3[2];
        $r13 = (java.lang.Object[]) $r12;
        r3 = (java.lang.Object[]) $r13;
        goto label0;
    }

    public java.util.Set keySet()
    {
        sun.util.PreHashedMap r0;
        sun.util.PreHashedMap$1 $r1;

        r0 := @this: sun.util.PreHashedMap;
        $r1 = new sun.util.PreHashedMap$1;
        specialinvoke $r1.<sun.util.PreHashedMap$1: void <init>(sun.util.PreHashedMap)>(r0);
        return $r1;
    }

    public java.util.Set entrySet()
    {
        sun.util.PreHashedMap r0;
        sun.util.PreHashedMap$2 $r1;

        r0 := @this: sun.util.PreHashedMap;
        $r1 = new sun.util.PreHashedMap$2;
        specialinvoke $r1.<sun.util.PreHashedMap$2: void <init>(sun.util.PreHashedMap)>(r0);
        return $r1;
    }

    public volatile java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        sun.util.PreHashedMap r0;
        java.lang.Object r1, r2, $r4;
        java.lang.String $r3;

        r0 := @this: sun.util.PreHashedMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r3 = (java.lang.String) r1;
        $r4 = virtualinvoke r0.<sun.util.PreHashedMap: java.lang.Object put(java.lang.String,java.lang.Object)>($r3, r2);
        return $r4;
    }

    static int access$000(sun.util.PreHashedMap)
    {
        sun.util.PreHashedMap r0;
        int $i0;

        r0 := @parameter0: sun.util.PreHashedMap;
        $i0 = r0.<sun.util.PreHashedMap: int size>;
        return $i0;
    }

    static int access$100(sun.util.PreHashedMap)
    {
        sun.util.PreHashedMap r0;
        int $i0;

        r0 := @parameter0: sun.util.PreHashedMap;
        $i0 = r0.<sun.util.PreHashedMap: int rows>;
        return $i0;
    }

    static java.lang.Object[] access$200(sun.util.PreHashedMap)
    {
        sun.util.PreHashedMap r0;
        java.lang.Object[] $r1;

        r0 := @parameter0: sun.util.PreHashedMap;
        $r1 = r0.<sun.util.PreHashedMap: java.lang.Object[] ht>;
        return $r1;
    }
}
