public class javax.crypto.spec.PBEKeySpec extends java.lang.Object implements java.security.spec.KeySpec
{
    private char[] password;
    private byte[] salt;
    private int iterationCount;
    private int keyLength;

    public void <init>(char[])
    {
        javax.crypto.spec.PBEKeySpec r0;
        char[] r1, $r2, $r4, $r5;
        int $i0;
        java.lang.Object $r3;

        r0 := @this: javax.crypto.spec.PBEKeySpec;
        r1 := @parameter0: char[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<javax.crypto.spec.PBEKeySpec: byte[] salt> = null;
        r0.<javax.crypto.spec.PBEKeySpec: int iterationCount> = 0;
        r0.<javax.crypto.spec.PBEKeySpec: int keyLength> = 0;
        if r1 == null goto label0;

        $i0 = lengthof r1;
        if $i0 != 0 goto label1;

     label0:
        $r2 = newarray (char)[0];
        r0.<javax.crypto.spec.PBEKeySpec: char[] password> = $r2;
        goto label2;

     label1:
        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();
        $r4 = (char[]) $r3;
        $r5 = (char[]) $r4;
        r0.<javax.crypto.spec.PBEKeySpec: char[] password> = $r5;

     label2:
        return;
    }

    public void <init>(char[], byte[], int, int)
    {
        javax.crypto.spec.PBEKeySpec r0;
        char[] r1, $r3, $r5, $r6;
        byte[] r2, $r10, $r11;
        int i0, i1, $i2, $i3;
        java.lang.Object $r4, $r9;
        java.lang.NullPointerException $r7;
        java.lang.IllegalArgumentException $r8, $r12, $r13;

        r0 := @this: javax.crypto.spec.PBEKeySpec;
        r1 := @parameter0: char[];
        r2 := @parameter1: byte[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<javax.crypto.spec.PBEKeySpec: byte[] salt> = null;
        r0.<javax.crypto.spec.PBEKeySpec: int iterationCount> = 0;
        r0.<javax.crypto.spec.PBEKeySpec: int keyLength> = 0;
        if r1 == null goto label0;

        $i2 = lengthof r1;
        if $i2 != 0 goto label1;

     label0:
        $r3 = newarray (char)[0];
        r0.<javax.crypto.spec.PBEKeySpec: char[] password> = $r3;
        goto label2;

     label1:
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();
        $r5 = (char[]) $r4;
        $r6 = (char[]) $r5;
        r0.<javax.crypto.spec.PBEKeySpec: char[] password> = $r6;

     label2:
        if r2 != null goto label3;

        $r7 = new java.lang.NullPointerException;
        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("the salt parameter must be non-null");
        throw $r7;

     label3:
        $i3 = lengthof r2;
        if $i3 != 0 goto label4;

        $r8 = new java.lang.IllegalArgumentException;
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("the salt parameter must not be empty");
        throw $r8;

     label4:
        $r9 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();
        $r10 = (byte[]) $r9;
        $r11 = (byte[]) $r10;
        r0.<javax.crypto.spec.PBEKeySpec: byte[] salt> = $r11;
        if i0 > 0 goto label5;

        $r12 = new java.lang.IllegalArgumentException;
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid iterationCount value");
        throw $r12;

     label5:
        if i1 > 0 goto label6;

        $r13 = new java.lang.IllegalArgumentException;
        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid keyLength value");
        throw $r13;

     label6:
        r0.<javax.crypto.spec.PBEKeySpec: int iterationCount> = i0;
        r0.<javax.crypto.spec.PBEKeySpec: int keyLength> = i1;
        return;
    }

    public void <init>(char[], byte[], int)
    {
        javax.crypto.spec.PBEKeySpec r0;
        char[] r1, $r3, $r5, $r6;
        byte[] r2, $r10, $r11;
        int i0, $i1, $i2;
        java.lang.Object $r4, $r9;
        java.lang.NullPointerException $r7;
        java.lang.IllegalArgumentException $r8, $r12;

        r0 := @this: javax.crypto.spec.PBEKeySpec;
        r1 := @parameter0: char[];
        r2 := @parameter1: byte[];
        i0 := @parameter2: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<javax.crypto.spec.PBEKeySpec: byte[] salt> = null;
        r0.<javax.crypto.spec.PBEKeySpec: int iterationCount> = 0;
        r0.<javax.crypto.spec.PBEKeySpec: int keyLength> = 0;
        if r1 == null goto label0;

        $i1 = lengthof r1;
        if $i1 != 0 goto label1;

     label0:
        $r3 = newarray (char)[0];
        r0.<javax.crypto.spec.PBEKeySpec: char[] password> = $r3;
        goto label2;

     label1:
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();
        $r5 = (char[]) $r4;
        $r6 = (char[]) $r5;
        r0.<javax.crypto.spec.PBEKeySpec: char[] password> = $r6;

     label2:
        if r2 != null goto label3;

        $r7 = new java.lang.NullPointerException;
        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("the salt parameter must be non-null");
        throw $r7;

     label3:
        $i2 = lengthof r2;
        if $i2 != 0 goto label4;

        $r8 = new java.lang.IllegalArgumentException;
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("the salt parameter must not be empty");
        throw $r8;

     label4:
        $r9 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();
        $r10 = (byte[]) $r9;
        $r11 = (byte[]) $r10;
        r0.<javax.crypto.spec.PBEKeySpec: byte[] salt> = $r11;
        if i0 > 0 goto label5;

        $r12 = new java.lang.IllegalArgumentException;
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid iterationCount value");
        throw $r12;

     label5:
        r0.<javax.crypto.spec.PBEKeySpec: int iterationCount> = i0;
        return;
    }

    public final void clearPassword()
    {
        javax.crypto.spec.PBEKeySpec r0;
        int i0, $i1;
        char[] $r1, $r2, $r3;

        r0 := @this: javax.crypto.spec.PBEKeySpec;
        $r1 = r0.<javax.crypto.spec.PBEKeySpec: char[] password>;
        if $r1 == null goto label2;

        i0 = 0;

     label0:
        $r2 = r0.<javax.crypto.spec.PBEKeySpec: char[] password>;
        $i1 = lengthof $r2;
        if i0 >= $i1 goto label1;

        $r3 = r0.<javax.crypto.spec.PBEKeySpec: char[] password>;
        $r3[i0] = 32;
        i0 = i0 + 1;
        goto label0;

     label1:
        r0.<javax.crypto.spec.PBEKeySpec: char[] password> = null;

     label2:
        return;
    }

    public final char[] getPassword()
    {
        javax.crypto.spec.PBEKeySpec r0;
        char[] $r1, $r3, $r5, $r6;
        java.lang.IllegalStateException $r2;
        java.lang.Object $r4;

        r0 := @this: javax.crypto.spec.PBEKeySpec;
        $r1 = r0.<javax.crypto.spec.PBEKeySpec: char[] password>;
        if $r1 != null goto label0;

        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("password has been cleared");
        throw $r2;

     label0:
        $r3 = r0.<javax.crypto.spec.PBEKeySpec: char[] password>;
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();
        $r5 = (char[]) $r4;
        $r6 = (char[]) $r5;
        return $r6;
    }

    public final byte[] getSalt()
    {
        javax.crypto.spec.PBEKeySpec r0;
        byte[] $r1, $r2, $r4, $r5;
        java.lang.Object $r3;

        r0 := @this: javax.crypto.spec.PBEKeySpec;
        $r1 = r0.<javax.crypto.spec.PBEKeySpec: byte[] salt>;
        if $r1 == null goto label0;

        $r2 = r0.<javax.crypto.spec.PBEKeySpec: byte[] salt>;
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();
        $r4 = (byte[]) $r3;
        $r5 = (byte[]) $r4;
        return $r5;

     label0:
        return null;
    }

    public final int getIterationCount()
    {
        javax.crypto.spec.PBEKeySpec r0;
        int $i0;

        r0 := @this: javax.crypto.spec.PBEKeySpec;
        $i0 = r0.<javax.crypto.spec.PBEKeySpec: int iterationCount>;
        return $i0;
    }

    public final int getKeyLength()
    {
        javax.crypto.spec.PBEKeySpec r0;
        int $i0;

        r0 := @this: javax.crypto.spec.PBEKeySpec;
        $i0 = r0.<javax.crypto.spec.PBEKeySpec: int keyLength>;
        return $i0;
    }
}
