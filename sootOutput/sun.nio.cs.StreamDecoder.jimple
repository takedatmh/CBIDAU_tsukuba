public class sun.nio.cs.StreamDecoder extends java.io.Reader
{
    private static final int MIN_BYTE_BUFFER_SIZE;
    private static final int DEFAULT_BYTE_BUFFER_SIZE;
    private volatile boolean isOpen;
    private boolean haveLeftoverChar;
    private char leftoverChar;
    private static volatile boolean channelsAvailable;
    private java.nio.charset.Charset cs;
    private java.nio.charset.CharsetDecoder decoder;
    private java.nio.ByteBuffer bb;
    private java.io.InputStream in;
    private java.nio.channels.ReadableByteChannel ch;
    static final boolean $assertionsDisabled;

    private void ensureOpen() throws java.io.IOException
    {
        sun.nio.cs.StreamDecoder r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: sun.nio.cs.StreamDecoder;
        $z0 = r0.<sun.nio.cs.StreamDecoder: boolean isOpen>;
        if $z0 != 0 goto label0;

        $r1 = new java.io.IOException;
        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Stream closed");
        throw $r1;

     label0:
        return;
    }

    public static sun.nio.cs.StreamDecoder forInputStreamReader(java.io.InputStream, java.lang.Object, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.io.InputStream r0;
        java.lang.Object r1;
        java.lang.String r2, r3;
        java.nio.charset.IllegalCharsetNameException r4, $r8;
        java.nio.charset.Charset $r5, $r7;
        boolean $z0;
        sun.nio.cs.StreamDecoder $r6;
        java.io.UnsupportedEncodingException $r9;

        r0 := @parameter0: java.io.InputStream;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.lang.String;
        r3 = r2;
        if r3 != null goto label0;

        $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
        r3 = virtualinvoke $r5.<java.nio.charset.Charset: java.lang.String name()>();

     label0:
        $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>(r3);
        if $z0 == 0 goto label2;

        $r6 = new sun.nio.cs.StreamDecoder;
        $r7 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r3);
        specialinvoke $r6.<sun.nio.cs.StreamDecoder: void <init>(java.io.InputStream,java.lang.Object,java.nio.charset.Charset)>(r0, r1, $r7);

     label1:
        return $r6;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;
        r4 = $r8;

     label4:
        $r9 = new java.io.UnsupportedEncodingException;
        specialinvoke $r9.<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>(r3);
        throw $r9;

        catch java.nio.charset.IllegalCharsetNameException from label0 to label1 with label3;
    }

    public static sun.nio.cs.StreamDecoder forInputStreamReader(java.io.InputStream, java.lang.Object, java.nio.charset.Charset)
    {
        java.io.InputStream r0;
        java.lang.Object r1;
        java.nio.charset.Charset r2;
        sun.nio.cs.StreamDecoder $r3;

        r0 := @parameter0: java.io.InputStream;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.nio.charset.Charset;
        $r3 = new sun.nio.cs.StreamDecoder;
        specialinvoke $r3.<sun.nio.cs.StreamDecoder: void <init>(java.io.InputStream,java.lang.Object,java.nio.charset.Charset)>(r0, r1, r2);
        return $r3;
    }

    public static sun.nio.cs.StreamDecoder forInputStreamReader(java.io.InputStream, java.lang.Object, java.nio.charset.CharsetDecoder)
    {
        java.io.InputStream r0;
        java.lang.Object r1;
        java.nio.charset.CharsetDecoder r2;
        sun.nio.cs.StreamDecoder $r3;

        r0 := @parameter0: java.io.InputStream;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.nio.charset.CharsetDecoder;
        $r3 = new sun.nio.cs.StreamDecoder;
        specialinvoke $r3.<sun.nio.cs.StreamDecoder: void <init>(java.io.InputStream,java.lang.Object,java.nio.charset.CharsetDecoder)>(r0, r1, r2);
        return $r3;
    }

    public static sun.nio.cs.StreamDecoder forDecoder(java.nio.channels.ReadableByteChannel, java.nio.charset.CharsetDecoder, int)
    {
        java.nio.channels.ReadableByteChannel r0;
        java.nio.charset.CharsetDecoder r1;
        int i0;
        sun.nio.cs.StreamDecoder $r2;

        r0 := @parameter0: java.nio.channels.ReadableByteChannel;
        r1 := @parameter1: java.nio.charset.CharsetDecoder;
        i0 := @parameter2: int;
        $r2 = new sun.nio.cs.StreamDecoder;
        specialinvoke $r2.<sun.nio.cs.StreamDecoder: void <init>(java.nio.channels.ReadableByteChannel,java.nio.charset.CharsetDecoder,int)>(r0, r1, i0);
        return $r2;
    }

    public java.lang.String getEncoding()
    {
        sun.nio.cs.StreamDecoder r0;
        boolean $z0;
        java.lang.String $r1;

        r0 := @this: sun.nio.cs.StreamDecoder;
        $z0 = specialinvoke r0.<sun.nio.cs.StreamDecoder: boolean isOpen()>();
        if $z0 == 0 goto label0;

        $r1 = virtualinvoke r0.<sun.nio.cs.StreamDecoder: java.lang.String encodingName()>();
        return $r1;

     label0:
        return null;
    }

    public int read() throws java.io.IOException
    {
        sun.nio.cs.StreamDecoder r0;
        int $i0;

        r0 := @this: sun.nio.cs.StreamDecoder;
        $i0 = specialinvoke r0.<sun.nio.cs.StreamDecoder: int read0()>();
        return $i0;
    }

    private int read0() throws java.io.IOException
    {
        sun.nio.cs.StreamDecoder r0;
        java.lang.Object r1, $r4;
        char[] r2;
        int i0;
        java.lang.Throwable r3, $r6;
        boolean $z0, $z1;
        char $c1, $c3, $c4;
        byte $b2, $b5;
        java.lang.AssertionError $r5;

        r0 := @this: sun.nio.cs.StreamDecoder;
        $r4 = r0.<sun.nio.cs.StreamDecoder: java.lang.Object lock>;
        r1 = $r4;
        entermonitor $r4;

     label0:
        $z0 = r0.<sun.nio.cs.StreamDecoder: boolean haveLeftoverChar>;
        if $z0 == 0 goto label2;

        r0.<sun.nio.cs.StreamDecoder: boolean haveLeftoverChar> = 0;
        $c1 = r0.<sun.nio.cs.StreamDecoder: char leftoverChar>;
        exitmonitor r1;

     label1:
        return $c1;

     label2:
        r2 = newarray (char)[2];
        i0 = virtualinvoke r0.<sun.nio.cs.StreamDecoder: int read(char[],int,int)>(r2, 0, 2);
        tableswitch(i0)
        {
            case -1: goto label3;
            case 0: goto label8;
            case 1: goto label6;
            case 2: goto label5;
            default: goto label8;
        };

     label3:
        $b2 = -1;
        exitmonitor r1;

     label4:
        return $b2;

     label5:
        $c3 = r2[1];
        r0.<sun.nio.cs.StreamDecoder: char leftoverChar> = $c3;
        r0.<sun.nio.cs.StreamDecoder: boolean haveLeftoverChar> = 1;

     label6:
        $c4 = r2[0];
        exitmonitor r1;

     label7:
        return $c4;

     label8:
        $z1 = <sun.nio.cs.StreamDecoder: boolean $assertionsDisabled>;
        if $z1 != 0 goto label9;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>(int)>(i0);
        throw $r5;

     label9:
        $b5 = -1;
        exitmonitor r1;

     label10:
        return $b5;

     label11:
        $r6 := @caughtexception;

     label12:
        r3 = $r6;
        exitmonitor r1;

     label13:
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label11;
        catch java.lang.Throwable from label2 to label4 with label11;
        catch java.lang.Throwable from label5 to label7 with label11;
        catch java.lang.Throwable from label8 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public int read(char[], int, int) throws java.io.IOException
    {
        sun.nio.cs.StreamDecoder r0;
        char[] r1;
        int i0, i1, i2, i3, i5, $i6, $i7, $i8, $i9, $i15, $i16, $i17, $i18;
        java.lang.Object r2, $r4;
        byte b4, $b10, $b13;
        java.lang.Throwable r3, $r6;
        java.lang.IndexOutOfBoundsException $r5;
        boolean $z0, $z1;
        char $c11, $c14;

        r0 := @this: sun.nio.cs.StreamDecoder;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = i0;
        i3 = i1;
        $r4 = r0.<sun.nio.cs.StreamDecoder: java.lang.Object lock>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        specialinvoke r0.<sun.nio.cs.StreamDecoder: void ensureOpen()>();
        if i2 < 0 goto label1;

        $i6 = lengthof r1;
        if i2 > $i6 goto label1;

        if i3 < 0 goto label1;

        $i7 = i2 + i3;
        $i8 = lengthof r1;
        if $i7 > $i8 goto label1;

        $i9 = i2 + i3;
        if $i9 >= 0 goto label2;

     label1:
        $r5 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r5;

     label2:
        if i3 != 0 goto label4;

        $b10 = 0;
        exitmonitor r2;

     label3:
        return $b10;

     label4:
        b4 = 0;
        $z0 = r0.<sun.nio.cs.StreamDecoder: boolean haveLeftoverChar>;
        if $z0 == 0 goto label7;

        $c11 = r0.<sun.nio.cs.StreamDecoder: char leftoverChar>;
        r1[i2] = $c11;
        i2 = i2 + 1;
        i3 = i3 + -1;
        r0.<sun.nio.cs.StreamDecoder: boolean haveLeftoverChar> = 0;
        b4 = 1;
        if i3 == 0 goto label5;

        $z1 = virtualinvoke r0.<sun.nio.cs.StreamDecoder: boolean implReady()>();
        if $z1 != 0 goto label7;

     label5:
        exitmonitor r2;

     label6:
        return b4;

     label7:
        if i3 != 1 goto label13;

        i5 = specialinvoke r0.<sun.nio.cs.StreamDecoder: int read0()>();
        if i5 != -1 goto label11;

        if b4 != 0 goto label8;

        $b13 = -1;
        goto label9;

     label8:
        $b13 = b4;

     label9:
        exitmonitor r2;

     label10:
        return $b13;

     label11:
        $c14 = (char) i5;
        r1[i2] = $c14;
        $i15 = b4 + 1;
        exitmonitor r2;

     label12:
        return $i15;

     label13:
        $i16 = i2 + i3;
        $i17 = virtualinvoke r0.<sun.nio.cs.StreamDecoder: int implRead(char[],int,int)>(r1, i2, $i16);
        $i18 = b4 + $i17;
        exitmonitor r2;

     label14:
        return $i18;

     label15:
        $r6 := @caughtexception;

     label16:
        r3 = $r6;
        exitmonitor r2;

     label17:
        throw r3;

        catch java.lang.Throwable from label0 to label3 with label15;
        catch java.lang.Throwable from label4 to label6 with label15;
        catch java.lang.Throwable from label7 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public boolean ready() throws java.io.IOException
    {
        sun.nio.cs.StreamDecoder r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: sun.nio.cs.StreamDecoder;
        $r3 = r0.<sun.nio.cs.StreamDecoder: java.lang.Object lock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        specialinvoke r0.<sun.nio.cs.StreamDecoder: void ensureOpen()>();
        $z0 = r0.<sun.nio.cs.StreamDecoder: boolean haveLeftoverChar>;
        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<sun.nio.cs.StreamDecoder: boolean implReady()>();
        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;
        goto label3;

     label2:
        $z2 = 0;

     label3:
        exitmonitor r1;

     label4:
        return $z2;

     label5:
        $r4 := @caughtexception;

     label6:
        r2 = $r4;
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void close() throws java.io.IOException
    {
        sun.nio.cs.StreamDecoder r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: sun.nio.cs.StreamDecoder;
        $r3 = r0.<sun.nio.cs.StreamDecoder: java.lang.Object lock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z0 = r0.<sun.nio.cs.StreamDecoder: boolean isOpen>;
        if $z0 != 0 goto label2;

        exitmonitor r1;

     label1:
        return;

     label2:
        virtualinvoke r0.<sun.nio.cs.StreamDecoder: void implClose()>();
        r0.<sun.nio.cs.StreamDecoder: boolean isOpen> = 0;
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        r2 = $r4;
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean isOpen()
    {
        sun.nio.cs.StreamDecoder r0;
        boolean $z0;

        r0 := @this: sun.nio.cs.StreamDecoder;
        $z0 = r0.<sun.nio.cs.StreamDecoder: boolean isOpen>;
        return $z0;
    }

    private static java.nio.channels.FileChannel getChannel(java.io.FileInputStream)
    {
        java.io.FileInputStream r0;
        boolean $z0;
        java.lang.UnsatisfiedLinkError r1, $r3;
        java.nio.channels.FileChannel $r2;

        r0 := @parameter0: java.io.FileInputStream;
        $z0 = <sun.nio.cs.StreamDecoder: boolean channelsAvailable>;
        if $z0 != 0 goto label0;

        return null;

     label0:
        $r2 = virtualinvoke r0.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

     label1:
        return $r2;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        <sun.nio.cs.StreamDecoder: boolean channelsAvailable> = 0;
        return null;

        catch java.lang.UnsatisfiedLinkError from label0 to label1 with label2;
    }

    void <init>(java.io.InputStream, java.lang.Object, java.nio.charset.Charset)
    {
        sun.nio.cs.StreamDecoder r0;
        java.io.InputStream r1;
        java.lang.Object r2;
        java.nio.charset.Charset r3;
        java.nio.charset.CodingErrorAction $r4, $r7;
        java.nio.charset.CharsetDecoder $r5, $r6, $r8;

        r0 := @this: sun.nio.cs.StreamDecoder;
        r1 := @parameter0: java.io.InputStream;
        r2 := @parameter1: java.lang.Object;
        r3 := @parameter2: java.nio.charset.Charset;
        $r5 = virtualinvoke r3.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();
        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
        $r6 = virtualinvoke $r5.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r4);
        $r7 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
        $r8 = virtualinvoke $r6.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r7);
        specialinvoke r0.<sun.nio.cs.StreamDecoder: void <init>(java.io.InputStream,java.lang.Object,java.nio.charset.CharsetDecoder)>(r1, r2, $r8);
        return;
    }

    void <init>(java.io.InputStream, java.lang.Object, java.nio.charset.CharsetDecoder)
    {
        sun.nio.cs.StreamDecoder r0;
        java.io.InputStream r1;
        java.lang.Object r2;
        java.nio.charset.CharsetDecoder r3;
        java.nio.charset.Charset $r4;
        java.nio.channels.ReadableByteChannel $r5;
        java.nio.ByteBuffer $r6, $r7;

        r0 := @this: sun.nio.cs.StreamDecoder;
        r1 := @parameter0: java.io.InputStream;
        r2 := @parameter1: java.lang.Object;
        r3 := @parameter2: java.nio.charset.CharsetDecoder;
        specialinvoke r0.<java.io.Reader: void <init>(java.lang.Object)>(r2);
        r0.<sun.nio.cs.StreamDecoder: boolean isOpen> = 1;
        r0.<sun.nio.cs.StreamDecoder: boolean haveLeftoverChar> = 0;
        $r4 = virtualinvoke r3.<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()>();
        r0.<sun.nio.cs.StreamDecoder: java.nio.charset.Charset cs> = $r4;
        r0.<sun.nio.cs.StreamDecoder: java.nio.charset.CharsetDecoder decoder> = r3;
        $r5 = r0.<sun.nio.cs.StreamDecoder: java.nio.channels.ReadableByteChannel ch>;
        if $r5 != null goto label0;

        r0.<sun.nio.cs.StreamDecoder: java.io.InputStream in> = r1;
        r0.<sun.nio.cs.StreamDecoder: java.nio.channels.ReadableByteChannel ch> = null;
        $r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8192);
        r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb> = $r6;

     label0:
        $r7 = r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb>;
        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        return;
    }

    void <init>(java.nio.channels.ReadableByteChannel, java.nio.charset.CharsetDecoder, int)
    {
        sun.nio.cs.StreamDecoder r0;
        java.nio.channels.ReadableByteChannel r1;
        java.nio.charset.CharsetDecoder r2;
        int i0, $i1;
        java.nio.charset.Charset $r3;
        java.nio.ByteBuffer $r5, $r6;

        r0 := @this: sun.nio.cs.StreamDecoder;
        r1 := @parameter0: java.nio.channels.ReadableByteChannel;
        r2 := @parameter1: java.nio.charset.CharsetDecoder;
        i0 := @parameter2: int;
        specialinvoke r0.<java.io.Reader: void <init>()>();
        r0.<sun.nio.cs.StreamDecoder: boolean isOpen> = 1;
        r0.<sun.nio.cs.StreamDecoder: boolean haveLeftoverChar> = 0;
        r0.<sun.nio.cs.StreamDecoder: java.io.InputStream in> = null;
        r0.<sun.nio.cs.StreamDecoder: java.nio.channels.ReadableByteChannel ch> = r1;
        r0.<sun.nio.cs.StreamDecoder: java.nio.charset.CharsetDecoder decoder> = r2;
        $r3 = virtualinvoke r2.<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()>();
        r0.<sun.nio.cs.StreamDecoder: java.nio.charset.Charset cs> = $r3;
        if i0 >= 0 goto label0;

        $i1 = 8192;
        goto label2;

     label0:
        if i0 >= 32 goto label1;

        $i1 = 32;
        goto label2;

     label1:
        $i1 = i0;

     label2:
        $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i1);
        r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb> = $r5;
        $r6 = r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb>;
        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        return;
    }

    private int readBytes() throws java.io.IOException
    {
        sun.nio.cs.StreamDecoder r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, i11;
        java.lang.Throwable r1, $r31;
        java.nio.ByteBuffer $r2, $r6, $r7, $r9, $r10, $r14, $r16, $r17, $r27, $r29, $r32, $r34;
        java.nio.channels.ReadableByteChannel $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r11, $r12, $r20, $r35;
        java.io.InputStream $r13;
        byte[] $r15;
        java.io.IOException $r19;
        java.lang.StringBuilder $r21, $r22, $r23, $r24, $r25;
        java.lang.String $r26;

        r0 := @this: sun.nio.cs.StreamDecoder;
        $r2 = r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb>;
        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>();

     label0:
        $r4 = r0.<sun.nio.cs.StreamDecoder: java.nio.channels.ReadableByteChannel ch>;
        if $r4 == null goto label3;

        $r5 = r0.<sun.nio.cs.StreamDecoder: java.nio.channels.ReadableByteChannel ch>;
        $r6 = r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb>;
        i0 = interfaceinvoke $r5.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>($r6);
        if i0 >= 0 goto label2;

        i1 = i0;

     label1:
        $r7 = r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb>;
        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        return i1;

     label2:
        goto label12;

     label3:
        $r9 = r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb>;
        i5 = virtualinvoke $r9.<java.nio.ByteBuffer: int limit()>();
        $r10 = r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb>;
        i6 = virtualinvoke $r10.<java.nio.ByteBuffer: int position()>();
        $z0 = <sun.nio.cs.StreamDecoder: boolean $assertionsDisabled>;
        if $z0 != 0 goto label4;

        if i6 <= i5 goto label4;

        $r11 = new java.lang.AssertionError;
        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();
        throw $r11;

     label4:
        if i6 > i5 goto label5;

        $i7 = i5 - i6;
        goto label6;

     label5:
        $i7 = 0;

     label6:
        i2 = $i7;
        $z1 = <sun.nio.cs.StreamDecoder: boolean $assertionsDisabled>;
        if $z1 != 0 goto label7;

        if i2 > 0 goto label7;

        $r12 = new java.lang.AssertionError;
        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();
        throw $r12;

     label7:
        $r13 = r0.<sun.nio.cs.StreamDecoder: java.io.InputStream in>;
        $r14 = r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb>;
        $r15 = virtualinvoke $r14.<java.nio.ByteBuffer: byte[] array()>();
        $r16 = r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb>;
        $i8 = virtualinvoke $r16.<java.nio.ByteBuffer: int arrayOffset()>();
        $i9 = $i8 + i6;
        i3 = virtualinvoke $r13.<java.io.InputStream: int read(byte[],int,int)>($r15, $i9, i2);
        if i3 >= 0 goto label9;

        i4 = i3;

     label8:
        $r17 = r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb>;
        virtualinvoke $r17.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        return i4;

     label9:
        if i3 != 0 goto label10;

        $r19 = new java.io.IOException;
        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>("Underlying input stream returned zero bytes");
        throw $r19;

     label10:
        $z2 = <sun.nio.cs.StreamDecoder: boolean $assertionsDisabled>;
        if $z2 != 0 goto label11;

        if i3 <= i2 goto label11;

        $r20 = new java.lang.AssertionError;
        $r21 = new java.lang.StringBuilder;
        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("n = ");
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", rem = ");
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>($r26);
        throw $r20;

     label11:
        $r27 = r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb>;
        $i10 = i6 + i3;
        virtualinvoke $r27.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i10);

     label12:
        $r29 = r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb>;
        virtualinvoke $r29.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        goto label16;

     label13:
        $r31 := @caughtexception;

     label14:
        r1 = $r31;

     label15:
        $r32 = r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb>;
        virtualinvoke $r32.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        throw r1;

     label16:
        $r34 = r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb>;
        i11 = virtualinvoke $r34.<java.nio.ByteBuffer: int remaining()>();
        $z3 = <sun.nio.cs.StreamDecoder: boolean $assertionsDisabled>;
        if $z3 != 0 goto label17;

        if i11 != 0 goto label17;

        $r35 = new java.lang.AssertionError;
        specialinvoke $r35.<java.lang.AssertionError: void <init>(int)>(i11);
        throw $r35;

     label17:
        return i11;

        catch java.lang.Throwable from label0 to label1 with label13;
        catch java.lang.Throwable from label2 to label8 with label13;
        catch java.lang.Throwable from label9 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    int implRead(char[], int, int) throws java.io.IOException
    {
        sun.nio.cs.StreamDecoder r0;
        char[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.nio.CharBuffer r2;
        java.nio.charset.CoderResult r3;
        java.lang.AssertionError $r4, $r10, $r13;
        java.nio.charset.CharsetDecoder $r5, $r8, $r11;
        java.nio.ByteBuffer $r6, $r7;

        r0 := @this: sun.nio.cs.StreamDecoder;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $z0 = <sun.nio.cs.StreamDecoder: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $i3 = i1 - i0;
        if $i3 > 1 goto label0;

        $r4 = new java.lang.AssertionError;
        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();
        throw $r4;

     label0:
        $i4 = i1 - i0;
        r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>(r1, i0, $i4);
        $i5 = virtualinvoke r2.<java.nio.CharBuffer: int position()>();
        if $i5 == 0 goto label1;

        r2 = virtualinvoke r2.<java.nio.CharBuffer: java.nio.CharBuffer slice()>();

     label1:
        z1 = 0;

     label2:
        $r5 = r0.<sun.nio.cs.StreamDecoder: java.nio.charset.CharsetDecoder decoder>;
        $r6 = r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb>;
        r3 = virtualinvoke $r5.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>($r6, r2, z1);
        $z2 = virtualinvoke r3.<java.nio.charset.CoderResult: boolean isUnderflow()>();
        if $z2 == 0 goto label7;

        if z1 == 0 goto label3;

        goto label9;

     label3:
        $z3 = virtualinvoke r2.<java.nio.CharBuffer: boolean hasRemaining()>();
        if $z3 != 0 goto label4;

        goto label9;

     label4:
        $i6 = virtualinvoke r2.<java.nio.CharBuffer: int position()>();
        if $i6 <= 0 goto label5;

        $z4 = specialinvoke r0.<sun.nio.cs.StreamDecoder: boolean inReady()>();
        if $z4 != 0 goto label5;

        goto label9;

     label5:
        i2 = specialinvoke r0.<sun.nio.cs.StreamDecoder: int readBytes()>();
        if i2 >= 0 goto label2;

        z1 = 1;
        $i7 = virtualinvoke r2.<java.nio.CharBuffer: int position()>();
        if $i7 != 0 goto label6;

        $r7 = r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb>;
        $z5 = virtualinvoke $r7.<java.nio.ByteBuffer: boolean hasRemaining()>();
        if $z5 != 0 goto label6;

        goto label9;

     label6:
        $r8 = r0.<sun.nio.cs.StreamDecoder: java.nio.charset.CharsetDecoder decoder>;
        virtualinvoke $r8.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>();
        goto label2;

     label7:
        $z6 = virtualinvoke r3.<java.nio.charset.CoderResult: boolean isOverflow()>();
        if $z6 == 0 goto label8;

        $z7 = <sun.nio.cs.StreamDecoder: boolean $assertionsDisabled>;
        if $z7 != 0 goto label9;

        $i8 = virtualinvoke r2.<java.nio.CharBuffer: int position()>();
        if $i8 > 0 goto label9;

        $r10 = new java.lang.AssertionError;
        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();
        throw $r10;

     label8:
        virtualinvoke r3.<java.nio.charset.CoderResult: void throwException()>();
        goto label2;

     label9:
        if z1 == 0 goto label10;

        $r11 = r0.<sun.nio.cs.StreamDecoder: java.nio.charset.CharsetDecoder decoder>;
        virtualinvoke $r11.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>();

     label10:
        $i9 = virtualinvoke r2.<java.nio.CharBuffer: int position()>();
        if $i9 != 0 goto label12;

        if z1 == 0 goto label11;

        return -1;

     label11:
        $z8 = <sun.nio.cs.StreamDecoder: boolean $assertionsDisabled>;
        if $z8 != 0 goto label12;

        $r13 = new java.lang.AssertionError;
        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();
        throw $r13;

     label12:
        $i10 = virtualinvoke r2.<java.nio.CharBuffer: int position()>();
        return $i10;
    }

    java.lang.String encodingName()
    {
        sun.nio.cs.StreamDecoder r0;
        java.nio.charset.Charset $r1, $r2, $r5;
        boolean $z0;
        sun.nio.cs.HistoricallyNamedCharset $r3;
        java.lang.String $r4;

        r0 := @this: sun.nio.cs.StreamDecoder;
        $r1 = r0.<sun.nio.cs.StreamDecoder: java.nio.charset.Charset cs>;
        $z0 = $r1 instanceof sun.nio.cs.HistoricallyNamedCharset;
        if $z0 == 0 goto label0;

        $r2 = r0.<sun.nio.cs.StreamDecoder: java.nio.charset.Charset cs>;
        $r3 = (sun.nio.cs.HistoricallyNamedCharset) $r2;
        $r4 = interfaceinvoke $r3.<sun.nio.cs.HistoricallyNamedCharset: java.lang.String historicalName()>();
        goto label1;

     label0:
        $r5 = r0.<sun.nio.cs.StreamDecoder: java.nio.charset.Charset cs>;
        $r4 = virtualinvoke $r5.<java.nio.charset.Charset: java.lang.String name()>();

     label1:
        return $r4;
    }

    private boolean inReady()
    {
        sun.nio.cs.StreamDecoder r0;
        java.io.IOException r1, $r5;
        java.io.InputStream $r2, $r3;
        int $i0;
        java.nio.channels.ReadableByteChannel $r4;
        boolean $z0, $z1;

        r0 := @this: sun.nio.cs.StreamDecoder;

     label0:
        $r2 = r0.<sun.nio.cs.StreamDecoder: java.io.InputStream in>;
        if $r2 == null goto label1;

        $r3 = r0.<sun.nio.cs.StreamDecoder: java.io.InputStream in>;
        $i0 = virtualinvoke $r3.<java.io.InputStream: int available()>();
        if $i0 > 0 goto label2;

     label1:
        $r4 = r0.<sun.nio.cs.StreamDecoder: java.nio.channels.ReadableByteChannel ch>;
        $z0 = $r4 instanceof java.nio.channels.FileChannel;
        if $z0 == 0 goto label3;

     label2:
        $z1 = 1;
        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;

     label5:
        $r5 := @caughtexception;
        r1 = $r5;
        return 0;

        catch java.io.IOException from label0 to label4 with label5;
    }

    boolean implReady()
    {
        sun.nio.cs.StreamDecoder r0;
        java.nio.ByteBuffer $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: sun.nio.cs.StreamDecoder;
        $r1 = r0.<sun.nio.cs.StreamDecoder: java.nio.ByteBuffer bb>;
        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasRemaining()>();
        if $z0 != 0 goto label0;

        $z1 = specialinvoke r0.<sun.nio.cs.StreamDecoder: boolean inReady()>();
        if $z1 == 0 goto label1;

     label0:
        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    void implClose() throws java.io.IOException
    {
        sun.nio.cs.StreamDecoder r0;
        java.nio.channels.ReadableByteChannel $r1, $r2;
        java.io.InputStream $r3;

        r0 := @this: sun.nio.cs.StreamDecoder;
        $r1 = r0.<sun.nio.cs.StreamDecoder: java.nio.channels.ReadableByteChannel ch>;
        if $r1 == null goto label0;

        $r2 = r0.<sun.nio.cs.StreamDecoder: java.nio.channels.ReadableByteChannel ch>;
        interfaceinvoke $r2.<java.nio.channels.ReadableByteChannel: void close()>();
        goto label1;

     label0:
        $r3 = r0.<sun.nio.cs.StreamDecoder: java.io.InputStream in>;
        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label1:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/nio/cs/StreamDecoder";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.cs.StreamDecoder: boolean $assertionsDisabled> = $z1;
        <sun.nio.cs.StreamDecoder: boolean channelsAvailable> = 1;
        return;
    }
}
