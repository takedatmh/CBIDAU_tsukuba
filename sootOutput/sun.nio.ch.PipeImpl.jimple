class sun.nio.ch.PipeImpl extends java.nio.channels.Pipe
{
    private final java.nio.channels.Pipe$SourceChannel source;
    private final java.nio.channels.Pipe$SinkChannel sink;

    void <init>(java.nio.channels.spi.SelectorProvider)
    {
        sun.nio.ch.PipeImpl r0;
        java.nio.channels.spi.SelectorProvider r1;
        long l0, $l3;
        int i1, i2;
        java.io.FileDescriptor r2, r3, $r4, $r6;
        sun.nio.ch.SourceChannelImpl $r5;
        sun.nio.ch.SinkChannelImpl $r7;

        r0 := @this: sun.nio.ch.PipeImpl;
        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;
        specialinvoke r0.<java.nio.channels.Pipe: void <init>()>();
        l0 = staticinvoke <sun.nio.ch.IOUtil: long makePipe(boolean)>(1);
        $l3 = l0 >>> 32;
        i1 = (int) $l3;
        i2 = (int) l0;
        $r4 = new java.io.FileDescriptor;
        specialinvoke $r4.<java.io.FileDescriptor: void <init>()>();
        r2 = $r4;
        staticinvoke <sun.nio.ch.IOUtil: void setfdVal(java.io.FileDescriptor,int)>(r2, i1);
        $r5 = new sun.nio.ch.SourceChannelImpl;
        specialinvoke $r5.<sun.nio.ch.SourceChannelImpl: void <init>(java.nio.channels.spi.SelectorProvider,java.io.FileDescriptor)>(r1, r2);
        r0.<sun.nio.ch.PipeImpl: java.nio.channels.Pipe$SourceChannel source> = $r5;
        $r6 = new java.io.FileDescriptor;
        specialinvoke $r6.<java.io.FileDescriptor: void <init>()>();
        r3 = $r6;
        staticinvoke <sun.nio.ch.IOUtil: void setfdVal(java.io.FileDescriptor,int)>(r3, i2);
        $r7 = new sun.nio.ch.SinkChannelImpl;
        specialinvoke $r7.<sun.nio.ch.SinkChannelImpl: void <init>(java.nio.channels.spi.SelectorProvider,java.io.FileDescriptor)>(r1, r3);
        r0.<sun.nio.ch.PipeImpl: java.nio.channels.Pipe$SinkChannel sink> = $r7;
        return;
    }

    public java.nio.channels.Pipe$SourceChannel source()
    {
        sun.nio.ch.PipeImpl r0;
        java.nio.channels.Pipe$SourceChannel $r1;

        r0 := @this: sun.nio.ch.PipeImpl;
        $r1 = r0.<sun.nio.ch.PipeImpl: java.nio.channels.Pipe$SourceChannel source>;
        return $r1;
    }

    public java.nio.channels.Pipe$SinkChannel sink()
    {
        sun.nio.ch.PipeImpl r0;
        java.nio.channels.Pipe$SinkChannel $r1;

        r0 := @this: sun.nio.ch.PipeImpl;
        $r1 = r0.<sun.nio.ch.PipeImpl: java.nio.channels.Pipe$SinkChannel sink>;
        return $r1;
    }
}
