class sun.reflect.ClassFileAssembler extends java.lang.Object implements sun.reflect.ClassFileConstants
{
    private sun.reflect.ByteVector vec;
    private short cpIdx;
    private int stack;
    private int maxStack;
    private int maxLocals;

    public void <init>()
    {
        sun.reflect.ClassFileAssembler r0;
        sun.reflect.ByteVector $r1;

        r0 := @this: sun.reflect.ClassFileAssembler;
        $r1 = staticinvoke <sun.reflect.ByteVectorFactory: sun.reflect.ByteVector create()>();
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void <init>(sun.reflect.ByteVector)>($r1);
        return;
    }

    public void <init>(sun.reflect.ByteVector)
    {
        sun.reflect.ClassFileAssembler r0;
        sun.reflect.ByteVector r1;

        r0 := @this: sun.reflect.ClassFileAssembler;
        r1 := @parameter0: sun.reflect.ByteVector;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.reflect.ClassFileAssembler: short cpIdx> = 0;
        r0.<sun.reflect.ClassFileAssembler: int stack> = 0;
        r0.<sun.reflect.ClassFileAssembler: int maxStack> = 0;
        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 0;
        r0.<sun.reflect.ClassFileAssembler: sun.reflect.ByteVector vec> = r1;
        return;
    }

    public sun.reflect.ByteVector getData()
    {
        sun.reflect.ClassFileAssembler r0;
        sun.reflect.ByteVector $r1;

        r0 := @this: sun.reflect.ClassFileAssembler;
        $r1 = r0.<sun.reflect.ClassFileAssembler: sun.reflect.ByteVector vec>;
        return $r1;
    }

    public short getLength()
    {
        sun.reflect.ClassFileAssembler r0;
        sun.reflect.ByteVector $r1;
        int $i0;
        short $s1;

        r0 := @this: sun.reflect.ClassFileAssembler;
        $r1 = r0.<sun.reflect.ClassFileAssembler: sun.reflect.ByteVector vec>;
        $i0 = interfaceinvoke $r1.<sun.reflect.ByteVector: int getLength()>();
        $s1 = (short) $i0;
        return $s1;
    }

    public void emitMagicAndVersion()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitInt(int)>(-889275714);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(0);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(49);
        return;
    }

    public void emitInt(int)
    {
        sun.reflect.ClassFileAssembler r0;
        int i0, $i1, $i3, $i4, $i6, $i7, $i9;
        byte $b2, $b5, $b8, $b10;

        r0 := @this: sun.reflect.ClassFileAssembler;
        i0 := @parameter0: int;
        $i1 = i0 >> 24;
        $b2 = (byte) $i1;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>($b2);
        $i3 = i0 >> 16;
        $i4 = $i3 & 255;
        $b5 = (byte) $i4;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>($b5);
        $i6 = i0 >> 8;
        $i7 = $i6 & 255;
        $b8 = (byte) $i7;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>($b8);
        $i9 = i0 & 255;
        $b10 = (byte) $i9;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>($b10);
        return;
    }

    public void emitShort(short)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0, $s1, $s2, $s4;
        byte $b3, $b5;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        $s1 = s0 >> 8;
        $s2 = $s1 & 255;
        $b3 = (byte) $s2;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>($b3);
        $s4 = s0 & 255;
        $b5 = (byte) $s4;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>($b5);
        return;
    }

    void emitShort(short, short)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0, s1, $s2, $s3, $s6;
        sun.reflect.ByteVector $r1, $r2;
        byte $b4, $b7;
        int $i5;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        s1 := @parameter1: short;
        $r1 = r0.<sun.reflect.ClassFileAssembler: sun.reflect.ByteVector vec>;
        $s2 = s1 >> 8;
        $s3 = $s2 & 255;
        $b4 = (byte) $s3;
        interfaceinvoke $r1.<sun.reflect.ByteVector: void put(int,byte)>(s0, $b4);
        $r2 = r0.<sun.reflect.ClassFileAssembler: sun.reflect.ByteVector vec>;
        $i5 = s0 + 1;
        $s6 = s1 & 255;
        $b7 = (byte) $s6;
        interfaceinvoke $r2.<sun.reflect.ByteVector: void put(int,byte)>($i5, $b7);
        return;
    }

    public void emitByte(byte)
    {
        sun.reflect.ClassFileAssembler r0;
        byte b0;
        sun.reflect.ByteVector $r1;

        r0 := @this: sun.reflect.ClassFileAssembler;
        b0 := @parameter0: byte;
        $r1 = r0.<sun.reflect.ClassFileAssembler: sun.reflect.ByteVector vec>;
        interfaceinvoke $r1.<sun.reflect.ByteVector: void add(byte)>(b0);
        return;
    }

    public void append(sun.reflect.ClassFileAssembler)
    {
        sun.reflect.ClassFileAssembler r0, r1;
        sun.reflect.ByteVector $r2;

        r0 := @this: sun.reflect.ClassFileAssembler;
        r1 := @parameter0: sun.reflect.ClassFileAssembler;
        $r2 = r1.<sun.reflect.ClassFileAssembler: sun.reflect.ByteVector vec>;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void append(sun.reflect.ByteVector)>($r2);
        return;
    }

    public void append(sun.reflect.ByteVector)
    {
        sun.reflect.ClassFileAssembler r0;
        sun.reflect.ByteVector r1;
        int i0, $i1;
        byte $b2;

        r0 := @this: sun.reflect.ClassFileAssembler;
        r1 := @parameter0: sun.reflect.ByteVector;
        i0 = 0;

     label0:
        $i1 = interfaceinvoke r1.<sun.reflect.ByteVector: int getLength()>();
        if i0 >= $i1 goto label1;

        $b2 = interfaceinvoke r1.<sun.reflect.ByteVector: byte get(int)>(i0);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>($b2);
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    public short cpi()
    {
        sun.reflect.ClassFileAssembler r0;
        short $s0, $s1;
        java.lang.RuntimeException $r1;

        r0 := @this: sun.reflect.ClassFileAssembler;
        $s0 = r0.<sun.reflect.ClassFileAssembler: short cpIdx>;
        if $s0 != 0 goto label0;

        $r1 = new java.lang.RuntimeException;
        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Illegal use of ClassFileAssembler");
        throw $r1;

     label0:
        $s1 = r0.<sun.reflect.ClassFileAssembler: short cpIdx>;
        return $s1;
    }

    public void emitConstantPoolUTF8(java.lang.String)
    {
        sun.reflect.ClassFileAssembler r0;
        java.lang.String r1;
        byte[] r2;
        int i0, $i1, $i3, $i6;
        short $s2, $s5, $s7;
        byte $b4;

        r0 := @this: sun.reflect.ClassFileAssembler;
        r1 := @parameter0: java.lang.String;
        r2 = staticinvoke <sun.reflect.UTF8: byte[] encode(java.lang.String)>(r1);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(1);
        $i1 = lengthof r2;
        $s2 = (short) $i1;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>($s2);
        i0 = 0;

     label0:
        $i3 = lengthof r2;
        if i0 >= $i3 goto label1;

        $b4 = r2[i0];
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>($b4);
        i0 = i0 + 1;
        goto label0;

     label1:
        $s5 = r0.<sun.reflect.ClassFileAssembler: short cpIdx>;
        $i6 = $s5 + 1;
        $s7 = (short) $i6;
        r0.<sun.reflect.ClassFileAssembler: short cpIdx> = $s7;
        return;
    }

    public void emitConstantPoolClass(short)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0, $s1, $s3;
        int $i2;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(7);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        $s1 = r0.<sun.reflect.ClassFileAssembler: short cpIdx>;
        $i2 = $s1 + 1;
        $s3 = (short) $i2;
        r0.<sun.reflect.ClassFileAssembler: short cpIdx> = $s3;
        return;
    }

    public void emitConstantPoolNameAndType(short, short)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0, s1, $s2, $s4;
        int $i3;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        s1 := @parameter1: short;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(12);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s1);
        $s2 = r0.<sun.reflect.ClassFileAssembler: short cpIdx>;
        $i3 = $s2 + 1;
        $s4 = (short) $i3;
        r0.<sun.reflect.ClassFileAssembler: short cpIdx> = $s4;
        return;
    }

    public void emitConstantPoolFieldref(short, short)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0, s1, $s2, $s4;
        int $i3;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        s1 := @parameter1: short;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(9);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s1);
        $s2 = r0.<sun.reflect.ClassFileAssembler: short cpIdx>;
        $i3 = $s2 + 1;
        $s4 = (short) $i3;
        r0.<sun.reflect.ClassFileAssembler: short cpIdx> = $s4;
        return;
    }

    public void emitConstantPoolMethodref(short, short)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0, s1, $s2, $s4;
        int $i3;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        s1 := @parameter1: short;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(10);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s1);
        $s2 = r0.<sun.reflect.ClassFileAssembler: short cpIdx>;
        $i3 = $s2 + 1;
        $s4 = (short) $i3;
        r0.<sun.reflect.ClassFileAssembler: short cpIdx> = $s4;
        return;
    }

    public void emitConstantPoolInterfaceMethodref(short, short)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0, s1, $s2, $s4;
        int $i3;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        s1 := @parameter1: short;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(11);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s1);
        $s2 = r0.<sun.reflect.ClassFileAssembler: short cpIdx>;
        $i3 = $s2 + 1;
        $s4 = (short) $i3;
        r0.<sun.reflect.ClassFileAssembler: short cpIdx> = $s4;
        return;
    }

    public void emitConstantPoolString(short)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0, $s1, $s3;
        int $i2;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(8);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        $s1 = r0.<sun.reflect.ClassFileAssembler: short cpIdx>;
        $i2 = $s1 + 1;
        $s3 = (short) $i2;
        r0.<sun.reflect.ClassFileAssembler: short cpIdx> = $s3;
        return;
    }

    private void incStack()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0, $i1;

        r0 := @this: sun.reflect.ClassFileAssembler;
        $i0 = r0.<sun.reflect.ClassFileAssembler: int stack>;
        $i1 = $i0 + 1;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void setStack(int)>($i1);
        return;
    }

    private void decStack()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0, $i1;

        r0 := @this: sun.reflect.ClassFileAssembler;
        $i0 = r0.<sun.reflect.ClassFileAssembler: int stack>;
        $i1 = $i0 - 1;
        r0.<sun.reflect.ClassFileAssembler: int stack> = $i1;
        return;
    }

    public short getMaxStack()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;
        short $s1;

        r0 := @this: sun.reflect.ClassFileAssembler;
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxStack>;
        $s1 = (short) $i0;
        return $s1;
    }

    public short getMaxLocals()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;
        short $s1;

        r0 := @this: sun.reflect.ClassFileAssembler;
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        $s1 = (short) $i0;
        return $s1;
    }

    public void setMaxLocals(int)
    {
        sun.reflect.ClassFileAssembler r0;
        int i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        i0 := @parameter0: int;
        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = i0;
        return;
    }

    public int getStack()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        $i0 = r0.<sun.reflect.ClassFileAssembler: int stack>;
        return $i0;
    }

    public void setStack(int)
    {
        sun.reflect.ClassFileAssembler r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: sun.reflect.ClassFileAssembler;
        i0 := @parameter0: int;
        r0.<sun.reflect.ClassFileAssembler: int stack> = i0;
        $i1 = r0.<sun.reflect.ClassFileAssembler: int stack>;
        $i2 = r0.<sun.reflect.ClassFileAssembler: int maxStack>;
        if $i1 <= $i2 goto label0;

        $i3 = r0.<sun.reflect.ClassFileAssembler: int stack>;
        r0.<sun.reflect.ClassFileAssembler: int maxStack> = $i3;

     label0:
        return;
    }

    public void opc_aconst_null()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(1);
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_sipush(short)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(17);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_ldc(byte)
    {
        sun.reflect.ClassFileAssembler r0;
        byte b0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        b0 := @parameter0: byte;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(18);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(b0);
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_iload_0()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(26);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 1 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 1;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_iload_1()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(27);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 2 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 2;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_iload_2()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(28);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 3 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 3;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_iload_3()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(29);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 4 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 4;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_lload_0()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(30);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 2 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 2;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_lload_1()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(31);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 3 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 3;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_lload_2()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(32);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 4 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 4;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_lload_3()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(33);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 5 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 5;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_fload_0()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(34);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 1 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 1;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_fload_1()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(35);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 2 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 2;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_fload_2()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(36);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 3 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 3;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_fload_3()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(37);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 4 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 4;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_dload_0()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(38);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 2 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 2;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_dload_1()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(39);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 3 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 3;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_dload_2()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(40);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 4 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 4;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_dload_3()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(41);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 5 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 5;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_aload_0()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(42);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 1 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 1;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_aload_1()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(43);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 2 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 2;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_aload_2()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(44);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 3 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 3;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_aload_3()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(45);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 4 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 4;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_aaload()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(50);
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void decStack()>();
        return;
    }

    public void opc_astore_0()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(75);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 1 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 1;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void decStack()>();
        return;
    }

    public void opc_astore_1()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(76);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 2 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 2;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void decStack()>();
        return;
    }

    public void opc_astore_2()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(77);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 3 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 3;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void decStack()>();
        return;
    }

    public void opc_astore_3()
    {
        sun.reflect.ClassFileAssembler r0;
        int $i0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(78);
        $i0 = r0.<sun.reflect.ClassFileAssembler: int maxLocals>;
        if $i0 >= 4 goto label0;

        r0.<sun.reflect.ClassFileAssembler: int maxLocals> = 4;

     label0:
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void decStack()>();
        return;
    }

    public void opc_pop()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(87);
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void decStack()>();
        return;
    }

    public void opc_dup()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(89);
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_dup_x1()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(90);
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_swap()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(95);
        return;
    }

    public void opc_i2l()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-123);
        return;
    }

    public void opc_i2f()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-122);
        return;
    }

    public void opc_i2d()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-121);
        return;
    }

    public void opc_l2f()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-119);
        return;
    }

    public void opc_l2d()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-118);
        return;
    }

    public void opc_f2d()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-115);
        return;
    }

    public void opc_ifeq(short)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-103);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void decStack()>();
        return;
    }

    public void opc_ifeq(sun.reflect.Label)
    {
        sun.reflect.ClassFileAssembler r0;
        sun.reflect.Label r1;
        short s0, $s1;
        int $i2, $i3;

        r0 := @this: sun.reflect.ClassFileAssembler;
        r1 := @parameter0: sun.reflect.Label;
        s0 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: short getLength()>();
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-103);
        $s1 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: short getLength()>();
        $i2 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: int getStack()>();
        $i3 = $i2 - 1;
        virtualinvoke r1.<sun.reflect.Label: void add(sun.reflect.ClassFileAssembler,short,short,int)>(r0, s0, $s1, $i3);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(-1);
        return;
    }

    public void opc_if_icmpeq(short)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0;
        int $i1, $i2;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-97);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        $i1 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: int getStack()>();
        $i2 = $i1 - 2;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void setStack(int)>($i2);
        return;
    }

    public void opc_if_icmpeq(sun.reflect.Label)
    {
        sun.reflect.ClassFileAssembler r0;
        sun.reflect.Label r1;
        short s0, $s1;
        int $i2, $i3;

        r0 := @this: sun.reflect.ClassFileAssembler;
        r1 := @parameter0: sun.reflect.Label;
        s0 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: short getLength()>();
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-97);
        $s1 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: short getLength()>();
        $i2 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: int getStack()>();
        $i3 = $i2 - 2;
        virtualinvoke r1.<sun.reflect.Label: void add(sun.reflect.ClassFileAssembler,short,short,int)>(r0, s0, $s1, $i3);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(-1);
        return;
    }

    public void opc_goto(short)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-89);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        return;
    }

    public void opc_goto(sun.reflect.Label)
    {
        sun.reflect.ClassFileAssembler r0;
        sun.reflect.Label r1;
        short s0, $s1;
        int $i2;

        r0 := @this: sun.reflect.ClassFileAssembler;
        r1 := @parameter0: sun.reflect.Label;
        s0 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: short getLength()>();
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-89);
        $s1 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: short getLength()>();
        $i2 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: int getStack()>();
        virtualinvoke r1.<sun.reflect.Label: void add(sun.reflect.ClassFileAssembler,short,short,int)>(r0, s0, $s1, $i2);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(-1);
        return;
    }

    public void opc_ifnull(short)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-58);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void decStack()>();
        return;
    }

    public void opc_ifnull(sun.reflect.Label)
    {
        sun.reflect.ClassFileAssembler r0;
        sun.reflect.Label r1;
        short s0, $s1;
        int $i2, $i3;

        r0 := @this: sun.reflect.ClassFileAssembler;
        r1 := @parameter0: sun.reflect.Label;
        s0 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: short getLength()>();
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-58);
        $s1 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: short getLength()>();
        $i2 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: int getStack()>();
        $i3 = $i2 - 1;
        virtualinvoke r1.<sun.reflect.Label: void add(sun.reflect.ClassFileAssembler,short,short,int)>(r0, s0, $s1, $i3);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(-1);
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void decStack()>();
        return;
    }

    public void opc_ifnonnull(short)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-57);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void decStack()>();
        return;
    }

    public void opc_ifnonnull(sun.reflect.Label)
    {
        sun.reflect.ClassFileAssembler r0;
        sun.reflect.Label r1;
        short s0, $s1;
        int $i2, $i3;

        r0 := @this: sun.reflect.ClassFileAssembler;
        r1 := @parameter0: sun.reflect.Label;
        s0 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: short getLength()>();
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-57);
        $s1 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: short getLength()>();
        $i2 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: int getStack()>();
        $i3 = $i2 - 1;
        virtualinvoke r1.<sun.reflect.Label: void add(sun.reflect.ClassFileAssembler,short,short,int)>(r0, s0, $s1, $i3);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(-1);
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void decStack()>();
        return;
    }

    public void opc_ireturn()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-84);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void setStack(int)>(0);
        return;
    }

    public void opc_lreturn()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-83);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void setStack(int)>(0);
        return;
    }

    public void opc_freturn()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-82);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void setStack(int)>(0);
        return;
    }

    public void opc_dreturn()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-81);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void setStack(int)>(0);
        return;
    }

    public void opc_areturn()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-80);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void setStack(int)>(0);
        return;
    }

    public void opc_return()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-79);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void setStack(int)>(0);
        return;
    }

    public void opc_getstatic(short, int)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0;
        int i1, $i2, $i3;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        i1 := @parameter1: int;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-78);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        $i2 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: int getStack()>();
        $i3 = $i2 + i1;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void setStack(int)>($i3);
        return;
    }

    public void opc_putstatic(short, int)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0;
        int i1, $i2, $i3;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        i1 := @parameter1: int;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-77);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        $i2 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: int getStack()>();
        $i3 = $i2 - i1;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void setStack(int)>($i3);
        return;
    }

    public void opc_getfield(short, int)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0;
        int i1, $i2, $i3, $i4;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        i1 := @parameter1: int;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-76);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        $i2 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: int getStack()>();
        $i3 = $i2 + i1;
        $i4 = $i3 - 1;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void setStack(int)>($i4);
        return;
    }

    public void opc_putfield(short, int)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0;
        int i1, $i2, $i3, $i4;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        i1 := @parameter1: int;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-75);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        $i2 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: int getStack()>();
        $i3 = $i2 - i1;
        $i4 = $i3 - 1;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void setStack(int)>($i4);
        return;
    }

    public void opc_invokevirtual(short, int, int)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0;
        int i1, i2, $i3, $i4, $i5, $i6;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-74);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        $i3 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: int getStack()>();
        $i4 = $i3 - i1;
        $i5 = $i4 - 1;
        $i6 = $i5 + i2;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void setStack(int)>($i6);
        return;
    }

    public void opc_invokespecial(short, int, int)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0;
        int i1, i2, $i3, $i4, $i5, $i6;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-73);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        $i3 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: int getStack()>();
        $i4 = $i3 - i1;
        $i5 = $i4 - 1;
        $i6 = $i5 + i2;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void setStack(int)>($i6);
        return;
    }

    public void opc_invokestatic(short, int, int)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0;
        int i1, i2, $i3, $i4, $i5;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-72);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        $i3 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: int getStack()>();
        $i4 = $i3 - i1;
        $i5 = $i4 + i2;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void setStack(int)>($i5);
        return;
    }

    public void opc_invokeinterface(short, int, byte, int)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0;
        int i1, i3, $i4, $i5, $i6, $i7;
        byte b2;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        i1 := @parameter1: int;
        b2 := @parameter2: byte;
        i3 := @parameter3: int;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-71);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(b2);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(0);
        $i4 = virtualinvoke r0.<sun.reflect.ClassFileAssembler: int getStack()>();
        $i5 = $i4 - i1;
        $i6 = $i5 - 1;
        $i7 = $i6 + i3;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void setStack(int)>($i7);
        return;
    }

    public void opc_arraylength()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-66);
        return;
    }

    public void opc_new(short)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-69);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        specialinvoke r0.<sun.reflect.ClassFileAssembler: void incStack()>();
        return;
    }

    public void opc_athrow()
    {
        sun.reflect.ClassFileAssembler r0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-65);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void setStack(int)>(1);
        return;
    }

    public void opc_checkcast(short)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-64);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        return;
    }

    public void opc_instanceof(short)
    {
        sun.reflect.ClassFileAssembler r0;
        short s0;

        r0 := @this: sun.reflect.ClassFileAssembler;
        s0 := @parameter0: short;
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitByte(byte)>(-63);
        virtualinvoke r0.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        return;
    }
}
