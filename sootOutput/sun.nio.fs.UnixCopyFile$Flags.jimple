class sun.nio.fs.UnixCopyFile$Flags extends java.lang.Object
{
    boolean replaceExisting;
    boolean atomicMove;
    boolean followLinks;
    boolean interruptible;
    boolean copyBasicAttributes;
    boolean copyPosixAttributes;
    boolean copyNonPosixAttributes;
    boolean failIfUnableToCopyBasic;
    boolean failIfUnableToCopyPosix;
    boolean failIfUnableToCopyNonPosix;

    private void <init>()
    {
        sun.nio.fs.UnixCopyFile$Flags r0;

        r0 := @this: sun.nio.fs.UnixCopyFile$Flags;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    static transient sun.nio.fs.UnixCopyFile$Flags fromCopyOptions(java.nio.file.CopyOption[])
    {
        java.nio.file.CopyOption[] r0, r3;
        sun.nio.fs.UnixCopyFile$Flags $r1, r2;
        int i0, i1;
        java.nio.file.CopyOption r4;
        java.nio.file.StandardCopyOption $r5, $r7;
        java.nio.file.LinkOption $r6;
        com.sun.nio.file.ExtendedCopyOption $r8;
        java.lang.NullPointerException $r9;
        java.lang.UnsupportedOperationException $r10;

        r0 := @parameter0: java.nio.file.CopyOption[];
        $r1 = new sun.nio.fs.UnixCopyFile$Flags;
        specialinvoke $r1.<sun.nio.fs.UnixCopyFile$Flags: void <init>()>();
        r2 = $r1;
        r2.<sun.nio.fs.UnixCopyFile$Flags: boolean followLinks> = 1;
        r3 = r0;
        i0 = lengthof r3;
        i1 = 0;

     label0:
        if i1 >= i0 goto label7;

        r4 = r3[i1];
        $r5 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption REPLACE_EXISTING>;
        if r4 != $r5 goto label1;

        r2.<sun.nio.fs.UnixCopyFile$Flags: boolean replaceExisting> = 1;
        goto label6;

     label1:
        $r6 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;
        if r4 != $r6 goto label2;

        r2.<sun.nio.fs.UnixCopyFile$Flags: boolean followLinks> = 0;
        goto label6;

     label2:
        $r7 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption COPY_ATTRIBUTES>;
        if r4 != $r7 goto label3;

        r2.<sun.nio.fs.UnixCopyFile$Flags: boolean copyBasicAttributes> = 1;
        r2.<sun.nio.fs.UnixCopyFile$Flags: boolean copyPosixAttributes> = 1;
        r2.<sun.nio.fs.UnixCopyFile$Flags: boolean copyNonPosixAttributes> = 1;
        r2.<sun.nio.fs.UnixCopyFile$Flags: boolean failIfUnableToCopyBasic> = 1;
        goto label6;

     label3:
        $r8 = <com.sun.nio.file.ExtendedCopyOption: com.sun.nio.file.ExtendedCopyOption INTERRUPTIBLE>;
        if r4 != $r8 goto label4;

        r2.<sun.nio.fs.UnixCopyFile$Flags: boolean interruptible> = 1;
        goto label6;

     label4:
        if r4 != null goto label5;

        $r9 = new java.lang.NullPointerException;
        specialinvoke $r9.<java.lang.NullPointerException: void <init>()>();
        throw $r9;

     label5:
        $r10 = new java.lang.UnsupportedOperationException;
        specialinvoke $r10.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Unsupported copy option");
        throw $r10;

     label6:
        i1 = i1 + 1;
        goto label0;

     label7:
        return r2;
    }

    static transient sun.nio.fs.UnixCopyFile$Flags fromMoveOptions(java.nio.file.CopyOption[])
    {
        java.nio.file.CopyOption[] r0, r3;
        sun.nio.fs.UnixCopyFile$Flags $r1, r2;
        int i0, i1;
        java.nio.file.CopyOption r4;
        java.nio.file.StandardCopyOption $r5, $r6;
        java.nio.file.LinkOption $r7;
        java.lang.NullPointerException $r8;
        java.lang.UnsupportedOperationException $r9;

        r0 := @parameter0: java.nio.file.CopyOption[];
        $r1 = new sun.nio.fs.UnixCopyFile$Flags;
        specialinvoke $r1.<sun.nio.fs.UnixCopyFile$Flags: void <init>()>();
        r2 = $r1;
        r3 = r0;
        i0 = lengthof r3;
        i1 = 0;

     label0:
        if i1 >= i0 goto label6;

        r4 = r3[i1];
        $r5 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption ATOMIC_MOVE>;
        if r4 != $r5 goto label1;

        r2.<sun.nio.fs.UnixCopyFile$Flags: boolean atomicMove> = 1;
        goto label5;

     label1:
        $r6 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption REPLACE_EXISTING>;
        if r4 != $r6 goto label2;

        r2.<sun.nio.fs.UnixCopyFile$Flags: boolean replaceExisting> = 1;
        goto label5;

     label2:
        $r7 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;
        if r4 != $r7 goto label3;

        goto label5;

     label3:
        if r4 != null goto label4;

        $r8 = new java.lang.NullPointerException;
        specialinvoke $r8.<java.lang.NullPointerException: void <init>()>();
        throw $r8;

     label4:
        $r9 = new java.lang.UnsupportedOperationException;
        specialinvoke $r9.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Unsupported copy option");
        throw $r9;

     label5:
        i1 = i1 + 1;
        goto label0;

     label6:
        r2.<sun.nio.fs.UnixCopyFile$Flags: boolean copyBasicAttributes> = 1;
        r2.<sun.nio.fs.UnixCopyFile$Flags: boolean copyPosixAttributes> = 1;
        r2.<sun.nio.fs.UnixCopyFile$Flags: boolean copyNonPosixAttributes> = 1;
        r2.<sun.nio.fs.UnixCopyFile$Flags: boolean failIfUnableToCopyBasic> = 1;
        return r2;
    }
}
