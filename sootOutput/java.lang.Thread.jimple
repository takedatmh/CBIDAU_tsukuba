public class java.lang.Thread extends java.lang.Object implements java.lang.Runnable
{
    private char[] name;
    private int priority;
    private java.lang.Thread threadQ;
    private long eetop;
    private boolean single_step;
    private boolean daemon;
    private boolean stillborn;
    private java.lang.Runnable target;
    private java.lang.ThreadGroup group;
    private java.lang.ClassLoader contextClassLoader;
    private java.security.AccessControlContext inheritedAccessControlContext;
    private static int threadInitNumber;
    java.lang.ThreadLocal$ThreadLocalMap threadLocals;
    java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals;
    private long stackSize;
    private long nativeParkEventPointer;
    private long tid;
    private static long threadSeqNumber;
    private volatile int threadStatus;
    volatile java.lang.Object parkBlocker;
    private volatile sun.nio.ch.Interruptible blocker;
    private final java.lang.Object blockerLock;
    public static final int MIN_PRIORITY;
    public static final int NORM_PRIORITY;
    public static final int MAX_PRIORITY;
    private static final java.lang.StackTraceElement[] EMPTY_STACK_TRACE;
    private static final java.lang.RuntimePermission SUBCLASS_IMPLEMENTATION_PERMISSION;
    private volatile java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler;
    private static volatile java.lang.Thread$UncaughtExceptionHandler defaultUncaughtExceptionHandler;

    private static native void registerNatives();

    private static synchronized int nextThreadNum()
    {
        int $i0, $i1;

        $i0 = <java.lang.Thread: int threadInitNumber>;
        $i1 = $i0 + 1;
        <java.lang.Thread: int threadInitNumber> = $i1;
        return $i0;
    }

    private static synchronized long nextThreadID()
    {
        long $l0, $l1;

        $l0 = <java.lang.Thread: long threadSeqNumber>;
        $l1 = $l0 + 1L;
        <java.lang.Thread: long threadSeqNumber> = $l1;
        return $l1;
    }

    void blockedOn(sun.nio.ch.Interruptible)
    {
        java.lang.Thread r0;
        sun.nio.ch.Interruptible r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: java.lang.Thread;
        r1 := @parameter0: sun.nio.ch.Interruptible;
        $r4 = r0.<java.lang.Thread: java.lang.Object blockerLock>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        r0.<java.lang.Thread: sun.nio.ch.Interruptible blocker> = r1;
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r5 := @caughtexception;

     label3:
        r3 = $r5;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public static native java.lang.Thread currentThread();

    public static native void yield();

    public static native void sleep(long) throws java.lang.InterruptedException;

    public static void sleep(long, int) throws java.lang.InterruptedException
    {
        long l0;
        int i1;
        byte $b2, $b3;
        java.lang.IllegalArgumentException $r0, $r1;

        l0 := @parameter0: long;
        i1 := @parameter1: int;
        $b2 = l0 cmp 0L;
        if $b2 >= 0 goto label0;

        $r0 = new java.lang.IllegalArgumentException;
        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout value is negative");
        throw $r0;

     label0:
        if i1 < 0 goto label1;

        if i1 <= 999999 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("nanosecond timeout value out of range");
        throw $r1;

     label2:
        if i1 >= 500000 goto label3;

        if i1 == 0 goto label4;

        $b3 = l0 cmp 0L;
        if $b3 != 0 goto label4;

     label3:
        l0 = l0 + 1L;

     label4:
        staticinvoke <java.lang.Thread: void sleep(long)>(l0);
        return;
    }

    private void init(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long)
    {
        java.lang.Thread r0;
        java.lang.ThreadGroup r1;
        java.lang.Runnable r2;
        java.lang.String r3;
        long l0;

        r0 := @this: java.lang.Thread;
        r1 := @parameter0: java.lang.ThreadGroup;
        r2 := @parameter1: java.lang.Runnable;
        r3 := @parameter2: java.lang.String;
        l0 := @parameter3: long;
        specialinvoke r0.<java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long,java.security.AccessControlContext)>(r1, r2, r3, l0, null);
        return;
    }

    private void init(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long, java.security.AccessControlContext)
    {
        java.lang.Thread r0, r5;
        java.lang.ThreadGroup r1;
        java.lang.Runnable r2;
        java.lang.String r3;
        long l0, $l3;
        java.security.AccessControlContext r4, $r15;
        java.lang.SecurityManager r6;
        java.lang.NullPointerException $r7;
        char[] $r8;
        java.lang.Class $r9, $r11;
        boolean $z0, $z1, $z2;
        java.lang.RuntimePermission $r10;
        int $i1, $i2;
        java.lang.ClassLoader $r12, $r13;
        java.lang.ThreadLocal$ThreadLocalMap $r16, $r17, $r18;

        r0 := @this: java.lang.Thread;
        r1 := @parameter0: java.lang.ThreadGroup;
        r2 := @parameter1: java.lang.Runnable;
        r3 := @parameter2: java.lang.String;
        l0 := @parameter3: long;
        r4 := @parameter4: java.security.AccessControlContext;
        if r3 != null goto label0;

        $r7 = new java.lang.NullPointerException;
        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("name cannot be null");
        throw $r7;

     label0:
        $r8 = virtualinvoke r3.<java.lang.String: char[] toCharArray()>();
        r0.<java.lang.Thread: char[] name> = $r8;
        r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r6 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 != null goto label2;

        if r6 == null goto label1;

        r1 = virtualinvoke r6.<java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()>();

     label1:
        if r1 != null goto label2;

        r1 = virtualinvoke r5.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

     label2:
        virtualinvoke r1.<java.lang.ThreadGroup: void checkAccess()>();
        if r6 == null goto label3;

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $z0 = staticinvoke <java.lang.Thread: boolean isCCLOverridden(java.lang.Class)>($r9);
        if $z0 == 0 goto label3;

        $r10 = <java.lang.Thread: java.lang.RuntimePermission SUBCLASS_IMPLEMENTATION_PERMISSION>;
        virtualinvoke r6.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r10);

     label3:
        virtualinvoke r1.<java.lang.ThreadGroup: void addUnstarted()>();
        r0.<java.lang.Thread: java.lang.ThreadGroup group> = r1;
        $z1 = virtualinvoke r5.<java.lang.Thread: boolean isDaemon()>();
        r0.<java.lang.Thread: boolean daemon> = $z1;
        $i1 = virtualinvoke r5.<java.lang.Thread: int getPriority()>();
        r0.<java.lang.Thread: int priority> = $i1;
        if r6 == null goto label4;

        $r11 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();
        $z2 = staticinvoke <java.lang.Thread: boolean isCCLOverridden(java.lang.Class)>($r11);
        if $z2 == 0 goto label5;

     label4:
        $r12 = virtualinvoke r5.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
        r0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader> = $r12;
        goto label6;

     label5:
        $r13 = r5.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>;
        r0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader> = $r13;

     label6:
        if r4 == null goto label7;

        $r15 = r4;
        goto label8;

     label7:
        $r15 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getContext()>();

     label8:
        r0.<java.lang.Thread: java.security.AccessControlContext inheritedAccessControlContext> = $r15;
        r0.<java.lang.Thread: java.lang.Runnable target> = r2;
        $i2 = r0.<java.lang.Thread: int priority>;
        virtualinvoke r0.<java.lang.Thread: void setPriority(int)>($i2);
        $r16 = r5.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals>;
        if $r16 == null goto label9;

        $r17 = r5.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals>;
        $r18 = staticinvoke <java.lang.ThreadLocal: java.lang.ThreadLocal$ThreadLocalMap createInheritedMap(java.lang.ThreadLocal$ThreadLocalMap)>($r17);
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals> = $r18;

     label9:
        r0.<java.lang.Thread: long stackSize> = l0;
        $l3 = staticinvoke <java.lang.Thread: long nextThreadID()>();
        r0.<java.lang.Thread: long tid> = $l3;
        return;
    }

    protected java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.lang.Thread r0;
        java.lang.CloneNotSupportedException $r1;

        r0 := @this: java.lang.Thread;
        $r1 = new java.lang.CloneNotSupportedException;
        specialinvoke $r1.<java.lang.CloneNotSupportedException: void <init>()>();
        throw $r1;
    }

    public void <init>()
    {
        java.lang.Thread r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.Object $r2;
        int $i0;
        java.lang.String $r5;

        r0 := @this: java.lang.Thread;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.Thread: boolean daemon> = 0;
        r0.<java.lang.Thread: boolean stillborn> = 0;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap threadLocals> = null;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals> = null;
        r0.<java.lang.Thread: int threadStatus> = 0;
        $r2 = new java.lang.Object;
        specialinvoke $r2.<java.lang.Object: void <init>()>();
        r0.<java.lang.Thread: java.lang.Object blockerLock> = $r2;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread-");
        $i0 = staticinvoke <java.lang.Thread: int nextThreadNum()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke r0.<java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(null, null, $r5, 0L);
        return;
    }

    public void <init>(java.lang.Runnable)
    {
        java.lang.Thread r0;
        java.lang.Runnable r1;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.Object $r3;
        int $i0;
        java.lang.String $r6;

        r0 := @this: java.lang.Thread;
        r1 := @parameter0: java.lang.Runnable;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.Thread: boolean daemon> = 0;
        r0.<java.lang.Thread: boolean stillborn> = 0;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap threadLocals> = null;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals> = null;
        r0.<java.lang.Thread: int threadStatus> = 0;
        $r3 = new java.lang.Object;
        specialinvoke $r3.<java.lang.Object: void <init>()>();
        r0.<java.lang.Thread: java.lang.Object blockerLock> = $r3;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread-");
        $i0 = staticinvoke <java.lang.Thread: int nextThreadNum()>();
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke r0.<java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(null, r1, $r6, 0L);
        return;
    }

    void <init>(java.lang.Runnable, java.security.AccessControlContext)
    {
        java.lang.Thread r0;
        java.lang.Runnable r1;
        java.security.AccessControlContext r2;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.Object $r4;
        int $i0;
        java.lang.String $r7;

        r0 := @this: java.lang.Thread;
        r1 := @parameter0: java.lang.Runnable;
        r2 := @parameter1: java.security.AccessControlContext;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.Thread: boolean daemon> = 0;
        r0.<java.lang.Thread: boolean stillborn> = 0;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap threadLocals> = null;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals> = null;
        r0.<java.lang.Thread: int threadStatus> = 0;
        $r4 = new java.lang.Object;
        specialinvoke $r4.<java.lang.Object: void <init>()>();
        r0.<java.lang.Thread: java.lang.Object blockerLock> = $r4;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread-");
        $i0 = staticinvoke <java.lang.Thread: int nextThreadNum()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke r0.<java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long,java.security.AccessControlContext)>(null, r1, $r7, 0L, r2);
        return;
    }

    public void <init>(java.lang.ThreadGroup, java.lang.Runnable)
    {
        java.lang.Thread r0;
        java.lang.ThreadGroup r1;
        java.lang.Runnable r2;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.Object $r4;
        int $i0;
        java.lang.String $r7;

        r0 := @this: java.lang.Thread;
        r1 := @parameter0: java.lang.ThreadGroup;
        r2 := @parameter1: java.lang.Runnable;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.Thread: boolean daemon> = 0;
        r0.<java.lang.Thread: boolean stillborn> = 0;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap threadLocals> = null;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals> = null;
        r0.<java.lang.Thread: int threadStatus> = 0;
        $r4 = new java.lang.Object;
        specialinvoke $r4.<java.lang.Object: void <init>()>();
        r0.<java.lang.Thread: java.lang.Object blockerLock> = $r4;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread-");
        $i0 = staticinvoke <java.lang.Thread: int nextThreadNum()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke r0.<java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(r1, r2, $r7, 0L);
        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.Thread r0;
        java.lang.String r1;
        java.lang.Object $r2;

        r0 := @this: java.lang.Thread;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.Thread: boolean daemon> = 0;
        r0.<java.lang.Thread: boolean stillborn> = 0;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap threadLocals> = null;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals> = null;
        r0.<java.lang.Thread: int threadStatus> = 0;
        $r2 = new java.lang.Object;
        specialinvoke $r2.<java.lang.Object: void <init>()>();
        r0.<java.lang.Thread: java.lang.Object blockerLock> = $r2;
        specialinvoke r0.<java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(null, null, r1, 0L);
        return;
    }

    public void <init>(java.lang.ThreadGroup, java.lang.String)
    {
        java.lang.Thread r0;
        java.lang.ThreadGroup r1;
        java.lang.String r2;
        java.lang.Object $r3;

        r0 := @this: java.lang.Thread;
        r1 := @parameter0: java.lang.ThreadGroup;
        r2 := @parameter1: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.Thread: boolean daemon> = 0;
        r0.<java.lang.Thread: boolean stillborn> = 0;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap threadLocals> = null;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals> = null;
        r0.<java.lang.Thread: int threadStatus> = 0;
        $r3 = new java.lang.Object;
        specialinvoke $r3.<java.lang.Object: void <init>()>();
        r0.<java.lang.Thread: java.lang.Object blockerLock> = $r3;
        specialinvoke r0.<java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(r1, null, r2, 0L);
        return;
    }

    public void <init>(java.lang.Runnable, java.lang.String)
    {
        java.lang.Thread r0;
        java.lang.Runnable r1;
        java.lang.String r2;
        java.lang.Object $r3;

        r0 := @this: java.lang.Thread;
        r1 := @parameter0: java.lang.Runnable;
        r2 := @parameter1: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.Thread: boolean daemon> = 0;
        r0.<java.lang.Thread: boolean stillborn> = 0;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap threadLocals> = null;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals> = null;
        r0.<java.lang.Thread: int threadStatus> = 0;
        $r3 = new java.lang.Object;
        specialinvoke $r3.<java.lang.Object: void <init>()>();
        r0.<java.lang.Thread: java.lang.Object blockerLock> = $r3;
        specialinvoke r0.<java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(null, r1, r2, 0L);
        return;
    }

    public void <init>(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String)
    {
        java.lang.Thread r0;
        java.lang.ThreadGroup r1;
        java.lang.Runnable r2;
        java.lang.String r3;
        java.lang.Object $r4;

        r0 := @this: java.lang.Thread;
        r1 := @parameter0: java.lang.ThreadGroup;
        r2 := @parameter1: java.lang.Runnable;
        r3 := @parameter2: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.Thread: boolean daemon> = 0;
        r0.<java.lang.Thread: boolean stillborn> = 0;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap threadLocals> = null;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals> = null;
        r0.<java.lang.Thread: int threadStatus> = 0;
        $r4 = new java.lang.Object;
        specialinvoke $r4.<java.lang.Object: void <init>()>();
        r0.<java.lang.Thread: java.lang.Object blockerLock> = $r4;
        specialinvoke r0.<java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(r1, r2, r3, 0L);
        return;
    }

    public void <init>(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long)
    {
        java.lang.Thread r0;
        java.lang.ThreadGroup r1;
        java.lang.Runnable r2;
        java.lang.String r3;
        long l0;
        java.lang.Object $r4;

        r0 := @this: java.lang.Thread;
        r1 := @parameter0: java.lang.ThreadGroup;
        r2 := @parameter1: java.lang.Runnable;
        r3 := @parameter2: java.lang.String;
        l0 := @parameter3: long;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.Thread: boolean daemon> = 0;
        r0.<java.lang.Thread: boolean stillborn> = 0;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap threadLocals> = null;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals> = null;
        r0.<java.lang.Thread: int threadStatus> = 0;
        $r4 = new java.lang.Object;
        specialinvoke $r4.<java.lang.Object: void <init>()>();
        r0.<java.lang.Thread: java.lang.Object blockerLock> = $r4;
        specialinvoke r0.<java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(r1, r2, r3, l0);
        return;
    }

    public synchronized void start()
    {
        java.lang.Thread r0;
        boolean z0;
        java.lang.Throwable r1, r2, r3, $r7, $r8, $r10;
        int $i0;
        java.lang.IllegalThreadStateException $r4;
        java.lang.ThreadGroup $r5, $r6, $r9;

        r0 := @this: java.lang.Thread;
        $i0 = r0.<java.lang.Thread: int threadStatus>;
        if $i0 == 0 goto label0;

        $r4 = new java.lang.IllegalThreadStateException;
        specialinvoke $r4.<java.lang.IllegalThreadStateException: void <init>()>();
        throw $r4;

     label0:
        $r5 = r0.<java.lang.Thread: java.lang.ThreadGroup group>;
        virtualinvoke $r5.<java.lang.ThreadGroup: void add(java.lang.Thread)>(r0);
        z0 = 0;

     label1:
        specialinvoke r0.<java.lang.Thread: void start0()>();
        z0 = 1;

     label2:
        if z0 != 0 goto label3;

        $r6 = r0.<java.lang.Thread: java.lang.ThreadGroup group>;
        virtualinvoke $r6.<java.lang.ThreadGroup: void threadStartFailed(java.lang.Thread)>(r0);

     label3:
        goto label11;

     label4:
        $r7 := @caughtexception;
        r1 = $r7;
        goto label11;

     label5:
        $r8 := @caughtexception;

     label6:
        r2 = $r8;

     label7:
        if z0 != 0 goto label8;

        $r9 = r0.<java.lang.Thread: java.lang.ThreadGroup group>;
        virtualinvoke $r9.<java.lang.ThreadGroup: void threadStartFailed(java.lang.Thread)>(r0);

     label8:
        goto label10;

     label9:
        $r10 := @caughtexception;
        r3 = $r10;

     label10:
        throw r2;

     label11:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label7 to label8 with label9;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private native void start0();

    public void run()
    {
        java.lang.Thread r0;
        java.lang.Runnable $r1, $r2;

        r0 := @this: java.lang.Thread;
        $r1 = r0.<java.lang.Thread: java.lang.Runnable target>;
        if $r1 == null goto label0;

        $r2 = r0.<java.lang.Thread: java.lang.Runnable target>;
        interfaceinvoke $r2.<java.lang.Runnable: void run()>();

     label0:
        return;
    }

    private void exit()
    {
        java.lang.Thread r0;
        java.lang.ThreadGroup $r1, $r2;

        r0 := @this: java.lang.Thread;
        $r1 = r0.<java.lang.Thread: java.lang.ThreadGroup group>;
        if $r1 == null goto label0;

        $r2 = r0.<java.lang.Thread: java.lang.ThreadGroup group>;
        virtualinvoke $r2.<java.lang.ThreadGroup: void threadTerminated(java.lang.Thread)>(r0);
        r0.<java.lang.Thread: java.lang.ThreadGroup group> = null;

     label0:
        r0.<java.lang.Thread: java.lang.Runnable target> = null;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap threadLocals> = null;
        r0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals> = null;
        r0.<java.lang.Thread: java.security.AccessControlContext inheritedAccessControlContext> = null;
        r0.<java.lang.Thread: sun.nio.ch.Interruptible blocker> = null;
        r0.<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler> = null;
        return;
    }

    public final void stop()
    {
        java.lang.Thread r0;
        java.lang.ThreadDeath $r1;

        r0 := @this: java.lang.Thread;
        $r1 = new java.lang.ThreadDeath;
        specialinvoke $r1.<java.lang.ThreadDeath: void <init>()>();
        virtualinvoke r0.<java.lang.Thread: void stop(java.lang.Throwable)>($r1);
        return;
    }

    public final synchronized void stop(java.lang.Throwable)
    {
        java.lang.Thread r0, $r4;
        java.lang.Throwable r1;
        java.lang.SecurityManager r2;
        java.lang.NullPointerException $r3;
        boolean $z0;
        java.lang.RuntimePermission $r5;
        int $i0;

        r0 := @this: java.lang.Thread;
        r1 := @parameter0: java.lang.Throwable;
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label2;

        virtualinvoke r0.<java.lang.Thread: void checkAccess()>();
        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        if r0 != $r4 goto label1;

        $z0 = r1 instanceof java.lang.ThreadDeath;
        if $z0 != 0 goto label2;

     label1:
        $r5 = <sun.security.util.SecurityConstants: java.lang.RuntimePermission STOP_THREAD_PERMISSION>;
        virtualinvoke r2.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r5);

     label2:
        $i0 = r0.<java.lang.Thread: int threadStatus>;
        if $i0 == 0 goto label3;

        virtualinvoke r0.<java.lang.Thread: void resume()>();

     label3:
        specialinvoke r0.<java.lang.Thread: void stop0(java.lang.Object)>(r1);
        return;
    }

    public void interrupt()
    {
        java.lang.Thread r0, $r1;
        java.lang.Object r2, $r5;
        sun.nio.ch.Interruptible r3;
        java.lang.Throwable r4, $r6;

        r0 := @this: java.lang.Thread;
        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        if r0 == $r1 goto label0;

        virtualinvoke r0.<java.lang.Thread: void checkAccess()>();

     label0:
        $r5 = r0.<java.lang.Thread: java.lang.Object blockerLock>;
        r2 = $r5;
        entermonitor $r5;

     label1:
        r3 = r0.<java.lang.Thread: sun.nio.ch.Interruptible blocker>;
        if r3 == null goto label3;

        specialinvoke r0.<java.lang.Thread: void interrupt0()>();
        interfaceinvoke r3.<sun.nio.ch.Interruptible: void interrupt(java.lang.Thread)>(r0);
        exitmonitor r2;

     label2:
        return;

     label3:
        exitmonitor r2;

     label4:
        goto label8;

     label5:
        $r6 := @caughtexception;

     label6:
        r4 = $r6;
        exitmonitor r2;

     label7:
        throw r4;

     label8:
        specialinvoke r0.<java.lang.Thread: void interrupt0()>();
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public static boolean interrupted()
    {
        java.lang.Thread $r0;
        boolean $z0;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $z0 = specialinvoke $r0.<java.lang.Thread: boolean isInterrupted(boolean)>(1);
        return $z0;
    }

    public boolean isInterrupted()
    {
        java.lang.Thread r0;
        boolean $z0;

        r0 := @this: java.lang.Thread;
        $z0 = specialinvoke r0.<java.lang.Thread: boolean isInterrupted(boolean)>(0);
        return $z0;
    }

    private native boolean isInterrupted(boolean);

    public void destroy()
    {
        java.lang.Thread r0;
        java.lang.NoSuchMethodError $r1;

        r0 := @this: java.lang.Thread;
        $r1 = new java.lang.NoSuchMethodError;
        specialinvoke $r1.<java.lang.NoSuchMethodError: void <init>()>();
        throw $r1;
    }

    public final native boolean isAlive();

    public final void suspend()
    {
        java.lang.Thread r0;

        r0 := @this: java.lang.Thread;
        virtualinvoke r0.<java.lang.Thread: void checkAccess()>();
        specialinvoke r0.<java.lang.Thread: void suspend0()>();
        return;
    }

    public final void resume()
    {
        java.lang.Thread r0;

        r0 := @this: java.lang.Thread;
        virtualinvoke r0.<java.lang.Thread: void checkAccess()>();
        specialinvoke r0.<java.lang.Thread: void resume0()>();
        return;
    }

    public final void setPriority(int)
    {
        java.lang.Thread r0;
        int i0, $i2;
        java.lang.ThreadGroup r1, $r3;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.lang.Thread;
        i0 := @parameter0: int;
        virtualinvoke r0.<java.lang.Thread: void checkAccess()>();
        if i0 > 10 goto label0;

        if i0 >= 1 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r2;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();
        r1 = $r3;
        if $r3 == null goto label3;

        $i2 = virtualinvoke r1.<java.lang.ThreadGroup: int getMaxPriority()>();
        if i0 <= $i2 goto label2;

        i0 = virtualinvoke r1.<java.lang.ThreadGroup: int getMaxPriority()>();

     label2:
        r0.<java.lang.Thread: int priority> = i0;
        specialinvoke r0.<java.lang.Thread: void setPriority0(int)>(i0);

     label3:
        return;
    }

    public final int getPriority()
    {
        java.lang.Thread r0;
        int $i0;

        r0 := @this: java.lang.Thread;
        $i0 = r0.<java.lang.Thread: int priority>;
        return $i0;
    }

    public final void setName(java.lang.String)
    {
        java.lang.Thread r0;
        java.lang.String r1;
        char[] $r2;

        r0 := @this: java.lang.Thread;
        r1 := @parameter0: java.lang.String;
        virtualinvoke r0.<java.lang.Thread: void checkAccess()>();
        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();
        r0.<java.lang.Thread: char[] name> = $r2;
        return;
    }

    public final java.lang.String getName()
    {
        java.lang.Thread r0;
        char[] $r1;
        java.lang.String $r2;

        r0 := @this: java.lang.Thread;
        $r1 = r0.<java.lang.Thread: char[] name>;
        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r1);
        return $r2;
    }

    public final java.lang.ThreadGroup getThreadGroup()
    {
        java.lang.Thread r0;
        java.lang.ThreadGroup $r1;

        r0 := @this: java.lang.Thread;
        $r1 = r0.<java.lang.Thread: java.lang.ThreadGroup group>;
        return $r1;
    }

    public static int activeCount()
    {
        java.lang.Thread $r0;
        java.lang.ThreadGroup $r1;
        int $i0;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();
        $i0 = virtualinvoke $r1.<java.lang.ThreadGroup: int activeCount()>();
        return $i0;
    }

    public static int enumerate(java.lang.Thread[])
    {
        java.lang.Thread[] r0;
        java.lang.Thread $r1;
        java.lang.ThreadGroup $r2;
        int $i0;

        r0 := @parameter0: java.lang.Thread[];
        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $r2 = virtualinvoke $r1.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();
        $i0 = virtualinvoke $r2.<java.lang.ThreadGroup: int enumerate(java.lang.Thread[])>(r0);
        return $i0;
    }

    public native int countStackFrames();

    public final synchronized void join(long) throws java.lang.InterruptedException
    {
        java.lang.Thread r0;
        long l0, l1, l2, l3, $l7;
        byte $b4, $b5, $b6;
        java.lang.IllegalArgumentException $r1;
        boolean $z0, $z1;

        r0 := @this: java.lang.Thread;
        l0 := @parameter0: long;
        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        l2 = 0L;
        $b4 = l0 cmp 0L;
        if $b4 >= 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout value is negative");
        throw $r1;

     label0:
        $b5 = l0 cmp 0L;
        if $b5 != 0 goto label2;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Thread: boolean isAlive()>();
        if $z0 == 0 goto label4;

        virtualinvoke r0.<java.lang.Object: void wait(long)>(0L);
        goto label1;

     label2:
        $z1 = virtualinvoke r0.<java.lang.Thread: boolean isAlive()>();
        if $z1 == 0 goto label4;

        l3 = l0 - l2;
        $b6 = l3 cmp 0L;
        if $b6 > 0 goto label3;

        goto label4;

     label3:
        virtualinvoke r0.<java.lang.Object: void wait(long)>(l3);
        $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        l2 = $l7 - l1;
        goto label2;

     label4:
        return;
    }

    public final synchronized void join(long, int) throws java.lang.InterruptedException
    {
        java.lang.Thread r0;
        long l0;
        int i1;
        byte $b2, $b3;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @this: java.lang.Thread;
        l0 := @parameter0: long;
        i1 := @parameter1: int;
        $b2 = l0 cmp 0L;
        if $b2 >= 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout value is negative");
        throw $r1;

     label0:
        if i1 < 0 goto label1;

        if i1 <= 999999 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("nanosecond timeout value out of range");
        throw $r2;

     label2:
        if i1 >= 500000 goto label3;

        if i1 == 0 goto label4;

        $b3 = l0 cmp 0L;
        if $b3 != 0 goto label4;

     label3:
        l0 = l0 + 1L;

     label4:
        virtualinvoke r0.<java.lang.Thread: void join(long)>(l0);
        return;
    }

    public final void join() throws java.lang.InterruptedException
    {
        java.lang.Thread r0;

        r0 := @this: java.lang.Thread;
        virtualinvoke r0.<java.lang.Thread: void join(long)>(0L);
        return;
    }

    public static void dumpStack()
    {
        java.lang.Exception $r0;

        $r0 = new java.lang.Exception;
        specialinvoke $r0.<java.lang.Exception: void <init>(java.lang.String)>("Stack trace");
        virtualinvoke $r0.<java.lang.Exception: void printStackTrace()>();
        return;
    }

    public final void setDaemon(boolean)
    {
        java.lang.Thread r0;
        boolean z0, $z1;
        java.lang.IllegalThreadStateException $r1;

        r0 := @this: java.lang.Thread;
        z0 := @parameter0: boolean;
        virtualinvoke r0.<java.lang.Thread: void checkAccess()>();
        $z1 = virtualinvoke r0.<java.lang.Thread: boolean isAlive()>();
        if $z1 == 0 goto label0;

        $r1 = new java.lang.IllegalThreadStateException;
        specialinvoke $r1.<java.lang.IllegalThreadStateException: void <init>()>();
        throw $r1;

     label0:
        r0.<java.lang.Thread: boolean daemon> = z0;
        return;
    }

    public final boolean isDaemon()
    {
        java.lang.Thread r0;
        boolean $z0;

        r0 := @this: java.lang.Thread;
        $z0 = r0.<java.lang.Thread: boolean daemon>;
        return $z0;
    }

    public final void checkAccess()
    {
        java.lang.Thread r0;
        java.lang.SecurityManager r1;

        r0 := @this: java.lang.Thread;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        virtualinvoke r1.<java.lang.SecurityManager: void checkAccess(java.lang.Thread)>(r0);

     label0:
        return;
    }

    public java.lang.String toString()
    {
        java.lang.Thread r0;
        java.lang.ThreadGroup r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7, $r8, $r10, $r11, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r21;
        java.lang.String $r4, $r9, $r12, $r15, $r22;
        int $i0, $i1;

        r0 := @this: java.lang.Thread;
        r1 = virtualinvoke r0.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();
        if r1 == null goto label0;

        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread[");
        $r4 = virtualinvoke r0.<java.lang.Thread: java.lang.String getName()>();
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");
        $i0 = virtualinvoke r0.<java.lang.Thread: int getPriority()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");
        $r9 = virtualinvoke r1.<java.lang.ThreadGroup: java.lang.String getName()>();
        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r12;

     label0:
        $r13 = new java.lang.StringBuilder;
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread[");
        $r15 = virtualinvoke r0.<java.lang.Thread: java.lang.String getName()>();
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");
        $i1 = virtualinvoke r0.<java.lang.Thread: int getPriority()>();
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r22;
    }

    public java.lang.ClassLoader getContextClassLoader()
    {
        java.lang.Thread r0;
        java.lang.SecurityManager r1;
        java.lang.Class $r2;
        java.lang.ClassLoader $r3, $r4, $r5;

        r0 := @this: java.lang.Thread;
        $r3 = r0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>;
        if $r3 != null goto label0;

        return null;

     label0:
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label1;

        $r4 = r0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>;
        $r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        staticinvoke <java.lang.ClassLoader: void checkClassLoaderPermission(java.lang.ClassLoader,java.lang.Class)>($r4, $r2);

     label1:
        $r5 = r0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>;
        return $r5;
    }

    public void setContextClassLoader(java.lang.ClassLoader)
    {
        java.lang.Thread r0;
        java.lang.ClassLoader r1;
        java.lang.SecurityManager r2;
        java.lang.RuntimePermission $r3;

        r0 := @this: java.lang.Thread;
        r1 := @parameter0: java.lang.ClassLoader;
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label0;

        $r3 = new java.lang.RuntimePermission;
        specialinvoke $r3.<java.lang.RuntimePermission: void <init>(java.lang.String)>("setContextClassLoader");
        virtualinvoke r2.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r3);

     label0:
        r0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader> = r1;
        return;
    }

    public static native boolean holdsLock(java.lang.Object);

    public java.lang.StackTraceElement[] getStackTrace()
    {
        java.lang.Thread r0, $r1;
        java.lang.SecurityManager r2;
        java.lang.StackTraceElement[][] r3;
        java.lang.StackTraceElement[] r4, $r6, $r9;
        java.lang.RuntimePermission $r5;
        boolean $z0;
        java.lang.Thread[] $r7;
        java.lang.Exception $r8;

        r0 := @this: java.lang.Thread;
        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        if r0 == $r1 goto label3;

        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label0;

        $r5 = <sun.security.util.SecurityConstants: java.lang.RuntimePermission GET_STACK_TRACE_PERMISSION>;
        virtualinvoke r2.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r5);

     label0:
        $z0 = virtualinvoke r0.<java.lang.Thread: boolean isAlive()>();
        if $z0 != 0 goto label1;

        $r6 = <java.lang.Thread: java.lang.StackTraceElement[] EMPTY_STACK_TRACE>;
        return $r6;

     label1:
        $r7 = newarray (java.lang.Thread)[1];
        $r7[0] = r0;
        r3 = staticinvoke <java.lang.Thread: java.lang.StackTraceElement[][] dumpThreads(java.lang.Thread[])>($r7);
        r4 = r3[0];
        if r4 != null goto label2;

        r4 = <java.lang.Thread: java.lang.StackTraceElement[] EMPTY_STACK_TRACE>;

     label2:
        return r4;

     label3:
        $r8 = new java.lang.Exception;
        specialinvoke $r8.<java.lang.Exception: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.Exception: java.lang.StackTraceElement[] getStackTrace()>();
        return $r9;
    }

    public static java.util.Map getAllStackTraces()
    {
        java.lang.SecurityManager r0;
        java.lang.RuntimePermission $r1, $r6;
        java.lang.Thread[] r2;
        java.lang.StackTraceElement[][] r3;
        java.util.HashMap r4, $r7;
        int i0, $i1, $i2;
        java.lang.StackTraceElement[] r5;
        java.lang.Thread $r8;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r0 == null goto label0;

        $r1 = <sun.security.util.SecurityConstants: java.lang.RuntimePermission GET_STACK_TRACE_PERMISSION>;
        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r1);
        $r6 = <sun.security.util.SecurityConstants: java.lang.RuntimePermission MODIFY_THREADGROUP_PERMISSION>;
        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r6);

     label0:
        r2 = staticinvoke <java.lang.Thread: java.lang.Thread[] getThreads()>();
        r3 = staticinvoke <java.lang.Thread: java.lang.StackTraceElement[][] dumpThreads(java.lang.Thread[])>(r2);
        $r7 = new java.util.HashMap;
        $i1 = lengthof r2;
        specialinvoke $r7.<java.util.HashMap: void <init>(int)>($i1);
        r4 = $r7;
        i0 = 0;

     label1:
        $i2 = lengthof r2;
        if i0 >= $i2 goto label3;

        r5 = r3[i0];
        if r5 == null goto label2;

        $r8 = r2[i0];
        interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r5);

     label2:
        i0 = i0 + 1;
        goto label1;

     label3:
        return r4;
    }

    private static boolean isCCLOverridden(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.ref.ReferenceQueue $r1, $r4;
        java.lang.Thread$WeakClassKey r2, $r6;
        java.lang.Boolean r3;
        java.util.concurrent.ConcurrentMap $r5, $r7, $r9;
        java.lang.Object $r8;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;
        if r0 != class "java/lang/Thread" goto label0;

        return 0;

     label0:
        $r4 = <java.lang.Thread$Caches: java.lang.ref.ReferenceQueue subclassAuditsQueue>;
        $r5 = <java.lang.Thread$Caches: java.util.concurrent.ConcurrentMap subclassAudits>;
        staticinvoke <java.lang.Thread: void processQueue(java.lang.ref.ReferenceQueue,java.util.concurrent.ConcurrentMap)>($r4, $r5);
        $r6 = new java.lang.Thread$WeakClassKey;
        $r1 = <java.lang.Thread$Caches: java.lang.ref.ReferenceQueue subclassAuditsQueue>;
        specialinvoke $r6.<java.lang.Thread$WeakClassKey: void <init>(java.lang.Class,java.lang.ref.ReferenceQueue)>(r0, $r1);
        r2 = $r6;
        $r7 = <java.lang.Thread$Caches: java.util.concurrent.ConcurrentMap subclassAudits>;
        $r8 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r2);
        r3 = (java.lang.Boolean) $r8;
        if r3 != null goto label1;

        $z0 = staticinvoke <java.lang.Thread: boolean auditSubclass(java.lang.Class)>(r0);
        r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);
        $r9 = <java.lang.Thread$Caches: java.util.concurrent.ConcurrentMap subclassAudits>;
        interfaceinvoke $r9.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r2, r3);

     label1:
        $z1 = virtualinvoke r3.<java.lang.Boolean: boolean booleanValue()>();
        return $z1;
    }

    private static boolean auditSubclass(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Thread$1 $r1;
        java.lang.Boolean r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;
        $r1 = new java.lang.Thread$1;
        specialinvoke $r1.<java.lang.Thread$1: void <init>(java.lang.Class)>(r0);
        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        r2 = (java.lang.Boolean) $r3;
        $z0 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();
        return $z0;
    }

    private static native java.lang.StackTraceElement[][] dumpThreads(java.lang.Thread[]);

    private static native java.lang.Thread[] getThreads();

    public long getId()
    {
        java.lang.Thread r0;
        long $l0;

        r0 := @this: java.lang.Thread;
        $l0 = r0.<java.lang.Thread: long tid>;
        return $l0;
    }

    public java.lang.Thread$State getState()
    {
        java.lang.Thread r0;
        int $i0;
        java.lang.Thread$State $r1;

        r0 := @this: java.lang.Thread;
        $i0 = r0.<java.lang.Thread: int threadStatus>;
        $r1 = staticinvoke <sun.misc.VM: java.lang.Thread$State toThreadState(int)>($i0);
        return $r1;
    }

    public static void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
    {
        java.lang.Thread$UncaughtExceptionHandler r0;
        java.lang.SecurityManager r1;
        java.lang.RuntimePermission $r2;

        r0 := @parameter0: java.lang.Thread$UncaughtExceptionHandler;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = new java.lang.RuntimePermission;
        specialinvoke $r2.<java.lang.RuntimePermission: void <init>(java.lang.String)>("setDefaultUncaughtExceptionHandler");
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label0:
        <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler defaultUncaughtExceptionHandler> = r0;
        return;
    }

    public static java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()
    {
        java.lang.Thread$UncaughtExceptionHandler $r0;

        $r0 = <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler defaultUncaughtExceptionHandler>;
        return $r0;
    }

    public java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()
    {
        java.lang.Thread r0;
        java.lang.Thread$UncaughtExceptionHandler $r1, $r2;

        r0 := @this: java.lang.Thread;
        $r1 = r0.<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler>;
        if $r1 == null goto label0;

        $r2 = r0.<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler>;
        goto label1;

     label0:
        $r2 = r0.<java.lang.Thread: java.lang.ThreadGroup group>;

     label1:
        return $r2;
    }

    public void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
    {
        java.lang.Thread r0;
        java.lang.Thread$UncaughtExceptionHandler r1;

        r0 := @this: java.lang.Thread;
        r1 := @parameter0: java.lang.Thread$UncaughtExceptionHandler;
        virtualinvoke r0.<java.lang.Thread: void checkAccess()>();
        r0.<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler> = r1;
        return;
    }

    private void dispatchUncaughtException(java.lang.Throwable)
    {
        java.lang.Thread r0;
        java.lang.Throwable r1;
        java.lang.Thread$UncaughtExceptionHandler $r2;

        r0 := @this: java.lang.Thread;
        r1 := @parameter0: java.lang.Throwable;
        $r2 = virtualinvoke r0.<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>();
        interfaceinvoke $r2.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>(r0, r1);
        return;
    }

    static void processQueue(java.lang.ref.ReferenceQueue, java.util.concurrent.ConcurrentMap)
    {
        java.lang.ref.ReferenceQueue r0;
        java.util.concurrent.ConcurrentMap r1;
        java.lang.ref.Reference r2, $r3;

        r0 := @parameter0: java.lang.ref.ReferenceQueue;
        r1 := @parameter1: java.util.concurrent.ConcurrentMap;

     label0:
        $r3 = virtualinvoke r0.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();
        r2 = $r3;
        if $r3 == null goto label1;

        interfaceinvoke r1.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(r2);
        goto label0;

     label1:
        return;
    }

    private native void setPriority0(int);

    private native void stop0(java.lang.Object);

    private native void suspend0();

    private native void resume0();

    private native void interrupt0();

    private native void setNativeName(java.lang.String);

    static void <clinit>()
    {
        java.lang.StackTraceElement[] $r0;
        java.lang.RuntimePermission $r1;

        staticinvoke <java.lang.Thread: void registerNatives()>();
        $r0 = newarray (java.lang.StackTraceElement)[0];
        <java.lang.Thread: java.lang.StackTraceElement[] EMPTY_STACK_TRACE> = $r0;
        $r1 = new java.lang.RuntimePermission;
        specialinvoke $r1.<java.lang.RuntimePermission: void <init>(java.lang.String)>("enableContextClassLoaderOverride");
        <java.lang.Thread: java.lang.RuntimePermission SUBCLASS_IMPLEMENTATION_PERMISSION> = $r1;
        return;
    }
}
