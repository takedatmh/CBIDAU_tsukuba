final class java.util.zip.ZipCoder extends java.lang.Object
{
    private java.nio.charset.Charset cs;
    private java.nio.charset.CharsetDecoder dec;
    private java.nio.charset.CharsetEncoder enc;
    private boolean isUTF8;
    private java.util.zip.ZipCoder utf8;

    java.lang.String toString(byte[], int)
    {
        java.util.zip.ZipCoder r0;
        byte[] r1;
        int i0, i1, i2, $i3;
        java.nio.charset.CharsetDecoder r2, $r6;
        char[] r3;
        java.nio.CharBuffer r4;
        java.nio.charset.CoderResult r5, r14;
        float $f0, $f1, $f2;
        java.lang.String $r7, $r10, $r13, $r16, $r17;
        boolean $z0, $z1, $z2, $z3;
        sun.nio.cs.ArrayDecoder $r8;
        java.lang.IllegalArgumentException $r9, $r12, $r15;
        java.nio.ByteBuffer r11;

        r0 := @this: java.util.zip.ZipCoder;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        $r6 = specialinvoke r0.<java.util.zip.ZipCoder: java.nio.charset.CharsetDecoder decoder()>();
        r2 = virtualinvoke $r6.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>();
        $f0 = (float) i0;
        $f1 = virtualinvoke r2.<java.nio.charset.CharsetDecoder: float maxCharsPerByte()>();
        $f2 = $f0 * $f1;
        i1 = (int) $f2;
        r3 = newarray (char)[i1];
        if i1 != 0 goto label0;

        $r7 = new java.lang.String;
        specialinvoke $r7.<java.lang.String: void <init>(char[])>(r3);
        return $r7;

     label0:
        $z0 = r0.<java.util.zip.ZipCoder: boolean isUTF8>;
        if $z0 == 0 goto label2;

        $z1 = r2 instanceof sun.nio.cs.ArrayDecoder;
        if $z1 == 0 goto label2;

        $r8 = (sun.nio.cs.ArrayDecoder) r2;
        i2 = interfaceinvoke $r8.<sun.nio.cs.ArrayDecoder: int decode(byte[],int,int,char[])>(r1, 0, i0, r3);
        if i2 != -1 goto label1;

        $r9 = new java.lang.IllegalArgumentException;
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MALFORMED");
        throw $r9;

     label1:
        $r10 = new java.lang.String;
        specialinvoke $r10.<java.lang.String: void <init>(char[],int,int)>(r3, 0, i2);
        return $r10;

     label2:
        r11 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(r1, 0, i0);
        r4 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(r3);
        r5 = virtualinvoke r2.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>(r11, r4, 1);
        $z2 = virtualinvoke r5.<java.nio.charset.CoderResult: boolean isUnderflow()>();
        if $z2 != 0 goto label3;

        $r12 = new java.lang.IllegalArgumentException;
        $r13 = virtualinvoke r5.<java.nio.charset.CoderResult: java.lang.String toString()>();
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);
        throw $r12;

     label3:
        r14 = virtualinvoke r2.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>(r4);
        $z3 = virtualinvoke r14.<java.nio.charset.CoderResult: boolean isUnderflow()>();
        if $z3 != 0 goto label4;

        $r15 = new java.lang.IllegalArgumentException;
        $r16 = virtualinvoke r14.<java.nio.charset.CoderResult: java.lang.String toString()>();
        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);
        throw $r15;

     label4:
        $r17 = new java.lang.String;
        $i3 = virtualinvoke r4.<java.nio.CharBuffer: int position()>();
        specialinvoke $r17.<java.lang.String: void <init>(char[],int,int)>(r3, 0, $i3);
        return $r17;
    }

    java.lang.String toString(byte[])
    {
        java.util.zip.ZipCoder r0;
        byte[] r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: java.util.zip.ZipCoder;
        r1 := @parameter0: byte[];
        $i0 = lengthof r1;
        $r2 = virtualinvoke r0.<java.util.zip.ZipCoder: java.lang.String toString(byte[],int)>(r1, $i0);
        return $r2;
    }

    byte[] getBytes(java.lang.String)
    {
        java.util.zip.ZipCoder r0;
        java.lang.String r1, $r13, $r16;
        java.nio.charset.CharsetEncoder r2, $r7;
        char[] r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        byte[] r4, $r10, $r17;
        java.nio.CharBuffer r5;
        java.nio.charset.CoderResult r6, r14;
        float $f0, $f1, $f2;
        boolean $z0, $z1, $z2, $z3;
        sun.nio.cs.ArrayEncoder $r8;
        java.lang.IllegalArgumentException $r9, $r12, $r15;
        java.nio.ByteBuffer r11;

        r0 := @this: java.util.zip.ZipCoder;
        r1 := @parameter0: java.lang.String;
        $r7 = specialinvoke r0.<java.util.zip.ZipCoder: java.nio.charset.CharsetEncoder encoder()>();
        r2 = virtualinvoke $r7.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>();
        r3 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();
        $i2 = lengthof r3;
        $f0 = (float) $i2;
        $f1 = virtualinvoke r2.<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>();
        $f2 = $f0 * $f1;
        i0 = (int) $f2;
        r4 = newarray (byte)[i0];
        if i0 != 0 goto label0;

        return r4;

     label0:
        $z0 = r0.<java.util.zip.ZipCoder: boolean isUTF8>;
        if $z0 == 0 goto label2;

        $z1 = r2 instanceof sun.nio.cs.ArrayEncoder;
        if $z1 == 0 goto label2;

        $r8 = (sun.nio.cs.ArrayEncoder) r2;
        $i3 = lengthof r3;
        i1 = interfaceinvoke $r8.<sun.nio.cs.ArrayEncoder: int encode(char[],int,int,byte[])>(r3, 0, $i3, r4);
        if i1 != -1 goto label1;

        $r9 = new java.lang.IllegalArgumentException;
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MALFORMED");
        throw $r9;

     label1:
        $r10 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r4, i1);
        return $r10;

     label2:
        r11 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r4);
        r5 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(r3);
        r6 = virtualinvoke r2.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>(r5, r11, 1);
        $z2 = virtualinvoke r6.<java.nio.charset.CoderResult: boolean isUnderflow()>();
        if $z2 != 0 goto label3;

        $r12 = new java.lang.IllegalArgumentException;
        $r13 = virtualinvoke r6.<java.nio.charset.CoderResult: java.lang.String toString()>();
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);
        throw $r12;

     label3:
        r14 = virtualinvoke r2.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>(r11);
        $z3 = virtualinvoke r14.<java.nio.charset.CoderResult: boolean isUnderflow()>();
        if $z3 != 0 goto label4;

        $r15 = new java.lang.IllegalArgumentException;
        $r16 = virtualinvoke r14.<java.nio.charset.CoderResult: java.lang.String toString()>();
        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);
        throw $r15;

     label4:
        $i4 = virtualinvoke r11.<java.nio.ByteBuffer: int position()>();
        $i5 = lengthof r4;
        if $i4 != $i5 goto label5;

        return r4;

     label5:
        $i6 = virtualinvoke r11.<java.nio.ByteBuffer: int position()>();
        $r17 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r4, $i6);
        return $r17;
    }

    byte[] getBytesUTF8(java.lang.String)
    {
        java.util.zip.ZipCoder r0, $r4, $r5, $r6;
        java.lang.String r1;
        java.nio.charset.Charset $r2;
        boolean $z0;
        byte[] $r3, $r7;

        r0 := @this: java.util.zip.ZipCoder;
        r1 := @parameter0: java.lang.String;
        $z0 = r0.<java.util.zip.ZipCoder: boolean isUTF8>;
        if $z0 == 0 goto label0;

        $r3 = virtualinvoke r0.<java.util.zip.ZipCoder: byte[] getBytes(java.lang.String)>(r1);
        return $r3;

     label0:
        $r4 = r0.<java.util.zip.ZipCoder: java.util.zip.ZipCoder utf8>;
        if $r4 != null goto label1;

        $r5 = new java.util.zip.ZipCoder;
        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
        specialinvoke $r5.<java.util.zip.ZipCoder: void <init>(java.nio.charset.Charset)>($r2);
        r0.<java.util.zip.ZipCoder: java.util.zip.ZipCoder utf8> = $r5;

     label1:
        $r6 = r0.<java.util.zip.ZipCoder: java.util.zip.ZipCoder utf8>;
        $r7 = virtualinvoke $r6.<java.util.zip.ZipCoder: byte[] getBytes(java.lang.String)>(r1);
        return $r7;
    }

    java.lang.String toStringUTF8(byte[], int)
    {
        java.util.zip.ZipCoder r0, $r4, $r5, $r6;
        byte[] r1;
        int i0;
        java.nio.charset.Charset $r2;
        boolean $z0;
        java.lang.String $r3, $r7;

        r0 := @this: java.util.zip.ZipCoder;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        $z0 = r0.<java.util.zip.ZipCoder: boolean isUTF8>;
        if $z0 == 0 goto label0;

        $r3 = virtualinvoke r0.<java.util.zip.ZipCoder: java.lang.String toString(byte[],int)>(r1, i0);
        return $r3;

     label0:
        $r4 = r0.<java.util.zip.ZipCoder: java.util.zip.ZipCoder utf8>;
        if $r4 != null goto label1;

        $r5 = new java.util.zip.ZipCoder;
        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
        specialinvoke $r5.<java.util.zip.ZipCoder: void <init>(java.nio.charset.Charset)>($r2);
        r0.<java.util.zip.ZipCoder: java.util.zip.ZipCoder utf8> = $r5;

     label1:
        $r6 = r0.<java.util.zip.ZipCoder: java.util.zip.ZipCoder utf8>;
        $r7 = virtualinvoke $r6.<java.util.zip.ZipCoder: java.lang.String toString(byte[],int)>(r1, i0);
        return $r7;
    }

    boolean isUTF8()
    {
        java.util.zip.ZipCoder r0;
        boolean $z0;

        r0 := @this: java.util.zip.ZipCoder;
        $z0 = r0.<java.util.zip.ZipCoder: boolean isUTF8>;
        return $z0;
    }

    private void <init>(java.nio.charset.Charset)
    {
        java.util.zip.ZipCoder r0;
        java.nio.charset.Charset r1, $r2;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: java.util.zip.ZipCoder;
        r1 := @parameter0: java.nio.charset.Charset;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.zip.ZipCoder: java.nio.charset.Charset cs> = r1;
        $r3 = virtualinvoke r1.<java.nio.charset.Charset: java.lang.String name()>();
        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
        $r4 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);
        r0.<java.util.zip.ZipCoder: boolean isUTF8> = $z0;
        return;
    }

    static java.util.zip.ZipCoder get(java.nio.charset.Charset)
    {
        java.nio.charset.Charset r0;
        java.util.zip.ZipCoder $r1;

        r0 := @parameter0: java.nio.charset.Charset;
        $r1 = new java.util.zip.ZipCoder;
        specialinvoke $r1.<java.util.zip.ZipCoder: void <init>(java.nio.charset.Charset)>(r0);
        return $r1;
    }

    private java.nio.charset.CharsetDecoder decoder()
    {
        java.util.zip.ZipCoder r0;
        java.nio.charset.CodingErrorAction $r1, $r6;
        java.nio.charset.CharsetDecoder $r2, $r4, $r5, $r7, $r8;
        java.nio.charset.Charset $r3;

        r0 := @this: java.util.zip.ZipCoder;
        $r2 = r0.<java.util.zip.ZipCoder: java.nio.charset.CharsetDecoder dec>;
        if $r2 != null goto label0;

        $r3 = r0.<java.util.zip.ZipCoder: java.nio.charset.Charset cs>;
        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();
        $r1 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;
        $r5 = virtualinvoke $r4.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r1);
        $r6 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;
        $r7 = virtualinvoke $r5.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r6);
        r0.<java.util.zip.ZipCoder: java.nio.charset.CharsetDecoder dec> = $r7;

     label0:
        $r8 = r0.<java.util.zip.ZipCoder: java.nio.charset.CharsetDecoder dec>;
        return $r8;
    }

    private java.nio.charset.CharsetEncoder encoder()
    {
        java.util.zip.ZipCoder r0;
        java.nio.charset.CodingErrorAction $r1, $r6;
        java.nio.charset.CharsetEncoder $r2, $r4, $r5, $r7, $r8;
        java.nio.charset.Charset $r3;

        r0 := @this: java.util.zip.ZipCoder;
        $r2 = r0.<java.util.zip.ZipCoder: java.nio.charset.CharsetEncoder enc>;
        if $r2 != null goto label0;

        $r3 = r0.<java.util.zip.ZipCoder: java.nio.charset.Charset cs>;
        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();
        $r1 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;
        $r5 = virtualinvoke $r4.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r1);
        $r6 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;
        $r7 = virtualinvoke $r5.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r6);
        r0.<java.util.zip.ZipCoder: java.nio.charset.CharsetEncoder enc> = $r7;

     label0:
        $r8 = r0.<java.util.zip.ZipCoder: java.nio.charset.CharsetEncoder enc>;
        return $r8;
    }
}
