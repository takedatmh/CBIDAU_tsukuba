class sun.nio.fs.UnixFileSystem$FileStoreIterator extends java.lang.Object implements java.util.Iterator
{
    private final java.util.Iterator entries;
    private java.nio.file.FileStore next;
    static final boolean $assertionsDisabled;
    final sun.nio.fs.UnixFileSystem this$0;

    void <init>(sun.nio.fs.UnixFileSystem)
    {
        sun.nio.fs.UnixFileSystem$FileStoreIterator r0;
        sun.nio.fs.UnixFileSystem r1;
        java.lang.Iterable $r2;
        java.util.Iterator $r3;

        r0 := @this: sun.nio.fs.UnixFileSystem$FileStoreIterator;
        r1 := @parameter0: sun.nio.fs.UnixFileSystem;
        r0.<sun.nio.fs.UnixFileSystem$FileStoreIterator: sun.nio.fs.UnixFileSystem this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = virtualinvoke r1.<sun.nio.fs.UnixFileSystem: java.lang.Iterable getMountEntries()>();
        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();
        r0.<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.util.Iterator entries> = $r3;
        return;
    }

    private java.nio.file.FileStore readNext()
    {
        sun.nio.fs.UnixFileSystem$FileStoreIterator r0;
        boolean $z0, $z1, $z2, $z3;
        sun.nio.fs.UnixMountEntry r1;
        java.lang.SecurityManager r2;
        java.lang.SecurityException r3, $r10;
        java.lang.AssertionError $r4;
        java.util.Iterator $r5, $r6;
        java.lang.Object $r7;
        java.lang.String $r8;
        byte[] $r9;
        sun.nio.fs.UnixFileSystem $r11;
        java.nio.file.FileStore $r12;
        java.io.IOException $r13, r14;

        r0 := @this: sun.nio.fs.UnixFileSystem$FileStoreIterator;
        $z0 = <sun.nio.fs.UnixFileSystem$FileStoreIterator: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r0);
        if $z1 != 0 goto label0;

        $r4 = new java.lang.AssertionError;
        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();
        throw $r4;

     label0:
        $r5 = r0.<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.util.Iterator entries>;
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();
        if $z2 != 0 goto label1;

        return null;

     label1:
        $r6 = r0.<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.util.Iterator entries>;
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();
        r1 = (sun.nio.fs.UnixMountEntry) $r7;
        $z3 = virtualinvoke r1.<sun.nio.fs.UnixMountEntry: boolean isIgnored()>();
        if $z3 == 0 goto label2;

        goto label0;

     label2:
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label6;

     label3:
        $r8 = new java.lang.String;
        $r9 = virtualinvoke r1.<sun.nio.fs.UnixMountEntry: byte[] dir()>();
        specialinvoke $r8.<java.lang.String: void <init>(byte[])>($r9);
        virtualinvoke r2.<java.lang.SecurityManager: void checkRead(java.lang.String)>($r8);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;
        r3 = $r10;
        goto label0;

     label6:
        $r11 = r0.<sun.nio.fs.UnixFileSystem$FileStoreIterator: sun.nio.fs.UnixFileSystem this$0>;
        $r12 = virtualinvoke $r11.<sun.nio.fs.UnixFileSystem: java.nio.file.FileStore getFileStore(sun.nio.fs.UnixMountEntry)>(r1);

     label7:
        return $r12;

     label8:
        $r13 := @caughtexception;
        r14 = $r13;
        goto label0;

        catch java.lang.SecurityException from label3 to label4 with label5;
        catch java.io.IOException from label6 to label7 with label8;
    }

    public synchronized boolean hasNext()
    {
        sun.nio.fs.UnixFileSystem$FileStoreIterator r0;
        java.nio.file.FileStore $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: sun.nio.fs.UnixFileSystem$FileStoreIterator;
        $r1 = r0.<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore next>;
        if $r1 == null goto label0;

        return 1;

     label0:
        $r2 = specialinvoke r0.<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>();
        r0.<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore next> = $r2;
        $r3 = r0.<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore next>;
        if $r3 == null goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public synchronized java.nio.file.FileStore next()
    {
        sun.nio.fs.UnixFileSystem$FileStoreIterator r0;
        java.nio.file.FileStore r1, $r2, $r3, $r4;
        java.util.NoSuchElementException $r5;

        r0 := @this: sun.nio.fs.UnixFileSystem$FileStoreIterator;
        $r2 = r0.<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore next>;
        if $r2 != null goto label0;

        $r3 = specialinvoke r0.<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore readNext()>();
        r0.<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore next> = $r3;

     label0:
        $r4 = r0.<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore next>;
        if $r4 != null goto label1;

        $r5 = new java.util.NoSuchElementException;
        specialinvoke $r5.<java.util.NoSuchElementException: void <init>()>();
        throw $r5;

     label1:
        r1 = r0.<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore next>;
        r0.<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore next> = null;
        return r1;
    }

    public void remove()
    {
        sun.nio.fs.UnixFileSystem$FileStoreIterator r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: sun.nio.fs.UnixFileSystem$FileStoreIterator;
        $r1 = new java.lang.UnsupportedOperationException;
        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r1;
    }

    public volatile java.lang.Object next()
    {
        sun.nio.fs.UnixFileSystem$FileStoreIterator r0;
        java.nio.file.FileStore $r1;

        r0 := @this: sun.nio.fs.UnixFileSystem$FileStoreIterator;
        $r1 = virtualinvoke r0.<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore next()>();
        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/nio/fs/UnixFileSystem";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.fs.UnixFileSystem$FileStoreIterator: boolean $assertionsDisabled> = $z1;
        return;
    }
}
