abstract class java.util.concurrent.LinkedBlockingDeque$AbstractItr extends java.lang.Object implements java.util.Iterator
{
    java.util.concurrent.LinkedBlockingDeque$Node next;
    java.lang.Object nextItem;
    private java.util.concurrent.LinkedBlockingDeque$Node lastRet;
    final java.util.concurrent.LinkedBlockingDeque this$0;

    abstract java.util.concurrent.LinkedBlockingDeque$Node firstNode();

    abstract java.util.concurrent.LinkedBlockingDeque$Node nextNode(java.util.concurrent.LinkedBlockingDeque$Node);

    void <init>(java.util.concurrent.LinkedBlockingDeque)
    {
        java.util.concurrent.LinkedBlockingDeque$AbstractItr r0;
        java.util.concurrent.LinkedBlockingDeque r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r9;
        java.util.concurrent.LinkedBlockingDeque$Node $r4, $r6, $r8;
        java.lang.Object $r7;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque$AbstractItr;
        r1 := @parameter0: java.util.concurrent.LinkedBlockingDeque;
        r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r2 = r1.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        $r4 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node firstNode()>();
        r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node next> = $r4;
        $r6 = r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node next>;
        if $r6 != null goto label1;

        $r7 = null;
        goto label2;

     label1:
        $r8 = r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node next>;
        $r7 = $r8.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item>;

     label2:
        r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object nextItem> = $r7;

     label3:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label7;

     label4:
        $r9 := @caughtexception;

     label5:
        r3 = $r9;

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private java.util.concurrent.LinkedBlockingDeque$Node succ(java.util.concurrent.LinkedBlockingDeque$Node)
    {
        java.util.concurrent.LinkedBlockingDeque$AbstractItr r0;
        java.util.concurrent.LinkedBlockingDeque$Node r1, r2, $r4;
        java.lang.Object $r3;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque$AbstractItr;
        r1 := @parameter0: java.util.concurrent.LinkedBlockingDeque$Node;

     label0:
        r2 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node nextNode(java.util.concurrent.LinkedBlockingDeque$Node)>(r1);
        if r2 != null goto label1;

        return null;

     label1:
        $r3 = r2.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item>;
        if $r3 == null goto label2;

        return r2;

     label2:
        if r2 != r1 goto label3;

        $r4 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node firstNode()>();
        return $r4;

     label3:
        r1 = r2;
        goto label0;
    }

    void advance()
    {
        java.util.concurrent.LinkedBlockingDeque$AbstractItr r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r10;
        java.util.concurrent.LinkedBlockingDeque $r3;
        java.util.concurrent.LinkedBlockingDeque$Node $r4, $r5, $r7, $r9;
        java.lang.Object $r8;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque$AbstractItr;
        $r3 = r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque this$0>;
        r1 = $r3.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        $r4 = r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node next>;
        $r5 = specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node succ(java.util.concurrent.LinkedBlockingDeque$Node)>($r4);
        r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node next> = $r5;
        $r7 = r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node next>;
        if $r7 != null goto label1;

        $r8 = null;
        goto label2;

     label1:
        $r9 = r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node next>;
        $r8 = $r9.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item>;

     label2:
        r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object nextItem> = $r8;

     label3:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label7;

     label4:
        $r10 := @caughtexception;

     label5:
        r2 = $r10;

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean hasNext()
    {
        java.util.concurrent.LinkedBlockingDeque$AbstractItr r0;
        java.util.concurrent.LinkedBlockingDeque$Node $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque$AbstractItr;
        $r1 = r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node next>;
        if $r1 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.Object next()
    {
        java.util.concurrent.LinkedBlockingDeque$AbstractItr r0;
        java.lang.Object r1;
        java.util.concurrent.LinkedBlockingDeque$Node $r2, $r4;
        java.util.NoSuchElementException $r3;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque$AbstractItr;
        $r2 = r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node next>;
        if $r2 != null goto label0;

        $r3 = new java.util.NoSuchElementException;
        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();
        throw $r3;

     label0:
        $r4 = r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node next>;
        r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node lastRet> = $r4;
        r1 = r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object nextItem>;
        virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: void advance()>();
        return r1;
    }

    public void remove()
    {
        java.util.concurrent.LinkedBlockingDeque$AbstractItr r0;
        java.util.concurrent.LinkedBlockingDeque$Node r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r8;
        java.lang.IllegalStateException $r4;
        java.util.concurrent.LinkedBlockingDeque $r5, $r7;
        java.lang.Object $r6;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque$AbstractItr;
        r1 = r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node lastRet>;
        if r1 != null goto label0;

        $r4 = new java.lang.IllegalStateException;
        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();
        throw $r4;

     label0:
        r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque$Node lastRet> = null;
        $r5 = r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque this$0>;
        r2 = $r5.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r6 = r1.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item>;
        if $r6 == null goto label2;

        $r7 = r0.<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.util.concurrent.LinkedBlockingDeque this$0>;
        virtualinvoke $r7.<java.util.concurrent.LinkedBlockingDeque: void unlink(java.util.concurrent.LinkedBlockingDeque$Node)>(r1);

     label2:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label6;

     label3:
        $r8 := @caughtexception;

     label4:
        r3 = $r8;

     label5:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
