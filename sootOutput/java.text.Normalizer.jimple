public final class java.text.Normalizer extends java.lang.Object
{

    private void <init>()
    {
        java.text.Normalizer r0;

        r0 := @this: java.text.Normalizer;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static java.lang.String normalize(java.lang.CharSequence, java.text.Normalizer$Form)
    {
        java.lang.CharSequence r0;
        java.text.Normalizer$Form r1;
        java.lang.String $r2, $r3;

        r0 := @parameter0: java.lang.CharSequence;
        r1 := @parameter1: java.text.Normalizer$Form;
        $r2 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();
        $r3 = staticinvoke <sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form)>($r2, r1);
        return $r3;
    }

    public static boolean isNormalized(java.lang.CharSequence, java.text.Normalizer$Form)
    {
        java.lang.CharSequence r0;
        java.text.Normalizer$Form r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;
        r1 := @parameter1: java.text.Normalizer$Form;
        $r2 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();
        $z0 = staticinvoke <sun.text.normalizer.NormalizerBase: boolean isNormalized(java.lang.String,java.text.Normalizer$Form)>($r2, r1);
        return $z0;
    }
}
