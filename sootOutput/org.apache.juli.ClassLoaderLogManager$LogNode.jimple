public final class org.apache.juli.ClassLoaderLogManager$LogNode extends java.lang.Object
{
    java.util.logging.Logger logger;
    final java.util.Map children;
    final org.apache.juli.ClassLoaderLogManager$LogNode parent;

    void <init>(org.apache.juli.ClassLoaderLogManager$LogNode, java.util.logging.Logger)
    {
        org.apache.juli.ClassLoaderLogManager$LogNode r0, r1;
        java.util.logging.Logger r2;
        java.util.HashMap $r3;

        r0 := @this: org.apache.juli.ClassLoaderLogManager$LogNode;
        r1 := @parameter0: org.apache.juli.ClassLoaderLogManager$LogNode;
        r2 := @parameter1: java.util.logging.Logger;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r3 = new java.util.HashMap;
        specialinvoke $r3.<java.util.HashMap: void <init>()>();
        r0.<org.apache.juli.ClassLoaderLogManager$LogNode: java.util.Map children> = $r3;
        r0.<org.apache.juli.ClassLoaderLogManager$LogNode: org.apache.juli.ClassLoaderLogManager$LogNode parent> = r1;
        r0.<org.apache.juli.ClassLoaderLogManager$LogNode: java.util.logging.Logger logger> = r2;
        return;
    }

    void <init>(org.apache.juli.ClassLoaderLogManager$LogNode)
    {
        org.apache.juli.ClassLoaderLogManager$LogNode r0, r1;

        r0 := @this: org.apache.juli.ClassLoaderLogManager$LogNode;
        r1 := @parameter0: org.apache.juli.ClassLoaderLogManager$LogNode;
        specialinvoke r0.<org.apache.juli.ClassLoaderLogManager$LogNode: void <init>(org.apache.juli.ClassLoaderLogManager$LogNode,java.util.logging.Logger)>(r1, null);
        return;
    }

    org.apache.juli.ClassLoaderLogManager$LogNode findNode(java.lang.String)
    {
        org.apache.juli.ClassLoaderLogManager$LogNode r0, r2, r4, $r9;
        java.lang.String r1, r3, $r6;
        int i0, $i1;
        java.util.logging.Logger $r5;
        boolean $z0;
        java.util.Map $r7, $r10;
        java.lang.Object $r8;

        r0 := @this: org.apache.juli.ClassLoaderLogManager$LogNode;
        r1 := @parameter0: java.lang.String;
        r2 = r0;
        $r5 = r0.<org.apache.juli.ClassLoaderLogManager$LogNode: java.util.logging.Logger logger>;
        $r6 = virtualinvoke $r5.<java.util.logging.Logger: java.lang.String getName()>();
        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z0 == 0 goto label4;

        return r0;

     label0:
        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(46);
        if i0 >= 0 goto label1;

        r3 = r1;
        r1 = null;
        goto label2;

     label1:
        r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        $i1 = i0 + 1;
        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

     label2:
        $r7 = r2.<org.apache.juli.ClassLoaderLogManager$LogNode: java.util.Map children>;
        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);
        r4 = (org.apache.juli.ClassLoaderLogManager$LogNode) $r8;
        if r4 != null goto label3;

        $r9 = new org.apache.juli.ClassLoaderLogManager$LogNode;
        specialinvoke $r9.<org.apache.juli.ClassLoaderLogManager$LogNode: void <init>(org.apache.juli.ClassLoaderLogManager$LogNode)>(r2);
        r4 = $r9;
        $r10 = r2.<org.apache.juli.ClassLoaderLogManager$LogNode: java.util.Map children>;
        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

     label3:
        r2 = r4;

     label4:
        if r1 != null goto label0;

        return r2;
    }

    java.util.logging.Logger findParentLogger()
    {
        org.apache.juli.ClassLoaderLogManager$LogNode r0, r2;
        java.util.logging.Logger r1;

        r0 := @this: org.apache.juli.ClassLoaderLogManager$LogNode;
        r1 = null;
        r2 = r0.<org.apache.juli.ClassLoaderLogManager$LogNode: org.apache.juli.ClassLoaderLogManager$LogNode parent>;
        goto label1;

     label0:
        r1 = r2.<org.apache.juli.ClassLoaderLogManager$LogNode: java.util.logging.Logger logger>;
        r2 = r2.<org.apache.juli.ClassLoaderLogManager$LogNode: org.apache.juli.ClassLoaderLogManager$LogNode parent>;

     label1:
        if r2 == null goto label2;

        if r1 == null goto label0;

     label2:
        return r1;
    }

    void setParentLogger(java.util.logging.Logger)
    {
        org.apache.juli.ClassLoaderLogManager$LogNode r0, r3;
        java.util.logging.Logger r1, $r7, $r8;
        java.util.Iterator r2;
        java.util.Map $r4;
        java.util.Collection $r5;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: org.apache.juli.ClassLoaderLogManager$LogNode;
        r1 := @parameter0: java.util.logging.Logger;
        $r4 = r0.<org.apache.juli.ClassLoaderLogManager$LogNode: java.util.Map children>;
        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();
        r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();
        goto label2;

     label0:
        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (org.apache.juli.ClassLoaderLogManager$LogNode) $r6;
        $r7 = r3.<org.apache.juli.ClassLoaderLogManager$LogNode: java.util.logging.Logger logger>;
        if $r7 != null goto label1;

        virtualinvoke r3.<org.apache.juli.ClassLoaderLogManager$LogNode: void setParentLogger(java.util.logging.Logger)>(r1);
        goto label2;

     label1:
        $r8 = r3.<org.apache.juli.ClassLoaderLogManager$LogNode: java.util.logging.Logger logger>;
        staticinvoke <org.apache.juli.ClassLoaderLogManager: void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)>($r8, r1);

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 != 0 goto label0;

        return;
    }
}
