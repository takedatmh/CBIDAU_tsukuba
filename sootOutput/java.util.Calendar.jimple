public abstract class java.util.Calendar extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable, java.lang.Comparable
{
    public static final int ERA;
    public static final int YEAR;
    public static final int MONTH;
    public static final int WEEK_OF_YEAR;
    public static final int WEEK_OF_MONTH;
    public static final int DATE;
    public static final int DAY_OF_MONTH;
    public static final int DAY_OF_YEAR;
    public static final int DAY_OF_WEEK;
    public static final int DAY_OF_WEEK_IN_MONTH;
    public static final int AM_PM;
    public static final int HOUR;
    public static final int HOUR_OF_DAY;
    public static final int MINUTE;
    public static final int SECOND;
    public static final int MILLISECOND;
    public static final int ZONE_OFFSET;
    public static final int DST_OFFSET;
    public static final int FIELD_COUNT;
    public static final int SUNDAY;
    public static final int MONDAY;
    public static final int TUESDAY;
    public static final int WEDNESDAY;
    public static final int THURSDAY;
    public static final int FRIDAY;
    public static final int SATURDAY;
    public static final int JANUARY;
    public static final int FEBRUARY;
    public static final int MARCH;
    public static final int APRIL;
    public static final int MAY;
    public static final int JUNE;
    public static final int JULY;
    public static final int AUGUST;
    public static final int SEPTEMBER;
    public static final int OCTOBER;
    public static final int NOVEMBER;
    public static final int DECEMBER;
    public static final int UNDECIMBER;
    public static final int AM;
    public static final int PM;
    public static final int ALL_STYLES;
    public static final int SHORT;
    public static final int LONG;
    protected int[] fields;
    protected boolean[] isSet;
    private transient int[] stamp;
    protected long time;
    protected boolean isTimeSet;
    protected boolean areFieldsSet;
    transient boolean areAllFieldsSet;
    private boolean lenient;
    private java.util.TimeZone zone;
    private transient boolean sharedZone;
    private int firstDayOfWeek;
    private int minimalDaysInFirstWeek;
    private static final java.util.concurrent.ConcurrentMap cachedLocaleData;
    private static final int UNSET;
    private static final int COMPUTED;
    private static final int MINIMUM_USER_STAMP;
    static final int ALL_FIELDS;
    private int nextStamp;
    static final int currentSerialVersion;
    private int serialVersionOnStream;
    static final long serialVersionUID;
    static final int ERA_MASK;
    static final int YEAR_MASK;
    static final int MONTH_MASK;
    static final int WEEK_OF_YEAR_MASK;
    static final int WEEK_OF_MONTH_MASK;
    static final int DAY_OF_MONTH_MASK;
    static final int DATE_MASK;
    static final int DAY_OF_YEAR_MASK;
    static final int DAY_OF_WEEK_MASK;
    static final int DAY_OF_WEEK_IN_MONTH_MASK;
    static final int AM_PM_MASK;
    static final int HOUR_MASK;
    static final int HOUR_OF_DAY_MASK;
    static final int MINUTE_MASK;
    static final int SECOND_MASK;
    static final int MILLISECOND_MASK;
    static final int ZONE_OFFSET_MASK;
    static final int DST_OFFSET_MASK;
    private static final java.lang.String[] FIELD_NAME;
    static final boolean $assertionsDisabled;

    protected void <init>()
    {
        java.util.Calendar r0;
        java.util.TimeZone $r1;
        java.util.Locale$Category $r2;
        java.util.Locale $r3;

        r0 := @this: java.util.Calendar;
        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefaultRef()>();
        $r2 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r2);
        specialinvoke r0.<java.util.Calendar: void <init>(java.util.TimeZone,java.util.Locale)>($r1, $r3);
        r0.<java.util.Calendar: boolean sharedZone> = 1;
        return;
    }

    protected void <init>(java.util.TimeZone, java.util.Locale)
    {
        java.util.Calendar r0;
        java.util.TimeZone r1;
        java.util.Locale r2;
        int[] $r3, $r5;
        boolean[] $r4;

        r0 := @this: java.util.Calendar;
        r1 := @parameter0: java.util.TimeZone;
        r2 := @parameter1: java.util.Locale;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.Calendar: boolean lenient> = 1;
        r0.<java.util.Calendar: boolean sharedZone> = 0;
        r0.<java.util.Calendar: int nextStamp> = 2;
        r0.<java.util.Calendar: int serialVersionOnStream> = 1;
        $r3 = newarray (int)[17];
        r0.<java.util.Calendar: int[] fields> = $r3;
        $r4 = newarray (boolean)[17];
        r0.<java.util.Calendar: boolean[] isSet> = $r4;
        $r5 = newarray (int)[17];
        r0.<java.util.Calendar: int[] stamp> = $r5;
        r0.<java.util.Calendar: java.util.TimeZone zone> = r1;
        specialinvoke r0.<java.util.Calendar: void setWeekCountData(java.util.Locale)>(r2);
        return;
    }

    public static java.util.Calendar getInstance()
    {
        java.util.TimeZone $r0;
        java.util.Locale$Category $r1;
        java.util.Calendar r2;
        java.util.Locale $r3;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefaultRef()>();
        $r1 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r1);
        r2 = staticinvoke <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>($r0, $r3);
        r2.<java.util.Calendar: boolean sharedZone> = 1;
        return r2;
    }

    public static java.util.Calendar getInstance(java.util.TimeZone)
    {
        java.util.TimeZone r0;
        java.util.Locale$Category $r1;
        java.util.Locale $r2;
        java.util.Calendar $r3;

        r0 := @parameter0: java.util.TimeZone;
        $r1 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r1);
        $r3 = staticinvoke <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>(r0, $r2);
        return $r3;
    }

    public static java.util.Calendar getInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.util.TimeZone $r1;
        java.util.Calendar r2;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefaultRef()>();
        r2 = staticinvoke <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>($r1, r0);
        r2.<java.util.Calendar: boolean sharedZone> = 1;
        return r2;
    }

    public static java.util.Calendar getInstance(java.util.TimeZone, java.util.Locale)
    {
        java.util.TimeZone r0;
        java.util.Locale r1;
        java.util.Calendar $r2;

        r0 := @parameter0: java.util.TimeZone;
        r1 := @parameter1: java.util.Locale;
        $r2 = staticinvoke <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>(r0, r1);
        return $r2;
    }

    private static java.util.Calendar createCalendar(java.util.TimeZone, java.util.Locale)
    {
        java.util.TimeZone r0;
        java.util.Locale r1;
        null_type n0;
        java.lang.String r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;
        sun.util.BuddhistCalendar $r7, $r11;
        java.util.Calendar r8;
        java.util.GregorianCalendar $r9, $r12;
        java.util.JapaneseImperialCalendar $r10;

        r0 := @parameter0: java.util.TimeZone;
        r1 := @parameter1: java.util.Locale;
        n0 = null;
        r2 = virtualinvoke r1.<java.util.Locale: java.lang.String getUnicodeLocaleType(java.lang.String)>("ca");
        if r2 != null goto label1;

        $r3 = "th";
        $r4 = virtualinvoke r1.<java.util.Locale: java.lang.String getLanguage()>();
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);
        if $z0 == 0 goto label0;

        $r5 = "TH";
        $r6 = virtualinvoke r1.<java.util.Locale: java.lang.String getCountry()>();
        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);
        if $z1 == 0 goto label0;

        $r7 = new sun.util.BuddhistCalendar;
        specialinvoke $r7.<sun.util.BuddhistCalendar: void <init>(java.util.TimeZone,java.util.Locale)>(r0, r1);
        r8 = $r7;
        goto label4;

     label0:
        $r9 = new java.util.GregorianCalendar;
        specialinvoke $r9.<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>(r0, r1);
        r8 = $r9;
        goto label4;

     label1:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("japanese");
        if $z2 == 0 goto label2;

        $r10 = new java.util.JapaneseImperialCalendar;
        specialinvoke $r10.<java.util.JapaneseImperialCalendar: void <init>(java.util.TimeZone,java.util.Locale)>(r0, r1);
        r8 = $r10;
        goto label4;

     label2:
        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("buddhist");
        if $z3 == 0 goto label3;

        $r11 = new sun.util.BuddhistCalendar;
        specialinvoke $r11.<sun.util.BuddhistCalendar: void <init>(java.util.TimeZone,java.util.Locale)>(r0, r1);
        r8 = $r11;
        goto label4;

     label3:
        $r12 = new java.util.GregorianCalendar;
        specialinvoke $r12.<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>(r0, r1);
        r8 = $r12;

     label4:
        return r8;
    }

    public static synchronized java.util.Locale[] getAvailableLocales()
    {
        java.util.Locale[] $r0;

        $r0 = staticinvoke <java.text.DateFormat: java.util.Locale[] getAvailableLocales()>();
        return $r0;
    }

    protected abstract void computeTime();

    protected abstract void computeFields();

    public final java.util.Date getTime()
    {
        java.util.Calendar r0;
        java.util.Date $r1;
        long $l0;

        r0 := @this: java.util.Calendar;
        $r1 = new java.util.Date;
        $l0 = virtualinvoke r0.<java.util.Calendar: long getTimeInMillis()>();
        specialinvoke $r1.<java.util.Date: void <init>(long)>($l0);
        return $r1;
    }

    public final void setTime(java.util.Date)
    {
        java.util.Calendar r0;
        java.util.Date r1;
        long $l0;

        r0 := @this: java.util.Calendar;
        r1 := @parameter0: java.util.Date;
        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();
        virtualinvoke r0.<java.util.Calendar: void setTimeInMillis(long)>($l0);
        return;
    }

    public long getTimeInMillis()
    {
        java.util.Calendar r0;
        boolean $z0;
        long $l0;

        r0 := @this: java.util.Calendar;
        $z0 = r0.<java.util.Calendar: boolean isTimeSet>;
        if $z0 != 0 goto label0;

        specialinvoke r0.<java.util.Calendar: void updateTime()>();

     label0:
        $l0 = r0.<java.util.Calendar: long time>;
        return $l0;
    }

    public void setTimeInMillis(long)
    {
        java.util.Calendar r0;
        long l0, $l1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        byte $b2;
        java.util.TimeZone $r1, $r2;
        sun.util.calendar.ZoneInfo $r3;

        r0 := @this: java.util.Calendar;
        l0 := @parameter0: long;
        $l1 = r0.<java.util.Calendar: long time>;
        $b2 = $l1 cmp l0;
        if $b2 != 0 goto label0;

        $z1 = r0.<java.util.Calendar: boolean isTimeSet>;
        if $z1 == 0 goto label0;

        $z2 = r0.<java.util.Calendar: boolean areFieldsSet>;
        if $z2 == 0 goto label0;

        $z3 = r0.<java.util.Calendar: boolean areAllFieldsSet>;
        if $z3 == 0 goto label0;

        $r1 = r0.<java.util.Calendar: java.util.TimeZone zone>;
        $z4 = $r1 instanceof sun.util.calendar.ZoneInfo;
        if $z4 == 0 goto label0;

        $r2 = r0.<java.util.Calendar: java.util.TimeZone zone>;
        $r3 = (sun.util.calendar.ZoneInfo) $r2;
        $z5 = virtualinvoke $r3.<sun.util.calendar.ZoneInfo: boolean isDirty()>();
        if $z5 != 0 goto label0;

        return;

     label0:
        r0.<java.util.Calendar: long time> = l0;
        r0.<java.util.Calendar: boolean isTimeSet> = 1;
        r0.<java.util.Calendar: boolean areFieldsSet> = 0;
        virtualinvoke r0.<java.util.Calendar: void computeFields()>();
        $z0 = 1;
        r0.<java.util.Calendar: boolean areFieldsSet> = $z0;
        r0.<java.util.Calendar: boolean areAllFieldsSet> = $z0;
        return;
    }

    public int get(int)
    {
        java.util.Calendar r0;
        int i0, $i1;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        virtualinvoke r0.<java.util.Calendar: void complete()>();
        $i1 = virtualinvoke r0.<java.util.Calendar: int internalGet(int)>(i0);
        return $i1;
    }

    protected final int internalGet(int)
    {
        java.util.Calendar r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        $r1 = r0.<java.util.Calendar: int[] fields>;
        $i1 = $r1[i0];
        return $i1;
    }

    final void internalSet(int, int)
    {
        java.util.Calendar r0;
        int i0, i1;
        int[] $r1;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = r0.<java.util.Calendar: int[] fields>;
        $r1[i0] = i1;
        return;
    }

    public void set(int, int)
    {
        java.util.Calendar r0;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0, $z1;
        boolean[] $r1;
        int[] $r2;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $z0 = r0.<java.util.Calendar: boolean areFieldsSet>;
        if $z0 == 0 goto label0;

        $z1 = r0.<java.util.Calendar: boolean areAllFieldsSet>;
        if $z1 != 0 goto label0;

        virtualinvoke r0.<java.util.Calendar: void computeFields()>();

     label0:
        virtualinvoke r0.<java.util.Calendar: void internalSet(int,int)>(i0, i1);
        r0.<java.util.Calendar: boolean isTimeSet> = 0;
        r0.<java.util.Calendar: boolean areFieldsSet> = 0;
        $r1 = r0.<java.util.Calendar: boolean[] isSet>;
        $r1[i0] = 1;
        $r2 = r0.<java.util.Calendar: int[] stamp>;
        $i2 = r0.<java.util.Calendar: int nextStamp>;
        $i3 = $i2 + 1;
        r0.<java.util.Calendar: int nextStamp> = $i3;
        $r2[i0] = $i2;
        $i4 = r0.<java.util.Calendar: int nextStamp>;
        if $i4 != 2147483647 goto label1;

        specialinvoke r0.<java.util.Calendar: void adjustStamp()>();

     label1:
        return;
    }

    public final void set(int, int, int)
    {
        java.util.Calendar r0;
        int i0, i1, i2;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(1, i0);
        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(2, i1);
        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(5, i2);
        return;
    }

    public final void set(int, int, int, int, int)
    {
        java.util.Calendar r0;
        int i0, i1, i2, i3, i4;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        i4 := @parameter4: int;
        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(1, i0);
        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(2, i1);
        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(5, i2);
        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(11, i3);
        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(12, i4);
        return;
    }

    public final void set(int, int, int, int, int, int)
    {
        java.util.Calendar r0;
        int i0, i1, i2, i3, i4, i5;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        i4 := @parameter4: int;
        i5 := @parameter5: int;
        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(1, i0);
        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(2, i1);
        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(5, i2);
        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(11, i3);
        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(12, i4);
        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(13, i5);
        return;
    }

    public final void clear()
    {
        java.util.Calendar r0;
        int i0, $i2, $i3;
        byte $b1;
        int[] $r1, $r2, $r3;
        boolean[] $r4;
        boolean $z0;

        r0 := @this: java.util.Calendar;
        i0 = 0;

     label0:
        $r1 = r0.<java.util.Calendar: int[] fields>;
        $i2 = lengthof $r1;
        if i0 >= $i2 goto label1;

        $r2 = r0.<java.util.Calendar: int[] stamp>;
        $b1 = 0;
        $r3 = r0.<java.util.Calendar: int[] fields>;
        $r3[i0] = $b1;
        $r2[i0] = $b1;
        $r4 = r0.<java.util.Calendar: boolean[] isSet>;
        $i3 = i0;
        i0 = i0 + 1;
        $r4[$i3] = 0;
        goto label0;

     label1:
        $z0 = 0;
        r0.<java.util.Calendar: boolean areFieldsSet> = $z0;
        r0.<java.util.Calendar: boolean areAllFieldsSet> = $z0;
        r0.<java.util.Calendar: boolean isTimeSet> = 0;
        return;
    }

    public final void clear(int)
    {
        java.util.Calendar r0;
        int i0;
        boolean $z0;
        int[] $r1, $r2;
        boolean[] $r3;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        $r1 = r0.<java.util.Calendar: int[] fields>;
        $r1[i0] = 0;
        $r2 = r0.<java.util.Calendar: int[] stamp>;
        $r2[i0] = 0;
        $r3 = r0.<java.util.Calendar: boolean[] isSet>;
        $r3[i0] = 0;
        $z0 = 0;
        r0.<java.util.Calendar: boolean areFieldsSet> = $z0;
        r0.<java.util.Calendar: boolean areAllFieldsSet> = $z0;
        r0.<java.util.Calendar: boolean isTimeSet> = 0;
        return;
    }

    public final boolean isSet(int)
    {
        java.util.Calendar r0;
        int i0, $i1;
        int[] $r1;
        boolean $z0;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        $r1 = r0.<java.util.Calendar: int[] stamp>;
        $i1 = $r1[i0];
        if $i1 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.String getDisplayName(int, int, java.util.Locale)
    {
        java.util.Calendar r0;
        int i0, i1, i2, $i3;
        java.util.Locale r1;
        java.text.DateFormatSymbols r2;
        java.lang.String[] r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.util.Locale;
        $z0 = virtualinvoke r0.<java.util.Calendar: boolean checkDisplayNameParams(int,int,int,int,java.util.Locale,int)>(i0, i1, 0, 2, r1, 645);
        if $z0 != 0 goto label0;

        return null;

     label0:
        r2 = staticinvoke <java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance(java.util.Locale)>(r1);
        r3 = specialinvoke r0.<java.util.Calendar: java.lang.String[] getFieldStrings(int,int,java.text.DateFormatSymbols)>(i0, i1, r2);
        if r3 == null goto label1;

        i2 = virtualinvoke r0.<java.util.Calendar: int get(int)>(i0);
        $i3 = lengthof r3;
        if i2 >= $i3 goto label1;

        $r4 = r3[i2];
        return $r4;

     label1:
        return null;
    }

    public java.util.Map getDisplayNames(int, int, java.util.Locale)
    {
        java.util.Calendar r0;
        int i0, i1;
        java.util.Locale r1;
        java.util.Map r2, r3, $r4;
        boolean $z0;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.util.Locale;
        $z0 = virtualinvoke r0.<java.util.Calendar: boolean checkDisplayNameParams(int,int,int,int,java.util.Locale,int)>(i0, i1, 0, 2, r1, 645);
        if $z0 != 0 goto label0;

        return null;

     label0:
        if i1 != 0 goto label5;

        r2 = specialinvoke r0.<java.util.Calendar: java.util.Map getDisplayNamesImpl(int,int,java.util.Locale)>(i0, 1, r1);
        if i0 == 0 goto label1;

        if i0 != 9 goto label2;

     label1:
        return r2;

     label2:
        r3 = specialinvoke r0.<java.util.Calendar: java.util.Map getDisplayNamesImpl(int,int,java.util.Locale)>(i0, 2, r1);
        if r2 != null goto label3;

        return r3;

     label3:
        if r3 == null goto label4;

        interfaceinvoke r2.<java.util.Map: void putAll(java.util.Map)>(r3);

     label4:
        return r2;

     label5:
        $r4 = specialinvoke r0.<java.util.Calendar: java.util.Map getDisplayNamesImpl(int,int,java.util.Locale)>(i0, i1, r1);
        return $r4;
    }

    private java.util.Map getDisplayNamesImpl(int, int, java.util.Locale)
    {
        java.util.Calendar r0;
        int i0, i1, i2, $i3, $i4;
        java.util.Locale r1;
        java.text.DateFormatSymbols r2;
        java.lang.String[] r3;
        java.util.HashMap r4, $r5;
        java.lang.String $r6, $r7;
        java.lang.Integer $r8;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.util.Locale;
        r2 = staticinvoke <java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance(java.util.Locale)>(r1);
        r3 = specialinvoke r0.<java.util.Calendar: java.lang.String[] getFieldStrings(int,int,java.text.DateFormatSymbols)>(i0, i1, r2);
        if r3 == null goto label4;

        $r5 = new java.util.HashMap;
        specialinvoke $r5.<java.util.HashMap: void <init>()>();
        r4 = $r5;
        i2 = 0;

     label0:
        $i3 = lengthof r3;
        if i2 >= $i3 goto label3;

        $r6 = r3[i2];
        $i4 = virtualinvoke $r6.<java.lang.String: int length()>();
        if $i4 != 0 goto label1;

        goto label2;

     label1:
        $r7 = r3[i2];
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);
        interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

     label2:
        i2 = i2 + 1;
        goto label0;

     label3:
        return r4;

     label4:
        return null;
    }

    boolean checkDisplayNameParams(int, int, int, int, java.util.Locale, int)
    {
        java.util.Calendar r0;
        int i0, i1, i2, i3, i4, $i5;
        java.util.Locale r1;
        int[] $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.NullPointerException $r4;
        boolean $z0;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        r1 := @parameter4: java.util.Locale;
        i4 := @parameter5: int;
        if i0 < 0 goto label0;

        $r2 = r0.<java.util.Calendar: int[] fields>;
        $i5 = lengthof $r2;
        if i0 >= $i5 goto label0;

        if i1 < i2 goto label0;

        if i1 <= i3 goto label1;

     label0:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r3;

     label1:
        if r1 != null goto label2;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label2:
        $z0 = staticinvoke <java.util.Calendar: boolean isFieldSet(int,int)>(i4, i0);
        return $z0;
    }

    private java.lang.String[] getFieldStrings(int, int, java.text.DateFormatSymbols)
    {
        java.util.Calendar r0;
        int i0, i1;
        java.text.DateFormatSymbols r1;
        java.lang.String[] r2, $r3, $r4;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.text.DateFormatSymbols;
        r2 = null;
        tableswitch(i0)
        {
            case 0: goto label0;
            case 1: goto label8;
            case 2: goto label1;
            case 3: goto label8;
            case 4: goto label8;
            case 5: goto label8;
            case 6: goto label8;
            case 7: goto label4;
            case 8: goto label8;
            case 9: goto label7;
            default: goto label8;
        };

     label0:
        r2 = virtualinvoke r1.<java.text.DateFormatSymbols: java.lang.String[] getEras()>();
        goto label8;

     label1:
        if i1 != 2 goto label2;

        $r3 = virtualinvoke r1.<java.text.DateFormatSymbols: java.lang.String[] getMonths()>();
        goto label3;

     label2:
        $r3 = virtualinvoke r1.<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>();

     label3:
        r2 = $r3;
        goto label8;

     label4:
        if i1 != 2 goto label5;

        $r4 = virtualinvoke r1.<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>();
        goto label6;

     label5:
        $r4 = virtualinvoke r1.<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>();

     label6:
        r2 = $r4;
        goto label8;

     label7:
        r2 = virtualinvoke r1.<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>();

     label8:
        return r2;
    }

    protected void complete()
    {
        java.util.Calendar r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.util.Calendar;
        $z1 = r0.<java.util.Calendar: boolean isTimeSet>;
        if $z1 != 0 goto label0;

        specialinvoke r0.<java.util.Calendar: void updateTime()>();

     label0:
        $z2 = r0.<java.util.Calendar: boolean areFieldsSet>;
        if $z2 == 0 goto label1;

        $z3 = r0.<java.util.Calendar: boolean areAllFieldsSet>;
        if $z3 != 0 goto label2;

     label1:
        virtualinvoke r0.<java.util.Calendar: void computeFields()>();
        $z0 = 1;
        r0.<java.util.Calendar: boolean areFieldsSet> = $z0;
        r0.<java.util.Calendar: boolean areAllFieldsSet> = $z0;

     label2:
        return;
    }

    final boolean isExternallySet(int)
    {
        java.util.Calendar r0;
        int i0, $i1;
        int[] $r1;
        boolean $z0;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        $r1 = r0.<java.util.Calendar: int[] stamp>;
        $i1 = $r1[i0];
        if $i1 < 2 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    final int getSetStateFields()
    {
        java.util.Calendar r0;
        int i0, i1, $i2, $i3, $i4;
        int[] $r1, $r2;

        r0 := @this: java.util.Calendar;
        i0 = 0;
        i1 = 0;

     label0:
        $r1 = r0.<java.util.Calendar: int[] fields>;
        $i2 = lengthof $r1;
        if i1 >= $i2 goto label2;

        $r2 = r0.<java.util.Calendar: int[] stamp>;
        $i3 = $r2[i1];
        if $i3 == 0 goto label1;

        $i4 = 1 << i1;
        i0 = i0 | $i4;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        return i0;
    }

    final void setFieldsComputed(int)
    {
        java.util.Calendar r0;
        int i0, i1, $i2, i3, $i4, $i5;
        boolean $z0, $z1, $z2;
        int[] $r1, $r2, $r4, $r5;
        boolean[] $r3, $r6, $r7;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        if i0 != 131071 goto label2;

        i1 = 0;

     label0:
        $r1 = r0.<java.util.Calendar: int[] fields>;
        $i2 = lengthof $r1;
        if i1 >= $i2 goto label1;

        $r2 = r0.<java.util.Calendar: int[] stamp>;
        $r2[i1] = 1;
        $r3 = r0.<java.util.Calendar: boolean[] isSet>;
        $r3[i1] = 1;
        i1 = i1 + 1;
        goto label0;

     label1:
        $z0 = 1;
        r0.<java.util.Calendar: boolean areAllFieldsSet> = $z0;
        r0.<java.util.Calendar: boolean areFieldsSet> = $z0;
        goto label6;

     label2:
        i3 = 0;

     label3:
        $r4 = r0.<java.util.Calendar: int[] fields>;
        $i4 = lengthof $r4;
        if i3 >= $i4 goto label6;

        $i5 = i0 & 1;
        if $i5 != 1 goto label4;

        $r5 = r0.<java.util.Calendar: int[] stamp>;
        $r5[i3] = 1;
        $r6 = r0.<java.util.Calendar: boolean[] isSet>;
        $r6[i3] = 1;
        goto label5;

     label4:
        $z1 = r0.<java.util.Calendar: boolean areAllFieldsSet>;
        if $z1 == 0 goto label5;

        $r7 = r0.<java.util.Calendar: boolean[] isSet>;
        $z2 = $r7[i3];
        if $z2 != 0 goto label5;

        r0.<java.util.Calendar: boolean areAllFieldsSet> = 0;

     label5:
        i0 = i0 >>> 1;
        i3 = i3 + 1;
        goto label3;

     label6:
        return;
    }

    final void setFieldsNormalized(int)
    {
        java.util.Calendar r0;
        int i0, i1, $i3, $i4;
        byte $b2;
        int[] $r1, $r2, $r3;
        boolean[] $r4;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        if i0 == 131071 goto label2;

        i1 = 0;

     label0:
        $r1 = r0.<java.util.Calendar: int[] fields>;
        $i3 = lengthof $r1;
        if i1 >= $i3 goto label2;

        $i4 = i0 & 1;
        if $i4 != 0 goto label1;

        $r2 = r0.<java.util.Calendar: int[] stamp>;
        $b2 = 0;
        $r3 = r0.<java.util.Calendar: int[] fields>;
        $r3[i1] = $b2;
        $r2[i1] = $b2;
        $r4 = r0.<java.util.Calendar: boolean[] isSet>;
        $r4[i1] = 0;

     label1:
        i0 = i0 >> 1;
        i1 = i1 + 1;
        goto label0;

     label2:
        r0.<java.util.Calendar: boolean areFieldsSet> = 1;
        r0.<java.util.Calendar: boolean areAllFieldsSet> = 0;
        return;
    }

    final boolean isPartiallyNormalized()
    {
        java.util.Calendar r0;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.Calendar;
        $z0 = r0.<java.util.Calendar: boolean areFieldsSet>;
        if $z0 == 0 goto label0;

        $z1 = r0.<java.util.Calendar: boolean areAllFieldsSet>;
        if $z1 != 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;
    }

    final boolean isFullyNormalized()
    {
        java.util.Calendar r0;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.Calendar;
        $z0 = r0.<java.util.Calendar: boolean areFieldsSet>;
        if $z0 == 0 goto label0;

        $z1 = r0.<java.util.Calendar: boolean areAllFieldsSet>;
        if $z1 == 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;
    }

    final void setUnnormalized()
    {
        java.util.Calendar r0;
        boolean $z0;

        r0 := @this: java.util.Calendar;
        $z0 = 0;
        r0.<java.util.Calendar: boolean areAllFieldsSet> = $z0;
        r0.<java.util.Calendar: boolean areFieldsSet> = $z0;
        return;
    }

    static final boolean isFieldSet(int, int)
    {
        int i0, i1, $i2, $i3;
        boolean $z0;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i2 = 1 << i1;
        $i3 = i0 & $i2;
        if $i3 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    final int selectFields()
    {
        java.util.Calendar r0;
        short s0;
        int i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i20, $i21, i22, $i23, $i24, $i25, $i26, $i27, $i28, i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r20, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r16, $r19, $r21, $r22;

        r0 := @this: java.util.Calendar;
        s0 = 2;
        $r1 = r0.<java.util.Calendar: int[] stamp>;
        $i11 = $r1[0];
        if $i11 == 0 goto label0;

        s0 = s0 | 1;

     label0:
        $r2 = r0.<java.util.Calendar: int[] stamp>;
        i1 = $r2[7];
        $r3 = r0.<java.util.Calendar: int[] stamp>;
        i2 = $r3[2];
        $r4 = r0.<java.util.Calendar: int[] stamp>;
        i3 = $r4[5];
        $r5 = r0.<java.util.Calendar: int[] stamp>;
        $i12 = $r5[4];
        i4 = staticinvoke <java.util.Calendar: int aggregateStamp(int,int)>($i12, i1);
        $r6 = r0.<java.util.Calendar: int[] stamp>;
        $i13 = $r6[8];
        i5 = staticinvoke <java.util.Calendar: int aggregateStamp(int,int)>($i13, i1);
        $r7 = r0.<java.util.Calendar: int[] stamp>;
        i6 = $r7[6];
        $r8 = r0.<java.util.Calendar: int[] stamp>;
        $i14 = $r8[3];
        i7 = staticinvoke <java.util.Calendar: int aggregateStamp(int,int)>($i14, i1);
        i8 = i3;
        if i4 <= i8 goto label1;

        i8 = i4;

     label1:
        if i5 <= i8 goto label2;

        i8 = i5;

     label2:
        if i6 <= i8 goto label3;

        i8 = i6;

     label3:
        if i7 <= i8 goto label4;

        i8 = i7;

     label4:
        if i8 != 0 goto label5;

        $r9 = r0.<java.util.Calendar: int[] stamp>;
        i4 = $r9[4];
        $r10 = r0.<java.util.Calendar: int[] stamp>;
        $i15 = $r10[8];
        i5 = staticinvoke <java.lang.Math: int max(int,int)>($i15, i1);
        $r11 = r0.<java.util.Calendar: int[] stamp>;
        i7 = $r11[3];
        $i16 = staticinvoke <java.lang.Math: int max(int,int)>(i4, i5);
        i8 = staticinvoke <java.lang.Math: int max(int,int)>($i16, i7);
        if i8 != 0 goto label5;

        i3 = i2;
        i8 = i2;

     label5:
        if i8 == i3 goto label7;

        if i8 != i4 goto label6;

        $r12 = r0.<java.util.Calendar: int[] stamp>;
        $i18 = $r12[4];
        $r13 = r0.<java.util.Calendar: int[] stamp>;
        $i19 = $r13[3];
        if $i18 >= $i19 goto label7;

     label6:
        if i8 != i5 goto label15;

        $r14 = r0.<java.util.Calendar: int[] stamp>;
        $i20 = $r14[8];
        $r15 = r0.<java.util.Calendar: int[] stamp>;
        $i21 = $r15[3];
        if $i20 < $i21 goto label15;

     label7:
        i22 = s0 | 4;
        if i8 != i3 goto label8;

        i22 = i22 | 32;
        goto label20;

     label8:
        $z0 = <java.util.Calendar: boolean $assertionsDisabled>;
        if $z0 != 0 goto label9;

        if i8 == i4 goto label9;

        if i8 == i5 goto label9;

        $r16 = new java.lang.AssertionError;
        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();
        throw $r16;

     label9:
        if i1 == 0 goto label10;

        i22 = i22 | 128;

     label10:
        if i4 != i5 goto label12;

        $r17 = r0.<java.util.Calendar: int[] stamp>;
        $i23 = $r17[4];
        $r18 = r0.<java.util.Calendar: int[] stamp>;
        $i24 = $r18[8];
        if $i23 < $i24 goto label11;

        i22 = i22 | 16;
        goto label20;

     label11:
        i22 = i22 | 256;
        goto label20;

     label12:
        if i8 != i4 goto label13;

        i22 = i22 | 16;
        goto label20;

     label13:
        $z1 = <java.util.Calendar: boolean $assertionsDisabled>;
        if $z1 != 0 goto label14;

        if i8 == i5 goto label14;

        $r19 = new java.lang.AssertionError;
        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();
        throw $r19;

     label14:
        $r20 = r0.<java.util.Calendar: int[] stamp>;
        $i25 = $r20[8];
        if $i25 == 0 goto label20;

        i22 = i22 | 256;
        goto label20;

     label15:
        $z2 = <java.util.Calendar: boolean $assertionsDisabled>;
        if $z2 != 0 goto label16;

        if i8 == i6 goto label16;

        if i8 == i7 goto label16;

        if i8 == 0 goto label16;

        $r21 = new java.lang.AssertionError;
        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();
        throw $r21;

     label16:
        if i8 != i6 goto label17;

        i22 = s0 | 64;
        goto label20;

     label17:
        $z3 = <java.util.Calendar: boolean $assertionsDisabled>;
        if $z3 != 0 goto label18;

        if i8 == i7 goto label18;

        $r22 = new java.lang.AssertionError;
        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();
        throw $r22;

     label18:
        if i1 == 0 goto label19;

        s0 = s0 | 128;

     label19:
        i22 = s0 | 8;

     label20:
        $r23 = r0.<java.util.Calendar: int[] stamp>;
        i9 = $r23[11];
        $r24 = r0.<java.util.Calendar: int[] stamp>;
        $i26 = $r24[10];
        $r25 = r0.<java.util.Calendar: int[] stamp>;
        $i27 = $r25[9];
        i10 = staticinvoke <java.util.Calendar: int aggregateStamp(int,int)>($i26, $i27);
        if i10 <= i9 goto label21;

        $i28 = i10;
        goto label22;

     label21:
        $i28 = i9;

     label22:
        i29 = $i28;
        if i29 != 0 goto label23;

        $r26 = r0.<java.util.Calendar: int[] stamp>;
        $i30 = $r26[10];
        $r27 = r0.<java.util.Calendar: int[] stamp>;
        $i31 = $r27[9];
        i29 = staticinvoke <java.lang.Math: int max(int,int)>($i30, $i31);

     label23:
        if i29 == 0 goto label25;

        if i29 != i9 goto label24;

        i22 = i22 | 2048;
        goto label25;

     label24:
        i22 = i22 | 1024;
        $r28 = r0.<java.util.Calendar: int[] stamp>;
        $i32 = $r28[9];
        if $i32 == 0 goto label25;

        i22 = i22 | 512;

     label25:
        $r29 = r0.<java.util.Calendar: int[] stamp>;
        $i33 = $r29[12];
        if $i33 == 0 goto label26;

        i22 = i22 | 4096;

     label26:
        $r30 = r0.<java.util.Calendar: int[] stamp>;
        $i34 = $r30[13];
        if $i34 == 0 goto label27;

        i22 = i22 | 8192;

     label27:
        $r31 = r0.<java.util.Calendar: int[] stamp>;
        $i35 = $r31[14];
        if $i35 == 0 goto label28;

        i22 = i22 | 16384;

     label28:
        $r32 = r0.<java.util.Calendar: int[] stamp>;
        $i36 = $r32[15];
        if $i36 < 2 goto label29;

        i22 = i22 | 32768;

     label29:
        $r33 = r0.<java.util.Calendar: int[] stamp>;
        $i37 = $r33[16];
        if $i37 < 2 goto label30;

        i22 = i22 | 65536;

     label30:
        return i22;
    }

    private static final int aggregateStamp(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i0 == 0 goto label0;

        if i1 != 0 goto label1;

     label0:
        return 0;

     label1:
        if i0 <= i1 goto label2;

        $i2 = i0;
        goto label3;

     label2:
        $i2 = i1;

     label3:
        return $i2;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Calendar r0, r2;
        java.lang.Object r1;
        long $l0;
        int $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2, $z3;
        java.util.TimeZone $r3, $r4;
        java.lang.Exception $r5, r6;

        r0 := @this: java.util.Calendar;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        r2 = (java.util.Calendar) r1;
        $l0 = staticinvoke <java.util.Calendar: long getMillisOf(java.util.Calendar)>(r2);
        $i1 = specialinvoke r0.<java.util.Calendar: int compareTo(long)>($l0);
        if $i1 != 0 goto label1;

        $z0 = r0.<java.util.Calendar: boolean lenient>;
        $z1 = r2.<java.util.Calendar: boolean lenient>;
        if $z0 != $z1 goto label1;

        $i2 = r0.<java.util.Calendar: int firstDayOfWeek>;
        $i3 = r2.<java.util.Calendar: int firstDayOfWeek>;
        if $i2 != $i3 goto label1;

        $i4 = r0.<java.util.Calendar: int minimalDaysInFirstWeek>;
        $i5 = r2.<java.util.Calendar: int minimalDaysInFirstWeek>;
        if $i4 != $i5 goto label1;

        $r3 = r0.<java.util.Calendar: java.util.TimeZone zone>;
        $r4 = r2.<java.util.Calendar: java.util.TimeZone zone>;
        $z2 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);
        if $z2 == 0 goto label1;

        $z3 = 1;
        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        $r5 := @caughtexception;
        r6 = $r5;
        return 0;

        catch java.lang.Exception from label0 to label2 with label3;
    }

    public int hashCode()
    {
        java.util.Calendar r0;
        int i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15;
        long l1, $l12;
        boolean $z0;
        byte $b2;
        java.util.TimeZone $r1;

        r0 := @this: java.util.Calendar;
        $z0 = r0.<java.util.Calendar: boolean lenient>;
        if $z0 == 0 goto label0;

        $b2 = 1;
        goto label1;

     label0:
        $b2 = 0;

     label1:
        $i3 = r0.<java.util.Calendar: int firstDayOfWeek>;
        $i4 = $i3 << 1;
        $i5 = $b2 | $i4;
        $i6 = r0.<java.util.Calendar: int minimalDaysInFirstWeek>;
        $i7 = $i6 << 4;
        $i8 = $i5 | $i7;
        $r1 = r0.<java.util.Calendar: java.util.TimeZone zone>;
        $i9 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();
        $i10 = $i9 << 7;
        i0 = $i8 | $i10;
        l1 = staticinvoke <java.util.Calendar: long getMillisOf(java.util.Calendar)>(r0);
        $i11 = (int) l1;
        $l12 = l1 >> 32;
        $i13 = (int) $l12;
        $i14 = $i11 ^ $i13;
        $i15 = $i14 ^ i0;
        return $i15;
    }

    public boolean before(java.lang.Object)
    {
        java.util.Calendar r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: java.util.Calendar;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.util.Calendar;
        if $z0 == 0 goto label0;

        $r2 = (java.util.Calendar) r1;
        $i0 = virtualinvoke r0.<java.util.Calendar: int compareTo(java.util.Calendar)>($r2);
        if $i0 >= 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    public boolean after(java.lang.Object)
    {
        java.util.Calendar r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: java.util.Calendar;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.util.Calendar;
        if $z0 == 0 goto label0;

        $r2 = (java.util.Calendar) r1;
        $i0 = virtualinvoke r0.<java.util.Calendar: int compareTo(java.util.Calendar)>($r2);
        if $i0 <= 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    public int compareTo(java.util.Calendar)
    {
        java.util.Calendar r0, r1;
        long $l0;
        int $i1;

        r0 := @this: java.util.Calendar;
        r1 := @parameter0: java.util.Calendar;
        $l0 = staticinvoke <java.util.Calendar: long getMillisOf(java.util.Calendar)>(r1);
        $i1 = specialinvoke r0.<java.util.Calendar: int compareTo(long)>($l0);
        return $i1;
    }

    public abstract void add(int, int);

    public abstract void roll(int, boolean);

    public void roll(int, int)
    {
        java.util.Calendar r0;
        int i0, i1;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;

     label0:
        if i1 <= 0 goto label1;

        virtualinvoke r0.<java.util.Calendar: void roll(int,boolean)>(i0, 1);
        i1 = i1 + -1;
        goto label0;

     label1:
        if i1 >= 0 goto label2;

        virtualinvoke r0.<java.util.Calendar: void roll(int,boolean)>(i0, 0);
        i1 = i1 + 1;
        goto label1;

     label2:
        return;
    }

    public void setTimeZone(java.util.TimeZone)
    {
        java.util.Calendar r0;
        java.util.TimeZone r1;
        boolean $z0;

        r0 := @this: java.util.Calendar;
        r1 := @parameter0: java.util.TimeZone;
        r0.<java.util.Calendar: java.util.TimeZone zone> = r1;
        r0.<java.util.Calendar: boolean sharedZone> = 0;
        $z0 = 0;
        r0.<java.util.Calendar: boolean areFieldsSet> = $z0;
        r0.<java.util.Calendar: boolean areAllFieldsSet> = $z0;
        return;
    }

    public java.util.TimeZone getTimeZone()
    {
        java.util.Calendar r0;
        boolean $z0;
        java.util.TimeZone $r1, $r3, $r4;
        java.lang.Object $r2;

        r0 := @this: java.util.Calendar;
        $z0 = r0.<java.util.Calendar: boolean sharedZone>;
        if $z0 == 0 goto label0;

        $r1 = r0.<java.util.Calendar: java.util.TimeZone zone>;
        $r2 = virtualinvoke $r1.<java.util.TimeZone: java.lang.Object clone()>();
        $r3 = (java.util.TimeZone) $r2;
        r0.<java.util.Calendar: java.util.TimeZone zone> = $r3;
        r0.<java.util.Calendar: boolean sharedZone> = 0;

     label0:
        $r4 = r0.<java.util.Calendar: java.util.TimeZone zone>;
        return $r4;
    }

    java.util.TimeZone getZone()
    {
        java.util.Calendar r0;
        java.util.TimeZone $r1;

        r0 := @this: java.util.Calendar;
        $r1 = r0.<java.util.Calendar: java.util.TimeZone zone>;
        return $r1;
    }

    void setZoneShared(boolean)
    {
        java.util.Calendar r0;
        boolean z0;

        r0 := @this: java.util.Calendar;
        z0 := @parameter0: boolean;
        r0.<java.util.Calendar: boolean sharedZone> = z0;
        return;
    }

    public void setLenient(boolean)
    {
        java.util.Calendar r0;
        boolean z0;

        r0 := @this: java.util.Calendar;
        z0 := @parameter0: boolean;
        r0.<java.util.Calendar: boolean lenient> = z0;
        return;
    }

    public boolean isLenient()
    {
        java.util.Calendar r0;
        boolean $z0;

        r0 := @this: java.util.Calendar;
        $z0 = r0.<java.util.Calendar: boolean lenient>;
        return $z0;
    }

    public void setFirstDayOfWeek(int)
    {
        java.util.Calendar r0;
        int i0, $i1;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        $i1 = r0.<java.util.Calendar: int firstDayOfWeek>;
        if $i1 != i0 goto label0;

        return;

     label0:
        r0.<java.util.Calendar: int firstDayOfWeek> = i0;
        specialinvoke r0.<java.util.Calendar: void invalidateWeekFields()>();
        return;
    }

    public int getFirstDayOfWeek()
    {
        java.util.Calendar r0;
        int $i0;

        r0 := @this: java.util.Calendar;
        $i0 = r0.<java.util.Calendar: int firstDayOfWeek>;
        return $i0;
    }

    public void setMinimalDaysInFirstWeek(int)
    {
        java.util.Calendar r0;
        int i0, $i1;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        $i1 = r0.<java.util.Calendar: int minimalDaysInFirstWeek>;
        if $i1 != i0 goto label0;

        return;

     label0:
        r0.<java.util.Calendar: int minimalDaysInFirstWeek> = i0;
        specialinvoke r0.<java.util.Calendar: void invalidateWeekFields()>();
        return;
    }

    public int getMinimalDaysInFirstWeek()
    {
        java.util.Calendar r0;
        int $i0;

        r0 := @this: java.util.Calendar;
        $i0 = r0.<java.util.Calendar: int minimalDaysInFirstWeek>;
        return $i0;
    }

    public boolean isWeekDateSupported()
    {
        java.util.Calendar r0;

        r0 := @this: java.util.Calendar;
        return 0;
    }

    public int getWeekYear()
    {
        java.util.Calendar r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.util.Calendar;
        $r1 = new java.lang.UnsupportedOperationException;
        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r1;
    }

    public void setWeekDate(int, int, int)
    {
        java.util.Calendar r0;
        int i0, i1, i2;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        $r1 = new java.lang.UnsupportedOperationException;
        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r1;
    }

    public int getWeeksInWeekYear()
    {
        java.util.Calendar r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.util.Calendar;
        $r1 = new java.lang.UnsupportedOperationException;
        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r1;
    }

    public abstract int getMinimum(int);

    public abstract int getMaximum(int);

    public abstract int getGreatestMinimum(int);

    public abstract int getLeastMaximum(int);

    public int getActualMinimum(int)
    {
        java.util.Calendar r0, r1;
        int i0, i1, i2, i3, $i4;
        java.lang.Object $r2;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        i1 = virtualinvoke r0.<java.util.Calendar: int getGreatestMinimum(int)>(i0);
        i2 = virtualinvoke r0.<java.util.Calendar: int getMinimum(int)>(i0);
        if i1 != i2 goto label0;

        return i1;

     label0:
        $r2 = virtualinvoke r0.<java.util.Calendar: java.lang.Object clone()>();
        r1 = (java.util.Calendar) $r2;
        virtualinvoke r1.<java.util.Calendar: void setLenient(boolean)>(1);
        i3 = i1;

     label1:
        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(i0, i1);
        $i4 = virtualinvoke r1.<java.util.Calendar: int get(int)>(i0);
        if $i4 == i1 goto label2;

        goto label3;

     label2:
        i3 = i1;
        i1 = i1 + -1;
        if i1 >= i2 goto label1;

     label3:
        return i3;
    }

    public int getActualMaximum(int)
    {
        java.util.Calendar r0, r1;
        int i0, i1, i2, i3, $i4, $i5;
        java.lang.Object $r2;

        r0 := @this: java.util.Calendar;
        i0 := @parameter0: int;
        i1 = virtualinvoke r0.<java.util.Calendar: int getLeastMaximum(int)>(i0);
        i2 = virtualinvoke r0.<java.util.Calendar: int getMaximum(int)>(i0);
        if i1 != i2 goto label0;

        return i1;

     label0:
        $r2 = virtualinvoke r0.<java.util.Calendar: java.lang.Object clone()>();
        r1 = (java.util.Calendar) $r2;
        virtualinvoke r1.<java.util.Calendar: void setLenient(boolean)>(1);
        if i0 == 3 goto label1;

        if i0 != 4 goto label2;

     label1:
        $i4 = r0.<java.util.Calendar: int firstDayOfWeek>;
        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(7, $i4);

     label2:
        i3 = i1;

     label3:
        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(i0, i1);
        $i5 = virtualinvoke r1.<java.util.Calendar: int get(int)>(i0);
        if $i5 == i1 goto label4;

        goto label5;

     label4:
        i3 = i1;
        i1 = i1 + 1;
        if i1 <= i2 goto label3;

     label5:
        return i3;
    }

    public java.lang.Object clone()
    {
        java.util.Calendar r0, r1;
        int i0, $i1, $i2;
        java.lang.Object $r2, $r13;
        int[] $r3, $r5, $r6, $r7, $r8, $r9;
        boolean[] $r4, $r10, $r11;
        boolean $z0;
        java.util.TimeZone $r12, $r14;
        java.lang.CloneNotSupportedException $r16, r17;
        java.lang.InternalError $r18;

        r0 := @this: java.util.Calendar;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        r1 = (java.util.Calendar) $r2;
        $r3 = newarray (int)[17];
        r1.<java.util.Calendar: int[] fields> = $r3;
        $r4 = newarray (boolean)[17];
        r1.<java.util.Calendar: boolean[] isSet> = $r4;
        $r5 = newarray (int)[17];
        r1.<java.util.Calendar: int[] stamp> = $r5;
        i0 = 0;

     label1:
        if i0 >= 17 goto label2;

        $r6 = r1.<java.util.Calendar: int[] fields>;
        $r7 = r0.<java.util.Calendar: int[] fields>;
        $i1 = $r7[i0];
        $r6[i0] = $i1;
        $r8 = r1.<java.util.Calendar: int[] stamp>;
        $r9 = r0.<java.util.Calendar: int[] stamp>;
        $i2 = $r9[i0];
        $r8[i0] = $i2;
        $r10 = r1.<java.util.Calendar: boolean[] isSet>;
        $r11 = r0.<java.util.Calendar: boolean[] isSet>;
        $z0 = $r11[i0];
        $r10[i0] = $z0;
        i0 = i0 + 1;
        goto label1;

     label2:
        $r12 = r0.<java.util.Calendar: java.util.TimeZone zone>;
        $r13 = virtualinvoke $r12.<java.util.TimeZone: java.lang.Object clone()>();
        $r14 = (java.util.TimeZone) $r13;
        r1.<java.util.Calendar: java.util.TimeZone zone> = $r14;

     label3:
        return r1;

     label4:
        $r16 := @caughtexception;
        r17 = $r16;
        $r18 = new java.lang.InternalError;
        specialinvoke $r18.<java.lang.InternalError: void <init>()>();
        throw $r18;

        catch java.lang.CloneNotSupportedException from label0 to label3 with label4;
    }

    static final java.lang.String getFieldName(int)
    {
        int i0;
        java.lang.String[] $r0;
        java.lang.String $r1;

        i0 := @parameter0: int;
        $r0 = <java.util.Calendar: java.lang.String[] FIELD_NAME>;
        $r1 = $r0[i0];
        return $r1;
    }

    public java.lang.String toString()
    {
        java.util.Calendar r0;
        java.lang.StringBuilder $r1, r2, $r5, $r7, $r9, $r11, $r13;
        int i0, $i2, $i4, $i6;
        java.lang.Class $r3;
        java.lang.String $r4, $r18, $r21;
        boolean $z0, $z1, $z2, $z3, $z4;
        long $l1, $l3, $l5, $l7;
        java.util.TimeZone $r14;
        java.lang.String[] $r17;
        int[] $r19;

        r0 := @this: java.util.Calendar;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(800);
        r2 = $r1;
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();
        $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
        $z0 = r0.<java.util.Calendar: boolean isTimeSet>;
        $l1 = r0.<java.util.Calendar: long time>;
        staticinvoke <java.util.Calendar: void appendValue(java.lang.StringBuilder,java.lang.String,boolean,long)>(r2, "time", $z0, $l1);
        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",areFieldsSet=");
        $z1 = r0.<java.util.Calendar: boolean areFieldsSet>;
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);
        $r9 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",areAllFieldsSet=");
        $z2 = r0.<java.util.Calendar: boolean areAllFieldsSet>;
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);
        $r11 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",lenient=");
        $z3 = r0.<java.util.Calendar: boolean lenient>;
        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);
        $r13 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",zone=");
        $r14 = r0.<java.util.Calendar: java.util.TimeZone zone>;
        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);
        $i2 = r0.<java.util.Calendar: int firstDayOfWeek>;
        $l3 = (long) $i2;
        staticinvoke <java.util.Calendar: void appendValue(java.lang.StringBuilder,java.lang.String,boolean,long)>(r2, ",firstDayOfWeek", 1, $l3);
        $i4 = r0.<java.util.Calendar: int minimalDaysInFirstWeek>;
        $l5 = (long) $i4;
        staticinvoke <java.util.Calendar: void appendValue(java.lang.StringBuilder,java.lang.String,boolean,long)>(r2, ",minimalDaysInFirstWeek", 1, $l5);
        i0 = 0;

     label0:
        if i0 >= 17 goto label1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);
        $r17 = <java.util.Calendar: java.lang.String[] FIELD_NAME>;
        $r18 = $r17[i0];
        $z4 = virtualinvoke r0.<java.util.Calendar: boolean isSet(int)>(i0);
        $r19 = r0.<java.util.Calendar: int[] fields>;
        $i6 = $r19[i0];
        $l7 = (long) $i6;
        staticinvoke <java.util.Calendar: void appendValue(java.lang.StringBuilder,java.lang.String,boolean,long)>(r2, $r18, $z4, $l7);
        i0 = i0 + 1;
        goto label0;

     label1:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
        $r21 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r21;
    }

    private static final void appendValue(java.lang.StringBuilder, java.lang.String, boolean, long)
    {
        java.lang.StringBuilder r0, $r2;
        java.lang.String r1;
        boolean z0;
        long l0;

        r0 := @parameter0: java.lang.StringBuilder;
        r1 := @parameter1: java.lang.String;
        z0 := @parameter2: boolean;
        l0 := @parameter3: long;
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);
        if z0 == 0 goto label0;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);
        goto label1;

     label0:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63);

     label1:
        return;
    }

    private void setWeekCountData(java.util.Locale)
    {
        java.util.Calendar r0;
        java.util.Locale r1;
        java.util.concurrent.ConcurrentMap $r2, $r8;
        int[] r3;
        java.util.ResourceBundle r4;
        java.lang.Object $r5;
        java.lang.String $r6, $r7;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.Calendar;
        r1 := @parameter0: java.util.Locale;
        $r2 = <java.util.Calendar: java.util.concurrent.ConcurrentMap cachedLocaleData>;
        $r5 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);
        r3 = (int[]) $r5;
        if r3 != null goto label0;

        r4 = staticinvoke <sun.util.resources.LocaleData: java.util.ResourceBundle getCalendarData(java.util.Locale)>(r1);
        r3 = newarray (int)[2];
        $r6 = virtualinvoke r4.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("firstDayOfWeek");
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);
        r3[0] = $i0;
        $r7 = virtualinvoke r4.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("minimalDaysInFirstWeek");
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);
        r3[1] = $i1;
        $r8 = <java.util.Calendar: java.util.concurrent.ConcurrentMap cachedLocaleData>;
        interfaceinvoke $r8.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, r3);

     label0:
        $i2 = r3[0];
        r0.<java.util.Calendar: int firstDayOfWeek> = $i2;
        $i3 = r3[1];
        r0.<java.util.Calendar: int minimalDaysInFirstWeek> = $i3;
        return;
    }

    private void updateTime()
    {
        java.util.Calendar r0;

        r0 := @this: java.util.Calendar;
        virtualinvoke r0.<java.util.Calendar: void computeTime()>();
        r0.<java.util.Calendar: boolean isTimeSet> = 1;
        return;
    }

    private int compareTo(long)
    {
        java.util.Calendar r0;
        long l0, l1;
        byte $b2, $b3, $b4;

        r0 := @this: java.util.Calendar;
        l0 := @parameter0: long;
        l1 = staticinvoke <java.util.Calendar: long getMillisOf(java.util.Calendar)>(r0);
        $b2 = l1 cmp l0;
        if $b2 <= 0 goto label0;

        $b3 = 1;
        goto label2;

     label0:
        $b4 = l1 cmp l0;
        if $b4 != 0 goto label1;

        $b3 = 0;
        goto label2;

     label1:
        $b3 = -1;

     label2:
        return $b3;
    }

    private static final long getMillisOf(java.util.Calendar)
    {
        java.util.Calendar r0, r1;
        boolean $z0;
        long $l0, $l1;
        java.lang.Object $r2;

        r0 := @parameter0: java.util.Calendar;
        $z0 = r0.<java.util.Calendar: boolean isTimeSet>;
        if $z0 == 0 goto label0;

        $l0 = r0.<java.util.Calendar: long time>;
        return $l0;

     label0:
        $r2 = virtualinvoke r0.<java.util.Calendar: java.lang.Object clone()>();
        r1 = (java.util.Calendar) $r2;
        virtualinvoke r1.<java.util.Calendar: void setLenient(boolean)>(1);
        $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>();
        return $l1;
    }

    private final void adjustStamp()
    {
        java.util.Calendar r0;
        int i0, i1, i2, i3, i4, $i5, i6, $i7, $i8;
        int[] $r1, $r2, $r3, $r4, $r5;

        r0 := @this: java.util.Calendar;
        i0 = 2;
        i1 = 2;

     label0:
        i2 = 2147483647;
        i3 = 0;

     label1:
        $r1 = r0.<java.util.Calendar: int[] stamp>;
        $i5 = lengthof $r1;
        if i3 >= $i5 goto label4;

        $r2 = r0.<java.util.Calendar: int[] stamp>;
        i4 = $r2[i3];
        if i4 < i1 goto label2;

        if i2 <= i4 goto label2;

        i2 = i4;

     label2:
        if i0 >= i4 goto label3;

        i0 = i4;

     label3:
        i3 = i3 + 1;
        goto label1;

     label4:
        if i0 == i2 goto label5;

        if i2 != 2147483647 goto label5;

        goto label10;

     label5:
        i6 = 0;

     label6:
        $r3 = r0.<java.util.Calendar: int[] stamp>;
        $i7 = lengthof $r3;
        if i6 >= $i7 goto label8;

        $r4 = r0.<java.util.Calendar: int[] stamp>;
        $i8 = $r4[i6];
        if $i8 != i2 goto label7;

        $r5 = r0.<java.util.Calendar: int[] stamp>;
        $r5[i6] = i1;

     label7:
        i6 = i6 + 1;
        goto label6;

     label8:
        i1 = i1 + 1;
        if i2 != i0 goto label9;

        goto label10;

     label9:
        goto label0;

     label10:
        r0.<java.util.Calendar: int nextStamp> = i1;
        return;
    }

    private void invalidateWeekFields()
    {
        java.util.Calendar r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        int[] $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.Object $r4;

        r0 := @this: java.util.Calendar;
        $r2 = r0.<java.util.Calendar: int[] stamp>;
        $i1 = $r2[4];
        if $i1 == 1 goto label0;

        $r3 = r0.<java.util.Calendar: int[] stamp>;
        $i2 = $r3[3];
        if $i2 == 1 goto label0;

        return;

     label0:
        $r4 = virtualinvoke r0.<java.util.Calendar: java.lang.Object clone()>();
        r1 = (java.util.Calendar) $r4;
        virtualinvoke r1.<java.util.Calendar: void setLenient(boolean)>(1);
        virtualinvoke r1.<java.util.Calendar: void clear(int)>(4);
        virtualinvoke r1.<java.util.Calendar: void clear(int)>(3);
        $r5 = r0.<java.util.Calendar: int[] stamp>;
        $i3 = $r5[4];
        if $i3 != 1 goto label1;

        i0 = virtualinvoke r1.<java.util.Calendar: int get(int)>(4);
        $r6 = r0.<java.util.Calendar: int[] fields>;
        $i4 = $r6[4];
        if $i4 == i0 goto label1;

        $r7 = r0.<java.util.Calendar: int[] fields>;
        $r7[4] = i0;

     label1:
        $r8 = r0.<java.util.Calendar: int[] stamp>;
        $i5 = $r8[3];
        if $i5 != 1 goto label2;

        i6 = virtualinvoke r1.<java.util.Calendar: int get(int)>(3);
        $r9 = r0.<java.util.Calendar: int[] fields>;
        $i7 = $r9[3];
        if $i7 == i6 goto label2;

        $r10 = r0.<java.util.Calendar: int[] fields>;
        $r10[3] = i6;

     label2:
        return;
    }

    private synchronized void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Calendar r0;
        java.io.ObjectOutputStream r1;
        java.lang.IllegalArgumentException r2, $r4;
        java.util.SimpleTimeZone r3, $r9;
        boolean $z0, $z1;
        java.util.TimeZone r5, $r6, $r7, $r10, $r11;
        sun.util.calendar.ZoneInfo $r8;
        int $i0;
        java.lang.String $r12;

        r0 := @this: java.util.Calendar;
        r1 := @parameter0: java.io.ObjectOutputStream;
        $z0 = r0.<java.util.Calendar: boolean isTimeSet>;
        if $z0 != 0 goto label3;

     label0:
        specialinvoke r0.<java.util.Calendar: void updateTime()>();

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;

     label3:
        r5 = null;
        $r6 = r0.<java.util.Calendar: java.util.TimeZone zone>;
        $z1 = $r6 instanceof sun.util.calendar.ZoneInfo;
        if $z1 == 0 goto label5;

        $r7 = r0.<java.util.Calendar: java.util.TimeZone zone>;
        $r8 = (sun.util.calendar.ZoneInfo) $r7;
        r3 = virtualinvoke $r8.<sun.util.calendar.ZoneInfo: java.util.SimpleTimeZone getLastRuleInstance()>();
        if r3 != null goto label4;

        $r9 = new java.util.SimpleTimeZone;
        $r10 = r0.<java.util.Calendar: java.util.TimeZone zone>;
        $i0 = virtualinvoke $r10.<java.util.TimeZone: int getRawOffset()>();
        $r11 = r0.<java.util.Calendar: java.util.TimeZone zone>;
        $r12 = virtualinvoke $r11.<java.util.TimeZone: java.lang.String getID()>();
        specialinvoke $r9.<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>($i0, $r12);
        r3 = $r9;

     label4:
        r5 = r0.<java.util.Calendar: java.util.TimeZone zone>;
        r0.<java.util.Calendar: java.util.TimeZone zone> = r3;

     label5:
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r5);
        if r5 == null goto label6;

        r0.<java.util.Calendar: java.util.TimeZone zone> = r5;

     label6:
        return;

        catch java.lang.IllegalArgumentException from label0 to label1 with label2;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.Calendar r0;
        java.io.ObjectInputStream r1, r2;
        int i0, $i1, $i2, $i3;
        java.security.PrivilegedActionException r3, $r16;
        java.lang.Exception r4;
        int[] $r5, $r6, $r7, $r10;
        boolean[] $r8, $r9, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        byte $b4;
        sun.util.calendar.ZoneInfo r12;
        java.util.Calendar$1 $r13;
        java.security.AccessControlContext $r14;
        java.lang.Object $r15;
        java.lang.RuntimeException $r17, $r20;
        java.io.IOException $r18;
        java.lang.ClassNotFoundException $r19;
        java.util.TimeZone $r21, $r22, r24, $r25;
        java.lang.String r23, $r26;

        r0 := @this: java.util.Calendar;
        r1 := @parameter0: java.io.ObjectInputStream;
        r2 = r1;
        virtualinvoke r2.<java.io.ObjectInputStream: void defaultReadObject()>();
        $r5 = newarray (int)[17];
        r0.<java.util.Calendar: int[] stamp> = $r5;
        $i1 = r0.<java.util.Calendar: int serialVersionOnStream>;
        if $i1 < 2 goto label1;

        r0.<java.util.Calendar: boolean isTimeSet> = 1;
        $r6 = r0.<java.util.Calendar: int[] fields>;
        if $r6 != null goto label0;

        $r7 = newarray (int)[17];
        r0.<java.util.Calendar: int[] fields> = $r7;

     label0:
        $r8 = r0.<java.util.Calendar: boolean[] isSet>;
        if $r8 != null goto label5;

        $r9 = newarray (boolean)[17];
        r0.<java.util.Calendar: boolean[] isSet> = $r9;
        goto label5;

     label1:
        $i2 = r0.<java.util.Calendar: int serialVersionOnStream>;
        if $i2 < 0 goto label5;

        i0 = 0;

     label2:
        if i0 >= 17 goto label5;

        $r10 = r0.<java.util.Calendar: int[] stamp>;
        $i3 = i0;
        $r11 = r0.<java.util.Calendar: boolean[] isSet>;
        $z0 = $r11[i0];
        if $z0 == 0 goto label3;

        $b4 = 1;
        goto label4;

     label3:
        $b4 = 0;

     label4:
        $r10[$i3] = $b4;
        i0 = i0 + 1;
        goto label2;

     label5:
        r0.<java.util.Calendar: int serialVersionOnStream> = 1;
        r12 = null;

     label6:
        $r13 = new java.util.Calendar$1;
        specialinvoke $r13.<java.util.Calendar$1: void <init>(java.util.Calendar,java.io.ObjectInputStream)>(r0, r2);
        $r14 = staticinvoke <java.util.Calendar$CalendarAccessControlContext: java.security.AccessControlContext access$000()>();
        $r15 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>($r13, $r14);
        r12 = (sun.util.calendar.ZoneInfo) $r15;

     label7:
        goto label12;

     label8:
        $r16 := @caughtexception;
        r3 = $r16;
        r4 = virtualinvoke r3.<java.security.PrivilegedActionException: java.lang.Exception getException()>();
        $z1 = r4 instanceof java.io.OptionalDataException;
        if $z1 != 0 goto label12;

        $z2 = r4 instanceof java.lang.RuntimeException;
        if $z2 == 0 goto label9;

        $r17 = (java.lang.RuntimeException) r4;
        throw $r17;

     label9:
        $z3 = r4 instanceof java.io.IOException;
        if $z3 == 0 goto label10;

        $r18 = (java.io.IOException) r4;
        throw $r18;

     label10:
        $z4 = r4 instanceof java.lang.ClassNotFoundException;
        if $z4 == 0 goto label11;

        $r19 = (java.lang.ClassNotFoundException) r4;
        throw $r19;

     label11:
        $r20 = new java.lang.RuntimeException;
        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r4);
        throw $r20;

     label12:
        if r12 == null goto label13;

        r0.<java.util.Calendar: java.util.TimeZone zone> = r12;

     label13:
        $r21 = r0.<java.util.Calendar: java.util.TimeZone zone>;
        $z5 = $r21 instanceof java.util.SimpleTimeZone;
        if $z5 == 0 goto label14;

        $r22 = r0.<java.util.Calendar: java.util.TimeZone zone>;
        r23 = virtualinvoke $r22.<java.util.TimeZone: java.lang.String getID()>();
        r24 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>(r23);
        if r24 == null goto label14;

        $r25 = r0.<java.util.Calendar: java.util.TimeZone zone>;
        $z6 = virtualinvoke r24.<java.util.TimeZone: boolean hasSameRules(java.util.TimeZone)>($r25);
        if $z6 == 0 goto label14;

        $r26 = virtualinvoke r24.<java.util.TimeZone: java.lang.String getID()>();
        $z7 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>(r23);
        if $z7 == 0 goto label14;

        r0.<java.util.Calendar: java.util.TimeZone zone> = r24;

     label14:
        return;

        catch java.security.PrivilegedActionException from label6 to label7 with label8;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.util.Calendar r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.util.Calendar;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.util.Calendar) r1;
        $i0 = virtualinvoke r0.<java.util.Calendar: int compareTo(java.util.Calendar)>($r2);
        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.lang.String[] $r2;

        $r0 = class "java/util/Calendar";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.util.Calendar: boolean $assertionsDisabled> = $z1;
        $r1 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(3);
        <java.util.Calendar: java.util.concurrent.ConcurrentMap cachedLocaleData> = $r1;
        $r2 = newarray (java.lang.String)[17];
        $r2[0] = "ERA";
        $r2[1] = "YEAR";
        $r2[2] = "MONTH";
        $r2[3] = "WEEK_OF_YEAR";
        $r2[4] = "WEEK_OF_MONTH";
        $r2[5] = "DAY_OF_MONTH";
        $r2[6] = "DAY_OF_YEAR";
        $r2[7] = "DAY_OF_WEEK";
        $r2[8] = "DAY_OF_WEEK_IN_MONTH";
        $r2[9] = "AM_PM";
        $r2[10] = "HOUR";
        $r2[11] = "HOUR_OF_DAY";
        $r2[12] = "MINUTE";
        $r2[13] = "SECOND";
        $r2[14] = "MILLISECOND";
        $r2[15] = "ZONE_OFFSET";
        $r2[16] = "DST_OFFSET";
        <java.util.Calendar: java.lang.String[] FIELD_NAME> = $r2;
        return;
    }
}
