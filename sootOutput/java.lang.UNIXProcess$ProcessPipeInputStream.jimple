class java.lang.UNIXProcess$ProcessPipeInputStream extends java.io.BufferedInputStream
{
    private final java.lang.Object closeLock;

    void <init>(int)
    {
        java.lang.UNIXProcess$ProcessPipeInputStream r0;
        int i0;
        java.io.FileInputStream $r1;
        java.io.FileDescriptor $r2;
        java.lang.Object $r3;

        r0 := @this: java.lang.UNIXProcess$ProcessPipeInputStream;
        i0 := @parameter0: int;
        $r1 = new java.io.FileInputStream;
        $r2 = staticinvoke <java.lang.UNIXProcess: java.io.FileDescriptor newFileDescriptor(int)>(i0);
        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r2);
        specialinvoke r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r1);
        $r3 = new java.lang.Object;
        specialinvoke $r3.<java.lang.Object: void <init>()>();
        r0.<java.lang.UNIXProcess$ProcessPipeInputStream: java.lang.Object closeLock> = $r3;
        return;
    }

    private static byte[] drainInputStream(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        byte[] r1, $r2, $r3;

        r0 := @parameter0: java.io.InputStream;
        i0 = 0;
        r1 = null;

     label0:
        $i2 = virtualinvoke r0.<java.io.InputStream: int available()>();
        i1 = $i2;
        if $i2 <= 0 goto label3;

        if r1 != null goto label1;

        $r2 = newarray (byte)[i1];
        goto label2;

     label1:
        $i3 = i0 + i1;
        $r2 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r1, $i3);

     label2:
        r1 = $r2;
        $i4 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);
        i0 = i0 + $i4;
        goto label0;

     label3:
        if r1 == null goto label4;

        $i5 = lengthof r1;
        if i0 != $i5 goto label5;

     label4:
        $r3 = r1;
        goto label6;

     label5:
        $r3 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r1, i0);

     label6:
        return $r3;
    }

    synchronized void processExited()
    {
        java.lang.UNIXProcess$ProcessPipeInputStream r0;
        java.lang.Object r1, $r5;
        java.io.InputStream r2, $r7;
        byte[] r3;
        java.lang.Throwable r4, $r10;
        java.io.IOException $r8, r9;
        java.io.ByteArrayInputStream r11;

        r0 := @this: java.lang.UNIXProcess$ProcessPipeInputStream;
        $r5 = r0.<java.lang.UNIXProcess$ProcessPipeInputStream: java.lang.Object closeLock>;
        r1 = $r5;
        entermonitor $r5;

     label0:
        r2 = r0.<java.lang.UNIXProcess$ProcessPipeInputStream: java.io.InputStream in>;
        if r2 == null goto label3;

        r3 = staticinvoke <java.lang.UNIXProcess$ProcessPipeInputStream: byte[] drainInputStream(java.io.InputStream)>(r2);
        virtualinvoke r2.<java.io.InputStream: void close()>();
        if r3 != null goto label1;

        $r7 = <java.lang.ProcessBuilder$NullInputStream: java.lang.ProcessBuilder$NullInputStream INSTANCE>;
        goto label2;

     label1:
        r11 = new java.io.ByteArrayInputStream;
        $r7 = r11;
        specialinvoke r11.<java.io.ByteArrayInputStream: void <init>(byte[])>(r3);

     label2:
        r0.<java.lang.UNIXProcess$ProcessPipeInputStream: java.io.InputStream in> = $r7;

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;
        r9 = $r8;

     label5:
        exitmonitor r1;

     label6:
        goto label10;

     label7:
        $r10 := @caughtexception;

     label8:
        r4 = $r10;
        exitmonitor r1;

     label9:
        throw r4;

     label10:
        return;

        catch java.io.IOException from label0 to label3 with label4;
        catch java.lang.Throwable from label0 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void close() throws java.io.IOException
    {
        java.lang.UNIXProcess$ProcessPipeInputStream r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: java.lang.UNIXProcess$ProcessPipeInputStream;
        $r3 = r0.<java.lang.UNIXProcess$ProcessPipeInputStream: java.lang.Object closeLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        specialinvoke r0.<java.io.BufferedInputStream: void close()>();
        exitmonitor r1;

     label1:
        goto label5;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;
        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
}
