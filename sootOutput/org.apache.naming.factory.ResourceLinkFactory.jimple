public class org.apache.naming.factory.ResourceLinkFactory extends java.lang.Object implements javax.naming.spi.ObjectFactory
{
    private static final org.apache.naming.StringManager sm;
    private static javax.naming.Context globalContext;
    private static java.util.Map globalResourceRegistrations;

    static void <clinit>()
    {
        org.apache.naming.StringManager $r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        $r0 = staticinvoke <org.apache.naming.StringManager: org.apache.naming.StringManager getManager(java.lang.Class)>(class "org/apache/naming/factory/ResourceLinkFactory");
        <org.apache.naming.factory.ResourceLinkFactory: org.apache.naming.StringManager sm> = $r0;
        <org.apache.naming.factory.ResourceLinkFactory: javax.naming.Context globalContext> = null;
        $r1 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
        <org.apache.naming.factory.ResourceLinkFactory: java.util.Map globalResourceRegistrations> = $r1;
        return;
    }

    public void <init>()
    {
        org.apache.naming.factory.ResourceLinkFactory r0;

        r0 := @this: org.apache.naming.factory.ResourceLinkFactory;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static void setGlobalContext(javax.naming.Context)
    {
        javax.naming.Context r0;
        java.lang.SecurityManager r1;
        java.lang.RuntimePermission $r2;
        java.lang.StringBuilder $r3, $r7;
        java.lang.Class $r4;
        java.lang.String $r5, $r6, $r8;

        r0 := @parameter0: javax.naming.Context;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = new java.lang.RuntimePermission;
        $r3 = new java.lang.StringBuilder;
        $r4 = class "org/apache/naming/factory/ResourceLinkFactory";
        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();
        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);
        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".setGlobalContext");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.RuntimePermission: void <init>(java.lang.String)>($r8);
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label0:
        <org.apache.naming.factory.ResourceLinkFactory: javax.naming.Context globalContext> = r0;
        return;
    }

    public static void registerGlobalResourceAccess(javax.naming.Context, java.lang.String, java.lang.String)
    {
        javax.naming.Context r0;
        java.lang.String r1, r2;
        java.lang.ClassLoader r3;
        java.util.Map r4, $r6, $r9;
        java.lang.Thread $r5;
        java.lang.Object $r7;
        java.util.HashMap $r8;

        r0 := @parameter0: javax.naming.Context;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        staticinvoke <org.apache.naming.factory.ResourceLinkFactory: void validateGlobalContext(javax.naming.Context)>(r0);
        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r3 = virtualinvoke $r5.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
        $r6 = <org.apache.naming.factory.ResourceLinkFactory: java.util.Map globalResourceRegistrations>;
        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);
        r4 = (java.util.Map) $r7;
        if r4 != null goto label0;

        $r8 = new java.util.HashMap;
        specialinvoke $r8.<java.util.HashMap: void <init>()>();
        r4 = $r8;
        $r9 = <org.apache.naming.factory.ResourceLinkFactory: java.util.Map globalResourceRegistrations>;
        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

     label0:
        interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);
        return;
    }

    public static void deregisterGlobalResourceAccess(javax.naming.Context, java.lang.String)
    {
        javax.naming.Context r0;
        java.lang.String r1;
        java.lang.ClassLoader r2;
        java.util.Map r3, $r5;
        java.lang.Thread $r4;
        java.lang.Object $r6;

        r0 := @parameter0: javax.naming.Context;
        r1 := @parameter1: java.lang.String;
        staticinvoke <org.apache.naming.factory.ResourceLinkFactory: void validateGlobalContext(javax.naming.Context)>(r0);
        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r2 = virtualinvoke $r4.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
        $r5 = <org.apache.naming.factory.ResourceLinkFactory: java.util.Map globalResourceRegistrations>;
        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);
        r3 = (java.util.Map) $r6;
        if r3 == null goto label0;

        interfaceinvoke r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

     label0:
        return;
    }

    public static void deregisterGlobalResourceAccess(javax.naming.Context)
    {
        javax.naming.Context r0;
        java.lang.ClassLoader r1;
        java.lang.Thread $r2;
        java.util.Map $r3;

        r0 := @parameter0: javax.naming.Context;
        staticinvoke <org.apache.naming.factory.ResourceLinkFactory: void validateGlobalContext(javax.naming.Context)>(r0);
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r1 = virtualinvoke $r2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
        $r3 = <org.apache.naming.factory.ResourceLinkFactory: java.util.Map globalResourceRegistrations>;
        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);
        return;
    }

    private static void validateGlobalContext(javax.naming.Context)
    {
        javax.naming.Context r0, $r1, $r2;
        java.lang.SecurityException $r3;

        r0 := @parameter0: javax.naming.Context;
        $r1 = <org.apache.naming.factory.ResourceLinkFactory: javax.naming.Context globalContext>;
        if $r1 == null goto label0;

        $r2 = <org.apache.naming.factory.ResourceLinkFactory: javax.naming.Context globalContext>;
        if $r2 == r0 goto label0;

        $r3 = new java.lang.SecurityException;
        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller provided invalid global context");
        throw $r3;

     label0:
        return;
    }

    private static boolean validateGlobalResourceAccess(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Thread $r1;
        java.lang.ClassLoader r2;
        java.util.Map r3, $r4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r2 = virtualinvoke $r1.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
        goto label2;

     label0:
        $r4 = <org.apache.naming.factory.ResourceLinkFactory: java.util.Map globalResourceRegistrations>;
        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);
        r3 = (java.util.Map) $r5;
        if r3 == null goto label1;

        $z0 = interfaceinvoke r3.<java.util.Map: boolean containsValue(java.lang.Object)>(r0);
        if $z0 == 0 goto label1;

        return 1;

     label1:
        r2 = virtualinvoke r2.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

     label2:
        if r2 != null goto label0;

        return 0;
    }

    public java.lang.Object getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable) throws javax.naming.NamingException
    {
        org.apache.naming.factory.ResourceLinkFactory r0;
        java.lang.Object r1, $r10, r13;
        javax.naming.Name r2;
        javax.naming.Context r3, $r12;
        java.util.Hashtable r4;
        javax.naming.Reference r5;
        null_type n0, n1;
        javax.naming.RefAddr r6;
        java.lang.String r7, r11, $r16, $r24, $r25, $r31;
        org.apache.naming.StringManager $r8, $r21, $r29;
        java.lang.Class r9, $r19, $r23;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r14, $r20, $r28;
        java.lang.Object[] $r15, $r22, $r30;
        java.lang.Thread $r17;
        java.lang.ClassLoader $r18;
        java.lang.ClassNotFoundException $r26, r27;

        r0 := @this: org.apache.naming.factory.ResourceLinkFactory;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: javax.naming.Name;
        r3 := @parameter2: javax.naming.Context;
        r4 := @parameter3: java.util.Hashtable;
        $z0 = r1 instanceof org.apache.naming.ResourceLinkRef;
        if $z0 != 0 goto label0;

        return null;

     label0:
        r5 = (javax.naming.Reference) r1;
        n0 = null;
        r6 = virtualinvoke r5.<javax.naming.Reference: javax.naming.RefAddr get(java.lang.String)>("globalName");
        if r6 == null goto label5;

        $r10 = virtualinvoke r6.<javax.naming.RefAddr: java.lang.Object getContent()>();
        r11 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();
        $z1 = staticinvoke <org.apache.naming.factory.ResourceLinkFactory: boolean validateGlobalResourceAccess(java.lang.String)>(r11);
        if $z1 != 0 goto label1;

        return null;

     label1:
        n1 = null;
        $r12 = <org.apache.naming.factory.ResourceLinkFactory: javax.naming.Context globalContext>;
        r13 = interfaceinvoke $r12.<javax.naming.Context: java.lang.Object lookup(java.lang.String)>(r11);
        r7 = virtualinvoke r5.<javax.naming.Reference: java.lang.String getClassName()>();
        if r7 != null goto label2;

        $r14 = new java.lang.IllegalArgumentException;
        $r8 = <org.apache.naming.factory.ResourceLinkFactory: org.apache.naming.StringManager sm>;
        $r15 = newarray (java.lang.Object)[2];
        $r15[0] = r2;
        $r15[1] = r11;
        $r16 = virtualinvoke $r8.<org.apache.naming.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("resourceLinkFactory.nullType", $r15);
        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);
        throw $r14;

     label2:
        $r17 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $r18 = virtualinvoke $r17.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
        r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r7, 1, $r18);
        $r19 = virtualinvoke r13.<java.lang.Object: java.lang.Class getClass()>();
        $z2 = virtualinvoke r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r19);
        if $z2 != 0 goto label4;

        $r20 = new java.lang.IllegalArgumentException;
        $r21 = <org.apache.naming.factory.ResourceLinkFactory: org.apache.naming.StringManager sm>;
        $r22 = newarray (java.lang.Object)[4];
        $r22[0] = r2;
        $r22[1] = r11;
        $r22[2] = r7;
        $r23 = virtualinvoke r13.<java.lang.Object: java.lang.Class getClass()>();
        $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.String getName()>();
        $r22[3] = $r24;
        $r25 = virtualinvoke $r21.<org.apache.naming.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("resourceLinkFactory.wrongType", $r22);
        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);
        throw $r20;

     label3:
        $r26 := @caughtexception;
        r27 = $r26;
        $r28 = new java.lang.IllegalArgumentException;
        $r29 = <org.apache.naming.factory.ResourceLinkFactory: org.apache.naming.StringManager sm>;
        $r30 = newarray (java.lang.Object)[3];
        $r30[0] = r2;
        $r30[1] = r11;
        $r30[2] = r7;
        $r31 = virtualinvoke $r29.<org.apache.naming.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("resourceLinkFactory.unknownType", $r30);
        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r31, r27);
        throw $r28;

     label4:
        return r13;

     label5:
        return null;

        catch java.lang.ClassNotFoundException from label2 to label3 with label3;
    }
}
