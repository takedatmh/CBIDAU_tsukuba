final class java.util.logging.LogManager$1 extends java.lang.Object implements java.security.PrivilegedAction
{

    void <init>()
    {
        java.util.logging.LogManager$1 r0;

        r0 := @this: java.util.logging.LogManager$1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public java.lang.Object run()
    {
        java.util.logging.LogManager$1 r0;
        java.lang.String r1, $r23;
        java.lang.Class r2, r3;
        java.util.logging.LogManager $r4, $r7, $r14, $r24, $r25, $r27, $r31, $r32, $r34, $r36, $r38, $r40, $r43, $r44, $r46, $r49;
        java.lang.ClassLoader $r5, $r12;
        java.lang.Object $r6, $r13;
        java.lang.ClassNotFoundException $r9, r10;
        java.lang.Thread $r11;
        java.lang.Exception $r16, r17;
        java.io.PrintStream $r18;
        java.lang.StringBuilder $r19, $r20, $r21, $r22;
        java.util.logging.LogManager$RootLogger $r28;
        java.util.logging.Logger $r33, $r37, $r41, $r42, $r45, $r48, $r51;
        java.util.logging.LogManager$LoggerContext $r35, $r39, $r47, $r50;

        r0 := @this: java.util.logging.LogManager$1;
        r1 = null;

     label0:
        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.logging.manager");
        if r1 == null goto label4;

     label1:
        $r5 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        r2 = virtualinvoke $r5.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);
        $r6 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();
        $r7 = (java.util.logging.LogManager) $r6;
        staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$102(java.util.logging.LogManager)>($r7);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;
        r10 = $r9;
        $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $r12 = virtualinvoke $r11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
        r3 = virtualinvoke $r12.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);
        $r13 = virtualinvoke r3.<java.lang.Class: java.lang.Object newInstance()>();
        $r14 = (java.util.logging.LogManager) $r13;
        staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$102(java.util.logging.LogManager)>($r14);

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;
        r17 = $r16;
        $r18 = <java.lang.System: java.io.PrintStream err>;
        $r19 = new java.lang.StringBuilder;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not load Logmanager \"");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r23);
        virtualinvoke r17.<java.lang.Exception: void printStackTrace()>();

     label6:
        $r24 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        if $r24 != null goto label7;

        $r25 = new java.util.logging.LogManager;
        specialinvoke $r25.<java.util.logging.LogManager: void <init>()>();
        staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$102(java.util.logging.LogManager)>($r25);

     label7:
        $r27 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        $r28 = new java.util.logging.LogManager$RootLogger;
        $r4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();
        specialinvoke $r28.<java.util.logging.LogManager$RootLogger: void <init>(java.util.logging.LogManager,java.util.logging.LogManager$1)>($r4, null);
        staticinvoke <java.util.logging.LogManager: java.util.logging.Logger access$202(java.util.logging.LogManager,java.util.logging.Logger)>($r27, $r28);
        $r31 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        $r32 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        $r33 = staticinvoke <java.util.logging.LogManager: java.util.logging.Logger access$200(java.util.logging.LogManager)>($r32);
        virtualinvoke $r31.<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>($r33);
        $r34 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        $r35 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext access$400(java.util.logging.LogManager)>($r34);
        $r36 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        $r37 = staticinvoke <java.util.logging.LogManager: java.util.logging.Logger access$200(java.util.logging.LogManager)>($r36);
        virtualinvoke $r35.<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>($r37, 0);
        $r38 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        $r39 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext access$500(java.util.logging.LogManager)>($r38);
        $r40 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        $r41 = staticinvoke <java.util.logging.LogManager: java.util.logging.Logger access$200(java.util.logging.LogManager)>($r40);
        virtualinvoke $r39.<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>($r41, 0);
        $r42 = <java.util.logging.Logger: java.util.logging.Logger global>;
        $r43 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        virtualinvoke $r42.<java.util.logging.Logger: void setLogManager(java.util.logging.LogManager)>($r43);
        $r44 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        $r45 = <java.util.logging.Logger: java.util.logging.Logger global>;
        virtualinvoke $r44.<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>($r45);
        $r46 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        $r47 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext access$400(java.util.logging.LogManager)>($r46);
        $r48 = <java.util.logging.Logger: java.util.logging.Logger global>;
        virtualinvoke $r47.<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>($r48, 0);
        $r49 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        $r50 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext access$500(java.util.logging.LogManager)>($r49);
        $r51 = <java.util.logging.Logger: java.util.logging.Logger global>;
        virtualinvoke $r50.<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger,boolean)>($r51, 0);
        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.Exception from label0 to label4 with label5;
    }
}
