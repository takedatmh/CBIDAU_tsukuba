final class java.util.regex.Pattern$GroupHead extends java.util.regex.Pattern$Node
{
    int localIndex;

    void <init>(int)
    {
        java.util.regex.Pattern$GroupHead r0;
        int i0;

        r0 := @this: java.util.regex.Pattern$GroupHead;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        r0.<java.util.regex.Pattern$GroupHead: int localIndex> = i0;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$GroupHead r0;
        java.util.regex.Matcher r1;
        int i0, i1, $i2, $i3, $i4;
        java.lang.CharSequence r2;
        boolean z0;
        int[] $r3, $r4, $r6;
        java.util.regex.Pattern$Node $r5;

        r0 := @this: java.util.regex.Pattern$GroupHead;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $r3 = r1.<java.util.regex.Matcher: int[] locals>;
        $i2 = r0.<java.util.regex.Pattern$GroupHead: int localIndex>;
        i1 = $r3[$i2];
        $r4 = r1.<java.util.regex.Matcher: int[] locals>;
        $i3 = r0.<java.util.regex.Pattern$GroupHead: int localIndex>;
        $r4[$i3] = i0;
        $r5 = r0.<java.util.regex.Pattern$GroupHead: java.util.regex.Pattern$Node next>;
        z0 = virtualinvoke $r5.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        $r6 = r1.<java.util.regex.Matcher: int[] locals>;
        $i4 = r0.<java.util.regex.Pattern$GroupHead: int localIndex>;
        $r6[$i4] = i1;
        return z0;
    }

    boolean matchRef(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$GroupHead r0;
        java.util.regex.Matcher r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.CharSequence r2;
        boolean z0;
        int[] $r3, $r4, $r6;
        java.util.regex.Pattern$Node $r5;

        r0 := @this: java.util.regex.Pattern$GroupHead;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $r3 = r1.<java.util.regex.Matcher: int[] locals>;
        $i2 = r0.<java.util.regex.Pattern$GroupHead: int localIndex>;
        i1 = $r3[$i2];
        $r4 = r1.<java.util.regex.Matcher: int[] locals>;
        $i3 = r0.<java.util.regex.Pattern$GroupHead: int localIndex>;
        $i4 = i0 ^ -1;
        $r4[$i3] = $i4;
        $r5 = r0.<java.util.regex.Pattern$GroupHead: java.util.regex.Pattern$Node next>;
        z0 = virtualinvoke $r5.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        $r6 = r1.<java.util.regex.Matcher: int[] locals>;
        $i5 = r0.<java.util.regex.Pattern$GroupHead: int localIndex>;
        $r6[$i5] = i1;
        return z0;
    }
}
