public class java.io.BufferedReader extends java.io.Reader
{
    private java.io.Reader in;
    private char[] cb;
    private int nChars;
    private int nextChar;
    private static final int INVALIDATED;
    private static final int UNMARKED;
    private int markedChar;
    private int readAheadLimit;
    private boolean skipLF;
    private boolean markedSkipLF;
    private static int defaultCharBufferSize;
    private static int defaultExpectedLineLength;

    public void <init>(java.io.Reader, int)
    {
        java.io.BufferedReader r0;
        java.io.Reader r1;
        int i0;
        byte $b1;
        java.lang.IllegalArgumentException $r2;
        char[] $r3;

        r0 := @this: java.io.BufferedReader;
        r1 := @parameter0: java.io.Reader;
        i0 := @parameter1: int;
        specialinvoke r0.<java.io.Reader: void <init>(java.lang.Object)>(r1);
        r0.<java.io.BufferedReader: int markedChar> = -1;
        r0.<java.io.BufferedReader: int readAheadLimit> = 0;
        r0.<java.io.BufferedReader: boolean skipLF> = 0;
        r0.<java.io.BufferedReader: boolean markedSkipLF> = 0;
        if i0 > 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Buffer size <= 0");
        throw $r2;

     label0:
        r0.<java.io.BufferedReader: java.io.Reader in> = r1;
        $r3 = newarray (char)[i0];
        r0.<java.io.BufferedReader: char[] cb> = $r3;
        $b1 = 0;
        r0.<java.io.BufferedReader: int nChars> = $b1;
        r0.<java.io.BufferedReader: int nextChar> = $b1;
        return;
    }

    public void <init>(java.io.Reader)
    {
        java.io.BufferedReader r0;
        java.io.Reader r1;
        int $i0;

        r0 := @this: java.io.BufferedReader;
        r1 := @parameter0: java.io.Reader;
        $i0 = <java.io.BufferedReader: int defaultCharBufferSize>;
        specialinvoke r0.<java.io.BufferedReader: void <init>(java.io.Reader,int)>(r1, $i0);
        return;
    }

    private void ensureOpen() throws java.io.IOException
    {
        java.io.BufferedReader r0;
        java.io.Reader $r1;
        java.io.IOException $r2;

        r0 := @this: java.io.BufferedReader;
        $r1 = r0.<java.io.BufferedReader: java.io.Reader in>;
        if $r1 != null goto label0;

        $r2 = new java.io.IOException;
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Stream closed");
        throw $r2;

     label0:
        return;
    }

    private void fill() throws java.io.IOException
    {
        java.io.BufferedReader r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, i14, $i15;
        char[] r1, $r2, $r3, $r4, $r5, $r7, $r8;
        java.io.Reader $r6;

        r0 := @this: java.io.BufferedReader;
        $i2 = r0.<java.io.BufferedReader: int markedChar>;
        if $i2 > -1 goto label0;

        i0 = 0;
        goto label4;

     label0:
        $i3 = r0.<java.io.BufferedReader: int nextChar>;
        $i4 = r0.<java.io.BufferedReader: int markedChar>;
        i1 = $i3 - $i4;
        $i5 = r0.<java.io.BufferedReader: int readAheadLimit>;
        if i1 < $i5 goto label1;

        r0.<java.io.BufferedReader: int markedChar> = -2;
        r0.<java.io.BufferedReader: int readAheadLimit> = 0;
        i0 = 0;
        goto label4;

     label1:
        $i6 = r0.<java.io.BufferedReader: int readAheadLimit>;
        $r2 = r0.<java.io.BufferedReader: char[] cb>;
        $i7 = lengthof $r2;
        if $i6 > $i7 goto label2;

        $r3 = r0.<java.io.BufferedReader: char[] cb>;
        $i8 = r0.<java.io.BufferedReader: int markedChar>;
        $r4 = r0.<java.io.BufferedReader: char[] cb>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i8, $r4, 0, i1);
        r0.<java.io.BufferedReader: int markedChar> = 0;
        i0 = i1;
        goto label3;

     label2:
        $i9 = r0.<java.io.BufferedReader: int readAheadLimit>;
        r1 = newarray (char)[$i9];
        $r5 = r0.<java.io.BufferedReader: char[] cb>;
        $i10 = r0.<java.io.BufferedReader: int markedChar>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i10, r1, 0, i1);
        r0.<java.io.BufferedReader: char[] cb> = r1;
        r0.<java.io.BufferedReader: int markedChar> = 0;
        i0 = i1;

     label3:
        r0.<java.io.BufferedReader: int nChars> = i1;
        r0.<java.io.BufferedReader: int nextChar> = i1;

     label4:
        $r6 = r0.<java.io.BufferedReader: java.io.Reader in>;
        $r7 = r0.<java.io.BufferedReader: char[] cb>;
        $r8 = r0.<java.io.BufferedReader: char[] cb>;
        $i12 = lengthof $r8;
        $i13 = $i12 - i0;
        i14 = virtualinvoke $r6.<java.io.Reader: int read(char[],int,int)>($r7, i0, $i13);
        if i14 == 0 goto label4;

        if i14 <= 0 goto label5;

        $i15 = i0 + i14;
        r0.<java.io.BufferedReader: int nChars> = $i15;
        r0.<java.io.BufferedReader: int nextChar> = i0;

     label5:
        return;
    }

    public int read() throws java.io.IOException
    {
        java.io.BufferedReader r0;
        java.lang.Object r1, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i9, $i10;
        java.lang.Throwable r2, $r8;
        byte $b5;
        boolean $z0;
        char[] $r4, $r6;
        char $c7, $c11;

        r0 := @this: java.io.BufferedReader;
        $r3 = r0.<java.io.BufferedReader: java.lang.Object lock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        specialinvoke r0.<java.io.BufferedReader: void ensureOpen()>();

     label1:
        $i1 = r0.<java.io.BufferedReader: int nextChar>;
        $i2 = r0.<java.io.BufferedReader: int nChars>;
        if $i1 < $i2 goto label3;

        specialinvoke r0.<java.io.BufferedReader: void fill()>();
        $i3 = r0.<java.io.BufferedReader: int nextChar>;
        $i4 = r0.<java.io.BufferedReader: int nChars>;
        if $i3 < $i4 goto label3;

        $b5 = -1;
        exitmonitor r1;

     label2:
        return $b5;

     label3:
        $z0 = r0.<java.io.BufferedReader: boolean skipLF>;
        if $z0 == 0 goto label4;

        r0.<java.io.BufferedReader: boolean skipLF> = 0;
        $r4 = r0.<java.io.BufferedReader: char[] cb>;
        $i6 = r0.<java.io.BufferedReader: int nextChar>;
        $c7 = $r4[$i6];
        if $c7 != 10 goto label4;

        $i8 = r0.<java.io.BufferedReader: int nextChar>;
        $i9 = $i8 + 1;
        r0.<java.io.BufferedReader: int nextChar> = $i9;
        goto label1;

     label4:
        $r6 = r0.<java.io.BufferedReader: char[] cb>;
        $i0 = r0.<java.io.BufferedReader: int nextChar>;
        $i10 = $i0 + 1;
        r0.<java.io.BufferedReader: int nextChar> = $i10;
        $c11 = $r6[$i0];
        exitmonitor r1;

     label5:
        return $c11;

     label6:
        $r8 := @caughtexception;

     label7:
        r2 = $r8;
        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label0 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private int read1(char[], int, int) throws java.io.IOException
    {
        java.io.BufferedReader r0;
        char[] r1, $r2, $r4, $r6;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        boolean $z0, $z1;
        java.io.Reader $r3;
        char $c11;

        r0 := @this: java.io.BufferedReader;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i3 = r0.<java.io.BufferedReader: int nextChar>;
        $i4 = r0.<java.io.BufferedReader: int nChars>;
        if $i3 < $i4 goto label1;

        $r2 = r0.<java.io.BufferedReader: char[] cb>;
        $i5 = lengthof $r2;
        if i1 < $i5 goto label0;

        $i6 = r0.<java.io.BufferedReader: int markedChar>;
        if $i6 > -1 goto label0;

        $z0 = r0.<java.io.BufferedReader: boolean skipLF>;
        if $z0 != 0 goto label0;

        $r3 = r0.<java.io.BufferedReader: java.io.Reader in>;
        $i7 = virtualinvoke $r3.<java.io.Reader: int read(char[],int,int)>(r1, i0, i1);
        return $i7;

     label0:
        specialinvoke r0.<java.io.BufferedReader: void fill()>();

     label1:
        $i8 = r0.<java.io.BufferedReader: int nextChar>;
        $i9 = r0.<java.io.BufferedReader: int nChars>;
        if $i8 < $i9 goto label2;

        return -1;

     label2:
        $z1 = r0.<java.io.BufferedReader: boolean skipLF>;
        if $z1 == 0 goto label4;

        r0.<java.io.BufferedReader: boolean skipLF> = 0;
        $r4 = r0.<java.io.BufferedReader: char[] cb>;
        $i10 = r0.<java.io.BufferedReader: int nextChar>;
        $c11 = $r4[$i10];
        if $c11 != 10 goto label4;

        $i12 = r0.<java.io.BufferedReader: int nextChar>;
        $i13 = $i12 + 1;
        r0.<java.io.BufferedReader: int nextChar> = $i13;
        $i14 = r0.<java.io.BufferedReader: int nextChar>;
        $i15 = r0.<java.io.BufferedReader: int nChars>;
        if $i14 < $i15 goto label3;

        specialinvoke r0.<java.io.BufferedReader: void fill()>();

     label3:
        $i16 = r0.<java.io.BufferedReader: int nextChar>;
        $i17 = r0.<java.io.BufferedReader: int nChars>;
        if $i16 < $i17 goto label4;

        return -1;

     label4:
        $i18 = r0.<java.io.BufferedReader: int nChars>;
        $i19 = r0.<java.io.BufferedReader: int nextChar>;
        $i20 = $i18 - $i19;
        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i20);
        $r6 = r0.<java.io.BufferedReader: char[] cb>;
        $i21 = r0.<java.io.BufferedReader: int nextChar>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i21, r1, i0, i2);
        $i22 = r0.<java.io.BufferedReader: int nextChar>;
        $i23 = $i22 + i2;
        r0.<java.io.BufferedReader: int nextChar> = $i23;
        return i2;
    }

    public int read(char[], int, int) throws java.io.IOException
    {
        java.io.BufferedReader r0;
        char[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i10, $i11;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        java.lang.IndexOutOfBoundsException $r5;
        byte $b8;
        java.io.Reader $r6;
        boolean $z0;

        r0 := @this: java.io.BufferedReader;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r4 = r0.<java.io.BufferedReader: java.lang.Object lock>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        specialinvoke r0.<java.io.BufferedReader: void ensureOpen()>();
        if i0 < 0 goto label1;

        $i4 = lengthof r1;
        if i0 > $i4 goto label1;

        if i1 < 0 goto label1;

        $i5 = i0 + i1;
        $i6 = lengthof r1;
        if $i5 > $i6 goto label1;

        $i7 = i0 + i1;
        if $i7 >= 0 goto label2;

     label1:
        $r5 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r5;

     label2:
        if i1 != 0 goto label4;

        $b8 = 0;
        exitmonitor r2;

     label3:
        return $b8;

     label4:
        i2 = specialinvoke r0.<java.io.BufferedReader: int read1(char[],int,int)>(r1, i0, i1);
        if i2 > 0 goto label6;

        exitmonitor r2;

     label5:
        return i2;

     label6:
        if i2 >= i1 goto label8;

        $r6 = r0.<java.io.BufferedReader: java.io.Reader in>;
        $z0 = virtualinvoke $r6.<java.io.Reader: boolean ready()>();
        if $z0 == 0 goto label8;

        $i10 = i0 + i2;
        $i11 = i1 - i2;
        i3 = specialinvoke r0.<java.io.BufferedReader: int read1(char[],int,int)>(r1, $i10, $i11);
        if i3 > 0 goto label7;

        goto label8;

     label7:
        i2 = i2 + i3;
        goto label6;

     label8:
        exitmonitor r2;

     label9:
        return i2;

     label10:
        $r7 := @caughtexception;

     label11:
        r3 = $r7;
        exitmonitor r2;

     label12:
        throw r3;

        catch java.lang.Throwable from label0 to label3 with label10;
        catch java.lang.Throwable from label4 to label5 with label10;
        catch java.lang.Throwable from label6 to label9 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    java.lang.String readLine(boolean) throws java.io.IOException
    {
        java.io.BufferedReader r0;
        boolean z0, z1, z2, $z3, $z4;
        java.lang.StringBuffer r1, $r16;
        java.lang.Object r2, $r5;
        char c0, $c9;
        int i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        java.lang.String r3, $r6, $r10;
        java.lang.Throwable r4, $r19;
        null_type $n0;
        char[] $r7, $r9, $r11, $r12, $r17;

        r0 := @this: java.io.BufferedReader;
        z0 := @parameter0: boolean;
        r1 = null;
        $r5 = r0.<java.io.BufferedReader: java.lang.Object lock>;
        r2 = $r5;
        entermonitor $r5;

     label0:
        specialinvoke r0.<java.io.BufferedReader: void ensureOpen()>();
        if z0 != 0 goto label1;

        $z3 = r0.<java.io.BufferedReader: boolean skipLF>;
        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;
        goto label3;

     label2:
        $z4 = 0;

     label3:
        z1 = $z4;

     label4:
        $i3 = r0.<java.io.BufferedReader: int nextChar>;
        $i4 = r0.<java.io.BufferedReader: int nChars>;
        if $i3 < $i4 goto label5;

        specialinvoke r0.<java.io.BufferedReader: void fill()>();

     label5:
        $i5 = r0.<java.io.BufferedReader: int nextChar>;
        $i6 = r0.<java.io.BufferedReader: int nChars>;
        if $i5 < $i6 goto label9;

        if r1 == null goto label7;

        $i7 = virtualinvoke r1.<java.lang.StringBuffer: int length()>();
        if $i7 <= 0 goto label7;

        $r6 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();
        exitmonitor r2;

     label6:
        return $r6;

     label7:
        $n0 = null;
        exitmonitor r2;

     label8:
        return $n0;

     label9:
        z2 = 0;
        c0 = 0;
        if z1 == 0 goto label10;

        $r7 = r0.<java.io.BufferedReader: char[] cb>;
        $i8 = r0.<java.io.BufferedReader: int nextChar>;
        $c9 = $r7[$i8];
        if $c9 != 10 goto label10;

        $i10 = r0.<java.io.BufferedReader: int nextChar>;
        $i11 = $i10 + 1;
        r0.<java.io.BufferedReader: int nextChar> = $i11;

     label10:
        r0.<java.io.BufferedReader: boolean skipLF> = 0;
        z1 = 0;
        i1 = r0.<java.io.BufferedReader: int nextChar>;

     label11:
        $i12 = r0.<java.io.BufferedReader: int nChars>;
        if i1 >= $i12 goto label14;

        $r9 = r0.<java.io.BufferedReader: char[] cb>;
        c0 = $r9[i1];
        if c0 == 10 goto label12;

        if c0 != 13 goto label13;

     label12:
        z2 = 1;
        goto label14;

     label13:
        i1 = i1 + 1;
        goto label11;

     label14:
        i2 = r0.<java.io.BufferedReader: int nextChar>;
        r0.<java.io.BufferedReader: int nextChar> = i1;
        if z2 == 0 goto label19;

        if r1 != null goto label15;

        $r10 = new java.lang.String;
        $r11 = r0.<java.io.BufferedReader: char[] cb>;
        $i13 = i1 - i2;
        specialinvoke $r10.<java.lang.String: void <init>(char[],int,int)>($r11, i2, $i13);
        r3 = $r10;
        goto label16;

     label15:
        $r12 = r0.<java.io.BufferedReader: char[] cb>;
        $i14 = i1 - i2;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r12, i2, $i14);
        r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

     label16:
        $i15 = r0.<java.io.BufferedReader: int nextChar>;
        $i16 = $i15 + 1;
        r0.<java.io.BufferedReader: int nextChar> = $i16;
        if c0 != 13 goto label17;

        r0.<java.io.BufferedReader: boolean skipLF> = 1;

     label17:
        exitmonitor r2;

     label18:
        return r3;

     label19:
        if r1 != null goto label20;

        $r16 = new java.lang.StringBuffer;
        $i17 = <java.io.BufferedReader: int defaultExpectedLineLength>;
        specialinvoke $r16.<java.lang.StringBuffer: void <init>(int)>($i17);
        r1 = $r16;

     label20:
        $r17 = r0.<java.io.BufferedReader: char[] cb>;
        $i18 = i1 - i2;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r17, i2, $i18);
        goto label4;

     label21:
        $r19 := @caughtexception;
        r4 = $r19;
        exitmonitor r2;

     label22:
        throw r4;

        catch java.lang.Throwable from label0 to label6 with label21;
        catch java.lang.Throwable from label7 to label8 with label21;
        catch java.lang.Throwable from label9 to label18 with label21;
        catch java.lang.Throwable from label19 to label22 with label21;
    }

    public java.lang.String readLine() throws java.io.IOException
    {
        java.io.BufferedReader r0;
        java.lang.String $r1;

        r0 := @this: java.io.BufferedReader;
        $r1 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine(boolean)>(0);
        return $r1;
    }

    public long skip(long) throws java.io.IOException
    {
        java.io.BufferedReader r0;
        long l0, l1, l2, $l18, $l19, $l22;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r8;
        byte $b3, $b4, $b16;
        java.lang.IllegalArgumentException $r3;
        int $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i17, $i20, $i21;
        boolean $z0;
        char[] $r5;
        char $c10;

        r0 := @this: java.io.BufferedReader;
        l0 := @parameter0: long;
        $b3 = l0 cmp 0L;
        if $b3 >= 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("skip value is negative");
        throw $r3;

     label0:
        $r4 = r0.<java.io.BufferedReader: java.lang.Object lock>;
        r1 = $r4;
        entermonitor $r4;

     label1:
        specialinvoke r0.<java.io.BufferedReader: void ensureOpen()>();
        l1 = l0;

     label2:
        $b4 = l1 cmp 0L;
        if $b4 <= 0 goto label7;

        $i5 = r0.<java.io.BufferedReader: int nextChar>;
        $i6 = r0.<java.io.BufferedReader: int nChars>;
        if $i5 < $i6 goto label3;

        specialinvoke r0.<java.io.BufferedReader: void fill()>();

     label3:
        $i7 = r0.<java.io.BufferedReader: int nextChar>;
        $i8 = r0.<java.io.BufferedReader: int nChars>;
        if $i7 < $i8 goto label4;

        goto label7;

     label4:
        $z0 = r0.<java.io.BufferedReader: boolean skipLF>;
        if $z0 == 0 goto label5;

        r0.<java.io.BufferedReader: boolean skipLF> = 0;
        $r5 = r0.<java.io.BufferedReader: char[] cb>;
        $i9 = r0.<java.io.BufferedReader: int nextChar>;
        $c10 = $r5[$i9];
        if $c10 != 10 goto label5;

        $i11 = r0.<java.io.BufferedReader: int nextChar>;
        $i12 = $i11 + 1;
        r0.<java.io.BufferedReader: int nextChar> = $i12;

     label5:
        $i13 = r0.<java.io.BufferedReader: int nChars>;
        $i14 = r0.<java.io.BufferedReader: int nextChar>;
        $i15 = $i13 - $i14;
        l2 = (long) $i15;
        $b16 = l1 cmp l2;
        if $b16 > 0 goto label6;

        $i17 = r0.<java.io.BufferedReader: int nextChar>;
        $l18 = (long) $i17;
        $l19 = $l18 + l1;
        $i20 = (int) $l19;
        r0.<java.io.BufferedReader: int nextChar> = $i20;
        l1 = 0L;
        goto label7;

     label6:
        l1 = l1 - l2;
        $i21 = r0.<java.io.BufferedReader: int nChars>;
        r0.<java.io.BufferedReader: int nextChar> = $i21;
        goto label2;

     label7:
        $l22 = l0 - l1;
        exitmonitor r1;

     label8:
        return $l22;

     label9:
        $r8 := @caughtexception;

     label10:
        r2 = $r8;
        exitmonitor r1;

     label11:
        throw r2;

        catch java.lang.Throwable from label1 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    public boolean ready() throws java.io.IOException
    {
        java.io.BufferedReader r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9;
        java.io.Reader $r4, $r7;
        char[] $r5;
        char $c5;

        r0 := @this: java.io.BufferedReader;
        $r3 = r0.<java.io.BufferedReader: java.lang.Object lock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        specialinvoke r0.<java.io.BufferedReader: void ensureOpen()>();
        $z0 = r0.<java.io.BufferedReader: boolean skipLF>;
        if $z0 == 0 goto label3;

        $i0 = r0.<java.io.BufferedReader: int nextChar>;
        $i1 = r0.<java.io.BufferedReader: int nChars>;
        if $i0 < $i1 goto label1;

        $r4 = r0.<java.io.BufferedReader: java.io.Reader in>;
        $z1 = virtualinvoke $r4.<java.io.Reader: boolean ready()>();
        if $z1 == 0 goto label1;

        specialinvoke r0.<java.io.BufferedReader: void fill()>();

     label1:
        $i2 = r0.<java.io.BufferedReader: int nextChar>;
        $i3 = r0.<java.io.BufferedReader: int nChars>;
        if $i2 >= $i3 goto label3;

        $r5 = r0.<java.io.BufferedReader: char[] cb>;
        $i4 = r0.<java.io.BufferedReader: int nextChar>;
        $c5 = $r5[$i4];
        if $c5 != 10 goto label2;

        $i6 = r0.<java.io.BufferedReader: int nextChar>;
        $i7 = $i6 + 1;
        r0.<java.io.BufferedReader: int nextChar> = $i7;

     label2:
        r0.<java.io.BufferedReader: boolean skipLF> = 0;

     label3:
        $i8 = r0.<java.io.BufferedReader: int nextChar>;
        $i9 = r0.<java.io.BufferedReader: int nChars>;
        if $i8 < $i9 goto label4;

        $r7 = r0.<java.io.BufferedReader: java.io.Reader in>;
        $z2 = virtualinvoke $r7.<java.io.Reader: boolean ready()>();
        if $z2 == 0 goto label5;

     label4:
        $z3 = 1;
        goto label6;

     label5:
        $z3 = 0;

     label6:
        exitmonitor r1;

     label7:
        return $z3;

     label8:
        $r8 := @caughtexception;

     label9:
        r2 = $r8;
        exitmonitor r1;

     label10:
        throw r2;

        catch java.lang.Throwable from label0 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    public boolean markSupported()
    {
        java.io.BufferedReader r0;

        r0 := @this: java.io.BufferedReader;
        return 1;
    }

    public void mark(int) throws java.io.IOException
    {
        java.io.BufferedReader r0;
        int i0, $i1;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r5;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;

        r0 := @this: java.io.BufferedReader;
        i0 := @parameter0: int;
        if i0 >= 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Read-ahead limit < 0");
        throw $r3;

     label0:
        $r4 = r0.<java.io.BufferedReader: java.lang.Object lock>;
        r1 = $r4;
        entermonitor $r4;

     label1:
        specialinvoke r0.<java.io.BufferedReader: void ensureOpen()>();
        r0.<java.io.BufferedReader: int readAheadLimit> = i0;
        $i1 = r0.<java.io.BufferedReader: int nextChar>;
        r0.<java.io.BufferedReader: int markedChar> = $i1;
        $z0 = r0.<java.io.BufferedReader: boolean skipLF>;
        r0.<java.io.BufferedReader: boolean markedSkipLF> = $z0;
        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        r2 = $r5;
        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void reset() throws java.io.IOException
    {
        java.io.BufferedReader r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r7;
        int $i0, $i1, $i2;
        java.io.IOException $r4;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: java.io.BufferedReader;
        $r3 = r0.<java.io.BufferedReader: java.lang.Object lock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        specialinvoke r0.<java.io.BufferedReader: void ensureOpen()>();
        $i0 = r0.<java.io.BufferedReader: int markedChar>;
        if $i0 >= 0 goto label3;

        $r4 = new java.io.IOException;
        $i1 = r0.<java.io.BufferedReader: int markedChar>;
        if $i1 != -2 goto label1;

        $r6 = "Mark invalid";
        goto label2;

     label1:
        $r6 = "Stream not marked";

     label2:
        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r6);
        throw $r4;

     label3:
        $i2 = r0.<java.io.BufferedReader: int markedChar>;
        r0.<java.io.BufferedReader: int nextChar> = $i2;
        $z0 = r0.<java.io.BufferedReader: boolean markedSkipLF>;
        r0.<java.io.BufferedReader: boolean skipLF> = $z0;
        exitmonitor r1;

     label4:
        goto label8;

     label5:
        $r7 := @caughtexception;

     label6:
        r2 = $r7;
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        return;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void close() throws java.io.IOException
    {
        java.io.BufferedReader r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        java.io.Reader $r4, $r5;

        r0 := @this: java.io.BufferedReader;
        $r3 = r0.<java.io.BufferedReader: java.lang.Object lock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = r0.<java.io.BufferedReader: java.io.Reader in>;
        if $r4 != null goto label2;

        exitmonitor r1;

     label1:
        return;

     label2:
        $r5 = r0.<java.io.BufferedReader: java.io.Reader in>;
        virtualinvoke $r5.<java.io.Reader: void close()>();
        r0.<java.io.BufferedReader: java.io.Reader in> = null;
        r0.<java.io.BufferedReader: char[] cb> = null;
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r6 := @caughtexception;

     label5:
        r2 = $r6;
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    static void <clinit>()
    {
        <java.io.BufferedReader: int defaultCharBufferSize> = 8192;
        <java.io.BufferedReader: int defaultExpectedLineLength> = 80;
        return;
    }
}
