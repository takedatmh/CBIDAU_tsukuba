public final class org.apache.tomcat.util.bcel.classfile.ClassParser extends java.lang.Object
{
    private static final int MAGIC;
    private final java.io.DataInput dataInputStream;
    private java.lang.String class_name;
    private java.lang.String superclass_name;
    private int access_flags;
    private java.lang.String[] interface_names;
    private org.apache.tomcat.util.bcel.classfile.ConstantPool constant_pool;
    private org.apache.tomcat.util.bcel.classfile.Annotations runtimeVisibleAnnotations;
    private static final int BUFSIZE;
    private static final java.lang.String[] INTERFACES_EMPTY_ARRAY;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[0];
        <org.apache.tomcat.util.bcel.classfile.ClassParser: java.lang.String[] INTERFACES_EMPTY_ARRAY> = $r0;
        return;
    }

    public void <init>(java.io.InputStream)
    {
        org.apache.tomcat.util.bcel.classfile.ClassParser r0;
        java.io.InputStream r1;
        java.io.DataInputStream $r2;
        java.io.BufferedInputStream $r3;

        r0 := @this: org.apache.tomcat.util.bcel.classfile.ClassParser;
        r1 := @parameter0: java.io.InputStream;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = new java.io.DataInputStream;
        $r3 = new java.io.BufferedInputStream;
        specialinvoke $r3.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>(r1, 8192);
        specialinvoke $r2.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r3);
        r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.io.DataInput dataInputStream> = $r2;
        return;
    }

    public org.apache.tomcat.util.bcel.classfile.JavaClass parse() throws java.io.IOException, org.apache.tomcat.util.bcel.classfile.ClassFormatException
    {
        org.apache.tomcat.util.bcel.classfile.ClassParser r0;
        org.apache.tomcat.util.bcel.classfile.JavaClass $r1;
        java.lang.String $r2, $r3;
        int $i0;
        org.apache.tomcat.util.bcel.classfile.ConstantPool $r4;
        java.lang.String[] $r5;
        org.apache.tomcat.util.bcel.classfile.Annotations $r6;

        r0 := @this: org.apache.tomcat.util.bcel.classfile.ClassParser;
        specialinvoke r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: void readID()>();
        specialinvoke r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: void readVersion()>();
        specialinvoke r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: void readConstantPool()>();
        specialinvoke r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: void readClassInfo()>();
        specialinvoke r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: void readInterfaces()>();
        specialinvoke r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: void readFields()>();
        specialinvoke r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: void readMethods()>();
        specialinvoke r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: void readAttributes()>();
        $r1 = new org.apache.tomcat.util.bcel.classfile.JavaClass;
        $r2 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.lang.String class_name>;
        $r3 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.lang.String superclass_name>;
        $i0 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: int access_flags>;
        $r4 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: org.apache.tomcat.util.bcel.classfile.ConstantPool constant_pool>;
        $r5 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.lang.String[] interface_names>;
        $r6 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: org.apache.tomcat.util.bcel.classfile.Annotations runtimeVisibleAnnotations>;
        specialinvoke $r1.<org.apache.tomcat.util.bcel.classfile.JavaClass: void <init>(java.lang.String,java.lang.String,int,org.apache.tomcat.util.bcel.classfile.ConstantPool,java.lang.String[],org.apache.tomcat.util.bcel.classfile.Annotations)>($r2, $r3, $i0, $r4, $r5, $r6);
        return $r1;
    }

    private void readAttributes() throws java.io.IOException, org.apache.tomcat.util.bcel.classfile.ClassFormatException
    {
        org.apache.tomcat.util.bcel.classfile.ClassParser r0;
        int i0, i1, i2, i3;
        org.apache.tomcat.util.bcel.classfile.ConstantUtf8 r1;
        java.lang.String r2;
        java.io.DataInput $r3, $r4, $r7, $r11, $r13;
        org.apache.tomcat.util.bcel.classfile.ConstantPool $r5, $r12;
        org.apache.tomcat.util.bcel.classfile.Constant $r6;
        boolean $z0;
        org.apache.tomcat.util.bcel.classfile.Annotations $r8, $r10;
        org.apache.tomcat.util.bcel.classfile.ClassFormatException $r9;

        r0 := @this: org.apache.tomcat.util.bcel.classfile.ClassParser;
        $r3 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.io.DataInput dataInputStream>;
        i0 = interfaceinvoke $r3.<java.io.DataInput: int readUnsignedShort()>();
        i1 = 0;
        goto label4;

     label0:
        $r4 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.io.DataInput dataInputStream>;
        i2 = interfaceinvoke $r4.<java.io.DataInput: int readUnsignedShort()>();
        $r5 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: org.apache.tomcat.util.bcel.classfile.ConstantPool constant_pool>;
        $r6 = virtualinvoke $r5.<org.apache.tomcat.util.bcel.classfile.ConstantPool: org.apache.tomcat.util.bcel.classfile.Constant getConstant(int,byte)>(i2, 1);
        r1 = (org.apache.tomcat.util.bcel.classfile.ConstantUtf8) $r6;
        r2 = virtualinvoke r1.<org.apache.tomcat.util.bcel.classfile.ConstantUtf8: java.lang.String getBytes()>();
        $r7 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.io.DataInput dataInputStream>;
        i3 = interfaceinvoke $r7.<java.io.DataInput: int readInt()>();
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("RuntimeVisibleAnnotations");
        if $z0 == 0 goto label2;

        $r8 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: org.apache.tomcat.util.bcel.classfile.Annotations runtimeVisibleAnnotations>;
        if $r8 == null goto label1;

        $r9 = new org.apache.tomcat.util.bcel.classfile.ClassFormatException;
        specialinvoke $r9.<org.apache.tomcat.util.bcel.classfile.ClassFormatException: void <init>(java.lang.String)>("RuntimeVisibleAnnotations attribute is not allowed more than once in a class file");
        throw $r9;

     label1:
        $r10 = new org.apache.tomcat.util.bcel.classfile.Annotations;
        $r11 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.io.DataInput dataInputStream>;
        $r12 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: org.apache.tomcat.util.bcel.classfile.ConstantPool constant_pool>;
        specialinvoke $r10.<org.apache.tomcat.util.bcel.classfile.Annotations: void <init>(java.io.DataInput,org.apache.tomcat.util.bcel.classfile.ConstantPool)>($r11, $r12);
        r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: org.apache.tomcat.util.bcel.classfile.Annotations runtimeVisibleAnnotations> = $r10;
        goto label3;

     label2:
        $r13 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.io.DataInput dataInputStream>;
        staticinvoke <org.apache.tomcat.util.bcel.classfile.Utility: void skipFully(java.io.DataInput,int)>($r13, i3);

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label0;

        return;
    }

    private void readClassInfo() throws java.io.IOException, org.apache.tomcat.util.bcel.classfile.ClassFormatException
    {
        org.apache.tomcat.util.bcel.classfile.ClassParser r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.io.DataInput $r1, $r4, $r7;
        org.apache.tomcat.util.bcel.classfile.ClassFormatException $r3;
        org.apache.tomcat.util.bcel.classfile.ConstantPool $r5, $r8;
        java.lang.String $r6, $r9;

        r0 := @this: org.apache.tomcat.util.bcel.classfile.ClassParser;
        $r1 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.io.DataInput dataInputStream>;
        $i2 = interfaceinvoke $r1.<java.io.DataInput: int readUnsignedShort()>();
        r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: int access_flags> = $i2;
        $i3 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: int access_flags>;
        $i4 = $i3 & 512;
        if $i4 == 0 goto label0;

        $i5 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: int access_flags>;
        $i6 = $i5 | 1024;
        r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: int access_flags> = $i6;

     label0:
        $i7 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: int access_flags>;
        $i8 = $i7 & 1024;
        if $i8 == 0 goto label1;

        $i9 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: int access_flags>;
        $i10 = $i9 & 16;
        if $i10 == 0 goto label1;

        $r3 = new org.apache.tomcat.util.bcel.classfile.ClassFormatException;
        specialinvoke $r3.<org.apache.tomcat.util.bcel.classfile.ClassFormatException: void <init>(java.lang.String)>("Class can\'t be both final and abstract");
        throw $r3;

     label1:
        $r4 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.io.DataInput dataInputStream>;
        i0 = interfaceinvoke $r4.<java.io.DataInput: int readUnsignedShort()>();
        $r5 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: org.apache.tomcat.util.bcel.classfile.ConstantPool constant_pool>;
        $r6 = staticinvoke <org.apache.tomcat.util.bcel.classfile.Utility: java.lang.String getClassName(org.apache.tomcat.util.bcel.classfile.ConstantPool,int)>($r5, i0);
        r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.lang.String class_name> = $r6;
        $r7 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.io.DataInput dataInputStream>;
        i1 = interfaceinvoke $r7.<java.io.DataInput: int readUnsignedShort()>();
        if i1 <= 0 goto label2;

        $r8 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: org.apache.tomcat.util.bcel.classfile.ConstantPool constant_pool>;
        $r9 = staticinvoke <org.apache.tomcat.util.bcel.classfile.Utility: java.lang.String getClassName(org.apache.tomcat.util.bcel.classfile.ConstantPool,int)>($r8, i1);
        r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.lang.String superclass_name> = $r9;
        goto label3;

     label2:
        r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.lang.String superclass_name> = "java.lang.Object";

     label3:
        return;
    }

    private void readConstantPool() throws java.io.IOException, org.apache.tomcat.util.bcel.classfile.ClassFormatException
    {
        org.apache.tomcat.util.bcel.classfile.ClassParser r0;
        org.apache.tomcat.util.bcel.classfile.ConstantPool $r1;
        java.io.DataInput $r2;

        r0 := @this: org.apache.tomcat.util.bcel.classfile.ClassParser;
        $r1 = new org.apache.tomcat.util.bcel.classfile.ConstantPool;
        $r2 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.io.DataInput dataInputStream>;
        specialinvoke $r1.<org.apache.tomcat.util.bcel.classfile.ConstantPool: void <init>(java.io.DataInput)>($r2);
        r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: org.apache.tomcat.util.bcel.classfile.ConstantPool constant_pool> = $r1;
        return;
    }

    private void readFields() throws java.io.IOException, org.apache.tomcat.util.bcel.classfile.ClassFormatException
    {
        org.apache.tomcat.util.bcel.classfile.ClassParser r0;
        int i0, i1;
        java.io.DataInput $r1, $r2;

        r0 := @this: org.apache.tomcat.util.bcel.classfile.ClassParser;
        $r1 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.io.DataInput dataInputStream>;
        i0 = interfaceinvoke $r1.<java.io.DataInput: int readUnsignedShort()>();
        i1 = 0;
        goto label1;

     label0:
        $r2 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.io.DataInput dataInputStream>;
        staticinvoke <org.apache.tomcat.util.bcel.classfile.Utility: void swallowFieldOrMethod(java.io.DataInput)>($r2);
        i1 = i1 + 1;

     label1:
        if i1 < i0 goto label0;

        return;
    }

    private void readID() throws java.io.IOException, org.apache.tomcat.util.bcel.classfile.ClassFormatException
    {
        org.apache.tomcat.util.bcel.classfile.ClassParser r0;
        java.io.DataInput $r1;
        int $i0;
        org.apache.tomcat.util.bcel.classfile.ClassFormatException $r2;

        r0 := @this: org.apache.tomcat.util.bcel.classfile.ClassParser;
        $r1 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.io.DataInput dataInputStream>;
        $i0 = interfaceinvoke $r1.<java.io.DataInput: int readInt()>();
        if $i0 == -889275714 goto label0;

        $r2 = new org.apache.tomcat.util.bcel.classfile.ClassFormatException;
        specialinvoke $r2.<org.apache.tomcat.util.bcel.classfile.ClassFormatException: void <init>(java.lang.String)>("It is not a Java .class file");
        throw $r2;

     label0:
        return;
    }

    private void readInterfaces() throws java.io.IOException, org.apache.tomcat.util.bcel.classfile.ClassFormatException
    {
        org.apache.tomcat.util.bcel.classfile.ClassParser r0;
        int i0, i1, i2;
        java.io.DataInput $r1, $r3;
        java.lang.String[] $r2, $r4, $r7;
        org.apache.tomcat.util.bcel.classfile.ConstantPool $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.tomcat.util.bcel.classfile.ClassParser;
        $r1 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.io.DataInput dataInputStream>;
        i0 = interfaceinvoke $r1.<java.io.DataInput: int readUnsignedShort()>();
        if i0 <= 0 goto label2;

        $r2 = newarray (java.lang.String)[i0];
        r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.lang.String[] interface_names> = $r2;
        i1 = 0;
        goto label1;

     label0:
        $r3 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.io.DataInput dataInputStream>;
        i2 = interfaceinvoke $r3.<java.io.DataInput: int readUnsignedShort()>();
        $r4 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.lang.String[] interface_names>;
        $r5 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: org.apache.tomcat.util.bcel.classfile.ConstantPool constant_pool>;
        $r6 = staticinvoke <org.apache.tomcat.util.bcel.classfile.Utility: java.lang.String getClassName(org.apache.tomcat.util.bcel.classfile.ConstantPool,int)>($r5, i2);
        $r4[i1] = $r6;
        i1 = i1 + 1;

     label1:
        if i1 < i0 goto label0;

        goto label3;

     label2:
        $r7 = <org.apache.tomcat.util.bcel.classfile.ClassParser: java.lang.String[] INTERFACES_EMPTY_ARRAY>;
        r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.lang.String[] interface_names> = $r7;

     label3:
        return;
    }

    private void readMethods() throws java.io.IOException, org.apache.tomcat.util.bcel.classfile.ClassFormatException
    {
        org.apache.tomcat.util.bcel.classfile.ClassParser r0;
        int i0, i1;
        java.io.DataInput $r1, $r2;

        r0 := @this: org.apache.tomcat.util.bcel.classfile.ClassParser;
        $r1 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.io.DataInput dataInputStream>;
        i0 = interfaceinvoke $r1.<java.io.DataInput: int readUnsignedShort()>();
        i1 = 0;
        goto label1;

     label0:
        $r2 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.io.DataInput dataInputStream>;
        staticinvoke <org.apache.tomcat.util.bcel.classfile.Utility: void swallowFieldOrMethod(java.io.DataInput)>($r2);
        i1 = i1 + 1;

     label1:
        if i1 < i0 goto label0;

        return;
    }

    private void readVersion() throws java.io.IOException, org.apache.tomcat.util.bcel.classfile.ClassFormatException
    {
        org.apache.tomcat.util.bcel.classfile.ClassParser r0;
        java.io.DataInput $r1;

        r0 := @this: org.apache.tomcat.util.bcel.classfile.ClassParser;
        $r1 = r0.<org.apache.tomcat.util.bcel.classfile.ClassParser: java.io.DataInput dataInputStream>;
        staticinvoke <org.apache.tomcat.util.bcel.classfile.Utility: void skipFully(java.io.DataInput,int)>($r1, 4);
        return;
    }
}
