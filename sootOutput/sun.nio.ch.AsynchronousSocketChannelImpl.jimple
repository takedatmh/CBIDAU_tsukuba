abstract class sun.nio.ch.AsynchronousSocketChannelImpl extends java.nio.channels.AsynchronousSocketChannel implements sun.nio.ch.Cancellable, sun.nio.ch.Groupable
{
    protected final java.io.FileDescriptor fd;
    protected final java.lang.Object stateLock;
    protected volatile java.net.InetSocketAddress localAddress;
    protected volatile java.net.InetSocketAddress remoteAddress;
    static final int ST_UNINITIALIZED;
    static final int ST_UNCONNECTED;
    static final int ST_PENDING;
    static final int ST_CONNECTED;
    protected volatile int state;
    private final java.lang.Object readLock;
    private boolean reading;
    private boolean readShutdown;
    private boolean readKilled;
    private final java.lang.Object writeLock;
    private boolean writing;
    private boolean writeShutdown;
    private boolean writeKilled;
    private final java.util.concurrent.locks.ReadWriteLock closeLock;
    private volatile boolean open;
    private boolean isReuseAddress;

    void <init>(sun.nio.ch.AsynchronousChannelGroupImpl) throws java.io.IOException
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        sun.nio.ch.AsynchronousChannelGroupImpl r1;
        java.nio.channels.spi.AsynchronousChannelProvider $r2;
        java.lang.Object $r3, $r4, $r5;
        java.util.concurrent.locks.ReentrantReadWriteLock $r6;
        java.io.FileDescriptor $r7;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        r1 := @parameter0: sun.nio.ch.AsynchronousChannelGroupImpl;
        $r2 = virtualinvoke r1.<sun.nio.ch.AsynchronousChannelGroupImpl: java.nio.channels.spi.AsynchronousChannelProvider provider()>();
        specialinvoke r0.<java.nio.channels.AsynchronousSocketChannel: void <init>(java.nio.channels.spi.AsynchronousChannelProvider)>($r2);
        $r3 = new java.lang.Object;
        specialinvoke $r3.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.lang.Object stateLock> = $r3;
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.net.InetSocketAddress localAddress> = null;
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.net.InetSocketAddress remoteAddress> = null;
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: int state> = -1;
        $r4 = new java.lang.Object;
        specialinvoke $r4.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.lang.Object readLock> = $r4;
        $r5 = new java.lang.Object;
        specialinvoke $r5.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.lang.Object writeLock> = $r5;
        $r6 = new java.util.concurrent.locks.ReentrantReadWriteLock;
        specialinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock> = $r6;
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean open> = 1;
        $r7 = staticinvoke <sun.nio.ch.Net: java.io.FileDescriptor socket(boolean)>(1);
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.io.FileDescriptor fd> = $r7;
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: int state> = 0;
        return;
    }

    void <init>(sun.nio.ch.AsynchronousChannelGroupImpl, java.io.FileDescriptor, java.net.InetSocketAddress) throws java.io.IOException
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        sun.nio.ch.AsynchronousChannelGroupImpl r1;
        java.io.FileDescriptor r2;
        java.net.InetSocketAddress r3, $r9;
        java.nio.channels.spi.AsynchronousChannelProvider $r4;
        java.lang.Object $r5, $r6, $r7;
        java.util.concurrent.locks.ReentrantReadWriteLock $r8;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        r1 := @parameter0: sun.nio.ch.AsynchronousChannelGroupImpl;
        r2 := @parameter1: java.io.FileDescriptor;
        r3 := @parameter2: java.net.InetSocketAddress;
        $r4 = virtualinvoke r1.<sun.nio.ch.AsynchronousChannelGroupImpl: java.nio.channels.spi.AsynchronousChannelProvider provider()>();
        specialinvoke r0.<java.nio.channels.AsynchronousSocketChannel: void <init>(java.nio.channels.spi.AsynchronousChannelProvider)>($r4);
        $r5 = new java.lang.Object;
        specialinvoke $r5.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.lang.Object stateLock> = $r5;
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.net.InetSocketAddress localAddress> = null;
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.net.InetSocketAddress remoteAddress> = null;
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: int state> = -1;
        $r6 = new java.lang.Object;
        specialinvoke $r6.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.lang.Object readLock> = $r6;
        $r7 = new java.lang.Object;
        specialinvoke $r7.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.lang.Object writeLock> = $r7;
        $r8 = new java.util.concurrent.locks.ReentrantReadWriteLock;
        specialinvoke $r8.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock> = $r8;
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean open> = 1;
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.io.FileDescriptor fd> = r2;
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: int state> = 2;
        $r9 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress localAddress(java.io.FileDescriptor)>(r2);
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.net.InetSocketAddress localAddress> = $r9;
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.net.InetSocketAddress remoteAddress> = r3;
        return;
    }

    public final boolean isOpen()
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        boolean $z0;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        $z0 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean open>;
        return $z0;
    }

    final void begin() throws java.io.IOException
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.util.concurrent.locks.ReadWriteLock $r1;
        java.util.concurrent.locks.Lock $r2;
        boolean $z0;
        java.nio.channels.ClosedChannelException $r3;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        $r1 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock>;
        $r2 = interfaceinvoke $r1.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();
        $z0 = virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label0;

        $r3 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r3.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r3;

     label0:
        return;
    }

    final void end()
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.util.concurrent.locks.ReadWriteLock $r1;
        java.util.concurrent.locks.Lock $r2;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        $r1 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock>;
        $r2 = interfaceinvoke $r1.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();
        return;
    }

    abstract void implClose() throws java.io.IOException;

    public final void close() throws java.io.IOException
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.lang.Throwable r1, $r8;
        java.util.concurrent.locks.ReadWriteLock $r2, $r4, $r6, $r9;
        java.util.concurrent.locks.Lock $r3, $r5, $r7, $r10;
        boolean $z0;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        $r2 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock>;
        $r3 = interfaceinvoke $r2.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        $z0 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean open>;
        if $z0 != 0 goto label2;

     label1:
        $r4 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock>;
        $r5 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();
        return;

     label2:
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean open> = 0;

     label3:
        $r6 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock>;
        $r7 = interfaceinvoke $r6.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>();
        goto label7;

     label4:
        $r8 := @caughtexception;

     label5:
        r1 = $r8;

     label6:
        $r9 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock>;
        $r10 = interfaceinvoke $r9.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r10.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r1;

     label7:
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void implClose()>();
        return;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    final void enableReading(boolean)
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        boolean z0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        z0 := @parameter0: boolean;
        $r3 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.lang.Object readLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean reading> = 0;
        if z0 == 0 goto label1;

        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean readKilled> = 1;

     label1:
        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r4 := @caughtexception;

     label4:
        r2 = $r4;
        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    final void enableReading()
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void enableReading(boolean)>(0);
        return;
    }

    final void enableWriting(boolean)
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        boolean z0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        z0 := @parameter0: boolean;
        $r3 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.lang.Object writeLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean writing> = 0;
        if z0 == 0 goto label1;

        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean writeKilled> = 1;

     label1:
        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r4 := @caughtexception;

     label4:
        r2 = $r4;
        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    final void enableWriting()
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void enableWriting(boolean)>(0);
        return;
    }

    final void killReading()
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        $r3 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.lang.Object readLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean readKilled> = 1;
        exitmonitor r1;

     label1:
        goto label5;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;
        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    final void killWriting()
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        $r3 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.lang.Object writeLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean writeKilled> = 1;
        exitmonitor r1;

     label1:
        goto label5;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;
        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    final void killConnect()
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void killReading()>();
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void killWriting()>();
        return;
    }

    abstract java.util.concurrent.Future implConnect(java.net.SocketAddress, java.lang.Object, java.nio.channels.CompletionHandler);

    public final java.util.concurrent.Future connect(java.net.SocketAddress)
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.net.SocketAddress r1;
        java.util.concurrent.Future $r2;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        r1 := @parameter0: java.net.SocketAddress;
        $r2 = virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.concurrent.Future implConnect(java.net.SocketAddress,java.lang.Object,java.nio.channels.CompletionHandler)>(r1, null, null);
        return $r2;
    }

    public final void connect(java.net.SocketAddress, java.lang.Object, java.nio.channels.CompletionHandler)
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.net.SocketAddress r1;
        java.lang.Object r2;
        java.nio.channels.CompletionHandler r3;
        java.lang.NullPointerException $r4;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        r1 := @parameter0: java.net.SocketAddress;
        r2 := @parameter1: java.lang.Object;
        r3 := @parameter2: java.nio.channels.CompletionHandler;
        if r3 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("\'handler\' is null");
        throw $r4;

     label0:
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.concurrent.Future implConnect(java.net.SocketAddress,java.lang.Object,java.nio.channels.CompletionHandler)>(r1, r2, r3);
        return;
    }

    abstract java.util.concurrent.Future implRead(boolean, java.nio.ByteBuffer, java.nio.ByteBuffer[], long, java.util.concurrent.TimeUnit, java.lang.Object, java.nio.channels.CompletionHandler);

    private java.util.concurrent.Future read(boolean, java.nio.ByteBuffer, java.nio.ByteBuffer[], long, java.util.concurrent.TimeUnit, java.lang.Object, java.nio.channels.CompletionHandler)
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        boolean z0, z1, $z2, $z3, $z4, z5, $z6, $z7, $z8;
        java.nio.ByteBuffer r1;
        java.nio.ByteBuffer[] r2;
        long l0;
        java.util.concurrent.TimeUnit r3;
        java.lang.Object r4, r7, $r13;
        java.nio.channels.CompletionHandler r5;
        java.nio.channels.ClosedChannelException r6, $r9;
        java.lang.Throwable r8, $r16;
        sun.nio.ch.CompletedFuture $r10, $r19;
        java.net.InetSocketAddress $r11;
        java.nio.channels.NotYetConnectedException $r12;
        java.lang.IllegalStateException $r14;
        java.nio.channels.ReadPendingException $r15;
        java.lang.Long $r17;
        java.lang.Comparable r18;
        byte $b1;
        java.util.concurrent.Future $r20;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        z0 := @parameter0: boolean;
        r1 := @parameter1: java.nio.ByteBuffer;
        r2 := @parameter2: java.nio.ByteBuffer[];
        l0 := @parameter3: long;
        r3 := @parameter4: java.util.concurrent.TimeUnit;
        r4 := @parameter5: java.lang.Object;
        r5 := @parameter6: java.nio.channels.CompletionHandler;
        $z2 = virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean isOpen()>();
        if $z2 != 0 goto label1;

        $r9 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r9.<java.nio.channels.ClosedChannelException: void <init>()>();
        r6 = $r9;
        if r5 != null goto label0;

        $r10 = staticinvoke <sun.nio.ch.CompletedFuture: sun.nio.ch.CompletedFuture withFailure(java.lang.Throwable)>(r6);
        return $r10;

     label0:
        staticinvoke <sun.nio.ch.Invoker: void invoke(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r0, r5, r4, null, r6);
        return null;

     label1:
        $r11 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.net.InetSocketAddress remoteAddress>;
        if $r11 != null goto label2;

        $r12 = new java.nio.channels.NotYetConnectedException;
        specialinvoke $r12.<java.nio.channels.NotYetConnectedException: void <init>()>();
        throw $r12;

     label2:
        if z0 != 0 goto label3;

        $z3 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();
        if $z3 == 0 goto label4;

     label3:
        $z4 = 1;
        goto label5;

     label4:
        $z4 = 0;

     label5:
        z5 = $z4;
        z1 = 0;
        $r13 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.lang.Object readLock>;
        r7 = $r13;
        entermonitor $r13;

     label6:
        $z6 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean readKilled>;
        if $z6 == 0 goto label7;

        $r14 = new java.lang.IllegalStateException;
        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Reading not allowed due to timeout or cancellation");
        throw $r14;

     label7:
        $z7 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean reading>;
        if $z7 == 0 goto label8;

        $r15 = new java.nio.channels.ReadPendingException;
        specialinvoke $r15.<java.nio.channels.ReadPendingException: void <init>()>();
        throw $r15;

     label8:
        $z8 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean readShutdown>;
        if $z8 == 0 goto label9;

        z1 = 1;
        goto label10;

     label9:
        if z5 == 0 goto label10;

        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean reading> = 1;

     label10:
        exitmonitor r7;

     label11:
        goto label15;

     label12:
        $r16 := @caughtexception;

     label13:
        r8 = $r16;
        exitmonitor r7;

     label14:
        throw r8;

     label15:
        if z1 != 0 goto label16;

        if z5 != 0 goto label24;

     label16:
        if z0 == 0 goto label19;

        if z1 == 0 goto label17;

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-1L);
        goto label18;

     label17:
        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

     label18:
        r18 = $r17;
        goto label22;

     label19:
        if z1 == 0 goto label20;

        $b1 = -1;
        goto label21;

     label20:
        $b1 = 0;

     label21:
        r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b1);

     label22:
        if r5 != null goto label23;

        $r19 = staticinvoke <sun.nio.ch.CompletedFuture: sun.nio.ch.CompletedFuture withResult(java.lang.Object)>(r18);
        return $r19;

     label23:
        staticinvoke <sun.nio.ch.Invoker: void invoke(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r0, r5, r4, r18, null);
        return null;

     label24:
        $r20 = virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.concurrent.Future implRead(boolean,java.nio.ByteBuffer,java.nio.ByteBuffer[],long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)>(z0, r1, r2, l0, r3, r4, r5);
        return $r20;

        catch java.lang.Throwable from label6 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public final java.util.concurrent.Future read(java.nio.ByteBuffer)
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.nio.ByteBuffer r1;
        java.util.concurrent.TimeUnit $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.util.concurrent.Future $r4;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isReadOnly()>();
        if $z0 == 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Read-only buffer");
        throw $r3;

     label0:
        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
        $r4 = specialinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.concurrent.Future read(boolean,java.nio.ByteBuffer,java.nio.ByteBuffer[],long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)>(0, r1, null, 0L, $r2, null, null);
        return $r4;
    }

    public final void read(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, java.lang.Object, java.nio.channels.CompletionHandler)
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.nio.ByteBuffer r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        java.lang.Object r3;
        java.nio.channels.CompletionHandler r4;
        java.lang.NullPointerException $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        l0 := @parameter1: long;
        r2 := @parameter2: java.util.concurrent.TimeUnit;
        r3 := @parameter3: java.lang.Object;
        r4 := @parameter4: java.nio.channels.CompletionHandler;
        if r4 != null goto label0;

        $r5 = new java.lang.NullPointerException;
        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("\'handler\' is null");
        throw $r5;

     label0:
        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isReadOnly()>();
        if $z0 == 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Read-only buffer");
        throw $r6;

     label1:
        specialinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.concurrent.Future read(boolean,java.nio.ByteBuffer,java.nio.ByteBuffer[],long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)>(0, r1, null, l0, r2, r3, r4);
        return;
    }

    public final void read(java.nio.ByteBuffer[], int, int, long, java.util.concurrent.TimeUnit, java.lang.Object, java.nio.channels.CompletionHandler)
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.nio.ByteBuffer[] r1, r5;
        int i0, i1, i3, $i4, $i5, $i6;
        long l2;
        java.util.concurrent.TimeUnit r2;
        java.lang.Object r3;
        java.nio.channels.CompletionHandler r4;
        java.lang.NullPointerException $r6;
        java.lang.IndexOutOfBoundsException $r7;
        java.nio.ByteBuffer $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        l2 := @parameter3: long;
        r2 := @parameter4: java.util.concurrent.TimeUnit;
        r3 := @parameter5: java.lang.Object;
        r4 := @parameter6: java.nio.channels.CompletionHandler;
        if r4 != null goto label0;

        $r6 = new java.lang.NullPointerException;
        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("\'handler\' is null");
        throw $r6;

     label0:
        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i4 = lengthof r1;
        $i5 = $i4 - i1;
        if i0 <= $i5 goto label2;

     label1:
        $r7 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r7;

     label2:
        r5 = staticinvoke <sun.nio.ch.Util: java.nio.ByteBuffer[] subsequence(java.nio.ByteBuffer[],int,int)>(r1, i0, i1);
        i3 = 0;

     label3:
        $i6 = lengthof r5;
        if i3 >= $i6 goto label5;

        $r8 = r5[i3];
        $z0 = virtualinvoke $r8.<java.nio.ByteBuffer: boolean isReadOnly()>();
        if $z0 == 0 goto label4;

        $r9 = new java.lang.IllegalArgumentException;
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Read-only buffer");
        throw $r9;

     label4:
        i3 = i3 + 1;
        goto label3;

     label5:
        specialinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.concurrent.Future read(boolean,java.nio.ByteBuffer,java.nio.ByteBuffer[],long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)>(1, null, r5, l2, r2, r3, r4);
        return;
    }

    abstract java.util.concurrent.Future implWrite(boolean, java.nio.ByteBuffer, java.nio.ByteBuffer[], long, java.util.concurrent.TimeUnit, java.lang.Object, java.nio.channels.CompletionHandler);

    private java.util.concurrent.Future write(boolean, java.nio.ByteBuffer, java.nio.ByteBuffer[], long, java.util.concurrent.TimeUnit, java.lang.Object, java.nio.channels.CompletionHandler)
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.nio.ByteBuffer r1;
        java.nio.ByteBuffer[] r2;
        long l0;
        java.util.concurrent.TimeUnit r3;
        java.lang.Object r4, r6, $r10;
        java.nio.channels.CompletionHandler r5;
        java.lang.Throwable r7, $r13;
        java.net.InetSocketAddress $r8;
        java.nio.channels.NotYetConnectedException $r9;
        java.lang.IllegalStateException $r11;
        java.nio.channels.WritePendingException $r12;
        java.nio.channels.ClosedChannelException $r14, r15;
        sun.nio.ch.CompletedFuture $r16, $r19;
        java.lang.Comparable $r17, r18;
        java.util.concurrent.Future $r20;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        z0 := @parameter0: boolean;
        r1 := @parameter1: java.nio.ByteBuffer;
        r2 := @parameter2: java.nio.ByteBuffer[];
        l0 := @parameter3: long;
        r3 := @parameter4: java.util.concurrent.TimeUnit;
        r4 := @parameter5: java.lang.Object;
        r5 := @parameter6: java.nio.channels.CompletionHandler;
        if z0 != 0 goto label0;

        $z3 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();
        if $z3 == 0 goto label1;

     label0:
        $z4 = 1;
        goto label2;

     label1:
        $z4 = 0;

     label2:
        z1 = $z4;
        z2 = 0;
        $z5 = virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean isOpen()>();
        if $z5 == 0 goto label14;

        $r8 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.net.InetSocketAddress remoteAddress>;
        if $r8 != null goto label3;

        $r9 = new java.nio.channels.NotYetConnectedException;
        specialinvoke $r9.<java.nio.channels.NotYetConnectedException: void <init>()>();
        throw $r9;

     label3:
        $r10 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.lang.Object writeLock>;
        r6 = $r10;
        entermonitor $r10;

     label4:
        $z6 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean writeKilled>;
        if $z6 == 0 goto label5;

        $r11 = new java.lang.IllegalStateException;
        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Writing not allowed due to timeout or cancellation");
        throw $r11;

     label5:
        $z7 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean writing>;
        if $z7 == 0 goto label6;

        $r12 = new java.nio.channels.WritePendingException;
        specialinvoke $r12.<java.nio.channels.WritePendingException: void <init>()>();
        throw $r12;

     label6:
        $z8 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean writeShutdown>;
        if $z8 == 0 goto label7;

        z2 = 1;
        goto label8;

     label7:
        if z1 == 0 goto label8;

        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean writing> = 1;

     label8:
        exitmonitor r6;

     label9:
        goto label13;

     label10:
        $r13 := @caughtexception;

     label11:
        r7 = $r13;
        exitmonitor r6;

     label12:
        throw r7;

     label13:
        goto label15;

     label14:
        z2 = 1;

     label15:
        if z2 == 0 goto label17;

        $r14 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r14.<java.nio.channels.ClosedChannelException: void <init>()>();
        r15 = $r14;
        if r5 != null goto label16;

        $r16 = staticinvoke <sun.nio.ch.CompletedFuture: sun.nio.ch.CompletedFuture withFailure(java.lang.Throwable)>(r15);
        return $r16;

     label16:
        staticinvoke <sun.nio.ch.Invoker: void invoke(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r0, r5, r4, null, r15);
        return null;

     label17:
        if z1 != 0 goto label21;

        if z0 == 0 goto label18;

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);
        goto label19;

     label18:
        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

     label19:
        r18 = $r17;
        if r5 != null goto label20;

        $r19 = staticinvoke <sun.nio.ch.CompletedFuture: sun.nio.ch.CompletedFuture withResult(java.lang.Object)>(r18);
        return $r19;

     label20:
        staticinvoke <sun.nio.ch.Invoker: void invoke(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r0, r5, r4, r18, null);
        return null;

     label21:
        $r20 = virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.concurrent.Future implWrite(boolean,java.nio.ByteBuffer,java.nio.ByteBuffer[],long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)>(z0, r1, r2, l0, r3, r4, r5);
        return $r20;

        catch java.lang.Throwable from label4 to label9 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public final java.util.concurrent.Future write(java.nio.ByteBuffer)
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.nio.ByteBuffer r1;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.Future $r3;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
        $r3 = specialinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.concurrent.Future write(boolean,java.nio.ByteBuffer,java.nio.ByteBuffer[],long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)>(0, r1, null, 0L, $r2, null, null);
        return $r3;
    }

    public final void write(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, java.lang.Object, java.nio.channels.CompletionHandler)
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.nio.ByteBuffer r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        java.lang.Object r3;
        java.nio.channels.CompletionHandler r4;
        java.lang.NullPointerException $r5;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        l0 := @parameter1: long;
        r2 := @parameter2: java.util.concurrent.TimeUnit;
        r3 := @parameter3: java.lang.Object;
        r4 := @parameter4: java.nio.channels.CompletionHandler;
        if r4 != null goto label0;

        $r5 = new java.lang.NullPointerException;
        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("\'handler\' is null");
        throw $r5;

     label0:
        specialinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.concurrent.Future write(boolean,java.nio.ByteBuffer,java.nio.ByteBuffer[],long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)>(0, r1, null, l0, r2, r3, r4);
        return;
    }

    public final void write(java.nio.ByteBuffer[], int, int, long, java.util.concurrent.TimeUnit, java.lang.Object, java.nio.channels.CompletionHandler)
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.nio.ByteBuffer[] r1, r7;
        int i0, i1, $i3, $i4;
        long l2;
        java.util.concurrent.TimeUnit r2;
        java.lang.Object r3;
        java.nio.channels.CompletionHandler r4;
        java.lang.NullPointerException $r5;
        java.lang.IndexOutOfBoundsException $r6;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        l2 := @parameter3: long;
        r2 := @parameter4: java.util.concurrent.TimeUnit;
        r3 := @parameter5: java.lang.Object;
        r4 := @parameter6: java.nio.channels.CompletionHandler;
        if r4 != null goto label0;

        $r5 = new java.lang.NullPointerException;
        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("\'handler\' is null");
        throw $r5;

     label0:
        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i3 = lengthof r1;
        $i4 = $i3 - i1;
        if i0 <= $i4 goto label2;

     label1:
        $r6 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r6.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r6;

     label2:
        r7 = staticinvoke <sun.nio.ch.Util: java.nio.ByteBuffer[] subsequence(java.nio.ByteBuffer[],int,int)>(r1, i0, i1);
        specialinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.concurrent.Future write(boolean,java.nio.ByteBuffer,java.nio.ByteBuffer[],long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)>(1, null, r7, l2, r2, r3, r4);
        return;
    }

    public final java.nio.channels.AsynchronousSocketChannel bind(java.net.SocketAddress) throws java.io.IOException
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.net.SocketAddress r1;
        java.lang.Object r2, $r7;
        java.net.InetSocketAddress r3, $r9, $r11, $r17;
        java.lang.SecurityManager r4;
        java.lang.Throwable r5, r6, $r18, $r19;
        int $i0, $i1, $i2, $i3;
        java.nio.channels.ConnectionPendingException $r8;
        java.nio.channels.AlreadyBoundException $r10;
        java.io.FileDescriptor $r12, $r14, $r16;
        java.net.InetAddress $r13, $r15;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        r1 := @parameter0: java.net.SocketAddress;

     label0:
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void begin()>();
        $r7 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.lang.Object stateLock>;
        r2 = $r7;
        entermonitor $r7;

     label1:
        $i0 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: int state>;
        if $i0 != 1 goto label2;

        $r8 = new java.nio.channels.ConnectionPendingException;
        specialinvoke $r8.<java.nio.channels.ConnectionPendingException: void <init>()>();
        throw $r8;

     label2:
        $r9 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.net.InetSocketAddress localAddress>;
        if $r9 == null goto label3;

        $r10 = new java.nio.channels.AlreadyBoundException;
        specialinvoke $r10.<java.nio.channels.AlreadyBoundException: void <init>()>();
        throw $r10;

     label3:
        if r1 != null goto label4;

        $r11 = new java.net.InetSocketAddress;
        specialinvoke $r11.<java.net.InetSocketAddress: void <init>(int)>(0);
        goto label5;

     label4:
        $r11 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress checkAddress(java.net.SocketAddress)>(r1);

     label5:
        r3 = $r11;
        r4 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r4 == null goto label6;

        $i1 = virtualinvoke r3.<java.net.InetSocketAddress: int getPort()>();
        virtualinvoke r4.<java.lang.SecurityManager: void checkListen(int)>($i1);

     label6:
        $r12 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        $r13 = virtualinvoke r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $i2 = virtualinvoke r3.<java.net.InetSocketAddress: int getPort()>();
        staticinvoke <sun.net.NetHooks: void beforeTcpBind(java.io.FileDescriptor,java.net.InetAddress,int)>($r12, $r13, $i2);
        $r14 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        $r15 = virtualinvoke r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $i3 = virtualinvoke r3.<java.net.InetSocketAddress: int getPort()>();
        staticinvoke <sun.nio.ch.Net: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>($r14, $r15, $i3);
        $r16 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        $r17 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress localAddress(java.io.FileDescriptor)>($r16);
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.net.InetSocketAddress localAddress> = $r17;
        exitmonitor r2;

     label7:
        goto label11;

     label8:
        $r18 := @caughtexception;

     label9:
        r5 = $r18;
        exitmonitor r2;

     label10:
        throw r5;

     label11:
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void end()>();
        goto label15;

     label12:
        $r19 := @caughtexception;

     label13:
        r6 = $r19;

     label14:
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void end()>();
        throw r6;

     label15:
        return r0;

        catch java.lang.Throwable from label1 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
        catch java.lang.Throwable from label0 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public final java.net.SocketAddress getLocalAddress() throws java.io.IOException
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        boolean $z0;
        java.nio.channels.ClosedChannelException $r1;
        java.net.InetSocketAddress $r2, $r3;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        $z0 = virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label0;

        $r1 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r1.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r1;

     label0:
        $r2 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.net.InetSocketAddress localAddress>;
        $r3 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress getRevealedLocalAddress(java.net.InetSocketAddress)>($r2);
        return $r3;
    }

    public final java.nio.channels.AsynchronousSocketChannel setOption(java.net.SocketOption, java.lang.Object) throws java.io.IOException
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0, r4;
        java.net.SocketOption r1, $r14;
        java.lang.Object r2;
        java.lang.StringBuilder $r3, $r9, $r10, $r11;
        java.lang.Throwable r5, $r18;
        java.lang.NullPointerException $r6;
        java.util.Set $r7;
        boolean $z0, $z1, $z2, $z3;
        java.lang.UnsupportedOperationException $r8;
        java.lang.String $r12;
        java.io.IOException $r13;
        java.lang.Boolean $r15;
        java.io.FileDescriptor $r16;
        java.net.ProtocolFamily $r17;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        r1 := @parameter0: java.net.SocketOption;
        r2 := @parameter1: java.lang.Object;
        if r1 != null goto label0;

        $r6 = new java.lang.NullPointerException;
        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();
        throw $r6;

     label0:
        $r7 = virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.Set supportedOptions()>();
        $z0 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r1);
        if $z0 != 0 goto label1;

        $r8 = new java.lang.UnsupportedOperationException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not supported");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r12);
        throw $r8;

     label1:
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void begin()>();
        $z1 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean writeShutdown>;
        if $z1 == 0 goto label2;

        $r13 = new java.io.IOException;
        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>("Connection has been shutdown for writing");
        throw $r13;

     label2:
        $r14 = <java.net.StandardSocketOptions: java.net.SocketOption SO_REUSEADDR>;
        if r1 != $r14 goto label3;

        $z2 = staticinvoke <sun.nio.ch.Net: boolean useExclusiveBind()>();
        if $z2 == 0 goto label3;

        $r15 = (java.lang.Boolean) r2;
        $z3 = virtualinvoke $r15.<java.lang.Boolean: boolean booleanValue()>();
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean isReuseAddress> = $z3;
        goto label4;

     label3:
        $r16 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        $r17 = <sun.nio.ch.Net: java.net.ProtocolFamily UNSPEC>;
        staticinvoke <sun.nio.ch.Net: void setSocketOption(java.io.FileDescriptor,java.net.ProtocolFamily,java.net.SocketOption,java.lang.Object)>($r16, $r17, r1, r2);

     label4:
        r4 = r0;

     label5:
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void end()>();
        return r4;

     label6:
        $r18 := @caughtexception;

     label7:
        r5 = $r18;

     label8:
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void end()>();
        throw r5;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public final java.lang.Object getOption(java.net.SocketOption) throws java.io.IOException
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.net.SocketOption r1, $r12;
        java.lang.StringBuilder $r2, $r8, $r9, $r10;
        java.lang.Boolean r3;
        java.lang.Throwable r4, $r16;
        java.lang.NullPointerException $r5;
        java.util.Set $r6;
        boolean $z0, $z1, $z2;
        java.lang.UnsupportedOperationException $r7;
        java.lang.String $r11;
        java.io.FileDescriptor $r13;
        java.net.ProtocolFamily $r14;
        java.lang.Object r15;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        r1 := @parameter0: java.net.SocketOption;
        if r1 != null goto label0;

        $r5 = new java.lang.NullPointerException;
        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();
        throw $r5;

     label0:
        $r6 = virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.util.Set supportedOptions()>();
        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r1);
        if $z0 != 0 goto label1;

        $r7 = new java.lang.UnsupportedOperationException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not supported");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r11);
        throw $r7;

     label1:
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void begin()>();
        $r12 = <java.net.StandardSocketOptions: java.net.SocketOption SO_REUSEADDR>;
        if r1 != $r12 goto label3;

        $z1 = staticinvoke <sun.nio.ch.Net: boolean useExclusiveBind()>();
        if $z1 == 0 goto label3;

        $z2 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean isReuseAddress>;
        r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

     label2:
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void end()>();
        return r3;

     label3:
        $r13 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        $r14 = <sun.nio.ch.Net: java.net.ProtocolFamily UNSPEC>;
        r15 = staticinvoke <sun.nio.ch.Net: java.lang.Object getSocketOption(java.io.FileDescriptor,java.net.ProtocolFamily,java.net.SocketOption)>($r13, $r14, r1);

     label4:
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void end()>();
        return r15;

     label5:
        $r16 := @caughtexception;

     label6:
        r4 = $r16;

     label7:
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void end()>();
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public final java.util.Set supportedOptions()
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.util.Set $r1;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        $r1 = <sun.nio.ch.AsynchronousSocketChannelImpl$DefaultOptionsHolder: java.util.Set defaultOptions>;
        return $r1;
    }

    public final java.net.SocketAddress getRemoteAddress() throws java.io.IOException
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        boolean $z0;
        java.nio.channels.ClosedChannelException $r1;
        java.net.InetSocketAddress $r2;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        $z0 = virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label0;

        $r1 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r1.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r1;

     label0:
        $r2 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.net.InetSocketAddress remoteAddress>;
        return $r2;
    }

    public final java.nio.channels.AsynchronousSocketChannel shutdownInput() throws java.io.IOException
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.lang.Object r1, $r6;
        java.lang.Throwable r2, r3, $r8, $r9;
        java.net.InetSocketAddress $r4;
        java.nio.channels.NotYetConnectedException $r5;
        boolean $z0;
        java.io.FileDescriptor $r7;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;

     label0:
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void begin()>();
        $r4 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.net.InetSocketAddress remoteAddress>;
        if $r4 != null goto label1;

        $r5 = new java.nio.channels.NotYetConnectedException;
        specialinvoke $r5.<java.nio.channels.NotYetConnectedException: void <init>()>();
        throw $r5;

     label1:
        $r6 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.lang.Object readLock>;
        r1 = $r6;
        entermonitor $r6;

     label2:
        $z0 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean readShutdown>;
        if $z0 != 0 goto label3;

        $r7 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        staticinvoke <sun.nio.ch.Net: void shutdown(java.io.FileDescriptor,int)>($r7, 0);
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean readShutdown> = 1;

     label3:
        exitmonitor r1;

     label4:
        goto label8;

     label5:
        $r8 := @caughtexception;

     label6:
        r2 = $r8;
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void end()>();
        goto label12;

     label9:
        $r9 := @caughtexception;

     label10:
        r3 = $r9;

     label11:
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void end()>();
        throw r3;

     label12:
        return r0;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label0 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    public final java.nio.channels.AsynchronousSocketChannel shutdownOutput() throws java.io.IOException
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.lang.Object r1, $r6;
        java.lang.Throwable r2, r3, $r8, $r9;
        java.net.InetSocketAddress $r4;
        java.nio.channels.NotYetConnectedException $r5;
        boolean $z0;
        java.io.FileDescriptor $r7;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;

     label0:
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void begin()>();
        $r4 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.net.InetSocketAddress remoteAddress>;
        if $r4 != null goto label1;

        $r5 = new java.nio.channels.NotYetConnectedException;
        specialinvoke $r5.<java.nio.channels.NotYetConnectedException: void <init>()>();
        throw $r5;

     label1:
        $r6 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.lang.Object writeLock>;
        r1 = $r6;
        entermonitor $r6;

     label2:
        $z0 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean writeShutdown>;
        if $z0 != 0 goto label3;

        $r7 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        staticinvoke <sun.nio.ch.Net: void shutdown(java.io.FileDescriptor,int)>($r7, 1);
        r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean writeShutdown> = 1;

     label3:
        exitmonitor r1;

     label4:
        goto label8;

     label5:
        $r8 := @caughtexception;

     label6:
        r2 = $r8;
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void end()>();
        goto label12;

     label9:
        $r9 := @caughtexception;

     label10:
        r3 = $r9;

     label11:
        virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void end()>();
        throw r3;

     label12:
        return r0;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label0 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    public final java.lang.String toString()
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.lang.StringBuilder $r1, r2;
        java.lang.Object r3, $r9;
        java.lang.Throwable r4, $r26;
        java.lang.Class $r5;
        java.lang.String $r6, $r19, $r24, $r28;
        boolean $z0, $z1, $z2;
        int $i0;
        java.net.InetSocketAddress $r16, $r18, $r21, $r23;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        r2 = $r1;
        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
        $r9 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.lang.Object stateLock>;
        r3 = $r9;
        entermonitor $r9;

     label0:
        $z0 = virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("closed");
        goto label8;

     label1:
        $i0 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: int state>;
        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            default: goto label6;
        };

     label2:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unconnected");
        goto label6;

     label3:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("connection-pending");
        goto label6;

     label4:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("connected");
        $z1 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean readShutdown>;
        if $z1 == 0 goto label5;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ishut");

     label5:
        $z2 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: boolean writeShutdown>;
        if $z2 == 0 goto label6;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" oshut");

     label6:
        $r16 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.net.InetSocketAddress localAddress>;
        if $r16 == null goto label7;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" local=");
        $r18 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.net.InetSocketAddress localAddress>;
        $r19 = staticinvoke <sun.nio.ch.Net: java.lang.String getRevealedLocalAddressAsString(java.net.InetSocketAddress)>($r18);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

     label7:
        $r21 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.net.InetSocketAddress remoteAddress>;
        if $r21 == null goto label8;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" remote=");
        $r23 = r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.net.InetSocketAddress remoteAddress>;
        $r24 = virtualinvoke $r23.<java.net.InetSocketAddress: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

     label8:
        exitmonitor r3;

     label9:
        goto label13;

     label10:
        $r26 := @caughtexception;

     label11:
        r4 = $r26;
        exitmonitor r3;

     label12:
        throw r4;

     label13:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
        $r28 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r28;

        catch java.lang.Throwable from label0 to label9 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public volatile java.nio.channels.NetworkChannel setOption(java.net.SocketOption, java.lang.Object) throws java.io.IOException
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.net.SocketOption r1;
        java.lang.Object r2;
        java.nio.channels.AsynchronousSocketChannel $r3;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        r1 := @parameter0: java.net.SocketOption;
        r2 := @parameter1: java.lang.Object;
        $r3 = virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.nio.channels.AsynchronousSocketChannel setOption(java.net.SocketOption,java.lang.Object)>(r1, r2);
        return $r3;
    }

    public volatile java.nio.channels.NetworkChannel bind(java.net.SocketAddress) throws java.io.IOException
    {
        sun.nio.ch.AsynchronousSocketChannelImpl r0;
        java.net.SocketAddress r1;
        java.nio.channels.AsynchronousSocketChannel $r2;

        r0 := @this: sun.nio.ch.AsynchronousSocketChannelImpl;
        r1 := @parameter0: java.net.SocketAddress;
        $r2 = virtualinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: java.nio.channels.AsynchronousSocketChannel bind(java.net.SocketAddress)>(r1);
        return $r2;
    }
}
