abstract class sun.security.krb5.internal.crypto.DesCbcEType extends sun.security.krb5.internal.crypto.EType
{

    void <init>()
    {
        sun.security.krb5.internal.crypto.DesCbcEType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcEType;
        specialinvoke r0.<sun.security.krb5.internal.crypto.EType: void <init>()>();
        return;
    }

    protected abstract byte[] calculateChecksum(byte[], int) throws sun.security.krb5.KrbCryptoException;

    public int blockSize()
    {
        sun.security.krb5.internal.crypto.DesCbcEType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcEType;
        return 8;
    }

    public int keyType()
    {
        sun.security.krb5.internal.crypto.DesCbcEType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcEType;
        return 1;
    }

    public int keySize()
    {
        sun.security.krb5.internal.crypto.DesCbcEType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcEType;
        return 8;
    }

    public byte[] encrypt(byte[], byte[], int) throws sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.DesCbcEType r0;
        byte[] r1, r2, r3, $r4;
        int i0, $i1;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcEType;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        i0 := @parameter2: int;
        $i1 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int keySize()>();
        r3 = newarray (byte)[$i1];
        $r4 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: byte[] encrypt(byte[],byte[],byte[],int)>(r1, r2, r3, i0);
        return $r4;
    }

    public byte[] encrypt(byte[], byte[], byte[], int) throws sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.DesCbcEType r0;
        byte[] r1, r2, r3, r4, r5, r6, r8;
        int i0, i1, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30;
        byte b2;
        sun.security.krb5.KrbCryptoException $r7;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcEType;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        r3 := @parameter2: byte[];
        i0 := @parameter3: int;
        $i4 = lengthof r2;
        if $i4 <= 8 goto label0;

        $r7 = new sun.security.krb5.KrbCryptoException;
        specialinvoke $r7.<sun.security.krb5.KrbCryptoException: void <init>(java.lang.String)>("Invalid DES Key!");
        throw $r7;

     label0:
        $i5 = lengthof r1;
        $i6 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int confounderSize()>();
        $i7 = $i5 + $i6;
        $i8 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int checksumSize()>();
        i1 = $i7 + $i8;
        $i9 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int blockSize()>();
        $i10 = i1 % $i9;
        if $i10 != 0 goto label1;

        $i11 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int blockSize()>();
        $i12 = i1 + $i11;
        r4 = newarray (byte)[$i12];
        b2 = 8;
        goto label2;

     label1:
        $i13 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int blockSize()>();
        $i14 = i1 + $i13;
        $i15 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int blockSize()>();
        $i16 = i1 % $i15;
        $i17 = $i14 - $i16;
        r4 = newarray (byte)[$i17];
        $i18 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int blockSize()>();
        $i19 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int blockSize()>();
        $i20 = i1 % $i19;
        $i21 = $i18 - $i20;
        b2 = (byte) $i21;

     label2:
        i3 = i1;

     label3:
        $i22 = lengthof r4;
        if i3 >= $i22 goto label4;

        r4[i3] = b2;
        i3 = i3 + 1;
        goto label3;

     label4:
        $i23 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int confounderSize()>();
        r8 = staticinvoke <sun.security.krb5.Confounder: byte[] bytes(int)>($i23);
        $i24 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int confounderSize()>();
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r4, 0, $i24);
        $i25 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int startOfData()>();
        $i26 = lengthof r1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r4, $i25, $i26);
        $i27 = lengthof r4;
        r5 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: byte[] calculateChecksum(byte[],int)>(r4, $i27);
        $i28 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int startOfChecksum()>();
        $i29 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int checksumSize()>();
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r4, $i28, $i29);
        $i30 = lengthof r4;
        r6 = newarray (byte)[$i30];
        staticinvoke <sun.security.krb5.internal.crypto.Des: void cbc_encrypt(byte[],byte[],byte[],byte[],boolean)>(r4, r6, r2, r3, 1);
        return r6;
    }

    public byte[] decrypt(byte[], byte[], int) throws sun.security.krb5.internal.KrbApErrException, sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.DesCbcEType r0;
        byte[] r1, r2, r3, $r4;
        int i0, $i1;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcEType;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        i0 := @parameter2: int;
        $i1 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int keySize()>();
        r3 = newarray (byte)[$i1];
        $r4 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: byte[] decrypt(byte[],byte[],byte[],int)>(r1, r2, r3, i0);
        return $r4;
    }

    public byte[] decrypt(byte[], byte[], byte[], int) throws sun.security.krb5.internal.KrbApErrException, sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.DesCbcEType r0;
        byte[] r1, r2, r3, r4;
        int i0, $i1, $i2;
        sun.security.krb5.KrbCryptoException $r5;
        boolean $z0;
        sun.security.krb5.internal.KrbApErrException $r6;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcEType;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        r3 := @parameter2: byte[];
        i0 := @parameter3: int;
        $i1 = lengthof r2;
        if $i1 <= 8 goto label0;

        $r5 = new sun.security.krb5.KrbCryptoException;
        specialinvoke $r5.<sun.security.krb5.KrbCryptoException: void <init>(java.lang.String)>("Invalid DES Key!");
        throw $r5;

     label0:
        $i2 = lengthof r1;
        r4 = newarray (byte)[$i2];
        staticinvoke <sun.security.krb5.internal.crypto.Des: void cbc_encrypt(byte[],byte[],byte[],byte[],boolean)>(r1, r4, r2, r3, 0);
        $z0 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: boolean isChecksumValid(byte[])>(r4);
        if $z0 != 0 goto label1;

        $r6 = new sun.security.krb5.internal.KrbApErrException;
        specialinvoke $r6.<sun.security.krb5.internal.KrbApErrException: void <init>(int)>(31);
        throw $r6;

     label1:
        return r4;
    }

    private void copyChecksumField(byte[], byte[])
    {
        sun.security.krb5.internal.crypto.DesCbcEType r0;
        byte[] r1, r2;
        int i0, $i1, $i2, $i3;
        byte $b4;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcEType;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        i0 = 0;

     label0:
        $i1 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int checksumSize()>();
        if i0 >= $i1 goto label1;

        $i2 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int startOfChecksum()>();
        $i3 = $i2 + i0;
        $b4 = r2[i0];
        r1[$i3] = $b4;
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    private byte[] checksumField(byte[])
    {
        sun.security.krb5.internal.crypto.DesCbcEType r0;
        byte[] r1, r2;
        int i0, $i1, $i2, $i3, $i4;
        byte $b5;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcEType;
        r1 := @parameter0: byte[];
        $i1 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int checksumSize()>();
        r2 = newarray (byte)[$i1];
        i0 = 0;

     label0:
        $i2 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int checksumSize()>();
        if i0 >= $i2 goto label1;

        $i3 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int startOfChecksum()>();
        $i4 = $i3 + i0;
        $b5 = r1[$i4];
        r2[i0] = $b5;
        i0 = i0 + 1;
        goto label0;

     label1:
        return r2;
    }

    private void resetChecksumField(byte[])
    {
        sun.security.krb5.internal.crypto.DesCbcEType r0;
        byte[] r1;
        int i0, $i1, $i2, $i3;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcEType;
        r1 := @parameter0: byte[];
        i0 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int startOfChecksum()>();

     label0:
        $i1 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int startOfChecksum()>();
        $i2 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: int checksumSize()>();
        $i3 = $i1 + $i2;
        if i0 >= $i3 goto label1;

        r1[i0] = 0;
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    private byte[] generateChecksum(byte[]) throws sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.DesCbcEType r0;
        byte[] r1, r2, r3;
        int $i0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcEType;
        r1 := @parameter0: byte[];
        r2 = specialinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: byte[] checksumField(byte[])>(r1);
        specialinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: void resetChecksumField(byte[])>(r1);
        $i0 = lengthof r1;
        r3 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: byte[] calculateChecksum(byte[],int)>(r1, $i0);
        specialinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: void copyChecksumField(byte[],byte[])>(r1, r2);
        return r3;
    }

    private boolean isChecksumEqual(byte[], byte[])
    {
        sun.security.krb5.internal.crypto.DesCbcEType r0;
        byte[] r1, r2;
        int i0, $i1, $i2, $i3;
        byte $b4, $b5;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcEType;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        if r1 != r2 goto label0;

        return 1;

     label0:
        if r1 != null goto label1;

        if r2 != null goto label2;

     label1:
        if r1 == null goto label3;

        if r2 != null goto label3;

     label2:
        return 0;

     label3:
        $i1 = lengthof r1;
        $i2 = lengthof r2;
        if $i1 == $i2 goto label4;

        return 0;

     label4:
        i0 = 0;

     label5:
        $i3 = lengthof r1;
        if i0 >= $i3 goto label7;

        $b4 = r1[i0];
        $b5 = r2[i0];
        if $b4 == $b5 goto label6;

        return 0;

     label6:
        i0 = i0 + 1;
        goto label5;

     label7:
        return 1;
    }

    protected boolean isChecksumValid(byte[]) throws sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.DesCbcEType r0;
        byte[] r1, r2, r3;
        boolean $z0;

        r0 := @this: sun.security.krb5.internal.crypto.DesCbcEType;
        r1 := @parameter0: byte[];
        r2 = specialinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: byte[] checksumField(byte[])>(r1);
        r3 = specialinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: byte[] generateChecksum(byte[])>(r1);
        $z0 = specialinvoke r0.<sun.security.krb5.internal.crypto.DesCbcEType: boolean isChecksumEqual(byte[],byte[])>(r2, r3);
        return $z0;
    }
}
