public final class java.nio.channels.Channels extends java.lang.Object
{

    private void <init>()
    {
        java.nio.channels.Channels r0;

        r0 := @this: java.nio.channels.Channels;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    private static void checkNotNull(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1, $r7;
        java.lang.StringBuilder $r2, $r4, $r5, $r6;
        java.lang.NullPointerException $r3;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.String;
        if r0 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is null!");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>($r7);
        throw $r3;

     label0:
        return;
    }

    private static void writeFullyImpl(java.nio.channels.WritableByteChannel, java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.channels.WritableByteChannel r0;
        java.nio.ByteBuffer r1;
        int i0, $i1;
        java.lang.RuntimeException $r2;

        r0 := @parameter0: java.nio.channels.WritableByteChannel;
        r1 := @parameter1: java.nio.ByteBuffer;

     label0:
        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();
        if $i1 <= 0 goto label2;

        i0 = interfaceinvoke r0.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>(r1);
        if i0 > 0 goto label1;

        $r2 = new java.lang.RuntimeException;
        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("no bytes written");
        throw $r2;

     label1:
        goto label0;

     label2:
        return;
    }

    private static void writeFully(java.nio.channels.WritableByteChannel, java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.channels.WritableByteChannel r0;
        java.nio.ByteBuffer r1;
        java.nio.channels.SelectableChannel r2;
        java.lang.Object r3, $r5;
        java.lang.Throwable r4, $r7;
        boolean $z0, $z1;
        java.nio.channels.IllegalBlockingModeException $r6;

        r0 := @parameter0: java.nio.channels.WritableByteChannel;
        r1 := @parameter1: java.nio.ByteBuffer;
        $z0 = r0 instanceof java.nio.channels.SelectableChannel;
        if $z0 == 0 goto label7;

        r2 = (java.nio.channels.SelectableChannel) r0;
        $r5 = virtualinvoke r2.<java.nio.channels.SelectableChannel: java.lang.Object blockingLock()>();
        r3 = $r5;
        entermonitor $r5;

     label0:
        $z1 = virtualinvoke r2.<java.nio.channels.SelectableChannel: boolean isBlocking()>();
        if $z1 != 0 goto label1;

        $r6 = new java.nio.channels.IllegalBlockingModeException;
        specialinvoke $r6.<java.nio.channels.IllegalBlockingModeException: void <init>()>();
        throw $r6;

     label1:
        staticinvoke <java.nio.channels.Channels: void writeFullyImpl(java.nio.channels.WritableByteChannel,java.nio.ByteBuffer)>(r0, r1);
        exitmonitor r3;

     label2:
        goto label6;

     label3:
        $r7 := @caughtexception;

     label4:
        r4 = $r7;
        exitmonitor r3;

     label5:
        throw r4;

     label6:
        goto label8;

     label7:
        staticinvoke <java.nio.channels.Channels: void writeFullyImpl(java.nio.channels.WritableByteChannel,java.nio.ByteBuffer)>(r0, r1);

     label8:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static java.io.InputStream newInputStream(java.nio.channels.ReadableByteChannel)
    {
        java.nio.channels.ReadableByteChannel r0;
        sun.nio.ch.ChannelInputStream $r1;

        r0 := @parameter0: java.nio.channels.ReadableByteChannel;
        staticinvoke <java.nio.channels.Channels: void checkNotNull(java.lang.Object,java.lang.String)>(r0, "ch");
        $r1 = new sun.nio.ch.ChannelInputStream;
        specialinvoke $r1.<sun.nio.ch.ChannelInputStream: void <init>(java.nio.channels.ReadableByteChannel)>(r0);
        return $r1;
    }

    public static java.io.OutputStream newOutputStream(java.nio.channels.WritableByteChannel)
    {
        java.nio.channels.WritableByteChannel r0;
        java.nio.channels.Channels$1 $r1;

        r0 := @parameter0: java.nio.channels.WritableByteChannel;
        staticinvoke <java.nio.channels.Channels: void checkNotNull(java.lang.Object,java.lang.String)>(r0, "ch");
        $r1 = new java.nio.channels.Channels$1;
        specialinvoke $r1.<java.nio.channels.Channels$1: void <init>(java.nio.channels.WritableByteChannel)>(r0);
        return $r1;
    }

    public static java.io.InputStream newInputStream(java.nio.channels.AsynchronousByteChannel)
    {
        java.nio.channels.AsynchronousByteChannel r0;
        java.nio.channels.Channels$2 $r1;

        r0 := @parameter0: java.nio.channels.AsynchronousByteChannel;
        staticinvoke <java.nio.channels.Channels: void checkNotNull(java.lang.Object,java.lang.String)>(r0, "ch");
        $r1 = new java.nio.channels.Channels$2;
        specialinvoke $r1.<java.nio.channels.Channels$2: void <init>(java.nio.channels.AsynchronousByteChannel)>(r0);
        return $r1;
    }

    public static java.io.OutputStream newOutputStream(java.nio.channels.AsynchronousByteChannel)
    {
        java.nio.channels.AsynchronousByteChannel r0;
        java.nio.channels.Channels$3 $r1;

        r0 := @parameter0: java.nio.channels.AsynchronousByteChannel;
        staticinvoke <java.nio.channels.Channels: void checkNotNull(java.lang.Object,java.lang.String)>(r0, "ch");
        $r1 = new java.nio.channels.Channels$3;
        specialinvoke $r1.<java.nio.channels.Channels$3: void <init>(java.nio.channels.AsynchronousByteChannel)>(r0);
        return $r1;
    }

    public static java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)
    {
        java.io.InputStream r0;
        boolean $z0, $z1;
        java.lang.Class $r1, $r2;
        java.io.FileInputStream $r3;
        java.nio.channels.FileChannel $r4;
        java.nio.channels.Channels$ReadableByteChannelImpl $r5;

        r0 := @parameter0: java.io.InputStream;
        staticinvoke <java.nio.channels.Channels: void checkNotNull(java.lang.Object,java.lang.String)>(r0, "in");
        $z0 = r0 instanceof java.io.FileInputStream;
        if $z0 == 0 goto label0;

        $r1 = class "java/io/FileInputStream";
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);
        if $z1 == 0 goto label0;

        $r3 = (java.io.FileInputStream) r0;
        $r4 = virtualinvoke $r3.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();
        return $r4;

     label0:
        $r5 = new java.nio.channels.Channels$ReadableByteChannelImpl;
        specialinvoke $r5.<java.nio.channels.Channels$ReadableByteChannelImpl: void <init>(java.io.InputStream)>(r0);
        return $r5;
    }

    public static java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream)
    {
        java.io.OutputStream r0;
        boolean $z0, $z1;
        java.lang.Class $r1, $r2;
        java.io.FileOutputStream $r3;
        java.nio.channels.FileChannel $r4;
        java.nio.channels.Channels$WritableByteChannelImpl $r5;

        r0 := @parameter0: java.io.OutputStream;
        staticinvoke <java.nio.channels.Channels: void checkNotNull(java.lang.Object,java.lang.String)>(r0, "out");
        $z0 = r0 instanceof java.io.FileOutputStream;
        if $z0 == 0 goto label0;

        $r1 = class "java/io/FileOutputStream";
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);
        if $z1 == 0 goto label0;

        $r3 = (java.io.FileOutputStream) r0;
        $r4 = virtualinvoke $r3.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();
        return $r4;

     label0:
        $r5 = new java.nio.channels.Channels$WritableByteChannelImpl;
        specialinvoke $r5.<java.nio.channels.Channels$WritableByteChannelImpl: void <init>(java.io.OutputStream)>(r0);
        return $r5;
    }

    public static java.io.Reader newReader(java.nio.channels.ReadableByteChannel, java.nio.charset.CharsetDecoder, int)
    {
        java.nio.channels.ReadableByteChannel r0;
        java.nio.charset.CharsetDecoder r1, $r2;
        int i0;
        sun.nio.cs.StreamDecoder $r3;

        r0 := @parameter0: java.nio.channels.ReadableByteChannel;
        r1 := @parameter1: java.nio.charset.CharsetDecoder;
        i0 := @parameter2: int;
        staticinvoke <java.nio.channels.Channels: void checkNotNull(java.lang.Object,java.lang.String)>(r0, "ch");
        $r2 = virtualinvoke r1.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>();
        $r3 = staticinvoke <sun.nio.cs.StreamDecoder: sun.nio.cs.StreamDecoder forDecoder(java.nio.channels.ReadableByteChannel,java.nio.charset.CharsetDecoder,int)>(r0, $r2, i0);
        return $r3;
    }

    public static java.io.Reader newReader(java.nio.channels.ReadableByteChannel, java.lang.String)
    {
        java.nio.channels.ReadableByteChannel r0;
        java.lang.String r1;
        java.nio.charset.Charset $r2;
        java.nio.charset.CharsetDecoder $r3;
        java.io.Reader $r4;

        r0 := @parameter0: java.nio.channels.ReadableByteChannel;
        r1 := @parameter1: java.lang.String;
        staticinvoke <java.nio.channels.Channels: void checkNotNull(java.lang.Object,java.lang.String)>(r1, "csName");
        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r1);
        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();
        $r4 = staticinvoke <java.nio.channels.Channels: java.io.Reader newReader(java.nio.channels.ReadableByteChannel,java.nio.charset.CharsetDecoder,int)>(r0, $r3, -1);
        return $r4;
    }

    public static java.io.Writer newWriter(java.nio.channels.WritableByteChannel, java.nio.charset.CharsetEncoder, int)
    {
        java.nio.channels.WritableByteChannel r0;
        java.nio.charset.CharsetEncoder r1, $r2;
        int i0;
        sun.nio.cs.StreamEncoder $r3;

        r0 := @parameter0: java.nio.channels.WritableByteChannel;
        r1 := @parameter1: java.nio.charset.CharsetEncoder;
        i0 := @parameter2: int;
        staticinvoke <java.nio.channels.Channels: void checkNotNull(java.lang.Object,java.lang.String)>(r0, "ch");
        $r2 = virtualinvoke r1.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>();
        $r3 = staticinvoke <sun.nio.cs.StreamEncoder: sun.nio.cs.StreamEncoder forEncoder(java.nio.channels.WritableByteChannel,java.nio.charset.CharsetEncoder,int)>(r0, $r2, i0);
        return $r3;
    }

    public static java.io.Writer newWriter(java.nio.channels.WritableByteChannel, java.lang.String)
    {
        java.nio.channels.WritableByteChannel r0;
        java.lang.String r1;
        java.nio.charset.Charset $r2;
        java.nio.charset.CharsetEncoder $r3;
        java.io.Writer $r4;

        r0 := @parameter0: java.nio.channels.WritableByteChannel;
        r1 := @parameter1: java.lang.String;
        staticinvoke <java.nio.channels.Channels: void checkNotNull(java.lang.Object,java.lang.String)>(r1, "csName");
        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r1);
        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();
        $r4 = staticinvoke <java.nio.channels.Channels: java.io.Writer newWriter(java.nio.channels.WritableByteChannel,java.nio.charset.CharsetEncoder,int)>(r0, $r3, -1);
        return $r4;
    }

    static void access$000(java.nio.channels.WritableByteChannel, java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.channels.WritableByteChannel r0;
        java.nio.ByteBuffer r1;

        r0 := @parameter0: java.nio.channels.WritableByteChannel;
        r1 := @parameter1: java.nio.ByteBuffer;
        staticinvoke <java.nio.channels.Channels: void writeFully(java.nio.channels.WritableByteChannel,java.nio.ByteBuffer)>(r0, r1);
        return;
    }
}
