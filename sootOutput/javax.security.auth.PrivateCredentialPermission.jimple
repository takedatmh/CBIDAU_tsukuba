public final class javax.security.auth.PrivateCredentialPermission extends java.security.Permission
{
    private static final long serialVersionUID;
    private static final javax.security.auth.PrivateCredentialPermission$CredOwner[] EMPTY_PRINCIPALS;
    private java.lang.String credentialClass;
    private java.util.Set principals;
    private transient javax.security.auth.PrivateCredentialPermission$CredOwner[] credOwners;
    private boolean testing;

    void <init>(java.lang.String, java.util.Set)
    {
        javax.security.auth.PrivateCredentialPermission r0;
        java.lang.String r1, $r14, $r15;
        java.util.Set r2, r3;
        int i0, $i1, $i2, $i3;
        java.util.Iterator r4;
        java.security.Principal r5;
        javax.security.auth.PrivateCredentialPermission$CredOwner $r6;
        java.lang.Throwable r7, $r16;
        javax.security.auth.PrivateCredentialPermission$CredOwner[] $r9, $r10, $r12;
        boolean $z0;
        java.lang.Object $r11;
        java.lang.Class $r13;

        r0 := @this: javax.security.auth.PrivateCredentialPermission;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.util.Set;
        specialinvoke r0.<java.security.Permission: void <init>(java.lang.String)>(r1);
        r0.<javax.security.auth.PrivateCredentialPermission: boolean testing> = 0;
        r0.<javax.security.auth.PrivateCredentialPermission: java.lang.String credentialClass> = r1;
        r3 = r2;
        entermonitor r2;

     label0:
        $i1 = interfaceinvoke r2.<java.util.Set: int size()>();
        if $i1 != 0 goto label1;

        $r9 = <javax.security.auth.PrivateCredentialPermission: javax.security.auth.PrivateCredentialPermission$CredOwner[] EMPTY_PRINCIPALS>;
        r0.<javax.security.auth.PrivateCredentialPermission: javax.security.auth.PrivateCredentialPermission$CredOwner[] credOwners> = $r9;
        goto label3;

     label1:
        $i2 = interfaceinvoke r2.<java.util.Set: int size()>();
        $r10 = newarray (javax.security.auth.PrivateCredentialPermission$CredOwner)[$i2];
        r0.<javax.security.auth.PrivateCredentialPermission: javax.security.auth.PrivateCredentialPermission$CredOwner[] credOwners> = $r10;
        i0 = 0;
        r4 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.security.Principal) $r11;
        $r12 = r0.<javax.security.auth.PrivateCredentialPermission: javax.security.auth.PrivateCredentialPermission$CredOwner[] credOwners>;
        $i3 = i0;
        i0 = i0 + 1;
        $r6 = new javax.security.auth.PrivateCredentialPermission$CredOwner;
        $r13 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();
        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();
        $r15 = interfaceinvoke r5.<java.security.Principal: java.lang.String getName()>();
        specialinvoke $r6.<javax.security.auth.PrivateCredentialPermission$CredOwner: void <init>(java.lang.String,java.lang.String)>($r14, $r15);
        $r12[$i3] = $r6;
        goto label2;

     label3:
        exitmonitor r3;

     label4:
        goto label8;

     label5:
        $r16 := @caughtexception;

     label6:
        r7 = $r16;
        exitmonitor r3;

     label7:
        throw r7;

     label8:
        return;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        javax.security.auth.PrivateCredentialPermission r0;
        java.lang.String r1, r2, $r3, $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: javax.security.auth.PrivateCredentialPermission;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        specialinvoke r0.<java.security.Permission: void <init>(java.lang.String)>(r1);
        r0.<javax.security.auth.PrivateCredentialPermission: boolean testing> = 0;
        $r3 = "read";
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);
        if $z0 != 0 goto label0;

        $r4 = new java.lang.IllegalArgumentException;
        $r5 = staticinvoke <sun.security.util.ResourcesMgr: java.lang.String getString(java.lang.String)>("actions.can.only.be.read.");
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label0:
        specialinvoke r0.<javax.security.auth.PrivateCredentialPermission: void init(java.lang.String)>(r1);
        return;
    }

    public java.lang.String getCredentialClass()
    {
        javax.security.auth.PrivateCredentialPermission r0;
        java.lang.String $r1;

        r0 := @this: javax.security.auth.PrivateCredentialPermission;
        $r1 = r0.<javax.security.auth.PrivateCredentialPermission: java.lang.String credentialClass>;
        return $r1;
    }

    public java.lang.String[][] getPrincipals()
    {
        javax.security.auth.PrivateCredentialPermission r0;
        java.lang.String[][] r1, $r4;
        int i0, $i1, $i2, $i3;
        javax.security.auth.PrivateCredentialPermission$CredOwner[] $r2, $r3, $r5, $r6, $r8, $r12;
        java.lang.String[] $r7, $r11;
        javax.security.auth.PrivateCredentialPermission$CredOwner $r9, $r13;
        java.lang.String $r10, $r14;

        r0 := @this: javax.security.auth.PrivateCredentialPermission;
        $r2 = r0.<javax.security.auth.PrivateCredentialPermission: javax.security.auth.PrivateCredentialPermission$CredOwner[] credOwners>;
        if $r2 == null goto label0;

        $r3 = r0.<javax.security.auth.PrivateCredentialPermission: javax.security.auth.PrivateCredentialPermission$CredOwner[] credOwners>;
        $i1 = lengthof $r3;
        if $i1 != 0 goto label1;

     label0:
        $r4 = newmultiarray (java.lang.String)[0][0];
        return $r4;

     label1:
        $r5 = r0.<javax.security.auth.PrivateCredentialPermission: javax.security.auth.PrivateCredentialPermission$CredOwner[] credOwners>;
        $i2 = lengthof $r5;
        r1 = newmultiarray (java.lang.String)[$i2][2];
        i0 = 0;

     label2:
        $r6 = r0.<javax.security.auth.PrivateCredentialPermission: javax.security.auth.PrivateCredentialPermission$CredOwner[] credOwners>;
        $i3 = lengthof $r6;
        if i0 >= $i3 goto label3;

        $r7 = r1[i0];
        $r8 = r0.<javax.security.auth.PrivateCredentialPermission: javax.security.auth.PrivateCredentialPermission$CredOwner[] credOwners>;
        $r9 = $r8[i0];
        $r10 = $r9.<javax.security.auth.PrivateCredentialPermission$CredOwner: java.lang.String principalClass>;
        $r7[0] = $r10;
        $r11 = r1[i0];
        $r12 = r0.<javax.security.auth.PrivateCredentialPermission: javax.security.auth.PrivateCredentialPermission$CredOwner[] credOwners>;
        $r13 = $r12[i0];
        $r14 = $r13.<javax.security.auth.PrivateCredentialPermission$CredOwner: java.lang.String principalName>;
        $r11[1] = $r14;
        i0 = i0 + 1;
        goto label2;

     label3:
        return r1;
    }

    public boolean implies(java.security.Permission)
    {
        javax.security.auth.PrivateCredentialPermission r0, r2;
        java.security.Permission r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r3, $r4;
        javax.security.auth.PrivateCredentialPermission$CredOwner[] $r5, $r6;

        r0 := @this: javax.security.auth.PrivateCredentialPermission;
        r1 := @parameter0: java.security.Permission;
        if r1 == null goto label0;

        $z0 = r1 instanceof javax.security.auth.PrivateCredentialPermission;
        if $z0 != 0 goto label1;

     label0:
        return 0;

     label1:
        r2 = (javax.security.auth.PrivateCredentialPermission) r1;
        $r3 = r0.<javax.security.auth.PrivateCredentialPermission: java.lang.String credentialClass>;
        $r4 = r2.<javax.security.auth.PrivateCredentialPermission: java.lang.String credentialClass>;
        $z1 = specialinvoke r0.<javax.security.auth.PrivateCredentialPermission: boolean impliesCredentialClass(java.lang.String,java.lang.String)>($r3, $r4);
        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r5 = r0.<javax.security.auth.PrivateCredentialPermission: javax.security.auth.PrivateCredentialPermission$CredOwner[] credOwners>;
        $r6 = r2.<javax.security.auth.PrivateCredentialPermission: javax.security.auth.PrivateCredentialPermission$CredOwner[] credOwners>;
        $z2 = specialinvoke r0.<javax.security.auth.PrivateCredentialPermission: boolean impliesPrincipalSet(javax.security.auth.PrivateCredentialPermission$CredOwner[],javax.security.auth.PrivateCredentialPermission$CredOwner[])>($r5, $r6);
        return $z2;
    }

    public boolean equals(java.lang.Object)
    {
        javax.security.auth.PrivateCredentialPermission r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: javax.security.auth.PrivateCredentialPermission;
        r1 := @parameter0: java.lang.Object;
        if r1 != r0 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof javax.security.auth.PrivateCredentialPermission;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (javax.security.auth.PrivateCredentialPermission) r1;
        $z1 = virtualinvoke r0.<javax.security.auth.PrivateCredentialPermission: boolean implies(java.security.Permission)>(r2);
        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r2.<javax.security.auth.PrivateCredentialPermission: boolean implies(java.security.Permission)>(r0);
        if $z2 == 0 goto label2;

        $z3 = 1;
        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public int hashCode()
    {
        javax.security.auth.PrivateCredentialPermission r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: javax.security.auth.PrivateCredentialPermission;
        $r1 = r0.<javax.security.auth.PrivateCredentialPermission: java.lang.String credentialClass>;
        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();
        return $i0;
    }

    public java.lang.String getActions()
    {
        javax.security.auth.PrivateCredentialPermission r0;

        r0 := @this: javax.security.auth.PrivateCredentialPermission;
        return "read";
    }

    public java.security.PermissionCollection newPermissionCollection()
    {
        javax.security.auth.PrivateCredentialPermission r0;

        r0 := @this: javax.security.auth.PrivateCredentialPermission;
        return null;
    }

    private void init(java.lang.String)
    {
        javax.security.auth.PrivateCredentialPermission r0;
        java.lang.String r1, $r6, $r14, $r15, $r19, $r21, $r23, $r27, $r29, $r31, r33, $r38, $r40, $r46, $r48, $r50, r52, $r54, $r60, $r62, $r64, $r67, $r70, $r76, $r78, $r80, $r86, r87, $r89, $r95;
        java.util.ArrayList r2, $r8;
        java.util.StringTokenizer r3, $r9;
        null_type n0, n1;
        java.text.MessageFormat r4, $r22, $r39, r41, $r53, r55, $r69, r71;
        java.lang.Object[] r5, $r24, $r42, r43, $r56, r57, $r72, r73;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r7, $r25, $r44, $r58, $r74, $r88;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.io.PrintStream $r10, $r16, $r34, $r81, $r90;
        java.lang.StringBuilder $r11, $r12, $r13, $r17, $r18, $r20, $r26, $r28, $r30, $r35, $r36, $r37, $r45, $r47, $r49, $r59, $r61, $r63, $r65, $r66, $r68, $r75, $r77, $r79, $r82, $r83, $r84, $r85, $r91, $r92, $r93, $r94;
        javax.security.auth.PrivateCredentialPermission$CredOwner $r96;
        javax.security.auth.PrivateCredentialPermission$CredOwner[] $r97, $r98;

        r0 := @this: javax.security.auth.PrivateCredentialPermission;
        r1 := @parameter0: java.lang.String;
        if r1 == null goto label0;

        $r6 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();
        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();
        if $i0 != 0 goto label1;

     label0:
        $r7 = new java.lang.IllegalArgumentException;
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid empty name");
        throw $r7;

     label1:
        $r8 = new java.util.ArrayList;
        specialinvoke $r8.<java.util.ArrayList: void <init>()>();
        r2 = $r8;
        $r9 = new java.util.StringTokenizer;
        specialinvoke $r9.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r1, " ", 1);
        r3 = $r9;
        n0 = null;
        n1 = null;
        $z0 = r0.<javax.security.auth.PrivateCredentialPermission: boolean testing>;
        if $z0 == 0 goto label2;

        $r10 = <java.lang.System: java.io.PrintStream out>;
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("whole name = ");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r14);

     label2:
        $r15 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();
        r0.<javax.security.auth.PrivateCredentialPermission: java.lang.String credentialClass> = $r15;
        $z1 = r0.<javax.security.auth.PrivateCredentialPermission: boolean testing>;
        if $z1 == 0 goto label3;

        $r16 = <java.lang.System: java.io.PrintStream out>;
        $r17 = new java.lang.StringBuilder;
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Credential Class = ");
        $r19 = r0.<javax.security.auth.PrivateCredentialPermission: java.lang.String credentialClass>;
        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r21);

     label3:
        $z2 = virtualinvoke r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z2 != 0 goto label4;

        $r22 = new java.text.MessageFormat;
        $r23 = staticinvoke <sun.security.util.ResourcesMgr: java.lang.String getString(java.lang.String)>("permission.name.name.syntax.invalid.");
        specialinvoke $r22.<java.text.MessageFormat: void <init>(java.lang.String)>($r23);
        r4 = $r22;
        $r24 = newarray (java.lang.Object)[1];
        $r24[0] = r1;
        r5 = $r24;
        $r25 = new java.lang.IllegalArgumentException;
        $r26 = new java.lang.StringBuilder;
        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();
        $r27 = virtualinvoke r4.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>(r5);
        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);
        $r29 = staticinvoke <sun.security.util.ResourcesMgr: java.lang.String getString(java.lang.String)>("Credential.Class.not.followed.by.a.Principal.Class.and.Name");
        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r31);
        throw $r25;

     label4:
        $z3 = virtualinvoke r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z3 == 0 goto label14;

        virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();
        r33 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();
        $z4 = r0.<javax.security.auth.PrivateCredentialPermission: boolean testing>;
        if $z4 == 0 goto label5;

        $r34 = <java.lang.System: java.io.PrintStream out>;
        $r35 = new java.lang.StringBuilder;
        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();
        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    Principal Class = ");
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);
        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r34.<java.io.PrintStream: void println(java.lang.String)>($r38);

     label5:
        $z5 = virtualinvoke r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z5 != 0 goto label6;

        $r39 = new java.text.MessageFormat;
        $r40 = staticinvoke <sun.security.util.ResourcesMgr: java.lang.String getString(java.lang.String)>("permission.name.name.syntax.invalid.");
        specialinvoke $r39.<java.text.MessageFormat: void <init>(java.lang.String)>($r40);
        r41 = $r39;
        $r42 = newarray (java.lang.Object)[1];
        $r42[0] = r1;
        r43 = $r42;
        $r44 = new java.lang.IllegalArgumentException;
        $r45 = new java.lang.StringBuilder;
        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();
        $r46 = virtualinvoke r41.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>(r43);
        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);
        $r48 = staticinvoke <sun.security.util.ResourcesMgr: java.lang.String getString(java.lang.String)>("Principal.Class.not.followed.by.a.Principal.Name");
        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);
        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r44.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r50);
        throw $r44;

     label6:
        virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();
        r52 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();
        $z6 = virtualinvoke r52.<java.lang.String: boolean startsWith(java.lang.String)>("\"");
        if $z6 != 0 goto label7;

        $r53 = new java.text.MessageFormat;
        $r54 = staticinvoke <sun.security.util.ResourcesMgr: java.lang.String getString(java.lang.String)>("permission.name.name.syntax.invalid.");
        specialinvoke $r53.<java.text.MessageFormat: void <init>(java.lang.String)>($r54);
        r55 = $r53;
        $r56 = newarray (java.lang.Object)[1];
        $r56[0] = r1;
        r57 = $r56;
        $r58 = new java.lang.IllegalArgumentException;
        $r59 = new java.lang.StringBuilder;
        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();
        $r60 = virtualinvoke r55.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>(r57);
        $r61 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60);
        $r62 = staticinvoke <sun.security.util.ResourcesMgr: java.lang.String getString(java.lang.String)>("Principal.Name.must.be.surrounded.by.quotes");
        $r63 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);
        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r58.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r64);
        throw $r58;

     label7:
        $z7 = virtualinvoke r52.<java.lang.String: boolean endsWith(java.lang.String)>("\"");
        if $z7 != 0 goto label10;

     label8:
        $z8 = virtualinvoke r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z8 == 0 goto label9;

        $r65 = new java.lang.StringBuilder;
        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();
        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r52);
        $r67 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();
        $r68 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);
        r52 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();
        $z9 = virtualinvoke r52.<java.lang.String: boolean endsWith(java.lang.String)>("\"");
        if $z9 == 0 goto label8;

        goto label9;

     label9:
        $z10 = virtualinvoke r52.<java.lang.String: boolean endsWith(java.lang.String)>("\"");
        if $z10 != 0 goto label10;

        $r69 = new java.text.MessageFormat;
        $r70 = staticinvoke <sun.security.util.ResourcesMgr: java.lang.String getString(java.lang.String)>("permission.name.name.syntax.invalid.");
        specialinvoke $r69.<java.text.MessageFormat: void <init>(java.lang.String)>($r70);
        r71 = $r69;
        $r72 = newarray (java.lang.Object)[1];
        $r72[0] = r1;
        r73 = $r72;
        $r74 = new java.lang.IllegalArgumentException;
        $r75 = new java.lang.StringBuilder;
        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();
        $r76 = virtualinvoke r71.<java.text.MessageFormat: java.lang.String format(java.lang.Object)>(r73);
        $r77 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76);
        $r78 = staticinvoke <sun.security.util.ResourcesMgr: java.lang.String getString(java.lang.String)>("Principal.Name.missing.end.quote");
        $r79 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r78);
        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r74.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r80);
        throw $r74;

     label10:
        $z11 = r0.<javax.security.auth.PrivateCredentialPermission: boolean testing>;
        if $z11 == 0 goto label11;

        $r81 = <java.lang.System: java.io.PrintStream out>;
        $r82 = new java.lang.StringBuilder;
        specialinvoke $r82.<java.lang.StringBuilder: void <init>()>();
        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tprincipalName = \'");
        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r52);
        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r81.<java.io.PrintStream: void println(java.lang.String)>($r86);

     label11:
        $i1 = virtualinvoke r52.<java.lang.String: int length()>();
        $i2 = $i1 - 1;
        r87 = virtualinvoke r52.<java.lang.String: java.lang.String substring(int,int)>(1, $i2);
        $z12 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>("*");
        if $z12 == 0 goto label12;

        $z13 = virtualinvoke r87.<java.lang.String: boolean equals(java.lang.Object)>("*");
        if $z13 != 0 goto label12;

        $r88 = new java.lang.IllegalArgumentException;
        $r89 = staticinvoke <sun.security.util.ResourcesMgr: java.lang.String getString(java.lang.String)>("PrivateCredentialPermission.Principal.Class.can.not.be.a.wildcard.value.if.Principal.Name.is.not.a.wildcard.value");
        specialinvoke $r88.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r89);
        throw $r88;

     label12:
        $z14 = r0.<javax.security.auth.PrivateCredentialPermission: boolean testing>;
        if $z14 == 0 goto label13;

        $r90 = <java.lang.System: java.io.PrintStream out>;
        $r91 = new java.lang.StringBuilder;
        specialinvoke $r91.<java.lang.StringBuilder: void <init>()>();
        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tprincipalName = \'");
        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r87);
        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r95 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r90.<java.io.PrintStream: void println(java.lang.String)>($r95);

     label13:
        $r96 = new javax.security.auth.PrivateCredentialPermission$CredOwner;
        specialinvoke $r96.<javax.security.auth.PrivateCredentialPermission$CredOwner: void <init>(java.lang.String,java.lang.String)>(r33, r87);
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r96);
        goto label4;

     label14:
        $i3 = virtualinvoke r2.<java.util.ArrayList: int size()>();
        $r97 = newarray (javax.security.auth.PrivateCredentialPermission$CredOwner)[$i3];
        r0.<javax.security.auth.PrivateCredentialPermission: javax.security.auth.PrivateCredentialPermission$CredOwner[] credOwners> = $r97;
        $r98 = r0.<javax.security.auth.PrivateCredentialPermission: javax.security.auth.PrivateCredentialPermission$CredOwner[] credOwners>;
        virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r98);
        return;
    }

    private boolean impliesCredentialClass(java.lang.String, java.lang.String)
    {
        javax.security.auth.PrivateCredentialPermission r0;
        java.lang.String r1, r2, $r9;
        java.lang.StringBuilder $r3, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r4;

        r0 := @this: javax.security.auth.PrivateCredentialPermission;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        if r1 == null goto label0;

        if r2 != null goto label1;

     label0:
        return 0;

     label1:
        $z0 = r0.<javax.security.auth.PrivateCredentialPermission: boolean testing>;
        if $z0 == 0 goto label2;

        $r4 = <java.lang.System: java.io.PrintStream out>;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("credential class comparison: ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label2:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("*");
        if $z1 == 0 goto label3;

        return 1;

     label3:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);
        return $z2;
    }

    private boolean impliesPrincipalSet(javax.security.auth.PrivateCredentialPermission$CredOwner[], javax.security.auth.PrivateCredentialPermission$CredOwner[])
    {
        javax.security.auth.PrivateCredentialPermission r0;
        javax.security.auth.PrivateCredentialPermission$CredOwner[] r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean z0, $z1;
        javax.security.auth.PrivateCredentialPermission$CredOwner $r3, $r4;

        r0 := @this: javax.security.auth.PrivateCredentialPermission;
        r1 := @parameter0: javax.security.auth.PrivateCredentialPermission$CredOwner[];
        r2 := @parameter1: javax.security.auth.PrivateCredentialPermission$CredOwner[];
        if r1 == null goto label0;

        if r2 != null goto label1;

     label0:
        return 0;

     label1:
        $i2 = lengthof r2;
        if $i2 != 0 goto label2;

        return 1;

     label2:
        $i3 = lengthof r1;
        if $i3 != 0 goto label3;

        return 0;

     label3:
        i0 = 0;

     label4:
        $i4 = lengthof r1;
        if i0 >= $i4 goto label9;

        z0 = 0;
        i1 = 0;

     label5:
        $i5 = lengthof r2;
        if i1 >= $i5 goto label7;

        $r3 = r1[i0];
        $r4 = r2[i1];
        $z1 = virtualinvoke $r3.<javax.security.auth.PrivateCredentialPermission$CredOwner: boolean implies(java.lang.Object)>($r4);
        if $z1 == 0 goto label6;

        z0 = 1;
        goto label7;

     label6:
        i1 = i1 + 1;
        goto label5;

     label7:
        if z0 != 0 goto label8;

        return 0;

     label8:
        i0 = i0 + 1;
        goto label4;

     label9:
        return 1;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        javax.security.auth.PrivateCredentialPermission r0;
        java.io.ObjectInputStream r1;
        java.lang.String $r2, $r3, $r4, $r6;
        int $i0, $i1;
        javax.security.auth.PrivateCredentialPermission$CredOwner[] $r5;

        r0 := @this: javax.security.auth.PrivateCredentialPermission;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        $r2 = virtualinvoke r0.<javax.security.auth.PrivateCredentialPermission: java.lang.String getName()>();
        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>(" ");
        if $i0 != -1 goto label0;

        $r3 = virtualinvoke r0.<javax.security.auth.PrivateCredentialPermission: java.lang.String getName()>();
        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("\"");
        if $i1 != -1 goto label0;

        $r4 = virtualinvoke r0.<javax.security.auth.PrivateCredentialPermission: java.lang.String getName()>();
        r0.<javax.security.auth.PrivateCredentialPermission: java.lang.String credentialClass> = $r4;
        $r5 = <javax.security.auth.PrivateCredentialPermission: javax.security.auth.PrivateCredentialPermission$CredOwner[] EMPTY_PRINCIPALS>;
        r0.<javax.security.auth.PrivateCredentialPermission: javax.security.auth.PrivateCredentialPermission$CredOwner[] credOwners> = $r5;
        goto label1;

     label0:
        $r6 = virtualinvoke r0.<javax.security.auth.PrivateCredentialPermission: java.lang.String getName()>();
        specialinvoke r0.<javax.security.auth.PrivateCredentialPermission: void init(java.lang.String)>($r6);

     label1:
        return;
    }

    static void <clinit>()
    {
        javax.security.auth.PrivateCredentialPermission$CredOwner[] $r0;

        $r0 = newarray (javax.security.auth.PrivateCredentialPermission$CredOwner)[0];
        <javax.security.auth.PrivateCredentialPermission: javax.security.auth.PrivateCredentialPermission$CredOwner[] EMPTY_PRINCIPALS> = $r0;
        return;
    }
}
