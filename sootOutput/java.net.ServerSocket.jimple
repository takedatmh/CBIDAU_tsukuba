public class java.net.ServerSocket extends java.lang.Object implements java.io.Closeable
{
    private boolean created;
    private boolean bound;
    private boolean closed;
    private java.lang.Object closeLock;
    private java.net.SocketImpl impl;
    private boolean oldImpl;
    private static java.net.SocketImplFactory factory;

    void <init>(java.net.SocketImpl)
    {
        java.net.ServerSocket r0;
        java.net.SocketImpl r1;
        java.lang.Object $r2;

        r0 := @this: java.net.ServerSocket;
        r1 := @parameter0: java.net.SocketImpl;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.net.ServerSocket: boolean created> = 0;
        r0.<java.net.ServerSocket: boolean bound> = 0;
        r0.<java.net.ServerSocket: boolean closed> = 0;
        $r2 = new java.lang.Object;
        specialinvoke $r2.<java.lang.Object: void <init>()>();
        r0.<java.net.ServerSocket: java.lang.Object closeLock> = $r2;
        r0.<java.net.ServerSocket: boolean oldImpl> = 0;
        r0.<java.net.ServerSocket: java.net.SocketImpl impl> = r1;
        virtualinvoke r1.<java.net.SocketImpl: void setServerSocket(java.net.ServerSocket)>(r0);
        return;
    }

    public void <init>() throws java.io.IOException
    {
        java.net.ServerSocket r0;
        java.lang.Object $r1;

        r0 := @this: java.net.ServerSocket;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.net.ServerSocket: boolean created> = 0;
        r0.<java.net.ServerSocket: boolean bound> = 0;
        r0.<java.net.ServerSocket: boolean closed> = 0;
        $r1 = new java.lang.Object;
        specialinvoke $r1.<java.lang.Object: void <init>()>();
        r0.<java.net.ServerSocket: java.lang.Object closeLock> = $r1;
        r0.<java.net.ServerSocket: boolean oldImpl> = 0;
        specialinvoke r0.<java.net.ServerSocket: void setImpl()>();
        return;
    }

    public void <init>(int) throws java.io.IOException
    {
        java.net.ServerSocket r0;
        int i0;

        r0 := @this: java.net.ServerSocket;
        i0 := @parameter0: int;
        specialinvoke r0.<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>(i0, 50, null);
        return;
    }

    public void <init>(int, int) throws java.io.IOException
    {
        java.net.ServerSocket r0;
        int i0, i1;

        r0 := @this: java.net.ServerSocket;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        specialinvoke r0.<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>(i0, i1, null);
        return;
    }

    public void <init>(int, int, java.net.InetAddress) throws java.io.IOException
    {
        java.net.ServerSocket r0;
        int i0, i1;
        java.net.InetAddress r1;
        java.lang.SecurityException r2, $r10;
        java.lang.Object $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        java.net.InetSocketAddress $r9;
        java.io.IOException $r11, r12;

        r0 := @this: java.net.ServerSocket;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.net.InetAddress;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.net.ServerSocket: boolean created> = 0;
        r0.<java.net.ServerSocket: boolean bound> = 0;
        r0.<java.net.ServerSocket: boolean closed> = 0;
        $r3 = new java.lang.Object;
        specialinvoke $r3.<java.lang.Object: void <init>()>();
        r0.<java.net.ServerSocket: java.lang.Object closeLock> = $r3;
        r0.<java.net.ServerSocket: boolean oldImpl> = 0;
        specialinvoke r0.<java.net.ServerSocket: void setImpl()>();
        if i0 < 0 goto label0;

        if i0 <= 65535 goto label1;

     label0:
        $r4 = new java.lang.IllegalArgumentException;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Port value out of range: ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);
        throw $r4;

     label1:
        if i1 >= 1 goto label2;

        i1 = 50;

     label2:
        $r9 = new java.net.InetSocketAddress;
        specialinvoke $r9.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r1, i0);
        virtualinvoke r0.<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>($r9, i1);

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;
        r2 = $r10;
        virtualinvoke r0.<java.net.ServerSocket: void close()>();
        throw r2;

     label5:
        $r11 := @caughtexception;
        r12 = $r11;
        virtualinvoke r0.<java.net.ServerSocket: void close()>();
        throw r12;

     label6:
        return;

        catch java.lang.SecurityException from label2 to label3 with label4;
        catch java.io.IOException from label2 to label3 with label5;
    }

    java.net.SocketImpl getImpl() throws java.net.SocketException
    {
        java.net.ServerSocket r0;
        boolean $z0;
        java.net.SocketImpl $r1;

        r0 := @this: java.net.ServerSocket;
        $z0 = r0.<java.net.ServerSocket: boolean created>;
        if $z0 != 0 goto label0;

        virtualinvoke r0.<java.net.ServerSocket: void createImpl()>();

     label0:
        $r1 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;
        return $r1;
    }

    private void checkOldImpl()
    {
        java.net.ServerSocket r0;
        java.security.PrivilegedActionException r1, $r5;
        java.net.SocketImpl $r2;
        java.net.ServerSocket$1 $r3;

        r0 := @this: java.net.ServerSocket;
        $r2 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;
        if $r2 != null goto label0;

        return;

     label0:
        $r3 = new java.net.ServerSocket$1;
        specialinvoke $r3.<java.net.ServerSocket$1: void <init>(java.net.ServerSocket)>(r0);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r3);

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r1 = $r5;
        r0.<java.net.ServerSocket: boolean oldImpl> = 1;

     label3:
        return;

        catch java.security.PrivilegedActionException from label0 to label1 with label2;
    }

    private void setImpl()
    {
        java.net.ServerSocket r0;
        java.net.SocketImplFactory $r1, $r2;
        java.net.SocketImpl $r3, $r5, $r6;
        java.net.SocksSocketImpl $r4;

        r0 := @this: java.net.ServerSocket;
        $r1 = <java.net.ServerSocket: java.net.SocketImplFactory factory>;
        if $r1 == null goto label0;

        $r2 = <java.net.ServerSocket: java.net.SocketImplFactory factory>;
        $r3 = interfaceinvoke $r2.<java.net.SocketImplFactory: java.net.SocketImpl createSocketImpl()>();
        r0.<java.net.ServerSocket: java.net.SocketImpl impl> = $r3;
        specialinvoke r0.<java.net.ServerSocket: void checkOldImpl()>();
        goto label1;

     label0:
        $r4 = new java.net.SocksSocketImpl;
        specialinvoke $r4.<java.net.SocksSocketImpl: void <init>()>();
        r0.<java.net.ServerSocket: java.net.SocketImpl impl> = $r4;

     label1:
        $r5 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;
        if $r5 == null goto label2;

        $r6 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;
        virtualinvoke $r6.<java.net.SocketImpl: void setServerSocket(java.net.ServerSocket)>(r0);

     label2:
        return;
    }

    void createImpl() throws java.net.SocketException
    {
        java.net.ServerSocket r0;
        java.io.IOException r1, $r4;
        java.net.SocketImpl $r2, $r3;
        java.net.SocketException $r5;
        java.lang.String $r6;

        r0 := @this: java.net.ServerSocket;
        $r2 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;
        if $r2 != null goto label0;

        specialinvoke r0.<java.net.ServerSocket: void setImpl()>();

     label0:
        $r3 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;
        virtualinvoke $r3.<java.net.SocketImpl: void create(boolean)>(1);
        r0.<java.net.ServerSocket: boolean created> = 1;

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        $r5 = new java.net.SocketException;
        $r6 = virtualinvoke r1.<java.io.IOException: java.lang.String getMessage()>();
        specialinvoke $r5.<java.net.SocketException: void <init>(java.lang.String)>($r6);
        throw $r5;

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public void bind(java.net.SocketAddress) throws java.io.IOException
    {
        java.net.ServerSocket r0;
        java.net.SocketAddress r1;

        r0 := @this: java.net.ServerSocket;
        r1 := @parameter0: java.net.SocketAddress;
        virtualinvoke r0.<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>(r1, 50);
        return;
    }

    public void bind(java.net.SocketAddress, int) throws java.io.IOException
    {
        java.net.ServerSocket r0;
        java.net.SocketAddress r1;
        int i0, $i1, $i2;
        java.net.InetSocketAddress r2, $r6;
        java.lang.SecurityManager r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.net.SocketException $r4, $r5, $r8;
        java.lang.IllegalArgumentException $r7;
        java.net.SocketImpl $r9, $r11;
        java.net.InetAddress $r10;
        java.lang.SecurityException $r12, r13;
        java.io.IOException $r14, r15;

        r0 := @this: java.net.ServerSocket;
        r1 := @parameter0: java.net.SocketAddress;
        i0 := @parameter1: int;
        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r4 = new java.net.SocketException;
        specialinvoke $r4.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r4;

     label0:
        $z1 = r0.<java.net.ServerSocket: boolean oldImpl>;
        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.net.ServerSocket: boolean isBound()>();
        if $z2 == 0 goto label1;

        $r5 = new java.net.SocketException;
        specialinvoke $r5.<java.net.SocketException: void <init>(java.lang.String)>("Already bound");
        throw $r5;

     label1:
        if r1 != null goto label2;

        $r6 = new java.net.InetSocketAddress;
        specialinvoke $r6.<java.net.InetSocketAddress: void <init>(int)>(0);
        r1 = $r6;

     label2:
        $z3 = r1 instanceof java.net.InetSocketAddress;
        if $z3 != 0 goto label3;

        $r7 = new java.lang.IllegalArgumentException;
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported address type");
        throw $r7;

     label3:
        r2 = (java.net.InetSocketAddress) r1;
        $z4 = virtualinvoke r2.<java.net.InetSocketAddress: boolean isUnresolved()>();
        if $z4 == 0 goto label4;

        $r8 = new java.net.SocketException;
        specialinvoke $r8.<java.net.SocketException: void <init>(java.lang.String)>("Unresolved address");
        throw $r8;

     label4:
        if i0 >= 1 goto label5;

        i0 = 50;

     label5:
        r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r3 == null goto label6;

        $i1 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();
        virtualinvoke r3.<java.lang.SecurityManager: void checkListen(int)>($i1);

     label6:
        $r9 = virtualinvoke r0.<java.net.ServerSocket: java.net.SocketImpl getImpl()>();
        $r10 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $i2 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();
        virtualinvoke $r9.<java.net.SocketImpl: void bind(java.net.InetAddress,int)>($r10, $i2);
        $r11 = virtualinvoke r0.<java.net.ServerSocket: java.net.SocketImpl getImpl()>();
        virtualinvoke $r11.<java.net.SocketImpl: void listen(int)>(i0);
        r0.<java.net.ServerSocket: boolean bound> = 1;

     label7:
        goto label10;

     label8:
        $r12 := @caughtexception;
        r13 = $r12;
        r0.<java.net.ServerSocket: boolean bound> = 0;
        throw r13;

     label9:
        $r14 := @caughtexception;
        r15 = $r14;
        r0.<java.net.ServerSocket: boolean bound> = 0;
        throw r15;

     label10:
        return;

        catch java.lang.SecurityException from label5 to label7 with label8;
        catch java.io.IOException from label5 to label7 with label9;
    }

    public java.net.InetAddress getInetAddress()
    {
        java.net.ServerSocket r0;
        java.net.InetAddress r1, $r8;
        java.lang.SecurityManager r2;
        boolean $z0, $z1;
        java.net.SocketImpl $r3;
        java.lang.String $r4;
        java.lang.SecurityException $r6, r7;
        java.net.SocketException $r9, r10;

        r0 := @this: java.net.ServerSocket;
        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isBound()>();
        if $z0 != 0 goto label0;

        return null;

     label0:
        $r3 = virtualinvoke r0.<java.net.ServerSocket: java.net.SocketImpl getImpl()>();
        r1 = virtualinvoke $r3.<java.net.SocketImpl: java.net.InetAddress getInetAddress()>();
        $z1 = staticinvoke <java.net.NetUtil: boolean doRevealLocalAddress()>();
        if $z1 != 0 goto label1;

        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label1;

        $r4 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostAddress()>();
        virtualinvoke r2.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>($r4, -1);

     label1:
        return r1;

     label2:
        $r6 := @caughtexception;
        r7 = $r6;
        $r8 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLoopbackAddress()>();
        return $r8;

     label3:
        $r9 := @caughtexception;
        r10 = $r9;
        return null;

        catch java.lang.SecurityException from label0 to label1 with label2;
        catch java.net.SocketException from label0 to label1 with label3;
    }

    public int getLocalPort()
    {
        java.net.ServerSocket r0;
        java.net.SocketException r1, $r3;
        boolean $z0;
        java.net.SocketImpl $r2;
        int $i0;

        r0 := @this: java.net.ServerSocket;
        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isBound()>();
        if $z0 != 0 goto label0;

        return -1;

     label0:
        $r2 = virtualinvoke r0.<java.net.ServerSocket: java.net.SocketImpl getImpl()>();
        $i0 = virtualinvoke $r2.<java.net.SocketImpl: int getLocalPort()>();

     label1:
        return $i0;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        return -1;

        catch java.net.SocketException from label0 to label1 with label2;
    }

    public java.net.SocketAddress getLocalSocketAddress()
    {
        java.net.ServerSocket r0;
        boolean $z0;
        java.net.InetSocketAddress $r1;
        java.net.InetAddress $r2;
        int $i0;

        r0 := @this: java.net.ServerSocket;
        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isBound()>();
        if $z0 != 0 goto label0;

        return null;

     label0:
        $r1 = new java.net.InetSocketAddress;
        $r2 = virtualinvoke r0.<java.net.ServerSocket: java.net.InetAddress getInetAddress()>();
        $i0 = virtualinvoke r0.<java.net.ServerSocket: int getLocalPort()>();
        specialinvoke $r1.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r2, $i0);
        return $r1;
    }

    public java.net.Socket accept() throws java.io.IOException
    {
        java.net.ServerSocket r0;
        java.net.Socket r1, $r4;
        boolean $z0, $z1;
        java.net.SocketException $r2, $r3;
        java.net.SocketImpl $r5;

        r0 := @this: java.net.ServerSocket;
        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r2 = new java.net.SocketException;
        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r2;

     label0:
        $z1 = virtualinvoke r0.<java.net.ServerSocket: boolean isBound()>();
        if $z1 != 0 goto label1;

        $r3 = new java.net.SocketException;
        specialinvoke $r3.<java.net.SocketException: void <init>(java.lang.String)>("Socket is not bound yet");
        throw $r3;

     label1:
        $r4 = new java.net.Socket;
        $r5 = (java.net.SocketImpl) null;
        specialinvoke $r4.<java.net.Socket: void <init>(java.net.SocketImpl)>($r5);
        r1 = $r4;
        virtualinvoke r0.<java.net.ServerSocket: void implAccept(java.net.Socket)>(r1);
        return r1;
    }

    protected final void implAccept(java.net.Socket) throws java.io.IOException
    {
        java.net.ServerSocket r0;
        java.net.Socket r1;
        java.net.SocketImpl r2, $r4, $r5, $r8;
        java.lang.SecurityManager r3;
        java.net.InetAddress $r6, $r9;
        java.io.FileDescriptor $r7;
        java.lang.String $r10;
        int $i0;
        java.io.IOException $r11, r12;
        java.lang.SecurityException $r13, r14;

        r0 := @this: java.net.ServerSocket;
        r1 := @parameter0: java.net.Socket;
        r2 = null;

     label0:
        $r4 = r1.<java.net.Socket: java.net.SocketImpl impl>;
        if $r4 != null goto label1;

        virtualinvoke r1.<java.net.Socket: void setImpl()>();
        goto label2;

     label1:
        $r5 = r1.<java.net.Socket: java.net.SocketImpl impl>;
        virtualinvoke $r5.<java.net.SocketImpl: void reset()>();

     label2:
        r2 = r1.<java.net.Socket: java.net.SocketImpl impl>;
        r1.<java.net.Socket: java.net.SocketImpl impl> = null;
        $r6 = new java.net.InetAddress;
        specialinvoke $r6.<java.net.InetAddress: void <init>()>();
        r2.<java.net.SocketImpl: java.net.InetAddress address> = $r6;
        $r7 = new java.io.FileDescriptor;
        specialinvoke $r7.<java.io.FileDescriptor: void <init>()>();
        r2.<java.net.SocketImpl: java.io.FileDescriptor fd> = $r7;
        $r8 = virtualinvoke r0.<java.net.ServerSocket: java.net.SocketImpl getImpl()>();
        virtualinvoke $r8.<java.net.SocketImpl: void accept(java.net.SocketImpl)>(r2);
        r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r3 == null goto label3;

        $r9 = virtualinvoke r2.<java.net.SocketImpl: java.net.InetAddress getInetAddress()>();
        $r10 = virtualinvoke $r9.<java.net.InetAddress: java.lang.String getHostAddress()>();
        $i0 = virtualinvoke r2.<java.net.SocketImpl: int getPort()>();
        virtualinvoke r3.<java.lang.SecurityManager: void checkAccept(java.lang.String,int)>($r10, $i0);

     label3:
        goto label8;

     label4:
        $r11 := @caughtexception;
        r12 = $r11;
        if r2 == null goto label5;

        virtualinvoke r2.<java.net.SocketImpl: void reset()>();

     label5:
        r1.<java.net.Socket: java.net.SocketImpl impl> = r2;
        throw r12;

     label6:
        $r13 := @caughtexception;
        r14 = $r13;
        if r2 == null goto label7;

        virtualinvoke r2.<java.net.SocketImpl: void reset()>();

     label7:
        r1.<java.net.Socket: java.net.SocketImpl impl> = r2;
        throw r14;

     label8:
        r1.<java.net.Socket: java.net.SocketImpl impl> = r2;
        virtualinvoke r1.<java.net.Socket: void postAccept()>();
        return;

        catch java.io.IOException from label0 to label3 with label4;
        catch java.lang.SecurityException from label0 to label3 with label6;
    }

    public void close() throws java.io.IOException
    {
        java.net.ServerSocket r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        boolean $z0, $z1;
        java.net.SocketImpl $r4;

        r0 := @this: java.net.ServerSocket;
        $r3 = r0.<java.net.ServerSocket: java.lang.Object closeLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isClosed()>();
        if $z0 == 0 goto label2;

        exitmonitor r1;

     label1:
        return;

     label2:
        $z1 = r0.<java.net.ServerSocket: boolean created>;
        if $z1 == 0 goto label3;

        $r4 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;
        virtualinvoke $r4.<java.net.SocketImpl: void close()>();

     label3:
        r0.<java.net.ServerSocket: boolean closed> = 1;
        exitmonitor r1;

     label4:
        goto label8;

     label5:
        $r5 := @caughtexception;

     label6:
        r2 = $r5;
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        return;

        catch java.lang.Throwable from label0 to label1 with label5;
        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.nio.channels.ServerSocketChannel getChannel()
    {
        java.net.ServerSocket r0;

        r0 := @this: java.net.ServerSocket;
        return null;
    }

    public boolean isBound()
    {
        java.net.ServerSocket r0;
        boolean $z0, $z1, $z2;

        r0 := @this: java.net.ServerSocket;
        $z0 = r0.<java.net.ServerSocket: boolean bound>;
        if $z0 != 0 goto label0;

        $z1 = r0.<java.net.ServerSocket: boolean oldImpl>;
        if $z1 == 0 goto label1;

     label0:
        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isClosed()
    {
        java.net.ServerSocket r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: java.net.ServerSocket;
        $r3 = r0.<java.net.ServerSocket: java.lang.Object closeLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z0 = r0.<java.net.ServerSocket: boolean closed>;
        exitmonitor r1;

     label1:
        return $z0;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public synchronized void setSoTimeout(int) throws java.net.SocketException
    {
        java.net.ServerSocket r0;
        int i0;
        boolean $z0;
        java.net.SocketException $r1;
        java.net.SocketImpl $r2;
        java.lang.Integer $r3;

        r0 := @this: java.net.ServerSocket;
        i0 := @parameter0: int;
        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r1 = new java.net.SocketException;
        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r1;

     label0:
        $r2 = virtualinvoke r0.<java.net.ServerSocket: java.net.SocketImpl getImpl()>();
        $r3 = new java.lang.Integer;
        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i0);
        virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>(4102, $r3);
        return;
    }

    public synchronized int getSoTimeout() throws java.io.IOException
    {
        java.net.ServerSocket r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.net.SocketException $r2;
        java.net.SocketImpl $r3;
        java.lang.Integer $r4;
        int $i0;

        r0 := @this: java.net.ServerSocket;
        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r2 = new java.net.SocketException;
        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r2;

     label0:
        $r3 = virtualinvoke r0.<java.net.ServerSocket: java.net.SocketImpl getImpl()>();
        r1 = virtualinvoke $r3.<java.net.SocketImpl: java.lang.Object getOption(int)>(4102);
        $z1 = r1 instanceof java.lang.Integer;
        if $z1 == 0 goto label1;

        $r4 = (java.lang.Integer) r1;
        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();
        return $i0;

     label1:
        return 0;
    }

    public void setReuseAddress(boolean) throws java.net.SocketException
    {
        java.net.ServerSocket r0;
        boolean z0, $z1;
        java.net.SocketException $r1;
        java.net.SocketImpl $r2;
        java.lang.Boolean $r3;

        r0 := @this: java.net.ServerSocket;
        z0 := @parameter0: boolean;
        $z1 = virtualinvoke r0.<java.net.ServerSocket: boolean isClosed()>();
        if $z1 == 0 goto label0;

        $r1 = new java.net.SocketException;
        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r1;

     label0:
        $r2 = virtualinvoke r0.<java.net.ServerSocket: java.net.SocketImpl getImpl()>();
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);
        virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>(4, $r3);
        return;
    }

    public boolean getReuseAddress() throws java.net.SocketException
    {
        java.net.ServerSocket r0;
        boolean $z0, $z1;
        java.net.SocketException $r1;
        java.net.SocketImpl $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4, $r5;

        r0 := @this: java.net.ServerSocket;
        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r1 = new java.net.SocketException;
        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r1;

     label0:
        $r2 = virtualinvoke r0.<java.net.ServerSocket: java.net.SocketImpl getImpl()>();
        $r3 = virtualinvoke $r2.<java.net.SocketImpl: java.lang.Object getOption(int)>(4);
        $r4 = (java.lang.Boolean) $r3;
        $r5 = (java.lang.Boolean) $r4;
        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();
        return $z1;
    }

    public java.lang.String toString()
    {
        java.net.ServerSocket r0;
        java.net.InetAddress r1;
        boolean $z0, $z1;
        java.lang.SecurityManager $r2;
        java.net.SocketImpl $r3, $r8;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9, $r10;
        int $i0;
        java.lang.String $r11;

        r0 := @this: java.net.ServerSocket;
        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isBound()>();
        if $z0 != 0 goto label0;

        return "ServerSocket[unbound]";

     label0:
        $z1 = staticinvoke <java.net.NetUtil: boolean doRevealLocalAddress()>();
        if $z1 != 0 goto label1;

        $r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if $r2 == null goto label1;

        r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLoopbackAddress()>();
        goto label2;

     label1:
        $r3 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;
        r1 = virtualinvoke $r3.<java.net.SocketImpl: java.net.InetAddress getInetAddress()>();

     label2:
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ServerSocket[addr=");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",localport=");
        $r8 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;
        $i0 = virtualinvoke $r8.<java.net.SocketImpl: int getLocalPort()>();
        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r11;
    }

    void setBound()
    {
        java.net.ServerSocket r0;

        r0 := @this: java.net.ServerSocket;
        r0.<java.net.ServerSocket: boolean bound> = 1;
        return;
    }

    void setCreated()
    {
        java.net.ServerSocket r0;

        r0 := @this: java.net.ServerSocket;
        r0.<java.net.ServerSocket: boolean created> = 1;
        return;
    }

    public static synchronized void setSocketFactory(java.net.SocketImplFactory) throws java.io.IOException
    {
        java.net.SocketImplFactory r0, $r1;
        java.lang.SecurityManager r2;
        java.net.SocketException $r3;

        r0 := @parameter0: java.net.SocketImplFactory;
        $r1 = <java.net.ServerSocket: java.net.SocketImplFactory factory>;
        if $r1 == null goto label0;

        $r3 = new java.net.SocketException;
        specialinvoke $r3.<java.net.SocketException: void <init>(java.lang.String)>("factory already defined");
        throw $r3;

     label0:
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label1;

        virtualinvoke r2.<java.lang.SecurityManager: void checkSetFactory()>();

     label1:
        <java.net.ServerSocket: java.net.SocketImplFactory factory> = r0;
        return;
    }

    public synchronized void setReceiveBufferSize(int) throws java.net.SocketException
    {
        java.net.ServerSocket r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;
        java.net.SocketException $r2;
        java.net.SocketImpl $r3;
        java.lang.Integer $r4;

        r0 := @this: java.net.ServerSocket;
        i0 := @parameter0: int;
        if i0 > 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("negative receive size");
        throw $r1;

     label0:
        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isClosed()>();
        if $z0 == 0 goto label1;

        $r2 = new java.net.SocketException;
        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r2;

     label1:
        $r3 = virtualinvoke r0.<java.net.ServerSocket: java.net.SocketImpl getImpl()>();
        $r4 = new java.lang.Integer;
        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i0);
        virtualinvoke $r3.<java.net.SocketImpl: void setOption(int,java.lang.Object)>(4098, $r4);
        return;
    }

    public synchronized int getReceiveBufferSize() throws java.net.SocketException
    {
        java.net.ServerSocket r0;
        int i0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.net.SocketException $r2;
        java.net.SocketImpl $r3;
        java.lang.Integer $r4;

        r0 := @this: java.net.ServerSocket;
        $z0 = virtualinvoke r0.<java.net.ServerSocket: boolean isClosed()>();
        if $z0 == 0 goto label0;

        $r2 = new java.net.SocketException;
        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r2;

     label0:
        i0 = 0;
        $r3 = virtualinvoke r0.<java.net.ServerSocket: java.net.SocketImpl getImpl()>();
        r1 = virtualinvoke $r3.<java.net.SocketImpl: java.lang.Object getOption(int)>(4098);
        $z1 = r1 instanceof java.lang.Integer;
        if $z1 == 0 goto label1;

        $r4 = (java.lang.Integer) r1;
        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

     label1:
        return i0;
    }

    public void setPerformancePreferences(int, int, int)
    {
        java.net.ServerSocket r0;
        int i0, i1, i2;

        r0 := @this: java.net.ServerSocket;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        return;
    }

    static java.net.SocketImpl access$000(java.net.ServerSocket)
    {
        java.net.ServerSocket r0;
        java.net.SocketImpl $r1;

        r0 := @parameter0: java.net.ServerSocket;
        $r1 = r0.<java.net.ServerSocket: java.net.SocketImpl impl>;
        return $r1;
    }

    static void <clinit>()
    {
        <java.net.ServerSocket: java.net.SocketImplFactory factory> = null;
        return;
    }
}
