class sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator extends java.lang.Object implements java.util.Iterator
{
    private final java.nio.file.DirectoryStream stream;
    private boolean atEof;
    private java.nio.file.Path nextEntry;
    static final boolean $assertionsDisabled;
    final sun.nio.fs.UnixDirectoryStream this$0;

    void <init>(sun.nio.fs.UnixDirectoryStream, java.nio.file.DirectoryStream)
    {
        sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator r0;
        sun.nio.fs.UnixDirectoryStream r1;
        java.nio.file.DirectoryStream r2;

        r0 := @this: sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator;
        r1 := @parameter0: sun.nio.fs.UnixDirectoryStream;
        r2 := @parameter1: java.nio.file.DirectoryStream;
        r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: sun.nio.fs.UnixDirectoryStream this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean atEof> = 0;
        r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.DirectoryStream stream> = r2;
        return;
    }

    private boolean isSelfOrParent(byte[])
    {
        sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator r0;
        byte[] r1;
        byte $b0, $b3;
        int $i1, $i2;

        r0 := @this: sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator;
        r1 := @parameter0: byte[];
        $b0 = r1[0];
        if $b0 != 46 goto label1;

        $i1 = lengthof r1;
        if $i1 == 1 goto label0;

        $i2 = lengthof r1;
        if $i2 != 2 goto label1;

        $b3 = r1[1];
        if $b3 != 46 goto label1;

     label0:
        return 1;

     label1:
        return 0;
    }

    private java.nio.file.Path readNextEntry()
    {
        sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        byte[] r1;
        sun.nio.fs.UnixException r2, $r12;
        java.io.IOException r3, $r27, r28;
        java.lang.Throwable r4, $r16;
        java.lang.AssertionError $r5;
        sun.nio.fs.UnixDirectoryStream $r6, $r8, $r9, $r10, $r13, $r17, $r19, $r22, $r24;
        java.util.concurrent.locks.Lock $r7, $r11, $r18;
        long $l0;
        sun.nio.fs.UnixPath $r14, $r20, r21;
        java.nio.file.DirectoryIteratorException $r15, $r29;
        java.nio.file.DirectoryStream$Filter $r23, $r25;

        r0 := @this: sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator;
        $z0 = <sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r0);
        if $z1 != 0 goto label0;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label0:
        r1 = null;
        $r6 = r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: sun.nio.fs.UnixDirectoryStream this$0>;
        $r7 = virtualinvoke $r6.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r8 = r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: sun.nio.fs.UnixDirectoryStream this$0>;
        $z2 = virtualinvoke $r8.<sun.nio.fs.UnixDirectoryStream: boolean isOpen()>();
        if $z2 == 0 goto label2;

        $r9 = r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: sun.nio.fs.UnixDirectoryStream this$0>;
        $l0 = staticinvoke <sun.nio.fs.UnixDirectoryStream: long access$000(sun.nio.fs.UnixDirectoryStream)>($r9);
        r1 = staticinvoke <sun.nio.fs.UnixNativeDispatcher: byte[] readdir(long)>($l0);

     label2:
        $r10 = r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: sun.nio.fs.UnixDirectoryStream this$0>;
        $r11 = virtualinvoke $r10.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r11.<java.util.concurrent.locks.Lock: void unlock()>();
        goto label7;

     label3:
        $r12 := @caughtexception;

     label4:
        r2 = $r12;
        $r13 = r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: sun.nio.fs.UnixDirectoryStream this$0>;
        $r14 = staticinvoke <sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath access$100(sun.nio.fs.UnixDirectoryStream)>($r13);
        r3 = virtualinvoke r2.<sun.nio.fs.UnixException: java.io.IOException asIOException(sun.nio.fs.UnixPath)>($r14);
        $r15 = new java.nio.file.DirectoryIteratorException;
        specialinvoke $r15.<java.nio.file.DirectoryIteratorException: void <init>(java.io.IOException)>(r3);
        throw $r15;

     label5:
        $r16 := @caughtexception;
        r4 = $r16;

     label6:
        $r17 = r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: sun.nio.fs.UnixDirectoryStream this$0>;
        $r18 = virtualinvoke $r17.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r18.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r4;

     label7:
        if r1 != null goto label8;

        r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean atEof> = 1;
        return null;

     label8:
        $z3 = specialinvoke r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean isSelfOrParent(byte[])>(r1);
        if $z3 != 0 goto label13;

        $r19 = r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: sun.nio.fs.UnixDirectoryStream this$0>;
        $r20 = staticinvoke <sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath access$100(sun.nio.fs.UnixDirectoryStream)>($r19);
        r21 = virtualinvoke $r20.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(byte[])>(r1);

     label9:
        $r22 = r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: sun.nio.fs.UnixDirectoryStream this$0>;
        $r23 = staticinvoke <sun.nio.fs.UnixDirectoryStream: java.nio.file.DirectoryStream$Filter access$200(sun.nio.fs.UnixDirectoryStream)>($r22);
        if $r23 == null goto label10;

        $r24 = r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: sun.nio.fs.UnixDirectoryStream this$0>;
        $r25 = staticinvoke <sun.nio.fs.UnixDirectoryStream: java.nio.file.DirectoryStream$Filter access$200(sun.nio.fs.UnixDirectoryStream)>($r24);
        $z4 = interfaceinvoke $r25.<java.nio.file.DirectoryStream$Filter: boolean accept(java.lang.Object)>(r21);
        if $z4 == 0 goto label11;

     label10:
        return r21;

     label11:
        goto label13;

     label12:
        $r27 := @caughtexception;
        r28 = $r27;
        $r29 = new java.nio.file.DirectoryIteratorException;
        specialinvoke $r29.<java.nio.file.DirectoryIteratorException: void <init>(java.io.IOException)>(r28);
        throw $r29;

     label13:
        goto label0;

        catch sun.nio.fs.UnixException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
        catch java.io.IOException from label9 to label10 with label12;
    }

    public synchronized boolean hasNext()
    {
        sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator r0;
        java.nio.file.Path $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator;
        $r1 = r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path nextEntry>;
        if $r1 != null goto label0;

        $z0 = r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean atEof>;
        if $z0 != 0 goto label0;

        $r2 = specialinvoke r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>();
        r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path nextEntry> = $r2;

     label0:
        $r3 = r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path nextEntry>;
        if $r3 == null goto label1;

        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public synchronized java.nio.file.Path next()
    {
        sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator r0;
        java.nio.file.Path r1, $r2;
        boolean $z0;
        java.util.NoSuchElementException $r3;

        r0 := @this: sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator;
        $r2 = r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path nextEntry>;
        if $r2 != null goto label0;

        $z0 = r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean atEof>;
        if $z0 != 0 goto label0;

        r1 = specialinvoke r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path readNextEntry()>();
        goto label1;

     label0:
        r1 = r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path nextEntry>;
        r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path nextEntry> = null;

     label1:
        if r1 != null goto label2;

        $r3 = new java.util.NoSuchElementException;
        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();
        throw $r3;

     label2:
        return r1;
    }

    public void remove()
    {
        sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator;
        $r1 = new java.lang.UnsupportedOperationException;
        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r1;
    }

    public volatile java.lang.Object next()
    {
        sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator r0;
        java.nio.file.Path $r1;

        r0 := @this: sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator;
        $r1 = virtualinvoke r0.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path next()>();
        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/nio/fs/UnixDirectoryStream";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean $assertionsDisabled> = $z1;
        return;
    }
}
