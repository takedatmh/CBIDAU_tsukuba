public abstract class javax.crypto.CipherSpi extends java.lang.Object
{

    public void <init>()
    {
        javax.crypto.CipherSpi r0;

        r0 := @this: javax.crypto.CipherSpi;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    protected abstract void engineSetMode(java.lang.String) throws java.security.NoSuchAlgorithmException;

    protected abstract void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException;

    protected abstract int engineGetBlockSize();

    protected abstract int engineGetOutputSize(int);

    protected abstract byte[] engineGetIV();

    protected abstract java.security.AlgorithmParameters engineGetParameters();

    protected abstract void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException;

    protected abstract void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;

    protected abstract void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;

    protected abstract byte[] engineUpdate(byte[], int, int);

    protected abstract int engineUpdate(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException;

    protected int engineUpdate(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.crypto.ShortBufferException
    {
        javax.crypto.CipherSpi r0;
        java.nio.ByteBuffer r1, r2;
        javax.crypto.IllegalBlockSizeException r3, $r4;
        int $i0;
        java.security.ProviderException $r5, $r8;
        javax.crypto.BadPaddingException $r6, r7;

        r0 := @this: javax.crypto.CipherSpi;
        r1 := @parameter0: java.nio.ByteBuffer;
        r2 := @parameter1: java.nio.ByteBuffer;

     label0:
        $i0 = specialinvoke r0.<javax.crypto.CipherSpi: int bufferCrypt(java.nio.ByteBuffer,java.nio.ByteBuffer,boolean)>(r1, r2, 1);

     label1:
        return $i0;

     label2:
        $r4 := @caughtexception;
        r3 = $r4;
        $r5 = new java.security.ProviderException;
        specialinvoke $r5.<java.security.ProviderException: void <init>(java.lang.String)>("Internal error in update()");
        throw $r5;

     label3:
        $r6 := @caughtexception;
        r7 = $r6;
        $r8 = new java.security.ProviderException;
        specialinvoke $r8.<java.security.ProviderException: void <init>(java.lang.String)>("Internal error in update()");
        throw $r8;

        catch javax.crypto.IllegalBlockSizeException from label0 to label1 with label2;
        catch javax.crypto.BadPaddingException from label0 to label1 with label3;
    }

    protected abstract byte[] engineDoFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException;

    protected abstract int engineDoFinal(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException;

    protected int engineDoFinal(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        javax.crypto.CipherSpi r0;
        java.nio.ByteBuffer r1, r2;
        int $i0;

        r0 := @this: javax.crypto.CipherSpi;
        r1 := @parameter0: java.nio.ByteBuffer;
        r2 := @parameter1: java.nio.ByteBuffer;
        $i0 = specialinvoke r0.<javax.crypto.CipherSpi: int bufferCrypt(java.nio.ByteBuffer,java.nio.ByteBuffer,boolean)>(r1, r2, 0);
        return $i0;
    }

    static int getTempArraySize(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;
        $i1 = staticinvoke <java.lang.Math: int min(int,int)>(4096, i0);
        return $i1;
    }

    private int bufferCrypt(java.nio.ByteBuffer, java.nio.ByteBuffer, boolean) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        javax.crypto.CipherSpi r0;
        java.nio.ByteBuffer r1, r2;
        boolean z0, z1, z2, z3;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i14, i15, $i16, i17, $i18, i19, $i20, i21, $i22, $i23, i24, $i25, $i26, i27, i28, i29;
        byte[] r3, r4, r14, r15, r18, r19;
        java.lang.NullPointerException $r5;
        javax.crypto.ShortBufferException $r6, $r22, r23;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String $r11;
        java.security.ProviderException $r24, $r26;
        java.lang.Throwable $r25;

        r0 := @this: javax.crypto.CipherSpi;
        r1 := @parameter0: java.nio.ByteBuffer;
        r2 := @parameter1: java.nio.ByteBuffer;
        z0 := @parameter2: boolean;
        if r1 == null goto label0;

        if r2 != null goto label1;

     label0:
        $r5 = new java.lang.NullPointerException;
        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Input and output buffers must not be null");
        throw $r5;

     label1:
        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();
        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();
        i2 = i1 - i0;
        if z0 == 0 goto label2;

        if i2 != 0 goto label2;

        return 0;

     label2:
        i3 = virtualinvoke r0.<javax.crypto.CipherSpi: int engineGetOutputSize(int)>(i2);
        $i11 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();
        if $i11 >= i3 goto label3;

        $r6 = new javax.crypto.ShortBufferException;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Need at least ");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes of space in output buffer");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>($r11);
        throw $r6;

     label3:
        z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();
        z2 = virtualinvoke r2.<java.nio.ByteBuffer: boolean hasArray()>();
        if z1 == 0 goto label6;

        if z2 == 0 goto label6;

        r3 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();
        $i12 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();
        i4 = $i12 + i0;
        r4 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>();
        i5 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();
        $i13 = virtualinvoke r2.<java.nio.ByteBuffer: int arrayOffset()>();
        i6 = $i13 + i5;
        if z0 == 0 goto label4;

        i7 = virtualinvoke r0.<javax.crypto.CipherSpi: int engineUpdate(byte[],int,int,byte[],int)>(r3, i4, i2, r4, i6);
        goto label5;

     label4:
        i7 = virtualinvoke r0.<javax.crypto.CipherSpi: int engineDoFinal(byte[],int,int,byte[],int)>(r3, i4, i2, r4, i6);

     label5:
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1);
        $i14 = i5 + i7;
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i14);
        return i7;

     label6:
        if z1 != 0 goto label11;

        if z2 == 0 goto label11;

        i15 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();
        r14 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>();
        $i16 = virtualinvoke r2.<java.nio.ByteBuffer: int arrayOffset()>();
        i17 = $i16 + i15;
        $i18 = staticinvoke <javax.crypto.CipherSpi: int getTempArraySize(int)>(i2);
        r15 = newarray (byte)[$i18];
        i19 = 0;

     label7:
        $i20 = lengthof r15;
        i21 = staticinvoke <java.lang.Math: int min(int,int)>(i2, $i20);
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r15, 0, i21);
        if z0 != 0 goto label8;

        if i2 == i21 goto label9;

     label8:
        i8 = virtualinvoke r0.<javax.crypto.CipherSpi: int engineUpdate(byte[],int,int,byte[],int)>(r15, 0, i21, r14, i17);
        goto label10;

     label9:
        i8 = virtualinvoke r0.<javax.crypto.CipherSpi: int engineDoFinal(byte[],int,int,byte[],int)>(r15, 0, i21, r14, i17);

     label10:
        i19 = i19 + i8;
        i17 = i17 + i8;
        i2 = i2 - i21;
        if i2 > 0 goto label7;

        $i22 = i15 + i19;
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i22);
        return i19;

     label11:
        if z1 == 0 goto label12;

        r18 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();
        $i23 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();
        i24 = $i23 + i0;
        goto label13;

     label12:
        $i25 = staticinvoke <javax.crypto.CipherSpi: int getTempArraySize(int)>(i2);
        r18 = newarray (byte)[$i25];
        i24 = 0;

     label13:
        $i26 = staticinvoke <javax.crypto.CipherSpi: int getTempArraySize(int)>(i3);
        r19 = newarray (byte)[$i26];
        i27 = lengthof r19;
        i28 = 0;
        z3 = 0;

     label14:
        i29 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i27);
        if z1 != 0 goto label15;

        if z3 != 0 goto label15;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r18, 0, i29);
        i24 = 0;

     label15:
        if z0 != 0 goto label16;

        if i2 == i29 goto label17;

     label16:
        i9 = virtualinvoke r0.<javax.crypto.CipherSpi: int engineUpdate(byte[],int,int,byte[],int)>(r18, i24, i29, r19, 0);
        goto label18;

     label17:
        i9 = virtualinvoke r0.<javax.crypto.CipherSpi: int engineDoFinal(byte[],int,int,byte[],int)>(r18, i24, i29, r19, 0);

     label18:
        z3 = 0;
        i24 = i24 + i29;
        i2 = i2 - i29;
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r19, 0, i9);
        i28 = i28 + i9;

     label19:
        goto label22;

     label20:
        $r22 := @caughtexception;
        r23 = $r22;
        if z3 == 0 goto label21;

        $r24 = new java.security.ProviderException;
        specialinvoke $r24.<java.security.ProviderException: void <init>(java.lang.String)>("Could not determine buffer size");
        $r25 = virtualinvoke $r24.<java.security.ProviderException: java.lang.Throwable initCause(java.lang.Throwable)>(r23);
        $r26 = (java.security.ProviderException) $r25;
        throw $r26;

     label21:
        z3 = 1;
        i10 = virtualinvoke r0.<javax.crypto.CipherSpi: int engineGetOutputSize(int)>(i29);
        r19 = newarray (byte)[i10];

     label22:
        if i2 > 0 goto label14;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1);
        return i28;

        catch javax.crypto.ShortBufferException from label15 to label19 with label20;
    }

    protected byte[] engineWrap(java.security.Key) throws javax.crypto.IllegalBlockSizeException, java.security.InvalidKeyException
    {
        javax.crypto.CipherSpi r0;
        java.security.Key r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: javax.crypto.CipherSpi;
        r1 := @parameter0: java.security.Key;
        $r2 = new java.lang.UnsupportedOperationException;
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r2;
    }

    protected java.security.Key engineUnwrap(byte[], java.lang.String, int) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException
    {
        javax.crypto.CipherSpi r0;
        byte[] r1;
        java.lang.String r2;
        int i0;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: javax.crypto.CipherSpi;
        r1 := @parameter0: byte[];
        r2 := @parameter1: java.lang.String;
        i0 := @parameter2: int;
        $r3 = new java.lang.UnsupportedOperationException;
        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r3;
    }

    protected int engineGetKeySize(java.security.Key) throws java.security.InvalidKeyException
    {
        javax.crypto.CipherSpi r0;
        java.security.Key r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: javax.crypto.CipherSpi;
        r1 := @parameter0: java.security.Key;
        $r2 = new java.lang.UnsupportedOperationException;
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r2;
    }

    protected void engineUpdateAAD(byte[], int, int)
    {
        javax.crypto.CipherSpi r0;
        byte[] r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: javax.crypto.CipherSpi;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = new java.lang.UnsupportedOperationException;
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The underlying Cipher implementation does not support this method");
        throw $r2;
    }

    protected void engineUpdateAAD(java.nio.ByteBuffer)
    {
        javax.crypto.CipherSpi r0;
        java.nio.ByteBuffer r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: javax.crypto.CipherSpi;
        r1 := @parameter0: java.nio.ByteBuffer;
        $r2 = new java.lang.UnsupportedOperationException;
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The underlying Cipher implementation does not support this method");
        throw $r2;
    }
}
