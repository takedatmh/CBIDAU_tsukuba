public class java.util.logging.FileHandler extends java.util.logging.StreamHandler
{
    private java.util.logging.FileHandler$MeteredStream meter;
    private boolean append;
    private int limit;
    private int count;
    private java.lang.String pattern;
    private java.lang.String lockFileName;
    private java.io.FileOutputStream lockStream;
    private java.io.File[] files;
    private static final int MAX_LOCKS;
    private static java.util.HashMap locks;

    private void open(java.io.File, boolean) throws java.io.IOException
    {
        java.util.logging.FileHandler r0;
        java.io.File r1;
        boolean z0;
        int i0;
        java.io.FileOutputStream r2, $r4;
        java.io.BufferedOutputStream r3, $r6;
        long $l1;
        java.lang.String $r5;
        java.util.logging.FileHandler$MeteredStream $r7, $r8;

        r0 := @this: java.util.logging.FileHandler;
        r1 := @parameter0: java.io.File;
        z0 := @parameter1: boolean;
        i0 = 0;
        if z0 == 0 goto label0;

        $l1 = virtualinvoke r1.<java.io.File: long length()>();
        i0 = (int) $l1;

     label0:
        $r4 = new java.io.FileOutputStream;
        $r5 = virtualinvoke r1.<java.io.File: java.lang.String toString()>();
        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>($r5, z0);
        r2 = $r4;
        $r6 = new java.io.BufferedOutputStream;
        specialinvoke $r6.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(r2);
        r3 = $r6;
        $r7 = new java.util.logging.FileHandler$MeteredStream;
        specialinvoke $r7.<java.util.logging.FileHandler$MeteredStream: void <init>(java.util.logging.FileHandler,java.io.OutputStream,int)>(r0, r3, i0);
        r0.<java.util.logging.FileHandler: java.util.logging.FileHandler$MeteredStream meter> = $r7;
        $r8 = r0.<java.util.logging.FileHandler: java.util.logging.FileHandler$MeteredStream meter>;
        virtualinvoke r0.<java.util.logging.FileHandler: void setOutputStream(java.io.OutputStream)>($r8);
        return;
    }

    private void configure()
    {
        java.util.logging.FileHandler r0;
        java.util.logging.LogManager r1;
        java.lang.String r2, $r9, $r10, $r14, $r18, $r22, $r26, $r32, $r37, $r43, $r44;
        java.lang.StringBuilder $r3, $r7, $r8, $r11, $r12, $r13, $r15, $r16, $r17, $r19, $r20, $r21, $r23, $r24, $r25, $r29, $r30, $r31, $r34, $r35, $r36, $r40, $r41, $r42;
        java.lang.Exception r4, r5, $r45, $r46;
        java.lang.Class $r6;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.util.logging.Level $r27, $r28;
        java.util.logging.Filter $r33;
        java.util.logging.XMLFormatter $r38;
        java.util.logging.Formatter $r39;

        r0 := @this: java.util.logging.FileHandler;
        r1 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();
        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r2 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".pattern");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        $r10 = virtualinvoke r1.<java.util.logging.LogManager: java.lang.String getStringProperty(java.lang.String,java.lang.String)>($r9, "%h/java%u.log");
        r0.<java.util.logging.FileHandler: java.lang.String pattern> = $r10;
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".limit");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        $i0 = virtualinvoke r1.<java.util.logging.LogManager: int getIntProperty(java.lang.String,int)>($r14, 0);
        r0.<java.util.logging.FileHandler: int limit> = $i0;
        $i1 = r0.<java.util.logging.FileHandler: int limit>;
        if $i1 >= 0 goto label0;

        r0.<java.util.logging.FileHandler: int limit> = 0;

     label0:
        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".count");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        $i2 = virtualinvoke r1.<java.util.logging.LogManager: int getIntProperty(java.lang.String,int)>($r18, 1);
        r0.<java.util.logging.FileHandler: int count> = $i2;
        $i3 = r0.<java.util.logging.FileHandler: int count>;
        if $i3 > 0 goto label1;

        r0.<java.util.logging.FileHandler: int count> = 1;

     label1:
        $r19 = new java.lang.StringBuilder;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".append");
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
        $z0 = virtualinvoke r1.<java.util.logging.LogManager: boolean getBooleanProperty(java.lang.String,boolean)>($r22, 0);
        r0.<java.util.logging.FileHandler: boolean append> = $z0;
        $r23 = new java.lang.StringBuilder;
        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".level");
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();
        $r27 = <java.util.logging.Level: java.util.logging.Level ALL>;
        $r28 = virtualinvoke r1.<java.util.logging.LogManager: java.util.logging.Level getLevelProperty(java.lang.String,java.util.logging.Level)>($r26, $r27);
        virtualinvoke r0.<java.util.logging.FileHandler: void setLevel(java.util.logging.Level)>($r28);
        $r29 = new java.lang.StringBuilder;
        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".filter");
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();
        $r33 = virtualinvoke r1.<java.util.logging.LogManager: java.util.logging.Filter getFilterProperty(java.lang.String,java.util.logging.Filter)>($r32, null);
        virtualinvoke r0.<java.util.logging.FileHandler: void setFilter(java.util.logging.Filter)>($r33);
        $r34 = new java.lang.StringBuilder;
        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();
        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".formatter");
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();
        $r38 = new java.util.logging.XMLFormatter;
        specialinvoke $r38.<java.util.logging.XMLFormatter: void <init>()>();
        $r39 = virtualinvoke r1.<java.util.logging.LogManager: java.util.logging.Formatter getFormatterProperty(java.lang.String,java.util.logging.Formatter)>($r37, $r38);
        virtualinvoke r0.<java.util.logging.FileHandler: void setFormatter(java.util.logging.Formatter)>($r39);

     label2:
        $r40 = new java.lang.StringBuilder;
        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();
        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".encoding");
        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();
        $r44 = virtualinvoke r1.<java.util.logging.LogManager: java.lang.String getStringProperty(java.lang.String,java.lang.String)>($r43, null);
        virtualinvoke r0.<java.util.logging.FileHandler: void setEncoding(java.lang.String)>($r44);

     label3:
        goto label8;

     label4:
        $r45 := @caughtexception;
        r4 = $r45;

     label5:
        virtualinvoke r0.<java.util.logging.FileHandler: void setEncoding(java.lang.String)>(null);

     label6:
        goto label8;

     label7:
        $r46 := @caughtexception;
        r5 = $r46;

     label8:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public void <init>() throws java.io.IOException, java.lang.SecurityException
    {
        java.util.logging.FileHandler r0;

        r0 := @this: java.util.logging.FileHandler;
        specialinvoke r0.<java.util.logging.StreamHandler: void <init>()>();
        virtualinvoke r0.<java.util.logging.FileHandler: void checkPermission()>();
        specialinvoke r0.<java.util.logging.FileHandler: void configure()>();
        specialinvoke r0.<java.util.logging.FileHandler: void openFiles()>();
        return;
    }

    public void <init>(java.lang.String) throws java.io.IOException, java.lang.SecurityException
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.util.logging.FileHandler;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.util.logging.StreamHandler: void <init>()>();
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i0 >= 1 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r2;

     label0:
        virtualinvoke r0.<java.util.logging.FileHandler: void checkPermission()>();
        specialinvoke r0.<java.util.logging.FileHandler: void configure()>();
        r0.<java.util.logging.FileHandler: java.lang.String pattern> = r1;
        r0.<java.util.logging.FileHandler: int limit> = 0;
        r0.<java.util.logging.FileHandler: int count> = 1;
        specialinvoke r0.<java.util.logging.FileHandler: void openFiles()>();
        return;
    }

    public void <init>(java.lang.String, boolean) throws java.io.IOException, java.lang.SecurityException
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1;
        boolean z0;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.util.logging.FileHandler;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        specialinvoke r0.<java.util.logging.StreamHandler: void <init>()>();
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i0 >= 1 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r2;

     label0:
        virtualinvoke r0.<java.util.logging.FileHandler: void checkPermission()>();
        specialinvoke r0.<java.util.logging.FileHandler: void configure()>();
        r0.<java.util.logging.FileHandler: java.lang.String pattern> = r1;
        r0.<java.util.logging.FileHandler: int limit> = 0;
        r0.<java.util.logging.FileHandler: int count> = 1;
        r0.<java.util.logging.FileHandler: boolean append> = z0;
        specialinvoke r0.<java.util.logging.FileHandler: void openFiles()>();
        return;
    }

    public void <init>(java.lang.String, int, int) throws java.io.IOException, java.lang.SecurityException
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1;
        int i0, i1, $i2;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.util.logging.FileHandler;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.util.logging.StreamHandler: void <init>()>();
        if i0 < 0 goto label0;

        if i1 < 1 goto label0;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i2 >= 1 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r2;

     label1:
        virtualinvoke r0.<java.util.logging.FileHandler: void checkPermission()>();
        specialinvoke r0.<java.util.logging.FileHandler: void configure()>();
        r0.<java.util.logging.FileHandler: java.lang.String pattern> = r1;
        r0.<java.util.logging.FileHandler: int limit> = i0;
        r0.<java.util.logging.FileHandler: int count> = i1;
        specialinvoke r0.<java.util.logging.FileHandler: void openFiles()>();
        return;
    }

    public void <init>(java.lang.String, int, int, boolean) throws java.io.IOException, java.lang.SecurityException
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1;
        int i0, i1, $i2;
        boolean z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.util.logging.FileHandler;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        z0 := @parameter3: boolean;
        specialinvoke r0.<java.util.logging.StreamHandler: void <init>()>();
        if i0 < 0 goto label0;

        if i1 < 1 goto label0;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i2 >= 1 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r2;

     label1:
        virtualinvoke r0.<java.util.logging.FileHandler: void checkPermission()>();
        specialinvoke r0.<java.util.logging.FileHandler: void configure()>();
        r0.<java.util.logging.FileHandler: java.lang.String pattern> = r1;
        r0.<java.util.logging.FileHandler: int limit> = i0;
        r0.<java.util.logging.FileHandler: int count> = i1;
        r0.<java.util.logging.FileHandler: boolean append> = z0;
        specialinvoke r0.<java.util.logging.FileHandler: void openFiles()>();
        return;
    }

    private void openFiles() throws java.io.IOException
    {
        java.util.logging.FileHandler r0;
        java.util.logging.LogManager r1;
        java.lang.StringBuilder $r2, $r10, $r11, $r15, $r16, $r18, $r20, $r24, $r25, $r52, $r53, $r54;
        java.util.logging.FileHandler$InitializationErrorManager r3, $r13;
        int i0, $i1, $i2, $i3, $i4, i5, $i6;
        java.util.HashMap r4, $r27, $r28, $r37;
        java.nio.channels.FileChannel r5;
        java.io.IOException r6, r7, $r14, $r34, $r36, $r49, $r51;
        java.lang.Throwable r8, $r41;
        java.lang.IllegalArgumentException $r9;
        java.lang.String $r12, $r17, $r19, $r21, $r23, $r26, $r29, $r32, $r38, $r39, $r44, $r55;
        java.io.File $r22, $r45, $r47;
        java.lang.Object $r30;
        java.io.FileOutputStream $r31, $r33;
        java.nio.channels.FileLock $r35;
        boolean $z0, z1, $z2, $z3, $z4;
        java.io.File[] $r42, $r43, $r46;
        java.lang.Exception r48;
        java.lang.SecurityException $r50;
        java.util.logging.ErrorManager $r56;

        r0 := @this: java.util.logging.FileHandler;
        r1 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();
        virtualinvoke r1.<java.util.logging.LogManager: void checkPermission()>();
        $i1 = r0.<java.util.logging.FileHandler: int count>;
        if $i1 >= 1 goto label0;

        $r9 = new java.lang.IllegalArgumentException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file count = ");
        $i2 = r0.<java.util.logging.FileHandler: int count>;
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);
        throw $r9;

     label0:
        $i3 = r0.<java.util.logging.FileHandler: int limit>;
        if $i3 >= 0 goto label1;

        r0.<java.util.logging.FileHandler: int limit> = 0;

     label1:
        $r13 = new java.util.logging.FileHandler$InitializationErrorManager;
        specialinvoke $r13.<java.util.logging.FileHandler$InitializationErrorManager: void <init>(java.util.logging.FileHandler$1)>(null);
        r3 = $r13;
        virtualinvoke r0.<java.util.logging.FileHandler: void setErrorManager(java.util.logging.ErrorManager)>(r3);
        i0 = -1;

     label2:
        i0 = i0 + 1;
        if i0 <= 100 goto label3;

        $r14 = new java.io.IOException;
        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t get lock for ");
        $r17 = r0.<java.util.logging.FileHandler: java.lang.String pattern>;
        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r19);
        throw $r14;

     label3:
        $r20 = new java.lang.StringBuilder;
        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();
        $r21 = r0.<java.util.logging.FileHandler: java.lang.String pattern>;
        $r22 = specialinvoke r0.<java.util.logging.FileHandler: java.io.File generate(java.lang.String,int,int)>($r21, 0, i0);
        $r23 = virtualinvoke $r22.<java.io.File: java.lang.String toString()>();
        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".lck");
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();
        r0.<java.util.logging.FileHandler: java.lang.String lockFileName> = $r26;
        $r27 = <java.util.logging.FileHandler: java.util.HashMap locks>;
        r4 = $r27;
        entermonitor $r27;

     label4:
        $r28 = <java.util.logging.FileHandler: java.util.HashMap locks>;
        $r29 = r0.<java.util.logging.FileHandler: java.lang.String lockFileName>;
        $r30 = virtualinvoke $r28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r29);
        if $r30 == null goto label6;

        exitmonitor r4;

     label5:
        goto label2;

     label6:
        $r31 = new java.io.FileOutputStream;
        $r32 = r0.<java.util.logging.FileHandler: java.lang.String lockFileName>;
        specialinvoke $r31.<java.io.FileOutputStream: void <init>(java.lang.String)>($r32);
        r0.<java.util.logging.FileHandler: java.io.FileOutputStream lockStream> = $r31;
        $r33 = r0.<java.util.logging.FileHandler: java.io.FileOutputStream lockStream>;
        r5 = virtualinvoke $r33.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

     label7:
        goto label10;

     label8:
        $r34 := @caughtexception;
        r6 = $r34;
        exitmonitor r4;

     label9:
        goto label2;

     label10:
        $r35 = virtualinvoke r5.<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock()>();
        if $r35 == null goto label11;

        $z0 = 1;
        goto label12;

     label11:
        $z0 = 0;

     label12:
        z1 = $z0;

     label13:
        goto label15;

     label14:
        $r36 := @caughtexception;
        r7 = $r36;
        z1 = 1;

     label15:
        if z1 == 0 goto label17;

        $r37 = <java.util.logging.FileHandler: java.util.HashMap locks>;
        $r38 = r0.<java.util.logging.FileHandler: java.lang.String lockFileName>;
        $r39 = r0.<java.util.logging.FileHandler: java.lang.String lockFileName>;
        virtualinvoke $r37.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, $r39);
        exitmonitor r4;

     label16:
        goto label23;

     label17:
        virtualinvoke r5.<java.nio.channels.FileChannel: void close()>();
        exitmonitor r4;

     label18:
        goto label22;

     label19:
        $r41 := @caughtexception;

     label20:
        r8 = $r41;
        exitmonitor r4;

     label21:
        throw r8;

     label22:
        goto label2;

     label23:
        $i4 = r0.<java.util.logging.FileHandler: int count>;
        $r42 = newarray (java.io.File)[$i4];
        r0.<java.util.logging.FileHandler: java.io.File[] files> = $r42;
        i5 = 0;

     label24:
        $i6 = r0.<java.util.logging.FileHandler: int count>;
        if i5 >= $i6 goto label25;

        $r43 = r0.<java.util.logging.FileHandler: java.io.File[] files>;
        $r44 = r0.<java.util.logging.FileHandler: java.lang.String pattern>;
        $r45 = specialinvoke r0.<java.util.logging.FileHandler: java.io.File generate(java.lang.String,int,int)>($r44, i5, i0);
        $r43[i5] = $r45;
        i5 = i5 + 1;
        goto label24;

     label25:
        $z2 = r0.<java.util.logging.FileHandler: boolean append>;
        if $z2 == 0 goto label26;

        $r46 = r0.<java.util.logging.FileHandler: java.io.File[] files>;
        $r47 = $r46[0];
        specialinvoke r0.<java.util.logging.FileHandler: void open(java.io.File,boolean)>($r47, 1);
        goto label27;

     label26:
        specialinvoke r0.<java.util.logging.FileHandler: void rotate()>();

     label27:
        r48 = r3.<java.util.logging.FileHandler$InitializationErrorManager: java.lang.Exception lastException>;
        if r48 == null goto label30;

        $z3 = r48 instanceof java.io.IOException;
        if $z3 == 0 goto label28;

        $r49 = (java.io.IOException) r48;
        throw $r49;

     label28:
        $z4 = r48 instanceof java.lang.SecurityException;
        if $z4 == 0 goto label29;

        $r50 = (java.lang.SecurityException) r48;
        throw $r50;

     label29:
        $r51 = new java.io.IOException;
        $r52 = new java.lang.StringBuilder;
        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();
        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception: ");
        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r48);
        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r51.<java.io.IOException: void <init>(java.lang.String)>($r55);
        throw $r51;

     label30:
        $r56 = new java.util.logging.ErrorManager;
        specialinvoke $r56.<java.util.logging.ErrorManager: void <init>()>();
        virtualinvoke r0.<java.util.logging.FileHandler: void setErrorManager(java.util.logging.ErrorManager)>($r56);
        return;

        catch java.io.IOException from label6 to label7 with label8;
        catch java.io.IOException from label10 to label13 with label14;
        catch java.lang.Throwable from label4 to label5 with label19;
        catch java.lang.Throwable from label6 to label9 with label19;
        catch java.lang.Throwable from label10 to label16 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    private java.io.File generate(java.lang.String, int, int) throws java.io.IOException
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1, r3, r4, $r9;
        int i0, i1, i2, $i5, $i6, $i8, $i9;
        java.io.File r2, $r5, $r6, $r7, $r8, $r31, $r32;
        boolean z0, z1, $z2;
        char c3, c4, $c7;
        java.io.IOException $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30;

        r0 := @this: java.util.logging.FileHandler;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 = null;
        r3 = "";
        i2 = 0;
        z0 = 0;
        z1 = 0;

     label0:
        $i5 = virtualinvoke r1.<java.lang.String: int length()>();
        if i2 >= $i5 goto label12;

        c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);
        i2 = i2 + 1;
        c4 = 0;
        $i6 = virtualinvoke r1.<java.lang.String: int length()>();
        if i2 >= $i6 goto label1;

        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);
        c4 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c7);

     label1:
        if c3 != 47 goto label4;

        if r2 != null goto label2;

        $r5 = new java.io.File;
        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>(r3);
        r2 = $r5;
        goto label3;

     label2:
        $r6 = new java.io.File;
        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, r3);
        r2 = $r6;

     label3:
        r3 = "";
        goto label0;

     label4:
        if c3 != 37 goto label11;

        if c4 != 116 goto label6;

        r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");
        if r4 != null goto label5;

        r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

     label5:
        $r7 = new java.io.File;
        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>(r4);
        r2 = $r7;
        i2 = i2 + 1;
        r3 = "";
        goto label0;

     label6:
        if c4 != 104 goto label8;

        $r8 = new java.io.File;
        $r9 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");
        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r9);
        r2 = $r8;
        $z2 = staticinvoke <java.util.logging.FileHandler: boolean isSetUID()>();
        if $z2 == 0 goto label7;

        $r10 = new java.io.IOException;
        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("can\'t use %h in set UID program");
        throw $r10;

     label7:
        i2 = i2 + 1;
        r3 = "";
        goto label0;

     label8:
        if c4 != 103 goto label9;

        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        r3 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        z0 = 1;
        i2 = i2 + 1;
        goto label0;

     label9:
        if c4 != 117 goto label10;

        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        r3 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        z1 = 1;
        i2 = i2 + 1;
        goto label0;

     label10:
        if c4 != 37 goto label11;

        $r17 = new java.lang.StringBuilder;
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%");
        r3 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        i2 = i2 + 1;
        goto label0;

     label11:
        $r20 = new java.lang.StringBuilder;
        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);
        r3 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        goto label0;

     label12:
        $i8 = r0.<java.util.logging.FileHandler: int count>;
        if $i8 <= 1 goto label13;

        if z0 != 0 goto label13;

        $r23 = new java.lang.StringBuilder;
        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        r3 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

     label13:
        if i1 <= 0 goto label14;

        if z1 != 0 goto label14;

        $r27 = new java.lang.StringBuilder;
        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        r3 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

     label14:
        $i9 = virtualinvoke r3.<java.lang.String: int length()>();
        if $i9 <= 0 goto label16;

        if r2 != null goto label15;

        $r31 = new java.io.File;
        specialinvoke $r31.<java.io.File: void <init>(java.lang.String)>(r3);
        r2 = $r31;
        goto label16;

     label15:
        $r32 = new java.io.File;
        specialinvoke $r32.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, r3);
        r2 = $r32;

     label16:
        return r2;
    }

    private synchronized void rotate()
    {
        java.util.logging.FileHandler r0;
        java.util.logging.Level r1, $r2;
        int i0, $i1, $i2;
        java.io.File r3, r4, $r8;
        java.io.File[] $r5, $r6, $r7;
        boolean $z0, $z1;
        java.io.IOException $r9, r10;

        r0 := @this: java.util.logging.FileHandler;
        r1 = virtualinvoke r0.<java.util.logging.FileHandler: java.util.logging.Level getLevel()>();
        $r2 = <java.util.logging.Level: java.util.logging.Level OFF>;
        virtualinvoke r0.<java.util.logging.FileHandler: void setLevel(java.util.logging.Level)>($r2);
        specialinvoke r0.<java.util.logging.StreamHandler: void close()>();
        $i1 = r0.<java.util.logging.FileHandler: int count>;
        i0 = $i1 - 2;

     label0:
        if i0 < 0 goto label3;

        $r5 = r0.<java.util.logging.FileHandler: java.io.File[] files>;
        r3 = $r5[i0];
        $r6 = r0.<java.util.logging.FileHandler: java.io.File[] files>;
        $i2 = i0 + 1;
        r4 = $r6[$i2];
        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();
        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r4.<java.io.File: boolean exists()>();
        if $z1 == 0 goto label1;

        virtualinvoke r4.<java.io.File: boolean delete()>();

     label1:
        virtualinvoke r3.<java.io.File: boolean renameTo(java.io.File)>(r4);

     label2:
        i0 = i0 + -1;
        goto label0;

     label3:
        $r7 = r0.<java.util.logging.FileHandler: java.io.File[] files>;
        $r8 = $r7[0];
        specialinvoke r0.<java.util.logging.FileHandler: void open(java.io.File,boolean)>($r8, 0);

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;
        r10 = $r9;
        virtualinvoke r0.<java.util.logging.FileHandler: void reportError(java.lang.String,java.lang.Exception,int)>(null, r10, 4);

     label6:
        virtualinvoke r0.<java.util.logging.FileHandler: void setLevel(java.util.logging.Level)>(r1);
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public synchronized void publish(java.util.logging.LogRecord)
    {
        java.util.logging.FileHandler r0;
        java.util.logging.LogRecord r1;
        boolean $z0;
        int $i0, $i1, $i2;
        java.util.logging.FileHandler$MeteredStream $r2;
        java.util.logging.FileHandler$1 $r3;

        r0 := @this: java.util.logging.FileHandler;
        r1 := @parameter0: java.util.logging.LogRecord;
        $z0 = virtualinvoke r0.<java.util.logging.FileHandler: boolean isLoggable(java.util.logging.LogRecord)>(r1);
        if $z0 != 0 goto label0;

        return;

     label0:
        specialinvoke r0.<java.util.logging.StreamHandler: void publish(java.util.logging.LogRecord)>(r1);
        virtualinvoke r0.<java.util.logging.FileHandler: void flush()>();
        $i0 = r0.<java.util.logging.FileHandler: int limit>;
        if $i0 <= 0 goto label1;

        $r2 = r0.<java.util.logging.FileHandler: java.util.logging.FileHandler$MeteredStream meter>;
        $i1 = $r2.<java.util.logging.FileHandler$MeteredStream: int written>;
        $i2 = r0.<java.util.logging.FileHandler: int limit>;
        if $i1 < $i2 goto label1;

        $r3 = new java.util.logging.FileHandler$1;
        specialinvoke $r3.<java.util.logging.FileHandler$1: void <init>(java.util.logging.FileHandler)>(r0);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r3);

     label1:
        return;
    }

    public synchronized void close() throws java.lang.SecurityException
    {
        java.util.logging.FileHandler r0;
        java.lang.Exception r1, $r5;
        java.lang.Throwable r2, $r11;
        java.lang.String $r3, $r9, $r13;
        java.io.FileOutputStream $r4;
        java.util.HashMap $r6, r7, $r8;
        java.io.File $r12;

        r0 := @this: java.util.logging.FileHandler;
        specialinvoke r0.<java.util.logging.StreamHandler: void close()>();
        $r3 = r0.<java.util.logging.FileHandler: java.lang.String lockFileName>;
        if $r3 != null goto label0;

        return;

     label0:
        $r4 = r0.<java.util.logging.FileHandler: java.io.FileOutputStream lockStream>;
        virtualinvoke $r4.<java.io.FileOutputStream: void close()>();

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r1 = $r5;

     label3:
        $r6 = <java.util.logging.FileHandler: java.util.HashMap locks>;
        r7 = $r6;
        entermonitor $r6;

     label4:
        $r8 = <java.util.logging.FileHandler: java.util.HashMap locks>;
        $r9 = r0.<java.util.logging.FileHandler: java.lang.String lockFileName>;
        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r9);
        exitmonitor r7;

     label5:
        goto label9;

     label6:
        $r11 := @caughtexception;

     label7:
        r2 = $r11;
        exitmonitor r7;

     label8:
        throw r2;

     label9:
        $r12 = new java.io.File;
        $r13 = r0.<java.util.logging.FileHandler: java.lang.String lockFileName>;
        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>($r13);
        virtualinvoke $r12.<java.io.File: boolean delete()>();
        r0.<java.util.logging.FileHandler: java.lang.String lockFileName> = null;
        r0.<java.util.logging.FileHandler: java.io.FileOutputStream lockStream> = null;
        return;

        catch java.lang.Exception from label0 to label1 with label2;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private static native boolean isSetUID();

    static void access$100(java.util.logging.FileHandler)
    {
        java.util.logging.FileHandler r0;

        r0 := @parameter0: java.util.logging.FileHandler;
        specialinvoke r0.<java.util.logging.FileHandler: void rotate()>();
        return;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        <java.util.logging.FileHandler: java.util.HashMap locks> = $r0;
        return;
    }
}
