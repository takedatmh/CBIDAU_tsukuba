public final class sun.text.normalizer.VersionInfo extends java.lang.Object
{
    private int m_version_;
    private static final java.util.HashMap MAP_;
    private static final java.lang.String INVALID_VERSION_NUMBER_;

    public static sun.text.normalizer.VersionInfo getInstance(java.lang.String)
    {
        java.lang.String r0, $r11;
        int i0, i1, i2, $i4, $i7, $i8, $i10, $i11, i12, $i13, $i14, $i15, $i16, $i17, $i18;
        int[] r1, $r2;
        char c3, c5;
        java.lang.IllegalArgumentException $r3, $r6, $r12;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        sun.text.normalizer.VersionInfo $r13;

        r0 := @parameter0: java.lang.String;
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        $r2 = newarray (int)[4];
        $r2[0] = 0;
        $r2[1] = 0;
        $r2[2] = 0;
        $r2[3] = 0;
        r1 = $r2;
        i1 = 0;
        i2 = 0;

     label0:
        if i1 >= 4 goto label5;

        if i2 >= i0 goto label5;

        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        if c3 != 46 goto label1;

        i1 = i1 + 1;
        goto label4;

     label1:
        $i4 = c3 - 48;
        c5 = (char) $i4;
        if c5 < 0 goto label2;

        if c5 <= 9 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid version number: Version number may be negative or greater than 255");
        throw $r3;

     label3:
        $i7 = r1[i1];
        $i8 = $i7 * 10;
        r1[i1] = $i8;
        $i10 = r1[i1];
        $i11 = $i10 + c5;
        r1[i1] = $i11;

     label4:
        i2 = i2 + 1;
        goto label0;

     label5:
        if i2 == i0 goto label6;

        $r6 = new java.lang.IllegalArgumentException;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid version number: String \'");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exceeds version format");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);
        throw $r6;

     label6:
        i12 = 0;

     label7:
        if i12 >= 4 goto label10;

        $i13 = r1[i12];
        if $i13 < 0 goto label8;

        $i14 = r1[i12];
        if $i14 <= 255 goto label9;

     label8:
        $r12 = new java.lang.IllegalArgumentException;
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid version number: Version number may be negative or greater than 255");
        throw $r12;

     label9:
        i12 = i12 + 1;
        goto label7;

     label10:
        $i15 = r1[0];
        $i16 = r1[1];
        $i17 = r1[2];
        $i18 = r1[3];
        $r13 = staticinvoke <sun.text.normalizer.VersionInfo: sun.text.normalizer.VersionInfo getInstance(int,int,int,int)>($i15, $i16, $i17, $i18);
        return $r13;
    }

    public static sun.text.normalizer.VersionInfo getInstance(int, int, int, int)
    {
        int i0, i1, i2, i3, i4;
        java.lang.Integer r0;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;
        java.util.HashMap $r3, $r5;
        sun.text.normalizer.VersionInfo $r4, $r7;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        if i0 < 0 goto label0;

        if i0 > 255 goto label0;

        if i1 < 0 goto label0;

        if i1 > 255 goto label0;

        if i2 < 0 goto label0;

        if i2 > 255 goto label0;

        if i3 < 0 goto label0;

        if i3 <= 255 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid version number: Version number may be negative or greater than 255");
        throw $r2;

     label1:
        i4 = staticinvoke <sun.text.normalizer.VersionInfo: int getInt(int,int,int,int)>(i0, i1, i2, i3);
        r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);
        $r3 = <sun.text.normalizer.VersionInfo: java.util.HashMap MAP_>;
        r1 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);
        if r1 != null goto label2;

        $r4 = new sun.text.normalizer.VersionInfo;
        specialinvoke $r4.<sun.text.normalizer.VersionInfo: void <init>(int)>(i4);
        r1 = $r4;
        $r5 = <sun.text.normalizer.VersionInfo: java.util.HashMap MAP_>;
        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

     label2:
        $r7 = (sun.text.normalizer.VersionInfo) r1;
        return $r7;
    }

    public int compareTo(sun.text.normalizer.VersionInfo)
    {
        sun.text.normalizer.VersionInfo r0, r1;
        int $i0, $i1, $i2;

        r0 := @this: sun.text.normalizer.VersionInfo;
        r1 := @parameter0: sun.text.normalizer.VersionInfo;
        $i0 = r0.<sun.text.normalizer.VersionInfo: int m_version_>;
        $i1 = r1.<sun.text.normalizer.VersionInfo: int m_version_>;
        $i2 = $i0 - $i1;
        return $i2;
    }

    private void <init>(int)
    {
        sun.text.normalizer.VersionInfo r0;
        int i0;

        r0 := @this: sun.text.normalizer.VersionInfo;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.text.normalizer.VersionInfo: int m_version_> = i0;
        return;
    }

    private static int getInt(int, int, int, int)
    {
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        $i4 = i0 << 24;
        $i5 = i1 << 16;
        $i6 = $i4 | $i5;
        $i7 = i2 << 8;
        $i8 = $i6 | $i7;
        $i9 = $i8 | i3;
        return $i9;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        <sun.text.normalizer.VersionInfo: java.util.HashMap MAP_> = $r0;
        return;
    }
}
