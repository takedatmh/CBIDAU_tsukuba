public class sun.text.normalizer.RuleCharacterIterator extends java.lang.Object
{
    private java.lang.String text;
    private java.text.ParsePosition pos;
    private sun.text.normalizer.SymbolTable sym;
    private char[] buf;
    private int bufPos;
    private boolean isEscaped;
    public static final int DONE;
    public static final int PARSE_VARIABLES;
    public static final int PARSE_ESCAPES;
    public static final int SKIP_WHITESPACE;

    public void <init>(java.lang.String, sun.text.normalizer.SymbolTable, java.text.ParsePosition)
    {
        sun.text.normalizer.RuleCharacterIterator r0;
        java.lang.String r1;
        sun.text.normalizer.SymbolTable r2;
        java.text.ParsePosition r3;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: sun.text.normalizer.RuleCharacterIterator;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: sun.text.normalizer.SymbolTable;
        r3 := @parameter2: java.text.ParsePosition;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r1 == null goto label0;

        $i0 = virtualinvoke r3.<java.text.ParsePosition: int getIndex()>();
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i0 <= $i1 goto label1;

     label0:
        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r4;

     label1:
        r0.<sun.text.normalizer.RuleCharacterIterator: java.lang.String text> = r1;
        r0.<sun.text.normalizer.RuleCharacterIterator: sun.text.normalizer.SymbolTable sym> = r2;
        r0.<sun.text.normalizer.RuleCharacterIterator: java.text.ParsePosition pos> = r3;
        r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf> = null;
        return;
    }

    public boolean atEnd()
    {
        sun.text.normalizer.RuleCharacterIterator r0;
        char[] $r1;
        java.text.ParsePosition $r2;
        int $i0, $i1;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: sun.text.normalizer.RuleCharacterIterator;
        $r1 = r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf>;
        if $r1 != null goto label0;

        $r2 = r0.<sun.text.normalizer.RuleCharacterIterator: java.text.ParsePosition pos>;
        $i0 = virtualinvoke $r2.<java.text.ParsePosition: int getIndex()>();
        $r3 = r0.<sun.text.normalizer.RuleCharacterIterator: java.lang.String text>;
        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();
        if $i0 != $i1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public int next(int)
    {
        sun.text.normalizer.RuleCharacterIterator r0;
        int i0, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        byte b1;
        java.lang.String r1, $r5, $r7, $r15, $r19;
        char[] $r2, $r9, $r10, $r16;
        sun.text.normalizer.SymbolTable $r3, $r4, $r8;
        java.text.ParsePosition $r6;
        java.lang.IllegalArgumentException $r11, $r20;
        java.lang.StringBuilder $r12, $r13, $r14;
        boolean $z0;
        int[] $r17, r18;

        r0 := @this: sun.text.normalizer.RuleCharacterIterator;
        i0 := @parameter0: int;
        b1 = -1;
        r0.<sun.text.normalizer.RuleCharacterIterator: boolean isEscaped> = 0;

     label0:
        i2 = specialinvoke r0.<sun.text.normalizer.RuleCharacterIterator: int _current()>();
        $i3 = staticinvoke <sun.text.normalizer.UTF16: int getCharCount(int)>(i2);
        specialinvoke r0.<sun.text.normalizer.RuleCharacterIterator: void _advance(int)>($i3);
        if i2 != 36 goto label3;

        $r2 = r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf>;
        if $r2 != null goto label3;

        $i4 = i0 & 1;
        if $i4 == 0 goto label3;

        $r3 = r0.<sun.text.normalizer.RuleCharacterIterator: sun.text.normalizer.SymbolTable sym>;
        if $r3 == null goto label3;

        $r4 = r0.<sun.text.normalizer.RuleCharacterIterator: sun.text.normalizer.SymbolTable sym>;
        $r5 = r0.<sun.text.normalizer.RuleCharacterIterator: java.lang.String text>;
        $r6 = r0.<sun.text.normalizer.RuleCharacterIterator: java.text.ParsePosition pos>;
        $r7 = r0.<sun.text.normalizer.RuleCharacterIterator: java.lang.String text>;
        $i5 = virtualinvoke $r7.<java.lang.String: int length()>();
        r1 = interfaceinvoke $r4.<sun.text.normalizer.SymbolTable: java.lang.String parseReference(java.lang.String,java.text.ParsePosition,int)>($r5, $r6, $i5);
        if r1 != null goto label1;

        goto label6;

     label1:
        r0.<sun.text.normalizer.RuleCharacterIterator: int bufPos> = 0;
        $r8 = r0.<sun.text.normalizer.RuleCharacterIterator: sun.text.normalizer.SymbolTable sym>;
        $r9 = interfaceinvoke $r8.<sun.text.normalizer.SymbolTable: char[] lookup(java.lang.String)>(r1);
        r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf> = $r9;
        $r10 = r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf>;
        if $r10 != null goto label2;

        $r11 = new java.lang.IllegalArgumentException;
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Undefined variable: ");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);
        throw $r11;

     label2:
        $r16 = r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf>;
        $i6 = lengthof $r16;
        if $i6 != 0 goto label0;

        r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf> = null;
        goto label0;

     label3:
        $i7 = i0 & 4;
        if $i7 == 0 goto label4;

        $z0 = staticinvoke <sun.text.normalizer.UCharacterProperty: boolean isRuleWhiteSpace(int)>(i2);
        if $z0 == 0 goto label4;

        goto label0;

     label4:
        if i2 != 92 goto label6;

        $i8 = i0 & 2;
        if $i8 == 0 goto label6;

        $r17 = newarray (int)[1];
        $r17[0] = 0;
        r18 = $r17;
        $r19 = virtualinvoke r0.<sun.text.normalizer.RuleCharacterIterator: java.lang.String lookahead()>();
        i2 = staticinvoke <sun.text.normalizer.Utility: int unescapeAt(java.lang.String,int[])>($r19, r18);
        $i9 = r18[0];
        virtualinvoke r0.<sun.text.normalizer.RuleCharacterIterator: void jumpahead(int)>($i9);
        r0.<sun.text.normalizer.RuleCharacterIterator: boolean isEscaped> = 1;
        if i2 >= 0 goto label5;

        $r20 = new java.lang.IllegalArgumentException;
        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid escape");
        throw $r20;

     label5:
        goto label6;

     label6:
        return i2;
    }

    public boolean isEscaped()
    {
        sun.text.normalizer.RuleCharacterIterator r0;
        boolean $z0;

        r0 := @this: sun.text.normalizer.RuleCharacterIterator;
        $z0 = r0.<sun.text.normalizer.RuleCharacterIterator: boolean isEscaped>;
        return $z0;
    }

    public boolean inVariable()
    {
        sun.text.normalizer.RuleCharacterIterator r0;
        char[] $r1;
        boolean $z0;

        r0 := @this: sun.text.normalizer.RuleCharacterIterator;
        $r1 = r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf>;
        if $r1 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.Object getPos(java.lang.Object)
    {
        sun.text.normalizer.RuleCharacterIterator r0;
        java.lang.Object r1, $r10;
        java.lang.Object[] r2, $r4, $r8;
        int[] r3, $r6, $r11;
        char[] $r5, $r9;
        java.text.ParsePosition $r7, $r12;
        int $i0, $i1, $i2, $i3;

        r0 := @this: sun.text.normalizer.RuleCharacterIterator;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        $r4 = newarray (java.lang.Object)[2];
        $r5 = r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf>;
        $r4[0] = $r5;
        $r6 = newarray (int)[2];
        $r7 = r0.<sun.text.normalizer.RuleCharacterIterator: java.text.ParsePosition pos>;
        $i0 = virtualinvoke $r7.<java.text.ParsePosition: int getIndex()>();
        $r6[0] = $i0;
        $i1 = r0.<sun.text.normalizer.RuleCharacterIterator: int bufPos>;
        $r6[1] = $i1;
        $r4[1] = $r6;
        return $r4;

     label0:
        $r8 = (java.lang.Object[]) r1;
        r2 = (java.lang.Object[]) $r8;
        $r9 = r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf>;
        r2[0] = $r9;
        $r10 = r2[1];
        $r11 = (int[]) $r10;
        r3 = (int[]) $r11;
        $r12 = r0.<sun.text.normalizer.RuleCharacterIterator: java.text.ParsePosition pos>;
        $i2 = virtualinvoke $r12.<java.text.ParsePosition: int getIndex()>();
        r3[0] = $i2;
        $i3 = r0.<sun.text.normalizer.RuleCharacterIterator: int bufPos>;
        r3[1] = $i3;
        return r1;
    }

    public void setPos(java.lang.Object)
    {
        sun.text.normalizer.RuleCharacterIterator r0;
        java.lang.Object r1, $r5, $r8;
        java.lang.Object[] r2, $r4;
        int[] r3, $r9;
        char[] $r6, $r7;
        java.text.ParsePosition $r10;
        int $i0, $i1;

        r0 := @this: sun.text.normalizer.RuleCharacterIterator;
        r1 := @parameter0: java.lang.Object;
        $r4 = (java.lang.Object[]) r1;
        r2 = (java.lang.Object[]) $r4;
        $r5 = r2[0];
        $r6 = (char[]) $r5;
        $r7 = (char[]) $r6;
        r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf> = $r7;
        $r8 = r2[1];
        $r9 = (int[]) $r8;
        r3 = (int[]) $r9;
        $r10 = r0.<sun.text.normalizer.RuleCharacterIterator: java.text.ParsePosition pos>;
        $i0 = r3[0];
        virtualinvoke $r10.<java.text.ParsePosition: void setIndex(int)>($i0);
        $i1 = r3[1];
        r0.<sun.text.normalizer.RuleCharacterIterator: int bufPos> = $i1;
        return;
    }

    public void skipIgnored(int)
    {
        sun.text.normalizer.RuleCharacterIterator r0;
        int i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @this: sun.text.normalizer.RuleCharacterIterator;
        i0 := @parameter0: int;
        $i2 = i0 & 4;
        if $i2 == 0 goto label2;

     label0:
        i1 = specialinvoke r0.<sun.text.normalizer.RuleCharacterIterator: int _current()>();
        $z0 = staticinvoke <sun.text.normalizer.UCharacterProperty: boolean isRuleWhiteSpace(int)>(i1);
        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $i3 = staticinvoke <sun.text.normalizer.UTF16: int getCharCount(int)>(i1);
        specialinvoke r0.<sun.text.normalizer.RuleCharacterIterator: void _advance(int)>($i3);
        goto label0;

     label2:
        return;
    }

    public java.lang.String lookahead()
    {
        sun.text.normalizer.RuleCharacterIterator r0;
        char[] $r1, $r3, $r4;
        java.lang.String $r2, $r5, $r7;
        int $i0, $i1, $i2, $i3, $i4;
        java.text.ParsePosition $r6;

        r0 := @this: sun.text.normalizer.RuleCharacterIterator;
        $r1 = r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf>;
        if $r1 == null goto label0;

        $r2 = new java.lang.String;
        $r3 = r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf>;
        $i0 = r0.<sun.text.normalizer.RuleCharacterIterator: int bufPos>;
        $r4 = r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf>;
        $i1 = lengthof $r4;
        $i2 = r0.<sun.text.normalizer.RuleCharacterIterator: int bufPos>;
        $i3 = $i1 - $i2;
        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r3, $i0, $i3);
        return $r2;

     label0:
        $r5 = r0.<sun.text.normalizer.RuleCharacterIterator: java.lang.String text>;
        $r6 = r0.<sun.text.normalizer.RuleCharacterIterator: java.text.ParsePosition pos>;
        $i4 = virtualinvoke $r6.<java.text.ParsePosition: int getIndex()>();
        $r7 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>($i4);
        return $r7;
    }

    public void jumpahead(int)
    {
        sun.text.normalizer.RuleCharacterIterator r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.IllegalArgumentException $r1, $r5, $r10;
        char[] $r2, $r4, $r6;
        java.text.ParsePosition $r7, $r8;
        java.lang.String $r9;

        r0 := @this: sun.text.normalizer.RuleCharacterIterator;
        i0 := @parameter0: int;
        if i0 >= 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r1;

     label0:
        $r2 = r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf>;
        if $r2 == null goto label2;

        $i2 = r0.<sun.text.normalizer.RuleCharacterIterator: int bufPos>;
        $i3 = $i2 + i0;
        r0.<sun.text.normalizer.RuleCharacterIterator: int bufPos> = $i3;
        $i4 = r0.<sun.text.normalizer.RuleCharacterIterator: int bufPos>;
        $r4 = r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf>;
        $i5 = lengthof $r4;
        if $i4 <= $i5 goto label1;

        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r5;

     label1:
        $i6 = r0.<sun.text.normalizer.RuleCharacterIterator: int bufPos>;
        $r6 = r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf>;
        $i7 = lengthof $r6;
        if $i6 != $i7 goto label3;

        r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf> = null;
        goto label3;

     label2:
        $r7 = r0.<sun.text.normalizer.RuleCharacterIterator: java.text.ParsePosition pos>;
        $i8 = virtualinvoke $r7.<java.text.ParsePosition: int getIndex()>();
        i1 = $i8 + i0;
        $r8 = r0.<sun.text.normalizer.RuleCharacterIterator: java.text.ParsePosition pos>;
        virtualinvoke $r8.<java.text.ParsePosition: void setIndex(int)>(i1);
        $r9 = r0.<sun.text.normalizer.RuleCharacterIterator: java.lang.String text>;
        $i9 = virtualinvoke $r9.<java.lang.String: int length()>();
        if i1 <= $i9 goto label3;

        $r10 = new java.lang.IllegalArgumentException;
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r10;

     label3:
        return;
    }

    private int _current()
    {
        sun.text.normalizer.RuleCharacterIterator r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        char[] $r1, $r2, $r3;
        java.text.ParsePosition $r4;
        java.lang.String $r5, $r6;

        r0 := @this: sun.text.normalizer.RuleCharacterIterator;
        $r1 = r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf>;
        if $r1 == null goto label0;

        $r2 = r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf>;
        $r3 = r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf>;
        $i1 = lengthof $r3;
        $i2 = r0.<sun.text.normalizer.RuleCharacterIterator: int bufPos>;
        $i3 = staticinvoke <sun.text.normalizer.UTF16: int charAt(char[],int,int,int)>($r2, 0, $i1, $i2);
        return $i3;

     label0:
        $r4 = r0.<sun.text.normalizer.RuleCharacterIterator: java.text.ParsePosition pos>;
        i0 = virtualinvoke $r4.<java.text.ParsePosition: int getIndex()>();
        $r5 = r0.<sun.text.normalizer.RuleCharacterIterator: java.lang.String text>;
        $i4 = virtualinvoke $r5.<java.lang.String: int length()>();
        if i0 >= $i4 goto label1;

        $r6 = r0.<sun.text.normalizer.RuleCharacterIterator: java.lang.String text>;
        $i5 = staticinvoke <sun.text.normalizer.UTF16: int charAt(java.lang.String,int)>($r6, i0);
        goto label2;

     label1:
        $i5 = -1;

     label2:
        return $i5;
    }

    private void _advance(int)
    {
        sun.text.normalizer.RuleCharacterIterator r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        char[] $r1, $r3;
        java.text.ParsePosition $r4, $r5, $r6, $r8;
        java.lang.String $r7, $r9;

        r0 := @this: sun.text.normalizer.RuleCharacterIterator;
        i0 := @parameter0: int;
        $r1 = r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf>;
        if $r1 == null goto label0;

        $i1 = r0.<sun.text.normalizer.RuleCharacterIterator: int bufPos>;
        $i2 = $i1 + i0;
        r0.<sun.text.normalizer.RuleCharacterIterator: int bufPos> = $i2;
        $i3 = r0.<sun.text.normalizer.RuleCharacterIterator: int bufPos>;
        $r3 = r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf>;
        $i4 = lengthof $r3;
        if $i3 != $i4 goto label1;

        r0.<sun.text.normalizer.RuleCharacterIterator: char[] buf> = null;
        goto label1;

     label0:
        $r4 = r0.<sun.text.normalizer.RuleCharacterIterator: java.text.ParsePosition pos>;
        $r5 = r0.<sun.text.normalizer.RuleCharacterIterator: java.text.ParsePosition pos>;
        $i5 = virtualinvoke $r5.<java.text.ParsePosition: int getIndex()>();
        $i6 = $i5 + i0;
        virtualinvoke $r4.<java.text.ParsePosition: void setIndex(int)>($i6);
        $r6 = r0.<sun.text.normalizer.RuleCharacterIterator: java.text.ParsePosition pos>;
        $i7 = virtualinvoke $r6.<java.text.ParsePosition: int getIndex()>();
        $r7 = r0.<sun.text.normalizer.RuleCharacterIterator: java.lang.String text>;
        $i8 = virtualinvoke $r7.<java.lang.String: int length()>();
        if $i7 <= $i8 goto label1;

        $r8 = r0.<sun.text.normalizer.RuleCharacterIterator: java.text.ParsePosition pos>;
        $r9 = r0.<sun.text.normalizer.RuleCharacterIterator: java.lang.String text>;
        $i9 = virtualinvoke $r9.<java.lang.String: int length()>();
        virtualinvoke $r8.<java.text.ParsePosition: void setIndex(int)>($i9);

     label1:
        return;
    }
}
