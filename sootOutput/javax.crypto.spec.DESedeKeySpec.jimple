public class javax.crypto.spec.DESedeKeySpec extends java.lang.Object implements java.security.spec.KeySpec
{
    public static final int DES_EDE_KEY_LEN;
    private byte[] key;

    public void <init>(byte[]) throws java.security.InvalidKeyException
    {
        javax.crypto.spec.DESedeKeySpec r0;
        byte[] r1;

        r0 := @this: javax.crypto.spec.DESedeKeySpec;
        r1 := @parameter0: byte[];
        specialinvoke r0.<javax.crypto.spec.DESedeKeySpec: void <init>(byte[],int)>(r1, 0);
        return;
    }

    public void <init>(byte[], int) throws java.security.InvalidKeyException
    {
        javax.crypto.spec.DESedeKeySpec r0;
        byte[] r1, $r3, $r4;
        int i0, $i1, $i2;
        java.security.InvalidKeyException $r2;

        r0 := @this: javax.crypto.spec.DESedeKeySpec;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $i1 = lengthof r1;
        $i2 = $i1 - i0;
        if $i2 >= 24 goto label0;

        $r2 = new java.security.InvalidKeyException;
        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Wrong key size");
        throw $r2;

     label0:
        $r3 = newarray (byte)[24];
        r0.<javax.crypto.spec.DESedeKeySpec: byte[] key> = $r3;
        $r4 = r0.<javax.crypto.spec.DESedeKeySpec: byte[] key>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r4, 0, 24);
        return;
    }

    public byte[] getKey()
    {
        javax.crypto.spec.DESedeKeySpec r0;
        byte[] $r1, $r3, $r4;
        java.lang.Object $r2;

        r0 := @this: javax.crypto.spec.DESedeKeySpec;
        $r1 = r0.<javax.crypto.spec.DESedeKeySpec: byte[] key>;
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (byte[]) $r2;
        $r4 = (byte[]) $r3;
        return $r4;
    }

    public static boolean isParityAdjusted(byte[], int) throws java.security.InvalidKeyException
    {
        byte[] r0;
        int i0, $i1, $i2, $i3, $i4;
        java.security.InvalidKeyException $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        $i1 = lengthof r0;
        $i2 = $i1 - i0;
        if $i2 >= 24 goto label0;

        $r1 = new java.security.InvalidKeyException;
        specialinvoke $r1.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Wrong key size");
        throw $r1;

     label0:
        $z0 = staticinvoke <javax.crypto.spec.DESKeySpec: boolean isParityAdjusted(byte[],int)>(r0, i0);
        if $z0 == 0 goto label1;

        $i3 = i0 + 8;
        $z1 = staticinvoke <javax.crypto.spec.DESKeySpec: boolean isParityAdjusted(byte[],int)>(r0, $i3);
        if $z1 == 0 goto label1;

        $i4 = i0 + 16;
        $z2 = staticinvoke <javax.crypto.spec.DESKeySpec: boolean isParityAdjusted(byte[],int)>(r0, $i4);
        if $z2 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }
}
