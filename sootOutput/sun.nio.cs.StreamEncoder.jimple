public class sun.nio.cs.StreamEncoder extends java.io.Writer
{
    private static final int DEFAULT_BYTE_BUFFER_SIZE;
    private volatile boolean isOpen;
    private java.nio.charset.Charset cs;
    private java.nio.charset.CharsetEncoder encoder;
    private java.nio.ByteBuffer bb;
    private final java.io.OutputStream out;
    private java.nio.channels.WritableByteChannel ch;
    private boolean haveLeftoverChar;
    private char leftoverChar;
    private java.nio.CharBuffer lcb;
    static final boolean $assertionsDisabled;

    private void ensureOpen() throws java.io.IOException
    {
        sun.nio.cs.StreamEncoder r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: sun.nio.cs.StreamEncoder;
        $z0 = r0.<sun.nio.cs.StreamEncoder: boolean isOpen>;
        if $z0 != 0 goto label0;

        $r1 = new java.io.IOException;
        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Stream closed");
        throw $r1;

     label0:
        return;
    }

    public static sun.nio.cs.StreamEncoder forOutputStreamWriter(java.io.OutputStream, java.lang.Object, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream r0;
        java.lang.Object r1;
        java.lang.String r2, r3;
        java.nio.charset.IllegalCharsetNameException r4, $r8;
        java.nio.charset.Charset $r5, $r7;
        boolean $z0;
        sun.nio.cs.StreamEncoder $r6;
        java.io.UnsupportedEncodingException $r9;

        r0 := @parameter0: java.io.OutputStream;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.lang.String;
        r3 = r2;
        if r3 != null goto label0;

        $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
        r3 = virtualinvoke $r5.<java.nio.charset.Charset: java.lang.String name()>();

     label0:
        $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>(r3);
        if $z0 == 0 goto label2;

        $r6 = new sun.nio.cs.StreamEncoder;
        $r7 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r3);
        specialinvoke $r6.<sun.nio.cs.StreamEncoder: void <init>(java.io.OutputStream,java.lang.Object,java.nio.charset.Charset)>(r0, r1, $r7);

     label1:
        return $r6;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;
        r4 = $r8;

     label4:
        $r9 = new java.io.UnsupportedEncodingException;
        specialinvoke $r9.<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>(r3);
        throw $r9;

        catch java.nio.charset.IllegalCharsetNameException from label0 to label1 with label3;
    }

    public static sun.nio.cs.StreamEncoder forOutputStreamWriter(java.io.OutputStream, java.lang.Object, java.nio.charset.Charset)
    {
        java.io.OutputStream r0;
        java.lang.Object r1;
        java.nio.charset.Charset r2;
        sun.nio.cs.StreamEncoder $r3;

        r0 := @parameter0: java.io.OutputStream;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.nio.charset.Charset;
        $r3 = new sun.nio.cs.StreamEncoder;
        specialinvoke $r3.<sun.nio.cs.StreamEncoder: void <init>(java.io.OutputStream,java.lang.Object,java.nio.charset.Charset)>(r0, r1, r2);
        return $r3;
    }

    public static sun.nio.cs.StreamEncoder forOutputStreamWriter(java.io.OutputStream, java.lang.Object, java.nio.charset.CharsetEncoder)
    {
        java.io.OutputStream r0;
        java.lang.Object r1;
        java.nio.charset.CharsetEncoder r2;
        sun.nio.cs.StreamEncoder $r3;

        r0 := @parameter0: java.io.OutputStream;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.nio.charset.CharsetEncoder;
        $r3 = new sun.nio.cs.StreamEncoder;
        specialinvoke $r3.<sun.nio.cs.StreamEncoder: void <init>(java.io.OutputStream,java.lang.Object,java.nio.charset.CharsetEncoder)>(r0, r1, r2);
        return $r3;
    }

    public static sun.nio.cs.StreamEncoder forEncoder(java.nio.channels.WritableByteChannel, java.nio.charset.CharsetEncoder, int)
    {
        java.nio.channels.WritableByteChannel r0;
        java.nio.charset.CharsetEncoder r1;
        int i0;
        sun.nio.cs.StreamEncoder $r2;

        r0 := @parameter0: java.nio.channels.WritableByteChannel;
        r1 := @parameter1: java.nio.charset.CharsetEncoder;
        i0 := @parameter2: int;
        $r2 = new sun.nio.cs.StreamEncoder;
        specialinvoke $r2.<sun.nio.cs.StreamEncoder: void <init>(java.nio.channels.WritableByteChannel,java.nio.charset.CharsetEncoder,int)>(r0, r1, i0);
        return $r2;
    }

    public java.lang.String getEncoding()
    {
        sun.nio.cs.StreamEncoder r0;
        boolean $z0;
        java.lang.String $r1;

        r0 := @this: sun.nio.cs.StreamEncoder;
        $z0 = specialinvoke r0.<sun.nio.cs.StreamEncoder: boolean isOpen()>();
        if $z0 == 0 goto label0;

        $r1 = virtualinvoke r0.<sun.nio.cs.StreamEncoder: java.lang.String encodingName()>();
        return $r1;

     label0:
        return null;
    }

    public void flushBuffer() throws java.io.IOException
    {
        sun.nio.cs.StreamEncoder r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        boolean $z0;
        java.io.IOException $r4;

        r0 := @this: sun.nio.cs.StreamEncoder;
        $r3 = r0.<sun.nio.cs.StreamEncoder: java.lang.Object lock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z0 = specialinvoke r0.<sun.nio.cs.StreamEncoder: boolean isOpen()>();
        if $z0 == 0 goto label1;

        virtualinvoke r0.<sun.nio.cs.StreamEncoder: void implFlushBuffer()>();
        goto label2;

     label1:
        $r4 = new java.io.IOException;
        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Stream closed");
        throw $r4;

     label2:
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r5 := @caughtexception;

     label5:
        r2 = $r5;
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void write(int) throws java.io.IOException
    {
        sun.nio.cs.StreamEncoder r0;
        int i0;
        char[] r1;
        char $c1;

        r0 := @this: sun.nio.cs.StreamEncoder;
        i0 := @parameter0: int;
        r1 = newarray (char)[1];
        $c1 = (char) i0;
        r1[0] = $c1;
        virtualinvoke r0.<sun.nio.cs.StreamEncoder: void write(char[],int,int)>(r1, 0, 1);
        return;
    }

    public void write(char[], int, int) throws java.io.IOException
    {
        sun.nio.cs.StreamEncoder r0;
        char[] r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;
        java.lang.IndexOutOfBoundsException $r5;

        r0 := @this: sun.nio.cs.StreamEncoder;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r4 = r0.<sun.nio.cs.StreamEncoder: java.lang.Object lock>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        specialinvoke r0.<sun.nio.cs.StreamEncoder: void ensureOpen()>();
        if i0 < 0 goto label1;

        $i2 = lengthof r1;
        if i0 > $i2 goto label1;

        if i1 < 0 goto label1;

        $i3 = i0 + i1;
        $i4 = lengthof r1;
        if $i3 > $i4 goto label1;

        $i5 = i0 + i1;
        if $i5 >= 0 goto label2;

     label1:
        $r5 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r5;

     label2:
        if i1 != 0 goto label4;

        exitmonitor r2;

     label3:
        return;

     label4:
        virtualinvoke r0.<sun.nio.cs.StreamEncoder: void implWrite(char[],int,int)>(r1, i0, i1);
        exitmonitor r2;

     label5:
        goto label9;

     label6:
        $r6 := @caughtexception;

     label7:
        r3 = $r6;
        exitmonitor r2;

     label8:
        throw r3;

     label9:
        return;

        catch java.lang.Throwable from label0 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void write(java.lang.String, int, int) throws java.io.IOException
    {
        sun.nio.cs.StreamEncoder r0;
        java.lang.String r1;
        int i0, i1, $i2;
        char[] r2;
        java.lang.IndexOutOfBoundsException $r3;

        r0 := @this: sun.nio.cs.StreamEncoder;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i1 >= 0 goto label0;

        $r3 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r3;

     label0:
        r2 = newarray (char)[i1];
        $i2 = i0 + i1;
        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(i0, $i2, r2, 0);
        virtualinvoke r0.<sun.nio.cs.StreamEncoder: void write(char[],int,int)>(r2, 0, i1);
        return;
    }

    public void flush() throws java.io.IOException
    {
        sun.nio.cs.StreamEncoder r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: sun.nio.cs.StreamEncoder;
        $r3 = r0.<sun.nio.cs.StreamEncoder: java.lang.Object lock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        specialinvoke r0.<sun.nio.cs.StreamEncoder: void ensureOpen()>();
        virtualinvoke r0.<sun.nio.cs.StreamEncoder: void implFlush()>();
        exitmonitor r1;

     label1:
        goto label5;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;
        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void close() throws java.io.IOException
    {
        sun.nio.cs.StreamEncoder r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: sun.nio.cs.StreamEncoder;
        $r3 = r0.<sun.nio.cs.StreamEncoder: java.lang.Object lock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z0 = r0.<sun.nio.cs.StreamEncoder: boolean isOpen>;
        if $z0 != 0 goto label2;

        exitmonitor r1;

     label1:
        return;

     label2:
        virtualinvoke r0.<sun.nio.cs.StreamEncoder: void implClose()>();
        r0.<sun.nio.cs.StreamEncoder: boolean isOpen> = 0;
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        r2 = $r4;
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean isOpen()
    {
        sun.nio.cs.StreamEncoder r0;
        boolean $z0;

        r0 := @this: sun.nio.cs.StreamEncoder;
        $z0 = r0.<sun.nio.cs.StreamEncoder: boolean isOpen>;
        return $z0;
    }

    private void <init>(java.io.OutputStream, java.lang.Object, java.nio.charset.Charset)
    {
        sun.nio.cs.StreamEncoder r0;
        java.io.OutputStream r1;
        java.lang.Object r2;
        java.nio.charset.Charset r3;
        java.nio.charset.CodingErrorAction $r4, $r7;
        java.nio.charset.CharsetEncoder $r5, $r6, $r8;

        r0 := @this: sun.nio.cs.StreamEncoder;
        r1 := @parameter0: java.io.OutputStream;
        r2 := @parameter1: java.lang.Object;
        r3 := @parameter2: java.nio.charset.Charset;
        $r5 = virtualinvoke r3.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();
        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
        $r6 = virtualinvoke $r5.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r4);
        $r7 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
        $r8 = virtualinvoke $r6.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r7);
        specialinvoke r0.<sun.nio.cs.StreamEncoder: void <init>(java.io.OutputStream,java.lang.Object,java.nio.charset.CharsetEncoder)>(r1, r2, $r8);
        return;
    }

    private void <init>(java.io.OutputStream, java.lang.Object, java.nio.charset.CharsetEncoder)
    {
        sun.nio.cs.StreamEncoder r0;
        java.io.OutputStream r1;
        java.lang.Object r2;
        java.nio.charset.CharsetEncoder r3;
        java.nio.charset.Charset $r4;
        java.nio.channels.WritableByteChannel $r5;
        java.nio.ByteBuffer $r6;

        r0 := @this: sun.nio.cs.StreamEncoder;
        r1 := @parameter0: java.io.OutputStream;
        r2 := @parameter1: java.lang.Object;
        r3 := @parameter2: java.nio.charset.CharsetEncoder;
        specialinvoke r0.<java.io.Writer: void <init>(java.lang.Object)>(r2);
        r0.<sun.nio.cs.StreamEncoder: boolean isOpen> = 1;
        r0.<sun.nio.cs.StreamEncoder: boolean haveLeftoverChar> = 0;
        r0.<sun.nio.cs.StreamEncoder: java.nio.CharBuffer lcb> = null;
        r0.<sun.nio.cs.StreamEncoder: java.io.OutputStream out> = r1;
        r0.<sun.nio.cs.StreamEncoder: java.nio.channels.WritableByteChannel ch> = null;
        $r4 = virtualinvoke r3.<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()>();
        r0.<sun.nio.cs.StreamEncoder: java.nio.charset.Charset cs> = $r4;
        r0.<sun.nio.cs.StreamEncoder: java.nio.charset.CharsetEncoder encoder> = r3;
        $r5 = r0.<sun.nio.cs.StreamEncoder: java.nio.channels.WritableByteChannel ch>;
        if $r5 != null goto label0;

        $r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8192);
        r0.<sun.nio.cs.StreamEncoder: java.nio.ByteBuffer bb> = $r6;

     label0:
        return;
    }

    private void <init>(java.nio.channels.WritableByteChannel, java.nio.charset.CharsetEncoder, int)
    {
        sun.nio.cs.StreamEncoder r0;
        java.nio.channels.WritableByteChannel r1;
        java.nio.charset.CharsetEncoder r2;
        int i0, $i1;
        java.nio.charset.Charset $r3;
        java.nio.ByteBuffer $r5;

        r0 := @this: sun.nio.cs.StreamEncoder;
        r1 := @parameter0: java.nio.channels.WritableByteChannel;
        r2 := @parameter1: java.nio.charset.CharsetEncoder;
        i0 := @parameter2: int;
        specialinvoke r0.<java.io.Writer: void <init>()>();
        r0.<sun.nio.cs.StreamEncoder: boolean isOpen> = 1;
        r0.<sun.nio.cs.StreamEncoder: boolean haveLeftoverChar> = 0;
        r0.<sun.nio.cs.StreamEncoder: java.nio.CharBuffer lcb> = null;
        r0.<sun.nio.cs.StreamEncoder: java.io.OutputStream out> = null;
        r0.<sun.nio.cs.StreamEncoder: java.nio.channels.WritableByteChannel ch> = r1;
        $r3 = virtualinvoke r2.<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()>();
        r0.<sun.nio.cs.StreamEncoder: java.nio.charset.Charset cs> = $r3;
        r0.<sun.nio.cs.StreamEncoder: java.nio.charset.CharsetEncoder encoder> = r2;
        if i0 >= 0 goto label0;

        $i1 = 8192;
        goto label1;

     label0:
        $i1 = i0;

     label1:
        $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i1);
        r0.<sun.nio.cs.StreamEncoder: java.nio.ByteBuffer bb> = $r5;
        return;
    }

    private void writeBytes() throws java.io.IOException
    {
        sun.nio.cs.StreamEncoder r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.nio.ByteBuffer $r1, $r3, $r4, $r8, $r11, $r13, $r14;
        boolean $z0, $z1;
        java.lang.AssertionError $r5, $r9;
        java.nio.channels.WritableByteChannel $r6, $r7;
        java.io.OutputStream $r10;
        byte[] $r12;

        r0 := @this: sun.nio.cs.StreamEncoder;
        $r1 = r0.<sun.nio.cs.StreamEncoder: java.nio.ByteBuffer bb>;
        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        $r3 = r0.<sun.nio.cs.StreamEncoder: java.nio.ByteBuffer bb>;
        i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int limit()>();
        $r4 = r0.<sun.nio.cs.StreamEncoder: java.nio.ByteBuffer bb>;
        i1 = virtualinvoke $r4.<java.nio.ByteBuffer: int position()>();
        $z0 = <sun.nio.cs.StreamEncoder: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i1 <= i0 goto label0;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label0:
        if i1 > i0 goto label1;

        $i3 = i0 - i1;
        goto label2;

     label1:
        $i3 = 0;

     label2:
        i2 = $i3;
        if i2 <= 0 goto label4;

        $r6 = r0.<sun.nio.cs.StreamEncoder: java.nio.channels.WritableByteChannel ch>;
        if $r6 == null goto label3;

        $r7 = r0.<sun.nio.cs.StreamEncoder: java.nio.channels.WritableByteChannel ch>;
        $r8 = r0.<sun.nio.cs.StreamEncoder: java.nio.ByteBuffer bb>;
        $i4 = interfaceinvoke $r7.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>($r8);
        if $i4 == i2 goto label4;

        $z1 = <sun.nio.cs.StreamEncoder: boolean $assertionsDisabled>;
        if $z1 != 0 goto label4;

        $r9 = new java.lang.AssertionError;
        specialinvoke $r9.<java.lang.AssertionError: void <init>(int)>(i2);
        throw $r9;

     label3:
        $r10 = r0.<sun.nio.cs.StreamEncoder: java.io.OutputStream out>;
        $r11 = r0.<sun.nio.cs.StreamEncoder: java.nio.ByteBuffer bb>;
        $r12 = virtualinvoke $r11.<java.nio.ByteBuffer: byte[] array()>();
        $r13 = r0.<sun.nio.cs.StreamEncoder: java.nio.ByteBuffer bb>;
        $i5 = virtualinvoke $r13.<java.nio.ByteBuffer: int arrayOffset()>();
        $i6 = $i5 + i1;
        virtualinvoke $r10.<java.io.OutputStream: void write(byte[],int,int)>($r12, $i6, i2);

     label4:
        $r14 = r0.<sun.nio.cs.StreamEncoder: java.nio.ByteBuffer bb>;
        virtualinvoke $r14.<java.nio.ByteBuffer: java.nio.Buffer clear()>();
        return;
    }

    private void flushLeftoverChar(java.nio.CharBuffer, boolean) throws java.io.IOException
    {
        sun.nio.cs.StreamEncoder r0;
        java.nio.CharBuffer r1, $r3, $r4, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r18;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.nio.charset.CoderResult r2;
        char $c0, $c1, $c2;
        java.nio.charset.CharsetEncoder $r14;
        java.nio.ByteBuffer $r16, $r19;
        int $i3;
        java.lang.AssertionError $r20;

        r0 := @this: sun.nio.cs.StreamEncoder;
        r1 := @parameter0: java.nio.CharBuffer;
        z0 := @parameter1: boolean;
        $z1 = r0.<sun.nio.cs.StreamEncoder: boolean haveLeftoverChar>;
        if $z1 != 0 goto label0;

        if z0 != 0 goto label0;

        return;

     label0:
        $r3 = r0.<sun.nio.cs.StreamEncoder: java.nio.CharBuffer lcb>;
        if $r3 != null goto label1;

        $r4 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(2);
        r0.<sun.nio.cs.StreamEncoder: java.nio.CharBuffer lcb> = $r4;
        goto label2;

     label1:
        $r5 = r0.<sun.nio.cs.StreamEncoder: java.nio.CharBuffer lcb>;
        virtualinvoke $r5.<java.nio.CharBuffer: java.nio.Buffer clear()>();

     label2:
        $z2 = r0.<sun.nio.cs.StreamEncoder: boolean haveLeftoverChar>;
        if $z2 == 0 goto label3;

        $r7 = r0.<sun.nio.cs.StreamEncoder: java.nio.CharBuffer lcb>;
        $c0 = r0.<sun.nio.cs.StreamEncoder: char leftoverChar>;
        virtualinvoke $r7.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>($c0);

     label3:
        if r1 == null goto label4;

        $z3 = virtualinvoke r1.<java.nio.CharBuffer: boolean hasRemaining()>();
        if $z3 == 0 goto label4;

        $r9 = r0.<sun.nio.cs.StreamEncoder: java.nio.CharBuffer lcb>;
        $c1 = virtualinvoke r1.<java.nio.CharBuffer: char get()>();
        virtualinvoke $r9.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>($c1);

     label4:
        $r11 = r0.<sun.nio.cs.StreamEncoder: java.nio.CharBuffer lcb>;
        virtualinvoke $r11.<java.nio.CharBuffer: java.nio.Buffer flip()>();

     label5:
        $r13 = r0.<sun.nio.cs.StreamEncoder: java.nio.CharBuffer lcb>;
        $z4 = virtualinvoke $r13.<java.nio.CharBuffer: boolean hasRemaining()>();
        if $z4 != 0 goto label6;

        if z0 == 0 goto label11;

     label6:
        $r14 = r0.<sun.nio.cs.StreamEncoder: java.nio.charset.CharsetEncoder encoder>;
        $r15 = r0.<sun.nio.cs.StreamEncoder: java.nio.CharBuffer lcb>;
        $r16 = r0.<sun.nio.cs.StreamEncoder: java.nio.ByteBuffer bb>;
        r2 = virtualinvoke $r14.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>($r15, $r16, z0);
        $z5 = virtualinvoke r2.<java.nio.charset.CoderResult: boolean isUnderflow()>();
        if $z5 == 0 goto label8;

        $r17 = r0.<sun.nio.cs.StreamEncoder: java.nio.CharBuffer lcb>;
        $z6 = virtualinvoke $r17.<java.nio.CharBuffer: boolean hasRemaining()>();
        if $z6 == 0 goto label11;

        $r18 = r0.<sun.nio.cs.StreamEncoder: java.nio.CharBuffer lcb>;
        $c2 = virtualinvoke $r18.<java.nio.CharBuffer: char get()>();
        r0.<sun.nio.cs.StreamEncoder: char leftoverChar> = $c2;
        if r1 == null goto label7;

        $z7 = virtualinvoke r1.<java.nio.CharBuffer: boolean hasRemaining()>();
        if $z7 == 0 goto label7;

        specialinvoke r0.<sun.nio.cs.StreamEncoder: void flushLeftoverChar(java.nio.CharBuffer,boolean)>(r1, z0);

     label7:
        return;

     label8:
        $z8 = virtualinvoke r2.<java.nio.charset.CoderResult: boolean isOverflow()>();
        if $z8 == 0 goto label10;

        $z9 = <sun.nio.cs.StreamEncoder: boolean $assertionsDisabled>;
        if $z9 != 0 goto label9;

        $r19 = r0.<sun.nio.cs.StreamEncoder: java.nio.ByteBuffer bb>;
        $i3 = virtualinvoke $r19.<java.nio.ByteBuffer: int position()>();
        if $i3 > 0 goto label9;

        $r20 = new java.lang.AssertionError;
        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();
        throw $r20;

     label9:
        specialinvoke r0.<sun.nio.cs.StreamEncoder: void writeBytes()>();
        goto label5;

     label10:
        virtualinvoke r2.<java.nio.charset.CoderResult: void throwException()>();
        goto label5;

     label11:
        r0.<sun.nio.cs.StreamEncoder: boolean haveLeftoverChar> = 0;
        return;
    }

    void implWrite(char[], int, int) throws java.io.IOException
    {
        sun.nio.cs.StreamEncoder r0;
        char[] r1;
        int i0, i1, $i2, $i3, $i4, $i6;
        java.nio.CharBuffer r2;
        java.nio.charset.CoderResult r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.nio.charset.CharsetEncoder $r4;
        java.nio.ByteBuffer $r5, $r7;
        java.lang.AssertionError $r6, $r8;
        char $c5;

        r0 := @this: sun.nio.cs.StreamEncoder;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>(r1, i0, i1);
        $z0 = r0.<sun.nio.cs.StreamEncoder: boolean haveLeftoverChar>;
        if $z0 == 0 goto label0;

        specialinvoke r0.<sun.nio.cs.StreamEncoder: void flushLeftoverChar(java.nio.CharBuffer,boolean)>(r2, 0);

     label0:
        $z1 = virtualinvoke r2.<java.nio.CharBuffer: boolean hasRemaining()>();
        if $z1 == 0 goto label5;

        $r4 = r0.<sun.nio.cs.StreamEncoder: java.nio.charset.CharsetEncoder encoder>;
        $r5 = r0.<sun.nio.cs.StreamEncoder: java.nio.ByteBuffer bb>;
        r3 = virtualinvoke $r4.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>(r2, $r5, 0);
        $z2 = virtualinvoke r3.<java.nio.charset.CoderResult: boolean isUnderflow()>();
        if $z2 == 0 goto label2;

        $z3 = <sun.nio.cs.StreamEncoder: boolean $assertionsDisabled>;
        if $z3 != 0 goto label1;

        $i2 = virtualinvoke r2.<java.nio.CharBuffer: int remaining()>();
        if $i2 <= 1 goto label1;

        $r6 = new java.lang.AssertionError;
        $i3 = virtualinvoke r2.<java.nio.CharBuffer: int remaining()>();
        specialinvoke $r6.<java.lang.AssertionError: void <init>(int)>($i3);
        throw $r6;

     label1:
        $i4 = virtualinvoke r2.<java.nio.CharBuffer: int remaining()>();
        if $i4 != 1 goto label5;

        r0.<sun.nio.cs.StreamEncoder: boolean haveLeftoverChar> = 1;
        $c5 = virtualinvoke r2.<java.nio.CharBuffer: char get()>();
        r0.<sun.nio.cs.StreamEncoder: char leftoverChar> = $c5;
        goto label5;

     label2:
        $z4 = virtualinvoke r3.<java.nio.charset.CoderResult: boolean isOverflow()>();
        if $z4 == 0 goto label4;

        $z5 = <sun.nio.cs.StreamEncoder: boolean $assertionsDisabled>;
        if $z5 != 0 goto label3;

        $r7 = r0.<sun.nio.cs.StreamEncoder: java.nio.ByteBuffer bb>;
        $i6 = virtualinvoke $r7.<java.nio.ByteBuffer: int position()>();
        if $i6 > 0 goto label3;

        $r8 = new java.lang.AssertionError;
        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();
        throw $r8;

     label3:
        specialinvoke r0.<sun.nio.cs.StreamEncoder: void writeBytes()>();
        goto label0;

     label4:
        virtualinvoke r3.<java.nio.charset.CoderResult: void throwException()>();
        goto label0;

     label5:
        return;
    }

    void implFlushBuffer() throws java.io.IOException
    {
        sun.nio.cs.StreamEncoder r0;
        java.nio.ByteBuffer $r1;
        int $i0;

        r0 := @this: sun.nio.cs.StreamEncoder;
        $r1 = r0.<sun.nio.cs.StreamEncoder: java.nio.ByteBuffer bb>;
        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();
        if $i0 <= 0 goto label0;

        specialinvoke r0.<sun.nio.cs.StreamEncoder: void writeBytes()>();

     label0:
        return;
    }

    void implFlush() throws java.io.IOException
    {
        sun.nio.cs.StreamEncoder r0;
        java.io.OutputStream $r1, $r2;

        r0 := @this: sun.nio.cs.StreamEncoder;
        virtualinvoke r0.<sun.nio.cs.StreamEncoder: void implFlushBuffer()>();
        $r1 = r0.<sun.nio.cs.StreamEncoder: java.io.OutputStream out>;
        if $r1 == null goto label0;

        $r2 = r0.<sun.nio.cs.StreamEncoder: java.io.OutputStream out>;
        virtualinvoke $r2.<java.io.OutputStream: void flush()>();

     label0:
        return;
    }

    void implClose() throws java.io.IOException
    {
        sun.nio.cs.StreamEncoder r0;
        java.nio.charset.CoderResult r1;
        java.nio.charset.CharsetEncoder $r2, $r12;
        java.nio.ByteBuffer $r3, $r4, $r6;
        boolean $z0, $z1, $z2;
        int $i0, $i1;
        java.lang.AssertionError $r5;
        java.nio.channels.WritableByteChannel $r7, $r8;
        java.io.OutputStream $r9;
        java.io.IOException $r10, r11;

        r0 := @this: sun.nio.cs.StreamEncoder;
        specialinvoke r0.<sun.nio.cs.StreamEncoder: void flushLeftoverChar(java.nio.CharBuffer,boolean)>(null, 1);

     label0:
        $r2 = r0.<sun.nio.cs.StreamEncoder: java.nio.charset.CharsetEncoder encoder>;
        $r3 = r0.<sun.nio.cs.StreamEncoder: java.nio.ByteBuffer bb>;
        r1 = virtualinvoke $r2.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>($r3);
        $z0 = virtualinvoke r1.<java.nio.charset.CoderResult: boolean isUnderflow()>();
        if $z0 == 0 goto label1;

        goto label4;

     label1:
        $z1 = virtualinvoke r1.<java.nio.charset.CoderResult: boolean isOverflow()>();
        if $z1 == 0 goto label3;

        $z2 = <sun.nio.cs.StreamEncoder: boolean $assertionsDisabled>;
        if $z2 != 0 goto label2;

        $r4 = r0.<sun.nio.cs.StreamEncoder: java.nio.ByteBuffer bb>;
        $i0 = virtualinvoke $r4.<java.nio.ByteBuffer: int position()>();
        if $i0 > 0 goto label2;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label2:
        specialinvoke r0.<sun.nio.cs.StreamEncoder: void writeBytes()>();
        goto label0;

     label3:
        virtualinvoke r1.<java.nio.charset.CoderResult: void throwException()>();
        goto label0;

     label4:
        $r6 = r0.<sun.nio.cs.StreamEncoder: java.nio.ByteBuffer bb>;
        $i1 = virtualinvoke $r6.<java.nio.ByteBuffer: int position()>();
        if $i1 <= 0 goto label5;

        specialinvoke r0.<sun.nio.cs.StreamEncoder: void writeBytes()>();

     label5:
        $r7 = r0.<sun.nio.cs.StreamEncoder: java.nio.channels.WritableByteChannel ch>;
        if $r7 == null goto label6;

        $r8 = r0.<sun.nio.cs.StreamEncoder: java.nio.channels.WritableByteChannel ch>;
        interfaceinvoke $r8.<java.nio.channels.WritableByteChannel: void close()>();
        goto label7;

     label6:
        $r9 = r0.<sun.nio.cs.StreamEncoder: java.io.OutputStream out>;
        virtualinvoke $r9.<java.io.OutputStream: void close()>();

     label7:
        goto label9;

     label8:
        $r10 := @caughtexception;
        r11 = $r10;
        $r12 = r0.<sun.nio.cs.StreamEncoder: java.nio.charset.CharsetEncoder encoder>;
        virtualinvoke $r12.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>();
        throw r11;

     label9:
        return;

        catch java.io.IOException from label0 to label7 with label8;
    }

    java.lang.String encodingName()
    {
        sun.nio.cs.StreamEncoder r0;
        java.nio.charset.Charset $r1, $r2, $r5;
        boolean $z0;
        sun.nio.cs.HistoricallyNamedCharset $r3;
        java.lang.String $r4;

        r0 := @this: sun.nio.cs.StreamEncoder;
        $r1 = r0.<sun.nio.cs.StreamEncoder: java.nio.charset.Charset cs>;
        $z0 = $r1 instanceof sun.nio.cs.HistoricallyNamedCharset;
        if $z0 == 0 goto label0;

        $r2 = r0.<sun.nio.cs.StreamEncoder: java.nio.charset.Charset cs>;
        $r3 = (sun.nio.cs.HistoricallyNamedCharset) $r2;
        $r4 = interfaceinvoke $r3.<sun.nio.cs.HistoricallyNamedCharset: java.lang.String historicalName()>();
        goto label1;

     label0:
        $r5 = r0.<sun.nio.cs.StreamEncoder: java.nio.charset.Charset cs>;
        $r4 = virtualinvoke $r5.<java.nio.charset.Charset: java.lang.String name()>();

     label1:
        return $r4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/nio/cs/StreamEncoder";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.cs.StreamEncoder: boolean $assertionsDisabled> = $z1;
        return;
    }
}
