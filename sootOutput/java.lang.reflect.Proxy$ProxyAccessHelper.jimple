class java.lang.reflect.Proxy$ProxyAccessHelper extends java.lang.Object
{
    static final java.security.Permission PROXY_PERMISSION;
    static final boolean allowNewInstance;
    static final boolean allowNullLoader;

    private void <init>()
    {
        java.lang.reflect.Proxy$ProxyAccessHelper r0;

        r0 := @this: java.lang.reflect.Proxy$ProxyAccessHelper;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    private static boolean getBooleanProperty(java.lang.String)
    {
        java.lang.String r0, r2;
        java.lang.reflect.Proxy$ProxyAccessHelper$1 $r1;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        $r1 = new java.lang.reflect.Proxy$ProxyAccessHelper$1;
        specialinvoke $r1.<java.lang.reflect.Proxy$ProxyAccessHelper$1: void <init>(java.lang.String)>(r0);
        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        r2 = (java.lang.String) $r3;
        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r2);
        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();
        return $z0;
    }

    static boolean needsNewInstanceCheck(java.lang.Class)
    {
        java.lang.Class r0, r2;
        java.lang.Class[] r1;
        int i0, i1, $i2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.Class;
        $z0 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(r0);
        if $z0 == 0 goto label0;

        $z1 = <java.lang.reflect.Proxy$ProxyAccessHelper: boolean allowNewInstance>;
        if $z1 == 0 goto label1;

     label0:
        return 0;

     label1:
        $z2 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(r0);
        if $z2 == 0 goto label4;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();
        i0 = lengthof r1;
        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r2 = r1[i1];
        $i2 = virtualinvoke r2.<java.lang.Class: int getModifiers()>();
        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);
        if $z3 != 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;
        goto label2;

     label4:
        return 0;
    }

    static void <clinit>()
    {
        java.lang.reflect.ReflectPermission $r0;
        boolean $z0, $z1;

        $r0 = new java.lang.reflect.ReflectPermission;
        specialinvoke $r0.<java.lang.reflect.ReflectPermission: void <init>(java.lang.String)>("proxyConstructorNewInstance");
        <java.lang.reflect.Proxy$ProxyAccessHelper: java.security.Permission PROXY_PERMISSION> = $r0;
        $z0 = staticinvoke <java.lang.reflect.Proxy$ProxyAccessHelper: boolean getBooleanProperty(java.lang.String)>("sun.reflect.proxy.allowsNewInstance");
        <java.lang.reflect.Proxy$ProxyAccessHelper: boolean allowNewInstance> = $z0;
        $z1 = staticinvoke <java.lang.reflect.Proxy$ProxyAccessHelper: boolean getBooleanProperty(java.lang.String)>("sun.reflect.proxy.allowsNullLoader");
        <java.lang.reflect.Proxy$ProxyAccessHelper: boolean allowNullLoader> = $z1;
        return;
    }
}
