public class sun.reflect.generics.reflectiveObjects.WildcardTypeImpl extends sun.reflect.generics.reflectiveObjects.LazyReflectiveObjectGenerator implements java.lang.reflect.WildcardType
{
    private java.lang.reflect.Type[] upperBounds;
    private java.lang.reflect.Type[] lowerBounds;
    private sun.reflect.generics.tree.FieldTypeSignature[] upperBoundASTs;
    private sun.reflect.generics.tree.FieldTypeSignature[] lowerBoundASTs;
    static final boolean $assertionsDisabled;

    private void <init>(sun.reflect.generics.tree.FieldTypeSignature[], sun.reflect.generics.tree.FieldTypeSignature[], sun.reflect.generics.factory.GenericsFactory)
    {
        sun.reflect.generics.reflectiveObjects.WildcardTypeImpl r0;
        sun.reflect.generics.tree.FieldTypeSignature[] r1, r2;
        sun.reflect.generics.factory.GenericsFactory r3;

        r0 := @this: sun.reflect.generics.reflectiveObjects.WildcardTypeImpl;
        r1 := @parameter0: sun.reflect.generics.tree.FieldTypeSignature[];
        r2 := @parameter1: sun.reflect.generics.tree.FieldTypeSignature[];
        r3 := @parameter2: sun.reflect.generics.factory.GenericsFactory;
        specialinvoke r0.<sun.reflect.generics.reflectiveObjects.LazyReflectiveObjectGenerator: void <init>(sun.reflect.generics.factory.GenericsFactory)>(r3);
        r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: sun.reflect.generics.tree.FieldTypeSignature[] upperBoundASTs> = r1;
        r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: sun.reflect.generics.tree.FieldTypeSignature[] lowerBoundASTs> = r2;
        return;
    }

    public static sun.reflect.generics.reflectiveObjects.WildcardTypeImpl make(sun.reflect.generics.tree.FieldTypeSignature[], sun.reflect.generics.tree.FieldTypeSignature[], sun.reflect.generics.factory.GenericsFactory)
    {
        sun.reflect.generics.tree.FieldTypeSignature[] r0, r1;
        sun.reflect.generics.factory.GenericsFactory r2;
        sun.reflect.generics.reflectiveObjects.WildcardTypeImpl $r3;

        r0 := @parameter0: sun.reflect.generics.tree.FieldTypeSignature[];
        r1 := @parameter1: sun.reflect.generics.tree.FieldTypeSignature[];
        r2 := @parameter2: sun.reflect.generics.factory.GenericsFactory;
        $r3 = new sun.reflect.generics.reflectiveObjects.WildcardTypeImpl;
        specialinvoke $r3.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: void <init>(sun.reflect.generics.tree.FieldTypeSignature[],sun.reflect.generics.tree.FieldTypeSignature[],sun.reflect.generics.factory.GenericsFactory)>(r0, r1, r2);
        return $r3;
    }

    private sun.reflect.generics.tree.FieldTypeSignature[] getUpperBoundASTs()
    {
        sun.reflect.generics.reflectiveObjects.WildcardTypeImpl r0;
        boolean $z0;
        java.lang.reflect.Type[] $r1;
        java.lang.AssertionError $r2;
        sun.reflect.generics.tree.FieldTypeSignature[] $r3;

        r0 := @this: sun.reflect.generics.reflectiveObjects.WildcardTypeImpl;
        $z0 = <sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r1 = r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] upperBounds>;
        if $r1 == null goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: sun.reflect.generics.tree.FieldTypeSignature[] upperBoundASTs>;
        return $r3;
    }

    private sun.reflect.generics.tree.FieldTypeSignature[] getLowerBoundASTs()
    {
        sun.reflect.generics.reflectiveObjects.WildcardTypeImpl r0;
        boolean $z0;
        java.lang.reflect.Type[] $r1;
        java.lang.AssertionError $r2;
        sun.reflect.generics.tree.FieldTypeSignature[] $r3;

        r0 := @this: sun.reflect.generics.reflectiveObjects.WildcardTypeImpl;
        $z0 = <sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r1 = r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] lowerBounds>;
        if $r1 == null goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: sun.reflect.generics.tree.FieldTypeSignature[] lowerBoundASTs>;
        return $r3;
    }

    public java.lang.reflect.Type[] getUpperBounds()
    {
        sun.reflect.generics.reflectiveObjects.WildcardTypeImpl r0;
        sun.reflect.generics.tree.FieldTypeSignature[] r1;
        java.lang.reflect.Type[] r2, $r4, $r7, $r9;
        int i0, $i1, $i2;
        sun.reflect.generics.visitor.Reifier r3;
        sun.reflect.generics.tree.FieldTypeSignature $r5;
        java.lang.reflect.Type $r6;
        java.lang.Object $r8;

        r0 := @this: sun.reflect.generics.reflectiveObjects.WildcardTypeImpl;
        $r4 = r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] upperBounds>;
        if $r4 != null goto label2;

        r1 = specialinvoke r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: sun.reflect.generics.tree.FieldTypeSignature[] getUpperBoundASTs()>();
        $i1 = lengthof r1;
        r2 = newarray (java.lang.reflect.Type)[$i1];
        i0 = 0;

     label0:
        $i2 = lengthof r1;
        if i0 >= $i2 goto label1;

        r3 = virtualinvoke r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: sun.reflect.generics.visitor.Reifier getReifier()>();
        $r5 = r1[i0];
        interfaceinvoke $r5.<sun.reflect.generics.tree.FieldTypeSignature: void accept(sun.reflect.generics.visitor.TypeTreeVisitor)>(r3);
        $r6 = virtualinvoke r3.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type getResult()>();
        r2[i0] = $r6;
        i0 = i0 + 1;
        goto label0;

     label1:
        r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] upperBounds> = r2;

     label2:
        $r7 = r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] upperBounds>;
        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>();
        $r9 = (java.lang.reflect.Type[]) $r8;
        return $r9;
    }

    public java.lang.reflect.Type[] getLowerBounds()
    {
        sun.reflect.generics.reflectiveObjects.WildcardTypeImpl r0;
        sun.reflect.generics.tree.FieldTypeSignature[] r1;
        java.lang.reflect.Type[] r2, $r4, $r7, $r9;
        int i0, $i1, $i2;
        sun.reflect.generics.visitor.Reifier r3;
        sun.reflect.generics.tree.FieldTypeSignature $r5;
        java.lang.reflect.Type $r6;
        java.lang.Object $r8;

        r0 := @this: sun.reflect.generics.reflectiveObjects.WildcardTypeImpl;
        $r4 = r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] lowerBounds>;
        if $r4 != null goto label2;

        r1 = specialinvoke r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: sun.reflect.generics.tree.FieldTypeSignature[] getLowerBoundASTs()>();
        $i1 = lengthof r1;
        r2 = newarray (java.lang.reflect.Type)[$i1];
        i0 = 0;

     label0:
        $i2 = lengthof r1;
        if i0 >= $i2 goto label1;

        r3 = virtualinvoke r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: sun.reflect.generics.visitor.Reifier getReifier()>();
        $r5 = r1[i0];
        interfaceinvoke $r5.<sun.reflect.generics.tree.FieldTypeSignature: void accept(sun.reflect.generics.visitor.TypeTreeVisitor)>(r3);
        $r6 = virtualinvoke r3.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type getResult()>();
        r2[i0] = $r6;
        i0 = i0 + 1;
        goto label0;

     label1:
        r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] lowerBounds> = r2;

     label2:
        $r7 = r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] lowerBounds>;
        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>();
        $r9 = (java.lang.reflect.Type[]) $r8;
        return $r9;
    }

    public java.lang.String toString()
    {
        sun.reflect.generics.reflectiveObjects.WildcardTypeImpl r0;
        java.lang.reflect.Type[] r1, r2, r4, r5;
        java.lang.StringBuilder r3, $r7;
        int i0, i1, $i2, $i3, $i4;
        java.lang.reflect.Type r6, $r9;
        boolean $z0, $z1, z2, $z3;
        java.lang.AssertionError $r11;
        java.lang.Class $r13;
        java.lang.String $r14, $r16, $r18;

        r0 := @this: sun.reflect.generics.reflectiveObjects.WildcardTypeImpl;
        r1 = virtualinvoke r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] getLowerBounds()>();
        r2 = r1;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        r3 = $r7;
        $i2 = lengthof r1;
        if $i2 <= 0 goto label0;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("? super ");
        goto label2;

     label0:
        r4 = virtualinvoke r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] getUpperBounds()>();
        $i3 = lengthof r4;
        if $i3 <= 0 goto label1;

        $r9 = r4[0];
        $z0 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Object");
        if $z0 != 0 goto label1;

        r2 = r4;
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("? extends ");
        goto label2;

     label1:
        return "?";

     label2:
        $z1 = <sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean $assertionsDisabled>;
        if $z1 != 0 goto label3;

        $i4 = lengthof r2;
        if $i4 > 0 goto label3;

        $r11 = new java.lang.AssertionError;
        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();
        throw $r11;

     label3:
        z2 = 1;
        r5 = r2;
        i0 = lengthof r5;
        i1 = 0;

     label4:
        if i1 >= i0 goto label8;

        r6 = r5[i1];
        if z2 != 0 goto label5;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" & ");

     label5:
        z2 = 0;
        $z3 = r6 instanceof java.lang.Class;
        if $z3 == 0 goto label6;

        $r13 = (java.lang.Class) r6;
        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);
        goto label7;

     label6:
        $r16 = virtualinvoke r6.<java.lang.Object: java.lang.String toString()>();
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

     label7:
        i1 = i1 + 1;
        goto label4;

     label8:
        $r18 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r18;
    }

    public boolean equals(java.lang.Object)
    {
        sun.reflect.generics.reflectiveObjects.WildcardTypeImpl r0;
        java.lang.Object r1;
        java.lang.reflect.WildcardType r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.reflect.Type[] $r3, $r4, $r5, $r6;

        r0 := @this: sun.reflect.generics.reflectiveObjects.WildcardTypeImpl;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.lang.reflect.WildcardType;
        if $z0 == 0 goto label2;

        r2 = (java.lang.reflect.WildcardType) r1;
        $r3 = virtualinvoke r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] getLowerBounds()>();
        $r4 = interfaceinvoke r2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();
        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r3, $r4);
        if $z1 == 0 goto label0;

        $r5 = virtualinvoke r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] getUpperBounds()>();
        $r6 = interfaceinvoke r2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();
        $z2 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r5, $r6);
        if $z2 == 0 goto label0;

        $z3 = 1;
        goto label1;

     label0:
        $z3 = 0;

     label1:
        return $z3;

     label2:
        return 0;
    }

    public int hashCode()
    {
        sun.reflect.generics.reflectiveObjects.WildcardTypeImpl r0;
        java.lang.reflect.Type[] r1, r2;
        int $i0, $i1, $i2;

        r0 := @this: sun.reflect.generics.reflectiveObjects.WildcardTypeImpl;
        r1 = virtualinvoke r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] getLowerBounds()>();
        r2 = virtualinvoke r0.<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: java.lang.reflect.Type[] getUpperBounds()>();
        $i0 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>(r1);
        $i1 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>(r2);
        $i2 = $i0 ^ $i1;
        return $i2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/reflect/generics/reflectiveObjects/WildcardTypeImpl";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean $assertionsDisabled> = $z1;
        return;
    }
}
