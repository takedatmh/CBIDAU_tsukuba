public final class java.net.Inet4Address extends java.net.InetAddress
{
    static final int INADDRSZ;
    private static final long serialVersionUID;
    private static final int loopback;

    void <init>()
    {
        java.net.Inet4Address r0;
        java.net.InetAddress$InetAddressHolder $r1, $r2, $r3;

        r0 := @this: java.net.Inet4Address;
        specialinvoke r0.<java.net.InetAddress: void <init>()>();
        $r1 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        $r1.<java.net.InetAddress$InetAddressHolder: java.lang.String hostName> = null;
        $r2 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        $r2.<java.net.InetAddress$InetAddressHolder: int address> = 0;
        $r3 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        $r3.<java.net.InetAddress$InetAddressHolder: int family> = 1;
        return;
    }

    void <init>(java.lang.String, byte[])
    {
        java.net.Inet4Address r0;
        java.lang.String r1;
        byte[] r2;
        short s0;
        java.net.InetAddress$InetAddressHolder $r3, $r4, $r5;
        int $i1, $i4, $i5, i6, $i8, $i9, i10, $i12, $i13, i14;
        byte $b2, $b3, $b7, $b11;

        r0 := @this: java.net.Inet4Address;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: byte[];
        specialinvoke r0.<java.net.InetAddress: void <init>()>();
        $r3 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        $r3.<java.net.InetAddress$InetAddressHolder: java.lang.String hostName> = r1;
        $r4 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        $r4.<java.net.InetAddress$InetAddressHolder: int family> = 1;
        if r2 == null goto label0;

        $i1 = lengthof r2;
        if $i1 != 4 goto label0;

        $b2 = r2[3];
        s0 = $b2 & 255;
        $b3 = r2[2];
        $i4 = $b3 << 8;
        $i5 = $i4 & 65280;
        i6 = s0 | $i5;
        $b7 = r2[1];
        $i8 = $b7 << 16;
        $i9 = $i8 & 16711680;
        i10 = i6 | $i9;
        $b11 = r2[0];
        $i12 = $b11 << 24;
        $i13 = $i12 & -16777216;
        i14 = i10 | $i13;
        $r5 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        $r5.<java.net.InetAddress$InetAddressHolder: int address> = i14;

     label0:
        return;
    }

    void <init>(java.lang.String, int)
    {
        java.net.Inet4Address r0;
        java.lang.String r1;
        int i0;
        java.net.InetAddress$InetAddressHolder $r2, $r3, $r4;

        r0 := @this: java.net.Inet4Address;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        specialinvoke r0.<java.net.InetAddress: void <init>()>();
        $r2 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        $r2.<java.net.InetAddress$InetAddressHolder: java.lang.String hostName> = r1;
        $r3 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        $r3.<java.net.InetAddress$InetAddressHolder: int family> = 1;
        $r4 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        $r4.<java.net.InetAddress$InetAddressHolder: int address> = i0;
        return;
    }

    private java.lang.Object writeReplace() throws java.io.ObjectStreamException
    {
        java.net.Inet4Address r0;
        java.net.InetAddress $r1, r2;
        java.net.InetAddress$InetAddressHolder $r3, $r4, $r6, $r7, $r8;
        java.lang.String $r5;
        int $i0;

        r0 := @this: java.net.Inet4Address;
        $r1 = new java.net.InetAddress;
        specialinvoke $r1.<java.net.InetAddress: void <init>()>();
        r2 = $r1;
        $r3 = virtualinvoke r2.<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder()>();
        $r4 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        $r5 = virtualinvoke $r4.<java.net.InetAddress$InetAddressHolder: java.lang.String getHostName()>();
        $r3.<java.net.InetAddress$InetAddressHolder: java.lang.String hostName> = $r5;
        $r6 = virtualinvoke r2.<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder()>();
        $r7 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        $i0 = virtualinvoke $r7.<java.net.InetAddress$InetAddressHolder: int getAddress()>();
        $r6.<java.net.InetAddress$InetAddressHolder: int address> = $i0;
        $r8 = virtualinvoke r2.<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder()>();
        $r8.<java.net.InetAddress$InetAddressHolder: int family> = 2;
        return r2;
    }

    public boolean isMulticastAddress()
    {
        java.net.Inet4Address r0;
        java.net.InetAddress$InetAddressHolder $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.net.Inet4Address;
        $r1 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        $i0 = virtualinvoke $r1.<java.net.InetAddress$InetAddressHolder: int getAddress()>();
        $i1 = $i0 & -268435456;
        if $i1 != -536870912 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isAnyLocalAddress()
    {
        java.net.Inet4Address r0;
        java.net.InetAddress$InetAddressHolder $r1;
        int $i0;
        boolean $z0;

        r0 := @this: java.net.Inet4Address;
        $r1 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        $i0 = virtualinvoke $r1.<java.net.InetAddress$InetAddressHolder: int getAddress()>();
        if $i0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isLoopbackAddress()
    {
        java.net.Inet4Address r0;
        byte[] r1;
        byte $b0;
        boolean $z0;

        r0 := @this: java.net.Inet4Address;
        r1 = virtualinvoke r0.<java.net.Inet4Address: byte[] getAddress()>();
        $b0 = r1[0];
        if $b0 != 127 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isLinkLocalAddress()
    {
        java.net.Inet4Address r0;
        int i0, $i1, $i2, $i3, $i4;
        java.net.InetAddress$InetAddressHolder $r1;
        boolean $z0;

        r0 := @this: java.net.Inet4Address;
        $r1 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        i0 = virtualinvoke $r1.<java.net.InetAddress$InetAddressHolder: int getAddress()>();
        $i1 = i0 >>> 24;
        $i2 = $i1 & 255;
        if $i2 != 169 goto label0;

        $i3 = i0 >>> 16;
        $i4 = $i3 & 255;
        if $i4 != 254 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isSiteLocalAddress()
    {
        java.net.Inet4Address r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.net.InetAddress$InetAddressHolder $r1;
        boolean $z0;

        r0 := @this: java.net.Inet4Address;
        $r1 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        i0 = virtualinvoke $r1.<java.net.InetAddress$InetAddressHolder: int getAddress()>();
        $i1 = i0 >>> 24;
        $i2 = $i1 & 255;
        if $i2 == 10 goto label1;

        $i3 = i0 >>> 24;
        $i4 = $i3 & 255;
        if $i4 != 172 goto label0;

        $i5 = i0 >>> 16;
        $i6 = $i5 & 240;
        if $i6 == 16 goto label1;

     label0:
        $i7 = i0 >>> 24;
        $i8 = $i7 & 255;
        if $i8 != 192 goto label2;

        $i9 = i0 >>> 16;
        $i10 = $i9 & 255;
        if $i10 != 168 goto label2;

     label1:
        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isMCGlobal()
    {
        java.net.Inet4Address r0;
        byte[] r1;
        byte $b0, $b2, $b4, $b6, $b7;
        short $s1, $s3, $s5;
        boolean $z0;

        r0 := @this: java.net.Inet4Address;
        r1 = virtualinvoke r0.<java.net.Inet4Address: byte[] getAddress()>();
        $b0 = r1[0];
        $s1 = $b0 & 255;
        if $s1 < 224 goto label1;

        $b2 = r1[0];
        $s3 = $b2 & 255;
        if $s3 > 238 goto label1;

        $b4 = r1[0];
        $s5 = $b4 & 255;
        if $s5 != 224 goto label0;

        $b6 = r1[1];
        if $b6 != 0 goto label0;

        $b7 = r1[2];
        if $b7 == 0 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isMCNodeLocal()
    {
        java.net.Inet4Address r0;

        r0 := @this: java.net.Inet4Address;
        return 0;
    }

    public boolean isMCLinkLocal()
    {
        java.net.Inet4Address r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.net.InetAddress$InetAddressHolder $r1;
        boolean $z0;

        r0 := @this: java.net.Inet4Address;
        $r1 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        i0 = virtualinvoke $r1.<java.net.InetAddress$InetAddressHolder: int getAddress()>();
        $i1 = i0 >>> 24;
        $i2 = $i1 & 255;
        if $i2 != 224 goto label0;

        $i3 = i0 >>> 16;
        $i4 = $i3 & 255;
        if $i4 != 0 goto label0;

        $i5 = i0 >>> 8;
        $i6 = $i5 & 255;
        if $i6 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isMCSiteLocal()
    {
        java.net.Inet4Address r0;
        int i0, $i1, $i2, $i3, $i4;
        java.net.InetAddress$InetAddressHolder $r1;
        boolean $z0;

        r0 := @this: java.net.Inet4Address;
        $r1 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        i0 = virtualinvoke $r1.<java.net.InetAddress$InetAddressHolder: int getAddress()>();
        $i1 = i0 >>> 24;
        $i2 = $i1 & 255;
        if $i2 != 239 goto label0;

        $i3 = i0 >>> 16;
        $i4 = $i3 & 255;
        if $i4 != 255 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isMCOrgLocal()
    {
        java.net.Inet4Address r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.net.InetAddress$InetAddressHolder $r1;
        boolean $z0;

        r0 := @this: java.net.Inet4Address;
        $r1 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        i0 = virtualinvoke $r1.<java.net.InetAddress$InetAddressHolder: int getAddress()>();
        $i1 = i0 >>> 24;
        $i2 = $i1 & 255;
        if $i2 != 239 goto label0;

        $i3 = i0 >>> 16;
        $i4 = $i3 & 255;
        if $i4 < 192 goto label0;

        $i5 = i0 >>> 16;
        $i6 = $i5 & 255;
        if $i6 > 195 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public byte[] getAddress()
    {
        java.net.Inet4Address r0;
        int i0, $i1, $i2, $i4, $i5, $i7, $i8, $i10;
        byte[] r1;
        java.net.InetAddress$InetAddressHolder $r2;
        byte $b3, $b6, $b9, $b11;

        r0 := @this: java.net.Inet4Address;
        $r2 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        i0 = virtualinvoke $r2.<java.net.InetAddress$InetAddressHolder: int getAddress()>();
        r1 = newarray (byte)[4];
        $i1 = i0 >>> 24;
        $i2 = $i1 & 255;
        $b3 = (byte) $i2;
        r1[0] = $b3;
        $i4 = i0 >>> 16;
        $i5 = $i4 & 255;
        $b6 = (byte) $i5;
        r1[1] = $b6;
        $i7 = i0 >>> 8;
        $i8 = $i7 & 255;
        $b9 = (byte) $i8;
        r1[2] = $b9;
        $i10 = i0 & 255;
        $b11 = (byte) $i10;
        r1[3] = $b11;
        return r1;
    }

    public java.lang.String getHostAddress()
    {
        java.net.Inet4Address r0;
        byte[] $r1;
        java.lang.String $r2;

        r0 := @this: java.net.Inet4Address;
        $r1 = virtualinvoke r0.<java.net.Inet4Address: byte[] getAddress()>();
        $r2 = staticinvoke <java.net.Inet4Address: java.lang.String numericToTextFormat(byte[])>($r1);
        return $r2;
    }

    public int hashCode()
    {
        java.net.Inet4Address r0;
        java.net.InetAddress$InetAddressHolder $r1;
        int $i0;

        r0 := @this: java.net.Inet4Address;
        $r1 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        $i0 = virtualinvoke $r1.<java.net.InetAddress$InetAddressHolder: int getAddress()>();
        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.net.Inet4Address r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.net.InetAddress $r2;
        java.net.InetAddress$InetAddressHolder $r3, $r4;
        int $i0, $i1;

        r0 := @this: java.net.Inet4Address;
        r1 := @parameter0: java.lang.Object;
        if r1 == null goto label0;

        $z0 = r1 instanceof java.net.Inet4Address;
        if $z0 == 0 goto label0;

        $r2 = (java.net.InetAddress) r1;
        $r3 = virtualinvoke $r2.<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder()>();
        $i0 = virtualinvoke $r3.<java.net.InetAddress$InetAddressHolder: int getAddress()>();
        $r4 = virtualinvoke r0.<java.net.Inet4Address: java.net.InetAddress$InetAddressHolder holder()>();
        $i1 = virtualinvoke $r4.<java.net.InetAddress$InetAddressHolder: int getAddress()>();
        if $i0 != $i1 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    static java.lang.String numericToTextFormat(byte[])
    {
        byte[] r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        byte $b0, $b2, $b4, $b6;
        short $s1, $s3, $s5, $s7;
        java.lang.String $r9;

        r0 := @parameter0: byte[];
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $b0 = r0[0];
        $s1 = $b0 & 255;
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s1);
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $b2 = r0[1];
        $s3 = $b2 & 255;
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s3);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $b4 = r0[2];
        $s5 = $b4 & 255;
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s5);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $b6 = r0[3];
        $s7 = $b6 & 255;
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r9;
    }

    private static native void init();

    static void <clinit>()
    {
        staticinvoke <java.net.Inet4Address: void init()>();
        return;
    }
}
