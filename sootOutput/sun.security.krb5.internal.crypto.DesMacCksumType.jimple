public class sun.security.krb5.internal.crypto.DesMacCksumType extends sun.security.krb5.internal.crypto.CksumType
{

    public void <init>()
    {
        sun.security.krb5.internal.crypto.DesMacCksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacCksumType;
        specialinvoke r0.<sun.security.krb5.internal.crypto.CksumType: void <init>()>();
        return;
    }

    public int confounderSize()
    {
        sun.security.krb5.internal.crypto.DesMacCksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacCksumType;
        return 8;
    }

    public int cksumType()
    {
        sun.security.krb5.internal.crypto.DesMacCksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacCksumType;
        return 4;
    }

    public boolean isSafe()
    {
        sun.security.krb5.internal.crypto.DesMacCksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacCksumType;
        return 1;
    }

    public int cksumSize()
    {
        sun.security.krb5.internal.crypto.DesMacCksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacCksumType;
        return 16;
    }

    public int keyType()
    {
        sun.security.krb5.internal.crypto.DesMacCksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacCksumType;
        return 1;
    }

    public int keySize()
    {
        sun.security.krb5.internal.crypto.DesMacCksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacCksumType;
        return 8;
    }

    public byte[] calculateChecksum(byte[], int)
    {
        sun.security.krb5.internal.crypto.DesMacCksumType r0;
        byte[] r1;
        int i0;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacCksumType;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        return null;
    }

    public byte[] calculateKeyedChecksum(byte[], int, byte[], int) throws sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.DesMacCksumType r0;
        byte[] r1, r2, r3, r4, r6, r7, r8, r9, r11, r14;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i27, $i28;
        java.security.InvalidKeyException r5, $r10, $r12, r13;
        boolean $z0, $z1;
        byte $b8, $b10, $b21, $b23, $b24, $b26;
        short $s9, $s22, $s25;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacCksumType;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: byte[];
        i1 := @parameter3: int;
        $i3 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int confounderSize()>();
        $i4 = i0 + $i3;
        r3 = newarray (byte)[$i4];
        $i5 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int confounderSize()>();
        r4 = staticinvoke <sun.security.krb5.Confounder: byte[] bytes(int)>($i5);
        $i6 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int confounderSize()>();
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r3, 0, $i6);
        $i7 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int confounderSize()>();
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, $i7, i0);

     label0:
        $z0 = staticinvoke <javax.crypto.spec.DESKeySpec: boolean isWeak(byte[],int)>(r2, 0);
        if $z0 == 0 goto label1;

        $b8 = r2[7];
        $s9 = $b8 ^ 240;
        $b10 = (byte) $s9;
        r2[7] = $b10;

     label1:
        goto label3;

     label2:
        $r10 := @caughtexception;
        r5 = $r10;

     label3:
        $i11 = lengthof r2;
        r11 = newarray (byte)[$i11];
        r6 = staticinvoke <sun.security.krb5.internal.crypto.Des: byte[] des_cksum(byte[],byte[],byte[])>(r11, r3, r2);
        $i12 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int cksumSize()>();
        r7 = newarray (byte)[$i12];
        $i13 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int confounderSize()>();
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r7, 0, $i13);
        $i14 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int confounderSize()>();
        $i15 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int cksumSize()>();
        $i16 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int confounderSize()>();
        $i17 = $i15 - $i16;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r7, $i14, $i17);
        $i18 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int keySize()>();
        r8 = newarray (byte)[$i18];
        $i19 = lengthof r2;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r8, 0, $i19);
        i2 = 0;

     label4:
        $i20 = lengthof r8;
        if i2 >= $i20 goto label5;

        $b21 = r8[i2];
        $s22 = $b21 ^ 240;
        $b23 = (byte) $s22;
        r8[i2] = $b23;
        i2 = i2 + 1;
        goto label4;

     label5:
        $z1 = staticinvoke <javax.crypto.spec.DESKeySpec: boolean isWeak(byte[],int)>(r8, 0);
        if $z1 == 0 goto label6;

        $b24 = r8[7];
        $s25 = $b24 ^ 240;
        $b26 = (byte) $s25;
        r8[7] = $b26;

     label6:
        goto label8;

     label7:
        $r12 := @caughtexception;
        r13 = $r12;

     label8:
        $i27 = lengthof r8;
        r14 = newarray (byte)[$i27];
        $i28 = lengthof r7;
        r9 = newarray (byte)[$i28];
        staticinvoke <sun.security.krb5.internal.crypto.Des: void cbc_encrypt(byte[],byte[],byte[],byte[],boolean)>(r7, r9, r8, r14, 1);
        return r9;

        catch java.security.InvalidKeyException from label0 to label1 with label2;
        catch java.security.InvalidKeyException from label5 to label6 with label7;
    }

    public boolean verifyKeyedChecksum(byte[], int, byte[], byte[], int) throws sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.DesMacCksumType r0;
        byte[] r1, r2, r3, r4, r5, r7, r8, r10;
        int i0, i1, $i2, $i3, $i4, $i5, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.security.InvalidKeyException r6, $r9;
        boolean $z0, $z1;
        byte $b6, $b8;
        short $s7;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacCksumType;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: byte[];
        r3 := @parameter3: byte[];
        i1 := @parameter4: int;
        r4 = specialinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: byte[] decryptKeyedChecksum(byte[],byte[])>(r3, r2);
        $i2 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int confounderSize()>();
        $i3 = i0 + $i2;
        r5 = newarray (byte)[$i3];
        $i4 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int confounderSize()>();
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r5, 0, $i4);
        $i5 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int confounderSize()>();
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r5, $i5, i0);

     label0:
        $z0 = staticinvoke <javax.crypto.spec.DESKeySpec: boolean isWeak(byte[],int)>(r2, 0);
        if $z0 == 0 goto label1;

        $b6 = r2[7];
        $s7 = $b6 ^ 240;
        $b8 = (byte) $s7;
        r2[7] = $b8;

     label1:
        goto label3;

     label2:
        $r9 := @caughtexception;
        r6 = $r9;

     label3:
        $i9 = lengthof r2;
        r10 = newarray (byte)[$i9];
        r7 = staticinvoke <sun.security.krb5.internal.crypto.Des: byte[] des_cksum(byte[],byte[],byte[])>(r10, r5, r2);
        $i10 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int cksumSize()>();
        $i11 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int confounderSize()>();
        $i12 = $i10 - $i11;
        r8 = newarray (byte)[$i12];
        $i13 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int confounderSize()>();
        $i14 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int cksumSize()>();
        $i15 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int confounderSize()>();
        $i16 = $i14 - $i15;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, $i13, r8, 0, $i16);
        $z1 = staticinvoke <sun.security.krb5.internal.crypto.DesMacCksumType: boolean isChecksumEqual(byte[],byte[])>(r8, r7);
        return $z1;

        catch java.security.InvalidKeyException from label0 to label1 with label2;
    }

    private byte[] decryptKeyedChecksum(byte[], byte[]) throws sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.DesMacCksumType r0;
        byte[] r1, r2, r3, r4, r7;
        int i0, $i1, $i2, $i3, $i10, $i11;
        byte $b4, $b6, $b7, $b9;
        short $s5, $s8;
        boolean $z0;
        java.security.InvalidKeyException $r5, r6;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacCksumType;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        $i1 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacCksumType: int keySize()>();
        r3 = newarray (byte)[$i1];
        $i2 = lengthof r2;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, $i2);
        i0 = 0;

     label0:
        $i3 = lengthof r3;
        if i0 >= $i3 goto label1;

        $b4 = r3[i0];
        $s5 = $b4 ^ 240;
        $b6 = (byte) $s5;
        r3[i0] = $b6;
        i0 = i0 + 1;
        goto label0;

     label1:
        $z0 = staticinvoke <javax.crypto.spec.DESKeySpec: boolean isWeak(byte[],int)>(r3, 0);
        if $z0 == 0 goto label2;

        $b7 = r3[7];
        $s8 = $b7 ^ 240;
        $b9 = (byte) $s8;
        r3[7] = $b9;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;
        r6 = $r5;

     label4:
        $i10 = lengthof r3;
        r7 = newarray (byte)[$i10];
        $i11 = lengthof r1;
        r4 = newarray (byte)[$i11];
        staticinvoke <sun.security.krb5.internal.crypto.Des: void cbc_encrypt(byte[],byte[],byte[],byte[],boolean)>(r1, r4, r3, r7, 0);
        return r4;

        catch java.security.InvalidKeyException from label1 to label2 with label3;
    }
}
