class sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl extends java.lang.Object implements java.nio.file.attribute.BasicFileAttributeView
{
    final sun.nio.fs.UnixPath file;
    final boolean followLinks;
    final sun.nio.fs.UnixSecureDirectoryStream this$0;

    void <init>(sun.nio.fs.UnixSecureDirectoryStream, sun.nio.fs.UnixPath, boolean)
    {
        sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl r0;
        sun.nio.fs.UnixSecureDirectoryStream r1;
        sun.nio.fs.UnixPath r2;
        boolean z0;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl;
        r1 := @parameter0: sun.nio.fs.UnixSecureDirectoryStream;
        r2 := @parameter1: sun.nio.fs.UnixPath;
        z0 := @parameter2: boolean;
        r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixPath file> = r2;
        r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: boolean followLinks> = z0;
        return;
    }

    int open() throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl r0;
        short s0;
        sun.nio.fs.UnixException r1, $r5;
        boolean $z0;
        sun.nio.fs.UnixSecureDirectoryStream $r2;
        int $i1, $i2;
        sun.nio.fs.UnixPath $r3, $r6;
        byte[] $r4;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl;
        s0 = 0;
        $z0 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: boolean followLinks>;
        if $z0 != 0 goto label0;

        s0 = s0 | 256;

     label0:
        $r2 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $i1 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: int access$000(sun.nio.fs.UnixSecureDirectoryStream)>($r2);
        $r3 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        $r4 = virtualinvoke $r3.<sun.nio.fs.UnixPath: byte[] asByteArray()>();
        $i2 = staticinvoke <sun.nio.fs.UnixNativeDispatcher: int openat(int,byte[],int,int)>($i1, $r4, s0, 0);

     label1:
        return $i2;

     label2:
        $r5 := @caughtexception;
        r1 = $r5;
        $r6 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        virtualinvoke r1.<sun.nio.fs.UnixException: void rethrowAsIOException(sun.nio.fs.UnixPath)>($r6);
        return -1;

        catch sun.nio.fs.UnixException from label0 to label1 with label2;
    }

    private void checkWriteAccess()
    {
        sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl r0;
        java.lang.SecurityManager r1;
        sun.nio.fs.UnixPath $r2, $r5, $r8, $r9, $r10;
        sun.nio.fs.UnixSecureDirectoryStream $r3, $r6;
        sun.nio.fs.UnixDirectoryStream $r4, $r7;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label1;

        $r2 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        if $r2 != null goto label0;

        $r3 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r4 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r3);
        $r5 = virtualinvoke $r4.<sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath directory()>();
        virtualinvoke $r5.<sun.nio.fs.UnixPath: void checkWrite()>();
        goto label1;

     label0:
        $r6 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r7 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r6);
        $r8 = virtualinvoke $r7.<sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath directory()>();
        $r9 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        $r10 = virtualinvoke $r8.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(java.nio.file.Path)>($r9);
        virtualinvoke $r10.<sun.nio.fs.UnixPath: void checkWrite()>();

     label1:
        return;
    }

    public java.lang.String name()
    {
        sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl r0;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl;
        return "basic";
    }

    public java.nio.file.attribute.BasicFileAttributes readAttributes() throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl r0;
        java.lang.SecurityManager r1;
        sun.nio.fs.UnixFileAttributes r2, $r22;
        java.nio.file.attribute.BasicFileAttributes r3;
        java.lang.Throwable r4, $r34;
        sun.nio.fs.UnixSecureDirectoryStream $r5, $r8, $r12, $r15, $r21, $r23, $r25, $r31, $r35;
        sun.nio.fs.UnixDirectoryStream $r6, $r9, $r13, $r16, $r26, $r32, $r36;
        java.util.concurrent.locks.Lock $r7, $r27, $r33, $r37;
        boolean $z0, $z1;
        java.nio.file.ClosedDirectoryStreamException $r10;
        sun.nio.fs.UnixPath $r11, $r14, $r17, $r18, $r19, $r20, $r24, $r30;
        int $i0, $i1;
        sun.nio.fs.UnixException $r28, r29;
        null_type n0;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl;
        $r5 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r6 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r5);
        $r7 = virtualinvoke $r6.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        $r8 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r9 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r8);
        $z0 = virtualinvoke $r9.<sun.nio.fs.UnixDirectoryStream: boolean isOpen()>();
        if $z0 != 0 goto label1;

        $r10 = new java.nio.file.ClosedDirectoryStreamException;
        specialinvoke $r10.<java.nio.file.ClosedDirectoryStreamException: void <init>()>();
        throw $r10;

     label1:
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label3;

        $r11 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        if $r11 != null goto label2;

        $r12 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r13 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r12);
        $r14 = virtualinvoke $r13.<sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath directory()>();
        virtualinvoke $r14.<sun.nio.fs.UnixPath: void checkRead()>();
        goto label3;

     label2:
        $r15 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r16 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r15);
        $r17 = virtualinvoke $r16.<sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath directory()>();
        $r18 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        $r19 = virtualinvoke $r17.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(java.nio.file.Path)>($r18);
        virtualinvoke $r19.<sun.nio.fs.UnixPath: void checkRead()>();

     label3:
        $r20 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        if $r20 != null goto label4;

        $r21 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $i0 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: int access$000(sun.nio.fs.UnixSecureDirectoryStream)>($r21);
        $r22 = staticinvoke <sun.nio.fs.UnixFileAttributes: sun.nio.fs.UnixFileAttributes get(int)>($i0);
        goto label5;

     label4:
        $r23 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $i1 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: int access$000(sun.nio.fs.UnixSecureDirectoryStream)>($r23);
        $r24 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        $z1 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: boolean followLinks>;
        $r22 = staticinvoke <sun.nio.fs.UnixFileAttributes: sun.nio.fs.UnixFileAttributes get(int,sun.nio.fs.UnixPath,boolean)>($i1, $r24, $z1);

     label5:
        r2 = $r22;
        r3 = virtualinvoke r2.<sun.nio.fs.UnixFileAttributes: java.nio.file.attribute.BasicFileAttributes asBasicFileAttributes()>();

     label6:
        $r25 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r26 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r25);
        $r27 = virtualinvoke $r26.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r27.<java.util.concurrent.locks.Lock: void unlock()>();
        return r3;

     label7:
        $r28 := @caughtexception;

     label8:
        r29 = $r28;
        $r30 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        virtualinvoke r29.<sun.nio.fs.UnixException: void rethrowAsIOException(sun.nio.fs.UnixPath)>($r30);
        n0 = null;

     label9:
        $r31 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r32 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r31);
        $r33 = virtualinvoke $r32.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r33.<java.util.concurrent.locks.Lock: void unlock()>();
        return n0;

     label10:
        $r34 := @caughtexception;

     label11:
        r4 = $r34;

     label12:
        $r35 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r36 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r35);
        $r37 = virtualinvoke $r36.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r37.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r4;

        catch sun.nio.fs.UnixException from label3 to label6 with label7;
        catch java.lang.Throwable from label0 to label6 with label10;
        catch java.lang.Throwable from label8 to label9 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void setTimes(java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime) throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl r0;
        java.nio.file.attribute.FileTime r1, r2, r3;
        int i0, $i1;
        sun.nio.fs.UnixFileAttributes r4;
        java.util.concurrent.TimeUnit $r5, $r6;
        java.lang.Throwable r7, r8, $r24, $r29;
        sun.nio.fs.UnixSecureDirectoryStream $r9, $r12, $r16, $r26, $r30;
        sun.nio.fs.UnixDirectoryStream $r10, $r13, $r27, $r31;
        java.util.concurrent.locks.Lock $r11, $r28, $r32;
        boolean $z0;
        java.nio.file.ClosedDirectoryStreamException $r14;
        sun.nio.fs.UnixPath $r15, $r19, $r22, $r23, $r25;
        sun.nio.fs.UnixException $r17, r18, $r20, r21;
        long $l2, $l3;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl;
        r1 := @parameter0: java.nio.file.attribute.FileTime;
        r2 := @parameter1: java.nio.file.attribute.FileTime;
        r3 := @parameter2: java.nio.file.attribute.FileTime;
        specialinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: void checkWriteAccess()>();
        $r9 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r10 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r9);
        $r11 = virtualinvoke $r10.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r11.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        $r12 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r13 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r12);
        $z0 = virtualinvoke $r13.<sun.nio.fs.UnixDirectoryStream: boolean isOpen()>();
        if $z0 != 0 goto label1;

        $r14 = new java.nio.file.ClosedDirectoryStreamException;
        specialinvoke $r14.<java.nio.file.ClosedDirectoryStreamException: void <init>()>();
        throw $r14;

     label1:
        $r15 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        if $r15 != null goto label2;

        $r16 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $i1 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: int access$000(sun.nio.fs.UnixSecureDirectoryStream)>($r16);
        goto label3;

     label2:
        $i1 = virtualinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: int open()>();

     label3:
        i0 = $i1;

     label4:
        if r1 == null goto label5;

        if r2 != null goto label9;

     label5:
        r4 = staticinvoke <sun.nio.fs.UnixFileAttributes: sun.nio.fs.UnixFileAttributes get(int)>(i0);
        if r1 != null goto label6;

        r1 = virtualinvoke r4.<sun.nio.fs.UnixFileAttributes: java.nio.file.attribute.FileTime lastModifiedTime()>();

     label6:
        if r2 != null goto label7;

        r2 = virtualinvoke r4.<sun.nio.fs.UnixFileAttributes: java.nio.file.attribute.FileTime lastAccessTime()>();

     label7:
        goto label9;

     label8:
        $r17 := @caughtexception;
        r18 = $r17;
        $r19 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        virtualinvoke r18.<sun.nio.fs.UnixException: void rethrowAsIOException(sun.nio.fs.UnixPath)>($r19);

     label9:
        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MICROSECONDS>;
        $l2 = virtualinvoke r2.<java.nio.file.attribute.FileTime: long 'to'(java.util.concurrent.TimeUnit)>($r5);
        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MICROSECONDS>;
        $l3 = virtualinvoke r1.<java.nio.file.attribute.FileTime: long 'to'(java.util.concurrent.TimeUnit)>($r6);
        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void futimes(int,long,long)>(i0, $l2, $l3);

     label10:
        goto label12;

     label11:
        $r20 := @caughtexception;
        r21 = $r20;
        $r22 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        virtualinvoke r21.<sun.nio.fs.UnixException: void rethrowAsIOException(sun.nio.fs.UnixPath)>($r22);

     label12:
        $r23 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        if $r23 == null goto label17;

        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void close(int)>(i0);
        goto label17;

     label13:
        $r24 := @caughtexception;

     label14:
        r7 = $r24;

     label15:
        $r25 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        if $r25 == null goto label16;

        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void close(int)>(i0);

     label16:
        throw r7;

     label17:
        $r26 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r27 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r26);
        $r28 = virtualinvoke $r27.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r28.<java.util.concurrent.locks.Lock: void unlock()>();
        goto label21;

     label18:
        $r29 := @caughtexception;

     label19:
        r8 = $r29;

     label20:
        $r30 = r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r31 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r30);
        $r32 = virtualinvoke $r31.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r32.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r8;

     label21:
        return;

        catch sun.nio.fs.UnixException from label5 to label7 with label8;
        catch sun.nio.fs.UnixException from label9 to label10 with label11;
        catch java.lang.Throwable from label4 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label0 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    static void access$200(sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl)
    {
        sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl r0;

        r0 := @parameter0: sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl;
        specialinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: void checkWriteAccess()>();
        return;
    }
}
