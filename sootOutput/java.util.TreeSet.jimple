public class java.util.TreeSet extends java.util.AbstractSet implements java.util.NavigableSet, java.lang.Cloneable, java.io.Serializable
{
    private transient java.util.NavigableMap m;
    private static final java.lang.Object PRESENT;
    private static final long serialVersionUID;

    void <init>(java.util.NavigableMap)
    {
        java.util.TreeSet r0;
        java.util.NavigableMap r1;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.util.NavigableMap;
        specialinvoke r0.<java.util.AbstractSet: void <init>()>();
        r0.<java.util.TreeSet: java.util.NavigableMap m> = r1;
        return;
    }

    public void <init>()
    {
        java.util.TreeSet r0;
        java.util.TreeMap $r1;

        r0 := @this: java.util.TreeSet;
        $r1 = new java.util.TreeMap;
        specialinvoke $r1.<java.util.TreeMap: void <init>()>();
        specialinvoke r0.<java.util.TreeSet: void <init>(java.util.NavigableMap)>($r1);
        return;
    }

    public void <init>(java.util.Comparator)
    {
        java.util.TreeSet r0;
        java.util.Comparator r1;
        java.util.TreeMap $r2;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.util.Comparator;
        $r2 = new java.util.TreeMap;
        specialinvoke $r2.<java.util.TreeMap: void <init>(java.util.Comparator)>(r1);
        specialinvoke r0.<java.util.TreeSet: void <init>(java.util.NavigableMap)>($r2);
        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.TreeSet r0;
        java.util.Collection r1;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.util.Collection;
        specialinvoke r0.<java.util.TreeSet: void <init>()>();
        virtualinvoke r0.<java.util.TreeSet: boolean addAll(java.util.Collection)>(r1);
        return;
    }

    public void <init>(java.util.SortedSet)
    {
        java.util.TreeSet r0;
        java.util.SortedSet r1;
        java.util.Comparator $r2;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.util.SortedSet;
        $r2 = interfaceinvoke r1.<java.util.SortedSet: java.util.Comparator comparator()>();
        specialinvoke r0.<java.util.TreeSet: void <init>(java.util.Comparator)>($r2);
        virtualinvoke r0.<java.util.TreeSet: boolean addAll(java.util.Collection)>(r1);
        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.TreeSet r0;
        java.util.NavigableMap $r1;
        java.util.NavigableSet $r2;
        java.util.Iterator $r3;

        r0 := @this: java.util.TreeSet;
        $r1 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $r2 = interfaceinvoke $r1.<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>();
        $r3 = interfaceinvoke $r2.<java.util.NavigableSet: java.util.Iterator iterator()>();
        return $r3;
    }

    public java.util.Iterator descendingIterator()
    {
        java.util.TreeSet r0;
        java.util.NavigableMap $r1;
        java.util.NavigableSet $r2;
        java.util.Iterator $r3;

        r0 := @this: java.util.TreeSet;
        $r1 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $r2 = interfaceinvoke $r1.<java.util.NavigableMap: java.util.NavigableSet descendingKeySet()>();
        $r3 = interfaceinvoke $r2.<java.util.NavigableSet: java.util.Iterator iterator()>();
        return $r3;
    }

    public java.util.NavigableSet descendingSet()
    {
        java.util.TreeSet r0, $r1;
        java.util.NavigableMap $r2, $r3;

        r0 := @this: java.util.TreeSet;
        $r1 = new java.util.TreeSet;
        $r2 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $r3 = interfaceinvoke $r2.<java.util.NavigableMap: java.util.NavigableMap descendingMap()>();
        specialinvoke $r1.<java.util.TreeSet: void <init>(java.util.NavigableMap)>($r3);
        return $r1;
    }

    public int size()
    {
        java.util.TreeSet r0;
        java.util.NavigableMap $r1;
        int $i0;

        r0 := @this: java.util.TreeSet;
        $r1 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $i0 = interfaceinvoke $r1.<java.util.NavigableMap: int size()>();
        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.TreeSet r0;
        java.util.NavigableMap $r1;
        boolean $z0;

        r0 := @this: java.util.TreeSet;
        $r1 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $z0 = interfaceinvoke $r1.<java.util.NavigableMap: boolean isEmpty()>();
        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1;
        java.util.NavigableMap $r2;
        boolean $z0;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $z0 = interfaceinvoke $r2.<java.util.NavigableMap: boolean containsKey(java.lang.Object)>(r1);
        return $z0;
    }

    public boolean add(java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1, $r2, $r4;
        java.util.NavigableMap $r3;
        boolean $z0;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.lang.Object;
        $r3 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $r2 = <java.util.TreeSet: java.lang.Object PRESENT>;
        $r4 = interfaceinvoke $r3.<java.util.NavigableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);
        if $r4 != null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1, $r3, $r4;
        java.util.NavigableMap $r2;
        boolean $z0;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $r3 = interfaceinvoke $r2.<java.util.NavigableMap: java.lang.Object remove(java.lang.Object)>(r1);
        $r4 = <java.util.TreeSet: java.lang.Object PRESENT>;
        if $r3 != $r4 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public void clear()
    {
        java.util.TreeSet r0;
        java.util.NavigableMap $r1;

        r0 := @this: java.util.TreeSet;
        $r1 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        interfaceinvoke $r1.<java.util.NavigableMap: void clear()>();
        return;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.TreeSet r0;
        java.util.Collection r1;
        java.util.SortedSet r2;
        java.util.TreeMap r3;
        java.util.Comparator r4, r5;
        java.lang.Object $r6;
        java.util.NavigableMap $r7, $r8, $r9;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.util.Collection;
        $r7 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $i0 = interfaceinvoke $r7.<java.util.NavigableMap: int size()>();
        if $i0 != 0 goto label1;

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();
        if $i1 <= 0 goto label1;

        $z0 = r1 instanceof java.util.SortedSet;
        if $z0 == 0 goto label1;

        $r8 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $z1 = $r8 instanceof java.util.TreeMap;
        if $z1 == 0 goto label1;

        r2 = (java.util.SortedSet) r1;
        $r9 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        r3 = (java.util.TreeMap) $r9;
        r4 = interfaceinvoke r2.<java.util.SortedSet: java.util.Comparator comparator()>();
        r5 = virtualinvoke r3.<java.util.TreeMap: java.util.Comparator comparator()>();
        if r4 == r5 goto label0;

        if r4 == null goto label1;

        $z2 = interfaceinvoke r4.<java.util.Comparator: boolean equals(java.lang.Object)>(r5);
        if $z2 == 0 goto label1;

     label0:
        $r6 = <java.util.TreeSet: java.lang.Object PRESENT>;
        virtualinvoke r3.<java.util.TreeMap: void addAllForTreeSet(java.util.SortedSet,java.lang.Object)>(r2, $r6);
        return 1;

     label1:
        $z3 = specialinvoke r0.<java.util.AbstractSet: boolean addAll(java.util.Collection)>(r1);
        return $z3;
    }

    public java.util.NavigableSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        java.util.TreeSet r0, $r3;
        java.lang.Object r1, r2;
        boolean z0, z1;
        java.util.NavigableMap $r4, $r5;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.lang.Object;
        z0 := @parameter1: boolean;
        r2 := @parameter2: java.lang.Object;
        z1 := @parameter3: boolean;
        $r3 = new java.util.TreeSet;
        $r4 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $r5 = interfaceinvoke $r4.<java.util.NavigableMap: java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, z0, r2, z1);
        specialinvoke $r3.<java.util.TreeSet: void <init>(java.util.NavigableMap)>($r5);
        return $r3;
    }

    public java.util.NavigableSet headSet(java.lang.Object, boolean)
    {
        java.util.TreeSet r0, $r2;
        java.lang.Object r1;
        boolean z0;
        java.util.NavigableMap $r3, $r4;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.lang.Object;
        z0 := @parameter1: boolean;
        $r2 = new java.util.TreeSet;
        $r3 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $r4 = interfaceinvoke $r3.<java.util.NavigableMap: java.util.NavigableMap headMap(java.lang.Object,boolean)>(r1, z0);
        specialinvoke $r2.<java.util.TreeSet: void <init>(java.util.NavigableMap)>($r4);
        return $r2;
    }

    public java.util.NavigableSet tailSet(java.lang.Object, boolean)
    {
        java.util.TreeSet r0, $r2;
        java.lang.Object r1;
        boolean z0;
        java.util.NavigableMap $r3, $r4;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.lang.Object;
        z0 := @parameter1: boolean;
        $r2 = new java.util.TreeSet;
        $r3 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $r4 = interfaceinvoke $r3.<java.util.NavigableMap: java.util.NavigableMap tailMap(java.lang.Object,boolean)>(r1, z0);
        specialinvoke $r2.<java.util.TreeSet: void <init>(java.util.NavigableMap)>($r4);
        return $r2;
    }

    public java.util.SortedSet subSet(java.lang.Object, java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1, r2;
        java.util.NavigableSet $r3;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r3 = virtualinvoke r0.<java.util.TreeSet: java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, 1, r2, 0);
        return $r3;
    }

    public java.util.SortedSet headSet(java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1;
        java.util.NavigableSet $r2;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeSet: java.util.NavigableSet headSet(java.lang.Object,boolean)>(r1, 0);
        return $r2;
    }

    public java.util.SortedSet tailSet(java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1;
        java.util.NavigableSet $r2;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeSet: java.util.NavigableSet tailSet(java.lang.Object,boolean)>(r1, 1);
        return $r2;
    }

    public java.util.Comparator comparator()
    {
        java.util.TreeSet r0;
        java.util.NavigableMap $r1;
        java.util.Comparator $r2;

        r0 := @this: java.util.TreeSet;
        $r1 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $r2 = interfaceinvoke $r1.<java.util.NavigableMap: java.util.Comparator comparator()>();
        return $r2;
    }

    public java.lang.Object first()
    {
        java.util.TreeSet r0;
        java.util.NavigableMap $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.TreeSet;
        $r1 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $r2 = interfaceinvoke $r1.<java.util.NavigableMap: java.lang.Object firstKey()>();
        return $r2;
    }

    public java.lang.Object last()
    {
        java.util.TreeSet r0;
        java.util.NavigableMap $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.TreeSet;
        $r1 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $r2 = interfaceinvoke $r1.<java.util.NavigableMap: java.lang.Object lastKey()>();
        return $r2;
    }

    public java.lang.Object lower(java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1, $r3;
        java.util.NavigableMap $r2;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $r3 = interfaceinvoke $r2.<java.util.NavigableMap: java.lang.Object lowerKey(java.lang.Object)>(r1);
        return $r3;
    }

    public java.lang.Object floor(java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1, $r3;
        java.util.NavigableMap $r2;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $r3 = interfaceinvoke $r2.<java.util.NavigableMap: java.lang.Object floorKey(java.lang.Object)>(r1);
        return $r3;
    }

    public java.lang.Object ceiling(java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1, $r3;
        java.util.NavigableMap $r2;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $r3 = interfaceinvoke $r2.<java.util.NavigableMap: java.lang.Object ceilingKey(java.lang.Object)>(r1);
        return $r3;
    }

    public java.lang.Object higher(java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1, $r3;
        java.util.NavigableMap $r2;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $r3 = interfaceinvoke $r2.<java.util.NavigableMap: java.lang.Object higherKey(java.lang.Object)>(r1);
        return $r3;
    }

    public java.lang.Object pollFirst()
    {
        java.util.TreeSet r0;
        java.util.Map$Entry r1;
        java.util.NavigableMap $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.TreeSet;
        $r2 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        r1 = interfaceinvoke $r2.<java.util.NavigableMap: java.util.Map$Entry pollFirstEntry()>();
        if r1 != null goto label0;

        $r3 = null;
        goto label1;

     label0:
        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

     label1:
        return $r3;
    }

    public java.lang.Object pollLast()
    {
        java.util.TreeSet r0;
        java.util.Map$Entry r1;
        java.util.NavigableMap $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.TreeSet;
        $r2 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        r1 = interfaceinvoke $r2.<java.util.NavigableMap: java.util.Map$Entry pollLastEntry()>();
        if r1 != null goto label0;

        $r3 = null;
        goto label1;

     label0:
        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

     label1:
        return $r3;
    }

    public java.lang.Object clone()
    {
        java.util.TreeSet r0, r3;
        null_type n0;
        java.lang.CloneNotSupportedException r1, $r4;
        java.lang.Object $r2;
        java.lang.InternalError $r5;
        java.util.TreeMap $r6;
        java.util.NavigableMap $r7;

        r0 := @this: java.util.TreeSet;
        n0 = null;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        r3 = (java.util.TreeSet) $r2;

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        $r5 = new java.lang.InternalError;
        specialinvoke $r5.<java.lang.InternalError: void <init>()>();
        throw $r5;

     label3:
        $r6 = new java.util.TreeMap;
        $r7 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        specialinvoke $r6.<java.util.TreeMap: void <init>(java.util.SortedMap)>($r7);
        r3.<java.util.TreeSet: java.util.NavigableMap m> = $r6;
        return r3;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.TreeSet r0;
        java.io.ObjectOutputStream r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        java.util.NavigableMap $r4, $r6, $r7;
        java.util.Comparator $r5;
        int $i0;
        java.util.Set $r8;
        boolean $z0;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.io.ObjectOutputStream;
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        $r4 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $r5 = interfaceinvoke $r4.<java.util.NavigableMap: java.util.Comparator comparator()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r5);
        $r6 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $i0 = interfaceinvoke $r6.<java.util.NavigableMap: int size()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);
        $r7 = r0.<java.util.TreeSet: java.util.NavigableMap m>;
        $r8 = interfaceinvoke $r7.<java.util.NavigableMap: java.util.Set keySet()>();
        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r3);
        goto label0;

     label1:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.TreeSet r0;
        java.io.ObjectInputStream r1;
        java.util.Comparator r2;
        java.util.TreeMap r3, $r6, $r7;
        int i0;
        java.lang.Object $r4, $r5;

        r0 := @this: java.util.TreeSet;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        $r5 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        r2 = (java.util.Comparator) $r5;
        if r2 != null goto label0;

        $r6 = new java.util.TreeMap;
        specialinvoke $r6.<java.util.TreeMap: void <init>()>();
        r3 = $r6;
        goto label1;

     label0:
        $r7 = new java.util.TreeMap;
        specialinvoke $r7.<java.util.TreeMap: void <init>(java.util.Comparator)>(r2);
        r3 = $r7;

     label1:
        r0.<java.util.TreeSet: java.util.NavigableMap m> = r3;
        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();
        $r4 = <java.util.TreeSet: java.lang.Object PRESENT>;
        virtualinvoke r3.<java.util.TreeMap: void readTreeSet(int,java.io.ObjectInputStream,java.lang.Object)>(i0, r1, $r4);
        return;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;
        specialinvoke $r0.<java.lang.Object: void <init>()>();
        <java.util.TreeSet: java.lang.Object PRESENT> = $r0;
        return;
    }
}
