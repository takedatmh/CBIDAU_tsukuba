public class sun.misc.Version extends java.lang.Object
{
    private static final java.lang.String launcher_name;
    private static final java.lang.String java_version;
    private static final java.lang.String java_runtime_name;
    private static final java.lang.String java_runtime_version;
    private static boolean versionsInitialized;
    private static int jvm_major_version;
    private static int jvm_minor_version;
    private static int jvm_micro_version;
    private static int jvm_update_version;
    private static int jvm_build_number;
    private static java.lang.String jvm_special_version;
    private static int jdk_major_version;
    private static int jdk_minor_version;
    private static int jdk_micro_version;
    private static int jdk_update_version;
    private static int jdk_build_number;
    private static java.lang.String jdk_special_version;
    private static boolean jvmVersionInfoAvailable;

    public void <init>()
    {
        sun.misc.Version r0;

        r0 := @this: sun.misc.Version;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static void init()
    {
        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("java.version", "1.7.0_79");
        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("java.runtime.version", "1.7.0_79-b15");
        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("java.runtime.name", "Java(TM) SE Runtime Environment");
        return;
    }

    public static void print()
    {
        java.io.PrintStream $r0;

        $r0 = <java.lang.System: java.io.PrintStream err>;
        staticinvoke <sun.misc.Version: void print(java.io.PrintStream)>($r0);
        return;
    }

    public static void println()
    {
        java.io.PrintStream $r0, $r1;

        $r0 = <java.lang.System: java.io.PrintStream err>;
        staticinvoke <sun.misc.Version: void print(java.io.PrintStream)>($r0);
        $r1 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r1.<java.io.PrintStream: void println()>();
        return;
    }

    public static void print(java.io.PrintStream)
    {
        java.io.PrintStream r0;
        boolean z0, $z1;
        java.lang.String r1, r2, r3, r4, $r5, $r13;
        int $i0;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @parameter0: java.io.PrintStream;
        z0 = 0;
        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.awt.headless");
        if r1 == null goto label0;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");
        if $z1 == 0 goto label0;

        z0 = 1;

     label0:
        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>("java version \"1.7.0_79\"");
        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>("Java(TM) SE Runtime Environment (build 1.7.0_79-b15");
        $r5 = "Java(TM) SE Runtime Environment";
        $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>("Embedded");
        if $i0 == -1 goto label1;

        if z0 == 0 goto label1;

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>(", headless");

     label1:
        virtualinvoke r0.<java.io.PrintStream: void println(char)>(41);
        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.name");
        r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.version");
        r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.info");
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (build ");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r13);
        return;
    }

    public static synchronized int jvmMajorVersion()
    {
        boolean $z0;
        int $i0;

        $z0 = <sun.misc.Version: boolean versionsInitialized>;
        if $z0 != 0 goto label0;

        staticinvoke <sun.misc.Version: void initVersions()>();

     label0:
        $i0 = <sun.misc.Version: int jvm_major_version>;
        return $i0;
    }

    public static synchronized int jvmMinorVersion()
    {
        boolean $z0;
        int $i0;

        $z0 = <sun.misc.Version: boolean versionsInitialized>;
        if $z0 != 0 goto label0;

        staticinvoke <sun.misc.Version: void initVersions()>();

     label0:
        $i0 = <sun.misc.Version: int jvm_minor_version>;
        return $i0;
    }

    public static synchronized int jvmMicroVersion()
    {
        boolean $z0;
        int $i0;

        $z0 = <sun.misc.Version: boolean versionsInitialized>;
        if $z0 != 0 goto label0;

        staticinvoke <sun.misc.Version: void initVersions()>();

     label0:
        $i0 = <sun.misc.Version: int jvm_micro_version>;
        return $i0;
    }

    public static synchronized int jvmUpdateVersion()
    {
        boolean $z0;
        int $i0;

        $z0 = <sun.misc.Version: boolean versionsInitialized>;
        if $z0 != 0 goto label0;

        staticinvoke <sun.misc.Version: void initVersions()>();

     label0:
        $i0 = <sun.misc.Version: int jvm_update_version>;
        return $i0;
    }

    public static synchronized java.lang.String jvmSpecialVersion()
    {
        boolean $z0;
        java.lang.String $r0, $r1, $r2;

        $z0 = <sun.misc.Version: boolean versionsInitialized>;
        if $z0 != 0 goto label0;

        staticinvoke <sun.misc.Version: void initVersions()>();

     label0:
        $r0 = <sun.misc.Version: java.lang.String jvm_special_version>;
        if $r0 != null goto label1;

        $r1 = staticinvoke <sun.misc.Version: java.lang.String getJvmSpecialVersion()>();
        <sun.misc.Version: java.lang.String jvm_special_version> = $r1;

     label1:
        $r2 = <sun.misc.Version: java.lang.String jvm_special_version>;
        return $r2;
    }

    public static native java.lang.String getJvmSpecialVersion();

    public static synchronized int jvmBuildNumber()
    {
        boolean $z0;
        int $i0;

        $z0 = <sun.misc.Version: boolean versionsInitialized>;
        if $z0 != 0 goto label0;

        staticinvoke <sun.misc.Version: void initVersions()>();

     label0:
        $i0 = <sun.misc.Version: int jvm_build_number>;
        return $i0;
    }

    public static synchronized int jdkMajorVersion()
    {
        boolean $z0;
        int $i0;

        $z0 = <sun.misc.Version: boolean versionsInitialized>;
        if $z0 != 0 goto label0;

        staticinvoke <sun.misc.Version: void initVersions()>();

     label0:
        $i0 = <sun.misc.Version: int jdk_major_version>;
        return $i0;
    }

    public static synchronized int jdkMinorVersion()
    {
        boolean $z0;
        int $i0;

        $z0 = <sun.misc.Version: boolean versionsInitialized>;
        if $z0 != 0 goto label0;

        staticinvoke <sun.misc.Version: void initVersions()>();

     label0:
        $i0 = <sun.misc.Version: int jdk_minor_version>;
        return $i0;
    }

    public static synchronized int jdkMicroVersion()
    {
        boolean $z0;
        int $i0;

        $z0 = <sun.misc.Version: boolean versionsInitialized>;
        if $z0 != 0 goto label0;

        staticinvoke <sun.misc.Version: void initVersions()>();

     label0:
        $i0 = <sun.misc.Version: int jdk_micro_version>;
        return $i0;
    }

    public static synchronized int jdkUpdateVersion()
    {
        boolean $z0;
        int $i0;

        $z0 = <sun.misc.Version: boolean versionsInitialized>;
        if $z0 != 0 goto label0;

        staticinvoke <sun.misc.Version: void initVersions()>();

     label0:
        $i0 = <sun.misc.Version: int jdk_update_version>;
        return $i0;
    }

    public static synchronized java.lang.String jdkSpecialVersion()
    {
        boolean $z0;
        java.lang.String $r0, $r1, $r2;

        $z0 = <sun.misc.Version: boolean versionsInitialized>;
        if $z0 != 0 goto label0;

        staticinvoke <sun.misc.Version: void initVersions()>();

     label0:
        $r0 = <sun.misc.Version: java.lang.String jdk_special_version>;
        if $r0 != null goto label1;

        $r1 = staticinvoke <sun.misc.Version: java.lang.String getJdkSpecialVersion()>();
        <sun.misc.Version: java.lang.String jdk_special_version> = $r1;

     label1:
        $r2 = <sun.misc.Version: java.lang.String jdk_special_version>;
        return $r2;
    }

    public static native java.lang.String getJdkSpecialVersion();

    public static synchronized int jdkBuildNumber()
    {
        boolean $z0;
        int $i0;

        $z0 = <sun.misc.Version: boolean versionsInitialized>;
        if $z0 != 0 goto label0;

        staticinvoke <sun.misc.Version: void initVersions()>();

     label0:
        $i0 = <sun.misc.Version: int jdk_build_number>;
        return $i0;
    }

    private static synchronized void initVersions()
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.String r0, r1, r2, $r6, $r10, $r13;
        int i0, i2, $i3, $i10, $i12, $i14, $i15, $i17, $i20, $i21, $i22, $i24, i25, $i27, $i30;
        char c1, $c4, $c5, $c6, $c7, $c8, $c9, $c11, $c13, $c16, $c18, $c19, $c23, $c26, $c28, $c29;
        java.lang.CharSequence r3, $r4, r9;
        java.lang.Integer $r5, $r14;
        java.lang.NumberFormatException $r7, r8;
        java.lang.String[] r11, r12;

        $z0 = <sun.misc.Version: boolean versionsInitialized>;
        if $z0 == 0 goto label0;

        return;

     label0:
        $z1 = staticinvoke <sun.misc.Version: boolean getJvmVersionInfo()>();
        <sun.misc.Version: boolean jvmVersionInfoAvailable> = $z1;
        $z2 = <sun.misc.Version: boolean jvmVersionInfoAvailable>;
        if $z2 != 0 goto label8;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.version");
        $i3 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();
        if $i3 < 5 goto label8;

        $c4 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(0);
        $z3 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c4);
        if $z3 == 0 goto label8;

        $c5 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(1);
        if $c5 != 46 goto label8;

        $c6 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(2);
        $z4 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c6);
        if $z4 == 0 goto label8;

        $c7 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(3);
        if $c7 != 46 goto label8;

        $c8 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(4);
        $z5 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c8);
        if $z5 == 0 goto label8;

        $c9 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(0);
        $i10 = staticinvoke <java.lang.Character: int digit(char,int)>($c9, 10);
        <sun.misc.Version: int jvm_major_version> = $i10;
        $c11 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(2);
        $i12 = staticinvoke <java.lang.Character: int digit(char,int)>($c11, 10);
        <sun.misc.Version: int jvm_minor_version> = $i12;
        $c13 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(4);
        $i14 = staticinvoke <java.lang.Character: int digit(char,int)>($c13, 10);
        <sun.misc.Version: int jvm_micro_version> = $i14;
        $i15 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();
        r3 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(5, $i15);
        $c16 = interfaceinvoke r3.<java.lang.CharSequence: char charAt(int)>(0);
        if $c16 != 95 goto label5;

        $i17 = interfaceinvoke r3.<java.lang.CharSequence: int length()>();
        if $i17 < 3 goto label5;

        $c18 = interfaceinvoke r3.<java.lang.CharSequence: char charAt(int)>(1);
        $z6 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c18);
        if $z6 == 0 goto label5;

        $c19 = interfaceinvoke r3.<java.lang.CharSequence: char charAt(int)>(2);
        $z7 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c19);
        if $z7 == 0 goto label5;

        i0 = 3;

     label1:
        $r4 = interfaceinvoke r3.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(1, 3);
        r1 = interfaceinvoke $r4.<java.lang.CharSequence: java.lang.String toString()>();
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r1);
        $i20 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();
        <sun.misc.Version: int jvm_update_version> = $i20;
        $i21 = interfaceinvoke r3.<java.lang.CharSequence: int length()>();
        if $i21 < 4 goto label2;

        c1 = interfaceinvoke r3.<java.lang.CharSequence: char charAt(int)>(3);
        if c1 < 97 goto label2;

        if c1 > 122 goto label2;

        $r6 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(c1);
        <sun.misc.Version: java.lang.String jvm_special_version> = $r6;
        i0 = i0 + 1;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;
        r8 = $r7;
        return;

     label4:
        $i22 = interfaceinvoke r3.<java.lang.CharSequence: int length()>();
        r3 = interfaceinvoke r3.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i0, $i22);

     label5:
        $c23 = interfaceinvoke r3.<java.lang.CharSequence: char charAt(int)>(0);
        if $c23 != 45 goto label8;

        $i24 = interfaceinvoke r3.<java.lang.CharSequence: int length()>();
        r9 = interfaceinvoke r3.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(1, $i24);
        $r10 = interfaceinvoke r9.<java.lang.CharSequence: java.lang.String toString()>();
        r11 = virtualinvoke $r10.<java.lang.String: java.lang.String[] split(java.lang.String)>("-");
        r12 = r11;
        i25 = lengthof r12;
        i2 = 0;

     label6:
        if i2 >= i25 goto label8;

        r2 = r12[i2];
        $c26 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0);
        if $c26 != 98 goto label7;

        $i27 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i27 != 3 goto label7;

        $c28 = virtualinvoke r2.<java.lang.String: char charAt(int)>(1);
        $z8 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c28);
        if $z8 == 0 goto label7;

        $c29 = virtualinvoke r2.<java.lang.String: char charAt(int)>(2);
        $z9 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c29);
        if $z9 == 0 goto label7;

        $r13 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(1, 3);
        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r13);
        $i30 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();
        <sun.misc.Version: int jvm_build_number> = $i30;
        goto label8;

     label7:
        i2 = i2 + 1;
        goto label6;

     label8:
        staticinvoke <sun.misc.Version: void getJdkVersionInfo()>();
        <sun.misc.Version: boolean versionsInitialized> = 1;
        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private static native boolean getJvmVersionInfo();

    private static native void getJdkVersionInfo();

    static void <clinit>()
    {
        staticinvoke <sun.misc.Version: void init()>();
        <sun.misc.Version: boolean versionsInitialized> = 0;
        <sun.misc.Version: int jvm_major_version> = 0;
        <sun.misc.Version: int jvm_minor_version> = 0;
        <sun.misc.Version: int jvm_micro_version> = 0;
        <sun.misc.Version: int jvm_update_version> = 0;
        <sun.misc.Version: int jvm_build_number> = 0;
        <sun.misc.Version: java.lang.String jvm_special_version> = null;
        <sun.misc.Version: int jdk_major_version> = 0;
        <sun.misc.Version: int jdk_minor_version> = 0;
        <sun.misc.Version: int jdk_micro_version> = 0;
        <sun.misc.Version: int jdk_update_version> = 0;
        <sun.misc.Version: int jdk_build_number> = 0;
        <sun.misc.Version: java.lang.String jdk_special_version> = null;
        return;
    }
}
