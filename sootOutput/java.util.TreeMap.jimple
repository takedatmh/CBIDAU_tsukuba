public class java.util.TreeMap extends java.util.AbstractMap implements java.util.NavigableMap, java.lang.Cloneable, java.io.Serializable
{
    private final java.util.Comparator comparator;
    private transient java.util.TreeMap$Entry root;
    private transient int size;
    private transient int modCount;
    private transient java.util.TreeMap$EntrySet entrySet;
    private transient java.util.TreeMap$KeySet navigableKeySet;
    private transient java.util.NavigableMap descendingMap;
    private static final java.lang.Object UNBOUNDED;
    private static final boolean RED;
    private static final boolean BLACK;
    private static final long serialVersionUID;

    public void <init>()
    {
        java.util.TreeMap r0;

        r0 := @this: java.util.TreeMap;
        specialinvoke r0.<java.util.AbstractMap: void <init>()>();
        r0.<java.util.TreeMap: java.util.TreeMap$Entry root> = null;
        r0.<java.util.TreeMap: int size> = 0;
        r0.<java.util.TreeMap: int modCount> = 0;
        r0.<java.util.TreeMap: java.util.TreeMap$EntrySet entrySet> = null;
        r0.<java.util.TreeMap: java.util.TreeMap$KeySet navigableKeySet> = null;
        r0.<java.util.TreeMap: java.util.NavigableMap descendingMap> = null;
        r0.<java.util.TreeMap: java.util.Comparator comparator> = null;
        return;
    }

    public void <init>(java.util.Comparator)
    {
        java.util.TreeMap r0;
        java.util.Comparator r1;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.util.Comparator;
        specialinvoke r0.<java.util.AbstractMap: void <init>()>();
        r0.<java.util.TreeMap: java.util.TreeMap$Entry root> = null;
        r0.<java.util.TreeMap: int size> = 0;
        r0.<java.util.TreeMap: int modCount> = 0;
        r0.<java.util.TreeMap: java.util.TreeMap$EntrySet entrySet> = null;
        r0.<java.util.TreeMap: java.util.TreeMap$KeySet navigableKeySet> = null;
        r0.<java.util.TreeMap: java.util.NavigableMap descendingMap> = null;
        r0.<java.util.TreeMap: java.util.Comparator comparator> = r1;
        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.TreeMap r0;
        java.util.Map r1;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.util.Map;
        specialinvoke r0.<java.util.AbstractMap: void <init>()>();
        r0.<java.util.TreeMap: java.util.TreeMap$Entry root> = null;
        r0.<java.util.TreeMap: int size> = 0;
        r0.<java.util.TreeMap: int modCount> = 0;
        r0.<java.util.TreeMap: java.util.TreeMap$EntrySet entrySet> = null;
        r0.<java.util.TreeMap: java.util.TreeMap$KeySet navigableKeySet> = null;
        r0.<java.util.TreeMap: java.util.NavigableMap descendingMap> = null;
        r0.<java.util.TreeMap: java.util.Comparator comparator> = null;
        virtualinvoke r0.<java.util.TreeMap: void putAll(java.util.Map)>(r1);
        return;
    }

    public void <init>(java.util.SortedMap)
    {
        java.util.TreeMap r0;
        java.util.SortedMap r1;
        java.io.IOException r2, $r6;
        java.util.Comparator $r3;
        int $i0;
        java.util.Set $r4;
        java.util.Iterator $r5;
        java.lang.ClassNotFoundException $r7, r8;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.util.SortedMap;
        specialinvoke r0.<java.util.AbstractMap: void <init>()>();
        r0.<java.util.TreeMap: java.util.TreeMap$Entry root> = null;
        r0.<java.util.TreeMap: int size> = 0;
        r0.<java.util.TreeMap: int modCount> = 0;
        r0.<java.util.TreeMap: java.util.TreeMap$EntrySet entrySet> = null;
        r0.<java.util.TreeMap: java.util.TreeMap$KeySet navigableKeySet> = null;
        r0.<java.util.TreeMap: java.util.NavigableMap descendingMap> = null;
        $r3 = interfaceinvoke r1.<java.util.SortedMap: java.util.Comparator comparator()>();
        r0.<java.util.TreeMap: java.util.Comparator comparator> = $r3;

     label0:
        $i0 = interfaceinvoke r1.<java.util.SortedMap: int size()>();
        $r4 = interfaceinvoke r1.<java.util.SortedMap: java.util.Set entrySet()>();
        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();
        specialinvoke r0.<java.util.TreeMap: void buildFromSorted(int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>($i0, $r5, null, null);

     label1:
        goto label4;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        goto label4;

     label3:
        $r7 := @caughtexception;
        r8 = $r7;

     label4:
        return;

        catch java.io.IOException from label0 to label1 with label2;
        catch java.lang.ClassNotFoundException from label0 to label1 with label3;
    }

    public int size()
    {
        java.util.TreeMap r0;
        int $i0;

        r0 := @this: java.util.TreeMap;
        $i0 = r0.<java.util.TreeMap: int size>;
        return $i0;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Entry $r2;
        boolean $z0;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>(r1);
        if $r2 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap$Entry r2;
        boolean $z0;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getFirstEntry()>();

     label0:
        if r2 == null goto label2;

        $r3 = r2.<java.util.TreeMap$Entry: java.lang.Object value>;
        $z0 = staticinvoke <java.util.TreeMap: boolean valEquals(java.lang.Object,java.lang.Object)>(r1, $r3);
        if $z0 == 0 goto label1;

        return 1;

     label1:
        r2 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry successor(java.util.TreeMap$Entry)>(r2);
        goto label0;

     label2:
        return 0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap$Entry r2;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>(r1);
        if r2 != null goto label0;

        $r3 = null;
        goto label1;

     label0:
        $r3 = r2.<java.util.TreeMap$Entry: java.lang.Object value>;

     label1:
        return $r3;
    }

    public java.util.Comparator comparator()
    {
        java.util.TreeMap r0;
        java.util.Comparator $r1;

        r0 := @this: java.util.TreeMap;
        $r1 = r0.<java.util.TreeMap: java.util.Comparator comparator>;
        return $r1;
    }

    public java.lang.Object firstKey()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Entry $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.TreeMap;
        $r1 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getFirstEntry()>();
        $r2 = staticinvoke <java.util.TreeMap: java.lang.Object key(java.util.TreeMap$Entry)>($r1);
        return $r2;
    }

    public java.lang.Object lastKey()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Entry $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.TreeMap;
        $r1 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getLastEntry()>();
        $r2 = staticinvoke <java.util.TreeMap: java.lang.Object key(java.util.TreeMap$Entry)>($r1);
        return $r2;
    }

    public void putAll(java.util.Map)
    {
        java.util.TreeMap r0;
        java.util.Map r1;
        int i0, $i1, $i2, $i3;
        java.util.Comparator r2, $r5, $r6;
        java.io.IOException r3, $r10;
        boolean $z0, $z1;
        java.util.SortedMap $r4;
        java.util.Set $r8;
        java.util.Iterator $r9;
        java.lang.ClassNotFoundException $r11, r12;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.util.Map;
        i0 = interfaceinvoke r1.<java.util.Map: int size()>();
        $i1 = r0.<java.util.TreeMap: int size>;
        if $i1 != 0 goto label6;

        if i0 == 0 goto label6;

        $z0 = r1 instanceof java.util.SortedMap;
        if $z0 == 0 goto label6;

        $r4 = (java.util.SortedMap) r1;
        r2 = interfaceinvoke $r4.<java.util.SortedMap: java.util.Comparator comparator()>();
        $r5 = r0.<java.util.TreeMap: java.util.Comparator comparator>;
        if r2 == $r5 goto label0;

        if r2 == null goto label6;

        $r6 = r0.<java.util.TreeMap: java.util.Comparator comparator>;
        $z1 = interfaceinvoke r2.<java.util.Comparator: boolean equals(java.lang.Object)>($r6);
        if $z1 == 0 goto label6;

     label0:
        $i2 = r0.<java.util.TreeMap: int modCount>;
        $i3 = $i2 + 1;
        r0.<java.util.TreeMap: int modCount> = $i3;

     label1:
        $r8 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();
        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();
        specialinvoke r0.<java.util.TreeMap: void buildFromSorted(int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>(i0, $r9, null, null);

     label2:
        goto label5;

     label3:
        $r10 := @caughtexception;
        r3 = $r10;
        goto label5;

     label4:
        $r11 := @caughtexception;
        r12 = $r11;

     label5:
        return;

     label6:
        specialinvoke r0.<java.util.AbstractMap: void putAll(java.util.Map)>(r1);
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.ClassNotFoundException from label1 to label2 with label4;
    }

    final java.util.TreeMap$Entry getEntry(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, $r7;
        java.lang.Comparable r2;
        java.util.TreeMap$Entry r3, $r5;
        int i0;
        java.util.Comparator $r4;
        java.lang.NullPointerException $r6;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        $r4 = r0.<java.util.TreeMap: java.util.Comparator comparator>;
        if $r4 == null goto label0;

        $r5 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getEntryUsingComparator(java.lang.Object)>(r1);
        return $r5;

     label0:
        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;
        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();
        throw $r6;

     label1:
        r2 = (java.lang.Comparable) r1;
        r3 = r0.<java.util.TreeMap: java.util.TreeMap$Entry root>;

     label2:
        if r3 == null goto label6;

        $r7 = r3.<java.util.TreeMap$Entry: java.lang.Object key>;
        i0 = interfaceinvoke r2.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);
        if i0 >= 0 goto label3;

        r3 = r3.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        goto label5;

     label3:
        if i0 <= 0 goto label4;

        r3 = r3.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        goto label5;

     label4:
        return r3;

     label5:
        goto label2;

     label6:
        return null;
    }

    final java.util.TreeMap$Entry getEntryUsingComparator(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, r2, $r5;
        java.util.Comparator r3;
        java.util.TreeMap$Entry r4;
        int i0;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        r2 = r1;
        r3 = r0.<java.util.TreeMap: java.util.Comparator comparator>;
        if r3 == null goto label4;

        r4 = r0.<java.util.TreeMap: java.util.TreeMap$Entry root>;

     label0:
        if r4 == null goto label4;

        $r5 = r4.<java.util.TreeMap$Entry: java.lang.Object key>;
        i0 = interfaceinvoke r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r2, $r5);
        if i0 >= 0 goto label1;

        r4 = r4.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        goto label3;

     label1:
        if i0 <= 0 goto label2;

        r4 = r4.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        goto label3;

     label2:
        return r4;

     label3:
        goto label0;

     label4:
        return null;
    }

    final java.util.TreeMap$Entry getCeilingEntry(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, $r5;
        java.util.TreeMap$Entry r2, r3, r4, $r6, $r7, $r8;
        int i0;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        r2 = r0.<java.util.TreeMap: java.util.TreeMap$Entry root>;

     label0:
        if r2 == null goto label8;

        $r5 = r2.<java.util.TreeMap$Entry: java.lang.Object key>;
        i0 = virtualinvoke r0.<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>(r1, $r5);
        if i0 >= 0 goto label2;

        $r6 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        if $r6 == null goto label1;

        r2 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        goto label7;

     label1:
        return r2;

     label2:
        if i0 <= 0 goto label6;

        $r7 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        if $r7 == null goto label3;

        r2 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        goto label7;

     label3:
        r3 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        r4 = r2;

     label4:
        if r3 == null goto label5;

        $r8 = r3.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        if r4 != $r8 goto label5;

        r4 = r3;
        r3 = r3.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        goto label4;

     label5:
        return r3;

     label6:
        return r2;

     label7:
        goto label0;

     label8:
        return null;
    }

    final java.util.TreeMap$Entry getFloorEntry(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, $r5;
        java.util.TreeMap$Entry r2, r3, r4, $r6, $r7, $r8;
        int i0;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        r2 = r0.<java.util.TreeMap: java.util.TreeMap$Entry root>;

     label0:
        if r2 == null goto label8;

        $r5 = r2.<java.util.TreeMap$Entry: java.lang.Object key>;
        i0 = virtualinvoke r0.<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>(r1, $r5);
        if i0 <= 0 goto label2;

        $r6 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        if $r6 == null goto label1;

        r2 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        goto label7;

     label1:
        return r2;

     label2:
        if i0 >= 0 goto label6;

        $r7 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        if $r7 == null goto label3;

        r2 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        goto label7;

     label3:
        r3 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        r4 = r2;

     label4:
        if r3 == null goto label5;

        $r8 = r3.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        if r4 != $r8 goto label5;

        r4 = r3;
        r3 = r3.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        goto label4;

     label5:
        return r3;

     label6:
        return r2;

     label7:
        goto label0;

     label8:
        return null;
    }

    final java.util.TreeMap$Entry getHigherEntry(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, $r5;
        java.util.TreeMap$Entry r2, r3, r4, $r6, $r7, $r8;
        int i0;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        r2 = r0.<java.util.TreeMap: java.util.TreeMap$Entry root>;

     label0:
        if r2 == null goto label7;

        $r5 = r2.<java.util.TreeMap$Entry: java.lang.Object key>;
        i0 = virtualinvoke r0.<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>(r1, $r5);
        if i0 >= 0 goto label2;

        $r6 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        if $r6 == null goto label1;

        r2 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        goto label6;

     label1:
        return r2;

     label2:
        $r7 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        if $r7 == null goto label3;

        r2 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        goto label6;

     label3:
        r3 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        r4 = r2;

     label4:
        if r3 == null goto label5;

        $r8 = r3.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        if r4 != $r8 goto label5;

        r4 = r3;
        r3 = r3.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        goto label4;

     label5:
        return r3;

     label6:
        goto label0;

     label7:
        return null;
    }

    final java.util.TreeMap$Entry getLowerEntry(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, $r5;
        java.util.TreeMap$Entry r2, r3, r4, $r6, $r7, $r8;
        int i0;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        r2 = r0.<java.util.TreeMap: java.util.TreeMap$Entry root>;

     label0:
        if r2 == null goto label7;

        $r5 = r2.<java.util.TreeMap$Entry: java.lang.Object key>;
        i0 = virtualinvoke r0.<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>(r1, $r5);
        if i0 <= 0 goto label2;

        $r6 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        if $r6 == null goto label1;

        r2 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        goto label6;

     label1:
        return r2;

     label2:
        $r7 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        if $r7 == null goto label3;

        r2 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        goto label6;

     label3:
        r3 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        r4 = r2;

     label4:
        if r3 == null goto label5;

        $r8 = r3.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        if r4 != $r8 goto label5;

        r4 = r3;
        r3 = r3.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        goto label4;

     label5:
        return r3;

     label6:
        goto label0;

     label7:
        return null;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, r2, $r9, $r10, $r12, $r13;
        java.util.TreeMap$Entry r3, r5, $r7, $r14, r15;
        java.util.Comparator r4;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Comparable r6;
        java.lang.NullPointerException $r11;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        r3 = r0.<java.util.TreeMap: java.util.TreeMap$Entry root>;
        if r3 != null goto label0;

        virtualinvoke r0.<java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>(r1, r1);
        $r7 = new java.util.TreeMap$Entry;
        specialinvoke $r7.<java.util.TreeMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.util.TreeMap$Entry)>(r1, r2, null);
        r0.<java.util.TreeMap: java.util.TreeMap$Entry root> = $r7;
        r0.<java.util.TreeMap: int size> = 1;
        $i2 = r0.<java.util.TreeMap: int modCount>;
        $i3 = $i2 + 1;
        r0.<java.util.TreeMap: int modCount> = $i3;
        return null;

     label0:
        r4 = r0.<java.util.TreeMap: java.util.Comparator comparator>;
        if r4 == null goto label5;

     label1:
        r5 = r3;
        $r9 = r3.<java.util.TreeMap$Entry: java.lang.Object key>;
        i0 = interfaceinvoke r4.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, $r9);
        if i0 >= 0 goto label2;

        r3 = r3.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        goto label4;

     label2:
        if i0 <= 0 goto label3;

        r3 = r3.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        goto label4;

     label3:
        $r10 = virtualinvoke r3.<java.util.TreeMap$Entry: java.lang.Object setValue(java.lang.Object)>(r2);
        return $r10;

     label4:
        if r3 != null goto label1;

        goto label11;

     label5:
        if r1 != null goto label6;

        $r11 = new java.lang.NullPointerException;
        specialinvoke $r11.<java.lang.NullPointerException: void <init>()>();
        throw $r11;

     label6:
        r6 = (java.lang.Comparable) r1;

     label7:
        r5 = r3;
        $r12 = r3.<java.util.TreeMap$Entry: java.lang.Object key>;
        i0 = interfaceinvoke r6.<java.lang.Comparable: int compareTo(java.lang.Object)>($r12);
        if i0 >= 0 goto label8;

        r3 = r3.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        goto label10;

     label8:
        if i0 <= 0 goto label9;

        r3 = r3.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        goto label10;

     label9:
        $r13 = virtualinvoke r3.<java.util.TreeMap$Entry: java.lang.Object setValue(java.lang.Object)>(r2);
        return $r13;

     label10:
        if r3 != null goto label7;

     label11:
        $r14 = new java.util.TreeMap$Entry;
        specialinvoke $r14.<java.util.TreeMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.util.TreeMap$Entry)>(r1, r2, r5);
        r15 = $r14;
        if i0 >= 0 goto label12;

        r5.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left> = r15;
        goto label13;

     label12:
        r5.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right> = r15;

     label13:
        specialinvoke r0.<java.util.TreeMap: void fixAfterInsertion(java.util.TreeMap$Entry)>(r15);
        $i4 = r0.<java.util.TreeMap: int size>;
        $i5 = $i4 + 1;
        r0.<java.util.TreeMap: int size> = $i5;
        $i6 = r0.<java.util.TreeMap: int modCount>;
        $i7 = $i6 + 1;
        r0.<java.util.TreeMap: int modCount> = $i7;
        return null;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, r3;
        java.util.TreeMap$Entry r2;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>(r1);
        if r2 != null goto label0;

        return null;

     label0:
        r3 = r2.<java.util.TreeMap$Entry: java.lang.Object value>;
        specialinvoke r0.<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>(r2);
        return r3;
    }

    public void clear()
    {
        java.util.TreeMap r0;
        int $i0, $i1;

        r0 := @this: java.util.TreeMap;
        $i0 = r0.<java.util.TreeMap: int modCount>;
        $i1 = $i0 + 1;
        r0.<java.util.TreeMap: int modCount> = $i1;
        r0.<java.util.TreeMap: int size> = 0;
        r0.<java.util.TreeMap: java.util.TreeMap$Entry root> = null;
        return;
    }

    public java.lang.Object clone()
    {
        java.util.TreeMap r0, r3;
        null_type n0;
        java.lang.CloneNotSupportedException r1, $r4;
        java.lang.Object $r2;
        java.lang.InternalError $r5;
        int $i0;
        java.util.Set $r6;
        java.util.Iterator $r7;
        java.io.IOException $r8, r9;
        java.lang.ClassNotFoundException $r10, r11;

        r0 := @this: java.util.TreeMap;
        n0 = null;

     label0:
        $r2 = specialinvoke r0.<java.util.AbstractMap: java.lang.Object clone()>();
        r3 = (java.util.TreeMap) $r2;

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        $r5 = new java.lang.InternalError;
        specialinvoke $r5.<java.lang.InternalError: void <init>()>();
        throw $r5;

     label3:
        r3.<java.util.TreeMap: java.util.TreeMap$Entry root> = null;
        r3.<java.util.TreeMap: int size> = 0;
        r3.<java.util.TreeMap: int modCount> = 0;
        r3.<java.util.TreeMap: java.util.TreeMap$EntrySet entrySet> = null;
        r3.<java.util.TreeMap: java.util.TreeMap$KeySet navigableKeySet> = null;
        r3.<java.util.TreeMap: java.util.NavigableMap descendingMap> = null;

     label4:
        $i0 = r0.<java.util.TreeMap: int size>;
        $r6 = virtualinvoke r0.<java.util.TreeMap: java.util.Set entrySet()>();
        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();
        specialinvoke r3.<java.util.TreeMap: void buildFromSorted(int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>($i0, $r7, null, null);

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;
        r9 = $r8;
        goto label8;

     label7:
        $r10 := @caughtexception;
        r11 = $r10;

     label8:
        return r3;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
        catch java.io.IOException from label4 to label5 with label6;
        catch java.lang.ClassNotFoundException from label4 to label5 with label7;
    }

    public java.util.Map$Entry firstEntry()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Entry $r1;
        java.util.Map$Entry $r2;

        r0 := @this: java.util.TreeMap;
        $r1 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getFirstEntry()>();
        $r2 = staticinvoke <java.util.TreeMap: java.util.Map$Entry exportEntry(java.util.TreeMap$Entry)>($r1);
        return $r2;
    }

    public java.util.Map$Entry lastEntry()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Entry $r1;
        java.util.Map$Entry $r2;

        r0 := @this: java.util.TreeMap;
        $r1 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getLastEntry()>();
        $r2 = staticinvoke <java.util.TreeMap: java.util.Map$Entry exportEntry(java.util.TreeMap$Entry)>($r1);
        return $r2;
    }

    public java.util.Map$Entry pollFirstEntry()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Entry r1;
        java.util.Map$Entry r2;

        r0 := @this: java.util.TreeMap;
        r1 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getFirstEntry()>();
        r2 = staticinvoke <java.util.TreeMap: java.util.Map$Entry exportEntry(java.util.TreeMap$Entry)>(r1);
        if r1 == null goto label0;

        specialinvoke r0.<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>(r1);

     label0:
        return r2;
    }

    public java.util.Map$Entry pollLastEntry()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Entry r1;
        java.util.Map$Entry r2;

        r0 := @this: java.util.TreeMap;
        r1 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getLastEntry()>();
        r2 = staticinvoke <java.util.TreeMap: java.util.Map$Entry exportEntry(java.util.TreeMap$Entry)>(r1);
        if r1 == null goto label0;

        specialinvoke r0.<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>(r1);

     label0:
        return r2;
    }

    public java.util.Map$Entry lowerEntry(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Entry $r2;
        java.util.Map$Entry $r3;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getLowerEntry(java.lang.Object)>(r1);
        $r3 = staticinvoke <java.util.TreeMap: java.util.Map$Entry exportEntry(java.util.TreeMap$Entry)>($r2);
        return $r3;
    }

    public java.lang.Object lowerKey(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap$Entry $r2;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getLowerEntry(java.lang.Object)>(r1);
        $r3 = staticinvoke <java.util.TreeMap: java.lang.Object keyOrNull(java.util.TreeMap$Entry)>($r2);
        return $r3;
    }

    public java.util.Map$Entry floorEntry(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Entry $r2;
        java.util.Map$Entry $r3;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getFloorEntry(java.lang.Object)>(r1);
        $r3 = staticinvoke <java.util.TreeMap: java.util.Map$Entry exportEntry(java.util.TreeMap$Entry)>($r2);
        return $r3;
    }

    public java.lang.Object floorKey(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap$Entry $r2;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getFloorEntry(java.lang.Object)>(r1);
        $r3 = staticinvoke <java.util.TreeMap: java.lang.Object keyOrNull(java.util.TreeMap$Entry)>($r2);
        return $r3;
    }

    public java.util.Map$Entry ceilingEntry(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Entry $r2;
        java.util.Map$Entry $r3;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getCeilingEntry(java.lang.Object)>(r1);
        $r3 = staticinvoke <java.util.TreeMap: java.util.Map$Entry exportEntry(java.util.TreeMap$Entry)>($r2);
        return $r3;
    }

    public java.lang.Object ceilingKey(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap$Entry $r2;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getCeilingEntry(java.lang.Object)>(r1);
        $r3 = staticinvoke <java.util.TreeMap: java.lang.Object keyOrNull(java.util.TreeMap$Entry)>($r2);
        return $r3;
    }

    public java.util.Map$Entry higherEntry(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Entry $r2;
        java.util.Map$Entry $r3;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getHigherEntry(java.lang.Object)>(r1);
        $r3 = staticinvoke <java.util.TreeMap: java.util.Map$Entry exportEntry(java.util.TreeMap$Entry)>($r2);
        return $r3;
    }

    public java.lang.Object higherKey(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap$Entry $r2;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getHigherEntry(java.lang.Object)>(r1);
        $r3 = staticinvoke <java.util.TreeMap: java.lang.Object keyOrNull(java.util.TreeMap$Entry)>($r2);
        return $r3;
    }

    public java.util.Set keySet()
    {
        java.util.TreeMap r0;
        java.util.NavigableSet $r1;

        r0 := @this: java.util.TreeMap;
        $r1 = virtualinvoke r0.<java.util.TreeMap: java.util.NavigableSet navigableKeySet()>();
        return $r1;
    }

    public java.util.NavigableSet navigableKeySet()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$KeySet r1, $r2, $r3;

        r0 := @this: java.util.TreeMap;
        r1 = r0.<java.util.TreeMap: java.util.TreeMap$KeySet navigableKeySet>;
        if r1 == null goto label0;

        $r3 = r1;
        goto label1;

     label0:
        $r2 = new java.util.TreeMap$KeySet;
        specialinvoke $r2.<java.util.TreeMap$KeySet: void <init>(java.util.NavigableMap)>(r0);
        $r3 = $r2;
        r0.<java.util.TreeMap: java.util.TreeMap$KeySet navigableKeySet> = $r2;

     label1:
        return $r3;
    }

    public java.util.NavigableSet descendingKeySet()
    {
        java.util.TreeMap r0;
        java.util.NavigableMap $r1;
        java.util.NavigableSet $r2;

        r0 := @this: java.util.TreeMap;
        $r1 = virtualinvoke r0.<java.util.TreeMap: java.util.NavigableMap descendingMap()>();
        $r2 = interfaceinvoke $r1.<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>();
        return $r2;
    }

    public java.util.Collection values()
    {
        java.util.TreeMap r0;
        java.util.Collection r1, $r3;
        java.util.TreeMap$Values $r2;

        r0 := @this: java.util.TreeMap;
        r1 = r0.<java.util.TreeMap: java.util.Collection values>;
        if r1 == null goto label0;

        $r3 = r1;
        goto label1;

     label0:
        $r2 = new java.util.TreeMap$Values;
        specialinvoke $r2.<java.util.TreeMap$Values: void <init>(java.util.TreeMap)>(r0);
        $r3 = $r2;
        r0.<java.util.TreeMap: java.util.Collection values> = $r2;

     label1:
        return $r3;
    }

    public java.util.Set entrySet()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$EntrySet r1, $r2, $r3;

        r0 := @this: java.util.TreeMap;
        r1 = r0.<java.util.TreeMap: java.util.TreeMap$EntrySet entrySet>;
        if r1 == null goto label0;

        $r3 = r1;
        goto label1;

     label0:
        $r2 = new java.util.TreeMap$EntrySet;
        specialinvoke $r2.<java.util.TreeMap$EntrySet: void <init>(java.util.TreeMap)>(r0);
        $r3 = $r2;
        r0.<java.util.TreeMap: java.util.TreeMap$EntrySet entrySet> = $r2;

     label1:
        return $r3;
    }

    public java.util.NavigableMap descendingMap()
    {
        java.util.TreeMap r0;
        java.util.NavigableMap r1, $r3;
        java.util.TreeMap$DescendingSubMap $r2;

        r0 := @this: java.util.TreeMap;
        r1 = r0.<java.util.TreeMap: java.util.NavigableMap descendingMap>;
        if r1 == null goto label0;

        $r3 = r1;
        goto label1;

     label0:
        $r2 = new java.util.TreeMap$DescendingSubMap;
        specialinvoke $r2.<java.util.TreeMap$DescendingSubMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,boolean,boolean,java.lang.Object,boolean)>(r0, 1, null, 1, 1, null, 1);
        $r3 = $r2;
        r0.<java.util.TreeMap: java.util.NavigableMap descendingMap> = $r2;

     label1:
        return $r3;
    }

    public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, r2;
        boolean z0, z1;
        java.util.TreeMap$AscendingSubMap $r3;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        z0 := @parameter1: boolean;
        r2 := @parameter2: java.lang.Object;
        z1 := @parameter3: boolean;
        $r3 = new java.util.TreeMap$AscendingSubMap;
        specialinvoke $r3.<java.util.TreeMap$AscendingSubMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,boolean,boolean,java.lang.Object,boolean)>(r0, 0, r1, z0, 0, r2, z1);
        return $r3;
    }

    public java.util.NavigableMap headMap(java.lang.Object, boolean)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        boolean z0;
        java.util.TreeMap$AscendingSubMap $r2;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        z0 := @parameter1: boolean;
        $r2 = new java.util.TreeMap$AscendingSubMap;
        specialinvoke $r2.<java.util.TreeMap$AscendingSubMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,boolean,boolean,java.lang.Object,boolean)>(r0, 1, null, 1, 0, r1, z0);
        return $r2;
    }

    public java.util.NavigableMap tailMap(java.lang.Object, boolean)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        boolean z0;
        java.util.TreeMap$AscendingSubMap $r2;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        z0 := @parameter1: boolean;
        $r2 = new java.util.TreeMap$AscendingSubMap;
        specialinvoke $r2.<java.util.TreeMap$AscendingSubMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,boolean,boolean,java.lang.Object,boolean)>(r0, 0, r1, z0, 1, null, 1);
        return $r2;
    }

    public java.util.SortedMap subMap(java.lang.Object, java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, r2;
        java.util.NavigableMap $r3;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r3 = virtualinvoke r0.<java.util.TreeMap: java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, 1, r2, 0);
        return $r3;
    }

    public java.util.SortedMap headMap(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        java.util.NavigableMap $r2;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap: java.util.NavigableMap headMap(java.lang.Object,boolean)>(r1, 0);
        return $r2;
    }

    public java.util.SortedMap tailMap(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        java.util.NavigableMap $r2;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap: java.util.NavigableMap tailMap(java.lang.Object,boolean)>(r1, 1);
        return $r2;
    }

    java.util.Iterator keyIterator()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$KeyIterator $r1;
        java.util.TreeMap$Entry $r2;

        r0 := @this: java.util.TreeMap;
        $r1 = new java.util.TreeMap$KeyIterator;
        $r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getFirstEntry()>();
        specialinvoke $r1.<java.util.TreeMap$KeyIterator: void <init>(java.util.TreeMap,java.util.TreeMap$Entry)>(r0, $r2);
        return $r1;
    }

    java.util.Iterator descendingKeyIterator()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$DescendingKeyIterator $r1;
        java.util.TreeMap$Entry $r2;

        r0 := @this: java.util.TreeMap;
        $r1 = new java.util.TreeMap$DescendingKeyIterator;
        $r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry getLastEntry()>();
        specialinvoke $r1.<java.util.TreeMap$DescendingKeyIterator: void <init>(java.util.TreeMap,java.util.TreeMap$Entry)>(r0, $r2);
        return $r1;
    }

    final int compare(java.lang.Object, java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, r2;
        java.util.Comparator $r3, $r5;
        java.lang.Comparable $r4;
        int $i0;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r3 = r0.<java.util.TreeMap: java.util.Comparator comparator>;
        if $r3 != null goto label0;

        $r4 = (java.lang.Comparable) r1;
        $i0 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r2);
        goto label1;

     label0:
        $r5 = r0.<java.util.TreeMap: java.util.Comparator comparator>;
        $i0 = interfaceinvoke $r5.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, r2);

     label1:
        return $i0;
    }

    static final boolean valEquals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        if r0 != null goto label1;

        if r1 != null goto label0;

        $z0 = 1;
        goto label2;

     label0:
        $z0 = 0;
        goto label2;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

     label2:
        return $z0;
    }

    static java.util.Map$Entry exportEntry(java.util.TreeMap$Entry)
    {
        java.util.TreeMap$Entry r0;
        java.util.AbstractMap$SimpleImmutableEntry $r1;

        r0 := @parameter0: java.util.TreeMap$Entry;
        if r0 != null goto label0;

        $r1 = null;
        goto label1;

     label0:
        $r1 = new java.util.AbstractMap$SimpleImmutableEntry;
        specialinvoke $r1.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.util.Map$Entry)>(r0);

     label1:
        return $r1;
    }

    static java.lang.Object keyOrNull(java.util.TreeMap$Entry)
    {
        java.util.TreeMap$Entry r0;
        java.lang.Object $r1;

        r0 := @parameter0: java.util.TreeMap$Entry;
        if r0 != null goto label0;

        $r1 = null;
        goto label1;

     label0:
        $r1 = r0.<java.util.TreeMap$Entry: java.lang.Object key>;

     label1:
        return $r1;
    }

    static java.lang.Object key(java.util.TreeMap$Entry)
    {
        java.util.TreeMap$Entry r0;
        java.util.NoSuchElementException $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.util.TreeMap$Entry;
        if r0 != null goto label0;

        $r1 = new java.util.NoSuchElementException;
        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();
        throw $r1;

     label0:
        $r2 = r0.<java.util.TreeMap$Entry: java.lang.Object key>;
        return $r2;
    }

    final java.util.TreeMap$Entry getFirstEntry()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Entry r1, $r2;

        r0 := @this: java.util.TreeMap;
        r1 = r0.<java.util.TreeMap: java.util.TreeMap$Entry root>;
        if r1 == null goto label1;

     label0:
        $r2 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        if $r2 == null goto label1;

        r1 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        goto label0;

     label1:
        return r1;
    }

    final java.util.TreeMap$Entry getLastEntry()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Entry r1, $r2;

        r0 := @this: java.util.TreeMap;
        r1 = r0.<java.util.TreeMap: java.util.TreeMap$Entry root>;
        if r1 == null goto label1;

     label0:
        $r2 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        if $r2 == null goto label1;

        r1 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        goto label0;

     label1:
        return r1;
    }

    static java.util.TreeMap$Entry successor(java.util.TreeMap$Entry)
    {
        java.util.TreeMap$Entry r0, r1, r2, $r3, $r4, r5, $r6;

        r0 := @parameter0: java.util.TreeMap$Entry;
        if r0 != null goto label0;

        return null;

     label0:
        $r3 = r0.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        if $r3 == null goto label3;

        r1 = r0.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;

     label1:
        $r4 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        if $r4 == null goto label2;

        r1 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        goto label1;

     label2:
        return r1;

     label3:
        r5 = r0.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        r2 = r0;

     label4:
        if r5 == null goto label5;

        $r6 = r5.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        if r2 != $r6 goto label5;

        r2 = r5;
        r5 = r5.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        goto label4;

     label5:
        return r5;
    }

    static java.util.TreeMap$Entry predecessor(java.util.TreeMap$Entry)
    {
        java.util.TreeMap$Entry r0, r1, r2, $r3, $r4, r5, $r6;

        r0 := @parameter0: java.util.TreeMap$Entry;
        if r0 != null goto label0;

        return null;

     label0:
        $r3 = r0.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        if $r3 == null goto label3;

        r1 = r0.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;

     label1:
        $r4 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        if $r4 == null goto label2;

        r1 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        goto label1;

     label2:
        return r1;

     label3:
        r5 = r0.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        r2 = r0;

     label4:
        if r5 == null goto label5;

        $r6 = r5.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        if r2 != $r6 goto label5;

        r2 = r5;
        r5 = r5.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        goto label4;

     label5:
        return r5;
    }

    private static boolean colorOf(java.util.TreeMap$Entry)
    {
        java.util.TreeMap$Entry r0;
        boolean $z0;

        r0 := @parameter0: java.util.TreeMap$Entry;
        if r0 != null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = r0.<java.util.TreeMap$Entry: boolean color>;

     label1:
        return $z0;
    }

    private static java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)
    {
        java.util.TreeMap$Entry r0, $r1;

        r0 := @parameter0: java.util.TreeMap$Entry;
        if r0 != null goto label0;

        $r1 = null;
        goto label1;

     label0:
        $r1 = r0.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;

     label1:
        return $r1;
    }

    private static void setColor(java.util.TreeMap$Entry, boolean)
    {
        java.util.TreeMap$Entry r0;
        boolean z0;

        r0 := @parameter0: java.util.TreeMap$Entry;
        z0 := @parameter1: boolean;
        if r0 == null goto label0;

        r0.<java.util.TreeMap$Entry: boolean color> = z0;

     label0:
        return;
    }

    private static java.util.TreeMap$Entry leftOf(java.util.TreeMap$Entry)
    {
        java.util.TreeMap$Entry r0, $r1;

        r0 := @parameter0: java.util.TreeMap$Entry;
        if r0 != null goto label0;

        $r1 = null;
        goto label1;

     label0:
        $r1 = r0.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;

     label1:
        return $r1;
    }

    private static java.util.TreeMap$Entry rightOf(java.util.TreeMap$Entry)
    {
        java.util.TreeMap$Entry r0, $r1;

        r0 := @parameter0: java.util.TreeMap$Entry;
        if r0 != null goto label0;

        $r1 = null;
        goto label1;

     label0:
        $r1 = r0.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;

     label1:
        return $r1;
    }

    private void rotateLeft(java.util.TreeMap$Entry)
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Entry r1, r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.util.TreeMap$Entry;
        if r1 == null goto label4;

        r2 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        $r3 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right> = $r3;
        $r4 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        if $r4 == null goto label0;

        $r5 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        $r5.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent> = r1;

     label0:
        $r6 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent> = $r6;
        $r7 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        if $r7 != null goto label1;

        r0.<java.util.TreeMap: java.util.TreeMap$Entry root> = r2;
        goto label3;

     label1:
        $r8 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        $r9 = $r8.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        if $r9 != r1 goto label2;

        $r10 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        $r10.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left> = r2;
        goto label3;

     label2:
        $r11 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        $r11.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right> = r2;

     label3:
        r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left> = r1;
        r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent> = r2;

     label4:
        return;
    }

    private void rotateRight(java.util.TreeMap$Entry)
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Entry r1, r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.util.TreeMap$Entry;
        if r1 == null goto label4;

        r2 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        $r3 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left> = $r3;
        $r4 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        if $r4 == null goto label0;

        $r5 = r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        $r5.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent> = r1;

     label0:
        $r6 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent> = $r6;
        $r7 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        if $r7 != null goto label1;

        r0.<java.util.TreeMap: java.util.TreeMap$Entry root> = r2;
        goto label3;

     label1:
        $r8 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        $r9 = $r8.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        if $r9 != r1 goto label2;

        $r10 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        $r10.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right> = r2;
        goto label3;

     label2:
        $r11 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        $r11.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left> = r2;

     label3:
        r2.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right> = r1;
        r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent> = r2;

     label4:
        return;
    }

    private void fixAfterInsertion(java.util.TreeMap$Entry)
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Entry r1, r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.util.TreeMap$Entry;
        r1.<java.util.TreeMap$Entry: boolean color> = 0;

     label0:
        if r1 == null goto label8;

        $r3 = r0.<java.util.TreeMap: java.util.TreeMap$Entry root>;
        if r1 == $r3 goto label8;

        $r4 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        $z0 = $r4.<java.util.TreeMap$Entry: boolean color>;
        if $z0 != 0 goto label8;

        $r5 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        $r6 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        $r7 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>($r6);
        $r8 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry leftOf(java.util.TreeMap$Entry)>($r7);
        if $r5 != $r8 goto label4;

        $r9 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        $r10 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>($r9);
        r2 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry rightOf(java.util.TreeMap$Entry)>($r10);
        $z1 = staticinvoke <java.util.TreeMap: boolean colorOf(java.util.TreeMap$Entry)>(r2);
        if $z1 != 0 goto label1;

        $r11 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>($r11, 1);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>(r2, 1);
        $r12 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        $r13 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>($r12);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>($r13, 0);
        $r14 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        r1 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>($r14);
        goto label3;

     label1:
        $r15 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        $r16 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry rightOf(java.util.TreeMap$Entry)>($r15);
        if r1 != $r16 goto label2;

        r1 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        specialinvoke r0.<java.util.TreeMap: void rotateLeft(java.util.TreeMap$Entry)>(r1);

     label2:
        $r17 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>($r17, 1);
        $r18 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        $r19 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>($r18);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>($r19, 0);
        $r20 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        $r21 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>($r20);
        specialinvoke r0.<java.util.TreeMap: void rotateRight(java.util.TreeMap$Entry)>($r21);

     label3:
        goto label0;

     label4:
        $r22 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        $r23 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>($r22);
        r24 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry leftOf(java.util.TreeMap$Entry)>($r23);
        $z2 = staticinvoke <java.util.TreeMap: boolean colorOf(java.util.TreeMap$Entry)>(r24);
        if $z2 != 0 goto label5;

        $r25 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>($r25, 1);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>(r24, 1);
        $r26 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        $r27 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>($r26);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>($r27, 0);
        $r28 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        r1 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>($r28);
        goto label7;

     label5:
        $r29 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        $r30 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry leftOf(java.util.TreeMap$Entry)>($r29);
        if r1 != $r30 goto label6;

        r1 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        specialinvoke r0.<java.util.TreeMap: void rotateRight(java.util.TreeMap$Entry)>(r1);

     label6:
        $r31 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>($r31, 1);
        $r32 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        $r33 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>($r32);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>($r33, 0);
        $r34 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        $r35 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>($r34);
        specialinvoke r0.<java.util.TreeMap: void rotateLeft(java.util.TreeMap$Entry)>($r35);

     label7:
        goto label0;

     label8:
        $r36 = r0.<java.util.TreeMap: java.util.TreeMap$Entry root>;
        $r36.<java.util.TreeMap$Entry: boolean color> = 1;
        return;
    }

    private void deleteEntry(java.util.TreeMap$Entry)
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Entry r1, r3, $r5, $r6, $r9, $r10, r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25;
        null_type $n0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r7, $r8;
        boolean $z0, $z1;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.util.TreeMap$Entry;
        $i0 = r0.<java.util.TreeMap: int modCount>;
        $i1 = $i0 + 1;
        r0.<java.util.TreeMap: int modCount> = $i1;
        $i2 = r0.<java.util.TreeMap: int size>;
        $i3 = $i2 - 1;
        r0.<java.util.TreeMap: int size> = $i3;
        $r5 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        if $r5 == null goto label0;

        $r6 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        if $r6 == null goto label0;

        r3 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry successor(java.util.TreeMap$Entry)>(r1);
        $r7 = r3.<java.util.TreeMap$Entry: java.lang.Object key>;
        r1.<java.util.TreeMap$Entry: java.lang.Object key> = $r7;
        $r8 = r3.<java.util.TreeMap$Entry: java.lang.Object value>;
        r1.<java.util.TreeMap$Entry: java.lang.Object value> = $r8;
        r1 = r3;

     label0:
        $r9 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        if $r9 == null goto label1;

        $r10 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        goto label2;

     label1:
        $r10 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;

     label2:
        r11 = $r10;
        if r11 == null goto label6;

        $r12 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        r11.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent> = $r12;
        $r13 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        if $r13 != null goto label3;

        r0.<java.util.TreeMap: java.util.TreeMap$Entry root> = r11;
        goto label5;

     label3:
        $r14 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        $r15 = $r14.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        if r1 != $r15 goto label4;

        $r16 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        $r16.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left> = r11;
        goto label5;

     label4:
        $r17 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        $r17.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right> = r11;

     label5:
        $n0 = null;
        r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent> = $n0;
        r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right> = $n0;
        r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left> = $n0;
        $z0 = r1.<java.util.TreeMap$Entry: boolean color>;
        if $z0 != 1 goto label11;

        specialinvoke r0.<java.util.TreeMap: void fixAfterDeletion(java.util.TreeMap$Entry)>(r11);
        goto label11;

     label6:
        $r18 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        if $r18 != null goto label7;

        r0.<java.util.TreeMap: java.util.TreeMap$Entry root> = null;
        goto label11;

     label7:
        $z1 = r1.<java.util.TreeMap$Entry: boolean color>;
        if $z1 != 1 goto label8;

        specialinvoke r0.<java.util.TreeMap: void fixAfterDeletion(java.util.TreeMap$Entry)>(r1);

     label8:
        $r19 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        if $r19 == null goto label11;

        $r20 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        $r21 = $r20.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        if r1 != $r21 goto label9;

        $r22 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        $r22.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left> = null;
        goto label10;

     label9:
        $r23 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        $r24 = $r23.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        if r1 != $r24 goto label10;

        $r25 = r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent>;
        $r25.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right> = null;

     label10:
        r1.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent> = null;

     label11:
        return;
    }

    private void fixAfterDeletion(java.util.TreeMap$Entry)
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Entry r1, r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.util.TreeMap$Entry;

     label0:
        $r3 = r0.<java.util.TreeMap: java.util.TreeMap$Entry root>;
        if r1 == $r3 goto label10;

        $z0 = staticinvoke <java.util.TreeMap: boolean colorOf(java.util.TreeMap$Entry)>(r1);
        if $z0 != 1 goto label10;

        $r4 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        $r5 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry leftOf(java.util.TreeMap$Entry)>($r4);
        if r1 != $r5 goto label5;

        $r6 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        r2 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry rightOf(java.util.TreeMap$Entry)>($r6);
        $z1 = staticinvoke <java.util.TreeMap: boolean colorOf(java.util.TreeMap$Entry)>(r2);
        if $z1 != 0 goto label1;

        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>(r2, 1);
        $r7 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>($r7, 0);
        $r8 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        specialinvoke r0.<java.util.TreeMap: void rotateLeft(java.util.TreeMap$Entry)>($r8);
        $r9 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        r2 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry rightOf(java.util.TreeMap$Entry)>($r9);

     label1:
        $r10 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry leftOf(java.util.TreeMap$Entry)>(r2);
        $z2 = staticinvoke <java.util.TreeMap: boolean colorOf(java.util.TreeMap$Entry)>($r10);
        if $z2 != 1 goto label2;

        $r11 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry rightOf(java.util.TreeMap$Entry)>(r2);
        $z3 = staticinvoke <java.util.TreeMap: boolean colorOf(java.util.TreeMap$Entry)>($r11);
        if $z3 != 1 goto label2;

        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>(r2, 0);
        r1 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        goto label4;

     label2:
        $r12 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry rightOf(java.util.TreeMap$Entry)>(r2);
        $z4 = staticinvoke <java.util.TreeMap: boolean colorOf(java.util.TreeMap$Entry)>($r12);
        if $z4 != 1 goto label3;

        $r13 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry leftOf(java.util.TreeMap$Entry)>(r2);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>($r13, 1);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>(r2, 0);
        specialinvoke r0.<java.util.TreeMap: void rotateRight(java.util.TreeMap$Entry)>(r2);
        $r14 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        r2 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry rightOf(java.util.TreeMap$Entry)>($r14);

     label3:
        $r15 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        $z5 = staticinvoke <java.util.TreeMap: boolean colorOf(java.util.TreeMap$Entry)>($r15);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>(r2, $z5);
        $r16 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>($r16, 1);
        $r17 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry rightOf(java.util.TreeMap$Entry)>(r2);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>($r17, 1);
        $r18 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        specialinvoke r0.<java.util.TreeMap: void rotateLeft(java.util.TreeMap$Entry)>($r18);
        r1 = r0.<java.util.TreeMap: java.util.TreeMap$Entry root>;

     label4:
        goto label0;

     label5:
        $r19 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        r20 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry leftOf(java.util.TreeMap$Entry)>($r19);
        $z6 = staticinvoke <java.util.TreeMap: boolean colorOf(java.util.TreeMap$Entry)>(r20);
        if $z6 != 0 goto label6;

        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>(r20, 1);
        $r21 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>($r21, 0);
        $r22 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        specialinvoke r0.<java.util.TreeMap: void rotateRight(java.util.TreeMap$Entry)>($r22);
        $r23 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        r20 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry leftOf(java.util.TreeMap$Entry)>($r23);

     label6:
        $r24 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry rightOf(java.util.TreeMap$Entry)>(r20);
        $z7 = staticinvoke <java.util.TreeMap: boolean colorOf(java.util.TreeMap$Entry)>($r24);
        if $z7 != 1 goto label7;

        $r25 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry leftOf(java.util.TreeMap$Entry)>(r20);
        $z8 = staticinvoke <java.util.TreeMap: boolean colorOf(java.util.TreeMap$Entry)>($r25);
        if $z8 != 1 goto label7;

        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>(r20, 0);
        r1 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        goto label9;

     label7:
        $r26 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry leftOf(java.util.TreeMap$Entry)>(r20);
        $z9 = staticinvoke <java.util.TreeMap: boolean colorOf(java.util.TreeMap$Entry)>($r26);
        if $z9 != 1 goto label8;

        $r27 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry rightOf(java.util.TreeMap$Entry)>(r20);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>($r27, 1);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>(r20, 0);
        specialinvoke r0.<java.util.TreeMap: void rotateLeft(java.util.TreeMap$Entry)>(r20);
        $r28 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        r20 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry leftOf(java.util.TreeMap$Entry)>($r28);

     label8:
        $r29 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        $z10 = staticinvoke <java.util.TreeMap: boolean colorOf(java.util.TreeMap$Entry)>($r29);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>(r20, $z10);
        $r30 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>($r30, 1);
        $r31 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry leftOf(java.util.TreeMap$Entry)>(r20);
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>($r31, 1);
        $r32 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry parentOf(java.util.TreeMap$Entry)>(r1);
        specialinvoke r0.<java.util.TreeMap: void rotateRight(java.util.TreeMap$Entry)>($r32);
        r1 = r0.<java.util.TreeMap: java.util.TreeMap$Entry root>;

     label9:
        goto label0;

     label10:
        staticinvoke <java.util.TreeMap: void setColor(java.util.TreeMap$Entry,boolean)>(r1, 1);
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.TreeMap r0;
        java.io.ObjectOutputStream r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        int $i0;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.io.ObjectOutputStream;
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        $i0 = r0.<java.util.TreeMap: int size>;
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);
        $r4 = virtualinvoke r0.<java.util.TreeMap: java.util.Set entrySet()>();
        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.Map$Entry) $r5;
        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r6);
        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r7);
        goto label0;

     label1:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.TreeMap r0;
        java.io.ObjectInputStream r1;
        int i0;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();
        specialinvoke r0.<java.util.TreeMap: void buildFromSorted(int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>(i0, null, r1, null);
        return;
    }

    void readTreeSet(int, java.io.ObjectInputStream, java.lang.Object) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.TreeMap r0;
        int i0;
        java.io.ObjectInputStream r1;
        java.lang.Object r2;

        r0 := @this: java.util.TreeMap;
        i0 := @parameter0: int;
        r1 := @parameter1: java.io.ObjectInputStream;
        r2 := @parameter2: java.lang.Object;
        specialinvoke r0.<java.util.TreeMap: void buildFromSorted(int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>(i0, null, r1, r2);
        return;
    }

    void addAllForTreeSet(java.util.SortedSet, java.lang.Object)
    {
        java.util.TreeMap r0;
        java.util.SortedSet r1;
        java.lang.Object r2;
        java.io.IOException r3, $r5;
        int $i0;
        java.util.Iterator $r4;
        java.lang.ClassNotFoundException $r6, r7;

        r0 := @this: java.util.TreeMap;
        r1 := @parameter0: java.util.SortedSet;
        r2 := @parameter1: java.lang.Object;

     label0:
        $i0 = interfaceinvoke r1.<java.util.SortedSet: int size()>();
        $r4 = interfaceinvoke r1.<java.util.SortedSet: java.util.Iterator iterator()>();
        specialinvoke r0.<java.util.TreeMap: void buildFromSorted(int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>($i0, $r4, null, r2);

     label1:
        goto label4;

     label2:
        $r5 := @caughtexception;
        r3 = $r5;
        goto label4;

     label3:
        $r6 := @caughtexception;
        r7 = $r6;

     label4:
        return;

        catch java.io.IOException from label0 to label1 with label2;
        catch java.lang.ClassNotFoundException from label0 to label1 with label3;
    }

    private void buildFromSorted(int, java.util.Iterator, java.io.ObjectInputStream, java.lang.Object) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.TreeMap r0;
        int i0, $i1, $i2;
        java.util.Iterator r1;
        java.io.ObjectInputStream r2;
        java.lang.Object r3;
        java.util.TreeMap$Entry $r4;

        r0 := @this: java.util.TreeMap;
        i0 := @parameter0: int;
        r1 := @parameter1: java.util.Iterator;
        r2 := @parameter2: java.io.ObjectInputStream;
        r3 := @parameter3: java.lang.Object;
        r0.<java.util.TreeMap: int size> = i0;
        $i1 = i0 - 1;
        $i2 = staticinvoke <java.util.TreeMap: int computeRedLevel(int)>(i0);
        $r4 = specialinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>(0, 0, $i1, $i2, r1, r2, r3);
        r0.<java.util.TreeMap: java.util.TreeMap$Entry root> = $r4;
        return;
    }

    private final java.util.TreeMap$Entry buildFromSorted(int, int, int, int, java.util.Iterator, java.io.ObjectInputStream, java.lang.Object) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.TreeMap r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9;
        java.util.Iterator r1;
        java.io.ObjectInputStream r2;
        java.lang.Object r3, r6, r7, $r9, $r10;
        java.util.TreeMap$Entry r4, r8, $r11, r12;
        java.util.Map$Entry r5;

        r0 := @this: java.util.TreeMap;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        r1 := @parameter4: java.util.Iterator;
        r2 := @parameter5: java.io.ObjectInputStream;
        r3 := @parameter6: java.lang.Object;
        if i2 >= i1 goto label0;

        return null;

     label0:
        $i5 = i1 + i2;
        i4 = $i5 >>> 1;
        r4 = null;
        if i1 >= i4 goto label1;

        $i6 = i0 + 1;
        $i7 = i4 - 1;
        r4 = specialinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>($i6, i1, $i7, i3, r1, r2, r3);

     label1:
        if r1 == null goto label3;

        if r3 != null goto label2;

        $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.util.Map$Entry) $r9;
        r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();
        r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();
        goto label6;

     label2:
        r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        r7 = r3;
        goto label6;

     label3:
        r6 = virtualinvoke r2.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        if r3 == null goto label4;

        $r10 = r3;
        goto label5;

     label4:
        $r10 = virtualinvoke r2.<java.io.ObjectInputStream: java.lang.Object readObject()>();

     label5:
        r7 = $r10;

     label6:
        $r11 = new java.util.TreeMap$Entry;
        specialinvoke $r11.<java.util.TreeMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.util.TreeMap$Entry)>(r6, r7, null);
        r12 = $r11;
        if i0 != i3 goto label7;

        r12.<java.util.TreeMap$Entry: boolean color> = 0;

     label7:
        if r4 == null goto label8;

        r12.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left> = r4;
        r4.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent> = r12;

     label8:
        if i4 >= i2 goto label9;

        $i8 = i0 + 1;
        $i9 = i4 + 1;
        r8 = specialinvoke r0.<java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>($i8, $i9, i2, i3, r1, r2, r3);
        r12.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right> = r8;
        r8.<java.util.TreeMap$Entry: java.util.TreeMap$Entry parent> = r12;

     label9:
        return r12;
    }

    private static int computeRedLevel(int)
    {
        int i0, i1, i2, $i3;

        i0 := @parameter0: int;
        i1 = 0;
        i2 = i0 - 1;

     label0:
        if i2 < 0 goto label1;

        i1 = i1 + 1;
        $i3 = i2 / 2;
        i2 = $i3 - 1;
        goto label0;

     label1:
        return i1;
    }

    static void access$000(java.util.TreeMap, java.util.TreeMap$Entry)
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Entry r1;

        r0 := @parameter0: java.util.TreeMap;
        r1 := @parameter1: java.util.TreeMap$Entry;
        specialinvoke r0.<java.util.TreeMap: void deleteEntry(java.util.TreeMap$Entry)>(r1);
        return;
    }

    static int access$100(java.util.TreeMap)
    {
        java.util.TreeMap r0;
        int $i0;

        r0 := @parameter0: java.util.TreeMap;
        $i0 = r0.<java.util.TreeMap: int modCount>;
        return $i0;
    }

    static java.lang.Object access$200()
    {
        java.lang.Object $r0;

        $r0 = <java.util.TreeMap: java.lang.Object UNBOUNDED>;
        return $r0;
    }

    static java.util.Comparator access$300(java.util.TreeMap)
    {
        java.util.TreeMap r0;
        java.util.Comparator $r1;

        r0 := @parameter0: java.util.TreeMap;
        $r1 = r0.<java.util.TreeMap: java.util.Comparator comparator>;
        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;
        specialinvoke $r0.<java.lang.Object: void <init>()>();
        <java.util.TreeMap: java.lang.Object UNBOUNDED> = $r0;
        return;
    }
}
