class java.lang.StringCoding extends java.lang.Object
{
    private static final java.lang.ThreadLocal decoder;
    private static final java.lang.ThreadLocal encoder;
    private static boolean warnUnsupportedCharset;

    private void <init>()
    {
        java.lang.StringCoding r0;

        r0 := @this: java.lang.StringCoding;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    private static java.lang.Object deref(java.lang.ThreadLocal)
    {
        java.lang.ThreadLocal r0;
        java.lang.ref.SoftReference r1;
        java.lang.Object $r2, $r3;

        r0 := @parameter0: java.lang.ThreadLocal;
        $r2 = virtualinvoke r0.<java.lang.ThreadLocal: java.lang.Object get()>();
        r1 = (java.lang.ref.SoftReference) $r2;
        if r1 != null goto label0;

        return null;

     label0:
        $r3 = virtualinvoke r1.<java.lang.ref.SoftReference: java.lang.Object get()>();
        return $r3;
    }

    private static void set(java.lang.ThreadLocal, java.lang.Object)
    {
        java.lang.ThreadLocal r0;
        java.lang.Object r1;
        java.lang.ref.SoftReference $r2;

        r0 := @parameter0: java.lang.ThreadLocal;
        r1 := @parameter1: java.lang.Object;
        $r2 = new java.lang.ref.SoftReference;
        specialinvoke $r2.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r1);
        virtualinvoke r0.<java.lang.ThreadLocal: void set(java.lang.Object)>($r2);
        return;
    }

    private static byte[] safeTrim(byte[], int, java.nio.charset.Charset, boolean)
    {
        byte[] r0, $r3;
        int i0, $i1;
        java.nio.charset.Charset r1;
        boolean z0;
        java.lang.SecurityManager $r2;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        r1 := @parameter2: java.nio.charset.Charset;
        z0 := @parameter3: boolean;
        $i1 = lengthof r0;
        if i0 != $i1 goto label1;

        if z0 != 0 goto label0;

        $r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if $r2 != null goto label1;

     label0:
        return r0;

     label1:
        $r3 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r0, i0);
        return $r3;
    }

    private static char[] safeTrim(char[], int, java.nio.charset.Charset, boolean)
    {
        char[] r0, $r3;
        int i0, $i1;
        java.nio.charset.Charset r1;
        boolean z0;
        java.lang.SecurityManager $r2;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        r1 := @parameter2: java.nio.charset.Charset;
        z0 := @parameter3: boolean;
        $i1 = lengthof r0;
        if i0 != $i1 goto label1;

        if z0 != 0 goto label0;

        $r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if $r2 != null goto label1;

     label0:
        return r0;

     label1:
        $r3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(r0, i0);
        return $r3;
    }

    private static int scale(int, float)
    {
        int i0, $i1;
        float f0;
        double $d0, $d1, $d2;

        i0 := @parameter0: int;
        f0 := @parameter1: float;
        $d0 = (double) i0;
        $d1 = (double) f0;
        $d2 = $d0 * $d1;
        $i1 = (int) $d2;
        return $i1;
    }

    private static java.nio.charset.Charset lookupCharset(java.lang.String)
    {
        java.lang.String r0;
        java.nio.charset.UnsupportedCharsetException r1, $r3;
        boolean $z0;
        java.nio.charset.Charset $r2;
        java.lang.Error $r4;

        r0 := @parameter0: java.lang.String;
        $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>(r0);
        if $z0 == 0 goto label3;

     label0:
        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r0);

     label1:
        return $r2;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        $r4 = new java.lang.Error;
        specialinvoke $r4.<java.lang.Error: void <init>(java.lang.Throwable)>(r1);
        throw $r4;

     label3:
        return null;

        catch java.nio.charset.UnsupportedCharsetException from label0 to label1 with label2;
    }

    private static void warnUnsupportedCharset(java.lang.String)
    {
        java.lang.String r0, $r5;
        boolean $z0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;
        $z0 = <java.lang.StringCoding: boolean warnUnsupportedCharset>;
        if $z0 == 0 goto label0;

        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: Default charset ");
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported, using ISO-8859-1 instead");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <sun.misc.MessageUtils: void err(java.lang.String)>($r5);
        <java.lang.StringCoding: boolean warnUnsupportedCharset> = 0;

     label0:
        return;
    }

    static char[] decode(java.lang.String, byte[], int, int) throws java.io.UnsupportedEncodingException
    {
        java.lang.String r0, r4, $r7, $r8, $r9;
        byte[] r1;
        int i0, i1;
        java.lang.ThreadLocal $r2, $r14;
        java.lang.StringCoding$StringDecoder r3, $r10;
        java.nio.charset.Charset r5;
        java.lang.Object $r6;
        boolean $z0, $z1;
        java.nio.charset.IllegalCharsetNameException $r11, r12;
        java.io.UnsupportedEncodingException $r13;
        char[] $r15;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: byte[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        $r2 = <java.lang.StringCoding: java.lang.ThreadLocal decoder>;
        $r6 = staticinvoke <java.lang.StringCoding: java.lang.Object deref(java.lang.ThreadLocal)>($r2);
        r3 = (java.lang.StringCoding$StringDecoder) $r6;
        if r0 != null goto label0;

        $r7 = "ISO-8859-1";
        goto label1;

     label0:
        $r7 = r0;

     label1:
        r4 = $r7;
        if r3 == null goto label2;

        $r8 = virtualinvoke r3.<java.lang.StringCoding$StringDecoder: java.lang.String requestedCharsetName()>();
        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r8);
        if $z0 != 0 goto label8;

        $r9 = virtualinvoke r3.<java.lang.StringCoding$StringDecoder: java.lang.String charsetName()>();
        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r9);
        if $z1 != 0 goto label8;

     label2:
        r3 = null;

     label3:
        r5 = staticinvoke <java.lang.StringCoding: java.nio.charset.Charset lookupCharset(java.lang.String)>(r4);
        if r5 == null goto label4;

        $r10 = new java.lang.StringCoding$StringDecoder;
        specialinvoke $r10.<java.lang.StringCoding$StringDecoder: void <init>(java.nio.charset.Charset,java.lang.String,java.lang.StringCoding$1)>(r5, r4, null);
        r3 = $r10;

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;
        r12 = $r11;

     label6:
        if r3 != null goto label7;

        $r13 = new java.io.UnsupportedEncodingException;
        specialinvoke $r13.<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>(r4);
        throw $r13;

     label7:
        $r14 = <java.lang.StringCoding: java.lang.ThreadLocal decoder>;
        staticinvoke <java.lang.StringCoding: void set(java.lang.ThreadLocal,java.lang.Object)>($r14, r3);

     label8:
        $r15 = virtualinvoke r3.<java.lang.StringCoding$StringDecoder: char[] decode(byte[],int,int)>(r1, i0, i1);
        return $r15;

        catch java.nio.charset.IllegalCharsetNameException from label3 to label4 with label5;
    }

    static char[] decode(java.nio.charset.Charset, byte[], int, int)
    {
        java.nio.charset.Charset r0;
        byte[] r1;
        int i0, i1, i2, i3, $i4, $i5;
        java.nio.charset.CharsetDecoder r2, $r10, $r12;
        char[] r3, $r15, $r21;
        boolean z0, $z1, $z2, $z3, $z4;
        java.nio.CharBuffer r4;
        java.nio.charset.CoderResult r5, r17;
        float $f0;
        java.lang.SecurityManager $r6;
        java.lang.Class $r7;
        java.lang.ClassLoader $r8;
        java.nio.charset.CodingErrorAction $r9, $r11;
        sun.nio.cs.ArrayDecoder $r14;
        java.nio.ByteBuffer r16;
        java.nio.charset.CharacterCodingException $r18, r19;
        java.lang.Error $r20;

        r0 := @parameter0: java.nio.charset.Charset;
        r1 := @parameter1: byte[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        r2 = virtualinvoke r0.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();
        $f0 = virtualinvoke r2.<java.nio.charset.CharsetDecoder: float maxCharsPerByte()>();
        i2 = staticinvoke <java.lang.StringCoding: int scale(int,float)>(i1, $f0);
        r3 = newarray (char)[i2];
        if i1 != 0 goto label0;

        return r3;

     label0:
        z0 = 0;
        $r6 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if $r6 == null goto label3;

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>();
        if $r8 != null goto label1;

        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;
        if $z1 != 0 goto label3;

        $i4 = i0 + i1;
        r1 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r1, i0, $i4);
        i0 = 0;

     label3:
        $r9 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
        $r10 = virtualinvoke r2.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r9);
        $r11 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
        $r12 = virtualinvoke $r10.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r11);
        virtualinvoke $r12.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>();
        $z2 = r2 instanceof sun.nio.cs.ArrayDecoder;
        if $z2 == 0 goto label4;

        $r14 = (sun.nio.cs.ArrayDecoder) r2;
        i3 = interfaceinvoke $r14.<sun.nio.cs.ArrayDecoder: int decode(byte[],int,int,char[])>(r1, i0, i1, r3);
        $r15 = staticinvoke <java.lang.StringCoding: char[] safeTrim(char[],int,java.nio.charset.Charset,boolean)>(r3, i3, r0, z0);
        return $r15;

     label4:
        r16 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(r1, i0, i1);
        r4 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(r3);

     label5:
        r5 = virtualinvoke r2.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>(r16, r4, 1);
        $z3 = virtualinvoke r5.<java.nio.charset.CoderResult: boolean isUnderflow()>();
        if $z3 != 0 goto label6;

        virtualinvoke r5.<java.nio.charset.CoderResult: void throwException()>();

     label6:
        r17 = virtualinvoke r2.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>(r4);
        $z4 = virtualinvoke r17.<java.nio.charset.CoderResult: boolean isUnderflow()>();
        if $z4 != 0 goto label7;

        virtualinvoke r17.<java.nio.charset.CoderResult: void throwException()>();

     label7:
        goto label9;

     label8:
        $r18 := @caughtexception;
        r19 = $r18;
        $r20 = new java.lang.Error;
        specialinvoke $r20.<java.lang.Error: void <init>(java.lang.Throwable)>(r19);
        throw $r20;

     label9:
        $i5 = virtualinvoke r4.<java.nio.CharBuffer: int position()>();
        $r21 = staticinvoke <java.lang.StringCoding: char[] safeTrim(char[],int,java.nio.charset.Charset,boolean)>(r3, $i5, r0, z0);
        return $r21;

        catch java.nio.charset.CharacterCodingException from label5 to label7 with label8;
    }

    static char[] decode(byte[], int, int)
    {
        byte[] r0;
        int i0, i1;
        java.nio.charset.Charset $r1;
        java.lang.String r2, $r11, $r13;
        java.io.UnsupportedEncodingException r3, $r5, $r7, r8;
        char[] $r4, $r6;
        java.lang.StringBuilder $r9, $r10, $r12;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
        r2 = virtualinvoke $r1.<java.nio.charset.Charset: java.lang.String name()>();

     label0:
        $r4 = staticinvoke <java.lang.StringCoding: char[] decode(java.lang.String,byte[],int,int)>(r2, r0, i0, i1);

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;
        r3 = $r5;
        staticinvoke <java.lang.StringCoding: void warnUnsupportedCharset(java.lang.String)>(r2);

     label3:
        $r6 = staticinvoke <java.lang.StringCoding: char[] decode(java.lang.String,byte[],int,int)>("ISO-8859-1", r0, i0, i1);

     label4:
        return $r6;

     label5:
        $r7 := @caughtexception;
        r8 = $r7;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ISO-8859-1 charset not available: ");
        $r11 = virtualinvoke r8.<java.io.UnsupportedEncodingException: java.lang.String toString()>();
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <sun.misc.MessageUtils: void err(java.lang.String)>($r13);
        staticinvoke <java.lang.System: void exit(int)>(1);
        return null;

        catch java.io.UnsupportedEncodingException from label0 to label1 with label2;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label5;
    }

    static byte[] encode(java.lang.String, char[], int, int) throws java.io.UnsupportedEncodingException
    {
        java.lang.String r0, r4, $r7, $r8, $r9;
        char[] r1;
        int i0, i1;
        java.lang.ThreadLocal $r2, $r14;
        java.lang.StringCoding$StringEncoder r3, $r10;
        java.nio.charset.Charset r5;
        java.lang.Object $r6;
        boolean $z0, $z1;
        java.nio.charset.IllegalCharsetNameException $r11, r12;
        java.io.UnsupportedEncodingException $r13;
        byte[] $r15;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: char[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        $r2 = <java.lang.StringCoding: java.lang.ThreadLocal encoder>;
        $r6 = staticinvoke <java.lang.StringCoding: java.lang.Object deref(java.lang.ThreadLocal)>($r2);
        r3 = (java.lang.StringCoding$StringEncoder) $r6;
        if r0 != null goto label0;

        $r7 = "ISO-8859-1";
        goto label1;

     label0:
        $r7 = r0;

     label1:
        r4 = $r7;
        if r3 == null goto label2;

        $r8 = virtualinvoke r3.<java.lang.StringCoding$StringEncoder: java.lang.String requestedCharsetName()>();
        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r8);
        if $z0 != 0 goto label8;

        $r9 = virtualinvoke r3.<java.lang.StringCoding$StringEncoder: java.lang.String charsetName()>();
        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r9);
        if $z1 != 0 goto label8;

     label2:
        r3 = null;

     label3:
        r5 = staticinvoke <java.lang.StringCoding: java.nio.charset.Charset lookupCharset(java.lang.String)>(r4);
        if r5 == null goto label4;

        $r10 = new java.lang.StringCoding$StringEncoder;
        specialinvoke $r10.<java.lang.StringCoding$StringEncoder: void <init>(java.nio.charset.Charset,java.lang.String,java.lang.StringCoding$1)>(r5, r4, null);
        r3 = $r10;

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;
        r12 = $r11;

     label6:
        if r3 != null goto label7;

        $r13 = new java.io.UnsupportedEncodingException;
        specialinvoke $r13.<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>(r4);
        throw $r13;

     label7:
        $r14 = <java.lang.StringCoding: java.lang.ThreadLocal encoder>;
        staticinvoke <java.lang.StringCoding: void set(java.lang.ThreadLocal,java.lang.Object)>($r14, r3);

     label8:
        $r15 = virtualinvoke r3.<java.lang.StringCoding$StringEncoder: byte[] encode(char[],int,int)>(r1, i0, i1);
        return $r15;

        catch java.nio.charset.IllegalCharsetNameException from label3 to label4 with label5;
    }

    static byte[] encode(java.nio.charset.Charset, char[], int, int)
    {
        java.nio.charset.Charset r0;
        char[] r1;
        int i0, i1, i2, i3, $i4, $i5;
        java.nio.charset.CharsetEncoder r2, $r10, $r12;
        byte[] r3, $r15, $r21;
        boolean z0, $z1, $z2, $z3, $z4;
        java.nio.CharBuffer r4;
        java.nio.charset.CoderResult r5, r17;
        float $f0;
        java.lang.SecurityManager $r6;
        java.lang.Class $r7;
        java.lang.ClassLoader $r8;
        java.nio.charset.CodingErrorAction $r9, $r11;
        sun.nio.cs.ArrayEncoder $r14;
        java.nio.ByteBuffer r16;
        java.nio.charset.CharacterCodingException $r18, r19;
        java.lang.Error $r20;

        r0 := @parameter0: java.nio.charset.Charset;
        r1 := @parameter1: char[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        r2 = virtualinvoke r0.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();
        $f0 = virtualinvoke r2.<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>();
        i2 = staticinvoke <java.lang.StringCoding: int scale(int,float)>(i1, $f0);
        r3 = newarray (byte)[i2];
        if i1 != 0 goto label0;

        return r3;

     label0:
        z0 = 0;
        $r6 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if $r6 == null goto label3;

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>();
        if $r8 != null goto label1;

        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;
        if $z1 != 0 goto label3;

        $i4 = i0 + i1;
        r1 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(r1, i0, $i4);
        i0 = 0;

     label3:
        $r9 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
        $r10 = virtualinvoke r2.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r9);
        $r11 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
        $r12 = virtualinvoke $r10.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r11);
        virtualinvoke $r12.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>();
        $z2 = r2 instanceof sun.nio.cs.ArrayEncoder;
        if $z2 == 0 goto label4;

        $r14 = (sun.nio.cs.ArrayEncoder) r2;
        i3 = interfaceinvoke $r14.<sun.nio.cs.ArrayEncoder: int encode(char[],int,int,byte[])>(r1, i0, i1, r3);
        $r15 = staticinvoke <java.lang.StringCoding: byte[] safeTrim(byte[],int,java.nio.charset.Charset,boolean)>(r3, i3, r0, z0);
        return $r15;

     label4:
        r16 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r3);
        r4 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>(r1, i0, i1);

     label5:
        r5 = virtualinvoke r2.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>(r4, r16, 1);
        $z3 = virtualinvoke r5.<java.nio.charset.CoderResult: boolean isUnderflow()>();
        if $z3 != 0 goto label6;

        virtualinvoke r5.<java.nio.charset.CoderResult: void throwException()>();

     label6:
        r17 = virtualinvoke r2.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>(r16);
        $z4 = virtualinvoke r17.<java.nio.charset.CoderResult: boolean isUnderflow()>();
        if $z4 != 0 goto label7;

        virtualinvoke r17.<java.nio.charset.CoderResult: void throwException()>();

     label7:
        goto label9;

     label8:
        $r18 := @caughtexception;
        r19 = $r18;
        $r20 = new java.lang.Error;
        specialinvoke $r20.<java.lang.Error: void <init>(java.lang.Throwable)>(r19);
        throw $r20;

     label9:
        $i5 = virtualinvoke r16.<java.nio.ByteBuffer: int position()>();
        $r21 = staticinvoke <java.lang.StringCoding: byte[] safeTrim(byte[],int,java.nio.charset.Charset,boolean)>(r3, $i5, r0, z0);
        return $r21;

        catch java.nio.charset.CharacterCodingException from label5 to label7 with label8;
    }

    static byte[] encode(char[], int, int)
    {
        char[] r0;
        int i0, i1;
        java.nio.charset.Charset $r1;
        java.lang.String r2, $r11, $r13;
        java.io.UnsupportedEncodingException r3, $r5, $r7, r8;
        byte[] $r4, $r6;
        java.lang.StringBuilder $r9, $r10, $r12;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
        r2 = virtualinvoke $r1.<java.nio.charset.Charset: java.lang.String name()>();

     label0:
        $r4 = staticinvoke <java.lang.StringCoding: byte[] encode(java.lang.String,char[],int,int)>(r2, r0, i0, i1);

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;
        r3 = $r5;
        staticinvoke <java.lang.StringCoding: void warnUnsupportedCharset(java.lang.String)>(r2);

     label3:
        $r6 = staticinvoke <java.lang.StringCoding: byte[] encode(java.lang.String,char[],int,int)>("ISO-8859-1", r0, i0, i1);

     label4:
        return $r6;

     label5:
        $r7 := @caughtexception;
        r8 = $r7;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ISO-8859-1 charset not available: ");
        $r11 = virtualinvoke r8.<java.io.UnsupportedEncodingException: java.lang.String toString()>();
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <sun.misc.MessageUtils: void err(java.lang.String)>($r13);
        staticinvoke <java.lang.System: void exit(int)>(1);
        return null;

        catch java.io.UnsupportedEncodingException from label0 to label1 with label2;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label5;
    }

    static int access$000(int, float)
    {
        int i0, $i1;
        float f0;

        i0 := @parameter0: int;
        f0 := @parameter1: float;
        $i1 = staticinvoke <java.lang.StringCoding: int scale(int,float)>(i0, f0);
        return $i1;
    }

    static char[] access$100(char[], int, java.nio.charset.Charset, boolean)
    {
        char[] r0, $r2;
        int i0;
        java.nio.charset.Charset r1;
        boolean z0;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        r1 := @parameter2: java.nio.charset.Charset;
        z0 := @parameter3: boolean;
        $r2 = staticinvoke <java.lang.StringCoding: char[] safeTrim(char[],int,java.nio.charset.Charset,boolean)>(r0, i0, r1, z0);
        return $r2;
    }

    static byte[] access$300(byte[], int, java.nio.charset.Charset, boolean)
    {
        byte[] r0, $r2;
        int i0;
        java.nio.charset.Charset r1;
        boolean z0;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        r1 := @parameter2: java.nio.charset.Charset;
        z0 := @parameter3: boolean;
        $r2 = staticinvoke <java.lang.StringCoding: byte[] safeTrim(byte[],int,java.nio.charset.Charset,boolean)>(r0, i0, r1, z0);
        return $r2;
    }

    static void <clinit>()
    {
        java.lang.ThreadLocal $r0, $r1;

        $r0 = new java.lang.ThreadLocal;
        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();
        <java.lang.StringCoding: java.lang.ThreadLocal decoder> = $r0;
        $r1 = new java.lang.ThreadLocal;
        specialinvoke $r1.<java.lang.ThreadLocal: void <init>()>();
        <java.lang.StringCoding: java.lang.ThreadLocal encoder> = $r1;
        <java.lang.StringCoding: boolean warnUnsupportedCharset> = 1;
        return;
    }
}
