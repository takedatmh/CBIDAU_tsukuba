class sun.reflect.MethodAccessorGenerator$1 extends java.lang.Object implements java.security.PrivilegedAction
{
    final java.lang.String val$generatedName;
    final byte[] val$bytes;
    final java.lang.Class val$declaringClass;
    final sun.reflect.MethodAccessorGenerator this$0;

    void <init>(sun.reflect.MethodAccessorGenerator, java.lang.String, byte[], java.lang.Class)
    {
        sun.reflect.MethodAccessorGenerator$1 r0;
        sun.reflect.MethodAccessorGenerator r1;
        java.lang.String r2;
        byte[] r3;
        java.lang.Class r4;

        r0 := @this: sun.reflect.MethodAccessorGenerator$1;
        r1 := @parameter0: sun.reflect.MethodAccessorGenerator;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: byte[];
        r4 := @parameter3: java.lang.Class;
        r0.<sun.reflect.MethodAccessorGenerator$1: sun.reflect.MethodAccessorGenerator this$0> = r1;
        r0.<sun.reflect.MethodAccessorGenerator$1: java.lang.String val$generatedName> = r2;
        r0.<sun.reflect.MethodAccessorGenerator$1: byte[] val$bytes> = r3;
        r0.<sun.reflect.MethodAccessorGenerator$1: java.lang.Class val$declaringClass> = r4;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public sun.reflect.MagicAccessorImpl run()
    {
        sun.reflect.MethodAccessorGenerator$1 r0;
        java.lang.InstantiationException r1, $r10;
        java.lang.String $r2;
        byte[] $r3, $r4;
        int $i0;
        java.lang.Class $r5, $r7;
        java.lang.ClassLoader $r6;
        java.lang.Object $r8;
        sun.reflect.MagicAccessorImpl $r9;
        java.lang.InternalError $r11, $r13, $r16, $r18;
        java.lang.Throwable $r12, $r17;
        java.lang.IllegalAccessException $r14, r15;

        r0 := @this: sun.reflect.MethodAccessorGenerator$1;

     label0:
        $r2 = r0.<sun.reflect.MethodAccessorGenerator$1: java.lang.String val$generatedName>;
        $r3 = r0.<sun.reflect.MethodAccessorGenerator$1: byte[] val$bytes>;
        $r4 = r0.<sun.reflect.MethodAccessorGenerator$1: byte[] val$bytes>;
        $i0 = lengthof $r4;
        $r5 = r0.<sun.reflect.MethodAccessorGenerator$1: java.lang.Class val$declaringClass>;
        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        $r7 = staticinvoke <sun.reflect.ClassDefiner: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.lang.ClassLoader)>($r2, $r3, 0, $i0, $r6);
        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.Object newInstance()>();
        $r9 = (sun.reflect.MagicAccessorImpl) $r8;

     label1:
        return $r9;

     label2:
        $r10 := @caughtexception;
        r1 = $r10;
        $r11 = new java.lang.InternalError;
        specialinvoke $r11.<java.lang.InternalError: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.InternalError: java.lang.Throwable initCause(java.lang.Throwable)>(r1);
        $r13 = (java.lang.InternalError) $r12;
        throw $r13;

     label3:
        $r14 := @caughtexception;
        r15 = $r14;
        $r16 = new java.lang.InternalError;
        specialinvoke $r16.<java.lang.InternalError: void <init>()>();
        $r17 = virtualinvoke $r16.<java.lang.InternalError: java.lang.Throwable initCause(java.lang.Throwable)>(r15);
        $r18 = (java.lang.InternalError) $r17;
        throw $r18;

        catch java.lang.InstantiationException from label0 to label1 with label2;
        catch java.lang.IllegalAccessException from label0 to label1 with label3;
    }

    public volatile java.lang.Object run()
    {
        sun.reflect.MethodAccessorGenerator$1 r0;
        sun.reflect.MagicAccessorImpl $r1;

        r0 := @this: sun.reflect.MethodAccessorGenerator$1;
        $r1 = virtualinvoke r0.<sun.reflect.MethodAccessorGenerator$1: sun.reflect.MagicAccessorImpl run()>();
        return $r1;
    }
}
