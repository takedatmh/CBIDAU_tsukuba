class sun.net.www.http.KeepAliveStreamCleaner extends java.util.LinkedList implements java.lang.Runnable
{
    protected static int MAX_DATA_REMAINING;
    protected static int MAX_CAPACITY;
    protected static final int TIMEOUT;
    private static final int MAX_RETRIES;

    void <init>()
    {
        sun.net.www.http.KeepAliveStreamCleaner r0;

        r0 := @this: sun.net.www.http.KeepAliveStreamCleaner;
        specialinvoke r0.<java.util.LinkedList: void <init>()>();
        return;
    }

    public boolean offer(sun.net.www.http.KeepAliveCleanerEntry)
    {
        sun.net.www.http.KeepAliveStreamCleaner r0;
        sun.net.www.http.KeepAliveCleanerEntry r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: sun.net.www.http.KeepAliveStreamCleaner;
        r1 := @parameter0: sun.net.www.http.KeepAliveCleanerEntry;
        $i1 = virtualinvoke r0.<sun.net.www.http.KeepAliveStreamCleaner: int size()>();
        $i0 = <sun.net.www.http.KeepAliveStreamCleaner: int MAX_CAPACITY>;
        if $i1 < $i0 goto label0;

        return 0;

     label0:
        $z0 = specialinvoke r0.<java.util.LinkedList: boolean offer(java.lang.Object)>(r1);
        return $z0;
    }

    public void run()
    {
        sun.net.www.http.KeepAliveStreamCleaner r0, r2;
        sun.net.www.http.KeepAliveCleanerEntry r1, $r9;
        long l0, l1, l2, l3, l4, l5;
        java.lang.Throwable r3, r5, r6, $r11, $r17, $r18;
        sun.net.www.http.HttpClient r4;
        int i6, i8;
        java.lang.Object $r8, $r10;
        byte $b7, $b9, $b10, $b11, $b12;
        sun.net.www.http.KeepAliveStream r12, r14;
        boolean $z0;
        java.io.IOException $r15, r16;
        java.lang.InterruptedException $r19, r20;

        r0 := @this: sun.net.www.http.KeepAliveStreamCleaner;
        r1 = null;

     label0:
        r2 = r0;
        entermonitor r0;

     label1:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        l1 = 5000L;

     label2:
        $r8 = virtualinvoke r0.<sun.net.www.http.KeepAliveStreamCleaner: java.lang.Object poll()>();
        $r9 = (sun.net.www.http.KeepAliveCleanerEntry) $r8;
        r1 = $r9;
        if $r9 != null goto label4;

        virtualinvoke r0.<java.lang.Object: void wait(long)>(l1);
        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        l3 = l2 - l0;
        $b7 = l3 cmp l1;
        if $b7 <= 0 goto label3;

        $r10 = virtualinvoke r0.<sun.net.www.http.KeepAliveStreamCleaner: java.lang.Object poll()>();
        r1 = (sun.net.www.http.KeepAliveCleanerEntry) $r10;
        goto label4;

     label3:
        l0 = l2;
        l1 = l1 - l3;
        goto label2;

     label4:
        exitmonitor r2;

     label5:
        goto label9;

     label6:
        $r11 := @caughtexception;

     label7:
        r3 = $r11;
        exitmonitor r2;

     label8:
        throw r3;

     label9:
        if r1 != null goto label11;

     label10:
        goto label33;

     label11:
        r12 = virtualinvoke r1.<sun.net.www.http.KeepAliveCleanerEntry: sun.net.www.http.KeepAliveStream getKeepAliveStream()>();
        if r12 == null goto label30;

        r14 = r12;
        entermonitor r12;

     label12:
        r4 = virtualinvoke r1.<sun.net.www.http.KeepAliveCleanerEntry: sun.net.www.http.HttpClient getHttpClient()>();

     label13:
        if r4 == null goto label18;

        $z0 = virtualinvoke r4.<sun.net.www.http.HttpClient: boolean isInKeepAliveCache()>();
        if $z0 != 0 goto label18;

        i8 = virtualinvoke r4.<sun.net.www.http.HttpClient: int getReadTimeout()>();
        virtualinvoke r4.<sun.net.www.http.HttpClient: void setReadTimeout(int)>(5000);
        l4 = virtualinvoke r12.<sun.net.www.http.KeepAliveStream: long remainingToRead()>();
        $b9 = l4 cmp 0L;
        if $b9 <= 0 goto label16;

        l5 = 0L;
        i6 = 0;

     label14:
        $b10 = l5 cmp l4;
        if $b10 >= 0 goto label15;

        if i6 >= 5 goto label15;

        l4 = l4 - l5;
        l5 = virtualinvoke r12.<sun.net.www.http.KeepAliveStream: long skip(long)>(l4);
        $b11 = l5 cmp 0L;
        if $b11 != 0 goto label14;

        i6 = i6 + 1;
        goto label14;

     label15:
        l4 = l4 - l5;

     label16:
        $b12 = l4 cmp 0L;
        if $b12 != 0 goto label17;

        virtualinvoke r4.<sun.net.www.http.HttpClient: void setReadTimeout(int)>(i8);
        virtualinvoke r4.<sun.net.www.http.HttpClient: void finished()>();
        goto label18;

     label17:
        virtualinvoke r4.<sun.net.www.http.HttpClient: void closeServer()>();

     label18:
        virtualinvoke r12.<sun.net.www.http.KeepAliveStream: void setClosed()>();
        goto label25;

     label19:
        $r15 := @caughtexception;

     label20:
        r16 = $r15;
        virtualinvoke r4.<sun.net.www.http.HttpClient: void closeServer()>();

     label21:
        virtualinvoke r12.<sun.net.www.http.KeepAliveStream: void setClosed()>();
        goto label25;

     label22:
        $r17 := @caughtexception;

     label23:
        r5 = $r17;

     label24:
        virtualinvoke r12.<sun.net.www.http.KeepAliveStream: void setClosed()>();
        throw r5;

     label25:
        exitmonitor r14;

     label26:
        goto label30;

     label27:
        $r18 := @caughtexception;

     label28:
        r6 = $r18;
        exitmonitor r14;

     label29:
        throw r6;

     label30:
        goto label32;

     label31:
        $r19 := @caughtexception;
        r20 = $r19;

     label32:
        if r1 != null goto label0;

     label33:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.io.IOException from label13 to label18 with label19;
        catch java.lang.Throwable from label13 to label18 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.lang.Throwable from label12 to label26 with label27;
        catch java.lang.Throwable from label28 to label29 with label27;
        catch java.lang.InterruptedException from label0 to label10 with label31;
        catch java.lang.InterruptedException from label11 to label30 with label31;
    }

    public volatile boolean offer(java.lang.Object)
    {
        sun.net.www.http.KeepAliveStreamCleaner r0;
        java.lang.Object r1;
        sun.net.www.http.KeepAliveCleanerEntry $r2;
        boolean $z0;

        r0 := @this: sun.net.www.http.KeepAliveStreamCleaner;
        r1 := @parameter0: java.lang.Object;
        $r2 = (sun.net.www.http.KeepAliveCleanerEntry) r1;
        $z0 = virtualinvoke r0.<sun.net.www.http.KeepAliveStreamCleaner: boolean offer(sun.net.www.http.KeepAliveCleanerEntry)>($r2);
        return $z0;
    }

    static void <clinit>()
    {
        int i0, i1, $i2;
        sun.net.www.http.KeepAliveStreamCleaner$1 $r0;
        java.lang.Object $r1, $r4;
        java.lang.Integer $r2, $r5;
        sun.net.www.http.KeepAliveStreamCleaner$2 $r3;

        <sun.net.www.http.KeepAliveStreamCleaner: int MAX_DATA_REMAINING> = 512;
        <sun.net.www.http.KeepAliveStreamCleaner: int MAX_CAPACITY> = 10;
        $r0 = new sun.net.www.http.KeepAliveStreamCleaner$1;
        specialinvoke $r0.<sun.net.www.http.KeepAliveStreamCleaner$1: void <init>()>();
        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        $r2 = (java.lang.Integer) $r1;
        $i2 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();
        i0 = $i2 * 1024;
        <sun.net.www.http.KeepAliveStreamCleaner: int MAX_DATA_REMAINING> = i0;
        $r3 = new sun.net.www.http.KeepAliveStreamCleaner$2;
        specialinvoke $r3.<sun.net.www.http.KeepAliveStreamCleaner$2: void <init>()>();
        $r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r3);
        $r5 = (java.lang.Integer) $r4;
        i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();
        <sun.net.www.http.KeepAliveStreamCleaner: int MAX_CAPACITY> = i1;
        return;
    }
}
