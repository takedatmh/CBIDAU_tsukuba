final class java.text.RBCollationTables extends java.lang.Object
{
    static final int EXPANDCHARINDEX;
    static final int CONTRACTCHARINDEX;
    static final int UNMAPPED;
    static final int PRIMARYORDERMASK;
    static final int SECONDARYORDERMASK;
    static final int TERTIARYORDERMASK;
    static final int PRIMARYDIFFERENCEONLY;
    static final int SECONDARYDIFFERENCEONLY;
    static final int PRIMARYORDERSHIFT;
    static final int SECONDARYORDERSHIFT;
    private java.lang.String rules;
    private boolean frenchSec;
    private boolean seAsianSwapping;
    private sun.text.UCompactIntArray mapping;
    private java.util.Vector contractTable;
    private java.util.Vector expandTable;
    private sun.text.IntHashtable contractFlags;
    private short maxSecOrder;
    private short maxTerOrder;

    public void <init>(java.lang.String, int) throws java.text.ParseException
    {
        java.text.RBCollationTables r0;
        java.lang.String r1;
        int i0;
        java.text.RBCollationTables$BuildAPI $r2;
        java.text.RBTableBuilder r3, $r4;

        r0 := @this: java.text.RBCollationTables;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.text.RBCollationTables: java.lang.String rules> = null;
        r0.<java.text.RBCollationTables: boolean frenchSec> = 0;
        r0.<java.text.RBCollationTables: boolean seAsianSwapping> = 0;
        r0.<java.text.RBCollationTables: sun.text.UCompactIntArray mapping> = null;
        r0.<java.text.RBCollationTables: java.util.Vector contractTable> = null;
        r0.<java.text.RBCollationTables: java.util.Vector expandTable> = null;
        r0.<java.text.RBCollationTables: sun.text.IntHashtable contractFlags> = null;
        r0.<java.text.RBCollationTables: short maxSecOrder> = 0;
        r0.<java.text.RBCollationTables: short maxTerOrder> = 0;
        r0.<java.text.RBCollationTables: java.lang.String rules> = r1;
        $r4 = new java.text.RBTableBuilder;
        $r2 = new java.text.RBCollationTables$BuildAPI;
        specialinvoke $r2.<java.text.RBCollationTables$BuildAPI: void <init>(java.text.RBCollationTables,java.text.RBCollationTables$1)>(r0, null);
        specialinvoke $r4.<java.text.RBTableBuilder: void <init>(java.text.RBCollationTables$BuildAPI)>($r2);
        r3 = $r4;
        virtualinvoke r3.<java.text.RBTableBuilder: void build(java.lang.String,int)>(r1, i0);
        return;
    }

    public java.lang.String getRules()
    {
        java.text.RBCollationTables r0;
        java.lang.String $r1;

        r0 := @this: java.text.RBCollationTables;
        $r1 = r0.<java.text.RBCollationTables: java.lang.String rules>;
        return $r1;
    }

    public boolean isFrenchSec()
    {
        java.text.RBCollationTables r0;
        boolean $z0;

        r0 := @this: java.text.RBCollationTables;
        $z0 = r0.<java.text.RBCollationTables: boolean frenchSec>;
        return $z0;
    }

    public boolean isSEAsianSwapping()
    {
        java.text.RBCollationTables r0;
        boolean $z0;

        r0 := @this: java.text.RBCollationTables;
        $z0 = r0.<java.text.RBCollationTables: boolean seAsianSwapping>;
        return $z0;
    }

    java.util.Vector getContractValues(int)
    {
        java.text.RBCollationTables r0;
        int i0, i1, $i2;
        sun.text.UCompactIntArray $r1;
        java.util.Vector $r2;

        r0 := @this: java.text.RBCollationTables;
        i0 := @parameter0: int;
        $r1 = r0.<java.text.RBCollationTables: sun.text.UCompactIntArray mapping>;
        i1 = virtualinvoke $r1.<sun.text.UCompactIntArray: int elementAt(int)>(i0);
        $i2 = i1 - 2130706432;
        $r2 = specialinvoke r0.<java.text.RBCollationTables: java.util.Vector getContractValuesImpl(int)>($i2);
        return $r2;
    }

    private java.util.Vector getContractValuesImpl(int)
    {
        java.text.RBCollationTables r0;
        int i0;
        java.util.Vector $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.text.RBCollationTables;
        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        $r1 = r0.<java.text.RBCollationTables: java.util.Vector contractTable>;
        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i0);
        $r3 = (java.util.Vector) $r2;
        return $r3;

     label0:
        return null;
    }

    boolean usedInContractSeq(int)
    {
        java.text.RBCollationTables r0;
        int i0, $i1;
        sun.text.IntHashtable $r1;
        boolean $z0;

        r0 := @this: java.text.RBCollationTables;
        i0 := @parameter0: int;
        $r1 = r0.<java.text.RBCollationTables: sun.text.IntHashtable contractFlags>;
        $i1 = virtualinvoke $r1.<sun.text.IntHashtable: int get(int)>(i0);
        if $i1 != 1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    int getMaxExpansion(int)
    {
        java.text.RBCollationTables r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        int[] r1, $r6;
        java.util.Vector $r2, $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: java.text.RBCollationTables;
        i0 := @parameter0: int;
        i1 = 1;
        $r2 = r0.<java.text.RBCollationTables: java.util.Vector expandTable>;
        if $r2 == null goto label2;

        i2 = 0;

     label0:
        $r3 = r0.<java.text.RBCollationTables: java.util.Vector expandTable>;
        $i4 = virtualinvoke $r3.<java.util.Vector: int size()>();
        if i2 >= $i4 goto label2;

        $r4 = r0.<java.text.RBCollationTables: java.util.Vector expandTable>;
        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i2);
        $r6 = (int[]) $r5;
        r1 = (int[]) $r6;
        i3 = lengthof r1;
        if i3 <= i1 goto label1;

        $i5 = i3 - 1;
        $i6 = r1[$i5];
        if $i6 != i0 goto label1;

        i1 = i3;

     label1:
        i2 = i2 + 1;
        goto label0;

     label2:
        return i1;
    }

    final int[] getExpandValueList(int)
    {
        java.text.RBCollationTables r0;
        int i0, $i1;
        java.util.Vector $r1;
        java.lang.Object $r2;
        int[] $r3, $r4;

        r0 := @this: java.text.RBCollationTables;
        i0 := @parameter0: int;
        $r1 = r0.<java.text.RBCollationTables: java.util.Vector expandTable>;
        $i1 = i0 - 2113929216;
        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i1);
        $r3 = (int[]) $r2;
        $r4 = (int[]) $r3;
        return $r4;
    }

    int getUnicodeOrder(int)
    {
        java.text.RBCollationTables r0;
        int i0, $i1;
        sun.text.UCompactIntArray $r1;

        r0 := @this: java.text.RBCollationTables;
        i0 := @parameter0: int;
        $r1 = r0.<java.text.RBCollationTables: sun.text.UCompactIntArray mapping>;
        $i1 = virtualinvoke $r1.<sun.text.UCompactIntArray: int elementAt(int)>(i0);
        return $i1;
    }

    short getMaxSecOrder()
    {
        java.text.RBCollationTables r0;
        short $s0;

        r0 := @this: java.text.RBCollationTables;
        $s0 = r0.<java.text.RBCollationTables: short maxSecOrder>;
        return $s0;
    }

    short getMaxTerOrder()
    {
        java.text.RBCollationTables r0;
        short $s0;

        r0 := @this: java.text.RBCollationTables;
        $s0 = r0.<java.text.RBCollationTables: short maxTerOrder>;
        return $s0;
    }

    static void reverse(java.lang.StringBuffer, int, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1, i2, i3;
        char c4, $c5;

        r0 := @parameter0: java.lang.StringBuffer;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = i0;
        i3 = i1 - 1;

     label0:
        if i2 >= i3 goto label1;

        c4 = virtualinvoke r0.<java.lang.StringBuffer: char charAt(int)>(i2);
        $c5 = virtualinvoke r0.<java.lang.StringBuffer: char charAt(int)>(i3);
        virtualinvoke r0.<java.lang.StringBuffer: void setCharAt(int,char)>(i2, $c5);
        virtualinvoke r0.<java.lang.StringBuffer: void setCharAt(int,char)>(i3, c4);
        i2 = i2 + 1;
        i3 = i3 + -1;
        goto label0;

     label1:
        return;
    }

    static final int getEntry(java.util.Vector, java.lang.String, boolean)
    {
        java.util.Vector r0;
        java.lang.String r1, $r4;
        boolean z0, $z1, $z2;
        int i0, $i1;
        java.text.EntryPair r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.util.Vector;
        r1 := @parameter1: java.lang.String;
        z0 := @parameter2: boolean;
        i0 = 0;

     label0:
        $i1 = virtualinvoke r0.<java.util.Vector: int size()>();
        if i0 >= $i1 goto label2;

        $r3 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>(i0);
        r2 = (java.text.EntryPair) $r3;
        $z1 = r2.<java.text.EntryPair: boolean fwd>;
        if $z1 != z0 goto label1;

        $r4 = r2.<java.text.EntryPair: java.lang.String entryName>;
        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z2 == 0 goto label1;

        return i0;

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        return -1;
    }

    static boolean access$102(java.text.RBCollationTables, boolean)
    {
        java.text.RBCollationTables r0;
        boolean z0;

        r0 := @parameter0: java.text.RBCollationTables;
        z0 := @parameter1: boolean;
        r0.<java.text.RBCollationTables: boolean frenchSec> = z0;
        return z0;
    }

    static boolean access$202(java.text.RBCollationTables, boolean)
    {
        java.text.RBCollationTables r0;
        boolean z0;

        r0 := @parameter0: java.text.RBCollationTables;
        z0 := @parameter1: boolean;
        r0.<java.text.RBCollationTables: boolean seAsianSwapping> = z0;
        return z0;
    }

    static sun.text.UCompactIntArray access$302(java.text.RBCollationTables, sun.text.UCompactIntArray)
    {
        java.text.RBCollationTables r0;
        sun.text.UCompactIntArray r1;

        r0 := @parameter0: java.text.RBCollationTables;
        r1 := @parameter1: sun.text.UCompactIntArray;
        r0.<java.text.RBCollationTables: sun.text.UCompactIntArray mapping> = r1;
        return r1;
    }

    static java.util.Vector access$402(java.text.RBCollationTables, java.util.Vector)
    {
        java.text.RBCollationTables r0;
        java.util.Vector r1;

        r0 := @parameter0: java.text.RBCollationTables;
        r1 := @parameter1: java.util.Vector;
        r0.<java.text.RBCollationTables: java.util.Vector contractTable> = r1;
        return r1;
    }

    static java.util.Vector access$502(java.text.RBCollationTables, java.util.Vector)
    {
        java.text.RBCollationTables r0;
        java.util.Vector r1;

        r0 := @parameter0: java.text.RBCollationTables;
        r1 := @parameter1: java.util.Vector;
        r0.<java.text.RBCollationTables: java.util.Vector expandTable> = r1;
        return r1;
    }

    static sun.text.IntHashtable access$602(java.text.RBCollationTables, sun.text.IntHashtable)
    {
        java.text.RBCollationTables r0;
        sun.text.IntHashtable r1;

        r0 := @parameter0: java.text.RBCollationTables;
        r1 := @parameter1: sun.text.IntHashtable;
        r0.<java.text.RBCollationTables: sun.text.IntHashtable contractFlags> = r1;
        return r1;
    }

    static short access$702(java.text.RBCollationTables, short)
    {
        java.text.RBCollationTables r0;
        short s0;

        r0 := @parameter0: java.text.RBCollationTables;
        s0 := @parameter1: short;
        r0.<java.text.RBCollationTables: short maxSecOrder> = s0;
        return s0;
    }

    static short access$802(java.text.RBCollationTables, short)
    {
        java.text.RBCollationTables r0;
        short s0;

        r0 := @parameter0: java.text.RBCollationTables;
        s0 := @parameter1: short;
        r0.<java.text.RBCollationTables: short maxTerOrder> = s0;
        return s0;
    }
}
