class java.lang.ProcessEnvironment$Value extends java.lang.ProcessEnvironment$ExternalData implements java.lang.Comparable
{

    protected void <init>(java.lang.String, byte[])
    {
        java.lang.ProcessEnvironment$Value r0;
        java.lang.String r1;
        byte[] r2;

        r0 := @this: java.lang.ProcessEnvironment$Value;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: byte[];
        specialinvoke r0.<java.lang.ProcessEnvironment$ExternalData: void <init>(java.lang.String,byte[])>(r1, r2);
        return;
    }

    public static java.lang.ProcessEnvironment$Value valueOfQueryOnly(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String $r1;
        java.lang.ProcessEnvironment$Value $r2;

        r0 := @parameter0: java.lang.Object;
        $r1 = (java.lang.String) r0;
        $r2 = staticinvoke <java.lang.ProcessEnvironment$Value: java.lang.ProcessEnvironment$Value valueOfQueryOnly(java.lang.String)>($r1);
        return $r2;
    }

    public static java.lang.ProcessEnvironment$Value valueOfQueryOnly(java.lang.String)
    {
        java.lang.String r0;
        java.lang.ProcessEnvironment$Value $r1;
        byte[] $r2;

        r0 := @parameter0: java.lang.String;
        $r1 = new java.lang.ProcessEnvironment$Value;
        $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();
        specialinvoke $r1.<java.lang.ProcessEnvironment$Value: void <init>(java.lang.String,byte[])>(r0, $r2);
        return $r1;
    }

    public static java.lang.ProcessEnvironment$Value valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.ProcessEnvironment$Value $r1;

        r0 := @parameter0: java.lang.String;
        staticinvoke <java.lang.ProcessEnvironment: void access$400(java.lang.String)>(r0);
        $r1 = staticinvoke <java.lang.ProcessEnvironment$Value: java.lang.ProcessEnvironment$Value valueOfQueryOnly(java.lang.String)>(r0);
        return $r1;
    }

    public static java.lang.ProcessEnvironment$Value valueOf(byte[])
    {
        byte[] r0;
        java.lang.ProcessEnvironment$Value $r1;
        java.lang.String $r2;

        r0 := @parameter0: byte[];
        $r1 = new java.lang.ProcessEnvironment$Value;
        $r2 = new java.lang.String;
        specialinvoke $r2.<java.lang.String: void <init>(byte[])>(r0);
        specialinvoke $r1.<java.lang.ProcessEnvironment$Value: void <init>(java.lang.String,byte[])>($r2, r0);
        return $r1;
    }

    public int compareTo(java.lang.ProcessEnvironment$Value)
    {
        java.lang.ProcessEnvironment$Value r0, r1;
        byte[] $r2, $r3;
        int $i0;

        r0 := @this: java.lang.ProcessEnvironment$Value;
        r1 := @parameter0: java.lang.ProcessEnvironment$Value;
        $r2 = virtualinvoke r0.<java.lang.ProcessEnvironment$Value: byte[] getBytes()>();
        $r3 = virtualinvoke r1.<java.lang.ProcessEnvironment$Value: byte[] getBytes()>();
        $i0 = staticinvoke <java.lang.ProcessEnvironment: int access$300(byte[],byte[])>($r2, $r3);
        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.ProcessEnvironment$Value r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;

        r0 := @this: java.lang.ProcessEnvironment$Value;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.lang.ProcessEnvironment$Value;
        if $z0 == 0 goto label0;

        $z1 = specialinvoke r0.<java.lang.ProcessEnvironment$ExternalData: boolean equals(java.lang.Object)>(r1);
        if $z1 == 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.ProcessEnvironment$Value r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.lang.ProcessEnvironment$Value;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.lang.ProcessEnvironment$Value) r1;
        $i0 = virtualinvoke r0.<java.lang.ProcessEnvironment$Value: int compareTo(java.lang.ProcessEnvironment$Value)>($r2);
        return $i0;
    }
}
