public class sun.nio.ch.DatagramSocketAdaptor extends java.net.DatagramSocket
{
    private final sun.nio.ch.DatagramChannelImpl dc;
    private volatile int timeout;
    private static final java.net.DatagramSocketImpl dummyDatagramSocket;

    private void <init>(sun.nio.ch.DatagramChannelImpl) throws java.io.IOException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        sun.nio.ch.DatagramChannelImpl r1;
        java.net.DatagramSocketImpl $r2;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        r1 := @parameter0: sun.nio.ch.DatagramChannelImpl;
        $r2 = <sun.nio.ch.DatagramSocketAdaptor: java.net.DatagramSocketImpl dummyDatagramSocket>;
        specialinvoke r0.<java.net.DatagramSocket: void <init>(java.net.DatagramSocketImpl)>($r2);
        r0.<sun.nio.ch.DatagramSocketAdaptor: int timeout> = 0;
        r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc> = r1;
        return;
    }

    public static java.net.DatagramSocket create(sun.nio.ch.DatagramChannelImpl)
    {
        sun.nio.ch.DatagramChannelImpl r0;
        sun.nio.ch.DatagramSocketAdaptor $r1;
        java.io.IOException r2, $r3;
        java.lang.Error $r4;

        r0 := @parameter0: sun.nio.ch.DatagramChannelImpl;

     label0:
        $r1 = new sun.nio.ch.DatagramSocketAdaptor;
        specialinvoke $r1.<sun.nio.ch.DatagramSocketAdaptor: void <init>(sun.nio.ch.DatagramChannelImpl)>(r0);

     label1:
        return $r1;

     label2:
        $r3 := @caughtexception;
        r2 = $r3;
        $r4 = new java.lang.Error;
        specialinvoke $r4.<java.lang.Error: void <init>(java.lang.Throwable)>(r2);
        throw $r4;

        catch java.io.IOException from label0 to label1 with label2;
    }

    private void connectInternal(java.net.SocketAddress) throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.net.SocketAddress r1;
        java.net.InetSocketAddress r2;
        int i0;
        java.lang.StringBuilder $r3, $r6, $r7;
        java.lang.Exception r4, $r12;
        java.lang.IllegalArgumentException $r5, $r9;
        java.lang.String $r8;
        boolean $z0;
        sun.nio.ch.DatagramChannelImpl $r10;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        r1 := @parameter0: java.net.SocketAddress;
        r2 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress asInetSocketAddress(java.net.SocketAddress)>(r1);
        i0 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();
        if i0 < 0 goto label0;

        if i0 <= 65535 goto label1;

     label0:
        $r5 = new java.lang.IllegalArgumentException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("connect: ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);
        throw $r5;

     label1:
        if r1 != null goto label2;

        $r9 = new java.lang.IllegalArgumentException;
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connect: null address");
        throw $r9;

     label2:
        $z0 = virtualinvoke r0.<sun.nio.ch.DatagramSocketAdaptor: boolean isClosed()>();
        if $z0 == 0 goto label3;

        return;

     label3:
        $r10 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        virtualinvoke $r10.<sun.nio.ch.DatagramChannelImpl: java.nio.channels.DatagramChannel connect(java.net.SocketAddress)>(r1);

     label4:
        goto label6;

     label5:
        $r12 := @caughtexception;
        r4 = $r12;
        staticinvoke <sun.nio.ch.Net: void translateToSocketException(java.lang.Exception)>(r4);

     label6:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public void bind(java.net.SocketAddress) throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.net.SocketAddress r1;
        java.lang.Exception r2, $r6;
        java.net.InetSocketAddress $r3;
        sun.nio.ch.DatagramChannelImpl $r4;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        r1 := @parameter0: java.net.SocketAddress;

     label0:
        if r1 != null goto label1;

        $r3 = new java.net.InetSocketAddress;
        specialinvoke $r3.<java.net.InetSocketAddress: void <init>(int)>(0);
        r1 = $r3;

     label1:
        $r4 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        virtualinvoke $r4.<sun.nio.ch.DatagramChannelImpl: java.nio.channels.DatagramChannel bind(java.net.SocketAddress)>(r1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;
        r2 = $r6;
        staticinvoke <sun.nio.ch.Net: void translateToSocketException(java.lang.Exception)>(r2);

     label4:
        return;

        catch java.lang.Exception from label0 to label2 with label3;
    }

    public void connect(java.net.InetAddress, int)
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.net.InetAddress r1;
        int i0;
        java.net.InetSocketAddress $r2;
        java.net.SocketException r3, $r4;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        r1 := @parameter0: java.net.InetAddress;
        i0 := @parameter1: int;

     label0:
        $r2 = new java.net.InetSocketAddress;
        specialinvoke $r2.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r1, i0);
        specialinvoke r0.<sun.nio.ch.DatagramSocketAdaptor: void connectInternal(java.net.SocketAddress)>($r2);

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r3 = $r4;

     label3:
        return;

        catch java.net.SocketException from label0 to label1 with label2;
    }

    public void connect(java.net.SocketAddress) throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.net.SocketAddress r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        r1 := @parameter0: java.net.SocketAddress;
        if r1 != null goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Address can\'t be null");
        throw $r2;

     label0:
        specialinvoke r0.<sun.nio.ch.DatagramSocketAdaptor: void connectInternal(java.net.SocketAddress)>(r1);
        return;
    }

    public void disconnect()
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.io.IOException r1, $r4;
        sun.nio.ch.DatagramChannelImpl $r2;
        java.lang.Error $r5;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;

     label0:
        $r2 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        virtualinvoke $r2.<sun.nio.ch.DatagramChannelImpl: java.nio.channels.DatagramChannel disconnect()>();

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        $r5 = new java.lang.Error;
        specialinvoke $r5.<java.lang.Error: void <init>(java.lang.Throwable)>(r1);
        throw $r5;

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public boolean isBound()
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        sun.nio.ch.DatagramChannelImpl $r1;
        java.net.SocketAddress $r2;
        boolean $z0;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        $r1 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $r2 = virtualinvoke $r1.<sun.nio.ch.DatagramChannelImpl: java.net.SocketAddress localAddress()>();
        if $r2 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isConnected()
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        sun.nio.ch.DatagramChannelImpl $r1;
        java.net.SocketAddress $r2;
        boolean $z0;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        $r1 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $r2 = virtualinvoke $r1.<sun.nio.ch.DatagramChannelImpl: java.net.SocketAddress remoteAddress()>();
        if $r2 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.net.InetAddress getInetAddress()
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        boolean $z0;
        sun.nio.ch.DatagramChannelImpl $r1;
        java.net.SocketAddress $r2;
        java.net.InetSocketAddress $r3;
        java.net.InetAddress $r4;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        $z0 = virtualinvoke r0.<sun.nio.ch.DatagramSocketAdaptor: boolean isConnected()>();
        if $z0 == 0 goto label0;

        $r1 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $r2 = virtualinvoke $r1.<sun.nio.ch.DatagramChannelImpl: java.net.SocketAddress remoteAddress()>();
        $r3 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress asInetSocketAddress(java.net.SocketAddress)>($r2);
        $r4 = virtualinvoke $r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        goto label1;

     label0:
        $r4 = null;

     label1:
        return $r4;
    }

    public int getPort()
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        boolean $z0;
        sun.nio.ch.DatagramChannelImpl $r1;
        java.net.SocketAddress $r2;
        java.net.InetSocketAddress $r3;
        int $i0;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        $z0 = virtualinvoke r0.<sun.nio.ch.DatagramSocketAdaptor: boolean isConnected()>();
        if $z0 == 0 goto label0;

        $r1 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $r2 = virtualinvoke $r1.<sun.nio.ch.DatagramChannelImpl: java.net.SocketAddress remoteAddress()>();
        $r3 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress asInetSocketAddress(java.net.SocketAddress)>($r2);
        $i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int getPort()>();
        goto label1;

     label0:
        $i0 = -1;

     label1:
        return $i0;
    }

    public void send(java.net.DatagramPacket) throws java.io.IOException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.net.DatagramPacket r1, r3;
        java.lang.Object r2, $r9;
        java.nio.ByteBuffer r4;
        java.net.InetSocketAddress r5;
        java.lang.Throwable r6, r7, $r24, $r27;
        sun.nio.ch.DatagramChannelImpl $r8, $r10, $r14, $r16, $r19, $r20, $r22;
        boolean $z0, $z1;
        java.nio.channels.IllegalBlockingModeException $r11;
        byte[] $r13;
        int $i0, $i1, $i2;
        java.net.InetAddress $r15, $r18;
        java.net.SocketAddress $r17, $r21, $r23;
        java.io.IOException $r25, r26;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        r1 := @parameter0: java.net.DatagramPacket;
        $r8 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $r9 = virtualinvoke $r8.<sun.nio.ch.DatagramChannelImpl: java.lang.Object blockingLock()>();
        r2 = $r9;
        entermonitor $r9;

     label0:
        $r10 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $z0 = virtualinvoke $r10.<sun.nio.ch.DatagramChannelImpl: boolean isBlocking()>();
        if $z0 != 0 goto label1;

        $r11 = new java.nio.channels.IllegalBlockingModeException;
        specialinvoke $r11.<java.nio.channels.IllegalBlockingModeException: void <init>()>();
        throw $r11;

     label1:
        r3 = r1;
        entermonitor r1;

     label2:
        $r13 = virtualinvoke r1.<java.net.DatagramPacket: byte[] getData()>();
        $i0 = virtualinvoke r1.<java.net.DatagramPacket: int getOffset()>();
        $i1 = virtualinvoke r1.<java.net.DatagramPacket: int getLength()>();
        r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r13, $i0, $i1);
        $r14 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $z1 = virtualinvoke $r14.<sun.nio.ch.DatagramChannelImpl: boolean isConnected()>();
        if $z1 == 0 goto label4;

        $r15 = virtualinvoke r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();
        if $r15 != null goto label3;

        $r16 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $r17 = virtualinvoke $r16.<sun.nio.ch.DatagramChannelImpl: java.net.SocketAddress remoteAddress()>();
        r5 = (java.net.InetSocketAddress) $r17;
        $i2 = virtualinvoke r5.<java.net.InetSocketAddress: int getPort()>();
        virtualinvoke r1.<java.net.DatagramPacket: void setPort(int)>($i2);
        $r18 = virtualinvoke r5.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        virtualinvoke r1.<java.net.DatagramPacket: void setAddress(java.net.InetAddress)>($r18);
        $r19 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        virtualinvoke $r19.<sun.nio.ch.DatagramChannelImpl: int write(java.nio.ByteBuffer)>(r4);
        goto label5;

     label3:
        $r20 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $r21 = virtualinvoke r1.<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()>();
        virtualinvoke $r20.<sun.nio.ch.DatagramChannelImpl: int send(java.nio.ByteBuffer,java.net.SocketAddress)>(r4, $r21);
        goto label5;

     label4:
        $r22 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $r23 = virtualinvoke r1.<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()>();
        virtualinvoke $r22.<sun.nio.ch.DatagramChannelImpl: int send(java.nio.ByteBuffer,java.net.SocketAddress)>(r4, $r23);

     label5:
        exitmonitor r3;

     label6:
        goto label10;

     label7:
        $r24 := @caughtexception;

     label8:
        r6 = $r24;
        exitmonitor r3;

     label9:
        throw r6;

     label10:
        goto label12;

     label11:
        $r25 := @caughtexception;
        r26 = $r25;
        staticinvoke <sun.nio.ch.Net: void translateException(java.lang.Exception)>(r26);

     label12:
        exitmonitor r2;

     label13:
        goto label17;

     label14:
        $r27 := @caughtexception;

     label15:
        r7 = $r27;
        exitmonitor r2;

     label16:
        throw r7;

     label17:
        return;

        catch java.lang.Throwable from label2 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
        catch java.io.IOException from label1 to label10 with label11;
        catch java.lang.Throwable from label0 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private java.net.SocketAddress receive(java.nio.ByteBuffer) throws java.io.IOException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.nio.ByteBuffer r1;
        java.nio.channels.SelectionKey r2;
        java.nio.channels.Selector r3;
        java.net.SocketAddress r4, r5, r6, $r9, $r13, $r22, r23;
        long l0, l4, $l5, $l6;
        int i1, $i2, $i3;
        java.lang.Throwable r7, $r29;
        sun.nio.ch.DatagramChannelImpl $r8, $r10, $r12, $r14, $r15, $r17, $r18, $r19, $r21, $r24, $r25, $r30, $r31;
        boolean $z0, $z1, $z2, $z3, $z5;
        java.nio.channels.ClosedChannelException $r20;
        java.util.Set $r27;
        byte $b7;
        java.net.SocketTimeoutException $r28;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        r1 := @parameter0: java.nio.ByteBuffer;
        $i2 = r0.<sun.nio.ch.DatagramSocketAdaptor: int timeout>;
        if $i2 != 0 goto label0;

        $r8 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $r9 = virtualinvoke $r8.<sun.nio.ch.DatagramChannelImpl: java.net.SocketAddress receive(java.nio.ByteBuffer)>(r1);
        return $r9;

     label0:
        r2 = null;
        r3 = null;
        $r10 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        virtualinvoke $r10.<sun.nio.ch.DatagramChannelImpl: java.nio.channels.SelectableChannel configureBlocking(boolean)>(0);

     label1:
        $r12 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $r13 = virtualinvoke $r12.<sun.nio.ch.DatagramChannelImpl: java.net.SocketAddress receive(java.nio.ByteBuffer)>(r1);
        r4 = $r13;
        if $r13 == null goto label6;

        r5 = r4;

     label2:
        if r2 == null goto label3;

        virtualinvoke r2.<java.nio.channels.SelectionKey: void cancel()>();

     label3:
        $r14 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $z0 = virtualinvoke $r14.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z0 == 0 goto label4;

        $r15 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        virtualinvoke $r15.<sun.nio.ch.DatagramChannelImpl: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);

     label4:
        if r3 == null goto label5;

        staticinvoke <sun.nio.ch.Util: void releaseTemporarySelector(java.nio.channels.Selector)>(r3);

     label5:
        return r5;

     label6:
        $r17 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        r3 = staticinvoke <sun.nio.ch.Util: java.nio.channels.Selector getTemporarySelector(java.nio.channels.SelectableChannel)>($r17);
        $r18 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        r2 = virtualinvoke $r18.<sun.nio.ch.DatagramChannelImpl: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>(r3, 1);
        $i3 = r0.<sun.nio.ch.DatagramSocketAdaptor: int timeout>;
        l4 = (long) $i3;

     label7:
        $r19 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $z1 = virtualinvoke $r19.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label8;

        $r20 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r20.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r20;

     label8:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        i1 = virtualinvoke r3.<java.nio.channels.Selector: int select(long)>(l4);
        if i1 <= 0 goto label13;

        $z2 = virtualinvoke r2.<java.nio.channels.SelectionKey: boolean isReadable()>();
        if $z2 == 0 goto label13;

        $r21 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $r22 = virtualinvoke $r21.<sun.nio.ch.DatagramChannelImpl: java.net.SocketAddress receive(java.nio.ByteBuffer)>(r1);
        r23 = $r22;
        if $r22 == null goto label13;

        r6 = r23;

     label9:
        if r2 == null goto label10;

        virtualinvoke r2.<java.nio.channels.SelectionKey: void cancel()>();

     label10:
        $r24 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $z3 = virtualinvoke $r24.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z3 == 0 goto label11;

        $r25 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        virtualinvoke $r25.<sun.nio.ch.DatagramChannelImpl: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);

     label11:
        if r3 == null goto label12;

        staticinvoke <sun.nio.ch.Util: void releaseTemporarySelector(java.nio.channels.Selector)>(r3);

     label12:
        return r6;

     label13:
        $r27 = virtualinvoke r3.<java.nio.channels.Selector: java.util.Set selectedKeys()>();
        interfaceinvoke $r27.<java.util.Set: boolean remove(java.lang.Object)>(r2);
        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l6 = $l5 - l0;
        l4 = l4 - $l6;
        $b7 = l4 cmp 0L;
        if $b7 > 0 goto label14;

        $r28 = new java.net.SocketTimeoutException;
        specialinvoke $r28.<java.net.SocketTimeoutException: void <init>()>();
        throw $r28;

     label14:
        goto label7;

     label15:
        $r29 := @caughtexception;
        r7 = $r29;

     label16:
        if r2 == null goto label17;

        virtualinvoke r2.<java.nio.channels.SelectionKey: void cancel()>();

     label17:
        $r30 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $z5 = virtualinvoke $r30.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z5 == 0 goto label18;

        $r31 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        virtualinvoke $r31.<sun.nio.ch.DatagramChannelImpl: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);

     label18:
        if r3 == null goto label19;

        staticinvoke <sun.nio.ch.Util: void releaseTemporarySelector(java.nio.channels.Selector)>(r3);

     label19:
        throw r7;

        catch java.lang.Throwable from label1 to label2 with label15;
        catch java.lang.Throwable from label6 to label9 with label15;
        catch java.lang.Throwable from label13 to label16 with label15;
    }

    public void receive(java.net.DatagramPacket) throws java.io.IOException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.net.DatagramPacket r1, r3;
        java.lang.Object r2, $r9;
        java.nio.ByteBuffer r4;
        java.net.SocketAddress r5;
        java.lang.Throwable r6, r7, $r14, $r17;
        sun.nio.ch.DatagramChannelImpl $r8, $r10;
        boolean $z0;
        java.nio.channels.IllegalBlockingModeException $r11;
        byte[] $r13;
        int $i0, $i1, $i2, $i3, $i4;
        java.io.IOException $r15, r16;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        r1 := @parameter0: java.net.DatagramPacket;
        $r8 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $r9 = virtualinvoke $r8.<sun.nio.ch.DatagramChannelImpl: java.lang.Object blockingLock()>();
        r2 = $r9;
        entermonitor $r9;

     label0:
        $r10 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $z0 = virtualinvoke $r10.<sun.nio.ch.DatagramChannelImpl: boolean isBlocking()>();
        if $z0 != 0 goto label1;

        $r11 = new java.nio.channels.IllegalBlockingModeException;
        specialinvoke $r11.<java.nio.channels.IllegalBlockingModeException: void <init>()>();
        throw $r11;

     label1:
        r3 = r1;
        entermonitor r1;

     label2:
        $r13 = virtualinvoke r1.<java.net.DatagramPacket: byte[] getData()>();
        $i0 = virtualinvoke r1.<java.net.DatagramPacket: int getOffset()>();
        $i1 = virtualinvoke r1.<java.net.DatagramPacket: int getLength()>();
        r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r13, $i0, $i1);
        r5 = specialinvoke r0.<sun.nio.ch.DatagramSocketAdaptor: java.net.SocketAddress receive(java.nio.ByteBuffer)>(r4);
        virtualinvoke r1.<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)>(r5);
        $i2 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>();
        $i3 = virtualinvoke r1.<java.net.DatagramPacket: int getOffset()>();
        $i4 = $i2 - $i3;
        virtualinvoke r1.<java.net.DatagramPacket: void setLength(int)>($i4);
        exitmonitor r3;

     label3:
        goto label7;

     label4:
        $r14 := @caughtexception;

     label5:
        r6 = $r14;
        exitmonitor r3;

     label6:
        throw r6;

     label7:
        goto label9;

     label8:
        $r15 := @caughtexception;
        r16 = $r15;
        staticinvoke <sun.nio.ch.Net: void translateException(java.lang.Exception)>(r16);

     label9:
        exitmonitor r2;

     label10:
        goto label14;

     label11:
        $r17 := @caughtexception;

     label12:
        r7 = $r17;
        exitmonitor r2;

     label13:
        throw r7;

     label14:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.io.IOException from label1 to label7 with label8;
        catch java.lang.Throwable from label0 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public java.net.InetAddress getLocalAddress()
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.net.SocketAddress r1;
        java.net.InetAddress r2, $r11;
        java.lang.SecurityManager r3;
        java.lang.SecurityException r4, $r9;
        boolean $z0;
        sun.nio.ch.DatagramChannelImpl $r5;
        java.net.InetSocketAddress $r6, $r7, $r10;
        java.lang.String $r8;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        $z0 = virtualinvoke r0.<sun.nio.ch.DatagramSocketAdaptor: boolean isClosed()>();
        if $z0 == 0 goto label0;

        return null;

     label0:
        $r5 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        r1 = virtualinvoke $r5.<sun.nio.ch.DatagramChannelImpl: java.net.SocketAddress localAddress()>();
        if r1 != null goto label1;

        $r6 = new java.net.InetSocketAddress;
        specialinvoke $r6.<java.net.InetSocketAddress: void <init>(int)>(0);
        r1 = $r6;

     label1:
        $r7 = (java.net.InetSocketAddress) r1;
        r2 = virtualinvoke $r7.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r3 == null goto label5;

     label2:
        $r8 = virtualinvoke r2.<java.net.InetAddress: java.lang.String getHostAddress()>();
        virtualinvoke r3.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>($r8, -1);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;
        r4 = $r9;
        $r10 = new java.net.InetSocketAddress;
        specialinvoke $r10.<java.net.InetSocketAddress: void <init>(int)>(0);
        $r11 = virtualinvoke $r10.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        return $r11;

     label5:
        return r2;

        catch java.lang.SecurityException from label2 to label3 with label4;
    }

    public int getLocalPort()
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.net.SocketAddress r1;
        boolean $z0;
        sun.nio.ch.DatagramChannelImpl $r2;
        java.net.InetSocketAddress $r3;
        int $i0;
        java.lang.Exception $r4, r5;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        $z0 = virtualinvoke r0.<sun.nio.ch.DatagramSocketAdaptor: boolean isClosed()>();
        if $z0 == 0 goto label0;

        return -1;

     label0:
        $r2 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        r1 = virtualinvoke $r2.<sun.nio.ch.DatagramChannelImpl: java.net.SocketAddress getLocalAddress()>();
        if r1 == null goto label2;

        $r3 = (java.net.InetSocketAddress) r1;
        $i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int getPort()>();

     label1:
        return $i0;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;
        r5 = $r4;

     label4:
        return 0;

        catch java.lang.Exception from label0 to label1 with label3;
    }

    public void setSoTimeout(int) throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        int i0;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        i0 := @parameter0: int;
        r0.<sun.nio.ch.DatagramSocketAdaptor: int timeout> = i0;
        return;
    }

    public int getSoTimeout() throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        int $i0;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        $i0 = r0.<sun.nio.ch.DatagramSocketAdaptor: int timeout>;
        return $i0;
    }

    private void setBooleanOption(java.net.SocketOption, boolean) throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.net.SocketOption r1;
        boolean z0;
        java.io.IOException r2, $r6;
        sun.nio.ch.DatagramChannelImpl $r3;
        java.lang.Boolean $r4;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        r1 := @parameter0: java.net.SocketOption;
        z0 := @parameter1: boolean;

     label0:
        $r3 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);
        virtualinvoke $r3.<sun.nio.ch.DatagramChannelImpl: java.nio.channels.DatagramChannel setOption(java.net.SocketOption,java.lang.Object)>(r1, $r4);

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        staticinvoke <sun.nio.ch.Net: void translateToSocketException(java.lang.Exception)>(r2);

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    private void setIntOption(java.net.SocketOption, int) throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.net.SocketOption r1;
        int i0;
        java.io.IOException r2, $r6;
        sun.nio.ch.DatagramChannelImpl $r3;
        java.lang.Integer $r4;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        r1 := @parameter0: java.net.SocketOption;
        i0 := @parameter1: int;

     label0:
        $r3 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        virtualinvoke $r3.<sun.nio.ch.DatagramChannelImpl: java.nio.channels.DatagramChannel setOption(java.net.SocketOption,java.lang.Object)>(r1, $r4);

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        staticinvoke <sun.nio.ch.Net: void translateToSocketException(java.lang.Exception)>(r2);

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    private boolean getBooleanOption(java.net.SocketOption) throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.net.SocketOption r1;
        java.io.IOException r2, $r6;
        sun.nio.ch.DatagramChannelImpl $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        r1 := @parameter0: java.net.SocketOption;

     label0:
        $r3 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $r4 = virtualinvoke $r3.<sun.nio.ch.DatagramChannelImpl: java.lang.Object getOption(java.net.SocketOption)>(r1);
        $r5 = (java.lang.Boolean) $r4;
        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

     label1:
        return $z0;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        staticinvoke <sun.nio.ch.Net: void translateToSocketException(java.lang.Exception)>(r2);
        return 0;

        catch java.io.IOException from label0 to label1 with label2;
    }

    private int getIntOption(java.net.SocketOption) throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.net.SocketOption r1;
        java.io.IOException r2, $r6;
        sun.nio.ch.DatagramChannelImpl $r3;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        r1 := @parameter0: java.net.SocketOption;

     label0:
        $r3 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $r4 = virtualinvoke $r3.<sun.nio.ch.DatagramChannelImpl: java.lang.Object getOption(java.net.SocketOption)>(r1);
        $r5 = (java.lang.Integer) $r4;
        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

     label1:
        return $i0;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        staticinvoke <sun.nio.ch.Net: void translateToSocketException(java.lang.Exception)>(r2);
        return -1;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public void setSendBufferSize(int) throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.net.SocketOption $r2;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        i0 := @parameter0: int;
        if i0 > 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid send size");
        throw $r1;

     label0:
        $r2 = <java.net.StandardSocketOptions: java.net.SocketOption SO_SNDBUF>;
        specialinvoke r0.<sun.nio.ch.DatagramSocketAdaptor: void setIntOption(java.net.SocketOption,int)>($r2, i0);
        return;
    }

    public int getSendBufferSize() throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.net.SocketOption $r1;
        int $i0;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption SO_SNDBUF>;
        $i0 = specialinvoke r0.<sun.nio.ch.DatagramSocketAdaptor: int getIntOption(java.net.SocketOption)>($r1);
        return $i0;
    }

    public void setReceiveBufferSize(int) throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.net.SocketOption $r2;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        i0 := @parameter0: int;
        if i0 > 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid receive size");
        throw $r1;

     label0:
        $r2 = <java.net.StandardSocketOptions: java.net.SocketOption SO_RCVBUF>;
        specialinvoke r0.<sun.nio.ch.DatagramSocketAdaptor: void setIntOption(java.net.SocketOption,int)>($r2, i0);
        return;
    }

    public int getReceiveBufferSize() throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.net.SocketOption $r1;
        int $i0;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption SO_RCVBUF>;
        $i0 = specialinvoke r0.<sun.nio.ch.DatagramSocketAdaptor: int getIntOption(java.net.SocketOption)>($r1);
        return $i0;
    }

    public void setReuseAddress(boolean) throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        boolean z0;
        java.net.SocketOption $r1;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        z0 := @parameter0: boolean;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption SO_REUSEADDR>;
        specialinvoke r0.<sun.nio.ch.DatagramSocketAdaptor: void setBooleanOption(java.net.SocketOption,boolean)>($r1, z0);
        return;
    }

    public boolean getReuseAddress() throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.net.SocketOption $r1;
        boolean $z0;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption SO_REUSEADDR>;
        $z0 = specialinvoke r0.<sun.nio.ch.DatagramSocketAdaptor: boolean getBooleanOption(java.net.SocketOption)>($r1);
        return $z0;
    }

    public void setBroadcast(boolean) throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        boolean z0;
        java.net.SocketOption $r1;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        z0 := @parameter0: boolean;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption SO_BROADCAST>;
        specialinvoke r0.<sun.nio.ch.DatagramSocketAdaptor: void setBooleanOption(java.net.SocketOption,boolean)>($r1, z0);
        return;
    }

    public boolean getBroadcast() throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.net.SocketOption $r1;
        boolean $z0;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption SO_BROADCAST>;
        $z0 = specialinvoke r0.<sun.nio.ch.DatagramSocketAdaptor: boolean getBooleanOption(java.net.SocketOption)>($r1);
        return $z0;
    }

    public void setTrafficClass(int) throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        int i0;
        java.net.SocketOption $r1;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        i0 := @parameter0: int;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption IP_TOS>;
        specialinvoke r0.<sun.nio.ch.DatagramSocketAdaptor: void setIntOption(java.net.SocketOption,int)>($r1, i0);
        return;
    }

    public int getTrafficClass() throws java.net.SocketException
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.net.SocketOption $r1;
        int $i0;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption IP_TOS>;
        $i0 = specialinvoke r0.<sun.nio.ch.DatagramSocketAdaptor: int getIntOption(java.net.SocketOption)>($r1);
        return $i0;
    }

    public void close()
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        java.io.IOException r1, $r3;
        sun.nio.ch.DatagramChannelImpl $r2;
        java.lang.Error $r4;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;

     label0:
        $r2 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        virtualinvoke $r2.<sun.nio.ch.DatagramChannelImpl: void close()>();

     label1:
        goto label3;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        $r4 = new java.lang.Error;
        specialinvoke $r4.<java.lang.Error: void <init>(java.lang.Throwable)>(r1);
        throw $r4;

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public boolean isClosed()
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        sun.nio.ch.DatagramChannelImpl $r1;
        boolean $z0, $z1;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        $r1 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        $z0 = virtualinvoke $r1.<sun.nio.ch.DatagramChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    public java.nio.channels.DatagramChannel getChannel()
    {
        sun.nio.ch.DatagramSocketAdaptor r0;
        sun.nio.ch.DatagramChannelImpl $r1;

        r0 := @this: sun.nio.ch.DatagramSocketAdaptor;
        $r1 = r0.<sun.nio.ch.DatagramSocketAdaptor: sun.nio.ch.DatagramChannelImpl dc>;
        return $r1;
    }

    static void <clinit>()
    {
        sun.nio.ch.DatagramSocketAdaptor$1 $r0;

        $r0 = new sun.nio.ch.DatagramSocketAdaptor$1;
        specialinvoke $r0.<sun.nio.ch.DatagramSocketAdaptor$1: void <init>()>();
        <sun.nio.ch.DatagramSocketAdaptor: java.net.DatagramSocketImpl dummyDatagramSocket> = $r0;
        return;
    }
}
