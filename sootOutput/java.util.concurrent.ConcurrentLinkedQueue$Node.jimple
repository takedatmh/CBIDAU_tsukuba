class java.util.concurrent.ConcurrentLinkedQueue$Node extends java.lang.Object
{
    volatile java.lang.Object item;
    volatile java.util.concurrent.ConcurrentLinkedQueue$Node next;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long itemOffset;
    private static final long nextOffset;

    void <init>(java.lang.Object)
    {
        java.util.concurrent.ConcurrentLinkedQueue$Node r0;
        java.lang.Object r1;
        long $l0;
        sun.misc.Unsafe $r2;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue$Node;
        r1 := @parameter0: java.lang.Object;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = <java.util.concurrent.ConcurrentLinkedQueue$Node: sun.misc.Unsafe UNSAFE>;
        $l0 = <java.util.concurrent.ConcurrentLinkedQueue$Node: long itemOffset>;
        virtualinvoke $r2.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r0, $l0, r1);
        return;
    }

    boolean casItem(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentLinkedQueue$Node r0;
        java.lang.Object r1, r2;
        sun.misc.Unsafe $r3;
        long $l0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue$Node;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r3 = <java.util.concurrent.ConcurrentLinkedQueue$Node: sun.misc.Unsafe UNSAFE>;
        $l0 = <java.util.concurrent.ConcurrentLinkedQueue$Node: long itemOffset>;
        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);
        return $z0;
    }

    void lazySetNext(java.util.concurrent.ConcurrentLinkedQueue$Node)
    {
        java.util.concurrent.ConcurrentLinkedQueue$Node r0, r1;
        sun.misc.Unsafe $r2;
        long $l0;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue$Node;
        r1 := @parameter0: java.util.concurrent.ConcurrentLinkedQueue$Node;
        $r2 = <java.util.concurrent.ConcurrentLinkedQueue$Node: sun.misc.Unsafe UNSAFE>;
        $l0 = <java.util.concurrent.ConcurrentLinkedQueue$Node: long nextOffset>;
        virtualinvoke $r2.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r0, $l0, r1);
        return;
    }

    boolean casNext(java.util.concurrent.ConcurrentLinkedQueue$Node, java.util.concurrent.ConcurrentLinkedQueue$Node)
    {
        java.util.concurrent.ConcurrentLinkedQueue$Node r0, r1, r2;
        sun.misc.Unsafe $r3;
        long $l0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue$Node;
        r1 := @parameter0: java.util.concurrent.ConcurrentLinkedQueue$Node;
        r2 := @parameter1: java.util.concurrent.ConcurrentLinkedQueue$Node;
        $r3 = <java.util.concurrent.ConcurrentLinkedQueue$Node: sun.misc.Unsafe UNSAFE>;
        $l0 = <java.util.concurrent.ConcurrentLinkedQueue$Node: long nextOffset>;
        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);
        return $z0;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0, $r2, $r4;
        java.lang.Class r1;
        java.lang.reflect.Field $r3, $r5;
        long $l0, $l1;
        java.lang.Exception $r6, r7;
        java.lang.Error $r8;

     label0:
        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <java.util.concurrent.ConcurrentLinkedQueue$Node: sun.misc.Unsafe UNSAFE> = $r0;
        r1 = class "java/util/concurrent/ConcurrentLinkedQueue$Node";
        $r2 = <java.util.concurrent.ConcurrentLinkedQueue$Node: sun.misc.Unsafe UNSAFE>;
        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("item");
        $l0 = virtualinvoke $r2.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);
        <java.util.concurrent.ConcurrentLinkedQueue$Node: long itemOffset> = $l0;
        $r4 = <java.util.concurrent.ConcurrentLinkedQueue$Node: sun.misc.Unsafe UNSAFE>;
        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("next");
        $l1 = virtualinvoke $r4.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r5);
        <java.util.concurrent.ConcurrentLinkedQueue$Node: long nextOffset> = $l1;

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r7 = $r6;
        $r8 = new java.lang.Error;
        specialinvoke $r8.<java.lang.Error: void <init>(java.lang.Throwable)>(r7);
        throw $r8;

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }
}
