public final class sun.util.LocaleServiceProviderPool extends java.lang.Object
{
    private static java.util.concurrent.ConcurrentMap poolOfPools;
    private java.util.Set providers;
    private java.util.Map providersCache;
    private java.util.Set availableLocales;
    private static volatile java.util.List availableJRELocales;
    private java.util.Set providerLocales;
    private static java.util.Locale locale_ja_JP_JP;
    private static java.util.Locale locale_th_TH_TH;

    public static sun.util.LocaleServiceProviderPool getPool(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.concurrent.ConcurrentMap $r1, $r6;
        sun.util.LocaleServiceProviderPool r2, r3, $r5;
        java.lang.Object $r4, $r7;

        r0 := @parameter0: java.lang.Class;
        $r1 = <sun.util.LocaleServiceProviderPool: java.util.concurrent.ConcurrentMap poolOfPools>;
        $r4 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0);
        r2 = (sun.util.LocaleServiceProviderPool) $r4;
        if r2 != null goto label0;

        $r5 = new sun.util.LocaleServiceProviderPool;
        specialinvoke $r5.<sun.util.LocaleServiceProviderPool: void <init>(java.lang.Class)>(r0);
        r3 = $r5;
        $r6 = <sun.util.LocaleServiceProviderPool: java.util.concurrent.ConcurrentMap poolOfPools>;
        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r0, r3);
        r2 = (sun.util.LocaleServiceProviderPool) $r7;
        if r2 != null goto label0;

        r2 = r3;

     label0:
        return r2;
    }

    private void <init>(java.lang.Class)
    {
        sun.util.LocaleServiceProviderPool r0;
        java.lang.Class r1;
        java.util.LinkedHashSet $r2;
        java.security.PrivilegedActionException r3, $r7;
        java.util.concurrent.ConcurrentHashMap $r4;
        sun.util.LocaleServiceProviderPool$1 $r5;
        java.lang.String $r8;

        r0 := @this: sun.util.LocaleServiceProviderPool;
        r1 := @parameter0: java.lang.Class;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = new java.util.LinkedHashSet;
        specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>();
        r0.<sun.util.LocaleServiceProviderPool: java.util.Set providers> = $r2;
        $r4 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
        r0.<sun.util.LocaleServiceProviderPool: java.util.Map providersCache> = $r4;
        r0.<sun.util.LocaleServiceProviderPool: java.util.Set availableLocales> = null;
        r0.<sun.util.LocaleServiceProviderPool: java.util.Set providerLocales> = null;

     label0:
        $r5 = new sun.util.LocaleServiceProviderPool$1;
        specialinvoke $r5.<sun.util.LocaleServiceProviderPool$1: void <init>(sun.util.LocaleServiceProviderPool,java.lang.Class)>(r0, r1);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r5);

     label1:
        goto label3;

     label2:
        $r7 := @caughtexception;
        r3 = $r7;
        $r8 = virtualinvoke r3.<java.security.PrivilegedActionException: java.lang.String toString()>();
        staticinvoke <sun.util.LocaleServiceProviderPool: void config(java.lang.String)>($r8);

     label3:
        return;

        catch java.security.PrivilegedActionException from label0 to label1 with label2;
    }

    private static void config(java.lang.String)
    {
        java.lang.String r0;
        sun.util.logging.PlatformLogger r1;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger getLogger(java.lang.String)>("sun.util.LocaleServiceProviderPool");
        virtualinvoke r1.<sun.util.logging.PlatformLogger: void config(java.lang.String)>(r0);
        return;
    }

    public static java.util.Locale[] getAllAvailableLocales()
    {
        java.util.Locale[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <sun.util.LocaleServiceProviderPool$AllAvailableLocales: java.util.Locale[] allAvailableLocales>;
        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();
        $r2 = (java.util.Locale[]) $r1;
        return $r2;
    }

    public synchronized java.util.Locale[] getAvailableLocales()
    {
        sun.util.LocaleServiceProviderPool r0;
        java.util.HashSet $r1;
        java.util.Locale[] r2;
        java.util.Set $r3, $r5, $r6, $r7, $r8;
        java.util.List $r4;
        boolean $z0;
        int $i0;

        r0 := @this: sun.util.LocaleServiceProviderPool;
        $r3 = r0.<sun.util.LocaleServiceProviderPool: java.util.Set availableLocales>;
        if $r3 != null goto label0;

        $r1 = new java.util.HashSet;
        $r4 = specialinvoke r0.<sun.util.LocaleServiceProviderPool: java.util.List getJRELocales()>();
        specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r4);
        r0.<sun.util.LocaleServiceProviderPool: java.util.Set availableLocales> = $r1;
        $z0 = virtualinvoke r0.<sun.util.LocaleServiceProviderPool: boolean hasProviders()>();
        if $z0 == 0 goto label0;

        $r5 = r0.<sun.util.LocaleServiceProviderPool: java.util.Set availableLocales>;
        $r6 = specialinvoke r0.<sun.util.LocaleServiceProviderPool: java.util.Set getProviderLocales()>();
        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

     label0:
        $r7 = r0.<sun.util.LocaleServiceProviderPool: java.util.Set availableLocales>;
        $i0 = interfaceinvoke $r7.<java.util.Set: int size()>();
        r2 = newarray (java.util.Locale)[$i0];
        $r8 = r0.<sun.util.LocaleServiceProviderPool: java.util.Set availableLocales>;
        interfaceinvoke $r8.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(r2);
        return r2;
    }

    private synchronized java.util.Set getProviderLocales()
    {
        sun.util.LocaleServiceProviderPool r0;
        java.util.HashSet $r1;
        java.util.Iterator r2;
        java.util.spi.LocaleServiceProvider r3;
        java.util.Locale[] r4, r5;
        int i0, i1;
        java.util.Locale r6, $r11;
        java.util.Set $r7, $r8, $r10, $r12;
        boolean $z0, $z1;
        java.lang.Object $r9;

        r0 := @this: sun.util.LocaleServiceProviderPool;
        $r7 = r0.<sun.util.LocaleServiceProviderPool: java.util.Set providerLocales>;
        if $r7 != null goto label3;

        $r1 = new java.util.HashSet;
        specialinvoke $r1.<java.util.HashSet: void <init>()>();
        r0.<sun.util.LocaleServiceProviderPool: java.util.Set providerLocales> = $r1;
        $z0 = virtualinvoke r0.<sun.util.LocaleServiceProviderPool: boolean hasProviders()>();
        if $z0 == 0 goto label3;

        $r8 = r0.<sun.util.LocaleServiceProviderPool: java.util.Set providers>;
        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label3;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.spi.LocaleServiceProvider) $r9;
        r4 = virtualinvoke r3.<java.util.spi.LocaleServiceProvider: java.util.Locale[] getAvailableLocales()>();
        r5 = r4;
        i0 = lengthof r5;
        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r6 = r5[i1];
        $r10 = r0.<sun.util.LocaleServiceProviderPool: java.util.Set providerLocales>;
        $r11 = staticinvoke <sun.util.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>(r6);
        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r11);
        i1 = i1 + 1;
        goto label1;

     label2:
        goto label0;

     label3:
        $r12 = r0.<sun.util.LocaleServiceProviderPool: java.util.Set providerLocales>;
        return $r12;
    }

    public boolean hasProviders()
    {
        sun.util.LocaleServiceProviderPool r0;
        java.util.Set $r1;
        boolean $z0, $z1;

        r0 := @this: sun.util.LocaleServiceProviderPool;
        $r1 = r0.<sun.util.LocaleServiceProviderPool: java.util.Set providers>;
        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    private java.util.List getJRELocales()
    {
        sun.util.LocaleServiceProviderPool r0;
        java.util.List $r1, $r9, $r13;
        java.lang.Class r2, $r8;
        java.util.Locale[] r3, r5;
        java.util.ArrayList r4, $r10;
        int i0, i1, $i2;
        java.util.Locale r6, $r11;
        java.lang.Throwable r7, $r12;

        r0 := @this: sun.util.LocaleServiceProviderPool;
        $r1 = <sun.util.LocaleServiceProviderPool: java.util.List availableJRELocales>;
        if $r1 != null goto label8;

        $r8 = class "sun/util/LocaleServiceProviderPool";
        r2 = $r8;
        entermonitor $r8;

     label0:
        $r9 = <sun.util.LocaleServiceProviderPool: java.util.List availableJRELocales>;
        if $r9 != null goto label3;

        r3 = staticinvoke <sun.util.resources.LocaleData: java.util.Locale[] getAvailableLocales()>();
        $r10 = new java.util.ArrayList;
        $i2 = lengthof r3;
        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>($i2);
        r4 = $r10;
        r5 = r3;
        i0 = lengthof r5;
        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r6 = r5[i1];
        $r11 = staticinvoke <sun.util.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>(r6);
        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r11);
        i1 = i1 + 1;
        goto label1;

     label2:
        <sun.util.LocaleServiceProviderPool: java.util.List availableJRELocales> = r4;

     label3:
        exitmonitor r2;

     label4:
        goto label8;

     label5:
        $r12 := @caughtexception;

     label6:
        r7 = $r12;
        exitmonitor r2;

     label7:
        throw r7;

     label8:
        $r13 = <sun.util.LocaleServiceProviderPool: java.util.List availableJRELocales>;
        return $r13;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private boolean isJRESupported(java.util.Locale)
    {
        sun.util.LocaleServiceProviderPool r0;
        java.util.Locale r1, $r3;
        java.util.List r2;
        boolean $z0;

        r0 := @this: sun.util.LocaleServiceProviderPool;
        r1 := @parameter0: java.util.Locale;
        r2 = specialinvoke r0.<sun.util.LocaleServiceProviderPool: java.util.List getJRELocales()>();
        $r3 = staticinvoke <sun.util.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>(r1);
        $z0 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r3);
        return $z0;
    }

    public transient java.lang.Object getLocalizedObject(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter, java.util.Locale, java.lang.Object[])
    {
        sun.util.LocaleServiceProviderPool r0;
        sun.util.LocaleServiceProviderPool$LocalizedObjectGetter r1;
        java.util.Locale r2;
        java.lang.Object[] r3;
        java.lang.Object $r4;

        r0 := @this: sun.util.LocaleServiceProviderPool;
        r1 := @parameter0: sun.util.LocaleServiceProviderPool$LocalizedObjectGetter;
        r2 := @parameter1: java.util.Locale;
        r3 := @parameter2: java.lang.Object[];
        $r4 = specialinvoke r0.<sun.util.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,sun.util.resources.OpenListResourceBundle,java.lang.String,java.lang.Object[])>(r1, r2, 1, null, null, null, r3);
        return $r4;
    }

    public transient java.lang.Object getLocalizedObject(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter, java.util.Locale, sun.util.resources.OpenListResourceBundle, java.lang.String, java.lang.Object[])
    {
        sun.util.LocaleServiceProviderPool r0;
        sun.util.LocaleServiceProviderPool$LocalizedObjectGetter r1;
        java.util.Locale r2;
        sun.util.resources.OpenListResourceBundle r3;
        java.lang.String r4;
        java.lang.Object[] r5;
        java.lang.Object $r6;

        r0 := @this: sun.util.LocaleServiceProviderPool;
        r1 := @parameter0: sun.util.LocaleServiceProviderPool$LocalizedObjectGetter;
        r2 := @parameter1: java.util.Locale;
        r3 := @parameter2: sun.util.resources.OpenListResourceBundle;
        r4 := @parameter3: java.lang.String;
        r5 := @parameter4: java.lang.Object[];
        $r6 = specialinvoke r0.<sun.util.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,sun.util.resources.OpenListResourceBundle,java.lang.String,java.lang.Object[])>(r1, r2, 0, null, r3, r4, r5);
        return $r6;
    }

    public transient java.lang.Object getLocalizedObject(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter, java.util.Locale, java.lang.String, sun.util.resources.OpenListResourceBundle, java.lang.String, java.lang.Object[])
    {
        sun.util.LocaleServiceProviderPool r0;
        sun.util.LocaleServiceProviderPool$LocalizedObjectGetter r1;
        java.util.Locale r2;
        java.lang.String r3, r5;
        sun.util.resources.OpenListResourceBundle r4;
        java.lang.Object[] r6;
        java.lang.Object $r7;

        r0 := @this: sun.util.LocaleServiceProviderPool;
        r1 := @parameter0: sun.util.LocaleServiceProviderPool$LocalizedObjectGetter;
        r2 := @parameter1: java.util.Locale;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: sun.util.resources.OpenListResourceBundle;
        r5 := @parameter4: java.lang.String;
        r6 := @parameter5: java.lang.Object[];
        $r7 = specialinvoke r0.<sun.util.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,sun.util.resources.OpenListResourceBundle,java.lang.String,java.lang.Object[])>(r1, r2, 0, r3, r4, r5, r6);
        return $r7;
    }

    private transient java.lang.Object getLocalizedObjectImpl(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter, java.util.Locale, boolean, java.lang.String, sun.util.resources.OpenListResourceBundle, java.lang.String, java.lang.Object[])
    {
        sun.util.LocaleServiceProviderPool r0;
        sun.util.LocaleServiceProviderPool$LocalizedObjectGetter r1;
        java.util.Locale r2, r7, r10, $r12, r21;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.String r3, r5, $r20;
        sun.util.resources.OpenListResourceBundle r4;
        java.lang.Object[] r6;
        java.util.List r8;
        null_type n0;
        java.util.Set r9, $r22;
        int i0, $i1;
        java.util.spi.LocaleServiceProvider r11, r23;
        java.lang.Object $r13, r14, r24;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r19;

        r0 := @this: sun.util.LocaleServiceProviderPool;
        r1 := @parameter0: sun.util.LocaleServiceProviderPool$LocalizedObjectGetter;
        r2 := @parameter1: java.util.Locale;
        z0 := @parameter2: boolean;
        r3 := @parameter3: java.lang.String;
        r4 := @parameter4: sun.util.resources.OpenListResourceBundle;
        r5 := @parameter5: java.lang.String;
        r6 := @parameter6: java.lang.Object[];
        $z1 = virtualinvoke r0.<sun.util.LocaleServiceProviderPool: boolean hasProviders()>();
        if $z1 == 0 goto label11;

        if r3 != null goto label0;

        r3 = r5;

     label0:
        if r4 == null goto label1;

        $r12 = virtualinvoke r4.<sun.util.resources.OpenListResourceBundle: java.util.Locale getLocale()>();
        goto label2;

     label1:
        $r12 = null;

     label2:
        r7 = $r12;
        r8 = staticinvoke <sun.util.LocaleServiceProviderPool: java.util.List getLookupLocales(java.util.Locale)>(r2);
        n0 = null;
        r9 = specialinvoke r0.<sun.util.LocaleServiceProviderPool: java.util.Set getProviderLocales()>();
        i0 = 0;

     label3:
        $i1 = interfaceinvoke r8.<java.util.List: int size()>();
        if i0 >= $i1 goto label8;

        $r13 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>(i0);
        r10 = (java.util.Locale) $r13;
        if r7 == null goto label4;

        $z2 = virtualinvoke r10.<java.util.Locale: boolean equals(java.lang.Object)>(r7);
        if $z2 == 0 goto label5;

        goto label8;

     label4:
        $z3 = specialinvoke r0.<sun.util.LocaleServiceProviderPool: boolean isJRESupported(java.util.Locale)>(r10);
        if $z3 == 0 goto label5;

        goto label8;

     label5:
        $z4 = interfaceinvoke r9.<java.util.Set: boolean contains(java.lang.Object)>(r10);
        if $z4 == 0 goto label7;

        r11 = specialinvoke r0.<sun.util.LocaleServiceProviderPool: java.util.spi.LocaleServiceProvider findProvider(java.util.Locale)>(r10);
        if r11 == null goto label7;

        r14 = interfaceinvoke r1.<sun.util.LocaleServiceProviderPool$LocalizedObjectGetter: java.lang.Object getObject(java.lang.Object,java.util.Locale,java.lang.String,java.lang.Object[])>(r11, r2, r5, r6);
        if r14 == null goto label6;

        return r14;

     label6:
        if z0 == 0 goto label7;

        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A locale sensitive service provider returned null for a localized objects,  which should not happen.  provider: ");
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" locale: ");
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <sun.util.LocaleServiceProviderPool: void config(java.lang.String)>($r20);

     label7:
        i0 = i0 + 1;
        goto label3;

     label8:
        if r4 == null goto label11;

        r21 = virtualinvoke r4.<sun.util.resources.OpenListResourceBundle: java.util.Locale getLocale()>();
        $r22 = virtualinvoke r4.<sun.util.resources.OpenListResourceBundle: java.util.Set handleGetKeys()>();
        $z5 = interfaceinvoke $r22.<java.util.Set: boolean contains(java.lang.Object)>(r3);
        if $z5 == 0 goto label9;

        return null;

     label9:
        r23 = specialinvoke r0.<sun.util.LocaleServiceProviderPool: java.util.spi.LocaleServiceProvider findProvider(java.util.Locale)>(r21);
        if r23 == null goto label10;

        r24 = interfaceinvoke r1.<sun.util.LocaleServiceProviderPool$LocalizedObjectGetter: java.lang.Object getObject(java.lang.Object,java.util.Locale,java.lang.String,java.lang.Object[])>(r23, r2, r5, r6);
        if r24 == null goto label10;

        return r24;

     label10:
        r4 = virtualinvoke r4.<sun.util.resources.OpenListResourceBundle: sun.util.resources.OpenListResourceBundle getParent()>();
        goto label8;

     label11:
        return null;
    }

    private java.util.spi.LocaleServiceProvider findProvider(java.util.Locale)
    {
        sun.util.LocaleServiceProviderPool r0;
        java.util.Locale r1, r6, r15;
        java.util.spi.LocaleServiceProvider r2, r3, r7, $r18;
        java.util.Locale[] r4, r5;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map $r8, $r9, $r16, $r19;
        java.lang.Object $r10, $r14, $r17;
        sun.util.LocaleServiceProviderPool$NullProvider $r11, $r20;
        java.util.Set $r12;
        java.util.Iterator r13;

        r0 := @this: sun.util.LocaleServiceProviderPool;
        r1 := @parameter0: java.util.Locale;
        $z0 = virtualinvoke r0.<sun.util.LocaleServiceProviderPool: boolean hasProviders()>();
        if $z0 != 0 goto label0;

        return null;

     label0:
        $r8 = r0.<sun.util.LocaleServiceProviderPool: java.util.Map providersCache>;
        $z1 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);
        if $z1 == 0 goto label2;

        $r9 = r0.<sun.util.LocaleServiceProviderPool: java.util.Map providersCache>;
        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        r2 = (java.util.spi.LocaleServiceProvider) $r10;
        $r11 = staticinvoke <sun.util.LocaleServiceProviderPool$NullProvider: sun.util.LocaleServiceProviderPool$NullProvider access$300()>();
        if r2 == $r11 goto label1;

        return r2;

     label1:
        goto label10;

     label2:
        $r12 = r0.<sun.util.LocaleServiceProviderPool: java.util.Set providers>;
        r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label9;

        $r14 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.spi.LocaleServiceProvider) $r14;
        r4 = virtualinvoke r3.<java.util.spi.LocaleServiceProvider: java.util.Locale[] getAvailableLocales()>();
        r5 = r4;
        i0 = lengthof r5;
        i1 = 0;

     label4:
        if i1 >= i0 goto label8;

        r6 = r5[i1];
        r15 = staticinvoke <sun.util.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>(r6);
        $z3 = virtualinvoke r1.<java.util.Locale: boolean equals(java.lang.Object)>(r15);
        if $z3 == 0 goto label7;

        $r16 = r0.<sun.util.LocaleServiceProviderPool: java.util.Map providersCache>;
        $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);
        r7 = (java.util.spi.LocaleServiceProvider) $r17;
        if r7 == null goto label5;

        $r18 = r7;
        goto label6;

     label5:
        $r18 = r3;

     label6:
        return $r18;

     label7:
        i1 = i1 + 1;
        goto label4;

     label8:
        goto label3;

     label9:
        $r19 = r0.<sun.util.LocaleServiceProviderPool: java.util.Map providersCache>;
        $r20 = staticinvoke <sun.util.LocaleServiceProviderPool$NullProvider: sun.util.LocaleServiceProviderPool$NullProvider access$300()>();
        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r20);

     label10:
        return null;
    }

    private static java.util.List getLookupLocales(java.util.Locale)
    {
        java.util.Locale r0;
        sun.util.LocaleServiceProviderPool$2 $r1;
        java.util.List r2;

        r0 := @parameter0: java.util.Locale;
        $r1 = new sun.util.LocaleServiceProviderPool$2;
        specialinvoke $r1.<sun.util.LocaleServiceProviderPool$2: void <init>()>();
        r2 = virtualinvoke $r1.<sun.util.LocaleServiceProviderPool$2: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>("", r0);
        return r2;
    }

    private static java.util.Locale getLookupLocale(java.util.Locale)
    {
        java.util.Locale r0, r1, $r3, $r6, $r16;
        java.util.Set r2;
        java.util.Locale$Builder r4, $r7;
        java.util.IllformedLocaleException r5, $r10;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        java.lang.String $r15, $r17, $r18, $r19;

        r0 := @parameter0: java.util.Locale;
        r1 = r0;
        r2 = virtualinvoke r0.<java.util.Locale: java.util.Set getExtensionKeys()>();
        $z0 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>();
        if $z0 != 0 goto label3;

        $r3 = <sun.util.LocaleServiceProviderPool: java.util.Locale locale_ja_JP_JP>;
        $z1 = virtualinvoke r0.<java.util.Locale: boolean equals(java.lang.Object)>($r3);
        if $z1 != 0 goto label3;

        $r6 = <sun.util.LocaleServiceProviderPool: java.util.Locale locale_th_TH_TH>;
        $z2 = virtualinvoke r0.<java.util.Locale: boolean equals(java.lang.Object)>($r6);
        if $z2 != 0 goto label3;

        $r7 = new java.util.Locale$Builder;
        specialinvoke $r7.<java.util.Locale$Builder: void <init>()>();
        r4 = $r7;

     label0:
        virtualinvoke r4.<java.util.Locale$Builder: java.util.Locale$Builder setLocale(java.util.Locale)>(r0);
        virtualinvoke r4.<java.util.Locale$Builder: java.util.Locale$Builder clearExtensions()>();
        r1 = virtualinvoke r4.<java.util.Locale$Builder: java.util.Locale build()>();

     label1:
        goto label3;

     label2:
        $r10 := @caughtexception;
        r5 = $r10;
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A locale(");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") has non-empty extensions, but has illformed fields.");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <sun.util.LocaleServiceProviderPool: void config(java.lang.String)>($r15);
        $r16 = new java.util.Locale;
        $r17 = virtualinvoke r0.<java.util.Locale: java.lang.String getLanguage()>();
        $r18 = virtualinvoke r0.<java.util.Locale: java.lang.String getCountry()>();
        $r19 = virtualinvoke r0.<java.util.Locale: java.lang.String getVariant()>();
        specialinvoke $r16.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r17, $r18, $r19);
        r1 = $r16;

     label3:
        return r1;

        catch java.util.IllformedLocaleException from label0 to label1 with label2;
    }

    static java.util.Set access$000(sun.util.LocaleServiceProviderPool)
    {
        sun.util.LocaleServiceProviderPool r0;
        java.util.Set $r1;

        r0 := @parameter0: sun.util.LocaleServiceProviderPool;
        $r1 = r0.<sun.util.LocaleServiceProviderPool: java.util.Set providers>;
        return $r1;
    }

    static java.util.Locale access$100(java.util.Locale)
    {
        java.util.Locale r0, $r1;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <sun.util.LocaleServiceProviderPool: java.util.Locale getLookupLocale(java.util.Locale)>(r0);
        return $r1;
    }

    static java.util.Set access$200(sun.util.LocaleServiceProviderPool)
    {
        sun.util.LocaleServiceProviderPool r0;
        java.util.Set $r1;

        r0 := @parameter0: sun.util.LocaleServiceProviderPool;
        $r1 = specialinvoke r0.<sun.util.LocaleServiceProviderPool: java.util.Set getProviderLocales()>();
        return $r1;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;
        java.util.Locale $r1, $r2;

        $r0 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
        <sun.util.LocaleServiceProviderPool: java.util.concurrent.ConcurrentMap poolOfPools> = $r0;
        <sun.util.LocaleServiceProviderPool: java.util.List availableJRELocales> = null;
        $r1 = new java.util.Locale;
        specialinvoke $r1.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>("ja", "JP", "JP");
        <sun.util.LocaleServiceProviderPool: java.util.Locale locale_ja_JP_JP> = $r1;
        $r2 = new java.util.Locale;
        specialinvoke $r2.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>("th", "TH", "TH");
        <sun.util.LocaleServiceProviderPool: java.util.Locale locale_th_TH_TH> = $r2;
        return;
    }
}
