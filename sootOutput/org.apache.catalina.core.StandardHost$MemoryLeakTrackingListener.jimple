class org.apache.catalina.core.StandardHost$MemoryLeakTrackingListener extends java.lang.Object implements org.apache.catalina.LifecycleListener
{
    final org.apache.catalina.core.StandardHost this$0;

    private void <init>(org.apache.catalina.core.StandardHost)
    {
        org.apache.catalina.core.StandardHost$MemoryLeakTrackingListener r0;
        org.apache.catalina.core.StandardHost r1;

        r0 := @this: org.apache.catalina.core.StandardHost$MemoryLeakTrackingListener;
        r1 := @parameter0: org.apache.catalina.core.StandardHost;
        r0.<org.apache.catalina.core.StandardHost$MemoryLeakTrackingListener: org.apache.catalina.core.StandardHost this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public void lifecycleEvent(org.apache.catalina.LifecycleEvent)
    {
        org.apache.catalina.core.StandardHost$MemoryLeakTrackingListener r0;
        org.apache.catalina.LifecycleEvent r1;
        org.apache.catalina.Context r2;
        java.lang.String $r3, $r11;
        boolean $z0, $z1;
        java.lang.Object $r4, $r5;
        org.apache.catalina.core.StandardHost $r6;
        java.util.Map $r7;
        org.apache.catalina.Loader $r8;
        java.lang.ClassLoader $r9;
        javax.servlet.ServletContext $r10;

        r0 := @this: org.apache.catalina.core.StandardHost$MemoryLeakTrackingListener;
        r1 := @parameter0: org.apache.catalina.LifecycleEvent;
        $r3 = virtualinvoke r1.<org.apache.catalina.LifecycleEvent: java.lang.String getType()>();
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("after_start");
        if $z0 == 0 goto label0;

        $r4 = virtualinvoke r1.<org.apache.catalina.LifecycleEvent: java.lang.Object getSource()>();
        $z1 = $r4 instanceof org.apache.catalina.Context;
        if $z1 == 0 goto label0;

        $r5 = virtualinvoke r1.<org.apache.catalina.LifecycleEvent: java.lang.Object getSource()>();
        r2 = (org.apache.catalina.Context) $r5;
        $r6 = r0.<org.apache.catalina.core.StandardHost$MemoryLeakTrackingListener: org.apache.catalina.core.StandardHost this$0>;
        $r7 = staticinvoke <org.apache.catalina.core.StandardHost: java.util.Map access$0(org.apache.catalina.core.StandardHost)>($r6);
        $r8 = interfaceinvoke r2.<org.apache.catalina.Context: org.apache.catalina.Loader getLoader()>();
        $r9 = interfaceinvoke $r8.<org.apache.catalina.Loader: java.lang.ClassLoader getClassLoader()>();
        $r10 = interfaceinvoke r2.<org.apache.catalina.Context: javax.servlet.ServletContext getServletContext()>();
        $r11 = interfaceinvoke $r10.<javax.servlet.ServletContext: java.lang.String getContextPath()>();
        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r11);

     label0:
        return;
    }

    void <init>(org.apache.catalina.core.StandardHost, org.apache.catalina.core.StandardHost$MemoryLeakTrackingListener)
    {
        org.apache.catalina.core.StandardHost$MemoryLeakTrackingListener r0, r2;
        org.apache.catalina.core.StandardHost r1;

        r0 := @this: org.apache.catalina.core.StandardHost$MemoryLeakTrackingListener;
        r1 := @parameter0: org.apache.catalina.core.StandardHost;
        r2 := @parameter1: org.apache.catalina.core.StandardHost$MemoryLeakTrackingListener;
        specialinvoke r0.<org.apache.catalina.core.StandardHost$MemoryLeakTrackingListener: void <init>(org.apache.catalina.core.StandardHost)>(r1);
        return;
    }
}
