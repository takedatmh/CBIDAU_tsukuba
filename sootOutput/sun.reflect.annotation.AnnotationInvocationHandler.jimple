class sun.reflect.annotation.AnnotationInvocationHandler extends java.lang.Object implements java.lang.reflect.InvocationHandler, java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.lang.Class type;
    private final java.util.Map memberValues;
    private transient volatile java.lang.reflect.Method[] memberMethods;
    static final boolean $assertionsDisabled;

    void <init>(java.lang.Class, java.util.Map)
    {
        sun.reflect.annotation.AnnotationInvocationHandler r0;
        java.lang.Class r1, $r4;
        java.util.Map r2;
        java.lang.Class[] r3;
        boolean $z0;
        int $i0;
        java.lang.annotation.AnnotationFormatError $r5;

        r0 := @this: sun.reflect.annotation.AnnotationInvocationHandler;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.util.Map;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.lang.reflect.Method[] memberMethods> = null;
        r3 = virtualinvoke r1.<java.lang.Class: java.lang.Class[] getInterfaces()>();
        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAnnotation()>();
        if $z0 == 0 goto label0;

        $i0 = lengthof r3;
        if $i0 != 1 goto label0;

        $r4 = r3[0];
        if $r4 == class "java/lang/annotation/Annotation" goto label1;

     label0:
        $r5 = new java.lang.annotation.AnnotationFormatError;
        specialinvoke $r5.<java.lang.annotation.AnnotationFormatError: void <init>(java.lang.String)>("Attempt to create proxy for a non-annotation type.");
        throw $r5;

     label1:
        r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.lang.Class type> = r1;
        r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.util.Map memberValues> = r2;
        return;
    }

    public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])
    {
        sun.reflect.annotation.AnnotationInvocationHandler r0;
        java.lang.Object r1, $r8, r15;
        java.lang.reflect.Method r2;
        java.lang.Object[] r3;
        java.lang.String r4, r6, $r11;
        java.lang.Class[] r5;
        byte b0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i1, $i2, $i3, $i4, $i5;
        java.lang.Class $r7, $r13, $r17, $r20;
        java.lang.Boolean $r9;
        java.lang.AssertionError $r10;
        java.lang.Integer $r12;
        java.util.Map $r14;
        java.lang.annotation.IncompleteAnnotationException $r16;
        sun.reflect.annotation.ExceptionProxy $r18;
        java.lang.RuntimeException $r19;

        r0 := @this: sun.reflect.annotation.AnnotationInvocationHandler;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.reflect.Method;
        r3 := @parameter2: java.lang.Object[];
        r4 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();
        r5 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("equals");
        if $z0 == 0 goto label0;

        $i1 = lengthof r5;
        if $i1 != 1 goto label0;

        $r7 = r5[0];
        if $r7 != class "java/lang/Object" goto label0;

        $r8 = r3[0];
        $r9 = specialinvoke r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.lang.Boolean equalsImpl(java.lang.Object)>($r8);
        return $r9;

     label0:
        $i2 = lengthof r5;
        if $i2 == 0 goto label1;

        $r10 = new java.lang.AssertionError;
        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>("Too many parameters for an annotation method");
        throw $r10;

     label1:
        r6 = r4;
        b0 = -1;
        $i3 = virtualinvoke r6.<java.lang.String: int hashCode()>();
        lookupswitch($i3)
        {
            case -1776922004: goto label2;
            case 147696667: goto label3;
            case 1444986633: goto label4;
            default: goto label5;
        };

     label2:
        $z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("toString");
        if $z1 == 0 goto label5;

        b0 = 0;
        goto label5;

     label3:
        $z2 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("hashCode");
        if $z2 == 0 goto label5;

        b0 = 1;
        goto label5;

     label4:
        $z3 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("annotationType");
        if $z3 == 0 goto label5;

        b0 = 2;

     label5:
        tableswitch(b0)
        {
            case 0: goto label6;
            case 1: goto label7;
            case 2: goto label8;
            default: goto label9;
        };

     label6:
        $r11 = specialinvoke r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.lang.String toStringImpl()>();
        return $r11;

     label7:
        $i4 = specialinvoke r0.<sun.reflect.annotation.AnnotationInvocationHandler: int hashCodeImpl()>();
        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);
        return $r12;

     label8:
        $r13 = r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.lang.Class type>;
        return $r13;

     label9:
        $r14 = r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.util.Map memberValues>;
        r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);
        if r15 != null goto label10;

        $r16 = new java.lang.annotation.IncompleteAnnotationException;
        $r17 = r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.lang.Class type>;
        specialinvoke $r16.<java.lang.annotation.IncompleteAnnotationException: void <init>(java.lang.Class,java.lang.String)>($r17, r4);
        throw $r16;

     label10:
        $z4 = r15 instanceof sun.reflect.annotation.ExceptionProxy;
        if $z4 == 0 goto label11;

        $r18 = (sun.reflect.annotation.ExceptionProxy) r15;
        $r19 = virtualinvoke $r18.<sun.reflect.annotation.ExceptionProxy: java.lang.RuntimeException generateException()>();
        throw $r19;

     label11:
        $r20 = virtualinvoke r15.<java.lang.Object: java.lang.Class getClass()>();
        $z5 = virtualinvoke $r20.<java.lang.Class: boolean isArray()>();
        if $z5 == 0 goto label12;

        $i5 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r15);
        if $i5 == 0 goto label12;

        r15 = specialinvoke r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.lang.Object cloneArray(java.lang.Object)>(r15);

     label12:
        return r15;
    }

    private java.lang.Object cloneArray(java.lang.Object)
    {
        sun.reflect.annotation.AnnotationInvocationHandler r0;
        java.lang.Object r1, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29;
        java.lang.Class r2;
        byte[] r3, $r4;
        char[] $r6, r7;
        double[] $r9, r10;
        float[] $r12, r13;
        int[] $r15, r16;
        long[] $r18, r19;
        short[] $r21, r22;
        boolean[] $r24, r25;
        java.lang.Object[] $r27, r28;

        r0 := @this: sun.reflect.annotation.AnnotationInvocationHandler;
        r1 := @parameter0: java.lang.Object;
        r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        if r2 != class "[B" goto label0;

        $r4 = (byte[]) r1;
        r3 = (byte[]) $r4;
        $r5 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();
        return $r5;

     label0:
        if r2 != class "[C" goto label1;

        $r6 = (char[]) r1;
        r7 = (char[]) $r6;
        $r8 = virtualinvoke r7.<java.lang.Object: java.lang.Object clone()>();
        return $r8;

     label1:
        if r2 != class "[D" goto label2;

        $r9 = (double[]) r1;
        r10 = (double[]) $r9;
        $r11 = virtualinvoke r10.<java.lang.Object: java.lang.Object clone()>();
        return $r11;

     label2:
        if r2 != class "[F" goto label3;

        $r12 = (float[]) r1;
        r13 = (float[]) $r12;
        $r14 = virtualinvoke r13.<java.lang.Object: java.lang.Object clone()>();
        return $r14;

     label3:
        if r2 != class "[I" goto label4;

        $r15 = (int[]) r1;
        r16 = (int[]) $r15;
        $r17 = virtualinvoke r16.<java.lang.Object: java.lang.Object clone()>();
        return $r17;

     label4:
        if r2 != class "[J" goto label5;

        $r18 = (long[]) r1;
        r19 = (long[]) $r18;
        $r20 = virtualinvoke r19.<java.lang.Object: java.lang.Object clone()>();
        return $r20;

     label5:
        if r2 != class "[S" goto label6;

        $r21 = (short[]) r1;
        r22 = (short[]) $r21;
        $r23 = virtualinvoke r22.<java.lang.Object: java.lang.Object clone()>();
        return $r23;

     label6:
        if r2 != class "[Z" goto label7;

        $r24 = (boolean[]) r1;
        r25 = (boolean[]) $r24;
        $r26 = virtualinvoke r25.<java.lang.Object: java.lang.Object clone()>();
        return $r26;

     label7:
        $r27 = (java.lang.Object[]) r1;
        r28 = (java.lang.Object[]) $r27;
        $r29 = virtualinvoke r28.<java.lang.Object: java.lang.Object clone()>();
        return $r29;
    }

    private java.lang.String toStringImpl()
    {
        sun.reflect.annotation.AnnotationInvocationHandler r0;
        java.lang.StringBuilder $r1, r2;
        boolean z0, $z1;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.lang.Class $r6;
        java.lang.String $r7, $r15, $r19, $r22;
        java.util.Map $r10;
        java.util.Set $r11;
        java.lang.Object $r12, $r14, $r18;

        r0 := @this: sun.reflect.annotation.AnnotationInvocationHandler;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(128);
        r2 = $r1;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);
        $r6 = r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.lang.Class type>;
        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);
        z0 = 1;
        $r10 = r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.util.Map memberValues>;
        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set entrySet()>();
        r3 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label3;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.util.Map$Entry) $r12;
        if z0 == 0 goto label1;

        z0 = 0;
        goto label2;

     label1:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $r14 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r15 = (java.lang.String) $r14;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);
        $r18 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();
        $r19 = staticinvoke <sun.reflect.annotation.AnnotationInvocationHandler: java.lang.String memberValueToString(java.lang.Object)>($r18);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);
        goto label0;

     label3:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);
        $r22 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r22;
    }

    private static java.lang.String memberValueToString(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class r1;
        boolean $z0;
        java.lang.String $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29;
        byte[] $r3, $r4;
        char[] $r6, $r7;
        double[] $r9, $r10;
        float[] $r12, $r13;
        int[] $r15, $r16;
        long[] $r18, $r19;
        short[] $r21, $r22;
        boolean[] $r24, $r25;
        java.lang.Object[] $r27, $r28;

        r0 := @parameter0: java.lang.Object;
        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();
        if $z0 != 0 goto label0;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();
        return $r2;

     label0:
        if r1 != class "[B" goto label1;

        $r3 = (byte[]) r0;
        $r4 = (byte[]) $r3;
        $r5 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>($r4);
        return $r5;

     label1:
        if r1 != class "[C" goto label2;

        $r6 = (char[]) r0;
        $r7 = (char[]) $r6;
        $r8 = staticinvoke <java.util.Arrays: java.lang.String toString(char[])>($r7);
        return $r8;

     label2:
        if r1 != class "[D" goto label3;

        $r9 = (double[]) r0;
        $r10 = (double[]) $r9;
        $r11 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r10);
        return $r11;

     label3:
        if r1 != class "[F" goto label4;

        $r12 = (float[]) r0;
        $r13 = (float[]) $r12;
        $r14 = staticinvoke <java.util.Arrays: java.lang.String toString(float[])>($r13);
        return $r14;

     label4:
        if r1 != class "[I" goto label5;

        $r15 = (int[]) r0;
        $r16 = (int[]) $r15;
        $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>($r16);
        return $r17;

     label5:
        if r1 != class "[J" goto label6;

        $r18 = (long[]) r0;
        $r19 = (long[]) $r18;
        $r20 = staticinvoke <java.util.Arrays: java.lang.String toString(long[])>($r19);
        return $r20;

     label6:
        if r1 != class "[S" goto label7;

        $r21 = (short[]) r0;
        $r22 = (short[]) $r21;
        $r23 = staticinvoke <java.util.Arrays: java.lang.String toString(short[])>($r22);
        return $r23;

     label7:
        if r1 != class "[Z" goto label8;

        $r24 = (boolean[]) r0;
        $r25 = (boolean[]) $r24;
        $r26 = staticinvoke <java.util.Arrays: java.lang.String toString(boolean[])>($r25);
        return $r26;

     label8:
        $r27 = (java.lang.Object[]) r0;
        $r28 = (java.lang.Object[]) $r27;
        $r29 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r28);
        return $r29;
    }

    private java.lang.Boolean equalsImpl(java.lang.Object)
    {
        sun.reflect.annotation.AnnotationInvocationHandler r0, r6;
        java.lang.Object r1, r5, r13;
        java.lang.reflect.Method[] r2;
        int i0, i1;
        java.lang.reflect.Method r3;
        java.lang.String r4;
        null_type n0;
        java.lang.reflect.InvocationTargetException r7, $r15;
        java.lang.Boolean $r8, $r10, $r16, $r20, $r21;
        java.lang.Class $r9;
        boolean $z0, $z1;
        java.util.Map $r11, $r12;
        java.lang.Object[] $r14;
        java.lang.IllegalAccessException $r17, r18;
        java.lang.AssertionError $r19;

        r0 := @this: sun.reflect.annotation.AnnotationInvocationHandler;
        r1 := @parameter0: java.lang.Object;
        if r1 != r0 goto label0;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
        return $r8;

     label0:
        $r9 = r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.lang.Class type>;
        $z0 = virtualinvoke $r9.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);
        if $z0 != 0 goto label1;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
        return $r10;

     label1:
        r2 = specialinvoke r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.lang.reflect.Method[] getMemberMethods()>();
        i0 = lengthof r2;
        i1 = 0;

     label2:
        if i1 >= i0 goto label9;

        r3 = r2[i1];
        r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();
        $r11 = r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.util.Map memberValues>;
        r5 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);
        n0 = null;
        r6 = specialinvoke r0.<sun.reflect.annotation.AnnotationInvocationHandler: sun.reflect.annotation.AnnotationInvocationHandler asOneOfUs(java.lang.Object)>(r1);
        if r6 == null goto label3;

        $r12 = r6.<sun.reflect.annotation.AnnotationInvocationHandler: java.util.Map memberValues>;
        r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);
        goto label7;

     label3:
        $r14 = newarray (java.lang.Object)[0];
        r13 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r14);

     label4:
        goto label7;

     label5:
        $r15 := @caughtexception;
        r7 = $r15;
        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
        return $r16;

     label6:
        $r17 := @caughtexception;
        r18 = $r17;
        $r19 = new java.lang.AssertionError;
        specialinvoke $r19.<java.lang.AssertionError: void <init>(java.lang.Object)>(r18);
        throw $r19;

     label7:
        $z1 = staticinvoke <sun.reflect.annotation.AnnotationInvocationHandler: boolean memberValueEquals(java.lang.Object,java.lang.Object)>(r5, r13);
        if $z1 != 0 goto label8;

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
        return $r20;

     label8:
        i1 = i1 + 1;
        goto label2;

     label9:
        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
        return $r21;

        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
    }

    private sun.reflect.annotation.AnnotationInvocationHandler asOneOfUs(java.lang.Object)
    {
        sun.reflect.annotation.AnnotationInvocationHandler r0, $r4;
        java.lang.Object r1;
        java.lang.reflect.InvocationHandler r2;
        java.lang.Class $r3;
        boolean $z0, $z1;

        r0 := @this: sun.reflect.annotation.AnnotationInvocationHandler;
        r1 := @parameter0: java.lang.Object;
        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $z0 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>($r3);
        if $z0 == 0 goto label0;

        r2 = staticinvoke <java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>(r1);
        $z1 = r2 instanceof sun.reflect.annotation.AnnotationInvocationHandler;
        if $z1 == 0 goto label0;

        $r4 = (sun.reflect.annotation.AnnotationInvocationHandler) r2;
        return $r4;

     label0:
        return null;
    }

    private static boolean memberValueEquals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        java.lang.Class r2, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.lang.Object[] $r3, $r4, $r5, $r6;
        byte[] $r8, $r9, $r10, $r11;
        char[] $r12, $r13, $r14, $r15;
        double[] $r16, $r17, $r18, $r19;
        float[] $r20, $r21, $r22, $r23;
        int[] $r24, $r25, $r26, $r27;
        long[] $r28, $r29, $r30, $r31;
        short[] $r32, $r33, $r34, $r35;
        java.lang.AssertionError $r36;
        boolean[] $r37, $r38, $r39, $r40;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $z0 = virtualinvoke r2.<java.lang.Class: boolean isArray()>();
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);
        return $z1;

     label0:
        $z2 = r0 instanceof java.lang.Object[];
        if $z2 == 0 goto label1;

        $z3 = r1 instanceof java.lang.Object[];
        if $z3 == 0 goto label1;

        $r3 = (java.lang.Object[]) r0;
        $r4 = (java.lang.Object[]) $r3;
        $r5 = (java.lang.Object[]) r1;
        $r6 = (java.lang.Object[]) $r5;
        $z4 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r4, $r6);
        return $z4;

     label1:
        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        if $r7 == r2 goto label2;

        return 0;

     label2:
        if r2 != class "[B" goto label3;

        $r8 = (byte[]) r0;
        $r9 = (byte[]) $r8;
        $r10 = (byte[]) r1;
        $r11 = (byte[]) $r10;
        $z5 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r9, $r11);
        return $z5;

     label3:
        if r2 != class "[C" goto label4;

        $r12 = (char[]) r0;
        $r13 = (char[]) $r12;
        $r14 = (char[]) r1;
        $r15 = (char[]) $r14;
        $z6 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($r13, $r15);
        return $z6;

     label4:
        if r2 != class "[D" goto label5;

        $r16 = (double[]) r0;
        $r17 = (double[]) $r16;
        $r18 = (double[]) r1;
        $r19 = (double[]) $r18;
        $z7 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r17, $r19);
        return $z7;

     label5:
        if r2 != class "[F" goto label6;

        $r20 = (float[]) r0;
        $r21 = (float[]) $r20;
        $r22 = (float[]) r1;
        $r23 = (float[]) $r22;
        $z8 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($r21, $r23);
        return $z8;

     label6:
        if r2 != class "[I" goto label7;

        $r24 = (int[]) r0;
        $r25 = (int[]) $r24;
        $r26 = (int[]) r1;
        $r27 = (int[]) $r26;
        $z9 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r25, $r27);
        return $z9;

     label7:
        if r2 != class "[J" goto label8;

        $r28 = (long[]) r0;
        $r29 = (long[]) $r28;
        $r30 = (long[]) r1;
        $r31 = (long[]) $r30;
        $z10 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r29, $r31);
        return $z10;

     label8:
        if r2 != class "[S" goto label9;

        $r32 = (short[]) r0;
        $r33 = (short[]) $r32;
        $r34 = (short[]) r1;
        $r35 = (short[]) $r34;
        $z11 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($r33, $r35);
        return $z11;

     label9:
        $z12 = <sun.reflect.annotation.AnnotationInvocationHandler: boolean $assertionsDisabled>;
        if $z12 != 0 goto label10;

        if r2 == class "[Z" goto label10;

        $r36 = new java.lang.AssertionError;
        specialinvoke $r36.<java.lang.AssertionError: void <init>()>();
        throw $r36;

     label10:
        $r37 = (boolean[]) r0;
        $r38 = (boolean[]) $r37;
        $r39 = (boolean[]) r1;
        $r40 = (boolean[]) $r39;
        $z13 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($r38, $r40);
        return $z13;
    }

    private java.lang.reflect.Method[] getMemberMethods()
    {
        sun.reflect.annotation.AnnotationInvocationHandler r0;
        sun.reflect.annotation.AnnotationInvocationHandler$1 $r1;
        java.lang.reflect.Method[] $r2, $r4, $r5;
        java.lang.Object $r3;

        r0 := @this: sun.reflect.annotation.AnnotationInvocationHandler;
        $r2 = r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.lang.reflect.Method[] memberMethods>;
        if $r2 != null goto label0;

        $r1 = new sun.reflect.annotation.AnnotationInvocationHandler$1;
        specialinvoke $r1.<sun.reflect.annotation.AnnotationInvocationHandler$1: void <init>(sun.reflect.annotation.AnnotationInvocationHandler)>(r0);
        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        $r4 = (java.lang.reflect.Method[]) $r3;
        r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.lang.reflect.Method[] memberMethods> = $r4;

     label0:
        $r5 = r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.lang.reflect.Method[] memberMethods>;
        return $r5;
    }

    private void validateAnnotationMethods(java.lang.reflect.Method[])
    {
        sun.reflect.annotation.AnnotationInvocationHandler r0;
        java.lang.reflect.Method[] r1, r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int i0, i1, $i2, $i3, $i4;
        java.lang.reflect.Method r3;
        java.lang.Class r4, $r8, $r9;
        java.lang.String r5;
        java.lang.Class[] $r6, $r7;
        java.lang.annotation.AnnotationFormatError $r10;

        r0 := @this: sun.reflect.annotation.AnnotationInvocationHandler;
        r1 := @parameter0: java.lang.reflect.Method[];
        z0 = 1;
        r2 = r1;
        i0 = lengthof r2;
        i1 = 0;

     label0:
        if i1 >= i0 goto label10;

        r3 = r2[i1];
        $i2 = virtualinvoke r3.<java.lang.reflect.Method: int getModifiers()>();
        if $i2 != 1025 goto label1;

        $r6 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        $i3 = lengthof $r6;
        if $i3 != 0 goto label1;

        $r7 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();
        $i4 = lengthof $r7;
        if $i4 == 0 goto label2;

     label1:
        z0 = 0;
        goto label10;

     label2:
        r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
        $z1 = virtualinvoke r4.<java.lang.Class: boolean isArray()>();
        if $z1 == 0 goto label3;

        r4 = virtualinvoke r4.<java.lang.Class: java.lang.Class getComponentType()>();
        $z2 = virtualinvoke r4.<java.lang.Class: boolean isArray()>();
        if $z2 == 0 goto label3;

        z0 = 0;
        goto label10;

     label3:
        $z3 = virtualinvoke r4.<java.lang.Class: boolean isPrimitive()>();
        if $z3 == 0 goto label4;

        $r8 = <java.lang.Void: java.lang.Class TYPE>;
        if r4 != $r8 goto label5;

     label4:
        if r4 == class "java/lang/String" goto label5;

        if r4 == class "java/lang/Class" goto label5;

        $z4 = virtualinvoke r4.<java.lang.Class: boolean isEnum()>();
        if $z4 != 0 goto label5;

        $z5 = virtualinvoke r4.<java.lang.Class: boolean isAnnotation()>();
        if $z5 != 0 goto label5;

        z0 = 0;
        goto label10;

     label5:
        r5 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();
        $z6 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("toString");
        if $z6 == 0 goto label6;

        if r4 == class "java/lang/String" goto label8;

     label6:
        $z7 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("hashCode");
        if $z7 == 0 goto label7;

        $r9 = <java.lang.Integer: java.lang.Class TYPE>;
        if r4 == $r9 goto label8;

     label7:
        $z8 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("annotationType");
        if $z8 == 0 goto label9;

        if r4 != class "java/lang/Class" goto label9;

     label8:
        z0 = 0;
        goto label10;

     label9:
        i1 = i1 + 1;
        goto label0;

     label10:
        if z0 == 0 goto label11;

        return;

     label11:
        $r10 = new java.lang.annotation.AnnotationFormatError;
        specialinvoke $r10.<java.lang.annotation.AnnotationFormatError: void <init>(java.lang.String)>("Malformed method on an annotation type");
        throw $r10;
    }

    private int hashCodeImpl()
    {
        sun.reflect.annotation.AnnotationInvocationHandler r0;
        int i0, $i1, $i2, $i3, $i4;
        java.util.Iterator r1;
        java.util.Map$Entry r2;
        java.util.Map $r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r8;
        java.lang.String $r7;

        r0 := @this: sun.reflect.annotation.AnnotationInvocationHandler;
        i0 = 0;
        $r3 = r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.util.Map memberValues>;
        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();
        r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        r2 = (java.util.Map$Entry) $r5;
        $r6 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r7 = (java.lang.String) $r6;
        $i1 = virtualinvoke $r7.<java.lang.String: int hashCode()>();
        $i2 = 127 * $i1;
        $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();
        $i3 = staticinvoke <sun.reflect.annotation.AnnotationInvocationHandler: int memberValueHashCode(java.lang.Object)>($r8);
        $i4 = $i2 ^ $i3;
        i0 = i0 + $i4;
        goto label0;

     label1:
        return i0;
    }

    private static int memberValueHashCode(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        byte[] $r2, $r3;
        char[] $r4, $r5;
        double[] $r6, $r7;
        float[] $r8, $r9;
        int[] $r10, $r11;
        long[] $r12, $r13;
        short[] $r14, $r15;
        boolean[] $r16, $r17;
        java.lang.Object[] $r18, $r19;

        r0 := @parameter0: java.lang.Object;
        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();
        if $z0 != 0 goto label0;

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();
        return $i0;

     label0:
        if r1 != class "[B" goto label1;

        $r2 = (byte[]) r0;
        $r3 = (byte[]) $r2;
        $i1 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r3);
        return $i1;

     label1:
        if r1 != class "[C" goto label2;

        $r4 = (char[]) r0;
        $r5 = (char[]) $r4;
        $i2 = staticinvoke <java.util.Arrays: int hashCode(char[])>($r5);
        return $i2;

     label2:
        if r1 != class "[D" goto label3;

        $r6 = (double[]) r0;
        $r7 = (double[]) $r6;
        $i3 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r7);
        return $i3;

     label3:
        if r1 != class "[F" goto label4;

        $r8 = (float[]) r0;
        $r9 = (float[]) $r8;
        $i4 = staticinvoke <java.util.Arrays: int hashCode(float[])>($r9);
        return $i4;

     label4:
        if r1 != class "[I" goto label5;

        $r10 = (int[]) r0;
        $r11 = (int[]) $r10;
        $i5 = staticinvoke <java.util.Arrays: int hashCode(int[])>($r11);
        return $i5;

     label5:
        if r1 != class "[J" goto label6;

        $r12 = (long[]) r0;
        $r13 = (long[]) $r12;
        $i6 = staticinvoke <java.util.Arrays: int hashCode(long[])>($r13);
        return $i6;

     label6:
        if r1 != class "[S" goto label7;

        $r14 = (short[]) r0;
        $r15 = (short[]) $r14;
        $i7 = staticinvoke <java.util.Arrays: int hashCode(short[])>($r15);
        return $i7;

     label7:
        if r1 != class "[Z" goto label8;

        $r16 = (boolean[]) r0;
        $r17 = (boolean[]) $r16;
        $i8 = staticinvoke <java.util.Arrays: int hashCode(boolean[])>($r17);
        return $i8;

     label8:
        $r18 = (java.lang.Object[]) r0;
        $r19 = (java.lang.Object[]) $r18;
        $i9 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r19);
        return $i9;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        sun.reflect.annotation.AnnotationInvocationHandler r0;
        java.io.ObjectInputStream r1;
        null_type n0;
        java.lang.IllegalArgumentException r2, $r11;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.lang.String r5, $r25;
        java.lang.Class r6, $r9, $r20;
        java.lang.Object r7, $r16, $r17, $r18, $r27;
        java.lang.StringBuilder $r8, $r21, $r22, $r23, $r24;
        sun.reflect.annotation.AnnotationType r10;
        java.io.InvalidObjectException $r12;
        java.util.Map r13, $r14, $r26;
        java.util.Set $r15;
        boolean $z0, $z1, $z2;
        sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy $r19, $r29;
        java.lang.reflect.Method $r28;

        r0 := @this: sun.reflect.annotation.AnnotationInvocationHandler;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        n0 = null;

     label0:
        $r9 = r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.lang.Class type>;
        r10 = staticinvoke <sun.reflect.annotation.AnnotationType: sun.reflect.annotation.AnnotationType getInstance(java.lang.Class)>($r9);

     label1:
        goto label3;

     label2:
        $r11 := @caughtexception;
        r2 = $r11;
        $r12 = new java.io.InvalidObjectException;
        specialinvoke $r12.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Non-annotation type in annotation serial stream");
        throw $r12;

     label3:
        r13 = virtualinvoke r10.<sun.reflect.annotation.AnnotationType: java.util.Map memberTypes()>();
        $r14 = r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.util.Map memberValues>;
        $r15 = interfaceinvoke $r14.<java.util.Map: java.util.Set entrySet()>();
        r3 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label6;

        $r16 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.util.Map$Entry) $r16;
        $r17 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();
        r5 = (java.lang.String) $r17;
        $r18 = interfaceinvoke r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);
        r6 = (java.lang.Class) $r18;
        if r6 == null goto label5;

        r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();
        $z1 = virtualinvoke r6.<java.lang.Class: boolean isInstance(java.lang.Object)>(r7);
        if $z1 != 0 goto label5;

        $z2 = r7 instanceof sun.reflect.annotation.ExceptionProxy;
        if $z2 != 0 goto label5;

        $r19 = new sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r20 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();
        $r21 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r19.<sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy: void <init>(java.lang.String)>($r25);
        $r26 = virtualinvoke r10.<sun.reflect.annotation.AnnotationType: java.util.Map members()>();
        $r27 = interfaceinvoke $r26.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);
        $r28 = (java.lang.reflect.Method) $r27;
        $r29 = virtualinvoke $r19.<sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy: sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy setMember(java.lang.reflect.Method)>($r28);
        interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r29);

     label5:
        goto label4;

     label6:
        return;

        catch java.lang.IllegalArgumentException from label0 to label1 with label2;
    }

    static java.lang.Class access$000(sun.reflect.annotation.AnnotationInvocationHandler)
    {
        sun.reflect.annotation.AnnotationInvocationHandler r0;
        java.lang.Class $r1;

        r0 := @parameter0: sun.reflect.annotation.AnnotationInvocationHandler;
        $r1 = r0.<sun.reflect.annotation.AnnotationInvocationHandler: java.lang.Class type>;
        return $r1;
    }

    static void access$100(sun.reflect.annotation.AnnotationInvocationHandler, java.lang.reflect.Method[])
    {
        sun.reflect.annotation.AnnotationInvocationHandler r0;
        java.lang.reflect.Method[] r1;

        r0 := @parameter0: sun.reflect.annotation.AnnotationInvocationHandler;
        r1 := @parameter1: java.lang.reflect.Method[];
        specialinvoke r0.<sun.reflect.annotation.AnnotationInvocationHandler: void validateAnnotationMethods(java.lang.reflect.Method[])>(r1);
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/reflect/annotation/AnnotationInvocationHandler";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.reflect.annotation.AnnotationInvocationHandler: boolean $assertionsDisabled> = $z1;
        return;
    }
}
