public abstract class java.nio.channels.FileChannel extends java.nio.channels.spi.AbstractInterruptibleChannel implements java.nio.channels.SeekableByteChannel, java.nio.channels.GatheringByteChannel, java.nio.channels.ScatteringByteChannel
{
    private static final java.nio.file.attribute.FileAttribute[] NO_ATTRIBUTES;

    protected void <init>()
    {
        java.nio.channels.FileChannel r0;

        r0 := @this: java.nio.channels.FileChannel;
        specialinvoke r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void <init>()>();
        return;
    }

    public static transient java.nio.channels.FileChannel open(java.nio.file.Path, java.util.Set, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.util.Set r1;
        java.nio.file.attribute.FileAttribute[] r2;
        java.nio.file.spi.FileSystemProvider r3;
        java.nio.file.FileSystem $r4;
        java.nio.channels.FileChannel $r5;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.util.Set;
        r2 := @parameter2: java.nio.file.attribute.FileAttribute[];
        $r4 = interfaceinvoke r0.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>();
        r3 = virtualinvoke $r4.<java.nio.file.FileSystem: java.nio.file.spi.FileSystemProvider provider()>();
        $r5 = virtualinvoke r3.<java.nio.file.spi.FileSystemProvider: java.nio.channels.FileChannel newFileChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>(r0, r1, r2);
        return $r5;
    }

    public static transient java.nio.channels.FileChannel open(java.nio.file.Path, java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.OpenOption[] r1;
        java.util.HashSet $r2, r3;
        int $i0;
        java.nio.file.attribute.FileAttribute[] $r4;
        java.nio.channels.FileChannel $r5;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.OpenOption[];
        $r2 = new java.util.HashSet;
        $i0 = lengthof r1;
        specialinvoke $r2.<java.util.HashSet: void <init>(int)>($i0);
        r3 = $r2;
        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r3, r1);
        $r4 = <java.nio.channels.FileChannel: java.nio.file.attribute.FileAttribute[] NO_ATTRIBUTES>;
        $r5 = staticinvoke <java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>(r0, r3, $r4);
        return $r5;
    }

    public abstract int read(java.nio.ByteBuffer) throws java.io.IOException;

    public abstract long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException;

    public final long read(java.nio.ByteBuffer[]) throws java.io.IOException
    {
        java.nio.channels.FileChannel r0;
        java.nio.ByteBuffer[] r1;
        int $i0;
        long $l1;

        r0 := @this: java.nio.channels.FileChannel;
        r1 := @parameter0: java.nio.ByteBuffer[];
        $i0 = lengthof r1;
        $l1 = virtualinvoke r0.<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[],int,int)>(r1, 0, $i0);
        return $l1;
    }

    public abstract int write(java.nio.ByteBuffer) throws java.io.IOException;

    public abstract long write(java.nio.ByteBuffer[], int, int) throws java.io.IOException;

    public final long write(java.nio.ByteBuffer[]) throws java.io.IOException
    {
        java.nio.channels.FileChannel r0;
        java.nio.ByteBuffer[] r1;
        int $i0;
        long $l1;

        r0 := @this: java.nio.channels.FileChannel;
        r1 := @parameter0: java.nio.ByteBuffer[];
        $i0 = lengthof r1;
        $l1 = virtualinvoke r0.<java.nio.channels.FileChannel: long write(java.nio.ByteBuffer[],int,int)>(r1, 0, $i0);
        return $l1;
    }

    public abstract long position() throws java.io.IOException;

    public abstract java.nio.channels.FileChannel position(long) throws java.io.IOException;

    public abstract long size() throws java.io.IOException;

    public abstract java.nio.channels.FileChannel truncate(long) throws java.io.IOException;

    public abstract void force(boolean) throws java.io.IOException;

    public abstract long transferTo(long, long, java.nio.channels.WritableByteChannel) throws java.io.IOException;

    public abstract long transferFrom(java.nio.channels.ReadableByteChannel, long, long) throws java.io.IOException;

    public abstract int read(java.nio.ByteBuffer, long) throws java.io.IOException;

    public abstract int write(java.nio.ByteBuffer, long) throws java.io.IOException;

    public abstract java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode, long, long) throws java.io.IOException;

    public abstract java.nio.channels.FileLock lock(long, long, boolean) throws java.io.IOException;

    public final java.nio.channels.FileLock lock() throws java.io.IOException
    {
        java.nio.channels.FileChannel r0;
        java.nio.channels.FileLock $r1;

        r0 := @this: java.nio.channels.FileChannel;
        $r1 = virtualinvoke r0.<java.nio.channels.FileChannel: java.nio.channels.FileLock lock(long,long,boolean)>(0L, 9223372036854775807L, 0);
        return $r1;
    }

    public abstract java.nio.channels.FileLock tryLock(long, long, boolean) throws java.io.IOException;

    public final java.nio.channels.FileLock tryLock() throws java.io.IOException
    {
        java.nio.channels.FileChannel r0;
        java.nio.channels.FileLock $r1;

        r0 := @this: java.nio.channels.FileChannel;
        $r1 = virtualinvoke r0.<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock(long,long,boolean)>(0L, 9223372036854775807L, 0);
        return $r1;
    }

    public volatile java.nio.channels.SeekableByteChannel truncate(long) throws java.io.IOException
    {
        java.nio.channels.FileChannel r0, $r1;
        long l0;

        r0 := @this: java.nio.channels.FileChannel;
        l0 := @parameter0: long;
        $r1 = virtualinvoke r0.<java.nio.channels.FileChannel: java.nio.channels.FileChannel truncate(long)>(l0);
        return $r1;
    }

    public volatile java.nio.channels.SeekableByteChannel position(long) throws java.io.IOException
    {
        java.nio.channels.FileChannel r0, $r1;
        long l0;

        r0 := @this: java.nio.channels.FileChannel;
        l0 := @parameter0: long;
        $r1 = virtualinvoke r0.<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>(l0);
        return $r1;
    }

    static void <clinit>()
    {
        java.nio.file.attribute.FileAttribute[] $r0;

        $r0 = newarray (java.nio.file.attribute.FileAttribute)[0];
        <java.nio.channels.FileChannel: java.nio.file.attribute.FileAttribute[] NO_ATTRIBUTES> = $r0;
        return;
    }
}
