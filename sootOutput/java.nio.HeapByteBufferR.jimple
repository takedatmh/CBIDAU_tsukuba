class java.nio.HeapByteBufferR extends java.nio.HeapByteBuffer
{

    void <init>(int, int)
    {
        java.nio.HeapByteBufferR r0;
        int i0, i1;

        r0 := @this: java.nio.HeapByteBufferR;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        specialinvoke r0.<java.nio.HeapByteBuffer: void <init>(int,int)>(i0, i1);
        r0.<java.nio.HeapByteBufferR: boolean isReadOnly> = 1;
        return;
    }

    void <init>(byte[], int, int)
    {
        java.nio.HeapByteBufferR r0;
        byte[] r1;
        int i0, i1;

        r0 := @this: java.nio.HeapByteBufferR;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.nio.HeapByteBuffer: void <init>(byte[],int,int)>(r1, i0, i1);
        r0.<java.nio.HeapByteBufferR: boolean isReadOnly> = 1;
        return;
    }

    protected void <init>(byte[], int, int, int, int, int)
    {
        java.nio.HeapByteBufferR r0;
        byte[] r1;
        int i0, i1, i2, i3, i4;

        r0 := @this: java.nio.HeapByteBufferR;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        specialinvoke r0.<java.nio.HeapByteBuffer: void <init>(byte[],int,int,int,int,int)>(r1, i0, i1, i2, i3, i4);
        r0.<java.nio.HeapByteBufferR: boolean isReadOnly> = 1;
        return;
    }

    public java.nio.ByteBuffer slice()
    {
        java.nio.HeapByteBufferR r0, $r1;
        byte[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapByteBufferR;
        $r1 = new java.nio.HeapByteBufferR;
        $r2 = r0.<java.nio.HeapByteBufferR: byte[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapByteBufferR: int remaining()>();
        $i1 = virtualinvoke r0.<java.nio.HeapByteBufferR: int remaining()>();
        $i2 = virtualinvoke r0.<java.nio.HeapByteBufferR: int position()>();
        $i3 = r0.<java.nio.HeapByteBufferR: int offset>;
        $i4 = $i2 + $i3;
        specialinvoke $r1.<java.nio.HeapByteBufferR: void <init>(byte[],int,int,int,int,int)>($r2, -1, 0, $i0, $i1, $i4);
        return $r1;
    }

    public java.nio.ByteBuffer duplicate()
    {
        java.nio.HeapByteBufferR r0, $r1;
        byte[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapByteBufferR;
        $r1 = new java.nio.HeapByteBufferR;
        $r2 = r0.<java.nio.HeapByteBufferR: byte[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapByteBufferR: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.HeapByteBufferR: int position()>();
        $i2 = virtualinvoke r0.<java.nio.HeapByteBufferR: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.HeapByteBufferR: int capacity()>();
        $i4 = r0.<java.nio.HeapByteBufferR: int offset>;
        specialinvoke $r1.<java.nio.HeapByteBufferR: void <init>(byte[],int,int,int,int,int)>($r2, $i0, $i1, $i2, $i3, $i4);
        return $r1;
    }

    public java.nio.ByteBuffer asReadOnlyBuffer()
    {
        java.nio.HeapByteBufferR r0;
        java.nio.ByteBuffer $r1;

        r0 := @this: java.nio.HeapByteBufferR;
        $r1 = virtualinvoke r0.<java.nio.HeapByteBufferR: java.nio.ByteBuffer duplicate()>();
        return $r1;
    }

    public boolean isReadOnly()
    {
        java.nio.HeapByteBufferR r0;

        r0 := @this: java.nio.HeapByteBufferR;
        return 1;
    }

    public java.nio.ByteBuffer put(byte)
    {
        java.nio.HeapByteBufferR r0;
        byte b0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapByteBufferR;
        b0 := @parameter0: byte;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer put(int, byte)
    {
        java.nio.HeapByteBufferR r0;
        int i0;
        byte b1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapByteBufferR;
        i0 := @parameter0: int;
        b1 := @parameter1: byte;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer put(byte[], int, int)
    {
        java.nio.HeapByteBufferR r0;
        byte[] r1;
        int i0, i1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.HeapByteBufferR;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r2;
    }

    public java.nio.ByteBuffer put(java.nio.ByteBuffer)
    {
        java.nio.HeapByteBufferR r0;
        java.nio.ByteBuffer r1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.HeapByteBufferR;
        r1 := @parameter0: java.nio.ByteBuffer;
        $r2 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r2;
    }

    public java.nio.ByteBuffer compact()
    {
        java.nio.HeapByteBufferR r0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapByteBufferR;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    byte _get(int)
    {
        java.nio.HeapByteBufferR r0;
        int i0;
        byte[] $r1;
        byte $b1;

        r0 := @this: java.nio.HeapByteBufferR;
        i0 := @parameter0: int;
        $r1 = r0.<java.nio.HeapByteBufferR: byte[] hb>;
        $b1 = $r1[i0];
        return $b1;
    }

    void _put(int, byte)
    {
        java.nio.HeapByteBufferR r0;
        int i0;
        byte b1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapByteBufferR;
        i0 := @parameter0: int;
        b1 := @parameter1: byte;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putChar(char)
    {
        java.nio.HeapByteBufferR r0;
        char c0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapByteBufferR;
        c0 := @parameter0: char;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putChar(int, char)
    {
        java.nio.HeapByteBufferR r0;
        int i0;
        char c1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapByteBufferR;
        i0 := @parameter0: int;
        c1 := @parameter1: char;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.CharBuffer asCharBuffer()
    {
        java.nio.HeapByteBufferR r0;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        java.nio.CharBuffer $r1;
        java.nio.ByteBufferAsCharBufferRB r2;
        java.nio.ByteBufferAsCharBufferRL r3;

        r0 := @this: java.nio.HeapByteBufferR;
        $i2 = virtualinvoke r0.<java.nio.HeapByteBufferR: int remaining()>();
        i0 = $i2 >> 1;
        $i3 = r0.<java.nio.HeapByteBufferR: int offset>;
        $i4 = virtualinvoke r0.<java.nio.HeapByteBufferR: int position()>();
        i1 = $i3 + $i4;
        $z0 = r0.<java.nio.HeapByteBufferR: boolean bigEndian>;
        if $z0 == 0 goto label0;

        r2 = new java.nio.ByteBufferAsCharBufferRB;
        $r1 = r2;
        specialinvoke r2.<java.nio.ByteBufferAsCharBufferRB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);
        goto label1;

     label0:
        r3 = new java.nio.ByteBufferAsCharBufferRL;
        $r1 = r3;
        specialinvoke r3.<java.nio.ByteBufferAsCharBufferRL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);

     label1:
        return $r1;
    }

    public java.nio.ByteBuffer putShort(short)
    {
        java.nio.HeapByteBufferR r0;
        short s0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapByteBufferR;
        s0 := @parameter0: short;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putShort(int, short)
    {
        java.nio.HeapByteBufferR r0;
        int i0;
        short s1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapByteBufferR;
        i0 := @parameter0: int;
        s1 := @parameter1: short;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ShortBuffer asShortBuffer()
    {
        java.nio.HeapByteBufferR r0;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        java.nio.ShortBuffer $r1;
        java.nio.ByteBufferAsShortBufferRB r2;
        java.nio.ByteBufferAsShortBufferRL r3;

        r0 := @this: java.nio.HeapByteBufferR;
        $i2 = virtualinvoke r0.<java.nio.HeapByteBufferR: int remaining()>();
        i0 = $i2 >> 1;
        $i3 = r0.<java.nio.HeapByteBufferR: int offset>;
        $i4 = virtualinvoke r0.<java.nio.HeapByteBufferR: int position()>();
        i1 = $i3 + $i4;
        $z0 = r0.<java.nio.HeapByteBufferR: boolean bigEndian>;
        if $z0 == 0 goto label0;

        r2 = new java.nio.ByteBufferAsShortBufferRB;
        $r1 = r2;
        specialinvoke r2.<java.nio.ByteBufferAsShortBufferRB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);
        goto label1;

     label0:
        r3 = new java.nio.ByteBufferAsShortBufferRL;
        $r1 = r3;
        specialinvoke r3.<java.nio.ByteBufferAsShortBufferRL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);

     label1:
        return $r1;
    }

    public java.nio.ByteBuffer putInt(int)
    {
        java.nio.HeapByteBufferR r0;
        int i0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapByteBufferR;
        i0 := @parameter0: int;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putInt(int, int)
    {
        java.nio.HeapByteBufferR r0;
        int i0, i1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapByteBufferR;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.IntBuffer asIntBuffer()
    {
        java.nio.HeapByteBufferR r0;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        java.nio.IntBuffer $r1;
        java.nio.ByteBufferAsIntBufferRB r2;
        java.nio.ByteBufferAsIntBufferRL r3;

        r0 := @this: java.nio.HeapByteBufferR;
        $i2 = virtualinvoke r0.<java.nio.HeapByteBufferR: int remaining()>();
        i0 = $i2 >> 2;
        $i3 = r0.<java.nio.HeapByteBufferR: int offset>;
        $i4 = virtualinvoke r0.<java.nio.HeapByteBufferR: int position()>();
        i1 = $i3 + $i4;
        $z0 = r0.<java.nio.HeapByteBufferR: boolean bigEndian>;
        if $z0 == 0 goto label0;

        r2 = new java.nio.ByteBufferAsIntBufferRB;
        $r1 = r2;
        specialinvoke r2.<java.nio.ByteBufferAsIntBufferRB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);
        goto label1;

     label0:
        r3 = new java.nio.ByteBufferAsIntBufferRL;
        $r1 = r3;
        specialinvoke r3.<java.nio.ByteBufferAsIntBufferRL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);

     label1:
        return $r1;
    }

    public java.nio.ByteBuffer putLong(long)
    {
        java.nio.HeapByteBufferR r0;
        long l0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapByteBufferR;
        l0 := @parameter0: long;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putLong(int, long)
    {
        java.nio.HeapByteBufferR r0;
        int i0;
        long l1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapByteBufferR;
        i0 := @parameter0: int;
        l1 := @parameter1: long;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.LongBuffer asLongBuffer()
    {
        java.nio.HeapByteBufferR r0;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        java.nio.LongBuffer $r1;
        java.nio.ByteBufferAsLongBufferRB r2;
        java.nio.ByteBufferAsLongBufferRL r3;

        r0 := @this: java.nio.HeapByteBufferR;
        $i2 = virtualinvoke r0.<java.nio.HeapByteBufferR: int remaining()>();
        i0 = $i2 >> 3;
        $i3 = r0.<java.nio.HeapByteBufferR: int offset>;
        $i4 = virtualinvoke r0.<java.nio.HeapByteBufferR: int position()>();
        i1 = $i3 + $i4;
        $z0 = r0.<java.nio.HeapByteBufferR: boolean bigEndian>;
        if $z0 == 0 goto label0;

        r2 = new java.nio.ByteBufferAsLongBufferRB;
        $r1 = r2;
        specialinvoke r2.<java.nio.ByteBufferAsLongBufferRB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);
        goto label1;

     label0:
        r3 = new java.nio.ByteBufferAsLongBufferRL;
        $r1 = r3;
        specialinvoke r3.<java.nio.ByteBufferAsLongBufferRL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);

     label1:
        return $r1;
    }

    public java.nio.ByteBuffer putFloat(float)
    {
        java.nio.HeapByteBufferR r0;
        float f0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapByteBufferR;
        f0 := @parameter0: float;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putFloat(int, float)
    {
        java.nio.HeapByteBufferR r0;
        int i0;
        float f0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapByteBufferR;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.FloatBuffer asFloatBuffer()
    {
        java.nio.HeapByteBufferR r0;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        java.nio.FloatBuffer $r1;
        java.nio.ByteBufferAsFloatBufferRB r2;
        java.nio.ByteBufferAsFloatBufferRL r3;

        r0 := @this: java.nio.HeapByteBufferR;
        $i2 = virtualinvoke r0.<java.nio.HeapByteBufferR: int remaining()>();
        i0 = $i2 >> 2;
        $i3 = r0.<java.nio.HeapByteBufferR: int offset>;
        $i4 = virtualinvoke r0.<java.nio.HeapByteBufferR: int position()>();
        i1 = $i3 + $i4;
        $z0 = r0.<java.nio.HeapByteBufferR: boolean bigEndian>;
        if $z0 == 0 goto label0;

        r2 = new java.nio.ByteBufferAsFloatBufferRB;
        $r1 = r2;
        specialinvoke r2.<java.nio.ByteBufferAsFloatBufferRB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);
        goto label1;

     label0:
        r3 = new java.nio.ByteBufferAsFloatBufferRL;
        $r1 = r3;
        specialinvoke r3.<java.nio.ByteBufferAsFloatBufferRL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);

     label1:
        return $r1;
    }

    public java.nio.ByteBuffer putDouble(double)
    {
        java.nio.HeapByteBufferR r0;
        double d0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapByteBufferR;
        d0 := @parameter0: double;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteBuffer putDouble(int, double)
    {
        java.nio.HeapByteBufferR r0;
        int i0;
        double d0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapByteBufferR;
        i0 := @parameter0: int;
        d0 := @parameter1: double;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.DoubleBuffer asDoubleBuffer()
    {
        java.nio.HeapByteBufferR r0;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        java.nio.DoubleBuffer $r1;
        java.nio.ByteBufferAsDoubleBufferRB r2;
        java.nio.ByteBufferAsDoubleBufferRL r3;

        r0 := @this: java.nio.HeapByteBufferR;
        $i2 = virtualinvoke r0.<java.nio.HeapByteBufferR: int remaining()>();
        i0 = $i2 >> 3;
        $i3 = r0.<java.nio.HeapByteBufferR: int offset>;
        $i4 = virtualinvoke r0.<java.nio.HeapByteBufferR: int position()>();
        i1 = $i3 + $i4;
        $z0 = r0.<java.nio.HeapByteBufferR: boolean bigEndian>;
        if $z0 == 0 goto label0;

        r2 = new java.nio.ByteBufferAsDoubleBufferRB;
        $r1 = r2;
        specialinvoke r2.<java.nio.ByteBufferAsDoubleBufferRB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);
        goto label1;

     label0:
        r3 = new java.nio.ByteBufferAsDoubleBufferRL;
        $r1 = r3;
        specialinvoke r3.<java.nio.ByteBufferAsDoubleBufferRL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);

     label1:
        return $r1;
    }
}
