class sun.nio.ch.UnixAsynchronousSocketChannelImpl extends sun.nio.ch.AsynchronousSocketChannelImpl implements sun.nio.ch.Port$PollableChannel
{
    private static final sun.nio.ch.NativeDispatcher nd;
    private static final boolean disableSynchronousRead;
    private final sun.nio.ch.Port port;
    private final int fdVal;
    private final java.lang.Object updateLock;
    private boolean connectPending;
    private java.nio.channels.CompletionHandler connectHandler;
    private java.lang.Object connectAttachment;
    private sun.nio.ch.PendingFuture connectFuture;
    private java.net.SocketAddress pendingRemote;
    private boolean readPending;
    private boolean isScatteringRead;
    private java.nio.ByteBuffer readBuffer;
    private java.nio.ByteBuffer[] readBuffers;
    private java.nio.channels.CompletionHandler readHandler;
    private java.lang.Object readAttachment;
    private sun.nio.ch.PendingFuture readFuture;
    private java.util.concurrent.Future readTimer;
    private boolean writePending;
    private boolean isGatheringWrite;
    private java.nio.ByteBuffer writeBuffer;
    private java.nio.ByteBuffer[] writeBuffers;
    private java.nio.channels.CompletionHandler writeHandler;
    private java.lang.Object writeAttachment;
    private sun.nio.ch.PendingFuture writeFuture;
    private java.util.concurrent.Future writeTimer;
    private java.lang.Runnable readTimeoutTask;
    private java.lang.Runnable writeTimeoutTask;
    static final boolean $assertionsDisabled;

    void <init>(sun.nio.ch.Port) throws java.io.IOException
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        sun.nio.ch.Port r1;
        java.io.IOException r2, $r7;
        java.lang.Object $r3;
        sun.nio.ch.UnixAsynchronousSocketChannelImpl$1 $r4;
        sun.nio.ch.UnixAsynchronousSocketChannelImpl$2 $r5;
        java.io.FileDescriptor $r6, $r9, $r10;
        sun.nio.ch.NativeDispatcher $r8;
        int $i0, $i1;

        r0 := @this: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        r1 := @parameter0: sun.nio.ch.Port;
        specialinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void <init>(sun.nio.ch.AsynchronousChannelGroupImpl)>(r1);
        $r3 = new java.lang.Object;
        specialinvoke $r3.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object updateLock> = $r3;
        $r4 = new sun.nio.ch.UnixAsynchronousSocketChannelImpl$1;
        specialinvoke $r4.<sun.nio.ch.UnixAsynchronousSocketChannelImpl$1: void <init>(sun.nio.ch.UnixAsynchronousSocketChannelImpl)>(r0);
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Runnable readTimeoutTask> = $r4;
        $r5 = new sun.nio.ch.UnixAsynchronousSocketChannelImpl$2;
        specialinvoke $r5.<sun.nio.ch.UnixAsynchronousSocketChannelImpl$2: void <init>(sun.nio.ch.UnixAsynchronousSocketChannelImpl)>(r0);
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Runnable writeTimeoutTask> = $r5;

     label0:
        $r6 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        staticinvoke <sun.nio.ch.IOUtil: void configureBlocking(java.io.FileDescriptor,boolean)>($r6, 0);

     label1:
        goto label3;

     label2:
        $r7 := @caughtexception;
        r2 = $r7;
        $r8 = <sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        $r9 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        virtualinvoke $r8.<sun.nio.ch.NativeDispatcher: void close(java.io.FileDescriptor)>($r9);
        throw r2;

     label3:
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.Port port> = r1;
        $r10 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        $i0 = staticinvoke <sun.nio.ch.IOUtil: int fdVal(java.io.FileDescriptor)>($r10);
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: int fdVal> = $i0;
        $i1 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: int fdVal>;
        virtualinvoke r1.<sun.nio.ch.Port: void register(int,sun.nio.ch.Port$PollableChannel)>($i1, r0);
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    void <init>(sun.nio.ch.Port, java.io.FileDescriptor, java.net.InetSocketAddress) throws java.io.IOException
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        sun.nio.ch.Port r1;
        java.io.FileDescriptor r2;
        java.net.InetSocketAddress r3;
        java.nio.channels.ShutdownChannelGroupException r4, $r8;
        java.lang.Object $r5;
        sun.nio.ch.UnixAsynchronousSocketChannelImpl$1 $r6;
        sun.nio.ch.UnixAsynchronousSocketChannelImpl$2 $r7;
        int $i0, $i1;
        java.io.IOException $r9;

        r0 := @this: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        r1 := @parameter0: sun.nio.ch.Port;
        r2 := @parameter1: java.io.FileDescriptor;
        r3 := @parameter2: java.net.InetSocketAddress;
        specialinvoke r0.<sun.nio.ch.AsynchronousSocketChannelImpl: void <init>(sun.nio.ch.AsynchronousChannelGroupImpl,java.io.FileDescriptor,java.net.InetSocketAddress)>(r1, r2, r3);
        $r5 = new java.lang.Object;
        specialinvoke $r5.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object updateLock> = $r5;
        $r6 = new sun.nio.ch.UnixAsynchronousSocketChannelImpl$1;
        specialinvoke $r6.<sun.nio.ch.UnixAsynchronousSocketChannelImpl$1: void <init>(sun.nio.ch.UnixAsynchronousSocketChannelImpl)>(r0);
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Runnable readTimeoutTask> = $r6;
        $r7 = new sun.nio.ch.UnixAsynchronousSocketChannelImpl$2;
        specialinvoke $r7.<sun.nio.ch.UnixAsynchronousSocketChannelImpl$2: void <init>(sun.nio.ch.UnixAsynchronousSocketChannelImpl)>(r0);
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Runnable writeTimeoutTask> = $r7;
        $i0 = staticinvoke <sun.nio.ch.IOUtil: int fdVal(java.io.FileDescriptor)>(r2);
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: int fdVal> = $i0;
        staticinvoke <sun.nio.ch.IOUtil: void configureBlocking(java.io.FileDescriptor,boolean)>(r2, 0);

     label0:
        $i1 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: int fdVal>;
        virtualinvoke r1.<sun.nio.ch.Port: void register(int,sun.nio.ch.Port$PollableChannel)>($i1, r0);

     label1:
        goto label3;

     label2:
        $r8 := @caughtexception;
        r4 = $r8;
        $r9 = new java.io.IOException;
        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.Throwable)>(r4);
        throw $r9;

     label3:
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.Port port> = r1;
        return;

        catch java.nio.channels.ShutdownChannelGroupException from label0 to label1 with label2;
    }

    public sun.nio.ch.AsynchronousChannelGroupImpl group()
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        sun.nio.ch.Port $r1;

        r0 := @this: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        $r1 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.Port port>;
        return $r1;
    }

    private void updateEvents()
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        byte b0;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;
        sun.nio.ch.Port $r3;
        int $i1;

        r0 := @this: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        $z0 = <sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r1 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object updateLock>;
        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);
        if $z1 != 0 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        b0 = 0;
        $z2 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean readPending>;
        if $z2 == 0 goto label1;

        b0 = b0 | 1;

     label1:
        $z3 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean connectPending>;
        if $z3 != 0 goto label2;

        $z4 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean writePending>;
        if $z4 == 0 goto label3;

     label2:
        b0 = b0 | 4;

     label3:
        if b0 == 0 goto label4;

        $r3 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.Port port>;
        $i1 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: int fdVal>;
        virtualinvoke $r3.<sun.nio.ch.Port: void startPoll(int,int)>($i1, b0);

     label4:
        return;
    }

    private void lockAndUpdateEvents()
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        $r3 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object updateLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void updateEvents()>();
        exitmonitor r1;

     label1:
        goto label5;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;
        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    private void finish(boolean, boolean, boolean)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        boolean z0, z1, z2, z3, z4, z5, $z6, $z7, $z8;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        z0 := @parameter0: boolean;
        z1 := @parameter1: boolean;
        z2 := @parameter2: boolean;
        z3 = 0;
        z4 = 0;
        z5 = 0;
        $r3 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object updateLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        if z1 == 0 goto label1;

        $z6 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean readPending>;
        if $z6 == 0 goto label1;

        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean readPending> = 0;
        z3 = 1;

     label1:
        if z2 == 0 goto label3;

        $z7 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean writePending>;
        if $z7 == 0 goto label2;

        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean writePending> = 0;
        z4 = 1;
        goto label3;

     label2:
        $z8 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean connectPending>;
        if $z8 == 0 goto label3;

        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean connectPending> = 0;
        z5 = 1;

     label3:
        exitmonitor r1;

     label4:
        goto label8;

     label5:
        $r4 := @caughtexception;

     label6:
        r2 = $r4;
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        if z3 == 0 goto label10;

        if z4 == 0 goto label9;

        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void finishWrite(boolean)>(0);

     label9:
        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void finishRead(boolean)>(z0);
        return;

     label10:
        if z4 == 0 goto label11;

        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void finishWrite(boolean)>(z0);

     label11:
        if z5 == 0 goto label12;

        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void finishConnect(boolean)>(z0);

     label12:
        return;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void onEvent(int, boolean)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        int i0, $i1, $i2, $i3;
        boolean z0, z1, z2, $z3, $z4;

        r0 := @this: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        i0 := @parameter0: int;
        z0 := @parameter1: boolean;
        $i1 = i0 & 1;
        if $i1 <= 0 goto label0;

        $z3 = 1;
        goto label1;

     label0:
        $z3 = 0;

     label1:
        z1 = $z3;
        $i2 = i0 & 4;
        if $i2 <= 0 goto label2;

        $z4 = 1;
        goto label3;

     label2:
        $z4 = 0;

     label3:
        z2 = $z4;
        $i3 = i0 & 24;
        if $i3 <= 0 goto label4;

        z1 = 1;
        z2 = 1;

     label4:
        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void finish(boolean,boolean,boolean)>(z0, z1, z2);
        return;
    }

    void implClose() throws java.io.IOException
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        sun.nio.ch.Port $r1;
        int $i0;
        sun.nio.ch.NativeDispatcher $r2;
        java.io.FileDescriptor $r3;

        r0 := @this: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        $r1 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.Port port>;
        $i0 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: int fdVal>;
        virtualinvoke $r1.<sun.nio.ch.Port: void unregister(int)>($i0);
        $r2 = <sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        $r3 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        virtualinvoke $r2.<sun.nio.ch.NativeDispatcher: void close(java.io.FileDescriptor)>($r3);
        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void finish(boolean,boolean,boolean)>(0, 1, 1);
        return;
    }

    public void onCancel(sun.nio.ch.PendingFuture)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        sun.nio.ch.PendingFuture r1;
        sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType $r2, $r5, $r7;
        java.lang.Object $r3, $r4, $r6;

        r0 := @this: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        r1 := @parameter0: sun.nio.ch.PendingFuture;
        $r3 = virtualinvoke r1.<sun.nio.ch.PendingFuture: java.lang.Object getContext()>();
        $r2 = <sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType: sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType CONNECT>;
        if $r3 != $r2 goto label0;

        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void killConnect()>();

     label0:
        $r4 = virtualinvoke r1.<sun.nio.ch.PendingFuture: java.lang.Object getContext()>();
        $r5 = <sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType: sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType READ>;
        if $r4 != $r5 goto label1;

        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void killReading()>();

     label1:
        $r6 = virtualinvoke r1.<sun.nio.ch.PendingFuture: java.lang.Object getContext()>();
        $r7 = <sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType: sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType WRITE>;
        if $r6 != $r7 goto label2;

        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void killWriting()>();

     label2:
        return;
    }

    private void setConnected() throws java.io.IOException
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        java.io.FileDescriptor $r4;
        java.net.InetSocketAddress $r5, $r7;
        java.net.SocketAddress $r6;

        r0 := @this: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        $r3 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object stateLock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: int state> = 2;
        $r4 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        $r5 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress localAddress(java.io.FileDescriptor)>($r4);
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.net.InetSocketAddress localAddress> = $r5;
        $r6 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.net.SocketAddress pendingRemote>;
        $r7 = (java.net.InetSocketAddress) $r6;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.net.InetSocketAddress remoteAddress> = $r7;
        exitmonitor r1;

     label1:
        goto label5;

     label2:
        $r8 := @caughtexception;

     label3:
        r2 = $r8;
        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    private void finishConnect(boolean)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        boolean z0, $z1;
        java.lang.Throwable r1, r2, r3, $r5, $r7, $r8, r9;
        sun.nio.ch.PendingFuture r4;
        int $i0;
        java.nio.channels.AsynchronousCloseException $r6;
        java.nio.channels.CompletionHandler r10;
        java.lang.Object r11;

        r0 := @this: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        z0 := @parameter0: boolean;
        r1 = null;

     label0:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void begin()>();
        $i0 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: int fdVal>;
        staticinvoke <sun.nio.ch.UnixAsynchronousSocketChannelImpl: void checkConnect(int)>($i0);
        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void setConnected()>();

     label1:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        goto label9;

     label2:
        $r5 := @caughtexception;

     label3:
        r2 = $r5;
        $z1 = r2 instanceof java.nio.channels.ClosedChannelException;
        if $z1 == 0 goto label4;

        $r6 = new java.nio.channels.AsynchronousCloseException;
        specialinvoke $r6.<java.nio.channels.AsynchronousCloseException: void <init>()>();
        r2 = $r6;

     label4:
        r1 = r2;

     label5:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        goto label9;

     label6:
        $r7 := @caughtexception;

     label7:
        r3 = $r7;

     label8:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        throw r3;

     label9:
        if r1 == null goto label13;

     label10:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void close()>();

     label11:
        goto label13;

     label12:
        $r8 := @caughtexception;
        r9 = $r8;
        virtualinvoke r1.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r9);

     label13:
        r10 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.channels.CompletionHandler connectHandler>;
        r11 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object connectAttachment>;
        r4 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.PendingFuture connectFuture>;
        if r10 != null goto label14;

        virtualinvoke r4.<sun.nio.ch.PendingFuture: void setResult(java.lang.Object,java.lang.Throwable)>(null, r1);
        goto label16;

     label14:
        if z0 == 0 goto label15;

        staticinvoke <sun.nio.ch.Invoker: void invokeUnchecked(java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r10, r11, null, r1);
        goto label16;

     label15:
        staticinvoke <sun.nio.ch.Invoker: void invokeIndirectly(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r0, r10, r11, null, r1);

     label16:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label0 to label1 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    java.util.concurrent.Future implConnect(java.net.SocketAddress, java.lang.Object, java.nio.channels.CompletionHandler)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        java.net.SocketAddress r1;
        java.lang.Object r2, r6, r9, $r17, $r27;
        java.nio.channels.CompletionHandler r3;
        java.nio.channels.ClosedChannelException r4, $r12;
        java.lang.SecurityManager r5;
        boolean z0, $z1, $z2, $z3;
        java.lang.Throwable r7, r10, r11, $r21, r22, $r30, $r32, r33, $r35, $r36, r37;
        sun.nio.ch.PendingFuture r8, $r28, r31;
        sun.nio.ch.CompletedFuture $r13, $r38;
        java.net.InetSocketAddress r14, $r20;
        java.net.InetAddress $r15, $r24, $r26;
        java.lang.String $r16;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.nio.channels.AlreadyConnectedException $r18;
        java.nio.channels.ConnectionPendingException $r19;
        java.io.FileDescriptor $r23, $r25;
        sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType $r29;
        java.nio.channels.AsynchronousCloseException $r34;

        r0 := @this: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        r1 := @parameter0: java.net.SocketAddress;
        r2 := @parameter1: java.lang.Object;
        r3 := @parameter2: java.nio.channels.CompletionHandler;
        $z1 = virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label1;

        $r12 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r12.<java.nio.channels.ClosedChannelException: void <init>()>();
        r4 = $r12;
        if r3 != null goto label0;

        $r13 = staticinvoke <sun.nio.ch.CompletedFuture: sun.nio.ch.CompletedFuture withFailure(java.lang.Throwable)>(r4);
        return $r13;

     label0:
        staticinvoke <sun.nio.ch.Invoker: void invoke(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r0, r3, r2, null, r4);
        return null;

     label1:
        r14 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress checkAddress(java.net.SocketAddress)>(r1);
        r5 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r5 == null goto label2;

        $r15 = virtualinvoke r14.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>();
        $i0 = virtualinvoke r14.<java.net.InetSocketAddress: int getPort()>();
        virtualinvoke r5.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>($r16, $i0);

     label2:
        $r17 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object stateLock>;
        r6 = $r17;
        entermonitor $r17;

     label3:
        $i1 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: int state>;
        if $i1 != 2 goto label4;

        $r18 = new java.nio.channels.AlreadyConnectedException;
        specialinvoke $r18.<java.nio.channels.AlreadyConnectedException: void <init>()>();
        throw $r18;

     label4:
        $i2 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: int state>;
        if $i2 != 1 goto label5;

        $r19 = new java.nio.channels.ConnectionPendingException;
        specialinvoke $r19.<java.nio.channels.ConnectionPendingException: void <init>()>();
        throw $r19;

     label5:
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: int state> = 1;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.net.SocketAddress pendingRemote> = r1;
        $r20 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.net.InetSocketAddress localAddress>;
        if $r20 != null goto label6;

        $z2 = 1;
        goto label7;

     label6:
        $z2 = 0;

     label7:
        z0 = $z2;
        exitmonitor r6;

     label8:
        goto label12;

     label9:
        $r21 := @caughtexception;

     label10:
        r7 = $r21;
        exitmonitor r6;

     label11:
        throw r7;

     label12:
        r22 = null;

     label13:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void begin()>();
        if z0 == 0 goto label14;

        $r23 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        $r24 = virtualinvoke r14.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $i3 = virtualinvoke r14.<java.net.InetSocketAddress: int getPort()>();
        staticinvoke <sun.net.NetHooks: void beforeTcpConnect(java.io.FileDescriptor,java.net.InetAddress,int)>($r23, $r24, $i3);

     label14:
        $r25 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        $r26 = virtualinvoke r14.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $i4 = virtualinvoke r14.<java.net.InetSocketAddress: int getPort()>();
        i5 = staticinvoke <sun.nio.ch.Net: int connect(java.io.FileDescriptor,java.net.InetAddress,int)>($r25, $r26, $i4);
        if i5 != -2 goto label24;

        r8 = null;
        $r27 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object updateLock>;
        r9 = $r27;
        entermonitor $r27;

     label15:
        if r3 != null goto label16;

        $r28 = new sun.nio.ch.PendingFuture;
        $r29 = <sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType: sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType CONNECT>;
        specialinvoke $r28.<sun.nio.ch.PendingFuture: void <init>(java.nio.channels.AsynchronousChannel,java.lang.Object)>(r0, $r29);
        r8 = $r28;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.PendingFuture connectFuture> = r8;
        goto label17;

     label16:
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.channels.CompletionHandler connectHandler> = r3;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object connectAttachment> = r2;

     label17:
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean connectPending> = 1;
        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void updateEvents()>();
        exitmonitor r9;

     label18:
        goto label22;

     label19:
        $r30 := @caughtexception;

     label20:
        r10 = $r30;
        exitmonitor r9;

     label21:
        throw r10;

     label22:
        r31 = r8;

     label23:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        return r31;

     label24:
        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void setConnected()>();

     label25:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        goto label33;

     label26:
        $r32 := @caughtexception;

     label27:
        r33 = $r32;
        $z3 = r33 instanceof java.nio.channels.ClosedChannelException;
        if $z3 == 0 goto label28;

        $r34 = new java.nio.channels.AsynchronousCloseException;
        specialinvoke $r34.<java.nio.channels.AsynchronousCloseException: void <init>()>();
        r33 = $r34;

     label28:
        r22 = r33;

     label29:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        goto label33;

     label30:
        $r35 := @caughtexception;

     label31:
        r11 = $r35;

     label32:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        throw r11;

     label33:
        if r22 == null goto label37;

     label34:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void close()>();

     label35:
        goto label37;

     label36:
        $r36 := @caughtexception;
        r37 = $r36;
        virtualinvoke r22.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r37);

     label37:
        if r3 != null goto label38;

        $r38 = staticinvoke <sun.nio.ch.CompletedFuture: sun.nio.ch.CompletedFuture withResult(java.lang.Object,java.lang.Throwable)>(null, r22);
        return $r38;

     label38:
        staticinvoke <sun.nio.ch.Invoker: void invoke(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r0, r3, r2, null, r22);
        return null;

        catch java.lang.Throwable from label3 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
        catch java.lang.Throwable from label15 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label13 to label23 with label26;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label13 to label23 with label30;
        catch java.lang.Throwable from label24 to label25 with label30;
        catch java.lang.Throwable from label27 to label29 with label30;
        catch java.lang.Throwable from label31 to label32 with label30;
        catch java.lang.Throwable from label34 to label35 with label36;
    }

    private void finishRead(boolean)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        int i0;
        java.lang.Throwable r1, r9, r10, $r16, $r17, r18, $r20;
        java.nio.channels.CompletionHandler r2;
        java.lang.Object r3, r8, $r15;
        sun.nio.ch.PendingFuture r4;
        java.util.concurrent.Future r5;
        sun.nio.ch.NativeDispatcher $r6, $r7;
        java.io.FileDescriptor $r11, $r13;
        java.nio.ByteBuffer[] $r12;
        long $l1, $l2;
        java.nio.ByteBuffer $r14;
        java.nio.channels.AsynchronousCloseException $r19;
        java.lang.Comparable $r21, r22;

        r0 := @this: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        z0 := @parameter0: boolean;
        i0 = -1;
        r1 = null;
        z1 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean isScatteringRead>;
        r2 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.channels.CompletionHandler readHandler>;
        r3 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object readAttachment>;
        r4 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.PendingFuture readFuture>;
        r5 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.util.concurrent.Future readTimer>;

     label0:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void begin()>();
        if z1 == 0 goto label1;

        $r11 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        $r12 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.ByteBuffer[] readBuffers>;
        $r6 = <sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        $l1 = staticinvoke <sun.nio.ch.IOUtil: long read(java.io.FileDescriptor,java.nio.ByteBuffer[],sun.nio.ch.NativeDispatcher)>($r11, $r12, $r6);
        i0 = (int) $l1;
        goto label2;

     label1:
        $r13 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        $r14 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.ByteBuffer readBuffer>;
        $r7 = <sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        i0 = staticinvoke <sun.nio.ch.IOUtil: int read(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>($r13, $r14, -1L, $r7);

     label2:
        if i0 != -2 goto label10;

        $r15 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object updateLock>;
        r8 = $r15;
        entermonitor $r15;

     label3:
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean readPending> = 1;
        exitmonitor r8;

     label4:
        goto label8;

     label5:
        $r16 := @caughtexception;

     label6:
        r9 = $r16;
        exitmonitor r8;

     label7:
        throw r9;

     label8:
        $z2 = r1 instanceof java.nio.channels.AsynchronousCloseException;
        if $z2 != 0 goto label9;

        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void lockAndUpdateEvents()>();

     label9:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        return;

     label10:
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.ByteBuffer readBuffer> = null;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.ByteBuffer[] readBuffers> = null;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object readAttachment> = null;
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void enableReading()>();

     label11:
        $z3 = r1 instanceof java.nio.channels.AsynchronousCloseException;
        if $z3 != 0 goto label12;

        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void lockAndUpdateEvents()>();

     label12:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        goto label22;

     label13:
        $r17 := @caughtexception;

     label14:
        r18 = $r17;
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void enableReading()>();
        $z4 = r18 instanceof java.nio.channels.ClosedChannelException;
        if $z4 == 0 goto label15;

        $r19 = new java.nio.channels.AsynchronousCloseException;
        specialinvoke $r19.<java.nio.channels.AsynchronousCloseException: void <init>()>();
        r18 = $r19;

     label15:
        r1 = r18;

     label16:
        $z5 = r1 instanceof java.nio.channels.AsynchronousCloseException;
        if $z5 != 0 goto label17;

        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void lockAndUpdateEvents()>();

     label17:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        goto label22;

     label18:
        $r20 := @caughtexception;

     label19:
        r10 = $r20;

     label20:
        $z6 = r1 instanceof java.nio.channels.AsynchronousCloseException;
        if $z6 != 0 goto label21;

        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void lockAndUpdateEvents()>();

     label21:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        throw r10;

     label22:
        if r5 == null goto label23;

        interfaceinvoke r5.<java.util.concurrent.Future: boolean cancel(boolean)>(0);

     label23:
        if r1 == null goto label24;

        $r21 = null;
        goto label26;

     label24:
        if z1 == 0 goto label25;

        $l2 = (long) i0;
        $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);
        goto label26;

     label25:
        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

     label26:
        r22 = $r21;
        if r2 != null goto label27;

        virtualinvoke r4.<sun.nio.ch.PendingFuture: void setResult(java.lang.Object,java.lang.Throwable)>(r22, r1);
        goto label29;

     label27:
        if z0 == 0 goto label28;

        staticinvoke <sun.nio.ch.Invoker: void invokeUnchecked(java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r2, r3, r22, r1);
        goto label29;

     label28:
        staticinvoke <sun.nio.ch.Invoker: void invokeIndirectly(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r0, r2, r3, r22, r1);

     label29:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label0 to label8 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label0 to label8 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label14 to label16 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    java.util.concurrent.Future implRead(boolean, java.nio.ByteBuffer, java.nio.ByteBuffer[], long, java.util.concurrent.TimeUnit, java.lang.Object, java.nio.channels.CompletionHandler)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7;
        java.nio.ByteBuffer r1;
        java.nio.ByteBuffer[] r2;
        long l0, $l2, $l4;
        java.util.concurrent.TimeUnit r3;
        java.lang.Object r4, r11, $r19;
        java.nio.channels.CompletionHandler r5;
        sun.nio.ch.Invoker$GroupAndInvokeCount r6;
        int i1;
        java.lang.Throwable r7, r13, r14, $r24, $r26, r27, $r29;
        sun.nio.ch.NativeDispatcher $r8, $r9;
        sun.nio.ch.PendingFuture r10, $r20, r25;
        sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType $r12;
        sun.nio.ch.Port $r15, $r16, $r21;
        java.io.FileDescriptor $r17, $r18;
        byte $b3;
        java.lang.Runnable $r22;
        java.util.concurrent.Future $r23;
        java.nio.channels.AsynchronousCloseException $r28;
        java.lang.Comparable $r30, r31;
        sun.nio.ch.CompletedFuture $r32;

        r0 := @this: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        z0 := @parameter0: boolean;
        r1 := @parameter1: java.nio.ByteBuffer;
        r2 := @parameter2: java.nio.ByteBuffer[];
        l0 := @parameter3: long;
        r3 := @parameter4: java.util.concurrent.TimeUnit;
        r4 := @parameter5: java.lang.Object;
        r5 := @parameter6: java.nio.channels.CompletionHandler;
        r6 = null;
        z1 = 0;
        z2 = 0;
        $z4 = <sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean disableSynchronousRead>;
        if $z4 != 0 goto label4;

        if r5 != null goto label0;

        z2 = 1;
        goto label4;

     label0:
        r6 = staticinvoke <sun.nio.ch.Invoker: sun.nio.ch.Invoker$GroupAndInvokeCount getGroupAndInvokeCount()>();
        $r15 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.Port port>;
        z1 = staticinvoke <sun.nio.ch.Invoker: boolean mayInvokeDirect(sun.nio.ch.Invoker$GroupAndInvokeCount,sun.nio.ch.AsynchronousChannelGroupImpl)>(r6, $r15);
        if z1 != 0 goto label1;

        $r16 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.Port port>;
        $z5 = virtualinvoke $r16.<sun.nio.ch.Port: boolean isFixedThreadPool()>();
        if $z5 != 0 goto label2;

     label1:
        $z6 = 1;
        goto label3;

     label2:
        $z6 = 0;

     label3:
        z2 = $z6;

     label4:
        i1 = -2;
        r7 = null;
        z3 = 0;

     label5:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void begin()>();
        if z2 == 0 goto label7;

        if z0 == 0 goto label6;

        $r17 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        $r8 = <sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        $l2 = staticinvoke <sun.nio.ch.IOUtil: long read(java.io.FileDescriptor,java.nio.ByteBuffer[],sun.nio.ch.NativeDispatcher)>($r17, r2, $r8);
        i1 = (int) $l2;
        goto label7;

     label6:
        $r18 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        $r9 = <sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        i1 = staticinvoke <sun.nio.ch.IOUtil: int read(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>($r18, r1, -1L, $r9);

     label7:
        if i1 != -2 goto label19;

        r10 = null;
        $r19 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object updateLock>;
        r11 = $r19;
        entermonitor $r19;

     label8:
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean isScatteringRead> = z0;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.ByteBuffer readBuffer> = r1;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.ByteBuffer[] readBuffers> = r2;
        if r5 != null goto label9;

        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.channels.CompletionHandler readHandler> = null;
        $r20 = new sun.nio.ch.PendingFuture;
        $r12 = <sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType: sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType READ>;
        specialinvoke $r20.<sun.nio.ch.PendingFuture: void <init>(java.nio.channels.AsynchronousChannel,java.lang.Object)>(r0, $r12);
        r10 = $r20;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.PendingFuture readFuture> = r10;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object readAttachment> = null;
        goto label10;

     label9:
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.channels.CompletionHandler readHandler> = r5;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object readAttachment> = r4;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.PendingFuture readFuture> = null;

     label10:
        $b3 = l0 cmp 0L;
        if $b3 <= 0 goto label11;

        $r21 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.Port port>;
        $r22 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Runnable readTimeoutTask>;
        $r23 = virtualinvoke $r21.<sun.nio.ch.Port: java.util.concurrent.Future schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r22, l0, r3);
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.util.concurrent.Future readTimer> = $r23;

     label11:
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean readPending> = 1;
        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void updateEvents()>();
        exitmonitor r11;

     label12:
        goto label16;

     label13:
        $r24 := @caughtexception;

     label14:
        r13 = $r24;
        exitmonitor r11;

     label15:
        throw r13;

     label16:
        z3 = 1;
        r25 = r10;

     label17:
        if z3 != 0 goto label18;

        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void enableReading()>();

     label18:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        return r25;

     label19:
        if z3 != 0 goto label20;

        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void enableReading()>();

     label20:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        goto label30;

     label21:
        $r26 := @caughtexception;

     label22:
        r27 = $r26;
        $z7 = r27 instanceof java.nio.channels.ClosedChannelException;
        if $z7 == 0 goto label23;

        $r28 = new java.nio.channels.AsynchronousCloseException;
        specialinvoke $r28.<java.nio.channels.AsynchronousCloseException: void <init>()>();
        r27 = $r28;

     label23:
        r7 = r27;

     label24:
        if z3 != 0 goto label25;

        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void enableReading()>();

     label25:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        goto label30;

     label26:
        $r29 := @caughtexception;

     label27:
        r14 = $r29;

     label28:
        if z3 != 0 goto label29;

        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void enableReading()>();

     label29:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        throw r14;

     label30:
        if r7 == null goto label31;

        $r30 = null;
        goto label33;

     label31:
        if z0 == 0 goto label32;

        $l4 = (long) i1;
        $r30 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);
        goto label33;

     label32:
        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

     label33:
        r31 = $r30;
        if r5 == null goto label36;

        if z1 == 0 goto label34;

        staticinvoke <sun.nio.ch.Invoker: void invokeDirect(sun.nio.ch.Invoker$GroupAndInvokeCount,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r6, r5, r4, r31, r7);
        goto label35;

     label34:
        staticinvoke <sun.nio.ch.Invoker: void invokeIndirectly(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r0, r5, r4, r31, r7);

     label35:
        return null;

     label36:
        $r32 = staticinvoke <sun.nio.ch.CompletedFuture: sun.nio.ch.CompletedFuture withResult(java.lang.Object,java.lang.Throwable)>(r31, r7);
        return $r32;

        catch java.lang.Throwable from label8 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label5 to label17 with label21;
        catch java.lang.Throwable from label5 to label17 with label26;
        catch java.lang.Throwable from label22 to label24 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
    }

    private void finishWrite(boolean)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        int i0;
        java.lang.Throwable r1, r9, r10, $r16, $r17, r18, $r20;
        java.nio.channels.CompletionHandler r2;
        java.lang.Object r3, r8, $r15;
        sun.nio.ch.PendingFuture r4;
        java.util.concurrent.Future r5;
        sun.nio.ch.NativeDispatcher $r6, $r7;
        java.io.FileDescriptor $r11, $r13;
        java.nio.ByteBuffer[] $r12;
        long $l1, $l2;
        java.nio.ByteBuffer $r14;
        java.nio.channels.AsynchronousCloseException $r19;
        java.lang.Comparable $r21, r22;

        r0 := @this: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        z0 := @parameter0: boolean;
        i0 = -1;
        r1 = null;
        z1 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean isGatheringWrite>;
        r2 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.channels.CompletionHandler writeHandler>;
        r3 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object writeAttachment>;
        r4 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.PendingFuture writeFuture>;
        r5 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.util.concurrent.Future writeTimer>;

     label0:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void begin()>();
        if z1 == 0 goto label1;

        $r11 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        $r12 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.ByteBuffer[] writeBuffers>;
        $r6 = <sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        $l1 = staticinvoke <sun.nio.ch.IOUtil: long write(java.io.FileDescriptor,java.nio.ByteBuffer[],sun.nio.ch.NativeDispatcher)>($r11, $r12, $r6);
        i0 = (int) $l1;
        goto label2;

     label1:
        $r13 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        $r14 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.ByteBuffer writeBuffer>;
        $r7 = <sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        i0 = staticinvoke <sun.nio.ch.IOUtil: int write(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>($r13, $r14, -1L, $r7);

     label2:
        if i0 != -2 goto label10;

        $r15 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object updateLock>;
        r8 = $r15;
        entermonitor $r15;

     label3:
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean writePending> = 1;
        exitmonitor r8;

     label4:
        goto label8;

     label5:
        $r16 := @caughtexception;

     label6:
        r9 = $r16;
        exitmonitor r8;

     label7:
        throw r9;

     label8:
        $z2 = r1 instanceof java.nio.channels.AsynchronousCloseException;
        if $z2 != 0 goto label9;

        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void lockAndUpdateEvents()>();

     label9:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        return;

     label10:
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.ByteBuffer writeBuffer> = null;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.ByteBuffer[] writeBuffers> = null;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object writeAttachment> = null;
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void enableWriting()>();

     label11:
        $z3 = r1 instanceof java.nio.channels.AsynchronousCloseException;
        if $z3 != 0 goto label12;

        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void lockAndUpdateEvents()>();

     label12:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        goto label22;

     label13:
        $r17 := @caughtexception;

     label14:
        r18 = $r17;
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void enableWriting()>();
        $z4 = r18 instanceof java.nio.channels.ClosedChannelException;
        if $z4 == 0 goto label15;

        $r19 = new java.nio.channels.AsynchronousCloseException;
        specialinvoke $r19.<java.nio.channels.AsynchronousCloseException: void <init>()>();
        r18 = $r19;

     label15:
        r1 = r18;

     label16:
        $z5 = r1 instanceof java.nio.channels.AsynchronousCloseException;
        if $z5 != 0 goto label17;

        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void lockAndUpdateEvents()>();

     label17:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        goto label22;

     label18:
        $r20 := @caughtexception;

     label19:
        r10 = $r20;

     label20:
        $z6 = r1 instanceof java.nio.channels.AsynchronousCloseException;
        if $z6 != 0 goto label21;

        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void lockAndUpdateEvents()>();

     label21:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        throw r10;

     label22:
        if r5 == null goto label23;

        interfaceinvoke r5.<java.util.concurrent.Future: boolean cancel(boolean)>(0);

     label23:
        if r1 == null goto label24;

        $r21 = null;
        goto label26;

     label24:
        if z1 == 0 goto label25;

        $l2 = (long) i0;
        $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);
        goto label26;

     label25:
        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

     label26:
        r22 = $r21;
        if r2 != null goto label27;

        virtualinvoke r4.<sun.nio.ch.PendingFuture: void setResult(java.lang.Object,java.lang.Throwable)>(r22, r1);
        goto label29;

     label27:
        if z0 == 0 goto label28;

        staticinvoke <sun.nio.ch.Invoker: void invokeUnchecked(java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r2, r3, r22, r1);
        goto label29;

     label28:
        staticinvoke <sun.nio.ch.Invoker: void invokeIndirectly(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r0, r2, r3, r22, r1);

     label29:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label0 to label8 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label0 to label8 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label14 to label16 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    java.util.concurrent.Future implWrite(boolean, java.nio.ByteBuffer, java.nio.ByteBuffer[], long, java.util.concurrent.TimeUnit, java.lang.Object, java.nio.channels.CompletionHandler)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        boolean z0, z1, z2, z3, $z4, $z5, $z6;
        java.nio.ByteBuffer r1;
        java.nio.ByteBuffer[] r2;
        long l0, $l2, $l4;
        java.util.concurrent.TimeUnit r3;
        java.lang.Object r4, r11, $r19;
        java.nio.channels.CompletionHandler r5;
        sun.nio.ch.Invoker$GroupAndInvokeCount r6;
        int i1;
        java.lang.Throwable r7, r13, r14, $r24, $r26, r27, $r29;
        sun.nio.ch.NativeDispatcher $r8, $r9;
        sun.nio.ch.PendingFuture r10, $r20, r25;
        sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType $r12;
        sun.nio.ch.Port $r15, $r16, $r21;
        java.io.FileDescriptor $r17, $r18;
        byte $b3;
        java.lang.Runnable $r22;
        java.util.concurrent.Future $r23;
        java.nio.channels.AsynchronousCloseException $r28;
        java.lang.Comparable $r30, r31;
        sun.nio.ch.CompletedFuture $r32;

        r0 := @this: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        z0 := @parameter0: boolean;
        r1 := @parameter1: java.nio.ByteBuffer;
        r2 := @parameter2: java.nio.ByteBuffer[];
        l0 := @parameter3: long;
        r3 := @parameter4: java.util.concurrent.TimeUnit;
        r4 := @parameter5: java.lang.Object;
        r5 := @parameter6: java.nio.channels.CompletionHandler;
        r6 = staticinvoke <sun.nio.ch.Invoker: sun.nio.ch.Invoker$GroupAndInvokeCount getGroupAndInvokeCount()>();
        $r15 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.Port port>;
        z1 = staticinvoke <sun.nio.ch.Invoker: boolean mayInvokeDirect(sun.nio.ch.Invoker$GroupAndInvokeCount,sun.nio.ch.AsynchronousChannelGroupImpl)>(r6, $r15);
        if r5 == null goto label0;

        if z1 != 0 goto label0;

        $r16 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.Port port>;
        $z4 = virtualinvoke $r16.<sun.nio.ch.Port: boolean isFixedThreadPool()>();
        if $z4 != 0 goto label1;

     label0:
        $z5 = 1;
        goto label2;

     label1:
        $z5 = 0;

     label2:
        z2 = $z5;
        i1 = -2;
        r7 = null;
        z3 = 0;

     label3:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void begin()>();
        if z2 == 0 goto label5;

        if z0 == 0 goto label4;

        $r17 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        $r8 = <sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        $l2 = staticinvoke <sun.nio.ch.IOUtil: long write(java.io.FileDescriptor,java.nio.ByteBuffer[],sun.nio.ch.NativeDispatcher)>($r17, r2, $r8);
        i1 = (int) $l2;
        goto label5;

     label4:
        $r18 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.io.FileDescriptor fd>;
        $r9 = <sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        i1 = staticinvoke <sun.nio.ch.IOUtil: int write(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>($r18, r1, -1L, $r9);

     label5:
        if i1 != -2 goto label17;

        r10 = null;
        $r19 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object updateLock>;
        r11 = $r19;
        entermonitor $r19;

     label6:
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean isGatheringWrite> = z0;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.ByteBuffer writeBuffer> = r1;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.ByteBuffer[] writeBuffers> = r2;
        if r5 != null goto label7;

        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.channels.CompletionHandler writeHandler> = null;
        $r20 = new sun.nio.ch.PendingFuture;
        $r12 = <sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType: sun.nio.ch.UnixAsynchronousSocketChannelImpl$OpType WRITE>;
        specialinvoke $r20.<sun.nio.ch.PendingFuture: void <init>(java.nio.channels.AsynchronousChannel,java.lang.Object)>(r0, $r12);
        r10 = $r20;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.PendingFuture writeFuture> = r10;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object writeAttachment> = null;
        goto label8;

     label7:
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.channels.CompletionHandler writeHandler> = r5;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object writeAttachment> = r4;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.PendingFuture writeFuture> = null;

     label8:
        $b3 = l0 cmp 0L;
        if $b3 <= 0 goto label9;

        $r21 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.Port port>;
        $r22 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Runnable writeTimeoutTask>;
        $r23 = virtualinvoke $r21.<sun.nio.ch.Port: java.util.concurrent.Future schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r22, l0, r3);
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.util.concurrent.Future writeTimer> = $r23;

     label9:
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean writePending> = 1;
        specialinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void updateEvents()>();
        exitmonitor r11;

     label10:
        goto label14;

     label11:
        $r24 := @caughtexception;

     label12:
        r13 = $r24;
        exitmonitor r11;

     label13:
        throw r13;

     label14:
        z3 = 1;
        r25 = r10;

     label15:
        if z3 != 0 goto label16;

        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void enableWriting()>();

     label16:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        return r25;

     label17:
        if z3 != 0 goto label18;

        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void enableWriting()>();

     label18:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        goto label28;

     label19:
        $r26 := @caughtexception;

     label20:
        r27 = $r26;
        $z6 = r27 instanceof java.nio.channels.ClosedChannelException;
        if $z6 == 0 goto label21;

        $r28 = new java.nio.channels.AsynchronousCloseException;
        specialinvoke $r28.<java.nio.channels.AsynchronousCloseException: void <init>()>();
        r27 = $r28;

     label21:
        r7 = r27;

     label22:
        if z3 != 0 goto label23;

        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void enableWriting()>();

     label23:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        goto label28;

     label24:
        $r29 := @caughtexception;

     label25:
        r14 = $r29;

     label26:
        if z3 != 0 goto label27;

        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void enableWriting()>();

     label27:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void end()>();
        throw r14;

     label28:
        if r7 == null goto label29;

        $r30 = null;
        goto label31;

     label29:
        if z0 == 0 goto label30;

        $l4 = (long) i1;
        $r30 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);
        goto label31;

     label30:
        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

     label31:
        r31 = $r30;
        if r5 == null goto label34;

        if z1 == 0 goto label32;

        staticinvoke <sun.nio.ch.Invoker: void invokeDirect(sun.nio.ch.Invoker$GroupAndInvokeCount,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r6, r5, r4, r31, r7);
        goto label33;

     label32:
        staticinvoke <sun.nio.ch.Invoker: void invokeIndirectly(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r0, r5, r4, r31, r7);

     label33:
        return null;

     label34:
        $r32 = staticinvoke <sun.nio.ch.CompletedFuture: sun.nio.ch.CompletedFuture withResult(java.lang.Object,java.lang.Throwable)>(r31, r7);
        return $r32;

        catch java.lang.Throwable from label6 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label3 to label15 with label19;
        catch java.lang.Throwable from label3 to label15 with label24;
        catch java.lang.Throwable from label20 to label22 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
    }

    private static native void checkConnect(int) throws java.io.IOException;

    static java.lang.Object access$000(sun.nio.ch.UnixAsynchronousSocketChannelImpl)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        java.lang.Object $r1;

        r0 := @parameter0: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        $r1 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object updateLock>;
        return $r1;
    }

    static boolean access$100(sun.nio.ch.UnixAsynchronousSocketChannelImpl)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        boolean $z0;

        r0 := @parameter0: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        $z0 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean readPending>;
        return $z0;
    }

    static boolean access$102(sun.nio.ch.UnixAsynchronousSocketChannelImpl, boolean)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        boolean z0;

        r0 := @parameter0: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        z0 := @parameter1: boolean;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean readPending> = z0;
        return z0;
    }

    static java.nio.channels.CompletionHandler access$200(sun.nio.ch.UnixAsynchronousSocketChannelImpl)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        java.nio.channels.CompletionHandler $r1;

        r0 := @parameter0: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        $r1 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.channels.CompletionHandler readHandler>;
        return $r1;
    }

    static java.lang.Object access$300(sun.nio.ch.UnixAsynchronousSocketChannelImpl)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        java.lang.Object $r1;

        r0 := @parameter0: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        $r1 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object readAttachment>;
        return $r1;
    }

    static sun.nio.ch.PendingFuture access$400(sun.nio.ch.UnixAsynchronousSocketChannelImpl)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        sun.nio.ch.PendingFuture $r1;

        r0 := @parameter0: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        $r1 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.PendingFuture readFuture>;
        return $r1;
    }

    static boolean access$500(sun.nio.ch.UnixAsynchronousSocketChannelImpl)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        boolean $z0;

        r0 := @parameter0: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        $z0 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean writePending>;
        return $z0;
    }

    static boolean access$502(sun.nio.ch.UnixAsynchronousSocketChannelImpl, boolean)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        boolean z0;

        r0 := @parameter0: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        z0 := @parameter1: boolean;
        r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean writePending> = z0;
        return z0;
    }

    static java.nio.channels.CompletionHandler access$600(sun.nio.ch.UnixAsynchronousSocketChannelImpl)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        java.nio.channels.CompletionHandler $r1;

        r0 := @parameter0: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        $r1 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.nio.channels.CompletionHandler writeHandler>;
        return $r1;
    }

    static java.lang.Object access$700(sun.nio.ch.UnixAsynchronousSocketChannelImpl)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        java.lang.Object $r1;

        r0 := @parameter0: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        $r1 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: java.lang.Object writeAttachment>;
        return $r1;
    }

    static sun.nio.ch.PendingFuture access$800(sun.nio.ch.UnixAsynchronousSocketChannelImpl)
    {
        sun.nio.ch.UnixAsynchronousSocketChannelImpl r0;
        sun.nio.ch.PendingFuture $r1;

        r0 := @parameter0: sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        $r1 = r0.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.PendingFuture writeFuture>;
        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;
        sun.nio.ch.SocketDispatcher $r2;
        sun.security.action.GetPropertyAction $r3;
        java.lang.Object $r4;
        int $i0;
        java.lang.Boolean $r5;

        $r0 = class "sun/nio/ch/UnixAsynchronousSocketChannelImpl";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean $assertionsDisabled> = $z1;
        $r2 = new sun.nio.ch.SocketDispatcher;
        specialinvoke $r2.<sun.nio.ch.SocketDispatcher: void <init>()>();
        <sun.nio.ch.UnixAsynchronousSocketChannelImpl: sun.nio.ch.NativeDispatcher nd> = $r2;
        $r3 = new sun.security.action.GetPropertyAction;
        specialinvoke $r3.<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>("sun.nio.ch.disableSynchronousRead", "false");
        $r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r3);
        r1 = (java.lang.String) $r4;
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i0 != 0 goto label2;

        $z2 = 1;
        goto label3;

     label2:
        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r1);
        $z2 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

     label3:
        <sun.nio.ch.UnixAsynchronousSocketChannelImpl: boolean disableSynchronousRead> = $z2;
        staticinvoke <sun.nio.ch.Util: void load()>();
        return;
    }
}
