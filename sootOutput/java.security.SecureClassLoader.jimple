public class java.security.SecureClassLoader extends java.lang.ClassLoader
{
    private final boolean initialized;
    private final java.util.HashMap pdcache;
    private static final sun.security.util.Debug debug;

    protected void <init>(java.lang.ClassLoader)
    {
        java.security.SecureClassLoader r0;
        java.lang.ClassLoader r1;
        java.lang.SecurityManager r2;
        java.util.HashMap $r3;

        r0 := @this: java.security.SecureClassLoader;
        r1 := @parameter0: java.lang.ClassLoader;
        specialinvoke r0.<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>(r1);
        $r3 = new java.util.HashMap;
        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(11);
        r0.<java.security.SecureClassLoader: java.util.HashMap pdcache> = $r3;
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label0;

        virtualinvoke r2.<java.lang.SecurityManager: void checkCreateClassLoader()>();

     label0:
        r0.<java.security.SecureClassLoader: boolean initialized> = 1;
        return;
    }

    protected void <init>()
    {
        java.security.SecureClassLoader r0;
        java.util.HashMap $r1;
        java.lang.SecurityManager r2;

        r0 := @this: java.security.SecureClassLoader;
        specialinvoke r0.<java.lang.ClassLoader: void <init>()>();
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(11);
        r0.<java.security.SecureClassLoader: java.util.HashMap pdcache> = $r1;
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label0;

        virtualinvoke r2.<java.lang.SecurityManager: void checkCreateClassLoader()>();

     label0:
        r0.<java.security.SecureClassLoader: boolean initialized> = 1;
        return;
    }

    protected final java.lang.Class defineClass(java.lang.String, byte[], int, int, java.security.CodeSource)
    {
        java.security.SecureClassLoader r0;
        java.lang.String r1;
        byte[] r2;
        int i0, i1;
        java.security.CodeSource r3;
        java.security.ProtectionDomain $r4;
        java.lang.Class $r5;

        r0 := @this: java.security.SecureClassLoader;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: byte[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        r3 := @parameter4: java.security.CodeSource;
        $r4 = specialinvoke r0.<java.security.SecureClassLoader: java.security.ProtectionDomain getProtectionDomain(java.security.CodeSource)>(r3);
        $r5 = virtualinvoke r0.<java.security.SecureClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>(r1, r2, i0, i1, $r4);
        return $r5;
    }

    protected final java.lang.Class defineClass(java.lang.String, java.nio.ByteBuffer, java.security.CodeSource)
    {
        java.security.SecureClassLoader r0;
        java.lang.String r1;
        java.nio.ByteBuffer r2;
        java.security.CodeSource r3;
        java.security.ProtectionDomain $r4;
        java.lang.Class $r5;

        r0 := @this: java.security.SecureClassLoader;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.nio.ByteBuffer;
        r3 := @parameter2: java.security.CodeSource;
        $r4 = specialinvoke r0.<java.security.SecureClassLoader: java.security.ProtectionDomain getProtectionDomain(java.security.CodeSource)>(r3);
        $r5 = virtualinvoke r0.<java.security.SecureClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)>(r1, r2, $r4);
        return $r5;
    }

    protected java.security.PermissionCollection getPermissions(java.security.CodeSource)
    {
        java.security.SecureClassLoader r0;
        java.security.CodeSource r1;
        java.security.Permissions $r2;

        r0 := @this: java.security.SecureClassLoader;
        r1 := @parameter0: java.security.CodeSource;
        specialinvoke r0.<java.security.SecureClassLoader: void check()>();
        $r2 = new java.security.Permissions;
        specialinvoke $r2.<java.security.Permissions: void <init>()>();
        return $r2;
    }

    private java.security.ProtectionDomain getProtectionDomain(java.security.CodeSource)
    {
        java.security.SecureClassLoader r0;
        java.security.CodeSource r1;
        null_type n0;
        java.util.HashMap r2, $r5, $r6, $r10;
        java.security.PermissionCollection r3;
        java.lang.Throwable r4, $r19;
        java.lang.Object $r7;
        java.security.ProtectionDomain r8, $r9;
        sun.security.util.Debug $r12, $r13, $r18;
        java.lang.StringBuilder $r14, $r15, $r16;
        java.lang.String $r17;

        r0 := @this: java.security.SecureClassLoader;
        r1 := @parameter0: java.security.CodeSource;
        if r1 != null goto label0;

        return null;

     label0:
        n0 = null;
        $r5 = r0.<java.security.SecureClassLoader: java.util.HashMap pdcache>;
        r2 = $r5;
        entermonitor $r5;

     label1:
        $r6 = r0.<java.security.SecureClassLoader: java.util.HashMap pdcache>;
        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);
        r8 = (java.security.ProtectionDomain) $r7;
        if r8 != null goto label2;

        r3 = virtualinvoke r0.<java.security.SecureClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>(r1);
        $r9 = new java.security.ProtectionDomain;
        specialinvoke $r9.<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])>(r1, r3, r0, null);
        r8 = $r9;
        $r10 = r0.<java.security.SecureClassLoader: java.util.HashMap pdcache>;
        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r8);
        $r12 = <java.security.SecureClassLoader: sun.security.util.Debug debug>;
        if $r12 == null goto label2;

        $r13 = <java.security.SecureClassLoader: sun.security.util.Debug debug>;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getPermissions ");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r13.<sun.security.util.Debug: void println(java.lang.String)>($r17);
        $r18 = <java.security.SecureClassLoader: sun.security.util.Debug debug>;
        virtualinvoke $r18.<sun.security.util.Debug: void println(java.lang.String)>("");

     label2:
        exitmonitor r2;

     label3:
        goto label7;

     label4:
        $r19 := @caughtexception;

     label5:
        r4 = $r19;
        exitmonitor r2;

     label6:
        throw r4;

     label7:
        return r8;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void check()
    {
        java.security.SecureClassLoader r0;
        boolean $z0;
        java.lang.SecurityException $r1;

        r0 := @this: java.security.SecureClassLoader;
        $z0 = r0.<java.security.SecureClassLoader: boolean initialized>;
        if $z0 != 0 goto label0;

        $r1 = new java.lang.SecurityException;
        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("ClassLoader object not initialized");
        throw $r1;

     label0:
        return;
    }

    static void <clinit>()
    {
        sun.security.util.Debug $r0;

        $r0 = staticinvoke <sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String)>("scl");
        <java.security.SecureClassLoader: sun.security.util.Debug debug> = $r0;
        staticinvoke <java.lang.ClassLoader: boolean registerAsParallelCapable()>();
        return;
    }
}
