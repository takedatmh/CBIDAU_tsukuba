final class javax.crypto.CryptoPermissions extends java.security.PermissionCollection implements java.io.Serializable
{
    private static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private transient java.util.concurrent.ConcurrentHashMap perms;

    void <init>()
    {
        javax.crypto.CryptoPermissions r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @this: javax.crypto.CryptoPermissions;
        specialinvoke r0.<java.security.PermissionCollection: void <init>()>();
        $r1 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(7);
        r0.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms> = $r1;
        return;
    }

    void load(java.io.InputStream) throws java.io.IOException, javax.crypto.CryptoPolicyParser$ParsingException
    {
        javax.crypto.CryptoPermissions r0;
        java.io.InputStream r1;
        javax.crypto.CryptoPolicyParser $r2, r3;
        java.io.InputStreamReader $r4;
        javax.crypto.CryptoPermission[] r5;
        int i0, $i1;
        java.io.BufferedReader $r6;
        javax.crypto.CryptoPermission $r7;

        r0 := @this: javax.crypto.CryptoPermissions;
        r1 := @parameter0: java.io.InputStream;
        $r2 = new javax.crypto.CryptoPolicyParser;
        specialinvoke $r2.<javax.crypto.CryptoPolicyParser: void <init>()>();
        r3 = $r2;
        $r6 = new java.io.BufferedReader;
        $r4 = new java.io.InputStreamReader;
        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r1, "UTF-8");
        specialinvoke $r6.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4);
        virtualinvoke r3.<javax.crypto.CryptoPolicyParser: void read(java.io.Reader)>($r6);
        r5 = virtualinvoke r3.<javax.crypto.CryptoPolicyParser: javax.crypto.CryptoPermission[] getPermissions()>();
        i0 = 0;

     label0:
        $i1 = lengthof r5;
        if i0 >= $i1 goto label1;

        $r7 = r5[i0];
        virtualinvoke r0.<javax.crypto.CryptoPermissions: void add(java.security.Permission)>($r7);
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    boolean isEmpty()
    {
        javax.crypto.CryptoPermissions r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        boolean $z0;

        r0 := @this: javax.crypto.CryptoPermissions;
        $r1 = r0.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms>;
        $z0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>();
        return $z0;
    }

    public void add(java.security.Permission)
    {
        javax.crypto.CryptoPermissions r0;
        java.security.Permission r1;
        javax.crypto.CryptoPermission r2;
        java.security.PermissionCollection r3;
        java.lang.String r4;
        boolean $z0, $z1;
        java.lang.SecurityException $r5;
        java.util.concurrent.ConcurrentHashMap $r6;

        r0 := @this: javax.crypto.CryptoPermissions;
        r1 := @parameter0: java.security.Permission;
        $z0 = virtualinvoke r0.<javax.crypto.CryptoPermissions: boolean isReadOnly()>();
        if $z0 == 0 goto label0;

        $r5 = new java.lang.SecurityException;
        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Attempt to add a Permission to a readonly CryptoPermissions object");
        throw $r5;

     label0:
        $z1 = r1 instanceof javax.crypto.CryptoPermission;
        if $z1 != 0 goto label1;

        return;

     label1:
        r2 = (javax.crypto.CryptoPermission) r1;
        r3 = specialinvoke r0.<javax.crypto.CryptoPermissions: java.security.PermissionCollection getPermissionCollection(javax.crypto.CryptoPermission)>(r2);
        virtualinvoke r3.<java.security.PermissionCollection: void add(java.security.Permission)>(r2);
        r4 = virtualinvoke r2.<javax.crypto.CryptoPermission: java.lang.String getAlgorithm()>();
        $r6 = r0.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms>;
        virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r4, r3);
        return;
    }

    public boolean implies(java.security.Permission)
    {
        javax.crypto.CryptoPermissions r0;
        java.security.Permission r1;
        javax.crypto.CryptoPermission r2;
        java.security.PermissionCollection r3;
        boolean $z0, $z1;
        java.lang.String $r4;

        r0 := @this: javax.crypto.CryptoPermissions;
        r1 := @parameter0: java.security.Permission;
        $z0 = r1 instanceof javax.crypto.CryptoPermission;
        if $z0 != 0 goto label0;

        return 0;

     label0:
        r2 = (javax.crypto.CryptoPermission) r1;
        $r4 = virtualinvoke r2.<javax.crypto.CryptoPermission: java.lang.String getAlgorithm()>();
        r3 = virtualinvoke r0.<javax.crypto.CryptoPermissions: java.security.PermissionCollection getPermissionCollection(java.lang.String)>($r4);
        $z1 = virtualinvoke r3.<java.security.PermissionCollection: boolean implies(java.security.Permission)>(r2);
        return $z1;
    }

    public java.util.Enumeration elements()
    {
        javax.crypto.CryptoPermissions r0;
        javax.crypto.PermissionsEnumerator $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.util.Enumeration $r3;

        r0 := @this: javax.crypto.CryptoPermissions;
        $r1 = new javax.crypto.PermissionsEnumerator;
        $r2 = r0.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms>;
        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Enumeration elements()>();
        specialinvoke $r1.<javax.crypto.PermissionsEnumerator: void <init>(java.util.Enumeration)>($r3);
        return $r1;
    }

    javax.crypto.CryptoPermissions getMinimum(javax.crypto.CryptoPermissions)
    {
        javax.crypto.CryptoPermissions r0, r1, r2, $r11;
        java.security.PermissionCollection r3, r6, r7, r26, r37;
        int i0, i1, i2, $i3, i4, $i5;
        java.util.Enumeration r4, $r14, $r27, r31;
        java.lang.String r5, r33;
        javax.crypto.CryptoPermission[] r8, r38;
        java.util.concurrent.ConcurrentHashMap $r9, $r10, $r12, $r17, $r19, $r21, $r24, $r30, $r34, $r35;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r13, $r15, $r18, $r20, $r22, $r25, $r28, $r32, $r36;
        javax.crypto.CryptoPermission $r16, $r23, $r29, $r39;

        r0 := @this: javax.crypto.CryptoPermissions;
        r1 := @parameter0: javax.crypto.CryptoPermissions;
        if r1 != null goto label0;

        return null;

     label0:
        $r9 = r0.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms>;
        $z0 = virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>("CryptoAllPermission");
        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r10 = r1.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms>;
        $z1 = virtualinvoke $r10.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>("CryptoAllPermission");
        if $z1 == 0 goto label2;

        return r0;

     label2:
        $r11 = new javax.crypto.CryptoPermissions;
        specialinvoke $r11.<javax.crypto.CryptoPermissions: void <init>()>();
        r2 = $r11;
        $r12 = r1.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms>;
        $r13 = virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>("*");
        r3 = (java.security.PermissionCollection) $r13;
        i0 = 0;
        if r3 == null goto label3;

        $r14 = virtualinvoke r3.<java.security.PermissionCollection: java.util.Enumeration elements()>();
        $r15 = interfaceinvoke $r14.<java.util.Enumeration: java.lang.Object nextElement()>();
        $r16 = (javax.crypto.CryptoPermission) $r15;
        i0 = virtualinvoke $r16.<javax.crypto.CryptoPermission: int getMaxKeySize()>();

     label3:
        $r17 = r0.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms>;
        r4 = virtualinvoke $r17.<java.util.concurrent.ConcurrentHashMap: java.util.Enumeration keys()>();

     label4:
        $z2 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z2 == 0 goto label10;

        $r18 = interfaceinvoke r4.<java.util.Enumeration: java.lang.Object nextElement()>();
        r5 = (java.lang.String) $r18;
        $r19 = r0.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms>;
        $r20 = virtualinvoke $r19.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r5);
        r6 = (java.security.PermissionCollection) $r20;
        $r21 = r1.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms>;
        $r22 = virtualinvoke $r21.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r5);
        r7 = (java.security.PermissionCollection) $r22;
        if r7 != null goto label6;

        if r3 != null goto label5;

        goto label4;

     label5:
        r8 = specialinvoke r0.<javax.crypto.CryptoPermissions: javax.crypto.CryptoPermission[] getMinimum(int,java.security.PermissionCollection)>(i0, r6);
        goto label7;

     label6:
        r8 = specialinvoke r0.<javax.crypto.CryptoPermissions: javax.crypto.CryptoPermission[] getMinimum(java.security.PermissionCollection,java.security.PermissionCollection)>(r6, r7);

     label7:
        i1 = 0;

     label8:
        $i3 = lengthof r8;
        if i1 >= $i3 goto label9;

        $r23 = r8[i1];
        virtualinvoke r2.<javax.crypto.CryptoPermissions: void add(java.security.Permission)>($r23);
        i1 = i1 + 1;
        goto label8;

     label9:
        goto label4;

     label10:
        $r24 = r0.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms>;
        $r25 = virtualinvoke $r24.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>("*");
        r26 = (java.security.PermissionCollection) $r25;
        if r26 != null goto label11;

        return r2;

     label11:
        $r27 = virtualinvoke r26.<java.security.PermissionCollection: java.util.Enumeration elements()>();
        $r28 = interfaceinvoke $r27.<java.util.Enumeration: java.lang.Object nextElement()>();
        $r29 = (javax.crypto.CryptoPermission) $r28;
        i4 = virtualinvoke $r29.<javax.crypto.CryptoPermission: int getMaxKeySize()>();
        $r30 = r1.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms>;
        r31 = virtualinvoke $r30.<java.util.concurrent.ConcurrentHashMap: java.util.Enumeration keys()>();

     label12:
        $z3 = interfaceinvoke r31.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z3 == 0 goto label16;

        $r32 = interfaceinvoke r31.<java.util.Enumeration: java.lang.Object nextElement()>();
        r33 = (java.lang.String) $r32;
        $r34 = r0.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms>;
        $z4 = virtualinvoke $r34.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>(r33);
        if $z4 == 0 goto label13;

        goto label12;

     label13:
        $r35 = r1.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms>;
        $r36 = virtualinvoke $r35.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r33);
        r37 = (java.security.PermissionCollection) $r36;
        r38 = specialinvoke r0.<javax.crypto.CryptoPermissions: javax.crypto.CryptoPermission[] getMinimum(int,java.security.PermissionCollection)>(i4, r37);
        i2 = 0;

     label14:
        $i5 = lengthof r38;
        if i2 >= $i5 goto label15;

        $r39 = r38[i2];
        virtualinvoke r2.<javax.crypto.CryptoPermissions: void add(java.security.Permission)>($r39);
        i2 = i2 + 1;
        goto label14;

     label15:
        goto label12;

     label16:
        return r2;
    }

    private javax.crypto.CryptoPermission[] getMinimum(java.security.PermissionCollection, java.security.PermissionCollection)
    {
        javax.crypto.CryptoPermissions r0;
        java.security.PermissionCollection r1, r2;
        java.util.Vector $r3, r4;
        java.util.Enumeration r5, r7;
        javax.crypto.CryptoPermission r6, r8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r9, $r10;
        int $i0;
        javax.crypto.CryptoPermission[] r11;

        r0 := @this: javax.crypto.CryptoPermissions;
        r1 := @parameter0: java.security.PermissionCollection;
        r2 := @parameter1: java.security.PermissionCollection;
        $r3 = new java.util.Vector;
        specialinvoke $r3.<java.util.Vector: void <init>(int)>(2);
        r4 = $r3;
        r5 = virtualinvoke r1.<java.security.PermissionCollection: java.util.Enumeration elements()>();

     label0:
        $z0 = interfaceinvoke r5.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r5.<java.util.Enumeration: java.lang.Object nextElement()>();
        r6 = (javax.crypto.CryptoPermission) $r9;
        r7 = virtualinvoke r2.<java.security.PermissionCollection: java.util.Enumeration elements()>();

     label1:
        $z1 = interfaceinvoke r7.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z1 == 0 goto label4;

        $r10 = interfaceinvoke r7.<java.util.Enumeration: java.lang.Object nextElement()>();
        r8 = (javax.crypto.CryptoPermission) $r10;
        $z2 = virtualinvoke r8.<javax.crypto.CryptoPermission: boolean implies(java.security.Permission)>(r6);
        if $z2 == 0 goto label2;

        virtualinvoke r4.<java.util.Vector: void addElement(java.lang.Object)>(r6);
        goto label4;

     label2:
        $z3 = virtualinvoke r6.<javax.crypto.CryptoPermission: boolean implies(java.security.Permission)>(r8);
        if $z3 == 0 goto label3;

        virtualinvoke r4.<java.util.Vector: void addElement(java.lang.Object)>(r8);

     label3:
        goto label1;

     label4:
        goto label0;

     label5:
        $i0 = virtualinvoke r4.<java.util.Vector: int size()>();
        r11 = newarray (javax.crypto.CryptoPermission)[$i0];
        virtualinvoke r4.<java.util.Vector: void copyInto(java.lang.Object[])>(r11);
        return r11;
    }

    private javax.crypto.CryptoPermission[] getMinimum(int, java.security.PermissionCollection)
    {
        javax.crypto.CryptoPermissions r0;
        int i0, $i1, $i2;
        java.security.PermissionCollection r1;
        java.util.Vector $r2, r3;
        java.util.Enumeration r4;
        javax.crypto.CryptoPermission r5, $r7, $r11;
        boolean $z0, $z1;
        java.lang.Object $r6;
        java.lang.String $r8, $r10, $r12, $r13;
        java.security.spec.AlgorithmParameterSpec $r9;
        javax.crypto.CryptoPermission[] r14;

        r0 := @this: javax.crypto.CryptoPermissions;
        i0 := @parameter0: int;
        r1 := @parameter1: java.security.PermissionCollection;
        $r2 = new java.util.Vector;
        specialinvoke $r2.<java.util.Vector: void <init>(int)>(1);
        r3 = $r2;
        r4 = virtualinvoke r1.<java.security.PermissionCollection: java.util.Enumeration elements()>();

     label0:
        $z0 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r4.<java.util.Enumeration: java.lang.Object nextElement()>();
        r5 = (javax.crypto.CryptoPermission) $r6;
        $i1 = virtualinvoke r5.<javax.crypto.CryptoPermission: int getMaxKeySize()>();
        if $i1 > i0 goto label1;

        virtualinvoke r3.<java.util.Vector: void addElement(java.lang.Object)>(r5);
        goto label3;

     label1:
        $z1 = virtualinvoke r5.<javax.crypto.CryptoPermission: boolean getCheckParam()>();
        if $z1 == 0 goto label2;

        $r7 = new javax.crypto.CryptoPermission;
        $r8 = virtualinvoke r5.<javax.crypto.CryptoPermission: java.lang.String getAlgorithm()>();
        $r9 = virtualinvoke r5.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()>();
        $r10 = virtualinvoke r5.<javax.crypto.CryptoPermission: java.lang.String getExemptionMechanism()>();
        specialinvoke $r7.<javax.crypto.CryptoPermission: void <init>(java.lang.String,int,java.security.spec.AlgorithmParameterSpec,java.lang.String)>($r8, i0, $r9, $r10);
        virtualinvoke r3.<java.util.Vector: void addElement(java.lang.Object)>($r7);
        goto label3;

     label2:
        $r11 = new javax.crypto.CryptoPermission;
        $r12 = virtualinvoke r5.<javax.crypto.CryptoPermission: java.lang.String getAlgorithm()>();
        $r13 = virtualinvoke r5.<javax.crypto.CryptoPermission: java.lang.String getExemptionMechanism()>();
        specialinvoke $r11.<javax.crypto.CryptoPermission: void <init>(java.lang.String,int,java.lang.String)>($r12, i0, $r13);
        virtualinvoke r3.<java.util.Vector: void addElement(java.lang.Object)>($r11);

     label3:
        goto label0;

     label4:
        $i2 = virtualinvoke r3.<java.util.Vector: int size()>();
        r14 = newarray (javax.crypto.CryptoPermission)[$i2];
        virtualinvoke r3.<java.util.Vector: void copyInto(java.lang.Object[])>(r14);
        return r14;
    }

    java.security.PermissionCollection getPermissionCollection(java.lang.String)
    {
        javax.crypto.CryptoPermissions r0;
        java.lang.String r1;
        java.security.PermissionCollection r2;
        java.util.concurrent.ConcurrentHashMap $r3, $r5, $r7;
        java.lang.Object $r4, $r6, $r8;

        r0 := @this: javax.crypto.CryptoPermissions;
        r1 := @parameter0: java.lang.String;
        $r3 = r0.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms>;
        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>("CryptoAllPermission");
        r2 = (java.security.PermissionCollection) $r4;
        if r2 != null goto label0;

        $r5 = r0.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms>;
        $r6 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);
        r2 = (java.security.PermissionCollection) $r6;
        if r2 != null goto label0;

        $r7 = r0.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms>;
        $r8 = virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>("*");
        r2 = (java.security.PermissionCollection) $r8;

     label0:
        return r2;
    }

    private java.security.PermissionCollection getPermissionCollection(javax.crypto.CryptoPermission)
    {
        javax.crypto.CryptoPermissions r0;
        javax.crypto.CryptoPermission r1;
        java.lang.String r2;
        java.security.PermissionCollection r3;
        java.util.concurrent.ConcurrentHashMap $r4;
        java.lang.Object $r5;

        r0 := @this: javax.crypto.CryptoPermissions;
        r1 := @parameter0: javax.crypto.CryptoPermission;
        r2 = virtualinvoke r1.<javax.crypto.CryptoPermission: java.lang.String getAlgorithm()>();
        $r4 = r0.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms>;
        $r5 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2);
        r3 = (java.security.PermissionCollection) $r5;
        if r3 != null goto label0;

        r3 = virtualinvoke r1.<javax.crypto.CryptoPermission: java.security.PermissionCollection newPermissionCollection()>();

     label0:
        return r3;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        javax.crypto.CryptoPermissions r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectInputStream$GetField r2;
        java.util.Hashtable r3, $r5;
        java.lang.Object $r4;
        java.util.concurrent.ConcurrentHashMap $r6, $r7;

        r0 := @this: javax.crypto.CryptoPermissions;
        r1 := @parameter0: java.io.ObjectInputStream;
        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();
        $r4 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("perms", null);
        $r5 = (java.util.Hashtable) $r4;
        r3 = (java.util.Hashtable) $r5;
        if r3 == null goto label0;

        $r6 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r6.<java.util.concurrent.ConcurrentHashMap: void <init>(java.util.Map)>(r3);
        r0.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms> = $r6;
        goto label1;

     label0:
        $r7 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
        r0.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms> = $r7;

     label1:
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        javax.crypto.CryptoPermissions r0;
        java.io.ObjectOutputStream r1;
        java.util.Hashtable $r2, r3;
        java.io.ObjectOutputStream$PutField r4;
        java.util.concurrent.ConcurrentHashMap $r5;

        r0 := @this: javax.crypto.CryptoPermissions;
        r1 := @parameter0: java.io.ObjectOutputStream;
        $r2 = new java.util.Hashtable;
        $r5 = r0.<javax.crypto.CryptoPermissions: java.util.concurrent.ConcurrentHashMap perms>;
        specialinvoke $r2.<java.util.Hashtable: void <init>(java.util.Map)>($r5);
        r3 = $r2;
        r4 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();
        virtualinvoke r4.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("perms", r3);
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();
        return;
    }

    static void <clinit>()
    {
        java.io.ObjectStreamField $r0;
        java.io.ObjectStreamField[] $r1;

        $r1 = newarray (java.io.ObjectStreamField)[1];
        $r0 = new java.io.ObjectStreamField;
        specialinvoke $r0.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("perms", class "java/util/Hashtable");
        $r1[0] = $r0;
        <javax.crypto.CryptoPermissions: java.io.ObjectStreamField[] serialPersistentFields> = $r1;
        return;
    }
}
