class sun.nio.fs.UnixFileAttributes extends java.lang.Object implements java.nio.file.attribute.PosixFileAttributes
{
    private int st_mode;
    private long st_ino;
    private long st_dev;
    private long st_rdev;
    private int st_nlink;
    private int st_uid;
    private int st_gid;
    private long st_size;
    private long st_atime;
    private long st_mtime;
    private long st_ctime;
    private volatile java.nio.file.attribute.UserPrincipal owner;
    private volatile java.nio.file.attribute.GroupPrincipal group;
    private volatile sun.nio.fs.UnixFileKey key;

    private void <init>()
    {
        sun.nio.fs.UnixFileAttributes r0;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    static sun.nio.fs.UnixFileAttributes get(sun.nio.fs.UnixPath, boolean) throws sun.nio.fs.UnixException
    {
        sun.nio.fs.UnixPath r0;
        boolean z0;
        sun.nio.fs.UnixFileAttributes $r1, r2;

        r0 := @parameter0: sun.nio.fs.UnixPath;
        z0 := @parameter1: boolean;
        $r1 = new sun.nio.fs.UnixFileAttributes;
        specialinvoke $r1.<sun.nio.fs.UnixFileAttributes: void <init>()>();
        r2 = $r1;
        if z0 == 0 goto label0;

        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void stat(sun.nio.fs.UnixPath,sun.nio.fs.UnixFileAttributes)>(r0, r2);
        goto label1;

     label0:
        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void lstat(sun.nio.fs.UnixPath,sun.nio.fs.UnixFileAttributes)>(r0, r2);

     label1:
        return r2;
    }

    static sun.nio.fs.UnixFileAttributes get(int) throws sun.nio.fs.UnixException
    {
        int i0;
        sun.nio.fs.UnixFileAttributes $r0, r1;

        i0 := @parameter0: int;
        $r0 = new sun.nio.fs.UnixFileAttributes;
        specialinvoke $r0.<sun.nio.fs.UnixFileAttributes: void <init>()>();
        r1 = $r0;
        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void fstat(int,sun.nio.fs.UnixFileAttributes)>(i0, r1);
        return r1;
    }

    static sun.nio.fs.UnixFileAttributes get(int, sun.nio.fs.UnixPath, boolean) throws sun.nio.fs.UnixException
    {
        int i0;
        sun.nio.fs.UnixPath r0;
        boolean z0;
        sun.nio.fs.UnixFileAttributes $r1, r2;
        byte b1, $b2;
        byte[] $r3;

        i0 := @parameter0: int;
        r0 := @parameter1: sun.nio.fs.UnixPath;
        z0 := @parameter2: boolean;
        $r1 = new sun.nio.fs.UnixFileAttributes;
        specialinvoke $r1.<sun.nio.fs.UnixFileAttributes: void <init>()>();
        r2 = $r1;
        if z0 == 0 goto label0;

        $b2 = 0;
        goto label1;

     label0:
        $b2 = 0;

     label1:
        b1 = $b2;
        $r3 = virtualinvoke r0.<sun.nio.fs.UnixPath: byte[] asByteArray()>();
        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void fstatat(int,byte[],int,sun.nio.fs.UnixFileAttributes)>(i0, $r3, b1, r2);
        return r2;
    }

    boolean isSameFile(sun.nio.fs.UnixFileAttributes)
    {
        sun.nio.fs.UnixFileAttributes r0, r1;
        long $l0, $l1, $l3, $l4;
        byte $b2, $b5;
        boolean $z0;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        r1 := @parameter0: sun.nio.fs.UnixFileAttributes;
        $l0 = r0.<sun.nio.fs.UnixFileAttributes: long st_ino>;
        $l1 = r1.<sun.nio.fs.UnixFileAttributes: long st_ino>;
        $b2 = $l0 cmp $l1;
        if $b2 != 0 goto label0;

        $l3 = r0.<sun.nio.fs.UnixFileAttributes: long st_dev>;
        $l4 = r1.<sun.nio.fs.UnixFileAttributes: long st_dev>;
        $b5 = $l3 cmp $l4;
        if $b5 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    int mode()
    {
        sun.nio.fs.UnixFileAttributes r0;
        int $i0;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $i0 = r0.<sun.nio.fs.UnixFileAttributes: int st_mode>;
        return $i0;
    }

    long ino()
    {
        sun.nio.fs.UnixFileAttributes r0;
        long $l0;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $l0 = r0.<sun.nio.fs.UnixFileAttributes: long st_ino>;
        return $l0;
    }

    long dev()
    {
        sun.nio.fs.UnixFileAttributes r0;
        long $l0;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $l0 = r0.<sun.nio.fs.UnixFileAttributes: long st_dev>;
        return $l0;
    }

    long rdev()
    {
        sun.nio.fs.UnixFileAttributes r0;
        long $l0;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $l0 = r0.<sun.nio.fs.UnixFileAttributes: long st_rdev>;
        return $l0;
    }

    int nlink()
    {
        sun.nio.fs.UnixFileAttributes r0;
        int $i0;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $i0 = r0.<sun.nio.fs.UnixFileAttributes: int st_nlink>;
        return $i0;
    }

    int uid()
    {
        sun.nio.fs.UnixFileAttributes r0;
        int $i0;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $i0 = r0.<sun.nio.fs.UnixFileAttributes: int st_uid>;
        return $i0;
    }

    int gid()
    {
        sun.nio.fs.UnixFileAttributes r0;
        int $i0;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $i0 = r0.<sun.nio.fs.UnixFileAttributes: int st_gid>;
        return $i0;
    }

    java.nio.file.attribute.FileTime ctime()
    {
        sun.nio.fs.UnixFileAttributes r0;
        java.util.concurrent.TimeUnit $r1;
        long $l0;
        java.nio.file.attribute.FileTime $r2;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $l0 = r0.<sun.nio.fs.UnixFileAttributes: long st_ctime>;
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
        $r2 = staticinvoke <java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime 'from'(long,java.util.concurrent.TimeUnit)>($l0, $r1);
        return $r2;
    }

    boolean isDevice()
    {
        sun.nio.fs.UnixFileAttributes r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $i1 = r0.<sun.nio.fs.UnixFileAttributes: int st_mode>;
        i0 = $i1 & 61440;
        if i0 == 8192 goto label0;

        if i0 == 24576 goto label0;

        if i0 != 4096 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.nio.file.attribute.FileTime lastModifiedTime()
    {
        sun.nio.fs.UnixFileAttributes r0;
        java.util.concurrent.TimeUnit $r1;
        long $l0;
        java.nio.file.attribute.FileTime $r2;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $l0 = r0.<sun.nio.fs.UnixFileAttributes: long st_mtime>;
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
        $r2 = staticinvoke <java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime 'from'(long,java.util.concurrent.TimeUnit)>($l0, $r1);
        return $r2;
    }

    public java.nio.file.attribute.FileTime lastAccessTime()
    {
        sun.nio.fs.UnixFileAttributes r0;
        java.util.concurrent.TimeUnit $r1;
        long $l0;
        java.nio.file.attribute.FileTime $r2;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $l0 = r0.<sun.nio.fs.UnixFileAttributes: long st_atime>;
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
        $r2 = staticinvoke <java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime 'from'(long,java.util.concurrent.TimeUnit)>($l0, $r1);
        return $r2;
    }

    public java.nio.file.attribute.FileTime creationTime()
    {
        sun.nio.fs.UnixFileAttributes r0;
        java.nio.file.attribute.FileTime $r1;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $r1 = virtualinvoke r0.<sun.nio.fs.UnixFileAttributes: java.nio.file.attribute.FileTime lastModifiedTime()>();
        return $r1;
    }

    public boolean isRegularFile()
    {
        sun.nio.fs.UnixFileAttributes r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $i0 = r0.<sun.nio.fs.UnixFileAttributes: int st_mode>;
        $i1 = $i0 & 61440;
        if $i1 != 32768 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isDirectory()
    {
        sun.nio.fs.UnixFileAttributes r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $i0 = r0.<sun.nio.fs.UnixFileAttributes: int st_mode>;
        $i1 = $i0 & 61440;
        if $i1 != 16384 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isSymbolicLink()
    {
        sun.nio.fs.UnixFileAttributes r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $i0 = r0.<sun.nio.fs.UnixFileAttributes: int st_mode>;
        $i1 = $i0 & 61440;
        if $i1 != 40960 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isOther()
    {
        sun.nio.fs.UnixFileAttributes r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $i1 = r0.<sun.nio.fs.UnixFileAttributes: int st_mode>;
        i0 = $i1 & 61440;
        if i0 == 32768 goto label0;

        if i0 == 16384 goto label0;

        if i0 == 40960 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public long size()
    {
        sun.nio.fs.UnixFileAttributes r0;
        long $l0;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $l0 = r0.<sun.nio.fs.UnixFileAttributes: long st_size>;
        return $l0;
    }

    public sun.nio.fs.UnixFileKey fileKey()
    {
        sun.nio.fs.UnixFileAttributes r0, r1;
        java.lang.Throwable r2, $r7;
        sun.nio.fs.UnixFileKey $r3, $r5, $r6, $r8;
        long $l0, $l1;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $r3 = r0.<sun.nio.fs.UnixFileAttributes: sun.nio.fs.UnixFileKey key>;
        if $r3 != null goto label6;

        r1 = r0;
        entermonitor r0;

     label0:
        $r5 = r0.<sun.nio.fs.UnixFileAttributes: sun.nio.fs.UnixFileKey key>;
        if $r5 != null goto label1;

        $r6 = new sun.nio.fs.UnixFileKey;
        $l0 = r0.<sun.nio.fs.UnixFileAttributes: long st_dev>;
        $l1 = r0.<sun.nio.fs.UnixFileAttributes: long st_ino>;
        specialinvoke $r6.<sun.nio.fs.UnixFileKey: void <init>(long,long)>($l0, $l1);
        r0.<sun.nio.fs.UnixFileAttributes: sun.nio.fs.UnixFileKey key> = $r6;

     label1:
        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r7 := @caughtexception;

     label4:
        r2 = $r7;
        exitmonitor r1;

     label5:
        throw r2;

     label6:
        $r8 = r0.<sun.nio.fs.UnixFileAttributes: sun.nio.fs.UnixFileKey key>;
        return $r8;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.nio.file.attribute.UserPrincipal owner()
    {
        sun.nio.fs.UnixFileAttributes r0, r1;
        java.lang.Throwable r2, $r7;
        java.nio.file.attribute.UserPrincipal $r3, $r5, $r8;
        int $i0;
        sun.nio.fs.UnixUserPrincipals$User $r6;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $r3 = r0.<sun.nio.fs.UnixFileAttributes: java.nio.file.attribute.UserPrincipal owner>;
        if $r3 != null goto label6;

        r1 = r0;
        entermonitor r0;

     label0:
        $r5 = r0.<sun.nio.fs.UnixFileAttributes: java.nio.file.attribute.UserPrincipal owner>;
        if $r5 != null goto label1;

        $i0 = r0.<sun.nio.fs.UnixFileAttributes: int st_uid>;
        $r6 = staticinvoke <sun.nio.fs.UnixUserPrincipals: sun.nio.fs.UnixUserPrincipals$User fromUid(int)>($i0);
        r0.<sun.nio.fs.UnixFileAttributes: java.nio.file.attribute.UserPrincipal owner> = $r6;

     label1:
        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r7 := @caughtexception;

     label4:
        r2 = $r7;
        exitmonitor r1;

     label5:
        throw r2;

     label6:
        $r8 = r0.<sun.nio.fs.UnixFileAttributes: java.nio.file.attribute.UserPrincipal owner>;
        return $r8;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.nio.file.attribute.GroupPrincipal group()
    {
        sun.nio.fs.UnixFileAttributes r0, r1;
        java.lang.Throwable r2, $r7;
        java.nio.file.attribute.GroupPrincipal $r3, $r5, $r8;
        int $i0;
        sun.nio.fs.UnixUserPrincipals$Group $r6;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $r3 = r0.<sun.nio.fs.UnixFileAttributes: java.nio.file.attribute.GroupPrincipal group>;
        if $r3 != null goto label6;

        r1 = r0;
        entermonitor r0;

     label0:
        $r5 = r0.<sun.nio.fs.UnixFileAttributes: java.nio.file.attribute.GroupPrincipal group>;
        if $r5 != null goto label1;

        $i0 = r0.<sun.nio.fs.UnixFileAttributes: int st_gid>;
        $r6 = staticinvoke <sun.nio.fs.UnixUserPrincipals: sun.nio.fs.UnixUserPrincipals$Group fromGid(int)>($i0);
        r0.<sun.nio.fs.UnixFileAttributes: java.nio.file.attribute.GroupPrincipal group> = $r6;

     label1:
        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r7 := @caughtexception;

     label4:
        r2 = $r7;
        exitmonitor r1;

     label5:
        throw r2;

     label6:
        $r8 = r0.<sun.nio.fs.UnixFileAttributes: java.nio.file.attribute.GroupPrincipal group>;
        return $r8;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.Set permissions()
    {
        sun.nio.fs.UnixFileAttributes r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.util.HashSet r1, $r2;
        java.nio.file.attribute.PosixFilePermission $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $i1 = r0.<sun.nio.fs.UnixFileAttributes: int st_mode>;
        i0 = $i1 & 511;
        $r2 = new java.util.HashSet;
        specialinvoke $r2.<java.util.HashSet: void <init>()>();
        r1 = $r2;
        $i2 = i0 & 256;
        if $i2 <= 0 goto label0;

        $r3 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_READ>;
        virtualinvoke r1.<java.util.HashSet: boolean add(java.lang.Object)>($r3);

     label0:
        $i3 = i0 & 128;
        if $i3 <= 0 goto label1;

        $r4 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_WRITE>;
        virtualinvoke r1.<java.util.HashSet: boolean add(java.lang.Object)>($r4);

     label1:
        $i4 = i0 & 64;
        if $i4 <= 0 goto label2;

        $r5 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_EXECUTE>;
        virtualinvoke r1.<java.util.HashSet: boolean add(java.lang.Object)>($r5);

     label2:
        $i5 = i0 & 32;
        if $i5 <= 0 goto label3;

        $r6 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission GROUP_READ>;
        virtualinvoke r1.<java.util.HashSet: boolean add(java.lang.Object)>($r6);

     label3:
        $i6 = i0 & 16;
        if $i6 <= 0 goto label4;

        $r7 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission GROUP_WRITE>;
        virtualinvoke r1.<java.util.HashSet: boolean add(java.lang.Object)>($r7);

     label4:
        $i7 = i0 & 8;
        if $i7 <= 0 goto label5;

        $r8 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission GROUP_EXECUTE>;
        virtualinvoke r1.<java.util.HashSet: boolean add(java.lang.Object)>($r8);

     label5:
        $i8 = i0 & 4;
        if $i8 <= 0 goto label6;

        $r9 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OTHERS_READ>;
        virtualinvoke r1.<java.util.HashSet: boolean add(java.lang.Object)>($r9);

     label6:
        $i9 = i0 & 2;
        if $i9 <= 0 goto label7;

        $r10 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OTHERS_WRITE>;
        virtualinvoke r1.<java.util.HashSet: boolean add(java.lang.Object)>($r10);

     label7:
        $i10 = i0 & 1;
        if $i10 <= 0 goto label8;

        $r11 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OTHERS_EXECUTE>;
        virtualinvoke r1.<java.util.HashSet: boolean add(java.lang.Object)>($r11);

     label8:
        return r1;
    }

    java.nio.file.attribute.BasicFileAttributes asBasicFileAttributes()
    {
        sun.nio.fs.UnixFileAttributes r0;
        sun.nio.fs.UnixFileAttributes$UnixAsBasicFileAttributes $r1;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $r1 = staticinvoke <sun.nio.fs.UnixFileAttributes$UnixAsBasicFileAttributes: sun.nio.fs.UnixFileAttributes$UnixAsBasicFileAttributes wrap(sun.nio.fs.UnixFileAttributes)>(r0);
        return $r1;
    }

    static sun.nio.fs.UnixFileAttributes toUnixFileAttributes(java.nio.file.attribute.BasicFileAttributes)
    {
        java.nio.file.attribute.BasicFileAttributes r0;
        boolean $z0, $z1;
        sun.nio.fs.UnixFileAttributes $r1, $r3;
        sun.nio.fs.UnixFileAttributes$UnixAsBasicFileAttributes $r2;

        r0 := @parameter0: java.nio.file.attribute.BasicFileAttributes;
        $z0 = r0 instanceof sun.nio.fs.UnixFileAttributes;
        if $z0 == 0 goto label0;

        $r1 = (sun.nio.fs.UnixFileAttributes) r0;
        return $r1;

     label0:
        $z1 = r0 instanceof sun.nio.fs.UnixFileAttributes$UnixAsBasicFileAttributes;
        if $z1 == 0 goto label1;

        $r2 = (sun.nio.fs.UnixFileAttributes$UnixAsBasicFileAttributes) r0;
        $r3 = virtualinvoke $r2.<sun.nio.fs.UnixFileAttributes$UnixAsBasicFileAttributes: sun.nio.fs.UnixFileAttributes unwrap()>();
        return $r3;

     label1:
        return null;
    }

    public volatile java.lang.Object fileKey()
    {
        sun.nio.fs.UnixFileAttributes r0;
        sun.nio.fs.UnixFileKey $r1;

        r0 := @this: sun.nio.fs.UnixFileAttributes;
        $r1 = virtualinvoke r0.<sun.nio.fs.UnixFileAttributes: sun.nio.fs.UnixFileKey fileKey()>();
        return $r1;
    }
}
