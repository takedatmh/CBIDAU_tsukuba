public final class sun.security.util.KeyUtil extends java.lang.Object
{

    public void <init>()
    {
        sun.security.util.KeyUtil r0;

        r0 := @this: sun.security.util.KeyUtil;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static final int getKeySize(java.security.Key)
    {
        java.security.Key r0;
        int i0, $i1;
        sun.security.util.Length r1;
        java.lang.String r2, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.UnsupportedOperationException $r3, r4;
        javax.crypto.SecretKey r5;
        byte[] $r7, $r8;
        java.security.interfaces.RSAKey r9;
        java.math.BigInteger $r10, $r13, $r16, $r19;
        java.security.interfaces.ECKey r11;
        java.security.spec.ECParameterSpec $r12;
        java.security.interfaces.DSAKey r14;
        java.security.interfaces.DSAParams $r15;
        javax.crypto.interfaces.DHKey r17;
        javax.crypto.spec.DHParameterSpec $r18;

        r0 := @parameter0: java.security.Key;
        i0 = -1;
        $z0 = r0 instanceof sun.security.util.Length;
        if $z0 == 0 goto label4;

     label0:
        r1 = (sun.security.util.Length) r0;
        i0 = interfaceinvoke r1.<sun.security.util.Length: int length()>();

     label1:
        goto label3;

     label2:
        $r3 := @caughtexception;
        r4 = $r3;

     label3:
        if i0 < 0 goto label4;

        return i0;

     label4:
        $z1 = r0 instanceof javax.crypto.SecretKey;
        if $z1 == 0 goto label6;

        r5 = (javax.crypto.SecretKey) r0;
        r2 = interfaceinvoke r5.<javax.crypto.SecretKey: java.lang.String getFormat()>();
        $r6 = "RAW";
        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);
        if $z2 == 0 goto label5;

        $r7 = interfaceinvoke r5.<javax.crypto.SecretKey: byte[] getEncoded()>();
        if $r7 == null goto label5;

        $r8 = interfaceinvoke r5.<javax.crypto.SecretKey: byte[] getEncoded()>();
        $i1 = lengthof $r8;
        i0 = $i1 * 8;

     label5:
        goto label10;

     label6:
        $z3 = r0 instanceof java.security.interfaces.RSAKey;
        if $z3 == 0 goto label7;

        r9 = (java.security.interfaces.RSAKey) r0;
        $r10 = interfaceinvoke r9.<java.security.interfaces.RSAKey: java.math.BigInteger getModulus()>();
        i0 = virtualinvoke $r10.<java.math.BigInteger: int bitLength()>();
        goto label10;

     label7:
        $z4 = r0 instanceof java.security.interfaces.ECKey;
        if $z4 == 0 goto label8;

        r11 = (java.security.interfaces.ECKey) r0;
        $r12 = interfaceinvoke r11.<java.security.interfaces.ECKey: java.security.spec.ECParameterSpec getParams()>();
        $r13 = virtualinvoke $r12.<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()>();
        i0 = virtualinvoke $r13.<java.math.BigInteger: int bitLength()>();
        goto label10;

     label8:
        $z5 = r0 instanceof java.security.interfaces.DSAKey;
        if $z5 == 0 goto label9;

        r14 = (java.security.interfaces.DSAKey) r0;
        $r15 = interfaceinvoke r14.<java.security.interfaces.DSAKey: java.security.interfaces.DSAParams getParams()>();
        $r16 = interfaceinvoke $r15.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();
        i0 = virtualinvoke $r16.<java.math.BigInteger: int bitLength()>();
        goto label10;

     label9:
        $z6 = r0 instanceof javax.crypto.interfaces.DHKey;
        if $z6 == 0 goto label10;

        r17 = (javax.crypto.interfaces.DHKey) r0;
        $r18 = interfaceinvoke r17.<javax.crypto.interfaces.DHKey: javax.crypto.spec.DHParameterSpec getParams()>();
        $r19 = virtualinvoke $r18.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>();
        i0 = virtualinvoke $r19.<java.math.BigInteger: int bitLength()>();

     label10:
        return i0;

        catch java.lang.UnsupportedOperationException from label0 to label1 with label2;
    }

    public static final void validate(java.security.Key) throws java.security.InvalidKeyException
    {
        java.security.Key r0;
        java.lang.NullPointerException $r1;
        boolean $z0;
        javax.crypto.interfaces.DHPublicKey $r2;

        r0 := @parameter0: java.security.Key;
        if r0 != null goto label0;

        $r1 = new java.lang.NullPointerException;
        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("The key to be validated cannot be null");
        throw $r1;

     label0:
        $z0 = r0 instanceof javax.crypto.interfaces.DHPublicKey;
        if $z0 == 0 goto label1;

        $r2 = (javax.crypto.interfaces.DHPublicKey) r0;
        staticinvoke <sun.security.util.KeyUtil: void validateDHPublicKey(javax.crypto.interfaces.DHPublicKey)>($r2);

     label1:
        return;
    }

    public static final void validate(java.security.spec.KeySpec) throws java.security.InvalidKeyException
    {
        java.security.spec.KeySpec r0;
        java.lang.NullPointerException $r1;
        boolean $z0;
        javax.crypto.spec.DHPublicKeySpec $r2;

        r0 := @parameter0: java.security.spec.KeySpec;
        if r0 != null goto label0;

        $r1 = new java.lang.NullPointerException;
        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("The key spec to be validated cannot be null");
        throw $r1;

     label0:
        $z0 = r0 instanceof javax.crypto.spec.DHPublicKeySpec;
        if $z0 == 0 goto label1;

        $r2 = (javax.crypto.spec.DHPublicKeySpec) r0;
        staticinvoke <sun.security.util.KeyUtil: void validateDHPublicKey(javax.crypto.spec.DHPublicKeySpec)>($r2);

     label1:
        return;
    }

    public static final boolean isOracleJCEProvider(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;
        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("SunJCE");
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("SunPKCS11");
        if $z1 == 0 goto label1;

     label0:
        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static byte[] checkTlsPreMasterSecretKey(int, int, java.security.SecureRandom, byte[], boolean)
    {
        int i0, i1, i2, $i3, $i6;
        java.security.SecureRandom r0, $r3;
        byte[] r1, r2;
        boolean z0;
        byte $b4, $b7;
        short $s5, $s8;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r0 := @parameter2: java.security.SecureRandom;
        r1 := @parameter3: byte[];
        z0 := @parameter4: boolean;
        if r0 != null goto label0;

        $r3 = new java.security.SecureRandom;
        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();
        r0 = $r3;

     label0:
        r2 = newarray (byte)[48];
        virtualinvoke r0.<java.security.SecureRandom: void nextBytes(byte[])>(r2);
        if z0 != 0 goto label4;

        if r1 == null goto label4;

        $i3 = lengthof r1;
        if $i3 == 48 goto label1;

        return r2;

     label1:
        $b4 = r1[0];
        $s5 = $b4 & 255;
        $i6 = $s5 << 8;
        $b7 = r1[1];
        $s8 = $b7 & 255;
        i2 = $i6 | $s8;
        if i0 == i2 goto label3;

        if i0 > 769 goto label2;

        if i1 == i2 goto label3;

     label2:
        r1 = r2;

     label3:
        return r1;

     label4:
        return r2;
    }

    private static void validateDHPublicKey(javax.crypto.interfaces.DHPublicKey) throws java.security.InvalidKeyException
    {
        javax.crypto.interfaces.DHPublicKey r0;
        javax.crypto.spec.DHParameterSpec r1;
        java.math.BigInteger r2, r3, r4;

        r0 := @parameter0: javax.crypto.interfaces.DHPublicKey;
        r1 = interfaceinvoke r0.<javax.crypto.interfaces.DHPublicKey: javax.crypto.spec.DHParameterSpec getParams()>();
        r2 = virtualinvoke r1.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>();
        r3 = virtualinvoke r1.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()>();
        r4 = interfaceinvoke r0.<javax.crypto.interfaces.DHPublicKey: java.math.BigInteger getY()>();
        staticinvoke <sun.security.util.KeyUtil: void validateDHPublicKey(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>(r2, r3, r4);
        return;
    }

    private static void validateDHPublicKey(javax.crypto.spec.DHPublicKeySpec) throws java.security.InvalidKeyException
    {
        javax.crypto.spec.DHPublicKeySpec r0;
        java.math.BigInteger $r1, $r2, $r3;

        r0 := @parameter0: javax.crypto.spec.DHPublicKeySpec;
        $r1 = virtualinvoke r0.<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getP()>();
        $r2 = virtualinvoke r0.<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getG()>();
        $r3 = virtualinvoke r0.<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getY()>();
        staticinvoke <sun.security.util.KeyUtil: void validateDHPublicKey(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r1, $r2, $r3);
        return;
    }

    private static void validateDHPublicKey(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger) throws java.security.InvalidKeyException
    {
        java.math.BigInteger r0, r1, r2, r3, $r4, r5, r6, $r9;
        int $i0, $i1;
        java.security.InvalidKeyException $r7, $r8, $r10;
        boolean $z0;

        r0 := @parameter0: java.math.BigInteger;
        r1 := @parameter1: java.math.BigInteger;
        r2 := @parameter2: java.math.BigInteger;
        r3 = <java.math.BigInteger: java.math.BigInteger ONE>;
        $r4 = <java.math.BigInteger: java.math.BigInteger ONE>;
        r5 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r4);
        $i0 = virtualinvoke r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r3);
        if $i0 > 0 goto label0;

        $r7 = new java.security.InvalidKeyException;
        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Diffie-Hellman public key is too small");
        throw $r7;

     label0:
        $i1 = virtualinvoke r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r5);
        if $i1 < 0 goto label1;

        $r8 = new java.security.InvalidKeyException;
        specialinvoke $r8.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Diffie-Hellman public key is too large");
        throw $r8;

     label1:
        r6 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>(r2);
        $r9 = <java.math.BigInteger: java.math.BigInteger ZERO>;
        $z0 = virtualinvoke r6.<java.math.BigInteger: boolean equals(java.lang.Object)>($r9);
        if $z0 == 0 goto label2;

        $r10 = new java.security.InvalidKeyException;
        specialinvoke $r10.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Invalid Diffie-Hellman parameters");
        throw $r10;

     label2:
        return;
    }

    public static byte[] trimZeroes(byte[])
    {
        byte[] r0, r1;
        int i0, $i1, $i2, $i4, $i5, $i6;
        byte $b3;

        r0 := @parameter0: byte[];
        i0 = 0;

     label0:
        $i1 = lengthof r0;
        $i2 = $i1 - 1;
        if i0 >= $i2 goto label1;

        $b3 = r0[i0];
        if $b3 != 0 goto label1;

        i0 = i0 + 1;
        goto label0;

     label1:
        if i0 != 0 goto label2;

        return r0;

     label2:
        $i4 = lengthof r0;
        $i5 = $i4 - i0;
        r1 = newarray (byte)[$i5];
        $i6 = lengthof r1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r1, 0, $i6);
        return r1;
    }
}
