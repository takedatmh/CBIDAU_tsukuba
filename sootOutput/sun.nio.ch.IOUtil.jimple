class sun.nio.ch.IOUtil extends java.lang.Object
{
    static final int IOV_MAX;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        sun.nio.ch.IOUtil r0;

        r0 := @this: sun.nio.ch.IOUtil;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    static int write(java.io.FileDescriptor, java.nio.ByteBuffer, long, sun.nio.ch.NativeDispatcher) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        java.nio.ByteBuffer r1, r3;
        long l0;
        sun.nio.ch.NativeDispatcher r2;
        int i1, i2, i3, i4, i5, $i6, $i7, $i8;
        java.lang.Throwable r4, $r10;
        boolean $z0, $z1;
        java.lang.AssertionError $r5;

        r0 := @parameter0: java.io.FileDescriptor;
        r1 := @parameter1: java.nio.ByteBuffer;
        l0 := @parameter2: long;
        r2 := @parameter3: sun.nio.ch.NativeDispatcher;
        $z0 = r1 instanceof sun.nio.ch.DirectBuffer;
        if $z0 == 0 goto label0;

        $i6 = staticinvoke <sun.nio.ch.IOUtil: int writeFromNativeBuffer(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>(r0, r1, l0, r2);
        return $i6;

     label0:
        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();
        i2 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();
        $z1 = <sun.nio.ch.IOUtil: boolean $assertionsDisabled>;
        if $z1 != 0 goto label1;

        if i1 <= i2 goto label1;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label1:
        if i1 > i2 goto label2;

        $i7 = i2 - i1;
        goto label3;

     label2:
        $i7 = 0;

     label3:
        i3 = $i7;
        r3 = staticinvoke <sun.nio.ch.Util: java.nio.ByteBuffer getTemporaryDirectBuffer(int)>(i3);

     label4:
        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r1);
        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1);
        i4 = staticinvoke <sun.nio.ch.IOUtil: int writeFromNativeBuffer(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>(r0, r3, l0, r2);
        if i4 <= 0 goto label5;

        $i8 = i1 + i4;
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i8);

     label5:
        i5 = i4;

     label6:
        staticinvoke <sun.nio.ch.Util: void offerFirstTemporaryDirectBuffer(java.nio.ByteBuffer)>(r3);
        return i5;

     label7:
        $r10 := @caughtexception;

     label8:
        r4 = $r10;

     label9:
        staticinvoke <sun.nio.ch.Util: void offerFirstTemporaryDirectBuffer(java.nio.ByteBuffer)>(r3);
        throw r4;

        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private static int writeFromNativeBuffer(java.io.FileDescriptor, java.nio.ByteBuffer, long, sun.nio.ch.NativeDispatcher) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        java.nio.ByteBuffer r1;
        long l0, $l6, $l7, $l8, $l10, $l11, $l12;
        sun.nio.ch.NativeDispatcher r2;
        int i1, i2, i3, $i4, i9, $i13;
        boolean z0, $z1;
        java.lang.AssertionError $r3;
        byte $b5;
        sun.nio.ch.DirectBuffer $r4, $r5;

        r0 := @parameter0: java.io.FileDescriptor;
        r1 := @parameter1: java.nio.ByteBuffer;
        l0 := @parameter2: long;
        r2 := @parameter3: sun.nio.ch.NativeDispatcher;
        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();
        i2 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();
        $z1 = <sun.nio.ch.IOUtil: boolean $assertionsDisabled>;
        if $z1 != 0 goto label0;

        if i1 <= i2 goto label0;

        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label0:
        if i1 > i2 goto label1;

        $i4 = i2 - i1;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i3 = $i4;
        z0 = 0;
        if i3 != 0 goto label3;

        return 0;

     label3:
        $b5 = l0 cmp -1L;
        if $b5 == 0 goto label4;

        $r4 = (sun.nio.ch.DirectBuffer) r1;
        $l6 = interfaceinvoke $r4.<sun.nio.ch.DirectBuffer: long address()>();
        $l7 = (long) i1;
        $l8 = $l6 + $l7;
        i9 = virtualinvoke r2.<sun.nio.ch.NativeDispatcher: int pwrite(java.io.FileDescriptor,long,int,long)>(r0, $l8, i3, l0);
        goto label5;

     label4:
        $r5 = (sun.nio.ch.DirectBuffer) r1;
        $l10 = interfaceinvoke $r5.<sun.nio.ch.DirectBuffer: long address()>();
        $l11 = (long) i1;
        $l12 = $l10 + $l11;
        i9 = virtualinvoke r2.<sun.nio.ch.NativeDispatcher: int write(java.io.FileDescriptor,long,int)>(r0, $l12, i3);

     label5:
        if i9 <= 0 goto label6;

        $i13 = i1 + i9;
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i13);

     label6:
        return i9;
    }

    static long write(java.io.FileDescriptor, java.nio.ByteBuffer[], sun.nio.ch.NativeDispatcher) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        java.nio.ByteBuffer[] r1;
        sun.nio.ch.NativeDispatcher r2;
        int $i0;
        long $l1;

        r0 := @parameter0: java.io.FileDescriptor;
        r1 := @parameter1: java.nio.ByteBuffer[];
        r2 := @parameter2: sun.nio.ch.NativeDispatcher;
        $i0 = lengthof r1;
        $l1 = staticinvoke <sun.nio.ch.IOUtil: long write(java.io.FileDescriptor,java.nio.ByteBuffer[],int,int,sun.nio.ch.NativeDispatcher)>(r0, r1, 0, $i0, r2);
        return $l1;
    }

    static long write(java.io.FileDescriptor, java.nio.ByteBuffer[], int, int, sun.nio.ch.NativeDispatcher) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, $i12, $i13, i19, i23, $i27, $i28, i31;
        sun.nio.ch.NativeDispatcher r2;
        sun.nio.ch.IOVecWrapper r3;
        boolean z0, $z1, $z2;
        java.nio.ByteBuffer r4, r5, r6, r8, r14, r16, r17;
        java.lang.Throwable r7, $r18;
        java.lang.AssertionError $r9;
        sun.nio.ch.DirectBuffer $r13;
        long $l14, $l15, $l16, $l17, l18, $l20, l21, l22, $l25, $l29, l30;
        byte $b24, $b26;

        r0 := @parameter0: java.io.FileDescriptor;
        r1 := @parameter1: java.nio.ByteBuffer[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        r2 := @parameter4: sun.nio.ch.NativeDispatcher;
        r3 = staticinvoke <sun.nio.ch.IOVecWrapper: sun.nio.ch.IOVecWrapper get(int)>(i1);
        z0 = 0;
        i2 = 0;

     label0:
        i3 = i0 + i1;
        i4 = i0;

     label1:
        if i4 >= i3 goto label7;

        $i12 = <sun.nio.ch.IOUtil: int IOV_MAX>;
        if i2 >= $i12 goto label7;

        r4 = r1[i4];
        i5 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>();
        i6 = virtualinvoke r4.<java.nio.ByteBuffer: int limit()>();
        $z1 = <sun.nio.ch.IOUtil: boolean $assertionsDisabled>;
        if $z1 != 0 goto label2;

        if i5 <= i6 goto label2;

        $r9 = new java.lang.AssertionError;
        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();
        throw $r9;

     label2:
        if i5 > i6 goto label3;

        $i13 = i6 - i5;
        goto label4;

     label3:
        $i13 = 0;

     label4:
        i7 = $i13;
        if i7 <= 0 goto label6;

        virtualinvoke r3.<sun.nio.ch.IOVecWrapper: void setBuffer(int,java.nio.ByteBuffer,int,int)>(i2, r4, i5, i7);
        $z2 = r4 instanceof sun.nio.ch.DirectBuffer;
        if $z2 != 0 goto label5;

        r5 = staticinvoke <sun.nio.ch.Util: java.nio.ByteBuffer getTemporaryDirectBuffer(int)>(i7);
        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r4);
        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        virtualinvoke r3.<sun.nio.ch.IOVecWrapper: void setShadow(int,java.nio.ByteBuffer)>(i2, r5);
        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i5);
        r4 = r5;
        i5 = virtualinvoke r5.<java.nio.ByteBuffer: int position()>();

     label5:
        $r13 = (sun.nio.ch.DirectBuffer) r4;
        $l14 = interfaceinvoke $r13.<sun.nio.ch.DirectBuffer: long address()>();
        $l15 = (long) i5;
        $l16 = $l14 + $l15;
        virtualinvoke r3.<sun.nio.ch.IOVecWrapper: void putBase(int,long)>(i2, $l16);
        $l17 = (long) i7;
        virtualinvoke r3.<sun.nio.ch.IOVecWrapper: void putLen(int,long)>(i2, $l17);
        i2 = i2 + 1;

     label6:
        i4 = i4 + 1;
        goto label1;

     label7:
        if i2 != 0 goto label12;

        l18 = 0L;

     label8:
        if z0 != 0 goto label11;

        i19 = 0;

     label9:
        if i19 >= i2 goto label11;

        r14 = virtualinvoke r3.<sun.nio.ch.IOVecWrapper: java.nio.ByteBuffer getShadow(int)>(i19);
        if r14 == null goto label10;

        staticinvoke <sun.nio.ch.Util: void offerLastTemporaryDirectBuffer(java.nio.ByteBuffer)>(r14);

     label10:
        virtualinvoke r3.<sun.nio.ch.IOVecWrapper: void clearRefs(int)>(i19);
        i19 = i19 + 1;
        goto label9;

     label11:
        return l18;

     label12:
        $l20 = r3.<sun.nio.ch.IOVecWrapper: long address>;
        l21 = virtualinvoke r2.<sun.nio.ch.NativeDispatcher: long writev(java.io.FileDescriptor,long,int)>(r0, $l20, i2);
        l22 = l21;
        i23 = 0;

     label13:
        if i23 >= i2 goto label18;

        $b24 = l22 cmp 0L;
        if $b24 <= 0 goto label16;

        r6 = virtualinvoke r3.<sun.nio.ch.IOVecWrapper: java.nio.ByteBuffer getBuffer(int)>(i23);
        i8 = virtualinvoke r3.<sun.nio.ch.IOVecWrapper: int getPosition(int)>(i23);
        i9 = virtualinvoke r3.<sun.nio.ch.IOVecWrapper: int getRemaining(int)>(i23);
        $l25 = (long) i9;
        $b26 = l22 cmp $l25;
        if $b26 <= 0 goto label14;

        $i27 = i9;
        goto label15;

     label14:
        $i27 = (int) l22;

     label15:
        i10 = $i27;
        $i28 = i8 + i10;
        virtualinvoke r6.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i28);
        $l29 = (long) i10;
        l22 = l22 - $l29;

     label16:
        r16 = virtualinvoke r3.<sun.nio.ch.IOVecWrapper: java.nio.ByteBuffer getShadow(int)>(i23);
        if r16 == null goto label17;

        staticinvoke <sun.nio.ch.Util: void offerLastTemporaryDirectBuffer(java.nio.ByteBuffer)>(r16);

     label17:
        virtualinvoke r3.<sun.nio.ch.IOVecWrapper: void clearRefs(int)>(i23);
        i23 = i23 + 1;
        goto label13;

     label18:
        z0 = 1;
        l30 = l21;

     label19:
        if z0 != 0 goto label22;

        i31 = 0;

     label20:
        if i31 >= i2 goto label22;

        r17 = virtualinvoke r3.<sun.nio.ch.IOVecWrapper: java.nio.ByteBuffer getShadow(int)>(i31);
        if r17 == null goto label21;

        staticinvoke <sun.nio.ch.Util: void offerLastTemporaryDirectBuffer(java.nio.ByteBuffer)>(r17);

     label21:
        virtualinvoke r3.<sun.nio.ch.IOVecWrapper: void clearRefs(int)>(i31);
        i31 = i31 + 1;
        goto label20;

     label22:
        return l30;

     label23:
        $r18 := @caughtexception;

     label24:
        r7 = $r18;

     label25:
        if z0 != 0 goto label28;

        i11 = 0;

     label26:
        if i11 >= i2 goto label28;

        r8 = virtualinvoke r3.<sun.nio.ch.IOVecWrapper: java.nio.ByteBuffer getShadow(int)>(i11);
        if r8 == null goto label27;

        staticinvoke <sun.nio.ch.Util: void offerLastTemporaryDirectBuffer(java.nio.ByteBuffer)>(r8);

     label27:
        virtualinvoke r3.<sun.nio.ch.IOVecWrapper: void clearRefs(int)>(i11);
        i11 = i11 + 1;
        goto label26;

     label28:
        throw r7;

        catch java.lang.Throwable from label0 to label8 with label23;
        catch java.lang.Throwable from label12 to label19 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
    }

    static int read(java.io.FileDescriptor, java.nio.ByteBuffer, long, sun.nio.ch.NativeDispatcher) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        java.nio.ByteBuffer r1, r3;
        long l0;
        sun.nio.ch.NativeDispatcher r2;
        int i1, i2, $i3, $i4;
        java.lang.Throwable r4, $r8;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: java.io.FileDescriptor;
        r1 := @parameter1: java.nio.ByteBuffer;
        l0 := @parameter2: long;
        r2 := @parameter3: sun.nio.ch.NativeDispatcher;
        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isReadOnly()>();
        if $z0 == 0 goto label0;

        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Read-only buffer");
        throw $r5;

     label0:
        $z1 = r1 instanceof sun.nio.ch.DirectBuffer;
        if $z1 == 0 goto label1;

        $i3 = staticinvoke <sun.nio.ch.IOUtil: int readIntoNativeBuffer(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>(r0, r1, l0, r2);
        return $i3;

     label1:
        $i4 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();
        r3 = staticinvoke <sun.nio.ch.Util: java.nio.ByteBuffer getTemporaryDirectBuffer(int)>($i4);

     label2:
        i1 = staticinvoke <sun.nio.ch.IOUtil: int readIntoNativeBuffer(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>(r0, r3, l0, r2);
        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        if i1 <= 0 goto label3;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r3);

     label3:
        i2 = i1;

     label4:
        staticinvoke <sun.nio.ch.Util: void offerFirstTemporaryDirectBuffer(java.nio.ByteBuffer)>(r3);
        return i2;

     label5:
        $r8 := @caughtexception;

     label6:
        r4 = $r8;

     label7:
        staticinvoke <sun.nio.ch.Util: void offerFirstTemporaryDirectBuffer(java.nio.ByteBuffer)>(r3);
        throw r4;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private static int readIntoNativeBuffer(java.io.FileDescriptor, java.nio.ByteBuffer, long, sun.nio.ch.NativeDispatcher) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        java.nio.ByteBuffer r1;
        long l0, $l6, $l7, $l8, $l10, $l11, $l12;
        sun.nio.ch.NativeDispatcher r2;
        int i1, i2, i3, $i4, i9, $i13;
        boolean z0, $z1;
        java.lang.AssertionError $r3;
        byte $b5;
        sun.nio.ch.DirectBuffer $r4, $r5;

        r0 := @parameter0: java.io.FileDescriptor;
        r1 := @parameter1: java.nio.ByteBuffer;
        l0 := @parameter2: long;
        r2 := @parameter3: sun.nio.ch.NativeDispatcher;
        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();
        i2 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();
        $z1 = <sun.nio.ch.IOUtil: boolean $assertionsDisabled>;
        if $z1 != 0 goto label0;

        if i1 <= i2 goto label0;

        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label0:
        if i1 > i2 goto label1;

        $i4 = i2 - i1;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i3 = $i4;
        if i3 != 0 goto label3;

        return 0;

     label3:
        z0 = 0;
        $b5 = l0 cmp -1L;
        if $b5 == 0 goto label4;

        $r4 = (sun.nio.ch.DirectBuffer) r1;
        $l6 = interfaceinvoke $r4.<sun.nio.ch.DirectBuffer: long address()>();
        $l7 = (long) i1;
        $l8 = $l6 + $l7;
        i9 = virtualinvoke r2.<sun.nio.ch.NativeDispatcher: int pread(java.io.FileDescriptor,long,int,long)>(r0, $l8, i3, l0);
        goto label5;

     label4:
        $r5 = (sun.nio.ch.DirectBuffer) r1;
        $l10 = interfaceinvoke $r5.<sun.nio.ch.DirectBuffer: long address()>();
        $l11 = (long) i1;
        $l12 = $l10 + $l11;
        i9 = virtualinvoke r2.<sun.nio.ch.NativeDispatcher: int read(java.io.FileDescriptor,long,int)>(r0, $l12, i3);

     label5:
        if i9 <= 0 goto label6;

        $i13 = i1 + i9;
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i13);

     label6:
        return i9;
    }

    static long read(java.io.FileDescriptor, java.nio.ByteBuffer[], sun.nio.ch.NativeDispatcher) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        java.nio.ByteBuffer[] r1;
        sun.nio.ch.NativeDispatcher r2;
        int $i0;
        long $l1;

        r0 := @parameter0: java.io.FileDescriptor;
        r1 := @parameter1: java.nio.ByteBuffer[];
        r2 := @parameter2: sun.nio.ch.NativeDispatcher;
        $i0 = lengthof r1;
        $l1 = staticinvoke <sun.nio.ch.IOUtil: long read(java.io.FileDescriptor,java.nio.ByteBuffer[],int,int,sun.nio.ch.NativeDispatcher)>(r0, r1, 0, $i0, r2);
        return $l1;
    }

    static long read(java.io.FileDescriptor, java.nio.ByteBuffer[], int, int, sun.nio.ch.NativeDispatcher) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, $i12, $i13, i19, i23, $i27, $i28, $i29, $i30, i33;
        sun.nio.ch.NativeDispatcher r2;
        sun.nio.ch.IOVecWrapper r3;
        boolean z0, $z1, $z2, $z3;
        java.nio.ByteBuffer r4, r5, r6, r7, r9, r13, r17;
        java.lang.Throwable r8, $r18;
        java.lang.IllegalArgumentException $r10;
        java.lang.AssertionError $r11;
        sun.nio.ch.DirectBuffer $r12;
        long $l14, $l15, $l16, $l17, l18, $l20, l21, l22, $l25, $l31, l32;
        byte $b24, $b26;

        r0 := @parameter0: java.io.FileDescriptor;
        r1 := @parameter1: java.nio.ByteBuffer[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        r2 := @parameter4: sun.nio.ch.NativeDispatcher;
        r3 = staticinvoke <sun.nio.ch.IOVecWrapper: sun.nio.ch.IOVecWrapper get(int)>(i1);
        z0 = 0;
        i2 = 0;

     label0:
        i3 = i0 + i1;
        i4 = i0;

     label1:
        if i4 >= i3 goto label8;

        $i12 = <sun.nio.ch.IOUtil: int IOV_MAX>;
        if i2 >= $i12 goto label8;

        r4 = r1[i4];
        $z1 = virtualinvoke r4.<java.nio.ByteBuffer: boolean isReadOnly()>();
        if $z1 == 0 goto label2;

        $r10 = new java.lang.IllegalArgumentException;
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Read-only buffer");
        throw $r10;

     label2:
        i5 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>();
        i6 = virtualinvoke r4.<java.nio.ByteBuffer: int limit()>();
        $z2 = <sun.nio.ch.IOUtil: boolean $assertionsDisabled>;
        if $z2 != 0 goto label3;

        if i5 <= i6 goto label3;

        $r11 = new java.lang.AssertionError;
        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();
        throw $r11;

     label3:
        if i5 > i6 goto label4;

        $i13 = i6 - i5;
        goto label5;

     label4:
        $i13 = 0;

     label5:
        i7 = $i13;
        if i7 <= 0 goto label7;

        virtualinvoke r3.<sun.nio.ch.IOVecWrapper: void setBuffer(int,java.nio.ByteBuffer,int,int)>(i2, r4, i5, i7);
        $z3 = r4 instanceof sun.nio.ch.DirectBuffer;
        if $z3 != 0 goto label6;

        r5 = staticinvoke <sun.nio.ch.Util: java.nio.ByteBuffer getTemporaryDirectBuffer(int)>(i7);
        virtualinvoke r3.<sun.nio.ch.IOVecWrapper: void setShadow(int,java.nio.ByteBuffer)>(i2, r5);
        r4 = r5;
        i5 = virtualinvoke r5.<java.nio.ByteBuffer: int position()>();

     label6:
        $r12 = (sun.nio.ch.DirectBuffer) r4;
        $l14 = interfaceinvoke $r12.<sun.nio.ch.DirectBuffer: long address()>();
        $l15 = (long) i5;
        $l16 = $l14 + $l15;
        virtualinvoke r3.<sun.nio.ch.IOVecWrapper: void putBase(int,long)>(i2, $l16);
        $l17 = (long) i7;
        virtualinvoke r3.<sun.nio.ch.IOVecWrapper: void putLen(int,long)>(i2, $l17);
        i2 = i2 + 1;

     label7:
        i4 = i4 + 1;
        goto label1;

     label8:
        if i2 != 0 goto label13;

        l18 = 0L;

     label9:
        if z0 != 0 goto label12;

        i19 = 0;

     label10:
        if i19 >= i2 goto label12;

        r13 = virtualinvoke r3.<sun.nio.ch.IOVecWrapper: java.nio.ByteBuffer getShadow(int)>(i19);
        if r13 == null goto label11;

        staticinvoke <sun.nio.ch.Util: void offerLastTemporaryDirectBuffer(java.nio.ByteBuffer)>(r13);

     label11:
        virtualinvoke r3.<sun.nio.ch.IOVecWrapper: void clearRefs(int)>(i19);
        i19 = i19 + 1;
        goto label10;

     label12:
        return l18;

     label13:
        $l20 = r3.<sun.nio.ch.IOVecWrapper: long address>;
        l21 = virtualinvoke r2.<sun.nio.ch.NativeDispatcher: long readv(java.io.FileDescriptor,long,int)>(r0, $l20, i2);
        l22 = l21;
        i23 = 0;

     label14:
        if i23 >= i2 goto label21;

        r6 = virtualinvoke r3.<sun.nio.ch.IOVecWrapper: java.nio.ByteBuffer getShadow(int)>(i23);
        $b24 = l22 cmp 0L;
        if $b24 <= 0 goto label19;

        r7 = virtualinvoke r3.<sun.nio.ch.IOVecWrapper: java.nio.ByteBuffer getBuffer(int)>(i23);
        i8 = virtualinvoke r3.<sun.nio.ch.IOVecWrapper: int getRemaining(int)>(i23);
        $l25 = (long) i8;
        $b26 = l22 cmp $l25;
        if $b26 <= 0 goto label15;

        $i27 = i8;
        goto label16;

     label15:
        $i27 = (int) l22;

     label16:
        i9 = $i27;
        if r6 != null goto label17;

        i10 = virtualinvoke r3.<sun.nio.ch.IOVecWrapper: int getPosition(int)>(i23);
        $i28 = i10 + i9;
        virtualinvoke r7.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i28);
        goto label18;

     label17:
        $i29 = virtualinvoke r6.<java.nio.ByteBuffer: int position()>();
        $i30 = $i29 + i9;
        virtualinvoke r6.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i30);
        virtualinvoke r7.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r6);

     label18:
        $l31 = (long) i9;
        l22 = l22 - $l31;

     label19:
        if r6 == null goto label20;

        staticinvoke <sun.nio.ch.Util: void offerLastTemporaryDirectBuffer(java.nio.ByteBuffer)>(r6);

     label20:
        virtualinvoke r3.<sun.nio.ch.IOVecWrapper: void clearRefs(int)>(i23);
        i23 = i23 + 1;
        goto label14;

     label21:
        z0 = 1;
        l32 = l21;

     label22:
        if z0 != 0 goto label25;

        i33 = 0;

     label23:
        if i33 >= i2 goto label25;

        r17 = virtualinvoke r3.<sun.nio.ch.IOVecWrapper: java.nio.ByteBuffer getShadow(int)>(i33);
        if r17 == null goto label24;

        staticinvoke <sun.nio.ch.Util: void offerLastTemporaryDirectBuffer(java.nio.ByteBuffer)>(r17);

     label24:
        virtualinvoke r3.<sun.nio.ch.IOVecWrapper: void clearRefs(int)>(i33);
        i33 = i33 + 1;
        goto label23;

     label25:
        return l32;

     label26:
        $r18 := @caughtexception;

     label27:
        r8 = $r18;

     label28:
        if z0 != 0 goto label31;

        i11 = 0;

     label29:
        if i11 >= i2 goto label31;

        r9 = virtualinvoke r3.<sun.nio.ch.IOVecWrapper: java.nio.ByteBuffer getShadow(int)>(i11);
        if r9 == null goto label30;

        staticinvoke <sun.nio.ch.Util: void offerLastTemporaryDirectBuffer(java.nio.ByteBuffer)>(r9);

     label30:
        virtualinvoke r3.<sun.nio.ch.IOVecWrapper: void clearRefs(int)>(i11);
        i11 = i11 + 1;
        goto label29;

     label31:
        throw r8;

        catch java.lang.Throwable from label0 to label9 with label26;
        catch java.lang.Throwable from label13 to label22 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
    }

    static java.io.FileDescriptor newFD(int)
    {
        int i0;
        java.io.FileDescriptor $r0, r1;

        i0 := @parameter0: int;
        $r0 = new java.io.FileDescriptor;
        specialinvoke $r0.<java.io.FileDescriptor: void <init>()>();
        r1 = $r0;
        staticinvoke <sun.nio.ch.IOUtil: void setfdVal(java.io.FileDescriptor,int)>(r1, i0);
        return r1;
    }

    static native boolean randomBytes(byte[]);

    static native long makePipe(boolean);

    static native boolean drain(int) throws java.io.IOException;

    static native void configureBlocking(java.io.FileDescriptor, boolean) throws java.io.IOException;

    static native int fdVal(java.io.FileDescriptor);

    static native void setfdVal(java.io.FileDescriptor, int);

    static native int iovMax();

    static native int fdLimit();

    static native void initIDs();

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        int $i0;

        $r0 = class "sun/nio/ch/IOUtil";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.ch.IOUtil: boolean $assertionsDisabled> = $z1;
        staticinvoke <sun.nio.ch.Util: void load()>();
        $i0 = staticinvoke <sun.nio.ch.IOUtil: int iovMax()>();
        <sun.nio.ch.IOUtil: int IOV_MAX> = $i0;
        return;
    }
}
