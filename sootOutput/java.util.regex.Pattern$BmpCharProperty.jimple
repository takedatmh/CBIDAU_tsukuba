abstract class java.util.regex.Pattern$BmpCharProperty extends java.util.regex.Pattern$CharProperty
{

    private void <init>()
    {
        java.util.regex.Pattern$BmpCharProperty r0;

        r0 := @this: java.util.regex.Pattern$BmpCharProperty;
        specialinvoke r0.<java.util.regex.Pattern$CharProperty: void <init>(java.util.regex.Pattern$1)>(null);
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$BmpCharProperty r0;
        java.util.regex.Matcher r1;
        int i0, $i1, $i3;
        java.lang.CharSequence r2;
        char $c2;
        boolean $z0, $z1, $z2;
        java.util.regex.Pattern$Node $r3;

        r0 := @this: java.util.regex.Pattern$BmpCharProperty;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $i1 = r1.<java.util.regex.Matcher: int 'to'>;
        if i0 >= $i1 goto label2;

        $c2 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i0);
        $z0 = virtualinvoke r0.<java.util.regex.Pattern$BmpCharProperty: boolean isSatisfiedBy(int)>($c2);
        if $z0 == 0 goto label0;

        $r3 = r0.<java.util.regex.Pattern$BmpCharProperty: java.util.regex.Pattern$Node next>;
        $i3 = i0 + 1;
        $z1 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, $i3, r2);
        if $z1 == 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;

     label2:
        r1.<java.util.regex.Matcher: boolean hitEnd> = 1;
        return 0;
    }

    void <init>(java.util.regex.Pattern$1)
    {
        java.util.regex.Pattern$BmpCharProperty r0;
        java.util.regex.Pattern$1 r1;

        r0 := @this: java.util.regex.Pattern$BmpCharProperty;
        r1 := @parameter0: java.util.regex.Pattern$1;
        specialinvoke r0.<java.util.regex.Pattern$BmpCharProperty: void <init>()>();
        return;
    }
}
