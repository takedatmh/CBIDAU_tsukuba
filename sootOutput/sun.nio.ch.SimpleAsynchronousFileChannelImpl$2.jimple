class sun.nio.ch.SimpleAsynchronousFileChannelImpl$2 extends java.lang.Object implements java.lang.Runnable
{
    final java.nio.ByteBuffer val$dst;
    final long val$position;
    final java.nio.channels.CompletionHandler val$handler;
    final sun.nio.ch.PendingFuture val$result;
    final java.lang.Object val$attachment;
    final sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0;

    void <init>(sun.nio.ch.SimpleAsynchronousFileChannelImpl, java.nio.ByteBuffer, long, java.nio.channels.CompletionHandler, sun.nio.ch.PendingFuture, java.lang.Object)
    {
        sun.nio.ch.SimpleAsynchronousFileChannelImpl$2 r0;
        sun.nio.ch.SimpleAsynchronousFileChannelImpl r1;
        java.nio.ByteBuffer r2;
        long l0;
        java.nio.channels.CompletionHandler r3;
        sun.nio.ch.PendingFuture r4;
        java.lang.Object r5;

        r0 := @this: sun.nio.ch.SimpleAsynchronousFileChannelImpl$2;
        r1 := @parameter0: sun.nio.ch.SimpleAsynchronousFileChannelImpl;
        r2 := @parameter1: java.nio.ByteBuffer;
        l0 := @parameter2: long;
        r3 := @parameter3: java.nio.channels.CompletionHandler;
        r4 := @parameter4: sun.nio.ch.PendingFuture;
        r5 := @parameter5: java.lang.Object;
        r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0> = r1;
        r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: java.nio.ByteBuffer val$dst> = r2;
        r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: long val$position> = l0;
        r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: java.nio.channels.CompletionHandler val$handler> = r3;
        r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: sun.nio.ch.PendingFuture val$result> = r4;
        r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: java.lang.Object val$attachment> = r5;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public void run()
    {
        sun.nio.ch.SimpleAsynchronousFileChannelImpl$2 r0;
        int i0, i1;
        java.io.IOException r1, r3, $r17;
        sun.nio.ch.FileDispatcher $r2;
        java.lang.Throwable r4, $r23;
        sun.nio.ch.SimpleAsynchronousFileChannelImpl $r5, $r7, $r8, $r11, $r12, $r14, $r15, $r18, $r20, $r21, $r24, $r25;
        sun.nio.ch.NativeThreadSet $r6, $r16, $r22, $r26;
        java.io.FileDescriptor $r9;
        java.nio.ByteBuffer $r10;
        long $l2;
        boolean $z0, $z1, $z2;
        java.nio.channels.AsynchronousCloseException $r13, $r19;
        java.nio.channels.CompletionHandler $r27, $r30;
        sun.nio.ch.PendingFuture $r28;
        java.lang.Integer $r29, $r32;
        java.lang.Object $r31;

        r0 := @this: sun.nio.ch.SimpleAsynchronousFileChannelImpl$2;
        i0 = 0;
        r1 = null;
        $r5 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        $r6 = staticinvoke <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet access$000(sun.nio.ch.SimpleAsynchronousFileChannelImpl)>($r5);
        i1 = virtualinvoke $r6.<sun.nio.ch.NativeThreadSet: int add()>();

     label0:
        $r7 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        virtualinvoke $r7.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void begin()>();

     label1:
        $r8 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        $r9 = $r8.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.io.FileDescriptor fdObj>;
        $r10 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: java.nio.ByteBuffer val$dst>;
        $l2 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: long val$position>;
        $r2 = staticinvoke <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.FileDispatcher access$100()>();
        i0 = staticinvoke <sun.nio.ch.IOUtil: int read(java.io.FileDescriptor,java.nio.ByteBuffer,long,sun.nio.ch.NativeDispatcher)>($r9, $r10, $l2, $r2);
        if i0 != -3 goto label2;

        $r11 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        $z0 = virtualinvoke $r11.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label1;

     label2:
        if i0 >= 0 goto label3;

        $r12 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        $z1 = virtualinvoke $r12.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label3;

        $r13 = new java.nio.channels.AsynchronousCloseException;
        specialinvoke $r13.<java.nio.channels.AsynchronousCloseException: void <init>()>();
        throw $r13;

     label3:
        $r14 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        virtualinvoke $r14.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void end()>();
        $r15 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        $r16 = staticinvoke <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet access$000(sun.nio.ch.SimpleAsynchronousFileChannelImpl)>($r15);
        virtualinvoke $r16.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        goto label11;

     label4:
        $r17 := @caughtexception;

     label5:
        r3 = $r17;
        $r18 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        $z2 = virtualinvoke $r18.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean isOpen()>();
        if $z2 != 0 goto label6;

        $r19 = new java.nio.channels.AsynchronousCloseException;
        specialinvoke $r19.<java.nio.channels.AsynchronousCloseException: void <init>()>();
        r3 = $r19;

     label6:
        r1 = r3;

     label7:
        $r20 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        virtualinvoke $r20.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void end()>();
        $r21 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        $r22 = staticinvoke <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet access$000(sun.nio.ch.SimpleAsynchronousFileChannelImpl)>($r21);
        virtualinvoke $r22.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        goto label11;

     label8:
        $r23 := @caughtexception;

     label9:
        r4 = $r23;

     label10:
        $r24 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        virtualinvoke $r24.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void end()>();
        $r25 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        $r26 = staticinvoke <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet access$000(sun.nio.ch.SimpleAsynchronousFileChannelImpl)>($r25);
        virtualinvoke $r26.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        throw r4;

     label11:
        $r27 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: java.nio.channels.CompletionHandler val$handler>;
        if $r27 != null goto label12;

        $r28 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: sun.nio.ch.PendingFuture val$result>;
        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        virtualinvoke $r28.<sun.nio.ch.PendingFuture: void setResult(java.lang.Object,java.lang.Throwable)>($r29, r1);
        goto label13;

     label12:
        $r30 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: java.nio.channels.CompletionHandler val$handler>;
        $r31 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: java.lang.Object val$attachment>;
        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        staticinvoke <sun.nio.ch.Invoker: void invokeUnchecked(java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>($r30, $r31, $r32, r1);

     label13:
        return;

        catch java.io.IOException from label0 to label3 with label4;
        catch java.lang.Throwable from label0 to label3 with label8;
        catch java.lang.Throwable from label5 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }
}
