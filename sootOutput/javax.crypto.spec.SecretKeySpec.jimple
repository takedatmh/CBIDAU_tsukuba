public class javax.crypto.spec.SecretKeySpec extends java.lang.Object implements java.security.spec.KeySpec, javax.crypto.SecretKey
{
    private static final long serialVersionUID;
    private byte[] key;
    private java.lang.String algorithm;

    public void <init>(byte[], java.lang.String)
    {
        javax.crypto.spec.SecretKeySpec r0;
        byte[] r1, $r6, $r7;
        java.lang.String r2;
        java.lang.IllegalArgumentException $r3, $r4;
        int $i0;
        java.lang.Object $r5;

        r0 := @this: javax.crypto.spec.SecretKeySpec;
        r1 := @parameter0: byte[];
        r2 := @parameter1: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r1 == null goto label0;

        if r2 != null goto label1;

     label0:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Missing argument");
        throw $r3;

     label1:
        $i0 = lengthof r1;
        if $i0 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty key");
        throw $r4;

     label2:
        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();
        $r6 = (byte[]) $r5;
        $r7 = (byte[]) $r6;
        r0.<javax.crypto.spec.SecretKeySpec: byte[] key> = $r7;
        r0.<javax.crypto.spec.SecretKeySpec: java.lang.String algorithm> = r2;
        return;
    }

    public void <init>(byte[], int, int, java.lang.String)
    {
        javax.crypto.spec.SecretKeySpec r0;
        byte[] r1, $r7, $r8;
        int i0, i1, $i2, $i3, $i4;
        java.lang.String r2;
        java.lang.IllegalArgumentException $r3, $r4, $r5;
        java.lang.ArrayIndexOutOfBoundsException $r6;

        r0 := @this: javax.crypto.spec.SecretKeySpec;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r1 == null goto label0;

        if r2 != null goto label1;

     label0:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Missing argument");
        throw $r3;

     label1:
        $i2 = lengthof r1;
        if $i2 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty key");
        throw $r4;

     label2:
        $i3 = lengthof r1;
        $i4 = $i3 - i0;
        if $i4 >= i1 goto label3;

        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid offset/length combination");
        throw $r5;

     label3:
        if i1 >= 0 goto label4;

        $r6 = new java.lang.ArrayIndexOutOfBoundsException;
        specialinvoke $r6.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("len is negative");
        throw $r6;

     label4:
        $r7 = newarray (byte)[i1];
        r0.<javax.crypto.spec.SecretKeySpec: byte[] key> = $r7;
        $r8 = r0.<javax.crypto.spec.SecretKeySpec: byte[] key>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r8, 0, i1);
        r0.<javax.crypto.spec.SecretKeySpec: java.lang.String algorithm> = r2;
        return;
    }

    public java.lang.String getAlgorithm()
    {
        javax.crypto.spec.SecretKeySpec r0;
        java.lang.String $r1;

        r0 := @this: javax.crypto.spec.SecretKeySpec;
        $r1 = r0.<javax.crypto.spec.SecretKeySpec: java.lang.String algorithm>;
        return $r1;
    }

    public java.lang.String getFormat()
    {
        javax.crypto.spec.SecretKeySpec r0;

        r0 := @this: javax.crypto.spec.SecretKeySpec;
        return "RAW";
    }

    public byte[] getEncoded()
    {
        javax.crypto.spec.SecretKeySpec r0;
        byte[] $r1, $r3, $r4;
        java.lang.Object $r2;

        r0 := @this: javax.crypto.spec.SecretKeySpec;
        $r1 = r0.<javax.crypto.spec.SecretKeySpec: byte[] key>;
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (byte[]) $r2;
        $r4 = (byte[]) $r3;
        return $r4;
    }

    public int hashCode()
    {
        javax.crypto.spec.SecretKeySpec r0;
        int i0, i1, $i2, $i4, $i5, $i6, i7, $i8, $i9, i10;
        byte[] $r1, $r2;
        byte $b3;
        java.lang.String $r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @this: javax.crypto.spec.SecretKeySpec;
        i0 = 0;
        i1 = 1;

     label0:
        $r1 = r0.<javax.crypto.spec.SecretKeySpec: byte[] key>;
        $i2 = lengthof $r1;
        if i1 >= $i2 goto label1;

        $r2 = r0.<javax.crypto.spec.SecretKeySpec: byte[] key>;
        $b3 = $r2[i1];
        $i4 = $b3 * i1;
        i0 = i0 + $i4;
        i1 = i1 + 1;
        goto label0;

     label1:
        $r3 = r0.<javax.crypto.spec.SecretKeySpec: java.lang.String algorithm>;
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("TripleDES");
        if $z0 == 0 goto label2;

        $r4 = "desede";
        $i5 = virtualinvoke $r4.<java.lang.String: int hashCode()>();
        $i6 = i0 ^ $i5;
        i7 = $i6;
        return $i6;

     label2:
        $r5 = r0.<javax.crypto.spec.SecretKeySpec: java.lang.String algorithm>;
        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();
        $i8 = virtualinvoke $r6.<java.lang.String: int hashCode()>();
        $i9 = i0 ^ $i8;
        i10 = $i9;
        return $i9;
    }

    public boolean equals(java.lang.Object)
    {
        javax.crypto.spec.SecretKeySpec r0;
        java.lang.Object r1;
        java.lang.String r2, $r5, $r6, $r7;
        byte[] r3, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        javax.crypto.SecretKey $r4, $r8;

        r0 := @this: javax.crypto.spec.SecretKeySpec;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof javax.crypto.SecretKey;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = (javax.crypto.SecretKey) r1;
        r2 = interfaceinvoke $r4.<javax.crypto.SecretKey: java.lang.String getAlgorithm()>();
        $r5 = r0.<javax.crypto.spec.SecretKeySpec: java.lang.String algorithm>;
        $z1 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);
        if $z1 != 0 goto label4;

        $z2 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("DESede");
        if $z2 == 0 goto label2;

        $r6 = r0.<javax.crypto.spec.SecretKeySpec: java.lang.String algorithm>;
        $z3 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("TripleDES");
        if $z3 != 0 goto label4;

     label2:
        $z4 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("TripleDES");
        if $z4 == 0 goto label3;

        $r7 = r0.<javax.crypto.spec.SecretKeySpec: java.lang.String algorithm>;
        $z5 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("DESede");
        if $z5 != 0 goto label4;

     label3:
        return 0;

     label4:
        $r8 = (javax.crypto.SecretKey) r1;
        r3 = interfaceinvoke $r8.<javax.crypto.SecretKey: byte[] getEncoded()>();
        $r9 = r0.<javax.crypto.spec.SecretKeySpec: byte[] key>;
        $z6 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r9, r3);
        return $z6;
    }
}
