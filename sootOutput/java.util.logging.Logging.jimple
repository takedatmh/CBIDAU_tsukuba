class java.util.logging.Logging extends java.lang.Object implements java.util.logging.LoggingMXBean
{
    private static java.util.logging.LogManager logManager;
    private static java.lang.String EMPTY_STRING;

    void <init>()
    {
        java.util.logging.Logging r0;

        r0 := @this: java.util.logging.Logging;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public java.util.List getLoggerNames()
    {
        java.util.logging.Logging r0;
        java.util.logging.LogManager $r1;
        java.util.Enumeration r2;
        java.util.ArrayList r3, $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.String $r6;

        r0 := @this: java.util.logging.Logging;
        $r1 = <java.util.logging.Logging: java.util.logging.LogManager logManager>;
        r2 = virtualinvoke $r1.<java.util.logging.LogManager: java.util.Enumeration getLoggerNames()>();
        $r4 = new java.util.ArrayList;
        specialinvoke $r4.<java.util.ArrayList: void <init>()>();
        r3 = $r4;

     label0:
        $z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();
        $r6 = (java.lang.String) $r5;
        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);
        goto label0;

     label1:
        return r3;
    }

    public java.lang.String getLoggerLevel(java.lang.String)
    {
        java.util.logging.Logging r0;
        java.lang.String r1, $r5, $r6;
        java.util.logging.LogManager $r2;
        java.util.logging.Logger r3;
        java.util.logging.Level r4;

        r0 := @this: java.util.logging.Logging;
        r1 := @parameter0: java.lang.String;
        $r2 = <java.util.logging.Logging: java.util.logging.LogManager logManager>;
        r3 = virtualinvoke $r2.<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>(r1);
        if r3 != null goto label0;

        return null;

     label0:
        r4 = virtualinvoke r3.<java.util.logging.Logger: java.util.logging.Level getLevel()>();
        if r4 != null goto label1;

        $r5 = <java.util.logging.Logging: java.lang.String EMPTY_STRING>;
        return $r5;

     label1:
        $r6 = virtualinvoke r4.<java.util.logging.Level: java.lang.String getLevelName()>();
        return $r6;
    }

    public void setLoggerLevel(java.lang.String, java.lang.String)
    {
        java.util.logging.Logging r0;
        java.lang.String r1, r2, $r12, $r18;
        java.util.logging.Logger r3;
        java.util.logging.Level r4;
        java.lang.NullPointerException $r5;
        java.util.logging.LogManager $r6;
        java.lang.IllegalArgumentException $r7, $r13;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r17;

        r0 := @this: java.util.logging.Logging;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        if r1 != null goto label0;

        $r5 = new java.lang.NullPointerException;
        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("loggerName is null");
        throw $r5;

     label0:
        $r6 = <java.util.logging.Logging: java.util.logging.LogManager logManager>;
        r3 = virtualinvoke $r6.<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>(r1);
        if r3 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Logger ");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("does not exist");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);
        throw $r7;

     label1:
        r4 = null;
        if r2 == null goto label2;

        r4 = staticinvoke <java.util.logging.Level: java.util.logging.Level findLevel(java.lang.String)>(r2);
        if r4 != null goto label2;

        $r13 = new java.lang.IllegalArgumentException;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown level \"");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);
        throw $r13;

     label2:
        virtualinvoke r3.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>(r4);
        return;
    }

    public java.lang.String getParentLoggerName(java.lang.String)
    {
        java.util.logging.Logging r0;
        java.lang.String r1, $r5, $r6;
        java.util.logging.LogManager $r2;
        java.util.logging.Logger r3, r4;

        r0 := @this: java.util.logging.Logging;
        r1 := @parameter0: java.lang.String;
        $r2 = <java.util.logging.Logging: java.util.logging.LogManager logManager>;
        r3 = virtualinvoke $r2.<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>(r1);
        if r3 != null goto label0;

        return null;

     label0:
        r4 = virtualinvoke r3.<java.util.logging.Logger: java.util.logging.Logger getParent()>();
        if r4 != null goto label1;

        $r5 = <java.util.logging.Logging: java.lang.String EMPTY_STRING>;
        return $r5;

     label1:
        $r6 = virtualinvoke r4.<java.util.logging.Logger: java.lang.String getName()>();
        return $r6;
    }

    static void <clinit>()
    {
        java.util.logging.LogManager $r0;

        $r0 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();
        <java.util.logging.Logging: java.util.logging.LogManager logManager> = $r0;
        <java.util.logging.Logging: java.lang.String EMPTY_STRING> = "";
        return;
    }
}
