public class java.lang.Runtime extends java.lang.Object
{
    private static java.lang.Runtime currentRuntime;

    public static java.lang.Runtime getRuntime()
    {
        java.lang.Runtime $r0;

        $r0 = <java.lang.Runtime: java.lang.Runtime currentRuntime>;
        return $r0;
    }

    private void <init>()
    {
        java.lang.Runtime r0;

        r0 := @this: java.lang.Runtime;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public void exit(int)
    {
        java.lang.Runtime r0;
        int i0;
        java.lang.SecurityManager r1;

        r0 := @this: java.lang.Runtime;
        i0 := @parameter0: int;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        virtualinvoke r1.<java.lang.SecurityManager: void checkExit(int)>(i0);

     label0:
        staticinvoke <java.lang.Shutdown: void exit(int)>(i0);
        return;
    }

    public void addShutdownHook(java.lang.Thread)
    {
        java.lang.Runtime r0;
        java.lang.Thread r1;
        java.lang.SecurityManager r2;
        java.lang.RuntimePermission $r3;

        r0 := @this: java.lang.Runtime;
        r1 := @parameter0: java.lang.Thread;
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label0;

        $r3 = new java.lang.RuntimePermission;
        specialinvoke $r3.<java.lang.RuntimePermission: void <init>(java.lang.String)>("shutdownHooks");
        virtualinvoke r2.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r3);

     label0:
        staticinvoke <java.lang.ApplicationShutdownHooks: void add(java.lang.Thread)>(r1);
        return;
    }

    public boolean removeShutdownHook(java.lang.Thread)
    {
        java.lang.Runtime r0;
        java.lang.Thread r1;
        java.lang.SecurityManager r2;
        java.lang.RuntimePermission $r3;
        boolean $z0;

        r0 := @this: java.lang.Runtime;
        r1 := @parameter0: java.lang.Thread;
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label0;

        $r3 = new java.lang.RuntimePermission;
        specialinvoke $r3.<java.lang.RuntimePermission: void <init>(java.lang.String)>("shutdownHooks");
        virtualinvoke r2.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r3);

     label0:
        $z0 = staticinvoke <java.lang.ApplicationShutdownHooks: boolean remove(java.lang.Thread)>(r1);
        return $z0;
    }

    public void halt(int)
    {
        java.lang.Runtime r0;
        int i0;
        java.lang.SecurityManager r1;

        r0 := @this: java.lang.Runtime;
        i0 := @parameter0: int;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        virtualinvoke r1.<java.lang.SecurityManager: void checkExit(int)>(i0);

     label0:
        staticinvoke <java.lang.Shutdown: void halt(int)>(i0);
        return;
    }

    public static void runFinalizersOnExit(boolean)
    {
        boolean z0;
        java.lang.SecurityManager r0;
        java.lang.SecurityException r1, $r2, $r3;

        z0 := @parameter0: boolean;
        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r0 == null goto label3;

     label0:
        virtualinvoke r0.<java.lang.SecurityManager: void checkExit(int)>(0);

     label1:
        goto label3;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;
        $r3 = new java.lang.SecurityException;
        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("runFinalizersOnExit");
        throw $r3;

     label3:
        staticinvoke <java.lang.Shutdown: void setRunFinalizersOnExit(boolean)>(z0);
        return;

        catch java.lang.SecurityException from label0 to label1 with label2;
    }

    public java.lang.Process exec(java.lang.String) throws java.io.IOException
    {
        java.lang.Runtime r0;
        java.lang.String r1;
        java.lang.Process $r2;

        r0 := @this: java.lang.Runtime;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)>(r1, null, null);
        return $r2;
    }

    public java.lang.Process exec(java.lang.String, java.lang.String[]) throws java.io.IOException
    {
        java.lang.Runtime r0;
        java.lang.String r1;
        java.lang.String[] r2;
        java.lang.Process $r3;

        r0 := @this: java.lang.Runtime;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String[];
        $r3 = virtualinvoke r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)>(r1, r2, null);
        return $r3;
    }

    public java.lang.Process exec(java.lang.String, java.lang.String[], java.io.File) throws java.io.IOException
    {
        java.lang.Runtime r0;
        java.lang.String r1, $r8;
        java.lang.String[] r2, r5;
        java.io.File r3;
        java.util.StringTokenizer r4, $r7;
        int i0, $i1, $i2;
        java.lang.IllegalArgumentException $r6;
        boolean $z0;
        java.lang.Process $r9;

        r0 := @this: java.lang.Runtime;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String[];
        r3 := @parameter2: java.io.File;
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i1 != 0 goto label0;

        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty command");
        throw $r6;

     label0:
        $r7 = new java.util.StringTokenizer;
        specialinvoke $r7.<java.util.StringTokenizer: void <init>(java.lang.String)>(r1);
        r4 = $r7;
        $i2 = virtualinvoke r4.<java.util.StringTokenizer: int countTokens()>();
        r5 = newarray (java.lang.String)[$i2];
        i0 = 0;

     label1:
        $z0 = virtualinvoke r4.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r4.<java.util.StringTokenizer: java.lang.String nextToken()>();
        r5[i0] = $r8;
        i0 = i0 + 1;
        goto label1;

     label2:
        $r9 = virtualinvoke r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)>(r5, r2, r3);
        return $r9;
    }

    public java.lang.Process exec(java.lang.String[]) throws java.io.IOException
    {
        java.lang.Runtime r0;
        java.lang.String[] r1;
        java.lang.Process $r2;

        r0 := @this: java.lang.Runtime;
        r1 := @parameter0: java.lang.String[];
        $r2 = virtualinvoke r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)>(r1, null, null);
        return $r2;
    }

    public java.lang.Process exec(java.lang.String[], java.lang.String[]) throws java.io.IOException
    {
        java.lang.Runtime r0;
        java.lang.String[] r1, r2;
        java.lang.Process $r3;

        r0 := @this: java.lang.Runtime;
        r1 := @parameter0: java.lang.String[];
        r2 := @parameter1: java.lang.String[];
        $r3 = virtualinvoke r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)>(r1, r2, null);
        return $r3;
    }

    public java.lang.Process exec(java.lang.String[], java.lang.String[], java.io.File) throws java.io.IOException
    {
        java.lang.Runtime r0;
        java.lang.String[] r1, r2;
        java.io.File r3;
        java.lang.ProcessBuilder $r4, $r5, $r6;
        java.lang.Process $r7;

        r0 := @this: java.lang.Runtime;
        r1 := @parameter0: java.lang.String[];
        r2 := @parameter1: java.lang.String[];
        r3 := @parameter2: java.io.File;
        $r4 = new java.lang.ProcessBuilder;
        specialinvoke $r4.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(r1);
        $r5 = virtualinvoke $r4.<java.lang.ProcessBuilder: java.lang.ProcessBuilder environment(java.lang.String[])>(r2);
        $r6 = virtualinvoke $r5.<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>(r3);
        $r7 = virtualinvoke $r6.<java.lang.ProcessBuilder: java.lang.Process start()>();
        return $r7;
    }

    public native int availableProcessors();

    public native long freeMemory();

    public native long totalMemory();

    public native long maxMemory();

    public native void gc();

    private static native void runFinalization0();

    public void runFinalization()
    {
        java.lang.Runtime r0;

        r0 := @this: java.lang.Runtime;
        staticinvoke <java.lang.Runtime: void runFinalization0()>();
        return;
    }

    public native void traceInstructions(boolean);

    public native void traceMethodCalls(boolean);

    public void load(java.lang.String)
    {
        java.lang.Runtime r0;
        java.lang.String r1;
        java.lang.Class $r2;

        r0 := @this: java.lang.Runtime;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        virtualinvoke r0.<java.lang.Runtime: void load0(java.lang.Class,java.lang.String)>($r2, r1);
        return;
    }

    synchronized void load0(java.lang.Class, java.lang.String)
    {
        java.lang.Runtime r0;
        java.lang.Class r1;
        java.lang.String r2, $r9;
        java.lang.SecurityManager r3;
        java.io.File $r4;
        boolean $z0;
        java.lang.UnsatisfiedLinkError $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: java.lang.Runtime;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.String;
        r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r3 == null goto label0;

        virtualinvoke r3.<java.lang.SecurityManager: void checkLink(java.lang.String)>(r2);

     label0:
        $r4 = new java.io.File;
        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r2);
        $z0 = virtualinvoke $r4.<java.io.File: boolean isAbsolute()>();
        if $z0 != 0 goto label1;

        $r5 = new java.lang.UnsatisfiedLinkError;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expecting an absolute path of the library: ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>($r9);
        throw $r5;

     label1:
        staticinvoke <java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>(r1, r2, 1);
        return;
    }

    public void loadLibrary(java.lang.String)
    {
        java.lang.Runtime r0;
        java.lang.String r1;
        java.lang.Class $r2;

        r0 := @this: java.lang.Runtime;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        virtualinvoke r0.<java.lang.Runtime: void loadLibrary0(java.lang.Class,java.lang.String)>($r2, r1);
        return;
    }

    synchronized void loadLibrary0(java.lang.Class, java.lang.String)
    {
        java.lang.Runtime r0;
        java.lang.Class r1;
        java.lang.String r2, $r8;
        java.lang.SecurityManager r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        char $c0;
        int $i1;
        java.lang.UnsatisfiedLinkError $r5;

        r0 := @this: java.lang.Runtime;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.String;
        r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r3 == null goto label0;

        virtualinvoke r3.<java.lang.SecurityManager: void checkLink(java.lang.String)>(r2);

     label0:
        $c0 = <java.io.File: char separatorChar>;
        $i1 = virtualinvoke r2.<java.lang.String: int indexOf(int)>($c0);
        if $i1 == -1 goto label1;

        $r5 = new java.lang.UnsatisfiedLinkError;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Directory separator should not appear in library name: ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>($r8);
        throw $r5;

     label1:
        staticinvoke <java.lang.ClassLoader: void loadLibrary(java.lang.Class,java.lang.String,boolean)>(r1, r2, 0);
        return;
    }

    public java.io.InputStream getLocalizedInputStream(java.io.InputStream)
    {
        java.lang.Runtime r0;
        java.io.InputStream r1;

        r0 := @this: java.lang.Runtime;
        r1 := @parameter0: java.io.InputStream;
        return r1;
    }

    public java.io.OutputStream getLocalizedOutputStream(java.io.OutputStream)
    {
        java.lang.Runtime r0;
        java.io.OutputStream r1;

        r0 := @this: java.lang.Runtime;
        r1 := @parameter0: java.io.OutputStream;
        return r1;
    }

    static void <clinit>()
    {
        java.lang.Runtime $r0;

        $r0 = new java.lang.Runtime;
        specialinvoke $r0.<java.lang.Runtime: void <init>()>();
        <java.lang.Runtime: java.lang.Runtime currentRuntime> = $r0;
        return;
    }
}
