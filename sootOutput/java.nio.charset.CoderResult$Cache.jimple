abstract class java.nio.charset.CoderResult$Cache extends java.lang.Object
{
    private java.util.Map cache;

    private void <init>()
    {
        java.nio.charset.CoderResult$Cache r0;

        r0 := @this: java.nio.charset.CoderResult$Cache;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.nio.charset.CoderResult$Cache: java.util.Map cache> = null;
        return;
    }

    protected abstract java.nio.charset.CoderResult create(int);

    private synchronized java.nio.charset.CoderResult get(int)
    {
        java.nio.charset.CoderResult$Cache r0;
        int i0;
        java.lang.Integer r1, $r5;
        java.nio.charset.CoderResult r2;
        java.lang.ref.WeakReference r3, $r10, $r13;
        java.lang.IllegalArgumentException $r4;
        java.util.Map $r6, $r8, $r12;
        java.util.HashMap $r7;
        java.lang.Object $r9, $r11;

        r0 := @this: java.nio.charset.CoderResult$Cache;
        i0 := @parameter0: int;
        if i0 > 0 goto label0;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Non-positive length");
        throw $r4;

     label0:
        $r5 = new java.lang.Integer;
        specialinvoke $r5.<java.lang.Integer: void <init>(int)>(i0);
        r1 = $r5;
        r2 = null;
        $r6 = r0.<java.nio.charset.CoderResult$Cache: java.util.Map cache>;
        if $r6 != null goto label1;

        $r7 = new java.util.HashMap;
        specialinvoke $r7.<java.util.HashMap: void <init>()>();
        r0.<java.nio.charset.CoderResult$Cache: java.util.Map cache> = $r7;
        goto label2;

     label1:
        $r8 = r0.<java.nio.charset.CoderResult$Cache: java.util.Map cache>;
        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        $r10 = (java.lang.ref.WeakReference) $r9;
        r3 = $r10;
        if $r10 == null goto label2;

        $r11 = virtualinvoke r3.<java.lang.ref.WeakReference: java.lang.Object get()>();
        r2 = (java.nio.charset.CoderResult) $r11;

     label2:
        if r2 != null goto label3;

        r2 = virtualinvoke r0.<java.nio.charset.CoderResult$Cache: java.nio.charset.CoderResult create(int)>(i0);
        $r12 = r0.<java.nio.charset.CoderResult$Cache: java.util.Map cache>;
        $r13 = new java.lang.ref.WeakReference;
        specialinvoke $r13.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r2);
        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r13);

     label3:
        return r2;
    }

    void <init>(java.nio.charset.CoderResult$1)
    {
        java.nio.charset.CoderResult$Cache r0;
        java.nio.charset.CoderResult$1 r1;

        r0 := @this: java.nio.charset.CoderResult$Cache;
        r1 := @parameter0: java.nio.charset.CoderResult$1;
        specialinvoke r0.<java.nio.charset.CoderResult$Cache: void <init>()>();
        return;
    }

    static java.nio.charset.CoderResult access$200(java.nio.charset.CoderResult$Cache, int)
    {
        java.nio.charset.CoderResult$Cache r0;
        int i0;
        java.nio.charset.CoderResult $r1;

        r0 := @parameter0: java.nio.charset.CoderResult$Cache;
        i0 := @parameter1: int;
        $r1 = specialinvoke r0.<java.nio.charset.CoderResult$Cache: java.nio.charset.CoderResult get(int)>(i0);
        return $r1;
    }
}
