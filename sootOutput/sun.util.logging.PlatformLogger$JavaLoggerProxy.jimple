final class sun.util.logging.PlatformLogger$JavaLoggerProxy extends sun.util.logging.PlatformLogger$LoggerProxy
{
    private final java.lang.Object javaLogger;

    void <init>(java.lang.String)
    {
        sun.util.logging.PlatformLogger$JavaLoggerProxy r0;
        java.lang.String r1;

        r0 := @this: sun.util.logging.PlatformLogger$JavaLoggerProxy;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<sun.util.logging.PlatformLogger$JavaLoggerProxy: void <init>(java.lang.String,sun.util.logging.PlatformLogger$Level)>(r1, null);
        return;
    }

    void <init>(java.lang.String, sun.util.logging.PlatformLogger$Level)
    {
        sun.util.logging.PlatformLogger$JavaLoggerProxy r0;
        java.lang.String r1;
        sun.util.logging.PlatformLogger$Level r2;
        java.lang.Object $r3, $r4, $r5;

        r0 := @this: sun.util.logging.PlatformLogger$JavaLoggerProxy;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: sun.util.logging.PlatformLogger$Level;
        specialinvoke r0.<sun.util.logging.PlatformLogger$LoggerProxy: void <init>(java.lang.String)>(r1);
        $r3 = staticinvoke <sun.util.logging.LoggingSupport: java.lang.Object getLogger(java.lang.String)>(r1);
        r0.<sun.util.logging.PlatformLogger$JavaLoggerProxy: java.lang.Object javaLogger> = $r3;
        if r2 == null goto label0;

        $r4 = r0.<sun.util.logging.PlatformLogger$JavaLoggerProxy: java.lang.Object javaLogger>;
        $r5 = r2.<sun.util.logging.PlatformLogger$Level: java.lang.Object javaLevel>;
        staticinvoke <sun.util.logging.LoggingSupport: void setLevel(java.lang.Object,java.lang.Object)>($r4, $r5);

     label0:
        return;
    }

    void doLog(sun.util.logging.PlatformLogger$Level, java.lang.String)
    {
        sun.util.logging.PlatformLogger$JavaLoggerProxy r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.String r2;
        java.lang.Object $r3, $r4;

        r0 := @this: sun.util.logging.PlatformLogger$JavaLoggerProxy;
        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;
        r2 := @parameter1: java.lang.String;
        $r3 = r0.<sun.util.logging.PlatformLogger$JavaLoggerProxy: java.lang.Object javaLogger>;
        $r4 = r1.<sun.util.logging.PlatformLogger$Level: java.lang.Object javaLevel>;
        staticinvoke <sun.util.logging.LoggingSupport: void log(java.lang.Object,java.lang.Object,java.lang.String)>($r3, $r4, r2);
        return;
    }

    void doLog(sun.util.logging.PlatformLogger$Level, java.lang.String, java.lang.Throwable)
    {
        sun.util.logging.PlatformLogger$JavaLoggerProxy r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.String r2;
        java.lang.Throwable r3;
        java.lang.Object $r4, $r5;

        r0 := @this: sun.util.logging.PlatformLogger$JavaLoggerProxy;
        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Throwable;
        $r4 = r0.<sun.util.logging.PlatformLogger$JavaLoggerProxy: java.lang.Object javaLogger>;
        $r5 = r1.<sun.util.logging.PlatformLogger$Level: java.lang.Object javaLevel>;
        staticinvoke <sun.util.logging.LoggingSupport: void log(java.lang.Object,java.lang.Object,java.lang.String,java.lang.Throwable)>($r4, $r5, r2, r3);
        return;
    }

    transient void doLog(sun.util.logging.PlatformLogger$Level, java.lang.String, java.lang.Object[])
    {
        sun.util.logging.PlatformLogger$JavaLoggerProxy r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.String r2, $r6;
        java.lang.Object[] r3;
        int i0, i1, $i2;
        java.lang.String[] r4;
        boolean $z0;
        java.lang.Object $r5, $r7, $r8;

        r0 := @this: sun.util.logging.PlatformLogger$JavaLoggerProxy;
        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Object[];
        $z0 = virtualinvoke r0.<sun.util.logging.PlatformLogger$JavaLoggerProxy: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>(r1);
        if $z0 != 0 goto label0;

        return;

     label0:
        if r3 == null goto label1;

        $i2 = lengthof r3;
        goto label2;

     label1:
        $i2 = 0;

     label2:
        i0 = $i2;
        r4 = newarray (java.lang.String)[i0];
        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $r5 = r3[i1];
        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);
        r4[i1] = $r6;
        i1 = i1 + 1;
        goto label3;

     label4:
        $r7 = r0.<sun.util.logging.PlatformLogger$JavaLoggerProxy: java.lang.Object javaLogger>;
        $r8 = r1.<sun.util.logging.PlatformLogger$Level: java.lang.Object javaLevel>;
        staticinvoke <sun.util.logging.LoggingSupport: void log(java.lang.Object,java.lang.Object,java.lang.String,java.lang.Object[])>($r7, $r8, r2, r4);
        return;
    }

    boolean isEnabled()
    {
        sun.util.logging.PlatformLogger$JavaLoggerProxy r0;
        sun.util.logging.PlatformLogger$Level $r1;
        java.lang.Object $r2, $r3;
        boolean $z0;

        r0 := @this: sun.util.logging.PlatformLogger$JavaLoggerProxy;
        $r2 = r0.<sun.util.logging.PlatformLogger$JavaLoggerProxy: java.lang.Object javaLogger>;
        $r1 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level OFF>;
        $r3 = $r1.<sun.util.logging.PlatformLogger$Level: java.lang.Object javaLevel>;
        $z0 = staticinvoke <sun.util.logging.LoggingSupport: boolean isLoggable(java.lang.Object,java.lang.Object)>($r2, $r3);
        return $z0;
    }

    sun.util.logging.PlatformLogger$Level getLevel()
    {
        sun.util.logging.PlatformLogger$JavaLoggerProxy r0;
        java.lang.Object r1, $r3;
        java.lang.IllegalArgumentException r2, $r6;
        java.lang.String $r4;
        sun.util.logging.PlatformLogger$Level $r5, $r7;
        int $i0;

        r0 := @this: sun.util.logging.PlatformLogger$JavaLoggerProxy;
        $r3 = r0.<sun.util.logging.PlatformLogger$JavaLoggerProxy: java.lang.Object javaLogger>;
        r1 = staticinvoke <sun.util.logging.LoggingSupport: java.lang.Object getLevel(java.lang.Object)>($r3);
        if r1 != null goto label0;

        return null;

     label0:
        $r4 = staticinvoke <sun.util.logging.LoggingSupport: java.lang.String getLevelName(java.lang.Object)>(r1);
        $r5 = staticinvoke <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level valueOf(java.lang.String)>($r4);

     label1:
        return $r5;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        $i0 = staticinvoke <sun.util.logging.LoggingSupport: int getLevelValue(java.lang.Object)>(r1);
        $r7 = staticinvoke <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level valueOf(int)>($i0);
        return $r7;

        catch java.lang.IllegalArgumentException from label0 to label1 with label2;
    }

    void setLevel(sun.util.logging.PlatformLogger$Level)
    {
        sun.util.logging.PlatformLogger$JavaLoggerProxy r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.Object $r2, $r3;

        r0 := @this: sun.util.logging.PlatformLogger$JavaLoggerProxy;
        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;
        $r2 = r0.<sun.util.logging.PlatformLogger$JavaLoggerProxy: java.lang.Object javaLogger>;
        if r1 != null goto label0;

        $r3 = null;
        goto label1;

     label0:
        $r3 = r1.<sun.util.logging.PlatformLogger$Level: java.lang.Object javaLevel>;

     label1:
        staticinvoke <sun.util.logging.LoggingSupport: void setLevel(java.lang.Object,java.lang.Object)>($r2, $r3);
        return;
    }

    boolean isLoggable(sun.util.logging.PlatformLogger$Level)
    {
        sun.util.logging.PlatformLogger$JavaLoggerProxy r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.Object $r2, $r3;
        boolean $z0;

        r0 := @this: sun.util.logging.PlatformLogger$JavaLoggerProxy;
        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;
        $r2 = r0.<sun.util.logging.PlatformLogger$JavaLoggerProxy: java.lang.Object javaLogger>;
        $r3 = r1.<sun.util.logging.PlatformLogger$Level: java.lang.Object javaLevel>;
        $z0 = staticinvoke <sun.util.logging.LoggingSupport: boolean isLoggable(java.lang.Object,java.lang.Object)>($r2, $r3);
        return $z0;
    }

    static void <clinit>()
    {
        sun.util.logging.PlatformLogger$Level[] r0;
        int i0, i1;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.String $r2;
        java.lang.Object $r3;

        r0 = staticinvoke <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level[] values()>();
        i0 = lengthof r0;
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        r1 = r0[i1];
        $r2 = virtualinvoke r1.<sun.util.logging.PlatformLogger$Level: java.lang.String name()>();
        $r3 = staticinvoke <sun.util.logging.LoggingSupport: java.lang.Object parseLevel(java.lang.String)>($r2);
        r1.<sun.util.logging.PlatformLogger$Level: java.lang.Object javaLevel> = $r3;
        i1 = i1 + 1;
        goto label0;

     label1:
        return;
    }
}
