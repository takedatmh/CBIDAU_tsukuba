class java.util.Collections$SingletonMap extends java.util.AbstractMap implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.lang.Object k;
    private final java.lang.Object v;
    private transient java.util.Set keySet;
    private transient java.util.Set entrySet;
    private transient java.util.Collection values;

    void <init>(java.lang.Object, java.lang.Object)
    {
        java.util.Collections$SingletonMap r0;
        java.lang.Object r1, r2;

        r0 := @this: java.util.Collections$SingletonMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        specialinvoke r0.<java.util.AbstractMap: void <init>()>();
        r0.<java.util.Collections$SingletonMap: java.util.Set keySet> = null;
        r0.<java.util.Collections$SingletonMap: java.util.Set entrySet> = null;
        r0.<java.util.Collections$SingletonMap: java.util.Collection values> = null;
        r0.<java.util.Collections$SingletonMap: java.lang.Object k> = r1;
        r0.<java.util.Collections$SingletonMap: java.lang.Object v> = r2;
        return;
    }

    public int size()
    {
        java.util.Collections$SingletonMap r0;

        r0 := @this: java.util.Collections$SingletonMap;
        return 1;
    }

    public boolean isEmpty()
    {
        java.util.Collections$SingletonMap r0;

        r0 := @this: java.util.Collections$SingletonMap;
        return 0;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.Collections$SingletonMap r0;
        java.lang.Object r1, $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$SingletonMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.Collections$SingletonMap: java.lang.Object k>;
        $z0 = staticinvoke <java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>(r1, $r2);
        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Collections$SingletonMap r0;
        java.lang.Object r1, $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$SingletonMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.Collections$SingletonMap: java.lang.Object v>;
        $z0 = staticinvoke <java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>(r1, $r2);
        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.Collections$SingletonMap r0;
        java.lang.Object r1, $r2, $r3;
        boolean $z0;

        r0 := @this: java.util.Collections$SingletonMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.Collections$SingletonMap: java.lang.Object k>;
        $z0 = staticinvoke <java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>(r1, $r2);
        if $z0 == 0 goto label0;

        $r3 = r0.<java.util.Collections$SingletonMap: java.lang.Object v>;
        goto label1;

     label0:
        $r3 = null;

     label1:
        return $r3;
    }

    public java.util.Set keySet()
    {
        java.util.Collections$SingletonMap r0;
        java.util.Set $r1, $r3, $r4;
        java.lang.Object $r2;

        r0 := @this: java.util.Collections$SingletonMap;
        $r1 = r0.<java.util.Collections$SingletonMap: java.util.Set keySet>;
        if $r1 != null goto label0;

        $r2 = r0.<java.util.Collections$SingletonMap: java.lang.Object k>;
        $r3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r2);
        r0.<java.util.Collections$SingletonMap: java.util.Set keySet> = $r3;

     label0:
        $r4 = r0.<java.util.Collections$SingletonMap: java.util.Set keySet>;
        return $r4;
    }

    public java.util.Set entrySet()
    {
        java.util.Collections$SingletonMap r0;
        java.util.AbstractMap$SimpleImmutableEntry $r1;
        java.util.Set $r2, $r5, $r6;
        java.lang.Object $r3, $r4;

        r0 := @this: java.util.Collections$SingletonMap;
        $r2 = r0.<java.util.Collections$SingletonMap: java.util.Set entrySet>;
        if $r2 != null goto label0;

        $r1 = new java.util.AbstractMap$SimpleImmutableEntry;
        $r3 = r0.<java.util.Collections$SingletonMap: java.lang.Object k>;
        $r4 = r0.<java.util.Collections$SingletonMap: java.lang.Object v>;
        specialinvoke $r1.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r3, $r4);
        $r5 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r1);
        r0.<java.util.Collections$SingletonMap: java.util.Set entrySet> = $r5;

     label0:
        $r6 = r0.<java.util.Collections$SingletonMap: java.util.Set entrySet>;
        return $r6;
    }

    public java.util.Collection values()
    {
        java.util.Collections$SingletonMap r0;
        java.util.Collection $r1, $r4;
        java.lang.Object $r2;
        java.util.Set $r3;

        r0 := @this: java.util.Collections$SingletonMap;
        $r1 = r0.<java.util.Collections$SingletonMap: java.util.Collection values>;
        if $r1 != null goto label0;

        $r2 = r0.<java.util.Collections$SingletonMap: java.lang.Object v>;
        $r3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r2);
        r0.<java.util.Collections$SingletonMap: java.util.Collection values> = $r3;

     label0:
        $r4 = r0.<java.util.Collections$SingletonMap: java.util.Collection values>;
        return $r4;
    }
}
