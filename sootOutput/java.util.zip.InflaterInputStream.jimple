public class java.util.zip.InflaterInputStream extends java.io.FilterInputStream
{
    protected java.util.zip.Inflater inf;
    protected byte[] buf;
    protected int len;
    private boolean closed;
    private boolean reachEOF;
    boolean usesDefaultInflater;
    private byte[] singleByteBuf;
    private byte[] b;

    private void ensureOpen() throws java.io.IOException
    {
        java.util.zip.InflaterInputStream r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: java.util.zip.InflaterInputStream;
        $z0 = r0.<java.util.zip.InflaterInputStream: boolean closed>;
        if $z0 == 0 goto label0;

        $r1 = new java.io.IOException;
        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Stream closed");
        throw $r1;

     label0:
        return;
    }

    public void <init>(java.io.InputStream, java.util.zip.Inflater, int)
    {
        java.util.zip.InflaterInputStream r0;
        java.io.InputStream r1;
        java.util.zip.Inflater r2;
        int i0;
        byte[] $r3, $r4, $r7;
        java.lang.NullPointerException $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: java.util.zip.InflaterInputStream;
        r1 := @parameter0: java.io.InputStream;
        r2 := @parameter1: java.util.zip.Inflater;
        i0 := @parameter2: int;
        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);
        r0.<java.util.zip.InflaterInputStream: boolean closed> = 0;
        r0.<java.util.zip.InflaterInputStream: boolean reachEOF> = 0;
        r0.<java.util.zip.InflaterInputStream: boolean usesDefaultInflater> = 0;
        $r3 = newarray (byte)[1];
        r0.<java.util.zip.InflaterInputStream: byte[] singleByteBuf> = $r3;
        $r4 = newarray (byte)[512];
        r0.<java.util.zip.InflaterInputStream: byte[] b> = $r4;
        if r1 == null goto label0;

        if r2 != null goto label1;

     label0:
        $r5 = new java.lang.NullPointerException;
        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();
        throw $r5;

     label1:
        if i0 > 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("buffer size <= 0");
        throw $r6;

     label2:
        r0.<java.util.zip.InflaterInputStream: java.util.zip.Inflater inf> = r2;
        $r7 = newarray (byte)[i0];
        r0.<java.util.zip.InflaterInputStream: byte[] buf> = $r7;
        return;
    }

    public void <init>(java.io.InputStream, java.util.zip.Inflater)
    {
        java.util.zip.InflaterInputStream r0;
        java.io.InputStream r1;
        java.util.zip.Inflater r2;

        r0 := @this: java.util.zip.InflaterInputStream;
        r1 := @parameter0: java.io.InputStream;
        r2 := @parameter1: java.util.zip.Inflater;
        specialinvoke r0.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater,int)>(r1, r2, 512);
        return;
    }

    public void <init>(java.io.InputStream)
    {
        java.util.zip.InflaterInputStream r0;
        java.io.InputStream r1;
        java.util.zip.Inflater $r2;

        r0 := @this: java.util.zip.InflaterInputStream;
        r1 := @parameter0: java.io.InputStream;
        $r2 = new java.util.zip.Inflater;
        specialinvoke $r2.<java.util.zip.Inflater: void <init>()>();
        specialinvoke r0.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>(r1, $r2);
        r0.<java.util.zip.InflaterInputStream: boolean usesDefaultInflater> = 1;
        return;
    }

    public int read() throws java.io.IOException
    {
        java.util.zip.InflaterInputStream r0;
        byte[] $r1, $r2;
        int $i0;
        short $s1;
        byte $b2;

        r0 := @this: java.util.zip.InflaterInputStream;
        specialinvoke r0.<java.util.zip.InflaterInputStream: void ensureOpen()>();
        $r1 = r0.<java.util.zip.InflaterInputStream: byte[] singleByteBuf>;
        $i0 = virtualinvoke r0.<java.util.zip.InflaterInputStream: int read(byte[],int,int)>($r1, 0, 1);
        if $i0 != -1 goto label0;

        $s1 = -1;
        goto label1;

     label0:
        $r2 = r0.<java.util.zip.InflaterInputStream: byte[] singleByteBuf>;
        $b2 = $r2[0];
        $s1 = $b2 & 255;

     label1:
        return $s1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.util.zip.InflaterInputStream r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.String r2, $r13;
        java.lang.NullPointerException $r3;
        java.lang.IndexOutOfBoundsException $r4;
        java.util.zip.Inflater $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2;
        byte $b6;
        java.util.zip.DataFormatException $r9, r10;
        java.util.zip.ZipException $r11;

        r0 := @this: java.util.zip.InflaterInputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.util.zip.InflaterInputStream: void ensureOpen()>();
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i3 = lengthof r1;
        $i4 = $i3 - i0;
        if i1 <= $i4 goto label2;

     label1:
        $r4 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r4;

     label2:
        if i1 != 0 goto label3;

        return 0;

     label3:
        $r5 = r0.<java.util.zip.InflaterInputStream: java.util.zip.Inflater inf>;
        $i5 = virtualinvoke $r5.<java.util.zip.Inflater: int inflate(byte[],int,int)>(r1, i0, i1);
        i2 = $i5;
        if $i5 != 0 goto label7;

        $r6 = r0.<java.util.zip.InflaterInputStream: java.util.zip.Inflater inf>;
        $z0 = virtualinvoke $r6.<java.util.zip.Inflater: boolean finished()>();
        if $z0 != 0 goto label4;

        $r7 = r0.<java.util.zip.InflaterInputStream: java.util.zip.Inflater inf>;
        $z1 = virtualinvoke $r7.<java.util.zip.Inflater: boolean needsDictionary()>();
        if $z1 == 0 goto label6;

     label4:
        r0.<java.util.zip.InflaterInputStream: boolean reachEOF> = 1;
        $b6 = -1;

     label5:
        return $b6;

     label6:
        $r8 = r0.<java.util.zip.InflaterInputStream: java.util.zip.Inflater inf>;
        $z2 = virtualinvoke $r8.<java.util.zip.Inflater: boolean needsInput()>();
        if $z2 == 0 goto label3;

        virtualinvoke r0.<java.util.zip.InflaterInputStream: void fill()>();
        goto label3;

     label7:
        return i2;

     label8:
        $r9 := @caughtexception;
        r10 = $r9;
        r2 = virtualinvoke r10.<java.util.zip.DataFormatException: java.lang.String getMessage()>();
        $r11 = new java.util.zip.ZipException;
        if r2 == null goto label9;

        $r13 = r2;
        goto label10;

     label9:
        $r13 = "Invalid ZLIB data format";

     label10:
        specialinvoke $r11.<java.util.zip.ZipException: void <init>(java.lang.String)>($r13);
        throw $r11;

        catch java.util.zip.DataFormatException from label3 to label5 with label8;
        catch java.util.zip.DataFormatException from label6 to label7 with label8;
    }

    public int available() throws java.io.IOException
    {
        java.util.zip.InflaterInputStream r0;
        boolean $z0;

        r0 := @this: java.util.zip.InflaterInputStream;
        specialinvoke r0.<java.util.zip.InflaterInputStream: void ensureOpen()>();
        $z0 = r0.<java.util.zip.InflaterInputStream: boolean reachEOF>;
        if $z0 == 0 goto label0;

        return 0;

     label0:
        return 1;
    }

    public long skip(long) throws java.io.IOException
    {
        java.util.zip.InflaterInputStream r0;
        long l0, $l5, $l8;
        int i1, i2, i3, $i6, i7;
        byte $b4;
        java.lang.IllegalArgumentException $r1;
        byte[] $r2, $r3, $r4;

        r0 := @this: java.util.zip.InflaterInputStream;
        l0 := @parameter0: long;
        $b4 = l0 cmp 0L;
        if $b4 >= 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("negative skip length");
        throw $r1;

     label0:
        specialinvoke r0.<java.util.zip.InflaterInputStream: void ensureOpen()>();
        $l5 = staticinvoke <java.lang.Math: long min(long,long)>(l0, 2147483647L);
        i1 = (int) $l5;
        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        i3 = i1 - i2;
        $r2 = r0.<java.util.zip.InflaterInputStream: byte[] b>;
        $i6 = lengthof $r2;
        if i3 <= $i6 goto label2;

        $r3 = r0.<java.util.zip.InflaterInputStream: byte[] b>;
        i3 = lengthof $r3;

     label2:
        $r4 = r0.<java.util.zip.InflaterInputStream: byte[] b>;
        i7 = virtualinvoke r0.<java.util.zip.InflaterInputStream: int read(byte[],int,int)>($r4, 0, i3);
        if i7 != -1 goto label3;

        r0.<java.util.zip.InflaterInputStream: boolean reachEOF> = 1;
        goto label4;

     label3:
        i2 = i2 + i7;
        goto label1;

     label4:
        $l8 = (long) i2;
        return $l8;
    }

    public void close() throws java.io.IOException
    {
        java.util.zip.InflaterInputStream r0;
        boolean $z0, $z1;
        java.util.zip.Inflater $r1;
        java.io.InputStream $r2;

        r0 := @this: java.util.zip.InflaterInputStream;
        $z0 = r0.<java.util.zip.InflaterInputStream: boolean closed>;
        if $z0 != 0 goto label1;

        $z1 = r0.<java.util.zip.InflaterInputStream: boolean usesDefaultInflater>;
        if $z1 == 0 goto label0;

        $r1 = r0.<java.util.zip.InflaterInputStream: java.util.zip.Inflater inf>;
        virtualinvoke $r1.<java.util.zip.Inflater: void end()>();

     label0:
        $r2 = r0.<java.util.zip.InflaterInputStream: java.io.InputStream in>;
        virtualinvoke $r2.<java.io.InputStream: void close()>();
        r0.<java.util.zip.InflaterInputStream: boolean closed> = 1;

     label1:
        return;
    }

    protected void fill() throws java.io.IOException
    {
        java.util.zip.InflaterInputStream r0;
        java.io.InputStream $r1;
        byte[] $r2, $r3, $r6;
        int $i0, $i1, $i2, $i3;
        java.io.EOFException $r4;
        java.util.zip.Inflater $r5;

        r0 := @this: java.util.zip.InflaterInputStream;
        specialinvoke r0.<java.util.zip.InflaterInputStream: void ensureOpen()>();
        $r1 = r0.<java.util.zip.InflaterInputStream: java.io.InputStream in>;
        $r2 = r0.<java.util.zip.InflaterInputStream: byte[] buf>;
        $r3 = r0.<java.util.zip.InflaterInputStream: byte[] buf>;
        $i0 = lengthof $r3;
        $i1 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i0);
        r0.<java.util.zip.InflaterInputStream: int len> = $i1;
        $i2 = r0.<java.util.zip.InflaterInputStream: int len>;
        if $i2 != -1 goto label0;

        $r4 = new java.io.EOFException;
        specialinvoke $r4.<java.io.EOFException: void <init>(java.lang.String)>("Unexpected end of ZLIB input stream");
        throw $r4;

     label0:
        $r5 = r0.<java.util.zip.InflaterInputStream: java.util.zip.Inflater inf>;
        $r6 = r0.<java.util.zip.InflaterInputStream: byte[] buf>;
        $i3 = r0.<java.util.zip.InflaterInputStream: int len>;
        virtualinvoke $r5.<java.util.zip.Inflater: void setInput(byte[],int,int)>($r6, 0, $i3);
        return;
    }

    public boolean markSupported()
    {
        java.util.zip.InflaterInputStream r0;

        r0 := @this: java.util.zip.InflaterInputStream;
        return 0;
    }

    public synchronized void mark(int)
    {
        java.util.zip.InflaterInputStream r0;
        int i0;

        r0 := @this: java.util.zip.InflaterInputStream;
        i0 := @parameter0: int;
        return;
    }

    public synchronized void reset() throws java.io.IOException
    {
        java.util.zip.InflaterInputStream r0;
        java.io.IOException $r1;

        r0 := @this: java.util.zip.InflaterInputStream;
        $r1 = new java.io.IOException;
        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("mark/reset not supported");
        throw $r1;
    }
}
