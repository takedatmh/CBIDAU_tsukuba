public class java.util.Collections extends java.lang.Object
{
    private static final int BINARYSEARCH_THRESHOLD;
    private static final int REVERSE_THRESHOLD;
    private static final int SHUFFLE_THRESHOLD;
    private static final int FILL_THRESHOLD;
    private static final int ROTATE_THRESHOLD;
    private static final int COPY_THRESHOLD;
    private static final int REPLACEALL_THRESHOLD;
    private static final int INDEXOFSUBLIST_THRESHOLD;
    private static java.util.Random r;
    public static final java.util.Set EMPTY_SET;
    public static final java.util.List EMPTY_LIST;
    public static final java.util.Map EMPTY_MAP;

    private void <init>()
    {
        java.util.Collections r0;

        r0 := @this: java.util.Collections;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static void sort(java.util.List)
    {
        java.util.List r0;
        java.lang.Object[] r1;
        java.util.ListIterator r2;
        int i0, $i1;
        java.lang.Object $r4;
        java.lang.Comparable $r5;

        r0 := @parameter0: java.util.List;
        r1 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray()>();
        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r1);
        r2 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();
        i0 = 0;

     label0:
        $i1 = lengthof r1;
        if i0 >= $i1 goto label1;

        interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();
        $r4 = r1[i0];
        $r5 = (java.lang.Comparable) $r4;
        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>($r5);
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    public static void sort(java.util.List, java.util.Comparator)
    {
        java.util.List r0;
        java.util.Comparator r1;
        java.lang.Object[] r2;
        java.util.ListIterator r3;
        int i0, $i1;
        java.lang.Object $r5;

        r0 := @parameter0: java.util.List;
        r1 := @parameter1: java.util.Comparator;
        r2 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray()>();
        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r2, r1);
        r3 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();
        i0 = 0;

     label0:
        $i1 = lengthof r2;
        if i0 >= $i1 goto label1;

        interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();
        $r5 = r2[i0];
        interfaceinvoke r3.<java.util.ListIterator: void set(java.lang.Object)>($r5);
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    public static int binarySearch(java.util.List, java.lang.Object)
    {
        java.util.List r0;
        java.lang.Object r1;
        boolean $z0;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.util.List;
        r1 := @parameter1: java.lang.Object;
        $z0 = r0 instanceof java.util.RandomAccess;
        if $z0 != 0 goto label0;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();
        if $i0 >= 5000 goto label1;

     label0:
        $i1 = staticinvoke <java.util.Collections: int indexedBinarySearch(java.util.List,java.lang.Object)>(r0, r1);
        return $i1;

     label1:
        $i2 = staticinvoke <java.util.Collections: int iteratorBinarySearch(java.util.List,java.lang.Object)>(r0, r1);
        return $i2;
    }

    private static int indexedBinarySearch(java.util.List, java.lang.Object)
    {
        java.util.List r0;
        java.lang.Object r1, $r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        java.lang.Comparable r2;

        r0 := @parameter0: java.util.List;
        r1 := @parameter1: java.lang.Object;
        i0 = 0;
        $i4 = interfaceinvoke r0.<java.util.List: int size()>();
        i1 = $i4 - 1;

     label0:
        if i0 > i1 goto label4;

        $i5 = i0 + i1;
        i2 = $i5 >>> 1;
        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);
        r2 = (java.lang.Comparable) $r3;
        i3 = interfaceinvoke r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
        if i3 >= 0 goto label1;

        i0 = i2 + 1;
        goto label3;

     label1:
        if i3 <= 0 goto label2;

        i1 = i2 - 1;
        goto label3;

     label2:
        return i2;

     label3:
        goto label0;

     label4:
        $i6 = i0 + 1;
        $i7 = neg $i6;
        return $i7;
    }

    private static int iteratorBinarySearch(java.util.List, java.lang.Object)
    {
        java.util.List r0;
        java.lang.Object r1, $r4;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        java.util.ListIterator r2;
        java.lang.Comparable r3;

        r0 := @parameter0: java.util.List;
        r1 := @parameter1: java.lang.Object;
        i0 = 0;
        $i4 = interfaceinvoke r0.<java.util.List: int size()>();
        i1 = $i4 - 1;
        r2 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();

     label0:
        if i0 > i1 goto label4;

        $i5 = i0 + i1;
        i2 = $i5 >>> 1;
        $r4 = staticinvoke <java.util.Collections: java.lang.Object get(java.util.ListIterator,int)>(r2, i2);
        r3 = (java.lang.Comparable) $r4;
        i3 = interfaceinvoke r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
        if i3 >= 0 goto label1;

        i0 = i2 + 1;
        goto label3;

     label1:
        if i3 <= 0 goto label2;

        i1 = i2 - 1;
        goto label3;

     label2:
        return i2;

     label3:
        goto label0;

     label4:
        $i6 = i0 + 1;
        $i7 = neg $i6;
        return $i7;
    }

    private static java.lang.Object get(java.util.ListIterator, int)
    {
        java.util.ListIterator r0;
        int i0, i1, $i2;
        null_type n0;
        java.lang.Object r1;

        r0 := @parameter0: java.util.ListIterator;
        i0 := @parameter1: int;
        n0 = null;
        i1 = interfaceinvoke r0.<java.util.ListIterator: int nextIndex()>();
        if i1 > i0 goto label1;

     label0:
        r1 = interfaceinvoke r0.<java.util.ListIterator: java.lang.Object next()>();
        $i2 = i1;
        i1 = i1 + 1;
        if $i2 < i0 goto label0;

        goto label2;

     label1:
        r1 = interfaceinvoke r0.<java.util.ListIterator: java.lang.Object previous()>();
        i1 = i1 + -1;
        if i1 > i0 goto label1;

     label2:
        return r1;
    }

    public static int binarySearch(java.util.List, java.lang.Object, java.util.Comparator)
    {
        java.util.List r0;
        java.lang.Object r1;
        java.util.Comparator r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @parameter0: java.util.List;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.util.Comparator;
        if r2 != null goto label0;

        $i0 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>(r0, r1);
        return $i0;

     label0:
        $z0 = r0 instanceof java.util.RandomAccess;
        if $z0 != 0 goto label1;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();
        if $i1 >= 5000 goto label2;

     label1:
        $i2 = staticinvoke <java.util.Collections: int indexedBinarySearch(java.util.List,java.lang.Object,java.util.Comparator)>(r0, r1, r2);
        return $i2;

     label2:
        $i3 = staticinvoke <java.util.Collections: int iteratorBinarySearch(java.util.List,java.lang.Object,java.util.Comparator)>(r0, r1, r2);
        return $i3;
    }

    private static int indexedBinarySearch(java.util.List, java.lang.Object, java.util.Comparator)
    {
        java.util.List r0;
        java.lang.Object r1, r3;
        java.util.Comparator r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;

        r0 := @parameter0: java.util.List;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.util.Comparator;
        i0 = 0;
        $i4 = interfaceinvoke r0.<java.util.List: int size()>();
        i1 = $i4 - 1;

     label0:
        if i0 > i1 goto label4;

        $i5 = i0 + i1;
        i2 = $i5 >>> 1;
        r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);
        i3 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r3, r1);
        if i3 >= 0 goto label1;

        i0 = i2 + 1;
        goto label3;

     label1:
        if i3 <= 0 goto label2;

        i1 = i2 - 1;
        goto label3;

     label2:
        return i2;

     label3:
        goto label0;

     label4:
        $i6 = i0 + 1;
        $i7 = neg $i6;
        return $i7;
    }

    private static int iteratorBinarySearch(java.util.List, java.lang.Object, java.util.Comparator)
    {
        java.util.List r0;
        java.lang.Object r1, r4;
        java.util.Comparator r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        java.util.ListIterator r3;

        r0 := @parameter0: java.util.List;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.util.Comparator;
        i0 = 0;
        $i4 = interfaceinvoke r0.<java.util.List: int size()>();
        i1 = $i4 - 1;
        r3 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();

     label0:
        if i0 > i1 goto label4;

        $i5 = i0 + i1;
        i2 = $i5 >>> 1;
        r4 = staticinvoke <java.util.Collections: java.lang.Object get(java.util.ListIterator,int)>(r3, i2);
        i3 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r4, r1);
        if i3 >= 0 goto label1;

        i0 = i2 + 1;
        goto label3;

     label1:
        if i3 <= 0 goto label2;

        i1 = i2 - 1;
        goto label3;

     label2:
        return i2;

     label3:
        goto label0;

     label4:
        $i6 = i0 + 1;
        $i7 = neg $i6;
        return $i7;
    }

    public static void reverse(java.util.List)
    {
        java.util.List r0;
        int i0, i1, i2, i3, i4, i5, $i6;
        java.lang.Object r1, $r4;
        boolean $z0;
        java.util.ListIterator r2, r3;

        r0 := @parameter0: java.util.List;
        i0 = interfaceinvoke r0.<java.util.List: int size()>();
        if i0 < 18 goto label0;

        $z0 = r0 instanceof java.util.RandomAccess;
        if $z0 == 0 goto label3;

     label0:
        i1 = 0;
        i2 = i0 >> 1;
        i3 = i0 - 1;

     label1:
        if i1 >= i2 goto label2;

        staticinvoke <java.util.Collections: void swap(java.util.List,int,int)>(r0, i1, i3);
        i1 = i1 + 1;
        i3 = i3 + -1;
        goto label1;

     label2:
        goto label5;

     label3:
        r2 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();
        r3 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator(int)>(i0);
        i5 = 0;
        $i6 = interfaceinvoke r0.<java.util.List: int size()>();
        i4 = $i6 >> 1;

     label4:
        if i5 >= i4 goto label5;

        r1 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();
        $r4 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object previous()>();
        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>($r4);
        interfaceinvoke r3.<java.util.ListIterator: void set(java.lang.Object)>(r1);
        i5 = i5 + 1;
        goto label4;

     label5:
        return;
    }

    public static void shuffle(java.util.List)
    {
        java.util.List r0;
        java.util.Random r1, $r2;

        r0 := @parameter0: java.util.List;
        r1 = <java.util.Collections: java.util.Random r>;
        if r1 != null goto label0;

        $r2 = new java.util.Random;
        specialinvoke $r2.<java.util.Random: void <init>()>();
        r1 = $r2;
        <java.util.Collections: java.util.Random r> = $r2;

     label0:
        staticinvoke <java.util.Collections: void shuffle(java.util.List,java.util.Random)>(r0, r1);
        return;
    }

    public static void shuffle(java.util.List, java.util.Random)
    {
        java.util.List r0;
        java.util.Random r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;
        java.lang.Object[] r2;
        java.util.ListIterator r3;
        java.lang.Object $r5;

        r0 := @parameter0: java.util.List;
        r1 := @parameter1: java.util.Random;
        i0 = interfaceinvoke r0.<java.util.List: int size()>();
        if i0 < 5 goto label0;

        $z0 = r0 instanceof java.util.RandomAccess;
        if $z0 == 0 goto label3;

     label0:
        i1 = i0;

     label1:
        if i1 <= 1 goto label2;

        $i4 = i1 - 1;
        $i5 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(i1);
        staticinvoke <java.util.Collections: void swap(java.util.List,int,int)>(r0, $i4, $i5);
        i1 = i1 + -1;
        goto label1;

     label2:
        goto label7;

     label3:
        r2 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray()>();
        i2 = i0;

     label4:
        if i2 <= 1 goto label5;

        $i6 = i2 - 1;
        $i7 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(i2);
        staticinvoke <java.util.Collections: void swap(java.lang.Object[],int,int)>(r2, $i6, $i7);
        i2 = i2 + -1;
        goto label4;

     label5:
        r3 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();
        i3 = 0;

     label6:
        $i8 = lengthof r2;
        if i3 >= $i8 goto label7;

        interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();
        $r5 = r2[i3];
        interfaceinvoke r3.<java.util.ListIterator: void set(java.lang.Object)>($r5);
        i3 = i3 + 1;
        goto label6;

     label7:
        return;
    }

    public static void swap(java.util.List, int, int)
    {
        java.util.List r0, r1;
        int i0, i1;
        java.lang.Object $r2, $r3;

        r0 := @parameter0: java.util.List;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 = r0;
        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);
        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, $r2);
        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r3);
        return;
    }

    private static void swap(java.lang.Object[], int, int)
    {
        java.lang.Object[] r0;
        int i0, i1;
        java.lang.Object r1, $r2;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 = r0[i0];
        $r2 = r0[i1];
        r0[i0] = $r2;
        r0[i1] = r1;
        return;
    }

    public static void fill(java.util.List, java.lang.Object)
    {
        java.util.List r0;
        java.lang.Object r1;
        int i0, i1, i2;
        boolean $z0;
        java.util.ListIterator r3;

        r0 := @parameter0: java.util.List;
        r1 := @parameter1: java.lang.Object;
        i0 = interfaceinvoke r0.<java.util.List: int size()>();
        if i0 < 25 goto label0;

        $z0 = r0 instanceof java.util.RandomAccess;
        if $z0 == 0 goto label3;

     label0:
        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        interfaceinvoke r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, r1);
        i1 = i1 + 1;
        goto label1;

     label2:
        goto label5;

     label3:
        r3 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();
        i2 = 0;

     label4:
        if i2 >= i0 goto label5;

        interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();
        interfaceinvoke r3.<java.util.ListIterator: void set(java.lang.Object)>(r1);
        i2 = i2 + 1;
        goto label4;

     label5:
        return;
    }

    public static void copy(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        int i0, i1, i2, $i3;
        java.util.ListIterator r2, r6;
        java.lang.IndexOutOfBoundsException $r3;
        boolean $z0, $z1;
        java.lang.Object $r4, $r8;

        r0 := @parameter0: java.util.List;
        r1 := @parameter1: java.util.List;
        i0 = interfaceinvoke r1.<java.util.List: int size()>();
        $i3 = interfaceinvoke r0.<java.util.List: int size()>();
        if i0 <= $i3 goto label0;

        $r3 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Source does not fit in dest");
        throw $r3;

     label0:
        if i0 < 10 goto label1;

        $z0 = r1 instanceof java.util.RandomAccess;
        if $z0 == 0 goto label4;

        $z1 = r0 instanceof java.util.RandomAccess;
        if $z1 == 0 goto label4;

     label1:
        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);
        interfaceinvoke r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, $r4);
        i1 = i1 + 1;
        goto label2;

     label3:
        goto label6;

     label4:
        r6 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();
        r2 = interfaceinvoke r1.<java.util.List: java.util.ListIterator listIterator()>();
        i2 = 0;

     label5:
        if i2 >= i0 goto label6;

        interfaceinvoke r6.<java.util.ListIterator: java.lang.Object next()>();
        $r8 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();
        interfaceinvoke r6.<java.util.ListIterator: void set(java.lang.Object)>($r8);
        i2 = i2 + 1;
        goto label5;

     label6:
        return;
    }

    public static java.lang.Object min(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        java.lang.Object r2, r3;
        boolean $z0;
        java.lang.Comparable $r4;
        int $i0;

        r0 := @parameter0: java.util.Collection;
        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();
        r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

     label0:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        $r4 = (java.lang.Comparable) r3;
        $i0 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r2);
        if $i0 >= 0 goto label1;

        r2 = r3;

     label1:
        goto label0;

     label2:
        return r2;
    }

    public static java.lang.Object min(java.util.Collection, java.util.Comparator)
    {
        java.util.Collection r0;
        java.util.Comparator r1;
        java.util.Iterator r2;
        java.lang.Object r3, r4, $r5;
        boolean $z0;
        int $i0;

        r0 := @parameter0: java.util.Collection;
        r1 := @parameter1: java.util.Comparator;
        if r1 != null goto label0;

        $r5 = staticinvoke <java.util.Collections: java.lang.Object min(java.util.Collection)>(r0);
        return $r5;

     label0:
        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();
        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $i0 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r4, r3);
        if $i0 >= 0 goto label2;

        r3 = r4;

     label2:
        goto label1;

     label3:
        return r3;
    }

    public static java.lang.Object max(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        java.lang.Object r2, r3;
        boolean $z0;
        java.lang.Comparable $r4;
        int $i0;

        r0 := @parameter0: java.util.Collection;
        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();
        r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

     label0:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        $r4 = (java.lang.Comparable) r3;
        $i0 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r2);
        if $i0 <= 0 goto label1;

        r2 = r3;

     label1:
        goto label0;

     label2:
        return r2;
    }

    public static java.lang.Object max(java.util.Collection, java.util.Comparator)
    {
        java.util.Collection r0;
        java.util.Comparator r1;
        java.util.Iterator r2;
        java.lang.Object r3, r4, $r5;
        boolean $z0;
        int $i0;

        r0 := @parameter0: java.util.Collection;
        r1 := @parameter1: java.util.Comparator;
        if r1 != null goto label0;

        $r5 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection)>(r0);
        return $r5;

     label0:
        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();
        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $i0 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r4, r3);
        if $i0 <= 0 goto label2;

        r3 = r4;

     label2:
        goto label1;

     label3:
        return r3;
    }

    public static void rotate(java.util.List, int)
    {
        java.util.List r0;
        int i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.util.List;
        i0 := @parameter1: int;
        $z0 = r0 instanceof java.util.RandomAccess;
        if $z0 != 0 goto label0;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();
        if $i1 >= 100 goto label1;

     label0:
        staticinvoke <java.util.Collections: void rotate1(java.util.List,int)>(r0, i0);
        goto label2;

     label1:
        staticinvoke <java.util.Collections: void rotate2(java.util.List,int)>(r0, i0);

     label2:
        return;
    }

    private static void rotate1(java.util.List, int)
    {
        java.util.List r0;
        int i0, i1, i2, i3, i4, i5;
        java.lang.Object r1;

        r0 := @parameter0: java.util.List;
        i0 := @parameter1: int;
        i1 = interfaceinvoke r0.<java.util.List: int size()>();
        if i1 != 0 goto label0;

        return;

     label0:
        i5 = i0 % i1;
        if i5 >= 0 goto label1;

        i5 = i5 + i1;

     label1:
        if i5 != 0 goto label2;

        return;

     label2:
        i2 = 0;
        i3 = 0;

     label3:
        if i3 == i1 goto label6;

        r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);
        i4 = i2;

     label4:
        i4 = i4 + i5;
        if i4 < i1 goto label5;

        i4 = i4 - i1;

     label5:
        r1 = interfaceinvoke r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i4, r1);
        i3 = i3 + 1;
        if i4 != i2 goto label4;

        i2 = i2 + 1;
        goto label3;

     label6:
        return;
    }

    private static void rotate2(java.util.List, int)
    {
        java.util.List r0, $r1, $r2;
        int i0, i1, i2, $i3;

        r0 := @parameter0: java.util.List;
        i0 := @parameter1: int;
        i1 = interfaceinvoke r0.<java.util.List: int size()>();
        if i1 != 0 goto label0;

        return;

     label0:
        $i3 = neg i0;
        i2 = $i3 % i1;
        if i2 >= 0 goto label1;

        i2 = i2 + i1;

     label1:
        if i2 != 0 goto label2;

        return;

     label2:
        $r1 = interfaceinvoke r0.<java.util.List: java.util.List subList(int,int)>(0, i2);
        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r1);
        $r2 = interfaceinvoke r0.<java.util.List: java.util.List subList(int,int)>(i2, i1);
        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r2);
        staticinvoke <java.util.Collections: void reverse(java.util.List)>(r0);
        return;
    }

    public static boolean replaceAll(java.util.List, java.lang.Object, java.lang.Object)
    {
        java.util.List r0;
        java.lang.Object r1, r2, $r3, $r5, $r8, $r9;
        boolean z0, $z1, $z2, $z3;
        int i0, i1, i2, i3, i4;
        java.util.ListIterator r7;

        r0 := @parameter0: java.util.List;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.lang.Object;
        z0 = 0;
        i0 = interfaceinvoke r0.<java.util.List: int size()>();
        if i0 < 11 goto label0;

        $z1 = r0 instanceof java.util.RandomAccess;
        if $z1 == 0 goto label8;

     label0:
        if r1 != null goto label4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);
        if $r3 != null goto label2;

        interfaceinvoke r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, r2);
        z0 = 1;

     label2:
        i1 = i1 + 1;
        goto label1;

     label3:
        goto label15;

     label4:
        i3 = 0;

     label5:
        if i3 >= i0 goto label7;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);
        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);
        if $z2 == 0 goto label6;

        interfaceinvoke r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i3, r2);
        z0 = 1;

     label6:
        i3 = i3 + 1;
        goto label5;

     label7:
        goto label15;

     label8:
        r7 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();
        if r1 != null goto label12;

        i2 = 0;

     label9:
        if i2 >= i0 goto label11;

        $r8 = interfaceinvoke r7.<java.util.ListIterator: java.lang.Object next()>();
        if $r8 != null goto label10;

        interfaceinvoke r7.<java.util.ListIterator: void set(java.lang.Object)>(r2);
        z0 = 1;

     label10:
        i2 = i2 + 1;
        goto label9;

     label11:
        goto label15;

     label12:
        i4 = 0;

     label13:
        if i4 >= i0 goto label15;

        $r9 = interfaceinvoke r7.<java.util.ListIterator: java.lang.Object next()>();
        $z3 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r9);
        if $z3 == 0 goto label14;

        interfaceinvoke r7.<java.util.ListIterator: void set(java.lang.Object)>(r2);
        z0 = 1;

     label14:
        i4 = i4 + 1;
        goto label13;

     label15:
        return z0;
    }

    public static int indexOfSubList(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r2, $r3, $r6, $r7;
        java.util.ListIterator r4, r5;

        r0 := @parameter0: java.util.List;
        r1 := @parameter1: java.util.List;
        i0 = interfaceinvoke r0.<java.util.List: int size()>();
        i1 = interfaceinvoke r1.<java.util.List: int size()>();
        i2 = i0 - i1;
        if i0 < 35 goto label0;

        $z0 = r0 instanceof java.util.RandomAccess;
        if $z0 == 0 goto label7;

        $z1 = r1 instanceof java.util.RandomAccess;
        if $z1 == 0 goto label7;

     label0:
        i3 = 0;

     label1:
        if i3 > i2 goto label6;

        i4 = 0;
        i5 = i3;

     label2:
        if i4 >= i1 goto label4;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i4);
        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i5);
        $z2 = staticinvoke <java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>($r2, $r3);
        if $z2 != 0 goto label3;

        goto label5;

     label3:
        i4 = i4 + 1;
        i5 = i5 + 1;
        goto label2;

     label4:
        return i3;

     label5:
        i3 = i3 + 1;
        goto label1;

     label6:
        goto label15;

     label7:
        r4 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();
        i8 = 0;

     label8:
        if i8 > i2 goto label15;

        r5 = interfaceinvoke r1.<java.util.List: java.util.ListIterator listIterator()>();
        i6 = 0;

     label9:
        if i6 >= i1 goto label13;

        $r6 = interfaceinvoke r5.<java.util.ListIterator: java.lang.Object next()>();
        $r7 = interfaceinvoke r4.<java.util.ListIterator: java.lang.Object next()>();
        $z3 = staticinvoke <java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>($r6, $r7);
        if $z3 != 0 goto label12;

        i7 = 0;

     label10:
        if i7 >= i6 goto label11;

        interfaceinvoke r4.<java.util.ListIterator: java.lang.Object previous()>();
        i7 = i7 + 1;
        goto label10;

     label11:
        goto label14;

     label12:
        i6 = i6 + 1;
        goto label9;

     label13:
        return i8;

     label14:
        i8 = i8 + 1;
        goto label8;

     label15:
        return -1;
    }

    public static int lastIndexOfSubList(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2, $r3, $r6, $r7;
        java.util.ListIterator r4, r5;

        r0 := @parameter0: java.util.List;
        r1 := @parameter1: java.util.List;
        i0 = interfaceinvoke r0.<java.util.List: int size()>();
        i1 = interfaceinvoke r1.<java.util.List: int size()>();
        i2 = i0 - i1;
        if i0 < 35 goto label0;

        $z0 = r0 instanceof java.util.RandomAccess;
        if $z0 == 0 goto label7;

     label0:
        i3 = i2;

     label1:
        if i3 < 0 goto label6;

        i4 = 0;
        i5 = i3;

     label2:
        if i4 >= i1 goto label4;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i4);
        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i5);
        $z1 = staticinvoke <java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>($r2, $r3);
        if $z1 != 0 goto label3;

        goto label5;

     label3:
        i4 = i4 + 1;
        i5 = i5 + 1;
        goto label2;

     label4:
        return i3;

     label5:
        i3 = i3 + -1;
        goto label1;

     label6:
        goto label16;

     label7:
        if i2 >= 0 goto label8;

        return -1;

     label8:
        r4 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator(int)>(i2);
        i8 = i2;

     label9:
        if i8 < 0 goto label16;

        r5 = interfaceinvoke r1.<java.util.List: java.util.ListIterator listIterator()>();
        i6 = 0;

     label10:
        if i6 >= i1 goto label14;

        $r6 = interfaceinvoke r5.<java.util.ListIterator: java.lang.Object next()>();
        $r7 = interfaceinvoke r4.<java.util.ListIterator: java.lang.Object next()>();
        $z2 = staticinvoke <java.util.Collections: boolean eq(java.lang.Object,java.lang.Object)>($r6, $r7);
        if $z2 != 0 goto label13;

        if i8 == 0 goto label15;

        i7 = 0;

     label11:
        $i9 = i6 + 1;
        if i7 > $i9 goto label12;

        interfaceinvoke r4.<java.util.ListIterator: java.lang.Object previous()>();
        i7 = i7 + 1;
        goto label11;

     label12:
        goto label15;

     label13:
        i6 = i6 + 1;
        goto label10;

     label14:
        return i8;

     label15:
        i8 = i8 + -1;
        goto label9;

     label16:
        return -1;
    }

    public static java.util.Collection unmodifiableCollection(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Collections$UnmodifiableCollection $r1;

        r0 := @parameter0: java.util.Collection;
        $r1 = new java.util.Collections$UnmodifiableCollection;
        specialinvoke $r1.<java.util.Collections$UnmodifiableCollection: void <init>(java.util.Collection)>(r0);
        return $r1;
    }

    public static java.util.Set unmodifiableSet(java.util.Set)
    {
        java.util.Set r0;
        java.util.Collections$UnmodifiableSet $r1;

        r0 := @parameter0: java.util.Set;
        $r1 = new java.util.Collections$UnmodifiableSet;
        specialinvoke $r1.<java.util.Collections$UnmodifiableSet: void <init>(java.util.Set)>(r0);
        return $r1;
    }

    public static java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)
    {
        java.util.SortedSet r0;
        java.util.Collections$UnmodifiableSortedSet $r1;

        r0 := @parameter0: java.util.SortedSet;
        $r1 = new java.util.Collections$UnmodifiableSortedSet;
        specialinvoke $r1.<java.util.Collections$UnmodifiableSortedSet: void <init>(java.util.SortedSet)>(r0);
        return $r1;
    }

    public static java.util.List unmodifiableList(java.util.List)
    {
        java.util.List r0;
        boolean $z0;
        java.util.Collections$UnmodifiableList $r1, r3;
        java.util.Collections$UnmodifiableRandomAccessList r2;

        r0 := @parameter0: java.util.List;
        $z0 = r0 instanceof java.util.RandomAccess;
        if $z0 == 0 goto label0;

        r2 = new java.util.Collections$UnmodifiableRandomAccessList;
        $r1 = r2;
        specialinvoke r2.<java.util.Collections$UnmodifiableRandomAccessList: void <init>(java.util.List)>(r0);
        goto label1;

     label0:
        r3 = new java.util.Collections$UnmodifiableList;
        $r1 = r3;
        specialinvoke r3.<java.util.Collections$UnmodifiableList: void <init>(java.util.List)>(r0);

     label1:
        return $r1;
    }

    public static java.util.Map unmodifiableMap(java.util.Map)
    {
        java.util.Map r0;
        java.util.Collections$UnmodifiableMap $r1;

        r0 := @parameter0: java.util.Map;
        $r1 = new java.util.Collections$UnmodifiableMap;
        specialinvoke $r1.<java.util.Collections$UnmodifiableMap: void <init>(java.util.Map)>(r0);
        return $r1;
    }

    public static java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)
    {
        java.util.SortedMap r0;
        java.util.Collections$UnmodifiableSortedMap $r1;

        r0 := @parameter0: java.util.SortedMap;
        $r1 = new java.util.Collections$UnmodifiableSortedMap;
        specialinvoke $r1.<java.util.Collections$UnmodifiableSortedMap: void <init>(java.util.SortedMap)>(r0);
        return $r1;
    }

    public static java.util.Collection synchronizedCollection(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Collections$SynchronizedCollection $r1;

        r0 := @parameter0: java.util.Collection;
        $r1 = new java.util.Collections$SynchronizedCollection;
        specialinvoke $r1.<java.util.Collections$SynchronizedCollection: void <init>(java.util.Collection)>(r0);
        return $r1;
    }

    static java.util.Collection synchronizedCollection(java.util.Collection, java.lang.Object)
    {
        java.util.Collection r0;
        java.lang.Object r1;
        java.util.Collections$SynchronizedCollection $r2;

        r0 := @parameter0: java.util.Collection;
        r1 := @parameter1: java.lang.Object;
        $r2 = new java.util.Collections$SynchronizedCollection;
        specialinvoke $r2.<java.util.Collections$SynchronizedCollection: void <init>(java.util.Collection,java.lang.Object)>(r0, r1);
        return $r2;
    }

    public static java.util.Set synchronizedSet(java.util.Set)
    {
        java.util.Set r0;
        java.util.Collections$SynchronizedSet $r1;

        r0 := @parameter0: java.util.Set;
        $r1 = new java.util.Collections$SynchronizedSet;
        specialinvoke $r1.<java.util.Collections$SynchronizedSet: void <init>(java.util.Set)>(r0);
        return $r1;
    }

    static java.util.Set synchronizedSet(java.util.Set, java.lang.Object)
    {
        java.util.Set r0;
        java.lang.Object r1;
        java.util.Collections$SynchronizedSet $r2;

        r0 := @parameter0: java.util.Set;
        r1 := @parameter1: java.lang.Object;
        $r2 = new java.util.Collections$SynchronizedSet;
        specialinvoke $r2.<java.util.Collections$SynchronizedSet: void <init>(java.util.Set,java.lang.Object)>(r0, r1);
        return $r2;
    }

    public static java.util.SortedSet synchronizedSortedSet(java.util.SortedSet)
    {
        java.util.SortedSet r0;
        java.util.Collections$SynchronizedSortedSet $r1;

        r0 := @parameter0: java.util.SortedSet;
        $r1 = new java.util.Collections$SynchronizedSortedSet;
        specialinvoke $r1.<java.util.Collections$SynchronizedSortedSet: void <init>(java.util.SortedSet)>(r0);
        return $r1;
    }

    public static java.util.List synchronizedList(java.util.List)
    {
        java.util.List r0;
        boolean $z0;
        java.util.Collections$SynchronizedList $r1, r3;
        java.util.Collections$SynchronizedRandomAccessList r2;

        r0 := @parameter0: java.util.List;
        $z0 = r0 instanceof java.util.RandomAccess;
        if $z0 == 0 goto label0;

        r2 = new java.util.Collections$SynchronizedRandomAccessList;
        $r1 = r2;
        specialinvoke r2.<java.util.Collections$SynchronizedRandomAccessList: void <init>(java.util.List)>(r0);
        goto label1;

     label0:
        r3 = new java.util.Collections$SynchronizedList;
        $r1 = r3;
        specialinvoke r3.<java.util.Collections$SynchronizedList: void <init>(java.util.List)>(r0);

     label1:
        return $r1;
    }

    static java.util.List synchronizedList(java.util.List, java.lang.Object)
    {
        java.util.List r0;
        java.lang.Object r1;
        boolean $z0;
        java.util.Collections$SynchronizedList $r2, r4;
        java.util.Collections$SynchronizedRandomAccessList r3;

        r0 := @parameter0: java.util.List;
        r1 := @parameter1: java.lang.Object;
        $z0 = r0 instanceof java.util.RandomAccess;
        if $z0 == 0 goto label0;

        r3 = new java.util.Collections$SynchronizedRandomAccessList;
        $r2 = r3;
        specialinvoke r3.<java.util.Collections$SynchronizedRandomAccessList: void <init>(java.util.List,java.lang.Object)>(r0, r1);
        goto label1;

     label0:
        r4 = new java.util.Collections$SynchronizedList;
        $r2 = r4;
        specialinvoke r4.<java.util.Collections$SynchronizedList: void <init>(java.util.List,java.lang.Object)>(r0, r1);

     label1:
        return $r2;
    }

    public static java.util.Map synchronizedMap(java.util.Map)
    {
        java.util.Map r0;
        java.util.Collections$SynchronizedMap $r1;

        r0 := @parameter0: java.util.Map;
        $r1 = new java.util.Collections$SynchronizedMap;
        specialinvoke $r1.<java.util.Collections$SynchronizedMap: void <init>(java.util.Map)>(r0);
        return $r1;
    }

    public static java.util.SortedMap synchronizedSortedMap(java.util.SortedMap)
    {
        java.util.SortedMap r0;
        java.util.Collections$SynchronizedSortedMap $r1;

        r0 := @parameter0: java.util.SortedMap;
        $r1 = new java.util.Collections$SynchronizedSortedMap;
        specialinvoke $r1.<java.util.Collections$SynchronizedSortedMap: void <init>(java.util.SortedMap)>(r0);
        return $r1;
    }

    public static java.util.Collection checkedCollection(java.util.Collection, java.lang.Class)
    {
        java.util.Collection r0;
        java.lang.Class r1;
        java.util.Collections$CheckedCollection $r2;

        r0 := @parameter0: java.util.Collection;
        r1 := @parameter1: java.lang.Class;
        $r2 = new java.util.Collections$CheckedCollection;
        specialinvoke $r2.<java.util.Collections$CheckedCollection: void <init>(java.util.Collection,java.lang.Class)>(r0, r1);
        return $r2;
    }

    static java.lang.Object[] zeroLengthArray(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Object $r1;
        java.lang.Object[] $r2, $r3;

        r0 := @parameter0: java.lang.Class;
        $r1 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r0, 0);
        $r2 = (java.lang.Object[]) $r1;
        $r3 = (java.lang.Object[]) $r2;
        return $r3;
    }

    public static java.util.Set checkedSet(java.util.Set, java.lang.Class)
    {
        java.util.Set r0;
        java.lang.Class r1;
        java.util.Collections$CheckedSet $r2;

        r0 := @parameter0: java.util.Set;
        r1 := @parameter1: java.lang.Class;
        $r2 = new java.util.Collections$CheckedSet;
        specialinvoke $r2.<java.util.Collections$CheckedSet: void <init>(java.util.Set,java.lang.Class)>(r0, r1);
        return $r2;
    }

    public static java.util.SortedSet checkedSortedSet(java.util.SortedSet, java.lang.Class)
    {
        java.util.SortedSet r0;
        java.lang.Class r1;
        java.util.Collections$CheckedSortedSet $r2;

        r0 := @parameter0: java.util.SortedSet;
        r1 := @parameter1: java.lang.Class;
        $r2 = new java.util.Collections$CheckedSortedSet;
        specialinvoke $r2.<java.util.Collections$CheckedSortedSet: void <init>(java.util.SortedSet,java.lang.Class)>(r0, r1);
        return $r2;
    }

    public static java.util.List checkedList(java.util.List, java.lang.Class)
    {
        java.util.List r0;
        java.lang.Class r1;
        boolean $z0;
        java.util.Collections$CheckedList $r2, r4;
        java.util.Collections$CheckedRandomAccessList r3;

        r0 := @parameter0: java.util.List;
        r1 := @parameter1: java.lang.Class;
        $z0 = r0 instanceof java.util.RandomAccess;
        if $z0 == 0 goto label0;

        r3 = new java.util.Collections$CheckedRandomAccessList;
        $r2 = r3;
        specialinvoke r3.<java.util.Collections$CheckedRandomAccessList: void <init>(java.util.List,java.lang.Class)>(r0, r1);
        goto label1;

     label0:
        r4 = new java.util.Collections$CheckedList;
        $r2 = r4;
        specialinvoke r4.<java.util.Collections$CheckedList: void <init>(java.util.List,java.lang.Class)>(r0, r1);

     label1:
        return $r2;
    }

    public static java.util.Map checkedMap(java.util.Map, java.lang.Class, java.lang.Class)
    {
        java.util.Map r0;
        java.lang.Class r1, r2;
        java.util.Collections$CheckedMap $r3;

        r0 := @parameter0: java.util.Map;
        r1 := @parameter1: java.lang.Class;
        r2 := @parameter2: java.lang.Class;
        $r3 = new java.util.Collections$CheckedMap;
        specialinvoke $r3.<java.util.Collections$CheckedMap: void <init>(java.util.Map,java.lang.Class,java.lang.Class)>(r0, r1, r2);
        return $r3;
    }

    public static java.util.SortedMap checkedSortedMap(java.util.SortedMap, java.lang.Class, java.lang.Class)
    {
        java.util.SortedMap r0;
        java.lang.Class r1, r2;
        java.util.Collections$CheckedSortedMap $r3;

        r0 := @parameter0: java.util.SortedMap;
        r1 := @parameter1: java.lang.Class;
        r2 := @parameter2: java.lang.Class;
        $r3 = new java.util.Collections$CheckedSortedMap;
        specialinvoke $r3.<java.util.Collections$CheckedSortedMap: void <init>(java.util.SortedMap,java.lang.Class,java.lang.Class)>(r0, r1, r2);
        return $r3;
    }

    public static java.util.Iterator emptyIterator()
    {
        java.util.Collections$EmptyIterator $r0;

        $r0 = <java.util.Collections$EmptyIterator: java.util.Collections$EmptyIterator EMPTY_ITERATOR>;
        return $r0;
    }

    public static java.util.ListIterator emptyListIterator()
    {
        java.util.Collections$EmptyListIterator $r0;

        $r0 = <java.util.Collections$EmptyListIterator: java.util.Collections$EmptyListIterator EMPTY_ITERATOR>;
        return $r0;
    }

    public static java.util.Enumeration emptyEnumeration()
    {
        java.util.Collections$EmptyEnumeration $r0;

        $r0 = <java.util.Collections$EmptyEnumeration: java.util.Collections$EmptyEnumeration EMPTY_ENUMERATION>;
        return $r0;
    }

    public static final java.util.Set emptySet()
    {
        java.util.Set $r0;

        $r0 = <java.util.Collections: java.util.Set EMPTY_SET>;
        return $r0;
    }

    public static final java.util.List emptyList()
    {
        java.util.List $r0;

        $r0 = <java.util.Collections: java.util.List EMPTY_LIST>;
        return $r0;
    }

    public static final java.util.Map emptyMap()
    {
        java.util.Map $r0;

        $r0 = <java.util.Collections: java.util.Map EMPTY_MAP>;
        return $r0;
    }

    public static java.util.Set singleton(java.lang.Object)
    {
        java.lang.Object r0;
        java.util.Collections$SingletonSet $r1;

        r0 := @parameter0: java.lang.Object;
        $r1 = new java.util.Collections$SingletonSet;
        specialinvoke $r1.<java.util.Collections$SingletonSet: void <init>(java.lang.Object)>(r0);
        return $r1;
    }

    static java.util.Iterator singletonIterator(java.lang.Object)
    {
        java.lang.Object r0;
        java.util.Collections$1 $r1;

        r0 := @parameter0: java.lang.Object;
        $r1 = new java.util.Collections$1;
        specialinvoke $r1.<java.util.Collections$1: void <init>(java.lang.Object)>(r0);
        return $r1;
    }

    public static java.util.List singletonList(java.lang.Object)
    {
        java.lang.Object r0;
        java.util.Collections$SingletonList $r1;

        r0 := @parameter0: java.lang.Object;
        $r1 = new java.util.Collections$SingletonList;
        specialinvoke $r1.<java.util.Collections$SingletonList: void <init>(java.lang.Object)>(r0);
        return $r1;
    }

    public static java.util.Map singletonMap(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        java.util.Collections$SingletonMap $r2;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        $r2 = new java.util.Collections$SingletonMap;
        specialinvoke $r2.<java.util.Collections$SingletonMap: void <init>(java.lang.Object,java.lang.Object)>(r0, r1);
        return $r2;
    }

    public static java.util.List nCopies(int, java.lang.Object)
    {
        int i0;
        java.lang.Object r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r5;
        java.util.Collections$CopiesList $r6;

        i0 := @parameter0: int;
        r0 := @parameter1: java.lang.Object;
        if i0 >= 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("List length = ");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r2;

     label0:
        $r6 = new java.util.Collections$CopiesList;
        specialinvoke $r6.<java.util.Collections$CopiesList: void <init>(int,java.lang.Object)>(i0, r0);
        return $r6;
    }

    public static java.util.Comparator reverseOrder()
    {
        java.util.Collections$ReverseComparator $r0;

        $r0 = <java.util.Collections$ReverseComparator: java.util.Collections$ReverseComparator REVERSE_ORDER>;
        return $r0;
    }

    public static java.util.Comparator reverseOrder(java.util.Comparator)
    {
        java.util.Comparator r0, $r1, $r3;
        boolean $z0;
        java.util.Collections$ReverseComparator2 $r2, $r4;

        r0 := @parameter0: java.util.Comparator;
        if r0 != null goto label0;

        $r1 = staticinvoke <java.util.Collections: java.util.Comparator reverseOrder()>();
        return $r1;

     label0:
        $z0 = r0 instanceof java.util.Collections$ReverseComparator2;
        if $z0 == 0 goto label1;

        $r2 = (java.util.Collections$ReverseComparator2) r0;
        $r3 = $r2.<java.util.Collections$ReverseComparator2: java.util.Comparator 'cmp'>;
        return $r3;

     label1:
        $r4 = new java.util.Collections$ReverseComparator2;
        specialinvoke $r4.<java.util.Collections$ReverseComparator2: void <init>(java.util.Comparator)>(r0);
        return $r4;
    }

    public static java.util.Enumeration enumeration(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Collections$2 $r1;

        r0 := @parameter0: java.util.Collection;
        $r1 = new java.util.Collections$2;
        specialinvoke $r1.<java.util.Collections$2: void <init>(java.util.Collection)>(r0);
        return $r1;
    }

    public static java.util.ArrayList list(java.util.Enumeration)
    {
        java.util.Enumeration r0;
        java.util.ArrayList $r1, r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @parameter0: java.util.Enumeration;
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>()>();
        r2 = $r1;

     label0:
        $z0 = interfaceinvoke r0.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke r0.<java.util.Enumeration: java.lang.Object nextElement()>();
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);
        goto label0;

     label1:
        return r2;
    }

    static boolean eq(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        if r0 != null goto label1;

        if r1 != null goto label0;

        $z0 = 1;
        goto label2;

     label0:
        $z0 = 0;
        goto label2;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

     label2:
        return $z0;
    }

    public static int frequency(java.util.Collection, java.lang.Object)
    {
        java.util.Collection r0;
        java.lang.Object r1, r3, r5;
        int i0;
        java.util.Iterator r2, r4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.Collection;
        r1 := @parameter1: java.lang.Object;
        i0 = 0;
        if r1 != null goto label3;

        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        if r3 != null goto label1;

        i0 = i0 + 1;

     label1:
        goto label0;

     label2:
        goto label6;

     label3:
        r4 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label6;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);
        if $z2 == 0 goto label5;

        i0 = i0 + 1;

     label5:
        goto label4;

     label6:
        return i0;
    }

    public static boolean disjoint(java.util.Collection, java.util.Collection)
    {
        java.util.Collection r0, r1, r2, r3;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator r4;
        java.lang.Object r5;

        r0 := @parameter0: java.util.Collection;
        r1 := @parameter1: java.util.Collection;
        r2 = r1;
        r3 = r0;
        $z0 = r0 instanceof java.util.Set;
        if $z0 == 0 goto label0;

        r3 = r1;
        r2 = r0;
        goto label3;

     label0:
        $z1 = r1 instanceof java.util.Set;
        if $z1 != 0 goto label3;

        i0 = interfaceinvoke r0.<java.util.Collection: int size()>();
        i1 = interfaceinvoke r1.<java.util.Collection: int size()>();
        if i0 == 0 goto label1;

        if i1 != 0 goto label2;

     label1:
        return 1;

     label2:
        if i0 <= i1 goto label3;

        r3 = r1;
        r2 = r0;

     label3:
        r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label6;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        $z3 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>(r5);
        if $z3 == 0 goto label5;

        return 0;

     label5:
        goto label4;

     label6:
        return 1;
    }

    public static transient boolean addAll(java.util.Collection, java.lang.Object[])
    {
        java.util.Collection r0;
        java.lang.Object[] r1, r2;
        boolean z0, $z1;
        int i0, i1;
        java.lang.Object r3;

        r0 := @parameter0: java.util.Collection;
        r1 := @parameter1: java.lang.Object[];
        z0 = 0;
        r2 = r1;
        i0 = lengthof r2;
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        r3 = r2[i1];
        $z1 = interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>(r3);
        z0 = z0 | $z1;
        i1 = i1 + 1;
        goto label0;

     label1:
        return z0;
    }

    public static java.util.Set newSetFromMap(java.util.Map)
    {
        java.util.Map r0;
        java.util.Collections$SetFromMap $r1;

        r0 := @parameter0: java.util.Map;
        $r1 = new java.util.Collections$SetFromMap;
        specialinvoke $r1.<java.util.Collections$SetFromMap: void <init>(java.util.Map)>(r0);
        return $r1;
    }

    public static java.util.Queue asLifoQueue(java.util.Deque)
    {
        java.util.Deque r0;
        java.util.Collections$AsLIFOQueue $r1;

        r0 := @parameter0: java.util.Deque;
        $r1 = new java.util.Collections$AsLIFOQueue;
        specialinvoke $r1.<java.util.Collections$AsLIFOQueue: void <init>(java.util.Deque)>(r0);
        return $r1;
    }

    static void <clinit>()
    {
        java.util.Collections$EmptySet $r0;
        java.util.Collections$EmptyList $r1;
        java.util.Collections$EmptyMap $r2;

        $r0 = new java.util.Collections$EmptySet;
        specialinvoke $r0.<java.util.Collections$EmptySet: void <init>(java.util.Collections$1)>(null);
        <java.util.Collections: java.util.Set EMPTY_SET> = $r0;
        $r1 = new java.util.Collections$EmptyList;
        specialinvoke $r1.<java.util.Collections$EmptyList: void <init>(java.util.Collections$1)>(null);
        <java.util.Collections: java.util.List EMPTY_LIST> = $r1;
        $r2 = new java.util.Collections$EmptyMap;
        specialinvoke $r2.<java.util.Collections$EmptyMap: void <init>(java.util.Collections$1)>(null);
        <java.util.Collections: java.util.Map EMPTY_MAP> = $r2;
        return;
    }
}
