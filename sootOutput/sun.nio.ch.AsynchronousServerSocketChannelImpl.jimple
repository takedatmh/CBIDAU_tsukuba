abstract class sun.nio.ch.AsynchronousServerSocketChannelImpl extends java.nio.channels.AsynchronousServerSocketChannel implements sun.nio.ch.Cancellable, sun.nio.ch.Groupable
{
    protected final java.io.FileDescriptor fd;
    protected volatile java.net.InetSocketAddress localAddress;
    private final java.lang.Object stateLock;
    private java.util.concurrent.locks.ReadWriteLock closeLock;
    private volatile boolean open;
    private volatile boolean acceptKilled;
    private boolean isReuseAddress;

    void <init>(sun.nio.ch.AsynchronousChannelGroupImpl)
    {
        sun.nio.ch.AsynchronousServerSocketChannelImpl r0;
        sun.nio.ch.AsynchronousChannelGroupImpl r1;
        java.nio.channels.spi.AsynchronousChannelProvider $r2;
        java.lang.Object $r3;
        java.util.concurrent.locks.ReentrantReadWriteLock $r4;
        java.io.FileDescriptor $r5;

        r0 := @this: sun.nio.ch.AsynchronousServerSocketChannelImpl;
        r1 := @parameter0: sun.nio.ch.AsynchronousChannelGroupImpl;
        $r2 = virtualinvoke r1.<sun.nio.ch.AsynchronousChannelGroupImpl: java.nio.channels.spi.AsynchronousChannelProvider provider()>();
        specialinvoke r0.<java.nio.channels.AsynchronousServerSocketChannel: void <init>(java.nio.channels.spi.AsynchronousChannelProvider)>($r2);
        r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.net.InetSocketAddress localAddress> = null;
        $r3 = new java.lang.Object;
        specialinvoke $r3.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.lang.Object stateLock> = $r3;
        $r4 = new java.util.concurrent.locks.ReentrantReadWriteLock;
        specialinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();
        r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock> = $r4;
        r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: boolean open> = 1;
        $r5 = staticinvoke <sun.nio.ch.Net: java.io.FileDescriptor serverSocket(boolean)>(1);
        r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.io.FileDescriptor fd> = $r5;
        return;
    }

    public final boolean isOpen()
    {
        sun.nio.ch.AsynchronousServerSocketChannelImpl r0;
        boolean $z0;

        r0 := @this: sun.nio.ch.AsynchronousServerSocketChannelImpl;
        $z0 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: boolean open>;
        return $z0;
    }

    final void begin() throws java.io.IOException
    {
        sun.nio.ch.AsynchronousServerSocketChannelImpl r0;
        java.util.concurrent.locks.ReadWriteLock $r1;
        java.util.concurrent.locks.Lock $r2;
        boolean $z0;
        java.nio.channels.ClosedChannelException $r3;

        r0 := @this: sun.nio.ch.AsynchronousServerSocketChannelImpl;
        $r1 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock>;
        $r2 = interfaceinvoke $r1.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();
        $z0 = virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label0;

        $r3 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r3.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r3;

     label0:
        return;
    }

    final void end()
    {
        sun.nio.ch.AsynchronousServerSocketChannelImpl r0;
        java.util.concurrent.locks.ReadWriteLock $r1;
        java.util.concurrent.locks.Lock $r2;

        r0 := @this: sun.nio.ch.AsynchronousServerSocketChannelImpl;
        $r1 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock>;
        $r2 = interfaceinvoke $r1.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();
        return;
    }

    abstract void implClose() throws java.io.IOException;

    public final void close() throws java.io.IOException
    {
        sun.nio.ch.AsynchronousServerSocketChannelImpl r0;
        java.lang.Throwable r1, $r8;
        java.util.concurrent.locks.ReadWriteLock $r2, $r4, $r6, $r9;
        java.util.concurrent.locks.Lock $r3, $r5, $r7, $r10;
        boolean $z0;

        r0 := @this: sun.nio.ch.AsynchronousServerSocketChannelImpl;
        $r2 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock>;
        $r3 = interfaceinvoke $r2.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        $z0 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: boolean open>;
        if $z0 != 0 goto label2;

     label1:
        $r4 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock>;
        $r5 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();
        return;

     label2:
        r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: boolean open> = 0;

     label3:
        $r6 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock>;
        $r7 = interfaceinvoke $r6.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>();
        goto label7;

     label4:
        $r8 := @caughtexception;

     label5:
        r1 = $r8;

     label6:
        $r9 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock>;
        $r10 = interfaceinvoke $r9.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r10.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r1;

     label7:
        virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: void implClose()>();
        return;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    abstract java.util.concurrent.Future implAccept(java.lang.Object, java.nio.channels.CompletionHandler);

    public final java.util.concurrent.Future accept()
    {
        sun.nio.ch.AsynchronousServerSocketChannelImpl r0;
        java.util.concurrent.Future $r1;

        r0 := @this: sun.nio.ch.AsynchronousServerSocketChannelImpl;
        $r1 = virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.util.concurrent.Future implAccept(java.lang.Object,java.nio.channels.CompletionHandler)>(null, null);
        return $r1;
    }

    public final void accept(java.lang.Object, java.nio.channels.CompletionHandler)
    {
        sun.nio.ch.AsynchronousServerSocketChannelImpl r0;
        java.lang.Object r1;
        java.nio.channels.CompletionHandler r2;
        java.lang.NullPointerException $r3;

        r0 := @this: sun.nio.ch.AsynchronousServerSocketChannelImpl;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.nio.channels.CompletionHandler;
        if r2 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("\'handler\' is null");
        throw $r3;

     label0:
        virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.util.concurrent.Future implAccept(java.lang.Object,java.nio.channels.CompletionHandler)>(r1, r2);
        return;
    }

    final boolean isAcceptKilled()
    {
        sun.nio.ch.AsynchronousServerSocketChannelImpl r0;
        boolean $z0;

        r0 := @this: sun.nio.ch.AsynchronousServerSocketChannelImpl;
        $z0 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: boolean acceptKilled>;
        return $z0;
    }

    public final void onCancel(sun.nio.ch.PendingFuture)
    {
        sun.nio.ch.AsynchronousServerSocketChannelImpl r0;
        sun.nio.ch.PendingFuture r1;

        r0 := @this: sun.nio.ch.AsynchronousServerSocketChannelImpl;
        r1 := @parameter0: sun.nio.ch.PendingFuture;
        r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: boolean acceptKilled> = 1;
        return;
    }

    public final java.nio.channels.AsynchronousServerSocketChannel bind(java.net.SocketAddress, int) throws java.io.IOException
    {
        sun.nio.ch.AsynchronousServerSocketChannelImpl r0;
        java.net.SocketAddress r1;
        int i0, $i1, $i2, $i3, $i4;
        java.net.InetSocketAddress r2, $r7, $r9, $r17;
        java.lang.SecurityManager r3;
        java.lang.Object r4, $r8;
        java.lang.Throwable r5, r6, $r18, $r19;
        java.nio.channels.AlreadyBoundException $r10;
        java.io.FileDescriptor $r11, $r13, $r15, $r16;
        java.net.InetAddress $r12, $r14;

        r0 := @this: sun.nio.ch.AsynchronousServerSocketChannelImpl;
        r1 := @parameter0: java.net.SocketAddress;
        i0 := @parameter1: int;
        if r1 != null goto label0;

        $r7 = new java.net.InetSocketAddress;
        specialinvoke $r7.<java.net.InetSocketAddress: void <init>(int)>(0);
        goto label1;

     label0:
        $r7 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress checkAddress(java.net.SocketAddress)>(r1);

     label1:
        r2 = $r7;
        r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r3 == null goto label2;

        $i1 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();
        virtualinvoke r3.<java.lang.SecurityManager: void checkListen(int)>($i1);

     label2:
        virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: void begin()>();
        $r8 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.lang.Object stateLock>;
        r4 = $r8;
        entermonitor $r8;

     label3:
        $r9 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.net.InetSocketAddress localAddress>;
        if $r9 == null goto label4;

        $r10 = new java.nio.channels.AlreadyBoundException;
        specialinvoke $r10.<java.nio.channels.AlreadyBoundException: void <init>()>();
        throw $r10;

     label4:
        $r11 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.io.FileDescriptor fd>;
        $r12 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $i2 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();
        staticinvoke <sun.net.NetHooks: void beforeTcpBind(java.io.FileDescriptor,java.net.InetAddress,int)>($r11, $r12, $i2);
        $r13 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.io.FileDescriptor fd>;
        $r14 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $i3 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();
        staticinvoke <sun.nio.ch.Net: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>($r13, $r14, $i3);
        $r15 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.io.FileDescriptor fd>;
        if i0 >= 1 goto label5;

        $i4 = 50;
        goto label6;

     label5:
        $i4 = i0;

     label6:
        staticinvoke <sun.nio.ch.Net: void listen(java.io.FileDescriptor,int)>($r15, $i4);
        $r16 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.io.FileDescriptor fd>;
        $r17 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress localAddress(java.io.FileDescriptor)>($r16);
        r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.net.InetSocketAddress localAddress> = $r17;
        exitmonitor r4;

     label7:
        goto label11;

     label8:
        $r18 := @caughtexception;

     label9:
        r5 = $r18;
        exitmonitor r4;

     label10:
        throw r5;

     label11:
        virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: void end()>();
        goto label15;

     label12:
        $r19 := @caughtexception;

     label13:
        r6 = $r19;

     label14:
        virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: void end()>();
        throw r6;

     label15:
        return r0;

        catch java.lang.Throwable from label3 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
        catch java.lang.Throwable from label2 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public final java.net.SocketAddress getLocalAddress() throws java.io.IOException
    {
        sun.nio.ch.AsynchronousServerSocketChannelImpl r0;
        boolean $z0;
        java.nio.channels.ClosedChannelException $r1;
        java.net.InetSocketAddress $r2, $r3;

        r0 := @this: sun.nio.ch.AsynchronousServerSocketChannelImpl;
        $z0 = virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label0;

        $r1 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r1.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r1;

     label0:
        $r2 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.net.InetSocketAddress localAddress>;
        $r3 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress getRevealedLocalAddress(java.net.InetSocketAddress)>($r2);
        return $r3;
    }

    public final java.nio.channels.AsynchronousServerSocketChannel setOption(java.net.SocketOption, java.lang.Object) throws java.io.IOException
    {
        sun.nio.ch.AsynchronousServerSocketChannelImpl r0, r4;
        java.net.SocketOption r1, $r13;
        java.lang.Object r2;
        java.lang.StringBuilder $r3, $r9, $r10, $r11;
        java.lang.Throwable r5, $r17;
        java.lang.NullPointerException $r6;
        java.util.Set $r7;
        boolean $z0, $z1, $z2;
        java.lang.UnsupportedOperationException $r8;
        java.lang.String $r12;
        java.lang.Boolean $r14;
        java.io.FileDescriptor $r15;
        java.net.ProtocolFamily $r16;

        r0 := @this: sun.nio.ch.AsynchronousServerSocketChannelImpl;
        r1 := @parameter0: java.net.SocketOption;
        r2 := @parameter1: java.lang.Object;
        if r1 != null goto label0;

        $r6 = new java.lang.NullPointerException;
        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();
        throw $r6;

     label0:
        $r7 = virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.util.Set supportedOptions()>();
        $z0 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r1);
        if $z0 != 0 goto label1;

        $r8 = new java.lang.UnsupportedOperationException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not supported");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r12);
        throw $r8;

     label1:
        virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: void begin()>();
        $r13 = <java.net.StandardSocketOptions: java.net.SocketOption SO_REUSEADDR>;
        if r1 != $r13 goto label2;

        $z1 = staticinvoke <sun.nio.ch.Net: boolean useExclusiveBind()>();
        if $z1 == 0 goto label2;

        $r14 = (java.lang.Boolean) r2;
        $z2 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>();
        r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: boolean isReuseAddress> = $z2;
        goto label3;

     label2:
        $r15 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.io.FileDescriptor fd>;
        $r16 = <sun.nio.ch.Net: java.net.ProtocolFamily UNSPEC>;
        staticinvoke <sun.nio.ch.Net: void setSocketOption(java.io.FileDescriptor,java.net.ProtocolFamily,java.net.SocketOption,java.lang.Object)>($r15, $r16, r1, r2);

     label3:
        r4 = r0;

     label4:
        virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: void end()>();
        return r4;

     label5:
        $r17 := @caughtexception;

     label6:
        r5 = $r17;

     label7:
        virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: void end()>();
        throw r5;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public final java.lang.Object getOption(java.net.SocketOption) throws java.io.IOException
    {
        sun.nio.ch.AsynchronousServerSocketChannelImpl r0;
        java.net.SocketOption r1, $r12;
        java.lang.StringBuilder $r2, $r8, $r9, $r10;
        java.lang.Boolean r3;
        java.lang.Throwable r4, $r16;
        java.lang.NullPointerException $r5;
        java.util.Set $r6;
        boolean $z0, $z1, $z2;
        java.lang.UnsupportedOperationException $r7;
        java.lang.String $r11;
        java.io.FileDescriptor $r13;
        java.net.ProtocolFamily $r14;
        java.lang.Object r15;

        r0 := @this: sun.nio.ch.AsynchronousServerSocketChannelImpl;
        r1 := @parameter0: java.net.SocketOption;
        if r1 != null goto label0;

        $r5 = new java.lang.NullPointerException;
        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();
        throw $r5;

     label0:
        $r6 = virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.util.Set supportedOptions()>();
        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r1);
        if $z0 != 0 goto label1;

        $r7 = new java.lang.UnsupportedOperationException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not supported");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r11);
        throw $r7;

     label1:
        virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: void begin()>();
        $r12 = <java.net.StandardSocketOptions: java.net.SocketOption SO_REUSEADDR>;
        if r1 != $r12 goto label3;

        $z1 = staticinvoke <sun.nio.ch.Net: boolean useExclusiveBind()>();
        if $z1 == 0 goto label3;

        $z2 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: boolean isReuseAddress>;
        r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

     label2:
        virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: void end()>();
        return r3;

     label3:
        $r13 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.io.FileDescriptor fd>;
        $r14 = <sun.nio.ch.Net: java.net.ProtocolFamily UNSPEC>;
        r15 = staticinvoke <sun.nio.ch.Net: java.lang.Object getSocketOption(java.io.FileDescriptor,java.net.ProtocolFamily,java.net.SocketOption)>($r13, $r14, r1);

     label4:
        virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: void end()>();
        return r15;

     label5:
        $r16 := @caughtexception;

     label6:
        r4 = $r16;

     label7:
        virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: void end()>();
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public final java.util.Set supportedOptions()
    {
        sun.nio.ch.AsynchronousServerSocketChannelImpl r0;
        java.util.Set $r1;

        r0 := @this: sun.nio.ch.AsynchronousServerSocketChannelImpl;
        $r1 = <sun.nio.ch.AsynchronousServerSocketChannelImpl$DefaultOptionsHolder: java.util.Set defaultOptions>;
        return $r1;
    }

    public final java.lang.String toString()
    {
        sun.nio.ch.AsynchronousServerSocketChannelImpl r0;
        java.lang.StringBuilder $r1, r2;
        java.lang.Class $r3;
        java.lang.String $r4, $r11, $r14;
        boolean $z0;
        java.net.InetSocketAddress $r8, $r10;

        r0 := @this: sun.nio.ch.AsynchronousServerSocketChannelImpl;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        r2 = $r1;
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
        $z0 = virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label0;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("closed");
        goto label2;

     label0:
        $r8 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.net.InetSocketAddress localAddress>;
        if $r8 != null goto label1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unbound");
        goto label2;

     label1:
        $r10 = r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.net.InetSocketAddress localAddress>;
        $r11 = staticinvoke <sun.nio.ch.Net: java.lang.String getRevealedLocalAddressAsString(java.net.InetSocketAddress)>($r10);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

     label2:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
        $r14 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r14;
    }

    public volatile java.nio.channels.NetworkChannel setOption(java.net.SocketOption, java.lang.Object) throws java.io.IOException
    {
        sun.nio.ch.AsynchronousServerSocketChannelImpl r0;
        java.net.SocketOption r1;
        java.lang.Object r2;
        java.nio.channels.AsynchronousServerSocketChannel $r3;

        r0 := @this: sun.nio.ch.AsynchronousServerSocketChannelImpl;
        r1 := @parameter0: java.net.SocketOption;
        r2 := @parameter1: java.lang.Object;
        $r3 = virtualinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: java.nio.channels.AsynchronousServerSocketChannel setOption(java.net.SocketOption,java.lang.Object)>(r1, r2);
        return $r3;
    }
}
