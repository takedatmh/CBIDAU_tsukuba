class sun.nio.fs.UnixSecureDirectoryStream extends java.lang.Object implements java.nio.file.SecureDirectoryStream
{
    private final sun.nio.fs.UnixDirectoryStream ds;
    private final int dfd;

    void <init>(sun.nio.fs.UnixPath, long, int, java.nio.file.DirectoryStream$Filter)
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        sun.nio.fs.UnixPath r1;
        long l0;
        int i1;
        java.nio.file.DirectoryStream$Filter r2;
        sun.nio.fs.UnixDirectoryStream $r3;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        r1 := @parameter0: sun.nio.fs.UnixPath;
        l0 := @parameter1: long;
        i1 := @parameter2: int;
        r2 := @parameter3: java.nio.file.DirectoryStream$Filter;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r3 = new sun.nio.fs.UnixDirectoryStream;
        specialinvoke $r3.<sun.nio.fs.UnixDirectoryStream: void <init>(sun.nio.fs.UnixPath,long,java.nio.file.DirectoryStream$Filter)>(r1, l0, r2);
        r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds> = $r3;
        r0.<sun.nio.fs.UnixSecureDirectoryStream: int dfd> = i1;
        return;
    }

    public void close() throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        java.lang.Throwable r1, $r7;
        sun.nio.fs.UnixDirectoryStream $r2, $r4, $r5, $r8;
        java.util.concurrent.locks.Lock $r3, $r6, $r9;
        boolean $z0;
        int $i0;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        $r2 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r3 = virtualinvoke $r2.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        $r4 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $z0 = virtualinvoke $r4.<sun.nio.fs.UnixDirectoryStream: boolean closeImpl()>();
        if $z0 == 0 goto label1;

        $i0 = r0.<sun.nio.fs.UnixSecureDirectoryStream: int dfd>;
        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void close(int)>($i0);

     label1:
        $r5 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r6 = virtualinvoke $r5.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();
        goto label5;

     label2:
        $r7 := @caughtexception;

     label3:
        r1 = $r7;

     label4:
        $r8 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r9 = virtualinvoke $r8.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.util.Iterator iterator()
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        sun.nio.fs.UnixDirectoryStream $r1;
        java.util.Iterator $r2;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        $r1 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r2 = virtualinvoke $r1.<sun.nio.fs.UnixDirectoryStream: java.util.Iterator iterator(java.nio.file.DirectoryStream)>(r0);
        return $r2;
    }

    private sun.nio.fs.UnixPath getName(java.nio.file.Path)
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        java.nio.file.Path r1;
        java.lang.NullPointerException $r2;
        boolean $z0;
        java.nio.file.ProviderMismatchException $r3;
        sun.nio.fs.UnixPath $r4;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        r1 := @parameter0: java.nio.file.Path;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        $z0 = r1 instanceof sun.nio.fs.UnixPath;
        if $z0 != 0 goto label1;

        $r3 = new java.nio.file.ProviderMismatchException;
        specialinvoke $r3.<java.nio.file.ProviderMismatchException: void <init>()>();
        throw $r3;

     label1:
        $r4 = (sun.nio.fs.UnixPath) r1;
        return $r4;
    }

    public transient java.nio.file.SecureDirectoryStream newDirectoryStream(java.nio.file.Path, java.nio.file.LinkOption[]) throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream r0, $r18, r19;
        java.nio.file.Path r1;
        java.nio.file.LinkOption[] r2;
        sun.nio.fs.UnixPath r3, r4, $r8;
        boolean z0, $z1;
        java.lang.SecurityManager r5;
        int i0, i1, $i4, $i5;
        long l2;
        short s3;
        java.lang.Throwable r6, $r22;
        sun.nio.fs.UnixDirectoryStream $r7, $r9, $r11, $r20, $r23;
        java.util.concurrent.locks.Lock $r10, $r21, $r24;
        java.nio.file.ClosedDirectoryStreamException $r12;
        byte[] $r13;
        sun.nio.fs.UnixException $r14, r15;
        java.nio.file.NotDirectoryException $r16;
        java.lang.String $r17;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        r1 := @parameter0: java.nio.file.Path;
        r2 := @parameter1: java.nio.file.LinkOption[];
        r3 = specialinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixPath getName(java.nio.file.Path)>(r1);
        $r7 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r8 = virtualinvoke $r7.<sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath directory()>();
        r4 = virtualinvoke $r8.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(java.nio.file.Path)>(r3);
        z0 = staticinvoke <sun.nio.fs.Util: boolean followLinks(java.nio.file.LinkOption[])>(r2);
        r5 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r5 == null goto label0;

        virtualinvoke r4.<sun.nio.fs.UnixPath: void checkRead()>();

     label0:
        $r9 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r10 = virtualinvoke $r9.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r10.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r11 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $z1 = virtualinvoke $r11.<sun.nio.fs.UnixDirectoryStream: boolean isOpen()>();
        if $z1 != 0 goto label2;

        $r12 = new java.nio.file.ClosedDirectoryStreamException;
        specialinvoke $r12.<java.nio.file.ClosedDirectoryStreamException: void <init>()>();
        throw $r12;

     label2:
        i0 = -1;
        i1 = -1;
        l2 = 0L;

     label3:
        s3 = 0;
        if z0 != 0 goto label4;

        s3 = s3 | 256;

     label4:
        $i4 = r0.<sun.nio.fs.UnixSecureDirectoryStream: int dfd>;
        $r13 = virtualinvoke r3.<sun.nio.fs.UnixPath: byte[] asByteArray()>();
        i0 = staticinvoke <sun.nio.fs.UnixNativeDispatcher: int openat(int,byte[],int,int)>($i4, $r13, s3, 0);
        i1 = staticinvoke <sun.nio.fs.UnixNativeDispatcher: int dup(int)>(i0);
        l2 = staticinvoke <sun.nio.fs.UnixNativeDispatcher: long fdopendir(int)>(i0);

     label5:
        goto label10;

     label6:
        $r14 := @caughtexception;
        r15 = $r14;
        if i0 == -1 goto label7;

        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void close(int)>(i0);

     label7:
        if i1 == -1 goto label8;

        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void close(int)>(i1);

     label8:
        $i5 = virtualinvoke r15.<sun.nio.fs.UnixException: int errno()>();
        if $i5 != 20 goto label9;

        $r16 = new java.nio.file.NotDirectoryException;
        $r17 = virtualinvoke r3.<sun.nio.fs.UnixPath: java.lang.String toString()>();
        specialinvoke $r16.<java.nio.file.NotDirectoryException: void <init>(java.lang.String)>($r17);
        throw $r16;

     label9:
        virtualinvoke r15.<sun.nio.fs.UnixException: void rethrowAsIOException(sun.nio.fs.UnixPath)>(r3);

     label10:
        $r18 = new sun.nio.fs.UnixSecureDirectoryStream;
        specialinvoke $r18.<sun.nio.fs.UnixSecureDirectoryStream: void <init>(sun.nio.fs.UnixPath,long,int,java.nio.file.DirectoryStream$Filter)>(r4, l2, i1, null);
        r19 = $r18;

     label11:
        $r20 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r21 = virtualinvoke $r20.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r21.<java.util.concurrent.locks.Lock: void unlock()>();
        return r19;

     label12:
        $r22 := @caughtexception;

     label13:
        r6 = $r22;

     label14:
        $r23 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r24 = virtualinvoke $r23.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r24.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r6;

        catch sun.nio.fs.UnixException from label3 to label5 with label6;
        catch java.lang.Throwable from label1 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public transient java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path, java.util.Set, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        java.nio.file.Path r1;
        java.util.Set r2;
        java.nio.file.attribute.FileAttribute[] r3;
        sun.nio.fs.UnixPath r4, $r9, $r10;
        int i0, $i1;
        java.lang.String r5;
        java.nio.channels.FileChannel r6;
        null_type n0;
        java.lang.Throwable r7, $r21;
        sun.nio.fs.UnixDirectoryStream $r8, $r11, $r13, $r15, $r19, $r22;
        java.util.concurrent.locks.Lock $r12, $r16, $r20, $r23;
        boolean $z0;
        java.nio.file.ClosedDirectoryStreamException $r14;
        sun.nio.fs.UnixException $r17, r18;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        r1 := @parameter0: java.nio.file.Path;
        r2 := @parameter1: java.util.Set;
        r3 := @parameter2: java.nio.file.attribute.FileAttribute[];
        r4 = specialinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixPath getName(java.nio.file.Path)>(r1);
        i0 = staticinvoke <sun.nio.fs.UnixFileModeAttribute: int toUnixMode(int,java.nio.file.attribute.FileAttribute[])>(438, r3);
        $r8 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r9 = virtualinvoke $r8.<sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath directory()>();
        $r10 = virtualinvoke $r9.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(java.nio.file.Path)>(r4);
        r5 = virtualinvoke $r10.<sun.nio.fs.UnixPath: java.lang.String getPathForPermissionCheck()>();
        $r11 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r12 = virtualinvoke $r11.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r12.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        $r13 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $z0 = virtualinvoke $r13.<sun.nio.fs.UnixDirectoryStream: boolean isOpen()>();
        if $z0 != 0 goto label1;

        $r14 = new java.nio.file.ClosedDirectoryStreamException;
        specialinvoke $r14.<java.nio.file.ClosedDirectoryStreamException: void <init>()>();
        throw $r14;

     label1:
        $i1 = r0.<sun.nio.fs.UnixSecureDirectoryStream: int dfd>;
        r6 = staticinvoke <sun.nio.fs.UnixChannelFactory: java.nio.channels.FileChannel newFileChannel(int,sun.nio.fs.UnixPath,java.lang.String,java.util.Set,int)>($i1, r4, r5, r2, i0);

     label2:
        $r15 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r16 = virtualinvoke $r15.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r16.<java.util.concurrent.locks.Lock: void unlock()>();
        return r6;

     label3:
        $r17 := @caughtexception;

     label4:
        r18 = $r17;
        virtualinvoke r18.<sun.nio.fs.UnixException: void rethrowAsIOException(sun.nio.fs.UnixPath)>(r4);
        n0 = null;

     label5:
        $r19 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r20 = virtualinvoke $r19.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r20.<java.util.concurrent.locks.Lock: void unlock()>();
        return n0;

     label6:
        $r21 := @caughtexception;

     label7:
        r7 = $r21;

     label8:
        $r22 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r23 = virtualinvoke $r22.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r23.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r7;

        catch sun.nio.fs.UnixException from label1 to label2 with label3;
        catch java.lang.Throwable from label0 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void implDelete(java.nio.file.Path, boolean, int) throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        java.nio.file.Path r1;
        boolean z0, $z1, $z2;
        int i0, $i1, $i3, $i4, $i5, $i6;
        sun.nio.fs.UnixPath r2, $r8, $r9;
        java.lang.SecurityManager r3;
        sun.nio.fs.UnixFileAttributes r4;
        sun.nio.fs.UnixException r5, $r14, $r16, r17;
        java.lang.Throwable r6, $r21;
        sun.nio.fs.UnixDirectoryStream $r7, $r10, $r12, $r19, $r22;
        java.util.concurrent.locks.Lock $r11, $r20, $r23;
        java.nio.file.ClosedDirectoryStreamException $r13;
        byte $b2;
        byte[] $r15;
        java.nio.file.DirectoryNotEmptyException $r18;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        r1 := @parameter0: java.nio.file.Path;
        z0 := @parameter1: boolean;
        i0 := @parameter2: int;
        r2 = specialinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixPath getName(java.nio.file.Path)>(r1);
        r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r3 == null goto label0;

        $r7 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r8 = virtualinvoke $r7.<sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath directory()>();
        $r9 = virtualinvoke $r8.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(java.nio.file.Path)>(r2);
        virtualinvoke $r9.<sun.nio.fs.UnixPath: void checkDelete()>();

     label0:
        $r10 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r11 = virtualinvoke $r10.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r11.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r12 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $z1 = virtualinvoke $r12.<sun.nio.fs.UnixDirectoryStream: boolean isOpen()>();
        if $z1 != 0 goto label2;

        $r13 = new java.nio.file.ClosedDirectoryStreamException;
        specialinvoke $r13.<java.nio.file.ClosedDirectoryStreamException: void <init>()>();
        throw $r13;

     label2:
        if z0 != 0 goto label9;

        r4 = null;

     label3:
        $i1 = r0.<sun.nio.fs.UnixSecureDirectoryStream: int dfd>;
        r4 = staticinvoke <sun.nio.fs.UnixFileAttributes: sun.nio.fs.UnixFileAttributes get(int,sun.nio.fs.UnixPath,boolean)>($i1, r2, 0);

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;
        r5 = $r14;
        virtualinvoke r5.<sun.nio.fs.UnixException: void rethrowAsIOException(sun.nio.fs.UnixPath)>(r2);

     label6:
        $z2 = virtualinvoke r4.<sun.nio.fs.UnixFileAttributes: boolean isDirectory()>();
        if $z2 == 0 goto label7;

        $b2 = 0;
        goto label8;

     label7:
        $b2 = 0;

     label8:
        i0 = $b2;

     label9:
        $i3 = r0.<sun.nio.fs.UnixSecureDirectoryStream: int dfd>;
        $r15 = virtualinvoke r2.<sun.nio.fs.UnixPath: byte[] asByteArray()>();
        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void unlinkat(int,byte[],int)>($i3, $r15, i0);

     label10:
        goto label14;

     label11:
        $r16 := @caughtexception;
        r17 = $r16;
        $i4 = i0 & 0;
        if $i4 == 0 goto label13;

        $i5 = virtualinvoke r17.<sun.nio.fs.UnixException: int errno()>();
        if $i5 == 17 goto label12;

        $i6 = virtualinvoke r17.<sun.nio.fs.UnixException: int errno()>();
        if $i6 != 66 goto label13;

     label12:
        $r18 = new java.nio.file.DirectoryNotEmptyException;
        specialinvoke $r18.<java.nio.file.DirectoryNotEmptyException: void <init>(java.lang.String)>(null);
        throw $r18;

     label13:
        virtualinvoke r17.<sun.nio.fs.UnixException: void rethrowAsIOException(sun.nio.fs.UnixPath)>(r2);

     label14:
        $r19 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r20 = virtualinvoke $r19.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r20.<java.util.concurrent.locks.Lock: void unlock()>();
        goto label18;

     label15:
        $r21 := @caughtexception;

     label16:
        r6 = $r21;

     label17:
        $r22 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r23 = virtualinvoke $r22.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r23.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r6;

     label18:
        return;

        catch sun.nio.fs.UnixException from label3 to label4 with label5;
        catch sun.nio.fs.UnixException from label9 to label10 with label11;
        catch java.lang.Throwable from label1 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void deleteFile(java.nio.file.Path) throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        java.nio.file.Path r1;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        r1 := @parameter0: java.nio.file.Path;
        specialinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream: void implDelete(java.nio.file.Path,boolean,int)>(r1, 1, 0);
        return;
    }

    public void deleteDirectory(java.nio.file.Path) throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        java.nio.file.Path r1;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        r1 := @parameter0: java.nio.file.Path;
        specialinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream: void implDelete(java.nio.file.Path,boolean,int)>(r1, 1, 0);
        return;
    }

    public void move(java.nio.file.Path, java.nio.file.SecureDirectoryStream, java.nio.file.Path) throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream r0, r6;
        java.nio.file.Path r1, r3;
        java.nio.file.SecureDirectoryStream r2;
        sun.nio.fs.UnixPath r4, r5, $r14, $r15, $r17, $r18;
        java.lang.SecurityManager r7;
        sun.nio.fs.UnixException r8, $r28;
        java.lang.Throwable r9, r10, $r35, $r40;
        java.lang.NullPointerException $r11;
        boolean $z0, $z1, $z2;
        java.nio.file.ProviderMismatchException $r12;
        sun.nio.fs.UnixDirectoryStream $r13, $r16, $r19, $r21, $r23, $r24, $r33, $r36, $r38, $r41;
        java.util.concurrent.locks.Lock $r20, $r22, $r34, $r37, $r39, $r42;
        java.nio.file.ClosedDirectoryStreamException $r25;
        int $i0, $i1, $i2;
        byte[] $r26, $r27;
        java.nio.file.AtomicMoveNotSupportedException $r29;
        java.lang.String $r30, $r31, $r32;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        r1 := @parameter0: java.nio.file.Path;
        r2 := @parameter1: java.nio.file.SecureDirectoryStream;
        r3 := @parameter2: java.nio.file.Path;
        r4 = specialinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixPath getName(java.nio.file.Path)>(r1);
        r5 = specialinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixPath getName(java.nio.file.Path)>(r3);
        if r2 != null goto label0;

        $r11 = new java.lang.NullPointerException;
        specialinvoke $r11.<java.lang.NullPointerException: void <init>()>();
        throw $r11;

     label0:
        $z0 = r2 instanceof sun.nio.fs.UnixSecureDirectoryStream;
        if $z0 != 0 goto label1;

        $r12 = new java.nio.file.ProviderMismatchException;
        specialinvoke $r12.<java.nio.file.ProviderMismatchException: void <init>()>();
        throw $r12;

     label1:
        r6 = (sun.nio.fs.UnixSecureDirectoryStream) r2;
        r7 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r7 == null goto label2;

        $r13 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r14 = virtualinvoke $r13.<sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath directory()>();
        $r15 = virtualinvoke $r14.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(java.nio.file.Path)>(r4);
        virtualinvoke $r15.<sun.nio.fs.UnixPath: void checkWrite()>();
        $r16 = r6.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r17 = virtualinvoke $r16.<sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath directory()>();
        $r18 = virtualinvoke $r17.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(java.nio.file.Path)>(r5);
        virtualinvoke $r18.<sun.nio.fs.UnixPath: void checkWrite()>();

     label2:
        $r19 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r20 = virtualinvoke $r19.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r20.<java.util.concurrent.locks.Lock: void lock()>();

     label3:
        $r21 = r6.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r22 = virtualinvoke $r21.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r22.<java.util.concurrent.locks.Lock: void lock()>();

     label4:
        $r23 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $z1 = virtualinvoke $r23.<sun.nio.fs.UnixDirectoryStream: boolean isOpen()>();
        if $z1 == 0 goto label5;

        $r24 = r6.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $z2 = virtualinvoke $r24.<sun.nio.fs.UnixDirectoryStream: boolean isOpen()>();
        if $z2 != 0 goto label6;

     label5:
        $r25 = new java.nio.file.ClosedDirectoryStreamException;
        specialinvoke $r25.<java.nio.file.ClosedDirectoryStreamException: void <init>()>();
        throw $r25;

     label6:
        $i0 = r0.<sun.nio.fs.UnixSecureDirectoryStream: int dfd>;
        $r26 = virtualinvoke r4.<sun.nio.fs.UnixPath: byte[] asByteArray()>();
        $i1 = r6.<sun.nio.fs.UnixSecureDirectoryStream: int dfd>;
        $r27 = virtualinvoke r5.<sun.nio.fs.UnixPath: byte[] asByteArray()>();
        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void renameat(int,byte[],int,byte[])>($i0, $r26, $i1, $r27);

     label7:
        goto label10;

     label8:
        $r28 := @caughtexception;
        r8 = $r28;
        $i2 = virtualinvoke r8.<sun.nio.fs.UnixException: int errno()>();
        if $i2 != 18 goto label9;

        $r29 = new java.nio.file.AtomicMoveNotSupportedException;
        $r30 = virtualinvoke r4.<sun.nio.fs.UnixPath: java.lang.String toString()>();
        $r31 = virtualinvoke r5.<sun.nio.fs.UnixPath: java.lang.String toString()>();
        $r32 = virtualinvoke r8.<sun.nio.fs.UnixException: java.lang.String errorString()>();
        specialinvoke $r29.<java.nio.file.AtomicMoveNotSupportedException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r30, $r31, $r32);
        throw $r29;

     label9:
        virtualinvoke r8.<sun.nio.fs.UnixException: void rethrowAsIOException(sun.nio.fs.UnixPath,sun.nio.fs.UnixPath)>(r4, r5);

     label10:
        $r33 = r6.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r34 = virtualinvoke $r33.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r34.<java.util.concurrent.locks.Lock: void unlock()>();
        goto label14;

     label11:
        $r35 := @caughtexception;

     label12:
        r9 = $r35;

     label13:
        $r36 = r6.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r37 = virtualinvoke $r36.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r37.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r9;

     label14:
        $r38 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r39 = virtualinvoke $r38.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r39.<java.util.concurrent.locks.Lock: void unlock()>();
        goto label18;

     label15:
        $r40 := @caughtexception;

     label16:
        r10 = $r40;

     label17:
        $r41 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        $r42 = virtualinvoke $r41.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r42.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r10;

     label18:
        return;

        catch sun.nio.fs.UnixException from label6 to label7 with label8;
        catch java.lang.Throwable from label4 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label3 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private java.nio.file.attribute.FileAttributeView getFileAttributeViewImpl(sun.nio.fs.UnixPath, java.lang.Class, boolean)
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        sun.nio.fs.UnixPath r1;
        java.lang.Class r2, r3;
        boolean z0;
        java.lang.NullPointerException $r4;
        sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl $r5;
        sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl $r6;
        java.nio.file.attribute.FileAttributeView $r7;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        r1 := @parameter0: sun.nio.fs.UnixPath;
        r2 := @parameter1: java.lang.Class;
        z0 := @parameter2: boolean;
        if r2 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label0:
        r3 = r2;
        if r3 != class "java/nio/file/attribute/BasicFileAttributeView" goto label1;

        $r5 = new sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl;
        specialinvoke $r5.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: void <init>(sun.nio.fs.UnixSecureDirectoryStream,sun.nio.fs.UnixPath,boolean)>(r0, r1, z0);
        return $r5;

     label1:
        if r3 == class "java/nio/file/attribute/PosixFileAttributeView" goto label2;

        if r3 != class "java/nio/file/attribute/FileOwnerAttributeView" goto label3;

     label2:
        $r6 = new sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl;
        specialinvoke $r6.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: void <init>(sun.nio.fs.UnixSecureDirectoryStream,sun.nio.fs.UnixPath,boolean)>(r0, r1, z0);
        return $r6;

     label3:
        $r7 = (java.nio.file.attribute.FileAttributeView) null;
        return $r7;
    }

    public java.nio.file.attribute.FileAttributeView getFileAttributeView(java.lang.Class)
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        java.lang.Class r1;
        java.nio.file.attribute.FileAttributeView $r2;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        r1 := @parameter0: java.lang.Class;
        $r2 = specialinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream: java.nio.file.attribute.FileAttributeView getFileAttributeViewImpl(sun.nio.fs.UnixPath,java.lang.Class,boolean)>(null, r1, 0);
        return $r2;
    }

    public transient java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path, java.lang.Class, java.nio.file.LinkOption[])
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        java.nio.file.Path r1;
        java.lang.Class r2;
        java.nio.file.LinkOption[] r3;
        sun.nio.fs.UnixPath r4;
        boolean z0;
        java.nio.file.attribute.FileAttributeView $r5;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        r1 := @parameter0: java.nio.file.Path;
        r2 := @parameter1: java.lang.Class;
        r3 := @parameter2: java.nio.file.LinkOption[];
        r4 = specialinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixPath getName(java.nio.file.Path)>(r1);
        z0 = staticinvoke <sun.nio.fs.Util: boolean followLinks(java.nio.file.LinkOption[])>(r3);
        $r5 = specialinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream: java.nio.file.attribute.FileAttributeView getFileAttributeViewImpl(sun.nio.fs.UnixPath,java.lang.Class,boolean)>(r4, r2, z0);
        return $r5;
    }

    public volatile java.nio.file.attribute.FileAttributeView getFileAttributeView(java.lang.Object, java.lang.Class, java.nio.file.LinkOption[])
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        java.lang.Object r1;
        java.lang.Class r2;
        java.nio.file.LinkOption[] r3;
        java.nio.file.Path $r4;
        java.nio.file.attribute.FileAttributeView $r5;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Class;
        r3 := @parameter2: java.nio.file.LinkOption[];
        $r4 = (java.nio.file.Path) r1;
        $r5 = virtualinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>($r4, r2, r3);
        return $r5;
    }

    public volatile void move(java.lang.Object, java.nio.file.SecureDirectoryStream, java.lang.Object) throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        java.lang.Object r1, r3;
        java.nio.file.SecureDirectoryStream r2;
        java.nio.file.Path $r4, $r5;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.nio.file.SecureDirectoryStream;
        r3 := @parameter2: java.lang.Object;
        $r4 = (java.nio.file.Path) r1;
        $r5 = (java.nio.file.Path) r3;
        virtualinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream: void move(java.nio.file.Path,java.nio.file.SecureDirectoryStream,java.nio.file.Path)>($r4, r2, $r5);
        return;
    }

    public volatile void deleteDirectory(java.lang.Object) throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        java.lang.Object r1;
        java.nio.file.Path $r2;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.nio.file.Path) r1;
        virtualinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream: void deleteDirectory(java.nio.file.Path)>($r2);
        return;
    }

    public volatile void deleteFile(java.lang.Object) throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        java.lang.Object r1;
        java.nio.file.Path $r2;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.nio.file.Path) r1;
        virtualinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream: void deleteFile(java.nio.file.Path)>($r2);
        return;
    }

    public volatile java.nio.channels.SeekableByteChannel newByteChannel(java.lang.Object, java.util.Set, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        java.lang.Object r1;
        java.util.Set r2;
        java.nio.file.attribute.FileAttribute[] r3;
        java.nio.file.Path $r4;
        java.nio.channels.SeekableByteChannel $r5;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.util.Set;
        r3 := @parameter2: java.nio.file.attribute.FileAttribute[];
        $r4 = (java.nio.file.Path) r1;
        $r5 = virtualinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>($r4, r2, r3);
        return $r5;
    }

    public volatile java.nio.file.SecureDirectoryStream newDirectoryStream(java.lang.Object, java.nio.file.LinkOption[]) throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        java.lang.Object r1;
        java.nio.file.LinkOption[] r2;
        java.nio.file.Path $r3;
        java.nio.file.SecureDirectoryStream $r4;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.nio.file.LinkOption[];
        $r3 = (java.nio.file.Path) r1;
        $r4 = virtualinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream: java.nio.file.SecureDirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.LinkOption[])>($r3, r2);
        return $r4;
    }

    static int access$000(sun.nio.fs.UnixSecureDirectoryStream)
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        int $i0;

        r0 := @parameter0: sun.nio.fs.UnixSecureDirectoryStream;
        $i0 = r0.<sun.nio.fs.UnixSecureDirectoryStream: int dfd>;
        return $i0;
    }

    static sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)
    {
        sun.nio.fs.UnixSecureDirectoryStream r0;
        sun.nio.fs.UnixDirectoryStream $r1;

        r0 := @parameter0: sun.nio.fs.UnixSecureDirectoryStream;
        $r1 = r0.<sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream ds>;
        return $r1;
    }
}
