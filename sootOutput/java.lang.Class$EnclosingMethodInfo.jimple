final class java.lang.Class$EnclosingMethodInfo extends java.lang.Object
{
    private java.lang.Class enclosingClass;
    private java.lang.String name;
    private java.lang.String descriptor;
    static final boolean $assertionsDisabled;

    private void <init>(java.lang.Object[])
    {
        java.lang.Class$EnclosingMethodInfo r0;
        java.lang.Object[] r1;
        java.lang.ClassCastException r2, $r17;
        int $i0;
        java.lang.InternalError $r3, $r18;
        java.lang.Object $r4, $r8, $r10;
        java.lang.Class $r5, $r6;
        boolean $z0, $z1;
        java.lang.AssertionError $r7, $r16;
        java.lang.String $r9, $r11, $r12, $r13, $r14, $r15;

        r0 := @this: java.lang.Class$EnclosingMethodInfo;
        r1 := @parameter0: java.lang.Object[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $i0 = lengthof r1;
        if $i0 == 3 goto label0;

        $r3 = new java.lang.InternalError;
        specialinvoke $r3.<java.lang.InternalError: void <init>(java.lang.String)>("Malformed enclosing method information");
        throw $r3;

     label0:
        $r4 = r1[0];
        $r5 = (java.lang.Class) $r4;
        r0.<java.lang.Class$EnclosingMethodInfo: java.lang.Class enclosingClass> = $r5;
        $z0 = <java.lang.Class$EnclosingMethodInfo: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        $r6 = r0.<java.lang.Class$EnclosingMethodInfo: java.lang.Class enclosingClass>;
        if $r6 != null goto label1;

        $r7 = new java.lang.AssertionError;
        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();
        throw $r7;

     label1:
        $r8 = r1[1];
        $r9 = (java.lang.String) $r8;
        r0.<java.lang.Class$EnclosingMethodInfo: java.lang.String name> = $r9;
        $r10 = r1[2];
        $r11 = (java.lang.String) $r10;
        r0.<java.lang.Class$EnclosingMethodInfo: java.lang.String descriptor> = $r11;
        $z1 = <java.lang.Class$EnclosingMethodInfo: boolean $assertionsDisabled>;
        if $z1 != 0 goto label3;

        $r12 = r0.<java.lang.Class$EnclosingMethodInfo: java.lang.String name>;
        if $r12 == null goto label2;

        $r13 = r0.<java.lang.Class$EnclosingMethodInfo: java.lang.String descriptor>;
        if $r13 != null goto label3;

     label2:
        $r14 = r0.<java.lang.Class$EnclosingMethodInfo: java.lang.String name>;
        $r15 = r0.<java.lang.Class$EnclosingMethodInfo: java.lang.String descriptor>;
        if $r14 == $r15 goto label3;

        $r16 = new java.lang.AssertionError;
        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();
        throw $r16;

     label3:
        goto label5;

     label4:
        $r17 := @caughtexception;
        r2 = $r17;
        $r18 = new java.lang.InternalError;
        specialinvoke $r18.<java.lang.InternalError: void <init>(java.lang.String)>("Invalid type in enclosing method information");
        throw $r18;

     label5:
        return;

        catch java.lang.ClassCastException from label0 to label3 with label4;
    }

    boolean isPartial()
    {
        java.lang.Class$EnclosingMethodInfo r0;
        java.lang.Class $r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: java.lang.Class$EnclosingMethodInfo;
        $r1 = r0.<java.lang.Class$EnclosingMethodInfo: java.lang.Class enclosingClass>;
        if $r1 == null goto label0;

        $r2 = r0.<java.lang.Class$EnclosingMethodInfo: java.lang.String name>;
        if $r2 == null goto label0;

        $r3 = r0.<java.lang.Class$EnclosingMethodInfo: java.lang.String descriptor>;
        if $r3 != null goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean isConstructor()
    {
        java.lang.Class$EnclosingMethodInfo r0;
        boolean $z0, $z1, $z2;
        java.lang.String $r1, $r2;

        r0 := @this: java.lang.Class$EnclosingMethodInfo;
        $z0 = virtualinvoke r0.<java.lang.Class$EnclosingMethodInfo: boolean isPartial()>();
        if $z0 != 0 goto label0;

        $r1 = "<init>";
        $r2 = r0.<java.lang.Class$EnclosingMethodInfo: java.lang.String name>;
        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);
        if $z1 == 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;
    }

    boolean isMethod()
    {
        java.lang.Class$EnclosingMethodInfo r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r1, $r2;

        r0 := @this: java.lang.Class$EnclosingMethodInfo;
        $z0 = virtualinvoke r0.<java.lang.Class$EnclosingMethodInfo: boolean isPartial()>();
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r0.<java.lang.Class$EnclosingMethodInfo: boolean isConstructor()>();
        if $z1 != 0 goto label0;

        $r1 = "<clinit>";
        $r2 = r0.<java.lang.Class$EnclosingMethodInfo: java.lang.String name>;
        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);
        if $z2 != 0 goto label0;

        $z3 = 1;
        goto label1;

     label0:
        $z3 = 0;

     label1:
        return $z3;
    }

    java.lang.Class getEnclosingClass()
    {
        java.lang.Class$EnclosingMethodInfo r0;
        java.lang.Class $r1;

        r0 := @this: java.lang.Class$EnclosingMethodInfo;
        $r1 = r0.<java.lang.Class$EnclosingMethodInfo: java.lang.Class enclosingClass>;
        return $r1;
    }

    java.lang.String getName()
    {
        java.lang.Class$EnclosingMethodInfo r0;
        java.lang.String $r1;

        r0 := @this: java.lang.Class$EnclosingMethodInfo;
        $r1 = r0.<java.lang.Class$EnclosingMethodInfo: java.lang.String name>;
        return $r1;
    }

    java.lang.String getDescriptor()
    {
        java.lang.Class$EnclosingMethodInfo r0;
        java.lang.String $r1;

        r0 := @this: java.lang.Class$EnclosingMethodInfo;
        $r1 = r0.<java.lang.Class$EnclosingMethodInfo: java.lang.String descriptor>;
        return $r1;
    }

    void <init>(java.lang.Object[], java.lang.Class$1)
    {
        java.lang.Class$EnclosingMethodInfo r0;
        java.lang.Object[] r1;
        java.lang.Class$1 r2;

        r0 := @this: java.lang.Class$EnclosingMethodInfo;
        r1 := @parameter0: java.lang.Object[];
        r2 := @parameter1: java.lang.Class$1;
        specialinvoke r0.<java.lang.Class$EnclosingMethodInfo: void <init>(java.lang.Object[])>(r1);
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/lang/Class";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.lang.Class$EnclosingMethodInfo: boolean $assertionsDisabled> = $z1;
        return;
    }
}
