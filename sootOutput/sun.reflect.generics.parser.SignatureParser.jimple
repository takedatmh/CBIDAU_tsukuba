public class sun.reflect.generics.parser.SignatureParser extends java.lang.Object
{
    private char[] input;
    private int index;
    private static final char EOI;
    private static final boolean DEBUG;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        sun.reflect.generics.parser.SignatureParser r0;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.reflect.generics.parser.SignatureParser: int index> = 0;
        return;
    }

    private char getNext()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        java.lang.ArrayIndexOutOfBoundsException r1, $r6;
        char[] $r2, $r4;
        java.lang.AssertionError $r3;
        char $c4;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $z0 = <sun.reflect.generics.parser.SignatureParser: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $i1 = r0.<sun.reflect.generics.parser.SignatureParser: int index>;
        $r2 = r0.<sun.reflect.generics.parser.SignatureParser: char[] input>;
        $i2 = lengthof $r2;
        if $i1 <= $i2 goto label0;

        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label0:
        $r4 = r0.<sun.reflect.generics.parser.SignatureParser: char[] input>;
        $i0 = r0.<sun.reflect.generics.parser.SignatureParser: int index>;
        $i3 = $i0 + 1;
        r0.<sun.reflect.generics.parser.SignatureParser: int index> = $i3;
        $c4 = $r4[$i0];

     label1:
        return $c4;

     label2:
        $r6 := @caughtexception;
        r1 = $r6;
        return 58;

        catch java.lang.ArrayIndexOutOfBoundsException from label0 to label1 with label2;
    }

    private char current()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        boolean $z0;
        java.lang.ArrayIndexOutOfBoundsException r1, $r5;
        int $i0, $i1, $i2;
        char[] $r2, $r4;
        java.lang.AssertionError $r3;
        char $c3;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $z0 = <sun.reflect.generics.parser.SignatureParser: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $i0 = r0.<sun.reflect.generics.parser.SignatureParser: int index>;
        $r2 = r0.<sun.reflect.generics.parser.SignatureParser: char[] input>;
        $i1 = lengthof $r2;
        if $i0 <= $i1 goto label0;

        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label0:
        $r4 = r0.<sun.reflect.generics.parser.SignatureParser: char[] input>;
        $i2 = r0.<sun.reflect.generics.parser.SignatureParser: int index>;
        $c3 = $r4[$i2];

     label1:
        return $c3;

     label2:
        $r5 := @caughtexception;
        r1 = $r5;
        return 58;

        catch java.lang.ArrayIndexOutOfBoundsException from label0 to label1 with label2;
    }

    private void advance()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        char[] $r1;
        java.lang.AssertionError $r2;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $z0 = <sun.reflect.generics.parser.SignatureParser: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $i0 = r0.<sun.reflect.generics.parser.SignatureParser: int index>;
        $r1 = r0.<sun.reflect.generics.parser.SignatureParser: char[] input>;
        $i1 = lengthof $r1;
        if $i0 <= $i1 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $i2 = r0.<sun.reflect.generics.parser.SignatureParser: int index>;
        $i3 = $i2 + 1;
        r0.<sun.reflect.generics.parser.SignatureParser: int index> = $i3;
        return;
    }

    private java.lang.String remainder()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        java.lang.String $r1;
        char[] $r2, $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $r1 = new java.lang.String;
        $r2 = r0.<sun.reflect.generics.parser.SignatureParser: char[] input>;
        $i0 = r0.<sun.reflect.generics.parser.SignatureParser: int index>;
        $r3 = r0.<sun.reflect.generics.parser.SignatureParser: char[] input>;
        $i1 = lengthof $r3;
        $i2 = r0.<sun.reflect.generics.parser.SignatureParser: int index>;
        $i3 = $i1 - $i2;
        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, $i0, $i3);
        return $r1;
    }

    private transient boolean matches(char, char[])
    {
        sun.reflect.generics.parser.SignatureParser r0;
        char c0, c3;
        char[] r1, r2;
        int i1, i2;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        c0 := @parameter0: char;
        r1 := @parameter1: char[];
        r2 = r1;
        i1 = lengthof r2;
        i2 = 0;

     label0:
        if i2 >= i1 goto label2;

        c3 = r2[i2];
        if c0 != c3 goto label1;

        return 1;

     label1:
        i2 = i2 + 1;
        goto label0;

     label2:
        return 0;
    }

    private java.lang.Error error(java.lang.String)
    {
        sun.reflect.generics.parser.SignatureParser r0;
        java.lang.String r1;
        java.lang.reflect.GenericSignatureFormatError $r2;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        r1 := @parameter0: java.lang.String;
        $r2 = new java.lang.reflect.GenericSignatureFormatError;
        specialinvoke $r2.<java.lang.reflect.GenericSignatureFormatError: void <init>()>();
        return $r2;
    }

    private void progress(int)
    {
        sun.reflect.generics.parser.SignatureParser r0;
        int i0, $i1;
        java.lang.Error $r1;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        i0 := @parameter0: int;
        $i1 = r0.<sun.reflect.generics.parser.SignatureParser: int index>;
        if $i1 > i0 goto label0;

        $r1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.Error error(java.lang.String)>("Failure to make progress!");
        throw $r1;

     label0:
        return;
    }

    public static sun.reflect.generics.parser.SignatureParser make()
    {
        sun.reflect.generics.parser.SignatureParser $r0;

        $r0 = new sun.reflect.generics.parser.SignatureParser;
        specialinvoke $r0.<sun.reflect.generics.parser.SignatureParser: void <init>()>();
        return $r0;
    }

    public sun.reflect.generics.tree.ClassSignature parseClassSig(java.lang.String)
    {
        sun.reflect.generics.parser.SignatureParser r0;
        java.lang.String r1;
        char[] $r2;
        sun.reflect.generics.tree.ClassSignature $r3;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();
        r0.<sun.reflect.generics.parser.SignatureParser: char[] input> = $r2;
        $r3 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.ClassSignature parseClassSignature()>();
        return $r3;
    }

    public sun.reflect.generics.tree.MethodTypeSignature parseMethodSig(java.lang.String)
    {
        sun.reflect.generics.parser.SignatureParser r0;
        java.lang.String r1;
        char[] $r2;
        sun.reflect.generics.tree.MethodTypeSignature $r3;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();
        r0.<sun.reflect.generics.parser.SignatureParser: char[] input> = $r2;
        $r3 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.MethodTypeSignature parseMethodTypeSignature()>();
        return $r3;
    }

    public sun.reflect.generics.tree.TypeSignature parseTypeSig(java.lang.String)
    {
        sun.reflect.generics.parser.SignatureParser r0;
        java.lang.String r1;
        char[] $r2;
        sun.reflect.generics.tree.TypeSignature $r3;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();
        r0.<sun.reflect.generics.parser.SignatureParser: char[] input> = $r2;
        $r3 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.TypeSignature parseTypeSignature()>();
        return $r3;
    }

    private sun.reflect.generics.tree.ClassSignature parseClassSignature()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        boolean $z0;
        int $i0;
        java.lang.AssertionError $r1;
        sun.reflect.generics.tree.FormalTypeParameter[] $r2;
        sun.reflect.generics.tree.ClassTypeSignature $r3;
        sun.reflect.generics.tree.ClassTypeSignature[] $r4;
        sun.reflect.generics.tree.ClassSignature $r5;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $z0 = <sun.reflect.generics.parser.SignatureParser: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $i0 = r0.<sun.reflect.generics.parser.SignatureParser: int index>;
        if $i0 == 0 goto label0;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label0:
        $r2 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FormalTypeParameter[] parseZeroOrMoreFormalTypeParameters()>();
        $r3 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.ClassTypeSignature parseClassTypeSignature()>();
        $r4 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.ClassTypeSignature[] parseSuperInterfaces()>();
        $r5 = staticinvoke <sun.reflect.generics.tree.ClassSignature: sun.reflect.generics.tree.ClassSignature make(sun.reflect.generics.tree.FormalTypeParameter[],sun.reflect.generics.tree.ClassTypeSignature,sun.reflect.generics.tree.ClassTypeSignature[])>($r2, $r3, $r4);
        return $r5;
    }

    private sun.reflect.generics.tree.FormalTypeParameter[] parseZeroOrMoreFormalTypeParameters()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        char $c0;
        sun.reflect.generics.tree.FormalTypeParameter[] $r1, $r2;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c0 != 60 goto label0;

        $r1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FormalTypeParameter[] parseFormalTypeParameters()>();
        return $r1;

     label0:
        $r2 = newarray (sun.reflect.generics.tree.FormalTypeParameter)[0];
        return $r2;
    }

    private sun.reflect.generics.tree.FormalTypeParameter[] parseFormalTypeParameters()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        java.util.ArrayList $r1, r2;
        int i0, $i4;
        boolean $z0;
        char $c1, $c2, $c3;
        java.lang.AssertionError $r3;
        java.lang.Error $r4;
        sun.reflect.generics.tree.FormalTypeParameter $r5, $r6;
        sun.reflect.generics.tree.FormalTypeParameter[] $r7, $r9;
        java.lang.Object[] $r8;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(3);
        r2 = $r1;
        $z0 = <sun.reflect.generics.parser.SignatureParser: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $c1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c1 == 60 goto label0;

        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label0:
        $c2 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c2 == 60 goto label1;

        $r4 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.Error error(java.lang.String)>("expected \'<\'");
        throw $r4;

     label1:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r5 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FormalTypeParameter parseFormalTypeParameter()>();
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r5);

     label2:
        $c3 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c3 == 62 goto label3;

        i0 = r0.<sun.reflect.generics.parser.SignatureParser: int index>;
        $r6 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FormalTypeParameter parseFormalTypeParameter()>();
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r6);
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void progress(int)>(i0);
        goto label2;

     label3:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $i4 = interfaceinvoke r2.<java.util.List: int size()>();
        $r7 = newarray (sun.reflect.generics.tree.FormalTypeParameter)[$i4];
        $r8 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);
        $r9 = (sun.reflect.generics.tree.FormalTypeParameter[]) $r8;
        return $r9;
    }

    private sun.reflect.generics.tree.FormalTypeParameter parseFormalTypeParameter()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        java.lang.String r1;
        sun.reflect.generics.tree.FieldTypeSignature[] r2;
        sun.reflect.generics.tree.FormalTypeParameter $r3;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        r1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.String parseIdentifier()>();
        r2 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FieldTypeSignature[] parseBounds()>();
        $r3 = staticinvoke <sun.reflect.generics.tree.FormalTypeParameter: sun.reflect.generics.tree.FormalTypeParameter make(java.lang.String,sun.reflect.generics.tree.FieldTypeSignature[])>(r1, r2);
        return $r3;
    }

    private java.lang.String parseIdentifier()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        java.lang.StringBuilder $r1, r2;
        char c0, $c1;
        boolean $z0;
        java.lang.String $r3, $r5;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        r2 = $r1;

     label0:
        $c1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);
        if $z0 != 0 goto label3;

        c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        lookupswitch(c0)
        {
            case 46: goto label1;
            case 47: goto label1;
            case 58: goto label1;
            case 59: goto label1;
            case 60: goto label1;
            case 62: goto label1;
            case 91: goto label1;
            default: goto label2;
        };

     label1:
        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r3;

     label2:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        goto label0;

     label3:
        $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r5;
    }

    private sun.reflect.generics.tree.FieldTypeSignature parseFieldTypeSignature()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        sun.reflect.generics.tree.FieldTypeSignature $r1;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $r1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FieldTypeSignature parseFieldTypeSignature(boolean)>(1);
        return $r1;
    }

    private sun.reflect.generics.tree.FieldTypeSignature parseFieldTypeSignature(boolean)
    {
        sun.reflect.generics.parser.SignatureParser r0;
        boolean z0;
        char $c0;
        sun.reflect.generics.tree.ClassTypeSignature $r1;
        sun.reflect.generics.tree.TypeVariableSignature $r2;
        sun.reflect.generics.tree.ArrayTypeSignature $r3;
        java.lang.Error $r4, $r5;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        z0 := @parameter0: boolean;
        $c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        lookupswitch($c0)
        {
            case 76: goto label0;
            case 84: goto label1;
            case 91: goto label2;
            default: goto label4;
        };

     label0:
        $r1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.ClassTypeSignature parseClassTypeSignature()>();
        return $r1;

     label1:
        $r2 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.TypeVariableSignature parseTypeVariableSignature()>();
        return $r2;

     label2:
        if z0 == 0 goto label3;

        $r3 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.ArrayTypeSignature parseArrayTypeSignature()>();
        return $r3;

     label3:
        $r4 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.Error error(java.lang.String)>("Array signature not allowed here.");
        throw $r4;

     label4:
        $r5 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.Error error(java.lang.String)>("Expected Field Type Signature");
        throw $r5;
    }

    private sun.reflect.generics.tree.ClassTypeSignature parseClassTypeSignature()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        boolean $z0;
        java.util.ArrayList r1, $r4;
        char $c0, $c1, $c2, $c3;
        java.lang.AssertionError $r2;
        java.lang.Error $r3, $r11;
        sun.reflect.generics.tree.SimpleClassTypeSignature $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        sun.reflect.generics.tree.ClassTypeSignature $r12;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $z0 = <sun.reflect.generics.parser.SignatureParser: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c0 == 76 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $c1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c1 == 76 goto label1;

        $r3 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.Error error(java.lang.String)>("expected a class type");
        throw $r3;

     label1:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r4 = new java.util.ArrayList;
        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(5);
        r1 = $r4;
        $r5 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.SimpleClassTypeSignature parsePackageNameAndSimpleClassTypeSignature()>();
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void parseClassTypeSignatureSuffix(java.util.List)>(r1);
        $c2 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c2 == 59 goto label2;

        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected \';\' got \'");
        $c3 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        $r11 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.Error error(java.lang.String)>($r10);
        throw $r11;

     label2:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r12 = staticinvoke <sun.reflect.generics.tree.ClassTypeSignature: sun.reflect.generics.tree.ClassTypeSignature make(java.util.List)>(r1);
        return $r12;
    }

    private sun.reflect.generics.tree.SimpleClassTypeSignature parsePackageNameAndSimpleClassTypeSignature()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        java.lang.String r1, $r5, $r14;
        java.lang.StringBuilder r2, $r3, $r11, $r12, $r13;
        char $c0, $c1, $c2, $c3;
        sun.reflect.generics.tree.TypeArgument[] $r7, $r9;
        sun.reflect.generics.tree.SimpleClassTypeSignature $r8, $r10;
        java.lang.Error $r15;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        r1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.String parseIdentifier()>();
        $c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c0 != 47 goto label2;

        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);
        r2 = $r3;

     label0:
        $c1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c1 != 47 goto label1;

        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r5 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.String parseIdentifier()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        goto label0;

     label1:
        r1 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $c2 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        lookupswitch($c2)
        {
            case 59: goto label3;
            case 60: goto label4;
            default: goto label5;
        };

     label3:
        $r7 = newarray (sun.reflect.generics.tree.TypeArgument)[0];
        $r8 = staticinvoke <sun.reflect.generics.tree.SimpleClassTypeSignature: sun.reflect.generics.tree.SimpleClassTypeSignature make(java.lang.String,boolean,sun.reflect.generics.tree.TypeArgument[])>(r1, 0, $r7);
        return $r8;

     label4:
        $r9 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.TypeArgument[] parseTypeArguments()>();
        $r10 = staticinvoke <sun.reflect.generics.tree.SimpleClassTypeSignature: sun.reflect.generics.tree.SimpleClassTypeSignature make(java.lang.String,boolean,sun.reflect.generics.tree.TypeArgument[])>(r1, 0, $r9);
        return $r10;

     label5:
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected \'<\' or \';\' but got ");
        $c3 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        $r15 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.Error error(java.lang.String)>($r14);
        throw $r15;
    }

    private sun.reflect.generics.tree.SimpleClassTypeSignature parseSimpleClassTypeSignature(boolean)
    {
        sun.reflect.generics.parser.SignatureParser r0;
        boolean z0;
        java.lang.String r1, $r10;
        char c0;
        sun.reflect.generics.tree.TypeArgument[] $r2, $r4;
        sun.reflect.generics.tree.SimpleClassTypeSignature $r3, $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.Error $r11;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        z0 := @parameter0: boolean;
        r1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.String parseIdentifier()>();
        c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        lookupswitch(c0)
        {
            case 46: goto label0;
            case 59: goto label0;
            case 60: goto label1;
            default: goto label2;
        };

     label0:
        $r2 = newarray (sun.reflect.generics.tree.TypeArgument)[0];
        $r3 = staticinvoke <sun.reflect.generics.tree.SimpleClassTypeSignature: sun.reflect.generics.tree.SimpleClassTypeSignature make(java.lang.String,boolean,sun.reflect.generics.tree.TypeArgument[])>(r1, z0, $r2);
        return $r3;

     label1:
        $r4 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.TypeArgument[] parseTypeArguments()>();
        $r5 = staticinvoke <sun.reflect.generics.tree.SimpleClassTypeSignature: sun.reflect.generics.tree.SimpleClassTypeSignature make(java.lang.String,boolean,sun.reflect.generics.tree.TypeArgument[])>(r1, z0, $r4);
        return $r5;

     label2:
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected \'<\' or \';\' or \'.\', got \'");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        $r11 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.Error error(java.lang.String)>($r10);
        throw $r11;
    }

    private void parseClassTypeSignatureSuffix(java.util.List)
    {
        sun.reflect.generics.parser.SignatureParser r0;
        java.util.List r1;
        char $c0;
        sun.reflect.generics.tree.SimpleClassTypeSignature $r2;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        r1 := @parameter0: java.util.List;

     label0:
        $c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c0 != 46 goto label1;

        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r2 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.SimpleClassTypeSignature parseSimpleClassTypeSignature(boolean)>(1);
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2);
        goto label0;

     label1:
        return;
    }

    private sun.reflect.generics.tree.TypeArgument[] parseTypeArgumentsOpt()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        char $c0;
        sun.reflect.generics.tree.TypeArgument[] $r1, $r2;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c0 != 60 goto label0;

        $r1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.TypeArgument[] parseTypeArguments()>();
        return $r1;

     label0:
        $r2 = newarray (sun.reflect.generics.tree.TypeArgument)[0];
        return $r2;
    }

    private sun.reflect.generics.tree.TypeArgument[] parseTypeArguments()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        java.util.ArrayList $r1, r2;
        boolean $z0;
        char $c0, $c1, $c2;
        java.lang.AssertionError $r3;
        java.lang.Error $r4;
        sun.reflect.generics.tree.TypeArgument $r5, $r6;
        int $i3;
        sun.reflect.generics.tree.TypeArgument[] $r7, $r9;
        java.lang.Object[] $r8;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(3);
        r2 = $r1;
        $z0 = <sun.reflect.generics.parser.SignatureParser: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c0 == 60 goto label0;

        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label0:
        $c1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c1 == 60 goto label1;

        $r4 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.Error error(java.lang.String)>("expected \'<\'");
        throw $r4;

     label1:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r5 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.TypeArgument parseTypeArgument()>();
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r5);

     label2:
        $c2 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c2 == 62 goto label3;

        $r6 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.TypeArgument parseTypeArgument()>();
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r6);
        goto label2;

     label3:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $i3 = interfaceinvoke r2.<java.util.List: int size()>();
        $r7 = newarray (sun.reflect.generics.tree.TypeArgument)[$i3];
        $r8 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);
        $r9 = (sun.reflect.generics.tree.TypeArgument[]) $r8;
        return $r9;
    }

    private sun.reflect.generics.tree.TypeArgument parseTypeArgument()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        sun.reflect.generics.tree.FieldTypeSignature[] r1, r2;
        sun.reflect.generics.tree.TypeArgument[] r3;
        char c0;
        sun.reflect.generics.tree.FieldTypeSignature $r4, $r10, $r13;
        sun.reflect.generics.tree.BottomSignature $r5, $r8;
        sun.reflect.generics.tree.Wildcard $r6, $r9, $r12;
        sun.reflect.generics.tree.SimpleClassTypeSignature $r7, $r11;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        r1 = newarray (sun.reflect.generics.tree.FieldTypeSignature)[1];
        r2 = newarray (sun.reflect.generics.tree.FieldTypeSignature)[1];
        r3 = newarray (sun.reflect.generics.tree.TypeArgument)[0];
        c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        tableswitch(c0)
        {
            case 42: goto label1;
            case 43: goto label0;
            case 44: goto label3;
            case 45: goto label2;
            default: goto label3;
        };

     label0:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r4 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FieldTypeSignature parseFieldTypeSignature()>();
        r1[0] = $r4;
        $r5 = staticinvoke <sun.reflect.generics.tree.BottomSignature: sun.reflect.generics.tree.BottomSignature make()>();
        r2[0] = $r5;
        $r6 = staticinvoke <sun.reflect.generics.tree.Wildcard: sun.reflect.generics.tree.Wildcard make(sun.reflect.generics.tree.FieldTypeSignature[],sun.reflect.generics.tree.FieldTypeSignature[])>(r1, r2);
        return $r6;

     label1:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r7 = staticinvoke <sun.reflect.generics.tree.SimpleClassTypeSignature: sun.reflect.generics.tree.SimpleClassTypeSignature make(java.lang.String,boolean,sun.reflect.generics.tree.TypeArgument[])>("java.lang.Object", 0, r3);
        r1[0] = $r7;
        $r8 = staticinvoke <sun.reflect.generics.tree.BottomSignature: sun.reflect.generics.tree.BottomSignature make()>();
        r2[0] = $r8;
        $r9 = staticinvoke <sun.reflect.generics.tree.Wildcard: sun.reflect.generics.tree.Wildcard make(sun.reflect.generics.tree.FieldTypeSignature[],sun.reflect.generics.tree.FieldTypeSignature[])>(r1, r2);
        return $r9;

     label2:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r10 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FieldTypeSignature parseFieldTypeSignature()>();
        r2[0] = $r10;
        $r11 = staticinvoke <sun.reflect.generics.tree.SimpleClassTypeSignature: sun.reflect.generics.tree.SimpleClassTypeSignature make(java.lang.String,boolean,sun.reflect.generics.tree.TypeArgument[])>("java.lang.Object", 0, r3);
        r1[0] = $r11;
        $r12 = staticinvoke <sun.reflect.generics.tree.Wildcard: sun.reflect.generics.tree.Wildcard make(sun.reflect.generics.tree.FieldTypeSignature[],sun.reflect.generics.tree.FieldTypeSignature[])>(r1, r2);
        return $r12;

     label3:
        $r13 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FieldTypeSignature parseFieldTypeSignature()>();
        return $r13;
    }

    private sun.reflect.generics.tree.TypeVariableSignature parseTypeVariableSignature()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        boolean $z0;
        sun.reflect.generics.tree.TypeVariableSignature r1;
        char $c0, $c1, $c2;
        java.lang.AssertionError $r2;
        java.lang.Error $r3, $r10;
        java.lang.String $r4, $r7, $r9;
        java.lang.StringBuilder $r5, $r6, $r8;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $z0 = <sun.reflect.generics.parser.SignatureParser: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c0 == 84 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $c1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c1 == 84 goto label1;

        $r3 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.Error error(java.lang.String)>("expected a type variable usage");
        throw $r3;

     label1:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r4 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.String parseIdentifier()>();
        r1 = staticinvoke <sun.reflect.generics.tree.TypeVariableSignature: sun.reflect.generics.tree.TypeVariableSignature make(java.lang.String)>($r4);
        $c2 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c2 == 59 goto label2;

        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; expected in signature of type variable named");
        $r7 = virtualinvoke r1.<sun.reflect.generics.tree.TypeVariableSignature: java.lang.String getIdentifier()>();
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        $r10 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.Error error(java.lang.String)>($r9);
        throw $r10;

     label2:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        return r1;
    }

    private sun.reflect.generics.tree.ArrayTypeSignature parseArrayTypeSignature()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        char $c0;
        java.lang.Error $r1;
        sun.reflect.generics.tree.TypeSignature $r2;
        sun.reflect.generics.tree.ArrayTypeSignature $r3;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c0 == 91 goto label0;

        $r1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.Error error(java.lang.String)>("expected array type signature");
        throw $r1;

     label0:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r2 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.TypeSignature parseTypeSignature()>();
        $r3 = staticinvoke <sun.reflect.generics.tree.ArrayTypeSignature: sun.reflect.generics.tree.ArrayTypeSignature make(sun.reflect.generics.tree.TypeSignature)>($r2);
        return $r3;
    }

    private sun.reflect.generics.tree.TypeSignature parseTypeSignature()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        char $c0;
        sun.reflect.generics.tree.BaseType $r1;
        sun.reflect.generics.tree.FieldTypeSignature $r2;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        tableswitch($c0)
        {
            case 66: goto label0;
            case 67: goto label0;
            case 68: goto label0;
            case 69: goto label1;
            case 70: goto label0;
            case 71: goto label1;
            case 72: goto label1;
            case 73: goto label0;
            case 74: goto label0;
            case 75: goto label1;
            case 76: goto label1;
            case 77: goto label1;
            case 78: goto label1;
            case 79: goto label1;
            case 80: goto label1;
            case 81: goto label1;
            case 82: goto label1;
            case 83: goto label0;
            case 84: goto label1;
            case 85: goto label1;
            case 86: goto label1;
            case 87: goto label1;
            case 88: goto label1;
            case 89: goto label1;
            case 90: goto label0;
            default: goto label1;
        };

     label0:
        $r1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.BaseType parseBaseType()>();
        return $r1;

     label1:
        $r2 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FieldTypeSignature parseFieldTypeSignature()>();
        return $r2;
    }

    private sun.reflect.generics.tree.BaseType parseBaseType()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        char $c0;
        sun.reflect.generics.tree.ByteSignature $r1;
        sun.reflect.generics.tree.CharSignature $r2;
        sun.reflect.generics.tree.DoubleSignature $r3;
        sun.reflect.generics.tree.FloatSignature $r4;
        sun.reflect.generics.tree.IntSignature $r5;
        sun.reflect.generics.tree.LongSignature $r6;
        sun.reflect.generics.tree.ShortSignature $r7;
        sun.reflect.generics.tree.BooleanSignature $r8;
        boolean $z0;
        java.lang.AssertionError $r9;
        java.lang.Error $r10;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        tableswitch($c0)
        {
            case 66: goto label0;
            case 67: goto label1;
            case 68: goto label2;
            case 69: goto label8;
            case 70: goto label3;
            case 71: goto label8;
            case 72: goto label8;
            case 73: goto label4;
            case 74: goto label5;
            case 75: goto label8;
            case 76: goto label8;
            case 77: goto label8;
            case 78: goto label8;
            case 79: goto label8;
            case 80: goto label8;
            case 81: goto label8;
            case 82: goto label8;
            case 83: goto label6;
            case 84: goto label8;
            case 85: goto label8;
            case 86: goto label8;
            case 87: goto label8;
            case 88: goto label8;
            case 89: goto label8;
            case 90: goto label7;
            default: goto label8;
        };

     label0:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r1 = staticinvoke <sun.reflect.generics.tree.ByteSignature: sun.reflect.generics.tree.ByteSignature make()>();
        return $r1;

     label1:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r2 = staticinvoke <sun.reflect.generics.tree.CharSignature: sun.reflect.generics.tree.CharSignature make()>();
        return $r2;

     label2:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r3 = staticinvoke <sun.reflect.generics.tree.DoubleSignature: sun.reflect.generics.tree.DoubleSignature make()>();
        return $r3;

     label3:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r4 = staticinvoke <sun.reflect.generics.tree.FloatSignature: sun.reflect.generics.tree.FloatSignature make()>();
        return $r4;

     label4:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r5 = staticinvoke <sun.reflect.generics.tree.IntSignature: sun.reflect.generics.tree.IntSignature make()>();
        return $r5;

     label5:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r6 = staticinvoke <sun.reflect.generics.tree.LongSignature: sun.reflect.generics.tree.LongSignature make()>();
        return $r6;

     label6:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r7 = staticinvoke <sun.reflect.generics.tree.ShortSignature: sun.reflect.generics.tree.ShortSignature make()>();
        return $r7;

     label7:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r8 = staticinvoke <sun.reflect.generics.tree.BooleanSignature: sun.reflect.generics.tree.BooleanSignature make()>();
        return $r8;

     label8:
        $z0 = <sun.reflect.generics.parser.SignatureParser: boolean $assertionsDisabled>;
        if $z0 != 0 goto label9;

        $r9 = new java.lang.AssertionError;
        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();
        throw $r9;

     label9:
        $r10 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.Error error(java.lang.String)>("expected primitive type");
        throw $r10;
    }

    private sun.reflect.generics.tree.FieldTypeSignature[] parseBounds()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        java.util.ArrayList $r1, r2;
        char $c0, $c1, $c2;
        sun.reflect.generics.tree.FieldTypeSignature $r3, $r4;
        int $i3;
        sun.reflect.generics.tree.FieldTypeSignature[] $r6, $r8;
        java.lang.Object[] $r7;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(3);
        r2 = $r1;
        $c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c0 != 58 goto label3;

        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $c1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        lookupswitch($c1)
        {
            case 58: goto label0;
            default: goto label1;
        };

     label0:
        goto label2;

     label1:
        $r3 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FieldTypeSignature parseFieldTypeSignature()>();
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3);

     label2:
        $c2 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c2 != 58 goto label4;

        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r4 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FieldTypeSignature parseFieldTypeSignature()>();
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r4);
        goto label2;

     label3:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.Error error(java.lang.String)>("Bound expected");

     label4:
        $i3 = interfaceinvoke r2.<java.util.List: int size()>();
        $r6 = newarray (sun.reflect.generics.tree.FieldTypeSignature)[$i3];
        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);
        $r8 = (sun.reflect.generics.tree.FieldTypeSignature[]) $r7;
        return $r8;
    }

    private sun.reflect.generics.tree.ClassTypeSignature[] parseSuperInterfaces()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        java.util.ArrayList $r1, r2;
        char $c0;
        sun.reflect.generics.tree.ClassTypeSignature $r3;
        int $i1;
        sun.reflect.generics.tree.ClassTypeSignature[] $r4, $r6;
        java.lang.Object[] $r5;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(5);
        r2 = $r1;

     label0:
        $c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c0 != 76 goto label1;

        $r3 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.ClassTypeSignature parseClassTypeSignature()>();
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3);
        goto label0;

     label1:
        $i1 = interfaceinvoke r2.<java.util.List: int size()>();
        $r4 = newarray (sun.reflect.generics.tree.ClassTypeSignature)[$i1];
        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);
        $r6 = (sun.reflect.generics.tree.ClassTypeSignature[]) $r5;
        return $r6;
    }

    private sun.reflect.generics.tree.MethodTypeSignature parseMethodTypeSignature()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        boolean $z0;
        int $i0;
        java.lang.AssertionError $r1;
        sun.reflect.generics.tree.FormalTypeParameter[] $r2;
        sun.reflect.generics.tree.TypeSignature[] $r3;
        sun.reflect.generics.tree.ReturnType $r4;
        sun.reflect.generics.tree.FieldTypeSignature[] $r5;
        sun.reflect.generics.tree.MethodTypeSignature $r6;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $z0 = <sun.reflect.generics.parser.SignatureParser: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $i0 = r0.<sun.reflect.generics.parser.SignatureParser: int index>;
        if $i0 == 0 goto label0;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label0:
        $r2 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FormalTypeParameter[] parseZeroOrMoreFormalTypeParameters()>();
        $r3 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.TypeSignature[] parseFormalParameters()>();
        $r4 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.ReturnType parseReturnType()>();
        $r5 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FieldTypeSignature[] parseZeroOrMoreThrowsSignatures()>();
        $r6 = staticinvoke <sun.reflect.generics.tree.MethodTypeSignature: sun.reflect.generics.tree.MethodTypeSignature make(sun.reflect.generics.tree.FormalTypeParameter[],sun.reflect.generics.tree.TypeSignature[],sun.reflect.generics.tree.ReturnType,sun.reflect.generics.tree.FieldTypeSignature[])>($r2, $r3, $r4, $r5);
        return $r6;
    }

    private sun.reflect.generics.tree.TypeSignature[] parseFormalParameters()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        sun.reflect.generics.tree.TypeSignature[] r1;
        char $c0, $c1;
        java.lang.Error $r2, $r3;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c0 == 40 goto label0;

        $r2 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.Error error(java.lang.String)>("expected \'(\'");
        throw $r2;

     label0:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        r1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.TypeSignature[] parseZeroOrMoreTypeSignatures()>();
        $c1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c1 == 41 goto label1;

        $r3 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.Error error(java.lang.String)>("expected \')\'");
        throw $r3;

     label1:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        return r1;
    }

    private sun.reflect.generics.tree.TypeSignature[] parseZeroOrMoreTypeSignatures()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        java.util.ArrayList $r1, r2;
        boolean z0;
        char $c0;
        sun.reflect.generics.tree.TypeSignature $r3;
        int $i1;
        sun.reflect.generics.tree.TypeSignature[] $r4, $r6;
        java.lang.Object[] $r5;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>()>();
        r2 = $r1;
        z0 = 0;

     label0:
        if z0 != 0 goto label3;

        $c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        tableswitch($c0)
        {
            case 66: goto label1;
            case 67: goto label1;
            case 68: goto label1;
            case 69: goto label2;
            case 70: goto label1;
            case 71: goto label2;
            case 72: goto label2;
            case 73: goto label1;
            case 74: goto label1;
            case 75: goto label2;
            case 76: goto label1;
            case 77: goto label2;
            case 78: goto label2;
            case 79: goto label2;
            case 80: goto label2;
            case 81: goto label2;
            case 82: goto label2;
            case 83: goto label1;
            case 84: goto label1;
            case 85: goto label2;
            case 86: goto label2;
            case 87: goto label2;
            case 88: goto label2;
            case 89: goto label2;
            case 90: goto label1;
            case 91: goto label1;
            default: goto label2;
        };

     label1:
        $r3 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.TypeSignature parseTypeSignature()>();
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3);
        goto label0;

     label2:
        z0 = 1;
        goto label0;

     label3:
        $i1 = interfaceinvoke r2.<java.util.List: int size()>();
        $r4 = newarray (sun.reflect.generics.tree.TypeSignature)[$i1];
        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);
        $r6 = (sun.reflect.generics.tree.TypeSignature[]) $r5;
        return $r6;
    }

    private sun.reflect.generics.tree.ReturnType parseReturnType()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        char $c0;
        sun.reflect.generics.tree.VoidDescriptor $r1;
        sun.reflect.generics.tree.TypeSignature $r2;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c0 != 86 goto label0;

        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r1 = staticinvoke <sun.reflect.generics.tree.VoidDescriptor: sun.reflect.generics.tree.VoidDescriptor make()>();
        return $r1;

     label0:
        $r2 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.TypeSignature parseTypeSignature()>();
        return $r2;
    }

    private sun.reflect.generics.tree.FieldTypeSignature[] parseZeroOrMoreThrowsSignatures()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        java.util.ArrayList $r1, r2;
        char $c0;
        sun.reflect.generics.tree.FieldTypeSignature $r3;
        int $i1;
        sun.reflect.generics.tree.FieldTypeSignature[] $r4, $r6;
        java.lang.Object[] $r5;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(3);
        r2 = $r1;

     label0:
        $c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c0 != 94 goto label1;

        $r3 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FieldTypeSignature parseThrowsSignature()>();
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3);
        goto label0;

     label1:
        $i1 = interfaceinvoke r2.<java.util.List: int size()>();
        $r4 = newarray (sun.reflect.generics.tree.FieldTypeSignature)[$i1];
        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);
        $r6 = (sun.reflect.generics.tree.FieldTypeSignature[]) $r5;
        return $r6;
    }

    private sun.reflect.generics.tree.FieldTypeSignature parseThrowsSignature()
    {
        sun.reflect.generics.parser.SignatureParser r0;
        boolean $z0;
        char $c0, $c1;
        java.lang.AssertionError $r1;
        java.lang.Error $r2;
        sun.reflect.generics.tree.FieldTypeSignature $r3;

        r0 := @this: sun.reflect.generics.parser.SignatureParser;
        $z0 = <sun.reflect.generics.parser.SignatureParser: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $c0 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c0 == 94 goto label0;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label0:
        $c1 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: char current()>();
        if $c1 == 94 goto label1;

        $r2 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: java.lang.Error error(java.lang.String)>("expected throws signature");
        throw $r2;

     label1:
        specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: void advance()>();
        $r3 = specialinvoke r0.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FieldTypeSignature parseFieldTypeSignature(boolean)>(0);
        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/reflect/generics/parser/SignatureParser";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.reflect.generics.parser.SignatureParser: boolean $assertionsDisabled> = $z1;
        return;
    }
}
