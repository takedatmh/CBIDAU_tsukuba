class java.lang.ClassLoader$ParallelLoaders extends java.lang.Object
{
    private static final java.util.Set loaderTypes;

    private void <init>()
    {
        java.lang.ClassLoader$ParallelLoaders r0;

        r0 := @this: java.lang.ClassLoader$ParallelLoaders;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    static boolean register(java.lang.Class)
    {
        java.lang.Class r0, $r5;
        java.util.Set $r1, r2, $r4, $r6;
        java.lang.Throwable r3, $r7;
        boolean $z0, $z2, $z3;

        r0 := @parameter0: java.lang.Class;
        $r1 = <java.lang.ClassLoader$ParallelLoaders: java.util.Set loaderTypes>;
        r2 = $r1;
        entermonitor $r1;

     label0:
        $r4 = <java.lang.ClassLoader$ParallelLoaders: java.util.Set loaderTypes>;
        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();
        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r5);
        if $z0 == 0 goto label2;

        $r6 = <java.lang.ClassLoader$ParallelLoaders: java.util.Set loaderTypes>;
        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r0);
        $z2 = 1;
        exitmonitor r2;

     label1:
        return $z2;

     label2:
        $z3 = 0;
        exitmonitor r2;

     label3:
        return $z3;

     label4:
        $r7 := @caughtexception;

     label5:
        r3 = $r7;
        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    static boolean isRegistered(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.Set $r1, r2, $r4;
        java.lang.Throwable r3, $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;
        $r1 = <java.lang.ClassLoader$ParallelLoaders: java.util.Set loaderTypes>;
        r2 = $r1;
        entermonitor $r1;

     label0:
        $r4 = <java.lang.ClassLoader$ParallelLoaders: java.util.Set loaderTypes>;
        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r0);
        exitmonitor r2;

     label1:
        return $z0;

     label2:
        $r5 := @caughtexception;

     label3:
        r3 = $r5;
        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    static void <clinit>()
    {
        java.util.WeakHashMap $r0;
        java.util.Set r1, $r3, $r4, $r5;
        java.lang.Throwable r2, $r6;

        $r0 = new java.util.WeakHashMap;
        specialinvoke $r0.<java.util.WeakHashMap: void <init>()>();
        $r3 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r0);
        <java.lang.ClassLoader$ParallelLoaders: java.util.Set loaderTypes> = $r3;
        $r4 = <java.lang.ClassLoader$ParallelLoaders: java.util.Set loaderTypes>;
        r1 = $r4;
        entermonitor $r4;

     label0:
        $r5 = <java.lang.ClassLoader$ParallelLoaders: java.util.Set loaderTypes>;
        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(class "java/lang/ClassLoader");
        exitmonitor r1;

     label1:
        goto label5;

     label2:
        $r6 := @caughtexception;

     label3:
        r2 = $r6;
        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
}
