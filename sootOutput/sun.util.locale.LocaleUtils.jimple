public final class sun.util.locale.LocaleUtils extends java.lang.Object
{

    private void <init>()
    {
        sun.util.locale.LocaleUtils r0;

        r0 := @this: sun.util.locale.LocaleUtils;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static boolean caseIgnoreMatch(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int i0, i1, $i4;
        char c2, c3, $c5, $c6;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        if r0 != r1 goto label0;

        return 1;

     label0:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        $i4 = virtualinvoke r1.<java.lang.String: int length()>();
        if i0 == $i4 goto label1;

        return 0;

     label1:
        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);
        c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);
        if c2 == c3 goto label3;

        $c5 = staticinvoke <sun.util.locale.LocaleUtils: char toLower(char)>(c2);
        $c6 = staticinvoke <sun.util.locale.LocaleUtils: char toLower(char)>(c3);
        if $c5 == $c6 goto label3;

        return 0;

     label3:
        i1 = i1 + 1;
        goto label2;

     label4:
        return 1;
    }

    static int caseIgnoreCompare(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2, $r3;
        int $i0;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        if r0 != r1 goto label0;

        return 0;

     label0:
        $r2 = staticinvoke <sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>(r0);
        $r3 = staticinvoke <sun.util.locale.LocaleUtils: java.lang.String toLowerString(java.lang.String)>(r1);
        $i0 = virtualinvoke $r2.<java.lang.String: int compareTo(java.lang.String)>($r3);
        return $i0;
    }

    static char toUpper(char)
    {
        char c0, $c2;
        boolean $z0;
        int $i1;

        c0 := @parameter0: char;
        $z0 = staticinvoke <sun.util.locale.LocaleUtils: boolean isLower(char)>(c0);
        if $z0 == 0 goto label0;

        $i1 = c0 - 32;
        $c2 = (char) $i1;
        goto label1;

     label0:
        $c2 = c0;

     label1:
        return $c2;
    }

    static char toLower(char)
    {
        char c0, $c2;
        boolean $z0;
        int $i1;

        c0 := @parameter0: char;
        $z0 = staticinvoke <sun.util.locale.LocaleUtils: boolean isUpper(char)>(c0);
        if $z0 == 0 goto label0;

        $i1 = c0 + 32;
        $c2 = (char) $i1;
        goto label1;

     label0:
        $c2 = c0;

     label1:
        return $c2;
    }

    public static java.lang.String toLowerString(java.lang.String)
    {
        java.lang.String r0, $r3;
        int i0, i1, i2, $i5;
        char[] r1;
        char c3, $c4, $c6;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        i1 = 0;

     label0:
        if i1 >= i0 goto label2;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);
        $z0 = staticinvoke <sun.util.locale.LocaleUtils: boolean isUpper(char)>($c4);
        if $z0 == 0 goto label1;

        goto label2;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        if i1 != i0 goto label3;

        return r0;

     label3:
        r1 = newarray (char)[i0];
        i2 = 0;

     label4:
        if i2 >= i0 goto label7;

        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        $i5 = i2;
        if i2 >= i1 goto label5;

        $c6 = c3;
        goto label6;

     label5:
        $c6 = staticinvoke <sun.util.locale.LocaleUtils: char toLower(char)>(c3);

     label6:
        r1[$i5] = $c6;
        i2 = i2 + 1;
        goto label4;

     label7:
        $r3 = new java.lang.String;
        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r1);
        return $r3;
    }

    static java.lang.String toUpperString(java.lang.String)
    {
        java.lang.String r0, $r3;
        int i0, i1, i2, $i5;
        char[] r1;
        char c3, $c4, $c6;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        i1 = 0;

     label0:
        if i1 >= i0 goto label2;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);
        $z0 = staticinvoke <sun.util.locale.LocaleUtils: boolean isLower(char)>($c4);
        if $z0 == 0 goto label1;

        goto label2;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        if i1 != i0 goto label3;

        return r0;

     label3:
        r1 = newarray (char)[i0];
        i2 = 0;

     label4:
        if i2 >= i0 goto label7;

        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        $i5 = i2;
        if i2 >= i1 goto label5;

        $c6 = c3;
        goto label6;

     label5:
        $c6 = staticinvoke <sun.util.locale.LocaleUtils: char toUpper(char)>(c3);

     label6:
        r1[$i5] = $c6;
        i2 = i2 + 1;
        goto label4;

     label7:
        $r3 = new java.lang.String;
        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r1);
        return $r3;
    }

    static java.lang.String toTitleString(java.lang.String)
    {
        java.lang.String r0, $r2;
        int i0, i1, i2, $i4;
        char[] r1;
        char c3, $c5, $c6, $c7, $c8;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;
        $i4 = virtualinvoke r0.<java.lang.String: int length()>();
        i0 = $i4;
        if $i4 != 0 goto label0;

        return r0;

     label0:
        i1 = 0;
        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);
        $z0 = staticinvoke <sun.util.locale.LocaleUtils: boolean isLower(char)>($c5);
        if $z0 != 0 goto label3;

        i1 = 1;

     label1:
        if i1 >= i0 goto label3;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);
        $z1 = staticinvoke <sun.util.locale.LocaleUtils: boolean isUpper(char)>($c6);
        if $z1 == 0 goto label2;

        goto label3;

     label2:
        i1 = i1 + 1;
        goto label1;

     label3:
        if i1 != i0 goto label4;

        return r0;

     label4:
        r1 = newarray (char)[i0];
        i2 = 0;

     label5:
        if i2 >= i0 goto label9;

        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        if i2 != 0 goto label6;

        if i1 != 0 goto label6;

        $c7 = staticinvoke <sun.util.locale.LocaleUtils: char toUpper(char)>(c3);
        r1[i2] = $c7;
        goto label8;

     label6:
        if i2 >= i1 goto label7;

        r1[i2] = c3;
        goto label8;

     label7:
        $c8 = staticinvoke <sun.util.locale.LocaleUtils: char toLower(char)>(c3);
        r1[i2] = $c8;

     label8:
        i2 = i2 + 1;
        goto label5;

     label9:
        $r2 = new java.lang.String;
        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);
        return $r2;
    }

    private static boolean isUpper(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        if c0 < 65 goto label0;

        if c0 > 90 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private static boolean isLower(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        if c0 < 97 goto label0;

        if c0 > 122 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    static boolean isAlpha(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        if c0 < 65 goto label0;

        if c0 <= 90 goto label1;

     label0:
        if c0 < 97 goto label2;

        if c0 > 122 goto label2;

     label1:
        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    static boolean isAlphaString(java.lang.String)
    {
        java.lang.String r0;
        int i0, i1;
        char $c2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        i1 = 0;

     label0:
        if i1 >= i0 goto label2;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);
        $z0 = staticinvoke <sun.util.locale.LocaleUtils: boolean isAlpha(char)>($c2);
        if $z0 != 0 goto label1;

        return 0;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        return 1;
    }

    static boolean isNumeric(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        if c0 < 48 goto label0;

        if c0 > 57 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    static boolean isNumericString(java.lang.String)
    {
        java.lang.String r0;
        int i0, i1;
        char $c2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        i1 = 0;

     label0:
        if i1 >= i0 goto label2;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);
        $z0 = staticinvoke <sun.util.locale.LocaleUtils: boolean isNumeric(char)>($c2);
        if $z0 != 0 goto label1;

        return 0;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        return 1;
    }

    static boolean isAlphaNumeric(char)
    {
        char c0;
        boolean $z0, $z1, $z2;

        c0 := @parameter0: char;
        $z0 = staticinvoke <sun.util.locale.LocaleUtils: boolean isAlpha(char)>(c0);
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <sun.util.locale.LocaleUtils: boolean isNumeric(char)>(c0);
        if $z1 == 0 goto label1;

     label0:
        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    static boolean isAlphaNumericString(java.lang.String)
    {
        java.lang.String r0;
        int i0, i1;
        char $c2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        i1 = 0;

     label0:
        if i1 >= i0 goto label2;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);
        $z0 = staticinvoke <sun.util.locale.LocaleUtils: boolean isAlphaNumeric(char)>($c2);
        if $z0 != 0 goto label1;

        return 0;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        return 1;
    }

    static boolean isEmpty(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        if r0 == null goto label0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i0 != 0 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static boolean isEmpty(java.util.Set)
    {
        java.util.Set r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Set;
        if r0 == null goto label0;

        $z0 = interfaceinvoke r0.<java.util.Set: boolean isEmpty()>();
        if $z0 == 0 goto label1;

     label0:
        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    static boolean isEmpty(java.util.Map)
    {
        java.util.Map r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Map;
        if r0 == null goto label0;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();
        if $z0 == 0 goto label1;

     label0:
        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    static boolean isEmpty(java.util.List)
    {
        java.util.List r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;
        if r0 == null goto label0;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();
        if $z0 == 0 goto label1;

     label0:
        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }
}
