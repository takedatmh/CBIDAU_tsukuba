public class java.util.logging.StreamHandler extends java.util.logging.Handler
{
    private java.util.logging.LogManager manager;
    private java.io.OutputStream output;
    private boolean doneHeader;
    private java.io.Writer writer;

    private void configure()
    {
        java.util.logging.StreamHandler r0;
        java.util.logging.LogManager r1;
        java.lang.String r2, $r9, $r15, $r20, $r26, $r27;
        java.lang.StringBuilder $r3, $r7, $r8, $r12, $r13, $r14, $r17, $r18, $r19, $r23, $r24, $r25;
        java.lang.Exception r4, r5, $r28, $r29;
        java.lang.Class $r6;
        java.util.logging.Level $r10, $r11;
        java.util.logging.Filter $r16;
        java.util.logging.SimpleFormatter $r21;
        java.util.logging.Formatter $r22;

        r0 := @this: java.util.logging.StreamHandler;
        r1 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();
        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r2 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".level");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        $r10 = <java.util.logging.Level: java.util.logging.Level INFO>;
        $r11 = virtualinvoke r1.<java.util.logging.LogManager: java.util.logging.Level getLevelProperty(java.lang.String,java.util.logging.Level)>($r9, $r10);
        virtualinvoke r0.<java.util.logging.StreamHandler: void setLevel(java.util.logging.Level)>($r11);
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".filter");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        $r16 = virtualinvoke r1.<java.util.logging.LogManager: java.util.logging.Filter getFilterProperty(java.lang.String,java.util.logging.Filter)>($r15, null);
        virtualinvoke r0.<java.util.logging.StreamHandler: void setFilter(java.util.logging.Filter)>($r16);
        $r17 = new java.lang.StringBuilder;
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".formatter");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        $r21 = new java.util.logging.SimpleFormatter;
        specialinvoke $r21.<java.util.logging.SimpleFormatter: void <init>()>();
        $r22 = virtualinvoke r1.<java.util.logging.LogManager: java.util.logging.Formatter getFormatterProperty(java.lang.String,java.util.logging.Formatter)>($r20, $r21);
        virtualinvoke r0.<java.util.logging.StreamHandler: void setFormatter(java.util.logging.Formatter)>($r22);

     label0:
        $r23 = new java.lang.StringBuilder;
        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".encoding");
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();
        $r27 = virtualinvoke r1.<java.util.logging.LogManager: java.lang.String getStringProperty(java.lang.String,java.lang.String)>($r26, null);
        virtualinvoke r0.<java.util.logging.StreamHandler: void setEncoding(java.lang.String)>($r27);

     label1:
        goto label6;

     label2:
        $r28 := @caughtexception;
        r4 = $r28;

     label3:
        virtualinvoke r0.<java.util.logging.StreamHandler: void setEncoding(java.lang.String)>(null);

     label4:
        goto label6;

     label5:
        $r29 := @caughtexception;
        r5 = $r29;

     label6:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public void <init>()
    {
        java.util.logging.StreamHandler r0;
        java.util.logging.LogManager $r1;

        r0 := @this: java.util.logging.StreamHandler;
        specialinvoke r0.<java.util.logging.Handler: void <init>()>();
        $r1 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();
        r0.<java.util.logging.StreamHandler: java.util.logging.LogManager manager> = $r1;
        r0.<java.util.logging.StreamHandler: boolean sealed> = 0;
        specialinvoke r0.<java.util.logging.StreamHandler: void configure()>();
        r0.<java.util.logging.StreamHandler: boolean sealed> = 1;
        return;
    }

    public void <init>(java.io.OutputStream, java.util.logging.Formatter)
    {
        java.util.logging.StreamHandler r0;
        java.io.OutputStream r1;
        java.util.logging.Formatter r2;
        java.util.logging.LogManager $r3;

        r0 := @this: java.util.logging.StreamHandler;
        r1 := @parameter0: java.io.OutputStream;
        r2 := @parameter1: java.util.logging.Formatter;
        specialinvoke r0.<java.util.logging.Handler: void <init>()>();
        $r3 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();
        r0.<java.util.logging.StreamHandler: java.util.logging.LogManager manager> = $r3;
        r0.<java.util.logging.StreamHandler: boolean sealed> = 0;
        specialinvoke r0.<java.util.logging.StreamHandler: void configure()>();
        virtualinvoke r0.<java.util.logging.StreamHandler: void setFormatter(java.util.logging.Formatter)>(r2);
        virtualinvoke r0.<java.util.logging.StreamHandler: void setOutputStream(java.io.OutputStream)>(r1);
        r0.<java.util.logging.StreamHandler: boolean sealed> = 1;
        return;
    }

    protected synchronized void setOutputStream(java.io.OutputStream) throws java.lang.SecurityException
    {
        java.util.logging.StreamHandler r0;
        java.io.OutputStream r1, $r6, $r8;
        java.lang.String r2, $r14;
        java.io.UnsupportedEncodingException r3, $r9;
        java.lang.NullPointerException $r4;
        java.io.OutputStreamWriter $r5, $r7;
        java.lang.Error $r10;
        java.lang.StringBuilder $r11, $r12, $r13;

        r0 := @this: java.util.logging.StreamHandler;
        r1 := @parameter0: java.io.OutputStream;
        if r1 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label0:
        specialinvoke r0.<java.util.logging.StreamHandler: void flushAndClose()>();
        r0.<java.util.logging.StreamHandler: java.io.OutputStream output> = r1;
        r0.<java.util.logging.StreamHandler: boolean doneHeader> = 0;
        r2 = virtualinvoke r0.<java.util.logging.StreamHandler: java.lang.String getEncoding()>();
        if r2 != null goto label1;

        $r5 = new java.io.OutputStreamWriter;
        $r6 = r0.<java.util.logging.StreamHandler: java.io.OutputStream output>;
        specialinvoke $r5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r6);
        r0.<java.util.logging.StreamHandler: java.io.Writer writer> = $r5;
        goto label4;

     label1:
        $r7 = new java.io.OutputStreamWriter;
        $r8 = r0.<java.util.logging.StreamHandler: java.io.OutputStream output>;
        specialinvoke $r7.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r8, r2);
        r0.<java.util.logging.StreamHandler: java.io.Writer writer> = $r7;

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;
        r3 = $r9;
        $r10 = new java.lang.Error;
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected exception ");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r10.<java.lang.Error: void <init>(java.lang.String)>($r14);
        throw $r10;

     label4:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public void setEncoding(java.lang.String) throws java.lang.SecurityException, java.io.UnsupportedEncodingException
    {
        java.util.logging.StreamHandler r0;
        java.lang.String r1;
        java.io.OutputStream $r2, $r4, $r6;
        java.io.OutputStreamWriter $r3, $r5;

        r0 := @this: java.util.logging.StreamHandler;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.util.logging.Handler: void setEncoding(java.lang.String)>(r1);
        $r2 = r0.<java.util.logging.StreamHandler: java.io.OutputStream output>;
        if $r2 != null goto label0;

        return;

     label0:
        virtualinvoke r0.<java.util.logging.StreamHandler: void flush()>();
        if r1 != null goto label1;

        $r3 = new java.io.OutputStreamWriter;
        $r4 = r0.<java.util.logging.StreamHandler: java.io.OutputStream output>;
        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r4);
        r0.<java.util.logging.StreamHandler: java.io.Writer writer> = $r3;
        goto label2;

     label1:
        $r5 = new java.io.OutputStreamWriter;
        $r6 = r0.<java.util.logging.StreamHandler: java.io.OutputStream output>;
        specialinvoke $r5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r6, r1);
        r0.<java.util.logging.StreamHandler: java.io.Writer writer> = $r5;

     label2:
        return;
    }

    public synchronized void publish(java.util.logging.LogRecord)
    {
        java.util.logging.StreamHandler r0;
        java.util.logging.LogRecord r1;
        java.lang.String r2, $r8;
        java.lang.Exception r3, $r5, $r10, r11;
        boolean $z0, $z1;
        java.util.logging.Formatter $r4, $r7;
        java.io.Writer $r6, $r9;

        r0 := @this: java.util.logging.StreamHandler;
        r1 := @parameter0: java.util.logging.LogRecord;
        $z0 = virtualinvoke r0.<java.util.logging.StreamHandler: boolean isLoggable(java.util.logging.LogRecord)>(r1);
        if $z0 != 0 goto label0;

        return;

     label0:
        $r4 = virtualinvoke r0.<java.util.logging.StreamHandler: java.util.logging.Formatter getFormatter()>();
        r2 = virtualinvoke $r4.<java.util.logging.Formatter: java.lang.String format(java.util.logging.LogRecord)>(r1);

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r3 = $r5;
        virtualinvoke r0.<java.util.logging.StreamHandler: void reportError(java.lang.String,java.lang.Exception,int)>(null, r3, 5);
        return;

     label3:
        $z1 = r0.<java.util.logging.StreamHandler: boolean doneHeader>;
        if $z1 != 0 goto label4;

        $r6 = r0.<java.util.logging.StreamHandler: java.io.Writer writer>;
        $r7 = virtualinvoke r0.<java.util.logging.StreamHandler: java.util.logging.Formatter getFormatter()>();
        $r8 = virtualinvoke $r7.<java.util.logging.Formatter: java.lang.String getHead(java.util.logging.Handler)>(r0);
        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String)>($r8);
        r0.<java.util.logging.StreamHandler: boolean doneHeader> = 1;

     label4:
        $r9 = r0.<java.util.logging.StreamHandler: java.io.Writer writer>;
        virtualinvoke $r9.<java.io.Writer: void write(java.lang.String)>(r2);

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;
        r11 = $r10;
        virtualinvoke r0.<java.util.logging.StreamHandler: void reportError(java.lang.String,java.lang.Exception,int)>(null, r11, 1);

     label7:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
        catch java.lang.Exception from label3 to label5 with label6;
    }

    public boolean isLoggable(java.util.logging.LogRecord)
    {
        java.util.logging.StreamHandler r0;
        java.util.logging.LogRecord r1;
        java.io.Writer $r2;
        boolean $z0;

        r0 := @this: java.util.logging.StreamHandler;
        r1 := @parameter0: java.util.logging.LogRecord;
        $r2 = r0.<java.util.logging.StreamHandler: java.io.Writer writer>;
        if $r2 == null goto label0;

        if r1 != null goto label1;

     label0:
        return 0;

     label1:
        $z0 = specialinvoke r0.<java.util.logging.Handler: boolean isLoggable(java.util.logging.LogRecord)>(r1);
        return $z0;
    }

    public synchronized void flush()
    {
        java.util.logging.StreamHandler r0;
        java.lang.Exception r1, $r4;
        java.io.Writer $r2, $r3;

        r0 := @this: java.util.logging.StreamHandler;
        $r2 = r0.<java.util.logging.StreamHandler: java.io.Writer writer>;
        if $r2 == null goto label3;

     label0:
        $r3 = r0.<java.util.logging.StreamHandler: java.io.Writer writer>;
        virtualinvoke $r3.<java.io.Writer: void flush()>();

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        virtualinvoke r0.<java.util.logging.StreamHandler: void reportError(java.lang.String,java.lang.Exception,int)>(null, r1, 2);

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    private synchronized void flushAndClose() throws java.lang.SecurityException
    {
        java.util.logging.StreamHandler r0;
        java.lang.Exception r1, $r11;
        java.io.Writer $r2, $r3, $r6, $r9, $r10;
        boolean $z0;
        java.util.logging.Formatter $r4, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: java.util.logging.StreamHandler;
        virtualinvoke r0.<java.util.logging.StreamHandler: void checkPermission()>();
        $r2 = r0.<java.util.logging.StreamHandler: java.io.Writer writer>;
        if $r2 == null goto label5;

     label0:
        $z0 = r0.<java.util.logging.StreamHandler: boolean doneHeader>;
        if $z0 != 0 goto label1;

        $r3 = r0.<java.util.logging.StreamHandler: java.io.Writer writer>;
        $r4 = virtualinvoke r0.<java.util.logging.StreamHandler: java.util.logging.Formatter getFormatter()>();
        $r5 = virtualinvoke $r4.<java.util.logging.Formatter: java.lang.String getHead(java.util.logging.Handler)>(r0);
        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r5);
        r0.<java.util.logging.StreamHandler: boolean doneHeader> = 1;

     label1:
        $r6 = r0.<java.util.logging.StreamHandler: java.io.Writer writer>;
        $r7 = virtualinvoke r0.<java.util.logging.StreamHandler: java.util.logging.Formatter getFormatter()>();
        $r8 = virtualinvoke $r7.<java.util.logging.Formatter: java.lang.String getTail(java.util.logging.Handler)>(r0);
        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String)>($r8);
        $r9 = r0.<java.util.logging.StreamHandler: java.io.Writer writer>;
        virtualinvoke $r9.<java.io.Writer: void flush()>();
        $r10 = r0.<java.util.logging.StreamHandler: java.io.Writer writer>;
        virtualinvoke $r10.<java.io.Writer: void close()>();

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;
        r1 = $r11;
        virtualinvoke r0.<java.util.logging.StreamHandler: void reportError(java.lang.String,java.lang.Exception,int)>(null, r1, 3);

     label4:
        r0.<java.util.logging.StreamHandler: java.io.Writer writer> = null;
        r0.<java.util.logging.StreamHandler: java.io.OutputStream output> = null;

     label5:
        return;

        catch java.lang.Exception from label0 to label2 with label3;
    }

    public synchronized void close() throws java.lang.SecurityException
    {
        java.util.logging.StreamHandler r0;

        r0 := @this: java.util.logging.StreamHandler;
        specialinvoke r0.<java.util.logging.StreamHandler: void flushAndClose()>();
        return;
    }
}
