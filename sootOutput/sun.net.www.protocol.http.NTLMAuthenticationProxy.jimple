class sun.net.www.protocol.http.NTLMAuthenticationProxy extends java.lang.Object
{
    private static java.lang.reflect.Method supportsTA;
    private static java.lang.reflect.Method isTrustedSite;
    private static final java.lang.String clazzStr;
    private static final java.lang.String supportsTAStr;
    private static final java.lang.String isTrustedSiteStr;
    static final sun.net.www.protocol.http.NTLMAuthenticationProxy proxy;
    static final boolean supported;
    static final boolean supportsTransparentAuth;
    private final java.lang.reflect.Constructor threeArgCtr;
    private final java.lang.reflect.Constructor fiveArgCtr;

    private void <init>(java.lang.reflect.Constructor, java.lang.reflect.Constructor)
    {
        sun.net.www.protocol.http.NTLMAuthenticationProxy r0;
        java.lang.reflect.Constructor r1, r2;

        r0 := @this: sun.net.www.protocol.http.NTLMAuthenticationProxy;
        r1 := @parameter0: java.lang.reflect.Constructor;
        r2 := @parameter1: java.lang.reflect.Constructor;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.net.www.protocol.http.NTLMAuthenticationProxy: java.lang.reflect.Constructor threeArgCtr> = r1;
        r0.<sun.net.www.protocol.http.NTLMAuthenticationProxy: java.lang.reflect.Constructor fiveArgCtr> = r2;
        return;
    }

    sun.net.www.protocol.http.AuthenticationInfo create(boolean, java.net.URL, java.net.PasswordAuthentication)
    {
        sun.net.www.protocol.http.NTLMAuthenticationProxy r0;
        boolean z0;
        java.net.URL r1;
        java.net.PasswordAuthentication r2;
        java.lang.ReflectiveOperationException r3, $r9;
        java.lang.reflect.Constructor $r4;
        java.lang.Object[] $r5;
        java.lang.Boolean $r6;
        java.lang.Object $r7;
        sun.net.www.protocol.http.AuthenticationInfo $r8;

        r0 := @this: sun.net.www.protocol.http.NTLMAuthenticationProxy;
        z0 := @parameter0: boolean;
        r1 := @parameter1: java.net.URL;
        r2 := @parameter2: java.net.PasswordAuthentication;

     label0:
        $r4 = r0.<sun.net.www.protocol.http.NTLMAuthenticationProxy: java.lang.reflect.Constructor threeArgCtr>;
        $r5 = newarray (java.lang.Object)[3];
        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);
        $r5[0] = $r6;
        $r5[1] = r1;
        $r5[2] = r2;
        $r7 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);
        $r8 = (sun.net.www.protocol.http.AuthenticationInfo) $r7;

     label1:
        return $r8;

     label2:
        $r9 := @caughtexception;
        r3 = $r9;
        staticinvoke <sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>(r3);
        return null;

        catch java.lang.ReflectiveOperationException from label0 to label1 with label2;
    }

    sun.net.www.protocol.http.AuthenticationInfo create(boolean, java.lang.String, int, java.net.PasswordAuthentication)
    {
        sun.net.www.protocol.http.NTLMAuthenticationProxy r0;
        boolean z0;
        java.lang.String r1;
        int i0;
        java.net.PasswordAuthentication r2;
        java.lang.ReflectiveOperationException r3, $r10;
        java.lang.reflect.Constructor $r4;
        java.lang.Object[] $r5;
        java.lang.Boolean $r6;
        java.lang.Integer $r7;
        java.lang.Object $r8;
        sun.net.www.protocol.http.AuthenticationInfo $r9;

        r0 := @this: sun.net.www.protocol.http.NTLMAuthenticationProxy;
        z0 := @parameter0: boolean;
        r1 := @parameter1: java.lang.String;
        i0 := @parameter2: int;
        r2 := @parameter3: java.net.PasswordAuthentication;

     label0:
        $r4 = r0.<sun.net.www.protocol.http.NTLMAuthenticationProxy: java.lang.reflect.Constructor fiveArgCtr>;
        $r5 = newarray (java.lang.Object)[4];
        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);
        $r5[0] = $r6;
        $r5[1] = r1;
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        $r5[2] = $r7;
        $r5[3] = r2;
        $r8 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);
        $r9 = (sun.net.www.protocol.http.AuthenticationInfo) $r8;

     label1:
        return $r9;

     label2:
        $r10 := @caughtexception;
        r3 = $r10;
        staticinvoke <sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>(r3);
        return null;

        catch java.lang.ReflectiveOperationException from label0 to label1 with label2;
    }

    private static boolean supportsTransparentAuth()
    {
        java.lang.reflect.Method $r0;
        java.lang.ReflectiveOperationException r1, $r5;
        java.lang.Object[] $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

     label0:
        $r0 = <sun.net.www.protocol.http.NTLMAuthenticationProxy: java.lang.reflect.Method supportsTA>;
        $r2 = newarray (java.lang.Object)[0];
        $r3 = virtualinvoke $r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r2);
        $r4 = (java.lang.Boolean) $r3;
        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

     label1:
        return $z0;

     label2:
        $r5 := @caughtexception;
        r1 = $r5;
        staticinvoke <sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>(r1);
        return 0;

        catch java.lang.ReflectiveOperationException from label0 to label1 with label2;
    }

    public static boolean isTrustedSite(java.net.URL)
    {
        java.net.URL r0;
        java.lang.reflect.Method $r1;
        java.lang.ReflectiveOperationException r2, $r6;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @parameter0: java.net.URL;

     label0:
        $r1 = <sun.net.www.protocol.http.NTLMAuthenticationProxy: java.lang.reflect.Method isTrustedSite>;
        $r3 = newarray (java.lang.Object)[1];
        $r3[0] = r0;
        $r4 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);
        $r5 = (java.lang.Boolean) $r4;
        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

     label1:
        return $z0;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        staticinvoke <sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>(r2);
        return 0;

        catch java.lang.ReflectiveOperationException from label0 to label1 with label2;
    }

    private static sun.net.www.protocol.http.NTLMAuthenticationProxy tryLoadNTLMAuthentication()
    {
        java.lang.Class r0, $r1, $r7, $r8;
        java.lang.reflect.Constructor r2, r3;
        java.lang.ClassNotFoundException r4, $r14;
        java.lang.Class[] $r5, $r6, $r9, $r11;
        java.lang.reflect.Method $r10, $r12;
        sun.net.www.protocol.http.NTLMAuthenticationProxy $r13;
        java.lang.ReflectiveOperationException $r15, r16;
        java.lang.AssertionError $r17;

     label0:
        r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("sun.net.www.protocol.http.ntlm.NTLMAuthentication", 1, null);
        if r0 == null goto label2;

        $r5 = newarray (java.lang.Class)[3];
        $r1 = <java.lang.Boolean: java.lang.Class TYPE>;
        $r5[0] = $r1;
        $r5[1] = class "java/net/URL";
        $r5[2] = class "java/net/PasswordAuthentication";
        r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r5);
        $r6 = newarray (java.lang.Class)[4];
        $r7 = <java.lang.Boolean: java.lang.Class TYPE>;
        $r6[0] = $r7;
        $r6[1] = class "java/lang/String";
        $r8 = <java.lang.Integer: java.lang.Class TYPE>;
        $r6[2] = $r8;
        $r6[3] = class "java/net/PasswordAuthentication";
        r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r6);
        $r9 = newarray (java.lang.Class)[0];
        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("supportsTransparentAuth", $r9);
        <sun.net.www.protocol.http.NTLMAuthenticationProxy: java.lang.reflect.Method supportsTA> = $r10;
        $r11 = newarray (java.lang.Class)[1];
        $r11[0] = class "java/net/URL";
        $r12 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("isTrustedSite", $r11);
        <sun.net.www.protocol.http.NTLMAuthenticationProxy: java.lang.reflect.Method isTrustedSite> = $r12;
        $r13 = new sun.net.www.protocol.http.NTLMAuthenticationProxy;
        specialinvoke $r13.<sun.net.www.protocol.http.NTLMAuthenticationProxy: void <init>(java.lang.reflect.Constructor,java.lang.reflect.Constructor)>(r2, r3);

     label1:
        return $r13;

     label2:
        goto label5;

     label3:
        $r14 := @caughtexception;
        r4 = $r14;
        staticinvoke <sun.net.www.protocol.http.NTLMAuthenticationProxy: void finest(java.lang.Exception)>(r4);
        goto label5;

     label4:
        $r15 := @caughtexception;
        r16 = $r15;
        $r17 = new java.lang.AssertionError;
        specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>(r16);
        throw $r17;

     label5:
        return null;

        catch java.lang.ClassNotFoundException from label0 to label1 with label3;
        catch java.lang.ReflectiveOperationException from label0 to label1 with label4;
    }

    static void finest(java.lang.Exception)
    {
        java.lang.Exception r0;
        sun.util.logging.PlatformLogger r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @parameter0: java.lang.Exception;
        r1 = staticinvoke <sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger getHttpLogger()>();
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NTLMAuthenticationProxy: ");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r1.<sun.util.logging.PlatformLogger: void finest(java.lang.String)>($r5);
        return;
    }

    static void <clinit>()
    {
        sun.net.www.protocol.http.NTLMAuthenticationProxy $r0, $r1;
        boolean $z0, $z1, $z2;

        $r0 = staticinvoke <sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.NTLMAuthenticationProxy tryLoadNTLMAuthentication()>();
        <sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.NTLMAuthenticationProxy proxy> = $r0;
        $r1 = <sun.net.www.protocol.http.NTLMAuthenticationProxy: sun.net.www.protocol.http.NTLMAuthenticationProxy proxy>;
        if $r1 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        <sun.net.www.protocol.http.NTLMAuthenticationProxy: boolean supported> = $z0;
        $z1 = <sun.net.www.protocol.http.NTLMAuthenticationProxy: boolean supported>;
        if $z1 == 0 goto label2;

        $z2 = staticinvoke <sun.net.www.protocol.http.NTLMAuthenticationProxy: boolean supportsTransparentAuth()>();
        goto label3;

     label2:
        $z2 = 0;

     label3:
        <sun.net.www.protocol.http.NTLMAuthenticationProxy: boolean supportsTransparentAuth> = $z2;
        return;
    }
}
