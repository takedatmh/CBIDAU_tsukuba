public class sun.misc.BASE64Decoder extends sun.misc.CharacterDecoder
{
    private static final char[] pem_array;
    private static final byte[] pem_convert_array;
    byte[] decode_buffer;

    public void <init>()
    {
        sun.misc.BASE64Decoder r0;
        byte[] $r1;

        r0 := @this: sun.misc.BASE64Decoder;
        specialinvoke r0.<sun.misc.CharacterDecoder: void <init>()>();
        $r1 = newarray (byte)[4];
        r0.<sun.misc.BASE64Decoder: byte[] decode_buffer> = $r1;
        return;
    }

    protected int bytesPerAtom()
    {
        sun.misc.BASE64Decoder r0;

        r0 := @this: sun.misc.BASE64Decoder;
        return 4;
    }

    protected int bytesPerLine()
    {
        sun.misc.BASE64Decoder r0;

        r0 := @this: sun.misc.BASE64Decoder;
        return 72;
    }

    protected void decodeAtom(java.io.PushbackInputStream, java.io.OutputStream, int) throws java.io.IOException
    {
        sun.misc.BASE64Decoder r0;
        java.io.PushbackInputStream r1;
        java.io.OutputStream r2;
        int i0, i5, $i7, i8, $i19, $i20, $i23, $i25, $i26, $i29, $i31, $i32, $i35, $i37, $i38, $i41, $i43, $i44, $i47, $i49, $i50, $i52;
        byte b1, b2, b3, b4, $b6, $b9, $b10, $b11, $b13, $b15, $b17, $b21, $b22, $b24, $b27, $b28, $b30, $b33, $b34, $b36, $b39, $b40, $b42, $b45, $b46, $b48, $b51, $b53;
        sun.misc.CEFormatException $r3;
        sun.misc.CEStreamExhausted $r4, $r7;
        byte[] $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        short $s12, $s14, $s16, $s18;

        r0 := @this: sun.misc.BASE64Decoder;
        r1 := @parameter0: java.io.PushbackInputStream;
        r2 := @parameter1: java.io.OutputStream;
        i0 := @parameter2: int;
        b1 = -1;
        b2 = -1;
        b3 = -1;
        b4 = -1;
        if i0 >= 2 goto label0;

        $r3 = new sun.misc.CEFormatException;
        specialinvoke $r3.<sun.misc.CEFormatException: void <init>(java.lang.String)>("BASE64Decoder: Not enough bytes for an atom.");
        throw $r3;

     label0:
        i5 = virtualinvoke r1.<java.io.PushbackInputStream: int read()>();
        if i5 != -1 goto label1;

        $r4 = new sun.misc.CEStreamExhausted;
        specialinvoke $r4.<sun.misc.CEStreamExhausted: void <init>()>();
        throw $r4;

     label1:
        if i5 == 10 goto label0;

        if i5 == 13 goto label0;

        $r5 = r0.<sun.misc.BASE64Decoder: byte[] decode_buffer>;
        $b6 = (byte) i5;
        $r5[0] = $b6;
        $r6 = r0.<sun.misc.BASE64Decoder: byte[] decode_buffer>;
        $i7 = i0 - 1;
        i8 = virtualinvoke r0.<sun.misc.BASE64Decoder: int readFully(java.io.InputStream,byte[],int,int)>(r1, $r6, 1, $i7);
        if i8 != -1 goto label2;

        $r7 = new sun.misc.CEStreamExhausted;
        specialinvoke $r7.<sun.misc.CEStreamExhausted: void <init>()>();
        throw $r7;

     label2:
        if i0 <= 3 goto label3;

        $r8 = r0.<sun.misc.BASE64Decoder: byte[] decode_buffer>;
        $b9 = $r8[3];
        if $b9 != 61 goto label3;

        i0 = 3;

     label3:
        if i0 <= 2 goto label4;

        $r9 = r0.<sun.misc.BASE64Decoder: byte[] decode_buffer>;
        $b10 = $r9[2];
        if $b10 != 61 goto label4;

        i0 = 2;

     label4:
        tableswitch(i0)
        {
            case 2: goto label7;
            case 3: goto label6;
            case 4: goto label5;
            default: goto label8;
        };

     label5:
        $r10 = <sun.misc.BASE64Decoder: byte[] pem_convert_array>;
        $r11 = r0.<sun.misc.BASE64Decoder: byte[] decode_buffer>;
        $b11 = $r11[3];
        $s12 = $b11 & 255;
        b4 = $r10[$s12];

     label6:
        $r12 = <sun.misc.BASE64Decoder: byte[] pem_convert_array>;
        $r13 = r0.<sun.misc.BASE64Decoder: byte[] decode_buffer>;
        $b13 = $r13[2];
        $s14 = $b13 & 255;
        b3 = $r12[$s14];

     label7:
        $r14 = <sun.misc.BASE64Decoder: byte[] pem_convert_array>;
        $r15 = r0.<sun.misc.BASE64Decoder: byte[] decode_buffer>;
        $b15 = $r15[1];
        $s16 = $b15 & 255;
        b2 = $r14[$s16];
        $r16 = <sun.misc.BASE64Decoder: byte[] pem_convert_array>;
        $r17 = r0.<sun.misc.BASE64Decoder: byte[] decode_buffer>;
        $b17 = $r17[0];
        $s18 = $b17 & 255;
        b1 = $r16[$s18];

     label8:
        tableswitch(i0)
        {
            case 2: goto label9;
            case 3: goto label10;
            case 4: goto label11;
            default: goto label12;
        };

     label9:
        $i19 = b1 << 2;
        $i20 = $i19 & 252;
        $b21 = b2 >>> 4;
        $b22 = $b21 & 3;
        $i23 = $i20 | $b22;
        $b24 = (byte) $i23;
        virtualinvoke r2.<java.io.OutputStream: void write(int)>($b24);
        goto label12;

     label10:
        $i25 = b1 << 2;
        $i26 = $i25 & 252;
        $b27 = b2 >>> 4;
        $b28 = $b27 & 3;
        $i29 = $i26 | $b28;
        $b30 = (byte) $i29;
        virtualinvoke r2.<java.io.OutputStream: void write(int)>($b30);
        $i31 = b2 << 4;
        $i32 = $i31 & 240;
        $b33 = b3 >>> 2;
        $b34 = $b33 & 15;
        $i35 = $i32 | $b34;
        $b36 = (byte) $i35;
        virtualinvoke r2.<java.io.OutputStream: void write(int)>($b36);
        goto label12;

     label11:
        $i37 = b1 << 2;
        $i38 = $i37 & 252;
        $b39 = b2 >>> 4;
        $b40 = $b39 & 3;
        $i41 = $i38 | $b40;
        $b42 = (byte) $i41;
        virtualinvoke r2.<java.io.OutputStream: void write(int)>($b42);
        $i43 = b2 << 4;
        $i44 = $i43 & 240;
        $b45 = b3 >>> 2;
        $b46 = $b45 & 15;
        $i47 = $i44 | $b46;
        $b48 = (byte) $i47;
        virtualinvoke r2.<java.io.OutputStream: void write(int)>($b48);
        $i49 = b3 << 6;
        $i50 = $i49 & 192;
        $b51 = b4 & 63;
        $i52 = $i50 | $b51;
        $b53 = (byte) $i52;
        virtualinvoke r2.<java.io.OutputStream: void write(int)>($b53);

     label12:
        return;
    }

    static void <clinit>()
    {
        int i0, i1, $i2;
        char[] $r0, $r3, $r5;
        byte[] $r1, $r2, $r4;
        char $c3;
        byte $b4;

        $r0 = newarray (char)[64];
        $r0[0] = 65;
        $r0[1] = 66;
        $r0[2] = 67;
        $r0[3] = 68;
        $r0[4] = 69;
        $r0[5] = 70;
        $r0[6] = 71;
        $r0[7] = 72;
        $r0[8] = 73;
        $r0[9] = 74;
        $r0[10] = 75;
        $r0[11] = 76;
        $r0[12] = 77;
        $r0[13] = 78;
        $r0[14] = 79;
        $r0[15] = 80;
        $r0[16] = 81;
        $r0[17] = 82;
        $r0[18] = 83;
        $r0[19] = 84;
        $r0[20] = 85;
        $r0[21] = 86;
        $r0[22] = 87;
        $r0[23] = 88;
        $r0[24] = 89;
        $r0[25] = 90;
        $r0[26] = 97;
        $r0[27] = 98;
        $r0[28] = 99;
        $r0[29] = 100;
        $r0[30] = 101;
        $r0[31] = 102;
        $r0[32] = 103;
        $r0[33] = 104;
        $r0[34] = 105;
        $r0[35] = 106;
        $r0[36] = 107;
        $r0[37] = 108;
        $r0[38] = 109;
        $r0[39] = 110;
        $r0[40] = 111;
        $r0[41] = 112;
        $r0[42] = 113;
        $r0[43] = 114;
        $r0[44] = 115;
        $r0[45] = 116;
        $r0[46] = 117;
        $r0[47] = 118;
        $r0[48] = 119;
        $r0[49] = 120;
        $r0[50] = 121;
        $r0[51] = 122;
        $r0[52] = 48;
        $r0[53] = 49;
        $r0[54] = 50;
        $r0[55] = 51;
        $r0[56] = 52;
        $r0[57] = 53;
        $r0[58] = 54;
        $r0[59] = 55;
        $r0[60] = 56;
        $r0[61] = 57;
        $r0[62] = 43;
        $r0[63] = 47;
        <sun.misc.BASE64Decoder: char[] pem_array> = $r0;
        $r1 = newarray (byte)[256];
        <sun.misc.BASE64Decoder: byte[] pem_convert_array> = $r1;
        i0 = 0;

     label0:
        if i0 >= 255 goto label1;

        $r2 = <sun.misc.BASE64Decoder: byte[] pem_convert_array>;
        $r2[i0] = -1;
        i0 = i0 + 1;
        goto label0;

     label1:
        i1 = 0;

     label2:
        $r3 = <sun.misc.BASE64Decoder: char[] pem_array>;
        $i2 = lengthof $r3;
        if i1 >= $i2 goto label3;

        $r4 = <sun.misc.BASE64Decoder: byte[] pem_convert_array>;
        $r5 = <sun.misc.BASE64Decoder: char[] pem_array>;
        $c3 = $r5[i1];
        $b4 = (byte) i1;
        $r4[$c3] = $b4;
        i1 = i1 + 1;
        goto label2;

     label3:
        return;
    }
}
