public class javax.naming.Reference extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
{
    protected java.lang.String className;
    protected java.util.Vector addrs;
    protected java.lang.String classFactory;
    protected java.lang.String classFactoryLocation;
    private static final long serialVersionUID;

    public void <init>(java.lang.String)
    {
        javax.naming.Reference r0;
        java.lang.String r1;
        java.util.Vector $r2;

        r0 := @this: javax.naming.Reference;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<javax.naming.Reference: java.util.Vector addrs> = null;
        r0.<javax.naming.Reference: java.lang.String classFactory> = null;
        r0.<javax.naming.Reference: java.lang.String classFactoryLocation> = null;
        r0.<javax.naming.Reference: java.lang.String className> = r1;
        $r2 = new java.util.Vector;
        specialinvoke $r2.<java.util.Vector: void <init>()>();
        r0.<javax.naming.Reference: java.util.Vector addrs> = $r2;
        return;
    }

    public void <init>(java.lang.String, javax.naming.RefAddr)
    {
        javax.naming.Reference r0;
        java.lang.String r1;
        javax.naming.RefAddr r2;
        java.util.Vector $r3, $r4;

        r0 := @this: javax.naming.Reference;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: javax.naming.RefAddr;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<javax.naming.Reference: java.util.Vector addrs> = null;
        r0.<javax.naming.Reference: java.lang.String classFactory> = null;
        r0.<javax.naming.Reference: java.lang.String classFactoryLocation> = null;
        r0.<javax.naming.Reference: java.lang.String className> = r1;
        $r3 = new java.util.Vector;
        specialinvoke $r3.<java.util.Vector: void <init>()>();
        r0.<javax.naming.Reference: java.util.Vector addrs> = $r3;
        $r4 = r0.<javax.naming.Reference: java.util.Vector addrs>;
        virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>(r2);
        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        javax.naming.Reference r0;
        java.lang.String r1, r2, r3;

        r0 := @this: javax.naming.Reference;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        specialinvoke r0.<javax.naming.Reference: void <init>(java.lang.String)>(r1);
        r0.<javax.naming.Reference: java.lang.String classFactory> = r2;
        r0.<javax.naming.Reference: java.lang.String classFactoryLocation> = r3;
        return;
    }

    public void <init>(java.lang.String, javax.naming.RefAddr, java.lang.String, java.lang.String)
    {
        javax.naming.Reference r0;
        java.lang.String r1, r3, r4;
        javax.naming.RefAddr r2;

        r0 := @this: javax.naming.Reference;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: javax.naming.RefAddr;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: java.lang.String;
        specialinvoke r0.<javax.naming.Reference: void <init>(java.lang.String,javax.naming.RefAddr)>(r1, r2);
        r0.<javax.naming.Reference: java.lang.String classFactory> = r3;
        r0.<javax.naming.Reference: java.lang.String classFactoryLocation> = r4;
        return;
    }

    public java.lang.String getClassName()
    {
        javax.naming.Reference r0;
        java.lang.String $r1;

        r0 := @this: javax.naming.Reference;
        $r1 = r0.<javax.naming.Reference: java.lang.String className>;
        return $r1;
    }

    public java.lang.String getFactoryClassName()
    {
        javax.naming.Reference r0;
        java.lang.String $r1;

        r0 := @this: javax.naming.Reference;
        $r1 = r0.<javax.naming.Reference: java.lang.String classFactory>;
        return $r1;
    }

    public java.lang.String getFactoryClassLocation()
    {
        javax.naming.Reference r0;
        java.lang.String $r1;

        r0 := @this: javax.naming.Reference;
        $r1 = r0.<javax.naming.Reference: java.lang.String classFactoryLocation>;
        return $r1;
    }

    public javax.naming.RefAddr get(java.lang.String)
    {
        javax.naming.Reference r0;
        java.lang.String r1, $r6;
        int i0, i1, $i2;
        javax.naming.RefAddr r2;
        java.util.Vector $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: javax.naming.Reference;
        r1 := @parameter0: java.lang.String;
        $r3 = r0.<javax.naming.Reference: java.util.Vector addrs>;
        i0 = virtualinvoke $r3.<java.util.Vector: int size()>();
        i1 = 0;

     label0:
        if i1 >= i0 goto label2;

        $r4 = r0.<javax.naming.Reference: java.util.Vector addrs>;
        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i1);
        r2 = (javax.naming.RefAddr) $r5;
        $r6 = virtualinvoke r2.<javax.naming.RefAddr: java.lang.String getType()>();
        $i2 = virtualinvoke $r6.<java.lang.String: int compareTo(java.lang.String)>(r1);
        if $i2 != 0 goto label1;

        return r2;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        return null;
    }

    public javax.naming.RefAddr get(int)
    {
        javax.naming.Reference r0;
        int i0;
        java.util.Vector $r1;
        java.lang.Object $r2;
        javax.naming.RefAddr $r3;

        r0 := @this: javax.naming.Reference;
        i0 := @parameter0: int;
        $r1 = r0.<javax.naming.Reference: java.util.Vector addrs>;
        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i0);
        $r3 = (javax.naming.RefAddr) $r2;
        return $r3;
    }

    public java.util.Enumeration getAll()
    {
        javax.naming.Reference r0;
        java.util.Vector $r1;
        java.util.Enumeration $r2;

        r0 := @this: javax.naming.Reference;
        $r1 = r0.<javax.naming.Reference: java.util.Vector addrs>;
        $r2 = virtualinvoke $r1.<java.util.Vector: java.util.Enumeration elements()>();
        return $r2;
    }

    public int size()
    {
        javax.naming.Reference r0;
        java.util.Vector $r1;
        int $i0;

        r0 := @this: javax.naming.Reference;
        $r1 = r0.<javax.naming.Reference: java.util.Vector addrs>;
        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();
        return $i0;
    }

    public void add(javax.naming.RefAddr)
    {
        javax.naming.Reference r0;
        javax.naming.RefAddr r1;
        java.util.Vector $r2;

        r0 := @this: javax.naming.Reference;
        r1 := @parameter0: javax.naming.RefAddr;
        $r2 = r0.<javax.naming.Reference: java.util.Vector addrs>;
        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>(r1);
        return;
    }

    public void add(int, javax.naming.RefAddr)
    {
        javax.naming.Reference r0;
        int i0;
        javax.naming.RefAddr r1;
        java.util.Vector $r2;

        r0 := @this: javax.naming.Reference;
        i0 := @parameter0: int;
        r1 := @parameter1: javax.naming.RefAddr;
        $r2 = r0.<javax.naming.Reference: java.util.Vector addrs>;
        virtualinvoke $r2.<java.util.Vector: void insertElementAt(java.lang.Object,int)>(r1, i0);
        return;
    }

    public java.lang.Object remove(int)
    {
        javax.naming.Reference r0;
        int i0;
        java.lang.Object r1;
        java.util.Vector $r2, $r3;

        r0 := @this: javax.naming.Reference;
        i0 := @parameter0: int;
        $r2 = r0.<javax.naming.Reference: java.util.Vector addrs>;
        r1 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>(i0);
        $r3 = r0.<javax.naming.Reference: java.util.Vector addrs>;
        virtualinvoke $r3.<java.util.Vector: void removeElementAt(int)>(i0);
        return r1;
    }

    public void clear()
    {
        javax.naming.Reference r0;
        java.util.Vector $r1;

        r0 := @this: javax.naming.Reference;
        $r1 = r0.<javax.naming.Reference: java.util.Vector addrs>;
        virtualinvoke $r1.<java.util.Vector: void setSize(int)>(0);
        return;
    }

    public boolean equals(java.lang.Object)
    {
        javax.naming.Reference r0, r2;
        java.lang.Object r1, $r7, $r8;
        java.util.Enumeration r3, r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r5, $r6;
        int $i0, $i1;

        r0 := @this: javax.naming.Reference;
        r1 := @parameter0: java.lang.Object;
        if r1 == null goto label2;

        $z0 = r1 instanceof javax.naming.Reference;
        if $z0 == 0 goto label2;

        r2 = (javax.naming.Reference) r1;
        $r5 = r2.<javax.naming.Reference: java.lang.String className>;
        $r6 = r0.<javax.naming.Reference: java.lang.String className>;
        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);
        if $z1 == 0 goto label2;

        $i0 = virtualinvoke r2.<javax.naming.Reference: int size()>();
        $i1 = virtualinvoke r0.<javax.naming.Reference: int size()>();
        if $i0 != $i1 goto label2;

        r3 = virtualinvoke r0.<javax.naming.Reference: java.util.Enumeration getAll()>();
        r4 = virtualinvoke r2.<javax.naming.Reference: java.util.Enumeration getAll()>();

     label0:
        $z2 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z2 == 0 goto label1;

        $r7 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>();
        $r8 = interfaceinvoke r4.<java.util.Enumeration: java.lang.Object nextElement()>();
        $z3 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);
        if $z3 != 0 goto label0;

        return 0;

     label1:
        return 1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        javax.naming.Reference r0;
        int i0, $i1;
        java.util.Enumeration r1;
        java.lang.String $r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: javax.naming.Reference;
        $r2 = r0.<javax.naming.Reference: java.lang.String className>;
        i0 = virtualinvoke $r2.<java.lang.String: int hashCode()>();
        r1 = virtualinvoke r0.<javax.naming.Reference: java.util.Enumeration getAll()>();

     label0:
        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();
        $i1 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();
        i0 = i0 + $i1;
        goto label0;

     label1:
        return i0;
    }

    public java.lang.String toString()
    {
        javax.naming.Reference r0;
        java.lang.StringBuffer $r1, r3;
        java.lang.StringBuilder $r2, $r4, $r6, $r7;
        int i0, i1;
        java.lang.String $r5, $r8, $r11, $r13;
        java.util.Vector $r9;
        javax.naming.RefAddr $r10;

        r0 := @this: javax.naming.Reference;
        $r1 = new java.lang.StringBuffer;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reference Class Name: ");
        $r5 = r0.<javax.naming.Reference: java.lang.String className>;
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>($r8);
        r3 = $r1;
        $r9 = r0.<javax.naming.Reference: java.util.Vector addrs>;
        i0 = virtualinvoke $r9.<java.util.Vector: int size()>();
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        $r10 = virtualinvoke r0.<javax.naming.Reference: javax.naming.RefAddr get(int)>(i1);
        $r11 = virtualinvoke $r10.<javax.naming.RefAddr: java.lang.String toString()>();
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);
        i1 = i1 + 1;
        goto label0;

     label1:
        $r13 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r13;
    }

    public java.lang.Object clone()
    {
        javax.naming.Reference r0, $r1, r2;
        java.util.Enumeration r3;
        java.lang.String $r4, $r5, $r6;
        java.util.Vector $r7, $r8;
        boolean $z0;
        java.lang.Object $r9;

        r0 := @this: javax.naming.Reference;
        $r1 = new javax.naming.Reference;
        $r4 = r0.<javax.naming.Reference: java.lang.String className>;
        $r5 = r0.<javax.naming.Reference: java.lang.String classFactory>;
        $r6 = r0.<javax.naming.Reference: java.lang.String classFactoryLocation>;
        specialinvoke $r1.<javax.naming.Reference: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, $r6);
        r2 = $r1;
        r3 = virtualinvoke r0.<javax.naming.Reference: java.util.Enumeration getAll()>();
        $r7 = new java.util.Vector;
        specialinvoke $r7.<java.util.Vector: void <init>()>();
        r2.<javax.naming.Reference: java.util.Vector addrs> = $r7;

     label0:
        $z0 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label1;

        $r8 = r2.<javax.naming.Reference: java.util.Vector addrs>;
        $r9 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>();
        virtualinvoke $r8.<java.util.Vector: void addElement(java.lang.Object)>($r9);
        goto label0;

     label1:
        return r2;
    }
}
