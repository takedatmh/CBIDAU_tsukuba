final class java.text.RBTableBuilder extends java.lang.Object
{
    static final int CHARINDEX;
    private static final int IGNORABLEMASK;
    private static final int PRIMARYORDERINCREMENT;
    private static final int SECONDARYORDERINCREMENT;
    private static final int TERTIARYORDERINCREMENT;
    private static final int INITIALTABLESIZE;
    private static final int MAXKEYSIZE;
    private java.text.RBCollationTables$BuildAPI tables;
    private java.text.MergeCollation mPattern;
    private boolean isOverIgnore;
    private char[] keyBuf;
    private sun.text.IntHashtable contractFlags;
    private boolean frenchSec;
    private boolean seAsianSwapping;
    private sun.text.UCompactIntArray mapping;
    private java.util.Vector contractTable;
    private java.util.Vector expandTable;
    private short maxSecOrder;
    private short maxTerOrder;

    public void <init>(java.text.RBCollationTables$BuildAPI)
    {
        java.text.RBTableBuilder r0;
        java.text.RBCollationTables$BuildAPI r1;
        char[] $r2;
        sun.text.IntHashtable $r3;

        r0 := @this: java.text.RBTableBuilder;
        r1 := @parameter0: java.text.RBCollationTables$BuildAPI;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.text.RBTableBuilder: java.text.RBCollationTables$BuildAPI tables> = null;
        r0.<java.text.RBTableBuilder: java.text.MergeCollation mPattern> = null;
        r0.<java.text.RBTableBuilder: boolean isOverIgnore> = 0;
        $r2 = newarray (char)[5];
        r0.<java.text.RBTableBuilder: char[] keyBuf> = $r2;
        $r3 = new sun.text.IntHashtable;
        specialinvoke $r3.<sun.text.IntHashtable: void <init>(int)>(100);
        r0.<java.text.RBTableBuilder: sun.text.IntHashtable contractFlags> = $r3;
        r0.<java.text.RBTableBuilder: boolean frenchSec> = 0;
        r0.<java.text.RBTableBuilder: boolean seAsianSwapping> = 0;
        r0.<java.text.RBTableBuilder: sun.text.UCompactIntArray mapping> = null;
        r0.<java.text.RBTableBuilder: java.util.Vector contractTable> = null;
        r0.<java.text.RBTableBuilder: java.util.Vector expandTable> = null;
        r0.<java.text.RBTableBuilder: short maxSecOrder> = 0;
        r0.<java.text.RBTableBuilder: short maxTerOrder> = 0;
        r0.<java.text.RBTableBuilder: java.text.RBCollationTables$BuildAPI tables> = r1;
        return;
    }

    public void build(java.lang.String, int) throws java.text.ParseException
    {
        java.text.RBTableBuilder r0;
        java.lang.String r1, r3, r4, r7;
        int i0, i1, $i3, i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19;
        boolean z0, z1, $z2, $z3, $z4;
        java.text.PatternEntry r2;
        char c2, $c9, $c18, c20;
        java.text.ParseException $r5;
        sun.text.UCompactIntArray $r6, $r11, $r13;
        java.text.MergeCollation $r8, $r9, $r10;
        java.text.RBCollationTables$BuildAPI $r12;
        java.util.Vector $r14, $r15;
        sun.text.IntHashtable $r16;
        short $s21, $s22;

        r0 := @this: java.text.RBTableBuilder;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        z0 = 1;
        z1 = 0;
        $i3 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i3 != 0 goto label0;

        $r5 = new java.text.ParseException;
        specialinvoke $r5.<java.text.ParseException: void <init>(java.lang.String,int)>("Build rules empty.", 0);
        throw $r5;

     label0:
        $r6 = new sun.text.UCompactIntArray;
        specialinvoke $r6.<sun.text.UCompactIntArray: void <init>(int)>(-1);
        r0.<java.text.RBTableBuilder: sun.text.UCompactIntArray mapping> = $r6;
        r7 = staticinvoke <sun.text.normalizer.NormalizerImpl: java.lang.String canonicalDecomposeWithSingleQuotation(java.lang.String)>(r1);
        $r8 = new java.text.MergeCollation;
        specialinvoke $r8.<java.text.MergeCollation: void <init>(java.lang.String)>(r7);
        r0.<java.text.RBTableBuilder: java.text.MergeCollation mPattern> = $r8;
        i1 = 0;
        i4 = 0;

     label1:
        $r9 = r0.<java.text.RBTableBuilder: java.text.MergeCollation mPattern>;
        $i5 = virtualinvoke $r9.<java.text.MergeCollation: int getCount()>();
        if i4 >= $i5 goto label10;

        $r10 = r0.<java.text.RBTableBuilder: java.text.MergeCollation mPattern>;
        r2 = virtualinvoke $r10.<java.text.MergeCollation: java.text.PatternEntry getItemAt(int)>(i4);
        if r2 == null goto label9;

        r3 = virtualinvoke r2.<java.text.PatternEntry: java.lang.String getChars()>();
        $i6 = virtualinvoke r3.<java.lang.String: int length()>();
        if $i6 <= 1 goto label4;

        $i7 = virtualinvoke r3.<java.lang.String: int length()>();
        $i8 = $i7 - 1;
        $c9 = virtualinvoke r3.<java.lang.String: char charAt(int)>($i8);
        lookupswitch($c9)
        {
            case 33: goto label3;
            case 64: goto label2;
            default: goto label4;
        };

     label2:
        r0.<java.text.RBTableBuilder: boolean frenchSec> = 1;
        $i10 = virtualinvoke r3.<java.lang.String: int length()>();
        $i11 = $i10 - 1;
        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i11);
        goto label4;

     label3:
        r0.<java.text.RBTableBuilder: boolean seAsianSwapping> = 1;
        $i12 = virtualinvoke r3.<java.lang.String: int length()>();
        $i13 = $i12 - 1;
        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i13);

     label4:
        $i14 = virtualinvoke r2.<java.text.PatternEntry: int getStrength()>();
        i1 = specialinvoke r0.<java.text.RBTableBuilder: int increment(int,int)>($i14, i1);
        r4 = virtualinvoke r2.<java.text.PatternEntry: java.lang.String getExtension()>();
        $i15 = virtualinvoke r4.<java.lang.String: int length()>();
        if $i15 == 0 goto label5;

        specialinvoke r0.<java.text.RBTableBuilder: void addExpandOrder(java.lang.String,java.lang.String,int)>(r3, r4, i1);
        goto label9;

     label5:
        $i16 = virtualinvoke r3.<java.lang.String: int length()>();
        if $i16 <= 1 goto label8;

        c2 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0);
        $z2 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c2);
        if $z2 == 0 goto label6;

        $i17 = virtualinvoke r3.<java.lang.String: int length()>();
        if $i17 != 2 goto label6;

        $c18 = virtualinvoke r3.<java.lang.String: char charAt(int)>(1);
        $i19 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(c2, $c18);
        specialinvoke r0.<java.text.RBTableBuilder: void addOrder(int,int)>($i19, i1);
        goto label7;

     label6:
        specialinvoke r0.<java.text.RBTableBuilder: void addContractOrder(java.lang.String,int)>(r3, i1);

     label7:
        goto label9;

     label8:
        c20 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0);
        specialinvoke r0.<java.text.RBTableBuilder: void addOrder(int,int)>(c20, i1);

     label9:
        i4 = i4 + 1;
        goto label1;

     label10:
        specialinvoke r0.<java.text.RBTableBuilder: void addComposedChars()>();
        specialinvoke r0.<java.text.RBTableBuilder: void commit()>();
        $r11 = r0.<java.text.RBTableBuilder: sun.text.UCompactIntArray mapping>;
        virtualinvoke $r11.<sun.text.UCompactIntArray: void compact()>();
        $r12 = r0.<java.text.RBTableBuilder: java.text.RBCollationTables$BuildAPI tables>;
        $z3 = r0.<java.text.RBTableBuilder: boolean frenchSec>;
        $z4 = r0.<java.text.RBTableBuilder: boolean seAsianSwapping>;
        $r13 = r0.<java.text.RBTableBuilder: sun.text.UCompactIntArray mapping>;
        $r14 = r0.<java.text.RBTableBuilder: java.util.Vector contractTable>;
        $r15 = r0.<java.text.RBTableBuilder: java.util.Vector expandTable>;
        $r16 = r0.<java.text.RBTableBuilder: sun.text.IntHashtable contractFlags>;
        $s21 = r0.<java.text.RBTableBuilder: short maxSecOrder>;
        $s22 = r0.<java.text.RBTableBuilder: short maxTerOrder>;
        virtualinvoke $r12.<java.text.RBCollationTables$BuildAPI: void fillInTables(boolean,boolean,sun.text.UCompactIntArray,java.util.Vector,java.util.Vector,sun.text.IntHashtable,short,short)>($z3, $z4, $r13, $r14, $r15, $r16, $s21, $s22);
        return;
    }

    private void addComposedChars() throws java.text.ParseException
    {
        java.text.RBTableBuilder r0;
        sun.text.ComposedCharIter $r1, r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i8, $i10, i11, $i12, $i14;
        java.lang.String r3;
        char $c7, c9, $c13;
        boolean $z0, z1;

        r0 := @this: java.text.RBTableBuilder;
        $r1 = new sun.text.ComposedCharIter;
        specialinvoke $r1.<sun.text.ComposedCharIter: void <init>()>();
        r2 = $r1;

     label0:
        $i4 = virtualinvoke r2.<sun.text.ComposedCharIter: int next()>();
        i0 = $i4;
        if $i4 == -1 goto label8;

        $i5 = specialinvoke r0.<java.text.RBTableBuilder: int getCharOrder(int)>(i0);
        if $i5 != -1 goto label0;

        r3 = virtualinvoke r2.<sun.text.ComposedCharIter: java.lang.String decomposition()>();
        $i6 = virtualinvoke r3.<java.lang.String: int length()>();
        if $i6 != 1 goto label1;

        $c7 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0);
        i1 = specialinvoke r0.<java.text.RBTableBuilder: int getCharOrder(int)>($c7);
        if i1 == -1 goto label0;

        specialinvoke r0.<java.text.RBTableBuilder: void addOrder(int,int)>(i0, i1);
        goto label0;

     label1:
        $i8 = virtualinvoke r3.<java.lang.String: int length()>();
        if $i8 != 2 goto label2;

        c9 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0);
        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c9);
        if $z0 == 0 goto label2;

        $i10 = virtualinvoke r3.<java.lang.String: int codePointAt(int)>(0);
        i2 = specialinvoke r0.<java.text.RBTableBuilder: int getCharOrder(int)>($i10);
        if i2 == -1 goto label0;

        specialinvoke r0.<java.text.RBTableBuilder: void addOrder(int,int)>(i0, i2);
        goto label0;

     label2:
        i11 = specialinvoke r0.<java.text.RBTableBuilder: int getContractOrder(java.lang.String)>(r3);
        if i11 == -1 goto label3;

        specialinvoke r0.<java.text.RBTableBuilder: void addOrder(int,int)>(i0, i11);
        goto label7;

     label3:
        z1 = 1;
        i3 = 0;

     label4:
        $i12 = virtualinvoke r3.<java.lang.String: int length()>();
        if i3 >= $i12 goto label6;

        $c13 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i3);
        $i14 = specialinvoke r0.<java.text.RBTableBuilder: int getCharOrder(int)>($c13);
        if $i14 != -1 goto label5;

        z1 = 0;
        goto label6;

     label5:
        i3 = i3 + 1;
        goto label4;

     label6:
        if z1 == 0 goto label7;

        specialinvoke r0.<java.text.RBTableBuilder: void addExpandOrder(int,java.lang.String,int)>(i0, r3, -1);

     label7:
        goto label0;

     label8:
        return;
    }

    private final void commit()
    {
        java.text.RBTableBuilder r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        int[] r1, $r6;
        java.util.Vector $r2, $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: java.text.RBTableBuilder;
        $r2 = r0.<java.text.RBTableBuilder: java.util.Vector expandTable>;
        if $r2 == null goto label5;

        i0 = 0;

     label0:
        $r3 = r0.<java.text.RBTableBuilder: java.util.Vector expandTable>;
        $i5 = virtualinvoke $r3.<java.util.Vector: int size()>();
        if i0 >= $i5 goto label5;

        $r4 = r0.<java.text.RBTableBuilder: java.util.Vector expandTable>;
        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i0);
        $r6 = (int[]) $r5;
        r1 = (int[]) $r6;
        i1 = 0;

     label1:
        $i6 = lengthof r1;
        if i1 >= $i6 goto label4;

        i2 = r1[i1];
        if i2 >= 2113929216 goto label3;

        if i2 <= 1879048192 goto label3;

        i3 = i2 - 1879048192;
        i4 = specialinvoke r0.<java.text.RBTableBuilder: int getCharOrder(int)>(i3);
        if i4 != -1 goto label2;

        $i7 = 65535 & i3;
        r1[i1] = $i7;
        goto label3;

     label2:
        r1[i1] = i4;

     label3:
        i1 = i1 + 1;
        goto label1;

     label4:
        i0 = i0 + 1;
        goto label0;

     label5:
        return;
    }

    private final int increment(int, int)
    {
        java.text.RBTableBuilder r0;
        int i0, i1, i2, i3, $i5, $i8;
        boolean $z0, $z1;
        short $s4, $s6, $s7, $s9;

        r0 := @this: java.text.RBTableBuilder;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        tableswitch(i0)
        {
            case 0: goto label0;
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label0:
        i2 = i1 + 65536;
        i1 = i2 & -65536;
        r0.<java.text.RBTableBuilder: boolean isOverIgnore> = 1;
        goto label3;

     label1:
        i3 = i1 + 256;
        i1 = i3 & -256;
        $z0 = r0.<java.text.RBTableBuilder: boolean isOverIgnore>;
        if $z0 != 0 goto label3;

        $s4 = r0.<java.text.RBTableBuilder: short maxSecOrder>;
        $i5 = $s4 + 1;
        $s6 = (short) $i5;
        r0.<java.text.RBTableBuilder: short maxSecOrder> = $s6;
        goto label3;

     label2:
        i1 = i1 + 1;
        $z1 = r0.<java.text.RBTableBuilder: boolean isOverIgnore>;
        if $z1 != 0 goto label3;

        $s7 = r0.<java.text.RBTableBuilder: short maxTerOrder>;
        $i8 = $s7 + 1;
        $s9 = (short) $i8;
        r0.<java.text.RBTableBuilder: short maxTerOrder> = $s9;

     label3:
        return i1;
    }

    private final void addOrder(int, int)
    {
        java.text.RBTableBuilder r0;
        int i0, i1, i2, i3;
        sun.text.UCompactIntArray $r1, $r6;
        boolean $z0;
        char[] $r2, $r3, $r5;
        char $c4;
        java.lang.String $r4;

        r0 := @this: java.text.RBTableBuilder;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = r0.<java.text.RBTableBuilder: sun.text.UCompactIntArray mapping>;
        i2 = virtualinvoke $r1.<sun.text.UCompactIntArray: int elementAt(int)>(i0);
        if i2 < 2130706432 goto label2;

        i3 = 1;
        $z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i0);
        if $z0 == 0 goto label0;

        $r2 = r0.<java.text.RBTableBuilder: char[] keyBuf>;
        i3 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(i0, $r2, 0);
        goto label1;

     label0:
        $r3 = r0.<java.text.RBTableBuilder: char[] keyBuf>;
        $c4 = (char) i0;
        $r3[0] = $c4;

     label1:
        $r4 = new java.lang.String;
        $r5 = r0.<java.text.RBTableBuilder: char[] keyBuf>;
        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>($r5, 0, i3);
        specialinvoke r0.<java.text.RBTableBuilder: void addContractOrder(java.lang.String,int)>($r4, i1);
        goto label3;

     label2:
        $r6 = r0.<java.text.RBTableBuilder: sun.text.UCompactIntArray mapping>;
        virtualinvoke $r6.<sun.text.UCompactIntArray: void setElementAt(int,int)>(i0, i1);

     label3:
        return;
    }

    private final void addContractOrder(java.lang.String, int)
    {
        java.text.RBTableBuilder r0;
        java.lang.String r1;
        int i0;

        r0 := @this: java.text.RBTableBuilder;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        specialinvoke r0.<java.text.RBTableBuilder: void addContractOrder(java.lang.String,int,boolean)>(r1, i0, 1);
        return;
    }

    private final void addContractOrder(java.lang.String, int, boolean)
    {
        java.text.RBTableBuilder r0;
        java.lang.String r1, $r11, $r16, $r21;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12;
        boolean z0;
        java.util.Vector $r2, r3, $r5, $r7, $r8, $r9;
        java.text.EntryPair r4, $r10, r15, $r17, $r18;
        sun.text.UCompactIntArray $r6, $r12;
        java.lang.Object $r13, $r14;
        java.lang.StringBuffer $r19, $r20;

        r0 := @this: java.text.RBTableBuilder;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        z0 := @parameter2: boolean;
        $r5 = r0.<java.text.RBTableBuilder: java.util.Vector contractTable>;
        if $r5 != null goto label0;

        $r2 = new java.util.Vector;
        specialinvoke $r2.<java.util.Vector: void <init>(int)>(20);
        r0.<java.text.RBTableBuilder: java.util.Vector contractTable> = $r2;

     label0:
        i1 = virtualinvoke r1.<java.lang.String: int codePointAt(int)>(0);
        $r6 = r0.<java.text.RBTableBuilder: sun.text.UCompactIntArray mapping>;
        i2 = virtualinvoke $r6.<sun.text.UCompactIntArray: int elementAt(int)>(i1);
        $i4 = i2 - 2130706432;
        r3 = specialinvoke r0.<java.text.RBTableBuilder: java.util.Vector getContractValuesImpl(int)>($i4);
        if r3 != null goto label1;

        $r7 = r0.<java.text.RBTableBuilder: java.util.Vector contractTable>;
        $i5 = virtualinvoke $r7.<java.util.Vector: int size()>();
        i3 = 2130706432 + $i5;
        $r8 = new java.util.Vector;
        specialinvoke $r8.<java.util.Vector: void <init>(int)>(20);
        r3 = $r8;
        $r9 = r0.<java.text.RBTableBuilder: java.util.Vector contractTable>;
        virtualinvoke $r9.<java.util.Vector: void addElement(java.lang.Object)>(r3);
        $r10 = new java.text.EntryPair;
        $i6 = staticinvoke <java.lang.Character: int charCount(int)>(i1);
        $r11 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);
        specialinvoke $r10.<java.text.EntryPair: void <init>(java.lang.String,int)>($r11, i2);
        virtualinvoke r3.<java.util.Vector: void addElement(java.lang.Object)>($r10);
        $r12 = r0.<java.text.RBTableBuilder: sun.text.UCompactIntArray mapping>;
        virtualinvoke $r12.<sun.text.UCompactIntArray: void setElementAt(int,int)>(i1, i3);

     label1:
        i7 = staticinvoke <java.text.RBCollationTables: int getEntry(java.util.Vector,java.lang.String,boolean)>(r3, r1, z0);
        if i7 == -1 goto label2;

        $r13 = virtualinvoke r3.<java.util.Vector: java.lang.Object elementAt(int)>(i7);
        r4 = (java.text.EntryPair) $r13;
        r4.<java.text.EntryPair: int value> = i0;
        goto label4;

     label2:
        $r14 = virtualinvoke r3.<java.util.Vector: java.lang.Object lastElement()>();
        r15 = (java.text.EntryPair) $r14;
        $i8 = virtualinvoke r1.<java.lang.String: int length()>();
        $r16 = r15.<java.text.EntryPair: java.lang.String entryName>;
        $i9 = virtualinvoke $r16.<java.lang.String: int length()>();
        if $i8 <= $i9 goto label3;

        $r17 = new java.text.EntryPair;
        specialinvoke $r17.<java.text.EntryPair: void <init>(java.lang.String,int,boolean)>(r1, i0, z0);
        virtualinvoke r3.<java.util.Vector: void addElement(java.lang.Object)>($r17);
        goto label4;

     label3:
        $r18 = new java.text.EntryPair;
        specialinvoke $r18.<java.text.EntryPair: void <init>(java.lang.String,int,boolean)>(r1, i0, z0);
        $i10 = virtualinvoke r3.<java.util.Vector: int size()>();
        $i11 = $i10 - 1;
        virtualinvoke r3.<java.util.Vector: void insertElementAt(java.lang.Object,int)>($r18, $i11);

     label4:
        if z0 == 0 goto label5;

        $i12 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i12 <= 1 goto label5;

        specialinvoke r0.<java.text.RBTableBuilder: void addContractFlags(java.lang.String)>(r1);
        $r19 = new java.lang.StringBuffer;
        specialinvoke $r19.<java.lang.StringBuffer: void <init>(java.lang.String)>(r1);
        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer reverse()>();
        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke r0.<java.text.RBTableBuilder: void addContractOrder(java.lang.String,int,boolean)>($r21, i0, 0);

     label5:
        return;
    }

    private int getContractOrder(java.lang.String)
    {
        java.text.RBTableBuilder r0;
        java.lang.String r1;
        int i0, i1, i2;
        java.util.Vector r2, $r4;
        java.text.EntryPair r3;
        java.lang.Object $r5;

        r0 := @this: java.text.RBTableBuilder;
        r1 := @parameter0: java.lang.String;
        i0 = -1;
        $r4 = r0.<java.text.RBTableBuilder: java.util.Vector contractTable>;
        if $r4 == null goto label0;

        i1 = virtualinvoke r1.<java.lang.String: int codePointAt(int)>(0);
        r2 = specialinvoke r0.<java.text.RBTableBuilder: java.util.Vector getContractValues(int)>(i1);
        if r2 == null goto label0;

        i2 = staticinvoke <java.text.RBCollationTables: int getEntry(java.util.Vector,java.lang.String,boolean)>(r2, r1, 1);
        if i2 == -1 goto label0;

        $r5 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>(i2);
        r3 = (java.text.EntryPair) $r5;
        i0 = r3.<java.text.EntryPair: int value>;

     label0:
        return i0;
    }

    private final int getCharOrder(int)
    {
        java.text.RBTableBuilder r0;
        int i0, i1, $i2;
        java.util.Vector r1;
        java.text.EntryPair r2;
        sun.text.UCompactIntArray $r3;
        java.lang.Object $r4;

        r0 := @this: java.text.RBTableBuilder;
        i0 := @parameter0: int;
        $r3 = r0.<java.text.RBTableBuilder: sun.text.UCompactIntArray mapping>;
        i1 = virtualinvoke $r3.<sun.text.UCompactIntArray: int elementAt(int)>(i0);
        if i1 < 2130706432 goto label0;

        $i2 = i1 - 2130706432;
        r1 = specialinvoke r0.<java.text.RBTableBuilder: java.util.Vector getContractValuesImpl(int)>($i2);
        $r4 = virtualinvoke r1.<java.util.Vector: java.lang.Object firstElement()>();
        r2 = (java.text.EntryPair) $r4;
        i1 = r2.<java.text.EntryPair: int value>;

     label0:
        return i1;
    }

    private java.util.Vector getContractValues(int)
    {
        java.text.RBTableBuilder r0;
        int i0, i1, $i2;
        sun.text.UCompactIntArray $r1;
        java.util.Vector $r2;

        r0 := @this: java.text.RBTableBuilder;
        i0 := @parameter0: int;
        $r1 = r0.<java.text.RBTableBuilder: sun.text.UCompactIntArray mapping>;
        i1 = virtualinvoke $r1.<sun.text.UCompactIntArray: int elementAt(int)>(i0);
        $i2 = i1 - 2130706432;
        $r2 = specialinvoke r0.<java.text.RBTableBuilder: java.util.Vector getContractValuesImpl(int)>($i2);
        return $r2;
    }

    private java.util.Vector getContractValuesImpl(int)
    {
        java.text.RBTableBuilder r0;
        int i0;
        java.util.Vector $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.text.RBTableBuilder;
        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        $r1 = r0.<java.text.RBTableBuilder: java.util.Vector contractTable>;
        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i0);
        $r3 = (java.util.Vector) $r2;
        return $r3;

     label0:
        return null;
    }

    private final void addExpandOrder(java.lang.String, java.lang.String, int) throws java.text.ParseException
    {
        java.text.RBTableBuilder r0;
        java.lang.String r1, r2;
        int i0, i1, $i4, $i5, $i6;
        char c2, c3, $c7;
        boolean $z0, $z1;

        r0 := @this: java.text.RBTableBuilder;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        i0 := @parameter2: int;
        i1 = specialinvoke r0.<java.text.RBTableBuilder: int addExpansion(int,java.lang.String)>(i0, r2);
        $i4 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i4 <= 1 goto label3;

        c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);
        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c2);
        if $z0 == 0 goto label1;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i5 != 2 goto label1;

        c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);
        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(c3);
        if $z1 == 0 goto label0;

        $i6 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(c2, c3);
        specialinvoke r0.<java.text.RBTableBuilder: void addOrder(int,int)>($i6, i1);

     label0:
        goto label2;

     label1:
        specialinvoke r0.<java.text.RBTableBuilder: void addContractOrder(java.lang.String,int)>(r1, i1);

     label2:
        goto label4;

     label3:
        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);
        specialinvoke r0.<java.text.RBTableBuilder: void addOrder(int,int)>($c7, i1);

     label4:
        return;
    }

    private final void addExpandOrder(int, java.lang.String, int) throws java.text.ParseException
    {
        java.text.RBTableBuilder r0;
        int i0, i1, i2;
        java.lang.String r1;

        r0 := @this: java.text.RBTableBuilder;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        i1 := @parameter2: int;
        i2 = specialinvoke r0.<java.text.RBTableBuilder: int addExpansion(int,java.lang.String)>(i1, r1);
        specialinvoke r0.<java.text.RBTableBuilder: void addOrder(int,int)>(i0, i2);
        return;
    }

    private int addExpansion(int, java.lang.String)
    {
        java.text.RBTableBuilder r0;
        int i0, i2, i3, i6, i7, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i19, i20;
        java.lang.String r1;
        java.util.Vector $r2, $r4, $r6, $r7;
        byte b1, $b8;
        int[] r3, r5;
        char c4, c5, $c13;
        boolean $z0, $z1;

        r0 := @this: java.text.RBTableBuilder;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        $r4 = r0.<java.text.RBTableBuilder: java.util.Vector expandTable>;
        if $r4 != null goto label0;

        $r2 = new java.util.Vector;
        specialinvoke $r2.<java.util.Vector: void <init>(int)>(20);
        r0.<java.text.RBTableBuilder: java.util.Vector expandTable> = $r2;

     label0:
        if i0 != -1 goto label1;

        $b8 = 0;
        goto label2;

     label1:
        $b8 = 1;

     label2:
        b1 = $b8;
        $i9 = virtualinvoke r1.<java.lang.String: int length()>();
        $i10 = $i9 + b1;
        r3 = newarray (int)[$i10];
        if b1 != 1 goto label3;

        r3[0] = i0;

     label3:
        i2 = b1;
        i3 = 0;

     label4:
        $i11 = virtualinvoke r1.<java.lang.String: int length()>();
        if i3 >= $i11 goto label10;

        c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);
        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c4);
        if $z0 == 0 goto label6;

        i3 = i3 + 1;
        $i12 = virtualinvoke r1.<java.lang.String: int length()>();
        if i3 == $i12 goto label10;

        $c13 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);
        c5 = $c13;
        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c13);
        if $z1 != 0 goto label5;

        goto label10;

     label5:
        i6 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(c4, c5);
        goto label7;

     label6:
        i6 = c4;

     label7:
        i7 = specialinvoke r0.<java.text.RBTableBuilder: int getCharOrder(int)>(i6);
        if i7 == -1 goto label8;

        $i14 = i2;
        i2 = i2 + 1;
        r3[$i14] = i7;
        goto label9;

     label8:
        $i15 = i2;
        i2 = i2 + 1;
        $i16 = 1879048192 + i6;
        r3[$i15] = $i16;

     label9:
        i3 = i3 + 1;
        goto label4;

     label10:
        $i17 = lengthof r3;
        if i2 >= $i17 goto label13;

        r5 = newarray (int)[i2];

     label11:
        i2 = i2 + -1;
        if i2 < 0 goto label12;

        $i18 = r3[i2];
        r5[i2] = $i18;
        goto label11;

     label12:
        r3 = r5;

     label13:
        $r6 = r0.<java.text.RBTableBuilder: java.util.Vector expandTable>;
        $i19 = virtualinvoke $r6.<java.util.Vector: int size()>();
        i20 = 2113929216 + $i19;
        $r7 = r0.<java.text.RBTableBuilder: java.util.Vector expandTable>;
        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>(r3);
        return i20;
    }

    private void addContractFlags(java.lang.String)
    {
        java.text.RBTableBuilder r0;
        java.lang.String r1;
        int i0, i1, i3, $i5;
        char c2, $c4;
        boolean $z0;
        sun.text.IntHashtable $r2;

        r0 := @this: java.text.RBTableBuilder;
        r1 := @parameter0: java.lang.String;
        i0 = virtualinvoke r1.<java.lang.String: int length()>();
        i1 = 0;

     label0:
        if i1 >= i0 goto label3;

        c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);
        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c2);
        if $z0 == 0 goto label1;

        i1 = i1 + 1;
        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);
        $i5 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(c2, $c4);
        goto label2;

     label1:
        $i5 = c2;

     label2:
        i3 = $i5;
        $r2 = r0.<java.text.RBTableBuilder: sun.text.IntHashtable contractFlags>;
        virtualinvoke $r2.<sun.text.IntHashtable: void put(int,int)>(i3, 1);
        i1 = i1 + 1;
        goto label0;

     label3:
        return;
    }
}
