public abstract class org.apache.tomcat.util.codec.binary.BaseNCodec extends java.lang.Object implements org.apache.tomcat.util.codec.BinaryEncoder, org.apache.tomcat.util.codec.BinaryDecoder
{
    static final int EOF;
    public static final int MIME_CHUNK_SIZE;
    public static final int PEM_CHUNK_SIZE;
    private static final int DEFAULT_BUFFER_RESIZE_FACTOR;
    private static final int DEFAULT_BUFFER_SIZE;
    protected static final int MASK_8BITS;
    protected static final byte PAD_DEFAULT;
    protected final byte PAD;
    private final int unencodedBlockSize;
    private final int encodedBlockSize;
    protected final int lineLength;
    private final int chunkSeparatorLength;

    protected void <init>(int, int, int, int)
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;
        int i0, i1, i2, i3, $i4, $i5;
        boolean z0, $z1;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: byte PAD> = 61;
        r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: int unencodedBlockSize> = i0;
        r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: int encodedBlockSize> = i1;
        if i2 <= 0 goto label0;

        if i3 <= 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        z0 = $z1;
        if z0 == 0 goto label2;

        $i4 = i2 / i1;
        $i5 = $i4 * i1;
        goto label3;

     label2:
        $i5 = 0;

     label3:
        r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: int lineLength> = $i5;
        r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: int chunkSeparatorLength> = i3;
        return;
    }

    boolean hasData(org.apache.tomcat.util.codec.binary.BaseNCodec$Context)
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;
        org.apache.tomcat.util.codec.binary.BaseNCodec$Context r1;
        byte[] $r2;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        r1 := @parameter0: org.apache.tomcat.util.codec.binary.BaseNCodec$Context;
        $r2 = r1.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: byte[] buffer>;
        if $r2 == null goto label0;

        return 1;

     label0:
        return 0;
    }

    int available(org.apache.tomcat.util.codec.binary.BaseNCodec$Context)
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;
        org.apache.tomcat.util.codec.binary.BaseNCodec$Context r1;
        byte[] $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        r1 := @parameter0: org.apache.tomcat.util.codec.binary.BaseNCodec$Context;
        $r2 = r1.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: byte[] buffer>;
        if $r2 == null goto label0;

        $i0 = r1.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i1 = r1.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int readPos>;
        $i2 = $i0 - $i1;
        goto label1;

     label0:
        $i2 = 0;

     label1:
        return $i2;
    }

    protected int getDefaultBufferSize()
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        return 128;
    }

    private byte[] resizeBuffer(org.apache.tomcat.util.codec.binary.BaseNCodec$Context)
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;
        org.apache.tomcat.util.codec.binary.BaseNCodec$Context r1;
        byte[] r2, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        r1 := @parameter0: org.apache.tomcat.util.codec.binary.BaseNCodec$Context;
        $r3 = r1.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: byte[] buffer>;
        if $r3 != null goto label0;

        $i0 = virtualinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: int getDefaultBufferSize()>();
        $r4 = newarray (byte)[$i0];
        r1.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: byte[] buffer> = $r4;
        r1.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos> = 0;
        r1.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int readPos> = 0;
        goto label1;

     label0:
        $r5 = r1.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: byte[] buffer>;
        $i1 = lengthof $r5;
        $i2 = $i1 * 2;
        r2 = newarray (byte)[$i2];
        $r6 = r1.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: byte[] buffer>;
        $r7 = r1.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: byte[] buffer>;
        $i3 = lengthof $r7;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, 0, $i3);
        r1.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: byte[] buffer> = r2;

     label1:
        $r8 = r1.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: byte[] buffer>;
        return $r8;
    }

    protected byte[] ensureBufferSize(int, org.apache.tomcat.util.codec.binary.BaseNCodec$Context)
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;
        int i0, $i1, $i2, $i3;
        org.apache.tomcat.util.codec.binary.BaseNCodec$Context r1;
        byte[] $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        i0 := @parameter0: int;
        r1 := @parameter1: org.apache.tomcat.util.codec.binary.BaseNCodec$Context;
        $r2 = r1.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: byte[] buffer>;
        if $r2 == null goto label0;

        $r3 = r1.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: byte[] buffer>;
        $i1 = lengthof $r3;
        $i2 = r1.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i3 = $i2 + i0;
        if $i1 >= $i3 goto label1;

     label0:
        $r4 = specialinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: byte[] resizeBuffer(org.apache.tomcat.util.codec.binary.BaseNCodec$Context)>(r1);
        return $r4;

     label1:
        $r5 = r1.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: byte[] buffer>;
        return $r5;
    }

    int readResults(byte[], int, int, org.apache.tomcat.util.codec.binary.BaseNCodec$Context)
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;
        byte[] r1, $r3, $r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.tomcat.util.codec.binary.BaseNCodec$Context r2;
        boolean $z0;
        byte $b9;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: org.apache.tomcat.util.codec.binary.BaseNCodec$Context;
        $r3 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: byte[] buffer>;
        if $r3 == null goto label1;

        $i3 = virtualinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: int available(org.apache.tomcat.util.codec.binary.BaseNCodec$Context)>(r2);
        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i1);
        $r4 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: byte[] buffer>;
        $i4 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int readPos>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i4, r1, i0, i2);
        $i5 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int readPos>;
        $i6 = $i5 + i2;
        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int readPos> = $i6;
        $i7 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int readPos>;
        $i8 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        if $i7 < $i8 goto label0;

        r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: byte[] buffer> = null;

     label0:
        return i2;

     label1:
        $z0 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: boolean eof>;
        if $z0 == 0 goto label2;

        $b9 = -1;
        goto label3;

     label2:
        $b9 = 0;

     label3:
        return $b9;
    }

    protected static boolean isWhiteSpace(byte)
    {
        byte b0;

        b0 := @parameter0: byte;
        lookupswitch(b0)
        {
            case 9: goto label0;
            case 10: goto label0;
            case 13: goto label0;
            case 32: goto label0;
            default: goto label1;
        };

     label0:
        return 1;

     label1:
        return 0;
    }

    public java.lang.Object encode(java.lang.Object) throws org.apache.tomcat.util.codec.EncoderException
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;
        java.lang.Object r1;
        boolean $z0;
        org.apache.tomcat.util.codec.EncoderException $r2;
        byte[] $r3, $r4;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof byte[];
        if $z0 != 0 goto label0;

        $r2 = new org.apache.tomcat.util.codec.EncoderException;
        specialinvoke $r2.<org.apache.tomcat.util.codec.EncoderException: void <init>(java.lang.String)>("Parameter supplied to Base-N encode is not a byte[]");
        throw $r2;

     label0:
        $r3 = (byte[]) r1;
        $r4 = virtualinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: byte[] encode(byte[])>($r3);
        return $r4;
    }

    public java.lang.String encodeToString(byte[])
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;
        byte[] r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        r1 := @parameter0: byte[];
        $r2 = virtualinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: byte[] encode(byte[])>(r1);
        $r3 = staticinvoke <org.apache.tomcat.util.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>($r2);
        return $r3;
    }

    public java.lang.String encodeAsString(byte[])
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;
        byte[] r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        r1 := @parameter0: byte[];
        $r2 = virtualinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: byte[] encode(byte[])>(r1);
        $r3 = staticinvoke <org.apache.tomcat.util.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>($r2);
        return $r3;
    }

    public java.lang.Object decode(java.lang.Object) throws org.apache.tomcat.util.codec.DecoderException
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        byte[] $r2, $r3, $r5;
        java.lang.String $r4;
        org.apache.tomcat.util.codec.DecoderException $r6;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof byte[];
        if $z0 == 0 goto label0;

        $r2 = (byte[]) r1;
        $r3 = virtualinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: byte[] decode(byte[])>($r2);
        return $r3;

     label0:
        $z1 = r1 instanceof java.lang.String;
        if $z1 == 0 goto label1;

        $r4 = (java.lang.String) r1;
        $r5 = virtualinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: byte[] decode(java.lang.String)>($r4);
        return $r5;

     label1:
        $r6 = new org.apache.tomcat.util.codec.DecoderException;
        specialinvoke $r6.<org.apache.tomcat.util.codec.DecoderException: void <init>(java.lang.String)>("Parameter supplied to Base-N decode is not a byte[] or a String");
        throw $r6;
    }

    public byte[] decode(java.lang.String)
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;
        java.lang.String r1;
        byte[] $r2, $r3;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <org.apache.tomcat.util.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(r1);
        $r3 = virtualinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: byte[] decode(byte[])>($r2);
        return $r3;
    }

    public byte[] decode(byte[])
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;
        byte[] r1, $r2;
        int $i0;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        r1 := @parameter0: byte[];
        $i0 = lengthof r1;
        $r2 = virtualinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: byte[] decode(byte[],int,int)>(r1, 0, $i0);
        return $r2;
    }

    public byte[] decode(byte[], int, int)
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;
        byte[] r1, r3, $r4;
        int i0, i1, $i2, $i3;
        org.apache.tomcat.util.codec.binary.BaseNCodec$Context r2, $r5;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if r1 == null goto label0;

        if i1 != 0 goto label1;

     label0:
        $r4 = newarray (byte)[0];
        return $r4;

     label1:
        $r5 = new org.apache.tomcat.util.codec.binary.BaseNCodec$Context;
        specialinvoke $r5.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: void <init>()>();
        r2 = $r5;
        virtualinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: void decode(byte[],int,int,org.apache.tomcat.util.codec.binary.BaseNCodec$Context)>(r1, i0, i1, r2);
        virtualinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: void decode(byte[],int,int,org.apache.tomcat.util.codec.binary.BaseNCodec$Context)>(r1, i0, -1, r2);
        $i2 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        r3 = newarray (byte)[$i2];
        $i3 = lengthof r3;
        virtualinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: int readResults(byte[],int,int,org.apache.tomcat.util.codec.binary.BaseNCodec$Context)>(r3, 0, $i3, r2);
        return r3;
    }

    public byte[] encode(byte[])
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;
        byte[] r1, r3;
        org.apache.tomcat.util.codec.binary.BaseNCodec$Context r2, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        r1 := @parameter0: byte[];
        if r1 == null goto label0;

        $i0 = lengthof r1;
        if $i0 != 0 goto label1;

     label0:
        return r1;

     label1:
        $r4 = new org.apache.tomcat.util.codec.binary.BaseNCodec$Context;
        specialinvoke $r4.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: void <init>()>();
        r2 = $r4;
        $i1 = lengthof r1;
        virtualinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: void encode(byte[],int,int,org.apache.tomcat.util.codec.binary.BaseNCodec$Context)>(r1, 0, $i1, r2);
        virtualinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: void encode(byte[],int,int,org.apache.tomcat.util.codec.binary.BaseNCodec$Context)>(r1, 0, -1, r2);
        $i2 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int pos>;
        $i3 = r2.<org.apache.tomcat.util.codec.binary.BaseNCodec$Context: int readPos>;
        $i4 = $i2 - $i3;
        r3 = newarray (byte)[$i4];
        $i5 = lengthof r3;
        virtualinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: int readResults(byte[],int,int,org.apache.tomcat.util.codec.binary.BaseNCodec$Context)>(r3, 0, $i5, r2);
        return r3;
    }

    abstract void encode(byte[], int, int, org.apache.tomcat.util.codec.binary.BaseNCodec$Context);

    abstract void decode(byte[], int, int, org.apache.tomcat.util.codec.binary.BaseNCodec$Context);

    protected abstract boolean isInAlphabet(byte);

    public boolean isInAlphabet(byte[], boolean)
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;
        byte[] r1, r3;
        boolean z0, $z1, $z2;
        int i0, i1;
        byte b2;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        r1 := @parameter0: byte[];
        z0 := @parameter1: boolean;
        r3 = r1;
        i0 = lengthof r1;
        i1 = 0;
        goto label3;

     label0:
        b2 = r3[i1];
        $z1 = virtualinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: boolean isInAlphabet(byte)>(b2);
        if $z1 != 0 goto label2;

        if z0 == 0 goto label1;

        if b2 == 61 goto label2;

        $z2 = staticinvoke <org.apache.tomcat.util.codec.binary.BaseNCodec: boolean isWhiteSpace(byte)>(b2);
        if $z2 != 0 goto label2;

     label1:
        return 0;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label0;

        return 1;
    }

    public boolean isInAlphabet(java.lang.String)
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;
        java.lang.String r1;
        byte[] $r2;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <org.apache.tomcat.util.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>(r1);
        $z0 = virtualinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: boolean isInAlphabet(byte[],boolean)>($r2, 1);
        return $z0;
    }

    protected boolean containsAlphabetOrPad(byte[])
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;
        byte[] r1, r2;
        int i0, i1;
        byte b2;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        r1 := @parameter0: byte[];
        if r1 != null goto label0;

        return 0;

     label0:
        r2 = r1;
        i0 = lengthof r1;
        i1 = 0;
        goto label4;

     label1:
        b2 = r2[i1];
        if 61 == b2 goto label2;

        $z0 = virtualinvoke r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: boolean isInAlphabet(byte)>(b2);
        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label1;

        return 0;
    }

    public long getEncodedLength(byte[])
    {
        org.apache.tomcat.util.codec.binary.BaseNCodec r0;
        byte[] r1;
        long l0, $l7, $l9, $l12, $l13, $l14, $l16, $l17, $l19, $l20;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i11, $i15, $i18;

        r0 := @this: org.apache.tomcat.util.codec.binary.BaseNCodec;
        r1 := @parameter0: byte[];
        $i1 = lengthof r1;
        $i2 = r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: int unencodedBlockSize>;
        $i3 = $i1 + $i2;
        $i4 = $i3 - 1;
        $i5 = r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: int unencodedBlockSize>;
        $i6 = $i4 / $i5;
        $l7 = (long) $i6;
        $i8 = r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: int encodedBlockSize>;
        $l9 = (long) $i8;
        l0 = $l7 * $l9;
        $i10 = r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: int lineLength>;
        if $i10 <= 0 goto label0;

        $i11 = r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: int lineLength>;
        $l12 = (long) $i11;
        $l13 = l0 + $l12;
        $l14 = $l13 - 1L;
        $i15 = r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: int lineLength>;
        $l16 = (long) $i15;
        $l17 = $l14 / $l16;
        $i18 = r0.<org.apache.tomcat.util.codec.binary.BaseNCodec: int chunkSeparatorLength>;
        $l19 = (long) $i18;
        $l20 = $l17 * $l19;
        l0 = l0 + $l20;

     label0:
        return l0;
    }
}
