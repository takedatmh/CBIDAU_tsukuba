public abstract class sun.util.locale.LocaleObjectCache extends java.lang.Object
{
    private java.util.concurrent.ConcurrentMap map;
    private java.lang.ref.ReferenceQueue queue;

    public void <init>()
    {
        sun.util.locale.LocaleObjectCache r0;

        r0 := @this: sun.util.locale.LocaleObjectCache;
        specialinvoke r0.<sun.util.locale.LocaleObjectCache: void <init>(int,float,int)>(16, 0.75F, 16);
        return;
    }

    public void <init>(int, float, int)
    {
        sun.util.locale.LocaleObjectCache r0;
        int i0, i1;
        float f0;
        java.lang.ref.ReferenceQueue $r1;
        java.util.concurrent.ConcurrentHashMap $r2;

        r0 := @this: sun.util.locale.LocaleObjectCache;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        i1 := @parameter2: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new java.lang.ref.ReferenceQueue;
        specialinvoke $r1.<java.lang.ref.ReferenceQueue: void <init>()>();
        r0.<sun.util.locale.LocaleObjectCache: java.lang.ref.ReferenceQueue queue> = $r1;
        $r2 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(i0, f0, i1);
        r0.<sun.util.locale.LocaleObjectCache: java.util.concurrent.ConcurrentMap map> = $r2;
        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        sun.util.locale.LocaleObjectCache r0;
        java.lang.Object r1, r2, r4, $r7, r8, $r12;
        sun.util.locale.LocaleObjectCache$CacheEntry r3, r5, $r9, r13;
        java.util.concurrent.ConcurrentMap $r6, $r11, $r14;
        java.lang.ref.ReferenceQueue $r10;

        r0 := @this: sun.util.locale.LocaleObjectCache;
        r1 := @parameter0: java.lang.Object;
        r2 = null;
        specialinvoke r0.<sun.util.locale.LocaleObjectCache: void cleanStaleEntries()>();
        $r6 = r0.<sun.util.locale.LocaleObjectCache: java.util.concurrent.ConcurrentMap map>;
        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);
        r3 = (sun.util.locale.LocaleObjectCache$CacheEntry) $r7;
        if r3 == null goto label0;

        r2 = virtualinvoke r3.<sun.util.locale.LocaleObjectCache$CacheEntry: java.lang.Object get()>();

     label0:
        if r2 != null goto label4;

        r4 = virtualinvoke r0.<sun.util.locale.LocaleObjectCache: java.lang.Object createObject(java.lang.Object)>(r1);
        r8 = virtualinvoke r0.<sun.util.locale.LocaleObjectCache: java.lang.Object normalizeKey(java.lang.Object)>(r1);
        if r8 == null goto label1;

        if r4 != null goto label2;

     label1:
        return null;

     label2:
        $r9 = new sun.util.locale.LocaleObjectCache$CacheEntry;
        $r10 = r0.<sun.util.locale.LocaleObjectCache: java.lang.ref.ReferenceQueue queue>;
        specialinvoke $r9.<sun.util.locale.LocaleObjectCache$CacheEntry: void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue)>(r8, r4, $r10);
        r5 = $r9;
        $r11 = r0.<sun.util.locale.LocaleObjectCache: java.util.concurrent.ConcurrentMap map>;
        $r12 = interfaceinvoke $r11.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r8, r5);
        r13 = (sun.util.locale.LocaleObjectCache$CacheEntry) $r12;
        if r13 != null goto label3;

        r2 = r4;
        goto label4;

     label3:
        r2 = virtualinvoke r13.<sun.util.locale.LocaleObjectCache$CacheEntry: java.lang.Object get()>();
        if r2 != null goto label4;

        $r14 = r0.<sun.util.locale.LocaleObjectCache: java.util.concurrent.ConcurrentMap map>;
        interfaceinvoke $r14.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r5);
        r2 = r4;

     label4:
        return r2;
    }

    protected java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        sun.util.locale.LocaleObjectCache r0;
        java.lang.Object r1, r2, $r8, $r9;
        sun.util.locale.LocaleObjectCache$CacheEntry $r3, r4, r5;
        java.lang.ref.ReferenceQueue $r6;
        java.util.concurrent.ConcurrentMap $r7;

        r0 := @this: sun.util.locale.LocaleObjectCache;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r3 = new sun.util.locale.LocaleObjectCache$CacheEntry;
        $r6 = r0.<sun.util.locale.LocaleObjectCache: java.lang.ref.ReferenceQueue queue>;
        specialinvoke $r3.<sun.util.locale.LocaleObjectCache$CacheEntry: void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue)>(r1, r2, $r6);
        r4 = $r3;
        $r7 = r0.<sun.util.locale.LocaleObjectCache: java.util.concurrent.ConcurrentMap map>;
        $r8 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);
        r5 = (sun.util.locale.LocaleObjectCache$CacheEntry) $r8;
        if r5 != null goto label0;

        $r9 = null;
        goto label1;

     label0:
        $r9 = virtualinvoke r5.<sun.util.locale.LocaleObjectCache$CacheEntry: java.lang.Object get()>();

     label1:
        return $r9;
    }

    private void cleanStaleEntries()
    {
        sun.util.locale.LocaleObjectCache r0;
        sun.util.locale.LocaleObjectCache$CacheEntry r1, $r4;
        java.lang.ref.ReferenceQueue $r2;
        java.lang.ref.Reference $r3;
        java.util.concurrent.ConcurrentMap $r5;
        java.lang.Object $r6;

        r0 := @this: sun.util.locale.LocaleObjectCache;

     label0:
        $r2 = r0.<sun.util.locale.LocaleObjectCache: java.lang.ref.ReferenceQueue queue>;
        $r3 = virtualinvoke $r2.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();
        $r4 = (sun.util.locale.LocaleObjectCache$CacheEntry) $r3;
        r1 = $r4;
        if $r4 == null goto label1;

        $r5 = r0.<sun.util.locale.LocaleObjectCache: java.util.concurrent.ConcurrentMap map>;
        $r6 = virtualinvoke r1.<sun.util.locale.LocaleObjectCache$CacheEntry: java.lang.Object getKey()>();
        interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r6);
        goto label0;

     label1:
        return;
    }

    protected abstract java.lang.Object createObject(java.lang.Object);

    protected java.lang.Object normalizeKey(java.lang.Object)
    {
        sun.util.locale.LocaleObjectCache r0;
        java.lang.Object r1;

        r0 := @this: sun.util.locale.LocaleObjectCache;
        r1 := @parameter0: java.lang.Object;
        return r1;
    }
}
