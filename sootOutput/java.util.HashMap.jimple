public class java.util.HashMap extends java.util.AbstractMap implements java.util.Map, java.lang.Cloneable, java.io.Serializable
{
    static final int DEFAULT_INITIAL_CAPACITY;
    static final int MAXIMUM_CAPACITY;
    static final float DEFAULT_LOAD_FACTOR;
    static final java.util.HashMap$Entry[] EMPTY_TABLE;
    transient java.util.HashMap$Entry[] table;
    transient int size;
    int threshold;
    final float loadFactor;
    transient int modCount;
    static final int ALTERNATIVE_HASHING_THRESHOLD_DEFAULT;
    transient int hashSeed;
    private transient java.util.Set entrySet;
    private static final long serialVersionUID;

    public void <init>(int, float)
    {
        java.util.HashMap r0;
        int i0;
        float f0;
        java.util.HashMap$Entry[] $r1, $r3;
        java.lang.StringBuilder $r2, $r5, $r6, $r9, $r10, $r11;
        java.lang.IllegalArgumentException $r4, $r8;
        java.lang.String $r7, $r12;
        byte $b1;
        boolean $z0;

        r0 := @this: java.util.HashMap;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        specialinvoke r0.<java.util.AbstractMap: void <init>()>();
        $r1 = <java.util.HashMap: java.util.HashMap$Entry[] EMPTY_TABLE>;
        $r3 = (java.util.HashMap$Entry[]) $r1;
        r0.<java.util.HashMap: java.util.HashMap$Entry[] table> = $r3;
        r0.<java.util.HashMap: int hashSeed> = 0;
        r0.<java.util.HashMap: java.util.Set entrySet> = null;
        if i0 >= 0 goto label0;

        $r4 = new java.lang.IllegalArgumentException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal initial capacity: ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r4;

     label0:
        if i0 <= 1073741824 goto label1;

        i0 = 1073741824;

     label1:
        $b1 = f0 cmpg 0.0F;
        if $b1 <= 0 goto label2;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);
        if $z0 == 0 goto label3;

     label2:
        $r8 = new java.lang.IllegalArgumentException;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal load factor: ");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);
        throw $r8;

     label3:
        r0.<java.util.HashMap: float loadFactor> = f0;
        r0.<java.util.HashMap: int threshold> = i0;
        virtualinvoke r0.<java.util.HashMap: void init()>();
        return;
    }

    public void <init>(int)
    {
        java.util.HashMap r0;
        int i0;

        r0 := @this: java.util.HashMap;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.HashMap: void <init>(int,float)>(i0, 0.75F);
        return;
    }

    public void <init>()
    {
        java.util.HashMap r0;

        r0 := @this: java.util.HashMap;
        specialinvoke r0.<java.util.HashMap: void <init>(int,float)>(16, 0.75F);
        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.HashMap r0;
        java.util.Map r1;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0, $f1;

        r0 := @this: java.util.HashMap;
        r1 := @parameter0: java.util.Map;
        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();
        $f0 = (float) $i0;
        $f1 = $f0 / 0.75F;
        $i1 = (int) $f1;
        $i2 = $i1 + 1;
        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, 16);
        specialinvoke r0.<java.util.HashMap: void <init>(int,float)>($i3, 0.75F);
        $i4 = r0.<java.util.HashMap: int threshold>;
        specialinvoke r0.<java.util.HashMap: void inflateTable(int)>($i4);
        specialinvoke r0.<java.util.HashMap: void putAllForCreate(java.util.Map)>(r1);
        return;
    }

    private static int roundUpToPowerOf2(int)
    {
        int i0, $i1, $i2, $i3;

        i0 := @parameter0: int;
        if i0 < 1073741824 goto label0;

        $i1 = 1073741824;
        goto label2;

     label0:
        if i0 <= 1 goto label1;

        $i2 = i0 - 1;
        $i3 = $i2 << 1;
        $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i3);
        goto label2;

     label1:
        $i1 = 1;

     label2:
        return $i1;
    }

    private void inflateTable(int)
    {
        java.util.HashMap r0;
        int i0, i1, $i2;
        float $f0, $f1, $f2, $f3;
        java.util.HashMap$Entry[] $r1;

        r0 := @this: java.util.HashMap;
        i0 := @parameter0: int;
        i1 = staticinvoke <java.util.HashMap: int roundUpToPowerOf2(int)>(i0);
        $f0 = (float) i1;
        $f1 = r0.<java.util.HashMap: float loadFactor>;
        $f2 = $f0 * $f1;
        $f3 = staticinvoke <java.lang.Math: float min(float,float)>($f2, 1.07374182E9F);
        $i2 = (int) $f3;
        r0.<java.util.HashMap: int threshold> = $i2;
        $r1 = newarray (java.util.HashMap$Entry)[i1];
        r0.<java.util.HashMap: java.util.HashMap$Entry[] table> = $r1;
        virtualinvoke r0.<java.util.HashMap: boolean initHashSeedAsNeeded(int)>(i1);
        return;
    }

    void init()
    {
        java.util.HashMap r0;

        r0 := @this: java.util.HashMap;
        return;
    }

    final boolean initHashSeedAsNeeded(int)
    {
        java.util.HashMap r0;
        int i0, $i1, $i2, $i3;
        boolean z0, z1, z2, $z3, $z4, $z5;

        r0 := @this: java.util.HashMap;
        i0 := @parameter0: int;
        $i2 = r0.<java.util.HashMap: int hashSeed>;
        if $i2 == 0 goto label0;

        $z3 = 1;
        goto label1;

     label0:
        $z3 = 0;

     label1:
        z0 = $z3;
        $z4 = staticinvoke <sun.misc.VM: boolean isBooted()>();
        if $z4 == 0 goto label2;

        $i1 = <java.util.HashMap$Holder: int ALTERNATIVE_HASHING_THRESHOLD>;
        if i0 < $i1 goto label2;

        $z5 = 1;
        goto label3;

     label2:
        $z5 = 0;

     label3:
        z1 = $z5;
        z2 = z0 ^ z1;
        if z2 == 0 goto label6;

        if z1 == 0 goto label4;

        $i3 = staticinvoke <sun.misc.Hashing: int randomHashSeed(java.lang.Object)>(r0);
        goto label5;

     label4:
        $i3 = 0;

     label5:
        r0.<java.util.HashMap: int hashSeed> = $i3;

     label6:
        return z2;
    }

    final int hash(java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11;
        boolean $z0;
        java.lang.String $r2;

        r0 := @this: java.util.HashMap;
        r1 := @parameter0: java.lang.Object;
        i0 = r0.<java.util.HashMap: int hashSeed>;
        if 0 == i0 goto label0;

        $z0 = r1 instanceof java.lang.String;
        if $z0 == 0 goto label0;

        $r2 = (java.lang.String) r1;
        $i1 = staticinvoke <sun.misc.Hashing: int stringHash32(java.lang.String)>($r2);
        return $i1;

     label0:
        $i2 = virtualinvoke r1.<java.lang.Object: int hashCode()>();
        i3 = i0 ^ $i2;
        $i4 = i3 >>> 20;
        $i5 = i3 >>> 12;
        $i6 = $i4 ^ $i5;
        i7 = i3 ^ $i6;
        $i8 = i7 >>> 7;
        $i9 = i7 ^ $i8;
        $i10 = i7 >>> 4;
        $i11 = $i9 ^ $i10;
        return $i11;
    }

    static int indexFor(int, int)
    {
        int i0, i1, $i2, $i3;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i2 = i1 - 1;
        $i3 = i0 & $i2;
        return $i3;
    }

    public int size()
    {
        java.util.HashMap r0;
        int $i0;

        r0 := @this: java.util.HashMap;
        $i0 = r0.<java.util.HashMap: int size>;
        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.HashMap r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.HashMap;
        $i0 = r0.<java.util.HashMap: int size>;
        if $i0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, $r3, $r4;
        java.util.HashMap$Entry r2;

        r0 := @this: java.util.HashMap;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        $r3 = specialinvoke r0.<java.util.HashMap: java.lang.Object getForNullKey()>();
        return $r3;

     label0:
        r2 = virtualinvoke r0.<java.util.HashMap: java.util.HashMap$Entry getEntry(java.lang.Object)>(r1);
        if null != r2 goto label1;

        $r4 = null;
        goto label2;

     label1:
        $r4 = virtualinvoke r2.<java.util.HashMap$Entry: java.lang.Object getValue()>();

     label2:
        return $r4;
    }

    private java.lang.Object getForNullKey()
    {
        java.util.HashMap r0;
        java.util.HashMap$Entry r1;
        int $i0;
        java.util.HashMap$Entry[] $r2;
        java.lang.Object $r3, $r4;

        r0 := @this: java.util.HashMap;
        $i0 = r0.<java.util.HashMap: int size>;
        if $i0 != 0 goto label0;

        return null;

     label0:
        $r2 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        r1 = $r2[0];

     label1:
        if r1 == null goto label3;

        $r3 = r1.<java.util.HashMap$Entry: java.lang.Object key>;
        if $r3 != null goto label2;

        $r4 = r1.<java.util.HashMap$Entry: java.lang.Object value>;
        return $r4;

     label2:
        r1 = r1.<java.util.HashMap$Entry: java.util.HashMap$Entry next>;
        goto label1;

     label3:
        return null;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1;
        java.util.HashMap$Entry $r2;
        boolean $z0;

        r0 := @this: java.util.HashMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.HashMap: java.util.HashMap$Entry getEntry(java.lang.Object)>(r1);
        if $r2 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    final java.util.HashMap$Entry getEntry(java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, r3, $r6;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.HashMap$Entry r2;
        java.util.HashMap$Entry[] $r4, $r5;
        boolean $z0;

        r0 := @this: java.util.HashMap;
        r1 := @parameter0: java.lang.Object;
        $i1 = r0.<java.util.HashMap: int size>;
        if $i1 != 0 goto label0;

        return null;

     label0:
        if r1 != null goto label1;

        $i2 = 0;
        goto label2;

     label1:
        $i2 = virtualinvoke r0.<java.util.HashMap: int hash(java.lang.Object)>(r1);

     label2:
        i0 = $i2;
        $r4 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $r5 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $i3 = lengthof $r5;
        $i4 = staticinvoke <java.util.HashMap: int indexFor(int,int)>(i0, $i3);
        r2 = $r4[$i4];

     label3:
        if r2 == null goto label6;

        $i5 = r2.<java.util.HashMap$Entry: int hash>;
        if $i5 != i0 goto label5;

        $r6 = r2.<java.util.HashMap$Entry: java.lang.Object key>;
        r3 = $r6;
        if $r6 == r1 goto label4;

        if r1 == null goto label5;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r3);
        if $z0 == 0 goto label5;

     label4:
        return r2;

     label5:
        r2 = r2.<java.util.HashMap$Entry: java.util.HashMap$Entry next>;
        goto label3;

     label6:
        return null;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, r2, r5, r6, $r8, $r11;
        java.util.HashMap$Entry[] $r3, $r7, $r9, $r10;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.util.HashMap$Entry r4;
        boolean $z0;

        r0 := @this: java.util.HashMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r7 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $r3 = <java.util.HashMap: java.util.HashMap$Entry[] EMPTY_TABLE>;
        if $r7 != $r3 goto label0;

        $i2 = r0.<java.util.HashMap: int threshold>;
        specialinvoke r0.<java.util.HashMap: void inflateTable(int)>($i2);

     label0:
        if r1 != null goto label1;

        $r8 = specialinvoke r0.<java.util.HashMap: java.lang.Object putForNullKey(java.lang.Object)>(r2);
        return $r8;

     label1:
        i0 = virtualinvoke r0.<java.util.HashMap: int hash(java.lang.Object)>(r1);
        $r9 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $i3 = lengthof $r9;
        i1 = staticinvoke <java.util.HashMap: int indexFor(int,int)>(i0, $i3);
        $r10 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        r4 = $r10[i1];

     label2:
        if r4 == null goto label5;

        $i4 = r4.<java.util.HashMap$Entry: int hash>;
        if $i4 != i0 goto label4;

        $r11 = r4.<java.util.HashMap$Entry: java.lang.Object key>;
        r5 = $r11;
        if $r11 == r1 goto label3;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);
        if $z0 == 0 goto label4;

     label3:
        r6 = r4.<java.util.HashMap$Entry: java.lang.Object value>;
        r4.<java.util.HashMap$Entry: java.lang.Object value> = r2;
        virtualinvoke r4.<java.util.HashMap$Entry: void recordAccess(java.util.HashMap)>(r0);
        return r6;

     label4:
        r4 = r4.<java.util.HashMap$Entry: java.util.HashMap$Entry next>;
        goto label2;

     label5:
        $i5 = r0.<java.util.HashMap: int modCount>;
        $i6 = $i5 + 1;
        r0.<java.util.HashMap: int modCount> = $i6;
        virtualinvoke r0.<java.util.HashMap: void addEntry(int,java.lang.Object,java.lang.Object,int)>(i0, r1, r2, i1);
        return null;
    }

    private java.lang.Object putForNullKey(java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, r3, $r5;
        java.util.HashMap$Entry r2;
        java.util.HashMap$Entry[] $r4;
        int $i0, $i1;

        r0 := @this: java.util.HashMap;
        r1 := @parameter0: java.lang.Object;
        $r4 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        r2 = $r4[0];

     label0:
        if r2 == null goto label2;

        $r5 = r2.<java.util.HashMap$Entry: java.lang.Object key>;
        if $r5 != null goto label1;

        r3 = r2.<java.util.HashMap$Entry: java.lang.Object value>;
        r2.<java.util.HashMap$Entry: java.lang.Object value> = r1;
        virtualinvoke r2.<java.util.HashMap$Entry: void recordAccess(java.util.HashMap)>(r0);
        return r3;

     label1:
        r2 = r2.<java.util.HashMap$Entry: java.util.HashMap$Entry next>;
        goto label0;

     label2:
        $i0 = r0.<java.util.HashMap: int modCount>;
        $i1 = $i0 + 1;
        r0.<java.util.HashMap: int modCount> = $i1;
        virtualinvoke r0.<java.util.HashMap: void addEntry(int,java.lang.Object,java.lang.Object,int)>(0, null, r1, 0);
        return null;
    }

    private void putForCreate(java.lang.Object, java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, r2, r4, $r7;
        int i0, i1, $i2, $i3, $i4;
        java.util.HashMap$Entry r3;
        java.util.HashMap$Entry[] $r5, $r6;
        boolean $z0;

        r0 := @this: java.util.HashMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        if null != r1 goto label0;

        $i2 = 0;
        goto label1;

     label0:
        $i2 = virtualinvoke r0.<java.util.HashMap: int hash(java.lang.Object)>(r1);

     label1:
        i0 = $i2;
        $r5 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $i3 = lengthof $r5;
        i1 = staticinvoke <java.util.HashMap: int indexFor(int,int)>(i0, $i3);
        $r6 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        r3 = $r6[i1];

     label2:
        if r3 == null goto label5;

        $i4 = r3.<java.util.HashMap$Entry: int hash>;
        if $i4 != i0 goto label4;

        $r7 = r3.<java.util.HashMap$Entry: java.lang.Object key>;
        r4 = $r7;
        if $r7 == r1 goto label3;

        if r1 == null goto label4;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r4);
        if $z0 == 0 goto label4;

     label3:
        r3.<java.util.HashMap$Entry: java.lang.Object value> = r2;
        return;

     label4:
        r3 = r3.<java.util.HashMap$Entry: java.util.HashMap$Entry next>;
        goto label2;

     label5:
        virtualinvoke r0.<java.util.HashMap: void createEntry(int,java.lang.Object,java.lang.Object,int)>(i0, r1, r2, i1);
        return;
    }

    private void putAllForCreate(java.util.Map)
    {
        java.util.HashMap r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: java.util.HashMap;
        r1 := @parameter0: java.util.Map;
        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();
        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.Map$Entry) $r5;
        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();
        specialinvoke r0.<java.util.HashMap: void putForCreate(java.lang.Object,java.lang.Object)>($r6, $r7);
        goto label0;

     label1:
        return;
    }

    void resize(int)
    {
        java.util.HashMap r0;
        int i0, i1, $i2;
        java.util.HashMap$Entry[] r1, r2;
        boolean $z0;
        float $f0, $f1, $f2, $f3;

        r0 := @this: java.util.HashMap;
        i0 := @parameter0: int;
        r1 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        i1 = lengthof r1;
        if i1 != 1073741824 goto label0;

        r0.<java.util.HashMap: int threshold> = 2147483647;
        return;

     label0:
        r2 = newarray (java.util.HashMap$Entry)[i0];
        $z0 = virtualinvoke r0.<java.util.HashMap: boolean initHashSeedAsNeeded(int)>(i0);
        virtualinvoke r0.<java.util.HashMap: void transfer(java.util.HashMap$Entry[],boolean)>(r2, $z0);
        r0.<java.util.HashMap: java.util.HashMap$Entry[] table> = r2;
        $f0 = (float) i0;
        $f1 = r0.<java.util.HashMap: float loadFactor>;
        $f2 = $f0 * $f1;
        $f3 = staticinvoke <java.lang.Math: float min(float,float)>($f2, 1.07374182E9F);
        $i2 = (int) $f3;
        r0.<java.util.HashMap: int threshold> = $i2;
        return;
    }

    void transfer(java.util.HashMap$Entry[], boolean)
    {
        java.util.HashMap r0;
        java.util.HashMap$Entry[] r1, r2;
        boolean z0;
        int i0, i1, i2, i3, $i4, $i5;
        java.util.HashMap$Entry r3, r4, $r5, $r8;
        java.lang.Object $r6, $r7;

        r0 := @this: java.util.HashMap;
        r1 := @parameter0: java.util.HashMap$Entry[];
        z0 := @parameter1: boolean;
        i0 = lengthof r1;
        r2 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        i1 = lengthof r2;
        i2 = 0;

     label0:
        if i2 >= i1 goto label6;

        r3 = r2[i2];

     label1:
        if null == r3 goto label5;

        r4 = r3.<java.util.HashMap$Entry: java.util.HashMap$Entry next>;
        if z0 == 0 goto label4;

        $r5 = r3;
        $r6 = r3.<java.util.HashMap$Entry: java.lang.Object key>;
        if null != $r6 goto label2;

        $i4 = 0;
        goto label3;

     label2:
        $r7 = r3.<java.util.HashMap$Entry: java.lang.Object key>;
        $i4 = virtualinvoke r0.<java.util.HashMap: int hash(java.lang.Object)>($r7);

     label3:
        $r5.<java.util.HashMap$Entry: int hash> = $i4;

     label4:
        $i5 = r3.<java.util.HashMap$Entry: int hash>;
        i3 = staticinvoke <java.util.HashMap: int indexFor(int,int)>($i5, i0);
        $r8 = r1[i3];
        r3.<java.util.HashMap$Entry: java.util.HashMap$Entry next> = $r8;
        r1[i3] = r3;
        r3 = r4;
        goto label1;

     label5:
        i2 = i2 + 1;
        goto label0;

     label6:
        return;
    }

    public void putAll(java.util.Map)
    {
        java.util.HashMap r0;
        java.util.Map r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.util.HashMap$Entry[] $r2, $r3, $r4, $r5;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        java.util.Set $r6;
        java.util.Iterator r7;
        boolean $z0;
        java.lang.Object $r8, $r10, $r11;
        java.util.Map$Entry r9;

        r0 := @this: java.util.HashMap;
        r1 := @parameter0: java.util.Map;
        i0 = interfaceinvoke r1.<java.util.Map: int size()>();
        if i0 != 0 goto label0;

        return;

     label0:
        $r3 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $r2 = <java.util.HashMap: java.util.HashMap$Entry[] EMPTY_TABLE>;
        if $r3 != $r2 goto label1;

        $f0 = (float) i0;
        $f1 = r0.<java.util.HashMap: float loadFactor>;
        $f2 = $f0 * $f1;
        $i3 = r0.<java.util.HashMap: int threshold>;
        $f3 = (float) $i3;
        $f4 = staticinvoke <java.lang.Math: float max(float,float)>($f2, $f3);
        $i4 = (int) $f4;
        specialinvoke r0.<java.util.HashMap: void inflateTable(int)>($i4);

     label1:
        $i5 = r0.<java.util.HashMap: int threshold>;
        if i0 <= $i5 goto label5;

        $f5 = (float) i0;
        $f6 = r0.<java.util.HashMap: float loadFactor>;
        $f7 = $f5 / $f6;
        $f8 = $f7 + 1.0F;
        i1 = (int) $f8;
        if i1 <= 1073741824 goto label2;

        i1 = 1073741824;

     label2:
        $r4 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        i2 = lengthof $r4;

     label3:
        if i2 >= i1 goto label4;

        i2 = i2 << 1;
        goto label3;

     label4:
        $r5 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $i6 = lengthof $r5;
        if i2 <= $i6 goto label5;

        virtualinvoke r0.<java.util.HashMap: void resize(int)>(i2);

     label5:
        $r6 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();
        r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label7;

        $r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();
        r9 = (java.util.Map$Entry) $r8;
        $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r11 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();
        virtualinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);
        goto label6;

     label7:
        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, $r3;
        java.util.HashMap$Entry r2;

        r0 := @this: java.util.HashMap;
        r1 := @parameter0: java.lang.Object;
        r2 = virtualinvoke r0.<java.util.HashMap: java.util.HashMap$Entry removeEntryForKey(java.lang.Object)>(r1);
        if r2 != null goto label0;

        $r3 = null;
        goto label1;

     label0:
        $r3 = r2.<java.util.HashMap$Entry: java.lang.Object value>;

     label1:
        return $r3;
    }

    final java.util.HashMap$Entry removeEntryForKey(java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, r5, $r8;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.HashMap$Entry r2, r3, r4;
        java.util.HashMap$Entry[] $r6, $r7, $r11;
        boolean $z0;

        r0 := @this: java.util.HashMap;
        r1 := @parameter0: java.lang.Object;
        $i2 = r0.<java.util.HashMap: int size>;
        if $i2 != 0 goto label0;

        return null;

     label0:
        if r1 != null goto label1;

        $i3 = 0;
        goto label2;

     label1:
        $i3 = virtualinvoke r0.<java.util.HashMap: int hash(java.lang.Object)>(r1);

     label2:
        i0 = $i3;
        $r6 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $i4 = lengthof $r6;
        i1 = staticinvoke <java.util.HashMap: int indexFor(int,int)>(i0, $i4);
        $r7 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        r2 = $r7[i1];
        r3 = r2;

     label3:
        if r3 == null goto label8;

        r4 = r3.<java.util.HashMap$Entry: java.util.HashMap$Entry next>;
        $i5 = r3.<java.util.HashMap$Entry: int hash>;
        if $i5 != i0 goto label7;

        $r8 = r3.<java.util.HashMap$Entry: java.lang.Object key>;
        r5 = $r8;
        if $r8 == r1 goto label4;

        if r1 == null goto label7;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);
        if $z0 == 0 goto label7;

     label4:
        $i6 = r0.<java.util.HashMap: int modCount>;
        $i7 = $i6 + 1;
        r0.<java.util.HashMap: int modCount> = $i7;
        $i8 = r0.<java.util.HashMap: int size>;
        $i9 = $i8 - 1;
        r0.<java.util.HashMap: int size> = $i9;
        if r2 != r3 goto label5;

        $r11 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $r11[i1] = r4;
        goto label6;

     label5:
        r2.<java.util.HashMap$Entry: java.util.HashMap$Entry next> = r4;

     label6:
        virtualinvoke r3.<java.util.HashMap$Entry: void recordRemoval(java.util.HashMap)>(r0);
        return r3;

     label7:
        r2 = r3;
        r3 = r4;
        goto label3;

     label8:
        return r3;
    }

    final java.util.HashMap$Entry removeMapping(java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, r3;
        java.util.Map$Entry r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.HashMap$Entry r4, r5, r6;
        boolean $z0, $z1;
        java.util.HashMap$Entry[] $r7, $r8, $r11;

        r0 := @this: java.util.HashMap;
        r1 := @parameter0: java.lang.Object;
        $i2 = r0.<java.util.HashMap: int size>;
        if $i2 == 0 goto label0;

        $z0 = r1 instanceof java.util.Map$Entry;
        if $z0 != 0 goto label1;

     label0:
        return null;

     label1:
        r2 = (java.util.Map$Entry) r1;
        r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();
        if r3 != null goto label2;

        $i3 = 0;
        goto label3;

     label2:
        $i3 = virtualinvoke r0.<java.util.HashMap: int hash(java.lang.Object)>(r3);

     label3:
        i0 = $i3;
        $r7 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $i4 = lengthof $r7;
        i1 = staticinvoke <java.util.HashMap: int indexFor(int,int)>(i0, $i4);
        $r8 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        r4 = $r8[i1];
        r5 = r4;

     label4:
        if r5 == null goto label8;

        r6 = r5.<java.util.HashMap$Entry: java.util.HashMap$Entry next>;
        $i5 = r5.<java.util.HashMap$Entry: int hash>;
        if $i5 != i0 goto label7;

        $z1 = virtualinvoke r5.<java.util.HashMap$Entry: boolean equals(java.lang.Object)>(r2);
        if $z1 == 0 goto label7;

        $i6 = r0.<java.util.HashMap: int modCount>;
        $i7 = $i6 + 1;
        r0.<java.util.HashMap: int modCount> = $i7;
        $i8 = r0.<java.util.HashMap: int size>;
        $i9 = $i8 - 1;
        r0.<java.util.HashMap: int size> = $i9;
        if r4 != r5 goto label5;

        $r11 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $r11[i1] = r6;
        goto label6;

     label5:
        r4.<java.util.HashMap$Entry: java.util.HashMap$Entry next> = r6;

     label6:
        virtualinvoke r5.<java.util.HashMap$Entry: void recordRemoval(java.util.HashMap)>(r0);
        return r5;

     label7:
        r4 = r5;
        r5 = r6;
        goto label4;

     label8:
        return r5;
    }

    public void clear()
    {
        java.util.HashMap r0;
        int $i0, $i1;
        java.util.HashMap$Entry[] $r2;

        r0 := @this: java.util.HashMap;
        $i0 = r0.<java.util.HashMap: int modCount>;
        $i1 = $i0 + 1;
        r0.<java.util.HashMap: int modCount> = $i1;
        $r2 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r2, null);
        r0.<java.util.HashMap: int size> = 0;
        return;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, $r4;
        java.util.HashMap$Entry[] r2;
        int i0, $i1;
        java.util.HashMap$Entry r3;
        boolean $z0, $z1;

        r0 := @this: java.util.HashMap;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        $z0 = specialinvoke r0.<java.util.HashMap: boolean containsNullValue()>();
        return $z0;

     label0:
        r2 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        i0 = 0;

     label1:
        $i1 = lengthof r2;
        if i0 >= $i1 goto label5;

        r3 = r2[i0];

     label2:
        if r3 == null goto label4;

        $r4 = r3.<java.util.HashMap$Entry: java.lang.Object value>;
        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);
        if $z1 == 0 goto label3;

        return 1;

     label3:
        r3 = r3.<java.util.HashMap$Entry: java.util.HashMap$Entry next>;
        goto label2;

     label4:
        i0 = i0 + 1;
        goto label1;

     label5:
        return 0;
    }

    private boolean containsNullValue()
    {
        java.util.HashMap r0;
        java.util.HashMap$Entry[] r1;
        int i0, $i1;
        java.util.HashMap$Entry r2;
        java.lang.Object $r3;

        r0 := @this: java.util.HashMap;
        r1 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        i0 = 0;

     label0:
        $i1 = lengthof r1;
        if i0 >= $i1 goto label4;

        r2 = r1[i0];

     label1:
        if r2 == null goto label3;

        $r3 = r2.<java.util.HashMap$Entry: java.lang.Object value>;
        if $r3 != null goto label2;

        return 1;

     label2:
        r2 = r2.<java.util.HashMap$Entry: java.util.HashMap$Entry next>;
        goto label1;

     label3:
        i0 = i0 + 1;
        goto label0;

     label4:
        return 0;
    }

    public java.lang.Object clone()
    {
        java.util.HashMap r0, r1;
        java.lang.CloneNotSupportedException r2, $r5;
        java.util.HashMap$Entry[] $r3, $r6, $r7;
        java.lang.Object $r4;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @this: java.util.HashMap;
        r1 = null;

     label0:
        $r4 = specialinvoke r0.<java.util.AbstractMap: java.lang.Object clone()>();
        r1 = (java.util.HashMap) $r4;

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r2 = $r5;

     label3:
        $r6 = r1.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $r3 = <java.util.HashMap: java.util.HashMap$Entry[] EMPTY_TABLE>;
        if $r6 == $r3 goto label4;

        $i0 = r0.<java.util.HashMap: int size>;
        $f0 = (float) $i0;
        $f1 = r0.<java.util.HashMap: float loadFactor>;
        $f2 = 1.0F / $f1;
        $f3 = staticinvoke <java.lang.Math: float min(float,float)>($f2, 4.0F);
        $f4 = $f0 * $f3;
        $f5 = staticinvoke <java.lang.Math: float min(float,float)>($f4, 1.07374182E9F);
        $i1 = (int) $f5;
        $r7 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $i2 = lengthof $r7;
        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);
        specialinvoke r1.<java.util.HashMap: void inflateTable(int)>($i3);

     label4:
        r1.<java.util.HashMap: java.util.Set entrySet> = null;
        r1.<java.util.HashMap: int modCount> = 0;
        r1.<java.util.HashMap: int size> = 0;
        virtualinvoke r1.<java.util.HashMap: void init()>();
        specialinvoke r1.<java.util.HashMap: void putAllForCreate(java.util.Map)>(r0);
        return r1;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    void addEntry(int, java.lang.Object, java.lang.Object, int)
    {
        java.util.HashMap r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object r1, r2;
        java.util.HashMap$Entry[] $r3, $r5, $r6;
        java.util.HashMap$Entry $r4;

        r0 := @this: java.util.HashMap;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.lang.Object;
        i1 := @parameter3: int;
        $i2 = r0.<java.util.HashMap: int size>;
        $i3 = r0.<java.util.HashMap: int threshold>;
        if $i2 < $i3 goto label2;

        $r3 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $r4 = $r3[i1];
        if null == $r4 goto label2;

        $r5 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $i4 = lengthof $r5;
        $i5 = 2 * $i4;
        virtualinvoke r0.<java.util.HashMap: void resize(int)>($i5);
        if null == r1 goto label0;

        $i6 = virtualinvoke r0.<java.util.HashMap: int hash(java.lang.Object)>(r1);
        goto label1;

     label0:
        $i6 = 0;

     label1:
        i0 = $i6;
        $r6 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $i7 = lengthof $r6;
        i1 = staticinvoke <java.util.HashMap: int indexFor(int,int)>(i0, $i7);

     label2:
        virtualinvoke r0.<java.util.HashMap: void createEntry(int,java.lang.Object,java.lang.Object,int)>(i0, r1, r2, i1);
        return;
    }

    void createEntry(int, java.lang.Object, java.lang.Object, int)
    {
        java.util.HashMap r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r1, r2;
        java.util.HashMap$Entry r3, $r4;
        java.util.HashMap$Entry[] $r5, $r6;

        r0 := @this: java.util.HashMap;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.lang.Object;
        i1 := @parameter3: int;
        $r5 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        r3 = $r5[i1];
        $r6 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $r4 = new java.util.HashMap$Entry;
        specialinvoke $r4.<java.util.HashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Entry)>(i0, r1, r2, r3);
        $r6[i1] = $r4;
        $i2 = r0.<java.util.HashMap: int size>;
        $i3 = $i2 + 1;
        r0.<java.util.HashMap: int size> = $i3;
        return;
    }

    java.util.Iterator newKeyIterator()
    {
        java.util.HashMap r0;
        java.util.HashMap$KeyIterator $r1;

        r0 := @this: java.util.HashMap;
        $r1 = new java.util.HashMap$KeyIterator;
        specialinvoke $r1.<java.util.HashMap$KeyIterator: void <init>(java.util.HashMap,java.util.HashMap$1)>(r0, null);
        return $r1;
    }

    java.util.Iterator newValueIterator()
    {
        java.util.HashMap r0;
        java.util.HashMap$ValueIterator $r1;

        r0 := @this: java.util.HashMap;
        $r1 = new java.util.HashMap$ValueIterator;
        specialinvoke $r1.<java.util.HashMap$ValueIterator: void <init>(java.util.HashMap,java.util.HashMap$1)>(r0, null);
        return $r1;
    }

    java.util.Iterator newEntryIterator()
    {
        java.util.HashMap r0;
        java.util.HashMap$EntryIterator $r1;

        r0 := @this: java.util.HashMap;
        $r1 = new java.util.HashMap$EntryIterator;
        specialinvoke $r1.<java.util.HashMap$EntryIterator: void <init>(java.util.HashMap,java.util.HashMap$1)>(r0, null);
        return $r1;
    }

    public java.util.Set keySet()
    {
        java.util.HashMap r0;
        java.util.Set r1, $r3;
        java.util.HashMap$KeySet $r2;

        r0 := @this: java.util.HashMap;
        r1 = r0.<java.util.HashMap: java.util.Set keySet>;
        if r1 == null goto label0;

        $r3 = r1;
        goto label1;

     label0:
        $r2 = new java.util.HashMap$KeySet;
        specialinvoke $r2.<java.util.HashMap$KeySet: void <init>(java.util.HashMap,java.util.HashMap$1)>(r0, null);
        $r3 = $r2;
        r0.<java.util.HashMap: java.util.Set keySet> = $r2;

     label1:
        return $r3;
    }

    public java.util.Collection values()
    {
        java.util.HashMap r0;
        java.util.Collection r1, $r3;
        java.util.HashMap$Values $r2;

        r0 := @this: java.util.HashMap;
        r1 = r0.<java.util.HashMap: java.util.Collection values>;
        if r1 == null goto label0;

        $r3 = r1;
        goto label1;

     label0:
        $r2 = new java.util.HashMap$Values;
        specialinvoke $r2.<java.util.HashMap$Values: void <init>(java.util.HashMap,java.util.HashMap$1)>(r0, null);
        $r3 = $r2;
        r0.<java.util.HashMap: java.util.Collection values> = $r2;

     label1:
        return $r3;
    }

    public java.util.Set entrySet()
    {
        java.util.HashMap r0;
        java.util.Set $r1;

        r0 := @this: java.util.HashMap;
        $r1 = specialinvoke r0.<java.util.HashMap: java.util.Set entrySet0()>();
        return $r1;
    }

    private java.util.Set entrySet0()
    {
        java.util.HashMap r0;
        java.util.Set r1, $r3;
        java.util.HashMap$EntrySet $r2;

        r0 := @this: java.util.HashMap;
        r1 = r0.<java.util.HashMap: java.util.Set entrySet>;
        if r1 == null goto label0;

        $r3 = r1;
        goto label1;

     label0:
        $r2 = new java.util.HashMap$EntrySet;
        specialinvoke $r2.<java.util.HashMap$EntrySet: void <init>(java.util.HashMap,java.util.HashMap$1)>(r0, null);
        $r3 = $r2;
        r0.<java.util.HashMap: java.util.Set entrySet> = $r2;

     label1:
        return $r3;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.HashMap r0;
        java.io.ObjectOutputStream r1;
        java.util.HashMap$Entry[] $r2, $r5, $r6;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.Set $r7;
        boolean $z0;
        java.lang.Object $r8, $r9, $r10;

        r0 := @this: java.util.HashMap;
        r1 := @parameter0: java.io.ObjectOutputStream;
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        $r5 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $r2 = <java.util.HashMap: java.util.HashMap$Entry[] EMPTY_TABLE>;
        if $r5 != $r2 goto label0;

        $i0 = r0.<java.util.HashMap: int threshold>;
        $i1 = staticinvoke <java.util.HashMap: int roundUpToPowerOf2(int)>($i0);
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i1);
        goto label1;

     label0:
        $r6 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $i2 = lengthof $r6;
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i2);

     label1:
        $i3 = r0.<java.util.HashMap: int size>;
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i3);
        $i4 = r0.<java.util.HashMap: int size>;
        if $i4 <= 0 goto label3;

        $r7 = specialinvoke r0.<java.util.HashMap: java.util.Set entrySet0()>();
        r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.util.Map$Entry) $r8;
        $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r9);
        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r10);
        goto label2;

     label3:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.HashMap r0;
        java.io.ObjectInputStream r1;
        java.lang.StringBuilder $r2, $r6, $r7, $r12, $r13, $r14;
        int i0, i1, i2;
        java.lang.Object r3, r4;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        byte $b3;
        boolean $z0;
        java.io.InvalidObjectException $r5, $r11;
        java.lang.String $r8, $r15;
        java.util.HashMap$Entry[] $r9, $r10;

        r0 := @this: java.util.HashMap;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        $f0 = r0.<java.util.HashMap: float loadFactor>;
        $b3 = $f0 cmpg 0.0F;
        if $b3 <= 0 goto label0;

        $f1 = r0.<java.util.HashMap: float loadFactor>;
        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f1);
        if $z0 == 0 goto label1;

     label0:
        $r5 = new java.io.InvalidObjectException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal load factor: ");
        $f2 = r0.<java.util.HashMap: float loadFactor>;
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.io.InvalidObjectException: void <init>(java.lang.String)>($r8);
        throw $r5;

     label1:
        $r9 = <java.util.HashMap: java.util.HashMap$Entry[] EMPTY_TABLE>;
        $r10 = (java.util.HashMap$Entry[]) $r9;
        r0.<java.util.HashMap: java.util.HashMap$Entry[] table> = $r10;
        virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();
        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();
        if i0 >= 0 goto label2;

        $r11 = new java.io.InvalidObjectException;
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal mappings count: ");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r11.<java.io.InvalidObjectException: void <init>(java.lang.String)>($r15);
        throw $r11;

     label2:
        $f3 = (float) i0;
        $f4 = r0.<java.util.HashMap: float loadFactor>;
        $f5 = 1.0F / $f4;
        $f6 = staticinvoke <java.lang.Math: float min(float,float)>($f5, 4.0F);
        $f7 = $f3 * $f6;
        $f8 = staticinvoke <java.lang.Math: float min(float,float)>($f7, 1.07374182E9F);
        i1 = (int) $f8;
        if i0 <= 0 goto label3;

        specialinvoke r0.<java.util.HashMap: void inflateTable(int)>(i1);
        goto label4;

     label3:
        r0.<java.util.HashMap: int threshold> = i1;

     label4:
        virtualinvoke r0.<java.util.HashMap: void init()>();
        i2 = 0;

     label5:
        if i2 >= i0 goto label6;

        r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        r4 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        specialinvoke r0.<java.util.HashMap: void putForCreate(java.lang.Object,java.lang.Object)>(r3, r4);
        i2 = i2 + 1;
        goto label5;

     label6:
        return;
    }

    int capacity()
    {
        java.util.HashMap r0;
        java.util.HashMap$Entry[] $r1;
        int $i0;

        r0 := @this: java.util.HashMap;
        $r1 = r0.<java.util.HashMap: java.util.HashMap$Entry[] table>;
        $i0 = lengthof $r1;
        return $i0;
    }

    float loadFactor()
    {
        java.util.HashMap r0;
        float $f0;

        r0 := @this: java.util.HashMap;
        $f0 = r0.<java.util.HashMap: float loadFactor>;
        return $f0;
    }

    static void <clinit>()
    {
        java.util.HashMap$Entry[] $r0;

        $r0 = newarray (java.util.HashMap$Entry)[0];
        <java.util.HashMap: java.util.HashMap$Entry[] EMPTY_TABLE> = $r0;
        return;
    }
}
