class java.lang.ClassValue$Version extends java.lang.Object
{
    private final java.lang.ClassValue classValue;
    private final java.lang.ClassValue$Entry promise;

    void <init>(java.lang.ClassValue)
    {
        java.lang.ClassValue$Version r0;
        java.lang.ClassValue r1;
        java.lang.ClassValue$Entry $r2;

        r0 := @this: java.lang.ClassValue$Version;
        r1 := @parameter0: java.lang.ClassValue;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = new java.lang.ClassValue$Entry;
        specialinvoke $r2.<java.lang.ClassValue$Entry: void <init>(java.lang.ClassValue$Version)>(r0);
        r0.<java.lang.ClassValue$Version: java.lang.ClassValue$Entry promise> = $r2;
        r0.<java.lang.ClassValue$Version: java.lang.ClassValue classValue> = r1;
        return;
    }

    java.lang.ClassValue classValue()
    {
        java.lang.ClassValue$Version r0;
        java.lang.ClassValue $r1;

        r0 := @this: java.lang.ClassValue$Version;
        $r1 = r0.<java.lang.ClassValue$Version: java.lang.ClassValue classValue>;
        return $r1;
    }

    java.lang.ClassValue$Entry promise()
    {
        java.lang.ClassValue$Version r0;
        java.lang.ClassValue$Entry $r1;

        r0 := @this: java.lang.ClassValue$Version;
        $r1 = r0.<java.lang.ClassValue$Version: java.lang.ClassValue$Entry promise>;
        return $r1;
    }

    boolean isLive()
    {
        java.lang.ClassValue$Version r0, $r2;
        java.lang.ClassValue $r1;
        boolean $z0;

        r0 := @this: java.lang.ClassValue$Version;
        $r1 = r0.<java.lang.ClassValue$Version: java.lang.ClassValue classValue>;
        $r2 = virtualinvoke $r1.<java.lang.ClassValue: java.lang.ClassValue$Version version()>();
        if $r2 != r0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }
}
