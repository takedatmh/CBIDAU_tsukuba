public class sun.util.logging.LoggingSupport extends java.lang.Object
{
    private static final sun.util.logging.LoggingProxy proxy;
    private static final java.lang.String DEFAULT_FORMAT;
    private static final java.lang.String FORMAT_PROP_KEY;

    private void <init>()
    {
        sun.util.logging.LoggingSupport r0;

        r0 := @this: sun.util.logging.LoggingSupport;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static boolean isAvailable()
    {
        sun.util.logging.LoggingProxy $r0;
        boolean $z0;

        $r0 = <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy>;
        if $r0 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private static void ensureAvailable()
    {
        sun.util.logging.LoggingProxy $r0;
        java.lang.AssertionError $r1;

        $r0 = <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy>;
        if $r0 != null goto label0;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("Should not here");
        throw $r1;

     label0:
        return;
    }

    public static java.util.List getLoggerNames()
    {
        sun.util.logging.LoggingProxy $r0;
        java.util.List $r1;

        staticinvoke <sun.util.logging.LoggingSupport: void ensureAvailable()>();
        $r0 = <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy>;
        $r1 = interfaceinvoke $r0.<sun.util.logging.LoggingProxy: java.util.List getLoggerNames()>();
        return $r1;
    }

    public static java.lang.String getLoggerLevel(java.lang.String)
    {
        java.lang.String r0, $r2;
        sun.util.logging.LoggingProxy $r1;

        r0 := @parameter0: java.lang.String;
        staticinvoke <sun.util.logging.LoggingSupport: void ensureAvailable()>();
        $r1 = <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy>;
        $r2 = interfaceinvoke $r1.<sun.util.logging.LoggingProxy: java.lang.String getLoggerLevel(java.lang.String)>(r0);
        return $r2;
    }

    public static void setLoggerLevel(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        sun.util.logging.LoggingProxy $r2;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        staticinvoke <sun.util.logging.LoggingSupport: void ensureAvailable()>();
        $r2 = <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy>;
        interfaceinvoke $r2.<sun.util.logging.LoggingProxy: void setLoggerLevel(java.lang.String,java.lang.String)>(r0, r1);
        return;
    }

    public static java.lang.String getParentLoggerName(java.lang.String)
    {
        java.lang.String r0, $r2;
        sun.util.logging.LoggingProxy $r1;

        r0 := @parameter0: java.lang.String;
        staticinvoke <sun.util.logging.LoggingSupport: void ensureAvailable()>();
        $r1 = <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy>;
        $r2 = interfaceinvoke $r1.<sun.util.logging.LoggingProxy: java.lang.String getParentLoggerName(java.lang.String)>(r0);
        return $r2;
    }

    public static java.lang.Object getLogger(java.lang.String)
    {
        java.lang.String r0;
        sun.util.logging.LoggingProxy $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.String;
        staticinvoke <sun.util.logging.LoggingSupport: void ensureAvailable()>();
        $r1 = <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy>;
        $r2 = interfaceinvoke $r1.<sun.util.logging.LoggingProxy: java.lang.Object getLogger(java.lang.String)>(r0);
        return $r2;
    }

    public static java.lang.Object getLevel(java.lang.Object)
    {
        java.lang.Object r0, $r2;
        sun.util.logging.LoggingProxy $r1;

        r0 := @parameter0: java.lang.Object;
        staticinvoke <sun.util.logging.LoggingSupport: void ensureAvailable()>();
        $r1 = <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy>;
        $r2 = interfaceinvoke $r1.<sun.util.logging.LoggingProxy: java.lang.Object getLevel(java.lang.Object)>(r0);
        return $r2;
    }

    public static void setLevel(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        sun.util.logging.LoggingProxy $r2;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        staticinvoke <sun.util.logging.LoggingSupport: void ensureAvailable()>();
        $r2 = <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy>;
        interfaceinvoke $r2.<sun.util.logging.LoggingProxy: void setLevel(java.lang.Object,java.lang.Object)>(r0, r1);
        return;
    }

    public static boolean isLoggable(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        sun.util.logging.LoggingProxy $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        staticinvoke <sun.util.logging.LoggingSupport: void ensureAvailable()>();
        $r2 = <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy>;
        $z0 = interfaceinvoke $r2.<sun.util.logging.LoggingProxy: boolean isLoggable(java.lang.Object,java.lang.Object)>(r0, r1);
        return $z0;
    }

    public static void log(java.lang.Object, java.lang.Object, java.lang.String)
    {
        java.lang.Object r0, r1;
        java.lang.String r2;
        sun.util.logging.LoggingProxy $r3;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.lang.String;
        staticinvoke <sun.util.logging.LoggingSupport: void ensureAvailable()>();
        $r3 = <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy>;
        interfaceinvoke $r3.<sun.util.logging.LoggingProxy: void log(java.lang.Object,java.lang.Object,java.lang.String)>(r0, r1, r2);
        return;
    }

    public static void log(java.lang.Object, java.lang.Object, java.lang.String, java.lang.Throwable)
    {
        java.lang.Object r0, r1;
        java.lang.String r2;
        java.lang.Throwable r3;
        sun.util.logging.LoggingProxy $r4;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.lang.String;
        r3 := @parameter3: java.lang.Throwable;
        staticinvoke <sun.util.logging.LoggingSupport: void ensureAvailable()>();
        $r4 = <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy>;
        interfaceinvoke $r4.<sun.util.logging.LoggingProxy: void log(java.lang.Object,java.lang.Object,java.lang.String,java.lang.Throwable)>(r0, r1, r2, r3);
        return;
    }

    public static transient void log(java.lang.Object, java.lang.Object, java.lang.String, java.lang.Object[])
    {
        java.lang.Object r0, r1;
        java.lang.String r2;
        java.lang.Object[] r3;
        sun.util.logging.LoggingProxy $r4;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.lang.String;
        r3 := @parameter3: java.lang.Object[];
        staticinvoke <sun.util.logging.LoggingSupport: void ensureAvailable()>();
        $r4 = <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy>;
        interfaceinvoke $r4.<sun.util.logging.LoggingProxy: void log(java.lang.Object,java.lang.Object,java.lang.String,java.lang.Object[])>(r0, r1, r2, r3);
        return;
    }

    public static java.lang.Object parseLevel(java.lang.String)
    {
        java.lang.String r0;
        sun.util.logging.LoggingProxy $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.String;
        staticinvoke <sun.util.logging.LoggingSupport: void ensureAvailable()>();
        $r1 = <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy>;
        $r2 = interfaceinvoke $r1.<sun.util.logging.LoggingProxy: java.lang.Object parseLevel(java.lang.String)>(r0);
        return $r2;
    }

    public static java.lang.String getLevelName(java.lang.Object)
    {
        java.lang.Object r0;
        sun.util.logging.LoggingProxy $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.Object;
        staticinvoke <sun.util.logging.LoggingSupport: void ensureAvailable()>();
        $r1 = <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy>;
        $r2 = interfaceinvoke $r1.<sun.util.logging.LoggingProxy: java.lang.String getLevelName(java.lang.Object)>(r0);
        return $r2;
    }

    public static int getLevelValue(java.lang.Object)
    {
        java.lang.Object r0;
        sun.util.logging.LoggingProxy $r1;
        int $i0;

        r0 := @parameter0: java.lang.Object;
        staticinvoke <sun.util.logging.LoggingSupport: void ensureAvailable()>();
        $r1 = <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy>;
        $i0 = interfaceinvoke $r1.<sun.util.logging.LoggingProxy: int getLevelValue(java.lang.Object)>(r0);
        return $i0;
    }

    public static java.lang.String getSimpleFormat()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <sun.util.logging.LoggingSupport: java.lang.String getSimpleFormat(boolean)>(1);
        return $r0;
    }

    static java.lang.String getSimpleFormat(boolean)
    {
        boolean z0;
        sun.util.logging.LoggingSupport$2 $r0;
        java.lang.String r1;
        java.util.Date $r2;
        java.lang.IllegalArgumentException r3, $r9;
        java.lang.Object $r4;
        sun.util.logging.LoggingProxy $r5, $r6;
        java.lang.Object[] $r7;

        z0 := @parameter0: boolean;
        $r0 = new sun.util.logging.LoggingSupport$2;
        specialinvoke $r0.<sun.util.logging.LoggingSupport$2: void <init>()>();
        $r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        r1 = (java.lang.String) $r4;
        if z0 == 0 goto label0;

        $r5 = <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy>;
        if $r5 == null goto label0;

        if r1 != null goto label0;

        $r6 = <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy>;
        r1 = interfaceinvoke $r6.<sun.util.logging.LoggingProxy: java.lang.String getProperty(java.lang.String)>("java.util.logging.SimpleFormatter.format");

     label0:
        if r1 == null goto label4;

     label1:
        $r7 = newarray (java.lang.Object)[6];
        $r2 = new java.util.Date;
        specialinvoke $r2.<java.util.Date: void <init>()>();
        $r7[0] = $r2;
        $r7[1] = "";
        $r7[2] = "";
        $r7[3] = "";
        $r7[4] = "";
        $r7[5] = "";
        staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r7);

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;
        r3 = $r9;
        r1 = "%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s%n%4$s: %5$s%6$s%n";
        goto label5;

     label4:
        r1 = "%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s%n%4$s: %5$s%6$s%n";

     label5:
        return r1;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        sun.util.logging.LoggingSupport$1 $r0;
        java.lang.Object $r1;
        sun.util.logging.LoggingProxy $r2;

        $r0 = new sun.util.logging.LoggingSupport$1;
        specialinvoke $r0.<sun.util.logging.LoggingSupport$1: void <init>()>();
        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        $r2 = (sun.util.logging.LoggingProxy) $r1;
        <sun.util.logging.LoggingSupport: sun.util.logging.LoggingProxy proxy> = $r2;
        return;
    }
}
