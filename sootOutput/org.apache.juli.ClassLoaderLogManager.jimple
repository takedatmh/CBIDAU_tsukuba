public class org.apache.juli.ClassLoaderLogManager extends java.util.logging.LogManager
{
    private static final boolean isJava9;
    private static java.lang.ThreadLocal addingLocalRootLogger;
    public static final java.lang.String DEBUG_PROPERTY;
    protected final java.util.Map classLoaderLoggers;
    protected java.lang.ThreadLocal prefix;
    protected volatile boolean useShutdownHook;

    static void <clinit>()
    {
        org.apache.juli.ClassLoaderLogManager$1 $r0;
        java.lang.Class $r1, r2;
        java.lang.ClassNotFoundException r3, $r9;
        java.lang.StringBuilder $r4, $r7;
        java.lang.String $r5, $r6, $r8;
        boolean $z0;

        $r0 = new org.apache.juli.ClassLoaderLogManager$1;
        specialinvoke $r0.<org.apache.juli.ClassLoaderLogManager$1: void <init>()>();
        <org.apache.juli.ClassLoaderLogManager: java.lang.ThreadLocal addingLocalRootLogger> = $r0;
        $r4 = new java.lang.StringBuilder;
        $r1 = class "org/apache/juli/ClassLoaderLogManager";
        $r5 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();
        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);
        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".debug");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        <org.apache.juli.ClassLoaderLogManager: java.lang.String DEBUG_PROPERTY> = $r8;
        r2 = null;

     label0:
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.lang.Runtime$Version");

     label1:
        goto label3;

     label2:
        $r9 := @caughtexception;
        r3 = $r9;

     label3:
        if r2 == null goto label4;

        $z0 = 1;
        goto label5;

     label4:
        $z0 = 0;

     label5:
        <org.apache.juli.ClassLoaderLogManager: boolean isJava9> = $z0;
        return;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    public void <init>()
    {
        org.apache.juli.ClassLoaderLogManager r0;
        java.util.WeakHashMap $r1;
        java.lang.IllegalStateException r2, $r6;
        java.lang.ThreadLocal $r3;
        java.lang.Runtime $r4;
        org.apache.juli.ClassLoaderLogManager$Cleaner $r5;

        r0 := @this: org.apache.juli.ClassLoaderLogManager;
        specialinvoke r0.<java.util.logging.LogManager: void <init>()>();
        $r1 = new java.util.WeakHashMap;
        specialinvoke $r1.<java.util.WeakHashMap: void <init>()>();
        r0.<org.apache.juli.ClassLoaderLogManager: java.util.Map classLoaderLoggers> = $r1;
        $r3 = new java.lang.ThreadLocal;
        specialinvoke $r3.<java.lang.ThreadLocal: void <init>()>();
        r0.<org.apache.juli.ClassLoaderLogManager: java.lang.ThreadLocal prefix> = $r3;
        r0.<org.apache.juli.ClassLoaderLogManager: boolean useShutdownHook> = 1;

     label0:
        $r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
        $r5 = new org.apache.juli.ClassLoaderLogManager$Cleaner;
        specialinvoke $r5.<org.apache.juli.ClassLoaderLogManager$Cleaner: void <init>(org.apache.juli.ClassLoaderLogManager,org.apache.juli.ClassLoaderLogManager$Cleaner)>(r0, null);
        virtualinvoke $r4.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r5);

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;

     label3:
        return;

        catch java.lang.IllegalStateException from label0 to label1 with label2;
    }

    public boolean isUseShutdownHook()
    {
        org.apache.juli.ClassLoaderLogManager r0;
        boolean $z0;

        r0 := @this: org.apache.juli.ClassLoaderLogManager;
        $z0 = r0.<org.apache.juli.ClassLoaderLogManager: boolean useShutdownHook>;
        return $z0;
    }

    public void setUseShutdownHook(boolean)
    {
        org.apache.juli.ClassLoaderLogManager r0;
        boolean z0;

        r0 := @this: org.apache.juli.ClassLoaderLogManager;
        z0 := @parameter0: boolean;
        r0.<org.apache.juli.ClassLoaderLogManager: boolean useShutdownHook> = z0;
        return;
    }

    public synchronized boolean addLogger(java.util.logging.Logger)
    {
        org.apache.juli.ClassLoaderLogManager r0;
        java.util.logging.Logger r1, r8;
        java.lang.String r2, r5, r7, r9, r11, $r19, $r21, $r29, $r31, $r33, $r40, $r42, r43;
        java.lang.ClassLoader r3, r13;
        org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo r4, r36;
        java.lang.IllegalArgumentException r6, $r24;
        java.util.StringTokenizer r10, $r32;
        java.util.logging.Handler r12;
        java.lang.Thread $r14;
        java.util.Map $r15, $r16, $r34, $r37;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r18, $r20, $r28, $r30, $r39, $r41;
        org.apache.juli.ClassLoaderLogManager$2 $r22;
        int i0;
        org.apache.juli.ClassLoaderLogManager$LogNode $r26, r27;
        java.lang.Object $r35, $r38;

        r0 := @this: org.apache.juli.ClassLoaderLogManager;
        r1 := @parameter0: java.util.logging.Logger;
        r2 = virtualinvoke r1.<java.util.logging.Logger: java.lang.String getName()>();
        $r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r3 = virtualinvoke $r14.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
        r4 = virtualinvoke r0.<org.apache.juli.ClassLoaderLogManager: org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)>(r3);
        $r15 = r4.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: java.util.Map loggers>;
        $z0 = interfaceinvoke $r15.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);
        if $z0 == 0 goto label0;

        return 0;

     label0:
        $r16 = r4.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: java.util.Map loggers>;
        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);
        $r18 = new java.lang.StringBuilder;
        $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);
        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>($r19);
        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".level");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        r5 = virtualinvoke r0.<org.apache.juli.ClassLoaderLogManager: java.lang.String getProperty(java.lang.String)>($r21);
        if r5 == null goto label4;

     label1:
        $r22 = new org.apache.juli.ClassLoaderLogManager$2;
        specialinvoke $r22.<org.apache.juli.ClassLoaderLogManager$2: void <init>(org.apache.juli.ClassLoaderLogManager,java.util.logging.Logger,java.lang.String)>(r0, r1, r5);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r22);

     label2:
        goto label4;

     label3:
        $r24 := @caughtexception;
        r6 = $r24;

     label4:
        i0 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int)>(46);
        if i0 < 0 goto label5;

        r7 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(r7);

     label5:
        $r26 = r4.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: org.apache.juli.ClassLoaderLogManager$LogNode rootNode>;
        r27 = virtualinvoke $r26.<org.apache.juli.ClassLoaderLogManager$LogNode: org.apache.juli.ClassLoaderLogManager$LogNode findNode(java.lang.String)>(r2);
        r27.<org.apache.juli.ClassLoaderLogManager$LogNode: java.util.logging.Logger logger> = r1;
        r8 = virtualinvoke r27.<org.apache.juli.ClassLoaderLogManager$LogNode: java.util.logging.Logger findParentLogger()>();
        if r8 == null goto label6;

        staticinvoke <org.apache.juli.ClassLoaderLogManager: void doSetParentLogger(java.util.logging.Logger,java.util.logging.Logger)>(r1, r8);

     label6:
        virtualinvoke r27.<org.apache.juli.ClassLoaderLogManager$LogNode: void setParentLogger(java.util.logging.Logger)>(r1);
        $r28 = new java.lang.StringBuilder;
        $r29 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);
        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>($r29);
        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".handlers");
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();
        r9 = virtualinvoke r0.<org.apache.juli.ClassLoaderLogManager: java.lang.String getProperty(java.lang.String)>($r31);
        if r9 == null goto label13;

        virtualinvoke r1.<java.util.logging.Logger: void setUseParentHandlers(boolean)>(0);
        $r32 = new java.util.StringTokenizer;
        specialinvoke $r32.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r9, ",");
        r10 = $r32;
        goto label12;

     label7:
        $r33 = virtualinvoke r10.<java.util.StringTokenizer: java.lang.String nextToken()>();
        r11 = virtualinvoke $r33.<java.lang.String: java.lang.String trim()>();
        r12 = null;
        r13 = r3;
        goto label10;

     label8:
        $r34 = r0.<org.apache.juli.ClassLoaderLogManager: java.util.Map classLoaderLoggers>;
        $r35 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13);
        r36 = (org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo) $r35;
        if r36 == null goto label9;

        $r37 = r36.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: java.util.Map handlers>;
        $r38 = interfaceinvoke $r37.<java.util.Map: java.lang.Object get(java.lang.Object)>(r11);
        r12 = (java.util.logging.Handler) $r38;
        if r12 == null goto label9;

        goto label11;

     label9:
        r13 = virtualinvoke r13.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

     label10:
        if r13 != null goto label8;

     label11:
        if r12 == null goto label12;

        virtualinvoke r1.<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>(r12);

     label12:
        $z1 = virtualinvoke r10.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z1 != 0 goto label7;

     label13:
        $r39 = new java.lang.StringBuilder;
        $r40 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);
        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>($r40);
        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".useParentHandlers");
        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();
        r43 = virtualinvoke r0.<org.apache.juli.ClassLoaderLogManager: java.lang.String getProperty(java.lang.String)>($r42);
        $z2 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r43);
        if $z2 == 0 goto label14;

        virtualinvoke r1.<java.util.logging.Logger: void setUseParentHandlers(boolean)>(1);

     label14:
        return 1;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public synchronized java.util.logging.Logger getLogger(java.lang.String)
    {
        org.apache.juli.ClassLoaderLogManager r0;
        java.lang.String r1;
        java.lang.Thread $r2;
        java.lang.ClassLoader r3;
        org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo $r4;
        java.util.Map $r5;
        java.lang.Object $r6;
        java.util.logging.Logger $r7;

        r0 := @this: org.apache.juli.ClassLoaderLogManager;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r3 = virtualinvoke $r2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
        $r4 = virtualinvoke r0.<org.apache.juli.ClassLoaderLogManager: org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)>(r3);
        $r5 = $r4.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: java.util.Map loggers>;
        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        $r7 = (java.util.logging.Logger) $r6;
        return $r7;
    }

    public synchronized java.util.Enumeration getLoggerNames()
    {
        org.apache.juli.ClassLoaderLogManager r0;
        java.lang.Thread $r1;
        java.lang.ClassLoader r2;
        org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo $r3;
        java.util.Map $r4;
        java.util.Set $r5;
        java.util.Enumeration $r6;

        r0 := @this: org.apache.juli.ClassLoaderLogManager;
        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r2 = virtualinvoke $r1.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
        $r3 = virtualinvoke r0.<org.apache.juli.ClassLoaderLogManager: org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)>(r2);
        $r4 = $r3.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: java.util.Map loggers>;
        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();
        $r6 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>($r5);
        return $r6;
    }

    public java.lang.String getProperty(java.lang.String)
    {
        org.apache.juli.ClassLoaderLogManager r0;
        java.lang.String r1, $r2, r3, r4, $r11, $r13;
        boolean $z0, $z1;
        java.lang.ThreadLocal $r5, $r8;
        java.lang.Object $r6, $r9;
        java.lang.Boolean $r7;
        java.lang.StringBuilder $r10, $r12;

        r0 := @this: org.apache.juli.ClassLoaderLogManager;
        r1 := @parameter0: java.lang.String;
        $r2 = ".handlers";
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z0 == 0 goto label0;

        $r5 = <org.apache.juli.ClassLoaderLogManager: java.lang.ThreadLocal addingLocalRootLogger>;
        $r6 = virtualinvoke $r5.<java.lang.ThreadLocal: java.lang.Object get()>();
        $r7 = (java.lang.Boolean) $r6;
        $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();
        if $z1 != 0 goto label0;

        return null;

     label0:
        $r8 = r0.<org.apache.juli.ClassLoaderLogManager: java.lang.ThreadLocal prefix>;
        $r9 = virtualinvoke $r8.<java.lang.ThreadLocal: java.lang.Object get()>();
        r3 = (java.lang.String) $r9;
        r4 = null;
        if r3 == null goto label1;

        $r10 = new java.lang.StringBuilder;
        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);
        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>($r11);
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        r4 = specialinvoke r0.<org.apache.juli.ClassLoaderLogManager: java.lang.String findProperty(java.lang.String)>($r13);

     label1:
        if r4 != null goto label2;

        r4 = specialinvoke r0.<org.apache.juli.ClassLoaderLogManager: java.lang.String findProperty(java.lang.String)>(r1);

     label2:
        if r4 == null goto label3;

        r4 = virtualinvoke r0.<org.apache.juli.ClassLoaderLogManager: java.lang.String replace(java.lang.String)>(r4);

     label3:
        return r4;
    }

    private synchronized java.lang.String findProperty(java.lang.String)
    {
        org.apache.juli.ClassLoaderLogManager r0;
        java.lang.String r1, r5;
        java.lang.Thread $r2;
        java.lang.ClassLoader r3, r6;
        org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo r4, r11;
        java.util.Properties $r7, $r8, $r12, $r13;
        boolean $z0, $z1;
        java.util.Map $r9;
        java.lang.Object $r10;

        r0 := @this: org.apache.juli.ClassLoaderLogManager;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r3 = virtualinvoke $r2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
        r4 = virtualinvoke r0.<org.apache.juli.ClassLoaderLogManager: org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)>(r3);
        $r7 = r4.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: java.util.Properties props>;
        r5 = virtualinvoke $r7.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1);
        if r5 != null goto label4;

        $r8 = r4.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: java.util.Properties props>;
        $z0 = virtualinvoke $r8.<java.util.Properties: boolean isEmpty()>();
        if $z0 == 0 goto label4;

        r6 = virtualinvoke r3.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();
        goto label2;

     label0:
        $r9 = r0.<org.apache.juli.ClassLoaderLogManager: java.util.Map classLoaderLoggers>;
        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);
        r11 = (org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo) $r10;
        if r11 == null goto label1;

        $r12 = r11.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: java.util.Properties props>;
        r5 = virtualinvoke $r12.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1);
        if r5 != null goto label3;

        $r13 = r11.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: java.util.Properties props>;
        $z1 = virtualinvoke $r13.<java.util.Properties: boolean isEmpty()>();
        if $z1 != 0 goto label1;

        goto label3;

     label1:
        r6 = virtualinvoke r6.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

     label2:
        if r6 != null goto label0;

     label3:
        if r5 != null goto label4;

        r5 = specialinvoke r0.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>(r1);

     label4:
        return r5;
    }

    public void readConfiguration() throws java.io.IOException, java.lang.SecurityException
    {
        org.apache.juli.ClassLoaderLogManager r0;
        java.lang.Thread $r1;
        java.lang.ClassLoader $r2;

        r0 := @this: org.apache.juli.ClassLoaderLogManager;
        virtualinvoke r0.<org.apache.juli.ClassLoaderLogManager: void checkAccess()>();
        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $r2 = virtualinvoke $r1.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
        virtualinvoke r0.<org.apache.juli.ClassLoaderLogManager: void readConfiguration(java.lang.ClassLoader)>($r2);
        return;
    }

    public void readConfiguration(java.io.InputStream) throws java.io.IOException, java.lang.SecurityException
    {
        org.apache.juli.ClassLoaderLogManager r0;
        java.io.InputStream r1;
        java.lang.Thread $r2;
        java.lang.ClassLoader $r3;

        r0 := @this: org.apache.juli.ClassLoaderLogManager;
        r1 := @parameter0: java.io.InputStream;
        virtualinvoke r0.<org.apache.juli.ClassLoaderLogManager: void checkAccess()>();
        virtualinvoke r0.<org.apache.juli.ClassLoaderLogManager: void reset()>();
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $r3 = virtualinvoke $r2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
        virtualinvoke r0.<org.apache.juli.ClassLoaderLogManager: void readConfiguration(java.io.InputStream,java.lang.ClassLoader)>(r1, $r3);
        return;
    }

    public void reset() throws java.lang.SecurityException
    {
        org.apache.juli.ClassLoaderLogManager r0;
        java.lang.Thread r1;
        java.lang.ClassLoader r2;
        org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo r3;
        java.lang.Class $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.apache.juli.ClassLoaderLogManager;
        r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();
        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.logging.LogManager$");
        if $z0 == 0 goto label0;

        return;

     label0:
        r2 = virtualinvoke r1.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
        r3 = virtualinvoke r0.<org.apache.juli.ClassLoaderLogManager: org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)>(r2);
        specialinvoke r0.<org.apache.juli.ClassLoaderLogManager: void resetLoggers(org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo)>(r3);
        specialinvoke r0.<java.util.logging.LogManager: void reset()>();
        return;
    }

    public synchronized void shutdown()
    {
        org.apache.juli.ClassLoaderLogManager r0;
        java.util.Iterator r1;
        org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo r2;
        java.util.Map $r3;
        java.util.Collection $r4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.apache.juli.ClassLoaderLogManager;
        $r3 = r0.<org.apache.juli.ClassLoaderLogManager: java.util.Map classLoaderLoggers>;
        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();
        r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();
        goto label1;

     label0:
        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        r2 = (org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo) $r5;
        specialinvoke r0.<org.apache.juli.ClassLoaderLogManager: void resetLoggers(org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo)>(r2);

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z0 != 0 goto label0;

        return;
    }

    private void resetLoggers(org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo)
    {
        org.apache.juli.ClassLoaderLogManager r0;
        org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo r1, r3;
        java.util.Iterator r4, r15;
        java.util.logging.Logger r5;
        java.util.logging.Handler[] r6, r7;
        int i0, i1;
        java.util.logging.Handler r8, r17;
        java.util.Map $r9, $r13, $r20;
        java.util.Collection $r10, $r14;
        java.lang.Object $r11, $r16;
        boolean $z0, $z1;
        java.lang.Exception $r18, r19;
        java.lang.Throwable $r21;

        r0 := @this: org.apache.juli.ClassLoaderLogManager;
        r1 := @parameter0: org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo;
        r3 = r1;
        entermonitor r1;

     label0:
        $r9 = r1.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: java.util.Map loggers>;
        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Collection values()>();
        r4 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();
        goto label4;

     label1:
        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.util.logging.Logger) $r11;
        r6 = virtualinvoke r5.<java.util.logging.Logger: java.util.logging.Handler[] getHandlers()>();
        r7 = r6;
        i0 = lengthof r6;
        i1 = 0;
        goto label3;

     label2:
        r8 = r7[i1];
        virtualinvoke r5.<java.util.logging.Logger: void removeHandler(java.util.logging.Handler)>(r8);
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label2;

     label4:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z0 != 0 goto label1;

        $r13 = r1.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: java.util.Map handlers>;
        $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Collection values()>();
        r15 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();
        goto label9;

     label5:
        $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();
        r17 = (java.util.logging.Handler) $r16;

     label6:
        virtualinvoke r17.<java.util.logging.Handler: void close()>();

     label7:
        goto label9;

     label8:
        $r18 := @caughtexception;
        r19 = $r18;

     label9:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();
        if $z1 != 0 goto label5;

        $r20 = r1.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: java.util.Map handlers>;
        interfaceinvoke $r20.<java.util.Map: void clear()>();
        exitmonitor r3;

     label10:
        goto label14;

     label11:
        $r21 := @caughtexception;

     label12:
        exitmonitor r3;

     label13:
        throw $r21;

     label14:
        return;

        catch java.lang.Exception from label6 to label7 with label8;
        catch java.lang.Throwable from label0 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    protected synchronized org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)
    {
        org.apache.juli.ClassLoaderLogManager r0;
        java.lang.ClassLoader r1, r3;
        org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo r2;
        java.util.Map $r4, $r8;
        java.lang.Object $r5, $r9;
        org.apache.juli.ClassLoaderLogManager$3 $r6;

        r0 := @this: org.apache.juli.ClassLoaderLogManager;
        r1 := @parameter0: java.lang.ClassLoader;
        if r1 != null goto label0;

        r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label0:
        $r4 = r0.<org.apache.juli.ClassLoaderLogManager: java.util.Map classLoaderLoggers>;
        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        r2 = (org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo) $r5;
        if r2 != null goto label1;

        r3 = r1;
        $r6 = new org.apache.juli.ClassLoaderLogManager$3;
        specialinvoke $r6.<org.apache.juli.ClassLoaderLogManager$3: void <init>(org.apache.juli.ClassLoaderLogManager,java.lang.ClassLoader)>(r0, r3);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r6);
        $r8 = r0.<org.apache.juli.ClassLoaderLogManager: java.util.Map classLoaderLoggers>;
        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        r2 = (org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo) $r9;

     label1:
        return r2;
    }

    protected synchronized void readConfiguration(java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.juli.ClassLoaderLogManager r0;
        java.lang.ClassLoader r1, $r30, $r44, r64;
        java.io.InputStream r2;
        java.net.URL r3;
        org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo r4, r65, $r68, r70;
        java.util.logging.Logger r5, $r67;
        java.security.Permission r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.net.URLClassLoader $r7;
        java.lang.String $r8, $r12, $r13, $r17, $r18, $r22, $r23, $r26, $r34, $r36, $r39, $r41, $r43, r45, $r47, $r55, $r56;
        java.io.PrintStream $r9, $r19, $r50, $r61;
        java.lang.StringBuilder $r10, $r14, $r15, $r16, $r20, $r24, $r25, $r35, $r37, $r38, $r40, $r42;
        java.lang.Class $r11, $r21;
        java.security.AccessControlException $r27, r28;
        java.util.Map $r29, $r32, $r71;
        java.lang.Object $r31, $r33;
        java.io.FileInputStream $r46, $r58;
        java.io.IOException $r48, r49, $r59, r60;
        java.io.File $r51, $r53, r57;
        org.apache.juli.ClassLoaderLogManager$RootLogger $r62, r63;
        org.apache.juli.ClassLoaderLogManager$LogNode $r66, $r69;
        java.lang.ThreadLocal $r73, $r77, $r79;
        java.lang.Boolean $r74, $r78, $r80;
        java.lang.Throwable $r75, r76;

        r0 := @this: org.apache.juli.ClassLoaderLogManager;
        r1 := @parameter0: java.lang.ClassLoader;
        r2 = null;

     label0:
        $z1 = r1 instanceof java.net.URLClassLoader;
        if $z1 == 0 goto label6;

        $r7 = (java.net.URLClassLoader) r1;
        r3 = virtualinvoke $r7.<java.net.URLClassLoader: java.net.URL findResource(java.lang.String)>("logging.properties");
        if r3 == null goto label2;

        $r8 = <org.apache.juli.ClassLoaderLogManager: java.lang.String DEBUG_PROPERTY>;
        $z2 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>($r8);
        if $z2 == 0 goto label1;

        $r9 = <java.lang.System: java.io.PrintStream err>;
        $r10 = new java.lang.StringBuilder;
        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();
        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);
        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13);
        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".readConfiguration(): ");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found logging.properties at ");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r17);

     label1:
        r2 = virtualinvoke r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("logging.properties");
        goto label6;

     label2:
        $r18 = <org.apache.juli.ClassLoaderLogManager: java.lang.String DEBUG_PROPERTY>;
        $z3 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>($r18);
        if $z3 == 0 goto label6;

        $r19 = <java.lang.System: java.io.PrintStream err>;
        $r20 = new java.lang.StringBuilder;
        $r21 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();
        $r23 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r22);
        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>($r23);
        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".readConfiguration(): ");
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found no logging.properties");
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r26);

     label3:
        goto label6;

     label4:
        $r27 := @caughtexception;
        r28 = $r27;
        $r29 = r0.<org.apache.juli.ClassLoaderLogManager: java.util.Map classLoaderLoggers>;
        $r30 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        $r31 = interfaceinvoke $r29.<java.util.Map: java.lang.Object get(java.lang.Object)>($r30);
        r4 = (org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo) $r31;
        if r4 == null goto label6;

        $r32 = r4.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: java.util.Map loggers>;
        $r33 = interfaceinvoke $r32.<java.util.Map: java.lang.Object get(java.lang.Object)>("");
        r5 = (java.util.logging.Logger) $r33;
        if r5 == null goto label6;

        r6 = virtualinvoke r28.<java.security.AccessControlException: java.security.Permission getPermission()>();
        $z4 = r6 instanceof java.io.FilePermission;
        if $z4 == 0 goto label5;

        $r34 = virtualinvoke r6.<java.security.Permission: java.lang.String getActions()>();
        $z5 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>("read");
        if $z5 == 0 goto label5;

        $r35 = new java.lang.StringBuilder;
        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>("Reading ");
        $r36 = virtualinvoke r6.<java.security.Permission: java.lang.String getName()>();
        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);
        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not permitted. See \"per context logging\" in the default catalina.policy file.");
        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r5.<java.util.logging.Logger: void warning(java.lang.String)>($r39);
        goto label6;

     label5:
        virtualinvoke r5.<java.util.logging.Logger: void warning(java.lang.String)>("Reading logging.properties is not permitted in some context. See \"per context logging\" in the default catalina.policy file.");
        $r40 = new java.lang.StringBuilder;
        specialinvoke $r40.<java.lang.StringBuilder: void <init>(java.lang.String)>("Original error was: ");
        $r41 = virtualinvoke r28.<java.security.AccessControlException: java.lang.String getMessage()>();
        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);
        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r5.<java.util.logging.Logger: void warning(java.lang.String)>($r43);

     label6:
        if r2 != null goto label16;

        $r44 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        if r1 != $r44 goto label16;

        r45 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.logging.config.file");
        if r45 == null goto label10;

     label7:
        $r46 = new java.io.FileInputStream;
        $r47 = virtualinvoke r0.<org.apache.juli.ClassLoaderLogManager: java.lang.String replace(java.lang.String)>(r45);
        specialinvoke $r46.<java.io.FileInputStream: void <init>(java.lang.String)>($r47);
        r2 = $r46;

     label8:
        goto label10;

     label9:
        $r48 := @caughtexception;
        r49 = $r48;
        $r50 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r50.<java.io.PrintStream: void println(java.lang.String)>("Configuration error");
        virtualinvoke r49.<java.io.IOException: void printStackTrace()>();

     label10:
        if r2 != null goto label16;

        $r51 = new java.io.File;
        $r53 = new java.io.File;
        $r55 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");
        $z0 = <org.apache.juli.ClassLoaderLogManager: boolean isJava9>;
        if $z0 == 0 goto label11;

        $r56 = "conf";
        goto label12;

     label11:
        $r56 = "lib";

     label12:
        specialinvoke $r53.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r55, $r56);
        specialinvoke $r51.<java.io.File: void <init>(java.io.File,java.lang.String)>($r53, "logging.properties");
        r57 = $r51;

     label13:
        $r58 = new java.io.FileInputStream;
        specialinvoke $r58.<java.io.FileInputStream: void <init>(java.io.File)>(r57);
        r2 = $r58;

     label14:
        goto label16;

     label15:
        $r59 := @caughtexception;
        r60 = $r59;
        $r61 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r61.<java.io.PrintStream: void println(java.lang.String)>("Configuration error");
        virtualinvoke r60.<java.io.IOException: void printStackTrace()>();

     label16:
        $r62 = new org.apache.juli.ClassLoaderLogManager$RootLogger;
        specialinvoke $r62.<org.apache.juli.ClassLoaderLogManager$RootLogger: void <init>()>();
        r63 = $r62;
        if r2 != null goto label20;

        r64 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();
        r65 = null;
        goto label18;

     label17:
        r65 = virtualinvoke r0.<org.apache.juli.ClassLoaderLogManager: org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo getClassLoaderInfo(java.lang.ClassLoader)>(r64);
        r64 = virtualinvoke r64.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

     label18:
        if r64 == null goto label19;

        if r65 == null goto label17;

     label19:
        if r65 == null goto label20;

        $r66 = r65.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: org.apache.juli.ClassLoaderLogManager$LogNode rootNode>;
        $r67 = $r66.<org.apache.juli.ClassLoaderLogManager$LogNode: java.util.logging.Logger logger>;
        virtualinvoke r63.<java.util.logging.Logger: void setParent(java.util.logging.Logger)>($r67);

     label20:
        $r68 = new org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo;
        $r69 = new org.apache.juli.ClassLoaderLogManager$LogNode;
        specialinvoke $r69.<org.apache.juli.ClassLoaderLogManager$LogNode: void <init>(org.apache.juli.ClassLoaderLogManager$LogNode,java.util.logging.Logger)>(null, r63);
        specialinvoke $r68.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: void <init>(org.apache.juli.ClassLoaderLogManager$LogNode)>($r69);
        r70 = $r68;
        $r71 = r0.<org.apache.juli.ClassLoaderLogManager: java.util.Map classLoaderLoggers>;
        interfaceinvoke $r71.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r70);
        if r2 == null goto label21;

        virtualinvoke r0.<org.apache.juli.ClassLoaderLogManager: void readConfiguration(java.io.InputStream,java.lang.ClassLoader)>(r2, r1);

     label21:
        $r73 = <org.apache.juli.ClassLoaderLogManager: java.lang.ThreadLocal addingLocalRootLogger>;
        $r74 = <java.lang.Boolean: java.lang.Boolean TRUE>;
        virtualinvoke $r73.<java.lang.ThreadLocal: void set(java.lang.Object)>($r74);
        virtualinvoke r0.<org.apache.juli.ClassLoaderLogManager: boolean addLogger(java.util.logging.Logger)>(r63);
        goto label23;

     label22:
        $r75 := @caughtexception;
        r76 = $r75;
        $r77 = <org.apache.juli.ClassLoaderLogManager: java.lang.ThreadLocal addingLocalRootLogger>;
        $r78 = <java.lang.Boolean: java.lang.Boolean FALSE>;
        virtualinvoke $r77.<java.lang.ThreadLocal: void set(java.lang.Object)>($r78);
        throw r76;

     label23:
        $r79 = <org.apache.juli.ClassLoaderLogManager: java.lang.ThreadLocal addingLocalRootLogger>;
        $r80 = <java.lang.Boolean: java.lang.Boolean FALSE>;
        virtualinvoke $r79.<java.lang.ThreadLocal: void set(java.lang.Object)>($r80);
        return;

        catch java.security.AccessControlException from label0 to label3 with label4;
        catch java.io.IOException from label7 to label8 with label9;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Throwable from label21 to label22 with label22;
    }

    protected synchronized void readConfiguration(java.io.InputStream, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.juli.ClassLoaderLogManager r0;
        java.io.InputStream r1;
        java.lang.ClassLoader r2;
        org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo r3;
        java.io.IOException r4, r5, $r14, $r16, $r18, r19, $r20, r21;
        java.lang.Throwable r6, $r17;
        java.util.StringTokenizer r7, $r28;
        java.lang.String r8, r9, r10, r23, r25, $r29;
        int i0, $i1, $i3, $i4;
        java.util.Map $r11, $r35;
        java.lang.Object $r12, $r32;
        java.util.Properties $r13, $r22, $r24;
        java.io.PrintStream $r15, $r39;
        org.apache.juli.ClassLoaderLogManager$LogNode $r26;
        java.util.logging.Logger r27;
        char $c2;
        boolean $z0, $z1;
        java.lang.ThreadLocal $r30, $r34;
        java.lang.Class $r31;
        java.util.logging.Handler r33;
        java.lang.Exception $r37, r38;

        r0 := @this: org.apache.juli.ClassLoaderLogManager;
        r1 := @parameter0: java.io.InputStream;
        r2 := @parameter1: java.lang.ClassLoader;
        $r11 = r0.<org.apache.juli.ClassLoaderLogManager: java.util.Map classLoaderLoggers>;
        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);
        r3 = (org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo) $r12;

     label0:
        $r13 = r3.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: java.util.Properties props>;
        virtualinvoke $r13.<java.util.Properties: void load(java.io.InputStream)>(r1);

     label1:
        goto label11;

     label2:
        $r14 := @caughtexception;
        r4 = $r14;
        $r15 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>("Configuration error");
        virtualinvoke r4.<java.io.IOException: void printStackTrace()>();

     label3:
        virtualinvoke r1.<java.io.InputStream: void close()>();

     label4:
        goto label14;

     label5:
        $r16 := @caughtexception;
        r5 = $r16;
        goto label14;

     label6:
        $r17 := @caughtexception;
        r6 = $r17;

     label7:
        virtualinvoke r1.<java.io.InputStream: void close()>();

     label8:
        goto label10;

     label9:
        $r18 := @caughtexception;
        r19 = $r18;

     label10:
        throw r6;

     label11:
        virtualinvoke r1.<java.io.InputStream: void close()>();

     label12:
        goto label14;

     label13:
        $r20 := @caughtexception;
        r21 = $r20;

     label14:
        $r22 = r3.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: java.util.Properties props>;
        r23 = virtualinvoke $r22.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(".handlers");
        $r24 = r3.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: java.util.Properties props>;
        r25 = virtualinvoke $r24.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("handlers");
        $r26 = r3.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: org.apache.juli.ClassLoaderLogManager$LogNode rootNode>;
        r27 = $r26.<org.apache.juli.ClassLoaderLogManager$LogNode: java.util.logging.Logger logger>;
        if r25 == null goto label21;

        $r28 = new java.util.StringTokenizer;
        specialinvoke $r28.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r25, ",");
        r7 = $r28;
        goto label20;

     label15:
        $r29 = virtualinvoke r7.<java.util.StringTokenizer: java.lang.String nextToken()>();
        r8 = virtualinvoke $r29.<java.lang.String: java.lang.String trim()>();
        r9 = r8;
        r10 = "";
        $i1 = virtualinvoke r9.<java.lang.String: int length()>();
        if $i1 > 0 goto label16;

        goto label20;

     label16:
        $c2 = virtualinvoke r9.<java.lang.String: char charAt(int)>(0);
        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c2);
        if $z0 == 0 goto label17;

        i0 = virtualinvoke r9.<java.lang.String: int indexOf(int)>(46);
        if i0 < 0 goto label17;

        $i3 = i0 + 1;
        r10 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);
        $i4 = i0 + 1;
        r9 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int)>($i4);

     label17:
        $r30 = r0.<org.apache.juli.ClassLoaderLogManager: java.lang.ThreadLocal prefix>;
        virtualinvoke $r30.<java.lang.ThreadLocal: void set(java.lang.Object)>(r10);
        $r31 = virtualinvoke r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r9);
        $r32 = virtualinvoke $r31.<java.lang.Class: java.lang.Object newInstance()>();
        r33 = (java.util.logging.Handler) $r32;
        $r34 = r0.<org.apache.juli.ClassLoaderLogManager: java.lang.ThreadLocal prefix>;
        virtualinvoke $r34.<java.lang.ThreadLocal: void set(java.lang.Object)>(null);
        $r35 = r3.<org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo: java.util.Map handlers>;
        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r33);
        if r23 != null goto label20;

        virtualinvoke r27.<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>(r33);

     label18:
        goto label20;

     label19:
        $r37 := @caughtexception;
        r38 = $r37;
        $r39 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r39.<java.io.PrintStream: void println(java.lang.String)>("Handler error");
        virtualinvoke r38.<java.lang.Exception: void printStackTrace()>();

     label20:
        $z1 = virtualinvoke r7.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z1 != 0 goto label15;

     label21:
        return;

        catch java.io.IOException from label0 to label1 with label2;
        catch java.io.IOException from label3 to label4 with label5;
        catch java.lang.Throwable from label0 to label3 with label6;
        catch java.io.IOException from label7 to label8 with label9;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Exception from label17 to label18 with label19;
    }

    protected static void doSetParentLogger(java.util.logging.Logger, java.util.logging.Logger)
    {
        java.util.logging.Logger r0, r1;
        org.apache.juli.ClassLoaderLogManager$4 $r2;

        r0 := @parameter0: java.util.logging.Logger;
        r1 := @parameter1: java.util.logging.Logger;
        $r2 = new org.apache.juli.ClassLoaderLogManager$4;
        specialinvoke $r2.<org.apache.juli.ClassLoaderLogManager$4: void <init>(java.util.logging.Logger,java.util.logging.Logger)>(r0, r1);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);
        return;
    }

    protected java.lang.String replace(java.lang.String)
    {
        org.apache.juli.ClassLoaderLogManager r0;
        java.lang.String r1, r2, r4, r5, $r8;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.StringBuilder r3, $r6;

        r0 := @this: org.apache.juli.ClassLoaderLogManager;
        r1 := @parameter0: java.lang.String;
        r2 = r1;
        i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("${");
        if i0 < 0 goto label8;

        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        r3 = $r6;
        i1 = -1;
        goto label6;

     label0:
        $i2 = i1 + 1;
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r1, $i2, i0);
        $i3 = i0 + 2;
        i1 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(125, $i3);
        if i1 >= 0 goto label1;

        i1 = i0 - 1;
        goto label7;

     label1:
        $i4 = i0 + 2;
        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i4, i1);
        $i5 = virtualinvoke r4.<java.lang.String: int length()>();
        if $i5 <= 0 goto label2;

        $r8 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r4);
        goto label3;

     label2:
        $r8 = null;

     label3:
        r5 = $r8;
        if r5 == null goto label4;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        goto label5;

     label4:
        $i6 = i1 + 1;
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r1, i0, $i6);

     label5:
        $i7 = i1 + 1;
        i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String,int)>("${", $i7);

     label6:
        if i0 >= 0 goto label0;

     label7:
        $i8 = i1 + 1;
        $i9 = virtualinvoke r1.<java.lang.String: int length()>();
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r1, $i8, $i9);
        r2 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label8:
        return r2;
    }
}
