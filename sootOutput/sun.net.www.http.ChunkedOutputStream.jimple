public class sun.net.www.http.ChunkedOutputStream extends java.io.PrintStream
{
    static final int DEFAULT_CHUNK_SIZE;
    private static final byte[] CRLF;
    private static final int CRLF_SIZE;
    private static final byte[] FOOTER;
    private static final int FOOTER_SIZE;
    private static final byte[] EMPTY_CHUNK_HEADER;
    private static final int EMPTY_CHUNK_HEADER_SIZE;
    private byte[] buf;
    private int size;
    private int count;
    private int spaceInCurrentChunk;
    private java.io.PrintStream out;
    private int preferredChunkDataSize;
    private int preferedHeaderSize;
    private int preferredChunkGrossSize;
    private byte[] completeHeader;

    private static int getHeaderSize(int)
    {
        int i0, $i1, $i2, $i3;
        java.lang.String $r0;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);
        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();
        $i1 = <sun.net.www.http.ChunkedOutputStream: int CRLF_SIZE>;
        $i3 = $i2 + $i1;
        return $i3;
    }

    private static byte[] getHeader(int)
    {
        int i0, i1, $i2, $i3, $i5, $i7, $i8;
        java.lang.String r0, $r9;
        byte[] r1, r2, $r3, $r4;
        byte $b4, $b6, $b9;
        java.io.UnsupportedEncodingException $r6, r7;
        java.lang.InternalError $r8;

        i0 := @parameter0: int;

     label0:
        r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);
        r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");
        $i2 = staticinvoke <sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>(i0);
        r2 = newarray (byte)[$i2];
        i1 = 0;

     label1:
        $i3 = lengthof r1;
        if i1 >= $i3 goto label2;

        $b4 = r1[i1];
        r2[i1] = $b4;
        i1 = i1 + 1;
        goto label1;

     label2:
        $i5 = lengthof r1;
        $r3 = <sun.net.www.http.ChunkedOutputStream: byte[] CRLF>;
        $b6 = $r3[0];
        r2[$i5] = $b6;
        $i7 = lengthof r1;
        $i8 = $i7 + 1;
        $r4 = <sun.net.www.http.ChunkedOutputStream: byte[] CRLF>;
        $b9 = $r4[1];
        r2[$i8] = $b9;

     label3:
        return r2;

     label4:
        $r6 := @caughtexception;
        r7 = $r6;
        $r8 = new java.lang.InternalError;
        $r9 = virtualinvoke r7.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();
        specialinvoke $r8.<java.lang.InternalError: void <init>(java.lang.String)>($r9);
        throw $r8;

        catch java.io.UnsupportedEncodingException from label0 to label3 with label4;
    }

    public void <init>(java.io.PrintStream)
    {
        sun.net.www.http.ChunkedOutputStream r0;
        java.io.PrintStream r1;

        r0 := @this: sun.net.www.http.ChunkedOutputStream;
        r1 := @parameter0: java.io.PrintStream;
        specialinvoke r0.<sun.net.www.http.ChunkedOutputStream: void <init>(java.io.PrintStream,int)>(r1, 4096);
        return;
    }

    public void <init>(java.io.PrintStream, int)
    {
        sun.net.www.http.ChunkedOutputStream r0;
        java.io.PrintStream r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        byte[] $r2, $r3;

        r0 := @this: sun.net.www.http.ChunkedOutputStream;
        r1 := @parameter0: java.io.PrintStream;
        i0 := @parameter1: int;
        specialinvoke r0.<java.io.PrintStream: void <init>(java.io.OutputStream)>(r1);
        r0.<sun.net.www.http.ChunkedOutputStream: java.io.PrintStream out> = r1;
        if i0 > 0 goto label0;

        i0 = 4096;

     label0:
        if i0 <= 0 goto label2;

        $i2 = staticinvoke <sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>(i0);
        $i3 = i0 - $i2;
        $i4 = <sun.net.www.http.ChunkedOutputStream: int FOOTER_SIZE>;
        i1 = $i3 - $i4;
        $i5 = i1 + 1;
        $i6 = staticinvoke <sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>($i5);
        $i7 = staticinvoke <sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>(i0);
        if $i6 >= $i7 goto label1;

        i1 = i1 + 1;

     label1:
        i0 = i1;

     label2:
        if i0 <= 0 goto label3;

        r0.<sun.net.www.http.ChunkedOutputStream: int preferredChunkDataSize> = i0;
        goto label4;

     label3:
        $i8 = staticinvoke <sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>(4096);
        $i9 = 4096 - $i8;
        $i10 = <sun.net.www.http.ChunkedOutputStream: int FOOTER_SIZE>;
        $i11 = $i9 - $i10;
        r0.<sun.net.www.http.ChunkedOutputStream: int preferredChunkDataSize> = $i11;

     label4:
        $i12 = r0.<sun.net.www.http.ChunkedOutputStream: int preferredChunkDataSize>;
        $i13 = staticinvoke <sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>($i12);
        r0.<sun.net.www.http.ChunkedOutputStream: int preferedHeaderSize> = $i13;
        $i14 = r0.<sun.net.www.http.ChunkedOutputStream: int preferedHeaderSize>;
        $i15 = r0.<sun.net.www.http.ChunkedOutputStream: int preferredChunkDataSize>;
        $i16 = $i14 + $i15;
        $i17 = <sun.net.www.http.ChunkedOutputStream: int FOOTER_SIZE>;
        $i18 = $i16 + $i17;
        r0.<sun.net.www.http.ChunkedOutputStream: int preferredChunkGrossSize> = $i18;
        $i19 = r0.<sun.net.www.http.ChunkedOutputStream: int preferredChunkDataSize>;
        $r2 = staticinvoke <sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>($i19);
        r0.<sun.net.www.http.ChunkedOutputStream: byte[] completeHeader> = $r2;
        $i20 = r0.<sun.net.www.http.ChunkedOutputStream: int preferredChunkGrossSize>;
        $r3 = newarray (byte)[$i20];
        r0.<sun.net.www.http.ChunkedOutputStream: byte[] buf> = $r3;
        virtualinvoke r0.<sun.net.www.http.ChunkedOutputStream: void reset()>();
        return;
    }

    private void flush(boolean)
    {
        sun.net.www.http.ChunkedOutputStream r0;
        boolean z0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i16, $i17, $i18;
        java.io.PrintStream $r1, $r3, $r12, $r14, $r16;
        byte[] $r2, $r4, $r5, $r6, $r8, $r9, $r11, $r13, $r15;
        byte $b12, $b15;

        r0 := @this: sun.net.www.http.ChunkedOutputStream;
        z0 := @parameter0: boolean;
        $i1 = r0.<sun.net.www.http.ChunkedOutputStream: int spaceInCurrentChunk>;
        if $i1 != 0 goto label0;

        $r1 = r0.<sun.net.www.http.ChunkedOutputStream: java.io.PrintStream out>;
        $r2 = r0.<sun.net.www.http.ChunkedOutputStream: byte[] buf>;
        $i2 = r0.<sun.net.www.http.ChunkedOutputStream: int preferredChunkGrossSize>;
        virtualinvoke $r1.<java.io.PrintStream: void write(byte[],int,int)>($r2, 0, $i2);
        $r3 = r0.<sun.net.www.http.ChunkedOutputStream: java.io.PrintStream out>;
        virtualinvoke $r3.<java.io.PrintStream: void flush()>();
        virtualinvoke r0.<sun.net.www.http.ChunkedOutputStream: void reset()>();
        goto label3;

     label0:
        if z0 == 0 goto label3;

        $i3 = r0.<sun.net.www.http.ChunkedOutputStream: int size>;
        if $i3 <= 0 goto label1;

        $i4 = r0.<sun.net.www.http.ChunkedOutputStream: int preferedHeaderSize>;
        $i5 = r0.<sun.net.www.http.ChunkedOutputStream: int size>;
        $i6 = staticinvoke <sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>($i5);
        i0 = $i4 - $i6;
        $i7 = r0.<sun.net.www.http.ChunkedOutputStream: int size>;
        $r4 = staticinvoke <sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>($i7);
        $r5 = r0.<sun.net.www.http.ChunkedOutputStream: byte[] buf>;
        $i8 = r0.<sun.net.www.http.ChunkedOutputStream: int size>;
        $i9 = staticinvoke <sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>($i8);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r5, i0, $i9);
        $r6 = r0.<sun.net.www.http.ChunkedOutputStream: byte[] buf>;
        $i10 = r0.<sun.net.www.http.ChunkedOutputStream: int count>;
        $i11 = $i10 + 1;
        r0.<sun.net.www.http.ChunkedOutputStream: int count> = $i11;
        $r8 = <sun.net.www.http.ChunkedOutputStream: byte[] FOOTER>;
        $b12 = $r8[0];
        $r6[$i10] = $b12;
        $r9 = r0.<sun.net.www.http.ChunkedOutputStream: byte[] buf>;
        $i13 = r0.<sun.net.www.http.ChunkedOutputStream: int count>;
        $i14 = $i13 + 1;
        r0.<sun.net.www.http.ChunkedOutputStream: int count> = $i14;
        $r11 = <sun.net.www.http.ChunkedOutputStream: byte[] FOOTER>;
        $b15 = $r11[1];
        $r9[$i13] = $b15;
        $r12 = r0.<sun.net.www.http.ChunkedOutputStream: java.io.PrintStream out>;
        $r13 = r0.<sun.net.www.http.ChunkedOutputStream: byte[] buf>;
        $i16 = r0.<sun.net.www.http.ChunkedOutputStream: int count>;
        $i17 = $i16 - i0;
        virtualinvoke $r12.<java.io.PrintStream: void write(byte[],int,int)>($r13, i0, $i17);
        goto label2;

     label1:
        $r14 = r0.<sun.net.www.http.ChunkedOutputStream: java.io.PrintStream out>;
        $r15 = <sun.net.www.http.ChunkedOutputStream: byte[] EMPTY_CHUNK_HEADER>;
        $i18 = <sun.net.www.http.ChunkedOutputStream: int EMPTY_CHUNK_HEADER_SIZE>;
        virtualinvoke $r14.<java.io.PrintStream: void write(byte[],int,int)>($r15, 0, $i18);

     label2:
        $r16 = r0.<sun.net.www.http.ChunkedOutputStream: java.io.PrintStream out>;
        virtualinvoke $r16.<java.io.PrintStream: void flush()>();
        virtualinvoke r0.<sun.net.www.http.ChunkedOutputStream: void reset()>();

     label3:
        return;
    }

    public boolean checkError()
    {
        sun.net.www.http.ChunkedOutputStream r0;
        java.io.PrintStream $r1;
        boolean $z0;

        r0 := @this: sun.net.www.http.ChunkedOutputStream;
        $r1 = r0.<sun.net.www.http.ChunkedOutputStream: java.io.PrintStream out>;
        $z0 = virtualinvoke $r1.<java.io.PrintStream: boolean checkError()>();
        return $z0;
    }

    private void ensureOpen()
    {
        sun.net.www.http.ChunkedOutputStream r0;
        java.io.PrintStream $r1;

        r0 := @this: sun.net.www.http.ChunkedOutputStream;
        $r1 = r0.<sun.net.www.http.ChunkedOutputStream: java.io.PrintStream out>;
        if $r1 != null goto label0;

        virtualinvoke r0.<sun.net.www.http.ChunkedOutputStream: void setError()>();

     label0:
        return;
    }

    public synchronized void write(byte[], int, int)
    {
        sun.net.www.http.ChunkedOutputStream r0;
        byte[] r1, $r3, $r4, $r5, $r6, $r8, $r10, $r11, $r13, $r14;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        java.lang.IndexOutOfBoundsException $r2;
        byte $b11, $b21, $b24;
        boolean $z0;

        r0 := @this: sun.net.www.http.ChunkedOutputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<sun.net.www.http.ChunkedOutputStream: void ensureOpen()>();
        if i0 < 0 goto label0;

        $i5 = lengthof r1;
        if i0 > $i5 goto label0;

        if i1 < 0 goto label0;

        $i6 = i0 + i1;
        $i7 = lengthof r1;
        if $i6 > $i7 goto label0;

        $i8 = i0 + i1;
        if $i8 >= 0 goto label1;

     label0:
        $r2 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r2;

     label1:
        if i1 != 0 goto label2;

        return;

     label2:
        i2 = i1;
        i3 = i0;

     label3:
        $i9 = r0.<sun.net.www.http.ChunkedOutputStream: int spaceInCurrentChunk>;
        if i2 < $i9 goto label6;

        i4 = 0;

     label4:
        $r3 = r0.<sun.net.www.http.ChunkedOutputStream: byte[] completeHeader>;
        $i10 = lengthof $r3;
        if i4 >= $i10 goto label5;

        $r4 = r0.<sun.net.www.http.ChunkedOutputStream: byte[] buf>;
        $r5 = r0.<sun.net.www.http.ChunkedOutputStream: byte[] completeHeader>;
        $b11 = $r5[i4];
        $r4[i4] = $b11;
        i4 = i4 + 1;
        goto label4;

     label5:
        $r6 = r0.<sun.net.www.http.ChunkedOutputStream: byte[] buf>;
        $i12 = r0.<sun.net.www.http.ChunkedOutputStream: int count>;
        $i13 = r0.<sun.net.www.http.ChunkedOutputStream: int spaceInCurrentChunk>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i3, $r6, $i12, $i13);
        $i14 = r0.<sun.net.www.http.ChunkedOutputStream: int spaceInCurrentChunk>;
        i3 = i3 + $i14;
        $i15 = r0.<sun.net.www.http.ChunkedOutputStream: int spaceInCurrentChunk>;
        i2 = i2 - $i15;
        $i16 = r0.<sun.net.www.http.ChunkedOutputStream: int count>;
        $i17 = r0.<sun.net.www.http.ChunkedOutputStream: int spaceInCurrentChunk>;
        $i18 = $i16 + $i17;
        r0.<sun.net.www.http.ChunkedOutputStream: int count> = $i18;
        $r8 = r0.<sun.net.www.http.ChunkedOutputStream: byte[] buf>;
        $i19 = r0.<sun.net.www.http.ChunkedOutputStream: int count>;
        $i20 = $i19 + 1;
        r0.<sun.net.www.http.ChunkedOutputStream: int count> = $i20;
        $r10 = <sun.net.www.http.ChunkedOutputStream: byte[] FOOTER>;
        $b21 = $r10[0];
        $r8[$i19] = $b21;
        $r11 = r0.<sun.net.www.http.ChunkedOutputStream: byte[] buf>;
        $i22 = r0.<sun.net.www.http.ChunkedOutputStream: int count>;
        $i23 = $i22 + 1;
        r0.<sun.net.www.http.ChunkedOutputStream: int count> = $i23;
        $r13 = <sun.net.www.http.ChunkedOutputStream: byte[] FOOTER>;
        $b24 = $r13[1];
        $r11[$i22] = $b24;
        r0.<sun.net.www.http.ChunkedOutputStream: int spaceInCurrentChunk> = 0;
        specialinvoke r0.<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>(0);
        $z0 = virtualinvoke r0.<sun.net.www.http.ChunkedOutputStream: boolean checkError()>();
        if $z0 == 0 goto label7;

        goto label8;

     label6:
        $r14 = r0.<sun.net.www.http.ChunkedOutputStream: byte[] buf>;
        $i25 = r0.<sun.net.www.http.ChunkedOutputStream: int count>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i3, $r14, $i25, i2);
        $i26 = r0.<sun.net.www.http.ChunkedOutputStream: int count>;
        $i27 = $i26 + i2;
        r0.<sun.net.www.http.ChunkedOutputStream: int count> = $i27;
        $i28 = r0.<sun.net.www.http.ChunkedOutputStream: int size>;
        $i29 = $i28 + i2;
        r0.<sun.net.www.http.ChunkedOutputStream: int size> = $i29;
        $i30 = r0.<sun.net.www.http.ChunkedOutputStream: int spaceInCurrentChunk>;
        $i31 = $i30 - i2;
        r0.<sun.net.www.http.ChunkedOutputStream: int spaceInCurrentChunk> = $i31;
        i2 = 0;

     label7:
        if i2 > 0 goto label3;

     label8:
        return;
    }

    public synchronized void write(int)
    {
        sun.net.www.http.ChunkedOutputStream r0;
        int i0;
        byte[] r1, $r2;
        byte $b1;

        r0 := @this: sun.net.www.http.ChunkedOutputStream;
        i0 := @parameter0: int;
        $r2 = newarray (byte)[1];
        $b1 = (byte) i0;
        $r2[0] = $b1;
        r1 = $r2;
        virtualinvoke r0.<sun.net.www.http.ChunkedOutputStream: void write(byte[],int,int)>(r1, 0, 1);
        return;
    }

    public synchronized void reset()
    {
        sun.net.www.http.ChunkedOutputStream r0;
        int $i0, $i1;

        r0 := @this: sun.net.www.http.ChunkedOutputStream;
        $i0 = r0.<sun.net.www.http.ChunkedOutputStream: int preferedHeaderSize>;
        r0.<sun.net.www.http.ChunkedOutputStream: int count> = $i0;
        r0.<sun.net.www.http.ChunkedOutputStream: int size> = 0;
        $i1 = r0.<sun.net.www.http.ChunkedOutputStream: int preferredChunkDataSize>;
        r0.<sun.net.www.http.ChunkedOutputStream: int spaceInCurrentChunk> = $i1;
        return;
    }

    public int size()
    {
        sun.net.www.http.ChunkedOutputStream r0;
        int $i0;

        r0 := @this: sun.net.www.http.ChunkedOutputStream;
        $i0 = r0.<sun.net.www.http.ChunkedOutputStream: int size>;
        return $i0;
    }

    public synchronized void close()
    {
        sun.net.www.http.ChunkedOutputStream r0;
        int $i0;

        r0 := @this: sun.net.www.http.ChunkedOutputStream;
        specialinvoke r0.<sun.net.www.http.ChunkedOutputStream: void ensureOpen()>();
        $i0 = r0.<sun.net.www.http.ChunkedOutputStream: int size>;
        if $i0 <= 0 goto label0;

        specialinvoke r0.<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>(1);

     label0:
        specialinvoke r0.<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>(1);
        r0.<sun.net.www.http.ChunkedOutputStream: java.io.PrintStream out> = null;
        return;
    }

    public synchronized void flush()
    {
        sun.net.www.http.ChunkedOutputStream r0;
        int $i0;

        r0 := @this: sun.net.www.http.ChunkedOutputStream;
        specialinvoke r0.<sun.net.www.http.ChunkedOutputStream: void ensureOpen()>();
        $i0 = r0.<sun.net.www.http.ChunkedOutputStream: int size>;
        if $i0 <= 0 goto label0;

        specialinvoke r0.<sun.net.www.http.ChunkedOutputStream: void flush(boolean)>(1);

     label0:
        return;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2, $r3;
        int $i0, $i1, $i2;

        $r0 = newarray (byte)[2];
        $r0[0] = 13;
        $r0[1] = 10;
        <sun.net.www.http.ChunkedOutputStream: byte[] CRLF> = $r0;
        $r1 = <sun.net.www.http.ChunkedOutputStream: byte[] CRLF>;
        $i0 = lengthof $r1;
        <sun.net.www.http.ChunkedOutputStream: int CRLF_SIZE> = $i0;
        $r2 = <sun.net.www.http.ChunkedOutputStream: byte[] CRLF>;
        <sun.net.www.http.ChunkedOutputStream: byte[] FOOTER> = $r2;
        $i1 = <sun.net.www.http.ChunkedOutputStream: int CRLF_SIZE>;
        <sun.net.www.http.ChunkedOutputStream: int FOOTER_SIZE> = $i1;
        $r3 = staticinvoke <sun.net.www.http.ChunkedOutputStream: byte[] getHeader(int)>(0);
        <sun.net.www.http.ChunkedOutputStream: byte[] EMPTY_CHUNK_HEADER> = $r3;
        $i2 = staticinvoke <sun.net.www.http.ChunkedOutputStream: int getHeaderSize(int)>(0);
        <sun.net.www.http.ChunkedOutputStream: int EMPTY_CHUNK_HEADER_SIZE> = $i2;
        return;
    }
}
