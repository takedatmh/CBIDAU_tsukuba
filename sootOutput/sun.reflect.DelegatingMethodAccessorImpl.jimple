class sun.reflect.DelegatingMethodAccessorImpl extends sun.reflect.MethodAccessorImpl
{
    private sun.reflect.MethodAccessorImpl delegate;

    void <init>(sun.reflect.MethodAccessorImpl)
    {
        sun.reflect.DelegatingMethodAccessorImpl r0;
        sun.reflect.MethodAccessorImpl r1;

        r0 := @this: sun.reflect.DelegatingMethodAccessorImpl;
        r1 := @parameter0: sun.reflect.MethodAccessorImpl;
        specialinvoke r0.<sun.reflect.MethodAccessorImpl: void <init>()>();
        virtualinvoke r0.<sun.reflect.DelegatingMethodAccessorImpl: void setDelegate(sun.reflect.MethodAccessorImpl)>(r1);
        return;
    }

    public java.lang.Object invoke(java.lang.Object, java.lang.Object[]) throws java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException
    {
        sun.reflect.DelegatingMethodAccessorImpl r0;
        java.lang.Object r1, $r4;
        java.lang.Object[] r2;
        sun.reflect.MethodAccessorImpl $r3;

        r0 := @this: sun.reflect.DelegatingMethodAccessorImpl;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object[];
        $r3 = r0.<sun.reflect.DelegatingMethodAccessorImpl: sun.reflect.MethodAccessorImpl delegate>;
        $r4 = virtualinvoke $r3.<sun.reflect.MethodAccessorImpl: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, r2);
        return $r4;
    }

    void setDelegate(sun.reflect.MethodAccessorImpl)
    {
        sun.reflect.DelegatingMethodAccessorImpl r0;
        sun.reflect.MethodAccessorImpl r1;

        r0 := @this: sun.reflect.DelegatingMethodAccessorImpl;
        r1 := @parameter0: sun.reflect.MethodAccessorImpl;
        r0.<sun.reflect.DelegatingMethodAccessorImpl: sun.reflect.MethodAccessorImpl delegate> = r1;
        return;
    }
}
