class java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue extends java.util.AbstractQueue implements java.util.concurrent.BlockingQueue
{
    private static final int INITIAL_CAPACITY;
    private java.util.concurrent.RunnableScheduledFuture[] queue;
    private final java.util.concurrent.locks.ReentrantLock lock;
    private int size;
    private java.lang.Thread leader;
    private final java.util.concurrent.locks.Condition available;

    void <init>()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.RunnableScheduledFuture[] $r1;
        java.util.concurrent.locks.ReentrantLock $r2, $r3;
        java.util.concurrent.locks.Condition $r4;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        specialinvoke r0.<java.util.AbstractQueue: void <init>()>();
        $r1 = newarray (java.util.concurrent.RunnableScheduledFuture)[16];
        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue> = $r1;
        $r2 = new java.util.concurrent.locks.ReentrantLock;
        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();
        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock> = $r2;
        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size> = 0;
        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader> = null;
        $r3 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;
        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();
        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available> = $r4;
        return;
    }

    private void setIndex(java.util.concurrent.RunnableScheduledFuture, int)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.RunnableScheduledFuture r1;
        int i0;
        boolean $z0;
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask $r2;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 := @parameter0: java.util.concurrent.RunnableScheduledFuture;
        i0 := @parameter1: int;
        $z0 = r1 instanceof java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;
        if $z0 == 0 goto label0;

        $r2 = (java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask) r1;
        $r2.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: int heapIndex> = i0;

     label0:
        return;
    }

    private void siftUp(int, java.util.concurrent.RunnableScheduledFuture)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        int i0, i1, $i2, $i3;
        java.util.concurrent.RunnableScheduledFuture r1, r2;
        java.util.concurrent.RunnableScheduledFuture[] $r3, $r4, $r5;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        i0 := @parameter0: int;
        r1 := @parameter1: java.util.concurrent.RunnableScheduledFuture;

     label0:
        if i0 <= 0 goto label2;

        $i2 = i0 - 1;
        i1 = $i2 >>> 1;
        $r3 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        r2 = $r3[i1];
        $i3 = interfaceinvoke r1.<java.util.concurrent.RunnableScheduledFuture: int compareTo(java.lang.Object)>(r2);
        if $i3 < 0 goto label1;

        goto label2;

     label1:
        $r4 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r4[i0] = r2;
        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void setIndex(java.util.concurrent.RunnableScheduledFuture,int)>(r2, i0);
        i0 = i1;
        goto label0;

     label2:
        $r5 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r5[i0] = r1;
        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void setIndex(java.util.concurrent.RunnableScheduledFuture,int)>(r1, i0);
        return;
    }

    private void siftDown(int, java.util.concurrent.RunnableScheduledFuture)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i9;
        java.util.concurrent.RunnableScheduledFuture r1, r2, $r5;
        java.util.concurrent.RunnableScheduledFuture[] $r3, $r4, $r6, $r7, $r8;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        i0 := @parameter0: int;
        r1 := @parameter1: java.util.concurrent.RunnableScheduledFuture;
        $i4 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;
        i1 = $i4 >>> 1;

     label0:
        if i0 >= i1 goto label3;

        $i5 = i0 << 1;
        i2 = $i5 + 1;
        $r3 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        r2 = $r3[i2];
        i3 = i2 + 1;
        $i6 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;
        if i3 >= $i6 goto label1;

        $r4 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r5 = $r4[i3];
        $i7 = interfaceinvoke r2.<java.util.concurrent.RunnableScheduledFuture: int compareTo(java.lang.Object)>($r5);
        if $i7 <= 0 goto label1;

        $r6 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        i2 = i3;
        r2 = $r6[i3];

     label1:
        $i9 = interfaceinvoke r1.<java.util.concurrent.RunnableScheduledFuture: int compareTo(java.lang.Object)>(r2);
        if $i9 > 0 goto label2;

        goto label3;

     label2:
        $r7 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r7[i0] = r2;
        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void setIndex(java.util.concurrent.RunnableScheduledFuture,int)>(r2, i0);
        i0 = i2;
        goto label0;

     label3:
        $r8 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r8[i0] = r1;
        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void setIndex(java.util.concurrent.RunnableScheduledFuture,int)>(r1, i0);
        return;
    }

    private void grow()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        int i0, i1, $i2;
        java.util.concurrent.RunnableScheduledFuture[] $r1, $r2, $r4;
        java.lang.Object[] $r3;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        $r1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        i0 = lengthof $r1;
        $i2 = i0 >> 1;
        i1 = i0 + $i2;
        if i1 >= 0 goto label0;

        i1 = 2147483647;

     label0:
        $r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, i1);
        $r4 = (java.util.concurrent.RunnableScheduledFuture[]) $r3;
        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue> = $r4;
        return;
    }

    private int indexOf(java.lang.Object)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Object r1;
        int i0, $i1, i2, $i3;
        boolean $z0, $z1;
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask $r2;
        java.util.concurrent.RunnableScheduledFuture[] $r3, $r5;
        java.util.concurrent.RunnableScheduledFuture $r4, $r6;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 := @parameter0: java.lang.Object;
        if r1 == null goto label4;

        $z0 = r1 instanceof java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;
        if $z0 == 0 goto label1;

        $r2 = (java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask) r1;
        i0 = $r2.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: int heapIndex>;
        if i0 < 0 goto label0;

        $i1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;
        if i0 >= $i1 goto label0;

        $r3 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r4 = $r3[i0];
        if $r4 != r1 goto label0;

        return i0;

     label0:
        goto label4;

     label1:
        i2 = 0;

     label2:
        $i3 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;
        if i2 >= $i3 goto label4;

        $r5 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r6 = $r5[i2];
        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r6);
        if $z1 == 0 goto label3;

        return i2;

     label3:
        i2 = i2 + 1;
        goto label2;

     label4:
        return -1;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Object r1;
        java.util.concurrent.locks.ReentrantLock r2;
        boolean z0, $z1;
        java.lang.Throwable r3, $r4;
        int $i0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 := @parameter0: java.lang.Object;
        r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        $i0 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int indexOf(java.lang.Object)>(r1);
        if $i0 == -1 goto label1;

        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

     label3:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z0;

     label4:
        $r4 := @caughtexception;

     label5:
        r3 = $r4;

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Object r1;
        java.util.concurrent.locks.ReentrantLock r2;
        int i0, $i1, $i2, i3;
        boolean z0, z1;
        java.util.concurrent.RunnableScheduledFuture r3, $r6, $r11;
        java.lang.Throwable r4, $r12;
        java.util.concurrent.RunnableScheduledFuture[] $r5, $r8, $r9, $r10;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 := @parameter0: java.lang.Object;
        r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        i0 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int indexOf(java.lang.Object)>(r1);
        if i0 >= 0 goto label2;

        z0 = 0;

     label1:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z0;

     label2:
        $r5 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r6 = $r5[i0];
        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void setIndex(java.util.concurrent.RunnableScheduledFuture,int)>($r6, -1);
        $i1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;
        $i2 = $i1 - 1;
        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size> = $i2;
        i3 = $i2;
        $r8 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        r3 = $r8[i3];
        $r9 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r9[i3] = null;
        if i3 == i0 goto label3;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void siftDown(int,java.util.concurrent.RunnableScheduledFuture)>(i0, r3);
        $r10 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r11 = $r10[i0];
        if $r11 != r3 goto label3;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void siftUp(int,java.util.concurrent.RunnableScheduledFuture)>(i0, r3);

     label3:
        z1 = 1;

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z1;

     label5:
        $r12 := @caughtexception;

     label6:
        r4 = $r12;

     label7:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

        catch java.lang.Throwable from label0 to label1 with label5;
        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public int size()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        int i0;
        java.lang.Throwable r2, $r3;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        i0 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;

     label1:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return i0;

     label2:
        $r3 := @caughtexception;

     label3:
        r2 = $r3;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        $i0 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size()>();
        if $i0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public int remainingCapacity()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        return 2147483647;
    }

    public java.util.concurrent.RunnableScheduledFuture peek()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.concurrent.RunnableScheduledFuture r2;
        java.lang.Throwable r3, $r5;
        java.util.concurrent.RunnableScheduledFuture[] $r4;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        $r4 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        r2 = $r4[0];

     label1:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return r2;

     label2:
        $r5 := @caughtexception;

     label3:
        r3 = $r5;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public boolean offer(java.lang.Runnable)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Runnable r1;
        java.util.concurrent.RunnableScheduledFuture r2, $r9;
        java.util.concurrent.locks.ReentrantLock r3;
        int i0, $i1, $i2;
        java.lang.Throwable r4, $r11;
        java.lang.NullPointerException $r5;
        java.util.concurrent.RunnableScheduledFuture[] $r6, $r7, $r8;
        java.util.concurrent.locks.Condition $r10;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 := @parameter0: java.lang.Runnable;
        if r1 != null goto label0;

        $r5 = new java.lang.NullPointerException;
        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();
        throw $r5;

     label0:
        r2 = (java.util.concurrent.RunnableScheduledFuture) r1;
        r3 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;
        $r6 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $i1 = lengthof $r6;
        if i0 < $i1 goto label2;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void grow()>();

     label2:
        $i2 = i0 + 1;
        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size> = $i2;
        if i0 != 0 goto label3;

        $r7 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r7[0] = r2;
        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void setIndex(java.util.concurrent.RunnableScheduledFuture,int)>(r2, 0);
        goto label4;

     label3:
        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void siftUp(int,java.util.concurrent.RunnableScheduledFuture)>(i0, r2);

     label4:
        $r8 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r9 = $r8[0];
        if $r9 != r2 goto label5;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader> = null;
        $r10 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;
        interfaceinvoke $r10.<java.util.concurrent.locks.Condition: void signal()>();

     label5:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label9;

     label6:
        $r11 := @caughtexception;

     label7:
        r4 = $r11;

     label8:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

     label9:
        return 1;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void put(java.lang.Runnable)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Runnable r1;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 := @parameter0: java.lang.Runnable;
        virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: boolean offer(java.lang.Runnable)>(r1);
        return;
    }

    public boolean add(java.lang.Runnable)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Runnable r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 := @parameter0: java.lang.Runnable;
        $z0 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: boolean offer(java.lang.Runnable)>(r1);
        return $z0;
    }

    public boolean offer(java.lang.Runnable, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Runnable r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 := @parameter0: java.lang.Runnable;
        l0 := @parameter1: long;
        r2 := @parameter2: java.util.concurrent.TimeUnit;
        $z0 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: boolean offer(java.lang.Runnable)>(r1);
        return $z0;
    }

    private java.util.concurrent.RunnableScheduledFuture finishPoll(java.util.concurrent.RunnableScheduledFuture)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.RunnableScheduledFuture r1, r3;
        int i0, $i1, $i2;
        java.util.concurrent.RunnableScheduledFuture[] $r4, $r5;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 := @parameter0: java.util.concurrent.RunnableScheduledFuture;
        $i1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;
        $i2 = $i1 - 1;
        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size> = $i2;
        i0 = $i2;
        $r4 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        r3 = $r4[i0];
        $r5 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r5[i0] = null;
        if i0 == 0 goto label0;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void siftDown(int,java.util.concurrent.RunnableScheduledFuture)>(0, r3);

     label0:
        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void setIndex(java.util.concurrent.RunnableScheduledFuture,int)>(r1, -1);
        return r1;
    }

    public java.util.concurrent.RunnableScheduledFuture poll()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.concurrent.RunnableScheduledFuture r2, r6;
        null_type n0;
        java.lang.Throwable r3, $r7;
        java.util.concurrent.RunnableScheduledFuture[] $r4;
        java.util.concurrent.TimeUnit $r5;
        long $l0;
        byte $b1;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        $r4 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        r2 = $r4[0];
        if r2 == null goto label1;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
        $l0 = interfaceinvoke r2.<java.util.concurrent.RunnableScheduledFuture: long getDelay(java.util.concurrent.TimeUnit)>($r5);
        $b1 = $l0 cmp 0L;
        if $b1 <= 0 goto label3;

     label1:
        n0 = null;

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return n0;

     label3:
        r6 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture finishPoll(java.util.concurrent.RunnableScheduledFuture)>(r2);

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return r6;

     label5:
        $r7 := @caughtexception;

     label6:
        r3 = $r7;

     label7:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.util.concurrent.RunnableScheduledFuture take() throws java.lang.InterruptedException
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.concurrent.RunnableScheduledFuture r2, r3, $r11, $r23;
        long l0;
        java.lang.Throwable r4, r5, $r18, $r20;
        java.util.concurrent.RunnableScheduledFuture[] $r6, $r10, $r22;
        java.util.concurrent.locks.Condition $r7, $r12, $r14, $r16, $r24;
        java.util.concurrent.TimeUnit $r8;
        byte $b1;
        java.lang.Thread $r9, $r13, r15, $r17, $r19, $r21;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label0:
        $r6 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        r2 = $r6[0];
        if r2 != null goto label1;

        $r7 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;
        interfaceinvoke $r7.<java.util.concurrent.locks.Condition: void await()>();
        goto label12;

     label1:
        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
        l0 = interfaceinvoke r2.<java.util.concurrent.RunnableScheduledFuture: long getDelay(java.util.concurrent.TimeUnit)>($r8);
        $b1 = l0 cmp 0L;
        if $b1 > 0 goto label4;

        r3 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture finishPoll(java.util.concurrent.RunnableScheduledFuture)>(r2);

     label2:
        $r9 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;
        if $r9 != null goto label3;

        $r10 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r11 = $r10[0];
        if $r11 == null goto label3;

        $r12 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;
        interfaceinvoke $r12.<java.util.concurrent.locks.Condition: void signal()>();

     label3:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return r3;

     label4:
        $r13 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;
        if $r13 == null goto label5;

        $r14 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;
        interfaceinvoke $r14.<java.util.concurrent.locks.Condition: void await()>();
        goto label12;

     label5:
        r15 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader> = r15;

     label6:
        $r16 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;
        interfaceinvoke $r16.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l0);

     label7:
        $r17 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;
        if $r17 != r15 goto label12;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader> = null;
        goto label12;

     label8:
        $r18 := @caughtexception;

     label9:
        r4 = $r18;

     label10:
        $r19 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;
        if $r19 != r15 goto label11;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader> = null;

     label11:
        throw r4;

     label12:
        goto label0;

     label13:
        $r20 := @caughtexception;
        r5 = $r20;

     label14:
        $r21 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;
        if $r21 != null goto label15;

        $r22 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r23 = $r22[0];
        if $r23 == null goto label15;

        $r24 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;
        interfaceinvoke $r24.<java.util.concurrent.locks.Condition: void signal()>();

     label15:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r5;

        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
        catch java.lang.Throwable from label0 to label2 with label13;
        catch java.lang.Throwable from label4 to label14 with label13;
    }

    public java.util.concurrent.RunnableScheduledFuture poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        long l0, l1, l2, l4, $l8;
        java.util.concurrent.TimeUnit r1, $r13;
        java.util.concurrent.locks.ReentrantLock r2;
        java.util.concurrent.RunnableScheduledFuture r3, r4, $r10, $r16, $r20, $r32;
        null_type n0, n1;
        java.lang.Throwable r5, r6, $r27, $r29;
        java.util.concurrent.RunnableScheduledFuture[] $r7, $r9, $r15, $r19, $r31;
        byte $b3, $b5, $b6, $b7;
        java.lang.Thread $r8, $r14, $r18, $r22, r24, $r26, $r28, $r30;
        java.util.concurrent.locks.Condition $r11, $r12, $r17, $r21, $r23, $r25, $r33;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.concurrent.TimeUnit;
        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);
        r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label0:
        $r7 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        r3 = $r7[0];
        if r3 != null goto label4;

        $b3 = l1 cmp 0L;
        if $b3 > 0 goto label3;

        n0 = null;

     label1:
        $r8 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;
        if $r8 != null goto label2;

        $r9 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r10 = $r9[0];
        if $r10 == null goto label2;

        $r11 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;
        interfaceinvoke $r11.<java.util.concurrent.locks.Condition: void signal()>();

     label2:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return n0;

     label3:
        $r12 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;
        l1 = interfaceinvoke $r12.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l1);
        goto label19;

     label4:
        $r13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
        l4 = interfaceinvoke r3.<java.util.concurrent.RunnableScheduledFuture: long getDelay(java.util.concurrent.TimeUnit)>($r13);
        $b5 = l4 cmp 0L;
        if $b5 > 0 goto label7;

        r4 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture finishPoll(java.util.concurrent.RunnableScheduledFuture)>(r3);

     label5:
        $r14 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;
        if $r14 != null goto label6;

        $r15 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r16 = $r15[0];
        if $r16 == null goto label6;

        $r17 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;
        interfaceinvoke $r17.<java.util.concurrent.locks.Condition: void signal()>();

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return r4;

     label7:
        $b6 = l1 cmp 0L;
        if $b6 > 0 goto label10;

        n1 = null;

     label8:
        $r18 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;
        if $r18 != null goto label9;

        $r19 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r20 = $r19[0];
        if $r20 == null goto label9;

        $r21 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;
        interfaceinvoke $r21.<java.util.concurrent.locks.Condition: void signal()>();

     label9:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return n1;

     label10:
        $b7 = l1 cmp l4;
        if $b7 < 0 goto label11;

        $r22 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;
        if $r22 == null goto label12;

     label11:
        $r23 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;
        l1 = interfaceinvoke $r23.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l1);
        goto label19;

     label12:
        r24 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader> = r24;

     label13:
        $r25 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;
        l2 = interfaceinvoke $r25.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l4);
        $l8 = l4 - l2;
        l1 = l1 - $l8;

     label14:
        $r26 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;
        if $r26 != r24 goto label19;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader> = null;
        goto label19;

     label15:
        $r27 := @caughtexception;

     label16:
        r5 = $r27;

     label17:
        $r28 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;
        if $r28 != r24 goto label18;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader> = null;

     label18:
        throw r5;

     label19:
        goto label0;

     label20:
        $r29 := @caughtexception;
        r6 = $r29;

     label21:
        $r30 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.lang.Thread leader>;
        if $r30 != null goto label22;

        $r31 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r32 = $r31[0];
        if $r32 == null goto label22;

        $r33 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.Condition available>;
        interfaceinvoke $r33.<java.util.concurrent.locks.Condition: void signal()>();

     label22:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r6;

        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label0 to label1 with label20;
        catch java.lang.Throwable from label3 to label5 with label20;
        catch java.lang.Throwable from label7 to label8 with label20;
        catch java.lang.Throwable from label10 to label21 with label20;
    }

    public void clear()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        int i0, $i1;
        java.util.concurrent.RunnableScheduledFuture r2;
        java.lang.Throwable r3, $r6;
        java.util.concurrent.RunnableScheduledFuture[] $r4, $r5;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        i0 = 0;

     label1:
        $i1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;
        if i0 >= $i1 goto label3;

        $r4 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        r2 = $r4[i0];
        if r2 == null goto label2;

        $r5 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $r5[i0] = null;
        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void setIndex(java.util.concurrent.RunnableScheduledFuture,int)>(r2, -1);

     label2:
        i0 = i0 + 1;
        goto label1;

     label3:
        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size> = 0;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label8;

     label5:
        $r6 := @caughtexception;

     label6:
        r3 = $r6;

     label7:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

     label8:
        return;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private java.util.concurrent.RunnableScheduledFuture pollExpired()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.RunnableScheduledFuture r1, $r4;
        java.util.concurrent.RunnableScheduledFuture[] $r2;
        java.util.concurrent.TimeUnit $r3;
        long $l0;
        byte $b1;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        $r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        r1 = $r2[0];
        if r1 == null goto label0;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
        $l0 = interfaceinvoke r1.<java.util.concurrent.RunnableScheduledFuture: long getDelay(java.util.concurrent.TimeUnit)>($r3);
        $b1 = $l0 cmp 0L;
        if $b1 <= 0 goto label1;

     label0:
        return null;

     label1:
        $r4 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture finishPoll(java.util.concurrent.RunnableScheduledFuture)>(r1);
        return $r4;
    }

    public int drainTo(java.util.Collection)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.Collection r1;
        java.util.concurrent.locks.ReentrantLock r2;
        int i0, i1;
        java.util.concurrent.RunnableScheduledFuture r3, $r7;
        java.lang.Throwable r4, $r8;
        java.lang.NullPointerException $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 := @parameter0: java.util.Collection;
        if r1 != null goto label0;

        $r5 = new java.lang.NullPointerException;
        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();
        throw $r5;

     label0:
        if r1 != r0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r6;

     label1:
        r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        i0 = 0;

     label3:
        $r7 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture pollExpired()>();
        r3 = $r7;
        if $r7 == null goto label4;

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>(r3);
        i0 = i0 + 1;
        goto label3;

     label4:
        i1 = i0;

     label5:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return i1;

     label6:
        $r8 := @caughtexception;

     label7:
        r4 = $r8;

     label8:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public int drainTo(java.util.Collection, int)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.Collection r1;
        int i0, i1, i2;
        java.util.concurrent.locks.ReentrantLock r2;
        java.util.concurrent.RunnableScheduledFuture r3, $r7;
        java.lang.Throwable r4, $r8;
        java.lang.NullPointerException $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 := @parameter0: java.util.Collection;
        i0 := @parameter1: int;
        if r1 != null goto label0;

        $r5 = new java.lang.NullPointerException;
        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();
        throw $r5;

     label0:
        if r1 != r0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r6;

     label1:
        if i0 > 0 goto label2;

        return 0;

     label2:
        r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label3:
        i1 = 0;

     label4:
        if i1 >= i0 goto label5;

        $r7 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture pollExpired()>();
        r3 = $r7;
        if $r7 == null goto label5;

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>(r3);
        i1 = i1 + 1;
        goto label4;

     label5:
        i2 = i1;

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return i2;

     label7:
        $r8 := @caughtexception;

     label8:
        r4 = $r8;

     label9:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public java.lang.Object[] toArray()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Object[] r2;
        java.lang.Throwable r3, $r5;
        java.util.concurrent.RunnableScheduledFuture[] $r4;
        int $i0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        $r4 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $i0 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;
        r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>($r4, $i0, class "[Ljava/lang/Object;");

     label1:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return r2;

     label2:
        $r5 := @caughtexception;

     label3:
        r3 = $r5;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Object[] r1, r3, $r7, r9;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r4, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.concurrent.RunnableScheduledFuture[] $r5, $r8;
        java.lang.Class $r6;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 := @parameter0: java.lang.Object[];
        r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        $i0 = lengthof r1;
        $i1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;
        if $i0 >= $i1 goto label2;

        $r5 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $i2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;
        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r7 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>($r5, $i2, $r6);
        r3 = (java.lang.Object[]) $r7;

     label1:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return r3;

     label2:
        $r8 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $i3 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r1, 0, $i3);
        $i4 = lengthof r1;
        $i5 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;
        if $i4 <= $i5 goto label3;

        $i6 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;
        r1[$i6] = null;

     label3:
        r9 = r1;

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return r9;

     label5:
        $r10 := @caughtexception;

     label6:
        r4 = $r10;

     label7:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

        catch java.lang.Throwable from label0 to label1 with label5;
        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr $r1;
        java.util.concurrent.RunnableScheduledFuture[] $r2, $r4;
        int $i0;
        java.lang.Object[] $r3;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        $r1 = new java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr;
        $r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture[] queue>;
        $i0 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: int size>;
        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);
        $r4 = (java.util.concurrent.RunnableScheduledFuture[]) $r3;
        specialinvoke $r1.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: void <init>(java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue,java.util.concurrent.RunnableScheduledFuture[])>(r0, $r4);
        return $r1;
    }

    public volatile boolean add(java.lang.Object)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Object r1;
        java.lang.Runnable $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.lang.Runnable) r1;
        $z0 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: boolean add(java.lang.Runnable)>($r2);
        return $z0;
    }

    public volatile java.lang.Object peek()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.RunnableScheduledFuture $r1;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        $r1 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture peek()>();
        return $r1;
    }

    public volatile java.lang.Object poll()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.RunnableScheduledFuture $r1;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        $r1 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture poll()>();
        return $r1;
    }

    public volatile boolean offer(java.lang.Object)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Object r1;
        java.lang.Runnable $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.lang.Runnable) r1;
        $z0 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: boolean offer(java.lang.Runnable)>($r2);
        return $z0;
    }

    public volatile java.lang.Object poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.RunnableScheduledFuture $r2;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.concurrent.TimeUnit;
        $r2 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture poll(long,java.util.concurrent.TimeUnit)>(l0, r1);
        return $r2;
    }

    public volatile java.lang.Object take() throws java.lang.InterruptedException
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.util.concurrent.RunnableScheduledFuture $r1;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        $r1 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: java.util.concurrent.RunnableScheduledFuture take()>();
        return $r1;
    }

    public volatile boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Object r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        java.lang.Runnable $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 := @parameter0: java.lang.Object;
        l0 := @parameter1: long;
        r2 := @parameter2: java.util.concurrent.TimeUnit;
        $r3 = (java.lang.Runnable) r1;
        $z0 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: boolean offer(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r3, l0, r2);
        return $z0;
    }

    public volatile void put(java.lang.Object) throws java.lang.InterruptedException
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue r0;
        java.lang.Object r1;
        java.lang.Runnable $r2;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.lang.Runnable) r1;
        virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: void put(java.lang.Runnable)>($r2);
        return;
    }
}
