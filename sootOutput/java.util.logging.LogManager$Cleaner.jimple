class java.util.logging.LogManager$Cleaner extends java.lang.Thread
{
    final java.util.logging.LogManager this$0;

    private void <init>(java.util.logging.LogManager)
    {
        java.util.logging.LogManager$Cleaner r0;
        java.util.logging.LogManager r1;

        r0 := @this: java.util.logging.LogManager$Cleaner;
        r1 := @parameter0: java.util.logging.LogManager;
        r0.<java.util.logging.LogManager$Cleaner: java.util.logging.LogManager this$0> = r1;
        specialinvoke r0.<java.lang.Thread: void <init>()>();
        virtualinvoke r0.<java.util.logging.LogManager$Cleaner: void setContextClassLoader(java.lang.ClassLoader)>(null);
        return;
    }

    public void run()
    {
        java.util.logging.LogManager$Cleaner r0;
        java.util.logging.LogManager r2, $r4, $r5, $r6, $r8;
        java.lang.Throwable r3, $r7;

        r0 := @this: java.util.logging.LogManager$Cleaner;
        staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager access$100()>();
        $r4 = r0.<java.util.logging.LogManager$Cleaner: java.util.logging.LogManager this$0>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<java.util.logging.LogManager$Cleaner: java.util.logging.LogManager this$0>;
        staticinvoke <java.util.logging.LogManager: boolean access$602(java.util.logging.LogManager,boolean)>($r5, 1);
        $r6 = r0.<java.util.logging.LogManager$Cleaner: java.util.logging.LogManager this$0>;
        staticinvoke <java.util.logging.LogManager: boolean access$702(java.util.logging.LogManager,boolean)>($r6, 1);
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r7 := @caughtexception;

     label3:
        r3 = $r7;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        $r8 = r0.<java.util.logging.LogManager$Cleaner: java.util.logging.LogManager this$0>;
        virtualinvoke $r8.<java.util.logging.LogManager: void reset()>();
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    void <init>(java.util.logging.LogManager, java.util.logging.LogManager$1)
    {
        java.util.logging.LogManager$Cleaner r0;
        java.util.logging.LogManager r1;
        java.util.logging.LogManager$1 r2;

        r0 := @this: java.util.logging.LogManager$Cleaner;
        r1 := @parameter0: java.util.logging.LogManager;
        r2 := @parameter1: java.util.logging.LogManager$1;
        specialinvoke r0.<java.util.logging.LogManager$Cleaner: void <init>(java.util.logging.LogManager)>(r1);
        return;
    }
}
