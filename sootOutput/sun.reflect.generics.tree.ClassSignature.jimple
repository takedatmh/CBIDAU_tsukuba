public class sun.reflect.generics.tree.ClassSignature extends java.lang.Object implements sun.reflect.generics.tree.Signature
{
    private sun.reflect.generics.tree.FormalTypeParameter[] formalTypeParams;
    private sun.reflect.generics.tree.ClassTypeSignature superclass;
    private sun.reflect.generics.tree.ClassTypeSignature[] superInterfaces;

    private void <init>(sun.reflect.generics.tree.FormalTypeParameter[], sun.reflect.generics.tree.ClassTypeSignature, sun.reflect.generics.tree.ClassTypeSignature[])
    {
        sun.reflect.generics.tree.ClassSignature r0;
        sun.reflect.generics.tree.FormalTypeParameter[] r1;
        sun.reflect.generics.tree.ClassTypeSignature r2;
        sun.reflect.generics.tree.ClassTypeSignature[] r3;

        r0 := @this: sun.reflect.generics.tree.ClassSignature;
        r1 := @parameter0: sun.reflect.generics.tree.FormalTypeParameter[];
        r2 := @parameter1: sun.reflect.generics.tree.ClassTypeSignature;
        r3 := @parameter2: sun.reflect.generics.tree.ClassTypeSignature[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.reflect.generics.tree.ClassSignature: sun.reflect.generics.tree.FormalTypeParameter[] formalTypeParams> = r1;
        r0.<sun.reflect.generics.tree.ClassSignature: sun.reflect.generics.tree.ClassTypeSignature superclass> = r2;
        r0.<sun.reflect.generics.tree.ClassSignature: sun.reflect.generics.tree.ClassTypeSignature[] superInterfaces> = r3;
        return;
    }

    public static sun.reflect.generics.tree.ClassSignature make(sun.reflect.generics.tree.FormalTypeParameter[], sun.reflect.generics.tree.ClassTypeSignature, sun.reflect.generics.tree.ClassTypeSignature[])
    {
        sun.reflect.generics.tree.FormalTypeParameter[] r0;
        sun.reflect.generics.tree.ClassTypeSignature r1;
        sun.reflect.generics.tree.ClassTypeSignature[] r2;
        sun.reflect.generics.tree.ClassSignature $r3;

        r0 := @parameter0: sun.reflect.generics.tree.FormalTypeParameter[];
        r1 := @parameter1: sun.reflect.generics.tree.ClassTypeSignature;
        r2 := @parameter2: sun.reflect.generics.tree.ClassTypeSignature[];
        $r3 = new sun.reflect.generics.tree.ClassSignature;
        specialinvoke $r3.<sun.reflect.generics.tree.ClassSignature: void <init>(sun.reflect.generics.tree.FormalTypeParameter[],sun.reflect.generics.tree.ClassTypeSignature,sun.reflect.generics.tree.ClassTypeSignature[])>(r0, r1, r2);
        return $r3;
    }

    public sun.reflect.generics.tree.FormalTypeParameter[] getFormalTypeParameters()
    {
        sun.reflect.generics.tree.ClassSignature r0;
        sun.reflect.generics.tree.FormalTypeParameter[] $r1;

        r0 := @this: sun.reflect.generics.tree.ClassSignature;
        $r1 = r0.<sun.reflect.generics.tree.ClassSignature: sun.reflect.generics.tree.FormalTypeParameter[] formalTypeParams>;
        return $r1;
    }

    public sun.reflect.generics.tree.ClassTypeSignature getSuperclass()
    {
        sun.reflect.generics.tree.ClassSignature r0;
        sun.reflect.generics.tree.ClassTypeSignature $r1;

        r0 := @this: sun.reflect.generics.tree.ClassSignature;
        $r1 = r0.<sun.reflect.generics.tree.ClassSignature: sun.reflect.generics.tree.ClassTypeSignature superclass>;
        return $r1;
    }

    public sun.reflect.generics.tree.ClassTypeSignature[] getSuperInterfaces()
    {
        sun.reflect.generics.tree.ClassSignature r0;
        sun.reflect.generics.tree.ClassTypeSignature[] $r1;

        r0 := @this: sun.reflect.generics.tree.ClassSignature;
        $r1 = r0.<sun.reflect.generics.tree.ClassSignature: sun.reflect.generics.tree.ClassTypeSignature[] superInterfaces>;
        return $r1;
    }

    public void accept(sun.reflect.generics.visitor.Visitor)
    {
        sun.reflect.generics.tree.ClassSignature r0;
        sun.reflect.generics.visitor.Visitor r1;

        r0 := @this: sun.reflect.generics.tree.ClassSignature;
        r1 := @parameter0: sun.reflect.generics.visitor.Visitor;
        interfaceinvoke r1.<sun.reflect.generics.visitor.Visitor: void visitClassSignature(sun.reflect.generics.tree.ClassSignature)>(r0);
        return;
    }
}
