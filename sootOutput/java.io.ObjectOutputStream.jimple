public class java.io.ObjectOutputStream extends java.io.OutputStream implements java.io.ObjectOutput, java.io.ObjectStreamConstants
{
    private final java.io.ObjectOutputStream$BlockDataOutputStream bout;
    private final java.io.ObjectOutputStream$HandleTable handles;
    private final java.io.ObjectOutputStream$ReplaceTable subs;
    private int protocol;
    private int depth;
    private byte[] primVals;
    private final boolean enableOverride;
    private boolean enableReplace;
    private java.io.SerialCallbackContext curContext;
    private java.io.ObjectOutputStream$PutFieldImpl curPut;
    private final java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack;
    private static final boolean extendedDebugInfo;

    public void <init>(java.io.OutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.OutputStream r1;
        java.io.ObjectOutputStream$BlockDataOutputStream $r2, $r5;
        java.io.ObjectOutputStream$HandleTable $r3;
        java.io.ObjectOutputStream$ReplaceTable $r4;
        boolean $z1;
        java.io.ObjectOutputStream$DebugTraceInfoStack $r6;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.io.OutputStream;
        specialinvoke r0.<java.io.OutputStream: void <init>()>();
        r0.<java.io.ObjectOutputStream: int protocol> = 2;
        specialinvoke r0.<java.io.ObjectOutputStream: void verifySubclass()>();
        $r2 = new java.io.ObjectOutputStream$BlockDataOutputStream;
        specialinvoke $r2.<java.io.ObjectOutputStream$BlockDataOutputStream: void <init>(java.io.OutputStream)>(r1);
        r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout> = $r2;
        $r3 = new java.io.ObjectOutputStream$HandleTable;
        specialinvoke $r3.<java.io.ObjectOutputStream$HandleTable: void <init>(int,float)>(10, 3.0F);
        r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$HandleTable handles> = $r3;
        $r4 = new java.io.ObjectOutputStream$ReplaceTable;
        specialinvoke $r4.<java.io.ObjectOutputStream$ReplaceTable: void <init>(int,float)>(10, 3.0F);
        r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$ReplaceTable subs> = $r4;
        r0.<java.io.ObjectOutputStream: boolean enableOverride> = 0;
        virtualinvoke r0.<java.io.ObjectOutputStream: void writeStreamHeader()>();
        $r5 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r5.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(1);
        $z1 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z1 == 0 goto label0;

        $r6 = new java.io.ObjectOutputStream$DebugTraceInfoStack;
        specialinvoke $r6.<java.io.ObjectOutputStream$DebugTraceInfoStack: void <init>()>();
        r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack> = $r6;
        goto label1;

     label0:
        r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack> = null;

     label1:
        return;
    }

    protected void <init>() throws java.io.IOException, java.lang.SecurityException
    {
        java.io.ObjectOutputStream r0;
        java.lang.SecurityManager r1;
        java.io.SerializablePermission $r2;

        r0 := @this: java.io.ObjectOutputStream;
        specialinvoke r0.<java.io.OutputStream: void <init>()>();
        r0.<java.io.ObjectOutputStream: int protocol> = 2;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = <java.io.ObjectOutputStream: java.io.SerializablePermission SUBCLASS_IMPLEMENTATION_PERMISSION>;
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label0:
        r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout> = null;
        r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$HandleTable handles> = null;
        r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$ReplaceTable subs> = null;
        r0.<java.io.ObjectOutputStream: boolean enableOverride> = 1;
        r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack> = null;
        return;
    }

    public void useProtocolVersion(int) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        int i0, $i1;
        java.io.ObjectOutputStream$HandleTable $r1;
        java.lang.IllegalStateException $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: java.io.ObjectOutputStream;
        i0 := @parameter0: int;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$HandleTable handles>;
        $i1 = virtualinvoke $r1.<java.io.ObjectOutputStream$HandleTable: int size()>();
        if $i1 == 0 goto label0;

        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("stream non-empty");
        throw $r2;

     label0:
        lookupswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label1;
            default: goto label2;
        };

     label1:
        r0.<java.io.ObjectOutputStream: int protocol> = i0;
        goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown version: ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r3;

     label3:
        return;
    }

    public final void writeObject(java.lang.Object) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1;
        java.io.IOException r2, $r3;
        boolean $z0;
        int $i0;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.lang.Object;
        $z0 = r0.<java.io.ObjectOutputStream: boolean enableOverride>;
        if $z0 == 0 goto label0;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObjectOverride(java.lang.Object)>(r1);
        return;

     label0:
        specialinvoke r0.<java.io.ObjectOutputStream: void writeObject0(java.lang.Object,boolean)>(r1, 0);

     label1:
        goto label4;

     label2:
        $r3 := @caughtexception;
        r2 = $r3;
        $i0 = r0.<java.io.ObjectOutputStream: int depth>;
        if $i0 != 0 goto label3;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeFatalException(java.io.IOException)>(r2);

     label3:
        throw r2;

     label4:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    protected void writeObjectOverride(java.lang.Object) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.lang.Object;
        return;
    }

    public void writeUnshared(java.lang.Object) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1;
        java.io.IOException r2, $r3;
        int $i0;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.lang.Object;

     label0:
        specialinvoke r0.<java.io.ObjectOutputStream: void writeObject0(java.lang.Object,boolean)>(r1, 1);

     label1:
        goto label4;

     label2:
        $r3 := @caughtexception;
        r2 = $r3;
        $i0 = r0.<java.io.ObjectOutputStream: int depth>;
        if $i0 != 0 goto label3;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeFatalException(java.io.IOException)>(r2);

     label3:
        throw r2;

     label4:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public void defaultWriteObject() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.SerialCallbackContext r1;
        java.lang.Object r2;
        java.io.ObjectStreamClass r3;
        java.io.NotActiveException $r4;
        java.io.ObjectOutputStream$BlockDataOutputStream $r5, $r6;

        r0 := @this: java.io.ObjectOutputStream;
        r1 = r0.<java.io.ObjectOutputStream: java.io.SerialCallbackContext curContext>;
        if r1 != null goto label0;

        $r4 = new java.io.NotActiveException;
        specialinvoke $r4.<java.io.NotActiveException: void <init>(java.lang.String)>("not in call to writeObject");
        throw $r4;

     label0:
        r2 = virtualinvoke r1.<java.io.SerialCallbackContext: java.lang.Object getObj()>();
        r3 = virtualinvoke r1.<java.io.SerialCallbackContext: java.io.ObjectStreamClass getDesc()>();
        $r5 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r5.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(0);
        specialinvoke r0.<java.io.ObjectOutputStream: void defaultWriteFields(java.lang.Object,java.io.ObjectStreamClass)>(r2, r3);
        $r6 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r6.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(1);
        return;
    }

    public java.io.ObjectOutputStream$PutField putFields() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.SerialCallbackContext r1;
        java.io.ObjectStreamClass r3;
        java.io.ObjectOutputStream$PutFieldImpl $r4, $r6, $r7;
        java.io.NotActiveException $r5;

        r0 := @this: java.io.ObjectOutputStream;
        $r4 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutFieldImpl curPut>;
        if $r4 != null goto label1;

        r1 = r0.<java.io.ObjectOutputStream: java.io.SerialCallbackContext curContext>;
        if r1 != null goto label0;

        $r5 = new java.io.NotActiveException;
        specialinvoke $r5.<java.io.NotActiveException: void <init>(java.lang.String)>("not in call to writeObject");
        throw $r5;

     label0:
        virtualinvoke r1.<java.io.SerialCallbackContext: java.lang.Object getObj()>();
        r3 = virtualinvoke r1.<java.io.SerialCallbackContext: java.io.ObjectStreamClass getDesc()>();
        $r6 = new java.io.ObjectOutputStream$PutFieldImpl;
        specialinvoke $r6.<java.io.ObjectOutputStream$PutFieldImpl: void <init>(java.io.ObjectOutputStream,java.io.ObjectStreamClass)>(r0, r3);
        r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutFieldImpl curPut> = $r6;

     label1:
        $r7 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutFieldImpl curPut>;
        return $r7;
    }

    public void writeFields() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.ObjectOutputStream$PutFieldImpl $r1, $r4;
        java.io.NotActiveException $r2;
        java.io.ObjectOutputStream$BlockDataOutputStream $r3, $r5;

        r0 := @this: java.io.ObjectOutputStream;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutFieldImpl curPut>;
        if $r1 != null goto label0;

        $r2 = new java.io.NotActiveException;
        specialinvoke $r2.<java.io.NotActiveException: void <init>(java.lang.String)>("no current PutField object");
        throw $r2;

     label0:
        $r3 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r3.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(0);
        $r4 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutFieldImpl curPut>;
        virtualinvoke $r4.<java.io.ObjectOutputStream$PutFieldImpl: void writeFields()>();
        $r5 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r5.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(1);
        return;
    }

    public void reset() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        int $i0;
        java.io.IOException $r1;
        java.io.ObjectOutputStream$BlockDataOutputStream $r2, $r3, $r4;

        r0 := @this: java.io.ObjectOutputStream;
        $i0 = r0.<java.io.ObjectOutputStream: int depth>;
        if $i0 == 0 goto label0;

        $r1 = new java.io.IOException;
        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("stream active");
        throw $r1;

     label0:
        $r2 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r2.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(0);
        $r3 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r3.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeByte(int)>(121);
        specialinvoke r0.<java.io.ObjectOutputStream: void clear()>();
        $r4 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r4.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(1);
        return;
    }

    protected void annotateClass(java.lang.Class) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Class r1;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.lang.Class;
        return;
    }

    protected void annotateProxyClass(java.lang.Class) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Class r1;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.lang.Class;
        return;
    }

    protected java.lang.Object replaceObject(java.lang.Object) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.lang.Object;
        return r1;
    }

    protected boolean enableReplaceObject(boolean) throws java.lang.SecurityException
    {
        java.io.ObjectOutputStream r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.SecurityManager r1;
        java.io.SerializablePermission $r2;

        r0 := @this: java.io.ObjectOutputStream;
        z0 := @parameter0: boolean;
        $z1 = r0.<java.io.ObjectOutputStream: boolean enableReplace>;
        if z0 != $z1 goto label0;

        return z0;

     label0:
        if z0 == 0 goto label1;

        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label1;

        $r2 = <java.io.ObjectOutputStream: java.io.SerializablePermission SUBSTITUTION_PERMISSION>;
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label1:
        r0.<java.io.ObjectOutputStream: boolean enableReplace> = z0;
        $z2 = r0.<java.io.ObjectOutputStream: boolean enableReplace>;
        if $z2 != 0 goto label2;

        $z3 = 1;
        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    protected void writeStreamHeader() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.ObjectOutputStream$BlockDataOutputStream $r1, $r2;

        r0 := @this: java.io.ObjectOutputStream;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r1.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeShort(int)>(-21267);
        $r2 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r2.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeShort(int)>(5);
        return;
    }

    protected void writeClassDescriptor(java.io.ObjectStreamClass) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.ObjectStreamClass r1;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.io.ObjectStreamClass;
        virtualinvoke r1.<java.io.ObjectStreamClass: void writeNonProxy(java.io.ObjectOutputStream)>(r0);
        return;
    }

    public void write(int) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        int i0;
        java.io.ObjectOutputStream$BlockDataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;
        i0 := @parameter0: int;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r1.<java.io.ObjectOutputStream$BlockDataOutputStream: void write(int)>(i0);
        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        byte[] r1;
        java.io.ObjectOutputStream$BlockDataOutputStream $r2;
        int $i0;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: byte[];
        $r2 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i0 = lengthof r1;
        virtualinvoke $r2.<java.io.ObjectOutputStream$BlockDataOutputStream: void write(byte[],int,int,boolean)>(r1, 0, $i0, 0);
        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        byte[] r1;
        int i0, i1, i2, $i3;
        java.lang.NullPointerException $r2;
        java.lang.IndexOutOfBoundsException $r3;
        java.io.ObjectOutputStream$BlockDataOutputStream $r4;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        i2 = i0 + i1;
        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i3 = lengthof r1;
        if i2 > $i3 goto label1;

        if i2 >= 0 goto label2;

     label1:
        $r3 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r3;

     label2:
        $r4 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r4.<java.io.ObjectOutputStream$BlockDataOutputStream: void write(byte[],int,int,boolean)>(r1, i0, i1, 0);
        return;
    }

    public void flush() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.ObjectOutputStream$BlockDataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r1.<java.io.ObjectOutputStream$BlockDataOutputStream: void flush()>();
        return;
    }

    protected void drain() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.ObjectOutputStream$BlockDataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r1.<java.io.ObjectOutputStream$BlockDataOutputStream: void drain()>();
        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.ObjectOutputStream$BlockDataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;
        virtualinvoke r0.<java.io.ObjectOutputStream: void flush()>();
        specialinvoke r0.<java.io.ObjectOutputStream: void clear()>();
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r1.<java.io.ObjectOutputStream$BlockDataOutputStream: void close()>();
        return;
    }

    public void writeBoolean(boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        boolean z0;
        java.io.ObjectOutputStream$BlockDataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;
        z0 := @parameter0: boolean;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r1.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeBoolean(boolean)>(z0);
        return;
    }

    public void writeByte(int) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        int i0;
        java.io.ObjectOutputStream$BlockDataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;
        i0 := @parameter0: int;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r1.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeByte(int)>(i0);
        return;
    }

    public void writeShort(int) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        int i0;
        java.io.ObjectOutputStream$BlockDataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;
        i0 := @parameter0: int;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r1.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeShort(int)>(i0);
        return;
    }

    public void writeChar(int) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        int i0;
        java.io.ObjectOutputStream$BlockDataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;
        i0 := @parameter0: int;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r1.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeChar(int)>(i0);
        return;
    }

    public void writeInt(int) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        int i0;
        java.io.ObjectOutputStream$BlockDataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;
        i0 := @parameter0: int;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r1.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeInt(int)>(i0);
        return;
    }

    public void writeLong(long) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        long l0;
        java.io.ObjectOutputStream$BlockDataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;
        l0 := @parameter0: long;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r1.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeLong(long)>(l0);
        return;
    }

    public void writeFloat(float) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        float f0;
        java.io.ObjectOutputStream$BlockDataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;
        f0 := @parameter0: float;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r1.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeFloat(float)>(f0);
        return;
    }

    public void writeDouble(double) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        double d0;
        java.io.ObjectOutputStream$BlockDataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;
        d0 := @parameter0: double;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r1.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeDouble(double)>(d0);
        return;
    }

    public void writeBytes(java.lang.String) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.String r1;
        java.io.ObjectOutputStream$BlockDataOutputStream $r2;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.lang.String;
        $r2 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r2.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeBytes(java.lang.String)>(r1);
        return;
    }

    public void writeChars(java.lang.String) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.String r1;
        java.io.ObjectOutputStream$BlockDataOutputStream $r2;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.lang.String;
        $r2 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r2.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeChars(java.lang.String)>(r1);
        return;
    }

    public void writeUTF(java.lang.String) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.String r1;
        java.io.ObjectOutputStream$BlockDataOutputStream $r2;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.lang.String;
        $r2 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r2.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeUTF(java.lang.String)>(r1);
        return;
    }

    int getProtocolVersion()
    {
        java.io.ObjectOutputStream r0;
        int $i0;

        r0 := @this: java.io.ObjectOutputStream;
        $i0 = r0.<java.io.ObjectOutputStream: int protocol>;
        return $i0;
    }

    void writeTypeString(java.lang.String) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.String r1;
        int i0, $i1;
        java.io.ObjectOutputStream$HandleTable $r2;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeNull()>();
        goto label2;

     label0:
        $r2 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$HandleTable handles>;
        $i1 = virtualinvoke $r2.<java.io.ObjectOutputStream$HandleTable: int lookup(java.lang.Object)>(r1);
        i0 = $i1;
        if $i1 == -1 goto label1;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeHandle(int)>(i0);
        goto label2;

     label1:
        specialinvoke r0.<java.io.ObjectOutputStream: void writeString(java.lang.String,boolean)>(r1, 0);

     label2:
        return;
    }

    private void verifySubclass()
    {
        java.io.ObjectOutputStream r0;
        java.lang.Class r1;
        java.lang.SecurityManager r2;
        java.lang.ref.ReferenceQueue $r3, $r6;
        java.io.ObjectStreamClass$WeakClassKey r4, $r8;
        java.lang.Boolean r5;
        java.util.concurrent.ConcurrentMap $r7, $r9, $r11;
        java.lang.Object $r10;
        boolean $z0, $z1;
        java.io.SerializablePermission $r13;

        r0 := @this: java.io.ObjectOutputStream;
        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        if r1 != class "java/io/ObjectOutputStream" goto label0;

        return;

     label0:
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 != null goto label1;

        return;

     label1:
        $r6 = <java.io.ObjectOutputStream$Caches: java.lang.ref.ReferenceQueue subclassAuditsQueue>;
        $r7 = <java.io.ObjectOutputStream$Caches: java.util.concurrent.ConcurrentMap subclassAudits>;
        staticinvoke <java.io.ObjectStreamClass: void processQueue(java.lang.ref.ReferenceQueue,java.util.concurrent.ConcurrentMap)>($r6, $r7);
        $r8 = new java.io.ObjectStreamClass$WeakClassKey;
        $r3 = <java.io.ObjectOutputStream$Caches: java.lang.ref.ReferenceQueue subclassAuditsQueue>;
        specialinvoke $r8.<java.io.ObjectStreamClass$WeakClassKey: void <init>(java.lang.Class,java.lang.ref.ReferenceQueue)>(r1, $r3);
        r4 = $r8;
        $r9 = <java.io.ObjectOutputStream$Caches: java.util.concurrent.ConcurrentMap subclassAudits>;
        $r10 = interfaceinvoke $r9.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r4);
        r5 = (java.lang.Boolean) $r10;
        if r5 != null goto label2;

        $z0 = staticinvoke <java.io.ObjectOutputStream: boolean auditSubclass(java.lang.Class)>(r1);
        r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);
        $r11 = <java.io.ObjectOutputStream$Caches: java.util.concurrent.ConcurrentMap subclassAudits>;
        interfaceinvoke $r11.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r4, r5);

     label2:
        $z1 = virtualinvoke r5.<java.lang.Boolean: boolean booleanValue()>();
        if $z1 == 0 goto label3;

        return;

     label3:
        $r13 = <java.io.ObjectOutputStream: java.io.SerializablePermission SUBCLASS_IMPLEMENTATION_PERMISSION>;
        virtualinvoke r2.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r13);
        return;
    }

    private static boolean auditSubclass(java.lang.Class)
    {
        java.lang.Class r0;
        java.io.ObjectOutputStream$1 $r1;
        java.lang.Boolean r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;
        $r1 = new java.io.ObjectOutputStream$1;
        specialinvoke $r1.<java.io.ObjectOutputStream$1: void <init>(java.lang.Class)>(r0);
        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        r2 = (java.lang.Boolean) $r3;
        $z0 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();
        return $z0;
    }

    private void clear()
    {
        java.io.ObjectOutputStream r0;
        java.io.ObjectOutputStream$ReplaceTable $r1;
        java.io.ObjectOutputStream$HandleTable $r2;

        r0 := @this: java.io.ObjectOutputStream;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$ReplaceTable subs>;
        virtualinvoke $r1.<java.io.ObjectOutputStream$ReplaceTable: void clear()>();
        $r2 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$HandleTable handles>;
        virtualinvoke $r2.<java.io.ObjectOutputStream$HandleTable: void clear()>();
        return;
    }

    private void writeObject0(java.lang.Object, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1, r2, $r10, r11, $r23, r25;
        boolean z0, z1, $z4, $z6, $z8, $z9, $z12, $z14, $z16, $z17, $z18, $z19, $z20;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25;
        java.lang.Class r3, r5, $r17, $r24, $r32;
        java.io.ObjectStreamClass r4, $r20, $r35;
        java.lang.Throwable r6, $r53;
        java.io.ObjectOutputStream$BlockDataOutputStream $r7, $r13, $r16, $r19, $r22, $r28, $r31, $r34, $r37, $r52, $r55;
        java.io.ObjectOutputStream$ReplaceTable $r9, $r26;
        java.io.ObjectOutputStream$HandleTable $r14, $r29;
        java.lang.String $r38, $r42, $r46, $r48, $r50;
        java.lang.Enum $r39;
        java.io.NotSerializableException $r40, $r49;
        java.lang.StringBuilder $r41, $r43, $r44, $r47;
        java.io.ObjectOutputStream$DebugTraceInfoStack $r45;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.lang.Object;
        z0 := @parameter1: boolean;
        $r7 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        z1 = virtualinvoke $r7.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(0);
        $i1 = r0.<java.io.ObjectOutputStream: int depth>;
        $i2 = $i1 + 1;
        r0.<java.io.ObjectOutputStream: int depth> = $i2;

     label0:
        $r9 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$ReplaceTable subs>;
        $r10 = virtualinvoke $r9.<java.io.ObjectOutputStream$ReplaceTable: java.lang.Object lookup(java.lang.Object)>(r1);
        r11 = $r10;
        if $r10 != null goto label2;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeNull()>();

     label1:
        $i3 = r0.<java.io.ObjectOutputStream: int depth>;
        $i4 = $i3 - 1;
        r0.<java.io.ObjectOutputStream: int depth> = $i4;
        $r13 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r13.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(z1);
        return;

     label2:
        if z0 != 0 goto label4;

        $r14 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$HandleTable handles>;
        $i5 = virtualinvoke $r14.<java.io.ObjectOutputStream$HandleTable: int lookup(java.lang.Object)>(r11);
        i0 = $i5;
        if $i5 == -1 goto label4;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeHandle(int)>(i0);

     label3:
        $i6 = r0.<java.io.ObjectOutputStream: int depth>;
        $i7 = $i6 - 1;
        r0.<java.io.ObjectOutputStream: int depth> = $i7;
        $r16 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r16.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(z1);
        return;

     label4:
        $z4 = r11 instanceof java.lang.Class;
        if $z4 == 0 goto label6;

        $r17 = (java.lang.Class) r11;
        specialinvoke r0.<java.io.ObjectOutputStream: void writeClass(java.lang.Class,boolean)>($r17, z0);

     label5:
        $i8 = r0.<java.io.ObjectOutputStream: int depth>;
        $i9 = $i8 - 1;
        r0.<java.io.ObjectOutputStream: int depth> = $i9;
        $r19 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r19.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(z1);
        return;

     label6:
        $z6 = r11 instanceof java.io.ObjectStreamClass;
        if $z6 == 0 goto label8;

        $r20 = (java.io.ObjectStreamClass) r11;
        specialinvoke r0.<java.io.ObjectOutputStream: void writeClassDesc(java.io.ObjectStreamClass,boolean)>($r20, z0);

     label7:
        $i10 = r0.<java.io.ObjectOutputStream: int depth>;
        $i11 = $i10 - 1;
        r0.<java.io.ObjectOutputStream: int depth> = $i11;
        $r22 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r22.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(z1);
        return;

     label8:
        r2 = r11;
        r3 = virtualinvoke r11.<java.lang.Object: java.lang.Class getClass()>();

     label9:
        r4 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class,boolean)>(r3, 1);
        $z8 = virtualinvoke r4.<java.io.ObjectStreamClass: boolean hasWriteReplaceMethod()>();
        if $z8 == 0 goto label11;

        $r23 = virtualinvoke r4.<java.io.ObjectStreamClass: java.lang.Object invokeWriteReplace(java.lang.Object)>(r11);
        r11 = $r23;
        if $r23 == null goto label11;

        $r24 = virtualinvoke r11.<java.lang.Object: java.lang.Class getClass()>();
        r5 = $r24;
        if $r24 != r3 goto label10;

        goto label11;

     label10:
        r3 = r5;
        goto label9;

     label11:
        $z9 = r0.<java.io.ObjectOutputStream: boolean enableReplace>;
        if $z9 == 0 goto label13;

        r25 = virtualinvoke r0.<java.io.ObjectOutputStream: java.lang.Object replaceObject(java.lang.Object)>(r11);
        if r25 == r11 goto label12;

        if r25 == null goto label12;

        r3 = virtualinvoke r25.<java.lang.Object: java.lang.Class getClass()>();
        r4 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class,boolean)>(r3, 1);

     label12:
        r11 = r25;

     label13:
        if r11 == r2 goto label21;

        $r26 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$ReplaceTable subs>;
        virtualinvoke $r26.<java.io.ObjectOutputStream$ReplaceTable: void assign(java.lang.Object,java.lang.Object)>(r2, r11);
        if r11 != null goto label15;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeNull()>();

     label14:
        $i12 = r0.<java.io.ObjectOutputStream: int depth>;
        $i13 = $i12 - 1;
        r0.<java.io.ObjectOutputStream: int depth> = $i13;
        $r28 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r28.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(z1);
        return;

     label15:
        if z0 != 0 goto label17;

        $r29 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$HandleTable handles>;
        $i14 = virtualinvoke $r29.<java.io.ObjectOutputStream$HandleTable: int lookup(java.lang.Object)>(r11);
        i15 = $i14;
        if $i14 == -1 goto label17;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeHandle(int)>(i15);

     label16:
        $i16 = r0.<java.io.ObjectOutputStream: int depth>;
        $i17 = $i16 - 1;
        r0.<java.io.ObjectOutputStream: int depth> = $i17;
        $r31 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r31.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(z1);
        return;

     label17:
        $z12 = r11 instanceof java.lang.Class;
        if $z12 == 0 goto label19;

        $r32 = (java.lang.Class) r11;
        specialinvoke r0.<java.io.ObjectOutputStream: void writeClass(java.lang.Class,boolean)>($r32, z0);

     label18:
        $i18 = r0.<java.io.ObjectOutputStream: int depth>;
        $i19 = $i18 - 1;
        r0.<java.io.ObjectOutputStream: int depth> = $i19;
        $r34 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r34.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(z1);
        return;

     label19:
        $z14 = r11 instanceof java.io.ObjectStreamClass;
        if $z14 == 0 goto label21;

        $r35 = (java.io.ObjectStreamClass) r11;
        specialinvoke r0.<java.io.ObjectOutputStream: void writeClassDesc(java.io.ObjectStreamClass,boolean)>($r35, z0);

     label20:
        $i20 = r0.<java.io.ObjectOutputStream: int depth>;
        $i21 = $i20 - 1;
        r0.<java.io.ObjectOutputStream: int depth> = $i21;
        $r37 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r37.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(z1);
        return;

     label21:
        $z16 = r11 instanceof java.lang.String;
        if $z16 == 0 goto label22;

        $r38 = (java.lang.String) r11;
        specialinvoke r0.<java.io.ObjectOutputStream: void writeString(java.lang.String,boolean)>($r38, z0);
        goto label27;

     label22:
        $z17 = virtualinvoke r3.<java.lang.Class: boolean isArray()>();
        if $z17 == 0 goto label23;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeArray(java.lang.Object,java.io.ObjectStreamClass,boolean)>(r11, r4, z0);
        goto label27;

     label23:
        $z18 = r11 instanceof java.lang.Enum;
        if $z18 == 0 goto label24;

        $r39 = (java.lang.Enum) r11;
        specialinvoke r0.<java.io.ObjectOutputStream: void writeEnum(java.lang.Enum,java.io.ObjectStreamClass,boolean)>($r39, r4, z0);
        goto label27;

     label24:
        $z19 = r11 instanceof java.io.Serializable;
        if $z19 == 0 goto label25;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)>(r11, r4, z0);
        goto label27;

     label25:
        $z20 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z20 == 0 goto label26;

        $r40 = new java.io.NotSerializableException;
        $r41 = new java.lang.StringBuilder;
        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();
        $r42 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();
        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);
        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r45 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        $r46 = virtualinvoke $r45.<java.io.ObjectOutputStream$DebugTraceInfoStack: java.lang.String toString()>();
        $r47 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);
        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r40.<java.io.NotSerializableException: void <init>(java.lang.String)>($r48);
        throw $r40;

     label26:
        $r49 = new java.io.NotSerializableException;
        $r50 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();
        specialinvoke $r49.<java.io.NotSerializableException: void <init>(java.lang.String)>($r50);
        throw $r49;

     label27:
        $i22 = r0.<java.io.ObjectOutputStream: int depth>;
        $i23 = $i22 - 1;
        r0.<java.io.ObjectOutputStream: int depth> = $i23;
        $r52 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r52.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(z1);
        goto label31;

     label28:
        $r53 := @caughtexception;

     label29:
        r6 = $r53;

     label30:
        $i24 = r0.<java.io.ObjectOutputStream: int depth>;
        $i25 = $i24 - 1;
        r0.<java.io.ObjectOutputStream: int depth> = $i25;
        $r55 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r55.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(z1);
        throw r6;

     label31:
        return;

        catch java.lang.Throwable from label0 to label1 with label28;
        catch java.lang.Throwable from label2 to label3 with label28;
        catch java.lang.Throwable from label4 to label5 with label28;
        catch java.lang.Throwable from label6 to label7 with label28;
        catch java.lang.Throwable from label8 to label14 with label28;
        catch java.lang.Throwable from label15 to label16 with label28;
        catch java.lang.Throwable from label17 to label18 with label28;
        catch java.lang.Throwable from label19 to label20 with label28;
        catch java.lang.Throwable from label21 to label27 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    private void writeNull() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.ObjectOutputStream$BlockDataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r1.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeByte(int)>(112);
        return;
    }

    private void writeHandle(int) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        int i0, $i1;
        java.io.ObjectOutputStream$BlockDataOutputStream $r1, $r2;

        r0 := @this: java.io.ObjectOutputStream;
        i0 := @parameter0: int;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r1.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeByte(int)>(113);
        $r2 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i1 = 8257536 + i0;
        virtualinvoke $r2.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeInt(int)>($i1);
        return;
    }

    private void writeClass(java.lang.Class, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Class r1, $r5;
        boolean z0;
        java.io.ObjectOutputStream$BlockDataOutputStream $r2;
        java.io.ObjectStreamClass $r3;
        java.io.ObjectOutputStream$HandleTable $r4;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.lang.Class;
        z0 := @parameter1: boolean;
        $r2 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r2.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeByte(int)>(118);
        $r3 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class,boolean)>(r1, 1);
        specialinvoke r0.<java.io.ObjectOutputStream: void writeClassDesc(java.io.ObjectStreamClass,boolean)>($r3, 0);
        $r4 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$HandleTable handles>;
        if z0 == 0 goto label0;

        $r5 = null;
        goto label1;

     label0:
        $r5 = r1;

     label1:
        virtualinvoke $r4.<java.io.ObjectOutputStream$HandleTable: int assign(java.lang.Object)>($r5);
        return;
    }

    private void writeClassDesc(java.io.ObjectStreamClass, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.ObjectStreamClass r1;
        boolean z0, $z1;
        int i0, $i1;
        java.io.ObjectOutputStream$HandleTable $r2;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.io.ObjectStreamClass;
        z0 := @parameter1: boolean;
        if r1 != null goto label0;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeNull()>();
        goto label3;

     label0:
        if z0 != 0 goto label1;

        $r2 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$HandleTable handles>;
        $i1 = virtualinvoke $r2.<java.io.ObjectOutputStream$HandleTable: int lookup(java.lang.Object)>(r1);
        i0 = $i1;
        if $i1 == -1 goto label1;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeHandle(int)>(i0);
        goto label3;

     label1:
        $z1 = virtualinvoke r1.<java.io.ObjectStreamClass: boolean isProxy()>();
        if $z1 == 0 goto label2;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeProxyDesc(java.io.ObjectStreamClass,boolean)>(r1, z0);
        goto label3;

     label2:
        specialinvoke r0.<java.io.ObjectOutputStream: void writeNonProxyDesc(java.io.ObjectStreamClass,boolean)>(r1, z0);

     label3:
        return;
    }

    private boolean isCustomSubclass()
    {
        java.io.ObjectOutputStream r0;
        java.lang.Class $r1, $r2;
        java.lang.ClassLoader $r3, $r4;
        boolean $z0;

        r0 := @this: java.io.ObjectOutputStream;
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        $r1 = class "java/io/ObjectOutputStream";
        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        if $r3 == $r4 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private void writeProxyDesc(java.io.ObjectStreamClass, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.ObjectStreamClass r1, $r6, $r14;
        boolean z0, $z2;
        java.lang.Class r2, $r9;
        java.lang.Class[] r3;
        int i0, $i2, $i3;
        java.io.ObjectOutputStream$BlockDataOutputStream $r4, $r7, $r8, $r11, $r12, $r13;
        java.io.ObjectOutputStream$HandleTable $r5;
        java.lang.String $r10;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.io.ObjectStreamClass;
        z0 := @parameter1: boolean;
        $r4 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r4.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeByte(int)>(125);
        $r5 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$HandleTable handles>;
        if z0 == 0 goto label0;

        $r6 = null;
        goto label1;

     label0:
        $r6 = r1;

     label1:
        virtualinvoke $r5.<java.io.ObjectOutputStream$HandleTable: int assign(java.lang.Object)>($r6);
        r2 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Class forClass()>();
        r3 = virtualinvoke r2.<java.lang.Class: java.lang.Class[] getInterfaces()>();
        $r7 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i2 = lengthof r3;
        virtualinvoke $r7.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeInt(int)>($i2);
        i0 = 0;

     label2:
        $i3 = lengthof r3;
        if i0 >= $i3 goto label3;

        $r8 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $r9 = r3[i0];
        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();
        virtualinvoke $r8.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeUTF(java.lang.String)>($r10);
        i0 = i0 + 1;
        goto label2;

     label3:
        $r11 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r11.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(1);
        if r2 == null goto label4;

        $z2 = specialinvoke r0.<java.io.ObjectOutputStream: boolean isCustomSubclass()>();
        if $z2 == 0 goto label4;

        staticinvoke <sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.Class)>(r2);

     label4:
        virtualinvoke r0.<java.io.ObjectOutputStream: void annotateProxyClass(java.lang.Class)>(r2);
        $r12 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r12.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(0);
        $r13 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r13.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeByte(int)>(120);
        $r14 = virtualinvoke r1.<java.io.ObjectStreamClass: java.io.ObjectStreamClass getSuperDesc()>();
        specialinvoke r0.<java.io.ObjectOutputStream: void writeClassDesc(java.io.ObjectStreamClass,boolean)>($r14, 0);
        return;
    }

    private void writeNonProxyDesc(java.io.ObjectStreamClass, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.ObjectStreamClass r1, $r5, $r9;
        boolean z0, $z2;
        java.lang.Class r2;
        java.io.ObjectOutputStream$BlockDataOutputStream $r3, $r6, $r7, $r8;
        java.io.ObjectOutputStream$HandleTable $r4;
        int $i1;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.io.ObjectStreamClass;
        z0 := @parameter1: boolean;
        $r3 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r3.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeByte(int)>(114);
        $r4 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$HandleTable handles>;
        if z0 == 0 goto label0;

        $r5 = null;
        goto label1;

     label0:
        $r5 = r1;

     label1:
        virtualinvoke $r4.<java.io.ObjectOutputStream$HandleTable: int assign(java.lang.Object)>($r5);
        $i1 = r0.<java.io.ObjectOutputStream: int protocol>;
        if $i1 != 1 goto label2;

        virtualinvoke r1.<java.io.ObjectStreamClass: void writeNonProxy(java.io.ObjectOutputStream)>(r0);
        goto label3;

     label2:
        virtualinvoke r0.<java.io.ObjectOutputStream: void writeClassDescriptor(java.io.ObjectStreamClass)>(r1);

     label3:
        r2 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Class forClass()>();
        $r6 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r6.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(1);
        if r2 == null goto label4;

        $z2 = specialinvoke r0.<java.io.ObjectOutputStream: boolean isCustomSubclass()>();
        if $z2 == 0 goto label4;

        staticinvoke <sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.Class)>(r2);

     label4:
        virtualinvoke r0.<java.io.ObjectOutputStream: void annotateClass(java.lang.Class)>(r2);
        $r7 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r7.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(0);
        $r8 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r8.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeByte(int)>(120);
        $r9 = virtualinvoke r1.<java.io.ObjectStreamClass: java.io.ObjectStreamClass getSuperDesc()>();
        specialinvoke r0.<java.io.ObjectOutputStream: void writeClassDesc(java.io.ObjectStreamClass,boolean)>($r9, 0);
        return;
    }

    private void writeString(java.lang.String, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.String r1, $r3;
        boolean z0;
        long l0;
        java.io.ObjectOutputStream$HandleTable $r2;
        java.io.ObjectOutputStream$BlockDataOutputStream $r4, $r5, $r6, $r7, $r8;
        byte $b2;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        $r2 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$HandleTable handles>;
        if z0 == 0 goto label0;

        $r3 = null;
        goto label1;

     label0:
        $r3 = r1;

     label1:
        virtualinvoke $r2.<java.io.ObjectOutputStream$HandleTable: int assign(java.lang.Object)>($r3);
        $r4 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        l0 = virtualinvoke $r4.<java.io.ObjectOutputStream$BlockDataOutputStream: long getUTFLength(java.lang.String)>(r1);
        $b2 = l0 cmp 65535L;
        if $b2 > 0 goto label2;

        $r5 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r5.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeByte(int)>(116);
        $r6 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r6.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeUTF(java.lang.String,long)>(r1, l0);
        goto label3;

     label2:
        $r7 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r7.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeByte(int)>(124);
        $r8 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r8.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeLongUTF(java.lang.String,long)>(r1, l0);

     label3:
        return;
    }

    private void writeArray(java.lang.Object, java.io.ObjectStreamClass, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1, $r9, $r70;
        java.io.ObjectStreamClass r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Class r3, $r10, $r11, $r15, $r20, $r25, $r30, $r35, $r40, $r45, $r57;
        int[] r4, $r12;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        java.lang.Throwable r5, r6, $r72, $r75;
        java.io.ObjectOutputStream$BlockDataOutputStream $r7, $r13, $r14, $r18, $r19, $r23, $r24, $r28, $r29, $r33, $r34, $r38, $r39, $r43, $r44, $r48, $r49, $r53;
        java.io.ObjectOutputStream$HandleTable $r8;
        byte[] $r16, r17;
        long[] $r21, r22;
        float[] $r26, r27;
        double[] $r31, r32;
        short[] $r36, r37;
        char[] $r41, r42;
        boolean[] $r46, r47;
        java.lang.InternalError $r50;
        java.lang.Object[] $r51, r52;
        java.io.ObjectOutputStream$DebugTraceInfoStack $r54, $r64, $r71, $r73, $r74, $r76;
        java.lang.StringBuilder $r55, $r56, $r59, $r60, $r61, $r62, $r65, $r66, $r67, $r68;
        java.lang.String $r58, $r63, $r69;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.io.ObjectStreamClass;
        z0 := @parameter2: boolean;
        $r7 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r7.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeByte(int)>(117);
        specialinvoke r0.<java.io.ObjectOutputStream: void writeClassDesc(java.io.ObjectStreamClass,boolean)>(r2, 0);
        $r8 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$HandleTable handles>;
        if z0 == 0 goto label0;

        $r9 = null;
        goto label1;

     label0:
        $r9 = r1;

     label1:
        virtualinvoke $r8.<java.io.ObjectOutputStream$HandleTable: int assign(java.lang.Object)>($r9);
        $r10 = virtualinvoke r2.<java.io.ObjectStreamClass: java.lang.Class forClass()>();
        r3 = virtualinvoke $r10.<java.lang.Class: java.lang.Class getComponentType()>();
        $z1 = virtualinvoke r3.<java.lang.Class: boolean isPrimitive()>();
        if $z1 == 0 goto label10;

        $r11 = <java.lang.Integer: java.lang.Class TYPE>;
        if r3 != $r11 goto label2;

        $r12 = (int[]) r1;
        r4 = (int[]) $r12;
        $r13 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i3 = lengthof r4;
        virtualinvoke $r13.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeInt(int)>($i3);
        $r14 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i4 = lengthof r4;
        virtualinvoke $r14.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeInts(int[],int,int)>(r4, 0, $i4);
        goto label25;

     label2:
        $r15 = <java.lang.Byte: java.lang.Class TYPE>;
        if r3 != $r15 goto label3;

        $r16 = (byte[]) r1;
        r17 = (byte[]) $r16;
        $r18 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i5 = lengthof r17;
        virtualinvoke $r18.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeInt(int)>($i5);
        $r19 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i6 = lengthof r17;
        virtualinvoke $r19.<java.io.ObjectOutputStream$BlockDataOutputStream: void write(byte[],int,int,boolean)>(r17, 0, $i6, 1);
        goto label25;

     label3:
        $r20 = <java.lang.Long: java.lang.Class TYPE>;
        if r3 != $r20 goto label4;

        $r21 = (long[]) r1;
        r22 = (long[]) $r21;
        $r23 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i7 = lengthof r22;
        virtualinvoke $r23.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeInt(int)>($i7);
        $r24 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i8 = lengthof r22;
        virtualinvoke $r24.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeLongs(long[],int,int)>(r22, 0, $i8);
        goto label25;

     label4:
        $r25 = <java.lang.Float: java.lang.Class TYPE>;
        if r3 != $r25 goto label5;

        $r26 = (float[]) r1;
        r27 = (float[]) $r26;
        $r28 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i9 = lengthof r27;
        virtualinvoke $r28.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeInt(int)>($i9);
        $r29 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i10 = lengthof r27;
        virtualinvoke $r29.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeFloats(float[],int,int)>(r27, 0, $i10);
        goto label25;

     label5:
        $r30 = <java.lang.Double: java.lang.Class TYPE>;
        if r3 != $r30 goto label6;

        $r31 = (double[]) r1;
        r32 = (double[]) $r31;
        $r33 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i11 = lengthof r32;
        virtualinvoke $r33.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeInt(int)>($i11);
        $r34 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i12 = lengthof r32;
        virtualinvoke $r34.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeDoubles(double[],int,int)>(r32, 0, $i12);
        goto label25;

     label6:
        $r35 = <java.lang.Short: java.lang.Class TYPE>;
        if r3 != $r35 goto label7;

        $r36 = (short[]) r1;
        r37 = (short[]) $r36;
        $r38 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i13 = lengthof r37;
        virtualinvoke $r38.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeInt(int)>($i13);
        $r39 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i14 = lengthof r37;
        virtualinvoke $r39.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeShorts(short[],int,int)>(r37, 0, $i14);
        goto label25;

     label7:
        $r40 = <java.lang.Character: java.lang.Class TYPE>;
        if r3 != $r40 goto label8;

        $r41 = (char[]) r1;
        r42 = (char[]) $r41;
        $r43 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i15 = lengthof r42;
        virtualinvoke $r43.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeInt(int)>($i15);
        $r44 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i16 = lengthof r42;
        virtualinvoke $r44.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeChars(char[],int,int)>(r42, 0, $i16);
        goto label25;

     label8:
        $r45 = <java.lang.Boolean: java.lang.Class TYPE>;
        if r3 != $r45 goto label9;

        $r46 = (boolean[]) r1;
        r47 = (boolean[]) $r46;
        $r48 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i17 = lengthof r47;
        virtualinvoke $r48.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeInt(int)>($i17);
        $r49 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $i18 = lengthof r47;
        virtualinvoke $r49.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeBooleans(boolean[],int,int)>(r47, 0, $i18);
        goto label25;

     label9:
        $r50 = new java.lang.InternalError;
        specialinvoke $r50.<java.lang.InternalError: void <init>()>();
        throw $r50;

     label10:
        $r51 = (java.lang.Object[]) r1;
        r52 = (java.lang.Object[]) $r51;
        i0 = lengthof r52;
        $r53 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r53.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeInt(int)>(i0);
        $z2 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z2 == 0 goto label11;

        $r54 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        $r55 = new java.lang.StringBuilder;
        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();
        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("array (class \"");
        $r57 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r58 = virtualinvoke $r57.<java.lang.Class: java.lang.String getName()>();
        $r59 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);
        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", size: ");
        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r54.<java.io.ObjectOutputStream$DebugTraceInfoStack: void push(java.lang.String)>($r63);

     label11:
        i1 = 0;

     label12:
        if i1 >= i0 goto label20;

        $z3 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z3 == 0 goto label13;

        $r64 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        $r65 = new java.lang.StringBuilder;
        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();
        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("element of array (index: ");
        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r64.<java.io.ObjectOutputStream$DebugTraceInfoStack: void push(java.lang.String)>($r69);

     label13:
        $r70 = r52[i1];
        specialinvoke r0.<java.io.ObjectOutputStream: void writeObject0(java.lang.Object,boolean)>($r70, 0);

     label14:
        $z4 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z4 == 0 goto label19;

        $r71 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        virtualinvoke $r71.<java.io.ObjectOutputStream$DebugTraceInfoStack: void pop()>();
        goto label19;

     label15:
        $r72 := @caughtexception;

     label16:
        r5 = $r72;

     label17:
        $z5 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z5 == 0 goto label18;

        $r73 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        virtualinvoke $r73.<java.io.ObjectOutputStream$DebugTraceInfoStack: void pop()>();

     label18:
        throw r5;

     label19:
        i1 = i1 + 1;
        goto label12;

     label20:
        $z6 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z6 == 0 goto label25;

        $r74 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        virtualinvoke $r74.<java.io.ObjectOutputStream$DebugTraceInfoStack: void pop()>();
        goto label25;

     label21:
        $r75 := @caughtexception;

     label22:
        r6 = $r75;

     label23:
        $z7 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z7 == 0 goto label24;

        $r76 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        virtualinvoke $r76.<java.io.ObjectOutputStream$DebugTraceInfoStack: void pop()>();

     label24:
        throw r6;

     label25:
        return;

        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label11 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    private void writeEnum(java.lang.Enum, java.io.ObjectStreamClass, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Enum r1, $r9;
        java.io.ObjectStreamClass r2, r3, $r7;
        boolean z0;
        java.io.ObjectOutputStream$BlockDataOutputStream $r4;
        java.lang.Class $r6;
        java.io.ObjectOutputStream$HandleTable $r8;
        java.lang.String $r10;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.lang.Enum;
        r2 := @parameter1: java.io.ObjectStreamClass;
        z0 := @parameter2: boolean;
        $r4 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r4.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeByte(int)>(126);
        r3 = virtualinvoke r2.<java.io.ObjectStreamClass: java.io.ObjectStreamClass getSuperDesc()>();
        $r6 = virtualinvoke r3.<java.io.ObjectStreamClass: java.lang.Class forClass()>();
        if $r6 != class "java/lang/Enum" goto label0;

        $r7 = r2;
        goto label1;

     label0:
        $r7 = r3;

     label1:
        specialinvoke r0.<java.io.ObjectOutputStream: void writeClassDesc(java.io.ObjectStreamClass,boolean)>($r7, 0);
        $r8 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$HandleTable handles>;
        if z0 == 0 goto label2;

        $r9 = null;
        goto label3;

     label2:
        $r9 = r1;

     label3:
        virtualinvoke $r8.<java.io.ObjectOutputStream$HandleTable: int assign(java.lang.Object)>($r9);
        $r10 = virtualinvoke r1.<java.lang.Enum: java.lang.String name()>();
        specialinvoke r0.<java.io.ObjectOutputStream: void writeString(java.lang.String,boolean)>($r10, 0);
        return;
    }

    private void writeOrdinaryObject(java.lang.Object, java.io.ObjectStreamClass, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1, $r19;
        java.io.ObjectStreamClass r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r3, $r7, $r8, $r11, $r12, $r14, $r15;
        java.lang.Throwable r4, $r22;
        java.io.ObjectOutputStream$DebugTraceInfoStack $r5, $r21, $r23;
        int $i0;
        java.lang.String $r6, $r10, $r13, $r16;
        java.lang.Class $r9;
        java.io.ObjectOutputStream$BlockDataOutputStream $r17;
        java.io.ObjectOutputStream$HandleTable $r18;
        java.io.Externalizable $r20;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.io.ObjectStreamClass;
        z0 := @parameter2: boolean;
        $z1 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z1 == 0 goto label2;

        $r5 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $i0 = r0.<java.io.ObjectOutputStream: int depth>;
        if $i0 != 1 goto label0;

        $r6 = "root ";
        goto label1;

     label0:
        $r6 = "";

     label1:
        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("object (class \"");
        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();
        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", ");
        $r13 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();
        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r5.<java.io.ObjectOutputStream$DebugTraceInfoStack: void push(java.lang.String)>($r16);

     label2:
        virtualinvoke r2.<java.io.ObjectStreamClass: void checkSerialize()>();
        $r17 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r17.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeByte(int)>(115);
        specialinvoke r0.<java.io.ObjectOutputStream: void writeClassDesc(java.io.ObjectStreamClass,boolean)>(r2, 0);
        $r18 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$HandleTable handles>;
        if z0 == 0 goto label3;

        $r19 = null;
        goto label4;

     label3:
        $r19 = r1;

     label4:
        virtualinvoke $r18.<java.io.ObjectOutputStream$HandleTable: int assign(java.lang.Object)>($r19);
        $z2 = virtualinvoke r2.<java.io.ObjectStreamClass: boolean isExternalizable()>();
        if $z2 == 0 goto label5;

        $z3 = virtualinvoke r2.<java.io.ObjectStreamClass: boolean isProxy()>();
        if $z3 != 0 goto label5;

        $r20 = (java.io.Externalizable) r1;
        specialinvoke r0.<java.io.ObjectOutputStream: void writeExternalData(java.io.Externalizable)>($r20);
        goto label6;

     label5:
        specialinvoke r0.<java.io.ObjectOutputStream: void writeSerialData(java.lang.Object,java.io.ObjectStreamClass)>(r1, r2);

     label6:
        $z4 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z4 == 0 goto label11;

        $r21 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        virtualinvoke $r21.<java.io.ObjectOutputStream$DebugTraceInfoStack: void pop()>();
        goto label11;

     label7:
        $r22 := @caughtexception;

     label8:
        r4 = $r22;

     label9:
        $z5 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z5 == 0 goto label10;

        $r23 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        virtualinvoke $r23.<java.io.ObjectOutputStream$DebugTraceInfoStack: void pop()>();

     label10:
        throw r4;

     label11:
        return;

        catch java.lang.Throwable from label2 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void writeExternalData(java.io.Externalizable) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.Externalizable r1;
        java.io.ObjectOutputStream$PutFieldImpl r2;
        java.io.SerialCallbackContext r3;
        java.lang.Throwable r4, $r10;
        boolean $z0, $z3, $z4;
        java.io.ObjectOutputStream$DebugTraceInfoStack $r5, $r9, $r11;
        int $i0;
        java.io.ObjectOutputStream$BlockDataOutputStream $r6, $r7, $r8;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.io.Externalizable;
        r2 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutFieldImpl curPut>;
        r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutFieldImpl curPut> = null;
        $z0 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z0 == 0 goto label0;

        $r5 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        virtualinvoke $r5.<java.io.ObjectOutputStream$DebugTraceInfoStack: void push(java.lang.String)>("writeExternal data");

     label0:
        r3 = r0.<java.io.ObjectOutputStream: java.io.SerialCallbackContext curContext>;

     label1:
        r0.<java.io.ObjectOutputStream: java.io.SerialCallbackContext curContext> = null;
        $i0 = r0.<java.io.ObjectOutputStream: int protocol>;
        if $i0 != 1 goto label2;

        interfaceinvoke r1.<java.io.Externalizable: void writeExternal(java.io.ObjectOutput)>(r0);
        goto label3;

     label2:
        $r6 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r6.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(1);
        interfaceinvoke r1.<java.io.Externalizable: void writeExternal(java.io.ObjectOutput)>(r0);
        $r7 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r7.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(0);
        $r8 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r8.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeByte(int)>(120);

     label3:
        r0.<java.io.ObjectOutputStream: java.io.SerialCallbackContext curContext> = r3;
        $z3 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z3 == 0 goto label8;

        $r9 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        virtualinvoke $r9.<java.io.ObjectOutputStream$DebugTraceInfoStack: void pop()>();
        goto label8;

     label4:
        $r10 := @caughtexception;

     label5:
        r4 = $r10;

     label6:
        r0.<java.io.ObjectOutputStream: java.io.SerialCallbackContext curContext> = r3;
        $z4 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z4 == 0 goto label7;

        $r11 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        virtualinvoke $r11.<java.io.ObjectOutputStream$DebugTraceInfoStack: void pop()>();

     label7:
        throw r4;

     label8:
        r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutFieldImpl curPut> = r2;
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void writeSerialData(java.lang.Object, java.io.ObjectStreamClass) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1;
        java.io.ObjectStreamClass r2, r4;
        java.io.ObjectStreamClass$ClassDataSlot[] r3;
        int i0, $i1;
        java.io.ObjectOutputStream$PutFieldImpl r5;
        java.io.SerialCallbackContext r6, $r16, $r20, $r23;
        java.lang.Throwable r7, $r22;
        java.io.ObjectStreamClass$ClassDataSlot $r8;
        boolean $z0, $z1, $z4, $z5;
        java.io.ObjectOutputStream$DebugTraceInfoStack $r9, $r21, $r24;
        java.lang.StringBuilder $r10, $r11, $r13, $r14;
        java.lang.String $r12, $r15;
        java.io.ObjectOutputStream$BlockDataOutputStream $r17, $r18, $r19;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.io.ObjectStreamClass;
        r3 = virtualinvoke r2.<java.io.ObjectStreamClass: java.io.ObjectStreamClass$ClassDataSlot[] getClassDataLayout()>();
        i0 = 0;

     label0:
        $i1 = lengthof r3;
        if i0 >= $i1 goto label10;

        $r8 = r3[i0];
        r4 = $r8.<java.io.ObjectStreamClass$ClassDataSlot: java.io.ObjectStreamClass desc>;
        $z0 = virtualinvoke r4.<java.io.ObjectStreamClass: boolean hasWriteObjectMethod()>();
        if $z0 == 0 goto label8;

        r5 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutFieldImpl curPut>;
        r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutFieldImpl curPut> = null;
        r6 = r0.<java.io.ObjectOutputStream: java.io.SerialCallbackContext curContext>;
        $z1 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z1 == 0 goto label1;

        $r9 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("custom writeObject data (class \"");
        $r12 = virtualinvoke r4.<java.io.ObjectStreamClass: java.lang.String getName()>();
        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\")");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r9.<java.io.ObjectOutputStream$DebugTraceInfoStack: void push(java.lang.String)>($r15);

     label1:
        $r16 = new java.io.SerialCallbackContext;
        specialinvoke $r16.<java.io.SerialCallbackContext: void <init>(java.lang.Object,java.io.ObjectStreamClass)>(r1, r4);
        r0.<java.io.ObjectOutputStream: java.io.SerialCallbackContext curContext> = $r16;
        $r17 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r17.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(1);
        virtualinvoke r4.<java.io.ObjectStreamClass: void invokeWriteObject(java.lang.Object,java.io.ObjectOutputStream)>(r1, r0);
        $r18 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r18.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(0);
        $r19 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r19.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeByte(int)>(120);

     label2:
        $r20 = r0.<java.io.ObjectOutputStream: java.io.SerialCallbackContext curContext>;
        virtualinvoke $r20.<java.io.SerialCallbackContext: void setUsed()>();
        r0.<java.io.ObjectOutputStream: java.io.SerialCallbackContext curContext> = r6;
        $z4 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z4 == 0 goto label7;

        $r21 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        virtualinvoke $r21.<java.io.ObjectOutputStream$DebugTraceInfoStack: void pop()>();
        goto label7;

     label3:
        $r22 := @caughtexception;

     label4:
        r7 = $r22;

     label5:
        $r23 = r0.<java.io.ObjectOutputStream: java.io.SerialCallbackContext curContext>;
        virtualinvoke $r23.<java.io.SerialCallbackContext: void setUsed()>();
        r0.<java.io.ObjectOutputStream: java.io.SerialCallbackContext curContext> = r6;
        $z5 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z5 == 0 goto label6;

        $r24 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        virtualinvoke $r24.<java.io.ObjectOutputStream$DebugTraceInfoStack: void pop()>();

     label6:
        throw r7;

     label7:
        r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutFieldImpl curPut> = r5;
        goto label9;

     label8:
        specialinvoke r0.<java.io.ObjectOutputStream: void defaultWriteFields(java.lang.Object,java.io.ObjectStreamClass)>(r1, r4);

     label9:
        i0 = i0 + 1;
        goto label0;

     label10:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void defaultWriteFields(java.lang.Object, java.io.ObjectStreamClass) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1, $r29;
        java.io.ObjectStreamClass r2;
        java.lang.Class r3, $r25;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.io.ObjectStreamField[] r4;
        java.lang.Object[] r5;
        java.lang.Throwable r6, $r32;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.ClassCastException $r7;
        byte[] $r8, $r9, $r10, $r11, $r13;
        java.io.ObjectOutputStream$BlockDataOutputStream $r12;
        java.io.ObjectOutputStream$DebugTraceInfoStack $r14, $r31, $r33;
        java.lang.StringBuilder $r15, $r16, $r18, $r19, $r22, $r23, $r26, $r27;
        java.lang.String $r17, $r21, $r28;
        java.io.ObjectStreamField $r20, $r24, $r30;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.io.ObjectStreamClass;
        r3 = virtualinvoke r2.<java.io.ObjectStreamClass: java.lang.Class forClass()>();
        if r3 == null goto label0;

        if r1 == null goto label0;

        $z0 = virtualinvoke r3.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);
        if $z0 != 0 goto label0;

        $r7 = new java.lang.ClassCastException;
        specialinvoke $r7.<java.lang.ClassCastException: void <init>()>();
        throw $r7;

     label0:
        virtualinvoke r2.<java.io.ObjectStreamClass: void checkDefaultSerialize()>();
        i0 = virtualinvoke r2.<java.io.ObjectStreamClass: int getPrimDataSize()>();
        $r8 = r0.<java.io.ObjectOutputStream: byte[] primVals>;
        if $r8 == null goto label1;

        $r9 = r0.<java.io.ObjectOutputStream: byte[] primVals>;
        $i3 = lengthof $r9;
        if $i3 >= i0 goto label2;

     label1:
        $r10 = newarray (byte)[i0];
        r0.<java.io.ObjectOutputStream: byte[] primVals> = $r10;

     label2:
        $r11 = r0.<java.io.ObjectOutputStream: byte[] primVals>;
        virtualinvoke r2.<java.io.ObjectStreamClass: void getPrimFieldValues(java.lang.Object,byte[])>(r1, $r11);
        $r12 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        $r13 = r0.<java.io.ObjectOutputStream: byte[] primVals>;
        virtualinvoke $r12.<java.io.ObjectOutputStream$BlockDataOutputStream: void write(byte[],int,int,boolean)>($r13, 0, i0, 0);
        r4 = virtualinvoke r2.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getFields(boolean)>(0);
        $i4 = virtualinvoke r2.<java.io.ObjectStreamClass: int getNumObjFields()>();
        r5 = newarray (java.lang.Object)[$i4];
        $i5 = lengthof r4;
        $i6 = lengthof r5;
        i1 = $i5 - $i6;
        virtualinvoke r2.<java.io.ObjectStreamClass: void getObjFieldValues(java.lang.Object,java.lang.Object[])>(r1, r5);
        i2 = 0;

     label3:
        $i7 = lengthof r5;
        if i2 >= $i7 goto label11;

        $z1 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z1 == 0 goto label4;

        $r14 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("field (class \"");
        $r17 = virtualinvoke r2.<java.io.ObjectStreamClass: java.lang.String getName()>();
        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", name: \"");
        $i8 = i1 + i2;
        $r20 = r4[$i8];
        $r21 = virtualinvoke $r20.<java.io.ObjectStreamField: java.lang.String getName()>();
        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", type: \"");
        $i9 = i1 + i2;
        $r24 = r4[$i9];
        $r25 = virtualinvoke $r24.<java.io.ObjectStreamField: java.lang.Class getType()>();
        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\")");
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r14.<java.io.ObjectOutputStream$DebugTraceInfoStack: void push(java.lang.String)>($r28);

     label4:
        $r29 = r5[i2];
        $i10 = i1 + i2;
        $r30 = r4[$i10];
        $z2 = virtualinvoke $r30.<java.io.ObjectStreamField: boolean isUnshared()>();
        specialinvoke r0.<java.io.ObjectOutputStream: void writeObject0(java.lang.Object,boolean)>($r29, $z2);

     label5:
        $z3 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z3 == 0 goto label10;

        $r31 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        virtualinvoke $r31.<java.io.ObjectOutputStream$DebugTraceInfoStack: void pop()>();
        goto label10;

     label6:
        $r32 := @caughtexception;

     label7:
        r6 = $r32;

     label8:
        $z4 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        if $z4 == 0 goto label9;

        $r33 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        virtualinvoke $r33.<java.io.ObjectOutputStream$DebugTraceInfoStack: void pop()>();

     label9:
        throw r6;

     label10:
        i2 = i2 + 1;
        goto label3;

     label11:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void writeFatalException(java.io.IOException) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.IOException r1;
        boolean z0;
        java.lang.Throwable r2, $r6;
        java.io.ObjectOutputStream$BlockDataOutputStream $r3, $r4, $r5, $r7;

        r0 := @this: java.io.ObjectOutputStream;
        r1 := @parameter0: java.io.IOException;
        specialinvoke r0.<java.io.ObjectOutputStream: void clear()>();
        $r3 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        z0 = virtualinvoke $r3.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(0);

     label0:
        $r4 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r4.<java.io.ObjectOutputStream$BlockDataOutputStream: void writeByte(int)>(123);
        specialinvoke r0.<java.io.ObjectOutputStream: void writeObject0(java.lang.Object,boolean)>(r1, 0);
        specialinvoke r0.<java.io.ObjectOutputStream: void clear()>();

     label1:
        $r5 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r5.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(z0);
        goto label5;

     label2:
        $r6 := @caughtexception;

     label3:
        r2 = $r6;

     label4:
        $r7 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        virtualinvoke $r7.<java.io.ObjectOutputStream$BlockDataOutputStream: boolean setBlockDataMode(boolean)>(z0);
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    private static native void floatsToBytes(float[], int, byte[], int, int);

    private static native void doublesToBytes(double[], int, byte[], int, int);

    static java.io.ObjectOutputStream$BlockDataOutputStream access$000(java.io.ObjectOutputStream)
    {
        java.io.ObjectOutputStream r0;
        java.io.ObjectOutputStream$BlockDataOutputStream $r1;

        r0 := @parameter0: java.io.ObjectOutputStream;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$BlockDataOutputStream bout>;
        return $r1;
    }

    static boolean access$100()
    {
        boolean $z0;

        $z0 = <java.io.ObjectOutputStream: boolean extendedDebugInfo>;
        return $z0;
    }

    static java.io.ObjectOutputStream$DebugTraceInfoStack access$200(java.io.ObjectOutputStream)
    {
        java.io.ObjectOutputStream r0;
        java.io.ObjectOutputStream$DebugTraceInfoStack $r1;

        r0 := @parameter0: java.io.ObjectOutputStream;
        $r1 = r0.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$DebugTraceInfoStack debugInfoStack>;
        return $r1;
    }

    static void access$300(java.io.ObjectOutputStream, java.lang.Object, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1;
        boolean z0;

        r0 := @parameter0: java.io.ObjectOutputStream;
        r1 := @parameter1: java.lang.Object;
        z0 := @parameter2: boolean;
        specialinvoke r0.<java.io.ObjectOutputStream: void writeObject0(java.lang.Object,boolean)>(r1, z0);
        return;
    }

    static void access$400(float[], int, byte[], int, int)
    {
        float[] r0;
        int i0, i1, i2;
        byte[] r1;

        r0 := @parameter0: float[];
        i0 := @parameter1: int;
        r1 := @parameter2: byte[];
        i1 := @parameter3: int;
        i2 := @parameter4: int;
        staticinvoke <java.io.ObjectOutputStream: void floatsToBytes(float[],int,byte[],int,int)>(r0, i0, r1, i1, i2);
        return;
    }

    static void access$500(double[], int, byte[], int, int)
    {
        double[] r0;
        int i0, i1, i2;
        byte[] r1;

        r0 := @parameter0: double[];
        i0 := @parameter1: int;
        r1 := @parameter2: byte[];
        i1 := @parameter3: int;
        i2 := @parameter4: int;
        staticinvoke <java.io.ObjectOutputStream: void doublesToBytes(double[],int,byte[],int,int)>(r0, i0, r1, i1, i2);
        return;
    }

    static void <clinit>()
    {
        sun.security.action.GetBooleanAction $r0;
        java.lang.Object $r1;
        java.lang.Boolean $r2;
        boolean $z0;

        $r0 = new sun.security.action.GetBooleanAction;
        specialinvoke $r0.<sun.security.action.GetBooleanAction: void <init>(java.lang.String)>("sun.io.serialization.extendedDebugInfo");
        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        $r2 = (java.lang.Boolean) $r1;
        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();
        <java.io.ObjectOutputStream: boolean extendedDebugInfo> = $z0;
        return;
    }
}
