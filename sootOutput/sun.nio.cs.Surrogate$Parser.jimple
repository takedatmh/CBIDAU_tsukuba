public class sun.nio.cs.Surrogate$Parser extends java.lang.Object
{
    private int character;
    private java.nio.charset.CoderResult error;
    private boolean isPair;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        sun.nio.cs.Surrogate$Parser r0;
        java.nio.charset.CoderResult $r1;

        r0 := @this: sun.nio.cs.Surrogate$Parser;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;
        r0.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error> = $r1;
        return;
    }

    public int character()
    {
        sun.nio.cs.Surrogate$Parser r0;
        boolean $z0;
        java.nio.charset.CoderResult $r1;
        java.lang.AssertionError $r2;
        int $i0;

        r0 := @this: sun.nio.cs.Surrogate$Parser;
        $z0 = <sun.nio.cs.Surrogate$Parser: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r1 = r0.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error>;
        if $r1 == null goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $i0 = r0.<sun.nio.cs.Surrogate$Parser: int character>;
        return $i0;
    }

    public boolean isPair()
    {
        sun.nio.cs.Surrogate$Parser r0;
        boolean $z0, $z1;
        java.nio.charset.CoderResult $r1;
        java.lang.AssertionError $r2;

        r0 := @this: sun.nio.cs.Surrogate$Parser;
        $z0 = <sun.nio.cs.Surrogate$Parser: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r1 = r0.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error>;
        if $r1 == null goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $z1 = r0.<sun.nio.cs.Surrogate$Parser: boolean isPair>;
        return $z1;
    }

    public int increment()
    {
        sun.nio.cs.Surrogate$Parser r0;
        boolean $z0, $z1;
        java.nio.charset.CoderResult $r1;
        java.lang.AssertionError $r2;
        byte $b0;

        r0 := @this: sun.nio.cs.Surrogate$Parser;
        $z0 = <sun.nio.cs.Surrogate$Parser: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r1 = r0.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error>;
        if $r1 == null goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $z1 = r0.<sun.nio.cs.Surrogate$Parser: boolean isPair>;
        if $z1 == 0 goto label1;

        $b0 = 2;
        goto label2;

     label1:
        $b0 = 1;

     label2:
        return $b0;
    }

    public java.nio.charset.CoderResult error()
    {
        sun.nio.cs.Surrogate$Parser r0;
        boolean $z0;
        java.nio.charset.CoderResult $r1, $r3;
        java.lang.AssertionError $r2;

        r0 := @this: sun.nio.cs.Surrogate$Parser;
        $z0 = <sun.nio.cs.Surrogate$Parser: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r1 = r0.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error>;
        if $r1 != null goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error>;
        return $r3;
    }

    public java.nio.charset.CoderResult unmappableResult()
    {
        sun.nio.cs.Surrogate$Parser r0;
        boolean $z0, $z1;
        java.nio.charset.CoderResult $r1, $r3;
        java.lang.AssertionError $r2;
        byte $b0;

        r0 := @this: sun.nio.cs.Surrogate$Parser;
        $z0 = <sun.nio.cs.Surrogate$Parser: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r1 = r0.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error>;
        if $r1 == null goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $z1 = r0.<sun.nio.cs.Surrogate$Parser: boolean isPair>;
        if $z1 == 0 goto label1;

        $b0 = 2;
        goto label2;

     label1:
        $b0 = 1;

     label2:
        $r3 = staticinvoke <java.nio.charset.CoderResult: java.nio.charset.CoderResult unmappableForLength(int)>($b0);
        return $r3;
    }

    public int parse(char, java.nio.CharBuffer)
    {
        sun.nio.cs.Surrogate$Parser r0;
        char c0, c1;
        java.nio.CharBuffer r1;
        java.nio.charset.CoderResult $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3;
        int $i2, $i3, $i4;

        r0 := @this: sun.nio.cs.Surrogate$Parser;
        c0 := @parameter0: char;
        r1 := @parameter1: java.nio.CharBuffer;
        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c0);
        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<java.nio.CharBuffer: boolean hasRemaining()>();
        if $z1 != 0 goto label0;

        $r2 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;
        r0.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error> = $r2;
        return -1;

     label0:
        c1 = virtualinvoke r1.<java.nio.CharBuffer: char get()>();
        $z2 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(c1);
        if $z2 == 0 goto label1;

        $i2 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(c0, c1);
        r0.<sun.nio.cs.Surrogate$Parser: int character> = $i2;
        r0.<sun.nio.cs.Surrogate$Parser: boolean isPair> = 1;
        r0.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error> = null;
        $i3 = r0.<sun.nio.cs.Surrogate$Parser: int character>;
        return $i3;

     label1:
        $r3 = staticinvoke <java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>(1);
        r0.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error> = $r3;
        return -1;

     label2:
        $z3 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(c0);
        if $z3 == 0 goto label3;

        $r4 = staticinvoke <java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>(1);
        r0.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error> = $r4;
        return -1;

     label3:
        r0.<sun.nio.cs.Surrogate$Parser: int character> = c0;
        r0.<sun.nio.cs.Surrogate$Parser: boolean isPair> = 0;
        r0.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error> = null;
        $i4 = r0.<sun.nio.cs.Surrogate$Parser: int character>;
        return $i4;
    }

    public int parse(char, char[], int, int)
    {
        sun.nio.cs.Surrogate$Parser r0;
        char c0, c3, $c4;
        char[] r1;
        int i1, i2, $i5, $i6, $i7, $i8, $i9;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r2;
        java.nio.charset.CoderResult $r3, $r4, $r5;

        r0 := @this: sun.nio.cs.Surrogate$Parser;
        c0 := @parameter0: char;
        r1 := @parameter1: char[];
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        $z0 = <sun.nio.cs.Surrogate$Parser: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $c4 = r1[i1];
        if $c4 == c0 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $z1 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c0);
        if $z1 == 0 goto label3;

        $i5 = i2 - i1;
        if $i5 >= 2 goto label1;

        $r3 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;
        r0.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error> = $r3;
        return -1;

     label1:
        $i6 = i1 + 1;
        c3 = r1[$i6];
        $z2 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(c3);
        if $z2 == 0 goto label2;

        $i7 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(c0, c3);
        r0.<sun.nio.cs.Surrogate$Parser: int character> = $i7;
        r0.<sun.nio.cs.Surrogate$Parser: boolean isPair> = 1;
        r0.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error> = null;
        $i8 = r0.<sun.nio.cs.Surrogate$Parser: int character>;
        return $i8;

     label2:
        $r4 = staticinvoke <java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>(1);
        r0.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error> = $r4;
        return -1;

     label3:
        $z3 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(c0);
        if $z3 == 0 goto label4;

        $r5 = staticinvoke <java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>(1);
        r0.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error> = $r5;
        return -1;

     label4:
        r0.<sun.nio.cs.Surrogate$Parser: int character> = c0;
        r0.<sun.nio.cs.Surrogate$Parser: boolean isPair> = 0;
        r0.<sun.nio.cs.Surrogate$Parser: java.nio.charset.CoderResult error> = null;
        $i9 = r0.<sun.nio.cs.Surrogate$Parser: int character>;
        return $i9;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/nio/cs/Surrogate";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.cs.Surrogate$Parser: boolean $assertionsDisabled> = $z1;
        return;
    }
}
