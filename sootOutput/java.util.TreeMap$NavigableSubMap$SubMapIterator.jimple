abstract class java.util.TreeMap$NavigableSubMap$SubMapIterator extends java.lang.Object implements java.util.Iterator
{
    java.util.TreeMap$Entry lastReturned;
    java.util.TreeMap$Entry next;
    final java.lang.Object fenceKey;
    int expectedModCount;
    final java.util.TreeMap$NavigableSubMap this$0;

    void <init>(java.util.TreeMap$NavigableSubMap, java.util.TreeMap$Entry, java.util.TreeMap$Entry)
    {
        java.util.TreeMap$NavigableSubMap$SubMapIterator r0;
        java.util.TreeMap$NavigableSubMap r1;
        java.util.TreeMap$Entry r2, r3;
        java.util.TreeMap $r4;
        int $i0;
        java.lang.Object $r6;

        r0 := @this: java.util.TreeMap$NavigableSubMap$SubMapIterator;
        r1 := @parameter0: java.util.TreeMap$NavigableSubMap;
        r2 := @parameter1: java.util.TreeMap$Entry;
        r3 := @parameter2: java.util.TreeMap$Entry;
        r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$NavigableSubMap this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r4 = r1.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $i0 = staticinvoke <java.util.TreeMap: int access$100(java.util.TreeMap)>($r4);
        r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: int expectedModCount> = $i0;
        r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry lastReturned> = null;
        r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry next> = r2;
        if r3 != null goto label0;

        $r6 = staticinvoke <java.util.TreeMap: java.lang.Object access$200()>();
        goto label1;

     label0:
        $r6 = r3.<java.util.TreeMap$Entry: java.lang.Object key>;

     label1:
        r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.lang.Object fenceKey> = $r6;
        return;
    }

    public final boolean hasNext()
    {
        java.util.TreeMap$NavigableSubMap$SubMapIterator r0;
        java.util.TreeMap$Entry $r1, $r2;
        java.lang.Object $r3, $r4;
        boolean $z0;

        r0 := @this: java.util.TreeMap$NavigableSubMap$SubMapIterator;
        $r1 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry next>;
        if $r1 == null goto label0;

        $r2 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry next>;
        $r3 = $r2.<java.util.TreeMap$Entry: java.lang.Object key>;
        $r4 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.lang.Object fenceKey>;
        if $r3 == $r4 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    final java.util.TreeMap$Entry nextEntry()
    {
        java.util.TreeMap$NavigableSubMap$SubMapIterator r0;
        java.util.TreeMap$Entry r1, $r8;
        java.lang.Object $r2, $r3;
        java.util.NoSuchElementException $r4;
        java.util.TreeMap$NavigableSubMap $r5;
        java.util.TreeMap $r6;
        int $i0, $i1;
        java.util.ConcurrentModificationException $r7;

        r0 := @this: java.util.TreeMap$NavigableSubMap$SubMapIterator;
        r1 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry next>;
        if r1 == null goto label0;

        $r2 = r1.<java.util.TreeMap$Entry: java.lang.Object key>;
        $r3 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.lang.Object fenceKey>;
        if $r2 != $r3 goto label1;

     label0:
        $r4 = new java.util.NoSuchElementException;
        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();
        throw $r4;

     label1:
        $r5 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$NavigableSubMap this$0>;
        $r6 = $r5.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $i0 = staticinvoke <java.util.TreeMap: int access$100(java.util.TreeMap)>($r6);
        $i1 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: int expectedModCount>;
        if $i0 == $i1 goto label2;

        $r7 = new java.util.ConcurrentModificationException;
        specialinvoke $r7.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r7;

     label2:
        $r8 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry successor(java.util.TreeMap$Entry)>(r1);
        r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry next> = $r8;
        r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry lastReturned> = r1;
        return r1;
    }

    final java.util.TreeMap$Entry prevEntry()
    {
        java.util.TreeMap$NavigableSubMap$SubMapIterator r0;
        java.util.TreeMap$Entry r1, $r8;
        java.lang.Object $r2, $r3;
        java.util.NoSuchElementException $r4;
        java.util.TreeMap$NavigableSubMap $r5;
        java.util.TreeMap $r6;
        int $i0, $i1;
        java.util.ConcurrentModificationException $r7;

        r0 := @this: java.util.TreeMap$NavigableSubMap$SubMapIterator;
        r1 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry next>;
        if r1 == null goto label0;

        $r2 = r1.<java.util.TreeMap$Entry: java.lang.Object key>;
        $r3 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.lang.Object fenceKey>;
        if $r2 != $r3 goto label1;

     label0:
        $r4 = new java.util.NoSuchElementException;
        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();
        throw $r4;

     label1:
        $r5 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$NavigableSubMap this$0>;
        $r6 = $r5.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $i0 = staticinvoke <java.util.TreeMap: int access$100(java.util.TreeMap)>($r6);
        $i1 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: int expectedModCount>;
        if $i0 == $i1 goto label2;

        $r7 = new java.util.ConcurrentModificationException;
        specialinvoke $r7.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r7;

     label2:
        $r8 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry predecessor(java.util.TreeMap$Entry)>(r1);
        r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry next> = $r8;
        r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry lastReturned> = r1;
        return r1;
    }

    final void removeAscending()
    {
        java.util.TreeMap$NavigableSubMap$SubMapIterator r0;
        java.util.TreeMap$Entry $r1, $r6, $r7, $r8, $r9, $r10, $r13;
        java.lang.IllegalStateException $r2;
        java.util.TreeMap$NavigableSubMap $r3, $r11, $r14;
        java.util.TreeMap $r4, $r12, $r15;
        int $i0, $i1, $i2;
        java.util.ConcurrentModificationException $r5;

        r0 := @this: java.util.TreeMap$NavigableSubMap$SubMapIterator;
        $r1 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry lastReturned>;
        if $r1 != null goto label0;

        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$NavigableSubMap this$0>;
        $r4 = $r3.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $i0 = staticinvoke <java.util.TreeMap: int access$100(java.util.TreeMap)>($r4);
        $i1 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: int expectedModCount>;
        if $i0 == $i1 goto label1;

        $r5 = new java.util.ConcurrentModificationException;
        specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r5;

     label1:
        $r6 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry lastReturned>;
        $r7 = $r6.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        if $r7 == null goto label2;

        $r8 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry lastReturned>;
        $r9 = $r8.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        if $r9 == null goto label2;

        $r10 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry lastReturned>;
        r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry next> = $r10;

     label2:
        $r11 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$NavigableSubMap this$0>;
        $r12 = $r11.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r13 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry lastReturned>;
        staticinvoke <java.util.TreeMap: void access$000(java.util.TreeMap,java.util.TreeMap$Entry)>($r12, $r13);
        r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry lastReturned> = null;
        $r14 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$NavigableSubMap this$0>;
        $r15 = $r14.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $i2 = staticinvoke <java.util.TreeMap: int access$100(java.util.TreeMap)>($r15);
        r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: int expectedModCount> = $i2;
        return;
    }

    final void removeDescending()
    {
        java.util.TreeMap$NavigableSubMap$SubMapIterator r0;
        java.util.TreeMap$Entry $r1, $r8;
        java.lang.IllegalStateException $r2;
        java.util.TreeMap$NavigableSubMap $r3, $r6, $r9;
        java.util.TreeMap $r4, $r7, $r10;
        int $i0, $i1, $i2;
        java.util.ConcurrentModificationException $r5;

        r0 := @this: java.util.TreeMap$NavigableSubMap$SubMapIterator;
        $r1 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry lastReturned>;
        if $r1 != null goto label0;

        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$NavigableSubMap this$0>;
        $r4 = $r3.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $i0 = staticinvoke <java.util.TreeMap: int access$100(java.util.TreeMap)>($r4);
        $i1 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: int expectedModCount>;
        if $i0 == $i1 goto label1;

        $r5 = new java.util.ConcurrentModificationException;
        specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r5;

     label1:
        $r6 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$NavigableSubMap this$0>;
        $r7 = $r6.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $r8 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry lastReturned>;
        staticinvoke <java.util.TreeMap: void access$000(java.util.TreeMap,java.util.TreeMap$Entry)>($r7, $r8);
        r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$Entry lastReturned> = null;
        $r9 = r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: java.util.TreeMap$NavigableSubMap this$0>;
        $r10 = $r9.<java.util.TreeMap$NavigableSubMap: java.util.TreeMap m>;
        $i2 = staticinvoke <java.util.TreeMap: int access$100(java.util.TreeMap)>($r10);
        r0.<java.util.TreeMap$NavigableSubMap$SubMapIterator: int expectedModCount> = $i2;
        return;
    }
}
