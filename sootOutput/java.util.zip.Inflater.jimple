public class java.util.zip.Inflater extends java.lang.Object
{
    private final java.util.zip.ZStreamRef zsRef;
    private byte[] buf;
    private int off;
    private int len;
    private boolean finished;
    private boolean needDict;
    private long bytesRead;
    private long bytesWritten;
    private static final byte[] defaultBuf;
    static final boolean $assertionsDisabled;

    public void <init>(boolean)
    {
        java.util.zip.Inflater r0;
        boolean z0;
        byte[] $r1;
        java.util.zip.ZStreamRef $r2;
        long $l0;

        r0 := @this: java.util.zip.Inflater;
        z0 := @parameter0: boolean;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = <java.util.zip.Inflater: byte[] defaultBuf>;
        r0.<java.util.zip.Inflater: byte[] buf> = $r1;
        $r2 = new java.util.zip.ZStreamRef;
        $l0 = staticinvoke <java.util.zip.Inflater: long init(boolean)>(z0);
        specialinvoke $r2.<java.util.zip.ZStreamRef: void <init>(long)>($l0);
        r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef> = $r2;
        return;
    }

    public void <init>()
    {
        java.util.zip.Inflater r0;

        r0 := @this: java.util.zip.Inflater;
        specialinvoke r0.<java.util.zip.Inflater: void <init>(boolean)>(0);
        return;
    }

    public void setInput(byte[], int, int)
    {
        java.util.zip.Inflater r0;
        byte[] r1;
        int i0, i1, $i2, $i3;
        java.util.zip.ZStreamRef r2, $r6;
        java.lang.Throwable r3, $r7;
        java.lang.NullPointerException $r4;
        java.lang.ArrayIndexOutOfBoundsException $r5;

        r0 := @this: java.util.zip.Inflater;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if r1 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label0:
        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i2 = lengthof r1;
        $i3 = $i2 - i1;
        if i0 <= $i3 goto label2;

     label1:
        $r5 = new java.lang.ArrayIndexOutOfBoundsException;
        specialinvoke $r5.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();
        throw $r5;

     label2:
        $r6 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        r2 = $r6;
        entermonitor $r6;

     label3:
        r0.<java.util.zip.Inflater: byte[] buf> = r1;
        r0.<java.util.zip.Inflater: int off> = i0;
        r0.<java.util.zip.Inflater: int len> = i1;
        exitmonitor r2;

     label4:
        goto label8;

     label5:
        $r7 := @caughtexception;

     label6:
        r3 = $r7;
        exitmonitor r2;

     label7:
        throw r3;

     label8:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setInput(byte[])
    {
        java.util.zip.Inflater r0;
        byte[] r1;
        int $i0;

        r0 := @this: java.util.zip.Inflater;
        r1 := @parameter0: byte[];
        $i0 = lengthof r1;
        virtualinvoke r0.<java.util.zip.Inflater: void setInput(byte[],int,int)>(r1, 0, $i0);
        return;
    }

    public void setDictionary(byte[], int, int)
    {
        java.util.zip.Inflater r0;
        byte[] r1;
        int i0, i1, $i2, $i3;
        java.util.zip.ZStreamRef r2, $r6, $r7;
        java.lang.Throwable r3, $r8;
        java.lang.NullPointerException $r4;
        java.lang.ArrayIndexOutOfBoundsException $r5;
        long $l4;

        r0 := @this: java.util.zip.Inflater;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if r1 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label0:
        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i2 = lengthof r1;
        $i3 = $i2 - i1;
        if i0 <= $i3 goto label2;

     label1:
        $r5 = new java.lang.ArrayIndexOutOfBoundsException;
        specialinvoke $r5.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();
        throw $r5;

     label2:
        $r6 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        r2 = $r6;
        entermonitor $r6;

     label3:
        specialinvoke r0.<java.util.zip.Inflater: void ensureOpen()>();
        $r7 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        $l4 = virtualinvoke $r7.<java.util.zip.ZStreamRef: long address()>();
        staticinvoke <java.util.zip.Inflater: void setDictionary(long,byte[],int,int)>($l4, r1, i0, i1);
        r0.<java.util.zip.Inflater: boolean needDict> = 0;
        exitmonitor r2;

     label4:
        goto label8;

     label5:
        $r8 := @caughtexception;

     label6:
        r3 = $r8;
        exitmonitor r2;

     label7:
        throw r3;

     label8:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setDictionary(byte[])
    {
        java.util.zip.Inflater r0;
        byte[] r1;
        int $i0;

        r0 := @this: java.util.zip.Inflater;
        r1 := @parameter0: byte[];
        $i0 = lengthof r1;
        virtualinvoke r0.<java.util.zip.Inflater: void setDictionary(byte[],int,int)>(r1, 0, $i0);
        return;
    }

    public int getRemaining()
    {
        java.util.zip.Inflater r0;
        java.util.zip.ZStreamRef r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;

        r0 := @this: java.util.zip.Inflater;
        $r3 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $i0 = r0.<java.util.zip.Inflater: int len>;
        exitmonitor r1;

     label1:
        return $i0;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public boolean needsInput()
    {
        java.util.zip.Inflater r0;
        java.util.zip.ZStreamRef r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.zip.Inflater;
        $r3 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $i0 = r0.<java.util.zip.Inflater: int len>;
        if $i0 > 0 goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        exitmonitor r1;

     label3:
        return $z0;

     label4:
        $r4 := @caughtexception;

     label5:
        r2 = $r4;
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean needsDictionary()
    {
        java.util.zip.Inflater r0;
        java.util.zip.ZStreamRef r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: java.util.zip.Inflater;
        $r3 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z0 = r0.<java.util.zip.Inflater: boolean needDict>;
        exitmonitor r1;

     label1:
        return $z0;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public boolean finished()
    {
        java.util.zip.Inflater r0;
        java.util.zip.ZStreamRef r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: java.util.zip.Inflater;
        $r3 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z0 = r0.<java.util.zip.Inflater: boolean finished>;
        exitmonitor r1;

     label1:
        return $z0;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public int inflate(byte[], int, int) throws java.util.zip.DataFormatException
    {
        java.util.zip.Inflater r0;
        byte[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i11, $i12;
        java.util.zip.ZStreamRef r2, $r6, $r7;
        java.lang.Throwable r3, $r10;
        java.lang.NullPointerException $r4;
        java.lang.ArrayIndexOutOfBoundsException $r5;
        long $l6, $l7, $l8, $l9, $l10, $l13, $l14;

        r0 := @this: java.util.zip.Inflater;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if r1 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label0:
        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i4 = lengthof r1;
        $i5 = $i4 - i1;
        if i0 <= $i5 goto label2;

     label1:
        $r5 = new java.lang.ArrayIndexOutOfBoundsException;
        specialinvoke $r5.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();
        throw $r5;

     label2:
        $r6 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        r2 = $r6;
        entermonitor $r6;

     label3:
        specialinvoke r0.<java.util.zip.Inflater: void ensureOpen()>();
        i2 = r0.<java.util.zip.Inflater: int len>;
        $r7 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        $l6 = virtualinvoke $r7.<java.util.zip.ZStreamRef: long address()>();
        i3 = specialinvoke r0.<java.util.zip.Inflater: int inflateBytes(long,byte[],int,int)>($l6, r1, i0, i1);
        $l7 = r0.<java.util.zip.Inflater: long bytesWritten>;
        $l8 = (long) i3;
        $l9 = $l7 + $l8;
        r0.<java.util.zip.Inflater: long bytesWritten> = $l9;
        $l10 = r0.<java.util.zip.Inflater: long bytesRead>;
        $i11 = r0.<java.util.zip.Inflater: int len>;
        $i12 = i2 - $i11;
        $l13 = (long) $i12;
        $l14 = $l10 + $l13;
        r0.<java.util.zip.Inflater: long bytesRead> = $l14;
        exitmonitor r2;

     label4:
        return i3;

     label5:
        $r10 := @caughtexception;

     label6:
        r3 = $r10;
        exitmonitor r2;

     label7:
        throw r3;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public int inflate(byte[]) throws java.util.zip.DataFormatException
    {
        java.util.zip.Inflater r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: java.util.zip.Inflater;
        r1 := @parameter0: byte[];
        $i0 = lengthof r1;
        $i1 = virtualinvoke r0.<java.util.zip.Inflater: int inflate(byte[],int,int)>(r1, 0, $i0);
        return $i1;
    }

    public int getAdler()
    {
        java.util.zip.Inflater r0;
        java.util.zip.ZStreamRef r1, $r3, $r4;
        java.lang.Throwable r2, $r5;
        long $l0;
        int $i1;

        r0 := @this: java.util.zip.Inflater;
        $r3 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        specialinvoke r0.<java.util.zip.Inflater: void ensureOpen()>();
        $r4 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        $l0 = virtualinvoke $r4.<java.util.zip.ZStreamRef: long address()>();
        $i1 = staticinvoke <java.util.zip.Inflater: int getAdler(long)>($l0);
        exitmonitor r1;

     label1:
        return $i1;

     label2:
        $r5 := @caughtexception;

     label3:
        r2 = $r5;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public int getTotalIn()
    {
        java.util.zip.Inflater r0;
        long $l0;
        int $i1;

        r0 := @this: java.util.zip.Inflater;
        $l0 = virtualinvoke r0.<java.util.zip.Inflater: long getBytesRead()>();
        $i1 = (int) $l0;
        return $i1;
    }

    public long getBytesRead()
    {
        java.util.zip.Inflater r0;
        java.util.zip.ZStreamRef r1, $r3;
        java.lang.Throwable r2, $r4;
        long $l0;

        r0 := @this: java.util.zip.Inflater;
        $r3 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        specialinvoke r0.<java.util.zip.Inflater: void ensureOpen()>();
        $l0 = r0.<java.util.zip.Inflater: long bytesRead>;
        exitmonitor r1;

     label1:
        return $l0;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public int getTotalOut()
    {
        java.util.zip.Inflater r0;
        long $l0;
        int $i1;

        r0 := @this: java.util.zip.Inflater;
        $l0 = virtualinvoke r0.<java.util.zip.Inflater: long getBytesWritten()>();
        $i1 = (int) $l0;
        return $i1;
    }

    public long getBytesWritten()
    {
        java.util.zip.Inflater r0;
        java.util.zip.ZStreamRef r1, $r3;
        java.lang.Throwable r2, $r4;
        long $l0;

        r0 := @this: java.util.zip.Inflater;
        $r3 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        specialinvoke r0.<java.util.zip.Inflater: void ensureOpen()>();
        $l0 = r0.<java.util.zip.Inflater: long bytesWritten>;
        exitmonitor r1;

     label1:
        return $l0;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void reset()
    {
        java.util.zip.Inflater r0;
        java.util.zip.ZStreamRef r1, $r3, $r4;
        byte $b0;
        long $l1, $l2;
        java.lang.Throwable r2, $r6;
        byte[] $r5;

        r0 := @this: java.util.zip.Inflater;
        $r3 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        specialinvoke r0.<java.util.zip.Inflater: void ensureOpen()>();
        $r4 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        $l2 = virtualinvoke $r4.<java.util.zip.ZStreamRef: long address()>();
        staticinvoke <java.util.zip.Inflater: void reset(long)>($l2);
        $r5 = <java.util.zip.Inflater: byte[] defaultBuf>;
        r0.<java.util.zip.Inflater: byte[] buf> = $r5;
        r0.<java.util.zip.Inflater: boolean finished> = 0;
        r0.<java.util.zip.Inflater: boolean needDict> = 0;
        $b0 = 0;
        r0.<java.util.zip.Inflater: int len> = $b0;
        r0.<java.util.zip.Inflater: int off> = $b0;
        $l1 = 0L;
        r0.<java.util.zip.Inflater: long bytesWritten> = $l1;
        r0.<java.util.zip.Inflater: long bytesRead> = $l1;
        exitmonitor r1;

     label1:
        goto label5;

     label2:
        $r6 := @caughtexception;

     label3:
        r2 = $r6;
        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void end()
    {
        java.util.zip.Inflater r0;
        java.util.zip.ZStreamRef r1, $r3, $r4, $r5;
        long l0;
        java.lang.Throwable r2, $r6;
        byte $b1;

        r0 := @this: java.util.zip.Inflater;
        $r3 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        l0 = virtualinvoke $r4.<java.util.zip.ZStreamRef: long address()>();
        $r5 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        virtualinvoke $r5.<java.util.zip.ZStreamRef: void clear()>();
        $b1 = l0 cmp 0L;
        if $b1 == 0 goto label1;

        staticinvoke <java.util.zip.Inflater: void end(long)>(l0);
        r0.<java.util.zip.Inflater: byte[] buf> = null;

     label1:
        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r6 := @caughtexception;

     label4:
        r2 = $r6;
        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected void finalize()
    {
        java.util.zip.Inflater r0;

        r0 := @this: java.util.zip.Inflater;
        virtualinvoke r0.<java.util.zip.Inflater: void end()>();
        return;
    }

    private void ensureOpen()
    {
        java.util.zip.Inflater r0;
        boolean $z0, $z1;
        java.util.zip.ZStreamRef $r1, $r3;
        java.lang.AssertionError $r2;
        long $l0;
        byte $b1;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.zip.Inflater;
        $z0 = <java.util.zip.Inflater: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r1 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);
        if $z1 != 0 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        $l0 = virtualinvoke $r3.<java.util.zip.ZStreamRef: long address()>();
        $b1 = $l0 cmp 0L;
        if $b1 != 0 goto label1;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Inflater has been closed");
        throw $r4;

     label1:
        return;
    }

    boolean ended()
    {
        java.util.zip.Inflater r0;
        java.util.zip.ZStreamRef r1, $r3, $r4;
        java.lang.Throwable r2, $r5;
        long $l0;
        byte $b1;
        boolean $z0;

        r0 := @this: java.util.zip.Inflater;
        $r3 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = r0.<java.util.zip.Inflater: java.util.zip.ZStreamRef zsRef>;
        $l0 = virtualinvoke $r4.<java.util.zip.ZStreamRef: long address()>();
        $b1 = $l0 cmp 0L;
        if $b1 != 0 goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        exitmonitor r1;

     label3:
        return $z0;

     label4:
        $r5 := @caughtexception;

     label5:
        r2 = $r5;
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private static native void initIDs();

    private static native long init(boolean);

    private static native void setDictionary(long, byte[], int, int);

    private native int inflateBytes(long, byte[], int, int) throws java.util.zip.DataFormatException;

    private static native int getAdler(long);

    private static native void reset(long);

    private static native void end(long);

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        byte[] $r1;

        $r0 = class "java/util/zip/Inflater";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.util.zip.Inflater: boolean $assertionsDisabled> = $z1;
        $r1 = newarray (byte)[0];
        <java.util.zip.Inflater: byte[] defaultBuf> = $r1;
        staticinvoke <java.util.zip.Inflater: void initIDs()>();
        return;
    }
}
