public class java.util.LinkedHashMap extends java.util.HashMap implements java.util.Map
{
    private static final long serialVersionUID;
    private transient java.util.LinkedHashMap$Entry header;
    private final boolean accessOrder;

    public void <init>(int, float)
    {
        java.util.LinkedHashMap r0;
        int i0;
        float f0;

        r0 := @this: java.util.LinkedHashMap;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        specialinvoke r0.<java.util.HashMap: void <init>(int,float)>(i0, f0);
        r0.<java.util.LinkedHashMap: boolean accessOrder> = 0;
        return;
    }

    public void <init>(int)
    {
        java.util.LinkedHashMap r0;
        int i0;

        r0 := @this: java.util.LinkedHashMap;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.HashMap: void <init>(int)>(i0);
        r0.<java.util.LinkedHashMap: boolean accessOrder> = 0;
        return;
    }

    public void <init>()
    {
        java.util.LinkedHashMap r0;

        r0 := @this: java.util.LinkedHashMap;
        specialinvoke r0.<java.util.HashMap: void <init>()>();
        r0.<java.util.LinkedHashMap: boolean accessOrder> = 0;
        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.LinkedHashMap r0;
        java.util.Map r1;

        r0 := @this: java.util.LinkedHashMap;
        r1 := @parameter0: java.util.Map;
        specialinvoke r0.<java.util.HashMap: void <init>(java.util.Map)>(r1);
        r0.<java.util.LinkedHashMap: boolean accessOrder> = 0;
        return;
    }

    public void <init>(int, float, boolean)
    {
        java.util.LinkedHashMap r0;
        int i0;
        float f0;
        boolean z0;

        r0 := @this: java.util.LinkedHashMap;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        z0 := @parameter2: boolean;
        specialinvoke r0.<java.util.HashMap: void <init>(int,float)>(i0, f0);
        r0.<java.util.LinkedHashMap: boolean accessOrder> = z0;
        return;
    }

    void init()
    {
        java.util.LinkedHashMap r0;
        java.util.LinkedHashMap$Entry $r1, $r2, $r3, $r4;

        r0 := @this: java.util.LinkedHashMap;
        $r1 = new java.util.LinkedHashMap$Entry;
        specialinvoke $r1.<java.util.LinkedHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Entry)>(-1, null, null, null);
        r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry header> = $r1;
        $r2 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry header>;
        $r3 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry header>;
        $r4 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry header>;
        $r4.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after> = $r3;
        $r2.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before> = $r3;
        return;
    }

    void transfer(java.util.HashMap$Entry[], boolean)
    {
        java.util.LinkedHashMap r0;
        java.util.HashMap$Entry[] r1;
        boolean z0;
        int i0, i1, $i2, $i3;
        java.util.LinkedHashMap$Entry r2, $r3, $r4, $r5;
        java.lang.Object $r6, $r7;
        java.util.HashMap$Entry $r8;

        r0 := @this: java.util.LinkedHashMap;
        r1 := @parameter0: java.util.HashMap$Entry[];
        z0 := @parameter1: boolean;
        i0 = lengthof r1;
        $r3 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry header>;
        r2 = $r3.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after>;

     label0:
        $r4 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry header>;
        if r2 == $r4 goto label4;

        if z0 == 0 goto label3;

        $r5 = r2;
        $r6 = r2.<java.util.LinkedHashMap$Entry: java.lang.Object key>;
        if $r6 != null goto label1;

        $i2 = 0;
        goto label2;

     label1:
        $r7 = r2.<java.util.LinkedHashMap$Entry: java.lang.Object key>;
        $i2 = virtualinvoke r0.<java.util.LinkedHashMap: int hash(java.lang.Object)>($r7);

     label2:
        $r5.<java.util.LinkedHashMap$Entry: int hash> = $i2;

     label3:
        $i3 = r2.<java.util.LinkedHashMap$Entry: int hash>;
        i1 = staticinvoke <java.util.LinkedHashMap: int indexFor(int,int)>($i3, i0);
        $r8 = r1[i1];
        r2.<java.util.LinkedHashMap$Entry: java.util.HashMap$Entry next> = $r8;
        r1[i1] = r2;
        r2 = r2.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after>;
        goto label0;

     label4:
        return;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.LinkedHashMap r0;
        java.lang.Object r1, $r5, $r9;
        java.util.LinkedHashMap$Entry r2, $r3, $r4, $r6, r7, $r8;
        boolean $z0;

        r0 := @this: java.util.LinkedHashMap;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label3;

        $r3 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry header>;
        r2 = $r3.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after>;

     label0:
        $r4 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry header>;
        if r2 == $r4 goto label2;

        $r5 = r2.<java.util.LinkedHashMap$Entry: java.lang.Object value>;
        if $r5 != null goto label1;

        return 1;

     label1:
        r2 = r2.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after>;
        goto label0;

     label2:
        goto label6;

     label3:
        $r6 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry header>;
        r7 = $r6.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after>;

     label4:
        $r8 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry header>;
        if r7 == $r8 goto label6;

        $r9 = r7.<java.util.LinkedHashMap$Entry: java.lang.Object value>;
        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r9);
        if $z0 == 0 goto label5;

        return 1;

     label5:
        r7 = r7.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after>;
        goto label4;

     label6:
        return 0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.LinkedHashMap r0;
        java.lang.Object r1, $r4;
        java.util.LinkedHashMap$Entry r2;
        java.util.HashMap$Entry $r3;

        r0 := @this: java.util.LinkedHashMap;
        r1 := @parameter0: java.lang.Object;
        $r3 = virtualinvoke r0.<java.util.LinkedHashMap: java.util.HashMap$Entry getEntry(java.lang.Object)>(r1);
        r2 = (java.util.LinkedHashMap$Entry) $r3;
        if r2 != null goto label0;

        return null;

     label0:
        virtualinvoke r2.<java.util.LinkedHashMap$Entry: void recordAccess(java.util.HashMap)>(r0);
        $r4 = r2.<java.util.LinkedHashMap$Entry: java.lang.Object value>;
        return $r4;
    }

    public void clear()
    {
        java.util.LinkedHashMap r0;
        java.util.LinkedHashMap$Entry $r1, $r2, $r3;

        r0 := @this: java.util.LinkedHashMap;
        specialinvoke r0.<java.util.HashMap: void clear()>();
        $r2 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry header>;
        $r1 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry header>;
        $r3 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry header>;
        $r3.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after> = $r1;
        $r2.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before> = $r1;
        return;
    }

    java.util.Iterator newKeyIterator()
    {
        java.util.LinkedHashMap r0;
        java.util.LinkedHashMap$KeyIterator $r1;

        r0 := @this: java.util.LinkedHashMap;
        $r1 = new java.util.LinkedHashMap$KeyIterator;
        specialinvoke $r1.<java.util.LinkedHashMap$KeyIterator: void <init>(java.util.LinkedHashMap,java.util.LinkedHashMap$1)>(r0, null);
        return $r1;
    }

    java.util.Iterator newValueIterator()
    {
        java.util.LinkedHashMap r0;
        java.util.LinkedHashMap$ValueIterator $r1;

        r0 := @this: java.util.LinkedHashMap;
        $r1 = new java.util.LinkedHashMap$ValueIterator;
        specialinvoke $r1.<java.util.LinkedHashMap$ValueIterator: void <init>(java.util.LinkedHashMap,java.util.LinkedHashMap$1)>(r0, null);
        return $r1;
    }

    java.util.Iterator newEntryIterator()
    {
        java.util.LinkedHashMap r0;
        java.util.LinkedHashMap$EntryIterator $r1;

        r0 := @this: java.util.LinkedHashMap;
        $r1 = new java.util.LinkedHashMap$EntryIterator;
        specialinvoke $r1.<java.util.LinkedHashMap$EntryIterator: void <init>(java.util.LinkedHashMap,java.util.LinkedHashMap$1)>(r0, null);
        return $r1;
    }

    void addEntry(int, java.lang.Object, java.lang.Object, int)
    {
        java.util.LinkedHashMap r0;
        int i0, i1;
        java.lang.Object r1, r2, $r5;
        java.util.LinkedHashMap$Entry r3, $r4;
        boolean $z0;

        r0 := @this: java.util.LinkedHashMap;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.lang.Object;
        i1 := @parameter3: int;
        specialinvoke r0.<java.util.HashMap: void addEntry(int,java.lang.Object,java.lang.Object,int)>(i0, r1, r2, i1);
        $r4 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry header>;
        r3 = $r4.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after>;
        $z0 = virtualinvoke r0.<java.util.LinkedHashMap: boolean removeEldestEntry(java.util.Map$Entry)>(r3);
        if $z0 == 0 goto label0;

        $r5 = r3.<java.util.LinkedHashMap$Entry: java.lang.Object key>;
        virtualinvoke r0.<java.util.LinkedHashMap: java.util.HashMap$Entry removeEntryForKey(java.lang.Object)>($r5);

     label0:
        return;
    }

    void createEntry(int, java.lang.Object, java.lang.Object, int)
    {
        java.util.LinkedHashMap r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r1, r2;
        java.util.HashMap$Entry r3;
        java.util.LinkedHashMap$Entry r4, $r6, $r8;
        java.util.HashMap$Entry[] $r5, $r7;

        r0 := @this: java.util.LinkedHashMap;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.lang.Object;
        i1 := @parameter3: int;
        $r5 = r0.<java.util.LinkedHashMap: java.util.HashMap$Entry[] table>;
        r3 = $r5[i1];
        $r6 = new java.util.LinkedHashMap$Entry;
        specialinvoke $r6.<java.util.LinkedHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Entry)>(i0, r1, r2, r3);
        r4 = $r6;
        $r7 = r0.<java.util.LinkedHashMap: java.util.HashMap$Entry[] table>;
        $r7[i1] = r4;
        $r8 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry header>;
        staticinvoke <java.util.LinkedHashMap$Entry: void access$600(java.util.LinkedHashMap$Entry,java.util.LinkedHashMap$Entry)>(r4, $r8);
        $i2 = r0.<java.util.LinkedHashMap: int size>;
        $i3 = $i2 + 1;
        r0.<java.util.LinkedHashMap: int size> = $i3;
        return;
    }

    protected boolean removeEldestEntry(java.util.Map$Entry)
    {
        java.util.LinkedHashMap r0;
        java.util.Map$Entry r1;

        r0 := @this: java.util.LinkedHashMap;
        r1 := @parameter0: java.util.Map$Entry;
        return 0;
    }

    static boolean access$000(java.util.LinkedHashMap)
    {
        java.util.LinkedHashMap r0;
        boolean $z0;

        r0 := @parameter0: java.util.LinkedHashMap;
        $z0 = r0.<java.util.LinkedHashMap: boolean accessOrder>;
        return $z0;
    }

    static java.util.LinkedHashMap$Entry access$100(java.util.LinkedHashMap)
    {
        java.util.LinkedHashMap r0;
        java.util.LinkedHashMap$Entry $r1;

        r0 := @parameter0: java.util.LinkedHashMap;
        $r1 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry header>;
        return $r1;
    }
}
