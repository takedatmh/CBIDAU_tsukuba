public class org.apache.naming.ContextAccessController extends java.lang.Object
{
    private static java.util.Hashtable readOnlyContexts;
    private static java.util.Hashtable securityTokens;

    static void <clinit>()
    {
        java.util.Hashtable $r0, $r1;

        $r0 = new java.util.Hashtable;
        specialinvoke $r0.<java.util.Hashtable: void <init>()>();
        <org.apache.naming.ContextAccessController: java.util.Hashtable readOnlyContexts> = $r0;
        $r1 = new java.util.Hashtable;
        specialinvoke $r1.<java.util.Hashtable: void <init>()>();
        <org.apache.naming.ContextAccessController: java.util.Hashtable securityTokens> = $r1;
        return;
    }

    public void <init>()
    {
        org.apache.naming.ContextAccessController r0;

        r0 := @this: org.apache.naming.ContextAccessController;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static void setSecurityToken(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        java.lang.SecurityManager r2;
        java.lang.RuntimePermission $r3;
        java.lang.StringBuilder $r4, $r8;
        java.lang.Class $r5;
        java.lang.String $r6, $r7, $r9;
        java.util.Hashtable $r10, $r11;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label0;

        $r3 = new java.lang.RuntimePermission;
        $r4 = new java.lang.StringBuilder;
        $r5 = class "org/apache/naming/ContextAccessController";
        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();
        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r7);
        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".setSecurityToken");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.RuntimePermission: void <init>(java.lang.String)>($r9);
        virtualinvoke r2.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r3);

     label0:
        $r10 = <org.apache.naming.ContextAccessController: java.util.Hashtable securityTokens>;
        $z0 = virtualinvoke $r10.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0);
        if $z0 != 0 goto label1;

        if r1 == null goto label1;

        $r11 = <org.apache.naming.ContextAccessController: java.util.Hashtable securityTokens>;
        virtualinvoke $r11.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

     label1:
        return;
    }

    public static void unsetSecurityToken(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;
        java.util.Hashtable $r2;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        $z0 = staticinvoke <org.apache.naming.ContextAccessController: boolean checkSecurityToken(java.lang.Object,java.lang.Object)>(r0, r1);
        if $z0 == 0 goto label0;

        $r2 = <org.apache.naming.ContextAccessController: java.util.Hashtable securityTokens>;
        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r0);

     label0:
        return;
    }

    public static boolean checkSecurityToken(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1, r3;
        java.util.Hashtable $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        $r2 = <org.apache.naming.ContextAccessController: java.util.Hashtable securityTokens>;
        r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);
        if r3 == null goto label0;

        $z0 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r1);
        if $z0 != 0 goto label0;

        return 0;

     label0:
        return 1;
    }

    public static void setWritable(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;
        java.util.Hashtable $r2;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        $z0 = staticinvoke <org.apache.naming.ContextAccessController: boolean checkSecurityToken(java.lang.Object,java.lang.Object)>(r0, r1);
        if $z0 == 0 goto label0;

        $r2 = <org.apache.naming.ContextAccessController: java.util.Hashtable readOnlyContexts>;
        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r0);

     label0:
        return;
    }

    public static void setReadOnly(java.lang.Object)
    {
        java.lang.Object r0;
        java.util.Hashtable $r1;

        r0 := @parameter0: java.lang.Object;
        $r1 = <org.apache.naming.ContextAccessController: java.util.Hashtable readOnlyContexts>;
        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r0);
        return;
    }

    public static boolean isWritable(java.lang.Object)
    {
        java.lang.Object r0;
        java.util.Hashtable $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;
        $r1 = <org.apache.naming.ContextAccessController: java.util.Hashtable readOnlyContexts>;
        $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0);
        if $z0 == 0 goto label0;

        $z1 = 0;
        goto label1;

     label0:
        $z1 = 1;

     label1:
        return $z1;
    }
}
