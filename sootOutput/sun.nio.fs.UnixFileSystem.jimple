abstract class sun.nio.fs.UnixFileSystem extends java.nio.file.FileSystem
{
    private final sun.nio.fs.UnixFileSystemProvider provider;
    private final byte[] defaultDirectory;
    private final boolean needToResolveAgainstDefaultDirectory;
    private final sun.nio.fs.UnixPath rootDirectory;
    private static final java.lang.String GLOB_SYNTAX;
    private static final java.lang.String REGEX_SYNTAX;

    void <init>(sun.nio.fs.UnixFileSystemProvider, java.lang.String)
    {
        sun.nio.fs.UnixFileSystem r0;
        sun.nio.fs.UnixFileSystemProvider r1;
        java.lang.String r2, r3, $r5;
        boolean z0, z1, $z2, $z3, $z4;
        byte[] r4, $r6, $r7, $r12, $r13;
        int i0, $i2, $i3, $i4, $i5;
        byte $b1, $b6, $b7;
        java.lang.RuntimeException $r8;
        sun.security.action.GetPropertyAction $r9;
        java.lang.Object $r10;
        java.lang.Boolean $r11;
        sun.nio.fs.UnixPath $r15;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        r1 := @parameter0: sun.nio.fs.UnixFileSystemProvider;
        r2 := @parameter1: java.lang.String;
        specialinvoke r0.<java.nio.file.FileSystem: void <init>()>();
        r0.<sun.nio.fs.UnixFileSystem: sun.nio.fs.UnixFileSystemProvider provider> = r1;
        $r5 = staticinvoke <sun.nio.fs.UnixPath: java.lang.String normalizeAndCheck(java.lang.String)>(r2);
        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();
        r0.<sun.nio.fs.UnixFileSystem: byte[] defaultDirectory> = $r6;
        $r7 = r0.<sun.nio.fs.UnixFileSystem: byte[] defaultDirectory>;
        $b1 = $r7[0];
        if $b1 == 47 goto label0;

        $r8 = new java.lang.RuntimeException;
        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("default directory must be absolute");
        throw $r8;

     label0:
        $r9 = new sun.security.action.GetPropertyAction;
        specialinvoke $r9.<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>("sun.nio.fs.chdirAllowed", "false");
        $r10 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r9);
        r3 = (java.lang.String) $r10;
        $i2 = virtualinvoke r3.<java.lang.String: int length()>();
        if $i2 != 0 goto label1;

        $z2 = 1;
        goto label2;

     label1:
        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r3);
        $z2 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        z0 = $z2;
        if z0 == 0 goto label3;

        r0.<sun.nio.fs.UnixFileSystem: boolean needToResolveAgainstDefaultDirectory> = 1;
        goto label11;

     label3:
        r4 = staticinvoke <sun.nio.fs.UnixNativeDispatcher: byte[] getcwd()>();
        $i3 = lengthof r4;
        $r12 = r0.<sun.nio.fs.UnixFileSystem: byte[] defaultDirectory>;
        $i4 = lengthof $r12;
        if $i3 != $i4 goto label4;

        $z3 = 1;
        goto label5;

     label4:
        $z3 = 0;

     label5:
        z1 = $z3;
        if z1 == 0 goto label8;

        i0 = 0;

     label6:
        $i5 = lengthof r4;
        if i0 >= $i5 goto label8;

        $b6 = r4[i0];
        $r13 = r0.<sun.nio.fs.UnixFileSystem: byte[] defaultDirectory>;
        $b7 = $r13[i0];
        if $b6 == $b7 goto label7;

        z1 = 0;
        goto label8;

     label7:
        i0 = i0 + 1;
        goto label6;

     label8:
        if z1 != 0 goto label9;

        $z4 = 1;
        goto label10;

     label9:
        $z4 = 0;

     label10:
        r0.<sun.nio.fs.UnixFileSystem: boolean needToResolveAgainstDefaultDirectory> = $z4;

     label11:
        $r15 = new sun.nio.fs.UnixPath;
        specialinvoke $r15.<sun.nio.fs.UnixPath: void <init>(sun.nio.fs.UnixFileSystem,java.lang.String)>(r0, "/");
        r0.<sun.nio.fs.UnixFileSystem: sun.nio.fs.UnixPath rootDirectory> = $r15;
        return;
    }

    byte[] defaultDirectory()
    {
        sun.nio.fs.UnixFileSystem r0;
        byte[] $r1;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        $r1 = r0.<sun.nio.fs.UnixFileSystem: byte[] defaultDirectory>;
        return $r1;
    }

    boolean needToResolveAgainstDefaultDirectory()
    {
        sun.nio.fs.UnixFileSystem r0;
        boolean $z0;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        $z0 = r0.<sun.nio.fs.UnixFileSystem: boolean needToResolveAgainstDefaultDirectory>;
        return $z0;
    }

    sun.nio.fs.UnixPath rootDirectory()
    {
        sun.nio.fs.UnixFileSystem r0;
        sun.nio.fs.UnixPath $r1;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        $r1 = r0.<sun.nio.fs.UnixFileSystem: sun.nio.fs.UnixPath rootDirectory>;
        return $r1;
    }

    boolean isSolaris()
    {
        sun.nio.fs.UnixFileSystem r0;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        return 0;
    }

    static java.util.List standardFileAttributeViews()
    {
        java.lang.String[] $r0;
        java.util.List $r1;

        $r0 = newarray (java.lang.String)[4];
        $r0[0] = "basic";
        $r0[1] = "posix";
        $r0[2] = "unix";
        $r0[3] = "owner";
        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);
        return $r1;
    }

    public final java.nio.file.spi.FileSystemProvider provider()
    {
        sun.nio.fs.UnixFileSystem r0;
        sun.nio.fs.UnixFileSystemProvider $r1;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        $r1 = r0.<sun.nio.fs.UnixFileSystem: sun.nio.fs.UnixFileSystemProvider provider>;
        return $r1;
    }

    public final java.lang.String getSeparator()
    {
        sun.nio.fs.UnixFileSystem r0;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        return "/";
    }

    public final boolean isOpen()
    {
        sun.nio.fs.UnixFileSystem r0;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        return 1;
    }

    public final boolean isReadOnly()
    {
        sun.nio.fs.UnixFileSystem r0;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        return 0;
    }

    public final void close() throws java.io.IOException
    {
        sun.nio.fs.UnixFileSystem r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        $r1 = new java.lang.UnsupportedOperationException;
        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r1;
    }

    void copyNonPosixAttributes(int, int)
    {
        sun.nio.fs.UnixFileSystem r0;
        int i0, i1;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        return;
    }

    public final java.lang.Iterable getRootDirectories()
    {
        sun.nio.fs.UnixFileSystem r0;
        java.util.List r1, $r4;
        java.nio.file.Path[] $r2;
        sun.nio.fs.UnixPath $r3;
        sun.nio.fs.UnixFileSystem$1 $r5;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        $r2 = newarray (java.nio.file.Path)[1];
        $r3 = r0.<sun.nio.fs.UnixFileSystem: sun.nio.fs.UnixPath rootDirectory>;
        $r2[0] = $r3;
        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);
        r1 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r4);
        $r5 = new sun.nio.fs.UnixFileSystem$1;
        specialinvoke $r5.<sun.nio.fs.UnixFileSystem$1: void <init>(sun.nio.fs.UnixFileSystem,java.util.List)>(r0, r1);
        return $r5;
    }

    abstract java.lang.Iterable getMountEntries();

    abstract java.nio.file.FileStore getFileStore(sun.nio.fs.UnixMountEntry) throws java.io.IOException;

    public final java.lang.Iterable getFileStores()
    {
        sun.nio.fs.UnixFileSystem r0;
        java.lang.SecurityManager r1;
        java.lang.RuntimePermission $r2;
        java.lang.SecurityException r3, $r4;
        java.util.List $r5;
        sun.nio.fs.UnixFileSystem$2 $r6;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label3;

     label0:
        $r2 = new java.lang.RuntimePermission;
        specialinvoke $r2.<java.lang.RuntimePermission: void <init>(java.lang.String)>("getFileStoreAttributes");
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r3 = $r4;
        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
        return $r5;

     label3:
        $r6 = new sun.nio.fs.UnixFileSystem$2;
        specialinvoke $r6.<sun.nio.fs.UnixFileSystem$2: void <init>(sun.nio.fs.UnixFileSystem)>(r0);
        return $r6;

        catch java.lang.SecurityException from label0 to label1 with label2;
    }

    public final transient java.nio.file.Path getPath(java.lang.String, java.lang.String[])
    {
        sun.nio.fs.UnixFileSystem r0;
        java.lang.String r1, r3, r6;
        java.lang.String[] r2, r5;
        java.lang.StringBuilder r4, $r7;
        int i0, i1, $i2, $i3, $i4;
        sun.nio.fs.UnixPath $r11;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String[];
        $i2 = lengthof r2;
        if $i2 != 0 goto label0;

        r3 = r1;
        goto label5;

     label0:
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        r4 = $r7;
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        r5 = r2;
        i0 = lengthof r5;
        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r6 = r5[i1];
        $i3 = virtualinvoke r6.<java.lang.String: int length()>();
        if $i3 <= 0 goto label3;

        $i4 = virtualinvoke r4.<java.lang.StringBuilder: int length()>();
        if $i4 <= 0 goto label2;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

     label2:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

     label3:
        i1 = i1 + 1;
        goto label1;

     label4:
        r3 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        $r11 = new sun.nio.fs.UnixPath;
        specialinvoke $r11.<sun.nio.fs.UnixPath: void <init>(sun.nio.fs.UnixFileSystem,java.lang.String)>(r0, r3);
        return $r11;
    }

    public java.nio.file.PathMatcher getPathMatcher(java.lang.String)
    {
        sun.nio.fs.UnixFileSystem r0;
        java.lang.String r1, r2, r3, r4, $r12;
        int i0, $i1, $i2;
        java.util.regex.Pattern r5;
        java.lang.IllegalArgumentException $r6;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        sun.nio.fs.UnixFileSystem$3 $r13;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        r1 := @parameter0: java.lang.String;
        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58);
        if i0 <= 0 goto label0;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if i0 != $i1 goto label1;

     label0:
        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r6;

     label1:
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        $i2 = i0 + 1;
        r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i2);
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("glob");
        if $z0 == 0 goto label2;

        r4 = staticinvoke <sun.nio.fs.Globs: java.lang.String toUnixRegexPattern(java.lang.String)>(r3);
        goto label4;

     label2:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("regex");
        if $z1 == 0 goto label3;

        r4 = r3;
        goto label4;

     label3:
        $r7 = new java.lang.UnsupportedOperationException;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Syntax \'");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not recognized");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r12);
        throw $r7;

     label4:
        r5 = virtualinvoke r0.<sun.nio.fs.UnixFileSystem: java.util.regex.Pattern compilePathMatchPattern(java.lang.String)>(r4);
        $r13 = new sun.nio.fs.UnixFileSystem$3;
        specialinvoke $r13.<sun.nio.fs.UnixFileSystem$3: void <init>(sun.nio.fs.UnixFileSystem,java.util.regex.Pattern)>(r0, r5);
        return $r13;
    }

    public final java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService()
    {
        sun.nio.fs.UnixFileSystem r0;
        java.nio.file.attribute.UserPrincipalLookupService $r1;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        $r1 = <sun.nio.fs.UnixFileSystem$LookupService: java.nio.file.attribute.UserPrincipalLookupService instance>;
        return $r1;
    }

    java.util.regex.Pattern compilePathMatchPattern(java.lang.String)
    {
        sun.nio.fs.UnixFileSystem r0;
        java.lang.String r1;
        java.util.regex.Pattern $r2;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r1);
        return $r2;
    }

    char[] normalizeNativePath(char[])
    {
        sun.nio.fs.UnixFileSystem r0;
        char[] r1;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        r1 := @parameter0: char[];
        return r1;
    }

    java.lang.String normalizeJavaPath(java.lang.String)
    {
        sun.nio.fs.UnixFileSystem r0;
        java.lang.String r1;

        r0 := @this: sun.nio.fs.UnixFileSystem;
        r1 := @parameter0: java.lang.String;
        return r1;
    }

    static sun.nio.fs.UnixPath access$000(sun.nio.fs.UnixFileSystem)
    {
        sun.nio.fs.UnixFileSystem r0;
        sun.nio.fs.UnixPath $r1;

        r0 := @parameter0: sun.nio.fs.UnixFileSystem;
        $r1 = r0.<sun.nio.fs.UnixFileSystem: sun.nio.fs.UnixPath rootDirectory>;
        return $r1;
    }
}
