public abstract class java.text.DateFormat extends java.text.Format
{
    protected java.util.Calendar calendar;
    protected java.text.NumberFormat numberFormat;
    public static final int ERA_FIELD;
    public static final int YEAR_FIELD;
    public static final int MONTH_FIELD;
    public static final int DATE_FIELD;
    public static final int HOUR_OF_DAY1_FIELD;
    public static final int HOUR_OF_DAY0_FIELD;
    public static final int MINUTE_FIELD;
    public static final int SECOND_FIELD;
    public static final int MILLISECOND_FIELD;
    public static final int DAY_OF_WEEK_FIELD;
    public static final int DAY_OF_YEAR_FIELD;
    public static final int DAY_OF_WEEK_IN_MONTH_FIELD;
    public static final int WEEK_OF_YEAR_FIELD;
    public static final int WEEK_OF_MONTH_FIELD;
    public static final int AM_PM_FIELD;
    public static final int HOUR1_FIELD;
    public static final int HOUR0_FIELD;
    public static final int TIMEZONE_FIELD;
    private static final long serialVersionUID;
    public static final int FULL;
    public static final int LONG;
    public static final int MEDIUM;
    public static final int SHORT;
    public static final int DEFAULT;

    public final java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)
    {
        java.text.DateFormat r0;
        java.lang.Object r1;
        java.lang.StringBuffer r2, $r5, $r8;
        java.text.FieldPosition r3;
        boolean $z0, $z1;
        java.util.Date $r4, $r6;
        java.lang.Number $r7;
        long $l0;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: java.text.DateFormat;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.StringBuffer;
        r3 := @parameter2: java.text.FieldPosition;
        $z0 = r1 instanceof java.util.Date;
        if $z0 == 0 goto label0;

        $r4 = (java.util.Date) r1;
        $r5 = virtualinvoke r0.<java.text.DateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>($r4, r2, r3);
        return $r5;

     label0:
        $z1 = r1 instanceof java.lang.Number;
        if $z1 == 0 goto label1;

        $r6 = new java.util.Date;
        $r7 = (java.lang.Number) r1;
        $l0 = virtualinvoke $r7.<java.lang.Number: long longValue()>();
        specialinvoke $r6.<java.util.Date: void <init>(long)>($l0);
        $r8 = virtualinvoke r0.<java.text.DateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>($r6, r2, r3);
        return $r8;

     label1:
        $r9 = new java.lang.IllegalArgumentException;
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot format given Object as a Date");
        throw $r9;
    }

    public abstract java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition);

    public final java.lang.String format(java.util.Date)
    {
        java.text.DateFormat r0;
        java.util.Date r1;
        java.lang.StringBuffer $r2, $r4;
        java.text.FieldPosition $r3;
        java.lang.String $r5;

        r0 := @this: java.text.DateFormat;
        r1 := @parameter0: java.util.Date;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r3 = <java.text.DontCareFieldPosition: java.text.FieldPosition INSTANCE>;
        $r4 = virtualinvoke r0.<java.text.DateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>(r1, $r2, $r3);
        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r5;
    }

    public java.util.Date parse(java.lang.String) throws java.text.ParseException
    {
        java.text.DateFormat r0;
        java.lang.String r1, $r10;
        java.text.ParsePosition $r2, r3;
        java.util.Date r4;
        int $i0, $i1;
        java.text.ParseException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @this: java.text.DateFormat;
        r1 := @parameter0: java.lang.String;
        $r2 = new java.text.ParsePosition;
        specialinvoke $r2.<java.text.ParsePosition: void <init>(int)>(0);
        r3 = $r2;
        r4 = virtualinvoke r0.<java.text.DateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>(r1, r3);
        $i0 = r3.<java.text.ParsePosition: int index>;
        if $i0 != 0 goto label0;

        $r5 = new java.text.ParseException;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unparseable date: \"");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        $i1 = r3.<java.text.ParsePosition: int errorIndex>;
        specialinvoke $r5.<java.text.ParseException: void <init>(java.lang.String,int)>($r10, $i1);
        throw $r5;

     label0:
        return r4;
    }

    public abstract java.util.Date parse(java.lang.String, java.text.ParsePosition);

    public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition)
    {
        java.text.DateFormat r0;
        java.lang.String r1;
        java.text.ParsePosition r2;
        java.util.Date $r3;

        r0 := @this: java.text.DateFormat;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.text.ParsePosition;
        $r3 = virtualinvoke r0.<java.text.DateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>(r1, r2);
        return $r3;
    }

    public static final java.text.DateFormat getTimeInstance()
    {
        java.util.Locale$Category $r0;
        java.util.Locale $r1;
        java.text.DateFormat $r2;

        $r0 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r0);
        $r2 = staticinvoke <java.text.DateFormat: java.text.DateFormat get(int,int,int,java.util.Locale)>(2, 0, 1, $r1);
        return $r2;
    }

    public static final java.text.DateFormat getTimeInstance(int)
    {
        int i0;
        java.util.Locale$Category $r0;
        java.util.Locale $r1;
        java.text.DateFormat $r2;

        i0 := @parameter0: int;
        $r0 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r0);
        $r2 = staticinvoke <java.text.DateFormat: java.text.DateFormat get(int,int,int,java.util.Locale)>(i0, 0, 1, $r1);
        return $r2;
    }

    public static final java.text.DateFormat getTimeInstance(int, java.util.Locale)
    {
        int i0;
        java.util.Locale r0;
        java.text.DateFormat $r1;

        i0 := @parameter0: int;
        r0 := @parameter1: java.util.Locale;
        $r1 = staticinvoke <java.text.DateFormat: java.text.DateFormat get(int,int,int,java.util.Locale)>(i0, 0, 1, r0);
        return $r1;
    }

    public static final java.text.DateFormat getDateInstance()
    {
        java.util.Locale$Category $r0;
        java.util.Locale $r1;
        java.text.DateFormat $r2;

        $r0 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r0);
        $r2 = staticinvoke <java.text.DateFormat: java.text.DateFormat get(int,int,int,java.util.Locale)>(0, 2, 2, $r1);
        return $r2;
    }

    public static final java.text.DateFormat getDateInstance(int)
    {
        int i0;
        java.util.Locale$Category $r0;
        java.util.Locale $r1;
        java.text.DateFormat $r2;

        i0 := @parameter0: int;
        $r0 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r0);
        $r2 = staticinvoke <java.text.DateFormat: java.text.DateFormat get(int,int,int,java.util.Locale)>(0, i0, 2, $r1);
        return $r2;
    }

    public static final java.text.DateFormat getDateInstance(int, java.util.Locale)
    {
        int i0;
        java.util.Locale r0;
        java.text.DateFormat $r1;

        i0 := @parameter0: int;
        r0 := @parameter1: java.util.Locale;
        $r1 = staticinvoke <java.text.DateFormat: java.text.DateFormat get(int,int,int,java.util.Locale)>(0, i0, 2, r0);
        return $r1;
    }

    public static final java.text.DateFormat getDateTimeInstance()
    {
        java.util.Locale$Category $r0;
        java.util.Locale $r1;
        java.text.DateFormat $r2;

        $r0 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r0);
        $r2 = staticinvoke <java.text.DateFormat: java.text.DateFormat get(int,int,int,java.util.Locale)>(2, 2, 3, $r1);
        return $r2;
    }

    public static final java.text.DateFormat getDateTimeInstance(int, int)
    {
        int i0, i1;
        java.util.Locale$Category $r0;
        java.util.Locale $r1;
        java.text.DateFormat $r2;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r0 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r0);
        $r2 = staticinvoke <java.text.DateFormat: java.text.DateFormat get(int,int,int,java.util.Locale)>(i1, i0, 3, $r1);
        return $r2;
    }

    public static final java.text.DateFormat getDateTimeInstance(int, int, java.util.Locale)
    {
        int i0, i1;
        java.util.Locale r0;
        java.text.DateFormat $r1;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r0 := @parameter2: java.util.Locale;
        $r1 = staticinvoke <java.text.DateFormat: java.text.DateFormat get(int,int,int,java.util.Locale)>(i1, i0, 3, r0);
        return $r1;
    }

    public static final java.text.DateFormat getInstance()
    {
        java.text.DateFormat $r0;

        $r0 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int)>(3, 3);
        return $r0;
    }

    public static java.util.Locale[] getAvailableLocales()
    {
        sun.util.LocaleServiceProviderPool r0;
        java.util.Locale[] $r1;

        r0 = staticinvoke <sun.util.LocaleServiceProviderPool: sun.util.LocaleServiceProviderPool getPool(java.lang.Class)>(class "java/text/spi/DateFormatProvider");
        $r1 = virtualinvoke r0.<sun.util.LocaleServiceProviderPool: java.util.Locale[] getAvailableLocales()>();
        return $r1;
    }

    public void setCalendar(java.util.Calendar)
    {
        java.text.DateFormat r0;
        java.util.Calendar r1;

        r0 := @this: java.text.DateFormat;
        r1 := @parameter0: java.util.Calendar;
        r0.<java.text.DateFormat: java.util.Calendar calendar> = r1;
        return;
    }

    public java.util.Calendar getCalendar()
    {
        java.text.DateFormat r0;
        java.util.Calendar $r1;

        r0 := @this: java.text.DateFormat;
        $r1 = r0.<java.text.DateFormat: java.util.Calendar calendar>;
        return $r1;
    }

    public void setNumberFormat(java.text.NumberFormat)
    {
        java.text.DateFormat r0;
        java.text.NumberFormat r1;

        r0 := @this: java.text.DateFormat;
        r1 := @parameter0: java.text.NumberFormat;
        r0.<java.text.DateFormat: java.text.NumberFormat numberFormat> = r1;
        return;
    }

    public java.text.NumberFormat getNumberFormat()
    {
        java.text.DateFormat r0;
        java.text.NumberFormat $r1;

        r0 := @this: java.text.DateFormat;
        $r1 = r0.<java.text.DateFormat: java.text.NumberFormat numberFormat>;
        return $r1;
    }

    public void setTimeZone(java.util.TimeZone)
    {
        java.text.DateFormat r0;
        java.util.TimeZone r1;
        java.util.Calendar $r2;

        r0 := @this: java.text.DateFormat;
        r1 := @parameter0: java.util.TimeZone;
        $r2 = r0.<java.text.DateFormat: java.util.Calendar calendar>;
        virtualinvoke $r2.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>(r1);
        return;
    }

    public java.util.TimeZone getTimeZone()
    {
        java.text.DateFormat r0;
        java.util.Calendar $r1;
        java.util.TimeZone $r2;

        r0 := @this: java.text.DateFormat;
        $r1 = r0.<java.text.DateFormat: java.util.Calendar calendar>;
        $r2 = virtualinvoke $r1.<java.util.Calendar: java.util.TimeZone getTimeZone()>();
        return $r2;
    }

    public void setLenient(boolean)
    {
        java.text.DateFormat r0;
        boolean z0;
        java.util.Calendar $r1;

        r0 := @this: java.text.DateFormat;
        z0 := @parameter0: boolean;
        $r1 = r0.<java.text.DateFormat: java.util.Calendar calendar>;
        virtualinvoke $r1.<java.util.Calendar: void setLenient(boolean)>(z0);
        return;
    }

    public boolean isLenient()
    {
        java.text.DateFormat r0;
        java.util.Calendar $r1;
        boolean $z0;

        r0 := @this: java.text.DateFormat;
        $r1 = r0.<java.text.DateFormat: java.util.Calendar calendar>;
        $z0 = virtualinvoke $r1.<java.util.Calendar: boolean isLenient()>();
        return $z0;
    }

    public int hashCode()
    {
        java.text.DateFormat r0;
        java.text.NumberFormat $r1;
        int $i0;

        r0 := @this: java.text.DateFormat;
        $r1 = r0.<java.text.DateFormat: java.text.NumberFormat numberFormat>;
        $i0 = virtualinvoke $r1.<java.text.NumberFormat: int hashCode()>();
        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.text.DateFormat r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        java.util.Calendar $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.TimeZone $r12, $r14;
        java.text.NumberFormat $r15, $r16;

        r0 := @this: java.text.DateFormat;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        if r1 == null goto label1;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        if $r3 == $r4 goto label2;

     label1:
        return 0;

     label2:
        r2 = (java.text.DateFormat) r1;
        $r5 = r0.<java.text.DateFormat: java.util.Calendar calendar>;
        $i0 = virtualinvoke $r5.<java.util.Calendar: int getFirstDayOfWeek()>();
        $r6 = r2.<java.text.DateFormat: java.util.Calendar calendar>;
        $i1 = virtualinvoke $r6.<java.util.Calendar: int getFirstDayOfWeek()>();
        if $i0 != $i1 goto label3;

        $r7 = r0.<java.text.DateFormat: java.util.Calendar calendar>;
        $i2 = virtualinvoke $r7.<java.util.Calendar: int getMinimalDaysInFirstWeek()>();
        $r8 = r2.<java.text.DateFormat: java.util.Calendar calendar>;
        $i3 = virtualinvoke $r8.<java.util.Calendar: int getMinimalDaysInFirstWeek()>();
        if $i2 != $i3 goto label3;

        $r9 = r0.<java.text.DateFormat: java.util.Calendar calendar>;
        $z0 = virtualinvoke $r9.<java.util.Calendar: boolean isLenient()>();
        $r10 = r2.<java.text.DateFormat: java.util.Calendar calendar>;
        $z1 = virtualinvoke $r10.<java.util.Calendar: boolean isLenient()>();
        if $z0 != $z1 goto label3;

        $r11 = r0.<java.text.DateFormat: java.util.Calendar calendar>;
        $r12 = virtualinvoke $r11.<java.util.Calendar: java.util.TimeZone getTimeZone()>();
        $r13 = r2.<java.text.DateFormat: java.util.Calendar calendar>;
        $r14 = virtualinvoke $r13.<java.util.Calendar: java.util.TimeZone getTimeZone()>();
        $z2 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>($r14);
        if $z2 == 0 goto label3;

        $r15 = r0.<java.text.DateFormat: java.text.NumberFormat numberFormat>;
        $r16 = r2.<java.text.DateFormat: java.text.NumberFormat numberFormat>;
        $z3 = virtualinvoke $r15.<java.text.NumberFormat: boolean equals(java.lang.Object)>($r16);
        if $z3 == 0 goto label3;

        $z4 = 1;
        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    public java.lang.Object clone()
    {
        java.text.DateFormat r0, r1;
        java.lang.Object $r2, $r4, $r7;
        java.util.Calendar $r3, $r5;
        java.text.NumberFormat $r6, $r8;

        r0 := @this: java.text.DateFormat;
        $r2 = specialinvoke r0.<java.text.Format: java.lang.Object clone()>();
        r1 = (java.text.DateFormat) $r2;
        $r3 = r0.<java.text.DateFormat: java.util.Calendar calendar>;
        $r4 = virtualinvoke $r3.<java.util.Calendar: java.lang.Object clone()>();
        $r5 = (java.util.Calendar) $r4;
        r1.<java.text.DateFormat: java.util.Calendar calendar> = $r5;
        $r6 = r0.<java.text.DateFormat: java.text.NumberFormat numberFormat>;
        $r7 = virtualinvoke $r6.<java.text.NumberFormat: java.lang.Object clone()>();
        $r8 = (java.text.NumberFormat) $r7;
        r1.<java.text.DateFormat: java.text.NumberFormat numberFormat> = $r8;
        return r1;
    }

    private static java.text.DateFormat get(int, int, int, java.util.Locale)
    {
        int i0, i1, i2, $i3, $i4;
        java.util.Locale r0;
        java.lang.StringBuilder $r1, $r5, $r6, $r9, $r10, $r11;
        sun.util.LocaleServiceProviderPool r2;
        java.text.DateFormat r3;
        java.lang.IllegalArgumentException $r4, $r8;
        java.lang.String $r7, $r12;
        boolean $z0;
        java.text.DateFormat$DateFormatGetter $r13;
        java.lang.Object[] $r14;
        java.lang.Integer $r15, $r16, $r17;
        java.lang.Object $r18;
        java.text.SimpleDateFormat $r20, $r23;
        java.util.MissingResourceException $r21, r22;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        r0 := @parameter3: java.util.Locale;
        $i3 = i2 & 1;
        if $i3 == 0 goto label1;

        if i0 < 0 goto label0;

        if i0 <= 3 goto label2;

     label0:
        $r4 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal time style ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r4;

     label1:
        i0 = -1;

     label2:
        $i4 = i2 & 2;
        if $i4 == 0 goto label4;

        if i1 < 0 goto label3;

        if i1 <= 3 goto label5;

     label3:
        $r8 = new java.lang.IllegalArgumentException;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal date style ");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);
        throw $r8;

     label4:
        i1 = -1;

     label5:
        r2 = staticinvoke <sun.util.LocaleServiceProviderPool: sun.util.LocaleServiceProviderPool getPool(java.lang.Class)>(class "java/text/spi/DateFormatProvider");
        $z0 = virtualinvoke r2.<sun.util.LocaleServiceProviderPool: boolean hasProviders()>();
        if $z0 == 0 goto label7;

        $r13 = staticinvoke <java.text.DateFormat$DateFormatGetter: java.text.DateFormat$DateFormatGetter access$000()>();
        $r14 = newarray (java.lang.Object)[3];
        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        $r14[0] = $r15;
        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);
        $r14[1] = $r16;
        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);
        $r14[2] = $r17;
        $r18 = virtualinvoke r2.<sun.util.LocaleServiceProviderPool: java.lang.Object getLocalizedObject(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,java.lang.Object[])>($r13, r0, $r14);
        r3 = (java.text.DateFormat) $r18;
        if r3 == null goto label7;

     label6:
        return r3;

     label7:
        $r20 = new java.text.SimpleDateFormat;
        specialinvoke $r20.<java.text.SimpleDateFormat: void <init>(int,int,java.util.Locale)>(i0, i1, r0);

     label8:
        return $r20;

     label9:
        $r21 := @caughtexception;
        r22 = $r21;
        $r23 = new java.text.SimpleDateFormat;
        specialinvoke $r23.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("M/d/yy h:mm a");
        return $r23;

        catch java.util.MissingResourceException from label5 to label6 with label9;
        catch java.util.MissingResourceException from label7 to label8 with label9;
    }

    protected void <init>()
    {
        java.text.DateFormat r0;

        r0 := @this: java.text.DateFormat;
        specialinvoke r0.<java.text.Format: void <init>()>();
        return;
    }
}
