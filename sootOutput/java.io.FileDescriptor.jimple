public final class java.io.FileDescriptor extends java.lang.Object
{
    private int fd;
    private java.util.concurrent.atomic.AtomicInteger useCount;
    public static final java.io.FileDescriptor in;
    public static final java.io.FileDescriptor out;
    public static final java.io.FileDescriptor err;

    public void <init>()
    {
        java.io.FileDescriptor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: java.io.FileDescriptor;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.io.FileDescriptor: int fd> = -1;
        $r1 = new java.util.concurrent.atomic.AtomicInteger;
        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
        r0.<java.io.FileDescriptor: java.util.concurrent.atomic.AtomicInteger useCount> = $r1;
        return;
    }

    private void <init>(int)
    {
        java.io.FileDescriptor r0;
        int i0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: java.io.FileDescriptor;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.io.FileDescriptor: int fd> = i0;
        $r1 = new java.util.concurrent.atomic.AtomicInteger;
        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
        r0.<java.io.FileDescriptor: java.util.concurrent.atomic.AtomicInteger useCount> = $r1;
        return;
    }

    public boolean valid()
    {
        java.io.FileDescriptor r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.io.FileDescriptor;
        $i0 = r0.<java.io.FileDescriptor: int fd>;
        if $i0 == -1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public native void sync() throws java.io.SyncFailedException;

    private static native void initIDs();

    int incrementAndGetUseCount()
    {
        java.io.FileDescriptor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: java.io.FileDescriptor;
        $r1 = r0.<java.io.FileDescriptor: java.util.concurrent.atomic.AtomicInteger useCount>;
        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
        return $i0;
    }

    int decrementAndGetUseCount()
    {
        java.io.FileDescriptor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: java.io.FileDescriptor;
        $r1 = r0.<java.io.FileDescriptor: java.util.concurrent.atomic.AtomicInteger useCount>;
        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
        return $i0;
    }

    static int access$002(java.io.FileDescriptor, int)
    {
        java.io.FileDescriptor r0;
        int i0;

        r0 := @parameter0: java.io.FileDescriptor;
        i0 := @parameter1: int;
        r0.<java.io.FileDescriptor: int fd> = i0;
        return i0;
    }

    static int access$000(java.io.FileDescriptor)
    {
        java.io.FileDescriptor r0;
        int $i0;

        r0 := @parameter0: java.io.FileDescriptor;
        $i0 = r0.<java.io.FileDescriptor: int fd>;
        return $i0;
    }

    static void <clinit>()
    {
        java.io.FileDescriptor $r0, $r1, $r2;
        java.io.FileDescriptor$1 $r3;

        $r0 = new java.io.FileDescriptor;
        specialinvoke $r0.<java.io.FileDescriptor: void <init>(int)>(0);
        <java.io.FileDescriptor: java.io.FileDescriptor in> = $r0;
        $r1 = new java.io.FileDescriptor;
        specialinvoke $r1.<java.io.FileDescriptor: void <init>(int)>(1);
        <java.io.FileDescriptor: java.io.FileDescriptor out> = $r1;
        $r2 = new java.io.FileDescriptor;
        specialinvoke $r2.<java.io.FileDescriptor: void <init>(int)>(2);
        <java.io.FileDescriptor: java.io.FileDescriptor err> = $r2;
        staticinvoke <java.io.FileDescriptor: void initIDs()>();
        $r3 = new java.io.FileDescriptor$1;
        specialinvoke $r3.<java.io.FileDescriptor$1: void <init>()>();
        staticinvoke <sun.misc.SharedSecrets: void setJavaIOFileDescriptorAccess(sun.misc.JavaIOFileDescriptorAccess)>($r3);
        return;
    }
}
