public class java.lang.reflect.Proxy extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private static final java.lang.Class[] constructorParams;
    private static final java.lang.reflect.WeakCache proxyClassCache;
    protected java.lang.reflect.InvocationHandler h;
    private static final java.lang.Object key0;

    private void <init>()
    {
        java.lang.reflect.Proxy r0;

        r0 := @this: java.lang.reflect.Proxy;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    protected void <init>(java.lang.reflect.InvocationHandler)
    {
        java.lang.reflect.Proxy r0;
        java.lang.reflect.InvocationHandler r1;

        r0 := @this: java.lang.reflect.Proxy;
        r1 := @parameter0: java.lang.reflect.InvocationHandler;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        specialinvoke r0.<java.lang.reflect.Proxy: void doNewInstanceCheck()>();
        r0.<java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler h> = r1;
        return;
    }

    private void doNewInstanceCheck()
    {
        java.lang.reflect.Proxy r0;
        java.lang.SecurityManager r1;
        java.lang.Class r2;
        java.security.Permission $r3;
        java.lang.SecurityException r4, $r5, $r6;
        boolean $z0;

        r0 := @this: java.lang.reflect.Proxy;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        if r1 == null goto label3;

        $z0 = staticinvoke <java.lang.reflect.Proxy$ProxyAccessHelper: boolean needsNewInstanceCheck(java.lang.Class)>(r2);
        if $z0 == 0 goto label3;

     label0:
        $r3 = <java.lang.reflect.Proxy$ProxyAccessHelper: java.security.Permission PROXY_PERMISSION>;
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r3);

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r4 = $r5;
        $r6 = new java.lang.SecurityException;
        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>("Not allowed to construct a Proxy instance that implements a non-public interface", r4);
        throw $r6;

     label3:
        return;

        catch java.lang.SecurityException from label0 to label1 with label2;
    }

    public static transient java.lang.Class getProxyClass(java.lang.ClassLoader, java.lang.Class[]) throws java.lang.IllegalArgumentException
    {
        java.lang.ClassLoader r0;
        java.lang.Class[] r1, r2;
        java.lang.SecurityManager r3;
        java.lang.Object $r4;
        java.lang.Class $r5, $r6;

        r0 := @parameter0: java.lang.ClassLoader;
        r1 := @parameter1: java.lang.Class[];
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();
        r2 = (java.lang.Class[]) $r4;
        r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r3 == null goto label0;

        $r5 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        staticinvoke <java.lang.reflect.Proxy: void checkProxyAccess(java.lang.Class,java.lang.ClassLoader,java.lang.Class[])>($r5, r0, r2);

     label0:
        $r6 = staticinvoke <java.lang.reflect.Proxy: java.lang.Class getProxyClass0(java.lang.ClassLoader,java.lang.Class[])>(r0, r2);
        return $r6;
    }

    private static transient void checkProxyAccess(java.lang.Class, java.lang.ClassLoader, java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.ClassLoader r1, r4;
        java.lang.Class[] r2;
        java.lang.SecurityManager r3;
        java.lang.RuntimePermission $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.ClassLoader;
        r2 := @parameter2: java.lang.Class[];
        r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r3 == null goto label1;

        r4 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        if r1 != null goto label0;

        if r4 == null goto label0;

        $z0 = <java.lang.reflect.Proxy$ProxyAccessHelper: boolean allowNullLoader>;
        if $z0 != 0 goto label0;

        $r5 = <sun.security.util.SecurityConstants: java.lang.RuntimePermission GET_CLASSLOADER_PERMISSION>;
        virtualinvoke r3.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r5);

     label0:
        staticinvoke <sun.reflect.misc.ReflectUtil: void checkProxyPackageAccess(java.lang.ClassLoader,java.lang.Class[])>(r4, r2);

     label1:
        return;
    }

    private static transient java.lang.Class getProxyClass0(java.lang.ClassLoader, java.lang.Class[])
    {
        java.lang.ClassLoader r0;
        java.lang.Class[] r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.reflect.WeakCache $r3;
        java.lang.Object $r4;
        java.lang.Class $r5;

        r0 := @parameter0: java.lang.ClassLoader;
        r1 := @parameter1: java.lang.Class[];
        $i0 = lengthof r1;
        if $i0 <= 65535 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("interface limit exceeded");
        throw $r2;

     label0:
        $r3 = <java.lang.reflect.Proxy: java.lang.reflect.WeakCache proxyClassCache>;
        $r4 = virtualinvoke $r3.<java.lang.reflect.WeakCache: java.lang.Object get(java.lang.Object,java.lang.Object)>(r0, r1);
        $r5 = (java.lang.Class) $r4;
        return $r5;
    }

    public static java.lang.Object newProxyInstance(java.lang.ClassLoader, java.lang.Class[], java.lang.reflect.InvocationHandler) throws java.lang.IllegalArgumentException
    {
        java.lang.ClassLoader r0;
        java.lang.Class[] r1, r3, $r11;
        java.lang.reflect.InvocationHandler r2, r7;
        java.lang.SecurityManager r4;
        java.lang.Class r5, $r10;
        java.lang.reflect.Constructor r6;
        java.lang.NullPointerException $r8;
        java.lang.Object $r9, $r13, $r14;
        boolean $z0;
        java.lang.reflect.Proxy$1 $r12;
        java.lang.NoSuchMethodException $r15, r16;
        java.lang.InternalError $r17;
        java.lang.String $r18;

        r0 := @parameter0: java.lang.ClassLoader;
        r1 := @parameter1: java.lang.Class[];
        r2 := @parameter2: java.lang.reflect.InvocationHandler;
        if r2 != null goto label0;

        $r8 = new java.lang.NullPointerException;
        specialinvoke $r8.<java.lang.NullPointerException: void <init>()>();
        throw $r8;

     label0:
        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();
        r3 = (java.lang.Class[]) $r9;
        r4 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r4 == null goto label1;

        $r10 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        staticinvoke <java.lang.reflect.Proxy: void checkProxyAccess(java.lang.Class,java.lang.ClassLoader,java.lang.Class[])>($r10, r0, r3);

     label1:
        r5 = staticinvoke <java.lang.reflect.Proxy: java.lang.Class getProxyClass0(java.lang.ClassLoader,java.lang.Class[])>(r0, r3);

     label2:
        $r11 = <java.lang.reflect.Proxy: java.lang.Class[] constructorParams>;
        r6 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r11);
        r7 = r2;
        if r4 == null goto label4;

        $z0 = staticinvoke <java.lang.reflect.Proxy$ProxyAccessHelper: boolean needsNewInstanceCheck(java.lang.Class)>(r5);
        if $z0 == 0 goto label4;

        $r12 = new java.lang.reflect.Proxy$1;
        specialinvoke $r12.<java.lang.reflect.Proxy$1: void <init>(java.lang.reflect.Constructor,java.lang.reflect.InvocationHandler)>(r6, r7);
        $r13 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r12);

     label3:
        return $r13;

     label4:
        $r14 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newInstance(java.lang.reflect.Constructor,java.lang.reflect.InvocationHandler)>(r6, r7);

     label5:
        return $r14;

     label6:
        $r15 := @caughtexception;
        r16 = $r15;
        $r17 = new java.lang.InternalError;
        $r18 = virtualinvoke r16.<java.lang.NoSuchMethodException: java.lang.String toString()>();
        specialinvoke $r17.<java.lang.InternalError: void <init>(java.lang.String)>($r18);
        throw $r17;

        catch java.lang.NoSuchMethodException from label2 to label3 with label6;
        catch java.lang.NoSuchMethodException from label4 to label5 with label6;
    }

    private static java.lang.Object newInstance(java.lang.reflect.Constructor, java.lang.reflect.InvocationHandler)
    {
        java.lang.reflect.Constructor r0;
        java.lang.reflect.InvocationHandler r1;
        java.lang.ReflectiveOperationException r2, $r6;
        java.lang.Throwable r3;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        java.lang.InternalError $r7, $r12;
        java.lang.String $r8, $r13;
        java.lang.reflect.InvocationTargetException $r9, r10;
        boolean $z0;
        java.lang.RuntimeException $r11;

        r0 := @parameter0: java.lang.reflect.Constructor;
        r1 := @parameter1: java.lang.reflect.InvocationHandler;

     label0:
        $r4 = newarray (java.lang.Object)[1];
        $r4[0] = r1;
        $r5 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r4);

     label1:
        return $r5;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        $r7 = new java.lang.InternalError;
        $r8 = virtualinvoke r2.<java.lang.ReflectiveOperationException: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.InternalError: void <init>(java.lang.String)>($r8);
        throw $r7;

     label3:
        $r9 := @caughtexception;
        r10 = $r9;
        r3 = virtualinvoke r10.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
        $z0 = r3 instanceof java.lang.RuntimeException;
        if $z0 == 0 goto label4;

        $r11 = (java.lang.RuntimeException) r3;
        throw $r11;

     label4:
        $r12 = new java.lang.InternalError;
        $r13 = virtualinvoke r3.<java.lang.Throwable: java.lang.String toString()>();
        specialinvoke $r12.<java.lang.InternalError: void <init>(java.lang.String)>($r13);
        throw $r12;

        catch java.lang.IllegalAccessException from label0 to label1 with label2;
        catch java.lang.InstantiationException from label0 to label1 with label2;
        catch java.lang.reflect.InvocationTargetException from label0 to label1 with label3;
    }

    public static boolean isProxyClass(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0, $z1, $z2;
        java.lang.reflect.WeakCache $r2;

        r0 := @parameter0: java.lang.Class;
        $r1 = class "java/lang/reflect/Proxy";
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);
        if $z0 == 0 goto label0;

        $r2 = <java.lang.reflect.Proxy: java.lang.reflect.WeakCache proxyClassCache>;
        $z1 = virtualinvoke $r2.<java.lang.reflect.WeakCache: boolean containsValue(java.lang.Object)>(r0);
        if $z1 == 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;
    }

    public static java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object) throws java.lang.IllegalArgumentException
    {
        java.lang.Object r0;
        java.lang.reflect.Proxy r1;
        java.lang.reflect.InvocationHandler r2;
        java.lang.Class r3, r4, $r5;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r6;
        java.lang.SecurityManager $r7;
        java.lang.ClassLoader $r8, $r9;

        r0 := @parameter0: java.lang.Object;
        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $z0 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>($r5);
        if $z0 != 0 goto label0;

        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not a proxy instance");
        throw $r6;

     label0:
        r1 = (java.lang.reflect.Proxy) r0;
        r2 = r1.<java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler h>;
        $r7 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if $r7 == null goto label1;

        r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();
        r4 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r8 = virtualinvoke r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        $r9 = virtualinvoke r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        $z1 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>($r8, $r9);
        if $z1 == 0 goto label1;

        staticinvoke <sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.Class)>(r3);

     label1:
        return r2;
    }

    private static native java.lang.Class defineClass0(java.lang.ClassLoader, java.lang.String, byte[], int, int);

    static java.lang.Object access$200()
    {
        java.lang.Object $r0;

        $r0 = <java.lang.reflect.Proxy: java.lang.Object key0>;
        return $r0;
    }

    static java.lang.Class access$300(java.lang.ClassLoader, java.lang.String, byte[], int, int)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        byte[] r2;
        int i0, i1;
        java.lang.Class $r3;

        r0 := @parameter0: java.lang.ClassLoader;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: byte[];
        i0 := @parameter3: int;
        i1 := @parameter4: int;
        $r3 = staticinvoke <java.lang.reflect.Proxy: java.lang.Class defineClass0(java.lang.ClassLoader,java.lang.String,byte[],int,int)>(r0, r1, r2, i0, i1);
        return $r3;
    }

    static java.lang.Object access$400(java.lang.reflect.Constructor, java.lang.reflect.InvocationHandler)
    {
        java.lang.reflect.Constructor r0;
        java.lang.reflect.InvocationHandler r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.reflect.Constructor;
        r1 := @parameter1: java.lang.reflect.InvocationHandler;
        $r2 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newInstance(java.lang.reflect.Constructor,java.lang.reflect.InvocationHandler)>(r0, r1);
        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r0;
        java.lang.reflect.WeakCache $r1;
        java.lang.reflect.Proxy$KeyFactory $r2;
        java.lang.reflect.Proxy$ProxyClassFactory $r3;
        java.lang.Object $r4;

        $r0 = newarray (java.lang.Class)[1];
        $r0[0] = class "java/lang/reflect/InvocationHandler";
        <java.lang.reflect.Proxy: java.lang.Class[] constructorParams> = $r0;
        $r1 = new java.lang.reflect.WeakCache;
        $r2 = new java.lang.reflect.Proxy$KeyFactory;
        specialinvoke $r2.<java.lang.reflect.Proxy$KeyFactory: void <init>(java.lang.reflect.Proxy$1)>(null);
        $r3 = new java.lang.reflect.Proxy$ProxyClassFactory;
        specialinvoke $r3.<java.lang.reflect.Proxy$ProxyClassFactory: void <init>(java.lang.reflect.Proxy$1)>(null);
        specialinvoke $r1.<java.lang.reflect.WeakCache: void <init>(java.lang.reflect.WeakCache$BiFunction,java.lang.reflect.WeakCache$BiFunction)>($r2, $r3);
        <java.lang.reflect.Proxy: java.lang.reflect.WeakCache proxyClassCache> = $r1;
        $r4 = new java.lang.Object;
        specialinvoke $r4.<java.lang.Object: void <init>()>();
        <java.lang.reflect.Proxy: java.lang.Object key0> = $r4;
        return;
    }
}
