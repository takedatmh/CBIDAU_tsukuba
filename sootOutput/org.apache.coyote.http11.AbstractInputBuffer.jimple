public abstract class org.apache.coyote.http11.AbstractInputBuffer extends java.lang.Object implements org.apache.coyote.InputBuffer
{
    protected static final org.apache.tomcat.util.res.StringManager sm;
    protected org.apache.coyote.Request request;
    protected org.apache.tomcat.util.http.MimeHeaders headers;
    protected boolean parsingHeader;
    protected boolean swallowInput;
    protected byte[] buf;
    protected int lastValid;
    protected int pos;
    protected int end;
    protected org.apache.coyote.InputBuffer inputStreamInputBuffer;
    protected org.apache.coyote.http11.InputFilter[] filterLibrary;
    protected org.apache.coyote.http11.InputFilter[] activeFilters;
    protected int lastActiveFilter;
    protected boolean rejectIllegalHeaderName;
    protected org.apache.tomcat.util.http.parser.HttpParser httpParser;

    static void <clinit>()
    {
        org.apache.tomcat.util.res.StringManager $r0;

        $r0 = staticinvoke <org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>("org.apache.coyote.http11");
        <org.apache.coyote.http11.AbstractInputBuffer: org.apache.tomcat.util.res.StringManager sm> = $r0;
        return;
    }

    public void <init>()
    {
        org.apache.coyote.http11.AbstractInputBuffer r0;

        r0 := @this: org.apache.coyote.http11.AbstractInputBuffer;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public void addFilter(org.apache.coyote.http11.InputFilter)
    {
        org.apache.coyote.http11.AbstractInputBuffer r0;
        org.apache.coyote.http11.InputFilter r1, $r5;
        org.apache.coyote.http11.InputFilter[] r2, $r3, $r4, $r6, $r7, $r8, $r9;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.coyote.http11.AbstractInputBuffer;
        r1 := @parameter0: org.apache.coyote.http11.InputFilter;
        $r3 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.http11.InputFilter[] filterLibrary>;
        $i1 = lengthof $r3;
        $i2 = $i1 + 1;
        r2 = newarray (org.apache.coyote.http11.InputFilter)[$i2];
        i0 = 0;
        goto label1;

     label0:
        $r4 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.http11.InputFilter[] filterLibrary>;
        $r5 = $r4[i0];
        r2[i0] = $r5;
        i0 = i0 + 1;

     label1:
        $r6 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.http11.InputFilter[] filterLibrary>;
        $i3 = lengthof $r6;
        if i0 < $i3 goto label0;

        $r7 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.http11.InputFilter[] filterLibrary>;
        $i4 = lengthof $r7;
        r2[$i4] = r1;
        r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.http11.InputFilter[] filterLibrary> = r2;
        $r8 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.http11.InputFilter[] filterLibrary>;
        $i5 = lengthof $r8;
        $r9 = newarray (org.apache.coyote.http11.InputFilter)[$i5];
        r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.http11.InputFilter[] activeFilters> = $r9;
        return;
    }

    public org.apache.coyote.http11.InputFilter[] getFilters()
    {
        org.apache.coyote.http11.AbstractInputBuffer r0;
        org.apache.coyote.http11.InputFilter[] $r1;

        r0 := @this: org.apache.coyote.http11.AbstractInputBuffer;
        $r1 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.http11.InputFilter[] filterLibrary>;
        return $r1;
    }

    public void addActiveFilter(org.apache.coyote.http11.InputFilter)
    {
        org.apache.coyote.http11.AbstractInputBuffer r0;
        org.apache.coyote.http11.InputFilter r1, $r4, $r6;
        int i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.coyote.InputBuffer $r2;
        org.apache.coyote.http11.InputFilter[] $r3, $r5, $r7;
        org.apache.coyote.Request $r9;

        r0 := @this: org.apache.coyote.http11.AbstractInputBuffer;
        r1 := @parameter0: org.apache.coyote.http11.InputFilter;
        $i1 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastActiveFilter>;
        if $i1 != -1 goto label0;

        $r2 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.InputBuffer inputStreamInputBuffer>;
        interfaceinvoke r1.<org.apache.coyote.http11.InputFilter: void setBuffer(org.apache.coyote.InputBuffer)>($r2);
        goto label4;

     label0:
        i0 = 0;
        goto label3;

     label1:
        $r3 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.http11.InputFilter[] activeFilters>;
        $r4 = $r3[i0];
        if $r4 != r1 goto label2;

        return;

     label2:
        i0 = i0 + 1;

     label3:
        $i2 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastActiveFilter>;
        if i0 <= $i2 goto label1;

        $r5 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.http11.InputFilter[] activeFilters>;
        $i3 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastActiveFilter>;
        $r6 = $r5[$i3];
        interfaceinvoke r1.<org.apache.coyote.http11.InputFilter: void setBuffer(org.apache.coyote.InputBuffer)>($r6);

     label4:
        $r7 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.http11.InputFilter[] activeFilters>;
        $i4 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastActiveFilter>;
        $i5 = $i4 + 1;
        r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastActiveFilter> = $i5;
        $r7[$i5] = r1;
        $r9 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.Request request>;
        interfaceinvoke r1.<org.apache.coyote.http11.InputFilter: void setRequest(org.apache.coyote.Request)>($r9);
        return;
    }

    public void setSwallowInput(boolean)
    {
        org.apache.coyote.http11.AbstractInputBuffer r0;
        boolean z0;

        r0 := @this: org.apache.coyote.http11.AbstractInputBuffer;
        z0 := @parameter0: boolean;
        r0.<org.apache.coyote.http11.AbstractInputBuffer: boolean swallowInput> = z0;
        return;
    }

    public abstract boolean parseRequestLine(boolean) throws java.io.IOException;

    public abstract boolean parseHeaders() throws java.io.IOException;

    protected abstract boolean fill(boolean) throws java.io.IOException;

    protected abstract void init(org.apache.tomcat.util.net.SocketWrapper, org.apache.tomcat.util.net.AbstractEndpoint) throws java.io.IOException;

    public void recycle()
    {
        org.apache.coyote.http11.AbstractInputBuffer r0;
        int i0, $i1;
        org.apache.coyote.Request $r1;
        org.apache.coyote.http11.InputFilter[] $r2;
        org.apache.coyote.http11.InputFilter $r3;

        r0 := @this: org.apache.coyote.http11.AbstractInputBuffer;
        $r1 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.Request request>;
        virtualinvoke $r1.<org.apache.coyote.Request: void recycle()>();
        i0 = 0;
        goto label1;

     label0:
        $r2 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.http11.InputFilter[] activeFilters>;
        $r3 = $r2[i0];
        interfaceinvoke $r3.<org.apache.coyote.http11.InputFilter: void recycle()>();
        i0 = i0 + 1;

     label1:
        $i1 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastActiveFilter>;
        if i0 <= $i1 goto label0;

        r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastValid> = 0;
        r0.<org.apache.coyote.http11.AbstractInputBuffer: int pos> = 0;
        r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastActiveFilter> = -1;
        r0.<org.apache.coyote.http11.AbstractInputBuffer: boolean parsingHeader> = 1;
        r0.<org.apache.coyote.http11.AbstractInputBuffer: boolean swallowInput> = 1;
        return;
    }

    public void nextRequest()
    {
        org.apache.coyote.http11.AbstractInputBuffer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.apache.coyote.Request $r1;
        byte[] $r2, $r3;
        org.apache.coyote.http11.InputFilter[] $r5;
        org.apache.coyote.http11.InputFilter $r6;

        r0 := @this: org.apache.coyote.http11.AbstractInputBuffer;
        $r1 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.Request request>;
        virtualinvoke $r1.<org.apache.coyote.Request: void recycle()>();
        $i1 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastValid>;
        $i2 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int pos>;
        $i3 = $i1 - $i2;
        if $i3 <= 0 goto label0;

        $i4 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int pos>;
        if $i4 <= 0 goto label0;

        $r2 = r0.<org.apache.coyote.http11.AbstractInputBuffer: byte[] buf>;
        $i5 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int pos>;
        $r3 = r0.<org.apache.coyote.http11.AbstractInputBuffer: byte[] buf>;
        $i6 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastValid>;
        $i7 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int pos>;
        $i8 = $i6 - $i7;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i5, $r3, 0, $i8);

     label0:
        $i9 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastValid>;
        $i10 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int pos>;
        $i11 = $i9 - $i10;
        r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastValid> = $i11;
        r0.<org.apache.coyote.http11.AbstractInputBuffer: int pos> = 0;
        i0 = 0;
        goto label2;

     label1:
        $r5 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.http11.InputFilter[] activeFilters>;
        $r6 = $r5[i0];
        interfaceinvoke $r6.<org.apache.coyote.http11.InputFilter: void recycle()>();
        i0 = i0 + 1;

     label2:
        $i12 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastActiveFilter>;
        if i0 <= $i12 goto label1;

        r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastActiveFilter> = -1;
        r0.<org.apache.coyote.http11.AbstractInputBuffer: boolean parsingHeader> = 1;
        r0.<org.apache.coyote.http11.AbstractInputBuffer: boolean swallowInput> = 1;
        return;
    }

    public void endRequest() throws java.io.IOException
    {
        org.apache.coyote.http11.AbstractInputBuffer r0;
        int i0, $i1, $i2, $i4, $i5;
        boolean $z0;
        org.apache.coyote.http11.InputFilter[] $r1;
        org.apache.coyote.http11.InputFilter $r2;
        long $l3;

        r0 := @this: org.apache.coyote.http11.AbstractInputBuffer;
        $z0 = r0.<org.apache.coyote.http11.AbstractInputBuffer: boolean swallowInput>;
        if $z0 == 0 goto label0;

        $i1 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastActiveFilter>;
        if $i1 == -1 goto label0;

        $r1 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.http11.InputFilter[] activeFilters>;
        $i2 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastActiveFilter>;
        $r2 = $r1[$i2];
        $l3 = interfaceinvoke $r2.<org.apache.coyote.http11.InputFilter: long end()>();
        i0 = (int) $l3;
        $i4 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int pos>;
        $i5 = $i4 - i0;
        r0.<org.apache.coyote.http11.AbstractInputBuffer: int pos> = $i5;

     label0:
        return;
    }

    public int available()
    {
        org.apache.coyote.http11.AbstractInputBuffer r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        org.apache.coyote.http11.InputFilter[] $r1;
        org.apache.coyote.http11.InputFilter $r2;

        r0 := @this: org.apache.coyote.http11.AbstractInputBuffer;
        $i2 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastValid>;
        $i3 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int pos>;
        i0 = $i2 - $i3;
        if i0 != 0 goto label2;

        $i4 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastActiveFilter>;
        if $i4 < 0 goto label2;

        i1 = 0;
        goto label1;

     label0:
        $r1 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.http11.InputFilter[] activeFilters>;
        $r2 = $r1[i1];
        i0 = interfaceinvoke $r2.<org.apache.coyote.http11.InputFilter: int available()>();
        i1 = i1 + 1;

     label1:
        if i0 != 0 goto label2;

        $i5 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastActiveFilter>;
        if i1 <= $i5 goto label0;

     label2:
        return i0;
    }

    public int doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request) throws java.io.IOException
    {
        org.apache.coyote.http11.AbstractInputBuffer r0;
        org.apache.tomcat.util.buf.ByteChunk r1;
        org.apache.coyote.Request r2;
        int $i0, $i1, $i2, $i3;
        org.apache.coyote.InputBuffer $r3;
        org.apache.coyote.http11.InputFilter[] $r4;
        org.apache.coyote.http11.InputFilter $r5;

        r0 := @this: org.apache.coyote.http11.AbstractInputBuffer;
        r1 := @parameter0: org.apache.tomcat.util.buf.ByteChunk;
        r2 := @parameter1: org.apache.coyote.Request;
        $i0 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastActiveFilter>;
        if $i0 != -1 goto label0;

        $r3 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.InputBuffer inputStreamInputBuffer>;
        $i1 = interfaceinvoke $r3.<org.apache.coyote.InputBuffer: int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)>(r1, r2);
        return $i1;

     label0:
        $r4 = r0.<org.apache.coyote.http11.AbstractInputBuffer: org.apache.coyote.http11.InputFilter[] activeFilters>;
        $i2 = r0.<org.apache.coyote.http11.AbstractInputBuffer: int lastActiveFilter>;
        $r5 = $r4[$i2];
        $i3 = interfaceinvoke $r5.<org.apache.coyote.http11.InputFilter: int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)>(r1, r2);
        return $i3;
    }
}
