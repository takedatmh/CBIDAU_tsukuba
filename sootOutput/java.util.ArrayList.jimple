public class java.util.ArrayList extends java.util.AbstractList implements java.util.List, java.util.RandomAccess, java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private static final int DEFAULT_CAPACITY;
    private static final java.lang.Object[] EMPTY_ELEMENTDATA;
    private transient java.lang.Object[] elementData;
    private int size;
    private static final int MAX_ARRAY_SIZE;

    public void <init>(int)
    {
        java.util.ArrayList r0;
        int i0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r5;
        java.lang.Object[] $r6;

        r0 := @this: java.util.ArrayList;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.AbstractList: void <init>()>();
        if i0 >= 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal Capacity: ");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r2;

     label0:
        $r6 = newarray (java.lang.Object)[i0];
        r0.<java.util.ArrayList: java.lang.Object[] elementData> = $r6;
        return;
    }

    public void <init>()
    {
        java.util.ArrayList r0;
        java.lang.Object[] $r1;

        r0 := @this: java.util.ArrayList;
        specialinvoke r0.<java.util.AbstractList: void <init>()>();
        $r1 = <java.util.ArrayList: java.lang.Object[] EMPTY_ELEMENTDATA>;
        r0.<java.util.ArrayList: java.lang.Object[] elementData> = $r1;
        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.ArrayList r0;
        java.util.Collection r1;
        java.lang.Object[] $r2, $r3, $r4, $r6, $r7;
        int $i0, $i1;
        java.lang.Class $r5;

        r0 := @this: java.util.ArrayList;
        r1 := @parameter0: java.util.Collection;
        specialinvoke r0.<java.util.AbstractList: void <init>()>();
        $r2 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();
        r0.<java.util.ArrayList: java.lang.Object[] elementData> = $r2;
        $r3 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $i0 = lengthof $r3;
        r0.<java.util.ArrayList: int size> = $i0;
        $r4 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();
        if $r5 == class "[Ljava/lang/Object;" goto label0;

        $r6 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $i1 = r0.<java.util.ArrayList: int size>;
        $r7 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>($r6, $i1, class "[Ljava/lang/Object;");
        r0.<java.util.ArrayList: java.lang.Object[] elementData> = $r7;

     label0:
        return;
    }

    public void trimToSize()
    {
        java.util.ArrayList r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object[] $r2, $r3, $r4;

        r0 := @this: java.util.ArrayList;
        $i0 = r0.<java.util.ArrayList: int modCount>;
        $i1 = $i0 + 1;
        r0.<java.util.ArrayList: int modCount> = $i1;
        $i2 = r0.<java.util.ArrayList: int size>;
        $r2 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $i3 = lengthof $r2;
        if $i2 >= $i3 goto label0;

        $r3 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $i4 = r0.<java.util.ArrayList: int size>;
        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i4);
        r0.<java.util.ArrayList: java.lang.Object[] elementData> = $r4;

     label0:
        return;
    }

    public void ensureCapacity(int)
    {
        java.util.ArrayList r0;
        int i0;
        java.lang.Object[] $r1, $r2;
        byte b1, $b2;

        r0 := @this: java.util.ArrayList;
        i0 := @parameter0: int;
        $r2 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r1 = <java.util.ArrayList: java.lang.Object[] EMPTY_ELEMENTDATA>;
        if $r2 == $r1 goto label0;

        $b2 = 0;
        goto label1;

     label0:
        $b2 = 10;

     label1:
        b1 = $b2;
        if i0 <= b1 goto label2;

        specialinvoke r0.<java.util.ArrayList: void ensureExplicitCapacity(int)>(i0);

     label2:
        return;
    }

    private void ensureCapacityInternal(int)
    {
        java.util.ArrayList r0;
        int i0;
        java.lang.Object[] $r1, $r2;

        r0 := @this: java.util.ArrayList;
        i0 := @parameter0: int;
        $r2 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r1 = <java.util.ArrayList: java.lang.Object[] EMPTY_ELEMENTDATA>;
        if $r2 != $r1 goto label0;

        i0 = staticinvoke <java.lang.Math: int max(int,int)>(10, i0);

     label0:
        specialinvoke r0.<java.util.ArrayList: void ensureExplicitCapacity(int)>(i0);
        return;
    }

    private void ensureExplicitCapacity(int)
    {
        java.util.ArrayList r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object[] $r2;

        r0 := @this: java.util.ArrayList;
        i0 := @parameter0: int;
        $i1 = r0.<java.util.ArrayList: int modCount>;
        $i2 = $i1 + 1;
        r0.<java.util.ArrayList: int modCount> = $i2;
        $r2 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $i3 = lengthof $r2;
        $i4 = i0 - $i3;
        if $i4 <= 0 goto label0;

        specialinvoke r0.<java.util.ArrayList: void grow(int)>(i0);

     label0:
        return;
    }

    private void grow(int)
    {
        java.util.ArrayList r0;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.Object[] $r1, $r2, $r3;

        r0 := @this: java.util.ArrayList;
        i0 := @parameter0: int;
        $r1 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        i1 = lengthof $r1;
        $i3 = i1 >> 1;
        i2 = i1 + $i3;
        $i4 = i2 - i0;
        if $i4 >= 0 goto label0;

        i2 = i0;

     label0:
        $i5 = i2 - 2147483639;
        if $i5 <= 0 goto label1;

        i2 = staticinvoke <java.util.ArrayList: int hugeCapacity(int)>(i0);

     label1:
        $r2 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, i2);
        r0.<java.util.ArrayList: java.lang.Object[] elementData> = $r3;
        return;
    }

    private static int hugeCapacity(int)
    {
        int i0, $i1;
        java.lang.OutOfMemoryError $r0;

        i0 := @parameter0: int;
        if i0 >= 0 goto label0;

        $r0 = new java.lang.OutOfMemoryError;
        specialinvoke $r0.<java.lang.OutOfMemoryError: void <init>()>();
        throw $r0;

     label0:
        if i0 <= 2147483639 goto label1;

        $i1 = 2147483647;
        goto label2;

     label1:
        $i1 = 2147483639;

     label2:
        return $i1;
    }

    public int size()
    {
        java.util.ArrayList r0;
        int $i0;

        r0 := @this: java.util.ArrayList;
        $i0 = r0.<java.util.ArrayList: int size>;
        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.ArrayList r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.ArrayList;
        $i0 = r0.<java.util.ArrayList: int size>;
        if $i0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.ArrayList r0;
        java.lang.Object r1;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.ArrayList;
        r1 := @parameter0: java.lang.Object;
        $i0 = virtualinvoke r0.<java.util.ArrayList: int indexOf(java.lang.Object)>(r1);
        if $i0 < 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public int indexOf(java.lang.Object)
    {
        java.util.ArrayList r0;
        java.lang.Object r1, $r3, $r5;
        int i0, $i1, i2, $i3;
        java.lang.Object[] $r2, $r4;
        boolean $z0;

        r0 := @this: java.util.ArrayList;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label3;

        i0 = 0;

     label0:
        $i1 = r0.<java.util.ArrayList: int size>;
        if i0 >= $i1 goto label2;

        $r2 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r3 = $r2[i0];
        if $r3 != null goto label1;

        return i0;

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        goto label6;

     label3:
        i2 = 0;

     label4:
        $i3 = r0.<java.util.ArrayList: int size>;
        if i2 >= $i3 goto label6;

        $r4 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r5 = $r4[i2];
        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);
        if $z0 == 0 goto label5;

        return i2;

     label5:
        i2 = i2 + 1;
        goto label4;

     label6:
        return -1;
    }

    public int lastIndexOf(java.lang.Object)
    {
        java.util.ArrayList r0;
        java.lang.Object r1, $r3, $r5;
        int i0, $i1, $i2, i3;
        java.lang.Object[] $r2, $r4;
        boolean $z0;

        r0 := @this: java.util.ArrayList;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label3;

        $i1 = r0.<java.util.ArrayList: int size>;
        i0 = $i1 - 1;

     label0:
        if i0 < 0 goto label2;

        $r2 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r3 = $r2[i0];
        if $r3 != null goto label1;

        return i0;

     label1:
        i0 = i0 + -1;
        goto label0;

     label2:
        goto label6;

     label3:
        $i2 = r0.<java.util.ArrayList: int size>;
        i3 = $i2 - 1;

     label4:
        if i3 < 0 goto label6;

        $r4 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r5 = $r4[i3];
        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);
        if $z0 == 0 goto label5;

        return i3;

     label5:
        i3 = i3 + -1;
        goto label4;

     label6:
        return -1;
    }

    public java.lang.Object clone()
    {
        java.util.ArrayList r0, r1;
        java.lang.Object $r2;
        java.lang.Object[] $r3, $r4;
        int $i0;
        java.lang.CloneNotSupportedException $r6, r7;
        java.lang.InternalError $r8;

        r0 := @this: java.util.ArrayList;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        r1 = (java.util.ArrayList) $r2;
        $r3 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $i0 = r0.<java.util.ArrayList: int size>;
        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0);
        r1.<java.util.ArrayList: java.lang.Object[] elementData> = $r4;
        r1.<java.util.ArrayList: int modCount> = 0;

     label1:
        return r1;

     label2:
        $r6 := @caughtexception;
        r7 = $r6;
        $r8 = new java.lang.InternalError;
        specialinvoke $r8.<java.lang.InternalError: void <init>()>();
        throw $r8;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    public java.lang.Object[] toArray()
    {
        java.util.ArrayList r0;
        java.lang.Object[] $r1, $r2;
        int $i0;

        r0 := @this: java.util.ArrayList;
        $r1 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $i0 = r0.<java.util.ArrayList: int size>;
        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);
        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.ArrayList r0;
        java.lang.Object[] r1, $r2, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Class $r3;

        r0 := @this: java.util.ArrayList;
        r1 := @parameter0: java.lang.Object[];
        $i0 = lengthof r1;
        $i1 = r0.<java.util.ArrayList: int size>;
        if $i0 >= $i1 goto label0;

        $r2 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $i2 = r0.<java.util.ArrayList: int size>;
        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>($r2, $i2, $r3);
        $r5 = (java.lang.Object[]) $r4;
        return $r5;

     label0:
        $r6 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $i3 = r0.<java.util.ArrayList: int size>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r1, 0, $i3);
        $i4 = lengthof r1;
        $i5 = r0.<java.util.ArrayList: int size>;
        if $i4 <= $i5 goto label1;

        $i6 = r0.<java.util.ArrayList: int size>;
        r1[$i6] = null;

     label1:
        return r1;
    }

    java.lang.Object elementData(int)
    {
        java.util.ArrayList r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.ArrayList;
        i0 := @parameter0: int;
        $r1 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r2 = $r1[i0];
        return $r2;
    }

    public java.lang.Object get(int)
    {
        java.util.ArrayList r0;
        int i0;
        java.lang.Object $r1;

        r0 := @this: java.util.ArrayList;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.ArrayList: void rangeCheck(int)>(i0);
        $r1 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object elementData(int)>(i0);
        return $r1;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        java.util.ArrayList r0;
        int i0;
        java.lang.Object r1, r2;
        java.lang.Object[] $r3;

        r0 := @this: java.util.ArrayList;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        specialinvoke r0.<java.util.ArrayList: void rangeCheck(int)>(i0);
        r2 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object elementData(int)>(i0);
        $r3 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r3[i0] = r1;
        return r2;
    }

    public boolean add(java.lang.Object)
    {
        java.util.ArrayList r0;
        java.lang.Object r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r2;

        r0 := @this: java.util.ArrayList;
        r1 := @parameter0: java.lang.Object;
        $i1 = r0.<java.util.ArrayList: int size>;
        $i2 = $i1 + 1;
        specialinvoke r0.<java.util.ArrayList: void ensureCapacityInternal(int)>($i2);
        $r2 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $i0 = r0.<java.util.ArrayList: int size>;
        $i3 = $i0 + 1;
        r0.<java.util.ArrayList: int size> = $i3;
        $r2[$i0] = r1;
        return 1;
    }

    public void add(int, java.lang.Object)
    {
        java.util.ArrayList r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object r1;
        java.lang.Object[] $r2, $r3, $r4;

        r0 := @this: java.util.ArrayList;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        specialinvoke r0.<java.util.ArrayList: void rangeCheckForAdd(int)>(i0);
        $i1 = r0.<java.util.ArrayList: int size>;
        $i2 = $i1 + 1;
        specialinvoke r0.<java.util.ArrayList: void ensureCapacityInternal(int)>($i2);
        $r2 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r3 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $i3 = i0 + 1;
        $i4 = r0.<java.util.ArrayList: int size>;
        $i5 = $i4 - i0;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i0, $r3, $i3, $i5);
        $r4 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r4[i0] = r1;
        $i6 = r0.<java.util.ArrayList: int size>;
        $i7 = $i6 + 1;
        r0.<java.util.ArrayList: int size> = $i7;
        return;
    }

    public java.lang.Object remove(int)
    {
        java.util.ArrayList r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Object r1;
        java.lang.Object[] $r3, $r4, $r5;

        r0 := @this: java.util.ArrayList;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.ArrayList: void rangeCheck(int)>(i0);
        $i2 = r0.<java.util.ArrayList: int modCount>;
        $i3 = $i2 + 1;
        r0.<java.util.ArrayList: int modCount> = $i3;
        r1 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object elementData(int)>(i0);
        $i4 = r0.<java.util.ArrayList: int size>;
        $i5 = $i4 - i0;
        i1 = $i5 - 1;
        if i1 <= 0 goto label0;

        $r3 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $i6 = i0 + 1;
        $r4 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i6, $r4, i0, i1);

     label0:
        $r5 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $i7 = r0.<java.util.ArrayList: int size>;
        $i8 = $i7 - 1;
        r0.<java.util.ArrayList: int size> = $i8;
        $r5[$i8] = null;
        return r1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.ArrayList r0;
        java.lang.Object r1, $r3, $r5;
        int i0, $i1, i2, $i3;
        java.lang.Object[] $r2, $r4;
        boolean $z0;

        r0 := @this: java.util.ArrayList;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label3;

        i0 = 0;

     label0:
        $i1 = r0.<java.util.ArrayList: int size>;
        if i0 >= $i1 goto label2;

        $r2 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r3 = $r2[i0];
        if $r3 != null goto label1;

        specialinvoke r0.<java.util.ArrayList: void fastRemove(int)>(i0);
        return 1;

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        goto label6;

     label3:
        i2 = 0;

     label4:
        $i3 = r0.<java.util.ArrayList: int size>;
        if i2 >= $i3 goto label6;

        $r4 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r5 = $r4[i2];
        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);
        if $z0 == 0 goto label5;

        specialinvoke r0.<java.util.ArrayList: void fastRemove(int)>(i2);
        return 1;

     label5:
        i2 = i2 + 1;
        goto label4;

     label6:
        return 0;
    }

    private void fastRemove(int)
    {
        java.util.ArrayList r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Object[] $r2, $r3, $r4;

        r0 := @this: java.util.ArrayList;
        i0 := @parameter0: int;
        $i2 = r0.<java.util.ArrayList: int modCount>;
        $i3 = $i2 + 1;
        r0.<java.util.ArrayList: int modCount> = $i3;
        $i4 = r0.<java.util.ArrayList: int size>;
        $i5 = $i4 - i0;
        i1 = $i5 - 1;
        if i1 <= 0 goto label0;

        $r2 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $i6 = i0 + 1;
        $r3 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i6, $r3, i0, i1);

     label0:
        $r4 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $i7 = r0.<java.util.ArrayList: int size>;
        $i8 = $i7 - 1;
        r0.<java.util.ArrayList: int size> = $i8;
        $r4[$i8] = null;
        return;
    }

    public void clear()
    {
        java.util.ArrayList r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object[] $r2;

        r0 := @this: java.util.ArrayList;
        $i1 = r0.<java.util.ArrayList: int modCount>;
        $i2 = $i1 + 1;
        r0.<java.util.ArrayList: int modCount> = $i2;
        i0 = 0;

     label0:
        $i3 = r0.<java.util.ArrayList: int size>;
        if i0 >= $i3 goto label1;

        $r2 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r2[i0] = null;
        i0 = i0 + 1;
        goto label0;

     label1:
        r0.<java.util.ArrayList: int size> = 0;
        return;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.ArrayList r0;
        java.util.Collection r1;
        java.lang.Object[] r2, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @this: java.util.ArrayList;
        r1 := @parameter0: java.util.Collection;
        r2 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();
        i0 = lengthof r2;
        $i1 = r0.<java.util.ArrayList: int size>;
        $i2 = $i1 + i0;
        specialinvoke r0.<java.util.ArrayList: void ensureCapacityInternal(int)>($i2);
        $r3 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $i3 = r0.<java.util.ArrayList: int size>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r3, $i3, i0);
        $i4 = r0.<java.util.ArrayList: int size>;
        $i5 = $i4 + i0;
        r0.<java.util.ArrayList: int size> = $i5;
        if i0 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.util.ArrayList r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.Collection r1;
        java.lang.Object[] r2, $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: java.util.ArrayList;
        i0 := @parameter0: int;
        r1 := @parameter1: java.util.Collection;
        specialinvoke r0.<java.util.ArrayList: void rangeCheckForAdd(int)>(i0);
        r2 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();
        i1 = lengthof r2;
        $i3 = r0.<java.util.ArrayList: int size>;
        $i4 = $i3 + i1;
        specialinvoke r0.<java.util.ArrayList: void ensureCapacityInternal(int)>($i4);
        $i5 = r0.<java.util.ArrayList: int size>;
        i2 = $i5 - i0;
        if i2 <= 0 goto label0;

        $r3 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r4 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $i6 = i0 + i1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, i0, $r4, $i6, i2);

     label0:
        $r5 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r5, i0, i1);
        $i7 = r0.<java.util.ArrayList: int size>;
        $i8 = $i7 + i1;
        r0.<java.util.ArrayList: int size> = $i8;
        if i1 == 0 goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void removeRange(int, int)
    {
        java.util.ArrayList r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.Object[] $r2, $r3, $r4;

        r0 := @this: java.util.ArrayList;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i5 = r0.<java.util.ArrayList: int modCount>;
        $i6 = $i5 + 1;
        r0.<java.util.ArrayList: int modCount> = $i6;
        $i7 = r0.<java.util.ArrayList: int size>;
        i2 = $i7 - i1;
        $r2 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r3 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i1, $r3, i0, i2);
        $i8 = r0.<java.util.ArrayList: int size>;
        $i9 = i1 - i0;
        i3 = $i8 - $i9;
        i4 = i3;

     label0:
        $i10 = r0.<java.util.ArrayList: int size>;
        if i4 >= $i10 goto label1;

        $r4 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r4[i4] = null;
        i4 = i4 + 1;
        goto label0;

     label1:
        r0.<java.util.ArrayList: int size> = i3;
        return;
    }

    private void rangeCheck(int)
    {
        java.util.ArrayList r0;
        int i0, $i1;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.String $r2;

        r0 := @this: java.util.ArrayList;
        i0 := @parameter0: int;
        $i1 = r0.<java.util.ArrayList: int size>;
        if i0 < $i1 goto label0;

        $r1 = new java.lang.IndexOutOfBoundsException;
        $r2 = specialinvoke r0.<java.util.ArrayList: java.lang.String outOfBoundsMsg(int)>(i0);
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r2);
        throw $r1;

     label0:
        return;
    }

    private void rangeCheckForAdd(int)
    {
        java.util.ArrayList r0;
        int i0, $i1;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.String $r2;

        r0 := @this: java.util.ArrayList;
        i0 := @parameter0: int;
        $i1 = r0.<java.util.ArrayList: int size>;
        if i0 > $i1 goto label0;

        if i0 >= 0 goto label1;

     label0:
        $r1 = new java.lang.IndexOutOfBoundsException;
        $r2 = specialinvoke r0.<java.util.ArrayList: java.lang.String outOfBoundsMsg(int)>(i0);
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r2);
        throw $r1;

     label1:
        return;
    }

    private java.lang.String outOfBoundsMsg(int)
    {
        java.util.ArrayList r0;
        int i0, $i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: java.util.ArrayList;
        i0 := @parameter0: int;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Size: ");
        $i1 = r0.<java.util.ArrayList: int size>;
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r6;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.ArrayList r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: java.util.ArrayList;
        r1 := @parameter0: java.util.Collection;
        $z0 = specialinvoke r0.<java.util.ArrayList: boolean batchRemove(java.util.Collection,boolean)>(r1, 0);
        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.ArrayList r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: java.util.ArrayList;
        r1 := @parameter0: java.util.Collection;
        $z0 = specialinvoke r0.<java.util.ArrayList: boolean batchRemove(java.util.Collection,boolean)>(r1, 1);
        return $z0;
    }

    private boolean batchRemove(java.util.Collection, boolean)
    {
        java.util.ArrayList r0;
        java.util.Collection r1;
        boolean z0, z1, $z2, z3;
        java.lang.Object[] r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27;
        java.lang.Throwable r3, $r7;
        java.lang.Object $r4, $r5;

        r0 := @this: java.util.ArrayList;
        r1 := @parameter0: java.util.Collection;
        z0 := @parameter1: boolean;
        r2 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        i0 = 0;
        i1 = 0;
        z1 = 0;

     label0:
        $i4 = r0.<java.util.ArrayList: int size>;
        if i0 >= $i4 goto label2;

        $r4 = r2[i0];
        $z2 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r4);
        if $z2 != z0 goto label1;

        $i5 = i1;
        i1 = i1 + 1;
        $r5 = r2[i0];
        r2[$i5] = $r5;

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        $i6 = r0.<java.util.ArrayList: int size>;
        if i0 == $i6 goto label3;

        $i7 = r0.<java.util.ArrayList: int size>;
        $i8 = $i7 - i0;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i0, r2, i1, $i8);
        $i9 = r0.<java.util.ArrayList: int size>;
        $i10 = $i9 - i0;
        i1 = i1 + $i10;

     label3:
        $i11 = r0.<java.util.ArrayList: int size>;
        if i1 == $i11 goto label13;

        i2 = i1;

     label4:
        $i12 = r0.<java.util.ArrayList: int size>;
        if i2 >= $i12 goto label5;

        r2[i2] = null;
        i2 = i2 + 1;
        goto label4;

     label5:
        $i13 = r0.<java.util.ArrayList: int modCount>;
        $i14 = r0.<java.util.ArrayList: int size>;
        $i15 = $i14 - i1;
        $i16 = $i13 + $i15;
        r0.<java.util.ArrayList: int modCount> = $i16;
        r0.<java.util.ArrayList: int size> = i1;
        z1 = 1;
        goto label13;

     label6:
        $r7 := @caughtexception;

     label7:
        r3 = $r7;

     label8:
        $i17 = r0.<java.util.ArrayList: int size>;
        if i0 == $i17 goto label9;

        $i18 = r0.<java.util.ArrayList: int size>;
        $i19 = $i18 - i0;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i0, r2, i1, $i19);
        $i20 = r0.<java.util.ArrayList: int size>;
        $i21 = $i20 - i0;
        i1 = i1 + $i21;

     label9:
        $i22 = r0.<java.util.ArrayList: int size>;
        if i1 == $i22 goto label12;

        i3 = i1;

     label10:
        $i23 = r0.<java.util.ArrayList: int size>;
        if i3 >= $i23 goto label11;

        r2[i3] = null;
        i3 = i3 + 1;
        goto label10;

     label11:
        $i24 = r0.<java.util.ArrayList: int modCount>;
        $i25 = r0.<java.util.ArrayList: int size>;
        $i26 = $i25 - i1;
        $i27 = $i24 + $i26;
        r0.<java.util.ArrayList: int modCount> = $i27;
        r0.<java.util.ArrayList: int size> = i1;
        z3 = 1;

     label12:
        throw r3;

     label13:
        return z1;

        catch java.lang.Throwable from label0 to label2 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.ArrayList r0;
        java.io.ObjectOutputStream r1;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Object[] $r2;
        java.lang.Object $r3;
        java.util.ConcurrentModificationException $r4;

        r0 := @this: java.util.ArrayList;
        r1 := @parameter0: java.io.ObjectOutputStream;
        i0 = r0.<java.util.ArrayList: int modCount>;
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        $i2 = r0.<java.util.ArrayList: int size>;
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i2);
        i1 = 0;

     label0:
        $i3 = r0.<java.util.ArrayList: int size>;
        if i1 >= $i3 goto label1;

        $r2 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        $r3 = $r2[i1];
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);
        i1 = i1 + 1;
        goto label0;

     label1:
        $i4 = r0.<java.util.ArrayList: int modCount>;
        if $i4 == i0 goto label2;

        $r4 = new java.util.ConcurrentModificationException;
        specialinvoke $r4.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r4;

     label2:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.ArrayList r0;
        java.io.ObjectInputStream r1;
        java.lang.Object[] $r2, r3;
        int i0, $i2, $i3, $i4;
        java.lang.Object $r4;

        r0 := @this: java.util.ArrayList;
        r1 := @parameter0: java.io.ObjectInputStream;
        $r2 = <java.util.ArrayList: java.lang.Object[] EMPTY_ELEMENTDATA>;
        r0.<java.util.ArrayList: java.lang.Object[] elementData> = $r2;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();
        $i2 = r0.<java.util.ArrayList: int size>;
        if $i2 <= 0 goto label1;

        $i3 = r0.<java.util.ArrayList: int size>;
        specialinvoke r0.<java.util.ArrayList: void ensureCapacityInternal(int)>($i3);
        r3 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        i0 = 0;

     label0:
        $i4 = r0.<java.util.ArrayList: int size>;
        if i0 >= $i4 goto label1;

        $r4 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        r3[i0] = $r4;
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    public java.util.ListIterator listIterator(int)
    {
        java.util.ArrayList r0;
        int i0, $i1;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.String $r5;
        java.util.ArrayList$ListItr $r6;

        r0 := @this: java.util.ArrayList;
        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        $i1 = r0.<java.util.ArrayList: int size>;
        if i0 <= $i1 goto label1;

     label0:
        $r2 = new java.lang.IndexOutOfBoundsException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);
        throw $r2;

     label1:
        $r6 = new java.util.ArrayList$ListItr;
        specialinvoke $r6.<java.util.ArrayList$ListItr: void <init>(java.util.ArrayList,int)>(r0, i0);
        return $r6;
    }

    public java.util.ListIterator listIterator()
    {
        java.util.ArrayList r0;
        java.util.ArrayList$ListItr $r1;

        r0 := @this: java.util.ArrayList;
        $r1 = new java.util.ArrayList$ListItr;
        specialinvoke $r1.<java.util.ArrayList$ListItr: void <init>(java.util.ArrayList,int)>(r0, 0);
        return $r1;
    }

    public java.util.Iterator iterator()
    {
        java.util.ArrayList r0;
        java.util.ArrayList$Itr $r1;

        r0 := @this: java.util.ArrayList;
        $r1 = new java.util.ArrayList$Itr;
        specialinvoke $r1.<java.util.ArrayList$Itr: void <init>(java.util.ArrayList,java.util.ArrayList$1)>(r0, null);
        return $r1;
    }

    public java.util.List subList(int, int)
    {
        java.util.ArrayList r0;
        int i0, i1, $i2;
        java.util.ArrayList$SubList $r1;

        r0 := @this: java.util.ArrayList;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i2 = r0.<java.util.ArrayList: int size>;
        staticinvoke <java.util.ArrayList: void subListRangeCheck(int,int,int)>(i0, i1, $i2);
        $r1 = new java.util.ArrayList$SubList;
        specialinvoke $r1.<java.util.ArrayList$SubList: void <init>(java.util.ArrayList,java.util.AbstractList,int,int,int)>(r0, r0, 0, i0, i1);
        return $r1;
    }

    static void subListRangeCheck(int, int, int)
    {
        int i0, i1, i2;
        java.lang.StringBuilder $r0, $r2, $r3, $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r15, $r16;
        java.lang.IndexOutOfBoundsException $r1, $r5;
        java.lang.String $r4, $r9, $r17;
        java.lang.IllegalArgumentException $r10;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        if i0 >= 0 goto label0;

        $r1 = new java.lang.IndexOutOfBoundsException;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromIndex = ");
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);
        throw $r1;

     label0:
        if i1 <= i2 goto label1;

        $r5 = new java.lang.IndexOutOfBoundsException;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("toIndex = ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);
        throw $r5;

     label1:
        if i0 <= i1 goto label2;

        $r10 = new java.lang.IllegalArgumentException;
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromIndex(");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") > toIndex(");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);
        throw $r10;

     label2:
        return;
    }

    static int access$100(java.util.ArrayList)
    {
        java.util.ArrayList r0;
        int $i0;

        r0 := @parameter0: java.util.ArrayList;
        $i0 = r0.<java.util.ArrayList: int size>;
        return $i0;
    }

    static java.lang.Object[] access$200(java.util.ArrayList)
    {
        java.util.ArrayList r0;
        java.lang.Object[] $r1;

        r0 := @parameter0: java.util.ArrayList;
        $r1 = r0.<java.util.ArrayList: java.lang.Object[] elementData>;
        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Object[] $r0;

        $r0 = newarray (java.lang.Object)[0];
        <java.util.ArrayList: java.lang.Object[] EMPTY_ELEMENTDATA> = $r0;
        return;
    }
}
