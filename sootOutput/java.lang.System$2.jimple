final class java.lang.System$2 extends java.lang.Object implements sun.misc.JavaLangAccess
{

    void <init>()
    {
        java.lang.System$2 r0;

        r0 := @this: java.lang.System$2;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public sun.reflect.ConstantPool getConstantPool(java.lang.Class)
    {
        java.lang.System$2 r0;
        java.lang.Class r1;
        sun.reflect.ConstantPool $r2;

        r0 := @this: java.lang.System$2;
        r1 := @parameter0: java.lang.Class;
        $r2 = virtualinvoke r1.<java.lang.Class: sun.reflect.ConstantPool getConstantPool()>();
        return $r2;
    }

    public boolean casAnnotationType(java.lang.Class, sun.reflect.annotation.AnnotationType, sun.reflect.annotation.AnnotationType)
    {
        java.lang.System$2 r0;
        java.lang.Class r1;
        sun.reflect.annotation.AnnotationType r2, r3;
        boolean $z0;

        r0 := @this: java.lang.System$2;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: sun.reflect.annotation.AnnotationType;
        r3 := @parameter2: sun.reflect.annotation.AnnotationType;
        $z0 = virtualinvoke r1.<java.lang.Class: boolean casAnnotationType(sun.reflect.annotation.AnnotationType,sun.reflect.annotation.AnnotationType)>(r2, r3);
        return $z0;
    }

    public sun.reflect.annotation.AnnotationType getAnnotationType(java.lang.Class)
    {
        java.lang.System$2 r0;
        java.lang.Class r1;
        sun.reflect.annotation.AnnotationType $r2;

        r0 := @this: java.lang.System$2;
        r1 := @parameter0: java.lang.Class;
        $r2 = virtualinvoke r1.<java.lang.Class: sun.reflect.annotation.AnnotationType getAnnotationType()>();
        return $r2;
    }

    public byte[] getRawClassAnnotations(java.lang.Class)
    {
        java.lang.System$2 r0;
        java.lang.Class r1;
        byte[] $r2;

        r0 := @this: java.lang.System$2;
        r1 := @parameter0: java.lang.Class;
        $r2 = virtualinvoke r1.<java.lang.Class: byte[] getRawAnnotations()>();
        return $r2;
    }

    public java.lang.Enum[] getEnumConstantsShared(java.lang.Class)
    {
        java.lang.System$2 r0;
        java.lang.Class r1;
        java.lang.Object[] $r2;
        java.lang.Enum[] $r3;

        r0 := @this: java.lang.System$2;
        r1 := @parameter0: java.lang.Class;
        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.Object[] getEnumConstantsShared()>();
        $r3 = (java.lang.Enum[]) $r2;
        return $r3;
    }

    public void blockedOn(java.lang.Thread, sun.nio.ch.Interruptible)
    {
        java.lang.System$2 r0;
        java.lang.Thread r1;
        sun.nio.ch.Interruptible r2;

        r0 := @this: java.lang.System$2;
        r1 := @parameter0: java.lang.Thread;
        r2 := @parameter1: sun.nio.ch.Interruptible;
        virtualinvoke r1.<java.lang.Thread: void blockedOn(sun.nio.ch.Interruptible)>(r2);
        return;
    }

    public void registerShutdownHook(int, boolean, java.lang.Runnable)
    {
        java.lang.System$2 r0;
        int i0;
        boolean z0;
        java.lang.Runnable r1;

        r0 := @this: java.lang.System$2;
        i0 := @parameter0: int;
        z0 := @parameter1: boolean;
        r1 := @parameter2: java.lang.Runnable;
        staticinvoke <java.lang.Shutdown: void add(int,boolean,java.lang.Runnable)>(i0, z0, r1);
        return;
    }

    public int getStackTraceDepth(java.lang.Throwable)
    {
        java.lang.System$2 r0;
        java.lang.Throwable r1;
        int $i0;

        r0 := @this: java.lang.System$2;
        r1 := @parameter0: java.lang.Throwable;
        $i0 = virtualinvoke r1.<java.lang.Throwable: int getStackTraceDepth()>();
        return $i0;
    }

    public java.lang.StackTraceElement getStackTraceElement(java.lang.Throwable, int)
    {
        java.lang.System$2 r0;
        java.lang.Throwable r1;
        int i0;
        java.lang.StackTraceElement $r2;

        r0 := @this: java.lang.System$2;
        r1 := @parameter0: java.lang.Throwable;
        i0 := @parameter1: int;
        $r2 = virtualinvoke r1.<java.lang.Throwable: java.lang.StackTraceElement getStackTraceElement(int)>(i0);
        return $r2;
    }

    public int getStringHash32(java.lang.String)
    {
        java.lang.System$2 r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: java.lang.System$2;
        r1 := @parameter0: java.lang.String;
        $i0 = virtualinvoke r1.<java.lang.String: int hash32()>();
        return $i0;
    }

    public java.lang.Thread newThreadWithAcc(java.lang.Runnable, java.security.AccessControlContext)
    {
        java.lang.System$2 r0;
        java.lang.Runnable r1;
        java.security.AccessControlContext r2;
        java.lang.Thread $r3;

        r0 := @this: java.lang.System$2;
        r1 := @parameter0: java.lang.Runnable;
        r2 := @parameter1: java.security.AccessControlContext;
        $r3 = new java.lang.Thread;
        specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable,java.security.AccessControlContext)>(r1, r2);
        return $r3;
    }

    public void invokeFinalize(java.lang.Object) throws java.lang.Throwable
    {
        java.lang.System$2 r0;
        java.lang.Object r1;

        r0 := @this: java.lang.System$2;
        r1 := @parameter0: java.lang.Object;
        virtualinvoke r1.<java.lang.Object: void finalize()>();
        return;
    }
}
