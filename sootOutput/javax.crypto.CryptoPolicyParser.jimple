final class javax.crypto.CryptoPolicyParser extends java.lang.Object
{
    private java.util.Vector grantEntries;
    private java.io.StreamTokenizer st;
    private int lookahead;

    void <init>()
    {
        javax.crypto.CryptoPolicyParser r0;
        java.util.Vector $r1;

        r0 := @this: javax.crypto.CryptoPolicyParser;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new java.util.Vector;
        specialinvoke $r1.<java.util.Vector: void <init>()>();
        r0.<javax.crypto.CryptoPolicyParser: java.util.Vector grantEntries> = $r1;
        return;
    }

    void read(java.io.Reader) throws javax.crypto.CryptoPolicyParser$ParsingException, java.io.IOException
    {
        javax.crypto.CryptoPolicyParser r0;
        java.io.Reader r1;
        null_type n0;
        javax.crypto.CryptoPolicyParser$GrantEntry r2;
        boolean $z0, $z1;
        java.io.BufferedReader $r3;
        java.io.StreamTokenizer $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r25;
        int $i0, $i1, $i2;
        java.util.Vector $r23;
        javax.crypto.CryptoPolicyParser$ParsingException $r24;

        r0 := @this: javax.crypto.CryptoPolicyParser;
        r1 := @parameter0: java.io.Reader;
        $z0 = r1 instanceof java.io.BufferedReader;
        if $z0 != 0 goto label0;

        $r3 = new java.io.BufferedReader;
        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r1);
        r1 = $r3;

     label0:
        $r4 = new java.io.StreamTokenizer;
        specialinvoke $r4.<java.io.StreamTokenizer: void <init>(java.io.Reader)>(r1);
        r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st> = $r4;
        $r5 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        virtualinvoke $r5.<java.io.StreamTokenizer: void resetSyntax()>();
        $r6 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        virtualinvoke $r6.<java.io.StreamTokenizer: void wordChars(int,int)>(97, 122);
        $r7 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        virtualinvoke $r7.<java.io.StreamTokenizer: void wordChars(int,int)>(65, 90);
        $r8 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        virtualinvoke $r8.<java.io.StreamTokenizer: void wordChars(int,int)>(46, 46);
        $r9 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        virtualinvoke $r9.<java.io.StreamTokenizer: void wordChars(int,int)>(48, 57);
        $r10 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        virtualinvoke $r10.<java.io.StreamTokenizer: void wordChars(int,int)>(95, 95);
        $r11 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        virtualinvoke $r11.<java.io.StreamTokenizer: void wordChars(int,int)>(36, 36);
        $r12 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        virtualinvoke $r12.<java.io.StreamTokenizer: void wordChars(int,int)>(160, 255);
        $r13 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        virtualinvoke $r13.<java.io.StreamTokenizer: void whitespaceChars(int,int)>(0, 32);
        $r14 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        virtualinvoke $r14.<java.io.StreamTokenizer: void commentChar(int)>(47);
        $r15 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        virtualinvoke $r15.<java.io.StreamTokenizer: void quoteChar(int)>(39);
        $r16 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        virtualinvoke $r16.<java.io.StreamTokenizer: void quoteChar(int)>(34);
        $r17 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        virtualinvoke $r17.<java.io.StreamTokenizer: void lowerCaseMode(boolean)>(0);
        $r18 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        virtualinvoke $r18.<java.io.StreamTokenizer: void ordinaryChar(int)>(47);
        $r19 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        virtualinvoke $r19.<java.io.StreamTokenizer: void slashSlashComments(boolean)>(1);
        $r20 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        virtualinvoke $r20.<java.io.StreamTokenizer: void slashStarComments(boolean)>(1);
        $r21 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        virtualinvoke $r21.<java.io.StreamTokenizer: void parseNumbers()>();
        n0 = null;
        $r22 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i0 = virtualinvoke $r22.<java.io.StreamTokenizer: int nextToken()>();
        r0.<javax.crypto.CryptoPolicyParser: int lookahead> = $i0;

     label1:
        $i1 = r0.<javax.crypto.CryptoPolicyParser: int lookahead>;
        if $i1 == -1 goto label5;

        $z1 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: boolean peek(java.lang.String)>("grant");
        if $z1 == 0 goto label3;

        r2 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: javax.crypto.CryptoPolicyParser$GrantEntry parseGrantEntry(java.util.Hashtable)>(n0);
        if r2 == null goto label2;

        $r23 = r0.<javax.crypto.CryptoPolicyParser: java.util.Vector grantEntries>;
        virtualinvoke $r23.<java.util.Vector: void addElement(java.lang.Object)>(r2);

     label2:
        goto label4;

     label3:
        $r24 = new javax.crypto.CryptoPolicyParser$ParsingException;
        $r25 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i2 = virtualinvoke $r25.<java.io.StreamTokenizer: int lineno()>();
        specialinvoke $r24.<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String)>($i2, "expected grant statement");
        throw $r24;

     label4:
        specialinvoke r0.<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>(";");
        goto label1;

     label5:
        return;
    }

    private javax.crypto.CryptoPolicyParser$GrantEntry parseGrantEntry(java.util.Hashtable) throws javax.crypto.CryptoPolicyParser$ParsingException, java.io.IOException
    {
        javax.crypto.CryptoPolicyParser r0;
        java.util.Hashtable r1;
        javax.crypto.CryptoPolicyParser$GrantEntry $r2, r3;
        javax.crypto.CryptoPolicyParser$CryptoPermissionEntry r4;
        boolean $z0, $z1;
        javax.crypto.CryptoPolicyParser$ParsingException $r8;
        java.io.StreamTokenizer $r9;
        int $i0;

        r0 := @this: javax.crypto.CryptoPolicyParser;
        r1 := @parameter0: java.util.Hashtable;
        $r2 = new javax.crypto.CryptoPolicyParser$GrantEntry;
        specialinvoke $r2.<javax.crypto.CryptoPolicyParser$GrantEntry: void <init>()>();
        r3 = $r2;
        specialinvoke r0.<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>("grant");
        specialinvoke r0.<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>("{");

     label0:
        $z0 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: boolean peek(java.lang.String)>("}");
        if $z0 != 0 goto label2;

        $z1 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: boolean peek(java.lang.String)>("Permission");
        if $z1 == 0 goto label1;

        r4 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: javax.crypto.CryptoPolicyParser$CryptoPermissionEntry parsePermissionEntry(java.util.Hashtable)>(r1);
        virtualinvoke r3.<javax.crypto.CryptoPolicyParser$GrantEntry: void add(javax.crypto.CryptoPolicyParser$CryptoPermissionEntry)>(r4);
        specialinvoke r0.<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>(";");
        goto label0;

     label1:
        $r8 = new javax.crypto.CryptoPolicyParser$ParsingException;
        $r9 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i0 = virtualinvoke $r9.<java.io.StreamTokenizer: int lineno()>();
        specialinvoke $r8.<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String)>($i0, "expected permission entry");
        throw $r8;

     label2:
        specialinvoke r0.<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>("}");
        return r3;
    }

    private javax.crypto.CryptoPolicyParser$CryptoPermissionEntry parsePermissionEntry(java.util.Hashtable) throws javax.crypto.CryptoPolicyParser$ParsingException, java.io.IOException
    {
        javax.crypto.CryptoPolicyParser r0;
        java.util.Hashtable r1;
        javax.crypto.CryptoPolicyParser$CryptoPermissionEntry $r2, r3;
        java.lang.String r4, $r8, $r9, $r10, $r12, $r16, $r18, $r19, $r20;
        java.util.Vector r5, $r26;
        java.lang.Integer[] r6;
        boolean $z0, $z1, $z2, $z4, $z6, $z7, $z8, $z9, $z11, $z12, $z13, $z14;
        java.util.Locale $r11, $r17;
        javax.crypto.CryptoPolicyParser$ParsingException $r14, $r21, $r24, $r31;
        java.io.StreamTokenizer $r15, $r22, $r25, $r32;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Integer $r28, $r30;
        java.security.spec.AlgorithmParameterSpec $r33;

        r0 := @this: javax.crypto.CryptoPolicyParser;
        r1 := @parameter0: java.util.Hashtable;
        $r2 = new javax.crypto.CryptoPolicyParser$CryptoPermissionEntry;
        specialinvoke $r2.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: void <init>()>();
        r3 = $r2;
        specialinvoke r0.<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>("Permission");
        $r8 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>("permission type");
        r3.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String cryptoPermission> = $r8;
        $r9 = r3.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String cryptoPermission>;
        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("javax.crypto.CryptoAllPermission");
        if $z0 == 0 goto label0;

        r3.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String alg> = "CryptoAllPermission";
        r3.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int maxKeySize> = 2147483647;
        return r3;

     label0:
        $z1 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: boolean peek(java.lang.String)>("\"");
        if $z1 == 0 goto label1;

        $r10 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>("quoted string");
        $r11 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r12 = virtualinvoke $r10.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r11);
        r3.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String alg> = $r12;
        goto label3;

     label1:
        $z2 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: boolean peek(java.lang.String)>("*");
        if $z2 == 0 goto label2;

        specialinvoke r0.<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>("*");
        r3.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String alg> = "*";
        goto label3;

     label2:
        $r14 = new javax.crypto.CryptoPolicyParser$ParsingException;
        $r15 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i0 = virtualinvoke $r15.<java.io.StreamTokenizer: int lineno()>();
        specialinvoke $r14.<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String)>($i0, "Missing the algorithm name");
        throw $r14;

     label3:
        specialinvoke r0.<javax.crypto.CryptoPolicyParser: boolean peekAndMatch(java.lang.String)>(",");
        $z4 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: boolean peek(java.lang.String)>("\"");
        if $z4 == 0 goto label4;

        $r16 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>("quoted string");
        $r17 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r18 = virtualinvoke $r16.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r17);
        r3.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String exemptionMechanism> = $r18;

     label4:
        specialinvoke r0.<javax.crypto.CryptoPolicyParser: boolean peekAndMatch(java.lang.String)>(",");
        $r19 = r3.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String alg>;
        $r20 = r3.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String exemptionMechanism>;
        $z6 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: boolean isConsistent(java.lang.String,java.lang.String,java.util.Hashtable)>($r19, $r20, r1);
        if $z6 != 0 goto label5;

        $r21 = new javax.crypto.CryptoPolicyParser$ParsingException;
        $r22 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i1 = virtualinvoke $r22.<java.io.StreamTokenizer: int lineno()>();
        specialinvoke $r21.<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String)>($i1, "Inconsistent policy");
        throw $r21;

     label5:
        $z7 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: boolean peek(java.lang.String)>("number");
        if $z7 == 0 goto label6;

        $i2 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: int match()>();
        r3.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int maxKeySize> = $i2;
        goto label9;

     label6:
        $z8 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: boolean peek(java.lang.String)>("*");
        if $z8 == 0 goto label7;

        specialinvoke r0.<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>("*");
        r3.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int maxKeySize> = 2147483647;
        goto label9;

     label7:
        $z9 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: boolean peek(java.lang.String)>(";");
        if $z9 != 0 goto label8;

        $r24 = new javax.crypto.CryptoPolicyParser$ParsingException;
        $r25 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i3 = virtualinvoke $r25.<java.io.StreamTokenizer: int lineno()>();
        specialinvoke $r24.<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String)>($i3, "Missing the maximum allowable key size");
        throw $r24;

     label8:
        r3.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int maxKeySize> = 2147483647;

     label9:
        specialinvoke r0.<javax.crypto.CryptoPolicyParser: boolean peekAndMatch(java.lang.String)>(",");
        $z11 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: boolean peek(java.lang.String)>("\"");
        if $z11 == 0 goto label14;

        r4 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>("quoted string");
        $r26 = new java.util.Vector;
        specialinvoke $r26.<java.util.Vector: void <init>(int)>(1);
        r5 = $r26;

     label10:
        $z12 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: boolean peek(java.lang.String)>(",");
        if $z12 == 0 goto label13;

        specialinvoke r0.<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>(",");
        $z13 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: boolean peek(java.lang.String)>("number");
        if $z13 == 0 goto label11;

        $r28 = new java.lang.Integer;
        $i4 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: int match()>();
        specialinvoke $r28.<java.lang.Integer: void <init>(int)>($i4);
        virtualinvoke r5.<java.util.Vector: void addElement(java.lang.Object)>($r28);
        goto label10;

     label11:
        $z14 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: boolean peek(java.lang.String)>("*");
        if $z14 == 0 goto label12;

        specialinvoke r0.<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>("*");
        $r30 = new java.lang.Integer;
        specialinvoke $r30.<java.lang.Integer: void <init>(int)>(2147483647);
        virtualinvoke r5.<java.util.Vector: void addElement(java.lang.Object)>($r30);
        goto label10;

     label12:
        $r31 = new javax.crypto.CryptoPolicyParser$ParsingException;
        $r32 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i5 = virtualinvoke $r32.<java.io.StreamTokenizer: int lineno()>();
        specialinvoke $r31.<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String)>($i5, "Expecting an integer");
        throw $r31;

     label13:
        $i6 = virtualinvoke r5.<java.util.Vector: int size()>();
        r6 = newarray (java.lang.Integer)[$i6];
        virtualinvoke r5.<java.util.Vector: void copyInto(java.lang.Object[])>(r6);
        r3.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean checkParam> = 1;
        $r33 = staticinvoke <javax.crypto.CryptoPolicyParser: java.security.spec.AlgorithmParameterSpec getInstance(java.lang.String,java.lang.Integer[])>(r4, r6);
        r3.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.security.spec.AlgorithmParameterSpec algParamSpec> = $r33;

     label14:
        return r3;
    }

    private static final java.security.spec.AlgorithmParameterSpec getInstance(java.lang.String, java.lang.Integer[]) throws javax.crypto.CryptoPolicyParser$ParsingException
    {
        java.lang.String r0, $r16;
        java.lang.Integer[] r1;
        null_type n0;
        java.lang.Class r2, $r4;
        java.lang.Class[] r3;
        int i0, $i1, $i2;
        java.lang.reflect.Constructor r5;
        java.lang.Object[] $r6;
        java.lang.Object $r7;
        java.security.spec.AlgorithmParameterSpec r8;
        java.lang.Exception $r9, r10;
        javax.crypto.CryptoPolicyParser$ParsingException $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r15;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.Integer[];
        n0 = null;

     label0:
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);
        $i1 = lengthof r1;
        r3 = newarray (java.lang.Class)[$i1];
        i0 = 0;

     label1:
        $i2 = lengthof r1;
        if i0 >= $i2 goto label2;

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;
        r3[i0] = $r4;
        i0 = i0 + 1;
        goto label1;

     label2:
        r5 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r3);
        $r6 = (java.lang.Object[]) r1;
        $r7 = virtualinvoke r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6);
        r8 = (java.security.spec.AlgorithmParameterSpec) $r7;

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;
        r10 = $r9;
        $r11 = new javax.crypto.CryptoPolicyParser$ParsingException;
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot call the constructor of ");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r11.<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(java.lang.String)>($r16);
        throw $r11;

     label5:
        return r8;

        catch java.lang.Exception from label0 to label3 with label4;
    }

    private boolean peekAndMatch(java.lang.String) throws javax.crypto.CryptoPolicyParser$ParsingException, java.io.IOException
    {
        javax.crypto.CryptoPolicyParser r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: javax.crypto.CryptoPolicyParser;
        r1 := @parameter0: java.lang.String;
        $z0 = specialinvoke r0.<javax.crypto.CryptoPolicyParser: boolean peek(java.lang.String)>(r1);
        if $z0 == 0 goto label0;

        specialinvoke r0.<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)>(r1);
        return 1;

     label0:
        return 0;
    }

    private boolean peek(java.lang.String)
    {
        javax.crypto.CryptoPolicyParser r0;
        java.lang.String r1, $r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int $i0;
        java.io.StreamTokenizer $r2;

        r0 := @this: javax.crypto.CryptoPolicyParser;
        r1 := @parameter0: java.lang.String;
        z0 = 0;
        $i0 = r0.<javax.crypto.CryptoPolicyParser: int lookahead>;
        lookupswitch($i0)
        {
            case -3: goto label0;
            case -2: goto label1;
            case 34: goto label5;
            case 42: goto label6;
            case 44: goto label2;
            case 59: goto label7;
            case 123: goto label3;
            case 125: goto label4;
            default: goto label8;
        };

     label0:
        $r2 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $r3 = $r2.<java.io.StreamTokenizer: java.lang.String sval>;
        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);
        if $z1 == 0 goto label8;

        z0 = 1;
        goto label8;

     label1:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("number");
        if $z2 == 0 goto label8;

        z0 = 1;
        goto label8;

     label2:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(",");
        if $z3 == 0 goto label8;

        z0 = 1;
        goto label8;

     label3:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("{");
        if $z4 == 0 goto label8;

        z0 = 1;
        goto label8;

     label4:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("}");
        if $z5 == 0 goto label8;

        z0 = 1;
        goto label8;

     label5:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("\"");
        if $z6 == 0 goto label8;

        z0 = 1;
        goto label8;

     label6:
        $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("*");
        if $z7 == 0 goto label8;

        z0 = 1;
        goto label8;

     label7:
        $z8 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(";");
        if $z8 == 0 goto label8;

        z0 = 1;
        goto label8;

     label8:
        return z0;
    }

    private int match() throws javax.crypto.CryptoPolicyParser$ParsingException, java.io.IOException
    {
        javax.crypto.CryptoPolicyParser r0;
        int i0, i1, $i2, $i3;
        java.lang.String r1;
        java.io.StreamTokenizer $r2, $r3, $r4, $r5, $r6;
        double $d0, $d1;
        javax.crypto.CryptoPolicyParser$ParsingException $r7;

        r0 := @this: javax.crypto.CryptoPolicyParser;
        i0 = -1;
        $r2 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        i1 = virtualinvoke $r2.<java.io.StreamTokenizer: int lineno()>();
        r1 = null;
        $i2 = r0.<javax.crypto.CryptoPolicyParser: int lookahead>;
        lookupswitch($i2)
        {
            case -2: goto label0;
            default: goto label2;
        };

     label0:
        $r3 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $d0 = $r3.<java.io.StreamTokenizer: double nval>;
        i0 = (int) $d0;
        if i0 >= 0 goto label1;

        $r4 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $d1 = $r4.<java.io.StreamTokenizer: double nval>;
        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d1);

     label1:
        $r5 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i3 = virtualinvoke $r5.<java.io.StreamTokenizer: int nextToken()>();
        r0.<javax.crypto.CryptoPolicyParser: int lookahead> = $i3;
        goto label3;

     label2:
        $r6 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        r1 = $r6.<java.io.StreamTokenizer: java.lang.String sval>;

     label3:
        if i0 > 0 goto label4;

        $r7 = new javax.crypto.CryptoPolicyParser$ParsingException;
        specialinvoke $r7.<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>(i1, "a non-negative number", r1);
        throw $r7;

     label4:
        return i0;
    }

    private java.lang.String match(java.lang.String) throws javax.crypto.CryptoPolicyParser$ParsingException, java.io.IOException
    {
        javax.crypto.CryptoPolicyParser r0;
        java.lang.String r1, r2, $r8, $r10, $r16, $r18, $r25, $r33, $r51;
        java.lang.StringBuilder $r3, $r6, $r9, $r12, $r13, $r14, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        javax.crypto.CryptoPolicyParser$ParsingException $r4, $r11, $r22, $r30, $r35, $r38, $r41, $r44, $r47, $r49;
        java.io.StreamTokenizer $r5, $r7, $r17, $r19, $r20, $r21, $r23, $r24, $r26, $r27, $r28, $r29, $r31, $r32, $r34, $r36, $r37, $r39, $r40, $r42, $r43, $r45, $r46, $r48, $r50;
        double $d0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        char[] $r52;
        char $c20;

        r0 := @this: javax.crypto.CryptoPolicyParser;
        r1 := @parameter0: java.lang.String;
        r2 = null;
        $i0 = r0.<javax.crypto.CryptoPolicyParser: int lookahead>;
        lookupswitch($i0)
        {
            case -3: goto label2;
            case -2: goto label0;
            case -1: goto label1;
            case 34: goto label5;
            case 42: goto label16;
            case 44: goto label8;
            case 59: goto label14;
            case 123: goto label10;
            case 125: goto label12;
            default: goto label18;
        };

     label0:
        $r4 = new javax.crypto.CryptoPolicyParser$ParsingException;
        $r5 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i1 = virtualinvoke $r5.<java.io.StreamTokenizer: int lineno()>();
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("number ");
        $r7 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $d0 = $r7.<java.io.StreamTokenizer: double nval>;
        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d0);
        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>($i1, r1, $r10);
        throw $r4;

     label1:
        $r11 = new javax.crypto.CryptoPolicyParser$ParsingException;
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected ");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", read end of file");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r11.<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(java.lang.String)>($r16);
        throw $r11;

     label2:
        $r17 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $r18 = $r17.<java.io.StreamTokenizer: java.lang.String sval>;
        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r18);
        if $z0 == 0 goto label3;

        $r19 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i2 = virtualinvoke $r19.<java.io.StreamTokenizer: int nextToken()>();
        r0.<javax.crypto.CryptoPolicyParser: int lookahead> = $i2;
        goto label19;

     label3:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("permission type");
        if $z1 == 0 goto label4;

        $r20 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        r2 = $r20.<java.io.StreamTokenizer: java.lang.String sval>;
        $r21 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i3 = virtualinvoke $r21.<java.io.StreamTokenizer: int nextToken()>();
        r0.<javax.crypto.CryptoPolicyParser: int lookahead> = $i3;
        goto label19;

     label4:
        $r22 = new javax.crypto.CryptoPolicyParser$ParsingException;
        $r23 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i4 = virtualinvoke $r23.<java.io.StreamTokenizer: int lineno()>();
        $r24 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $r25 = $r24.<java.io.StreamTokenizer: java.lang.String sval>;
        specialinvoke $r22.<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>($i4, r1, $r25);
        throw $r22;

     label5:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("quoted string");
        if $z2 == 0 goto label6;

        $r26 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        r2 = $r26.<java.io.StreamTokenizer: java.lang.String sval>;
        $r27 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i5 = virtualinvoke $r27.<java.io.StreamTokenizer: int nextToken()>();
        r0.<javax.crypto.CryptoPolicyParser: int lookahead> = $i5;
        goto label19;

     label6:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("permission type");
        if $z3 == 0 goto label7;

        $r28 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        r2 = $r28.<java.io.StreamTokenizer: java.lang.String sval>;
        $r29 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i6 = virtualinvoke $r29.<java.io.StreamTokenizer: int nextToken()>();
        r0.<javax.crypto.CryptoPolicyParser: int lookahead> = $i6;
        goto label19;

     label7:
        $r30 = new javax.crypto.CryptoPolicyParser$ParsingException;
        $r31 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i7 = virtualinvoke $r31.<java.io.StreamTokenizer: int lineno()>();
        $r32 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $r33 = $r32.<java.io.StreamTokenizer: java.lang.String sval>;
        specialinvoke $r30.<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>($i7, r1, $r33);
        throw $r30;

     label8:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(",");
        if $z4 == 0 goto label9;

        $r34 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i8 = virtualinvoke $r34.<java.io.StreamTokenizer: int nextToken()>();
        r0.<javax.crypto.CryptoPolicyParser: int lookahead> = $i8;
        goto label19;

     label9:
        $r35 = new javax.crypto.CryptoPolicyParser$ParsingException;
        $r36 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i9 = virtualinvoke $r36.<java.io.StreamTokenizer: int lineno()>();
        specialinvoke $r35.<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>($i9, r1, ",");
        throw $r35;

     label10:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("{");
        if $z5 == 0 goto label11;

        $r37 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i10 = virtualinvoke $r37.<java.io.StreamTokenizer: int nextToken()>();
        r0.<javax.crypto.CryptoPolicyParser: int lookahead> = $i10;
        goto label19;

     label11:
        $r38 = new javax.crypto.CryptoPolicyParser$ParsingException;
        $r39 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i11 = virtualinvoke $r39.<java.io.StreamTokenizer: int lineno()>();
        specialinvoke $r38.<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>($i11, r1, "{");
        throw $r38;

     label12:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("}");
        if $z6 == 0 goto label13;

        $r40 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i12 = virtualinvoke $r40.<java.io.StreamTokenizer: int nextToken()>();
        r0.<javax.crypto.CryptoPolicyParser: int lookahead> = $i12;
        goto label19;

     label13:
        $r41 = new javax.crypto.CryptoPolicyParser$ParsingException;
        $r42 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i13 = virtualinvoke $r42.<java.io.StreamTokenizer: int lineno()>();
        specialinvoke $r41.<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>($i13, r1, "}");
        throw $r41;

     label14:
        $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(";");
        if $z7 == 0 goto label15;

        $r43 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i14 = virtualinvoke $r43.<java.io.StreamTokenizer: int nextToken()>();
        r0.<javax.crypto.CryptoPolicyParser: int lookahead> = $i14;
        goto label19;

     label15:
        $r44 = new javax.crypto.CryptoPolicyParser$ParsingException;
        $r45 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i15 = virtualinvoke $r45.<java.io.StreamTokenizer: int lineno()>();
        specialinvoke $r44.<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>($i15, r1, ";");
        throw $r44;

     label16:
        $z8 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("*");
        if $z8 == 0 goto label17;

        $r46 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i16 = virtualinvoke $r46.<java.io.StreamTokenizer: int nextToken()>();
        r0.<javax.crypto.CryptoPolicyParser: int lookahead> = $i16;
        goto label19;

     label17:
        $r47 = new javax.crypto.CryptoPolicyParser$ParsingException;
        $r48 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i17 = virtualinvoke $r48.<java.io.StreamTokenizer: int lineno()>();
        specialinvoke $r47.<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>($i17, r1, "*");
        throw $r47;

     label18:
        $r49 = new javax.crypto.CryptoPolicyParser$ParsingException;
        $r50 = r0.<javax.crypto.CryptoPolicyParser: java.io.StreamTokenizer st>;
        $i18 = virtualinvoke $r50.<java.io.StreamTokenizer: int lineno()>();
        $r51 = new java.lang.String;
        $r52 = newarray (char)[1];
        $i19 = r0.<javax.crypto.CryptoPolicyParser: int lookahead>;
        $c20 = (char) $i19;
        $r52[0] = $c20;
        specialinvoke $r51.<java.lang.String: void <init>(char[])>($r52);
        specialinvoke $r49.<javax.crypto.CryptoPolicyParser$ParsingException: void <init>(int,java.lang.String,java.lang.String)>($i18, r1, $r51);
        throw $r49;

     label19:
        return r2;
    }

    javax.crypto.CryptoPermission[] getPermissions()
    {
        javax.crypto.CryptoPolicyParser r0;
        java.util.Vector $r1, r2, $r7;
        java.util.Enumeration r3, r5;
        javax.crypto.CryptoPolicyParser$GrantEntry r4;
        javax.crypto.CryptoPolicyParser$CryptoPermissionEntry r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r8, $r9;
        java.lang.String $r10, $r13, $r15, $r17, $r18;
        javax.crypto.CryptoAllPermission $r11;
        javax.crypto.CryptoPermission $r12, $r16;
        int $i0, $i1, $i2;
        java.security.spec.AlgorithmParameterSpec $r14;
        javax.crypto.CryptoPermission[] r19;

        r0 := @this: javax.crypto.CryptoPolicyParser;
        $r1 = new java.util.Vector;
        specialinvoke $r1.<java.util.Vector: void <init>()>();
        r2 = $r1;
        $r7 = r0.<javax.crypto.CryptoPolicyParser: java.util.Vector grantEntries>;
        r3 = virtualinvoke $r7.<java.util.Vector: java.util.Enumeration elements()>();

     label0:
        $z0 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label6;

        $r8 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>();
        r4 = (javax.crypto.CryptoPolicyParser$GrantEntry) $r8;
        r5 = virtualinvoke r4.<javax.crypto.CryptoPolicyParser$GrantEntry: java.util.Enumeration permissionElements()>();

     label1:
        $z1 = interfaceinvoke r5.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z1 == 0 goto label5;

        $r9 = interfaceinvoke r5.<java.util.Enumeration: java.lang.Object nextElement()>();
        r6 = (javax.crypto.CryptoPolicyParser$CryptoPermissionEntry) $r9;
        $r10 = r6.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String cryptoPermission>;
        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("javax.crypto.CryptoAllPermission");
        if $z2 == 0 goto label2;

        $r11 = <javax.crypto.CryptoAllPermission: javax.crypto.CryptoAllPermission INSTANCE>;
        virtualinvoke r2.<java.util.Vector: void addElement(java.lang.Object)>($r11);
        goto label4;

     label2:
        $z3 = r6.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: boolean checkParam>;
        if $z3 == 0 goto label3;

        $r12 = new javax.crypto.CryptoPermission;
        $r13 = r6.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String alg>;
        $i0 = r6.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int maxKeySize>;
        $r14 = r6.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        $r15 = r6.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String exemptionMechanism>;
        specialinvoke $r12.<javax.crypto.CryptoPermission: void <init>(java.lang.String,int,java.security.spec.AlgorithmParameterSpec,java.lang.String)>($r13, $i0, $r14, $r15);
        virtualinvoke r2.<java.util.Vector: void addElement(java.lang.Object)>($r12);
        goto label4;

     label3:
        $r16 = new javax.crypto.CryptoPermission;
        $r17 = r6.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String alg>;
        $i1 = r6.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: int maxKeySize>;
        $r18 = r6.<javax.crypto.CryptoPolicyParser$CryptoPermissionEntry: java.lang.String exemptionMechanism>;
        specialinvoke $r16.<javax.crypto.CryptoPermission: void <init>(java.lang.String,int,java.lang.String)>($r17, $i1, $r18);
        virtualinvoke r2.<java.util.Vector: void addElement(java.lang.Object)>($r16);

     label4:
        goto label1;

     label5:
        goto label0;

     label6:
        $i2 = virtualinvoke r2.<java.util.Vector: int size()>();
        r19 = newarray (javax.crypto.CryptoPermission)[$i2];
        virtualinvoke r2.<java.util.Vector: void copyInto(java.lang.Object[])>(r19);
        return r19;
    }

    private boolean isConsistent(java.lang.String, java.lang.String, java.util.Hashtable)
    {
        javax.crypto.CryptoPolicyParser r0;
        java.lang.String r1, r2, r4, $r6;
        java.util.Hashtable r3, $r7, r8;
        java.util.Vector r5, $r9, r12, $r13;
        boolean $z0, $z1, $z2;
        java.lang.Object $r11;

        r0 := @this: javax.crypto.CryptoPolicyParser;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.util.Hashtable;
        if r2 != null goto label0;

        $r6 = "none";
        goto label1;

     label0:
        $r6 = r2;

     label1:
        r4 = $r6;
        if r3 != null goto label2;

        $r7 = new java.util.Hashtable;
        specialinvoke $r7.<java.util.Hashtable: void <init>()>();
        r8 = $r7;
        $r9 = new java.util.Vector;
        specialinvoke $r9.<java.util.Vector: void <init>(int)>(1);
        r5 = $r9;
        virtualinvoke r5.<java.util.Vector: void addElement(java.lang.Object)>(r4);
        virtualinvoke r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5);
        return 1;

     label2:
        $z0 = virtualinvoke r3.<java.util.Hashtable: boolean containsKey(java.lang.Object)>("CryptoAllPermission");
        if $z0 == 0 goto label3;

        return 0;

     label3:
        $z1 = virtualinvoke r3.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r1);
        if $z1 == 0 goto label4;

        $r11 = virtualinvoke r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);
        r12 = (java.util.Vector) $r11;
        $z2 = virtualinvoke r12.<java.util.Vector: boolean contains(java.lang.Object)>(r4);
        if $z2 == 0 goto label5;

        return 0;

     label4:
        $r13 = new java.util.Vector;
        specialinvoke $r13.<java.util.Vector: void <init>(int)>(1);
        r12 = $r13;

     label5:
        virtualinvoke r12.<java.util.Vector: void addElement(java.lang.Object)>(r4);
        virtualinvoke r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r12);
        return 1;
    }
}
