public abstract class java.nio.channels.AsynchronousFileChannel extends java.lang.Object implements java.nio.channels.AsynchronousChannel
{
    private static final java.nio.file.attribute.FileAttribute[] NO_ATTRIBUTES;

    protected void <init>()
    {
        java.nio.channels.AsynchronousFileChannel r0;

        r0 := @this: java.nio.channels.AsynchronousFileChannel;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static transient java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path, java.util.Set, java.util.concurrent.ExecutorService, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.util.Set r1;
        java.util.concurrent.ExecutorService r2;
        java.nio.file.attribute.FileAttribute[] r3;
        java.nio.file.spi.FileSystemProvider r4;
        java.nio.file.FileSystem $r5;
        java.nio.channels.AsynchronousFileChannel $r6;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.util.Set;
        r2 := @parameter2: java.util.concurrent.ExecutorService;
        r3 := @parameter3: java.nio.file.attribute.FileAttribute[];
        $r5 = interfaceinvoke r0.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>();
        r4 = virtualinvoke $r5.<java.nio.file.FileSystem: java.nio.file.spi.FileSystemProvider provider()>();
        $r6 = virtualinvoke r4.<java.nio.file.spi.FileSystemProvider: java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])>(r0, r1, r2, r3);
        return $r6;
    }

    public static transient java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path, java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.OpenOption[] r1;
        java.util.HashSet $r2, r3;
        java.nio.file.attribute.FileAttribute[] $r4;
        int $i0;
        java.nio.channels.AsynchronousFileChannel $r5;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.OpenOption[];
        $r2 = new java.util.HashSet;
        $i0 = lengthof r1;
        specialinvoke $r2.<java.util.HashSet: void <init>(int)>($i0);
        r3 = $r2;
        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r3, r1);
        $r4 = <java.nio.channels.AsynchronousFileChannel: java.nio.file.attribute.FileAttribute[] NO_ATTRIBUTES>;
        $r5 = staticinvoke <java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])>(r0, r3, null, $r4);
        return $r5;
    }

    public abstract long size() throws java.io.IOException;

    public abstract java.nio.channels.AsynchronousFileChannel truncate(long) throws java.io.IOException;

    public abstract void force(boolean) throws java.io.IOException;

    public abstract void lock(long, long, boolean, java.lang.Object, java.nio.channels.CompletionHandler);

    public final void lock(java.lang.Object, java.nio.channels.CompletionHandler)
    {
        java.nio.channels.AsynchronousFileChannel r0;
        java.lang.Object r1;
        java.nio.channels.CompletionHandler r2;

        r0 := @this: java.nio.channels.AsynchronousFileChannel;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.nio.channels.CompletionHandler;
        virtualinvoke r0.<java.nio.channels.AsynchronousFileChannel: void lock(long,long,boolean,java.lang.Object,java.nio.channels.CompletionHandler)>(0L, 9223372036854775807L, 0, r1, r2);
        return;
    }

    public abstract java.util.concurrent.Future lock(long, long, boolean);

    public final java.util.concurrent.Future lock()
    {
        java.nio.channels.AsynchronousFileChannel r0;
        java.util.concurrent.Future $r1;

        r0 := @this: java.nio.channels.AsynchronousFileChannel;
        $r1 = virtualinvoke r0.<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future lock(long,long,boolean)>(0L, 9223372036854775807L, 0);
        return $r1;
    }

    public abstract java.nio.channels.FileLock tryLock(long, long, boolean) throws java.io.IOException;

    public final java.nio.channels.FileLock tryLock() throws java.io.IOException
    {
        java.nio.channels.AsynchronousFileChannel r0;
        java.nio.channels.FileLock $r1;

        r0 := @this: java.nio.channels.AsynchronousFileChannel;
        $r1 = virtualinvoke r0.<java.nio.channels.AsynchronousFileChannel: java.nio.channels.FileLock tryLock(long,long,boolean)>(0L, 9223372036854775807L, 0);
        return $r1;
    }

    public abstract void read(java.nio.ByteBuffer, long, java.lang.Object, java.nio.channels.CompletionHandler);

    public abstract java.util.concurrent.Future read(java.nio.ByteBuffer, long);

    public abstract void write(java.nio.ByteBuffer, long, java.lang.Object, java.nio.channels.CompletionHandler);

    public abstract java.util.concurrent.Future write(java.nio.ByteBuffer, long);

    static void <clinit>()
    {
        java.nio.file.attribute.FileAttribute[] $r0;

        $r0 = newarray (java.nio.file.attribute.FileAttribute)[0];
        <java.nio.channels.AsynchronousFileChannel: java.nio.file.attribute.FileAttribute[] NO_ATTRIBUTES> = $r0;
        return;
    }
}
