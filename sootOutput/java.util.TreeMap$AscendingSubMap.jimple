final class java.util.TreeMap$AscendingSubMap extends java.util.TreeMap$NavigableSubMap
{
    private static final long serialVersionUID;

    void <init>(java.util.TreeMap, boolean, java.lang.Object, boolean, boolean, java.lang.Object, boolean)
    {
        java.util.TreeMap$AscendingSubMap r0;
        java.util.TreeMap r1;
        boolean z0, z1, z2, z3;
        java.lang.Object r2, r3;

        r0 := @this: java.util.TreeMap$AscendingSubMap;
        r1 := @parameter0: java.util.TreeMap;
        z0 := @parameter1: boolean;
        r2 := @parameter2: java.lang.Object;
        z1 := @parameter3: boolean;
        z2 := @parameter4: boolean;
        r3 := @parameter5: java.lang.Object;
        z3 := @parameter6: boolean;
        specialinvoke r0.<java.util.TreeMap$NavigableSubMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,boolean,boolean,java.lang.Object,boolean)>(r1, z0, r2, z1, z2, r3, z3);
        return;
    }

    public java.util.Comparator comparator()
    {
        java.util.TreeMap$AscendingSubMap r0;
        java.util.TreeMap $r1;
        java.util.Comparator $r2;

        r0 := @this: java.util.TreeMap$AscendingSubMap;
        $r1 = r0.<java.util.TreeMap$AscendingSubMap: java.util.TreeMap m>;
        $r2 = virtualinvoke $r1.<java.util.TreeMap: java.util.Comparator comparator()>();
        return $r2;
    }

    public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        java.util.TreeMap$AscendingSubMap r0, $r5;
        java.lang.Object r1, r2;
        boolean z0, z1, $z2, $z3;
        java.lang.IllegalArgumentException $r3, $r4;
        java.util.TreeMap $r6;

        r0 := @this: java.util.TreeMap$AscendingSubMap;
        r1 := @parameter0: java.lang.Object;
        z0 := @parameter1: boolean;
        r2 := @parameter2: java.lang.Object;
        z1 := @parameter3: boolean;
        $z2 = virtualinvoke r0.<java.util.TreeMap$AscendingSubMap: boolean inRange(java.lang.Object,boolean)>(r1, z0);
        if $z2 != 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("fromKey out of range");
        throw $r3;

     label0:
        $z3 = virtualinvoke r0.<java.util.TreeMap$AscendingSubMap: boolean inRange(java.lang.Object,boolean)>(r2, z1);
        if $z3 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("toKey out of range");
        throw $r4;

     label1:
        $r5 = new java.util.TreeMap$AscendingSubMap;
        $r6 = r0.<java.util.TreeMap$AscendingSubMap: java.util.TreeMap m>;
        specialinvoke $r5.<java.util.TreeMap$AscendingSubMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,boolean,boolean,java.lang.Object,boolean)>($r6, 0, r1, z0, 0, r2, z1);
        return $r5;
    }

    public java.util.NavigableMap headMap(java.lang.Object, boolean)
    {
        java.util.TreeMap$AscendingSubMap r0, $r3;
        java.lang.Object r1, $r5;
        boolean z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r2;
        java.util.TreeMap $r4;

        r0 := @this: java.util.TreeMap$AscendingSubMap;
        r1 := @parameter0: java.lang.Object;
        z0 := @parameter1: boolean;
        $z1 = virtualinvoke r0.<java.util.TreeMap$AscendingSubMap: boolean inRange(java.lang.Object,boolean)>(r1, z0);
        if $z1 != 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("toKey out of range");
        throw $r2;

     label0:
        $r3 = new java.util.TreeMap$AscendingSubMap;
        $r4 = r0.<java.util.TreeMap$AscendingSubMap: java.util.TreeMap m>;
        $z2 = r0.<java.util.TreeMap$AscendingSubMap: boolean fromStart>;
        $r5 = r0.<java.util.TreeMap$AscendingSubMap: java.lang.Object lo>;
        $z3 = r0.<java.util.TreeMap$AscendingSubMap: boolean loInclusive>;
        specialinvoke $r3.<java.util.TreeMap$AscendingSubMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,boolean,boolean,java.lang.Object,boolean)>($r4, $z2, $r5, $z3, 0, r1, z0);
        return $r3;
    }

    public java.util.NavigableMap tailMap(java.lang.Object, boolean)
    {
        java.util.TreeMap$AscendingSubMap r0, $r3;
        java.lang.Object r1, $r5;
        boolean z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r2;
        java.util.TreeMap $r4;

        r0 := @this: java.util.TreeMap$AscendingSubMap;
        r1 := @parameter0: java.lang.Object;
        z0 := @parameter1: boolean;
        $z1 = virtualinvoke r0.<java.util.TreeMap$AscendingSubMap: boolean inRange(java.lang.Object,boolean)>(r1, z0);
        if $z1 != 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("fromKey out of range");
        throw $r2;

     label0:
        $r3 = new java.util.TreeMap$AscendingSubMap;
        $r4 = r0.<java.util.TreeMap$AscendingSubMap: java.util.TreeMap m>;
        $z2 = r0.<java.util.TreeMap$AscendingSubMap: boolean toEnd>;
        $r5 = r0.<java.util.TreeMap$AscendingSubMap: java.lang.Object hi>;
        $z3 = r0.<java.util.TreeMap$AscendingSubMap: boolean hiInclusive>;
        specialinvoke $r3.<java.util.TreeMap$AscendingSubMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,boolean,boolean,java.lang.Object,boolean)>($r4, 0, r1, z0, $z2, $r5, $z3);
        return $r3;
    }

    public java.util.NavigableMap descendingMap()
    {
        java.util.TreeMap$AscendingSubMap r0;
        java.util.NavigableMap r1, $r3;
        java.util.TreeMap$DescendingSubMap $r2;
        java.util.TreeMap $r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r5, $r6;

        r0 := @this: java.util.TreeMap$AscendingSubMap;
        r1 = r0.<java.util.TreeMap$AscendingSubMap: java.util.NavigableMap descendingMapView>;
        if r1 == null goto label0;

        $r3 = r1;
        goto label1;

     label0:
        $r2 = new java.util.TreeMap$DescendingSubMap;
        $r4 = r0.<java.util.TreeMap$AscendingSubMap: java.util.TreeMap m>;
        $z0 = r0.<java.util.TreeMap$AscendingSubMap: boolean fromStart>;
        $r5 = r0.<java.util.TreeMap$AscendingSubMap: java.lang.Object lo>;
        $z1 = r0.<java.util.TreeMap$AscendingSubMap: boolean loInclusive>;
        $z2 = r0.<java.util.TreeMap$AscendingSubMap: boolean toEnd>;
        $r6 = r0.<java.util.TreeMap$AscendingSubMap: java.lang.Object hi>;
        $z3 = r0.<java.util.TreeMap$AscendingSubMap: boolean hiInclusive>;
        specialinvoke $r2.<java.util.TreeMap$DescendingSubMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,boolean,boolean,java.lang.Object,boolean)>($r4, $z0, $r5, $z1, $z2, $r6, $z3);
        $r3 = $r2;
        r0.<java.util.TreeMap$AscendingSubMap: java.util.NavigableMap descendingMapView> = $r2;

     label1:
        return $r3;
    }

    java.util.Iterator keyIterator()
    {
        java.util.TreeMap$AscendingSubMap r0;
        java.util.TreeMap$NavigableSubMap$SubMapKeyIterator $r1;
        java.util.TreeMap$Entry $r2, $r3;

        r0 := @this: java.util.TreeMap$AscendingSubMap;
        $r1 = new java.util.TreeMap$NavigableSubMap$SubMapKeyIterator;
        $r2 = virtualinvoke r0.<java.util.TreeMap$AscendingSubMap: java.util.TreeMap$Entry absLowest()>();
        $r3 = virtualinvoke r0.<java.util.TreeMap$AscendingSubMap: java.util.TreeMap$Entry absHighFence()>();
        specialinvoke $r1.<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: void <init>(java.util.TreeMap$NavigableSubMap,java.util.TreeMap$Entry,java.util.TreeMap$Entry)>(r0, $r2, $r3);
        return $r1;
    }

    java.util.Iterator descendingKeyIterator()
    {
        java.util.TreeMap$AscendingSubMap r0;
        java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator $r1;
        java.util.TreeMap$Entry $r2, $r3;

        r0 := @this: java.util.TreeMap$AscendingSubMap;
        $r1 = new java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator;
        $r2 = virtualinvoke r0.<java.util.TreeMap$AscendingSubMap: java.util.TreeMap$Entry absHighest()>();
        $r3 = virtualinvoke r0.<java.util.TreeMap$AscendingSubMap: java.util.TreeMap$Entry absLowFence()>();
        specialinvoke $r1.<java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: void <init>(java.util.TreeMap$NavigableSubMap,java.util.TreeMap$Entry,java.util.TreeMap$Entry)>(r0, $r2, $r3);
        return $r1;
    }

    public java.util.Set entrySet()
    {
        java.util.TreeMap$AscendingSubMap r0;
        java.util.TreeMap$NavigableSubMap$EntrySetView r1, $r2;
        java.util.TreeMap$AscendingSubMap$AscendingEntrySetView r3;

        r0 := @this: java.util.TreeMap$AscendingSubMap;
        r1 = r0.<java.util.TreeMap$AscendingSubMap: java.util.TreeMap$NavigableSubMap$EntrySetView entrySetView>;
        if r1 == null goto label0;

        $r2 = r1;
        goto label1;

     label0:
        r3 = new java.util.TreeMap$AscendingSubMap$AscendingEntrySetView;
        $r2 = r3;
        specialinvoke r3.<java.util.TreeMap$AscendingSubMap$AscendingEntrySetView: void <init>(java.util.TreeMap$AscendingSubMap)>(r0);

     label1:
        return $r2;
    }

    java.util.TreeMap$Entry subLowest()
    {
        java.util.TreeMap$AscendingSubMap r0;
        java.util.TreeMap$Entry $r1;

        r0 := @this: java.util.TreeMap$AscendingSubMap;
        $r1 = virtualinvoke r0.<java.util.TreeMap$AscendingSubMap: java.util.TreeMap$Entry absLowest()>();
        return $r1;
    }

    java.util.TreeMap$Entry subHighest()
    {
        java.util.TreeMap$AscendingSubMap r0;
        java.util.TreeMap$Entry $r1;

        r0 := @this: java.util.TreeMap$AscendingSubMap;
        $r1 = virtualinvoke r0.<java.util.TreeMap$AscendingSubMap: java.util.TreeMap$Entry absHighest()>();
        return $r1;
    }

    java.util.TreeMap$Entry subCeiling(java.lang.Object)
    {
        java.util.TreeMap$AscendingSubMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Entry $r2;

        r0 := @this: java.util.TreeMap$AscendingSubMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap$AscendingSubMap: java.util.TreeMap$Entry absCeiling(java.lang.Object)>(r1);
        return $r2;
    }

    java.util.TreeMap$Entry subHigher(java.lang.Object)
    {
        java.util.TreeMap$AscendingSubMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Entry $r2;

        r0 := @this: java.util.TreeMap$AscendingSubMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap$AscendingSubMap: java.util.TreeMap$Entry absHigher(java.lang.Object)>(r1);
        return $r2;
    }

    java.util.TreeMap$Entry subFloor(java.lang.Object)
    {
        java.util.TreeMap$AscendingSubMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Entry $r2;

        r0 := @this: java.util.TreeMap$AscendingSubMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap$AscendingSubMap: java.util.TreeMap$Entry absFloor(java.lang.Object)>(r1);
        return $r2;
    }

    java.util.TreeMap$Entry subLower(java.lang.Object)
    {
        java.util.TreeMap$AscendingSubMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Entry $r2;

        r0 := @this: java.util.TreeMap$AscendingSubMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.util.TreeMap$AscendingSubMap: java.util.TreeMap$Entry absLower(java.lang.Object)>(r1);
        return $r2;
    }
}
