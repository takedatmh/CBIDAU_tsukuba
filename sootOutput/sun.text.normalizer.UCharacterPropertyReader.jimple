final class sun.text.normalizer.UCharacterPropertyReader extends java.lang.Object implements sun.text.normalizer.ICUBinary$Authenticate
{
    private static final int INDEX_SIZE_;
    private java.io.DataInputStream m_dataInputStream_;
    private int m_propertyOffset_;
    private int m_exceptionOffset_;
    private int m_caseOffset_;
    private int m_additionalOffset_;
    private int m_additionalVectorsOffset_;
    private int m_additionalColumnsCount_;
    private int m_reservedOffset_;
    private byte[] m_unicodeVersion_;
    private static final byte[] DATA_FORMAT_ID_;
    private static final byte[] DATA_FORMAT_VERSION_;

    public boolean isDataVersionAcceptable(byte[])
    {
        sun.text.normalizer.UCharacterPropertyReader r0;
        byte[] r1, $r2, $r3, $r4;
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        boolean $z0;

        r0 := @this: sun.text.normalizer.UCharacterPropertyReader;
        r1 := @parameter0: byte[];
        $b0 = r1[0];
        $r2 = <sun.text.normalizer.UCharacterPropertyReader: byte[] DATA_FORMAT_VERSION_>;
        $b1 = $r2[0];
        if $b0 != $b1 goto label0;

        $b2 = r1[2];
        $r3 = <sun.text.normalizer.UCharacterPropertyReader: byte[] DATA_FORMAT_VERSION_>;
        $b3 = $r3[2];
        if $b2 != $b3 goto label0;

        $b4 = r1[3];
        $r4 = <sun.text.normalizer.UCharacterPropertyReader: byte[] DATA_FORMAT_VERSION_>;
        $b5 = $r4[3];
        if $b4 != $b5 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    protected void <init>(java.io.InputStream) throws java.io.IOException
    {
        sun.text.normalizer.UCharacterPropertyReader r0;
        java.io.InputStream r1;
        byte[] $r2, $r3;
        java.io.DataInputStream $r4;

        r0 := @this: sun.text.normalizer.UCharacterPropertyReader;
        r1 := @parameter0: java.io.InputStream;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = <sun.text.normalizer.UCharacterPropertyReader: byte[] DATA_FORMAT_ID_>;
        $r3 = staticinvoke <sun.text.normalizer.ICUBinary: byte[] readHeader(java.io.InputStream,byte[],sun.text.normalizer.ICUBinary$Authenticate)>(r1, $r2, r0);
        r0.<sun.text.normalizer.UCharacterPropertyReader: byte[] m_unicodeVersion_> = $r3;
        $r4 = new java.io.DataInputStream;
        specialinvoke $r4.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r1);
        r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_> = $r4;
        return;
    }

    protected void read(sun.text.normalizer.UCharacterProperty) throws java.io.IOException
    {
        sun.text.normalizer.UCharacterPropertyReader r0;
        sun.text.normalizer.UCharacterProperty r1;
        byte b0, $b46, $b47, $b48, $b49;
        int i1, i2, $i3, i4, $i5, i6, $i7, i8, $i9, i10, $i11, i12, $i13, i14, $i15, i16, i18, $i19, i20, $i21, i22, $i23, $i25, $i26, $i27, $i29, $i30, i31, $i32, $i34, $i35, $i36, i37, $i38, $i40, $i41, $i42, i43, $i44, $i45;
        java.io.DataInputStream $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r19, $r22, $r23;
        sun.text.normalizer.CharTrie $r13, $r18;
        int[] $r20, $r21;
        byte[] $r24, $r25, $r26, $r27;
        sun.text.normalizer.VersionInfo $r28;

        r0 := @this: sun.text.normalizer.UCharacterPropertyReader;
        r1 := @parameter0: sun.text.normalizer.UCharacterProperty;
        b0 = 16;
        $r2 = r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_>;
        $i3 = virtualinvoke $r2.<java.io.DataInputStream: int readInt()>();
        r0.<sun.text.normalizer.UCharacterPropertyReader: int m_propertyOffset_> = $i3;
        i4 = b0 + -1;
        $r3 = r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_>;
        $i5 = virtualinvoke $r3.<java.io.DataInputStream: int readInt()>();
        r0.<sun.text.normalizer.UCharacterPropertyReader: int m_exceptionOffset_> = $i5;
        i6 = i4 + -1;
        $r4 = r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_>;
        $i7 = virtualinvoke $r4.<java.io.DataInputStream: int readInt()>();
        r0.<sun.text.normalizer.UCharacterPropertyReader: int m_caseOffset_> = $i7;
        i8 = i6 + -1;
        $r5 = r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_>;
        $i9 = virtualinvoke $r5.<java.io.DataInputStream: int readInt()>();
        r0.<sun.text.normalizer.UCharacterPropertyReader: int m_additionalOffset_> = $i9;
        i10 = i8 + -1;
        $r6 = r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_>;
        $i11 = virtualinvoke $r6.<java.io.DataInputStream: int readInt()>();
        r0.<sun.text.normalizer.UCharacterPropertyReader: int m_additionalVectorsOffset_> = $i11;
        i12 = i10 + -1;
        $r7 = r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_>;
        $i13 = virtualinvoke $r7.<java.io.DataInputStream: int readInt()>();
        r0.<sun.text.normalizer.UCharacterPropertyReader: int m_additionalColumnsCount_> = $i13;
        i14 = i12 + -1;
        $r8 = r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_>;
        $i15 = virtualinvoke $r8.<java.io.DataInputStream: int readInt()>();
        r0.<sun.text.normalizer.UCharacterPropertyReader: int m_reservedOffset_> = $i15;
        i16 = i14 + -1;
        $r9 = r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_>;
        virtualinvoke $r9.<java.io.DataInputStream: int skipBytes(int)>(12);
        i18 = i16 + -3;
        $r10 = r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_>;
        $i19 = virtualinvoke $r10.<java.io.DataInputStream: int readInt()>();
        r1.<sun.text.normalizer.UCharacterProperty: int m_maxBlockScriptValue_> = $i19;
        i20 = i18 + -1;
        $r11 = r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_>;
        $i21 = virtualinvoke $r11.<java.io.DataInputStream: int readInt()>();
        r1.<sun.text.normalizer.UCharacterProperty: int m_maxJTGValue_> = $i21;
        i22 = i20 + -1;
        $r12 = r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_>;
        $i23 = i22 << 2;
        virtualinvoke $r12.<java.io.DataInputStream: int skipBytes(int)>($i23);
        $r13 = new sun.text.normalizer.CharTrie;
        $r14 = r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_>;
        specialinvoke $r13.<sun.text.normalizer.CharTrie: void <init>(java.io.InputStream,sun.text.normalizer.Trie$DataManipulate)>($r14, null);
        r1.<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.CharTrie m_trie_> = $r13;
        $i25 = r0.<sun.text.normalizer.UCharacterPropertyReader: int m_exceptionOffset_>;
        $i26 = r0.<sun.text.normalizer.UCharacterPropertyReader: int m_propertyOffset_>;
        i1 = $i25 - $i26;
        $r15 = r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_>;
        $i27 = i1 * 4;
        virtualinvoke $r15.<java.io.DataInputStream: int skipBytes(int)>($i27);
        $i29 = r0.<sun.text.normalizer.UCharacterPropertyReader: int m_caseOffset_>;
        $i30 = r0.<sun.text.normalizer.UCharacterPropertyReader: int m_exceptionOffset_>;
        i31 = $i29 - $i30;
        $r16 = r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_>;
        $i32 = i31 * 4;
        virtualinvoke $r16.<java.io.DataInputStream: int skipBytes(int)>($i32);
        $i34 = r0.<sun.text.normalizer.UCharacterPropertyReader: int m_additionalOffset_>;
        $i35 = r0.<sun.text.normalizer.UCharacterPropertyReader: int m_caseOffset_>;
        $i36 = $i34 - $i35;
        i37 = $i36 << 1;
        $r17 = r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_>;
        $i38 = i37 * 2;
        virtualinvoke $r17.<java.io.DataInputStream: int skipBytes(int)>($i38);
        $i40 = r0.<sun.text.normalizer.UCharacterPropertyReader: int m_additionalColumnsCount_>;
        if $i40 <= 0 goto label1;

        $r18 = new sun.text.normalizer.CharTrie;
        $r19 = r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_>;
        specialinvoke $r18.<sun.text.normalizer.CharTrie: void <init>(java.io.InputStream,sun.text.normalizer.Trie$DataManipulate)>($r19, null);
        r1.<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.CharTrie m_additionalTrie_> = $r18;
        $i41 = r0.<sun.text.normalizer.UCharacterPropertyReader: int m_reservedOffset_>;
        $i42 = r0.<sun.text.normalizer.UCharacterPropertyReader: int m_additionalVectorsOffset_>;
        i43 = $i41 - $i42;
        $r20 = newarray (int)[i43];
        r1.<sun.text.normalizer.UCharacterProperty: int[] m_additionalVectors_> = $r20;
        i2 = 0;

     label0:
        if i2 >= i43 goto label1;

        $r21 = r1.<sun.text.normalizer.UCharacterProperty: int[] m_additionalVectors_>;
        $r22 = r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_>;
        $i44 = virtualinvoke $r22.<java.io.DataInputStream: int readInt()>();
        $r21[i2] = $i44;
        i2 = i2 + 1;
        goto label0;

     label1:
        $r23 = r0.<sun.text.normalizer.UCharacterPropertyReader: java.io.DataInputStream m_dataInputStream_>;
        virtualinvoke $r23.<java.io.DataInputStream: void close()>();
        $i45 = r0.<sun.text.normalizer.UCharacterPropertyReader: int m_additionalColumnsCount_>;
        r1.<sun.text.normalizer.UCharacterProperty: int m_additionalColumnsCount_> = $i45;
        $r24 = r0.<sun.text.normalizer.UCharacterPropertyReader: byte[] m_unicodeVersion_>;
        $b46 = $r24[0];
        $r25 = r0.<sun.text.normalizer.UCharacterPropertyReader: byte[] m_unicodeVersion_>;
        $b47 = $r25[1];
        $r26 = r0.<sun.text.normalizer.UCharacterPropertyReader: byte[] m_unicodeVersion_>;
        $b48 = $r26[2];
        $r27 = r0.<sun.text.normalizer.UCharacterPropertyReader: byte[] m_unicodeVersion_>;
        $b49 = $r27[3];
        $r28 = staticinvoke <sun.text.normalizer.VersionInfo: sun.text.normalizer.VersionInfo getInstance(int,int,int,int)>($b46, $b47, $b48, $b49);
        r1.<sun.text.normalizer.UCharacterProperty: sun.text.normalizer.VersionInfo m_unicodeVersion_> = $r28;
        return;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1;

        $r0 = newarray (byte)[4];
        $r0[0] = 85;
        $r0[1] = 80;
        $r0[2] = 114;
        $r0[3] = 111;
        <sun.text.normalizer.UCharacterPropertyReader: byte[] DATA_FORMAT_ID_> = $r0;
        $r1 = newarray (byte)[4];
        $r1[0] = 5;
        $r1[1] = 0;
        $r1[2] = 5;
        $r1[3] = 2;
        <sun.text.normalizer.UCharacterPropertyReader: byte[] DATA_FORMAT_VERSION_> = $r1;
        return;
    }
}
