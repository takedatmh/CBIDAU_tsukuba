public class java.security.spec.ECFieldF2m extends java.lang.Object implements java.security.spec.ECField
{
    private int m;
    private int[] ks;
    private java.math.BigInteger rp;

    public void <init>(int)
    {
        java.security.spec.ECFieldF2m r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.security.spec.ECFieldF2m;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if i0 > 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("m is not positive");
        throw $r1;

     label0:
        r0.<java.security.spec.ECFieldF2m: int m> = i0;
        r0.<java.security.spec.ECFieldF2m: int[] ks> = null;
        r0.<java.security.spec.ECFieldF2m: java.math.BigInteger rp> = null;
        return;
    }

    public void <init>(int, java.math.BigInteger)
    {
        java.security.spec.ECFieldF2m r0;
        int i0, i1, i2, i3, $i4, $i5;
        java.math.BigInteger r1, r2, $r4, $r5, $r6, $r8, $r9;
        java.lang.IllegalArgumentException $r3, $r7;
        boolean $z0, $z1;
        int[] $r10, $r11, $r12;

        r0 := @this: java.security.spec.ECFieldF2m;
        i0 := @parameter0: int;
        r1 := @parameter1: java.math.BigInteger;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.security.spec.ECFieldF2m: int m> = i0;
        r0.<java.security.spec.ECFieldF2m: java.math.BigInteger rp> = r1;
        if i0 > 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("m is not positive");
        throw $r3;

     label0:
        $r4 = r0.<java.security.spec.ECFieldF2m: java.math.BigInteger rp>;
        i1 = virtualinvoke $r4.<java.math.BigInteger: int bitCount()>();
        $r5 = r0.<java.security.spec.ECFieldF2m: java.math.BigInteger rp>;
        $z0 = virtualinvoke $r5.<java.math.BigInteger: boolean testBit(int)>(0);
        if $z0 == 0 goto label1;

        $r6 = r0.<java.security.spec.ECFieldF2m: java.math.BigInteger rp>;
        $z1 = virtualinvoke $r6.<java.math.BigInteger: boolean testBit(int)>(i0);
        if $z1 == 0 goto label1;

        if i1 == 3 goto label2;

        if i1 == 5 goto label2;

     label1:
        $r7 = new java.lang.IllegalArgumentException;
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("rp does not represent a valid reduction polynomial");
        throw $r7;

     label2:
        $r8 = r0.<java.security.spec.ECFieldF2m: java.math.BigInteger rp>;
        $r9 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger clearBit(int)>(0);
        r2 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger clearBit(int)>(i0);
        $i4 = i1 - 2;
        $r10 = newarray (int)[$i4];
        r0.<java.security.spec.ECFieldF2m: int[] ks> = $r10;
        $r11 = r0.<java.security.spec.ECFieldF2m: int[] ks>;
        $i5 = lengthof $r11;
        i2 = $i5 - 1;

     label3:
        if i2 < 0 goto label4;

        i3 = virtualinvoke r2.<java.math.BigInteger: int getLowestSetBit()>();
        $r12 = r0.<java.security.spec.ECFieldF2m: int[] ks>;
        $r12[i2] = i3;
        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger clearBit(int)>(i3);
        i2 = i2 + -1;
        goto label3;

     label4:
        return;
    }

    public void <init>(int, int[])
    {
        java.security.spec.ECFieldF2m r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13;
        int[] r1, $r3, $r5, $r6, $r8, $r9, $r10, $r17, $r18, $r23, $r25;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r4, $r7, $r11, $r19;
        java.lang.StringBuilder $r12, $r13, $r14, $r15;
        java.lang.String $r16;
        java.math.BigInteger $r20, $r21, $r22, $r24, $r26;

        r0 := @this: java.security.spec.ECFieldF2m;
        i0 := @parameter0: int;
        r1 := @parameter1: int[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.security.spec.ECFieldF2m: int m> = i0;
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (int[]) $r2;
        r0.<java.security.spec.ECFieldF2m: int[] ks> = $r3;
        if i0 > 0 goto label0;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("m is not positive");
        throw $r4;

     label0:
        $r5 = r0.<java.security.spec.ECFieldF2m: int[] ks>;
        $i2 = lengthof $r5;
        if $i2 == 1 goto label1;

        $r6 = r0.<java.security.spec.ECFieldF2m: int[] ks>;
        $i3 = lengthof $r6;
        if $i3 == 3 goto label1;

        $r7 = new java.lang.IllegalArgumentException;
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("length of ks is neither 1 nor 3");
        throw $r7;

     label1:
        i1 = 0;

     label2:
        $r8 = r0.<java.security.spec.ECFieldF2m: int[] ks>;
        $i4 = lengthof $r8;
        if i1 >= $i4 goto label6;

        $r9 = r0.<java.security.spec.ECFieldF2m: int[] ks>;
        $i5 = $r9[i1];
        if $i5 < 1 goto label3;

        $r10 = r0.<java.security.spec.ECFieldF2m: int[] ks>;
        $i6 = $r10[i1];
        $i7 = i0 - 1;
        if $i6 <= $i7 goto label4;

     label3:
        $r11 = new java.lang.IllegalArgumentException;
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ks[");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is out of range");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);
        throw $r11;

     label4:
        if i1 == 0 goto label5;

        $r17 = r0.<java.security.spec.ECFieldF2m: int[] ks>;
        $i8 = $r17[i1];
        $r18 = r0.<java.security.spec.ECFieldF2m: int[] ks>;
        $i9 = i1 - 1;
        $i10 = $r18[$i9];
        if $i8 < $i10 goto label5;

        $r19 = new java.lang.IllegalArgumentException;
        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("values in ks are not in descending order");
        throw $r19;

     label5:
        i1 = i1 + 1;
        goto label2;

     label6:
        $r20 = <java.math.BigInteger: java.math.BigInteger ONE>;
        r0.<java.security.spec.ECFieldF2m: java.math.BigInteger rp> = $r20;
        $r21 = r0.<java.security.spec.ECFieldF2m: java.math.BigInteger rp>;
        $r22 = virtualinvoke $r21.<java.math.BigInteger: java.math.BigInteger setBit(int)>(i0);
        r0.<java.security.spec.ECFieldF2m: java.math.BigInteger rp> = $r22;
        i11 = 0;

     label7:
        $r23 = r0.<java.security.spec.ECFieldF2m: int[] ks>;
        $i12 = lengthof $r23;
        if i11 >= $i12 goto label8;

        $r24 = r0.<java.security.spec.ECFieldF2m: java.math.BigInteger rp>;
        $r25 = r0.<java.security.spec.ECFieldF2m: int[] ks>;
        $i13 = $r25[i11];
        $r26 = virtualinvoke $r24.<java.math.BigInteger: java.math.BigInteger setBit(int)>($i13);
        r0.<java.security.spec.ECFieldF2m: java.math.BigInteger rp> = $r26;
        i11 = i11 + 1;
        goto label7;

     label8:
        return;
    }

    public int getFieldSize()
    {
        java.security.spec.ECFieldF2m r0;
        int $i0;

        r0 := @this: java.security.spec.ECFieldF2m;
        $i0 = r0.<java.security.spec.ECFieldF2m: int m>;
        return $i0;
    }

    public int getM()
    {
        java.security.spec.ECFieldF2m r0;
        int $i0;

        r0 := @this: java.security.spec.ECFieldF2m;
        $i0 = r0.<java.security.spec.ECFieldF2m: int m>;
        return $i0;
    }

    public java.math.BigInteger getReductionPolynomial()
    {
        java.security.spec.ECFieldF2m r0;
        java.math.BigInteger $r1;

        r0 := @this: java.security.spec.ECFieldF2m;
        $r1 = r0.<java.security.spec.ECFieldF2m: java.math.BigInteger rp>;
        return $r1;
    }

    public int[] getMidTermsOfReductionPolynomial()
    {
        java.security.spec.ECFieldF2m r0;
        int[] $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: java.security.spec.ECFieldF2m;
        $r1 = r0.<java.security.spec.ECFieldF2m: int[] ks>;
        if $r1 != null goto label0;

        return null;

     label0:
        $r2 = r0.<java.security.spec.ECFieldF2m: int[] ks>;
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();
        $r4 = (int[]) $r3;
        return $r4;
    }

    public boolean equals(java.lang.Object)
    {
        java.security.spec.ECFieldF2m r0, $r2, $r4;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1;
        int[] $r3, $r5;

        r0 := @this: java.security.spec.ECFieldF2m;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof java.security.spec.ECFieldF2m;
        if $z0 == 0 goto label3;

        $i0 = r0.<java.security.spec.ECFieldF2m: int m>;
        $r2 = (java.security.spec.ECFieldF2m) r1;
        $i1 = $r2.<java.security.spec.ECFieldF2m: int m>;
        if $i0 != $i1 goto label1;

        $r3 = r0.<java.security.spec.ECFieldF2m: int[] ks>;
        $r4 = (java.security.spec.ECFieldF2m) r1;
        $r5 = $r4.<java.security.spec.ECFieldF2m: int[] ks>;
        $z1 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r3, $r5);
        if $z1 == 0 goto label1;

        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 0;
    }

    public int hashCode()
    {
        java.security.spec.ECFieldF2m r0;
        int i0, $i1, $i3, i4;
        java.math.BigInteger $r1, $r2;

        r0 := @this: java.security.spec.ECFieldF2m;
        $i1 = r0.<java.security.spec.ECFieldF2m: int m>;
        i0 = $i1 << 5;
        $r1 = r0.<java.security.spec.ECFieldF2m: java.math.BigInteger rp>;
        if $r1 != null goto label0;

        $i3 = 0;
        goto label1;

     label0:
        $r2 = r0.<java.security.spec.ECFieldF2m: java.math.BigInteger rp>;
        $i3 = virtualinvoke $r2.<java.math.BigInteger: int hashCode()>();

     label1:
        i4 = i0 + $i3;
        return i4;
    }
}
