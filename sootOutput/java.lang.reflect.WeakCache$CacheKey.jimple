final class java.lang.reflect.WeakCache$CacheKey extends java.lang.ref.WeakReference
{
    private static final java.lang.Object NULL_KEY;
    private final int hash;

    static java.lang.Object valueOf(java.lang.Object, java.lang.ref.ReferenceQueue)
    {
        java.lang.Object r0, $r2;
        java.lang.ref.ReferenceQueue r1;
        java.lang.reflect.WeakCache$CacheKey r3;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.ref.ReferenceQueue;
        if r0 != null goto label0;

        $r2 = <java.lang.reflect.WeakCache$CacheKey: java.lang.Object NULL_KEY>;
        goto label1;

     label0:
        r3 = new java.lang.reflect.WeakCache$CacheKey;
        $r2 = r3;
        specialinvoke r3.<java.lang.reflect.WeakCache$CacheKey: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r0, r1);

     label1:
        return $r2;
    }

    private void <init>(java.lang.Object, java.lang.ref.ReferenceQueue)
    {
        java.lang.reflect.WeakCache$CacheKey r0;
        java.lang.Object r1;
        java.lang.ref.ReferenceQueue r2;
        int $i0;

        r0 := @this: java.lang.reflect.WeakCache$CacheKey;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.ref.ReferenceQueue;
        specialinvoke r0.<java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r1, r2);
        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1);
        r0.<java.lang.reflect.WeakCache$CacheKey: int hash> = $i0;
        return;
    }

    public int hashCode()
    {
        java.lang.reflect.WeakCache$CacheKey r0;
        int $i0;

        r0 := @this: java.lang.reflect.WeakCache$CacheKey;
        $i0 = r0.<java.lang.reflect.WeakCache$CacheKey: int hash>;
        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.reflect.WeakCache$CacheKey r0, $r6;
        java.lang.Object r1, r2, $r5, $r7;
        java.lang.Class $r3, $r4;
        boolean $z0;

        r0 := @this: java.lang.reflect.WeakCache$CacheKey;
        r1 := @parameter0: java.lang.Object;
        if r1 == r0 goto label0;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        if $r3 != $r4 goto label1;

        $r5 = virtualinvoke r0.<java.lang.reflect.WeakCache$CacheKey: java.lang.Object get()>();
        r2 = $r5;
        if $r5 == null goto label1;

        $r6 = (java.lang.reflect.WeakCache$CacheKey) r1;
        $r7 = virtualinvoke $r6.<java.lang.reflect.WeakCache$CacheKey: java.lang.Object get()>();
        if r2 != $r7 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void expungeFrom(java.util.concurrent.ConcurrentMap, java.util.concurrent.ConcurrentMap)
    {
        java.lang.reflect.WeakCache$CacheKey r0;
        java.util.concurrent.ConcurrentMap r1, r2, r3;
        java.util.Iterator r4;
        java.lang.Object r5, $r6;
        java.util.Collection $r7;
        boolean $z0;

        r0 := @this: java.lang.reflect.WeakCache$CacheKey;
        r1 := @parameter0: java.util.concurrent.ConcurrentMap;
        r2 := @parameter1: java.util.concurrent.ConcurrentMap;
        $r6 = interfaceinvoke r1.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(r0);
        r3 = (java.util.concurrent.ConcurrentMap) $r6;
        if r3 == null goto label1;

        $r7 = interfaceinvoke r3.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
        r4 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        interfaceinvoke r2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(r5);
        goto label0;

     label1:
        return;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;
        specialinvoke $r0.<java.lang.Object: void <init>()>();
        <java.lang.reflect.WeakCache$CacheKey: java.lang.Object NULL_KEY> = $r0;
        return;
    }
}
