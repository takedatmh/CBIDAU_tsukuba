public abstract class sun.security.krb5.internal.crypto.EType extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final boolean ALLOW_WEAK_CRYPTO;
    private static final int[] BUILTIN_ETYPES;
    private static final int[] BUILTIN_ETYPES_NOAES256;

    public void <init>()
    {
        sun.security.krb5.internal.crypto.EType r0;

        r0 := @this: sun.security.krb5.internal.crypto.EType;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static sun.security.krb5.internal.crypto.EType getInstance(int) throws sun.security.krb5.internal.KdcErrException
    {
        int i0;
        null_type n0, n1;
        java.lang.String r0, r3, $r12, $r22;
        sun.security.krb5.internal.crypto.NullEType $r1;
        sun.security.krb5.internal.crypto.EType r2;
        sun.security.krb5.internal.crypto.DesCbcCrcEType $r4;
        sun.security.krb5.internal.crypto.DesCbcMd5EType $r5;
        sun.security.krb5.internal.crypto.Des3CbcHmacSha1KdEType $r6;
        sun.security.krb5.internal.crypto.Aes128CtsHmacSha1EType $r7;
        sun.security.krb5.internal.crypto.Aes256CtsHmacSha1EType $r8;
        sun.security.krb5.internal.crypto.ArcFourHmacEType $r9;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r15, $r16, $r19, $r20, $r21;
        sun.security.krb5.internal.KdcErrException $r17;
        boolean $z0;
        java.io.PrintStream $r18;

        i0 := @parameter0: int;
        n0 = null;
        n1 = null;
        tableswitch(i0)
        {
            case 0: goto label0;
            case 1: goto label1;
            case 2: goto label7;
            case 3: goto label2;
            case 4: goto label7;
            case 5: goto label7;
            case 6: goto label7;
            case 7: goto label7;
            case 8: goto label7;
            case 9: goto label7;
            case 10: goto label7;
            case 11: goto label7;
            case 12: goto label7;
            case 13: goto label7;
            case 14: goto label7;
            case 15: goto label7;
            case 16: goto label3;
            case 17: goto label4;
            case 18: goto label5;
            case 19: goto label7;
            case 20: goto label7;
            case 21: goto label7;
            case 22: goto label7;
            case 23: goto label6;
            default: goto label7;
        };

     label0:
        $r1 = new sun.security.krb5.internal.crypto.NullEType;
        specialinvoke $r1.<sun.security.krb5.internal.crypto.NullEType: void <init>()>();
        r2 = $r1;
        r3 = "sun.security.krb5.internal.crypto.NullEType";
        goto label8;

     label1:
        $r4 = new sun.security.krb5.internal.crypto.DesCbcCrcEType;
        specialinvoke $r4.<sun.security.krb5.internal.crypto.DesCbcCrcEType: void <init>()>();
        r2 = $r4;
        r3 = "sun.security.krb5.internal.crypto.DesCbcCrcEType";
        goto label8;

     label2:
        $r5 = new sun.security.krb5.internal.crypto.DesCbcMd5EType;
        specialinvoke $r5.<sun.security.krb5.internal.crypto.DesCbcMd5EType: void <init>()>();
        r2 = $r5;
        r3 = "sun.security.krb5.internal.crypto.DesCbcMd5EType";
        goto label8;

     label3:
        $r6 = new sun.security.krb5.internal.crypto.Des3CbcHmacSha1KdEType;
        specialinvoke $r6.<sun.security.krb5.internal.crypto.Des3CbcHmacSha1KdEType: void <init>()>();
        r2 = $r6;
        r3 = "sun.security.krb5.internal.crypto.Des3CbcHmacSha1KdEType";
        goto label8;

     label4:
        $r7 = new sun.security.krb5.internal.crypto.Aes128CtsHmacSha1EType;
        specialinvoke $r7.<sun.security.krb5.internal.crypto.Aes128CtsHmacSha1EType: void <init>()>();
        r2 = $r7;
        r3 = "sun.security.krb5.internal.crypto.Aes128CtsHmacSha1EType";
        goto label8;

     label5:
        $r8 = new sun.security.krb5.internal.crypto.Aes256CtsHmacSha1EType;
        specialinvoke $r8.<sun.security.krb5.internal.crypto.Aes256CtsHmacSha1EType: void <init>()>();
        r2 = $r8;
        r3 = "sun.security.krb5.internal.crypto.Aes256CtsHmacSha1EType";
        goto label8;

     label6:
        $r9 = new sun.security.krb5.internal.crypto.ArcFourHmacEType;
        specialinvoke $r9.<sun.security.krb5.internal.crypto.ArcFourHmacEType: void <init>()>();
        r2 = $r9;
        r3 = "sun.security.krb5.internal.crypto.ArcFourHmacEType";
        goto label8;

     label7:
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("encryption type = ");
        $r12 = staticinvoke <sun.security.krb5.internal.crypto.EType: java.lang.String toString(int)>(i0);
        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        r0 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        $r17 = new sun.security.krb5.internal.KdcErrException;
        specialinvoke $r17.<sun.security.krb5.internal.KdcErrException: void <init>(int,java.lang.String)>(14, r0);
        throw $r17;

     label8:
        $z0 = <sun.security.krb5.internal.crypto.EType: boolean DEBUG>;
        if $z0 == 0 goto label9;

        $r18 = <java.lang.System: java.io.PrintStream out>;
        $r19 = new java.lang.StringBuilder;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">>> EType: ");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r22);

     label9:
        return r2;
    }

    public abstract int eType();

    public abstract int minimumPadSize();

    public abstract int confounderSize();

    public abstract int checksumType();

    public abstract int checksumSize();

    public abstract int blockSize();

    public abstract int keyType();

    public abstract int keySize();

    public abstract byte[] encrypt(byte[], byte[], int) throws sun.security.krb5.KrbCryptoException;

    public abstract byte[] encrypt(byte[], byte[], byte[], int) throws sun.security.krb5.KrbCryptoException;

    public abstract byte[] decrypt(byte[], byte[], int) throws sun.security.krb5.internal.KrbApErrException, sun.security.krb5.KrbCryptoException;

    public abstract byte[] decrypt(byte[], byte[], byte[], int) throws sun.security.krb5.internal.KrbApErrException, sun.security.krb5.KrbCryptoException;

    public int dataSize(byte[])
    {
        sun.security.krb5.internal.crypto.EType r0;
        byte[] r1;
        int $i0, $i1, $i2;

        r0 := @this: sun.security.krb5.internal.crypto.EType;
        r1 := @parameter0: byte[];
        $i0 = lengthof r1;
        $i1 = virtualinvoke r0.<sun.security.krb5.internal.crypto.EType: int startOfData()>();
        $i2 = $i0 - $i1;
        return $i2;
    }

    public int padSize(byte[])
    {
        sun.security.krb5.internal.crypto.EType r0;
        byte[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: sun.security.krb5.internal.crypto.EType;
        r1 := @parameter0: byte[];
        $i0 = lengthof r1;
        $i1 = virtualinvoke r0.<sun.security.krb5.internal.crypto.EType: int confounderSize()>();
        $i2 = $i0 - $i1;
        $i3 = virtualinvoke r0.<sun.security.krb5.internal.crypto.EType: int checksumSize()>();
        $i4 = $i2 - $i3;
        $i5 = virtualinvoke r0.<sun.security.krb5.internal.crypto.EType: int dataSize(byte[])>(r1);
        $i6 = $i4 - $i5;
        return $i6;
    }

    public int startOfChecksum()
    {
        sun.security.krb5.internal.crypto.EType r0;
        int $i0;

        r0 := @this: sun.security.krb5.internal.crypto.EType;
        $i0 = virtualinvoke r0.<sun.security.krb5.internal.crypto.EType: int confounderSize()>();
        return $i0;
    }

    public int startOfData()
    {
        sun.security.krb5.internal.crypto.EType r0;
        int $i0, $i1, $i2;

        r0 := @this: sun.security.krb5.internal.crypto.EType;
        $i0 = virtualinvoke r0.<sun.security.krb5.internal.crypto.EType: int confounderSize()>();
        $i1 = virtualinvoke r0.<sun.security.krb5.internal.crypto.EType: int checksumSize()>();
        $i2 = $i0 + $i1;
        return $i2;
    }

    public int startOfPad(byte[])
    {
        sun.security.krb5.internal.crypto.EType r0;
        byte[] r1;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: sun.security.krb5.internal.crypto.EType;
        r1 := @parameter0: byte[];
        $i0 = virtualinvoke r0.<sun.security.krb5.internal.crypto.EType: int confounderSize()>();
        $i1 = virtualinvoke r0.<sun.security.krb5.internal.crypto.EType: int checksumSize()>();
        $i2 = $i0 + $i1;
        $i3 = virtualinvoke r0.<sun.security.krb5.internal.crypto.EType: int dataSize(byte[])>(r1);
        $i4 = $i2 + $i3;
        return $i4;
    }

    public byte[] decryptedData(byte[])
    {
        sun.security.krb5.internal.crypto.EType r0;
        byte[] r1, r2;
        int i0, $i1;

        r0 := @this: sun.security.krb5.internal.crypto.EType;
        r1 := @parameter0: byte[];
        i0 = virtualinvoke r0.<sun.security.krb5.internal.crypto.EType: int dataSize(byte[])>(r1);
        r2 = newarray (byte)[i0];
        $i1 = virtualinvoke r0.<sun.security.krb5.internal.crypto.EType: int startOfData()>();
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i1, r2, 0, i0);
        return r2;
    }

    public static int[] getBuiltInDefaults()
    {
        int i0, $i1, $i2;
        java.lang.Exception r0, $r1;
        int[] r2, $r3;
        boolean $z0;

        i0 = 0;

     label0:
        i0 = staticinvoke <javax.crypto.Cipher: int getMaxAllowedKeyLength(java.lang.String)>("AES");

     label1:
        goto label3;

     label2:
        $r1 := @caughtexception;
        r0 = $r1;

     label3:
        if i0 >= 256 goto label4;

        r2 = <sun.security.krb5.internal.crypto.EType: int[] BUILTIN_ETYPES_NOAES256>;
        goto label5;

     label4:
        r2 = <sun.security.krb5.internal.crypto.EType: int[] BUILTIN_ETYPES>;

     label5:
        $z0 = <sun.security.krb5.internal.crypto.EType: boolean ALLOW_WEAK_CRYPTO>;
        if $z0 != 0 goto label6;

        $i1 = lengthof r2;
        $i2 = $i1 - 2;
        $r3 = staticinvoke <java.util.Arrays: int[] copyOfRange(int[],int,int)>(r2, 0, $i2);
        return $r3;

     label6:
        return r2;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public static int[] getDefaults(java.lang.String)
    {
        java.lang.String r0, $r9, $r11;
        sun.security.krb5.Config $r1;
        sun.security.krb5.KrbException r2, $r4;
        int[] $r3, $r13;
        boolean $z0;
        java.io.PrintStream $r5, $r12;
        java.lang.StringBuilder $r6, $r7, $r8, $r10;

        r0 := @parameter0: java.lang.String;

     label0:
        $r1 = staticinvoke <sun.security.krb5.Config: sun.security.krb5.Config getInstance()>();
        $r3 = virtualinvoke $r1.<sun.security.krb5.Config: int[] defaultEtype(java.lang.String)>(r0);

     label1:
        return $r3;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        $z0 = <sun.security.krb5.internal.crypto.EType: boolean DEBUG>;
        if $z0 == 0 goto label3;

        $r5 = <java.lang.System: java.io.PrintStream out>;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while getting ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r9 = virtualinvoke r2.<sun.security.krb5.KrbException: java.lang.String getMessage()>();
        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r11);
        $r12 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("Using default builtin etypes");

     label3:
        $r13 = staticinvoke <sun.security.krb5.internal.crypto.EType: int[] getBuiltInDefaults()>();
        return $r13;

        catch sun.security.krb5.KrbException from label0 to label1 with label2;
    }

    public static int[] getDefaults(java.lang.String, sun.security.krb5.EncryptionKey[]) throws sun.security.krb5.KrbException
    {
        java.lang.String r0, $r9, $r15, $r23, $r25;
        sun.security.krb5.EncryptionKey[] r1;
        int[] r2, r26;
        java.lang.StringBuilder $r3, $r7, $r8, $r19, $r20, $r21, $r22, $r24;
        java.util.ArrayList r4, $r10;
        int i0, i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, i9, $i10;
        java.lang.StringBuffer r5, $r13;
        sun.security.krb5.KrbException $r6, $r18;
        sun.security.krb5.EncryptionKey $r11, $r14;
        java.lang.Integer $r12, $r28;
        java.lang.Object $r27;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: sun.security.krb5.EncryptionKey[];
        r2 = staticinvoke <sun.security.krb5.internal.crypto.EType: int[] getDefaults(java.lang.String)>(r0);
        if r2 != null goto label0;

        $r6 = new sun.security.krb5.KrbException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No supported encryption types listed in ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<sun.security.krb5.KrbException: void <init>(java.lang.String)>($r9);
        throw $r6;

     label0:
        $r10 = new java.util.ArrayList;
        $i2 = lengthof r2;
        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>($i2);
        r4 = $r10;
        i0 = 0;

     label1:
        $i3 = lengthof r2;
        if i0 >= $i3 goto label3;

        $i4 = r2[i0];
        $r11 = staticinvoke <sun.security.krb5.EncryptionKey: sun.security.krb5.EncryptionKey findKey(int,sun.security.krb5.EncryptionKey[])>($i4, r1);
        if $r11 == null goto label2;

        $i5 = r2[i0];
        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);
        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r12);

     label2:
        i0 = i0 + 1;
        goto label1;

     label3:
        i6 = interfaceinvoke r4.<java.util.List: int size()>();
        if i6 > 0 goto label6;

        $r13 = new java.lang.StringBuffer;
        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();
        r5 = $r13;
        i1 = 0;

     label4:
        $i7 = lengthof r1;
        if i1 >= $i7 goto label5;

        $r14 = r1[i1];
        $i8 = virtualinvoke $r14.<sun.security.krb5.EncryptionKey: int getEType()>();
        $r15 = staticinvoke <sun.security.krb5.internal.crypto.EType: java.lang.String toString(int)>($i8);
        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);
        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        i1 = i1 + 1;
        goto label4;

     label5:
        $r18 = new sun.security.krb5.KrbException;
        $r19 = new java.lang.StringBuilder;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Do not have keys of types listed in ");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" available; only have keys of following type: ");
        $r23 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.String toString()>();
        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r18.<sun.security.krb5.KrbException: void <init>(java.lang.String)>($r25);
        throw $r18;

     label6:
        r26 = newarray (int)[i6];
        i9 = 0;

     label7:
        if i9 >= i6 goto label8;

        $r27 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i9);
        $r28 = (java.lang.Integer) $r27;
        $i10 = virtualinvoke $r28.<java.lang.Integer: int intValue()>();
        r26[i9] = $i10;
        i9 = i9 + 1;
        goto label7;

     label8:
        return r26;
    }

    public static boolean isSupported(int, int[])
    {
        int i0, i1, $i2, $i3;
        int[] r0;

        i0 := @parameter0: int;
        r0 := @parameter1: int[];
        i1 = 0;

     label0:
        $i2 = lengthof r0;
        if i1 >= $i2 goto label2;

        $i3 = r0[i1];
        if i0 != $i3 goto label1;

        return 1;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        return 0;
    }

    public static boolean isSupported(int)
    {
        int i0;
        int[] r0;
        boolean $z0;

        i0 := @parameter0: int;
        r0 = staticinvoke <sun.security.krb5.internal.crypto.EType: int[] getBuiltInDefaults()>();
        $z0 = staticinvoke <sun.security.krb5.internal.crypto.EType: boolean isSupported(int,int[])>(i0, r0);
        return $z0;
    }

    public static java.lang.String toString(int)
    {
        int i0;
        java.lang.StringBuilder $r0, $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;
        tableswitch(i0)
        {
            case 0: goto label0;
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label7;
            case 8: goto label20;
            case 9: goto label8;
            case 10: goto label9;
            case 11: goto label10;
            case 12: goto label11;
            case 13: goto label12;
            case 14: goto label13;
            case 15: goto label14;
            case 16: goto label15;
            case 17: goto label16;
            case 18: goto label17;
            case 19: goto label20;
            case 20: goto label20;
            case 21: goto label20;
            case 22: goto label20;
            case 23: goto label18;
            case 24: goto label19;
            default: goto label20;
        };

     label0:
        return "NULL";

     label1:
        return "DES CBC mode with CRC-32";

     label2:
        return "DES CBC mode with MD4";

     label3:
        return "DES CBC mode with MD5";

     label4:
        return "reserved";

     label5:
        return "DES3 CBC mode with MD5";

     label6:
        return "reserved";

     label7:
        return "DES3 CBC mode with SHA1";

     label8:
        return "DSA with SHA1- Cms0ID";

     label9:
        return "MD5 with RSA encryption - Cms0ID";

     label10:
        return "SHA1 with RSA encryption - Cms0ID";

     label11:
        return "RC2 CBC mode with Env0ID";

     label12:
        return "RSA encryption with Env0ID";

     label13:
        return "RSAES-0AEP-ENV-0ID";

     label14:
        return "DES-EDE3-CBC-ENV-0ID";

     label15:
        return "DES3 CBC mode with SHA1-KD";

     label16:
        return "AES128 CTS mode with HMAC SHA1-96";

     label17:
        return "AES256 CTS mode with HMAC SHA1-96";

     label18:
        return "RC4 with HMAC";

     label19:
        return "RC4 with HMAC EXP";

     label20:
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();
        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown (");
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r4;
    }

    static void <clinit>()
    {
        boolean $z0, z1, $z2, $z3;
        sun.security.krb5.Config r0;
        java.lang.String r1, $r7, $r9;
        java.lang.Exception $r2, r3;
        java.io.PrintStream $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        int[] $r10, $r11;

        $z0 = <sun.security.krb5.internal.Krb5: boolean DEBUG>;
        <sun.security.krb5.internal.crypto.EType: boolean DEBUG> = $z0;
        z1 = 1;

     label0:
        r0 = staticinvoke <sun.security.krb5.Config: sun.security.krb5.Config getInstance()>();
        r1 = virtualinvoke r0.<sun.security.krb5.Config: java.lang.String getDefault(java.lang.String,java.lang.String)>("allow_weak_crypto", "libdefaults");
        if r1 == null goto label1;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("false");
        if $z2 == 0 goto label1;

        z1 = 0;

     label1:
        goto label3;

     label2:
        $r2 := @caughtexception;
        r3 = $r2;
        $z3 = <sun.security.krb5.internal.crypto.EType: boolean DEBUG>;
        if $z3 == 0 goto label3;

        $r4 = <java.lang.System: java.io.PrintStream out>;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in getting allow_weak_crypto, using default value ");
        $r7 = virtualinvoke r3.<java.lang.Exception: java.lang.String getMessage()>();
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label3:
        <sun.security.krb5.internal.crypto.EType: boolean ALLOW_WEAK_CRYPTO> = z1;
        $r10 = newarray (int)[6];
        $r10[0] = 18;
        $r10[1] = 17;
        $r10[2] = 16;
        $r10[3] = 23;
        $r10[4] = 1;
        $r10[5] = 3;
        <sun.security.krb5.internal.crypto.EType: int[] BUILTIN_ETYPES> = $r10;
        $r11 = newarray (int)[5];
        $r11[0] = 17;
        $r11[1] = 16;
        $r11[2] = 23;
        $r11[3] = 1;
        $r11[4] = 3;
        <sun.security.krb5.internal.crypto.EType: int[] BUILTIN_ETYPES_NOAES256> = $r11;
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }
}
