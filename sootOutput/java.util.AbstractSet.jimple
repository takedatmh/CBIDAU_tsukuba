public abstract class java.util.AbstractSet extends java.util.AbstractCollection implements java.util.Set
{

    protected void <init>()
    {
        java.util.AbstractSet r0;

        r0 := @this: java.util.AbstractSet;
        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.AbstractSet r0;
        java.lang.Object r1;
        java.util.Collection r2;
        java.lang.ClassCastException r3, $r4;
        boolean $z0, $z1;
        int $i0, $i1;
        java.lang.NullPointerException $r5, r6;

        r0 := @this: java.util.AbstractSet;
        r1 := @parameter0: java.lang.Object;
        if r1 != r0 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof java.util.Set;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.util.Collection) r1;
        $i0 = interfaceinvoke r2.<java.util.Collection: int size()>();
        $i1 = virtualinvoke r0.<java.util.AbstractSet: int size()>();
        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $z1 = virtualinvoke r0.<java.util.AbstractSet: boolean containsAll(java.util.Collection)>(r2);

     label3:
        return $z1;

     label4:
        $r4 := @caughtexception;
        r3 = $r4;
        return 0;

     label5:
        $r5 := @caughtexception;
        r6 = $r5;
        return 0;

        catch java.lang.ClassCastException from label2 to label3 with label4;
        catch java.lang.NullPointerException from label2 to label3 with label5;
    }

    public int hashCode()
    {
        java.util.AbstractSet r0;
        int i0, $i1;
        java.util.Iterator r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: java.util.AbstractSet;
        i0 = 0;
        r1 = virtualinvoke r0.<java.util.AbstractSet: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        if r2 == null goto label1;

        $i1 = virtualinvoke r2.<java.lang.Object: int hashCode()>();
        i0 = i0 + $i1;

     label1:
        goto label0;

     label2:
        return i0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.AbstractSet r0;
        java.util.Collection r1;
        boolean z0, $z1, $z2, $z3, $z4;
        java.util.Iterator r2, r4;
        int $i0, $i1;
        java.lang.Object $r3, $r5;

        r0 := @this: java.util.AbstractSet;
        r1 := @parameter0: java.util.Collection;
        z0 = 0;
        $i0 = virtualinvoke r0.<java.util.AbstractSet: int size()>();
        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();
        if $i0 <= $i1 goto label2;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label0:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label1;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $z2 = virtualinvoke r0.<java.util.AbstractSet: boolean remove(java.lang.Object)>($r3);
        z0 = z0 | $z2;
        goto label0;

     label1:
        goto label4;

     label2:
        r4 = virtualinvoke r0.<java.util.AbstractSet: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z3 == 0 goto label4;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        $z4 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r5);
        if $z4 == 0 goto label3;

        interfaceinvoke r4.<java.util.Iterator: void remove()>();
        z0 = 1;
        goto label3;

     label4:
        return z0;
    }
}
