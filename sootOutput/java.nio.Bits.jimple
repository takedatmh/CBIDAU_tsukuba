class java.nio.Bits extends java.lang.Object
{
    private static final sun.misc.Unsafe unsafe;
    private static final java.nio.ByteOrder byteOrder;
    private static int pageSize;
    private static boolean unaligned;
    private static boolean unalignedKnown;
    private static volatile long maxMemory;
    private static volatile long reservedMemory;
    private static volatile long totalCapacity;
    private static volatile long count;
    private static boolean memoryLimitSet;
    static final int JNI_COPY_TO_ARRAY_THRESHOLD;
    static final int JNI_COPY_FROM_ARRAY_THRESHOLD;
    static final long UNSAFE_COPY_THRESHOLD;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        java.nio.Bits r0;

        r0 := @this: java.nio.Bits;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    static short swap(short)
    {
        short s0, $s1;

        s0 := @parameter0: short;
        $s1 = staticinvoke <java.lang.Short: short reverseBytes(short)>(s0);
        return $s1;
    }

    static char swap(char)
    {
        char c0, $c1;

        c0 := @parameter0: char;
        $c1 = staticinvoke <java.lang.Character: char reverseBytes(char)>(c0);
        return $c1;
    }

    static int swap(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;
        $i1 = staticinvoke <java.lang.Integer: int reverseBytes(int)>(i0);
        return $i1;
    }

    static long swap(long)
    {
        long l0, $l1;

        l0 := @parameter0: long;
        $l1 = staticinvoke <java.lang.Long: long reverseBytes(long)>(l0);
        return $l1;
    }

    private static char makeChar(byte, byte)
    {
        byte b0, b1;
        int $i2, $i4;
        short $s3;
        char $c5;

        b0 := @parameter0: byte;
        b1 := @parameter1: byte;
        $i2 = b0 << 8;
        $s3 = b1 & 255;
        $i4 = $i2 | $s3;
        $c5 = (char) $i4;
        return $c5;
    }

    static char getCharL(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0, $i1;
        byte $b2, $b3;
        char $c4;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        $i1 = i0 + 1;
        $b2 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i1);
        $b3 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>(i0);
        $c4 = staticinvoke <java.nio.Bits: char makeChar(byte,byte)>($b2, $b3);
        return $c4;
    }

    static char getCharL(long)
    {
        long l0, $l1;
        byte $b2, $b3;
        char $c4;

        l0 := @parameter0: long;
        $l1 = l0 + 1L;
        $b2 = staticinvoke <java.nio.Bits: byte _get(long)>($l1);
        $b3 = staticinvoke <java.nio.Bits: byte _get(long)>(l0);
        $c4 = staticinvoke <java.nio.Bits: char makeChar(byte,byte)>($b2, $b3);
        return $c4;
    }

    static char getCharB(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0, $i2;
        byte $b1, $b3;
        char $c4;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        $b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>(i0);
        $i2 = i0 + 1;
        $b3 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i2);
        $c4 = staticinvoke <java.nio.Bits: char makeChar(byte,byte)>($b1, $b3);
        return $c4;
    }

    static char getCharB(long)
    {
        long l0, $l2;
        byte $b1, $b3;
        char $c4;

        l0 := @parameter0: long;
        $b1 = staticinvoke <java.nio.Bits: byte _get(long)>(l0);
        $l2 = l0 + 1L;
        $b3 = staticinvoke <java.nio.Bits: byte _get(long)>($l2);
        $c4 = staticinvoke <java.nio.Bits: char makeChar(byte,byte)>($b1, $b3);
        return $c4;
    }

    static char getChar(java.nio.ByteBuffer, int, boolean)
    {
        java.nio.ByteBuffer r0;
        int i0;
        boolean z0;
        char $c1;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        $c1 = staticinvoke <java.nio.Bits: char getCharB(java.nio.ByteBuffer,int)>(r0, i0);
        goto label1;

     label0:
        $c1 = staticinvoke <java.nio.Bits: char getCharL(java.nio.ByteBuffer,int)>(r0, i0);

     label1:
        return $c1;
    }

    static char getChar(long, boolean)
    {
        long l0;
        boolean z0;
        char $c1;

        l0 := @parameter0: long;
        z0 := @parameter1: boolean;
        if z0 == 0 goto label0;

        $c1 = staticinvoke <java.nio.Bits: char getCharB(long)>(l0);
        goto label1;

     label0:
        $c1 = staticinvoke <java.nio.Bits: char getCharL(long)>(l0);

     label1:
        return $c1;
    }

    private static byte char1(char)
    {
        char c0, $c1;
        byte $b2;

        c0 := @parameter0: char;
        $c1 = c0 >> 8;
        $b2 = (byte) $c1;
        return $b2;
    }

    private static byte char0(char)
    {
        char c0;
        byte $b1;

        c0 := @parameter0: char;
        $b1 = (byte) c0;
        return $b1;
    }

    static void putCharL(java.nio.ByteBuffer, int, char)
    {
        java.nio.ByteBuffer r0;
        int i0, $i3;
        char c1;
        byte $b2, $b4;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        c1 := @parameter2: char;
        $b2 = staticinvoke <java.nio.Bits: byte char0(char)>(c1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>(i0, $b2);
        $i3 = i0 + 1;
        $b4 = staticinvoke <java.nio.Bits: byte char1(char)>(c1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i3, $b4);
        return;
    }

    static void putCharL(long, char)
    {
        long l0, $l3;
        char c1;
        byte $b2, $b4;

        l0 := @parameter0: long;
        c1 := @parameter1: char;
        $b2 = staticinvoke <java.nio.Bits: byte char0(char)>(c1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>(l0, $b2);
        $l3 = l0 + 1L;
        $b4 = staticinvoke <java.nio.Bits: byte char1(char)>(c1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l3, $b4);
        return;
    }

    static void putCharB(java.nio.ByteBuffer, int, char)
    {
        java.nio.ByteBuffer r0;
        int i0, $i3;
        char c1;
        byte $b2, $b4;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        c1 := @parameter2: char;
        $b2 = staticinvoke <java.nio.Bits: byte char1(char)>(c1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>(i0, $b2);
        $i3 = i0 + 1;
        $b4 = staticinvoke <java.nio.Bits: byte char0(char)>(c1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i3, $b4);
        return;
    }

    static void putCharB(long, char)
    {
        long l0, $l3;
        char c1;
        byte $b2, $b4;

        l0 := @parameter0: long;
        c1 := @parameter1: char;
        $b2 = staticinvoke <java.nio.Bits: byte char1(char)>(c1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>(l0, $b2);
        $l3 = l0 + 1L;
        $b4 = staticinvoke <java.nio.Bits: byte char0(char)>(c1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l3, $b4);
        return;
    }

    static void putChar(java.nio.ByteBuffer, int, char, boolean)
    {
        java.nio.ByteBuffer r0;
        int i0;
        char c1;
        boolean z0;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        c1 := @parameter2: char;
        z0 := @parameter3: boolean;
        if z0 == 0 goto label0;

        staticinvoke <java.nio.Bits: void putCharB(java.nio.ByteBuffer,int,char)>(r0, i0, c1);
        goto label1;

     label0:
        staticinvoke <java.nio.Bits: void putCharL(java.nio.ByteBuffer,int,char)>(r0, i0, c1);

     label1:
        return;
    }

    static void putChar(long, char, boolean)
    {
        long l0;
        char c1;
        boolean z0;

        l0 := @parameter0: long;
        c1 := @parameter1: char;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        staticinvoke <java.nio.Bits: void putCharB(long,char)>(l0, c1);
        goto label1;

     label0:
        staticinvoke <java.nio.Bits: void putCharL(long,char)>(l0, c1);

     label1:
        return;
    }

    private static short makeShort(byte, byte)
    {
        byte b0, b1;
        int $i2, $i4;
        short $s3, $s5;

        b0 := @parameter0: byte;
        b1 := @parameter1: byte;
        $i2 = b0 << 8;
        $s3 = b1 & 255;
        $i4 = $i2 | $s3;
        $s5 = (short) $i4;
        return $s5;
    }

    static short getShortL(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0, $i1;
        byte $b2, $b3;
        short $s4;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        $i1 = i0 + 1;
        $b2 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i1);
        $b3 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>(i0);
        $s4 = staticinvoke <java.nio.Bits: short makeShort(byte,byte)>($b2, $b3);
        return $s4;
    }

    static short getShortL(long)
    {
        long l0, $l1;
        byte $b2, $b3;
        short $s4;

        l0 := @parameter0: long;
        $l1 = l0 + 1L;
        $b2 = staticinvoke <java.nio.Bits: byte _get(long)>($l1);
        $b3 = staticinvoke <java.nio.Bits: byte _get(long)>(l0);
        $s4 = staticinvoke <java.nio.Bits: short makeShort(byte,byte)>($b2, $b3);
        return $s4;
    }

    static short getShortB(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0, $i2;
        byte $b1, $b3;
        short $s4;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        $b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>(i0);
        $i2 = i0 + 1;
        $b3 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i2);
        $s4 = staticinvoke <java.nio.Bits: short makeShort(byte,byte)>($b1, $b3);
        return $s4;
    }

    static short getShortB(long)
    {
        long l0, $l2;
        byte $b1, $b3;
        short $s4;

        l0 := @parameter0: long;
        $b1 = staticinvoke <java.nio.Bits: byte _get(long)>(l0);
        $l2 = l0 + 1L;
        $b3 = staticinvoke <java.nio.Bits: byte _get(long)>($l2);
        $s4 = staticinvoke <java.nio.Bits: short makeShort(byte,byte)>($b1, $b3);
        return $s4;
    }

    static short getShort(java.nio.ByteBuffer, int, boolean)
    {
        java.nio.ByteBuffer r0;
        int i0;
        boolean z0;
        short $s1;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        $s1 = staticinvoke <java.nio.Bits: short getShortB(java.nio.ByteBuffer,int)>(r0, i0);
        goto label1;

     label0:
        $s1 = staticinvoke <java.nio.Bits: short getShortL(java.nio.ByteBuffer,int)>(r0, i0);

     label1:
        return $s1;
    }

    static short getShort(long, boolean)
    {
        long l0;
        boolean z0;
        short $s1;

        l0 := @parameter0: long;
        z0 := @parameter1: boolean;
        if z0 == 0 goto label0;

        $s1 = staticinvoke <java.nio.Bits: short getShortB(long)>(l0);
        goto label1;

     label0:
        $s1 = staticinvoke <java.nio.Bits: short getShortL(long)>(l0);

     label1:
        return $s1;
    }

    private static byte short1(short)
    {
        short s0, $s1;
        byte $b2;

        s0 := @parameter0: short;
        $s1 = s0 >> 8;
        $b2 = (byte) $s1;
        return $b2;
    }

    private static byte short0(short)
    {
        short s0;
        byte $b1;

        s0 := @parameter0: short;
        $b1 = (byte) s0;
        return $b1;
    }

    static void putShortL(java.nio.ByteBuffer, int, short)
    {
        java.nio.ByteBuffer r0;
        int i0, $i3;
        short s1;
        byte $b2, $b4;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        s1 := @parameter2: short;
        $b2 = staticinvoke <java.nio.Bits: byte short0(short)>(s1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>(i0, $b2);
        $i3 = i0 + 1;
        $b4 = staticinvoke <java.nio.Bits: byte short1(short)>(s1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i3, $b4);
        return;
    }

    static void putShortL(long, short)
    {
        long l0, $l3;
        short s1;
        byte $b2, $b4;

        l0 := @parameter0: long;
        s1 := @parameter1: short;
        $b2 = staticinvoke <java.nio.Bits: byte short0(short)>(s1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>(l0, $b2);
        $l3 = l0 + 1L;
        $b4 = staticinvoke <java.nio.Bits: byte short1(short)>(s1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l3, $b4);
        return;
    }

    static void putShortB(java.nio.ByteBuffer, int, short)
    {
        java.nio.ByteBuffer r0;
        int i0, $i3;
        short s1;
        byte $b2, $b4;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        s1 := @parameter2: short;
        $b2 = staticinvoke <java.nio.Bits: byte short1(short)>(s1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>(i0, $b2);
        $i3 = i0 + 1;
        $b4 = staticinvoke <java.nio.Bits: byte short0(short)>(s1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i3, $b4);
        return;
    }

    static void putShortB(long, short)
    {
        long l0, $l3;
        short s1;
        byte $b2, $b4;

        l0 := @parameter0: long;
        s1 := @parameter1: short;
        $b2 = staticinvoke <java.nio.Bits: byte short1(short)>(s1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>(l0, $b2);
        $l3 = l0 + 1L;
        $b4 = staticinvoke <java.nio.Bits: byte short0(short)>(s1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l3, $b4);
        return;
    }

    static void putShort(java.nio.ByteBuffer, int, short, boolean)
    {
        java.nio.ByteBuffer r0;
        int i0;
        short s1;
        boolean z0;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        s1 := @parameter2: short;
        z0 := @parameter3: boolean;
        if z0 == 0 goto label0;

        staticinvoke <java.nio.Bits: void putShortB(java.nio.ByteBuffer,int,short)>(r0, i0, s1);
        goto label1;

     label0:
        staticinvoke <java.nio.Bits: void putShortL(java.nio.ByteBuffer,int,short)>(r0, i0, s1);

     label1:
        return;
    }

    static void putShort(long, short, boolean)
    {
        long l0;
        short s1;
        boolean z0;

        l0 := @parameter0: long;
        s1 := @parameter1: short;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        staticinvoke <java.nio.Bits: void putShortB(long,short)>(l0, s1);
        goto label1;

     label0:
        staticinvoke <java.nio.Bits: void putShortL(long,short)>(l0, s1);

     label1:
        return;
    }

    private static int makeInt(byte, byte, byte, byte)
    {
        byte b0, b1, b2, b3;
        int $i4, $i6, $i7, $i9, $i10, $i12;
        short $s5, $s8, $s11;

        b0 := @parameter0: byte;
        b1 := @parameter1: byte;
        b2 := @parameter2: byte;
        b3 := @parameter3: byte;
        $i4 = b0 << 24;
        $s5 = b1 & 255;
        $i6 = $s5 << 16;
        $i7 = $i4 | $i6;
        $s8 = b2 & 255;
        $i9 = $s8 << 8;
        $i10 = $i7 | $i9;
        $s11 = b3 & 255;
        $i12 = $i10 | $s11;
        return $i12;
    }

    static int getIntL(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0, $i1, $i3, $i5, $i8;
        byte $b2, $b4, $b6, $b7;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        $i1 = i0 + 3;
        $b2 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i1);
        $i3 = i0 + 2;
        $b4 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i3);
        $i5 = i0 + 1;
        $b6 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i5);
        $b7 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>(i0);
        $i8 = staticinvoke <java.nio.Bits: int makeInt(byte,byte,byte,byte)>($b2, $b4, $b6, $b7);
        return $i8;
    }

    static int getIntL(long)
    {
        long l0, $l1, $l3, $l5;
        byte $b2, $b4, $b6, $b7;
        int $i8;

        l0 := @parameter0: long;
        $l1 = l0 + 3L;
        $b2 = staticinvoke <java.nio.Bits: byte _get(long)>($l1);
        $l3 = l0 + 2L;
        $b4 = staticinvoke <java.nio.Bits: byte _get(long)>($l3);
        $l5 = l0 + 1L;
        $b6 = staticinvoke <java.nio.Bits: byte _get(long)>($l5);
        $b7 = staticinvoke <java.nio.Bits: byte _get(long)>(l0);
        $i8 = staticinvoke <java.nio.Bits: int makeInt(byte,byte,byte,byte)>($b2, $b4, $b6, $b7);
        return $i8;
    }

    static int getIntB(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0, $i2, $i4, $i6, $i8;
        byte $b1, $b3, $b5, $b7;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        $b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>(i0);
        $i2 = i0 + 1;
        $b3 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i2);
        $i4 = i0 + 2;
        $b5 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i4);
        $i6 = i0 + 3;
        $b7 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i6);
        $i8 = staticinvoke <java.nio.Bits: int makeInt(byte,byte,byte,byte)>($b1, $b3, $b5, $b7);
        return $i8;
    }

    static int getIntB(long)
    {
        long l0, $l2, $l4, $l6;
        byte $b1, $b3, $b5, $b7;
        int $i8;

        l0 := @parameter0: long;
        $b1 = staticinvoke <java.nio.Bits: byte _get(long)>(l0);
        $l2 = l0 + 1L;
        $b3 = staticinvoke <java.nio.Bits: byte _get(long)>($l2);
        $l4 = l0 + 2L;
        $b5 = staticinvoke <java.nio.Bits: byte _get(long)>($l4);
        $l6 = l0 + 3L;
        $b7 = staticinvoke <java.nio.Bits: byte _get(long)>($l6);
        $i8 = staticinvoke <java.nio.Bits: int makeInt(byte,byte,byte,byte)>($b1, $b3, $b5, $b7);
        return $i8;
    }

    static int getInt(java.nio.ByteBuffer, int, boolean)
    {
        java.nio.ByteBuffer r0;
        int i0, $i1;
        boolean z0;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        $i1 = staticinvoke <java.nio.Bits: int getIntB(java.nio.ByteBuffer,int)>(r0, i0);
        goto label1;

     label0:
        $i1 = staticinvoke <java.nio.Bits: int getIntL(java.nio.ByteBuffer,int)>(r0, i0);

     label1:
        return $i1;
    }

    static int getInt(long, boolean)
    {
        long l0;
        boolean z0;
        int $i1;

        l0 := @parameter0: long;
        z0 := @parameter1: boolean;
        if z0 == 0 goto label0;

        $i1 = staticinvoke <java.nio.Bits: int getIntB(long)>(l0);
        goto label1;

     label0:
        $i1 = staticinvoke <java.nio.Bits: int getIntL(long)>(l0);

     label1:
        return $i1;
    }

    private static byte int3(int)
    {
        int i0, $i1;
        byte $b2;

        i0 := @parameter0: int;
        $i1 = i0 >> 24;
        $b2 = (byte) $i1;
        return $b2;
    }

    private static byte int2(int)
    {
        int i0, $i1;
        byte $b2;

        i0 := @parameter0: int;
        $i1 = i0 >> 16;
        $b2 = (byte) $i1;
        return $b2;
    }

    private static byte int1(int)
    {
        int i0, $i1;
        byte $b2;

        i0 := @parameter0: int;
        $i1 = i0 >> 8;
        $b2 = (byte) $i1;
        return $b2;
    }

    private static byte int0(int)
    {
        int i0;
        byte $b1;

        i0 := @parameter0: int;
        $b1 = (byte) i0;
        return $b1;
    }

    static void putIntL(java.nio.ByteBuffer, int, int)
    {
        java.nio.ByteBuffer r0;
        int i0, i1, $i2, $i4, $i6;
        byte $b3, $b5, $b7, $b8;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = i0 + 3;
        $b3 = staticinvoke <java.nio.Bits: byte int3(int)>(i1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i2, $b3);
        $i4 = i0 + 2;
        $b5 = staticinvoke <java.nio.Bits: byte int2(int)>(i1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i4, $b5);
        $i6 = i0 + 1;
        $b7 = staticinvoke <java.nio.Bits: byte int1(int)>(i1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i6, $b7);
        $b8 = staticinvoke <java.nio.Bits: byte int0(int)>(i1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>(i0, $b8);
        return;
    }

    static void putIntL(long, int)
    {
        long l0, $l2, $l4, $l6;
        int i1;
        byte $b3, $b5, $b7, $b8;

        l0 := @parameter0: long;
        i1 := @parameter1: int;
        $l2 = l0 + 3L;
        $b3 = staticinvoke <java.nio.Bits: byte int3(int)>(i1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l2, $b3);
        $l4 = l0 + 2L;
        $b5 = staticinvoke <java.nio.Bits: byte int2(int)>(i1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l4, $b5);
        $l6 = l0 + 1L;
        $b7 = staticinvoke <java.nio.Bits: byte int1(int)>(i1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l6, $b7);
        $b8 = staticinvoke <java.nio.Bits: byte int0(int)>(i1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>(l0, $b8);
        return;
    }

    static void putIntB(java.nio.ByteBuffer, int, int)
    {
        java.nio.ByteBuffer r0;
        int i0, i1, $i3, $i5, $i7;
        byte $b2, $b4, $b6, $b8;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $b2 = staticinvoke <java.nio.Bits: byte int3(int)>(i1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>(i0, $b2);
        $i3 = i0 + 1;
        $b4 = staticinvoke <java.nio.Bits: byte int2(int)>(i1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i3, $b4);
        $i5 = i0 + 2;
        $b6 = staticinvoke <java.nio.Bits: byte int1(int)>(i1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i5, $b6);
        $i7 = i0 + 3;
        $b8 = staticinvoke <java.nio.Bits: byte int0(int)>(i1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i7, $b8);
        return;
    }

    static void putIntB(long, int)
    {
        long l0, $l3, $l5, $l7;
        int i1;
        byte $b2, $b4, $b6, $b8;

        l0 := @parameter0: long;
        i1 := @parameter1: int;
        $b2 = staticinvoke <java.nio.Bits: byte int3(int)>(i1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>(l0, $b2);
        $l3 = l0 + 1L;
        $b4 = staticinvoke <java.nio.Bits: byte int2(int)>(i1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l3, $b4);
        $l5 = l0 + 2L;
        $b6 = staticinvoke <java.nio.Bits: byte int1(int)>(i1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l5, $b6);
        $l7 = l0 + 3L;
        $b8 = staticinvoke <java.nio.Bits: byte int0(int)>(i1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l7, $b8);
        return;
    }

    static void putInt(java.nio.ByteBuffer, int, int, boolean)
    {
        java.nio.ByteBuffer r0;
        int i0, i1;
        boolean z0;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        z0 := @parameter3: boolean;
        if z0 == 0 goto label0;

        staticinvoke <java.nio.Bits: void putIntB(java.nio.ByteBuffer,int,int)>(r0, i0, i1);
        goto label1;

     label0:
        staticinvoke <java.nio.Bits: void putIntL(java.nio.ByteBuffer,int,int)>(r0, i0, i1);

     label1:
        return;
    }

    static void putInt(long, int, boolean)
    {
        long l0;
        int i1;
        boolean z0;

        l0 := @parameter0: long;
        i1 := @parameter1: int;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        staticinvoke <java.nio.Bits: void putIntB(long,int)>(l0, i1);
        goto label1;

     label0:
        staticinvoke <java.nio.Bits: void putIntL(long,int)>(l0, i1);

     label1:
        return;
    }

    private static long makeLong(byte, byte, byte, byte, byte, byte, byte, byte)
    {
        byte b0, b1, b2, b3, b4, b5, b6, b7;
        long $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l24, $l25, $l26, $l27, $l28, $l29, $l30, $l31, $l32, $l33, $l34, $l35, $l36;

        b0 := @parameter0: byte;
        b1 := @parameter1: byte;
        b2 := @parameter2: byte;
        b3 := @parameter3: byte;
        b4 := @parameter4: byte;
        b5 := @parameter5: byte;
        b6 := @parameter6: byte;
        b7 := @parameter7: byte;
        $l8 = (long) b0;
        $l9 = $l8 << 56;
        $l10 = (long) b1;
        $l11 = $l10 & 255L;
        $l12 = $l11 << 48;
        $l13 = $l9 | $l12;
        $l14 = (long) b2;
        $l15 = $l14 & 255L;
        $l16 = $l15 << 40;
        $l17 = $l13 | $l16;
        $l18 = (long) b3;
        $l19 = $l18 & 255L;
        $l20 = $l19 << 32;
        $l21 = $l17 | $l20;
        $l22 = (long) b4;
        $l23 = $l22 & 255L;
        $l24 = $l23 << 24;
        $l25 = $l21 | $l24;
        $l26 = (long) b5;
        $l27 = $l26 & 255L;
        $l28 = $l27 << 16;
        $l29 = $l25 | $l28;
        $l30 = (long) b6;
        $l31 = $l30 & 255L;
        $l32 = $l31 << 8;
        $l33 = $l29 | $l32;
        $l34 = (long) b7;
        $l35 = $l34 & 255L;
        $l36 = $l33 | $l35;
        return $l36;
    }

    static long getLongL(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0, $i1, $i3, $i5, $i7, $i9, $i11, $i13;
        byte $b2, $b4, $b6, $b8, $b10, $b12, $b14, $b15;
        long $l16;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        $i1 = i0 + 7;
        $b2 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i1);
        $i3 = i0 + 6;
        $b4 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i3);
        $i5 = i0 + 5;
        $b6 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i5);
        $i7 = i0 + 4;
        $b8 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i7);
        $i9 = i0 + 3;
        $b10 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i9);
        $i11 = i0 + 2;
        $b12 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i11);
        $i13 = i0 + 1;
        $b14 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i13);
        $b15 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>(i0);
        $l16 = staticinvoke <java.nio.Bits: long makeLong(byte,byte,byte,byte,byte,byte,byte,byte)>($b2, $b4, $b6, $b8, $b10, $b12, $b14, $b15);
        return $l16;
    }

    static long getLongL(long)
    {
        long l0, $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l16;
        byte $b2, $b4, $b6, $b8, $b10, $b12, $b14, $b15;

        l0 := @parameter0: long;
        $l1 = l0 + 7L;
        $b2 = staticinvoke <java.nio.Bits: byte _get(long)>($l1);
        $l3 = l0 + 6L;
        $b4 = staticinvoke <java.nio.Bits: byte _get(long)>($l3);
        $l5 = l0 + 5L;
        $b6 = staticinvoke <java.nio.Bits: byte _get(long)>($l5);
        $l7 = l0 + 4L;
        $b8 = staticinvoke <java.nio.Bits: byte _get(long)>($l7);
        $l9 = l0 + 3L;
        $b10 = staticinvoke <java.nio.Bits: byte _get(long)>($l9);
        $l11 = l0 + 2L;
        $b12 = staticinvoke <java.nio.Bits: byte _get(long)>($l11);
        $l13 = l0 + 1L;
        $b14 = staticinvoke <java.nio.Bits: byte _get(long)>($l13);
        $b15 = staticinvoke <java.nio.Bits: byte _get(long)>(l0);
        $l16 = staticinvoke <java.nio.Bits: long makeLong(byte,byte,byte,byte,byte,byte,byte,byte)>($b2, $b4, $b6, $b8, $b10, $b12, $b14, $b15);
        return $l16;
    }

    static long getLongB(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14;
        byte $b1, $b3, $b5, $b7, $b9, $b11, $b13, $b15;
        long $l16;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        $b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>(i0);
        $i2 = i0 + 1;
        $b3 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i2);
        $i4 = i0 + 2;
        $b5 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i4);
        $i6 = i0 + 3;
        $b7 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i6);
        $i8 = i0 + 4;
        $b9 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i8);
        $i10 = i0 + 5;
        $b11 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i10);
        $i12 = i0 + 6;
        $b13 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i12);
        $i14 = i0 + 7;
        $b15 = virtualinvoke r0.<java.nio.ByteBuffer: byte _get(int)>($i14);
        $l16 = staticinvoke <java.nio.Bits: long makeLong(byte,byte,byte,byte,byte,byte,byte,byte)>($b1, $b3, $b5, $b7, $b9, $b11, $b13, $b15);
        return $l16;
    }

    static long getLongB(long)
    {
        long l0, $l2, $l4, $l6, $l8, $l10, $l12, $l14, $l16;
        byte $b1, $b3, $b5, $b7, $b9, $b11, $b13, $b15;

        l0 := @parameter0: long;
        $b1 = staticinvoke <java.nio.Bits: byte _get(long)>(l0);
        $l2 = l0 + 1L;
        $b3 = staticinvoke <java.nio.Bits: byte _get(long)>($l2);
        $l4 = l0 + 2L;
        $b5 = staticinvoke <java.nio.Bits: byte _get(long)>($l4);
        $l6 = l0 + 3L;
        $b7 = staticinvoke <java.nio.Bits: byte _get(long)>($l6);
        $l8 = l0 + 4L;
        $b9 = staticinvoke <java.nio.Bits: byte _get(long)>($l8);
        $l10 = l0 + 5L;
        $b11 = staticinvoke <java.nio.Bits: byte _get(long)>($l10);
        $l12 = l0 + 6L;
        $b13 = staticinvoke <java.nio.Bits: byte _get(long)>($l12);
        $l14 = l0 + 7L;
        $b15 = staticinvoke <java.nio.Bits: byte _get(long)>($l14);
        $l16 = staticinvoke <java.nio.Bits: long makeLong(byte,byte,byte,byte,byte,byte,byte,byte)>($b1, $b3, $b5, $b7, $b9, $b11, $b13, $b15);
        return $l16;
    }

    static long getLong(java.nio.ByteBuffer, int, boolean)
    {
        java.nio.ByteBuffer r0;
        int i0;
        boolean z0;
        long $l1;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        $l1 = staticinvoke <java.nio.Bits: long getLongB(java.nio.ByteBuffer,int)>(r0, i0);
        goto label1;

     label0:
        $l1 = staticinvoke <java.nio.Bits: long getLongL(java.nio.ByteBuffer,int)>(r0, i0);

     label1:
        return $l1;
    }

    static long getLong(long, boolean)
    {
        long l0, $l1;
        boolean z0;

        l0 := @parameter0: long;
        z0 := @parameter1: boolean;
        if z0 == 0 goto label0;

        $l1 = staticinvoke <java.nio.Bits: long getLongB(long)>(l0);
        goto label1;

     label0:
        $l1 = staticinvoke <java.nio.Bits: long getLongL(long)>(l0);

     label1:
        return $l1;
    }

    private static byte long7(long)
    {
        long l0, $l1;
        int $i2;
        byte $b3;

        l0 := @parameter0: long;
        $l1 = l0 >> 56;
        $i2 = (int) $l1;
        $b3 = (byte) $i2;
        return $b3;
    }

    private static byte long6(long)
    {
        long l0, $l1;
        int $i2;
        byte $b3;

        l0 := @parameter0: long;
        $l1 = l0 >> 48;
        $i2 = (int) $l1;
        $b3 = (byte) $i2;
        return $b3;
    }

    private static byte long5(long)
    {
        long l0, $l1;
        int $i2;
        byte $b3;

        l0 := @parameter0: long;
        $l1 = l0 >> 40;
        $i2 = (int) $l1;
        $b3 = (byte) $i2;
        return $b3;
    }

    private static byte long4(long)
    {
        long l0, $l1;
        int $i2;
        byte $b3;

        l0 := @parameter0: long;
        $l1 = l0 >> 32;
        $i2 = (int) $l1;
        $b3 = (byte) $i2;
        return $b3;
    }

    private static byte long3(long)
    {
        long l0, $l1;
        int $i2;
        byte $b3;

        l0 := @parameter0: long;
        $l1 = l0 >> 24;
        $i2 = (int) $l1;
        $b3 = (byte) $i2;
        return $b3;
    }

    private static byte long2(long)
    {
        long l0, $l1;
        int $i2;
        byte $b3;

        l0 := @parameter0: long;
        $l1 = l0 >> 16;
        $i2 = (int) $l1;
        $b3 = (byte) $i2;
        return $b3;
    }

    private static byte long1(long)
    {
        long l0, $l1;
        int $i2;
        byte $b3;

        l0 := @parameter0: long;
        $l1 = l0 >> 8;
        $i2 = (int) $l1;
        $b3 = (byte) $i2;
        return $b3;
    }

    private static byte long0(long)
    {
        long l0;
        int $i1;
        byte $b2;

        l0 := @parameter0: long;
        $i1 = (int) l0;
        $b2 = (byte) $i1;
        return $b2;
    }

    static void putLongL(java.nio.ByteBuffer, int, long)
    {
        java.nio.ByteBuffer r0;
        int i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14;
        long l1;
        byte $b3, $b5, $b7, $b9, $b11, $b13, $b15, $b16;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        l1 := @parameter2: long;
        $i2 = i0 + 7;
        $b3 = staticinvoke <java.nio.Bits: byte long7(long)>(l1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i2, $b3);
        $i4 = i0 + 6;
        $b5 = staticinvoke <java.nio.Bits: byte long6(long)>(l1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i4, $b5);
        $i6 = i0 + 5;
        $b7 = staticinvoke <java.nio.Bits: byte long5(long)>(l1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i6, $b7);
        $i8 = i0 + 4;
        $b9 = staticinvoke <java.nio.Bits: byte long4(long)>(l1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i8, $b9);
        $i10 = i0 + 3;
        $b11 = staticinvoke <java.nio.Bits: byte long3(long)>(l1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i10, $b11);
        $i12 = i0 + 2;
        $b13 = staticinvoke <java.nio.Bits: byte long2(long)>(l1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i12, $b13);
        $i14 = i0 + 1;
        $b15 = staticinvoke <java.nio.Bits: byte long1(long)>(l1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i14, $b15);
        $b16 = staticinvoke <java.nio.Bits: byte long0(long)>(l1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>(i0, $b16);
        return;
    }

    static void putLongL(long, long)
    {
        long l0, l1, $l2, $l4, $l6, $l8, $l10, $l12, $l14;
        byte $b3, $b5, $b7, $b9, $b11, $b13, $b15, $b16;

        l0 := @parameter0: long;
        l1 := @parameter1: long;
        $l2 = l0 + 7L;
        $b3 = staticinvoke <java.nio.Bits: byte long7(long)>(l1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l2, $b3);
        $l4 = l0 + 6L;
        $b5 = staticinvoke <java.nio.Bits: byte long6(long)>(l1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l4, $b5);
        $l6 = l0 + 5L;
        $b7 = staticinvoke <java.nio.Bits: byte long5(long)>(l1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l6, $b7);
        $l8 = l0 + 4L;
        $b9 = staticinvoke <java.nio.Bits: byte long4(long)>(l1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l8, $b9);
        $l10 = l0 + 3L;
        $b11 = staticinvoke <java.nio.Bits: byte long3(long)>(l1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l10, $b11);
        $l12 = l0 + 2L;
        $b13 = staticinvoke <java.nio.Bits: byte long2(long)>(l1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l12, $b13);
        $l14 = l0 + 1L;
        $b15 = staticinvoke <java.nio.Bits: byte long1(long)>(l1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l14, $b15);
        $b16 = staticinvoke <java.nio.Bits: byte long0(long)>(l1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>(l0, $b16);
        return;
    }

    static void putLongB(java.nio.ByteBuffer, int, long)
    {
        java.nio.ByteBuffer r0;
        int i0, $i3, $i5, $i7, $i9, $i11, $i13, $i15;
        long l1;
        byte $b2, $b4, $b6, $b8, $b10, $b12, $b14, $b16;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        l1 := @parameter2: long;
        $b2 = staticinvoke <java.nio.Bits: byte long7(long)>(l1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>(i0, $b2);
        $i3 = i0 + 1;
        $b4 = staticinvoke <java.nio.Bits: byte long6(long)>(l1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i3, $b4);
        $i5 = i0 + 2;
        $b6 = staticinvoke <java.nio.Bits: byte long5(long)>(l1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i5, $b6);
        $i7 = i0 + 3;
        $b8 = staticinvoke <java.nio.Bits: byte long4(long)>(l1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i7, $b8);
        $i9 = i0 + 4;
        $b10 = staticinvoke <java.nio.Bits: byte long3(long)>(l1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i9, $b10);
        $i11 = i0 + 5;
        $b12 = staticinvoke <java.nio.Bits: byte long2(long)>(l1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i11, $b12);
        $i13 = i0 + 6;
        $b14 = staticinvoke <java.nio.Bits: byte long1(long)>(l1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i13, $b14);
        $i15 = i0 + 7;
        $b16 = staticinvoke <java.nio.Bits: byte long0(long)>(l1);
        virtualinvoke r0.<java.nio.ByteBuffer: void _put(int,byte)>($i15, $b16);
        return;
    }

    static void putLongB(long, long)
    {
        long l0, l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15;
        byte $b2, $b4, $b6, $b8, $b10, $b12, $b14, $b16;

        l0 := @parameter0: long;
        l1 := @parameter1: long;
        $b2 = staticinvoke <java.nio.Bits: byte long7(long)>(l1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>(l0, $b2);
        $l3 = l0 + 1L;
        $b4 = staticinvoke <java.nio.Bits: byte long6(long)>(l1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l3, $b4);
        $l5 = l0 + 2L;
        $b6 = staticinvoke <java.nio.Bits: byte long5(long)>(l1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l5, $b6);
        $l7 = l0 + 3L;
        $b8 = staticinvoke <java.nio.Bits: byte long4(long)>(l1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l7, $b8);
        $l9 = l0 + 4L;
        $b10 = staticinvoke <java.nio.Bits: byte long3(long)>(l1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l9, $b10);
        $l11 = l0 + 5L;
        $b12 = staticinvoke <java.nio.Bits: byte long2(long)>(l1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l11, $b12);
        $l13 = l0 + 6L;
        $b14 = staticinvoke <java.nio.Bits: byte long1(long)>(l1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l13, $b14);
        $l15 = l0 + 7L;
        $b16 = staticinvoke <java.nio.Bits: byte long0(long)>(l1);
        staticinvoke <java.nio.Bits: void _put(long,byte)>($l15, $b16);
        return;
    }

    static void putLong(java.nio.ByteBuffer, int, long, boolean)
    {
        java.nio.ByteBuffer r0;
        int i0;
        long l1;
        boolean z0;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        l1 := @parameter2: long;
        z0 := @parameter3: boolean;
        if z0 == 0 goto label0;

        staticinvoke <java.nio.Bits: void putLongB(java.nio.ByteBuffer,int,long)>(r0, i0, l1);
        goto label1;

     label0:
        staticinvoke <java.nio.Bits: void putLongL(java.nio.ByteBuffer,int,long)>(r0, i0, l1);

     label1:
        return;
    }

    static void putLong(long, long, boolean)
    {
        long l0, l1;
        boolean z0;

        l0 := @parameter0: long;
        l1 := @parameter1: long;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        staticinvoke <java.nio.Bits: void putLongB(long,long)>(l0, l1);
        goto label1;

     label0:
        staticinvoke <java.nio.Bits: void putLongL(long,long)>(l0, l1);

     label1:
        return;
    }

    static float getFloatL(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0, $i1;
        float $f0;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        $i1 = staticinvoke <java.nio.Bits: int getIntL(java.nio.ByteBuffer,int)>(r0, i0);
        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i1);
        return $f0;
    }

    static float getFloatL(long)
    {
        long l0;
        int $i1;
        float $f0;

        l0 := @parameter0: long;
        $i1 = staticinvoke <java.nio.Bits: int getIntL(long)>(l0);
        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i1);
        return $f0;
    }

    static float getFloatB(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0, $i1;
        float $f0;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        $i1 = staticinvoke <java.nio.Bits: int getIntB(java.nio.ByteBuffer,int)>(r0, i0);
        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i1);
        return $f0;
    }

    static float getFloatB(long)
    {
        long l0;
        int $i1;
        float $f0;

        l0 := @parameter0: long;
        $i1 = staticinvoke <java.nio.Bits: int getIntB(long)>(l0);
        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i1);
        return $f0;
    }

    static float getFloat(java.nio.ByteBuffer, int, boolean)
    {
        java.nio.ByteBuffer r0;
        int i0;
        boolean z0;
        float $f0;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        $f0 = staticinvoke <java.nio.Bits: float getFloatB(java.nio.ByteBuffer,int)>(r0, i0);
        goto label1;

     label0:
        $f0 = staticinvoke <java.nio.Bits: float getFloatL(java.nio.ByteBuffer,int)>(r0, i0);

     label1:
        return $f0;
    }

    static float getFloat(long, boolean)
    {
        long l0;
        boolean z0;
        float $f0;

        l0 := @parameter0: long;
        z0 := @parameter1: boolean;
        if z0 == 0 goto label0;

        $f0 = staticinvoke <java.nio.Bits: float getFloatB(long)>(l0);
        goto label1;

     label0:
        $f0 = staticinvoke <java.nio.Bits: float getFloatL(long)>(l0);

     label1:
        return $f0;
    }

    static void putFloatL(java.nio.ByteBuffer, int, float)
    {
        java.nio.ByteBuffer r0;
        int i0, $i1;
        float f0;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        f0 := @parameter2: float;
        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);
        staticinvoke <java.nio.Bits: void putIntL(java.nio.ByteBuffer,int,int)>(r0, i0, $i1);
        return;
    }

    static void putFloatL(long, float)
    {
        long l0;
        float f0;
        int $i1;

        l0 := @parameter0: long;
        f0 := @parameter1: float;
        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);
        staticinvoke <java.nio.Bits: void putIntL(long,int)>(l0, $i1);
        return;
    }

    static void putFloatB(java.nio.ByteBuffer, int, float)
    {
        java.nio.ByteBuffer r0;
        int i0, $i1;
        float f0;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        f0 := @parameter2: float;
        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);
        staticinvoke <java.nio.Bits: void putIntB(java.nio.ByteBuffer,int,int)>(r0, i0, $i1);
        return;
    }

    static void putFloatB(long, float)
    {
        long l0;
        float f0;
        int $i1;

        l0 := @parameter0: long;
        f0 := @parameter1: float;
        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);
        staticinvoke <java.nio.Bits: void putIntB(long,int)>(l0, $i1);
        return;
    }

    static void putFloat(java.nio.ByteBuffer, int, float, boolean)
    {
        java.nio.ByteBuffer r0;
        int i0;
        float f0;
        boolean z0;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        f0 := @parameter2: float;
        z0 := @parameter3: boolean;
        if z0 == 0 goto label0;

        staticinvoke <java.nio.Bits: void putFloatB(java.nio.ByteBuffer,int,float)>(r0, i0, f0);
        goto label1;

     label0:
        staticinvoke <java.nio.Bits: void putFloatL(java.nio.ByteBuffer,int,float)>(r0, i0, f0);

     label1:
        return;
    }

    static void putFloat(long, float, boolean)
    {
        long l0;
        float f0;
        boolean z0;

        l0 := @parameter0: long;
        f0 := @parameter1: float;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        staticinvoke <java.nio.Bits: void putFloatB(long,float)>(l0, f0);
        goto label1;

     label0:
        staticinvoke <java.nio.Bits: void putFloatL(long,float)>(l0, f0);

     label1:
        return;
    }

    static double getDoubleL(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0;
        long $l1;
        double $d0;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        $l1 = staticinvoke <java.nio.Bits: long getLongL(java.nio.ByteBuffer,int)>(r0, i0);
        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);
        return $d0;
    }

    static double getDoubleL(long)
    {
        long l0, $l1;
        double $d0;

        l0 := @parameter0: long;
        $l1 = staticinvoke <java.nio.Bits: long getLongL(long)>(l0);
        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);
        return $d0;
    }

    static double getDoubleB(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0;
        long $l1;
        double $d0;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        $l1 = staticinvoke <java.nio.Bits: long getLongB(java.nio.ByteBuffer,int)>(r0, i0);
        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);
        return $d0;
    }

    static double getDoubleB(long)
    {
        long l0, $l1;
        double $d0;

        l0 := @parameter0: long;
        $l1 = staticinvoke <java.nio.Bits: long getLongB(long)>(l0);
        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);
        return $d0;
    }

    static double getDouble(java.nio.ByteBuffer, int, boolean)
    {
        java.nio.ByteBuffer r0;
        int i0;
        boolean z0;
        double $d0;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        $d0 = staticinvoke <java.nio.Bits: double getDoubleB(java.nio.ByteBuffer,int)>(r0, i0);
        goto label1;

     label0:
        $d0 = staticinvoke <java.nio.Bits: double getDoubleL(java.nio.ByteBuffer,int)>(r0, i0);

     label1:
        return $d0;
    }

    static double getDouble(long, boolean)
    {
        long l0;
        boolean z0;
        double $d0;

        l0 := @parameter0: long;
        z0 := @parameter1: boolean;
        if z0 == 0 goto label0;

        $d0 = staticinvoke <java.nio.Bits: double getDoubleB(long)>(l0);
        goto label1;

     label0:
        $d0 = staticinvoke <java.nio.Bits: double getDoubleL(long)>(l0);

     label1:
        return $d0;
    }

    static void putDoubleL(java.nio.ByteBuffer, int, double)
    {
        java.nio.ByteBuffer r0;
        int i0;
        double d0;
        long $l1;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        d0 := @parameter2: double;
        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);
        staticinvoke <java.nio.Bits: void putLongL(java.nio.ByteBuffer,int,long)>(r0, i0, $l1);
        return;
    }

    static void putDoubleL(long, double)
    {
        long l0, $l1;
        double d0;

        l0 := @parameter0: long;
        d0 := @parameter1: double;
        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);
        staticinvoke <java.nio.Bits: void putLongL(long,long)>(l0, $l1);
        return;
    }

    static void putDoubleB(java.nio.ByteBuffer, int, double)
    {
        java.nio.ByteBuffer r0;
        int i0;
        double d0;
        long $l1;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        d0 := @parameter2: double;
        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);
        staticinvoke <java.nio.Bits: void putLongB(java.nio.ByteBuffer,int,long)>(r0, i0, $l1);
        return;
    }

    static void putDoubleB(long, double)
    {
        long l0, $l1;
        double d0;

        l0 := @parameter0: long;
        d0 := @parameter1: double;
        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);
        staticinvoke <java.nio.Bits: void putLongB(long,long)>(l0, $l1);
        return;
    }

    static void putDouble(java.nio.ByteBuffer, int, double, boolean)
    {
        java.nio.ByteBuffer r0;
        int i0;
        double d0;
        boolean z0;

        r0 := @parameter0: java.nio.ByteBuffer;
        i0 := @parameter1: int;
        d0 := @parameter2: double;
        z0 := @parameter3: boolean;
        if z0 == 0 goto label0;

        staticinvoke <java.nio.Bits: void putDoubleB(java.nio.ByteBuffer,int,double)>(r0, i0, d0);
        goto label1;

     label0:
        staticinvoke <java.nio.Bits: void putDoubleL(java.nio.ByteBuffer,int,double)>(r0, i0, d0);

     label1:
        return;
    }

    static void putDouble(long, double, boolean)
    {
        long l0;
        double d0;
        boolean z0;

        l0 := @parameter0: long;
        d0 := @parameter1: double;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        staticinvoke <java.nio.Bits: void putDoubleB(long,double)>(l0, d0);
        goto label1;

     label0:
        staticinvoke <java.nio.Bits: void putDoubleL(long,double)>(l0, d0);

     label1:
        return;
    }

    private static byte _get(long)
    {
        long l0;
        sun.misc.Unsafe $r0;
        byte $b1;

        l0 := @parameter0: long;
        $r0 = <java.nio.Bits: sun.misc.Unsafe unsafe>;
        $b1 = virtualinvoke $r0.<sun.misc.Unsafe: byte getByte(long)>(l0);
        return $b1;
    }

    private static void _put(long, byte)
    {
        long l0;
        byte b1;
        sun.misc.Unsafe $r0;

        l0 := @parameter0: long;
        b1 := @parameter1: byte;
        $r0 = <java.nio.Bits: sun.misc.Unsafe unsafe>;
        virtualinvoke $r0.<sun.misc.Unsafe: void putByte(long,byte)>(l0, b1);
        return;
    }

    static sun.misc.Unsafe unsafe()
    {
        sun.misc.Unsafe $r0;

        $r0 = <java.nio.Bits: sun.misc.Unsafe unsafe>;
        return $r0;
    }

    static java.nio.ByteOrder byteOrder()
    {
        java.nio.ByteOrder $r0, $r2;
        java.lang.Error $r1;

        $r0 = <java.nio.Bits: java.nio.ByteOrder byteOrder>;
        if $r0 != null goto label0;

        $r1 = new java.lang.Error;
        specialinvoke $r1.<java.lang.Error: void <init>(java.lang.String)>("Unknown byte order");
        throw $r1;

     label0:
        $r2 = <java.nio.Bits: java.nio.ByteOrder byteOrder>;
        return $r2;
    }

    static int pageSize()
    {
        int $i0, $i1, $i2;
        sun.misc.Unsafe $r0;

        $i0 = <java.nio.Bits: int pageSize>;
        if $i0 != -1 goto label0;

        $r0 = staticinvoke <java.nio.Bits: sun.misc.Unsafe unsafe()>();
        $i1 = virtualinvoke $r0.<sun.misc.Unsafe: int pageSize()>();
        <java.nio.Bits: int pageSize> = $i1;

     label0:
        $i2 = <java.nio.Bits: int pageSize>;
        return $i2;
    }

    static int pageCount(long)
    {
        long l0, $l3, $l4, $l5;
        int $i1, $i2, $i6, $i7;

        l0 := @parameter0: long;
        $i1 = staticinvoke <java.nio.Bits: int pageSize()>();
        $l3 = (long) $i1;
        $l4 = l0 + $l3;
        $l5 = $l4 - 1L;
        $i6 = (int) $l5;
        $i2 = staticinvoke <java.nio.Bits: int pageSize()>();
        $i7 = $i6 / $i2;
        return $i7;
    }

    static boolean unaligned()
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.String r0;
        sun.security.action.GetPropertyAction $r1;
        java.lang.Object $r2;

        $z0 = <java.nio.Bits: boolean unalignedKnown>;
        if $z0 == 0 goto label0;

        $z1 = <java.nio.Bits: boolean unaligned>;
        return $z1;

     label0:
        $r1 = new sun.security.action.GetPropertyAction;
        specialinvoke $r1.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("os.arch");
        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        r0 = (java.lang.String) $r2;
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("i386");
        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("x86");
        if $z3 != 0 goto label1;

        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("amd64");
        if $z4 != 0 goto label1;

        $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("x86_64");
        if $z5 == 0 goto label2;

     label1:
        $z6 = 1;
        goto label3;

     label2:
        $z6 = 0;

     label3:
        <java.nio.Bits: boolean unaligned> = $z6;
        <java.nio.Bits: boolean unalignedKnown> = 1;
        $z7 = <java.nio.Bits: boolean unaligned>;
        return $z7;
    }

    static void reserveMemory(long, int)
    {
        long l0, $l2, $l3, $l4, $l5, $l6, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l20, $l21, $l22, $l23, $l24, $l25, $l26;
        int i1;
        java.lang.Class $r0, r1, $r8, r9;
        java.lang.Throwable r2, r3, $r4, $r11;
        boolean $z0, $z1;
        byte $b7, $b19;
        java.lang.InterruptedException $r5, r6;
        java.lang.Thread $r7;
        java.lang.OutOfMemoryError $r10;

        l0 := @parameter0: long;
        i1 := @parameter1: int;
        $r0 = class "java/nio/Bits";
        r1 = $r0;
        entermonitor $r0;

     label0:
        $z0 = <java.nio.Bits: boolean memoryLimitSet>;
        if $z0 != 0 goto label1;

        $z1 = staticinvoke <sun.misc.VM: boolean isBooted()>();
        if $z1 == 0 goto label1;

        $l4 = staticinvoke <sun.misc.VM: long maxDirectMemory()>();
        <java.nio.Bits: long maxMemory> = $l4;
        <java.nio.Bits: boolean memoryLimitSet> = 1;

     label1:
        $l5 = (long) i1;
        $l2 = <java.nio.Bits: long maxMemory>;
        $l3 = <java.nio.Bits: long totalCapacity>;
        $l6 = $l2 - $l3;
        $b7 = $l5 cmp $l6;
        if $b7 > 0 goto label3;

        $l8 = <java.nio.Bits: long reservedMemory>;
        $l9 = $l8 + l0;
        <java.nio.Bits: long reservedMemory> = $l9;
        $l10 = <java.nio.Bits: long totalCapacity>;
        $l11 = (long) i1;
        $l12 = $l10 + $l11;
        <java.nio.Bits: long totalCapacity> = $l12;
        $l13 = <java.nio.Bits: long count>;
        $l14 = $l13 + 1L;
        <java.nio.Bits: long count> = $l14;
        exitmonitor r1;

     label2:
        return;

     label3:
        exitmonitor r1;

     label4:
        goto label8;

     label5:
        $r4 := @caughtexception;

     label6:
        r2 = $r4;
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        staticinvoke <java.lang.System: void gc()>();

     label9:
        staticinvoke <java.lang.Thread: void sleep(long)>(100L);

     label10:
        goto label12;

     label11:
        $r5 := @caughtexception;
        r6 = $r5;
        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

     label12:
        $r8 = class "java/nio/Bits";
        r9 = $r8;
        entermonitor $r8;

     label13:
        $l15 = <java.nio.Bits: long totalCapacity>;
        $l16 = (long) i1;
        $l17 = $l15 + $l16;
        $l18 = <java.nio.Bits: long maxMemory>;
        $b19 = $l17 cmp $l18;
        if $b19 <= 0 goto label14;

        $r10 = new java.lang.OutOfMemoryError;
        specialinvoke $r10.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("Direct buffer memory");
        throw $r10;

     label14:
        $l20 = <java.nio.Bits: long reservedMemory>;
        $l21 = $l20 + l0;
        <java.nio.Bits: long reservedMemory> = $l21;
        $l22 = <java.nio.Bits: long totalCapacity>;
        $l23 = (long) i1;
        $l24 = $l22 + $l23;
        <java.nio.Bits: long totalCapacity> = $l24;
        $l25 = <java.nio.Bits: long count>;
        $l26 = $l25 + 1L;
        <java.nio.Bits: long count> = $l26;
        exitmonitor r9;

     label15:
        goto label19;

     label16:
        $r11 := @caughtexception;

     label17:
        r3 = $r11;
        exitmonitor r9;

     label18:
        throw r3;

     label19:
        return;

        catch java.lang.Throwable from label0 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.InterruptedException from label9 to label10 with label11;
        catch java.lang.Throwable from label13 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    static synchronized void unreserveMemory(long, int)
    {
        long l0, $l2, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11;
        int i1;
        byte $b3, $b12;
        boolean $z0;
        java.lang.AssertionError $r0;

        l0 := @parameter0: long;
        i1 := @parameter1: int;
        $l2 = <java.nio.Bits: long reservedMemory>;
        $b3 = $l2 cmp 0L;
        if $b3 <= 0 goto label0;

        $l4 = <java.nio.Bits: long reservedMemory>;
        $l5 = $l4 - l0;
        <java.nio.Bits: long reservedMemory> = $l5;
        $l6 = <java.nio.Bits: long totalCapacity>;
        $l7 = (long) i1;
        $l8 = $l6 - $l7;
        <java.nio.Bits: long totalCapacity> = $l8;
        $l9 = <java.nio.Bits: long count>;
        $l10 = $l9 - 1L;
        <java.nio.Bits: long count> = $l10;
        $z0 = <java.nio.Bits: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $l11 = <java.nio.Bits: long reservedMemory>;
        $b12 = $l11 cmp -1L;
        if $b12 > 0 goto label0;

        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label0:
        return;
    }

    static void copyFromArray(java.lang.Object, long, long, long, long)
    {
        java.lang.Object r0;
        long l0, l1, l2, l3, l4, l5, $l8;
        byte $b6, $b7;
        sun.misc.Unsafe $r1;

        r0 := @parameter0: java.lang.Object;
        l0 := @parameter1: long;
        l1 := @parameter2: long;
        l2 := @parameter3: long;
        l3 := @parameter4: long;
        l4 = l0 + l1;

     label0:
        $b6 = l3 cmp 0L;
        if $b6 <= 0 goto label3;

        $b7 = l3 cmp 1048576L;
        if $b7 <= 0 goto label1;

        $l8 = 1048576L;
        goto label2;

     label1:
        $l8 = l3;

     label2:
        l5 = $l8;
        $r1 = <java.nio.Bits: sun.misc.Unsafe unsafe>;
        virtualinvoke $r1.<sun.misc.Unsafe: void copyMemory(java.lang.Object,long,java.lang.Object,long,long)>(r0, l4, null, l2, l5);
        l3 = l3 - l5;
        l4 = l4 + l5;
        l2 = l2 + l5;
        goto label0;

     label3:
        return;
    }

    static void copyToArray(long, java.lang.Object, long, long, long)
    {
        long l0, l1, l2, l3, l4, l5, $l8;
        java.lang.Object r0;
        byte $b6, $b7;
        sun.misc.Unsafe $r1;

        l0 := @parameter0: long;
        r0 := @parameter1: java.lang.Object;
        l1 := @parameter2: long;
        l2 := @parameter3: long;
        l3 := @parameter4: long;
        l4 = l1 + l2;

     label0:
        $b6 = l3 cmp 0L;
        if $b6 <= 0 goto label3;

        $b7 = l3 cmp 1048576L;
        if $b7 <= 0 goto label1;

        $l8 = 1048576L;
        goto label2;

     label1:
        $l8 = l3;

     label2:
        l5 = $l8;
        $r1 = <java.nio.Bits: sun.misc.Unsafe unsafe>;
        virtualinvoke $r1.<sun.misc.Unsafe: void copyMemory(java.lang.Object,long,java.lang.Object,long,long)>(null, l0, r0, l4, l5);
        l3 = l3 - l5;
        l0 = l0 + l5;
        l4 = l4 + l5;
        goto label0;

     label3:
        return;
    }

    static void copyFromCharArray(java.lang.Object, long, long, long)
    {
        java.lang.Object r0;
        long l0, l1, l2;

        r0 := @parameter0: java.lang.Object;
        l0 := @parameter1: long;
        l1 := @parameter2: long;
        l2 := @parameter3: long;
        staticinvoke <java.nio.Bits: void copyFromShortArray(java.lang.Object,long,long,long)>(r0, l0, l1, l2);
        return;
    }

    static void copyToCharArray(long, java.lang.Object, long, long)
    {
        long l0, l1, l2;
        java.lang.Object r0;

        l0 := @parameter0: long;
        r0 := @parameter1: java.lang.Object;
        l1 := @parameter2: long;
        l2 := @parameter3: long;
        staticinvoke <java.nio.Bits: void copyToShortArray(long,java.lang.Object,long,long)>(l0, r0, l1, l2);
        return;
    }

    static native void copyFromShortArray(java.lang.Object, long, long, long);

    static native void copyToShortArray(long, java.lang.Object, long, long);

    static native void copyFromIntArray(java.lang.Object, long, long, long);

    static native void copyToIntArray(long, java.lang.Object, long, long);

    static native void copyFromLongArray(java.lang.Object, long, long, long);

    static native void copyToLongArray(long, java.lang.Object, long, long);

    static long access$000()
    {
        long $l0;

        $l0 = <java.nio.Bits: long count>;
        return $l0;
    }

    static long access$100()
    {
        long $l0;

        $l0 = <java.nio.Bits: long totalCapacity>;
        return $l0;
    }

    static long access$200()
    {
        long $l0;

        $l0 = <java.nio.Bits: long reservedMemory>;
        return $l0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        long l0, $l2;
        byte b1;
        java.lang.Throwable r1, $r10;
        boolean $z0, $z1, $z2;
        sun.misc.Unsafe $r2, $r3, $r4, $r5, $r9, $r11;
        java.nio.ByteOrder $r6, $r7;
        java.lang.AssertionError $r8;
        java.nio.Bits$1 $r12;

        $r0 = class "java/nio/Bits";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.nio.Bits: boolean $assertionsDisabled> = $z1;
        $r2 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <java.nio.Bits: sun.misc.Unsafe unsafe> = $r2;
        $r3 = <java.nio.Bits: sun.misc.Unsafe unsafe>;
        l0 = virtualinvoke $r3.<sun.misc.Unsafe: long allocateMemory(long)>(8L);

     label2:
        $r4 = <java.nio.Bits: sun.misc.Unsafe unsafe>;
        virtualinvoke $r4.<sun.misc.Unsafe: void putLong(long,long)>(l0, 72623859790382856L);
        $r5 = <java.nio.Bits: sun.misc.Unsafe unsafe>;
        b1 = virtualinvoke $r5.<sun.misc.Unsafe: byte getByte(long)>(l0);
        lookupswitch(b1)
        {
            case 1: goto label3;
            case 8: goto label4;
            default: goto label5;
        };

     label3:
        $r6 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;
        <java.nio.Bits: java.nio.ByteOrder byteOrder> = $r6;
        goto label7;

     label4:
        $r7 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;
        <java.nio.Bits: java.nio.ByteOrder byteOrder> = $r7;
        goto label7;

     label5:
        $z2 = <java.nio.Bits: boolean $assertionsDisabled>;
        if $z2 != 0 goto label6;

        $r8 = new java.lang.AssertionError;
        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();
        throw $r8;

     label6:
        <java.nio.Bits: java.nio.ByteOrder byteOrder> = null;

     label7:
        $r9 = <java.nio.Bits: sun.misc.Unsafe unsafe>;
        virtualinvoke $r9.<sun.misc.Unsafe: void freeMemory(long)>(l0);
        goto label11;

     label8:
        $r10 := @caughtexception;

     label9:
        r1 = $r10;

     label10:
        $r11 = <java.nio.Bits: sun.misc.Unsafe unsafe>;
        virtualinvoke $r11.<sun.misc.Unsafe: void freeMemory(long)>(l0);
        throw r1;

     label11:
        <java.nio.Bits: int pageSize> = -1;
        <java.nio.Bits: boolean unalignedKnown> = 0;
        $l2 = staticinvoke <sun.misc.VM: long maxDirectMemory()>();
        <java.nio.Bits: long maxMemory> = $l2;
        <java.nio.Bits: boolean memoryLimitSet> = 0;
        $r12 = new java.nio.Bits$1;
        specialinvoke $r12.<java.nio.Bits$1: void <init>()>();
        staticinvoke <sun.misc.SharedSecrets: void setJavaNioAccess(sun.misc.JavaNioAccess)>($r12);
        return;

        catch java.lang.Throwable from label2 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }
}
