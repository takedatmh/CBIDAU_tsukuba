public class sun.security.krb5.internal.crypto.dk.Des3DkCrypto extends sun.security.krb5.internal.crypto.dk.DkCrypto
{
    private static final byte[] ZERO_IV;

    public void <init>()
    {
        sun.security.krb5.internal.crypto.dk.Des3DkCrypto r0;

        r0 := @this: sun.security.krb5.internal.crypto.dk.Des3DkCrypto;
        specialinvoke r0.<sun.security.krb5.internal.crypto.dk.DkCrypto: void <init>()>();
        return;
    }

    protected int getKeySeedLength()
    {
        sun.security.krb5.internal.crypto.dk.Des3DkCrypto r0;

        r0 := @this: sun.security.krb5.internal.crypto.dk.Des3DkCrypto;
        return 168;
    }

    public byte[] stringToKey(char[]) throws java.security.GeneralSecurityException
    {
        sun.security.krb5.internal.crypto.dk.Des3DkCrypto r0;
        char[] r1;
        byte[] r2, r3;
        java.lang.Throwable r4, $r5;

        r0 := @this: sun.security.krb5.internal.crypto.dk.Des3DkCrypto;
        r1 := @parameter0: char[];
        r2 = null;

     label0:
        r2 = staticinvoke <sun.security.krb5.internal.crypto.dk.Des3DkCrypto: byte[] charToUtf8(char[])>(r1);
        r3 = specialinvoke r0.<sun.security.krb5.internal.crypto.dk.Des3DkCrypto: byte[] stringToKey(byte[],byte[])>(r2, null);

     label1:
        if r2 == null goto label2;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r2, 0);

     label2:
        return r3;

     label3:
        $r5 := @caughtexception;

     label4:
        r4 = $r5;

     label5:
        if r2 == null goto label6;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r2, 0);

     label6:
        throw r4;

        catch java.lang.Throwable from label0 to label1 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private byte[] stringToKey(byte[], byte[]) throws java.security.GeneralSecurityException
    {
        sun.security.krb5.internal.crypto.dk.Des3DkCrypto r0;
        byte[] r1, r2, r3, $r5, $r6, $r7;
        int $i0, $i1;
        java.lang.RuntimeException $r4;

        r0 := @this: sun.security.krb5.internal.crypto.dk.Des3DkCrypto;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        if r2 == null goto label0;

        $i0 = lengthof r2;
        if $i0 <= 0 goto label0;

        $r4 = new java.lang.RuntimeException;
        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Invalid parameter to stringToKey");
        throw $r4;

     label0:
        $i1 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.Des3DkCrypto: int getKeySeedLength()>();
        $r5 = staticinvoke <sun.security.krb5.internal.crypto.dk.Des3DkCrypto: byte[] nfold(byte[],int)>(r1, $i1);
        r3 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.Des3DkCrypto: byte[] randomToKey(byte[])>($r5);
        $r6 = <sun.security.krb5.internal.crypto.dk.Des3DkCrypto: byte[] KERBEROS_CONSTANT>;
        $r7 = virtualinvoke r0.<sun.security.krb5.internal.crypto.dk.Des3DkCrypto: byte[] dk(byte[],byte[])>(r3, $r6);
        return $r7;
    }

    public byte[] parityFix(byte[]) throws java.security.GeneralSecurityException
    {
        sun.security.krb5.internal.crypto.dk.Des3DkCrypto r0;
        byte[] r1;

        r0 := @this: sun.security.krb5.internal.crypto.dk.Des3DkCrypto;
        r1 := @parameter0: byte[];
        staticinvoke <sun.security.krb5.internal.crypto.dk.Des3DkCrypto: void setParityBit(byte[])>(r1);
        return r1;
    }

    protected byte[] randomToKey(byte[])
    {
        sun.security.krb5.internal.crypto.dk.Des3DkCrypto r0;
        byte[] r1, r2, r3, r4, r5, $r7, $r8, $r9;
        int $i0;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: sun.security.krb5.internal.crypto.dk.Des3DkCrypto;
        r1 := @parameter0: byte[];
        $i0 = lengthof r1;
        if $i0 == 21 goto label0;

        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("input must be 168 bits");
        throw $r6;

     label0:
        $r7 = staticinvoke <sun.security.krb5.internal.crypto.dk.Des3DkCrypto: byte[] des3Expand(byte[],int,int)>(r1, 0, 7);
        r2 = staticinvoke <sun.security.krb5.internal.crypto.dk.Des3DkCrypto: byte[] keyCorrection(byte[])>($r7);
        $r8 = staticinvoke <sun.security.krb5.internal.crypto.dk.Des3DkCrypto: byte[] des3Expand(byte[],int,int)>(r1, 7, 14);
        r3 = staticinvoke <sun.security.krb5.internal.crypto.dk.Des3DkCrypto: byte[] keyCorrection(byte[])>($r8);
        $r9 = staticinvoke <sun.security.krb5.internal.crypto.dk.Des3DkCrypto: byte[] des3Expand(byte[],int,int)>(r1, 14, 21);
        r4 = staticinvoke <sun.security.krb5.internal.crypto.dk.Des3DkCrypto: byte[] keyCorrection(byte[])>($r9);
        r5 = newarray (byte)[24];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r5, 0, 8);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r5, 8, 8);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r5, 16, 8);
        return r5;
    }

    private static byte[] keyCorrection(byte[])
    {
        byte[] r0;
        java.security.InvalidKeyException r1, $r2;
        boolean $z0;
        byte $b0, $b2;
        short $s1;

        r0 := @parameter0: byte[];

     label0:
        $z0 = staticinvoke <javax.crypto.spec.DESKeySpec: boolean isWeak(byte[],int)>(r0, 0);
        if $z0 == 0 goto label1;

        $b0 = r0[7];
        $s1 = $b0 ^ 240;
        $b2 = (byte) $s1;
        r0[7] = $b2;

     label1:
        goto label3;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;

     label3:
        return r0;

        catch java.security.InvalidKeyException from label0 to label1 with label2;
    }

    private static byte[] des3Expand(byte[], int, int)
    {
        byte[] r0, r2;
        int i0, i1, i4, $i6, $i9, $i10, $i11;
        java.lang.StringBuilder $r1, $r4, $r5, $r6, $r7;
        byte b2, b3, b5, $b7, $b8;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r8;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i6 = i1 - i0;
        if $i6 == 7 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid length of DES Key Value:");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);
        throw $r3;

     label0:
        r2 = newarray (byte)[8];
        b2 = 0;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r2, 0, 7);
        b3 = 0;
        i4 = i0;

     label1:
        if i4 >= i1 goto label3;

        $b7 = r0[i4];
        $b8 = $b7 & 1;
        b5 = (byte) $b8;
        $i9 = b3 + 1;
        b3 = (byte) $i9;
        if b5 == 0 goto label2;

        $i10 = b5 << b3;
        $i11 = b2 | $i10;
        b2 = (byte) $i11;

     label2:
        i4 = i4 + 1;
        goto label1;

     label3:
        r2[7] = b2;
        staticinvoke <sun.security.krb5.internal.crypto.dk.Des3DkCrypto: void setParityBit(byte[])>(r2);
        return r2;
    }

    private static void setParityBit(byte[])
    {
        byte[] r0;
        int i0, $i2, $i4, $i5, $i6, i7;
        short s1;
        byte $b3, $b8;

        r0 := @parameter0: byte[];
        i0 = 0;

     label0:
        $i2 = lengthof r0;
        if i0 >= $i2 goto label1;

        $b3 = r0[i0];
        s1 = $b3 & 254;
        $i4 = staticinvoke <java.lang.Integer: int bitCount(int)>(s1);
        $i5 = $i4 & 1;
        $i6 = $i5 ^ 1;
        i7 = s1 | $i6;
        $b8 = (byte) i7;
        r0[i0] = $b8;
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    protected javax.crypto.Cipher getCipher(byte[], byte[], int) throws java.security.GeneralSecurityException
    {
        sun.security.krb5.internal.crypto.dk.Des3DkCrypto r0;
        byte[] r1, r2;
        int i0, $i1;
        javax.crypto.SecretKeyFactory r3;
        javax.crypto.spec.DESedeKeySpec r4, $r8;
        javax.crypto.SecretKey r5;
        javax.crypto.Cipher r6;
        javax.crypto.spec.IvParameterSpec r7, $r9;

        r0 := @this: sun.security.krb5.internal.crypto.dk.Des3DkCrypto;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        i0 := @parameter2: int;
        r3 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("desede");
        $r8 = new javax.crypto.spec.DESedeKeySpec;
        specialinvoke $r8.<javax.crypto.spec.DESedeKeySpec: void <init>(byte[],int)>(r1, 0);
        r4 = $r8;
        r5 = virtualinvoke r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r4);
        if r2 != null goto label0;

        r2 = <sun.security.krb5.internal.crypto.dk.Des3DkCrypto: byte[] ZERO_IV>;

     label0:
        r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DESede/CBC/NoPadding");
        $r9 = new javax.crypto.spec.IvParameterSpec;
        $i1 = lengthof r2;
        specialinvoke $r9.<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>(r2, 0, $i1);
        r7 = $r9;
        virtualinvoke r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(i0, r5, r7);
        return r6;
    }

    public int getChecksumLength()
    {
        sun.security.krb5.internal.crypto.dk.Des3DkCrypto r0;

        r0 := @this: sun.security.krb5.internal.crypto.dk.Des3DkCrypto;
        return 20;
    }

    protected byte[] getHmac(byte[], byte[]) throws java.security.GeneralSecurityException
    {
        sun.security.krb5.internal.crypto.dk.Des3DkCrypto r0;
        byte[] r1, r2, $r6;
        javax.crypto.spec.SecretKeySpec $r3, r4;
        javax.crypto.Mac r5;

        r0 := @this: sun.security.krb5.internal.crypto.dk.Des3DkCrypto;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        $r3 = new javax.crypto.spec.SecretKeySpec;
        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r1, "HmacSHA1");
        r4 = $r3;
        r5 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>("HmacSHA1");
        virtualinvoke r5.<javax.crypto.Mac: void init(java.security.Key)>(r4);
        $r6 = virtualinvoke r5.<javax.crypto.Mac: byte[] doFinal(byte[])>(r2);
        return $r6;
    }

    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[8];
        $r0[0] = 0;
        $r0[1] = 0;
        $r0[2] = 0;
        $r0[3] = 0;
        $r0[4] = 0;
        $r0[5] = 0;
        $r0[6] = 0;
        $r0[7] = 0;
        <sun.security.krb5.internal.crypto.dk.Des3DkCrypto: byte[] ZERO_IV> = $r0;
        return;
    }
}
