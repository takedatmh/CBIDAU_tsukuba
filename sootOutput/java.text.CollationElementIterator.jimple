public final class java.text.CollationElementIterator extends java.lang.Object
{
    public static final int NULLORDER;
    static final int UNMAPPEDCHARVALUE;
    private sun.text.normalizer.NormalizerBase text;
    private int[] buffer;
    private int expIndex;
    private java.lang.StringBuffer key;
    private int swapOrder;
    private java.text.RBCollationTables ordering;
    private java.text.RuleBasedCollator owner;

    void <init>(java.lang.String, java.text.RuleBasedCollator)
    {
        java.text.CollationElementIterator r0;
        java.lang.String r1;
        java.text.RuleBasedCollator r2;
        sun.text.normalizer.NormalizerBase$Mode r3;
        java.lang.StringBuffer $r4;
        java.text.RBCollationTables $r5;
        int $i0, $i1;
        sun.text.normalizer.NormalizerBase $r6;

        r0 := @this: java.text.CollationElementIterator;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.text.RuleBasedCollator;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text> = null;
        r0.<java.text.CollationElementIterator: int[] buffer> = null;
        r0.<java.text.CollationElementIterator: int expIndex> = 0;
        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>(5);
        r0.<java.text.CollationElementIterator: java.lang.StringBuffer key> = $r4;
        r0.<java.text.CollationElementIterator: int swapOrder> = 0;
        r0.<java.text.CollationElementIterator: java.text.RuleBasedCollator owner> = r2;
        $r5 = virtualinvoke r2.<java.text.RuleBasedCollator: java.text.RBCollationTables getTables()>();
        r0.<java.text.CollationElementIterator: java.text.RBCollationTables ordering> = $r5;
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i0 == 0 goto label0;

        $i1 = virtualinvoke r2.<java.text.RuleBasedCollator: int getDecomposition()>();
        r3 = staticinvoke <sun.text.CollatorUtilities: sun.text.normalizer.NormalizerBase$Mode toNormalizerMode(int)>($i1);
        $r6 = new sun.text.normalizer.NormalizerBase;
        specialinvoke $r6.<sun.text.normalizer.NormalizerBase: void <init>(java.lang.String,sun.text.normalizer.NormalizerBase$Mode)>(r1, r3);
        r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text> = $r6;

     label0:
        return;
    }

    void <init>(java.text.CharacterIterator, java.text.RuleBasedCollator)
    {
        java.text.CollationElementIterator r0;
        java.text.CharacterIterator r1;
        java.text.RuleBasedCollator r2;
        sun.text.normalizer.NormalizerBase$Mode r3;
        java.lang.StringBuffer $r4;
        java.text.RBCollationTables $r5;
        int $i0;
        sun.text.normalizer.NormalizerBase $r6;

        r0 := @this: java.text.CollationElementIterator;
        r1 := @parameter0: java.text.CharacterIterator;
        r2 := @parameter1: java.text.RuleBasedCollator;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text> = null;
        r0.<java.text.CollationElementIterator: int[] buffer> = null;
        r0.<java.text.CollationElementIterator: int expIndex> = 0;
        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>(5);
        r0.<java.text.CollationElementIterator: java.lang.StringBuffer key> = $r4;
        r0.<java.text.CollationElementIterator: int swapOrder> = 0;
        r0.<java.text.CollationElementIterator: java.text.RuleBasedCollator owner> = r2;
        $r5 = virtualinvoke r2.<java.text.RuleBasedCollator: java.text.RBCollationTables getTables()>();
        r0.<java.text.CollationElementIterator: java.text.RBCollationTables ordering> = $r5;
        $i0 = virtualinvoke r2.<java.text.RuleBasedCollator: int getDecomposition()>();
        r3 = staticinvoke <sun.text.CollatorUtilities: sun.text.normalizer.NormalizerBase$Mode toNormalizerMode(int)>($i0);
        $r6 = new sun.text.normalizer.NormalizerBase;
        specialinvoke $r6.<sun.text.normalizer.NormalizerBase: void <init>(java.text.CharacterIterator,sun.text.normalizer.NormalizerBase$Mode)>(r1, r3);
        r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text> = $r6;
        return;
    }

    public void reset()
    {
        java.text.CollationElementIterator r0;
        sun.text.normalizer.NormalizerBase$Mode r1;
        sun.text.normalizer.NormalizerBase $r2, $r3, $r5;
        java.text.RuleBasedCollator $r4;
        int $i0;

        r0 := @this: java.text.CollationElementIterator;
        $r2 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        if $r2 == null goto label0;

        $r3 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        virtualinvoke $r3.<sun.text.normalizer.NormalizerBase: void reset()>();
        $r4 = r0.<java.text.CollationElementIterator: java.text.RuleBasedCollator owner>;
        $i0 = virtualinvoke $r4.<java.text.RuleBasedCollator: int getDecomposition()>();
        r1 = staticinvoke <sun.text.CollatorUtilities: sun.text.normalizer.NormalizerBase$Mode toNormalizerMode(int)>($i0);
        $r5 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        virtualinvoke $r5.<sun.text.normalizer.NormalizerBase: void setMode(sun.text.normalizer.NormalizerBase$Mode)>(r1);

     label0:
        r0.<java.text.CollationElementIterator: int[] buffer> = null;
        r0.<java.text.CollationElementIterator: int expIndex> = 0;
        r0.<java.text.CollationElementIterator: int swapOrder> = 0;
        return;
    }

    public int next()
    {
        java.text.CollationElementIterator r0;
        sun.text.normalizer.NormalizerBase$Mode r1, r2;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i14, $i15, i16, i17, $i18, $i19, i21, $i23;
        char[] r4;
        sun.text.normalizer.NormalizerBase $r5, $r6, $r8, $r12, $r19, $r23, $r24, $r28;
        java.text.RuleBasedCollator $r7;
        int[] $r9, $r10, $r11, $r15, $r16, $r20, $r21, $r22, $r25, $r26, $r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        char $c12, $c13;
        java.text.RBCollationTables $r13, $r14, $r18;

        r0 := @this: java.text.CollationElementIterator;
        $r5 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        if $r5 != null goto label0;

        return -1;

     label0:
        $r6 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        r1 = virtualinvoke $r6.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode getMode()>();
        $r7 = r0.<java.text.CollationElementIterator: java.text.RuleBasedCollator owner>;
        $i3 = virtualinvoke $r7.<java.text.RuleBasedCollator: int getDecomposition()>();
        r2 = staticinvoke <sun.text.CollatorUtilities: sun.text.normalizer.NormalizerBase$Mode toNormalizerMode(int)>($i3);
        if r1 == r2 goto label1;

        $r8 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        virtualinvoke $r8.<sun.text.normalizer.NormalizerBase: void setMode(sun.text.normalizer.NormalizerBase$Mode)>(r2);

     label1:
        $r9 = r0.<java.text.CollationElementIterator: int[] buffer>;
        if $r9 == null goto label3;

        $i4 = r0.<java.text.CollationElementIterator: int expIndex>;
        $r10 = r0.<java.text.CollationElementIterator: int[] buffer>;
        $i5 = lengthof $r10;
        if $i4 >= $i5 goto label2;

        $r11 = r0.<java.text.CollationElementIterator: int[] buffer>;
        $i0 = r0.<java.text.CollationElementIterator: int expIndex>;
        $i6 = $i0 + 1;
        r0.<java.text.CollationElementIterator: int expIndex> = $i6;
        $i7 = $r11[$i0];
        $i8 = virtualinvoke r0.<java.text.CollationElementIterator: int strengthOrder(int)>($i7);
        return $i8;

     label2:
        r0.<java.text.CollationElementIterator: int[] buffer> = null;
        r0.<java.text.CollationElementIterator: int expIndex> = 0;
        goto label5;

     label3:
        $i9 = r0.<java.text.CollationElementIterator: int swapOrder>;
        if $i9 == 0 goto label5;

        $i10 = r0.<java.text.CollationElementIterator: int swapOrder>;
        $z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>($i10);
        if $z0 == 0 goto label4;

        $i11 = r0.<java.text.CollationElementIterator: int swapOrder>;
        r4 = staticinvoke <java.lang.Character: char[] toChars(int)>($i11);
        $c12 = r4[1];
        r0.<java.text.CollationElementIterator: int swapOrder> = $c12;
        $c13 = r4[0];
        $i14 = $c13 << 16;
        return $i14;

     label4:
        $i15 = r0.<java.text.CollationElementIterator: int swapOrder>;
        i16 = $i15 << 16;
        r0.<java.text.CollationElementIterator: int swapOrder> = 0;
        return i16;

     label5:
        $r12 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        i17 = virtualinvoke $r12.<sun.text.normalizer.NormalizerBase: int next()>();
        if i17 != -1 goto label6;

        return -1;

     label6:
        $r13 = r0.<java.text.CollationElementIterator: java.text.RBCollationTables ordering>;
        i1 = virtualinvoke $r13.<java.text.RBCollationTables: int getUnicodeOrder(int)>(i17);
        if i1 != -1 goto label7;

        r0.<java.text.CollationElementIterator: int swapOrder> = i17;
        return 2147418112;

     label7:
        if i1 < 2130706432 goto label8;

        i1 = specialinvoke r0.<java.text.CollationElementIterator: int nextContractChar(int)>(i17);

     label8:
        if i1 < 2113929216 goto label9;

        $r14 = r0.<java.text.CollationElementIterator: java.text.RBCollationTables ordering>;
        $r15 = virtualinvoke $r14.<java.text.RBCollationTables: int[] getExpandValueList(int)>(i1);
        r0.<java.text.CollationElementIterator: int[] buffer> = $r15;
        r0.<java.text.CollationElementIterator: int expIndex> = 0;
        $r16 = r0.<java.text.CollationElementIterator: int[] buffer>;
        $i18 = r0.<java.text.CollationElementIterator: int expIndex>;
        $i19 = $i18 + 1;
        r0.<java.text.CollationElementIterator: int expIndex> = $i19;
        i1 = $r16[$i18];

     label9:
        $r18 = r0.<java.text.CollationElementIterator: java.text.RBCollationTables ordering>;
        $z1 = virtualinvoke $r18.<java.text.RBCollationTables: boolean isSEAsianSwapping()>();
        if $z1 == 0 goto label13;

        $z2 = staticinvoke <java.text.CollationElementIterator: boolean isThaiPreVowel(int)>(i17);
        if $z2 == 0 goto label11;

        $r19 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        i2 = virtualinvoke $r19.<sun.text.normalizer.NormalizerBase: int next()>();
        $z3 = staticinvoke <java.text.CollationElementIterator: boolean isThaiBaseConsonant(int)>(i2);
        if $z3 == 0 goto label10;

        $r20 = r0.<java.text.CollationElementIterator: int[] buffer>;
        $r21 = specialinvoke r0.<java.text.CollationElementIterator: int[] makeReorderedBuffer(int,int,int[],boolean)>(i2, i1, $r20, 1);
        r0.<java.text.CollationElementIterator: int[] buffer> = $r21;
        $r22 = r0.<java.text.CollationElementIterator: int[] buffer>;
        i1 = $r22[0];
        r0.<java.text.CollationElementIterator: int expIndex> = 1;
        goto label11;

     label10:
        if i2 == -1 goto label11;

        $r23 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        virtualinvoke $r23.<sun.text.normalizer.NormalizerBase: int previous()>();

     label11:
        $z4 = staticinvoke <java.text.CollationElementIterator: boolean isLaoPreVowel(int)>(i17);
        if $z4 == 0 goto label13;

        $r24 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        i21 = virtualinvoke $r24.<sun.text.normalizer.NormalizerBase: int next()>();
        $z5 = staticinvoke <java.text.CollationElementIterator: boolean isLaoBaseConsonant(int)>(i21);
        if $z5 == 0 goto label12;

        $r25 = r0.<java.text.CollationElementIterator: int[] buffer>;
        $r26 = specialinvoke r0.<java.text.CollationElementIterator: int[] makeReorderedBuffer(int,int,int[],boolean)>(i21, i1, $r25, 1);
        r0.<java.text.CollationElementIterator: int[] buffer> = $r26;
        $r27 = r0.<java.text.CollationElementIterator: int[] buffer>;
        i1 = $r27[0];
        r0.<java.text.CollationElementIterator: int expIndex> = 1;
        goto label13;

     label12:
        if i21 == -1 goto label13;

        $r28 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        virtualinvoke $r28.<sun.text.normalizer.NormalizerBase: int previous()>();

     label13:
        $i23 = virtualinvoke r0.<java.text.CollationElementIterator: int strengthOrder(int)>(i1);
        return $i23;
    }

    public int previous()
    {
        java.text.CollationElementIterator r0;
        sun.text.normalizer.NormalizerBase$Mode r1, r2;
        char[] r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i14, i15, i16, $i17, $i18, $i19, $i20, $i21, $i22, i24, $i25, $i26, $i27, $i29;
        sun.text.normalizer.NormalizerBase $r5, $r6, $r8, $r11, $r19, $r24, $r25, $r30;
        java.text.RuleBasedCollator $r7;
        int[] $r9, $r10, $r14, $r15, $r16, $r20, $r21, $r22, $r23, $r26, $r27, $r28, $r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        char $c11, $c12;
        java.text.RBCollationTables $r12, $r13, $r18;

        r0 := @this: java.text.CollationElementIterator;
        $r5 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        if $r5 != null goto label0;

        return -1;

     label0:
        $r6 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        r1 = virtualinvoke $r6.<sun.text.normalizer.NormalizerBase: sun.text.normalizer.NormalizerBase$Mode getMode()>();
        $r7 = r0.<java.text.CollationElementIterator: java.text.RuleBasedCollator owner>;
        $i2 = virtualinvoke $r7.<java.text.RuleBasedCollator: int getDecomposition()>();
        r2 = staticinvoke <sun.text.CollatorUtilities: sun.text.normalizer.NormalizerBase$Mode toNormalizerMode(int)>($i2);
        if r1 == r2 goto label1;

        $r8 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        virtualinvoke $r8.<sun.text.normalizer.NormalizerBase: void setMode(sun.text.normalizer.NormalizerBase$Mode)>(r2);

     label1:
        $r9 = r0.<java.text.CollationElementIterator: int[] buffer>;
        if $r9 == null goto label3;

        $i3 = r0.<java.text.CollationElementIterator: int expIndex>;
        if $i3 <= 0 goto label2;

        $r10 = r0.<java.text.CollationElementIterator: int[] buffer>;
        $i4 = r0.<java.text.CollationElementIterator: int expIndex>;
        $i5 = $i4 - 1;
        r0.<java.text.CollationElementIterator: int expIndex> = $i5;
        $i6 = $r10[$i5];
        $i7 = virtualinvoke r0.<java.text.CollationElementIterator: int strengthOrder(int)>($i6);
        return $i7;

     label2:
        r0.<java.text.CollationElementIterator: int[] buffer> = null;
        r0.<java.text.CollationElementIterator: int expIndex> = 0;
        goto label5;

     label3:
        $i8 = r0.<java.text.CollationElementIterator: int swapOrder>;
        if $i8 == 0 goto label5;

        $i9 = r0.<java.text.CollationElementIterator: int swapOrder>;
        $z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>($i9);
        if $z0 == 0 goto label4;

        $i10 = r0.<java.text.CollationElementIterator: int swapOrder>;
        r4 = staticinvoke <java.lang.Character: char[] toChars(int)>($i10);
        $c11 = r4[1];
        r0.<java.text.CollationElementIterator: int swapOrder> = $c11;
        $c12 = r4[0];
        $i13 = $c12 << 16;
        return $i13;

     label4:
        $i14 = r0.<java.text.CollationElementIterator: int swapOrder>;
        i15 = $i14 << 16;
        r0.<java.text.CollationElementIterator: int swapOrder> = 0;
        return i15;

     label5:
        $r11 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        i16 = virtualinvoke $r11.<sun.text.normalizer.NormalizerBase: int previous()>();
        if i16 != -1 goto label6;

        return -1;

     label6:
        $r12 = r0.<java.text.CollationElementIterator: java.text.RBCollationTables ordering>;
        i0 = virtualinvoke $r12.<java.text.RBCollationTables: int getUnicodeOrder(int)>(i16);
        if i0 != -1 goto label7;

        r0.<java.text.CollationElementIterator: int swapOrder> = 2147418112;
        return i16;

     label7:
        if i0 < 2130706432 goto label8;

        i0 = specialinvoke r0.<java.text.CollationElementIterator: int prevContractChar(int)>(i16);

     label8:
        if i0 < 2113929216 goto label9;

        $r13 = r0.<java.text.CollationElementIterator: java.text.RBCollationTables ordering>;
        $r14 = virtualinvoke $r13.<java.text.RBCollationTables: int[] getExpandValueList(int)>(i0);
        r0.<java.text.CollationElementIterator: int[] buffer> = $r14;
        $r15 = r0.<java.text.CollationElementIterator: int[] buffer>;
        $i17 = lengthof $r15;
        r0.<java.text.CollationElementIterator: int expIndex> = $i17;
        $r16 = r0.<java.text.CollationElementIterator: int[] buffer>;
        $i18 = r0.<java.text.CollationElementIterator: int expIndex>;
        $i19 = $i18 - 1;
        r0.<java.text.CollationElementIterator: int expIndex> = $i19;
        i0 = $r16[$i19];

     label9:
        $r18 = r0.<java.text.CollationElementIterator: java.text.RBCollationTables ordering>;
        $z1 = virtualinvoke $r18.<java.text.RBCollationTables: boolean isSEAsianSwapping()>();
        if $z1 == 0 goto label13;

        $z2 = staticinvoke <java.text.CollationElementIterator: boolean isThaiBaseConsonant(int)>(i16);
        if $z2 == 0 goto label11;

        $r19 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        i1 = virtualinvoke $r19.<sun.text.normalizer.NormalizerBase: int previous()>();
        $z3 = staticinvoke <java.text.CollationElementIterator: boolean isThaiPreVowel(int)>(i1);
        if $z3 == 0 goto label10;

        $r20 = r0.<java.text.CollationElementIterator: int[] buffer>;
        $r21 = specialinvoke r0.<java.text.CollationElementIterator: int[] makeReorderedBuffer(int,int,int[],boolean)>(i1, i0, $r20, 0);
        r0.<java.text.CollationElementIterator: int[] buffer> = $r21;
        $r22 = r0.<java.text.CollationElementIterator: int[] buffer>;
        $i20 = lengthof $r22;
        $i21 = $i20 - 1;
        r0.<java.text.CollationElementIterator: int expIndex> = $i21;
        $r23 = r0.<java.text.CollationElementIterator: int[] buffer>;
        $i22 = r0.<java.text.CollationElementIterator: int expIndex>;
        i0 = $r23[$i22];
        goto label11;

     label10:
        $r24 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        virtualinvoke $r24.<sun.text.normalizer.NormalizerBase: int next()>();

     label11:
        $z4 = staticinvoke <java.text.CollationElementIterator: boolean isLaoBaseConsonant(int)>(i16);
        if $z4 == 0 goto label13;

        $r25 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        i24 = virtualinvoke $r25.<sun.text.normalizer.NormalizerBase: int previous()>();
        $z5 = staticinvoke <java.text.CollationElementIterator: boolean isLaoPreVowel(int)>(i24);
        if $z5 == 0 goto label12;

        $r26 = r0.<java.text.CollationElementIterator: int[] buffer>;
        $r27 = specialinvoke r0.<java.text.CollationElementIterator: int[] makeReorderedBuffer(int,int,int[],boolean)>(i24, i0, $r26, 0);
        r0.<java.text.CollationElementIterator: int[] buffer> = $r27;
        $r28 = r0.<java.text.CollationElementIterator: int[] buffer>;
        $i25 = lengthof $r28;
        $i26 = $i25 - 1;
        r0.<java.text.CollationElementIterator: int expIndex> = $i26;
        $r29 = r0.<java.text.CollationElementIterator: int[] buffer>;
        $i27 = r0.<java.text.CollationElementIterator: int expIndex>;
        i0 = $r29[$i27];
        goto label13;

     label12:
        $r30 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        virtualinvoke $r30.<sun.text.normalizer.NormalizerBase: int next()>();

     label13:
        $i29 = virtualinvoke r0.<java.text.CollationElementIterator: int strengthOrder(int)>(i0);
        return $i29;
    }

    public static final int primaryOrder(int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;
        i1 = i0 & -65536;
        $i2 = i1 >>> 16;
        return $i2;
    }

    public static final short secondaryOrder(int)
    {
        int i0, i1, $i2;
        short $s3;

        i0 := @parameter0: int;
        i1 = i0 & 65280;
        $i2 = i1 >> 8;
        $s3 = (short) $i2;
        return $s3;
    }

    public static final short tertiaryOrder(int)
    {
        int i0, $i1, i2;
        short $s3;

        i0 := @parameter0: int;
        $i1 = i0 & 255;
        i2 = $i1;
        $s3 = (short) $i1;
        return $s3;
    }

    final int strengthOrder(int)
    {
        java.text.CollationElementIterator r0;
        int i0, i1;
        java.text.RuleBasedCollator $r1;

        r0 := @this: java.text.CollationElementIterator;
        i0 := @parameter0: int;
        $r1 = r0.<java.text.CollationElementIterator: java.text.RuleBasedCollator owner>;
        i1 = virtualinvoke $r1.<java.text.RuleBasedCollator: int getStrength()>();
        if i1 != 0 goto label0;

        i0 = i0 & -65536;
        goto label1;

     label0:
        if i1 != 1 goto label1;

        i0 = i0 & -256;

     label1:
        return i0;
    }

    public void setOffset(int)
    {
        java.text.CollationElementIterator r0;
        int i0, i1, i2, $i3, $i4, $i5;
        sun.text.normalizer.NormalizerBase $r1, $r2, $r3, $r4, $r5, $r8, $r9, $r10, $r11, $r12;
        java.text.RBCollationTables $r6, $r7;
        boolean $z0, $z1;

        r0 := @this: java.text.CollationElementIterator;
        i0 := @parameter0: int;
        $r1 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        if $r1 == null goto label6;

        $r2 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        $i3 = virtualinvoke $r2.<sun.text.normalizer.NormalizerBase: int getBeginIndex()>();
        if i0 < $i3 goto label0;

        $r3 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        $i4 = virtualinvoke $r3.<sun.text.normalizer.NormalizerBase: int getEndIndex()>();
        if i0 < $i4 goto label1;

     label0:
        $r4 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        virtualinvoke $r4.<sun.text.normalizer.NormalizerBase: void setIndexOnly(int)>(i0);
        goto label6;

     label1:
        $r5 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        i1 = virtualinvoke $r5.<sun.text.normalizer.NormalizerBase: int setIndex(int)>(i0);
        $r6 = r0.<java.text.CollationElementIterator: java.text.RBCollationTables ordering>;
        $z0 = virtualinvoke $r6.<java.text.RBCollationTables: boolean usedInContractSeq(int)>(i1);
        if $z0 == 0 goto label6;

     label2:
        $r7 = r0.<java.text.CollationElementIterator: java.text.RBCollationTables ordering>;
        $z1 = virtualinvoke $r7.<java.text.RBCollationTables: boolean usedInContractSeq(int)>(i1);
        if $z1 == 0 goto label3;

        $r8 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        i1 = virtualinvoke $r8.<sun.text.normalizer.NormalizerBase: int previous()>();
        goto label2;

     label3:
        $r9 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        i2 = virtualinvoke $r9.<sun.text.normalizer.NormalizerBase: int getIndex()>();

     label4:
        $r10 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        $i5 = virtualinvoke $r10.<sun.text.normalizer.NormalizerBase: int getIndex()>();
        if $i5 > i0 goto label5;

        $r11 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        i2 = virtualinvoke $r11.<sun.text.normalizer.NormalizerBase: int getIndex()>();
        virtualinvoke r0.<java.text.CollationElementIterator: int next()>();
        goto label4;

     label5:
        $r12 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        virtualinvoke $r12.<sun.text.normalizer.NormalizerBase: void setIndexOnly(int)>(i2);

     label6:
        r0.<java.text.CollationElementIterator: int[] buffer> = null;
        r0.<java.text.CollationElementIterator: int expIndex> = 0;
        r0.<java.text.CollationElementIterator: int swapOrder> = 0;
        return;
    }

    public int getOffset()
    {
        java.text.CollationElementIterator r0;
        sun.text.normalizer.NormalizerBase $r1, $r2;
        int $i0;

        r0 := @this: java.text.CollationElementIterator;
        $r1 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        if $r1 == null goto label0;

        $r2 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        $i0 = virtualinvoke $r2.<sun.text.normalizer.NormalizerBase: int getIndex()>();
        goto label1;

     label0:
        $i0 = 0;

     label1:
        return $i0;
    }

    public int getMaxExpansion(int)
    {
        java.text.CollationElementIterator r0;
        int i0, $i1;
        java.text.RBCollationTables $r1;

        r0 := @this: java.text.CollationElementIterator;
        i0 := @parameter0: int;
        $r1 = r0.<java.text.CollationElementIterator: java.text.RBCollationTables ordering>;
        $i1 = virtualinvoke $r1.<java.text.RBCollationTables: int getMaxExpansion(int)>(i0);
        return $i1;
    }

    public void setText(java.lang.String)
    {
        java.text.CollationElementIterator r0;
        java.lang.String r1;
        sun.text.normalizer.NormalizerBase$Mode r2;
        java.text.RuleBasedCollator $r3;
        int $i0;
        sun.text.normalizer.NormalizerBase $r4, $r5, $r6, $r7;

        r0 := @this: java.text.CollationElementIterator;
        r1 := @parameter0: java.lang.String;
        r0.<java.text.CollationElementIterator: int[] buffer> = null;
        r0.<java.text.CollationElementIterator: int swapOrder> = 0;
        r0.<java.text.CollationElementIterator: int expIndex> = 0;
        $r3 = r0.<java.text.CollationElementIterator: java.text.RuleBasedCollator owner>;
        $i0 = virtualinvoke $r3.<java.text.RuleBasedCollator: int getDecomposition()>();
        r2 = staticinvoke <sun.text.CollatorUtilities: sun.text.normalizer.NormalizerBase$Mode toNormalizerMode(int)>($i0);
        $r4 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        if $r4 != null goto label0;

        $r5 = new sun.text.normalizer.NormalizerBase;
        specialinvoke $r5.<sun.text.normalizer.NormalizerBase: void <init>(java.lang.String,sun.text.normalizer.NormalizerBase$Mode)>(r1, r2);
        r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text> = $r5;
        goto label1;

     label0:
        $r6 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        virtualinvoke $r6.<sun.text.normalizer.NormalizerBase: void setMode(sun.text.normalizer.NormalizerBase$Mode)>(r2);
        $r7 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        virtualinvoke $r7.<sun.text.normalizer.NormalizerBase: void setText(java.lang.String)>(r1);

     label1:
        return;
    }

    public void setText(java.text.CharacterIterator)
    {
        java.text.CollationElementIterator r0;
        java.text.CharacterIterator r1;
        sun.text.normalizer.NormalizerBase$Mode r2;
        java.text.RuleBasedCollator $r3;
        int $i0;
        sun.text.normalizer.NormalizerBase $r4, $r5, $r6, $r7;

        r0 := @this: java.text.CollationElementIterator;
        r1 := @parameter0: java.text.CharacterIterator;
        r0.<java.text.CollationElementIterator: int[] buffer> = null;
        r0.<java.text.CollationElementIterator: int swapOrder> = 0;
        r0.<java.text.CollationElementIterator: int expIndex> = 0;
        $r3 = r0.<java.text.CollationElementIterator: java.text.RuleBasedCollator owner>;
        $i0 = virtualinvoke $r3.<java.text.RuleBasedCollator: int getDecomposition()>();
        r2 = staticinvoke <sun.text.CollatorUtilities: sun.text.normalizer.NormalizerBase$Mode toNormalizerMode(int)>($i0);
        $r4 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        if $r4 != null goto label0;

        $r5 = new sun.text.normalizer.NormalizerBase;
        specialinvoke $r5.<sun.text.normalizer.NormalizerBase: void <init>(java.text.CharacterIterator,sun.text.normalizer.NormalizerBase$Mode)>(r1, r2);
        r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text> = $r5;
        goto label1;

     label0:
        $r6 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        virtualinvoke $r6.<sun.text.normalizer.NormalizerBase: void setMode(sun.text.normalizer.NormalizerBase$Mode)>(r2);
        $r7 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        virtualinvoke $r7.<sun.text.normalizer.NormalizerBase: void setText(java.text.CharacterIterator)>(r1);

     label1:
        return;
    }

    private static final boolean isThaiPreVowel(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;
        if i0 < 3648 goto label0;

        if i0 > 3652 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private static final boolean isThaiBaseConsonant(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;
        if i0 < 3585 goto label0;

        if i0 > 3630 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private static final boolean isLaoPreVowel(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;
        if i0 < 3776 goto label0;

        if i0 > 3780 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private static final boolean isLaoBaseConsonant(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;
        if i0 < 3713 goto label0;

        if i0 > 3758 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private int[] makeReorderedBuffer(int, int, int[], boolean)
    {
        java.text.CollationElementIterator r0;
        int i0, i1, i2, i3, $i4, $i5, i6, $i7, i8, $i9;
        int[] r1, r2, r3, r4;
        boolean z0;
        java.text.RBCollationTables $r5, $r6;

        r0 := @this: java.text.CollationElementIterator;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: int[];
        z0 := @parameter3: boolean;
        $r5 = r0.<java.text.CollationElementIterator: java.text.RBCollationTables ordering>;
        i2 = virtualinvoke $r5.<java.text.RBCollationTables: int getUnicodeOrder(int)>(i0);
        if i2 < 2130706432 goto label2;

        if z0 == 0 goto label0;

        $i4 = specialinvoke r0.<java.text.CollationElementIterator: int nextContractChar(int)>(i0);
        goto label1;

     label0:
        $i4 = specialinvoke r0.<java.text.CollationElementIterator: int prevContractChar(int)>(i0);

     label1:
        i2 = $i4;

     label2:
        r2 = null;
        if i2 < 2113929216 goto label3;

        $r6 = r0.<java.text.CollationElementIterator: java.text.RBCollationTables ordering>;
        r2 = virtualinvoke $r6.<java.text.RBCollationTables: int[] getExpandValueList(int)>(i2);

     label3:
        if z0 != 0 goto label4;

        i3 = i2;
        i2 = i1;
        i1 = i3;
        r3 = r2;
        r2 = r1;
        r1 = r3;

     label4:
        if r2 != null goto label5;

        if r1 != null goto label5;

        r4 = newarray (int)[2];
        r4[0] = i2;
        r4[1] = i1;
        goto label13;

     label5:
        if r2 != null goto label6;

        $i5 = 1;
        goto label7;

     label6:
        $i5 = lengthof r2;

     label7:
        i6 = $i5;
        if r1 != null goto label8;

        $i7 = 1;
        goto label9;

     label8:
        $i7 = lengthof r1;

     label9:
        i8 = $i7;
        $i9 = i6 + i8;
        r4 = newarray (int)[$i9];
        if r2 != null goto label10;

        r4[0] = i2;
        goto label11;

     label10:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r4, 0, i6);

     label11:
        if r1 != null goto label12;

        r4[i6] = i1;
        goto label13;

     label12:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r4, i6, i8);

     label13:
        return r4;
    }

    static final boolean isIgnorable(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;
        $i1 = staticinvoke <java.text.CollationElementIterator: int primaryOrder(int)>(i0);
        if $i1 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private int nextContractChar(int)
    {
        java.text.CollationElementIterator r0;
        int i0, i1, i2, i3, i4, i7, $i8, $i9, i10, $i11;
        java.util.Vector r1;
        java.text.EntryPair r2, r8, r20;
        sun.text.normalizer.NormalizerBase r3, $r10, $r24;
        java.lang.String r4, $r9, $r21, $r22, $r23;
        java.text.RBCollationTables $r5;
        java.lang.Object $r6, $r7, $r11, $r19;
        java.lang.StringBuffer $r12, $r13, $r16, $r18;
        boolean $z0, $z1, $z2;
        char[] $r14;
        char $c6;

        r0 := @this: java.text.CollationElementIterator;
        i0 := @parameter0: int;
        $r5 = r0.<java.text.CollationElementIterator: java.text.RBCollationTables ordering>;
        r1 = virtualinvoke $r5.<java.text.RBCollationTables: java.util.Vector getContractValues(int)>(i0);
        $r6 = virtualinvoke r1.<java.util.Vector: java.lang.Object firstElement()>();
        r2 = (java.text.EntryPair) $r6;
        i1 = r2.<java.text.EntryPair: int value>;
        $r7 = virtualinvoke r1.<java.util.Vector: java.lang.Object lastElement()>();
        r8 = (java.text.EntryPair) $r7;
        $r9 = r8.<java.text.EntryPair: java.lang.String entryName>;
        i2 = virtualinvoke $r9.<java.lang.String: int length()>();
        $r10 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        $r11 = virtualinvoke $r10.<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>();
        r3 = (sun.text.normalizer.NormalizerBase) $r11;
        virtualinvoke r3.<sun.text.normalizer.NormalizerBase: int previous()>();
        $r12 = r0.<java.text.CollationElementIterator: java.lang.StringBuffer key>;
        virtualinvoke $r12.<java.lang.StringBuffer: void setLength(int)>(0);
        i3 = virtualinvoke r3.<sun.text.normalizer.NormalizerBase: int next()>();

     label0:
        if i2 <= 0 goto label3;

        if i3 == -1 goto label3;

        $z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i3);
        if $z0 == 0 goto label1;

        $r13 = r0.<java.text.CollationElementIterator: java.lang.StringBuffer key>;
        $r14 = staticinvoke <java.lang.Character: char[] toChars(int)>(i3);
        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r14);
        i2 = i2 + -2;
        goto label2;

     label1:
        $r16 = r0.<java.text.CollationElementIterator: java.lang.StringBuffer key>;
        $c6 = (char) i3;
        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c6);
        i2 = i2 + -1;

     label2:
        i3 = virtualinvoke r3.<sun.text.normalizer.NormalizerBase: int next()>();
        goto label0;

     label3:
        $r18 = r0.<java.text.CollationElementIterator: java.lang.StringBuffer key>;
        r4 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();
        i7 = 1;
        $i8 = virtualinvoke r1.<java.util.Vector: int size()>();
        i4 = $i8 - 1;

     label4:
        if i4 <= 0 goto label7;

        $r19 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i4);
        r20 = (java.text.EntryPair) $r19;
        $z1 = r20.<java.text.EntryPair: boolean fwd>;
        if $z1 != 0 goto label5;

        goto label6;

     label5:
        $r21 = r20.<java.text.EntryPair: java.lang.String entryName>;
        $z2 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>($r21);
        if $z2 == 0 goto label6;

        $r22 = r20.<java.text.EntryPair: java.lang.String entryName>;
        $i9 = virtualinvoke $r22.<java.lang.String: int length()>();
        if $i9 <= i7 goto label6;

        $r23 = r20.<java.text.EntryPair: java.lang.String entryName>;
        i7 = virtualinvoke $r23.<java.lang.String: int length()>();
        i1 = r20.<java.text.EntryPair: int value>;

     label6:
        i4 = i4 + -1;
        goto label4;

     label7:
        if i7 <= 1 goto label8;

        $r24 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        i10 = virtualinvoke $r24.<sun.text.normalizer.NormalizerBase: int next()>();
        $i11 = staticinvoke <java.lang.Character: int charCount(int)>(i10);
        i7 = i7 - $i11;
        goto label7;

     label8:
        return i1;
    }

    private int prevContractChar(int)
    {
        java.text.CollationElementIterator r0;
        int i0, i1, i2, i3, i4, i7, $i8, $i9, i10, $i11;
        java.util.Vector r1;
        java.text.EntryPair r2, r8, r20;
        sun.text.normalizer.NormalizerBase r3, $r10, $r24;
        java.lang.String r4, $r9, $r21, $r22, $r23;
        java.text.RBCollationTables $r5;
        java.lang.Object $r6, $r7, $r11, $r19;
        java.lang.StringBuffer $r12, $r13, $r16, $r18;
        boolean $z0, $z1, $z2;
        char[] $r14;
        char $c6;

        r0 := @this: java.text.CollationElementIterator;
        i0 := @parameter0: int;
        $r5 = r0.<java.text.CollationElementIterator: java.text.RBCollationTables ordering>;
        r1 = virtualinvoke $r5.<java.text.RBCollationTables: java.util.Vector getContractValues(int)>(i0);
        $r6 = virtualinvoke r1.<java.util.Vector: java.lang.Object firstElement()>();
        r2 = (java.text.EntryPair) $r6;
        i1 = r2.<java.text.EntryPair: int value>;
        $r7 = virtualinvoke r1.<java.util.Vector: java.lang.Object lastElement()>();
        r8 = (java.text.EntryPair) $r7;
        $r9 = r8.<java.text.EntryPair: java.lang.String entryName>;
        i2 = virtualinvoke $r9.<java.lang.String: int length()>();
        $r10 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        $r11 = virtualinvoke $r10.<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>();
        r3 = (sun.text.normalizer.NormalizerBase) $r11;
        virtualinvoke r3.<sun.text.normalizer.NormalizerBase: int next()>();
        $r12 = r0.<java.text.CollationElementIterator: java.lang.StringBuffer key>;
        virtualinvoke $r12.<java.lang.StringBuffer: void setLength(int)>(0);
        i3 = virtualinvoke r3.<sun.text.normalizer.NormalizerBase: int previous()>();

     label0:
        if i2 <= 0 goto label3;

        if i3 == -1 goto label3;

        $z0 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i3);
        if $z0 == 0 goto label1;

        $r13 = r0.<java.text.CollationElementIterator: java.lang.StringBuffer key>;
        $r14 = staticinvoke <java.lang.Character: char[] toChars(int)>(i3);
        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r14);
        i2 = i2 + -2;
        goto label2;

     label1:
        $r16 = r0.<java.text.CollationElementIterator: java.lang.StringBuffer key>;
        $c6 = (char) i3;
        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c6);
        i2 = i2 + -1;

     label2:
        i3 = virtualinvoke r3.<sun.text.normalizer.NormalizerBase: int previous()>();
        goto label0;

     label3:
        $r18 = r0.<java.text.CollationElementIterator: java.lang.StringBuffer key>;
        r4 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();
        i7 = 1;
        $i8 = virtualinvoke r1.<java.util.Vector: int size()>();
        i4 = $i8 - 1;

     label4:
        if i4 <= 0 goto label7;

        $r19 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i4);
        r20 = (java.text.EntryPair) $r19;
        $z1 = r20.<java.text.EntryPair: boolean fwd>;
        if $z1 == 0 goto label5;

        goto label6;

     label5:
        $r21 = r20.<java.text.EntryPair: java.lang.String entryName>;
        $z2 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>($r21);
        if $z2 == 0 goto label6;

        $r22 = r20.<java.text.EntryPair: java.lang.String entryName>;
        $i9 = virtualinvoke $r22.<java.lang.String: int length()>();
        if $i9 <= i7 goto label6;

        $r23 = r20.<java.text.EntryPair: java.lang.String entryName>;
        i7 = virtualinvoke $r23.<java.lang.String: int length()>();
        i1 = r20.<java.text.EntryPair: int value>;

     label6:
        i4 = i4 + -1;
        goto label4;

     label7:
        if i7 <= 1 goto label8;

        $r24 = r0.<java.text.CollationElementIterator: sun.text.normalizer.NormalizerBase text>;
        i10 = virtualinvoke $r24.<sun.text.normalizer.NormalizerBase: int previous()>();
        $i11 = staticinvoke <java.lang.Character: int charCount(int)>(i10);
        i7 = i7 - $i11;
        goto label7;

     label8:
        return i1;
    }
}
