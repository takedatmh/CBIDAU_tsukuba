class sun.nio.ch.UnixAsynchronousServerSocketChannelImpl extends sun.nio.ch.AsynchronousServerSocketChannelImpl implements sun.nio.ch.Port$PollableChannel
{
    private static final sun.nio.ch.NativeDispatcher nd;
    private final sun.nio.ch.Port port;
    private final int fdVal;
    private final java.util.concurrent.atomic.AtomicBoolean accepting;
    private final java.lang.Object updateLock;
    private boolean acceptPending;
    private java.nio.channels.CompletionHandler acceptHandler;
    private java.lang.Object acceptAttachment;
    private sun.nio.ch.PendingFuture acceptFuture;
    private java.security.AccessControlContext acceptAcc;

    private void enableAccept()
    {
        sun.nio.ch.UnixAsynchronousServerSocketChannelImpl r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: sun.nio.ch.UnixAsynchronousServerSocketChannelImpl;
        $r1 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.util.concurrent.atomic.AtomicBoolean accepting>;
        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);
        return;
    }

    void <init>(sun.nio.ch.Port) throws java.io.IOException
    {
        sun.nio.ch.UnixAsynchronousServerSocketChannelImpl r0;
        sun.nio.ch.Port r1;
        java.io.IOException r2, $r6;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        java.lang.Object $r4;
        java.io.FileDescriptor $r5, $r8, $r9;
        sun.nio.ch.NativeDispatcher $r7;
        int $i0, $i1;

        r0 := @this: sun.nio.ch.UnixAsynchronousServerSocketChannelImpl;
        r1 := @parameter0: sun.nio.ch.Port;
        specialinvoke r0.<sun.nio.ch.AsynchronousServerSocketChannelImpl: void <init>(sun.nio.ch.AsynchronousChannelGroupImpl)>(r1);
        $r3 = new java.util.concurrent.atomic.AtomicBoolean;
        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
        r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.util.concurrent.atomic.AtomicBoolean accepting> = $r3;
        $r4 = new java.lang.Object;
        specialinvoke $r4.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.lang.Object updateLock> = $r4;

     label0:
        $r5 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.io.FileDescriptor fd>;
        staticinvoke <sun.nio.ch.IOUtil: void configureBlocking(java.io.FileDescriptor,boolean)>($r5, 0);

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        $r7 = <sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        $r8 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.io.FileDescriptor fd>;
        virtualinvoke $r7.<sun.nio.ch.NativeDispatcher: void close(java.io.FileDescriptor)>($r8);
        throw r2;

     label3:
        r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: sun.nio.ch.Port port> = r1;
        $r9 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.io.FileDescriptor fd>;
        $i0 = staticinvoke <sun.nio.ch.IOUtil: int fdVal(java.io.FileDescriptor)>($r9);
        r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: int fdVal> = $i0;
        $i1 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: int fdVal>;
        virtualinvoke r1.<sun.nio.ch.Port: void register(int,sun.nio.ch.Port$PollableChannel)>($i1, r0);
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    void implClose() throws java.io.IOException
    {
        sun.nio.ch.UnixAsynchronousServerSocketChannelImpl r0;
        java.lang.Object r1, r3, $r9;
        java.nio.channels.CompletionHandler r2;
        sun.nio.ch.PendingFuture r4;
        java.lang.Throwable r5, $r10;
        sun.nio.ch.Port $r6;
        int $i0;
        sun.nio.ch.NativeDispatcher $r7;
        java.io.FileDescriptor $r8;
        boolean $z0;
        java.nio.channels.AsynchronousCloseException $r11, r12;
        java.lang.StackTraceElement[] $r13;

        r0 := @this: sun.nio.ch.UnixAsynchronousServerSocketChannelImpl;
        $r6 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: sun.nio.ch.Port port>;
        $i0 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: int fdVal>;
        virtualinvoke $r6.<sun.nio.ch.Port: void unregister(int)>($i0);
        $r7 = <sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        $r8 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.io.FileDescriptor fd>;
        virtualinvoke $r7.<sun.nio.ch.NativeDispatcher: void close(java.io.FileDescriptor)>($r8);
        $r9 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.lang.Object updateLock>;
        r1 = $r9;
        entermonitor $r9;

     label0:
        $z0 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: boolean acceptPending>;
        if $z0 != 0 goto label2;

        exitmonitor r1;

     label1:
        return;

     label2:
        r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: boolean acceptPending> = 0;
        r2 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.nio.channels.CompletionHandler acceptHandler>;
        r3 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.lang.Object acceptAttachment>;
        r4 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: sun.nio.ch.PendingFuture acceptFuture>;
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r10 := @caughtexception;

     label5:
        r5 = $r10;
        exitmonitor r1;

     label6:
        throw r5;

     label7:
        $r11 = new java.nio.channels.AsynchronousCloseException;
        specialinvoke $r11.<java.nio.channels.AsynchronousCloseException: void <init>()>();
        r12 = $r11;
        $r13 = newarray (java.lang.StackTraceElement)[0];
        virtualinvoke r12.<java.nio.channels.AsynchronousCloseException: void setStackTrace(java.lang.StackTraceElement[])>($r13);
        if r2 != null goto label8;

        virtualinvoke r4.<sun.nio.ch.PendingFuture: void setFailure(java.lang.Throwable)>(r12);
        goto label9;

     label8:
        staticinvoke <sun.nio.ch.Invoker: void invokeIndirectly(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r0, r2, r3, null, r12);

     label9:
        return;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public sun.nio.ch.AsynchronousChannelGroupImpl group()
    {
        sun.nio.ch.UnixAsynchronousServerSocketChannelImpl r0;
        sun.nio.ch.Port $r1;

        r0 := @this: sun.nio.ch.UnixAsynchronousServerSocketChannelImpl;
        $r1 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: sun.nio.ch.Port port>;
        return $r1;
    }

    public void onEvent(int, boolean)
    {
        sun.nio.ch.UnixAsynchronousServerSocketChannelImpl r0;
        int i0, i1, $i2;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object r1, r4, $r8, $r14, r28;
        java.lang.Throwable r2, r3, r5, r6, $r9, $r15, $r17, r18, $r20, $r24, r25;
        java.io.IOException r7, $r26, $r30;
        java.io.FileDescriptor $r10, r11, $r13;
        java.net.InetSocketAddress[] r12;
        sun.nio.ch.Port $r16;
        java.nio.channels.AsynchronousCloseException $r19;
        java.nio.channels.AsynchronousSocketChannel r21;
        java.net.InetSocketAddress $r22;
        java.security.AccessControlContext $r23;
        java.nio.channels.CompletionHandler r27;
        sun.nio.ch.PendingFuture r29;

        r0 := @this: sun.nio.ch.UnixAsynchronousServerSocketChannelImpl;
        i0 := @parameter0: int;
        z0 := @parameter1: boolean;
        $r8 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.lang.Object updateLock>;
        r1 = $r8;
        entermonitor $r8;

     label0:
        $z1 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: boolean acceptPending>;
        if $z1 != 0 goto label2;

        exitmonitor r1;

     label1:
        return;

     label2:
        r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: boolean acceptPending> = 0;
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r9 := @caughtexception;

     label5:
        r2 = $r9;
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        $r10 = new java.io.FileDescriptor;
        specialinvoke $r10.<java.io.FileDescriptor: void <init>()>();
        r11 = $r10;
        r12 = newarray (java.net.InetSocketAddress)[1];
        r3 = null;

     label8:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: void begin()>();
        $r13 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.io.FileDescriptor fd>;
        i1 = specialinvoke r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: int accept0(java.io.FileDescriptor,java.io.FileDescriptor,java.net.InetSocketAddress[])>($r13, r11, r12);
        if i1 != -2 goto label16;

        $r14 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.lang.Object updateLock>;
        r4 = $r14;
        entermonitor $r14;

     label9:
        r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: boolean acceptPending> = 1;
        exitmonitor r4;

     label10:
        goto label14;

     label11:
        $r15 := @caughtexception;

     label12:
        r5 = $r15;
        exitmonitor r4;

     label13:
        throw r5;

     label14:
        $r16 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: sun.nio.ch.Port port>;
        $i2 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: int fdVal>;
        virtualinvoke $r16.<sun.nio.ch.Port: void startPoll(int,int)>($i2, 1);

     label15:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: void end()>();
        return;

     label16:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: void end()>();
        goto label24;

     label17:
        $r17 := @caughtexception;

     label18:
        r18 = $r17;
        $z2 = r18 instanceof java.nio.channels.ClosedChannelException;
        if $z2 == 0 goto label19;

        $r19 = new java.nio.channels.AsynchronousCloseException;
        specialinvoke $r19.<java.nio.channels.AsynchronousCloseException: void <init>()>();
        r18 = $r19;

     label19:
        r3 = r18;

     label20:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: void end()>();
        goto label24;

     label21:
        $r20 := @caughtexception;

     label22:
        r6 = $r20;

     label23:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: void end()>();
        throw r6;

     label24:
        r21 = null;
        if r3 != null goto label29;

     label25:
        $r22 = r12[0];
        $r23 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.security.AccessControlContext acceptAcc>;
        r21 = specialinvoke r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.nio.channels.AsynchronousSocketChannel finishAccept(java.io.FileDescriptor,java.net.InetSocketAddress,java.security.AccessControlContext)>(r11, $r22, $r23);

     label26:
        goto label29;

     label27:
        $r24 := @caughtexception;
        r25 = $r24;
        $z3 = r25 instanceof java.io.IOException;
        if $z3 != 0 goto label28;

        $z4 = r25 instanceof java.lang.SecurityException;
        if $z4 != 0 goto label28;

        $r26 = new java.io.IOException;
        specialinvoke $r26.<java.io.IOException: void <init>(java.lang.Throwable)>(r25);
        r25 = $r26;

     label28:
        r3 = r25;

     label29:
        r27 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.nio.channels.CompletionHandler acceptHandler>;
        r28 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.lang.Object acceptAttachment>;
        r29 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: sun.nio.ch.PendingFuture acceptFuture>;
        specialinvoke r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: void enableAccept()>();
        if r27 != null goto label33;

        virtualinvoke r29.<sun.nio.ch.PendingFuture: void setResult(java.lang.Object,java.lang.Throwable)>(r21, r3);
        if r21 == null goto label34;

        $z5 = virtualinvoke r29.<sun.nio.ch.PendingFuture: boolean isCancelled()>();
        if $z5 == 0 goto label34;

     label30:
        virtualinvoke r21.<java.nio.channels.AsynchronousSocketChannel: void close()>();

     label31:
        goto label34;

     label32:
        $r30 := @caughtexception;
        r7 = $r30;
        goto label34;

     label33:
        staticinvoke <sun.nio.ch.Invoker: void invoke(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r0, r27, r28, r21, r3);

     label34:
        return;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label9 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label8 to label15 with label17;
        catch java.lang.Throwable from label8 to label15 with label21;
        catch java.lang.Throwable from label18 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.io.IOException from label30 to label31 with label32;
    }

    private java.nio.channels.AsynchronousSocketChannel finishAccept(java.io.FileDescriptor, java.net.InetSocketAddress, java.security.AccessControlContext) throws java.io.IOException, java.lang.SecurityException
    {
        sun.nio.ch.UnixAsynchronousServerSocketChannelImpl r0;
        java.io.FileDescriptor r1;
        java.net.InetSocketAddress r2;
        java.security.AccessControlContext r3;
        null_type n0;
        java.io.IOException r4, $r9;
        java.lang.Throwable r5, $r18;
        sun.nio.ch.UnixAsynchronousSocketChannelImpl $r6, r8;
        sun.nio.ch.Port $r7;
        sun.nio.ch.NativeDispatcher $r10;
        sun.nio.ch.UnixAsynchronousServerSocketChannelImpl$1 $r11;
        java.lang.SecurityManager r13;
        java.net.InetAddress $r14;
        java.lang.String $r15;
        int $i0;
        java.lang.SecurityException $r16, r17;

        r0 := @this: sun.nio.ch.UnixAsynchronousServerSocketChannelImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        r2 := @parameter1: java.net.InetSocketAddress;
        r3 := @parameter2: java.security.AccessControlContext;
        n0 = null;

     label0:
        $r6 = new sun.nio.ch.UnixAsynchronousSocketChannelImpl;
        $r7 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: sun.nio.ch.Port port>;
        specialinvoke $r6.<sun.nio.ch.UnixAsynchronousSocketChannelImpl: void <init>(sun.nio.ch.Port,java.io.FileDescriptor,java.net.InetSocketAddress)>($r7, r1, r2);
        r8 = $r6;

     label1:
        goto label3;

     label2:
        $r9 := @caughtexception;
        r4 = $r9;
        $r10 = <sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: sun.nio.ch.NativeDispatcher nd>;
        virtualinvoke $r10.<sun.nio.ch.NativeDispatcher: void close(java.io.FileDescriptor)>(r1);
        throw r4;

     label3:
        if r3 == null goto label4;

        $r11 = new sun.nio.ch.UnixAsynchronousServerSocketChannelImpl$1;
        specialinvoke $r11.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl$1: void <init>(sun.nio.ch.UnixAsynchronousServerSocketChannelImpl,java.net.InetSocketAddress)>(r0, r2);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>($r11, r3);
        goto label5;

     label4:
        r13 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r13 == null goto label5;

        $r14 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        $r15 = virtualinvoke $r14.<java.net.InetAddress: java.lang.String getHostAddress()>();
        $i0 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();
        virtualinvoke r13.<java.lang.SecurityManager: void checkAccept(java.lang.String,int)>($r15, $i0);

     label5:
        goto label11;

     label6:
        $r16 := @caughtexception;
        r17 = $r16;

     label7:
        virtualinvoke r8.<java.nio.channels.AsynchronousSocketChannel: void close()>();

     label8:
        goto label10;

     label9:
        $r18 := @caughtexception;
        r5 = $r18;
        virtualinvoke r17.<java.lang.SecurityException: void addSuppressed(java.lang.Throwable)>(r5);

     label10:
        throw r17;

     label11:
        return r8;

        catch java.io.IOException from label0 to label1 with label2;
        catch java.lang.SecurityException from label3 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    java.util.concurrent.Future implAccept(java.lang.Object, java.nio.channels.CompletionHandler)
    {
        sun.nio.ch.UnixAsynchronousServerSocketChannelImpl r0;
        java.lang.Object r1, r7, $r20;
        java.nio.channels.CompletionHandler r2;
        java.nio.channels.ClosedChannelException r3, $r10;
        java.net.InetSocketAddress[] r4;
        java.lang.Throwable r5, r8, r9, $r25, $r28, r29, $r31, $r34, r35;
        int i0, $i1;
        sun.nio.ch.PendingFuture r6, $r21, r27;
        boolean $z0, $z1, $z2, $z3;
        sun.nio.ch.CompletedFuture $r11, $r36;
        java.net.InetSocketAddress $r12, $r33;
        java.nio.channels.NotYetBoundException $r13;
        java.lang.RuntimeException $r14;
        java.util.concurrent.atomic.AtomicBoolean $r15;
        java.nio.channels.AcceptPendingException $r16;
        java.io.FileDescriptor $r17, r18, $r19;
        java.lang.SecurityManager $r23;
        java.security.AccessControlContext $r24;
        sun.nio.ch.Port $r26;
        java.nio.channels.AsynchronousCloseException $r30;
        java.nio.channels.AsynchronousSocketChannel r32;

        r0 := @this: sun.nio.ch.UnixAsynchronousServerSocketChannelImpl;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.nio.channels.CompletionHandler;
        $z0 = virtualinvoke r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label1;

        $r10 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r10.<java.nio.channels.ClosedChannelException: void <init>()>();
        r3 = $r10;
        if r2 != null goto label0;

        $r11 = staticinvoke <sun.nio.ch.CompletedFuture: sun.nio.ch.CompletedFuture withFailure(java.lang.Throwable)>(r3);
        return $r11;

     label0:
        staticinvoke <sun.nio.ch.Invoker: void invoke(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r0, r2, r1, null, r3);
        return null;

     label1:
        $r12 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.net.InetSocketAddress localAddress>;
        if $r12 != null goto label2;

        $r13 = new java.nio.channels.NotYetBoundException;
        specialinvoke $r13.<java.nio.channels.NotYetBoundException: void <init>()>();
        throw $r13;

     label2:
        $z1 = virtualinvoke r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: boolean isAcceptKilled()>();
        if $z1 == 0 goto label3;

        $r14 = new java.lang.RuntimeException;
        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>("Accept not allowed due cancellation");
        throw $r14;

     label3:
        $r15 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.util.concurrent.atomic.AtomicBoolean accepting>;
        $z2 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
        if $z2 != 0 goto label4;

        $r16 = new java.nio.channels.AcceptPendingException;
        specialinvoke $r16.<java.nio.channels.AcceptPendingException: void <init>()>();
        throw $r16;

     label4:
        $r17 = new java.io.FileDescriptor;
        specialinvoke $r17.<java.io.FileDescriptor: void <init>()>();
        r18 = $r17;
        r4 = newarray (java.net.InetSocketAddress)[1];
        r5 = null;

     label5:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: void begin()>();
        $r19 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.io.FileDescriptor fd>;
        i0 = specialinvoke r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: int accept0(java.io.FileDescriptor,java.io.FileDescriptor,java.net.InetSocketAddress[])>($r19, r18, r4);
        if i0 != -2 goto label17;

        r6 = null;
        $r20 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.lang.Object updateLock>;
        r7 = $r20;
        entermonitor $r20;

     label6:
        if r2 != null goto label7;

        r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.nio.channels.CompletionHandler acceptHandler> = null;
        $r21 = new sun.nio.ch.PendingFuture;
        specialinvoke $r21.<sun.nio.ch.PendingFuture: void <init>(java.nio.channels.AsynchronousChannel)>(r0);
        r6 = $r21;
        r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: sun.nio.ch.PendingFuture acceptFuture> = r6;
        goto label8;

     label7:
        r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.nio.channels.CompletionHandler acceptHandler> = r2;
        r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.lang.Object acceptAttachment> = r1;

     label8:
        $r23 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if $r23 != null goto label9;

        $r24 = null;
        goto label10;

     label9:
        $r24 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getContext()>();

     label10:
        r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.security.AccessControlContext acceptAcc> = $r24;
        r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: boolean acceptPending> = 1;
        exitmonitor r7;

     label11:
        goto label15;

     label12:
        $r25 := @caughtexception;

     label13:
        r8 = $r25;
        exitmonitor r7;

     label14:
        throw r8;

     label15:
        $r26 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: sun.nio.ch.Port port>;
        $i1 = r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: int fdVal>;
        virtualinvoke $r26.<sun.nio.ch.Port: void startPoll(int,int)>($i1, 1);
        r27 = r6;

     label16:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: void end()>();
        return r27;

     label17:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: void end()>();
        goto label25;

     label18:
        $r28 := @caughtexception;

     label19:
        r29 = $r28;
        $z3 = r29 instanceof java.nio.channels.ClosedChannelException;
        if $z3 == 0 goto label20;

        $r30 = new java.nio.channels.AsynchronousCloseException;
        specialinvoke $r30.<java.nio.channels.AsynchronousCloseException: void <init>()>();
        r29 = $r30;

     label20:
        r5 = r29;

     label21:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: void end()>();
        goto label25;

     label22:
        $r31 := @caughtexception;

     label23:
        r9 = $r31;

     label24:
        virtualinvoke r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: void end()>();
        throw r9;

     label25:
        r32 = null;
        if r5 != null goto label29;

     label26:
        $r33 = r4[0];
        r32 = specialinvoke r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: java.nio.channels.AsynchronousSocketChannel finishAccept(java.io.FileDescriptor,java.net.InetSocketAddress,java.security.AccessControlContext)>(r18, $r33, null);

     label27:
        goto label29;

     label28:
        $r34 := @caughtexception;
        r35 = $r34;
        r5 = r35;

     label29:
        specialinvoke r0.<sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: void enableAccept()>();
        if r2 != null goto label30;

        $r36 = staticinvoke <sun.nio.ch.CompletedFuture: sun.nio.ch.CompletedFuture withResult(java.lang.Object,java.lang.Throwable)>(r32, r5);
        return $r36;

     label30:
        staticinvoke <sun.nio.ch.Invoker: void invokeIndirectly(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>(r0, r2, r1, r32, r5);
        return null;

        catch java.lang.Throwable from label6 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label5 to label16 with label18;
        catch java.lang.Throwable from label5 to label16 with label22;
        catch java.lang.Throwable from label19 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.lang.Throwable from label26 to label27 with label28;
    }

    private static native void initIDs();

    private native int accept0(java.io.FileDescriptor, java.io.FileDescriptor, java.net.InetSocketAddress[]) throws java.io.IOException;

    static void <clinit>()
    {
        sun.nio.ch.SocketDispatcher $r0;

        $r0 = new sun.nio.ch.SocketDispatcher;
        specialinvoke $r0.<sun.nio.ch.SocketDispatcher: void <init>()>();
        <sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: sun.nio.ch.NativeDispatcher nd> = $r0;
        staticinvoke <sun.nio.ch.Util: void load()>();
        staticinvoke <sun.nio.ch.UnixAsynchronousServerSocketChannelImpl: void initIDs()>();
        return;
    }
}
