public class sun.security.krb5.internal.crypto.DesMacKCksumType extends sun.security.krb5.internal.crypto.CksumType
{

    public void <init>()
    {
        sun.security.krb5.internal.crypto.DesMacKCksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacKCksumType;
        specialinvoke r0.<sun.security.krb5.internal.crypto.CksumType: void <init>()>();
        return;
    }

    public int confounderSize()
    {
        sun.security.krb5.internal.crypto.DesMacKCksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacKCksumType;
        return 0;
    }

    public int cksumType()
    {
        sun.security.krb5.internal.crypto.DesMacKCksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacKCksumType;
        return 5;
    }

    public boolean isSafe()
    {
        sun.security.krb5.internal.crypto.DesMacKCksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacKCksumType;
        return 1;
    }

    public int cksumSize()
    {
        sun.security.krb5.internal.crypto.DesMacKCksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacKCksumType;
        return 16;
    }

    public int keyType()
    {
        sun.security.krb5.internal.crypto.DesMacKCksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacKCksumType;
        return 1;
    }

    public int keySize()
    {
        sun.security.krb5.internal.crypto.DesMacKCksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacKCksumType;
        return 8;
    }

    public byte[] calculateChecksum(byte[], int)
    {
        sun.security.krb5.internal.crypto.DesMacKCksumType r0;
        byte[] r1;
        int i0;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacKCksumType;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        return null;
    }

    public byte[] calculateKeyedChecksum(byte[], int, byte[], int) throws sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.DesMacKCksumType r0;
        byte[] r1, r2, r4, r6;
        int i0, i1, $i5, $i6;
        java.security.InvalidKeyException r3, $r5;
        boolean $z0;
        byte $b2, $b4;
        short $s3;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacKCksumType;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: byte[];
        i1 := @parameter3: int;

     label0:
        $z0 = staticinvoke <javax.crypto.spec.DESKeySpec: boolean isWeak(byte[],int)>(r2, 0);
        if $z0 == 0 goto label1;

        $b2 = r2[7];
        $s3 = $b2 ^ 240;
        $b4 = (byte) $s3;
        r2[7] = $b4;

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r3 = $r5;

     label3:
        $i5 = lengthof r2;
        r6 = newarray (byte)[$i5];
        $i6 = lengthof r2;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r6, 0, $i6);
        r4 = staticinvoke <sun.security.krb5.internal.crypto.Des: byte[] des_cksum(byte[],byte[],byte[])>(r6, r1, r2);
        return r4;

        catch java.security.InvalidKeyException from label0 to label1 with label2;
    }

    public boolean verifyKeyedChecksum(byte[], int, byte[], byte[], int) throws sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.internal.crypto.DesMacKCksumType r0;
        byte[] r1, r2, r3, r4;
        int i0, i1, $i2;
        boolean $z0;

        r0 := @this: sun.security.krb5.internal.crypto.DesMacKCksumType;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: byte[];
        r3 := @parameter3: byte[];
        i1 := @parameter4: int;
        $i2 = lengthof r1;
        r4 = virtualinvoke r0.<sun.security.krb5.internal.crypto.DesMacKCksumType: byte[] calculateKeyedChecksum(byte[],int,byte[],int)>(r1, $i2, r2, i1);
        $z0 = staticinvoke <sun.security.krb5.internal.crypto.DesMacKCksumType: boolean isChecksumEqual(byte[],byte[])>(r3, r4);
        return $z0;
    }
}
