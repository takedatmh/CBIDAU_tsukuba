final class java.nio.channels.Channels$1 extends java.io.OutputStream
{
    private java.nio.ByteBuffer bb;
    private byte[] bs;
    private byte[] b1;
    final java.nio.channels.WritableByteChannel val$ch;

    void <init>(java.nio.channels.WritableByteChannel)
    {
        java.nio.channels.Channels$1 r0;
        java.nio.channels.WritableByteChannel r1;

        r0 := @this: java.nio.channels.Channels$1;
        r1 := @parameter0: java.nio.channels.WritableByteChannel;
        r0.<java.nio.channels.Channels$1: java.nio.channels.WritableByteChannel val$ch> = r1;
        specialinvoke r0.<java.io.OutputStream: void <init>()>();
        r0.<java.nio.channels.Channels$1: java.nio.ByteBuffer bb> = null;
        r0.<java.nio.channels.Channels$1: byte[] bs> = null;
        r0.<java.nio.channels.Channels$1: byte[] b1> = null;
        return;
    }

    public synchronized void write(int) throws java.io.IOException
    {
        java.nio.channels.Channels$1 r0;
        int i0;
        byte[] $r1, $r2, $r3, $r4;
        byte $b1;

        r0 := @this: java.nio.channels.Channels$1;
        i0 := @parameter0: int;
        $r1 = r0.<java.nio.channels.Channels$1: byte[] b1>;
        if $r1 != null goto label0;

        $r2 = newarray (byte)[1];
        r0.<java.nio.channels.Channels$1: byte[] b1> = $r2;

     label0:
        $r3 = r0.<java.nio.channels.Channels$1: byte[] b1>;
        $b1 = (byte) i0;
        $r3[0] = $b1;
        $r4 = r0.<java.nio.channels.Channels$1: byte[] b1>;
        virtualinvoke r0.<java.nio.channels.Channels$1: void write(byte[])>($r4);
        return;
    }

    public synchronized void write(byte[], int, int) throws java.io.IOException
    {
        java.nio.channels.Channels$1 r0;
        byte[] r1, $r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.nio.ByteBuffer r2, $r5;
        java.lang.IndexOutOfBoundsException $r3;
        java.nio.channels.WritableByteChannel $r8;

        r0 := @this: java.nio.channels.Channels$1;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i0 < 0 goto label0;

        $i2 = lengthof r1;
        if i0 > $i2 goto label0;

        if i1 < 0 goto label0;

        $i3 = i0 + i1;
        $i4 = lengthof r1;
        if $i3 > $i4 goto label0;

        $i5 = i0 + i1;
        if $i5 >= 0 goto label1;

     label0:
        $r3 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r3;

     label1:
        if i1 != 0 goto label2;

        return;

     label2:
        $r4 = r0.<java.nio.channels.Channels$1: byte[] bs>;
        if $r4 != r1 goto label3;

        $r5 = r0.<java.nio.channels.Channels$1: java.nio.ByteBuffer bb>;
        goto label4;

     label3:
        $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

     label4:
        r2 = $r5;
        $i6 = i0 + i1;
        $i7 = virtualinvoke r2.<java.nio.ByteBuffer: int capacity()>();
        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i7);
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i8);
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i0);
        r0.<java.nio.channels.Channels$1: java.nio.ByteBuffer bb> = r2;
        r0.<java.nio.channels.Channels$1: byte[] bs> = r1;
        $r8 = r0.<java.nio.channels.Channels$1: java.nio.channels.WritableByteChannel val$ch>;
        staticinvoke <java.nio.channels.Channels: void access$000(java.nio.channels.WritableByteChannel,java.nio.ByteBuffer)>($r8, r2);
        return;
    }

    public void close() throws java.io.IOException
    {
        java.nio.channels.Channels$1 r0;
        java.nio.channels.WritableByteChannel $r1;

        r0 := @this: java.nio.channels.Channels$1;
        $r1 = r0.<java.nio.channels.Channels$1: java.nio.channels.WritableByteChannel val$ch>;
        interfaceinvoke $r1.<java.nio.channels.WritableByteChannel: void close()>();
        return;
    }
}
