class sun.misc.SoftCache$Entry extends java.lang.Object implements java.util.Map$Entry
{
    private java.util.Map$Entry ent;
    private java.lang.Object value;
    final sun.misc.SoftCache this$0;

    void <init>(sun.misc.SoftCache, java.util.Map$Entry, java.lang.Object)
    {
        sun.misc.SoftCache$Entry r0;
        sun.misc.SoftCache r1;
        java.util.Map$Entry r2;
        java.lang.Object r3;

        r0 := @this: sun.misc.SoftCache$Entry;
        r1 := @parameter0: sun.misc.SoftCache;
        r2 := @parameter1: java.util.Map$Entry;
        r3 := @parameter2: java.lang.Object;
        r0.<sun.misc.SoftCache$Entry: sun.misc.SoftCache this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.misc.SoftCache$Entry: java.util.Map$Entry ent> = r2;
        r0.<sun.misc.SoftCache$Entry: java.lang.Object value> = r3;
        return;
    }

    public java.lang.Object getKey()
    {
        sun.misc.SoftCache$Entry r0;
        java.util.Map$Entry $r1;
        java.lang.Object $r2;

        r0 := @this: sun.misc.SoftCache$Entry;
        $r1 = r0.<sun.misc.SoftCache$Entry: java.util.Map$Entry ent>;
        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>();
        return $r2;
    }

    public java.lang.Object getValue()
    {
        sun.misc.SoftCache$Entry r0;
        java.lang.Object $r1;

        r0 := @this: sun.misc.SoftCache$Entry;
        $r1 = r0.<sun.misc.SoftCache$Entry: java.lang.Object value>;
        return $r1;
    }

    public java.lang.Object setValue(java.lang.Object)
    {
        sun.misc.SoftCache$Entry r0;
        java.lang.Object r1, $r4, $r8;
        java.util.Map$Entry $r2, $r3;
        sun.misc.SoftCache $r5;
        java.lang.ref.ReferenceQueue $r6;
        sun.misc.SoftCache$ValueCell $r7;

        r0 := @this: sun.misc.SoftCache$Entry;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<sun.misc.SoftCache$Entry: java.util.Map$Entry ent>;
        $r3 = r0.<sun.misc.SoftCache$Entry: java.util.Map$Entry ent>;
        $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r5 = r0.<sun.misc.SoftCache$Entry: sun.misc.SoftCache this$0>;
        $r6 = staticinvoke <sun.misc.SoftCache: java.lang.ref.ReferenceQueue access$500(sun.misc.SoftCache)>($r5);
        $r7 = staticinvoke <sun.misc.SoftCache$ValueCell: sun.misc.SoftCache$ValueCell access$400(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue)>($r4, r1, $r6);
        $r8 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r7);
        return $r8;
    }

    public boolean equals(java.lang.Object)
    {
        sun.misc.SoftCache$Entry r0;
        java.lang.Object r1, $r4, $r5, $r6, $r7;
        java.util.Map$Entry r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: sun.misc.SoftCache$Entry;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.util.Map$Entry;
        if $z0 != 0 goto label0;

        return 0;

     label0:
        r2 = (java.util.Map$Entry) r1;
        $r3 = r0.<sun.misc.SoftCache$Entry: java.util.Map$Entry ent>;
        $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();
        $z1 = staticinvoke <sun.misc.SoftCache: boolean access$600(java.lang.Object,java.lang.Object)>($r4, $r5);
        if $z1 == 0 goto label1;

        $r6 = r0.<sun.misc.SoftCache$Entry: java.lang.Object value>;
        $r7 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();
        $z2 = staticinvoke <sun.misc.SoftCache: boolean access$600(java.lang.Object,java.lang.Object)>($r6, $r7);
        if $z2 == 0 goto label1;

        $z3 = 1;
        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public int hashCode()
    {
        sun.misc.SoftCache$Entry r0;
        java.lang.Object r1, $r2, $r3, $r4;
        int $i0, $i1, $i2;

        r0 := @this: sun.misc.SoftCache$Entry;
        $r2 = virtualinvoke r0.<sun.misc.SoftCache$Entry: java.lang.Object getKey()>();
        r1 = $r2;
        if $r2 != null goto label0;

        $i0 = 0;
        goto label1;

     label0:
        $i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

     label1:
        $r3 = r0.<sun.misc.SoftCache$Entry: java.lang.Object value>;
        if $r3 != null goto label2;

        $i1 = 0;
        goto label3;

     label2:
        $r4 = r0.<sun.misc.SoftCache$Entry: java.lang.Object value>;
        $i1 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

     label3:
        $i2 = $i0 ^ $i1;
        return $i2;
    }

    static java.util.Map$Entry access$900(sun.misc.SoftCache$Entry)
    {
        sun.misc.SoftCache$Entry r0;
        java.util.Map$Entry $r1;

        r0 := @parameter0: sun.misc.SoftCache$Entry;
        $r1 = r0.<sun.misc.SoftCache$Entry: java.util.Map$Entry ent>;
        return $r1;
    }
}
