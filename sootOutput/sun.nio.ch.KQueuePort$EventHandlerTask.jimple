class sun.nio.ch.KQueuePort$EventHandlerTask extends java.lang.Object implements java.lang.Runnable
{
    final sun.nio.ch.KQueuePort this$0;

    private void <init>(sun.nio.ch.KQueuePort)
    {
        sun.nio.ch.KQueuePort$EventHandlerTask r0;
        sun.nio.ch.KQueuePort r1;

        r0 := @this: sun.nio.ch.KQueuePort$EventHandlerTask;
        r1 := @parameter0: sun.nio.ch.KQueuePort;
        r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    private sun.nio.ch.KQueuePort$Event poll() throws java.io.IOException
    {
        sun.nio.ch.KQueuePort$EventHandlerTask r0;
        int i0, i2, i3, $i5, $i7, $i9, $i10, $i11;
        long l1, $l6, $l8;
        sun.nio.ch.KQueuePort$Event r1, r2, r3, $r21, $r29, $r35, $r44, $r56;
        byte b4;
        java.lang.Throwable r4, r5, $r48, $r52;
        sun.nio.ch.KQueuePort $r6, $r7, $r8, $r11, $r12, $r14, $r16, $r18, $r20, $r22, $r23, $r26, $r28, $r30, $r36, $r38, $r41, $r43, $r45, $r49, $r53, $r55;
        java.util.concurrent.locks.ReadWriteLock $r9, $r24, $r39, $r46, $r50;
        java.util.concurrent.locks.Lock $r10, $r25, $r40, $r47, $r51;
        int[] $r13, $r17;
        java.util.concurrent.atomic.AtomicInteger $r15;
        java.util.concurrent.ArrayBlockingQueue $r19, $r27, $r37, $r42, $r54;
        java.util.Map $r31;
        java.lang.Integer $r32;
        java.lang.Object $r33;
        sun.nio.ch.Port$PollableChannel r34;

        r0 := @this: sun.nio.ch.KQueuePort$EventHandlerTask;

     label0:
        $r6 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $i5 = staticinvoke <sun.nio.ch.KQueuePort: int access$100(sun.nio.ch.KQueuePort)>($r6);
        $r7 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $l6 = staticinvoke <sun.nio.ch.KQueuePort: long access$200(sun.nio.ch.KQueuePort)>($r7);
        i0 = staticinvoke <sun.nio.ch.KQueue: int keventPoll(int,long,int)>($i5, $l6, 512);
        $r8 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r9 = $r8.<sun.nio.ch.KQueuePort: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r10 = interfaceinvoke $r9.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r10.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $i7 = i0;
        i0 = i0 + -1;
        if $i7 <= 0 goto label13;

        $r11 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $l8 = staticinvoke <sun.nio.ch.KQueuePort: long access$200(sun.nio.ch.KQueuePort)>($r11);
        l1 = staticinvoke <sun.nio.ch.KQueue: long getEvent(long,int)>($l8, i0);
        i2 = staticinvoke <sun.nio.ch.KQueue: int getDescriptor(long)>(l1);
        $r12 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r13 = staticinvoke <sun.nio.ch.KQueuePort: int[] access$300(sun.nio.ch.KQueuePort)>($r12);
        $i9 = $r13[0];
        if i2 != $i9 goto label6;

        $r14 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r15 = staticinvoke <sun.nio.ch.KQueuePort: java.util.concurrent.atomic.AtomicInteger access$400(sun.nio.ch.KQueuePort)>($r14);
        $i10 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
        if $i10 != 0 goto label2;

        $r16 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r17 = staticinvoke <sun.nio.ch.KQueuePort: int[] access$300(sun.nio.ch.KQueuePort)>($r16);
        $i11 = $r17[0];
        staticinvoke <sun.nio.ch.KQueuePort: void access$500(int)>($i11);

     label2:
        if i0 <= 0 goto label3;

        $r18 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r19 = staticinvoke <sun.nio.ch.KQueuePort: java.util.concurrent.ArrayBlockingQueue access$700(sun.nio.ch.KQueuePort)>($r18);
        $r20 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r21 = staticinvoke <sun.nio.ch.KQueuePort: sun.nio.ch.KQueuePort$Event access$600(sun.nio.ch.KQueuePort)>($r20);
        virtualinvoke $r19.<java.util.concurrent.ArrayBlockingQueue: boolean offer(java.lang.Object)>($r21);
        goto label1;

     label3:
        $r22 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        r1 = staticinvoke <sun.nio.ch.KQueuePort: sun.nio.ch.KQueuePort$Event access$600(sun.nio.ch.KQueuePort)>($r22);

     label4:
        $r23 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r24 = $r23.<sun.nio.ch.KQueuePort: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r25 = interfaceinvoke $r24.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r25.<java.util.concurrent.locks.Lock: void unlock()>();

     label5:
        $r26 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r27 = staticinvoke <sun.nio.ch.KQueuePort: java.util.concurrent.ArrayBlockingQueue access$700(sun.nio.ch.KQueuePort)>($r26);
        $r28 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r29 = staticinvoke <sun.nio.ch.KQueuePort: sun.nio.ch.KQueuePort$Event access$800(sun.nio.ch.KQueuePort)>($r28);
        virtualinvoke $r27.<java.util.concurrent.ArrayBlockingQueue: boolean offer(java.lang.Object)>($r29);
        return r1;

     label6:
        $r30 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r31 = $r30.<sun.nio.ch.KQueuePort: java.util.Map fdToChannel>;
        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);
        $r33 = interfaceinvoke $r31.<java.util.Map: java.lang.Object get(java.lang.Object)>($r32);
        r34 = (sun.nio.ch.Port$PollableChannel) $r33;
        if r34 == null goto label12;

        i3 = staticinvoke <sun.nio.ch.KQueue: int getFilter(long)>(l1);
        b4 = 0;
        if i3 != -1 goto label7;

        b4 = 1;
        goto label8;

     label7:
        if i3 != -2 goto label8;

        b4 = 4;

     label8:
        $r35 = new sun.nio.ch.KQueuePort$Event;
        specialinvoke $r35.<sun.nio.ch.KQueuePort$Event: void <init>(sun.nio.ch.Port$PollableChannel,int)>(r34, b4);
        r2 = $r35;
        if i0 <= 0 goto label9;

        $r36 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r37 = staticinvoke <sun.nio.ch.KQueuePort: java.util.concurrent.ArrayBlockingQueue access$700(sun.nio.ch.KQueuePort)>($r36);
        virtualinvoke $r37.<java.util.concurrent.ArrayBlockingQueue: boolean offer(java.lang.Object)>(r2);
        goto label12;

     label9:
        r3 = r2;

     label10:
        $r38 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r39 = $r38.<sun.nio.ch.KQueuePort: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r40 = interfaceinvoke $r39.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r40.<java.util.concurrent.locks.Lock: void unlock()>();

     label11:
        $r41 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r42 = staticinvoke <sun.nio.ch.KQueuePort: java.util.concurrent.ArrayBlockingQueue access$700(sun.nio.ch.KQueuePort)>($r41);
        $r43 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r44 = staticinvoke <sun.nio.ch.KQueuePort: sun.nio.ch.KQueuePort$Event access$800(sun.nio.ch.KQueuePort)>($r43);
        virtualinvoke $r42.<java.util.concurrent.ArrayBlockingQueue: boolean offer(java.lang.Object)>($r44);
        return r3;

     label12:
        goto label1;

     label13:
        $r45 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r46 = $r45.<sun.nio.ch.KQueuePort: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r47 = interfaceinvoke $r46.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r47.<java.util.concurrent.locks.Lock: void unlock()>();
        goto label17;

     label14:
        $r48 := @caughtexception;

     label15:
        r4 = $r48;

     label16:
        $r49 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r50 = $r49.<sun.nio.ch.KQueuePort: java.util.concurrent.locks.ReadWriteLock fdToChannelLock>;
        $r51 = interfaceinvoke $r50.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r51.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r4;

     label17:
        goto label0;

     label18:
        $r52 := @caughtexception;
        r5 = $r52;

     label19:
        $r53 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r54 = staticinvoke <sun.nio.ch.KQueuePort: java.util.concurrent.ArrayBlockingQueue access$700(sun.nio.ch.KQueuePort)>($r53);
        $r55 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r56 = staticinvoke <sun.nio.ch.KQueuePort: sun.nio.ch.KQueuePort$Event access$800(sun.nio.ch.KQueuePort)>($r55);
        virtualinvoke $r54.<java.util.concurrent.ArrayBlockingQueue: boolean offer(java.lang.Object)>($r56);
        throw r5;

        catch java.lang.Throwable from label1 to label4 with label14;
        catch java.lang.Throwable from label6 to label10 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label0 to label5 with label18;
        catch java.lang.Throwable from label6 to label11 with label18;
        catch java.lang.Throwable from label12 to label19 with label18;
    }

    public void run()
    {
        sun.nio.ch.KQueuePort$EventHandlerTask r0;
        sun.nio.ch.Invoker$GroupAndInvokeCount r1;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        sun.nio.ch.KQueuePort$Event r2, $r9, $r17;
        java.io.IOException r3, $r10;
        int i0, i1, i2, $i3;
        java.lang.Throwable r4, $r28;
        sun.nio.ch.KQueuePort $r5, $r8, $r11, $r12, $r13, $r16, $r18, $r20, $r21, $r22, $r29, $r30, $r31;
        java.util.concurrent.ArrayBlockingQueue $r6;
        java.lang.Object $r7;
        java.lang.InterruptedException $r14, r15;
        java.lang.Runnable r19;
        sun.nio.ch.Port$PollableChannel $r23;
        java.lang.Error $r24, r25;
        java.lang.RuntimeException $r26, r27;

        r0 := @this: sun.nio.ch.KQueuePort$EventHandlerTask;
        r1 = staticinvoke <sun.nio.ch.Invoker: sun.nio.ch.Invoker$GroupAndInvokeCount getGroupAndInvokeCount()>();
        if r1 == null goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        z0 = $z2;
        z1 = 0;

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r1.<sun.nio.ch.Invoker$GroupAndInvokeCount: void resetInvokeCount()>();

     label3:
        z1 = 0;
        $r5 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r6 = staticinvoke <sun.nio.ch.KQueuePort: java.util.concurrent.ArrayBlockingQueue access$700(sun.nio.ch.KQueuePort)>($r5);
        $r7 = virtualinvoke $r6.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object take()>();
        r2 = (sun.nio.ch.KQueuePort$Event) $r7;
        $r8 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r9 = staticinvoke <sun.nio.ch.KQueuePort: sun.nio.ch.KQueuePort$Event access$800(sun.nio.ch.KQueuePort)>($r8);
        if r2 != $r9 goto label9;

     label4:
        r2 = specialinvoke r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort$Event poll()>();

     label5:
        goto label9;

     label6:
        $r10 := @caughtexception;
        r3 = $r10;
        virtualinvoke r3.<java.io.IOException: void printStackTrace()>();

     label7:
        $r11 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        i0 = virtualinvoke $r11.<sun.nio.ch.KQueuePort: int threadExit(java.lang.Runnable,boolean)>(r0, z1);
        if i0 != 0 goto label8;

        $r12 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $z3 = virtualinvoke $r12.<sun.nio.ch.KQueuePort: boolean isShutdown()>();
        if $z3 == 0 goto label8;

        $r13 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        staticinvoke <sun.nio.ch.KQueuePort: void access$900(sun.nio.ch.KQueuePort)>($r13);

     label8:
        return;

     label9:
        goto label11;

     label10:
        $r14 := @caughtexception;
        r15 = $r14;
        goto label2;

     label11:
        $r16 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $r17 = staticinvoke <sun.nio.ch.KQueuePort: sun.nio.ch.KQueuePort$Event access$600(sun.nio.ch.KQueuePort)>($r16);
        if r2 != $r17 goto label15;

        $r18 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        r19 = virtualinvoke $r18.<sun.nio.ch.KQueuePort: java.lang.Runnable pollTask()>();
        if r19 != null goto label14;

     label12:
        $r20 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        i2 = virtualinvoke $r20.<sun.nio.ch.KQueuePort: int threadExit(java.lang.Runnable,boolean)>(r0, z1);
        if i2 != 0 goto label13;

        $r21 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $z4 = virtualinvoke $r21.<sun.nio.ch.KQueuePort: boolean isShutdown()>();
        if $z4 == 0 goto label13;

        $r22 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        staticinvoke <sun.nio.ch.KQueuePort: void access$900(sun.nio.ch.KQueuePort)>($r22);

     label13:
        return;

     label14:
        z1 = 1;
        interfaceinvoke r19.<java.lang.Runnable: void run()>();
        goto label2;

     label15:
        $r23 = virtualinvoke r2.<sun.nio.ch.KQueuePort$Event: sun.nio.ch.Port$PollableChannel channel()>();
        $i3 = virtualinvoke r2.<sun.nio.ch.KQueuePort$Event: int events()>();
        interfaceinvoke $r23.<sun.nio.ch.Port$PollableChannel: void onEvent(int,boolean)>($i3, z0);

     label16:
        goto label2;

     label17:
        $r24 := @caughtexception;
        r25 = $r24;
        z1 = 1;
        throw r25;

     label18:
        $r26 := @caughtexception;
        r27 = $r26;
        z1 = 1;
        throw r27;

     label19:
        $r28 := @caughtexception;
        r4 = $r28;

     label20:
        $r29 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        i1 = virtualinvoke $r29.<sun.nio.ch.KQueuePort: int threadExit(java.lang.Runnable,boolean)>(r0, z1);
        if i1 != 0 goto label21;

        $r30 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        $z5 = virtualinvoke $r30.<sun.nio.ch.KQueuePort: boolean isShutdown()>();
        if $z5 == 0 goto label21;

        $r31 = r0.<sun.nio.ch.KQueuePort$EventHandlerTask: sun.nio.ch.KQueuePort this$0>;
        staticinvoke <sun.nio.ch.KQueuePort: void access$900(sun.nio.ch.KQueuePort)>($r31);

     label21:
        throw r4;

        catch java.io.IOException from label4 to label5 with label6;
        catch java.lang.InterruptedException from label3 to label7 with label10;
        catch java.lang.Error from label15 to label16 with label17;
        catch java.lang.RuntimeException from label15 to label16 with label18;
        catch java.lang.Throwable from label2 to label7 with label19;
        catch java.lang.Throwable from label9 to label12 with label19;
        catch java.lang.Throwable from label14 to label20 with label19;
    }

    void <init>(sun.nio.ch.KQueuePort, sun.nio.ch.KQueuePort$1)
    {
        sun.nio.ch.KQueuePort$EventHandlerTask r0;
        sun.nio.ch.KQueuePort r1;
        sun.nio.ch.KQueuePort$1 r2;

        r0 := @this: sun.nio.ch.KQueuePort$EventHandlerTask;
        r1 := @parameter0: sun.nio.ch.KQueuePort;
        r2 := @parameter1: sun.nio.ch.KQueuePort$1;
        specialinvoke r0.<sun.nio.ch.KQueuePort$EventHandlerTask: void <init>(sun.nio.ch.KQueuePort)>(r1);
        return;
    }
}
