public class sun.reflect.generics.tree.SimpleClassTypeSignature extends java.lang.Object implements sun.reflect.generics.tree.FieldTypeSignature
{
    private boolean dollar;
    private java.lang.String name;
    private sun.reflect.generics.tree.TypeArgument[] typeArgs;

    private void <init>(java.lang.String, boolean, sun.reflect.generics.tree.TypeArgument[])
    {
        sun.reflect.generics.tree.SimpleClassTypeSignature r0;
        java.lang.String r1;
        boolean z0;
        sun.reflect.generics.tree.TypeArgument[] r2;

        r0 := @this: sun.reflect.generics.tree.SimpleClassTypeSignature;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        r2 := @parameter2: sun.reflect.generics.tree.TypeArgument[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.reflect.generics.tree.SimpleClassTypeSignature: java.lang.String name> = r1;
        r0.<sun.reflect.generics.tree.SimpleClassTypeSignature: boolean dollar> = z0;
        r0.<sun.reflect.generics.tree.SimpleClassTypeSignature: sun.reflect.generics.tree.TypeArgument[] typeArgs> = r2;
        return;
    }

    public static sun.reflect.generics.tree.SimpleClassTypeSignature make(java.lang.String, boolean, sun.reflect.generics.tree.TypeArgument[])
    {
        java.lang.String r0;
        boolean z0;
        sun.reflect.generics.tree.TypeArgument[] r1;
        sun.reflect.generics.tree.SimpleClassTypeSignature $r2;

        r0 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        r1 := @parameter2: sun.reflect.generics.tree.TypeArgument[];
        $r2 = new sun.reflect.generics.tree.SimpleClassTypeSignature;
        specialinvoke $r2.<sun.reflect.generics.tree.SimpleClassTypeSignature: void <init>(java.lang.String,boolean,sun.reflect.generics.tree.TypeArgument[])>(r0, z0, r1);
        return $r2;
    }

    public boolean getDollar()
    {
        sun.reflect.generics.tree.SimpleClassTypeSignature r0;
        boolean $z0;

        r0 := @this: sun.reflect.generics.tree.SimpleClassTypeSignature;
        $z0 = r0.<sun.reflect.generics.tree.SimpleClassTypeSignature: boolean dollar>;
        return $z0;
    }

    public java.lang.String getName()
    {
        sun.reflect.generics.tree.SimpleClassTypeSignature r0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.generics.tree.SimpleClassTypeSignature;
        $r1 = r0.<sun.reflect.generics.tree.SimpleClassTypeSignature: java.lang.String name>;
        return $r1;
    }

    public sun.reflect.generics.tree.TypeArgument[] getTypeArguments()
    {
        sun.reflect.generics.tree.SimpleClassTypeSignature r0;
        sun.reflect.generics.tree.TypeArgument[] $r1;

        r0 := @this: sun.reflect.generics.tree.SimpleClassTypeSignature;
        $r1 = r0.<sun.reflect.generics.tree.SimpleClassTypeSignature: sun.reflect.generics.tree.TypeArgument[] typeArgs>;
        return $r1;
    }

    public void accept(sun.reflect.generics.visitor.TypeTreeVisitor)
    {
        sun.reflect.generics.tree.SimpleClassTypeSignature r0;
        sun.reflect.generics.visitor.TypeTreeVisitor r1;

        r0 := @this: sun.reflect.generics.tree.SimpleClassTypeSignature;
        r1 := @parameter0: sun.reflect.generics.visitor.TypeTreeVisitor;
        interfaceinvoke r1.<sun.reflect.generics.visitor.TypeTreeVisitor: void visitSimpleClassTypeSignature(sun.reflect.generics.tree.SimpleClassTypeSignature)>(r0);
        return;
    }
}
