public class org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler extends org.apache.coyote.ajp.AbstractAjpProtocol$AbstractAjpConnectionHandler implements org.apache.tomcat.util.net.AprEndpoint$Handler
{
    protected org.apache.coyote.ajp.AjpAprProtocol proto;

    public void <init>(org.apache.coyote.ajp.AjpAprProtocol)
    {
        org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler r0;
        org.apache.coyote.ajp.AjpAprProtocol r1;

        r0 := @this: org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler;
        r1 := @parameter0: org.apache.coyote.ajp.AjpAprProtocol;
        specialinvoke r0.<org.apache.coyote.ajp.AbstractAjpProtocol$AbstractAjpConnectionHandler: void <init>()>();
        r0.<org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler: org.apache.coyote.ajp.AjpAprProtocol proto> = r1;
        return;
    }

    protected org.apache.coyote.AbstractProtocol getProtocol()
    {
        org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler r0;
        org.apache.coyote.ajp.AjpAprProtocol $r1;

        r0 := @this: org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler;
        $r1 = r0.<org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler: org.apache.coyote.ajp.AjpAprProtocol proto>;
        return $r1;
    }

    protected org.apache.juli.logging.Log getLog()
    {
        org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler r0;
        org.apache.juli.logging.Log $r1;

        r0 := @this: org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler;
        $r1 = staticinvoke <org.apache.coyote.ajp.AjpAprProtocol: org.apache.juli.logging.Log access$0()>();
        return $r1;
    }

    public void release(org.apache.tomcat.util.net.SocketWrapper, org.apache.coyote.Processor, boolean, boolean)
    {
        org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler r0;
        org.apache.tomcat.util.net.SocketWrapper r1;
        org.apache.coyote.Processor r2;
        boolean z0, z1;
        org.apache.coyote.AbstractProtocol$RecycledProcessors $r3;
        org.apache.coyote.ajp.AjpAprProtocol $r4, $r10;
        org.apache.tomcat.util.net.AbstractEndpoint $r5, $r11;
        org.apache.tomcat.util.net.AprEndpoint $r6;
        org.apache.tomcat.util.net.AprEndpoint$Poller $r7;
        java.lang.Object $r8;
        java.lang.Long $r9;
        long $l0;
        int $i1;

        r0 := @this: org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler;
        r1 := @parameter0: org.apache.tomcat.util.net.SocketWrapper;
        r2 := @parameter1: org.apache.coyote.Processor;
        z0 := @parameter2: boolean;
        z1 := @parameter3: boolean;
        interfaceinvoke r2.<org.apache.coyote.Processor: void recycle(boolean)>(z0);
        $r3 = r0.<org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler: org.apache.coyote.AbstractProtocol$RecycledProcessors recycledProcessors>;
        virtualinvoke $r3.<org.apache.coyote.AbstractProtocol$RecycledProcessors: boolean offer(org.apache.coyote.Processor)>(r2);
        if z1 == 0 goto label0;

        $r4 = r0.<org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler: org.apache.coyote.ajp.AjpAprProtocol proto>;
        $r5 = staticinvoke <org.apache.coyote.ajp.AjpAprProtocol: org.apache.tomcat.util.net.AbstractEndpoint access$1(org.apache.coyote.ajp.AjpAprProtocol)>($r4);
        $r6 = (org.apache.tomcat.util.net.AprEndpoint) $r5;
        $r7 = virtualinvoke $r6.<org.apache.tomcat.util.net.AprEndpoint: org.apache.tomcat.util.net.AprEndpoint$Poller getPoller()>();
        $r8 = virtualinvoke r1.<org.apache.tomcat.util.net.SocketWrapper: java.lang.Object getSocket()>();
        $r9 = (java.lang.Long) $r8;
        $l0 = virtualinvoke $r9.<java.lang.Long: long longValue()>();
        $r10 = r0.<org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler: org.apache.coyote.ajp.AjpAprProtocol proto>;
        $r11 = staticinvoke <org.apache.coyote.ajp.AjpAprProtocol: org.apache.tomcat.util.net.AbstractEndpoint access$1(org.apache.coyote.ajp.AjpAprProtocol)>($r10);
        $i1 = virtualinvoke $r11.<org.apache.tomcat.util.net.AbstractEndpoint: int getKeepAliveTimeout()>();
        virtualinvoke $r7.<org.apache.tomcat.util.net.AprEndpoint$Poller: void add(long,int,boolean,boolean)>($l0, $i1, 1, 0);

     label0:
        return;
    }

    protected org.apache.coyote.ajp.AjpAprProcessor createProcessor()
    {
        org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler r0;
        org.apache.coyote.ajp.AjpAprProcessor $r1, r2;
        org.apache.coyote.ajp.AjpAprProtocol $r3, $r4, $r7, $r9, $r10, $r11, $r12, $r14, $r15, $r17;
        int $i0, $i1, $i2;
        org.apache.tomcat.util.net.AbstractEndpoint $r5;
        org.apache.tomcat.util.net.AprEndpoint $r6;
        org.apache.coyote.Adapter $r8;
        boolean $z0, $z1, $z2;
        java.lang.String $r13, $r16;

        r0 := @this: org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler;
        $r1 = new org.apache.coyote.ajp.AjpAprProcessor;
        $r3 = r0.<org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler: org.apache.coyote.ajp.AjpAprProtocol proto>;
        $i0 = $r3.<org.apache.coyote.ajp.AjpAprProtocol: int packetSize>;
        $r4 = r0.<org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler: org.apache.coyote.ajp.AjpAprProtocol proto>;
        $r5 = staticinvoke <org.apache.coyote.ajp.AjpAprProtocol: org.apache.tomcat.util.net.AbstractEndpoint access$1(org.apache.coyote.ajp.AjpAprProtocol)>($r4);
        $r6 = (org.apache.tomcat.util.net.AprEndpoint) $r5;
        specialinvoke $r1.<org.apache.coyote.ajp.AjpAprProcessor: void <init>(int,org.apache.tomcat.util.net.AprEndpoint)>($i0, $r6);
        r2 = $r1;
        $r7 = r0.<org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler: org.apache.coyote.ajp.AjpAprProtocol proto>;
        $r8 = staticinvoke <org.apache.coyote.ajp.AjpAprProtocol: org.apache.coyote.Adapter access$2(org.apache.coyote.ajp.AjpAprProtocol)>($r7);
        virtualinvoke r2.<org.apache.coyote.ajp.AjpAprProcessor: void setAdapter(org.apache.coyote.Adapter)>($r8);
        $r9 = r0.<org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler: org.apache.coyote.ajp.AjpAprProtocol proto>;
        $z0 = virtualinvoke $r9.<org.apache.coyote.ajp.AjpAprProtocol: boolean getAjpFlush()>();
        virtualinvoke r2.<org.apache.coyote.ajp.AjpAprProcessor: void setAjpFlush(boolean)>($z0);
        $r10 = r0.<org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler: org.apache.coyote.ajp.AjpAprProtocol proto>;
        $z1 = $r10.<org.apache.coyote.ajp.AjpAprProtocol: boolean tomcatAuthentication>;
        virtualinvoke r2.<org.apache.coyote.ajp.AjpAprProcessor: void setTomcatAuthentication(boolean)>($z1);
        $r11 = r0.<org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler: org.apache.coyote.ajp.AjpAprProtocol proto>;
        $z2 = virtualinvoke $r11.<org.apache.coyote.ajp.AjpAprProtocol: boolean getTomcatAuthorization()>();
        virtualinvoke r2.<org.apache.coyote.ajp.AjpAprProcessor: void setTomcatAuthorization(boolean)>($z2);
        $r12 = r0.<org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler: org.apache.coyote.ajp.AjpAprProtocol proto>;
        $r13 = $r12.<org.apache.coyote.ajp.AjpAprProtocol: java.lang.String requiredSecret>;
        virtualinvoke r2.<org.apache.coyote.ajp.AjpAprProcessor: void setRequiredSecret(java.lang.String)>($r13);
        $r14 = r0.<org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler: org.apache.coyote.ajp.AjpAprProtocol proto>;
        $i1 = virtualinvoke $r14.<org.apache.coyote.ajp.AjpAprProtocol: int getKeepAliveTimeout()>();
        virtualinvoke r2.<org.apache.coyote.ajp.AjpAprProcessor: void setKeepAliveTimeout(int)>($i1);
        $r15 = r0.<org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler: org.apache.coyote.ajp.AjpAprProtocol proto>;
        $r16 = virtualinvoke $r15.<org.apache.coyote.ajp.AjpAprProtocol: java.lang.String getClientCertProvider()>();
        virtualinvoke r2.<org.apache.coyote.ajp.AjpAprProcessor: void setClientCertProvider(java.lang.String)>($r16);
        $r17 = r0.<org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler: org.apache.coyote.ajp.AjpAprProtocol proto>;
        $i2 = virtualinvoke $r17.<org.apache.coyote.ajp.AjpAprProtocol: int getMaxCookieCount()>();
        virtualinvoke r2.<org.apache.coyote.ajp.AjpAprProcessor: void setMaxCookieCount(int)>($i2);
        virtualinvoke r0.<org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler: void register(org.apache.coyote.AbstractProcessor)>(r2);
        return r2;
    }

    protected volatile org.apache.coyote.Processor createProcessor()
    {
        org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler r0;
        org.apache.coyote.ajp.AjpAprProcessor $r1;

        r0 := @this: org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler;
        $r1 = virtualinvoke r0.<org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler: org.apache.coyote.ajp.AjpAprProcessor createProcessor()>();
        return $r1;
    }
}
