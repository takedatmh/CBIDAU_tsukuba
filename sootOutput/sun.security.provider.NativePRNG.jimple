public final class sun.security.provider.NativePRNG extends java.security.SecureRandomSpi
{
    private static final long serialVersionUID;
    private static final java.lang.String NAME_RANDOM;
    private static final java.lang.String NAME_URANDOM;
    private static final sun.security.provider.NativePRNG$RandomIO INSTANCE;

    private static sun.security.provider.NativePRNG$RandomIO initIO()
    {
        sun.security.provider.NativePRNG$1 $r0;
        java.lang.Object $r1;
        sun.security.provider.NativePRNG$RandomIO $r2;

        $r0 = new sun.security.provider.NativePRNG$1;
        specialinvoke $r0.<sun.security.provider.NativePRNG$1: void <init>()>();
        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        $r2 = (sun.security.provider.NativePRNG$RandomIO) $r1;
        return $r2;
    }

    static boolean isAvailable()
    {
        sun.security.provider.NativePRNG$RandomIO $r0;
        boolean $z0;

        $r0 = <sun.security.provider.NativePRNG: sun.security.provider.NativePRNG$RandomIO INSTANCE>;
        if $r0 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public void <init>()
    {
        sun.security.provider.NativePRNG r0;
        sun.security.provider.NativePRNG$RandomIO $r1;
        java.lang.AssertionError $r2;

        r0 := @this: sun.security.provider.NativePRNG;
        specialinvoke r0.<java.security.SecureRandomSpi: void <init>()>();
        $r1 = <sun.security.provider.NativePRNG: sun.security.provider.NativePRNG$RandomIO INSTANCE>;
        if $r1 != null goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("NativePRNG not available");
        throw $r2;

     label0:
        return;
    }

    protected void engineSetSeed(byte[])
    {
        sun.security.provider.NativePRNG r0;
        byte[] r1;
        sun.security.provider.NativePRNG$RandomIO $r2;

        r0 := @this: sun.security.provider.NativePRNG;
        r1 := @parameter0: byte[];
        $r2 = <sun.security.provider.NativePRNG: sun.security.provider.NativePRNG$RandomIO INSTANCE>;
        staticinvoke <sun.security.provider.NativePRNG$RandomIO: void access$100(sun.security.provider.NativePRNG$RandomIO,byte[])>($r2, r1);
        return;
    }

    protected void engineNextBytes(byte[])
    {
        sun.security.provider.NativePRNG r0;
        byte[] r1;
        sun.security.provider.NativePRNG$RandomIO $r2;

        r0 := @this: sun.security.provider.NativePRNG;
        r1 := @parameter0: byte[];
        $r2 = <sun.security.provider.NativePRNG: sun.security.provider.NativePRNG$RandomIO INSTANCE>;
        staticinvoke <sun.security.provider.NativePRNG$RandomIO: void access$200(sun.security.provider.NativePRNG$RandomIO,byte[])>($r2, r1);
        return;
    }

    protected byte[] engineGenerateSeed(int)
    {
        sun.security.provider.NativePRNG r0;
        int i0;
        sun.security.provider.NativePRNG$RandomIO $r1;
        byte[] $r2;

        r0 := @this: sun.security.provider.NativePRNG;
        i0 := @parameter0: int;
        $r1 = <sun.security.provider.NativePRNG: sun.security.provider.NativePRNG$RandomIO INSTANCE>;
        $r2 = staticinvoke <sun.security.provider.NativePRNG$RandomIO: byte[] access$300(sun.security.provider.NativePRNG$RandomIO,int)>($r1, i0);
        return $r2;
    }

    static void <clinit>()
    {
        sun.security.provider.NativePRNG$RandomIO $r0;

        $r0 = staticinvoke <sun.security.provider.NativePRNG: sun.security.provider.NativePRNG$RandomIO initIO()>();
        <sun.security.provider.NativePRNG: sun.security.provider.NativePRNG$RandomIO INSTANCE> = $r0;
        return;
    }
}
