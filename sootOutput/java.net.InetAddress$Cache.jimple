final class java.net.InetAddress$Cache extends java.lang.Object
{
    private java.util.LinkedHashMap cache;
    private java.net.InetAddress$Cache$Type type;

    public void <init>(java.net.InetAddress$Cache$Type)
    {
        java.net.InetAddress$Cache r0;
        java.net.InetAddress$Cache$Type r1;
        java.util.LinkedHashMap $r2;

        r0 := @this: java.net.InetAddress$Cache;
        r1 := @parameter0: java.net.InetAddress$Cache$Type;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.net.InetAddress$Cache: java.net.InetAddress$Cache$Type type> = r1;
        $r2 = new java.util.LinkedHashMap;
        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();
        r0.<java.net.InetAddress$Cache: java.util.LinkedHashMap cache> = $r2;
        return;
    }

    private int getPolicy()
    {
        java.net.InetAddress$Cache r0;
        java.net.InetAddress$Cache$Type $r1, $r2;
        int $i0, $i1;

        r0 := @this: java.net.InetAddress$Cache;
        $r2 = r0.<java.net.InetAddress$Cache: java.net.InetAddress$Cache$Type type>;
        $r1 = <java.net.InetAddress$Cache$Type: java.net.InetAddress$Cache$Type Positive>;
        if $r2 != $r1 goto label0;

        $i0 = staticinvoke <sun.net.InetAddressCachePolicy: int get()>();
        return $i0;

     label0:
        $i1 = staticinvoke <sun.net.InetAddressCachePolicy: int getNegative()>();
        return $i1;
    }

    public java.net.InetAddress$Cache put(java.lang.String, java.net.InetAddress[])
    {
        java.net.InetAddress$Cache r0;
        java.lang.String r1, r5, r16;
        java.net.InetAddress[] r2;
        int i0, $i8;
        java.util.LinkedList r3, $r8;
        long l1, $l2, $l4, l6, $l7, $l9;
        java.util.Iterator r4, r14;
        java.net.InetAddress$CacheEntry r6, r7, $r19;
        java.util.LinkedHashMap $r9, $r12, $r17, $r20;
        java.util.Set $r10;
        boolean $z0, $z2;
        java.lang.Object $r11, $r13, $r15;
        byte $b3, $b5;

        r0 := @this: java.net.InetAddress$Cache;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.net.InetAddress[];
        i0 = specialinvoke r0.<java.net.InetAddress$Cache: int getPolicy()>();
        if i0 != 0 goto label0;

        return r0;

     label0:
        if i0 == -1 goto label4;

        $r8 = new java.util.LinkedList;
        specialinvoke $r8.<java.util.LinkedList: void <init>()>();
        r3 = $r8;
        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $r9 = r0.<java.net.InetAddress$Cache: java.util.LinkedHashMap cache>;
        $r10 = virtualinvoke $r9.<java.util.LinkedHashMap: java.util.Set keySet()>();
        r4 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.lang.String) $r11;
        $r12 = r0.<java.net.InetAddress$Cache: java.util.LinkedHashMap cache>;
        $r13 = virtualinvoke $r12.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r5);
        r6 = (java.net.InetAddress$CacheEntry) $r13;
        $l2 = r6.<java.net.InetAddress$CacheEntry: long expiration>;
        $b3 = $l2 cmp 0L;
        if $b3 < 0 goto label2;

        $l4 = r6.<java.net.InetAddress$CacheEntry: long expiration>;
        $b5 = $l4 cmp l1;
        if $b5 >= 0 goto label2;

        virtualinvoke r3.<java.util.LinkedList: boolean add(java.lang.Object)>(r5);
        goto label1;

     label2:
        r14 = virtualinvoke r3.<java.util.LinkedList: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label4;

        $r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();
        r16 = (java.lang.String) $r15;
        $r17 = r0.<java.net.InetAddress$Cache: java.util.LinkedHashMap cache>;
        virtualinvoke $r17.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>(r16);
        goto label3;

     label4:
        if i0 != -1 goto label5;

        l6 = -1L;
        goto label6;

     label5:
        $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $i8 = i0 * 1000;
        $l9 = (long) $i8;
        l6 = $l7 + $l9;

     label6:
        $r19 = new java.net.InetAddress$CacheEntry;
        specialinvoke $r19.<java.net.InetAddress$CacheEntry: void <init>(java.net.InetAddress[],long)>(r2, l6);
        r7 = $r19;
        $r20 = r0.<java.net.InetAddress$Cache: java.util.LinkedHashMap cache>;
        virtualinvoke $r20.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r7);
        return r0;
    }

    public java.net.InetAddress$CacheEntry get(java.lang.String)
    {
        java.net.InetAddress$Cache r0;
        java.lang.String r1;
        int i0;
        java.net.InetAddress$CacheEntry r2;
        java.util.LinkedHashMap $r3, $r5;
        java.lang.Object $r4;
        long $l1, $l3, $l4;
        byte $b2, $b5;

        r0 := @this: java.net.InetAddress$Cache;
        r1 := @parameter0: java.lang.String;
        i0 = specialinvoke r0.<java.net.InetAddress$Cache: int getPolicy()>();
        if i0 != 0 goto label0;

        return null;

     label0:
        $r3 = r0.<java.net.InetAddress$Cache: java.util.LinkedHashMap cache>;
        $r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);
        r2 = (java.net.InetAddress$CacheEntry) $r4;
        if r2 == null goto label1;

        if i0 == -1 goto label1;

        $l1 = r2.<java.net.InetAddress$CacheEntry: long expiration>;
        $b2 = $l1 cmp 0L;
        if $b2 < 0 goto label1;

        $l3 = r2.<java.net.InetAddress$CacheEntry: long expiration>;
        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $b5 = $l3 cmp $l4;
        if $b5 >= 0 goto label1;

        $r5 = r0.<java.net.InetAddress$Cache: java.util.LinkedHashMap cache>;
        virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>(r1);
        r2 = null;

     label1:
        return r2;
    }
}
