public final class java.lang.Character extends java.lang.Object implements java.io.Serializable, java.lang.Comparable
{
    public static final int MIN_RADIX;
    public static final int MAX_RADIX;
    public static final char MIN_VALUE;
    public static final char MAX_VALUE;
    public static final java.lang.Class TYPE;
    public static final byte UNASSIGNED;
    public static final byte UPPERCASE_LETTER;
    public static final byte LOWERCASE_LETTER;
    public static final byte TITLECASE_LETTER;
    public static final byte MODIFIER_LETTER;
    public static final byte OTHER_LETTER;
    public static final byte NON_SPACING_MARK;
    public static final byte ENCLOSING_MARK;
    public static final byte COMBINING_SPACING_MARK;
    public static final byte DECIMAL_DIGIT_NUMBER;
    public static final byte LETTER_NUMBER;
    public static final byte OTHER_NUMBER;
    public static final byte SPACE_SEPARATOR;
    public static final byte LINE_SEPARATOR;
    public static final byte PARAGRAPH_SEPARATOR;
    public static final byte CONTROL;
    public static final byte FORMAT;
    public static final byte PRIVATE_USE;
    public static final byte SURROGATE;
    public static final byte DASH_PUNCTUATION;
    public static final byte START_PUNCTUATION;
    public static final byte END_PUNCTUATION;
    public static final byte CONNECTOR_PUNCTUATION;
    public static final byte OTHER_PUNCTUATION;
    public static final byte MATH_SYMBOL;
    public static final byte CURRENCY_SYMBOL;
    public static final byte MODIFIER_SYMBOL;
    public static final byte OTHER_SYMBOL;
    public static final byte INITIAL_QUOTE_PUNCTUATION;
    public static final byte FINAL_QUOTE_PUNCTUATION;
    static final int ERROR;
    public static final byte DIRECTIONALITY_UNDEFINED;
    public static final byte DIRECTIONALITY_LEFT_TO_RIGHT;
    public static final byte DIRECTIONALITY_RIGHT_TO_LEFT;
    public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC;
    public static final byte DIRECTIONALITY_EUROPEAN_NUMBER;
    public static final byte DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR;
    public static final byte DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR;
    public static final byte DIRECTIONALITY_ARABIC_NUMBER;
    public static final byte DIRECTIONALITY_COMMON_NUMBER_SEPARATOR;
    public static final byte DIRECTIONALITY_NONSPACING_MARK;
    public static final byte DIRECTIONALITY_BOUNDARY_NEUTRAL;
    public static final byte DIRECTIONALITY_PARAGRAPH_SEPARATOR;
    public static final byte DIRECTIONALITY_SEGMENT_SEPARATOR;
    public static final byte DIRECTIONALITY_WHITESPACE;
    public static final byte DIRECTIONALITY_OTHER_NEUTRALS;
    public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING;
    public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE;
    public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING;
    public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE;
    public static final byte DIRECTIONALITY_POP_DIRECTIONAL_FORMAT;
    public static final char MIN_HIGH_SURROGATE;
    public static final char MAX_HIGH_SURROGATE;
    public static final char MIN_LOW_SURROGATE;
    public static final char MAX_LOW_SURROGATE;
    public static final char MIN_SURROGATE;
    public static final char MAX_SURROGATE;
    public static final int MIN_SUPPLEMENTARY_CODE_POINT;
    public static final int MIN_CODE_POINT;
    public static final int MAX_CODE_POINT;
    private final char value;
    private static final long serialVersionUID;
    public static final int SIZE;
    static final boolean $assertionsDisabled;

    public void <init>(char)
    {
        java.lang.Character r0;
        char c0;

        r0 := @this: java.lang.Character;
        c0 := @parameter0: char;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.Character: char value> = c0;
        return;
    }

    public static java.lang.Character valueOf(char)
    {
        char c0;
        java.lang.Character[] $r0;
        java.lang.Character $r1, $r2;

        c0 := @parameter0: char;
        if c0 > 127 goto label0;

        $r0 = <java.lang.Character$CharacterCache: java.lang.Character[] cache>;
        $r1 = $r0[c0];
        return $r1;

     label0:
        $r2 = new java.lang.Character;
        specialinvoke $r2.<java.lang.Character: void <init>(char)>(c0);
        return $r2;
    }

    public char charValue()
    {
        java.lang.Character r0;
        char $c0;

        r0 := @this: java.lang.Character;
        $c0 = r0.<java.lang.Character: char value>;
        return $c0;
    }

    public int hashCode()
    {
        java.lang.Character r0;
        char $c0;

        r0 := @this: java.lang.Character;
        $c0 = r0.<java.lang.Character: char value>;
        return $c0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Character r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        char $c0, $c1;

        r0 := @this: java.lang.Character;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.lang.Character;
        if $z0 == 0 goto label2;

        $c0 = r0.<java.lang.Character: char value>;
        $r2 = (java.lang.Character) r1;
        $c1 = virtualinvoke $r2.<java.lang.Character: char charValue()>();
        if $c0 != $c1 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;

     label2:
        return 0;
    }

    public java.lang.String toString()
    {
        java.lang.Character r0;
        char[] r1, $r2;
        char $c0;
        java.lang.String $r3;

        r0 := @this: java.lang.Character;
        $r2 = newarray (char)[1];
        $c0 = r0.<java.lang.Character: char value>;
        $r2[0] = $c0;
        r1 = $r2;
        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>(r1);
        return $r3;
    }

    public static java.lang.String toString(char)
    {
        char c0;
        java.lang.String $r0;

        c0 := @parameter0: char;
        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);
        return $r0;
    }

    public static boolean isValidCodePoint(int)
    {
        int i0, i1;
        boolean $z0;

        i0 := @parameter0: int;
        i1 = i0 >>> 16;
        if i1 >= 17 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public static boolean isBmpCodePoint(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;
        $i1 = i0 >>> 16;
        if $i1 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public static boolean isSupplementaryCodePoint(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;
        if i0 < 65536 goto label0;

        if i0 >= 1114112 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public static boolean isHighSurrogate(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        if c0 < 55296 goto label0;

        if c0 >= 56320 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public static boolean isLowSurrogate(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        if c0 < 56320 goto label0;

        if c0 >= 57344 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public static boolean isSurrogate(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        if c0 < 55296 goto label0;

        if c0 >= 57344 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public static boolean isSurrogatePair(char, char)
    {
        char c0, c1;
        boolean $z0, $z1, $z2;

        c0 := @parameter0: char;
        c1 := @parameter1: char;
        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c0);
        if $z0 == 0 goto label0;

        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(c1);
        if $z1 == 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;
    }

    public static int charCount(int)
    {
        int i0;
        byte $b1;

        i0 := @parameter0: int;
        if i0 < 65536 goto label0;

        $b1 = 2;
        goto label1;

     label0:
        $b1 = 1;

     label1:
        return $b1;
    }

    public static int toCodePoint(char, char)
    {
        char c0, c1;
        int $i2, $i3, $i4;

        c0 := @parameter0: char;
        c1 := @parameter1: char;
        $i2 = c0 << 10;
        $i3 = $i2 + c1;
        $i4 = $i3 + -56613888;
        return $i4;
    }

    public static int codePointAt(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0;
        int i0, i3, $i4, $i5;
        char c1, c2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.CharSequence;
        i0 := @parameter1: int;
        i3 = i0 + 1;
        c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i0);
        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c1);
        if $z0 == 0 goto label0;

        $i4 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();
        if i3 >= $i4 goto label0;

        c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3);
        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(c2);
        if $z1 == 0 goto label0;

        $i5 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(c1, c2);
        return $i5;

     label0:
        return c1;
    }

    public static int codePointAt(char[], int)
    {
        char[] r0;
        int i0, $i1, $i2;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        $i1 = lengthof r0;
        $i2 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>(r0, i0, $i1);
        return $i2;
    }

    public static int codePointAt(char[], int, int)
    {
        char[] r0;
        int i0, i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r1;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i0 >= i1 goto label0;

        if i1 < 0 goto label0;

        $i2 = lengthof r0;
        if i1 <= $i2 goto label1;

     label0:
        $r1 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r1;

     label1:
        $i3 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>(r0, i0, i1);
        return $i3;
    }

    static int codePointAtImpl(char[], int, int)
    {
        char[] r0;
        int i0, i1, i4, $i5;
        char c2, c3;
        boolean $z0, $z1;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i4 = i0 + 1;
        c2 = r0[i0];
        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c2);
        if $z0 == 0 goto label0;

        if i4 >= i1 goto label0;

        c3 = r0[i4];
        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(c3);
        if $z1 == 0 goto label0;

        $i5 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(c2, c3);
        return $i5;

     label0:
        return c2;
    }

    public static int codePointBefore(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0;
        int i0, i3, i4, $i5;
        char c1, c2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.CharSequence;
        i0 := @parameter1: int;
        i3 = i0 + -1;
        c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3);
        $z0 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(c1);
        if $z0 == 0 goto label0;

        if i3 <= 0 goto label0;

        i4 = i3 + -1;
        c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i4);
        $z1 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c2);
        if $z1 == 0 goto label0;

        $i5 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(c2, c1);
        return $i5;

     label0:
        return c1;
    }

    public static int codePointBefore(char[], int)
    {
        char[] r0;
        int i0, $i1;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        $i1 = staticinvoke <java.lang.Character: int codePointBeforeImpl(char[],int,int)>(r0, i0, 0);
        return $i1;
    }

    public static int codePointBefore(char[], int, int)
    {
        char[] r0;
        int i0, i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r1;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i0 <= i1 goto label0;

        if i1 < 0 goto label0;

        $i2 = lengthof r0;
        if i1 < $i2 goto label1;

     label0:
        $r1 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r1;

     label1:
        $i3 = staticinvoke <java.lang.Character: int codePointBeforeImpl(char[],int,int)>(r0, i0, i1);
        return $i3;
    }

    static int codePointBeforeImpl(char[], int, int)
    {
        char[] r0;
        int i0, i1, i4, i5, $i6;
        char c2, c3;
        boolean $z0, $z1;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i4 = i0 + -1;
        c2 = r0[i4];
        $z0 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(c2);
        if $z0 == 0 goto label0;

        if i4 <= i1 goto label0;

        i5 = i4 + -1;
        c3 = r0[i5];
        $z1 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c3);
        if $z1 == 0 goto label0;

        $i6 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(c3, c2);
        return $i6;

     label0:
        return c2;
    }

    public static char highSurrogate(int)
    {
        int i0, $i1, $i2;
        char $c3;

        i0 := @parameter0: int;
        $i1 = i0 >>> 10;
        $i2 = $i1 + 55232;
        $c3 = (char) $i2;
        return $c3;
    }

    public static char lowSurrogate(int)
    {
        int i0, $i1, $i2;
        char $c3;

        i0 := @parameter0: int;
        $i1 = i0 & 1023;
        $i2 = $i1 + 56320;
        $c3 = (char) $i2;
        return $c3;
    }

    public static int toChars(int, char[], int)
    {
        int i0, i1;
        char[] r0;
        boolean $z0, $z1;
        char $c2;
        java.lang.IllegalArgumentException $r1;

        i0 := @parameter0: int;
        r0 := @parameter1: char[];
        i1 := @parameter2: int;
        $z0 = staticinvoke <java.lang.Character: boolean isBmpCodePoint(int)>(i0);
        if $z0 == 0 goto label0;

        $c2 = (char) i0;
        r0[i1] = $c2;
        return 1;

     label0:
        $z1 = staticinvoke <java.lang.Character: boolean isValidCodePoint(int)>(i0);
        if $z1 == 0 goto label1;

        staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(i0, r0, i1);
        return 2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r1;
    }

    public static char[] toChars(int)
    {
        int i0;
        char[] r0, $r1;
        boolean $z0, $z1;
        char $c1;
        java.lang.IllegalArgumentException $r2;

        i0 := @parameter0: int;
        $z0 = staticinvoke <java.lang.Character: boolean isBmpCodePoint(int)>(i0);
        if $z0 == 0 goto label0;

        $r1 = newarray (char)[1];
        $c1 = (char) i0;
        $r1[0] = $c1;
        return $r1;

     label0:
        $z1 = staticinvoke <java.lang.Character: boolean isValidCodePoint(int)>(i0);
        if $z1 == 0 goto label1;

        r0 = newarray (char)[2];
        staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(i0, r0, 0);
        return r0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r2;
    }

    static void toSurrogates(int, char[], int)
    {
        int i0, i1, $i2;
        char[] r0;
        char $c3, $c4;

        i0 := @parameter0: int;
        r0 := @parameter1: char[];
        i1 := @parameter2: int;
        $i2 = i1 + 1;
        $c3 = staticinvoke <java.lang.Character: char lowSurrogate(int)>(i0);
        r0[$i2] = $c3;
        $c4 = staticinvoke <java.lang.Character: char highSurrogate(int)>(i0);
        r0[i1] = $c4;
        return;
    }

    public static int codePointCount(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.IndexOutOfBoundsException $r1;
        char $c6, $c7;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.CharSequence;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();
        if i0 < 0 goto label0;

        if i1 > i2 goto label0;

        if i0 <= i1 goto label1;

     label0:
        $r1 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r1;

     label1:
        i3 = i1 - i0;
        i4 = i0;

     label2:
        if i4 >= i1 goto label3;

        $i5 = i4;
        i4 = i4 + 1;
        $c6 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i5);
        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c6);
        if $z0 == 0 goto label2;

        if i4 >= i1 goto label2;

        $c7 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i4);
        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c7);
        if $z1 == 0 goto label2;

        i3 = i3 + -1;
        i4 = i4 + 1;
        goto label2;

     label3:
        return i3;
    }

    public static int codePointCount(char[], int, int)
    {
        char[] r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.IndexOutOfBoundsException $r1;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = lengthof r0;
        $i3 = $i2 - i0;
        if i1 > $i3 goto label0;

        if i0 < 0 goto label0;

        if i1 >= 0 goto label1;

     label0:
        $r1 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r1;

     label1:
        $i4 = staticinvoke <java.lang.Character: int codePointCountImpl(char[],int,int)>(r0, i0, i1);
        return $i4;
    }

    static int codePointCountImpl(char[], int, int)
    {
        char[] r0;
        int i0, i1, i2, i3, i4, $i5;
        char $c6, $c7;
        boolean $z0, $z1;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = i0 + i1;
        i3 = i1;
        i4 = i0;

     label0:
        if i4 >= i2 goto label1;

        $i5 = i4;
        i4 = i4 + 1;
        $c6 = r0[$i5];
        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c6);
        if $z0 == 0 goto label0;

        if i4 >= i2 goto label0;

        $c7 = r0[i4];
        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c7);
        if $z1 == 0 goto label0;

        i3 = i3 + -1;
        i4 = i4 + 1;
        goto label0;

     label1:
        return i3;
    }

    public static int offsetByCodePoints(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        int i0, i1, i2, i3, i4, $i5, i8, $i10;
        java.lang.IndexOutOfBoundsException $r1, $r2, $r3;
        char $c6, $c7, $c9, $c11;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.CharSequence;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();
        if i0 < 0 goto label0;

        if i0 <= i2 goto label1;

     label0:
        $r1 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r1;

     label1:
        i3 = i0;
        if i1 < 0 goto label6;

        i4 = 0;

     label2:
        if i3 >= i2 goto label4;

        if i4 >= i1 goto label4;

        $i5 = i3;
        i3 = i3 + 1;
        $c6 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i5);
        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c6);
        if $z0 == 0 goto label3;

        if i3 >= i2 goto label3;

        $c7 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3);
        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c7);
        if $z1 == 0 goto label3;

        i3 = i3 + 1;

     label3:
        i4 = i4 + 1;
        goto label2;

     label4:
        if i4 >= i1 goto label5;

        $r2 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r2;

     label5:
        goto label10;

     label6:
        i8 = i1;

     label7:
        if i3 <= 0 goto label9;

        if i8 >= 0 goto label9;

        i3 = i3 + -1;
        $c9 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3);
        $z2 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c9);
        if $z2 == 0 goto label8;

        if i3 <= 0 goto label8;

        $i10 = i3 - 1;
        $c11 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i10);
        $z3 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c11);
        if $z3 == 0 goto label8;

        i3 = i3 + -1;

     label8:
        i8 = i8 + 1;
        goto label7;

     label9:
        if i8 >= 0 goto label10;

        $r3 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r3;

     label10:
        return i3;
    }

    public static int offsetByCodePoints(char[], int, int, int, int)
    {
        char[] r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        java.lang.IndexOutOfBoundsException $r1;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        $i4 = lengthof r0;
        $i5 = $i4 - i0;
        if i1 > $i5 goto label0;

        if i0 < 0 goto label0;

        if i1 < 0 goto label0;

        if i2 < i0 goto label0;

        $i6 = i0 + i1;
        if i2 <= $i6 goto label1;

     label0:
        $r1 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r1;

     label1:
        $i7 = staticinvoke <java.lang.Character: int offsetByCodePointsImpl(char[],int,int,int,int)>(r0, i0, i1, i2, i3);
        return $i7;
    }

    static int offsetByCodePointsImpl(char[], int, int, int, int)
    {
        char[] r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, i10, $i12;
        char $c8, $c9, $c11, $c13;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IndexOutOfBoundsException $r1, $r2;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 = i2;
        if i3 < 0 goto label4;

        i5 = i0 + i1;
        i6 = 0;

     label0:
        if i4 >= i5 goto label2;

        if i6 >= i3 goto label2;

        $i7 = i4;
        i4 = i4 + 1;
        $c8 = r0[$i7];
        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c8);
        if $z0 == 0 goto label1;

        if i4 >= i5 goto label1;

        $c9 = r0[i4];
        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c9);
        if $z1 == 0 goto label1;

        i4 = i4 + 1;

     label1:
        i6 = i6 + 1;
        goto label0;

     label2:
        if i6 >= i3 goto label3;

        $r1 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r1;

     label3:
        goto label8;

     label4:
        i10 = i3;

     label5:
        if i4 <= i0 goto label7;

        if i10 >= 0 goto label7;

        i4 = i4 + -1;
        $c11 = r0[i4];
        $z2 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c11);
        if $z2 == 0 goto label6;

        if i4 <= i0 goto label6;

        $i12 = i4 - 1;
        $c13 = r0[$i12];
        $z3 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c13);
        if $z3 == 0 goto label6;

        i4 = i4 + -1;

     label6:
        i10 = i10 + 1;
        goto label5;

     label7:
        if i10 >= 0 goto label8;

        $r2 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r2;

     label8:
        return i4;
    }

    public static boolean isLowerCase(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isLowerCase(int)>(c0);
        return $z0;
    }

    public static boolean isLowerCase(int)
    {
        int i0, $i1;
        java.lang.CharacterData $r0;
        boolean $z0, $z1;

        i0 := @parameter0: int;
        $i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);
        if $i1 == 2 goto label0;

        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $z0 = virtualinvoke $r0.<java.lang.CharacterData: boolean isOtherLowercase(int)>(i0);
        if $z0 == 0 goto label1;

     label0:
        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean isUpperCase(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(c0);
        return $z0;
    }

    public static boolean isUpperCase(int)
    {
        int i0, $i1;
        java.lang.CharacterData $r0;
        boolean $z0, $z1;

        i0 := @parameter0: int;
        $i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);
        if $i1 == 1 goto label0;

        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $z0 = virtualinvoke $r0.<java.lang.CharacterData: boolean isOtherUppercase(int)>(i0);
        if $z0 == 0 goto label1;

     label0:
        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean isTitleCase(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isTitleCase(int)>(c0);
        return $z0;
    }

    public static boolean isTitleCase(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;
        $i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);
        if $i1 != 3 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public static boolean isDigit(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isDigit(int)>(c0);
        return $z0;
    }

    public static boolean isDigit(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;
        $i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);
        if $i1 != 9 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public static boolean isDefined(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isDefined(int)>(c0);
        return $z0;
    }

    public static boolean isDefined(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;
        $i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);
        if $i1 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public static boolean isLetter(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isLetter(int)>(c0);
        return $z0;
    }

    public static boolean isLetter(int)
    {
        int i0, $i1;
        byte $b2, $b3;
        boolean $z0;

        i0 := @parameter0: int;
        $i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);
        $b2 = 62 >> $i1;
        $b3 = $b2 & 1;
        if $b3 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public static boolean isLetterOrDigit(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(int)>(c0);
        return $z0;
    }

    public static boolean isLetterOrDigit(int)
    {
        int i0, $i1;
        short $s2, $s3;
        boolean $z0;

        i0 := @parameter0: int;
        $i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);
        $s2 = 574 >> $i1;
        $s3 = $s2 & 1;
        if $s3 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public static boolean isJavaLetter(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>(c0);
        return $z0;
    }

    public static boolean isJavaLetterOrDigit(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>(c0);
        return $z0;
    }

    public static boolean isAlphabetic(int)
    {
        int i0, $i1;
        short $s2, $s3;
        java.lang.CharacterData $r0;
        boolean $z0, $z1;

        i0 := @parameter0: int;
        $i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);
        $s2 = 1086 >> $i1;
        $s3 = $s2 & 1;
        if $s3 != 0 goto label0;

        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $z0 = virtualinvoke $r0.<java.lang.CharacterData: boolean isOtherAlphabetic(int)>(i0);
        if $z0 == 0 goto label1;

     label0:
        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean isIdeographic(int)
    {
        int i0;
        java.lang.CharacterData $r0;
        boolean $z0;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $z0 = virtualinvoke $r0.<java.lang.CharacterData: boolean isIdeographic(int)>(i0);
        return $z0;
    }

    public static boolean isJavaIdentifierStart(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(int)>(c0);
        return $z0;
    }

    public static boolean isJavaIdentifierStart(int)
    {
        int i0;
        java.lang.CharacterData $r0;
        boolean $z0;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $z0 = virtualinvoke $r0.<java.lang.CharacterData: boolean isJavaIdentifierStart(int)>(i0);
        return $z0;
    }

    public static boolean isJavaIdentifierPart(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(int)>(c0);
        return $z0;
    }

    public static boolean isJavaIdentifierPart(int)
    {
        int i0;
        java.lang.CharacterData $r0;
        boolean $z0;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $z0 = virtualinvoke $r0.<java.lang.CharacterData: boolean isJavaIdentifierPart(int)>(i0);
        return $z0;
    }

    public static boolean isUnicodeIdentifierStart(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isUnicodeIdentifierStart(int)>(c0);
        return $z0;
    }

    public static boolean isUnicodeIdentifierStart(int)
    {
        int i0;
        java.lang.CharacterData $r0;
        boolean $z0;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $z0 = virtualinvoke $r0.<java.lang.CharacterData: boolean isUnicodeIdentifierStart(int)>(i0);
        return $z0;
    }

    public static boolean isUnicodeIdentifierPart(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isUnicodeIdentifierPart(int)>(c0);
        return $z0;
    }

    public static boolean isUnicodeIdentifierPart(int)
    {
        int i0;
        java.lang.CharacterData $r0;
        boolean $z0;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $z0 = virtualinvoke $r0.<java.lang.CharacterData: boolean isUnicodeIdentifierPart(int)>(i0);
        return $z0;
    }

    public static boolean isIdentifierIgnorable(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isIdentifierIgnorable(int)>(c0);
        return $z0;
    }

    public static boolean isIdentifierIgnorable(int)
    {
        int i0;
        java.lang.CharacterData $r0;
        boolean $z0;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $z0 = virtualinvoke $r0.<java.lang.CharacterData: boolean isIdentifierIgnorable(int)>(i0);
        return $z0;
    }

    public static char toLowerCase(char)
    {
        char c0, $c2;
        int $i1;

        c0 := @parameter0: char;
        $i1 = staticinvoke <java.lang.Character: int toLowerCase(int)>(c0);
        $c2 = (char) $i1;
        return $c2;
    }

    public static int toLowerCase(int)
    {
        int i0, $i1;
        java.lang.CharacterData $r0;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $i1 = virtualinvoke $r0.<java.lang.CharacterData: int toLowerCase(int)>(i0);
        return $i1;
    }

    public static char toUpperCase(char)
    {
        char c0, $c2;
        int $i1;

        c0 := @parameter0: char;
        $i1 = staticinvoke <java.lang.Character: int toUpperCase(int)>(c0);
        $c2 = (char) $i1;
        return $c2;
    }

    public static int toUpperCase(int)
    {
        int i0, $i1;
        java.lang.CharacterData $r0;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $i1 = virtualinvoke $r0.<java.lang.CharacterData: int toUpperCase(int)>(i0);
        return $i1;
    }

    public static char toTitleCase(char)
    {
        char c0, $c2;
        int $i1;

        c0 := @parameter0: char;
        $i1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(c0);
        $c2 = (char) $i1;
        return $c2;
    }

    public static int toTitleCase(int)
    {
        int i0, $i1;
        java.lang.CharacterData $r0;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $i1 = virtualinvoke $r0.<java.lang.CharacterData: int toTitleCase(int)>(i0);
        return $i1;
    }

    public static int digit(char, int)
    {
        char c0;
        int i1, $i2;

        c0 := @parameter0: char;
        i1 := @parameter1: int;
        $i2 = staticinvoke <java.lang.Character: int digit(int,int)>(c0, i1);
        return $i2;
    }

    public static int digit(int, int)
    {
        int i0, i1, $i2;
        java.lang.CharacterData $r0;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $i2 = virtualinvoke $r0.<java.lang.CharacterData: int digit(int,int)>(i0, i1);
        return $i2;
    }

    public static int getNumericValue(char)
    {
        char c0;
        int $i1;

        c0 := @parameter0: char;
        $i1 = staticinvoke <java.lang.Character: int getNumericValue(int)>(c0);
        return $i1;
    }

    public static int getNumericValue(int)
    {
        int i0, $i1;
        java.lang.CharacterData $r0;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $i1 = virtualinvoke $r0.<java.lang.CharacterData: int getNumericValue(int)>(i0);
        return $i1;
    }

    public static boolean isSpace(char)
    {
        char c0;
        long $l1, $l2;
        byte $b3;
        boolean $z0;

        c0 := @parameter0: char;
        if c0 > 32 goto label0;

        $l1 = 4294981120L >> c0;
        $l2 = $l1 & 1L;
        $b3 = $l2 cmp 0L;
        if $b3 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public static boolean isSpaceChar(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isSpaceChar(int)>(c0);
        return $z0;
    }

    public static boolean isSpaceChar(int)
    {
        int i0, $i1;
        short $s2, $s3;
        boolean $z0;

        i0 := @parameter0: int;
        $i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);
        $s2 = 28672 >> $i1;
        $s3 = $s2 & 1;
        if $s3 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public static boolean isWhitespace(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(c0);
        return $z0;
    }

    public static boolean isWhitespace(int)
    {
        int i0;
        java.lang.CharacterData $r0;
        boolean $z0;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $z0 = virtualinvoke $r0.<java.lang.CharacterData: boolean isWhitespace(int)>(i0);
        return $z0;
    }

    public static boolean isISOControl(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isISOControl(int)>(c0);
        return $z0;
    }

    public static boolean isISOControl(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;
        if i0 > 159 goto label1;

        if i0 >= 127 goto label0;

        $i1 = i0 >>> 5;
        if $i1 != 0 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int getType(char)
    {
        char c0;
        int $i1;

        c0 := @parameter0: char;
        $i1 = staticinvoke <java.lang.Character: int getType(int)>(c0);
        return $i1;
    }

    public static int getType(int)
    {
        int i0, $i1;
        java.lang.CharacterData $r0;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $i1 = virtualinvoke $r0.<java.lang.CharacterData: int getType(int)>(i0);
        return $i1;
    }

    public static char forDigit(int, int)
    {
        int i0, i1, $i2, $i4;
        char $c3, $c5;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i0 >= i1 goto label0;

        if i0 >= 0 goto label1;

     label0:
        return 0;

     label1:
        if i1 < 2 goto label2;

        if i1 <= 36 goto label3;

     label2:
        return 0;

     label3:
        if i0 >= 10 goto label4;

        $i2 = 48 + i0;
        $c3 = (char) $i2;
        return $c3;

     label4:
        $i4 = 87 + i0;
        $c5 = (char) $i4;
        return $c5;
    }

    public static byte getDirectionality(char)
    {
        char c0;
        byte $b1;

        c0 := @parameter0: char;
        $b1 = staticinvoke <java.lang.Character: byte getDirectionality(int)>(c0);
        return $b1;
    }

    public static byte getDirectionality(int)
    {
        int i0;
        java.lang.CharacterData $r0;
        byte $b1;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $b1 = virtualinvoke $r0.<java.lang.CharacterData: byte getDirectionality(int)>(i0);
        return $b1;
    }

    public static boolean isMirrored(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isMirrored(int)>(c0);
        return $z0;
    }

    public static boolean isMirrored(int)
    {
        int i0;
        java.lang.CharacterData $r0;
        boolean $z0;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $z0 = virtualinvoke $r0.<java.lang.CharacterData: boolean isMirrored(int)>(i0);
        return $z0;
    }

    public int compareTo(java.lang.Character)
    {
        java.lang.Character r0, r1;
        char $c0, $c1;
        int $i2;

        r0 := @this: java.lang.Character;
        r1 := @parameter0: java.lang.Character;
        $c0 = r0.<java.lang.Character: char value>;
        $c1 = r1.<java.lang.Character: char value>;
        $i2 = staticinvoke <java.lang.Character: int compare(char,char)>($c0, $c1);
        return $i2;
    }

    public static int compare(char, char)
    {
        char c0, c1;
        int $i2;

        c0 := @parameter0: char;
        c1 := @parameter1: char;
        $i2 = c0 - c1;
        return $i2;
    }

    static int toUpperCaseEx(int)
    {
        int i0, $i1;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;
        java.lang.CharacterData $r1;

        i0 := @parameter0: int;
        $z0 = <java.lang.Character: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <java.lang.Character: boolean isValidCodePoint(int)>(i0);
        if $z1 != 0 goto label0;

        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label0:
        $r1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $i1 = virtualinvoke $r1.<java.lang.CharacterData: int toUpperCaseEx(int)>(i0);
        return $i1;
    }

    static char[] toUpperCaseCharArray(int)
    {
        int i0;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;
        java.lang.CharacterData $r1;
        char[] $r2;

        i0 := @parameter0: int;
        $z0 = <java.lang.Character: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <java.lang.Character: boolean isBmpCodePoint(int)>(i0);
        if $z1 != 0 goto label0;

        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label0:
        $r1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(i0);
        $r2 = virtualinvoke $r1.<java.lang.CharacterData: char[] toUpperCaseCharArray(int)>(i0);
        return $r2;
    }

    public static char reverseBytes(char)
    {
        char c0, $c1, $c2, $c5;
        int $i3, $i4;

        c0 := @parameter0: char;
        $c1 = c0 & 65280;
        $c2 = $c1 >> 8;
        $i3 = c0 << 8;
        $i4 = $c2 | $i3;
        $c5 = (char) $i4;
        return $c5;
    }

    public static java.lang.String getName(int)
    {
        int i0, $i1;
        java.lang.String r0, $r4, $r5, $r8, $r10, $r12, $r13, $r15;
        java.lang.Character$UnicodeBlock r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r6, $r7, $r11;
        java.util.Locale $r9, $r14;

        i0 := @parameter0: int;
        $z0 = staticinvoke <java.lang.Character: boolean isValidCodePoint(int)>(i0);
        if $z0 != 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r2;

     label0:
        r0 = staticinvoke <java.lang.CharacterName: java.lang.String get(int)>(i0);
        if r0 == null goto label1;

        return r0;

     label1:
        $i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);
        if $i1 != 0 goto label2;

        return null;

     label2:
        r1 = staticinvoke <java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock of(int)>(i0);
        if r1 == null goto label3;

        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke r1.<java.lang.Character$UnicodeBlock: java.lang.String toString()>();
        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(char,char)>(95, 32);
        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);
        $r9 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r10 = virtualinvoke $r8.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r9);
        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r12;

     label3:
        $r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);
        $r14 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r15 = virtualinvoke $r13.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r14);
        return $r15;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Character r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.lang.Character;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.lang.Character) r1;
        $i0 = virtualinvoke r0.<java.lang.Character: int compareTo(java.lang.Character)>($r2);
        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = class "java/lang/Character";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.lang.Character: boolean $assertionsDisabled> = $z1;
        $r1 = staticinvoke <java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>("char");
        <java.lang.Character: java.lang.Class TYPE> = $r1;
        return;
    }
}
