final class java.util.regex.Pattern$Caret extends java.util.regex.Pattern$Node
{

    void <init>()
    {
        java.util.regex.Pattern$Caret r0;

        r0 := @this: java.util.regex.Pattern$Caret;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$Caret r0;
        java.util.regex.Matcher r1;
        int i0, i1, i2, $i4;
        java.lang.CharSequence r2;
        char c3, $c5, $c6;
        boolean $z0, $z1;
        java.util.regex.Pattern$Node $r3;

        r0 := @this: java.util.regex.Pattern$Caret;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        i1 = r1.<java.util.regex.Matcher: int 'from'>;
        i2 = r1.<java.util.regex.Matcher: int 'to'>;
        $z0 = r1.<java.util.regex.Matcher: boolean anchoringBounds>;
        if $z0 != 0 goto label0;

        i1 = 0;
        i2 = virtualinvoke r1.<java.util.regex.Matcher: int getTextLength()>();

     label0:
        if i0 != i2 goto label1;

        r1.<java.util.regex.Matcher: boolean hitEnd> = 1;
        return 0;

     label1:
        if i0 <= i1 goto label3;

        $i4 = i0 - 1;
        c3 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i4);
        if c3 == 10 goto label2;

        if c3 == 13 goto label2;

        $c5 = c3 | 1;
        if $c5 == 8233 goto label2;

        if c3 == 133 goto label2;

        return 0;

     label2:
        if c3 != 13 goto label3;

        $c6 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i0);
        if $c6 != 10 goto label3;

        return 0;

     label3:
        $r3 = r0.<java.util.regex.Pattern$Caret: java.util.regex.Pattern$Node next>;
        $z1 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        return $z1;
    }
}
