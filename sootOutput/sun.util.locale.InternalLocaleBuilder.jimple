public final class sun.util.locale.InternalLocaleBuilder extends java.lang.Object
{
    private static final sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar PRIVATEUSE_KEY;
    private java.lang.String language;
    private java.lang.String script;
    private java.lang.String region;
    private java.lang.String variant;
    private java.util.Map extensions;
    private java.util.Set uattributes;
    private java.util.Map ukeywords;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        sun.util.locale.InternalLocaleBuilder r0;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String language> = "";
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String script> = "";
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String region> = "";
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String variant> = "";
        return;
    }

    public sun.util.locale.InternalLocaleBuilder setLanguage(java.lang.String) throws sun.util.locale.LocaleSyntaxException
    {
        sun.util.locale.InternalLocaleBuilder r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r2, $r4, $r5;
        boolean $z0, $z1;
        sun.util.locale.LocaleSyntaxException $r3;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        r1 := @parameter0: java.lang.String;
        $z0 = staticinvoke <sun.util.locale.LocaleUtils: boolean isEmpty(java.lang.String)>(r1);
        if $z0 == 0 goto label0;

        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String language> = "";
        goto label2;

     label0:
        $z1 = staticinvoke <sun.util.locale.LanguageTag: boolean isLanguage(java.lang.String)>(r1);
        if $z1 != 0 goto label1;

        $r3 = new sun.util.locale.LocaleSyntaxException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ill-formed language: ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String,int)>($r6, 0);
        throw $r3;

     label1:
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String language> = r1;

     label2:
        return r0;
    }

    public sun.util.locale.InternalLocaleBuilder setScript(java.lang.String) throws sun.util.locale.LocaleSyntaxException
    {
        sun.util.locale.InternalLocaleBuilder r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r2, $r4, $r5;
        boolean $z0, $z1;
        sun.util.locale.LocaleSyntaxException $r3;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        r1 := @parameter0: java.lang.String;
        $z0 = staticinvoke <sun.util.locale.LocaleUtils: boolean isEmpty(java.lang.String)>(r1);
        if $z0 == 0 goto label0;

        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String script> = "";
        goto label2;

     label0:
        $z1 = staticinvoke <sun.util.locale.LanguageTag: boolean isScript(java.lang.String)>(r1);
        if $z1 != 0 goto label1;

        $r3 = new sun.util.locale.LocaleSyntaxException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ill-formed script: ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String,int)>($r6, 0);
        throw $r3;

     label1:
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String script> = r1;

     label2:
        return r0;
    }

    public sun.util.locale.InternalLocaleBuilder setRegion(java.lang.String) throws sun.util.locale.LocaleSyntaxException
    {
        sun.util.locale.InternalLocaleBuilder r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r2, $r4, $r5;
        boolean $z0, $z1;
        sun.util.locale.LocaleSyntaxException $r3;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        r1 := @parameter0: java.lang.String;
        $z0 = staticinvoke <sun.util.locale.LocaleUtils: boolean isEmpty(java.lang.String)>(r1);
        if $z0 == 0 goto label0;

        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String region> = "";
        goto label2;

     label0:
        $z1 = staticinvoke <sun.util.locale.LanguageTag: boolean isRegion(java.lang.String)>(r1);
        if $z1 != 0 goto label1;

        $r3 = new sun.util.locale.LocaleSyntaxException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ill-formed region: ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String,int)>($r6, 0);
        throw $r3;

     label1:
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String region> = r1;

     label2:
        return r0;
    }

    public sun.util.locale.InternalLocaleBuilder setVariant(java.lang.String) throws sun.util.locale.LocaleSyntaxException
    {
        sun.util.locale.InternalLocaleBuilder r0;
        java.lang.String r1, r2, $r7;
        int i0;
        boolean $z0;
        sun.util.locale.LocaleSyntaxException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        r1 := @parameter0: java.lang.String;
        $z0 = staticinvoke <sun.util.locale.LocaleUtils: boolean isEmpty(java.lang.String)>(r1);
        if $z0 == 0 goto label0;

        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String variant> = "";
        goto label2;

     label0:
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("-", "_");
        i0 = specialinvoke r0.<sun.util.locale.InternalLocaleBuilder: int checkVariants(java.lang.String,java.lang.String)>(r2, "_");
        if i0 == -1 goto label1;

        $r3 = new sun.util.locale.LocaleSyntaxException;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ill-formed variant: ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String,int)>($r7, i0);
        throw $r3;

     label1:
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String variant> = r2;

     label2:
        return r0;
    }

    public sun.util.locale.InternalLocaleBuilder addUnicodeLocaleAttribute(java.lang.String) throws sun.util.locale.LocaleSyntaxException
    {
        sun.util.locale.InternalLocaleBuilder r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r2, $r4, $r5;
        boolean $z0;
        sun.util.locale.LocaleSyntaxException $r3;
        java.util.Set $r7, $r9;
        java.util.HashSet $r8;
        sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString $r10;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        r1 := @parameter0: java.lang.String;
        $z0 = staticinvoke <sun.util.locale.UnicodeLocaleExtension: boolean isAttribute(java.lang.String)>(r1);
        if $z0 != 0 goto label0;

        $r3 = new sun.util.locale.LocaleSyntaxException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ill-formed Unicode locale attribute: ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String)>($r6);
        throw $r3;

     label0:
        $r7 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes>;
        if $r7 != null goto label1;

        $r8 = new java.util.HashSet;
        specialinvoke $r8.<java.util.HashSet: void <init>(int)>(4);
        r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes> = $r8;

     label1:
        $r9 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes>;
        $r10 = new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString;
        specialinvoke $r10.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>(r1);
        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r10);
        return r0;
    }

    public sun.util.locale.InternalLocaleBuilder removeUnicodeLocaleAttribute(java.lang.String) throws sun.util.locale.LocaleSyntaxException
    {
        sun.util.locale.InternalLocaleBuilder r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r2, $r4, $r5;
        boolean $z0;
        sun.util.locale.LocaleSyntaxException $r3;
        java.util.Set $r7, $r8;
        sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString $r9;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        r1 := @parameter0: java.lang.String;
        if r1 == null goto label0;

        $z0 = staticinvoke <sun.util.locale.UnicodeLocaleExtension: boolean isAttribute(java.lang.String)>(r1);
        if $z0 != 0 goto label1;

     label0:
        $r3 = new sun.util.locale.LocaleSyntaxException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ill-formed Unicode locale attribute: ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String)>($r6);
        throw $r3;

     label1:
        $r7 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes>;
        if $r7 == null goto label2;

        $r8 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes>;
        $r9 = new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString;
        specialinvoke $r9.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>(r1);
        interfaceinvoke $r8.<java.util.Set: boolean remove(java.lang.Object)>($r9);

     label2:
        return r0;
    }

    public sun.util.locale.InternalLocaleBuilder setUnicodeLocaleKeyword(java.lang.String, java.lang.String) throws sun.util.locale.LocaleSyntaxException
    {
        sun.util.locale.InternalLocaleBuilder r0;
        java.lang.String r1, r2, r5, r7, $r11, $r21;
        java.lang.StringBuilder $r3, $r9, $r10, $r18, $r19, $r20;
        sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString r4, $r12;
        sun.util.locale.StringTokenIterator r6, $r16;
        boolean $z0, $z1, $z2;
        sun.util.locale.LocaleSyntaxException $r8, $r17;
        java.util.Map $r13, $r14, $r23, $r25;
        int $i0, $i1;
        java.util.HashMap $r24;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        $z0 = staticinvoke <sun.util.locale.UnicodeLocaleExtension: boolean isKey(java.lang.String)>(r1);
        if $z0 != 0 goto label0;

        $r8 = new sun.util.locale.LocaleSyntaxException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ill-formed Unicode locale keyword key: ");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String)>($r11);
        throw $r8;

     label0:
        $r12 = new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString;
        specialinvoke $r12.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>(r1);
        r4 = $r12;
        if r2 != null goto label1;

        $r13 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        if $r13 == null goto label6;

        $r14 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        interfaceinvoke $r14.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4);
        goto label6;

     label1:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i0 == 0 goto label4;

        r5 = virtualinvoke r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("_", "-");
        $r16 = new sun.util.locale.StringTokenIterator;
        specialinvoke $r16.<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>(r5, "-");
        r6 = $r16;

     label2:
        $z1 = virtualinvoke r6.<sun.util.locale.StringTokenIterator: boolean isDone()>();
        if $z1 != 0 goto label4;

        r7 = virtualinvoke r6.<sun.util.locale.StringTokenIterator: java.lang.String current()>();
        $z2 = staticinvoke <sun.util.locale.UnicodeLocaleExtension: boolean isTypeSubtag(java.lang.String)>(r7);
        if $z2 != 0 goto label3;

        $r17 = new sun.util.locale.LocaleSyntaxException;
        $r18 = new java.lang.StringBuilder;
        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ill-formed Unicode locale keyword type: ");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        $i1 = virtualinvoke r6.<sun.util.locale.StringTokenIterator: int currentStart()>();
        specialinvoke $r17.<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String,int)>($r21, $i1);
        throw $r17;

     label3:
        virtualinvoke r6.<sun.util.locale.StringTokenIterator: java.lang.String next()>();
        goto label2;

     label4:
        $r23 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        if $r23 != null goto label5;

        $r24 = new java.util.HashMap;
        specialinvoke $r24.<java.util.HashMap: void <init>(int)>(4);
        r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords> = $r24;

     label5:
        $r25 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r2);

     label6:
        return r0;
    }

    public sun.util.locale.InternalLocaleBuilder setExtension(char, java.lang.String) throws sun.util.locale.LocaleSyntaxException
    {
        sun.util.locale.InternalLocaleBuilder r0;
        char c0, $c1, $c3;
        java.lang.String r1, r4, r6, $r10, $r25;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r2, $r8, $r9, $r22, $r23, $r24;
        sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar r3, $r11;
        sun.util.locale.StringTokenIterator r5, $r20;
        sun.util.locale.LocaleSyntaxException $r7, $r21;
        java.util.Set $r12, $r13;
        java.util.Map $r14, $r15, $r16, $r17, $r18, $r27, $r29;
        int $i2;
        java.util.HashMap $r28;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        c0 := @parameter0: char;
        r1 := @parameter1: java.lang.String;
        z0 = staticinvoke <sun.util.locale.LanguageTag: boolean isPrivateusePrefixChar(char)>(c0);
        if z0 != 0 goto label0;

        $z3 = staticinvoke <sun.util.locale.LanguageTag: boolean isExtensionSingletonChar(char)>(c0);
        if $z3 != 0 goto label0;

        $r7 = new sun.util.locale.LocaleSyntaxException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ill-formed extension key: ");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String)>($r10);
        throw $r7;

     label0:
        z1 = staticinvoke <sun.util.locale.LocaleUtils: boolean isEmpty(java.lang.String)>(r1);
        $r11 = new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar;
        specialinvoke $r11.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: void <init>(char)>(c0);
        r3 = $r11;
        if z1 == 0 goto label3;

        $c1 = virtualinvoke r3.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: char value()>();
        $z4 = staticinvoke <sun.util.locale.UnicodeLocaleExtension: boolean isSingletonChar(char)>($c1);
        if $z4 == 0 goto label2;

        $r12 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes>;
        if $r12 == null goto label1;

        $r13 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes>;
        interfaceinvoke $r13.<java.util.Set: void clear()>();

     label1:
        $r14 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        if $r14 == null goto label11;

        $r15 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        interfaceinvoke $r15.<java.util.Map: void clear()>();
        goto label11;

     label2:
        $r16 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions>;
        if $r16 == null goto label11;

        $r17 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions>;
        $z5 = interfaceinvoke $r17.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);
        if $z5 == 0 goto label11;

        $r18 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions>;
        interfaceinvoke $r18.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);
        goto label11;

     label3:
        r4 = virtualinvoke r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("_", "-");
        $r20 = new sun.util.locale.StringTokenIterator;
        specialinvoke $r20.<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>(r4, "-");
        r5 = $r20;

     label4:
        $z6 = virtualinvoke r5.<sun.util.locale.StringTokenIterator: boolean isDone()>();
        if $z6 != 0 goto label8;

        r6 = virtualinvoke r5.<sun.util.locale.StringTokenIterator: java.lang.String current()>();
        if z0 == 0 goto label5;

        z2 = staticinvoke <sun.util.locale.LanguageTag: boolean isPrivateuseSubtag(java.lang.String)>(r6);
        goto label6;

     label5:
        z2 = staticinvoke <sun.util.locale.LanguageTag: boolean isExtensionSubtag(java.lang.String)>(r6);

     label6:
        if z2 != 0 goto label7;

        $r21 = new sun.util.locale.LocaleSyntaxException;
        $r22 = new java.lang.StringBuilder;
        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ill-formed extension value: ");
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
        $i2 = virtualinvoke r5.<sun.util.locale.StringTokenIterator: int currentStart()>();
        specialinvoke $r21.<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String,int)>($r25, $i2);
        throw $r21;

     label7:
        virtualinvoke r5.<sun.util.locale.StringTokenIterator: java.lang.String next()>();
        goto label4;

     label8:
        $c3 = virtualinvoke r3.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: char value()>();
        $z7 = staticinvoke <sun.util.locale.UnicodeLocaleExtension: boolean isSingletonChar(char)>($c3);
        if $z7 == 0 goto label9;

        specialinvoke r0.<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>(r4);
        goto label11;

     label9:
        $r27 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions>;
        if $r27 != null goto label10;

        $r28 = new java.util.HashMap;
        specialinvoke $r28.<java.util.HashMap: void <init>(int)>(4);
        r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions> = $r28;

     label10:
        $r29 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions>;
        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

     label11:
        return r0;
    }

    public sun.util.locale.InternalLocaleBuilder setExtensions(java.lang.String) throws sun.util.locale.LocaleSyntaxException
    {
        sun.util.locale.InternalLocaleBuilder r0, $r45;
        java.lang.String r1, r4, r5, r6, r9, r13, $r22, $r24, r25, r29, $r36, $r38, $r42, $r44;
        sun.util.locale.StringTokenIterator r2, $r10;
        java.util.ArrayList r3, $r23;
        int i0, i1, i2, $i3, $i4;
        java.lang.StringBuilder r7, $r11, $r14, $r18, $r19, $r20, $r21, $r26, r27, $r30, $r34, $r35, $r37, $r40, $r41, $r43;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z7, $z8, $z9, $z10;
        sun.util.locale.LocaleSyntaxException $r17, $r33, $r39;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        r1 := @parameter0: java.lang.String;
        $z0 = staticinvoke <sun.util.locale.LocaleUtils: boolean isEmpty(java.lang.String)>(r1);
        if $z0 == 0 goto label0;

        virtualinvoke r0.<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder clearExtensions()>();
        return r0;

     label0:
        r9 = virtualinvoke r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("_", "-");
        $r10 = new sun.util.locale.StringTokenIterator;
        specialinvoke $r10.<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>(r9, "-");
        r2 = $r10;
        r3 = null;
        r4 = null;
        i0 = 0;

     label1:
        $z1 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: boolean isDone()>();
        if $z1 != 0 goto label6;

        r5 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: java.lang.String current()>();
        $z2 = staticinvoke <sun.util.locale.LanguageTag: boolean isExtensionSingleton(java.lang.String)>(r5);
        if $z2 == 0 goto label6;

        i1 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: int currentStart()>();
        r6 = r5;
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>(r6);
        r7 = $r11;
        virtualinvoke r2.<sun.util.locale.StringTokenIterator: java.lang.String next()>();

     label2:
        $z3 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: boolean isDone()>();
        if $z3 != 0 goto label3;

        r13 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: java.lang.String current()>();
        $z4 = staticinvoke <sun.util.locale.LanguageTag: boolean isExtensionSubtag(java.lang.String)>(r13);
        if $z4 == 0 goto label3;

        $r14 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");
        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);
        i0 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: int currentEnd()>();
        virtualinvoke r2.<sun.util.locale.StringTokenIterator: java.lang.String next()>();
        goto label2;

     label3:
        if i0 >= i1 goto label4;

        $r17 = new sun.util.locale.LocaleSyntaxException;
        $r18 = new java.lang.StringBuilder;
        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete extension \'");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r17.<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String,int)>($r22, i1);
        throw $r17;

     label4:
        if r3 != null goto label5;

        $r23 = new java.util.ArrayList;
        specialinvoke $r23.<java.util.ArrayList: void <init>(int)>(4);
        r3 = $r23;

     label5:
        $r24 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r24);
        goto label1;

     label6:
        $z6 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: boolean isDone()>();
        if $z6 != 0 goto label11;

        r25 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: java.lang.String current()>();
        $z7 = staticinvoke <sun.util.locale.LanguageTag: boolean isPrivateusePrefix(java.lang.String)>(r25);
        if $z7 == 0 goto label11;

        i2 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: int currentStart()>();
        $r26 = new java.lang.StringBuilder;
        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>(r25);
        r27 = $r26;
        virtualinvoke r2.<sun.util.locale.StringTokenIterator: java.lang.String next()>();

     label7:
        $z8 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: boolean isDone()>();
        if $z8 != 0 goto label9;

        r29 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: java.lang.String current()>();
        $z9 = staticinvoke <sun.util.locale.LanguageTag: boolean isPrivateuseSubtag(java.lang.String)>(r29);
        if $z9 != 0 goto label8;

        goto label9;

     label8:
        $r30 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");
        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);
        i0 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: int currentEnd()>();
        virtualinvoke r2.<sun.util.locale.StringTokenIterator: java.lang.String next()>();
        goto label7;

     label9:
        if i0 > i2 goto label10;

        $r33 = new sun.util.locale.LocaleSyntaxException;
        $r34 = new java.lang.StringBuilder;
        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();
        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete privateuse:");
        $r36 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int)>(i2);
        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);
        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r33.<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String,int)>($r38, i2);
        throw $r33;

     label10:
        r4 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        $z10 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: boolean isDone()>();
        if $z10 != 0 goto label12;

        $r39 = new sun.util.locale.LocaleSyntaxException;
        $r40 = new java.lang.StringBuilder;
        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();
        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ill-formed extension subtags:");
        $i3 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: int currentStart()>();
        $r42 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int)>($i3);
        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);
        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();
        $i4 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: int currentStart()>();
        specialinvoke $r39.<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String,int)>($r44, $i4);
        throw $r39;

     label12:
        $r45 = specialinvoke r0.<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>(r3, r4);
        return $r45;
    }

    private sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List, java.lang.String)
    {
        sun.util.locale.InternalLocaleBuilder r0;
        java.util.List r1;
        java.lang.String r2, r5, $r11, $r15, $r21;
        java.util.HashSet r3, $r8;
        java.util.Iterator r4;
        sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar r6, $r10, $r20;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i2;
        java.lang.Object $r9;
        char $c1;
        java.util.Map $r12, $r14, $r17, $r19;
        java.util.HashMap $r13, $r18;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        r1 := @parameter0: java.util.List;
        r2 := @parameter1: java.lang.String;
        virtualinvoke r0.<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder clearExtensions()>();
        $z0 = staticinvoke <sun.util.locale.LocaleUtils: boolean isEmpty(java.util.List)>(r1);
        if $z0 != 0 goto label4;

        $r8 = new java.util.HashSet;
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();
        specialinvoke $r8.<java.util.HashSet: void <init>(int)>($i0);
        r3 = $r8;
        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.lang.String) $r9;
        $r10 = new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar;
        specialinvoke $r10.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: void <init>(java.lang.String,sun.util.locale.InternalLocaleBuilder$1)>(r5, null);
        r6 = $r10;
        $z2 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r6);
        if $z2 != 0 goto label3;

        $c1 = virtualinvoke r6.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: char value()>();
        $z3 = staticinvoke <sun.util.locale.UnicodeLocaleExtension: boolean isSingletonChar(char)>($c1);
        if $z3 == 0 goto label1;

        $r11 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>(2);
        specialinvoke r0.<sun.util.locale.InternalLocaleBuilder: void setUnicodeLocaleExtension(java.lang.String)>($r11);
        goto label3;

     label1:
        $r12 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions>;
        if $r12 != null goto label2;

        $r13 = new java.util.HashMap;
        specialinvoke $r13.<java.util.HashMap: void <init>(int)>(4);
        r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions> = $r13;

     label2:
        $r14 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions>;
        $r15 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>(2);
        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r15);

     label3:
        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r6);
        goto label0;

     label4:
        if r2 == null goto label6;

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i2 <= 0 goto label6;

        $r17 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions>;
        if $r17 != null goto label5;

        $r18 = new java.util.HashMap;
        specialinvoke $r18.<java.util.HashMap: void <init>(int)>(1);
        r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions> = $r18;

     label5:
        $r19 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions>;
        $r20 = new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar;
        specialinvoke $r20.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: void <init>(java.lang.String,sun.util.locale.InternalLocaleBuilder$1)>(r2, null);
        $r21 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(2);
        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r21);

     label6:
        return r0;
    }

    public sun.util.locale.InternalLocaleBuilder setLanguageTag(sun.util.locale.LanguageTag)
    {
        sun.util.locale.InternalLocaleBuilder r0;
        sun.util.locale.LanguageTag r1;
        java.lang.String r2, $r8, $r9, $r10, $r14, $r17, $r19, $r21;
        java.lang.StringBuilder r3, $r12, $r15;
        int i0, i1;
        java.util.List $r5, $r6, r11, $r20;
        boolean $z0, $z1, $z2;
        java.lang.Object $r7, $r13, $r16;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        r1 := @parameter0: sun.util.locale.LanguageTag;
        virtualinvoke r0.<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder clear()>();
        $r5 = virtualinvoke r1.<sun.util.locale.LanguageTag: java.util.List getExtlangs()>();
        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();
        if $z0 != 0 goto label0;

        $r6 = virtualinvoke r1.<sun.util.locale.LanguageTag: java.util.List getExtlangs()>();
        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(0);
        $r8 = (java.lang.String) $r7;
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String language> = $r8;
        goto label1;

     label0:
        r2 = virtualinvoke r1.<sun.util.locale.LanguageTag: java.lang.String getLanguage()>();
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("und");
        if $z1 != 0 goto label1;

        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String language> = r2;

     label1:
        $r9 = virtualinvoke r1.<sun.util.locale.LanguageTag: java.lang.String getScript()>();
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String script> = $r9;
        $r10 = virtualinvoke r1.<sun.util.locale.LanguageTag: java.lang.String getRegion()>();
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String region> = $r10;
        r11 = virtualinvoke r1.<sun.util.locale.LanguageTag: java.util.List getVariants()>();
        $z2 = interfaceinvoke r11.<java.util.List: boolean isEmpty()>();
        if $z2 != 0 goto label4;

        $r12 = new java.lang.StringBuilder;
        $r13 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(0);
        $r14 = (java.lang.String) $r13;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>($r14);
        r3 = $r12;
        i0 = interfaceinvoke r11.<java.util.List: int size()>();
        i1 = 1;

     label2:
        if i1 >= i0 goto label3;

        $r15 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");
        $r16 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(i1);
        $r17 = (java.lang.String) $r16;
        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);
        i1 = i1 + 1;
        goto label2;

     label3:
        $r19 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String variant> = $r19;

     label4:
        $r20 = virtualinvoke r1.<sun.util.locale.LanguageTag: java.util.List getExtensions()>();
        $r21 = virtualinvoke r1.<sun.util.locale.LanguageTag: java.lang.String getPrivateuse()>();
        specialinvoke r0.<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder setExtensions(java.util.List,java.lang.String)>($r20, $r21);
        return r0;
    }

    public sun.util.locale.InternalLocaleBuilder setLocale(sun.util.locale.BaseLocale, sun.util.locale.LocaleExtensions) throws sun.util.locale.LocaleSyntaxException
    {
        sun.util.locale.InternalLocaleBuilder r0;
        sun.util.locale.BaseLocale r1;
        sun.util.locale.LocaleExtensions r2;
        java.lang.String r3, r4, r5, r6, r12, $r13, $r14, $r16, $r17, $r23, $r28, $r33, $r38, r52, $r57, $r63;
        int i0, $i1, $i2, $i3, $i4;
        java.util.Iterator r7, r11, r50;
        java.lang.Character r8;
        sun.util.locale.Extension r9;
        sun.util.locale.UnicodeLocaleExtension r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z20;
        java.lang.AssertionError $r15, $r18;
        sun.util.locale.LocaleSyntaxException $r19, $r24, $r29, $r34;
        java.lang.StringBuilder $r20, $r21, $r22, $r25, $r26, $r27, $r30, $r31, $r32, $r35, $r36, $r37;
        java.util.Set $r40, r41, $r43, $r45, $r47, $r49;
        java.lang.Object $r42, $r44, $r51;
        java.util.HashSet $r46;
        sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString $r48, $r56;
        java.util.Map $r53, $r55, $r59, $r61;
        java.util.HashMap $r54, $r60;
        sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar $r62;
        char $c5;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        r1 := @parameter0: sun.util.locale.BaseLocale;
        r2 := @parameter1: sun.util.locale.LocaleExtensions;
        r3 = virtualinvoke r1.<sun.util.locale.BaseLocale: java.lang.String getLanguage()>();
        r4 = virtualinvoke r1.<sun.util.locale.BaseLocale: java.lang.String getScript()>();
        r5 = virtualinvoke r1.<sun.util.locale.BaseLocale: java.lang.String getRegion()>();
        r6 = virtualinvoke r1.<sun.util.locale.BaseLocale: java.lang.String getVariant()>();
        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("ja");
        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("JP");
        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("JP");
        if $z2 == 0 goto label1;

        $z3 = <sun.util.locale.InternalLocaleBuilder: boolean $assertionsDisabled>;
        if $z3 != 0 goto label0;

        $r13 = "japanese";
        $r14 = virtualinvoke r2.<sun.util.locale.LocaleExtensions: java.lang.String getUnicodeLocaleType(java.lang.String)>("ca");
        $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);
        if $z4 != 0 goto label0;

        $r15 = new java.lang.AssertionError;
        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();
        throw $r15;

     label0:
        r6 = "";
        goto label4;

     label1:
        $z5 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("th");
        if $z5 == 0 goto label3;

        $z6 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("TH");
        if $z6 == 0 goto label3;

        $z7 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("TH");
        if $z7 == 0 goto label3;

        $z8 = <sun.util.locale.InternalLocaleBuilder: boolean $assertionsDisabled>;
        if $z8 != 0 goto label2;

        $r16 = "thai";
        $r17 = virtualinvoke r2.<sun.util.locale.LocaleExtensions: java.lang.String getUnicodeLocaleType(java.lang.String)>("nu");
        $z9 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r17);
        if $z9 != 0 goto label2;

        $r18 = new java.lang.AssertionError;
        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();
        throw $r18;

     label2:
        r6 = "";
        goto label4;

     label3:
        $z10 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("no");
        if $z10 == 0 goto label4;

        $z11 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("NO");
        if $z11 == 0 goto label4;

        $z12 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("NY");
        if $z12 == 0 goto label4;

        r3 = "nn";
        r6 = "";

     label4:
        $i1 = virtualinvoke r3.<java.lang.String: int length()>();
        if $i1 <= 0 goto label5;

        $z13 = staticinvoke <sun.util.locale.LanguageTag: boolean isLanguage(java.lang.String)>(r3);
        if $z13 != 0 goto label5;

        $r19 = new sun.util.locale.LocaleSyntaxException;
        $r20 = new java.lang.StringBuilder;
        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ill-formed language: ");
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r19.<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String)>($r23);
        throw $r19;

     label5:
        $i2 = virtualinvoke r4.<java.lang.String: int length()>();
        if $i2 <= 0 goto label6;

        $z14 = staticinvoke <sun.util.locale.LanguageTag: boolean isScript(java.lang.String)>(r4);
        if $z14 != 0 goto label6;

        $r24 = new sun.util.locale.LocaleSyntaxException;
        $r25 = new java.lang.StringBuilder;
        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ill-formed script: ");
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r24.<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String)>($r28);
        throw $r24;

     label6:
        $i3 = virtualinvoke r5.<java.lang.String: int length()>();
        if $i3 <= 0 goto label7;

        $z15 = staticinvoke <sun.util.locale.LanguageTag: boolean isRegion(java.lang.String)>(r5);
        if $z15 != 0 goto label7;

        $r29 = new sun.util.locale.LocaleSyntaxException;
        $r30 = new java.lang.StringBuilder;
        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ill-formed region: ");
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r29.<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String)>($r33);
        throw $r29;

     label7:
        $i4 = virtualinvoke r6.<java.lang.String: int length()>();
        if $i4 <= 0 goto label8;

        i0 = specialinvoke r0.<sun.util.locale.InternalLocaleBuilder: int checkVariants(java.lang.String,java.lang.String)>(r6, "_");
        if i0 == -1 goto label8;

        $r34 = new sun.util.locale.LocaleSyntaxException;
        $r35 = new java.lang.StringBuilder;
        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();
        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ill-formed variant: ");
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);
        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r34.<sun.util.locale.LocaleSyntaxException: void <init>(java.lang.String,int)>($r38, i0);
        throw $r34;

     label8:
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String language> = r3;
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String script> = r4;
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String region> = r5;
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String variant> = r6;
        virtualinvoke r0.<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder clearExtensions()>();
        if r2 != null goto label9;

        $r40 = null;
        goto label10;

     label9:
        $r40 = virtualinvoke r2.<sun.util.locale.LocaleExtensions: java.util.Set getKeys()>();

     label10:
        r41 = $r40;
        if r41 == null goto label21;

        r7 = interfaceinvoke r41.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z16 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();
        if $z16 == 0 goto label21;

        $r42 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();
        r8 = (java.lang.Character) $r42;
        r9 = virtualinvoke r2.<sun.util.locale.LocaleExtensions: sun.util.locale.Extension getExtension(java.lang.Character)>(r8);
        $z17 = r9 instanceof sun.util.locale.UnicodeLocaleExtension;
        if $z17 == 0 goto label18;

        r10 = (sun.util.locale.UnicodeLocaleExtension) r9;
        $r43 = virtualinvoke r10.<sun.util.locale.UnicodeLocaleExtension: java.util.Set getUnicodeLocaleAttributes()>();
        r11 = interfaceinvoke $r43.<java.util.Set: java.util.Iterator iterator()>();

     label12:
        $z18 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();
        if $z18 == 0 goto label14;

        $r44 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();
        r12 = (java.lang.String) $r44;
        $r45 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes>;
        if $r45 != null goto label13;

        $r46 = new java.util.HashSet;
        specialinvoke $r46.<java.util.HashSet: void <init>(int)>(4);
        r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes> = $r46;

     label13:
        $r47 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes>;
        $r48 = new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString;
        specialinvoke $r48.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>(r12);
        interfaceinvoke $r47.<java.util.Set: boolean add(java.lang.Object)>($r48);
        goto label12;

     label14:
        $r49 = virtualinvoke r10.<sun.util.locale.UnicodeLocaleExtension: java.util.Set getUnicodeLocaleKeys()>();
        r50 = interfaceinvoke $r49.<java.util.Set: java.util.Iterator iterator()>();

     label15:
        $z20 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>();
        if $z20 == 0 goto label17;

        $r51 = interfaceinvoke r50.<java.util.Iterator: java.lang.Object next()>();
        r52 = (java.lang.String) $r51;
        $r53 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        if $r53 != null goto label16;

        $r54 = new java.util.HashMap;
        specialinvoke $r54.<java.util.HashMap: void <init>(int)>(4);
        r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords> = $r54;

     label16:
        $r55 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        $r56 = new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString;
        specialinvoke $r56.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>(r52);
        $r57 = virtualinvoke r10.<sun.util.locale.UnicodeLocaleExtension: java.lang.String getUnicodeLocaleType(java.lang.String)>(r52);
        interfaceinvoke $r55.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r56, $r57);
        goto label15;

     label17:
        goto label20;

     label18:
        $r59 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions>;
        if $r59 != null goto label19;

        $r60 = new java.util.HashMap;
        specialinvoke $r60.<java.util.HashMap: void <init>(int)>(4);
        r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions> = $r60;

     label19:
        $r61 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions>;
        $r62 = new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar;
        $c5 = virtualinvoke r8.<java.lang.Character: char charValue()>();
        specialinvoke $r62.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: void <init>(char)>($c5);
        $r63 = virtualinvoke r9.<sun.util.locale.Extension: java.lang.String getValue()>();
        interfaceinvoke $r61.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r62, $r63);

     label20:
        goto label11;

     label21:
        return r0;
    }

    public sun.util.locale.InternalLocaleBuilder clear()
    {
        sun.util.locale.InternalLocaleBuilder r0;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String language> = "";
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String script> = "";
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String region> = "";
        r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String variant> = "";
        virtualinvoke r0.<sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder clearExtensions()>();
        return r0;
    }

    public sun.util.locale.InternalLocaleBuilder clearExtensions()
    {
        sun.util.locale.InternalLocaleBuilder r0;
        java.util.Map $r1, $r2, $r5, $r6;
        java.util.Set $r3, $r4;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        $r1 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions>;
        if $r1 == null goto label0;

        $r2 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions>;
        interfaceinvoke $r2.<java.util.Map: void clear()>();

     label0:
        $r3 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes>;
        if $r3 == null goto label1;

        $r4 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes>;
        interfaceinvoke $r4.<java.util.Set: void clear()>();

     label1:
        $r5 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        if $r5 == null goto label2;

        $r6 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        interfaceinvoke $r6.<java.util.Map: void clear()>();

     label2:
        return r0;
    }

    public sun.util.locale.BaseLocale getBaseLocale()
    {
        sun.util.locale.InternalLocaleBuilder r0;
        java.lang.String r1, r2, r3, r4, r6, $r13, $r17, $r18;
        sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar $r5;
        sun.util.locale.StringTokenIterator r7, $r12;
        boolean z0, $z1, $z2;
        int i0, $i1;
        java.lang.StringBuilder r8, $r15;
        java.util.Map $r9, $r10;
        java.lang.Object $r11;
        sun.util.locale.BaseLocale $r20;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        r1 = r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String language>;
        r2 = r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String script>;
        r3 = r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String region>;
        r4 = r0.<sun.util.locale.InternalLocaleBuilder: java.lang.String variant>;
        $r9 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions>;
        if $r9 == null goto label5;

        $r10 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions>;
        $r5 = <sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar PRIVATEUSE_KEY>;
        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);
        r6 = (java.lang.String) $r11;
        if r6 == null goto label5;

        $r12 = new sun.util.locale.StringTokenIterator;
        specialinvoke $r12.<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>(r6, "-");
        r7 = $r12;
        z0 = 0;
        i0 = -1;

     label0:
        $z1 = virtualinvoke r7.<sun.util.locale.StringTokenIterator: boolean isDone()>();
        if $z1 != 0 goto label3;

        if z0 == 0 goto label1;

        i0 = virtualinvoke r7.<sun.util.locale.StringTokenIterator: int currentStart()>();
        goto label3;

     label1:
        $r13 = virtualinvoke r7.<sun.util.locale.StringTokenIterator: java.lang.String current()>();
        $z2 = staticinvoke <sun.util.locale.LocaleUtils: boolean caseIgnoreMatch(java.lang.String,java.lang.String)>($r13, "lvariant");
        if $z2 == 0 goto label2;

        z0 = 1;

     label2:
        virtualinvoke r7.<sun.util.locale.StringTokenIterator: java.lang.String next()>();
        goto label0;

     label3:
        if i0 == -1 goto label5;

        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4);
        r8 = $r15;
        $i1 = virtualinvoke r8.<java.lang.StringBuilder: int length()>();
        if $i1 == 0 goto label4;

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

     label4:
        $r17 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int)>(i0);
        $r18 = virtualinvoke $r17.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("-", "_");
        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
        r4 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        $r20 = staticinvoke <sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);
        return $r20;
    }

    public sun.util.locale.LocaleExtensions getLocaleExtensions()
    {
        sun.util.locale.InternalLocaleBuilder r0;
        sun.util.locale.LocaleExtensions r1, $r5, $r9;
        java.util.Map $r2, $r4, $r6, $r8;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set $r3, $r7;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        $r2 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions>;
        $z0 = staticinvoke <sun.util.locale.LocaleUtils: boolean isEmpty(java.util.Map)>($r2);
        if $z0 == 0 goto label0;

        $r3 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes>;
        $z1 = staticinvoke <sun.util.locale.LocaleUtils: boolean isEmpty(java.util.Set)>($r3);
        if $z1 == 0 goto label0;

        $r4 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        $z2 = staticinvoke <sun.util.locale.LocaleUtils: boolean isEmpty(java.util.Map)>($r4);
        if $z2 == 0 goto label0;

        return null;

     label0:
        $r5 = new sun.util.locale.LocaleExtensions;
        $r6 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map extensions>;
        $r7 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes>;
        $r8 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        specialinvoke $r5.<sun.util.locale.LocaleExtensions: void <init>(java.util.Map,java.util.Set,java.util.Map)>($r6, $r7, $r8);
        r1 = $r5;
        $z3 = virtualinvoke r1.<sun.util.locale.LocaleExtensions: boolean isEmpty()>();
        if $z3 == 0 goto label1;

        $r9 = null;
        goto label2;

     label1:
        $r9 = r1;

     label2:
        return $r9;
    }

    static java.lang.String removePrivateuseVariant(java.lang.String)
    {
        java.lang.String r0, $r3, $r6;
        sun.util.locale.StringTokenIterator $r1, r2;
        int i0, $i1;
        boolean z0, $z1, $z2, $z3;
        java.lang.AssertionError $r5;

        r0 := @parameter0: java.lang.String;
        $r1 = new sun.util.locale.StringTokenIterator;
        specialinvoke $r1.<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>(r0, "-");
        r2 = $r1;
        i0 = -1;
        z0 = 0;

     label0:
        $z1 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: boolean isDone()>();
        if $z1 != 0 goto label3;

        if i0 == -1 goto label1;

        z0 = 1;
        goto label3;

     label1:
        $r3 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: java.lang.String current()>();
        $z2 = staticinvoke <sun.util.locale.LocaleUtils: boolean caseIgnoreMatch(java.lang.String,java.lang.String)>($r3, "lvariant");
        if $z2 == 0 goto label2;

        i0 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: int currentStart()>();

     label2:
        virtualinvoke r2.<sun.util.locale.StringTokenIterator: java.lang.String next()>();
        goto label0;

     label3:
        if z0 != 0 goto label4;

        return r0;

     label4:
        $z3 = <sun.util.locale.InternalLocaleBuilder: boolean $assertionsDisabled>;
        if $z3 != 0 goto label5;

        if i0 == 0 goto label5;

        if i0 > 1 goto label5;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label5:
        if i0 != 0 goto label6;

        $r6 = null;
        goto label7;

     label6:
        $i1 = i0 - 1;
        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label7:
        return $r6;
    }

    private int checkVariants(java.lang.String, java.lang.String)
    {
        sun.util.locale.InternalLocaleBuilder r0;
        java.lang.String r1, r2, r5;
        sun.util.locale.StringTokenIterator $r3, r4;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        $r3 = new sun.util.locale.StringTokenIterator;
        specialinvoke $r3.<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>(r1, r2);
        r4 = $r3;

     label0:
        $z0 = virtualinvoke r4.<sun.util.locale.StringTokenIterator: boolean isDone()>();
        if $z0 != 0 goto label2;

        r5 = virtualinvoke r4.<sun.util.locale.StringTokenIterator: java.lang.String current()>();
        $z1 = staticinvoke <sun.util.locale.LanguageTag: boolean isVariant(java.lang.String)>(r5);
        if $z1 != 0 goto label1;

        $i0 = virtualinvoke r4.<sun.util.locale.StringTokenIterator: int currentStart()>();
        return $i0;

     label1:
        virtualinvoke r4.<sun.util.locale.StringTokenIterator: java.lang.String next()>();
        goto label0;

     label2:
        return -1;
    }

    private void setUnicodeLocaleExtension(java.lang.String)
    {
        sun.util.locale.InternalLocaleBuilder r0;
        java.lang.String r1, r4, $r11, $r16, $r18, $r20, $r26, $r29, $r31, $r35, r36;
        sun.util.locale.StringTokenIterator r2, $r10;
        sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString r3, r5, $r15, $r25, $r28, $r30;
        int i0, i1;
        java.util.Set $r6, $r7, $r12, $r14;
        java.util.Map $r8, $r9, $r21, $r23, $r27, $r32, $r33, $r37, $r39;
        boolean $z0, $z1, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.util.HashSet $r13;
        java.lang.AssertionError $r19, $r34;
        java.util.HashMap $r22, $r38;
        byte $b2;

        r0 := @this: sun.util.locale.InternalLocaleBuilder;
        r1 := @parameter0: java.lang.String;
        $r6 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes>;
        if $r6 == null goto label0;

        $r7 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes>;
        interfaceinvoke $r7.<java.util.Set: void clear()>();

     label0:
        $r8 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        if $r8 == null goto label1;

        $r9 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        interfaceinvoke $r9.<java.util.Map: void clear()>();

     label1:
        $r10 = new sun.util.locale.StringTokenIterator;
        specialinvoke $r10.<sun.util.locale.StringTokenIterator: void <init>(java.lang.String,java.lang.String)>(r1, "-");
        r2 = $r10;

     label2:
        $z0 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: boolean isDone()>();
        if $z0 != 0 goto label5;

        $r11 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: java.lang.String current()>();
        $z1 = staticinvoke <sun.util.locale.UnicodeLocaleExtension: boolean isAttribute(java.lang.String)>($r11);
        if $z1 != 0 goto label3;

        goto label5;

     label3:
        $r12 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes>;
        if $r12 != null goto label4;

        $r13 = new java.util.HashSet;
        specialinvoke $r13.<java.util.HashSet: void <init>(int)>(4);
        r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes> = $r13;

     label4:
        $r14 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Set uattributes>;
        $r15 = new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString;
        $r16 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: java.lang.String current()>();
        specialinvoke $r15.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>($r16);
        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>($r15);
        virtualinvoke r2.<sun.util.locale.StringTokenIterator: java.lang.String next()>();
        goto label2;

     label5:
        r3 = null;
        i0 = -1;
        i1 = -1;

     label6:
        $z3 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: boolean isDone()>();
        if $z3 != 0 goto label22;

        if r3 == null goto label15;

        $r18 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: java.lang.String current()>();
        $z4 = staticinvoke <sun.util.locale.UnicodeLocaleExtension: boolean isKey(java.lang.String)>($r18);
        if $z4 == 0 goto label13;

        $z5 = <sun.util.locale.InternalLocaleBuilder: boolean $assertionsDisabled>;
        if $z5 != 0 goto label7;

        if i0 == -1 goto label7;

        if i1 != -1 goto label7;

        $r19 = new java.lang.AssertionError;
        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();
        throw $r19;

     label7:
        if i0 != -1 goto label8;

        $r20 = "";
        goto label9;

     label8:
        $r20 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

     label9:
        r4 = $r20;
        $r21 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        if $r21 != null goto label10;

        $r22 = new java.util.HashMap;
        specialinvoke $r22.<java.util.HashMap: void <init>(int)>(4);
        r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords> = $r22;

     label10:
        $r23 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);
        $r25 = new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString;
        $r26 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: java.lang.String current()>();
        specialinvoke $r25.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>($r26);
        r5 = $r25;
        $r27 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        $z6 = interfaceinvoke $r27.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);
        if $z6 == 0 goto label11;

        $r28 = null;
        goto label12;

     label11:
        $r28 = r5;

     label12:
        r3 = $r28;
        $b2 = -1;
        i1 = $b2;
        i0 = $b2;
        goto label16;

     label13:
        if i0 != -1 goto label14;

        i0 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: int currentStart()>();

     label14:
        i1 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: int currentEnd()>();
        goto label16;

     label15:
        $r29 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: java.lang.String current()>();
        $z7 = staticinvoke <sun.util.locale.UnicodeLocaleExtension: boolean isKey(java.lang.String)>($r29);
        if $z7 == 0 goto label16;

        $r30 = new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString;
        $r31 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: java.lang.String current()>();
        specialinvoke $r30.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: void <init>(java.lang.String)>($r31);
        r3 = $r30;
        $r32 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        if $r32 == null goto label16;

        $r33 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        $z8 = interfaceinvoke $r33.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);
        if $z8 == 0 goto label16;

        r3 = null;

     label16:
        $z9 = virtualinvoke r2.<sun.util.locale.StringTokenIterator: boolean hasNext()>();
        if $z9 != 0 goto label21;

        if r3 == null goto label22;

        $z10 = <sun.util.locale.InternalLocaleBuilder: boolean $assertionsDisabled>;
        if $z10 != 0 goto label17;

        if i0 == -1 goto label17;

        if i1 != -1 goto label17;

        $r34 = new java.lang.AssertionError;
        specialinvoke $r34.<java.lang.AssertionError: void <init>()>();
        throw $r34;

     label17:
        if i0 != -1 goto label18;

        $r35 = "";
        goto label19;

     label18:
        $r35 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

     label19:
        r36 = $r35;
        $r37 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        if $r37 != null goto label20;

        $r38 = new java.util.HashMap;
        specialinvoke $r38.<java.util.HashMap: void <init>(int)>(4);
        r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords> = $r38;

     label20:
        $r39 = r0.<sun.util.locale.InternalLocaleBuilder: java.util.Map ukeywords>;
        interfaceinvoke $r39.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r36);
        goto label22;

     label21:
        virtualinvoke r2.<sun.util.locale.StringTokenIterator: java.lang.String next()>();
        goto label6;

     label22:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar $r1;

        $r0 = class "sun/util/locale/InternalLocaleBuilder";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.util.locale.InternalLocaleBuilder: boolean $assertionsDisabled> = $z1;
        $r1 = new sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar;
        specialinvoke $r1.<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: void <init>(java.lang.String,sun.util.locale.InternalLocaleBuilder$1)>("x", null);
        <sun.util.locale.InternalLocaleBuilder: sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar PRIVATEUSE_KEY> = $r1;
        return;
    }
}
