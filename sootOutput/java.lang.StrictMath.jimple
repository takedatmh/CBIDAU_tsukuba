public final class java.lang.StrictMath extends java.lang.Object
{
    public static final double E;
    public static final double PI;
    private static java.util.Random randomNumberGenerator;
    private static long negativeZeroFloatBits;
    private static long negativeZeroDoubleBits;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        java.lang.StrictMath r0;

        r0 := @this: java.lang.StrictMath;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static native double sin(double);

    public static native double cos(double);

    public static native double tan(double);

    public static native double asin(double);

    public static native double acos(double);

    public static native double atan(double);

    public static strictfp double toRadians(double)
    {
        double d0, $d1, $d2;

        d0 := @parameter0: double;
        $d1 = d0 / 180.0;
        $d2 = $d1 * 3.141592653589793;
        return $d2;
    }

    public static strictfp double toDegrees(double)
    {
        double d0, $d1, $d2;

        d0 := @parameter0: double;
        $d1 = d0 * 180.0;
        $d2 = $d1 / 3.141592653589793;
        return $d2;
    }

    public static native double exp(double);

    public static native double log(double);

    public static native double log10(double);

    public static native double sqrt(double);

    public static native double cbrt(double);

    public static native double IEEEremainder(double, double);

    public static double ceil(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;
        $d1 = staticinvoke <java.lang.StrictMath: double floorOrCeil(double,double,double,double)>(d0, -0.0, 1.0, 1.0);
        return $d1;
    }

    public static double floor(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;
        $d1 = staticinvoke <java.lang.StrictMath: double floorOrCeil(double,double,double,double)>(d0, -1.0, 0.0, -1.0);
        return $d1;
    }

    private static double floorOrCeil(double, double, double, double)
    {
        double d0, d1, d2, d3, d4, $d5, $d6;
        int i0;
        long l1, l2, $l5, $l7, $l8;
        byte $b3, $b4, $b6, $b9;
        boolean $z0;
        java.lang.AssertionError $r0;

        d0 := @parameter0: double;
        d1 := @parameter1: double;
        d2 := @parameter2: double;
        d3 := @parameter3: double;
        i0 = staticinvoke <java.lang.Math: int getExponent(double)>(d0);
        if i0 >= 0 goto label3;

        $b3 = d0 cmpl 0.0;
        if $b3 != 0 goto label0;

        $d5 = d0;
        goto label2;

     label0:
        $b4 = d0 cmpg 0.0;
        if $b4 >= 0 goto label1;

        $d5 = d1;
        goto label2;

     label1:
        $d5 = d2;

     label2:
        return $d5;

     label3:
        if i0 < 52 goto label4;

        return d0;

     label4:
        $z0 = <java.lang.StrictMath: boolean $assertionsDisabled>;
        if $z0 != 0 goto label6;

        if i0 < 0 goto label5;

        if i0 <= 51 goto label6;

     label5:
        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label6:
        l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);
        l2 = 4503599627370495L >> i0;
        $l5 = l2 & l1;
        $b6 = $l5 cmp 0L;
        if $b6 != 0 goto label7;

        return d0;

     label7:
        $l7 = l2 ^ -1L;
        $l8 = l1 & $l7;
        d4 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l8);
        $d6 = d3 * d0;
        $b9 = $d6 cmpl 0.0;
        if $b9 <= 0 goto label8;

        d4 = d4 + d3;

     label8:
        return d4;
    }

    public static double rint(double)
    {
        double d0, d1, d2, d3, $d4, $d5;
        byte $b0;

        d0 := @parameter0: double;
        d1 = 4.503599627370496E15;
        d2 = staticinvoke <sun.misc.FpUtils: double rawCopySign(double,double)>(1.0, d0);
        d3 = staticinvoke <java.lang.Math: double abs(double)>(d0);
        $b0 = d3 cmpg d1;
        if $b0 >= 0 goto label0;

        $d4 = d1 + d3;
        d3 = $d4 - d1;

     label0:
        $d5 = d2 * d3;
        return $d5;
    }

    public static native double atan2(double, double);

    public static native double pow(double, double);

    public static int round(float)
    {
        float f0;
        int $i0;

        f0 := @parameter0: float;
        $i0 = staticinvoke <java.lang.Math: int round(float)>(f0);
        return $i0;
    }

    public static long round(double)
    {
        double d0;
        long $l0;

        d0 := @parameter0: double;
        $l0 = staticinvoke <java.lang.Math: long round(double)>(d0);
        return $l0;
    }

    private static synchronized java.util.Random initRNG()
    {
        java.util.Random r0, $r1;

        r0 = <java.lang.StrictMath: java.util.Random randomNumberGenerator>;
        if r0 != null goto label0;

        $r1 = new java.util.Random;
        specialinvoke $r1.<java.util.Random: void <init>()>();
        <java.lang.StrictMath: java.util.Random randomNumberGenerator> = $r1;
        goto label1;

     label0:
        $r1 = r0;

     label1:
        return $r1;
    }

    public static double random()
    {
        java.util.Random r0;
        double $d0;

        r0 = <java.lang.StrictMath: java.util.Random randomNumberGenerator>;
        if r0 != null goto label0;

        r0 = staticinvoke <java.lang.StrictMath: java.util.Random initRNG()>();

     label0:
        $d0 = virtualinvoke r0.<java.util.Random: double nextDouble()>();
        return $d0;
    }

    public static int abs(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;
        if i0 >= 0 goto label0;

        $i1 = neg i0;
        goto label1;

     label0:
        $i1 = i0;

     label1:
        return $i1;
    }

    public static long abs(long)
    {
        long l0, $l2;
        byte $b1;

        l0 := @parameter0: long;
        $b1 = l0 cmp 0L;
        if $b1 >= 0 goto label0;

        $l2 = neg l0;
        goto label1;

     label0:
        $l2 = l0;

     label1:
        return $l2;
    }

    public static float abs(float)
    {
        float f0, $f1;
        byte $b0;

        f0 := @parameter0: float;
        $b0 = f0 cmpg 0.0F;
        if $b0 > 0 goto label0;

        $f1 = 0.0F - f0;
        goto label1;

     label0:
        $f1 = f0;

     label1:
        return $f1;
    }

    public static double abs(double)
    {
        double d0, $d1;
        byte $b0;

        d0 := @parameter0: double;
        $b0 = d0 cmpg 0.0;
        if $b0 > 0 goto label0;

        $d1 = 0.0 - d0;
        goto label1;

     label0:
        $d1 = d0;

     label1:
        return $d1;
    }

    public static int max(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i0 < i1 goto label0;

        $i2 = i0;
        goto label1;

     label0:
        $i2 = i1;

     label1:
        return $i2;
    }

    public static long max(long, long)
    {
        long l0, l1, $l3;
        byte $b2;

        l0 := @parameter0: long;
        l1 := @parameter1: long;
        $b2 = l0 cmp l1;
        if $b2 < 0 goto label0;

        $l3 = l0;
        goto label1;

     label0:
        $l3 = l1;

     label1:
        return $l3;
    }

    public static float max(float, float)
    {
        float f0, f1, $f2;
        long $l0, $l5;
        byte $b1, $b2, $b3, $b6, $b7;
        int $i4;

        f0 := @parameter0: float;
        f1 := @parameter1: float;
        $b1 = f0 cmpl f0;
        if $b1 == 0 goto label0;

        return f0;

     label0:
        $b2 = f0 cmpl 0.0F;
        if $b2 != 0 goto label1;

        $b3 = f1 cmpl 0.0F;
        if $b3 != 0 goto label1;

        $i4 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);
        $l5 = (long) $i4;
        $l0 = <java.lang.StrictMath: long negativeZeroFloatBits>;
        $b6 = $l5 cmp $l0;
        if $b6 != 0 goto label1;

        return f1;

     label1:
        $b7 = f0 cmpl f1;
        if $b7 < 0 goto label2;

        $f2 = f0;
        goto label3;

     label2:
        $f2 = f1;

     label3:
        return $f2;
    }

    public static double max(double, double)
    {
        double d0, d1, $d2;
        byte $b0, $b1, $b2, $b5, $b6;
        long $l3, $l4;

        d0 := @parameter0: double;
        d1 := @parameter1: double;
        $b0 = d0 cmpl d0;
        if $b0 == 0 goto label0;

        return d0;

     label0:
        $b1 = d0 cmpl 0.0;
        if $b1 != 0 goto label1;

        $b2 = d1 cmpl 0.0;
        if $b2 != 0 goto label1;

        $l3 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);
        $l4 = <java.lang.StrictMath: long negativeZeroDoubleBits>;
        $b5 = $l3 cmp $l4;
        if $b5 != 0 goto label1;

        return d1;

     label1:
        $b6 = d0 cmpl d1;
        if $b6 < 0 goto label2;

        $d2 = d0;
        goto label3;

     label2:
        $d2 = d1;

     label3:
        return $d2;
    }

    public static int min(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i0 > i1 goto label0;

        $i2 = i0;
        goto label1;

     label0:
        $i2 = i1;

     label1:
        return $i2;
    }

    public static long min(long, long)
    {
        long l0, l1, $l3;
        byte $b2;

        l0 := @parameter0: long;
        l1 := @parameter1: long;
        $b2 = l0 cmp l1;
        if $b2 > 0 goto label0;

        $l3 = l0;
        goto label1;

     label0:
        $l3 = l1;

     label1:
        return $l3;
    }

    public static float min(float, float)
    {
        float f0, f1, $f2;
        long $l0, $l5;
        byte $b1, $b2, $b3, $b6, $b7;
        int $i4;

        f0 := @parameter0: float;
        f1 := @parameter1: float;
        $b1 = f0 cmpl f0;
        if $b1 == 0 goto label0;

        return f0;

     label0:
        $b2 = f0 cmpl 0.0F;
        if $b2 != 0 goto label1;

        $b3 = f1 cmpl 0.0F;
        if $b3 != 0 goto label1;

        $i4 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f1);
        $l5 = (long) $i4;
        $l0 = <java.lang.StrictMath: long negativeZeroFloatBits>;
        $b6 = $l5 cmp $l0;
        if $b6 != 0 goto label1;

        return f1;

     label1:
        $b7 = f0 cmpg f1;
        if $b7 > 0 goto label2;

        $f2 = f0;
        goto label3;

     label2:
        $f2 = f1;

     label3:
        return $f2;
    }

    public static double min(double, double)
    {
        double d0, d1, $d2;
        byte $b0, $b1, $b2, $b5, $b6;
        long $l3, $l4;

        d0 := @parameter0: double;
        d1 := @parameter1: double;
        $b0 = d0 cmpl d0;
        if $b0 == 0 goto label0;

        return d0;

     label0:
        $b1 = d0 cmpl 0.0;
        if $b1 != 0 goto label1;

        $b2 = d1 cmpl 0.0;
        if $b2 != 0 goto label1;

        $l3 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);
        $l4 = <java.lang.StrictMath: long negativeZeroDoubleBits>;
        $b5 = $l3 cmp $l4;
        if $b5 != 0 goto label1;

        return d1;

     label1:
        $b6 = d0 cmpg d1;
        if $b6 > 0 goto label2;

        $d2 = d0;
        goto label3;

     label2:
        $d2 = d1;

     label3:
        return $d2;
    }

    public static double ulp(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;
        $d1 = staticinvoke <sun.misc.FpUtils: double ulp(double)>(d0);
        return $d1;
    }

    public static float ulp(float)
    {
        float f0, $f1;

        f0 := @parameter0: float;
        $f1 = staticinvoke <sun.misc.FpUtils: float ulp(float)>(f0);
        return $f1;
    }

    public static double signum(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;
        $d1 = staticinvoke <sun.misc.FpUtils: double signum(double)>(d0);
        return $d1;
    }

    public static float signum(float)
    {
        float f0, $f1;

        f0 := @parameter0: float;
        $f1 = staticinvoke <sun.misc.FpUtils: float signum(float)>(f0);
        return $f1;
    }

    public static native double sinh(double);

    public static native double cosh(double);

    public static native double tanh(double);

    public static native double hypot(double, double);

    public static native double expm1(double);

    public static native double log1p(double);

    public static double copySign(double, double)
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;
        d1 := @parameter1: double;
        $d2 = staticinvoke <sun.misc.FpUtils: double copySign(double,double)>(d0, d1);
        return $d2;
    }

    public static float copySign(float, float)
    {
        float f0, f1, $f2;

        f0 := @parameter0: float;
        f1 := @parameter1: float;
        $f2 = staticinvoke <sun.misc.FpUtils: float copySign(float,float)>(f0, f1);
        return $f2;
    }

    public static int getExponent(float)
    {
        float f0;
        int $i0;

        f0 := @parameter0: float;
        $i0 = staticinvoke <sun.misc.FpUtils: int getExponent(float)>(f0);
        return $i0;
    }

    public static int getExponent(double)
    {
        double d0;
        int $i0;

        d0 := @parameter0: double;
        $i0 = staticinvoke <sun.misc.FpUtils: int getExponent(double)>(d0);
        return $i0;
    }

    public static double nextAfter(double, double)
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;
        d1 := @parameter1: double;
        $d2 = staticinvoke <sun.misc.FpUtils: double nextAfter(double,double)>(d0, d1);
        return $d2;
    }

    public static float nextAfter(float, double)
    {
        float f0, $f1;
        double d0;

        f0 := @parameter0: float;
        d0 := @parameter1: double;
        $f1 = staticinvoke <sun.misc.FpUtils: float nextAfter(float,double)>(f0, d0);
        return $f1;
    }

    public static double nextUp(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;
        $d1 = staticinvoke <sun.misc.FpUtils: double nextUp(double)>(d0);
        return $d1;
    }

    public static float nextUp(float)
    {
        float f0, $f1;

        f0 := @parameter0: float;
        $f1 = staticinvoke <sun.misc.FpUtils: float nextUp(float)>(f0);
        return $f1;
    }

    public static double scalb(double, int)
    {
        double d0, $d1;
        int i0;

        d0 := @parameter0: double;
        i0 := @parameter1: int;
        $d1 = staticinvoke <sun.misc.FpUtils: double scalb(double,int)>(d0, i0);
        return $d1;
    }

    public static float scalb(float, int)
    {
        float f0, $f1;
        int i0;

        f0 := @parameter0: float;
        i0 := @parameter1: int;
        $f1 = staticinvoke <sun.misc.FpUtils: float scalb(float,int)>(f0, i0);
        return $f1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        int $i0;
        long $l1, $l2;

        $r0 = class "java/lang/StrictMath";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.lang.StrictMath: boolean $assertionsDisabled> = $z1;
        $i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(-0.0F);
        $l1 = (long) $i0;
        <java.lang.StrictMath: long negativeZeroFloatBits> = $l1;
        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(-0.0);
        <java.lang.StrictMath: long negativeZeroDoubleBits> = $l2;
        return;
    }
}
