class java.lang.reflect.ReflectAccess extends java.lang.Object implements sun.reflect.LangReflectAccess
{

    void <init>()
    {
        java.lang.reflect.ReflectAccess r0;

        r0 := @this: java.lang.reflect.ReflectAccess;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public java.lang.reflect.Field newField(java.lang.Class, java.lang.String, java.lang.Class, int, int, java.lang.String, byte[])
    {
        java.lang.reflect.ReflectAccess r0;
        java.lang.Class r1, r3;
        java.lang.String r2, r4;
        int i0, i1;
        byte[] r5;
        java.lang.reflect.Field $r6;

        r0 := @this: java.lang.reflect.ReflectAccess;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Class;
        i0 := @parameter3: int;
        i1 := @parameter4: int;
        r4 := @parameter5: java.lang.String;
        r5 := @parameter6: byte[];
        $r6 = new java.lang.reflect.Field;
        specialinvoke $r6.<java.lang.reflect.Field: void <init>(java.lang.Class,java.lang.String,java.lang.Class,int,int,java.lang.String,byte[])>(r1, r2, r3, i0, i1, r4, r5);
        return $r6;
    }

    public java.lang.reflect.Method newMethod(java.lang.Class, java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class[], int, int, java.lang.String, byte[], byte[], byte[])
    {
        java.lang.reflect.ReflectAccess r0;
        java.lang.Class r1, r4;
        java.lang.String r2, r6;
        java.lang.Class[] r3, r5;
        int i0, i1;
        byte[] r7, r8, r9;
        java.lang.reflect.Method $r10;

        r0 := @this: java.lang.reflect.ReflectAccess;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Class[];
        r4 := @parameter3: java.lang.Class;
        r5 := @parameter4: java.lang.Class[];
        i0 := @parameter5: int;
        i1 := @parameter6: int;
        r6 := @parameter7: java.lang.String;
        r7 := @parameter8: byte[];
        r8 := @parameter9: byte[];
        r9 := @parameter10: byte[];
        $r10 = new java.lang.reflect.Method;
        specialinvoke $r10.<java.lang.reflect.Method: void <init>(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,int,java.lang.String,byte[],byte[],byte[])>(r1, r2, r3, r4, r5, i0, i1, r6, r7, r8, r9);
        return $r10;
    }

    public java.lang.reflect.Constructor newConstructor(java.lang.Class, java.lang.Class[], java.lang.Class[], int, int, java.lang.String, byte[], byte[])
    {
        java.lang.reflect.ReflectAccess r0;
        java.lang.Class r1;
        java.lang.Class[] r2, r3;
        int i0, i1;
        java.lang.String r4;
        byte[] r5, r6;
        java.lang.reflect.Constructor $r7;

        r0 := @this: java.lang.reflect.ReflectAccess;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.Class[];
        r3 := @parameter2: java.lang.Class[];
        i0 := @parameter3: int;
        i1 := @parameter4: int;
        r4 := @parameter5: java.lang.String;
        r5 := @parameter6: byte[];
        r6 := @parameter7: byte[];
        $r7 = new java.lang.reflect.Constructor;
        specialinvoke $r7.<java.lang.reflect.Constructor: void <init>(java.lang.Class,java.lang.Class[],java.lang.Class[],int,int,java.lang.String,byte[],byte[])>(r1, r2, r3, i0, i1, r4, r5, r6);
        return $r7;
    }

    public sun.reflect.MethodAccessor getMethodAccessor(java.lang.reflect.Method)
    {
        java.lang.reflect.ReflectAccess r0;
        java.lang.reflect.Method r1;
        sun.reflect.MethodAccessor $r2;

        r0 := @this: java.lang.reflect.ReflectAccess;
        r1 := @parameter0: java.lang.reflect.Method;
        $r2 = virtualinvoke r1.<java.lang.reflect.Method: sun.reflect.MethodAccessor getMethodAccessor()>();
        return $r2;
    }

    public void setMethodAccessor(java.lang.reflect.Method, sun.reflect.MethodAccessor)
    {
        java.lang.reflect.ReflectAccess r0;
        java.lang.reflect.Method r1;
        sun.reflect.MethodAccessor r2;

        r0 := @this: java.lang.reflect.ReflectAccess;
        r1 := @parameter0: java.lang.reflect.Method;
        r2 := @parameter1: sun.reflect.MethodAccessor;
        virtualinvoke r1.<java.lang.reflect.Method: void setMethodAccessor(sun.reflect.MethodAccessor)>(r2);
        return;
    }

    public sun.reflect.ConstructorAccessor getConstructorAccessor(java.lang.reflect.Constructor)
    {
        java.lang.reflect.ReflectAccess r0;
        java.lang.reflect.Constructor r1;
        sun.reflect.ConstructorAccessor $r2;

        r0 := @this: java.lang.reflect.ReflectAccess;
        r1 := @parameter0: java.lang.reflect.Constructor;
        $r2 = virtualinvoke r1.<java.lang.reflect.Constructor: sun.reflect.ConstructorAccessor getConstructorAccessor()>();
        return $r2;
    }

    public void setConstructorAccessor(java.lang.reflect.Constructor, sun.reflect.ConstructorAccessor)
    {
        java.lang.reflect.ReflectAccess r0;
        java.lang.reflect.Constructor r1;
        sun.reflect.ConstructorAccessor r2;

        r0 := @this: java.lang.reflect.ReflectAccess;
        r1 := @parameter0: java.lang.reflect.Constructor;
        r2 := @parameter1: sun.reflect.ConstructorAccessor;
        virtualinvoke r1.<java.lang.reflect.Constructor: void setConstructorAccessor(sun.reflect.ConstructorAccessor)>(r2);
        return;
    }

    public int getConstructorSlot(java.lang.reflect.Constructor)
    {
        java.lang.reflect.ReflectAccess r0;
        java.lang.reflect.Constructor r1;
        int $i0;

        r0 := @this: java.lang.reflect.ReflectAccess;
        r1 := @parameter0: java.lang.reflect.Constructor;
        $i0 = virtualinvoke r1.<java.lang.reflect.Constructor: int getSlot()>();
        return $i0;
    }

    public java.lang.String getConstructorSignature(java.lang.reflect.Constructor)
    {
        java.lang.reflect.ReflectAccess r0;
        java.lang.reflect.Constructor r1;
        java.lang.String $r2;

        r0 := @this: java.lang.reflect.ReflectAccess;
        r1 := @parameter0: java.lang.reflect.Constructor;
        $r2 = virtualinvoke r1.<java.lang.reflect.Constructor: java.lang.String getSignature()>();
        return $r2;
    }

    public byte[] getConstructorAnnotations(java.lang.reflect.Constructor)
    {
        java.lang.reflect.ReflectAccess r0;
        java.lang.reflect.Constructor r1;
        byte[] $r2;

        r0 := @this: java.lang.reflect.ReflectAccess;
        r1 := @parameter0: java.lang.reflect.Constructor;
        $r2 = virtualinvoke r1.<java.lang.reflect.Constructor: byte[] getRawAnnotations()>();
        return $r2;
    }

    public byte[] getConstructorParameterAnnotations(java.lang.reflect.Constructor)
    {
        java.lang.reflect.ReflectAccess r0;
        java.lang.reflect.Constructor r1;
        byte[] $r2;

        r0 := @this: java.lang.reflect.ReflectAccess;
        r1 := @parameter0: java.lang.reflect.Constructor;
        $r2 = virtualinvoke r1.<java.lang.reflect.Constructor: byte[] getRawParameterAnnotations()>();
        return $r2;
    }

    public java.lang.reflect.Method copyMethod(java.lang.reflect.Method)
    {
        java.lang.reflect.ReflectAccess r0;
        java.lang.reflect.Method r1, $r2;

        r0 := @this: java.lang.reflect.ReflectAccess;
        r1 := @parameter0: java.lang.reflect.Method;
        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.reflect.Method copy()>();
        return $r2;
    }

    public java.lang.reflect.Field copyField(java.lang.reflect.Field)
    {
        java.lang.reflect.ReflectAccess r0;
        java.lang.reflect.Field r1, $r2;

        r0 := @this: java.lang.reflect.ReflectAccess;
        r1 := @parameter0: java.lang.reflect.Field;
        $r2 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.reflect.Field copy()>();
        return $r2;
    }

    public java.lang.reflect.Constructor copyConstructor(java.lang.reflect.Constructor)
    {
        java.lang.reflect.ReflectAccess r0;
        java.lang.reflect.Constructor r1, $r2;

        r0 := @this: java.lang.reflect.ReflectAccess;
        r1 := @parameter0: java.lang.reflect.Constructor;
        $r2 = virtualinvoke r1.<java.lang.reflect.Constructor: java.lang.reflect.Constructor copy()>();
        return $r2;
    }
}
