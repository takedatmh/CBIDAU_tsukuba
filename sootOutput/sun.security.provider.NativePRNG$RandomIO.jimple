class sun.security.provider.NativePRNG$RandomIO extends java.lang.Object
{
    private static final long MAX_BUFFER_TIME;
    private static final int BUFFER_SIZE;
    private final java.io.InputStream randomIn;
    private final java.io.InputStream urandomIn;
    private java.io.OutputStream randomOut;
    private boolean randomOutInitialized;
    private volatile sun.security.provider.SecureRandom mixRandom;
    private final byte[] urandomBuffer;
    private int buffered;
    private long lastRead;
    private final java.lang.Object LOCK_GET_BYTES;
    private final java.lang.Object LOCK_GET_SEED;
    private final java.lang.Object LOCK_SET_SEED;

    private void <init>(java.io.File, java.io.File) throws java.io.IOException
    {
        sun.security.provider.NativePRNG$RandomIO r0;
        java.io.File r1, r2;
        java.lang.Object $r3, $r4, $r5;
        java.io.FileInputStream $r6, $r7;
        byte[] $r8;

        r0 := @this: sun.security.provider.NativePRNG$RandomIO;
        r1 := @parameter0: java.io.File;
        r2 := @parameter1: java.io.File;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r3 = new java.lang.Object;
        specialinvoke $r3.<java.lang.Object: void <init>()>();
        r0.<sun.security.provider.NativePRNG$RandomIO: java.lang.Object LOCK_GET_BYTES> = $r3;
        $r4 = new java.lang.Object;
        specialinvoke $r4.<java.lang.Object: void <init>()>();
        r0.<sun.security.provider.NativePRNG$RandomIO: java.lang.Object LOCK_GET_SEED> = $r4;
        $r5 = new java.lang.Object;
        specialinvoke $r5.<java.lang.Object: void <init>()>();
        r0.<sun.security.provider.NativePRNG$RandomIO: java.lang.Object LOCK_SET_SEED> = $r5;
        $r6 = new java.io.FileInputStream;
        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>(r1);
        r0.<sun.security.provider.NativePRNG$RandomIO: java.io.InputStream randomIn> = $r6;
        $r7 = new java.io.FileInputStream;
        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.File)>(r2);
        r0.<sun.security.provider.NativePRNG$RandomIO: java.io.InputStream urandomIn> = $r7;
        $r8 = newarray (byte)[32];
        r0.<sun.security.provider.NativePRNG$RandomIO: byte[] urandomBuffer> = $r8;
        return;
    }

    private sun.security.provider.SecureRandom getMixRandom()
    {
        sun.security.provider.NativePRNG$RandomIO r0;
        sun.security.provider.SecureRandom r1, $r6;
        java.lang.Object r2, $r5;
        byte[] r3;
        java.lang.Throwable r4, $r11;
        java.io.InputStream $r7;
        java.io.IOException $r8, r9;
        java.security.ProviderException $r10;

        r0 := @this: sun.security.provider.NativePRNG$RandomIO;
        r1 = r0.<sun.security.provider.NativePRNG$RandomIO: sun.security.provider.SecureRandom mixRandom>;
        if r1 != null goto label10;

        $r5 = r0.<sun.security.provider.NativePRNG$RandomIO: java.lang.Object LOCK_GET_BYTES>;
        r2 = $r5;
        entermonitor $r5;

     label0:
        r1 = r0.<sun.security.provider.NativePRNG$RandomIO: sun.security.provider.SecureRandom mixRandom>;
        if r1 != null goto label5;

        $r6 = new sun.security.provider.SecureRandom;
        specialinvoke $r6.<sun.security.provider.SecureRandom: void <init>()>();
        r1 = $r6;

     label1:
        r3 = newarray (byte)[20];
        $r7 = r0.<sun.security.provider.NativePRNG$RandomIO: java.io.InputStream urandomIn>;
        staticinvoke <sun.security.provider.NativePRNG$RandomIO: void readFully(java.io.InputStream,byte[])>($r7, r3);
        virtualinvoke r1.<sun.security.provider.SecureRandom: void engineSetSeed(byte[])>(r3);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;
        r9 = $r8;
        $r10 = new java.security.ProviderException;
        specialinvoke $r10.<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>("init failed", r9);
        throw $r10;

     label4:
        r0.<sun.security.provider.NativePRNG$RandomIO: sun.security.provider.SecureRandom mixRandom> = r1;

     label5:
        exitmonitor r2;

     label6:
        goto label10;

     label7:
        $r11 := @caughtexception;

     label8:
        r4 = $r11;
        exitmonitor r2;

     label9:
        throw r4;

     label10:
        return r1;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label0 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private static void readFully(java.io.InputStream, byte[]) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, i2;
        java.io.EOFException $r2;
        java.io.IOException $r3;

        r0 := @parameter0: java.io.InputStream;
        r1 := @parameter1: byte[];
        i0 = lengthof r1;
        i1 = 0;

     label0:
        if i0 <= 0 goto label2;

        i2 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i1, i0);
        if i2 > 0 goto label1;

        $r2 = new java.io.EOFException;
        specialinvoke $r2.<java.io.EOFException: void <init>(java.lang.String)>("/dev/[u]random closed?");
        throw $r2;

     label1:
        i1 = i1 + i2;
        i0 = i0 - i2;
        goto label0;

     label2:
        if i0 <= 0 goto label3;

        $r3 = new java.io.IOException;
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Could not read from /dev/[u]random");
        throw $r3;

     label3:
        return;
    }

    private byte[] implGenerateSeed(int)
    {
        sun.security.provider.NativePRNG$RandomIO r0;
        int i0;
        java.lang.Object r1, $r4;
        byte[] r2;
        java.lang.Throwable r3, $r10;
        java.io.InputStream $r5;
        java.io.IOException $r7, r8;
        java.security.ProviderException $r9;

        r0 := @this: sun.security.provider.NativePRNG$RandomIO;
        i0 := @parameter0: int;
        $r4 = r0.<sun.security.provider.NativePRNG$RandomIO: java.lang.Object LOCK_GET_SEED>;
        r1 = $r4;
        entermonitor $r4;

     label0:
        r2 = newarray (byte)[i0];
        $r5 = r0.<sun.security.provider.NativePRNG$RandomIO: java.io.InputStream randomIn>;
        staticinvoke <sun.security.provider.NativePRNG$RandomIO: void readFully(java.io.InputStream,byte[])>($r5, r2);

     label1:
        exitmonitor r1;

     label2:
        return r2;

     label3:
        $r7 := @caughtexception;

     label4:
        r8 = $r7;
        $r9 = new java.security.ProviderException;
        specialinvoke $r9.<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>("generateSeed() failed", r8);
        throw $r9;

     label5:
        $r10 := @caughtexception;
        r3 = $r10;
        exitmonitor r1;

     label6:
        throw r3;

        catch java.io.IOException from label0 to label1 with label3;
        catch java.lang.Throwable from label0 to label2 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    private void implSetSeed(byte[])
    {
        sun.security.provider.NativePRNG$RandomIO r0;
        byte[] r1;
        java.lang.Object r2, $r5, $r7;
        java.io.IOException r3, $r11;
        java.lang.Throwable r4, $r14;
        boolean $z0;
        sun.security.provider.NativePRNG$RandomIO$1 $r6;
        java.io.OutputStream $r8, $r9, $r10;
        java.security.ProviderException $r12;
        sun.security.provider.SecureRandom $r13;

        r0 := @this: sun.security.provider.NativePRNG$RandomIO;
        r1 := @parameter0: byte[];
        $r5 = r0.<sun.security.provider.NativePRNG$RandomIO: java.lang.Object LOCK_SET_SEED>;
        r2 = $r5;
        entermonitor $r5;

     label0:
        $z0 = r0.<sun.security.provider.NativePRNG$RandomIO: boolean randomOutInitialized>;
        if $z0 != 0 goto label1;

        r0.<sun.security.provider.NativePRNG$RandomIO: boolean randomOutInitialized> = 1;
        $r6 = new sun.security.provider.NativePRNG$RandomIO$1;
        specialinvoke $r6.<sun.security.provider.NativePRNG$RandomIO$1: void <init>(sun.security.provider.NativePRNG$RandomIO)>(r0);
        $r7 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r6);
        $r8 = (java.io.OutputStream) $r7;
        r0.<sun.security.provider.NativePRNG$RandomIO: java.io.OutputStream randomOut> = $r8;

     label1:
        $r9 = r0.<sun.security.provider.NativePRNG$RandomIO: java.io.OutputStream randomOut>;
        if $r9 == null goto label5;

     label2:
        $r10 = r0.<sun.security.provider.NativePRNG$RandomIO: java.io.OutputStream randomOut>;
        virtualinvoke $r10.<java.io.OutputStream: void write(byte[])>(r1);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;
        r3 = $r11;
        $r12 = new java.security.ProviderException;
        specialinvoke $r12.<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>("setSeed() failed", r3);
        throw $r12;

     label5:
        $r13 = specialinvoke r0.<sun.security.provider.NativePRNG$RandomIO: sun.security.provider.SecureRandom getMixRandom()>();
        virtualinvoke $r13.<sun.security.provider.SecureRandom: void engineSetSeed(byte[])>(r1);
        exitmonitor r2;

     label6:
        goto label10;

     label7:
        $r14 := @caughtexception;

     label8:
        r4 = $r14;
        exitmonitor r2;

     label9:
        throw r4;

     label10:
        return;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.lang.Throwable from label0 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void ensureBufferValid() throws java.io.IOException
    {
        sun.security.provider.NativePRNG$RandomIO r0;
        long l0, $l2, $l3;
        int $i1, $i5;
        byte $b4;
        java.io.InputStream $r1;
        byte[] $r2, $r3;

        r0 := @this: sun.security.provider.NativePRNG$RandomIO;
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $i1 = r0.<sun.security.provider.NativePRNG$RandomIO: int buffered>;
        if $i1 <= 0 goto label0;

        $l2 = r0.<sun.security.provider.NativePRNG$RandomIO: long lastRead>;
        $l3 = l0 - $l2;
        $b4 = $l3 cmp 100L;
        if $b4 >= 0 goto label0;

        return;

     label0:
        r0.<sun.security.provider.NativePRNG$RandomIO: long lastRead> = l0;
        $r1 = r0.<sun.security.provider.NativePRNG$RandomIO: java.io.InputStream urandomIn>;
        $r2 = r0.<sun.security.provider.NativePRNG$RandomIO: byte[] urandomBuffer>;
        staticinvoke <sun.security.provider.NativePRNG$RandomIO: void readFully(java.io.InputStream,byte[])>($r1, $r2);
        $r3 = r0.<sun.security.provider.NativePRNG$RandomIO: byte[] urandomBuffer>;
        $i5 = lengthof $r3;
        r0.<sun.security.provider.NativePRNG$RandomIO: int buffered> = $i5;
        return;
    }

    private void implNextBytes(byte[])
    {
        sun.security.provider.NativePRNG$RandomIO r0;
        byte[] r1, $r6, $r8;
        java.lang.Object r2, $r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i12, $i13;
        java.lang.Throwable r3, $r13;
        sun.security.provider.SecureRandom $r5;
        byte $b8, $b9, $b10, $b11;
        java.io.IOException $r10, r11;
        java.security.ProviderException $r12;

        r0 := @this: sun.security.provider.NativePRNG$RandomIO;
        r1 := @parameter0: byte[];
        $r4 = r0.<sun.security.provider.NativePRNG$RandomIO: java.lang.Object LOCK_GET_BYTES>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $r5 = specialinvoke r0.<sun.security.provider.NativePRNG$RandomIO: sun.security.provider.SecureRandom getMixRandom()>();
        virtualinvoke $r5.<sun.security.provider.SecureRandom: void engineNextBytes(byte[])>(r1);
        i0 = lengthof r1;
        i1 = 0;

     label1:
        if i0 <= 0 goto label4;

        specialinvoke r0.<sun.security.provider.NativePRNG$RandomIO: void ensureBufferValid()>();
        $r6 = r0.<sun.security.provider.NativePRNG$RandomIO: byte[] urandomBuffer>;
        $i4 = lengthof $r6;
        $i5 = r0.<sun.security.provider.NativePRNG$RandomIO: int buffered>;
        i2 = $i4 - $i5;

     label2:
        if i0 <= 0 goto label3;

        $i6 = r0.<sun.security.provider.NativePRNG$RandomIO: int buffered>;
        if $i6 <= 0 goto label3;

        $i7 = i1;
        i1 = i1 + 1;
        $b8 = r1[$i7];
        $r8 = r0.<sun.security.provider.NativePRNG$RandomIO: byte[] urandomBuffer>;
        $i3 = i2;
        i2 = i2 + 1;
        $b9 = $r8[$i3];
        $b10 = $b8 ^ $b9;
        $b11 = (byte) $b10;
        r1[$i7] = $b11;
        i0 = i0 + -1;
        $i12 = r0.<sun.security.provider.NativePRNG$RandomIO: int buffered>;
        $i13 = $i12 - 1;
        r0.<sun.security.provider.NativePRNG$RandomIO: int buffered> = $i13;
        goto label2;

     label3:
        goto label1;

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;
        r11 = $r10;
        $r12 = new java.security.ProviderException;
        specialinvoke $r12.<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>("nextBytes() failed", r11);
        throw $r12;

     label6:
        exitmonitor r2;

     label7:
        goto label11;

     label8:
        $r13 := @caughtexception;

     label9:
        r3 = $r13;
        exitmonitor r2;

     label10:
        throw r3;

     label11:
        return;

        catch java.io.IOException from label0 to label4 with label5;
        catch java.lang.Throwable from label0 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    void <init>(java.io.File, java.io.File, sun.security.provider.NativePRNG$1) throws java.io.IOException
    {
        sun.security.provider.NativePRNG$RandomIO r0;
        java.io.File r1, r2;
        sun.security.provider.NativePRNG$1 r3;

        r0 := @this: sun.security.provider.NativePRNG$RandomIO;
        r1 := @parameter0: java.io.File;
        r2 := @parameter1: java.io.File;
        r3 := @parameter2: sun.security.provider.NativePRNG$1;
        specialinvoke r0.<sun.security.provider.NativePRNG$RandomIO: void <init>(java.io.File,java.io.File)>(r1, r2);
        return;
    }

    static void access$100(sun.security.provider.NativePRNG$RandomIO, byte[])
    {
        sun.security.provider.NativePRNG$RandomIO r0;
        byte[] r1;

        r0 := @parameter0: sun.security.provider.NativePRNG$RandomIO;
        r1 := @parameter1: byte[];
        specialinvoke r0.<sun.security.provider.NativePRNG$RandomIO: void implSetSeed(byte[])>(r1);
        return;
    }

    static void access$200(sun.security.provider.NativePRNG$RandomIO, byte[])
    {
        sun.security.provider.NativePRNG$RandomIO r0;
        byte[] r1;

        r0 := @parameter0: sun.security.provider.NativePRNG$RandomIO;
        r1 := @parameter1: byte[];
        specialinvoke r0.<sun.security.provider.NativePRNG$RandomIO: void implNextBytes(byte[])>(r1);
        return;
    }

    static byte[] access$300(sun.security.provider.NativePRNG$RandomIO, int)
    {
        sun.security.provider.NativePRNG$RandomIO r0;
        int i0;
        byte[] $r1;

        r0 := @parameter0: sun.security.provider.NativePRNG$RandomIO;
        i0 := @parameter1: int;
        $r1 = specialinvoke r0.<sun.security.provider.NativePRNG$RandomIO: byte[] implGenerateSeed(int)>(i0);
        return $r1;
    }
}
