class sun.nio.fs.AbstractWatchKey$Event extends java.lang.Object implements java.nio.file.WatchEvent
{
    private final java.nio.file.WatchEvent$Kind kind;
    private final java.lang.Object context;
    private int count;

    void <init>(java.nio.file.WatchEvent$Kind, java.lang.Object)
    {
        sun.nio.fs.AbstractWatchKey$Event r0;
        java.nio.file.WatchEvent$Kind r1;
        java.lang.Object r2;

        r0 := @this: sun.nio.fs.AbstractWatchKey$Event;
        r1 := @parameter0: java.nio.file.WatchEvent$Kind;
        r2 := @parameter1: java.lang.Object;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.nio.fs.AbstractWatchKey$Event: java.nio.file.WatchEvent$Kind kind> = r1;
        r0.<sun.nio.fs.AbstractWatchKey$Event: java.lang.Object context> = r2;
        r0.<sun.nio.fs.AbstractWatchKey$Event: int count> = 1;
        return;
    }

    public java.nio.file.WatchEvent$Kind kind()
    {
        sun.nio.fs.AbstractWatchKey$Event r0;
        java.nio.file.WatchEvent$Kind $r1;

        r0 := @this: sun.nio.fs.AbstractWatchKey$Event;
        $r1 = r0.<sun.nio.fs.AbstractWatchKey$Event: java.nio.file.WatchEvent$Kind kind>;
        return $r1;
    }

    public java.lang.Object context()
    {
        sun.nio.fs.AbstractWatchKey$Event r0;
        java.lang.Object $r1;

        r0 := @this: sun.nio.fs.AbstractWatchKey$Event;
        $r1 = r0.<sun.nio.fs.AbstractWatchKey$Event: java.lang.Object context>;
        return $r1;
    }

    public int count()
    {
        sun.nio.fs.AbstractWatchKey$Event r0;
        int $i0;

        r0 := @this: sun.nio.fs.AbstractWatchKey$Event;
        $i0 = r0.<sun.nio.fs.AbstractWatchKey$Event: int count>;
        return $i0;
    }

    void increment()
    {
        sun.nio.fs.AbstractWatchKey$Event r0;
        int $i0, $i1;

        r0 := @this: sun.nio.fs.AbstractWatchKey$Event;
        $i0 = r0.<sun.nio.fs.AbstractWatchKey$Event: int count>;
        $i1 = $i0 + 1;
        r0.<sun.nio.fs.AbstractWatchKey$Event: int count> = $i1;
        return;
    }
}
