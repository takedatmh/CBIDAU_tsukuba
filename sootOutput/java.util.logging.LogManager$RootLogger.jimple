final class java.util.logging.LogManager$RootLogger extends java.util.logging.Logger
{
    final java.util.logging.LogManager this$0;

    private void <init>(java.util.logging.LogManager)
    {
        java.util.logging.LogManager$RootLogger r0;
        java.util.logging.LogManager r1;
        java.util.logging.Level $r2;

        r0 := @this: java.util.logging.LogManager$RootLogger;
        r1 := @parameter0: java.util.logging.LogManager;
        r0.<java.util.logging.LogManager$RootLogger: java.util.logging.LogManager this$0> = r1;
        specialinvoke r0.<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String,java.lang.Class,boolean)>("", null, null, 1);
        $r2 = staticinvoke <java.util.logging.LogManager: java.util.logging.Level access$1400()>();
        virtualinvoke r0.<java.util.logging.LogManager$RootLogger: void setLevel(java.util.logging.Level)>($r2);
        return;
    }

    public void log(java.util.logging.LogRecord)
    {
        java.util.logging.LogManager$RootLogger r0;
        java.util.logging.LogRecord r1;
        java.util.logging.LogManager $r2;

        r0 := @this: java.util.logging.LogManager$RootLogger;
        r1 := @parameter0: java.util.logging.LogRecord;
        $r2 = r0.<java.util.logging.LogManager$RootLogger: java.util.logging.LogManager this$0>;
        staticinvoke <java.util.logging.LogManager: void access$1500(java.util.logging.LogManager)>($r2);
        specialinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r1);
        return;
    }

    public void addHandler(java.util.logging.Handler)
    {
        java.util.logging.LogManager$RootLogger r0;
        java.util.logging.Handler r1;
        java.util.logging.LogManager $r2;

        r0 := @this: java.util.logging.LogManager$RootLogger;
        r1 := @parameter0: java.util.logging.Handler;
        $r2 = r0.<java.util.logging.LogManager$RootLogger: java.util.logging.LogManager this$0>;
        staticinvoke <java.util.logging.LogManager: void access$1500(java.util.logging.LogManager)>($r2);
        specialinvoke r0.<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>(r1);
        return;
    }

    public void removeHandler(java.util.logging.Handler)
    {
        java.util.logging.LogManager$RootLogger r0;
        java.util.logging.Handler r1;
        java.util.logging.LogManager $r2;

        r0 := @this: java.util.logging.LogManager$RootLogger;
        r1 := @parameter0: java.util.logging.Handler;
        $r2 = r0.<java.util.logging.LogManager$RootLogger: java.util.logging.LogManager this$0>;
        staticinvoke <java.util.logging.LogManager: void access$1500(java.util.logging.LogManager)>($r2);
        specialinvoke r0.<java.util.logging.Logger: void removeHandler(java.util.logging.Handler)>(r1);
        return;
    }

    java.util.logging.Handler[] accessCheckedHandlers()
    {
        java.util.logging.LogManager$RootLogger r0;
        java.util.logging.LogManager $r1;
        java.util.logging.Handler[] $r2;

        r0 := @this: java.util.logging.LogManager$RootLogger;
        $r1 = r0.<java.util.logging.LogManager$RootLogger: java.util.logging.LogManager this$0>;
        staticinvoke <java.util.logging.LogManager: void access$1500(java.util.logging.LogManager)>($r1);
        $r2 = specialinvoke r0.<java.util.logging.Logger: java.util.logging.Handler[] accessCheckedHandlers()>();
        return $r2;
    }

    void <init>(java.util.logging.LogManager, java.util.logging.LogManager$1)
    {
        java.util.logging.LogManager$RootLogger r0;
        java.util.logging.LogManager r1;
        java.util.logging.LogManager$1 r2;

        r0 := @this: java.util.logging.LogManager$RootLogger;
        r1 := @parameter0: java.util.logging.LogManager;
        r2 := @parameter1: java.util.logging.LogManager$1;
        specialinvoke r0.<java.util.logging.LogManager$RootLogger: void <init>(java.util.logging.LogManager)>(r1);
        return;
    }
}
