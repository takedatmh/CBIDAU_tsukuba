final class java.util.regex.Pattern$Prolog extends java.util.regex.Pattern$Node
{
    java.util.regex.Pattern$Loop loop;

    void <init>(java.util.regex.Pattern$Loop)
    {
        java.util.regex.Pattern$Prolog r0;
        java.util.regex.Pattern$Loop r1;

        r0 := @this: java.util.regex.Pattern$Prolog;
        r1 := @parameter0: java.util.regex.Pattern$Loop;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        r0.<java.util.regex.Pattern$Prolog: java.util.regex.Pattern$Loop loop> = r1;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$Prolog r0;
        java.util.regex.Matcher r1;
        int i0;
        java.lang.CharSequence r2;
        java.util.regex.Pattern$Loop $r3;
        boolean $z0;

        r0 := @this: java.util.regex.Pattern$Prolog;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $r3 = r0.<java.util.regex.Pattern$Prolog: java.util.regex.Pattern$Loop loop>;
        $z0 = virtualinvoke $r3.<java.util.regex.Pattern$Loop: boolean matchInit(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        return $z0;
    }

    boolean study(java.util.regex.Pattern$TreeInfo)
    {
        java.util.regex.Pattern$Prolog r0;
        java.util.regex.Pattern$TreeInfo r1;
        java.util.regex.Pattern$Loop $r2;
        boolean $z0;

        r0 := @this: java.util.regex.Pattern$Prolog;
        r1 := @parameter0: java.util.regex.Pattern$TreeInfo;
        $r2 = r0.<java.util.regex.Pattern$Prolog: java.util.regex.Pattern$Loop loop>;
        $z0 = virtualinvoke $r2.<java.util.regex.Pattern$Loop: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        return $z0;
    }
}
