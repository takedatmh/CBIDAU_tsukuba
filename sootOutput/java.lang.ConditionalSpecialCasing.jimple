final class java.lang.ConditionalSpecialCasing extends java.lang.Object
{
    static final int FINAL_CASED;
    static final int AFTER_SOFT_DOTTED;
    static final int MORE_ABOVE;
    static final int AFTER_I;
    static final int NOT_BEFORE_DOT;
    static final int COMBINING_CLASS_ABOVE;
    static java.lang.ConditionalSpecialCasing$Entry[] entry;
    static java.util.Hashtable entryTable;

    void <init>()
    {
        java.lang.ConditionalSpecialCasing r0;

        r0 := @this: java.lang.ConditionalSpecialCasing;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    static int toLowerCaseEx(java.lang.String, int, java.util.Locale)
    {
        java.lang.String r0;
        int i0, $i1, $i3, $i4;
        java.util.Locale r1;
        char[] r2;
        char $c2;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r1 := @parameter2: java.util.Locale;
        r2 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] lookUpTable(java.lang.String,int,java.util.Locale,boolean)>(r0, i0, r1, 1);
        if r2 == null goto label1;

        $i1 = lengthof r2;
        if $i1 != 1 goto label0;

        $c2 = r2[0];
        return $c2;

     label0:
        return -1;

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i0);
        $i4 = staticinvoke <java.lang.Character: int toLowerCase(int)>($i3);
        return $i4;
    }

    static int toUpperCaseEx(java.lang.String, int, java.util.Locale)
    {
        java.lang.String r0;
        int i0, $i1, $i3, $i4;
        java.util.Locale r1;
        char[] r2;
        char $c2;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r1 := @parameter2: java.util.Locale;
        r2 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] lookUpTable(java.lang.String,int,java.util.Locale,boolean)>(r0, i0, r1, 0);
        if r2 == null goto label1;

        $i1 = lengthof r2;
        if $i1 != 1 goto label0;

        $c2 = r2[0];
        return $c2;

     label0:
        return -1;

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i0);
        $i4 = staticinvoke <java.lang.Character: int toUpperCaseEx(int)>($i3);
        return $i4;
    }

    static char[] toLowerCaseCharArray(java.lang.String, int, java.util.Locale)
    {
        java.lang.String r0;
        int i0;
        java.util.Locale r1;
        char[] $r2;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r1 := @parameter2: java.util.Locale;
        $r2 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] lookUpTable(java.lang.String,int,java.util.Locale,boolean)>(r0, i0, r1, 1);
        return $r2;
    }

    static char[] toUpperCaseCharArray(java.lang.String, int, java.util.Locale)
    {
        java.lang.String r0;
        int i0, $i1;
        java.util.Locale r1;
        char[] r2, $r3;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r1 := @parameter2: java.util.Locale;
        r2 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] lookUpTable(java.lang.String,int,java.util.Locale,boolean)>(r0, i0, r1, 0);
        if r2 == null goto label0;

        return r2;

     label0:
        $i1 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i0);
        $r3 = staticinvoke <java.lang.Character: char[] toUpperCaseCharArray(int)>($i1);
        return $r3;
    }

    private static char[] lookUpTable(java.lang.String, int, java.util.Locale, boolean)
    {
        java.lang.String r0, r7, r9;
        int i0, $i1, $i2;
        java.util.Locale r1;
        boolean z0, $z1, $z2, $z3;
        java.util.Hashtable $r2;
        java.lang.Integer $r3;
        java.util.HashSet r4;
        char[] r5, $r12;
        java.util.Iterator r6;
        java.lang.ConditionalSpecialCasing$Entry r8;
        java.lang.Object $r10, $r11;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r1 := @parameter2: java.util.Locale;
        z0 := @parameter3: boolean;
        $r2 = <java.lang.ConditionalSpecialCasing: java.util.Hashtable entryTable>;
        $r3 = new java.lang.Integer;
        $i1 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i0);
        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i1);
        $r10 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);
        r4 = (java.util.HashSet) $r10;
        r5 = null;
        if r4 == null goto label5;

        r6 = virtualinvoke r4.<java.util.HashSet: java.util.Iterator iterator()>();
        r7 = virtualinvoke r1.<java.util.Locale: java.lang.String getLanguage()>();

     label0:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label5;

        $r11 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();
        r8 = (java.lang.ConditionalSpecialCasing$Entry) $r11;
        r9 = virtualinvoke r8.<java.lang.ConditionalSpecialCasing$Entry: java.lang.String getLanguage()>();
        if r9 == null goto label1;

        $z2 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>(r7);
        if $z2 == 0 goto label4;

     label1:
        $i2 = virtualinvoke r8.<java.lang.ConditionalSpecialCasing$Entry: int getCondition()>();
        $z3 = staticinvoke <java.lang.ConditionalSpecialCasing: boolean isConditionMet(java.lang.String,int,java.util.Locale,int)>(r0, i0, r1, $i2);
        if $z3 == 0 goto label4;

        if z0 == 0 goto label2;

        $r12 = virtualinvoke r8.<java.lang.ConditionalSpecialCasing$Entry: char[] getLowerCase()>();
        goto label3;

     label2:
        $r12 = virtualinvoke r8.<java.lang.ConditionalSpecialCasing$Entry: char[] getUpperCase()>();

     label3:
        r5 = $r12;
        if r9 == null goto label4;

        goto label5;

     label4:
        goto label0;

     label5:
        return r5;
    }

    private static boolean isConditionMet(java.lang.String, int, java.util.Locale, int)
    {
        java.lang.String r0;
        int i0, i1;
        java.util.Locale r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r1 := @parameter2: java.util.Locale;
        i1 := @parameter3: int;
        tableswitch(i1)
        {
            case 1: goto label0;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label3;
            case 5: goto label4;
            default: goto label7;
        };

     label0:
        $z0 = staticinvoke <java.lang.ConditionalSpecialCasing: boolean isFinalCased(java.lang.String,int,java.util.Locale)>(r0, i0, r1);
        return $z0;

     label1:
        $z1 = staticinvoke <java.lang.ConditionalSpecialCasing: boolean isAfterSoftDotted(java.lang.String,int)>(r0, i0);
        return $z1;

     label2:
        $z2 = staticinvoke <java.lang.ConditionalSpecialCasing: boolean isMoreAbove(java.lang.String,int)>(r0, i0);
        return $z2;

     label3:
        $z3 = staticinvoke <java.lang.ConditionalSpecialCasing: boolean isAfterI(java.lang.String,int)>(r0, i0);
        return $z3;

     label4:
        $z4 = staticinvoke <java.lang.ConditionalSpecialCasing: boolean isBeforeDot(java.lang.String,int)>(r0, i0);
        if $z4 != 0 goto label5;

        $z5 = 1;
        goto label6;

     label5:
        $z5 = 0;

     label6:
        return $z5;

     label7:
        return 1;
    }

    private static boolean isFinalCased(java.lang.String, int, java.util.Locale)
    {
        java.lang.String r0;
        int i0, i1, i2, i3, $i4, $i5, i6, i7, $i8, $i9;
        java.util.Locale r1;
        java.text.BreakIterator r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r1 := @parameter2: java.util.Locale;
        r2 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getWordInstance(java.util.Locale)>(r1);
        virtualinvoke r2.<java.text.BreakIterator: void setText(java.lang.String)>(r0);
        i1 = i0;

     label0:
        if i1 < 0 goto label5;

        $z0 = virtualinvoke r2.<java.text.BreakIterator: boolean isBoundary(int)>(i1);
        if $z0 != 0 goto label5;

        i2 = virtualinvoke r0.<java.lang.String: int codePointBefore(int)>(i1);
        $z1 = staticinvoke <java.lang.ConditionalSpecialCasing: boolean isCased(int)>(i2);
        if $z1 == 0 goto label4;

        i3 = virtualinvoke r0.<java.lang.String: int length()>();
        $i4 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i0);
        $i5 = staticinvoke <java.lang.Character: int charCount(int)>($i4);
        i6 = i0 + $i5;

     label1:
        if i6 >= i3 goto label3;

        $z2 = virtualinvoke r2.<java.text.BreakIterator: boolean isBoundary(int)>(i6);
        if $z2 != 0 goto label3;

        i7 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i6);
        $z3 = staticinvoke <java.lang.ConditionalSpecialCasing: boolean isCased(int)>(i7);
        if $z3 == 0 goto label2;

        return 0;

     label2:
        $i8 = staticinvoke <java.lang.Character: int charCount(int)>(i7);
        i6 = i6 + $i8;
        goto label1;

     label3:
        return 1;

     label4:
        $i9 = staticinvoke <java.lang.Character: int charCount(int)>(i2);
        i1 = i1 - $i9;
        goto label0;

     label5:
        return 0;
    }

    private static boolean isAfterI(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, i1, i2, i3, $i4;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 = i0;

     label0:
        if i1 <= 0 goto label4;

        i2 = virtualinvoke r0.<java.lang.String: int codePointBefore(int)>(i1);
        if i2 != 73 goto label1;

        return 1;

     label1:
        i3 = staticinvoke <sun.text.Normalizer: int getCombiningClass(int)>(i2);
        if i3 == 0 goto label2;

        if i3 != 230 goto label3;

     label2:
        return 0;

     label3:
        $i4 = staticinvoke <java.lang.Character: int charCount(int)>(i2);
        i1 = i1 - $i4;
        goto label0;

     label4:
        return 0;
    }

    private static boolean isAfterSoftDotted(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, i1, i2, i3, $i4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 = i0;

     label0:
        if i1 <= 0 goto label4;

        i2 = virtualinvoke r0.<java.lang.String: int codePointBefore(int)>(i1);
        $z0 = staticinvoke <java.lang.ConditionalSpecialCasing: boolean isSoftDotted(int)>(i2);
        if $z0 == 0 goto label1;

        return 1;

     label1:
        i3 = staticinvoke <sun.text.Normalizer: int getCombiningClass(int)>(i2);
        if i3 == 0 goto label2;

        if i3 != 230 goto label3;

     label2:
        return 0;

     label3:
        $i4 = staticinvoke <java.lang.Character: int charCount(int)>(i2);
        i1 = i1 - $i4;
        goto label0;

     label4:
        return 0;
    }

    private static boolean isMoreAbove(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 = virtualinvoke r0.<java.lang.String: int length()>();
        $i5 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i0);
        $i6 = staticinvoke <java.lang.Character: int charCount(int)>($i5);
        i2 = i0 + $i6;

     label0:
        if i2 >= i1 goto label3;

        i3 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i2);
        i4 = staticinvoke <sun.text.Normalizer: int getCombiningClass(int)>(i3);
        if i4 != 230 goto label1;

        return 1;

     label1:
        if i4 != 0 goto label2;

        return 0;

     label2:
        $i7 = staticinvoke <java.lang.Character: int charCount(int)>(i3);
        i2 = i2 + $i7;
        goto label0;

     label3:
        return 0;
    }

    private static boolean isBeforeDot(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 = virtualinvoke r0.<java.lang.String: int length()>();
        $i5 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i0);
        $i6 = staticinvoke <java.lang.Character: int charCount(int)>($i5);
        i2 = i0 + $i6;

     label0:
        if i2 >= i1 goto label4;

        i3 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i2);
        if i3 != 775 goto label1;

        return 1;

     label1:
        i4 = staticinvoke <sun.text.Normalizer: int getCombiningClass(int)>(i3);
        if i4 == 0 goto label2;

        if i4 != 230 goto label3;

     label2:
        return 0;

     label3:
        $i7 = staticinvoke <java.lang.Character: int charCount(int)>(i3);
        i2 = i2 + $i7;
        goto label0;

     label4:
        return 0;
    }

    private static boolean isCased(int)
    {
        int i0, i1;

        i0 := @parameter0: int;
        i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);
        if i1 == 2 goto label0;

        if i1 == 1 goto label0;

        if i1 != 3 goto label1;

     label0:
        return 1;

     label1:
        if i0 < 688 goto label2;

        if i0 > 696 goto label2;

        return 1;

     label2:
        if i0 < 704 goto label3;

        if i0 > 705 goto label3;

        return 1;

     label3:
        if i0 < 736 goto label4;

        if i0 > 740 goto label4;

        return 1;

     label4:
        if i0 != 837 goto label5;

        return 1;

     label5:
        if i0 != 890 goto label6;

        return 1;

     label6:
        if i0 < 7468 goto label7;

        if i0 > 7521 goto label7;

        return 1;

     label7:
        if i0 < 8544 goto label8;

        if i0 > 8575 goto label8;

        return 1;

     label8:
        if i0 < 9398 goto label9;

        if i0 > 9449 goto label9;

        return 1;

     label9:
        return 0;
    }

    private static boolean isSoftDotted(int)
    {
        int i0;

        i0 := @parameter0: int;
        lookupswitch(i0)
        {
            case 105: goto label0;
            case 106: goto label0;
            case 303: goto label0;
            case 616: goto label0;
            case 1110: goto label0;
            case 1112: goto label0;
            case 7522: goto label0;
            case 7725: goto label0;
            case 7883: goto label0;
            case 8305: goto label0;
            default: goto label1;
        };

     label0:
        return 1;

     label1:
        return 0;
    }

    static void <clinit>()
    {
        java.lang.ConditionalSpecialCasing$Entry $r0, r1, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40, $r43, $r46, $r49, $r52;
        int i0, $i1, $i2;
        java.lang.Integer r2, $r58;
        java.util.HashSet r3, $r61;
        java.lang.ConditionalSpecialCasing$Entry[] $r4, $r56, $r57;
        char[] $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r20, $r21, $r23, $r24, $r26, $r27, $r29, $r30, $r32, $r33, $r35, $r36, $r38, $r39, $r41, $r42, $r44, $r45, $r47, $r48, $r50, $r51, $r53, $r54;
        java.util.Hashtable $r55, $r59, $r62;
        java.lang.Object $r60;

        $r4 = newarray (java.lang.ConditionalSpecialCasing$Entry)[17];
        $r0 = new java.lang.ConditionalSpecialCasing$Entry;
        $r5 = newarray (char)[1];
        $r5[0] = 962;
        $r6 = newarray (char)[1];
        $r6[0] = 931;
        specialinvoke $r0.<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>(931, $r5, $r6, null, 1);
        $r4[0] = $r0;
        $r7 = new java.lang.ConditionalSpecialCasing$Entry;
        $r8 = newarray (char)[2];
        $r8[0] = 105;
        $r8[1] = 775;
        $r9 = newarray (char)[1];
        $r9[0] = 304;
        specialinvoke $r7.<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>(304, $r8, $r9, null, 0);
        $r4[1] = $r7;
        $r10 = new java.lang.ConditionalSpecialCasing$Entry;
        $r11 = newarray (char)[1];
        $r11[0] = 775;
        $r12 = newarray (char)[0];
        specialinvoke $r10.<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>(775, $r11, $r12, "lt", 2);
        $r4[2] = $r10;
        $r13 = new java.lang.ConditionalSpecialCasing$Entry;
        $r14 = newarray (char)[2];
        $r14[0] = 105;
        $r14[1] = 775;
        $r15 = newarray (char)[1];
        $r15[0] = 73;
        specialinvoke $r13.<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>(73, $r14, $r15, "lt", 3);
        $r4[3] = $r13;
        $r16 = new java.lang.ConditionalSpecialCasing$Entry;
        $r17 = newarray (char)[2];
        $r17[0] = 106;
        $r17[1] = 775;
        $r18 = newarray (char)[1];
        $r18[0] = 74;
        specialinvoke $r16.<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>(74, $r17, $r18, "lt", 3);
        $r4[4] = $r16;
        $r19 = new java.lang.ConditionalSpecialCasing$Entry;
        $r20 = newarray (char)[2];
        $r20[0] = 303;
        $r20[1] = 775;
        $r21 = newarray (char)[1];
        $r21[0] = 302;
        specialinvoke $r19.<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>(302, $r20, $r21, "lt", 3);
        $r4[5] = $r19;
        $r22 = new java.lang.ConditionalSpecialCasing$Entry;
        $r23 = newarray (char)[3];
        $r23[0] = 105;
        $r23[1] = 775;
        $r23[2] = 768;
        $r24 = newarray (char)[1];
        $r24[0] = 204;
        specialinvoke $r22.<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>(204, $r23, $r24, "lt", 0);
        $r4[6] = $r22;
        $r25 = new java.lang.ConditionalSpecialCasing$Entry;
        $r26 = newarray (char)[3];
        $r26[0] = 105;
        $r26[1] = 775;
        $r26[2] = 769;
        $r27 = newarray (char)[1];
        $r27[0] = 205;
        specialinvoke $r25.<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>(205, $r26, $r27, "lt", 0);
        $r4[7] = $r25;
        $r28 = new java.lang.ConditionalSpecialCasing$Entry;
        $r29 = newarray (char)[3];
        $r29[0] = 105;
        $r29[1] = 775;
        $r29[2] = 771;
        $r30 = newarray (char)[1];
        $r30[0] = 296;
        specialinvoke $r28.<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>(296, $r29, $r30, "lt", 0);
        $r4[8] = $r28;
        $r31 = new java.lang.ConditionalSpecialCasing$Entry;
        $r32 = newarray (char)[1];
        $r32[0] = 105;
        $r33 = newarray (char)[1];
        $r33[0] = 304;
        specialinvoke $r31.<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>(304, $r32, $r33, "tr", 0);
        $r4[9] = $r31;
        $r34 = new java.lang.ConditionalSpecialCasing$Entry;
        $r35 = newarray (char)[1];
        $r35[0] = 105;
        $r36 = newarray (char)[1];
        $r36[0] = 304;
        specialinvoke $r34.<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>(304, $r35, $r36, "az", 0);
        $r4[10] = $r34;
        $r37 = new java.lang.ConditionalSpecialCasing$Entry;
        $r38 = newarray (char)[0];
        $r39 = newarray (char)[1];
        $r39[0] = 775;
        specialinvoke $r37.<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>(775, $r38, $r39, "tr", 4);
        $r4[11] = $r37;
        $r40 = new java.lang.ConditionalSpecialCasing$Entry;
        $r41 = newarray (char)[0];
        $r42 = newarray (char)[1];
        $r42[0] = 775;
        specialinvoke $r40.<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>(775, $r41, $r42, "az", 4);
        $r4[12] = $r40;
        $r43 = new java.lang.ConditionalSpecialCasing$Entry;
        $r44 = newarray (char)[1];
        $r44[0] = 305;
        $r45 = newarray (char)[1];
        $r45[0] = 73;
        specialinvoke $r43.<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>(73, $r44, $r45, "tr", 5);
        $r4[13] = $r43;
        $r46 = new java.lang.ConditionalSpecialCasing$Entry;
        $r47 = newarray (char)[1];
        $r47[0] = 305;
        $r48 = newarray (char)[1];
        $r48[0] = 73;
        specialinvoke $r46.<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>(73, $r47, $r48, "az", 5);
        $r4[14] = $r46;
        $r49 = new java.lang.ConditionalSpecialCasing$Entry;
        $r50 = newarray (char)[1];
        $r50[0] = 105;
        $r51 = newarray (char)[1];
        $r51[0] = 304;
        specialinvoke $r49.<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>(105, $r50, $r51, "tr", 0);
        $r4[15] = $r49;
        $r52 = new java.lang.ConditionalSpecialCasing$Entry;
        $r53 = newarray (char)[1];
        $r53[0] = 105;
        $r54 = newarray (char)[1];
        $r54[0] = 304;
        specialinvoke $r52.<java.lang.ConditionalSpecialCasing$Entry: void <init>(int,char[],char[],java.lang.String,int)>(105, $r53, $r54, "az", 0);
        $r4[16] = $r52;
        <java.lang.ConditionalSpecialCasing: java.lang.ConditionalSpecialCasing$Entry[] entry> = $r4;
        $r55 = new java.util.Hashtable;
        specialinvoke $r55.<java.util.Hashtable: void <init>()>();
        <java.lang.ConditionalSpecialCasing: java.util.Hashtable entryTable> = $r55;
        i0 = 0;

     label0:
        $r56 = <java.lang.ConditionalSpecialCasing: java.lang.ConditionalSpecialCasing$Entry[] entry>;
        $i1 = lengthof $r56;
        if i0 >= $i1 goto label2;

        $r57 = <java.lang.ConditionalSpecialCasing: java.lang.ConditionalSpecialCasing$Entry[] entry>;
        r1 = $r57[i0];
        $r58 = new java.lang.Integer;
        $i2 = virtualinvoke r1.<java.lang.ConditionalSpecialCasing$Entry: int getCodePoint()>();
        specialinvoke $r58.<java.lang.Integer: void <init>(int)>($i2);
        r2 = $r58;
        $r59 = <java.lang.ConditionalSpecialCasing: java.util.Hashtable entryTable>;
        $r60 = virtualinvoke $r59.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);
        r3 = (java.util.HashSet) $r60;
        if r3 != null goto label1;

        $r61 = new java.util.HashSet;
        specialinvoke $r61.<java.util.HashSet: void <init>()>();
        r3 = $r61;

     label1:
        virtualinvoke r3.<java.util.HashSet: boolean add(java.lang.Object)>(r1);
        $r62 = <java.lang.ConditionalSpecialCasing: java.util.Hashtable entryTable>;
        virtualinvoke $r62.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);
        i0 = i0 + 1;
        goto label0;

     label2:
        return;
    }
}
