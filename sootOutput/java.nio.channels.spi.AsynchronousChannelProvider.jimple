public abstract class java.nio.channels.spi.AsynchronousChannelProvider extends java.lang.Object
{

    private static java.lang.Void checkPermission()
    {
        java.lang.SecurityManager r0;
        java.lang.RuntimePermission $r1;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r0 == null goto label0;

        $r1 = new java.lang.RuntimePermission;
        specialinvoke $r1.<java.lang.RuntimePermission: void <init>(java.lang.String)>("asynchronousChannelProvider");
        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r1);

     label0:
        return null;
    }

    private void <init>(java.lang.Void)
    {
        java.nio.channels.spi.AsynchronousChannelProvider r0;
        java.lang.Void r1;

        r0 := @this: java.nio.channels.spi.AsynchronousChannelProvider;
        r1 := @parameter0: java.lang.Void;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    protected void <init>()
    {
        java.nio.channels.spi.AsynchronousChannelProvider r0;
        java.lang.Void $r1;

        r0 := @this: java.nio.channels.spi.AsynchronousChannelProvider;
        $r1 = staticinvoke <java.nio.channels.spi.AsynchronousChannelProvider: java.lang.Void checkPermission()>();
        specialinvoke r0.<java.nio.channels.spi.AsynchronousChannelProvider: void <init>(java.lang.Void)>($r1);
        return;
    }

    public static java.nio.channels.spi.AsynchronousChannelProvider provider()
    {
        java.nio.channels.spi.AsynchronousChannelProvider $r0;

        $r0 = <java.nio.channels.spi.AsynchronousChannelProvider$ProviderHolder: java.nio.channels.spi.AsynchronousChannelProvider provider>;
        return $r0;
    }

    public abstract java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(int, java.util.concurrent.ThreadFactory) throws java.io.IOException;

    public abstract java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(java.util.concurrent.ExecutorService, int) throws java.io.IOException;

    public abstract java.nio.channels.AsynchronousServerSocketChannel openAsynchronousServerSocketChannel(java.nio.channels.AsynchronousChannelGroup) throws java.io.IOException;

    public abstract java.nio.channels.AsynchronousSocketChannel openAsynchronousSocketChannel(java.nio.channels.AsynchronousChannelGroup) throws java.io.IOException;
}
