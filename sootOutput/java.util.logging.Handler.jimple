public abstract class java.util.logging.Handler extends java.lang.Object
{
    private static final int offValue;
    private java.util.logging.LogManager manager;
    private java.util.logging.Filter filter;
    private java.util.logging.Formatter formatter;
    private java.util.logging.Level logLevel;
    private java.util.logging.ErrorManager errorManager;
    private java.lang.String encoding;
    boolean sealed;

    protected void <init>()
    {
        java.util.logging.Handler r0;
        java.util.logging.LogManager $r1;
        java.util.logging.Level $r2;
        java.util.logging.ErrorManager $r3;

        r0 := @this: java.util.logging.Handler;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();
        r0.<java.util.logging.Handler: java.util.logging.LogManager manager> = $r1;
        $r2 = <java.util.logging.Level: java.util.logging.Level ALL>;
        r0.<java.util.logging.Handler: java.util.logging.Level logLevel> = $r2;
        $r3 = new java.util.logging.ErrorManager;
        specialinvoke $r3.<java.util.logging.ErrorManager: void <init>()>();
        r0.<java.util.logging.Handler: java.util.logging.ErrorManager errorManager> = $r3;
        r0.<java.util.logging.Handler: boolean sealed> = 1;
        return;
    }

    public abstract void publish(java.util.logging.LogRecord);

    public abstract void flush();

    public abstract void close() throws java.lang.SecurityException;

    public void setFormatter(java.util.logging.Formatter) throws java.lang.SecurityException
    {
        java.util.logging.Handler r0;
        java.util.logging.Formatter r1;

        r0 := @this: java.util.logging.Handler;
        r1 := @parameter0: java.util.logging.Formatter;
        virtualinvoke r0.<java.util.logging.Handler: void checkPermission()>();
        virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        r0.<java.util.logging.Handler: java.util.logging.Formatter formatter> = r1;
        return;
    }

    public java.util.logging.Formatter getFormatter()
    {
        java.util.logging.Handler r0;
        java.util.logging.Formatter $r1;

        r0 := @this: java.util.logging.Handler;
        $r1 = r0.<java.util.logging.Handler: java.util.logging.Formatter formatter>;
        return $r1;
    }

    public void setEncoding(java.lang.String) throws java.lang.SecurityException, java.io.UnsupportedEncodingException
    {
        java.util.logging.Handler r0;
        java.lang.String r1;
        java.nio.charset.IllegalCharsetNameException r2, $r4;
        boolean $z0;
        java.io.UnsupportedEncodingException $r3, $r5;

        r0 := @this: java.util.logging.Handler;
        r1 := @parameter0: java.lang.String;
        virtualinvoke r0.<java.util.logging.Handler: void checkPermission()>();
        if r1 == null goto label3;

     label0:
        $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>(r1);
        if $z0 != 0 goto label1;

        $r3 = new java.io.UnsupportedEncodingException;
        specialinvoke $r3.<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>(r1);
        throw $r3;

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        $r5 = new java.io.UnsupportedEncodingException;
        specialinvoke $r5.<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>(r1);
        throw $r5;

     label3:
        r0.<java.util.logging.Handler: java.lang.String encoding> = r1;
        return;

        catch java.nio.charset.IllegalCharsetNameException from label0 to label1 with label2;
    }

    public java.lang.String getEncoding()
    {
        java.util.logging.Handler r0;
        java.lang.String $r1;

        r0 := @this: java.util.logging.Handler;
        $r1 = r0.<java.util.logging.Handler: java.lang.String encoding>;
        return $r1;
    }

    public void setFilter(java.util.logging.Filter) throws java.lang.SecurityException
    {
        java.util.logging.Handler r0;
        java.util.logging.Filter r1;

        r0 := @this: java.util.logging.Handler;
        r1 := @parameter0: java.util.logging.Filter;
        virtualinvoke r0.<java.util.logging.Handler: void checkPermission()>();
        r0.<java.util.logging.Handler: java.util.logging.Filter filter> = r1;
        return;
    }

    public java.util.logging.Filter getFilter()
    {
        java.util.logging.Handler r0;
        java.util.logging.Filter $r1;

        r0 := @this: java.util.logging.Handler;
        $r1 = r0.<java.util.logging.Handler: java.util.logging.Filter filter>;
        return $r1;
    }

    public void setErrorManager(java.util.logging.ErrorManager)
    {
        java.util.logging.Handler r0;
        java.util.logging.ErrorManager r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.logging.Handler;
        r1 := @parameter0: java.util.logging.ErrorManager;
        virtualinvoke r0.<java.util.logging.Handler: void checkPermission()>();
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        r0.<java.util.logging.Handler: java.util.logging.ErrorManager errorManager> = r1;
        return;
    }

    public java.util.logging.ErrorManager getErrorManager()
    {
        java.util.logging.Handler r0;
        java.util.logging.ErrorManager $r1;

        r0 := @this: java.util.logging.Handler;
        virtualinvoke r0.<java.util.logging.Handler: void checkPermission()>();
        $r1 = r0.<java.util.logging.Handler: java.util.logging.ErrorManager errorManager>;
        return $r1;
    }

    protected void reportError(java.lang.String, java.lang.Exception, int)
    {
        java.util.logging.Handler r0;
        java.lang.String r1;
        java.lang.Exception r2, r3, $r5;
        int i0;
        java.util.logging.ErrorManager $r4;
        java.io.PrintStream $r6;

        r0 := @this: java.util.logging.Handler;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Exception;
        i0 := @parameter2: int;

     label0:
        $r4 = r0.<java.util.logging.Handler: java.util.logging.ErrorManager errorManager>;
        virtualinvoke $r4.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>(r1, r2, i0);

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r3 = $r5;
        $r6 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("Handler.reportError caught:");
        virtualinvoke r3.<java.lang.Exception: void printStackTrace()>();

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public synchronized void setLevel(java.util.logging.Level) throws java.lang.SecurityException
    {
        java.util.logging.Handler r0;
        java.util.logging.Level r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.logging.Handler;
        r1 := @parameter0: java.util.logging.Level;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        virtualinvoke r0.<java.util.logging.Handler: void checkPermission()>();
        r0.<java.util.logging.Handler: java.util.logging.Level logLevel> = r1;
        return;
    }

    public synchronized java.util.logging.Level getLevel()
    {
        java.util.logging.Handler r0;
        java.util.logging.Level $r1;

        r0 := @this: java.util.logging.Handler;
        $r1 = r0.<java.util.logging.Handler: java.util.logging.Level logLevel>;
        return $r1;
    }

    public boolean isLoggable(java.util.logging.LogRecord)
    {
        java.util.logging.Handler r0;
        java.util.logging.LogRecord r1;
        int i0, $i1, $i2;
        java.util.logging.Filter r2;
        java.util.logging.Level $r3, $r4;
        boolean $z0;

        r0 := @this: java.util.logging.Handler;
        r1 := @parameter0: java.util.logging.LogRecord;
        $r3 = virtualinvoke r0.<java.util.logging.Handler: java.util.logging.Level getLevel()>();
        i0 = virtualinvoke $r3.<java.util.logging.Level: int intValue()>();
        $r4 = virtualinvoke r1.<java.util.logging.LogRecord: java.util.logging.Level getLevel()>();
        $i1 = virtualinvoke $r4.<java.util.logging.Level: int intValue()>();
        if $i1 < i0 goto label0;

        $i2 = <java.util.logging.Handler: int offValue>;
        if i0 != $i2 goto label1;

     label0:
        return 0;

     label1:
        r2 = virtualinvoke r0.<java.util.logging.Handler: java.util.logging.Filter getFilter()>();
        if r2 != null goto label2;

        return 1;

     label2:
        $z0 = interfaceinvoke r2.<java.util.logging.Filter: boolean isLoggable(java.util.logging.LogRecord)>(r1);
        return $z0;
    }

    void checkPermission() throws java.lang.SecurityException
    {
        java.util.logging.Handler r0;
        boolean $z0;
        java.util.logging.LogManager $r1;

        r0 := @this: java.util.logging.Handler;
        $z0 = r0.<java.util.logging.Handler: boolean sealed>;
        if $z0 == 0 goto label0;

        $r1 = r0.<java.util.logging.Handler: java.util.logging.LogManager manager>;
        virtualinvoke $r1.<java.util.logging.LogManager: void checkPermission()>();

     label0:
        return;
    }

    static void <clinit>()
    {
        java.util.logging.Level $r0;
        int $i0;

        $r0 = <java.util.logging.Level: java.util.logging.Level OFF>;
        $i0 = virtualinvoke $r0.<java.util.logging.Level: int intValue()>();
        <java.util.logging.Handler: int offValue> = $i0;
        return;
    }
}
