public class sun.util.calendar.ZoneInfo extends java.util.TimeZone
{
    private static final int UTC_TIME;
    private static final int STANDARD_TIME;
    private static final int WALL_TIME;
    private static final long OFFSET_MASK;
    private static final long DST_MASK;
    private static final int DST_NSHIFT;
    private static final long ABBR_MASK;
    private static final int TRANSITION_NSHIFT;
    static final boolean USE_OLDMAPPING;
    static final java.lang.String[] conflictingIDs;
    private static final sun.util.calendar.CalendarSystem gcal;
    private int rawOffset;
    private int rawOffsetDiff;
    private int checksum;
    private int dstSavings;
    private long[] transitions;
    private int[] offsets;
    private int[] simpleTimeZoneParams;
    private boolean willGMTOffsetChange;
    private transient boolean dirty;
    private static final long serialVersionUID;
    private transient java.util.SimpleTimeZone lastRule;
    private static java.lang.ref.SoftReference aliasTable;

    public void <init>()
    {
        sun.util.calendar.ZoneInfo r0;

        r0 := @this: sun.util.calendar.ZoneInfo;
        specialinvoke r0.<java.util.TimeZone: void <init>()>();
        r0.<sun.util.calendar.ZoneInfo: int rawOffsetDiff> = 0;
        r0.<sun.util.calendar.ZoneInfo: boolean willGMTOffsetChange> = 0;
        r0.<sun.util.calendar.ZoneInfo: boolean dirty> = 0;
        return;
    }

    public void <init>(java.lang.String, int)
    {
        sun.util.calendar.ZoneInfo r0;
        java.lang.String r1;
        int i0;

        r0 := @this: sun.util.calendar.ZoneInfo;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        specialinvoke r0.<sun.util.calendar.ZoneInfo: void <init>(java.lang.String,int,int,int,long[],int[],int[],boolean)>(r1, i0, 0, 0, null, null, null, 0);
        return;
    }

    void <init>(java.lang.String, int, int, int, long[], int[], int[], boolean)
    {
        sun.util.calendar.ZoneInfo r0;
        java.lang.String r1;
        int i0, i1, i2;
        long[] r2;
        int[] r3, r4;
        boolean z0;

        r0 := @this: sun.util.calendar.ZoneInfo;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        r2 := @parameter4: long[];
        r3 := @parameter5: int[];
        r4 := @parameter6: int[];
        z0 := @parameter7: boolean;
        specialinvoke r0.<java.util.TimeZone: void <init>()>();
        r0.<sun.util.calendar.ZoneInfo: int rawOffsetDiff> = 0;
        r0.<sun.util.calendar.ZoneInfo: boolean willGMTOffsetChange> = 0;
        r0.<sun.util.calendar.ZoneInfo: boolean dirty> = 0;
        virtualinvoke r0.<sun.util.calendar.ZoneInfo: void setID(java.lang.String)>(r1);
        r0.<sun.util.calendar.ZoneInfo: int rawOffset> = i0;
        r0.<sun.util.calendar.ZoneInfo: int dstSavings> = i1;
        r0.<sun.util.calendar.ZoneInfo: int checksum> = i2;
        r0.<sun.util.calendar.ZoneInfo: long[] transitions> = r2;
        r0.<sun.util.calendar.ZoneInfo: int[] offsets> = r3;
        r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams> = r4;
        r0.<sun.util.calendar.ZoneInfo: boolean willGMTOffsetChange> = z0;
        return;
    }

    public int getOffset(long)
    {
        sun.util.calendar.ZoneInfo r0;
        long l0;
        int $i1;

        r0 := @this: sun.util.calendar.ZoneInfo;
        l0 := @parameter0: long;
        $i1 = specialinvoke r0.<sun.util.calendar.ZoneInfo: int getOffsets(long,int[],int)>(l0, null, 0);
        return $i1;
    }

    public int getOffsets(long, int[])
    {
        sun.util.calendar.ZoneInfo r0;
        long l0;
        int[] r1;
        int $i1;

        r0 := @this: sun.util.calendar.ZoneInfo;
        l0 := @parameter0: long;
        r1 := @parameter1: int[];
        $i1 = specialinvoke r0.<sun.util.calendar.ZoneInfo: int getOffsets(long,int[],int)>(l0, r1, 0);
        return $i1;
    }

    public int getOffsetsByStandard(long, int[])
    {
        sun.util.calendar.ZoneInfo r0;
        long l0;
        int[] r1;
        int $i1;

        r0 := @this: sun.util.calendar.ZoneInfo;
        l0 := @parameter0: long;
        r1 := @parameter1: int[];
        $i1 = specialinvoke r0.<sun.util.calendar.ZoneInfo: int getOffsets(long,int[],int)>(l0, r1, 1);
        return $i1;
    }

    public int getOffsetsByWall(long, int[])
    {
        sun.util.calendar.ZoneInfo r0;
        long l0;
        int[] r1;
        int $i1;

        r0 := @this: sun.util.calendar.ZoneInfo;
        l0 := @parameter0: long;
        r1 := @parameter1: int[];
        $i1 = specialinvoke r0.<sun.util.calendar.ZoneInfo: int getOffsets(long,int[],int)>(l0, r1, 2);
        return $i1;
    }

    private int getOffsets(long, int[], int)
    {
        sun.util.calendar.ZoneInfo r0;
        long l0, $l9, l10, l13, $l14, $l18, $l19, l22, $l24, $l28, $l29;
        int[] r1, $r5, $r6;
        int i1, i2, i3, i4, i5, i6, i7, $i8, i11, $i12, $i15, $i16, $i17, $i20, $i21, $i23, $i25, $i26, i27, $i30, $i31, i32;
        long[] $r2, $r3, $r4;
        java.util.SimpleTimeZone r7;

        r0 := @this: sun.util.calendar.ZoneInfo;
        l0 := @parameter0: long;
        r1 := @parameter1: int[];
        i1 := @parameter2: int;
        $r2 = r0.<sun.util.calendar.ZoneInfo: long[] transitions>;
        if $r2 != null goto label1;

        i2 = specialinvoke r0.<sun.util.calendar.ZoneInfo: int getLastRawOffset()>();
        if r1 == null goto label0;

        r1[0] = i2;
        r1[1] = 0;

     label0:
        return i2;

     label1:
        $i8 = r0.<sun.util.calendar.ZoneInfo: int rawOffsetDiff>;
        $l9 = (long) $i8;
        l10 = l0 - $l9;
        i11 = specialinvoke r0.<sun.util.calendar.ZoneInfo: int getTransitionIndex(long,int)>(l10, i1);
        if i11 >= 0 goto label3;

        i3 = specialinvoke r0.<sun.util.calendar.ZoneInfo: int getLastRawOffset()>();
        if r1 == null goto label2;

        r1[0] = i3;
        r1[1] = 0;

     label2:
        return i3;

     label3:
        $r3 = r0.<sun.util.calendar.ZoneInfo: long[] transitions>;
        $i12 = lengthof $r3;
        if i11 >= $i12 goto label7;

        $r4 = r0.<sun.util.calendar.ZoneInfo: long[] transitions>;
        l13 = $r4[i11];
        $r5 = r0.<sun.util.calendar.ZoneInfo: int[] offsets>;
        $l14 = l13 & 15L;
        $i15 = (int) $l14;
        $i16 = $r5[$i15];
        $i17 = r0.<sun.util.calendar.ZoneInfo: int rawOffsetDiff>;
        i4 = $i16 + $i17;
        if r1 == null goto label6;

        $l18 = l13 >>> 4;
        $l19 = $l18 & 15L;
        i5 = (int) $l19;
        if i5 != 0 goto label4;

        $i20 = 0;
        goto label5;

     label4:
        $r6 = r0.<sun.util.calendar.ZoneInfo: int[] offsets>;
        $i20 = $r6[i5];

     label5:
        i6 = $i20;
        $i21 = i4 - i6;
        r1[0] = $i21;
        r1[1] = i6;

     label6:
        return i4;

     label7:
        r7 = specialinvoke r0.<sun.util.calendar.ZoneInfo: java.util.SimpleTimeZone getLastRule()>();
        if r7 == null goto label11;

        i7 = virtualinvoke r7.<java.util.SimpleTimeZone: int getRawOffset()>();
        l22 = l10;
        if i1 == 0 goto label8;

        $i23 = r0.<sun.util.calendar.ZoneInfo: int rawOffset>;
        $l24 = (long) $i23;
        l22 = l22 - $l24;

     label8:
        $i25 = virtualinvoke r7.<java.util.SimpleTimeZone: int getOffset(long)>(l22);
        $i26 = r0.<sun.util.calendar.ZoneInfo: int rawOffset>;
        i27 = $i25 - $i26;
        if i27 <= 0 goto label9;

        $l28 = (long) i27;
        $l29 = l22 - $l28;
        $i30 = virtualinvoke r7.<java.util.SimpleTimeZone: int getOffset(long)>($l29);
        if $i30 != i7 goto label9;

        i27 = 0;

     label9:
        if r1 == null goto label10;

        r1[0] = i7;
        r1[1] = i27;

     label10:
        $i31 = i7 + i27;
        return $i31;

     label11:
        i32 = specialinvoke r0.<sun.util.calendar.ZoneInfo: int getLastRawOffset()>();
        if r1 == null goto label12;

        r1[0] = i32;
        r1[1] = 0;

     label12:
        return i32;
    }

    private final int getTransitionIndex(long, int)
    {
        sun.util.calendar.ZoneInfo r0;
        long l0, l5, l6, $l10, $l13, $l14, $l15, $l17;
        int i1, i2, i3, i4, i7, $i8, $i9, $i11, $i12, $i16, $i20, $i21;
        long[] $r1, $r2, $r5;
        int[] $r3, $r4;
        byte $b18, $b19;

        r0 := @this: sun.util.calendar.ZoneInfo;
        l0 := @parameter0: long;
        i1 := @parameter1: int;
        i2 = 0;
        $r1 = r0.<sun.util.calendar.ZoneInfo: long[] transitions>;
        $i8 = lengthof $r1;
        i3 = $i8 - 1;

     label0:
        if i2 > i3 goto label6;

        $i9 = i2 + i3;
        i4 = $i9 / 2;
        $r2 = r0.<sun.util.calendar.ZoneInfo: long[] transitions>;
        l5 = $r2[i4];
        l6 = l5 >> 12;
        if i1 == 0 goto label1;

        $r3 = r0.<sun.util.calendar.ZoneInfo: int[] offsets>;
        $l10 = l5 & 15L;
        $i11 = (int) $l10;
        $i12 = $r3[$i11];
        $l13 = (long) $i12;
        l6 = l6 + $l13;

     label1:
        if i1 != 1 goto label2;

        $l14 = l5 >>> 4;
        $l15 = $l14 & 15L;
        i7 = (int) $l15;
        if i7 == 0 goto label2;

        $r4 = r0.<sun.util.calendar.ZoneInfo: int[] offsets>;
        $i16 = $r4[i7];
        $l17 = (long) $i16;
        l6 = l6 - $l17;

     label2:
        $b18 = l6 cmp l0;
        if $b18 >= 0 goto label3;

        i2 = i4 + 1;
        goto label5;

     label3:
        $b19 = l6 cmp l0;
        if $b19 <= 0 goto label4;

        i3 = i4 - 1;
        goto label5;

     label4:
        return i4;

     label5:
        goto label0;

     label6:
        $r5 = r0.<sun.util.calendar.ZoneInfo: long[] transitions>;
        $i20 = lengthof $r5;
        if i2 < $i20 goto label7;

        return i2;

     label7:
        $i21 = i2 - 1;
        return $i21;
    }

    public int getOffset(int, int, int, int, int, int)
    {
        sun.util.calendar.ZoneInfo r0;
        int i0, i1, i2, i3, i4, i5, $i7, $i8, $i11, $i14;
        sun.util.calendar.CalendarDate r1;
        long l6, $l9, $l10, $l12, l13;
        java.lang.IllegalArgumentException $r2, $r3, $r7, $r8;
        sun.util.calendar.CalendarSystem $r4, $r6, $r10;
        boolean $z0;
        long[] $r9;

        r0 := @this: sun.util.calendar.ZoneInfo;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        i4 := @parameter4: int;
        i5 := @parameter5: int;
        if i5 < 0 goto label0;

        if i5 < 86400000 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r2;

     label1:
        if i0 != 0 goto label2;

        i1 = 1 - i1;
        goto label3;

     label2:
        if i0 == 1 goto label3;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r3;

     label3:
        $r4 = <sun.util.calendar.ZoneInfo: sun.util.calendar.CalendarSystem gcal>;
        r1 = virtualinvoke $r4.<sun.util.calendar.CalendarSystem: sun.util.calendar.CalendarDate newCalendarDate(java.util.TimeZone)>(null);
        $i7 = i2 + 1;
        virtualinvoke r1.<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setDate(int,int,int)>(i1, $i7, i3);
        $r6 = <sun.util.calendar.ZoneInfo: sun.util.calendar.CalendarSystem gcal>;
        $z0 = virtualinvoke $r6.<sun.util.calendar.CalendarSystem: boolean validate(sun.util.calendar.CalendarDate)>(r1);
        if $z0 != 0 goto label4;

        $r7 = new java.lang.IllegalArgumentException;
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r7;

     label4:
        if i4 < 1 goto label5;

        if i4 <= 7 goto label6;

     label5:
        $r8 = new java.lang.IllegalArgumentException;
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r8;

     label6:
        $r9 = r0.<sun.util.calendar.ZoneInfo: long[] transitions>;
        if $r9 != null goto label7;

        $i8 = specialinvoke r0.<sun.util.calendar.ZoneInfo: int getLastRawOffset()>();
        return $i8;

     label7:
        $r10 = <sun.util.calendar.ZoneInfo: sun.util.calendar.CalendarSystem gcal>;
        $l9 = virtualinvoke $r10.<sun.util.calendar.CalendarSystem: long getTime(sun.util.calendar.CalendarDate)>(r1);
        $l10 = (long) i5;
        l6 = $l9 + $l10;
        $i11 = r0.<sun.util.calendar.ZoneInfo: int rawOffset>;
        $l12 = (long) $i11;
        l13 = l6 - $l12;
        $i14 = specialinvoke r0.<sun.util.calendar.ZoneInfo: int getOffsets(long,int[],int)>(l13, null, 0);
        return $i14;
    }

    public synchronized void setRawOffset(int)
    {
        sun.util.calendar.ZoneInfo r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.SimpleTimeZone $r1, $r2;

        r0 := @this: sun.util.calendar.ZoneInfo;
        i0 := @parameter0: int;
        $i1 = r0.<sun.util.calendar.ZoneInfo: int rawOffset>;
        $i2 = r0.<sun.util.calendar.ZoneInfo: int rawOffsetDiff>;
        $i3 = $i1 + $i2;
        if i0 != $i3 goto label0;

        return;

     label0:
        $i4 = r0.<sun.util.calendar.ZoneInfo: int rawOffset>;
        $i5 = i0 - $i4;
        r0.<sun.util.calendar.ZoneInfo: int rawOffsetDiff> = $i5;
        $r1 = r0.<sun.util.calendar.ZoneInfo: java.util.SimpleTimeZone lastRule>;
        if $r1 == null goto label1;

        $r2 = r0.<sun.util.calendar.ZoneInfo: java.util.SimpleTimeZone lastRule>;
        virtualinvoke $r2.<java.util.SimpleTimeZone: void setRawOffset(int)>(i0);

     label1:
        r0.<sun.util.calendar.ZoneInfo: boolean dirty> = 1;
        return;
    }

    public int getRawOffset()
    {
        sun.util.calendar.ZoneInfo r0;
        int[] r1;
        boolean $z0;
        int $i0, $i1, $i2, $i5;
        long $l3;

        r0 := @this: sun.util.calendar.ZoneInfo;
        $z0 = r0.<sun.util.calendar.ZoneInfo: boolean willGMTOffsetChange>;
        if $z0 != 0 goto label0;

        $i0 = r0.<sun.util.calendar.ZoneInfo: int rawOffset>;
        $i1 = r0.<sun.util.calendar.ZoneInfo: int rawOffsetDiff>;
        $i2 = $i0 + $i1;
        return $i2;

     label0:
        r1 = newarray (int)[2];
        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        specialinvoke r0.<sun.util.calendar.ZoneInfo: int getOffsets(long,int[],int)>($l3, r1, 0);
        $i5 = r1[0];
        return $i5;
    }

    public boolean isDirty()
    {
        sun.util.calendar.ZoneInfo r0;
        boolean $z0;

        r0 := @this: sun.util.calendar.ZoneInfo;
        $z0 = r0.<sun.util.calendar.ZoneInfo: boolean dirty>;
        return $z0;
    }

    private int getLastRawOffset()
    {
        sun.util.calendar.ZoneInfo r0;
        int $i0, $i1, $i2;

        r0 := @this: sun.util.calendar.ZoneInfo;
        $i0 = r0.<sun.util.calendar.ZoneInfo: int rawOffset>;
        $i1 = r0.<sun.util.calendar.ZoneInfo: int rawOffsetDiff>;
        $i2 = $i0 + $i1;
        return $i2;
    }

    public boolean useDaylightTime()
    {
        sun.util.calendar.ZoneInfo r0;
        int[] $r1;
        boolean $z0;

        r0 := @this: sun.util.calendar.ZoneInfo;
        $r1 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        if $r1 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean observesDaylightTime()
    {
        sun.util.calendar.ZoneInfo r0;
        long l0, $l3, $l5, $l7, $l8;
        int i1, i2, $i4, $i6;
        int[] $r1;
        long[] $r2, $r3, $r4;
        byte $b9;

        r0 := @this: sun.util.calendar.ZoneInfo;
        $r1 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        if $r1 == null goto label0;

        return 1;

     label0:
        $r2 = r0.<sun.util.calendar.ZoneInfo: long[] transitions>;
        if $r2 != null goto label1;

        return 0;

     label1:
        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $i4 = r0.<sun.util.calendar.ZoneInfo: int rawOffsetDiff>;
        $l5 = (long) $i4;
        l0 = $l3 - $l5;
        i1 = specialinvoke r0.<sun.util.calendar.ZoneInfo: int getTransitionIndex(long,int)>(l0, 0);
        if i1 >= 0 goto label2;

        return 0;

     label2:
        i2 = i1;

     label3:
        $r3 = r0.<sun.util.calendar.ZoneInfo: long[] transitions>;
        $i6 = lengthof $r3;
        if i2 >= $i6 goto label5;

        $r4 = r0.<sun.util.calendar.ZoneInfo: long[] transitions>;
        $l7 = $r4[i2];
        $l8 = $l7 & 240L;
        $b9 = $l8 cmp 0L;
        if $b9 == 0 goto label4;

        return 1;

     label4:
        i2 = i2 + 1;
        goto label3;

     label5:
        return 0;
    }

    public boolean inDaylightTime(java.util.Date)
    {
        sun.util.calendar.ZoneInfo r0;
        java.util.Date r1;
        long l0, $l2, $l4, $l6, $l7;
        int i1, $i3, $i5;
        java.util.SimpleTimeZone r2;
        java.lang.NullPointerException $r3;
        long[] $r4, $r5, $r6;
        byte $b8;
        boolean $z0, $z1;

        r0 := @this: sun.util.calendar.ZoneInfo;
        r1 := @parameter0: java.util.Date;
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        $r4 = r0.<sun.util.calendar.ZoneInfo: long[] transitions>;
        if $r4 != null goto label1;

        return 0;

     label1:
        $l2 = virtualinvoke r1.<java.util.Date: long getTime()>();
        $i3 = r0.<sun.util.calendar.ZoneInfo: int rawOffsetDiff>;
        $l4 = (long) $i3;
        l0 = $l2 - $l4;
        i1 = specialinvoke r0.<sun.util.calendar.ZoneInfo: int getTransitionIndex(long,int)>(l0, 0);
        if i1 >= 0 goto label2;

        return 0;

     label2:
        $r5 = r0.<sun.util.calendar.ZoneInfo: long[] transitions>;
        $i5 = lengthof $r5;
        if i1 >= $i5 goto label5;

        $r6 = r0.<sun.util.calendar.ZoneInfo: long[] transitions>;
        $l6 = $r6[i1];
        $l7 = $l6 & 240L;
        $b8 = $l7 cmp 0L;
        if $b8 == 0 goto label3;

        $z0 = 1;
        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;

     label5:
        r2 = specialinvoke r0.<sun.util.calendar.ZoneInfo: java.util.SimpleTimeZone getLastRule()>();
        if r2 == null goto label6;

        $z1 = virtualinvoke r2.<java.util.SimpleTimeZone: boolean inDaylightTime(java.util.Date)>(r1);
        return $z1;

     label6:
        return 0;
    }

    public int getDSTSavings()
    {
        sun.util.calendar.ZoneInfo r0;
        int $i0;

        r0 := @this: sun.util.calendar.ZoneInfo;
        $i0 = r0.<sun.util.calendar.ZoneInfo: int dstSavings>;
        return $i0;
    }

    public java.lang.String toString()
    {
        sun.util.calendar.ZoneInfo r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r18, $r19, $r22, $r23;
        java.lang.Class $r2;
        java.lang.String $r3, $r6, $r24;
        int $i0, $i1, $i2;
        boolean $z0;
        long[] $r16, $r17;
        java.util.SimpleTimeZone $r20, $r21;

        r0 := @this: sun.util.calendar.ZoneInfo;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[id=\"");
        $r6 = virtualinvoke r0.<sun.util.calendar.ZoneInfo: java.lang.String getID()>();
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",offset=");
        $i0 = specialinvoke r0.<sun.util.calendar.ZoneInfo: int getLastRawOffset()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",dstSavings=");
        $i1 = r0.<sun.util.calendar.ZoneInfo: int dstSavings>;
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",useDaylight=");
        $z0 = virtualinvoke r0.<sun.util.calendar.ZoneInfo: boolean useDaylightTime()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",transitions=");
        $r16 = r0.<sun.util.calendar.ZoneInfo: long[] transitions>;
        if $r16 == null goto label0;

        $r17 = r0.<sun.util.calendar.ZoneInfo: long[] transitions>;
        $i2 = lengthof $r17;
        goto label1;

     label0:
        $i2 = 0;

     label1:
        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",lastRule=");
        $r20 = r0.<sun.util.calendar.ZoneInfo: java.util.SimpleTimeZone lastRule>;
        if $r20 != null goto label2;

        $r21 = virtualinvoke r0.<sun.util.calendar.ZoneInfo: java.util.SimpleTimeZone getLastRuleInstance()>();
        goto label3;

     label2:
        $r21 = r0.<sun.util.calendar.ZoneInfo: java.util.SimpleTimeZone lastRule>;

     label3:
        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r24;
    }

    public static java.lang.String[] getAvailableIDs()
    {
        java.util.List r0, r1;
        java.util.ArrayList r2, $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.String[] r4, $r6;
        java.lang.Object[] $r5;

        r0 = staticinvoke <sun.util.calendar.ZoneInfoFile: java.util.List getZoneIDs()>();
        r1 = staticinvoke <sun.util.calendar.ZoneInfoFile: java.util.List getExcludedZones()>();
        if r1 == null goto label0;

        $r3 = new java.util.ArrayList;
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();
        $i2 = $i0 + $i1;
        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i2);
        r2 = $r3;
        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>(r0);
        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);
        r0 = r2;

     label0:
        $i3 = interfaceinvoke r0.<java.util.List: int size()>();
        r4 = newarray (java.lang.String)[$i3];
        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r4);
        $r6 = (java.lang.String[]) $r5;
        return $r6;
    }

    public static java.lang.String[] getAvailableIDs(int)
    {
        int i0, i1, i2, $i3, $i4, $i5, i7, $i8, $i10, $i11, $i12;
        java.util.ArrayList $r0, r1;
        java.util.List r2, r9;
        int[] r3;
        byte[] r4;
        java.util.TimeZone r5;
        java.lang.String[] r6;
        byte $b6, $b9;
        java.lang.Object $r7, $r8, $r11;
        java.util.Iterator r10;
        boolean $z2;
        java.lang.String r12;

        i0 := @parameter0: int;
        $r0 = new java.util.ArrayList;
        specialinvoke $r0.<java.util.ArrayList: void <init>()>();
        r1 = $r0;
        r2 = staticinvoke <sun.util.calendar.ZoneInfoFile: java.util.List getZoneIDs()>();
        r3 = staticinvoke <sun.util.calendar.ZoneInfoFile: int[] getRawOffsets()>();
        i1 = 0;

     label0:
        $i3 = lengthof r3;
        if i1 >= $i3 goto label5;

        $i4 = r3[i1];
        if $i4 != i0 goto label4;

        r4 = staticinvoke <sun.util.calendar.ZoneInfoFile: byte[] getRawOffsetIndices()>();
        i2 = 0;

     label1:
        $i5 = lengthof r4;
        if i2 >= $i5 goto label4;

        $b6 = r4[i2];
        if $b6 != i1 goto label3;

        i7 = i2 + 1;
        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i2);
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label2:
        $i8 = lengthof r4;
        if i7 >= $i8 goto label5;

        $b9 = r4[i7];
        if $b9 != i1 goto label5;

        $i10 = i7;
        i7 = i7 + 1;
        $r8 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i10);
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r8);
        goto label2;

     label3:
        i2 = i2 + 1;
        goto label1;

     label4:
        i1 = i1 + 1;
        goto label0;

     label5:
        r9 = staticinvoke <sun.util.calendar.ZoneInfoFile: java.util.List getExcludedZones()>();
        if r9 == null goto label8;

        r10 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label8;

        $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();
        r12 = (java.lang.String) $r11;
        r5 = staticinvoke <sun.util.calendar.ZoneInfo: java.util.TimeZone getTimeZone(java.lang.String)>(r12);
        if r5 == null goto label7;

        $i11 = virtualinvoke r5.<java.util.TimeZone: int getRawOffset()>();
        if $i11 != i0 goto label7;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r12);

     label7:
        goto label6;

     label8:
        $i12 = interfaceinvoke r1.<java.util.List: int size()>();
        r6 = newarray (java.lang.String)[$i12];
        interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r6);
        return r6;
    }

    public static java.util.TimeZone getTimeZone(java.lang.String)
    {
        java.lang.String r0, r1, r2, r4, $r9;
        java.util.Map r3, $r5;
        boolean $z0;
        java.lang.Object $r6, $r8, $r10;
        sun.util.calendar.ZoneInfo r7;
        java.lang.Exception $r11, r12;

        r0 := @parameter0: java.lang.String;
        r1 = null;
        $z0 = <sun.util.calendar.ZoneInfo: boolean USE_OLDMAPPING>;
        if $z0 == 0 goto label0;

        $r5 = <sun.util.calendar.TzIDOldMapping: java.util.Map MAP>;
        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);
        r2 = (java.lang.String) $r6;
        if r2 == null goto label0;

        r1 = r0;
        r0 = r2;

     label0:
        r7 = staticinvoke <sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo getZoneInfo(java.lang.String)>(r0);
        if r7 != null goto label5;

     label1:
        r3 = staticinvoke <sun.util.calendar.ZoneInfo: java.util.Map getAliasTable()>();
        r4 = r0;

     label2:
        $r8 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);
        $r9 = (java.lang.String) $r8;
        r4 = $r9;
        if $r9 == null goto label3;

        r7 = staticinvoke <sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo getZoneInfo(java.lang.String)>(r4);
        if r7 == null goto label2;

        virtualinvoke r7.<sun.util.calendar.ZoneInfo: void setID(java.lang.String)>(r0);
        r7 = staticinvoke <sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo addToCache(java.lang.String,sun.util.calendar.ZoneInfo)>(r0, r7);
        $r10 = virtualinvoke r7.<sun.util.calendar.ZoneInfo: java.lang.Object clone()>();
        r7 = (sun.util.calendar.ZoneInfo) $r10;
        goto label3;

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;
        r12 = $r11;

     label5:
        if r1 == null goto label6;

        if r7 == null goto label6;

        virtualinvoke r7.<sun.util.calendar.ZoneInfo: void setID(java.lang.String)>(r1);

     label6:
        return r7;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    private synchronized java.util.SimpleTimeZone getLastRule()
    {
        sun.util.calendar.ZoneInfo r0;
        java.util.SimpleTimeZone $r1, $r2, $r3;

        r0 := @this: sun.util.calendar.ZoneInfo;
        $r1 = r0.<sun.util.calendar.ZoneInfo: java.util.SimpleTimeZone lastRule>;
        if $r1 != null goto label0;

        $r2 = virtualinvoke r0.<sun.util.calendar.ZoneInfo: java.util.SimpleTimeZone getLastRuleInstance()>();
        r0.<sun.util.calendar.ZoneInfo: java.util.SimpleTimeZone lastRule> = $r2;

     label0:
        $r3 = r0.<sun.util.calendar.ZoneInfo: java.util.SimpleTimeZone lastRule>;
        return $r3;
    }

    public java.util.SimpleTimeZone getLastRuleInstance()
    {
        sun.util.calendar.ZoneInfo r0;
        int[] $r1, $r2, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        java.util.SimpleTimeZone $r3, $r15;
        java.lang.String $r4, $r16;

        r0 := @this: sun.util.calendar.ZoneInfo;
        $r1 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        if $r1 != null goto label0;

        return null;

     label0:
        $r2 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i0 = lengthof $r2;
        if $i0 != 10 goto label1;

        $r3 = new java.util.SimpleTimeZone;
        $i1 = specialinvoke r0.<sun.util.calendar.ZoneInfo: int getLastRawOffset()>();
        $r4 = virtualinvoke r0.<sun.util.calendar.ZoneInfo: java.lang.String getID()>();
        $r5 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i2 = $r5[0];
        $r6 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i3 = $r6[1];
        $r7 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i4 = $r7[2];
        $r8 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i5 = $r8[3];
        $r9 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i6 = $r9[4];
        $r10 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i7 = $r10[5];
        $r11 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i8 = $r11[6];
        $r12 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i9 = $r12[7];
        $r13 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i10 = $r13[8];
        $r14 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i11 = $r14[9];
        $i12 = r0.<sun.util.calendar.ZoneInfo: int dstSavings>;
        specialinvoke $r3.<java.util.SimpleTimeZone: void <init>(int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)>($i1, $r4, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12);
        return $r3;

     label1:
        $r15 = new java.util.SimpleTimeZone;
        $i13 = specialinvoke r0.<sun.util.calendar.ZoneInfo: int getLastRawOffset()>();
        $r16 = virtualinvoke r0.<sun.util.calendar.ZoneInfo: java.lang.String getID()>();
        $r17 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i14 = $r17[0];
        $r18 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i15 = $r18[1];
        $r19 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i16 = $r19[2];
        $r20 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i17 = $r20[3];
        $r21 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i18 = $r21[4];
        $r22 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i19 = $r22[5];
        $r23 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i20 = $r23[6];
        $r24 = r0.<sun.util.calendar.ZoneInfo: int[] simpleTimeZoneParams>;
        $i21 = $r24[7];
        $i22 = r0.<sun.util.calendar.ZoneInfo: int dstSavings>;
        specialinvoke $r15.<java.util.SimpleTimeZone: void <init>(int,java.lang.String,int,int,int,int,int,int,int,int,int)>($i13, $r16, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22);
        return $r15;
    }

    public java.lang.Object clone()
    {
        sun.util.calendar.ZoneInfo r0, r1;
        java.lang.Object $r2;

        r0 := @this: sun.util.calendar.ZoneInfo;
        $r2 = specialinvoke r0.<java.util.TimeZone: java.lang.Object clone()>();
        r1 = (sun.util.calendar.ZoneInfo) $r2;
        r1.<sun.util.calendar.ZoneInfo: java.util.SimpleTimeZone lastRule> = null;
        return r1;
    }

    public int hashCode()
    {
        sun.util.calendar.ZoneInfo r0;
        int $i0, $i1, $i2;

        r0 := @this: sun.util.calendar.ZoneInfo;
        $i0 = specialinvoke r0.<sun.util.calendar.ZoneInfo: int getLastRawOffset()>();
        $i1 = r0.<sun.util.calendar.ZoneInfo: int checksum>;
        $i2 = $i0 ^ $i1;
        return $i2;
    }

    public boolean equals(java.lang.Object)
    {
        sun.util.calendar.ZoneInfo r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r3, $r4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: sun.util.calendar.ZoneInfo;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof sun.util.calendar.ZoneInfo;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (sun.util.calendar.ZoneInfo) r1;
        $r3 = virtualinvoke r0.<sun.util.calendar.ZoneInfo: java.lang.String getID()>();
        $r4 = virtualinvoke r2.<sun.util.calendar.ZoneInfo: java.lang.String getID()>();
        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);
        if $z1 == 0 goto label2;

        $i0 = specialinvoke r0.<sun.util.calendar.ZoneInfo: int getLastRawOffset()>();
        $i1 = specialinvoke r2.<sun.util.calendar.ZoneInfo: int getLastRawOffset()>();
        if $i0 != $i1 goto label2;

        $i2 = r0.<sun.util.calendar.ZoneInfo: int checksum>;
        $i3 = r2.<sun.util.calendar.ZoneInfo: int checksum>;
        if $i2 != $i3 goto label2;

        $z2 = 1;
        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean hasSameRules(java.util.TimeZone)
    {
        sun.util.calendar.ZoneInfo r0, $r3, $r4;
        java.util.TimeZone r1;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        long[] $r2;

        r0 := @this: sun.util.calendar.ZoneInfo;
        r1 := @parameter0: java.util.TimeZone;
        if r0 != r1 goto label0;

        return 1;

     label0:
        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = r1 instanceof sun.util.calendar.ZoneInfo;
        if $z0 != 0 goto label4;

        $i0 = virtualinvoke r0.<sun.util.calendar.ZoneInfo: int getRawOffset()>();
        $i1 = virtualinvoke r1.<java.util.TimeZone: int getRawOffset()>();
        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $r2 = r0.<sun.util.calendar.ZoneInfo: long[] transitions>;
        if $r2 != null goto label3;

        $z1 = virtualinvoke r0.<sun.util.calendar.ZoneInfo: boolean useDaylightTime()>();
        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r1.<java.util.TimeZone: boolean useDaylightTime()>();
        if $z2 != 0 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        $i2 = specialinvoke r0.<sun.util.calendar.ZoneInfo: int getLastRawOffset()>();
        $r3 = (sun.util.calendar.ZoneInfo) r1;
        $i3 = specialinvoke $r3.<sun.util.calendar.ZoneInfo: int getLastRawOffset()>();
        if $i2 == $i3 goto label5;

        return 0;

     label5:
        $i4 = r0.<sun.util.calendar.ZoneInfo: int checksum>;
        $r4 = (sun.util.calendar.ZoneInfo) r1;
        $i5 = $r4.<sun.util.calendar.ZoneInfo: int checksum>;
        if $i4 != $i5 goto label6;

        $z3 = 1;
        goto label7;

     label6:
        $z3 = 0;

     label7:
        return $z3;
    }

    static java.util.Map getCachedAliasTable()
    {
        java.util.Map r0;
        java.lang.ref.SoftReference r1;
        java.lang.Object $r2;

        r0 = null;
        r1 = <sun.util.calendar.ZoneInfo: java.lang.ref.SoftReference aliasTable>;
        if r1 == null goto label0;

        $r2 = virtualinvoke r1.<java.lang.ref.SoftReference: java.lang.Object get()>();
        r0 = (java.util.Map) $r2;

     label0:
        return r0;
    }

    public static synchronized java.util.Map getAliasTable()
    {
        java.util.Map r0;
        java.lang.String[] r1;
        int i0, i1;
        java.lang.String r2;
        boolean $z0;
        java.lang.ref.SoftReference $r4;

        r0 = staticinvoke <sun.util.calendar.ZoneInfo: java.util.Map getCachedAliasTable()>();
        if r0 != null goto label2;

        r0 = staticinvoke <sun.util.calendar.ZoneInfoFile: java.util.Map getZoneAliases()>();
        if r0 == null goto label2;

        $z0 = <sun.util.calendar.ZoneInfo: boolean USE_OLDMAPPING>;
        if $z0 != 0 goto label1;

        r1 = <sun.util.calendar.ZoneInfo: java.lang.String[] conflictingIDs>;
        i0 = lengthof r1;
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        r2 = r1[i1];
        interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);
        i1 = i1 + 1;
        goto label0;

     label1:
        $r4 = new java.lang.ref.SoftReference;
        specialinvoke $r4.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r0);
        <sun.util.calendar.ZoneInfo: java.lang.ref.SoftReference aliasTable> = $r4;

     label2:
        return r0;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        sun.util.calendar.ZoneInfo r0;
        java.io.ObjectInputStream r1;

        r0 := @this: sun.util.calendar.ZoneInfo;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        r0.<sun.util.calendar.ZoneInfo: boolean dirty> = 1;
        return;
    }

    static void <clinit>()
    {
        sun.security.action.GetPropertyAction $r0;
        java.lang.String r1, $r3;
        java.lang.Object $r2;
        java.util.Locale $r4;
        boolean $z0, $z1, $z2;
        java.lang.String[] $r5;
        sun.util.calendar.Gregorian $r6;

        $r0 = new sun.security.action.GetPropertyAction;
        specialinvoke $r0.<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>("sun.timezone.ids.oldmapping", "false");
        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        $r3 = (java.lang.String) $r2;
        $r4 = <java.util.Locale: java.util.Locale ROOT>;
        r1 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4);
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("yes");
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("true");
        if $z1 == 0 goto label1;

     label0:
        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        <sun.util.calendar.ZoneInfo: boolean USE_OLDMAPPING> = $z2;
        $r5 = newarray (java.lang.String)[3];
        $r5[0] = "EST";
        $r5[1] = "MST";
        $r5[2] = "HST";
        <sun.util.calendar.ZoneInfo: java.lang.String[] conflictingIDs> = $r5;
        $r6 = staticinvoke <sun.util.calendar.CalendarSystem: sun.util.calendar.Gregorian getGregorianCalendar()>();
        <sun.util.calendar.ZoneInfo: sun.util.calendar.CalendarSystem gcal> = $r6;
        return;
    }
}
