public abstract class java.net.HttpURLConnection extends java.net.URLConnection
{
    protected java.lang.String method;
    protected int chunkLength;
    protected int fixedContentLength;
    protected long fixedContentLengthLong;
    private static final int DEFAULT_CHUNK_SIZE;
    protected int responseCode;
    protected java.lang.String responseMessage;
    private static boolean followRedirects;
    protected boolean instanceFollowRedirects;
    private static final java.lang.String[] methods;
    public static final int HTTP_OK;
    public static final int HTTP_CREATED;
    public static final int HTTP_ACCEPTED;
    public static final int HTTP_NOT_AUTHORITATIVE;
    public static final int HTTP_NO_CONTENT;
    public static final int HTTP_RESET;
    public static final int HTTP_PARTIAL;
    public static final int HTTP_MULT_CHOICE;
    public static final int HTTP_MOVED_PERM;
    public static final int HTTP_MOVED_TEMP;
    public static final int HTTP_SEE_OTHER;
    public static final int HTTP_NOT_MODIFIED;
    public static final int HTTP_USE_PROXY;
    public static final int HTTP_BAD_REQUEST;
    public static final int HTTP_UNAUTHORIZED;
    public static final int HTTP_PAYMENT_REQUIRED;
    public static final int HTTP_FORBIDDEN;
    public static final int HTTP_NOT_FOUND;
    public static final int HTTP_BAD_METHOD;
    public static final int HTTP_NOT_ACCEPTABLE;
    public static final int HTTP_PROXY_AUTH;
    public static final int HTTP_CLIENT_TIMEOUT;
    public static final int HTTP_CONFLICT;
    public static final int HTTP_GONE;
    public static final int HTTP_LENGTH_REQUIRED;
    public static final int HTTP_PRECON_FAILED;
    public static final int HTTP_ENTITY_TOO_LARGE;
    public static final int HTTP_REQ_TOO_LONG;
    public static final int HTTP_UNSUPPORTED_TYPE;
    public static final int HTTP_SERVER_ERROR;
    public static final int HTTP_INTERNAL_ERROR;
    public static final int HTTP_NOT_IMPLEMENTED;
    public static final int HTTP_BAD_GATEWAY;
    public static final int HTTP_UNAVAILABLE;
    public static final int HTTP_GATEWAY_TIMEOUT;
    public static final int HTTP_VERSION;

    public java.lang.String getHeaderFieldKey(int)
    {
        java.net.HttpURLConnection r0;
        int i0;

        r0 := @this: java.net.HttpURLConnection;
        i0 := @parameter0: int;
        return null;
    }

    public void setFixedLengthStreamingMode(int)
    {
        java.net.HttpURLConnection r0;
        int i0, $i1;
        boolean $z0;
        java.lang.IllegalStateException $r1, $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: java.net.HttpURLConnection;
        i0 := @parameter0: int;
        $z0 = r0.<java.net.HttpURLConnection: boolean connected>;
        if $z0 == 0 goto label0;

        $r1 = new java.lang.IllegalStateException;
        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already connected");
        throw $r1;

     label0:
        $i1 = r0.<java.net.HttpURLConnection: int chunkLength>;
        if $i1 == -1 goto label1;

        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Chunked encoding streaming mode set");
        throw $r2;

     label1:
        if i0 >= 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid content length");
        throw $r3;

     label2:
        r0.<java.net.HttpURLConnection: int fixedContentLength> = i0;
        return;
    }

    public void setFixedLengthStreamingMode(long)
    {
        java.net.HttpURLConnection r0;
        long l0;
        boolean $z0;
        java.lang.IllegalStateException $r1, $r2;
        int $i1;
        byte $b2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: java.net.HttpURLConnection;
        l0 := @parameter0: long;
        $z0 = r0.<java.net.HttpURLConnection: boolean connected>;
        if $z0 == 0 goto label0;

        $r1 = new java.lang.IllegalStateException;
        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already connected");
        throw $r1;

     label0:
        $i1 = r0.<java.net.HttpURLConnection: int chunkLength>;
        if $i1 == -1 goto label1;

        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Chunked encoding streaming mode set");
        throw $r2;

     label1:
        $b2 = l0 cmp 0L;
        if $b2 >= 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid content length");
        throw $r3;

     label2:
        r0.<java.net.HttpURLConnection: long fixedContentLengthLong> = l0;
        return;
    }

    public void setChunkedStreamingMode(int)
    {
        java.net.HttpURLConnection r0;
        int i0, $i1, $i4;
        boolean $z0;
        java.lang.IllegalStateException $r1, $r2;
        long $l2;
        byte $b3;

        r0 := @this: java.net.HttpURLConnection;
        i0 := @parameter0: int;
        $z0 = r0.<java.net.HttpURLConnection: boolean connected>;
        if $z0 == 0 goto label0;

        $r1 = new java.lang.IllegalStateException;
        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t set streaming mode: already connected");
        throw $r1;

     label0:
        $i1 = r0.<java.net.HttpURLConnection: int fixedContentLength>;
        if $i1 != -1 goto label1;

        $l2 = r0.<java.net.HttpURLConnection: long fixedContentLengthLong>;
        $b3 = $l2 cmp -1L;
        if $b3 == 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Fixed length streaming mode set");
        throw $r2;

     label2:
        if i0 > 0 goto label3;

        $i4 = 4096;
        goto label4;

     label3:
        $i4 = i0;

     label4:
        r0.<java.net.HttpURLConnection: int chunkLength> = $i4;
        return;
    }

    public java.lang.String getHeaderField(int)
    {
        java.net.HttpURLConnection r0;
        int i0;

        r0 := @this: java.net.HttpURLConnection;
        i0 := @parameter0: int;
        return null;
    }

    protected void <init>(java.net.URL)
    {
        java.net.HttpURLConnection r0;
        java.net.URL r1;
        boolean $z0;

        r0 := @this: java.net.HttpURLConnection;
        r1 := @parameter0: java.net.URL;
        specialinvoke r0.<java.net.URLConnection: void <init>(java.net.URL)>(r1);
        r0.<java.net.HttpURLConnection: java.lang.String method> = "GET";
        r0.<java.net.HttpURLConnection: int chunkLength> = -1;
        r0.<java.net.HttpURLConnection: int fixedContentLength> = -1;
        r0.<java.net.HttpURLConnection: long fixedContentLengthLong> = -1L;
        r0.<java.net.HttpURLConnection: int responseCode> = -1;
        r0.<java.net.HttpURLConnection: java.lang.String responseMessage> = null;
        $z0 = <java.net.HttpURLConnection: boolean followRedirects>;
        r0.<java.net.HttpURLConnection: boolean instanceFollowRedirects> = $z0;
        return;
    }

    public static void setFollowRedirects(boolean)
    {
        boolean z0;
        java.lang.SecurityManager r0;

        z0 := @parameter0: boolean;
        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r0 == null goto label0;

        virtualinvoke r0.<java.lang.SecurityManager: void checkSetFactory()>();

     label0:
        <java.net.HttpURLConnection: boolean followRedirects> = z0;
        return;
    }

    public static boolean getFollowRedirects()
    {
        boolean $z0;

        $z0 = <java.net.HttpURLConnection: boolean followRedirects>;
        return $z0;
    }

    public void setInstanceFollowRedirects(boolean)
    {
        java.net.HttpURLConnection r0;
        boolean z0;

        r0 := @this: java.net.HttpURLConnection;
        z0 := @parameter0: boolean;
        r0.<java.net.HttpURLConnection: boolean instanceFollowRedirects> = z0;
        return;
    }

    public boolean getInstanceFollowRedirects()
    {
        java.net.HttpURLConnection r0;
        boolean $z0;

        r0 := @this: java.net.HttpURLConnection;
        $z0 = r0.<java.net.HttpURLConnection: boolean instanceFollowRedirects>;
        return $z0;
    }

    public void setRequestMethod(java.lang.String) throws java.net.ProtocolException
    {
        java.net.HttpURLConnection r0;
        java.lang.String r1, $r6, $r12;
        int i0, $i1;
        java.lang.SecurityManager r2;
        boolean $z0, $z1, $z2;
        java.net.ProtocolException $r3, $r8;
        java.lang.String[] $r4, $r5;
        java.net.NetPermission $r7;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @this: java.net.HttpURLConnection;
        r1 := @parameter0: java.lang.String;
        $z0 = r0.<java.net.HttpURLConnection: boolean connected>;
        if $z0 == 0 goto label0;

        $r3 = new java.net.ProtocolException;
        specialinvoke $r3.<java.net.ProtocolException: void <init>(java.lang.String)>("Can\'t reset method: already connected");
        throw $r3;

     label0:
        i0 = 0;

     label1:
        $r4 = <java.net.HttpURLConnection: java.lang.String[] methods>;
        $i1 = lengthof $r4;
        if i0 >= $i1 goto label4;

        $r5 = <java.net.HttpURLConnection: java.lang.String[] methods>;
        $r6 = $r5[i0];
        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("TRACE");
        if $z2 == 0 goto label2;

        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label2;

        $r7 = new java.net.NetPermission;
        specialinvoke $r7.<java.net.NetPermission: void <init>(java.lang.String)>("allowHttpTrace");
        virtualinvoke r2.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r7);

     label2:
        r0.<java.net.HttpURLConnection: java.lang.String method> = r1;
        return;

     label3:
        i0 = i0 + 1;
        goto label1;

     label4:
        $r8 = new java.net.ProtocolException;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid HTTP method: ");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.net.ProtocolException: void <init>(java.lang.String)>($r12);
        throw $r8;
    }

    public java.lang.String getRequestMethod()
    {
        java.net.HttpURLConnection r0;
        java.lang.String $r1;

        r0 := @this: java.net.HttpURLConnection;
        $r1 = r0.<java.net.HttpURLConnection: java.lang.String method>;
        return $r1;
    }

    public int getResponseCode() throws java.io.IOException
    {
        java.net.HttpURLConnection r0;
        java.lang.Exception r1, r2, $r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.NumberFormatException r3, $r11;
        java.lang.String r6, $r9, $r10;
        boolean $z0, $z1;
        java.lang.RuntimeException $r7;
        java.io.IOException $r8;

        r0 := @this: java.net.HttpURLConnection;
        $i2 = r0.<java.net.HttpURLConnection: int responseCode>;
        if $i2 == -1 goto label0;

        $i3 = r0.<java.net.HttpURLConnection: int responseCode>;
        return $i3;

     label0:
        r1 = null;

     label1:
        virtualinvoke r0.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;
        r2 = $r5;
        r1 = r2;

     label4:
        r6 = virtualinvoke r0.<java.net.HttpURLConnection: java.lang.String getHeaderField(int)>(0);
        if r6 != null goto label7;

        if r1 == null goto label6;

        $z0 = r1 instanceof java.lang.RuntimeException;
        if $z0 == 0 goto label5;

        $r7 = (java.lang.RuntimeException) r1;
        throw $r7;

     label5:
        $r8 = (java.io.IOException) r1;
        throw $r8;

     label6:
        return -1;

     label7:
        $z1 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("HTTP/1.");
        if $z1 == 0 goto label12;

        i0 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(32);
        if i0 <= 0 goto label12;

        $i4 = i0 + 1;
        i1 = virtualinvoke r6.<java.lang.String: int indexOf(int,int)>(32, $i4);
        if i1 <= 0 goto label8;

        $i5 = virtualinvoke r6.<java.lang.String: int length()>();
        if i1 >= $i5 goto label8;

        $i6 = i1 + 1;
        $r9 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int)>($i6);
        r0.<java.net.HttpURLConnection: java.lang.String responseMessage> = $r9;

     label8:
        if i1 >= 0 goto label9;

        i1 = virtualinvoke r6.<java.lang.String: int length()>();

     label9:
        $i7 = i0 + 1;
        $r10 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>($i7, i1);
        $i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);
        r0.<java.net.HttpURLConnection: int responseCode> = $i8;
        $i9 = r0.<java.net.HttpURLConnection: int responseCode>;

     label10:
        return $i9;

     label11:
        $r11 := @caughtexception;
        r3 = $r11;

     label12:
        return -1;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.NumberFormatException from label9 to label10 with label11;
    }

    public java.lang.String getResponseMessage() throws java.io.IOException
    {
        java.net.HttpURLConnection r0;
        java.lang.String $r1;

        r0 := @this: java.net.HttpURLConnection;
        virtualinvoke r0.<java.net.HttpURLConnection: int getResponseCode()>();
        $r1 = r0.<java.net.HttpURLConnection: java.lang.String responseMessage>;
        return $r1;
    }

    public long getHeaderFieldDate(java.lang.String, long)
    {
        java.net.HttpURLConnection r0;
        java.lang.String r1, r2;
        long l0, $l2;
        java.lang.Exception r3, $r7;
        int $i1;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @this: java.net.HttpURLConnection;
        r1 := @parameter0: java.lang.String;
        l0 := @parameter1: long;
        r2 = virtualinvoke r0.<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>(r1);

     label0:
        $i1 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>("GMT");
        if $i1 != -1 goto label1;

        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" GMT");
        r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $l2 = staticinvoke <java.util.Date: long parse(java.lang.String)>(r2);

     label2:
        return $l2;

     label3:
        $r7 := @caughtexception;
        r3 = $r7;
        return l0;

        catch java.lang.Exception from label0 to label2 with label3;
    }

    public abstract void disconnect();

    public abstract boolean usingProxy();

    public java.security.Permission getPermission() throws java.io.IOException
    {
        java.net.HttpURLConnection r0;
        int i0, $i1, i2;
        java.lang.String r1, $r6;
        java.net.SocketPermission r2, $r10;
        java.net.URL $r3, $r5;
        java.lang.StringBuilder $r4, $r7, $r8, $r9;

        r0 := @this: java.net.HttpURLConnection;
        $r3 = r0.<java.net.HttpURLConnection: java.net.URL url>;
        i0 = virtualinvoke $r3.<java.net.URL: int getPort()>();
        if i0 >= 0 goto label0;

        $i1 = 80;
        goto label1;

     label0:
        $i1 = i0;

     label1:
        i2 = $i1;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = r0.<java.net.HttpURLConnection: java.net.URL url>;
        $r6 = virtualinvoke $r5.<java.net.URL: java.lang.String getHost()>();
        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);
        r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        $r10 = new java.net.SocketPermission;
        specialinvoke $r10.<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>(r1, "connect");
        r2 = $r10;
        return r2;
    }

    public java.io.InputStream getErrorStream()
    {
        java.net.HttpURLConnection r0;

        r0 := @this: java.net.HttpURLConnection;
        return null;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <java.net.HttpURLConnection: boolean followRedirects> = 1;
        $r0 = newarray (java.lang.String)[7];
        $r0[0] = "GET";
        $r0[1] = "POST";
        $r0[2] = "HEAD";
        $r0[3] = "OPTIONS";
        $r0[4] = "PUT";
        $r0[5] = "DELETE";
        $r0[6] = "TRACE";
        <java.net.HttpURLConnection: java.lang.String[] methods> = $r0;
        return;
    }
}
