public final class sun.text.normalizer.Utility extends java.lang.Object
{
    private static final char[] UNESCAPE_MAP;
    static final char[] DIGITS;

    public void <init>()
    {
        sun.text.normalizer.Utility r0;

        r0 := @this: sun.text.normalizer.Utility;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static final boolean arrayRegionMatches(char[], int, char[], int, int)
    {
        char[] r0, r1;
        int i0, i1, i2, i3, i4, i5, $i7;
        char $c6, $c8;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        r1 := @parameter2: char[];
        i1 := @parameter3: int;
        i2 := @parameter4: int;
        i3 = i0 + i2;
        i4 = i1 - i0;
        i5 = i0;

     label0:
        if i5 >= i3 goto label2;

        $c6 = r0[i5];
        $i7 = i5 + i4;
        $c8 = r1[$i7];
        if $c6 == $c8 goto label1;

        return 0;

     label1:
        i5 = i5 + 1;
        goto label0;

     label2:
        return 1;
    }

    public static final java.lang.String escape(java.lang.String)
    {
        java.lang.String r0, $r6, $r9;
        java.lang.StringBuffer $r1, r2;
        int i0, i1, $i2, $i3;
        boolean z0, $z1;
        char $c4;
        byte $b6;

        r0 := @parameter0: java.lang.String;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        r2 = $r1;
        i0 = 0;

     label0:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();
        if i0 >= $i2 goto label10;

        i1 = staticinvoke <sun.text.normalizer.UTF16: int charAt(java.lang.String,int)>(r0, i0);
        $i3 = staticinvoke <sun.text.normalizer.UTF16: int getCharCount(int)>(i1);
        i0 = i0 + $i3;
        if i1 < 32 goto label2;

        if i1 > 127 goto label2;

        if i1 != 92 goto label1;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\\");
        goto label9;

     label1:
        $c4 = (char) i1;
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);
        goto label9;

     label2:
        if i1 > 65535 goto label3;

        $z1 = 1;
        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;
        if z0 == 0 goto label5;

        $r6 = "\\u";
        goto label6;

     label5:
        $r6 = "\\U";

     label6:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);
        if z0 == 0 goto label7;

        $b6 = 4;
        goto label8;

     label7:
        $b6 = 8;

     label8:
        staticinvoke <sun.text.normalizer.Utility: java.lang.StringBuffer hex(int,int,java.lang.StringBuffer)>(i1, $b6, r2);

     label9:
        goto label0;

     label10:
        $r9 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r9;
    }

    public static int unescapeAt(java.lang.String, int[])
    {
        java.lang.String r0;
        int[] r1, r2, $r3;
        int i0, i1, i5, i6, i7, i8, i9, i10, $i11, i12, $i15, $i16, i18, $i19, $i20, i22, $i26, $i28, i31, $i32, $i33, $i34;
        byte b2, b3, b4, $b13, $b14, $b17;
        boolean z0, $z1, $z2;
        char $c21, $c23, $c24, $c25, $c27, $c29, $c30;
        char[] $r4, $r5, $r6, $r7;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: int[];
        i0 = 0;
        i1 = 0;
        b2 = 0;
        b3 = 0;
        b4 = 4;
        z0 = 0;
        i5 = r1[0];
        i6 = virtualinvoke r0.<java.lang.String: int length()>();
        if i5 < 0 goto label0;

        if i5 < i6 goto label1;

     label0:
        return -1;

     label1:
        i7 = staticinvoke <sun.text.normalizer.UTF16: int charAt(java.lang.String,int)>(r0, i5);
        $i11 = staticinvoke <sun.text.normalizer.UTF16: int getCharCount(int)>(i7);
        i12 = i5 + $i11;
        lookupswitch(i7)
        {
            case 85: goto label3;
            case 117: goto label2;
            case 120: goto label4;
            default: goto label6;
        };

     label2:
        $b13 = 4;
        b3 = $b13;
        b2 = $b13;
        goto label7;

     label3:
        $b14 = 8;
        b3 = $b14;
        b2 = $b14;
        goto label7;

     label4:
        b2 = 1;
        if i12 >= i6 goto label5;

        $i15 = staticinvoke <sun.text.normalizer.UTF16: int charAt(java.lang.String,int)>(r0, i12);
        if $i15 != 123 goto label5;

        i12 = i12 + 1;
        z0 = 1;
        b3 = 8;
        goto label7;

     label5:
        b3 = 2;
        goto label7;

     label6:
        i8 = staticinvoke <sun.text.normalizer.UCharacter: int digit(int,int)>(i7, 8);
        if i8 < 0 goto label7;

        b2 = 1;
        b3 = 3;
        i1 = 1;
        b4 = 3;
        i0 = i8;

     label7:
        if b2 == 0 goto label20;

     label8:
        if i12 >= i6 goto label12;

        if i1 >= b3 goto label12;

        i7 = staticinvoke <sun.text.normalizer.UTF16: int charAt(java.lang.String,int)>(r0, i12);
        $i16 = i7;
        if b4 != 3 goto label9;

        $b17 = 8;
        goto label10;

     label9:
        $b17 = 16;

     label10:
        i18 = staticinvoke <sun.text.normalizer.UCharacter: int digit(int,int)>($i16, $b17);
        if i18 >= 0 goto label11;

        goto label12;

     label11:
        $i19 = i0 << b4;
        i0 = $i19 | i18;
        $i20 = staticinvoke <sun.text.normalizer.UTF16: int getCharCount(int)>(i7);
        i12 = i12 + $i20;
        i1 = i1 + 1;
        goto label8;

     label12:
        if i1 >= b2 goto label13;

        return -1;

     label13:
        if z0 == 0 goto label15;

        if i7 == 125 goto label14;

        return -1;

     label14:
        i12 = i12 + 1;

     label15:
        if i0 < 0 goto label16;

        if i0 < 1114112 goto label17;

     label16:
        return -1;

     label17:
        if i12 >= i6 goto label19;

        $c21 = (char) i0;
        $z1 = staticinvoke <sun.text.normalizer.UTF16: boolean isLeadSurrogate(char)>($c21);
        if $z1 == 0 goto label19;

        i9 = i12 + 1;
        i22 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);
        if i22 != 92 goto label18;

        if i9 >= i6 goto label18;

        $r3 = newarray (int)[1];
        $r3[0] = i9;
        r2 = $r3;
        i22 = staticinvoke <sun.text.normalizer.Utility: int unescapeAt(java.lang.String,int[])>(r0, r2);
        i9 = r2[0];

     label18:
        $c23 = (char) i22;
        $z2 = staticinvoke <sun.text.normalizer.UTF16: boolean isTrailSurrogate(char)>($c23);
        if $z2 == 0 goto label19;

        i12 = i9;
        $c24 = (char) i0;
        $c25 = (char) i22;
        i0 = staticinvoke <sun.text.normalizer.UCharacterProperty: int getRawSupplementary(char,char)>($c24, $c25);

     label19:
        r1[0] = i12;
        return i0;

     label20:
        i10 = 0;

     label21:
        $r4 = <sun.text.normalizer.Utility: char[] UNESCAPE_MAP>;
        $i26 = lengthof $r4;
        if i10 >= $i26 goto label24;

        $r5 = <sun.text.normalizer.Utility: char[] UNESCAPE_MAP>;
        $c27 = $r5[i10];
        if i7 != $c27 goto label22;

        r1[0] = i12;
        $r6 = <sun.text.normalizer.Utility: char[] UNESCAPE_MAP>;
        $i28 = i10 + 1;
        $c29 = $r6[$i28];
        return $c29;

     label22:
        $r7 = <sun.text.normalizer.Utility: char[] UNESCAPE_MAP>;
        $c30 = $r7[i10];
        if i7 >= $c30 goto label23;

        goto label24;

     label23:
        i10 = i10 + 2;
        goto label21;

     label24:
        if i7 != 99 goto label25;

        if i12 >= i6 goto label25;

        i31 = staticinvoke <sun.text.normalizer.UTF16: int charAt(java.lang.String,int)>(r0, i12);
        $i32 = staticinvoke <sun.text.normalizer.UTF16: int getCharCount(int)>(i31);
        $i33 = i12 + $i32;
        r1[0] = $i33;
        $i34 = 31 & i31;
        return $i34;

     label25:
        r1[0] = i12;
        return i7;
    }

    public static java.lang.StringBuffer hex(int, int, java.lang.StringBuffer)
    {
        int i0, i1;
        java.lang.StringBuffer r0, $r1;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r0 := @parameter2: java.lang.StringBuffer;
        $r1 = staticinvoke <sun.text.normalizer.Utility: java.lang.StringBuffer appendNumber(java.lang.StringBuffer,int,int,int)>(r0, i0, 16, i1);
        return $r1;
    }

    public static java.lang.String hex(int, int)
    {
        int i0, i1;
        java.lang.StringBuffer $r0, r1, $r2;
        java.lang.String $r3;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        r1 = $r0;
        $r2 = staticinvoke <sun.text.normalizer.Utility: java.lang.StringBuffer appendNumber(java.lang.StringBuffer,int,int,int)>(r1, i0, 16, i1);
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r3;
    }

    public static int skipWhitespace(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;

     label0:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();
        if i0 >= $i2 goto label2;

        i1 = staticinvoke <sun.text.normalizer.UTF16: int charAt(java.lang.String,int)>(r0, i0);
        $z0 = staticinvoke <sun.text.normalizer.UCharacterProperty: boolean isRuleWhiteSpace(int)>(i1);
        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $i3 = staticinvoke <sun.text.normalizer.UTF16: int getCharCount(int)>(i1);
        i0 = i0 + $i3;
        goto label0;

     label2:
        return i0;
    }

    private static void recursiveAppendNumber(java.lang.StringBuffer, int, int, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1, i2, i3, $i4, $i5;
        char[] $r1;
        char $c6;

        r0 := @parameter0: java.lang.StringBuffer;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 = i0 % i1;
        if i0 >= i1 goto label0;

        if i2 <= 1 goto label1;

     label0:
        $i4 = i0 / i1;
        $i5 = i2 - 1;
        staticinvoke <sun.text.normalizer.Utility: void recursiveAppendNumber(java.lang.StringBuffer,int,int,int)>(r0, $i4, i1, $i5);

     label1:
        $r1 = <sun.text.normalizer.Utility: char[] DIGITS>;
        $c6 = $r1[i3];
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c6);
        return;
    }

    public static java.lang.StringBuffer appendNumber(java.lang.StringBuffer, int, int, int) throws java.lang.IllegalArgumentException
    {
        java.lang.StringBuffer r0;
        int i0, i1, i2, i3;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r5;

        r0 := @parameter0: java.lang.StringBuffer;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        if i1 < 2 goto label0;

        if i1 <= 36 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal radix ");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r2;

     label1:
        i3 = i0;
        if i0 >= 0 goto label2;

        i3 = neg i0;
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

     label2:
        staticinvoke <sun.text.normalizer.Utility: void recursiveAppendNumber(java.lang.StringBuffer,int,int,int)>(r0, i3, i1, i2);
        return r0;
    }

    public static boolean isUnprintable(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;
        if i0 < 32 goto label0;

        if i0 <= 126 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean escapeUnprintable(java.lang.StringBuffer, int)
    {
        java.lang.StringBuffer r0;
        int i0, $i1, $i2, $i3, $i5, $i6, $i8, $i9, $i11, $i12, $i14, $i15, $i17, $i18, $i20, $i21, $i23;
        boolean $z0;
        char[] $r3, $r5, $r7, $r9, $r12, $r14, $r16, $r18;
        char $c4, $c7, $c10, $c13, $c16, $c19, $c22, $c24;

        r0 := @parameter0: java.lang.StringBuffer;
        i0 := @parameter1: int;
        $z0 = staticinvoke <sun.text.normalizer.Utility: boolean isUnprintable(int)>(i0);
        if $z0 == 0 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);
        $i1 = i0 & -65536;
        if $i1 == 0 goto label0;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(85);
        $r3 = <sun.text.normalizer.Utility: char[] DIGITS>;
        $i2 = i0 >> 28;
        $i3 = 15 & $i2;
        $c4 = $r3[$i3];
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);
        $r5 = <sun.text.normalizer.Utility: char[] DIGITS>;
        $i5 = i0 >> 24;
        $i6 = 15 & $i5;
        $c7 = $r5[$i6];
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c7);
        $r7 = <sun.text.normalizer.Utility: char[] DIGITS>;
        $i8 = i0 >> 20;
        $i9 = 15 & $i8;
        $c10 = $r7[$i9];
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c10);
        $r9 = <sun.text.normalizer.Utility: char[] DIGITS>;
        $i11 = i0 >> 16;
        $i12 = 15 & $i11;
        $c13 = $r9[$i12];
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c13);
        goto label1;

     label0:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(117);

     label1:
        $r12 = <sun.text.normalizer.Utility: char[] DIGITS>;
        $i14 = i0 >> 12;
        $i15 = 15 & $i14;
        $c16 = $r12[$i15];
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c16);
        $r14 = <sun.text.normalizer.Utility: char[] DIGITS>;
        $i17 = i0 >> 8;
        $i18 = 15 & $i17;
        $c19 = $r14[$i18];
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c19);
        $r16 = <sun.text.normalizer.Utility: char[] DIGITS>;
        $i20 = i0 >> 4;
        $i21 = 15 & $i20;
        $c22 = $r16[$i21];
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c22);
        $r18 = <sun.text.normalizer.Utility: char[] DIGITS>;
        $i23 = 15 & i0;
        $c24 = $r18[$i23];
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c24);
        return 1;

     label2:
        return 0;
    }

    public static void getChars(java.lang.StringBuffer, int, int, char[], int)
    {
        java.lang.StringBuffer r0;
        int i0, i1, i2;
        char[] r1;

        r0 := @parameter0: java.lang.StringBuffer;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 := @parameter3: char[];
        i2 := @parameter4: int;
        if i0 != i1 goto label0;

        return;

     label0:
        virtualinvoke r0.<java.lang.StringBuffer: void getChars(int,int,char[],int)>(i0, i1, r1, i2);
        return;
    }

    static void <clinit>()
    {
        char[] $r0, $r1;

        $r0 = newarray (char)[16];
        $r0[0] = 97;
        $r0[1] = 7;
        $r0[2] = 98;
        $r0[3] = 8;
        $r0[4] = 101;
        $r0[5] = 27;
        $r0[6] = 102;
        $r0[7] = 12;
        $r0[8] = 110;
        $r0[9] = 10;
        $r0[10] = 114;
        $r0[11] = 13;
        $r0[12] = 116;
        $r0[13] = 9;
        $r0[14] = 118;
        $r0[15] = 11;
        <sun.text.normalizer.Utility: char[] UNESCAPE_MAP> = $r0;
        $r1 = newarray (char)[36];
        $r1[0] = 48;
        $r1[1] = 49;
        $r1[2] = 50;
        $r1[3] = 51;
        $r1[4] = 52;
        $r1[5] = 53;
        $r1[6] = 54;
        $r1[7] = 55;
        $r1[8] = 56;
        $r1[9] = 57;
        $r1[10] = 65;
        $r1[11] = 66;
        $r1[12] = 67;
        $r1[13] = 68;
        $r1[14] = 69;
        $r1[15] = 70;
        $r1[16] = 71;
        $r1[17] = 72;
        $r1[18] = 73;
        $r1[19] = 74;
        $r1[20] = 75;
        $r1[21] = 76;
        $r1[22] = 77;
        $r1[23] = 78;
        $r1[24] = 79;
        $r1[25] = 80;
        $r1[26] = 81;
        $r1[27] = 82;
        $r1[28] = 83;
        $r1[29] = 84;
        $r1[30] = 85;
        $r1[31] = 86;
        $r1[32] = 87;
        $r1[33] = 88;
        $r1[34] = 89;
        $r1[35] = 90;
        <sun.text.normalizer.Utility: char[] DIGITS> = $r1;
        return;
    }
}
