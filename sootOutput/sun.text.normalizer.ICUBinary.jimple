public final class sun.text.normalizer.ICUBinary extends java.lang.Object
{
    private static final byte MAGIC1;
    private static final byte MAGIC2;
    private static final byte BIG_ENDIAN_;
    private static final byte CHAR_SET_;
    private static final byte CHAR_SIZE_;
    private static final java.lang.String MAGIC_NUMBER_AUTHENTICATION_FAILED_;
    private static final java.lang.String HEADER_AUTHENTICATION_FAILED_;

    public void <init>()
    {
        sun.text.normalizer.ICUBinary r0;

        r0 := @this: sun.text.normalizer.ICUBinary;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static final byte[] readHeader(java.io.InputStream, byte[], sun.text.normalizer.ICUBinary$Authenticate) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1, r5, r6, r7;
        sun.text.normalizer.ICUBinary$Authenticate r2;
        java.io.DataInputStream $r3, r4;
        char c0;
        byte b1, b2, b3, b4, b5, b6;
        int i7, i8, i10, i12, i13, i14, i15, i17, i18, i19, i20, $i21;
        java.io.IOException $r8, $r9, $r10;
        boolean $z0, $z1;

        r0 := @parameter0: java.io.InputStream;
        r1 := @parameter1: byte[];
        r2 := @parameter2: sun.text.normalizer.ICUBinary$Authenticate;
        $r3 = new java.io.DataInputStream;
        specialinvoke $r3.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r0);
        r4 = $r3;
        c0 = virtualinvoke r4.<java.io.DataInputStream: char readChar()>();
        b1 = 2;
        b2 = virtualinvoke r4.<java.io.DataInputStream: byte readByte()>();
        i7 = b1 + 1;
        b3 = virtualinvoke r4.<java.io.DataInputStream: byte readByte()>();
        i8 = i7 + 1;
        if b2 != -38 goto label0;

        if b3 == 39 goto label1;

     label0:
        $r8 = new java.io.IOException;
        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("ICU data file error: Not an ICU data file");
        throw $r8;

     label1:
        virtualinvoke r4.<java.io.DataInputStream: char readChar()>();
        i10 = i8 + 2;
        virtualinvoke r4.<java.io.DataInputStream: char readChar()>();
        i12 = i10 + 2;
        b4 = virtualinvoke r4.<java.io.DataInputStream: byte readByte()>();
        i13 = i12 + 1;
        b5 = virtualinvoke r4.<java.io.DataInputStream: byte readByte()>();
        i14 = i13 + 1;
        b6 = virtualinvoke r4.<java.io.DataInputStream: byte readByte()>();
        i15 = i14 + 1;
        virtualinvoke r4.<java.io.DataInputStream: byte readByte()>();
        i17 = i15 + 1;
        r5 = newarray (byte)[4];
        virtualinvoke r4.<java.io.DataInputStream: void readFully(byte[])>(r5);
        i18 = i17 + 4;
        r6 = newarray (byte)[4];
        virtualinvoke r4.<java.io.DataInputStream: void readFully(byte[])>(r6);
        i19 = i18 + 4;
        r7 = newarray (byte)[4];
        virtualinvoke r4.<java.io.DataInputStream: void readFully(byte[])>(r7);
        i20 = i19 + 4;
        if c0 >= i20 goto label2;

        $r9 = new java.io.IOException;
        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Internal Error: Header size error");
        throw $r9;

     label2:
        $i21 = c0 - i20;
        virtualinvoke r4.<java.io.DataInputStream: int skipBytes(int)>($i21);
        if b4 != 1 goto label3;

        if b5 != 0 goto label3;

        if b6 != 2 goto label3;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r1, r5);
        if $z0 == 0 goto label3;

        if r2 == null goto label4;

        $z1 = interfaceinvoke r2.<sun.text.normalizer.ICUBinary$Authenticate: boolean isDataVersionAcceptable(byte[])>(r6);
        if $z1 != 0 goto label4;

     label3:
        $r10 = new java.io.IOException;
        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("ICU data file error: Header authentication failed, please check if you have a valid ICU data file");
        throw $r10;

     label4:
        return r7;
    }
}
