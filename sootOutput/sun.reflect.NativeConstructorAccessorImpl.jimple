class sun.reflect.NativeConstructorAccessorImpl extends sun.reflect.ConstructorAccessorImpl
{
    private java.lang.reflect.Constructor c;
    private sun.reflect.DelegatingConstructorAccessorImpl parent;
    private int numInvocations;

    void <init>(java.lang.reflect.Constructor)
    {
        sun.reflect.NativeConstructorAccessorImpl r0;
        java.lang.reflect.Constructor r1;

        r0 := @this: sun.reflect.NativeConstructorAccessorImpl;
        r1 := @parameter0: java.lang.reflect.Constructor;
        specialinvoke r0.<sun.reflect.ConstructorAccessorImpl: void <init>()>();
        r0.<sun.reflect.NativeConstructorAccessorImpl: java.lang.reflect.Constructor c> = r1;
        return;
    }

    public java.lang.Object newInstance(java.lang.Object[]) throws java.lang.InstantiationException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException
    {
        sun.reflect.NativeConstructorAccessorImpl r0;
        java.lang.Object[] r1;
        sun.reflect.ConstructorAccessorImpl r3;
        int $i0, $i1, $i2, $i3;
        sun.reflect.MethodAccessorGenerator $r4;
        java.lang.reflect.Constructor $r5, $r7, $r9, $r11, $r14;
        java.lang.Class $r6;
        java.lang.Class[] $r8, $r10;
        sun.reflect.ConstructorAccessor $r12;
        sun.reflect.DelegatingConstructorAccessorImpl $r13;
        java.lang.Object $r15;

        r0 := @this: sun.reflect.NativeConstructorAccessorImpl;
        r1 := @parameter0: java.lang.Object[];
        $i0 = r0.<sun.reflect.NativeConstructorAccessorImpl: int numInvocations>;
        $i1 = $i0 + 1;
        r0.<sun.reflect.NativeConstructorAccessorImpl: int numInvocations> = $i1;
        $i2 = staticinvoke <sun.reflect.ReflectionFactory: int inflationThreshold()>();
        if $i1 <= $i2 goto label0;

        $r4 = new sun.reflect.MethodAccessorGenerator;
        specialinvoke $r4.<sun.reflect.MethodAccessorGenerator: void <init>()>();
        $r5 = r0.<sun.reflect.NativeConstructorAccessorImpl: java.lang.reflect.Constructor c>;
        $r6 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
        $r7 = r0.<sun.reflect.NativeConstructorAccessorImpl: java.lang.reflect.Constructor c>;
        $r8 = virtualinvoke $r7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
        $r9 = r0.<sun.reflect.NativeConstructorAccessorImpl: java.lang.reflect.Constructor c>;
        $r10 = virtualinvoke $r9.<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()>();
        $r11 = r0.<sun.reflect.NativeConstructorAccessorImpl: java.lang.reflect.Constructor c>;
        $i3 = virtualinvoke $r11.<java.lang.reflect.Constructor: int getModifiers()>();
        $r12 = virtualinvoke $r4.<sun.reflect.MethodAccessorGenerator: sun.reflect.ConstructorAccessor generateConstructor(java.lang.Class,java.lang.Class[],java.lang.Class[],int)>($r6, $r8, $r10, $i3);
        r3 = (sun.reflect.ConstructorAccessorImpl) $r12;
        $r13 = r0.<sun.reflect.NativeConstructorAccessorImpl: sun.reflect.DelegatingConstructorAccessorImpl parent>;
        virtualinvoke $r13.<sun.reflect.DelegatingConstructorAccessorImpl: void setDelegate(sun.reflect.ConstructorAccessorImpl)>(r3);

     label0:
        $r14 = r0.<sun.reflect.NativeConstructorAccessorImpl: java.lang.reflect.Constructor c>;
        $r15 = staticinvoke <sun.reflect.NativeConstructorAccessorImpl: java.lang.Object newInstance0(java.lang.reflect.Constructor,java.lang.Object[])>($r14, r1);
        return $r15;
    }

    void setParent(sun.reflect.DelegatingConstructorAccessorImpl)
    {
        sun.reflect.NativeConstructorAccessorImpl r0;
        sun.reflect.DelegatingConstructorAccessorImpl r1;

        r0 := @this: sun.reflect.NativeConstructorAccessorImpl;
        r1 := @parameter0: sun.reflect.DelegatingConstructorAccessorImpl;
        r0.<sun.reflect.NativeConstructorAccessorImpl: sun.reflect.DelegatingConstructorAccessorImpl parent> = r1;
        return;
    }

    private static native java.lang.Object newInstance0(java.lang.reflect.Constructor, java.lang.Object[]) throws java.lang.InstantiationException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException;
}
