public class sun.net.www.http.HttpClient extends sun.net.NetworkClient
{
    protected boolean cachedHttpClient;
    protected boolean inCache;
    sun.net.www.MessageHeader requests;
    sun.net.www.http.PosterOutputStream poster;
    boolean streaming;
    boolean failedOnce;
    private boolean ignoreContinue;
    private static final int HTTP_CONTINUE;
    static final int httpPortNumber;
    protected boolean proxyDisabled;
    public boolean usingProxy;
    protected java.lang.String host;
    protected int port;
    protected static sun.net.www.http.KeepAliveCache kac;
    private static boolean keepAliveProp;
    private static boolean retryPostProp;
    volatile boolean keepingAlive;
    int keepAliveConnections;
    int keepAliveTimeout;
    private java.net.CacheRequest cacheRequest;
    protected java.net.URL url;
    public boolean reuse;
    private sun.net.www.http.HttpCapture capture;
    private static final sun.util.logging.PlatformLogger logger;
    static final boolean $assertionsDisabled;

    protected int getDefaultPort()
    {
        sun.net.www.http.HttpClient r0;

        r0 := @this: sun.net.www.http.HttpClient;
        return 80;
    }

    private static int getDefaultPort(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;
        $r1 = "http";
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);
        if $z0 == 0 goto label0;

        return 80;

     label0:
        $r2 = "https";
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);
        if $z1 == 0 goto label1;

        return 443;

     label1:
        return -1;
    }

    private static void logFinest(java.lang.String)
    {
        java.lang.String r0;
        sun.util.logging.PlatformLogger $r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        $r1 = <sun.net.www.http.HttpClient: sun.util.logging.PlatformLogger logger>;
        $z0 = virtualinvoke $r1.<sun.util.logging.PlatformLogger: boolean isLoggable(int)>(300);
        if $z0 == 0 goto label0;

        $r2 = <sun.net.www.http.HttpClient: sun.util.logging.PlatformLogger logger>;
        virtualinvoke $r2.<sun.util.logging.PlatformLogger: void finest(java.lang.String)>(r0);

     label0:
        return;
    }

    public static synchronized void resetProperties()
    {
        return;
    }

    int getKeepAliveTimeout()
    {
        sun.net.www.http.HttpClient r0;
        int $i0;

        r0 := @this: sun.net.www.http.HttpClient;
        $i0 = r0.<sun.net.www.http.HttpClient: int keepAliveTimeout>;
        return $i0;
    }

    public boolean getHttpKeepAliveSet()
    {
        sun.net.www.http.HttpClient r0;
        boolean $z0;

        r0 := @this: sun.net.www.http.HttpClient;
        $z0 = <sun.net.www.http.HttpClient: boolean keepAliveProp>;
        return $z0;
    }

    protected void <init>()
    {
        sun.net.www.http.HttpClient r0;

        r0 := @this: sun.net.www.http.HttpClient;
        specialinvoke r0.<sun.net.NetworkClient: void <init>()>();
        r0.<sun.net.www.http.HttpClient: boolean cachedHttpClient> = 0;
        r0.<sun.net.www.http.HttpClient: sun.net.www.http.PosterOutputStream poster> = null;
        r0.<sun.net.www.http.HttpClient: boolean failedOnce> = 0;
        r0.<sun.net.www.http.HttpClient: boolean ignoreContinue> = 1;
        r0.<sun.net.www.http.HttpClient: boolean usingProxy> = 0;
        r0.<sun.net.www.http.HttpClient: boolean keepingAlive> = 0;
        r0.<sun.net.www.http.HttpClient: int keepAliveConnections> = -1;
        r0.<sun.net.www.http.HttpClient: int keepAliveTimeout> = 0;
        r0.<sun.net.www.http.HttpClient: java.net.CacheRequest cacheRequest> = null;
        r0.<sun.net.www.http.HttpClient: boolean reuse> = 0;
        r0.<sun.net.www.http.HttpClient: sun.net.www.http.HttpCapture capture> = null;
        return;
    }

    private void <init>(java.net.URL) throws java.io.IOException
    {
        sun.net.www.http.HttpClient r0;
        java.net.URL r1;
        java.lang.String $r2;

        r0 := @this: sun.net.www.http.HttpClient;
        r1 := @parameter0: java.net.URL;
        $r2 = (java.lang.String) null;
        specialinvoke r0.<sun.net.www.http.HttpClient: void <init>(java.net.URL,java.lang.String,int,boolean)>(r1, $r2, -1, 0);
        return;
    }

    protected void <init>(java.net.URL, boolean) throws java.io.IOException
    {
        sun.net.www.http.HttpClient r0;
        java.net.URL r1;
        boolean z0;

        r0 := @this: sun.net.www.http.HttpClient;
        r1 := @parameter0: java.net.URL;
        z0 := @parameter1: boolean;
        specialinvoke r0.<sun.net.www.http.HttpClient: void <init>(java.net.URL,java.lang.String,int,boolean)>(r1, null, -1, z0);
        return;
    }

    public void <init>(java.net.URL, java.lang.String, int) throws java.io.IOException
    {
        sun.net.www.http.HttpClient r0;
        java.net.URL r1;
        java.lang.String r2;
        int i0;

        r0 := @this: sun.net.www.http.HttpClient;
        r1 := @parameter0: java.net.URL;
        r2 := @parameter1: java.lang.String;
        i0 := @parameter2: int;
        specialinvoke r0.<sun.net.www.http.HttpClient: void <init>(java.net.URL,java.lang.String,int,boolean)>(r1, r2, i0, 0);
        return;
    }

    protected void <init>(java.net.URL, java.net.Proxy, int) throws java.io.IOException
    {
        sun.net.www.http.HttpClient r0;
        java.net.URL r1;
        java.net.Proxy r2, $r4;
        int i0, $i1, $i2, $i3;
        java.lang.String $r5;
        sun.net.www.http.HttpCapture $r6;

        r0 := @this: sun.net.www.http.HttpClient;
        r1 := @parameter0: java.net.URL;
        r2 := @parameter1: java.net.Proxy;
        i0 := @parameter2: int;
        specialinvoke r0.<sun.net.NetworkClient: void <init>()>();
        r0.<sun.net.www.http.HttpClient: boolean cachedHttpClient> = 0;
        r0.<sun.net.www.http.HttpClient: sun.net.www.http.PosterOutputStream poster> = null;
        r0.<sun.net.www.http.HttpClient: boolean failedOnce> = 0;
        r0.<sun.net.www.http.HttpClient: boolean ignoreContinue> = 1;
        r0.<sun.net.www.http.HttpClient: boolean usingProxy> = 0;
        r0.<sun.net.www.http.HttpClient: boolean keepingAlive> = 0;
        r0.<sun.net.www.http.HttpClient: int keepAliveConnections> = -1;
        r0.<sun.net.www.http.HttpClient: int keepAliveTimeout> = 0;
        r0.<sun.net.www.http.HttpClient: java.net.CacheRequest cacheRequest> = null;
        r0.<sun.net.www.http.HttpClient: boolean reuse> = 0;
        r0.<sun.net.www.http.HttpClient: sun.net.www.http.HttpCapture capture> = null;
        if r2 != null goto label0;

        $r4 = <java.net.Proxy: java.net.Proxy NO_PROXY>;
        goto label1;

     label0:
        $r4 = r2;

     label1:
        r0.<sun.net.www.http.HttpClient: java.net.Proxy proxy> = $r4;
        $r5 = virtualinvoke r1.<java.net.URL: java.lang.String getHost()>();
        r0.<sun.net.www.http.HttpClient: java.lang.String host> = $r5;
        r0.<sun.net.www.http.HttpClient: java.net.URL url> = r1;
        $i1 = virtualinvoke r1.<java.net.URL: int getPort()>();
        r0.<sun.net.www.http.HttpClient: int port> = $i1;
        $i2 = r0.<sun.net.www.http.HttpClient: int port>;
        if $i2 != -1 goto label2;

        $i3 = virtualinvoke r0.<sun.net.www.http.HttpClient: int getDefaultPort()>();
        r0.<sun.net.www.http.HttpClient: int port> = $i3;

     label2:
        virtualinvoke r0.<sun.net.www.http.HttpClient: void setConnectTimeout(int)>(i0);
        $r6 = staticinvoke <sun.net.www.http.HttpCapture: sun.net.www.http.HttpCapture getCapture(java.net.URL)>(r1);
        r0.<sun.net.www.http.HttpClient: sun.net.www.http.HttpCapture capture> = $r6;
        virtualinvoke r0.<sun.net.www.http.HttpClient: void openServer()>();
        return;
    }

    protected static java.net.Proxy newHttpProxy(java.lang.String, int, java.lang.String)
    {
        java.lang.String r0, r1;
        int i0, i1, $i2;
        java.net.InetSocketAddress r2;
        java.net.Proxy$Type $r3;
        java.net.Proxy $r4, $r5;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r1 := @parameter2: java.lang.String;
        if r0 == null goto label0;

        if r1 != null goto label1;

     label0:
        $r4 = <java.net.Proxy: java.net.Proxy NO_PROXY>;
        return $r4;

     label1:
        if i0 >= 0 goto label2;

        $i2 = staticinvoke <sun.net.www.http.HttpClient: int getDefaultPort(java.lang.String)>(r1);
        goto label3;

     label2:
        $i2 = i0;

     label3:
        i1 = $i2;
        r2 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>(r0, i1);
        $r5 = new java.net.Proxy;
        $r3 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP>;
        specialinvoke $r5.<java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>($r3, r2);
        return $r5;
    }

    private void <init>(java.net.URL, java.lang.String, int, boolean) throws java.io.IOException
    {
        sun.net.www.http.HttpClient r0;
        java.net.URL r1;
        java.lang.String r2;
        int i0;
        boolean z0;
        java.net.Proxy $r5;

        r0 := @this: sun.net.www.http.HttpClient;
        r1 := @parameter0: java.net.URL;
        r2 := @parameter1: java.lang.String;
        i0 := @parameter2: int;
        z0 := @parameter3: boolean;
        if z0 == 0 goto label0;

        $r5 = <java.net.Proxy: java.net.Proxy NO_PROXY>;
        goto label1;

     label0:
        $r5 = staticinvoke <sun.net.www.http.HttpClient: java.net.Proxy newHttpProxy(java.lang.String,int,java.lang.String)>(r2, i0, "http");

     label1:
        specialinvoke r0.<sun.net.www.http.HttpClient: void <init>(java.net.URL,java.net.Proxy,int)>(r1, $r5, -1);
        return;
    }

    public void <init>(java.net.URL, java.lang.String, int, boolean, int) throws java.io.IOException
    {
        sun.net.www.http.HttpClient r0;
        java.net.URL r1;
        java.lang.String r2;
        int i0, i1;
        boolean z0;
        java.net.Proxy $r5;

        r0 := @this: sun.net.www.http.HttpClient;
        r1 := @parameter0: java.net.URL;
        r2 := @parameter1: java.lang.String;
        i0 := @parameter2: int;
        z0 := @parameter3: boolean;
        i1 := @parameter4: int;
        if z0 == 0 goto label0;

        $r5 = <java.net.Proxy: java.net.Proxy NO_PROXY>;
        goto label1;

     label0:
        $r5 = staticinvoke <sun.net.www.http.HttpClient: java.net.Proxy newHttpProxy(java.lang.String,int,java.lang.String)>(r2, i0, "http");

     label1:
        specialinvoke r0.<sun.net.www.http.HttpClient: void <init>(java.net.URL,java.net.Proxy,int)>(r1, $r5, i1);
        return;
    }

    public static sun.net.www.http.HttpClient New(java.net.URL) throws java.io.IOException
    {
        java.net.URL r0;
        java.net.Proxy $r1;
        sun.net.www.http.HttpClient $r2;

        r0 := @parameter0: java.net.URL;
        $r1 = <java.net.Proxy: java.net.Proxy NO_PROXY>;
        $r2 = staticinvoke <sun.net.www.http.HttpClient: sun.net.www.http.HttpClient New(java.net.URL,java.net.Proxy,int,boolean,sun.net.www.protocol.http.HttpURLConnection)>(r0, $r1, -1, 1, null);
        return $r2;
    }

    public static sun.net.www.http.HttpClient New(java.net.URL, boolean) throws java.io.IOException
    {
        java.net.URL r0;
        boolean z0;
        java.net.Proxy $r1;
        sun.net.www.http.HttpClient $r2;

        r0 := @parameter0: java.net.URL;
        z0 := @parameter1: boolean;
        $r1 = <java.net.Proxy: java.net.Proxy NO_PROXY>;
        $r2 = staticinvoke <sun.net.www.http.HttpClient: sun.net.www.http.HttpClient New(java.net.URL,java.net.Proxy,int,boolean,sun.net.www.protocol.http.HttpURLConnection)>(r0, $r1, -1, z0, null);
        return $r2;
    }

    public static sun.net.www.http.HttpClient New(java.net.URL, java.net.Proxy, int, boolean, sun.net.www.protocol.http.HttpURLConnection) throws java.io.IOException
    {
        java.net.URL r0;
        java.net.Proxy r1, $r9, $r10, $r11, $r25, $r26, $r27;
        int i0, $i1, $i2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        sun.net.www.protocol.http.HttpURLConnection r2;
        sun.net.www.http.HttpClient r3, r4, r21, $r23;
        java.lang.Throwable r5, r6, $r19, $r22;
        sun.net.www.http.KeepAliveCache $r7;
        java.lang.String $r8, $r18, $r28, $r30, $r31;
        java.lang.AssertionError $r13;
        sun.net.www.protocol.http.HttpURLConnection$TunnelState $r14;
        java.lang.StringBuilder $r15, $r16, $r17;
        java.lang.SecurityManager r24;
        java.net.InetAddress $r29;

        r0 := @parameter0: java.net.URL;
        r1 := @parameter1: java.net.Proxy;
        i0 := @parameter2: int;
        z0 := @parameter3: boolean;
        r2 := @parameter4: sun.net.www.protocol.http.HttpURLConnection;
        if r1 != null goto label0;

        r1 = <java.net.Proxy: java.net.Proxy NO_PROXY>;

     label0:
        r3 = null;
        if z0 == 0 goto label19;

        $r7 = <sun.net.www.http.HttpClient: sun.net.www.http.KeepAliveCache kac>;
        r3 = virtualinvoke $r7.<sun.net.www.http.KeepAliveCache: sun.net.www.http.HttpClient get(java.net.URL,java.lang.Object)>(r0, null);
        if r3 == null goto label1;

        if r2 == null goto label1;

        $z1 = virtualinvoke r2.<sun.net.www.protocol.http.HttpURLConnection: boolean streaming()>();
        if $z1 == 0 goto label1;

        $r8 = virtualinvoke r2.<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getRequestMethod()>();
        if $r8 != "POST" goto label1;

        $z2 = virtualinvoke r3.<sun.net.www.http.HttpClient: boolean available()>();
        if $z2 != 0 goto label1;

        r3.<sun.net.www.http.HttpClient: boolean inCache> = 0;
        virtualinvoke r3.<sun.net.www.http.HttpClient: void closeServer()>();
        r3 = null;

     label1:
        if r3 == null goto label19;

        $r9 = r3.<sun.net.www.http.HttpClient: java.net.Proxy proxy>;
        if $r9 == null goto label2;

        $r10 = r3.<sun.net.www.http.HttpClient: java.net.Proxy proxy>;
        $z3 = virtualinvoke $r10.<java.net.Proxy: boolean equals(java.lang.Object)>(r1);
        if $z3 != 0 goto label3;

     label2:
        $r11 = r3.<sun.net.www.http.HttpClient: java.net.Proxy proxy>;
        if $r11 != null goto label12;

        if r1 != null goto label12;

     label3:
        r4 = r3;
        entermonitor r3;

     label4:
        r3.<sun.net.www.http.HttpClient: boolean cachedHttpClient> = 1;
        $z4 = <sun.net.www.http.HttpClient: boolean $assertionsDisabled>;
        if $z4 != 0 goto label5;

        $z5 = r3.<sun.net.www.http.HttpClient: boolean inCache>;
        if $z5 != 0 goto label5;

        $r13 = new java.lang.AssertionError;
        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();
        throw $r13;

     label5:
        r3.<sun.net.www.http.HttpClient: boolean inCache> = 0;
        if r2 == null goto label6;

        $z6 = virtualinvoke r3.<sun.net.www.http.HttpClient: boolean needsTunneling()>();
        if $z6 == 0 goto label6;

        $r14 = <sun.net.www.protocol.http.HttpURLConnection$TunnelState: sun.net.www.protocol.http.HttpURLConnection$TunnelState TUNNELING>;
        virtualinvoke r2.<sun.net.www.protocol.http.HttpURLConnection: void setTunnelState(sun.net.www.protocol.http.HttpURLConnection$TunnelState)>($r14);

     label6:
        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KeepAlive stream retrieved from the cache, ");
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <sun.net.www.http.HttpClient: void logFinest(java.lang.String)>($r18);
        exitmonitor r4;

     label7:
        goto label11;

     label8:
        $r19 := @caughtexception;

     label9:
        r5 = $r19;
        exitmonitor r4;

     label10:
        throw r5;

     label11:
        goto label19;

     label12:
        r21 = r3;
        entermonitor r3;

     label13:
        r3.<sun.net.www.http.HttpClient: boolean inCache> = 0;
        virtualinvoke r3.<sun.net.www.http.HttpClient: void closeServer()>();
        exitmonitor r21;

     label14:
        goto label18;

     label15:
        $r22 := @caughtexception;

     label16:
        r6 = $r22;
        exitmonitor r21;

     label17:
        throw r6;

     label18:
        r3 = null;

     label19:
        if r3 != null goto label20;

        $r23 = new sun.net.www.http.HttpClient;
        specialinvoke $r23.<sun.net.www.http.HttpClient: void <init>(java.net.URL,java.net.Proxy,int)>(r0, r1, i0);
        r3 = $r23;
        goto label24;

     label20:
        r24 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r24 == null goto label23;

        $r25 = r3.<sun.net.www.http.HttpClient: java.net.Proxy proxy>;
        $r26 = <java.net.Proxy: java.net.Proxy NO_PROXY>;
        if $r25 == $r26 goto label21;

        $r27 = r3.<sun.net.www.http.HttpClient: java.net.Proxy proxy>;
        if $r27 != null goto label22;

     label21:
        $r28 = virtualinvoke r0.<java.net.URL: java.lang.String getHost()>();
        $r29 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r28);
        $r30 = virtualinvoke $r29.<java.net.InetAddress: java.lang.String getHostAddress()>();
        $i1 = virtualinvoke r0.<java.net.URL: int getPort()>();
        virtualinvoke r24.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>($r30, $i1);
        goto label23;

     label22:
        $r31 = virtualinvoke r0.<java.net.URL: java.lang.String getHost()>();
        $i2 = virtualinvoke r0.<java.net.URL: int getPort()>();
        virtualinvoke r24.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>($r31, $i2);

     label23:
        r3.<sun.net.www.http.HttpClient: java.net.URL url> = r0;

     label24:
        return r3;

        catch java.lang.Throwable from label4 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public static sun.net.www.http.HttpClient New(java.net.URL, java.net.Proxy, int, sun.net.www.protocol.http.HttpURLConnection) throws java.io.IOException
    {
        java.net.URL r0;
        java.net.Proxy r1;
        int i0;
        sun.net.www.protocol.http.HttpURLConnection r2;
        sun.net.www.http.HttpClient $r3;

        r0 := @parameter0: java.net.URL;
        r1 := @parameter1: java.net.Proxy;
        i0 := @parameter2: int;
        r2 := @parameter3: sun.net.www.protocol.http.HttpURLConnection;
        $r3 = staticinvoke <sun.net.www.http.HttpClient: sun.net.www.http.HttpClient New(java.net.URL,java.net.Proxy,int,boolean,sun.net.www.protocol.http.HttpURLConnection)>(r0, r1, i0, 1, r2);
        return $r3;
    }

    public static sun.net.www.http.HttpClient New(java.net.URL, java.lang.String, int, boolean) throws java.io.IOException
    {
        java.net.URL r0;
        java.lang.String r1;
        int i0;
        boolean z0;
        java.net.Proxy $r2;
        sun.net.www.http.HttpClient $r3;

        r0 := @parameter0: java.net.URL;
        r1 := @parameter1: java.lang.String;
        i0 := @parameter2: int;
        z0 := @parameter3: boolean;
        $r2 = staticinvoke <sun.net.www.http.HttpClient: java.net.Proxy newHttpProxy(java.lang.String,int,java.lang.String)>(r1, i0, "http");
        $r3 = staticinvoke <sun.net.www.http.HttpClient: sun.net.www.http.HttpClient New(java.net.URL,java.net.Proxy,int,boolean,sun.net.www.protocol.http.HttpURLConnection)>(r0, $r2, -1, z0, null);
        return $r3;
    }

    public static sun.net.www.http.HttpClient New(java.net.URL, java.lang.String, int, boolean, int, sun.net.www.protocol.http.HttpURLConnection) throws java.io.IOException
    {
        java.net.URL r0;
        java.lang.String r1;
        int i0, i1;
        boolean z0;
        sun.net.www.protocol.http.HttpURLConnection r2;
        java.net.Proxy $r3;
        sun.net.www.http.HttpClient $r4;

        r0 := @parameter0: java.net.URL;
        r1 := @parameter1: java.lang.String;
        i0 := @parameter2: int;
        z0 := @parameter3: boolean;
        i1 := @parameter4: int;
        r2 := @parameter5: sun.net.www.protocol.http.HttpURLConnection;
        $r3 = staticinvoke <sun.net.www.http.HttpClient: java.net.Proxy newHttpProxy(java.lang.String,int,java.lang.String)>(r1, i0, "http");
        $r4 = staticinvoke <sun.net.www.http.HttpClient: sun.net.www.http.HttpClient New(java.net.URL,java.net.Proxy,int,boolean,sun.net.www.protocol.http.HttpURLConnection)>(r0, $r3, i1, z0, r2);
        return $r4;
    }

    public void finished()
    {
        sun.net.www.http.HttpClient r0;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2;
        java.io.PrintStream $r2;

        r0 := @this: sun.net.www.http.HttpClient;
        $z0 = r0.<sun.net.www.http.HttpClient: boolean reuse>;
        if $z0 == 0 goto label0;

        return;

     label0:
        $i0 = r0.<sun.net.www.http.HttpClient: int keepAliveConnections>;
        $i1 = $i0 - 1;
        r0.<sun.net.www.http.HttpClient: int keepAliveConnections> = $i1;
        r0.<sun.net.www.http.HttpClient: sun.net.www.http.PosterOutputStream poster> = null;
        $i2 = r0.<sun.net.www.http.HttpClient: int keepAliveConnections>;
        if $i2 <= 0 goto label1;

        $z1 = virtualinvoke r0.<sun.net.www.http.HttpClient: boolean isKeepingAlive()>();
        if $z1 == 0 goto label1;

        $r2 = r0.<sun.net.www.http.HttpClient: java.io.PrintStream serverOutput>;
        $z2 = virtualinvoke $r2.<java.io.PrintStream: boolean checkError()>();
        if $z2 != 0 goto label1;

        virtualinvoke r0.<sun.net.www.http.HttpClient: void putInKeepAliveCache()>();
        goto label2;

     label1:
        virtualinvoke r0.<sun.net.www.http.HttpClient: void closeServer()>();

     label2:
        return;
    }

    protected synchronized boolean available()
    {
        sun.net.www.http.HttpClient r0;
        boolean z0;
        int i0, i1;
        java.io.BufferedInputStream r1, $r5;
        java.lang.Throwable r2, $r12;
        java.net.Socket $r3, $r4, $r6, $r8, $r11, $r13;
        java.io.InputStream $r7;
        java.net.SocketTimeoutException $r9, r10;
        java.io.IOException $r14, r15;

        r0 := @this: sun.net.www.http.HttpClient;
        z0 = 1;
        i0 = -1;

     label0:
        $r3 = r0.<sun.net.www.http.HttpClient: java.net.Socket serverSocket>;
        i0 = virtualinvoke $r3.<java.net.Socket: int getSoTimeout()>();
        $r4 = r0.<sun.net.www.http.HttpClient: java.net.Socket serverSocket>;
        virtualinvoke $r4.<java.net.Socket: void setSoTimeout(int)>(1);
        $r5 = new java.io.BufferedInputStream;
        $r6 = r0.<sun.net.www.http.HttpClient: java.net.Socket serverSocket>;
        $r7 = virtualinvoke $r6.<java.net.Socket: java.io.InputStream getInputStream()>();
        specialinvoke $r5.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r7);
        r1 = $r5;
        i1 = virtualinvoke r1.<java.io.BufferedInputStream: int read()>();
        if i1 != -1 goto label1;

        staticinvoke <sun.net.www.http.HttpClient: void logFinest(java.lang.String)>("HttpClient.available(): read returned -1: not available");
        z0 = 0;

     label1:
        if i0 == -1 goto label9;

        $r8 = r0.<sun.net.www.http.HttpClient: java.net.Socket serverSocket>;
        virtualinvoke $r8.<java.net.Socket: void setSoTimeout(int)>(i0);
        goto label9;

     label2:
        $r9 := @caughtexception;

     label3:
        r10 = $r9;
        staticinvoke <sun.net.www.http.HttpClient: void logFinest(java.lang.String)>("HttpClient.available(): SocketTimeout: its available");

     label4:
        if i0 == -1 goto label9;

        $r11 = r0.<sun.net.www.http.HttpClient: java.net.Socket serverSocket>;
        virtualinvoke $r11.<java.net.Socket: void setSoTimeout(int)>(i0);
        goto label9;

     label5:
        $r12 := @caughtexception;

     label6:
        r2 = $r12;

     label7:
        if i0 == -1 goto label8;

        $r13 = r0.<sun.net.www.http.HttpClient: java.net.Socket serverSocket>;
        virtualinvoke $r13.<java.net.Socket: void setSoTimeout(int)>(i0);

     label8:
        throw r2;

     label9:
        goto label11;

     label10:
        $r14 := @caughtexception;
        r15 = $r14;
        staticinvoke <sun.net.www.http.HttpClient: void logFinest(java.lang.String)>("HttpClient.available(): SocketException: not available");
        z0 = 0;

     label11:
        return z0;

        catch java.net.SocketTimeoutException from label0 to label1 with label2;
        catch java.lang.Throwable from label0 to label1 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.io.IOException from label0 to label9 with label10;
    }

    protected synchronized void putInKeepAliveCache()
    {
        sun.net.www.http.HttpClient r0;
        boolean $z0, $z1;
        java.lang.AssertionError $r1;
        sun.net.www.http.KeepAliveCache $r2;
        java.net.URL $r3;

        r0 := @this: sun.net.www.http.HttpClient;
        $z0 = r0.<sun.net.www.http.HttpClient: boolean inCache>;
        if $z0 == 0 goto label1;

        $z1 = <sun.net.www.http.HttpClient: boolean $assertionsDisabled>;
        if $z1 != 0 goto label0;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("Duplicate put to keep alive cache");
        throw $r1;

     label0:
        return;

     label1:
        r0.<sun.net.www.http.HttpClient: boolean inCache> = 1;
        $r2 = <sun.net.www.http.HttpClient: sun.net.www.http.KeepAliveCache kac>;
        $r3 = r0.<sun.net.www.http.HttpClient: java.net.URL url>;
        virtualinvoke $r2.<sun.net.www.http.KeepAliveCache: void put(java.net.URL,java.lang.Object,sun.net.www.http.HttpClient)>($r3, null, r0);
        return;
    }

    protected synchronized boolean isInKeepAliveCache()
    {
        sun.net.www.http.HttpClient r0;
        boolean $z0;

        r0 := @this: sun.net.www.http.HttpClient;
        $z0 = r0.<sun.net.www.http.HttpClient: boolean inCache>;
        return $z0;
    }

    public void closeIdleConnection()
    {
        sun.net.www.http.HttpClient r0, r2;
        sun.net.www.http.KeepAliveCache $r1;
        java.net.URL $r3;

        r0 := @this: sun.net.www.http.HttpClient;
        $r1 = <sun.net.www.http.HttpClient: sun.net.www.http.KeepAliveCache kac>;
        $r3 = r0.<sun.net.www.http.HttpClient: java.net.URL url>;
        r2 = virtualinvoke $r1.<sun.net.www.http.KeepAliveCache: sun.net.www.http.HttpClient get(java.net.URL,java.lang.Object)>($r3, null);
        if r2 == null goto label0;

        virtualinvoke r2.<sun.net.www.http.HttpClient: void closeServer()>();

     label0:
        return;
    }

    public void openServer(java.lang.String, int) throws java.io.IOException
    {
        sun.net.www.http.HttpClient r0;
        java.lang.String r1, $r10, $r15, $r18;
        int i0;
        java.io.OutputStream r2;
        java.net.Socket $r3, $r4, $r19;
        sun.net.www.http.HttpCapture $r5, $r7;
        sun.net.www.http.HttpCaptureOutputStream $r6;
        java.io.PrintStream $r8;
        java.io.BufferedOutputStream $r9;
        java.io.UnsupportedEncodingException $r11, r12;
        java.lang.InternalError $r13;
        java.lang.StringBuilder $r14, $r16, $r17;

        r0 := @this: sun.net.www.http.HttpClient;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        $r3 = virtualinvoke r0.<sun.net.www.http.HttpClient: java.net.Socket doConnect(java.lang.String,int)>(r1, i0);
        r0.<sun.net.www.http.HttpClient: java.net.Socket serverSocket> = $r3;

     label0:
        $r4 = r0.<sun.net.www.http.HttpClient: java.net.Socket serverSocket>;
        r2 = virtualinvoke $r4.<java.net.Socket: java.io.OutputStream getOutputStream()>();
        $r5 = r0.<sun.net.www.http.HttpClient: sun.net.www.http.HttpCapture capture>;
        if $r5 == null goto label1;

        $r6 = new sun.net.www.http.HttpCaptureOutputStream;
        $r7 = r0.<sun.net.www.http.HttpClient: sun.net.www.http.HttpCapture capture>;
        specialinvoke $r6.<sun.net.www.http.HttpCaptureOutputStream: void <init>(java.io.OutputStream,sun.net.www.http.HttpCapture)>(r2, $r7);
        r2 = $r6;

     label1:
        $r8 = new java.io.PrintStream;
        $r9 = new java.io.BufferedOutputStream;
        specialinvoke $r9.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(r2);
        $r10 = <sun.net.www.http.HttpClient: java.lang.String encoding>;
        specialinvoke $r8.<java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>($r9, 0, $r10);
        r0.<sun.net.www.http.HttpClient: java.io.PrintStream serverOutput> = $r8;

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;
        r12 = $r11;
        $r13 = new java.lang.InternalError;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = <sun.net.www.http.HttpClient: java.lang.String encoding>;
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" encoding not found");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r13.<java.lang.InternalError: void <init>(java.lang.String)>($r18);
        throw $r13;

     label4:
        $r19 = r0.<sun.net.www.http.HttpClient: java.net.Socket serverSocket>;
        virtualinvoke $r19.<java.net.Socket: void setTcpNoDelay(boolean)>(1);
        return;

        catch java.io.UnsupportedEncodingException from label0 to label2 with label3;
    }

    public boolean needsTunneling()
    {
        sun.net.www.http.HttpClient r0;

        r0 := @this: sun.net.www.http.HttpClient;
        return 0;
    }

    public synchronized boolean isCachedConnection()
    {
        sun.net.www.http.HttpClient r0;
        boolean $z0;

        r0 := @this: sun.net.www.http.HttpClient;
        $z0 = r0.<sun.net.www.http.HttpClient: boolean cachedHttpClient>;
        return $z0;
    }

    public void afterConnect() throws java.io.IOException, java.net.UnknownHostException
    {
        sun.net.www.http.HttpClient r0;

        r0 := @this: sun.net.www.http.HttpClient;
        return;
    }

    private synchronized void privilegedOpenServer(java.net.InetSocketAddress) throws java.io.IOException
    {
        sun.net.www.http.HttpClient r0;
        java.net.InetSocketAddress r1;
        sun.net.www.http.HttpClient$1 $r2;
        java.security.PrivilegedActionException r3, $r5;
        java.lang.Exception $r6;
        java.io.IOException $r7;

        r0 := @this: sun.net.www.http.HttpClient;
        r1 := @parameter0: java.net.InetSocketAddress;

     label0:
        $r2 = new sun.net.www.http.HttpClient$1;
        specialinvoke $r2.<sun.net.www.http.HttpClient$1: void <init>(sun.net.www.http.HttpClient,java.net.InetSocketAddress)>(r0, r1);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r2);

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r3 = $r5;
        $r6 = virtualinvoke r3.<java.security.PrivilegedActionException: java.lang.Exception getException()>();
        $r7 = (java.io.IOException) $r6;
        throw $r7;

     label3:
        return;

        catch java.security.PrivilegedActionException from label0 to label1 with label2;
    }

    private void superOpenServer(java.lang.String, int) throws java.io.IOException, java.net.UnknownHostException
    {
        sun.net.www.http.HttpClient r0;
        java.lang.String r1;
        int i0;

        r0 := @this: sun.net.www.http.HttpClient;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        specialinvoke r0.<sun.net.NetworkClient: void openServer(java.lang.String,int)>(r1, i0);
        return;
    }

    protected synchronized void openServer() throws java.io.IOException
    {
        sun.net.www.http.HttpClient r0;
        java.lang.SecurityManager r1;
        java.lang.String $r2, $r4, $r6, $r11, $r15, $r20, $r24;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2;
        java.net.URL $r3, $r5;
        java.net.Proxy $r7, $r8, $r12, $r16, $r17, $r21;
        java.net.Proxy$Type $r9, $r10, $r18, $r19;
        java.net.SocketAddress $r13, $r22;
        java.net.InetSocketAddress $r14, $r23;

        r0 := @this: sun.net.www.http.HttpClient;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = r0.<sun.net.www.http.HttpClient: java.lang.String host>;
        $i0 = r0.<sun.net.www.http.HttpClient: int port>;
        virtualinvoke r1.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>($r2, $i0);

     label0:
        $z0 = r0.<sun.net.www.http.HttpClient: boolean keepingAlive>;
        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<sun.net.www.http.HttpClient: java.net.URL url>;
        $r4 = virtualinvoke $r3.<java.net.URL: java.lang.String getProtocol()>();
        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("http");
        if $z1 != 0 goto label2;

        $r5 = r0.<sun.net.www.http.HttpClient: java.net.URL url>;
        $r6 = virtualinvoke $r5.<java.net.URL: java.lang.String getProtocol()>();
        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("https");
        if $z2 == 0 goto label4;

     label2:
        $r7 = r0.<sun.net.www.http.HttpClient: java.net.Proxy proxy>;
        if $r7 == null goto label3;

        $r8 = r0.<sun.net.www.http.HttpClient: java.net.Proxy proxy>;
        $r9 = virtualinvoke $r8.<java.net.Proxy: java.net.Proxy$Type type()>();
        $r10 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP>;
        if $r9 != $r10 goto label3;

        $r11 = r0.<sun.net.www.http.HttpClient: java.lang.String host>;
        staticinvoke <sun.net.www.URLConnection: void setProxiedHost(java.lang.String)>($r11);
        $r12 = r0.<sun.net.www.http.HttpClient: java.net.Proxy proxy>;
        $r13 = virtualinvoke $r12.<java.net.Proxy: java.net.SocketAddress address()>();
        $r14 = (java.net.InetSocketAddress) $r13;
        specialinvoke r0.<sun.net.www.http.HttpClient: void privilegedOpenServer(java.net.InetSocketAddress)>($r14);
        r0.<sun.net.www.http.HttpClient: boolean usingProxy> = 1;
        return;

     label3:
        $r15 = r0.<sun.net.www.http.HttpClient: java.lang.String host>;
        $i1 = r0.<sun.net.www.http.HttpClient: int port>;
        virtualinvoke r0.<sun.net.www.http.HttpClient: void openServer(java.lang.String,int)>($r15, $i1);
        r0.<sun.net.www.http.HttpClient: boolean usingProxy> = 0;
        return;

     label4:
        $r16 = r0.<sun.net.www.http.HttpClient: java.net.Proxy proxy>;
        if $r16 == null goto label5;

        $r17 = r0.<sun.net.www.http.HttpClient: java.net.Proxy proxy>;
        $r18 = virtualinvoke $r17.<java.net.Proxy: java.net.Proxy$Type type()>();
        $r19 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP>;
        if $r18 != $r19 goto label5;

        $r20 = r0.<sun.net.www.http.HttpClient: java.lang.String host>;
        staticinvoke <sun.net.www.URLConnection: void setProxiedHost(java.lang.String)>($r20);
        $r21 = r0.<sun.net.www.http.HttpClient: java.net.Proxy proxy>;
        $r22 = virtualinvoke $r21.<java.net.Proxy: java.net.SocketAddress address()>();
        $r23 = (java.net.InetSocketAddress) $r22;
        specialinvoke r0.<sun.net.www.http.HttpClient: void privilegedOpenServer(java.net.InetSocketAddress)>($r23);
        r0.<sun.net.www.http.HttpClient: boolean usingProxy> = 1;
        return;

     label5:
        $r24 = r0.<sun.net.www.http.HttpClient: java.lang.String host>;
        $i2 = r0.<sun.net.www.http.HttpClient: int port>;
        specialinvoke r0.<sun.net.NetworkClient: void openServer(java.lang.String,int)>($r24, $i2);
        r0.<sun.net.www.http.HttpClient: boolean usingProxy> = 0;
        return;
    }

    public java.lang.String getURLFile() throws java.io.IOException
    {
        sun.net.www.http.HttpClient r0;
        java.lang.String r1, $r6, $r10, $r12, $r15, $r18, $r20, $r23, $r26;
        java.lang.StringBuffer r2, $r4;
        java.net.URL $r3, $r5, $r9, $r11, $r14, $r17, $r19, $r22, $r25;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        java.net.MalformedURLException $r28;

        r0 := @this: sun.net.www.http.HttpClient;
        $r3 = r0.<sun.net.www.http.HttpClient: java.net.URL url>;
        r1 = virtualinvoke $r3.<java.net.URL: java.lang.String getFile()>();
        if r1 == null goto label0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i0 != 0 goto label1;

     label0:
        r1 = "/";

     label1:
        $z0 = r0.<sun.net.www.http.HttpClient: boolean usingProxy>;
        if $z0 == 0 goto label5;

        $z1 = r0.<sun.net.www.http.HttpClient: boolean proxyDisabled>;
        if $z1 != 0 goto label5;

        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>(128);
        r2 = $r4;
        $r5 = r0.<sun.net.www.http.HttpClient: java.net.URL url>;
        $r6 = virtualinvoke $r5.<java.net.URL: java.lang.String getProtocol()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");
        $r9 = r0.<sun.net.www.http.HttpClient: java.net.URL url>;
        $r10 = virtualinvoke $r9.<java.net.URL: java.lang.String getAuthority()>();
        if $r10 == null goto label2;

        $r11 = r0.<sun.net.www.http.HttpClient: java.net.URL url>;
        $r12 = virtualinvoke $r11.<java.net.URL: java.lang.String getAuthority()>();
        $i1 = virtualinvoke $r12.<java.lang.String: int length()>();
        if $i1 <= 0 goto label2;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("//");
        $r14 = r0.<sun.net.www.http.HttpClient: java.net.URL url>;
        $r15 = virtualinvoke $r14.<java.net.URL: java.lang.String getAuthority()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

     label2:
        $r17 = r0.<sun.net.www.http.HttpClient: java.net.URL url>;
        $r18 = virtualinvoke $r17.<java.net.URL: java.lang.String getPath()>();
        if $r18 == null goto label3;

        $r19 = r0.<sun.net.www.http.HttpClient: java.net.URL url>;
        $r20 = virtualinvoke $r19.<java.net.URL: java.lang.String getPath()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

     label3:
        $r22 = r0.<sun.net.www.http.HttpClient: java.net.URL url>;
        $r23 = virtualinvoke $r22.<java.net.URL: java.lang.String getQuery()>();
        if $r23 == null goto label4;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(63);
        $r25 = r0.<sun.net.www.http.HttpClient: java.net.URL url>;
        $r26 = virtualinvoke $r25.<java.net.URL: java.lang.String getQuery()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

     label4:
        r1 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

     label5:
        $i2 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(10);
        if $i2 != -1 goto label6;

        return r1;

     label6:
        $r28 = new java.net.MalformedURLException;
        specialinvoke $r28.<java.net.MalformedURLException: void <init>(java.lang.String)>("Illegal character in URL");
        throw $r28;
    }

    public void writeRequests(sun.net.www.MessageHeader)
    {
        sun.net.www.http.HttpClient r0;
        sun.net.www.MessageHeader r1, $r2;
        java.io.PrintStream $r3, $r4;

        r0 := @this: sun.net.www.http.HttpClient;
        r1 := @parameter0: sun.net.www.MessageHeader;
        r0.<sun.net.www.http.HttpClient: sun.net.www.MessageHeader requests> = r1;
        $r2 = r0.<sun.net.www.http.HttpClient: sun.net.www.MessageHeader requests>;
        $r3 = r0.<sun.net.www.http.HttpClient: java.io.PrintStream serverOutput>;
        virtualinvoke $r2.<sun.net.www.MessageHeader: void print(java.io.PrintStream)>($r3);
        $r4 = r0.<sun.net.www.http.HttpClient: java.io.PrintStream serverOutput>;
        virtualinvoke $r4.<java.io.PrintStream: void flush()>();
        return;
    }

    public void writeRequests(sun.net.www.MessageHeader, sun.net.www.http.PosterOutputStream) throws java.io.IOException
    {
        sun.net.www.http.HttpClient r0;
        sun.net.www.MessageHeader r1, $r3;
        sun.net.www.http.PosterOutputStream r2, $r5, $r6;
        java.io.PrintStream $r4, $r7, $r8;

        r0 := @this: sun.net.www.http.HttpClient;
        r1 := @parameter0: sun.net.www.MessageHeader;
        r2 := @parameter1: sun.net.www.http.PosterOutputStream;
        r0.<sun.net.www.http.HttpClient: sun.net.www.MessageHeader requests> = r1;
        $r3 = r0.<sun.net.www.http.HttpClient: sun.net.www.MessageHeader requests>;
        $r4 = r0.<sun.net.www.http.HttpClient: java.io.PrintStream serverOutput>;
        virtualinvoke $r3.<sun.net.www.MessageHeader: void print(java.io.PrintStream)>($r4);
        r0.<sun.net.www.http.HttpClient: sun.net.www.http.PosterOutputStream poster> = r2;
        $r5 = r0.<sun.net.www.http.HttpClient: sun.net.www.http.PosterOutputStream poster>;
        if $r5 == null goto label0;

        $r6 = r0.<sun.net.www.http.HttpClient: sun.net.www.http.PosterOutputStream poster>;
        $r7 = r0.<sun.net.www.http.HttpClient: java.io.PrintStream serverOutput>;
        virtualinvoke $r6.<sun.net.www.http.PosterOutputStream: void writeTo(java.io.OutputStream)>($r7);

     label0:
        $r8 = r0.<sun.net.www.http.HttpClient: java.io.PrintStream serverOutput>;
        virtualinvoke $r8.<java.io.PrintStream: void flush()>();
        return;
    }

    public void writeRequests(sun.net.www.MessageHeader, sun.net.www.http.PosterOutputStream, boolean) throws java.io.IOException
    {
        sun.net.www.http.HttpClient r0;
        sun.net.www.MessageHeader r1;
        sun.net.www.http.PosterOutputStream r2;
        boolean z0;

        r0 := @this: sun.net.www.http.HttpClient;
        r1 := @parameter0: sun.net.www.MessageHeader;
        r2 := @parameter1: sun.net.www.http.PosterOutputStream;
        z0 := @parameter2: boolean;
        r0.<sun.net.www.http.HttpClient: boolean streaming> = z0;
        virtualinvoke r0.<sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>(r1, r2);
        return;
    }

    public boolean parseHTTP(sun.net.www.MessageHeader, sun.net.ProgressSource, sun.net.www.protocol.http.HttpURLConnection) throws java.io.IOException
    {
        sun.net.www.http.HttpClient r0;
        sun.net.www.MessageHeader r1, r5, $r17, $r20;
        sun.net.ProgressSource r2;
        sun.net.www.protocol.http.HttpURLConnection r3;
        java.net.SocketTimeoutException r4, $r14;
        java.net.Socket $r6;
        java.io.InputStream $r7, $r10, $r13;
        sun.net.www.http.HttpCapture $r8, $r11;
        sun.net.www.http.HttpCaptureInputStream $r9;
        java.io.BufferedInputStream $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.io.IOException $r15, r16;
        java.lang.String $r18, $r19;
        sun.net.www.http.PosterOutputStream $r21;

        r0 := @this: sun.net.www.http.HttpClient;
        r1 := @parameter0: sun.net.www.MessageHeader;
        r2 := @parameter1: sun.net.ProgressSource;
        r3 := @parameter2: sun.net.www.protocol.http.HttpURLConnection;

     label0:
        $r6 = r0.<sun.net.www.http.HttpClient: java.net.Socket serverSocket>;
        $r7 = virtualinvoke $r6.<java.net.Socket: java.io.InputStream getInputStream()>();
        r0.<sun.net.www.http.HttpClient: java.io.InputStream serverInput> = $r7;
        $r8 = r0.<sun.net.www.http.HttpClient: sun.net.www.http.HttpCapture capture>;
        if $r8 == null goto label1;

        $r9 = new sun.net.www.http.HttpCaptureInputStream;
        $r10 = r0.<sun.net.www.http.HttpClient: java.io.InputStream serverInput>;
        $r11 = r0.<sun.net.www.http.HttpClient: sun.net.www.http.HttpCapture capture>;
        specialinvoke $r9.<sun.net.www.http.HttpCaptureInputStream: void <init>(java.io.InputStream,sun.net.www.http.HttpCapture)>($r10, $r11);
        r0.<sun.net.www.http.HttpClient: java.io.InputStream serverInput> = $r9;

     label1:
        $r12 = new java.io.BufferedInputStream;
        $r13 = r0.<sun.net.www.http.HttpClient: java.io.InputStream serverInput>;
        specialinvoke $r12.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r13);
        r0.<sun.net.www.http.HttpClient: java.io.InputStream serverInput> = $r12;
        $z0 = specialinvoke r0.<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>(r1, r2, r3);

     label2:
        return $z0;

     label3:
        $r14 := @caughtexception;
        r4 = $r14;
        $z1 = r0.<sun.net.www.http.HttpClient: boolean ignoreContinue>;
        if $z1 == 0 goto label4;

        virtualinvoke r0.<sun.net.www.http.HttpClient: void closeServer()>();

     label4:
        throw r4;

     label5:
        $r15 := @caughtexception;
        r16 = $r15;
        virtualinvoke r0.<sun.net.www.http.HttpClient: void closeServer()>();
        r0.<sun.net.www.http.HttpClient: boolean cachedHttpClient> = 0;
        $z2 = r0.<sun.net.www.http.HttpClient: boolean failedOnce>;
        if $z2 != 0 goto label8;

        $r17 = r0.<sun.net.www.http.HttpClient: sun.net.www.MessageHeader requests>;
        if $r17 == null goto label8;

        r0.<sun.net.www.http.HttpClient: boolean failedOnce> = 1;
        $r18 = virtualinvoke r0.<sun.net.www.http.HttpClient: java.lang.String getRequestMethod()>();
        $z3 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>("CONNECT");
        if $z3 != 0 goto label8;

        $r19 = virtualinvoke r3.<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getRequestMethod()>();
        $z4 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("POST");
        if $z4 == 0 goto label6;

        $z5 = <sun.net.www.http.HttpClient: boolean retryPostProp>;
        if $z5 == 0 goto label8;

        $z6 = r0.<sun.net.www.http.HttpClient: boolean streaming>;
        if $z6 == 0 goto label6;

        goto label8;

     label6:
        virtualinvoke r0.<sun.net.www.http.HttpClient: void openServer()>();
        $z7 = virtualinvoke r0.<sun.net.www.http.HttpClient: boolean needsTunneling()>();
        if $z7 == 0 goto label7;

        r5 = r0.<sun.net.www.http.HttpClient: sun.net.www.MessageHeader requests>;
        virtualinvoke r3.<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>();
        r0.<sun.net.www.http.HttpClient: sun.net.www.MessageHeader requests> = r5;

     label7:
        virtualinvoke r0.<sun.net.www.http.HttpClient: void afterConnect()>();
        $r20 = r0.<sun.net.www.http.HttpClient: sun.net.www.MessageHeader requests>;
        $r21 = r0.<sun.net.www.http.HttpClient: sun.net.www.http.PosterOutputStream poster>;
        virtualinvoke r0.<sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>($r20, $r21);
        $z8 = virtualinvoke r0.<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>(r1, r2, r3);
        return $z8;

     label8:
        throw r16;

        catch java.net.SocketTimeoutException from label0 to label2 with label3;
        catch java.io.IOException from label0 to label2 with label5;
    }

    private boolean parseHTTPHeader(sun.net.www.MessageHeader, sun.net.ProgressSource, sun.net.www.protocol.http.HttpURLConnection) throws java.io.IOException
    {
        sun.net.www.http.HttpClient r0;
        sun.net.www.MessageHeader r1, $r27, r30, $r31, $r44;
        sun.net.ProgressSource r2;
        sun.net.www.protocol.http.HttpURLConnection r3;
        boolean z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        byte[] r4;
        int i0, i1, $i2, $i11, $i13, i15, i16, $i18, $i20, $i21;
        java.net.CookieHandler r5;
        java.net.URI r6;
        java.lang.String r7, r11, $r17, $r19, $r23, $r26, $r28, $r29, r36, $r37, r40, r45, $r46, $r51, $r56;
        java.lang.NumberFormatException r8, $r43;
        java.io.InputStream $r9, $r10, $r12, $r13, $r42, $r53, $r55, $r58;
        byte $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b12, $b14, $b22, $b23, $b24;
        java.net.URL $r14, $r49;
        java.util.Map $r15;
        java.util.Locale $r16;
        sun.net.www.HeaderParser $r18, r20;
        sun.net.www.http.PosterOutputStream $r32;
        java.net.SocketException $r33;
        java.io.IOException $r34, r35;
        char $c17;
        java.lang.Exception $r38, r39;
        long l19;
        sun.net.www.http.ChunkedInputStream $r41;
        java.lang.StringBuilder $r47, $r48, $r50;
        sun.net.www.http.KeepAliveStream $r52;
        sun.net.www.MeteredStream $r54, $r57;

        r0 := @this: sun.net.www.http.HttpClient;
        r1 := @parameter0: sun.net.www.MessageHeader;
        r2 := @parameter1: sun.net.ProgressSource;
        r3 := @parameter2: sun.net.www.protocol.http.HttpURLConnection;
        r0.<sun.net.www.http.HttpClient: int keepAliveConnections> = -1;
        r0.<sun.net.www.http.HttpClient: int keepAliveTimeout> = 0;
        z0 = 0;
        r4 = newarray (byte)[8];

     label0:
        i0 = 0;
        $r9 = r0.<sun.net.www.http.HttpClient: java.io.InputStream serverInput>;
        virtualinvoke $r9.<java.io.InputStream: void mark(int)>(10);

     label1:
        if i0 >= 8 goto label3;

        $r10 = r0.<sun.net.www.http.HttpClient: java.io.InputStream serverInput>;
        $i2 = 8 - i0;
        i1 = virtualinvoke $r10.<java.io.InputStream: int read(byte[],int,int)>(r4, i0, $i2);
        if i1 >= 0 goto label2;

        goto label3;

     label2:
        i0 = i0 + i1;
        goto label1;

     label3:
        r11 = null;
        $b3 = r4[0];
        if $b3 != 72 goto label4;

        $b4 = r4[1];
        if $b4 != 84 goto label4;

        $b5 = r4[2];
        if $b5 != 84 goto label4;

        $b6 = r4[3];
        if $b6 != 80 goto label4;

        $b7 = r4[4];
        if $b7 != 47 goto label4;

        $b8 = r4[5];
        if $b8 != 49 goto label4;

        $b9 = r4[6];
        if $b9 != 46 goto label4;

        $z1 = 1;
        goto label5;

     label4:
        $z1 = 0;

     label5:
        z2 = $z1;
        $r12 = r0.<sun.net.www.http.HttpClient: java.io.InputStream serverInput>;
        virtualinvoke $r12.<java.io.InputStream: void reset()>();
        if z2 == 0 goto label17;

        $r13 = r0.<sun.net.www.http.HttpClient: java.io.InputStream serverInput>;
        virtualinvoke r1.<sun.net.www.MessageHeader: void parseHeader(java.io.InputStream)>($r13);
        r5 = virtualinvoke r3.<sun.net.www.protocol.http.HttpURLConnection: java.net.CookieHandler getCookieHandler()>();
        if r5 == null goto label6;

        $r14 = r0.<sun.net.www.http.HttpClient: java.net.URL url>;
        r6 = staticinvoke <sun.net.www.ParseUtil: java.net.URI toURI(java.net.URL)>($r14);
        if r6 == null goto label6;

        $r15 = virtualinvoke r1.<sun.net.www.MessageHeader: java.util.Map getHeaders()>();
        virtualinvoke r5.<java.net.CookieHandler: void put(java.net.URI,java.util.Map)>(r6, $r15);

     label6:
        $z3 = r0.<sun.net.www.http.HttpClient: boolean usingProxy>;
        if $z3 == 0 goto label7;

        r11 = virtualinvoke r1.<sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>("Proxy-Connection");

     label7:
        if r11 != null goto label8;

        r11 = virtualinvoke r1.<sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>("Connection");

     label8:
        if r11 == null goto label14;

        $r16 = <java.util.Locale: java.util.Locale US>;
        $r17 = virtualinvoke r11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r16);
        $z4 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("keep-alive");
        if $z4 == 0 goto label14;

        $r18 = new sun.net.www.HeaderParser;
        $r19 = virtualinvoke r1.<sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>("Keep-Alive");
        specialinvoke $r18.<sun.net.www.HeaderParser: void <init>(java.lang.String)>($r19);
        r20 = $r18;
        if r20 == null goto label13;

        $r23 = "max";
        $z5 = r0.<sun.net.www.http.HttpClient: boolean usingProxy>;
        if $z5 == 0 goto label9;

        $b10 = 50;
        goto label10;

     label9:
        $b10 = 5;

     label10:
        $i11 = virtualinvoke r20.<sun.net.www.HeaderParser: int findInt(java.lang.String,int)>($r23, $b10);
        r0.<sun.net.www.http.HttpClient: int keepAliveConnections> = $i11;
        $r26 = "timeout";
        $z6 = r0.<sun.net.www.http.HttpClient: boolean usingProxy>;
        if $z6 == 0 goto label11;

        $b12 = 60;
        goto label12;

     label11:
        $b12 = 5;

     label12:
        $i13 = virtualinvoke r20.<sun.net.www.HeaderParser: int findInt(java.lang.String,int)>($r26, $b12);
        r0.<sun.net.www.http.HttpClient: int keepAliveTimeout> = $i13;

     label13:
        goto label16;

     label14:
        $b14 = r4[7];
        if $b14 == 48 goto label16;

        if r11 == null goto label15;

        r0.<sun.net.www.http.HttpClient: int keepAliveConnections> = 1;
        goto label16;

     label15:
        r0.<sun.net.www.http.HttpClient: int keepAliveConnections> = 5;

     label16:
        goto label23;

     label17:
        if i0 == 8 goto label22;

        $z7 = r0.<sun.net.www.http.HttpClient: boolean failedOnce>;
        if $z7 != 0 goto label21;

        $r27 = r0.<sun.net.www.http.HttpClient: sun.net.www.MessageHeader requests>;
        if $r27 == null goto label21;

        r0.<sun.net.www.http.HttpClient: boolean failedOnce> = 1;
        $r28 = virtualinvoke r0.<sun.net.www.http.HttpClient: java.lang.String getRequestMethod()>();
        $z8 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>("CONNECT");
        if $z8 != 0 goto label21;

        $r29 = virtualinvoke r3.<sun.net.www.protocol.http.HttpURLConnection: java.lang.String getRequestMethod()>();
        $z9 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>("POST");
        if $z9 == 0 goto label18;

        $z10 = <sun.net.www.http.HttpClient: boolean retryPostProp>;
        if $z10 == 0 goto label21;

        $z11 = r0.<sun.net.www.http.HttpClient: boolean streaming>;
        if $z11 == 0 goto label18;

        goto label21;

     label18:
        virtualinvoke r0.<sun.net.www.http.HttpClient: void closeServer()>();
        r0.<sun.net.www.http.HttpClient: boolean cachedHttpClient> = 0;
        virtualinvoke r0.<sun.net.www.http.HttpClient: void openServer()>();
        $z12 = virtualinvoke r0.<sun.net.www.http.HttpClient: boolean needsTunneling()>();
        if $z12 == 0 goto label19;

        r30 = r0.<sun.net.www.http.HttpClient: sun.net.www.MessageHeader requests>;
        virtualinvoke r3.<sun.net.www.protocol.http.HttpURLConnection: void doTunneling()>();
        r0.<sun.net.www.http.HttpClient: sun.net.www.MessageHeader requests> = r30;

     label19:
        virtualinvoke r0.<sun.net.www.http.HttpClient: void afterConnect()>();
        $r31 = r0.<sun.net.www.http.HttpClient: sun.net.www.MessageHeader requests>;
        $r32 = r0.<sun.net.www.http.HttpClient: sun.net.www.http.PosterOutputStream poster>;
        virtualinvoke r0.<sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader,sun.net.www.http.PosterOutputStream)>($r31, $r32);
        $z13 = virtualinvoke r0.<sun.net.www.http.HttpClient: boolean parseHTTP(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>(r1, r2, r3);

     label20:
        return $z13;

     label21:
        $r33 = new java.net.SocketException;
        specialinvoke $r33.<java.net.SocketException: void <init>(java.lang.String)>("Unexpected end of file from server");
        throw $r33;

     label22:
        virtualinvoke r1.<sun.net.www.MessageHeader: void set(java.lang.String,java.lang.String)>("Content-type", "unknown/unknown");

     label23:
        goto label25;

     label24:
        $r34 := @caughtexception;
        r35 = $r34;
        throw r35;

     label25:
        i15 = -1;

     label26:
        r36 = virtualinvoke r1.<sun.net.www.MessageHeader: java.lang.String getValue(int)>(0);
        i16 = virtualinvoke r36.<java.lang.String: int indexOf(int)>(32);

     label27:
        $c17 = virtualinvoke r36.<java.lang.String: char charAt(int)>(i16);
        if $c17 != 32 goto label28;

        i16 = i16 + 1;
        goto label27;

     label28:
        $i18 = i16 + 3;
        $r37 = virtualinvoke r36.<java.lang.String: java.lang.String substring(int,int)>(i16, $i18);
        i15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r37);

     label29:
        goto label31;

     label30:
        $r38 := @caughtexception;
        r39 = $r38;

     label31:
        if i15 != 100 goto label32;

        $z14 = r0.<sun.net.www.http.HttpClient: boolean ignoreContinue>;
        if $z14 == 0 goto label32;

        virtualinvoke r1.<sun.net.www.MessageHeader: void reset()>();
        $z15 = specialinvoke r0.<sun.net.www.http.HttpClient: boolean parseHTTPHeader(sun.net.www.MessageHeader,sun.net.ProgressSource,sun.net.www.protocol.http.HttpURLConnection)>(r1, r2, r3);
        return $z15;

     label32:
        l19 = -1L;
        r40 = virtualinvoke r1.<sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>("Transfer-Encoding");
        if r40 == null goto label35;

        $z16 = virtualinvoke r40.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("chunked");
        if $z16 == 0 goto label35;

        $r41 = new sun.net.www.http.ChunkedInputStream;
        $r42 = r0.<sun.net.www.http.HttpClient: java.io.InputStream serverInput>;
        specialinvoke $r41.<sun.net.www.http.ChunkedInputStream: void <init>(java.io.InputStream,sun.net.www.http.HttpClient,sun.net.www.MessageHeader)>($r42, r0, r1);
        r0.<sun.net.www.http.HttpClient: java.io.InputStream serverInput> = $r41;
        $i20 = r0.<sun.net.www.http.HttpClient: int keepAliveConnections>;
        if $i20 > 1 goto label33;

        r0.<sun.net.www.http.HttpClient: int keepAliveConnections> = 1;
        r0.<sun.net.www.http.HttpClient: boolean keepingAlive> = 0;
        goto label34;

     label33:
        r0.<sun.net.www.http.HttpClient: boolean keepingAlive> = 1;

     label34:
        r0.<sun.net.www.http.HttpClient: boolean failedOnce> = 0;
        goto label45;

     label35:
        r7 = virtualinvoke r1.<sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>("content-length");
        if r7 == null goto label39;

     label36:
        l19 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r7);

     label37:
        goto label39;

     label38:
        $r43 := @caughtexception;
        r8 = $r43;
        l19 = -1L;

     label39:
        $r44 = r0.<sun.net.www.http.HttpClient: sun.net.www.MessageHeader requests>;
        r45 = virtualinvoke $r44.<sun.net.www.MessageHeader: java.lang.String getKey(int)>(0);
        if r45 == null goto label40;

        $z17 = virtualinvoke r45.<java.lang.String: boolean startsWith(java.lang.String)>("HEAD");
        if $z17 != 0 goto label41;

     label40:
        if i15 == 304 goto label41;

        if i15 != 204 goto label42;

     label41:
        l19 = 0L;

     label42:
        $i21 = r0.<sun.net.www.http.HttpClient: int keepAliveConnections>;
        if $i21 <= 1 goto label44;

        $b22 = l19 cmp 0L;
        if $b22 >= 0 goto label43;

        if i15 == 304 goto label43;

        if i15 != 204 goto label44;

     label43:
        r0.<sun.net.www.http.HttpClient: boolean keepingAlive> = 1;
        r0.<sun.net.www.http.HttpClient: boolean failedOnce> = 0;
        goto label45;

     label44:
        $z18 = r0.<sun.net.www.http.HttpClient: boolean keepingAlive>;
        if $z18 == 0 goto label45;

        r0.<sun.net.www.http.HttpClient: boolean keepingAlive> = 0;

     label45:
        $b23 = l19 cmp 0L;
        if $b23 <= 0 goto label48;

        if r2 == null goto label46;

        $r46 = virtualinvoke r1.<sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>("content-type");
        virtualinvoke r2.<sun.net.ProgressSource: void setContentType(java.lang.String)>($r46);

     label46:
        $z19 = virtualinvoke r0.<sun.net.www.http.HttpClient: boolean isKeepingAlive()>();
        if $z19 == 0 goto label47;

        $r47 = new java.lang.StringBuilder;
        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();
        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KeepAlive stream used: ");
        $r49 = r0.<sun.net.www.http.HttpClient: java.net.URL url>;
        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49);
        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <sun.net.www.http.HttpClient: void logFinest(java.lang.String)>($r51);
        $r52 = new sun.net.www.http.KeepAliveStream;
        $r53 = r0.<sun.net.www.http.HttpClient: java.io.InputStream serverInput>;
        specialinvoke $r52.<sun.net.www.http.KeepAliveStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long,sun.net.www.http.HttpClient)>($r53, r2, l19, r0);
        r0.<sun.net.www.http.HttpClient: java.io.InputStream serverInput> = $r52;
        r0.<sun.net.www.http.HttpClient: boolean failedOnce> = 0;
        goto label50;

     label47:
        $r54 = new sun.net.www.MeteredStream;
        $r55 = r0.<sun.net.www.http.HttpClient: java.io.InputStream serverInput>;
        specialinvoke $r54.<sun.net.www.MeteredStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long)>($r55, r2, l19);
        r0.<sun.net.www.http.HttpClient: java.io.InputStream serverInput> = $r54;
        goto label50;

     label48:
        $b24 = l19 cmp -1L;
        if $b24 != 0 goto label49;

        if r2 == null goto label50;

        $r56 = virtualinvoke r1.<sun.net.www.MessageHeader: java.lang.String findValue(java.lang.String)>("content-type");
        virtualinvoke r2.<sun.net.ProgressSource: void setContentType(java.lang.String)>($r56);
        $r57 = new sun.net.www.MeteredStream;
        $r58 = r0.<sun.net.www.http.HttpClient: java.io.InputStream serverInput>;
        specialinvoke $r57.<sun.net.www.MeteredStream: void <init>(java.io.InputStream,sun.net.ProgressSource,long)>($r58, r2, l19);
        r0.<sun.net.www.http.HttpClient: java.io.InputStream serverInput> = $r57;
        goto label50;

     label49:
        if r2 == null goto label50;

        virtualinvoke r2.<sun.net.ProgressSource: void finishTracking()>();

     label50:
        return z2;

        catch java.io.IOException from label0 to label20 with label24;
        catch java.io.IOException from label21 to label23 with label24;
        catch java.lang.Exception from label26 to label29 with label30;
        catch java.lang.NumberFormatException from label36 to label37 with label38;
    }

    public synchronized java.io.InputStream getInputStream()
    {
        sun.net.www.http.HttpClient r0;
        java.io.InputStream $r1;

        r0 := @this: sun.net.www.http.HttpClient;
        $r1 = r0.<sun.net.www.http.HttpClient: java.io.InputStream serverInput>;
        return $r1;
    }

    public java.io.OutputStream getOutputStream()
    {
        sun.net.www.http.HttpClient r0;
        java.io.PrintStream $r1;

        r0 := @this: sun.net.www.http.HttpClient;
        $r1 = r0.<sun.net.www.http.HttpClient: java.io.PrintStream serverOutput>;
        return $r1;
    }

    public java.lang.String toString()
    {
        sun.net.www.http.HttpClient r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r8;
        java.lang.Class $r2;
        java.lang.String $r3, $r9;
        java.net.URL $r6;

        r0 := @this: sun.net.www.http.HttpClient;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");
        $r6 = r0.<sun.net.www.http.HttpClient: java.net.URL url>;
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r9;
    }

    public final boolean isKeepingAlive()
    {
        sun.net.www.http.HttpClient r0;
        boolean $z0, $z1, $z2;

        r0 := @this: sun.net.www.http.HttpClient;
        $z0 = virtualinvoke r0.<sun.net.www.http.HttpClient: boolean getHttpKeepAliveSet()>();
        if $z0 == 0 goto label0;

        $z1 = r0.<sun.net.www.http.HttpClient: boolean keepingAlive>;
        if $z1 == 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;
    }

    public void setCacheRequest(java.net.CacheRequest)
    {
        sun.net.www.http.HttpClient r0;
        java.net.CacheRequest r1;

        r0 := @this: sun.net.www.http.HttpClient;
        r1 := @parameter0: java.net.CacheRequest;
        r0.<sun.net.www.http.HttpClient: java.net.CacheRequest cacheRequest> = r1;
        return;
    }

    java.net.CacheRequest getCacheRequest()
    {
        sun.net.www.http.HttpClient r0;
        java.net.CacheRequest $r1;

        r0 := @this: sun.net.www.http.HttpClient;
        $r1 = r0.<sun.net.www.http.HttpClient: java.net.CacheRequest cacheRequest>;
        return $r1;
    }

    java.lang.String getRequestMethod()
    {
        sun.net.www.http.HttpClient r0;
        java.lang.String r1, $r5;
        sun.net.www.MessageHeader $r2, $r3;
        java.lang.String[] $r4;

        r0 := @this: sun.net.www.http.HttpClient;
        $r2 = r0.<sun.net.www.http.HttpClient: sun.net.www.MessageHeader requests>;
        if $r2 == null goto label0;

        $r3 = r0.<sun.net.www.http.HttpClient: sun.net.www.MessageHeader requests>;
        r1 = virtualinvoke $r3.<sun.net.www.MessageHeader: java.lang.String getKey(int)>(0);
        if r1 == null goto label0;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");
        $r5 = $r4[0];
        return $r5;

     label0:
        return "";
    }

    protected void finalize() throws java.lang.Throwable
    {
        sun.net.www.http.HttpClient r0;

        r0 := @this: sun.net.www.http.HttpClient;
        return;
    }

    public void setDoNotRetry(boolean)
    {
        sun.net.www.http.HttpClient r0;
        boolean z0;

        r0 := @this: sun.net.www.http.HttpClient;
        z0 := @parameter0: boolean;
        r0.<sun.net.www.http.HttpClient: boolean failedOnce> = z0;
        return;
    }

    public void setIgnoreContinue(boolean)
    {
        sun.net.www.http.HttpClient r0;
        boolean z0;

        r0 := @this: sun.net.www.http.HttpClient;
        z0 := @parameter0: boolean;
        r0.<sun.net.www.http.HttpClient: boolean ignoreContinue> = z0;
        return;
    }

    public void closeServer()
    {
        sun.net.www.http.HttpClient r0;
        java.lang.Exception r1, $r3;
        java.net.Socket $r2;

        r0 := @this: sun.net.www.http.HttpClient;

     label0:
        r0.<sun.net.www.http.HttpClient: boolean keepingAlive> = 0;
        $r2 = r0.<sun.net.www.http.HttpClient: java.net.Socket serverSocket>;
        virtualinvoke $r2.<java.net.Socket: void close()>();

     label1:
        goto label3;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public java.lang.String getProxyHostUsed()
    {
        sun.net.www.http.HttpClient r0;
        boolean $z0;
        java.net.Proxy $r1;
        java.net.SocketAddress $r2;
        java.net.InetSocketAddress $r3;
        java.lang.String $r4;

        r0 := @this: sun.net.www.http.HttpClient;
        $z0 = r0.<sun.net.www.http.HttpClient: boolean usingProxy>;
        if $z0 != 0 goto label0;

        return null;

     label0:
        $r1 = r0.<sun.net.www.http.HttpClient: java.net.Proxy proxy>;
        $r2 = virtualinvoke $r1.<java.net.Proxy: java.net.SocketAddress address()>();
        $r3 = (java.net.InetSocketAddress) $r2;
        $r4 = virtualinvoke $r3.<java.net.InetSocketAddress: java.lang.String getHostString()>();
        return $r4;
    }

    public int getProxyPortUsed()
    {
        sun.net.www.http.HttpClient r0;
        boolean $z0;
        java.net.Proxy $r1;
        java.net.SocketAddress $r2;
        java.net.InetSocketAddress $r3;
        int $i0;

        r0 := @this: sun.net.www.http.HttpClient;
        $z0 = r0.<sun.net.www.http.HttpClient: boolean usingProxy>;
        if $z0 == 0 goto label0;

        $r1 = r0.<sun.net.www.http.HttpClient: java.net.Proxy proxy>;
        $r2 = virtualinvoke $r1.<java.net.Proxy: java.net.SocketAddress address()>();
        $r3 = (java.net.InetSocketAddress) $r2;
        $i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int getPort()>();
        return $i0;

     label0:
        return -1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String r1, r2;
        boolean $z0, $z1, $z2, $z3;
        sun.net.www.http.KeepAliveCache $r3;
        sun.util.logging.PlatformLogger $r4;
        sun.security.action.GetPropertyAction $r5, $r7;
        java.lang.Object $r6, $r8;
        java.lang.Boolean $r9, $r10;

        $r0 = class "sun/net/www/http/HttpClient";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.net.www.http.HttpClient: boolean $assertionsDisabled> = $z1;
        $r3 = new sun.net.www.http.KeepAliveCache;
        specialinvoke $r3.<sun.net.www.http.KeepAliveCache: void <init>()>();
        <sun.net.www.http.HttpClient: sun.net.www.http.KeepAliveCache kac> = $r3;
        <sun.net.www.http.HttpClient: boolean keepAliveProp> = 1;
        <sun.net.www.http.HttpClient: boolean retryPostProp> = 1;
        $r4 = staticinvoke <sun.net.www.protocol.http.HttpURLConnection: sun.util.logging.PlatformLogger getHttpLogger()>();
        <sun.net.www.http.HttpClient: sun.util.logging.PlatformLogger logger> = $r4;
        $r5 = new sun.security.action.GetPropertyAction;
        specialinvoke $r5.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("http.keepAlive");
        $r6 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r5);
        r1 = (java.lang.String) $r6;
        $r7 = new sun.security.action.GetPropertyAction;
        specialinvoke $r7.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("sun.net.http.retryPost");
        $r8 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r7);
        r2 = (java.lang.String) $r8;
        if r1 == null goto label2;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r1);
        $z2 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();
        <sun.net.www.http.HttpClient: boolean keepAliveProp> = $z2;
        goto label3;

     label2:
        <sun.net.www.http.HttpClient: boolean keepAliveProp> = 1;

     label3:
        if r2 == null goto label4;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r2);
        $z3 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();
        <sun.net.www.http.HttpClient: boolean retryPostProp> = $z3;
        goto label5;

     label4:
        <sun.net.www.http.HttpClient: boolean retryPostProp> = 1;

     label5:
        return;
    }
}
