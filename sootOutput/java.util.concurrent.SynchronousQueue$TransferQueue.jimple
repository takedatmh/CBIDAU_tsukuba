final class java.util.concurrent.SynchronousQueue$TransferQueue extends java.util.concurrent.SynchronousQueue$Transferer
{
    transient volatile java.util.concurrent.SynchronousQueue$TransferQueue$QNode head;
    transient volatile java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail;
    transient volatile java.util.concurrent.SynchronousQueue$TransferQueue$QNode cleanMe;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long headOffset;
    private static final long tailOffset;
    private static final long cleanMeOffset;

    void <init>()
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r1, $r2;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;
        specialinvoke r0.<java.util.concurrent.SynchronousQueue$Transferer: void <init>()>();
        $r2 = new java.util.concurrent.SynchronousQueue$TransferQueue$QNode;
        specialinvoke $r2.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: void <init>(java.lang.Object,boolean)>(null, 0);
        r1 = $r2;
        r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode head> = r1;
        r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail> = r1;
        return;
    }

    void advanceHead(java.util.concurrent.SynchronousQueue$TransferQueue$QNode, java.util.concurrent.SynchronousQueue$TransferQueue$QNode)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r1, r2, $r3;
        long $l0;
        sun.misc.Unsafe $r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;
        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;
        r2 := @parameter1: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;
        $r3 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode head>;
        if r1 != $r3 goto label0;

        $r4 = <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE>;
        $l0 = <java.util.concurrent.SynchronousQueue$TransferQueue: long headOffset>;
        $z0 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);
        if $z0 == 0 goto label0;

        r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next> = r1;

     label0:
        return;
    }

    void advanceTail(java.util.concurrent.SynchronousQueue$TransferQueue$QNode, java.util.concurrent.SynchronousQueue$TransferQueue$QNode)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r1, r2, $r3;
        long $l0;
        sun.misc.Unsafe $r4;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;
        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;
        r2 := @parameter1: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;
        $r3 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail>;
        if $r3 != r1 goto label0;

        $r4 = <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE>;
        $l0 = <java.util.concurrent.SynchronousQueue$TransferQueue: long tailOffset>;
        virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

     label0:
        return;
    }

    boolean casCleanMe(java.util.concurrent.SynchronousQueue$TransferQueue$QNode, java.util.concurrent.SynchronousQueue$TransferQueue$QNode)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r1, r2, $r3;
        long $l0;
        sun.misc.Unsafe $r4;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;
        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;
        r2 := @parameter1: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;
        $r3 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode cleanMe>;
        if $r3 != r1 goto label0;

        $r4 = <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE>;
        $l0 = <java.util.concurrent.SynchronousQueue$TransferQueue: long cleanMeOffset>;
        $z0 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);
        if $z0 == 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    java.lang.Object transfer(java.lang.Object, boolean, long)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.lang.Object r1, r6, $r9, r13, $r15;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z7, $z8;
        long l0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r2, r3, r4, r5, $r7, $r8, r10, $r11, $r12;
        byte $b1;
        java.lang.Thread $r14;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;
        r1 := @parameter0: java.lang.Object;
        z0 := @parameter1: boolean;
        l0 := @parameter2: long;
        r2 = null;
        if r1 == null goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        z1 = $z2;

     label2:
        r3 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail>;
        r4 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode head>;
        if r3 == null goto label2;

        if r4 != null goto label3;

        goto label2;

     label3:
        if r4 == r3 goto label4;

        $z3 = r3.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean isData>;
        if $z3 != z1 goto label15;

     label4:
        r5 = r3.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;
        $r7 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail>;
        if r3 == $r7 goto label5;

        goto label2;

     label5:
        if r5 == null goto label6;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceTail(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r3, r5);
        goto label2;

     label6:
        if z0 == 0 goto label7;

        $b1 = l0 cmp 0L;
        if $b1 > 0 goto label7;

        return null;

     label7:
        if r2 != null goto label8;

        $r8 = new java.util.concurrent.SynchronousQueue$TransferQueue$QNode;
        specialinvoke $r8.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: void <init>(java.lang.Object,boolean)>(r1, z1);
        r2 = $r8;

     label8:
        $z4 = virtualinvoke r3.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean casNext(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(null, r2);
        if $z4 != 0 goto label9;

        goto label2;

     label9:
        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceTail(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r3, r2);
        r6 = virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.lang.Object awaitFulfill(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.lang.Object,boolean,long)>(r2, r1, z0, l0);
        if r6 != r2 goto label10;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void clean(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r3, r2);
        return null;

     label10:
        $z5 = virtualinvoke r2.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean isOffList()>();
        if $z5 != 0 goto label12;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceHead(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r3, r2);
        if r6 == null goto label11;

        r2.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Object item> = r2;

     label11:
        r2.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Thread waiter> = null;

     label12:
        if r6 == null goto label13;

        $r9 = r6;
        goto label14;

     label13:
        $r9 = r1;

     label14:
        return $r9;

     label15:
        r10 = r4.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;
        $r11 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail>;
        if r3 != $r11 goto label2;

        if r10 == null goto label2;

        $r12 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode head>;
        if r4 == $r12 goto label16;

        goto label2;

     label16:
        r13 = r10.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Object item>;
        if r13 == null goto label17;

        $z7 = 1;
        goto label18;

     label17:
        $z7 = 0;

     label18:
        if z1 == $z7 goto label19;

        if r13 == r10 goto label19;

        $z8 = virtualinvoke r10.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean casItem(java.lang.Object,java.lang.Object)>(r13, r1);
        if $z8 != 0 goto label20;

     label19:
        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceHead(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r4, r10);
        goto label2;

     label20:
        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceHead(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r4, r10);
        $r14 = r10.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Thread waiter>;
        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r14);
        if r13 == null goto label21;

        $r15 = r13;
        goto label22;

     label21:
        $r15 = r1;

     label22:
        return $r15;
    }

    java.lang.Object awaitFulfill(java.util.concurrent.SynchronousQueue$TransferQueue$QNode, java.lang.Object, boolean, long)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r1, $r5, $r6;
        java.lang.Object r2, r4;
        boolean z0, $z1;
        long l0, l1, l3, $l4, $l6;
        java.lang.Thread r3, $r7;
        int i2, $i5;
        byte $b7, $b8;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;
        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;
        r2 := @parameter1: java.lang.Object;
        z0 := @parameter2: boolean;
        l0 := @parameter3: long;
        if z0 == 0 goto label0;

        $l4 = staticinvoke <java.lang.System: long nanoTime()>();
        goto label1;

     label0:
        $l4 = 0L;

     label1:
        l1 = $l4;
        r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $r5 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode head>;
        $r6 = $r5.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;
        if $r6 != r1 goto label3;

        if z0 == 0 goto label2;

        $i5 = <java.util.concurrent.SynchronousQueue: int maxTimedSpins>;
        goto label4;

     label2:
        $i5 = <java.util.concurrent.SynchronousQueue: int maxUntimedSpins>;
        goto label4;

     label3:
        $i5 = 0;

     label4:
        i2 = $i5;

     label5:
        $z1 = virtualinvoke r3.<java.lang.Thread: boolean isInterrupted()>();
        if $z1 == 0 goto label6;

        virtualinvoke r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: void tryCancel(java.lang.Object)>(r2);

     label6:
        r4 = r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Object item>;
        if r4 == r2 goto label7;

        return r4;

     label7:
        if z0 == 0 goto label8;

        l3 = staticinvoke <java.lang.System: long nanoTime()>();
        $l6 = l3 - l1;
        l0 = l0 - $l6;
        l1 = l3;
        $b7 = l0 cmp 0L;
        if $b7 > 0 goto label8;

        virtualinvoke r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: void tryCancel(java.lang.Object)>(r2);
        goto label5;

     label8:
        if i2 <= 0 goto label9;

        i2 = i2 + -1;
        goto label12;

     label9:
        $r7 = r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Thread waiter>;
        if $r7 != null goto label10;

        r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Thread waiter> = r3;
        goto label12;

     label10:
        if z0 != 0 goto label11;

        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(r0);
        goto label12;

     label11:
        $b8 = l0 cmp 1000L;
        if $b8 <= 0 goto label12;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, l0);

     label12:
        goto label5;
    }

    void clean(java.util.concurrent.SynchronousQueue$TransferQueue$QNode, java.util.concurrent.SynchronousQueue$TransferQueue$QNode)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r1, r2, r3, r4, r5, r6, r7, r8, r9, $r10, $r11, r12, $r13;
        boolean $z0, $z1, $z2, $z3, $z5;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;
        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;
        r2 := @parameter1: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;
        r2.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Thread waiter> = null;

     label0:
        $r10 = r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;
        if $r10 != r2 goto label12;

        r3 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode head>;
        r4 = r3.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;
        if r4 == null goto label1;

        $z0 = virtualinvoke r4.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean isCancelled()>();
        if $z0 == 0 goto label1;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceHead(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r3, r4);
        goto label0;

     label1:
        r5 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail>;
        if r5 != r3 goto label2;

        return;

     label2:
        r6 = r5.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;
        $r11 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail>;
        if r5 == $r11 goto label3;

        goto label0;

     label3:
        if r6 == null goto label4;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceTail(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r5, r6);
        goto label0;

     label4:
        if r2 == r5 goto label6;

        r7 = r2.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;
        if r7 == r2 goto label5;

        $z1 = virtualinvoke r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean casNext(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r2, r7);
        if $z1 == 0 goto label6;

     label5:
        return;

     label6:
        r12 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode cleanMe>;
        if r12 == null goto label10;

        r8 = r12.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;
        if r8 == null goto label7;

        if r8 == r12 goto label7;

        $z2 = virtualinvoke r8.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean isCancelled()>();
        if $z2 == 0 goto label7;

        if r8 == r5 goto label8;

        $r13 = r8.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;
        r9 = $r13;
        if $r13 == null goto label8;

        if r9 == r8 goto label8;

        $z3 = virtualinvoke r12.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean casNext(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r8, r9);
        if $z3 == 0 goto label8;

     label7:
        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: boolean casCleanMe(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r12, null);

     label8:
        if r12 != r1 goto label9;

        return;

     label9:
        goto label11;

     label10:
        $z5 = virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: boolean casCleanMe(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(null, r1);
        if $z5 == 0 goto label11;

        return;

     label11:
        goto label0;

     label12:
        return;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0, $r2, $r4, $r6;
        java.lang.Class r1;
        java.lang.reflect.Field $r3, $r5, $r7;
        long $l0, $l1, $l2;
        java.lang.Exception $r8, r9;
        java.lang.Error $r10;

     label0:
        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE> = $r0;
        r1 = class "java/util/concurrent/SynchronousQueue$TransferQueue";
        $r2 = <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE>;
        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("head");
        $l0 = virtualinvoke $r2.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);
        <java.util.concurrent.SynchronousQueue$TransferQueue: long headOffset> = $l0;
        $r4 = <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE>;
        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("tail");
        $l1 = virtualinvoke $r4.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r5);
        <java.util.concurrent.SynchronousQueue$TransferQueue: long tailOffset> = $l1;
        $r6 = <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE>;
        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("cleanMe");
        $l2 = virtualinvoke $r6.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r7);
        <java.util.concurrent.SynchronousQueue$TransferQueue: long cleanMeOffset> = $l2;

     label1:
        goto label3;

     label2:
        $r8 := @caughtexception;
        r9 = $r8;
        $r10 = new java.lang.Error;
        specialinvoke $r10.<java.lang.Error: void <init>(java.lang.Throwable)>(r9);
        throw $r10;

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }
}
