public class sun.security.krb5.Checksum extends java.lang.Object
{
    private int cksumType;
    private byte[] checksum;
    public static final int CKSUMTYPE_NULL;
    public static final int CKSUMTYPE_CRC32;
    public static final int CKSUMTYPE_RSA_MD4;
    public static final int CKSUMTYPE_RSA_MD4_DES;
    public static final int CKSUMTYPE_DES_MAC;
    public static final int CKSUMTYPE_DES_MAC_K;
    public static final int CKSUMTYPE_RSA_MD4_DES_K;
    public static final int CKSUMTYPE_RSA_MD5;
    public static final int CKSUMTYPE_RSA_MD5_DES;
    public static final int CKSUMTYPE_HMAC_SHA1_DES3_KD;
    public static final int CKSUMTYPE_HMAC_SHA1_96_AES128;
    public static final int CKSUMTYPE_HMAC_SHA1_96_AES256;
    public static final int CKSUMTYPE_HMAC_MD5_ARCFOUR;
    static int CKSUMTYPE_DEFAULT;
    static int SAFECKSUMTYPE_DEFAULT;
    private static boolean DEBUG;

    public void <init>(byte[], int)
    {
        sun.security.krb5.Checksum r0;
        byte[] r1;
        int i0;

        r0 := @this: sun.security.krb5.Checksum;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.security.krb5.Checksum: int cksumType> = i0;
        r0.<sun.security.krb5.Checksum: byte[] checksum> = r1;
        return;
    }

    public void <init>(int, byte[]) throws sun.security.krb5.internal.KdcErrException, sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.Checksum r0;
        int i0, $i1, $i2;
        byte[] r1, $r3;
        sun.security.krb5.internal.crypto.CksumType r2;
        boolean $z0;
        sun.security.krb5.internal.KdcErrException $r4;

        r0 := @this: sun.security.krb5.Checksum;
        i0 := @parameter0: int;
        r1 := @parameter1: byte[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.security.krb5.Checksum: int cksumType> = i0;
        $i1 = r0.<sun.security.krb5.Checksum: int cksumType>;
        r2 = staticinvoke <sun.security.krb5.internal.crypto.CksumType: sun.security.krb5.internal.crypto.CksumType getInstance(int)>($i1);
        $z0 = virtualinvoke r2.<sun.security.krb5.internal.crypto.CksumType: boolean isSafe()>();
        if $z0 != 0 goto label0;

        $i2 = lengthof r1;
        $r3 = virtualinvoke r2.<sun.security.krb5.internal.crypto.CksumType: byte[] calculateChecksum(byte[],int)>(r1, $i2);
        r0.<sun.security.krb5.Checksum: byte[] checksum> = $r3;
        goto label1;

     label0:
        $r4 = new sun.security.krb5.internal.KdcErrException;
        specialinvoke $r4.<sun.security.krb5.internal.KdcErrException: void <init>(int)>(50);
        throw $r4;

     label1:
        return;
    }

    public void <init>(int, byte[], sun.security.krb5.EncryptionKey, int) throws sun.security.krb5.internal.KdcErrException, sun.security.krb5.internal.KrbApErrException, sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.Checksum r0;
        int i0, i1, $i2, $i3;
        byte[] r1, $r5, $r6;
        sun.security.krb5.EncryptionKey r2;
        sun.security.krb5.internal.crypto.CksumType r3;
        boolean $z0;
        sun.security.krb5.internal.KrbApErrException $r4;

        r0 := @this: sun.security.krb5.Checksum;
        i0 := @parameter0: int;
        r1 := @parameter1: byte[];
        r2 := @parameter2: sun.security.krb5.EncryptionKey;
        i1 := @parameter3: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.security.krb5.Checksum: int cksumType> = i0;
        $i2 = r0.<sun.security.krb5.Checksum: int cksumType>;
        r3 = staticinvoke <sun.security.krb5.internal.crypto.CksumType: sun.security.krb5.internal.crypto.CksumType getInstance(int)>($i2);
        $z0 = virtualinvoke r3.<sun.security.krb5.internal.crypto.CksumType: boolean isSafe()>();
        if $z0 != 0 goto label0;

        $r4 = new sun.security.krb5.internal.KrbApErrException;
        specialinvoke $r4.<sun.security.krb5.internal.KrbApErrException: void <init>(int)>(50);
        throw $r4;

     label0:
        $i3 = lengthof r1;
        $r5 = virtualinvoke r2.<sun.security.krb5.EncryptionKey: byte[] getBytes()>();
        $r6 = virtualinvoke r3.<sun.security.krb5.internal.crypto.CksumType: byte[] calculateKeyedChecksum(byte[],int,byte[],int)>(r1, $i3, $r5, i1);
        r0.<sun.security.krb5.Checksum: byte[] checksum> = $r6;
        return;
    }

    public boolean verifyKeyedChecksum(byte[], sun.security.krb5.EncryptionKey, int) throws sun.security.krb5.internal.KdcErrException, sun.security.krb5.internal.KrbApErrException, sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.Checksum r0;
        byte[] r1, $r5, $r6;
        sun.security.krb5.EncryptionKey r2;
        int i0, $i1, $i2;
        sun.security.krb5.internal.crypto.CksumType r3;
        boolean $z0, $z1;
        sun.security.krb5.internal.KrbApErrException $r4;

        r0 := @this: sun.security.krb5.Checksum;
        r1 := @parameter0: byte[];
        r2 := @parameter1: sun.security.krb5.EncryptionKey;
        i0 := @parameter2: int;
        $i1 = r0.<sun.security.krb5.Checksum: int cksumType>;
        r3 = staticinvoke <sun.security.krb5.internal.crypto.CksumType: sun.security.krb5.internal.crypto.CksumType getInstance(int)>($i1);
        $z0 = virtualinvoke r3.<sun.security.krb5.internal.crypto.CksumType: boolean isSafe()>();
        if $z0 != 0 goto label0;

        $r4 = new sun.security.krb5.internal.KrbApErrException;
        specialinvoke $r4.<sun.security.krb5.internal.KrbApErrException: void <init>(int)>(50);
        throw $r4;

     label0:
        $i2 = lengthof r1;
        $r5 = virtualinvoke r2.<sun.security.krb5.EncryptionKey: byte[] getBytes()>();
        $r6 = r0.<sun.security.krb5.Checksum: byte[] checksum>;
        $z1 = virtualinvoke r3.<sun.security.krb5.internal.crypto.CksumType: boolean verifyKeyedChecksum(byte[],int,byte[],byte[],int)>(r1, $i2, $r5, $r6, i0);
        return $z1;
    }

    boolean isEqual(sun.security.krb5.Checksum) throws sun.security.krb5.internal.KdcErrException
    {
        sun.security.krb5.Checksum r0, r1;
        int $i0, $i1, $i2;
        byte[] $r4, $r5;
        boolean $z0;

        r0 := @this: sun.security.krb5.Checksum;
        r1 := @parameter0: sun.security.krb5.Checksum;
        $i0 = r0.<sun.security.krb5.Checksum: int cksumType>;
        $i1 = r1.<sun.security.krb5.Checksum: int cksumType>;
        if $i0 == $i1 goto label0;

        return 0;

     label0:
        $i2 = r0.<sun.security.krb5.Checksum: int cksumType>;
        staticinvoke <sun.security.krb5.internal.crypto.CksumType: sun.security.krb5.internal.crypto.CksumType getInstance(int)>($i2);
        $r4 = r0.<sun.security.krb5.Checksum: byte[] checksum>;
        $r5 = r1.<sun.security.krb5.Checksum: byte[] checksum>;
        $z0 = staticinvoke <sun.security.krb5.internal.crypto.CksumType: boolean isChecksumEqual(byte[],byte[])>($r4, $r5);
        return $z0;
    }

    private void <init>(sun.security.util.DerValue) throws sun.security.krb5.Asn1Exception, java.io.IOException
    {
        sun.security.krb5.Checksum r0;
        sun.security.util.DerValue r1, r2, r9;
        byte $b0, $b1, $b2, $b4, $b5;
        sun.security.krb5.Asn1Exception $r3, $r7, $r12, $r14;
        sun.security.util.DerInputStream $r4, $r5, $r8, $r10, $r13;
        java.math.BigInteger $r6;
        int $i3, $i6;
        byte[] $r11;

        r0 := @this: sun.security.krb5.Checksum;
        r1 := @parameter0: sun.security.util.DerValue;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $b0 = virtualinvoke r1.<sun.security.util.DerValue: byte getTag()>();
        if $b0 == 48 goto label0;

        $r3 = new sun.security.krb5.Asn1Exception;
        specialinvoke $r3.<sun.security.krb5.Asn1Exception: void <init>(int)>(906);
        throw $r3;

     label0:
        $r4 = virtualinvoke r1.<sun.security.util.DerValue: sun.security.util.DerInputStream getData()>();
        r2 = virtualinvoke $r4.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $b1 = virtualinvoke r2.<sun.security.util.DerValue: byte getTag()>();
        $b2 = $b1 & 31;
        if $b2 != 0 goto label1;

        $r5 = virtualinvoke r2.<sun.security.util.DerValue: sun.security.util.DerInputStream getData()>();
        $r6 = virtualinvoke $r5.<sun.security.util.DerInputStream: java.math.BigInteger getBigInteger()>();
        $i3 = virtualinvoke $r6.<java.math.BigInteger: int intValue()>();
        r0.<sun.security.krb5.Checksum: int cksumType> = $i3;
        goto label2;

     label1:
        $r7 = new sun.security.krb5.Asn1Exception;
        specialinvoke $r7.<sun.security.krb5.Asn1Exception: void <init>(int)>(906);
        throw $r7;

     label2:
        $r8 = virtualinvoke r1.<sun.security.util.DerValue: sun.security.util.DerInputStream getData()>();
        r9 = virtualinvoke $r8.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $b4 = virtualinvoke r9.<sun.security.util.DerValue: byte getTag()>();
        $b5 = $b4 & 31;
        if $b5 != 1 goto label3;

        $r10 = virtualinvoke r9.<sun.security.util.DerValue: sun.security.util.DerInputStream getData()>();
        $r11 = virtualinvoke $r10.<sun.security.util.DerInputStream: byte[] getOctetString()>();
        r0.<sun.security.krb5.Checksum: byte[] checksum> = $r11;
        goto label4;

     label3:
        $r12 = new sun.security.krb5.Asn1Exception;
        specialinvoke $r12.<sun.security.krb5.Asn1Exception: void <init>(int)>(906);
        throw $r12;

     label4:
        $r13 = virtualinvoke r1.<sun.security.util.DerValue: sun.security.util.DerInputStream getData()>();
        $i6 = virtualinvoke $r13.<sun.security.util.DerInputStream: int available()>();
        if $i6 <= 0 goto label5;

        $r14 = new sun.security.krb5.Asn1Exception;
        specialinvoke $r14.<sun.security.krb5.Asn1Exception: void <init>(int)>(906);
        throw $r14;

     label5:
        return;
    }

    public byte[] asn1Encode() throws sun.security.krb5.Asn1Exception, java.io.IOException
    {
        sun.security.krb5.Checksum r0;
        sun.security.util.DerOutputStream $r1, r2, r3, $r4, $r6, r7, $r9, r10;
        int $i0;
        long $l1;
        java.math.BigInteger $r5;
        byte $b2, $b3;
        byte[] $r8, $r11;

        r0 := @this: sun.security.krb5.Checksum;
        $r1 = new sun.security.util.DerOutputStream;
        specialinvoke $r1.<sun.security.util.DerOutputStream: void <init>()>();
        r2 = $r1;
        $r4 = new sun.security.util.DerOutputStream;
        specialinvoke $r4.<sun.security.util.DerOutputStream: void <init>()>();
        r3 = $r4;
        $i0 = r0.<sun.security.krb5.Checksum: int cksumType>;
        $l1 = (long) $i0;
        $r5 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);
        virtualinvoke r3.<sun.security.util.DerOutputStream: void putInteger(java.math.BigInteger)>($r5);
        $b2 = staticinvoke <sun.security.util.DerValue: byte createTag(byte,boolean,byte)>(-128, 1, 0);
        virtualinvoke r2.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>($b2, r3);
        $r6 = new sun.security.util.DerOutputStream;
        specialinvoke $r6.<sun.security.util.DerOutputStream: void <init>()>();
        r7 = $r6;
        $r8 = r0.<sun.security.krb5.Checksum: byte[] checksum>;
        virtualinvoke r7.<sun.security.util.DerOutputStream: void putOctetString(byte[])>($r8);
        $b3 = staticinvoke <sun.security.util.DerValue: byte createTag(byte,boolean,byte)>(-128, 1, 1);
        virtualinvoke r2.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>($b3, r7);
        $r9 = new sun.security.util.DerOutputStream;
        specialinvoke $r9.<sun.security.util.DerOutputStream: void <init>()>();
        r10 = $r9;
        virtualinvoke r10.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>(48, r2);
        $r11 = virtualinvoke r10.<sun.security.util.DerOutputStream: byte[] toByteArray()>();
        return $r11;
    }

    public static sun.security.krb5.Checksum parse(sun.security.util.DerInputStream, byte, boolean) throws sun.security.krb5.Asn1Exception, java.io.IOException
    {
        sun.security.util.DerInputStream r0, $r4;
        byte b0, $b2, $b3, $b4, $b5;
        boolean z0;
        sun.security.util.DerValue r1, r2;
        int $i1;
        sun.security.krb5.Asn1Exception $r3;
        sun.security.krb5.Checksum $r5;

        r0 := @parameter0: sun.security.util.DerInputStream;
        b0 := @parameter1: byte;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        $i1 = virtualinvoke r0.<sun.security.util.DerInputStream: int peekByte()>();
        $b2 = (byte) $i1;
        $b3 = $b2 & 31;
        if $b3 == b0 goto label0;

        return null;

     label0:
        r1 = virtualinvoke r0.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $b4 = virtualinvoke r1.<sun.security.util.DerValue: byte getTag()>();
        $b5 = $b4 & 31;
        if b0 == $b5 goto label1;

        $r3 = new sun.security.krb5.Asn1Exception;
        specialinvoke $r3.<sun.security.krb5.Asn1Exception: void <init>(int)>(906);
        throw $r3;

     label1:
        $r4 = virtualinvoke r1.<sun.security.util.DerValue: sun.security.util.DerInputStream getData()>();
        r2 = virtualinvoke $r4.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $r5 = new sun.security.krb5.Checksum;
        specialinvoke $r5.<sun.security.krb5.Checksum: void <init>(sun.security.util.DerValue)>(r2);
        return $r5;
    }

    public final byte[] getBytes()
    {
        sun.security.krb5.Checksum r0;
        byte[] $r1;

        r0 := @this: sun.security.krb5.Checksum;
        $r1 = r0.<sun.security.krb5.Checksum: byte[] checksum>;
        return $r1;
    }

    public final int getType()
    {
        sun.security.krb5.Checksum r0;
        int $i0;

        r0 := @this: sun.security.krb5.Checksum;
        $i0 = r0.<sun.security.krb5.Checksum: int cksumType>;
        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        sun.security.krb5.Checksum r0, $r3;
        java.lang.Object r1;
        sun.security.krb5.internal.KdcErrException r2, $r4;
        boolean $z0, $z1;

        r0 := @this: sun.security.krb5.Checksum;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof sun.security.krb5.Checksum;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = (sun.security.krb5.Checksum) r1;
        $z1 = virtualinvoke r0.<sun.security.krb5.Checksum: boolean isEqual(sun.security.krb5.Checksum)>($r3);

     label2:
        return $z1;

     label3:
        $r4 := @caughtexception;
        r2 = $r4;
        return 0;

        catch sun.security.krb5.internal.KdcErrException from label1 to label2 with label3;
    }

    public int hashCode()
    {
        sun.security.krb5.Checksum r0;
        byte b0;
        int $i1, $i2, i3, $i4, $i5;
        byte[] $r1, $r2;

        r0 := @this: sun.security.krb5.Checksum;
        b0 = 17;
        $i1 = 37 * b0;
        $i2 = r0.<sun.security.krb5.Checksum: int cksumType>;
        i3 = $i1 + $i2;
        $r1 = r0.<sun.security.krb5.Checksum: byte[] checksum>;
        if $r1 == null goto label0;

        $i4 = 37 * i3;
        $r2 = r0.<sun.security.krb5.Checksum: byte[] checksum>;
        $i5 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r2);
        i3 = $i4 + $i5;

     label0:
        return i3;
    }

    static void <clinit>()
    {
        boolean $z0, $z1, $z2;
        null_type n0;
        sun.security.krb5.Config r0;
        java.lang.Exception r1, $r3, $r6, r7;
        java.lang.String r2, r5;
        int $i0, $i1;
        java.io.PrintStream $r4, $r8;

        $z0 = <sun.security.krb5.internal.Krb5: boolean DEBUG>;
        <sun.security.krb5.Checksum: boolean DEBUG> = $z0;
        n0 = null;
        r0 = null;

     label0:
        r0 = staticinvoke <sun.security.krb5.Config: sun.security.krb5.Config getInstance()>();
        r2 = virtualinvoke r0.<sun.security.krb5.Config: java.lang.String getDefault(java.lang.String,java.lang.String)>("default_checksum", "libdefaults");
        if r2 == null goto label1;

        $i0 = virtualinvoke r0.<sun.security.krb5.Config: int getType(java.lang.String)>(r2);
        <sun.security.krb5.Checksum: int CKSUMTYPE_DEFAULT> = $i0;
        goto label2;

     label1:
        <sun.security.krb5.Checksum: int CKSUMTYPE_DEFAULT> = 7;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;
        r1 = $r3;
        $z1 = <sun.security.krb5.Checksum: boolean DEBUG>;
        if $z1 == 0 goto label4;

        $r4 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Exception in getting default checksum value from the configuration Setting default checksum to be RSA-MD5");
        virtualinvoke r1.<java.lang.Exception: void printStackTrace()>();

     label4:
        <sun.security.krb5.Checksum: int CKSUMTYPE_DEFAULT> = 7;

     label5:
        r5 = virtualinvoke r0.<sun.security.krb5.Config: java.lang.String getDefault(java.lang.String,java.lang.String)>("safe_checksum_type", "libdefaults");
        if r5 == null goto label6;

        $i1 = virtualinvoke r0.<sun.security.krb5.Config: int getType(java.lang.String)>(r5);
        <sun.security.krb5.Checksum: int SAFECKSUMTYPE_DEFAULT> = $i1;
        goto label7;

     label6:
        <sun.security.krb5.Checksum: int SAFECKSUMTYPE_DEFAULT> = 8;

     label7:
        goto label10;

     label8:
        $r6 := @caughtexception;
        r7 = $r6;
        $z2 = <sun.security.krb5.Checksum: boolean DEBUG>;
        if $z2 == 0 goto label9;

        $r8 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("Exception in getting safe default checksum value from the configuration Setting  safe default checksum to be RSA-MD5");
        virtualinvoke r7.<java.lang.Exception: void printStackTrace()>();

     label9:
        <sun.security.krb5.Checksum: int SAFECKSUMTYPE_DEFAULT> = 8;

     label10:
        return;

        catch java.lang.Exception from label0 to label2 with label3;
        catch java.lang.Exception from label5 to label7 with label8;
    }
}
