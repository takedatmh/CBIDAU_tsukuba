public class java.util.logging.Logger extends java.lang.Object
{
    private static final java.util.logging.Handler[] emptyHandlers;
    private static final int offValue;
    private volatile java.util.logging.LogManager manager;
    private java.lang.String name;
    private final java.util.concurrent.CopyOnWriteArrayList handlers;
    private volatile java.lang.String resourceBundleName;
    private volatile boolean useParentHandlers;
    private volatile java.util.logging.Filter filter;
    private boolean anonymous;
    private java.util.ResourceBundle catalog;
    private java.lang.String catalogName;
    private java.util.Locale catalogLocale;
    private static final java.lang.Object treeLock;
    private volatile java.util.logging.Logger parent;
    private java.util.ArrayList kids;
    private volatile java.util.logging.Level levelObject;
    private volatile int levelValue;
    private java.lang.ref.WeakReference callersClassLoaderRef;
    private final boolean isSystemLogger;
    public static final java.lang.String GLOBAL_LOGGER_NAME;
    public static final java.util.logging.Logger global;
    static final java.lang.String SYSTEM_LOGGER_RB_NAME;

    public static final java.util.logging.Logger getGlobal()
    {
        java.util.logging.Logger $r0;

        $r0 = <java.util.logging.Logger: java.util.logging.Logger global>;
        return $r0;
    }

    protected void <init>(java.lang.String, java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1, r2;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        specialinvoke r0.<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String,java.lang.Class,boolean)>(r1, r2, null, 0);
        return;
    }

    void <init>(java.lang.String, java.lang.String, java.lang.Class, boolean)
    {
        java.util.logging.Logger r0;
        java.lang.String r1, r2;
        java.lang.Class r3;
        boolean z0;
        java.util.concurrent.CopyOnWriteArrayList $r4;
        java.util.logging.LogManager $r5;
        java.util.logging.Level $r6;
        int $i0;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Class;
        z0 := @parameter3: boolean;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r4 = new java.util.concurrent.CopyOnWriteArrayList;
        specialinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();
        r0.<java.util.logging.Logger: java.util.concurrent.CopyOnWriteArrayList handlers> = $r4;
        r0.<java.util.logging.Logger: boolean useParentHandlers> = 1;
        $r5 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();
        r0.<java.util.logging.Logger: java.util.logging.LogManager manager> = $r5;
        r0.<java.util.logging.Logger: boolean isSystemLogger> = z0;
        specialinvoke r0.<java.util.logging.Logger: void setupResourceInfo(java.lang.String,java.lang.Class)>(r2, r3);
        r0.<java.util.logging.Logger: java.lang.String name> = r1;
        $r6 = <java.util.logging.Level: java.util.logging.Level INFO>;
        $i0 = virtualinvoke $r6.<java.util.logging.Level: int intValue()>();
        r0.<java.util.logging.Logger: int levelValue> = $i0;
        return;
    }

    private void setCallersClassLoaderRef(java.lang.Class)
    {
        java.util.logging.Logger r0;
        java.lang.Class r1;
        java.lang.ClassLoader r2, $r4;
        java.lang.ref.WeakReference $r3;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.Class;
        if r1 == null goto label0;

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        goto label1;

     label0:
        $r4 = null;

     label1:
        r2 = $r4;
        if r2 == null goto label2;

        $r3 = new java.lang.ref.WeakReference;
        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r2);
        r0.<java.util.logging.Logger: java.lang.ref.WeakReference callersClassLoaderRef> = $r3;

     label2:
        return;
    }

    private java.lang.ClassLoader getCallersClassLoader()
    {
        java.util.logging.Logger r0;
        java.lang.ref.WeakReference $r1, $r2;
        java.lang.Object $r3;
        java.lang.ClassLoader $r4;

        r0 := @this: java.util.logging.Logger;
        $r1 = r0.<java.util.logging.Logger: java.lang.ref.WeakReference callersClassLoaderRef>;
        if $r1 == null goto label0;

        $r2 = r0.<java.util.logging.Logger: java.lang.ref.WeakReference callersClassLoaderRef>;
        $r3 = virtualinvoke $r2.<java.lang.ref.WeakReference: java.lang.Object get()>();
        $r4 = (java.lang.ClassLoader) $r3;
        goto label1;

     label0:
        $r4 = null;

     label1:
        return $r4;
    }

    private void <init>(java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        java.util.logging.Level $r3;
        int $i0;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = new java.util.concurrent.CopyOnWriteArrayList;
        specialinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();
        r0.<java.util.logging.Logger: java.util.concurrent.CopyOnWriteArrayList handlers> = $r2;
        r0.<java.util.logging.Logger: boolean useParentHandlers> = 1;
        r0.<java.util.logging.Logger: java.lang.String name> = r1;
        r0.<java.util.logging.Logger: boolean isSystemLogger> = 1;
        $r3 = <java.util.logging.Level: java.util.logging.Level INFO>;
        $i0 = virtualinvoke $r3.<java.util.logging.Level: int intValue()>();
        r0.<java.util.logging.Logger: int levelValue> = $i0;
        return;
    }

    void setLogManager(java.util.logging.LogManager)
    {
        java.util.logging.Logger r0;
        java.util.logging.LogManager r1;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.LogManager;
        r0.<java.util.logging.Logger: java.util.logging.LogManager manager> = r1;
        return;
    }

    private void checkPermission() throws java.lang.SecurityException
    {
        java.util.logging.Logger r0;
        java.util.logging.LogManager $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: java.util.logging.Logger;
        $z0 = r0.<java.util.logging.Logger: boolean anonymous>;
        if $z0 != 0 goto label1;

        $r2 = r0.<java.util.logging.Logger: java.util.logging.LogManager manager>;
        if $r2 != null goto label0;

        $r1 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();
        r0.<java.util.logging.Logger: java.util.logging.LogManager manager> = $r1;

     label0:
        $r3 = r0.<java.util.logging.Logger: java.util.logging.LogManager manager>;
        virtualinvoke $r3.<java.util.logging.LogManager: void checkPermission()>();

     label1:
        return;
    }

    private static java.util.logging.Logger demandLogger(java.lang.String, java.lang.String, java.lang.Class)
    {
        java.lang.String r0, r1;
        java.lang.Class r2;
        java.util.logging.LogManager r3;
        java.lang.SecurityManager r4;
        boolean $z0;
        java.lang.ClassLoader $r5;
        java.util.logging.Logger $r6, $r7;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.Class;
        r3 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();
        r4 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r4 == null goto label0;

        $z0 = <java.util.logging.Logger$LoggerHelper: boolean disableCallerCheck>;
        if $z0 != 0 goto label0;

        $r5 = virtualinvoke r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        if $r5 != null goto label0;

        $r6 = virtualinvoke r3.<java.util.logging.LogManager: java.util.logging.Logger demandSystemLogger(java.lang.String,java.lang.String)>(r0, r1);
        return $r6;

     label0:
        $r7 = virtualinvoke r3.<java.util.logging.LogManager: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String,java.lang.Class)>(r0, r1, r2);
        return $r7;
    }

    public static java.util.logging.Logger getLogger(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Class $r1;
        java.util.logging.Logger $r2;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String,java.lang.Class)>(r0, null, $r1);
        return $r2;
    }

    public static java.util.logging.Logger getLogger(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r4, $r5, $r8, $r12;
        java.lang.Class r2;
        java.util.logging.Logger r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r11;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String,java.lang.Class)>(r0, r1, r2);
        $r4 = r3.<java.util.logging.Logger: java.lang.String resourceBundleName>;
        if $r4 != null goto label0;

        specialinvoke r3.<java.util.logging.Logger: void setupResourceInfo(java.lang.String,java.lang.Class)>(r1, r2);
        goto label1;

     label0:
        $r5 = r3.<java.util.logging.Logger: java.lang.String resourceBundleName>;
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = r3.<java.util.logging.Logger: java.lang.String resourceBundleName>;
        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);
        throw $r6;

     label1:
        return r3;
    }

    static java.util.logging.Logger getPlatformLogger(java.lang.String)
    {
        java.lang.String r0;
        java.util.logging.LogManager r1;
        java.util.logging.Logger r2;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();
        r2 = virtualinvoke r1.<java.util.logging.LogManager: java.util.logging.Logger demandSystemLogger(java.lang.String,java.lang.String)>(r0, "sun.util.logging.resources.logging");
        return r2;
    }

    public static java.util.logging.Logger getAnonymousLogger()
    {
        java.util.logging.Logger $r0;

        $r0 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getAnonymousLogger(java.lang.String)>(null);
        return $r0;
    }

    public static java.util.logging.Logger getAnonymousLogger(java.lang.String)
    {
        java.lang.String r0;
        java.util.logging.LogManager r1;
        java.lang.Class $r2;
        java.util.logging.Logger r3, r4, $r5;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();
        virtualinvoke r1.<java.util.logging.LogManager: void drainLoggerRefQueueBounded()>();
        $r5 = new java.util.logging.Logger;
        $r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        specialinvoke $r5.<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String,java.lang.Class,boolean)>(null, r0, $r2, 0);
        r3 = $r5;
        r3.<java.util.logging.Logger: boolean anonymous> = 1;
        r4 = virtualinvoke r1.<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>("");
        specialinvoke r3.<java.util.logging.Logger: void doSetParent(java.util.logging.Logger)>(r4);
        return r3;
    }

    public java.util.ResourceBundle getResourceBundle()
    {
        java.util.logging.Logger r0;
        java.lang.String $r1;
        java.util.ResourceBundle $r2;

        r0 := @this: java.util.logging.Logger;
        $r1 = virtualinvoke r0.<java.util.logging.Logger: java.lang.String getResourceBundleName()>();
        $r2 = specialinvoke r0.<java.util.logging.Logger: java.util.ResourceBundle findResourceBundle(java.lang.String,boolean)>($r1, 1);
        return $r2;
    }

    public java.lang.String getResourceBundleName()
    {
        java.util.logging.Logger r0;
        java.lang.String $r1;

        r0 := @this: java.util.logging.Logger;
        $r1 = r0.<java.util.logging.Logger: java.lang.String resourceBundleName>;
        return $r1;
    }

    public void setFilter(java.util.logging.Filter) throws java.lang.SecurityException
    {
        java.util.logging.Logger r0;
        java.util.logging.Filter r1;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Filter;
        specialinvoke r0.<java.util.logging.Logger: void checkPermission()>();
        r0.<java.util.logging.Logger: java.util.logging.Filter filter> = r1;
        return;
    }

    public java.util.logging.Filter getFilter()
    {
        java.util.logging.Logger r0;
        java.util.logging.Filter $r1;

        r0 := @this: java.util.logging.Logger;
        $r1 = r0.<java.util.logging.Logger: java.util.logging.Filter filter>;
        return $r1;
    }

    public void log(java.util.logging.LogRecord)
    {
        java.util.logging.Logger r0, r3, $r9;
        java.util.logging.LogRecord r1;
        java.util.logging.Filter r2;
        java.util.logging.Handler[] r4, r5, $r8;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.util.logging.Handler r6;
        java.util.logging.Level $r7;
        boolean $z0, $z1, $z2, $z3, z4, $z5;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.LogRecord;
        $r7 = virtualinvoke r1.<java.util.logging.LogRecord: java.util.logging.Level getLevel()>();
        $i2 = virtualinvoke $r7.<java.util.logging.Level: int intValue()>();
        $i3 = r0.<java.util.logging.Logger: int levelValue>;
        if $i2 < $i3 goto label0;

        $i4 = r0.<java.util.logging.Logger: int levelValue>;
        $i5 = <java.util.logging.Logger: int offValue>;
        if $i4 != $i5 goto label1;

     label0:
        return;

     label1:
        r2 = r0.<java.util.logging.Logger: java.util.logging.Filter filter>;
        if r2 == null goto label2;

        $z0 = interfaceinvoke r2.<java.util.logging.Filter: boolean isLoggable(java.util.logging.LogRecord)>(r1);
        if $z0 != 0 goto label2;

        return;

     label2:
        r3 = r0;

     label3:
        if r3 == null goto label13;

        $z1 = r0.<java.util.logging.Logger: boolean isSystemLogger>;
        if $z1 == 0 goto label4;

        $r8 = virtualinvoke r3.<java.util.logging.Logger: java.util.logging.Handler[] accessCheckedHandlers()>();
        goto label5;

     label4:
        $r8 = virtualinvoke r3.<java.util.logging.Logger: java.util.logging.Handler[] getHandlers()>();

     label5:
        r4 = $r8;
        r5 = r4;
        i0 = lengthof r5;
        i1 = 0;

     label6:
        if i1 >= i0 goto label7;

        r6 = r5[i1];
        virtualinvoke r6.<java.util.logging.Handler: void publish(java.util.logging.LogRecord)>(r1);
        i1 = i1 + 1;
        goto label6;

     label7:
        $z2 = r0.<java.util.logging.Logger: boolean isSystemLogger>;
        if $z2 == 0 goto label8;

        $z3 = r3.<java.util.logging.Logger: boolean useParentHandlers>;
        goto label9;

     label8:
        $z3 = virtualinvoke r3.<java.util.logging.Logger: boolean getUseParentHandlers()>();

     label9:
        z4 = $z3;
        if z4 != 0 goto label10;

        goto label13;

     label10:
        $z5 = r0.<java.util.logging.Logger: boolean isSystemLogger>;
        if $z5 == 0 goto label11;

        $r9 = r3.<java.util.logging.Logger: java.util.logging.Logger parent>;
        goto label12;

     label11:
        $r9 = virtualinvoke r3.<java.util.logging.Logger: java.util.logging.Logger getParent()>();

     label12:
        r3 = $r9;
        goto label3;

     label13:
        return;
    }

    private void doLog(java.util.logging.LogRecord)
    {
        java.util.logging.Logger r0;
        java.util.logging.LogRecord r1;
        java.lang.String r2, $r3;
        boolean $z0;
        java.util.ResourceBundle $r4;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.LogRecord;
        $r3 = r0.<java.util.logging.Logger: java.lang.String name>;
        virtualinvoke r1.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r3);
        r2 = specialinvoke r0.<java.util.logging.Logger: java.lang.String getEffectiveResourceBundleName()>();
        if r2 == null goto label0;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("sun.util.logging.resources.logging");
        if $z0 != 0 goto label0;

        virtualinvoke r1.<java.util.logging.LogRecord: void setResourceBundleName(java.lang.String)>(r2);
        $r4 = specialinvoke r0.<java.util.logging.Logger: java.util.ResourceBundle findResourceBundle(java.lang.String,boolean)>(r2, 1);
        virtualinvoke r1.<java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)>($r4);

     label0:
        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r1);
        return;
    }

    public void log(java.util.logging.Level, java.lang.String)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2;
        java.util.logging.LogRecord r3, $r4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Level;
        r2 := @parameter1: java.lang.String;
        $i0 = virtualinvoke r1.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 < $i1 goto label0;

        $i2 = r0.<java.util.logging.Logger: int levelValue>;
        $i3 = <java.util.logging.Logger: int offValue>;
        if $i2 != $i3 goto label1;

     label0:
        return;

     label1:
        $r4 = new java.util.logging.LogRecord;
        specialinvoke $r4.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r2);
        r3 = $r4;
        specialinvoke r0.<java.util.logging.Logger: void doLog(java.util.logging.LogRecord)>(r3);
        return;
    }

    public void log(java.util.logging.Level, java.lang.String, java.lang.Object)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2;
        java.lang.Object r3;
        java.util.logging.LogRecord r4, $r6;
        java.lang.Object[] r5, $r7;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Level;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Object;
        $i0 = virtualinvoke r1.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 < $i1 goto label0;

        $i2 = r0.<java.util.logging.Logger: int levelValue>;
        $i3 = <java.util.logging.Logger: int offValue>;
        if $i2 != $i3 goto label1;

     label0:
        return;

     label1:
        $r6 = new java.util.logging.LogRecord;
        specialinvoke $r6.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r2);
        r4 = $r6;
        $r7 = newarray (java.lang.Object)[1];
        $r7[0] = r3;
        r5 = $r7;
        virtualinvoke r4.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>(r5);
        specialinvoke r0.<java.util.logging.Logger: void doLog(java.util.logging.LogRecord)>(r4);
        return;
    }

    public void log(java.util.logging.Level, java.lang.String, java.lang.Object[])
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2;
        java.lang.Object[] r3;
        java.util.logging.LogRecord r4, $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Level;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Object[];
        $i0 = virtualinvoke r1.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 < $i1 goto label0;

        $i2 = r0.<java.util.logging.Logger: int levelValue>;
        $i3 = <java.util.logging.Logger: int offValue>;
        if $i2 != $i3 goto label1;

     label0:
        return;

     label1:
        $r5 = new java.util.logging.LogRecord;
        specialinvoke $r5.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r2);
        r4 = $r5;
        virtualinvoke r4.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>(r3);
        specialinvoke r0.<java.util.logging.Logger: void doLog(java.util.logging.LogRecord)>(r4);
        return;
    }

    public void log(java.util.logging.Level, java.lang.String, java.lang.Throwable)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2;
        java.lang.Throwable r3;
        java.util.logging.LogRecord r4, $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Level;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Throwable;
        $i0 = virtualinvoke r1.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 < $i1 goto label0;

        $i2 = r0.<java.util.logging.Logger: int levelValue>;
        $i3 = <java.util.logging.Logger: int offValue>;
        if $i2 != $i3 goto label1;

     label0:
        return;

     label1:
        $r5 = new java.util.logging.LogRecord;
        specialinvoke $r5.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r2);
        r4 = $r5;
        virtualinvoke r4.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>(r3);
        specialinvoke r0.<java.util.logging.Logger: void doLog(java.util.logging.LogRecord)>(r4);
        return;
    }

    public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, r3, r4;
        java.util.logging.LogRecord r5, $r6;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Level;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: java.lang.String;
        $i0 = virtualinvoke r1.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 < $i1 goto label0;

        $i2 = r0.<java.util.logging.Logger: int levelValue>;
        $i3 = <java.util.logging.Logger: int offValue>;
        if $i2 != $i3 goto label1;

     label0:
        return;

     label1:
        $r6 = new java.util.logging.LogRecord;
        specialinvoke $r6.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r4);
        r5 = $r6;
        virtualinvoke r5.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r2);
        virtualinvoke r5.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r3);
        specialinvoke r0.<java.util.logging.Logger: void doLog(java.util.logging.LogRecord)>(r5);
        return;
    }

    public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, r3, r4;
        java.lang.Object r5;
        java.util.logging.LogRecord r6, $r8;
        java.lang.Object[] r7, $r9;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Level;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: java.lang.String;
        r5 := @parameter4: java.lang.Object;
        $i0 = virtualinvoke r1.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 < $i1 goto label0;

        $i2 = r0.<java.util.logging.Logger: int levelValue>;
        $i3 = <java.util.logging.Logger: int offValue>;
        if $i2 != $i3 goto label1;

     label0:
        return;

     label1:
        $r8 = new java.util.logging.LogRecord;
        specialinvoke $r8.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r4);
        r6 = $r8;
        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r2);
        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r3);
        $r9 = newarray (java.lang.Object)[1];
        $r9[0] = r5;
        r7 = $r9;
        virtualinvoke r6.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>(r7);
        specialinvoke r0.<java.util.logging.Logger: void doLog(java.util.logging.LogRecord)>(r6);
        return;
    }

    public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, r3, r4;
        java.lang.Object[] r5;
        java.util.logging.LogRecord r6, $r7;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Level;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: java.lang.String;
        r5 := @parameter4: java.lang.Object[];
        $i0 = virtualinvoke r1.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 < $i1 goto label0;

        $i2 = r0.<java.util.logging.Logger: int levelValue>;
        $i3 = <java.util.logging.Logger: int offValue>;
        if $i2 != $i3 goto label1;

     label0:
        return;

     label1:
        $r7 = new java.util.logging.LogRecord;
        specialinvoke $r7.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r4);
        r6 = $r7;
        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r2);
        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r3);
        virtualinvoke r6.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>(r5);
        specialinvoke r0.<java.util.logging.Logger: void doLog(java.util.logging.LogRecord)>(r6);
        return;
    }

    public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, r3, r4;
        java.lang.Throwable r5;
        java.util.logging.LogRecord r6, $r7;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Level;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: java.lang.String;
        r5 := @parameter4: java.lang.Throwable;
        $i0 = virtualinvoke r1.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 < $i1 goto label0;

        $i2 = r0.<java.util.logging.Logger: int levelValue>;
        $i3 = <java.util.logging.Logger: int offValue>;
        if $i2 != $i3 goto label1;

     label0:
        return;

     label1:
        $r7 = new java.util.logging.LogRecord;
        specialinvoke $r7.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r4);
        r6 = $r7;
        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r2);
        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r3);
        virtualinvoke r6.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>(r5);
        specialinvoke r0.<java.util.logging.Logger: void doLog(java.util.logging.LogRecord)>(r6);
        return;
    }

    private void doLog(java.util.logging.LogRecord, java.lang.String)
    {
        java.util.logging.Logger r0;
        java.util.logging.LogRecord r1;
        java.lang.String r2, $r3;
        java.util.ResourceBundle $r4;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.LogRecord;
        r2 := @parameter1: java.lang.String;
        $r3 = r0.<java.util.logging.Logger: java.lang.String name>;
        virtualinvoke r1.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r3);
        if r2 == null goto label0;

        virtualinvoke r1.<java.util.logging.LogRecord: void setResourceBundleName(java.lang.String)>(r2);
        $r4 = specialinvoke r0.<java.util.logging.Logger: java.util.ResourceBundle findResourceBundle(java.lang.String,boolean)>(r2, 0);
        virtualinvoke r1.<java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)>($r4);

     label0:
        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>(r1);
        return;
    }

    public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, r3, r4, r5;
        java.util.logging.LogRecord r6, $r7;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Level;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: java.lang.String;
        r5 := @parameter4: java.lang.String;
        $i0 = virtualinvoke r1.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 < $i1 goto label0;

        $i2 = r0.<java.util.logging.Logger: int levelValue>;
        $i3 = <java.util.logging.Logger: int offValue>;
        if $i2 != $i3 goto label1;

     label0:
        return;

     label1:
        $r7 = new java.util.logging.LogRecord;
        specialinvoke $r7.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r5);
        r6 = $r7;
        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r2);
        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r3);
        specialinvoke r0.<java.util.logging.Logger: void doLog(java.util.logging.LogRecord,java.lang.String)>(r6, r4);
        return;
    }

    public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, r3, r4, r5;
        java.lang.Object r6;
        java.util.logging.LogRecord r7, $r9;
        java.lang.Object[] r8, $r10;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Level;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: java.lang.String;
        r5 := @parameter4: java.lang.String;
        r6 := @parameter5: java.lang.Object;
        $i0 = virtualinvoke r1.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 < $i1 goto label0;

        $i2 = r0.<java.util.logging.Logger: int levelValue>;
        $i3 = <java.util.logging.Logger: int offValue>;
        if $i2 != $i3 goto label1;

     label0:
        return;

     label1:
        $r9 = new java.util.logging.LogRecord;
        specialinvoke $r9.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r5);
        r7 = $r9;
        virtualinvoke r7.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r2);
        virtualinvoke r7.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r3);
        $r10 = newarray (java.lang.Object)[1];
        $r10[0] = r6;
        r8 = $r10;
        virtualinvoke r7.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>(r8);
        specialinvoke r0.<java.util.logging.Logger: void doLog(java.util.logging.LogRecord,java.lang.String)>(r7, r4);
        return;
    }

    public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, r3, r4, r5;
        java.lang.Object[] r6;
        java.util.logging.LogRecord r7, $r8;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Level;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: java.lang.String;
        r5 := @parameter4: java.lang.String;
        r6 := @parameter5: java.lang.Object[];
        $i0 = virtualinvoke r1.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 < $i1 goto label0;

        $i2 = r0.<java.util.logging.Logger: int levelValue>;
        $i3 = <java.util.logging.Logger: int offValue>;
        if $i2 != $i3 goto label1;

     label0:
        return;

     label1:
        $r8 = new java.util.logging.LogRecord;
        specialinvoke $r8.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r5);
        r7 = $r8;
        virtualinvoke r7.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r2);
        virtualinvoke r7.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r3);
        virtualinvoke r7.<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>(r6);
        specialinvoke r0.<java.util.logging.Logger: void doLog(java.util.logging.LogRecord,java.lang.String)>(r7, r4);
        return;
    }

    public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, r3, r4, r5;
        java.lang.Throwable r6;
        java.util.logging.LogRecord r7, $r8;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Level;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: java.lang.String;
        r5 := @parameter4: java.lang.String;
        r6 := @parameter5: java.lang.Throwable;
        $i0 = virtualinvoke r1.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 < $i1 goto label0;

        $i2 = r0.<java.util.logging.Logger: int levelValue>;
        $i3 = <java.util.logging.Logger: int offValue>;
        if $i2 != $i3 goto label1;

     label0:
        return;

     label1:
        $r8 = new java.util.logging.LogRecord;
        specialinvoke $r8.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r5);
        r7 = $r8;
        virtualinvoke r7.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r2);
        virtualinvoke r7.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r3);
        virtualinvoke r7.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>(r6);
        specialinvoke r0.<java.util.logging.Logger: void doLog(java.util.logging.LogRecord,java.lang.String)>(r7, r4);
        return;
    }

    public void entering(java.lang.String, java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1, r2;
        java.util.logging.Level $r3, $r4;
        int $i0, $i1;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        $r3 = <java.util.logging.Level: java.util.logging.Level FINER>;
        $i0 = virtualinvoke $r3.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 >= $i1 goto label0;

        return;

     label0:
        $r4 = <java.util.logging.Level: java.util.logging.Level FINER>;
        virtualinvoke r0.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r4, r1, r2, "ENTRY");
        return;
    }

    public void entering(java.lang.String, java.lang.String, java.lang.Object)
    {
        java.util.logging.Logger r0;
        java.lang.String r1, r2;
        java.lang.Object r3;
        java.util.logging.Level $r4, $r7;
        java.lang.Object[] r5, $r6;
        int $i0, $i1;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Object;
        $r4 = <java.util.logging.Level: java.util.logging.Level FINER>;
        $i0 = virtualinvoke $r4.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 >= $i1 goto label0;

        return;

     label0:
        $r6 = newarray (java.lang.Object)[1];
        $r6[0] = r3;
        r5 = $r6;
        $r7 = <java.util.logging.Level: java.util.logging.Level FINER>;
        virtualinvoke r0.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])>($r7, r1, r2, "ENTRY {0}", r5);
        return;
    }

    public void entering(java.lang.String, java.lang.String, java.lang.Object[])
    {
        java.util.logging.Logger r0;
        java.lang.String r1, r2, r5;
        java.lang.Object[] r3;
        java.util.logging.Level $r4, $r6, $r12;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Object[];
        $r4 = <java.util.logging.Level: java.util.logging.Level FINER>;
        $i1 = virtualinvoke $r4.<java.util.logging.Level: int intValue()>();
        $i2 = r0.<java.util.logging.Logger: int levelValue>;
        if $i1 >= $i2 goto label0;

        return;

     label0:
        r5 = "ENTRY";
        if r3 != null goto label1;

        $r6 = <java.util.logging.Level: java.util.logging.Level FINER>;
        virtualinvoke r0.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r6, r1, r2, r5);
        return;

     label1:
        i0 = 0;

     label2:
        $i3 = lengthof r3;
        if i0 >= $i3 goto label3;

        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");
        r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        i0 = i0 + 1;
        goto label2;

     label3:
        $r12 = <java.util.logging.Level: java.util.logging.Level FINER>;
        virtualinvoke r0.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])>($r12, r1, r2, r5, r3);
        return;
    }

    public void exiting(java.lang.String, java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1, r2;
        java.util.logging.Level $r3, $r4;
        int $i0, $i1;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        $r3 = <java.util.logging.Level: java.util.logging.Level FINER>;
        $i0 = virtualinvoke $r3.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 >= $i1 goto label0;

        return;

     label0:
        $r4 = <java.util.logging.Level: java.util.logging.Level FINER>;
        virtualinvoke r0.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r4, r1, r2, "RETURN");
        return;
    }

    public void exiting(java.lang.String, java.lang.String, java.lang.Object)
    {
        java.util.logging.Logger r0;
        java.lang.String r1, r2;
        java.lang.Object r3;
        java.util.logging.Level $r4, $r7;
        java.lang.Object[] r5, $r6;
        int $i0, $i1;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Object;
        $r4 = <java.util.logging.Level: java.util.logging.Level FINER>;
        $i0 = virtualinvoke $r4.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 >= $i1 goto label0;

        return;

     label0:
        $r6 = newarray (java.lang.Object)[1];
        $r6[0] = r3;
        r5 = $r6;
        $r7 = <java.util.logging.Level: java.util.logging.Level FINER>;
        virtualinvoke r0.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>($r7, r1, r2, "RETURN {0}", r3);
        return;
    }

    public void throwing(java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.util.logging.Logger r0;
        java.lang.String r1, r2;
        java.lang.Throwable r3;
        java.util.logging.Level $r4, $r5;
        java.util.logging.LogRecord r6, $r7;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Throwable;
        $r4 = <java.util.logging.Level: java.util.logging.Level FINER>;
        $i0 = virtualinvoke $r4.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 < $i1 goto label0;

        $i2 = r0.<java.util.logging.Logger: int levelValue>;
        $i3 = <java.util.logging.Logger: int offValue>;
        if $i2 != $i3 goto label1;

     label0:
        return;

     label1:
        $r7 = new java.util.logging.LogRecord;
        $r5 = <java.util.logging.Level: java.util.logging.Level FINER>;
        specialinvoke $r7.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r5, "THROW");
        r6 = $r7;
        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>(r1);
        virtualinvoke r6.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(r2);
        virtualinvoke r6.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>(r3);
        specialinvoke r0.<java.util.logging.Logger: void doLog(java.util.logging.LogRecord)>(r6);
        return;
    }

    public void severe(java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1;
        java.util.logging.Level $r2, $r3;
        int $i0, $i1;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE>;
        $i0 = virtualinvoke $r2.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 >= $i1 goto label0;

        return;

     label0:
        $r3 = <java.util.logging.Level: java.util.logging.Level SEVERE>;
        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r3, r1);
        return;
    }

    public void warning(java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1;
        java.util.logging.Level $r2, $r3;
        int $i0, $i1;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        $r2 = <java.util.logging.Level: java.util.logging.Level WARNING>;
        $i0 = virtualinvoke $r2.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 >= $i1 goto label0;

        return;

     label0:
        $r3 = <java.util.logging.Level: java.util.logging.Level WARNING>;
        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r3, r1);
        return;
    }

    public void info(java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1;
        java.util.logging.Level $r2, $r3;
        int $i0, $i1;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        $r2 = <java.util.logging.Level: java.util.logging.Level INFO>;
        $i0 = virtualinvoke $r2.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 >= $i1 goto label0;

        return;

     label0:
        $r3 = <java.util.logging.Level: java.util.logging.Level INFO>;
        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r3, r1);
        return;
    }

    public void config(java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1;
        java.util.logging.Level $r2, $r3;
        int $i0, $i1;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        $r2 = <java.util.logging.Level: java.util.logging.Level CONFIG>;
        $i0 = virtualinvoke $r2.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 >= $i1 goto label0;

        return;

     label0:
        $r3 = <java.util.logging.Level: java.util.logging.Level CONFIG>;
        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r3, r1);
        return;
    }

    public void fine(java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1;
        java.util.logging.Level $r2, $r3;
        int $i0, $i1;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        $r2 = <java.util.logging.Level: java.util.logging.Level FINE>;
        $i0 = virtualinvoke $r2.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 >= $i1 goto label0;

        return;

     label0:
        $r3 = <java.util.logging.Level: java.util.logging.Level FINE>;
        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r3, r1);
        return;
    }

    public void finer(java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1;
        java.util.logging.Level $r2, $r3;
        int $i0, $i1;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        $r2 = <java.util.logging.Level: java.util.logging.Level FINER>;
        $i0 = virtualinvoke $r2.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 >= $i1 goto label0;

        return;

     label0:
        $r3 = <java.util.logging.Level: java.util.logging.Level FINER>;
        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r3, r1);
        return;
    }

    public void finest(java.lang.String)
    {
        java.util.logging.Logger r0;
        java.lang.String r1;
        java.util.logging.Level $r2, $r3;
        int $i0, $i1;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        $r2 = <java.util.logging.Level: java.util.logging.Level FINEST>;
        $i0 = virtualinvoke $r2.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 >= $i1 goto label0;

        return;

     label0:
        $r3 = <java.util.logging.Level: java.util.logging.Level FINEST>;
        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r3, r1);
        return;
    }

    public void setLevel(java.util.logging.Level) throws java.lang.SecurityException
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Level;
        specialinvoke r0.<java.util.logging.Logger: void checkPermission()>();
        $r4 = <java.util.logging.Logger: java.lang.Object treeLock>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        r0.<java.util.logging.Logger: java.util.logging.Level levelObject> = r1;
        specialinvoke r0.<java.util.logging.Logger: void updateEffectiveLevel()>();
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r5 := @caughtexception;

     label3:
        r3 = $r5;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.util.logging.Level getLevel()
    {
        java.util.logging.Logger r0;
        java.util.logging.Level $r1;

        r0 := @this: java.util.logging.Logger;
        $r1 = r0.<java.util.logging.Logger: java.util.logging.Level levelObject>;
        return $r1;
    }

    public boolean isLoggable(java.util.logging.Level)
    {
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Level;
        $i0 = virtualinvoke r1.<java.util.logging.Level: int intValue()>();
        $i1 = r0.<java.util.logging.Logger: int levelValue>;
        if $i0 < $i1 goto label0;

        $i2 = r0.<java.util.logging.Logger: int levelValue>;
        $i3 = <java.util.logging.Logger: int offValue>;
        if $i2 != $i3 goto label1;

     label0:
        return 0;

     label1:
        return 1;
    }

    public java.lang.String getName()
    {
        java.util.logging.Logger r0;
        java.lang.String $r1;

        r0 := @this: java.util.logging.Logger;
        $r1 = r0.<java.util.logging.Logger: java.lang.String name>;
        return $r1;
    }

    public void addHandler(java.util.logging.Handler) throws java.lang.SecurityException
    {
        java.util.logging.Logger r0;
        java.util.logging.Handler r1;
        java.util.concurrent.CopyOnWriteArrayList $r3;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Handler;
        virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        specialinvoke r0.<java.util.logging.Logger: void checkPermission()>();
        $r3 = r0.<java.util.logging.Logger: java.util.concurrent.CopyOnWriteArrayList handlers>;
        virtualinvoke $r3.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1);
        return;
    }

    public void removeHandler(java.util.logging.Handler) throws java.lang.SecurityException
    {
        java.util.logging.Logger r0;
        java.util.logging.Handler r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Handler;
        specialinvoke r0.<java.util.logging.Logger: void checkPermission()>();
        if r1 != null goto label0;

        return;

     label0:
        $r2 = r0.<java.util.logging.Logger: java.util.concurrent.CopyOnWriteArrayList handlers>;
        virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1);
        return;
    }

    public java.util.logging.Handler[] getHandlers()
    {
        java.util.logging.Logger r0;
        java.util.logging.Handler[] $r1;

        r0 := @this: java.util.logging.Logger;
        $r1 = virtualinvoke r0.<java.util.logging.Logger: java.util.logging.Handler[] accessCheckedHandlers()>();
        return $r1;
    }

    java.util.logging.Handler[] accessCheckedHandlers()
    {
        java.util.logging.Logger r0;
        java.util.logging.Handler[] $r1, $r4;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        java.lang.Object[] $r3;

        r0 := @this: java.util.logging.Logger;
        $r2 = r0.<java.util.logging.Logger: java.util.concurrent.CopyOnWriteArrayList handlers>;
        $r1 = <java.util.logging.Logger: java.util.logging.Handler[] emptyHandlers>;
        $r3 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r1);
        $r4 = (java.util.logging.Handler[]) $r3;
        return $r4;
    }

    public void setUseParentHandlers(boolean)
    {
        java.util.logging.Logger r0;
        boolean z0;

        r0 := @this: java.util.logging.Logger;
        z0 := @parameter0: boolean;
        specialinvoke r0.<java.util.logging.Logger: void checkPermission()>();
        r0.<java.util.logging.Logger: boolean useParentHandlers> = z0;
        return;
    }

    public boolean getUseParentHandlers()
    {
        java.util.logging.Logger r0;
        boolean $z0;

        r0 := @this: java.util.logging.Logger;
        $z0 = r0.<java.util.logging.Logger: boolean useParentHandlers>;
        return $z0;
    }

    private static java.util.ResourceBundle findSystemResourceBundle(java.util.Locale)
    {
        java.util.Locale r0;
        java.util.logging.Logger$1 $r1;
        java.lang.Object $r2;
        java.util.ResourceBundle $r3;

        r0 := @parameter0: java.util.Locale;
        $r1 = new java.util.logging.Logger$1;
        specialinvoke $r1.<java.util.logging.Logger$1: void <init>(java.util.Locale)>(r0);
        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        $r3 = (java.util.ResourceBundle) $r2;
        return $r3;
    }

    private synchronized java.util.ResourceBundle findResourceBundle(java.lang.String, boolean)
    {
        java.util.logging.Logger r0;
        java.lang.String r1, $r8;
        boolean z0, $z1, $z2, $z3, $z4;
        java.util.Locale r2, $r7;
        java.lang.ClassLoader r3, r16;
        java.util.MissingResourceException r4, r5, $r15, $r19;
        java.util.ResourceBundle $r6, $r9, $r10, $r11, $r13, $r14, $r17, $r18, $r20;
        java.lang.Thread $r12;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        if r1 != null goto label0;

        return null;

     label0:
        r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();
        $r6 = r0.<java.util.logging.Logger: java.util.ResourceBundle catalog>;
        if $r6 == null goto label1;

        $r7 = r0.<java.util.logging.Logger: java.util.Locale catalogLocale>;
        $z1 = virtualinvoke r2.<java.util.Locale: boolean equals(java.lang.Object)>($r7);
        if $z1 == 0 goto label1;

        $r8 = r0.<java.util.logging.Logger: java.lang.String catalogName>;
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r8);
        if $z2 == 0 goto label1;

        $r9 = r0.<java.util.logging.Logger: java.util.ResourceBundle catalog>;
        return $r9;

     label1:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("sun.util.logging.resources.logging");
        if $z3 == 0 goto label2;

        $r10 = staticinvoke <java.util.logging.Logger: java.util.ResourceBundle findSystemResourceBundle(java.util.Locale)>(r2);
        r0.<java.util.logging.Logger: java.util.ResourceBundle catalog> = $r10;
        r0.<java.util.logging.Logger: java.lang.String catalogName> = r1;
        r0.<java.util.logging.Logger: java.util.Locale catalogLocale> = r2;
        $r11 = r0.<java.util.logging.Logger: java.util.ResourceBundle catalog>;
        return $r11;

     label2:
        $r12 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r3 = virtualinvoke $r12.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
        if r3 != null goto label3;

        r3 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label3:
        $r13 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)>(r1, r2, r3);
        r0.<java.util.logging.Logger: java.util.ResourceBundle catalog> = $r13;
        r0.<java.util.logging.Logger: java.lang.String catalogName> = r1;
        r0.<java.util.logging.Logger: java.util.Locale catalogLocale> = r2;
        $r14 = r0.<java.util.logging.Logger: java.util.ResourceBundle catalog>;

     label4:
        return $r14;

     label5:
        $r15 := @caughtexception;
        r4 = $r15;
        if z0 == 0 goto label9;

        r16 = specialinvoke r0.<java.util.logging.Logger: java.lang.ClassLoader getCallersClassLoader()>();
        if r16 == null goto label9;

        if r16 == r3 goto label9;

     label6:
        $r17 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)>(r1, r2, r16);
        r0.<java.util.logging.Logger: java.util.ResourceBundle catalog> = $r17;
        r0.<java.util.logging.Logger: java.lang.String catalogName> = r1;
        r0.<java.util.logging.Logger: java.util.Locale catalogLocale> = r2;
        $r18 = r0.<java.util.logging.Logger: java.util.ResourceBundle catalog>;

     label7:
        return $r18;

     label8:
        $r19 := @caughtexception;
        r5 = $r19;

     label9:
        $z4 = <java.util.logging.Logger$LoggerHelper: boolean allowStackWalkSearch>;
        if $z4 == 0 goto label10;

        $r20 = specialinvoke r0.<java.util.logging.Logger: java.util.ResourceBundle findResourceBundleFromStack(java.lang.String,java.util.Locale,java.lang.ClassLoader)>(r1, r2, r3);
        return $r20;

     label10:
        return null;

        catch java.util.MissingResourceException from label3 to label4 with label5;
        catch java.util.MissingResourceException from label6 to label7 with label8;
    }

    private synchronized java.util.ResourceBundle findResourceBundleFromStack(java.lang.String, java.util.Locale, java.lang.ClassLoader)
    {
        java.util.logging.Logger r0;
        java.lang.String r1;
        java.util.Locale r2;
        java.lang.ClassLoader r3, r5;
        int i0;
        java.lang.Class r4;
        java.util.MissingResourceException r6, $r9;
        java.util.ResourceBundle $r7, $r8;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.util.Locale;
        r3 := @parameter2: java.lang.ClassLoader;
        i0 = 0;

     label0:
        r4 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass(int)>(i0);
        if r4 != null goto label1;

        goto label8;

     label1:
        r5 = virtualinvoke r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        if r5 != null goto label2;

        r5 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label2:
        if r3 != r5 goto label3;

        goto label7;

     label3:
        r3 = r5;

     label4:
        $r7 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)>(r1, r2, r3);
        r0.<java.util.logging.Logger: java.util.ResourceBundle catalog> = $r7;
        r0.<java.util.logging.Logger: java.lang.String catalogName> = r1;
        r0.<java.util.logging.Logger: java.util.Locale catalogLocale> = r2;
        $r8 = r0.<java.util.logging.Logger: java.util.ResourceBundle catalog>;

     label5:
        return $r8;

     label6:
        $r9 := @caughtexception;
        r6 = $r9;

     label7:
        i0 = i0 + 1;
        goto label0;

     label8:
        return null;

        catch java.util.MissingResourceException from label4 to label5 with label6;
    }

    private synchronized void setupResourceInfo(java.lang.String, java.lang.Class)
    {
        java.util.logging.Logger r0;
        java.lang.String r1, $r10;
        java.lang.Class r2;
        boolean $z0;
        java.lang.ClassLoader $r3;
        java.util.ResourceBundle $r4;
        java.util.MissingResourceException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Class;
        if r1 != null goto label0;

        return;

     label0:
        specialinvoke r0.<java.util.logging.Logger: void setCallersClassLoaderRef(java.lang.Class)>(r2);
        $z0 = r0.<java.util.logging.Logger: boolean isSystemLogger>;
        if $z0 == 0 goto label1;

        $r3 = specialinvoke r0.<java.util.logging.Logger: java.lang.ClassLoader getCallersClassLoader()>();
        if $r3 == null goto label1;

        specialinvoke r0.<java.util.logging.Logger: void checkPermission()>();

     label1:
        $r4 = specialinvoke r0.<java.util.logging.Logger: java.util.ResourceBundle findResourceBundle(java.lang.String,boolean)>(r1, 1);
        if $r4 != null goto label2;

        r0.<java.util.logging.Logger: java.lang.ref.WeakReference callersClassLoaderRef> = null;
        $r5 = new java.util.MissingResourceException;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bundle");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r10, r1, "");
        throw $r5;

     label2:
        r0.<java.util.logging.Logger: java.lang.String resourceBundleName> = r1;
        return;
    }

    public java.util.logging.Logger getParent()
    {
        java.util.logging.Logger r0, $r1;

        r0 := @this: java.util.logging.Logger;
        $r1 = r0.<java.util.logging.Logger: java.util.logging.Logger parent>;
        return $r1;
    }

    public void setParent(java.util.logging.Logger)
    {
        java.util.logging.Logger r0, r1;
        java.lang.NullPointerException $r2;
        java.util.logging.LogManager $r3, $r4, $r5;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Logger;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.util.logging.Logger: java.util.logging.LogManager manager>;
        if $r3 != null goto label1;

        $r4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();
        r0.<java.util.logging.Logger: java.util.logging.LogManager manager> = $r4;

     label1:
        $r5 = r0.<java.util.logging.Logger: java.util.logging.LogManager manager>;
        virtualinvoke $r5.<java.util.logging.LogManager: void checkPermission()>();
        specialinvoke r0.<java.util.logging.Logger: void doSetParent(java.util.logging.Logger)>(r1);
        return;
    }

    private void doSetParent(java.util.logging.Logger)
    {
        java.util.logging.Logger r0, r1, r6, $r8, $r9, $r13, $r15, $r21, $r22;
        java.lang.Object $r2, r3, $r11, $r12;
        java.util.logging.LogManager$LoggerWeakRef r4, $r17;
        java.util.Iterator r5;
        java.lang.Throwable r7, $r24;
        java.util.ArrayList $r10, $r14, $r16, $r23;
        boolean $z0;
        java.util.logging.LogManager $r18;
        java.lang.ref.WeakReference $r20;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.Logger;
        $r2 = <java.util.logging.Logger: java.lang.Object treeLock>;
        r3 = $r2;
        entermonitor $r2;

     label0:
        r4 = null;
        $r8 = r0.<java.util.logging.Logger: java.util.logging.Logger parent>;
        if $r8 == null goto label3;

        $r9 = r0.<java.util.logging.Logger: java.util.logging.Logger parent>;
        $r10 = $r9.<java.util.logging.Logger: java.util.ArrayList kids>;
        r5 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.util.logging.LogManager$LoggerWeakRef) $r11;
        $r12 = virtualinvoke r4.<java.util.logging.LogManager$LoggerWeakRef: java.lang.Object get()>();
        r6 = (java.util.logging.Logger) $r12;
        if r6 != r0 goto label2;

        interfaceinvoke r5.<java.util.Iterator: void remove()>();
        goto label3;

     label2:
        r4 = null;
        goto label1;

     label3:
        r0.<java.util.logging.Logger: java.util.logging.Logger parent> = r1;
        $r13 = r0.<java.util.logging.Logger: java.util.logging.Logger parent>;
        $r14 = $r13.<java.util.logging.Logger: java.util.ArrayList kids>;
        if $r14 != null goto label4;

        $r15 = r0.<java.util.logging.Logger: java.util.logging.Logger parent>;
        $r16 = new java.util.ArrayList;
        specialinvoke $r16.<java.util.ArrayList: void <init>(int)>(2);
        $r15.<java.util.logging.Logger: java.util.ArrayList kids> = $r16;

     label4:
        if r4 != null goto label5;

        $r17 = new java.util.logging.LogManager$LoggerWeakRef;
        $r18 = r0.<java.util.logging.Logger: java.util.logging.LogManager manager>;
        virtualinvoke $r18.<java.lang.Object: java.lang.Class getClass()>();
        specialinvoke $r17.<java.util.logging.LogManager$LoggerWeakRef: void <init>(java.util.logging.LogManager,java.util.logging.Logger)>($r18, r0);
        r4 = $r17;

     label5:
        $r20 = new java.lang.ref.WeakReference;
        $r21 = r0.<java.util.logging.Logger: java.util.logging.Logger parent>;
        specialinvoke $r20.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r21);
        virtualinvoke r4.<java.util.logging.LogManager$LoggerWeakRef: void setParentRef(java.lang.ref.WeakReference)>($r20);
        $r22 = r0.<java.util.logging.Logger: java.util.logging.Logger parent>;
        $r23 = $r22.<java.util.logging.Logger: java.util.ArrayList kids>;
        virtualinvoke $r23.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);
        specialinvoke r0.<java.util.logging.Logger: void updateEffectiveLevel()>();
        exitmonitor r3;

     label6:
        goto label10;

     label7:
        $r24 := @caughtexception;

     label8:
        r7 = $r24;
        exitmonitor r3;

     label9:
        throw r7;

     label10:
        return;

        catch java.lang.Throwable from label0 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    final void removeChildLogger(java.util.logging.LogManager$LoggerWeakRef)
    {
        java.util.logging.Logger r0;
        java.util.logging.LogManager$LoggerWeakRef r1, r5;
        java.lang.Object $r2, r3, $r8;
        java.util.Iterator r4;
        java.lang.Throwable r6, $r9;
        java.util.ArrayList $r7;
        boolean $z0;

        r0 := @this: java.util.logging.Logger;
        r1 := @parameter0: java.util.logging.LogManager$LoggerWeakRef;
        $r2 = <java.util.logging.Logger: java.lang.Object treeLock>;
        r3 = $r2;
        entermonitor $r2;

     label0:
        $r7 = r0.<java.util.logging.Logger: java.util.ArrayList kids>;
        r4 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.util.logging.LogManager$LoggerWeakRef) $r8;
        if r5 != r1 goto label3;

        interfaceinvoke r4.<java.util.Iterator: void remove()>();
        exitmonitor r3;

     label2:
        return;

     label3:
        goto label1;

     label4:
        exitmonitor r3;

     label5:
        goto label9;

     label6:
        $r9 := @caughtexception;

     label7:
        r6 = $r9;
        exitmonitor r3;

     label8:
        throw r6;

     label9:
        return;

        catch java.lang.Throwable from label0 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void updateEffectiveLevel()
    {
        java.util.logging.Logger r0, r2, $r5, $r6;
        int i0, i1, $i2, $i3;
        java.util.logging.LogManager$LoggerWeakRef r1;
        java.util.logging.Level $r3, $r4, $r7;
        java.util.ArrayList $r8, $r9, $r10;
        java.lang.Object $r11, $r12;

        r0 := @this: java.util.logging.Logger;
        $r3 = r0.<java.util.logging.Logger: java.util.logging.Level levelObject>;
        if $r3 == null goto label0;

        $r4 = r0.<java.util.logging.Logger: java.util.logging.Level levelObject>;
        i0 = virtualinvoke $r4.<java.util.logging.Level: int intValue()>();
        goto label2;

     label0:
        $r5 = r0.<java.util.logging.Logger: java.util.logging.Logger parent>;
        if $r5 == null goto label1;

        $r6 = r0.<java.util.logging.Logger: java.util.logging.Logger parent>;
        i0 = $r6.<java.util.logging.Logger: int levelValue>;
        goto label2;

     label1:
        $r7 = <java.util.logging.Level: java.util.logging.Level INFO>;
        i0 = virtualinvoke $r7.<java.util.logging.Level: int intValue()>();

     label2:
        $i2 = r0.<java.util.logging.Logger: int levelValue>;
        if $i2 != i0 goto label3;

        return;

     label3:
        r0.<java.util.logging.Logger: int levelValue> = i0;
        $r8 = r0.<java.util.logging.Logger: java.util.ArrayList kids>;
        if $r8 == null goto label6;

        i1 = 0;

     label4:
        $r9 = r0.<java.util.logging.Logger: java.util.ArrayList kids>;
        $i3 = virtualinvoke $r9.<java.util.ArrayList: int size()>();
        if i1 >= $i3 goto label6;

        $r10 = r0.<java.util.logging.Logger: java.util.ArrayList kids>;
        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(i1);
        r1 = (java.util.logging.LogManager$LoggerWeakRef) $r11;
        $r12 = virtualinvoke r1.<java.util.logging.LogManager$LoggerWeakRef: java.lang.Object get()>();
        r2 = (java.util.logging.Logger) $r12;
        if r2 == null goto label5;

        specialinvoke r2.<java.util.logging.Logger: void updateEffectiveLevel()>();

     label5:
        i1 = i1 + 1;
        goto label4;

     label6:
        return;
    }

    private java.lang.String getEffectiveResourceBundleName()
    {
        java.util.logging.Logger r0, r1, $r4;
        java.lang.String r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.logging.Logger;
        r1 = r0;

     label0:
        if r1 == null goto label7;

        $z0 = r0.<java.util.logging.Logger: boolean isSystemLogger>;
        if $z0 == 0 goto label2;

        $z1 = r1.<java.util.logging.Logger: boolean isSystemLogger>;
        if $z1 == 0 goto label1;

        $r3 = r1.<java.util.logging.Logger: java.lang.String resourceBundleName>;
        goto label3;

     label1:
        $r3 = null;
        goto label3;

     label2:
        $r3 = virtualinvoke r1.<java.util.logging.Logger: java.lang.String getResourceBundleName()>();

     label3:
        r2 = $r3;
        if r2 == null goto label4;

        return r2;

     label4:
        $z2 = r0.<java.util.logging.Logger: boolean isSystemLogger>;
        if $z2 == 0 goto label5;

        $r4 = r1.<java.util.logging.Logger: java.util.logging.Logger parent>;
        goto label6;

     label5:
        $r4 = virtualinvoke r1.<java.util.logging.Logger: java.util.logging.Logger getParent()>();

     label6:
        r1 = $r4;
        goto label0;

     label7:
        return null;
    }

    static void <clinit>()
    {
        java.util.logging.Handler[] $r0;
        java.util.logging.Level $r1;
        int $i0;
        java.lang.Object $r2;
        java.util.logging.Logger $r3;

        $r0 = newarray (java.util.logging.Handler)[0];
        <java.util.logging.Logger: java.util.logging.Handler[] emptyHandlers> = $r0;
        $r1 = <java.util.logging.Level: java.util.logging.Level OFF>;
        $i0 = virtualinvoke $r1.<java.util.logging.Level: int intValue()>();
        <java.util.logging.Logger: int offValue> = $i0;
        $r2 = new java.lang.Object;
        specialinvoke $r2.<java.lang.Object: void <init>()>();
        <java.util.logging.Logger: java.lang.Object treeLock> = $r2;
        $r3 = new java.util.logging.Logger;
        specialinvoke $r3.<java.util.logging.Logger: void <init>(java.lang.String)>("global");
        <java.util.logging.Logger: java.util.logging.Logger global> = $r3;
        return;
    }
}
