public abstract class java.nio.channels.spi.AbstractSelector extends java.nio.channels.Selector
{
    private java.util.concurrent.atomic.AtomicBoolean selectorOpen;
    private final java.nio.channels.spi.SelectorProvider provider;
    private final java.util.Set cancelledKeys;
    private sun.nio.ch.Interruptible interruptor;

    protected void <init>(java.nio.channels.spi.SelectorProvider)
    {
        java.nio.channels.spi.AbstractSelector r0;
        java.nio.channels.spi.SelectorProvider r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        java.util.HashSet $r3;

        r0 := @this: java.nio.channels.spi.AbstractSelector;
        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;
        specialinvoke r0.<java.nio.channels.Selector: void <init>()>();
        $r2 = new java.util.concurrent.atomic.AtomicBoolean;
        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);
        r0.<java.nio.channels.spi.AbstractSelector: java.util.concurrent.atomic.AtomicBoolean selectorOpen> = $r2;
        $r3 = new java.util.HashSet;
        specialinvoke $r3.<java.util.HashSet: void <init>()>();
        r0.<java.nio.channels.spi.AbstractSelector: java.util.Set cancelledKeys> = $r3;
        r0.<java.nio.channels.spi.AbstractSelector: sun.nio.ch.Interruptible interruptor> = null;
        r0.<java.nio.channels.spi.AbstractSelector: java.nio.channels.spi.SelectorProvider provider> = r1;
        return;
    }

    void cancel(java.nio.channels.SelectionKey)
    {
        java.nio.channels.spi.AbstractSelector r0;
        java.nio.channels.SelectionKey r1;
        java.util.Set r2, $r4, $r5;
        java.lang.Throwable r3, $r6;

        r0 := @this: java.nio.channels.spi.AbstractSelector;
        r1 := @parameter0: java.nio.channels.SelectionKey;
        $r4 = r0.<java.nio.channels.spi.AbstractSelector: java.util.Set cancelledKeys>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<java.nio.channels.spi.AbstractSelector: java.util.Set cancelledKeys>;
        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r1);
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r6 := @caughtexception;

     label3:
        r3 = $r6;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public final void close() throws java.io.IOException
    {
        java.nio.channels.spi.AbstractSelector r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: java.nio.channels.spi.AbstractSelector;
        $r1 = r0.<java.nio.channels.spi.AbstractSelector: java.util.concurrent.atomic.AtomicBoolean selectorOpen>;
        z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(0);
        if z0 != 0 goto label0;

        return;

     label0:
        virtualinvoke r0.<java.nio.channels.spi.AbstractSelector: void implCloseSelector()>();
        return;
    }

    protected abstract void implCloseSelector() throws java.io.IOException;

    public final boolean isOpen()
    {
        java.nio.channels.spi.AbstractSelector r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: java.nio.channels.spi.AbstractSelector;
        $r1 = r0.<java.nio.channels.spi.AbstractSelector: java.util.concurrent.atomic.AtomicBoolean selectorOpen>;
        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
        return $z0;
    }

    public final java.nio.channels.spi.SelectorProvider provider()
    {
        java.nio.channels.spi.AbstractSelector r0;
        java.nio.channels.spi.SelectorProvider $r1;

        r0 := @this: java.nio.channels.spi.AbstractSelector;
        $r1 = r0.<java.nio.channels.spi.AbstractSelector: java.nio.channels.spi.SelectorProvider provider>;
        return $r1;
    }

    protected final java.util.Set cancelledKeys()
    {
        java.nio.channels.spi.AbstractSelector r0;
        java.util.Set $r1;

        r0 := @this: java.nio.channels.spi.AbstractSelector;
        $r1 = r0.<java.nio.channels.spi.AbstractSelector: java.util.Set cancelledKeys>;
        return $r1;
    }

    protected abstract java.nio.channels.SelectionKey register(java.nio.channels.spi.AbstractSelectableChannel, int, java.lang.Object);

    protected final void deregister(java.nio.channels.spi.AbstractSelectionKey)
    {
        java.nio.channels.spi.AbstractSelector r0;
        java.nio.channels.spi.AbstractSelectionKey r1;
        java.nio.channels.SelectableChannel $r2;
        java.nio.channels.spi.AbstractSelectableChannel $r3;

        r0 := @this: java.nio.channels.spi.AbstractSelector;
        r1 := @parameter0: java.nio.channels.spi.AbstractSelectionKey;
        $r2 = virtualinvoke r1.<java.nio.channels.spi.AbstractSelectionKey: java.nio.channels.SelectableChannel channel()>();
        $r3 = (java.nio.channels.spi.AbstractSelectableChannel) $r2;
        virtualinvoke $r3.<java.nio.channels.spi.AbstractSelectableChannel: void removeKey(java.nio.channels.SelectionKey)>(r1);
        return;
    }

    protected final void begin()
    {
        java.nio.channels.spi.AbstractSelector r0;
        java.nio.channels.spi.AbstractSelector$1 $r1;
        java.lang.Thread r2;
        sun.nio.ch.Interruptible $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: java.nio.channels.spi.AbstractSelector;
        $r3 = r0.<java.nio.channels.spi.AbstractSelector: sun.nio.ch.Interruptible interruptor>;
        if $r3 != null goto label0;

        $r1 = new java.nio.channels.spi.AbstractSelector$1;
        specialinvoke $r1.<java.nio.channels.spi.AbstractSelector$1: void <init>(java.nio.channels.spi.AbstractSelector)>(r0);
        r0.<java.nio.channels.spi.AbstractSelector: sun.nio.ch.Interruptible interruptor> = $r1;

     label0:
        $r4 = r0.<java.nio.channels.spi.AbstractSelector: sun.nio.ch.Interruptible interruptor>;
        staticinvoke <java.nio.channels.spi.AbstractInterruptibleChannel: void blockedOn(sun.nio.ch.Interruptible)>($r4);
        r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $z0 = virtualinvoke r2.<java.lang.Thread: boolean isInterrupted()>();
        if $z0 == 0 goto label1;

        $r5 = r0.<java.nio.channels.spi.AbstractSelector: sun.nio.ch.Interruptible interruptor>;
        interfaceinvoke $r5.<sun.nio.ch.Interruptible: void interrupt(java.lang.Thread)>(r2);

     label1:
        return;
    }

    protected final void end()
    {
        java.nio.channels.spi.AbstractSelector r0;

        r0 := @this: java.nio.channels.spi.AbstractSelector;
        staticinvoke <java.nio.channels.spi.AbstractInterruptibleChannel: void blockedOn(sun.nio.ch.Interruptible)>(null);
        return;
    }
}
