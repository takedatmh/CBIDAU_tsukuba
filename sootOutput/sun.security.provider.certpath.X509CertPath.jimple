public class sun.security.provider.certpath.X509CertPath extends java.security.cert.CertPath
{
    private static final long serialVersionUID;
    private java.util.List certs;
    private static final java.lang.String COUNT_ENCODING;
    private static final java.lang.String PKCS7_ENCODING;
    private static final java.lang.String PKIPATH_ENCODING;
    private static final java.util.Collection encodingList;

    public void <init>(java.util.List) throws java.security.cert.CertificateException
    {
        sun.security.provider.certpath.X509CertPath r0;
        java.util.List r1, $r12;
        java.util.Iterator r2;
        java.lang.Object r3;
        java.lang.StringBuilder $r4, $r6, $r9;
        boolean $z0, $z1;
        java.security.cert.CertificateException $r5;
        java.lang.Class $r7;
        java.lang.String $r8, $r10;
        java.util.ArrayList $r11;

        r0 := @this: sun.security.provider.certpath.X509CertPath;
        r1 := @parameter0: java.util.List;
        specialinvoke r0.<java.security.cert.CertPath: void <init>(java.lang.String)>("X.509");
        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $z1 = r3 instanceof java.security.cert.X509Certificate;
        if $z1 != 0 goto label1;

        $r5 = new java.security.cert.CertificateException;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("List is not all X509Certificates: ");
        $r7 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();
        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();
        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r10);
        throw $r5;

     label1:
        goto label0;

     label2:
        $r11 = new java.util.ArrayList;
        specialinvoke $r11.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);
        $r12 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r11);
        r0.<sun.security.provider.certpath.X509CertPath: java.util.List certs> = $r12;
        return;
    }

    public void <init>(java.io.InputStream) throws java.security.cert.CertificateException
    {
        sun.security.provider.certpath.X509CertPath r0;
        java.io.InputStream r1;

        r0 := @this: sun.security.provider.certpath.X509CertPath;
        r1 := @parameter0: java.io.InputStream;
        specialinvoke r0.<sun.security.provider.certpath.X509CertPath: void <init>(java.io.InputStream,java.lang.String)>(r1, "PkiPath");
        return;
    }

    public void <init>(java.io.InputStream, java.lang.String) throws java.security.cert.CertificateException
    {
        sun.security.provider.certpath.X509CertPath r0;
        java.io.InputStream r1;
        java.lang.String r2, $r3, $r5;
        boolean $z0, $z1;
        java.util.List $r4, $r6;
        java.security.cert.CertificateException $r7;

        r0 := @this: sun.security.provider.certpath.X509CertPath;
        r1 := @parameter0: java.io.InputStream;
        r2 := @parameter1: java.lang.String;
        specialinvoke r0.<java.security.cert.CertPath: void <init>(java.lang.String)>("X.509");
        $r3 = "PkiPath";
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);
        if $z0 == 0 goto label0;

        $r4 = staticinvoke <sun.security.provider.certpath.X509CertPath: java.util.List parsePKIPATH(java.io.InputStream)>(r1);
        r0.<sun.security.provider.certpath.X509CertPath: java.util.List certs> = $r4;
        goto label2;

     label0:
        $r5 = "PKCS7";
        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r2);
        if $z1 == 0 goto label1;

        $r6 = staticinvoke <sun.security.provider.certpath.X509CertPath: java.util.List parsePKCS7(java.io.InputStream)>(r1);
        r0.<sun.security.provider.certpath.X509CertPath: java.util.List certs> = $r6;
        goto label2;

     label1:
        $r7 = new java.security.cert.CertificateException;
        specialinvoke $r7.<java.security.cert.CertificateException: void <init>(java.lang.String)>("unsupported encoding");
        throw $r7;

     label2:
        return;
    }

    private static java.util.List parsePKIPATH(java.io.InputStream) throws java.security.cert.CertificateException
    {
        java.io.InputStream r0;
        null_type n0, n1;
        sun.security.util.DerInputStream r1, $r4;
        sun.security.util.DerValue[] r2;
        int i0, $i1, $i2, $i3;
        java.security.cert.CertificateException $r3, $r18, r23;
        byte[] $r5, $r12;
        java.util.List $r6, $r15;
        java.security.cert.CertificateFactory r7;
        java.util.ArrayList $r8, r9;
        java.io.ByteArrayInputStream $r10;
        sun.security.util.DerValue $r11;
        java.security.cert.Certificate $r13;
        java.security.cert.X509Certificate $r14;
        java.io.IOException $r16, r17;
        java.lang.StringBuilder $r19, $r20, $r21;
        java.lang.String $r22;

        r0 := @parameter0: java.io.InputStream;
        n0 = null;
        n1 = null;
        if r0 != null goto label0;

        $r3 = new java.security.cert.CertificateException;
        specialinvoke $r3.<java.security.cert.CertificateException: void <init>(java.lang.String)>("input stream is null");
        throw $r3;

     label0:
        $r4 = new sun.security.util.DerInputStream;
        $r5 = staticinvoke <sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)>(r0);
        specialinvoke $r4.<sun.security.util.DerInputStream: void <init>(byte[])>($r5);
        r1 = $r4;
        r2 = virtualinvoke r1.<sun.security.util.DerInputStream: sun.security.util.DerValue[] getSequence(int)>(3);
        $i1 = lengthof r2;
        if $i1 != 0 goto label2;

        $r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label1:
        return $r6;

     label2:
        r7 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");
        $r8 = new java.util.ArrayList;
        $i2 = lengthof r2;
        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i2);
        r9 = $r8;
        $i3 = lengthof r2;
        i0 = $i3 - 1;

     label3:
        if i0 < 0 goto label4;

        $r10 = new java.io.ByteArrayInputStream;
        $r11 = r2[i0];
        $r12 = virtualinvoke $r11.<sun.security.util.DerValue: byte[] toByteArray()>();
        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>($r12);
        $r13 = virtualinvoke r7.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r10);
        $r14 = (java.security.cert.X509Certificate) $r13;
        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r14);
        i0 = i0 + -1;
        goto label3;

     label4:
        $r15 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r9);

     label5:
        return $r15;

     label6:
        $r16 := @caughtexception;
        r17 = $r16;
        $r18 = new java.security.cert.CertificateException;
        $r19 = new java.lang.StringBuilder;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException parsing PkiPath data: ");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r18.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r22);
        r23 = $r18;
        virtualinvoke r23.<java.security.cert.CertificateException: java.lang.Throwable initCause(java.lang.Throwable)>(r17);
        throw r23;

        catch java.io.IOException from label0 to label1 with label6;
        catch java.io.IOException from label2 to label5 with label6;
    }

    private static java.util.List parsePKCS7(java.io.InputStream) throws java.security.cert.CertificateException
    {
        java.io.InputStream r0;
        sun.security.pkcs.PKCS7 r1, $r7;
        java.security.cert.X509Certificate[] r2;
        java.util.List r3, $r16;
        java.security.cert.CertificateException $r4, $r11;
        boolean $z0;
        java.io.ByteArrayInputStream $r5;
        byte[] $r6;
        java.util.ArrayList $r8;
        java.io.IOException $r9, r10;
        java.lang.StringBuilder $r12, $r13, $r14;
        java.lang.String $r15;

        r0 := @parameter0: java.io.InputStream;
        if r0 != null goto label0;

        $r4 = new java.security.cert.CertificateException;
        specialinvoke $r4.<java.security.cert.CertificateException: void <init>(java.lang.String)>("input stream is null");
        throw $r4;

     label0:
        $z0 = virtualinvoke r0.<java.io.InputStream: boolean markSupported()>();
        if $z0 != 0 goto label1;

        $r5 = new java.io.ByteArrayInputStream;
        $r6 = staticinvoke <sun.security.provider.certpath.X509CertPath: byte[] readAllBytes(java.io.InputStream)>(r0);
        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6);
        r0 = $r5;

     label1:
        $r7 = new sun.security.pkcs.PKCS7;
        specialinvoke $r7.<sun.security.pkcs.PKCS7: void <init>(java.io.InputStream)>(r0);
        r1 = $r7;
        r2 = virtualinvoke r1.<sun.security.pkcs.PKCS7: java.security.cert.X509Certificate[] getCertificates()>();
        if r2 == null goto label2;

        r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);
        goto label3;

     label2:
        $r8 = new java.util.ArrayList;
        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(0);
        r3 = $r8;

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;
        r10 = $r9;
        $r11 = new java.security.cert.CertificateException;
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException parsing PKCS7 data: ");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r11.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r15);
        throw $r11;

     label5:
        $r16 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r3);
        return $r16;

        catch java.io.IOException from label0 to label3 with label4;
    }

    private static byte[] readAllBytes(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1, $r4;
        java.io.ByteArrayOutputStream r2, $r3;
        int i0, $i1;

        r0 := @parameter0: java.io.InputStream;
        r1 = newarray (byte)[8192];
        $r3 = new java.io.ByteArrayOutputStream;
        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>(int)>(2048);
        r2 = $r3;

     label0:
        $i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r1);
        i0 = $i1;
        if $i1 == -1 goto label1;

        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, 0, i0);
        goto label0;

     label1:
        $r4 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
        return $r4;
    }

    public byte[] getEncoded() throws java.security.cert.CertificateEncodingException
    {
        sun.security.provider.certpath.X509CertPath r0;
        byte[] $r1;

        r0 := @this: sun.security.provider.certpath.X509CertPath;
        $r1 = specialinvoke r0.<sun.security.provider.certpath.X509CertPath: byte[] encodePKIPATH()>();
        return $r1;
    }

    private byte[] encodePKIPATH() throws java.security.cert.CertificateEncodingException
    {
        sun.security.provider.certpath.X509CertPath r0;
        java.util.ListIterator r1;
        sun.security.util.DerOutputStream r2, $r7, $r12, r13;
        java.security.cert.X509Certificate r3;
        byte[] r4, $r14;
        java.util.List $r5, $r6, $r9, $r10;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.Object $r8;
        java.security.cert.CertificateEncodingException $r11, $r17, r22;
        java.io.IOException $r15, r16;
        java.lang.StringBuilder $r18, $r19, $r20;
        java.lang.String $r21;

        r0 := @this: sun.security.provider.certpath.X509CertPath;
        $r5 = r0.<sun.security.provider.certpath.X509CertPath: java.util.List certs>;
        $r6 = r0.<sun.security.provider.certpath.X509CertPath: java.util.List certs>;
        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();
        r1 = interfaceinvoke $r5.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

     label0:
        $r7 = new sun.security.util.DerOutputStream;
        specialinvoke $r7.<sun.security.util.DerOutputStream: void <init>()>();
        r2 = $r7;

     label1:
        $z0 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();
        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();
        r3 = (java.security.cert.X509Certificate) $r8;
        $r9 = r0.<sun.security.provider.certpath.X509CertPath: java.util.List certs>;
        $i1 = interfaceinvoke $r9.<java.util.List: int lastIndexOf(java.lang.Object)>(r3);
        $r10 = r0.<sun.security.provider.certpath.X509CertPath: java.util.List certs>;
        $i2 = interfaceinvoke $r10.<java.util.List: int indexOf(java.lang.Object)>(r3);
        if $i1 == $i2 goto label2;

        $r11 = new java.security.cert.CertificateEncodingException;
        specialinvoke $r11.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>("Duplicate Certificate");
        throw $r11;

     label2:
        r4 = virtualinvoke r3.<java.security.cert.X509Certificate: byte[] getEncoded()>();
        virtualinvoke r2.<sun.security.util.DerOutputStream: void write(byte[])>(r4);
        goto label1;

     label3:
        $r12 = new sun.security.util.DerOutputStream;
        specialinvoke $r12.<sun.security.util.DerOutputStream: void <init>()>();
        r13 = $r12;
        virtualinvoke r13.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>(48, r2);
        $r14 = virtualinvoke r13.<sun.security.util.DerOutputStream: byte[] toByteArray()>();

     label4:
        return $r14;

     label5:
        $r15 := @caughtexception;
        r16 = $r15;
        $r17 = new java.security.cert.CertificateEncodingException;
        $r18 = new java.lang.StringBuilder;
        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException encoding PkiPath data: ");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r17.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>($r21);
        r22 = $r17;
        virtualinvoke r22.<java.security.cert.CertificateEncodingException: java.lang.Throwable initCause(java.lang.Throwable)>(r16);
        throw r22;

        catch java.io.IOException from label0 to label4 with label5;
    }

    private byte[] encodePKCS7() throws java.security.cert.CertificateEncodingException
    {
        sun.security.provider.certpath.X509CertPath r0;
        sun.security.pkcs.PKCS7 $r1, r4;
        sun.security.pkcs.ContentInfo $r2;
        sun.security.util.ObjectIdentifier $r3;
        sun.security.util.DerOutputStream r5, $r14;
        java.io.IOException r6, $r15;
        sun.security.x509.AlgorithmId[] $r7;
        java.util.List $r8, $r9;
        int $i0;
        java.security.cert.X509Certificate[] $r10, $r12;
        java.lang.Object[] $r11;
        sun.security.pkcs.SignerInfo[] $r13;
        java.security.cert.CertificateEncodingException $r16;
        java.lang.String $r17;
        byte[] $r18;

        r0 := @this: sun.security.provider.certpath.X509CertPath;
        $r1 = new sun.security.pkcs.PKCS7;
        $r7 = newarray (sun.security.x509.AlgorithmId)[0];
        $r2 = new sun.security.pkcs.ContentInfo;
        $r3 = <sun.security.pkcs.ContentInfo: sun.security.util.ObjectIdentifier DATA_OID>;
        specialinvoke $r2.<sun.security.pkcs.ContentInfo: void <init>(sun.security.util.ObjectIdentifier,sun.security.util.DerValue)>($r3, null);
        $r8 = r0.<sun.security.provider.certpath.X509CertPath: java.util.List certs>;
        $r9 = r0.<sun.security.provider.certpath.X509CertPath: java.util.List certs>;
        $i0 = interfaceinvoke $r9.<java.util.List: int size()>();
        $r10 = newarray (java.security.cert.X509Certificate)[$i0];
        $r11 = interfaceinvoke $r8.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);
        $r12 = (java.security.cert.X509Certificate[]) $r11;
        $r13 = newarray (sun.security.pkcs.SignerInfo)[0];
        specialinvoke $r1.<sun.security.pkcs.PKCS7: void <init>(sun.security.x509.AlgorithmId[],sun.security.pkcs.ContentInfo,java.security.cert.X509Certificate[],sun.security.pkcs.SignerInfo[])>($r7, $r2, $r12, $r13);
        r4 = $r1;
        $r14 = new sun.security.util.DerOutputStream;
        specialinvoke $r14.<sun.security.util.DerOutputStream: void <init>()>();
        r5 = $r14;

     label0:
        virtualinvoke r4.<sun.security.pkcs.PKCS7: void encodeSignedData(sun.security.util.DerOutputStream)>(r5);

     label1:
        goto label3;

     label2:
        $r15 := @caughtexception;
        r6 = $r15;
        $r16 = new java.security.cert.CertificateEncodingException;
        $r17 = virtualinvoke r6.<java.io.IOException: java.lang.String getMessage()>();
        specialinvoke $r16.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>($r17);
        throw $r16;

     label3:
        $r18 = virtualinvoke r5.<sun.security.util.DerOutputStream: byte[] toByteArray()>();
        return $r18;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public byte[] getEncoded(java.lang.String) throws java.security.cert.CertificateEncodingException
    {
        sun.security.provider.certpath.X509CertPath r0;
        java.lang.String r1, $r2, $r4;
        boolean $z0, $z1;
        byte[] $r3, $r5;
        java.security.cert.CertificateEncodingException $r6;

        r0 := @this: sun.security.provider.certpath.X509CertPath;
        r1 := @parameter0: java.lang.String;
        $r2 = "PkiPath";
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z0 == 0 goto label0;

        $r3 = specialinvoke r0.<sun.security.provider.certpath.X509CertPath: byte[] encodePKIPATH()>();
        return $r3;

     label0:
        $r4 = "PKCS7";
        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z1 == 0 goto label1;

        $r5 = specialinvoke r0.<sun.security.provider.certpath.X509CertPath: byte[] encodePKCS7()>();
        return $r5;

     label1:
        $r6 = new java.security.cert.CertificateEncodingException;
        specialinvoke $r6.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>("unsupported encoding");
        throw $r6;
    }

    public static java.util.Iterator getEncodingsStatic()
    {
        java.util.Collection $r0;
        java.util.Iterator $r1;

        $r0 = <sun.security.provider.certpath.X509CertPath: java.util.Collection encodingList>;
        $r1 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();
        return $r1;
    }

    public java.util.Iterator getEncodings()
    {
        sun.security.provider.certpath.X509CertPath r0;
        java.util.Iterator $r1;

        r0 := @this: sun.security.provider.certpath.X509CertPath;
        $r1 = staticinvoke <sun.security.provider.certpath.X509CertPath: java.util.Iterator getEncodingsStatic()>();
        return $r1;
    }

    public java.util.List getCertificates()
    {
        sun.security.provider.certpath.X509CertPath r0;
        java.util.List $r1;

        r0 := @this: sun.security.provider.certpath.X509CertPath;
        $r1 = r0.<sun.security.provider.certpath.X509CertPath: java.util.List certs>;
        return $r1;
    }

    static void <clinit>()
    {
        java.util.ArrayList $r0, r1;
        java.util.Collection $r2;

        $r0 = new java.util.ArrayList;
        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(2);
        r1 = $r0;
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("PkiPath");
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("PKCS7");
        $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>(r1);
        <sun.security.provider.certpath.X509CertPath: java.util.Collection encodingList> = $r2;
        return;
    }
}
