public class java.lang.ref.ReferenceQueue extends java.lang.Object
{
    static java.lang.ref.ReferenceQueue NULL;
    static java.lang.ref.ReferenceQueue ENQUEUED;
    private java.lang.ref.ReferenceQueue$Lock lock;
    private volatile java.lang.ref.Reference head;
    private long queueLength;

    public void <init>()
    {
        java.lang.ref.ReferenceQueue r0;
        java.lang.ref.ReferenceQueue$Lock $r1;

        r0 := @this: java.lang.ref.ReferenceQueue;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new java.lang.ref.ReferenceQueue$Lock;
        specialinvoke $r1.<java.lang.ref.ReferenceQueue$Lock: void <init>(java.lang.ref.ReferenceQueue$1)>(null);
        r0.<java.lang.ref.ReferenceQueue: java.lang.ref.ReferenceQueue$Lock lock> = $r1;
        r0.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference head> = null;
        r0.<java.lang.ref.ReferenceQueue: long queueLength> = 0L;
        return;
    }

    boolean enqueue(java.lang.ref.Reference)
    {
        java.lang.ref.ReferenceQueue r0, $r7, $r8, $r10;
        java.lang.ref.Reference r1, r3, $r12, $r13;
        java.lang.ref.ReferenceQueue$Lock r4, $r9, $r15;
        java.lang.Throwable r5, r6, $r16, $r17;
        boolean $z0, $z1, $z2;
        long $l0, $l1;

        r0 := @this: java.lang.ref.ReferenceQueue;
        r1 := @parameter0: java.lang.ref.Reference;
        r3 = r1;
        entermonitor r1;

     label0:
        $r7 = r1.<java.lang.ref.Reference: java.lang.ref.ReferenceQueue queue>;
        $r8 = <java.lang.ref.ReferenceQueue: java.lang.ref.ReferenceQueue ENQUEUED>;
        if $r7 != $r8 goto label2;

        $z0 = 0;
        exitmonitor r3;

     label1:
        return $z0;

     label2:
        $r9 = r0.<java.lang.ref.ReferenceQueue: java.lang.ref.ReferenceQueue$Lock lock>;
        r4 = $r9;
        entermonitor $r9;

     label3:
        $r10 = <java.lang.ref.ReferenceQueue: java.lang.ref.ReferenceQueue ENQUEUED>;
        r1.<java.lang.ref.Reference: java.lang.ref.ReferenceQueue queue> = $r10;
        $r12 = r0.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference head>;
        if $r12 != null goto label4;

        $r13 = r1;
        goto label5;

     label4:
        $r13 = r0.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference head>;

     label5:
        r1.<java.lang.ref.Reference: java.lang.ref.Reference next> = $r13;
        r0.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference head> = r1;
        $l0 = r0.<java.lang.ref.ReferenceQueue: long queueLength>;
        $l1 = $l0 + 1L;
        r0.<java.lang.ref.ReferenceQueue: long queueLength> = $l1;
        $z1 = r1 instanceof java.lang.ref.FinalReference;
        if $z1 == 0 goto label6;

        staticinvoke <sun.misc.VM: void addFinalRefCount(int)>(1);

     label6:
        $r15 = r0.<java.lang.ref.ReferenceQueue: java.lang.ref.ReferenceQueue$Lock lock>;
        virtualinvoke $r15.<java.lang.Object: void notifyAll()>();
        $z2 = 1;
        exitmonitor r4;

     label7:
        exitmonitor r3;

     label8:
        return $z2;

     label9:
        $r16 := @caughtexception;

     label10:
        r5 = $r16;
        exitmonitor r4;

     label11:
        throw r5;

     label12:
        $r17 := @caughtexception;
        r6 = $r17;
        exitmonitor r3;

     label13:
        throw r6;

        catch java.lang.Throwable from label3 to label7 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
        catch java.lang.Throwable from label0 to label1 with label12;
        catch java.lang.Throwable from label2 to label8 with label12;
        catch java.lang.Throwable from label10 to label13 with label12;
    }

    private java.lang.ref.Reference reallyPoll()
    {
        java.lang.ref.ReferenceQueue r0, $r6;
        java.lang.ref.Reference r1, $r2, $r4, $r5;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: java.lang.ref.ReferenceQueue;
        $r2 = r0.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference head>;
        if $r2 == null goto label3;

        r1 = r0.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference head>;
        $r4 = r1.<java.lang.ref.Reference: java.lang.ref.Reference next>;
        if $r4 != r1 goto label0;

        $r5 = null;
        goto label1;

     label0:
        $r5 = r1.<java.lang.ref.Reference: java.lang.ref.Reference next>;

     label1:
        r0.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference head> = $r5;
        $r6 = <java.lang.ref.ReferenceQueue: java.lang.ref.ReferenceQueue NULL>;
        r1.<java.lang.ref.Reference: java.lang.ref.ReferenceQueue queue> = $r6;
        r1.<java.lang.ref.Reference: java.lang.ref.Reference next> = r1;
        $l0 = r0.<java.lang.ref.ReferenceQueue: long queueLength>;
        $l1 = $l0 - 1L;
        r0.<java.lang.ref.ReferenceQueue: long queueLength> = $l1;
        $z0 = r1 instanceof java.lang.ref.FinalReference;
        if $z0 == 0 goto label2;

        staticinvoke <sun.misc.VM: void addFinalRefCount(int)>(-1);

     label2:
        return r1;

     label3:
        return null;
    }

    public java.lang.ref.Reference poll()
    {
        java.lang.ref.ReferenceQueue r0;
        java.lang.ref.ReferenceQueue$Lock r1, $r4;
        java.lang.Throwable r2, $r6;
        java.lang.ref.Reference $r3, $r5;

        r0 := @this: java.lang.ref.ReferenceQueue;
        $r3 = r0.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference head>;
        if $r3 != null goto label0;

        return null;

     label0:
        $r4 = r0.<java.lang.ref.ReferenceQueue: java.lang.ref.ReferenceQueue$Lock lock>;
        r1 = $r4;
        entermonitor $r4;

     label1:
        $r5 = specialinvoke r0.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference reallyPoll()>();
        exitmonitor r1;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

     label4:
        r2 = $r6;
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.ref.Reference remove(long) throws java.lang.IllegalArgumentException, java.lang.InterruptedException
    {
        java.lang.ref.ReferenceQueue r0;
        long l0;
        java.lang.ref.ReferenceQueue$Lock r1, $r5, $r7;
        java.lang.ref.Reference r2, r8;
        java.lang.Throwable r3, $r10;
        byte $b1, $b2;
        java.lang.IllegalArgumentException $r4;
        null_type $n0;

        r0 := @this: java.lang.ref.ReferenceQueue;
        l0 := @parameter0: long;
        $b1 = l0 cmp 0L;
        if $b1 >= 0 goto label0;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative timeout value");
        throw $r4;

     label0:
        $r5 = r0.<java.lang.ref.ReferenceQueue: java.lang.ref.ReferenceQueue$Lock lock>;
        r1 = $r5;
        entermonitor $r5;

     label1:
        r2 = specialinvoke r0.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference reallyPoll()>();
        if r2 == null goto label3;

        exitmonitor r1;

     label2:
        return r2;

     label3:
        $r7 = r0.<java.lang.ref.ReferenceQueue: java.lang.ref.ReferenceQueue$Lock lock>;
        virtualinvoke $r7.<java.lang.Object: void wait(long)>(l0);
        r8 = specialinvoke r0.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference reallyPoll()>();
        if r8 == null goto label5;

        exitmonitor r1;

     label4:
        return r8;

     label5:
        $b2 = l0 cmp 0L;
        if $b2 == 0 goto label3;

        $n0 = null;
        exitmonitor r1;

     label6:
        return $n0;

     label7:
        $r10 := @caughtexception;

     label8:
        r3 = $r10;
        exitmonitor r1;

     label9:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public java.lang.ref.Reference remove() throws java.lang.InterruptedException
    {
        java.lang.ref.ReferenceQueue r0;
        java.lang.ref.Reference $r1;

        r0 := @this: java.lang.ref.ReferenceQueue;
        $r1 = virtualinvoke r0.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove(long)>(0L);
        return $r1;
    }

    static void <clinit>()
    {
        java.lang.ref.ReferenceQueue$Null $r0, $r1;

        $r0 = new java.lang.ref.ReferenceQueue$Null;
        specialinvoke $r0.<java.lang.ref.ReferenceQueue$Null: void <init>(java.lang.ref.ReferenceQueue$1)>(null);
        <java.lang.ref.ReferenceQueue: java.lang.ref.ReferenceQueue NULL> = $r0;
        $r1 = new java.lang.ref.ReferenceQueue$Null;
        specialinvoke $r1.<java.lang.ref.ReferenceQueue$Null: void <init>(java.lang.ref.ReferenceQueue$1)>(null);
        <java.lang.ref.ReferenceQueue: java.lang.ref.ReferenceQueue ENQUEUED> = $r1;
        return;
    }
}
