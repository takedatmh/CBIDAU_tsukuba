public final class sun.text.IntHashtable extends java.lang.Object
{
    private int defaultValue;
    private int primeIndex;
    private static final float HIGH_WATER_FACTOR;
    private int highWaterMark;
    private static final float LOW_WATER_FACTOR;
    private int lowWaterMark;
    private int count;
    private int[] values;
    private int[] keyList;
    private static final int EMPTY;
    private static final int DELETED;
    private static final int MAX_UNUSED;
    private static final int[] PRIMES;

    public void <init>()
    {
        sun.text.IntHashtable r0;

        r0 := @this: sun.text.IntHashtable;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.text.IntHashtable: int defaultValue> = 0;
        specialinvoke r0.<sun.text.IntHashtable: void initialize(int)>(3);
        return;
    }

    public void <init>(int)
    {
        sun.text.IntHashtable r0;
        int i0, $i1, $i2;
        float $f0, $f1;

        r0 := @this: sun.text.IntHashtable;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.text.IntHashtable: int defaultValue> = 0;
        $f0 = (float) i0;
        $f1 = $f0 / 0.4F;
        $i1 = (int) $f1;
        $i2 = staticinvoke <sun.text.IntHashtable: int leastGreaterPrimeIndex(int)>($i1);
        specialinvoke r0.<sun.text.IntHashtable: void initialize(int)>($i2);
        return;
    }

    public int size()
    {
        sun.text.IntHashtable r0;
        int $i0;

        r0 := @this: sun.text.IntHashtable;
        $i0 = r0.<sun.text.IntHashtable: int count>;
        return $i0;
    }

    public boolean isEmpty()
    {
        sun.text.IntHashtable r0;
        int $i0;
        boolean $z0;

        r0 := @this: sun.text.IntHashtable;
        $i0 = r0.<sun.text.IntHashtable: int count>;
        if $i0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public void put(int, int)
    {
        sun.text.IntHashtable r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        int[] $r1, $r2, $r4;

        r0 := @this: sun.text.IntHashtable;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i3 = r0.<sun.text.IntHashtable: int count>;
        $i4 = r0.<sun.text.IntHashtable: int highWaterMark>;
        if $i3 <= $i4 goto label0;

        specialinvoke r0.<sun.text.IntHashtable: void rehash()>();

     label0:
        i2 = specialinvoke r0.<sun.text.IntHashtable: int find(int)>(i0);
        $r1 = r0.<sun.text.IntHashtable: int[] keyList>;
        $i5 = $r1[i2];
        if $i5 > -2147483647 goto label1;

        $r2 = r0.<sun.text.IntHashtable: int[] keyList>;
        $r2[i2] = i0;
        $i6 = r0.<sun.text.IntHashtable: int count>;
        $i7 = $i6 + 1;
        r0.<sun.text.IntHashtable: int count> = $i7;

     label1:
        $r4 = r0.<sun.text.IntHashtable: int[] values>;
        $r4[i2] = i1;
        return;
    }

    public int get(int)
    {
        sun.text.IntHashtable r0;
        int i0, $i1, $i2;
        int[] $r1;

        r0 := @this: sun.text.IntHashtable;
        i0 := @parameter0: int;
        $r1 = r0.<sun.text.IntHashtable: int[] values>;
        $i1 = specialinvoke r0.<sun.text.IntHashtable: int find(int)>(i0);
        $i2 = $r1[$i1];
        return $i2;
    }

    public void remove(int)
    {
        sun.text.IntHashtable r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[] $r1, $r2, $r3;

        r0 := @this: sun.text.IntHashtable;
        i0 := @parameter0: int;
        i1 = specialinvoke r0.<sun.text.IntHashtable: int find(int)>(i0);
        $r1 = r0.<sun.text.IntHashtable: int[] keyList>;
        $i2 = $r1[i1];
        if $i2 <= -2147483647 goto label0;

        $r2 = r0.<sun.text.IntHashtable: int[] keyList>;
        $r2[i1] = -2147483647;
        $r3 = r0.<sun.text.IntHashtable: int[] values>;
        $i3 = r0.<sun.text.IntHashtable: int defaultValue>;
        $r3[i1] = $i3;
        $i4 = r0.<sun.text.IntHashtable: int count>;
        $i5 = $i4 - 1;
        r0.<sun.text.IntHashtable: int count> = $i5;
        $i6 = r0.<sun.text.IntHashtable: int count>;
        $i7 = r0.<sun.text.IntHashtable: int lowWaterMark>;
        if $i6 >= $i7 goto label0;

        specialinvoke r0.<sun.text.IntHashtable: void rehash()>();

     label0:
        return;
    }

    public int getDefaultValue()
    {
        sun.text.IntHashtable r0;
        int $i0;

        r0 := @this: sun.text.IntHashtable;
        $i0 = r0.<sun.text.IntHashtable: int defaultValue>;
        return $i0;
    }

    public void setDefaultValue(int)
    {
        sun.text.IntHashtable r0;
        int i0;

        r0 := @this: sun.text.IntHashtable;
        i0 := @parameter0: int;
        r0.<sun.text.IntHashtable: int defaultValue> = i0;
        specialinvoke r0.<sun.text.IntHashtable: void rehash()>();
        return;
    }

    public boolean equals(java.lang.Object)
    {
        sun.text.IntHashtable r0, r2;
        java.lang.Object r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Class $r3, $r4;
        int[] $r5, $r6, $r7;

        r0 := @this: sun.text.IntHashtable;
        r1 := @parameter0: java.lang.Object;
        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        if $r3 == $r4 goto label0;

        return 0;

     label0:
        r2 = (sun.text.IntHashtable) r1;
        $i2 = virtualinvoke r2.<sun.text.IntHashtable: int size()>();
        $i3 = r0.<sun.text.IntHashtable: int count>;
        if $i2 != $i3 goto label1;

        $i4 = r2.<sun.text.IntHashtable: int defaultValue>;
        $i5 = r0.<sun.text.IntHashtable: int defaultValue>;
        if $i4 == $i5 goto label2;

     label1:
        return 0;

     label2:
        i0 = 0;

     label3:
        $r5 = r0.<sun.text.IntHashtable: int[] keyList>;
        $i6 = lengthof $r5;
        if i0 >= $i6 goto label5;

        $r6 = r0.<sun.text.IntHashtable: int[] keyList>;
        i1 = $r6[i0];
        if i1 <= -2147483647 goto label4;

        $i7 = virtualinvoke r2.<sun.text.IntHashtable: int get(int)>(i1);
        $r7 = r0.<sun.text.IntHashtable: int[] values>;
        $i8 = $r7[i0];
        if $i7 == $i8 goto label4;

        return 0;

     label4:
        i0 = i0 + 1;
        goto label3;

     label5:
        return 1;
    }

    public int hashCode()
    {
        sun.text.IntHashtable r0;
        int i0, i1, i2, $i3, $i4, i5, $i6, i7, $i8, $i9, i10, $i11;
        int[] $r1, $r2, $r3, $r4;

        r0 := @this: sun.text.IntHashtable;
        i0 = 465;
        i1 = 1362796821;
        i2 = 0;

     label0:
        $r1 = r0.<sun.text.IntHashtable: int[] keyList>;
        $i3 = lengthof $r1;
        if i2 >= $i3 goto label1;

        $i4 = i0 * i1;
        i5 = $i4 + 1;
        $r2 = r0.<sun.text.IntHashtable: int[] keyList>;
        $i6 = $r2[i2];
        i0 = i5 + $i6;
        i2 = i2 + 1;
        goto label0;

     label1:
        i7 = 0;

     label2:
        $r3 = r0.<sun.text.IntHashtable: int[] values>;
        $i8 = lengthof $r3;
        if i7 >= $i8 goto label3;

        $i9 = i0 * i1;
        i10 = $i9 + 1;
        $r4 = r0.<sun.text.IntHashtable: int[] values>;
        $i11 = $r4[i7];
        i0 = i10 + $i11;
        i7 = i7 + 1;
        goto label2;

     label3:
        return i0;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        sun.text.IntHashtable r0, r1;
        java.lang.Object $r2, $r4, $r8;
        int[] $r3, $r5, $r6, $r7, $r9, $r10;

        r0 := @this: sun.text.IntHashtable;
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        r1 = (sun.text.IntHashtable) $r2;
        $r3 = r0.<sun.text.IntHashtable: int[] values>;
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();
        $r5 = (int[]) $r4;
        $r6 = (int[]) $r5;
        r0.<sun.text.IntHashtable: int[] values> = $r6;
        $r7 = r0.<sun.text.IntHashtable: int[] keyList>;
        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>();
        $r9 = (int[]) $r8;
        $r10 = (int[]) $r9;
        r0.<sun.text.IntHashtable: int[] keyList> = $r10;
        return r1;
    }

    private void initialize(int)
    {
        sun.text.IntHashtable r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        int[] $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        java.io.PrintStream $r2;
        float $f0, $f1, $f2, $f3;

        r0 := @this: sun.text.IntHashtable;
        i0 := @parameter0: int;
        if i0 >= 0 goto label0;

        i0 = 0;
        goto label1;

     label0:
        $r1 = <sun.text.IntHashtable: int[] PRIMES>;
        $i3 = lengthof $r1;
        if i0 < $i3 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("TOO BIG");
        $r3 = <sun.text.IntHashtable: int[] PRIMES>;
        $i4 = lengthof $r3;
        i0 = $i4 - 1;

     label1:
        r0.<sun.text.IntHashtable: int primeIndex> = i0;
        $r4 = <sun.text.IntHashtable: int[] PRIMES>;
        i1 = $r4[i0];
        $r5 = newarray (int)[i1];
        r0.<sun.text.IntHashtable: int[] values> = $r5;
        $r6 = newarray (int)[i1];
        r0.<sun.text.IntHashtable: int[] keyList> = $r6;
        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        $r7 = r0.<sun.text.IntHashtable: int[] keyList>;
        $r7[i2] = -2147483648;
        $r8 = r0.<sun.text.IntHashtable: int[] values>;
        $i5 = r0.<sun.text.IntHashtable: int defaultValue>;
        $r8[i2] = $i5;
        i2 = i2 + 1;
        goto label2;

     label3:
        r0.<sun.text.IntHashtable: int count> = 0;
        $f0 = (float) i1;
        $f1 = $f0 * 0.0F;
        $i6 = (int) $f1;
        r0.<sun.text.IntHashtable: int lowWaterMark> = $i6;
        $f2 = (float) i1;
        $f3 = $f2 * 0.4F;
        $i7 = (int) $f3;
        r0.<sun.text.IntHashtable: int highWaterMark> = $i7;
        return;
    }

    private void rehash()
    {
        sun.text.IntHashtable r0;
        int[] r1, r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: sun.text.IntHashtable;
        r1 = r0.<sun.text.IntHashtable: int[] values>;
        r2 = r0.<sun.text.IntHashtable: int[] keyList>;
        i0 = r0.<sun.text.IntHashtable: int primeIndex>;
        $i3 = r0.<sun.text.IntHashtable: int count>;
        $i4 = r0.<sun.text.IntHashtable: int highWaterMark>;
        if $i3 <= $i4 goto label0;

        i0 = i0 + 1;
        goto label1;

     label0:
        $i5 = r0.<sun.text.IntHashtable: int count>;
        $i6 = r0.<sun.text.IntHashtable: int lowWaterMark>;
        if $i5 >= $i6 goto label1;

        i0 = i0 + -2;

     label1:
        specialinvoke r0.<sun.text.IntHashtable: void initialize(int)>(i0);
        $i7 = lengthof r1;
        i1 = $i7 - 1;

     label2:
        if i1 < 0 goto label4;

        i2 = r2[i1];
        if i2 <= -2147483647 goto label3;

        $i8 = r1[i1];
        virtualinvoke r0.<sun.text.IntHashtable: void putInternal(int,int)>(i2, $i8);

     label3:
        i1 = i1 + -1;
        goto label2;

     label4:
        return;
    }

    public void putInternal(int, int)
    {
        sun.text.IntHashtable r0;
        int i0, i1, i2, $i3, $i4, $i5;
        int[] $r1, $r2, $r4;

        r0 := @this: sun.text.IntHashtable;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 = specialinvoke r0.<sun.text.IntHashtable: int find(int)>(i0);
        $r1 = r0.<sun.text.IntHashtable: int[] keyList>;
        $i3 = $r1[i2];
        if $i3 >= -2147483647 goto label0;

        $r2 = r0.<sun.text.IntHashtable: int[] keyList>;
        $r2[i2] = i0;
        $i4 = r0.<sun.text.IntHashtable: int count>;
        $i5 = $i4 + 1;
        r0.<sun.text.IntHashtable: int count> = $i5;

     label0:
        $r4 = r0.<sun.text.IntHashtable: int[] values>;
        $r4[i2] = i1;
        return;
    }

    private int find(int)
    {
        sun.text.IntHashtable r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, i9, $i10, $i11;
        java.lang.IllegalArgumentException $r1;
        int[] $r2, $r3, $r4, $r5;

        r0 := @this: sun.text.IntHashtable;
        i0 := @parameter0: int;
        if i0 > -2147483647 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key can\'t be less than 0xFFFFFFFE");
        throw $r1;

     label0:
        i1 = -1;
        $i5 = i0 ^ 67108864;
        $r2 = r0.<sun.text.IntHashtable: int[] keyList>;
        $i6 = lengthof $r2;
        i2 = $i5 % $i6;
        if i2 >= 0 goto label1;

        i2 = neg i2;

     label1:
        i3 = 0;

     label2:
        $r3 = r0.<sun.text.IntHashtable: int[] keyList>;
        i4 = $r3[i2];
        if i4 != i0 goto label3;

        return i2;

     label3:
        if i4 <= -2147483647 goto label4;

        goto label7;

     label4:
        if i4 != -2147483648 goto label6;

        if i1 < 0 goto label5;

        i2 = i1;

     label5:
        return i2;

     label6:
        if i1 >= 0 goto label7;

        i1 = i2;

     label7:
        if i3 != 0 goto label9;

        $r4 = r0.<sun.text.IntHashtable: int[] keyList>;
        $i7 = lengthof $r4;
        $i8 = $i7 - 1;
        i9 = i0 % $i8;
        if i9 >= 0 goto label8;

        i9 = neg i9;

     label8:
        i3 = i9 + 1;

     label9:
        $i10 = i2 + i3;
        $r5 = r0.<sun.text.IntHashtable: int[] keyList>;
        $i11 = lengthof $r5;
        i2 = $i10 % $i11;
        if i2 != i1 goto label10;

        return i2;

     label10:
        goto label2;
    }

    private static int leastGreaterPrimeIndex(int)
    {
        int i0, i1, $i2, $i3, $i4;
        int[] $r0, $r1;

        i0 := @parameter0: int;
        i1 = 0;

     label0:
        $r0 = <sun.text.IntHashtable: int[] PRIMES>;
        $i2 = lengthof $r0;
        if i1 >= $i2 goto label2;

        $r1 = <sun.text.IntHashtable: int[] PRIMES>;
        $i3 = $r1[i1];
        if i0 >= $i3 goto label1;

        goto label2;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        if i1 != 0 goto label3;

        $i4 = 0;
        goto label4;

     label3:
        $i4 = i1 - 1;

     label4:
        return $i4;
    }

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[28];
        $r0[0] = 17;
        $r0[1] = 37;
        $r0[2] = 67;
        $r0[3] = 131;
        $r0[4] = 257;
        $r0[5] = 521;
        $r0[6] = 1031;
        $r0[7] = 2053;
        $r0[8] = 4099;
        $r0[9] = 8209;
        $r0[10] = 16411;
        $r0[11] = 32771;
        $r0[12] = 65537;
        $r0[13] = 131101;
        $r0[14] = 262147;
        $r0[15] = 524309;
        $r0[16] = 1048583;
        $r0[17] = 2097169;
        $r0[18] = 4194319;
        $r0[19] = 8388617;
        $r0[20] = 16777259;
        $r0[21] = 33554467;
        $r0[22] = 67108879;
        $r0[23] = 134217757;
        $r0[24] = 268435459;
        $r0[25] = 536870923;
        $r0[26] = 1073741827;
        $r0[27] = 2147483647;
        <sun.text.IntHashtable: int[] PRIMES> = $r0;
        return;
    }
}
