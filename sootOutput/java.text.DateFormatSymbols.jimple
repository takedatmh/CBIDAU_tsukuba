public class java.text.DateFormatSymbols extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
{
    java.lang.String[] eras;
    java.lang.String[] months;
    java.lang.String[] shortMonths;
    java.lang.String[] weekdays;
    java.lang.String[] shortWeekdays;
    java.lang.String[] ampms;
    java.lang.String[][] zoneStrings;
    transient boolean isZoneStringsSet;
    static final java.lang.String patternChars;
    static final int PATTERN_ERA;
    static final int PATTERN_YEAR;
    static final int PATTERN_MONTH;
    static final int PATTERN_DAY_OF_MONTH;
    static final int PATTERN_HOUR_OF_DAY1;
    static final int PATTERN_HOUR_OF_DAY0;
    static final int PATTERN_MINUTE;
    static final int PATTERN_SECOND;
    static final int PATTERN_MILLISECOND;
    static final int PATTERN_DAY_OF_WEEK;
    static final int PATTERN_DAY_OF_YEAR;
    static final int PATTERN_DAY_OF_WEEK_IN_MONTH;
    static final int PATTERN_WEEK_OF_YEAR;
    static final int PATTERN_WEEK_OF_MONTH;
    static final int PATTERN_AM_PM;
    static final int PATTERN_HOUR1;
    static final int PATTERN_HOUR0;
    static final int PATTERN_ZONE_NAME;
    static final int PATTERN_ZONE_VALUE;
    static final int PATTERN_WEEK_YEAR;
    static final int PATTERN_ISO_DAY_OF_WEEK;
    static final int PATTERN_ISO_ZONE;
    java.lang.String localPatternChars;
    java.util.Locale locale;
    static final long serialVersionUID;
    static final int millisPerHour;
    private static final java.util.concurrent.ConcurrentMap cachedInstances;
    private transient int lastZoneIndex;

    public void <init>()
    {
        java.text.DateFormatSymbols r0;
        java.lang.String[][] $r1;
        java.util.Locale$Category $r2;
        java.util.Locale $r3;

        r0 := @this: java.text.DateFormatSymbols;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.text.DateFormatSymbols: java.lang.String[] eras> = null;
        r0.<java.text.DateFormatSymbols: java.lang.String[] months> = null;
        r0.<java.text.DateFormatSymbols: java.lang.String[] shortMonths> = null;
        r0.<java.text.DateFormatSymbols: java.lang.String[] weekdays> = null;
        r0.<java.text.DateFormatSymbols: java.lang.String[] shortWeekdays> = null;
        r0.<java.text.DateFormatSymbols: java.lang.String[] ampms> = null;
        $r1 = (java.lang.String[][]) null;
        r0.<java.text.DateFormatSymbols: java.lang.String[][] zoneStrings> = $r1;
        r0.<java.text.DateFormatSymbols: boolean isZoneStringsSet> = 0;
        r0.<java.text.DateFormatSymbols: java.lang.String localPatternChars> = null;
        r0.<java.text.DateFormatSymbols: java.util.Locale locale> = null;
        r0.<java.text.DateFormatSymbols: int lastZoneIndex> = 0;
        $r2 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r2);
        specialinvoke r0.<java.text.DateFormatSymbols: void initializeData(java.util.Locale)>($r3);
        return;
    }

    public void <init>(java.util.Locale)
    {
        java.text.DateFormatSymbols r0;
        java.util.Locale r1;
        java.lang.String[][] $r2;

        r0 := @this: java.text.DateFormatSymbols;
        r1 := @parameter0: java.util.Locale;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.text.DateFormatSymbols: java.lang.String[] eras> = null;
        r0.<java.text.DateFormatSymbols: java.lang.String[] months> = null;
        r0.<java.text.DateFormatSymbols: java.lang.String[] shortMonths> = null;
        r0.<java.text.DateFormatSymbols: java.lang.String[] weekdays> = null;
        r0.<java.text.DateFormatSymbols: java.lang.String[] shortWeekdays> = null;
        r0.<java.text.DateFormatSymbols: java.lang.String[] ampms> = null;
        $r2 = (java.lang.String[][]) null;
        r0.<java.text.DateFormatSymbols: java.lang.String[][] zoneStrings> = $r2;
        r0.<java.text.DateFormatSymbols: boolean isZoneStringsSet> = 0;
        r0.<java.text.DateFormatSymbols: java.lang.String localPatternChars> = null;
        r0.<java.text.DateFormatSymbols: java.util.Locale locale> = null;
        r0.<java.text.DateFormatSymbols: int lastZoneIndex> = 0;
        specialinvoke r0.<java.text.DateFormatSymbols: void initializeData(java.util.Locale)>(r1);
        return;
    }

    public static java.util.Locale[] getAvailableLocales()
    {
        sun.util.LocaleServiceProviderPool r0;
        java.util.Locale[] $r1;

        r0 = staticinvoke <sun.util.LocaleServiceProviderPool: sun.util.LocaleServiceProviderPool getPool(java.lang.Class)>(class "java/text/spi/DateFormatSymbolsProvider");
        $r1 = virtualinvoke r0.<sun.util.LocaleServiceProviderPool: java.util.Locale[] getAvailableLocales()>();
        return $r1;
    }

    public static final java.text.DateFormatSymbols getInstance()
    {
        java.util.Locale$Category $r0;
        java.util.Locale $r1;
        java.text.DateFormatSymbols $r2;

        $r0 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r0);
        $r2 = staticinvoke <java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance(java.util.Locale)>($r1);
        return $r2;
    }

    public static final java.text.DateFormatSymbols getInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.DateFormatSymbols r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @parameter0: java.util.Locale;
        r1 = staticinvoke <java.text.DateFormatSymbols: java.text.DateFormatSymbols getProviderInstance(java.util.Locale)>(r0);
        if r1 == null goto label0;

        return r1;

     label0:
        $r2 = staticinvoke <java.text.DateFormatSymbols: java.text.DateFormatSymbols getCachedInstance(java.util.Locale)>(r0);
        $r3 = virtualinvoke $r2.<java.text.DateFormatSymbols: java.lang.Object clone()>();
        $r4 = (java.text.DateFormatSymbols) $r3;
        return $r4;
    }

    static final java.text.DateFormatSymbols getInstanceRef(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.DateFormatSymbols r1, $r2;

        r0 := @parameter0: java.util.Locale;
        r1 = staticinvoke <java.text.DateFormatSymbols: java.text.DateFormatSymbols getProviderInstance(java.util.Locale)>(r0);
        if r1 == null goto label0;

        return r1;

     label0:
        $r2 = staticinvoke <java.text.DateFormatSymbols: java.text.DateFormatSymbols getCachedInstance(java.util.Locale)>(r0);
        return $r2;
    }

    private static java.text.DateFormatSymbols getProviderInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.DateFormatSymbols r1;
        sun.util.LocaleServiceProviderPool r2;
        java.text.DateFormatSymbols$DateFormatSymbolsGetter $r3;
        boolean $z0;
        java.lang.Object[] $r4;
        java.lang.Object $r5;

        r0 := @parameter0: java.util.Locale;
        r1 = null;
        r2 = staticinvoke <sun.util.LocaleServiceProviderPool: sun.util.LocaleServiceProviderPool getPool(java.lang.Class)>(class "java/text/spi/DateFormatSymbolsProvider");
        $z0 = virtualinvoke r2.<sun.util.LocaleServiceProviderPool: boolean hasProviders()>();
        if $z0 == 0 goto label0;

        $r3 = staticinvoke <java.text.DateFormatSymbols$DateFormatSymbolsGetter: java.text.DateFormatSymbols$DateFormatSymbolsGetter access$000()>();
        $r4 = newarray (java.lang.Object)[0];
        $r5 = virtualinvoke r2.<sun.util.LocaleServiceProviderPool: java.lang.Object getLocalizedObject(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,java.lang.Object[])>($r3, r0, $r4);
        r1 = (java.text.DateFormatSymbols) $r5;

     label0:
        return r1;
    }

    private static java.text.DateFormatSymbols getCachedInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.util.concurrent.ConcurrentMap $r1, $r12, $r15;
        java.lang.ref.SoftReference r2, r3, $r10, r11;
        null_type n0;
        java.text.DateFormatSymbols r4, $r7, r8, $r9;
        java.lang.Object $r5, $r6, $r13, $r14;

        r0 := @parameter0: java.util.Locale;
        $r1 = <java.text.DateFormatSymbols: java.util.concurrent.ConcurrentMap cachedInstances>;
        $r5 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0);
        r2 = (java.lang.ref.SoftReference) $r5;
        n0 = null;
        if r2 == null goto label0;

        $r6 = virtualinvoke r2.<java.lang.ref.SoftReference: java.lang.Object get()>();
        $r7 = (java.text.DateFormatSymbols) $r6;
        r8 = $r7;
        if $r7 != null goto label2;

     label0:
        $r9 = new java.text.DateFormatSymbols;
        specialinvoke $r9.<java.text.DateFormatSymbols: void <init>(java.util.Locale)>(r0);
        r8 = $r9;
        $r10 = new java.lang.ref.SoftReference;
        specialinvoke $r10.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r8);
        r11 = $r10;
        $r12 = <java.text.DateFormatSymbols: java.util.concurrent.ConcurrentMap cachedInstances>;
        $r13 = interfaceinvoke $r12.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r0, r11);
        r3 = (java.lang.ref.SoftReference) $r13;
        if r3 == null goto label2;

        $r14 = virtualinvoke r3.<java.lang.ref.SoftReference: java.lang.Object get()>();
        r4 = (java.text.DateFormatSymbols) $r14;
        if r4 == null goto label1;

        r8 = r4;
        goto label2;

     label1:
        $r15 = <java.text.DateFormatSymbols: java.util.concurrent.ConcurrentMap cachedInstances>;
        interfaceinvoke $r15.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r11);

     label2:
        return r8;
    }

    public java.lang.String[] getEras()
    {
        java.text.DateFormatSymbols r0;
        java.lang.String[] $r1, $r2, $r4;
        int $i0;
        java.lang.Object[] $r3;

        r0 := @this: java.text.DateFormatSymbols;
        $r1 = r0.<java.text.DateFormatSymbols: java.lang.String[] eras>;
        $r2 = r0.<java.text.DateFormatSymbols: java.lang.String[] eras>;
        $i0 = lengthof $r2;
        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);
        $r4 = (java.lang.String[]) $r3;
        return $r4;
    }

    public void setEras(java.lang.String[])
    {
        java.text.DateFormatSymbols r0;
        java.lang.String[] r1, $r3;
        int $i0;
        java.lang.Object[] $r2;

        r0 := @this: java.text.DateFormatSymbols;
        r1 := @parameter0: java.lang.String[];
        $i0 = lengthof r1;
        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, $i0);
        $r3 = (java.lang.String[]) $r2;
        r0.<java.text.DateFormatSymbols: java.lang.String[] eras> = $r3;
        return;
    }

    public java.lang.String[] getMonths()
    {
        java.text.DateFormatSymbols r0;
        java.lang.String[] $r1, $r2, $r4;
        int $i0;
        java.lang.Object[] $r3;

        r0 := @this: java.text.DateFormatSymbols;
        $r1 = r0.<java.text.DateFormatSymbols: java.lang.String[] months>;
        $r2 = r0.<java.text.DateFormatSymbols: java.lang.String[] months>;
        $i0 = lengthof $r2;
        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);
        $r4 = (java.lang.String[]) $r3;
        return $r4;
    }

    public void setMonths(java.lang.String[])
    {
        java.text.DateFormatSymbols r0;
        java.lang.String[] r1, $r3;
        int $i0;
        java.lang.Object[] $r2;

        r0 := @this: java.text.DateFormatSymbols;
        r1 := @parameter0: java.lang.String[];
        $i0 = lengthof r1;
        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, $i0);
        $r3 = (java.lang.String[]) $r2;
        r0.<java.text.DateFormatSymbols: java.lang.String[] months> = $r3;
        return;
    }

    public java.lang.String[] getShortMonths()
    {
        java.text.DateFormatSymbols r0;
        java.lang.String[] $r1, $r2, $r4;
        int $i0;
        java.lang.Object[] $r3;

        r0 := @this: java.text.DateFormatSymbols;
        $r1 = r0.<java.text.DateFormatSymbols: java.lang.String[] shortMonths>;
        $r2 = r0.<java.text.DateFormatSymbols: java.lang.String[] shortMonths>;
        $i0 = lengthof $r2;
        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);
        $r4 = (java.lang.String[]) $r3;
        return $r4;
    }

    public void setShortMonths(java.lang.String[])
    {
        java.text.DateFormatSymbols r0;
        java.lang.String[] r1, $r3;
        int $i0;
        java.lang.Object[] $r2;

        r0 := @this: java.text.DateFormatSymbols;
        r1 := @parameter0: java.lang.String[];
        $i0 = lengthof r1;
        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, $i0);
        $r3 = (java.lang.String[]) $r2;
        r0.<java.text.DateFormatSymbols: java.lang.String[] shortMonths> = $r3;
        return;
    }

    public java.lang.String[] getWeekdays()
    {
        java.text.DateFormatSymbols r0;
        java.lang.String[] $r1, $r2, $r4;
        int $i0;
        java.lang.Object[] $r3;

        r0 := @this: java.text.DateFormatSymbols;
        $r1 = r0.<java.text.DateFormatSymbols: java.lang.String[] weekdays>;
        $r2 = r0.<java.text.DateFormatSymbols: java.lang.String[] weekdays>;
        $i0 = lengthof $r2;
        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);
        $r4 = (java.lang.String[]) $r3;
        return $r4;
    }

    public void setWeekdays(java.lang.String[])
    {
        java.text.DateFormatSymbols r0;
        java.lang.String[] r1, $r3;
        int $i0;
        java.lang.Object[] $r2;

        r0 := @this: java.text.DateFormatSymbols;
        r1 := @parameter0: java.lang.String[];
        $i0 = lengthof r1;
        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, $i0);
        $r3 = (java.lang.String[]) $r2;
        r0.<java.text.DateFormatSymbols: java.lang.String[] weekdays> = $r3;
        return;
    }

    public java.lang.String[] getShortWeekdays()
    {
        java.text.DateFormatSymbols r0;
        java.lang.String[] $r1, $r2, $r4;
        int $i0;
        java.lang.Object[] $r3;

        r0 := @this: java.text.DateFormatSymbols;
        $r1 = r0.<java.text.DateFormatSymbols: java.lang.String[] shortWeekdays>;
        $r2 = r0.<java.text.DateFormatSymbols: java.lang.String[] shortWeekdays>;
        $i0 = lengthof $r2;
        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);
        $r4 = (java.lang.String[]) $r3;
        return $r4;
    }

    public void setShortWeekdays(java.lang.String[])
    {
        java.text.DateFormatSymbols r0;
        java.lang.String[] r1, $r3;
        int $i0;
        java.lang.Object[] $r2;

        r0 := @this: java.text.DateFormatSymbols;
        r1 := @parameter0: java.lang.String[];
        $i0 = lengthof r1;
        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, $i0);
        $r3 = (java.lang.String[]) $r2;
        r0.<java.text.DateFormatSymbols: java.lang.String[] shortWeekdays> = $r3;
        return;
    }

    public java.lang.String[] getAmPmStrings()
    {
        java.text.DateFormatSymbols r0;
        java.lang.String[] $r1, $r2, $r4;
        int $i0;
        java.lang.Object[] $r3;

        r0 := @this: java.text.DateFormatSymbols;
        $r1 = r0.<java.text.DateFormatSymbols: java.lang.String[] ampms>;
        $r2 = r0.<java.text.DateFormatSymbols: java.lang.String[] ampms>;
        $i0 = lengthof $r2;
        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);
        $r4 = (java.lang.String[]) $r3;
        return $r4;
    }

    public void setAmPmStrings(java.lang.String[])
    {
        java.text.DateFormatSymbols r0;
        java.lang.String[] r1, $r3;
        int $i0;
        java.lang.Object[] $r2;

        r0 := @this: java.text.DateFormatSymbols;
        r1 := @parameter0: java.lang.String[];
        $i0 = lengthof r1;
        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, $i0);
        $r3 = (java.lang.String[]) $r2;
        r0.<java.text.DateFormatSymbols: java.lang.String[] ampms> = $r3;
        return;
    }

    public java.lang.String[][] getZoneStrings()
    {
        java.text.DateFormatSymbols r0;
        java.lang.String[][] $r1;

        r0 := @this: java.text.DateFormatSymbols;
        $r1 = specialinvoke r0.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStringsImpl(boolean)>(1);
        return $r1;
    }

    public void setZoneStrings(java.lang.String[][])
    {
        java.text.DateFormatSymbols r0;
        java.lang.String[][] r1, r2;
        int i0, i1, $i2, $i3;
        java.lang.String[] $r3, $r5, $r7;
        java.lang.IllegalArgumentException $r4;
        java.lang.Object[] $r6;

        r0 := @this: java.text.DateFormatSymbols;
        r1 := @parameter0: java.lang.String[][];
        $i2 = lengthof r1;
        r2 = newarray (java.lang.String[])[$i2];
        i0 = 0;

     label0:
        $i3 = lengthof r1;
        if i0 >= $i3 goto label2;

        $r3 = r1[i0];
        i1 = lengthof $r3;
        if i1 >= 5 goto label1;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r4;

     label1:
        $r5 = r1[i0];
        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, i1);
        $r7 = (java.lang.String[]) $r6;
        r2[i0] = $r7;
        i0 = i0 + 1;
        goto label0;

     label2:
        r0.<java.text.DateFormatSymbols: java.lang.String[][] zoneStrings> = r2;
        r0.<java.text.DateFormatSymbols: boolean isZoneStringsSet> = 1;
        return;
    }

    public java.lang.String getLocalPatternChars()
    {
        java.text.DateFormatSymbols r0;
        java.lang.String $r1;

        r0 := @this: java.text.DateFormatSymbols;
        $r1 = r0.<java.text.DateFormatSymbols: java.lang.String localPatternChars>;
        return $r1;
    }

    public void setLocalPatternChars(java.lang.String)
    {
        java.text.DateFormatSymbols r0;
        java.lang.String r1, $r2;

        r0 := @this: java.text.DateFormatSymbols;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String toString()>();
        r0.<java.text.DateFormatSymbols: java.lang.String localPatternChars> = $r2;
        return;
    }

    public java.lang.Object clone()
    {
        java.text.DateFormatSymbols r0, r1;
        java.lang.Object $r2;
        java.lang.CloneNotSupportedException $r4, r5;
        java.lang.InternalError $r6;

        r0 := @this: java.text.DateFormatSymbols;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        r1 = (java.text.DateFormatSymbols) $r2;
        specialinvoke r0.<java.text.DateFormatSymbols: void copyMembers(java.text.DateFormatSymbols,java.text.DateFormatSymbols)>(r0, r1);

     label1:
        return r1;

     label2:
        $r4 := @caughtexception;
        r5 = $r4;
        $r6 = new java.lang.InternalError;
        specialinvoke $r6.<java.lang.InternalError: void <init>()>();
        throw $r6;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    public int hashCode()
    {
        java.text.DateFormatSymbols r0;
        int i0, i1, $i2, $i3;
        java.lang.String[][] r1;
        java.lang.String[] $r2, $r3;
        java.lang.String $r4;

        r0 := @this: java.text.DateFormatSymbols;
        i0 = 0;
        r1 = virtualinvoke r0.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStringsWrapper()>();
        i1 = 0;

     label0:
        $r2 = r1[0];
        $i2 = lengthof $r2;
        if i1 >= $i2 goto label1;

        $r3 = r1[0];
        $r4 = $r3[i1];
        $i3 = virtualinvoke $r4.<java.lang.String: int hashCode()>();
        i0 = i0 ^ $i3;
        i1 = i1 + 1;
        goto label0;

     label1:
        return i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.text.DateFormatSymbols r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        java.lang.String[] $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.String[][] $r17, $r18;
        java.lang.String $r19, $r20, $r21, $r22, $r23;

        r0 := @this: java.text.DateFormatSymbols;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        if r1 == null goto label1;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        if $r3 == $r4 goto label2;

     label1:
        return 0;

     label2:
        r2 = (java.text.DateFormatSymbols) r1;
        $r5 = r0.<java.text.DateFormatSymbols: java.lang.String[] eras>;
        $r6 = r2.<java.text.DateFormatSymbols: java.lang.String[] eras>;
        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r5, $r6);
        if $z0 == 0 goto label5;

        $r7 = r0.<java.text.DateFormatSymbols: java.lang.String[] months>;
        $r8 = r2.<java.text.DateFormatSymbols: java.lang.String[] months>;
        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r7, $r8);
        if $z1 == 0 goto label5;

        $r9 = r0.<java.text.DateFormatSymbols: java.lang.String[] shortMonths>;
        $r10 = r2.<java.text.DateFormatSymbols: java.lang.String[] shortMonths>;
        $z2 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r9, $r10);
        if $z2 == 0 goto label5;

        $r11 = r0.<java.text.DateFormatSymbols: java.lang.String[] weekdays>;
        $r12 = r2.<java.text.DateFormatSymbols: java.lang.String[] weekdays>;
        $z3 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r11, $r12);
        if $z3 == 0 goto label5;

        $r13 = r0.<java.text.DateFormatSymbols: java.lang.String[] shortWeekdays>;
        $r14 = r2.<java.text.DateFormatSymbols: java.lang.String[] shortWeekdays>;
        $z4 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r13, $r14);
        if $z4 == 0 goto label5;

        $r15 = r0.<java.text.DateFormatSymbols: java.lang.String[] ampms>;
        $r16 = r2.<java.text.DateFormatSymbols: java.lang.String[] ampms>;
        $z5 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r15, $r16);
        if $z5 == 0 goto label5;

        $r17 = virtualinvoke r0.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStringsWrapper()>();
        $r18 = virtualinvoke r2.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStringsWrapper()>();
        $z6 = staticinvoke <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>($r17, $r18);
        if $z6 == 0 goto label5;

        $r19 = r0.<java.text.DateFormatSymbols: java.lang.String localPatternChars>;
        if $r19 == null goto label3;

        $r20 = r0.<java.text.DateFormatSymbols: java.lang.String localPatternChars>;
        $r21 = r2.<java.text.DateFormatSymbols: java.lang.String localPatternChars>;
        $z7 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r21);
        if $z7 != 0 goto label4;

     label3:
        $r22 = r0.<java.text.DateFormatSymbols: java.lang.String localPatternChars>;
        if $r22 != null goto label5;

        $r23 = r2.<java.text.DateFormatSymbols: java.lang.String localPatternChars>;
        if $r23 != null goto label5;

     label4:
        $z8 = 1;
        goto label6;

     label5:
        $z8 = 0;

     label6:
        return $z8;
    }

    private void initializeData(java.util.Locale)
    {
        java.text.DateFormatSymbols r0, r3, $r9;
        java.util.Locale r1, $r6, $r10;
        java.lang.ref.SoftReference r2;
        java.util.ResourceBundle r4;
        java.util.concurrent.ConcurrentMap $r5;
        java.lang.Object $r7, $r8;
        java.lang.String[] $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19;
        java.lang.String $r15;

        r0 := @this: java.text.DateFormatSymbols;
        r1 := @parameter0: java.util.Locale;
        r0.<java.text.DateFormatSymbols: java.util.Locale locale> = r1;
        $r5 = <java.text.DateFormatSymbols: java.util.concurrent.ConcurrentMap cachedInstances>;
        $r6 = r0.<java.text.DateFormatSymbols: java.util.Locale locale>;
        $r7 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r6);
        r2 = (java.lang.ref.SoftReference) $r7;
        if r2 == null goto label0;

        $r8 = virtualinvoke r2.<java.lang.ref.SoftReference: java.lang.Object get()>();
        $r9 = (java.text.DateFormatSymbols) $r8;
        r3 = $r9;
        if $r9 == null goto label0;

        specialinvoke r0.<java.text.DateFormatSymbols: void copyMembers(java.text.DateFormatSymbols,java.text.DateFormatSymbols)>(r3, r0);
        return;

     label0:
        $r10 = r0.<java.text.DateFormatSymbols: java.util.Locale locale>;
        r4 = staticinvoke <sun.util.resources.LocaleData: java.util.ResourceBundle getDateFormatData(java.util.Locale)>($r10);
        $r11 = virtualinvoke r4.<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>("Eras");
        r0.<java.text.DateFormatSymbols: java.lang.String[] eras> = $r11;
        $r12 = virtualinvoke r4.<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>("MonthNames");
        r0.<java.text.DateFormatSymbols: java.lang.String[] months> = $r12;
        $r13 = virtualinvoke r4.<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>("MonthAbbreviations");
        r0.<java.text.DateFormatSymbols: java.lang.String[] shortMonths> = $r13;
        $r14 = virtualinvoke r4.<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>("AmPmMarkers");
        r0.<java.text.DateFormatSymbols: java.lang.String[] ampms> = $r14;
        $r15 = virtualinvoke r4.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("DateTimePatternChars");
        r0.<java.text.DateFormatSymbols: java.lang.String localPatternChars> = $r15;
        $r16 = virtualinvoke r4.<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>("DayNames");
        $r17 = staticinvoke <java.text.DateFormatSymbols: java.lang.String[] toOneBasedArray(java.lang.String[])>($r16);
        r0.<java.text.DateFormatSymbols: java.lang.String[] weekdays> = $r17;
        $r18 = virtualinvoke r4.<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>("DayAbbreviations");
        $r19 = staticinvoke <java.text.DateFormatSymbols: java.lang.String[] toOneBasedArray(java.lang.String[])>($r18);
        r0.<java.text.DateFormatSymbols: java.lang.String[] shortWeekdays> = $r19;
        return;
    }

    private static java.lang.String[] toOneBasedArray(java.lang.String[])
    {
        java.lang.String[] r0, r1;
        int i0, i1, $i2, $i3;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.String[];
        i0 = lengthof r0;
        $i2 = i0 + 1;
        r1 = newarray (java.lang.String)[$i2];
        r1[0] = "";
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        $i3 = i1 + 1;
        $r2 = r0[i1];
        r1[$i3] = $r2;
        i1 = i1 + 1;
        goto label0;

     label1:
        return r1;
    }

    final int getZoneIndex(java.lang.String)
    {
        java.text.DateFormatSymbols r0;
        java.lang.String r1, $r4, $r6;
        java.lang.String[][] r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String[] $r3, $r5;
        boolean $z0, $z1;

        r0 := @this: java.text.DateFormatSymbols;
        r1 := @parameter0: java.lang.String;
        r2 = virtualinvoke r0.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStringsWrapper()>();
        $i1 = r0.<java.text.DateFormatSymbols: int lastZoneIndex>;
        $i2 = lengthof r2;
        if $i1 >= $i2 goto label0;

        $i3 = r0.<java.text.DateFormatSymbols: int lastZoneIndex>;
        $r3 = r2[$i3];
        $r4 = $r3[0];
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);
        if $z0 == 0 goto label0;

        $i4 = r0.<java.text.DateFormatSymbols: int lastZoneIndex>;
        return $i4;

     label0:
        i0 = 0;

     label1:
        $i5 = lengthof r2;
        if i0 >= $i5 goto label3;

        $r5 = r2[i0];
        $r6 = $r5[0];
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);
        if $z1 == 0 goto label2;

        r0.<java.text.DateFormatSymbols: int lastZoneIndex> = i0;
        return i0;

     label2:
        i0 = i0 + 1;
        goto label1;

     label3:
        return -1;
    }

    final java.lang.String[][] getZoneStringsWrapper()
    {
        java.text.DateFormatSymbols r0;
        boolean $z0;
        java.lang.String[][] $r1, $r2;

        r0 := @this: java.text.DateFormatSymbols;
        $z0 = specialinvoke r0.<java.text.DateFormatSymbols: boolean isSubclassObject()>();
        if $z0 == 0 goto label0;

        $r1 = virtualinvoke r0.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>();
        return $r1;

     label0:
        $r2 = specialinvoke r0.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStringsImpl(boolean)>(0);
        return $r2;
    }

    private final java.lang.String[][] getZoneStringsImpl(boolean)
    {
        java.text.DateFormatSymbols r0;
        boolean z0;
        int i0, i1, $i2;
        java.lang.String[][] r1, $r2, $r4, $r5, $r6, $r7, $r9;
        java.util.Locale $r3;
        java.lang.String[] $r8, $r10, $r12;
        java.lang.Object[] $r11;

        r0 := @this: java.text.DateFormatSymbols;
        z0 := @parameter0: boolean;
        $r2 = r0.<java.text.DateFormatSymbols: java.lang.String[][] zoneStrings>;
        if $r2 != null goto label0;

        $r3 = r0.<java.text.DateFormatSymbols: java.util.Locale locale>;
        $r4 = staticinvoke <sun.util.TimeZoneNameUtility: java.lang.String[][] getZoneStrings(java.util.Locale)>($r3);
        r0.<java.text.DateFormatSymbols: java.lang.String[][] zoneStrings> = $r4;

     label0:
        if z0 != 0 goto label1;

        $r5 = r0.<java.text.DateFormatSymbols: java.lang.String[][] zoneStrings>;
        return $r5;

     label1:
        $r6 = r0.<java.text.DateFormatSymbols: java.lang.String[][] zoneStrings>;
        i0 = lengthof $r6;
        r1 = newarray (java.lang.String[])[i0];
        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r7 = r0.<java.text.DateFormatSymbols: java.lang.String[][] zoneStrings>;
        $r8 = $r7[i1];
        $r9 = r0.<java.text.DateFormatSymbols: java.lang.String[][] zoneStrings>;
        $r10 = $r9[i1];
        $i2 = lengthof $r10;
        $r11 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r8, $i2);
        $r12 = (java.lang.String[]) $r11;
        r1[i1] = $r12;
        i1 = i1 + 1;
        goto label2;

     label3:
        return r1;
    }

    private final boolean isSubclassObject()
    {
        java.text.DateFormatSymbols r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: java.text.DateFormatSymbols;
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("java.text.DateFormatSymbols");
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    private final void copyMembers(java.text.DateFormatSymbols, java.text.DateFormatSymbols)
    {
        java.text.DateFormatSymbols r0, r1, r2;
        java.lang.String[] $r3, $r4, $r6, $r7, $r8, $r10, $r11, $r12, $r14, $r15, $r16, $r18, $r19, $r20, $r22, $r23, $r24, $r26;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r5, $r9, $r13, $r17, $r21, $r25;
        java.lang.String[][] $r27, $r28, $r29;
        java.lang.String $r30;

        r0 := @this: java.text.DateFormatSymbols;
        r1 := @parameter0: java.text.DateFormatSymbols;
        r2 := @parameter1: java.text.DateFormatSymbols;
        $r3 = r1.<java.text.DateFormatSymbols: java.lang.String[] eras>;
        $r4 = r1.<java.text.DateFormatSymbols: java.lang.String[] eras>;
        $i0 = lengthof $r4;
        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0);
        $r6 = (java.lang.String[]) $r5;
        r2.<java.text.DateFormatSymbols: java.lang.String[] eras> = $r6;
        $r7 = r1.<java.text.DateFormatSymbols: java.lang.String[] months>;
        $r8 = r1.<java.text.DateFormatSymbols: java.lang.String[] months>;
        $i1 = lengthof $r8;
        $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r7, $i1);
        $r10 = (java.lang.String[]) $r9;
        r2.<java.text.DateFormatSymbols: java.lang.String[] months> = $r10;
        $r11 = r1.<java.text.DateFormatSymbols: java.lang.String[] shortMonths>;
        $r12 = r1.<java.text.DateFormatSymbols: java.lang.String[] shortMonths>;
        $i2 = lengthof $r12;
        $r13 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r11, $i2);
        $r14 = (java.lang.String[]) $r13;
        r2.<java.text.DateFormatSymbols: java.lang.String[] shortMonths> = $r14;
        $r15 = r1.<java.text.DateFormatSymbols: java.lang.String[] weekdays>;
        $r16 = r1.<java.text.DateFormatSymbols: java.lang.String[] weekdays>;
        $i3 = lengthof $r16;
        $r17 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r15, $i3);
        $r18 = (java.lang.String[]) $r17;
        r2.<java.text.DateFormatSymbols: java.lang.String[] weekdays> = $r18;
        $r19 = r1.<java.text.DateFormatSymbols: java.lang.String[] shortWeekdays>;
        $r20 = r1.<java.text.DateFormatSymbols: java.lang.String[] shortWeekdays>;
        $i4 = lengthof $r20;
        $r21 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r19, $i4);
        $r22 = (java.lang.String[]) $r21;
        r2.<java.text.DateFormatSymbols: java.lang.String[] shortWeekdays> = $r22;
        $r23 = r1.<java.text.DateFormatSymbols: java.lang.String[] ampms>;
        $r24 = r1.<java.text.DateFormatSymbols: java.lang.String[] ampms>;
        $i5 = lengthof $r24;
        $r25 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r23, $i5);
        $r26 = (java.lang.String[]) $r25;
        r2.<java.text.DateFormatSymbols: java.lang.String[] ampms> = $r26;
        $r27 = r1.<java.text.DateFormatSymbols: java.lang.String[][] zoneStrings>;
        if $r27 == null goto label0;

        $r28 = specialinvoke r1.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStringsImpl(boolean)>(1);
        r2.<java.text.DateFormatSymbols: java.lang.String[][] zoneStrings> = $r28;
        goto label1;

     label0:
        $r29 = (java.lang.String[][]) null;
        r2.<java.text.DateFormatSymbols: java.lang.String[][] zoneStrings> = $r29;

     label1:
        $r30 = r1.<java.text.DateFormatSymbols: java.lang.String localPatternChars>;
        r2.<java.text.DateFormatSymbols: java.lang.String localPatternChars> = $r30;
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.text.DateFormatSymbols r0;
        java.io.ObjectOutputStream r1;
        java.lang.String[][] $r2, $r4;
        java.util.Locale $r3;

        r0 := @this: java.text.DateFormatSymbols;
        r1 := @parameter0: java.io.ObjectOutputStream;
        $r2 = r0.<java.text.DateFormatSymbols: java.lang.String[][] zoneStrings>;
        if $r2 != null goto label0;

        $r3 = r0.<java.text.DateFormatSymbols: java.util.Locale locale>;
        $r4 = staticinvoke <sun.util.TimeZoneNameUtility: java.lang.String[][] getZoneStrings(java.util.Locale)>($r3);
        r0.<java.text.DateFormatSymbols: java.lang.String[][] zoneStrings> = $r4;

     label0:
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        $r0 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(3);
        <java.text.DateFormatSymbols: java.util.concurrent.ConcurrentMap cachedInstances> = $r0;
        return;
    }
}
