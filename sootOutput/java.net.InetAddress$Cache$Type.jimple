final enum class java.net.InetAddress$Cache$Type extends java.lang.Enum
{
    public static final enum java.net.InetAddress$Cache$Type Positive;
    public static final enum java.net.InetAddress$Cache$Type Negative;
    private static final java.net.InetAddress$Cache$Type[] $VALUES;

    public static java.net.InetAddress$Cache$Type[] values()
    {
        java.net.InetAddress$Cache$Type[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <java.net.InetAddress$Cache$Type: java.net.InetAddress$Cache$Type[] $VALUES>;
        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();
        $r2 = (java.net.InetAddress$Cache$Type[]) $r1;
        return $r2;
    }

    public static java.net.InetAddress$Cache$Type valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        java.net.InetAddress$Cache$Type $r2;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "java/net/InetAddress$Cache$Type", r0);
        $r2 = (java.net.InetAddress$Cache$Type) $r1;
        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        java.net.InetAddress$Cache$Type r0;
        java.lang.String r1;
        int i0;

        r0 := @this: java.net.InetAddress$Cache$Type;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);
        return;
    }

    static void <clinit>()
    {
        java.net.InetAddress$Cache$Type $r0, $r1, $r3, $r4;
        java.net.InetAddress$Cache$Type[] $r2;

        $r0 = new java.net.InetAddress$Cache$Type;
        specialinvoke $r0.<java.net.InetAddress$Cache$Type: void <init>(java.lang.String,int)>("Positive", 0);
        <java.net.InetAddress$Cache$Type: java.net.InetAddress$Cache$Type Positive> = $r0;
        $r1 = new java.net.InetAddress$Cache$Type;
        specialinvoke $r1.<java.net.InetAddress$Cache$Type: void <init>(java.lang.String,int)>("Negative", 1);
        <java.net.InetAddress$Cache$Type: java.net.InetAddress$Cache$Type Negative> = $r1;
        $r2 = newarray (java.net.InetAddress$Cache$Type)[2];
        $r3 = <java.net.InetAddress$Cache$Type: java.net.InetAddress$Cache$Type Positive>;
        $r2[0] = $r3;
        $r4 = <java.net.InetAddress$Cache$Type: java.net.InetAddress$Cache$Type Negative>;
        $r2[1] = $r4;
        <java.net.InetAddress$Cache$Type: java.net.InetAddress$Cache$Type[] $VALUES> = $r2;
        return;
    }
}
