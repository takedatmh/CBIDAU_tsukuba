public class java.util.logging.XMLFormatter extends java.util.logging.Formatter
{
    private java.util.logging.LogManager manager;

    public void <init>()
    {
        java.util.logging.XMLFormatter r0;
        java.util.logging.LogManager $r1;

        r0 := @this: java.util.logging.XMLFormatter;
        specialinvoke r0.<java.util.logging.Formatter: void <init>()>();
        $r1 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();
        r0.<java.util.logging.XMLFormatter: java.util.logging.LogManager manager> = $r1;
        return;
    }

    private void a2(java.lang.StringBuffer, int)
    {
        java.util.logging.XMLFormatter r0;
        java.lang.StringBuffer r1;
        int i0;

        r0 := @this: java.util.logging.XMLFormatter;
        r1 := @parameter0: java.lang.StringBuffer;
        i0 := @parameter1: int;
        if i0 >= 10 goto label0;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

     label0:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);
        return;
    }

    private void appendISO8601(java.lang.StringBuffer, long)
    {
        java.util.logging.XMLFormatter r0;
        java.lang.StringBuffer r1;
        long l0;
        java.util.Date $r2, r3;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: java.util.logging.XMLFormatter;
        r1 := @parameter0: java.lang.StringBuffer;
        l0 := @parameter1: long;
        $r2 = new java.util.Date;
        specialinvoke $r2.<java.util.Date: void <init>(long)>(l0);
        r3 = $r2;
        $i1 = virtualinvoke r3.<java.util.Date: int getYear()>();
        $i2 = $i1 + 1900;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);
        $i3 = virtualinvoke r3.<java.util.Date: int getMonth()>();
        $i4 = $i3 + 1;
        specialinvoke r0.<java.util.logging.XMLFormatter: void a2(java.lang.StringBuffer,int)>(r1, $i4);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);
        $i5 = virtualinvoke r3.<java.util.Date: int getDate()>();
        specialinvoke r0.<java.util.logging.XMLFormatter: void a2(java.lang.StringBuffer,int)>(r1, $i5);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(84);
        $i6 = virtualinvoke r3.<java.util.Date: int getHours()>();
        specialinvoke r0.<java.util.logging.XMLFormatter: void a2(java.lang.StringBuffer,int)>(r1, $i6);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);
        $i7 = virtualinvoke r3.<java.util.Date: int getMinutes()>();
        specialinvoke r0.<java.util.logging.XMLFormatter: void a2(java.lang.StringBuffer,int)>(r1, $i7);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);
        $i8 = virtualinvoke r3.<java.util.Date: int getSeconds()>();
        specialinvoke r0.<java.util.logging.XMLFormatter: void a2(java.lang.StringBuffer,int)>(r1, $i8);
        return;
    }

    private void escape(java.lang.StringBuffer, java.lang.String)
    {
        java.util.logging.XMLFormatter r0;
        java.lang.StringBuffer r1;
        java.lang.String r2;
        int i0, $i2;
        char c1;

        r0 := @this: java.util.logging.XMLFormatter;
        r1 := @parameter0: java.lang.StringBuffer;
        r2 := @parameter1: java.lang.String;
        if r2 != null goto label0;

        r2 = "<null>";

     label0:
        i0 = 0;

     label1:
        $i2 = virtualinvoke r2.<java.lang.String: int length()>();
        if i0 >= $i2 goto label6;

        c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0);
        if c1 != 60 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&lt;");
        goto label5;

     label2:
        if c1 != 62 goto label3;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&gt;");
        goto label5;

     label3:
        if c1 != 38 goto label4;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&amp;");
        goto label5;

     label4:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

     label5:
        i0 = i0 + 1;
        goto label1;

     label6:
        return;
    }

    public java.lang.String format(java.util.logging.LogRecord)
    {
        java.util.logging.XMLFormatter r0;
        java.util.logging.LogRecord r1;
        java.lang.StringBuffer $r2, r3;
        java.lang.String r4, r5, $r22, $r24, $r26, $r28, $r30, $r35, $r40, $r41, $r43, $r46, $r50, $r53, $r61, $r66, $r69, $r77;
        java.lang.Exception r6, r7, $r48, $r54;
        int i0, i1, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.StackTraceElement r8;
        long $l2, $l3, $l4;
        java.util.logging.Level $r21;
        java.util.ResourceBundle r39;
        java.lang.Object[] r49;
        java.lang.Object $r52;
        java.lang.Throwable $r57, r58;
        java.lang.StackTraceElement[] r63;

        r0 := @this: java.util.logging.XMLFormatter;
        r1 := @parameter0: java.util.logging.LogRecord;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>(500);
        r3 = $r2;
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<record>\n");
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  <date>");
        $l2 = virtualinvoke r1.<java.util.logging.LogRecord: long getMillis()>();
        specialinvoke r0.<java.util.logging.XMLFormatter: void appendISO8601(java.lang.StringBuffer,long)>(r3, $l2);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</date>\n");
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  <millis>");
        $l3 = virtualinvoke r1.<java.util.logging.LogRecord: long getMillis()>();
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l3);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</millis>\n");
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  <sequence>");
        $l4 = virtualinvoke r1.<java.util.logging.LogRecord: long getSequenceNumber()>();
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l4);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</sequence>\n");
        r4 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getLoggerName()>();
        if r4 == null goto label0;

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  <logger>");
        specialinvoke r0.<java.util.logging.XMLFormatter: void escape(java.lang.StringBuffer,java.lang.String)>(r3, r4);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</logger>\n");

     label0:
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  <level>");
        $r21 = virtualinvoke r1.<java.util.logging.LogRecord: java.util.logging.Level getLevel()>();
        $r22 = virtualinvoke $r21.<java.util.logging.Level: java.lang.String toString()>();
        specialinvoke r0.<java.util.logging.XMLFormatter: void escape(java.lang.StringBuffer,java.lang.String)>(r3, $r22);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</level>\n");
        $r24 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getSourceClassName()>();
        if $r24 == null goto label1;

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  <class>");
        $r26 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getSourceClassName()>();
        specialinvoke r0.<java.util.logging.XMLFormatter: void escape(java.lang.StringBuffer,java.lang.String)>(r3, $r26);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</class>\n");

     label1:
        $r28 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getSourceMethodName()>();
        if $r28 == null goto label2;

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  <method>");
        $r30 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getSourceMethodName()>();
        specialinvoke r0.<java.util.logging.XMLFormatter: void escape(java.lang.StringBuffer,java.lang.String)>(r3, $r30);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</method>\n");

     label2:
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  <thread>");
        $i5 = virtualinvoke r1.<java.util.logging.LogRecord: int getThreadID()>();
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</thread>\n");
        $r35 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getMessage()>();
        if $r35 == null goto label3;

        r5 = virtualinvoke r0.<java.util.logging.XMLFormatter: java.lang.String formatMessage(java.util.logging.LogRecord)>(r1);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  <message>");
        specialinvoke r0.<java.util.logging.XMLFormatter: void escape(java.lang.StringBuffer,java.lang.String)>(r3, r5);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</message>");
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

     label3:
        r39 = virtualinvoke r1.<java.util.logging.LogRecord: java.util.ResourceBundle getResourceBundle()>();

     label4:
        if r39 == null goto label5;

        $r40 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getMessage()>();
        $r41 = virtualinvoke r39.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>($r40);
        if $r41 == null goto label5;

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  <key>");
        $r43 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getMessage()>();
        specialinvoke r0.<java.util.logging.XMLFormatter: void escape(java.lang.StringBuffer,java.lang.String)>(r3, $r43);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</key>\n");
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  <catalog>");
        $r46 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getResourceBundleName()>();
        specialinvoke r0.<java.util.logging.XMLFormatter: void escape(java.lang.StringBuffer,java.lang.String)>(r3, $r46);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</catalog>\n");

     label5:
        goto label7;

     label6:
        $r48 := @caughtexception;
        r6 = $r48;

     label7:
        r49 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.Object[] getParameters()>();
        if r49 == null goto label13;

        $i6 = lengthof r49;
        if $i6 == 0 goto label13;

        $r50 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getMessage()>();
        $i7 = virtualinvoke $r50.<java.lang.String: int indexOf(java.lang.String)>("{");
        if $i7 != -1 goto label13;

        i0 = 0;

     label8:
        $i8 = lengthof r49;
        if i0 >= $i8 goto label13;

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  <param>");

     label9:
        $r52 = r49[i0];
        $r53 = virtualinvoke $r52.<java.lang.Object: java.lang.String toString()>();
        specialinvoke r0.<java.util.logging.XMLFormatter: void escape(java.lang.StringBuffer,java.lang.String)>(r3, $r53);

     label10:
        goto label12;

     label11:
        $r54 := @caughtexception;
        r7 = $r54;
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("???");

     label12:
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</param>\n");
        i0 = i0 + 1;
        goto label8;

     label13:
        $r57 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.Throwable getThrown()>();
        if $r57 == null goto label17;

        r58 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.Throwable getThrown()>();
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  <exception>\n");
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    <message>");
        $r61 = virtualinvoke r58.<java.lang.Throwable: java.lang.String toString()>();
        specialinvoke r0.<java.util.logging.XMLFormatter: void escape(java.lang.StringBuffer,java.lang.String)>(r3, $r61);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</message>\n");
        r63 = virtualinvoke r58.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();
        i1 = 0;

     label14:
        $i9 = lengthof r63;
        if i1 >= $i9 goto label16;

        r8 = r63[i1];
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    <frame>\n");
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("      <class>");
        $r66 = virtualinvoke r8.<java.lang.StackTraceElement: java.lang.String getClassName()>();
        specialinvoke r0.<java.util.logging.XMLFormatter: void escape(java.lang.StringBuffer,java.lang.String)>(r3, $r66);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</class>\n");
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("      <method>");
        $r69 = virtualinvoke r8.<java.lang.StackTraceElement: java.lang.String getMethodName()>();
        specialinvoke r0.<java.util.logging.XMLFormatter: void escape(java.lang.StringBuffer,java.lang.String)>(r3, $r69);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</method>\n");
        $i10 = virtualinvoke r8.<java.lang.StackTraceElement: int getLineNumber()>();
        if $i10 < 0 goto label15;

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("      <line>");
        $i11 = virtualinvoke r8.<java.lang.StackTraceElement: int getLineNumber()>();
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i11);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</line>\n");

     label15:
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    </frame>\n");
        i1 = i1 + 1;
        goto label14;

     label16:
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  </exception>\n");

     label17:
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</record>\n");
        $r77 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r77;

        catch java.lang.Exception from label4 to label5 with label6;
        catch java.lang.Exception from label9 to label10 with label11;
    }

    public java.lang.String getHead(java.util.logging.Handler)
    {
        java.util.logging.XMLFormatter r0;
        java.util.logging.Handler r1;
        java.lang.StringBuffer $r2, r3;
        java.lang.String r4, $r16;
        java.nio.charset.Charset r5, $r7;
        java.lang.Exception $r8, r9;

        r0 := @this: java.util.logging.XMLFormatter;
        r1 := @parameter0: java.util.logging.Handler;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        r3 = $r2;
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<?xml version=\"1.0\"");
        if r1 == null goto label0;

        r4 = virtualinvoke r1.<java.util.logging.Handler: java.lang.String getEncoding()>();
        goto label1;

     label0:
        r4 = null;

     label1:
        if r4 != null goto label2;

        $r7 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
        r4 = virtualinvoke $r7.<java.nio.charset.Charset: java.lang.String name()>();

     label2:
        r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r4);
        r4 = virtualinvoke r5.<java.nio.charset.Charset: java.lang.String name()>();

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;
        r9 = $r8;

     label5:
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" encoding=\"");
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" standalone=\"no\"?>\n");
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<!DOCTYPE log SYSTEM \"logger.dtd\">\n");
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<log>\n");
        $r16 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r16;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public java.lang.String getTail(java.util.logging.Handler)
    {
        java.util.logging.XMLFormatter r0;
        java.util.logging.Handler r1;

        r0 := @this: java.util.logging.XMLFormatter;
        r1 := @parameter0: java.util.logging.Handler;
        return "</log>\n";
    }
}
