public abstract class java.text.BreakIterator extends java.lang.Object implements java.lang.Cloneable
{
    public static final int DONE;
    private static final int CHARACTER_INDEX;
    private static final int WORD_INDEX;
    private static final int LINE_INDEX;
    private static final int SENTENCE_INDEX;
    private static final java.lang.ref.SoftReference[] iterCache;

    protected void <init>()
    {
        java.text.BreakIterator r0;

        r0 := @this: java.text.BreakIterator;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public java.lang.Object clone()
    {
        java.text.BreakIterator r0;
        java.lang.CloneNotSupportedException r1, $r3;
        java.lang.Object $r2;
        java.lang.InternalError $r4;

        r0 := @this: java.text.BreakIterator;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label1:
        return $r2;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        $r4 = new java.lang.InternalError;
        specialinvoke $r4.<java.lang.InternalError: void <init>()>();
        throw $r4;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    public abstract int first();

    public abstract int last();

    public abstract int next(int);

    public abstract int next();

    public abstract int previous();

    public abstract int following(int);

    public int preceding(int)
    {
        java.text.BreakIterator r0;
        int i0, i1;

        r0 := @this: java.text.BreakIterator;
        i0 := @parameter0: int;
        i1 = virtualinvoke r0.<java.text.BreakIterator: int following(int)>(i0);

     label0:
        if i1 < i0 goto label1;

        if i1 == -1 goto label1;

        i1 = virtualinvoke r0.<java.text.BreakIterator: int previous()>();
        goto label0;

     label1:
        return i1;
    }

    public boolean isBoundary(int)
    {
        java.text.BreakIterator r0;
        int i0, i1, $i2;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @this: java.text.BreakIterator;
        i0 := @parameter0: int;
        if i0 != 0 goto label0;

        return 1;

     label0:
        $i2 = i0 - 1;
        i1 = virtualinvoke r0.<java.text.BreakIterator: int following(int)>($i2);
        if i1 != -1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r1;

     label1:
        if i1 != i0 goto label2;

        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public abstract int current();

    public abstract java.text.CharacterIterator getText();

    public void setText(java.lang.String)
    {
        java.text.BreakIterator r0;
        java.lang.String r1;
        java.text.StringCharacterIterator $r2;

        r0 := @this: java.text.BreakIterator;
        r1 := @parameter0: java.lang.String;
        $r2 = new java.text.StringCharacterIterator;
        specialinvoke $r2.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(r1);
        virtualinvoke r0.<java.text.BreakIterator: void setText(java.text.CharacterIterator)>($r2);
        return;
    }

    public abstract void setText(java.text.CharacterIterator);

    public static java.text.BreakIterator getWordInstance()
    {
        java.util.Locale $r0;
        java.text.BreakIterator $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();
        $r1 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getWordInstance(java.util.Locale)>($r0);
        return $r1;
    }

    public static java.text.BreakIterator getWordInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.BreakIterator $r1;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getBreakInstance(java.util.Locale,int,java.lang.String,java.lang.String)>(r0, 1, "WordData", "WordDictionary");
        return $r1;
    }

    public static java.text.BreakIterator getLineInstance()
    {
        java.util.Locale $r0;
        java.text.BreakIterator $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();
        $r1 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance(java.util.Locale)>($r0);
        return $r1;
    }

    public static java.text.BreakIterator getLineInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.BreakIterator $r1;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getBreakInstance(java.util.Locale,int,java.lang.String,java.lang.String)>(r0, 2, "LineData", "LineDictionary");
        return $r1;
    }

    public static java.text.BreakIterator getCharacterInstance()
    {
        java.util.Locale $r0;
        java.text.BreakIterator $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();
        $r1 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getCharacterInstance(java.util.Locale)>($r0);
        return $r1;
    }

    public static java.text.BreakIterator getCharacterInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.BreakIterator $r1;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getBreakInstance(java.util.Locale,int,java.lang.String,java.lang.String)>(r0, 0, "CharacterData", "CharacterDictionary");
        return $r1;
    }

    public static java.text.BreakIterator getSentenceInstance()
    {
        java.util.Locale $r0;
        java.text.BreakIterator $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();
        $r1 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getSentenceInstance(java.util.Locale)>($r0);
        return $r1;
    }

    public static java.text.BreakIterator getSentenceInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.BreakIterator $r1;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getBreakInstance(java.util.Locale,int,java.lang.String,java.lang.String)>(r0, 3, "SentenceData", "SentenceDictionary");
        return $r1;
    }

    private static java.text.BreakIterator getBreakInstance(java.util.Locale, int, java.lang.String, java.lang.String)
    {
        java.util.Locale r0, $r10;
        int i0;
        java.lang.String r1, r2;
        java.lang.ref.SoftReference[] $r3, $r7, $r14;
        java.text.BreakIterator$BreakIteratorCache r4, r5, $r13;
        java.lang.ref.SoftReference $r6, $r8, $r15;
        java.lang.Object $r9;
        boolean $z0;
        java.text.BreakIterator $r11, r12;

        r0 := @parameter0: java.util.Locale;
        i0 := @parameter1: int;
        r1 := @parameter2: java.lang.String;
        r2 := @parameter3: java.lang.String;
        $r3 = <java.text.BreakIterator: java.lang.ref.SoftReference[] iterCache>;
        $r6 = $r3[i0];
        if $r6 == null goto label0;

        $r7 = <java.text.BreakIterator: java.lang.ref.SoftReference[] iterCache>;
        $r8 = $r7[i0];
        $r9 = virtualinvoke $r8.<java.lang.ref.SoftReference: java.lang.Object get()>();
        r4 = (java.text.BreakIterator$BreakIteratorCache) $r9;
        if r4 == null goto label0;

        $r10 = virtualinvoke r4.<java.text.BreakIterator$BreakIteratorCache: java.util.Locale getLocale()>();
        $z0 = virtualinvoke $r10.<java.util.Locale: boolean equals(java.lang.Object)>(r0);
        if $z0 == 0 goto label0;

        $r11 = virtualinvoke r4.<java.text.BreakIterator$BreakIteratorCache: java.text.BreakIterator createBreakInstance()>();
        return $r11;

     label0:
        r12 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator createBreakInstance(java.util.Locale,int,java.lang.String,java.lang.String)>(r0, i0, r1, r2);
        $r13 = new java.text.BreakIterator$BreakIteratorCache;
        specialinvoke $r13.<java.text.BreakIterator$BreakIteratorCache: void <init>(java.util.Locale,java.text.BreakIterator)>(r0, r12);
        r5 = $r13;
        $r14 = <java.text.BreakIterator: java.lang.ref.SoftReference[] iterCache>;
        $r15 = new java.lang.ref.SoftReference;
        specialinvoke $r15.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r5);
        $r14[i0] = $r15;
        return r12;
    }

    private static java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale)
    {
        java.lang.String r0;
        java.util.Locale r1;
        java.text.BreakIterator$1 $r2;
        java.lang.Object $r3;
        java.util.ResourceBundle $r4;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.util.Locale;
        $r2 = new java.text.BreakIterator$1;
        specialinvoke $r2.<java.text.BreakIterator$1: void <init>(java.lang.String,java.util.Locale)>(r0, r1);
        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);
        $r4 = (java.util.ResourceBundle) $r3;
        return $r4;
    }

    private static java.text.BreakIterator createBreakInstance(java.util.Locale, int, java.lang.String, java.lang.String)
    {
        java.util.Locale r0;
        int i0;
        java.lang.String r1, r2, r7, r8, $r13, $r15, $r20, $r23, $r27;
        sun.util.LocaleServiceProviderPool r3;
        java.text.BreakIterator$BreakIteratorGetter $r4;
        java.text.BreakIterator r5;
        java.lang.String[] r6;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r9;
        java.lang.Integer $r10;
        java.lang.Object $r11;
        java.util.ResourceBundle r12;
        java.text.RuleBasedBreakIterator $r14;
        java.text.DictionaryBasedBreakIterator $r16;
        java.lang.IllegalArgumentException $r17;
        java.lang.StringBuilder $r18, $r19, $r21, $r22;
        java.lang.Exception $r24, r25;
        java.lang.InternalError $r26;

        r0 := @parameter0: java.util.Locale;
        i0 := @parameter1: int;
        r1 := @parameter2: java.lang.String;
        r2 := @parameter3: java.lang.String;
        r3 = staticinvoke <sun.util.LocaleServiceProviderPool: sun.util.LocaleServiceProviderPool getPool(java.lang.Class)>(class "java/text/spi/BreakIteratorProvider");
        $z0 = virtualinvoke r3.<sun.util.LocaleServiceProviderPool: boolean hasProviders()>();
        if $z0 == 0 goto label0;

        $r4 = staticinvoke <java.text.BreakIterator$BreakIteratorGetter: java.text.BreakIterator$BreakIteratorGetter access$000()>();
        $r9 = newarray (java.lang.Object)[1];
        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        $r9[0] = $r10;
        $r11 = virtualinvoke r3.<sun.util.LocaleServiceProviderPool: java.lang.Object getLocalizedObject(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,java.lang.Object[])>($r4, r0, $r9);
        r5 = (java.text.BreakIterator) $r11;
        if r5 == null goto label0;

        return r5;

     label0:
        r12 = staticinvoke <java.text.BreakIterator: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>("sun.text.resources.BreakIteratorInfo", r0);
        r6 = virtualinvoke r12.<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>("BreakIteratorClasses");
        r7 = virtualinvoke r12.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(r1);

     label1:
        $r13 = r6[i0];
        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("RuleBasedBreakIterator");
        if $z1 == 0 goto label3;

        $r14 = new java.text.RuleBasedBreakIterator;
        specialinvoke $r14.<java.text.RuleBasedBreakIterator: void <init>(java.lang.String)>(r7);

     label2:
        return $r14;

     label3:
        $r15 = r6[i0];
        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("DictionaryBasedBreakIterator");
        if $z2 == 0 goto label5;

        r8 = virtualinvoke r12.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(r2);
        $r16 = new java.text.DictionaryBasedBreakIterator;
        specialinvoke $r16.<java.text.DictionaryBasedBreakIterator: void <init>(java.lang.String,java.lang.String)>(r7, r8);

     label4:
        return $r16;

     label5:
        $r17 = new java.lang.IllegalArgumentException;
        $r18 = new java.lang.StringBuilder;
        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid break iterator class \"");
        $r20 = r6[i0];
        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);
        throw $r17;

     label6:
        $r24 := @caughtexception;
        r25 = $r24;
        $r26 = new java.lang.InternalError;
        $r27 = virtualinvoke r25.<java.lang.Exception: java.lang.String toString()>();
        specialinvoke $r26.<java.lang.InternalError: void <init>(java.lang.String)>($r27);
        throw $r26;

        catch java.lang.Exception from label1 to label2 with label6;
        catch java.lang.Exception from label3 to label4 with label6;
        catch java.lang.Exception from label5 to label6 with label6;
    }

    public static synchronized java.util.Locale[] getAvailableLocales()
    {
        sun.util.LocaleServiceProviderPool r0;
        java.util.Locale[] $r1;

        r0 = staticinvoke <sun.util.LocaleServiceProviderPool: sun.util.LocaleServiceProviderPool getPool(java.lang.Class)>(class "java/text/spi/BreakIteratorProvider");
        $r1 = virtualinvoke r0.<sun.util.LocaleServiceProviderPool: java.util.Locale[] getAvailableLocales()>();
        return $r1;
    }

    static long getLong(byte[], int)
    {
        byte[] r0;
        int i0, i2, $i6;
        long l1, $l5, $l9;
        byte $b3, $b7;
        short $s4, $s8;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        $b3 = r0[i0];
        $s4 = $b3 & 255;
        l1 = (long) $s4;
        i2 = 1;

     label0:
        if i2 >= 8 goto label1;

        $l5 = l1 << 8;
        $i6 = i0 + i2;
        $b7 = r0[$i6];
        $s8 = $b7 & 255;
        $l9 = (long) $s8;
        l1 = $l5 | $l9;
        i2 = i2 + 1;
        goto label0;

     label1:
        return l1;
    }

    static int getInt(byte[], int)
    {
        byte[] r0;
        int i0, i1, i2, $i4, $i5;
        byte $b3, $b6;
        short $s7;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        $b3 = r0[i0];
        i1 = $b3 & 255;
        i2 = 1;

     label0:
        if i2 >= 4 goto label1;

        $i4 = i1 << 8;
        $i5 = i0 + i2;
        $b6 = r0[$i5];
        $s7 = $b6 & 255;
        i1 = $i4 | $s7;
        i2 = i2 + 1;
        goto label0;

     label1:
        return i1;
    }

    static short getShort(byte[], int)
    {
        byte[] r0;
        int i0, $i4, $i5, $i8;
        short s1, $s3, $s7, s9;
        byte $b2, $b6;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        $b2 = r0[i0];
        $s3 = $b2 & 255;
        s1 = (short) $s3;
        $i4 = s1 << 8;
        $i5 = i0 + 1;
        $b6 = r0[$i5];
        $s7 = $b6 & 255;
        $i8 = $i4 | $s7;
        s9 = (short) $i8;
        return s9;
    }

    static void <clinit>()
    {
        java.lang.ref.SoftReference[] $r0;

        $r0 = newarray (java.lang.ref.SoftReference)[4];
        <java.text.BreakIterator: java.lang.ref.SoftReference[] iterCache> = $r0;
        return;
    }
}
