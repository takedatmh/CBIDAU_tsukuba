public final class java.nio.file.attribute.FileTime extends java.lang.Object implements java.lang.Comparable
{
    private final long value;
    private final java.util.concurrent.TimeUnit unit;
    private java.lang.String valueAsString;
    private java.nio.file.attribute.FileTime$DaysAndNanos daysAndNanos;

    private java.nio.file.attribute.FileTime$DaysAndNanos asDaysAndNanos()
    {
        java.nio.file.attribute.FileTime r0;
        java.nio.file.attribute.FileTime$DaysAndNanos $r1, $r2, $r4;
        long $l0;
        java.util.concurrent.TimeUnit $r3;

        r0 := @this: java.nio.file.attribute.FileTime;
        $r2 = r0.<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime$DaysAndNanos daysAndNanos>;
        if $r2 != null goto label0;

        $r1 = new java.nio.file.attribute.FileTime$DaysAndNanos;
        $l0 = r0.<java.nio.file.attribute.FileTime: long value>;
        $r3 = r0.<java.nio.file.attribute.FileTime: java.util.concurrent.TimeUnit unit>;
        specialinvoke $r1.<java.nio.file.attribute.FileTime$DaysAndNanos: void <init>(long,java.util.concurrent.TimeUnit)>($l0, $r3);
        r0.<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime$DaysAndNanos daysAndNanos> = $r1;

     label0:
        $r4 = r0.<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime$DaysAndNanos daysAndNanos>;
        return $r4;
    }

    private void <init>(long, java.util.concurrent.TimeUnit)
    {
        java.nio.file.attribute.FileTime r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.nio.file.attribute.FileTime;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.concurrent.TimeUnit;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        r0.<java.nio.file.attribute.FileTime: long value> = l0;
        r0.<java.nio.file.attribute.FileTime: java.util.concurrent.TimeUnit unit> = r1;
        return;
    }

    public static java.nio.file.attribute.FileTime 'from'(long, java.util.concurrent.TimeUnit)
    {
        long l0;
        java.util.concurrent.TimeUnit r0;
        java.nio.file.attribute.FileTime $r1;

        l0 := @parameter0: long;
        r0 := @parameter1: java.util.concurrent.TimeUnit;
        $r1 = new java.nio.file.attribute.FileTime;
        specialinvoke $r1.<java.nio.file.attribute.FileTime: void <init>(long,java.util.concurrent.TimeUnit)>(l0, r0);
        return $r1;
    }

    public static java.nio.file.attribute.FileTime fromMillis(long)
    {
        long l0;
        java.nio.file.attribute.FileTime $r0;
        java.util.concurrent.TimeUnit $r1;

        l0 := @parameter0: long;
        $r0 = new java.nio.file.attribute.FileTime;
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
        specialinvoke $r0.<java.nio.file.attribute.FileTime: void <init>(long,java.util.concurrent.TimeUnit)>(l0, $r1);
        return $r0;
    }

    public long 'to'(java.util.concurrent.TimeUnit)
    {
        java.nio.file.attribute.FileTime r0;
        java.util.concurrent.TimeUnit r1, $r2;
        long $l0, $l1;

        r0 := @this: java.nio.file.attribute.FileTime;
        r1 := @parameter0: java.util.concurrent.TimeUnit;
        $l0 = r0.<java.nio.file.attribute.FileTime: long value>;
        $r2 = r0.<java.nio.file.attribute.FileTime: java.util.concurrent.TimeUnit unit>;
        $l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($l0, $r2);
        return $l1;
    }

    public long toMillis()
    {
        java.nio.file.attribute.FileTime r0;
        java.util.concurrent.TimeUnit $r1;
        long $l0, $l1;

        r0 := @this: java.nio.file.attribute.FileTime;
        $r1 = r0.<java.nio.file.attribute.FileTime: java.util.concurrent.TimeUnit unit>;
        $l0 = r0.<java.nio.file.attribute.FileTime: long value>;
        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>($l0);
        return $l1;
    }

    public boolean equals(java.lang.Object)
    {
        java.nio.file.attribute.FileTime r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: java.nio.file.attribute.FileTime;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.nio.file.attribute.FileTime;
        if $z0 == 0 goto label1;

        $r2 = (java.nio.file.attribute.FileTime) r1;
        $i0 = virtualinvoke r0.<java.nio.file.attribute.FileTime: int compareTo(java.nio.file.attribute.FileTime)>($r2);
        if $i0 != 0 goto label0;

        $z1 = 1;
        goto label2;

     label0:
        $z1 = 0;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int hashCode()
    {
        java.nio.file.attribute.FileTime r0;
        java.nio.file.attribute.FileTime$DaysAndNanos $r1;
        int $i0;

        r0 := @this: java.nio.file.attribute.FileTime;
        $r1 = specialinvoke r0.<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime$DaysAndNanos asDaysAndNanos()>();
        $i0 = virtualinvoke $r1.<java.nio.file.attribute.FileTime$DaysAndNanos: int hashCode()>();
        return $i0;
    }

    public int compareTo(java.nio.file.attribute.FileTime)
    {
        java.nio.file.attribute.FileTime r0, r1;
        java.util.concurrent.TimeUnit $r2, $r3;
        long $l0, $l1, $l4, $l5;
        byte $b2, $b3, $b6;
        java.nio.file.attribute.FileTime$DaysAndNanos $r4, $r5;
        int $i7;

        r0 := @this: java.nio.file.attribute.FileTime;
        r1 := @parameter0: java.nio.file.attribute.FileTime;
        $r2 = r0.<java.nio.file.attribute.FileTime: java.util.concurrent.TimeUnit unit>;
        $r3 = r1.<java.nio.file.attribute.FileTime: java.util.concurrent.TimeUnit unit>;
        if $r2 != $r3 goto label3;

        $l0 = r0.<java.nio.file.attribute.FileTime: long value>;
        $l1 = r1.<java.nio.file.attribute.FileTime: long value>;
        $b2 = $l0 cmp $l1;
        if $b2 >= 0 goto label0;

        $b3 = -1;
        goto label2;

     label0:
        $l4 = r0.<java.nio.file.attribute.FileTime: long value>;
        $l5 = r1.<java.nio.file.attribute.FileTime: long value>;
        $b6 = $l4 cmp $l5;
        if $b6 != 0 goto label1;

        $b3 = 0;
        goto label2;

     label1:
        $b3 = 1;

     label2:
        return $b3;

     label3:
        $r4 = specialinvoke r0.<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime$DaysAndNanos asDaysAndNanos()>();
        $r5 = specialinvoke r1.<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime$DaysAndNanos asDaysAndNanos()>();
        $i7 = virtualinvoke $r4.<java.nio.file.attribute.FileTime$DaysAndNanos: int compareTo(java.nio.file.attribute.FileTime$DaysAndNanos)>($r5);
        return $i7;
    }

    public java.lang.String toString()
    {
        java.nio.file.attribute.FileTime r0;
        java.lang.String r1, r2, r4, r6, $r11, $r19;
        long l0, l1, $l14;
        java.util.concurrent.TimeUnit $r3, $r7;
        int i2, i3, $i4, $i8, $i9, i11, $i12, $i16;
        java.lang.StringBuilder r5, $r9;
        java.nio.file.attribute.FileTime$DaysAndNanos $r8;
        byte $b5, $b6, $b7, $b15;
        char $c10, $c13;
        java.util.GregorianCalendar $r14, r17;
        java.util.TimeZone $r15;
        java.util.Locale $r16, $r21;
        java.util.Date $r18;
        java.util.Formatter $r20, $r23;
        java.lang.Object[] $r22;

        r0 := @this: java.nio.file.attribute.FileTime;
        r1 = r0.<java.nio.file.attribute.FileTime: java.lang.String valueAsString>;
        if r1 != null goto label11;

        l0 = virtualinvoke r0.<java.nio.file.attribute.FileTime: long toMillis()>();
        r2 = "";
        $r7 = r0.<java.nio.file.attribute.FileTime: java.util.concurrent.TimeUnit unit>;
        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
        $i4 = virtualinvoke $r7.<java.util.concurrent.TimeUnit: int compareTo(java.lang.Enum)>($r3);
        if $i4 >= 0 goto label7;

        $r8 = specialinvoke r0.<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime$DaysAndNanos asDaysAndNanos()>();
        l1 = virtualinvoke $r8.<java.nio.file.attribute.FileTime$DaysAndNanos: long fractionOfSecondInNanos()>();
        $b5 = l1 cmp 0L;
        if $b5 == 0 goto label7;

        $b6 = l1 cmp 0L;
        if $b6 >= 0 goto label0;

        l1 = l1 + 1000000000L;
        $b7 = l0 cmp -9223372036854775808L;
        if $b7 == 0 goto label0;

        l0 = l0 - 1L;

     label0:
        r4 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l1);
        i2 = virtualinvoke r4.<java.lang.String: int length()>();
        i3 = 9 - i2;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>(".");
        r5 = $r9;

     label1:
        $i8 = i3;
        i3 = i3 + -1;
        if $i8 <= 0 goto label2;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);
        goto label1;

     label2:
        $i9 = i2 - 1;
        $c10 = virtualinvoke r4.<java.lang.String: char charAt(int)>($i9);
        if $c10 != 48 goto label5;

        i11 = i2 + -1;

     label3:
        $i12 = i11 - 1;
        $c13 = virtualinvoke r4.<java.lang.String: char charAt(int)>($i12);
        if $c13 != 48 goto label4;

        i11 = i11 + -1;
        goto label3;

     label4:
        $r11 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, i11);
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        goto label6;

     label5:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

     label6:
        r2 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label7:
        $r14 = new java.util.GregorianCalendar;
        $r15 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");
        $r16 = <java.util.Locale: java.util.Locale ROOT>;
        specialinvoke $r14.<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>($r15, $r16);
        r17 = $r14;
        $l14 = r0.<java.nio.file.attribute.FileTime: long value>;
        $b15 = $l14 cmp 0L;
        if $b15 >= 0 goto label8;

        $r18 = new java.util.Date;
        specialinvoke $r18.<java.util.Date: void <init>(long)>(-9223372036854775808L);
        virtualinvoke r17.<java.util.GregorianCalendar: void setGregorianChange(java.util.Date)>($r18);

     label8:
        virtualinvoke r17.<java.util.GregorianCalendar: void setTimeInMillis(long)>(l0);
        $i16 = virtualinvoke r17.<java.util.GregorianCalendar: int get(int)>(0);
        if $i16 != 0 goto label9;

        $r19 = "-";
        goto label10;

     label9:
        $r19 = "";

     label10:
        r6 = $r19;
        $r20 = new java.util.Formatter;
        $r21 = <java.util.Locale: java.util.Locale ROOT>;
        specialinvoke $r20.<java.util.Formatter: void <init>(java.util.Locale)>($r21);
        $r22 = newarray (java.lang.Object)[5];
        $r22[0] = r6;
        $r22[1] = r17;
        $r22[2] = r17;
        $r22[3] = r17;
        $r22[4] = r2;
        $r23 = virtualinvoke $r20.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s%tFT%tR:%tS%sZ", $r22);
        r1 = virtualinvoke $r23.<java.util.Formatter: java.lang.String toString()>();
        r0.<java.nio.file.attribute.FileTime: java.lang.String valueAsString> = r1;

     label11:
        return r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.nio.file.attribute.FileTime r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.nio.file.attribute.FileTime;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.nio.file.attribute.FileTime) r1;
        $i0 = virtualinvoke r0.<java.nio.file.attribute.FileTime: int compareTo(java.nio.file.attribute.FileTime)>($r2);
        return $i0;
    }
}
