public class org.apache.coyote.ajp.AbstractAjpProcessor$SocketInputBuffer extends java.lang.Object implements org.apache.coyote.InputBuffer
{
    final org.apache.coyote.ajp.AbstractAjpProcessor this$0;

    protected void <init>(org.apache.coyote.ajp.AbstractAjpProcessor)
    {
        org.apache.coyote.ajp.AbstractAjpProcessor$SocketInputBuffer r0;
        org.apache.coyote.ajp.AbstractAjpProcessor r1;

        r0 := @this: org.apache.coyote.ajp.AbstractAjpProcessor$SocketInputBuffer;
        r1 := @parameter0: org.apache.coyote.ajp.AbstractAjpProcessor;
        r0.<org.apache.coyote.ajp.AbstractAjpProcessor$SocketInputBuffer: org.apache.coyote.ajp.AbstractAjpProcessor this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public int doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request) throws java.io.IOException
    {
        org.apache.coyote.ajp.AbstractAjpProcessor$SocketInputBuffer r0;
        org.apache.tomcat.util.buf.ByteChunk r1, r3;
        org.apache.coyote.Request r2;
        org.apache.coyote.ajp.AbstractAjpProcessor $r4, $r5, $r6, $r7, $r8, $r9, $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        long $l0;
        byte $b1;
        org.apache.tomcat.util.buf.MessageBytes $r10;
        byte[] $r11;
        int $i2, $i3, $i4;

        r0 := @this: org.apache.coyote.ajp.AbstractAjpProcessor$SocketInputBuffer;
        r1 := @parameter0: org.apache.tomcat.util.buf.ByteChunk;
        r2 := @parameter1: org.apache.coyote.Request;
        $r4 = r0.<org.apache.coyote.ajp.AbstractAjpProcessor$SocketInputBuffer: org.apache.coyote.ajp.AbstractAjpProcessor this$0>;
        $z0 = $r4.<org.apache.coyote.ajp.AbstractAjpProcessor: boolean endOfStream>;
        if $z0 == 0 goto label0;

        return -1;

     label0:
        $r5 = r0.<org.apache.coyote.ajp.AbstractAjpProcessor$SocketInputBuffer: org.apache.coyote.ajp.AbstractAjpProcessor this$0>;
        $z1 = $r5.<org.apache.coyote.ajp.AbstractAjpProcessor: boolean first>;
        if $z1 == 0 goto label1;

        $l0 = virtualinvoke r2.<org.apache.coyote.Request: long getContentLengthLong()>();
        $b1 = $l0 cmp 0L;
        if $b1 <= 0 goto label1;

        $r6 = r0.<org.apache.coyote.ajp.AbstractAjpProcessor$SocketInputBuffer: org.apache.coyote.ajp.AbstractAjpProcessor this$0>;
        $z2 = virtualinvoke $r6.<org.apache.coyote.ajp.AbstractAjpProcessor: boolean receive()>();
        if $z2 != 0 goto label2;

        return 0;

     label1:
        $r7 = r0.<org.apache.coyote.ajp.AbstractAjpProcessor$SocketInputBuffer: org.apache.coyote.ajp.AbstractAjpProcessor this$0>;
        $z3 = $r7.<org.apache.coyote.ajp.AbstractAjpProcessor: boolean empty>;
        if $z3 == 0 goto label2;

        $r8 = r0.<org.apache.coyote.ajp.AbstractAjpProcessor$SocketInputBuffer: org.apache.coyote.ajp.AbstractAjpProcessor this$0>;
        $z4 = virtualinvoke $r8.<org.apache.coyote.ajp.AbstractAjpProcessor: boolean refillReadBuffer()>();
        if $z4 != 0 goto label2;

        return -1;

     label2:
        $r9 = r0.<org.apache.coyote.ajp.AbstractAjpProcessor$SocketInputBuffer: org.apache.coyote.ajp.AbstractAjpProcessor this$0>;
        $r10 = $r9.<org.apache.coyote.ajp.AbstractAjpProcessor: org.apache.tomcat.util.buf.MessageBytes bodyBytes>;
        r3 = virtualinvoke $r10.<org.apache.tomcat.util.buf.MessageBytes: org.apache.tomcat.util.buf.ByteChunk getByteChunk()>();
        $r11 = virtualinvoke r3.<org.apache.tomcat.util.buf.ByteChunk: byte[] getBuffer()>();
        $i2 = virtualinvoke r3.<org.apache.tomcat.util.buf.ByteChunk: int getStart()>();
        $i3 = virtualinvoke r3.<org.apache.tomcat.util.buf.ByteChunk: int getLength()>();
        virtualinvoke r1.<org.apache.tomcat.util.buf.ByteChunk: void setBytes(byte[],int,int)>($r11, $i2, $i3);
        $r12 = r0.<org.apache.coyote.ajp.AbstractAjpProcessor$SocketInputBuffer: org.apache.coyote.ajp.AbstractAjpProcessor this$0>;
        $r12.<org.apache.coyote.ajp.AbstractAjpProcessor: boolean empty> = 1;
        $i4 = virtualinvoke r1.<org.apache.tomcat.util.buf.ByteChunk: int getLength()>();
        return $i4;
    }
}
