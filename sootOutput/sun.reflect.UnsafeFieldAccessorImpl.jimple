abstract class sun.reflect.UnsafeFieldAccessorImpl extends sun.reflect.FieldAccessorImpl
{
    static final sun.misc.Unsafe unsafe;
    protected final java.lang.reflect.Field field;
    protected final int fieldOffset;
    protected final boolean isFinal;

    void <init>(java.lang.reflect.Field)
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.reflect.Field r1;
        sun.misc.Unsafe $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        r1 := @parameter0: java.lang.reflect.Field;
        specialinvoke r0.<sun.reflect.FieldAccessorImpl: void <init>()>();
        r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.reflect.Field field> = r1;
        $r2 = <sun.reflect.UnsafeFieldAccessorImpl: sun.misc.Unsafe unsafe>;
        $i0 = virtualinvoke $r2.<sun.misc.Unsafe: int fieldOffset(java.lang.reflect.Field)>(r1);
        r0.<sun.reflect.UnsafeFieldAccessorImpl: int fieldOffset> = $i0;
        $i1 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>();
        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i1);
        r0.<sun.reflect.UnsafeFieldAccessorImpl: boolean isFinal> = $z0;
        return;
    }

    protected void ensureObj(java.lang.Object)
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.Object r1;
        java.lang.reflect.Field $r2;
        java.lang.Class $r3, $r4;
        boolean $z0;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.reflect.Field field>;
        $r3 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);
        if $z0 != 0 goto label0;

        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.Object)>(r1);

     label0:
        return;
    }

    private java.lang.String getQualifiedFieldName()
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.StringBuilder $r1, $r5, $r6, $r9;
        java.lang.reflect.Field $r2, $r7;
        java.lang.Class $r3;
        java.lang.String $r4, $r8, $r10;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.reflect.Field field>;
        $r3 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();
        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r7 = r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.reflect.Field field>;
        $r8 = virtualinvoke $r7.<java.lang.reflect.Field: java.lang.String getName()>();
        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r10;
    }

    protected java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.String r1, $r7, $r10, $r14;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r8, $r9, $r11, $r12, $r13;
        java.lang.reflect.Field $r5;
        java.lang.Class $r6;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        r1 := @parameter0: java.lang.String;
        $r2 = new java.lang.IllegalArgumentException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to get ");
        $r5 = r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.reflect.Field field>;
        $r6 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.Class getType()>();
        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();
        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" field \"");
        $r10 = specialinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.String getQualifiedFieldName()>();
        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" with illegal data type conversion to ");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);
        return $r2;
    }

    protected void throwFinalFieldIllegalAccessException(java.lang.String, java.lang.String) throws java.lang.IllegalAccessException
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.String r1, r2, $r4;
        java.lang.IllegalAccessException $r3;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        $r3 = new java.lang.IllegalAccessException;
        $r4 = virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.String getSetMessage(java.lang.String,java.lang.String)>(r1, r2);
        specialinvoke $r3.<java.lang.IllegalAccessException: void <init>(java.lang.String)>($r4);
        throw $r3;
    }

    protected void throwFinalFieldIllegalAccessException(java.lang.Object) throws java.lang.IllegalAccessException
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.Object r1;
        java.lang.Class $r3;
        java.lang.String $r4;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        r1 := @parameter0: java.lang.Object;
        if r1 == null goto label0;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();
        goto label1;

     label0:
        $r4 = "";

     label1:
        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>($r4, "");
        return;
    }

    protected void throwFinalFieldIllegalAccessException(boolean) throws java.lang.IllegalAccessException
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        boolean z0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        z0 := @parameter0: boolean;
        $r1 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(z0);
        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>("boolean", $r1);
        return;
    }

    protected void throwFinalFieldIllegalAccessException(char) throws java.lang.IllegalAccessException
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        char c0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        c0 := @parameter0: char;
        $r1 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(c0);
        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>("char", $r1);
        return;
    }

    protected void throwFinalFieldIllegalAccessException(byte) throws java.lang.IllegalAccessException
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        byte b0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        b0 := @parameter0: byte;
        $r1 = staticinvoke <java.lang.Byte: java.lang.String toString(byte)>(b0);
        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>("byte", $r1);
        return;
    }

    protected void throwFinalFieldIllegalAccessException(short) throws java.lang.IllegalAccessException
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        short s0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        s0 := @parameter0: short;
        $r1 = staticinvoke <java.lang.Short: java.lang.String toString(short)>(s0);
        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>("short", $r1);
        return;
    }

    protected void throwFinalFieldIllegalAccessException(int) throws java.lang.IllegalAccessException
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        i0 := @parameter0: int;
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);
        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>("int", $r1);
        return;
    }

    protected void throwFinalFieldIllegalAccessException(long) throws java.lang.IllegalAccessException
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        long l0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        l0 := @parameter0: long;
        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);
        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>("long", $r1);
        return;
    }

    protected void throwFinalFieldIllegalAccessException(float) throws java.lang.IllegalAccessException
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        float f0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        f0 := @parameter0: float;
        $r1 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f0);
        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>("float", $r1);
        return;
    }

    protected void throwFinalFieldIllegalAccessException(double) throws java.lang.IllegalAccessException
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        double d0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        d0 := @parameter0: double;
        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);
        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>("double", $r1);
        return;
    }

    protected java.lang.IllegalArgumentException newGetBooleanIllegalArgumentException()
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        $r1 = virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>("boolean");
        return $r1;
    }

    protected java.lang.IllegalArgumentException newGetByteIllegalArgumentException()
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        $r1 = virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>("byte");
        return $r1;
    }

    protected java.lang.IllegalArgumentException newGetCharIllegalArgumentException()
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        $r1 = virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>("char");
        return $r1;
    }

    protected java.lang.IllegalArgumentException newGetShortIllegalArgumentException()
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        $r1 = virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>("short");
        return $r1;
    }

    protected java.lang.IllegalArgumentException newGetIntIllegalArgumentException()
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        $r1 = virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>("int");
        return $r1;
    }

    protected java.lang.IllegalArgumentException newGetLongIllegalArgumentException()
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        $r1 = virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>("long");
        return $r1;
    }

    protected java.lang.IllegalArgumentException newGetFloatIllegalArgumentException()
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        $r1 = virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>("float");
        return $r1;
    }

    protected java.lang.IllegalArgumentException newGetDoubleIllegalArgumentException()
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        $r1 = virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>("double");
        return $r1;
    }

    protected java.lang.String getSetMessage(java.lang.String, java.lang.String)
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.String r1, r2, r3, $r16, $r19, r22, r29;
        java.lang.reflect.Field $r4, $r14;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r17, $r18, $r20, $r21, $r23, $r24, $r25, $r26, $r27, $r28, $r30, $r31, $r32, $r33, $r34, $r35;
        java.lang.Class $r15;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 = "Can not set";
        $r4 = r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.reflect.Field field>;
        $i0 = virtualinvoke $r4.<java.lang.reflect.Field: int getModifiers()>();
        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);
        if $z0 == 0 goto label0;

        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" static");
        r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label0:
        $z1 = r0.<sun.reflect.UnsafeFieldAccessorImpl: boolean isFinal>;
        if $z1 == 0 goto label1;

        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" final");
        r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r14 = r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.reflect.Field field>;
        $r15 = virtualinvoke $r14.<java.lang.reflect.Field: java.lang.Class getType()>();
        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();
        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" field ");
        $r19 = specialinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.String getQualifiedFieldName()>();
        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");
        r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
        $i1 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i1 <= 0 goto label2;

        $r23 = new java.lang.StringBuilder;
        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();
        goto label4;

     label2:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i2 <= 0 goto label3;

        $r30 = new java.lang.StringBuilder;
        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        r29 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();
        goto label4;

     label3:
        $r33 = new java.lang.StringBuilder;
        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);
        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null value");
        r29 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        return r29;
    }

    protected void throwSetIllegalArgumentException(java.lang.String, java.lang.String)
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.String r1, r2, $r4;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        $r3 = new java.lang.IllegalArgumentException;
        $r4 = virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: java.lang.String getSetMessage(java.lang.String,java.lang.String)>(r1, r2);
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);
        throw $r3;
    }

    protected void throwSetIllegalArgumentException(java.lang.Object)
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.Object r1;
        java.lang.Class $r3;
        java.lang.String $r4;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        r1 := @parameter0: java.lang.Object;
        if r1 == null goto label0;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();
        goto label1;

     label0:
        $r4 = "";

     label1:
        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>($r4, "");
        return;
    }

    protected void throwSetIllegalArgumentException(boolean)
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        boolean z0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        z0 := @parameter0: boolean;
        $r1 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(z0);
        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>("boolean", $r1);
        return;
    }

    protected void throwSetIllegalArgumentException(byte)
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        byte b0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        b0 := @parameter0: byte;
        $r1 = staticinvoke <java.lang.Byte: java.lang.String toString(byte)>(b0);
        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>("byte", $r1);
        return;
    }

    protected void throwSetIllegalArgumentException(char)
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        char c0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        c0 := @parameter0: char;
        $r1 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(c0);
        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>("char", $r1);
        return;
    }

    protected void throwSetIllegalArgumentException(short)
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        short s0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        s0 := @parameter0: short;
        $r1 = staticinvoke <java.lang.Short: java.lang.String toString(short)>(s0);
        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>("short", $r1);
        return;
    }

    protected void throwSetIllegalArgumentException(int)
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        i0 := @parameter0: int;
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);
        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>("int", $r1);
        return;
    }

    protected void throwSetIllegalArgumentException(long)
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        long l0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        l0 := @parameter0: long;
        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);
        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>("long", $r1);
        return;
    }

    protected void throwSetIllegalArgumentException(float)
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        float f0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        f0 := @parameter0: float;
        $r1 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f0);
        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>("float", $r1);
        return;
    }

    protected void throwSetIllegalArgumentException(double)
    {
        sun.reflect.UnsafeFieldAccessorImpl r0;
        double d0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.UnsafeFieldAccessorImpl;
        d0 := @parameter0: double;
        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);
        virtualinvoke r0.<sun.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>("double", $r1);
        return;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0;

        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <sun.reflect.UnsafeFieldAccessorImpl: sun.misc.Unsafe unsafe> = $r0;
        return;
    }
}
