class java.nio.HeapByteBuffer extends java.nio.ByteBuffer
{

    void <init>(int, int)
    {
        java.nio.HeapByteBuffer r0;
        int i0, i1;
        byte[] $r1;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = newarray (byte)[i0];
        specialinvoke r0.<java.nio.ByteBuffer: void <init>(int,int,int,int,byte[],int)>(-1, 0, i1, i0, $r1, 0);
        return;
    }

    void <init>(byte[], int, int)
    {
        java.nio.HeapByteBuffer r0;
        byte[] r1;
        int i0, i1, $i2, $i3;

        r0 := @this: java.nio.HeapByteBuffer;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = i0 + i1;
        $i3 = lengthof r1;
        specialinvoke r0.<java.nio.ByteBuffer: void <init>(int,int,int,int,byte[],int)>(-1, i0, $i2, $i3, r1, 0);
        return;
    }

    protected void <init>(byte[], int, int, int, int, int)
    {
        java.nio.HeapByteBuffer r0;
        byte[] r1;
        int i0, i1, i2, i3, i4;

        r0 := @this: java.nio.HeapByteBuffer;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        specialinvoke r0.<java.nio.ByteBuffer: void <init>(int,int,int,int,byte[],int)>(i0, i1, i2, i3, r1, i4);
        return;
    }

    public java.nio.ByteBuffer slice()
    {
        java.nio.HeapByteBuffer r0, $r1;
        byte[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapByteBuffer;
        $r1 = new java.nio.HeapByteBuffer;
        $r2 = r0.<java.nio.HeapByteBuffer: byte[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapByteBuffer: int remaining()>();
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int remaining()>();
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int position()>();
        $i3 = r0.<java.nio.HeapByteBuffer: int offset>;
        $i4 = $i2 + $i3;
        specialinvoke $r1.<java.nio.HeapByteBuffer: void <init>(byte[],int,int,int,int,int)>($r2, -1, 0, $i0, $i1, $i4);
        return $r1;
    }

    public java.nio.ByteBuffer duplicate()
    {
        java.nio.HeapByteBuffer r0, $r1;
        byte[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapByteBuffer;
        $r1 = new java.nio.HeapByteBuffer;
        $r2 = r0.<java.nio.HeapByteBuffer: byte[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapByteBuffer: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int position()>();
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.HeapByteBuffer: int capacity()>();
        $i4 = r0.<java.nio.HeapByteBuffer: int offset>;
        specialinvoke $r1.<java.nio.HeapByteBuffer: void <init>(byte[],int,int,int,int,int)>($r2, $i0, $i1, $i2, $i3, $i4);
        return $r1;
    }

    public java.nio.ByteBuffer asReadOnlyBuffer()
    {
        java.nio.HeapByteBuffer r0;
        java.nio.HeapByteBufferR $r1;
        byte[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapByteBuffer;
        $r1 = new java.nio.HeapByteBufferR;
        $r2 = r0.<java.nio.HeapByteBuffer: byte[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapByteBuffer: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int position()>();
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.HeapByteBuffer: int capacity()>();
        $i4 = r0.<java.nio.HeapByteBuffer: int offset>;
        specialinvoke $r1.<java.nio.HeapByteBufferR: void <init>(byte[],int,int,int,int,int)>($r2, $i0, $i1, $i2, $i3, $i4);
        return $r1;
    }

    protected int ix(int)
    {
        java.nio.HeapByteBuffer r0;
        int i0, $i1, $i2;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        $i1 = r0.<java.nio.HeapByteBuffer: int offset>;
        $i2 = i0 + $i1;
        return $i2;
    }

    public byte get()
    {
        java.nio.HeapByteBuffer r0;
        byte[] $r1;
        int $i0, $i1;
        byte $b2;

        r0 := @this: java.nio.HeapByteBuffer;
        $r1 = r0.<java.nio.HeapByteBuffer: byte[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapByteBuffer: int nextGetIndex()>();
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i0);
        $b2 = $r1[$i1];
        return $b2;
    }

    public byte get(int)
    {
        java.nio.HeapByteBuffer r0;
        int i0, $i1, $i2;
        byte[] $r1;
        byte $b3;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        $r1 = r0.<java.nio.HeapByteBuffer: byte[] hb>;
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int checkIndex(int)>(i0);
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i1);
        $b3 = $r1[$i2];
        return $b3;
    }

    public java.nio.ByteBuffer get(byte[], int, int)
    {
        java.nio.HeapByteBuffer r0;
        byte[] r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.nio.BufferUnderflowException $r2;

        r0 := @this: java.nio.HeapByteBuffer;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = lengthof r1;
        staticinvoke <java.nio.HeapByteBuffer: void checkBounds(int,int,int)>(i0, i1, $i2);
        $i3 = virtualinvoke r0.<java.nio.HeapByteBuffer: int remaining()>();
        if i1 <= $i3 goto label0;

        $r2 = new java.nio.BufferUnderflowException;
        specialinvoke $r2.<java.nio.BufferUnderflowException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.nio.HeapByteBuffer: byte[] hb>;
        $i4 = virtualinvoke r0.<java.nio.HeapByteBuffer: int position()>();
        $i5 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i4);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i5, r1, i0, i1);
        $i6 = virtualinvoke r0.<java.nio.HeapByteBuffer: int position()>();
        $i7 = $i6 + i1;
        virtualinvoke r0.<java.nio.HeapByteBuffer: java.nio.Buffer position(int)>($i7);
        return r0;
    }

    public boolean isDirect()
    {
        java.nio.HeapByteBuffer r0;

        r0 := @this: java.nio.HeapByteBuffer;
        return 0;
    }

    public boolean isReadOnly()
    {
        java.nio.HeapByteBuffer r0;

        r0 := @this: java.nio.HeapByteBuffer;
        return 0;
    }

    public java.nio.ByteBuffer put(byte)
    {
        java.nio.HeapByteBuffer r0;
        byte b0;
        byte[] $r1;
        int $i1, $i2;

        r0 := @this: java.nio.HeapByteBuffer;
        b0 := @parameter0: byte;
        $r1 = r0.<java.nio.HeapByteBuffer: byte[] hb>;
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int nextPutIndex()>();
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i1);
        $r1[$i2] = b0;
        return r0;
    }

    public java.nio.ByteBuffer put(int, byte)
    {
        java.nio.HeapByteBuffer r0;
        int i0, $i2, $i3;
        byte b1;
        byte[] $r1;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        b1 := @parameter1: byte;
        $r1 = r0.<java.nio.HeapByteBuffer: byte[] hb>;
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int checkIndex(int)>(i0);
        $i3 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i2);
        $r1[$i3] = b1;
        return r0;
    }

    public java.nio.ByteBuffer put(byte[], int, int)
    {
        java.nio.HeapByteBuffer r0;
        byte[] r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.nio.BufferOverflowException $r2;

        r0 := @this: java.nio.HeapByteBuffer;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = lengthof r1;
        staticinvoke <java.nio.HeapByteBuffer: void checkBounds(int,int,int)>(i0, i1, $i2);
        $i3 = virtualinvoke r0.<java.nio.HeapByteBuffer: int remaining()>();
        if i1 <= $i3 goto label0;

        $r2 = new java.nio.BufferOverflowException;
        specialinvoke $r2.<java.nio.BufferOverflowException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.nio.HeapByteBuffer: byte[] hb>;
        $i4 = virtualinvoke r0.<java.nio.HeapByteBuffer: int position()>();
        $i5 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i4);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r3, $i5, i1);
        $i6 = virtualinvoke r0.<java.nio.HeapByteBuffer: int position()>();
        $i7 = $i6 + i1;
        virtualinvoke r0.<java.nio.HeapByteBuffer: java.nio.Buffer position(int)>($i7);
        return r0;
    }

    public java.nio.ByteBuffer put(java.nio.ByteBuffer)
    {
        java.nio.HeapByteBuffer r0, r2;
        java.nio.ByteBuffer r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, $i15;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;
        java.nio.BufferOverflowException $r4, $r9;
        byte[] $r5, $r6, $r10;

        r0 := @this: java.nio.HeapByteBuffer;
        r1 := @parameter0: java.nio.ByteBuffer;
        $z0 = r1 instanceof java.nio.HeapByteBuffer;
        if $z0 == 0 goto label2;

        if r1 != r0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r3;

     label0:
        r2 = (java.nio.HeapByteBuffer) r1;
        i0 = virtualinvoke r2.<java.nio.HeapByteBuffer: int remaining()>();
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int remaining()>();
        if i0 <= $i1 goto label1;

        $r4 = new java.nio.BufferOverflowException;
        specialinvoke $r4.<java.nio.BufferOverflowException: void <init>()>();
        throw $r4;

     label1:
        $r5 = r2.<java.nio.HeapByteBuffer: byte[] hb>;
        $i2 = virtualinvoke r2.<java.nio.HeapByteBuffer: int position()>();
        $i3 = virtualinvoke r2.<java.nio.HeapByteBuffer: int ix(int)>($i2);
        $r6 = r0.<java.nio.HeapByteBuffer: byte[] hb>;
        $i4 = virtualinvoke r0.<java.nio.HeapByteBuffer: int position()>();
        $i5 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i4);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i3, $r6, $i5, i0);
        $i6 = virtualinvoke r2.<java.nio.HeapByteBuffer: int position()>();
        $i7 = $i6 + i0;
        virtualinvoke r2.<java.nio.HeapByteBuffer: java.nio.Buffer position(int)>($i7);
        $i8 = virtualinvoke r0.<java.nio.HeapByteBuffer: int position()>();
        $i9 = $i8 + i0;
        virtualinvoke r0.<java.nio.HeapByteBuffer: java.nio.Buffer position(int)>($i9);
        goto label5;

     label2:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isDirect()>();
        if $z1 == 0 goto label4;

        i10 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();
        $i11 = virtualinvoke r0.<java.nio.HeapByteBuffer: int remaining()>();
        if i10 <= $i11 goto label3;

        $r9 = new java.nio.BufferOverflowException;
        specialinvoke $r9.<java.nio.BufferOverflowException: void <init>()>();
        throw $r9;

     label3:
        $r10 = r0.<java.nio.HeapByteBuffer: byte[] hb>;
        $i12 = virtualinvoke r0.<java.nio.HeapByteBuffer: int position()>();
        $i13 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i12);
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r10, $i13, i10);
        $i14 = virtualinvoke r0.<java.nio.HeapByteBuffer: int position()>();
        $i15 = $i14 + i10;
        virtualinvoke r0.<java.nio.HeapByteBuffer: java.nio.Buffer position(int)>($i15);
        goto label5;

     label4:
        specialinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r1);

     label5:
        return r0;
    }

    public java.nio.ByteBuffer compact()
    {
        java.nio.HeapByteBuffer r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: java.nio.HeapByteBuffer;
        $r1 = r0.<java.nio.HeapByteBuffer: byte[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapByteBuffer: int position()>();
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i0);
        $r2 = r0.<java.nio.HeapByteBuffer: byte[] hb>;
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>(0);
        $i3 = virtualinvoke r0.<java.nio.HeapByteBuffer: int remaining()>();
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, $r2, $i2, $i3);
        $i4 = virtualinvoke r0.<java.nio.HeapByteBuffer: int remaining()>();
        virtualinvoke r0.<java.nio.HeapByteBuffer: java.nio.Buffer position(int)>($i4);
        $i5 = virtualinvoke r0.<java.nio.HeapByteBuffer: int capacity()>();
        virtualinvoke r0.<java.nio.HeapByteBuffer: java.nio.Buffer limit(int)>($i5);
        virtualinvoke r0.<java.nio.HeapByteBuffer: void discardMark()>();
        return r0;
    }

    byte _get(int)
    {
        java.nio.HeapByteBuffer r0;
        int i0;
        byte[] $r1;
        byte $b1;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        $r1 = r0.<java.nio.HeapByteBuffer: byte[] hb>;
        $b1 = $r1[i0];
        return $b1;
    }

    void _put(int, byte)
    {
        java.nio.HeapByteBuffer r0;
        int i0;
        byte b1;
        byte[] $r1;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        b1 := @parameter1: byte;
        $r1 = r0.<java.nio.HeapByteBuffer: byte[] hb>;
        $r1[i0] = b1;
        return;
    }

    public char getChar()
    {
        java.nio.HeapByteBuffer r0;
        int $i0, $i1;
        boolean $z0;
        char $c2;

        r0 := @this: java.nio.HeapByteBuffer;
        $i0 = virtualinvoke r0.<java.nio.HeapByteBuffer: int nextGetIndex(int)>(2);
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i0);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        $c2 = staticinvoke <java.nio.Bits: char getChar(java.nio.ByteBuffer,int,boolean)>(r0, $i1, $z0);
        return $c2;
    }

    public char getChar(int)
    {
        java.nio.HeapByteBuffer r0;
        int i0, $i1, $i2;
        boolean $z0;
        char $c3;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int checkIndex(int,int)>(i0, 2);
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i1);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        $c3 = staticinvoke <java.nio.Bits: char getChar(java.nio.ByteBuffer,int,boolean)>(r0, $i2, $z0);
        return $c3;
    }

    public java.nio.ByteBuffer putChar(char)
    {
        java.nio.HeapByteBuffer r0;
        char c0;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: java.nio.HeapByteBuffer;
        c0 := @parameter0: char;
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int nextPutIndex(int)>(2);
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i1);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        staticinvoke <java.nio.Bits: void putChar(java.nio.ByteBuffer,int,char,boolean)>(r0, $i2, c0, $z0);
        return r0;
    }

    public java.nio.ByteBuffer putChar(int, char)
    {
        java.nio.HeapByteBuffer r0;
        int i0, $i2, $i3;
        char c1;
        boolean $z0;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        c1 := @parameter1: char;
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int checkIndex(int,int)>(i0, 2);
        $i3 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i2);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        staticinvoke <java.nio.Bits: void putChar(java.nio.ByteBuffer,int,char,boolean)>(r0, $i3, c1, $z0);
        return r0;
    }

    public java.nio.CharBuffer asCharBuffer()
    {
        java.nio.HeapByteBuffer r0;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        java.nio.CharBuffer $r1;
        java.nio.ByteBufferAsCharBufferB r2;
        java.nio.ByteBufferAsCharBufferL r3;

        r0 := @this: java.nio.HeapByteBuffer;
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int remaining()>();
        i0 = $i2 >> 1;
        $i3 = r0.<java.nio.HeapByteBuffer: int offset>;
        $i4 = virtualinvoke r0.<java.nio.HeapByteBuffer: int position()>();
        i1 = $i3 + $i4;
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        if $z0 == 0 goto label0;

        r2 = new java.nio.ByteBufferAsCharBufferB;
        $r1 = r2;
        specialinvoke r2.<java.nio.ByteBufferAsCharBufferB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);
        goto label1;

     label0:
        r3 = new java.nio.ByteBufferAsCharBufferL;
        $r1 = r3;
        specialinvoke r3.<java.nio.ByteBufferAsCharBufferL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);

     label1:
        return $r1;
    }

    public short getShort()
    {
        java.nio.HeapByteBuffer r0;
        int $i0, $i1;
        boolean $z0;
        short $s2;

        r0 := @this: java.nio.HeapByteBuffer;
        $i0 = virtualinvoke r0.<java.nio.HeapByteBuffer: int nextGetIndex(int)>(2);
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i0);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        $s2 = staticinvoke <java.nio.Bits: short getShort(java.nio.ByteBuffer,int,boolean)>(r0, $i1, $z0);
        return $s2;
    }

    public short getShort(int)
    {
        java.nio.HeapByteBuffer r0;
        int i0, $i1, $i2;
        boolean $z0;
        short $s3;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int checkIndex(int,int)>(i0, 2);
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i1);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        $s3 = staticinvoke <java.nio.Bits: short getShort(java.nio.ByteBuffer,int,boolean)>(r0, $i2, $z0);
        return $s3;
    }

    public java.nio.ByteBuffer putShort(short)
    {
        java.nio.HeapByteBuffer r0;
        short s0;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: java.nio.HeapByteBuffer;
        s0 := @parameter0: short;
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int nextPutIndex(int)>(2);
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i1);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        staticinvoke <java.nio.Bits: void putShort(java.nio.ByteBuffer,int,short,boolean)>(r0, $i2, s0, $z0);
        return r0;
    }

    public java.nio.ByteBuffer putShort(int, short)
    {
        java.nio.HeapByteBuffer r0;
        int i0, $i2, $i3;
        short s1;
        boolean $z0;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        s1 := @parameter1: short;
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int checkIndex(int,int)>(i0, 2);
        $i3 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i2);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        staticinvoke <java.nio.Bits: void putShort(java.nio.ByteBuffer,int,short,boolean)>(r0, $i3, s1, $z0);
        return r0;
    }

    public java.nio.ShortBuffer asShortBuffer()
    {
        java.nio.HeapByteBuffer r0;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        java.nio.ShortBuffer $r1;
        java.nio.ByteBufferAsShortBufferB r2;
        java.nio.ByteBufferAsShortBufferL r3;

        r0 := @this: java.nio.HeapByteBuffer;
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int remaining()>();
        i0 = $i2 >> 1;
        $i3 = r0.<java.nio.HeapByteBuffer: int offset>;
        $i4 = virtualinvoke r0.<java.nio.HeapByteBuffer: int position()>();
        i1 = $i3 + $i4;
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        if $z0 == 0 goto label0;

        r2 = new java.nio.ByteBufferAsShortBufferB;
        $r1 = r2;
        specialinvoke r2.<java.nio.ByteBufferAsShortBufferB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);
        goto label1;

     label0:
        r3 = new java.nio.ByteBufferAsShortBufferL;
        $r1 = r3;
        specialinvoke r3.<java.nio.ByteBufferAsShortBufferL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);

     label1:
        return $r1;
    }

    public int getInt()
    {
        java.nio.HeapByteBuffer r0;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: java.nio.HeapByteBuffer;
        $i0 = virtualinvoke r0.<java.nio.HeapByteBuffer: int nextGetIndex(int)>(4);
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i0);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        $i2 = staticinvoke <java.nio.Bits: int getInt(java.nio.ByteBuffer,int,boolean)>(r0, $i1, $z0);
        return $i2;
    }

    public int getInt(int)
    {
        java.nio.HeapByteBuffer r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int checkIndex(int,int)>(i0, 4);
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i1);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        $i3 = staticinvoke <java.nio.Bits: int getInt(java.nio.ByteBuffer,int,boolean)>(r0, $i2, $z0);
        return $i3;
    }

    public java.nio.ByteBuffer putInt(int)
    {
        java.nio.HeapByteBuffer r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int nextPutIndex(int)>(4);
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i1);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        staticinvoke <java.nio.Bits: void putInt(java.nio.ByteBuffer,int,int,boolean)>(r0, $i2, i0, $z0);
        return r0;
    }

    public java.nio.ByteBuffer putInt(int, int)
    {
        java.nio.HeapByteBuffer r0;
        int i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int checkIndex(int,int)>(i0, 4);
        $i3 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i2);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        staticinvoke <java.nio.Bits: void putInt(java.nio.ByteBuffer,int,int,boolean)>(r0, $i3, i1, $z0);
        return r0;
    }

    public java.nio.IntBuffer asIntBuffer()
    {
        java.nio.HeapByteBuffer r0;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        java.nio.IntBuffer $r1;
        java.nio.ByteBufferAsIntBufferB r2;
        java.nio.ByteBufferAsIntBufferL r3;

        r0 := @this: java.nio.HeapByteBuffer;
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int remaining()>();
        i0 = $i2 >> 2;
        $i3 = r0.<java.nio.HeapByteBuffer: int offset>;
        $i4 = virtualinvoke r0.<java.nio.HeapByteBuffer: int position()>();
        i1 = $i3 + $i4;
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        if $z0 == 0 goto label0;

        r2 = new java.nio.ByteBufferAsIntBufferB;
        $r1 = r2;
        specialinvoke r2.<java.nio.ByteBufferAsIntBufferB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);
        goto label1;

     label0:
        r3 = new java.nio.ByteBufferAsIntBufferL;
        $r1 = r3;
        specialinvoke r3.<java.nio.ByteBufferAsIntBufferL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);

     label1:
        return $r1;
    }

    public long getLong()
    {
        java.nio.HeapByteBuffer r0;
        int $i0, $i1;
        boolean $z0;
        long $l2;

        r0 := @this: java.nio.HeapByteBuffer;
        $i0 = virtualinvoke r0.<java.nio.HeapByteBuffer: int nextGetIndex(int)>(8);
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i0);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        $l2 = staticinvoke <java.nio.Bits: long getLong(java.nio.ByteBuffer,int,boolean)>(r0, $i1, $z0);
        return $l2;
    }

    public long getLong(int)
    {
        java.nio.HeapByteBuffer r0;
        int i0, $i1, $i2;
        boolean $z0;
        long $l3;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int checkIndex(int,int)>(i0, 8);
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i1);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        $l3 = staticinvoke <java.nio.Bits: long getLong(java.nio.ByteBuffer,int,boolean)>(r0, $i2, $z0);
        return $l3;
    }

    public java.nio.ByteBuffer putLong(long)
    {
        java.nio.HeapByteBuffer r0;
        long l0;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: java.nio.HeapByteBuffer;
        l0 := @parameter0: long;
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int nextPutIndex(int)>(8);
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i1);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        staticinvoke <java.nio.Bits: void putLong(java.nio.ByteBuffer,int,long,boolean)>(r0, $i2, l0, $z0);
        return r0;
    }

    public java.nio.ByteBuffer putLong(int, long)
    {
        java.nio.HeapByteBuffer r0;
        int i0, $i2, $i3;
        long l1;
        boolean $z0;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        l1 := @parameter1: long;
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int checkIndex(int,int)>(i0, 8);
        $i3 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i2);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        staticinvoke <java.nio.Bits: void putLong(java.nio.ByteBuffer,int,long,boolean)>(r0, $i3, l1, $z0);
        return r0;
    }

    public java.nio.LongBuffer asLongBuffer()
    {
        java.nio.HeapByteBuffer r0;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        java.nio.LongBuffer $r1;
        java.nio.ByteBufferAsLongBufferB r2;
        java.nio.ByteBufferAsLongBufferL r3;

        r0 := @this: java.nio.HeapByteBuffer;
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int remaining()>();
        i0 = $i2 >> 3;
        $i3 = r0.<java.nio.HeapByteBuffer: int offset>;
        $i4 = virtualinvoke r0.<java.nio.HeapByteBuffer: int position()>();
        i1 = $i3 + $i4;
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        if $z0 == 0 goto label0;

        r2 = new java.nio.ByteBufferAsLongBufferB;
        $r1 = r2;
        specialinvoke r2.<java.nio.ByteBufferAsLongBufferB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);
        goto label1;

     label0:
        r3 = new java.nio.ByteBufferAsLongBufferL;
        $r1 = r3;
        specialinvoke r3.<java.nio.ByteBufferAsLongBufferL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);

     label1:
        return $r1;
    }

    public float getFloat()
    {
        java.nio.HeapByteBuffer r0;
        int $i0, $i1;
        boolean $z0;
        float $f0;

        r0 := @this: java.nio.HeapByteBuffer;
        $i0 = virtualinvoke r0.<java.nio.HeapByteBuffer: int nextGetIndex(int)>(4);
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i0);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        $f0 = staticinvoke <java.nio.Bits: float getFloat(java.nio.ByteBuffer,int,boolean)>(r0, $i1, $z0);
        return $f0;
    }

    public float getFloat(int)
    {
        java.nio.HeapByteBuffer r0;
        int i0, $i1, $i2;
        boolean $z0;
        float $f0;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int checkIndex(int,int)>(i0, 4);
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i1);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        $f0 = staticinvoke <java.nio.Bits: float getFloat(java.nio.ByteBuffer,int,boolean)>(r0, $i2, $z0);
        return $f0;
    }

    public java.nio.ByteBuffer putFloat(float)
    {
        java.nio.HeapByteBuffer r0;
        float f0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.nio.HeapByteBuffer;
        f0 := @parameter0: float;
        $i0 = virtualinvoke r0.<java.nio.HeapByteBuffer: int nextPutIndex(int)>(4);
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i0);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        staticinvoke <java.nio.Bits: void putFloat(java.nio.ByteBuffer,int,float,boolean)>(r0, $i1, f0, $z0);
        return r0;
    }

    public java.nio.ByteBuffer putFloat(int, float)
    {
        java.nio.HeapByteBuffer r0;
        int i0, $i1, $i2;
        float f0;
        boolean $z0;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int checkIndex(int,int)>(i0, 4);
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i1);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        staticinvoke <java.nio.Bits: void putFloat(java.nio.ByteBuffer,int,float,boolean)>(r0, $i2, f0, $z0);
        return r0;
    }

    public java.nio.FloatBuffer asFloatBuffer()
    {
        java.nio.HeapByteBuffer r0;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        java.nio.FloatBuffer $r1;
        java.nio.ByteBufferAsFloatBufferB r2;
        java.nio.ByteBufferAsFloatBufferL r3;

        r0 := @this: java.nio.HeapByteBuffer;
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int remaining()>();
        i0 = $i2 >> 2;
        $i3 = r0.<java.nio.HeapByteBuffer: int offset>;
        $i4 = virtualinvoke r0.<java.nio.HeapByteBuffer: int position()>();
        i1 = $i3 + $i4;
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        if $z0 == 0 goto label0;

        r2 = new java.nio.ByteBufferAsFloatBufferB;
        $r1 = r2;
        specialinvoke r2.<java.nio.ByteBufferAsFloatBufferB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);
        goto label1;

     label0:
        r3 = new java.nio.ByteBufferAsFloatBufferL;
        $r1 = r3;
        specialinvoke r3.<java.nio.ByteBufferAsFloatBufferL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);

     label1:
        return $r1;
    }

    public double getDouble()
    {
        java.nio.HeapByteBuffer r0;
        int $i0, $i1;
        boolean $z0;
        double $d0;

        r0 := @this: java.nio.HeapByteBuffer;
        $i0 = virtualinvoke r0.<java.nio.HeapByteBuffer: int nextGetIndex(int)>(8);
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i0);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        $d0 = staticinvoke <java.nio.Bits: double getDouble(java.nio.ByteBuffer,int,boolean)>(r0, $i1, $z0);
        return $d0;
    }

    public double getDouble(int)
    {
        java.nio.HeapByteBuffer r0;
        int i0, $i1, $i2;
        boolean $z0;
        double $d0;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int checkIndex(int,int)>(i0, 8);
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i1);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        $d0 = staticinvoke <java.nio.Bits: double getDouble(java.nio.ByteBuffer,int,boolean)>(r0, $i2, $z0);
        return $d0;
    }

    public java.nio.ByteBuffer putDouble(double)
    {
        java.nio.HeapByteBuffer r0;
        double d0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.nio.HeapByteBuffer;
        d0 := @parameter0: double;
        $i0 = virtualinvoke r0.<java.nio.HeapByteBuffer: int nextPutIndex(int)>(8);
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i0);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        staticinvoke <java.nio.Bits: void putDouble(java.nio.ByteBuffer,int,double,boolean)>(r0, $i1, d0, $z0);
        return r0;
    }

    public java.nio.ByteBuffer putDouble(int, double)
    {
        java.nio.HeapByteBuffer r0;
        int i0, $i1, $i2;
        double d0;
        boolean $z0;

        r0 := @this: java.nio.HeapByteBuffer;
        i0 := @parameter0: int;
        d0 := @parameter1: double;
        $i1 = virtualinvoke r0.<java.nio.HeapByteBuffer: int checkIndex(int,int)>(i0, 8);
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int ix(int)>($i1);
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        staticinvoke <java.nio.Bits: void putDouble(java.nio.ByteBuffer,int,double,boolean)>(r0, $i2, d0, $z0);
        return r0;
    }

    public java.nio.DoubleBuffer asDoubleBuffer()
    {
        java.nio.HeapByteBuffer r0;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        java.nio.DoubleBuffer $r1;
        java.nio.ByteBufferAsDoubleBufferB r2;
        java.nio.ByteBufferAsDoubleBufferL r3;

        r0 := @this: java.nio.HeapByteBuffer;
        $i2 = virtualinvoke r0.<java.nio.HeapByteBuffer: int remaining()>();
        i0 = $i2 >> 3;
        $i3 = r0.<java.nio.HeapByteBuffer: int offset>;
        $i4 = virtualinvoke r0.<java.nio.HeapByteBuffer: int position()>();
        i1 = $i3 + $i4;
        $z0 = r0.<java.nio.HeapByteBuffer: boolean bigEndian>;
        if $z0 == 0 goto label0;

        r2 = new java.nio.ByteBufferAsDoubleBufferB;
        $r1 = r2;
        specialinvoke r2.<java.nio.ByteBufferAsDoubleBufferB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);
        goto label1;

     label0:
        r3 = new java.nio.ByteBufferAsDoubleBufferL;
        $r1 = r3;
        specialinvoke r3.<java.nio.ByteBufferAsDoubleBufferL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i0, i0, i1);

     label1:
        return $r1;
    }
}
