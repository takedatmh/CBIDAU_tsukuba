class java.util.Hashtable$Enumerator extends java.lang.Object implements java.util.Enumeration, java.util.Iterator
{
    java.util.Hashtable$Entry[] table;
    int index;
    java.util.Hashtable$Entry entry;
    java.util.Hashtable$Entry lastReturned;
    int type;
    boolean iterator;
    protected int expectedModCount;
    final java.util.Hashtable this$0;

    void <init>(java.util.Hashtable, int, boolean)
    {
        java.util.Hashtable$Enumerator r0;
        java.util.Hashtable r1, $r2, $r5;
        int i0, $i1, $i2;
        boolean z0;
        java.util.Hashtable$Entry[] $r3, $r4;

        r0 := @this: java.util.Hashtable$Enumerator;
        r1 := @parameter0: java.util.Hashtable;
        i0 := @parameter1: int;
        z0 := @parameter2: boolean;
        r0.<java.util.Hashtable$Enumerator: java.util.Hashtable this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = r0.<java.util.Hashtable$Enumerator: java.util.Hashtable this$0>;
        $r3 = staticinvoke <java.util.Hashtable: java.util.Hashtable$Entry[] access$400(java.util.Hashtable)>($r2);
        r0.<java.util.Hashtable$Enumerator: java.util.Hashtable$Entry[] table> = $r3;
        $r4 = r0.<java.util.Hashtable$Enumerator: java.util.Hashtable$Entry[] table>;
        $i1 = lengthof $r4;
        r0.<java.util.Hashtable$Enumerator: int index> = $i1;
        r0.<java.util.Hashtable$Enumerator: java.util.Hashtable$Entry entry> = null;
        r0.<java.util.Hashtable$Enumerator: java.util.Hashtable$Entry lastReturned> = null;
        $r5 = r0.<java.util.Hashtable$Enumerator: java.util.Hashtable this$0>;
        $i2 = staticinvoke <java.util.Hashtable: int access$600(java.util.Hashtable)>($r5);
        r0.<java.util.Hashtable$Enumerator: int expectedModCount> = $i2;
        r0.<java.util.Hashtable$Enumerator: int type> = i0;
        r0.<java.util.Hashtable$Enumerator: boolean iterator> = z0;
        return;
    }

    public boolean hasMoreElements()
    {
        java.util.Hashtable$Enumerator r0;
        java.util.Hashtable$Entry r1;
        int i0;
        java.util.Hashtable$Entry[] r2;
        boolean $z0;

        r0 := @this: java.util.Hashtable$Enumerator;
        r1 = r0.<java.util.Hashtable$Enumerator: java.util.Hashtable$Entry entry>;
        i0 = r0.<java.util.Hashtable$Enumerator: int index>;
        r2 = r0.<java.util.Hashtable$Enumerator: java.util.Hashtable$Entry[] table>;

     label0:
        if r1 != null goto label1;

        if i0 <= 0 goto label1;

        i0 = i0 + -1;
        r1 = r2[i0];
        goto label0;

     label1:
        r0.<java.util.Hashtable$Enumerator: java.util.Hashtable$Entry entry> = r1;
        r0.<java.util.Hashtable$Enumerator: int index> = i0;
        if r1 == null goto label2;

        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public java.lang.Object nextElement()
    {
        java.util.Hashtable$Enumerator r0;
        java.util.Hashtable$Entry r1, $r3, r4, $r5;
        int i0, $i1, $i2;
        java.util.Hashtable$Entry[] r2;
        java.lang.Object $r6;
        java.util.NoSuchElementException $r7;

        r0 := @this: java.util.Hashtable$Enumerator;
        r1 = r0.<java.util.Hashtable$Enumerator: java.util.Hashtable$Entry entry>;
        i0 = r0.<java.util.Hashtable$Enumerator: int index>;
        r2 = r0.<java.util.Hashtable$Enumerator: java.util.Hashtable$Entry[] table>;

     label0:
        if r1 != null goto label1;

        if i0 <= 0 goto label1;

        i0 = i0 + -1;
        r1 = r2[i0];
        goto label0;

     label1:
        r0.<java.util.Hashtable$Enumerator: java.util.Hashtable$Entry entry> = r1;
        r0.<java.util.Hashtable$Enumerator: int index> = i0;
        if r1 == null goto label5;

        $r3 = r0.<java.util.Hashtable$Enumerator: java.util.Hashtable$Entry entry>;
        r0.<java.util.Hashtable$Enumerator: java.util.Hashtable$Entry lastReturned> = $r3;
        r4 = $r3;
        $r5 = r4.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        r0.<java.util.Hashtable$Enumerator: java.util.Hashtable$Entry entry> = $r5;
        $i1 = r0.<java.util.Hashtable$Enumerator: int type>;
        if $i1 != 0 goto label2;

        $r6 = r4.<java.util.Hashtable$Entry: java.lang.Object key>;
        goto label4;

     label2:
        $i2 = r0.<java.util.Hashtable$Enumerator: int type>;
        if $i2 != 1 goto label3;

        $r6 = r4.<java.util.Hashtable$Entry: java.lang.Object value>;
        goto label4;

     label3:
        $r6 = r4;

     label4:
        return $r6;

     label5:
        $r7 = new java.util.NoSuchElementException;
        specialinvoke $r7.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Hashtable Enumerator");
        throw $r7;
    }

    public boolean hasNext()
    {
        java.util.Hashtable$Enumerator r0;
        boolean $z0;

        r0 := @this: java.util.Hashtable$Enumerator;
        $z0 = virtualinvoke r0.<java.util.Hashtable$Enumerator: boolean hasMoreElements()>();
        return $z0;
    }

    public java.lang.Object next()
    {
        java.util.Hashtable$Enumerator r0;
        java.util.Hashtable $r1;
        int $i0, $i1;
        java.util.ConcurrentModificationException $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.Hashtable$Enumerator;
        $r1 = r0.<java.util.Hashtable$Enumerator: java.util.Hashtable this$0>;
        $i0 = staticinvoke <java.util.Hashtable: int access$600(java.util.Hashtable)>($r1);
        $i1 = r0.<java.util.Hashtable$Enumerator: int expectedModCount>;
        if $i0 == $i1 goto label0;

        $r2 = new java.util.ConcurrentModificationException;
        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r2;

     label0:
        $r3 = virtualinvoke r0.<java.util.Hashtable$Enumerator: java.lang.Object nextElement()>();
        return $r3;
    }

    public void remove()
    {
        java.util.Hashtable$Enumerator r0;
        java.util.Hashtable r1, $r9, $r11, $r12, $r15, $r19;
        java.util.Hashtable$Entry[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8;
        java.util.Hashtable$Entry r3, r4, $r7, $r13, $r14, $r17, $r18;
        java.lang.Throwable r5, $r21;
        boolean $z0;
        java.lang.UnsupportedOperationException $r6;
        java.lang.IllegalStateException $r8;
        java.util.ConcurrentModificationException $r10, $r20;

        r0 := @this: java.util.Hashtable$Enumerator;
        $z0 = r0.<java.util.Hashtable$Enumerator: boolean iterator>;
        if $z0 != 0 goto label0;

        $r6 = new java.lang.UnsupportedOperationException;
        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r6;

     label0:
        $r7 = r0.<java.util.Hashtable$Enumerator: java.util.Hashtable$Entry lastReturned>;
        if $r7 != null goto label1;

        $r8 = new java.lang.IllegalStateException;
        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Hashtable Enumerator");
        throw $r8;

     label1:
        $r9 = r0.<java.util.Hashtable$Enumerator: java.util.Hashtable this$0>;
        $i1 = staticinvoke <java.util.Hashtable: int access$600(java.util.Hashtable)>($r9);
        $i2 = r0.<java.util.Hashtable$Enumerator: int expectedModCount>;
        if $i1 == $i2 goto label2;

        $r10 = new java.util.ConcurrentModificationException;
        specialinvoke $r10.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r10;

     label2:
        $r11 = r0.<java.util.Hashtable$Enumerator: java.util.Hashtable this$0>;
        r1 = $r11;
        entermonitor $r11;

     label3:
        $r12 = r0.<java.util.Hashtable$Enumerator: java.util.Hashtable this$0>;
        r2 = staticinvoke <java.util.Hashtable: java.util.Hashtable$Entry[] access$400(java.util.Hashtable)>($r12);
        $r13 = r0.<java.util.Hashtable$Enumerator: java.util.Hashtable$Entry lastReturned>;
        $i3 = $r13.<java.util.Hashtable$Entry: int hash>;
        $i4 = $i3 & 2147483647;
        $i5 = lengthof r2;
        i0 = $i4 % $i5;
        r3 = r2[i0];
        r4 = null;

     label4:
        if r3 == null goto label9;

        $r14 = r0.<java.util.Hashtable$Enumerator: java.util.Hashtable$Entry lastReturned>;
        if r3 != $r14 goto label8;

        $r15 = r0.<java.util.Hashtable$Enumerator: java.util.Hashtable this$0>;
        staticinvoke <java.util.Hashtable: int access$608(java.util.Hashtable)>($r15);
        $i7 = r0.<java.util.Hashtable$Enumerator: int expectedModCount>;
        $i8 = $i7 + 1;
        r0.<java.util.Hashtable$Enumerator: int expectedModCount> = $i8;
        if r4 != null goto label5;

        $r17 = r3.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        r2[i0] = $r17;
        goto label6;

     label5:
        $r18 = r3.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        r4.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next> = $r18;

     label6:
        $r19 = r0.<java.util.Hashtable$Enumerator: java.util.Hashtable this$0>;
        staticinvoke <java.util.Hashtable: int access$210(java.util.Hashtable)>($r19);
        r0.<java.util.Hashtable$Enumerator: java.util.Hashtable$Entry lastReturned> = null;
        exitmonitor r1;

     label7:
        return;

     label8:
        r4 = r3;
        r3 = r3.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;
        goto label4;

     label9:
        $r20 = new java.util.ConcurrentModificationException;
        specialinvoke $r20.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r20;

     label10:
        $r21 := @caughtexception;
        r5 = $r21;
        exitmonitor r1;

     label11:
        throw r5;

        catch java.lang.Throwable from label3 to label7 with label10;
        catch java.lang.Throwable from label8 to label11 with label10;
    }
}
