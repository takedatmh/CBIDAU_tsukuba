class java.util.regex.Pattern$NotBehind extends java.util.regex.Pattern$Node
{
    java.util.regex.Pattern$Node cond;
    int rmax;
    int rmin;

    void <init>(java.util.regex.Pattern$Node, int, int)
    {
        java.util.regex.Pattern$NotBehind r0;
        java.util.regex.Pattern$Node r1;
        int i0, i1;

        r0 := @this: java.util.regex.Pattern$NotBehind;
        r1 := @parameter0: java.util.regex.Pattern$Node;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        r0.<java.util.regex.Pattern$NotBehind: java.util.regex.Pattern$Node cond> = r1;
        r0.<java.util.regex.Pattern$NotBehind: int rmax> = i0;
        r0.<java.util.regex.Pattern$NotBehind: int rmin> = i1;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$NotBehind r0;
        java.util.regex.Matcher r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        java.lang.CharSequence r2;
        boolean z0, $z1, $z2, $z3, $z4;
        java.util.regex.Pattern$Node $r3, $r4;

        r0 := @this: java.util.regex.Pattern$NotBehind;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        i1 = r1.<java.util.regex.Matcher: int lookbehindTo>;
        i2 = r1.<java.util.regex.Matcher: int 'from'>;
        z0 = 0;
        $z1 = r1.<java.util.regex.Matcher: boolean transparentBounds>;
        if $z1 != 0 goto label0;

        $i6 = r1.<java.util.regex.Matcher: int 'from'>;
        goto label1;

     label0:
        $i6 = 0;

     label1:
        i3 = $i6;
        $i7 = r0.<java.util.regex.Pattern$NotBehind: int rmax>;
        $i8 = i0 - $i7;
        i4 = staticinvoke <java.lang.Math: int max(int,int)>($i8, i3);
        r1.<java.util.regex.Matcher: int lookbehindTo> = i0;
        $z2 = r1.<java.util.regex.Matcher: boolean transparentBounds>;
        if $z2 == 0 goto label2;

        r1.<java.util.regex.Matcher: int 'from'> = 0;

     label2:
        $i9 = r0.<java.util.regex.Pattern$NotBehind: int rmin>;
        i5 = i0 - $i9;

     label3:
        if z0 != 0 goto label4;

        if i5 < i4 goto label4;

        $r3 = r0.<java.util.regex.Pattern$NotBehind: java.util.regex.Pattern$Node cond>;
        z0 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i5, r2);
        i5 = i5 + -1;
        goto label3;

     label4:
        r1.<java.util.regex.Matcher: int 'from'> = i2;
        r1.<java.util.regex.Matcher: int lookbehindTo> = i1;
        if z0 != 0 goto label5;

        $r4 = r0.<java.util.regex.Pattern$NotBehind: java.util.regex.Pattern$Node next>;
        $z3 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z3 == 0 goto label5;

        $z4 = 1;
        goto label6;

     label5:
        $z4 = 0;

     label6:
        return $z4;
    }
}
