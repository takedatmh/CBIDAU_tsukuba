final class java.util.regex.Pattern$LazyLoop extends java.util.regex.Pattern$Loop
{

    void <init>(int, int)
    {
        java.util.regex.Pattern$LazyLoop r0;
        int i0, i1;

        r0 := @this: java.util.regex.Pattern$LazyLoop;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        specialinvoke r0.<java.util.regex.Pattern$Loop: void <init>(int,int)>(i0, i1);
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$LazyLoop r0;
        java.util.regex.Matcher r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.CharSequence r2;
        boolean z0, $z1, z2, $z3;
        int[] $r3, $r4, $r5, $r7, $r9, $r11;
        java.util.regex.Pattern$Node $r6, $r8, $r10, $r12;

        r0 := @this: java.util.regex.Pattern$LazyLoop;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $r3 = r1.<java.util.regex.Matcher: int[] locals>;
        $i2 = r0.<java.util.regex.Pattern$LazyLoop: int beginIndex>;
        $i3 = $r3[$i2];
        if i0 <= $i3 goto label5;

        $r4 = r1.<java.util.regex.Matcher: int[] locals>;
        $i4 = r0.<java.util.regex.Pattern$LazyLoop: int countIndex>;
        i1 = $r4[$i4];
        $i5 = r0.<java.util.regex.Pattern$LazyLoop: int cmin>;
        if i1 >= $i5 goto label1;

        $r5 = r1.<java.util.regex.Matcher: int[] locals>;
        $i6 = r0.<java.util.regex.Pattern$LazyLoop: int countIndex>;
        $i7 = i1 + 1;
        $r5[$i6] = $i7;
        $r6 = r0.<java.util.regex.Pattern$LazyLoop: java.util.regex.Pattern$Node body>;
        z0 = virtualinvoke $r6.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if z0 != 0 goto label0;

        $r7 = r1.<java.util.regex.Matcher: int[] locals>;
        $i8 = r0.<java.util.regex.Pattern$LazyLoop: int countIndex>;
        $r7[$i8] = i1;

     label0:
        return z0;

     label1:
        $r8 = r0.<java.util.regex.Pattern$LazyLoop: java.util.regex.Pattern$Node next>;
        $z1 = virtualinvoke $r8.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z1 == 0 goto label2;

        return 1;

     label2:
        $i9 = r0.<java.util.regex.Pattern$LazyLoop: int cmax>;
        if i1 >= $i9 goto label4;

        $r9 = r1.<java.util.regex.Matcher: int[] locals>;
        $i10 = r0.<java.util.regex.Pattern$LazyLoop: int countIndex>;
        $i11 = i1 + 1;
        $r9[$i10] = $i11;
        $r10 = r0.<java.util.regex.Pattern$LazyLoop: java.util.regex.Pattern$Node body>;
        z2 = virtualinvoke $r10.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if z2 != 0 goto label3;

        $r11 = r1.<java.util.regex.Matcher: int[] locals>;
        $i12 = r0.<java.util.regex.Pattern$LazyLoop: int countIndex>;
        $r11[$i12] = i1;

     label3:
        return z2;

     label4:
        return 0;

     label5:
        $r12 = r0.<java.util.regex.Pattern$LazyLoop: java.util.regex.Pattern$Node next>;
        $z3 = virtualinvoke $r12.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        return $z3;
    }

    boolean matchInit(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$LazyLoop r0;
        java.util.regex.Matcher r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.CharSequence r2;
        boolean z0, $z1;
        int[] $r3, $r4, $r7, $r9;
        java.util.regex.Pattern$Node $r5, $r6, $r8;

        r0 := @this: java.util.regex.Pattern$LazyLoop;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $r3 = r1.<java.util.regex.Matcher: int[] locals>;
        $i2 = r0.<java.util.regex.Pattern$LazyLoop: int countIndex>;
        i1 = $r3[$i2];
        z0 = 0;
        $i3 = r0.<java.util.regex.Pattern$LazyLoop: int cmin>;
        if 0 >= $i3 goto label0;

        $r4 = r1.<java.util.regex.Matcher: int[] locals>;
        $i4 = r0.<java.util.regex.Pattern$LazyLoop: int countIndex>;
        $r4[$i4] = 1;
        $r5 = r0.<java.util.regex.Pattern$LazyLoop: java.util.regex.Pattern$Node body>;
        z0 = virtualinvoke $r5.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        goto label2;

     label0:
        $r6 = r0.<java.util.regex.Pattern$LazyLoop: java.util.regex.Pattern$Node next>;
        $z1 = virtualinvoke $r6.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z1 == 0 goto label1;

        z0 = 1;
        goto label2;

     label1:
        $i5 = r0.<java.util.regex.Pattern$LazyLoop: int cmax>;
        if 0 >= $i5 goto label2;

        $r7 = r1.<java.util.regex.Matcher: int[] locals>;
        $i6 = r0.<java.util.regex.Pattern$LazyLoop: int countIndex>;
        $r7[$i6] = 1;
        $r8 = r0.<java.util.regex.Pattern$LazyLoop: java.util.regex.Pattern$Node body>;
        z0 = virtualinvoke $r8.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);

     label2:
        $r9 = r1.<java.util.regex.Matcher: int[] locals>;
        $i7 = r0.<java.util.regex.Pattern$LazyLoop: int countIndex>;
        $r9[$i7] = i1;
        return z0;
    }

    boolean study(java.util.regex.Pattern$TreeInfo)
    {
        java.util.regex.Pattern$LazyLoop r0;
        java.util.regex.Pattern$TreeInfo r1;

        r0 := @this: java.util.regex.Pattern$LazyLoop;
        r1 := @parameter0: java.util.regex.Pattern$TreeInfo;
        r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid> = 0;
        r1.<java.util.regex.Pattern$TreeInfo: boolean deterministic> = 0;
        return 0;
    }
}
