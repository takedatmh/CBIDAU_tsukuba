class java.lang.ClassValue$Entry extends java.lang.ref.WeakReference
{
    final java.lang.Object value;
    static final java.lang.ClassValue$Entry DEAD_ENTRY;
    static final boolean $assertionsDisabled;

    void <init>(java.lang.ClassValue$Version, java.lang.Object)
    {
        java.lang.ClassValue$Entry r0;
        java.lang.ClassValue$Version r1;
        java.lang.Object r2;

        r0 := @this: java.lang.ClassValue$Entry;
        r1 := @parameter0: java.lang.ClassValue$Version;
        r2 := @parameter1: java.lang.Object;
        specialinvoke r0.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r1);
        r0.<java.lang.ClassValue$Entry: java.lang.Object value> = r2;
        return;
    }

    private void assertNotPromise()
    {
        java.lang.ClassValue$Entry r0;
        boolean $z0, $z1;
        java.lang.AssertionError $r1;

        r0 := @this: java.lang.ClassValue$Entry;
        $z0 = <java.lang.ClassValue$Entry: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r0.<java.lang.ClassValue$Entry: boolean isPromise()>();
        if $z1 == 0 goto label0;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label0:
        return;
    }

    void <init>(java.lang.ClassValue$Version)
    {
        java.lang.ClassValue$Entry r0;
        java.lang.ClassValue$Version r1;

        r0 := @this: java.lang.ClassValue$Entry;
        r1 := @parameter0: java.lang.ClassValue$Version;
        specialinvoke r0.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r1);
        r0.<java.lang.ClassValue$Entry: java.lang.Object value> = r0;
        return;
    }

    java.lang.Object value()
    {
        java.lang.ClassValue$Entry r0;
        java.lang.Object $r1;

        r0 := @this: java.lang.ClassValue$Entry;
        specialinvoke r0.<java.lang.ClassValue$Entry: void assertNotPromise()>();
        $r1 = r0.<java.lang.ClassValue$Entry: java.lang.Object value>;
        return $r1;
    }

    boolean isPromise()
    {
        java.lang.ClassValue$Entry r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: java.lang.ClassValue$Entry;
        $r1 = r0.<java.lang.ClassValue$Entry: java.lang.Object value>;
        if $r1 != r0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    java.lang.ClassValue$Version version()
    {
        java.lang.ClassValue$Entry r0;
        java.lang.Object $r1;
        java.lang.ClassValue$Version $r2;

        r0 := @this: java.lang.ClassValue$Entry;
        $r1 = virtualinvoke r0.<java.lang.ClassValue$Entry: java.lang.Object get()>();
        $r2 = (java.lang.ClassValue$Version) $r1;
        return $r2;
    }

    java.lang.ClassValue classValueOrNull()
    {
        java.lang.ClassValue$Entry r0;
        java.lang.ClassValue$Version r1;
        java.lang.ClassValue $r2;

        r0 := @this: java.lang.ClassValue$Entry;
        r1 = virtualinvoke r0.<java.lang.ClassValue$Entry: java.lang.ClassValue$Version version()>();
        if r1 != null goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r2 = virtualinvoke r1.<java.lang.ClassValue$Version: java.lang.ClassValue classValue()>();

     label1:
        return $r2;
    }

    boolean isLive()
    {
        java.lang.ClassValue$Entry r0;
        java.lang.ClassValue$Version r1;
        boolean $z0;

        r0 := @this: java.lang.ClassValue$Entry;
        r1 = virtualinvoke r0.<java.lang.ClassValue$Entry: java.lang.ClassValue$Version version()>();
        if r1 != null goto label0;

        return 0;

     label0:
        $z0 = virtualinvoke r1.<java.lang.ClassValue$Version: boolean isLive()>();
        if $z0 == 0 goto label1;

        return 1;

     label1:
        virtualinvoke r0.<java.lang.ClassValue$Entry: void clear()>();
        return 0;
    }

    java.lang.ClassValue$Entry refreshVersion(java.lang.ClassValue$Version)
    {
        java.lang.ClassValue$Entry r0, r2, $r3;
        java.lang.ClassValue$Version r1;
        java.lang.Object $r4;

        r0 := @this: java.lang.ClassValue$Entry;
        r1 := @parameter0: java.lang.ClassValue$Version;
        specialinvoke r0.<java.lang.ClassValue$Entry: void assertNotPromise()>();
        $r3 = new java.lang.ClassValue$Entry;
        $r4 = r0.<java.lang.ClassValue$Entry: java.lang.Object value>;
        specialinvoke $r3.<java.lang.ClassValue$Entry: void <init>(java.lang.ClassValue$Version,java.lang.Object)>(r1, $r4);
        r2 = $r3;
        virtualinvoke r0.<java.lang.ClassValue$Entry: void clear()>();
        return r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.lang.ClassValue$Entry $r1;

        $r0 = class "java/lang/ClassValue";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.lang.ClassValue$Entry: boolean $assertionsDisabled> = $z1;
        $r1 = new java.lang.ClassValue$Entry;
        specialinvoke $r1.<java.lang.ClassValue$Entry: void <init>(java.lang.ClassValue$Version,java.lang.Object)>(null, null);
        <java.lang.ClassValue$Entry: java.lang.ClassValue$Entry DEAD_ENTRY> = $r1;
        return;
    }
}
