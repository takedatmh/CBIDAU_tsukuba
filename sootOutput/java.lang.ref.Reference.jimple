public abstract class java.lang.ref.Reference extends java.lang.Object
{
    private java.lang.Object referent;
    java.lang.ref.ReferenceQueue queue;
    java.lang.ref.Reference next;
    private transient java.lang.ref.Reference discovered;
    private static java.lang.ref.Reference$Lock lock;
    private static java.lang.ref.Reference pending;

    public java.lang.Object get()
    {
        java.lang.ref.Reference r0;
        java.lang.Object $r1;

        r0 := @this: java.lang.ref.Reference;
        $r1 = r0.<java.lang.ref.Reference: java.lang.Object referent>;
        return $r1;
    }

    public void clear()
    {
        java.lang.ref.Reference r0;

        r0 := @this: java.lang.ref.Reference;
        r0.<java.lang.ref.Reference: java.lang.Object referent> = null;
        return;
    }

    public boolean isEnqueued()
    {
        java.lang.ref.Reference r0, r2, $r6;
        java.lang.Throwable r3, $r7;
        java.lang.ref.ReferenceQueue $r4, $r5;
        boolean $z0;

        r0 := @this: java.lang.ref.Reference;
        r2 = r0;
        entermonitor r0;

     label0:
        $r4 = r0.<java.lang.ref.Reference: java.lang.ref.ReferenceQueue queue>;
        $r5 = <java.lang.ref.ReferenceQueue: java.lang.ref.ReferenceQueue NULL>;
        if $r4 == $r5 goto label1;

        $r6 = r0.<java.lang.ref.Reference: java.lang.ref.Reference next>;
        if $r6 == null goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        exitmonitor r2;

     label3:
        return $z0;

     label4:
        $r7 := @caughtexception;

     label5:
        r3 = $r7;
        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean enqueue()
    {
        java.lang.ref.Reference r0;
        java.lang.ref.ReferenceQueue $r1;
        boolean $z0;

        r0 := @this: java.lang.ref.Reference;
        $r1 = r0.<java.lang.ref.Reference: java.lang.ref.ReferenceQueue queue>;
        $z0 = virtualinvoke $r1.<java.lang.ref.ReferenceQueue: boolean enqueue(java.lang.ref.Reference)>(r0);
        return $z0;
    }

    void <init>(java.lang.Object)
    {
        java.lang.ref.Reference r0;
        java.lang.Object r1;

        r0 := @this: java.lang.ref.Reference;
        r1 := @parameter0: java.lang.Object;
        specialinvoke r0.<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r1, null);
        return;
    }

    void <init>(java.lang.Object, java.lang.ref.ReferenceQueue)
    {
        java.lang.ref.Reference r0;
        java.lang.Object r1;
        java.lang.ref.ReferenceQueue r2, $r4;

        r0 := @this: java.lang.ref.Reference;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.ref.ReferenceQueue;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.ref.Reference: java.lang.Object referent> = r1;
        if r2 != null goto label0;

        $r4 = <java.lang.ref.ReferenceQueue: java.lang.ref.ReferenceQueue NULL>;
        goto label1;

     label0:
        $r4 = r2;

     label1:
        r0.<java.lang.ref.Reference: java.lang.ref.ReferenceQueue queue> = $r4;
        return;
    }

    static java.lang.ref.Reference$Lock access$100()
    {
        java.lang.ref.Reference$Lock $r0;

        $r0 = <java.lang.ref.Reference: java.lang.ref.Reference$Lock lock>;
        return $r0;
    }

    static java.lang.ref.Reference access$200()
    {
        java.lang.ref.Reference $r0;

        $r0 = <java.lang.ref.Reference: java.lang.ref.Reference pending>;
        return $r0;
    }

    static java.lang.ref.Reference access$202(java.lang.ref.Reference)
    {
        java.lang.ref.Reference r0;

        r0 := @parameter0: java.lang.ref.Reference;
        <java.lang.ref.Reference: java.lang.ref.Reference pending> = r0;
        return r0;
    }

    static void <clinit>()
    {
        java.lang.ref.Reference$Lock $r0;
        java.lang.ThreadGroup r1, r2;
        java.lang.Thread $r3;
        java.lang.ref.Reference$ReferenceHandler $r4, r5;

        $r0 = new java.lang.ref.Reference$Lock;
        specialinvoke $r0.<java.lang.ref.Reference$Lock: void <init>(java.lang.ref.Reference$1)>(null);
        <java.lang.ref.Reference: java.lang.ref.Reference$Lock lock> = $r0;
        <java.lang.ref.Reference: java.lang.ref.Reference pending> = null;
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r1 = virtualinvoke $r3.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();
        r2 = r1;

     label0:
        if r2 == null goto label1;

        r1 = r2;
        r2 = virtualinvoke r1.<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>();
        goto label0;

     label1:
        $r4 = new java.lang.ref.Reference$ReferenceHandler;
        specialinvoke $r4.<java.lang.ref.Reference$ReferenceHandler: void <init>(java.lang.ThreadGroup,java.lang.String)>(r1, "Reference Handler");
        r5 = $r4;
        virtualinvoke r5.<java.lang.Thread: void setPriority(int)>(10);
        virtualinvoke r5.<java.lang.Thread: void setDaemon(boolean)>(1);
        virtualinvoke r5.<java.lang.Thread: void start()>();
        return;
    }
}
