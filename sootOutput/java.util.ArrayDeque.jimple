public class java.util.ArrayDeque extends java.util.AbstractCollection implements java.util.Deque, java.lang.Cloneable, java.io.Serializable
{
    private transient java.lang.Object[] elements;
    private transient int head;
    private transient int tail;
    private static final int MIN_INITIAL_CAPACITY;
    private static final long serialVersionUID;
    static final boolean $assertionsDisabled;

    private void allocateElements(int)
    {
        java.util.ArrayDeque r0;
        int i0, i1, i2, $i3, i4, $i5, i6, $i7, i8, $i9, i10, $i11, i12;
        java.lang.Object[] $r1, $r2;

        r0 := @this: java.util.ArrayDeque;
        i0 := @parameter0: int;
        i1 = 8;
        if i0 < i1 goto label0;

        i2 = i0;
        $i3 = i2 >>> 1;
        i4 = i2 | $i3;
        $i5 = i4 >>> 2;
        i6 = i4 | $i5;
        $i7 = i6 >>> 4;
        i8 = i6 | $i7;
        $i9 = i8 >>> 8;
        i10 = i8 | $i9;
        $i11 = i10 >>> 16;
        i12 = i10 | $i11;
        i1 = i12 + 1;
        if i1 >= 0 goto label0;

        i1 = i1 >>> 1;

     label0:
        $r1 = newarray (java.lang.Object)[i1];
        $r2 = (java.lang.Object[]) $r1;
        r0.<java.util.ArrayDeque: java.lang.Object[] elements> = $r2;
        return;
    }

    private void doubleCapacity()
    {
        java.util.ArrayDeque r0;
        boolean $z0;
        int i0, i1, i2, i3, $i4, $i5;
        java.lang.Object[] r1, $r3, $r5, $r6, $r7;
        java.lang.AssertionError $r2;
        java.lang.IllegalStateException $r4;

        r0 := @this: java.util.ArrayDeque;
        $z0 = <java.util.ArrayDeque: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $i4 = r0.<java.util.ArrayDeque: int head>;
        $i5 = r0.<java.util.ArrayDeque: int tail>;
        if $i4 == $i5 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        i0 = r0.<java.util.ArrayDeque: int head>;
        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        i1 = lengthof $r3;
        i2 = i1 - i0;
        i3 = i1 << 1;
        if i3 >= 0 goto label1;

        $r4 = new java.lang.IllegalStateException;
        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Sorry, deque too big");
        throw $r4;

     label1:
        r1 = newarray (java.lang.Object)[i3];
        $r5 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, i0, r1, 0, i2);
        $r6 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r1, i2, i0);
        $r7 = (java.lang.Object[]) r1;
        r0.<java.util.ArrayDeque: java.lang.Object[] elements> = $r7;
        r0.<java.util.ArrayDeque: int head> = 0;
        r0.<java.util.ArrayDeque: int tail> = i1;
        return;
    }

    private java.lang.Object[] copyElements(java.lang.Object[])
    {
        java.util.ArrayDeque r0;
        java.lang.Object[] r1, $r2, $r3, $r4, $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: java.util.ArrayDeque;
        r1 := @parameter0: java.lang.Object[];
        $i1 = r0.<java.util.ArrayDeque: int head>;
        $i2 = r0.<java.util.ArrayDeque: int tail>;
        if $i1 >= $i2 goto label0;

        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i3 = r0.<java.util.ArrayDeque: int head>;
        $i4 = virtualinvoke r0.<java.util.ArrayDeque: int size()>();
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i3, r1, 0, $i4);
        goto label1;

     label0:
        $i5 = r0.<java.util.ArrayDeque: int head>;
        $i6 = r0.<java.util.ArrayDeque: int tail>;
        if $i5 <= $i6 goto label1;

        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i7 = lengthof $r3;
        $i8 = r0.<java.util.ArrayDeque: int head>;
        i0 = $i7 - $i8;
        $r4 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i9 = r0.<java.util.ArrayDeque: int head>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i9, r1, 0, i0);
        $r5 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i10 = r0.<java.util.ArrayDeque: int tail>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, i0, $i10);

     label1:
        return r1;
    }

    public void <init>()
    {
        java.util.ArrayDeque r0;
        java.lang.Object[] $r1, $r2;

        r0 := @this: java.util.ArrayDeque;
        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();
        $r1 = newarray (java.lang.Object)[16];
        $r2 = (java.lang.Object[]) $r1;
        r0.<java.util.ArrayDeque: java.lang.Object[] elements> = $r2;
        return;
    }

    public void <init>(int)
    {
        java.util.ArrayDeque r0;
        int i0;

        r0 := @this: java.util.ArrayDeque;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();
        specialinvoke r0.<java.util.ArrayDeque: void allocateElements(int)>(i0);
        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.ArrayDeque r0;
        java.util.Collection r1;
        int $i0;

        r0 := @this: java.util.ArrayDeque;
        r1 := @parameter0: java.util.Collection;
        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();
        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();
        specialinvoke r0.<java.util.ArrayDeque: void allocateElements(int)>($i0);
        virtualinvoke r0.<java.util.ArrayDeque: boolean addAll(java.util.Collection)>(r1);
        return;
    }

    public void addFirst(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;
        java.lang.NullPointerException $r2;
        java.lang.Object[] $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: java.util.ArrayDeque;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i0 = r0.<java.util.ArrayDeque: int head>;
        $i1 = $i0 - 1;
        $r4 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i2 = lengthof $r4;
        $i3 = $i2 - 1;
        $i4 = $i1 & $i3;
        r0.<java.util.ArrayDeque: int head> = $i4;
        $r3[$i4] = r1;
        $i5 = r0.<java.util.ArrayDeque: int head>;
        $i6 = r0.<java.util.ArrayDeque: int tail>;
        if $i5 != $i6 goto label1;

        specialinvoke r0.<java.util.ArrayDeque: void doubleCapacity()>();

     label1:
        return;
    }

    public void addLast(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;
        java.lang.NullPointerException $r2;
        java.lang.Object[] $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: java.util.ArrayDeque;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i0 = r0.<java.util.ArrayDeque: int tail>;
        $r3[$i0] = r1;
        $i1 = r0.<java.util.ArrayDeque: int tail>;
        $i2 = $i1 + 1;
        $r4 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i3 = lengthof $r4;
        $i4 = $i3 - 1;
        $i5 = $i2 & $i4;
        r0.<java.util.ArrayDeque: int tail> = $i5;
        $i6 = r0.<java.util.ArrayDeque: int head>;
        if $i5 != $i6 goto label1;

        specialinvoke r0.<java.util.ArrayDeque: void doubleCapacity()>();

     label1:
        return;
    }

    public boolean offerFirst(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;

        r0 := @this: java.util.ArrayDeque;
        r1 := @parameter0: java.lang.Object;
        virtualinvoke r0.<java.util.ArrayDeque: void addFirst(java.lang.Object)>(r1);
        return 1;
    }

    public boolean offerLast(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;

        r0 := @this: java.util.ArrayDeque;
        r1 := @parameter0: java.lang.Object;
        virtualinvoke r0.<java.util.ArrayDeque: void addLast(java.lang.Object)>(r1);
        return 1;
    }

    public java.lang.Object removeFirst()
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;
        java.util.NoSuchElementException $r2;

        r0 := @this: java.util.ArrayDeque;
        r1 = virtualinvoke r0.<java.util.ArrayDeque: java.lang.Object pollFirst()>();
        if r1 != null goto label0;

        $r2 = new java.util.NoSuchElementException;
        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();
        throw $r2;

     label0:
        return r1;
    }

    public java.lang.Object removeLast()
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;
        java.util.NoSuchElementException $r2;

        r0 := @this: java.util.ArrayDeque;
        r1 = virtualinvoke r0.<java.util.ArrayDeque: java.lang.Object pollLast()>();
        if r1 != null goto label0;

        $r2 = new java.util.NoSuchElementException;
        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();
        throw $r2;

     label0:
        return r1;
    }

    public java.lang.Object pollFirst()
    {
        java.util.ArrayDeque r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1;
        java.lang.Object[] $r2, $r3, $r4;

        r0 := @this: java.util.ArrayDeque;
        i0 = r0.<java.util.ArrayDeque: int head>;
        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        r1 = $r2[i0];
        if r1 != null goto label0;

        return null;

     label0:
        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $r3[i0] = null;
        $i1 = i0 + 1;
        $r4 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i2 = lengthof $r4;
        $i3 = $i2 - 1;
        $i4 = $i1 & $i3;
        r0.<java.util.ArrayDeque: int head> = $i4;
        return r1;
    }

    public java.lang.Object pollLast()
    {
        java.util.ArrayDeque r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1;
        java.lang.Object[] $r2, $r3, $r4;

        r0 := @this: java.util.ArrayDeque;
        $i1 = r0.<java.util.ArrayDeque: int tail>;
        $i2 = $i1 - 1;
        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i3 = lengthof $r2;
        $i4 = $i3 - 1;
        i0 = $i2 & $i4;
        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        r1 = $r3[i0];
        if r1 != null goto label0;

        return null;

     label0:
        $r4 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $r4[i0] = null;
        r0.<java.util.ArrayDeque: int tail> = i0;
        return r1;
    }

    public java.lang.Object getFirst()
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;
        java.lang.Object[] $r2;
        int $i0;
        java.util.NoSuchElementException $r3;

        r0 := @this: java.util.ArrayDeque;
        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i0 = r0.<java.util.ArrayDeque: int head>;
        r1 = $r2[$i0];
        if r1 != null goto label0;

        $r3 = new java.util.NoSuchElementException;
        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();
        throw $r3;

     label0:
        return r1;
    }

    public java.lang.Object getLast()
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;
        java.lang.Object[] $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.NoSuchElementException $r4;

        r0 := @this: java.util.ArrayDeque;
        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i0 = r0.<java.util.ArrayDeque: int tail>;
        $i1 = $i0 - 1;
        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i2 = lengthof $r3;
        $i3 = $i2 - 1;
        $i4 = $i1 & $i3;
        r1 = $r2[$i4];
        if r1 != null goto label0;

        $r4 = new java.util.NoSuchElementException;
        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();
        throw $r4;

     label0:
        return r1;
    }

    public java.lang.Object peekFirst()
    {
        java.util.ArrayDeque r0;
        java.lang.Object[] $r1;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: java.util.ArrayDeque;
        $r1 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i0 = r0.<java.util.ArrayDeque: int head>;
        $r2 = $r1[$i0];
        return $r2;
    }

    public java.lang.Object peekLast()
    {
        java.util.ArrayDeque r0;
        java.lang.Object[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r3;

        r0 := @this: java.util.ArrayDeque;
        $r1 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i0 = r0.<java.util.ArrayDeque: int tail>;
        $i1 = $i0 - 1;
        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i2 = lengthof $r2;
        $i3 = $i2 - 1;
        $i4 = $i1 & $i3;
        $r3 = $r1[$i4];
        return $r3;
    }

    public boolean removeFirstOccurrence(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1, r2, $r5;
        int i0, i1, $i2, $i3;
        java.lang.Object[] $r3, $r4;
        boolean $z0;

        r0 := @this: java.util.ArrayDeque;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        return 0;

     label0:
        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i2 = lengthof $r3;
        i0 = $i2 - 1;
        i1 = r0.<java.util.ArrayDeque: int head>;

     label1:
        $r4 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $r5 = $r4[i1];
        r2 = $r5;
        if $r5 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);
        if $z0 == 0 goto label2;

        specialinvoke r0.<java.util.ArrayDeque: boolean delete(int)>(i1);
        return 1;

     label2:
        $i3 = i1 + 1;
        i1 = $i3 & i0;
        goto label1;

     label3:
        return 0;
    }

    public boolean removeLastOccurrence(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1, r2, $r5;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r3, $r4;
        boolean $z0;

        r0 := @this: java.util.ArrayDeque;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        return 0;

     label0:
        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i2 = lengthof $r3;
        i0 = $i2 - 1;
        $i3 = r0.<java.util.ArrayDeque: int tail>;
        $i4 = $i3 - 1;
        i1 = $i4 & i0;

     label1:
        $r4 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $r5 = $r4[i1];
        r2 = $r5;
        if $r5 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);
        if $z0 == 0 goto label2;

        specialinvoke r0.<java.util.ArrayDeque: boolean delete(int)>(i1);
        return 1;

     label2:
        $i5 = i1 - 1;
        i1 = $i5 & i0;
        goto label1;

     label3:
        return 0;
    }

    public boolean add(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;

        r0 := @this: java.util.ArrayDeque;
        r1 := @parameter0: java.lang.Object;
        virtualinvoke r0.<java.util.ArrayDeque: void addLast(java.lang.Object)>(r1);
        return 1;
    }

    public boolean offer(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.ArrayDeque;
        r1 := @parameter0: java.lang.Object;
        $z0 = virtualinvoke r0.<java.util.ArrayDeque: boolean offerLast(java.lang.Object)>(r1);
        return $z0;
    }

    public java.lang.Object remove()
    {
        java.util.ArrayDeque r0;
        java.lang.Object $r1;

        r0 := @this: java.util.ArrayDeque;
        $r1 = virtualinvoke r0.<java.util.ArrayDeque: java.lang.Object removeFirst()>();
        return $r1;
    }

    public java.lang.Object poll()
    {
        java.util.ArrayDeque r0;
        java.lang.Object $r1;

        r0 := @this: java.util.ArrayDeque;
        $r1 = virtualinvoke r0.<java.util.ArrayDeque: java.lang.Object pollFirst()>();
        return $r1;
    }

    public java.lang.Object element()
    {
        java.util.ArrayDeque r0;
        java.lang.Object $r1;

        r0 := @this: java.util.ArrayDeque;
        $r1 = virtualinvoke r0.<java.util.ArrayDeque: java.lang.Object getFirst()>();
        return $r1;
    }

    public java.lang.Object peek()
    {
        java.util.ArrayDeque r0;
        java.lang.Object $r1;

        r0 := @this: java.util.ArrayDeque;
        $r1 = virtualinvoke r0.<java.util.ArrayDeque: java.lang.Object peekFirst()>();
        return $r1;
    }

    public void push(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;

        r0 := @this: java.util.ArrayDeque;
        r1 := @parameter0: java.lang.Object;
        virtualinvoke r0.<java.util.ArrayDeque: void addFirst(java.lang.Object)>(r1);
        return;
    }

    public java.lang.Object pop()
    {
        java.util.ArrayDeque r0;
        java.lang.Object $r1;

        r0 := @this: java.util.ArrayDeque;
        $r1 = virtualinvoke r0.<java.util.ArrayDeque: java.lang.Object removeFirst()>();
        return $r1;
    }

    private void checkInvariants()
    {
        java.util.ArrayDeque r0;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r1, $r4, $r6, $r8, $r9, $r12, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.Object $r2, $r5, $r7, $r10, $r14;
        java.lang.AssertionError $r3, $r11, $r15;

        r0 := @this: java.util.ArrayDeque;
        $z0 = <java.util.ArrayDeque: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r1 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i0 = r0.<java.util.ArrayDeque: int tail>;
        $r2 = $r1[$i0];
        if $r2 == null goto label0;

        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label0:
        $z1 = <java.util.ArrayDeque: boolean $assertionsDisabled>;
        if $z1 != 0 goto label3;

        $i1 = r0.<java.util.ArrayDeque: int head>;
        $i2 = r0.<java.util.ArrayDeque: int tail>;
        if $i1 != $i2 goto label1;

        $r4 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i3 = r0.<java.util.ArrayDeque: int head>;
        $r5 = $r4[$i3];
        if $r5 != null goto label2;

        goto label3;

     label1:
        $r6 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i4 = r0.<java.util.ArrayDeque: int head>;
        $r7 = $r6[$i4];
        if $r7 == null goto label2;

        $r8 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i5 = r0.<java.util.ArrayDeque: int tail>;
        $i6 = $i5 - 1;
        $r9 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i7 = lengthof $r9;
        $i8 = $i7 - 1;
        $i9 = $i6 & $i8;
        $r10 = $r8[$i9];
        if $r10 != null goto label3;

     label2:
        $r11 = new java.lang.AssertionError;
        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();
        throw $r11;

     label3:
        $z2 = <java.util.ArrayDeque: boolean $assertionsDisabled>;
        if $z2 != 0 goto label4;

        $r12 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i10 = r0.<java.util.ArrayDeque: int head>;
        $i11 = $i10 - 1;
        $r13 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i12 = lengthof $r13;
        $i13 = $i12 - 1;
        $i14 = $i11 & $i13;
        $r14 = $r12[$i14];
        if $r14 == null goto label4;

        $r15 = new java.lang.AssertionError;
        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();
        throw $r15;

     label4:
        return;
    }

    private boolean delete(int)
    {
        java.util.ArrayDeque r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        java.lang.Object[] r1;
        java.util.ConcurrentModificationException $r2;
        java.lang.Object $r3, $r4;

        r0 := @this: java.util.ArrayDeque;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.ArrayDeque: void checkInvariants()>();
        r1 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i6 = lengthof r1;
        i1 = $i6 - 1;
        i2 = r0.<java.util.ArrayDeque: int head>;
        i3 = r0.<java.util.ArrayDeque: int tail>;
        $i7 = i0 - i2;
        i4 = $i7 & i1;
        $i8 = i3 - i0;
        i5 = $i8 & i1;
        $i9 = i3 - i2;
        $i10 = $i9 & i1;
        if i4 < $i10 goto label0;

        $r2 = new java.util.ConcurrentModificationException;
        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r2;

     label0:
        if i4 >= i5 goto label3;

        if i2 > i0 goto label1;

        $i11 = i2 + 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i2, r1, $i11, i4);
        goto label2;

     label1:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r1, 1, i0);
        $r3 = r1[i1];
        r1[0] = $r3;
        $i12 = i2 + 1;
        $i13 = i1 - i2;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i2, r1, $i12, $i13);

     label2:
        r1[i2] = null;
        $i14 = i2 + 1;
        $i15 = $i14 & i1;
        r0.<java.util.ArrayDeque: int head> = $i15;
        return 0;

     label3:
        if i0 >= i3 goto label4;

        $i16 = i0 + 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i16, r1, i0, i5);
        $i17 = i3 - 1;
        r0.<java.util.ArrayDeque: int tail> = $i17;
        goto label5;

     label4:
        $i18 = i0 + 1;
        $i19 = i1 - i0;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i18, r1, i0, $i19);
        $r4 = r1[0];
        r1[i1] = $r4;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 1, r1, 0, i3);
        $i20 = i3 - 1;
        $i21 = $i20 & i1;
        r0.<java.util.ArrayDeque: int tail> = $i21;

     label5:
        return 1;
    }

    public int size()
    {
        java.util.ArrayDeque r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r1;

        r0 := @this: java.util.ArrayDeque;
        $i0 = r0.<java.util.ArrayDeque: int tail>;
        $i1 = r0.<java.util.ArrayDeque: int head>;
        $i2 = $i0 - $i1;
        $r1 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i3 = lengthof $r1;
        $i4 = $i3 - 1;
        $i5 = $i2 & $i4;
        return $i5;
    }

    public boolean isEmpty()
    {
        java.util.ArrayDeque r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.util.ArrayDeque;
        $i0 = r0.<java.util.ArrayDeque: int head>;
        $i1 = r0.<java.util.ArrayDeque: int tail>;
        if $i0 != $i1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.ArrayDeque r0;
        java.util.ArrayDeque$DeqIterator $r1;

        r0 := @this: java.util.ArrayDeque;
        $r1 = new java.util.ArrayDeque$DeqIterator;
        specialinvoke $r1.<java.util.ArrayDeque$DeqIterator: void <init>(java.util.ArrayDeque,java.util.ArrayDeque$1)>(r0, null);
        return $r1;
    }

    public java.util.Iterator descendingIterator()
    {
        java.util.ArrayDeque r0;
        java.util.ArrayDeque$DescendingIterator $r1;

        r0 := @this: java.util.ArrayDeque;
        $r1 = new java.util.ArrayDeque$DescendingIterator;
        specialinvoke $r1.<java.util.ArrayDeque$DescendingIterator: void <init>(java.util.ArrayDeque,java.util.ArrayDeque$1)>(r0, null);
        return $r1;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1, r2, $r5;
        int i0, i1, $i2, $i3;
        java.lang.Object[] $r3, $r4;
        boolean $z0;

        r0 := @this: java.util.ArrayDeque;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        return 0;

     label0:
        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i2 = lengthof $r3;
        i0 = $i2 - 1;
        i1 = r0.<java.util.ArrayDeque: int head>;

     label1:
        $r4 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $r5 = $r4[i1];
        r2 = $r5;
        if $r5 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);
        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i3 = i1 + 1;
        i1 = $i3 & i0;
        goto label1;

     label3:
        return 0;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.ArrayDeque;
        r1 := @parameter0: java.lang.Object;
        $z0 = virtualinvoke r0.<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>(r1);
        return $z0;
    }

    public void clear()
    {
        java.util.ArrayDeque r0;
        int i0, i1, i3, i4, $i5, $i6;
        byte $b2;
        java.lang.Object[] $r1, $r2;

        r0 := @this: java.util.ArrayDeque;
        i0 = r0.<java.util.ArrayDeque: int head>;
        i1 = r0.<java.util.ArrayDeque: int tail>;
        if i0 == i1 goto label1;

        $b2 = 0;
        r0.<java.util.ArrayDeque: int tail> = $b2;
        r0.<java.util.ArrayDeque: int head> = $b2;
        i3 = i0;
        $r1 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i5 = lengthof $r1;
        i4 = $i5 - 1;

     label0:
        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $r2[i3] = null;
        $i6 = i3 + 1;
        i3 = $i6 & i4;
        if i3 != i1 goto label0;

     label1:
        return;
    }

    public java.lang.Object[] toArray()
    {
        java.util.ArrayDeque r0;
        int $i0;
        java.lang.Object[] $r1, $r2;

        r0 := @this: java.util.ArrayDeque;
        $i0 = virtualinvoke r0.<java.util.ArrayDeque: int size()>();
        $r1 = newarray (java.lang.Object)[$i0];
        $r2 = specialinvoke r0.<java.util.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>($r1);
        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.ArrayDeque r0;
        java.lang.Object[] r1, $r5;
        int i0, $i1, $i2;
        java.lang.Class $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: java.util.ArrayDeque;
        r1 := @parameter0: java.lang.Object[];
        i0 = virtualinvoke r0.<java.util.ArrayDeque: int size()>();
        $i1 = lengthof r1;
        if $i1 >= i0 goto label0;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>();
        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r3, i0);
        $r5 = (java.lang.Object[]) $r4;
        r1 = (java.lang.Object[]) $r5;

     label0:
        specialinvoke r0.<java.util.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>(r1);
        $i2 = lengthof r1;
        if $i2 <= i0 goto label1;

        r1[i0] = null;

     label1:
        return r1;
    }

    public java.util.ArrayDeque clone()
    {
        java.util.ArrayDeque r0, r1;
        java.lang.Object $r2;
        java.lang.Object[] $r3, $r4, $r5;
        int $i0;
        java.lang.CloneNotSupportedException $r7, r8;
        java.lang.AssertionError $r9;

        r0 := @this: java.util.ArrayDeque;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        r1 = (java.util.ArrayDeque) $r2;
        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $r4 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i0 = lengthof $r4;
        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0);
        r1.<java.util.ArrayDeque: java.lang.Object[] elements> = $r5;

     label1:
        return r1;

     label2:
        $r7 := @caughtexception;
        r8 = $r7;
        $r9 = new java.lang.AssertionError;
        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();
        throw $r9;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.ArrayDeque r0;
        java.io.ObjectOutputStream r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: java.util.ArrayDeque;
        r1 := @parameter0: java.io.ObjectOutputStream;
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        $i2 = virtualinvoke r0.<java.util.ArrayDeque: int size()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i2);
        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $i3 = lengthof $r2;
        i0 = $i3 - 1;
        i1 = r0.<java.util.ArrayDeque: int head>;

     label0:
        $i4 = r0.<java.util.ArrayDeque: int tail>;
        if i1 == $i4 goto label1;

        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $r4 = $r3[i1];
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r4);
        $i5 = i1 + 1;
        i1 = $i5 & i0;
        goto label0;

     label1:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.ArrayDeque r0;
        java.io.ObjectInputStream r1;
        int i0, i1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.ArrayDeque;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();
        specialinvoke r0.<java.util.ArrayDeque: void allocateElements(int)>(i0);
        r0.<java.util.ArrayDeque: int head> = 0;
        r0.<java.util.ArrayDeque: int tail> = i0;
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        $r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        $r2[i1] = $r3;
        i1 = i1 + 1;
        goto label0;

     label1:
        return;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.util.ArrayDeque r0, $r1;

        r0 := @this: java.util.ArrayDeque;
        $r1 = virtualinvoke r0.<java.util.ArrayDeque: java.util.ArrayDeque clone()>();
        return $r1;
    }

    static int access$200(java.util.ArrayDeque)
    {
        java.util.ArrayDeque r0;
        int $i0;

        r0 := @parameter0: java.util.ArrayDeque;
        $i0 = r0.<java.util.ArrayDeque: int head>;
        return $i0;
    }

    static int access$300(java.util.ArrayDeque)
    {
        java.util.ArrayDeque r0;
        int $i0;

        r0 := @parameter0: java.util.ArrayDeque;
        $i0 = r0.<java.util.ArrayDeque: int tail>;
        return $i0;
    }

    static java.lang.Object[] access$400(java.util.ArrayDeque)
    {
        java.util.ArrayDeque r0;
        java.lang.Object[] $r1;

        r0 := @parameter0: java.util.ArrayDeque;
        $r1 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;
        return $r1;
    }

    static boolean access$500(java.util.ArrayDeque, int)
    {
        java.util.ArrayDeque r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: java.util.ArrayDeque;
        i0 := @parameter1: int;
        $z0 = specialinvoke r0.<java.util.ArrayDeque: boolean delete(int)>(i0);
        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/util/ArrayDeque";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.util.ArrayDeque: boolean $assertionsDisabled> = $z1;
        return;
    }
}
