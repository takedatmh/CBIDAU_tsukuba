class javax.crypto.CryptoPermission extends java.security.Permission
{
    private static final long serialVersionUID;
    private java.lang.String alg;
    private int maxKeySize;
    private java.lang.String exemptionMechanism;
    private java.security.spec.AlgorithmParameterSpec algParamSpec;
    private boolean checkParam;
    static final java.lang.String ALG_NAME_WILDCARD;

    void <init>(java.lang.String)
    {
        javax.crypto.CryptoPermission r0;
        java.lang.String r1;

        r0 := @this: javax.crypto.CryptoPermission;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.security.Permission: void <init>(java.lang.String)>(null);
        r0.<javax.crypto.CryptoPermission: int maxKeySize> = 2147483647;
        r0.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism> = null;
        r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec> = null;
        r0.<javax.crypto.CryptoPermission: boolean checkParam> = 0;
        r0.<javax.crypto.CryptoPermission: java.lang.String alg> = r1;
        return;
    }

    void <init>(java.lang.String, int)
    {
        javax.crypto.CryptoPermission r0;
        java.lang.String r1;
        int i0;

        r0 := @this: javax.crypto.CryptoPermission;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        specialinvoke r0.<java.security.Permission: void <init>(java.lang.String)>(null);
        r0.<javax.crypto.CryptoPermission: int maxKeySize> = 2147483647;
        r0.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism> = null;
        r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec> = null;
        r0.<javax.crypto.CryptoPermission: boolean checkParam> = 0;
        r0.<javax.crypto.CryptoPermission: java.lang.String alg> = r1;
        r0.<javax.crypto.CryptoPermission: int maxKeySize> = i0;
        return;
    }

    void <init>(java.lang.String, int, java.security.spec.AlgorithmParameterSpec)
    {
        javax.crypto.CryptoPermission r0;
        java.lang.String r1;
        int i0;
        java.security.spec.AlgorithmParameterSpec r2;

        r0 := @this: javax.crypto.CryptoPermission;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r2 := @parameter2: java.security.spec.AlgorithmParameterSpec;
        specialinvoke r0.<java.security.Permission: void <init>(java.lang.String)>(null);
        r0.<javax.crypto.CryptoPermission: int maxKeySize> = 2147483647;
        r0.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism> = null;
        r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec> = null;
        r0.<javax.crypto.CryptoPermission: boolean checkParam> = 0;
        r0.<javax.crypto.CryptoPermission: java.lang.String alg> = r1;
        r0.<javax.crypto.CryptoPermission: int maxKeySize> = i0;
        r0.<javax.crypto.CryptoPermission: boolean checkParam> = 1;
        r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec> = r2;
        return;
    }

    void <init>(java.lang.String, java.lang.String)
    {
        javax.crypto.CryptoPermission r0;
        java.lang.String r1, r2;

        r0 := @this: javax.crypto.CryptoPermission;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        specialinvoke r0.<java.security.Permission: void <init>(java.lang.String)>(null);
        r0.<javax.crypto.CryptoPermission: int maxKeySize> = 2147483647;
        r0.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism> = null;
        r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec> = null;
        r0.<javax.crypto.CryptoPermission: boolean checkParam> = 0;
        r0.<javax.crypto.CryptoPermission: java.lang.String alg> = r1;
        r0.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism> = r2;
        return;
    }

    void <init>(java.lang.String, int, java.lang.String)
    {
        javax.crypto.CryptoPermission r0;
        java.lang.String r1, r2;
        int i0;

        r0 := @this: javax.crypto.CryptoPermission;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.String;
        specialinvoke r0.<java.security.Permission: void <init>(java.lang.String)>(null);
        r0.<javax.crypto.CryptoPermission: int maxKeySize> = 2147483647;
        r0.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism> = null;
        r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec> = null;
        r0.<javax.crypto.CryptoPermission: boolean checkParam> = 0;
        r0.<javax.crypto.CryptoPermission: java.lang.String alg> = r1;
        r0.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism> = r2;
        r0.<javax.crypto.CryptoPermission: int maxKeySize> = i0;
        return;
    }

    void <init>(java.lang.String, int, java.security.spec.AlgorithmParameterSpec, java.lang.String)
    {
        javax.crypto.CryptoPermission r0;
        java.lang.String r1, r3;
        int i0;
        java.security.spec.AlgorithmParameterSpec r2;

        r0 := @this: javax.crypto.CryptoPermission;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r2 := @parameter2: java.security.spec.AlgorithmParameterSpec;
        r3 := @parameter3: java.lang.String;
        specialinvoke r0.<java.security.Permission: void <init>(java.lang.String)>(null);
        r0.<javax.crypto.CryptoPermission: int maxKeySize> = 2147483647;
        r0.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism> = null;
        r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec> = null;
        r0.<javax.crypto.CryptoPermission: boolean checkParam> = 0;
        r0.<javax.crypto.CryptoPermission: java.lang.String alg> = r1;
        r0.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism> = r3;
        r0.<javax.crypto.CryptoPermission: int maxKeySize> = i0;
        r0.<javax.crypto.CryptoPermission: boolean checkParam> = 1;
        r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec> = r2;
        return;
    }

    public boolean implies(java.security.Permission)
    {
        javax.crypto.CryptoPermission r0, r2;
        java.security.Permission r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.String $r3, $r4, $r5, $r7;
        int $i0, $i1;
        java.security.spec.AlgorithmParameterSpec $r6;

        r0 := @this: javax.crypto.CryptoPermission;
        r1 := @parameter0: java.security.Permission;
        $z0 = r1 instanceof javax.crypto.CryptoPermission;
        if $z0 != 0 goto label0;

        return 0;

     label0:
        r2 = (javax.crypto.CryptoPermission) r1;
        $r3 = r0.<javax.crypto.CryptoPermission: java.lang.String alg>;
        $r4 = r2.<javax.crypto.CryptoPermission: java.lang.String alg>;
        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);
        if $z1 != 0 goto label1;

        $r5 = r0.<javax.crypto.CryptoPermission: java.lang.String alg>;
        $z2 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("*");
        if $z2 != 0 goto label1;

        return 0;

     label1:
        $i0 = r2.<javax.crypto.CryptoPermission: int maxKeySize>;
        $i1 = r0.<javax.crypto.CryptoPermission: int maxKeySize>;
        if $i0 > $i1 goto label3;

        $z3 = r2.<javax.crypto.CryptoPermission: boolean checkParam>;
        $r6 = r2.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        $z4 = specialinvoke r0.<javax.crypto.CryptoPermission: boolean impliesParameterSpec(boolean,java.security.spec.AlgorithmParameterSpec)>($z3, $r6);
        if $z4 != 0 goto label2;

        return 0;

     label2:
        $r7 = r2.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism>;
        $z5 = specialinvoke r0.<javax.crypto.CryptoPermission: boolean impliesExemptionMechanism(java.lang.String)>($r7);
        if $z5 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        javax.crypto.CryptoPermission r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String $r3, $r4, $r5, $r6;
        int $i0, $i1;
        java.security.spec.AlgorithmParameterSpec $r7, $r8;

        r0 := @this: javax.crypto.CryptoPermission;
        r1 := @parameter0: java.lang.Object;
        if r1 != r0 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof javax.crypto.CryptoPermission;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (javax.crypto.CryptoPermission) r1;
        $r3 = r0.<javax.crypto.CryptoPermission: java.lang.String alg>;
        $r4 = r2.<javax.crypto.CryptoPermission: java.lang.String alg>;
        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);
        if $z1 == 0 goto label2;

        $i0 = r0.<javax.crypto.CryptoPermission: int maxKeySize>;
        $i1 = r2.<javax.crypto.CryptoPermission: int maxKeySize>;
        if $i0 == $i1 goto label3;

     label2:
        return 0;

     label3:
        $z2 = r0.<javax.crypto.CryptoPermission: boolean checkParam>;
        $z3 = r2.<javax.crypto.CryptoPermission: boolean checkParam>;
        if $z2 == $z3 goto label4;

        return 0;

     label4:
        $r5 = r0.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism>;
        $r6 = r2.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism>;
        $z4 = specialinvoke r0.<javax.crypto.CryptoPermission: boolean equalObjects(java.lang.Object,java.lang.Object)>($r5, $r6);
        if $z4 == 0 goto label5;

        $r7 = r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        $r8 = r2.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        $z5 = specialinvoke r0.<javax.crypto.CryptoPermission: boolean equalObjects(java.lang.Object,java.lang.Object)>($r7, $r8);
        if $z5 == 0 goto label5;

        $z6 = 1;
        goto label6;

     label5:
        $z6 = 0;

     label6:
        return $z6;
    }

    public int hashCode()
    {
        javax.crypto.CryptoPermission r0;
        int i0, $i1, i2, $i3, $i4;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;
        java.security.spec.AlgorithmParameterSpec $r4, $r5;

        r0 := @this: javax.crypto.CryptoPermission;
        $r1 = r0.<javax.crypto.CryptoPermission: java.lang.String alg>;
        i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();
        $i1 = r0.<javax.crypto.CryptoPermission: int maxKeySize>;
        i2 = i0 ^ $i1;
        $r2 = r0.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism>;
        if $r2 == null goto label0;

        $r3 = r0.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism>;
        $i3 = virtualinvoke $r3.<java.lang.String: int hashCode()>();
        i2 = i2 ^ $i3;

     label0:
        $z0 = r0.<javax.crypto.CryptoPermission: boolean checkParam>;
        if $z0 == 0 goto label1;

        i2 = i2 ^ 100;

     label1:
        $r4 = r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        if $r4 == null goto label2;

        $r5 = r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        $i4 = virtualinvoke $r5.<java.lang.Object: int hashCode()>();
        i2 = i2 ^ $i4;

     label2:
        return i2;
    }

    public java.lang.String getActions()
    {
        javax.crypto.CryptoPermission r0;

        r0 := @this: javax.crypto.CryptoPermission;
        return null;
    }

    public java.security.PermissionCollection newPermissionCollection()
    {
        javax.crypto.CryptoPermission r0;
        javax.crypto.CryptoPermissionCollection $r1;

        r0 := @this: javax.crypto.CryptoPermission;
        $r1 = new javax.crypto.CryptoPermissionCollection;
        specialinvoke $r1.<javax.crypto.CryptoPermissionCollection: void <init>()>();
        return $r1;
    }

    final java.lang.String getAlgorithm()
    {
        javax.crypto.CryptoPermission r0;
        java.lang.String $r1;

        r0 := @this: javax.crypto.CryptoPermission;
        $r1 = r0.<javax.crypto.CryptoPermission: java.lang.String alg>;
        return $r1;
    }

    final java.lang.String getExemptionMechanism()
    {
        javax.crypto.CryptoPermission r0;
        java.lang.String $r1;

        r0 := @this: javax.crypto.CryptoPermission;
        $r1 = r0.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism>;
        return $r1;
    }

    final int getMaxKeySize()
    {
        javax.crypto.CryptoPermission r0;
        int $i0;

        r0 := @this: javax.crypto.CryptoPermission;
        $i0 = r0.<javax.crypto.CryptoPermission: int maxKeySize>;
        return $i0;
    }

    final boolean getCheckParam()
    {
        javax.crypto.CryptoPermission r0;
        boolean $z0;

        r0 := @this: javax.crypto.CryptoPermission;
        $z0 = r0.<javax.crypto.CryptoPermission: boolean checkParam>;
        return $z0;
    }

    final java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()
    {
        javax.crypto.CryptoPermission r0;
        java.security.spec.AlgorithmParameterSpec $r1;

        r0 := @this: javax.crypto.CryptoPermission;
        $r1 = r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        return $r1;
    }

    public java.lang.String toString()
    {
        javax.crypto.CryptoPermission r0;
        java.lang.StringBuilder $r1, r2, $r3, $r4, $r6, $r7, $r8, $r13, $r14, $r17, $r21, $r22, $r25, $r29, $r30, $r32;
        java.lang.String $r5, $r9, $r18, $r26, $r28, $r31, $r33, $r36;
        int $i0, $i1, $i2;
        java.security.spec.AlgorithmParameterSpec $r11, $r12, $r15, $r20, $r23;
        boolean $z0, $z1;
        javax.crypto.spec.RC2ParameterSpec $r16;
        javax.crypto.spec.RC5ParameterSpec $r24;

        r0 := @this: javax.crypto.CryptoPermission;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(100);
        r2 = $r1;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(CryptoPermission ");
        $r5 = r0.<javax.crypto.CryptoPermission: java.lang.String alg>;
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $i0 = r0.<javax.crypto.CryptoPermission: int maxKeySize>;
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        $r11 = r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        if $r11 == null goto label1;

        $r12 = r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        $z0 = $r12 instanceof javax.crypto.spec.RC2ParameterSpec;
        if $z0 == 0 goto label0;

        $r13 = new java.lang.StringBuilder;
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" , effective ");
        $r15 = r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        $r16 = (javax.crypto.spec.RC2ParameterSpec) $r15;
        $i1 = virtualinvoke $r16.<javax.crypto.spec.RC2ParameterSpec: int getEffectiveKeyBits()>();
        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
        goto label1;

     label0:
        $r20 = r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        $z1 = $r20 instanceof javax.crypto.spec.RC5ParameterSpec;
        if $z1 == 0 goto label1;

        $r21 = new java.lang.StringBuilder;
        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" , rounds ");
        $r23 = r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        $r24 = (javax.crypto.spec.RC5ParameterSpec) $r23;
        $i2 = virtualinvoke $r24.<javax.crypto.spec.RC5ParameterSpec: int getRounds()>();
        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

     label1:
        $r28 = r0.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism>;
        if $r28 == null goto label2;

        $r29 = new java.lang.StringBuilder;
        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r31 = r0.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism>;
        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

     label2:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r36 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r36;
    }

    private boolean impliesExemptionMechanism(java.lang.String)
    {
        javax.crypto.CryptoPermission r0;
        java.lang.String r1, $r2, $r3;
        boolean $z0;

        r0 := @this: javax.crypto.CryptoPermission;
        r1 := @parameter0: java.lang.String;
        $r2 = r0.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism>;
        if $r2 != null goto label0;

        return 1;

     label0:
        if r1 != null goto label1;

        return 0;

     label1:
        $r3 = r0.<javax.crypto.CryptoPermission: java.lang.String exemptionMechanism>;
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private boolean impliesParameterSpec(boolean, java.security.spec.AlgorithmParameterSpec)
    {
        javax.crypto.CryptoPermission r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.security.spec.AlgorithmParameterSpec r1, $r2, $r3, $r7, $r11, $r14, $r16;
        java.lang.Class $r4, $r5;
        javax.crypto.spec.RC2ParameterSpec $r6, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        javax.crypto.spec.RC5ParameterSpec $r10, $r12;
        javax.crypto.spec.PBEParameterSpec $r13, $r15;

        r0 := @this: javax.crypto.CryptoPermission;
        z0 := @parameter0: boolean;
        r1 := @parameter1: java.security.spec.AlgorithmParameterSpec;
        $z1 = r0.<javax.crypto.CryptoPermission: boolean checkParam>;
        if $z1 == 0 goto label7;

        if z0 == 0 goto label7;

        if r1 != null goto label0;

        return 1;

     label0:
        $r2 = r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        if $r4 == $r5 goto label2;

        return 0;

     label2:
        $z2 = r1 instanceof javax.crypto.spec.RC2ParameterSpec;
        if $z2 == 0 goto label3;

        $r6 = (javax.crypto.spec.RC2ParameterSpec) r1;
        $i0 = virtualinvoke $r6.<javax.crypto.spec.RC2ParameterSpec: int getEffectiveKeyBits()>();
        $r7 = r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        $r8 = (javax.crypto.spec.RC2ParameterSpec) $r7;
        $r9 = (javax.crypto.spec.RC2ParameterSpec) $r8;
        $i1 = virtualinvoke $r9.<javax.crypto.spec.RC2ParameterSpec: int getEffectiveKeyBits()>();
        if $i0 > $i1 goto label3;

        return 1;

     label3:
        $z3 = r1 instanceof javax.crypto.spec.RC5ParameterSpec;
        if $z3 == 0 goto label4;

        $r10 = (javax.crypto.spec.RC5ParameterSpec) r1;
        $i2 = virtualinvoke $r10.<javax.crypto.spec.RC5ParameterSpec: int getRounds()>();
        $r11 = r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        $r12 = (javax.crypto.spec.RC5ParameterSpec) $r11;
        $i3 = virtualinvoke $r12.<javax.crypto.spec.RC5ParameterSpec: int getRounds()>();
        if $i2 > $i3 goto label4;

        return 1;

     label4:
        $z4 = r1 instanceof javax.crypto.spec.PBEParameterSpec;
        if $z4 == 0 goto label5;

        $r13 = (javax.crypto.spec.PBEParameterSpec) r1;
        $i4 = virtualinvoke $r13.<javax.crypto.spec.PBEParameterSpec: int getIterationCount()>();
        $r14 = r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        $r15 = (javax.crypto.spec.PBEParameterSpec) $r14;
        $i5 = virtualinvoke $r15.<javax.crypto.spec.PBEParameterSpec: int getIterationCount()>();
        if $i4 > $i5 goto label5;

        return 1;

     label5:
        $r16 = r0.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec algParamSpec>;
        $z5 = virtualinvoke $r16.<java.lang.Object: boolean equals(java.lang.Object)>(r1);
        if $z5 == 0 goto label6;

        return 1;

     label6:
        return 0;

     label7:
        $z6 = r0.<javax.crypto.CryptoPermission: boolean checkParam>;
        if $z6 == 0 goto label8;

        return 0;

     label8:
        return 1;
    }

    private boolean equalObjects(java.lang.Object, java.lang.Object)
    {
        javax.crypto.CryptoPermission r0;
        java.lang.Object r1, r2;
        boolean $z0, $z1;

        r0 := @this: javax.crypto.CryptoPermission;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        if r1 != null goto label2;

        if r2 != null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;

     label2:
        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);
        return $z1;
    }
}
