public class java.util.zip.Adler32 extends java.lang.Object implements java.util.zip.Checksum
{
    private int adler;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        java.util.zip.Adler32 r0;

        r0 := @this: java.util.zip.Adler32;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.zip.Adler32: int adler> = 1;
        return;
    }

    public void update(int)
    {
        java.util.zip.Adler32 r0;
        int i0, $i1, $i2;

        r0 := @this: java.util.zip.Adler32;
        i0 := @parameter0: int;
        $i1 = r0.<java.util.zip.Adler32: int adler>;
        $i2 = staticinvoke <java.util.zip.Adler32: int update(int,int)>($i1, i0);
        r0.<java.util.zip.Adler32: int adler> = $i2;
        return;
    }

    public void update(byte[], int, int)
    {
        java.util.zip.Adler32 r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.NullPointerException $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;

        r0 := @this: java.util.zip.Adler32;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i2 = lengthof r1;
        $i3 = $i2 - i1;
        if i0 <= $i3 goto label2;

     label1:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;
        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();
        throw $r3;

     label2:
        $i4 = r0.<java.util.zip.Adler32: int adler>;
        $i5 = staticinvoke <java.util.zip.Adler32: int updateBytes(int,byte[],int,int)>($i4, r1, i0, i1);
        r0.<java.util.zip.Adler32: int adler> = $i5;
        return;
    }

    public void update(byte[])
    {
        java.util.zip.Adler32 r0;
        byte[] r1;
        int $i0, $i1, $i2;

        r0 := @this: java.util.zip.Adler32;
        r1 := @parameter0: byte[];
        $i0 = r0.<java.util.zip.Adler32: int adler>;
        $i1 = lengthof r1;
        $i2 = staticinvoke <java.util.zip.Adler32: int updateBytes(int,byte[],int,int)>($i0, r1, 0, $i1);
        r0.<java.util.zip.Adler32: int adler> = $i2;
        return;
    }

    private void update(java.nio.ByteBuffer)
    {
        java.util.zip.Adler32 r0;
        java.nio.ByteBuffer r1;
        int i0, i1, i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        byte[] r2, $r5;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r3;
        sun.nio.ch.DirectBuffer $r4;
        long $l4;

        r0 := @this: java.util.zip.Adler32;
        r1 := @parameter0: java.nio.ByteBuffer;
        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();
        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();
        $z0 = <java.util.zip.Adler32: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label0:
        i2 = i1 - i0;
        if i2 > 0 goto label1;

        return;

     label1:
        $z1 = r1 instanceof sun.nio.ch.DirectBuffer;
        if $z1 == 0 goto label2;

        $i3 = r0.<java.util.zip.Adler32: int adler>;
        $r4 = (sun.nio.ch.DirectBuffer) r1;
        $l4 = interfaceinvoke $r4.<sun.nio.ch.DirectBuffer: long address()>();
        $i5 = staticinvoke <java.util.zip.Adler32: int updateByteBuffer(int,long,int,int)>($i3, $l4, i0, i2);
        r0.<java.util.zip.Adler32: int adler> = $i5;
        goto label4;

     label2:
        $z2 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();
        if $z2 == 0 goto label3;

        $i6 = r0.<java.util.zip.Adler32: int adler>;
        $r5 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();
        $i7 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();
        $i8 = i0 + $i7;
        $i9 = staticinvoke <java.util.zip.Adler32: int updateBytes(int,byte[],int,int)>($i6, $r5, $i8, i2);
        r0.<java.util.zip.Adler32: int adler> = $i9;
        goto label4;

     label3:
        r2 = newarray (byte)[i2];
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r2);
        $i10 = r0.<java.util.zip.Adler32: int adler>;
        $i11 = lengthof r2;
        $i12 = staticinvoke <java.util.zip.Adler32: int updateBytes(int,byte[],int,int)>($i10, r2, 0, $i11);
        r0.<java.util.zip.Adler32: int adler> = $i12;

     label4:
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1);
        return;
    }

    public void reset()
    {
        java.util.zip.Adler32 r0;

        r0 := @this: java.util.zip.Adler32;
        r0.<java.util.zip.Adler32: int adler> = 1;
        return;
    }

    public long getValue()
    {
        java.util.zip.Adler32 r0;
        int $i0;
        long $l1, $l2;

        r0 := @this: java.util.zip.Adler32;
        $i0 = r0.<java.util.zip.Adler32: int adler>;
        $l1 = (long) $i0;
        $l2 = $l1 & 4294967295L;
        return $l2;
    }

    private static native int update(int, int);

    private static native int updateBytes(int, byte[], int, int);

    private static native int updateByteBuffer(int, long, int, int);

    static void access$000(java.util.zip.Adler32, java.nio.ByteBuffer)
    {
        java.util.zip.Adler32 r0;
        java.nio.ByteBuffer r1;

        r0 := @parameter0: java.util.zip.Adler32;
        r1 := @parameter1: java.nio.ByteBuffer;
        specialinvoke r0.<java.util.zip.Adler32: void update(java.nio.ByteBuffer)>(r1);
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.util.zip.Adler32$1 $r1;

        $r0 = class "java/util/zip/Adler32";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.util.zip.Adler32: boolean $assertionsDisabled> = $z1;
        $r1 = new java.util.zip.Adler32$1;
        specialinvoke $r1.<java.util.zip.Adler32$1: void <init>()>();
        staticinvoke <sun.misc.SharedSecrets: void setJavaUtilZipAccess(sun.misc.JavaUtilZipAccess)>($r1);
        return;
    }
}
