final class java.util.regex.Pattern$StartS extends java.util.regex.Pattern$Start
{

    void <init>(java.util.regex.Pattern$Node)
    {
        java.util.regex.Pattern$StartS r0;
        java.util.regex.Pattern$Node r1;

        r0 := @this: java.util.regex.Pattern$StartS;
        r1 := @parameter0: java.util.regex.Pattern$Node;
        specialinvoke r0.<java.util.regex.Pattern$Start: void <init>(java.util.regex.Pattern$Node)>(r1);
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$StartS r0;
        java.util.regex.Matcher r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;
        java.lang.CharSequence r2;
        java.util.regex.Pattern$Node $r3;
        boolean $z0, $z1, $z2;
        int[] $r4, $r5;
        char $c10, $c12;

        r0 := @this: java.util.regex.Pattern$StartS;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $i2 = r1.<java.util.regex.Matcher: int 'to'>;
        $i3 = r0.<java.util.regex.Pattern$StartS: int minLength>;
        $i4 = $i2 - $i3;
        if i0 <= $i4 goto label0;

        r1.<java.util.regex.Matcher: boolean hitEnd> = 1;
        return 0;

     label0:
        $i5 = r1.<java.util.regex.Matcher: int 'to'>;
        $i6 = r0.<java.util.regex.Pattern$StartS: int minLength>;
        i1 = $i5 - $i6;

     label1:
        if i0 > i1 goto label4;

        $r3 = r0.<java.util.regex.Pattern$StartS: java.util.regex.Pattern$Node next>;
        $z0 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z0 == 0 goto label2;

        r1.<java.util.regex.Matcher: int first> = i0;
        $r4 = r1.<java.util.regex.Matcher: int[] groups>;
        $i7 = r1.<java.util.regex.Matcher: int first>;
        $r4[0] = $i7;
        $r5 = r1.<java.util.regex.Matcher: int[] groups>;
        $i8 = r1.<java.util.regex.Matcher: int last>;
        $r5[1] = $i8;
        return 1;

     label2:
        if i0 != i1 goto label3;

        goto label4;

     label3:
        $i9 = i0;
        i0 = i0 + 1;
        $c10 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i9);
        $z1 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c10);
        if $z1 == 0 goto label1;

        $i11 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();
        if i0 >= $i11 goto label1;

        $c12 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i0);
        $z2 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c12);
        if $z2 == 0 goto label1;

        i0 = i0 + 1;
        goto label1;

     label4:
        r1.<java.util.regex.Matcher: boolean hitEnd> = 1;
        return 0;
    }
}
