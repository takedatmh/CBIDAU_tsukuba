public class sun.net.www.MeteredStream extends java.io.FilterInputStream
{
    protected boolean closed;
    protected long expected;
    protected long count;
    protected long markedCount;
    protected int markLimit;
    protected sun.net.ProgressSource pi;

    public void <init>(java.io.InputStream, sun.net.ProgressSource, long)
    {
        sun.net.www.MeteredStream r0;
        java.io.InputStream r1;
        sun.net.ProgressSource r2;
        long l0;

        r0 := @this: sun.net.www.MeteredStream;
        r1 := @parameter0: java.io.InputStream;
        r2 := @parameter1: sun.net.ProgressSource;
        l0 := @parameter2: long;
        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);
        r0.<sun.net.www.MeteredStream: boolean closed> = 0;
        r0.<sun.net.www.MeteredStream: long count> = 0L;
        r0.<sun.net.www.MeteredStream: long markedCount> = 0L;
        r0.<sun.net.www.MeteredStream: int markLimit> = -1;
        r0.<sun.net.www.MeteredStream: sun.net.ProgressSource pi> = r2;
        r0.<sun.net.www.MeteredStream: long expected> = l0;
        if r2 == null goto label0;

        virtualinvoke r2.<sun.net.ProgressSource: void updateProgress(long,long)>(0L, l0);

     label0:
        return;
    }

    private final void justRead(long) throws java.io.IOException
    {
        sun.net.www.MeteredStream r0;
        long l0, $l2, $l3, $l4, $l5, $l6, $l8, $l10, $l11, $l12, $l14, $l15;
        byte $b1, $b9, $b13, $b16;
        boolean $z0, $z1;
        int $i7;
        sun.net.ProgressSource $r2, $r3;

        r0 := @this: sun.net.www.MeteredStream;
        l0 := @parameter0: long;
        $b1 = l0 cmp -1L;
        if $b1 != 0 goto label1;

        $z0 = specialinvoke r0.<sun.net.www.MeteredStream: boolean isMarked()>();
        if $z0 != 0 goto label0;

        virtualinvoke r0.<sun.net.www.MeteredStream: void close()>();

     label0:
        return;

     label1:
        $l2 = r0.<sun.net.www.MeteredStream: long count>;
        $l3 = $l2 + l0;
        r0.<sun.net.www.MeteredStream: long count> = $l3;
        $l4 = r0.<sun.net.www.MeteredStream: long count>;
        $l5 = r0.<sun.net.www.MeteredStream: long markedCount>;
        $l6 = $l4 - $l5;
        $i7 = r0.<sun.net.www.MeteredStream: int markLimit>;
        $l8 = (long) $i7;
        $b9 = $l6 cmp $l8;
        if $b9 <= 0 goto label2;

        r0.<sun.net.www.MeteredStream: int markLimit> = -1;

     label2:
        $r2 = r0.<sun.net.www.MeteredStream: sun.net.ProgressSource pi>;
        if $r2 == null goto label3;

        $r3 = r0.<sun.net.www.MeteredStream: sun.net.ProgressSource pi>;
        $l10 = r0.<sun.net.www.MeteredStream: long count>;
        $l11 = r0.<sun.net.www.MeteredStream: long expected>;
        virtualinvoke $r3.<sun.net.ProgressSource: void updateProgress(long,long)>($l10, $l11);

     label3:
        $z1 = specialinvoke r0.<sun.net.www.MeteredStream: boolean isMarked()>();
        if $z1 == 0 goto label4;

        return;

     label4:
        $l12 = r0.<sun.net.www.MeteredStream: long expected>;
        $b13 = $l12 cmp 0L;
        if $b13 <= 0 goto label5;

        $l14 = r0.<sun.net.www.MeteredStream: long count>;
        $l15 = r0.<sun.net.www.MeteredStream: long expected>;
        $b16 = $l14 cmp $l15;
        if $b16 < 0 goto label5;

        virtualinvoke r0.<sun.net.www.MeteredStream: void close()>();

     label5:
        return;
    }

    private boolean isMarked()
    {
        sun.net.www.MeteredStream r0;
        int $i0, $i4;
        long $l1, $l2, $l3, $l5;
        byte $b6;

        r0 := @this: sun.net.www.MeteredStream;
        $i0 = r0.<sun.net.www.MeteredStream: int markLimit>;
        if $i0 >= 0 goto label0;

        return 0;

     label0:
        $l1 = r0.<sun.net.www.MeteredStream: long count>;
        $l2 = r0.<sun.net.www.MeteredStream: long markedCount>;
        $l3 = $l1 - $l2;
        $i4 = r0.<sun.net.www.MeteredStream: int markLimit>;
        $l5 = (long) $i4;
        $b6 = $l3 cmp $l5;
        if $b6 <= 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public synchronized int read() throws java.io.IOException
    {
        sun.net.www.MeteredStream r0;
        int i0;
        boolean $z0;
        java.io.InputStream $r1;
        long $l1;

        r0 := @this: sun.net.www.MeteredStream;
        $z0 = r0.<sun.net.www.MeteredStream: boolean closed>;
        if $z0 == 0 goto label0;

        return -1;

     label0:
        $r1 = r0.<sun.net.www.MeteredStream: java.io.InputStream in>;
        i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();
        if i0 == -1 goto label1;

        specialinvoke r0.<sun.net.www.MeteredStream: void justRead(long)>(1L);
        goto label2;

     label1:
        $l1 = (long) i0;
        specialinvoke r0.<sun.net.www.MeteredStream: void justRead(long)>($l1);

     label2:
        return i0;
    }

    public synchronized int read(byte[], int, int) throws java.io.IOException
    {
        sun.net.www.MeteredStream r0;
        byte[] r1;
        int i0, i1, i2;
        boolean $z0;
        java.io.InputStream $r2;
        long $l3;

        r0 := @this: sun.net.www.MeteredStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $z0 = r0.<sun.net.www.MeteredStream: boolean closed>;
        if $z0 == 0 goto label0;

        return -1;

     label0:
        $r2 = r0.<sun.net.www.MeteredStream: java.io.InputStream in>;
        i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);
        $l3 = (long) i2;
        specialinvoke r0.<sun.net.www.MeteredStream: void justRead(long)>($l3);
        return i2;
    }

    public synchronized long skip(long) throws java.io.IOException
    {
        sun.net.www.MeteredStream r0;
        long l0, l1, l2, $l3, $l4, $l5, $l7, $l8, $l9;
        boolean $z0, $z1;
        java.io.InputStream $r1, $r2, $r3;
        byte $b6;

        r0 := @this: sun.net.www.MeteredStream;
        l0 := @parameter0: long;
        $z0 = r0.<sun.net.www.MeteredStream: boolean closed>;
        if $z0 == 0 goto label0;

        return 0L;

     label0:
        $r1 = r0.<sun.net.www.MeteredStream: java.io.InputStream in>;
        $z1 = $r1 instanceof sun.net.www.http.ChunkedInputStream;
        if $z1 == 0 goto label1;

        $r2 = r0.<sun.net.www.MeteredStream: java.io.InputStream in>;
        l2 = virtualinvoke $r2.<java.io.InputStream: long skip(long)>(l0);
        goto label4;

     label1:
        $l3 = r0.<sun.net.www.MeteredStream: long expected>;
        $l4 = r0.<sun.net.www.MeteredStream: long count>;
        $l5 = $l3 - $l4;
        $b6 = l0 cmp $l5;
        if $b6 <= 0 goto label2;

        $l7 = r0.<sun.net.www.MeteredStream: long expected>;
        $l8 = r0.<sun.net.www.MeteredStream: long count>;
        $l9 = $l7 - $l8;
        goto label3;

     label2:
        $l9 = l0;

     label3:
        l1 = $l9;
        $r3 = r0.<sun.net.www.MeteredStream: java.io.InputStream in>;
        l2 = virtualinvoke $r3.<java.io.InputStream: long skip(long)>(l1);

     label4:
        specialinvoke r0.<sun.net.www.MeteredStream: void justRead(long)>(l2);
        return l2;
    }

    public void close() throws java.io.IOException
    {
        sun.net.www.MeteredStream r0;
        boolean $z0;
        sun.net.ProgressSource $r1, $r2;
        java.io.InputStream $r3;

        r0 := @this: sun.net.www.MeteredStream;
        $z0 = r0.<sun.net.www.MeteredStream: boolean closed>;
        if $z0 == 0 goto label0;

        return;

     label0:
        $r1 = r0.<sun.net.www.MeteredStream: sun.net.ProgressSource pi>;
        if $r1 == null goto label1;

        $r2 = r0.<sun.net.www.MeteredStream: sun.net.ProgressSource pi>;
        virtualinvoke $r2.<sun.net.ProgressSource: void finishTracking()>();

     label1:
        r0.<sun.net.www.MeteredStream: boolean closed> = 1;
        $r3 = r0.<sun.net.www.MeteredStream: java.io.InputStream in>;
        virtualinvoke $r3.<java.io.InputStream: void close()>();
        return;
    }

    public synchronized int available() throws java.io.IOException
    {
        sun.net.www.MeteredStream r0;
        boolean $z0;
        int $i0;
        java.io.InputStream $r1;

        r0 := @this: sun.net.www.MeteredStream;
        $z0 = r0.<sun.net.www.MeteredStream: boolean closed>;
        if $z0 == 0 goto label0;

        $i0 = 0;
        goto label1;

     label0:
        $r1 = r0.<sun.net.www.MeteredStream: java.io.InputStream in>;
        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

     label1:
        return $i0;
    }

    public synchronized void mark(int)
    {
        sun.net.www.MeteredStream r0;
        int i0;
        boolean $z0;
        long $l1;

        r0 := @this: sun.net.www.MeteredStream;
        i0 := @parameter0: int;
        $z0 = r0.<sun.net.www.MeteredStream: boolean closed>;
        if $z0 == 0 goto label0;

        return;

     label0:
        specialinvoke r0.<java.io.FilterInputStream: void mark(int)>(i0);
        $l1 = r0.<sun.net.www.MeteredStream: long count>;
        r0.<sun.net.www.MeteredStream: long markedCount> = $l1;
        r0.<sun.net.www.MeteredStream: int markLimit> = i0;
        return;
    }

    public synchronized void reset() throws java.io.IOException
    {
        sun.net.www.MeteredStream r0;
        boolean $z0, $z1;
        java.io.IOException $r1;
        long $l0;

        r0 := @this: sun.net.www.MeteredStream;
        $z0 = r0.<sun.net.www.MeteredStream: boolean closed>;
        if $z0 == 0 goto label0;

        return;

     label0:
        $z1 = specialinvoke r0.<sun.net.www.MeteredStream: boolean isMarked()>();
        if $z1 != 0 goto label1;

        $r1 = new java.io.IOException;
        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Resetting to an invalid mark");
        throw $r1;

     label1:
        $l0 = r0.<sun.net.www.MeteredStream: long markedCount>;
        r0.<sun.net.www.MeteredStream: long count> = $l0;
        specialinvoke r0.<java.io.FilterInputStream: void reset()>();
        return;
    }

    public boolean markSupported()
    {
        sun.net.www.MeteredStream r0;
        boolean $z0, $z1;

        r0 := @this: sun.net.www.MeteredStream;
        $z0 = r0.<sun.net.www.MeteredStream: boolean closed>;
        if $z0 == 0 goto label0;

        return 0;

     label0:
        $z1 = specialinvoke r0.<java.io.FilterInputStream: boolean markSupported()>();
        return $z1;
    }

    protected void finalize() throws java.lang.Throwable
    {
        sun.net.www.MeteredStream r0;
        java.lang.Throwable r1, $r4;
        sun.net.ProgressSource $r2, $r3;

        r0 := @this: sun.net.www.MeteredStream;

     label0:
        virtualinvoke r0.<sun.net.www.MeteredStream: void close()>();
        $r2 = r0.<sun.net.www.MeteredStream: sun.net.ProgressSource pi>;
        if $r2 == null goto label1;

        $r3 = r0.<sun.net.www.MeteredStream: sun.net.ProgressSource pi>;
        virtualinvoke $r3.<sun.net.ProgressSource: void close()>();

     label1:
        specialinvoke r0.<java.lang.Object: void finalize()>();
        goto label5;

     label2:
        $r4 := @caughtexception;

     label3:
        r1 = $r4;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();
        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
}
