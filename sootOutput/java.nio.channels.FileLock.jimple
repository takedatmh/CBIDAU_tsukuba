public abstract class java.nio.channels.FileLock extends java.lang.Object implements java.lang.AutoCloseable
{
    private final java.nio.channels.Channel channel;
    private final long position;
    private final long size;
    private final boolean shared;

    protected void <init>(java.nio.channels.FileChannel, long, long, boolean)
    {
        java.nio.channels.FileLock r0;
        java.nio.channels.FileChannel r1;
        long l0, l1, $l4;
        boolean z0;
        byte $b2, $b3, $b5;
        java.lang.IllegalArgumentException $r2, $r3, $r4;

        r0 := @this: java.nio.channels.FileLock;
        r1 := @parameter0: java.nio.channels.FileChannel;
        l0 := @parameter1: long;
        l1 := @parameter2: long;
        z0 := @parameter3: boolean;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $b2 = l0 cmp 0L;
        if $b2 >= 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative position");
        throw $r2;

     label0:
        $b3 = l1 cmp 0L;
        if $b3 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative size");
        throw $r3;

     label1:
        $l4 = l0 + l1;
        $b5 = $l4 cmp 0L;
        if $b5 >= 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative position + size");
        throw $r4;

     label2:
        r0.<java.nio.channels.FileLock: java.nio.channels.Channel channel> = r1;
        r0.<java.nio.channels.FileLock: long position> = l0;
        r0.<java.nio.channels.FileLock: long size> = l1;
        r0.<java.nio.channels.FileLock: boolean shared> = z0;
        return;
    }

    protected void <init>(java.nio.channels.AsynchronousFileChannel, long, long, boolean)
    {
        java.nio.channels.FileLock r0;
        java.nio.channels.AsynchronousFileChannel r1;
        long l0, l1, $l4;
        boolean z0;
        byte $b2, $b3, $b5;
        java.lang.IllegalArgumentException $r2, $r3, $r4;

        r0 := @this: java.nio.channels.FileLock;
        r1 := @parameter0: java.nio.channels.AsynchronousFileChannel;
        l0 := @parameter1: long;
        l1 := @parameter2: long;
        z0 := @parameter3: boolean;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $b2 = l0 cmp 0L;
        if $b2 >= 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative position");
        throw $r2;

     label0:
        $b3 = l1 cmp 0L;
        if $b3 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative size");
        throw $r3;

     label1:
        $l4 = l0 + l1;
        $b5 = $l4 cmp 0L;
        if $b5 >= 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative position + size");
        throw $r4;

     label2:
        r0.<java.nio.channels.FileLock: java.nio.channels.Channel channel> = r1;
        r0.<java.nio.channels.FileLock: long position> = l0;
        r0.<java.nio.channels.FileLock: long size> = l1;
        r0.<java.nio.channels.FileLock: boolean shared> = z0;
        return;
    }

    public final java.nio.channels.FileChannel channel()
    {
        java.nio.channels.FileLock r0;
        java.nio.channels.Channel $r1, $r2;
        boolean $z0;
        java.nio.channels.FileChannel $r3;

        r0 := @this: java.nio.channels.FileLock;
        $r1 = r0.<java.nio.channels.FileLock: java.nio.channels.Channel channel>;
        $z0 = $r1 instanceof java.nio.channels.FileChannel;
        if $z0 == 0 goto label0;

        $r2 = r0.<java.nio.channels.FileLock: java.nio.channels.Channel channel>;
        $r3 = (java.nio.channels.FileChannel) $r2;
        goto label1;

     label0:
        $r3 = null;

     label1:
        return $r3;
    }

    public java.nio.channels.Channel acquiredBy()
    {
        java.nio.channels.FileLock r0;
        java.nio.channels.Channel $r1;

        r0 := @this: java.nio.channels.FileLock;
        $r1 = r0.<java.nio.channels.FileLock: java.nio.channels.Channel channel>;
        return $r1;
    }

    public final long position()
    {
        java.nio.channels.FileLock r0;
        long $l0;

        r0 := @this: java.nio.channels.FileLock;
        $l0 = r0.<java.nio.channels.FileLock: long position>;
        return $l0;
    }

    public final long size()
    {
        java.nio.channels.FileLock r0;
        long $l0;

        r0 := @this: java.nio.channels.FileLock;
        $l0 = r0.<java.nio.channels.FileLock: long size>;
        return $l0;
    }

    public final boolean isShared()
    {
        java.nio.channels.FileLock r0;
        boolean $z0;

        r0 := @this: java.nio.channels.FileLock;
        $z0 = r0.<java.nio.channels.FileLock: boolean shared>;
        return $z0;
    }

    public final boolean overlaps(long, long)
    {
        java.nio.channels.FileLock r0;
        long l0, l1, $l2, $l3, $l5, $l6, $l7;
        byte $b4, $b8;

        r0 := @this: java.nio.channels.FileLock;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        $l2 = l0 + l1;
        $l3 = r0.<java.nio.channels.FileLock: long position>;
        $b4 = $l2 cmp $l3;
        if $b4 > 0 goto label0;

        return 0;

     label0:
        $l5 = r0.<java.nio.channels.FileLock: long position>;
        $l6 = r0.<java.nio.channels.FileLock: long size>;
        $l7 = $l5 + $l6;
        $b8 = $l7 cmp l0;
        if $b8 > 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public abstract boolean isValid();

    public abstract void release() throws java.io.IOException;

    public final void close() throws java.io.IOException
    {
        java.nio.channels.FileLock r0;

        r0 := @this: java.nio.channels.FileLock;
        virtualinvoke r0.<java.nio.channels.FileLock: void release()>();
        return;
    }

    public final java.lang.String toString()
    {
        java.nio.channels.FileLock r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r14, $r15;
        java.lang.Class $r2;
        java.lang.String $r3, $r10, $r13, $r16;
        long $l0, $l1;
        boolean $z0, $z1;

        r0 := @this: java.nio.channels.FileLock;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");
        $l0 = r0.<java.nio.channels.FileLock: long position>;
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        $l1 = r0.<java.nio.channels.FileLock: long size>;
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $z0 = r0.<java.nio.channels.FileLock: boolean shared>;
        if $z0 == 0 goto label0;

        $r10 = "shared";
        goto label1;

     label0:
        $r10 = "exclusive";

     label1:
        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $z1 = virtualinvoke r0.<java.nio.channels.FileLock: boolean isValid()>();
        if $z1 == 0 goto label2;

        $r13 = "valid";
        goto label3;

     label2:
        $r13 = "invalid";

     label3:
        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r16;
    }
}
