class sun.misc.SoftCache$EntrySet extends java.util.AbstractSet
{
    java.util.Set hashEntries;
    final sun.misc.SoftCache this$0;

    private void <init>(sun.misc.SoftCache)
    {
        sun.misc.SoftCache$EntrySet r0;
        sun.misc.SoftCache r1, $r2;
        java.util.Map $r3;
        java.util.Set $r4;

        r0 := @this: sun.misc.SoftCache$EntrySet;
        r1 := @parameter0: sun.misc.SoftCache;
        r0.<sun.misc.SoftCache$EntrySet: sun.misc.SoftCache this$0> = r1;
        specialinvoke r0.<java.util.AbstractSet: void <init>()>();
        $r2 = r0.<sun.misc.SoftCache$EntrySet: sun.misc.SoftCache this$0>;
        $r3 = staticinvoke <sun.misc.SoftCache: java.util.Map access$700(sun.misc.SoftCache)>($r2);
        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();
        r0.<sun.misc.SoftCache$EntrySet: java.util.Set hashEntries> = $r4;
        return;
    }

    public java.util.Iterator iterator()
    {
        sun.misc.SoftCache$EntrySet r0;
        sun.misc.SoftCache$EntrySet$1 $r1;

        r0 := @this: sun.misc.SoftCache$EntrySet;
        $r1 = new sun.misc.SoftCache$EntrySet$1;
        specialinvoke $r1.<sun.misc.SoftCache$EntrySet$1: void <init>(sun.misc.SoftCache$EntrySet)>(r0);
        return $r1;
    }

    public boolean isEmpty()
    {
        sun.misc.SoftCache$EntrySet r0;
        java.util.Iterator $r1;
        boolean $z0, $z1;

        r0 := @this: sun.misc.SoftCache$EntrySet;
        $r1 = virtualinvoke r0.<sun.misc.SoftCache$EntrySet: java.util.Iterator iterator()>();
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    public int size()
    {
        sun.misc.SoftCache$EntrySet r0;
        int i0;
        java.util.Iterator r1;
        boolean $z0;

        r0 := @this: sun.misc.SoftCache$EntrySet;
        i0 = 0;
        r1 = virtualinvoke r0.<sun.misc.SoftCache$EntrySet: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        i0 = i0 + 1;
        interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        goto label0;

     label1:
        return i0;
    }

    public boolean remove(java.lang.Object)
    {
        sun.misc.SoftCache$EntrySet r0;
        java.lang.Object r1;
        sun.misc.SoftCache $r2;
        boolean $z0, $z1;
        java.util.Set $r3;
        sun.misc.SoftCache$Entry $r4;
        java.util.Map$Entry $r5;

        r0 := @this: sun.misc.SoftCache$EntrySet;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<sun.misc.SoftCache$EntrySet: sun.misc.SoftCache this$0>;
        staticinvoke <sun.misc.SoftCache: void access$800(sun.misc.SoftCache)>($r2);
        $z0 = r1 instanceof sun.misc.SoftCache$Entry;
        if $z0 == 0 goto label0;

        $r3 = r0.<sun.misc.SoftCache$EntrySet: java.util.Set hashEntries>;
        $r4 = (sun.misc.SoftCache$Entry) r1;
        $r5 = staticinvoke <sun.misc.SoftCache$Entry: java.util.Map$Entry access$900(sun.misc.SoftCache$Entry)>($r4);
        $z1 = interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>($r5);
        return $z1;

     label0:
        return 0;
    }

    void <init>(sun.misc.SoftCache, sun.misc.SoftCache$1)
    {
        sun.misc.SoftCache$EntrySet r0;
        sun.misc.SoftCache r1;
        sun.misc.SoftCache$1 r2;

        r0 := @this: sun.misc.SoftCache$EntrySet;
        r1 := @parameter0: sun.misc.SoftCache;
        r2 := @parameter1: sun.misc.SoftCache$1;
        specialinvoke r0.<sun.misc.SoftCache$EntrySet: void <init>(sun.misc.SoftCache)>(r1);
        return;
    }
}
