class javax.crypto.Cipher$Transform extends java.lang.Object
{
    final java.lang.String transform;
    final java.lang.String suffix;
    final java.lang.String mode;
    final java.lang.String pad;
    private static final java.util.concurrent.ConcurrentMap patternCache;

    void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        javax.crypto.Cipher$Transform r0;
        java.lang.String r1, r2, r3, r4, $r8, $r10;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.util.Locale $r9;

        r0 := @this: javax.crypto.Cipher$Transform;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        r0.<javax.crypto.Cipher$Transform: java.lang.String transform> = $r8;
        $r9 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r10 = virtualinvoke r2.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r9);
        r0.<javax.crypto.Cipher$Transform: java.lang.String suffix> = $r10;
        r0.<javax.crypto.Cipher$Transform: java.lang.String mode> = r3;
        r0.<javax.crypto.Cipher$Transform: java.lang.String pad> = r4;
        return;
    }

    void setModePadding(javax.crypto.CipherSpi) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException
    {
        javax.crypto.Cipher$Transform r0;
        javax.crypto.CipherSpi r1;
        java.lang.String $r2, $r3, $r4, $r5;

        r0 := @this: javax.crypto.Cipher$Transform;
        r1 := @parameter0: javax.crypto.CipherSpi;
        $r2 = r0.<javax.crypto.Cipher$Transform: java.lang.String mode>;
        if $r2 == null goto label0;

        $r3 = r0.<javax.crypto.Cipher$Transform: java.lang.String mode>;
        virtualinvoke r1.<javax.crypto.CipherSpi: void engineSetMode(java.lang.String)>($r3);

     label0:
        $r4 = r0.<javax.crypto.Cipher$Transform: java.lang.String pad>;
        if $r4 == null goto label1;

        $r5 = r0.<javax.crypto.Cipher$Transform: java.lang.String pad>;
        virtualinvoke r1.<javax.crypto.CipherSpi: void engineSetPadding(java.lang.String)>($r5);

     label1:
        return;
    }

    int supportsModePadding(java.security.Provider$Service)
    {
        javax.crypto.Cipher$Transform r0;
        java.security.Provider$Service r1;
        int i0, i1, $i2;

        r0 := @this: javax.crypto.Cipher$Transform;
        r1 := @parameter0: java.security.Provider$Service;
        i0 = virtualinvoke r0.<javax.crypto.Cipher$Transform: int supportsMode(java.security.Provider$Service)>(r1);
        if i0 != 0 goto label0;

        return i0;

     label0:
        i1 = virtualinvoke r0.<javax.crypto.Cipher$Transform: int supportsPadding(java.security.Provider$Service)>(r1);
        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);
        return $i2;
    }

    int supportsMode(java.security.Provider$Service)
    {
        javax.crypto.Cipher$Transform r0;
        java.security.Provider$Service r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: javax.crypto.Cipher$Transform;
        r1 := @parameter0: java.security.Provider$Service;
        $r2 = r0.<javax.crypto.Cipher$Transform: java.lang.String mode>;
        $i0 = staticinvoke <javax.crypto.Cipher$Transform: int supports(java.security.Provider$Service,java.lang.String,java.lang.String)>(r1, "SupportedModes", $r2);
        return $i0;
    }

    int supportsPadding(java.security.Provider$Service)
    {
        javax.crypto.Cipher$Transform r0;
        java.security.Provider$Service r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: javax.crypto.Cipher$Transform;
        r1 := @parameter0: java.security.Provider$Service;
        $r2 = r0.<javax.crypto.Cipher$Transform: java.lang.String pad>;
        $i0 = staticinvoke <javax.crypto.Cipher$Transform: int supports(java.security.Provider$Service,java.lang.String,java.lang.String)>(r1, "SupportedPaddings", $r2);
        return $i0;
    }

    private static int supports(java.security.Provider$Service, java.lang.String, java.lang.String)
    {
        java.security.Provider$Service r0;
        java.lang.String r1, r2, r3;
        boolean $z0;
        byte $b0;

        r0 := @parameter0: java.security.Provider$Service;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        if r2 != null goto label0;

        return 2;

     label0:
        r3 = virtualinvoke r0.<java.security.Provider$Service: java.lang.String getAttribute(java.lang.String)>(r1);
        if r3 != null goto label1;

        return 1;

     label1:
        $z0 = staticinvoke <javax.crypto.Cipher$Transform: boolean matches(java.lang.String,java.lang.String)>(r3, r2);
        if $z0 == 0 goto label2;

        $b0 = 2;
        goto label3;

     label2:
        $b0 = 0;

     label3:
        return $b0;
    }

    private static boolean matches(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r8;
        java.util.concurrent.ConcurrentMap $r2, $r5;
        java.util.regex.Pattern r3;
        java.lang.Object $r4;
        java.util.Locale $r7;
        java.util.regex.Matcher $r9;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        $r2 = <javax.crypto.Cipher$Transform: java.util.concurrent.ConcurrentMap patternCache>;
        $r4 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0);
        r3 = (java.util.regex.Pattern) $r4;
        if r3 != null goto label0;

        r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r0);
        $r5 = <javax.crypto.Cipher$Transform: java.util.concurrent.ConcurrentMap patternCache>;
        interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r0, r3);

     label0:
        $r7 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r8 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r7);
        $r9 = virtualinvoke r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r8);
        $z0 = virtualinvoke $r9.<java.util.regex.Matcher: boolean matches()>();
        return $z0;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        $r0 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
        <javax.crypto.Cipher$Transform: java.util.concurrent.ConcurrentMap patternCache> = $r0;
        return;
    }
}
