public abstract class java.nio.charset.Charset extends java.lang.Object implements java.lang.Comparable
{
    private static volatile java.lang.String bugLevel;
    private static java.nio.charset.spi.CharsetProvider standardProvider;
    private static volatile java.lang.Object[] cache1;
    private static volatile java.lang.Object[] cache2;
    private static java.lang.ThreadLocal gate;
    private static volatile java.nio.charset.Charset defaultCharset;
    private final java.lang.String name;
    private final java.lang.String[] aliases;
    private java.util.Set aliasSet;

    static boolean atBugLevel(java.lang.String)
    {
        java.lang.String r0, r1, $r4;
        boolean $z0, $z1;
        sun.security.action.GetPropertyAction $r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.String;
        r1 = <java.nio.charset.Charset: java.lang.String bugLevel>;
        if r1 != null goto label1;

        $z0 = staticinvoke <sun.misc.VM: boolean isBooted()>();
        if $z0 != 0 goto label0;

        return 0;

     label0:
        $r2 = new sun.security.action.GetPropertyAction;
        specialinvoke $r2.<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>("sun.nio.cs.bugLevel", "");
        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);
        $r4 = (java.lang.String) $r3;
        r1 = $r4;
        <java.nio.charset.Charset: java.lang.String bugLevel> = $r4;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);
        return $z1;
    }

    private static void checkName(java.lang.String)
    {
        java.lang.String r0;
        int i0, i1;
        char c2;
        boolean $z0;
        java.nio.charset.IllegalCharsetNameException $r1, $r2;

        r0 := @parameter0: java.lang.String;
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        $z0 = staticinvoke <java.nio.charset.Charset: boolean atBugLevel(java.lang.String)>("1.4");
        if $z0 != 0 goto label0;

        if i0 != 0 goto label0;

        $r1 = new java.nio.charset.IllegalCharsetNameException;
        specialinvoke $r1.<java.nio.charset.IllegalCharsetNameException: void <init>(java.lang.String)>(r0);
        throw $r1;

     label0:
        i1 = 0;

     label1:
        if i1 >= i0 goto label11;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);
        if c2 < 65 goto label2;

        if c2 > 90 goto label2;

        goto label10;

     label2:
        if c2 < 97 goto label3;

        if c2 > 122 goto label3;

        goto label10;

     label3:
        if c2 < 48 goto label4;

        if c2 > 57 goto label4;

        goto label10;

     label4:
        if c2 != 45 goto label5;

        if i1 == 0 goto label5;

        goto label10;

     label5:
        if c2 != 43 goto label6;

        if i1 == 0 goto label6;

        goto label10;

     label6:
        if c2 != 58 goto label7;

        if i1 == 0 goto label7;

        goto label10;

     label7:
        if c2 != 95 goto label8;

        if i1 == 0 goto label8;

        goto label10;

     label8:
        if c2 != 46 goto label9;

        if i1 == 0 goto label9;

        goto label10;

     label9:
        $r2 = new java.nio.charset.IllegalCharsetNameException;
        specialinvoke $r2.<java.nio.charset.IllegalCharsetNameException: void <init>(java.lang.String)>(r0);
        throw $r2;

     label10:
        i1 = i1 + 1;
        goto label1;

     label11:
        return;
    }

    private static void cache(java.lang.String, java.nio.charset.Charset)
    {
        java.lang.String r0;
        java.nio.charset.Charset r1;
        java.lang.Object[] $r2, $r3;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.nio.charset.Charset;
        $r2 = <java.nio.charset.Charset: java.lang.Object[] cache1>;
        <java.nio.charset.Charset: java.lang.Object[] cache2> = $r2;
        $r3 = newarray (java.lang.Object)[2];
        $r3[0] = r0;
        $r3[1] = r1;
        <java.nio.charset.Charset: java.lang.Object[] cache1> = $r3;
        return;
    }

    private static java.util.Iterator providers()
    {
        java.nio.charset.Charset$1 $r0;

        $r0 = new java.nio.charset.Charset$1;
        specialinvoke $r0.<java.nio.charset.Charset$1: void <init>()>();
        return $r0;
    }

    private static java.nio.charset.Charset lookupViaProviders(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;
        java.lang.ThreadLocal $r1, $r4, $r6, $r9, $r11;
        java.nio.charset.Charset r2;
        java.lang.Throwable r3, $r10;
        java.lang.Object $r5, $r8;
        java.nio.charset.Charset$2 $r7;

        r0 := @parameter0: java.lang.String;
        $z0 = staticinvoke <sun.misc.VM: boolean isBooted()>();
        if $z0 != 0 goto label0;

        return null;

     label0:
        $r4 = <java.nio.charset.Charset: java.lang.ThreadLocal gate>;
        $r5 = virtualinvoke $r4.<java.lang.ThreadLocal: java.lang.Object get()>();
        if $r5 == null goto label1;

        return null;

     label1:
        $r6 = <java.nio.charset.Charset: java.lang.ThreadLocal gate>;
        $r1 = <java.nio.charset.Charset: java.lang.ThreadLocal gate>;
        virtualinvoke $r6.<java.lang.ThreadLocal: void set(java.lang.Object)>($r1);
        $r7 = new java.nio.charset.Charset$2;
        specialinvoke $r7.<java.nio.charset.Charset$2: void <init>(java.lang.String)>(r0);
        $r8 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r7);
        r2 = (java.nio.charset.Charset) $r8;

     label2:
        $r9 = <java.nio.charset.Charset: java.lang.ThreadLocal gate>;
        virtualinvoke $r9.<java.lang.ThreadLocal: void set(java.lang.Object)>(null);
        return r2;

     label3:
        $r10 := @caughtexception;

     label4:
        r3 = $r10;

     label5:
        $r11 = <java.nio.charset.Charset: java.lang.ThreadLocal gate>;
        virtualinvoke $r11.<java.lang.ThreadLocal: void set(java.lang.Object)>(null);
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private static java.nio.charset.Charset lookupExtendedCharset(java.lang.String)
    {
        java.lang.String r0;
        java.nio.charset.spi.CharsetProvider r1;
        java.nio.charset.Charset $r2;

        r0 := @parameter0: java.lang.String;
        r1 = <java.nio.charset.Charset$ExtendedProviderHolder: java.nio.charset.spi.CharsetProvider extendedProvider>;
        if r1 == null goto label0;

        $r2 = virtualinvoke r1.<java.nio.charset.spi.CharsetProvider: java.nio.charset.Charset charsetForName(java.lang.String)>(r0);
        goto label1;

     label0:
        $r2 = null;

     label1:
        return $r2;
    }

    private static java.nio.charset.Charset lookup(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Object[] r1, $r3;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object $r4, $r5;
        boolean $z0;
        java.nio.charset.Charset $r6, $r7;

        r0 := @parameter0: java.lang.String;
        if r0 != null goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null charset name");
        throw $r2;

     label0:
        $r3 = <java.nio.charset.Charset: java.lang.Object[] cache1>;
        r1 = $r3;
        if $r3 == null goto label1;

        $r4 = r1[0];
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r4);
        if $z0 == 0 goto label1;

        $r5 = r1[1];
        $r6 = (java.nio.charset.Charset) $r5;
        return $r6;

     label1:
        $r7 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset lookup2(java.lang.String)>(r0);
        return $r7;
    }

    private static java.nio.charset.Charset lookup2(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Object[] $r1, r2, $r5;
        java.nio.charset.Charset r3, $r7, $r9, $r10, $r11;
        java.lang.Object $r4, $r6;
        boolean $z0;
        java.nio.charset.spi.CharsetProvider $r8;

        r0 := @parameter0: java.lang.String;
        $r1 = <java.nio.charset.Charset: java.lang.Object[] cache2>;
        r2 = $r1;
        if $r1 == null goto label0;

        $r4 = r2[0];
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r4);
        if $z0 == 0 goto label0;

        $r5 = <java.nio.charset.Charset: java.lang.Object[] cache1>;
        <java.nio.charset.Charset: java.lang.Object[] cache2> = $r5;
        <java.nio.charset.Charset: java.lang.Object[] cache1> = r2;
        $r6 = r2[1];
        $r7 = (java.nio.charset.Charset) $r6;
        return $r7;

     label0:
        $r8 = <java.nio.charset.Charset: java.nio.charset.spi.CharsetProvider standardProvider>;
        $r9 = virtualinvoke $r8.<java.nio.charset.spi.CharsetProvider: java.nio.charset.Charset charsetForName(java.lang.String)>(r0);
        r3 = $r9;
        if $r9 != null goto label1;

        $r10 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset lookupExtendedCharset(java.lang.String)>(r0);
        r3 = $r10;
        if $r10 != null goto label1;

        $r11 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset lookupViaProviders(java.lang.String)>(r0);
        r3 = $r11;
        if $r11 == null goto label2;

     label1:
        staticinvoke <java.nio.charset.Charset: void cache(java.lang.String,java.nio.charset.Charset)>(r0, r3);
        return r3;

     label2:
        staticinvoke <java.nio.charset.Charset: void checkName(java.lang.String)>(r0);
        return null;
    }

    public static boolean isSupported(java.lang.String)
    {
        java.lang.String r0;
        java.nio.charset.Charset $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset lookup(java.lang.String)>(r0);
        if $r1 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public static java.nio.charset.Charset forName(java.lang.String)
    {
        java.lang.String r0;
        java.nio.charset.Charset r1;
        java.nio.charset.UnsupportedCharsetException $r2;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset lookup(java.lang.String)>(r0);
        if r1 == null goto label0;

        return r1;

     label0:
        $r2 = new java.nio.charset.UnsupportedCharsetException;
        specialinvoke $r2.<java.nio.charset.UnsupportedCharsetException: void <init>(java.lang.String)>(r0);
        throw $r2;
    }

    private static void put(java.util.Iterator, java.util.Map)
    {
        java.util.Iterator r0;
        java.util.Map r1;
        java.nio.charset.Charset r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        java.lang.String $r4, $r5;

        r0 := @parameter0: java.util.Iterator;
        r1 := @parameter1: java.util.Map;

     label0:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();
        r2 = (java.nio.charset.Charset) $r3;
        $r4 = virtualinvoke r2.<java.nio.charset.Charset: java.lang.String name()>();
        $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);
        if $z1 != 0 goto label1;

        $r5 = virtualinvoke r2.<java.nio.charset.Charset: java.lang.String name()>();
        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r2);

     label1:
        goto label0;

     label2:
        return;
    }

    public static java.util.SortedMap availableCharsets()
    {
        java.nio.charset.Charset$3 $r0;
        java.lang.Object $r1;
        java.util.SortedMap $r2;

        $r0 = new java.nio.charset.Charset$3;
        specialinvoke $r0.<java.nio.charset.Charset$3: void <init>()>();
        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        $r2 = (java.util.SortedMap) $r1;
        return $r2;
    }

    public static java.nio.charset.Charset defaultCharset()
    {
        java.nio.charset.Charset $r0, r3, $r8, $r10;
        java.lang.Class r1, $r5;
        java.lang.String r2;
        java.lang.Throwable r4, $r9;
        sun.security.action.GetPropertyAction $r6;
        java.lang.Object $r7;

        $r0 = <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset>;
        if $r0 != null goto label7;

        $r5 = class "java/nio/charset/Charset";
        r1 = $r5;
        entermonitor $r5;

     label0:
        $r6 = new sun.security.action.GetPropertyAction;
        specialinvoke $r6.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("file.encoding");
        $r7 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r6);
        r2 = (java.lang.String) $r7;
        r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset lookup(java.lang.String)>(r2);
        if r3 == null goto label1;

        <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset> = r3;
        goto label2;

     label1:
        $r8 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");
        <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset> = $r8;

     label2:
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r9 := @caughtexception;

     label5:
        r4 = $r9;
        exitmonitor r1;

     label6:
        throw r4;

     label7:
        $r10 = <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset>;
        return $r10;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    protected void <init>(java.lang.String, java.lang.String[])
    {
        java.nio.charset.Charset r0;
        java.lang.String r1, $r5;
        java.lang.String[] r2, r3, $r4;
        int i0, $i1;

        r0 := @this: java.nio.charset.Charset;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.nio.charset.Charset: java.util.Set aliasSet> = null;
        staticinvoke <java.nio.charset.Charset: void checkName(java.lang.String)>(r1);
        if r2 != null goto label0;

        $r4 = newarray (java.lang.String)[0];
        goto label1;

     label0:
        $r4 = r2;

     label1:
        r3 = $r4;
        i0 = 0;

     label2:
        $i1 = lengthof r3;
        if i0 >= $i1 goto label3;

        $r5 = r3[i0];
        staticinvoke <java.nio.charset.Charset: void checkName(java.lang.String)>($r5);
        i0 = i0 + 1;
        goto label2;

     label3:
        r0.<java.nio.charset.Charset: java.lang.String name> = r1;
        r0.<java.nio.charset.Charset: java.lang.String[] aliases> = r3;
        return;
    }

    public final java.lang.String name()
    {
        java.nio.charset.Charset r0;
        java.lang.String $r1;

        r0 := @this: java.nio.charset.Charset;
        $r1 = r0.<java.nio.charset.Charset: java.lang.String name>;
        return $r1;
    }

    public final java.util.Set aliases()
    {
        java.nio.charset.Charset r0;
        int i0, i1;
        java.util.HashSet r1, $r5;
        java.util.Set $r2, $r3, $r8, $r9;
        java.lang.String[] $r4, $r6;
        java.lang.String $r7;

        r0 := @this: java.nio.charset.Charset;
        $r2 = r0.<java.nio.charset.Charset: java.util.Set aliasSet>;
        if $r2 == null goto label0;

        $r3 = r0.<java.nio.charset.Charset: java.util.Set aliasSet>;
        return $r3;

     label0:
        $r4 = r0.<java.nio.charset.Charset: java.lang.String[] aliases>;
        i0 = lengthof $r4;
        $r5 = new java.util.HashSet;
        specialinvoke $r5.<java.util.HashSet: void <init>(int)>(i0);
        r1 = $r5;
        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r6 = r0.<java.nio.charset.Charset: java.lang.String[] aliases>;
        $r7 = $r6[i1];
        virtualinvoke r1.<java.util.HashSet: boolean add(java.lang.Object)>($r7);
        i1 = i1 + 1;
        goto label1;

     label2:
        $r8 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r1);
        r0.<java.nio.charset.Charset: java.util.Set aliasSet> = $r8;
        $r9 = r0.<java.nio.charset.Charset: java.util.Set aliasSet>;
        return $r9;
    }

    public java.lang.String displayName()
    {
        java.nio.charset.Charset r0;
        java.lang.String $r1;

        r0 := @this: java.nio.charset.Charset;
        $r1 = r0.<java.nio.charset.Charset: java.lang.String name>;
        return $r1;
    }

    public final boolean isRegistered()
    {
        java.nio.charset.Charset r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: java.nio.charset.Charset;
        $r1 = r0.<java.nio.charset.Charset: java.lang.String name>;
        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("X-");
        if $z0 != 0 goto label0;

        $r2 = r0.<java.nio.charset.Charset: java.lang.String name>;
        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("x-");
        if $z1 != 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;
    }

    public java.lang.String displayName(java.util.Locale)
    {
        java.nio.charset.Charset r0;
        java.util.Locale r1;
        java.lang.String $r2;

        r0 := @this: java.nio.charset.Charset;
        r1 := @parameter0: java.util.Locale;
        $r2 = r0.<java.nio.charset.Charset: java.lang.String name>;
        return $r2;
    }

    public abstract boolean contains(java.nio.charset.Charset);

    public abstract java.nio.charset.CharsetDecoder newDecoder();

    public abstract java.nio.charset.CharsetEncoder newEncoder();

    public boolean canEncode()
    {
        java.nio.charset.Charset r0;

        r0 := @this: java.nio.charset.Charset;
        return 1;
    }

    public final java.nio.CharBuffer decode(java.nio.ByteBuffer)
    {
        java.nio.charset.Charset r0;
        java.nio.ByteBuffer r1;
        java.nio.charset.CodingErrorAction $r2, $r6;
        java.nio.charset.CharacterCodingException r3, $r9;
        java.nio.charset.CharsetDecoder $r4, $r5, $r7;
        java.nio.CharBuffer $r8;
        java.lang.Error $r10;

        r0 := @this: java.nio.charset.Charset;
        r1 := @parameter0: java.nio.ByteBuffer;

     label0:
        $r4 = staticinvoke <sun.nio.cs.ThreadLocalCoders: java.nio.charset.CharsetDecoder decoderFor(java.lang.Object)>(r0);
        $r2 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
        $r5 = virtualinvoke $r4.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r2);
        $r6 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
        $r7 = virtualinvoke $r5.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r6);
        $r8 = virtualinvoke $r7.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>(r1);

     label1:
        return $r8;

     label2:
        $r9 := @caughtexception;
        r3 = $r9;
        $r10 = new java.lang.Error;
        specialinvoke $r10.<java.lang.Error: void <init>(java.lang.Throwable)>(r3);
        throw $r10;

        catch java.nio.charset.CharacterCodingException from label0 to label1 with label2;
    }

    public final java.nio.ByteBuffer encode(java.nio.CharBuffer)
    {
        java.nio.charset.Charset r0;
        java.nio.CharBuffer r1;
        java.nio.charset.CodingErrorAction $r2, $r6;
        java.nio.charset.CharacterCodingException r3, $r9;
        java.nio.charset.CharsetEncoder $r4, $r5, $r7;
        java.nio.ByteBuffer $r8;
        java.lang.Error $r10;

        r0 := @this: java.nio.charset.Charset;
        r1 := @parameter0: java.nio.CharBuffer;

     label0:
        $r4 = staticinvoke <sun.nio.cs.ThreadLocalCoders: java.nio.charset.CharsetEncoder encoderFor(java.lang.Object)>(r0);
        $r2 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
        $r5 = virtualinvoke $r4.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r2);
        $r6 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
        $r7 = virtualinvoke $r5.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r6);
        $r8 = virtualinvoke $r7.<java.nio.charset.CharsetEncoder: java.nio.ByteBuffer encode(java.nio.CharBuffer)>(r1);

     label1:
        return $r8;

     label2:
        $r9 := @caughtexception;
        r3 = $r9;
        $r10 = new java.lang.Error;
        specialinvoke $r10.<java.lang.Error: void <init>(java.lang.Throwable)>(r3);
        throw $r10;

        catch java.nio.charset.CharacterCodingException from label0 to label1 with label2;
    }

    public final java.nio.ByteBuffer encode(java.lang.String)
    {
        java.nio.charset.Charset r0;
        java.lang.String r1;
        java.nio.CharBuffer $r2;
        java.nio.ByteBuffer $r3;

        r0 := @this: java.nio.charset.Charset;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>(r1);
        $r3 = virtualinvoke r0.<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>($r2);
        return $r3;
    }

    public final int compareTo(java.nio.charset.Charset)
    {
        java.nio.charset.Charset r0, r1;
        java.lang.String $r2, $r3;
        int $i0;

        r0 := @this: java.nio.charset.Charset;
        r1 := @parameter0: java.nio.charset.Charset;
        $r2 = virtualinvoke r0.<java.nio.charset.Charset: java.lang.String name()>();
        $r3 = virtualinvoke r1.<java.nio.charset.Charset: java.lang.String name()>();
        $i0 = virtualinvoke $r2.<java.lang.String: int compareToIgnoreCase(java.lang.String)>($r3);
        return $i0;
    }

    public final int hashCode()
    {
        java.nio.charset.Charset r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: java.nio.charset.Charset;
        $r1 = virtualinvoke r0.<java.nio.charset.Charset: java.lang.String name()>();
        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();
        return $i0;
    }

    public final boolean equals(java.lang.Object)
    {
        java.nio.charset.Charset r0, $r3;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.String $r2, $r4;

        r0 := @this: java.nio.charset.Charset;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.nio.charset.Charset;
        if $z0 != 0 goto label0;

        return 0;

     label0:
        if r0 != r1 goto label1;

        return 1;

     label1:
        $r2 = r0.<java.nio.charset.Charset: java.lang.String name>;
        $r3 = (java.nio.charset.Charset) r1;
        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);
        return $z1;
    }

    public final java.lang.String toString()
    {
        java.nio.charset.Charset r0;
        java.lang.String $r1;

        r0 := @this: java.nio.charset.Charset;
        $r1 = virtualinvoke r0.<java.nio.charset.Charset: java.lang.String name()>();
        return $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.nio.charset.Charset r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.nio.charset.Charset;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.nio.charset.Charset) r1;
        $i0 = virtualinvoke r0.<java.nio.charset.Charset: int compareTo(java.nio.charset.Charset)>($r2);
        return $i0;
    }

    static java.util.Iterator access$000()
    {
        java.util.Iterator $r0;

        $r0 = staticinvoke <java.nio.charset.Charset: java.util.Iterator providers()>();
        return $r0;
    }

    static java.nio.charset.spi.CharsetProvider access$100()
    {
        java.nio.charset.spi.CharsetProvider $r0;

        $r0 = <java.nio.charset.Charset: java.nio.charset.spi.CharsetProvider standardProvider>;
        return $r0;
    }

    static void access$200(java.util.Iterator, java.util.Map)
    {
        java.util.Iterator r0;
        java.util.Map r1;

        r0 := @parameter0: java.util.Iterator;
        r1 := @parameter1: java.util.Map;
        staticinvoke <java.nio.charset.Charset: void put(java.util.Iterator,java.util.Map)>(r0, r1);
        return;
    }

    static void <clinit>()
    {
        sun.nio.cs.StandardCharsets $r0;
        java.lang.ThreadLocal $r1;

        <java.nio.charset.Charset: java.lang.String bugLevel> = null;
        $r0 = new sun.nio.cs.StandardCharsets;
        specialinvoke $r0.<sun.nio.cs.StandardCharsets: void <init>()>();
        <java.nio.charset.Charset: java.nio.charset.spi.CharsetProvider standardProvider> = $r0;
        <java.nio.charset.Charset: java.lang.Object[] cache1> = null;
        <java.nio.charset.Charset: java.lang.Object[] cache2> = null;
        $r1 = new java.lang.ThreadLocal;
        specialinvoke $r1.<java.lang.ThreadLocal: void <init>()>();
        <java.nio.charset.Charset: java.lang.ThreadLocal gate> = $r1;
        return;
    }
}
