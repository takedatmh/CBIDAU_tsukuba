final class java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl extends java.util.concurrent.atomic.AtomicReferenceFieldUpdater
{
    private static final sun.misc.Unsafe unsafe;
    private final long offset;
    private final java.lang.Class tclass;
    private final java.lang.Class vclass;
    private final java.lang.Class cclass;

    void <init>(java.lang.Class, java.lang.Class, java.lang.String, java.lang.Class)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl r0;
        java.lang.Class r1, r2, r4, r7, $r14;
        java.lang.String r3;
        null_type n0, n1;
        boolean z0, $z1, $z2, $z3;
        java.lang.Exception r5, $r8;
        java.lang.reflect.Field r6;
        int i0;
        java.lang.RuntimeException $r9;
        java.lang.ClassCastException $r10;
        java.lang.IllegalArgumentException $r11, $r12;
        sun.misc.Unsafe $r15;
        long $l1;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.Class;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: java.lang.Class;
        specialinvoke r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void <init>()>();
        n0 = null;
        n1 = null;
        z0 = 0;

     label0:
        r6 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r3);
        i0 = virtualinvoke r6.<java.lang.reflect.Field: int getModifiers()>();
        staticinvoke <sun.reflect.misc.ReflectUtil: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(r4, r1, null, i0);
        staticinvoke <sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.Class)>(r1);
        r7 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Class getType()>();

     label1:
        goto label3;

     label2:
        $r8 := @caughtexception;
        r5 = $r8;
        $r9 = new java.lang.RuntimeException;
        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r5);
        throw $r9;

     label3:
        if r2 == r7 goto label4;

        $r10 = new java.lang.ClassCastException;
        specialinvoke $r10.<java.lang.ClassCastException: void <init>()>();
        throw $r10;

     label4:
        $z1 = virtualinvoke r2.<java.lang.Class: boolean isPrimitive()>();
        if $z1 == 0 goto label5;

        $r11 = new java.lang.IllegalArgumentException;
        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must be reference type");
        throw $r11;

     label5:
        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isVolatile(int)>(i0);
        if $z2 != 0 goto label6;

        $r12 = new java.lang.IllegalArgumentException;
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must be volatile type");
        throw $r12;

     label6:
        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>(i0);
        if $z3 == 0 goto label7;

        if r4 == r1 goto label7;

        $r14 = r4;
        goto label8;

     label7:
        $r14 = null;

     label8:
        r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class cclass> = $r14;
        r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class tclass> = r1;
        if r2 != class "java/lang/Object" goto label9;

        r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class vclass> = null;
        goto label10;

     label9:
        r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class vclass> = r2;

     label10:
        $r15 = <java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: sun.misc.Unsafe unsafe>;
        $l1 = virtualinvoke $r15.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>(r6);
        r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: long offset> = $l1;
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    void targetCheck(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl r0;
        java.lang.Object r1;
        java.lang.Class $r2, $r4;
        boolean $z0;
        java.lang.ClassCastException $r3;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class tclass>;
        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);
        if $z0 != 0 goto label0;

        $r3 = new java.lang.ClassCastException;
        specialinvoke $r3.<java.lang.ClassCastException: void <init>()>();
        throw $r3;

     label0:
        $r4 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class cclass>;
        if $r4 == null goto label1;

        specialinvoke r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: void ensureProtectedAccess(java.lang.Object)>(r1);

     label1:
        return;
    }

    void updateCheck(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl r0;
        java.lang.Object r1, r2;
        java.lang.Class $r3, $r4, $r5, $r7;
        boolean $z0, $z1;
        java.lang.ClassCastException $r6;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r3 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class tclass>;
        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);
        if $z0 == 0 goto label0;

        if r2 == null goto label1;

        $r4 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class vclass>;
        if $r4 == null goto label1;

        $r5 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class vclass>;
        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isInstance(java.lang.Object)>(r2);
        if $z1 != 0 goto label1;

     label0:
        $r6 = new java.lang.ClassCastException;
        specialinvoke $r6.<java.lang.ClassCastException: void <init>()>();
        throw $r6;

     label1:
        $r7 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class cclass>;
        if $r7 == null goto label2;

        specialinvoke r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: void ensureProtectedAccess(java.lang.Object)>(r1);

     label2:
        return;
    }

    public boolean compareAndSet(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl r0;
        java.lang.Object r1, r2, r3;
        java.lang.Class $r4, $r5, $r6, $r7, $r8, $r9;
        sun.misc.Unsafe $r10;
        long $l0;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        r3 := @parameter2: java.lang.Object;
        if r1 == null goto label0;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class tclass>;
        if $r4 != $r5 goto label0;

        $r6 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class cclass>;
        if $r6 != null goto label0;

        if r3 == null goto label1;

        $r7 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class vclass>;
        if $r7 == null goto label1;

        $r8 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class vclass>;
        $r9 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();
        if $r8 == $r9 goto label1;

     label0:
        virtualinvoke r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: void updateCheck(java.lang.Object,java.lang.Object)>(r1, r3);

     label1:
        $r10 = <java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: sun.misc.Unsafe unsafe>;
        $l0 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: long offset>;
        $z0 = virtualinvoke $r10.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, $l0, r2, r3);
        return $z0;
    }

    public boolean weakCompareAndSet(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl r0;
        java.lang.Object r1, r2, r3;
        java.lang.Class $r4, $r5, $r6, $r7, $r8, $r9;
        sun.misc.Unsafe $r10;
        long $l0;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        r3 := @parameter2: java.lang.Object;
        if r1 == null goto label0;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class tclass>;
        if $r4 != $r5 goto label0;

        $r6 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class cclass>;
        if $r6 != null goto label0;

        if r3 == null goto label1;

        $r7 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class vclass>;
        if $r7 == null goto label1;

        $r8 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class vclass>;
        $r9 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();
        if $r8 == $r9 goto label1;

     label0:
        virtualinvoke r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: void updateCheck(java.lang.Object,java.lang.Object)>(r1, r3);

     label1:
        $r10 = <java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: sun.misc.Unsafe unsafe>;
        $l0 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: long offset>;
        $z0 = virtualinvoke $r10.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, $l0, r2, r3);
        return $z0;
    }

    public void set(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl r0;
        java.lang.Object r1, r2;
        java.lang.Class $r3, $r4, $r5, $r6, $r7, $r8;
        sun.misc.Unsafe $r9;
        long $l0;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        if r1 == null goto label0;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class tclass>;
        if $r3 != $r4 goto label0;

        $r5 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class cclass>;
        if $r5 != null goto label0;

        if r2 == null goto label1;

        $r6 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class vclass>;
        if $r6 == null goto label1;

        $r7 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class vclass>;
        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();
        if $r7 == $r8 goto label1;

     label0:
        virtualinvoke r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: void updateCheck(java.lang.Object,java.lang.Object)>(r1, r2);

     label1:
        $r9 = <java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: sun.misc.Unsafe unsafe>;
        $l0 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: long offset>;
        virtualinvoke $r9.<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>(r1, $l0, r2);
        return;
    }

    public void lazySet(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl r0;
        java.lang.Object r1, r2;
        java.lang.Class $r3, $r4, $r5, $r6, $r7, $r8;
        sun.misc.Unsafe $r9;
        long $l0;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        if r1 == null goto label0;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class tclass>;
        if $r3 != $r4 goto label0;

        $r5 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class cclass>;
        if $r5 != null goto label0;

        if r2 == null goto label1;

        $r6 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class vclass>;
        if $r6 == null goto label1;

        $r7 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class vclass>;
        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();
        if $r7 == $r8 goto label1;

     label0:
        virtualinvoke r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: void updateCheck(java.lang.Object,java.lang.Object)>(r1, r2);

     label1:
        $r9 = <java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: sun.misc.Unsafe unsafe>;
        $l0 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: long offset>;
        virtualinvoke $r9.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r1, $l0, r2);
        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl r0;
        java.lang.Object r1, $r6;
        java.lang.Class $r2, $r3, $r4;
        sun.misc.Unsafe $r5;
        long $l0;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl;
        r1 := @parameter0: java.lang.Object;
        if r1 == null goto label0;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r3 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class tclass>;
        if $r2 != $r3 goto label0;

        $r4 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class cclass>;
        if $r4 == null goto label1;

     label0:
        virtualinvoke r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: void targetCheck(java.lang.Object)>(r1);

     label1:
        $r5 = <java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: sun.misc.Unsafe unsafe>;
        $l0 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: long offset>;
        $r6 = virtualinvoke $r5.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r1, $l0);
        return $r6;
    }

    private void ensureProtectedAccess(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl r0;
        java.lang.Object r1;
        java.lang.IllegalAccessException $r2;
        java.lang.StringBuilder $r3, $r6, $r9, $r10, $r13, $r14, $r17;
        java.lang.Class $r4, $r7, $r11, $r15;
        boolean $z0;
        java.lang.RuntimeException $r5;
        java.lang.String $r8, $r12, $r16, $r18;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl;
        r1 := @parameter0: java.lang.Object;
        $r4 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class cclass>;
        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);
        if $z0 == 0 goto label0;

        return;

     label0:
        $r5 = new java.lang.RuntimeException;
        $r2 = new java.lang.IllegalAccessException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");
        $r7 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class cclass>;
        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();
        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not access a protected member of class ");
        $r11 = r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class tclass>;
        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();
        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using an instance of ");
        $r15 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();
        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalAccessException: void <init>(java.lang.String)>($r18);
        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);
        throw $r5;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0;

        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: sun.misc.Unsafe unsafe> = $r0;
        return;
    }
}
