public class sun.nio.ch.ChannelInputStream extends java.io.InputStream
{
    protected final java.nio.channels.ReadableByteChannel ch;
    private java.nio.ByteBuffer bb;
    private byte[] bs;
    private byte[] b1;

    public static int read(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer, boolean) throws java.io.IOException
    {
        java.nio.channels.ReadableByteChannel r0;
        java.nio.ByteBuffer r1;
        boolean z0, z1, $z2;
        java.nio.channels.SelectableChannel r2;
        java.lang.Object r3, $r5;
        int i0, $i2;
        java.lang.Throwable r4, $r9;
        java.nio.channels.IllegalBlockingModeException $r6;

        r0 := @parameter0: java.nio.channels.ReadableByteChannel;
        r1 := @parameter1: java.nio.ByteBuffer;
        z0 := @parameter2: boolean;
        $z2 = r0 instanceof java.nio.channels.SelectableChannel;
        if $z2 == 0 goto label8;

        r2 = (java.nio.channels.SelectableChannel) r0;
        $r5 = virtualinvoke r2.<java.nio.channels.SelectableChannel: java.lang.Object blockingLock()>();
        r3 = $r5;
        entermonitor $r5;

     label0:
        z1 = virtualinvoke r2.<java.nio.channels.SelectableChannel: boolean isBlocking()>();
        if z1 != 0 goto label1;

        $r6 = new java.nio.channels.IllegalBlockingModeException;
        specialinvoke $r6.<java.nio.channels.IllegalBlockingModeException: void <init>()>();
        throw $r6;

     label1:
        if z1 == z0 goto label2;

        virtualinvoke r2.<java.nio.channels.SelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(z0);

     label2:
        i0 = interfaceinvoke r0.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(r1);
        if z1 == z0 goto label3;

        virtualinvoke r2.<java.nio.channels.SelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(z1);

     label3:
        exitmonitor r3;

     label4:
        return i0;

     label5:
        $r9 := @caughtexception;

     label6:
        r4 = $r9;
        exitmonitor r3;

     label7:
        throw r4;

     label8:
        $i2 = interfaceinvoke r0.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(r1);
        return $i2;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void <init>(java.nio.channels.ReadableByteChannel)
    {
        sun.nio.ch.ChannelInputStream r0;
        java.nio.channels.ReadableByteChannel r1;

        r0 := @this: sun.nio.ch.ChannelInputStream;
        r1 := @parameter0: java.nio.channels.ReadableByteChannel;
        specialinvoke r0.<java.io.InputStream: void <init>()>();
        r0.<sun.nio.ch.ChannelInputStream: java.nio.ByteBuffer bb> = null;
        r0.<sun.nio.ch.ChannelInputStream: byte[] bs> = null;
        r0.<sun.nio.ch.ChannelInputStream: byte[] b1> = null;
        r0.<sun.nio.ch.ChannelInputStream: java.nio.channels.ReadableByteChannel ch> = r1;
        return;
    }

    public synchronized int read() throws java.io.IOException
    {
        sun.nio.ch.ChannelInputStream r0;
        int i0;
        byte[] $r1, $r2, $r3, $r4;
        byte $b1;
        short $s2;

        r0 := @this: sun.nio.ch.ChannelInputStream;
        $r1 = r0.<sun.nio.ch.ChannelInputStream: byte[] b1>;
        if $r1 != null goto label0;

        $r2 = newarray (byte)[1];
        r0.<sun.nio.ch.ChannelInputStream: byte[] b1> = $r2;

     label0:
        $r3 = r0.<sun.nio.ch.ChannelInputStream: byte[] b1>;
        i0 = virtualinvoke r0.<sun.nio.ch.ChannelInputStream: int read(byte[])>($r3);
        if i0 != 1 goto label1;

        $r4 = r0.<sun.nio.ch.ChannelInputStream: byte[] b1>;
        $b1 = $r4[0];
        $s2 = $b1 & 255;
        return $s2;

     label1:
        return -1;
    }

    public synchronized int read(byte[], int, int) throws java.io.IOException
    {
        sun.nio.ch.ChannelInputStream r0;
        byte[] r1, $r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.nio.ByteBuffer r2, $r5;
        java.lang.IndexOutOfBoundsException $r3;

        r0 := @this: sun.nio.ch.ChannelInputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i0 < 0 goto label0;

        $i2 = lengthof r1;
        if i0 > $i2 goto label0;

        if i1 < 0 goto label0;

        $i3 = i0 + i1;
        $i4 = lengthof r1;
        if $i3 > $i4 goto label0;

        $i5 = i0 + i1;
        if $i5 >= 0 goto label1;

     label0:
        $r3 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r3;

     label1:
        if i1 != 0 goto label2;

        return 0;

     label2:
        $r4 = r0.<sun.nio.ch.ChannelInputStream: byte[] bs>;
        if $r4 != r1 goto label3;

        $r5 = r0.<sun.nio.ch.ChannelInputStream: java.nio.ByteBuffer bb>;
        goto label4;

     label3:
        $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

     label4:
        r2 = $r5;
        $i6 = i0 + i1;
        $i7 = virtualinvoke r2.<java.nio.ByteBuffer: int capacity()>();
        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i7);
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i8);
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i0);
        r0.<sun.nio.ch.ChannelInputStream: java.nio.ByteBuffer bb> = r2;
        r0.<sun.nio.ch.ChannelInputStream: byte[] bs> = r1;
        $i9 = virtualinvoke r0.<sun.nio.ch.ChannelInputStream: int read(java.nio.ByteBuffer)>(r2);
        return $i9;
    }

    protected int read(java.nio.ByteBuffer) throws java.io.IOException
    {
        sun.nio.ch.ChannelInputStream r0;
        java.nio.ByteBuffer r1;
        java.nio.channels.ReadableByteChannel $r2;
        int $i0;

        r0 := @this: sun.nio.ch.ChannelInputStream;
        r1 := @parameter0: java.nio.ByteBuffer;
        $r2 = r0.<sun.nio.ch.ChannelInputStream: java.nio.channels.ReadableByteChannel ch>;
        $i0 = staticinvoke <sun.nio.ch.ChannelInputStream: int read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer,boolean)>($r2, r1, 1);
        return $i0;
    }

    public int available() throws java.io.IOException
    {
        sun.nio.ch.ChannelInputStream r0;
        java.nio.channels.SeekableByteChannel r1;
        long l0, $l1, $l2, $l3;
        java.nio.channels.ReadableByteChannel $r2, $r3;
        boolean $z0;
        byte $b4;
        int $i5;

        r0 := @this: sun.nio.ch.ChannelInputStream;
        $r2 = r0.<sun.nio.ch.ChannelInputStream: java.nio.channels.ReadableByteChannel ch>;
        $z0 = $r2 instanceof java.nio.channels.SeekableByteChannel;
        if $z0 == 0 goto label2;

        $r3 = r0.<sun.nio.ch.ChannelInputStream: java.nio.channels.ReadableByteChannel ch>;
        r1 = (java.nio.channels.SeekableByteChannel) $r3;
        $l1 = interfaceinvoke r1.<java.nio.channels.SeekableByteChannel: long size()>();
        $l2 = interfaceinvoke r1.<java.nio.channels.SeekableByteChannel: long position()>();
        $l3 = $l1 - $l2;
        l0 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l3);
        $b4 = l0 cmp 2147483647L;
        if $b4 <= 0 goto label0;

        $i5 = 2147483647;
        goto label1;

     label0:
        $i5 = (int) l0;

     label1:
        return $i5;

     label2:
        return 0;
    }

    public void close() throws java.io.IOException
    {
        sun.nio.ch.ChannelInputStream r0;
        java.nio.channels.ReadableByteChannel $r1;

        r0 := @this: sun.nio.ch.ChannelInputStream;
        $r1 = r0.<sun.nio.ch.ChannelInputStream: java.nio.channels.ReadableByteChannel ch>;
        interfaceinvoke $r1.<java.nio.channels.ReadableByteChannel: void close()>();
        return;
    }
}
