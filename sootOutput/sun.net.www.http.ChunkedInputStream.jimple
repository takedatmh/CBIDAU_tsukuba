public class sun.net.www.http.ChunkedInputStream extends java.io.InputStream implements sun.net.www.http.Hurryable
{
    private java.io.InputStream in;
    private sun.net.www.http.HttpClient hc;
    private sun.net.www.MessageHeader responses;
    private int chunkSize;
    private int chunkRead;
    private byte[] chunkData;
    private int chunkPos;
    private int chunkCount;
    private byte[] rawData;
    private int rawPos;
    private int rawCount;
    private boolean error;
    private boolean closed;
    private static final int MAX_CHUNK_HEADER_SIZE;
    static final int STATE_AWAITING_CHUNK_HEADER;
    static final int STATE_READING_CHUNK;
    static final int STATE_AWAITING_CHUNK_EOL;
    static final int STATE_AWAITING_TRAILERS;
    static final int STATE_DONE;
    private int state;

    private void ensureOpen() throws java.io.IOException
    {
        sun.net.www.http.ChunkedInputStream r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: sun.net.www.http.ChunkedInputStream;
        $z0 = r0.<sun.net.www.http.ChunkedInputStream: boolean closed>;
        if $z0 == 0 goto label0;

        $r1 = new java.io.IOException;
        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("stream is closed");
        throw $r1;

     label0:
        return;
    }

    private void ensureRawAvailable(int)
    {
        sun.net.www.http.ChunkedInputStream r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        byte[] r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: sun.net.www.http.ChunkedInputStream;
        i0 := @parameter0: int;
        $i2 = r0.<sun.net.www.http.ChunkedInputStream: int rawCount>;
        $i3 = $i2 + i0;
        $r2 = r0.<sun.net.www.http.ChunkedInputStream: byte[] rawData>;
        $i4 = lengthof $r2;
        if $i3 <= $i4 goto label3;

        $i5 = r0.<sun.net.www.http.ChunkedInputStream: int rawCount>;
        $i6 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;
        i1 = $i5 - $i6;
        $i7 = i1 + i0;
        $r3 = r0.<sun.net.www.http.ChunkedInputStream: byte[] rawData>;
        $i8 = lengthof $r3;
        if $i7 <= $i8 goto label1;

        $i9 = i1 + i0;
        r1 = newarray (byte)[$i9];
        if i1 <= 0 goto label0;

        $r4 = r0.<sun.net.www.http.ChunkedInputStream: byte[] rawData>;
        $i10 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i10, r1, 0, i1);

     label0:
        r0.<sun.net.www.http.ChunkedInputStream: byte[] rawData> = r1;
        goto label2;

     label1:
        if i1 <= 0 goto label2;

        $r5 = r0.<sun.net.www.http.ChunkedInputStream: byte[] rawData>;
        $i11 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;
        $r6 = r0.<sun.net.www.http.ChunkedInputStream: byte[] rawData>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i11, $r6, 0, i1);

     label2:
        r0.<sun.net.www.http.ChunkedInputStream: int rawCount> = i1;
        r0.<sun.net.www.http.ChunkedInputStream: int rawPos> = 0;

     label3:
        return;
    }

    private void closeUnderlying() throws java.io.IOException
    {
        sun.net.www.http.ChunkedInputStream r0;
        java.io.InputStream $r1;
        boolean $z0, $z1;
        int $i0;
        sun.net.www.http.HttpClient $r2, $r3;

        r0 := @this: sun.net.www.http.ChunkedInputStream;
        $r1 = r0.<sun.net.www.http.ChunkedInputStream: java.io.InputStream in>;
        if $r1 != null goto label0;

        return;

     label0:
        $z0 = r0.<sun.net.www.http.ChunkedInputStream: boolean error>;
        if $z0 != 0 goto label1;

        $i0 = r0.<sun.net.www.http.ChunkedInputStream: int state>;
        if $i0 != 5 goto label1;

        $r2 = r0.<sun.net.www.http.ChunkedInputStream: sun.net.www.http.HttpClient hc>;
        virtualinvoke $r2.<sun.net.www.http.HttpClient: void finished()>();
        goto label2;

     label1:
        $z1 = virtualinvoke r0.<sun.net.www.http.ChunkedInputStream: boolean hurry()>();
        if $z1 != 0 goto label2;

        $r3 = r0.<sun.net.www.http.ChunkedInputStream: sun.net.www.http.HttpClient hc>;
        virtualinvoke $r3.<sun.net.www.http.HttpClient: void closeServer()>();

     label2:
        r0.<sun.net.www.http.ChunkedInputStream: java.io.InputStream in> = null;
        return;
    }

    private int fastRead(byte[], int, int) throws java.io.IOException
    {
        sun.net.www.http.ChunkedInputStream r0;
        byte[] r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.io.IOException r2, $r4, $r6;
        java.io.InputStream $r3;

        r0 := @this: sun.net.www.http.ChunkedInputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i5 = r0.<sun.net.www.http.ChunkedInputStream: int chunkSize>;
        $i6 = r0.<sun.net.www.http.ChunkedInputStream: int chunkRead>;
        i2 = $i5 - $i6;
        if i2 >= i1 goto label0;

        $i7 = i2;
        goto label1;

     label0:
        $i7 = i1;

     label1:
        i3 = $i7;
        if i3 <= 0 goto label8;

     label2:
        $r3 = r0.<sun.net.www.http.ChunkedInputStream: java.io.InputStream in>;
        i4 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i3);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;
        r2 = $r4;
        r0.<sun.net.www.http.ChunkedInputStream: boolean error> = 1;
        throw r2;

     label5:
        if i4 <= 0 goto label7;

        $i8 = r0.<sun.net.www.http.ChunkedInputStream: int chunkRead>;
        $i9 = $i8 + i4;
        r0.<sun.net.www.http.ChunkedInputStream: int chunkRead> = $i9;
        $i10 = r0.<sun.net.www.http.ChunkedInputStream: int chunkRead>;
        $i11 = r0.<sun.net.www.http.ChunkedInputStream: int chunkSize>;
        if $i10 < $i11 goto label6;

        r0.<sun.net.www.http.ChunkedInputStream: int state> = 3;

     label6:
        return i4;

     label7:
        r0.<sun.net.www.http.ChunkedInputStream: boolean error> = 1;
        $r6 = new java.io.IOException;
        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Premature EOF");
        throw $r6;

     label8:
        return 0;

        catch java.io.IOException from label2 to label3 with label4;
    }

    private void processRaw() throws java.io.IOException
    {
        sun.net.www.http.ChunkedInputStream r0;
        int i0, i1, i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i55, $i56, $i58, $i59, i60, $i61, $i63, $i64, $i65, $i67, $i68, $i69, $i70, $i71, i72, $i73, $i74, $i75;
        java.lang.String r1, r4, $r7, $r9, $r31, r33, $r35, r36, $r37;
        java.lang.NumberFormatException r2, $r10;
        byte[] r3, $r5, $r8, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r22, $r24, $r27, $r29, $r32;
        byte $b6, $b54, $b57, $b62, $b66;
        java.io.IOException $r6, $r11, $r23, $r25, $r28, $r30, $r34;
        char $c15;
        sun.net.www.MessageHeader $r38;

        r0 := @this: sun.net.www.http.ChunkedInputStream;

     label0:
        $i3 = r0.<sun.net.www.http.ChunkedInputStream: int state>;
        if $i3 == 5 goto label33;

        $i4 = r0.<sun.net.www.http.ChunkedInputStream: int state>;
        tableswitch($i4)
        {
            case 1: goto label1;
            case 2: goto label13;
            case 3: goto label19;
            case 4: goto label23;
            default: goto label32;
        };

     label1:
        i0 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;

     label2:
        $i5 = r0.<sun.net.www.http.ChunkedInputStream: int rawCount>;
        if i0 >= $i5 goto label4;

        $r5 = r0.<sun.net.www.http.ChunkedInputStream: byte[] rawData>;
        $b6 = $r5[i0];
        if $b6 != 10 goto label3;

        goto label4;

     label3:
        i0 = i0 + 1;
        $i7 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;
        $i8 = i0 - $i7;
        if $i8 < 2050 goto label2;

        r0.<sun.net.www.http.ChunkedInputStream: boolean error> = 1;
        $r6 = new java.io.IOException;
        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Chunk header too long");
        throw $r6;

     label4:
        $i9 = r0.<sun.net.www.http.ChunkedInputStream: int rawCount>;
        if i0 < $i9 goto label5;

        return;

     label5:
        $r7 = new java.lang.String;
        $r8 = r0.<sun.net.www.http.ChunkedInputStream: byte[] rawData>;
        $i10 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;
        $i11 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;
        $i12 = i0 - $i11;
        $i13 = $i12 + 1;
        specialinvoke $r7.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r8, $i10, $i13, "US-ASCII");
        r1 = $r7;
        i1 = 0;

     label6:
        $i14 = virtualinvoke r1.<java.lang.String: int length()>();
        if i1 >= $i14 goto label8;

        $c15 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);
        $i16 = staticinvoke <java.lang.Character: int digit(char,int)>($c15, 16);
        if $i16 != -1 goto label7;

        goto label8;

     label7:
        i1 = i1 + 1;
        goto label6;

     label8:
        $r9 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i1);
        $i17 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r9, 16);
        r0.<sun.net.www.http.ChunkedInputStream: int chunkSize> = $i17;

     label9:
        goto label11;

     label10:
        $r10 := @caughtexception;
        r2 = $r10;
        r0.<sun.net.www.http.ChunkedInputStream: boolean error> = 1;
        $r11 = new java.io.IOException;
        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Bogus chunk size");
        throw $r11;

     label11:
        $i18 = i0 + 1;
        r0.<sun.net.www.http.ChunkedInputStream: int rawPos> = $i18;
        r0.<sun.net.www.http.ChunkedInputStream: int chunkRead> = 0;
        $i19 = r0.<sun.net.www.http.ChunkedInputStream: int chunkSize>;
        if $i19 <= 0 goto label12;

        r0.<sun.net.www.http.ChunkedInputStream: int state> = 2;
        goto label32;

     label12:
        r0.<sun.net.www.http.ChunkedInputStream: int state> = 4;
        goto label32;

     label13:
        $i20 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;
        $i21 = r0.<sun.net.www.http.ChunkedInputStream: int rawCount>;
        if $i20 < $i21 goto label14;

        return;

     label14:
        $i22 = r0.<sun.net.www.http.ChunkedInputStream: int chunkSize>;
        $i23 = r0.<sun.net.www.http.ChunkedInputStream: int chunkRead>;
        $i24 = $i22 - $i23;
        $i25 = r0.<sun.net.www.http.ChunkedInputStream: int rawCount>;
        $i26 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;
        $i27 = $i25 - $i26;
        i28 = staticinvoke <java.lang.Math: int min(int,int)>($i24, $i27);
        $r12 = r0.<sun.net.www.http.ChunkedInputStream: byte[] chunkData>;
        $i29 = lengthof $r12;
        $i30 = r0.<sun.net.www.http.ChunkedInputStream: int chunkCount>;
        $i31 = $i30 + i28;
        if $i29 >= $i31 goto label17;

        $i32 = r0.<sun.net.www.http.ChunkedInputStream: int chunkCount>;
        $i33 = r0.<sun.net.www.http.ChunkedInputStream: int chunkPos>;
        i2 = $i32 - $i33;
        $r13 = r0.<sun.net.www.http.ChunkedInputStream: byte[] chunkData>;
        $i34 = lengthof $r13;
        $i35 = i2 + i28;
        if $i34 >= $i35 goto label15;

        $i36 = i2 + i28;
        r3 = newarray (byte)[$i36];
        $r14 = r0.<sun.net.www.http.ChunkedInputStream: byte[] chunkData>;
        $i37 = r0.<sun.net.www.http.ChunkedInputStream: int chunkPos>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, $i37, r3, 0, i2);
        r0.<sun.net.www.http.ChunkedInputStream: byte[] chunkData> = r3;
        goto label16;

     label15:
        $r15 = r0.<sun.net.www.http.ChunkedInputStream: byte[] chunkData>;
        $i38 = r0.<sun.net.www.http.ChunkedInputStream: int chunkPos>;
        $r16 = r0.<sun.net.www.http.ChunkedInputStream: byte[] chunkData>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, $i38, $r16, 0, i2);

     label16:
        r0.<sun.net.www.http.ChunkedInputStream: int chunkPos> = 0;
        r0.<sun.net.www.http.ChunkedInputStream: int chunkCount> = i2;

     label17:
        $r17 = r0.<sun.net.www.http.ChunkedInputStream: byte[] rawData>;
        $i39 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;
        $r18 = r0.<sun.net.www.http.ChunkedInputStream: byte[] chunkData>;
        $i40 = r0.<sun.net.www.http.ChunkedInputStream: int chunkCount>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r17, $i39, $r18, $i40, i28);
        $i41 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;
        $i42 = $i41 + i28;
        r0.<sun.net.www.http.ChunkedInputStream: int rawPos> = $i42;
        $i43 = r0.<sun.net.www.http.ChunkedInputStream: int chunkCount>;
        $i44 = $i43 + i28;
        r0.<sun.net.www.http.ChunkedInputStream: int chunkCount> = $i44;
        $i45 = r0.<sun.net.www.http.ChunkedInputStream: int chunkRead>;
        $i46 = $i45 + i28;
        r0.<sun.net.www.http.ChunkedInputStream: int chunkRead> = $i46;
        $i47 = r0.<sun.net.www.http.ChunkedInputStream: int chunkSize>;
        $i48 = r0.<sun.net.www.http.ChunkedInputStream: int chunkRead>;
        $i49 = $i47 - $i48;
        if $i49 > 0 goto label18;

        r0.<sun.net.www.http.ChunkedInputStream: int state> = 3;
        goto label32;

     label18:
        return;

     label19:
        $i50 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;
        $i51 = $i50 + 1;
        $i52 = r0.<sun.net.www.http.ChunkedInputStream: int rawCount>;
        if $i51 < $i52 goto label20;

        return;

     label20:
        $r22 = r0.<sun.net.www.http.ChunkedInputStream: byte[] rawData>;
        $i53 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;
        $b54 = $r22[$i53];
        if $b54 == 13 goto label21;

        r0.<sun.net.www.http.ChunkedInputStream: boolean error> = 1;
        $r23 = new java.io.IOException;
        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>("missing CR");
        throw $r23;

     label21:
        $r24 = r0.<sun.net.www.http.ChunkedInputStream: byte[] rawData>;
        $i55 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;
        $i56 = $i55 + 1;
        $b57 = $r24[$i56];
        if $b57 == 10 goto label22;

        r0.<sun.net.www.http.ChunkedInputStream: boolean error> = 1;
        $r25 = new java.io.IOException;
        specialinvoke $r25.<java.io.IOException: void <init>(java.lang.String)>("missing LF");
        throw $r25;

     label22:
        $i58 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;
        $i59 = $i58 + 2;
        r0.<sun.net.www.http.ChunkedInputStream: int rawPos> = $i59;
        r0.<sun.net.www.http.ChunkedInputStream: int state> = 1;
        goto label32;

     label23:
        i60 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;

     label24:
        $i61 = r0.<sun.net.www.http.ChunkedInputStream: int rawCount>;
        if i60 >= $i61 goto label26;

        $r27 = r0.<sun.net.www.http.ChunkedInputStream: byte[] rawData>;
        $b62 = $r27[i60];
        if $b62 != 10 goto label25;

        goto label26;

     label25:
        i60 = i60 + 1;
        goto label24;

     label26:
        $i63 = r0.<sun.net.www.http.ChunkedInputStream: int rawCount>;
        if i60 < $i63 goto label27;

        return;

     label27:
        $i64 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;
        if i60 != $i64 goto label28;

        r0.<sun.net.www.http.ChunkedInputStream: boolean error> = 1;
        $r28 = new java.io.IOException;
        specialinvoke $r28.<java.io.IOException: void <init>(java.lang.String)>("LF should be proceeded by CR");
        throw $r28;

     label28:
        $r29 = r0.<sun.net.www.http.ChunkedInputStream: byte[] rawData>;
        $i65 = i60 - 1;
        $b66 = $r29[$i65];
        if $b66 == 13 goto label29;

        r0.<sun.net.www.http.ChunkedInputStream: boolean error> = 1;
        $r30 = new java.io.IOException;
        specialinvoke $r30.<java.io.IOException: void <init>(java.lang.String)>("LF should be proceeded by CR");
        throw $r30;

     label29:
        $i67 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;
        $i68 = $i67 + 1;
        if i60 != $i68 goto label30;

        r0.<sun.net.www.http.ChunkedInputStream: int state> = 5;
        specialinvoke r0.<sun.net.www.http.ChunkedInputStream: void closeUnderlying()>();
        return;

     label30:
        $r31 = new java.lang.String;
        $r32 = r0.<sun.net.www.http.ChunkedInputStream: byte[] rawData>;
        $i69 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;
        $i70 = r0.<sun.net.www.http.ChunkedInputStream: int rawPos>;
        $i71 = i60 - $i70;
        specialinvoke $r31.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r32, $i69, $i71, "US-ASCII");
        r33 = $r31;
        i72 = virtualinvoke r33.<java.lang.String: int indexOf(int)>(58);
        if i72 != -1 goto label31;

        $r34 = new java.io.IOException;
        specialinvoke $r34.<java.io.IOException: void <init>(java.lang.String)>("Malformed tailer - format should be key:value");
        throw $r34;

     label31:
        $r35 = virtualinvoke r33.<java.lang.String: java.lang.String substring(int,int)>(0, i72);
        r36 = virtualinvoke $r35.<java.lang.String: java.lang.String trim()>();
        $i73 = i72 + 1;
        $i74 = virtualinvoke r33.<java.lang.String: int length()>();
        $r37 = virtualinvoke r33.<java.lang.String: java.lang.String substring(int,int)>($i73, $i74);
        r4 = virtualinvoke $r37.<java.lang.String: java.lang.String trim()>();
        $r38 = r0.<sun.net.www.http.ChunkedInputStream: sun.net.www.MessageHeader responses>;
        virtualinvoke $r38.<sun.net.www.MessageHeader: void add(java.lang.String,java.lang.String)>(r36, r4);
        $i75 = i60 + 1;
        r0.<sun.net.www.http.ChunkedInputStream: int rawPos> = $i75;

     label32:
        goto label0;

     label33:
        return;

        catch java.lang.NumberFormatException from label8 to label9 with label10;
    }

    private int readAheadNonBlocking() throws java.io.IOException
    {
        sun.net.www.http.ChunkedInputStream r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.io.IOException r1, $r5;
        java.io.InputStream $r2, $r3;
        byte[] $r4;

        r0 := @this: sun.net.www.http.ChunkedInputStream;
        $r2 = r0.<sun.net.www.http.ChunkedInputStream: java.io.InputStream in>;
        i0 = virtualinvoke $r2.<java.io.InputStream: int available()>();
        if i0 <= 0 goto label5;

        specialinvoke r0.<sun.net.www.http.ChunkedInputStream: void ensureRawAvailable(int)>(i0);

     label0:
        $r3 = r0.<sun.net.www.http.ChunkedInputStream: java.io.InputStream in>;
        $r4 = r0.<sun.net.www.http.ChunkedInputStream: byte[] rawData>;
        $i2 = r0.<sun.net.www.http.ChunkedInputStream: int rawCount>;
        i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r4, $i2, i0);

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r1 = $r5;
        r0.<sun.net.www.http.ChunkedInputStream: boolean error> = 1;
        throw r1;

     label3:
        if i1 >= 0 goto label4;

        r0.<sun.net.www.http.ChunkedInputStream: boolean error> = 1;
        return -1;

     label4:
        $i3 = r0.<sun.net.www.http.ChunkedInputStream: int rawCount>;
        $i4 = $i3 + i1;
        r0.<sun.net.www.http.ChunkedInputStream: int rawCount> = $i4;
        specialinvoke r0.<sun.net.www.http.ChunkedInputStream: void processRaw()>();

     label5:
        $i5 = r0.<sun.net.www.http.ChunkedInputStream: int chunkCount>;
        $i6 = r0.<sun.net.www.http.ChunkedInputStream: int chunkPos>;
        $i7 = $i5 - $i6;
        return $i7;

        catch java.io.IOException from label0 to label1 with label2;
    }

    private int readAheadBlocking() throws java.io.IOException
    {
        sun.net.www.http.ChunkedInputStream r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.io.IOException r1, $r5, $r6;
        java.io.InputStream $r2;
        byte[] $r3, $r4;

        r0 := @this: sun.net.www.http.ChunkedInputStream;

     label0:
        $i1 = r0.<sun.net.www.http.ChunkedInputStream: int state>;
        if $i1 != 5 goto label1;

        return -1;

     label1:
        specialinvoke r0.<sun.net.www.http.ChunkedInputStream: void ensureRawAvailable(int)>(32);

     label2:
        $r2 = r0.<sun.net.www.http.ChunkedInputStream: java.io.InputStream in>;
        $r3 = r0.<sun.net.www.http.ChunkedInputStream: byte[] rawData>;
        $i2 = r0.<sun.net.www.http.ChunkedInputStream: int rawCount>;
        $r4 = r0.<sun.net.www.http.ChunkedInputStream: byte[] rawData>;
        $i3 = lengthof $r4;
        $i4 = r0.<sun.net.www.http.ChunkedInputStream: int rawCount>;
        $i5 = $i3 - $i4;
        i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>($r3, $i2, $i5);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;
        r1 = $r5;
        r0.<sun.net.www.http.ChunkedInputStream: boolean error> = 1;
        throw r1;

     label5:
        if i0 >= 0 goto label6;

        r0.<sun.net.www.http.ChunkedInputStream: boolean error> = 1;
        $r6 = new java.io.IOException;
        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Premature EOF");
        throw $r6;

     label6:
        $i6 = r0.<sun.net.www.http.ChunkedInputStream: int rawCount>;
        $i7 = $i6 + i0;
        r0.<sun.net.www.http.ChunkedInputStream: int rawCount> = $i7;
        specialinvoke r0.<sun.net.www.http.ChunkedInputStream: void processRaw()>();
        $i8 = r0.<sun.net.www.http.ChunkedInputStream: int chunkCount>;
        if $i8 <= 0 goto label0;

        $i9 = r0.<sun.net.www.http.ChunkedInputStream: int chunkCount>;
        $i10 = r0.<sun.net.www.http.ChunkedInputStream: int chunkPos>;
        $i11 = $i9 - $i10;
        return $i11;

        catch java.io.IOException from label2 to label3 with label4;
    }

    private int readAhead(boolean) throws java.io.IOException
    {
        sun.net.www.http.ChunkedInputStream r0;
        boolean z0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: sun.net.www.http.ChunkedInputStream;
        z0 := @parameter0: boolean;
        $i0 = r0.<sun.net.www.http.ChunkedInputStream: int state>;
        if $i0 != 5 goto label0;

        return -1;

     label0:
        $i1 = r0.<sun.net.www.http.ChunkedInputStream: int chunkPos>;
        $i2 = r0.<sun.net.www.http.ChunkedInputStream: int chunkCount>;
        if $i1 < $i2 goto label1;

        r0.<sun.net.www.http.ChunkedInputStream: int chunkCount> = 0;
        r0.<sun.net.www.http.ChunkedInputStream: int chunkPos> = 0;

     label1:
        if z0 == 0 goto label2;

        $i3 = specialinvoke r0.<sun.net.www.http.ChunkedInputStream: int readAheadBlocking()>();
        return $i3;

     label2:
        $i4 = specialinvoke r0.<sun.net.www.http.ChunkedInputStream: int readAheadNonBlocking()>();
        return $i4;
    }

    public void <init>(java.io.InputStream, sun.net.www.http.HttpClient, sun.net.www.MessageHeader) throws java.io.IOException
    {
        sun.net.www.http.ChunkedInputStream r0;
        java.io.InputStream r1;
        sun.net.www.http.HttpClient r2;
        sun.net.www.MessageHeader r3;
        byte[] $r4, $r5;

        r0 := @this: sun.net.www.http.ChunkedInputStream;
        r1 := @parameter0: java.io.InputStream;
        r2 := @parameter1: sun.net.www.http.HttpClient;
        r3 := @parameter2: sun.net.www.MessageHeader;
        specialinvoke r0.<java.io.InputStream: void <init>()>();
        $r4 = newarray (byte)[4096];
        r0.<sun.net.www.http.ChunkedInputStream: byte[] chunkData> = $r4;
        $r5 = newarray (byte)[32];
        r0.<sun.net.www.http.ChunkedInputStream: byte[] rawData> = $r5;
        r0.<sun.net.www.http.ChunkedInputStream: java.io.InputStream in> = r1;
        r0.<sun.net.www.http.ChunkedInputStream: sun.net.www.MessageHeader responses> = r3;
        r0.<sun.net.www.http.ChunkedInputStream: sun.net.www.http.HttpClient hc> = r2;
        r0.<sun.net.www.http.ChunkedInputStream: int state> = 1;
        return;
    }

    public synchronized int read() throws java.io.IOException
    {
        sun.net.www.http.ChunkedInputStream r0;
        int $i0, $i1, $i2, $i3, $i4;
        byte[] $r1;
        byte $b5;
        short $s6;

        r0 := @this: sun.net.www.http.ChunkedInputStream;
        specialinvoke r0.<sun.net.www.http.ChunkedInputStream: void ensureOpen()>();
        $i1 = r0.<sun.net.www.http.ChunkedInputStream: int chunkPos>;
        $i2 = r0.<sun.net.www.http.ChunkedInputStream: int chunkCount>;
        if $i1 < $i2 goto label0;

        $i3 = specialinvoke r0.<sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>(1);
        if $i3 > 0 goto label0;

        return -1;

     label0:
        $r1 = r0.<sun.net.www.http.ChunkedInputStream: byte[] chunkData>;
        $i0 = r0.<sun.net.www.http.ChunkedInputStream: int chunkPos>;
        $i4 = $i0 + 1;
        r0.<sun.net.www.http.ChunkedInputStream: int chunkPos> = $i4;
        $b5 = $r1[$i0];
        $s6 = $b5 & 255;
        return $s6;
    }

    public synchronized int read(byte[], int, int) throws java.io.IOException
    {
        sun.net.www.http.ChunkedInputStream r0;
        byte[] r1, $r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.IndexOutOfBoundsException $r2;

        r0 := @this: sun.net.www.http.ChunkedInputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<sun.net.www.http.ChunkedInputStream: void ensureOpen()>();
        if i0 < 0 goto label0;

        $i4 = lengthof r1;
        if i0 > $i4 goto label0;

        if i1 < 0 goto label0;

        $i5 = i0 + i1;
        $i6 = lengthof r1;
        if $i5 > $i6 goto label0;

        $i7 = i0 + i1;
        if $i7 >= 0 goto label1;

     label0:
        $r2 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r2;

     label1:
        if i1 != 0 goto label2;

        return 0;

     label2:
        $i8 = r0.<sun.net.www.http.ChunkedInputStream: int chunkCount>;
        $i9 = r0.<sun.net.www.http.ChunkedInputStream: int chunkPos>;
        i2 = $i8 - $i9;
        if i2 > 0 goto label4;

        $i10 = r0.<sun.net.www.http.ChunkedInputStream: int state>;
        if $i10 != 2 goto label3;

        $i11 = specialinvoke r0.<sun.net.www.http.ChunkedInputStream: int fastRead(byte[],int,int)>(r1, i0, i1);
        return $i11;

     label3:
        i2 = specialinvoke r0.<sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>(1);
        if i2 >= 0 goto label4;

        return -1;

     label4:
        if i2 >= i1 goto label5;

        $i12 = i2;
        goto label6;

     label5:
        $i12 = i1;

     label6:
        i3 = $i12;
        $r3 = r0.<sun.net.www.http.ChunkedInputStream: byte[] chunkData>;
        $i13 = r0.<sun.net.www.http.ChunkedInputStream: int chunkPos>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i13, r1, i0, i3);
        $i14 = r0.<sun.net.www.http.ChunkedInputStream: int chunkPos>;
        $i15 = $i14 + i3;
        r0.<sun.net.www.http.ChunkedInputStream: int chunkPos> = $i15;
        return i3;
    }

    public synchronized int available() throws java.io.IOException
    {
        sun.net.www.http.ChunkedInputStream r0;
        int i0, $i1, $i2, i3;

        r0 := @this: sun.net.www.http.ChunkedInputStream;
        specialinvoke r0.<sun.net.www.http.ChunkedInputStream: void ensureOpen()>();
        $i1 = r0.<sun.net.www.http.ChunkedInputStream: int chunkCount>;
        $i2 = r0.<sun.net.www.http.ChunkedInputStream: int chunkPos>;
        i0 = $i1 - $i2;
        if i0 <= 0 goto label0;

        return i0;

     label0:
        i3 = specialinvoke r0.<sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>(0);
        if i3 >= 0 goto label1;

        return 0;

     label1:
        return i3;
    }

    public synchronized void close() throws java.io.IOException
    {
        sun.net.www.http.ChunkedInputStream r0;
        boolean $z0;

        r0 := @this: sun.net.www.http.ChunkedInputStream;
        $z0 = r0.<sun.net.www.http.ChunkedInputStream: boolean closed>;
        if $z0 == 0 goto label0;

        return;

     label0:
        specialinvoke r0.<sun.net.www.http.ChunkedInputStream: void closeUnderlying()>();
        r0.<sun.net.www.http.ChunkedInputStream: boolean closed> = 1;
        return;
    }

    public synchronized boolean hurry()
    {
        sun.net.www.http.ChunkedInputStream r0;
        java.lang.Exception r1, $r3;
        java.io.InputStream $r2;
        boolean $z0, $z1, $z2;
        int $i1;

        r0 := @this: sun.net.www.http.ChunkedInputStream;
        $r2 = r0.<sun.net.www.http.ChunkedInputStream: java.io.InputStream in>;
        if $r2 == null goto label0;

        $z0 = r0.<sun.net.www.http.ChunkedInputStream: boolean error>;
        if $z0 == 0 goto label1;

     label0:
        return 0;

     label1:
        specialinvoke r0.<sun.net.www.http.ChunkedInputStream: int readAhead(boolean)>(0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;
        r1 = $r3;
        return 0;

     label4:
        $z1 = r0.<sun.net.www.http.ChunkedInputStream: boolean error>;
        if $z1 == 0 goto label5;

        return 0;

     label5:
        $i1 = r0.<sun.net.www.http.ChunkedInputStream: int state>;
        if $i1 != 5 goto label6;

        $z2 = 1;
        goto label7;

     label6:
        $z2 = 0;

     label7:
        return $z2;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
