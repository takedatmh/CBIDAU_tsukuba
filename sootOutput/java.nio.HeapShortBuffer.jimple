class java.nio.HeapShortBuffer extends java.nio.ShortBuffer
{

    void <init>(int, int)
    {
        java.nio.HeapShortBuffer r0;
        int i0, i1;
        short[] $r1;

        r0 := @this: java.nio.HeapShortBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = newarray (short)[i0];
        specialinvoke r0.<java.nio.ShortBuffer: void <init>(int,int,int,int,short[],int)>(-1, 0, i1, i0, $r1, 0);
        return;
    }

    void <init>(short[], int, int)
    {
        java.nio.HeapShortBuffer r0;
        short[] r1;
        int i0, i1, $i2, $i3;

        r0 := @this: java.nio.HeapShortBuffer;
        r1 := @parameter0: short[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = i0 + i1;
        $i3 = lengthof r1;
        specialinvoke r0.<java.nio.ShortBuffer: void <init>(int,int,int,int,short[],int)>(-1, i0, $i2, $i3, r1, 0);
        return;
    }

    protected void <init>(short[], int, int, int, int, int)
    {
        java.nio.HeapShortBuffer r0;
        short[] r1;
        int i0, i1, i2, i3, i4;

        r0 := @this: java.nio.HeapShortBuffer;
        r1 := @parameter0: short[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        specialinvoke r0.<java.nio.ShortBuffer: void <init>(int,int,int,int,short[],int)>(i0, i1, i2, i3, r1, i4);
        return;
    }

    public java.nio.ShortBuffer slice()
    {
        java.nio.HeapShortBuffer r0, $r1;
        short[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapShortBuffer;
        $r1 = new java.nio.HeapShortBuffer;
        $r2 = r0.<java.nio.HeapShortBuffer: short[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapShortBuffer: int remaining()>();
        $i1 = virtualinvoke r0.<java.nio.HeapShortBuffer: int remaining()>();
        $i2 = virtualinvoke r0.<java.nio.HeapShortBuffer: int position()>();
        $i3 = r0.<java.nio.HeapShortBuffer: int offset>;
        $i4 = $i2 + $i3;
        specialinvoke $r1.<java.nio.HeapShortBuffer: void <init>(short[],int,int,int,int,int)>($r2, -1, 0, $i0, $i1, $i4);
        return $r1;
    }

    public java.nio.ShortBuffer duplicate()
    {
        java.nio.HeapShortBuffer r0, $r1;
        short[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapShortBuffer;
        $r1 = new java.nio.HeapShortBuffer;
        $r2 = r0.<java.nio.HeapShortBuffer: short[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapShortBuffer: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.HeapShortBuffer: int position()>();
        $i2 = virtualinvoke r0.<java.nio.HeapShortBuffer: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.HeapShortBuffer: int capacity()>();
        $i4 = r0.<java.nio.HeapShortBuffer: int offset>;
        specialinvoke $r1.<java.nio.HeapShortBuffer: void <init>(short[],int,int,int,int,int)>($r2, $i0, $i1, $i2, $i3, $i4);
        return $r1;
    }

    public java.nio.ShortBuffer asReadOnlyBuffer()
    {
        java.nio.HeapShortBuffer r0;
        java.nio.HeapShortBufferR $r1;
        short[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapShortBuffer;
        $r1 = new java.nio.HeapShortBufferR;
        $r2 = r0.<java.nio.HeapShortBuffer: short[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapShortBuffer: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.HeapShortBuffer: int position()>();
        $i2 = virtualinvoke r0.<java.nio.HeapShortBuffer: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.HeapShortBuffer: int capacity()>();
        $i4 = r0.<java.nio.HeapShortBuffer: int offset>;
        specialinvoke $r1.<java.nio.HeapShortBufferR: void <init>(short[],int,int,int,int,int)>($r2, $i0, $i1, $i2, $i3, $i4);
        return $r1;
    }

    protected int ix(int)
    {
        java.nio.HeapShortBuffer r0;
        int i0, $i1, $i2;

        r0 := @this: java.nio.HeapShortBuffer;
        i0 := @parameter0: int;
        $i1 = r0.<java.nio.HeapShortBuffer: int offset>;
        $i2 = i0 + $i1;
        return $i2;
    }

    public short get()
    {
        java.nio.HeapShortBuffer r0;
        short[] $r1;
        int $i0, $i1;
        short $s2;

        r0 := @this: java.nio.HeapShortBuffer;
        $r1 = r0.<java.nio.HeapShortBuffer: short[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapShortBuffer: int nextGetIndex()>();
        $i1 = virtualinvoke r0.<java.nio.HeapShortBuffer: int ix(int)>($i0);
        $s2 = $r1[$i1];
        return $s2;
    }

    public short get(int)
    {
        java.nio.HeapShortBuffer r0;
        int i0, $i1, $i2;
        short[] $r1;
        short $s3;

        r0 := @this: java.nio.HeapShortBuffer;
        i0 := @parameter0: int;
        $r1 = r0.<java.nio.HeapShortBuffer: short[] hb>;
        $i1 = virtualinvoke r0.<java.nio.HeapShortBuffer: int checkIndex(int)>(i0);
        $i2 = virtualinvoke r0.<java.nio.HeapShortBuffer: int ix(int)>($i1);
        $s3 = $r1[$i2];
        return $s3;
    }

    public java.nio.ShortBuffer get(short[], int, int)
    {
        java.nio.HeapShortBuffer r0;
        short[] r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.nio.BufferUnderflowException $r2;

        r0 := @this: java.nio.HeapShortBuffer;
        r1 := @parameter0: short[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = lengthof r1;
        staticinvoke <java.nio.HeapShortBuffer: void checkBounds(int,int,int)>(i0, i1, $i2);
        $i3 = virtualinvoke r0.<java.nio.HeapShortBuffer: int remaining()>();
        if i1 <= $i3 goto label0;

        $r2 = new java.nio.BufferUnderflowException;
        specialinvoke $r2.<java.nio.BufferUnderflowException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.nio.HeapShortBuffer: short[] hb>;
        $i4 = virtualinvoke r0.<java.nio.HeapShortBuffer: int position()>();
        $i5 = virtualinvoke r0.<java.nio.HeapShortBuffer: int ix(int)>($i4);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i5, r1, i0, i1);
        $i6 = virtualinvoke r0.<java.nio.HeapShortBuffer: int position()>();
        $i7 = $i6 + i1;
        virtualinvoke r0.<java.nio.HeapShortBuffer: java.nio.Buffer position(int)>($i7);
        return r0;
    }

    public boolean isDirect()
    {
        java.nio.HeapShortBuffer r0;

        r0 := @this: java.nio.HeapShortBuffer;
        return 0;
    }

    public boolean isReadOnly()
    {
        java.nio.HeapShortBuffer r0;

        r0 := @this: java.nio.HeapShortBuffer;
        return 0;
    }

    public java.nio.ShortBuffer put(short)
    {
        java.nio.HeapShortBuffer r0;
        short s0;
        short[] $r1;
        int $i1, $i2;

        r0 := @this: java.nio.HeapShortBuffer;
        s0 := @parameter0: short;
        $r1 = r0.<java.nio.HeapShortBuffer: short[] hb>;
        $i1 = virtualinvoke r0.<java.nio.HeapShortBuffer: int nextPutIndex()>();
        $i2 = virtualinvoke r0.<java.nio.HeapShortBuffer: int ix(int)>($i1);
        $r1[$i2] = s0;
        return r0;
    }

    public java.nio.ShortBuffer put(int, short)
    {
        java.nio.HeapShortBuffer r0;
        int i0, $i2, $i3;
        short s1;
        short[] $r1;

        r0 := @this: java.nio.HeapShortBuffer;
        i0 := @parameter0: int;
        s1 := @parameter1: short;
        $r1 = r0.<java.nio.HeapShortBuffer: short[] hb>;
        $i2 = virtualinvoke r0.<java.nio.HeapShortBuffer: int checkIndex(int)>(i0);
        $i3 = virtualinvoke r0.<java.nio.HeapShortBuffer: int ix(int)>($i2);
        $r1[$i3] = s1;
        return r0;
    }

    public java.nio.ShortBuffer put(short[], int, int)
    {
        java.nio.HeapShortBuffer r0;
        short[] r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.nio.BufferOverflowException $r2;

        r0 := @this: java.nio.HeapShortBuffer;
        r1 := @parameter0: short[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = lengthof r1;
        staticinvoke <java.nio.HeapShortBuffer: void checkBounds(int,int,int)>(i0, i1, $i2);
        $i3 = virtualinvoke r0.<java.nio.HeapShortBuffer: int remaining()>();
        if i1 <= $i3 goto label0;

        $r2 = new java.nio.BufferOverflowException;
        specialinvoke $r2.<java.nio.BufferOverflowException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.nio.HeapShortBuffer: short[] hb>;
        $i4 = virtualinvoke r0.<java.nio.HeapShortBuffer: int position()>();
        $i5 = virtualinvoke r0.<java.nio.HeapShortBuffer: int ix(int)>($i4);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r3, $i5, i1);
        $i6 = virtualinvoke r0.<java.nio.HeapShortBuffer: int position()>();
        $i7 = $i6 + i1;
        virtualinvoke r0.<java.nio.HeapShortBuffer: java.nio.Buffer position(int)>($i7);
        return r0;
    }

    public java.nio.ShortBuffer put(java.nio.ShortBuffer)
    {
        java.nio.HeapShortBuffer r0, r2;
        java.nio.ShortBuffer r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, $i15;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;
        java.nio.BufferOverflowException $r4, $r9;
        short[] $r5, $r6, $r10;

        r0 := @this: java.nio.HeapShortBuffer;
        r1 := @parameter0: java.nio.ShortBuffer;
        $z0 = r1 instanceof java.nio.HeapShortBuffer;
        if $z0 == 0 goto label2;

        if r1 != r0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r3;

     label0:
        r2 = (java.nio.HeapShortBuffer) r1;
        i0 = virtualinvoke r2.<java.nio.HeapShortBuffer: int remaining()>();
        $i1 = virtualinvoke r0.<java.nio.HeapShortBuffer: int remaining()>();
        if i0 <= $i1 goto label1;

        $r4 = new java.nio.BufferOverflowException;
        specialinvoke $r4.<java.nio.BufferOverflowException: void <init>()>();
        throw $r4;

     label1:
        $r5 = r2.<java.nio.HeapShortBuffer: short[] hb>;
        $i2 = virtualinvoke r2.<java.nio.HeapShortBuffer: int position()>();
        $i3 = virtualinvoke r2.<java.nio.HeapShortBuffer: int ix(int)>($i2);
        $r6 = r0.<java.nio.HeapShortBuffer: short[] hb>;
        $i4 = virtualinvoke r0.<java.nio.HeapShortBuffer: int position()>();
        $i5 = virtualinvoke r0.<java.nio.HeapShortBuffer: int ix(int)>($i4);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i3, $r6, $i5, i0);
        $i6 = virtualinvoke r2.<java.nio.HeapShortBuffer: int position()>();
        $i7 = $i6 + i0;
        virtualinvoke r2.<java.nio.HeapShortBuffer: java.nio.Buffer position(int)>($i7);
        $i8 = virtualinvoke r0.<java.nio.HeapShortBuffer: int position()>();
        $i9 = $i8 + i0;
        virtualinvoke r0.<java.nio.HeapShortBuffer: java.nio.Buffer position(int)>($i9);
        goto label5;

     label2:
        $z1 = virtualinvoke r1.<java.nio.ShortBuffer: boolean isDirect()>();
        if $z1 == 0 goto label4;

        i10 = virtualinvoke r1.<java.nio.ShortBuffer: int remaining()>();
        $i11 = virtualinvoke r0.<java.nio.HeapShortBuffer: int remaining()>();
        if i10 <= $i11 goto label3;

        $r9 = new java.nio.BufferOverflowException;
        specialinvoke $r9.<java.nio.BufferOverflowException: void <init>()>();
        throw $r9;

     label3:
        $r10 = r0.<java.nio.HeapShortBuffer: short[] hb>;
        $i12 = virtualinvoke r0.<java.nio.HeapShortBuffer: int position()>();
        $i13 = virtualinvoke r0.<java.nio.HeapShortBuffer: int ix(int)>($i12);
        virtualinvoke r1.<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[],int,int)>($r10, $i13, i10);
        $i14 = virtualinvoke r0.<java.nio.HeapShortBuffer: int position()>();
        $i15 = $i14 + i10;
        virtualinvoke r0.<java.nio.HeapShortBuffer: java.nio.Buffer position(int)>($i15);
        goto label5;

     label4:
        specialinvoke r0.<java.nio.ShortBuffer: java.nio.ShortBuffer put(java.nio.ShortBuffer)>(r1);

     label5:
        return r0;
    }

    public java.nio.ShortBuffer compact()
    {
        java.nio.HeapShortBuffer r0;
        short[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: java.nio.HeapShortBuffer;
        $r1 = r0.<java.nio.HeapShortBuffer: short[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapShortBuffer: int position()>();
        $i1 = virtualinvoke r0.<java.nio.HeapShortBuffer: int ix(int)>($i0);
        $r2 = r0.<java.nio.HeapShortBuffer: short[] hb>;
        $i2 = virtualinvoke r0.<java.nio.HeapShortBuffer: int ix(int)>(0);
        $i3 = virtualinvoke r0.<java.nio.HeapShortBuffer: int remaining()>();
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, $r2, $i2, $i3);
        $i4 = virtualinvoke r0.<java.nio.HeapShortBuffer: int remaining()>();
        virtualinvoke r0.<java.nio.HeapShortBuffer: java.nio.Buffer position(int)>($i4);
        $i5 = virtualinvoke r0.<java.nio.HeapShortBuffer: int capacity()>();
        virtualinvoke r0.<java.nio.HeapShortBuffer: java.nio.Buffer limit(int)>($i5);
        virtualinvoke r0.<java.nio.HeapShortBuffer: void discardMark()>();
        return r0;
    }

    public java.nio.ByteOrder order()
    {
        java.nio.HeapShortBuffer r0;
        java.nio.ByteOrder $r1;

        r0 := @this: java.nio.HeapShortBuffer;
        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();
        return $r1;
    }
}
