public class sun.reflect.generics.repository.FieldRepository extends sun.reflect.generics.repository.AbstractRepository
{
    private java.lang.reflect.Type genericType;

    protected void <init>(java.lang.String, sun.reflect.generics.factory.GenericsFactory)
    {
        sun.reflect.generics.repository.FieldRepository r0;
        java.lang.String r1;
        sun.reflect.generics.factory.GenericsFactory r2;

        r0 := @this: sun.reflect.generics.repository.FieldRepository;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: sun.reflect.generics.factory.GenericsFactory;
        specialinvoke r0.<sun.reflect.generics.repository.AbstractRepository: void <init>(java.lang.String,sun.reflect.generics.factory.GenericsFactory)>(r1, r2);
        return;
    }

    protected sun.reflect.generics.tree.TypeSignature parse(java.lang.String)
    {
        sun.reflect.generics.repository.FieldRepository r0;
        java.lang.String r1;
        sun.reflect.generics.parser.SignatureParser $r2;
        sun.reflect.generics.tree.TypeSignature $r3;

        r0 := @this: sun.reflect.generics.repository.FieldRepository;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.parser.SignatureParser make()>();
        $r3 = virtualinvoke $r2.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.TypeSignature parseTypeSig(java.lang.String)>(r1);
        return $r3;
    }

    public static sun.reflect.generics.repository.FieldRepository make(java.lang.String, sun.reflect.generics.factory.GenericsFactory)
    {
        java.lang.String r0;
        sun.reflect.generics.factory.GenericsFactory r1;
        sun.reflect.generics.repository.FieldRepository $r2;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: sun.reflect.generics.factory.GenericsFactory;
        $r2 = new sun.reflect.generics.repository.FieldRepository;
        specialinvoke $r2.<sun.reflect.generics.repository.FieldRepository: void <init>(java.lang.String,sun.reflect.generics.factory.GenericsFactory)>(r0, r1);
        return $r2;
    }

    public java.lang.reflect.Type getGenericType()
    {
        sun.reflect.generics.repository.FieldRepository r0;
        sun.reflect.generics.visitor.Reifier r1;
        java.lang.reflect.Type $r2, $r5, $r6;
        sun.reflect.generics.tree.Tree $r3;
        sun.reflect.generics.tree.TypeSignature $r4;

        r0 := @this: sun.reflect.generics.repository.FieldRepository;
        $r2 = r0.<sun.reflect.generics.repository.FieldRepository: java.lang.reflect.Type genericType>;
        if $r2 != null goto label0;

        r1 = virtualinvoke r0.<sun.reflect.generics.repository.FieldRepository: sun.reflect.generics.visitor.Reifier getReifier()>();
        $r3 = virtualinvoke r0.<sun.reflect.generics.repository.FieldRepository: sun.reflect.generics.tree.Tree getTree()>();
        $r4 = (sun.reflect.generics.tree.TypeSignature) $r3;
        interfaceinvoke $r4.<sun.reflect.generics.tree.TypeSignature: void accept(sun.reflect.generics.visitor.TypeTreeVisitor)>(r1);
        $r5 = virtualinvoke r1.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type getResult()>();
        r0.<sun.reflect.generics.repository.FieldRepository: java.lang.reflect.Type genericType> = $r5;

     label0:
        $r6 = r0.<sun.reflect.generics.repository.FieldRepository: java.lang.reflect.Type genericType>;
        return $r6;
    }

    protected volatile sun.reflect.generics.tree.Tree parse(java.lang.String)
    {
        sun.reflect.generics.repository.FieldRepository r0;
        java.lang.String r1;
        sun.reflect.generics.tree.TypeSignature $r2;

        r0 := @this: sun.reflect.generics.repository.FieldRepository;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<sun.reflect.generics.repository.FieldRepository: sun.reflect.generics.tree.TypeSignature parse(java.lang.String)>(r1);
        return $r2;
    }
}
