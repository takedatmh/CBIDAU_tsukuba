public class java.util.concurrent.ArrayBlockingQueue extends java.util.AbstractQueue implements java.util.concurrent.BlockingQueue, java.io.Serializable
{
    private static final long serialVersionUID;
    final java.lang.Object[] items;
    int takeIndex;
    int putIndex;
    int count;
    final java.util.concurrent.locks.ReentrantLock lock;
    private final java.util.concurrent.locks.Condition notEmpty;
    private final java.util.concurrent.locks.Condition notFull;

    final int inc(int)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        int i0, i1, $i2, $i3;
        java.lang.Object[] $r1;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        i0 := @parameter0: int;
        i1 = i0 + 1;
        $r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        $i2 = lengthof $r1;
        if i1 != $i2 goto label0;

        $i3 = 0;
        goto label1;

     label0:
        $i3 = i1;

     label1:
        return $i3;
    }

    final int dec(int)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        int i0, $i1, $i2;
        java.lang.Object[] $r1;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        i0 := @parameter0: int;
        if i0 != 0 goto label0;

        $r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        $i1 = lengthof $r1;
        goto label1;

     label0:
        $i1 = i0;

     label1:
        $i2 = $i1 - 1;
        return $i2;
    }

    static java.lang.Object cast(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;
        return r0;
    }

    final java.lang.Object itemAt(int)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        int i0;
        java.lang.Object[] $r2;
        java.lang.Object $r3, $r4;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        i0 := @parameter0: int;
        $r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        $r3 = $r2[i0];
        $r4 = staticinvoke <java.util.concurrent.ArrayBlockingQueue: java.lang.Object cast(java.lang.Object)>($r3);
        return $r4;
    }

    private static void checkNotNull(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.NullPointerException $r1;

        r0 := @parameter0: java.lang.Object;
        if r0 != null goto label0;

        $r1 = new java.lang.NullPointerException;
        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();
        throw $r1;

     label0:
        return;
    }

    private void insert(java.lang.Object)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object r1;
        java.lang.Object[] $r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.concurrent.locks.Condition $r4;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        $i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int putIndex>;
        $r2[$i0] = r1;
        $i1 = r0.<java.util.concurrent.ArrayBlockingQueue: int putIndex>;
        $i2 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>($i1);
        r0.<java.util.concurrent.ArrayBlockingQueue: int putIndex> = $i2;
        $i3 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;
        $i4 = $i3 + 1;
        r0.<java.util.concurrent.ArrayBlockingQueue: int count> = $i4;
        $r4 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty>;
        interfaceinvoke $r4.<java.util.concurrent.locks.Condition: void signal()>();
        return;
    }

    private java.lang.Object extract()
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object[] r1;
        java.lang.Object r2, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.concurrent.locks.Condition $r6;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        $i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;
        $r4 = r1[$i0];
        r2 = staticinvoke <java.util.concurrent.ArrayBlockingQueue: java.lang.Object cast(java.lang.Object)>($r4);
        $i1 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;
        r1[$i1] = null;
        $i2 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;
        $i3 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>($i2);
        r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex> = $i3;
        $i4 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;
        $i5 = $i4 - 1;
        r0.<java.util.concurrent.ArrayBlockingQueue: int count> = $i5;
        $r6 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull>;
        interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void signal()>();
        return r2;
    }

    void removeAt(int)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Object[] r1;
        java.lang.Object $r2;
        java.util.concurrent.locks.Condition $r4;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        i0 := @parameter0: int;
        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        $i2 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;
        if i0 != $i2 goto label0;

        $i3 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;
        r1[$i3] = null;
        $i4 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;
        $i5 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>($i4);
        r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex> = $i5;
        goto label3;

     label0:
        i1 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>(i0);
        $i6 = r0.<java.util.concurrent.ArrayBlockingQueue: int putIndex>;
        if i1 == $i6 goto label1;

        $r2 = r1[i1];
        r1[i0] = $r2;
        i0 = i1;
        goto label2;

     label1:
        r1[i0] = null;
        r0.<java.util.concurrent.ArrayBlockingQueue: int putIndex> = i0;
        goto label3;

     label2:
        goto label0;

     label3:
        $i7 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;
        $i8 = $i7 - 1;
        r0.<java.util.concurrent.ArrayBlockingQueue: int count> = $i8;
        $r4 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull>;
        interfaceinvoke $r4.<java.util.concurrent.locks.Condition: void signal()>();
        return;
    }

    public void <init>(int)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        int i0;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean)>(i0, 0);
        return;
    }

    public void <init>(int, boolean)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        int i0;
        boolean z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object[] $r2;
        java.util.concurrent.locks.ReentrantLock $r3, $r4, $r6;
        java.util.concurrent.locks.Condition $r5, $r7;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        i0 := @parameter0: int;
        z0 := @parameter1: boolean;
        specialinvoke r0.<java.util.AbstractQueue: void <init>()>();
        if i0 > 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r1;

     label0:
        $r2 = newarray (java.lang.Object)[i0];
        r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items> = $r2;
        $r3 = new java.util.concurrent.locks.ReentrantLock;
        specialinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>(z0);
        r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock> = $r3;
        $r4 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();
        r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty> = $r5;
        $r6 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        $r7 = virtualinvoke $r6.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();
        r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull> = $r7;
        return;
    }

    public void <init>(int, boolean, java.util.Collection)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        int i0, i1, $i2, $i3;
        boolean z0, $z1;
        java.util.Collection r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        java.lang.Throwable r5, $r11;
        java.lang.Object[] $r6;
        java.lang.ArrayIndexOutOfBoundsException $r7, r8;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        i0 := @parameter0: int;
        z0 := @parameter1: boolean;
        r1 := @parameter2: java.util.Collection;
        specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean)>(i0, z0);
        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        i1 = 0;

     label1:
        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        staticinvoke <java.util.concurrent.ArrayBlockingQueue: void checkNotNull(java.lang.Object)>(r4);
        $r6 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        $i2 = i1;
        i1 = i1 + 1;
        $r6[$i2] = r4;
        goto label2;

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;
        r8 = $r7;
        $r9 = new java.lang.IllegalArgumentException;
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r9;

     label5:
        r0.<java.util.concurrent.ArrayBlockingQueue: int count> = i1;
        if i1 != i0 goto label6;

        $i3 = 0;
        goto label7;

     label6:
        $i3 = i1;

     label7:
        r0.<java.util.concurrent.ArrayBlockingQueue: int putIndex> = $i3;

     label8:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label12;

     label9:
        $r11 := @caughtexception;

     label10:
        r5 = $r11;

     label11:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r5;

     label12:
        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label3 with label4;
        catch java.lang.Throwable from label0 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    public boolean add(java.lang.Object)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 := @parameter0: java.lang.Object;
        $z0 = specialinvoke r0.<java.util.AbstractQueue: boolean add(java.lang.Object)>(r1);
        return $z0;
    }

    public boolean offer(java.lang.Object)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object r1;
        java.util.concurrent.locks.ReentrantLock r2;
        boolean z0, z1;
        java.lang.Throwable r3, $r5;
        int $i0, $i1;
        java.lang.Object[] $r4;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 := @parameter0: java.lang.Object;
        staticinvoke <java.util.concurrent.ArrayBlockingQueue: void checkNotNull(java.lang.Object)>(r1);
        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        $i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;
        $r4 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        $i1 = lengthof $r4;
        if $i0 != $i1 goto label2;

        z0 = 0;

     label1:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z0;

     label2:
        specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue: void insert(java.lang.Object)>(r1);
        z1 = 1;

     label3:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z1;

     label4:
        $r5 := @caughtexception;

     label5:
        r3 = $r5;

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void put(java.lang.Object) throws java.lang.InterruptedException
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r6;
        int $i0, $i1;
        java.lang.Object[] $r4;
        java.util.concurrent.locks.Condition $r5;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 := @parameter0: java.lang.Object;
        staticinvoke <java.util.concurrent.ArrayBlockingQueue: void checkNotNull(java.lang.Object)>(r1);
        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label0:
        $i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;
        $r4 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        $i1 = lengthof $r4;
        if $i0 != $i1 goto label1;

        $r5 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull>;
        interfaceinvoke $r5.<java.util.concurrent.locks.Condition: void await()>();
        goto label0;

     label1:
        specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue: void insert(java.lang.Object)>(r1);

     label2:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label6;

     label3:
        $r6 := @caughtexception;

     label4:
        r3 = $r6;

     label5:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object r1;
        long l0, l1;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.locks.ReentrantLock r3;
        boolean z0, z1;
        java.lang.Throwable r4, $r7;
        int $i2, $i3;
        java.lang.Object[] $r5;
        byte $b4;
        java.util.concurrent.locks.Condition $r6;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 := @parameter0: java.lang.Object;
        l0 := @parameter1: long;
        r2 := @parameter2: java.util.concurrent.TimeUnit;
        staticinvoke <java.util.concurrent.ArrayBlockingQueue: void checkNotNull(java.lang.Object)>(r1);
        l1 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);
        r3 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label0:
        $i2 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;
        $r5 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        $i3 = lengthof $r5;
        if $i2 != $i3 goto label3;

        $b4 = l1 cmp 0L;
        if $b4 > 0 goto label2;

        z0 = 0;

     label1:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z0;

     label2:
        $r6 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull>;
        l1 = interfaceinvoke $r6.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l1);
        goto label0;

     label3:
        specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue: void insert(java.lang.Object)>(r1);
        z1 = 1;

     label4:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z1;

     label5:
        $r7 := @caughtexception;

     label6:
        r4 = $r7;

     label7:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

        catch java.lang.Throwable from label0 to label1 with label5;
        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.lang.Object poll()
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r5;
        int $i0;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        $i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;
        if $i0 != 0 goto label1;

        $r4 = null;
        goto label2;

     label1:
        $r4 = specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object extract()>();

     label2:
        r2 = $r4;

     label3:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return r2;

     label4:
        $r5 := @caughtexception;

     label5:
        r3 = $r5;

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.lang.Object take() throws java.lang.InterruptedException
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r5;
        int $i0;
        java.util.concurrent.locks.Condition $r4;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label0:
        $i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;
        if $i0 != 0 goto label1;

        $r4 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty>;
        interfaceinvoke $r4.<java.util.concurrent.locks.Condition: void await()>();
        goto label0;

     label1:
        r2 = specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object extract()>();

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return r2;

     label3:
        $r5 := @caughtexception;

     label4:
        r3 = $r5;

     label5:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.Object poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        long l0, l1;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.locks.ReentrantLock r2;
        null_type n0;
        java.lang.Throwable r3, $r6;
        int $i2;
        byte $b3;
        java.util.concurrent.locks.Condition $r4;
        java.lang.Object r5;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.concurrent.TimeUnit;
        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);
        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label0:
        $i2 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;
        if $i2 != 0 goto label3;

        $b3 = l1 cmp 0L;
        if $b3 > 0 goto label2;

        n0 = null;

     label1:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return n0;

     label2:
        $r4 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty>;
        l1 = interfaceinvoke $r4.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l1);
        goto label0;

     label3:
        r5 = specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object extract()>();

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return r5;

     label5:
        $r6 := @caughtexception;

     label6:
        r3 = $r6;

     label7:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label5;
        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.lang.Object peek()
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r5;
        int $i0, $i1;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        $i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;
        if $i0 != 0 goto label1;

        $r4 = null;
        goto label2;

     label1:
        $i1 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;
        $r4 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object itemAt(int)>($i1);

     label2:
        r2 = $r4;

     label3:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return r2;

     label4:
        $r5 := @caughtexception;

     label5:
        r3 = $r5;

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int size()
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        int i0;
        java.lang.Throwable r2, $r3;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

     label1:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return i0;

     label2:
        $r3 := @caughtexception;

     label3:
        r2 = $r3;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public int remainingCapacity()
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        int i0, $i1, $i2;
        java.lang.Throwable r2, $r4;
        java.lang.Object[] $r3;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        $r3 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        $i1 = lengthof $r3;
        $i2 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;
        i0 = $i1 - $i2;

     label1:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return i0;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object r1, $r5;
        java.lang.Object[] r2;
        java.util.concurrent.locks.ReentrantLock r3;
        int i0, i1;
        boolean z0, $z1, z2;
        java.lang.Throwable r4, $r6;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        return 0;

     label0:
        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        r3 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;
        i1 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

     label2:
        if i1 <= 0 goto label5;

        $r5 = r2[i0];
        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);
        if $z1 == 0 goto label4;

        virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: void removeAt(int)>(i0);
        z0 = 1;

     label3:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z0;

     label4:
        i0 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>(i0);
        i1 = i1 + -1;
        goto label2;

     label5:
        z2 = 0;

     label6:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z2;

     label7:
        $r6 := @caughtexception;

     label8:
        r4 = $r6;

     label9:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object r1, $r5;
        java.lang.Object[] r2;
        java.util.concurrent.locks.ReentrantLock r3;
        int i0, i1;
        boolean z0, $z1, z2;
        java.lang.Throwable r4, $r6;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        return 0;

     label0:
        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        r3 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;
        i1 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

     label2:
        if i1 <= 0 goto label5;

        $r5 = r2[i0];
        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);
        if $z1 == 0 goto label4;

        z0 = 1;

     label3:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z0;

     label4:
        i0 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>(i0);
        i1 = i1 + -1;
        goto label2;

     label5:
        z2 = 0;

     label6:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z2;

     label7:
        $r6 := @caughtexception;

     label8:
        r4 = $r6;

     label9:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public java.lang.Object[] toArray()
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object[] r1, r3, r6;
        java.util.concurrent.locks.ReentrantLock r2;
        int i0, i1, i2;
        java.lang.Throwable r4, $r7;
        java.lang.Object $r5;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;
        r3 = newarray (java.lang.Object)[i0];
        i1 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;
        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r5 = r1[i1];
        r3[i2] = $r5;
        i1 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>(i1);
        i2 = i2 + 1;
        goto label1;

     label2:
        r6 = r3;

     label3:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return r6;

     label4:
        $r7 := @caughtexception;

     label5:
        r4 = $r7;

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object[] r1, r2, $r8, r10;
        java.util.concurrent.locks.ReentrantLock r3;
        int i0, i1, i2, i3;
        java.lang.Throwable r4, $r11;
        java.lang.Class $r5, $r6;
        java.lang.Object $r7, $r9;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 := @parameter0: java.lang.Object[];
        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        r3 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;
        i1 = lengthof r1;
        if i1 >= i0 goto label1;

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class getComponentType()>();
        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r6, i0);
        $r8 = (java.lang.Object[]) $r7;
        r1 = (java.lang.Object[]) $r8;

     label1:
        i2 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;
        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $r9 = r2[i2];
        r1[i3] = $r9;
        i2 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>(i2);
        i3 = i3 + 1;
        goto label2;

     label3:
        if i1 <= i0 goto label4;

        r1[i0] = null;

     label4:
        r10 = r1;

     label5:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return r10;

     label6:
        $r11 := @caughtexception;

     label7:
        r4 = $r11;

     label8:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

        catch java.lang.Throwable from label0 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        int i0, i1;
        java.lang.String r2, r4;
        java.lang.Object r3, $r11;
        java.lang.Throwable r5, $r16;
        java.lang.StringBuilder $r6, r7, $r13, $r14;
        java.lang.Object[] $r9;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;
        if i0 != 0 goto label2;

        r2 = "[]";

     label1:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return r2;

     label2:
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        r7 = $r6;
        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
        i1 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

     label3:
        $r9 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        r3 = $r9[i1];
        if r3 != r0 goto label4;

        $r11 = "(this Collection)";
        goto label5;

     label4:
        $r11 = r3;

     label5:
        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);
        i0 = i0 + -1;
        if i0 != 0 goto label7;

        $r13 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
        r4 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return r4;

     label7:
        $r14 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);
        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
        i1 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>(i1);
        goto label3;

     label8:
        $r16 := @caughtexception;
        r5 = $r16;

     label9:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r5;

        catch java.lang.Throwable from label0 to label1 with label8;
        catch java.lang.Throwable from label2 to label6 with label8;
        catch java.lang.Throwable from label7 to label9 with label8;
    }

    public void clear()
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object[] r1;
        java.util.concurrent.locks.ReentrantLock r2;
        int i0, i1;
        java.lang.Throwable r3, $r5;
        java.util.concurrent.locks.Condition $r4;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;
        i1 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

     label1:
        if i1 <= 0 goto label2;

        r1[i0] = null;
        i0 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>(i0);
        i1 = i1 + -1;
        goto label1;

     label2:
        r0.<java.util.concurrent.ArrayBlockingQueue: int count> = 0;
        r0.<java.util.concurrent.ArrayBlockingQueue: int putIndex> = 0;
        r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex> = 0;
        $r4 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull>;
        interfaceinvoke $r4.<java.util.concurrent.locks.Condition: void signalAll()>();

     label3:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label7;

     label4:
        $r5 := @caughtexception;

     label5:
        r3 = $r5;

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int drainTo(java.util.Collection)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.util.Collection r1;
        java.lang.Object[] r2;
        java.util.concurrent.locks.ReentrantLock r3;
        int i0, i1, i2, i3;
        java.lang.Throwable r4, $r10;
        java.lang.IllegalArgumentException $r5;
        java.lang.Object $r7, $r8;
        java.util.concurrent.locks.Condition $r9;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 := @parameter0: java.util.Collection;
        staticinvoke <java.util.concurrent.ArrayBlockingQueue: void checkNotNull(java.lang.Object)>(r1);
        if r1 != r0 goto label0;

        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r5;

     label0:
        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        r3 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;
        i1 = 0;
        i2 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

     label2:
        if i1 >= i2 goto label3;

        $r7 = r2[i0];
        $r8 = staticinvoke <java.util.concurrent.ArrayBlockingQueue: java.lang.Object cast(java.lang.Object)>($r7);
        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r8);
        r2[i0] = null;
        i0 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>(i0);
        i1 = i1 + 1;
        goto label2;

     label3:
        if i1 <= 0 goto label4;

        r0.<java.util.concurrent.ArrayBlockingQueue: int count> = 0;
        r0.<java.util.concurrent.ArrayBlockingQueue: int putIndex> = 0;
        r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex> = 0;
        $r9 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull>;
        interfaceinvoke $r9.<java.util.concurrent.locks.Condition: void signalAll()>();

     label4:
        i3 = i1;

     label5:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return i3;

     label6:
        $r10 := @caughtexception;

     label7:
        r4 = $r10;

     label8:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public int drainTo(java.util.Collection, int)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.util.Collection r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8;
        java.lang.Object[] r2;
        java.util.concurrent.locks.ReentrantLock r3;
        java.lang.Throwable r4, $r11;
        java.lang.IllegalArgumentException $r5;
        java.lang.Object $r7, $r8;
        java.util.concurrent.locks.Condition $r10;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        r1 := @parameter0: java.util.Collection;
        i0 := @parameter1: int;
        staticinvoke <java.util.concurrent.ArrayBlockingQueue: void checkNotNull(java.lang.Object)>(r1);
        if r1 != r0 goto label0;

        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r5;

     label0:
        if i0 > 0 goto label1;

        return 0;

     label1:
        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;
        r3 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        i1 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;
        i2 = 0;
        $i5 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;
        if i0 >= $i5 goto label3;

        $i6 = i0;
        goto label4;

     label3:
        $i6 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

     label4:
        i3 = $i6;

     label5:
        if i2 >= i3 goto label6;

        $r7 = r2[i1];
        $r8 = staticinvoke <java.util.concurrent.ArrayBlockingQueue: java.lang.Object cast(java.lang.Object)>($r7);
        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r8);
        r2[i1] = null;
        i1 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>(i1);
        i2 = i2 + 1;
        goto label5;

     label6:
        if i2 <= 0 goto label7;

        $i7 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;
        $i8 = $i7 - i2;
        r0.<java.util.concurrent.ArrayBlockingQueue: int count> = $i8;
        r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex> = i1;
        $r10 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull>;
        interfaceinvoke $r10.<java.util.concurrent.locks.Condition: void signalAll()>();

     label7:
        i4 = i2;

     label8:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return i4;

     label9:
        $r11 := @caughtexception;

     label10:
        r4 = $r11;

     label11:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

        catch java.lang.Throwable from label2 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.util.concurrent.ArrayBlockingQueue$Itr $r1;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;
        $r1 = new java.util.concurrent.ArrayBlockingQueue$Itr;
        specialinvoke $r1.<java.util.concurrent.ArrayBlockingQueue$Itr: void <init>(java.util.concurrent.ArrayBlockingQueue)>(r0);
        return $r1;
    }
}
