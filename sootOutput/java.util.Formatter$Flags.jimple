class java.util.Formatter$Flags extends java.lang.Object
{
    private int flags;
    static final java.util.Formatter$Flags NONE;
    static final java.util.Formatter$Flags LEFT_JUSTIFY;
    static final java.util.Formatter$Flags UPPERCASE;
    static final java.util.Formatter$Flags ALTERNATE;
    static final java.util.Formatter$Flags PLUS;
    static final java.util.Formatter$Flags LEADING_SPACE;
    static final java.util.Formatter$Flags ZERO_PAD;
    static final java.util.Formatter$Flags GROUP;
    static final java.util.Formatter$Flags PARENTHESES;
    static final java.util.Formatter$Flags PREVIOUS;

    private void <init>(int)
    {
        java.util.Formatter$Flags r0;
        int i0;

        r0 := @this: java.util.Formatter$Flags;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.Formatter$Flags: int flags> = i0;
        return;
    }

    public int valueOf()
    {
        java.util.Formatter$Flags r0;
        int $i0;

        r0 := @this: java.util.Formatter$Flags;
        $i0 = r0.<java.util.Formatter$Flags: int flags>;
        return $i0;
    }

    public boolean contains(java.util.Formatter$Flags)
    {
        java.util.Formatter$Flags r0, r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: java.util.Formatter$Flags;
        r1 := @parameter0: java.util.Formatter$Flags;
        $i0 = r0.<java.util.Formatter$Flags: int flags>;
        $i1 = virtualinvoke r1.<java.util.Formatter$Flags: int valueOf()>();
        $i2 = $i0 & $i1;
        $i3 = virtualinvoke r1.<java.util.Formatter$Flags: int valueOf()>();
        if $i2 != $i3 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.util.Formatter$Flags dup()
    {
        java.util.Formatter$Flags r0, $r1;
        int $i0;

        r0 := @this: java.util.Formatter$Flags;
        $r1 = new java.util.Formatter$Flags;
        $i0 = r0.<java.util.Formatter$Flags: int flags>;
        specialinvoke $r1.<java.util.Formatter$Flags: void <init>(int)>($i0);
        return $r1;
    }

    private java.util.Formatter$Flags add(java.util.Formatter$Flags)
    {
        java.util.Formatter$Flags r0, r1;
        int $i0, $i1, $i2;

        r0 := @this: java.util.Formatter$Flags;
        r1 := @parameter0: java.util.Formatter$Flags;
        $i0 = r0.<java.util.Formatter$Flags: int flags>;
        $i1 = virtualinvoke r1.<java.util.Formatter$Flags: int valueOf()>();
        $i2 = $i0 | $i1;
        r0.<java.util.Formatter$Flags: int flags> = $i2;
        return r0;
    }

    public java.util.Formatter$Flags remove(java.util.Formatter$Flags)
    {
        java.util.Formatter$Flags r0, r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.Formatter$Flags;
        r1 := @parameter0: java.util.Formatter$Flags;
        $i0 = r0.<java.util.Formatter$Flags: int flags>;
        $i1 = virtualinvoke r1.<java.util.Formatter$Flags: int valueOf()>();
        $i2 = $i1 ^ -1;
        $i3 = $i0 & $i2;
        r0.<java.util.Formatter$Flags: int flags> = $i3;
        return r0;
    }

    public static java.util.Formatter$Flags parse(java.lang.String)
    {
        java.lang.String r0, $r6;
        char[] r1;
        java.util.Formatter$Flags r2, r3, $r4;
        int i0, $i1;
        char $c2;
        boolean $z0;
        java.util.DuplicateFormatFlagsException $r5;

        r0 := @parameter0: java.lang.String;
        r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();
        $r4 = new java.util.Formatter$Flags;
        specialinvoke $r4.<java.util.Formatter$Flags: void <init>(int)>(0);
        r2 = $r4;
        i0 = 0;

     label0:
        $i1 = lengthof r1;
        if i0 >= $i1 goto label2;

        $c2 = r1[i0];
        r3 = staticinvoke <java.util.Formatter$Flags: java.util.Formatter$Flags parse(char)>($c2);
        $z0 = virtualinvoke r2.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>(r3);
        if $z0 == 0 goto label1;

        $r5 = new java.util.DuplicateFormatFlagsException;
        $r6 = virtualinvoke r3.<java.util.Formatter$Flags: java.lang.String toString()>();
        specialinvoke $r5.<java.util.DuplicateFormatFlagsException: void <init>(java.lang.String)>($r6);
        throw $r5;

     label1:
        specialinvoke r2.<java.util.Formatter$Flags: java.util.Formatter$Flags add(java.util.Formatter$Flags)>(r3);
        i0 = i0 + 1;
        goto label0;

     label2:
        return r2;
    }

    private static java.util.Formatter$Flags parse(char)
    {
        char c0;
        java.util.Formatter$Flags $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        java.util.UnknownFormatFlagsException $r8;
        java.lang.String $r9;

        c0 := @parameter0: char;
        tableswitch(c0)
        {
            case 32: goto label3;
            case 33: goto label8;
            case 34: goto label8;
            case 35: goto label1;
            case 36: goto label8;
            case 37: goto label8;
            case 38: goto label8;
            case 39: goto label8;
            case 40: goto label6;
            case 41: goto label8;
            case 42: goto label8;
            case 43: goto label2;
            case 44: goto label5;
            case 45: goto label0;
            case 46: goto label8;
            case 47: goto label8;
            case 48: goto label4;
            case 49: goto label8;
            case 50: goto label8;
            case 51: goto label8;
            case 52: goto label8;
            case 53: goto label8;
            case 54: goto label8;
            case 55: goto label8;
            case 56: goto label8;
            case 57: goto label8;
            case 58: goto label8;
            case 59: goto label8;
            case 60: goto label7;
            default: goto label8;
        };

     label0:
        $r0 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEFT_JUSTIFY>;
        return $r0;

     label1:
        $r1 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        return $r1;

     label2:
        $r2 = <java.util.Formatter$Flags: java.util.Formatter$Flags PLUS>;
        return $r2;

     label3:
        $r3 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEADING_SPACE>;
        return $r3;

     label4:
        $r4 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        return $r4;

     label5:
        $r5 = <java.util.Formatter$Flags: java.util.Formatter$Flags GROUP>;
        return $r5;

     label6:
        $r6 = <java.util.Formatter$Flags: java.util.Formatter$Flags PARENTHESES>;
        return $r6;

     label7:
        $r7 = <java.util.Formatter$Flags: java.util.Formatter$Flags PREVIOUS>;
        return $r7;

     label8:
        $r8 = new java.util.UnknownFormatFlagsException;
        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);
        specialinvoke $r8.<java.util.UnknownFormatFlagsException: void <init>(java.lang.String)>($r9);
        throw $r8;
    }

    public static java.lang.String toString(java.util.Formatter$Flags)
    {
        java.util.Formatter$Flags r0;
        java.lang.String $r1;

        r0 := @parameter0: java.util.Formatter$Flags;
        $r1 = virtualinvoke r0.<java.util.Formatter$Flags: java.lang.String toString()>();
        return $r1;
    }

    public java.lang.String toString()
    {
        java.util.Formatter$Flags r0, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19;
        java.lang.StringBuilder $r1, r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.String $r21;

        r0 := @this: java.util.Formatter$Flags;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        r2 = $r1;
        $r3 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEFT_JUSTIFY>;
        $z0 = virtualinvoke r0.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r3);
        if $z0 == 0 goto label0;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

     label0:
        $r5 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;
        $z1 = virtualinvoke r0.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r5);
        if $z1 == 0 goto label1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(94);

     label1:
        $r7 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;
        $z2 = virtualinvoke r0.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r7);
        if $z2 == 0 goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);

     label2:
        $r9 = <java.util.Formatter$Flags: java.util.Formatter$Flags PLUS>;
        $z3 = virtualinvoke r0.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r9);
        if $z3 == 0 goto label3;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(43);

     label3:
        $r11 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEADING_SPACE>;
        $z4 = virtualinvoke r0.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r11);
        if $z4 == 0 goto label4;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label4:
        $r13 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;
        $z5 = virtualinvoke r0.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r13);
        if $z5 == 0 goto label5;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label5:
        $r15 = <java.util.Formatter$Flags: java.util.Formatter$Flags GROUP>;
        $z6 = virtualinvoke r0.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r15);
        if $z6 == 0 goto label6;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label6:
        $r17 = <java.util.Formatter$Flags: java.util.Formatter$Flags PARENTHESES>;
        $z7 = virtualinvoke r0.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r17);
        if $z7 == 0 goto label7;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

     label7:
        $r19 = <java.util.Formatter$Flags: java.util.Formatter$Flags PREVIOUS>;
        $z8 = virtualinvoke r0.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r19);
        if $z8 == 0 goto label8;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);

     label8:
        $r21 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r21;
    }

    static java.util.Formatter$Flags access$100(java.util.Formatter$Flags, java.util.Formatter$Flags)
    {
        java.util.Formatter$Flags r0, r1, $r2;

        r0 := @parameter0: java.util.Formatter$Flags;
        r1 := @parameter1: java.util.Formatter$Flags;
        $r2 = specialinvoke r0.<java.util.Formatter$Flags: java.util.Formatter$Flags add(java.util.Formatter$Flags)>(r1);
        return $r2;
    }

    static void <clinit>()
    {
        java.util.Formatter$Flags $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        $r0 = new java.util.Formatter$Flags;
        specialinvoke $r0.<java.util.Formatter$Flags: void <init>(int)>(0);
        <java.util.Formatter$Flags: java.util.Formatter$Flags NONE> = $r0;
        $r1 = new java.util.Formatter$Flags;
        specialinvoke $r1.<java.util.Formatter$Flags: void <init>(int)>(1);
        <java.util.Formatter$Flags: java.util.Formatter$Flags LEFT_JUSTIFY> = $r1;
        $r2 = new java.util.Formatter$Flags;
        specialinvoke $r2.<java.util.Formatter$Flags: void <init>(int)>(2);
        <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE> = $r2;
        $r3 = new java.util.Formatter$Flags;
        specialinvoke $r3.<java.util.Formatter$Flags: void <init>(int)>(4);
        <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE> = $r3;
        $r4 = new java.util.Formatter$Flags;
        specialinvoke $r4.<java.util.Formatter$Flags: void <init>(int)>(8);
        <java.util.Formatter$Flags: java.util.Formatter$Flags PLUS> = $r4;
        $r5 = new java.util.Formatter$Flags;
        specialinvoke $r5.<java.util.Formatter$Flags: void <init>(int)>(16);
        <java.util.Formatter$Flags: java.util.Formatter$Flags LEADING_SPACE> = $r5;
        $r6 = new java.util.Formatter$Flags;
        specialinvoke $r6.<java.util.Formatter$Flags: void <init>(int)>(32);
        <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD> = $r6;
        $r7 = new java.util.Formatter$Flags;
        specialinvoke $r7.<java.util.Formatter$Flags: void <init>(int)>(64);
        <java.util.Formatter$Flags: java.util.Formatter$Flags GROUP> = $r7;
        $r8 = new java.util.Formatter$Flags;
        specialinvoke $r8.<java.util.Formatter$Flags: void <init>(int)>(128);
        <java.util.Formatter$Flags: java.util.Formatter$Flags PARENTHESES> = $r8;
        $r9 = new java.util.Formatter$Flags;
        specialinvoke $r9.<java.util.Formatter$Flags: void <init>(int)>(256);
        <java.util.Formatter$Flags: java.util.Formatter$Flags PREVIOUS> = $r9;
        return;
    }
}
