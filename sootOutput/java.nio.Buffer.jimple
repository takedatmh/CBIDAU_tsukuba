public abstract class java.nio.Buffer extends java.lang.Object
{
    private int mark;
    private int position;
    private int limit;
    private int capacity;
    long address;

    void <init>(int, int, int, int)
    {
        java.nio.Buffer r0;
        int i0, i1, i2, i3;
        java.lang.StringBuilder $r1, $r3, $r4, $r9, $r10, $r11, $r12, $r13, $r14;
        java.lang.IllegalArgumentException $r2, $r8;
        java.lang.String $r5, $r15;

        r0 := @this: java.nio.Buffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.nio.Buffer: int mark> = -1;
        r0.<java.nio.Buffer: int position> = 0;
        if i3 >= 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative capacity: ");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r2;

     label0:
        r0.<java.nio.Buffer: int capacity> = i3;
        virtualinvoke r0.<java.nio.Buffer: java.nio.Buffer limit(int)>(i2);
        virtualinvoke r0.<java.nio.Buffer: java.nio.Buffer position(int)>(i1);
        if i0 < 0 goto label2;

        if i0 <= i1 goto label1;

        $r8 = new java.lang.IllegalArgumentException;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mark > position: (");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);
        throw $r8;

     label1:
        r0.<java.nio.Buffer: int mark> = i0;

     label2:
        return;
    }

    public final int capacity()
    {
        java.nio.Buffer r0;
        int $i0;

        r0 := @this: java.nio.Buffer;
        $i0 = r0.<java.nio.Buffer: int capacity>;
        return $i0;
    }

    public final int position()
    {
        java.nio.Buffer r0;
        int $i0;

        r0 := @this: java.nio.Buffer;
        $i0 = r0.<java.nio.Buffer: int position>;
        return $i0;
    }

    public final java.nio.Buffer position(int)
    {
        java.nio.Buffer r0;
        int i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.nio.Buffer;
        i0 := @parameter0: int;
        $i1 = r0.<java.nio.Buffer: int limit>;
        if i0 > $i1 goto label0;

        if i0 >= 0 goto label1;

     label0:
        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r1;

     label1:
        r0.<java.nio.Buffer: int position> = i0;
        $i2 = r0.<java.nio.Buffer: int mark>;
        $i3 = r0.<java.nio.Buffer: int position>;
        if $i2 <= $i3 goto label2;

        r0.<java.nio.Buffer: int mark> = -1;

     label2:
        return r0;
    }

    public final int limit()
    {
        java.nio.Buffer r0;
        int $i0;

        r0 := @this: java.nio.Buffer;
        $i0 = r0.<java.nio.Buffer: int limit>;
        return $i0;
    }

    public final java.nio.Buffer limit(int)
    {
        java.nio.Buffer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.nio.Buffer;
        i0 := @parameter0: int;
        $i1 = r0.<java.nio.Buffer: int capacity>;
        if i0 > $i1 goto label0;

        if i0 >= 0 goto label1;

     label0:
        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r1;

     label1:
        r0.<java.nio.Buffer: int limit> = i0;
        $i2 = r0.<java.nio.Buffer: int position>;
        $i3 = r0.<java.nio.Buffer: int limit>;
        if $i2 <= $i3 goto label2;

        $i4 = r0.<java.nio.Buffer: int limit>;
        r0.<java.nio.Buffer: int position> = $i4;

     label2:
        $i5 = r0.<java.nio.Buffer: int mark>;
        $i6 = r0.<java.nio.Buffer: int limit>;
        if $i5 <= $i6 goto label3;

        r0.<java.nio.Buffer: int mark> = -1;

     label3:
        return r0;
    }

    public final java.nio.Buffer mark()
    {
        java.nio.Buffer r0;
        int $i0;

        r0 := @this: java.nio.Buffer;
        $i0 = r0.<java.nio.Buffer: int position>;
        r0.<java.nio.Buffer: int mark> = $i0;
        return r0;
    }

    public final java.nio.Buffer reset()
    {
        java.nio.Buffer r0;
        int i0;
        java.nio.InvalidMarkException $r1;

        r0 := @this: java.nio.Buffer;
        i0 = r0.<java.nio.Buffer: int mark>;
        if i0 >= 0 goto label0;

        $r1 = new java.nio.InvalidMarkException;
        specialinvoke $r1.<java.nio.InvalidMarkException: void <init>()>();
        throw $r1;

     label0:
        r0.<java.nio.Buffer: int position> = i0;
        return r0;
    }

    public final java.nio.Buffer clear()
    {
        java.nio.Buffer r0;
        int $i0;

        r0 := @this: java.nio.Buffer;
        r0.<java.nio.Buffer: int position> = 0;
        $i0 = r0.<java.nio.Buffer: int capacity>;
        r0.<java.nio.Buffer: int limit> = $i0;
        r0.<java.nio.Buffer: int mark> = -1;
        return r0;
    }

    public final java.nio.Buffer flip()
    {
        java.nio.Buffer r0;
        int $i0;

        r0 := @this: java.nio.Buffer;
        $i0 = r0.<java.nio.Buffer: int position>;
        r0.<java.nio.Buffer: int limit> = $i0;
        r0.<java.nio.Buffer: int position> = 0;
        r0.<java.nio.Buffer: int mark> = -1;
        return r0;
    }

    public final java.nio.Buffer rewind()
    {
        java.nio.Buffer r0;

        r0 := @this: java.nio.Buffer;
        r0.<java.nio.Buffer: int position> = 0;
        r0.<java.nio.Buffer: int mark> = -1;
        return r0;
    }

    public final int remaining()
    {
        java.nio.Buffer r0;
        int $i0, $i1, $i2;

        r0 := @this: java.nio.Buffer;
        $i0 = r0.<java.nio.Buffer: int limit>;
        $i1 = r0.<java.nio.Buffer: int position>;
        $i2 = $i0 - $i1;
        return $i2;
    }

    public final boolean hasRemaining()
    {
        java.nio.Buffer r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.nio.Buffer;
        $i0 = r0.<java.nio.Buffer: int position>;
        $i1 = r0.<java.nio.Buffer: int limit>;
        if $i0 >= $i1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public abstract boolean isReadOnly();

    public abstract boolean hasArray();

    public abstract java.lang.Object array();

    public abstract int arrayOffset();

    public abstract boolean isDirect();

    final int nextGetIndex()
    {
        java.nio.Buffer r0;
        int $i0, $i1, $i2, $i3;
        java.nio.BufferUnderflowException $r1;

        r0 := @this: java.nio.Buffer;
        $i1 = r0.<java.nio.Buffer: int position>;
        $i2 = r0.<java.nio.Buffer: int limit>;
        if $i1 < $i2 goto label0;

        $r1 = new java.nio.BufferUnderflowException;
        specialinvoke $r1.<java.nio.BufferUnderflowException: void <init>()>();
        throw $r1;

     label0:
        $i0 = r0.<java.nio.Buffer: int position>;
        $i3 = $i0 + 1;
        r0.<java.nio.Buffer: int position> = $i3;
        return $i0;
    }

    final int nextGetIndex(int)
    {
        java.nio.Buffer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.nio.BufferUnderflowException $r1;

        r0 := @this: java.nio.Buffer;
        i0 := @parameter0: int;
        $i2 = r0.<java.nio.Buffer: int limit>;
        $i3 = r0.<java.nio.Buffer: int position>;
        $i4 = $i2 - $i3;
        if $i4 >= i0 goto label0;

        $r1 = new java.nio.BufferUnderflowException;
        specialinvoke $r1.<java.nio.BufferUnderflowException: void <init>()>();
        throw $r1;

     label0:
        i1 = r0.<java.nio.Buffer: int position>;
        $i5 = r0.<java.nio.Buffer: int position>;
        $i6 = $i5 + i0;
        r0.<java.nio.Buffer: int position> = $i6;
        return i1;
    }

    final int nextPutIndex()
    {
        java.nio.Buffer r0;
        int $i0, $i1, $i2, $i3;
        java.nio.BufferOverflowException $r1;

        r0 := @this: java.nio.Buffer;
        $i1 = r0.<java.nio.Buffer: int position>;
        $i2 = r0.<java.nio.Buffer: int limit>;
        if $i1 < $i2 goto label0;

        $r1 = new java.nio.BufferOverflowException;
        specialinvoke $r1.<java.nio.BufferOverflowException: void <init>()>();
        throw $r1;

     label0:
        $i0 = r0.<java.nio.Buffer: int position>;
        $i3 = $i0 + 1;
        r0.<java.nio.Buffer: int position> = $i3;
        return $i0;
    }

    final int nextPutIndex(int)
    {
        java.nio.Buffer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.nio.BufferOverflowException $r1;

        r0 := @this: java.nio.Buffer;
        i0 := @parameter0: int;
        $i2 = r0.<java.nio.Buffer: int limit>;
        $i3 = r0.<java.nio.Buffer: int position>;
        $i4 = $i2 - $i3;
        if $i4 >= i0 goto label0;

        $r1 = new java.nio.BufferOverflowException;
        specialinvoke $r1.<java.nio.BufferOverflowException: void <init>()>();
        throw $r1;

     label0:
        i1 = r0.<java.nio.Buffer: int position>;
        $i5 = r0.<java.nio.Buffer: int position>;
        $i6 = $i5 + i0;
        r0.<java.nio.Buffer: int position> = $i6;
        return i1;
    }

    final int checkIndex(int)
    {
        java.nio.Buffer r0;
        int i0, $i1;
        java.lang.IndexOutOfBoundsException $r1;

        r0 := @this: java.nio.Buffer;
        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        $i1 = r0.<java.nio.Buffer: int limit>;
        if i0 < $i1 goto label1;

     label0:
        $r1 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r1;

     label1:
        return i0;
    }

    final int checkIndex(int, int)
    {
        java.nio.Buffer r0;
        int i0, i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r1;

        r0 := @this: java.nio.Buffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i0 < 0 goto label0;

        $i2 = r0.<java.nio.Buffer: int limit>;
        $i3 = $i2 - i0;
        if i1 <= $i3 goto label1;

     label0:
        $r1 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r1;

     label1:
        return i0;
    }

    final int markValue()
    {
        java.nio.Buffer r0;
        int $i0;

        r0 := @this: java.nio.Buffer;
        $i0 = r0.<java.nio.Buffer: int mark>;
        return $i0;
    }

    final void truncate()
    {
        java.nio.Buffer r0;

        r0 := @this: java.nio.Buffer;
        r0.<java.nio.Buffer: int mark> = -1;
        r0.<java.nio.Buffer: int position> = 0;
        r0.<java.nio.Buffer: int limit> = 0;
        r0.<java.nio.Buffer: int capacity> = 0;
        return;
    }

    final void discardMark()
    {
        java.nio.Buffer r0;

        r0 := @this: java.nio.Buffer;
        r0.<java.nio.Buffer: int mark> = -1;
        return;
    }

    static void checkBounds(int, int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.IndexOutOfBoundsException $r0;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        $i3 = i0 | i1;
        $i4 = i0 + i1;
        $i5 = $i3 | $i4;
        $i6 = i0 + i1;
        $i7 = i2 - $i6;
        $i8 = $i5 | $i7;
        if $i8 >= 0 goto label0;

        $r0 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r0;

     label0:
        return;
    }
}
