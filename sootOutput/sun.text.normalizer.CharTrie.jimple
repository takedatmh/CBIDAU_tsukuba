public class sun.text.normalizer.CharTrie extends sun.text.normalizer.Trie
{
    private char m_initialValue_;
    private char[] m_data_;
    private sun.text.normalizer.CharTrie$FriendAgent m_friendAgent_;

    public void <init>(java.io.InputStream, sun.text.normalizer.Trie$DataManipulate) throws java.io.IOException
    {
        sun.text.normalizer.CharTrie r0;
        java.io.InputStream r1;
        sun.text.normalizer.Trie$DataManipulate r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        sun.text.normalizer.CharTrie$FriendAgent $r4;

        r0 := @this: sun.text.normalizer.CharTrie;
        r1 := @parameter0: java.io.InputStream;
        r2 := @parameter1: sun.text.normalizer.Trie$DataManipulate;
        specialinvoke r0.<sun.text.normalizer.Trie: void <init>(java.io.InputStream,sun.text.normalizer.Trie$DataManipulate)>(r1, r2);
        $z0 = virtualinvoke r0.<sun.text.normalizer.CharTrie: boolean isCharTrie()>();
        if $z0 != 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Data given does not belong to a char trie.");
        throw $r3;

     label0:
        $r4 = new sun.text.normalizer.CharTrie$FriendAgent;
        specialinvoke $r4.<sun.text.normalizer.CharTrie$FriendAgent: void <init>(sun.text.normalizer.CharTrie)>(r0);
        r0.<sun.text.normalizer.CharTrie: sun.text.normalizer.CharTrie$FriendAgent m_friendAgent_> = $r4;
        return;
    }

    public void <init>(int, int, sun.text.normalizer.Trie$DataManipulate)
    {
        sun.text.normalizer.CharTrie r0;
        int i0, i1, i3, i4, i11, i12, i13;
        sun.text.normalizer.Trie$DataManipulate r1;
        short s2, s6, $s7, $s10;
        char c5, $c8, $c9, $c14;
        char[] $r2, $r3, $r4, $r5, $r6;
        sun.text.normalizer.CharTrie$FriendAgent $r7;

        r0 := @this: sun.text.normalizer.CharTrie;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: sun.text.normalizer.Trie$DataManipulate;
        $r2 = newarray (char)[2080];
        specialinvoke r0.<sun.text.normalizer.Trie: void <init>(char[],int,sun.text.normalizer.Trie$DataManipulate)>($r2, 512, r1);
        $s7 = 256;
        s2 = $s7;
        i3 = $s7;
        if i1 == i0 goto label0;

        i3 = i3 + 32;

     label0:
        $r3 = newarray (char)[i3];
        r0.<sun.text.normalizer.CharTrie: char[] m_data_> = $r3;
        r0.<sun.text.normalizer.CharTrie: int m_dataLength_> = i3;
        $c8 = (char) i0;
        r0.<sun.text.normalizer.CharTrie: char m_initialValue_> = $c8;
        i4 = 0;

     label1:
        if i4 >= s2 goto label2;

        $r4 = r0.<sun.text.normalizer.CharTrie: char[] m_data_>;
        $c9 = (char) i0;
        $r4[i4] = $c9;
        i4 = i4 + 1;
        goto label1;

     label2:
        if i1 == i0 goto label6;

        $s10 = s2 >> 2;
        c5 = (char) $s10;
        i11 = 1728;
        s6 = 1760;

     label3:
        if i11 >= s6 goto label4;

        $r5 = r0.<sun.text.normalizer.CharTrie: char[] m_index_>;
        $r5[i11] = c5;
        i11 = i11 + 1;
        goto label3;

     label4:
        i12 = s2 + 32;
        i13 = s2;

     label5:
        if i13 >= i12 goto label6;

        $r6 = r0.<sun.text.normalizer.CharTrie: char[] m_data_>;
        $c14 = (char) i1;
        $r6[i13] = $c14;
        i13 = i13 + 1;
        goto label5;

     label6:
        $r7 = new sun.text.normalizer.CharTrie$FriendAgent;
        specialinvoke $r7.<sun.text.normalizer.CharTrie$FriendAgent: void <init>(sun.text.normalizer.CharTrie)>(r0);
        r0.<sun.text.normalizer.CharTrie: sun.text.normalizer.CharTrie$FriendAgent m_friendAgent_> = $r7;
        return;
    }

    public void putIndexData(sun.text.normalizer.UCharacterProperty)
    {
        sun.text.normalizer.CharTrie r0;
        sun.text.normalizer.UCharacterProperty r1;
        sun.text.normalizer.CharTrie$FriendAgent $r2;

        r0 := @this: sun.text.normalizer.CharTrie;
        r1 := @parameter0: sun.text.normalizer.UCharacterProperty;
        $r2 = r0.<sun.text.normalizer.CharTrie: sun.text.normalizer.CharTrie$FriendAgent m_friendAgent_>;
        virtualinvoke r1.<sun.text.normalizer.UCharacterProperty: void setIndexData(sun.text.normalizer.CharTrie$FriendAgent)>($r2);
        return;
    }

    public final char getCodePointValue(int)
    {
        sun.text.normalizer.CharTrie r0;
        int i0, i1, $i2, $i4, $i5, i7;
        char[] $r1, $r2, $r3;
        char $c3, $c6, $c8;

        r0 := @this: sun.text.normalizer.CharTrie;
        i0 := @parameter0: int;
        if 0 > i0 goto label0;

        if i0 >= 55296 goto label0;

        $r1 = r0.<sun.text.normalizer.CharTrie: char[] m_index_>;
        $i2 = i0 >> 5;
        $c3 = $r1[$i2];
        $i4 = $c3 << 2;
        $i5 = i0 & 31;
        i1 = $i4 + $i5;
        $r2 = r0.<sun.text.normalizer.CharTrie: char[] m_data_>;
        $c6 = $r2[i1];
        return $c6;

     label0:
        i7 = virtualinvoke r0.<sun.text.normalizer.CharTrie: int getCodePointOffset(int)>(i0);
        if i7 < 0 goto label1;

        $r3 = r0.<sun.text.normalizer.CharTrie: char[] m_data_>;
        $c8 = $r3[i7];
        goto label2;

     label1:
        $c8 = r0.<sun.text.normalizer.CharTrie: char m_initialValue_>;

     label2:
        return $c8;
    }

    public final char getLeadValue(char)
    {
        sun.text.normalizer.CharTrie r0;
        char c0, $c2;
        char[] $r1;
        int $i1;

        r0 := @this: sun.text.normalizer.CharTrie;
        c0 := @parameter0: char;
        $r1 = r0.<sun.text.normalizer.CharTrie: char[] m_data_>;
        $i1 = virtualinvoke r0.<sun.text.normalizer.CharTrie: int getLeadOffset(char)>(c0);
        $c2 = $r1[$i1];
        return $c2;
    }

    public final char getSurrogateValue(char, char)
    {
        sun.text.normalizer.CharTrie r0;
        char c0, c1, $c3, $c4;
        int i2;
        char[] $r1;

        r0 := @this: sun.text.normalizer.CharTrie;
        c0 := @parameter0: char;
        c1 := @parameter1: char;
        i2 = virtualinvoke r0.<sun.text.normalizer.CharTrie: int getSurrogateOffset(char,char)>(c0, c1);
        if i2 <= 0 goto label0;

        $r1 = r0.<sun.text.normalizer.CharTrie: char[] m_data_>;
        $c3 = $r1[i2];
        return $c3;

     label0:
        $c4 = r0.<sun.text.normalizer.CharTrie: char m_initialValue_>;
        return $c4;
    }

    public final char getTrailValue(int, char)
    {
        sun.text.normalizer.CharTrie r0;
        int i0, i2, $i5;
        char c1, $c3, $c4, $c6, $c7;
        sun.text.normalizer.Trie$DataManipulate $r1, $r3;
        java.lang.NullPointerException $r2;
        char[] $r4;

        r0 := @this: sun.text.normalizer.CharTrie;
        i0 := @parameter0: int;
        c1 := @parameter1: char;
        $r1 = r0.<sun.text.normalizer.CharTrie: sun.text.normalizer.Trie$DataManipulate m_dataManipulate_>;
        if $r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("The field DataManipulate in this Trie is null");
        throw $r2;

     label0:
        $r3 = r0.<sun.text.normalizer.CharTrie: sun.text.normalizer.Trie$DataManipulate m_dataManipulate_>;
        i2 = interfaceinvoke $r3.<sun.text.normalizer.Trie$DataManipulate: int getFoldingOffset(int)>(i0);
        if i2 <= 0 goto label1;

        $r4 = r0.<sun.text.normalizer.CharTrie: char[] m_data_>;
        $c3 = c1 & 1023;
        $c4 = (char) $c3;
        $i5 = virtualinvoke r0.<sun.text.normalizer.CharTrie: int getRawOffset(int,char)>(i2, $c4);
        $c6 = $r4[$i5];
        return $c6;

     label1:
        $c7 = r0.<sun.text.normalizer.CharTrie: char m_initialValue_>;
        return $c7;
    }

    protected final void unserialize(java.io.InputStream) throws java.io.IOException
    {
        sun.text.normalizer.CharTrie r0;
        java.io.InputStream r1;
        java.io.DataInputStream $r2, r3;
        int i0, i1, $i2, $i3, $i5;
        char[] $r4, $r5, $r6, $r7;
        char $c4, $c6;

        r0 := @this: sun.text.normalizer.CharTrie;
        r1 := @parameter0: java.io.InputStream;
        $r2 = new java.io.DataInputStream;
        specialinvoke $r2.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r1);
        r3 = $r2;
        $i2 = r0.<sun.text.normalizer.CharTrie: int m_dataOffset_>;
        $i3 = r0.<sun.text.normalizer.CharTrie: int m_dataLength_>;
        i0 = $i2 + $i3;
        $r4 = newarray (char)[i0];
        r0.<sun.text.normalizer.CharTrie: char[] m_index_> = $r4;
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        $r5 = r0.<sun.text.normalizer.CharTrie: char[] m_index_>;
        $c4 = virtualinvoke r3.<java.io.DataInputStream: char readChar()>();
        $r5[i1] = $c4;
        i1 = i1 + 1;
        goto label0;

     label1:
        $r6 = r0.<sun.text.normalizer.CharTrie: char[] m_index_>;
        r0.<sun.text.normalizer.CharTrie: char[] m_data_> = $r6;
        $r7 = r0.<sun.text.normalizer.CharTrie: char[] m_data_>;
        $i5 = r0.<sun.text.normalizer.CharTrie: int m_dataOffset_>;
        $c6 = $r7[$i5];
        r0.<sun.text.normalizer.CharTrie: char m_initialValue_> = $c6;
        return;
    }

    protected final int getSurrogateOffset(char, char)
    {
        sun.text.normalizer.CharTrie r0;
        char c0, c1, $c3, $c4, $c5;
        int i2, $i6;
        sun.text.normalizer.Trie$DataManipulate $r1, $r3;
        java.lang.NullPointerException $r2;

        r0 := @this: sun.text.normalizer.CharTrie;
        c0 := @parameter0: char;
        c1 := @parameter1: char;
        $r1 = r0.<sun.text.normalizer.CharTrie: sun.text.normalizer.Trie$DataManipulate m_dataManipulate_>;
        if $r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("The field DataManipulate in this Trie is null");
        throw $r2;

     label0:
        $r3 = r0.<sun.text.normalizer.CharTrie: sun.text.normalizer.Trie$DataManipulate m_dataManipulate_>;
        $c3 = virtualinvoke r0.<sun.text.normalizer.CharTrie: char getLeadValue(char)>(c0);
        i2 = interfaceinvoke $r3.<sun.text.normalizer.Trie$DataManipulate: int getFoldingOffset(int)>($c3);
        if i2 <= 0 goto label1;

        $c4 = c1 & 1023;
        $c5 = (char) $c4;
        $i6 = virtualinvoke r0.<sun.text.normalizer.CharTrie: int getRawOffset(int,char)>(i2, $c5);
        return $i6;

     label1:
        return -1;
    }

    protected final int getValue(int)
    {
        sun.text.normalizer.CharTrie r0;
        int i0;
        char[] $r1;
        char $c1;

        r0 := @this: sun.text.normalizer.CharTrie;
        i0 := @parameter0: int;
        $r1 = r0.<sun.text.normalizer.CharTrie: char[] m_data_>;
        $c1 = $r1[i0];
        return $c1;
    }

    protected final int getInitialValue()
    {
        sun.text.normalizer.CharTrie r0;
        char $c0;

        r0 := @this: sun.text.normalizer.CharTrie;
        $c0 = r0.<sun.text.normalizer.CharTrie: char m_initialValue_>;
        return $c0;
    }

    static char[] access$000(sun.text.normalizer.CharTrie)
    {
        sun.text.normalizer.CharTrie r0;
        char[] $r1;

        r0 := @parameter0: sun.text.normalizer.CharTrie;
        $r1 = r0.<sun.text.normalizer.CharTrie: char[] m_data_>;
        return $r1;
    }

    static char access$100(sun.text.normalizer.CharTrie)
    {
        sun.text.normalizer.CharTrie r0;
        char $c0;

        r0 := @parameter0: sun.text.normalizer.CharTrie;
        $c0 = r0.<sun.text.normalizer.CharTrie: char m_initialValue_>;
        return $c0;
    }
}
