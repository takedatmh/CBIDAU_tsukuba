public final class sun.misc.Perf extends java.lang.Object
{
    private static sun.misc.Perf instance;
    private static final int PERF_MODE_RO;
    private static final int PERF_MODE_RW;

    private void <init>()
    {
        sun.misc.Perf r0;

        r0 := @this: sun.misc.Perf;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static sun.misc.Perf getPerf()
    {
        java.lang.SecurityManager r0;
        java.lang.RuntimePermission r1, $r2;
        sun.misc.Perf $r3;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r0 == null goto label0;

        $r2 = new java.lang.RuntimePermission;
        specialinvoke $r2.<java.lang.RuntimePermission: void <init>(java.lang.String)>("sun.misc.Perf.getPerf");
        r1 = $r2;
        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>(r1);

     label0:
        $r3 = <sun.misc.Perf: sun.misc.Perf instance>;
        return $r3;
    }

    public java.nio.ByteBuffer attach(int, java.lang.String) throws java.lang.IllegalArgumentException, java.io.IOException
    {
        sun.misc.Perf r0;
        int i0, $i1, $i2;
        java.lang.String r1;
        java.nio.ByteBuffer $r2, $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: sun.misc.Perf;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        $i1 = virtualinvoke r1.<java.lang.String: int compareTo(java.lang.String)>("r");
        if $i1 != 0 goto label0;

        $r2 = specialinvoke r0.<sun.misc.Perf: java.nio.ByteBuffer attachImpl(java.lang.String,int,int)>(null, i0, 0);
        return $r2;

     label0:
        $i2 = virtualinvoke r1.<java.lang.String: int compareTo(java.lang.String)>("rw");
        if $i2 != 0 goto label1;

        $r3 = specialinvoke r0.<sun.misc.Perf: java.nio.ByteBuffer attachImpl(java.lang.String,int,int)>(null, i0, 1);
        return $r3;

     label1:
        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unknown mode");
        throw $r4;
    }

    public java.nio.ByteBuffer attach(java.lang.String, int, java.lang.String) throws java.lang.IllegalArgumentException, java.io.IOException
    {
        sun.misc.Perf r0;
        java.lang.String r1, r2;
        int i0, $i1, $i2;
        java.nio.ByteBuffer $r3, $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: sun.misc.Perf;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.String;
        $i1 = virtualinvoke r2.<java.lang.String: int compareTo(java.lang.String)>("r");
        if $i1 != 0 goto label0;

        $r3 = specialinvoke r0.<sun.misc.Perf: java.nio.ByteBuffer attachImpl(java.lang.String,int,int)>(r1, i0, 0);
        return $r3;

     label0:
        $i2 = virtualinvoke r2.<java.lang.String: int compareTo(java.lang.String)>("rw");
        if $i2 != 0 goto label1;

        $r4 = specialinvoke r0.<sun.misc.Perf: java.nio.ByteBuffer attachImpl(java.lang.String,int,int)>(r1, i0, 1);
        return $r4;

     label1:
        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unknown mode");
        throw $r5;
    }

    private java.nio.ByteBuffer attachImpl(java.lang.String, int, int) throws java.lang.IllegalArgumentException, java.io.IOException
    {
        sun.misc.Perf r0;
        java.lang.String r1;
        int i0, i1;
        java.nio.ByteBuffer r2, r3;
        sun.misc.Perf$1 $r4;

        r0 := @this: sun.misc.Perf;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 = specialinvoke r0.<sun.misc.Perf: java.nio.ByteBuffer attach(java.lang.String,int,int)>(r1, i0, i1);
        if i0 != 0 goto label0;

        return r2;

     label0:
        r3 = virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();
        $r4 = new sun.misc.Perf$1;
        specialinvoke $r4.<sun.misc.Perf$1: void <init>(sun.misc.Perf,java.nio.ByteBuffer)>(r0, r2);
        staticinvoke <sun.misc.Cleaner: sun.misc.Cleaner create(java.lang.Object,java.lang.Runnable)>(r3, $r4);
        return r3;
    }

    private native java.nio.ByteBuffer attach(java.lang.String, int, int) throws java.lang.IllegalArgumentException, java.io.IOException;

    private native void detach(java.nio.ByteBuffer);

    public native java.nio.ByteBuffer createLong(java.lang.String, int, int, long);

    public java.nio.ByteBuffer createString(java.lang.String, int, int, java.lang.String, int)
    {
        sun.misc.Perf r0;
        java.lang.String r1, r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        byte[] r3, r4;
        java.nio.ByteBuffer $r5;

        r0 := @this: sun.misc.Perf;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: java.lang.String;
        i2 := @parameter4: int;
        r3 = staticinvoke <sun.misc.Perf: byte[] getBytes(java.lang.String)>(r2);
        $i3 = lengthof r3;
        $i4 = $i3 + 1;
        r4 = newarray (byte)[$i4];
        $i5 = lengthof r3;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, 0, $i5);
        $i6 = lengthof r3;
        r4[$i6] = 0;
        $i7 = lengthof r4;
        $i8 = staticinvoke <java.lang.Math: int max(int,int)>($i7, i2);
        $r5 = virtualinvoke r0.<sun.misc.Perf: java.nio.ByteBuffer createByteArray(java.lang.String,int,int,byte[],int)>(r1, i0, i1, r4, $i8);
        return $r5;
    }

    public java.nio.ByteBuffer createString(java.lang.String, int, int, java.lang.String)
    {
        sun.misc.Perf r0;
        java.lang.String r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        byte[] r3, r4;
        java.nio.ByteBuffer $r5;

        r0 := @this: sun.misc.Perf;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: java.lang.String;
        r3 = staticinvoke <sun.misc.Perf: byte[] getBytes(java.lang.String)>(r2);
        $i2 = lengthof r3;
        $i3 = $i2 + 1;
        r4 = newarray (byte)[$i3];
        $i4 = lengthof r3;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, 0, $i4);
        $i5 = lengthof r3;
        r4[$i5] = 0;
        $i6 = lengthof r4;
        $r5 = virtualinvoke r0.<sun.misc.Perf: java.nio.ByteBuffer createByteArray(java.lang.String,int,int,byte[],int)>(r1, i0, i1, r4, $i6);
        return $r5;
    }

    public native java.nio.ByteBuffer createByteArray(java.lang.String, int, int, byte[], int);

    private static byte[] getBytes(java.lang.String)
    {
        java.lang.String r0;
        byte[] r1;
        java.io.UnsupportedEncodingException r2, $r3;

        r0 := @parameter0: java.lang.String;
        r1 = null;

     label0:
        r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

     label1:
        goto label3;

     label2:
        $r3 := @caughtexception;
        r2 = $r3;

     label3:
        return r1;

        catch java.io.UnsupportedEncodingException from label0 to label1 with label2;
    }

    public native long highResCounter();

    public native long highResFrequency();

    private static native void registerNatives();

    static sun.misc.Perf access$000()
    {
        sun.misc.Perf $r0;

        $r0 = <sun.misc.Perf: sun.misc.Perf instance>;
        return $r0;
    }

    static void access$100(sun.misc.Perf, java.nio.ByteBuffer)
    {
        sun.misc.Perf r0;
        java.nio.ByteBuffer r1;

        r0 := @parameter0: sun.misc.Perf;
        r1 := @parameter1: java.nio.ByteBuffer;
        specialinvoke r0.<sun.misc.Perf: void detach(java.nio.ByteBuffer)>(r1);
        return;
    }

    static void <clinit>()
    {
        sun.misc.Perf $r0;

        staticinvoke <sun.misc.Perf: void registerNatives()>();
        $r0 = new sun.misc.Perf;
        specialinvoke $r0.<sun.misc.Perf: void <init>()>();
        <sun.misc.Perf: sun.misc.Perf instance> = $r0;
        return;
    }
}
