class java.util.LinkedList$ListItr extends java.lang.Object implements java.util.ListIterator
{
    private java.util.LinkedList$Node lastReturned;
    private java.util.LinkedList$Node next;
    private int nextIndex;
    private int expectedModCount;
    final java.util.LinkedList this$0;

    void <init>(java.util.LinkedList, int)
    {
        java.util.LinkedList$ListItr r0;
        java.util.LinkedList r1, $r2;
        int i0, $i1, $i2;
        java.util.LinkedList$Node $r4;

        r0 := @this: java.util.LinkedList$ListItr;
        r1 := @parameter0: java.util.LinkedList;
        i0 := @parameter1: int;
        r0.<java.util.LinkedList$ListItr: java.util.LinkedList this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node lastReturned> = null;
        $r2 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList this$0>;
        $i1 = $r2.<java.util.LinkedList: int modCount>;
        r0.<java.util.LinkedList$ListItr: int expectedModCount> = $i1;
        $i2 = r1.<java.util.LinkedList: int size>;
        if i0 != $i2 goto label0;

        $r4 = null;
        goto label1;

     label0:
        $r4 = virtualinvoke r1.<java.util.LinkedList: java.util.LinkedList$Node node(int)>(i0);

     label1:
        r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node next> = $r4;
        r0.<java.util.LinkedList$ListItr: int nextIndex> = i0;
        return;
    }

    public boolean hasNext()
    {
        java.util.LinkedList$ListItr r0;
        int $i0, $i1;
        java.util.LinkedList $r1;
        boolean $z0;

        r0 := @this: java.util.LinkedList$ListItr;
        $i0 = r0.<java.util.LinkedList$ListItr: int nextIndex>;
        $r1 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList this$0>;
        $i1 = $r1.<java.util.LinkedList: int size>;
        if $i0 >= $i1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.Object next()
    {
        java.util.LinkedList$ListItr r0;
        boolean $z0;
        java.util.NoSuchElementException $r1;
        java.util.LinkedList$Node $r2, $r3, $r4, $r6;
        int $i0, $i1;
        java.lang.Object $r7;

        r0 := @this: java.util.LinkedList$ListItr;
        virtualinvoke r0.<java.util.LinkedList$ListItr: void checkForComodification()>();
        $z0 = virtualinvoke r0.<java.util.LinkedList$ListItr: boolean hasNext()>();
        if $z0 != 0 goto label0;

        $r1 = new java.util.NoSuchElementException;
        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();
        throw $r1;

     label0:
        $r2 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node next>;
        r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node lastReturned> = $r2;
        $r3 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node next>;
        $r4 = $r3.<java.util.LinkedList$Node: java.util.LinkedList$Node next>;
        r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node next> = $r4;
        $i0 = r0.<java.util.LinkedList$ListItr: int nextIndex>;
        $i1 = $i0 + 1;
        r0.<java.util.LinkedList$ListItr: int nextIndex> = $i1;
        $r6 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node lastReturned>;
        $r7 = $r6.<java.util.LinkedList$Node: java.lang.Object item>;
        return $r7;
    }

    public boolean hasPrevious()
    {
        java.util.LinkedList$ListItr r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.LinkedList$ListItr;
        $i0 = r0.<java.util.LinkedList$ListItr: int nextIndex>;
        if $i0 <= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.Object previous()
    {
        java.util.LinkedList$ListItr r0;
        boolean $z0;
        java.util.NoSuchElementException $r2;
        java.util.LinkedList$Node $r5, $r7, $r8, $r10;
        java.util.LinkedList $r6;
        int $i0, $i1;
        java.lang.Object $r11;

        r0 := @this: java.util.LinkedList$ListItr;
        virtualinvoke r0.<java.util.LinkedList$ListItr: void checkForComodification()>();
        $z0 = virtualinvoke r0.<java.util.LinkedList$ListItr: boolean hasPrevious()>();
        if $z0 != 0 goto label0;

        $r2 = new java.util.NoSuchElementException;
        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();
        throw $r2;

     label0:
        $r5 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node next>;
        if $r5 != null goto label1;

        $r6 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList this$0>;
        $r7 = $r6.<java.util.LinkedList: java.util.LinkedList$Node last>;
        goto label2;

     label1:
        $r8 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node next>;
        $r7 = $r8.<java.util.LinkedList$Node: java.util.LinkedList$Node prev>;

     label2:
        r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node next> = $r7;
        r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node lastReturned> = $r7;
        $i0 = r0.<java.util.LinkedList$ListItr: int nextIndex>;
        $i1 = $i0 - 1;
        r0.<java.util.LinkedList$ListItr: int nextIndex> = $i1;
        $r10 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node lastReturned>;
        $r11 = $r10.<java.util.LinkedList$Node: java.lang.Object item>;
        return $r11;
    }

    public int nextIndex()
    {
        java.util.LinkedList$ListItr r0;
        int $i0;

        r0 := @this: java.util.LinkedList$ListItr;
        $i0 = r0.<java.util.LinkedList$ListItr: int nextIndex>;
        return $i0;
    }

    public int previousIndex()
    {
        java.util.LinkedList$ListItr r0;
        int $i0, $i1;

        r0 := @this: java.util.LinkedList$ListItr;
        $i0 = r0.<java.util.LinkedList$ListItr: int nextIndex>;
        $i1 = $i0 - 1;
        return $i1;
    }

    public void remove()
    {
        java.util.LinkedList$ListItr r0;
        java.util.LinkedList$Node r1, $r2, $r4, $r6, $r8, $r9;
        java.lang.IllegalStateException $r3;
        java.util.LinkedList $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.LinkedList$ListItr;
        virtualinvoke r0.<java.util.LinkedList$ListItr: void checkForComodification()>();
        $r2 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node lastReturned>;
        if $r2 != null goto label0;

        $r3 = new java.lang.IllegalStateException;
        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();
        throw $r3;

     label0:
        $r4 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node lastReturned>;
        r1 = $r4.<java.util.LinkedList$Node: java.util.LinkedList$Node next>;
        $r5 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList this$0>;
        $r6 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node lastReturned>;
        virtualinvoke $r5.<java.util.LinkedList: java.lang.Object unlink(java.util.LinkedList$Node)>($r6);
        $r8 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node next>;
        $r9 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node lastReturned>;
        if $r8 != $r9 goto label1;

        r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node next> = r1;
        goto label2;

     label1:
        $i0 = r0.<java.util.LinkedList$ListItr: int nextIndex>;
        $i1 = $i0 - 1;
        r0.<java.util.LinkedList$ListItr: int nextIndex> = $i1;

     label2:
        r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node lastReturned> = null;
        $i2 = r0.<java.util.LinkedList$ListItr: int expectedModCount>;
        $i3 = $i2 + 1;
        r0.<java.util.LinkedList$ListItr: int expectedModCount> = $i3;
        return;
    }

    public void set(java.lang.Object)
    {
        java.util.LinkedList$ListItr r0;
        java.lang.Object r1;
        java.util.LinkedList$Node $r2, $r4;
        java.lang.IllegalStateException $r3;

        r0 := @this: java.util.LinkedList$ListItr;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node lastReturned>;
        if $r2 != null goto label0;

        $r3 = new java.lang.IllegalStateException;
        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();
        throw $r3;

     label0:
        virtualinvoke r0.<java.util.LinkedList$ListItr: void checkForComodification()>();
        $r4 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node lastReturned>;
        $r4.<java.util.LinkedList$Node: java.lang.Object item> = r1;
        return;
    }

    public void add(java.lang.Object)
    {
        java.util.LinkedList$ListItr r0;
        java.lang.Object r1;
        java.util.LinkedList$Node $r2, $r5;
        java.util.LinkedList $r3, $r4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.LinkedList$ListItr;
        r1 := @parameter0: java.lang.Object;
        virtualinvoke r0.<java.util.LinkedList$ListItr: void checkForComodification()>();
        r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node lastReturned> = null;
        $r2 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node next>;
        if $r2 != null goto label0;

        $r3 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList this$0>;
        virtualinvoke $r3.<java.util.LinkedList: void linkLast(java.lang.Object)>(r1);
        goto label1;

     label0:
        $r4 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList this$0>;
        $r5 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList$Node next>;
        virtualinvoke $r4.<java.util.LinkedList: void linkBefore(java.lang.Object,java.util.LinkedList$Node)>(r1, $r5);

     label1:
        $i0 = r0.<java.util.LinkedList$ListItr: int nextIndex>;
        $i1 = $i0 + 1;
        r0.<java.util.LinkedList$ListItr: int nextIndex> = $i1;
        $i2 = r0.<java.util.LinkedList$ListItr: int expectedModCount>;
        $i3 = $i2 + 1;
        r0.<java.util.LinkedList$ListItr: int expectedModCount> = $i3;
        return;
    }

    final void checkForComodification()
    {
        java.util.LinkedList$ListItr r0;
        java.util.LinkedList $r1;
        int $i0, $i1;
        java.util.ConcurrentModificationException $r2;

        r0 := @this: java.util.LinkedList$ListItr;
        $r1 = r0.<java.util.LinkedList$ListItr: java.util.LinkedList this$0>;
        $i0 = $r1.<java.util.LinkedList: int modCount>;
        $i1 = r0.<java.util.LinkedList$ListItr: int expectedModCount>;
        if $i0 == $i1 goto label0;

        $r2 = new java.util.ConcurrentModificationException;
        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r2;

     label0:
        return;
    }
}
