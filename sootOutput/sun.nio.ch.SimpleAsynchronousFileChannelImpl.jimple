public class sun.nio.ch.SimpleAsynchronousFileChannelImpl extends sun.nio.ch.AsynchronousFileChannelImpl
{
    private static final sun.nio.ch.FileDispatcher nd;
    private final sun.nio.ch.NativeThreadSet threads;

    void <init>(java.io.FileDescriptor, boolean, boolean, java.util.concurrent.ExecutorService)
    {
        sun.nio.ch.SimpleAsynchronousFileChannelImpl r0;
        java.io.FileDescriptor r1;
        boolean z0, z1;
        java.util.concurrent.ExecutorService r2;
        sun.nio.ch.NativeThreadSet $r3;

        r0 := @this: sun.nio.ch.SimpleAsynchronousFileChannelImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        z0 := @parameter1: boolean;
        z1 := @parameter2: boolean;
        r2 := @parameter3: java.util.concurrent.ExecutorService;
        specialinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: void <init>(java.io.FileDescriptor,boolean,boolean,java.util.concurrent.ExecutorService)>(r1, z0, z1, r2);
        $r3 = new sun.nio.ch.NativeThreadSet;
        specialinvoke $r3.<sun.nio.ch.NativeThreadSet: void <init>(int)>(2);
        r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet threads> = $r3;
        return;
    }

    public static java.nio.channels.AsynchronousFileChannel open(java.io.FileDescriptor, boolean, boolean, sun.nio.ch.ThreadPool)
    {
        java.io.FileDescriptor r0;
        boolean z0, z1;
        sun.nio.ch.ThreadPool r1;
        java.util.concurrent.ExecutorService r2, $r3;
        sun.nio.ch.SimpleAsynchronousFileChannelImpl $r4;

        r0 := @parameter0: java.io.FileDescriptor;
        z0 := @parameter1: boolean;
        z1 := @parameter2: boolean;
        r1 := @parameter3: sun.nio.ch.ThreadPool;
        if r1 != null goto label0;

        $r3 = <sun.nio.ch.SimpleAsynchronousFileChannelImpl$DefaultExecutorHolder: java.util.concurrent.ExecutorService defaultExecutor>;
        goto label1;

     label0:
        $r3 = virtualinvoke r1.<sun.nio.ch.ThreadPool: java.util.concurrent.ExecutorService executor()>();

     label1:
        r2 = $r3;
        $r4 = new sun.nio.ch.SimpleAsynchronousFileChannelImpl;
        specialinvoke $r4.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void <init>(java.io.FileDescriptor,boolean,boolean,java.util.concurrent.ExecutorService)>(r0, z0, z1, r2);
        return $r4;
    }

    public void close() throws java.io.IOException
    {
        sun.nio.ch.SimpleAsynchronousFileChannelImpl r0;
        java.io.FileDescriptor r1, $r3, $r6, $r14;
        java.lang.Throwable r2, $r4, $r12;
        boolean $z0;
        sun.nio.ch.FileDispatcher $r5, $r13;
        sun.nio.ch.NativeThreadSet $r7;
        java.util.concurrent.locks.ReadWriteLock $r8, $r10;
        java.util.concurrent.locks.Lock $r9, $r11;

        r0 := @this: sun.nio.ch.SimpleAsynchronousFileChannelImpl;
        $r3 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.io.FileDescriptor fdObj>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z0 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean closed>;
        if $z0 == 0 goto label2;

        exitmonitor r1;

     label1:
        return;

     label2:
        r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean closed> = 1;
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        r2 = $r4;
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void invalidateAllLocks()>();
        $r5 = <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r6 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.io.FileDescriptor fdObj>;
        virtualinvoke $r5.<sun.nio.ch.FileDispatcher: void preClose(java.io.FileDescriptor)>($r6);
        $r7 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r7.<sun.nio.ch.NativeThreadSet: void signalAndWait()>();
        $r8 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock>;
        $r9 = interfaceinvoke $r8.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void lock()>();
        $r10 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock>;
        $r11 = interfaceinvoke $r10.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r11.<java.util.concurrent.locks.Lock: void unlock()>();
        goto label8;

     label8:
        $r13 = <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r14 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.io.FileDescriptor fdObj>;
        virtualinvoke $r13.<sun.nio.ch.FileDispatcher: void close(java.io.FileDescriptor)>($r14);
        return;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public long size() throws java.io.IOException
    {
        sun.nio.ch.SimpleAsynchronousFileChannelImpl r0;
        int i0;
        long l1, l2;
        java.lang.Throwable r1, r2, $r8, $r10;
        sun.nio.ch.NativeThreadSet $r3, $r7, $r11;
        sun.nio.ch.FileDispatcher $r4;
        java.io.FileDescriptor $r5;
        byte $b3, $b4, $b5;
        boolean $z0, $z1, $z2;

        r0 := @this: sun.nio.ch.SimpleAsynchronousFileChannelImpl;
        $r3 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i0 = virtualinvoke $r3.<sun.nio.ch.NativeThreadSet: int add()>();

     label0:
        l1 = 0L;

     label1:
        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void begin()>();

     label2:
        $r4 = <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r5 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.io.FileDescriptor fdObj>;
        l1 = virtualinvoke $r4.<sun.nio.ch.FileDispatcher: long size(java.io.FileDescriptor)>($r5);
        $b3 = l1 cmp -3L;
        if $b3 != 0 goto label3;

        $z0 = virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label2;

     label3:
        l2 = l1;

     label4:
        $b4 = l1 cmp 0L;
        if $b4 < 0 goto label5;

        $z1 = 1;
        goto label6;

     label5:
        $z1 = 0;

     label6:
        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void end(boolean)>($z1);

     label7:
        $r7 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r7.<sun.nio.ch.NativeThreadSet: void remove(int)>(i0);
        return l2;

     label8:
        $r8 := @caughtexception;

     label9:
        r1 = $r8;

     label10:
        $b5 = l1 cmp 0L;
        if $b5 < 0 goto label11;

        $z2 = 1;
        goto label12;

     label11:
        $z2 = 0;

     label12:
        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void end(boolean)>($z2);
        throw r1;

     label13:
        $r10 := @caughtexception;
        r2 = $r10;

     label14:
        $r11 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r11.<sun.nio.ch.NativeThreadSet: void remove(int)>(i0);
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
        catch java.lang.Throwable from label0 to label7 with label13;
        catch java.lang.Throwable from label9 to label14 with label13;
    }

    public java.nio.channels.AsynchronousFileChannel truncate(long) throws java.io.IOException
    {
        sun.nio.ch.SimpleAsynchronousFileChannelImpl r0, r1;
        long l0, l2;
        int i1, $i6;
        java.lang.Throwable r2, r3, $r13, $r15;
        byte $b3, $b4, $b5, $b7, $b8, $b9;
        java.lang.IllegalArgumentException $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.nio.channels.NonWritableChannelException $r5;
        sun.nio.ch.NativeThreadSet $r6, $r12, $r16;
        sun.nio.ch.FileDispatcher $r7, $r9;
        java.io.FileDescriptor $r8, $r10;

        r0 := @this: sun.nio.ch.SimpleAsynchronousFileChannelImpl;
        l0 := @parameter0: long;
        $b3 = l0 cmp 0L;
        if $b3 >= 0 goto label0;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative size");
        throw $r4;

     label0:
        $z0 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean writing>;
        if $z0 != 0 goto label1;

        $r5 = new java.nio.channels.NonWritableChannelException;
        specialinvoke $r5.<java.nio.channels.NonWritableChannelException: void <init>()>();
        throw $r5;

     label1:
        $r6 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i1 = virtualinvoke $r6.<sun.nio.ch.NativeThreadSet: int add()>();

     label2:
        l2 = 0L;

     label3:
        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void begin()>();

     label4:
        $r7 = <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r8 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.io.FileDescriptor fdObj>;
        l2 = virtualinvoke $r7.<sun.nio.ch.FileDispatcher: long size(java.io.FileDescriptor)>($r8);
        $b4 = l2 cmp -3L;
        if $b4 != 0 goto label5;

        $z1 = virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label4;

     label5:
        $b5 = l0 cmp l2;
        if $b5 >= 0 goto label7;

        $z2 = virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean isOpen()>();
        if $z2 == 0 goto label7;

     label6:
        $r9 = <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r10 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.io.FileDescriptor fdObj>;
        $i6 = virtualinvoke $r9.<sun.nio.ch.FileDispatcher: int truncate(java.io.FileDescriptor,long)>($r10, l0);
        l2 = (long) $i6;
        $b7 = l2 cmp -3L;
        if $b7 != 0 goto label7;

        $z3 = virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean isOpen()>();
        if $z3 != 0 goto label6;

     label7:
        r1 = r0;

     label8:
        $b8 = l2 cmp 0L;
        if $b8 <= 0 goto label9;

        $z4 = 1;
        goto label10;

     label9:
        $z4 = 0;

     label10:
        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void end(boolean)>($z4);

     label11:
        $r12 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r12.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        return r1;

     label12:
        $r13 := @caughtexception;

     label13:
        r2 = $r13;

     label14:
        $b9 = l2 cmp 0L;
        if $b9 <= 0 goto label15;

        $z5 = 1;
        goto label16;

     label15:
        $z5 = 0;

     label16:
        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void end(boolean)>($z5);
        throw r2;

     label17:
        $r15 := @caughtexception;
        r3 = $r15;

     label18:
        $r16 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r16.<sun.nio.ch.NativeThreadSet: void remove(int)>(i1);
        throw r3;

        catch java.lang.Throwable from label3 to label8 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label2 to label11 with label17;
        catch java.lang.Throwable from label13 to label18 with label17;
    }

    public void force(boolean) throws java.io.IOException
    {
        sun.nio.ch.SimpleAsynchronousFileChannelImpl r0;
        boolean z0, $z1, $z2, $z3;
        int i0, i1;
        java.lang.Throwable r1, r2, $r7, $r10;
        sun.nio.ch.NativeThreadSet $r3, $r9, $r11;
        sun.nio.ch.FileDispatcher $r4;
        java.io.FileDescriptor $r5;

        r0 := @this: sun.nio.ch.SimpleAsynchronousFileChannelImpl;
        z0 := @parameter0: boolean;
        $r3 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i0 = virtualinvoke $r3.<sun.nio.ch.NativeThreadSet: int add()>();

     label0:
        i1 = 0;

     label1:
        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void begin()>();

     label2:
        $r4 = <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r5 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.io.FileDescriptor fdObj>;
        i1 = virtualinvoke $r4.<sun.nio.ch.FileDispatcher: int force(java.io.FileDescriptor,boolean)>($r5, z0);
        if i1 != -3 goto label3;

        $z1 = virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label2;

     label3:
        if i1 < 0 goto label4;

        $z2 = 1;
        goto label5;

     label4:
        $z2 = 0;

     label5:
        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void end(boolean)>($z2);
        goto label11;

     label6:
        $r7 := @caughtexception;

     label7:
        r1 = $r7;

     label8:
        if i1 < 0 goto label9;

        $z3 = 1;
        goto label10;

     label9:
        $z3 = 0;

     label10:
        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void end(boolean)>($z3);
        throw r1;

     label11:
        $r9 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r9.<sun.nio.ch.NativeThreadSet: void remove(int)>(i0);
        goto label15;

     label12:
        $r10 := @caughtexception;

     label13:
        r2 = $r10;

     label14:
        $r11 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r11.<sun.nio.ch.NativeThreadSet: void remove(int)>(i0);
        throw r2;

     label15:
        return;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label0 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    java.util.concurrent.Future implLock(long, long, boolean, java.lang.Object, java.nio.channels.CompletionHandler)
    {
        sun.nio.ch.SimpleAsynchronousFileChannelImpl r0;
        long l0, l1;
        boolean z0, z1, $z2, $z3;
        java.lang.Object r1;
        java.nio.channels.CompletionHandler r2;
        sun.nio.ch.FileLockImpl r3;
        java.nio.channels.ClosedChannelException r4, $r9;
        sun.nio.ch.SimpleAsynchronousFileChannelImpl$1 r5, $r14;
        java.lang.Throwable r6, $r16;
        java.nio.channels.NonReadableChannelException $r7;
        java.nio.channels.NonWritableChannelException $r8;
        sun.nio.ch.CompletedFuture $r10;
        java.util.concurrent.ExecutorService $r11, $r15;
        sun.nio.ch.PendingFuture $r12, r13;

        r0 := @this: sun.nio.ch.SimpleAsynchronousFileChannelImpl;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        z0 := @parameter2: boolean;
        r1 := @parameter3: java.lang.Object;
        r2 := @parameter4: java.nio.channels.CompletionHandler;
        if z0 == 0 goto label0;

        $z2 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean reading>;
        if $z2 != 0 goto label0;

        $r7 = new java.nio.channels.NonReadableChannelException;
        specialinvoke $r7.<java.nio.channels.NonReadableChannelException: void <init>()>();
        throw $r7;

     label0:
        if z0 != 0 goto label1;

        $z3 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean writing>;
        if $z3 != 0 goto label1;

        $r8 = new java.nio.channels.NonWritableChannelException;
        specialinvoke $r8.<java.nio.channels.NonWritableChannelException: void <init>()>();
        throw $r8;

     label1:
        r3 = virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.FileLockImpl addToFileLockTable(long,long,boolean)>(l0, l1, z0);
        if r3 != null goto label3;

        $r9 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r9.<java.nio.channels.ClosedChannelException: void <init>()>();
        r4 = $r9;
        if r2 != null goto label2;

        $r10 = staticinvoke <sun.nio.ch.CompletedFuture: sun.nio.ch.CompletedFuture withFailure(java.lang.Throwable)>(r4);
        return $r10;

     label2:
        $r11 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.util.concurrent.ExecutorService executor>;
        staticinvoke <sun.nio.ch.Invoker: void invokeIndirectly(java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable,java.util.concurrent.Executor)>(r2, r1, null, r4, $r11);
        return null;

     label3:
        if r2 != null goto label4;

        $r12 = new sun.nio.ch.PendingFuture;
        specialinvoke $r12.<sun.nio.ch.PendingFuture: void <init>(java.nio.channels.AsynchronousChannel)>(r0);
        goto label5;

     label4:
        $r12 = null;

     label5:
        r13 = $r12;
        $r14 = new sun.nio.ch.SimpleAsynchronousFileChannelImpl$1;
        specialinvoke $r14.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: void <init>(sun.nio.ch.SimpleAsynchronousFileChannelImpl,long,long,boolean,sun.nio.ch.FileLockImpl,java.nio.channels.CompletionHandler,sun.nio.ch.PendingFuture,java.lang.Object)>(r0, l0, l1, z0, r3, r2, r13, r1);
        r5 = $r14;
        z1 = 0;

     label6:
        $r15 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.util.concurrent.ExecutorService executor>;
        interfaceinvoke $r15.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r5);
        z1 = 1;

     label7:
        if z1 != 0 goto label12;

        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void removeFromFileLockTable(sun.nio.ch.FileLockImpl)>(r3);
        goto label12;

     label8:
        $r16 := @caughtexception;

     label9:
        r6 = $r16;

     label10:
        if z1 != 0 goto label11;

        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void removeFromFileLockTable(sun.nio.ch.FileLockImpl)>(r3);

     label11:
        throw r6;

     label12:
        return r13;

        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    public java.nio.channels.FileLock tryLock(long, long, boolean) throws java.io.IOException
    {
        sun.nio.ch.SimpleAsynchronousFileChannelImpl r0;
        long l0, l1;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        sun.nio.ch.FileLockImpl r1, r2;
        int i2, i3;
        java.lang.Throwable r3, $r14;
        java.nio.channels.NonReadableChannelException $r4;
        java.nio.channels.NonWritableChannelException $r5;
        java.nio.channels.ClosedChannelException $r6;
        sun.nio.ch.NativeThreadSet $r7, $r10, $r11, $r15;
        sun.nio.ch.FileDispatcher $r8;
        java.io.FileDescriptor $r9;
        null_type n0;
        java.nio.channels.AsynchronousCloseException $r12;
        java.lang.AssertionError $r13;

        r0 := @this: sun.nio.ch.SimpleAsynchronousFileChannelImpl;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        $z2 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean reading>;
        if $z2 != 0 goto label0;

        $r4 = new java.nio.channels.NonReadableChannelException;
        specialinvoke $r4.<java.nio.channels.NonReadableChannelException: void <init>()>();
        throw $r4;

     label0:
        if z0 != 0 goto label1;

        $z3 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean writing>;
        if $z3 != 0 goto label1;

        $r5 = new java.nio.channels.NonWritableChannelException;
        specialinvoke $r5.<java.nio.channels.NonWritableChannelException: void <init>()>();
        throw $r5;

     label1:
        r1 = virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.FileLockImpl addToFileLockTable(long,long,boolean)>(l0, l1, z0);
        if r1 != null goto label2;

        $r6 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r6.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r6;

     label2:
        $r7 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        i2 = virtualinvoke $r7.<sun.nio.ch.NativeThreadSet: int add()>();
        z1 = 0;

     label3:
        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void begin()>();

     label4:
        $r8 = <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r9 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.io.FileDescriptor fdObj>;
        i3 = virtualinvoke $r8.<sun.nio.ch.FileDispatcher: int lock(java.io.FileDescriptor,boolean,long,long,boolean)>($r9, 0, l0, l1, z0);
        if i3 != 2 goto label5;

        $z4 = virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean isOpen()>();
        if $z4 != 0 goto label4;

     label5:
        if i3 != 0 goto label8;

        $z5 = virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean isOpen()>();
        if $z5 == 0 goto label8;

        z1 = 1;
        r2 = r1;

     label6:
        if z1 != 0 goto label7;

        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void removeFromFileLockTable(sun.nio.ch.FileLockImpl)>(r1);

     label7:
        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void end()>();
        $r10 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r10.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);
        return r2;

     label8:
        if i3 != -1 goto label11;

        n0 = null;

     label9:
        if z1 != 0 goto label10;

        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void removeFromFileLockTable(sun.nio.ch.FileLockImpl)>(r1);

     label10:
        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void end()>();
        $r11 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r11.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);
        return n0;

     label11:
        if i3 != 2 goto label12;

        $r12 = new java.nio.channels.AsynchronousCloseException;
        specialinvoke $r12.<java.nio.channels.AsynchronousCloseException: void <init>()>();
        throw $r12;

     label12:
        $r13 = new java.lang.AssertionError;
        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();
        throw $r13;

     label13:
        $r14 := @caughtexception;
        r3 = $r14;

     label14:
        if z1 != 0 goto label15;

        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void removeFromFileLockTable(sun.nio.ch.FileLockImpl)>(r1);

     label15:
        virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void end()>();
        $r15 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        virtualinvoke $r15.<sun.nio.ch.NativeThreadSet: void remove(int)>(i2);
        throw r3;

        catch java.lang.Throwable from label3 to label6 with label13;
        catch java.lang.Throwable from label8 to label9 with label13;
        catch java.lang.Throwable from label11 to label14 with label13;
    }

    protected void implRelease(sun.nio.ch.FileLockImpl) throws java.io.IOException
    {
        sun.nio.ch.SimpleAsynchronousFileChannelImpl r0;
        sun.nio.ch.FileLockImpl r1;
        sun.nio.ch.FileDispatcher $r2;
        java.io.FileDescriptor $r3;
        long $l0, $l1;

        r0 := @this: sun.nio.ch.SimpleAsynchronousFileChannelImpl;
        r1 := @parameter0: sun.nio.ch.FileLockImpl;
        $r2 = <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        $r3 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.io.FileDescriptor fdObj>;
        $l0 = virtualinvoke r1.<sun.nio.ch.FileLockImpl: long position()>();
        $l1 = virtualinvoke r1.<sun.nio.ch.FileLockImpl: long size()>();
        virtualinvoke $r2.<sun.nio.ch.FileDispatcher: void release(java.io.FileDescriptor,long,long)>($r3, $l0, $l1);
        return;
    }

    java.util.concurrent.Future implRead(java.nio.ByteBuffer, long, java.lang.Object, java.nio.channels.CompletionHandler)
    {
        sun.nio.ch.SimpleAsynchronousFileChannelImpl r0;
        java.nio.ByteBuffer r1;
        long l0;
        java.lang.Object r2;
        java.nio.channels.CompletionHandler r3;
        java.nio.channels.ClosedChannelException r4, $r9;
        sun.nio.ch.SimpleAsynchronousFileChannelImpl$2 r5, $r16;
        byte $b1;
        java.lang.IllegalArgumentException $r6, $r8;
        boolean $z0, $z1, $z2, $z3;
        java.nio.channels.NonReadableChannelException $r7;
        int $i2;
        java.lang.Integer $r10, $r12;
        sun.nio.ch.CompletedFuture $r11;
        java.util.concurrent.ExecutorService $r13, $r17;
        sun.nio.ch.PendingFuture $r14, r15;

        r0 := @this: sun.nio.ch.SimpleAsynchronousFileChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        l0 := @parameter1: long;
        r2 := @parameter2: java.lang.Object;
        r3 := @parameter3: java.nio.channels.CompletionHandler;
        $b1 = l0 cmp 0L;
        if $b1 >= 0 goto label0;

        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative position");
        throw $r6;

     label0:
        $z0 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean reading>;
        if $z0 != 0 goto label1;

        $r7 = new java.nio.channels.NonReadableChannelException;
        specialinvoke $r7.<java.nio.channels.NonReadableChannelException: void <init>()>();
        throw $r7;

     label1:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isReadOnly()>();
        if $z1 == 0 goto label2;

        $r8 = new java.lang.IllegalArgumentException;
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Read-only buffer");
        throw $r8;

     label2:
        $z2 = virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean isOpen()>();
        if $z2 == 0 goto label3;

        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();
        if $i2 != 0 goto label7;

     label3:
        $z3 = virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean isOpen()>();
        if $z3 == 0 goto label4;

        $r9 = null;
        goto label5;

     label4:
        $r9 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r9.<java.nio.channels.ClosedChannelException: void <init>()>();

     label5:
        r4 = $r9;
        if r3 != null goto label6;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
        $r11 = staticinvoke <sun.nio.ch.CompletedFuture: sun.nio.ch.CompletedFuture withResult(java.lang.Object,java.lang.Throwable)>($r10, r4);
        return $r11;

     label6:
        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
        $r13 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.util.concurrent.ExecutorService executor>;
        staticinvoke <sun.nio.ch.Invoker: void invokeIndirectly(java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable,java.util.concurrent.Executor)>(r3, r2, $r12, r4, $r13);
        return null;

     label7:
        if r3 != null goto label8;

        $r14 = new sun.nio.ch.PendingFuture;
        specialinvoke $r14.<sun.nio.ch.PendingFuture: void <init>(java.nio.channels.AsynchronousChannel)>(r0);
        goto label9;

     label8:
        $r14 = null;

     label9:
        r15 = $r14;
        $r16 = new sun.nio.ch.SimpleAsynchronousFileChannelImpl$2;
        specialinvoke $r16.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$2: void <init>(sun.nio.ch.SimpleAsynchronousFileChannelImpl,java.nio.ByteBuffer,long,java.nio.channels.CompletionHandler,sun.nio.ch.PendingFuture,java.lang.Object)>(r0, r1, l0, r3, r15, r2);
        r5 = $r16;
        $r17 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.util.concurrent.ExecutorService executor>;
        interfaceinvoke $r17.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r5);
        return r15;
    }

    java.util.concurrent.Future implWrite(java.nio.ByteBuffer, long, java.lang.Object, java.nio.channels.CompletionHandler)
    {
        sun.nio.ch.SimpleAsynchronousFileChannelImpl r0;
        java.nio.ByteBuffer r1;
        long l0;
        java.lang.Object r2;
        java.nio.channels.CompletionHandler r3;
        java.nio.channels.ClosedChannelException r4, $r8;
        sun.nio.ch.SimpleAsynchronousFileChannelImpl$3 r5, $r15;
        byte $b1;
        java.lang.IllegalArgumentException $r6;
        boolean $z0, $z1, $z2;
        java.nio.channels.NonWritableChannelException $r7;
        int $i2;
        java.lang.Integer $r9, $r11;
        sun.nio.ch.CompletedFuture $r10;
        java.util.concurrent.ExecutorService $r12, $r16;
        sun.nio.ch.PendingFuture $r13, r14;

        r0 := @this: sun.nio.ch.SimpleAsynchronousFileChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        l0 := @parameter1: long;
        r2 := @parameter2: java.lang.Object;
        r3 := @parameter3: java.nio.channels.CompletionHandler;
        $b1 = l0 cmp 0L;
        if $b1 >= 0 goto label0;

        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative position");
        throw $r6;

     label0:
        $z0 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean writing>;
        if $z0 != 0 goto label1;

        $r7 = new java.nio.channels.NonWritableChannelException;
        specialinvoke $r7.<java.nio.channels.NonWritableChannelException: void <init>()>();
        throw $r7;

     label1:
        $z1 = virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean isOpen()>();
        if $z1 == 0 goto label2;

        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();
        if $i2 != 0 goto label6;

     label2:
        $z2 = virtualinvoke r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean isOpen()>();
        if $z2 == 0 goto label3;

        $r8 = null;
        goto label4;

     label3:
        $r8 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r8.<java.nio.channels.ClosedChannelException: void <init>()>();

     label4:
        r4 = $r8;
        if r3 != null goto label5;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
        $r10 = staticinvoke <sun.nio.ch.CompletedFuture: sun.nio.ch.CompletedFuture withResult(java.lang.Object,java.lang.Throwable)>($r9, r4);
        return $r10;

     label5:
        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
        $r12 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.util.concurrent.ExecutorService executor>;
        staticinvoke <sun.nio.ch.Invoker: void invokeIndirectly(java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable,java.util.concurrent.Executor)>(r3, r2, $r11, r4, $r12);
        return null;

     label6:
        if r3 != null goto label7;

        $r13 = new sun.nio.ch.PendingFuture;
        specialinvoke $r13.<sun.nio.ch.PendingFuture: void <init>(java.nio.channels.AsynchronousChannel)>(r0);
        goto label8;

     label7:
        $r13 = null;

     label8:
        r14 = $r13;
        $r15 = new sun.nio.ch.SimpleAsynchronousFileChannelImpl$3;
        specialinvoke $r15.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$3: void <init>(sun.nio.ch.SimpleAsynchronousFileChannelImpl,java.nio.ByteBuffer,long,java.nio.channels.CompletionHandler,sun.nio.ch.PendingFuture,java.lang.Object)>(r0, r1, l0, r3, r14, r2);
        r5 = $r15;
        $r16 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.util.concurrent.ExecutorService executor>;
        interfaceinvoke $r16.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r5);
        return r14;
    }

    static sun.nio.ch.NativeThreadSet access$000(sun.nio.ch.SimpleAsynchronousFileChannelImpl)
    {
        sun.nio.ch.SimpleAsynchronousFileChannelImpl r0;
        sun.nio.ch.NativeThreadSet $r1;

        r0 := @parameter0: sun.nio.ch.SimpleAsynchronousFileChannelImpl;
        $r1 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet threads>;
        return $r1;
    }

    static sun.nio.ch.FileDispatcher access$100()
    {
        sun.nio.ch.FileDispatcher $r0;

        $r0 = <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.FileDispatcher nd>;
        return $r0;
    }

    static void <clinit>()
    {
        sun.nio.ch.FileDispatcherImpl $r0;

        $r0 = new sun.nio.ch.FileDispatcherImpl;
        specialinvoke $r0.<sun.nio.ch.FileDispatcherImpl: void <init>()>();
        <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.FileDispatcher nd> = $r0;
        return;
    }
}
