class java.nio.file.Files$AcceptAllFilter extends java.lang.Object implements java.nio.file.DirectoryStream$Filter
{
    static final java.nio.file.Files$AcceptAllFilter FILTER;

    private void <init>()
    {
        java.nio.file.Files$AcceptAllFilter r0;

        r0 := @this: java.nio.file.Files$AcceptAllFilter;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public boolean accept(java.nio.file.Path)
    {
        java.nio.file.Files$AcceptAllFilter r0;
        java.nio.file.Path r1;

        r0 := @this: java.nio.file.Files$AcceptAllFilter;
        r1 := @parameter0: java.nio.file.Path;
        return 1;
    }

    public volatile boolean accept(java.lang.Object) throws java.io.IOException
    {
        java.nio.file.Files$AcceptAllFilter r0;
        java.lang.Object r1;
        java.nio.file.Path $r2;
        boolean $z0;

        r0 := @this: java.nio.file.Files$AcceptAllFilter;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.nio.file.Path) r1;
        $z0 = virtualinvoke r0.<java.nio.file.Files$AcceptAllFilter: boolean accept(java.nio.file.Path)>($r2);
        return $z0;
    }

    static void <clinit>()
    {
        java.nio.file.Files$AcceptAllFilter $r0;

        $r0 = new java.nio.file.Files$AcceptAllFilter;
        specialinvoke $r0.<java.nio.file.Files$AcceptAllFilter: void <init>()>();
        <java.nio.file.Files$AcceptAllFilter: java.nio.file.Files$AcceptAllFilter FILTER> = $r0;
        return;
    }
}
