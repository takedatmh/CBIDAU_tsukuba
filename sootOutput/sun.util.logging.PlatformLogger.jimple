public class sun.util.logging.PlatformLogger extends java.lang.Object
{
    public static final int OFF;
    public static final int SEVERE;
    public static final int WARNING;
    public static final int INFO;
    public static final int CONFIG;
    public static final int FINE;
    public static final int FINER;
    public static final int FINEST;
    public static final int ALL;
    private static final sun.util.logging.PlatformLogger$Level DEFAULT_LEVEL;
    private static boolean loggingEnabled;
    private static java.util.Map loggers;
    private volatile sun.util.logging.PlatformLogger$LoggerProxy loggerProxy;
    private volatile sun.util.logging.PlatformLogger$JavaLoggerProxy javaLoggerProxy;

    public static synchronized sun.util.logging.PlatformLogger getLogger(java.lang.String)
    {
        java.lang.String r0;
        sun.util.logging.PlatformLogger r1, $r6;
        java.lang.ref.WeakReference r2, $r8;
        java.util.Map $r3, $r7;
        java.lang.Object $r4, $r5;

        r0 := @parameter0: java.lang.String;
        r1 = null;
        $r3 = <sun.util.logging.PlatformLogger: java.util.Map loggers>;
        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);
        r2 = (java.lang.ref.WeakReference) $r4;
        if r2 == null goto label0;

        $r5 = virtualinvoke r2.<java.lang.ref.WeakReference: java.lang.Object get()>();
        r1 = (sun.util.logging.PlatformLogger) $r5;

     label0:
        if r1 != null goto label1;

        $r6 = new sun.util.logging.PlatformLogger;
        specialinvoke $r6.<sun.util.logging.PlatformLogger: void <init>(java.lang.String)>(r0);
        r1 = $r6;
        $r7 = <sun.util.logging.PlatformLogger: java.util.Map loggers>;
        $r8 = new java.lang.ref.WeakReference;
        specialinvoke $r8.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r1);
        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r8);

     label1:
        return r1;
    }

    public static synchronized void redirectPlatformLoggers()
    {
        boolean $z0, $z1, $z2;
        java.util.Iterator r0;
        java.util.Map$Entry r1;
        java.lang.ref.WeakReference r2;
        sun.util.logging.PlatformLogger r3;
        java.util.Map $r4;
        java.util.Set $r5;
        java.lang.Object $r6, $r7, $r8;

        $z0 = <sun.util.logging.PlatformLogger: boolean loggingEnabled>;
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <sun.util.logging.LoggingSupport: boolean isAvailable()>();
        if $z1 != 0 goto label1;

     label0:
        return;

     label1:
        <sun.util.logging.PlatformLogger: boolean loggingEnabled> = 1;
        $r4 = <sun.util.logging.PlatformLogger: java.util.Map loggers>;
        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();
        r0 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label4;

        $r6 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();
        r1 = (java.util.Map$Entry) $r6;
        $r7 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();
        r2 = (java.lang.ref.WeakReference) $r7;
        $r8 = virtualinvoke r2.<java.lang.ref.WeakReference: java.lang.Object get()>();
        r3 = (sun.util.logging.PlatformLogger) $r8;
        if r3 == null goto label3;

        specialinvoke r3.<sun.util.logging.PlatformLogger: void redirectToJavaLoggerProxy()>();

     label3:
        goto label2;

     label4:
        return;
    }

    private void redirectToJavaLoggerProxy()
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.Class $r1;
        sun.util.logging.PlatformLogger$DefaultLoggerProxy r2;
        sun.util.logging.PlatformLogger$JavaLoggerProxy r3, $r6;
        sun.util.logging.PlatformLogger$LoggerProxy $r4;
        java.lang.Object $r5;
        java.lang.String $r7;
        sun.util.logging.PlatformLogger$Level $r8;

        r0 := @this: sun.util.logging.PlatformLogger;
        $r1 = class "sun/util/logging/PlatformLogger$DefaultLoggerProxy";
        $r4 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r5 = virtualinvoke $r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r4);
        r2 = (sun.util.logging.PlatformLogger$DefaultLoggerProxy) $r5;
        $r6 = new sun.util.logging.PlatformLogger$JavaLoggerProxy;
        $r7 = r2.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: java.lang.String name>;
        $r8 = r2.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: sun.util.logging.PlatformLogger$Level level>;
        specialinvoke $r6.<sun.util.logging.PlatformLogger$JavaLoggerProxy: void <init>(java.lang.String,sun.util.logging.PlatformLogger$Level)>($r7, $r8);
        r3 = $r6;
        r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$JavaLoggerProxy javaLoggerProxy> = r3;
        r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy> = r3;
        return;
    }

    private void <init>(java.lang.String)
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        sun.util.logging.PlatformLogger$JavaLoggerProxy $r2;
        boolean $z0;
        sun.util.logging.PlatformLogger$DefaultLoggerProxy $r4;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $z0 = <sun.util.logging.PlatformLogger: boolean loggingEnabled>;
        if $z0 == 0 goto label0;

        $r2 = new sun.util.logging.PlatformLogger$JavaLoggerProxy;
        specialinvoke $r2.<sun.util.logging.PlatformLogger$JavaLoggerProxy: void <init>(java.lang.String)>(r1);
        r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$JavaLoggerProxy javaLoggerProxy> = $r2;
        r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy> = $r2;
        goto label1;

     label0:
        $r4 = new sun.util.logging.PlatformLogger$DefaultLoggerProxy;
        specialinvoke $r4.<sun.util.logging.PlatformLogger$DefaultLoggerProxy: void <init>(java.lang.String)>(r1);
        r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy> = $r4;

     label1:
        return;
    }

    public boolean isEnabled()
    {
        sun.util.logging.PlatformLogger r0;
        sun.util.logging.PlatformLogger$LoggerProxy $r1;
        boolean $z0;

        r0 := @this: sun.util.logging.PlatformLogger;
        $r1 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $z0 = virtualinvoke $r1.<sun.util.logging.PlatformLogger$LoggerProxy: boolean isEnabled()>();
        return $z0;
    }

    public java.lang.String getName()
    {
        sun.util.logging.PlatformLogger r0;
        sun.util.logging.PlatformLogger$LoggerProxy $r1;
        java.lang.String $r2;

        r0 := @this: sun.util.logging.PlatformLogger;
        $r1 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r2 = $r1.<sun.util.logging.PlatformLogger$LoggerProxy: java.lang.String name>;
        return $r2;
    }

    public boolean isLoggable(int)
    {
        sun.util.logging.PlatformLogger r0;
        int i0;
        sun.util.logging.PlatformLogger$Level $r1;
        boolean $z0;

        r0 := @this: sun.util.logging.PlatformLogger;
        i0 := @parameter0: int;
        $r1 = staticinvoke <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level valueOf(int)>(i0);
        $z0 = virtualinvoke r0.<sun.util.logging.PlatformLogger: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>($r1);
        return $z0;
    }

    public int getLevel()
    {
        sun.util.logging.PlatformLogger r0;
        sun.util.logging.PlatformLogger$Level r1;
        sun.util.logging.PlatformLogger$LoggerProxy $r2;
        int $i0;

        r0 := @this: sun.util.logging.PlatformLogger;
        $r2 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        r1 = virtualinvoke $r2.<sun.util.logging.PlatformLogger$LoggerProxy: sun.util.logging.PlatformLogger$Level getLevel()>();
        if r1 == null goto label0;

        $i0 = virtualinvoke r1.<sun.util.logging.PlatformLogger$Level: int intValue()>();
        goto label1;

     label0:
        $i0 = 0;

     label1:
        return $i0;
    }

    public void setLevel(int)
    {
        sun.util.logging.PlatformLogger r0;
        int i0;
        sun.util.logging.PlatformLogger$LoggerProxy $r1;
        sun.util.logging.PlatformLogger$Level $r2;

        r0 := @this: sun.util.logging.PlatformLogger;
        i0 := @parameter0: int;
        $r1 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        if i0 != 0 goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r2 = staticinvoke <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level valueOf(int)>(i0);

     label1:
        virtualinvoke $r1.<sun.util.logging.PlatformLogger$LoggerProxy: void setLevel(sun.util.logging.PlatformLogger$Level)>($r2);
        return;
    }

    public boolean isLoggable(sun.util.logging.PlatformLogger$Level)
    {
        sun.util.logging.PlatformLogger r0;
        sun.util.logging.PlatformLogger$Level r1;
        sun.util.logging.PlatformLogger$JavaLoggerProxy r2;
        java.lang.NullPointerException $r3;
        boolean $z0;
        sun.util.logging.PlatformLogger$LoggerProxy $r4;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        r2 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$JavaLoggerProxy javaLoggerProxy>;
        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<sun.util.logging.PlatformLogger$JavaLoggerProxy: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>(r1);
        goto label2;

     label1:
        $r4 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $z0 = virtualinvoke $r4.<sun.util.logging.PlatformLogger$LoggerProxy: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>(r1);

     label2:
        return $z0;
    }

    public sun.util.logging.PlatformLogger$Level level()
    {
        sun.util.logging.PlatformLogger r0;
        sun.util.logging.PlatformLogger$LoggerProxy $r1;
        sun.util.logging.PlatformLogger$Level $r2;

        r0 := @this: sun.util.logging.PlatformLogger;
        $r1 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r2 = virtualinvoke $r1.<sun.util.logging.PlatformLogger$LoggerProxy: sun.util.logging.PlatformLogger$Level getLevel()>();
        return $r2;
    }

    public void setLevel(sun.util.logging.PlatformLogger$Level)
    {
        sun.util.logging.PlatformLogger r0;
        sun.util.logging.PlatformLogger$Level r1;
        sun.util.logging.PlatformLogger$LoggerProxy $r2;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;
        $r2 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        virtualinvoke $r2.<sun.util.logging.PlatformLogger$LoggerProxy: void setLevel(sun.util.logging.PlatformLogger$Level)>(r1);
        return;
    }

    public void severe(java.lang.String)
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        sun.util.logging.PlatformLogger$Level $r2;
        sun.util.logging.PlatformLogger$LoggerProxy $r3;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        $r3 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r2 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level SEVERE>;
        virtualinvoke $r3.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>($r2, r1);
        return;
    }

    public void severe(java.lang.String, java.lang.Throwable)
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        java.lang.Throwable r2;
        sun.util.logging.PlatformLogger$Level $r3;
        sun.util.logging.PlatformLogger$LoggerProxy $r4;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Throwable;
        $r4 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r3 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level SEVERE>;
        virtualinvoke $r4.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>($r3, r1, r2);
        return;
    }

    public transient void severe(java.lang.String, java.lang.Object[])
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        sun.util.logging.PlatformLogger$Level $r3;
        sun.util.logging.PlatformLogger$LoggerProxy $r4;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object[];
        $r4 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r3 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level SEVERE>;
        virtualinvoke $r4.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Object[])>($r3, r1, r2);
        return;
    }

    public void warning(java.lang.String)
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        sun.util.logging.PlatformLogger$Level $r2;
        sun.util.logging.PlatformLogger$LoggerProxy $r3;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        $r3 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r2 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level WARNING>;
        virtualinvoke $r3.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>($r2, r1);
        return;
    }

    public void warning(java.lang.String, java.lang.Throwable)
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        java.lang.Throwable r2;
        sun.util.logging.PlatformLogger$Level $r3;
        sun.util.logging.PlatformLogger$LoggerProxy $r4;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Throwable;
        $r4 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r3 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level WARNING>;
        virtualinvoke $r4.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>($r3, r1, r2);
        return;
    }

    public transient void warning(java.lang.String, java.lang.Object[])
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        sun.util.logging.PlatformLogger$Level $r3;
        sun.util.logging.PlatformLogger$LoggerProxy $r4;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object[];
        $r4 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r3 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level WARNING>;
        virtualinvoke $r4.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Object[])>($r3, r1, r2);
        return;
    }

    public void info(java.lang.String)
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        sun.util.logging.PlatformLogger$Level $r2;
        sun.util.logging.PlatformLogger$LoggerProxy $r3;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        $r3 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r2 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level INFO>;
        virtualinvoke $r3.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>($r2, r1);
        return;
    }

    public void info(java.lang.String, java.lang.Throwable)
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        java.lang.Throwable r2;
        sun.util.logging.PlatformLogger$Level $r3;
        sun.util.logging.PlatformLogger$LoggerProxy $r4;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Throwable;
        $r4 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r3 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level INFO>;
        virtualinvoke $r4.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>($r3, r1, r2);
        return;
    }

    public transient void info(java.lang.String, java.lang.Object[])
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        sun.util.logging.PlatformLogger$Level $r3;
        sun.util.logging.PlatformLogger$LoggerProxy $r4;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object[];
        $r4 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r3 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level INFO>;
        virtualinvoke $r4.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Object[])>($r3, r1, r2);
        return;
    }

    public void config(java.lang.String)
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        sun.util.logging.PlatformLogger$Level $r2;
        sun.util.logging.PlatformLogger$LoggerProxy $r3;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        $r3 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r2 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level CONFIG>;
        virtualinvoke $r3.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>($r2, r1);
        return;
    }

    public void config(java.lang.String, java.lang.Throwable)
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        java.lang.Throwable r2;
        sun.util.logging.PlatformLogger$Level $r3;
        sun.util.logging.PlatformLogger$LoggerProxy $r4;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Throwable;
        $r4 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r3 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level CONFIG>;
        virtualinvoke $r4.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>($r3, r1, r2);
        return;
    }

    public transient void config(java.lang.String, java.lang.Object[])
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        sun.util.logging.PlatformLogger$Level $r3;
        sun.util.logging.PlatformLogger$LoggerProxy $r4;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object[];
        $r4 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r3 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level CONFIG>;
        virtualinvoke $r4.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Object[])>($r3, r1, r2);
        return;
    }

    public void fine(java.lang.String)
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        sun.util.logging.PlatformLogger$Level $r2;
        sun.util.logging.PlatformLogger$LoggerProxy $r3;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        $r3 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r2 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level FINE>;
        virtualinvoke $r3.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>($r2, r1);
        return;
    }

    public void fine(java.lang.String, java.lang.Throwable)
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        java.lang.Throwable r2;
        sun.util.logging.PlatformLogger$Level $r3;
        sun.util.logging.PlatformLogger$LoggerProxy $r4;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Throwable;
        $r4 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r3 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level FINE>;
        virtualinvoke $r4.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>($r3, r1, r2);
        return;
    }

    public transient void fine(java.lang.String, java.lang.Object[])
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        sun.util.logging.PlatformLogger$Level $r3;
        sun.util.logging.PlatformLogger$LoggerProxy $r4;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object[];
        $r4 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r3 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level FINE>;
        virtualinvoke $r4.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Object[])>($r3, r1, r2);
        return;
    }

    public void finer(java.lang.String)
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        sun.util.logging.PlatformLogger$Level $r2;
        sun.util.logging.PlatformLogger$LoggerProxy $r3;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        $r3 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r2 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level FINER>;
        virtualinvoke $r3.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>($r2, r1);
        return;
    }

    public void finer(java.lang.String, java.lang.Throwable)
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        java.lang.Throwable r2;
        sun.util.logging.PlatformLogger$Level $r3;
        sun.util.logging.PlatformLogger$LoggerProxy $r4;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Throwable;
        $r4 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r3 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level FINER>;
        virtualinvoke $r4.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>($r3, r1, r2);
        return;
    }

    public transient void finer(java.lang.String, java.lang.Object[])
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        sun.util.logging.PlatformLogger$Level $r3;
        sun.util.logging.PlatformLogger$LoggerProxy $r4;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object[];
        $r4 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r3 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level FINER>;
        virtualinvoke $r4.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Object[])>($r3, r1, r2);
        return;
    }

    public void finest(java.lang.String)
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        sun.util.logging.PlatformLogger$Level $r2;
        sun.util.logging.PlatformLogger$LoggerProxy $r3;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        $r3 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r2 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level FINEST>;
        virtualinvoke $r3.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>($r2, r1);
        return;
    }

    public void finest(java.lang.String, java.lang.Throwable)
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        java.lang.Throwable r2;
        sun.util.logging.PlatformLogger$Level $r3;
        sun.util.logging.PlatformLogger$LoggerProxy $r4;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Throwable;
        $r4 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r3 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level FINEST>;
        virtualinvoke $r4.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>($r3, r1, r2);
        return;
    }

    public transient void finest(java.lang.String, java.lang.Object[])
    {
        sun.util.logging.PlatformLogger r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        sun.util.logging.PlatformLogger$Level $r3;
        sun.util.logging.PlatformLogger$LoggerProxy $r4;

        r0 := @this: sun.util.logging.PlatformLogger;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object[];
        $r4 = r0.<sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$LoggerProxy loggerProxy>;
        $r3 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level FINEST>;
        virtualinvoke $r4.<sun.util.logging.PlatformLogger$LoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Object[])>($r3, r1, r2);
        return;
    }

    static sun.util.logging.PlatformLogger$Level access$000()
    {
        sun.util.logging.PlatformLogger$Level $r0;

        $r0 = <sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$Level DEFAULT_LEVEL>;
        return $r0;
    }

    static void <clinit>()
    {
        sun.util.logging.PlatformLogger$Level $r0;
        java.lang.Class $r1, $r8;
        java.lang.ClassNotFoundException r2, $r11;
        sun.util.logging.PlatformLogger$1 $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.lang.ClassLoader $r6, $r9;
        java.lang.InternalError $r12;
        java.lang.String $r13;
        java.util.HashMap $r14;

        $r0 = <sun.util.logging.PlatformLogger$Level: sun.util.logging.PlatformLogger$Level INFO>;
        <sun.util.logging.PlatformLogger: sun.util.logging.PlatformLogger$Level DEFAULT_LEVEL> = $r0;
        $r3 = new sun.util.logging.PlatformLogger$1;
        specialinvoke $r3.<sun.util.logging.PlatformLogger$1: void <init>()>();
        $r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r3);
        $r5 = (java.lang.Boolean) $r4;
        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();
        <sun.util.logging.PlatformLogger: boolean loggingEnabled> = $z0;

     label0:
        $r1 = class "sun/util/logging/PlatformLogger";
        $r6 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("sun.util.logging.PlatformLogger$DefaultLoggerProxy", 0, $r6);
        $r8 = class "sun/util/logging/PlatformLogger";
        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("sun.util.logging.PlatformLogger$JavaLoggerProxy", 0, $r9);

     label1:
        goto label3;

     label2:
        $r11 := @caughtexception;
        r2 = $r11;
        $r12 = new java.lang.InternalError;
        $r13 = virtualinvoke r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();
        specialinvoke $r12.<java.lang.InternalError: void <init>(java.lang.String)>($r13);
        throw $r12;

     label3:
        $r14 = new java.util.HashMap;
        specialinvoke $r14.<java.util.HashMap: void <init>()>();
        <sun.util.logging.PlatformLogger: java.util.Map loggers> = $r14;
        return;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }
}
