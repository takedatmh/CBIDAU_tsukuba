class java.lang.StringCoding$StringEncoder extends java.lang.Object
{
    private java.nio.charset.Charset cs;
    private java.nio.charset.CharsetEncoder ce;
    private final java.lang.String requestedCharsetName;
    private final boolean isTrusted;

    private void <init>(java.nio.charset.Charset, java.lang.String)
    {
        java.lang.StringCoding$StringEncoder r0;
        java.nio.charset.Charset r1;
        java.lang.String r2;
        java.nio.charset.CodingErrorAction $r3, $r6;
        java.nio.charset.CharsetEncoder $r4, $r5, $r7;
        java.lang.Class $r9;
        java.lang.ClassLoader $r10;
        boolean $z0;

        r0 := @this: java.lang.StringCoding$StringEncoder;
        r1 := @parameter0: java.nio.charset.Charset;
        r2 := @parameter1: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.StringCoding$StringEncoder: java.lang.String requestedCharsetName> = r2;
        r0.<java.lang.StringCoding$StringEncoder: java.nio.charset.Charset cs> = r1;
        $r4 = virtualinvoke r1.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();
        $r3 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
        $r5 = virtualinvoke $r4.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r3);
        $r6 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
        $r7 = virtualinvoke $r5.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r6);
        r0.<java.lang.StringCoding$StringEncoder: java.nio.charset.CharsetEncoder ce> = $r7;
        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>();
        if $r10 != null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        r0.<java.lang.StringCoding$StringEncoder: boolean isTrusted> = $z0;
        return;
    }

    java.lang.String charsetName()
    {
        java.lang.StringCoding$StringEncoder r0;
        java.nio.charset.Charset $r1, $r2, $r5;
        boolean $z0;
        sun.nio.cs.HistoricallyNamedCharset $r3;
        java.lang.String $r4, $r6;

        r0 := @this: java.lang.StringCoding$StringEncoder;
        $r1 = r0.<java.lang.StringCoding$StringEncoder: java.nio.charset.Charset cs>;
        $z0 = $r1 instanceof sun.nio.cs.HistoricallyNamedCharset;
        if $z0 == 0 goto label0;

        $r2 = r0.<java.lang.StringCoding$StringEncoder: java.nio.charset.Charset cs>;
        $r3 = (sun.nio.cs.HistoricallyNamedCharset) $r2;
        $r4 = interfaceinvoke $r3.<sun.nio.cs.HistoricallyNamedCharset: java.lang.String historicalName()>();
        return $r4;

     label0:
        $r5 = r0.<java.lang.StringCoding$StringEncoder: java.nio.charset.Charset cs>;
        $r6 = virtualinvoke $r5.<java.nio.charset.Charset: java.lang.String name()>();
        return $r6;
    }

    final java.lang.String requestedCharsetName()
    {
        java.lang.StringCoding$StringEncoder r0;
        java.lang.String $r1;

        r0 := @this: java.lang.StringCoding$StringEncoder;
        $r1 = r0.<java.lang.StringCoding$StringEncoder: java.lang.String requestedCharsetName>;
        return $r1;
    }

    byte[] encode(char[], int, int)
    {
        java.lang.StringCoding$StringEncoder r0;
        char[] r1;
        int i0, i1, i2, i3, $i4;
        byte[] r2, $r10, $r21;
        java.nio.CharBuffer r3;
        java.nio.charset.CoderResult r4, r16;
        java.nio.charset.CharsetEncoder $r5, $r6, $r7, $r11, $r14, $r15;
        float $f0;
        boolean $z0, $z1, $z2, $z3, $z4;
        sun.nio.cs.ArrayEncoder $r8;
        java.nio.charset.Charset $r9, $r20;
        java.nio.ByteBuffer r13;
        java.nio.charset.CharacterCodingException $r17, r18;
        java.lang.Error $r19;

        r0 := @this: java.lang.StringCoding$StringEncoder;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r5 = r0.<java.lang.StringCoding$StringEncoder: java.nio.charset.CharsetEncoder ce>;
        $f0 = virtualinvoke $r5.<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>();
        i2 = staticinvoke <java.lang.StringCoding: int access$000(int,float)>(i1, $f0);
        r2 = newarray (byte)[i2];
        if i1 != 0 goto label0;

        return r2;

     label0:
        $r6 = r0.<java.lang.StringCoding$StringEncoder: java.nio.charset.CharsetEncoder ce>;
        $z0 = $r6 instanceof sun.nio.cs.ArrayEncoder;
        if $z0 == 0 goto label1;

        $r7 = r0.<java.lang.StringCoding$StringEncoder: java.nio.charset.CharsetEncoder ce>;
        $r8 = (sun.nio.cs.ArrayEncoder) $r7;
        i3 = interfaceinvoke $r8.<sun.nio.cs.ArrayEncoder: int encode(char[],int,int,byte[])>(r1, i0, i1, r2);
        $r9 = r0.<java.lang.StringCoding$StringEncoder: java.nio.charset.Charset cs>;
        $z1 = r0.<java.lang.StringCoding$StringEncoder: boolean isTrusted>;
        $r10 = staticinvoke <java.lang.StringCoding: byte[] access$300(byte[],int,java.nio.charset.Charset,boolean)>(r2, i3, $r9, $z1);
        return $r10;

     label1:
        $r11 = r0.<java.lang.StringCoding$StringEncoder: java.nio.charset.CharsetEncoder ce>;
        virtualinvoke $r11.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>();
        r13 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r2);
        r3 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>(r1, i0, i1);

     label2:
        $r14 = r0.<java.lang.StringCoding$StringEncoder: java.nio.charset.CharsetEncoder ce>;
        r4 = virtualinvoke $r14.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>(r3, r13, 1);
        $z2 = virtualinvoke r4.<java.nio.charset.CoderResult: boolean isUnderflow()>();
        if $z2 != 0 goto label3;

        virtualinvoke r4.<java.nio.charset.CoderResult: void throwException()>();

     label3:
        $r15 = r0.<java.lang.StringCoding$StringEncoder: java.nio.charset.CharsetEncoder ce>;
        r16 = virtualinvoke $r15.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>(r13);
        $z3 = virtualinvoke r16.<java.nio.charset.CoderResult: boolean isUnderflow()>();
        if $z3 != 0 goto label4;

        virtualinvoke r16.<java.nio.charset.CoderResult: void throwException()>();

     label4:
        goto label6;

     label5:
        $r17 := @caughtexception;
        r18 = $r17;
        $r19 = new java.lang.Error;
        specialinvoke $r19.<java.lang.Error: void <init>(java.lang.Throwable)>(r18);
        throw $r19;

     label6:
        $i4 = virtualinvoke r13.<java.nio.ByteBuffer: int position()>();
        $r20 = r0.<java.lang.StringCoding$StringEncoder: java.nio.charset.Charset cs>;
        $z4 = r0.<java.lang.StringCoding$StringEncoder: boolean isTrusted>;
        $r21 = staticinvoke <java.lang.StringCoding: byte[] access$300(byte[],int,java.nio.charset.Charset,boolean)>(r2, $i4, $r20, $z4);
        return $r21;

        catch java.nio.charset.CharacterCodingException from label2 to label4 with label5;
    }

    void <init>(java.nio.charset.Charset, java.lang.String, java.lang.StringCoding$1)
    {
        java.lang.StringCoding$StringEncoder r0;
        java.nio.charset.Charset r1;
        java.lang.String r2;
        java.lang.StringCoding$1 r3;

        r0 := @this: java.lang.StringCoding$StringEncoder;
        r1 := @parameter0: java.nio.charset.Charset;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.StringCoding$1;
        specialinvoke r0.<java.lang.StringCoding$StringEncoder: void <init>(java.nio.charset.Charset,java.lang.String)>(r1, r2);
        return;
    }
}
