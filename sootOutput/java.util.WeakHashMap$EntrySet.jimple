class java.util.WeakHashMap$EntrySet extends java.util.AbstractSet
{
    final java.util.WeakHashMap this$0;

    private void <init>(java.util.WeakHashMap)
    {
        java.util.WeakHashMap$EntrySet r0;
        java.util.WeakHashMap r1;

        r0 := @this: java.util.WeakHashMap$EntrySet;
        r1 := @parameter0: java.util.WeakHashMap;
        r0.<java.util.WeakHashMap$EntrySet: java.util.WeakHashMap this$0> = r1;
        specialinvoke r0.<java.util.AbstractSet: void <init>()>();
        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.WeakHashMap$EntrySet r0;
        java.util.WeakHashMap$EntryIterator $r1;
        java.util.WeakHashMap $r2;

        r0 := @this: java.util.WeakHashMap$EntrySet;
        $r1 = new java.util.WeakHashMap$EntryIterator;
        $r2 = r0.<java.util.WeakHashMap$EntrySet: java.util.WeakHashMap this$0>;
        specialinvoke $r1.<java.util.WeakHashMap$EntryIterator: void <init>(java.util.WeakHashMap,java.util.WeakHashMap$1)>($r2, null);
        return $r1;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.WeakHashMap$EntrySet r0;
        java.lang.Object r1, $r5;
        java.util.Map$Entry r2;
        java.util.WeakHashMap$Entry r3;
        boolean $z0, $z1, $z2;
        java.util.WeakHashMap $r4;

        r0 := @this: java.util.WeakHashMap$EntrySet;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.util.Map$Entry;
        if $z0 != 0 goto label0;

        return 0;

     label0:
        r2 = (java.util.Map$Entry) r1;
        $r4 = r0.<java.util.WeakHashMap$EntrySet: java.util.WeakHashMap this$0>;
        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();
        r3 = virtualinvoke $r4.<java.util.WeakHashMap: java.util.WeakHashMap$Entry getEntry(java.lang.Object)>($r5);
        if r3 == null goto label1;

        $z1 = virtualinvoke r3.<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>(r2);
        if $z1 == 0 goto label1;

        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.WeakHashMap$EntrySet r0;
        java.lang.Object r1;
        java.util.WeakHashMap $r2;
        boolean $z0;

        r0 := @this: java.util.WeakHashMap$EntrySet;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.WeakHashMap$EntrySet: java.util.WeakHashMap this$0>;
        $z0 = virtualinvoke $r2.<java.util.WeakHashMap: boolean removeMapping(java.lang.Object)>(r1);
        return $z0;
    }

    public int size()
    {
        java.util.WeakHashMap$EntrySet r0;
        java.util.WeakHashMap $r1;
        int $i0;

        r0 := @this: java.util.WeakHashMap$EntrySet;
        $r1 = r0.<java.util.WeakHashMap$EntrySet: java.util.WeakHashMap this$0>;
        $i0 = virtualinvoke $r1.<java.util.WeakHashMap: int size()>();
        return $i0;
    }

    public void clear()
    {
        java.util.WeakHashMap$EntrySet r0;
        java.util.WeakHashMap $r1;

        r0 := @this: java.util.WeakHashMap$EntrySet;
        $r1 = r0.<java.util.WeakHashMap$EntrySet: java.util.WeakHashMap this$0>;
        virtualinvoke $r1.<java.util.WeakHashMap: void clear()>();
        return;
    }

    private java.util.List deepCopy()
    {
        java.util.WeakHashMap$EntrySet r0;
        java.util.ArrayList $r1, r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        int $i0;
        boolean $z0;
        java.lang.Object $r5;
        java.util.AbstractMap$SimpleEntry $r6;

        r0 := @this: java.util.WeakHashMap$EntrySet;
        $r1 = new java.util.ArrayList;
        $i0 = virtualinvoke r0.<java.util.WeakHashMap$EntrySet: int size()>();
        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);
        r2 = $r1;
        r3 = virtualinvoke r0.<java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.util.Map$Entry) $r5;
        $r6 = new java.util.AbstractMap$SimpleEntry;
        specialinvoke $r6.<java.util.AbstractMap$SimpleEntry: void <init>(java.util.Map$Entry)>(r4);
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r6);
        goto label0;

     label1:
        return r2;
    }

    public java.lang.Object[] toArray()
    {
        java.util.WeakHashMap$EntrySet r0;
        java.util.List $r1;
        java.lang.Object[] $r2;

        r0 := @this: java.util.WeakHashMap$EntrySet;
        $r1 = specialinvoke r0.<java.util.WeakHashMap$EntrySet: java.util.List deepCopy()>();
        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray()>();
        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.WeakHashMap$EntrySet r0;
        java.lang.Object[] r1, $r3;
        java.util.List $r2;

        r0 := @this: java.util.WeakHashMap$EntrySet;
        r1 := @parameter0: java.lang.Object[];
        $r2 = specialinvoke r0.<java.util.WeakHashMap$EntrySet: java.util.List deepCopy()>();
        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r1);
        return $r3;
    }

    void <init>(java.util.WeakHashMap, java.util.WeakHashMap$1)
    {
        java.util.WeakHashMap$EntrySet r0;
        java.util.WeakHashMap r1;
        java.util.WeakHashMap$1 r2;

        r0 := @this: java.util.WeakHashMap$EntrySet;
        r1 := @parameter0: java.util.WeakHashMap;
        r2 := @parameter1: java.util.WeakHashMap$1;
        specialinvoke r0.<java.util.WeakHashMap$EntrySet: void <init>(java.util.WeakHashMap)>(r1);
        return;
    }
}
