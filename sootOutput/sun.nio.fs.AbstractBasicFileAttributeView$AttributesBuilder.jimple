class sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder extends java.lang.Object
{
    private java.util.Set names;
    private java.util.Map map;
    private boolean copyAll;

    private void <init>(java.util.Set, java.lang.String[])
    {
        sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder r0;
        java.util.Set r1, $r13;
        java.lang.String[] r2, r4;
        java.util.HashSet $r3;
        int i0, i1;
        java.lang.String r5, $r12;
        java.util.HashMap $r6;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;

        r0 := @this: sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder;
        r1 := @parameter0: java.util.Set;
        r2 := @parameter1: java.lang.String[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r3 = new java.util.HashSet;
        specialinvoke $r3.<java.util.HashSet: void <init>()>();
        r0.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: java.util.Set names> = $r3;
        $r6 = new java.util.HashMap;
        specialinvoke $r6.<java.util.HashMap: void <init>()>();
        r0.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: java.util.Map map> = $r6;
        r4 = r2;
        i0 = lengthof r4;
        i1 = 0;

     label0:
        if i1 >= i0 goto label4;

        r5 = r4[i1];
        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("*");
        if $z0 == 0 goto label1;

        r0.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: boolean copyAll> = 1;
        goto label3;

     label1:
        $z1 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r5);
        if $z1 != 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not recognized");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);
        throw $r7;

     label2:
        $r13 = r0.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: java.util.Set names>;
        interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>(r5);

     label3:
        i1 = i1 + 1;
        goto label0;

     label4:
        return;
    }

    static sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder create(java.util.Set, java.lang.String[])
    {
        java.util.Set r0;
        java.lang.String[] r1;
        sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder $r2;

        r0 := @parameter0: java.util.Set;
        r1 := @parameter1: java.lang.String[];
        $r2 = new sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder;
        specialinvoke $r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: void <init>(java.util.Set,java.lang.String[])>(r0, r1);
        return $r2;
    }

    boolean match(java.lang.String)
    {
        sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;
        java.util.Set $r2;

        r0 := @this: sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder;
        r1 := @parameter0: java.lang.String;
        $z0 = r0.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: boolean copyAll>;
        if $z0 != 0 goto label0;

        $r2 = r0.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: java.util.Set names>;
        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);
        if $z1 == 0 goto label1;

     label0:
        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    void add(java.lang.String, java.lang.Object)
    {
        sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.util.Map $r3;

        r0 := @this: sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object;
        $r3 = r0.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: java.util.Map map>;
        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);
        return;
    }

    java.util.Map unmodifiableMap()
    {
        sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder r0;
        java.util.Map $r1, $r2;

        r0 := @this: sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder;
        $r1 = r0.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: java.util.Map map>;
        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);
        return $r2;
    }
}
