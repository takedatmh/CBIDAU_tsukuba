public final class java.lang.Class extends java.lang.Object implements java.io.Serializable, java.lang.reflect.GenericDeclaration, java.lang.reflect.Type, java.lang.reflect.AnnotatedElement
{
    private static final int ANNOTATION;
    private static final int ENUM;
    private static final int SYNTHETIC;
    private transient volatile java.lang.reflect.Constructor cachedConstructor;
    private transient volatile java.lang.Class newInstanceCallerCache;
    private transient java.lang.String name;
    private static java.security.ProtectionDomain allPermDomain;
    private static volatile java.lang.Class$SecurityManagerHelper smHelper;
    private static boolean useCaches;
    private transient volatile java.lang.ref.SoftReference reflectionData;
    private transient volatile int classRedefinedCount;
    private transient sun.reflect.generics.repository.ClassRepository genericInfo;
    private static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private static sun.reflect.ReflectionFactory reflectionFactory;
    private static boolean initted;
    private transient volatile java.lang.Object[] enumConstants;
    private transient volatile java.util.Map enumConstantDirectory;
    private transient java.util.Map annotations;
    private transient java.util.Map declaredAnnotations;
    private transient int lastAnnotationsRedefinedCount;
    private transient volatile sun.reflect.annotation.AnnotationType annotationType;
    transient java.lang.ClassValue$ClassValueMap classValueMap;

    private static native void registerNatives();

    private void <init>()
    {
        java.lang.Class r0;

        r0 := @this: java.lang.Class;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.Class: int classRedefinedCount> = 0;
        r0.<java.lang.Class: java.lang.Object[] enumConstants> = null;
        r0.<java.lang.Class: java.util.Map enumConstantDirectory> = null;
        r0.<java.lang.Class: int lastAnnotationsRedefinedCount> = 0;
        return;
    }

    public java.lang.String toString()
    {
        java.lang.Class r0;
        java.lang.StringBuilder $r1, $r3, $r5;
        boolean $z0, $z1;
        java.lang.String $r2, $r4, $r6;

        r0 := @this: java.lang.Class;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();
        if $z0 == 0 goto label0;

        $r2 = "interface ";
        goto label2;

     label0:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();
        if $z1 == 0 goto label1;

        $r2 = "";
        goto label2;

     label1:
        $r2 = "class ";

     label2:
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r6;
    }

    public static java.lang.Class forName(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.String r0;
        java.lang.Class r1, $r3;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r2 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r1);
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName0(java.lang.String,boolean,java.lang.ClassLoader,java.lang.Class)>(r0, 1, $r2, r1);
        return $r3;
    }

    public static java.lang.Class forName(java.lang.String, boolean, java.lang.ClassLoader) throws java.lang.ClassNotFoundException
    {
        java.lang.String r0;
        boolean z0;
        java.lang.ClassLoader r1, r4;
        java.lang.Class r2, $r6;
        java.lang.SecurityManager r3;
        java.lang.RuntimePermission $r5;

        r0 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        r1 := @parameter2: java.lang.ClassLoader;
        r2 = null;
        r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r3 == null goto label0;

        r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        if r1 != null goto label0;

        r4 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r2);
        if r4 == null goto label0;

        $r5 = <sun.security.util.SecurityConstants: java.lang.RuntimePermission GET_CLASSLOADER_PERMISSION>;
        virtualinvoke r3.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r5);

     label0:
        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName0(java.lang.String,boolean,java.lang.ClassLoader,java.lang.Class)>(r0, z0, r1, r2);
        return $r6;
    }

    private static native java.lang.Class forName0(java.lang.String, boolean, java.lang.ClassLoader, java.lang.Class) throws java.lang.ClassNotFoundException;

    public java.lang.Object newInstance() throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        java.lang.Class r0, $r2, r5, $r15;
        java.lang.SecurityManager $r1;
        java.lang.Class[] r3;
        java.lang.reflect.Constructor r4, $r6, r14;
        java.lang.IllegalAccessException $r7;
        java.lang.Class$1 $r8;
        java.lang.NoSuchMethodException $r10, r11;
        java.lang.InstantiationException $r12;
        java.lang.String $r13;
        int i0;
        boolean $z0;
        java.lang.Object[] $r16;
        java.lang.Object $r17;
        java.lang.reflect.InvocationTargetException $r18, r19;
        sun.misc.Unsafe $r20;
        java.lang.Throwable $r21;

        r0 := @this: java.lang.Class;
        $r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if $r1 == null goto label0;

        $r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        specialinvoke r0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $r2, 0);

     label0:
        $r6 = r0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>;
        if $r6 != null goto label4;

        if r0 != class "java/lang/Class" goto label1;

        $r7 = new java.lang.IllegalAccessException;
        specialinvoke $r7.<java.lang.IllegalAccessException: void <init>(java.lang.String)>("Can not call newInstance() on the Class for java.lang.Class");
        throw $r7;

     label1:
        r3 = newarray (java.lang.Class)[0];
        r4 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(r3, 1);
        $r8 = new java.lang.Class$1;
        specialinvoke $r8.<java.lang.Class$1: void <init>(java.lang.Class,java.lang.reflect.Constructor)>(r0, r4);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r8);
        r0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = r4;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;
        r11 = $r10;
        $r12 = new java.lang.InstantiationException;
        $r13 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        specialinvoke $r12.<java.lang.InstantiationException: void <init>(java.lang.String)>($r13);
        throw $r12;

     label4:
        r14 = r0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>;
        i0 = virtualinvoke r14.<java.lang.reflect.Constructor: int getModifiers()>();
        $z0 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(r0, i0);
        if $z0 != 0 goto label5;

        r5 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r15 = r0.<java.lang.Class: java.lang.Class newInstanceCallerCache>;
        if $r15 == r5 goto label5;

        staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(r5, r0, null, i0);
        r0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = r5;

     label5:
        $r16 = (java.lang.Object[]) null;
        $r17 = virtualinvoke r14.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r16);

     label6:
        return $r17;

     label7:
        $r18 := @caughtexception;
        r19 = $r18;
        $r20 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        $r21 = virtualinvoke r19.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();
        virtualinvoke $r20.<sun.misc.Unsafe: void throwException(java.lang.Throwable)>($r21);
        return null;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label5 to label6 with label7;
    }

    public native boolean isInstance(java.lang.Object);

    public native boolean isAssignableFrom(java.lang.Class);

    public native boolean isInterface();

    public native boolean isArray();

    public native boolean isPrimitive();

    public boolean isAnnotation()
    {
        java.lang.Class r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.lang.Class;
        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();
        $i1 = $i0 & 8192;
        if $i1 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isSynthetic()
    {
        java.lang.Class r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.lang.Class;
        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();
        $i1 = $i0 & 4096;
        if $i1 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.String getName()
    {
        java.lang.Class r0;
        java.lang.String r1, $r2;

        r0 := @this: java.lang.Class;
        r1 = r0.<java.lang.Class: java.lang.String name>;
        if r1 != null goto label0;

        $r2 = specialinvoke r0.<java.lang.Class: java.lang.String getName0()>();
        r1 = $r2;
        r0.<java.lang.Class: java.lang.String name> = $r2;

     label0:
        return r1;
    }

    private native java.lang.String getName0();

    public java.lang.ClassLoader getClassLoader()
    {
        java.lang.Class r0, $r3;
        java.lang.ClassLoader r1;
        java.lang.SecurityManager r2;

        r0 := @this: java.lang.Class;
        r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>();
        if r1 != null goto label0;

        return null;

     label0:
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label1;

        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        staticinvoke <java.lang.ClassLoader: void checkClassLoaderPermission(java.lang.ClassLoader,java.lang.Class)>(r1, $r3);

     label1:
        return r1;
    }

    native java.lang.ClassLoader getClassLoader0();

    public java.lang.reflect.TypeVariable[] getTypeParameters()
    {
        java.lang.Class r0;
        java.lang.String $r1;
        sun.reflect.generics.repository.ClassRepository $r2;
        java.lang.reflect.TypeVariable[] $r3, $r4, $r5, $r6;

        r0 := @this: java.lang.Class;
        $r1 = specialinvoke r0.<java.lang.Class: java.lang.String getGenericSignature()>();
        if $r1 == null goto label0;

        $r2 = specialinvoke r0.<java.lang.Class: sun.reflect.generics.repository.ClassRepository getGenericInfo()>();
        $r3 = virtualinvoke $r2.<sun.reflect.generics.repository.ClassRepository: java.lang.reflect.TypeVariable[] getTypeParameters()>();
        $r4 = (java.lang.reflect.TypeVariable[]) $r3;
        return $r4;

     label0:
        $r5 = newarray (java.lang.reflect.TypeVariable)[0];
        $r6 = (java.lang.reflect.TypeVariable[]) $r5;
        return $r6;
    }

    public native java.lang.Class getSuperclass();

    public java.lang.reflect.Type getGenericSuperclass()
    {
        java.lang.Class r0, $r4;
        java.lang.String $r1;
        boolean $z0;
        sun.reflect.generics.repository.ClassRepository $r2;
        java.lang.reflect.Type $r3;

        r0 := @this: java.lang.Class;
        $r1 = specialinvoke r0.<java.lang.Class: java.lang.String getGenericSignature()>();
        if $r1 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();
        if $z0 == 0 goto label0;

        return null;

     label0:
        $r2 = specialinvoke r0.<java.lang.Class: sun.reflect.generics.repository.ClassRepository getGenericInfo()>();
        $r3 = virtualinvoke $r2.<sun.reflect.generics.repository.ClassRepository: java.lang.reflect.Type getSuperclass()>();
        return $r3;

     label1:
        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();
        return $r4;
    }

    public java.lang.Package getPackage()
    {
        java.lang.Class r0;
        java.lang.Package $r1;

        r0 := @this: java.lang.Class;
        $r1 = staticinvoke <java.lang.Package: java.lang.Package getPackage(java.lang.Class)>(r0);
        return $r1;
    }

    public native java.lang.Class[] getInterfaces();

    public java.lang.reflect.Type[] getGenericInterfaces()
    {
        java.lang.Class r0;
        java.lang.String $r1;
        sun.reflect.generics.repository.ClassRepository $r2;
        java.lang.reflect.Type[] $r3;
        java.lang.Class[] $r4;

        r0 := @this: java.lang.Class;
        $r1 = specialinvoke r0.<java.lang.Class: java.lang.String getGenericSignature()>();
        if $r1 == null goto label0;

        $r2 = specialinvoke r0.<java.lang.Class: sun.reflect.generics.repository.ClassRepository getGenericInfo()>();
        $r3 = virtualinvoke $r2.<sun.reflect.generics.repository.ClassRepository: java.lang.reflect.Type[] getSuperInterfaces()>();
        return $r3;

     label0:
        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();
        return $r4;
    }

    public native java.lang.Class getComponentType();

    public native int getModifiers();

    public native java.lang.Object[] getSigners();

    native void setSigners(java.lang.Object[]);

    public java.lang.reflect.Method getEnclosingMethod()
    {
        java.lang.Class r0, r3, $r13, r14, $r15, $r18, $r19, $r20;
        java.lang.Class$EnclosingMethodInfo r1;
        sun.reflect.generics.repository.MethodRepository r2;
        java.lang.reflect.Type[] r4;
        java.lang.Class[] r5, r8;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.reflect.Method[] r6;
        java.lang.reflect.Method r7;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.String $r9, $r16, $r17;
        sun.reflect.generics.factory.GenericsFactory $r10;
        java.lang.reflect.Type $r11, $r12;
        java.lang.InternalError $r21;

        r0 := @this: java.lang.Class;
        r1 = specialinvoke r0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>();
        if r1 != null goto label0;

        return null;

     label0:
        $z1 = virtualinvoke r1.<java.lang.Class$EnclosingMethodInfo: boolean isMethod()>();
        if $z1 != 0 goto label1;

        return null;

     label1:
        $r9 = virtualinvoke r1.<java.lang.Class$EnclosingMethodInfo: java.lang.String getDescriptor()>();
        $r10 = specialinvoke r0.<java.lang.Class: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        r2 = staticinvoke <sun.reflect.generics.repository.MethodRepository: sun.reflect.generics.repository.MethodRepository make(java.lang.String,sun.reflect.generics.factory.GenericsFactory)>($r9, $r10);
        $r11 = virtualinvoke r2.<sun.reflect.generics.repository.MethodRepository: java.lang.reflect.Type getReturnType()>();
        r3 = staticinvoke <java.lang.Class: java.lang.Class toClass(java.lang.reflect.Type)>($r11);
        r4 = virtualinvoke r2.<sun.reflect.generics.repository.MethodRepository: java.lang.reflect.Type[] getParameterTypes()>();
        $i4 = lengthof r4;
        r5 = newarray (java.lang.Class)[$i4];
        i0 = 0;

     label2:
        $i5 = lengthof r5;
        if i0 >= $i5 goto label3;

        $r12 = r4[i0];
        $r13 = staticinvoke <java.lang.Class: java.lang.Class toClass(java.lang.reflect.Type)>($r12);
        r5[i0] = $r13;
        i0 = i0 + 1;
        goto label2;

     label3:
        r14 = virtualinvoke r1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>();
        $r15 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        specialinvoke r14.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $r15, 1);
        r6 = virtualinvoke r14.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();
        i1 = lengthof r6;
        i2 = 0;

     label4:
        if i2 >= i1 goto label9;

        r7 = r6[i2];
        $r16 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.String getName()>();
        $r17 = virtualinvoke r1.<java.lang.Class$EnclosingMethodInfo: java.lang.String getName()>();
        $z2 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r17);
        if $z2 == 0 goto label8;

        r8 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        $i6 = lengthof r8;
        $i7 = lengthof r5;
        if $i6 != $i7 goto label8;

        z0 = 1;
        i3 = 0;

     label5:
        $i8 = lengthof r8;
        if i3 >= $i8 goto label7;

        $r18 = r8[i3];
        $r19 = r5[i3];
        $z3 = virtualinvoke $r18.<java.lang.Object: boolean equals(java.lang.Object)>($r19);
        if $z3 != 0 goto label6;

        z0 = 0;
        goto label7;

     label6:
        i3 = i3 + 1;
        goto label5;

     label7:
        if z0 == 0 goto label8;

        $r20 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
        $z4 = virtualinvoke $r20.<java.lang.Object: boolean equals(java.lang.Object)>(r3);
        if $z4 == 0 goto label8;

        return r7;

     label8:
        i2 = i2 + 1;
        goto label4;

     label9:
        $r21 = new java.lang.InternalError;
        specialinvoke $r21.<java.lang.InternalError: void <init>(java.lang.String)>("Enclosing method not found");
        throw $r21;
    }

    private native java.lang.Object[] getEnclosingMethod0();

    private java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()
    {
        java.lang.Class r0;
        java.lang.Object[] r1;
        java.lang.Class$EnclosingMethodInfo $r2;

        r0 := @this: java.lang.Class;
        r1 = specialinvoke r0.<java.lang.Class: java.lang.Object[] getEnclosingMethod0()>();
        if r1 != null goto label0;

        return null;

     label0:
        $r2 = new java.lang.Class$EnclosingMethodInfo;
        specialinvoke $r2.<java.lang.Class$EnclosingMethodInfo: void <init>(java.lang.Object[],java.lang.Class$1)>(r1, null);
        return $r2;
    }

    private static java.lang.Class toClass(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0, $r2;
        boolean $z0;
        java.lang.reflect.GenericArrayType $r1;
        java.lang.Class $r3, $r5, $r6;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.reflect.Type;
        $z0 = r0 instanceof java.lang.reflect.GenericArrayType;
        if $z0 == 0 goto label0;

        $r1 = (java.lang.reflect.GenericArrayType) r0;
        $r2 = interfaceinvoke $r1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
        $r3 = staticinvoke <java.lang.Class: java.lang.Class toClass(java.lang.reflect.Type)>($r2);
        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r3, 0);
        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();
        return $r5;

     label0:
        $r6 = (java.lang.Class) r0;
        return $r6;
    }

    public java.lang.reflect.Constructor getEnclosingConstructor()
    {
        java.lang.Class r0, $r11, r12, $r13, $r14, $r15;
        java.lang.Class$EnclosingMethodInfo r1;
        sun.reflect.generics.repository.ConstructorRepository r2;
        java.lang.reflect.Type[] r3;
        java.lang.Class[] r4, r7;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.reflect.Constructor[] r5;
        java.lang.reflect.Constructor r6;
        boolean z0, $z1, $z2;
        java.lang.String $r8;
        sun.reflect.generics.factory.GenericsFactory $r9;
        java.lang.reflect.Type $r10;
        java.lang.InternalError $r16;

        r0 := @this: java.lang.Class;
        r1 = specialinvoke r0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>();
        if r1 != null goto label0;

        return null;

     label0:
        $z1 = virtualinvoke r1.<java.lang.Class$EnclosingMethodInfo: boolean isConstructor()>();
        if $z1 != 0 goto label1;

        return null;

     label1:
        $r8 = virtualinvoke r1.<java.lang.Class$EnclosingMethodInfo: java.lang.String getDescriptor()>();
        $r9 = specialinvoke r0.<java.lang.Class: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        r2 = staticinvoke <sun.reflect.generics.repository.ConstructorRepository: sun.reflect.generics.repository.ConstructorRepository make(java.lang.String,sun.reflect.generics.factory.GenericsFactory)>($r8, $r9);
        r3 = virtualinvoke r2.<sun.reflect.generics.repository.ConstructorRepository: java.lang.reflect.Type[] getParameterTypes()>();
        $i4 = lengthof r3;
        r4 = newarray (java.lang.Class)[$i4];
        i0 = 0;

     label2:
        $i5 = lengthof r4;
        if i0 >= $i5 goto label3;

        $r10 = r3[i0];
        $r11 = staticinvoke <java.lang.Class: java.lang.Class toClass(java.lang.reflect.Type)>($r10);
        r4[i0] = $r11;
        i0 = i0 + 1;
        goto label2;

     label3:
        r12 = virtualinvoke r1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>();
        $r13 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        specialinvoke r12.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $r13, 1);
        r5 = virtualinvoke r12.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();
        i1 = lengthof r5;
        i2 = 0;

     label4:
        if i2 >= i1 goto label9;

        r6 = r5[i2];
        r7 = virtualinvoke r6.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
        $i6 = lengthof r7;
        $i7 = lengthof r4;
        if $i6 != $i7 goto label8;

        z0 = 1;
        i3 = 0;

     label5:
        $i8 = lengthof r7;
        if i3 >= $i8 goto label7;

        $r14 = r7[i3];
        $r15 = r4[i3];
        $z2 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>($r15);
        if $z2 != 0 goto label6;

        z0 = 0;
        goto label7;

     label6:
        i3 = i3 + 1;
        goto label5;

     label7:
        if z0 == 0 goto label8;

        return r6;

     label8:
        i2 = i2 + 1;
        goto label4;

     label9:
        $r16 = new java.lang.InternalError;
        specialinvoke $r16.<java.lang.InternalError: void <init>(java.lang.String)>("Enclosing constructor not found");
        throw $r16;
    }

    public java.lang.Class getDeclaringClass()
    {
        java.lang.Class r0, r1, $r2;
        java.lang.ClassLoader $r3;

        r0 := @this: java.lang.Class;
        r1 = specialinvoke r0.<java.lang.Class: java.lang.Class getDeclaringClass0()>();
        if r1 == null goto label0;

        $r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r3 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r2);
        specialinvoke r1.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($r3, 1);

     label0:
        return r1;
    }

    private native java.lang.Class getDeclaringClass0();

    public java.lang.Class getEnclosingClass()
    {
        java.lang.Class r0, r2, r3, $r5;
        java.lang.Class$EnclosingMethodInfo r1;
        java.lang.InternalError $r4;
        java.lang.ClassLoader $r6;

        r0 := @this: java.lang.Class;
        r1 = specialinvoke r0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>();
        if r1 != null goto label0;

        r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class getDeclaringClass()>();
        goto label3;

     label0:
        r3 = virtualinvoke r1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>();
        if r3 == r0 goto label1;

        if r3 != null goto label2;

     label1:
        $r4 = new java.lang.InternalError;
        specialinvoke $r4.<java.lang.InternalError: void <init>(java.lang.String)>("Malformed enclosing method information");
        throw $r4;

     label2:
        r2 = r3;

     label3:
        if r2 == null goto label4;

        $r5 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r6 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r5);
        specialinvoke r2.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($r6, 1);

     label4:
        return r2;
    }

    public java.lang.String getSimpleName()
    {
        java.lang.Class r0, $r3;
        java.lang.String r1, $r4, $r7, r8, $r9, $r11;
        int i0, i1, $i2, $i3;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r5, $r6;
        char $c4, $c5;
        java.lang.InternalError $r10;

        r0 := @this: java.lang.Class;
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();
        if $z0 == 0 goto label0;

        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>();
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r7;

     label0:
        r1 = specialinvoke r0.<java.lang.Class: java.lang.String getSimpleBinaryName()>();
        if r1 != null goto label1;

        r8 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        $i2 = virtualinvoke r8.<java.lang.String: int lastIndexOf(java.lang.String)>(".");
        $i3 = $i2 + 1;
        $r9 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int)>($i3);
        return $r9;

     label1:
        i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if i0 < 1 goto label2;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);
        if $c4 == 36 goto label3;

     label2:
        $r10 = new java.lang.InternalError;
        specialinvoke $r10.<java.lang.InternalError: void <init>(java.lang.String)>("Malformed class name");
        throw $r10;

     label3:
        i1 = 1;

     label4:
        if i1 >= i0 goto label5;

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);
        $z1 = staticinvoke <java.lang.Class: boolean isAsciiDigit(char)>($c5);
        if $z1 == 0 goto label5;

        i1 = i1 + 1;
        goto label4;

     label5:
        $r11 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i1);
        return $r11;
    }

    private static boolean isAsciiDigit(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;
        if 48 > c0 goto label0;

        if c0 > 57 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.String getCanonicalName()
    {
        java.lang.Class r0, $r3, r8;
        java.lang.String r1, r2, $r7, $r9, $r13, $r15;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4, $r5, $r6, $r10, $r11, $r12, $r14;

        r0 := @this: java.lang.Class;
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();
        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();
        r1 = virtualinvoke $r3.<java.lang.Class: java.lang.String getCanonicalName()>();
        if r1 == null goto label0;

        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r7;

     label0:
        return null;

     label1:
        $z1 = specialinvoke r0.<java.lang.Class: boolean isLocalOrAnonymousClass()>();
        if $z1 == 0 goto label2;

        return null;

     label2:
        r8 = virtualinvoke r0.<java.lang.Class: java.lang.Class getEnclosingClass()>();
        if r8 != null goto label3;

        $r9 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        return $r9;

     label3:
        r2 = virtualinvoke r8.<java.lang.Class: java.lang.String getCanonicalName()>();
        if r2 != null goto label4;

        return null;

     label4:
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r13 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>();
        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r15;
    }

    public boolean isAnonymousClass()
    {
        java.lang.Class r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: java.lang.Class;
        $r1 = "";
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>();
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);
        return $z0;
    }

    public boolean isLocalClass()
    {
        java.lang.Class r0;
        boolean $z0, $z1, $z2;

        r0 := @this: java.lang.Class;
        $z0 = specialinvoke r0.<java.lang.Class: boolean isLocalOrAnonymousClass()>();
        if $z0 == 0 goto label0;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isAnonymousClass()>();
        if $z1 != 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;
    }

    public boolean isMemberClass()
    {
        java.lang.Class r0;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @this: java.lang.Class;
        $r1 = specialinvoke r0.<java.lang.Class: java.lang.String getSimpleBinaryName()>();
        if $r1 == null goto label0;

        $z0 = specialinvoke r0.<java.lang.Class: boolean isLocalOrAnonymousClass()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    private java.lang.String getSimpleBinaryName()
    {
        java.lang.Class r0, r1;
        java.lang.IndexOutOfBoundsException r2, $r6;
        java.lang.String $r3, $r4, $r5;
        int $i0;
        java.lang.InternalError $r7;

        r0 := @this: java.lang.Class;
        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getEnclosingClass()>();
        if r1 != null goto label0;

        return null;

     label0:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();
        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();
        $r5 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i0);

     label1:
        return $r5;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        $r7 = new java.lang.InternalError;
        specialinvoke $r7.<java.lang.InternalError: void <init>(java.lang.String)>("Malformed class name");
        throw $r7;

        catch java.lang.IndexOutOfBoundsException from label0 to label1 with label2;
    }

    private boolean isLocalOrAnonymousClass()
    {
        java.lang.Class r0;
        java.lang.Class$EnclosingMethodInfo $r1;
        boolean $z0;

        r0 := @this: java.lang.Class;
        $r1 = specialinvoke r0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>();
        if $r1 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.Class[] getClasses()
    {
        java.lang.Class r0, $r1;
        java.lang.Class$2 $r2;
        java.lang.Object $r3;
        java.lang.Class[] $r4;

        r0 := @this: java.lang.Class;
        $r1 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        specialinvoke r0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $r1, 0);
        $r2 = new java.lang.Class$2;
        specialinvoke $r2.<java.lang.Class$2: void <init>(java.lang.Class)>(r0);
        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);
        $r4 = (java.lang.Class[]) $r3;
        return $r4;
    }

    public java.lang.reflect.Field[] getFields() throws java.lang.SecurityException
    {
        java.lang.Class r0, $r1;
        java.lang.reflect.Field[] $r2, $r3;

        r0 := @this: java.lang.Class;
        $r1 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        specialinvoke r0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $r1, 1);
        $r2 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Field[] privateGetPublicFields(java.util.Set)>(null);
        $r3 = staticinvoke <java.lang.Class: java.lang.reflect.Field[] copyFields(java.lang.reflect.Field[])>($r2);
        return $r3;
    }

    public java.lang.reflect.Method[] getMethods() throws java.lang.SecurityException
    {
        java.lang.Class r0, $r1;
        java.lang.reflect.Method[] $r2, $r3;

        r0 := @this: java.lang.Class;
        $r1 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        specialinvoke r0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $r1, 1);
        $r2 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>();
        $r3 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($r2);
        return $r3;
    }

    public java.lang.reflect.Constructor[] getConstructors() throws java.lang.SecurityException
    {
        java.lang.Class r0, $r1;
        java.lang.reflect.Constructor[] $r2, $r3;

        r0 := @this: java.lang.Class;
        $r1 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        specialinvoke r0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $r1, 1);
        $r2 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>(1);
        $r3 = staticinvoke <java.lang.Class: java.lang.reflect.Constructor[] copyConstructors(java.lang.reflect.Constructor[])>($r2);
        return $r3;
    }

    public java.lang.reflect.Field getField(java.lang.String) throws java.lang.NoSuchFieldException, java.lang.SecurityException
    {
        java.lang.Class r0, $r2;
        java.lang.String r1;
        java.lang.reflect.Field r3;
        java.lang.NoSuchFieldException $r4;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        specialinvoke r0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $r2, 1);
        r3 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Field getField0(java.lang.String)>(r1);
        if r3 != null goto label0;

        $r4 = new java.lang.NoSuchFieldException;
        specialinvoke $r4.<java.lang.NoSuchFieldException: void <init>(java.lang.String)>(r1);
        throw $r4;

     label0:
        return r3;
    }

    public transient java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[]) throws java.lang.NoSuchMethodException, java.lang.SecurityException
    {
        java.lang.Class r0, $r3;
        java.lang.String r1, $r7, $r11, $r13;
        java.lang.Class[] r2;
        java.lang.reflect.Method r4;
        java.lang.NoSuchMethodException $r5;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r12;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Class[];
        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        specialinvoke r0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $r3, 1);
        r4 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod0(java.lang.String,java.lang.Class[])>(r1, r2);
        if r4 != null goto label0;

        $r5 = new java.lang.NoSuchMethodException;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r11 = staticinvoke <java.lang.Class: java.lang.String argumentTypesToString(java.lang.Class[])>(r2);
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r13);
        throw $r5;

     label0:
        return r4;
    }

    public transient java.lang.reflect.Constructor getConstructor(java.lang.Class[]) throws java.lang.NoSuchMethodException, java.lang.SecurityException
    {
        java.lang.Class r0, $r2;
        java.lang.Class[] r1;
        java.lang.reflect.Constructor $r3;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.Class[];
        $r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        specialinvoke r0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $r2, 1);
        $r3 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(r1, 0);
        return $r3;
    }

    public java.lang.Class[] getDeclaredClasses() throws java.lang.SecurityException
    {
        java.lang.Class r0, $r1;
        java.lang.Class[] $r2;

        r0 := @this: java.lang.Class;
        $r1 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        specialinvoke r0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $r1, 0);
        $r2 = specialinvoke r0.<java.lang.Class: java.lang.Class[] getDeclaredClasses0()>();
        return $r2;
    }

    public java.lang.reflect.Field[] getDeclaredFields() throws java.lang.SecurityException
    {
        java.lang.Class r0, $r1;
        java.lang.reflect.Field[] $r2, $r3;

        r0 := @this: java.lang.Class;
        $r1 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        specialinvoke r0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $r1, 1);
        $r2 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Field[] privateGetDeclaredFields(boolean)>(0);
        $r3 = staticinvoke <java.lang.Class: java.lang.reflect.Field[] copyFields(java.lang.reflect.Field[])>($r2);
        return $r3;
    }

    public java.lang.reflect.Method[] getDeclaredMethods() throws java.lang.SecurityException
    {
        java.lang.Class r0, $r1;
        java.lang.reflect.Method[] $r2, $r3;

        r0 := @this: java.lang.Class;
        $r1 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        specialinvoke r0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $r1, 1);
        $r2 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0);
        $r3 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($r2);
        return $r3;
    }

    public java.lang.reflect.Constructor[] getDeclaredConstructors() throws java.lang.SecurityException
    {
        java.lang.Class r0, $r1;
        java.lang.reflect.Constructor[] $r2, $r3;

        r0 := @this: java.lang.Class;
        $r1 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        specialinvoke r0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $r1, 1);
        $r2 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>(0);
        $r3 = staticinvoke <java.lang.Class: java.lang.reflect.Constructor[] copyConstructors(java.lang.reflect.Constructor[])>($r2);
        return $r3;
    }

    public java.lang.reflect.Field getDeclaredField(java.lang.String) throws java.lang.NoSuchFieldException, java.lang.SecurityException
    {
        java.lang.Class r0, $r2;
        java.lang.String r1;
        java.lang.reflect.Field r3;
        java.lang.reflect.Field[] $r4;
        java.lang.NoSuchFieldException $r5;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        specialinvoke r0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $r2, 1);
        $r4 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Field[] privateGetDeclaredFields(boolean)>(0);
        r3 = staticinvoke <java.lang.Class: java.lang.reflect.Field searchFields(java.lang.reflect.Field[],java.lang.String)>($r4, r1);
        if r3 != null goto label0;

        $r5 = new java.lang.NoSuchFieldException;
        specialinvoke $r5.<java.lang.NoSuchFieldException: void <init>(java.lang.String)>(r1);
        throw $r5;

     label0:
        return r3;
    }

    public transient java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[]) throws java.lang.NoSuchMethodException, java.lang.SecurityException
    {
        java.lang.Class r0, $r3;
        java.lang.String r1, $r8, $r12, $r14;
        java.lang.Class[] r2;
        java.lang.reflect.Method r4;
        java.lang.reflect.Method[] $r5;
        java.lang.NoSuchMethodException $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r13;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Class[];
        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        specialinvoke r0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $r3, 1);
        $r5 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0);
        r4 = staticinvoke <java.lang.Class: java.lang.reflect.Method searchMethods(java.lang.reflect.Method[],java.lang.String,java.lang.Class[])>($r5, r1, r2);
        if r4 != null goto label0;

        $r6 = new java.lang.NoSuchMethodException;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r12 = staticinvoke <java.lang.Class: java.lang.String argumentTypesToString(java.lang.Class[])>(r2);
        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r14);
        throw $r6;

     label0:
        return r4;
    }

    public transient java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[]) throws java.lang.NoSuchMethodException, java.lang.SecurityException
    {
        java.lang.Class r0, $r2;
        java.lang.Class[] r1;
        java.lang.reflect.Constructor $r3;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.Class[];
        $r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        specialinvoke r0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $r2, 1);
        $r3 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(r1, 1);
        return $r3;
    }

    public java.io.InputStream getResourceAsStream(java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1, r3;
        java.lang.ClassLoader r2;
        java.io.InputStream $r4, $r5;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.String;
        r3 = specialinvoke r0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(r1);
        r2 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>();
        if r2 != null goto label0;

        $r4 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>(r3);
        return $r4;

     label0:
        $r5 = virtualinvoke r2.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r3);
        return $r5;
    }

    public java.net.URL getResource(java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1, r3;
        java.lang.ClassLoader r2;
        java.net.URL $r4, $r5;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.String;
        r3 = specialinvoke r0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(r1);
        r2 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>();
        if r2 != null goto label0;

        $r4 = staticinvoke <java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>(r3);
        return $r4;

     label0:
        $r5 = virtualinvoke r2.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r3);
        return $r5;
    }

    public java.security.ProtectionDomain getProtectionDomain()
    {
        java.lang.Class r0;
        java.lang.SecurityManager r1;
        java.lang.RuntimePermission $r2;
        java.security.ProtectionDomain r3, $r5, $r8;
        java.security.Permissions r4, $r6;
        java.security.AllPermission $r7;

        r0 := @this: java.lang.Class;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = <sun.security.util.SecurityConstants: java.lang.RuntimePermission GET_PD_PERMISSION>;
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label0:
        r3 = specialinvoke r0.<java.lang.Class: java.security.ProtectionDomain getProtectionDomain0()>();
        if r3 != null goto label2;

        $r5 = <java.lang.Class: java.security.ProtectionDomain allPermDomain>;
        if $r5 != null goto label1;

        $r6 = new java.security.Permissions;
        specialinvoke $r6.<java.security.Permissions: void <init>()>();
        r4 = $r6;
        $r7 = <sun.security.util.SecurityConstants: java.security.AllPermission ALL_PERMISSION>;
        virtualinvoke r4.<java.security.Permissions: void add(java.security.Permission)>($r7);
        $r8 = new java.security.ProtectionDomain;
        specialinvoke $r8.<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection)>(null, r4);
        <java.lang.Class: java.security.ProtectionDomain allPermDomain> = $r8;

     label1:
        r3 = <java.lang.Class: java.security.ProtectionDomain allPermDomain>;

     label2:
        return r3;
    }

    private native java.security.ProtectionDomain getProtectionDomain0();

    native void setProtectionDomain0(java.security.ProtectionDomain);

    static native java.lang.Class getPrimitiveClass(java.lang.String);

    private static boolean isCheckMemberAccessOverridden(java.lang.SecurityManager)
    {
        java.lang.SecurityManager r0, $r3;
        java.lang.Class$SecurityManagerHelper r1, $r4;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.SecurityManager;
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        if $r2 != class "java/lang/SecurityManager" goto label0;

        return 0;

     label0:
        r1 = <java.lang.Class: java.lang.Class$SecurityManagerHelper smHelper>;
        if r1 == null goto label1;

        $r3 = r1.<java.lang.Class$SecurityManagerHelper: java.lang.SecurityManager sm>;
        if $r3 == r0 goto label2;

     label1:
        $r4 = new java.lang.Class$SecurityManagerHelper;
        specialinvoke $r4.<java.lang.Class$SecurityManagerHelper: void <init>(java.lang.SecurityManager)>(r0);
        r1 = $r4;
        <java.lang.Class: java.lang.Class$SecurityManagerHelper smHelper> = r1;

     label2:
        $z0 = r1.<java.lang.Class$SecurityManagerHelper: boolean overrideCheckMemberAccess>;
        return $z0;
    }

    private static native java.lang.reflect.Method getCheckMemberAccessMethod(java.lang.Class) throws java.lang.NoSuchMethodError;

    private void checkMemberAccess(int, java.lang.Class, boolean)
    {
        java.lang.Class r0, r1;
        int i0;
        boolean z0, $z1;
        java.lang.SecurityManager r2;
        java.lang.ClassLoader r3, r4;
        java.lang.RuntimePermission $r5;

        r0 := @this: java.lang.Class;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Class;
        z0 := @parameter2: boolean;
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label2;

        r3 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r1);
        r4 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>();
        $z1 = staticinvoke <java.lang.Class: boolean isCheckMemberAccessOverridden(java.lang.SecurityManager)>(r2);
        if $z1 != 0 goto label0;

        if i0 == 0 goto label1;

        if r3 == r4 goto label1;

        $r5 = <sun.security.util.SecurityConstants: java.lang.RuntimePermission CHECK_MEMBER_ACCESS_PERMISSION>;
        virtualinvoke r2.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r5);
        goto label1;

     label0:
        virtualinvoke r2.<java.lang.SecurityManager: void checkMemberAccess(java.lang.Class,int)>(r0, i0);

     label1:
        specialinvoke r0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(r3, z0);

     label2:
        return;
    }

    private void checkPackageAccess(java.lang.ClassLoader, boolean)
    {
        java.lang.Class r0;
        java.lang.ClassLoader r1, r3;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.SecurityManager r2;
        java.lang.String r4, r5;
        int i0;
        java.lang.Class[] $r6;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.ClassLoader;
        z0 := @parameter1: boolean;
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label2;

        r3 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>();
        $z1 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(r1, r3);
        if $z1 == 0 goto label1;

        r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        i0 = virtualinvoke r4.<java.lang.String: int lastIndexOf(int)>(46);
        if i0 == -1 goto label1;

        r5 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        $z2 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(r0);
        if $z2 == 0 goto label0;

        $z3 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(r0);
        if $z3 == 0 goto label1;

     label0:
        virtualinvoke r2.<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>(r5);

     label1:
        if z0 == 0 goto label2;

        $z4 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(r0);
        if $z4 == 0 goto label2;

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();
        staticinvoke <sun.reflect.misc.ReflectUtil: void checkProxyPackageAccess(java.lang.ClassLoader,java.lang.Class[])>(r1, $r6);

     label2:
        return;
    }

    private java.lang.String resolveName(java.lang.String)
    {
        java.lang.Class r0, r2;
        java.lang.String r1, r3, $r5, $r6;
        int i0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4, $r7, $r8, $r9;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        return r1;

     label0:
        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/");
        if $z0 != 0 goto label4;

        r2 = r0;

     label1:
        $z1 = virtualinvoke r2.<java.lang.Class: boolean isArray()>();
        if $z1 == 0 goto label2;

        r2 = virtualinvoke r2.<java.lang.Class: java.lang.Class getComponentType()>();
        goto label1;

     label2:
        r3 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();
        i0 = virtualinvoke r3.<java.lang.String: int lastIndexOf(int)>(46);
        if i0 == -1 goto label3;

        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replace(char,char)>(46, 47);
        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        goto label5;

     label4:
        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

     label5:
        return r1;
    }

    private java.lang.Class$ReflectionData reflectionData()
    {
        java.lang.Class r0;
        java.lang.ref.SoftReference r1;
        int i0, $i1;
        java.lang.Class$ReflectionData r2, $r4, $r5;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: java.lang.Class;
        r1 = r0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>;
        i0 = r0.<java.lang.Class: int classRedefinedCount>;
        $z0 = <java.lang.Class: boolean useCaches>;
        if $z0 == 0 goto label0;

        if r1 == null goto label0;

        $r3 = virtualinvoke r1.<java.lang.ref.SoftReference: java.lang.Object get()>();
        $r4 = (java.lang.Class$ReflectionData) $r3;
        r2 = $r4;
        if $r4 == null goto label0;

        $i1 = r2.<java.lang.Class$ReflectionData: int redefinedCount>;
        if $i1 != i0 goto label0;

        return r2;

     label0:
        $r5 = specialinvoke r0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(r1, i0);
        return $r5;
    }

    private java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference, int)
    {
        java.lang.Class r0;
        java.lang.ref.SoftReference r1, $r4;
        int i0, $i1;
        boolean $z0, $z1;
        java.lang.Class$ReflectionData r2, $r3, $r6, r7;
        java.lang.Object $r5;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.ref.SoftReference;
        i0 := @parameter1: int;
        $z0 = <java.lang.Class: boolean useCaches>;
        if $z0 != 0 goto label0;

        return null;

     label0:
        $r3 = new java.lang.Class$ReflectionData;
        specialinvoke $r3.<java.lang.Class$ReflectionData: void <init>(int)>(i0);
        r2 = $r3;
        $r4 = new java.lang.ref.SoftReference;
        specialinvoke $r4.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r2);
        $z1 = staticinvoke <java.lang.Class$Atomic: boolean casReflectionData(java.lang.Class,java.lang.ref.SoftReference,java.lang.ref.SoftReference)>(r0, r1, $r4);
        if $z1 == 0 goto label1;

        return r2;

     label1:
        r1 = r0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>;
        i0 = r0.<java.lang.Class: int classRedefinedCount>;
        if r1 == null goto label2;

        $r5 = virtualinvoke r1.<java.lang.ref.SoftReference: java.lang.Object get()>();
        $r6 = (java.lang.Class$ReflectionData) $r5;
        r7 = $r6;
        if $r6 == null goto label2;

        $i1 = r7.<java.lang.Class$ReflectionData: int redefinedCount>;
        if $i1 != i0 goto label2;

        return r7;

     label2:
        goto label0;
    }

    private native java.lang.String getGenericSignature();

    private sun.reflect.generics.factory.GenericsFactory getFactory()
    {
        java.lang.Class r0;
        sun.reflect.generics.scope.ClassScope $r1;
        sun.reflect.generics.factory.CoreReflectionFactory $r2;

        r0 := @this: java.lang.Class;
        $r1 = staticinvoke <sun.reflect.generics.scope.ClassScope: sun.reflect.generics.scope.ClassScope make(java.lang.Class)>(r0);
        $r2 = staticinvoke <sun.reflect.generics.factory.CoreReflectionFactory: sun.reflect.generics.factory.CoreReflectionFactory make(java.lang.reflect.GenericDeclaration,sun.reflect.generics.scope.Scope)>(r0, $r1);
        return $r2;
    }

    private sun.reflect.generics.repository.ClassRepository getGenericInfo()
    {
        java.lang.Class r0;
        sun.reflect.generics.repository.ClassRepository $r1, $r4, $r5;
        java.lang.String $r2;
        sun.reflect.generics.factory.GenericsFactory $r3;

        r0 := @this: java.lang.Class;
        $r1 = r0.<java.lang.Class: sun.reflect.generics.repository.ClassRepository genericInfo>;
        if $r1 != null goto label0;

        $r2 = specialinvoke r0.<java.lang.Class: java.lang.String getGenericSignature()>();
        $r3 = specialinvoke r0.<java.lang.Class: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r4 = staticinvoke <sun.reflect.generics.repository.ClassRepository: sun.reflect.generics.repository.ClassRepository make(java.lang.String,sun.reflect.generics.factory.GenericsFactory)>($r2, $r3);
        r0.<java.lang.Class: sun.reflect.generics.repository.ClassRepository genericInfo> = $r4;

     label0:
        $r5 = r0.<java.lang.Class: sun.reflect.generics.repository.ClassRepository genericInfo>;
        return $r5;
    }

    native byte[] getRawAnnotations();

    native sun.reflect.ConstantPool getConstantPool();

    private java.lang.reflect.Field[] privateGetDeclaredFields(boolean)
    {
        java.lang.Class r0;
        boolean z0;
        java.lang.Class$ReflectionData r1;
        java.lang.reflect.Field[] r2, $r3, $r4, r5;

        r0 := @this: java.lang.Class;
        z0 := @parameter0: boolean;
        staticinvoke <java.lang.Class: void checkInitted()>();
        r1 = specialinvoke r0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>();
        if r1 == null goto label2;

        if z0 == 0 goto label0;

        $r3 = r1.<java.lang.Class$ReflectionData: java.lang.reflect.Field[] declaredPublicFields>;
        goto label1;

     label0:
        $r3 = r1.<java.lang.Class$ReflectionData: java.lang.reflect.Field[] declaredFields>;

     label1:
        r2 = $r3;
        if r2 == null goto label2;

        return r2;

     label2:
        $r4 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields0(boolean)>(z0);
        r5 = staticinvoke <sun.reflect.Reflection: java.lang.reflect.Field[] filterFields(java.lang.Class,java.lang.reflect.Field[])>(r0, $r4);
        if r1 == null goto label4;

        if z0 == 0 goto label3;

        r1.<java.lang.Class$ReflectionData: java.lang.reflect.Field[] declaredPublicFields> = r5;
        goto label4;

     label3:
        r1.<java.lang.Class$ReflectionData: java.lang.reflect.Field[] declaredFields> = r5;

     label4:
        return r5;
    }

    private java.lang.reflect.Field[] privateGetPublicFields(java.util.Set)
    {
        java.lang.Class r0, r7, r11;
        java.util.Set r1;
        java.lang.Class$ReflectionData r2;
        java.lang.reflect.Field[] r3, r5, $r10, $r12, r13;
        java.util.ArrayList r4, $r8;
        java.lang.Class[] r6;
        int i0, i1, $i2;
        java.util.HashSet $r9;
        boolean $z0, $z2;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.util.Set;
        staticinvoke <java.lang.Class: void checkInitted()>();
        r2 = specialinvoke r0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>();
        if r2 == null goto label0;

        r3 = r2.<java.lang.Class$ReflectionData: java.lang.reflect.Field[] publicFields>;
        if r3 == null goto label0;

        return r3;

     label0:
        $r8 = new java.util.ArrayList;
        specialinvoke $r8.<java.util.ArrayList: void <init>()>();
        r4 = $r8;
        if r1 != null goto label1;

        $r9 = new java.util.HashSet;
        specialinvoke $r9.<java.util.HashSet: void <init>()>();
        r1 = $r9;

     label1:
        r5 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Field[] privateGetDeclaredFields(boolean)>(1);
        staticinvoke <java.lang.Class: void addAll(java.util.Collection,java.lang.reflect.Field[])>(r4, r5);
        r6 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();
        i0 = lengthof r6;
        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r7 = r6[i1];
        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r7);
        if $z0 != 0 goto label3;

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r7);
        $r10 = specialinvoke r7.<java.lang.Class: java.lang.reflect.Field[] privateGetPublicFields(java.util.Set)>(r1);
        staticinvoke <java.lang.Class: void addAll(java.util.Collection,java.lang.reflect.Field[])>(r4, $r10);

     label3:
        i1 = i1 + 1;
        goto label2;

     label4:
        $z2 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();
        if $z2 != 0 goto label5;

        r11 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();
        if r11 == null goto label5;

        $r12 = specialinvoke r11.<java.lang.Class: java.lang.reflect.Field[] privateGetPublicFields(java.util.Set)>(r1);
        staticinvoke <java.lang.Class: void addAll(java.util.Collection,java.lang.reflect.Field[])>(r4, $r12);

     label5:
        $i2 = interfaceinvoke r4.<java.util.List: int size()>();
        r13 = newarray (java.lang.reflect.Field)[$i2];
        interfaceinvoke r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r13);
        if r2 == null goto label6;

        r2.<java.lang.Class$ReflectionData: java.lang.reflect.Field[] publicFields> = r13;

     label6:
        return r13;
    }

    private static void addAll(java.util.Collection, java.lang.reflect.Field[])
    {
        java.util.Collection r0;
        java.lang.reflect.Field[] r1;
        int i0, $i1;
        java.lang.reflect.Field $r2;

        r0 := @parameter0: java.util.Collection;
        r1 := @parameter1: java.lang.reflect.Field[];
        i0 = 0;

     label0:
        $i1 = lengthof r1;
        if i0 >= $i1 goto label1;

        $r2 = r1[i0];
        interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>($r2);
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    private java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)
    {
        java.lang.Class r0;
        boolean z0, $z1;
        java.lang.Class$ReflectionData r1;
        java.lang.reflect.Constructor[] r2, $r3, r4;

        r0 := @this: java.lang.Class;
        z0 := @parameter0: boolean;
        staticinvoke <java.lang.Class: void checkInitted()>();
        r1 = specialinvoke r0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>();
        if r1 == null goto label2;

        if z0 == 0 goto label0;

        $r3 = r1.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] publicConstructors>;
        goto label1;

     label0:
        $r3 = r1.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>;

     label1:
        r2 = $r3;
        if r2 == null goto label2;

        return r2;

     label2:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();
        if $z1 == 0 goto label3;

        r4 = newarray (java.lang.reflect.Constructor)[0];
        goto label4;

     label3:
        r4 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)>(z0);

     label4:
        if r1 == null goto label6;

        if z0 == 0 goto label5;

        r1.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] publicConstructors> = r4;
        goto label6;

     label5:
        r1.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors> = r4;

     label6:
        return r4;
    }

    private java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)
    {
        java.lang.Class r0;
        boolean z0;
        java.lang.Class$ReflectionData r1;
        java.lang.reflect.Method[] r2, $r3, $r4, r5;

        r0 := @this: java.lang.Class;
        z0 := @parameter0: boolean;
        staticinvoke <java.lang.Class: void checkInitted()>();
        r1 = specialinvoke r0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>();
        if r1 == null goto label2;

        if z0 == 0 goto label0;

        $r3 = r1.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredPublicMethods>;
        goto label1;

     label0:
        $r3 = r1.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>;

     label1:
        r2 = $r3;
        if r2 == null goto label2;

        return r2;

     label2:
        $r4 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods0(boolean)>(z0);
        r5 = staticinvoke <sun.reflect.Reflection: java.lang.reflect.Method[] filterMethods(java.lang.Class,java.lang.reflect.Method[])>(r0, $r4);
        if r1 == null goto label4;

        if z0 == 0 goto label3;

        r1.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredPublicMethods> = r5;
        goto label4;

     label3:
        r1.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods> = r5;

     label4:
        return r5;
    }

    private java.lang.reflect.Method[] privateGetPublicMethods()
    {
        java.lang.Class r0, $r11, r13;
        java.lang.Class$ReflectionData r1;
        java.lang.reflect.Method[] r2, r4, $r12, $r15, r17;
        java.lang.Class$MethodArray r3, r6, $r8, $r9, r10, $r14;
        java.lang.Class[] r5;
        int i0, i1, $i2, $i3, $i4, i5, $i6;
        java.lang.reflect.Method r7, r16;
        boolean $z0, $z1;

        r0 := @this: java.lang.Class;
        staticinvoke <java.lang.Class: void checkInitted()>();
        r1 = specialinvoke r0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>();
        if r1 == null goto label0;

        r2 = r1.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] publicMethods>;
        if r2 == null goto label0;

        return r2;

     label0:
        $r8 = new java.lang.Class$MethodArray;
        specialinvoke $r8.<java.lang.Class$MethodArray: void <init>()>();
        r3 = $r8;
        r4 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(1);
        virtualinvoke r3.<java.lang.Class$MethodArray: void addAll(java.lang.reflect.Method[])>(r4);
        $r9 = new java.lang.Class$MethodArray;
        specialinvoke $r9.<java.lang.Class$MethodArray: void <init>()>();
        r10 = $r9;
        r5 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();
        i0 = 0;

     label1:
        $i2 = lengthof r5;
        if i0 >= $i2 goto label2;

        $r11 = r5[i0];
        $r12 = specialinvoke $r11.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>();
        virtualinvoke r10.<java.lang.Class$MethodArray: void addAll(java.lang.reflect.Method[])>($r12);
        i0 = i0 + 1;
        goto label1;

     label2:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();
        if $z0 != 0 goto label6;

        r13 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();
        if r13 == null goto label6;

        $r14 = new java.lang.Class$MethodArray;
        specialinvoke $r14.<java.lang.Class$MethodArray: void <init>()>();
        r6 = $r14;
        $r15 = specialinvoke r13.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>();
        virtualinvoke r6.<java.lang.Class$MethodArray: void addAll(java.lang.reflect.Method[])>($r15);
        i1 = 0;

     label3:
        $i3 = virtualinvoke r6.<java.lang.Class$MethodArray: int length()>();
        if i1 >= $i3 goto label5;

        r7 = virtualinvoke r6.<java.lang.Class$MethodArray: java.lang.reflect.Method get(int)>(i1);
        if r7 == null goto label4;

        $i4 = virtualinvoke r7.<java.lang.reflect.Method: int getModifiers()>();
        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i4);
        if $z1 != 0 goto label4;

        virtualinvoke r10.<java.lang.Class$MethodArray: void removeByNameAndSignature(java.lang.reflect.Method)>(r7);

     label4:
        i1 = i1 + 1;
        goto label3;

     label5:
        virtualinvoke r6.<java.lang.Class$MethodArray: void addAll(java.lang.Class$MethodArray)>(r10);
        r10 = r6;

     label6:
        i5 = 0;

     label7:
        $i6 = virtualinvoke r3.<java.lang.Class$MethodArray: int length()>();
        if i5 >= $i6 goto label8;

        r16 = virtualinvoke r3.<java.lang.Class$MethodArray: java.lang.reflect.Method get(int)>(i5);
        virtualinvoke r10.<java.lang.Class$MethodArray: void removeByNameAndSignature(java.lang.reflect.Method)>(r16);
        i5 = i5 + 1;
        goto label7;

     label8:
        virtualinvoke r3.<java.lang.Class$MethodArray: void addAllIfNotPresent(java.lang.Class$MethodArray)>(r10);
        virtualinvoke r3.<java.lang.Class$MethodArray: void compactAndTrim()>();
        r17 = virtualinvoke r3.<java.lang.Class$MethodArray: java.lang.reflect.Method[] getArray()>();
        if r1 == null goto label9;

        r1.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] publicMethods> = r17;

     label9:
        return r17;
    }

    private static java.lang.reflect.Field searchFields(java.lang.reflect.Field[], java.lang.String)
    {
        java.lang.reflect.Field[] r0;
        java.lang.String r1, r2, $r4;
        int i0, $i1;
        java.lang.reflect.Field $r3, $r6, $r7;
        sun.reflect.ReflectionFactory $r5;

        r0 := @parameter0: java.lang.reflect.Field[];
        r1 := @parameter1: java.lang.String;
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String intern()>();
        i0 = 0;

     label0:
        $i1 = lengthof r0;
        if i0 >= $i1 goto label2;

        $r3 = r0[i0];
        $r4 = virtualinvoke $r3.<java.lang.reflect.Field: java.lang.String getName()>();
        if $r4 != r2 goto label1;

        $r5 = staticinvoke <java.lang.Class: sun.reflect.ReflectionFactory getReflectionFactory()>();
        $r6 = r0[i0];
        $r7 = virtualinvoke $r5.<sun.reflect.ReflectionFactory: java.lang.reflect.Field copyField(java.lang.reflect.Field)>($r6);
        return $r7;

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        return null;
    }

    private java.lang.reflect.Field getField0(java.lang.String) throws java.lang.NoSuchFieldException
    {
        java.lang.Class r0, r4, r9;
        java.lang.String r1;
        java.lang.reflect.Field r2, $r6, $r7, r8, $r10, r11;
        java.lang.Class[] r3;
        int i0, $i1;
        java.lang.reflect.Field[] $r5;
        boolean $z0;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.String;
        $r5 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Field[] privateGetDeclaredFields(boolean)>(1);
        $r6 = staticinvoke <java.lang.Class: java.lang.reflect.Field searchFields(java.lang.reflect.Field[],java.lang.String)>($r5, r1);
        r2 = $r6;
        if $r6 == null goto label0;

        return r2;

     label0:
        r3 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();
        i0 = 0;

     label1:
        $i1 = lengthof r3;
        if i0 >= $i1 goto label3;

        r4 = r3[i0];
        $r7 = specialinvoke r4.<java.lang.Class: java.lang.reflect.Field getField0(java.lang.String)>(r1);
        r8 = $r7;
        if $r7 == null goto label2;

        return r8;

     label2:
        i0 = i0 + 1;
        goto label1;

     label3:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();
        if $z0 != 0 goto label4;

        r9 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();
        if r9 == null goto label4;

        $r10 = specialinvoke r9.<java.lang.Class: java.lang.reflect.Field getField0(java.lang.String)>(r1);
        r11 = $r10;
        if $r10 == null goto label4;

        return r11;

     label4:
        return null;
    }

    private static java.lang.reflect.Method searchMethods(java.lang.reflect.Method[], java.lang.String, java.lang.Class[])
    {
        java.lang.reflect.Method[] r0;
        java.lang.String r1, r4, $r6;
        java.lang.Class[] r2, $r7;
        java.lang.reflect.Method r3, r5, $r10;
        int i0, $i1;
        boolean $z0, $z1;
        java.lang.Class $r8, $r9;
        sun.reflect.ReflectionFactory $r11;

        r0 := @parameter0: java.lang.reflect.Method[];
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.Class[];
        r3 = null;
        r4 = virtualinvoke r1.<java.lang.String: java.lang.String intern()>();
        i0 = 0;

     label0:
        $i1 = lengthof r0;
        if i0 >= $i1 goto label3;

        r5 = r0[i0];
        $r6 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.String getName()>();
        if $r6 != r4 goto label2;

        $r7 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        $z0 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(r2, $r7);
        if $z0 == 0 goto label2;

        if r3 == null goto label1;

        $r8 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
        $r9 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
        $z1 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r9);
        if $z1 == 0 goto label2;

     label1:
        r3 = r5;

     label2:
        i0 = i0 + 1;
        goto label0;

     label3:
        if r3 != null goto label4;

        $r10 = r3;
        goto label5;

     label4:
        $r11 = staticinvoke <java.lang.Class: sun.reflect.ReflectionFactory getReflectionFactory()>();
        $r10 = virtualinvoke $r11.<sun.reflect.ReflectionFactory: java.lang.reflect.Method copyMethod(java.lang.reflect.Method)>(r3);

     label5:
        return $r10;
    }

    private java.lang.reflect.Method getMethod0(java.lang.String, java.lang.Class[])
    {
        java.lang.Class r0, r4, r5;
        java.lang.String r1;
        java.lang.Class[] r2, r10;
        java.lang.reflect.Method r3, $r7, $r8, r9, $r11, r12;
        int i0, $i1;
        java.lang.reflect.Method[] $r6;
        boolean $z0;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Class[];
        $r6 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(1);
        $r7 = staticinvoke <java.lang.Class: java.lang.reflect.Method searchMethods(java.lang.reflect.Method[],java.lang.String,java.lang.Class[])>($r6, r1, r2);
        r3 = $r7;
        if $r7 == null goto label0;

        return r3;

     label0:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();
        if $z0 != 0 goto label1;

        r4 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();
        if r4 == null goto label1;

        $r8 = specialinvoke r4.<java.lang.Class: java.lang.reflect.Method getMethod0(java.lang.String,java.lang.Class[])>(r1, r2);
        r9 = $r8;
        if $r8 == null goto label1;

        return r9;

     label1:
        r10 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();
        i0 = 0;

     label2:
        $i1 = lengthof r10;
        if i0 >= $i1 goto label4;

        r5 = r10[i0];
        $r11 = specialinvoke r5.<java.lang.Class: java.lang.reflect.Method getMethod0(java.lang.String,java.lang.Class[])>(r1, r2);
        r12 = $r11;
        if $r11 == null goto label3;

        return r12;

     label3:
        i0 = i0 + 1;
        goto label2;

     label4:
        return null;
    }

    private java.lang.reflect.Constructor getConstructor0(java.lang.Class[], int) throws java.lang.NoSuchMethodException
    {
        java.lang.Class r0;
        java.lang.Class[] r1, $r7;
        int i0, i1, i2;
        java.lang.reflect.Constructor[] r3, r4;
        java.lang.reflect.Constructor r5, $r9;
        java.lang.StringBuilder $r6, $r12, $r13, $r15;
        boolean $z0, $z1;
        sun.reflect.ReflectionFactory $r8;
        java.lang.NoSuchMethodException $r10;
        java.lang.String $r11, $r14, $r16;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.Class[];
        i0 := @parameter1: int;
        if i0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        r3 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($z0);
        r4 = r3;
        i1 = lengthof r4;
        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        r5 = r4[i2];
        $r7 = virtualinvoke r5.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
        $z1 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(r1, $r7);
        if $z1 == 0 goto label3;

        $r8 = staticinvoke <java.lang.Class: sun.reflect.ReflectionFactory getReflectionFactory()>();
        $r9 = virtualinvoke $r8.<sun.reflect.ReflectionFactory: java.lang.reflect.Constructor copyConstructor(java.lang.reflect.Constructor)>(r5);
        return $r9;

     label3:
        i2 = i2 + 1;
        goto label2;

     label4:
        $r10 = new java.lang.NoSuchMethodException;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".<init>");
        $r14 = staticinvoke <java.lang.Class: java.lang.String argumentTypesToString(java.lang.Class[])>(r1);
        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r10.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r16);
        throw $r10;
    }

    private static boolean arrayContentsEq(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1;
        java.lang.Object $r2, $r3;

        r0 := @parameter0: java.lang.Object[];
        r1 := @parameter1: java.lang.Object[];
        if r0 != null goto label3;

        if r1 == null goto label0;

        $i1 = lengthof r1;
        if $i1 != 0 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        if r1 != null goto label6;

        $i2 = lengthof r0;
        if $i2 != 0 goto label4;

        $z1 = 1;
        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;

     label6:
        $i3 = lengthof r0;
        $i4 = lengthof r1;
        if $i3 == $i4 goto label7;

        return 0;

     label7:
        i0 = 0;

     label8:
        $i5 = lengthof r0;
        if i0 >= $i5 goto label10;

        $r2 = r0[i0];
        $r3 = r1[i0];
        if $r2 == $r3 goto label9;

        return 0;

     label9:
        i0 = i0 + 1;
        goto label8;

     label10:
        return 1;
    }

    private static java.lang.reflect.Field[] copyFields(java.lang.reflect.Field[])
    {
        java.lang.reflect.Field[] r0, r1;
        sun.reflect.ReflectionFactory r2;
        int i0, $i1, $i2;
        java.lang.reflect.Field $r3, $r4;

        r0 := @parameter0: java.lang.reflect.Field[];
        $i1 = lengthof r0;
        r1 = newarray (java.lang.reflect.Field)[$i1];
        r2 = staticinvoke <java.lang.Class: sun.reflect.ReflectionFactory getReflectionFactory()>();
        i0 = 0;

     label0:
        $i2 = lengthof r0;
        if i0 >= $i2 goto label1;

        $r3 = r0[i0];
        $r4 = virtualinvoke r2.<sun.reflect.ReflectionFactory: java.lang.reflect.Field copyField(java.lang.reflect.Field)>($r3);
        r1[i0] = $r4;
        i0 = i0 + 1;
        goto label0;

     label1:
        return r1;
    }

    private static java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])
    {
        java.lang.reflect.Method[] r0, r1;
        sun.reflect.ReflectionFactory r2;
        int i0, $i1, $i2;
        java.lang.reflect.Method $r3, $r4;

        r0 := @parameter0: java.lang.reflect.Method[];
        $i1 = lengthof r0;
        r1 = newarray (java.lang.reflect.Method)[$i1];
        r2 = staticinvoke <java.lang.Class: sun.reflect.ReflectionFactory getReflectionFactory()>();
        i0 = 0;

     label0:
        $i2 = lengthof r0;
        if i0 >= $i2 goto label1;

        $r3 = r0[i0];
        $r4 = virtualinvoke r2.<sun.reflect.ReflectionFactory: java.lang.reflect.Method copyMethod(java.lang.reflect.Method)>($r3);
        r1[i0] = $r4;
        i0 = i0 + 1;
        goto label0;

     label1:
        return r1;
    }

    private static java.lang.reflect.Constructor[] copyConstructors(java.lang.reflect.Constructor[])
    {
        java.lang.reflect.Constructor[] r0, r1;
        sun.reflect.ReflectionFactory r2;
        int i0, $i1;
        java.lang.Object $r3;
        java.lang.reflect.Constructor $r4, $r5;

        r0 := @parameter0: java.lang.reflect.Constructor[];
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        r1 = (java.lang.reflect.Constructor[]) $r3;
        r2 = staticinvoke <java.lang.Class: sun.reflect.ReflectionFactory getReflectionFactory()>();
        i0 = 0;

     label0:
        $i1 = lengthof r1;
        if i0 >= $i1 goto label1;

        $r4 = r1[i0];
        $r5 = virtualinvoke r2.<sun.reflect.ReflectionFactory: java.lang.reflect.Constructor copyConstructor(java.lang.reflect.Constructor)>($r4);
        r1[i0] = $r5;
        i0 = i0 + 1;
        goto label0;

     label1:
        return r1;
    }

    private native java.lang.reflect.Field[] getDeclaredFields0(boolean);

    private native java.lang.reflect.Method[] getDeclaredMethods0(boolean);

    private native java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean);

    private native java.lang.Class[] getDeclaredClasses0();

    private static java.lang.String argumentTypesToString(java.lang.Class[])
    {
        java.lang.Class[] r0;
        java.lang.StringBuilder $r1, r2;
        int i0, $i1;
        java.lang.Class r3;
        java.lang.String $r7, $r10;

        r0 := @parameter0: java.lang.Class[];
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");
        if r0 == null goto label4;

        i0 = 0;

     label0:
        $i1 = lengthof r0;
        if i0 >= $i1 goto label4;

        if i0 <= 0 goto label1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label1:
        r3 = r0[i0];
        if r3 != null goto label2;

        $r7 = "null";
        goto label3;

     label2:
        $r7 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

     label3:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        i0 = i0 + 1;
        goto label0;

     label4:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r10 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r10;
    }

    public boolean desiredAssertionStatus()
    {
        java.lang.Class r0;
        java.lang.ClassLoader r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        boolean $z0, $z1, $z2;
        java.util.Map $r5;
        java.lang.String $r6;

        r0 := @this: java.lang.Class;
        r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        if r1 != null goto label0;

        $z0 = staticinvoke <java.lang.Class: boolean desiredAssertionStatus0(java.lang.Class)>(r0);
        return $z0;

     label0:
        $r4 = r1.<java.lang.ClassLoader: java.lang.Object assertionLock>;
        r2 = $r4;
        entermonitor $r4;

     label1:
        $r5 = r1.<java.lang.ClassLoader: java.util.Map classAssertionStatus>;
        if $r5 == null goto label3;

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        $z1 = virtualinvoke r1.<java.lang.ClassLoader: boolean desiredAssertionStatus(java.lang.String)>($r6);
        exitmonitor r2;

     label2:
        return $z1;

     label3:
        exitmonitor r2;

     label4:
        goto label8;

     label5:
        $r7 := @caughtexception;

     label6:
        r3 = $r7;
        exitmonitor r2;

     label7:
        throw r3;

     label8:
        $z2 = staticinvoke <java.lang.Class: boolean desiredAssertionStatus0(java.lang.Class)>(r0);
        return $z2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private static native boolean desiredAssertionStatus0(java.lang.Class);

    public boolean isEnum()
    {
        java.lang.Class r0, $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.lang.Class;
        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();
        $i1 = $i0 & 16384;
        if $i1 == 0 goto label0;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();
        if $r1 != class "java/lang/Enum" goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private static sun.reflect.ReflectionFactory getReflectionFactory()
    {
        sun.reflect.ReflectionFactory $r0, $r3, $r4;
        sun.reflect.ReflectionFactory$GetReflectionFactoryAction $r1;
        java.lang.Object $r2;

        $r0 = <java.lang.Class: sun.reflect.ReflectionFactory reflectionFactory>;
        if $r0 != null goto label0;

        $r1 = new sun.reflect.ReflectionFactory$GetReflectionFactoryAction;
        specialinvoke $r1.<sun.reflect.ReflectionFactory$GetReflectionFactoryAction: void <init>()>();
        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        $r3 = (sun.reflect.ReflectionFactory) $r2;
        <java.lang.Class: sun.reflect.ReflectionFactory reflectionFactory> = $r3;

     label0:
        $r4 = <java.lang.Class: sun.reflect.ReflectionFactory reflectionFactory>;
        return $r4;
    }

    private static void checkInitted()
    {
        boolean $z0;
        java.lang.Class$3 $r0;

        $z0 = <java.lang.Class: boolean initted>;
        if $z0 == 0 goto label0;

        return;

     label0:
        $r0 = new java.lang.Class$3;
        specialinvoke $r0.<java.lang.Class$3: void <init>()>();
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        return;
    }

    public java.lang.Object[] getEnumConstants()
    {
        java.lang.Class r0;
        java.lang.Object[] r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.lang.Class;
        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Object[] getEnumConstantsShared()>();
        if r1 == null goto label0;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (java.lang.Object[]) $r2;
        goto label1;

     label0:
        $r3 = null;

     label1:
        return $r3;
    }

    java.lang.Object[] getEnumConstantsShared()
    {
        java.lang.Class r0;
        java.lang.reflect.Method r1;
        java.lang.Object[] $r2, $r6, $r8, $r9, $r16;
        boolean $z0;
        java.lang.Class[] $r3;
        java.lang.Class$4 $r4;
        java.lang.Object $r7;
        java.lang.reflect.InvocationTargetException $r10, r11;
        java.lang.NoSuchMethodException $r12, r13;
        java.lang.IllegalAccessException $r14, r15;

        r0 := @this: java.lang.Class;
        $r2 = r0.<java.lang.Class: java.lang.Object[] enumConstants>;
        if $r2 != null goto label5;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isEnum()>();
        if $z0 != 0 goto label0;

        return null;

     label0:
        $r3 = newarray (java.lang.Class)[0];
        r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("values", $r3);
        $r4 = new java.lang.Class$4;
        specialinvoke $r4.<java.lang.Class$4: void <init>(java.lang.Class,java.lang.reflect.Method)>(r0, r1);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r4);
        $r6 = newarray (java.lang.Object)[0];
        $r7 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r6);
        $r8 = (java.lang.Object[]) $r7;
        $r9 = (java.lang.Object[]) $r8;
        r0.<java.lang.Class: java.lang.Object[] enumConstants> = $r9;

     label1:
        goto label5;

     label2:
        $r10 := @caughtexception;
        r11 = $r10;
        return null;

     label3:
        $r12 := @caughtexception;
        r13 = $r12;
        return null;

     label4:
        $r14 := @caughtexception;
        r15 = $r14;
        return null;

     label5:
        $r16 = r0.<java.lang.Class: java.lang.Object[] enumConstants>;
        return $r16;

        catch java.lang.reflect.InvocationTargetException from label0 to label1 with label2;
        catch java.lang.NoSuchMethodException from label0 to label1 with label3;
        catch java.lang.IllegalAccessException from label0 to label1 with label4;
    }

    java.util.Map enumConstantDirectory()
    {
        java.lang.Class r0;
        java.lang.Object[] r1, r4;
        java.lang.StringBuilder $r2, $r9, $r10;
        java.util.HashMap r3, $r12;
        int i0, i1, $i2, $i3;
        java.lang.Object r5;
        java.util.Map $r6, $r16;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r8, $r11, $r14;
        java.lang.Enum $r13;

        r0 := @this: java.lang.Class;
        $r6 = r0.<java.lang.Class: java.util.Map enumConstantDirectory>;
        if $r6 != null goto label3;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Object[] getEnumConstantsShared()>();
        if r1 != null goto label0;

        $r7 = new java.lang.IllegalArgumentException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not an enum type");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);
        throw $r7;

     label0:
        $r12 = new java.util.HashMap;
        $i2 = lengthof r1;
        $i3 = 2 * $i2;
        specialinvoke $r12.<java.util.HashMap: void <init>(int)>($i3);
        r3 = $r12;
        r4 = r1;
        i0 = lengthof r4;
        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r5 = r4[i1];
        $r13 = (java.lang.Enum) r5;
        $r14 = virtualinvoke $r13.<java.lang.Enum: java.lang.String name()>();
        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r5);
        i1 = i1 + 1;
        goto label1;

     label2:
        r0.<java.lang.Class: java.util.Map enumConstantDirectory> = r3;

     label3:
        $r16 = r0.<java.lang.Class: java.util.Map enumConstantDirectory>;
        return $r16;
    }

    public java.lang.Object cast(java.lang.Object)
    {
        java.lang.Class r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.ClassCastException $r2;
        java.lang.String $r3;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.Object;
        if r1 == null goto label0;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);
        if $z0 != 0 goto label0;

        $r2 = new java.lang.ClassCastException;
        $r3 = specialinvoke r0.<java.lang.Class: java.lang.String cannotCastMsg(java.lang.Object)>(r1);
        specialinvoke $r2.<java.lang.ClassCastException: void <init>(java.lang.String)>($r3);
        throw $r2;

     label0:
        return r1;
    }

    private java.lang.String cannotCastMsg(java.lang.Object)
    {
        java.lang.Class r0, $r4;
        java.lang.Object r1;
        java.lang.StringBuilder $r2, $r3, $r6, $r7, $r9;
        java.lang.String $r5, $r8, $r10;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.Object;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot cast ");
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();
        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");
        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r10;
    }

    public java.lang.Class asSubclass(java.lang.Class)
    {
        java.lang.Class r0, r1;
        boolean $z0;
        java.lang.ClassCastException $r2;
        java.lang.String $r3;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.Class;
        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);
        if $z0 == 0 goto label0;

        return r0;

     label0:
        $r2 = new java.lang.ClassCastException;
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.ClassCastException: void <init>(java.lang.String)>($r3);
        throw $r2;
    }

    public java.lang.annotation.Annotation getAnnotation(java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.lang.NullPointerException $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.annotation.Annotation $r5;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.Class;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        specialinvoke r0.<java.lang.Class: void initAnnotationsIfNecessary()>();
        $r3 = r0.<java.lang.Class: java.util.Map annotations>;
        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        $r5 = (java.lang.annotation.Annotation) $r4;
        return $r5;
    }

    public boolean isAnnotationPresent(java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.lang.NullPointerException $r2;
        java.lang.annotation.Annotation $r3;
        boolean $z0;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: java.lang.Class;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(r1);
        if $r3 == null goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.annotation.Annotation[] getAnnotations()
    {
        java.lang.Class r0;
        java.util.Map $r1;
        java.lang.annotation.Annotation[] $r2;

        r0 := @this: java.lang.Class;
        specialinvoke r0.<java.lang.Class: void initAnnotationsIfNecessary()>();
        $r1 = r0.<java.lang.Class: java.util.Map annotations>;
        $r2 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[] toArray(java.util.Map)>($r1);
        return $r2;
    }

    public java.lang.annotation.Annotation[] getDeclaredAnnotations()
    {
        java.lang.Class r0;
        java.util.Map $r1;
        java.lang.annotation.Annotation[] $r2;

        r0 := @this: java.lang.Class;
        specialinvoke r0.<java.lang.Class: void initAnnotationsIfNecessary()>();
        $r1 = r0.<java.lang.Class: java.util.Map declaredAnnotations>;
        $r2 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.lang.annotation.Annotation[] toArray(java.util.Map)>($r1);
        return $r2;
    }

    private void clearAnnotationCachesOnClassRedefinition()
    {
        java.lang.Class r0;
        null_type $n0;
        int $i0, $i1, $i2;

        r0 := @this: java.lang.Class;
        $i0 = r0.<java.lang.Class: int lastAnnotationsRedefinedCount>;
        $i1 = r0.<java.lang.Class: int classRedefinedCount>;
        if $i0 == $i1 goto label0;

        $n0 = null;
        r0.<java.lang.Class: java.util.Map declaredAnnotations> = $n0;
        r0.<java.lang.Class: java.util.Map annotations> = $n0;
        $i2 = r0.<java.lang.Class: int classRedefinedCount>;
        r0.<java.lang.Class: int lastAnnotationsRedefinedCount> = $i2;

     label0:
        return;
    }

    private synchronized void initAnnotationsIfNecessary()
    {
        java.lang.Class r0, r1, r4;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Map $r5, $r8, $r9, $r11, $r16, $r19, $r20;
        byte[] $r6;
        sun.reflect.ConstantPool $r7;
        java.util.HashMap $r10;
        java.util.Set $r12;
        boolean $z0, $z1;
        java.lang.Object $r13, $r14, $r17;
        sun.reflect.annotation.AnnotationType $r15;

        r0 := @this: java.lang.Class;
        specialinvoke r0.<java.lang.Class: void clearAnnotationCachesOnClassRedefinition()>();
        $r5 = r0.<java.lang.Class: java.util.Map annotations>;
        if $r5 == null goto label0;

        return;

     label0:
        $r6 = virtualinvoke r0.<java.lang.Class: byte[] getRawAnnotations()>();
        $r7 = virtualinvoke r0.<java.lang.Class: sun.reflect.ConstantPool getConstantPool()>();
        $r8 = staticinvoke <sun.reflect.annotation.AnnotationParser: java.util.Map parseAnnotations(byte[],sun.reflect.ConstantPool,java.lang.Class)>($r6, $r7, r0);
        r0.<java.lang.Class: java.util.Map declaredAnnotations> = $r8;
        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();
        if r1 != null goto label1;

        $r9 = r0.<java.lang.Class: java.util.Map declaredAnnotations>;
        r0.<java.lang.Class: java.util.Map annotations> = $r9;
        goto label5;

     label1:
        $r10 = new java.util.HashMap;
        specialinvoke $r10.<java.util.HashMap: void <init>()>();
        r0.<java.lang.Class: java.util.Map annotations> = $r10;
        specialinvoke r1.<java.lang.Class: void initAnnotationsIfNecessary()>();
        $r11 = r1.<java.lang.Class: java.util.Map annotations>;
        $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set entrySet()>();
        r2 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label4;

        $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.Map$Entry) $r13;
        $r14 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();
        r4 = (java.lang.Class) $r14;
        $r15 = staticinvoke <sun.reflect.annotation.AnnotationType: sun.reflect.annotation.AnnotationType getInstance(java.lang.Class)>(r4);
        $z1 = virtualinvoke $r15.<sun.reflect.annotation.AnnotationType: boolean isInherited()>();
        if $z1 == 0 goto label3;

        $r16 = r0.<java.lang.Class: java.util.Map annotations>;
        $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();
        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r17);

     label3:
        goto label2;

     label4:
        $r19 = r0.<java.lang.Class: java.util.Map annotations>;
        $r20 = r0.<java.lang.Class: java.util.Map declaredAnnotations>;
        interfaceinvoke $r19.<java.util.Map: void putAll(java.util.Map)>($r20);

     label5:
        return;
    }

    boolean casAnnotationType(sun.reflect.annotation.AnnotationType, sun.reflect.annotation.AnnotationType)
    {
        java.lang.Class r0;
        sun.reflect.annotation.AnnotationType r1, r2;
        boolean $z0;

        r0 := @this: java.lang.Class;
        r1 := @parameter0: sun.reflect.annotation.AnnotationType;
        r2 := @parameter1: sun.reflect.annotation.AnnotationType;
        $z0 = staticinvoke <java.lang.Class$Atomic: boolean casAnnotationType(java.lang.Class,sun.reflect.annotation.AnnotationType,sun.reflect.annotation.AnnotationType)>(r0, r1, r2);
        return $z0;
    }

    sun.reflect.annotation.AnnotationType getAnnotationType()
    {
        java.lang.Class r0;
        sun.reflect.annotation.AnnotationType $r1;

        r0 := @this: java.lang.Class;
        $r1 = r0.<java.lang.Class: sun.reflect.annotation.AnnotationType annotationType>;
        return $r1;
    }

    static java.lang.reflect.Method access$100(java.lang.Class) throws java.lang.NoSuchMethodError
    {
        java.lang.Class r0;
        java.lang.reflect.Method $r1;

        r0 := @parameter0: java.lang.Class;
        $r1 = staticinvoke <java.lang.Class: java.lang.reflect.Method getCheckMemberAccessMethod(java.lang.Class)>(r0);
        return $r1;
    }

    static java.lang.reflect.Field[] access$200(java.lang.Class, boolean)
    {
        java.lang.Class r0;
        boolean z0;
        java.lang.reflect.Field[] $r1;

        r0 := @parameter0: java.lang.Class;
        z0 := @parameter1: boolean;
        $r1 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields0(boolean)>(z0);
        return $r1;
    }

    static java.lang.reflect.Field access$300(java.lang.reflect.Field[], java.lang.String)
    {
        java.lang.reflect.Field[] r0;
        java.lang.String r1;
        java.lang.reflect.Field $r2;

        r0 := @parameter0: java.lang.reflect.Field[];
        r1 := @parameter1: java.lang.String;
        $r2 = staticinvoke <java.lang.Class: java.lang.reflect.Field searchFields(java.lang.reflect.Field[],java.lang.String)>(r0, r1);
        return $r2;
    }

    static boolean access$400(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];
        r1 := @parameter1: java.lang.Object[];
        $z0 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(r0, r1);
        return $z0;
    }

    static boolean access$502(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;
        <java.lang.Class: boolean useCaches> = z0;
        return z0;
    }

    static boolean access$602(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;
        <java.lang.Class: boolean initted> = z0;
        return z0;
    }

    static void <clinit>()
    {
        java.io.ObjectStreamField[] $r0;

        staticinvoke <java.lang.Class: void registerNatives()>();
        <java.lang.Class: boolean useCaches> = 1;
        $r0 = newarray (java.io.ObjectStreamField)[0];
        <java.lang.Class: java.io.ObjectStreamField[] serialPersistentFields> = $r0;
        <java.lang.Class: boolean initted> = 0;
        return;
    }
}
