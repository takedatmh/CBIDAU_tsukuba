public class javax.crypto.spec.DESKeySpec extends java.lang.Object implements java.security.spec.KeySpec
{
    public static final int DES_KEY_LEN;
    private byte[] key;
    private static final byte[][] WEAK_KEYS;

    public void <init>(byte[]) throws java.security.InvalidKeyException
    {
        javax.crypto.spec.DESKeySpec r0;
        byte[] r1;

        r0 := @this: javax.crypto.spec.DESKeySpec;
        r1 := @parameter0: byte[];
        specialinvoke r0.<javax.crypto.spec.DESKeySpec: void <init>(byte[],int)>(r1, 0);
        return;
    }

    public void <init>(byte[], int) throws java.security.InvalidKeyException
    {
        javax.crypto.spec.DESKeySpec r0;
        byte[] r1, $r3, $r4;
        int i0, $i1, $i2;
        java.security.InvalidKeyException $r2;

        r0 := @this: javax.crypto.spec.DESKeySpec;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $i1 = lengthof r1;
        $i2 = $i1 - i0;
        if $i2 >= 8 goto label0;

        $r2 = new java.security.InvalidKeyException;
        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Wrong key size");
        throw $r2;

     label0:
        $r3 = newarray (byte)[8];
        r0.<javax.crypto.spec.DESKeySpec: byte[] key> = $r3;
        $r4 = r0.<javax.crypto.spec.DESKeySpec: byte[] key>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r4, 0, 8);
        return;
    }

    public byte[] getKey()
    {
        javax.crypto.spec.DESKeySpec r0;
        byte[] $r1, $r3, $r4;
        java.lang.Object $r2;

        r0 := @this: javax.crypto.spec.DESKeySpec;
        $r1 = r0.<javax.crypto.spec.DESKeySpec: byte[] key>;
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (byte[]) $r2;
        $r4 = (byte[]) $r3;
        return $r4;
    }

    public static boolean isParityAdjusted(byte[], int) throws java.security.InvalidKeyException
    {
        byte[] r0;
        int i0, i1, i2, $i3, $i4, $i5, $i8;
        java.security.InvalidKeyException $r1, $r2;
        byte $b6;
        short $s7;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        if r0 != null goto label0;

        $r1 = new java.security.InvalidKeyException;
        specialinvoke $r1.<java.security.InvalidKeyException: void <init>(java.lang.String)>("null key");
        throw $r1;

     label0:
        $i3 = lengthof r0;
        $i4 = $i3 - i0;
        if $i4 >= 8 goto label1;

        $r2 = new java.security.InvalidKeyException;
        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Wrong key size");
        throw $r2;

     label1:
        i1 = 0;

     label2:
        if i1 >= 8 goto label4;

        $i5 = i0;
        i0 = i0 + 1;
        $b6 = r0[$i5];
        $s7 = $b6 & 255;
        i2 = staticinvoke <java.lang.Integer: int bitCount(int)>($s7);
        $i8 = i2 & 1;
        if $i8 != 0 goto label3;

        return 0;

     label3:
        i1 = i1 + 1;
        goto label2;

     label4:
        return 1;
    }

    public static boolean isWeak(byte[], int) throws java.security.InvalidKeyException
    {
        byte[] r0, $r5;
        int i0, i1, i2, $i3, $i4, $i5, $i7;
        boolean z0;
        java.security.InvalidKeyException $r1, $r2;
        byte[][] $r3, $r4;
        byte $b6, $b8;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        if r0 != null goto label0;

        $r1 = new java.security.InvalidKeyException;
        specialinvoke $r1.<java.security.InvalidKeyException: void <init>(java.lang.String)>("null key");
        throw $r1;

     label0:
        $i3 = lengthof r0;
        $i4 = $i3 - i0;
        if $i4 >= 8 goto label1;

        $r2 = new java.security.InvalidKeyException;
        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Wrong key size");
        throw $r2;

     label1:
        i1 = 0;

     label2:
        $r3 = <javax.crypto.spec.DESKeySpec: byte[][] WEAK_KEYS>;
        $i5 = lengthof $r3;
        if i1 >= $i5 goto label7;

        z0 = 1;
        i2 = 0;

     label3:
        if i2 >= 8 goto label5;

        if z0 != 1 goto label5;

        $r4 = <javax.crypto.spec.DESKeySpec: byte[][] WEAK_KEYS>;
        $r5 = $r4[i1];
        $b6 = $r5[i2];
        $i7 = i2 + i0;
        $b8 = r0[$i7];
        if $b6 == $b8 goto label4;

        z0 = 0;

     label4:
        i2 = i2 + 1;
        goto label3;

     label5:
        if z0 != 1 goto label6;

        return z0;

     label6:
        i1 = i1 + 1;
        goto label2;

     label7:
        return 0;
    }

    static void <clinit>()
    {
        byte[][] $r0;
        byte[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;

        $r0 = newarray (byte[])[16];
        $r1 = newarray (byte)[8];
        $r1[0] = 1;
        $r1[1] = 1;
        $r1[2] = 1;
        $r1[3] = 1;
        $r1[4] = 1;
        $r1[5] = 1;
        $r1[6] = 1;
        $r1[7] = 1;
        $r0[0] = $r1;
        $r2 = newarray (byte)[8];
        $r2[0] = -2;
        $r2[1] = -2;
        $r2[2] = -2;
        $r2[3] = -2;
        $r2[4] = -2;
        $r2[5] = -2;
        $r2[6] = -2;
        $r2[7] = -2;
        $r0[1] = $r2;
        $r3 = newarray (byte)[8];
        $r3[0] = 31;
        $r3[1] = 31;
        $r3[2] = 31;
        $r3[3] = 31;
        $r3[4] = 14;
        $r3[5] = 14;
        $r3[6] = 14;
        $r3[7] = 14;
        $r0[2] = $r3;
        $r4 = newarray (byte)[8];
        $r4[0] = -32;
        $r4[1] = -32;
        $r4[2] = -32;
        $r4[3] = -32;
        $r4[4] = -15;
        $r4[5] = -15;
        $r4[6] = -15;
        $r4[7] = -15;
        $r0[3] = $r4;
        $r5 = newarray (byte)[8];
        $r5[0] = 1;
        $r5[1] = -2;
        $r5[2] = 1;
        $r5[3] = -2;
        $r5[4] = 1;
        $r5[5] = -2;
        $r5[6] = 1;
        $r5[7] = -2;
        $r0[4] = $r5;
        $r6 = newarray (byte)[8];
        $r6[0] = 31;
        $r6[1] = -32;
        $r6[2] = 31;
        $r6[3] = -32;
        $r6[4] = 14;
        $r6[5] = -15;
        $r6[6] = 14;
        $r6[7] = -15;
        $r0[5] = $r6;
        $r7 = newarray (byte)[8];
        $r7[0] = 1;
        $r7[1] = -32;
        $r7[2] = 1;
        $r7[3] = -32;
        $r7[4] = 1;
        $r7[5] = -15;
        $r7[6] = 1;
        $r7[7] = -15;
        $r0[6] = $r7;
        $r8 = newarray (byte)[8];
        $r8[0] = 31;
        $r8[1] = -2;
        $r8[2] = 31;
        $r8[3] = -2;
        $r8[4] = 14;
        $r8[5] = -2;
        $r8[6] = 14;
        $r8[7] = -2;
        $r0[7] = $r8;
        $r9 = newarray (byte)[8];
        $r9[0] = 1;
        $r9[1] = 31;
        $r9[2] = 1;
        $r9[3] = 31;
        $r9[4] = 1;
        $r9[5] = 14;
        $r9[6] = 1;
        $r9[7] = 14;
        $r0[8] = $r9;
        $r10 = newarray (byte)[8];
        $r10[0] = -32;
        $r10[1] = -2;
        $r10[2] = -32;
        $r10[3] = -2;
        $r10[4] = -15;
        $r10[5] = -2;
        $r10[6] = -15;
        $r10[7] = -2;
        $r0[9] = $r10;
        $r11 = newarray (byte)[8];
        $r11[0] = -2;
        $r11[1] = 1;
        $r11[2] = -2;
        $r11[3] = 1;
        $r11[4] = -2;
        $r11[5] = 1;
        $r11[6] = -2;
        $r11[7] = 1;
        $r0[10] = $r11;
        $r12 = newarray (byte)[8];
        $r12[0] = -32;
        $r12[1] = 31;
        $r12[2] = -32;
        $r12[3] = 31;
        $r12[4] = -15;
        $r12[5] = 14;
        $r12[6] = -15;
        $r12[7] = 14;
        $r0[11] = $r12;
        $r13 = newarray (byte)[8];
        $r13[0] = -32;
        $r13[1] = 1;
        $r13[2] = -32;
        $r13[3] = 1;
        $r13[4] = -15;
        $r13[5] = 1;
        $r13[6] = -15;
        $r13[7] = 1;
        $r0[12] = $r13;
        $r14 = newarray (byte)[8];
        $r14[0] = -2;
        $r14[1] = 31;
        $r14[2] = -2;
        $r14[3] = 31;
        $r14[4] = -2;
        $r14[5] = 14;
        $r14[6] = -2;
        $r14[7] = 14;
        $r0[13] = $r14;
        $r15 = newarray (byte)[8];
        $r15[0] = 31;
        $r15[1] = 1;
        $r15[2] = 31;
        $r15[3] = 1;
        $r15[4] = 14;
        $r15[5] = 1;
        $r15[6] = 14;
        $r15[7] = 1;
        $r0[14] = $r15;
        $r16 = newarray (byte)[8];
        $r16[0] = -2;
        $r16[1] = -32;
        $r16[2] = -2;
        $r16[3] = -32;
        $r16[4] = -2;
        $r16[5] = -15;
        $r16[6] = -2;
        $r16[7] = -15;
        $r0[15] = $r16;
        <javax.crypto.spec.DESKeySpec: byte[][] WEAK_KEYS> = $r0;
        return;
    }
}
