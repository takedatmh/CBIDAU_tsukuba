public final class sun.security.ec.ECKeyFactory extends java.security.KeyFactorySpi
{
    public static final java.security.KeyFactory INSTANCE;
    public static final java.security.Provider ecInternalProvider;

    public void <init>()
    {
        sun.security.ec.ECKeyFactory r0;

        r0 := @this: sun.security.ec.ECKeyFactory;
        specialinvoke r0.<java.security.KeyFactorySpi: void <init>()>();
        return;
    }

    public static java.security.interfaces.ECKey toECKey(java.security.Key) throws java.security.InvalidKeyException
    {
        java.security.Key r0, $r3;
        java.security.interfaces.ECKey r1, $r4;
        boolean $z0;
        java.security.KeyFactory $r2;

        r0 := @parameter0: java.security.Key;
        $z0 = r0 instanceof java.security.interfaces.ECKey;
        if $z0 == 0 goto label0;

        r1 = (java.security.interfaces.ECKey) r0;
        staticinvoke <sun.security.ec.ECKeyFactory: void checkKey(java.security.interfaces.ECKey)>(r1);
        return r1;

     label0:
        $r2 = <sun.security.ec.ECKeyFactory: java.security.KeyFactory INSTANCE>;
        $r3 = virtualinvoke $r2.<java.security.KeyFactory: java.security.Key translateKey(java.security.Key)>(r0);
        $r4 = (java.security.interfaces.ECKey) $r3;
        return $r4;
    }

    private static void checkKey(java.security.interfaces.ECKey) throws java.security.InvalidKeyException
    {
        java.security.interfaces.ECKey r0;
        java.lang.String r1, $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.security.InvalidKeyException $r2, $r4;
        java.security.Key $r3;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @parameter0: java.security.interfaces.ECKey;
        $z0 = r0 instanceof java.security.interfaces.ECPublicKey;
        if $z0 == 0 goto label0;

        $z1 = r0 instanceof sun.security.ec.ECPublicKeyImpl;
        if $z1 == 0 goto label2;

        return;

     label0:
        $z2 = r0 instanceof java.security.interfaces.ECPrivateKey;
        if $z2 == 0 goto label1;

        $z3 = r0 instanceof sun.security.ec.ECPrivateKeyImpl;
        if $z3 == 0 goto label2;

        return;

     label1:
        $r2 = new java.security.InvalidKeyException;
        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Neither a public nor a private key");
        throw $r2;

     label2:
        $r3 = (java.security.Key) r0;
        r1 = interfaceinvoke $r3.<java.security.Key: java.lang.String getAlgorithm()>();
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("EC");
        if $z4 != 0 goto label3;

        $r4 = new java.security.InvalidKeyException;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not an EC key: ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r8);
        throw $r4;

     label3:
        return;
    }

    protected java.security.Key engineTranslateKey(java.security.Key) throws java.security.InvalidKeyException
    {
        sun.security.ec.ECKeyFactory r0;
        java.security.Key r1;
        java.lang.String r2, $r8;
        java.security.InvalidKeyException $r3, $r4, $r13;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.security.PublicKey $r9, $r10;
        java.security.PrivateKey $r11, $r12;

        r0 := @this: sun.security.ec.ECKeyFactory;
        r1 := @parameter0: java.security.Key;
        if r1 != null goto label0;

        $r3 = new java.security.InvalidKeyException;
        specialinvoke $r3.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Key must not be null");
        throw $r3;

     label0:
        r2 = interfaceinvoke r1.<java.security.Key: java.lang.String getAlgorithm()>();
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("EC");
        if $z0 != 0 goto label1;

        $r4 = new java.security.InvalidKeyException;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not an EC key: ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r8);
        throw $r4;

     label1:
        $z1 = r1 instanceof java.security.PublicKey;
        if $z1 == 0 goto label2;

        $r9 = (java.security.PublicKey) r1;
        $r10 = specialinvoke r0.<sun.security.ec.ECKeyFactory: java.security.PublicKey implTranslatePublicKey(java.security.PublicKey)>($r9);
        return $r10;

     label2:
        $z2 = r1 instanceof java.security.PrivateKey;
        if $z2 == 0 goto label3;

        $r11 = (java.security.PrivateKey) r1;
        $r12 = specialinvoke r0.<sun.security.ec.ECKeyFactory: java.security.PrivateKey implTranslatePrivateKey(java.security.PrivateKey)>($r11);
        return $r12;

     label3:
        $r13 = new java.security.InvalidKeyException;
        specialinvoke $r13.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Neither a public nor a private key");
        throw $r13;
    }

    protected java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        sun.security.ec.ECKeyFactory r0;
        java.security.spec.KeySpec r1;
        java.security.spec.InvalidKeySpecException r2, $r4, $r7;
        java.security.PublicKey $r3;
        java.security.GeneralSecurityException $r5, r6;

        r0 := @this: sun.security.ec.ECKeyFactory;
        r1 := @parameter0: java.security.spec.KeySpec;

     label0:
        $r3 = specialinvoke r0.<sun.security.ec.ECKeyFactory: java.security.PublicKey implGeneratePublic(java.security.spec.KeySpec)>(r1);

     label1:
        return $r3;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        throw r2;

     label3:
        $r5 := @caughtexception;
        r6 = $r5;
        $r7 = new java.security.spec.InvalidKeySpecException;
        specialinvoke $r7.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.Throwable)>(r6);
        throw $r7;

        catch java.security.spec.InvalidKeySpecException from label0 to label1 with label2;
        catch java.security.GeneralSecurityException from label0 to label1 with label3;
    }

    protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        sun.security.ec.ECKeyFactory r0;
        java.security.spec.KeySpec r1;
        java.security.spec.InvalidKeySpecException r2, $r4, $r7;
        java.security.PrivateKey $r3;
        java.security.GeneralSecurityException $r5, r6;

        r0 := @this: sun.security.ec.ECKeyFactory;
        r1 := @parameter0: java.security.spec.KeySpec;

     label0:
        $r3 = specialinvoke r0.<sun.security.ec.ECKeyFactory: java.security.PrivateKey implGeneratePrivate(java.security.spec.KeySpec)>(r1);

     label1:
        return $r3;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        throw r2;

     label3:
        $r5 := @caughtexception;
        r6 = $r5;
        $r7 = new java.security.spec.InvalidKeySpecException;
        specialinvoke $r7.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.Throwable)>(r6);
        throw $r7;

        catch java.security.spec.InvalidKeySpecException from label0 to label1 with label2;
        catch java.security.GeneralSecurityException from label0 to label1 with label3;
    }

    private java.security.PublicKey implTranslatePublicKey(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        sun.security.ec.ECKeyFactory r0;
        java.security.PublicKey r1;
        java.security.interfaces.ECPublicKey r2;
        boolean $z0, $z1, $z2;
        sun.security.ec.ECPublicKeyImpl $r3, $r9;
        java.security.spec.ECPoint $r4;
        java.security.spec.ECParameterSpec $r5;
        java.lang.String $r6, $r7;
        byte[] r8;
        java.security.InvalidKeyException $r10;

        r0 := @this: sun.security.ec.ECKeyFactory;
        r1 := @parameter0: java.security.PublicKey;
        $z0 = r1 instanceof java.security.interfaces.ECPublicKey;
        if $z0 == 0 goto label1;

        $z1 = r1 instanceof sun.security.ec.ECPublicKeyImpl;
        if $z1 == 0 goto label0;

        return r1;

     label0:
        r2 = (java.security.interfaces.ECPublicKey) r1;
        $r3 = new sun.security.ec.ECPublicKeyImpl;
        $r4 = interfaceinvoke r2.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();
        $r5 = interfaceinvoke r2.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();
        specialinvoke $r3.<sun.security.ec.ECPublicKeyImpl: void <init>(java.security.spec.ECPoint,java.security.spec.ECParameterSpec)>($r4, $r5);
        return $r3;

     label1:
        $r6 = "X.509";
        $r7 = interfaceinvoke r1.<java.security.PublicKey: java.lang.String getFormat()>();
        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);
        if $z2 == 0 goto label2;

        r8 = interfaceinvoke r1.<java.security.PublicKey: byte[] getEncoded()>();
        $r9 = new sun.security.ec.ECPublicKeyImpl;
        specialinvoke $r9.<sun.security.ec.ECPublicKeyImpl: void <init>(byte[])>(r8);
        return $r9;

     label2:
        $r10 = new java.security.InvalidKeyException;
        specialinvoke $r10.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Public keys must be instance of ECPublicKey or have X.509 encoding");
        throw $r10;
    }

    private java.security.PrivateKey implTranslatePrivateKey(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        sun.security.ec.ECKeyFactory r0;
        java.security.PrivateKey r1;
        java.security.interfaces.ECPrivateKey r2;
        boolean $z0, $z1, $z2;
        sun.security.ec.ECPrivateKeyImpl $r3, $r8;
        java.math.BigInteger $r4;
        java.security.spec.ECParameterSpec $r5;
        java.lang.String $r6, $r7;
        byte[] $r9;
        java.security.InvalidKeyException $r10;

        r0 := @this: sun.security.ec.ECKeyFactory;
        r1 := @parameter0: java.security.PrivateKey;
        $z0 = r1 instanceof java.security.interfaces.ECPrivateKey;
        if $z0 == 0 goto label1;

        $z1 = r1 instanceof sun.security.ec.ECPrivateKeyImpl;
        if $z1 == 0 goto label0;

        return r1;

     label0:
        r2 = (java.security.interfaces.ECPrivateKey) r1;
        $r3 = new sun.security.ec.ECPrivateKeyImpl;
        $r4 = interfaceinvoke r2.<java.security.interfaces.ECPrivateKey: java.math.BigInteger getS()>();
        $r5 = interfaceinvoke r2.<java.security.interfaces.ECPrivateKey: java.security.spec.ECParameterSpec getParams()>();
        specialinvoke $r3.<sun.security.ec.ECPrivateKeyImpl: void <init>(java.math.BigInteger,java.security.spec.ECParameterSpec)>($r4, $r5);
        return $r3;

     label1:
        $r6 = "PKCS#8";
        $r7 = interfaceinvoke r1.<java.security.PrivateKey: java.lang.String getFormat()>();
        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);
        if $z2 == 0 goto label2;

        $r8 = new sun.security.ec.ECPrivateKeyImpl;
        $r9 = interfaceinvoke r1.<java.security.PrivateKey: byte[] getEncoded()>();
        specialinvoke $r8.<sun.security.ec.ECPrivateKeyImpl: void <init>(byte[])>($r9);
        return $r8;

     label2:
        $r10 = new java.security.InvalidKeyException;
        specialinvoke $r10.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Private keys must be instance of ECPrivateKey or have PKCS#8 encoding");
        throw $r10;
    }

    private java.security.PublicKey implGeneratePublic(java.security.spec.KeySpec) throws java.security.GeneralSecurityException
    {
        sun.security.ec.ECKeyFactory r0;
        java.security.spec.KeySpec r1;
        java.security.spec.X509EncodedKeySpec r2;
        boolean $z0, $z1;
        sun.security.ec.ECPublicKeyImpl $r3, $r6;
        byte[] $r4;
        java.security.spec.ECPublicKeySpec r5;
        java.security.spec.ECPoint $r7;
        java.security.spec.ECParameterSpec $r8;
        java.security.spec.InvalidKeySpecException $r9;

        r0 := @this: sun.security.ec.ECKeyFactory;
        r1 := @parameter0: java.security.spec.KeySpec;
        $z0 = r1 instanceof java.security.spec.X509EncodedKeySpec;
        if $z0 == 0 goto label0;

        r2 = (java.security.spec.X509EncodedKeySpec) r1;
        $r3 = new sun.security.ec.ECPublicKeyImpl;
        $r4 = virtualinvoke r2.<java.security.spec.X509EncodedKeySpec: byte[] getEncoded()>();
        specialinvoke $r3.<sun.security.ec.ECPublicKeyImpl: void <init>(byte[])>($r4);
        return $r3;

     label0:
        $z1 = r1 instanceof java.security.spec.ECPublicKeySpec;
        if $z1 == 0 goto label1;

        r5 = (java.security.spec.ECPublicKeySpec) r1;
        $r6 = new sun.security.ec.ECPublicKeyImpl;
        $r7 = virtualinvoke r5.<java.security.spec.ECPublicKeySpec: java.security.spec.ECPoint getW()>();
        $r8 = virtualinvoke r5.<java.security.spec.ECPublicKeySpec: java.security.spec.ECParameterSpec getParams()>();
        specialinvoke $r6.<sun.security.ec.ECPublicKeyImpl: void <init>(java.security.spec.ECPoint,java.security.spec.ECParameterSpec)>($r7, $r8);
        return $r6;

     label1:
        $r9 = new java.security.spec.InvalidKeySpecException;
        specialinvoke $r9.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Only ECPublicKeySpec and X509EncodedKeySpec supported for EC public keys");
        throw $r9;
    }

    private java.security.PrivateKey implGeneratePrivate(java.security.spec.KeySpec) throws java.security.GeneralSecurityException
    {
        sun.security.ec.ECKeyFactory r0;
        java.security.spec.KeySpec r1;
        java.security.spec.PKCS8EncodedKeySpec r2;
        boolean $z0, $z1;
        sun.security.ec.ECPrivateKeyImpl $r3, $r6;
        byte[] $r4;
        java.security.spec.ECPrivateKeySpec r5;
        java.math.BigInteger $r7;
        java.security.spec.ECParameterSpec $r8;
        java.security.spec.InvalidKeySpecException $r9;

        r0 := @this: sun.security.ec.ECKeyFactory;
        r1 := @parameter0: java.security.spec.KeySpec;
        $z0 = r1 instanceof java.security.spec.PKCS8EncodedKeySpec;
        if $z0 == 0 goto label0;

        r2 = (java.security.spec.PKCS8EncodedKeySpec) r1;
        $r3 = new sun.security.ec.ECPrivateKeyImpl;
        $r4 = virtualinvoke r2.<java.security.spec.PKCS8EncodedKeySpec: byte[] getEncoded()>();
        specialinvoke $r3.<sun.security.ec.ECPrivateKeyImpl: void <init>(byte[])>($r4);
        return $r3;

     label0:
        $z1 = r1 instanceof java.security.spec.ECPrivateKeySpec;
        if $z1 == 0 goto label1;

        r5 = (java.security.spec.ECPrivateKeySpec) r1;
        $r6 = new sun.security.ec.ECPrivateKeyImpl;
        $r7 = virtualinvoke r5.<java.security.spec.ECPrivateKeySpec: java.math.BigInteger getS()>();
        $r8 = virtualinvoke r5.<java.security.spec.ECPrivateKeySpec: java.security.spec.ECParameterSpec getParams()>();
        specialinvoke $r6.<sun.security.ec.ECPrivateKeyImpl: void <init>(java.math.BigInteger,java.security.spec.ECParameterSpec)>($r7, $r8);
        return $r6;

     label1:
        $r9 = new java.security.spec.InvalidKeySpecException;
        specialinvoke $r9.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Only ECPrivateKeySpec and PKCS8EncodedKeySpec supported for EC private keys");
        throw $r9;
    }

    protected java.security.spec.KeySpec engineGetKeySpec(java.security.Key, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        sun.security.ec.ECKeyFactory r0;
        java.security.Key r1, r4;
        java.lang.Class r2, $r8, $r12, $r16, $r19;
        java.security.InvalidKeyException r3, $r5;
        java.security.spec.InvalidKeySpecException $r6, $r15, $r24, $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.security.interfaces.ECPublicKey r7;
        java.security.spec.ECPublicKeySpec $r9;
        java.security.spec.ECPoint $r10;
        java.security.spec.ECParameterSpec $r11, $r23;
        java.security.spec.X509EncodedKeySpec $r13;
        byte[] $r14, $r18;
        java.security.spec.PKCS8EncodedKeySpec $r17;
        java.security.interfaces.ECPrivateKey r20;
        java.security.spec.ECPrivateKeySpec $r21;
        java.math.BigInteger $r22;

        r0 := @this: sun.security.ec.ECKeyFactory;
        r1 := @parameter0: java.security.Key;
        r2 := @parameter1: java.lang.Class;

     label0:
        r4 = virtualinvoke r0.<sun.security.ec.ECKeyFactory: java.security.Key engineTranslateKey(java.security.Key)>(r1);

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r3 = $r5;
        $r6 = new java.security.spec.InvalidKeySpecException;
        specialinvoke $r6.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.Throwable)>(r3);
        throw $r6;

     label3:
        $z0 = r4 instanceof java.security.interfaces.ECPublicKey;
        if $z0 == 0 goto label6;

        r7 = (java.security.interfaces.ECPublicKey) r4;
        $r8 = class "java/security/spec/ECPublicKeySpec";
        $z1 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);
        if $z1 == 0 goto label4;

        $r9 = new java.security.spec.ECPublicKeySpec;
        $r10 = interfaceinvoke r7.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();
        $r11 = interfaceinvoke r7.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();
        specialinvoke $r9.<java.security.spec.ECPublicKeySpec: void <init>(java.security.spec.ECPoint,java.security.spec.ECParameterSpec)>($r10, $r11);
        return $r9;

     label4:
        $r12 = class "java/security/spec/X509EncodedKeySpec";
        $z2 = virtualinvoke $r12.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);
        if $z2 == 0 goto label5;

        $r13 = new java.security.spec.X509EncodedKeySpec;
        $r14 = interfaceinvoke r4.<java.security.Key: byte[] getEncoded()>();
        specialinvoke $r13.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r14);
        return $r13;

     label5:
        $r15 = new java.security.spec.InvalidKeySpecException;
        specialinvoke $r15.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("KeySpec must be ECPublicKeySpec or X509EncodedKeySpec for EC public keys");
        throw $r15;

     label6:
        $z3 = r4 instanceof java.security.interfaces.ECPrivateKey;
        if $z3 == 0 goto label9;

        $r16 = class "java/security/spec/PKCS8EncodedKeySpec";
        $z4 = virtualinvoke $r16.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);
        if $z4 == 0 goto label7;

        $r17 = new java.security.spec.PKCS8EncodedKeySpec;
        $r18 = interfaceinvoke r4.<java.security.Key: byte[] getEncoded()>();
        specialinvoke $r17.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r18);
        return $r17;

     label7:
        $r19 = class "java/security/spec/ECPrivateKeySpec";
        $z5 = virtualinvoke $r19.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);
        if $z5 == 0 goto label8;

        r20 = (java.security.interfaces.ECPrivateKey) r4;
        $r21 = new java.security.spec.ECPrivateKeySpec;
        $r22 = interfaceinvoke r20.<java.security.interfaces.ECPrivateKey: java.math.BigInteger getS()>();
        $r23 = interfaceinvoke r20.<java.security.interfaces.ECPrivateKey: java.security.spec.ECParameterSpec getParams()>();
        specialinvoke $r21.<java.security.spec.ECPrivateKeySpec: void <init>(java.math.BigInteger,java.security.spec.ECParameterSpec)>($r22, $r23);
        return $r21;

     label8:
        $r24 = new java.security.spec.InvalidKeySpecException;
        specialinvoke $r24.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("KeySpec must be ECPrivateKeySpec or PKCS8EncodedKeySpec for EC private keys");
        throw $r24;

     label9:
        $r25 = new java.security.spec.InvalidKeySpecException;
        specialinvoke $r25.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Neither public nor private key");
        throw $r25;

        catch java.security.InvalidKeyException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        sun.security.ec.ECKeyFactory$1 $r0, r1;
        java.security.NoSuchAlgorithmException r2, $r6;
        sun.security.ec.ECKeyFactory$2 $r3;
        java.security.KeyFactory $r5;
        java.lang.RuntimeException $r7;

        $r0 = new sun.security.ec.ECKeyFactory$1;
        specialinvoke $r0.<sun.security.ec.ECKeyFactory$1: void <init>(java.lang.String,double,java.lang.String)>("SunEC-Internal", 1.0, null);
        r1 = $r0;
        $r3 = new sun.security.ec.ECKeyFactory$2;
        specialinvoke $r3.<sun.security.ec.ECKeyFactory$2: void <init>(java.security.Provider)>(r1);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r3);

     label0:
        $r5 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.security.Provider)>("EC", r1);
        <sun.security.ec.ECKeyFactory: java.security.KeyFactory INSTANCE> = $r5;

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        $r7 = new java.lang.RuntimeException;
        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);
        throw $r7;

     label3:
        <sun.security.ec.ECKeyFactory: java.security.Provider ecInternalProvider> = r1;
        return;

        catch java.security.NoSuchAlgorithmException from label0 to label1 with label2;
    }
}
