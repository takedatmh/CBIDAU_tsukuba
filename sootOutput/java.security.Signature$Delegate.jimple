class java.security.Signature$Delegate extends java.security.Signature
{
    private java.security.SignatureSpi sigSpi;
    private final java.lang.Object lock;
    private java.security.Provider$Service firstService;
    private java.util.Iterator serviceIterator;
    private static int warnCount;
    private static final int I_PUB;
    private static final int I_PRIV;
    private static final int I_PRIV_SR;

    void <init>(java.security.SignatureSpi, java.lang.String)
    {
        java.security.Signature$Delegate r0;
        java.security.SignatureSpi r1;
        java.lang.String r2;

        r0 := @this: java.security.Signature$Delegate;
        r1 := @parameter0: java.security.SignatureSpi;
        r2 := @parameter1: java.lang.String;
        specialinvoke r0.<java.security.Signature: void <init>(java.lang.String)>(r2);
        r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi> = r1;
        r0.<java.security.Signature$Delegate: java.lang.Object lock> = null;
        return;
    }

    void <init>(java.security.Provider$Service, java.util.Iterator, java.lang.String)
    {
        java.security.Signature$Delegate r0;
        java.security.Provider$Service r1;
        java.util.Iterator r2;
        java.lang.String r3;
        java.lang.Object $r4;

        r0 := @this: java.security.Signature$Delegate;
        r1 := @parameter0: java.security.Provider$Service;
        r2 := @parameter1: java.util.Iterator;
        r3 := @parameter2: java.lang.String;
        specialinvoke r0.<java.security.Signature: void <init>(java.lang.String)>(r3);
        r0.<java.security.Signature$Delegate: java.security.Provider$Service firstService> = r1;
        r0.<java.security.Signature$Delegate: java.util.Iterator serviceIterator> = r2;
        $r4 = new java.lang.Object;
        specialinvoke $r4.<java.lang.Object: void <init>()>();
        r0.<java.security.Signature$Delegate: java.lang.Object lock> = $r4;
        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.security.Signature$Delegate r0, r2, $r6;
        java.security.SignatureSpi r1, $r3, $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.String $r7;
        java.security.Provider $r8;
        java.lang.CloneNotSupportedException $r9;

        r0 := @this: java.security.Signature$Delegate;
        virtualinvoke r0.<java.security.Signature$Delegate: void chooseFirstProvider()>();
        $r3 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        $z0 = $r3 instanceof java.lang.Cloneable;
        if $z0 == 0 goto label0;

        $r4 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        $r5 = virtualinvoke $r4.<java.security.SignatureSpi: java.lang.Object clone()>();
        r1 = (java.security.SignatureSpi) $r5;
        $r6 = new java.security.Signature$Delegate;
        $r7 = staticinvoke <java.security.Signature: java.lang.String access$000(java.security.Signature)>(r0);
        specialinvoke $r6.<java.security.Signature$Delegate: void <init>(java.security.SignatureSpi,java.lang.String)>(r1, $r7);
        r2 = $r6;
        $r8 = r0.<java.security.Signature: java.security.Provider provider>;
        r2.<java.security.Signature: java.security.Provider provider> = $r8;
        return r2;

     label0:
        $r9 = new java.lang.CloneNotSupportedException;
        specialinvoke $r9.<java.lang.CloneNotSupportedException: void <init>()>();
        throw $r9;
    }

    private static java.security.SignatureSpi newInstance(java.security.Provider$Service) throws java.security.NoSuchAlgorithmException
    {
        java.security.Provider$Service r0;
        javax.crypto.Cipher r1;
        java.lang.String $r2, $r13, $r15;
        boolean $z0, $z1;
        java.security.Provider $r3;
        java.security.Signature$CipherAdapter $r4;
        javax.crypto.NoSuchPaddingException $r5, r6;
        java.security.NoSuchAlgorithmException $r7, $r9;
        java.lang.Object r8;
        java.lang.StringBuilder $r10, $r11, $r14;
        java.lang.Class $r12;
        java.security.SignatureSpi $r16;

        r0 := @parameter0: java.security.Provider$Service;
        $r2 = virtualinvoke r0.<java.security.Provider$Service: java.lang.String getType()>();
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("Cipher");
        if $z0 == 0 goto label3;

     label0:
        $r3 = virtualinvoke r0.<java.security.Provider$Service: java.security.Provider getProvider()>();
        r1 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>("RSA/ECB/PKCS1Padding", $r3);
        $r4 = new java.security.Signature$CipherAdapter;
        specialinvoke $r4.<java.security.Signature$CipherAdapter: void <init>(javax.crypto.Cipher)>(r1);

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;
        r6 = $r5;
        $r7 = new java.security.NoSuchAlgorithmException;
        specialinvoke $r7.<java.security.NoSuchAlgorithmException: void <init>(java.lang.Throwable)>(r6);
        throw $r7;

     label3:
        r8 = virtualinvoke r0.<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>(null);
        $z1 = r8 instanceof java.security.SignatureSpi;
        if $z1 != 0 goto label4;

        $r9 = new java.security.NoSuchAlgorithmException;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a SignatureSpi: ");
        $r12 = virtualinvoke r8.<java.lang.Object: java.lang.Class getClass()>();
        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();
        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r15);
        throw $r9;

     label4:
        $r16 = (java.security.SignatureSpi) r8;
        return $r16;

        catch javax.crypto.NoSuchPaddingException from label0 to label1 with label2;
    }

    void chooseFirstProvider()
    {
        java.security.Signature$Delegate r0;
        java.lang.Object r1, $r6, $r17;
        int i0, $i1, $i2;
        java.security.Provider$Service r2, $r13, $r15;
        java.security.NoSuchAlgorithmException r3, r12, $r20;
        java.lang.Throwable r4, $r24;
        java.security.SignatureSpi $r5, $r7, $r18;
        sun.security.util.Debug $r8, $r9, $r10;
        java.lang.Exception $r11;
        java.util.Iterator $r14, $r16;
        boolean $z0, $z1;
        java.security.Provider $r19;
        java.security.ProviderException $r21, r22;

        r0 := @this: java.security.Signature$Delegate;
        $r5 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        if $r5 == null goto label0;

        return;

     label0:
        $r6 = r0.<java.security.Signature$Delegate: java.lang.Object lock>;
        r1 = $r6;
        entermonitor $r6;

     label1:
        $r7 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        if $r7 == null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r8 = staticinvoke <java.security.Signature: sun.security.util.Debug access$100()>();
        if $r8 == null goto label5;

        $i1 = <java.security.Signature$Delegate: int warnCount>;
        $i2 = $i1 - 1;
        <java.security.Signature$Delegate: int warnCount> = $i2;
        i0 = $i2;
        if i0 < 0 goto label5;

        $r9 = staticinvoke <java.security.Signature: sun.security.util.Debug access$100()>();
        virtualinvoke $r9.<sun.security.util.Debug: void println(java.lang.String)>("Signature.init() not first method called, disabling delayed provider selection");
        if i0 != 0 goto label4;

        $r10 = staticinvoke <java.security.Signature: sun.security.util.Debug access$100()>();
        virtualinvoke $r10.<sun.security.util.Debug: void println(java.lang.String)>("Further warnings of this type will be suppressed");

     label4:
        $r11 = new java.lang.Exception;
        specialinvoke $r11.<java.lang.Exception: void <init>(java.lang.String)>("Call trace");
        virtualinvoke $r11.<java.lang.Exception: void printStackTrace()>();

     label5:
        r12 = null;

     label6:
        $r13 = r0.<java.security.Signature$Delegate: java.security.Provider$Service firstService>;
        if $r13 != null goto label7;

        $r14 = r0.<java.security.Signature$Delegate: java.util.Iterator serviceIterator>;
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label15;

     label7:
        $r15 = r0.<java.security.Signature$Delegate: java.security.Provider$Service firstService>;
        if $r15 == null goto label8;

        r2 = r0.<java.security.Signature$Delegate: java.security.Provider$Service firstService>;
        r0.<java.security.Signature$Delegate: java.security.Provider$Service firstService> = null;
        goto label9;

     label8:
        $r16 = r0.<java.security.Signature$Delegate: java.util.Iterator serviceIterator>;
        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();
        r2 = (java.security.Provider$Service) $r17;

     label9:
        $z1 = staticinvoke <java.security.Signature: boolean access$200(java.security.Provider$Service)>(r2);
        if $z1 != 0 goto label10;

        goto label6;

     label10:
        $r18 = staticinvoke <java.security.Signature$Delegate: java.security.SignatureSpi newInstance(java.security.Provider$Service)>(r2);
        r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi> = $r18;
        $r19 = virtualinvoke r2.<java.security.Provider$Service: java.security.Provider getProvider()>();
        r0.<java.security.Signature$Delegate: java.security.Provider provider> = $r19;
        r0.<java.security.Signature$Delegate: java.security.Provider$Service firstService> = null;
        r0.<java.security.Signature$Delegate: java.util.Iterator serviceIterator> = null;

     label11:
        exitmonitor r1;

     label12:
        return;

     label13:
        $r20 := @caughtexception;

     label14:
        r3 = $r20;
        r12 = r3;
        goto label6;

     label15:
        $r21 = new java.security.ProviderException;
        specialinvoke $r21.<java.security.ProviderException: void <init>(java.lang.String)>("Could not construct SignatureSpi instance");
        r22 = $r21;
        if r12 == null goto label16;

        virtualinvoke r22.<java.security.ProviderException: java.lang.Throwable initCause(java.lang.Throwable)>(r12);

     label16:
        throw r22;

     label17:
        $r24 := @caughtexception;
        r4 = $r24;
        exitmonitor r1;

     label18:
        throw r4;

        catch java.security.NoSuchAlgorithmException from label10 to label11 with label13;
        catch java.lang.Throwable from label1 to label2 with label17;
        catch java.lang.Throwable from label3 to label12 with label17;
        catch java.lang.Throwable from label14 to label18 with label17;
    }

    private void chooseProvider(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        java.security.Signature$Delegate r0;
        int i0;
        java.security.Key r1;
        java.security.SecureRandom r2;
        java.lang.Object r3, $r8, $r15;
        java.lang.Exception r4, $r17, r18;
        java.security.Provider$Service r5, $r11, $r13;
        java.security.SignatureSpi r6, $r9, $r10;
        java.lang.Throwable r7, $r29;
        java.util.Iterator $r12, $r14;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.security.Provider $r16;
        java.security.InvalidKeyException $r19, $r24;
        java.lang.RuntimeException $r20;
        java.lang.Class $r21;
        java.lang.String $r22, r23, $r28;
        java.lang.StringBuilder $r25, $r26, $r27;

        r0 := @this: java.security.Signature$Delegate;
        i0 := @parameter0: int;
        r1 := @parameter1: java.security.Key;
        r2 := @parameter2: java.security.SecureRandom;
        $r8 = r0.<java.security.Signature$Delegate: java.lang.Object lock>;
        r3 = $r8;
        entermonitor $r8;

     label0:
        $r9 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        if $r9 == null goto label2;

        $r10 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        specialinvoke r0.<java.security.Signature$Delegate: void init(java.security.SignatureSpi,int,java.security.Key,java.security.SecureRandom)>($r10, i0, r1, r2);
        exitmonitor r3;

     label1:
        return;

     label2:
        r4 = null;

     label3:
        $r11 = r0.<java.security.Signature$Delegate: java.security.Provider$Service firstService>;
        if $r11 != null goto label4;

        $r12 = r0.<java.security.Signature$Delegate: java.util.Iterator serviceIterator>;
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label14;

     label4:
        $r13 = r0.<java.security.Signature$Delegate: java.security.Provider$Service firstService>;
        if $r13 == null goto label5;

        r5 = r0.<java.security.Signature$Delegate: java.security.Provider$Service firstService>;
        r0.<java.security.Signature$Delegate: java.security.Provider$Service firstService> = null;
        goto label6;

     label5:
        $r14 = r0.<java.security.Signature$Delegate: java.util.Iterator serviceIterator>;
        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.security.Provider$Service) $r15;

     label6:
        $z1 = virtualinvoke r5.<java.security.Provider$Service: boolean supportsParameter(java.lang.Object)>(r1);
        if $z1 != 0 goto label7;

        goto label3;

     label7:
        $z2 = staticinvoke <java.security.Signature: boolean access$200(java.security.Provider$Service)>(r5);
        if $z2 != 0 goto label8;

        goto label3;

     label8:
        r6 = staticinvoke <java.security.Signature$Delegate: java.security.SignatureSpi newInstance(java.security.Provider$Service)>(r5);
        specialinvoke r0.<java.security.Signature$Delegate: void init(java.security.SignatureSpi,int,java.security.Key,java.security.SecureRandom)>(r6, i0, r1, r2);
        $r16 = virtualinvoke r5.<java.security.Provider$Service: java.security.Provider getProvider()>();
        r0.<java.security.Signature$Delegate: java.security.Provider provider> = $r16;
        r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi> = r6;
        r0.<java.security.Signature$Delegate: java.security.Provider$Service firstService> = null;
        r0.<java.security.Signature$Delegate: java.util.Iterator serviceIterator> = null;

     label9:
        exitmonitor r3;

     label10:
        return;

     label11:
        $r17 := @caughtexception;

     label12:
        r18 = $r17;
        if r4 != null goto label13;

        r4 = r18;

     label13:
        goto label3;

     label14:
        $z3 = r4 instanceof java.security.InvalidKeyException;
        if $z3 == 0 goto label15;

        $r19 = (java.security.InvalidKeyException) r4;
        throw $r19;

     label15:
        $z4 = r4 instanceof java.lang.RuntimeException;
        if $z4 == 0 goto label16;

        $r20 = (java.lang.RuntimeException) r4;
        throw $r20;

     label16:
        if r1 == null goto label17;

        $r21 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();
        goto label18;

     label17:
        $r22 = "(null)";

     label18:
        r23 = $r22;
        $r24 = new java.security.InvalidKeyException;
        $r25 = new java.lang.StringBuilder;
        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No installed provider supports this key: ");
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r24.<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>($r28, r4);
        throw $r24;

     label19:
        $r29 := @caughtexception;
        r7 = $r29;
        exitmonitor r3;

     label20:
        throw r7;

        catch java.lang.Exception from label8 to label9 with label11;
        catch java.lang.Throwable from label0 to label1 with label19;
        catch java.lang.Throwable from label2 to label10 with label19;
        catch java.lang.Throwable from label12 to label20 with label19;
    }

    private void init(java.security.SignatureSpi, int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        java.security.Signature$Delegate r0;
        java.security.SignatureSpi r1;
        int i0;
        java.security.Key r2;
        java.security.SecureRandom r3;
        java.security.PublicKey $r4;
        java.security.PrivateKey $r5, $r6;
        java.lang.AssertionError $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: java.security.Signature$Delegate;
        r1 := @parameter0: java.security.SignatureSpi;
        i0 := @parameter1: int;
        r2 := @parameter2: java.security.Key;
        r3 := @parameter3: java.security.SecureRandom;
        tableswitch(i0)
        {
            case 1: goto label0;
            case 2: goto label1;
            case 3: goto label2;
            default: goto label3;
        };

     label0:
        $r4 = (java.security.PublicKey) r2;
        virtualinvoke r1.<java.security.SignatureSpi: void engineInitVerify(java.security.PublicKey)>($r4);
        goto label4;

     label1:
        $r5 = (java.security.PrivateKey) r2;
        virtualinvoke r1.<java.security.SignatureSpi: void engineInitSign(java.security.PrivateKey)>($r5);
        goto label4;

     label2:
        $r6 = (java.security.PrivateKey) r2;
        virtualinvoke r1.<java.security.SignatureSpi: void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)>($r6, r3);
        goto label4;

     label3:
        $r7 = new java.lang.AssertionError;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error: ");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);
        throw $r7;

     label4:
        return;
    }

    protected void engineInitVerify(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        java.security.Signature$Delegate r0;
        java.security.PublicKey r1;
        java.security.SignatureSpi $r2, $r3;

        r0 := @this: java.security.Signature$Delegate;
        r1 := @parameter0: java.security.PublicKey;
        $r2 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        if $r2 == null goto label0;

        $r3 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        virtualinvoke $r3.<java.security.SignatureSpi: void engineInitVerify(java.security.PublicKey)>(r1);
        goto label1;

     label0:
        specialinvoke r0.<java.security.Signature$Delegate: void chooseProvider(int,java.security.Key,java.security.SecureRandom)>(1, r1, null);

     label1:
        return;
    }

    protected void engineInitSign(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        java.security.Signature$Delegate r0;
        java.security.PrivateKey r1;
        java.security.SignatureSpi $r2, $r3;

        r0 := @this: java.security.Signature$Delegate;
        r1 := @parameter0: java.security.PrivateKey;
        $r2 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        if $r2 == null goto label0;

        $r3 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        virtualinvoke $r3.<java.security.SignatureSpi: void engineInitSign(java.security.PrivateKey)>(r1);
        goto label1;

     label0:
        specialinvoke r0.<java.security.Signature$Delegate: void chooseProvider(int,java.security.Key,java.security.SecureRandom)>(2, r1, null);

     label1:
        return;
    }

    protected void engineInitSign(java.security.PrivateKey, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        java.security.Signature$Delegate r0;
        java.security.PrivateKey r1;
        java.security.SecureRandom r2;
        java.security.SignatureSpi $r3, $r4;

        r0 := @this: java.security.Signature$Delegate;
        r1 := @parameter0: java.security.PrivateKey;
        r2 := @parameter1: java.security.SecureRandom;
        $r3 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        if $r3 == null goto label0;

        $r4 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        virtualinvoke $r4.<java.security.SignatureSpi: void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)>(r1, r2);
        goto label1;

     label0:
        specialinvoke r0.<java.security.Signature$Delegate: void chooseProvider(int,java.security.Key,java.security.SecureRandom)>(3, r1, r2);

     label1:
        return;
    }

    protected void engineUpdate(byte) throws java.security.SignatureException
    {
        java.security.Signature$Delegate r0;
        byte b0;
        java.security.SignatureSpi $r1;

        r0 := @this: java.security.Signature$Delegate;
        b0 := @parameter0: byte;
        virtualinvoke r0.<java.security.Signature$Delegate: void chooseFirstProvider()>();
        $r1 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        virtualinvoke $r1.<java.security.SignatureSpi: void engineUpdate(byte)>(b0);
        return;
    }

    protected void engineUpdate(byte[], int, int) throws java.security.SignatureException
    {
        java.security.Signature$Delegate r0;
        byte[] r1;
        int i0, i1;
        java.security.SignatureSpi $r2;

        r0 := @this: java.security.Signature$Delegate;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        virtualinvoke r0.<java.security.Signature$Delegate: void chooseFirstProvider()>();
        $r2 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        virtualinvoke $r2.<java.security.SignatureSpi: void engineUpdate(byte[],int,int)>(r1, i0, i1);
        return;
    }

    protected void engineUpdate(java.nio.ByteBuffer)
    {
        java.security.Signature$Delegate r0;
        java.nio.ByteBuffer r1;
        java.security.SignatureSpi $r2;

        r0 := @this: java.security.Signature$Delegate;
        r1 := @parameter0: java.nio.ByteBuffer;
        virtualinvoke r0.<java.security.Signature$Delegate: void chooseFirstProvider()>();
        $r2 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        virtualinvoke $r2.<java.security.SignatureSpi: void engineUpdate(java.nio.ByteBuffer)>(r1);
        return;
    }

    protected byte[] engineSign() throws java.security.SignatureException
    {
        java.security.Signature$Delegate r0;
        java.security.SignatureSpi $r1;
        byte[] $r2;

        r0 := @this: java.security.Signature$Delegate;
        virtualinvoke r0.<java.security.Signature$Delegate: void chooseFirstProvider()>();
        $r1 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        $r2 = virtualinvoke $r1.<java.security.SignatureSpi: byte[] engineSign()>();
        return $r2;
    }

    protected int engineSign(byte[], int, int) throws java.security.SignatureException
    {
        java.security.Signature$Delegate r0;
        byte[] r1;
        int i0, i1, $i2;
        java.security.SignatureSpi $r2;

        r0 := @this: java.security.Signature$Delegate;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        virtualinvoke r0.<java.security.Signature$Delegate: void chooseFirstProvider()>();
        $r2 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        $i2 = virtualinvoke $r2.<java.security.SignatureSpi: int engineSign(byte[],int,int)>(r1, i0, i1);
        return $i2;
    }

    protected boolean engineVerify(byte[]) throws java.security.SignatureException
    {
        java.security.Signature$Delegate r0;
        byte[] r1;
        java.security.SignatureSpi $r2;
        boolean $z0;

        r0 := @this: java.security.Signature$Delegate;
        r1 := @parameter0: byte[];
        virtualinvoke r0.<java.security.Signature$Delegate: void chooseFirstProvider()>();
        $r2 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        $z0 = virtualinvoke $r2.<java.security.SignatureSpi: boolean engineVerify(byte[])>(r1);
        return $z0;
    }

    protected boolean engineVerify(byte[], int, int) throws java.security.SignatureException
    {
        java.security.Signature$Delegate r0;
        byte[] r1;
        int i0, i1;
        java.security.SignatureSpi $r2;
        boolean $z0;

        r0 := @this: java.security.Signature$Delegate;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        virtualinvoke r0.<java.security.Signature$Delegate: void chooseFirstProvider()>();
        $r2 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        $z0 = virtualinvoke $r2.<java.security.SignatureSpi: boolean engineVerify(byte[],int,int)>(r1, i0, i1);
        return $z0;
    }

    protected void engineSetParameter(java.lang.String, java.lang.Object) throws java.security.InvalidParameterException
    {
        java.security.Signature$Delegate r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.security.SignatureSpi $r3;

        r0 := @this: java.security.Signature$Delegate;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object;
        virtualinvoke r0.<java.security.Signature$Delegate: void chooseFirstProvider()>();
        $r3 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        virtualinvoke $r3.<java.security.SignatureSpi: void engineSetParameter(java.lang.String,java.lang.Object)>(r1, r2);
        return;
    }

    protected void engineSetParameter(java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidAlgorithmParameterException
    {
        java.security.Signature$Delegate r0;
        java.security.spec.AlgorithmParameterSpec r1;
        java.security.SignatureSpi $r2;

        r0 := @this: java.security.Signature$Delegate;
        r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;
        virtualinvoke r0.<java.security.Signature$Delegate: void chooseFirstProvider()>();
        $r2 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        virtualinvoke $r2.<java.security.SignatureSpi: void engineSetParameter(java.security.spec.AlgorithmParameterSpec)>(r1);
        return;
    }

    protected java.lang.Object engineGetParameter(java.lang.String) throws java.security.InvalidParameterException
    {
        java.security.Signature$Delegate r0;
        java.lang.String r1;
        java.security.SignatureSpi $r2;
        java.lang.Object $r3;

        r0 := @this: java.security.Signature$Delegate;
        r1 := @parameter0: java.lang.String;
        virtualinvoke r0.<java.security.Signature$Delegate: void chooseFirstProvider()>();
        $r2 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        $r3 = virtualinvoke $r2.<java.security.SignatureSpi: java.lang.Object engineGetParameter(java.lang.String)>(r1);
        return $r3;
    }

    protected java.security.AlgorithmParameters engineGetParameters()
    {
        java.security.Signature$Delegate r0;
        java.security.SignatureSpi $r1;
        java.security.AlgorithmParameters $r2;

        r0 := @this: java.security.Signature$Delegate;
        virtualinvoke r0.<java.security.Signature$Delegate: void chooseFirstProvider()>();
        $r1 = r0.<java.security.Signature$Delegate: java.security.SignatureSpi sigSpi>;
        $r2 = virtualinvoke $r1.<java.security.SignatureSpi: java.security.AlgorithmParameters engineGetParameters()>();
        return $r2;
    }

    static void <clinit>()
    {
        <java.security.Signature$Delegate: int warnCount> = 10;
        return;
    }
}
