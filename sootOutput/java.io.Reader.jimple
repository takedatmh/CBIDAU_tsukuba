public abstract class java.io.Reader extends java.lang.Object implements java.lang.Readable, java.io.Closeable
{
    protected java.lang.Object lock;
    private static final int maxSkipBufferSize;
    private char[] skipBuffer;

    protected void <init>()
    {
        java.io.Reader r0;

        r0 := @this: java.io.Reader;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.io.Reader: char[] skipBuffer> = null;
        r0.<java.io.Reader: java.lang.Object lock> = r0;
        return;
    }

    protected void <init>(java.lang.Object)
    {
        java.io.Reader r0;
        java.lang.Object r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.io.Reader;
        r1 := @parameter0: java.lang.Object;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.io.Reader: char[] skipBuffer> = null;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        r0.<java.io.Reader: java.lang.Object lock> = r1;
        return;
    }

    public int read(java.nio.CharBuffer) throws java.io.IOException
    {
        java.io.Reader r0;
        java.nio.CharBuffer r1;
        int i0, i1;
        char[] r2;

        r0 := @this: java.io.Reader;
        r1 := @parameter0: java.nio.CharBuffer;
        i0 = virtualinvoke r1.<java.nio.CharBuffer: int remaining()>();
        r2 = newarray (char)[i0];
        i1 = virtualinvoke r0.<java.io.Reader: int read(char[],int,int)>(r2, 0, i0);
        if i1 <= 0 goto label0;

        virtualinvoke r1.<java.nio.CharBuffer: java.nio.CharBuffer put(char[],int,int)>(r2, 0, i1);

     label0:
        return i1;
    }

    public int read() throws java.io.IOException
    {
        java.io.Reader r0;
        char[] r1;
        int $i0;
        char $c1;

        r0 := @this: java.io.Reader;
        r1 = newarray (char)[1];
        $i0 = virtualinvoke r0.<java.io.Reader: int read(char[],int,int)>(r1, 0, 1);
        if $i0 != -1 goto label0;

        return -1;

     label0:
        $c1 = r1[0];
        return $c1;
    }

    public int read(char[]) throws java.io.IOException
    {
        java.io.Reader r0;
        char[] r1;
        int $i0, $i1;

        r0 := @this: java.io.Reader;
        r1 := @parameter0: char[];
        $i0 = lengthof r1;
        $i1 = virtualinvoke r0.<java.io.Reader: int read(char[],int,int)>(r1, 0, $i0);
        return $i1;
    }

    public abstract int read(char[], int, int) throws java.io.IOException;

    public long skip(long) throws java.io.IOException
    {
        java.io.Reader r0;
        long l0, l2, $l5, $l8, $l9, $l11, $l12;
        int i1, i3, $i6, $i10;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r9;
        byte $b4, $b7;
        java.lang.IllegalArgumentException $r3;
        char[] $r5, $r6, $r7, $r8;

        r0 := @this: java.io.Reader;
        l0 := @parameter0: long;
        $b4 = l0 cmp 0L;
        if $b4 >= 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("skip value is negative");
        throw $r3;

     label0:
        $l5 = staticinvoke <java.lang.Math: long min(long,long)>(l0, 8192L);
        i1 = (int) $l5;
        $r4 = r0.<java.io.Reader: java.lang.Object lock>;
        r1 = $r4;
        entermonitor $r4;

     label1:
        $r5 = r0.<java.io.Reader: char[] skipBuffer>;
        if $r5 == null goto label2;

        $r6 = r0.<java.io.Reader: char[] skipBuffer>;
        $i6 = lengthof $r6;
        if $i6 >= i1 goto label3;

     label2:
        $r7 = newarray (char)[i1];
        r0.<java.io.Reader: char[] skipBuffer> = $r7;

     label3:
        l2 = l0;

     label4:
        $b7 = l2 cmp 0L;
        if $b7 <= 0 goto label6;

        $r8 = r0.<java.io.Reader: char[] skipBuffer>;
        $l8 = (long) i1;
        $l9 = staticinvoke <java.lang.Math: long min(long,long)>(l2, $l8);
        $i10 = (int) $l9;
        i3 = virtualinvoke r0.<java.io.Reader: int read(char[],int,int)>($r8, 0, $i10);
        if i3 != -1 goto label5;

        goto label6;

     label5:
        $l11 = (long) i3;
        l2 = l2 - $l11;
        goto label4;

     label6:
        $l12 = l0 - l2;
        exitmonitor r1;

     label7:
        return $l12;

     label8:
        $r9 := @caughtexception;

     label9:
        r2 = $r9;
        exitmonitor r1;

     label10:
        throw r2;

        catch java.lang.Throwable from label1 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    public boolean ready() throws java.io.IOException
    {
        java.io.Reader r0;

        r0 := @this: java.io.Reader;
        return 0;
    }

    public boolean markSupported()
    {
        java.io.Reader r0;

        r0 := @this: java.io.Reader;
        return 0;
    }

    public void mark(int) throws java.io.IOException
    {
        java.io.Reader r0;
        int i0;
        java.io.IOException $r1;

        r0 := @this: java.io.Reader;
        i0 := @parameter0: int;
        $r1 = new java.io.IOException;
        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("mark() not supported");
        throw $r1;
    }

    public void reset() throws java.io.IOException
    {
        java.io.Reader r0;
        java.io.IOException $r1;

        r0 := @this: java.io.Reader;
        $r1 = new java.io.IOException;
        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("reset() not supported");
        throw $r1;
    }

    public abstract void close() throws java.io.IOException;
}
