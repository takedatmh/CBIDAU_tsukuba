public abstract class java.lang.Enum extends java.lang.Object implements java.lang.Comparable, java.io.Serializable
{
    private final java.lang.String name;
    private final int ordinal;

    public final java.lang.String name()
    {
        java.lang.Enum r0;
        java.lang.String $r1;

        r0 := @this: java.lang.Enum;
        $r1 = r0.<java.lang.Enum: java.lang.String name>;
        return $r1;
    }

    public final int ordinal()
    {
        java.lang.Enum r0;
        int $i0;

        r0 := @this: java.lang.Enum;
        $i0 = r0.<java.lang.Enum: int ordinal>;
        return $i0;
    }

    protected void <init>(java.lang.String, int)
    {
        java.lang.Enum r0;
        java.lang.String r1;
        int i0;

        r0 := @this: java.lang.Enum;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.Enum: java.lang.String name> = r1;
        r0.<java.lang.Enum: int ordinal> = i0;
        return;
    }

    public java.lang.String toString()
    {
        java.lang.Enum r0;
        java.lang.String $r1;

        r0 := @this: java.lang.Enum;
        $r1 = r0.<java.lang.Enum: java.lang.String name>;
        return $r1;
    }

    public final boolean equals(java.lang.Object)
    {
        java.lang.Enum r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.lang.Enum;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public final int hashCode()
    {
        java.lang.Enum r0;
        int $i0;

        r0 := @this: java.lang.Enum;
        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();
        return $i0;
    }

    protected final java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.lang.Enum r0;
        java.lang.CloneNotSupportedException $r1;

        r0 := @this: java.lang.Enum;
        $r1 = new java.lang.CloneNotSupportedException;
        specialinvoke $r1.<java.lang.CloneNotSupportedException: void <init>()>();
        throw $r1;
    }

    public final int compareTo(java.lang.Enum)
    {
        java.lang.Enum r0, r1, r2, r3;
        java.lang.Class $r4, $r5, $r6, $r7;
        java.lang.ClassCastException $r8;
        int $i0, $i1, $i2;

        r0 := @this: java.lang.Enum;
        r1 := @parameter0: java.lang.Enum;
        r2 = r1;
        r3 = r0;
        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();
        if $r4 == $r5 goto label0;

        $r6 = virtualinvoke r3.<java.lang.Enum: java.lang.Class getDeclaringClass()>();
        $r7 = virtualinvoke r2.<java.lang.Enum: java.lang.Class getDeclaringClass()>();
        if $r6 == $r7 goto label0;

        $r8 = new java.lang.ClassCastException;
        specialinvoke $r8.<java.lang.ClassCastException: void <init>()>();
        throw $r8;

     label0:
        $i0 = r3.<java.lang.Enum: int ordinal>;
        $i1 = r2.<java.lang.Enum: int ordinal>;
        $i2 = $i0 - $i1;
        return $i2;
    }

    public final java.lang.Class getDeclaringClass()
    {
        java.lang.Enum r0;
        java.lang.Class r1, r2, $r3;

        r0 := @this: java.lang.Enum;
        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r2 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>();
        if r2 != class "java/lang/Enum" goto label0;

        $r3 = r1;
        goto label1;

     label0:
        $r3 = r2;

     label1:
        return $r3;
    }

    public static java.lang.Enum valueOf(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1, $r9, $r13;
        java.lang.Enum r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.NullPointerException $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r12;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.String;
        $r3 = virtualinvoke r0.<java.lang.Class: java.util.Map enumConstantDirectory()>();
        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        r2 = (java.lang.Enum) $r4;
        if r2 == null goto label0;

        return r2;

     label0:
        if r1 != null goto label1;

        $r5 = new java.lang.NullPointerException;
        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Name is null");
        throw $r5;

     label1:
        $r6 = new java.lang.IllegalArgumentException;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No enum constant ");
        $r9 = virtualinvoke r0.<java.lang.Class: java.lang.String getCanonicalName()>();
        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);
        throw $r6;
    }

    protected final void finalize()
    {
        java.lang.Enum r0;

        r0 := @this: java.lang.Enum;
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.Enum r0;
        java.io.ObjectInputStream r1;
        java.io.InvalidObjectException $r2;

        r0 := @this: java.lang.Enum;
        r1 := @parameter0: java.io.ObjectInputStream;
        $r2 = new java.io.InvalidObjectException;
        specialinvoke $r2.<java.io.InvalidObjectException: void <init>(java.lang.String)>("can\'t deserialize enum");
        throw $r2;
    }

    private void readObjectNoData() throws java.io.ObjectStreamException
    {
        java.lang.Enum r0;
        java.io.InvalidObjectException $r1;

        r0 := @this: java.lang.Enum;
        $r1 = new java.io.InvalidObjectException;
        specialinvoke $r1.<java.io.InvalidObjectException: void <init>(java.lang.String)>("can\'t deserialize enum");
        throw $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Enum r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.lang.Enum;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.lang.Enum) r1;
        $i0 = virtualinvoke r0.<java.lang.Enum: int compareTo(java.lang.Enum)>($r2);
        return $i0;
    }
}
