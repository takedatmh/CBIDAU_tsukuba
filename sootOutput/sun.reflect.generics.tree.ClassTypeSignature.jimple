public class sun.reflect.generics.tree.ClassTypeSignature extends java.lang.Object implements sun.reflect.generics.tree.FieldTypeSignature
{
    private java.util.List path;

    private void <init>(java.util.List)
    {
        sun.reflect.generics.tree.ClassTypeSignature r0;
        java.util.List r1;

        r0 := @this: sun.reflect.generics.tree.ClassTypeSignature;
        r1 := @parameter0: java.util.List;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.reflect.generics.tree.ClassTypeSignature: java.util.List path> = r1;
        return;
    }

    public static sun.reflect.generics.tree.ClassTypeSignature make(java.util.List)
    {
        java.util.List r0;
        sun.reflect.generics.tree.ClassTypeSignature $r1;

        r0 := @parameter0: java.util.List;
        $r1 = new sun.reflect.generics.tree.ClassTypeSignature;
        specialinvoke $r1.<sun.reflect.generics.tree.ClassTypeSignature: void <init>(java.util.List)>(r0);
        return $r1;
    }

    public java.util.List getPath()
    {
        sun.reflect.generics.tree.ClassTypeSignature r0;
        java.util.List $r1;

        r0 := @this: sun.reflect.generics.tree.ClassTypeSignature;
        $r1 = r0.<sun.reflect.generics.tree.ClassTypeSignature: java.util.List path>;
        return $r1;
    }

    public void accept(sun.reflect.generics.visitor.TypeTreeVisitor)
    {
        sun.reflect.generics.tree.ClassTypeSignature r0;
        sun.reflect.generics.visitor.TypeTreeVisitor r1;

        r0 := @this: sun.reflect.generics.tree.ClassTypeSignature;
        r1 := @parameter0: sun.reflect.generics.visitor.TypeTreeVisitor;
        interfaceinvoke r1.<sun.reflect.generics.visitor.TypeTreeVisitor: void visitClassTypeSignature(sun.reflect.generics.tree.ClassTypeSignature)>(r0);
        return;
    }
}
