public class java.io.DataOutputStream extends java.io.FilterOutputStream implements java.io.DataOutput
{
    protected int written;
    private byte[] bytearr;
    private byte[] writeBuffer;

    public void <init>(java.io.OutputStream)
    {
        java.io.DataOutputStream r0;
        java.io.OutputStream r1;
        byte[] $r2;

        r0 := @this: java.io.DataOutputStream;
        r1 := @parameter0: java.io.OutputStream;
        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r1);
        r0.<java.io.DataOutputStream: byte[] bytearr> = null;
        $r2 = newarray (byte)[8];
        r0.<java.io.DataOutputStream: byte[] writeBuffer> = $r2;
        return;
    }

    private void incCount(int)
    {
        java.io.DataOutputStream r0;
        int i0, i1, $i2;

        r0 := @this: java.io.DataOutputStream;
        i0 := @parameter0: int;
        $i2 = r0.<java.io.DataOutputStream: int written>;
        i1 = $i2 + i0;
        if i1 >= 0 goto label0;

        i1 = 2147483647;

     label0:
        r0.<java.io.DataOutputStream: int written> = i1;
        return;
    }

    public synchronized void write(int) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        int i0;
        java.io.OutputStream $r1;

        r0 := @this: java.io.DataOutputStream;
        i0 := @parameter0: int;
        $r1 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;
        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0);
        specialinvoke r0.<java.io.DataOutputStream: void incCount(int)>(1);
        return;
    }

    public synchronized void write(byte[], int, int) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        byte[] r1;
        int i0, i1;
        java.io.OutputStream $r2;

        r0 := @this: java.io.DataOutputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;
        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);
        specialinvoke r0.<java.io.DataOutputStream: void incCount(int)>(i1);
        return;
    }

    public void flush() throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        java.io.OutputStream $r1;

        r0 := @this: java.io.DataOutputStream;
        $r1 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;
        virtualinvoke $r1.<java.io.OutputStream: void flush()>();
        return;
    }

    public final void writeBoolean(boolean) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        boolean z0;
        java.io.OutputStream $r1;
        byte $b0;

        r0 := @this: java.io.DataOutputStream;
        z0 := @parameter0: boolean;
        $r1 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;
        if z0 == 0 goto label0;

        $b0 = 1;
        goto label1;

     label0:
        $b0 = 0;

     label1:
        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($b0);
        specialinvoke r0.<java.io.DataOutputStream: void incCount(int)>(1);
        return;
    }

    public final void writeByte(int) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        int i0;
        java.io.OutputStream $r1;

        r0 := @this: java.io.DataOutputStream;
        i0 := @parameter0: int;
        $r1 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;
        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0);
        specialinvoke r0.<java.io.DataOutputStream: void incCount(int)>(1);
        return;
    }

    public final void writeShort(int) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        int i0, $i1, $i2, $i3, $i4;
        java.io.OutputStream $r1, $r2;

        r0 := @this: java.io.DataOutputStream;
        i0 := @parameter0: int;
        $r1 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;
        $i1 = i0 >>> 8;
        $i2 = $i1 & 255;
        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i2);
        $r2 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;
        $i3 = i0 >>> 0;
        $i4 = $i3 & 255;
        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i4);
        specialinvoke r0.<java.io.DataOutputStream: void incCount(int)>(2);
        return;
    }

    public final void writeChar(int) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        int i0, $i1, $i2, $i3, $i4;
        java.io.OutputStream $r1, $r2;

        r0 := @this: java.io.DataOutputStream;
        i0 := @parameter0: int;
        $r1 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;
        $i1 = i0 >>> 8;
        $i2 = $i1 & 255;
        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i2);
        $r2 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;
        $i3 = i0 >>> 0;
        $i4 = $i3 & 255;
        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i4);
        specialinvoke r0.<java.io.DataOutputStream: void incCount(int)>(2);
        return;
    }

    public final void writeInt(int) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.io.OutputStream $r1, $r2, $r3, $r4;

        r0 := @this: java.io.DataOutputStream;
        i0 := @parameter0: int;
        $r1 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;
        $i1 = i0 >>> 24;
        $i2 = $i1 & 255;
        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i2);
        $r2 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;
        $i3 = i0 >>> 16;
        $i4 = $i3 & 255;
        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i4);
        $r3 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;
        $i5 = i0 >>> 8;
        $i6 = $i5 & 255;
        virtualinvoke $r3.<java.io.OutputStream: void write(int)>($i6);
        $r4 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;
        $i7 = i0 >>> 0;
        $i8 = $i7 & 255;
        virtualinvoke $r4.<java.io.OutputStream: void write(int)>($i8);
        specialinvoke r0.<java.io.DataOutputStream: void incCount(int)>(4);
        return;
    }

    public final void writeLong(long) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        long l0, $l1, $l4, $l7, $l10, $l13, $l16, $l19, $l22;
        byte[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10;
        int $i2, $i5, $i8, $i11, $i14, $i17, $i20, $i23;
        byte $b3, $b6, $b9, $b12, $b15, $b18, $b21, $b24;
        java.io.OutputStream $r9;

        r0 := @this: java.io.DataOutputStream;
        l0 := @parameter0: long;
        $r1 = r0.<java.io.DataOutputStream: byte[] writeBuffer>;
        $l1 = l0 >>> 56;
        $i2 = (int) $l1;
        $b3 = (byte) $i2;
        $r1[0] = $b3;
        $r2 = r0.<java.io.DataOutputStream: byte[] writeBuffer>;
        $l4 = l0 >>> 48;
        $i5 = (int) $l4;
        $b6 = (byte) $i5;
        $r2[1] = $b6;
        $r3 = r0.<java.io.DataOutputStream: byte[] writeBuffer>;
        $l7 = l0 >>> 40;
        $i8 = (int) $l7;
        $b9 = (byte) $i8;
        $r3[2] = $b9;
        $r4 = r0.<java.io.DataOutputStream: byte[] writeBuffer>;
        $l10 = l0 >>> 32;
        $i11 = (int) $l10;
        $b12 = (byte) $i11;
        $r4[3] = $b12;
        $r5 = r0.<java.io.DataOutputStream: byte[] writeBuffer>;
        $l13 = l0 >>> 24;
        $i14 = (int) $l13;
        $b15 = (byte) $i14;
        $r5[4] = $b15;
        $r6 = r0.<java.io.DataOutputStream: byte[] writeBuffer>;
        $l16 = l0 >>> 16;
        $i17 = (int) $l16;
        $b18 = (byte) $i17;
        $r6[5] = $b18;
        $r7 = r0.<java.io.DataOutputStream: byte[] writeBuffer>;
        $l19 = l0 >>> 8;
        $i20 = (int) $l19;
        $b21 = (byte) $i20;
        $r7[6] = $b21;
        $r8 = r0.<java.io.DataOutputStream: byte[] writeBuffer>;
        $l22 = l0 >>> 0;
        $i23 = (int) $l22;
        $b24 = (byte) $i23;
        $r8[7] = $b24;
        $r9 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;
        $r10 = r0.<java.io.DataOutputStream: byte[] writeBuffer>;
        virtualinvoke $r9.<java.io.OutputStream: void write(byte[],int,int)>($r10, 0, 8);
        specialinvoke r0.<java.io.DataOutputStream: void incCount(int)>(8);
        return;
    }

    public final void writeFloat(float) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        float f0;
        int $i0;

        r0 := @this: java.io.DataOutputStream;
        f0 := @parameter0: float;
        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);
        virtualinvoke r0.<java.io.DataOutputStream: void writeInt(int)>($i0);
        return;
    }

    public final void writeDouble(double) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        double d0;
        long $l0;

        r0 := @this: java.io.DataOutputStream;
        d0 := @parameter0: double;
        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);
        virtualinvoke r0.<java.io.DataOutputStream: void writeLong(long)>($l0);
        return;
    }

    public final void writeBytes(java.lang.String) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        java.lang.String r1;
        int i0, i1;
        java.io.OutputStream $r2;
        char $c2;
        byte $b3;

        r0 := @this: java.io.DataOutputStream;
        r1 := @parameter0: java.lang.String;
        i0 = virtualinvoke r1.<java.lang.String: int length()>();
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        $r2 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;
        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);
        $b3 = (byte) $c2;
        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($b3);
        i1 = i1 + 1;
        goto label0;

     label1:
        specialinvoke r0.<java.io.DataOutputStream: void incCount(int)>(i0);
        return;
    }

    public final void writeChars(java.lang.String) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        java.lang.String r1;
        int i0, i1, $i7;
        char c2, $c3, $c4, $c5, $c6;
        java.io.OutputStream $r2, $r3;

        r0 := @this: java.io.DataOutputStream;
        r1 := @parameter0: java.lang.String;
        i0 = virtualinvoke r1.<java.lang.String: int length()>();
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);
        $r2 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;
        $c3 = c2 >>> 8;
        $c4 = $c3 & 255;
        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($c4);
        $r3 = r0.<java.io.DataOutputStream: java.io.OutputStream out>;
        $c5 = c2 >>> 0;
        $c6 = $c5 & 255;
        virtualinvoke $r3.<java.io.OutputStream: void write(int)>($c6);
        i1 = i1 + 1;
        goto label0;

     label1:
        $i7 = i0 * 2;
        specialinvoke r0.<java.io.DataOutputStream: void incCount(int)>($i7);
        return;
    }

    public final void writeUTF(java.lang.String) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        java.lang.String r1;

        r0 := @this: java.io.DataOutputStream;
        r1 := @parameter0: java.lang.String;
        staticinvoke <java.io.DataOutputStream: int writeUTF(java.lang.String,java.io.DataOutput)>(r1, r0);
        return;
    }

    static int writeUTF(java.lang.String, java.io.DataOutput) throws java.io.IOException
    {
        java.lang.String r0, $r8;
        java.io.DataOutput r1;
        int i0, i1, i3, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, i14, $i15, $i16, i18, $i20, $i23, i25, i30, i39, $i48, $i49;
        byte b2, $b13, $b17, $b21, $b24, $b29, $b34, $b38, $b43, $b47;
        char c4, c19, c22, $c26, $c27, $c28, $c31, $c32, $c33, $c35, $c36, $c37, $c40, $c41, $c42, $c44, $c45, $c46;
        java.lang.StringBuilder $r2, $r5, $r6, $r7;
        java.io.DataOutputStream r3;
        java.io.UTFDataFormatException $r4;
        null_type n0;
        boolean $z0, z1;
        byte[] $r9, $r10, $r11, r12;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.io.DataOutput;
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        i1 = 0;
        b2 = 0;
        i3 = 0;

     label0:
        if i3 >= i0 goto label4;

        c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);
        if c4 < 1 goto label1;

        if c4 > 127 goto label1;

        i1 = i1 + 1;
        goto label3;

     label1:
        if c4 <= 2047 goto label2;

        i1 = i1 + 3;
        goto label3;

     label2:
        i1 = i1 + 2;

     label3:
        i3 = i3 + 1;
        goto label0;

     label4:
        if i1 <= 65535 goto label5;

        $r4 = new java.io.UTFDataFormatException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("encoded string too long: ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.io.UTFDataFormatException: void <init>(java.lang.String)>($r8);
        throw $r4;

     label5:
        n0 = null;
        $z0 = r1 instanceof java.io.DataOutputStream;
        if $z0 == 0 goto label8;

        r3 = (java.io.DataOutputStream) r1;
        $r9 = r3.<java.io.DataOutputStream: byte[] bytearr>;
        if $r9 == null goto label6;

        $r10 = r3.<java.io.DataOutputStream: byte[] bytearr>;
        $i5 = lengthof $r10;
        $i6 = i1 + 2;
        if $i5 >= $i6 goto label7;

     label6:
        $i7 = i1 * 2;
        $i8 = $i7 + 2;
        $r11 = newarray (byte)[$i8];
        r3.<java.io.DataOutputStream: byte[] bytearr> = $r11;

     label7:
        r12 = r3.<java.io.DataOutputStream: byte[] bytearr>;
        goto label9;

     label8:
        $i9 = i1 + 2;
        r12 = newarray (byte)[$i9];

     label9:
        i10 = b2 + 1;
        $i11 = i1 >>> 8;
        $i12 = $i11 & 255;
        $b13 = (byte) $i12;
        r12[b2] = $b13;
        i14 = i10 + 1;
        $i15 = i1 >>> 0;
        $i16 = $i15 & 255;
        $b17 = (byte) $i16;
        r12[i10] = $b17;
        z1 = 0;
        i18 = 0;

     label10:
        if i18 >= i0 goto label12;

        c19 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i18);
        if c19 < 1 goto label12;

        if c19 <= 127 goto label11;

        goto label12;

     label11:
        $i20 = i14;
        i14 = i14 + 1;
        $b21 = (byte) c19;
        r12[$i20] = $b21;
        i18 = i18 + 1;
        goto label10;

     label12:
        if i18 >= i0 goto label16;

        c22 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i18);
        if c22 < 1 goto label13;

        if c22 > 127 goto label13;

        $i23 = i14;
        i14 = i14 + 1;
        $b24 = (byte) c22;
        r12[$i23] = $b24;
        goto label15;

     label13:
        if c22 <= 2047 goto label14;

        i25 = i14 + 1;
        $c26 = c22 >> 12;
        $c27 = $c26 & 15;
        $c28 = 224 | $c27;
        $b29 = (byte) $c28;
        r12[i14] = $b29;
        i30 = i25 + 1;
        $c31 = c22 >> 6;
        $c32 = $c31 & 63;
        $c33 = 128 | $c32;
        $b34 = (byte) $c33;
        r12[i25] = $b34;
        i14 = i30 + 1;
        $c35 = c22 >> 0;
        $c36 = $c35 & 63;
        $c37 = 128 | $c36;
        $b38 = (byte) $c37;
        r12[i30] = $b38;
        goto label15;

     label14:
        i39 = i14 + 1;
        $c40 = c22 >> 6;
        $c41 = $c40 & 31;
        $c42 = 192 | $c41;
        $b43 = (byte) $c42;
        r12[i14] = $b43;
        i14 = i39 + 1;
        $c44 = c22 >> 0;
        $c45 = $c44 & 63;
        $c46 = 128 | $c45;
        $b47 = (byte) $c46;
        r12[i39] = $b47;

     label15:
        i18 = i18 + 1;
        goto label12;

     label16:
        $i48 = i1 + 2;
        interfaceinvoke r1.<java.io.DataOutput: void write(byte[],int,int)>(r12, 0, $i48);
        $i49 = i1 + 2;
        return $i49;
    }

    public final int size()
    {
        java.io.DataOutputStream r0;
        int $i0;

        r0 := @this: java.io.DataOutputStream;
        $i0 = r0.<java.io.DataOutputStream: int written>;
        return $i0;
    }
}
