class sun.misc.SoftCache$EntrySet$1 extends java.lang.Object implements java.util.Iterator
{
    java.util.Iterator hashIterator;
    sun.misc.SoftCache$Entry next;
    final sun.misc.SoftCache$EntrySet this$1;

    void <init>(sun.misc.SoftCache$EntrySet)
    {
        sun.misc.SoftCache$EntrySet$1 r0;
        sun.misc.SoftCache$EntrySet r1, $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;

        r0 := @this: sun.misc.SoftCache$EntrySet$1;
        r1 := @parameter0: sun.misc.SoftCache$EntrySet;
        r0.<sun.misc.SoftCache$EntrySet$1: sun.misc.SoftCache$EntrySet this$1> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = r0.<sun.misc.SoftCache$EntrySet$1: sun.misc.SoftCache$EntrySet this$1>;
        $r3 = $r2.<sun.misc.SoftCache$EntrySet: java.util.Set hashEntries>;
        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();
        r0.<sun.misc.SoftCache$EntrySet$1: java.util.Iterator hashIterator> = $r4;
        r0.<sun.misc.SoftCache$EntrySet$1: sun.misc.SoftCache$Entry next> = null;
        return;
    }

    public boolean hasNext()
    {
        sun.misc.SoftCache$EntrySet$1 r0;
        java.util.Map$Entry r1;
        sun.misc.SoftCache$ValueCell r2;
        java.lang.Object r3, $r6, $r7, $r8;
        java.util.Iterator $r4, $r5;
        boolean $z0;
        sun.misc.SoftCache$Entry $r9;
        sun.misc.SoftCache$EntrySet $r10;
        sun.misc.SoftCache $r11;

        r0 := @this: sun.misc.SoftCache$EntrySet$1;

     label0:
        $r4 = r0.<sun.misc.SoftCache$EntrySet$1: java.util.Iterator hashIterator>;
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r5 = r0.<sun.misc.SoftCache$EntrySet$1: java.util.Iterator hashIterator>;
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();
        r1 = (java.util.Map$Entry) $r6;
        $r7 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();
        r2 = (sun.misc.SoftCache$ValueCell) $r7;
        r3 = null;
        if r2 == null goto label1;

        $r8 = virtualinvoke r2.<sun.misc.SoftCache$ValueCell: java.lang.Object get()>();
        r3 = $r8;
        if $r8 != null goto label1;

        goto label0;

     label1:
        $r9 = new sun.misc.SoftCache$Entry;
        $r10 = r0.<sun.misc.SoftCache$EntrySet$1: sun.misc.SoftCache$EntrySet this$1>;
        $r11 = $r10.<sun.misc.SoftCache$EntrySet: sun.misc.SoftCache this$0>;
        specialinvoke $r9.<sun.misc.SoftCache$Entry: void <init>(sun.misc.SoftCache,java.util.Map$Entry,java.lang.Object)>($r11, r1, r3);
        r0.<sun.misc.SoftCache$EntrySet$1: sun.misc.SoftCache$Entry next> = $r9;
        return 1;

     label2:
        return 0;
    }

    public java.lang.Object next()
    {
        sun.misc.SoftCache$EntrySet$1 r0;
        sun.misc.SoftCache$Entry r1, $r2;
        boolean $z0;
        java.util.NoSuchElementException $r3;

        r0 := @this: sun.misc.SoftCache$EntrySet$1;
        $r2 = r0.<sun.misc.SoftCache$EntrySet$1: sun.misc.SoftCache$Entry next>;
        if $r2 != null goto label0;

        $z0 = virtualinvoke r0.<sun.misc.SoftCache$EntrySet$1: boolean hasNext()>();
        if $z0 != 0 goto label0;

        $r3 = new java.util.NoSuchElementException;
        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();
        throw $r3;

     label0:
        r1 = r0.<sun.misc.SoftCache$EntrySet$1: sun.misc.SoftCache$Entry next>;
        r0.<sun.misc.SoftCache$EntrySet$1: sun.misc.SoftCache$Entry next> = null;
        return r1;
    }

    public void remove()
    {
        sun.misc.SoftCache$EntrySet$1 r0;
        java.util.Iterator $r1;

        r0 := @this: sun.misc.SoftCache$EntrySet$1;
        $r1 = r0.<sun.misc.SoftCache$EntrySet$1: java.util.Iterator hashIterator>;
        interfaceinvoke $r1.<java.util.Iterator: void remove()>();
        return;
    }
}
