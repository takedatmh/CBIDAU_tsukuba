public final class sun.text.UCompactIntArray extends java.lang.Object implements java.lang.Cloneable
{
    private static final int PLANEMASK;
    private static final int PLANESHIFT;
    private static final int PLANECOUNT;
    private static final int CODEPOINTMASK;
    private static final int UNICODECOUNT;
    private static final int BLOCKSHIFT;
    private static final int BLOCKCOUNT;
    private static final int INDEXSHIFT;
    private static final int INDEXCOUNT;
    private static final int BLOCKMASK;
    private int defaultValue;
    private int[][] values;
    private short[][] indices;
    private boolean isCompact;
    private boolean[][] blockTouched;
    private boolean[] planeTouched;

    public void <init>()
    {
        sun.text.UCompactIntArray r0;
        int[][] $r1;
        short[][] $r2;
        boolean[][] $r3;
        boolean[] $r4;

        r0 := @this: sun.text.UCompactIntArray;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = newarray (int[])[16];
        r0.<sun.text.UCompactIntArray: int[][] values> = $r1;
        $r2 = newarray (short[])[16];
        r0.<sun.text.UCompactIntArray: short[][] indices> = $r2;
        $r3 = newarray (boolean[])[16];
        r0.<sun.text.UCompactIntArray: boolean[][] blockTouched> = $r3;
        $r4 = newarray (boolean)[16];
        r0.<sun.text.UCompactIntArray: boolean[] planeTouched> = $r4;
        return;
    }

    public void <init>(int)
    {
        sun.text.UCompactIntArray r0;
        int i0;

        r0 := @this: sun.text.UCompactIntArray;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.text.UCompactIntArray: void <init>()>();
        r0.<sun.text.UCompactIntArray: int defaultValue> = i0;
        return;
    }

    public int elementAt(int)
    {
        sun.text.UCompactIntArray r0;
        int i0, i1, $i2, $i3, i4, $i5, $i7, $i8, $i9, $i10;
        boolean[] $r1;
        boolean $z0;
        int[][] $r2;
        int[] $r3;
        short[][] $r4;
        short[] $r5;
        short $s6;

        r0 := @this: sun.text.UCompactIntArray;
        i0 := @parameter0: int;
        $i2 = i0 & 196608;
        i1 = $i2 >> 16;
        $r1 = r0.<sun.text.UCompactIntArray: boolean[] planeTouched>;
        $z0 = $r1[i1];
        if $z0 != 0 goto label0;

        $i3 = r0.<sun.text.UCompactIntArray: int defaultValue>;
        return $i3;

     label0:
        i4 = i0 & 65535;
        $r2 = r0.<sun.text.UCompactIntArray: int[][] values>;
        $r3 = $r2[i1];
        $r4 = r0.<sun.text.UCompactIntArray: short[][] indices>;
        $r5 = $r4[i1];
        $i5 = i4 >> 7;
        $s6 = $r5[$i5];
        $i7 = $s6 & 65535;
        $i8 = i4 & 127;
        $i9 = $i7 + $i8;
        $i10 = $r3[$i9];
        return $i10;
    }

    public void setElementAt(int, int)
    {
        sun.text.UCompactIntArray r0;
        int i0, i1, i2, $i3, i4, $i5;
        boolean $z0, $z1;
        boolean[] $r1, $r5;
        int[][] $r2;
        int[] $r3;
        boolean[][] $r4;

        r0 := @this: sun.text.UCompactIntArray;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $z0 = r0.<sun.text.UCompactIntArray: boolean isCompact>;
        if $z0 == 0 goto label0;

        specialinvoke r0.<sun.text.UCompactIntArray: void expand()>();

     label0:
        $i3 = i0 & 196608;
        i2 = $i3 >> 16;
        $r1 = r0.<sun.text.UCompactIntArray: boolean[] planeTouched>;
        $z1 = $r1[i2];
        if $z1 != 0 goto label1;

        specialinvoke r0.<sun.text.UCompactIntArray: void initPlane(int)>(i2);

     label1:
        i4 = i0 & 65535;
        $r2 = r0.<sun.text.UCompactIntArray: int[][] values>;
        $r3 = $r2[i2];
        $r3[i4] = i1;
        $r4 = r0.<sun.text.UCompactIntArray: boolean[][] blockTouched>;
        $r5 = $r4[i2];
        $i5 = i4 >> 7;
        $r5[$i5] = 1;
        return;
    }

    public void compact()
    {
        sun.text.UCompactIntArray r0;
        int i0, i1, i2, i4, i5, $i6, i8;
        short s3, $s7;
        boolean $z0, $z1, $z2, $z3;
        boolean[] $r1, $r7, $r15;
        short[][] $r2, $r4, $r8, $r16;
        short[] $r3, $r5, $r9, $r17;
        boolean[][] $r6, $r14, $r22;
        int[][] $r10, $r12, $r19, $r21;
        int[] $r11, $r13, r18, $r20;

        r0 := @this: sun.text.UCompactIntArray;
        $z0 = r0.<sun.text.UCompactIntArray: boolean isCompact>;
        if $z0 == 0 goto label0;

        return;

     label0:
        i0 = 0;

     label1:
        if i0 >= 16 goto label10;

        $r1 = r0.<sun.text.UCompactIntArray: boolean[] planeTouched>;
        $z1 = $r1[i0];
        if $z1 != 0 goto label2;

        goto label9;

     label2:
        i1 = 0;
        i2 = 0;
        s3 = -1;
        i4 = 0;

     label3:
        $r2 = r0.<sun.text.UCompactIntArray: short[][] indices>;
        $r3 = $r2[i0];
        $i6 = lengthof $r3;
        if i4 >= $i6 goto label8;

        $r4 = r0.<sun.text.UCompactIntArray: short[][] indices>;
        $r5 = $r4[i0];
        $r5[i4] = -1;
        $r6 = r0.<sun.text.UCompactIntArray: boolean[][] blockTouched>;
        $r7 = $r6[i0];
        $z2 = $r7[i4];
        if $z2 != 0 goto label4;

        if s3 == -1 goto label4;

        $r8 = r0.<sun.text.UCompactIntArray: short[][] indices>;
        $r9 = $r8[i0];
        $r9[i4] = s3;
        goto label7;

     label4:
        i5 = i1 * 128;
        if i4 <= i1 goto label5;

        $r10 = r0.<sun.text.UCompactIntArray: int[][] values>;
        $r11 = $r10[i0];
        $r12 = r0.<sun.text.UCompactIntArray: int[][] values>;
        $r13 = $r12[i0];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, i2, $r13, i5, 128);

     label5:
        $r14 = r0.<sun.text.UCompactIntArray: boolean[][] blockTouched>;
        $r15 = $r14[i0];
        $z3 = $r15[i4];
        if $z3 != 0 goto label6;

        s3 = (short) i5;

     label6:
        $r16 = r0.<sun.text.UCompactIntArray: short[][] indices>;
        $r17 = $r16[i0];
        $s7 = (short) i5;
        $r17[i4] = $s7;
        i1 = i1 + 1;

     label7:
        i4 = i4 + 1;
        i2 = i2 + 128;
        goto label3;

     label8:
        i8 = i1 * 128;
        r18 = newarray (int)[i8];
        $r19 = r0.<sun.text.UCompactIntArray: int[][] values>;
        $r20 = $r19[i0];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r20, 0, r18, 0, i8);
        $r21 = r0.<sun.text.UCompactIntArray: int[][] values>;
        $r21[i0] = r18;
        $r22 = r0.<sun.text.UCompactIntArray: boolean[][] blockTouched>;
        $r22[i0] = null;

     label9:
        i0 = i0 + 1;
        goto label1;

     label10:
        r0.<sun.text.UCompactIntArray: boolean isCompact> = 1;
        return;
    }

    private void expand()
    {
        sun.text.UCompactIntArray r0;
        int i0, i1, $i2, $i4, $i5, $i6, $i7, $i8, i9, $i10;
        int[] r1, $r6;
        boolean $z0, $z1;
        boolean[] $r2, $r4, $r10;
        boolean[][] $r3, $r9;
        int[][] $r5, $r13;
        short[][] $r7, $r11;
        short[] $r8, $r12;
        short $s3, $s11;

        r0 := @this: sun.text.UCompactIntArray;
        $z0 = r0.<sun.text.UCompactIntArray: boolean isCompact>;
        if $z0 == 0 goto label8;

        i0 = 0;

     label0:
        if i0 >= 16 goto label7;

        $r2 = r0.<sun.text.UCompactIntArray: boolean[] planeTouched>;
        $z1 = $r2[i0];
        if $z1 != 0 goto label1;

        goto label6;

     label1:
        $r3 = r0.<sun.text.UCompactIntArray: boolean[][] blockTouched>;
        $r4 = newarray (boolean)[512];
        $r3[i0] = $r4;
        r1 = newarray (int)[65536];
        i1 = 0;

     label2:
        if i1 >= 65536 goto label3;

        $r5 = r0.<sun.text.UCompactIntArray: int[][] values>;
        $r6 = $r5[i0];
        $r7 = r0.<sun.text.UCompactIntArray: short[][] indices>;
        $r8 = $r7[i0];
        $i2 = i1 >> 7;
        $s3 = $r8[$i2];
        $i4 = i1 & 127;
        $i5 = 65535 + $i4;
        $i6 = $s3 & $i5;
        $i7 = $r6[$i6];
        r1[i1] = $i7;
        $r9 = r0.<sun.text.UCompactIntArray: boolean[][] blockTouched>;
        $r10 = $r9[i0];
        $i8 = i1 >> 7;
        $r10[$i8] = 1;
        i1 = i1 + 1;
        goto label2;

     label3:
        i9 = 0;

     label4:
        if i9 >= 512 goto label5;

        $r11 = r0.<sun.text.UCompactIntArray: short[][] indices>;
        $r12 = $r11[i0];
        $i10 = i9 << 7;
        $s11 = (short) $i10;
        $r12[i9] = $s11;
        i9 = i9 + 1;
        goto label4;

     label5:
        $r13 = r0.<sun.text.UCompactIntArray: int[][] values>;
        $r13[i0] = r1;

     label6:
        i0 = i0 + 1;
        goto label0;

     label7:
        r0.<sun.text.UCompactIntArray: boolean isCompact> = 0;

     label8:
        return;
    }

    private void initPlane(int)
    {
        sun.text.UCompactIntArray r0;
        int i0, i1, $i2, i4, $i5;
        int[][] $r1, $r15;
        int[] $r2, $r16;
        short[][] $r3, $r9, $r11, $r13;
        short[] $r4, $r10, $r12, $r14;
        boolean[][] $r5;
        boolean[] $r6, $r7, $r8;
        boolean $z0;
        short $s3;

        r0 := @this: sun.text.UCompactIntArray;
        i0 := @parameter0: int;
        $r1 = r0.<sun.text.UCompactIntArray: int[][] values>;
        $r2 = newarray (int)[65536];
        $r1[i0] = $r2;
        $r3 = r0.<sun.text.UCompactIntArray: short[][] indices>;
        $r4 = newarray (short)[512];
        $r3[i0] = $r4;
        $r5 = r0.<sun.text.UCompactIntArray: boolean[][] blockTouched>;
        $r6 = newarray (boolean)[512];
        $r5[i0] = $r6;
        $r7 = r0.<sun.text.UCompactIntArray: boolean[] planeTouched>;
        $r7[i0] = 1;
        $r8 = r0.<sun.text.UCompactIntArray: boolean[] planeTouched>;
        $z0 = $r8[0];
        if $z0 == 0 goto label0;

        if i0 == 0 goto label0;

        $r9 = r0.<sun.text.UCompactIntArray: short[][] indices>;
        $r10 = $r9[0];
        $r11 = r0.<sun.text.UCompactIntArray: short[][] indices>;
        $r12 = $r11[i0];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r12, 0, 512);
        goto label2;

     label0:
        i1 = 0;

     label1:
        if i1 >= 512 goto label2;

        $r13 = r0.<sun.text.UCompactIntArray: short[][] indices>;
        $r14 = $r13[i0];
        $i2 = i1 << 7;
        $s3 = (short) $i2;
        $r14[i1] = $s3;
        i1 = i1 + 1;
        goto label1;

     label2:
        i4 = 0;

     label3:
        if i4 >= 65536 goto label4;

        $r15 = r0.<sun.text.UCompactIntArray: int[][] values>;
        $r16 = $r15[i0];
        $i5 = r0.<sun.text.UCompactIntArray: int defaultValue>;
        $r16[i4] = $i5;
        i4 = i4 + 1;
        goto label3;

     label4:
        return;
    }

    public int getKSize()
    {
        sun.text.UCompactIntArray r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean[] $r1;
        boolean $z0;
        int[][] $r2;
        int[] $r3;
        short[][] $r4;
        short[] $r5;

        r0 := @this: sun.text.UCompactIntArray;
        i0 = 0;
        i1 = 0;

     label0:
        if i1 >= 16 goto label2;

        $r1 = r0.<sun.text.UCompactIntArray: boolean[] planeTouched>;
        $z0 = $r1[i1];
        if $z0 == 0 goto label1;

        $r2 = r0.<sun.text.UCompactIntArray: int[][] values>;
        $r3 = $r2[i1];
        $i2 = lengthof $r3;
        $i3 = $i2 * 4;
        $r4 = r0.<sun.text.UCompactIntArray: short[][] indices>;
        $r5 = $r4[i1];
        $i4 = lengthof $r5;
        $i5 = $i4 * 2;
        $i6 = $i3 + $i5;
        i0 = i0 + $i6;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        $i7 = i0 / 1024;
        return $i7;
    }
}
