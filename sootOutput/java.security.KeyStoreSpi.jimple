public abstract class java.security.KeyStoreSpi extends java.lang.Object
{

    public void <init>()
    {
        java.security.KeyStoreSpi r0;

        r0 := @this: java.security.KeyStoreSpi;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public abstract java.security.Key engineGetKey(java.lang.String, char[]) throws java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException;

    public abstract java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String);

    public abstract java.security.cert.Certificate engineGetCertificate(java.lang.String);

    public abstract java.util.Date engineGetCreationDate(java.lang.String);

    public abstract void engineSetKeyEntry(java.lang.String, java.security.Key, char[], java.security.cert.Certificate[]) throws java.security.KeyStoreException;

    public abstract void engineSetKeyEntry(java.lang.String, byte[], java.security.cert.Certificate[]) throws java.security.KeyStoreException;

    public abstract void engineSetCertificateEntry(java.lang.String, java.security.cert.Certificate) throws java.security.KeyStoreException;

    public abstract void engineDeleteEntry(java.lang.String) throws java.security.KeyStoreException;

    public abstract java.util.Enumeration engineAliases();

    public abstract boolean engineContainsAlias(java.lang.String);

    public abstract int engineSize();

    public abstract boolean engineIsKeyEntry(java.lang.String);

    public abstract boolean engineIsCertificateEntry(java.lang.String);

    public abstract java.lang.String engineGetCertificateAlias(java.security.cert.Certificate);

    public abstract void engineStore(java.io.OutputStream, char[]) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException;

    public void engineStore(java.security.KeyStore$LoadStoreParameter) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    {
        java.security.KeyStoreSpi r0;
        java.security.KeyStore$LoadStoreParameter r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.security.KeyStoreSpi;
        r1 := @parameter0: java.security.KeyStore$LoadStoreParameter;
        $r2 = new java.lang.UnsupportedOperationException;
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r2;
    }

    public abstract void engineLoad(java.io.InputStream, char[]) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException;

    public void engineLoad(java.security.KeyStore$LoadStoreParameter) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    {
        java.security.KeyStoreSpi r0;
        java.security.KeyStore$LoadStoreParameter r1;
        java.security.KeyStore$ProtectionParameter r2;
        char[] r3, $r8;
        javax.security.auth.callback.CallbackHandler r4;
        javax.security.auth.callback.PasswordCallback r5, $r11;
        javax.security.auth.callback.UnsupportedCallbackException r6, $r13;
        java.io.InputStream $r7;
        boolean $z0, $z1, $z2;
        java.security.KeyStore$PasswordProtection $r9;
        java.security.KeyStore$CallbackHandlerProtection $r10;
        javax.security.auth.callback.Callback[] $r12;
        java.security.NoSuchAlgorithmException $r14, $r15, $r16;
        java.lang.UnsupportedOperationException $r17;

        r0 := @this: java.security.KeyStoreSpi;
        r1 := @parameter0: java.security.KeyStore$LoadStoreParameter;
        if r1 != null goto label0;

        $r7 = (java.io.InputStream) null;
        $r8 = (char[]) null;
        virtualinvoke r0.<java.security.KeyStoreSpi: void engineLoad(java.io.InputStream,char[])>($r7, $r8);
        return;

     label0:
        $z0 = r1 instanceof java.security.KeyStore$SimpleLoadStoreParameter;
        if $z0 == 0 goto label9;

        r2 = interfaceinvoke r1.<java.security.KeyStore$LoadStoreParameter: java.security.KeyStore$ProtectionParameter getProtectionParameter()>();
        $z1 = r2 instanceof java.security.KeyStore$PasswordProtection;
        if $z1 == 0 goto label1;

        $r9 = (java.security.KeyStore$PasswordProtection) r2;
        r3 = virtualinvoke $r9.<java.security.KeyStore$PasswordProtection: char[] getPassword()>();
        goto label8;

     label1:
        $z2 = r2 instanceof java.security.KeyStore$CallbackHandlerProtection;
        if $z2 == 0 goto label7;

        $r10 = (java.security.KeyStore$CallbackHandlerProtection) r2;
        r4 = virtualinvoke $r10.<java.security.KeyStore$CallbackHandlerProtection: javax.security.auth.callback.CallbackHandler getCallbackHandler()>();
        $r11 = new javax.security.auth.callback.PasswordCallback;
        specialinvoke $r11.<javax.security.auth.callback.PasswordCallback: void <init>(java.lang.String,boolean)>("Password: ", 0);
        r5 = $r11;

     label2:
        $r12 = newarray (javax.security.auth.callback.Callback)[1];
        $r12[0] = r5;
        interfaceinvoke r4.<javax.security.auth.callback.CallbackHandler: void handle(javax.security.auth.callback.Callback[])>($r12);

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;
        r6 = $r13;
        $r14 = new java.security.NoSuchAlgorithmException;
        specialinvoke $r14.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>("Could not obtain password", r6);
        throw $r14;

     label5:
        r3 = virtualinvoke r5.<javax.security.auth.callback.PasswordCallback: char[] getPassword()>();
        virtualinvoke r5.<javax.security.auth.callback.PasswordCallback: void clearPassword()>();
        if r3 != null goto label6;

        $r15 = new java.security.NoSuchAlgorithmException;
        specialinvoke $r15.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>("No password provided");
        throw $r15;

     label6:
        goto label8;

     label7:
        $r16 = new java.security.NoSuchAlgorithmException;
        specialinvoke $r16.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>("ProtectionParameter must be PasswordProtection or CallbackHandlerProtection");
        throw $r16;

     label8:
        virtualinvoke r0.<java.security.KeyStoreSpi: void engineLoad(java.io.InputStream,char[])>(null, r3);
        return;

     label9:
        $r17 = new java.lang.UnsupportedOperationException;
        specialinvoke $r17.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r17;

        catch javax.security.auth.callback.UnsupportedCallbackException from label2 to label3 with label4;
    }

    public java.security.KeyStore$Entry engineGetEntry(java.lang.String, java.security.KeyStore$ProtectionParameter) throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableEntryException
    {
        java.security.KeyStoreSpi r0;
        java.lang.String r1;
        java.security.KeyStore$ProtectionParameter r2;
        java.security.KeyStore$PasswordProtection r3;
        char[] r4;
        java.security.Key r5;
        java.security.cert.Certificate[] r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.security.KeyStore$TrustedCertificateEntry $r7;
        java.security.cert.Certificate $r8;
        java.security.UnrecoverableKeyException $r9;
        java.lang.UnsupportedOperationException $r10, $r15;
        java.security.KeyStore$PrivateKeyEntry $r11;
        java.security.PrivateKey $r12;
        java.security.KeyStore$SecretKeyEntry $r13;
        javax.crypto.SecretKey $r14;

        r0 := @this: java.security.KeyStoreSpi;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.security.KeyStore$ProtectionParameter;
        $z0 = virtualinvoke r0.<java.security.KeyStoreSpi: boolean engineContainsAlias(java.lang.String)>(r1);
        if $z0 != 0 goto label0;

        return null;

     label0:
        if r2 != null goto label2;

        $z1 = virtualinvoke r0.<java.security.KeyStoreSpi: boolean engineIsCertificateEntry(java.lang.String)>(r1);
        if $z1 == 0 goto label1;

        $r7 = new java.security.KeyStore$TrustedCertificateEntry;
        $r8 = virtualinvoke r0.<java.security.KeyStoreSpi: java.security.cert.Certificate engineGetCertificate(java.lang.String)>(r1);
        specialinvoke $r7.<java.security.KeyStore$TrustedCertificateEntry: void <init>(java.security.cert.Certificate)>($r8);
        return $r7;

     label1:
        $r9 = new java.security.UnrecoverableKeyException;
        specialinvoke $r9.<java.security.UnrecoverableKeyException: void <init>(java.lang.String)>("requested entry requires a password");
        throw $r9;

     label2:
        $z2 = r2 instanceof java.security.KeyStore$PasswordProtection;
        if $z2 == 0 goto label5;

        $z3 = virtualinvoke r0.<java.security.KeyStoreSpi: boolean engineIsCertificateEntry(java.lang.String)>(r1);
        if $z3 == 0 goto label3;

        $r10 = new java.lang.UnsupportedOperationException;
        specialinvoke $r10.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("trusted certificate entries are not password-protected");
        throw $r10;

     label3:
        $z4 = virtualinvoke r0.<java.security.KeyStoreSpi: boolean engineIsKeyEntry(java.lang.String)>(r1);
        if $z4 == 0 goto label5;

        r3 = (java.security.KeyStore$PasswordProtection) r2;
        r4 = virtualinvoke r3.<java.security.KeyStore$PasswordProtection: char[] getPassword()>();
        r5 = virtualinvoke r0.<java.security.KeyStoreSpi: java.security.Key engineGetKey(java.lang.String,char[])>(r1, r4);
        $z5 = r5 instanceof java.security.PrivateKey;
        if $z5 == 0 goto label4;

        r6 = virtualinvoke r0.<java.security.KeyStoreSpi: java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String)>(r1);
        $r11 = new java.security.KeyStore$PrivateKeyEntry;
        $r12 = (java.security.PrivateKey) r5;
        specialinvoke $r11.<java.security.KeyStore$PrivateKeyEntry: void <init>(java.security.PrivateKey,java.security.cert.Certificate[])>($r12, r6);
        return $r11;

     label4:
        $z6 = r5 instanceof javax.crypto.SecretKey;
        if $z6 == 0 goto label5;

        $r13 = new java.security.KeyStore$SecretKeyEntry;
        $r14 = (javax.crypto.SecretKey) r5;
        specialinvoke $r13.<java.security.KeyStore$SecretKeyEntry: void <init>(javax.crypto.SecretKey)>($r14);
        return $r13;

     label5:
        $r15 = new java.lang.UnsupportedOperationException;
        specialinvoke $r15.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r15;
    }

    public void engineSetEntry(java.lang.String, java.security.KeyStore$Entry, java.security.KeyStore$ProtectionParameter) throws java.security.KeyStoreException
    {
        java.security.KeyStoreSpi r0;
        java.lang.String r1, $r27, $r29;
        java.security.KeyStore$Entry r2;
        java.security.KeyStore$ProtectionParameter r3;
        java.security.KeyStore$PasswordProtection r4;
        java.security.KeyStore$TrustedCertificateEntry r5;
        boolean $z0, $z1, $z2, $z3;
        java.security.KeyStoreException $r6, $r8, $r11, $r18, $r23;
        char[] $r7, $r10, $r14, $r17, $r21;
        java.security.cert.Certificate $r9;
        java.security.KeyStore$PrivateKeyEntry $r12, $r15;
        java.security.PrivateKey $r13;
        java.security.cert.Certificate[] $r16, $r22;
        java.security.KeyStore$SecretKeyEntry $r19;
        javax.crypto.SecretKey $r20;
        java.lang.StringBuilder $r24, $r25, $r28;
        java.lang.Class $r26;

        r0 := @this: java.security.KeyStoreSpi;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.security.KeyStore$Entry;
        r3 := @parameter2: java.security.KeyStore$ProtectionParameter;
        if r3 == null goto label0;

        $z0 = r3 instanceof java.security.KeyStore$PasswordProtection;
        if $z0 != 0 goto label0;

        $r6 = new java.security.KeyStoreException;
        specialinvoke $r6.<java.security.KeyStoreException: void <init>(java.lang.String)>("unsupported protection parameter");
        throw $r6;

     label0:
        r4 = null;
        if r3 == null goto label1;

        r4 = (java.security.KeyStore$PasswordProtection) r3;

     label1:
        $z1 = r2 instanceof java.security.KeyStore$TrustedCertificateEntry;
        if $z1 == 0 goto label3;

        if r3 == null goto label2;

        $r7 = virtualinvoke r4.<java.security.KeyStore$PasswordProtection: char[] getPassword()>();
        if $r7 == null goto label2;

        $r8 = new java.security.KeyStoreException;
        specialinvoke $r8.<java.security.KeyStoreException: void <init>(java.lang.String)>("trusted certificate entries are not password-protected");
        throw $r8;

     label2:
        r5 = (java.security.KeyStore$TrustedCertificateEntry) r2;
        $r9 = virtualinvoke r5.<java.security.KeyStore$TrustedCertificateEntry: java.security.cert.Certificate getTrustedCertificate()>();
        virtualinvoke r0.<java.security.KeyStoreSpi: void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate)>(r1, $r9);
        return;

     label3:
        $z2 = r2 instanceof java.security.KeyStore$PrivateKeyEntry;
        if $z2 == 0 goto label6;

        if r4 == null goto label4;

        $r10 = virtualinvoke r4.<java.security.KeyStore$PasswordProtection: char[] getPassword()>();
        if $r10 != null goto label5;

     label4:
        $r11 = new java.security.KeyStoreException;
        specialinvoke $r11.<java.security.KeyStoreException: void <init>(java.lang.String)>("non-null password required to create PrivateKeyEntry");
        throw $r11;

     label5:
        $r12 = (java.security.KeyStore$PrivateKeyEntry) r2;
        $r13 = virtualinvoke $r12.<java.security.KeyStore$PrivateKeyEntry: java.security.PrivateKey getPrivateKey()>();
        $r14 = virtualinvoke r4.<java.security.KeyStore$PasswordProtection: char[] getPassword()>();
        $r15 = (java.security.KeyStore$PrivateKeyEntry) r2;
        $r16 = virtualinvoke $r15.<java.security.KeyStore$PrivateKeyEntry: java.security.cert.Certificate[] getCertificateChain()>();
        virtualinvoke r0.<java.security.KeyStoreSpi: void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>(r1, $r13, $r14, $r16);
        return;

     label6:
        $z3 = r2 instanceof java.security.KeyStore$SecretKeyEntry;
        if $z3 == 0 goto label9;

        if r4 == null goto label7;

        $r17 = virtualinvoke r4.<java.security.KeyStore$PasswordProtection: char[] getPassword()>();
        if $r17 != null goto label8;

     label7:
        $r18 = new java.security.KeyStoreException;
        specialinvoke $r18.<java.security.KeyStoreException: void <init>(java.lang.String)>("non-null password required to create SecretKeyEntry");
        throw $r18;

     label8:
        $r19 = (java.security.KeyStore$SecretKeyEntry) r2;
        $r20 = virtualinvoke $r19.<java.security.KeyStore$SecretKeyEntry: javax.crypto.SecretKey getSecretKey()>();
        $r21 = virtualinvoke r4.<java.security.KeyStore$PasswordProtection: char[] getPassword()>();
        $r22 = (java.security.cert.Certificate[]) null;
        virtualinvoke r0.<java.security.KeyStoreSpi: void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>(r1, $r20, $r21, $r22);
        return;

     label9:
        $r23 = new java.security.KeyStoreException;
        $r24 = new java.lang.StringBuilder;
        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unsupported entry type: ");
        $r26 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();
        $r27 = virtualinvoke $r26.<java.lang.Class: java.lang.String getName()>();
        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r23.<java.security.KeyStoreException: void <init>(java.lang.String)>($r29);
        throw $r23;
    }

    public boolean engineEntryInstanceOf(java.lang.String, java.lang.Class)
    {
        java.security.KeyStoreSpi r0;
        java.lang.String r1;
        java.lang.Class r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.security.cert.Certificate $r3, $r4;

        r0 := @this: java.security.KeyStoreSpi;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Class;
        if r2 != class "java/security/KeyStore$TrustedCertificateEntry" goto label0;

        $z0 = virtualinvoke r0.<java.security.KeyStoreSpi: boolean engineIsCertificateEntry(java.lang.String)>(r1);
        return $z0;

     label0:
        if r2 != class "java/security/KeyStore$PrivateKeyEntry" goto label3;

        $z1 = virtualinvoke r0.<java.security.KeyStoreSpi: boolean engineIsKeyEntry(java.lang.String)>(r1);
        if $z1 == 0 goto label1;

        $r3 = virtualinvoke r0.<java.security.KeyStoreSpi: java.security.cert.Certificate engineGetCertificate(java.lang.String)>(r1);
        if $r3 == null goto label1;

        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        if r2 != class "java/security/KeyStore$SecretKeyEntry" goto label6;

        $z3 = virtualinvoke r0.<java.security.KeyStoreSpi: boolean engineIsKeyEntry(java.lang.String)>(r1);
        if $z3 == 0 goto label4;

        $r4 = virtualinvoke r0.<java.security.KeyStoreSpi: java.security.cert.Certificate engineGetCertificate(java.lang.String)>(r1);
        if $r4 != null goto label4;

        $z4 = 1;
        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;

     label6:
        return 0;
    }
}
