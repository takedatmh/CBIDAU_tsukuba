final class sun.text.normalizer.NormalizerBase$IsNextTrueStarter extends java.lang.Object implements sun.text.normalizer.NormalizerBase$IsNextBoundary
{

    private void <init>()
    {
        sun.text.normalizer.NormalizerBase$IsNextTrueStarter r0;

        r0 := @this: sun.text.normalizer.NormalizerBase$IsNextTrueStarter;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public boolean isNextBoundary(sun.text.normalizer.UCharacterIterator, int, int, int[])
    {
        sun.text.normalizer.NormalizerBase$IsNextTrueStarter r0;
        sun.text.normalizer.UCharacterIterator r1;
        int i0, i1, i2, $i4, $i5;
        int[] r2;
        long l3;
        boolean $z0;

        r0 := @this: sun.text.normalizer.NormalizerBase$IsNextTrueStarter;
        r1 := @parameter0: sun.text.normalizer.UCharacterIterator;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: int[];
        $i4 = i1 << 2;
        i2 = $i4 & 15;
        $i5 = i1 | i2;
        l3 = staticinvoke <sun.text.normalizer.NormalizerBase: long access$1100(sun.text.normalizer.UCharacterIterator,int,int,int[])>(r1, i0, $i5, r2);
        $z0 = staticinvoke <sun.text.normalizer.NormalizerImpl: boolean isTrueStarter(long,int,int)>(l3, i1, i2);
        return $z0;
    }

    void <init>(sun.text.normalizer.NormalizerBase$1)
    {
        sun.text.normalizer.NormalizerBase$IsNextTrueStarter r0;
        sun.text.normalizer.NormalizerBase$1 r1;

        r0 := @this: sun.text.normalizer.NormalizerBase$IsNextTrueStarter;
        r1 := @parameter0: sun.text.normalizer.NormalizerBase$1;
        specialinvoke r0.<sun.text.normalizer.NormalizerBase$IsNextTrueStarter: void <init>()>();
        return;
    }
}
