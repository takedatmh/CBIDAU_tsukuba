public abstract class java.nio.file.spi.FileSystemProvider extends java.lang.Object
{
    private static final java.lang.Object lock;
    private static volatile java.util.List installedProviders;
    private static boolean loadingProviders;

    private static java.lang.Void checkPermission()
    {
        java.lang.SecurityManager r0;
        java.lang.RuntimePermission $r1;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r0 == null goto label0;

        $r1 = new java.lang.RuntimePermission;
        specialinvoke $r1.<java.lang.RuntimePermission: void <init>(java.lang.String)>("fileSystemProvider");
        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r1);

     label0:
        return null;
    }

    private void <init>(java.lang.Void)
    {
        java.nio.file.spi.FileSystemProvider r0;
        java.lang.Void r1;

        r0 := @this: java.nio.file.spi.FileSystemProvider;
        r1 := @parameter0: java.lang.Void;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    protected void <init>()
    {
        java.nio.file.spi.FileSystemProvider r0;
        java.lang.Void $r1;

        r0 := @this: java.nio.file.spi.FileSystemProvider;
        $r1 = staticinvoke <java.nio.file.spi.FileSystemProvider: java.lang.Void checkPermission()>();
        specialinvoke r0.<java.nio.file.spi.FileSystemProvider: void <init>(java.lang.Void)>($r1);
        return;
    }

    private static java.util.List loadInstalledProviders()
    {
        java.util.ArrayList $r0, r1;
        java.util.ServiceLoader r2;
        java.util.Iterator r3, r6;
        java.nio.file.spi.FileSystemProvider r4, r7;
        java.lang.String r5, $r11;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.ClassLoader $r8;
        java.lang.Object $r9, $r10;

        $r0 = new java.util.ArrayList;
        specialinvoke $r0.<java.util.ArrayList: void <init>()>();
        r1 = $r0;
        $r8 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        r2 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "java/nio/file/spi/FileSystemProvider", $r8);
        r3 = virtualinvoke r2.<java.util.ServiceLoader: java.util.Iterator iterator()>();

     label0:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label5;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.nio.file.spi.FileSystemProvider) $r9;
        r5 = virtualinvoke r4.<java.nio.file.spi.FileSystemProvider: java.lang.String getScheme()>();
        $z2 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("file");
        if $z2 != 0 goto label4;

        z0 = 0;
        r6 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();
        if $z3 == 0 goto label3;

        $r10 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();
        r7 = (java.nio.file.spi.FileSystemProvider) $r10;
        $r11 = virtualinvoke r7.<java.nio.file.spi.FileSystemProvider: java.lang.String getScheme()>();
        $z4 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5);
        if $z4 == 0 goto label2;

        z0 = 1;
        goto label3;

     label2:
        goto label1;

     label3:
        if z0 != 0 goto label4;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r4);

     label4:
        goto label0;

     label5:
        return r1;
    }

    public static java.util.List installedProviders()
    {
        java.util.List $r0, r3, $r7, $r11, $r13;
        java.nio.file.spi.FileSystemProvider r1;
        java.lang.Object r2, $r6, $r10;
        java.lang.Throwable r4, $r12;
        java.nio.file.FileSystem $r5;
        boolean $z0;
        java.lang.Error $r8;
        java.nio.file.spi.FileSystemProvider$1 $r9;

        $r0 = <java.nio.file.spi.FileSystemProvider: java.util.List installedProviders>;
        if $r0 != null goto label7;

        $r5 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>();
        r1 = virtualinvoke $r5.<java.nio.file.FileSystem: java.nio.file.spi.FileSystemProvider provider()>();
        $r6 = <java.nio.file.spi.FileSystemProvider: java.lang.Object lock>;
        r2 = $r6;
        entermonitor $r6;

     label0:
        $r7 = <java.nio.file.spi.FileSystemProvider: java.util.List installedProviders>;
        if $r7 != null goto label2;

        $z0 = <java.nio.file.spi.FileSystemProvider: boolean loadingProviders>;
        if $z0 == 0 goto label1;

        $r8 = new java.lang.Error;
        specialinvoke $r8.<java.lang.Error: void <init>(java.lang.String)>("Circular loading of installed providers detected");
        throw $r8;

     label1:
        <java.nio.file.spi.FileSystemProvider: boolean loadingProviders> = 1;
        $r9 = new java.nio.file.spi.FileSystemProvider$1;
        specialinvoke $r9.<java.nio.file.spi.FileSystemProvider$1: void <init>()>();
        $r10 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r9);
        r3 = (java.util.List) $r10;
        interfaceinvoke r3.<java.util.List: void add(int,java.lang.Object)>(0, r1);
        $r11 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r3);
        <java.nio.file.spi.FileSystemProvider: java.util.List installedProviders> = $r11;

     label2:
        exitmonitor r2;

     label3:
        goto label7;

     label4:
        $r12 := @caughtexception;

     label5:
        r4 = $r12;
        exitmonitor r2;

     label6:
        throw r4;

     label7:
        $r13 = <java.nio.file.spi.FileSystemProvider: java.util.List installedProviders>;
        return $r13;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public abstract java.lang.String getScheme();

    public abstract java.nio.file.FileSystem newFileSystem(java.net.URI, java.util.Map) throws java.io.IOException;

    public abstract java.nio.file.FileSystem getFileSystem(java.net.URI);

    public abstract java.nio.file.Path getPath(java.net.URI);

    public java.nio.file.FileSystem newFileSystem(java.nio.file.Path, java.util.Map) throws java.io.IOException
    {
        java.nio.file.spi.FileSystemProvider r0;
        java.nio.file.Path r1;
        java.util.Map r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: java.nio.file.spi.FileSystemProvider;
        r1 := @parameter0: java.nio.file.Path;
        r2 := @parameter1: java.util.Map;
        $r3 = new java.lang.UnsupportedOperationException;
        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r3;
    }

    public transient java.io.InputStream newInputStream(java.nio.file.Path, java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.nio.file.spi.FileSystemProvider r0;
        java.nio.file.Path r1;
        java.nio.file.OpenOption[] r2, r3, $r12;
        int i0, i1, $i2;
        java.nio.file.OpenOption r4;
        java.lang.StringBuilder $r5, $r8, $r9, $r10;
        java.nio.file.StandardOpenOption $r6;
        java.lang.UnsupportedOperationException $r7;
        java.lang.String $r11;
        java.nio.channels.SeekableByteChannel $r13;
        java.io.InputStream $r14;

        r0 := @this: java.nio.file.spi.FileSystemProvider;
        r1 := @parameter0: java.nio.file.Path;
        r2 := @parameter1: java.nio.file.OpenOption[];
        $i2 = lengthof r2;
        if $i2 <= 0 goto label2;

        r3 = r2;
        i0 = lengthof r3;
        i1 = 0;

     label0:
        if i1 >= i0 goto label2;

        r4 = r3[i1];
        $r6 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption READ>;
        if r4 == $r6 goto label1;

        $r7 = new java.lang.UnsupportedOperationException;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not allowed");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r11);
        throw $r7;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        $r12 = newarray (java.nio.file.OpenOption)[0];
        $r13 = staticinvoke <java.nio.file.Files: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.nio.file.OpenOption[])>(r1, $r12);
        $r14 = staticinvoke <java.nio.channels.Channels: java.io.InputStream newInputStream(java.nio.channels.ReadableByteChannel)>($r13);
        return $r14;
    }

    public transient java.io.OutputStream newOutputStream(java.nio.file.Path, java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.nio.file.spi.FileSystemProvider r0;
        java.nio.file.Path r1;
        java.nio.file.OpenOption[] r2, r4;
        int i0, i1, i2, $i3;
        java.util.HashSet r3, $r6;
        java.nio.file.OpenOption r5;
        java.nio.file.StandardOpenOption $r7, $r8, $r9, $r11;
        java.lang.IllegalArgumentException $r10;
        java.nio.file.attribute.FileAttribute[] $r12;
        java.nio.channels.SeekableByteChannel $r13;
        java.io.OutputStream $r14;

        r0 := @this: java.nio.file.spi.FileSystemProvider;
        r1 := @parameter0: java.nio.file.Path;
        r2 := @parameter1: java.nio.file.OpenOption[];
        i0 = lengthof r2;
        $r6 = new java.util.HashSet;
        $i3 = i0 + 3;
        specialinvoke $r6.<java.util.HashSet: void <init>(int)>($i3);
        r3 = $r6;
        if i0 != 0 goto label0;

        $r7 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption CREATE>;
        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r7);
        $r8 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption TRUNCATE_EXISTING>;
        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r8);
        goto label3;

     label0:
        r4 = r2;
        i1 = lengthof r4;
        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        r5 = r4[i2];
        $r9 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption READ>;
        if r5 != $r9 goto label2;

        $r10 = new java.lang.IllegalArgumentException;
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("READ not allowed");
        throw $r10;

     label2:
        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r5);
        i2 = i2 + 1;
        goto label1;

     label3:
        $r11 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption WRITE>;
        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r11);
        $r12 = newarray (java.nio.file.attribute.FileAttribute)[0];
        $r13 = virtualinvoke r0.<java.nio.file.spi.FileSystemProvider: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>(r1, r3, $r12);
        $r14 = staticinvoke <java.nio.channels.Channels: java.io.OutputStream newOutputStream(java.nio.channels.WritableByteChannel)>($r13);
        return $r14;
    }

    public transient java.nio.channels.FileChannel newFileChannel(java.nio.file.Path, java.util.Set, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.nio.file.spi.FileSystemProvider r0;
        java.nio.file.Path r1;
        java.util.Set r2;
        java.nio.file.attribute.FileAttribute[] r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: java.nio.file.spi.FileSystemProvider;
        r1 := @parameter0: java.nio.file.Path;
        r2 := @parameter1: java.util.Set;
        r3 := @parameter2: java.nio.file.attribute.FileAttribute[];
        $r4 = new java.lang.UnsupportedOperationException;
        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r4;
    }

    public transient java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(java.nio.file.Path, java.util.Set, java.util.concurrent.ExecutorService, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.nio.file.spi.FileSystemProvider r0;
        java.nio.file.Path r1;
        java.util.Set r2;
        java.util.concurrent.ExecutorService r3;
        java.nio.file.attribute.FileAttribute[] r4;
        java.lang.UnsupportedOperationException $r5;

        r0 := @this: java.nio.file.spi.FileSystemProvider;
        r1 := @parameter0: java.nio.file.Path;
        r2 := @parameter1: java.util.Set;
        r3 := @parameter2: java.util.concurrent.ExecutorService;
        r4 := @parameter3: java.nio.file.attribute.FileAttribute[];
        $r5 = new java.lang.UnsupportedOperationException;
        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r5;
    }

    public abstract transient java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path, java.util.Set, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException;

    public abstract java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path, java.nio.file.DirectoryStream$Filter) throws java.io.IOException;

    public abstract transient void createDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException;

    public transient void createSymbolicLink(java.nio.file.Path, java.nio.file.Path, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.nio.file.spi.FileSystemProvider r0;
        java.nio.file.Path r1, r2;
        java.nio.file.attribute.FileAttribute[] r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: java.nio.file.spi.FileSystemProvider;
        r1 := @parameter0: java.nio.file.Path;
        r2 := @parameter1: java.nio.file.Path;
        r3 := @parameter2: java.nio.file.attribute.FileAttribute[];
        $r4 = new java.lang.UnsupportedOperationException;
        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r4;
    }

    public void createLink(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.spi.FileSystemProvider r0;
        java.nio.file.Path r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: java.nio.file.spi.FileSystemProvider;
        r1 := @parameter0: java.nio.file.Path;
        r2 := @parameter1: java.nio.file.Path;
        $r3 = new java.lang.UnsupportedOperationException;
        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r3;
    }

    public abstract void delete(java.nio.file.Path) throws java.io.IOException;

    public boolean deleteIfExists(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.spi.FileSystemProvider r0;
        java.nio.file.Path r1;
        java.nio.file.NoSuchFileException r2, $r3;
        boolean $z0;

        r0 := @this: java.nio.file.spi.FileSystemProvider;
        r1 := @parameter0: java.nio.file.Path;

     label0:
        virtualinvoke r0.<java.nio.file.spi.FileSystemProvider: void delete(java.nio.file.Path)>(r1);
        $z0 = 1;

     label1:
        return $z0;

     label2:
        $r3 := @caughtexception;
        r2 = $r3;
        return 0;

        catch java.nio.file.NoSuchFileException from label0 to label1 with label2;
    }

    public java.nio.file.Path readSymbolicLink(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.spi.FileSystemProvider r0;
        java.nio.file.Path r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.nio.file.spi.FileSystemProvider;
        r1 := @parameter0: java.nio.file.Path;
        $r2 = new java.lang.UnsupportedOperationException;
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r2;
    }

    public abstract transient void copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]) throws java.io.IOException;

    public abstract transient void move(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]) throws java.io.IOException;

    public abstract boolean isSameFile(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException;

    public abstract boolean isHidden(java.nio.file.Path) throws java.io.IOException;

    public abstract java.nio.file.FileStore getFileStore(java.nio.file.Path) throws java.io.IOException;

    public abstract transient void checkAccess(java.nio.file.Path, java.nio.file.AccessMode[]) throws java.io.IOException;

    public abstract transient java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path, java.lang.Class, java.nio.file.LinkOption[]);

    public abstract transient java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path, java.lang.Class, java.nio.file.LinkOption[]) throws java.io.IOException;

    public abstract transient java.util.Map readAttributes(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) throws java.io.IOException;

    public abstract transient void setAttribute(java.nio.file.Path, java.lang.String, java.lang.Object, java.nio.file.LinkOption[]) throws java.io.IOException;

    static java.util.List access$000()
    {
        java.util.List $r0;

        $r0 = staticinvoke <java.nio.file.spi.FileSystemProvider: java.util.List loadInstalledProviders()>();
        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;
        specialinvoke $r0.<java.lang.Object: void <init>()>();
        <java.nio.file.spi.FileSystemProvider: java.lang.Object lock> = $r0;
        <java.nio.file.spi.FileSystemProvider: boolean loadingProviders> = 0;
        return;
    }
}
