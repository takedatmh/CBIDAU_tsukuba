final class java.nio.channels.Channels$3 extends java.io.OutputStream
{
    private java.nio.ByteBuffer bb;
    private byte[] bs;
    private byte[] b1;
    final java.nio.channels.AsynchronousByteChannel val$ch;

    void <init>(java.nio.channels.AsynchronousByteChannel)
    {
        java.nio.channels.Channels$3 r0;
        java.nio.channels.AsynchronousByteChannel r1;

        r0 := @this: java.nio.channels.Channels$3;
        r1 := @parameter0: java.nio.channels.AsynchronousByteChannel;
        r0.<java.nio.channels.Channels$3: java.nio.channels.AsynchronousByteChannel val$ch> = r1;
        specialinvoke r0.<java.io.OutputStream: void <init>()>();
        r0.<java.nio.channels.Channels$3: java.nio.ByteBuffer bb> = null;
        r0.<java.nio.channels.Channels$3: byte[] bs> = null;
        r0.<java.nio.channels.Channels$3: byte[] b1> = null;
        return;
    }

    public synchronized void write(int) throws java.io.IOException
    {
        java.nio.channels.Channels$3 r0;
        int i0;
        byte[] $r1, $r2, $r3, $r4;
        byte $b1;

        r0 := @this: java.nio.channels.Channels$3;
        i0 := @parameter0: int;
        $r1 = r0.<java.nio.channels.Channels$3: byte[] b1>;
        if $r1 != null goto label0;

        $r2 = newarray (byte)[1];
        r0.<java.nio.channels.Channels$3: byte[] b1> = $r2;

     label0:
        $r3 = r0.<java.nio.channels.Channels$3: byte[] b1>;
        $b1 = (byte) i0;
        $r3[0] = $b1;
        $r4 = r0.<java.nio.channels.Channels$3: byte[] b1>;
        virtualinvoke r0.<java.nio.channels.Channels$3: void write(byte[])>($r4);
        return;
    }

    public synchronized void write(byte[], int, int) throws java.io.IOException
    {
        java.nio.channels.Channels$3 r0;
        byte[] r1, $r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.nio.ByteBuffer r2, $r7;
        boolean z0;
        java.util.concurrent.ExecutionException r3, $r13;
        java.lang.Throwable r4, $r15, $r19;
        java.lang.IndexOutOfBoundsException $r5;
        java.nio.channels.AsynchronousByteChannel $r10;
        java.util.concurrent.Future $r11;
        java.io.IOException $r14;
        java.lang.InterruptedException $r16, r17;
        java.lang.Thread $r18, $r20;

        r0 := @this: java.nio.channels.Channels$3;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i0 < 0 goto label0;

        $i2 = lengthof r1;
        if i0 > $i2 goto label0;

        if i1 < 0 goto label0;

        $i3 = i0 + i1;
        $i4 = lengthof r1;
        if $i3 > $i4 goto label0;

        $i5 = i0 + i1;
        if $i5 >= 0 goto label1;

     label0:
        $r5 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r5;

     label1:
        if i1 != 0 goto label2;

        return;

     label2:
        $r6 = r0.<java.nio.channels.Channels$3: byte[] bs>;
        if $r6 != r1 goto label3;

        $r7 = r0.<java.nio.channels.Channels$3: java.nio.ByteBuffer bb>;
        goto label4;

     label3:
        $r7 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

     label4:
        r2 = $r7;
        $i6 = i0 + i1;
        $i7 = virtualinvoke r2.<java.nio.ByteBuffer: int capacity()>();
        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i7);
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i8);
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i0);
        r0.<java.nio.channels.Channels$3: java.nio.ByteBuffer bb> = r2;
        r0.<java.nio.channels.Channels$3: byte[] bs> = r1;
        z0 = 0;

     label5:
        $i9 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();
        if $i9 <= 0 goto label10;

     label6:
        $r10 = r0.<java.nio.channels.Channels$3: java.nio.channels.AsynchronousByteChannel val$ch>;
        $r11 = interfaceinvoke $r10.<java.nio.channels.AsynchronousByteChannel: java.util.concurrent.Future write(java.nio.ByteBuffer)>(r2);
        interfaceinvoke $r11.<java.util.concurrent.Future: java.lang.Object get()>();

     label7:
        goto label5;

     label8:
        $r13 := @caughtexception;
        r3 = $r13;
        $r14 = new java.io.IOException;
        $r15 = virtualinvoke r3.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();
        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.Throwable)>($r15);
        throw $r14;

     label9:
        $r16 := @caughtexception;
        r17 = $r16;
        z0 = 1;
        goto label5;

     label10:
        if z0 == 0 goto label15;

        $r18 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        virtualinvoke $r18.<java.lang.Thread: void interrupt()>();
        goto label15;

     label11:
        $r19 := @caughtexception;

     label12:
        r4 = $r19;

     label13:
        if z0 == 0 goto label14;

        $r20 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        virtualinvoke $r20.<java.lang.Thread: void interrupt()>();

     label14:
        throw r4;

     label15:
        return;

        catch java.util.concurrent.ExecutionException from label6 to label7 with label8;
        catch java.lang.InterruptedException from label6 to label7 with label9;
        catch java.lang.Throwable from label5 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void close() throws java.io.IOException
    {
        java.nio.channels.Channels$3 r0;
        java.nio.channels.AsynchronousByteChannel $r1;

        r0 := @this: java.nio.channels.Channels$3;
        $r1 = r0.<java.nio.channels.Channels$3: java.nio.channels.AsynchronousByteChannel val$ch>;
        interfaceinvoke $r1.<java.nio.channels.AsynchronousByteChannel: void close()>();
        return;
    }
}
