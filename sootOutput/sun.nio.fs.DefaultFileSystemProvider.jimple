public class sun.nio.fs.DefaultFileSystemProvider extends java.lang.Object
{

    private void <init>()
    {
        sun.nio.fs.DefaultFileSystemProvider r0;

        r0 := @this: sun.nio.fs.DefaultFileSystemProvider;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    private static java.nio.file.spi.FileSystemProvider createProvider(java.lang.String)
    {
        java.lang.String r0;
        sun.nio.fs.DefaultFileSystemProvider$1 $r1;
        java.lang.Object $r2;
        java.nio.file.spi.FileSystemProvider $r3;

        r0 := @parameter0: java.lang.String;
        $r1 = new sun.nio.fs.DefaultFileSystemProvider$1;
        specialinvoke $r1.<sun.nio.fs.DefaultFileSystemProvider$1: void <init>(java.lang.String)>(r0);
        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        $r3 = (java.nio.file.spi.FileSystemProvider) $r2;
        return $r3;
    }

    public static java.nio.file.spi.FileSystemProvider create()
    {
        sun.security.action.GetPropertyAction $r0;
        java.lang.String r1;
        java.lang.Object $r2;
        boolean $z0, $z1, $z2, $z3;
        java.nio.file.spi.FileSystemProvider $r3, $r4, $r5;
        java.lang.AssertionError $r6;

        $r0 = new sun.security.action.GetPropertyAction;
        specialinvoke $r0.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("os.name");
        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        r1 = (java.lang.String) $r2;
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("SunOS");
        if $z0 == 0 goto label0;

        $r3 = staticinvoke <sun.nio.fs.DefaultFileSystemProvider: java.nio.file.spi.FileSystemProvider createProvider(java.lang.String)>("sun.nio.fs.SolarisFileSystemProvider");
        return $r3;

     label0:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Linux");
        if $z1 == 0 goto label1;

        $r4 = staticinvoke <sun.nio.fs.DefaultFileSystemProvider: java.nio.file.spi.FileSystemProvider createProvider(java.lang.String)>("sun.nio.fs.LinuxFileSystemProvider");
        return $r4;

     label1:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Darwin");
        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("OS X");
        if $z3 == 0 goto label3;

     label2:
        $r5 = staticinvoke <sun.nio.fs.DefaultFileSystemProvider: java.nio.file.spi.FileSystemProvider createProvider(java.lang.String)>("sun.nio.fs.MacOSXFileSystemProvider");
        return $r5;

     label3:
        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("Platform not recognized");
        throw $r6;
    }
}
