abstract class java.util.HashMap$HashIterator extends java.lang.Object implements java.util.Iterator
{
    java.util.HashMap$Entry next;
    int expectedModCount;
    int index;
    java.util.HashMap$Entry current;
    final java.util.HashMap this$0;

    void <init>(java.util.HashMap)
    {
        java.util.HashMap$HashIterator r0;
        java.util.HashMap r1;
        java.util.HashMap$Entry[] r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.HashMap$Entry $r4;

        r0 := @this: java.util.HashMap$HashIterator;
        r1 := @parameter0: java.util.HashMap;
        r0.<java.util.HashMap$HashIterator: java.util.HashMap this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $i1 = r1.<java.util.HashMap: int modCount>;
        r0.<java.util.HashMap$HashIterator: int expectedModCount> = $i1;
        $i2 = r1.<java.util.HashMap: int size>;
        if $i2 <= 0 goto label1;

        r2 = r1.<java.util.HashMap: java.util.HashMap$Entry[] table>;

     label0:
        $i3 = r0.<java.util.HashMap$HashIterator: int index>;
        $i4 = lengthof r2;
        if $i3 >= $i4 goto label1;

        $i0 = r0.<java.util.HashMap$HashIterator: int index>;
        $i5 = $i0 + 1;
        r0.<java.util.HashMap$HashIterator: int index> = $i5;
        $r4 = r2[$i0];
        r0.<java.util.HashMap$HashIterator: java.util.HashMap$Entry next> = $r4;
        if $r4 != null goto label1;

        goto label0;

     label1:
        return;
    }

    public final boolean hasNext()
    {
        java.util.HashMap$HashIterator r0;
        java.util.HashMap$Entry $r1;
        boolean $z0;

        r0 := @this: java.util.HashMap$HashIterator;
        $r1 = r0.<java.util.HashMap$HashIterator: java.util.HashMap$Entry next>;
        if $r1 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    final java.util.HashMap$Entry nextEntry()
    {
        java.util.HashMap$HashIterator r0;
        java.util.HashMap$Entry r1, $r2, $r9;
        java.util.HashMap$Entry[] r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.HashMap $r4, $r7;
        java.util.ConcurrentModificationException $r5;
        java.util.NoSuchElementException $r6;

        r0 := @this: java.util.HashMap$HashIterator;
        $r4 = r0.<java.util.HashMap$HashIterator: java.util.HashMap this$0>;
        $i1 = $r4.<java.util.HashMap: int modCount>;
        $i2 = r0.<java.util.HashMap$HashIterator: int expectedModCount>;
        if $i1 == $i2 goto label0;

        $r5 = new java.util.ConcurrentModificationException;
        specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r5;

     label0:
        r1 = r0.<java.util.HashMap$HashIterator: java.util.HashMap$Entry next>;
        if r1 != null goto label1;

        $r6 = new java.util.NoSuchElementException;
        specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>();
        throw $r6;

     label1:
        $r2 = r1.<java.util.HashMap$Entry: java.util.HashMap$Entry next>;
        r0.<java.util.HashMap$HashIterator: java.util.HashMap$Entry next> = $r2;
        if $r2 != null goto label3;

        $r7 = r0.<java.util.HashMap$HashIterator: java.util.HashMap this$0>;
        r3 = $r7.<java.util.HashMap: java.util.HashMap$Entry[] table>;

     label2:
        $i3 = r0.<java.util.HashMap$HashIterator: int index>;
        $i4 = lengthof r3;
        if $i3 >= $i4 goto label3;

        $i0 = r0.<java.util.HashMap$HashIterator: int index>;
        $i5 = $i0 + 1;
        r0.<java.util.HashMap$HashIterator: int index> = $i5;
        $r9 = r3[$i0];
        r0.<java.util.HashMap$HashIterator: java.util.HashMap$Entry next> = $r9;
        if $r9 != null goto label3;

        goto label2;

     label3:
        r0.<java.util.HashMap$HashIterator: java.util.HashMap$Entry current> = r1;
        return r1;
    }

    public void remove()
    {
        java.util.HashMap$HashIterator r0;
        java.lang.Object r1;
        java.util.HashMap$Entry $r2, $r6;
        java.lang.IllegalStateException $r3;
        java.util.HashMap $r4, $r7, $r9;
        int $i0, $i1, $i2;
        java.util.ConcurrentModificationException $r5;

        r0 := @this: java.util.HashMap$HashIterator;
        $r2 = r0.<java.util.HashMap$HashIterator: java.util.HashMap$Entry current>;
        if $r2 != null goto label0;

        $r3 = new java.lang.IllegalStateException;
        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();
        throw $r3;

     label0:
        $r4 = r0.<java.util.HashMap$HashIterator: java.util.HashMap this$0>;
        $i0 = $r4.<java.util.HashMap: int modCount>;
        $i1 = r0.<java.util.HashMap$HashIterator: int expectedModCount>;
        if $i0 == $i1 goto label1;

        $r5 = new java.util.ConcurrentModificationException;
        specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r5;

     label1:
        $r6 = r0.<java.util.HashMap$HashIterator: java.util.HashMap$Entry current>;
        r1 = $r6.<java.util.HashMap$Entry: java.lang.Object key>;
        r0.<java.util.HashMap$HashIterator: java.util.HashMap$Entry current> = null;
        $r7 = r0.<java.util.HashMap$HashIterator: java.util.HashMap this$0>;
        virtualinvoke $r7.<java.util.HashMap: java.util.HashMap$Entry removeEntryForKey(java.lang.Object)>(r1);
        $r9 = r0.<java.util.HashMap$HashIterator: java.util.HashMap this$0>;
        $i2 = $r9.<java.util.HashMap: int modCount>;
        r0.<java.util.HashMap$HashIterator: int expectedModCount> = $i2;
        return;
    }
}
