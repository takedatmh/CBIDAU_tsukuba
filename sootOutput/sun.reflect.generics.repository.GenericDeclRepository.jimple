public abstract class sun.reflect.generics.repository.GenericDeclRepository extends sun.reflect.generics.repository.AbstractRepository
{
    private java.lang.reflect.TypeVariable[] typeParams;

    protected void <init>(java.lang.String, sun.reflect.generics.factory.GenericsFactory)
    {
        sun.reflect.generics.repository.GenericDeclRepository r0;
        java.lang.String r1;
        sun.reflect.generics.factory.GenericsFactory r2;

        r0 := @this: sun.reflect.generics.repository.GenericDeclRepository;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: sun.reflect.generics.factory.GenericsFactory;
        specialinvoke r0.<sun.reflect.generics.repository.AbstractRepository: void <init>(java.lang.String,sun.reflect.generics.factory.GenericsFactory)>(r1, r2);
        return;
    }

    public java.lang.reflect.TypeVariable[] getTypeParameters()
    {
        sun.reflect.generics.repository.GenericDeclRepository r0;
        sun.reflect.generics.tree.FormalTypeParameter[] r1;
        java.lang.reflect.TypeVariable[] r2, $r4, $r10, $r12;
        int i0, $i1, $i2;
        sun.reflect.generics.visitor.Reifier r3;
        sun.reflect.generics.tree.Tree $r5;
        sun.reflect.generics.tree.Signature $r6;
        sun.reflect.generics.tree.FormalTypeParameter $r7;
        java.lang.reflect.Type $r8;
        java.lang.reflect.TypeVariable $r9;
        java.lang.Object $r11;

        r0 := @this: sun.reflect.generics.repository.GenericDeclRepository;
        $r4 = r0.<sun.reflect.generics.repository.GenericDeclRepository: java.lang.reflect.TypeVariable[] typeParams>;
        if $r4 != null goto label2;

        $r5 = virtualinvoke r0.<sun.reflect.generics.repository.GenericDeclRepository: sun.reflect.generics.tree.Tree getTree()>();
        $r6 = (sun.reflect.generics.tree.Signature) $r5;
        r1 = interfaceinvoke $r6.<sun.reflect.generics.tree.Signature: sun.reflect.generics.tree.FormalTypeParameter[] getFormalTypeParameters()>();
        $i1 = lengthof r1;
        r2 = newarray (java.lang.reflect.TypeVariable)[$i1];
        i0 = 0;

     label0:
        $i2 = lengthof r1;
        if i0 >= $i2 goto label1;

        r3 = virtualinvoke r0.<sun.reflect.generics.repository.GenericDeclRepository: sun.reflect.generics.visitor.Reifier getReifier()>();
        $r7 = r1[i0];
        virtualinvoke $r7.<sun.reflect.generics.tree.FormalTypeParameter: void accept(sun.reflect.generics.visitor.TypeTreeVisitor)>(r3);
        $r8 = virtualinvoke r3.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type getResult()>();
        $r9 = (java.lang.reflect.TypeVariable) $r8;
        r2[i0] = $r9;
        i0 = i0 + 1;
        goto label0;

     label1:
        r0.<sun.reflect.generics.repository.GenericDeclRepository: java.lang.reflect.TypeVariable[] typeParams> = r2;

     label2:
        $r10 = r0.<sun.reflect.generics.repository.GenericDeclRepository: java.lang.reflect.TypeVariable[] typeParams>;
        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.Object clone()>();
        $r12 = (java.lang.reflect.TypeVariable[]) $r11;
        return $r12;
    }
}
