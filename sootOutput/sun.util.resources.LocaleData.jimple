public class sun.util.resources.LocaleData extends java.lang.Object
{
    private static final java.lang.String localeDataJarName;

    public void <init>()
    {
        sun.util.resources.LocaleData r0;

        r0 := @this: sun.util.resources.LocaleData;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static java.util.Locale[] getAvailableLocales()
    {
        java.util.Locale[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <sun.util.resources.LocaleData$AvailableLocales: java.util.Locale[] localeList>;
        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();
        $r2 = (java.util.Locale[]) $r1;
        return $r2;
    }

    public static java.util.ResourceBundle getCalendarData(java.util.Locale)
    {
        java.util.Locale r0;
        java.util.ResourceBundle $r1;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>("sun.util.resources.CalendarData", r0);
        return $r1;
    }

    public static sun.util.resources.OpenListResourceBundle getCurrencyNames(java.util.Locale)
    {
        java.util.Locale r0;
        java.util.ResourceBundle $r1;
        sun.util.resources.OpenListResourceBundle $r2;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>("sun.util.resources.CurrencyNames", r0);
        $r2 = (sun.util.resources.OpenListResourceBundle) $r1;
        return $r2;
    }

    public static sun.util.resources.OpenListResourceBundle getLocaleNames(java.util.Locale)
    {
        java.util.Locale r0;
        java.util.ResourceBundle $r1;
        sun.util.resources.OpenListResourceBundle $r2;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>("sun.util.resources.LocaleNames", r0);
        $r2 = (sun.util.resources.OpenListResourceBundle) $r1;
        return $r2;
    }

    public static sun.util.resources.OpenListResourceBundle getTimeZoneNames(java.util.Locale)
    {
        java.util.Locale r0;
        java.util.ResourceBundle $r1;
        sun.util.resources.OpenListResourceBundle $r2;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>("sun.util.resources.TimeZoneNames", r0);
        $r2 = (sun.util.resources.OpenListResourceBundle) $r1;
        return $r2;
    }

    public static java.util.ResourceBundle getCollationData(java.util.Locale)
    {
        java.util.Locale r0;
        java.util.ResourceBundle $r1;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>("sun.text.resources.CollationData", r0);
        return $r1;
    }

    public static java.util.ResourceBundle getDateFormatData(java.util.Locale)
    {
        java.util.Locale r0;
        java.util.ResourceBundle $r1;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>("sun.text.resources.FormatData", r0);
        return $r1;
    }

    public static java.util.ResourceBundle getNumberFormatData(java.util.Locale)
    {
        java.util.Locale r0;
        java.util.ResourceBundle $r1;

        r0 := @parameter0: java.util.Locale;
        $r1 = staticinvoke <sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>("sun.text.resources.FormatData", r0);
        return $r1;
    }

    private static java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale)
    {
        java.lang.String r0;
        java.util.Locale r1;
        sun.util.resources.LocaleData$1 $r2;
        java.lang.Object $r3;
        java.util.ResourceBundle $r4;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.util.Locale;
        $r2 = new sun.util.resources.LocaleData$1;
        specialinvoke $r2.<sun.util.resources.LocaleData$1: void <init>(java.lang.String,java.util.Locale)>(r0, r1);
        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);
        $r4 = (java.util.ResourceBundle) $r3;
        return $r4;
    }

    private static boolean isNonEuroLangSupported()
    {
        java.lang.String r0, r1, $r6;
        java.io.File r2, $r14;
        boolean z0;
        java.lang.StringBuilder $r3, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        sun.security.action.GetPropertyAction $r4;
        java.lang.Object $r5, $r16;
        sun.util.resources.LocaleData$2 $r15;
        java.lang.Boolean $r17;

        r0 = <java.io.File: java.lang.String separator>;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = new sun.security.action.GetPropertyAction;
        specialinvoke $r4.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("java.home");
        $r5 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r4);
        $r6 = (java.lang.String) $r5;
        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lib");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ext");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("localedata.jar");
        r1 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        $r14 = new java.io.File;
        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>(r1);
        r2 = $r14;
        $r15 = new sun.util.resources.LocaleData$2;
        specialinvoke $r15.<sun.util.resources.LocaleData$2: void <init>(java.io.File)>(r2);
        $r16 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r15);
        $r17 = (java.lang.Boolean) $r16;
        z0 = virtualinvoke $r17.<java.lang.Boolean: boolean booleanValue()>();
        return z0;
    }

    private static java.util.Locale[] createLocaleList()
    {
        java.lang.String r0, r3, $r5, $r7, $r9, $r12, $r13;
        int i0, i1, $i2, $i3, $i4, $i5;
        null_type n0;
        java.lang.StringBuilder $r1, $r6, $r8;
        java.util.Locale[] r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.StringTokenizer $r4, r10, $r11;
        java.util.Locale $r14;

        r0 = staticinvoke <sun.util.LocaleDataMetaInfo: java.lang.String getSupportedLocaleString(java.lang.String)>("sun.text.resources.FormatData");
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i2 != 0 goto label0;

        return null;

     label0:
        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("|");
        n0 = null;
        $z0 = staticinvoke <sun.util.resources.LocaleData: boolean isNonEuroLangSupported()>();
        if $z0 == 0 goto label1;

        $r4 = new java.util.StringTokenizer;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $i3 = i0 + 1;
        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i3);
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.util.StringTokenizer: void <init>(java.lang.String)>($r9);
        r10 = $r4;
        goto label2;

     label1:
        $r11 = new java.util.StringTokenizer;
        $r12 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        specialinvoke $r11.<java.util.StringTokenizer: void <init>(java.lang.String)>($r12);
        r10 = $r11;

     label2:
        $i4 = virtualinvoke r10.<java.util.StringTokenizer: int countTokens()>();
        r2 = newarray (java.util.Locale)[$i4];
        i1 = 0;

     label3:
        $i5 = lengthof r2;
        if i1 >= $i5 goto label7;

        $r13 = virtualinvoke r10.<java.util.StringTokenizer: java.lang.String nextToken()>();
        r3 = virtualinvoke $r13.<java.lang.String: java.lang.String replace(char,char)>(95, 45);
        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("ja-JP-JP");
        if $z1 == 0 goto label4;

        r3 = "ja-JP-u-ca-japanese-x-lvariant-JP";
        goto label6;

     label4:
        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("th-TH-TH");
        if $z2 == 0 goto label5;

        r3 = "th-TH-u-nu-thai-x-lvariant-TH";
        goto label6;

     label5:
        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("no-NO-NY");
        if $z3 == 0 goto label6;

        r3 = "no-NO-x-lvariant-NY";

     label6:
        $r14 = staticinvoke <java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>(r3);
        r2[i1] = $r14;
        i1 = i1 + 1;
        goto label3;

     label7:
        return r2;
    }

    static java.util.Locale[] access$000()
    {
        java.util.Locale[] $r0;

        $r0 = staticinvoke <sun.util.resources.LocaleData: java.util.Locale[] createLocaleList()>();
        return $r0;
    }
}
