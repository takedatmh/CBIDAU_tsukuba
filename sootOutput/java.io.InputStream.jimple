public abstract class java.io.InputStream extends java.lang.Object implements java.io.Closeable
{
    private static final int MAX_SKIP_BUFFER_SIZE;

    public void <init>()
    {
        java.io.InputStream r0;

        r0 := @this: java.io.InputStream;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public abstract int read() throws java.io.IOException;

    public int read(byte[]) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: java.io.InputStream;
        r1 := @parameter0: byte[];
        $i0 = lengthof r1;
        $i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, 0, $i0);
        return $i1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, i2, i3, $i4, $i5, i7, $i8;
        java.io.IOException r2, $r5;
        java.lang.NullPointerException $r3;
        java.lang.IndexOutOfBoundsException $r4;
        byte $b6, $b9;

        r0 := @this: java.io.InputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i4 = lengthof r1;
        $i5 = $i4 - i0;
        if i1 <= $i5 goto label2;

     label1:
        $r4 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r4;

     label2:
        if i1 != 0 goto label3;

        return 0;

     label3:
        i2 = virtualinvoke r0.<java.io.InputStream: int read()>();
        if i2 != -1 goto label4;

        return -1;

     label4:
        $b6 = (byte) i2;
        r1[i0] = $b6;
        i3 = 1;

     label5:
        if i3 >= i1 goto label7;

        i7 = virtualinvoke r0.<java.io.InputStream: int read()>();
        if i7 != -1 goto label6;

        goto label7;

     label6:
        $i8 = i0 + i3;
        $b9 = (byte) i7;
        r1[$i8] = $b9;
        i3 = i3 + 1;
        goto label5;

     label7:
        goto label9;

     label8:
        $r5 := @caughtexception;
        r2 = $r5;

     label9:
        return i3;

        catch java.io.IOException from label5 to label7 with label8;
    }

    public long skip(long) throws java.io.IOException
    {
        java.io.InputStream r0;
        long l0, l1, $l5, $l7, $l8, $l10, $l11;
        int i2, i3, $i9;
        byte[] r1;
        byte $b4, $b6;

        r0 := @this: java.io.InputStream;
        l0 := @parameter0: long;
        l1 = l0;
        $b4 = l0 cmp 0L;
        if $b4 > 0 goto label0;

        return 0L;

     label0:
        $l5 = staticinvoke <java.lang.Math: long min(long,long)>(2048L, l1);
        i2 = (int) $l5;
        r1 = newarray (byte)[i2];

     label1:
        $b6 = l1 cmp 0L;
        if $b6 <= 0 goto label3;

        $l7 = (long) i2;
        $l8 = staticinvoke <java.lang.Math: long min(long,long)>($l7, l1);
        $i9 = (int) $l8;
        i3 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, 0, $i9);
        if i3 >= 0 goto label2;

        goto label3;

     label2:
        $l10 = (long) i3;
        l1 = l1 - $l10;
        goto label1;

     label3:
        $l11 = l0 - l1;
        return $l11;
    }

    public int available() throws java.io.IOException
    {
        java.io.InputStream r0;

        r0 := @this: java.io.InputStream;
        return 0;
    }

    public void close() throws java.io.IOException
    {
        java.io.InputStream r0;

        r0 := @this: java.io.InputStream;
        return;
    }

    public synchronized void mark(int)
    {
        java.io.InputStream r0;
        int i0;

        r0 := @this: java.io.InputStream;
        i0 := @parameter0: int;
        return;
    }

    public synchronized void reset() throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.IOException $r1;

        r0 := @this: java.io.InputStream;
        $r1 = new java.io.IOException;
        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("mark/reset not supported");
        throw $r1;
    }

    public boolean markSupported()
    {
        java.io.InputStream r0;

        r0 := @this: java.io.InputStream;
        return 0;
    }
}
