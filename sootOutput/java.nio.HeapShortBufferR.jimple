class java.nio.HeapShortBufferR extends java.nio.HeapShortBuffer
{

    void <init>(int, int)
    {
        java.nio.HeapShortBufferR r0;
        int i0, i1;

        r0 := @this: java.nio.HeapShortBufferR;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        specialinvoke r0.<java.nio.HeapShortBuffer: void <init>(int,int)>(i0, i1);
        r0.<java.nio.HeapShortBufferR: boolean isReadOnly> = 1;
        return;
    }

    void <init>(short[], int, int)
    {
        java.nio.HeapShortBufferR r0;
        short[] r1;
        int i0, i1;

        r0 := @this: java.nio.HeapShortBufferR;
        r1 := @parameter0: short[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.nio.HeapShortBuffer: void <init>(short[],int,int)>(r1, i0, i1);
        r0.<java.nio.HeapShortBufferR: boolean isReadOnly> = 1;
        return;
    }

    protected void <init>(short[], int, int, int, int, int)
    {
        java.nio.HeapShortBufferR r0;
        short[] r1;
        int i0, i1, i2, i3, i4;

        r0 := @this: java.nio.HeapShortBufferR;
        r1 := @parameter0: short[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        specialinvoke r0.<java.nio.HeapShortBuffer: void <init>(short[],int,int,int,int,int)>(r1, i0, i1, i2, i3, i4);
        r0.<java.nio.HeapShortBufferR: boolean isReadOnly> = 1;
        return;
    }

    public java.nio.ShortBuffer slice()
    {
        java.nio.HeapShortBufferR r0, $r1;
        short[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapShortBufferR;
        $r1 = new java.nio.HeapShortBufferR;
        $r2 = r0.<java.nio.HeapShortBufferR: short[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapShortBufferR: int remaining()>();
        $i1 = virtualinvoke r0.<java.nio.HeapShortBufferR: int remaining()>();
        $i2 = virtualinvoke r0.<java.nio.HeapShortBufferR: int position()>();
        $i3 = r0.<java.nio.HeapShortBufferR: int offset>;
        $i4 = $i2 + $i3;
        specialinvoke $r1.<java.nio.HeapShortBufferR: void <init>(short[],int,int,int,int,int)>($r2, -1, 0, $i0, $i1, $i4);
        return $r1;
    }

    public java.nio.ShortBuffer duplicate()
    {
        java.nio.HeapShortBufferR r0, $r1;
        short[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapShortBufferR;
        $r1 = new java.nio.HeapShortBufferR;
        $r2 = r0.<java.nio.HeapShortBufferR: short[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapShortBufferR: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.HeapShortBufferR: int position()>();
        $i2 = virtualinvoke r0.<java.nio.HeapShortBufferR: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.HeapShortBufferR: int capacity()>();
        $i4 = r0.<java.nio.HeapShortBufferR: int offset>;
        specialinvoke $r1.<java.nio.HeapShortBufferR: void <init>(short[],int,int,int,int,int)>($r2, $i0, $i1, $i2, $i3, $i4);
        return $r1;
    }

    public java.nio.ShortBuffer asReadOnlyBuffer()
    {
        java.nio.HeapShortBufferR r0;
        java.nio.ShortBuffer $r1;

        r0 := @this: java.nio.HeapShortBufferR;
        $r1 = virtualinvoke r0.<java.nio.HeapShortBufferR: java.nio.ShortBuffer duplicate()>();
        return $r1;
    }

    public boolean isReadOnly()
    {
        java.nio.HeapShortBufferR r0;

        r0 := @this: java.nio.HeapShortBufferR;
        return 1;
    }

    public java.nio.ShortBuffer put(short)
    {
        java.nio.HeapShortBufferR r0;
        short s0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapShortBufferR;
        s0 := @parameter0: short;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ShortBuffer put(int, short)
    {
        java.nio.HeapShortBufferR r0;
        int i0;
        short s1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapShortBufferR;
        i0 := @parameter0: int;
        s1 := @parameter1: short;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ShortBuffer put(short[], int, int)
    {
        java.nio.HeapShortBufferR r0;
        short[] r1;
        int i0, i1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.HeapShortBufferR;
        r1 := @parameter0: short[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r2;
    }

    public java.nio.ShortBuffer put(java.nio.ShortBuffer)
    {
        java.nio.HeapShortBufferR r0;
        java.nio.ShortBuffer r1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.HeapShortBufferR;
        r1 := @parameter0: java.nio.ShortBuffer;
        $r2 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r2;
    }

    public java.nio.ShortBuffer compact()
    {
        java.nio.HeapShortBufferR r0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.HeapShortBufferR;
        $r1 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r1;
    }

    public java.nio.ByteOrder order()
    {
        java.nio.HeapShortBufferR r0;
        java.nio.ByteOrder $r1;

        r0 := @this: java.nio.HeapShortBufferR;
        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();
        return $r1;
    }
}
