class sun.nio.ch.Util$BufferCache extends java.lang.Object
{
    private java.nio.ByteBuffer[] buffers;
    private int count;
    private int start;
    static final boolean $assertionsDisabled;

    private int next(int)
    {
        sun.nio.ch.Util$BufferCache r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: sun.nio.ch.Util$BufferCache;
        i0 := @parameter0: int;
        $i1 = i0 + 1;
        $i2 = staticinvoke <sun.nio.ch.Util: int access$000()>();
        $i3 = $i1 % $i2;
        return $i3;
    }

    void <init>()
    {
        sun.nio.ch.Util$BufferCache r0;
        int $i0;
        java.nio.ByteBuffer[] $r1;

        r0 := @this: sun.nio.ch.Util$BufferCache;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $i0 = staticinvoke <sun.nio.ch.Util: int access$000()>();
        $r1 = newarray (java.nio.ByteBuffer)[$i0];
        r0.<sun.nio.ch.Util$BufferCache: java.nio.ByteBuffer[] buffers> = $r1;
        return;
    }

    java.nio.ByteBuffer get(int)
    {
        sun.nio.ch.Util$BufferCache r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.nio.ByteBuffer[] r1;
        java.nio.ByteBuffer r2, r3, $r4;

        r0 := @this: sun.nio.ch.Util$BufferCache;
        i0 := @parameter0: int;
        $i2 = r0.<sun.nio.ch.Util$BufferCache: int count>;
        if $i2 != 0 goto label0;

        return null;

     label0:
        r1 = r0.<sun.nio.ch.Util$BufferCache: java.nio.ByteBuffer[] buffers>;
        $i3 = r0.<sun.nio.ch.Util$BufferCache: int start>;
        r2 = r1[$i3];
        $i4 = virtualinvoke r2.<java.nio.ByteBuffer: int capacity()>();
        if $i4 >= i0 goto label6;

        r2 = null;
        i1 = r0.<sun.nio.ch.Util$BufferCache: int start>;

     label1:
        $i5 = specialinvoke r0.<sun.nio.ch.Util$BufferCache: int next(int)>(i1);
        i1 = $i5;
        $i6 = r0.<sun.nio.ch.Util$BufferCache: int start>;
        if $i5 == $i6 goto label4;

        r3 = r1[i1];
        if r3 != null goto label2;

        goto label4;

     label2:
        $i7 = virtualinvoke r3.<java.nio.ByteBuffer: int capacity()>();
        if $i7 < i0 goto label3;

        r2 = r3;
        goto label4;

     label3:
        goto label1;

     label4:
        if r2 != null goto label5;

        return null;

     label5:
        $i8 = r0.<sun.nio.ch.Util$BufferCache: int start>;
        $r4 = r1[$i8];
        r1[i1] = $r4;

     label6:
        $i9 = r0.<sun.nio.ch.Util$BufferCache: int start>;
        r1[$i9] = null;
        $i10 = r0.<sun.nio.ch.Util$BufferCache: int start>;
        $i11 = specialinvoke r0.<sun.nio.ch.Util$BufferCache: int next(int)>($i10);
        r0.<sun.nio.ch.Util$BufferCache: int start> = $i11;
        $i12 = r0.<sun.nio.ch.Util$BufferCache: int count>;
        $i13 = $i12 - 1;
        r0.<sun.nio.ch.Util$BufferCache: int count> = $i13;
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i0);
        return r2;
    }

    boolean offerFirst(java.nio.ByteBuffer)
    {
        sun.nio.ch.Util$BufferCache r0;
        java.nio.ByteBuffer r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.nio.ByteBuffer[] $r2;

        r0 := @this: sun.nio.ch.Util$BufferCache;
        r1 := @parameter0: java.nio.ByteBuffer;
        $i2 = r0.<sun.nio.ch.Util$BufferCache: int count>;
        $i0 = staticinvoke <sun.nio.ch.Util: int access$000()>();
        if $i2 < $i0 goto label0;

        return 0;

     label0:
        $i3 = r0.<sun.nio.ch.Util$BufferCache: int start>;
        $i1 = staticinvoke <sun.nio.ch.Util: int access$000()>();
        $i4 = $i3 + $i1;
        $i5 = $i4 - 1;
        $i6 = staticinvoke <sun.nio.ch.Util: int access$000()>();
        $i7 = $i5 % $i6;
        r0.<sun.nio.ch.Util$BufferCache: int start> = $i7;
        $r2 = r0.<sun.nio.ch.Util$BufferCache: java.nio.ByteBuffer[] buffers>;
        $i8 = r0.<sun.nio.ch.Util$BufferCache: int start>;
        $r2[$i8] = r1;
        $i9 = r0.<sun.nio.ch.Util$BufferCache: int count>;
        $i10 = $i9 + 1;
        r0.<sun.nio.ch.Util$BufferCache: int count> = $i10;
        return 1;
    }

    boolean offerLast(java.nio.ByteBuffer)
    {
        sun.nio.ch.Util$BufferCache r0;
        java.nio.ByteBuffer r1;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.nio.ByteBuffer[] $r2;

        r0 := @this: sun.nio.ch.Util$BufferCache;
        r1 := @parameter0: java.nio.ByteBuffer;
        $i2 = r0.<sun.nio.ch.Util$BufferCache: int count>;
        $i0 = staticinvoke <sun.nio.ch.Util: int access$000()>();
        if $i2 < $i0 goto label0;

        return 0;

     label0:
        $i3 = r0.<sun.nio.ch.Util$BufferCache: int start>;
        $i4 = r0.<sun.nio.ch.Util$BufferCache: int count>;
        $i5 = $i3 + $i4;
        $i6 = staticinvoke <sun.nio.ch.Util: int access$000()>();
        i1 = $i5 % $i6;
        $r2 = r0.<sun.nio.ch.Util$BufferCache: java.nio.ByteBuffer[] buffers>;
        $r2[i1] = r1;
        $i7 = r0.<sun.nio.ch.Util$BufferCache: int count>;
        $i8 = $i7 + 1;
        r0.<sun.nio.ch.Util$BufferCache: int count> = $i8;
        return 1;
    }

    boolean isEmpty()
    {
        sun.nio.ch.Util$BufferCache r0;
        int $i0;
        boolean $z0;

        r0 := @this: sun.nio.ch.Util$BufferCache;
        $i0 = r0.<sun.nio.ch.Util$BufferCache: int count>;
        if $i0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    java.nio.ByteBuffer removeFirst()
    {
        sun.nio.ch.Util$BufferCache r0;
        boolean $z0;
        java.nio.ByteBuffer r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.AssertionError $r2;
        java.nio.ByteBuffer[] $r3, $r4;

        r0 := @this: sun.nio.ch.Util$BufferCache;
        $z0 = <sun.nio.ch.Util$BufferCache: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $i0 = r0.<sun.nio.ch.Util$BufferCache: int count>;
        if $i0 > 0 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<sun.nio.ch.Util$BufferCache: java.nio.ByteBuffer[] buffers>;
        $i1 = r0.<sun.nio.ch.Util$BufferCache: int start>;
        r1 = $r3[$i1];
        $r4 = r0.<sun.nio.ch.Util$BufferCache: java.nio.ByteBuffer[] buffers>;
        $i2 = r0.<sun.nio.ch.Util$BufferCache: int start>;
        $r4[$i2] = null;
        $i3 = r0.<sun.nio.ch.Util$BufferCache: int start>;
        $i4 = specialinvoke r0.<sun.nio.ch.Util$BufferCache: int next(int)>($i3);
        r0.<sun.nio.ch.Util$BufferCache: int start> = $i4;
        $i5 = r0.<sun.nio.ch.Util$BufferCache: int count>;
        $i6 = $i5 - 1;
        r0.<sun.nio.ch.Util$BufferCache: int count> = $i6;
        return r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/nio/ch/Util";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.ch.Util$BufferCache: boolean $assertionsDisabled> = $z1;
        return;
    }
}
