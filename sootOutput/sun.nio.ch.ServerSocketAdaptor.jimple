public class sun.nio.ch.ServerSocketAdaptor extends java.net.ServerSocket
{
    private final sun.nio.ch.ServerSocketChannelImpl ssc;
    private volatile int timeout;
    static final boolean $assertionsDisabled;

    public static java.net.ServerSocket create(sun.nio.ch.ServerSocketChannelImpl)
    {
        sun.nio.ch.ServerSocketChannelImpl r0;
        sun.nio.ch.ServerSocketAdaptor $r1;
        java.io.IOException r2, $r3;
        java.lang.Error $r4;

        r0 := @parameter0: sun.nio.ch.ServerSocketChannelImpl;

     label0:
        $r1 = new sun.nio.ch.ServerSocketAdaptor;
        specialinvoke $r1.<sun.nio.ch.ServerSocketAdaptor: void <init>(sun.nio.ch.ServerSocketChannelImpl)>(r0);

     label1:
        return $r1;

     label2:
        $r3 := @caughtexception;
        r2 = $r3;
        $r4 = new java.lang.Error;
        specialinvoke $r4.<java.lang.Error: void <init>(java.lang.Throwable)>(r2);
        throw $r4;

        catch java.io.IOException from label0 to label1 with label2;
    }

    private void <init>(sun.nio.ch.ServerSocketChannelImpl) throws java.io.IOException
    {
        sun.nio.ch.ServerSocketAdaptor r0;
        sun.nio.ch.ServerSocketChannelImpl r1;

        r0 := @this: sun.nio.ch.ServerSocketAdaptor;
        r1 := @parameter0: sun.nio.ch.ServerSocketChannelImpl;
        specialinvoke r0.<java.net.ServerSocket: void <init>()>();
        r0.<sun.nio.ch.ServerSocketAdaptor: int timeout> = 0;
        r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc> = r1;
        return;
    }

    public void bind(java.net.SocketAddress) throws java.io.IOException
    {
        sun.nio.ch.ServerSocketAdaptor r0;
        java.net.SocketAddress r1;

        r0 := @this: sun.nio.ch.ServerSocketAdaptor;
        r1 := @parameter0: java.net.SocketAddress;
        virtualinvoke r0.<sun.nio.ch.ServerSocketAdaptor: void bind(java.net.SocketAddress,int)>(r1, 50);
        return;
    }

    public void bind(java.net.SocketAddress, int) throws java.io.IOException
    {
        sun.nio.ch.ServerSocketAdaptor r0;
        java.net.SocketAddress r1;
        int i0;
        java.lang.Exception r2, $r6;
        java.net.InetSocketAddress $r3;
        sun.nio.ch.ServerSocketChannelImpl $r4;

        r0 := @this: sun.nio.ch.ServerSocketAdaptor;
        r1 := @parameter0: java.net.SocketAddress;
        i0 := @parameter1: int;
        if r1 != null goto label0;

        $r3 = new java.net.InetSocketAddress;
        specialinvoke $r3.<java.net.InetSocketAddress: void <init>(int)>(0);
        r1 = $r3;

     label0:
        $r4 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        virtualinvoke $r4.<sun.nio.ch.ServerSocketChannelImpl: java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress,int)>(r1, i0);

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        staticinvoke <sun.nio.ch.Net: void translateException(java.lang.Exception)>(r2);

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public java.net.InetAddress getInetAddress()
    {
        sun.nio.ch.ServerSocketAdaptor r0;
        sun.nio.ch.ServerSocketChannelImpl $r1, $r2;
        boolean $z0;
        java.net.InetSocketAddress $r3, $r4;
        java.net.InetAddress $r5;

        r0 := @this: sun.nio.ch.ServerSocketAdaptor;
        $r1 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $z0 = virtualinvoke $r1.<sun.nio.ch.ServerSocketChannelImpl: boolean isBound()>();
        if $z0 != 0 goto label0;

        return null;

     label0:
        $r2 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $r3 = virtualinvoke $r2.<sun.nio.ch.ServerSocketChannelImpl: java.net.InetSocketAddress localAddress()>();
        $r4 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress getRevealedLocalAddress(java.net.InetSocketAddress)>($r3);
        $r5 = virtualinvoke $r4.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        return $r5;
    }

    public int getLocalPort()
    {
        sun.nio.ch.ServerSocketAdaptor r0;
        sun.nio.ch.ServerSocketChannelImpl $r1, $r2;
        boolean $z0;
        java.net.InetSocketAddress $r3, $r4;
        int $i0;

        r0 := @this: sun.nio.ch.ServerSocketAdaptor;
        $r1 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $z0 = virtualinvoke $r1.<sun.nio.ch.ServerSocketChannelImpl: boolean isBound()>();
        if $z0 != 0 goto label0;

        return -1;

     label0:
        $r2 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $r3 = virtualinvoke $r2.<sun.nio.ch.ServerSocketChannelImpl: java.net.InetSocketAddress localAddress()>();
        $r4 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress asInetSocketAddress(java.net.SocketAddress)>($r3);
        $i0 = virtualinvoke $r4.<java.net.InetSocketAddress: int getPort()>();
        return $i0;
    }

    public java.net.Socket accept() throws java.io.IOException
    {
        sun.nio.ch.ServerSocketAdaptor r0;
        java.lang.Object r1, $r10;
        java.nio.channels.SocketChannel r2, r4, $r21, $r30, r31;
        java.nio.channels.Selector r3;
        java.net.Socket r5, r6, $r16;
        long l0, l4, $l5, $l6;
        int i1, $i2, $i3;
        java.lang.Throwable r7, r8, $r37, $r44;
        sun.nio.ch.ServerSocketChannelImpl $r9, $r11, $r13, $r14, $r18, $r20, $r22, $r23, $r25, $r26, $r27, $r29, $r32, $r33, $r38, $r39;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8;
        java.nio.channels.IllegalBlockingModeException $r12, $r15;
        java.nio.channels.SelectionKey r17;
        java.nio.channels.ClosedChannelException $r28;
        java.util.Set $r35;
        byte $b7;
        java.net.SocketTimeoutException $r36;
        java.lang.Exception $r41, r42;
        java.lang.AssertionError $r43;
        null_type $n0;

        r0 := @this: sun.nio.ch.ServerSocketAdaptor;
        $r9 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $r10 = virtualinvoke $r9.<sun.nio.ch.ServerSocketChannelImpl: java.lang.Object blockingLock()>();
        r1 = $r10;
        entermonitor $r10;

     label0:
        $r11 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $z0 = virtualinvoke $r11.<sun.nio.ch.ServerSocketChannelImpl: boolean isBound()>();
        if $z0 != 0 goto label1;

        $r12 = new java.nio.channels.IllegalBlockingModeException;
        specialinvoke $r12.<java.nio.channels.IllegalBlockingModeException: void <init>()>();
        throw $r12;

     label1:
        $i2 = r0.<sun.nio.ch.ServerSocketAdaptor: int timeout>;
        if $i2 != 0 goto label5;

        $r13 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        r2 = virtualinvoke $r13.<sun.nio.ch.ServerSocketChannelImpl: java.nio.channels.SocketChannel accept()>();
        if r2 != null goto label2;

        $r14 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $z1 = virtualinvoke $r14.<sun.nio.ch.ServerSocketChannelImpl: boolean isBlocking()>();
        if $z1 != 0 goto label2;

        $r15 = new java.nio.channels.IllegalBlockingModeException;
        specialinvoke $r15.<java.nio.channels.IllegalBlockingModeException: void <init>()>();
        throw $r15;

     label2:
        $r16 = virtualinvoke r2.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

     label3:
        exitmonitor r1;

     label4:
        return $r16;

     label5:
        r17 = null;
        r3 = null;
        $r18 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        virtualinvoke $r18.<sun.nio.ch.ServerSocketChannelImpl: java.nio.channels.SelectableChannel configureBlocking(boolean)>(0);

     label6:
        $r20 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $r21 = virtualinvoke $r20.<sun.nio.ch.ServerSocketChannelImpl: java.nio.channels.SocketChannel accept()>();
        r4 = $r21;
        if $r21 == null goto label12;

        r5 = virtualinvoke r4.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

     label7:
        if r17 == null goto label8;

        virtualinvoke r17.<java.nio.channels.SelectionKey: void cancel()>();

     label8:
        $r22 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $z2 = virtualinvoke $r22.<sun.nio.ch.ServerSocketChannelImpl: boolean isOpen()>();
        if $z2 == 0 goto label9;

        $r23 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        virtualinvoke $r23.<sun.nio.ch.ServerSocketChannelImpl: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);

     label9:
        if r3 == null goto label10;

        staticinvoke <sun.nio.ch.Util: void releaseTemporarySelector(java.nio.channels.Selector)>(r3);

     label10:
        exitmonitor r1;

     label11:
        return r5;

     label12:
        $r25 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        r3 = staticinvoke <sun.nio.ch.Util: java.nio.channels.Selector getTemporarySelector(java.nio.channels.SelectableChannel)>($r25);
        $r26 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        r17 = virtualinvoke $r26.<sun.nio.ch.ServerSocketChannelImpl: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>(r3, 16);
        $i3 = r0.<sun.nio.ch.ServerSocketAdaptor: int timeout>;
        l4 = (long) $i3;

     label13:
        $r27 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $z3 = virtualinvoke $r27.<sun.nio.ch.ServerSocketChannelImpl: boolean isOpen()>();
        if $z3 != 0 goto label14;

        $r28 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r28.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r28;

     label14:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        i1 = virtualinvoke r3.<java.nio.channels.Selector: int select(long)>(l4);
        if i1 <= 0 goto label20;

        $z4 = virtualinvoke r17.<java.nio.channels.SelectionKey: boolean isAcceptable()>();
        if $z4 == 0 goto label20;

        $r29 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $r30 = virtualinvoke $r29.<sun.nio.ch.ServerSocketChannelImpl: java.nio.channels.SocketChannel accept()>();
        r31 = $r30;
        if $r30 == null goto label20;

        r6 = virtualinvoke r31.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

     label15:
        if r17 == null goto label16;

        virtualinvoke r17.<java.nio.channels.SelectionKey: void cancel()>();

     label16:
        $r32 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $z5 = virtualinvoke $r32.<sun.nio.ch.ServerSocketChannelImpl: boolean isOpen()>();
        if $z5 == 0 goto label17;

        $r33 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        virtualinvoke $r33.<sun.nio.ch.ServerSocketChannelImpl: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);

     label17:
        if r3 == null goto label18;

        staticinvoke <sun.nio.ch.Util: void releaseTemporarySelector(java.nio.channels.Selector)>(r3);

     label18:
        exitmonitor r1;

     label19:
        return r6;

     label20:
        $r35 = virtualinvoke r3.<java.nio.channels.Selector: java.util.Set selectedKeys()>();
        interfaceinvoke $r35.<java.util.Set: boolean remove(java.lang.Object)>(r17);
        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l6 = $l5 - l0;
        l4 = l4 - $l6;
        $b7 = l4 cmp 0L;
        if $b7 > 0 goto label21;

        $r36 = new java.net.SocketTimeoutException;
        specialinvoke $r36.<java.net.SocketTimeoutException: void <init>()>();
        throw $r36;

     label21:
        goto label13;

     label22:
        $r37 := @caughtexception;
        r7 = $r37;

     label23:
        if r17 == null goto label24;

        virtualinvoke r17.<java.nio.channels.SelectionKey: void cancel()>();

     label24:
        $r38 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $z7 = virtualinvoke $r38.<sun.nio.ch.ServerSocketChannelImpl: boolean isOpen()>();
        if $z7 == 0 goto label25;

        $r39 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        virtualinvoke $r39.<sun.nio.ch.ServerSocketChannelImpl: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);

     label25:
        if r3 == null goto label26;

        staticinvoke <sun.nio.ch.Util: void releaseTemporarySelector(java.nio.channels.Selector)>(r3);

     label26:
        throw r7;

     label27:
        $r41 := @caughtexception;
        r42 = $r41;
        staticinvoke <sun.nio.ch.Net: void translateException(java.lang.Exception)>(r42);
        $z8 = <sun.nio.ch.ServerSocketAdaptor: boolean $assertionsDisabled>;
        if $z8 != 0 goto label28;

        $r43 = new java.lang.AssertionError;
        specialinvoke $r43.<java.lang.AssertionError: void <init>()>();
        throw $r43;

     label28:
        $n0 = null;
        exitmonitor r1;

     label29:
        return $n0;

     label30:
        $r44 := @caughtexception;

     label31:
        r8 = $r44;
        exitmonitor r1;

     label32:
        throw r8;

        catch java.lang.Throwable from label6 to label7 with label22;
        catch java.lang.Throwable from label12 to label15 with label22;
        catch java.lang.Throwable from label20 to label23 with label22;
        catch java.lang.Exception from label1 to label3 with label27;
        catch java.lang.Exception from label5 to label10 with label27;
        catch java.lang.Exception from label12 to label18 with label27;
        catch java.lang.Exception from label20 to label27 with label27;
        catch java.lang.Throwable from label0 to label4 with label30;
        catch java.lang.Throwable from label5 to label11 with label30;
        catch java.lang.Throwable from label12 to label19 with label30;
        catch java.lang.Throwable from label20 to label29 with label30;
        catch java.lang.Throwable from label31 to label32 with label30;
    }

    public void close() throws java.io.IOException
    {
        sun.nio.ch.ServerSocketAdaptor r0;
        sun.nio.ch.ServerSocketChannelImpl $r1;

        r0 := @this: sun.nio.ch.ServerSocketAdaptor;
        $r1 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        virtualinvoke $r1.<sun.nio.ch.ServerSocketChannelImpl: void close()>();
        return;
    }

    public java.nio.channels.ServerSocketChannel getChannel()
    {
        sun.nio.ch.ServerSocketAdaptor r0;
        sun.nio.ch.ServerSocketChannelImpl $r1;

        r0 := @this: sun.nio.ch.ServerSocketAdaptor;
        $r1 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        return $r1;
    }

    public boolean isBound()
    {
        sun.nio.ch.ServerSocketAdaptor r0;
        sun.nio.ch.ServerSocketChannelImpl $r1;
        boolean $z0;

        r0 := @this: sun.nio.ch.ServerSocketAdaptor;
        $r1 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $z0 = virtualinvoke $r1.<sun.nio.ch.ServerSocketChannelImpl: boolean isBound()>();
        return $z0;
    }

    public boolean isClosed()
    {
        sun.nio.ch.ServerSocketAdaptor r0;
        sun.nio.ch.ServerSocketChannelImpl $r1;
        boolean $z0, $z1;

        r0 := @this: sun.nio.ch.ServerSocketAdaptor;
        $r1 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $z0 = virtualinvoke $r1.<sun.nio.ch.ServerSocketChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    public void setSoTimeout(int) throws java.net.SocketException
    {
        sun.nio.ch.ServerSocketAdaptor r0;
        int i0;

        r0 := @this: sun.nio.ch.ServerSocketAdaptor;
        i0 := @parameter0: int;
        r0.<sun.nio.ch.ServerSocketAdaptor: int timeout> = i0;
        return;
    }

    public int getSoTimeout() throws java.net.SocketException
    {
        sun.nio.ch.ServerSocketAdaptor r0;
        int $i0;

        r0 := @this: sun.nio.ch.ServerSocketAdaptor;
        $i0 = r0.<sun.nio.ch.ServerSocketAdaptor: int timeout>;
        return $i0;
    }

    public void setReuseAddress(boolean) throws java.net.SocketException
    {
        sun.nio.ch.ServerSocketAdaptor r0;
        boolean z0;
        java.net.SocketOption $r1;
        java.io.IOException r2, $r6;
        sun.nio.ch.ServerSocketChannelImpl $r3;
        java.lang.Boolean $r4;

        r0 := @this: sun.nio.ch.ServerSocketAdaptor;
        z0 := @parameter0: boolean;

     label0:
        $r3 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption SO_REUSEADDR>;
        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);
        virtualinvoke $r3.<sun.nio.ch.ServerSocketChannelImpl: java.nio.channels.ServerSocketChannel setOption(java.net.SocketOption,java.lang.Object)>($r1, $r4);

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        staticinvoke <sun.nio.ch.Net: void translateToSocketException(java.lang.Exception)>(r2);

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public boolean getReuseAddress() throws java.net.SocketException
    {
        sun.nio.ch.ServerSocketAdaptor r0;
        java.net.SocketOption $r1;
        java.io.IOException r2, $r6;
        sun.nio.ch.ServerSocketChannelImpl $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: sun.nio.ch.ServerSocketAdaptor;

     label0:
        $r3 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption SO_REUSEADDR>;
        $r4 = virtualinvoke $r3.<sun.nio.ch.ServerSocketChannelImpl: java.lang.Object getOption(java.net.SocketOption)>($r1);
        $r5 = (java.lang.Boolean) $r4;
        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

     label1:
        return $z0;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        staticinvoke <sun.nio.ch.Net: void translateToSocketException(java.lang.Exception)>(r2);
        return 0;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public java.lang.String toString()
    {
        sun.nio.ch.ServerSocketAdaptor r0;
        boolean $z0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6, $r7;
        java.net.InetAddress $r3;
        int $i0;
        java.lang.String $r8;

        r0 := @this: sun.nio.ch.ServerSocketAdaptor;
        $z0 = virtualinvoke r0.<sun.nio.ch.ServerSocketAdaptor: boolean isBound()>();
        if $z0 != 0 goto label0;

        return "ServerSocket[unbound]";

     label0:
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ServerSocket[addr=");
        $r3 = virtualinvoke r0.<sun.nio.ch.ServerSocketAdaptor: java.net.InetAddress getInetAddress()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",localport=");
        $i0 = virtualinvoke r0.<sun.nio.ch.ServerSocketAdaptor: int getLocalPort()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r8;
    }

    public void setReceiveBufferSize(int) throws java.net.SocketException
    {
        sun.nio.ch.ServerSocketAdaptor r0;
        int i0;
        java.io.IOException r1, $r7;
        java.lang.IllegalArgumentException $r2;
        sun.nio.ch.ServerSocketChannelImpl $r3;
        java.net.SocketOption $r4;
        java.lang.Integer $r5;

        r0 := @this: sun.nio.ch.ServerSocketAdaptor;
        i0 := @parameter0: int;
        if i0 > 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size cannot be 0 or negative");
        throw $r2;

     label0:
        $r3 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $r4 = <java.net.StandardSocketOptions: java.net.SocketOption SO_RCVBUF>;
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        virtualinvoke $r3.<sun.nio.ch.ServerSocketChannelImpl: java.nio.channels.ServerSocketChannel setOption(java.net.SocketOption,java.lang.Object)>($r4, $r5);

     label1:
        goto label3;

     label2:
        $r7 := @caughtexception;
        r1 = $r7;
        staticinvoke <sun.nio.ch.Net: void translateToSocketException(java.lang.Exception)>(r1);

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public int getReceiveBufferSize() throws java.net.SocketException
    {
        sun.nio.ch.ServerSocketAdaptor r0;
        java.net.SocketOption $r1;
        java.io.IOException r2, $r6;
        sun.nio.ch.ServerSocketChannelImpl $r3;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0;

        r0 := @this: sun.nio.ch.ServerSocketAdaptor;

     label0:
        $r3 = r0.<sun.nio.ch.ServerSocketAdaptor: sun.nio.ch.ServerSocketChannelImpl ssc>;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption SO_RCVBUF>;
        $r4 = virtualinvoke $r3.<sun.nio.ch.ServerSocketChannelImpl: java.lang.Object getOption(java.net.SocketOption)>($r1);
        $r5 = (java.lang.Integer) $r4;
        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

     label1:
        return $i0;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        staticinvoke <sun.nio.ch.Net: void translateToSocketException(java.lang.Exception)>(r2);
        return -1;

        catch java.io.IOException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/nio/ch/ServerSocketAdaptor";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.ch.ServerSocketAdaptor: boolean $assertionsDisabled> = $z1;
        return;
    }
}
