public class sun.security.x509.AVA extends java.lang.Object implements sun.security.util.DerEncoder
{
    private static final sun.security.util.Debug debug;
    private static final boolean PRESERVE_OLD_DC_ENCODING;
    static final int DEFAULT;
    static final int RFC1779;
    static final int RFC2253;
    final sun.security.util.ObjectIdentifier oid;
    final sun.security.util.DerValue value;
    private static final java.lang.String specialChars;
    private static final java.lang.String specialChars2253;
    private static final java.lang.String specialCharsAll;
    private static final java.lang.String hexDigits;

    public void <init>(sun.security.util.ObjectIdentifier, sun.security.util.DerValue)
    {
        sun.security.x509.AVA r0;
        sun.security.util.ObjectIdentifier r1;
        sun.security.util.DerValue r2;
        java.lang.NullPointerException $r3;

        r0 := @this: sun.security.x509.AVA;
        r1 := @parameter0: sun.security.util.ObjectIdentifier;
        r2 := @parameter1: sun.security.util.DerValue;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r1 == null goto label0;

        if r2 != null goto label1;

     label0:
        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label1:
        r0.<sun.security.x509.AVA: sun.security.util.ObjectIdentifier oid> = r1;
        r0.<sun.security.x509.AVA: sun.security.util.DerValue value> = r2;
        return;
    }

    void <init>(java.io.Reader) throws java.io.IOException
    {
        sun.security.x509.AVA r0;
        java.io.Reader r1;

        r0 := @this: sun.security.x509.AVA;
        r1 := @parameter0: java.io.Reader;
        specialinvoke r0.<sun.security.x509.AVA: void <init>(java.io.Reader,int)>(r1, 1);
        return;
    }

    void <init>(java.io.Reader, java.util.Map) throws java.io.IOException
    {
        sun.security.x509.AVA r0;
        java.io.Reader r1;
        java.util.Map r2;

        r0 := @this: sun.security.x509.AVA;
        r1 := @parameter0: java.io.Reader;
        r2 := @parameter1: java.util.Map;
        specialinvoke r0.<sun.security.x509.AVA: void <init>(java.io.Reader,int,java.util.Map)>(r1, 1, r2);
        return;
    }

    void <init>(java.io.Reader, int) throws java.io.IOException
    {
        sun.security.x509.AVA r0;
        java.io.Reader r1;
        int i0;
        java.util.Map $r2;

        r0 := @this: sun.security.x509.AVA;
        r1 := @parameter0: java.io.Reader;
        i0 := @parameter1: int;
        $r2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
        specialinvoke r0.<sun.security.x509.AVA: void <init>(java.io.Reader,int,java.util.Map)>(r1, i0, $r2);
        return;
    }

    void <init>(java.io.Reader, int, java.util.Map) throws java.io.IOException
    {
        sun.security.x509.AVA r0;
        java.io.Reader r1;
        int i0, i1, i3;
        java.util.Map r2;
        java.lang.StringBuilder r3, $r4;
        char $c2;
        java.lang.String $r6;
        sun.security.util.ObjectIdentifier $r7;
        java.io.IOException $r8;
        sun.security.util.DerValue $r9, $r10, $r11, $r12;

        r0 := @this: sun.security.x509.AVA;
        r1 := @parameter0: java.io.Reader;
        i0 := @parameter1: int;
        r2 := @parameter2: java.util.Map;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        r3 = $r4;

     label0:
        i1 = staticinvoke <sun.security.x509.AVA: int readChar(java.io.Reader,java.lang.String)>(r1, "Incorrect AVA format");
        if i1 != 61 goto label1;

        goto label2;

     label1:
        $c2 = (char) i1;
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);
        goto label0;

     label2:
        $r6 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();
        $r7 = staticinvoke <sun.security.x509.AVAKeyword: sun.security.util.ObjectIdentifier getOID(java.lang.String,int,java.util.Map)>($r6, i0, r2);
        r0.<sun.security.x509.AVA: sun.security.util.ObjectIdentifier oid> = $r7;
        virtualinvoke r3.<java.lang.StringBuilder: void setLength(int)>(0);
        if i0 != 3 goto label3;

        i3 = virtualinvoke r1.<java.io.Reader: int read()>();
        if i3 != 32 goto label4;

        $r8 = new java.io.IOException;
        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Incorrect AVA RFC2253 format - leading space must be escaped");
        throw $r8;

     label3:
        i3 = virtualinvoke r1.<java.io.Reader: int read()>();
        if i3 == 32 goto label3;

        if i3 == 10 goto label3;

     label4:
        if i3 != -1 goto label5;

        $r9 = new sun.security.util.DerValue;
        specialinvoke $r9.<sun.security.util.DerValue: void <init>(java.lang.String)>("");
        r0.<sun.security.x509.AVA: sun.security.util.DerValue value> = $r9;
        return;

     label5:
        if i3 != 35 goto label6;

        $r10 = staticinvoke <sun.security.x509.AVA: sun.security.util.DerValue parseHexString(java.io.Reader,int)>(r1, i0);
        r0.<sun.security.x509.AVA: sun.security.util.DerValue value> = $r10;
        goto label8;

     label6:
        if i3 != 34 goto label7;

        if i0 == 3 goto label7;

        $r11 = specialinvoke r0.<sun.security.x509.AVA: sun.security.util.DerValue parseQuotedString(java.io.Reader,java.lang.StringBuilder)>(r1, r3);
        r0.<sun.security.x509.AVA: sun.security.util.DerValue value> = $r11;
        goto label8;

     label7:
        $r12 = specialinvoke r0.<sun.security.x509.AVA: sun.security.util.DerValue parseString(java.io.Reader,int,int,java.lang.StringBuilder)>(r1, i3, i0, r3);
        r0.<sun.security.x509.AVA: sun.security.util.DerValue value> = $r12;

     label8:
        return;
    }

    public sun.security.util.ObjectIdentifier getObjectIdentifier()
    {
        sun.security.x509.AVA r0;
        sun.security.util.ObjectIdentifier $r1;

        r0 := @this: sun.security.x509.AVA;
        $r1 = r0.<sun.security.x509.AVA: sun.security.util.ObjectIdentifier oid>;
        return $r1;
    }

    public sun.security.util.DerValue getDerValue()
    {
        sun.security.x509.AVA r0;
        sun.security.util.DerValue $r1;

        r0 := @this: sun.security.x509.AVA;
        $r1 = r0.<sun.security.x509.AVA: sun.security.util.DerValue value>;
        return $r1;
    }

    public java.lang.String getValueString()
    {
        sun.security.x509.AVA r0;
        java.lang.String r1, $r11;
        sun.security.util.DerValue $r2;
        java.lang.RuntimeException $r3, $r7;
        java.io.IOException $r5, r6;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @this: sun.security.x509.AVA;

     label0:
        $r2 = r0.<sun.security.x509.AVA: sun.security.util.DerValue value>;
        r1 = virtualinvoke $r2.<sun.security.util.DerValue: java.lang.String getAsString()>();
        if r1 != null goto label1;

        $r3 = new java.lang.RuntimeException;
        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("AVA string is null");
        throw $r3;

     label1:
        return r1;

     label2:
        $r5 := @caughtexception;
        r6 = $r5;
        $r7 = new java.lang.RuntimeException;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AVA error: ");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r11, r6);
        throw $r7;

        catch java.io.IOException from label0 to label1 with label2;
    }

    private static sun.security.util.DerValue parseHexString(java.io.Reader, int) throws java.io.IOException
    {
        java.io.Reader r0;
        int i0, i2, i3, i4, $i8, $i9, $i11, $i12;
        java.io.ByteArrayOutputStream $r1, r2;
        byte b1, $b10;
        java.lang.StringBuilder $r3, $r6, $r7;
        boolean $z0;
        java.lang.String $r4, $r8;
        char $c5, $c6, $c7;
        java.io.IOException $r5, $r9, $r10;
        sun.security.util.DerValue $r11;
        byte[] $r12;

        r0 := @parameter0: java.io.Reader;
        i0 := @parameter1: int;
        $r1 = new java.io.ByteArrayOutputStream;
        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();
        r2 = $r1;
        b1 = 0;
        i2 = 0;

     label0:
        i3 = virtualinvoke r0.<java.io.Reader: int read()>();
        $z0 = staticinvoke <sun.security.x509.AVA: boolean isTerminator(int,int)>(i3, i0);
        if $z0 == 0 goto label1;

        goto label5;

     label1:
        $r4 = "0123456789ABCDEF";
        $c5 = (char) i3;
        $c6 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c5);
        i4 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>($c6);
        if i4 != -1 goto label2;

        $r5 = new java.io.IOException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AVA parse, invalid hex digit: ");
        $c7 = (char) i3;
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r8);
        throw $r5;

     label2:
        $i8 = i2 % 2;
        if $i8 != 1 goto label3;

        $i9 = b1 * 16;
        $b10 = (byte) i4;
        $i11 = $i9 + $b10;
        b1 = (byte) $i11;
        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(int)>(b1);
        goto label4;

     label3:
        b1 = (byte) i4;

     label4:
        i2 = i2 + 1;
        goto label0;

     label5:
        if i2 != 0 goto label6;

        $r9 = new java.io.IOException;
        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("AVA parse, zero hex digits");
        throw $r9;

     label6:
        $i12 = i2 % 2;
        if $i12 != 1 goto label7;

        $r10 = new java.io.IOException;
        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("AVA parse, odd number of hex digits");
        throw $r10;

     label7:
        $r11 = new sun.security.util.DerValue;
        $r12 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
        specialinvoke $r11.<sun.security.util.DerValue: void <init>(byte[])>($r12);
        return $r11;
    }

    private sun.security.util.DerValue parseQuotedString(java.io.Reader, java.lang.StringBuilder) throws java.io.IOException
    {
        sun.security.x509.AVA r0;
        java.io.Reader r1;
        java.lang.StringBuilder r2, $r4, $r10, $r11;
        int i0, $i2, $i4, $i7, i8;
        java.util.ArrayList r3, $r5;
        boolean z0, $z2, $z3, $z4, $z5;
        null_type n0;
        java.lang.Byte $r6, r7;
        java.lang.String $r8, $r12, r13, r16, $r24, $r25, $r27, $r28, $r30, $r31;
        char $c1, $c3, $c5, $c6;
        java.io.IOException $r9, $r18;
        sun.security.util.ObjectIdentifier $r19, $r20, $r21, $r22;
        sun.security.util.DerValue $r23, $r26, $r29;

        r0 := @this: sun.security.x509.AVA;
        r1 := @parameter0: java.io.Reader;
        r2 := @parameter1: java.lang.StringBuilder;
        i0 = staticinvoke <sun.security.x509.AVA: int readChar(java.io.Reader,java.lang.String)>(r1, "Quoted string did not end in quote");
        $r5 = new java.util.ArrayList;
        specialinvoke $r5.<java.util.ArrayList: void <init>()>();
        r3 = $r5;
        z0 = 1;

     label0:
        if i0 == 34 goto label4;

        if i0 != 92 goto label2;

        i0 = staticinvoke <sun.security.x509.AVA: int readChar(java.io.Reader,java.lang.String)>(r1, "Quoted string did not end in quote");
        n0 = null;
        $r6 = staticinvoke <sun.security.x509.AVA: java.lang.Byte getEmbeddedHexPair(int,java.io.Reader)>(i0, r1);
        r7 = $r6;
        if $r6 == null goto label1;

        z0 = 0;
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r7);
        i0 = virtualinvoke r1.<java.io.Reader: int read()>();
        goto label0;

     label1:
        if i0 == 92 goto label2;

        if i0 == 34 goto label2;

        $r8 = ",+=\n<>#;";
        $c1 = (char) i0;
        $i2 = virtualinvoke $r8.<java.lang.String: int indexOf(int)>($c1);
        if $i2 >= 0 goto label2;

        $r9 = new java.io.IOException;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid escaped character in AVA: ");
        $c3 = (char) i0;
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r12);
        throw $r9;

     label2:
        $i4 = interfaceinvoke r3.<java.util.List: int size()>();
        if $i4 <= 0 goto label3;

        r13 = staticinvoke <sun.security.x509.AVA: java.lang.String getEmbeddedHexString(java.util.List)>(r3);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);
        interfaceinvoke r3.<java.util.List: void clear()>();

     label3:
        $c5 = (char) i0;
        $z2 = staticinvoke <sun.security.util.DerValue: boolean isPrintableStringChar(char)>($c5);
        z0 = z0 & $z2;
        $c6 = (char) i0;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);
        i0 = staticinvoke <sun.security.x509.AVA: int readChar(java.io.Reader,java.lang.String)>(r1, "Quoted string did not end in quote");
        goto label0;

     label4:
        $i7 = interfaceinvoke r3.<java.util.List: int size()>();
        if $i7 <= 0 goto label5;

        r16 = staticinvoke <sun.security.x509.AVA: java.lang.String getEmbeddedHexString(java.util.List)>(r3);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);
        interfaceinvoke r3.<java.util.List: void clear()>();

     label5:
        i8 = virtualinvoke r1.<java.io.Reader: int read()>();
        if i8 == 10 goto label5;

        if i8 == 32 goto label5;

        if i8 == -1 goto label6;

        $r18 = new java.io.IOException;
        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>("AVA had characters other than whitespace after terminating quote");
        throw $r18;

     label6:
        $r19 = r0.<sun.security.x509.AVA: sun.security.util.ObjectIdentifier oid>;
        $r20 = <sun.security.pkcs.PKCS9Attribute: sun.security.util.ObjectIdentifier EMAIL_ADDRESS_OID>;
        $z3 = virtualinvoke $r19.<sun.security.util.ObjectIdentifier: boolean equals(sun.security.util.ObjectIdentifier)>($r20);
        if $z3 != 0 goto label7;

        $r21 = r0.<sun.security.x509.AVA: sun.security.util.ObjectIdentifier oid>;
        $r22 = <sun.security.x509.X500Name: sun.security.util.ObjectIdentifier DOMAIN_COMPONENT_OID>;
        $z4 = virtualinvoke $r21.<sun.security.util.ObjectIdentifier: boolean equals(sun.security.util.ObjectIdentifier)>($r22);
        if $z4 == 0 goto label8;

        $z5 = <sun.security.x509.AVA: boolean PRESERVE_OLD_DC_ENCODING>;
        if $z5 != 0 goto label8;

     label7:
        $r23 = new sun.security.util.DerValue;
        $r24 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        $r25 = virtualinvoke $r24.<java.lang.String: java.lang.String trim()>();
        specialinvoke $r23.<sun.security.util.DerValue: void <init>(byte,java.lang.String)>(22, $r25);
        return $r23;

     label8:
        if z0 == 0 goto label9;

        $r26 = new sun.security.util.DerValue;
        $r27 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        $r28 = virtualinvoke $r27.<java.lang.String: java.lang.String trim()>();
        specialinvoke $r26.<sun.security.util.DerValue: void <init>(java.lang.String)>($r28);
        return $r26;

     label9:
        $r29 = new sun.security.util.DerValue;
        $r30 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        $r31 = virtualinvoke $r30.<java.lang.String: java.lang.String trim()>();
        specialinvoke $r29.<sun.security.util.DerValue: void <init>(byte,java.lang.String)>(12, $r31);
        return $r29;
    }

    private sun.security.util.DerValue parseString(java.io.Reader, int, int, java.lang.StringBuilder) throws java.io.IOException
    {
        sun.security.x509.AVA r0;
        java.io.Reader r1;
        int i0, i1, i2, $i4, $i6, $i9, $i12, $i14, i15, i17, $i19;
        java.lang.StringBuilder r2, $r5, $r11, $r12, $r13, $r19, $r20, $r21, $r22, $r26, $r27, $r28, $r29;
        java.util.ArrayList $r3, r4;
        boolean z0, z1, z2, z3, $z5, $z6, $z7, $z8, $z9, $z10;
        null_type n0;
        java.lang.Byte $r6, r7;
        java.lang.String $r8, $r9, $r14, $r17, $r23, $r24, $r30, r32, r37, $r44, $r46, $r48;
        char $c3, $c5, $c7, $c8, $c10, $c11, $c13, $c16, $c18;
        java.io.IOException $r10, $r15, $r16, $r18, $r25, $r36;
        sun.security.util.ObjectIdentifier $r39, $r40, $r41, $r42;
        sun.security.util.DerValue $r43, $r45, $r47;

        r0 := @this: sun.security.x509.AVA;
        r1 := @parameter0: java.io.Reader;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: java.lang.StringBuilder;
        $r3 = new java.util.ArrayList;
        specialinvoke $r3.<java.util.ArrayList: void <init>()>();
        r4 = $r3;
        z0 = 1;
        z1 = 0;
        z2 = 1;
        i2 = 0;

     label0:
        z3 = 0;
        if i0 != 92 goto label8;

        z3 = 1;
        i0 = staticinvoke <sun.security.x509.AVA: int readChar(java.io.Reader,java.lang.String)>(r1, "Invalid trailing backslash");
        n0 = null;
        $r6 = staticinvoke <sun.security.x509.AVA: java.lang.Byte getEmbeddedHexPair(int,java.io.Reader)>(i0, r1);
        r7 = $r6;
        if $r6 == null goto label1;

        z0 = 0;
        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r7);
        i0 = virtualinvoke r1.<java.io.Reader: int read()>();
        z2 = 0;
        goto label17;

     label1:
        if i1 != 1 goto label2;

        $r8 = ",=\n+<>#;\\\" ";
        $c3 = (char) i0;
        $i4 = virtualinvoke $r8.<java.lang.String: int indexOf(int)>($c3);
        if $i4 == -1 goto label3;

     label2:
        if i1 != 2 goto label4;

        $r9 = ",+=\n<>#;";
        $c5 = (char) i0;
        $i6 = virtualinvoke $r9.<java.lang.String: int indexOf(int)>($c5);
        if $i6 != -1 goto label4;

        if i0 == 92 goto label4;

        if i0 == 34 goto label4;

     label3:
        $r10 = new java.io.IOException;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid escaped character in AVA: \'");
        $c7 = (char) i0;
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r14);
        throw $r10;

     label4:
        if i1 != 3 goto label7;

        if i0 != 32 goto label5;

        if z2 != 0 goto label7;

        $z5 = staticinvoke <sun.security.x509.AVA: boolean trailingSpace(java.io.Reader)>(r1);
        if $z5 != 0 goto label7;

        $r15 = new java.io.IOException;
        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>("Invalid escaped space character in AVA.  Only a leading or trailing space character can be escaped.");
        throw $r15;

     label5:
        if i0 != 35 goto label6;

        if z2 != 0 goto label7;

        $r16 = new java.io.IOException;
        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>("Invalid escaped \'#\' character in AVA.  Only a leading \'#\' can be escaped.");
        throw $r16;

     label6:
        $r17 = ",+\"\\<>;";
        $c8 = (char) i0;
        $i9 = virtualinvoke $r17.<java.lang.String: int indexOf(int)>($c8);
        if $i9 != -1 goto label7;

        $r18 = new java.io.IOException;
        $r19 = new java.lang.StringBuilder;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid escaped character in AVA: \'");
        $c10 = (char) i0;
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r23);
        throw $r18;

     label7:
        goto label9;

     label8:
        if i1 != 3 goto label9;

        $r24 = ",+\"\\<>;";
        $c11 = (char) i0;
        $i12 = virtualinvoke $r24.<java.lang.String: int indexOf(int)>($c11);
        if $i12 == -1 goto label9;

        $r25 = new java.io.IOException;
        $r26 = new java.lang.StringBuilder;
        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Character \'");
        $c13 = (char) i0;
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c13);
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in AVA appears without escape");
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r25.<java.io.IOException: void <init>(java.lang.String)>($r30);
        throw $r25;

     label9:
        $i14 = interfaceinvoke r4.<java.util.List: int size()>();
        if $i14 <= 0 goto label12;

        i15 = 0;

     label10:
        if i15 >= i2 goto label11;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        i15 = i15 + 1;
        goto label10;

     label11:
        i2 = 0;
        r32 = staticinvoke <sun.security.x509.AVA: java.lang.String getEmbeddedHexString(java.util.List)>(r4);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);
        interfaceinvoke r4.<java.util.List: void clear()>();

     label12:
        $c16 = (char) i0;
        $z6 = staticinvoke <sun.security.util.DerValue: boolean isPrintableStringChar(char)>($c16);
        z0 = z0 & $z6;
        if i0 != 32 goto label13;

        if z3 != 0 goto label13;

        i2 = i2 + 1;
        goto label16;

     label13:
        i17 = 0;

     label14:
        if i17 >= i2 goto label15;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        i17 = i17 + 1;
        goto label14;

     label15:
        i2 = 0;
        $c18 = (char) i0;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c18);

     label16:
        i0 = virtualinvoke r1.<java.io.Reader: int read()>();
        z2 = 0;

     label17:
        $z7 = staticinvoke <sun.security.x509.AVA: boolean isTerminator(int,int)>(i0, i1);
        if $z7 == 0 goto label0;

        if i1 != 3 goto label18;

        if i2 <= 0 goto label18;

        $r36 = new java.io.IOException;
        specialinvoke $r36.<java.io.IOException: void <init>(java.lang.String)>("Incorrect AVA RFC2253 format - trailing space must be escaped");
        throw $r36;

     label18:
        $i19 = interfaceinvoke r4.<java.util.List: int size()>();
        if $i19 <= 0 goto label19;

        r37 = staticinvoke <sun.security.x509.AVA: java.lang.String getEmbeddedHexString(java.util.List)>(r4);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);
        interfaceinvoke r4.<java.util.List: void clear()>();

     label19:
        $r39 = r0.<sun.security.x509.AVA: sun.security.util.ObjectIdentifier oid>;
        $r40 = <sun.security.pkcs.PKCS9Attribute: sun.security.util.ObjectIdentifier EMAIL_ADDRESS_OID>;
        $z8 = virtualinvoke $r39.<sun.security.util.ObjectIdentifier: boolean equals(sun.security.util.ObjectIdentifier)>($r40);
        if $z8 != 0 goto label20;

        $r41 = r0.<sun.security.x509.AVA: sun.security.util.ObjectIdentifier oid>;
        $r42 = <sun.security.x509.X500Name: sun.security.util.ObjectIdentifier DOMAIN_COMPONENT_OID>;
        $z9 = virtualinvoke $r41.<sun.security.util.ObjectIdentifier: boolean equals(sun.security.util.ObjectIdentifier)>($r42);
        if $z9 == 0 goto label21;

        $z10 = <sun.security.x509.AVA: boolean PRESERVE_OLD_DC_ENCODING>;
        if $z10 != 0 goto label21;

     label20:
        $r43 = new sun.security.util.DerValue;
        $r44 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r43.<sun.security.util.DerValue: void <init>(byte,java.lang.String)>(22, $r44);
        return $r43;

     label21:
        if z0 == 0 goto label22;

        $r45 = new sun.security.util.DerValue;
        $r46 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r45.<sun.security.util.DerValue: void <init>(java.lang.String)>($r46);
        return $r45;

     label22:
        $r47 = new sun.security.util.DerValue;
        $r48 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r47.<sun.security.util.DerValue: void <init>(byte,java.lang.String)>(12, $r48);
        return $r47;
    }

    private static java.lang.Byte getEmbeddedHexPair(int, java.io.Reader) throws java.io.IOException
    {
        int i0, i1, i2, i3, $i6, $i9, $i12, $i13;
        java.io.Reader r0;
        java.lang.String $r1, $r2;
        char $c4, $c5, $c7, $c8, $c10, $c11;
        java.lang.Byte $r3;
        byte $b14;
        java.io.IOException $r4;

        i0 := @parameter0: int;
        r0 := @parameter1: java.io.Reader;
        $r1 = "0123456789ABCDEF";
        $c4 = (char) i0;
        $c5 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c4);
        $i6 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>($c5);
        if $i6 < 0 goto label1;

        i1 = staticinvoke <sun.security.x509.AVA: int readChar(java.io.Reader,java.lang.String)>(r0, "unexpected EOF - escaped hex value must include two valid digits");
        $r2 = "0123456789ABCDEF";
        $c7 = (char) i1;
        $c8 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c7);
        $i9 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>($c8);
        if $i9 < 0 goto label0;

        $c10 = (char) i0;
        i2 = staticinvoke <java.lang.Character: int digit(char,int)>($c10, 16);
        $c11 = (char) i1;
        i3 = staticinvoke <java.lang.Character: int digit(char,int)>($c11, 16);
        $r3 = new java.lang.Byte;
        $i12 = i2 << 4;
        $i13 = $i12 + i3;
        $b14 = (byte) $i13;
        specialinvoke $r3.<java.lang.Byte: void <init>(byte)>($b14);
        return $r3;

     label0:
        $r4 = new java.io.IOException;
        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("escaped hex value must include two valid digits");
        throw $r4;

     label1:
        return null;
    }

    private static java.lang.String getEmbeddedHexString(java.util.List) throws java.io.IOException
    {
        java.util.List r0;
        int i0, i1;
        byte[] r1;
        java.lang.Object $r2;
        java.lang.Byte $r3;
        byte $b2;
        java.lang.String $r4;

        r0 := @parameter0: java.util.List;
        i0 = interfaceinvoke r0.<java.util.List: int size()>();
        r1 = newarray (byte)[i0];
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);
        $r3 = (java.lang.Byte) $r2;
        $b2 = virtualinvoke $r3.<java.lang.Byte: byte byteValue()>();
        r1[i1] = $b2;
        i1 = i1 + 1;
        goto label0;

     label1:
        $r4 = new java.lang.String;
        specialinvoke $r4.<java.lang.String: void <init>(byte[],java.lang.String)>(r1, "UTF8");
        return $r4;
    }

    private static boolean isTerminator(int, int)
    {
        int i0, i1;
        boolean $z0;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        lookupswitch(i0)
        {
            case -1: goto label0;
            case 43: goto label0;
            case 44: goto label0;
            case 59: goto label1;
            case 62: goto label1;
            default: goto label4;
        };

     label0:
        return 1;

     label1:
        if i1 == 3 goto label2;

        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        return 0;
    }

    private static int readChar(java.io.Reader, java.lang.String) throws java.io.IOException
    {
        java.io.Reader r0;
        java.lang.String r1;
        int i0;
        java.io.IOException $r2;

        r0 := @parameter0: java.io.Reader;
        r1 := @parameter1: java.lang.String;
        i0 = virtualinvoke r0.<java.io.Reader: int read()>();
        if i0 != -1 goto label0;

        $r2 = new java.io.IOException;
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>(r1);
        throw $r2;

     label0:
        return i0;
    }

    private static boolean trailingSpace(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        boolean z0, $z1, z2;
        int i0, i1;

        r0 := @parameter0: java.io.Reader;
        z0 = 0;
        $z1 = virtualinvoke r0.<java.io.Reader: boolean markSupported()>();
        if $z1 != 0 goto label0;

        return 1;

     label0:
        virtualinvoke r0.<java.io.Reader: void mark(int)>(9999);

     label1:
        i0 = virtualinvoke r0.<java.io.Reader: int read()>();
        if i0 != -1 goto label2;

        z2 = 1;
        goto label7;

     label2:
        if i0 != 32 goto label3;

        goto label1;

     label3:
        if i0 != 92 goto label5;

        i1 = virtualinvoke r0.<java.io.Reader: int read()>();
        if i1 == 32 goto label4;

        z2 = 0;
        goto label7;

     label4:
        goto label6;

     label5:
        z2 = 0;
        goto label7;

     label6:
        goto label1;

     label7:
        virtualinvoke r0.<java.io.Reader: void reset()>();
        return z2;
    }

    void <init>(sun.security.util.DerValue) throws java.io.IOException
    {
        sun.security.x509.AVA r0;
        sun.security.util.DerValue r1, $r7;
        byte $b0;
        java.io.IOException $r2, $r9;
        sun.security.util.DerInputStream $r3, $r6, $r8, $r12;
        sun.security.util.ObjectIdentifier $r4, $r5;
        int $i1, $i2;
        java.lang.StringBuilder $r10, $r11, $r13;
        java.lang.String $r14;

        r0 := @this: sun.security.x509.AVA;
        r1 := @parameter0: sun.security.util.DerValue;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $b0 = r1.<sun.security.util.DerValue: byte tag>;
        if $b0 == 48 goto label0;

        $r2 = new java.io.IOException;
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("AVA not a sequence");
        throw $r2;

     label0:
        $r3 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $r4 = virtualinvoke $r3.<sun.security.util.DerInputStream: sun.security.util.ObjectIdentifier getOID()>();
        $r5 = staticinvoke <sun.security.x509.X500Name: sun.security.util.ObjectIdentifier intern(sun.security.util.ObjectIdentifier)>($r4);
        r0.<sun.security.x509.AVA: sun.security.util.ObjectIdentifier oid> = $r5;
        $r6 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $r7 = virtualinvoke $r6.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        r0.<sun.security.x509.AVA: sun.security.util.DerValue value> = $r7;
        $r8 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $i1 = virtualinvoke $r8.<sun.security.util.DerInputStream: int available()>();
        if $i1 == 0 goto label1;

        $r9 = new java.io.IOException;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AVA, extra bytes = ");
        $r12 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $i2 = virtualinvoke $r12.<sun.security.util.DerInputStream: int available()>();
        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r14);
        throw $r9;

     label1:
        return;
    }

    void <init>(sun.security.util.DerInputStream) throws java.io.IOException
    {
        sun.security.x509.AVA r0;
        sun.security.util.DerInputStream r1;
        sun.security.util.DerValue $r2;

        r0 := @this: sun.security.x509.AVA;
        r1 := @parameter0: sun.security.util.DerInputStream;
        $r2 = virtualinvoke r1.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        specialinvoke r0.<sun.security.x509.AVA: void <init>(sun.security.util.DerValue)>($r2);
        return;
    }

    public boolean equals(java.lang.Object)
    {
        sun.security.x509.AVA r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.String $r3, $r4;

        r0 := @this: sun.security.x509.AVA;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof sun.security.x509.AVA;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (sun.security.x509.AVA) r1;
        $r3 = virtualinvoke r0.<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>();
        $r4 = virtualinvoke r2.<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>();
        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);
        return $z1;
    }

    public int hashCode()
    {
        sun.security.x509.AVA r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: sun.security.x509.AVA;
        $r1 = virtualinvoke r0.<sun.security.x509.AVA: java.lang.String toRFC2253CanonicalString()>();
        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();
        return $i0;
    }

    public void encode(sun.security.util.DerOutputStream) throws java.io.IOException
    {
        sun.security.x509.AVA r0;
        sun.security.util.DerOutputStream r1;

        r0 := @this: sun.security.x509.AVA;
        r1 := @parameter0: sun.security.util.DerOutputStream;
        virtualinvoke r0.<sun.security.x509.AVA: void derEncode(java.io.OutputStream)>(r1);
        return;
    }

    public void derEncode(java.io.OutputStream) throws java.io.IOException
    {
        sun.security.x509.AVA r0;
        java.io.OutputStream r1;
        sun.security.util.DerOutputStream $r2, r3, r4, $r5;
        sun.security.util.ObjectIdentifier $r6;
        sun.security.util.DerValue $r7;
        byte[] $r8;

        r0 := @this: sun.security.x509.AVA;
        r1 := @parameter0: java.io.OutputStream;
        $r2 = new sun.security.util.DerOutputStream;
        specialinvoke $r2.<sun.security.util.DerOutputStream: void <init>()>();
        r3 = $r2;
        $r5 = new sun.security.util.DerOutputStream;
        specialinvoke $r5.<sun.security.util.DerOutputStream: void <init>()>();
        r4 = $r5;
        $r6 = r0.<sun.security.x509.AVA: sun.security.util.ObjectIdentifier oid>;
        virtualinvoke r3.<sun.security.util.DerOutputStream: void putOID(sun.security.util.ObjectIdentifier)>($r6);
        $r7 = r0.<sun.security.x509.AVA: sun.security.util.DerValue value>;
        virtualinvoke $r7.<sun.security.util.DerValue: void encode(sun.security.util.DerOutputStream)>(r3);
        virtualinvoke r4.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>(48, r3);
        $r8 = virtualinvoke r4.<sun.security.util.DerOutputStream: byte[] toByteArray()>();
        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r8);
        return;
    }

    private java.lang.String toKeyword(int, java.util.Map)
    {
        sun.security.x509.AVA r0;
        int i0;
        java.util.Map r1;
        sun.security.util.ObjectIdentifier $r2;
        java.lang.String $r3;

        r0 := @this: sun.security.x509.AVA;
        i0 := @parameter0: int;
        r1 := @parameter1: java.util.Map;
        $r2 = r0.<sun.security.x509.AVA: sun.security.util.ObjectIdentifier oid>;
        $r3 = staticinvoke <sun.security.x509.AVAKeyword: java.lang.String getKeyword(sun.security.util.ObjectIdentifier,int,java.util.Map)>($r2, i0, r1);
        return $r3;
    }

    public java.lang.String toString()
    {
        sun.security.x509.AVA r0;
        java.util.Map $r1;
        java.lang.String $r2, $r3;

        r0 := @this: sun.security.x509.AVA;
        $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
        $r2 = specialinvoke r0.<sun.security.x509.AVA: java.lang.String toKeyword(int,java.util.Map)>(1, $r1);
        $r3 = specialinvoke r0.<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>($r2);
        return $r3;
    }

    public java.lang.String toRFC1779String()
    {
        sun.security.x509.AVA r0;
        java.util.Map $r1;
        java.lang.String $r2;

        r0 := @this: sun.security.x509.AVA;
        $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
        $r2 = virtualinvoke r0.<sun.security.x509.AVA: java.lang.String toRFC1779String(java.util.Map)>($r1);
        return $r2;
    }

    public java.lang.String toRFC1779String(java.util.Map)
    {
        sun.security.x509.AVA r0;
        java.util.Map r1;
        java.lang.String $r2, $r3;

        r0 := @this: sun.security.x509.AVA;
        r1 := @parameter0: java.util.Map;
        $r2 = specialinvoke r0.<sun.security.x509.AVA: java.lang.String toKeyword(int,java.util.Map)>(2, r1);
        $r3 = specialinvoke r0.<sun.security.x509.AVA: java.lang.String toKeywordValueString(java.lang.String)>($r2);
        return $r3;
    }

    public java.lang.String toRFC2253String()
    {
        sun.security.x509.AVA r0;
        java.util.Map $r1;
        java.lang.String $r2;

        r0 := @this: sun.security.x509.AVA;
        $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
        $r2 = virtualinvoke r0.<sun.security.x509.AVA: java.lang.String toRFC2253String(java.util.Map)>($r1);
        return $r2;
    }

    public java.lang.String toRFC2253String(java.util.Map)
    {
        sun.security.x509.AVA r0;
        java.util.Map r1;
        java.lang.StringBuilder $r2, r3, $r24, r25, $r42, r43;
        null_type n0, n1, n2;
        java.io.IOException r4, r5, $r12, $r21, r22, $r34;
        byte b0, $b8, $b9, $b11, $b18, $b19, $b20, $b22, $b23;
        int i1, i6, $i7, $i13, $i14, $i15, i16, $i17, i26, $i27, $i30, i31, i34, $i35;
        char c2, c3, $c4, $c5, $c10, $c12, $c21, c24, $c25, $c28, $c29, $c32, $c33, c36;
        java.lang.String $r6, $r17, r20, $r26, $r27, $r32, $r40, $r46, $r48;
        sun.security.util.DerValue $r9, $r10, $r18;
        boolean $z0, $z1, $z2;
        byte[] r11, $r19, r33;
        java.lang.IllegalArgumentException $r13, $r23, $r35;
        sun.security.util.Debug $r31;
        char[] r41;

        r0 := @this: sun.security.x509.AVA;
        r1 := @parameter0: java.util.Map;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(100);
        r3 = $r2;
        $r6 = specialinvoke r0.<sun.security.x509.AVA: java.lang.String toKeyword(int,java.util.Map)>(3, r1);
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);
        $c4 = virtualinvoke r3.<java.lang.StringBuilder: char charAt(int)>(0);
        if $c4 < 48 goto label0;

        $c5 = virtualinvoke r3.<java.lang.StringBuilder: char charAt(int)>(0);
        if $c5 <= 57 goto label1;

     label0:
        $r9 = r0.<sun.security.x509.AVA: sun.security.util.DerValue value>;
        $z0 = staticinvoke <sun.security.x509.AVA: boolean isDerString(sun.security.util.DerValue,boolean)>($r9, 0);
        if $z0 != 0 goto label8;

     label1:
        n0 = null;

     label2:
        $r10 = r0.<sun.security.x509.AVA: sun.security.util.DerValue value>;
        r11 = virtualinvoke $r10.<sun.security.util.DerValue: byte[] toByteArray()>();

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;
        r4 = $r12;
        $r13 = new java.lang.IllegalArgumentException;
        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DER Value conversion");
        throw $r13;

     label5:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);
        i6 = 0;

     label6:
        $i7 = lengthof r11;
        if i6 >= $i7 goto label7;

        b0 = r11[i6];
        $b8 = b0 >>> 4;
        $b9 = 15 & $b8;
        $c10 = staticinvoke <java.lang.Character: char forDigit(int,int)>($b9, 16);
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10);
        $b11 = 15 & b0;
        $c12 = staticinvoke <java.lang.Character: char forDigit(int,int)>($b11, 16);
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c12);
        i6 = i6 + 1;
        goto label6;

     label7:
        goto label37;

     label8:
        n2 = null;

     label9:
        $r17 = new java.lang.String;
        $r18 = r0.<sun.security.x509.AVA: sun.security.util.DerValue value>;
        $r19 = virtualinvoke $r18.<sun.security.util.DerValue: byte[] getDataBytes()>();
        specialinvoke $r17.<java.lang.String: void <init>(byte[],java.lang.String)>($r19, "UTF8");
        r20 = $r17;

     label10:
        goto label12;

     label11:
        $r21 := @caughtexception;
        r22 = $r21;
        $r23 = new java.lang.IllegalArgumentException;
        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DER Value conversion");
        throw $r23;

     label12:
        $r24 = new java.lang.StringBuilder;
        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
        r25 = $r24;
        i1 = 0;

     label13:
        $i13 = virtualinvoke r20.<java.lang.String: int length()>();
        if i1 >= $i13 goto label26;

        c2 = virtualinvoke r20.<java.lang.String: char charAt(int)>(i1);
        $z1 = staticinvoke <sun.security.util.DerValue: boolean isPrintableStringChar(char)>(c2);
        if $z1 != 0 goto label14;

        $r26 = ",=+<>#;\"\\";
        $i14 = virtualinvoke $r26.<java.lang.String: int indexOf(int)>(c2);
        if $i14 < 0 goto label16;

     label14:
        $r27 = ",=+<>#;\"\\";
        $i15 = virtualinvoke $r27.<java.lang.String: int indexOf(int)>(c2);
        if $i15 < 0 goto label15;

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

     label15:
        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);
        goto label25;

     label16:
        if c2 != 0 goto label17;

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\00");
        goto label25;

     label17:
        $r31 = <sun.security.x509.AVA: sun.security.util.Debug debug>;
        if $r31 == null goto label24;

        $z2 = staticinvoke <sun.security.util.Debug: boolean isOn(java.lang.String)>("ava");
        if $z2 == 0 goto label24;

        n1 = null;

     label18:
        $r32 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(c2);
        r33 = virtualinvoke $r32.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");

     label19:
        goto label21;

     label20:
        $r34 := @caughtexception;
        r5 = $r34;
        $r35 = new java.lang.IllegalArgumentException;
        specialinvoke $r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DER Value conversion");
        throw $r35;

     label21:
        i16 = 0;

     label22:
        $i17 = lengthof r33;
        if i16 >= $i17 goto label23;

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);
        $b18 = r33[i16];
        $b19 = $b18 >>> 4;
        $b20 = 15 & $b19;
        c3 = staticinvoke <java.lang.Character: char forDigit(int,int)>($b20, 16);
        $c21 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c3);
        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c21);
        $b22 = r33[i16];
        $b23 = 15 & $b22;
        c24 = staticinvoke <java.lang.Character: char forDigit(int,int)>($b23, 16);
        $c25 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c24);
        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c25);
        i16 = i16 + 1;
        goto label22;

     label23:
        goto label25;

     label24:
        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

     label25:
        i1 = i1 + 1;
        goto label13;

     label26:
        $r40 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();
        r41 = virtualinvoke $r40.<java.lang.String: char[] toCharArray()>();
        $r42 = new java.lang.StringBuilder;
        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();
        r43 = $r42;
        i26 = 0;

     label27:
        $i27 = lengthof r41;
        if i26 >= $i27 goto label29;

        $c28 = r41[i26];
        if $c28 == 32 goto label28;

        $c29 = r41[i26];
        if $c29 == 13 goto label28;

        goto label29;

     label28:
        i26 = i26 + 1;
        goto label27;

     label29:
        $i30 = lengthof r41;
        i31 = $i30 - 1;

     label30:
        if i31 < 0 goto label32;

        $c32 = r41[i31];
        if $c32 == 32 goto label31;

        $c33 = r41[i31];
        if $c33 == 13 goto label31;

        goto label32;

     label31:
        i31 = i31 + -1;
        goto label30;

     label32:
        i34 = 0;

     label33:
        $i35 = lengthof r41;
        if i34 >= $i35 goto label36;

        c36 = r41[i34];
        if i34 < i26 goto label34;

        if i34 <= i31 goto label35;

     label34:
        virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

     label35:
        virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c36);
        i34 = i34 + 1;
        goto label33;

     label36:
        $r46 = virtualinvoke r43.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

     label37:
        $r48 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r48;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.io.IOException from label9 to label10 with label11;
        catch java.io.IOException from label18 to label19 with label20;
    }

    public java.lang.String toRFC2253CanonicalString()
    {
        sun.security.x509.AVA r0;
        java.lang.StringBuilder $r1, r2, $r24, r25;
        java.util.Map $r3;
        null_type n0, n1, n2;
        java.io.IOException r4, r5, $r12, $r21, r22, $r34;
        byte b0, $b7, $b8, $b10, $b17, $b18, $b19, $b21, $b22;
        boolean z0, $z1, $z2, $z3, $z4;
        int i1, i5, $i6, $i12, $i13, $i14, i15, $i16;
        char c2, $c3, $c4, $c9, $c11, $c20, $c23;
        java.lang.String $r6, $r17, r20, $r26, $r27, $r32, $r40, $r41, r43, $r45, r47, $r49;
        sun.security.util.DerValue $r9, $r10, $r18;
        byte[] r11, $r19, r33;
        java.lang.IllegalArgumentException $r13, $r23, $r35;
        sun.security.util.Debug $r31;
        java.util.Locale $r44, $r46;
        java.text.Normalizer$Form $r48;

        r0 := @this: sun.security.x509.AVA;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(40);
        r2 = $r1;
        $r3 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
        $r6 = specialinvoke r0.<sun.security.x509.AVA: java.lang.String toKeyword(int,java.util.Map)>(3, $r3);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);
        $c3 = virtualinvoke r2.<java.lang.StringBuilder: char charAt(int)>(0);
        if $c3 < 48 goto label0;

        $c4 = virtualinvoke r2.<java.lang.StringBuilder: char charAt(int)>(0);
        if $c4 <= 57 goto label1;

     label0:
        $r9 = r0.<sun.security.x509.AVA: sun.security.util.DerValue value>;
        $z1 = staticinvoke <sun.security.x509.AVA: boolean isDerString(sun.security.util.DerValue,boolean)>($r9, 1);
        if $z1 != 0 goto label8;

     label1:
        n0 = null;

     label2:
        $r10 = r0.<sun.security.x509.AVA: sun.security.util.DerValue value>;
        r11 = virtualinvoke $r10.<sun.security.util.DerValue: byte[] toByteArray()>();

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;
        r4 = $r12;
        $r13 = new java.lang.IllegalArgumentException;
        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DER Value conversion");
        throw $r13;

     label5:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);
        i5 = 0;

     label6:
        $i6 = lengthof r11;
        if i5 >= $i6 goto label7;

        b0 = r11[i5];
        $b7 = b0 >>> 4;
        $b8 = 15 & $b7;
        $c9 = staticinvoke <java.lang.Character: char forDigit(int,int)>($b8, 16);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c9);
        $b10 = 15 & b0;
        $c11 = staticinvoke <java.lang.Character: char forDigit(int,int)>($b10, 16);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c11);
        i5 = i5 + 1;
        goto label6;

     label7:
        goto label29;

     label8:
        n2 = null;

     label9:
        $r17 = new java.lang.String;
        $r18 = r0.<sun.security.x509.AVA: sun.security.util.DerValue value>;
        $r19 = virtualinvoke $r18.<sun.security.util.DerValue: byte[] getDataBytes()>();
        specialinvoke $r17.<java.lang.String: void <init>(byte[],java.lang.String)>($r19, "UTF8");
        r20 = $r17;

     label10:
        goto label12;

     label11:
        $r21 := @caughtexception;
        r22 = $r21;
        $r23 = new java.lang.IllegalArgumentException;
        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DER Value conversion");
        throw $r23;

     label12:
        $r24 = new java.lang.StringBuilder;
        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
        r25 = $r24;
        z0 = 0;
        i1 = 0;

     label13:
        $i12 = virtualinvoke r20.<java.lang.String: int length()>();
        if i1 >= $i12 goto label28;

        c2 = virtualinvoke r20.<java.lang.String: char charAt(int)>(i1);
        $z2 = staticinvoke <sun.security.util.DerValue: boolean isPrintableStringChar(char)>(c2);
        if $z2 != 0 goto label14;

        $r26 = ",+<>;\"\\";
        $i13 = virtualinvoke $r26.<java.lang.String: int indexOf(int)>(c2);
        if $i13 >= 0 goto label14;

        if i1 != 0 goto label19;

        if c2 != 35 goto label19;

     label14:
        if i1 != 0 goto label15;

        if c2 == 35 goto label16;

     label15:
        $r27 = ",+<>;\"\\";
        $i14 = virtualinvoke $r27.<java.lang.String: int indexOf(int)>(c2);
        if $i14 < 0 goto label17;

     label16:
        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

     label17:
        $z3 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c2);
        if $z3 != 0 goto label18;

        z0 = 0;
        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);
        goto label27;

     label18:
        if z0 != 0 goto label27;

        z0 = 1;
        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);
        goto label27;

     label19:
        $r31 = <sun.security.x509.AVA: sun.security.util.Debug debug>;
        if $r31 == null goto label26;

        $z4 = staticinvoke <sun.security.util.Debug: boolean isOn(java.lang.String)>("ava");
        if $z4 == 0 goto label26;

        z0 = 0;
        n1 = null;

     label20:
        $r32 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(c2);
        r33 = virtualinvoke $r32.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");

     label21:
        goto label23;

     label22:
        $r34 := @caughtexception;
        r5 = $r34;
        $r35 = new java.lang.IllegalArgumentException;
        specialinvoke $r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DER Value conversion");
        throw $r35;

     label23:
        i15 = 0;

     label24:
        $i16 = lengthof r33;
        if i15 >= $i16 goto label25;

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);
        $b17 = r33[i15];
        $b18 = $b17 >>> 4;
        $b19 = 15 & $b18;
        $c20 = staticinvoke <java.lang.Character: char forDigit(int,int)>($b19, 16);
        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c20);
        $b21 = r33[i15];
        $b22 = 15 & $b21;
        $c23 = staticinvoke <java.lang.Character: char forDigit(int,int)>($b22, 16);
        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c23);
        i15 = i15 + 1;
        goto label24;

     label25:
        goto label27;

     label26:
        z0 = 0;
        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

     label27:
        i1 = i1 + 1;
        goto label13;

     label28:
        $r40 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();
        $r41 = virtualinvoke $r40.<java.lang.String: java.lang.String trim()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

     label29:
        r43 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        $r44 = <java.util.Locale: java.util.Locale US>;
        $r45 = virtualinvoke r43.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r44);
        $r46 = <java.util.Locale: java.util.Locale US>;
        r47 = virtualinvoke $r45.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r46);
        $r48 = <java.text.Normalizer$Form: java.text.Normalizer$Form NFKD>;
        $r49 = staticinvoke <java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>(r47, $r48);
        return $r49;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.io.IOException from label9 to label10 with label11;
        catch java.io.IOException from label20 to label21 with label22;
    }

    private static boolean isDerString(sun.security.util.DerValue, boolean)
    {
        sun.security.util.DerValue r0;
        boolean z0;
        byte $b0, $b1;

        r0 := @parameter0: sun.security.util.DerValue;
        z0 := @parameter1: boolean;
        if z0 == 0 goto label2;

        $b0 = r0.<sun.security.util.DerValue: byte tag>;
        lookupswitch($b0)
        {
            case 12: goto label0;
            case 19: goto label0;
            default: goto label1;
        };

     label0:
        return 1;

     label1:
        return 0;

     label2:
        $b1 = r0.<sun.security.util.DerValue: byte tag>;
        tableswitch($b1)
        {
            case 12: goto label3;
            case 13: goto label4;
            case 14: goto label4;
            case 15: goto label4;
            case 16: goto label4;
            case 17: goto label4;
            case 18: goto label4;
            case 19: goto label3;
            case 20: goto label3;
            case 21: goto label4;
            case 22: goto label3;
            case 23: goto label4;
            case 24: goto label4;
            case 25: goto label4;
            case 26: goto label4;
            case 27: goto label3;
            case 28: goto label4;
            case 29: goto label4;
            case 30: goto label3;
            default: goto label4;
        };

     label3:
        return 1;

     label4:
        return 0;
    }

    boolean hasRFC2253Keyword()
    {
        sun.security.x509.AVA r0;
        sun.security.util.ObjectIdentifier $r1;
        boolean $z0;

        r0 := @this: sun.security.x509.AVA;
        $r1 = r0.<sun.security.x509.AVA: sun.security.util.ObjectIdentifier oid>;
        $z0 = staticinvoke <sun.security.x509.AVAKeyword: boolean hasKeyword(sun.security.util.ObjectIdentifier,int)>($r1, 3);
        return $z0;
    }

    private java.lang.String toKeywordValueString(java.lang.String)
    {
        sun.security.x509.AVA r0;
        java.lang.String r1, r4, $r12, $r14, $r19, $r20, $r24, $r31, $r34, $r36, $r41;
        java.lang.StringBuilder $r2, r3, $r16, r17, $r29, $r30, $r32, $r33;
        byte[] r5, r6;
        int i0, i1, i2, i4, $i6, $i15, $i17, $i18, $i19, $i20, $i29, $i30, $i31;
        boolean z0, z1, z2, $z3, $z4, $z5;
        char c3, c5, $c10, $c13, $c14, $c16, $c24, c27, $c28, c32;
        sun.security.util.DerValue $r9, $r10;
        byte $b7, $b8, $b9, $b11, $b12, $b21, $b22, $b23, $b25, $b26;
        sun.security.util.Debug $r23;
        java.io.IOException $r38, r39;
        java.lang.IllegalArgumentException $r40;

        r0 := @this: sun.security.x509.AVA;
        r1 := @parameter0: java.lang.String;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(40);
        r3 = $r2;
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

     label0:
        $r9 = r0.<sun.security.x509.AVA: sun.security.util.DerValue value>;
        r4 = virtualinvoke $r9.<sun.security.util.DerValue: java.lang.String getAsString()>();
        if r4 != null goto label3;

        $r10 = r0.<sun.security.x509.AVA: sun.security.util.DerValue value>;
        r5 = virtualinvoke $r10.<sun.security.util.DerValue: byte[] toByteArray()>();
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);
        i0 = 0;

     label1:
        $i6 = lengthof r5;
        if i0 >= $i6 goto label2;

        $r12 = "0123456789ABCDEF";
        $b7 = r5[i0];
        $b8 = $b7 >> 4;
        $b9 = $b8 & 15;
        $c10 = virtualinvoke $r12.<java.lang.String: char charAt(int)>($b9);
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10);
        $r14 = "0123456789ABCDEF";
        $b11 = r5[i0];
        $b12 = $b11 & 15;
        $c13 = virtualinvoke $r14.<java.lang.String: char charAt(int)>($b12);
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c13);
        i0 = i0 + 1;
        goto label1;

     label2:
        goto label27;

     label3:
        z2 = 0;
        $r16 = new java.lang.StringBuilder;
        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
        r17 = $r16;
        z0 = 0;
        i1 = virtualinvoke r4.<java.lang.String: int length()>();
        if i1 <= 1 goto label4;

        $c14 = virtualinvoke r4.<java.lang.String: char charAt(int)>(0);
        if $c14 != 34 goto label4;

        $i15 = i1 - 1;
        $c16 = virtualinvoke r4.<java.lang.String: char charAt(int)>($i15);
        if $c16 != 34 goto label4;

        $z3 = 1;
        goto label5;

     label4:
        $z3 = 0;

     label5:
        z1 = $z3;
        i2 = 0;

     label6:
        if i2 >= i1 goto label23;

        c3 = virtualinvoke r4.<java.lang.String: char charAt(int)>(i2);
        if z1 == 0 goto label8;

        if i2 == 0 goto label7;

        $i17 = i1 - 1;
        if i2 != $i17 goto label8;

     label7:
        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);
        goto label22;

     label8:
        $z4 = staticinvoke <sun.security.util.DerValue: boolean isPrintableStringChar(char)>(c3);
        if $z4 != 0 goto label9;

        $r19 = ",+=\n<>#;\\\"";
        $i18 = virtualinvoke $r19.<java.lang.String: int indexOf(int)>(c3);
        if $i18 < 0 goto label18;

     label9:
        if z2 != 0 goto label12;

        if i2 != 0 goto label10;

        if c3 == 32 goto label11;

        if c3 == 10 goto label11;

     label10:
        $r20 = ",+=\n<>#;\\\"";
        $i19 = virtualinvoke $r20.<java.lang.String: int indexOf(int)>(c3);
        if $i19 < 0 goto label12;

     label11:
        z2 = 1;

     label12:
        if c3 == 32 goto label15;

        if c3 == 10 goto label15;

        if c3 == 34 goto label13;

        if c3 != 92 goto label14;

     label13:
        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

     label14:
        z0 = 0;
        goto label17;

     label15:
        if z2 != 0 goto label16;

        if z0 == 0 goto label16;

        z2 = 1;

     label16:
        z0 = 1;

     label17:
        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);
        goto label22;

     label18:
        $r23 = <sun.security.x509.AVA: sun.security.util.Debug debug>;
        if $r23 == null goto label21;

        $z5 = staticinvoke <sun.security.util.Debug: boolean isOn(java.lang.String)>("ava");
        if $z5 == 0 goto label21;

        z0 = 0;
        $r24 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(c3);
        r6 = virtualinvoke $r24.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");
        i4 = 0;

     label19:
        $i20 = lengthof r6;
        if i4 >= $i20 goto label20;

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);
        $b21 = r6[i4];
        $b22 = $b21 >>> 4;
        $b23 = 15 & $b22;
        c5 = staticinvoke <java.lang.Character: char forDigit(int,int)>($b23, 16);
        $c24 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c5);
        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c24);
        $b25 = r6[i4];
        $b26 = 15 & $b25;
        c27 = staticinvoke <java.lang.Character: char forDigit(int,int)>($b26, 16);
        $c28 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c27);
        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c28);
        i4 = i4 + 1;
        goto label19;

     label20:
        goto label22;

     label21:
        z0 = 0;
        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

     label22:
        i2 = i2 + 1;
        goto label6;

     label23:
        $i29 = virtualinvoke r17.<java.lang.StringBuilder: int length()>();
        if $i29 <= 0 goto label25;

        $i30 = virtualinvoke r17.<java.lang.StringBuilder: int length()>();
        $i31 = $i30 - 1;
        c32 = virtualinvoke r17.<java.lang.StringBuilder: char charAt(int)>($i31);
        if c32 == 32 goto label24;

        if c32 != 10 goto label25;

     label24:
        z2 = 1;

     label25:
        if z1 != 0 goto label26;

        if z2 == 0 goto label26;

        $r29 = new java.lang.StringBuilder;
        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
        $r31 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();
        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);
        goto label27;

     label26:
        $r36 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

     label27:
        goto label29;

     label28:
        $r38 := @caughtexception;
        r39 = $r38;
        $r40 = new java.lang.IllegalArgumentException;
        specialinvoke $r40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DER Value conversion");
        throw $r40;

     label29:
        $r41 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r41;

        catch java.io.IOException from label0 to label27 with label28;
    }

    static void <clinit>()
    {
        sun.security.util.Debug $r0;
        sun.security.action.GetBooleanAction $r1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        boolean $z0;

        $r0 = staticinvoke <sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String,java.lang.String)>("x509", "\t[AVA]");
        <sun.security.x509.AVA: sun.security.util.Debug debug> = $r0;
        $r1 = new sun.security.action.GetBooleanAction;
        specialinvoke $r1.<sun.security.action.GetBooleanAction: void <init>(java.lang.String)>("com.sun.security.preserveOldDCEncoding");
        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        $r3 = (java.lang.Boolean) $r2;
        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();
        <sun.security.x509.AVA: boolean PRESERVE_OLD_DC_ENCODING> = $z0;
        return;
    }
}
