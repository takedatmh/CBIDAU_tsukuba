public class sun.misc.ProxyGenerator extends java.lang.Object
{
    private static final int CLASSFILE_MAJOR_VERSION;
    private static final int CLASSFILE_MINOR_VERSION;
    private static final int CONSTANT_UTF8;
    private static final int CONSTANT_UNICODE;
    private static final int CONSTANT_INTEGER;
    private static final int CONSTANT_FLOAT;
    private static final int CONSTANT_LONG;
    private static final int CONSTANT_DOUBLE;
    private static final int CONSTANT_CLASS;
    private static final int CONSTANT_STRING;
    private static final int CONSTANT_FIELD;
    private static final int CONSTANT_METHOD;
    private static final int CONSTANT_INTERFACEMETHOD;
    private static final int CONSTANT_NAMEANDTYPE;
    private static final int ACC_PUBLIC;
    private static final int ACC_PRIVATE;
    private static final int ACC_STATIC;
    private static final int ACC_FINAL;
    private static final int ACC_SUPER;
    private static final int opc_aconst_null;
    private static final int opc_iconst_0;
    private static final int opc_bipush;
    private static final int opc_sipush;
    private static final int opc_ldc;
    private static final int opc_ldc_w;
    private static final int opc_iload;
    private static final int opc_lload;
    private static final int opc_fload;
    private static final int opc_dload;
    private static final int opc_aload;
    private static final int opc_iload_0;
    private static final int opc_lload_0;
    private static final int opc_fload_0;
    private static final int opc_dload_0;
    private static final int opc_aload_0;
    private static final int opc_astore;
    private static final int opc_astore_0;
    private static final int opc_aastore;
    private static final int opc_pop;
    private static final int opc_dup;
    private static final int opc_ireturn;
    private static final int opc_lreturn;
    private static final int opc_freturn;
    private static final int opc_dreturn;
    private static final int opc_areturn;
    private static final int opc_return;
    private static final int opc_getstatic;
    private static final int opc_putstatic;
    private static final int opc_getfield;
    private static final int opc_invokevirtual;
    private static final int opc_invokespecial;
    private static final int opc_invokestatic;
    private static final int opc_invokeinterface;
    private static final int opc_new;
    private static final int opc_anewarray;
    private static final int opc_athrow;
    private static final int opc_checkcast;
    private static final int opc_wide;
    private static final java.lang.String superclassName;
    private static final java.lang.String handlerFieldName;
    private static final boolean saveGeneratedFiles;
    private static java.lang.reflect.Method hashCodeMethod;
    private static java.lang.reflect.Method equalsMethod;
    private static java.lang.reflect.Method toStringMethod;
    private java.lang.String className;
    private java.lang.Class[] interfaces;
    private sun.misc.ProxyGenerator$ConstantPool cp;
    private java.util.List fields;
    private java.util.List methods;
    private java.util.Map proxyMethods;
    private int proxyMethodCount;
    static final boolean $assertionsDisabled;

    public static byte[] generateProxyClass(java.lang.String, java.lang.Class[])
    {
        java.lang.String r0;
        java.lang.Class[] r1;
        sun.misc.ProxyGenerator $r2, r3;
        byte[] r4;
        boolean $z0;
        sun.misc.ProxyGenerator$1 $r5;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.Class[];
        $r2 = new sun.misc.ProxyGenerator;
        specialinvoke $r2.<sun.misc.ProxyGenerator: void <init>(java.lang.String,java.lang.Class[])>(r0, r1);
        r3 = $r2;
        r4 = specialinvoke r3.<sun.misc.ProxyGenerator: byte[] generateClassFile()>();
        $z0 = <sun.misc.ProxyGenerator: boolean saveGeneratedFiles>;
        if $z0 == 0 goto label0;

        $r5 = new sun.misc.ProxyGenerator$1;
        specialinvoke $r5.<sun.misc.ProxyGenerator$1: void <init>(java.lang.String,byte[])>(r0, r4);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r5);

     label0:
        return r4;
    }

    private void <init>(java.lang.String, java.lang.Class[])
    {
        sun.misc.ProxyGenerator r0;
        java.lang.String r1;
        java.lang.Class[] r2;
        sun.misc.ProxyGenerator$ConstantPool $r3;
        java.util.ArrayList $r4, $r5;
        java.util.HashMap $r6;

        r0 := @this: sun.misc.ProxyGenerator;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Class[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r3 = new sun.misc.ProxyGenerator$ConstantPool;
        specialinvoke $r3.<sun.misc.ProxyGenerator$ConstantPool: void <init>(sun.misc.ProxyGenerator$1)>(null);
        r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp> = $r3;
        $r4 = new java.util.ArrayList;
        specialinvoke $r4.<java.util.ArrayList: void <init>()>();
        r0.<sun.misc.ProxyGenerator: java.util.List fields> = $r4;
        $r5 = new java.util.ArrayList;
        specialinvoke $r5.<java.util.ArrayList: void <init>()>();
        r0.<sun.misc.ProxyGenerator: java.util.List methods> = $r5;
        $r6 = new java.util.HashMap;
        specialinvoke $r6.<java.util.HashMap: void <init>()>();
        r0.<sun.misc.ProxyGenerator: java.util.Map proxyMethods> = $r6;
        r0.<sun.misc.ProxyGenerator: int proxyMethodCount> = 0;
        r0.<sun.misc.ProxyGenerator: java.lang.String className> = r1;
        r0.<sun.misc.ProxyGenerator: java.lang.Class[] interfaces> = r2;
        return;
    }

    private byte[] generateClassFile()
    {
        sun.misc.ProxyGenerator r0;
        java.lang.reflect.Method $r1, $r4, $r5, $r9;
        int i0, i1, $i2, $i3, $i4, $i5, i8, $i9, $i13, i14, $i15, $i17, $i18;
        java.lang.reflect.Method[] r2;
        sun.misc.ProxyGenerator$ProxyMethod r3;
        java.lang.Class[] $r6, $r7, $r10, $r44, $r46, $r60, $r61, $r63;
        java.lang.Class $r8, $r11, $r47, $r64;
        java.util.Map $r12, $r19;
        java.util.Collection $r13, $r20;
        java.util.Iterator r14, r21, r24, r69, r74;
        boolean $z0, $z2, $z3, $z7, $z8;
        java.lang.Object $r15, $r22, $r25, $r70, $r75;
        java.util.List r16, $r17, r23, $r26, $r29, $r31, $r36, $r38, $r67, $r68, $r72, $r73;
        sun.misc.ProxyGenerator$MethodInfo $r18, $r30, $r32, r76;
        sun.misc.ProxyGenerator$FieldInfo $r27, r71;
        java.lang.String $r28, $r41, $r42, $r48, $r49, $r57, $r58, $r65, $r66;
        java.io.IOException $r33, r34, $r77, r78;
        java.lang.InternalError $r35, $r79;
        java.lang.IllegalArgumentException $r37, $r39;
        sun.misc.ProxyGenerator$ConstantPool $r40, $r43, $r45, $r50, $r55, $r56, $r59, $r62;
        java.io.ByteArrayOutputStream $r51, r52;
        java.io.DataOutputStream $r53, r54;
        short $s11, $s12, $s16;
        byte[] $r80;

        r0 := @this: sun.misc.ProxyGenerator;
        $r1 = <sun.misc.ProxyGenerator: java.lang.reflect.Method hashCodeMethod>;
        specialinvoke r0.<sun.misc.ProxyGenerator: void addProxyMethod(java.lang.reflect.Method,java.lang.Class)>($r1, class "java/lang/Object");
        $r4 = <sun.misc.ProxyGenerator: java.lang.reflect.Method equalsMethod>;
        specialinvoke r0.<sun.misc.ProxyGenerator: void addProxyMethod(java.lang.reflect.Method,java.lang.Class)>($r4, class "java/lang/Object");
        $r5 = <sun.misc.ProxyGenerator: java.lang.reflect.Method toStringMethod>;
        specialinvoke r0.<sun.misc.ProxyGenerator: void addProxyMethod(java.lang.reflect.Method,java.lang.Class)>($r5, class "java/lang/Object");
        i0 = 0;

     label0:
        $r6 = r0.<sun.misc.ProxyGenerator: java.lang.Class[] interfaces>;
        $i2 = lengthof $r6;
        if i0 >= $i2 goto label3;

        $r7 = r0.<sun.misc.ProxyGenerator: java.lang.Class[] interfaces>;
        $r8 = $r7[i0];
        r2 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();
        i1 = 0;

     label1:
        $i3 = lengthof r2;
        if i1 >= $i3 goto label2;

        $r9 = r2[i1];
        $r10 = r0.<sun.misc.ProxyGenerator: java.lang.Class[] interfaces>;
        $r11 = $r10[i0];
        specialinvoke r0.<sun.misc.ProxyGenerator: void addProxyMethod(java.lang.reflect.Method,java.lang.Class)>($r9, $r11);
        i1 = i1 + 1;
        goto label1;

     label2:
        i0 = i0 + 1;
        goto label0;

     label3:
        $r12 = r0.<sun.misc.ProxyGenerator: java.util.Map proxyMethods>;
        $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Collection values()>();
        r14 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label5;

        $r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();
        r16 = (java.util.List) $r15;
        staticinvoke <sun.misc.ProxyGenerator: void checkReturnTypes(java.util.List)>(r16);
        goto label4;

     label5:
        $r17 = r0.<sun.misc.ProxyGenerator: java.util.List methods>;
        $r18 = specialinvoke r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$MethodInfo generateConstructor()>();
        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r18);
        $r19 = r0.<sun.misc.ProxyGenerator: java.util.Map proxyMethods>;
        $r20 = interfaceinvoke $r19.<java.util.Map: java.util.Collection values()>();
        r21 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label9;

        $r22 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();
        r23 = (java.util.List) $r22;
        r24 = interfaceinvoke r23.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z3 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();
        if $z3 == 0 goto label8;

        $r25 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();
        r3 = (sun.misc.ProxyGenerator$ProxyMethod) $r25;
        $r26 = r0.<sun.misc.ProxyGenerator: java.util.List fields>;
        $r27 = new sun.misc.ProxyGenerator$FieldInfo;
        $r28 = r3.<sun.misc.ProxyGenerator$ProxyMethod: java.lang.String methodFieldName>;
        specialinvoke $r27.<sun.misc.ProxyGenerator$FieldInfo: void <init>(sun.misc.ProxyGenerator,java.lang.String,java.lang.String,int)>(r0, $r28, "Ljava/lang/reflect/Method;", 10);
        interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>($r27);
        $r29 = r0.<sun.misc.ProxyGenerator: java.util.List methods>;
        $r30 = staticinvoke <sun.misc.ProxyGenerator$ProxyMethod: sun.misc.ProxyGenerator$MethodInfo access$200(sun.misc.ProxyGenerator$ProxyMethod)>(r3);
        interfaceinvoke $r29.<java.util.List: boolean add(java.lang.Object)>($r30);
        goto label7;

     label8:
        goto label6;

     label9:
        $r31 = r0.<sun.misc.ProxyGenerator: java.util.List methods>;
        $r32 = specialinvoke r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$MethodInfo generateStaticInitializer()>();
        interfaceinvoke $r31.<java.util.List: boolean add(java.lang.Object)>($r32);

     label10:
        goto label12;

     label11:
        $r33 := @caughtexception;
        r34 = $r33;
        $r35 = new java.lang.InternalError;
        specialinvoke $r35.<java.lang.InternalError: void <init>(java.lang.String)>("unexpected I/O Exception");
        throw $r35;

     label12:
        $r36 = r0.<sun.misc.ProxyGenerator: java.util.List methods>;
        $i4 = interfaceinvoke $r36.<java.util.List: int size()>();
        if $i4 <= 65535 goto label13;

        $r37 = new java.lang.IllegalArgumentException;
        specialinvoke $r37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("method limit exceeded");
        throw $r37;

     label13:
        $r38 = r0.<sun.misc.ProxyGenerator: java.util.List fields>;
        $i5 = interfaceinvoke $r38.<java.util.List: int size()>();
        if $i5 <= 65535 goto label14;

        $r39 = new java.lang.IllegalArgumentException;
        specialinvoke $r39.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("field limit exceeded");
        throw $r39;

     label14:
        $r40 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        $r41 = r0.<sun.misc.ProxyGenerator: java.lang.String className>;
        $r42 = staticinvoke <sun.misc.ProxyGenerator: java.lang.String dotToSlash(java.lang.String)>($r41);
        virtualinvoke $r40.<sun.misc.ProxyGenerator$ConstantPool: short getClass(java.lang.String)>($r42);
        $r43 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        virtualinvoke $r43.<sun.misc.ProxyGenerator$ConstantPool: short getClass(java.lang.String)>("java/lang/reflect/Proxy");
        i8 = 0;

     label15:
        $r44 = r0.<sun.misc.ProxyGenerator: java.lang.Class[] interfaces>;
        $i9 = lengthof $r44;
        if i8 >= $i9 goto label16;

        $r45 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        $r46 = r0.<sun.misc.ProxyGenerator: java.lang.Class[] interfaces>;
        $r47 = $r46[i8];
        $r48 = virtualinvoke $r47.<java.lang.Class: java.lang.String getName()>();
        $r49 = staticinvoke <sun.misc.ProxyGenerator: java.lang.String dotToSlash(java.lang.String)>($r48);
        virtualinvoke $r45.<sun.misc.ProxyGenerator$ConstantPool: short getClass(java.lang.String)>($r49);
        i8 = i8 + 1;
        goto label15;

     label16:
        $r50 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        virtualinvoke $r50.<sun.misc.ProxyGenerator$ConstantPool: void setReadOnly()>();
        $r51 = new java.io.ByteArrayOutputStream;
        specialinvoke $r51.<java.io.ByteArrayOutputStream: void <init>()>();
        r52 = $r51;
        $r53 = new java.io.DataOutputStream;
        specialinvoke $r53.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r52);
        r54 = $r53;

     label17:
        virtualinvoke r54.<java.io.DataOutputStream: void writeInt(int)>(-889275714);
        virtualinvoke r54.<java.io.DataOutputStream: void writeShort(int)>(0);
        virtualinvoke r54.<java.io.DataOutputStream: void writeShort(int)>(49);
        $r55 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        virtualinvoke $r55.<sun.misc.ProxyGenerator$ConstantPool: void write(java.io.OutputStream)>(r54);
        virtualinvoke r54.<java.io.DataOutputStream: void writeShort(int)>(49);
        $r56 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        $r57 = r0.<sun.misc.ProxyGenerator: java.lang.String className>;
        $r58 = staticinvoke <sun.misc.ProxyGenerator: java.lang.String dotToSlash(java.lang.String)>($r57);
        $s11 = virtualinvoke $r56.<sun.misc.ProxyGenerator$ConstantPool: short getClass(java.lang.String)>($r58);
        virtualinvoke r54.<java.io.DataOutputStream: void writeShort(int)>($s11);
        $r59 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        $s12 = virtualinvoke $r59.<sun.misc.ProxyGenerator$ConstantPool: short getClass(java.lang.String)>("java/lang/reflect/Proxy");
        virtualinvoke r54.<java.io.DataOutputStream: void writeShort(int)>($s12);
        $r60 = r0.<sun.misc.ProxyGenerator: java.lang.Class[] interfaces>;
        $i13 = lengthof $r60;
        virtualinvoke r54.<java.io.DataOutputStream: void writeShort(int)>($i13);
        i14 = 0;

     label18:
        $r61 = r0.<sun.misc.ProxyGenerator: java.lang.Class[] interfaces>;
        $i15 = lengthof $r61;
        if i14 >= $i15 goto label19;

        $r62 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        $r63 = r0.<sun.misc.ProxyGenerator: java.lang.Class[] interfaces>;
        $r64 = $r63[i14];
        $r65 = virtualinvoke $r64.<java.lang.Class: java.lang.String getName()>();
        $r66 = staticinvoke <sun.misc.ProxyGenerator: java.lang.String dotToSlash(java.lang.String)>($r65);
        $s16 = virtualinvoke $r62.<sun.misc.ProxyGenerator$ConstantPool: short getClass(java.lang.String)>($r66);
        virtualinvoke r54.<java.io.DataOutputStream: void writeShort(int)>($s16);
        i14 = i14 + 1;
        goto label18;

     label19:
        $r67 = r0.<sun.misc.ProxyGenerator: java.util.List fields>;
        $i17 = interfaceinvoke $r67.<java.util.List: int size()>();
        virtualinvoke r54.<java.io.DataOutputStream: void writeShort(int)>($i17);
        $r68 = r0.<sun.misc.ProxyGenerator: java.util.List fields>;
        r69 = interfaceinvoke $r68.<java.util.List: java.util.Iterator iterator()>();

     label20:
        $z7 = interfaceinvoke r69.<java.util.Iterator: boolean hasNext()>();
        if $z7 == 0 goto label21;

        $r70 = interfaceinvoke r69.<java.util.Iterator: java.lang.Object next()>();
        r71 = (sun.misc.ProxyGenerator$FieldInfo) $r70;
        virtualinvoke r71.<sun.misc.ProxyGenerator$FieldInfo: void write(java.io.DataOutputStream)>(r54);
        goto label20;

     label21:
        $r72 = r0.<sun.misc.ProxyGenerator: java.util.List methods>;
        $i18 = interfaceinvoke $r72.<java.util.List: int size()>();
        virtualinvoke r54.<java.io.DataOutputStream: void writeShort(int)>($i18);
        $r73 = r0.<sun.misc.ProxyGenerator: java.util.List methods>;
        r74 = interfaceinvoke $r73.<java.util.List: java.util.Iterator iterator()>();

     label22:
        $z8 = interfaceinvoke r74.<java.util.Iterator: boolean hasNext()>();
        if $z8 == 0 goto label23;

        $r75 = interfaceinvoke r74.<java.util.Iterator: java.lang.Object next()>();
        r76 = (sun.misc.ProxyGenerator$MethodInfo) $r75;
        virtualinvoke r76.<sun.misc.ProxyGenerator$MethodInfo: void write(java.io.DataOutputStream)>(r54);
        goto label22;

     label23:
        virtualinvoke r54.<java.io.DataOutputStream: void writeShort(int)>(0);

     label24:
        goto label26;

     label25:
        $r77 := @caughtexception;
        r78 = $r77;
        $r79 = new java.lang.InternalError;
        specialinvoke $r79.<java.lang.InternalError: void <init>(java.lang.String)>("unexpected I/O Exception");
        throw $r79;

     label26:
        $r80 = virtualinvoke r52.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
        return $r80;

        catch java.io.IOException from label5 to label10 with label11;
        catch java.io.IOException from label17 to label24 with label25;
    }

    private void addProxyMethod(java.lang.reflect.Method, java.lang.Class)
    {
        sun.misc.ProxyGenerator r0;
        java.lang.reflect.Method r1;
        java.lang.Class r2, r5, $r19;
        java.lang.String r3, r7, $r14;
        java.lang.Class[] r4, r6, $r21, $r22, $r23, $r24, $r26;
        java.util.List r8;
        java.util.Iterator r9;
        sun.misc.ProxyGenerator$ProxyMethod r10, $r30;
        java.util.ArrayList r11, $r20, $r27;
        java.lang.StringBuilder $r12, $r13, $r15;
        java.util.Map $r16, $r28;
        java.lang.Object $r17, $r18;
        boolean $z0;
        int $i0;
        java.lang.Object[] $r25;

        r0 := @this: sun.misc.ProxyGenerator;
        r1 := @parameter0: java.lang.reflect.Method;
        r2 := @parameter1: java.lang.Class;
        r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();
        r4 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
        r5 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
        r6 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r14 = staticinvoke <sun.misc.ProxyGenerator: java.lang.String getParameterDescriptors(java.lang.Class[])>(r4);
        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);
        r7 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        $r16 = r0.<sun.misc.ProxyGenerator: java.util.Map proxyMethods>;
        $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);
        r8 = (java.util.List) $r17;
        if r8 == null goto label3;

        r9 = interfaceinvoke r8.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r18 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();
        r10 = (sun.misc.ProxyGenerator$ProxyMethod) $r18;
        $r19 = r10.<sun.misc.ProxyGenerator$ProxyMethod: java.lang.Class returnType>;
        if r5 != $r19 goto label1;

        $r20 = new java.util.ArrayList;
        specialinvoke $r20.<java.util.ArrayList: void <init>()>();
        r11 = $r20;
        $r21 = r10.<sun.misc.ProxyGenerator$ProxyMethod: java.lang.Class[] exceptionTypes>;
        staticinvoke <sun.misc.ProxyGenerator: void collectCompatibleTypes(java.lang.Class[],java.lang.Class[],java.util.List)>(r6, $r21, r11);
        $r22 = r10.<sun.misc.ProxyGenerator$ProxyMethod: java.lang.Class[] exceptionTypes>;
        staticinvoke <sun.misc.ProxyGenerator: void collectCompatibleTypes(java.lang.Class[],java.lang.Class[],java.util.List)>($r22, r6, r11);
        $i0 = interfaceinvoke r11.<java.util.List: int size()>();
        $r23 = newarray (java.lang.Class)[$i0];
        r10.<sun.misc.ProxyGenerator$ProxyMethod: java.lang.Class[] exceptionTypes> = $r23;
        $r24 = r10.<sun.misc.ProxyGenerator$ProxyMethod: java.lang.Class[] exceptionTypes>;
        $r25 = interfaceinvoke r11.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r24);
        $r26 = (java.lang.Class[]) $r25;
        r10.<sun.misc.ProxyGenerator$ProxyMethod: java.lang.Class[] exceptionTypes> = $r26;
        return;

     label1:
        goto label0;

     label2:
        goto label4;

     label3:
        $r27 = new java.util.ArrayList;
        specialinvoke $r27.<java.util.ArrayList: void <init>(int)>(3);
        r8 = $r27;
        $r28 = r0.<sun.misc.ProxyGenerator: java.util.Map proxyMethods>;
        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r8);

     label4:
        $r30 = new sun.misc.ProxyGenerator$ProxyMethod;
        specialinvoke $r30.<sun.misc.ProxyGenerator$ProxyMethod: void <init>(sun.misc.ProxyGenerator,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],java.lang.Class,sun.misc.ProxyGenerator$1)>(r0, r3, r4, r5, r6, r2, null);
        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r30);
        return;
    }

    private static void checkReturnTypes(java.util.List)
    {
        java.util.List r0;
        java.util.LinkedList r1, $r8;
        java.util.Iterator r2;
        sun.misc.ProxyGenerator$ProxyMethod r3, r24;
        java.lang.Class r4, r7;
        java.lang.StringBuilder $r5, $r11, $r15, $r16, $r18, $r19, $r26, $r27, $r31, $r32, $r33;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.ListIterator r6;
        int $i0, $i1;
        java.lang.Object $r9, $r21, $r23;
        java.lang.IllegalArgumentException $r10, $r25;
        java.lang.String $r12, $r14, $r17, $r20, $r28, $r30, $r34;
        java.lang.Class[] $r13, $r29;
        java.lang.AssertionError $r22;

        r0 := @parameter0: java.util.List;
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();
        if $i0 >= 2 goto label0;

        return;

     label0:
        $r8 = new java.util.LinkedList;
        specialinvoke $r8.<java.util.LinkedList: void <init>()>();
        r1 = $r8;
        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label9;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (sun.misc.ProxyGenerator$ProxyMethod) $r9;
        r4 = r3.<sun.misc.ProxyGenerator$ProxyMethod: java.lang.Class returnType>;
        $z2 = virtualinvoke r4.<java.lang.Class: boolean isPrimitive()>();
        if $z2 == 0 goto label2;

        $r10 = new java.lang.IllegalArgumentException;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("methods with same signature ");
        $r12 = r3.<sun.misc.ProxyGenerator$ProxyMethod: java.lang.String methodName>;
        $r13 = r3.<sun.misc.ProxyGenerator$ProxyMethod: java.lang.Class[] parameterTypes>;
        $r14 = staticinvoke <sun.misc.ProxyGenerator: java.lang.String getFriendlyMethodSignature(java.lang.String,java.lang.Class[])>($r12, $r13);
        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but incompatible return types: ");
        $r17 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();
        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and others");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);
        throw $r10;

     label2:
        z0 = 0;
        r6 = virtualinvoke r1.<java.util.LinkedList: java.util.ListIterator listIterator()>();

     label3:
        $z3 = interfaceinvoke r6.<java.util.ListIterator: boolean hasNext()>();
        if $z3 == 0 goto label7;

        $r21 = interfaceinvoke r6.<java.util.ListIterator: java.lang.Object next()>();
        r7 = (java.lang.Class) $r21;
        $z4 = virtualinvoke r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r7);
        if $z4 == 0 goto label4;

        $z5 = <sun.misc.ProxyGenerator: boolean $assertionsDisabled>;
        if $z5 != 0 goto label1;

        if z0 == 0 goto label1;

        $r22 = new java.lang.AssertionError;
        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();
        throw $r22;

     label4:
        $z6 = virtualinvoke r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);
        if $z6 == 0 goto label6;

        if z0 != 0 goto label5;

        interfaceinvoke r6.<java.util.ListIterator: void set(java.lang.Object)>(r4);
        z0 = 1;
        goto label6;

     label5:
        interfaceinvoke r6.<java.util.ListIterator: void remove()>();

     label6:
        goto label3;

     label7:
        if z0 != 0 goto label8;

        virtualinvoke r1.<java.util.LinkedList: boolean add(java.lang.Object)>(r4);

     label8:
        goto label1;

     label9:
        $i1 = virtualinvoke r1.<java.util.LinkedList: int size()>();
        if $i1 <= 1 goto label10;

        $r23 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);
        r24 = (sun.misc.ProxyGenerator$ProxyMethod) $r23;
        $r25 = new java.lang.IllegalArgumentException;
        $r26 = new java.lang.StringBuilder;
        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("methods with same signature ");
        $r28 = r24.<sun.misc.ProxyGenerator$ProxyMethod: java.lang.String methodName>;
        $r29 = r24.<sun.misc.ProxyGenerator$ProxyMethod: java.lang.Class[] parameterTypes>;
        $r30 = staticinvoke <sun.misc.ProxyGenerator: java.lang.String getFriendlyMethodSignature(java.lang.String,java.lang.Class[])>($r28, $r29);
        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but incompatible return types: ");
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r34);
        throw $r25;

     label10:
        return;
    }

    private sun.misc.ProxyGenerator$MethodInfo generateConstructor() throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        sun.misc.ProxyGenerator$MethodInfo $r1, r2;
        java.io.DataOutputStream r3, $r4;
        java.io.ByteArrayOutputStream $r5;
        sun.misc.ProxyGenerator$ConstantPool $r6;
        short $s0;
        short[] $r7;

        r0 := @this: sun.misc.ProxyGenerator;
        $r1 = new sun.misc.ProxyGenerator$MethodInfo;
        specialinvoke $r1.<sun.misc.ProxyGenerator$MethodInfo: void <init>(sun.misc.ProxyGenerator,java.lang.String,java.lang.String,int)>(r0, "<init>", "(Ljava/lang/reflect/InvocationHandler;)V", 1);
        r2 = $r1;
        $r4 = new java.io.DataOutputStream;
        $r5 = r2.<sun.misc.ProxyGenerator$MethodInfo: java.io.ByteArrayOutputStream code>;
        specialinvoke $r4.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r5);
        r3 = $r4;
        specialinvoke r0.<sun.misc.ProxyGenerator: void code_aload(int,java.io.DataOutputStream)>(0, r3);
        specialinvoke r0.<sun.misc.ProxyGenerator: void code_aload(int,java.io.DataOutputStream)>(1, r3);
        virtualinvoke r3.<java.io.DataOutputStream: void writeByte(int)>(183);
        $r6 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        $s0 = virtualinvoke $r6.<sun.misc.ProxyGenerator$ConstantPool: short getMethodRef(java.lang.String,java.lang.String,java.lang.String)>("java/lang/reflect/Proxy", "<init>", "(Ljava/lang/reflect/InvocationHandler;)V");
        virtualinvoke r3.<java.io.DataOutputStream: void writeShort(int)>($s0);
        virtualinvoke r3.<java.io.DataOutputStream: void writeByte(int)>(177);
        r2.<sun.misc.ProxyGenerator$MethodInfo: short maxStack> = 10;
        r2.<sun.misc.ProxyGenerator$MethodInfo: short maxLocals> = 2;
        $r7 = newarray (short)[0];
        r2.<sun.misc.ProxyGenerator$MethodInfo: short[] declaredExceptions> = $r7;
        return r2;
    }

    private sun.misc.ProxyGenerator$MethodInfo generateStaticInitializer() throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        sun.misc.ProxyGenerator$MethodInfo $r1, r2;
        byte b0, b1;
        java.io.DataOutputStream r3, $r8;
        java.util.Iterator r4, r6;
        java.util.List r5, $r15, $r22;
        sun.misc.ProxyGenerator$ProxyMethod r7;
        short s2, s3, $s5, $s6, $s7, $s8, $s9, s11, $s12, $s13, $s14, $s15, $s18;
        java.io.ByteArrayOutputStream $r9, $r14, $r21, $r28;
        java.util.Map $r10;
        java.util.Collection $r11;
        boolean $z0, $z1;
        java.lang.Object $r12, $r13;
        int $i4, $i10, $i16, $i17;
        sun.misc.ProxyGenerator$ExceptionTableEntry $r16, $r23;
        sun.misc.ProxyGenerator$ConstantPool $r17, $r18, $r19, $r20, $r24, $r25, $r26, $r27;
        java.lang.IllegalArgumentException $r29;
        short[] $r30;

        r0 := @this: sun.misc.ProxyGenerator;
        $r1 = new sun.misc.ProxyGenerator$MethodInfo;
        specialinvoke $r1.<sun.misc.ProxyGenerator$MethodInfo: void <init>(sun.misc.ProxyGenerator,java.lang.String,java.lang.String,int)>(r0, "<clinit>", "()V", 8);
        r2 = $r1;
        b0 = 1;
        b1 = 0;
        $r8 = new java.io.DataOutputStream;
        $r9 = r2.<sun.misc.ProxyGenerator$MethodInfo: java.io.ByteArrayOutputStream code>;
        specialinvoke $r8.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r9);
        r3 = $r8;
        $r10 = r0.<sun.misc.ProxyGenerator: java.util.Map proxyMethods>;
        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Collection values()>();
        r4 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.util.List) $r12;
        r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label2;

        $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();
        r7 = (sun.misc.ProxyGenerator$ProxyMethod) $r13;
        staticinvoke <sun.misc.ProxyGenerator$ProxyMethod: void access$1900(sun.misc.ProxyGenerator$ProxyMethod,java.io.DataOutputStream)>(r7, r3);
        goto label1;

     label2:
        goto label0;

     label3:
        virtualinvoke r3.<java.io.DataOutputStream: void writeByte(int)>(177);
        $r14 = r2.<sun.misc.ProxyGenerator$MethodInfo: java.io.ByteArrayOutputStream code>;
        $i4 = virtualinvoke $r14.<java.io.ByteArrayOutputStream: int size()>();
        $s5 = (short) $i4;
        s2 = $s5;
        s3 = $s5;
        $r15 = r2.<sun.misc.ProxyGenerator$MethodInfo: java.util.List exceptionTable>;
        $r16 = new sun.misc.ProxyGenerator$ExceptionTableEntry;
        $r17 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        $s6 = virtualinvoke $r17.<sun.misc.ProxyGenerator$ConstantPool: short getClass(java.lang.String)>("java/lang/NoSuchMethodException");
        specialinvoke $r16.<sun.misc.ProxyGenerator$ExceptionTableEntry: void <init>(short,short,short,short)>(b1, s3, s2, $s6);
        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r16);
        specialinvoke r0.<sun.misc.ProxyGenerator: void code_astore(int,java.io.DataOutputStream)>(b0, r3);
        virtualinvoke r3.<java.io.DataOutputStream: void writeByte(int)>(187);
        $r18 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        $s7 = virtualinvoke $r18.<sun.misc.ProxyGenerator$ConstantPool: short getClass(java.lang.String)>("java/lang/NoSuchMethodError");
        virtualinvoke r3.<java.io.DataOutputStream: void writeShort(int)>($s7);
        virtualinvoke r3.<java.io.DataOutputStream: void writeByte(int)>(89);
        specialinvoke r0.<sun.misc.ProxyGenerator: void code_aload(int,java.io.DataOutputStream)>(b0, r3);
        virtualinvoke r3.<java.io.DataOutputStream: void writeByte(int)>(182);
        $r19 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        $s8 = virtualinvoke $r19.<sun.misc.ProxyGenerator$ConstantPool: short getMethodRef(java.lang.String,java.lang.String,java.lang.String)>("java/lang/Throwable", "getMessage", "()Ljava/lang/String;");
        virtualinvoke r3.<java.io.DataOutputStream: void writeShort(int)>($s8);
        virtualinvoke r3.<java.io.DataOutputStream: void writeByte(int)>(183);
        $r20 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        $s9 = virtualinvoke $r20.<sun.misc.ProxyGenerator$ConstantPool: short getMethodRef(java.lang.String,java.lang.String,java.lang.String)>("java/lang/NoSuchMethodError", "<init>", "(Ljava/lang/String;)V");
        virtualinvoke r3.<java.io.DataOutputStream: void writeShort(int)>($s9);
        virtualinvoke r3.<java.io.DataOutputStream: void writeByte(int)>(191);
        $r21 = r2.<sun.misc.ProxyGenerator$MethodInfo: java.io.ByteArrayOutputStream code>;
        $i10 = virtualinvoke $r21.<java.io.ByteArrayOutputStream: int size()>();
        s11 = (short) $i10;
        $r22 = r2.<sun.misc.ProxyGenerator$MethodInfo: java.util.List exceptionTable>;
        $r23 = new sun.misc.ProxyGenerator$ExceptionTableEntry;
        $r24 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        $s12 = virtualinvoke $r24.<sun.misc.ProxyGenerator$ConstantPool: short getClass(java.lang.String)>("java/lang/ClassNotFoundException");
        specialinvoke $r23.<sun.misc.ProxyGenerator$ExceptionTableEntry: void <init>(short,short,short,short)>(b1, s3, s11, $s12);
        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>($r23);
        specialinvoke r0.<sun.misc.ProxyGenerator: void code_astore(int,java.io.DataOutputStream)>(b0, r3);
        virtualinvoke r3.<java.io.DataOutputStream: void writeByte(int)>(187);
        $r25 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        $s13 = virtualinvoke $r25.<sun.misc.ProxyGenerator$ConstantPool: short getClass(java.lang.String)>("java/lang/NoClassDefFoundError");
        virtualinvoke r3.<java.io.DataOutputStream: void writeShort(int)>($s13);
        virtualinvoke r3.<java.io.DataOutputStream: void writeByte(int)>(89);
        specialinvoke r0.<sun.misc.ProxyGenerator: void code_aload(int,java.io.DataOutputStream)>(b0, r3);
        virtualinvoke r3.<java.io.DataOutputStream: void writeByte(int)>(182);
        $r26 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        $s14 = virtualinvoke $r26.<sun.misc.ProxyGenerator$ConstantPool: short getMethodRef(java.lang.String,java.lang.String,java.lang.String)>("java/lang/Throwable", "getMessage", "()Ljava/lang/String;");
        virtualinvoke r3.<java.io.DataOutputStream: void writeShort(int)>($s14);
        virtualinvoke r3.<java.io.DataOutputStream: void writeByte(int)>(183);
        $r27 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        $s15 = virtualinvoke $r27.<sun.misc.ProxyGenerator$ConstantPool: short getMethodRef(java.lang.String,java.lang.String,java.lang.String)>("java/lang/NoClassDefFoundError", "<init>", "(Ljava/lang/String;)V");
        virtualinvoke r3.<java.io.DataOutputStream: void writeShort(int)>($s15);
        virtualinvoke r3.<java.io.DataOutputStream: void writeByte(int)>(191);
        $r28 = r2.<sun.misc.ProxyGenerator$MethodInfo: java.io.ByteArrayOutputStream code>;
        $i16 = virtualinvoke $r28.<java.io.ByteArrayOutputStream: int size()>();
        if $i16 <= 65535 goto label4;

        $r29 = new java.lang.IllegalArgumentException;
        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("code size limit exceeded");
        throw $r29;

     label4:
        r2.<sun.misc.ProxyGenerator$MethodInfo: short maxStack> = 10;
        $i17 = b0 + 1;
        $s18 = (short) $i17;
        r2.<sun.misc.ProxyGenerator$MethodInfo: short maxLocals> = $s18;
        $r30 = newarray (short)[0];
        r2.<sun.misc.ProxyGenerator$MethodInfo: short[] declaredExceptions> = $r30;
        return r2;
    }

    private void code_iload(int, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        int i0;
        java.io.DataOutputStream r1;

        r0 := @this: sun.misc.ProxyGenerator;
        i0 := @parameter0: int;
        r1 := @parameter1: java.io.DataOutputStream;
        specialinvoke r0.<sun.misc.ProxyGenerator: void codeLocalLoadStore(int,int,int,java.io.DataOutputStream)>(i0, 21, 26, r1);
        return;
    }

    private void code_lload(int, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        int i0;
        java.io.DataOutputStream r1;

        r0 := @this: sun.misc.ProxyGenerator;
        i0 := @parameter0: int;
        r1 := @parameter1: java.io.DataOutputStream;
        specialinvoke r0.<sun.misc.ProxyGenerator: void codeLocalLoadStore(int,int,int,java.io.DataOutputStream)>(i0, 22, 30, r1);
        return;
    }

    private void code_fload(int, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        int i0;
        java.io.DataOutputStream r1;

        r0 := @this: sun.misc.ProxyGenerator;
        i0 := @parameter0: int;
        r1 := @parameter1: java.io.DataOutputStream;
        specialinvoke r0.<sun.misc.ProxyGenerator: void codeLocalLoadStore(int,int,int,java.io.DataOutputStream)>(i0, 23, 34, r1);
        return;
    }

    private void code_dload(int, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        int i0;
        java.io.DataOutputStream r1;

        r0 := @this: sun.misc.ProxyGenerator;
        i0 := @parameter0: int;
        r1 := @parameter1: java.io.DataOutputStream;
        specialinvoke r0.<sun.misc.ProxyGenerator: void codeLocalLoadStore(int,int,int,java.io.DataOutputStream)>(i0, 24, 38, r1);
        return;
    }

    private void code_aload(int, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        int i0;
        java.io.DataOutputStream r1;

        r0 := @this: sun.misc.ProxyGenerator;
        i0 := @parameter0: int;
        r1 := @parameter1: java.io.DataOutputStream;
        specialinvoke r0.<sun.misc.ProxyGenerator: void codeLocalLoadStore(int,int,int,java.io.DataOutputStream)>(i0, 25, 42, r1);
        return;
    }

    private void code_astore(int, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        int i0;
        java.io.DataOutputStream r1;

        r0 := @this: sun.misc.ProxyGenerator;
        i0 := @parameter0: int;
        r1 := @parameter1: java.io.DataOutputStream;
        specialinvoke r0.<sun.misc.ProxyGenerator: void codeLocalLoadStore(int,int,int,java.io.DataOutputStream)>(i0, 58, 75, r1);
        return;
    }

    private void codeLocalLoadStore(int, int, int, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        int i0, i1, i2, $i3, $i4, $i5;
        java.io.DataOutputStream r1;
        boolean $z0;
        java.lang.AssertionError $r2;

        r0 := @this: sun.misc.ProxyGenerator;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        r1 := @parameter3: java.io.DataOutputStream;
        $z0 = <sun.misc.ProxyGenerator: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        if i0 < 0 goto label0;

        if i0 <= 65535 goto label1;

     label0:
        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label1:
        if i0 > 3 goto label2;

        $i3 = i2 + i0;
        virtualinvoke r1.<java.io.DataOutputStream: void writeByte(int)>($i3);
        goto label4;

     label2:
        if i0 > 255 goto label3;

        virtualinvoke r1.<java.io.DataOutputStream: void writeByte(int)>(i1);
        $i4 = i0 & 255;
        virtualinvoke r1.<java.io.DataOutputStream: void writeByte(int)>($i4);
        goto label4;

     label3:
        virtualinvoke r1.<java.io.DataOutputStream: void writeByte(int)>(196);
        virtualinvoke r1.<java.io.DataOutputStream: void writeByte(int)>(i1);
        $i5 = i0 & 65535;
        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i5);

     label4:
        return;
    }

    private void code_ldc(int, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        int i0, $i1, $i2;
        java.io.DataOutputStream r1;
        boolean $z0;
        java.lang.AssertionError $r2;

        r0 := @this: sun.misc.ProxyGenerator;
        i0 := @parameter0: int;
        r1 := @parameter1: java.io.DataOutputStream;
        $z0 = <sun.misc.ProxyGenerator: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        if i0 < 0 goto label0;

        if i0 <= 65535 goto label1;

     label0:
        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label1:
        if i0 > 255 goto label2;

        virtualinvoke r1.<java.io.DataOutputStream: void writeByte(int)>(18);
        $i1 = i0 & 255;
        virtualinvoke r1.<java.io.DataOutputStream: void writeByte(int)>($i1);
        goto label3;

     label2:
        virtualinvoke r1.<java.io.DataOutputStream: void writeByte(int)>(19);
        $i2 = i0 & 65535;
        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i2);

     label3:
        return;
    }

    private void code_ipush(int, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        int i0, $i1, $i2, $i3;
        java.io.DataOutputStream r1;
        java.lang.AssertionError $r2;

        r0 := @this: sun.misc.ProxyGenerator;
        i0 := @parameter0: int;
        r1 := @parameter1: java.io.DataOutputStream;
        if i0 < -1 goto label0;

        if i0 > 5 goto label0;

        $i1 = 3 + i0;
        virtualinvoke r1.<java.io.DataOutputStream: void writeByte(int)>($i1);
        goto label3;

     label0:
        if i0 < -128 goto label1;

        if i0 > 127 goto label1;

        virtualinvoke r1.<java.io.DataOutputStream: void writeByte(int)>(16);
        $i2 = i0 & 255;
        virtualinvoke r1.<java.io.DataOutputStream: void writeByte(int)>($i2);
        goto label3;

     label1:
        if i0 < -32768 goto label2;

        if i0 > 32767 goto label2;

        virtualinvoke r1.<java.io.DataOutputStream: void writeByte(int)>(17);
        $i3 = i0 & 65535;
        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i3);
        goto label3;

     label2:
        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label3:
        return;
    }

    private void codeClassForName(java.lang.Class, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        java.lang.Class r1;
        java.io.DataOutputStream r2;
        sun.misc.ProxyGenerator$ConstantPool $r3, $r5;
        java.lang.String $r4;
        short $s0, $s1;

        r0 := @this: sun.misc.ProxyGenerator;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.io.DataOutputStream;
        $r3 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();
        $s0 = virtualinvoke $r3.<sun.misc.ProxyGenerator$ConstantPool: short getString(java.lang.String)>($r4);
        specialinvoke r0.<sun.misc.ProxyGenerator: void code_ldc(int,java.io.DataOutputStream)>($s0, r2);
        virtualinvoke r2.<java.io.DataOutputStream: void writeByte(int)>(184);
        $r5 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        $s1 = virtualinvoke $r5.<sun.misc.ProxyGenerator$ConstantPool: short getMethodRef(java.lang.String,java.lang.String,java.lang.String)>("java/lang/Class", "forName", "(Ljava/lang/String;)Ljava/lang/Class;");
        virtualinvoke r2.<java.io.DataOutputStream: void writeShort(int)>($s1);
        return;
    }

    private static java.lang.String dotToSlash(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(46, 47);
        return $r1;
    }

    private static java.lang.String getMethodDescriptor(java.lang.Class[], java.lang.Class)
    {
        java.lang.Class[] r0;
        java.lang.Class r1, $r3;
        java.lang.StringBuilder $r2, $r5, $r7;
        java.lang.String $r4, $r6, $r8;

        r0 := @parameter0: java.lang.Class[];
        r1 := @parameter1: java.lang.Class;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = staticinvoke <sun.misc.ProxyGenerator: java.lang.String getParameterDescriptors(java.lang.Class[])>(r0);
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r3 = <java.lang.Void: java.lang.Class TYPE>;
        if r1 != $r3 goto label0;

        $r6 = "V";
        goto label1;

     label0:
        $r6 = staticinvoke <sun.misc.ProxyGenerator: java.lang.String getFieldType(java.lang.Class)>(r1);

     label1:
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r8;
    }

    private static java.lang.String getParameterDescriptors(java.lang.Class[])
    {
        java.lang.Class[] r0;
        java.lang.StringBuilder $r1, r2;
        int i0, $i1;
        java.lang.Class $r3;
        java.lang.String $r4, $r7;

        r0 := @parameter0: java.lang.Class[];
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("(");
        r2 = $r1;
        i0 = 0;

     label0:
        $i1 = lengthof r0;
        if i0 >= $i1 goto label1;

        $r3 = r0[i0];
        $r4 = staticinvoke <sun.misc.ProxyGenerator: java.lang.String getFieldType(java.lang.Class)>($r3);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        i0 = i0 + 1;
        goto label0;

     label1:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);
        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r7;
    }

    private static java.lang.String getFieldType(java.lang.Class)
    {
        java.lang.Class r0;
        boolean $z0, $z1;
        sun.misc.ProxyGenerator$PrimitiveTypeInfo $r1;
        java.lang.String $r2, $r3, $r4, $r7, $r8, $r11;
        java.lang.StringBuilder $r5, $r6, $r9, $r10;

        r0 := @parameter0: java.lang.Class;
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();
        if $z0 == 0 goto label0;

        $r1 = staticinvoke <sun.misc.ProxyGenerator$PrimitiveTypeInfo: sun.misc.ProxyGenerator$PrimitiveTypeInfo get(java.lang.Class)>(r0);
        $r2 = $r1.<sun.misc.ProxyGenerator$PrimitiveTypeInfo: java.lang.String baseTypeString>;
        return $r2;

     label0:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();
        if $z1 == 0 goto label1;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(char,char)>(46, 47);
        return $r4;

     label1:
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("L");
        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        $r8 = staticinvoke <sun.misc.ProxyGenerator: java.lang.String dotToSlash(java.lang.String)>($r7);
        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r11;
    }

    private static java.lang.String getFriendlyMethodSignature(java.lang.String, java.lang.Class[])
    {
        java.lang.String r0, $r7, $r11;
        java.lang.Class[] r1;
        java.lang.StringBuilder $r2, r3;
        int i0, i1, $i2, $i3;
        java.lang.Class r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.Class[];
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(r0);
        r3 = $r2;
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);
        i0 = 0;

     label0:
        $i2 = lengthof r1;
        if i0 >= $i2 goto label6;

        if i0 <= 0 goto label1;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label1:
        r4 = r1[i0];
        i1 = 0;

     label2:
        $z0 = virtualinvoke r4.<java.lang.Class: boolean isArray()>();
        if $z0 == 0 goto label3;

        r4 = virtualinvoke r4.<java.lang.Class: java.lang.Class getComponentType()>();
        i1 = i1 + 1;
        goto label2;

     label3:
        $r7 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label4:
        $i3 = i1;
        i1 = i1 + -1;
        if $i3 <= 0 goto label5;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");
        goto label4;

     label5:
        i0 = i0 + 1;
        goto label0;

     label6:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);
        $r11 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r11;
    }

    private static int getWordsPerType(java.lang.Class)
    {
        java.lang.Class r0, $r1, $r2;

        r0 := @parameter0: java.lang.Class;
        $r1 = <java.lang.Long: java.lang.Class TYPE>;
        if r0 == $r1 goto label0;

        $r2 = <java.lang.Double: java.lang.Class TYPE>;
        if r0 != $r2 goto label1;

     label0:
        return 2;

     label1:
        return 1;
    }

    private static void collectCompatibleTypes(java.lang.Class[], java.lang.Class[], java.util.List)
    {
        java.lang.Class[] r0, r1;
        java.util.List r2;
        int i0, i1, $i2, $i3;
        java.lang.Class $r3, $r4, $r5, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class[];
        r1 := @parameter1: java.lang.Class[];
        r2 := @parameter2: java.util.List;
        i0 = 0;

     label0:
        $i2 = lengthof r0;
        if i0 >= $i2 goto label4;

        $r3 = r0[i0];
        $z0 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r3);
        if $z0 != 0 goto label3;

        i1 = 0;

     label1:
        $i3 = lengthof r1;
        if i1 >= $i3 goto label3;

        $r4 = r1[i1];
        $r5 = r0[i0];
        $z1 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);
        if $z1 == 0 goto label2;

        $r6 = r0[i0];
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r6);
        goto label3;

     label2:
        i1 = i1 + 1;
        goto label1;

     label3:
        i0 = i0 + 1;
        goto label0;

     label4:
        return;
    }

    private static java.util.List computeUniqueCatchList(java.lang.Class[])
    {
        java.lang.Class[] r0;
        java.util.ArrayList $r1, r2;
        int i0, i1, $i2, $i3;
        java.lang.Class r3, r4, $r5;
        boolean $z2, $z3, $z4, $z5;
        java.lang.Object $r6;

        r0 := @parameter0: java.lang.Class[];
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>()>();
        r2 = $r1;
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(class "java/lang/Error");
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(class "java/lang/RuntimeException");
        i0 = 0;

     label0:
        $i2 = lengthof r0;
        if i0 >= $i2 goto label9;

        r3 = r0[i0];
        $z2 = virtualinvoke r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "java/lang/Throwable");
        if $z2 == 0 goto label1;

        interfaceinvoke r2.<java.util.List: void clear()>();
        goto label9;

     label1:
        $r5 = class "java/lang/Throwable";
        $z3 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);
        if $z3 != 0 goto label2;

        goto label8;

     label2:
        i1 = 0;

     label3:
        $i3 = interfaceinvoke r2.<java.util.List: int size()>();
        if i1 >= $i3 goto label7;

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);
        r4 = (java.lang.Class) $r6;
        $z4 = virtualinvoke r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);
        if $z4 == 0 goto label4;

        goto label8;

     label4:
        $z5 = virtualinvoke r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);
        if $z5 == 0 goto label5;

        interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>(i1);
        goto label6;

     label5:
        i1 = i1 + 1;

     label6:
        goto label3;

     label7:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r3);

     label8:
        i0 = i0 + 1;
        goto label0;

     label9:
        return r2;
    }

    static java.lang.String access$000(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <sun.misc.ProxyGenerator: java.lang.String dotToSlash(java.lang.String)>(r0);
        return $r1;
    }

    static sun.misc.ProxyGenerator$ConstantPool access$400(sun.misc.ProxyGenerator)
    {
        sun.misc.ProxyGenerator r0;
        sun.misc.ProxyGenerator$ConstantPool $r1;

        r0 := @parameter0: sun.misc.ProxyGenerator;
        $r1 = r0.<sun.misc.ProxyGenerator: sun.misc.ProxyGenerator$ConstantPool cp>;
        return $r1;
    }

    static int access$508(sun.misc.ProxyGenerator)
    {
        sun.misc.ProxyGenerator r0;
        int $i0, $i1;

        r0 := @parameter0: sun.misc.ProxyGenerator;
        $i0 = r0.<sun.misc.ProxyGenerator: int proxyMethodCount>;
        $i1 = $i0 + 1;
        r0.<sun.misc.ProxyGenerator: int proxyMethodCount> = $i1;
        return $i0;
    }

    static java.lang.String access$600(java.lang.Class[], java.lang.Class)
    {
        java.lang.Class[] r0;
        java.lang.Class r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.Class[];
        r1 := @parameter1: java.lang.Class;
        $r2 = staticinvoke <sun.misc.ProxyGenerator: java.lang.String getMethodDescriptor(java.lang.Class[],java.lang.Class)>(r0, r1);
        return $r2;
    }

    static int access$700(java.lang.Class)
    {
        java.lang.Class r0;
        int $i0;

        r0 := @parameter0: java.lang.Class;
        $i0 = staticinvoke <sun.misc.ProxyGenerator: int getWordsPerType(java.lang.Class)>(r0);
        return $i0;
    }

    static void access$800(sun.misc.ProxyGenerator, int, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        int i0;
        java.io.DataOutputStream r1;

        r0 := @parameter0: sun.misc.ProxyGenerator;
        i0 := @parameter1: int;
        r1 := @parameter2: java.io.DataOutputStream;
        specialinvoke r0.<sun.misc.ProxyGenerator: void code_aload(int,java.io.DataOutputStream)>(i0, r1);
        return;
    }

    static java.lang.String access$900(sun.misc.ProxyGenerator)
    {
        sun.misc.ProxyGenerator r0;
        java.lang.String $r1;

        r0 := @parameter0: sun.misc.ProxyGenerator;
        $r1 = r0.<sun.misc.ProxyGenerator: java.lang.String className>;
        return $r1;
    }

    static void access$1000(sun.misc.ProxyGenerator, int, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        int i0;
        java.io.DataOutputStream r1;

        r0 := @parameter0: sun.misc.ProxyGenerator;
        i0 := @parameter1: int;
        r1 := @parameter2: java.io.DataOutputStream;
        specialinvoke r0.<sun.misc.ProxyGenerator: void code_ipush(int,java.io.DataOutputStream)>(i0, r1);
        return;
    }

    static java.util.List access$1100(java.lang.Class[])
    {
        java.lang.Class[] r0;
        java.util.List $r1;

        r0 := @parameter0: java.lang.Class[];
        $r1 = staticinvoke <sun.misc.ProxyGenerator: java.util.List computeUniqueCatchList(java.lang.Class[])>(r0);
        return $r1;
    }

    static void access$1200(sun.misc.ProxyGenerator, int, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        int i0;
        java.io.DataOutputStream r1;

        r0 := @parameter0: sun.misc.ProxyGenerator;
        i0 := @parameter1: int;
        r1 := @parameter2: java.io.DataOutputStream;
        specialinvoke r0.<sun.misc.ProxyGenerator: void code_astore(int,java.io.DataOutputStream)>(i0, r1);
        return;
    }

    static void access$1300(sun.misc.ProxyGenerator, int, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        int i0;
        java.io.DataOutputStream r1;

        r0 := @parameter0: sun.misc.ProxyGenerator;
        i0 := @parameter1: int;
        r1 := @parameter2: java.io.DataOutputStream;
        specialinvoke r0.<sun.misc.ProxyGenerator: void code_iload(int,java.io.DataOutputStream)>(i0, r1);
        return;
    }

    static void access$1400(sun.misc.ProxyGenerator, int, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        int i0;
        java.io.DataOutputStream r1;

        r0 := @parameter0: sun.misc.ProxyGenerator;
        i0 := @parameter1: int;
        r1 := @parameter2: java.io.DataOutputStream;
        specialinvoke r0.<sun.misc.ProxyGenerator: void code_lload(int,java.io.DataOutputStream)>(i0, r1);
        return;
    }

    static void access$1500(sun.misc.ProxyGenerator, int, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        int i0;
        java.io.DataOutputStream r1;

        r0 := @parameter0: sun.misc.ProxyGenerator;
        i0 := @parameter1: int;
        r1 := @parameter2: java.io.DataOutputStream;
        specialinvoke r0.<sun.misc.ProxyGenerator: void code_fload(int,java.io.DataOutputStream)>(i0, r1);
        return;
    }

    static void access$1600(sun.misc.ProxyGenerator, int, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        int i0;
        java.io.DataOutputStream r1;

        r0 := @parameter0: sun.misc.ProxyGenerator;
        i0 := @parameter1: int;
        r1 := @parameter2: java.io.DataOutputStream;
        specialinvoke r0.<sun.misc.ProxyGenerator: void code_dload(int,java.io.DataOutputStream)>(i0, r1);
        return;
    }

    static void access$1700(sun.misc.ProxyGenerator, java.lang.Class, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        java.lang.Class r1;
        java.io.DataOutputStream r2;

        r0 := @parameter0: sun.misc.ProxyGenerator;
        r1 := @parameter1: java.lang.Class;
        r2 := @parameter2: java.io.DataOutputStream;
        specialinvoke r0.<sun.misc.ProxyGenerator: void codeClassForName(java.lang.Class,java.io.DataOutputStream)>(r1, r2);
        return;
    }

    static void access$1800(sun.misc.ProxyGenerator, int, java.io.DataOutputStream) throws java.io.IOException
    {
        sun.misc.ProxyGenerator r0;
        int i0;
        java.io.DataOutputStream r1;

        r0 := @parameter0: sun.misc.ProxyGenerator;
        i0 := @parameter1: int;
        r1 := @parameter2: java.io.DataOutputStream;
        specialinvoke r0.<sun.misc.ProxyGenerator: void code_ldc(int,java.io.DataOutputStream)>(i0, r1);
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r5, $r8, $r11;
        java.lang.NoSuchMethodException r1, $r14;
        boolean $z0, $z1, $z2;
        sun.security.action.GetBooleanAction $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        java.lang.Class[] $r6, $r9, $r12;
        java.lang.reflect.Method $r7, $r10, $r13;
        java.lang.NoSuchMethodError $r15;
        java.lang.String $r16;

        $r0 = class "sun/misc/ProxyGenerator";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.misc.ProxyGenerator: boolean $assertionsDisabled> = $z1;
        $r2 = new sun.security.action.GetBooleanAction;
        specialinvoke $r2.<sun.security.action.GetBooleanAction: void <init>(java.lang.String)>("sun.misc.ProxyGenerator.saveGeneratedFiles");
        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);
        $r4 = (java.lang.Boolean) $r3;
        $z2 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();
        <sun.misc.ProxyGenerator: boolean saveGeneratedFiles> = $z2;

     label2:
        $r5 = class "java/lang/Object";
        $r6 = newarray (java.lang.Class)[0];
        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("hashCode", $r6);
        <sun.misc.ProxyGenerator: java.lang.reflect.Method hashCodeMethod> = $r7;
        $r8 = class "java/lang/Object";
        $r9 = newarray (java.lang.Class)[1];
        $r9[0] = class "java/lang/Object";
        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("equals", $r9);
        <sun.misc.ProxyGenerator: java.lang.reflect.Method equalsMethod> = $r10;
        $r11 = class "java/lang/Object";
        $r12 = newarray (java.lang.Class)[0];
        $r13 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("toString", $r12);
        <sun.misc.ProxyGenerator: java.lang.reflect.Method toStringMethod> = $r13;

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;
        r1 = $r14;
        $r15 = new java.lang.NoSuchMethodError;
        $r16 = virtualinvoke r1.<java.lang.NoSuchMethodException: java.lang.String getMessage()>();
        specialinvoke $r15.<java.lang.NoSuchMethodError: void <init>(java.lang.String)>($r16);
        throw $r15;

     label5:
        return;

        catch java.lang.NoSuchMethodException from label2 to label3 with label4;
    }
}
