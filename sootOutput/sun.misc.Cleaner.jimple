public class sun.misc.Cleaner extends java.lang.ref.PhantomReference
{
    private static final java.lang.ref.ReferenceQueue dummyQueue;
    private static sun.misc.Cleaner first;
    private sun.misc.Cleaner next;
    private sun.misc.Cleaner prev;
    private final java.lang.Runnable thunk;

    private static synchronized sun.misc.Cleaner add(sun.misc.Cleaner)
    {
        sun.misc.Cleaner r0, $r1, $r2, $r3;

        r0 := @parameter0: sun.misc.Cleaner;
        $r1 = <sun.misc.Cleaner: sun.misc.Cleaner first>;
        if $r1 == null goto label0;

        $r2 = <sun.misc.Cleaner: sun.misc.Cleaner first>;
        r0.<sun.misc.Cleaner: sun.misc.Cleaner next> = $r2;
        $r3 = <sun.misc.Cleaner: sun.misc.Cleaner first>;
        $r3.<sun.misc.Cleaner: sun.misc.Cleaner prev> = r0;

     label0:
        <sun.misc.Cleaner: sun.misc.Cleaner first> = r0;
        return r0;
    }

    private static synchronized boolean remove(sun.misc.Cleaner)
    {
        sun.misc.Cleaner r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @parameter0: sun.misc.Cleaner;
        $r1 = r0.<sun.misc.Cleaner: sun.misc.Cleaner next>;
        if $r1 != r0 goto label0;

        return 0;

     label0:
        $r2 = <sun.misc.Cleaner: sun.misc.Cleaner first>;
        if $r2 != r0 goto label2;

        $r3 = r0.<sun.misc.Cleaner: sun.misc.Cleaner next>;
        if $r3 == null goto label1;

        $r4 = r0.<sun.misc.Cleaner: sun.misc.Cleaner next>;
        <sun.misc.Cleaner: sun.misc.Cleaner first> = $r4;
        goto label2;

     label1:
        $r5 = r0.<sun.misc.Cleaner: sun.misc.Cleaner prev>;
        <sun.misc.Cleaner: sun.misc.Cleaner first> = $r5;

     label2:
        $r6 = r0.<sun.misc.Cleaner: sun.misc.Cleaner next>;
        if $r6 == null goto label3;

        $r7 = r0.<sun.misc.Cleaner: sun.misc.Cleaner next>;
        $r8 = r0.<sun.misc.Cleaner: sun.misc.Cleaner prev>;
        $r7.<sun.misc.Cleaner: sun.misc.Cleaner prev> = $r8;

     label3:
        $r9 = r0.<sun.misc.Cleaner: sun.misc.Cleaner prev>;
        if $r9 == null goto label4;

        $r10 = r0.<sun.misc.Cleaner: sun.misc.Cleaner prev>;
        $r11 = r0.<sun.misc.Cleaner: sun.misc.Cleaner next>;
        $r10.<sun.misc.Cleaner: sun.misc.Cleaner next> = $r11;

     label4:
        r0.<sun.misc.Cleaner: sun.misc.Cleaner next> = r0;
        r0.<sun.misc.Cleaner: sun.misc.Cleaner prev> = r0;
        return 1;
    }

    private void <init>(java.lang.Object, java.lang.Runnable)
    {
        sun.misc.Cleaner r0;
        java.lang.Object r1;
        java.lang.Runnable r2;
        java.lang.ref.ReferenceQueue $r3;

        r0 := @this: sun.misc.Cleaner;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Runnable;
        $r3 = <sun.misc.Cleaner: java.lang.ref.ReferenceQueue dummyQueue>;
        specialinvoke r0.<java.lang.ref.PhantomReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r1, $r3);
        r0.<sun.misc.Cleaner: sun.misc.Cleaner next> = null;
        r0.<sun.misc.Cleaner: sun.misc.Cleaner prev> = null;
        r0.<sun.misc.Cleaner: java.lang.Runnable thunk> = r2;
        return;
    }

    public static sun.misc.Cleaner create(java.lang.Object, java.lang.Runnable)
    {
        java.lang.Object r0;
        java.lang.Runnable r1;
        sun.misc.Cleaner $r2, $r3;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Runnable;
        if r1 != null goto label0;

        return null;

     label0:
        $r2 = new sun.misc.Cleaner;
        specialinvoke $r2.<sun.misc.Cleaner: void <init>(java.lang.Object,java.lang.Runnable)>(r0, r1);
        $r3 = staticinvoke <sun.misc.Cleaner: sun.misc.Cleaner add(sun.misc.Cleaner)>($r2);
        return $r3;
    }

    public void clean()
    {
        sun.misc.Cleaner r0;
        java.lang.Throwable r1, $r3;
        boolean $z0;
        java.lang.Runnable $r2;
        sun.misc.Cleaner$1 $r4;

        r0 := @this: sun.misc.Cleaner;
        $z0 = staticinvoke <sun.misc.Cleaner: boolean remove(sun.misc.Cleaner)>(r0);
        if $z0 != 0 goto label0;

        return;

     label0:
        $r2 = r0.<sun.misc.Cleaner: java.lang.Runnable thunk>;
        interfaceinvoke $r2.<java.lang.Runnable: void run()>();

     label1:
        goto label3;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        $r4 = new sun.misc.Cleaner$1;
        specialinvoke $r4.<sun.misc.Cleaner$1: void <init>(sun.misc.Cleaner,java.lang.Throwable)>(r0, r1);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r4);

     label3:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.ref.ReferenceQueue $r0;

        $r0 = new java.lang.ref.ReferenceQueue;
        specialinvoke $r0.<java.lang.ref.ReferenceQueue: void <init>()>();
        <sun.misc.Cleaner: java.lang.ref.ReferenceQueue dummyQueue> = $r0;
        <sun.misc.Cleaner: sun.misc.Cleaner first> = null;
        return;
    }
}
