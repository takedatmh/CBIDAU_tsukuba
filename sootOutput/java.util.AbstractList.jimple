public abstract class java.util.AbstractList extends java.util.AbstractCollection implements java.util.List
{
    protected transient int modCount;

    protected void <init>()
    {
        java.util.AbstractList r0;

        r0 := @this: java.util.AbstractList;
        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();
        r0.<java.util.AbstractList: int modCount> = 0;
        return;
    }

    public boolean add(java.lang.Object)
    {
        java.util.AbstractList r0;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.util.AbstractList;
        r1 := @parameter0: java.lang.Object;
        $i0 = virtualinvoke r0.<java.util.AbstractList: int size()>();
        virtualinvoke r0.<java.util.AbstractList: void add(int,java.lang.Object)>($i0, r1);
        return 1;
    }

    public abstract java.lang.Object get(int);

    public java.lang.Object set(int, java.lang.Object)
    {
        java.util.AbstractList r0;
        int i0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.util.AbstractList;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        $r2 = new java.lang.UnsupportedOperationException;
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r2;
    }

    public void add(int, java.lang.Object)
    {
        java.util.AbstractList r0;
        int i0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.util.AbstractList;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        $r2 = new java.lang.UnsupportedOperationException;
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r2;
    }

    public java.lang.Object remove(int)
    {
        java.util.AbstractList r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.util.AbstractList;
        i0 := @parameter0: int;
        $r1 = new java.lang.UnsupportedOperationException;
        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r1;
    }

    public int indexOf(java.lang.Object)
    {
        java.util.AbstractList r0;
        java.lang.Object r1, $r3, $r4;
        java.util.ListIterator r2;
        boolean $z0, $z1, $z2;
        int $i0, $i1;

        r0 := @this: java.util.AbstractList;
        r1 := @parameter0: java.lang.Object;
        r2 = virtualinvoke r0.<java.util.AbstractList: java.util.ListIterator listIterator()>();
        if r1 != null goto label1;

     label0:
        $z0 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();
        if $r3 != null goto label0;

        $i0 = interfaceinvoke r2.<java.util.ListIterator: int previousIndex()>();
        return $i0;

     label1:
        $z1 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();
        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();
        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);
        if $z2 == 0 goto label1;

        $i1 = interfaceinvoke r2.<java.util.ListIterator: int previousIndex()>();
        return $i1;

     label2:
        return -1;
    }

    public int lastIndexOf(java.lang.Object)
    {
        java.util.AbstractList r0;
        java.lang.Object r1, $r3, $r4;
        java.util.ListIterator r2;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.AbstractList;
        r1 := @parameter0: java.lang.Object;
        $i0 = virtualinvoke r0.<java.util.AbstractList: int size()>();
        r2 = virtualinvoke r0.<java.util.AbstractList: java.util.ListIterator listIterator(int)>($i0);
        if r1 != null goto label1;

     label0:
        $z0 = interfaceinvoke r2.<java.util.ListIterator: boolean hasPrevious()>();
        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object previous()>();
        if $r3 != null goto label0;

        $i1 = interfaceinvoke r2.<java.util.ListIterator: int nextIndex()>();
        return $i1;

     label1:
        $z1 = interfaceinvoke r2.<java.util.ListIterator: boolean hasPrevious()>();
        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object previous()>();
        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);
        if $z2 == 0 goto label1;

        $i2 = interfaceinvoke r2.<java.util.ListIterator: int nextIndex()>();
        return $i2;

     label2:
        return -1;
    }

    public void clear()
    {
        java.util.AbstractList r0;
        int $i0;

        r0 := @this: java.util.AbstractList;
        $i0 = virtualinvoke r0.<java.util.AbstractList: int size()>();
        virtualinvoke r0.<java.util.AbstractList: void removeRange(int,int)>(0, $i0);
        return;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.util.AbstractList r0;
        int i0, $i1;
        java.util.Collection r1;
        boolean z0, $z1;
        java.util.Iterator r2;
        java.lang.Object r3;

        r0 := @this: java.util.AbstractList;
        i0 := @parameter0: int;
        r1 := @parameter1: java.util.Collection;
        specialinvoke r0.<java.util.AbstractList: void rangeCheckForAdd(int)>(i0);
        z0 = 0;
        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label0:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label1;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $i1 = i0;
        i0 = i0 + 1;
        virtualinvoke r0.<java.util.AbstractList: void add(int,java.lang.Object)>($i1, r3);
        z0 = 1;
        goto label0;

     label1:
        return z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.AbstractList r0;
        java.util.AbstractList$Itr $r1;

        r0 := @this: java.util.AbstractList;
        $r1 = new java.util.AbstractList$Itr;
        specialinvoke $r1.<java.util.AbstractList$Itr: void <init>(java.util.AbstractList,java.util.AbstractList$1)>(r0, null);
        return $r1;
    }

    public java.util.ListIterator listIterator()
    {
        java.util.AbstractList r0;
        java.util.ListIterator $r1;

        r0 := @this: java.util.AbstractList;
        $r1 = virtualinvoke r0.<java.util.AbstractList: java.util.ListIterator listIterator(int)>(0);
        return $r1;
    }

    public java.util.ListIterator listIterator(int)
    {
        java.util.AbstractList r0;
        int i0;
        java.util.AbstractList$ListItr $r1;

        r0 := @this: java.util.AbstractList;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.AbstractList: void rangeCheckForAdd(int)>(i0);
        $r1 = new java.util.AbstractList$ListItr;
        specialinvoke $r1.<java.util.AbstractList$ListItr: void <init>(java.util.AbstractList,int)>(r0, i0);
        return $r1;
    }

    public java.util.List subList(int, int)
    {
        java.util.AbstractList r0;
        int i0, i1;
        boolean $z0;
        java.util.SubList $r1, r3;
        java.util.RandomAccessSubList r2;

        r0 := @this: java.util.AbstractList;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $z0 = r0 instanceof java.util.RandomAccess;
        if $z0 == 0 goto label0;

        r2 = new java.util.RandomAccessSubList;
        $r1 = r2;
        specialinvoke r2.<java.util.RandomAccessSubList: void <init>(java.util.AbstractList,int,int)>(r0, i0, i1);
        goto label1;

     label0:
        r3 = new java.util.SubList;
        $r1 = r3;
        specialinvoke r3.<java.util.SubList: void <init>(java.util.AbstractList,int,int)>(r0, i0, i1);

     label1:
        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.AbstractList r0;
        java.lang.Object r1, r4, r5;
        java.util.ListIterator r2, r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.List $r6;

        r0 := @this: java.util.AbstractList;
        r1 := @parameter0: java.lang.Object;
        if r1 != r0 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof java.util.List;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = virtualinvoke r0.<java.util.AbstractList: java.util.ListIterator listIterator()>();
        $r6 = (java.util.List) r1;
        r3 = interfaceinvoke $r6.<java.util.List: java.util.ListIterator listIterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();
        if $z1 == 0 goto label6;

        $z2 = interfaceinvoke r3.<java.util.ListIterator: boolean hasNext()>();
        if $z2 == 0 goto label6;

        r4 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();
        r5 = interfaceinvoke r3.<java.util.ListIterator: java.lang.Object next()>();
        if r4 != null goto label3;

        if r5 != null goto label4;

        goto label5;

     label3:
        $z3 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(r5);
        if $z3 != 0 goto label5;

     label4:
        return 0;

     label5:
        goto label2;

     label6:
        $z4 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();
        if $z4 != 0 goto label7;

        $z5 = interfaceinvoke r3.<java.util.ListIterator: boolean hasNext()>();
        if $z5 != 0 goto label7;

        $z6 = 1;
        goto label8;

     label7:
        $z6 = 0;

     label8:
        return $z6;
    }

    public int hashCode()
    {
        java.util.AbstractList r0;
        int i0, $i1, $i2;
        java.util.Iterator r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: java.util.AbstractList;
        i0 = 1;
        r1 = virtualinvoke r0.<java.util.AbstractList: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        $i1 = 31 * i0;
        if r2 != null goto label1;

        $i2 = 0;
        goto label2;

     label1:
        $i2 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

     label2:
        i0 = $i1 + $i2;
        goto label0;

     label3:
        return i0;
    }

    protected void removeRange(int, int)
    {
        java.util.AbstractList r0;
        int i0, i1, i2, i3;
        java.util.ListIterator r1;

        r0 := @this: java.util.AbstractList;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 = virtualinvoke r0.<java.util.AbstractList: java.util.ListIterator listIterator(int)>(i0);
        i2 = 0;
        i3 = i1 - i0;

     label0:
        if i2 >= i3 goto label1;

        interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();
        interfaceinvoke r1.<java.util.ListIterator: void remove()>();
        i2 = i2 + 1;
        goto label0;

     label1:
        return;
    }

    private void rangeCheckForAdd(int)
    {
        java.util.AbstractList r0;
        int i0, $i1;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.String $r2;

        r0 := @this: java.util.AbstractList;
        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        $i1 = virtualinvoke r0.<java.util.AbstractList: int size()>();
        if i0 <= $i1 goto label1;

     label0:
        $r1 = new java.lang.IndexOutOfBoundsException;
        $r2 = specialinvoke r0.<java.util.AbstractList: java.lang.String outOfBoundsMsg(int)>(i0);
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r2);
        throw $r1;

     label1:
        return;
    }

    private java.lang.String outOfBoundsMsg(int)
    {
        java.util.AbstractList r0;
        int i0, $i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: java.util.AbstractList;
        i0 := @parameter0: int;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Size: ");
        $i1 = virtualinvoke r0.<java.util.AbstractList: int size()>();
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r6;
    }
}
