public class java.util.concurrent.ConcurrentHashMap extends java.util.AbstractMap implements java.util.concurrent.ConcurrentMap, java.io.Serializable
{
    private static final long serialVersionUID;
    static final int DEFAULT_INITIAL_CAPACITY;
    static final float DEFAULT_LOAD_FACTOR;
    static final int DEFAULT_CONCURRENCY_LEVEL;
    static final int MAXIMUM_CAPACITY;
    static final int MIN_SEGMENT_TABLE_CAPACITY;
    static final int MAX_SEGMENTS;
    static final int RETRIES_BEFORE_LOCK;
    private final transient int hashSeed;
    final int segmentMask;
    final int segmentShift;
    final java.util.concurrent.ConcurrentHashMap$Segment[] segments;
    transient java.util.Set keySet;
    transient java.util.Set entrySet;
    transient java.util.Collection values;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long SBASE;
    private static final int SSHIFT;
    private static final long TBASE;
    private static final int TSHIFT;
    private static final long HASHSEED_OFFSET;
    private static final long SEGSHIFT_OFFSET;
    private static final long SEGMASK_OFFSET;
    private static final long SEGMENTS_OFFSET;

    private static int randomHashSeed(java.util.concurrent.ConcurrentHashMap)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        boolean $z0, $z1;
        int $i0;

        r0 := @parameter0: java.util.concurrent.ConcurrentHashMap;
        $z0 = staticinvoke <sun.misc.VM: boolean isBooted()>();
        if $z0 == 0 goto label0;

        $z1 = <java.util.concurrent.ConcurrentHashMap$Holder: boolean ALTERNATIVE_HASHING>;
        if $z1 == 0 goto label0;

        $i0 = staticinvoke <sun.misc.Hashing: int randomHashSeed(java.lang.Object)>(r0);
        return $i0;

     label0:
        return 0;
    }

    static final java.util.concurrent.ConcurrentHashMap$HashEntry entryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[], int)
    {
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r0;
        int i0, $i1;
        java.util.concurrent.ConcurrentHashMap$HashEntry $r1;
        sun.misc.Unsafe $r2;
        long $l2, $l3, $l4, $l5;
        java.lang.Object $r3;

        r0 := @parameter0: java.util.concurrent.ConcurrentHashMap$HashEntry[];
        i0 := @parameter1: int;
        if r0 != null goto label0;

        $r1 = null;
        goto label1;

     label0:
        $r2 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $l2 = (long) i0;
        $i1 = <java.util.concurrent.ConcurrentHashMap: int TSHIFT>;
        $l3 = $l2 << $i1;
        $l4 = <java.util.concurrent.ConcurrentHashMap: long TBASE>;
        $l5 = $l3 + $l4;
        $r3 = virtualinvoke $r2.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r0, $l5);
        $r1 = (java.util.concurrent.ConcurrentHashMap$HashEntry) $r3;

     label1:
        return $r1;
    }

    static final void setEntryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[], int, java.util.concurrent.ConcurrentHashMap$HashEntry)
    {
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r0;
        int i0, $i1;
        java.util.concurrent.ConcurrentHashMap$HashEntry r1;
        sun.misc.Unsafe $r2;
        long $l2, $l3, $l4, $l5;

        r0 := @parameter0: java.util.concurrent.ConcurrentHashMap$HashEntry[];
        i0 := @parameter1: int;
        r1 := @parameter2: java.util.concurrent.ConcurrentHashMap$HashEntry;
        $r2 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $l2 = (long) i0;
        $i1 = <java.util.concurrent.ConcurrentHashMap: int TSHIFT>;
        $l3 = $l2 << $i1;
        $l4 = <java.util.concurrent.ConcurrentHashMap: long TBASE>;
        $l5 = $l3 + $l4;
        virtualinvoke $r2.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r0, $l5, r1);
        return;
    }

    private int hash(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1;
        int i0, $i1, $i2, i3, $i4, $i5, i6, $i7, i8, $i9, i10, $i11, i12, $i13, $i14, $i15, i16, $i17, $i18;
        boolean $z0;
        java.lang.String $r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 := @parameter0: java.lang.Object;
        i0 = r0.<java.util.concurrent.ConcurrentHashMap: int hashSeed>;
        if 0 == i0 goto label0;

        $z0 = r1 instanceof java.lang.String;
        if $z0 == 0 goto label0;

        $r2 = (java.lang.String) r1;
        $i1 = staticinvoke <sun.misc.Hashing: int stringHash32(java.lang.String)>($r2);
        return $i1;

     label0:
        $i2 = virtualinvoke r1.<java.lang.Object: int hashCode()>();
        i3 = i0 ^ $i2;
        $i4 = i3 << 15;
        $i5 = $i4 ^ -12931;
        i6 = i3 + $i5;
        $i7 = i6 >>> 10;
        i8 = i6 ^ $i7;
        $i9 = i8 << 3;
        i10 = i8 + $i9;
        $i11 = i10 >>> 6;
        i12 = i10 ^ $i11;
        $i13 = i12 << 2;
        $i14 = i12 << 14;
        $i15 = $i13 + $i14;
        i16 = i12 + $i15;
        $i17 = i16 >>> 16;
        $i18 = i16 ^ $i17;
        return $i18;
    }

    static final java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[], int)
    {
        java.util.concurrent.ConcurrentHashMap$Segment[] r0;
        int i0, $i1, $i4;
        long $l2, l3, $l5;
        java.util.concurrent.ConcurrentHashMap$Segment $r1;
        sun.misc.Unsafe $r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.util.concurrent.ConcurrentHashMap$Segment[];
        i0 := @parameter1: int;
        $i1 = <java.util.concurrent.ConcurrentHashMap: int SSHIFT>;
        $i4 = i0 << $i1;
        $l5 = (long) $i4;
        $l2 = <java.util.concurrent.ConcurrentHashMap: long SBASE>;
        l3 = $l5 + $l2;
        if r0 != null goto label0;

        $r1 = null;
        goto label1;

     label0:
        $r2 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $r3 = virtualinvoke $r2.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r0, l3);
        $r1 = (java.util.concurrent.ConcurrentHashMap$Segment) $r3;

     label1:
        return $r1;
    }

    private java.util.concurrent.ConcurrentHashMap$Segment ensureSegment(int)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        int i0, $i1, i4, i5, $i6;
        java.util.concurrent.ConcurrentHashMap$Segment[] r1;
        long $l2, l3, $l7;
        java.util.concurrent.ConcurrentHashMap$Segment r2, r3, r5, $r9, $r14, $r15, $r18;
        float f0, $f1, $f2;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r4, $r10, $r11;
        sun.misc.Unsafe $r7, $r12, $r16, $r19;
        java.lang.Object $r8, $r13, $r17;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        i0 := @parameter0: int;
        r1 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;
        $i1 = <java.util.concurrent.ConcurrentHashMap: int SSHIFT>;
        $i6 = i0 << $i1;
        $l7 = (long) $i6;
        $l2 = <java.util.concurrent.ConcurrentHashMap: long SBASE>;
        l3 = $l7 + $l2;
        $r7 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $r8 = virtualinvoke $r7.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r1, l3);
        $r9 = (java.util.concurrent.ConcurrentHashMap$Segment) $r8;
        r2 = $r9;
        if $r9 != null goto label1;

        r3 = r1[0];
        $r10 = r3.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;
        i4 = lengthof $r10;
        f0 = r3.<java.util.concurrent.ConcurrentHashMap$Segment: float loadFactor>;
        $f1 = (float) i4;
        $f2 = $f1 * f0;
        i5 = (int) $f2;
        $r11 = newarray (java.util.concurrent.ConcurrentHashMap$HashEntry)[i4];
        r4 = (java.util.concurrent.ConcurrentHashMap$HashEntry[]) $r11;
        $r12 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $r13 = virtualinvoke $r12.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r1, l3);
        $r14 = (java.util.concurrent.ConcurrentHashMap$Segment) $r13;
        r2 = $r14;
        if $r14 != null goto label1;

        $r15 = new java.util.concurrent.ConcurrentHashMap$Segment;
        specialinvoke $r15.<java.util.concurrent.ConcurrentHashMap$Segment: void <init>(float,int,java.util.concurrent.ConcurrentHashMap$HashEntry[])>(f0, i5, r4);
        r5 = $r15;

     label0:
        $r16 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $r17 = virtualinvoke $r16.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r1, l3);
        $r18 = (java.util.concurrent.ConcurrentHashMap$Segment) $r17;
        r2 = $r18;
        if $r18 != null goto label1;

        $r19 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        r2 = r5;
        $z0 = virtualinvoke $r19.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l3, null, r5);
        if $z0 == 0 goto label0;

        goto label1;

     label1:
        return r2;
    }

    private java.util.concurrent.ConcurrentHashMap$Segment segmentForHash(int)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        int i0, $i3, $i4, $i5, $i6, $i7, $i8;
        long $l1, l2, $l9;
        sun.misc.Unsafe $r1;
        java.util.concurrent.ConcurrentHashMap$Segment[] $r2;
        java.lang.Object $r3;
        java.util.concurrent.ConcurrentHashMap$Segment $r4;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        i0 := @parameter0: int;
        $i3 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentShift>;
        $i4 = i0 >>> $i3;
        $i5 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentMask>;
        $i6 = $i4 & $i5;
        $i7 = <java.util.concurrent.ConcurrentHashMap: int SSHIFT>;
        $i8 = $i6 << $i7;
        $l9 = (long) $i8;
        $l1 = <java.util.concurrent.ConcurrentHashMap: long SBASE>;
        l2 = $l9 + $l1;
        $r1 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $r2 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;
        $r3 = virtualinvoke $r1.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>($r2, l2);
        $r4 = (java.util.concurrent.ConcurrentHashMap$Segment) $r3;
        return $r4;
    }

    static final java.util.concurrent.ConcurrentHashMap$HashEntry entryForHash(java.util.concurrent.ConcurrentHashMap$Segment, int)
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        int i0, $i1, $i2, $i3, $i4;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r1, $r2;
        java.util.concurrent.ConcurrentHashMap$HashEntry $r3;
        sun.misc.Unsafe $r4;
        long $l5, $l6, $l7, $l8;
        java.lang.Object $r5;

        r0 := @parameter0: java.util.concurrent.ConcurrentHashMap$Segment;
        i0 := @parameter1: int;
        if r0 == null goto label0;

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;
        r1 = $r2;
        if $r2 != null goto label1;

     label0:
        $r3 = null;
        goto label2;

     label1:
        $r4 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $i2 = lengthof r1;
        $i3 = $i2 - 1;
        $i4 = $i3 & i0;
        $l5 = (long) $i4;
        $i1 = <java.util.concurrent.ConcurrentHashMap: int TSHIFT>;
        $l6 = $l5 << $i1;
        $l7 = <java.util.concurrent.ConcurrentHashMap: long TBASE>;
        $l8 = $l6 + $l7;
        $r5 = virtualinvoke $r4.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r1, $l8);
        $r3 = (java.util.concurrent.ConcurrentHashMap$HashEntry) $r5;

     label2:
        return $r3;
    }

    public void <init>(int, float, int)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i8, $i9, $i10, $i11;
        float f0, $f1, $f2;
        java.util.concurrent.ConcurrentHashMap$Segment r1, $r4;
        java.util.concurrent.ConcurrentHashMap$Segment[] r2, $r7;
        byte $b7;
        java.lang.IllegalArgumentException $r3;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] $r5, $r6;
        sun.misc.Unsafe $r8;
        long $l12;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        i1 := @parameter2: int;
        specialinvoke r0.<java.util.AbstractMap: void <init>()>();
        $i6 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int randomHashSeed(java.util.concurrent.ConcurrentHashMap)>(r0);
        r0.<java.util.concurrent.ConcurrentHashMap: int hashSeed> = $i6;
        $b7 = f0 cmpl 0.0F;
        if $b7 <= 0 goto label0;

        if i0 < 0 goto label0;

        if i1 > 0 goto label1;

     label0:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r3;

     label1:
        if i1 <= 65536 goto label2;

        i1 = 65536;

     label2:
        i2 = 0;
        i3 = 1;

     label3:
        if i3 >= i1 goto label4;

        i2 = i2 + 1;
        i3 = i3 << 1;
        goto label3;

     label4:
        $i8 = 32 - i2;
        r0.<java.util.concurrent.ConcurrentHashMap: int segmentShift> = $i8;
        $i9 = i3 - 1;
        r0.<java.util.concurrent.ConcurrentHashMap: int segmentMask> = $i9;
        if i0 <= 1073741824 goto label5;

        i0 = 1073741824;

     label5:
        i4 = i0 / i3;
        $i10 = i4 * i3;
        if $i10 >= i0 goto label6;

        i4 = i4 + 1;

     label6:
        i5 = 2;

     label7:
        if i5 >= i4 goto label8;

        i5 = i5 << 1;
        goto label7;

     label8:
        $r4 = new java.util.concurrent.ConcurrentHashMap$Segment;
        $f1 = (float) i5;
        $f2 = $f1 * f0;
        $i11 = (int) $f2;
        $r5 = newarray (java.util.concurrent.ConcurrentHashMap$HashEntry)[i5];
        $r6 = (java.util.concurrent.ConcurrentHashMap$HashEntry[]) $r5;
        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap$Segment: void <init>(float,int,java.util.concurrent.ConcurrentHashMap$HashEntry[])>(f0, $i11, $r6);
        r1 = $r4;
        $r7 = newarray (java.util.concurrent.ConcurrentHashMap$Segment)[i3];
        r2 = (java.util.concurrent.ConcurrentHashMap$Segment[]) $r7;
        $r8 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $l12 = <java.util.concurrent.ConcurrentHashMap: long SBASE>;
        virtualinvoke $r8.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r2, $l12, r1);
        r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments> = r2;
        return;
    }

    public void <init>(int, float)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        int i0;
        float f0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(i0, f0, 16);
        return;
    }

    public void <init>(int)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        int i0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(i0, 0.75F, 16);
        return;
    }

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap r0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(16, 0.75F, 16);
        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.Map r1;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 := @parameter0: java.util.Map;
        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();
        $f0 = (float) $i0;
        $f1 = $f0 / 0.75F;
        $i1 = (int) $f1;
        $i2 = $i1 + 1;
        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, 16);
        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>($i3, 0.75F, 16);
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>(r1);
        return;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        long l0, $l5, $l11;
        java.util.concurrent.ConcurrentHashMap$Segment[] r1;
        int i1, $i2, $i3, $i4, i7, $i8, $i9, $i10;
        java.util.concurrent.ConcurrentHashMap$Segment r2, r3;
        byte $b6, $b12;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        l0 = 0L;
        r1 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;
        i1 = 0;

     label0:
        $i2 = lengthof r1;
        if i1 >= $i2 goto label3;

        r2 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)>(r1, i1);
        if r2 == null goto label2;

        $i3 = r2.<java.util.concurrent.ConcurrentHashMap$Segment: int count>;
        if $i3 == 0 goto label1;

        return 0;

     label1:
        $i4 = r2.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;
        $l5 = (long) $i4;
        l0 = l0 + $l5;

     label2:
        i1 = i1 + 1;
        goto label0;

     label3:
        $b6 = l0 cmp 0L;
        if $b6 == 0 goto label8;

        i7 = 0;

     label4:
        $i8 = lengthof r1;
        if i7 >= $i8 goto label7;

        r3 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)>(r1, i7);
        if r3 == null goto label6;

        $i9 = r3.<java.util.concurrent.ConcurrentHashMap$Segment: int count>;
        if $i9 == 0 goto label5;

        return 0;

     label5:
        $i10 = r3.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;
        $l11 = (long) $i10;
        l0 = l0 - $l11;

     label6:
        i7 = i7 + 1;
        goto label4;

     label7:
        $b12 = l0 cmp 0L;
        if $b12 == 0 goto label8;

        return 0;

     label8:
        return 1;
    }

    public int size()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$Segment[] r1;
        long l0, l3, $l12;
        int i1, i2, i4, i5, i6, $i7, $i8, i9, $i10, $i11, $i13, i15, $i16, $i17, $i18;
        boolean z0;
        java.util.concurrent.ConcurrentHashMap$Segment r2, $r4, $r5, $r7;
        java.lang.Throwable r3, $r6;
        byte $b14;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;
        l0 = 0L;
        i1 = -1;

     label0:
        $i7 = i1;
        i1 = i1 + 1;
        if $i7 != 2 goto label2;

        i2 = 0;

     label1:
        $i8 = lengthof r1;
        if i2 >= $i8 goto label2;

        $r4 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment ensureSegment(int)>(i2);
        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap$Segment: void lock()>();
        i2 = i2 + 1;
        goto label1;

     label2:
        l3 = 0L;
        i4 = 0;
        z0 = 0;
        i9 = 0;

     label3:
        $i10 = lengthof r1;
        if i9 >= $i10 goto label6;

        r2 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)>(r1, i9);
        if r2 == null goto label5;

        $i11 = r2.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;
        $l12 = (long) $i11;
        l3 = l3 + $l12;
        i5 = r2.<java.util.concurrent.ConcurrentHashMap$Segment: int count>;
        if i5 < 0 goto label4;

        $i13 = i4 + i5;
        i4 = $i13;
        if $i13 >= 0 goto label5;

     label4:
        z0 = 1;

     label5:
        i9 = i9 + 1;
        goto label3;

     label6:
        $b14 = l3 cmp l0;
        if $b14 != 0 goto label7;

        goto label8;

     label7:
        l0 = l3;
        goto label0;

     label8:
        if i1 <= 2 goto label16;

        i15 = 0;

     label9:
        $i16 = lengthof r1;
        if i15 >= $i16 goto label10;

        $r5 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)>(r1, i15);
        virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();
        i15 = i15 + 1;
        goto label9;

     label10:
        goto label16;

     label11:
        $r6 := @caughtexception;

     label12:
        r3 = $r6;

     label13:
        if i1 <= 2 goto label15;

        i6 = 0;

     label14:
        $i17 = lengthof r1;
        if i6 >= $i17 goto label15;

        $r7 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)>(r1, i6);
        virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();
        i6 = i6 + 1;
        goto label14;

     label15:
        throw r3;

     label16:
        if z0 == 0 goto label17;

        $i18 = 2147483647;
        goto label18;

     label17:
        $i18 = i4;

     label18:
        return $i18;

        catch java.lang.Throwable from label0 to label8 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r5, $r8, $r12, $r13, $r14;
        int i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i18;
        long $l1, l2, $l10, $l14, $l15, $l16, $l17;
        java.util.concurrent.ConcurrentHashMap$Segment r2, $r9;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r3, $r10;
        java.util.concurrent.ConcurrentHashMap$HashEntry r4;
        sun.misc.Unsafe $r6, $r11;
        java.util.concurrent.ConcurrentHashMap$Segment[] $r7;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 := @parameter0: java.lang.Object;
        i0 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: int hash(java.lang.Object)>(r1);
        $i4 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentShift>;
        $i5 = i0 >>> $i4;
        $i6 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentMask>;
        $i7 = $i5 & $i6;
        $i8 = <java.util.concurrent.ConcurrentHashMap: int SSHIFT>;
        $i9 = $i7 << $i8;
        $l10 = (long) $i9;
        $l1 = <java.util.concurrent.ConcurrentHashMap: long SBASE>;
        l2 = $l10 + $l1;
        $r6 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $r7 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;
        $r8 = virtualinvoke $r6.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>($r7, l2);
        $r9 = (java.util.concurrent.ConcurrentHashMap$Segment) $r8;
        r2 = $r9;
        if $r9 == null goto label3;

        $r10 = r2.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;
        r3 = $r10;
        if $r10 == null goto label3;

        $r11 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $i11 = lengthof r3;
        $i12 = $i11 - 1;
        $i13 = $i12 & i0;
        $l14 = (long) $i13;
        $i3 = <java.util.concurrent.ConcurrentHashMap: int TSHIFT>;
        $l15 = $l14 << $i3;
        $l16 = <java.util.concurrent.ConcurrentHashMap: long TBASE>;
        $l17 = $l15 + $l16;
        $r12 = virtualinvoke $r11.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r3, $l17);
        r4 = (java.util.concurrent.ConcurrentHashMap$HashEntry) $r12;

     label0:
        if r4 == null goto label3;

        $r13 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;
        r5 = $r13;
        if $r13 == r1 goto label1;

        $i18 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;
        if $i18 != i0 goto label2;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);
        if $z0 == 0 goto label2;

     label1:
        $r14 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value>;
        return $r14;

     label2:
        r4 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;
        goto label0;

     label3:
        return null;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r5, $r8, $r12, $r13;
        int i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i18;
        long $l1, l2, $l10, $l14, $l15, $l16, $l17;
        java.util.concurrent.ConcurrentHashMap$Segment r2, $r9;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r3, $r10;
        java.util.concurrent.ConcurrentHashMap$HashEntry r4;
        sun.misc.Unsafe $r6, $r11;
        java.util.concurrent.ConcurrentHashMap$Segment[] $r7;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 := @parameter0: java.lang.Object;
        i0 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: int hash(java.lang.Object)>(r1);
        $i4 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentShift>;
        $i5 = i0 >>> $i4;
        $i6 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentMask>;
        $i7 = $i5 & $i6;
        $i8 = <java.util.concurrent.ConcurrentHashMap: int SSHIFT>;
        $i9 = $i7 << $i8;
        $l10 = (long) $i9;
        $l1 = <java.util.concurrent.ConcurrentHashMap: long SBASE>;
        l2 = $l10 + $l1;
        $r6 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $r7 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;
        $r8 = virtualinvoke $r6.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>($r7, l2);
        $r9 = (java.util.concurrent.ConcurrentHashMap$Segment) $r8;
        r2 = $r9;
        if $r9 == null goto label3;

        $r10 = r2.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;
        r3 = $r10;
        if $r10 == null goto label3;

        $r11 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $i11 = lengthof r3;
        $i12 = $i11 - 1;
        $i13 = $i12 & i0;
        $l14 = (long) $i13;
        $i3 = <java.util.concurrent.ConcurrentHashMap: int TSHIFT>;
        $l15 = $l14 << $i3;
        $l16 = <java.util.concurrent.ConcurrentHashMap: long TBASE>;
        $l17 = $l15 + $l16;
        $r12 = virtualinvoke $r11.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r3, $l17);
        r4 = (java.util.concurrent.ConcurrentHashMap$HashEntry) $r12;

     label0:
        if r4 == null goto label3;

        $r13 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;
        r5 = $r13;
        if $r13 == r1 goto label1;

        $i18 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;
        if $i18 != i0 goto label2;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);
        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        r4 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;
        goto label0;

     label3:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r6;
        java.util.concurrent.ConcurrentHashMap$Segment[] r2;
        boolean z0, $z1;
        long l0, l9, $l13;
        int i1, i2, i3, i4, i5, i6, $i7, $i8, $i10, $i11, $i12, i15, $i16, $i17;
        java.util.concurrent.ConcurrentHashMap$Segment r3, $r9, $r11, $r13;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r4, $r10;
        java.util.concurrent.ConcurrentHashMap$HashEntry r5;
        java.lang.Throwable r7, $r12;
        java.lang.NullPointerException $r8;
        byte $b14;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        $r8 = new java.lang.NullPointerException;
        specialinvoke $r8.<java.lang.NullPointerException: void <init>()>();
        throw $r8;

     label0:
        r2 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;
        z0 = 0;
        l0 = 0L;
        i1 = -1;

     label1:
        $i7 = i1;
        i1 = i1 + 1;
        if $i7 != 2 goto label3;

        i2 = 0;

     label2:
        $i8 = lengthof r2;
        if i2 >= $i8 goto label3;

        $r9 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment ensureSegment(int)>(i2);
        virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap$Segment: void lock()>();
        i2 = i2 + 1;
        goto label2;

     label3:
        l9 = 0L;
        i3 = 0;
        i4 = 0;

     label4:
        $i10 = lengthof r2;
        if i4 >= $i10 goto label11;

        r3 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)>(r2, i4);
        if r3 == null goto label10;

        $r10 = r3.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;
        r4 = $r10;
        if $r10 == null goto label10;

        i5 = 0;

     label5:
        $i11 = lengthof r4;
        if i5 >= $i11 goto label9;

        r5 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int)>(r4, i5);

     label6:
        if r5 == null goto label8;

        r6 = r5.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value>;
        if r6 == null goto label7;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r6);
        if $z1 == 0 goto label7;

        z0 = 1;
        goto label13;

     label7:
        r5 = r5.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;
        goto label6;

     label8:
        i5 = i5 + 1;
        goto label5;

     label9:
        $i12 = r3.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;
        i3 = i3 + $i12;

     label10:
        i4 = i4 + 1;
        goto label4;

     label11:
        if i1 <= 0 goto label12;

        $l13 = (long) i3;
        $b14 = $l13 cmp l0;
        if $b14 != 0 goto label12;

        goto label13;

     label12:
        l0 = (long) i3;
        goto label1;

     label13:
        if i1 <= 2 goto label21;

        i15 = 0;

     label14:
        $i16 = lengthof r2;
        if i15 >= $i16 goto label15;

        $r11 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)>(r2, i15);
        virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();
        i15 = i15 + 1;
        goto label14;

     label15:
        goto label21;

     label16:
        $r12 := @caughtexception;

     label17:
        r7 = $r12;

     label18:
        if i1 <= 2 goto label20;

        i6 = 0;

     label19:
        $i17 = lengthof r2;
        if i6 >= $i17 goto label20;

        $r13 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)>(r2, i6);
        virtualinvoke $r13.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();
        i6 = i6 + 1;
        goto label19;

     label20:
        throw r7;

     label21:
        return z0;

        catch java.lang.Throwable from label1 to label13 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 := @parameter0: java.lang.Object;
        $z0 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>(r1);
        return $z0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r2, $r7, $r9;
        int i0, i1, $i2, $i4, $i5, $i6, $i7;
        long $l3, $l8, $l9;
        java.util.concurrent.ConcurrentHashMap$Segment r3, $r8;
        java.lang.NullPointerException $r4;
        sun.misc.Unsafe $r5;
        java.util.concurrent.ConcurrentHashMap$Segment[] $r6;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        if r2 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label0:
        i0 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: int hash(java.lang.Object)>(r1);
        $i4 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentShift>;
        $i5 = i0 >>> $i4;
        $i6 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentMask>;
        i1 = $i5 & $i6;
        $r5 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $r6 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;
        $i2 = <java.util.concurrent.ConcurrentHashMap: int SSHIFT>;
        $i7 = i1 << $i2;
        $l8 = (long) $i7;
        $l3 = <java.util.concurrent.ConcurrentHashMap: long SBASE>;
        $l9 = $l8 + $l3;
        $r7 = virtualinvoke $r5.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>($r6, $l9);
        $r8 = (java.util.concurrent.ConcurrentHashMap$Segment) $r7;
        r3 = $r8;
        if $r8 != null goto label1;

        r3 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment ensureSegment(int)>(i1);

     label1:
        $r9 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>(r1, i0, r2, 0);
        return $r9;
    }

    public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r2, $r7, $r9;
        int i0, i1, $i2, $i4, $i5, $i6, $i7;
        long $l3, $l8, $l9;
        java.util.concurrent.ConcurrentHashMap$Segment r3, $r8;
        java.lang.NullPointerException $r4;
        sun.misc.Unsafe $r5;
        java.util.concurrent.ConcurrentHashMap$Segment[] $r6;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        if r2 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label0:
        i0 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: int hash(java.lang.Object)>(r1);
        $i4 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentShift>;
        $i5 = i0 >>> $i4;
        $i6 = r0.<java.util.concurrent.ConcurrentHashMap: int segmentMask>;
        i1 = $i5 & $i6;
        $r5 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $r6 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;
        $i2 = <java.util.concurrent.ConcurrentHashMap: int SSHIFT>;
        $i7 = i1 << $i2;
        $l8 = (long) $i7;
        $l3 = <java.util.concurrent.ConcurrentHashMap: long SBASE>;
        $l9 = $l8 + $l3;
        $r7 = virtualinvoke $r5.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>($r6, $l9);
        $r8 = (java.util.concurrent.ConcurrentHashMap$Segment) $r7;
        r3 = $r8;
        if $r8 != null goto label1;

        r3 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment ensureSegment(int)>(i1);

     label1:
        $r9 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>(r1, i0, r2, 1);
        return $r9;
    }

    public void putAll(java.util.Map)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 := @parameter0: java.util.Map;
        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();
        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.Map$Entry) $r5;
        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);
        goto label0;

     label1:
        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, $r3;
        int i0;
        java.util.concurrent.ConcurrentHashMap$Segment r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 := @parameter0: java.lang.Object;
        i0 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: int hash(java.lang.Object)>(r1);
        r2 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentForHash(int)>(i0);
        if r2 != null goto label0;

        $r3 = null;
        goto label1;

     label0:
        $r3 = virtualinvoke r2.<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object remove(java.lang.Object,int,java.lang.Object)>(r1, i0, null);

     label1:
        return $r3;
    }

    public boolean remove(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r2, $r5;
        int i0;
        java.util.concurrent.ConcurrentHashMap$Segment r3, $r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        i0 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: int hash(java.lang.Object)>(r1);
        if r2 == null goto label0;

        $r4 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentForHash(int)>(i0);
        r3 = $r4;
        if $r4 == null goto label0;

        $r5 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object remove(java.lang.Object,int,java.lang.Object)>(r1, i0, r2);
        if $r5 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r2, r3;
        int i0;
        java.util.concurrent.ConcurrentHashMap$Segment r4;
        java.lang.NullPointerException $r5;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        r3 := @parameter2: java.lang.Object;
        i0 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: int hash(java.lang.Object)>(r1);
        if r2 == null goto label0;

        if r3 != null goto label1;

     label0:
        $r5 = new java.lang.NullPointerException;
        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();
        throw $r5;

     label1:
        r4 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentForHash(int)>(i0);
        if r4 == null goto label2;

        $z0 = virtualinvoke r4.<java.util.concurrent.ConcurrentHashMap$Segment: boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)>(r1, i0, r2, r3);
        if $z0 == 0 goto label2;

        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public java.lang.Object replace(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r2, $r5;
        int i0;
        java.util.concurrent.ConcurrentHashMap$Segment r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        i0 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: int hash(java.lang.Object)>(r1);
        if r2 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label0:
        r3 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentForHash(int)>(i0);
        if r3 != null goto label1;

        $r5 = null;
        goto label2;

     label1:
        $r5 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object replace(java.lang.Object,int,java.lang.Object)>(r1, i0, r2);

     label2:
        return $r5;
    }

    public void clear()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$Segment[] r1;
        int i0, $i1;
        java.util.concurrent.ConcurrentHashMap$Segment r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;
        i0 = 0;

     label0:
        $i1 = lengthof r1;
        if i0 >= $i1 goto label2;

        r2 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)>(r1, i0);
        if r2 == null goto label1;

        virtualinvoke r2.<java.util.concurrent.ConcurrentHashMap$Segment: void clear()>();

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        return;
    }

    public java.util.Set keySet()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.Set r1, $r3;
        java.util.concurrent.ConcurrentHashMap$KeySet $r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet>;
        if r1 == null goto label0;

        $r3 = r1;
        goto label1;

     label0:
        $r2 = new java.util.concurrent.ConcurrentHashMap$KeySet;
        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap$KeySet: void <init>(java.util.concurrent.ConcurrentHashMap)>(r0);
        $r3 = $r2;
        r0.<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet> = $r2;

     label1:
        return $r3;
    }

    public java.util.Collection values()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.Collection r1, $r3;
        java.util.concurrent.ConcurrentHashMap$Values $r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values>;
        if r1 == null goto label0;

        $r3 = r1;
        goto label1;

     label0:
        $r2 = new java.util.concurrent.ConcurrentHashMap$Values;
        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap$Values: void <init>(java.util.concurrent.ConcurrentHashMap)>(r0);
        $r3 = $r2;
        r0.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values> = $r2;

     label1:
        return $r3;
    }

    public java.util.Set entrySet()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.Set r1, $r3;
        java.util.concurrent.ConcurrentHashMap$EntrySet $r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet>;
        if r1 == null goto label0;

        $r3 = r1;
        goto label1;

     label0:
        $r2 = new java.util.concurrent.ConcurrentHashMap$EntrySet;
        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap$EntrySet: void <init>(java.util.concurrent.ConcurrentHashMap)>(r0);
        $r3 = $r2;
        r0.<java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet> = $r2;

     label1:
        return $r3;
    }

    public java.util.Enumeration keys()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$KeyIterator $r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        $r1 = new java.util.concurrent.ConcurrentHashMap$KeyIterator;
        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap$KeyIterator: void <init>(java.util.concurrent.ConcurrentHashMap)>(r0);
        return $r1;
    }

    public java.util.Enumeration elements()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$ValueIterator $r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        $r1 = new java.util.concurrent.ConcurrentHashMap$ValueIterator;
        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap$ValueIterator: void <init>(java.util.concurrent.ConcurrentHashMap)>(r0);
        return $r1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.io.ObjectOutputStream r1;
        int i0, i1, i2, $i3, $i4, $i5;
        java.util.concurrent.ConcurrentHashMap$Segment r2;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r3;
        java.util.concurrent.ConcurrentHashMap$HashEntry r4;
        java.lang.Throwable r5, $r11;
        java.util.concurrent.ConcurrentHashMap$Segment[] $r6, r8;
        java.lang.Object $r9, $r10;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 := @parameter0: java.io.ObjectOutputStream;
        i0 = 0;

     label0:
        $r6 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;
        $i3 = lengthof $r6;
        if i0 >= $i3 goto label1;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment ensureSegment(int)>(i0);
        i0 = i0 + 1;
        goto label0;

     label1:
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        r8 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;
        i1 = 0;

     label2:
        $i4 = lengthof r8;
        if i1 >= $i4 goto label12;

        r2 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)>(r8, i1);
        virtualinvoke r2.<java.util.concurrent.ConcurrentHashMap$Segment: void lock()>();

     label3:
        r3 = r2.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;
        i2 = 0;

     label4:
        $i5 = lengthof r3;
        if i2 >= $i5 goto label7;

        r4 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int)>(r3, i2);

     label5:
        if r4 == null goto label6;

        $r9 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r9);
        $r10 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value>;
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r10);
        r4 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;
        goto label5;

     label6:
        i2 = i2 + 1;
        goto label4;

     label7:
        virtualinvoke r2.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();
        goto label11;

     label8:
        $r11 := @caughtexception;

     label9:
        r5 = $r11;

     label10:
        virtualinvoke r2.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();
        throw r5;

     label11:
        i1 = i1 + 1;
        goto label2;

     label12:
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);
        return;

        catch java.lang.Throwable from label3 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectInputStream$GetField r2;
        java.util.concurrent.ConcurrentHashMap$Segment[] r3, r4, $r7;
        int i0, i1, i2, i4, $i5, $i6, $i8, $i10, $i13, $i14, $i15;
        byte b3;
        java.util.concurrent.ConcurrentHashMap$Segment r5;
        java.lang.Object $r6, r19, r20;
        java.io.InvalidObjectException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;
        sun.misc.Unsafe $r13, $r14, $r15, $r16;
        long $l7, $l9, $l11, $l12;
        float $f0, $f1, $f2;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] $r17, $r18;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;
        r1 := @parameter0: java.io.ObjectInputStream;
        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();
        $r6 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("segments", null);
        $r7 = (java.util.concurrent.ConcurrentHashMap$Segment[]) $r6;
        r3 = (java.util.concurrent.ConcurrentHashMap$Segment[]) $r7;
        i0 = lengthof r3;
        if i0 < 1 goto label0;

        if i0 > 65536 goto label0;

        $i5 = i0 - 1;
        $i6 = i0 & $i5;
        if $i6 == 0 goto label1;

     label0:
        $r8 = new java.io.InvalidObjectException;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad number of segments:");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.io.InvalidObjectException: void <init>(java.lang.String)>($r12);
        throw $r8;

     label1:
        i1 = 0;
        i2 = i0;

     label2:
        if i2 <= 1 goto label3;

        i1 = i1 + 1;
        i2 = i2 >>> 1;
        goto label2;

     label3:
        $r13 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $l7 = <java.util.concurrent.ConcurrentHashMap: long SEGSHIFT_OFFSET>;
        $i8 = 32 - i1;
        virtualinvoke $r13.<sun.misc.Unsafe: void putIntVolatile(java.lang.Object,long,int)>(r0, $l7, $i8);
        $r14 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $l9 = <java.util.concurrent.ConcurrentHashMap: long SEGMASK_OFFSET>;
        $i10 = i0 - 1;
        virtualinvoke $r14.<sun.misc.Unsafe: void putIntVolatile(java.lang.Object,long,int)>(r0, $l9, $i10);
        $r15 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $l11 = <java.util.concurrent.ConcurrentHashMap: long SEGMENTS_OFFSET>;
        virtualinvoke $r15.<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>(r0, $l11, r3);
        $r16 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $l12 = <java.util.concurrent.ConcurrentHashMap: long HASHSEED_OFFSET>;
        $i13 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int randomHashSeed(java.util.concurrent.ConcurrentHashMap)>(r0);
        virtualinvoke $r16.<sun.misc.Unsafe: void putIntVolatile(java.lang.Object,long,int)>(r0, $l12, $i13);
        b3 = 2;
        r4 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment[] segments>;
        i4 = 0;

     label4:
        $i14 = lengthof r4;
        if i4 >= $i14 goto label6;

        r5 = r4[i4];
        if r5 == null goto label5;

        $f0 = (float) b3;
        $f1 = r5.<java.util.concurrent.ConcurrentHashMap$Segment: float loadFactor>;
        $f2 = $f0 * $f1;
        $i15 = (int) $f2;
        r5.<java.util.concurrent.ConcurrentHashMap$Segment: int threshold> = $i15;
        $r17 = newarray (java.util.concurrent.ConcurrentHashMap$HashEntry)[b3];
        $r18 = (java.util.concurrent.ConcurrentHashMap$HashEntry[]) $r17;
        r5.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table> = $r18;

     label5:
        i4 = i4 + 1;
        goto label4;

     label6:
        r19 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        r20 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        if r19 != null goto label7;

        goto label8;

     label7:
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r20);
        goto label6;

     label8:
        return;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0, $r3, $r4, $r5, $r6, $r7, $r10, $r13, $r16;
        java.lang.Class r1, r2, $r8, $r11, $r14, $r17;
        int i0, i1, $i2, $i4, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        long $l3, $l5, $l6, $l7, $l8, $l9;
        java.lang.reflect.Field $r9, $r12, $r15, $r18;
        java.lang.Exception $r19, r20;
        java.lang.Error $r21, $r22;

     label0:
        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE> = $r0;
        r1 = class "[Ljava/util/concurrent/ConcurrentHashMap$HashEntry;";
        r2 = class "[Ljava/util/concurrent/ConcurrentHashMap$Segment;";
        $r3 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $i2 = virtualinvoke $r3.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(r1);
        $l3 = (long) $i2;
        <java.util.concurrent.ConcurrentHashMap: long TBASE> = $l3;
        $r4 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $i4 = virtualinvoke $r4.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(r2);
        $l5 = (long) $i4;
        <java.util.concurrent.ConcurrentHashMap: long SBASE> = $l5;
        $r5 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        i0 = virtualinvoke $r5.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(r1);
        $r6 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        i1 = virtualinvoke $r6.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(r2);
        $r7 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $r8 = class "java/util/concurrent/ConcurrentHashMap";
        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("hashSeed");
        $l6 = virtualinvoke $r7.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r9);
        <java.util.concurrent.ConcurrentHashMap: long HASHSEED_OFFSET> = $l6;
        $r10 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $r11 = class "java/util/concurrent/ConcurrentHashMap";
        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("segmentShift");
        $l7 = virtualinvoke $r10.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r12);
        <java.util.concurrent.ConcurrentHashMap: long SEGSHIFT_OFFSET> = $l7;
        $r13 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $r14 = class "java/util/concurrent/ConcurrentHashMap";
        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("segmentMask");
        $l8 = virtualinvoke $r13.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r15);
        <java.util.concurrent.ConcurrentHashMap: long SEGMASK_OFFSET> = $l8;
        $r16 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe UNSAFE>;
        $r17 = class "java/util/concurrent/ConcurrentHashMap";
        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("segments");
        $l9 = virtualinvoke $r16.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r18);
        <java.util.concurrent.ConcurrentHashMap: long SEGMENTS_OFFSET> = $l9;

     label1:
        goto label3;

     label2:
        $r19 := @caughtexception;
        r20 = $r19;
        $r21 = new java.lang.Error;
        specialinvoke $r21.<java.lang.Error: void <init>(java.lang.Throwable)>(r20);
        throw $r21;

     label3:
        $i10 = i1 - 1;
        $i11 = i1 & $i10;
        if $i11 != 0 goto label4;

        $i12 = i0 - 1;
        $i13 = i0 & $i12;
        if $i13 == 0 goto label5;

     label4:
        $r22 = new java.lang.Error;
        specialinvoke $r22.<java.lang.Error: void <init>(java.lang.String)>("data type scale not a power of two");
        throw $r22;

     label5:
        $i14 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i1);
        $i15 = 31 - $i14;
        <java.util.concurrent.ConcurrentHashMap: int SSHIFT> = $i15;
        $i16 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);
        $i17 = 31 - $i16;
        <java.util.concurrent.ConcurrentHashMap: int TSHIFT> = $i17;
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }
}
