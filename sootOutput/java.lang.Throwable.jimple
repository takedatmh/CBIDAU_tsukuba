public class java.lang.Throwable extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private transient java.lang.Object backtrace;
    private java.lang.String detailMessage;
    private static final java.lang.StackTraceElement[] UNASSIGNED_STACK;
    private java.lang.Throwable cause;
    private java.lang.StackTraceElement[] stackTrace;
    private static final java.util.List SUPPRESSED_SENTINEL;
    private java.util.List suppressedExceptions;
    private static final java.lang.String NULL_CAUSE_MESSAGE;
    private static final java.lang.String SELF_SUPPRESSION_MESSAGE;
    private static final java.lang.String CAUSE_CAPTION;
    private static final java.lang.String SUPPRESSED_CAPTION;
    private static final java.lang.Throwable[] EMPTY_THROWABLE_ARRAY;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        java.lang.Throwable r0;
        java.lang.StackTraceElement[] $r1;
        java.util.List $r2;

        r0 := @this: java.lang.Throwable;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.Throwable: java.lang.Throwable cause> = r0;
        $r1 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;
        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r1;
        $r2 = <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL>;
        r0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r2;
        virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();
        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.Throwable r0;
        java.lang.String r1;
        java.lang.StackTraceElement[] $r2;
        java.util.List $r3;

        r0 := @this: java.lang.Throwable;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.Throwable: java.lang.Throwable cause> = r0;
        $r2 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;
        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r2;
        $r3 = <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL>;
        r0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r3;
        virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();
        r0.<java.lang.Throwable: java.lang.String detailMessage> = r1;
        return;
    }

    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r0, r2;
        java.lang.String r1;
        java.lang.StackTraceElement[] $r3;
        java.util.List $r4;

        r0 := @this: java.lang.Throwable;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Throwable;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.Throwable: java.lang.Throwable cause> = r0;
        $r3 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;
        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r3;
        $r4 = <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL>;
        r0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r4;
        virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();
        r0.<java.lang.Throwable: java.lang.String detailMessage> = r1;
        r0.<java.lang.Throwable: java.lang.Throwable cause> = r2;
        return;
    }

    public void <init>(java.lang.Throwable)
    {
        java.lang.Throwable r0, r1;
        java.lang.StackTraceElement[] $r2;
        java.util.List $r3;
        java.lang.String $r6;

        r0 := @this: java.lang.Throwable;
        r1 := @parameter0: java.lang.Throwable;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.Throwable: java.lang.Throwable cause> = r0;
        $r2 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;
        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r2;
        $r3 = <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL>;
        r0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r3;
        virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();
        if r1 != null goto label0;

        $r6 = null;
        goto label1;

     label0:
        $r6 = virtualinvoke r1.<java.lang.Throwable: java.lang.String toString()>();

     label1:
        r0.<java.lang.Throwable: java.lang.String detailMessage> = $r6;
        r0.<java.lang.Throwable: java.lang.Throwable cause> = r1;
        return;
    }

    protected void <init>(java.lang.String, java.lang.Throwable, boolean, boolean)
    {
        java.lang.Throwable r0, r2;
        java.lang.String r1;
        boolean z0, z1;
        java.lang.StackTraceElement[] $r3;
        java.util.List $r4;

        r0 := @this: java.lang.Throwable;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Throwable;
        z0 := @parameter2: boolean;
        z1 := @parameter3: boolean;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.lang.Throwable: java.lang.Throwable cause> = r0;
        $r3 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;
        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r3;
        $r4 = <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL>;
        r0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r4;
        if z1 == 0 goto label0;

        virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();
        goto label1;

     label0:
        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = null;

     label1:
        r0.<java.lang.Throwable: java.lang.String detailMessage> = r1;
        r0.<java.lang.Throwable: java.lang.Throwable cause> = r2;
        if z0 != 0 goto label2;

        r0.<java.lang.Throwable: java.util.List suppressedExceptions> = null;

     label2:
        return;
    }

    public java.lang.String getMessage()
    {
        java.lang.Throwable r0;
        java.lang.String $r1;

        r0 := @this: java.lang.Throwable;
        $r1 = r0.<java.lang.Throwable: java.lang.String detailMessage>;
        return $r1;
    }

    public java.lang.String getLocalizedMessage()
    {
        java.lang.Throwable r0;
        java.lang.String $r1;

        r0 := @this: java.lang.Throwable;
        $r1 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>();
        return $r1;
    }

    public synchronized java.lang.Throwable getCause()
    {
        java.lang.Throwable r0, $r1, $r2;

        r0 := @this: java.lang.Throwable;
        $r1 = r0.<java.lang.Throwable: java.lang.Throwable cause>;
        if $r1 != r0 goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r2 = r0.<java.lang.Throwable: java.lang.Throwable cause>;

     label1:
        return $r2;
    }

    public synchronized java.lang.Throwable initCause(java.lang.Throwable)
    {
        java.lang.Throwable r0, r1, $r3;
        java.lang.StringBuilder $r2, $r5, $r7;
        java.lang.IllegalStateException $r4;
        java.lang.String $r6, $r8;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: java.lang.Throwable;
        r1 := @parameter0: java.lang.Throwable;
        $r3 = r0.<java.lang.Throwable: java.lang.Throwable cause>;
        if $r3 == r0 goto label0;

        $r4 = new java.lang.IllegalStateException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t overwrite cause with ");
        $r6 = staticinvoke <java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>(r1, "a null");
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r8, r0);
        throw $r4;

     label0:
        if r1 != r0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Self-causation not permitted", r0);
        throw $r9;

     label1:
        r0.<java.lang.Throwable: java.lang.Throwable cause> = r1;
        return r0;
    }

    public java.lang.String toString()
    {
        java.lang.Throwable r0;
        java.lang.String r1, r2, $r8;
        java.lang.Class $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;

        r0 := @this: java.lang.Throwable;
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r1 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();
        r2 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getLocalizedMessage()>();
        if r2 == null goto label0;

        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        goto label1;

     label0:
        $r8 = r1;

     label1:
        return $r8;
    }

    public void printStackTrace()
    {
        java.lang.Throwable r0;
        java.io.PrintStream $r1;

        r0 := @this: java.lang.Throwable;
        $r1 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke r0.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>($r1);
        return;
    }

    public void printStackTrace(java.io.PrintStream)
    {
        java.lang.Throwable r0;
        java.io.PrintStream r1;
        java.lang.Throwable$WrappedPrintStream $r2;

        r0 := @this: java.lang.Throwable;
        r1 := @parameter0: java.io.PrintStream;
        $r2 = new java.lang.Throwable$WrappedPrintStream;
        specialinvoke $r2.<java.lang.Throwable$WrappedPrintStream: void <init>(java.io.PrintStream)>(r1);
        specialinvoke r0.<java.lang.Throwable: void printStackTrace(java.lang.Throwable$PrintStreamOrWriter)>($r2);
        return;
    }

    private void printStackTrace(java.lang.Throwable$PrintStreamOrWriter)
    {
        java.lang.Throwable r0, r8, r15, r16, $r17;
        java.lang.Throwable$PrintStreamOrWriter r1;
        java.util.IdentityHashMap $r2;
        java.util.Set r3;
        java.lang.Object r4, $r9;
        java.lang.StackTraceElement[] r5, r6;
        int i0, i1, i2, i3;
        java.lang.StackTraceElement r7;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13;
        java.lang.Throwable[] r14;

        r0 := @this: java.lang.Throwable;
        r1 := @parameter0: java.lang.Throwable$PrintStreamOrWriter;
        $r2 = new java.util.IdentityHashMap;
        specialinvoke $r2.<java.util.IdentityHashMap: void <init>()>();
        r3 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r2);
        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r0);
        $r9 = virtualinvoke r1.<java.lang.Throwable$PrintStreamOrWriter: java.lang.Object lock()>();
        r4 = $r9;
        entermonitor $r9;

     label0:
        virtualinvoke r1.<java.lang.Throwable$PrintStreamOrWriter: void println(java.lang.Object)>(r0);
        r5 = specialinvoke r0.<java.lang.Throwable: java.lang.StackTraceElement[] getOurStackTrace()>();
        r6 = r5;
        i0 = lengthof r6;
        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r7 = r6[i1];
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tat ");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.Throwable$PrintStreamOrWriter: void println(java.lang.Object)>($r13);
        i1 = i1 + 1;
        goto label1;

     label2:
        r14 = virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>();
        i2 = lengthof r14;
        i3 = 0;

     label3:
        if i3 >= i2 goto label4;

        r15 = r14[i3];
        specialinvoke r15.<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>(r1, r5, "Suppressed: ", "\t", r3);
        i3 = i3 + 1;
        goto label3;

     label4:
        r16 = virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable getCause()>();
        if r16 == null goto label5;

        specialinvoke r16.<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>(r1, r5, "Caused by: ", "", r3);

     label5:
        exitmonitor r4;

     label6:
        goto label10;

     label7:
        $r17 := @caughtexception;

     label8:
        r8 = $r17;
        exitmonitor r4;

     label9:
        throw r8;

     label10:
        return;

        catch java.lang.Throwable from label0 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter, java.lang.StackTraceElement[], java.lang.String, java.lang.String, java.util.Set)
    {
        java.lang.Throwable r0, r7, r39;
        java.lang.Throwable$PrintStreamOrWriter r1;
        java.lang.StackTraceElement[] r2, r6;
        java.lang.String r3, r4, $r15, $r22, $r28, $r34, $r38;
        java.util.Set r5;
        boolean $z0, $z1, $z2, $z4;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        java.lang.StringBuilder $r8, $r11, $r12, $r13, $r14, $r18, $r19, $r20, $r21, $r23, $r24, $r25, $r27, $r29, $r30, $r31, $r32, $r33, $r36, $r37;
        java.lang.Object $r9;
        java.lang.AssertionError $r10;
        java.lang.StackTraceElement $r16, $r17, $r26;
        java.lang.Throwable[] r35;

        r0 := @this: java.lang.Throwable;
        r1 := @parameter0: java.lang.Throwable$PrintStreamOrWriter;
        r2 := @parameter1: java.lang.StackTraceElement[];
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: java.lang.String;
        r5 := @parameter4: java.util.Set;
        $z0 = <java.lang.Throwable: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r9 = virtualinvoke r1.<java.lang.Throwable$PrintStreamOrWriter: java.lang.Object lock()>();
        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r9);
        if $z1 != 0 goto label0;

        $r10 = new java.lang.AssertionError;
        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();
        throw $r10;

     label0:
        $z2 = interfaceinvoke r5.<java.util.Set: boolean contains(java.lang.Object)>(r0);
        if $z2 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t[CIRCULAR REFERENCE:");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.Throwable$PrintStreamOrWriter: void println(java.lang.Object)>($r15);
        goto label9;

     label1:
        interfaceinvoke r5.<java.util.Set: boolean add(java.lang.Object)>(r0);
        r6 = specialinvoke r0.<java.lang.Throwable: java.lang.StackTraceElement[] getOurStackTrace()>();
        $i6 = lengthof r6;
        i0 = $i6 - 1;
        $i7 = lengthof r2;
        i1 = $i7 - 1;

     label2:
        if i0 < 0 goto label3;

        if i1 < 0 goto label3;

        $r16 = r6[i0];
        $r17 = r2[i1];
        $z4 = virtualinvoke $r16.<java.lang.StackTraceElement: boolean equals(java.lang.Object)>($r17);
        if $z4 == 0 goto label3;

        i0 = i0 + -1;
        i1 = i1 + -1;
        goto label2;

     label3:
        $i8 = lengthof r6;
        $i9 = $i8 - 1;
        i2 = $i9 - i0;
        $r18 = new java.lang.StringBuilder;
        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.Throwable$PrintStreamOrWriter: void println(java.lang.Object)>($r22);
        i3 = 0;

     label4:
        if i3 > i0 goto label5;

        $r23 = new java.lang.StringBuilder;
        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tat ");
        $r26 = r6[i3];
        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.Throwable$PrintStreamOrWriter: void println(java.lang.Object)>($r28);
        i3 = i3 + 1;
        goto label4;

     label5:
        if i2 == 0 goto label6;

        $r29 = new java.lang.StringBuilder;
        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t... ");
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" more");
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.Throwable$PrintStreamOrWriter: void println(java.lang.Object)>($r34);

     label6:
        r35 = virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>();
        i4 = lengthof r35;
        i5 = 0;

     label7:
        if i5 >= i4 goto label8;

        r7 = r35[i5];
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r36 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");
        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke r7.<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>(r1, r6, "Suppressed: ", $r38, r5);
        i5 = i5 + 1;
        goto label7;

     label8:
        r39 = virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable getCause()>();
        if r39 == null goto label9;

        specialinvoke r39.<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>(r1, r6, "Caused by: ", r4, r5);

     label9:
        return;
    }

    public void printStackTrace(java.io.PrintWriter)
    {
        java.lang.Throwable r0;
        java.io.PrintWriter r1;
        java.lang.Throwable$WrappedPrintWriter $r2;

        r0 := @this: java.lang.Throwable;
        r1 := @parameter0: java.io.PrintWriter;
        $r2 = new java.lang.Throwable$WrappedPrintWriter;
        specialinvoke $r2.<java.lang.Throwable$WrappedPrintWriter: void <init>(java.io.PrintWriter)>(r1);
        specialinvoke r0.<java.lang.Throwable: void printStackTrace(java.lang.Throwable$PrintStreamOrWriter)>($r2);
        return;
    }

    public synchronized java.lang.Throwable fillInStackTrace()
    {
        java.lang.Throwable r0;
        java.lang.StackTraceElement[] $r1, $r4;
        java.lang.Object $r2;

        r0 := @this: java.lang.Throwable;
        $r1 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;
        if $r1 != null goto label0;

        $r2 = r0.<java.lang.Throwable: java.lang.Object backtrace>;
        if $r2 == null goto label1;

     label0:
        specialinvoke r0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0);
        $r4 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;
        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r4;

     label1:
        return r0;
    }

    private native java.lang.Throwable fillInStackTrace(int);

    public java.lang.StackTraceElement[] getStackTrace()
    {
        java.lang.Throwable r0;
        java.lang.StackTraceElement[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.lang.Throwable;
        $r1 = specialinvoke r0.<java.lang.Throwable: java.lang.StackTraceElement[] getOurStackTrace()>();
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (java.lang.StackTraceElement[]) $r2;
        return $r3;
    }

    private synchronized java.lang.StackTraceElement[] getOurStackTrace()
    {
        java.lang.Throwable r0;
        java.lang.StackTraceElement[] $r1, $r2, $r3, $r5, $r6, $r8, $r9, $r10;
        int i0, i1;
        java.lang.Object $r4;
        java.lang.StackTraceElement $r7;

        r0 := @this: java.lang.Throwable;
        $r2 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;
        $r1 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;
        if $r2 == $r1 goto label0;

        $r3 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;
        if $r3 != null goto label3;

        $r4 = r0.<java.lang.Throwable: java.lang.Object backtrace>;
        if $r4 == null goto label3;

     label0:
        i0 = virtualinvoke r0.<java.lang.Throwable: int getStackTraceDepth()>();
        $r5 = newarray (java.lang.StackTraceElement)[i0];
        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r5;
        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r6 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;
        $r7 = virtualinvoke r0.<java.lang.Throwable: java.lang.StackTraceElement getStackTraceElement(int)>(i1);
        $r6[i1] = $r7;
        i1 = i1 + 1;
        goto label1;

     label2:
        goto label4;

     label3:
        $r8 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;
        if $r8 != null goto label4;

        $r9 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;
        return $r9;

     label4:
        $r10 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;
        return $r10;
    }

    public void setStackTrace(java.lang.StackTraceElement[])
    {
        java.lang.Throwable r0, r4, r13, $r16;
        java.lang.StackTraceElement[] r1, r2, $r14;
        int i0, $i1;
        java.lang.StringBuilder $r3, $r8, $r9, $r10;
        java.lang.Object $r5, $r15;
        java.lang.StackTraceElement $r6;
        java.lang.NullPointerException $r7;
        java.lang.String $r11;

        r0 := @this: java.lang.Throwable;
        r1 := @parameter0: java.lang.StackTraceElement[];
        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();
        r2 = (java.lang.StackTraceElement[]) $r5;
        i0 = 0;

     label0:
        $i1 = lengthof r2;
        if i0 >= $i1 goto label2;

        $r6 = r2[i0];
        if $r6 != null goto label1;

        $r7 = new java.lang.NullPointerException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stackTrace[");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>($r11);
        throw $r7;

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        r13 = r0;
        entermonitor r0;

     label3:
        $r14 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;
        if $r14 != null goto label5;

        $r15 = r0.<java.lang.Throwable: java.lang.Object backtrace>;
        if $r15 != null goto label5;

        exitmonitor r13;

     label4:
        return;

     label5:
        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = r2;
        exitmonitor r13;

     label6:
        goto label10;

     label7:
        $r16 := @caughtexception;

     label8:
        r4 = $r16;
        exitmonitor r13;

     label9:
        throw r4;

     label10:
        return;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    native int getStackTraceDepth();

    native java.lang.StackTraceElement getStackTraceElement(int);

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.Throwable r0, r3;
        java.io.ObjectInputStream r1;
        null_type n0;
        java.util.Iterator r2;
        java.lang.StackTraceElement r4, $r19, $r21;
        java.util.List $r5, $r6, r7, $r9;
        boolean $z0, $z1, $z3;
        java.util.ArrayList $r8;
        java.lang.Object $r10, $r16, $r25;
        java.lang.NullPointerException $r11, $r23;
        java.lang.IllegalArgumentException $r12;
        java.lang.StackTraceElement[] $r13, $r14, $r15, $r17, $r18, $r20, r22, $r24, $r26;
        int $i0, $i1, i2, i3;

        r0 := @this: java.lang.Throwable;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        $r5 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;
        if $r5 == null goto label5;

        n0 = null;
        $r6 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;
        $z0 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();
        if $z0 == 0 goto label0;

        r7 = <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL>;
        goto label4;

     label0:
        $r8 = new java.util.ArrayList;
        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(1);
        r7 = $r8;
        $r9 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;
        r2 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label4;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.lang.Throwable) $r10;
        if r3 != null goto label2;

        $r11 = new java.lang.NullPointerException;
        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot suppress a null exception.");
        throw $r11;

     label2:
        if r3 != r0 goto label3;

        $r12 = new java.lang.IllegalArgumentException;
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Self-suppression not permitted");
        throw $r12;

     label3:
        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r3);
        goto label1;

     label4:
        r0.<java.lang.Throwable: java.util.List suppressedExceptions> = r7;

     label5:
        $r13 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;
        if $r13 == null goto label11;

        $r14 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;
        $i0 = lengthof $r14;
        if $i0 != 0 goto label6;

        $r15 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;
        $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.Object clone()>();
        $r17 = (java.lang.StackTraceElement[]) $r16;
        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r17;
        goto label12;

     label6:
        $r18 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;
        $i1 = lengthof $r18;
        if $i1 != 1 goto label7;

        $r19 = <java.lang.Throwable$SentinelHolder: java.lang.StackTraceElement STACK_TRACE_ELEMENT_SENTINEL>;
        $r20 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;
        $r21 = $r20[0];
        $z3 = virtualinvoke $r19.<java.lang.StackTraceElement: boolean equals(java.lang.Object)>($r21);
        if $z3 == 0 goto label7;

        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = null;
        goto label12;

     label7:
        r22 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;
        i2 = lengthof r22;
        i3 = 0;

     label8:
        if i3 >= i2 goto label10;

        r4 = r22[i3];
        if r4 != null goto label9;

        $r23 = new java.lang.NullPointerException;
        specialinvoke $r23.<java.lang.NullPointerException: void <init>(java.lang.String)>("null StackTraceElement in serial stream. ");
        throw $r23;

     label9:
        i3 = i3 + 1;
        goto label8;

     label10:
        goto label12;

     label11:
        $r24 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;
        $r25 = virtualinvoke $r24.<java.lang.Object: java.lang.Object clone()>();
        $r26 = (java.lang.StackTraceElement[]) $r25;
        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r26;

     label12:
        return;
    }

    private synchronized void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.lang.Throwable r0, r4, $r7;
        java.io.ObjectOutputStream r1;
        java.lang.StackTraceElement[] r2, $r3, $r6;

        r0 := @this: java.lang.Throwable;
        r1 := @parameter0: java.io.ObjectOutputStream;
        specialinvoke r0.<java.lang.Throwable: java.lang.StackTraceElement[] getOurStackTrace()>();
        r2 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

     label0:
        $r6 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;
        if $r6 != null goto label1;

        $r3 = <java.lang.Throwable$SentinelHolder: java.lang.StackTraceElement[] STACK_TRACE_SENTINEL>;
        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r3;

     label1:
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

     label2:
        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = r2;
        goto label6;

     label3:
        $r7 := @caughtexception;

     label4:
        r4 = $r7;

     label5:
        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = r2;
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final synchronized void addSuppressed(java.lang.Throwable)
    {
        java.lang.Throwable r0, r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.NullPointerException $r3;
        java.util.List $r4, $r5, $r6, $r8;
        java.util.ArrayList $r7;

        r0 := @this: java.lang.Throwable;
        r1 := @parameter0: java.lang.Throwable;
        if r1 != r0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Self-suppression not permitted", r1);
        throw $r2;

     label0:
        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot suppress a null exception.");
        throw $r3;

     label1:
        $r4 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;
        if $r4 != null goto label2;

        return;

     label2:
        $r5 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;
        $r6 = <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL>;
        if $r5 != $r6 goto label3;

        $r7 = new java.util.ArrayList;
        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(1);
        r0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r7;

     label3:
        $r8 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;
        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r1);
        return;
    }

    public final synchronized java.lang.Throwable[] getSuppressed()
    {
        java.lang.Throwable r0;
        java.util.List $r1, $r2, $r3, $r5;
        java.lang.Throwable[] $r4, $r6, $r8;
        java.lang.Object[] $r7;

        r0 := @this: java.lang.Throwable;
        $r2 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;
        $r1 = <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL>;
        if $r2 == $r1 goto label0;

        $r3 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;
        if $r3 != null goto label1;

     label0:
        $r4 = <java.lang.Throwable: java.lang.Throwable[] EMPTY_THROWABLE_ARRAY>;
        return $r4;

     label1:
        $r5 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;
        $r6 = <java.lang.Throwable: java.lang.Throwable[] EMPTY_THROWABLE_ARRAY>;
        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);
        $r8 = (java.lang.Throwable[]) $r7;
        return $r8;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.lang.StackTraceElement[] $r1;
        java.util.ArrayList $r2;
        java.util.List $r3;
        java.lang.Throwable[] $r4;

        $r0 = class "java/lang/Throwable";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.lang.Throwable: boolean $assertionsDisabled> = $z1;
        $r1 = newarray (java.lang.StackTraceElement)[0];
        <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK> = $r1;
        $r2 = new java.util.ArrayList;
        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(0);
        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);
        <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL> = $r3;
        $r4 = newarray (java.lang.Throwable)[0];
        <java.lang.Throwable: java.lang.Throwable[] EMPTY_THROWABLE_ARRAY> = $r4;
        return;
    }
}
