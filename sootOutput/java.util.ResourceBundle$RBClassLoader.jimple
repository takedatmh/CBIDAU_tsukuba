class java.util.ResourceBundle$RBClassLoader extends java.lang.ClassLoader
{
    private static final java.util.ResourceBundle$RBClassLoader INSTANCE;
    private static final java.lang.ClassLoader loader;

    private void <init>()
    {
        java.util.ResourceBundle$RBClassLoader r0;

        r0 := @this: java.util.ResourceBundle$RBClassLoader;
        specialinvoke r0.<java.lang.ClassLoader: void <init>()>();
        return;
    }

    public java.lang.Class loadClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.util.ResourceBundle$RBClassLoader r0;
        java.lang.String r1;
        java.lang.ClassLoader $r2, $r3;
        java.lang.Class $r4, $r5;

        r0 := @this: java.util.ResourceBundle$RBClassLoader;
        r1 := @parameter0: java.lang.String;
        $r2 = <java.util.ResourceBundle$RBClassLoader: java.lang.ClassLoader loader>;
        if $r2 == null goto label0;

        $r3 = <java.util.ResourceBundle$RBClassLoader: java.lang.ClassLoader loader>;
        $r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);
        return $r4;

     label0:
        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);
        return $r5;
    }

    public java.net.URL getResource(java.lang.String)
    {
        java.util.ResourceBundle$RBClassLoader r0;
        java.lang.String r1;
        java.lang.ClassLoader $r2, $r3;
        java.net.URL $r4, $r5;

        r0 := @this: java.util.ResourceBundle$RBClassLoader;
        r1 := @parameter0: java.lang.String;
        $r2 = <java.util.ResourceBundle$RBClassLoader: java.lang.ClassLoader loader>;
        if $r2 == null goto label0;

        $r3 = <java.util.ResourceBundle$RBClassLoader: java.lang.ClassLoader loader>;
        $r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1);
        return $r4;

     label0:
        $r5 = staticinvoke <java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>(r1);
        return $r5;
    }

    public java.io.InputStream getResourceAsStream(java.lang.String)
    {
        java.util.ResourceBundle$RBClassLoader r0;
        java.lang.String r1;
        java.lang.ClassLoader $r2, $r3;
        java.io.InputStream $r4, $r5;

        r0 := @this: java.util.ResourceBundle$RBClassLoader;
        r1 := @parameter0: java.lang.String;
        $r2 = <java.util.ResourceBundle$RBClassLoader: java.lang.ClassLoader loader>;
        if $r2 == null goto label0;

        $r3 = <java.util.ResourceBundle$RBClassLoader: java.lang.ClassLoader loader>;
        $r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);
        return $r4;

     label0:
        $r5 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>(r1);
        return $r5;
    }

    static java.util.ResourceBundle$RBClassLoader access$000()
    {
        java.util.ResourceBundle$RBClassLoader $r0;

        $r0 = <java.util.ResourceBundle$RBClassLoader: java.util.ResourceBundle$RBClassLoader INSTANCE>;
        return $r0;
    }

    void <init>(java.util.ResourceBundle$1)
    {
        java.util.ResourceBundle$RBClassLoader r0;
        java.util.ResourceBundle$1 r1;

        r0 := @this: java.util.ResourceBundle$RBClassLoader;
        r1 := @parameter0: java.util.ResourceBundle$1;
        specialinvoke r0.<java.util.ResourceBundle$RBClassLoader: void <init>()>();
        return;
    }

    static void <clinit>()
    {
        java.util.ResourceBundle$RBClassLoader$1 $r0;
        java.lang.Object $r1;
        java.util.ResourceBundle$RBClassLoader $r2;
        java.lang.ClassLoader $r3;

        $r0 = new java.util.ResourceBundle$RBClassLoader$1;
        specialinvoke $r0.<java.util.ResourceBundle$RBClassLoader$1: void <init>()>();
        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        $r2 = (java.util.ResourceBundle$RBClassLoader) $r1;
        <java.util.ResourceBundle$RBClassLoader: java.util.ResourceBundle$RBClassLoader INSTANCE> = $r2;
        $r3 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        <java.util.ResourceBundle$RBClassLoader: java.lang.ClassLoader loader> = $r3;
        return;
    }
}
