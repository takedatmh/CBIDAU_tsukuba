class java.io.ObjectOutputStream$DebugTraceInfoStack extends java.lang.Object
{
    private final java.util.List stack;

    void <init>()
    {
        java.io.ObjectOutputStream$DebugTraceInfoStack r0;
        java.util.ArrayList $r1;

        r0 := @this: java.io.ObjectOutputStream$DebugTraceInfoStack;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new java.util.ArrayList;
        specialinvoke $r1.<java.util.ArrayList: void <init>()>();
        r0.<java.io.ObjectOutputStream$DebugTraceInfoStack: java.util.List stack> = $r1;
        return;
    }

    void clear()
    {
        java.io.ObjectOutputStream$DebugTraceInfoStack r0;
        java.util.List $r1;

        r0 := @this: java.io.ObjectOutputStream$DebugTraceInfoStack;
        $r1 = r0.<java.io.ObjectOutputStream$DebugTraceInfoStack: java.util.List stack>;
        interfaceinvoke $r1.<java.util.List: void clear()>();
        return;
    }

    void pop()
    {
        java.io.ObjectOutputStream$DebugTraceInfoStack r0;
        java.util.List $r1, $r2;
        int $i0, $i1;

        r0 := @this: java.io.ObjectOutputStream$DebugTraceInfoStack;
        $r1 = r0.<java.io.ObjectOutputStream$DebugTraceInfoStack: java.util.List stack>;
        $r2 = r0.<java.io.ObjectOutputStream$DebugTraceInfoStack: java.util.List stack>;
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();
        $i1 = $i0 - 1;
        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>($i1);
        return;
    }

    void push(java.lang.String)
    {
        java.io.ObjectOutputStream$DebugTraceInfoStack r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.util.List $r3;

        r0 := @this: java.io.ObjectOutputStream$DebugTraceInfoStack;
        r1 := @parameter0: java.lang.String;
        $r3 = r0.<java.io.ObjectOutputStream$DebugTraceInfoStack: java.util.List stack>;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t- ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);
        return;
    }

    public java.lang.String toString()
    {
        java.io.ObjectOutputStream$DebugTraceInfoStack r0;
        java.lang.StringBuilder $r1, r2, $r6, $r10, $r12;
        int i0, $i1;
        java.util.List $r3, $r4, $r7;
        boolean $z0;
        java.lang.Object $r8;
        java.lang.String $r9, $r11, $r13, $r15;

        r0 := @this: java.io.ObjectOutputStream$DebugTraceInfoStack;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        r2 = $r1;
        $r3 = r0.<java.io.ObjectOutputStream$DebugTraceInfoStack: java.util.List stack>;
        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();
        if $z0 != 0 goto label3;

        $r4 = r0.<java.io.ObjectOutputStream$DebugTraceInfoStack: java.util.List stack>;
        i0 = interfaceinvoke $r4.<java.util.List: int size()>();

     label0:
        if i0 <= 0 goto label3;

        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = r0.<java.io.ObjectOutputStream$DebugTraceInfoStack: java.util.List stack>;
        $i1 = i0 - 1;
        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i1);
        $r9 = (java.lang.String) $r8;
        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        if i0 == 1 goto label1;

        $r11 = "\n";
        goto label2;

     label1:
        $r11 = "";

     label2:
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
        i0 = i0 + -1;
        goto label0;

     label3:
        $r15 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r15;
    }
}
