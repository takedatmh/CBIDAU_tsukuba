class sun.reflect.MethodAccessorGenerator extends sun.reflect.AccessorGenerator
{
    private static final short NUM_BASE_CPOOL_ENTRIES;
    private static final short NUM_METHODS;
    private static final short NUM_SERIALIZATION_CPOOL_ENTRIES;
    private static volatile int methodSymnum;
    private static volatile int constructorSymnum;
    private static volatile int serializationConstructorSymnum;
    private java.lang.Class declaringClass;
    private java.lang.Class[] parameterTypes;
    private java.lang.Class returnType;
    private boolean isConstructor;
    private boolean forSerialization;
    private short targetMethodRef;
    private short invokeIdx;
    private short invokeDescriptorIdx;
    private short nonPrimitiveParametersBaseIdx;

    void <init>()
    {
        sun.reflect.MethodAccessorGenerator r0;

        r0 := @this: sun.reflect.MethodAccessorGenerator;
        specialinvoke r0.<sun.reflect.AccessorGenerator: void <init>()>();
        return;
    }

    public sun.reflect.MethodAccessor generateMethod(java.lang.Class, java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class[], int)
    {
        sun.reflect.MethodAccessorGenerator r0;
        java.lang.Class r1, r4;
        java.lang.String r2;
        java.lang.Class[] r3, r5;
        int i0;
        sun.reflect.MagicAccessorImpl $r6;
        sun.reflect.MethodAccessor $r7;

        r0 := @this: sun.reflect.MethodAccessorGenerator;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Class[];
        r4 := @parameter3: java.lang.Class;
        r5 := @parameter4: java.lang.Class[];
        i0 := @parameter5: int;
        $r6 = specialinvoke r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.MagicAccessorImpl generate(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,boolean,boolean,java.lang.Class)>(r1, r2, r3, r4, r5, i0, 0, 0, null);
        $r7 = (sun.reflect.MethodAccessor) $r6;
        return $r7;
    }

    public sun.reflect.ConstructorAccessor generateConstructor(java.lang.Class, java.lang.Class[], java.lang.Class[], int)
    {
        sun.reflect.MethodAccessorGenerator r0;
        java.lang.Class r1, $r4;
        java.lang.Class[] r2, r3;
        int i0;
        sun.reflect.MagicAccessorImpl $r5;
        sun.reflect.ConstructorAccessor $r6;

        r0 := @this: sun.reflect.MethodAccessorGenerator;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.Class[];
        r3 := @parameter2: java.lang.Class[];
        i0 := @parameter3: int;
        $r4 = <java.lang.Void: java.lang.Class TYPE>;
        $r5 = specialinvoke r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.MagicAccessorImpl generate(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,boolean,boolean,java.lang.Class)>(r1, "<init>", r2, $r4, r3, i0, 1, 0, null);
        $r6 = (sun.reflect.ConstructorAccessor) $r5;
        return $r6;
    }

    public sun.reflect.SerializationConstructorAccessorImpl generateSerializationConstructor(java.lang.Class, java.lang.Class[], java.lang.Class[], int, java.lang.Class)
    {
        sun.reflect.MethodAccessorGenerator r0;
        java.lang.Class r1, r4, $r5;
        java.lang.Class[] r2, r3;
        int i0;
        sun.reflect.MagicAccessorImpl $r6;
        sun.reflect.SerializationConstructorAccessorImpl $r7;

        r0 := @this: sun.reflect.MethodAccessorGenerator;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.Class[];
        r3 := @parameter2: java.lang.Class[];
        i0 := @parameter3: int;
        r4 := @parameter4: java.lang.Class;
        $r5 = <java.lang.Void: java.lang.Class TYPE>;
        $r6 = specialinvoke r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.MagicAccessorImpl generate(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,boolean,boolean,java.lang.Class)>(r1, "<init>", r2, $r5, r3, i0, 1, 1, r4);
        $r7 = (sun.reflect.SerializationConstructorAccessorImpl) $r6;
        return $r7;
    }

    private sun.reflect.MagicAccessorImpl generate(java.lang.Class, java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class[], int, boolean, boolean, java.lang.Class)
    {
        sun.reflect.MethodAccessorGenerator r0;
        java.lang.Class r1, r4, r6, r10;
        java.lang.String r2, r9, $r24, $r29, $r35, $r54, $r66;
        java.lang.Class[] r3, r5;
        int i0, i3, $i4, $i5, $i6, $i7, $i9, $i32;
        boolean z0, z1, z2, $z3, $z4;
        sun.reflect.ByteVector r7;
        sun.reflect.ClassFileAssembler $r8, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r28, $r30, $r31, $r32, $r33, $r34, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r55, $r56, $r57, $r61, $r67, $r68, $r69, $r70, $r71, $r72, $r73;
        short s1, s2, $s8, s10, $s11, $s12, $s13, $s14, $s15, $s16, $s17, $s18, $s19, $s20, $s21, $s22, $s23, $s24, $s25, $s26, $s27, $s28, $s29, $s30, $s31, $s33, $s34, $s35, $s36, $s37;
        java.lang.InternalError $r58;
        java.lang.StringBuilder $r59, $r60, $r62, $r63, $r64, $r65;
        byte[] r74;
        sun.reflect.MethodAccessorGenerator$1 $r75;
        java.lang.Object $r76;
        sun.reflect.MagicAccessorImpl $r77;

        r0 := @this: sun.reflect.MethodAccessorGenerator;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Class[];
        r4 := @parameter3: java.lang.Class;
        r5 := @parameter4: java.lang.Class[];
        i0 := @parameter5: int;
        z0 := @parameter6: boolean;
        z1 := @parameter7: boolean;
        r6 := @parameter8: java.lang.Class;
        r7 = staticinvoke <sun.reflect.ByteVectorFactory: sun.reflect.ByteVector create()>();
        $r8 = new sun.reflect.ClassFileAssembler;
        specialinvoke $r8.<sun.reflect.ClassFileAssembler: void <init>(sun.reflect.ByteVector)>(r7);
        r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm> = $r8;
        r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class declaringClass> = r1;
        r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes> = r3;
        r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class returnType> = r4;
        r0.<sun.reflect.MethodAccessorGenerator: int modifiers> = i0;
        r0.<sun.reflect.MethodAccessorGenerator: boolean isConstructor> = z0;
        r0.<sun.reflect.MethodAccessorGenerator: boolean forSerialization> = z1;
        $r11 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r11.<sun.reflect.ClassFileAssembler: void emitMagicAndVersion()>();
        s1 = 42;
        z2 = specialinvoke r0.<sun.reflect.MethodAccessorGenerator: boolean usesPrimitiveTypes()>();
        if z2 == 0 goto label0;

        $i4 = s1 + 72;
        s1 = (short) $i4;

     label0:
        if z1 == 0 goto label1;

        $i5 = s1 + 2;
        s1 = (short) $i5;

     label1:
        $i6 = specialinvoke r0.<sun.reflect.MethodAccessorGenerator: int numNonPrimitiveParameterTypes()>();
        $i7 = 2 * $i6;
        $s8 = (short) $i7;
        $i9 = s1 + $s8;
        s10 = (short) $i9;
        $r12 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s11 = staticinvoke <sun.reflect.MethodAccessorGenerator: short add(short,short)>(s10, 1);
        virtualinvoke $r12.<sun.reflect.ClassFileAssembler: void emitShort(short)>($s11);
        r9 = staticinvoke <sun.reflect.MethodAccessorGenerator: java.lang.String generateName(boolean,boolean)>(z0, z1);
        $r13 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r13.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>(r9);
        $r14 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r15 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s12 = virtualinvoke $r15.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r14.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s12);
        $r16 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s13 = virtualinvoke $r16.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.MethodAccessorGenerator: short thisClass> = $s13;
        if z0 == 0 goto label3;

        if z1 == 0 goto label2;

        $r17 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r17.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("sun/reflect/SerializationConstructorAccessorImpl");
        goto label4;

     label2:
        $r18 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r18.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("sun/reflect/ConstructorAccessorImpl");
        goto label4;

     label3:
        $r19 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r19.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("sun/reflect/MethodAccessorImpl");

     label4:
        $r20 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r21 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s14 = virtualinvoke $r21.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r20.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s14);
        $r22 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s15 = virtualinvoke $r22.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.MethodAccessorGenerator: short superClass> = $s15;
        $r23 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r24 = staticinvoke <sun.reflect.MethodAccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>(r1, 0);
        virtualinvoke $r23.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>($r24);
        $r25 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r26 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s16 = virtualinvoke $r26.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r25.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s16);
        $r27 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s17 = virtualinvoke $r27.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.MethodAccessorGenerator: short targetClass> = $s17;
        s2 = 0;
        if z1 == 0 goto label5;

        $r28 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r29 = staticinvoke <sun.reflect.MethodAccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>(r6, 0);
        virtualinvoke $r28.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>($r29);
        $r30 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r31 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s18 = virtualinvoke $r31.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r30.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s18);
        $r32 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        s2 = virtualinvoke $r32.<sun.reflect.ClassFileAssembler: short cpi()>();

     label5:
        $r33 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r33.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>(r2);
        $r34 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r35 = specialinvoke r0.<sun.reflect.MethodAccessorGenerator: java.lang.String buildInternalSignature()>();
        virtualinvoke $r34.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>($r35);
        $r36 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r37 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s19 = virtualinvoke $r37.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s20 = staticinvoke <sun.reflect.MethodAccessorGenerator: short sub(short,short)>($s19, 1);
        $r38 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s21 = virtualinvoke $r38.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r36.<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s20, $s21);
        $z3 = specialinvoke r0.<sun.reflect.MethodAccessorGenerator: boolean isInterface()>();
        if $z3 == 0 goto label6;

        $r39 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s22 = r0.<sun.reflect.MethodAccessorGenerator: short targetClass>;
        $r40 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s23 = virtualinvoke $r40.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r39.<sun.reflect.ClassFileAssembler: void emitConstantPoolInterfaceMethodref(short,short)>($s22, $s23);
        goto label8;

     label6:
        if z1 == 0 goto label7;

        $r41 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r42 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s24 = virtualinvoke $r42.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r41.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>(s2, $s24);
        goto label8;

     label7:
        $r43 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s25 = r0.<sun.reflect.MethodAccessorGenerator: short targetClass>;
        $r44 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s26 = virtualinvoke $r44.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r43.<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s25, $s26);

     label8:
        $r45 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s27 = virtualinvoke $r45.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.MethodAccessorGenerator: short targetMethodRef> = $s27;
        if z0 == 0 goto label9;

        $r46 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r46.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("newInstance");
        goto label10;

     label9:
        $r47 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r47.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("invoke");

     label10:
        $r48 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s28 = virtualinvoke $r48.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.MethodAccessorGenerator: short invokeIdx> = $s28;
        if z0 == 0 goto label11;

        $r49 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r49.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("([Ljava/lang/Object;)Ljava/lang/Object;");
        goto label12;

     label11:
        $r50 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r50.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");

     label12:
        $r51 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s29 = virtualinvoke $r51.<sun.reflect.ClassFileAssembler: short cpi()>();
        r0.<sun.reflect.MethodAccessorGenerator: short invokeDescriptorIdx> = $s29;
        $r52 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s30 = virtualinvoke $r52.<sun.reflect.ClassFileAssembler: short cpi()>();
        $s31 = staticinvoke <sun.reflect.MethodAccessorGenerator: short add(short,short)>($s30, 2);
        r0.<sun.reflect.MethodAccessorGenerator: short nonPrimitiveParametersBaseIdx> = $s31;
        i3 = 0;

     label13:
        $i32 = lengthof r3;
        if i3 >= $i32 goto label15;

        r10 = r3[i3];
        $z4 = staticinvoke <sun.reflect.MethodAccessorGenerator: boolean isPrimitive(java.lang.Class)>(r10);
        if $z4 != 0 goto label14;

        $r53 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r54 = staticinvoke <sun.reflect.MethodAccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>(r10, 0);
        virtualinvoke $r53.<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>($r54);
        $r55 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $r56 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s33 = virtualinvoke $r56.<sun.reflect.ClassFileAssembler: short cpi()>();
        virtualinvoke $r55.<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s33);

     label14:
        i3 = i3 + 1;
        goto label13;

     label15:
        virtualinvoke r0.<sun.reflect.MethodAccessorGenerator: void emitCommonConstantPoolEntries()>();
        if z2 == 0 goto label16;

        virtualinvoke r0.<sun.reflect.MethodAccessorGenerator: void emitBoxingContantPoolEntries()>();

     label16:
        $r57 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s34 = virtualinvoke $r57.<sun.reflect.ClassFileAssembler: short cpi()>();
        if $s34 == s10 goto label17;

        $r58 = new java.lang.InternalError;
        $r59 = new java.lang.StringBuilder;
        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();
        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adjust this code (cpi = ");
        $r61 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s35 = virtualinvoke $r61.<sun.reflect.ClassFileAssembler: short cpi()>();
        $r62 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s35);
        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", numCPEntries = ");
        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s10);
        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r58.<java.lang.InternalError: void <init>(java.lang.String)>($r66);
        throw $r58;

     label17:
        $r67 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r67.<sun.reflect.ClassFileAssembler: void emitShort(short)>(1);
        $r68 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s36 = r0.<sun.reflect.MethodAccessorGenerator: short thisClass>;
        virtualinvoke $r68.<sun.reflect.ClassFileAssembler: void emitShort(short)>($s36);
        $r69 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        $s37 = r0.<sun.reflect.MethodAccessorGenerator: short superClass>;
        virtualinvoke $r69.<sun.reflect.ClassFileAssembler: void emitShort(short)>($s37);
        $r70 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r70.<sun.reflect.ClassFileAssembler: void emitShort(short)>(0);
        $r71 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r71.<sun.reflect.ClassFileAssembler: void emitShort(short)>(0);
        $r72 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r72.<sun.reflect.ClassFileAssembler: void emitShort(short)>(2);
        virtualinvoke r0.<sun.reflect.MethodAccessorGenerator: void emitConstructor()>();
        specialinvoke r0.<sun.reflect.MethodAccessorGenerator: void emitInvoke()>();
        $r73 = r0.<sun.reflect.MethodAccessorGenerator: sun.reflect.ClassFileAssembler asm>;
        virtualinvoke $r73.<sun.reflect.ClassFileAssembler: void emitShort(short)>(0);
        interfaceinvoke r7.<sun.reflect.ByteVector: void trim()>();
        r74 = interfaceinvoke r7.<sun.reflect.ByteVector: byte[] getData()>();
        $r75 = new sun.reflect.MethodAccessorGenerator$1;
        specialinvoke $r75.<sun.reflect.MethodAccessorGenerator$1: void <init>(sun.reflect.MethodAccessorGenerator,java.lang.String,byte[],java.lang.Class)>(r0, r9, r74, r1);
        $r76 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r75);
        $r77 = (sun.reflect.MagicAccessorImpl) $r76;
        return $r77;
    }

    private void emitInvoke()
    {
        sun.reflect.MethodAccessorGenerator r0;
        sun.reflect.ClassFileAssembler r1, $r9, $r32, r33;
        short s0, s1, $s6, $s7, $s8, $s9, $s10, $s13, $s14, $s15, $s20, $s22, $s23, $s24, $s26, $s27, s28, $s29, $s30, $s32, $s34, s36, $s37, s39, $s40, $s41, $s42, s43, $s44, $s45, $s46, $s47, $s48, $s49, $s50, $s51;
        sun.reflect.Label r2, r3, r5, $r12, $r13, r14, $r19, $r22;
        byte b2, $b18;
        int i3, i4, $i5, $i11, $i12, $i16, $i17, $i19, $i21, $i25, $i31, $i33, $i35, $i38;
        java.lang.Class r4, r6, $r10, $r11, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31;
        java.lang.Class[] $r7, $r15, $r16, $r17, $r18, $r20, $r21;
        java.lang.InternalError $r8, $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        short[] $r34;

        r0 := @this: sun.reflect.MethodAccessorGenerator;
        $r7 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;
        $i5 = lengthof $r7;
        if $i5 <= 65535 goto label0;

        $r8 = new java.lang.InternalError;
        specialinvoke $r8.<java.lang.InternalError: void <init>(java.lang.String)>("Can\'t handle more than 65535 parameters");
        throw $r8;

     label0:
        $r9 = new sun.reflect.ClassFileAssembler;
        specialinvoke $r9.<sun.reflect.ClassFileAssembler: void <init>()>();
        r1 = $r9;
        $z0 = r0.<sun.reflect.MethodAccessorGenerator: boolean isConstructor>;
        if $z0 == 0 goto label1;

        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void setMaxLocals(int)>(2);
        goto label2;

     label1:
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void setMaxLocals(int)>(3);

     label2:
        s0 = 0;
        $z1 = r0.<sun.reflect.MethodAccessorGenerator: boolean isConstructor>;
        if $z1 == 0 goto label3;

        $s6 = r0.<sun.reflect.MethodAccessorGenerator: short targetClass>;
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_new(short)>($s6);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_dup()>();
        goto label5;

     label3:
        $r10 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class returnType>;
        $z2 = staticinvoke <sun.reflect.MethodAccessorGenerator: boolean isPrimitive(java.lang.Class)>($r10);
        if $z2 == 0 goto label4;

        $r11 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class returnType>;
        $s7 = virtualinvoke r0.<sun.reflect.MethodAccessorGenerator: short indexForPrimitiveType(java.lang.Class)>($r11);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_new(short)>($s7);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_dup()>();

     label4:
        $z3 = virtualinvoke r0.<sun.reflect.MethodAccessorGenerator: boolean isStatic()>();
        if $z3 != 0 goto label5;

        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_aload_1()>();
        $r12 = new sun.reflect.Label;
        specialinvoke $r12.<sun.reflect.Label: void <init>()>();
        r2 = $r12;
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_ifnonnull(sun.reflect.Label)>(r2);
        $s8 = r0.<sun.reflect.MethodAccessorGenerator: short nullPointerClass>;
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_new(short)>($s8);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_dup()>();
        $s9 = r0.<sun.reflect.MethodAccessorGenerator: short nullPointerCtorIdx>;
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($s9, 0, 0);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_athrow()>();
        virtualinvoke r2.<sun.reflect.Label: void bind()>();
        s0 = virtualinvoke r1.<sun.reflect.ClassFileAssembler: short getLength()>();
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_aload_1()>();
        $s10 = r0.<sun.reflect.MethodAccessorGenerator: short targetClass>;
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_checkcast(short)>($s10);

     label5:
        $r13 = new sun.reflect.Label;
        specialinvoke $r13.<sun.reflect.Label: void <init>()>();
        r14 = $r13;
        $r15 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;
        $i11 = lengthof $r15;
        if $i11 != 0 goto label8;

        $z4 = r0.<sun.reflect.MethodAccessorGenerator: boolean isConstructor>;
        if $z4 == 0 goto label6;

        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_aload_1()>();
        goto label7;

     label6:
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_aload_2()>();

     label7:
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_ifnull(sun.reflect.Label)>(r14);

     label8:
        $z5 = r0.<sun.reflect.MethodAccessorGenerator: boolean isConstructor>;
        if $z5 == 0 goto label9;

        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_aload_1()>();
        goto label10;

     label9:
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_aload_2()>();

     label10:
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_arraylength()>();
        $r16 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;
        $i12 = lengthof $r16;
        $s13 = (short) $i12;
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_sipush(short)>($s13);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_if_icmpeq(sun.reflect.Label)>(r14);
        $s14 = r0.<sun.reflect.MethodAccessorGenerator: short illegalArgumentClass>;
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_new(short)>($s14);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_dup()>();
        $s15 = r0.<sun.reflect.MethodAccessorGenerator: short illegalArgumentCtorIdx>;
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($s15, 0, 0);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_athrow()>();
        virtualinvoke r14.<sun.reflect.Label: void bind()>();
        s1 = r0.<sun.reflect.MethodAccessorGenerator: short nonPrimitiveParametersBaseIdx>;
        r3 = null;
        b2 = 1;
        i3 = 0;

     label11:
        $r17 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;
        $i16 = lengthof $r17;
        if i3 >= $i16 goto label28;

        $r18 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;
        r4 = $r18[i3];
        $i17 = virtualinvoke r0.<sun.reflect.MethodAccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>(r4);
        $b18 = (byte) $i17;
        $i19 = b2 + $b18;
        b2 = (byte) $i19;
        if r3 == null goto label12;

        virtualinvoke r3.<sun.reflect.Label: void bind()>();
        r3 = null;

     label12:
        $z6 = r0.<sun.reflect.MethodAccessorGenerator: boolean isConstructor>;
        if $z6 == 0 goto label13;

        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_aload_1()>();
        goto label14;

     label13:
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_aload_2()>();

     label14:
        $s20 = (short) i3;
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_sipush(short)>($s20);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_aaload()>();
        $z7 = staticinvoke <sun.reflect.MethodAccessorGenerator: boolean isPrimitive(java.lang.Class)>(r4);
        if $z7 == 0 goto label26;

        $z8 = r0.<sun.reflect.MethodAccessorGenerator: boolean isConstructor>;
        if $z8 == 0 goto label15;

        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_astore_2()>();
        goto label16;

     label15:
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_astore_3()>();

     label16:
        r5 = null;
        $r19 = new sun.reflect.Label;
        specialinvoke $r19.<sun.reflect.Label: void <init>()>();
        r3 = $r19;
        i4 = 0;

     label17:
        $r20 = <sun.reflect.MethodAccessorGenerator: java.lang.Class[] primitiveTypes>;
        $i21 = lengthof $r20;
        if i4 >= $i21 goto label24;

        $r21 = <sun.reflect.MethodAccessorGenerator: java.lang.Class[] primitiveTypes>;
        r6 = $r21[i4];
        $z9 = staticinvoke <sun.reflect.MethodAccessorGenerator: boolean canWidenTo(java.lang.Class,java.lang.Class)>(r6, r4);
        if $z9 == 0 goto label23;

        if r5 == null goto label18;

        virtualinvoke r5.<sun.reflect.Label: void bind()>();

     label18:
        $z10 = r0.<sun.reflect.MethodAccessorGenerator: boolean isConstructor>;
        if $z10 == 0 goto label19;

        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_aload_2()>();
        goto label20;

     label19:
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_aload_3()>();

     label20:
        $s22 = virtualinvoke r0.<sun.reflect.MethodAccessorGenerator: short indexForPrimitiveType(java.lang.Class)>(r6);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_instanceof(short)>($s22);
        $r22 = new sun.reflect.Label;
        specialinvoke $r22.<sun.reflect.Label: void <init>()>();
        r5 = $r22;
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_ifeq(sun.reflect.Label)>(r5);
        $z11 = r0.<sun.reflect.MethodAccessorGenerator: boolean isConstructor>;
        if $z11 == 0 goto label21;

        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_aload_2()>();
        goto label22;

     label21:
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_aload_3()>();

     label22:
        $s23 = virtualinvoke r0.<sun.reflect.MethodAccessorGenerator: short indexForPrimitiveType(java.lang.Class)>(r6);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_checkcast(short)>($s23);
        $s24 = virtualinvoke r0.<sun.reflect.MethodAccessorGenerator: short unboxingMethodForPrimitiveType(java.lang.Class)>(r6);
        $i25 = virtualinvoke r0.<sun.reflect.MethodAccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>(r6);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_invokevirtual(short,int,int)>($s24, 0, $i25);
        staticinvoke <sun.reflect.MethodAccessorGenerator: void emitWideningBytecodeForPrimitiveConversion(sun.reflect.ClassFileAssembler,java.lang.Class,java.lang.Class)>(r1, r6, r4);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_goto(sun.reflect.Label)>(r3);

     label23:
        i4 = i4 + 1;
        goto label17;

     label24:
        if r5 != null goto label25;

        $r23 = new java.lang.InternalError;
        specialinvoke $r23.<java.lang.InternalError: void <init>(java.lang.String)>("Must have found at least identity conversion");
        throw $r23;

     label25:
        virtualinvoke r5.<sun.reflect.Label: void bind()>();
        $s26 = r0.<sun.reflect.MethodAccessorGenerator: short illegalArgumentClass>;
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_new(short)>($s26);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_dup()>();
        $s27 = r0.<sun.reflect.MethodAccessorGenerator: short illegalArgumentCtorIdx>;
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($s27, 0, 0);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_athrow()>();
        goto label27;

     label26:
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_checkcast(short)>(s1);
        s1 = staticinvoke <sun.reflect.MethodAccessorGenerator: short add(short,short)>(s1, 2);

     label27:
        i3 = i3 + 1;
        goto label11;

     label28:
        if r3 == null goto label29;

        virtualinvoke r3.<sun.reflect.Label: void bind()>();

     label29:
        s28 = virtualinvoke r1.<sun.reflect.ClassFileAssembler: short getLength()>();
        $z12 = r0.<sun.reflect.MethodAccessorGenerator: boolean isConstructor>;
        if $z12 == 0 goto label30;

        $s29 = r0.<sun.reflect.MethodAccessorGenerator: short targetMethodRef>;
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($s29, b2, 0);
        goto label33;

     label30:
        $z13 = virtualinvoke r0.<sun.reflect.MethodAccessorGenerator: boolean isStatic()>();
        if $z13 == 0 goto label31;

        $s30 = r0.<sun.reflect.MethodAccessorGenerator: short targetMethodRef>;
        $r24 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class returnType>;
        $i31 = virtualinvoke r0.<sun.reflect.MethodAccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>($r24);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_invokestatic(short,int,int)>($s30, b2, $i31);
        goto label33;

     label31:
        $z14 = specialinvoke r0.<sun.reflect.MethodAccessorGenerator: boolean isInterface()>();
        if $z14 == 0 goto label32;

        $s32 = r0.<sun.reflect.MethodAccessorGenerator: short targetMethodRef>;
        $r25 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class returnType>;
        $i33 = virtualinvoke r0.<sun.reflect.MethodAccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>($r25);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_invokeinterface(short,int,byte,int)>($s32, b2, b2, $i33);
        goto label33;

     label32:
        $s34 = r0.<sun.reflect.MethodAccessorGenerator: short targetMethodRef>;
        $r26 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class returnType>;
        $i35 = virtualinvoke r0.<sun.reflect.MethodAccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>($r26);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_invokevirtual(short,int,int)>($s34, b2, $i35);

     label33:
        s36 = virtualinvoke r1.<sun.reflect.ClassFileAssembler: short getLength()>();
        $z15 = r0.<sun.reflect.MethodAccessorGenerator: boolean isConstructor>;
        if $z15 != 0 goto label35;

        $r27 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class returnType>;
        $z16 = staticinvoke <sun.reflect.MethodAccessorGenerator: boolean isPrimitive(java.lang.Class)>($r27);
        if $z16 == 0 goto label34;

        $r28 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class returnType>;
        $s37 = virtualinvoke r0.<sun.reflect.MethodAccessorGenerator: short ctorIndexForPrimitiveType(java.lang.Class)>($r28);
        $r29 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class returnType>;
        $i38 = virtualinvoke r0.<sun.reflect.MethodAccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>($r29);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($s37, $i38, 0);
        goto label35;

     label34:
        $r30 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class returnType>;
        $r31 = <java.lang.Void: java.lang.Class TYPE>;
        if $r30 != $r31 goto label35;

        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_aconst_null()>();

     label35:
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_areturn()>();
        s39 = virtualinvoke r1.<sun.reflect.ClassFileAssembler: short getLength()>();
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void setStack(int)>(1);
        $s40 = r0.<sun.reflect.MethodAccessorGenerator: short toStringIdx>;
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($s40, 0, 1);
        $s41 = r0.<sun.reflect.MethodAccessorGenerator: short illegalArgumentClass>;
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_new(short)>($s41);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_dup_x1()>();
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_swap()>();
        $s42 = r0.<sun.reflect.MethodAccessorGenerator: short illegalArgumentStringCtorIdx>;
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($s42, 1, 0);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_athrow()>();
        s43 = virtualinvoke r1.<sun.reflect.ClassFileAssembler: short getLength()>();
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void setStack(int)>(1);
        $s44 = r0.<sun.reflect.MethodAccessorGenerator: short invocationTargetClass>;
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_new(short)>($s44);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_dup_x1()>();
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_swap()>();
        $s45 = r0.<sun.reflect.MethodAccessorGenerator: short invocationTargetCtorIdx>;
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($s45, 1, 0);
        virtualinvoke r1.<sun.reflect.ClassFileAssembler: void opc_athrow()>();
        $r32 = new sun.reflect.ClassFileAssembler;
        specialinvoke $r32.<sun.reflect.ClassFileAssembler: void <init>()>();
        r33 = $r32;
        virtualinvoke r33.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        virtualinvoke r33.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s28);
        virtualinvoke r33.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s39);
        $s46 = r0.<sun.reflect.MethodAccessorGenerator: short classCastClass>;
        virtualinvoke r33.<sun.reflect.ClassFileAssembler: void emitShort(short)>($s46);
        virtualinvoke r33.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s0);
        virtualinvoke r33.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s28);
        virtualinvoke r33.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s39);
        $s47 = r0.<sun.reflect.MethodAccessorGenerator: short nullPointerClass>;
        virtualinvoke r33.<sun.reflect.ClassFileAssembler: void emitShort(short)>($s47);
        virtualinvoke r33.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s28);
        virtualinvoke r33.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s36);
        virtualinvoke r33.<sun.reflect.ClassFileAssembler: void emitShort(short)>(s43);
        $s48 = r0.<sun.reflect.MethodAccessorGenerator: short throwableClass>;
        virtualinvoke r33.<sun.reflect.ClassFileAssembler: void emitShort(short)>($s48);
        $s49 = r0.<sun.reflect.MethodAccessorGenerator: short invokeIdx>;
        $s50 = virtualinvoke r1.<sun.reflect.ClassFileAssembler: short getMaxLocals()>();
        $r34 = newarray (short)[1];
        $s51 = r0.<sun.reflect.MethodAccessorGenerator: short invocationTargetClass>;
        $r34[0] = $s51;
        virtualinvoke r0.<sun.reflect.MethodAccessorGenerator: void emitMethod(short,int,sun.reflect.ClassFileAssembler,sun.reflect.ClassFileAssembler,short[])>($s49, $s50, r1, r33, $r34);
        return;
    }

    private boolean usesPrimitiveTypes()
    {
        sun.reflect.MethodAccessorGenerator r0;
        int i0, $i1;
        java.lang.Class $r1, $r4;
        boolean $z0, $z1;
        java.lang.Class[] $r2, $r3;

        r0 := @this: sun.reflect.MethodAccessorGenerator;
        $r1 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class returnType>;
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isPrimitive()>();
        if $z0 == 0 goto label0;

        return 1;

     label0:
        i0 = 0;

     label1:
        $r2 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;
        $i1 = lengthof $r2;
        if i0 >= $i1 goto label3;

        $r3 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;
        $r4 = $r3[i0];
        $z1 = virtualinvoke $r4.<java.lang.Class: boolean isPrimitive()>();
        if $z1 == 0 goto label2;

        return 1;

     label2:
        i0 = i0 + 1;
        goto label1;

     label3:
        return 0;
    }

    private int numNonPrimitiveParameterTypes()
    {
        sun.reflect.MethodAccessorGenerator r0;
        int i0, i1, $i2;
        java.lang.Class[] $r1, $r2;
        java.lang.Class $r3;
        boolean $z0;

        r0 := @this: sun.reflect.MethodAccessorGenerator;
        i0 = 0;
        i1 = 0;

     label0:
        $r1 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;
        $i2 = lengthof $r1;
        if i1 >= $i2 goto label2;

        $r2 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;
        $r3 = $r2[i1];
        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isPrimitive()>();
        if $z0 != 0 goto label1;

        i0 = i0 + 1;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        return i0;
    }

    private boolean isInterface()
    {
        sun.reflect.MethodAccessorGenerator r0;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @this: sun.reflect.MethodAccessorGenerator;
        $r1 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class declaringClass>;
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isInterface()>();
        return $z0;
    }

    private java.lang.String buildInternalSignature()
    {
        sun.reflect.MethodAccessorGenerator r0;
        java.lang.StringBuffer $r1, r2;
        int i0, $i1;
        java.lang.Class[] $r4, $r5;
        java.lang.Class $r6, $r10;
        java.lang.String $r7, $r11, $r13;

        r0 := @this: sun.reflect.MethodAccessorGenerator;
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");
        i0 = 0;

     label0:
        $r4 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;
        $i1 = lengthof $r4;
        if i0 >= $i1 goto label1;

        $r5 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;
        $r6 = $r5[i0];
        $r7 = staticinvoke <sun.reflect.MethodAccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>($r6, 1);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        i0 = i0 + 1;
        goto label0;

     label1:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");
        $r10 = r0.<sun.reflect.MethodAccessorGenerator: java.lang.Class returnType>;
        $r11 = staticinvoke <sun.reflect.MethodAccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>($r10, 1);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);
        $r13 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r13;
    }

    private static synchronized java.lang.String generateName(boolean, boolean)
    {
        boolean z0, z1;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, i8;
        java.lang.StringBuilder $r0, $r1, $r2, $r4, $r5, $r6, $r8, $r9, $r10;
        java.lang.String $r3, $r7, $r11;

        z0 := @parameter0: boolean;
        z1 := @parameter1: boolean;
        if z0 == 0 goto label1;

        if z1 == 0 goto label0;

        $i1 = <sun.reflect.MethodAccessorGenerator: int serializationConstructorSymnum>;
        $i2 = $i1 + 1;
        <sun.reflect.MethodAccessorGenerator: int serializationConstructorSymnum> = $i2;
        i0 = $i2;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();
        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sun/reflect/GeneratedSerializationConstructorAccessor");
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r3;

     label0:
        $i3 = <sun.reflect.MethodAccessorGenerator: int constructorSymnum>;
        $i4 = $i3 + 1;
        <sun.reflect.MethodAccessorGenerator: int constructorSymnum> = $i4;
        i5 = $i4;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sun/reflect/GeneratedConstructorAccessor");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r7;

     label1:
        $i6 = <sun.reflect.MethodAccessorGenerator: int methodSymnum>;
        $i7 = $i6 + 1;
        <sun.reflect.MethodAccessorGenerator: int methodSymnum> = $i7;
        i8 = $i7;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sun/reflect/GeneratedMethodAccessor");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r11;
    }

    static void <clinit>()
    {
        <sun.reflect.MethodAccessorGenerator: int methodSymnum> = 0;
        <sun.reflect.MethodAccessorGenerator: int constructorSymnum> = 0;
        <sun.reflect.MethodAccessorGenerator: int serializationConstructorSymnum> = 0;
        return;
    }
}
