public class sun.security.x509.NameConstraintsExtension extends sun.security.x509.Extension implements sun.security.x509.CertAttrSet, java.lang.Cloneable
{
    public static final java.lang.String IDENT;
    public static final java.lang.String NAME;
    public static final java.lang.String PERMITTED_SUBTREES;
    public static final java.lang.String EXCLUDED_SUBTREES;
    private static final byte TAG_PERMITTED;
    private static final byte TAG_EXCLUDED;
    private sun.security.x509.GeneralSubtrees permitted;
    private sun.security.x509.GeneralSubtrees excluded;
    private boolean hasMin;
    private boolean hasMax;
    private boolean minMaxValid;

    private void calcMinMax() throws java.io.IOException
    {
        sun.security.x509.NameConstraintsExtension r0;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7;
        sun.security.x509.GeneralSubtree r1, r8;
        sun.security.x509.GeneralSubtrees $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: sun.security.x509.NameConstraintsExtension;
        r0.<sun.security.x509.NameConstraintsExtension: boolean hasMin> = 0;
        r0.<sun.security.x509.NameConstraintsExtension: boolean hasMax> = 0;
        $r2 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        if $r2 == null goto label3;

        i0 = 0;

     label0:
        $r3 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        $i1 = virtualinvoke $r3.<sun.security.x509.GeneralSubtrees: int size()>();
        if i0 >= $i1 goto label3;

        $r4 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        r1 = virtualinvoke $r4.<sun.security.x509.GeneralSubtrees: sun.security.x509.GeneralSubtree get(int)>(i0);
        $i2 = virtualinvoke r1.<sun.security.x509.GeneralSubtree: int getMinimum()>();
        if $i2 == 0 goto label1;

        r0.<sun.security.x509.NameConstraintsExtension: boolean hasMin> = 1;

     label1:
        $i3 = virtualinvoke r1.<sun.security.x509.GeneralSubtree: int getMaximum()>();
        if $i3 == -1 goto label2;

        r0.<sun.security.x509.NameConstraintsExtension: boolean hasMax> = 1;

     label2:
        i0 = i0 + 1;
        goto label0;

     label3:
        $r5 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        if $r5 == null goto label7;

        i4 = 0;

     label4:
        $r6 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        $i5 = virtualinvoke $r6.<sun.security.x509.GeneralSubtrees: int size()>();
        if i4 >= $i5 goto label7;

        $r7 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        r8 = virtualinvoke $r7.<sun.security.x509.GeneralSubtrees: sun.security.x509.GeneralSubtree get(int)>(i4);
        $i6 = virtualinvoke r8.<sun.security.x509.GeneralSubtree: int getMinimum()>();
        if $i6 == 0 goto label5;

        r0.<sun.security.x509.NameConstraintsExtension: boolean hasMin> = 1;

     label5:
        $i7 = virtualinvoke r8.<sun.security.x509.GeneralSubtree: int getMaximum()>();
        if $i7 == -1 goto label6;

        r0.<sun.security.x509.NameConstraintsExtension: boolean hasMax> = 1;

     label6:
        i4 = i4 + 1;
        goto label4;

     label7:
        r0.<sun.security.x509.NameConstraintsExtension: boolean minMaxValid> = 1;
        return;
    }

    private void encodeThis() throws java.io.IOException
    {
        sun.security.x509.NameConstraintsExtension r0;
        sun.security.util.DerOutputStream r1, r2, r3, $r6, $r7, $r9, $r12, r13;
        sun.security.x509.GeneralSubtrees $r4, $r5, $r8, $r10, $r11, $r14;
        byte $b0, $b1;
        byte[] $r15;

        r0 := @this: sun.security.x509.NameConstraintsExtension;
        r0.<sun.security.x509.NameConstraintsExtension: boolean minMaxValid> = 0;
        $r4 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        if $r4 != null goto label0;

        $r5 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        if $r5 != null goto label0;

        r0.<sun.security.x509.NameConstraintsExtension: byte[] extensionValue> = null;
        return;

     label0:
        $r6 = new sun.security.util.DerOutputStream;
        specialinvoke $r6.<sun.security.util.DerOutputStream: void <init>()>();
        r1 = $r6;
        $r7 = new sun.security.util.DerOutputStream;
        specialinvoke $r7.<sun.security.util.DerOutputStream: void <init>()>();
        r2 = $r7;
        $r8 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        if $r8 == null goto label1;

        $r9 = new sun.security.util.DerOutputStream;
        specialinvoke $r9.<sun.security.util.DerOutputStream: void <init>()>();
        r3 = $r9;
        $r10 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        virtualinvoke $r10.<sun.security.x509.GeneralSubtrees: void encode(sun.security.util.DerOutputStream)>(r3);
        $b0 = staticinvoke <sun.security.util.DerValue: byte createTag(byte,boolean,byte)>(-128, 1, 0);
        virtualinvoke r2.<sun.security.util.DerOutputStream: void writeImplicit(byte,sun.security.util.DerOutputStream)>($b0, r3);

     label1:
        $r11 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        if $r11 == null goto label2;

        $r12 = new sun.security.util.DerOutputStream;
        specialinvoke $r12.<sun.security.util.DerOutputStream: void <init>()>();
        r13 = $r12;
        $r14 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        virtualinvoke $r14.<sun.security.x509.GeneralSubtrees: void encode(sun.security.util.DerOutputStream)>(r13);
        $b1 = staticinvoke <sun.security.util.DerValue: byte createTag(byte,boolean,byte)>(-128, 1, 1);
        virtualinvoke r2.<sun.security.util.DerOutputStream: void writeImplicit(byte,sun.security.util.DerOutputStream)>($b1, r13);

     label2:
        virtualinvoke r1.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>(48, r2);
        $r15 = virtualinvoke r1.<sun.security.util.DerOutputStream: byte[] toByteArray()>();
        r0.<sun.security.x509.NameConstraintsExtension: byte[] extensionValue> = $r15;
        return;
    }

    public void <init>(sun.security.x509.GeneralSubtrees, sun.security.x509.GeneralSubtrees) throws java.io.IOException
    {
        sun.security.x509.NameConstraintsExtension r0;
        sun.security.x509.GeneralSubtrees r1, r2;
        sun.security.util.ObjectIdentifier $r3;

        r0 := @this: sun.security.x509.NameConstraintsExtension;
        r1 := @parameter0: sun.security.x509.GeneralSubtrees;
        r2 := @parameter1: sun.security.x509.GeneralSubtrees;
        specialinvoke r0.<sun.security.x509.Extension: void <init>()>();
        r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted> = null;
        r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded> = null;
        r0.<sun.security.x509.NameConstraintsExtension: boolean minMaxValid> = 0;
        r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted> = r1;
        r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded> = r2;
        $r3 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier NameConstraints_Id>;
        r0.<sun.security.x509.NameConstraintsExtension: sun.security.util.ObjectIdentifier extensionId> = $r3;
        r0.<sun.security.x509.NameConstraintsExtension: boolean critical> = 1;
        specialinvoke r0.<sun.security.x509.NameConstraintsExtension: void encodeThis()>();
        return;
    }

    public void <init>(java.lang.Boolean, java.lang.Object) throws java.io.IOException
    {
        sun.security.x509.NameConstraintsExtension r0;
        java.lang.Boolean r1;
        java.lang.Object r2;
        sun.security.util.DerValue r3, r4, $r8;
        sun.security.util.ObjectIdentifier $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        byte[] $r6, $r7, $r9;
        byte $b0;
        java.io.IOException $r10, $r15, $r18, $r20;
        sun.security.util.DerInputStream $r11, $r12, $r13;
        int $i1;
        sun.security.x509.GeneralSubtrees $r14, $r16, $r17, $r19;

        r0 := @this: sun.security.x509.NameConstraintsExtension;
        r1 := @parameter0: java.lang.Boolean;
        r2 := @parameter1: java.lang.Object;
        specialinvoke r0.<sun.security.x509.Extension: void <init>()>();
        r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted> = null;
        r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded> = null;
        r0.<sun.security.x509.NameConstraintsExtension: boolean minMaxValid> = 0;
        $r5 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier NameConstraints_Id>;
        r0.<sun.security.x509.NameConstraintsExtension: sun.security.util.ObjectIdentifier extensionId> = $r5;
        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();
        r0.<sun.security.x509.NameConstraintsExtension: boolean critical> = $z0;
        $r6 = (byte[]) r2;
        $r7 = (byte[]) $r6;
        r0.<sun.security.x509.NameConstraintsExtension: byte[] extensionValue> = $r7;
        $r8 = new sun.security.util.DerValue;
        $r9 = r0.<sun.security.x509.NameConstraintsExtension: byte[] extensionValue>;
        specialinvoke $r8.<sun.security.util.DerValue: void <init>(byte[])>($r9);
        r3 = $r8;
        $b0 = r3.<sun.security.util.DerValue: byte tag>;
        if $b0 == 48 goto label0;

        $r10 = new java.io.IOException;
        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Invalid encoding for NameConstraintsExtension.");
        throw $r10;

     label0:
        $r11 = r3.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        if $r11 != null goto label1;

        return;

     label1:
        $r12 = r3.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $i1 = virtualinvoke $r12.<sun.security.util.DerInputStream: int available()>();
        if $i1 == 0 goto label7;

        $r13 = r3.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        r4 = virtualinvoke $r13.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $z1 = virtualinvoke r4.<sun.security.util.DerValue: boolean isContextSpecific(byte)>(0);
        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r4.<sun.security.util.DerValue: boolean isConstructed()>();
        if $z2 == 0 goto label3;

        $r14 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        if $r14 == null goto label2;

        $r15 = new java.io.IOException;
        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>("Duplicate permitted GeneralSubtrees in NameConstraintsExtension.");
        throw $r15;

     label2:
        virtualinvoke r4.<sun.security.util.DerValue: void resetTag(byte)>(48);
        $r16 = new sun.security.x509.GeneralSubtrees;
        specialinvoke $r16.<sun.security.x509.GeneralSubtrees: void <init>(sun.security.util.DerValue)>(r4);
        r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted> = $r16;
        goto label6;

     label3:
        $z3 = virtualinvoke r4.<sun.security.util.DerValue: boolean isContextSpecific(byte)>(1);
        if $z3 == 0 goto label5;

        $z4 = virtualinvoke r4.<sun.security.util.DerValue: boolean isConstructed()>();
        if $z4 == 0 goto label5;

        $r17 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        if $r17 == null goto label4;

        $r18 = new java.io.IOException;
        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>("Duplicate excluded GeneralSubtrees in NameConstraintsExtension.");
        throw $r18;

     label4:
        virtualinvoke r4.<sun.security.util.DerValue: void resetTag(byte)>(48);
        $r19 = new sun.security.x509.GeneralSubtrees;
        specialinvoke $r19.<sun.security.x509.GeneralSubtrees: void <init>(sun.security.util.DerValue)>(r4);
        r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded> = $r19;
        goto label6;

     label5:
        $r20 = new java.io.IOException;
        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>("Invalid encoding of NameConstraintsExtension.");
        throw $r20;

     label6:
        goto label1;

     label7:
        r0.<sun.security.x509.NameConstraintsExtension: boolean minMaxValid> = 0;
        return;
    }

    public java.lang.String toString()
    {
        sun.security.x509.NameConstraintsExtension r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r8, $r11, $r12, $r15, $r16, $r19, $r20, $r21;
        java.lang.String $r2, $r6, $r10, $r14, $r18, $r22;
        sun.security.x509.GeneralSubtrees $r5, $r9, $r13, $r17;

        r0 := @this: sun.security.x509.NameConstraintsExtension;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = specialinvoke r0.<sun.security.x509.Extension: java.lang.String toString()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NameConstraints: [");
        $r5 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        if $r5 != null goto label0;

        $r6 = "";
        goto label1;

     label0:
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n    Permitted:");
        $r9 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        $r10 = virtualinvoke $r9.<sun.security.x509.GeneralSubtrees: java.lang.String toString()>();
        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        $r6 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r12 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r13 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        if $r13 != null goto label2;

        $r14 = "";
        goto label3;

     label2:
        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n    Excluded:");
        $r17 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        $r18 = virtualinvoke $r17.<sun.security.x509.GeneralSubtrees: java.lang.String toString()>();
        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
        $r14 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r20 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   ]\n");
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r22;
    }

    public void encode(java.io.OutputStream) throws java.io.IOException
    {
        sun.security.x509.NameConstraintsExtension r0;
        java.io.OutputStream r1;
        sun.security.util.DerOutputStream $r2, r3;
        byte[] $r4, $r6;
        sun.security.util.ObjectIdentifier $r5;

        r0 := @this: sun.security.x509.NameConstraintsExtension;
        r1 := @parameter0: java.io.OutputStream;
        $r2 = new sun.security.util.DerOutputStream;
        specialinvoke $r2.<sun.security.util.DerOutputStream: void <init>()>();
        r3 = $r2;
        $r4 = r0.<sun.security.x509.NameConstraintsExtension: byte[] extensionValue>;
        if $r4 != null goto label0;

        $r5 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier NameConstraints_Id>;
        r0.<sun.security.x509.NameConstraintsExtension: sun.security.util.ObjectIdentifier extensionId> = $r5;
        r0.<sun.security.x509.NameConstraintsExtension: boolean critical> = 1;
        specialinvoke r0.<sun.security.x509.NameConstraintsExtension: void encodeThis()>();

     label0:
        specialinvoke r0.<sun.security.x509.Extension: void encode(sun.security.util.DerOutputStream)>(r3);
        $r6 = virtualinvoke r3.<sun.security.util.DerOutputStream: byte[] toByteArray()>();
        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r6);
        return;
    }

    public void set(java.lang.String, java.lang.Object) throws java.io.IOException
    {
        sun.security.x509.NameConstraintsExtension r0;
        java.lang.String r1;
        java.lang.Object r2;
        boolean $z0, $z1, $z2, $z3;
        java.io.IOException $r3, $r5, $r7;
        sun.security.x509.GeneralSubtrees $r4, $r6;

        r0 := @this: sun.security.x509.NameConstraintsExtension;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object;
        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("permitted_subtrees");
        if $z0 == 0 goto label1;

        $z1 = r2 instanceof sun.security.x509.GeneralSubtrees;
        if $z1 != 0 goto label0;

        $r3 = new java.io.IOException;
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Attribute value should be of type GeneralSubtrees.");
        throw $r3;

     label0:
        $r4 = (sun.security.x509.GeneralSubtrees) r2;
        r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted> = $r4;
        goto label4;

     label1:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("excluded_subtrees");
        if $z2 == 0 goto label3;

        $z3 = r2 instanceof sun.security.x509.GeneralSubtrees;
        if $z3 != 0 goto label2;

        $r5 = new java.io.IOException;
        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Attribute value should be of type GeneralSubtrees.");
        throw $r5;

     label2:
        $r6 = (sun.security.x509.GeneralSubtrees) r2;
        r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded> = $r6;
        goto label4;

     label3:
        $r7 = new java.io.IOException;
        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Attribute name not recognized by CertAttrSet:NameConstraintsExtension.");
        throw $r7;

     label4:
        specialinvoke r0.<sun.security.x509.NameConstraintsExtension: void encodeThis()>();
        return;
    }

    public java.lang.Object get(java.lang.String) throws java.io.IOException
    {
        sun.security.x509.NameConstraintsExtension r0;
        java.lang.String r1;
        boolean $z0, $z1;
        sun.security.x509.GeneralSubtrees $r2, $r3;
        java.io.IOException $r4;

        r0 := @this: sun.security.x509.NameConstraintsExtension;
        r1 := @parameter0: java.lang.String;
        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("permitted_subtrees");
        if $z0 == 0 goto label0;

        $r2 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        return $r2;

     label0:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("excluded_subtrees");
        if $z1 == 0 goto label1;

        $r3 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        return $r3;

     label1:
        $r4 = new java.io.IOException;
        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Attribute name not recognized by CertAttrSet:NameConstraintsExtension.");
        throw $r4;
    }

    public void delete(java.lang.String) throws java.io.IOException
    {
        sun.security.x509.NameConstraintsExtension r0;
        java.lang.String r1;
        boolean $z0, $z1;
        java.io.IOException $r2;

        r0 := @this: sun.security.x509.NameConstraintsExtension;
        r1 := @parameter0: java.lang.String;
        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("permitted_subtrees");
        if $z0 == 0 goto label0;

        r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted> = null;
        goto label2;

     label0:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("excluded_subtrees");
        if $z1 == 0 goto label1;

        r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded> = null;
        goto label2;

     label1:
        $r2 = new java.io.IOException;
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Attribute name not recognized by CertAttrSet:NameConstraintsExtension.");
        throw $r2;

     label2:
        specialinvoke r0.<sun.security.x509.NameConstraintsExtension: void encodeThis()>();
        return;
    }

    public java.util.Enumeration getElements()
    {
        sun.security.x509.NameConstraintsExtension r0;
        sun.security.x509.AttributeNameEnumeration $r1, r2;
        java.util.Enumeration $r3;

        r0 := @this: sun.security.x509.NameConstraintsExtension;
        $r1 = new sun.security.x509.AttributeNameEnumeration;
        specialinvoke $r1.<sun.security.x509.AttributeNameEnumeration: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<sun.security.x509.AttributeNameEnumeration: void addElement(java.lang.Object)>("permitted_subtrees");
        virtualinvoke r2.<sun.security.x509.AttributeNameEnumeration: void addElement(java.lang.Object)>("excluded_subtrees");
        $r3 = virtualinvoke r2.<sun.security.x509.AttributeNameEnumeration: java.util.Enumeration elements()>();
        return $r3;
    }

    public java.lang.String getName()
    {
        sun.security.x509.NameConstraintsExtension r0;

        r0 := @this: sun.security.x509.NameConstraintsExtension;
        return "NameConstraints";
    }

    public void merge(sun.security.x509.NameConstraintsExtension) throws java.io.IOException
    {
        sun.security.x509.NameConstraintsExtension r0, r1;
        sun.security.x509.GeneralSubtrees r2, r3, $r5, $r8, $r9, $r11, $r14, $r15, r16, $r17, $r18, $r20, $r21, $r22, $r23;
        java.lang.Object $r4, $r7, $r10, $r13, $r19;

        r0 := @this: sun.security.x509.NameConstraintsExtension;
        r1 := @parameter0: sun.security.x509.NameConstraintsExtension;
        if r1 != null goto label0;

        return;

     label0:
        $r4 = virtualinvoke r1.<sun.security.x509.NameConstraintsExtension: java.lang.Object get(java.lang.String)>("excluded_subtrees");
        r2 = (sun.security.x509.GeneralSubtrees) $r4;
        $r5 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        if $r5 != null goto label3;

        if r2 == null goto label1;

        $r7 = virtualinvoke r2.<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>();
        $r8 = (sun.security.x509.GeneralSubtrees) $r7;
        goto label2;

     label1:
        $r8 = null;

     label2:
        r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded> = $r8;
        goto label4;

     label3:
        if r2 == null goto label4;

        $r9 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        virtualinvoke $r9.<sun.security.x509.GeneralSubtrees: void union(sun.security.x509.GeneralSubtrees)>(r2);

     label4:
        $r10 = virtualinvoke r1.<sun.security.x509.NameConstraintsExtension: java.lang.Object get(java.lang.String)>("permitted_subtrees");
        r3 = (sun.security.x509.GeneralSubtrees) $r10;
        $r11 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        if $r11 != null goto label7;

        if r3 == null goto label5;

        $r13 = virtualinvoke r3.<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>();
        $r14 = (sun.security.x509.GeneralSubtrees) $r13;
        goto label6;

     label5:
        $r14 = null;

     label6:
        r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted> = $r14;
        goto label9;

     label7:
        if r3 == null goto label9;

        $r15 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        r16 = virtualinvoke $r15.<sun.security.x509.GeneralSubtrees: sun.security.x509.GeneralSubtrees intersect(sun.security.x509.GeneralSubtrees)>(r3);
        if r16 == null goto label9;

        $r17 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        if $r17 == null goto label8;

        $r18 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        virtualinvoke $r18.<sun.security.x509.GeneralSubtrees: void union(sun.security.x509.GeneralSubtrees)>(r16);
        goto label9;

     label8:
        $r19 = virtualinvoke r16.<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>();
        $r20 = (sun.security.x509.GeneralSubtrees) $r19;
        r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded> = $r20;

     label9:
        $r21 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        if $r21 == null goto label10;

        $r22 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        $r23 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        virtualinvoke $r22.<sun.security.x509.GeneralSubtrees: void reduce(sun.security.x509.GeneralSubtrees)>($r23);

     label10:
        specialinvoke r0.<sun.security.x509.NameConstraintsExtension: void encodeThis()>();
        return;
    }

    public boolean verify(java.security.cert.X509Certificate) throws java.io.IOException
    {
        sun.security.x509.NameConstraintsExtension r0;
        java.security.cert.X509Certificate r1;
        javax.security.auth.x500.X500Principal r2;
        sun.security.x509.X500Name r3;
        sun.security.x509.GeneralNames r4, $r12;
        sun.security.x509.X509CertImpl r5;
        sun.security.x509.SubjectAlternativeNameExtension r6;
        java.io.IOException $r7, $r8, $r9, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Object $r11;
        java.security.cert.CertificateException $r13, r14;
        java.lang.StringBuilder $r16, $r17, $r19;
        java.lang.String $r18, $r20;
        int i0, $i1;
        sun.security.x509.GeneralName $r21;
        sun.security.x509.GeneralNameInterface r22;

        r0 := @this: sun.security.x509.NameConstraintsExtension;
        r1 := @parameter0: java.security.cert.X509Certificate;
        if r1 != null goto label0;

        $r7 = new java.io.IOException;
        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Certificate is null");
        throw $r7;

     label0:
        $z0 = r0.<sun.security.x509.NameConstraintsExtension: boolean minMaxValid>;
        if $z0 != 0 goto label1;

        specialinvoke r0.<sun.security.x509.NameConstraintsExtension: void calcMinMax()>();

     label1:
        $z1 = r0.<sun.security.x509.NameConstraintsExtension: boolean hasMin>;
        if $z1 == 0 goto label2;

        $r8 = new java.io.IOException;
        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Non-zero minimum BaseDistance in name constraints not supported");
        throw $r8;

     label2:
        $z2 = r0.<sun.security.x509.NameConstraintsExtension: boolean hasMax>;
        if $z2 == 0 goto label3;

        $r9 = new java.io.IOException;
        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Maximum BaseDistance in name constraints not supported");
        throw $r9;

     label3:
        r2 = virtualinvoke r1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();
        r3 = staticinvoke <sun.security.x509.X500Name: sun.security.x509.X500Name asX500Name(javax.security.auth.x500.X500Principal)>(r2);
        $z3 = virtualinvoke r3.<sun.security.x509.X500Name: boolean isEmpty()>();
        if $z3 != 0 goto label4;

        $z4 = virtualinvoke r0.<sun.security.x509.NameConstraintsExtension: boolean verify(sun.security.x509.GeneralNameInterface)>(r3);
        if $z4 != 0 goto label4;

        return 0;

     label4:
        r4 = null;

     label5:
        r5 = staticinvoke <sun.security.x509.X509CertImpl: sun.security.x509.X509CertImpl toImpl(java.security.cert.X509Certificate)>(r1);
        r6 = virtualinvoke r5.<sun.security.x509.X509CertImpl: sun.security.x509.SubjectAlternativeNameExtension getSubjectAlternativeNameExtension()>();
        if r6 == null goto label6;

        $r11 = virtualinvoke r6.<sun.security.x509.SubjectAlternativeNameExtension: java.lang.Object get(java.lang.String)>("subject_name");
        $r12 = (sun.security.x509.GeneralNames) $r11;
        r4 = (sun.security.x509.GeneralNames) $r12;

     label6:
        goto label8;

     label7:
        $r13 := @caughtexception;
        r14 = $r13;
        $r15 = new java.io.IOException;
        $r16 = new java.lang.StringBuilder;
        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to extract extensions from certificate: ");
        $r18 = virtualinvoke r14.<java.security.cert.CertificateException: java.lang.String getMessage()>();
        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r20);
        throw $r15;

     label8:
        if r4 != null goto label9;

        $z5 = virtualinvoke r0.<sun.security.x509.NameConstraintsExtension: boolean verifyRFC822SpecialCase(sun.security.x509.X500Name)>(r3);
        return $z5;

     label9:
        i0 = 0;

     label10:
        $i1 = virtualinvoke r4.<sun.security.x509.GeneralNames: int size()>();
        if i0 >= $i1 goto label12;

        $r21 = virtualinvoke r4.<sun.security.x509.GeneralNames: sun.security.x509.GeneralName get(int)>(i0);
        r22 = virtualinvoke $r21.<sun.security.x509.GeneralName: sun.security.x509.GeneralNameInterface getName()>();
        $z6 = virtualinvoke r0.<sun.security.x509.NameConstraintsExtension: boolean verify(sun.security.x509.GeneralNameInterface)>(r22);
        if $z6 != 0 goto label11;

        return 0;

     label11:
        i0 = i0 + 1;
        goto label10;

     label12:
        return 1;

        catch java.security.cert.CertificateException from label5 to label6 with label7;
    }

    public boolean verify(sun.security.x509.GeneralNameInterface) throws java.io.IOException
    {
        sun.security.x509.NameConstraintsExtension r0;
        sun.security.x509.GeneralNameInterface r1, r4, r5;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7;
        sun.security.x509.GeneralSubtree r2, r15;
        sun.security.x509.GeneralName r3, r16;
        java.io.IOException $r6;
        sun.security.x509.GeneralSubtrees $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        boolean z0;

        r0 := @this: sun.security.x509.NameConstraintsExtension;
        r1 := @parameter0: sun.security.x509.GeneralNameInterface;
        if r1 != null goto label0;

        $r6 = new java.io.IOException;
        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("name is null");
        throw $r6;

     label0:
        $r7 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        if $r7 == null goto label8;

        $r8 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        $i1 = virtualinvoke $r8.<sun.security.x509.GeneralSubtrees: int size()>();
        if $i1 <= 0 goto label8;

        i0 = 0;

     label1:
        $r9 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        $i2 = virtualinvoke $r9.<sun.security.x509.GeneralSubtrees: int size()>();
        if i0 >= $i2 goto label8;

        $r10 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        r2 = virtualinvoke $r10.<sun.security.x509.GeneralSubtrees: sun.security.x509.GeneralSubtree get(int)>(i0);
        if r2 != null goto label2;

        goto label7;

     label2:
        r3 = virtualinvoke r2.<sun.security.x509.GeneralSubtree: sun.security.x509.GeneralName getName()>();
        if r3 != null goto label3;

        goto label7;

     label3:
        r4 = virtualinvoke r3.<sun.security.x509.GeneralName: sun.security.x509.GeneralNameInterface getName()>();
        if r4 != null goto label4;

        goto label7;

     label4:
        $i3 = interfaceinvoke r4.<sun.security.x509.GeneralNameInterface: int constrains(sun.security.x509.GeneralNameInterface)>(r1);
        tableswitch($i3)
        {
            case -1: goto label5;
            case 0: goto label6;
            case 1: goto label6;
            case 2: goto label5;
            case 3: goto label5;
            default: goto label7;
        };

     label5:
        goto label7;

     label6:
        return 0;

     label7:
        i0 = i0 + 1;
        goto label1;

     label8:
        $r11 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        if $r11 == null goto label18;

        $r12 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        $i4 = virtualinvoke $r12.<sun.security.x509.GeneralSubtrees: int size()>();
        if $i4 <= 0 goto label18;

        z0 = 0;
        i5 = 0;

     label9:
        $r13 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        $i6 = virtualinvoke $r13.<sun.security.x509.GeneralSubtrees: int size()>();
        if i5 >= $i6 goto label17;

        $r14 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        r15 = virtualinvoke $r14.<sun.security.x509.GeneralSubtrees: sun.security.x509.GeneralSubtree get(int)>(i5);
        if r15 != null goto label10;

        goto label16;

     label10:
        r16 = virtualinvoke r15.<sun.security.x509.GeneralSubtree: sun.security.x509.GeneralName getName()>();
        if r16 != null goto label11;

        goto label16;

     label11:
        r5 = virtualinvoke r16.<sun.security.x509.GeneralName: sun.security.x509.GeneralNameInterface getName()>();
        if r5 != null goto label12;

        goto label16;

     label12:
        $i7 = interfaceinvoke r5.<sun.security.x509.GeneralNameInterface: int constrains(sun.security.x509.GeneralNameInterface)>(r1);
        tableswitch($i7)
        {
            case -1: goto label13;
            case 0: goto label15;
            case 1: goto label15;
            case 2: goto label14;
            case 3: goto label14;
            default: goto label16;
        };

     label13:
        goto label16;

     label14:
        z0 = 1;
        goto label16;

     label15:
        return 1;

     label16:
        i5 = i5 + 1;
        goto label9;

     label17:
        if z0 == 0 goto label18;

        return 0;

     label18:
        return 1;
    }

    public boolean verifyRFC822SpecialCase(sun.security.x509.X500Name) throws java.io.IOException
    {
        sun.security.x509.NameConstraintsExtension r0;
        sun.security.x509.X500Name r1;
        java.util.Iterator r2;
        sun.security.x509.AVA r3;
        sun.security.util.ObjectIdentifier r4, $r5;
        java.lang.String r6;
        sun.security.x509.RFC822Name r7, $r11;
        java.io.IOException r8, $r12;
        java.util.List $r9;
        boolean $z0, $z1, $z2;
        java.lang.Object $r10;

        r0 := @this: sun.security.x509.NameConstraintsExtension;
        r1 := @parameter0: sun.security.x509.X500Name;
        $r9 = virtualinvoke r1.<sun.security.x509.X500Name: java.util.List allAvas()>();
        r2 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label6;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (sun.security.x509.AVA) $r10;
        r4 = virtualinvoke r3.<sun.security.x509.AVA: sun.security.util.ObjectIdentifier getObjectIdentifier()>();
        $r5 = <sun.security.pkcs.PKCS9Attribute: sun.security.util.ObjectIdentifier EMAIL_ADDRESS_OID>;
        $z1 = virtualinvoke r4.<sun.security.util.ObjectIdentifier: boolean equals(sun.security.util.ObjectIdentifier)>($r5);
        if $z1 == 0 goto label5;

        r6 = virtualinvoke r3.<sun.security.x509.AVA: java.lang.String getValueString()>();
        if r6 == null goto label5;

     label1:
        $r11 = new sun.security.x509.RFC822Name;
        specialinvoke $r11.<sun.security.x509.RFC822Name: void <init>(java.lang.String)>(r6);
        r7 = $r11;

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;
        r8 = $r12;
        goto label0;

     label4:
        $z2 = virtualinvoke r0.<sun.security.x509.NameConstraintsExtension: boolean verify(sun.security.x509.GeneralNameInterface)>(r7);
        if $z2 != 0 goto label5;

        return 0;

     label5:
        goto label0;

     label6:
        return 1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.Object clone()
    {
        sun.security.x509.NameConstraintsExtension r0, r1;
        java.lang.Object $r2, $r5, $r9;
        sun.security.x509.GeneralSubtrees $r3, $r4, $r6, $r7, $r8, $r10;
        java.lang.CloneNotSupportedException $r12, r13;
        java.lang.RuntimeException $r14;

        r0 := @this: sun.security.x509.NameConstraintsExtension;

     label0:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        r1 = (sun.security.x509.NameConstraintsExtension) $r2;
        $r3 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        if $r3 == null goto label1;

        $r4 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted>;
        $r5 = virtualinvoke $r4.<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>();
        $r6 = (sun.security.x509.GeneralSubtrees) $r5;
        r1.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees permitted> = $r6;

     label1:
        $r7 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        if $r7 == null goto label2;

        $r8 = r0.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded>;
        $r9 = virtualinvoke $r8.<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>();
        $r10 = (sun.security.x509.GeneralSubtrees) $r9;
        r1.<sun.security.x509.NameConstraintsExtension: sun.security.x509.GeneralSubtrees excluded> = $r10;

     label2:
        return r1;

     label3:
        $r12 := @caughtexception;
        r13 = $r12;
        $r14 = new java.lang.RuntimeException;
        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>("CloneNotSupportedException while cloning NameConstraintsException. This should never happen.");
        throw $r14;

        catch java.lang.CloneNotSupportedException from label0 to label2 with label3;
    }
}
