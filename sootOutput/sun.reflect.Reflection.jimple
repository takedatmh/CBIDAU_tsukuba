public class sun.reflect.Reflection extends java.lang.Object
{
    private static volatile java.util.Map fieldFilterMap;
    private static volatile java.util.Map methodFilterMap;

    public void <init>()
    {
        sun.reflect.Reflection r0;

        r0 := @this: sun.reflect.Reflection;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static native java.lang.Class getCallerClass();

    public static java.lang.Class getCallerClass(int)
    {
        int i0, $i1;
        boolean $z0;
        java.lang.Class $r0;
        java.lang.UnsupportedOperationException $r1;

        i0 := @parameter0: int;
        $z0 = staticinvoke <sun.misc.VM: boolean allowGetCallerClass()>();
        if $z0 == 0 goto label0;

        $i1 = i0 + 1;
        $r0 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass0(int)>($i1);
        return $r0;

     label0:
        $r1 = new java.lang.UnsupportedOperationException;
        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This method has been disabled by a system property");
        throw $r1;
    }

    private static native java.lang.Class getCallerClass0(int);

    private static native int getClassAccessFlags(java.lang.Class);

    public static boolean quickCheckMemberAccess(java.lang.Class, int)
    {
        java.lang.Class r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;
        i0 := @parameter1: int;
        $i1 = staticinvoke <sun.reflect.Reflection: int getClassAccessFlags(java.lang.Class)>(r0);
        $i2 = $i1 & i0;
        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);
        return $z0;
    }

    public static void ensureMemberAccess(java.lang.Class, java.lang.Class, java.lang.Object, int) throws java.lang.IllegalAccessException
    {
        java.lang.Class r0, r1;
        java.lang.Object r2;
        int i0;
        java.lang.InternalError $r3;
        boolean $z0;
        java.lang.IllegalAccessException $r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15;
        java.lang.String $r7, $r10, $r13, $r16;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.Class;
        r2 := @parameter2: java.lang.Object;
        i0 := @parameter3: int;
        if r0 == null goto label0;

        if r1 != null goto label1;

     label0:
        $r3 = new java.lang.InternalError;
        specialinvoke $r3.<java.lang.InternalError: void <init>()>();
        throw $r3;

     label1:
        $z0 = staticinvoke <sun.reflect.Reflection: boolean verifyMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(r0, r1, r2, i0);
        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalAccessException;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");
        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not access a member of class ");
        $r10 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();
        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with modifiers \"");
        $r13 = staticinvoke <java.lang.reflect.Modifier: java.lang.String toString(int)>(i0);
        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalAccessException: void <init>(java.lang.String)>($r16);
        throw $r4;

     label2:
        return;
    }

    public static boolean verifyMemberAccess(java.lang.Class, java.lang.Class, java.lang.Object, int)
    {
        java.lang.Class r0, r1, r3, $r4;
        java.lang.Object r2;
        int i0, $i1;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, $z10;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.Class;
        r2 := @parameter2: java.lang.Object;
        i0 := @parameter3: int;
        z0 = 0;
        z1 = 0;
        if r0 != r1 goto label0;

        return 1;

     label0:
        $i1 = staticinvoke <sun.reflect.Reflection: int getClassAccessFlags(java.lang.Class)>(r1);
        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);
        if $z3 != 0 goto label1;

        z1 = staticinvoke <sun.reflect.Reflection: boolean isSameClassPackage(java.lang.Class,java.lang.Class)>(r0, r1);
        z0 = 1;
        if z1 != 0 goto label1;

        return 0;

     label1:
        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(i0);
        if $z4 == 0 goto label2;

        return 1;

     label2:
        z2 = 0;
        $z5 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>(i0);
        if $z5 == 0 goto label3;

        $z6 = staticinvoke <sun.reflect.Reflection: boolean isSubclassOf(java.lang.Class,java.lang.Class)>(r0, r1);
        if $z6 == 0 goto label3;

        z2 = 1;

     label3:
        if z2 != 0 goto label5;

        $z7 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>(i0);
        if $z7 != 0 goto label5;

        if z0 != 0 goto label4;

        z1 = staticinvoke <sun.reflect.Reflection: boolean isSameClassPackage(java.lang.Class,java.lang.Class)>(r0, r1);
        z0 = 1;

     label4:
        if z1 == 0 goto label5;

        z2 = 1;

     label5:
        if z2 != 0 goto label6;

        return 0;

     label6:
        $z8 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>(i0);
        if $z8 == 0 goto label10;

        if r2 != null goto label7;

        $r4 = r1;
        goto label8;

     label7:
        $r4 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

     label8:
        r3 = $r4;
        if r3 == r0 goto label10;

        if z0 != 0 goto label9;

        z1 = staticinvoke <sun.reflect.Reflection: boolean isSameClassPackage(java.lang.Class,java.lang.Class)>(r0, r1);
        z9 = 1;

     label9:
        if z1 != 0 goto label10;

        $z10 = staticinvoke <sun.reflect.Reflection: boolean isSubclassOf(java.lang.Class,java.lang.Class)>(r3, r0);
        if $z10 != 0 goto label10;

        return 0;

     label10:
        return 1;
    }

    private static boolean isSameClassPackage(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.lang.ClassLoader $r2, $r4;
        java.lang.String $r3, $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.Class;
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();
        $z0 = staticinvoke <sun.reflect.Reflection: boolean isSameClassPackage(java.lang.ClassLoader,java.lang.String,java.lang.ClassLoader,java.lang.String)>($r2, $r3, $r4, $r5);
        return $z0;
    }

    private static boolean isSameClassPackage(java.lang.ClassLoader, java.lang.String, java.lang.ClassLoader, java.lang.String)
    {
        java.lang.ClassLoader r0, r2;
        java.lang.String r1, r3, $r8, $r13;
        int i0, i1, i2, i3, i4, i5;
        java.lang.StringBuilder $r4, $r6, $r7, $r10, $r11, $r12;
        boolean $z0, $z1;
        char $c6, $c7, $c8, $c9, $c10, $c11;
        java.lang.InternalError $r5, $r9;

        r0 := @parameter0: java.lang.ClassLoader;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.ClassLoader;
        r3 := @parameter3: java.lang.String;
        if r0 == r2 goto label0;

        return 0;

     label0:
        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);
        i1 = virtualinvoke r3.<java.lang.String: int lastIndexOf(int)>(46);
        if i0 == -1 goto label1;

        if i1 != -1 goto label4;

     label1:
        if i0 != i1 goto label2;

        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        i2 = 0;
        i3 = 0;
        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);
        if $c6 != 91 goto label6;

     label5:
        i2 = i2 + 1;
        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);
        if $c7 == 91 goto label5;

        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);
        if $c8 == 76 goto label6;

        $r5 = new java.lang.InternalError;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal class name ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.InternalError: void <init>(java.lang.String)>($r8);
        throw $r5;

     label6:
        $c9 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i3);
        if $c9 != 91 goto label8;

     label7:
        i3 = i3 + 1;
        $c10 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i3);
        if $c10 == 91 goto label7;

        $c11 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i3);
        if $c11 == 76 goto label8;

        $r9 = new java.lang.InternalError;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal class name ");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.lang.InternalError: void <init>(java.lang.String)>($r13);
        throw $r9;

     label8:
        i4 = i0 - i2;
        i5 = i1 - i3;
        if i4 == i5 goto label9;

        return 0;

     label9:
        $z1 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(0, i2, r3, i3, i4);
        return $z1;
    }

    static boolean isSubclassOf(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.Class;

     label0:
        if r0 == null goto label2;

        if r0 != r1 goto label1;

        return 1;

     label1:
        r0 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();
        goto label0;

     label2:
        return 0;
    }

    public static synchronized transient void registerFieldsToFilter(java.lang.Class, java.lang.String[])
    {
        java.lang.Class r0;
        java.lang.String[] r1;
        java.util.Map $r2, $r3;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.String[];
        $r2 = <sun.reflect.Reflection: java.util.Map fieldFilterMap>;
        $r3 = staticinvoke <sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>($r2, r0, r1);
        <sun.reflect.Reflection: java.util.Map fieldFilterMap> = $r3;
        return;
    }

    public static synchronized transient void registerMethodsToFilter(java.lang.Class, java.lang.String[])
    {
        java.lang.Class r0;
        java.lang.String[] r1;
        java.util.Map $r2, $r3;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.String[];
        $r2 = <sun.reflect.Reflection: java.util.Map methodFilterMap>;
        $r3 = staticinvoke <sun.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.lang.String[])>($r2, r0, r1);
        <sun.reflect.Reflection: java.util.Map methodFilterMap> = $r3;
        return;
    }

    private static transient java.util.Map registerFilter(java.util.Map, java.lang.Class, java.lang.String[])
    {
        java.util.Map r0;
        java.lang.Class r1;
        java.lang.String[] r2;
        java.lang.StringBuilder $r3, $r6, $r7;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r8;
        java.util.HashMap $r9, r10;

        r0 := @parameter0: java.util.Map;
        r1 := @parameter1: java.lang.Class;
        r2 := @parameter2: java.lang.String[];
        $r4 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        if $r4 == null goto label0;

        $r5 = new java.lang.IllegalArgumentException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filter already registered: ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);
        throw $r5;

     label0:
        $r9 = new java.util.HashMap;
        specialinvoke $r9.<java.util.HashMap: void <init>(java.util.Map)>(r0);
        r10 = $r9;
        interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);
        return r10;
    }

    public static java.lang.reflect.Field[] filterFields(java.lang.Class, java.lang.reflect.Field[])
    {
        java.lang.Class r0;
        java.lang.reflect.Field[] r1, $r7, $r8;
        java.util.Map $r2, $r3;
        java.lang.Object $r4;
        java.lang.String[] $r5;
        java.lang.reflect.Member[] $r6;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.reflect.Field[];
        $r2 = <sun.reflect.Reflection: java.util.Map fieldFilterMap>;
        if $r2 != null goto label0;

        return r1;

     label0:
        $r3 = <sun.reflect.Reflection: java.util.Map fieldFilterMap>;
        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);
        $r5 = (java.lang.String[]) $r4;
        $r6 = staticinvoke <sun.reflect.Reflection: java.lang.reflect.Member[] filter(java.lang.reflect.Member[],java.lang.String[])>(r1, $r5);
        $r7 = (java.lang.reflect.Field[]) $r6;
        $r8 = (java.lang.reflect.Field[]) $r7;
        return $r8;
    }

    public static java.lang.reflect.Method[] filterMethods(java.lang.Class, java.lang.reflect.Method[])
    {
        java.lang.Class r0;
        java.lang.reflect.Method[] r1, $r7, $r8;
        java.util.Map $r2, $r3;
        java.lang.Object $r4;
        java.lang.String[] $r5;
        java.lang.reflect.Member[] $r6;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.reflect.Method[];
        $r2 = <sun.reflect.Reflection: java.util.Map methodFilterMap>;
        if $r2 != null goto label0;

        return r1;

     label0:
        $r3 = <sun.reflect.Reflection: java.util.Map methodFilterMap>;
        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);
        $r5 = (java.lang.String[]) $r4;
        $r6 = staticinvoke <sun.reflect.Reflection: java.lang.reflect.Member[] filter(java.lang.reflect.Member[],java.lang.String[])>(r1, $r5);
        $r7 = (java.lang.reflect.Method[]) $r6;
        $r8 = (java.lang.reflect.Method[]) $r7;
        return $r8;
    }

    private static java.lang.reflect.Member[] filter(java.lang.reflect.Member[], java.lang.String[])
    {
        java.lang.reflect.Member[] r0, r2, $r11, r12, r13;
        java.lang.String[] r1, r4, r15;
        int i0, i1, i2, i3, i4, i5, $i6, i7, i8, i9, i10, $i11;
        java.lang.reflect.Member r3, $r8, r14;
        boolean z0, z1;
        java.lang.String r5, r6, $r7, $r16;
        java.lang.Class $r9;
        java.lang.Object $r10;

        r0 := @parameter0: java.lang.reflect.Member[];
        r1 := @parameter1: java.lang.String[];
        if r1 == null goto label0;

        $i6 = lengthof r0;
        if $i6 != 0 goto label1;

     label0:
        return r0;

     label1:
        i0 = 0;
        r2 = r0;
        i1 = lengthof r2;
        i2 = 0;

     label2:
        if i2 >= i1 goto label7;

        r3 = r2[i2];
        z0 = 0;
        r4 = r1;
        i3 = lengthof r4;
        i4 = 0;

     label3:
        if i4 >= i3 goto label5;

        r5 = r4[i4];
        $r7 = interfaceinvoke r3.<java.lang.reflect.Member: java.lang.String getName()>();
        if $r7 != r5 goto label4;

        z0 = 1;
        goto label5;

     label4:
        i4 = i4 + 1;
        goto label3;

     label5:
        if z0 != 0 goto label6;

        i0 = i0 + 1;

     label6:
        i2 = i2 + 1;
        goto label2;

     label7:
        $r8 = r0[0];
        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();
        $r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r9, i0);
        $r11 = (java.lang.reflect.Member[]) $r10;
        r12 = (java.lang.reflect.Member[]) $r11;
        i7 = 0;
        r13 = r0;
        i8 = lengthof r13;
        i9 = 0;

     label8:
        if i9 >= i8 goto label13;

        r14 = r13[i9];
        z1 = 0;
        r15 = r1;
        i10 = lengthof r15;
        i5 = 0;

     label9:
        if i5 >= i10 goto label11;

        r6 = r15[i5];
        $r16 = interfaceinvoke r14.<java.lang.reflect.Member: java.lang.String getName()>();
        if $r16 != r6 goto label10;

        z1 = 1;
        goto label11;

     label10:
        i5 = i5 + 1;
        goto label9;

     label11:
        if z1 != 0 goto label12;

        $i11 = i7;
        i7 = i7 + 1;
        r12[$i11] = r14;

     label12:
        i9 = i9 + 1;
        goto label8;

     label13:
        return r12;
    }

    public static boolean isCallerSensitive(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.lang.ClassLoader r1;
        java.lang.Class $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.reflect.Method;
        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
        r1 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        if r1 == null goto label0;

        $z0 = staticinvoke <sun.reflect.Reflection: boolean isExtClassLoader(java.lang.ClassLoader)>(r1);
        if $z0 == 0 goto label1;

     label0:
        $z1 = virtualinvoke r0.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "sun/reflect/CallerSensitive");
        return $z1;

     label1:
        return 0;
    }

    private static boolean isExtClassLoader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0, r1, $r2;

        r0 := @parameter0: java.lang.ClassLoader;
        r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label0:
        if r1 == null goto label2;

        $r2 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();
        if $r2 != null goto label1;

        if r1 != r0 goto label1;

        return 1;

     label1:
        r1 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();
        goto label0;

     label2:
        return 0;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0, r1, $r6;
        java.lang.String[] $r2, $r4;

        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        r1 = $r0;
        $r2 = newarray (java.lang.String)[2];
        $r2[0] = "fieldFilterMap";
        $r2[1] = "methodFilterMap";
        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "sun/reflect/Reflection", $r2);
        $r4 = newarray (java.lang.String)[1];
        $r4[0] = "security";
        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "java/lang/System", $r4);
        <sun.reflect.Reflection: java.util.Map fieldFilterMap> = r1;
        $r6 = new java.util.HashMap;
        specialinvoke $r6.<java.util.HashMap: void <init>()>();
        <sun.reflect.Reflection: java.util.Map methodFilterMap> = $r6;
        return;
    }
}
