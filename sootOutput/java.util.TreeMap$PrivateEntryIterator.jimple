abstract class java.util.TreeMap$PrivateEntryIterator extends java.lang.Object implements java.util.Iterator
{
    java.util.TreeMap$Entry next;
    java.util.TreeMap$Entry lastReturned;
    int expectedModCount;
    final java.util.TreeMap this$0;

    void <init>(java.util.TreeMap, java.util.TreeMap$Entry)
    {
        java.util.TreeMap$PrivateEntryIterator r0;
        java.util.TreeMap r1;
        java.util.TreeMap$Entry r2;
        int $i0;

        r0 := @this: java.util.TreeMap$PrivateEntryIterator;
        r1 := @parameter0: java.util.TreeMap;
        r2 := @parameter1: java.util.TreeMap$Entry;
        r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $i0 = staticinvoke <java.util.TreeMap: int access$100(java.util.TreeMap)>(r1);
        r0.<java.util.TreeMap$PrivateEntryIterator: int expectedModCount> = $i0;
        r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry lastReturned> = null;
        r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry next> = r2;
        return;
    }

    public final boolean hasNext()
    {
        java.util.TreeMap$PrivateEntryIterator r0;
        java.util.TreeMap$Entry $r1;
        boolean $z0;

        r0 := @this: java.util.TreeMap$PrivateEntryIterator;
        $r1 = r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry next>;
        if $r1 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    final java.util.TreeMap$Entry nextEntry()
    {
        java.util.TreeMap$PrivateEntryIterator r0;
        java.util.TreeMap$Entry r1, $r5;
        java.util.NoSuchElementException $r2;
        java.util.TreeMap $r3;
        int $i0, $i1;
        java.util.ConcurrentModificationException $r4;

        r0 := @this: java.util.TreeMap$PrivateEntryIterator;
        r1 = r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry next>;
        if r1 != null goto label0;

        $r2 = new java.util.NoSuchElementException;
        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap this$0>;
        $i0 = staticinvoke <java.util.TreeMap: int access$100(java.util.TreeMap)>($r3);
        $i1 = r0.<java.util.TreeMap$PrivateEntryIterator: int expectedModCount>;
        if $i0 == $i1 goto label1;

        $r4 = new java.util.ConcurrentModificationException;
        specialinvoke $r4.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r4;

     label1:
        $r5 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry successor(java.util.TreeMap$Entry)>(r1);
        r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry next> = $r5;
        r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry lastReturned> = r1;
        return r1;
    }

    final java.util.TreeMap$Entry prevEntry()
    {
        java.util.TreeMap$PrivateEntryIterator r0;
        java.util.TreeMap$Entry r1, $r5;
        java.util.NoSuchElementException $r2;
        java.util.TreeMap $r3;
        int $i0, $i1;
        java.util.ConcurrentModificationException $r4;

        r0 := @this: java.util.TreeMap$PrivateEntryIterator;
        r1 = r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry next>;
        if r1 != null goto label0;

        $r2 = new java.util.NoSuchElementException;
        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap this$0>;
        $i0 = staticinvoke <java.util.TreeMap: int access$100(java.util.TreeMap)>($r3);
        $i1 = r0.<java.util.TreeMap$PrivateEntryIterator: int expectedModCount>;
        if $i0 == $i1 goto label1;

        $r4 = new java.util.ConcurrentModificationException;
        specialinvoke $r4.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r4;

     label1:
        $r5 = staticinvoke <java.util.TreeMap: java.util.TreeMap$Entry predecessor(java.util.TreeMap$Entry)>(r1);
        r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry next> = $r5;
        r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry lastReturned> = r1;
        return r1;
    }

    public void remove()
    {
        java.util.TreeMap$PrivateEntryIterator r0;
        java.util.TreeMap$Entry $r1, $r5, $r6, $r7, $r8, $r9, $r11;
        java.lang.IllegalStateException $r2;
        java.util.TreeMap $r3, $r10, $r12;
        int $i0, $i1, $i2;
        java.util.ConcurrentModificationException $r4;

        r0 := @this: java.util.TreeMap$PrivateEntryIterator;
        $r1 = r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry lastReturned>;
        if $r1 != null goto label0;

        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap this$0>;
        $i0 = staticinvoke <java.util.TreeMap: int access$100(java.util.TreeMap)>($r3);
        $i1 = r0.<java.util.TreeMap$PrivateEntryIterator: int expectedModCount>;
        if $i0 == $i1 goto label1;

        $r4 = new java.util.ConcurrentModificationException;
        specialinvoke $r4.<java.util.ConcurrentModificationException: void <init>()>();
        throw $r4;

     label1:
        $r5 = r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry lastReturned>;
        $r6 = $r5.<java.util.TreeMap$Entry: java.util.TreeMap$Entry left>;
        if $r6 == null goto label2;

        $r7 = r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry lastReturned>;
        $r8 = $r7.<java.util.TreeMap$Entry: java.util.TreeMap$Entry right>;
        if $r8 == null goto label2;

        $r9 = r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry lastReturned>;
        r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry next> = $r9;

     label2:
        $r10 = r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap this$0>;
        $r11 = r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry lastReturned>;
        staticinvoke <java.util.TreeMap: void access$000(java.util.TreeMap,java.util.TreeMap$Entry)>($r10, $r11);
        $r12 = r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap this$0>;
        $i2 = staticinvoke <java.util.TreeMap: int access$100(java.util.TreeMap)>($r12);
        r0.<java.util.TreeMap$PrivateEntryIterator: int expectedModCount> = $i2;
        r0.<java.util.TreeMap$PrivateEntryIterator: java.util.TreeMap$Entry lastReturned> = null;
        return;
    }
}
