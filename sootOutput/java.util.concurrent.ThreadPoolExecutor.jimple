public class java.util.concurrent.ThreadPoolExecutor extends java.util.concurrent.AbstractExecutorService
{
    private final java.util.concurrent.atomic.AtomicInteger ctl;
    private static final int COUNT_BITS;
    private static final int CAPACITY;
    private static final int RUNNING;
    private static final int SHUTDOWN;
    private static final int STOP;
    private static final int TIDYING;
    private static final int TERMINATED;
    private final java.util.concurrent.BlockingQueue workQueue;
    private final java.util.concurrent.locks.ReentrantLock mainLock;
    private final java.util.HashSet workers;
    private final java.util.concurrent.locks.Condition termination;
    private int largestPoolSize;
    private long completedTaskCount;
    private volatile java.util.concurrent.ThreadFactory threadFactory;
    private volatile java.util.concurrent.RejectedExecutionHandler handler;
    private volatile long keepAliveTime;
    private volatile boolean allowCoreThreadTimeOut;
    private volatile int corePoolSize;
    private volatile int maximumPoolSize;
    private static final java.util.concurrent.RejectedExecutionHandler defaultHandler;
    private static final java.lang.RuntimePermission shutdownPerm;
    private static final boolean ONLY_ONE;

    private static int runStateOf(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;
        $i1 = i0 & -536870912;
        return $i1;
    }

    private static int workerCountOf(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;
        $i1 = i0 & 536870911;
        return $i1;
    }

    private static int ctlOf(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i2 = i0 | i1;
        return $i2;
    }

    private static boolean runStateLessThan(int, int)
    {
        int i0, i1;
        boolean $z0;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i0 >= i1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private static boolean runStateAtLeast(int, int)
    {
        int i0, i1;
        boolean $z0;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i0 < i1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private static boolean isRunning(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;
        if i0 >= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private boolean compareAndIncrementWorkerCount(int)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0, $i1;
        java.util.concurrent.atomic.AtomicInteger $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        i0 := @parameter0: int;
        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        $i1 = i0 + 1;
        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i0, $i1);
        return $z0;
    }

    private boolean compareAndDecrementWorkerCount(int)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0, $i1;
        java.util.concurrent.atomic.AtomicInteger $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        i0 := @parameter0: int;
        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        $i1 = i0 - 1;
        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i0, $i1);
        return $z0;
    }

    private void decrementWorkerCount()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

     label0:
        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $z0 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean compareAndDecrementWorkerCount(int)>($i0);
        if $z0 == 0 goto label0;

        return;
    }

    private void advanceRunState(int)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0, i1, $i2, $i3;
        java.util.concurrent.atomic.AtomicInteger $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        i0 := @parameter0: int;

     label0:
        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        i1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $z0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>(i1, i0);
        if $z0 != 0 goto label2;

        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        $i2 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>(i1);
        $i3 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int ctlOf(int,int)>(i0, $i2);
        $z1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i1, $i3);
        if $z1 == 0 goto label1;

        goto label2;

     label1:
        goto label0;

     label2:
        return;
    }

    final void tryTerminate()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, r3, $r9, $r12;
        java.util.concurrent.atomic.AtomicInteger $r4, $r6, $r7, $r10;
        boolean $z0, $z1, $z2, $z3;
        java.util.concurrent.BlockingQueue $r5;
        java.util.concurrent.locks.Condition $r8, $r11;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

     label0:
        $r4 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        i0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $z0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean isRunning(int)>(i0);
        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>(i0, 1073741824);
        if $z1 != 0 goto label1;

        $i1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int runStateOf(int)>(i0);
        if $i1 != 0 goto label2;

        $r5 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;
        $z2 = interfaceinvoke $r5.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();
        if $z2 != 0 goto label2;

     label1:
        return;

     label2:
        $i2 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>(i0);
        if $i2 == 0 goto label3;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void interruptIdleWorkers(boolean)>(1);
        return;

     label3:
        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label4:
        $r6 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        $i3 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int ctlOf(int,int)>(1073741824, 0);
        $z3 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i0, $i3);
        if $z3 == 0 goto label11;

     label5:
        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void terminated()>();

     label6:
        $r7 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        $i4 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int ctlOf(int,int)>(1610612736, 0);
        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: void set(int)>($i4);
        $r8 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.Condition termination>;
        interfaceinvoke $r8.<java.util.concurrent.locks.Condition: void signalAll()>();
        goto label10;

     label7:
        $r9 := @caughtexception;

     label8:
        r2 = $r9;

     label9:
        $r10 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        $i5 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int ctlOf(int,int)>(1610612736, 0);
        virtualinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: void set(int)>($i5);
        $r11 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.Condition termination>;
        interfaceinvoke $r11.<java.util.concurrent.locks.Condition: void signalAll()>();
        throw r2;

     label10:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return;

     label11:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label15;

     label12:
        $r12 := @caughtexception;

     label13:
        r3 = $r12;

     label14:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

     label15:
        goto label0;

        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
        catch java.lang.Throwable from label4 to label10 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private void checkShutdownAccess()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.SecurityManager r1;
        java.lang.RuntimePermission $r2;
        java.util.concurrent.locks.ReentrantLock r3;
        java.util.Iterator r4;
        java.util.concurrent.ThreadPoolExecutor$Worker r5;
        java.lang.Throwable r6, $r10;
        java.util.HashSet $r7;
        boolean $z0;
        java.lang.Object $r8;
        java.lang.Thread $r9;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label6;

        $r2 = <java.util.concurrent.ThreadPoolExecutor: java.lang.RuntimePermission shutdownPerm>;
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);
        r3 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        $r7 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;
        r4 = virtualinvoke $r7.<java.util.HashSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.util.concurrent.ThreadPoolExecutor$Worker) $r8;
        $r9 = r5.<java.util.concurrent.ThreadPoolExecutor$Worker: java.lang.Thread thread>;
        virtualinvoke r1.<java.lang.SecurityManager: void checkAccess(java.lang.Thread)>($r9);
        goto label1;

     label2:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label6;

     label3:
        $r10 := @caughtexception;

     label4:
        r6 = $r10;

     label5:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r6;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void interruptWorkers()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.Iterator r2;
        java.util.concurrent.ThreadPoolExecutor$Worker r3;
        java.lang.Throwable r4, $r7;
        java.util.HashSet $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        $r5 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;
        r2 = virtualinvoke $r5.<java.util.HashSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.concurrent.ThreadPoolExecutor$Worker) $r6;
        virtualinvoke r3.<java.util.concurrent.ThreadPoolExecutor$Worker: void interruptIfStarted()>();
        goto label1;

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label6;

     label3:
        $r7 := @caughtexception;

     label4:
        r4 = $r7;

     label5:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void interruptIdleWorkers(boolean)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        boolean z0, $z1, $z2, $z3;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.Iterator r2;
        java.util.concurrent.ThreadPoolExecutor$Worker r3;
        java.lang.Thread r4;
        java.lang.SecurityException r5, $r10;
        java.lang.Throwable r6, r7, $r11, $r12;
        java.util.HashSet $r8;
        java.lang.Object $r9;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        z0 := @parameter0: boolean;
        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        $r8 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;
        r2 = virtualinvoke $r8.<java.util.HashSet: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label12;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.concurrent.ThreadPoolExecutor$Worker) $r9;
        r4 = r3.<java.util.concurrent.ThreadPoolExecutor$Worker: java.lang.Thread thread>;
        $z2 = virtualinvoke r4.<java.lang.Thread: boolean isInterrupted()>();
        if $z2 != 0 goto label10;

        $z3 = virtualinvoke r3.<java.util.concurrent.ThreadPoolExecutor$Worker: boolean tryLock()>();
        if $z3 == 0 goto label10;

     label2:
        virtualinvoke r4.<java.lang.Thread: void interrupt()>();

     label3:
        virtualinvoke r3.<java.util.concurrent.ThreadPoolExecutor$Worker: void unlock()>();
        goto label10;

     label4:
        $r10 := @caughtexception;

     label5:
        r5 = $r10;

     label6:
        virtualinvoke r3.<java.util.concurrent.ThreadPoolExecutor$Worker: void unlock()>();
        goto label10;

     label7:
        $r11 := @caughtexception;

     label8:
        r6 = $r11;

     label9:
        virtualinvoke r3.<java.util.concurrent.ThreadPoolExecutor$Worker: void unlock()>();
        throw r6;

     label10:
        if z0 == 0 goto label11;

        goto label12;

     label11:
        goto label1;

     label12:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label16;

     label13:
        $r12 := @caughtexception;

     label14:
        r7 = $r12;

     label15:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r7;

     label16:
        return;

        catch java.lang.SecurityException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
        catch java.lang.Throwable from label0 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private void interruptIdleWorkers()
    {
        java.util.concurrent.ThreadPoolExecutor r0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void interruptIdleWorkers(boolean)>(0);
        return;
    }

    final void reject(java.lang.Runnable)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.Runnable r1;
        java.util.concurrent.RejectedExecutionHandler $r2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 := @parameter0: java.lang.Runnable;
        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler handler>;
        interfaceinvoke $r2.<java.util.concurrent.RejectedExecutionHandler: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>(r1, r0);
        return;
    }

    void onShutdown()
    {
        java.util.concurrent.ThreadPoolExecutor r0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        return;
    }

    final boolean isRunningOrShutdown(boolean)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        boolean z0, $z1;
        int i0, $i1;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        z0 := @parameter0: boolean;
        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        $i1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        i0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int runStateOf(int)>($i1);
        if i0 == -536870912 goto label0;

        if i0 != 0 goto label1;

        if z0 == 0 goto label1;

     label0:
        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private java.util.List drainQueue()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.BlockingQueue r1;
        java.util.ArrayList r2, $r5;
        java.lang.Runnable[] r3, $r6;
        int i0, i1;
        java.lang.Runnable r4;
        boolean $z0, $z1;
        java.lang.Object[] $r7;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;
        $r5 = new java.util.ArrayList;
        specialinvoke $r5.<java.util.ArrayList: void <init>()>();
        r2 = $r5;
        interfaceinvoke r1.<java.util.concurrent.BlockingQueue: int drainTo(java.util.Collection)>(r2);
        $z0 = interfaceinvoke r1.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();
        if $z0 != 0 goto label2;

        $r6 = newarray (java.lang.Runnable)[0];
        $r7 = interfaceinvoke r1.<java.util.concurrent.BlockingQueue: java.lang.Object[] toArray(java.lang.Object[])>($r6);
        r3 = (java.lang.Runnable[]) $r7;
        i0 = lengthof r3;
        i1 = 0;

     label0:
        if i1 >= i0 goto label2;

        r4 = r3[i1];
        $z1 = interfaceinvoke r1.<java.util.concurrent.BlockingQueue: boolean remove(java.lang.Object)>(r4);
        if $z1 == 0 goto label1;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4);

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        return r2;
    }

    private boolean addWorker(java.lang.Runnable, boolean)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.Runnable r1;
        boolean z0, $z1, $z2, z3, z4, $z5;
        int i0, i1, i2, i3, i4, i5, $i7, $i8, $i9;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Thread r3;
        java.lang.Throwable r4, r5, $r15, $r16;
        java.util.concurrent.atomic.AtomicInteger $r6, $r8, $r11;
        java.util.concurrent.BlockingQueue $r7;
        java.util.concurrent.ThreadPoolExecutor$Worker r9, $r10;
        java.lang.IllegalThreadStateException $r12;
        java.util.HashSet $r13, $r14;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 := @parameter0: java.lang.Runnable;
        z0 := @parameter1: boolean;

     label0:
        $r6 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        i0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        i1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int runStateOf(int)>(i0);
        if i1 < 0 goto label2;

        if i1 != 0 goto label1;

        if r1 != null goto label1;

        $r7 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;
        $z1 = interfaceinvoke $r7.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();
        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        i2 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>(i0);
        if i2 >= 536870911 goto label5;

        if z0 == 0 goto label3;

        $i7 = r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;
        goto label4;

     label3:
        $i7 = r0.<java.util.concurrent.ThreadPoolExecutor: int maximumPoolSize>;

     label4:
        if i2 < $i7 goto label6;

     label5:
        return 0;

     label6:
        $z2 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean compareAndIncrementWorkerCount(int)>(i0);
        if $z2 == 0 goto label7;

        goto label9;

     label7:
        $r8 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        i0 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $i8 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int runStateOf(int)>(i0);
        if $i8 == i1 goto label8;

        goto label0;

     label8:
        goto label2;

     label9:
        z3 = 0;
        z4 = 0;
        r9 = null;

     label10:
        r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;
        $r10 = new java.util.concurrent.ThreadPoolExecutor$Worker;
        specialinvoke $r10.<java.util.concurrent.ThreadPoolExecutor$Worker: void <init>(java.util.concurrent.ThreadPoolExecutor,java.lang.Runnable)>(r0, r1);
        r9 = $r10;
        r3 = r9.<java.util.concurrent.ThreadPoolExecutor$Worker: java.lang.Thread thread>;
        if r3 == null goto label20;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label11:
        $r11 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        i3 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        i4 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int runStateOf(int)>(i3);
        if i4 < 0 goto label12;

        if i4 != 0 goto label15;

        if r1 != null goto label15;

     label12:
        $z5 = virtualinvoke r3.<java.lang.Thread: boolean isAlive()>();
        if $z5 == 0 goto label13;

        $r12 = new java.lang.IllegalThreadStateException;
        specialinvoke $r12.<java.lang.IllegalThreadStateException: void <init>()>();
        throw $r12;

     label13:
        $r13 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;
        virtualinvoke $r13.<java.util.HashSet: boolean add(java.lang.Object)>(r9);
        $r14 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;
        i5 = virtualinvoke $r14.<java.util.HashSet: int size()>();
        $i9 = r0.<java.util.concurrent.ThreadPoolExecutor: int largestPoolSize>;
        if i5 <= $i9 goto label14;

        r0.<java.util.concurrent.ThreadPoolExecutor: int largestPoolSize> = i5;

     label14:
        z4 = 1;

     label15:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label19;

     label16:
        $r15 := @caughtexception;

     label17:
        r4 = $r15;

     label18:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

     label19:
        if z4 == 0 goto label20;

        virtualinvoke r3.<java.lang.Thread: void start()>();
        z3 = 1;

     label20:
        if z3 != 0 goto label25;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void addWorkerFailed(java.util.concurrent.ThreadPoolExecutor$Worker)>(r9);
        goto label25;

     label21:
        $r16 := @caughtexception;

     label22:
        r5 = $r16;

     label23:
        if z3 != 0 goto label24;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void addWorkerFailed(java.util.concurrent.ThreadPoolExecutor$Worker)>(r9);

     label24:
        throw r5;

     label25:
        return z3;

        catch java.lang.Throwable from label11 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label10 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    private void addWorkerFailed(java.util.concurrent.ThreadPoolExecutor$Worker)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.ThreadPoolExecutor$Worker r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r5;
        java.util.HashSet $r4;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 := @parameter0: java.util.concurrent.ThreadPoolExecutor$Worker;
        r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        if r1 == null goto label1;

        $r4 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;
        virtualinvoke $r4.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

     label1:
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void decrementWorkerCount()>();
        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void tryTerminate()>();

     label2:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        r3 = $r5;

     label5:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void processWorkerExit(java.util.concurrent.ThreadPoolExecutor$Worker, boolean)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.ThreadPoolExecutor$Worker r1;
        boolean z0, $z2, $z3, $z4;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r6;
        int i0, i4, $i5, $i6;
        long $l1, $l2, $l3;
        java.util.HashSet $r5;
        java.util.concurrent.atomic.AtomicInteger $r7;
        java.util.concurrent.BlockingQueue $r8;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 := @parameter0: java.util.concurrent.ThreadPoolExecutor$Worker;
        z0 := @parameter1: boolean;
        if z0 == 0 goto label0;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void decrementWorkerCount()>();

     label0:
        r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $l1 = r0.<java.util.concurrent.ThreadPoolExecutor: long completedTaskCount>;
        $l2 = r1.<java.util.concurrent.ThreadPoolExecutor$Worker: long completedTasks>;
        $l3 = $l1 + $l2;
        r0.<java.util.concurrent.ThreadPoolExecutor: long completedTaskCount> = $l3;
        $r5 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;
        virtualinvoke $r5.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

     label2:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label6;

     label3:
        $r6 := @caughtexception;

     label4:
        r3 = $r6;

     label5:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

     label6:
        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void tryTerminate()>();
        $r7 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        i4 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $z2 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateLessThan(int,int)>(i4, 536870912);
        if $z2 == 0 goto label11;

        if z0 != 0 goto label10;

        $z3 = r0.<java.util.concurrent.ThreadPoolExecutor: boolean allowCoreThreadTimeOut>;
        if $z3 == 0 goto label7;

        $i5 = 0;
        goto label8;

     label7:
        $i5 = r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;

     label8:
        i0 = $i5;
        if i0 != 0 goto label9;

        $r8 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;
        $z4 = interfaceinvoke $r8.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();
        if $z4 != 0 goto label9;

        i0 = 1;

     label9:
        $i6 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>(i4);
        if $i6 < i0 goto label10;

        return;

     label10:
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(null, 0);

     label11:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private java.lang.Runnable getTask()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        int i0, i1, i2, $i3, $i4, $i5;
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.atomic.AtomicInteger $r2, $r4;
        java.util.concurrent.BlockingQueue $r3, $r5, $r8;
        long $l6;
        java.lang.Object $r6, $r9;
        java.lang.Runnable $r7, r10;
        java.lang.InterruptedException $r12, r13;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        z0 = 0;

     label0:
        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        i1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int runStateOf(int)>(i0);
        if i1 < 0 goto label2;

        if i1 >= 536870912 goto label1;

        $r3 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;
        $z2 = interfaceinvoke $r3.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();
        if $z2 == 0 goto label2;

     label1:
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void decrementWorkerCount()>();
        return null;

     label2:
        i2 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>(i0);
        $z3 = r0.<java.util.concurrent.ThreadPoolExecutor: boolean allowCoreThreadTimeOut>;
        if $z3 != 0 goto label3;

        $i3 = r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;
        if i2 <= $i3 goto label4;

     label3:
        $z4 = 1;
        goto label5;

     label4:
        $z4 = 0;

     label5:
        z1 = $z4;
        $i4 = r0.<java.util.concurrent.ThreadPoolExecutor: int maximumPoolSize>;
        if i2 > $i4 goto label6;

        if z0 == 0 goto label9;

        if z1 != 0 goto label6;

        goto label9;

     label6:
        $z5 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean compareAndDecrementWorkerCount(int)>(i0);
        if $z5 == 0 goto label7;

        return null;

     label7:
        $r4 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        i0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $i5 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int runStateOf(int)>(i0);
        if $i5 == i1 goto label8;

        goto label0;

     label8:
        goto label2;

     label9:
        if z1 == 0 goto label10;

        $r5 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;
        $l6 = r0.<java.util.concurrent.ThreadPoolExecutor: long keepAliveTime>;
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
        $r6 = interfaceinvoke $r5.<java.util.concurrent.BlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>($l6, $r1);
        $r7 = (java.lang.Runnable) $r6;
        goto label11;

     label10:
        $r8 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;
        $r9 = interfaceinvoke $r8.<java.util.concurrent.BlockingQueue: java.lang.Object take()>();
        $r7 = (java.lang.Runnable) $r9;

     label11:
        r10 = $r7;
        if r10 == null goto label13;

     label12:
        return r10;

     label13:
        z0 = 1;

     label14:
        goto label16;

     label15:
        $r12 := @caughtexception;
        r13 = $r12;
        z0 = 0;

     label16:
        goto label0;

        catch java.lang.InterruptedException from label9 to label12 with label15;
        catch java.lang.InterruptedException from label13 to label14 with label15;
    }

    final void runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.ThreadPoolExecutor$Worker r1;
        java.lang.Thread r2;
        java.lang.Runnable r3, $r9;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.Throwable r4, r6, r7, r8, $r15, r16, $r18, $r20, $r22;
        java.lang.RuntimeException r5, $r12;
        java.util.concurrent.atomic.AtomicInteger $r10, $r11;
        int $i0, $i1;
        java.lang.Error $r13, r14, $r17;
        long $l2, $l3, $l4, $l5;
        null_type n0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 := @parameter0: java.util.concurrent.ThreadPoolExecutor$Worker;
        r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r3 = r1.<java.util.concurrent.ThreadPoolExecutor$Worker: java.lang.Runnable firstTask>;
        r1.<java.util.concurrent.ThreadPoolExecutor$Worker: java.lang.Runnable firstTask> = null;
        virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor$Worker: void unlock()>();
        z0 = 1;

     label0:
        if r3 != null goto label1;

        $r9 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: java.lang.Runnable getTask()>();
        r3 = $r9;
        if $r9 == null goto label17;

     label1:
        virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor$Worker: void lock()>();
        $r10 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        $i0 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $z1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>($i0, 536870912);
        if $z1 != 0 goto label2;

        $z2 = staticinvoke <java.lang.Thread: boolean interrupted()>();
        if $z2 == 0 goto label3;

        $r11 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        $i1 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $z3 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>($i1, 536870912);
        if $z3 == 0 goto label3;

     label2:
        $z4 = virtualinvoke r2.<java.lang.Thread: boolean isInterrupted()>();
        if $z4 != 0 goto label3;

        virtualinvoke r2.<java.lang.Thread: void interrupt()>();

     label3:
        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void beforeExecute(java.lang.Thread,java.lang.Runnable)>(r2, r3);
        r4 = null;

     label4:
        interfaceinvoke r3.<java.lang.Runnable: void run()>();

     label5:
        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>(r3, r4);
        goto label12;

     label6:
        $r12 := @caughtexception;

     label7:
        r5 = $r12;
        r4 = r5;
        throw r5;

     label8:
        $r13 := @caughtexception;
        r14 = $r13;
        r4 = r14;
        throw r14;

     label9:
        $r15 := @caughtexception;
        r16 = $r15;
        r4 = r16;
        $r17 = new java.lang.Error;
        specialinvoke $r17.<java.lang.Error: void <init>(java.lang.Throwable)>(r16);
        throw $r17;

     label10:
        $r18 := @caughtexception;
        r6 = $r18;

     label11:
        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>(r3, r4);
        throw r6;

     label12:
        r3 = null;
        $l2 = r1.<java.util.concurrent.ThreadPoolExecutor$Worker: long completedTasks>;
        $l3 = $l2 + 1L;
        r1.<java.util.concurrent.ThreadPoolExecutor$Worker: long completedTasks> = $l3;
        virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor$Worker: void unlock()>();
        goto label16;

     label13:
        $r20 := @caughtexception;

     label14:
        r7 = $r20;

     label15:
        n0 = null;
        $l4 = r1.<java.util.concurrent.ThreadPoolExecutor$Worker: long completedTasks>;
        $l5 = $l4 + 1L;
        r1.<java.util.concurrent.ThreadPoolExecutor$Worker: long completedTasks> = $l5;
        virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor$Worker: void unlock()>();
        throw r7;

     label16:
        goto label0;

     label17:
        z0 = 0;

     label18:
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void processWorkerExit(java.util.concurrent.ThreadPoolExecutor$Worker,boolean)>(r1, z0);
        goto label22;

     label19:
        $r22 := @caughtexception;

     label20:
        r8 = $r22;

     label21:
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void processWorkerExit(java.util.concurrent.ThreadPoolExecutor$Worker,boolean)>(r1, z0);
        throw r8;

     label22:
        return;

        catch java.lang.RuntimeException from label4 to label5 with label6;
        catch java.lang.Error from label4 to label5 with label8;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label4 to label5 with label10;
        catch java.lang.Throwable from label7 to label11 with label10;
        catch java.lang.Throwable from label3 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label0 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0, i1;
        long l2;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.BlockingQueue r2;
        java.util.concurrent.ThreadFactory $r3;
        java.util.concurrent.RejectedExecutionHandler $r4;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        l2 := @parameter2: long;
        r1 := @parameter3: java.util.concurrent.TimeUnit;
        r2 := @parameter4: java.util.concurrent.BlockingQueue;
        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();
        $r4 = <java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler defaultHandler>;
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(i0, i1, l2, r1, r2, $r3, $r4);
        return;
    }

    public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0, i1;
        long l2;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.BlockingQueue r2;
        java.util.concurrent.ThreadFactory r3;
        java.util.concurrent.RejectedExecutionHandler $r4;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        l2 := @parameter2: long;
        r1 := @parameter3: java.util.concurrent.TimeUnit;
        r2 := @parameter4: java.util.concurrent.BlockingQueue;
        r3 := @parameter5: java.util.concurrent.ThreadFactory;
        $r4 = <java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler defaultHandler>;
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(i0, i1, l2, r1, r2, r3, $r4);
        return;
    }

    public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.RejectedExecutionHandler)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0, i1;
        long l2;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.BlockingQueue r2;
        java.util.concurrent.RejectedExecutionHandler r3;
        java.util.concurrent.ThreadFactory $r4;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        l2 := @parameter2: long;
        r1 := @parameter3: java.util.concurrent.TimeUnit;
        r2 := @parameter4: java.util.concurrent.BlockingQueue;
        r3 := @parameter5: java.util.concurrent.RejectedExecutionHandler;
        $r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(i0, i1, l2, r1, r2, $r4, r3);
        return;
    }

    public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0, i1, $i3;
        long l2, $l5;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.BlockingQueue r2;
        java.util.concurrent.ThreadFactory r3;
        java.util.concurrent.RejectedExecutionHandler r4;
        java.util.concurrent.atomic.AtomicInteger $r5;
        java.util.concurrent.locks.ReentrantLock $r6, $r8;
        java.util.HashSet $r7;
        java.util.concurrent.locks.Condition $r9;
        byte $b4;
        java.lang.IllegalArgumentException $r10;
        java.lang.NullPointerException $r11;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        l2 := @parameter2: long;
        r1 := @parameter3: java.util.concurrent.TimeUnit;
        r2 := @parameter4: java.util.concurrent.BlockingQueue;
        r3 := @parameter5: java.util.concurrent.ThreadFactory;
        r4 := @parameter6: java.util.concurrent.RejectedExecutionHandler;
        specialinvoke r0.<java.util.concurrent.AbstractExecutorService: void <init>()>();
        $r5 = new java.util.concurrent.atomic.AtomicInteger;
        $i3 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int ctlOf(int,int)>(-536870912, 0);
        specialinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>($i3);
        r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl> = $r5;
        $r6 = new java.util.concurrent.locks.ReentrantLock;
        specialinvoke $r6.<java.util.concurrent.locks.ReentrantLock: void <init>()>();
        r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock> = $r6;
        $r7 = new java.util.HashSet;
        specialinvoke $r7.<java.util.HashSet: void <init>()>();
        r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers> = $r7;
        $r8 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;
        $r9 = virtualinvoke $r8.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();
        r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.Condition termination> = $r9;
        if i0 < 0 goto label0;

        if i1 <= 0 goto label0;

        if i1 < i0 goto label0;

        $b4 = l2 cmp 0L;
        if $b4 >= 0 goto label1;

     label0:
        $r10 = new java.lang.IllegalArgumentException;
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r10;

     label1:
        if r2 == null goto label2;

        if r3 == null goto label2;

        if r4 != null goto label3;

     label2:
        $r11 = new java.lang.NullPointerException;
        specialinvoke $r11.<java.lang.NullPointerException: void <init>()>();
        throw $r11;

     label3:
        r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize> = i0;
        r0.<java.util.concurrent.ThreadPoolExecutor: int maximumPoolSize> = i1;
        r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue> = r2;
        $l5 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l2);
        r0.<java.util.concurrent.ThreadPoolExecutor: long keepAliveTime> = $l5;
        r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory threadFactory> = r3;
        r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler handler> = r4;
        return;
    }

    public void execute(java.lang.Runnable)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.Runnable r1;
        int i0, i1, $i2, $i3, $i4;
        java.lang.NullPointerException $r2;
        java.util.concurrent.atomic.AtomicInteger $r3, $r4, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z6;
        java.util.concurrent.BlockingQueue $r5;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 := @parameter0: java.lang.Runnable;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $i2 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>(i0);
        $i3 = r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;
        if $i2 >= $i3 goto label2;

        $z0 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(r1, 1);
        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        i0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label2:
        $z1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean isRunning(int)>(i0);
        if $z1 == 0 goto label5;

        $r5 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;
        $z2 = interfaceinvoke $r5.<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object)>(r1);
        if $z2 == 0 goto label5;

        $r6 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        i1 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $z3 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean isRunning(int)>(i1);
        if $z3 != 0 goto label3;

        $z4 = virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean remove(java.lang.Runnable)>(r1);
        if $z4 == 0 goto label3;

        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void reject(java.lang.Runnable)>(r1);
        goto label4;

     label3:
        $i4 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>(i1);
        if $i4 != 0 goto label4;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(null, 0);

     label4:
        goto label6;

     label5:
        $z6 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(r1, 0);
        if $z6 != 0 goto label6;

        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void reject(java.lang.Runnable)>(r1);

     label6:
        return;
    }

    public void shutdown()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void checkShutdownAccess()>();
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void advanceRunState(int)>(0);
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void interruptIdleWorkers()>();
        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void onShutdown()>();

     label1:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label5;

     label2:
        $r3 := @caughtexception;

     label3:
        r2 = $r3;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r2;

     label5:
        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void tryTerminate()>();
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.util.List shutdownNow()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.List r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void checkShutdownAccess()>();
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void advanceRunState(int)>(536870912);
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void interruptWorkers()>();
        r2 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: java.util.List drainQueue()>();

     label1:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label5;

     label2:
        $r4 := @caughtexception;

     label3:
        r3 = $r4;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

     label5:
        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void tryTerminate()>();
        return r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public boolean isShutdown()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $z0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean isRunning(int)>($i0);
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    public boolean isTerminating()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $z0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean isRunning(int)>(i0);
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateLessThan(int,int)>(i0, 1610612736);
        if $z1 == 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;
    }

    public boolean isTerminated()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $z0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>($i0, 1610612736);
        return $z0;
    }

    public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        long l0, l1;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.locks.ReentrantLock r2;
        boolean z0, $z1, z2;
        java.lang.Throwable r3, $r6;
        java.util.concurrent.atomic.AtomicInteger $r4;
        int $i2;
        byte $b3;
        java.util.concurrent.locks.Condition $r5;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.concurrent.TimeUnit;
        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);
        r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        $r4 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        $i2 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $z1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>($i2, 1610612736);
        if $z1 == 0 goto label2;

        z0 = 1;

     label1:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z0;

     label2:
        $b3 = l1 cmp 0L;
        if $b3 > 0 goto label4;

        z2 = 0;

     label3:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return z2;

     label4:
        $r5 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.Condition termination>;
        l1 = interfaceinvoke $r5.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l1);
        goto label0;

     label5:
        $r6 := @caughtexception;
        r3 = $r6;

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    protected void finalize()
    {
        java.util.concurrent.ThreadPoolExecutor r0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void shutdown()>();
        return;
    }

    public void setThreadFactory(java.util.concurrent.ThreadFactory)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.ThreadFactory r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 := @parameter0: java.util.concurrent.ThreadFactory;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory threadFactory> = r1;
        return;
    }

    public java.util.concurrent.ThreadFactory getThreadFactory()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.ThreadFactory $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory threadFactory>;
        return $r1;
    }

    public void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.RejectedExecutionHandler r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 := @parameter0: java.util.concurrent.RejectedExecutionHandler;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler handler> = r1;
        return;
    }

    public java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.RejectedExecutionHandler $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler handler>;
        return $r1;
    }

    public void setCorePoolSize(int)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.IllegalArgumentException $r1;
        java.util.concurrent.atomic.AtomicInteger $r2;
        java.util.concurrent.BlockingQueue $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        i0 := @parameter0: int;
        if i0 >= 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r1;

     label0:
        $i3 = r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;
        i1 = i0 - $i3;
        r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize> = i0;
        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        $i4 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $i5 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>($i4);
        if $i5 <= i0 goto label1;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void interruptIdleWorkers()>();
        goto label3;

     label1:
        if i1 <= 0 goto label3;

        $r3 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;
        $i6 = interfaceinvoke $r3.<java.util.concurrent.BlockingQueue: int size()>();
        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i6);

     label2:
        $i7 = i2;
        i2 = i2 + -1;
        if $i7 <= 0 goto label3;

        $z0 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(null, 1);
        if $z0 == 0 goto label3;

        $r4 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;
        $z1 = interfaceinvoke $r4.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();
        if $z1 == 0 goto label2;

        goto label3;

     label3:
        return;
    }

    public int getCorePoolSize()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int $i0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        $i0 = r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;
        return $i0;
    }

    public boolean prestartCoreThread()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $i1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>($i0);
        $i2 = r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;
        if $i1 >= $i2 goto label0;

        $z0 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(null, 1);
        if $z0 == 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    void ensurePrestart()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0, $i1, $i2;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        $i1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        i0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>($i1);
        $i2 = r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;
        if i0 >= $i2 goto label0;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(null, 1);
        goto label1;

     label0:
        if i0 != 0 goto label1;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(null, 0);

     label1:
        return;
    }

    public int prestartAllCoreThreads()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        i0 = 0;

     label0:
        $z0 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(null, 1);
        if $z0 == 0 goto label1;

        i0 = i0 + 1;
        goto label0;

     label1:
        return i0;
    }

    public boolean allowsCoreThreadTimeOut()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        $z0 = r0.<java.util.concurrent.ThreadPoolExecutor: boolean allowCoreThreadTimeOut>;
        return $z0;
    }

    public void allowCoreThreadTimeOut(boolean)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        boolean z0, $z1;
        long $l0;
        byte $b1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        z0 := @parameter0: boolean;
        if z0 == 0 goto label0;

        $l0 = r0.<java.util.concurrent.ThreadPoolExecutor: long keepAliveTime>;
        $b1 = $l0 cmp 0L;
        if $b1 > 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Core threads must have nonzero keep alive times");
        throw $r1;

     label0:
        $z1 = r0.<java.util.concurrent.ThreadPoolExecutor: boolean allowCoreThreadTimeOut>;
        if z0 == $z1 goto label1;

        r0.<java.util.concurrent.ThreadPoolExecutor: boolean allowCoreThreadTimeOut> = z0;
        if z0 == 0 goto label1;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void interruptIdleWorkers()>();

     label1:
        return;
    }

    public void setMaximumPoolSize(int)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r1;
        java.util.concurrent.atomic.AtomicInteger $r2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        i0 := @parameter0: int;
        if i0 <= 0 goto label0;

        $i1 = r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;
        if i0 >= $i1 goto label1;

     label0:
        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r1;

     label1:
        r0.<java.util.concurrent.ThreadPoolExecutor: int maximumPoolSize> = i0;
        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        $i2 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $i3 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>($i2);
        if $i3 <= i0 goto label2;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void interruptIdleWorkers()>();

     label2:
        return;
    }

    public int getMaximumPoolSize()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        int $i0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        $i0 = r0.<java.util.concurrent.ThreadPoolExecutor: int maximumPoolSize>;
        return $i0;
    }

    public void setKeepAliveTime(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        long l0, l1, l2, $l5;
        java.util.concurrent.TimeUnit r1;
        byte $b3, $b4, $b6;
        java.lang.IllegalArgumentException $r2, $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.concurrent.TimeUnit;
        $b3 = l0 cmp 0L;
        if $b3 >= 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r2;

     label0:
        $b4 = l0 cmp 0L;
        if $b4 != 0 goto label1;

        $z0 = virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean allowsCoreThreadTimeOut()>();
        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Core threads must have nonzero keep alive times");
        throw $r3;

     label1:
        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);
        $l5 = r0.<java.util.concurrent.ThreadPoolExecutor: long keepAliveTime>;
        l2 = l1 - $l5;
        r0.<java.util.concurrent.ThreadPoolExecutor: long keepAliveTime> = l1;
        $b6 = l2 cmp 0L;
        if $b6 >= 0 goto label2;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void interruptIdleWorkers()>();

     label2:
        return;
    }

    public long getKeepAliveTime(java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.TimeUnit r1, $r2;
        long $l0, $l1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 := @parameter0: java.util.concurrent.TimeUnit;
        $l0 = r0.<java.util.concurrent.ThreadPoolExecutor: long keepAliveTime>;
        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
        $l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($l0, $r2);
        return $l1;
    }

    public java.util.concurrent.BlockingQueue getQueue()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.BlockingQueue $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;
        return $r1;
    }

    public boolean remove(java.lang.Runnable)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.Runnable r1;
        boolean z0;
        java.util.concurrent.BlockingQueue $r2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 := @parameter0: java.lang.Runnable;
        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;
        z0 = interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: boolean remove(java.lang.Object)>(r1);
        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void tryTerminate()>();
        return z0;
    }

    public void purge()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.BlockingQueue r1;
        java.util.Iterator r2;
        java.lang.Runnable r3;
        int i0, i1;
        java.lang.Object r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.concurrent.Future $r6, $r10;
        java.util.ConcurrentModificationException $r7, r8;
        java.lang.Object[] r9;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

     label0:
        r2 = interfaceinvoke r1.<java.util.concurrent.BlockingQueue: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.lang.Runnable) $r5;
        $z1 = r3 instanceof java.util.concurrent.Future;
        if $z1 == 0 goto label2;

        $r6 = (java.util.concurrent.Future) r3;
        $z2 = interfaceinvoke $r6.<java.util.concurrent.Future: boolean isCancelled()>();
        if $z2 == 0 goto label2;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        goto label7;

     label4:
        $r7 := @caughtexception;
        r8 = $r7;
        r9 = interfaceinvoke r1.<java.util.concurrent.BlockingQueue: java.lang.Object[] toArray()>();
        i0 = lengthof r9;
        i1 = 0;

     label5:
        if i1 >= i0 goto label7;

        r4 = r9[i1];
        $z3 = r4 instanceof java.util.concurrent.Future;
        if $z3 == 0 goto label6;

        $r10 = (java.util.concurrent.Future) r4;
        $z4 = interfaceinvoke $r10.<java.util.concurrent.Future: boolean isCancelled()>();
        if $z4 == 0 goto label6;

        interfaceinvoke r1.<java.util.concurrent.BlockingQueue: boolean remove(java.lang.Object)>(r4);

     label6:
        i1 = i1 + 1;
        goto label5;

     label7:
        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void tryTerminate()>();
        return;

        catch java.util.ConcurrentModificationException from label0 to label3 with label4;
    }

    public int getPoolSize()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.locks.ReentrantLock r1;
        int i0, $i1, $i2;
        java.lang.Throwable r2, $r5;
        java.util.concurrent.atomic.AtomicInteger $r3;
        boolean $z0;
        java.util.HashSet $r4;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        $r3 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        $i1 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $z0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>($i1, 1073741824);
        if $z0 == 0 goto label1;

        $i2 = 0;
        goto label2;

     label1:
        $r4 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;
        $i2 = virtualinvoke $r4.<java.util.HashSet: int size()>();

     label2:
        i0 = $i2;

     label3:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return i0;

     label4:
        $r5 := @caughtexception;

     label5:
        r2 = $r5;

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r2;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int getActiveCount()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.locks.ReentrantLock r1;
        int i0, i1;
        java.util.Iterator r2;
        java.util.concurrent.ThreadPoolExecutor$Worker r3;
        java.lang.Throwable r4, $r7;
        java.util.HashSet $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        i0 = 0;
        $r5 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;
        r2 = virtualinvoke $r5.<java.util.HashSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.concurrent.ThreadPoolExecutor$Worker) $r6;
        $z1 = virtualinvoke r3.<java.util.concurrent.ThreadPoolExecutor$Worker: boolean isLocked()>();
        if $z1 == 0 goto label2;

        i0 = i0 + 1;

     label2:
        goto label1;

     label3:
        i1 = i0;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return i1;

     label5:
        $r7 := @caughtexception;

     label6:
        r4 = $r7;

     label7:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public int getLargestPoolSize()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.locks.ReentrantLock r1;
        int i0;
        java.lang.Throwable r2, $r3;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        i0 = r0.<java.util.concurrent.ThreadPoolExecutor: int largestPoolSize>;

     label1:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return i0;

     label2:
        $r3 := @caughtexception;

     label3:
        r2 = $r3;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public long getTaskCount()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.locks.ReentrantLock r1;
        long l0, $l1, $l3, l4;
        java.util.Iterator r2;
        java.util.concurrent.ThreadPoolExecutor$Worker r3;
        java.lang.Throwable r4, $r8;
        java.util.HashSet $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        java.util.concurrent.BlockingQueue $r7;
        int $i2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        l0 = r0.<java.util.concurrent.ThreadPoolExecutor: long completedTaskCount>;
        $r5 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;
        r2 = virtualinvoke $r5.<java.util.HashSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.concurrent.ThreadPoolExecutor$Worker) $r6;
        $l1 = r3.<java.util.concurrent.ThreadPoolExecutor$Worker: long completedTasks>;
        l0 = l0 + $l1;
        $z1 = virtualinvoke r3.<java.util.concurrent.ThreadPoolExecutor$Worker: boolean isLocked()>();
        if $z1 == 0 goto label2;

        l0 = l0 + 1L;

     label2:
        goto label1;

     label3:
        $r7 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;
        $i2 = interfaceinvoke $r7.<java.util.concurrent.BlockingQueue: int size()>();
        $l3 = (long) $i2;
        l4 = l0 + $l3;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return l4;

     label5:
        $r8 := @caughtexception;

     label6:
        r4 = $r8;

     label7:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public long getCompletedTaskCount()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.locks.ReentrantLock r1;
        long l0, $l1, l2;
        java.util.Iterator r2;
        java.util.concurrent.ThreadPoolExecutor$Worker r3;
        java.lang.Throwable r4, $r7;
        java.util.HashSet $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        l0 = r0.<java.util.concurrent.ThreadPoolExecutor: long completedTaskCount>;
        $r5 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;
        r2 = virtualinvoke $r5.<java.util.HashSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.concurrent.ThreadPoolExecutor$Worker) $r6;
        $l1 = r3.<java.util.concurrent.ThreadPoolExecutor$Worker: long completedTasks>;
        l0 = l0 + $l1;
        goto label1;

     label2:
        l2 = l0;

     label3:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        return l2;

     label4:
        $r7 := @caughtexception;

     label5:
        r4 = $r7;

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.locks.ReentrantLock r1;
        long l0, $l3;
        int i1, i2, i4, $i5;
        java.util.Iterator r2;
        java.util.concurrent.ThreadPoolExecutor$Worker r3;
        java.lang.Throwable r4, $r8;
        java.util.HashSet $r5, $r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r7;
        java.util.concurrent.atomic.AtomicInteger $r9;
        java.lang.String $r10, r11, $r13, $r27;
        java.lang.StringBuilder $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r23, $r24, $r25, $r26;
        java.util.concurrent.BlockingQueue $r22;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label0:
        l0 = r0.<java.util.concurrent.ThreadPoolExecutor: long completedTaskCount>;
        i1 = 0;
        $r5 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;
        i2 = virtualinvoke $r5.<java.util.HashSet: int size()>();
        $r6 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;
        r2 = virtualinvoke $r6.<java.util.HashSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.concurrent.ThreadPoolExecutor$Worker) $r7;
        $l3 = r3.<java.util.concurrent.ThreadPoolExecutor$Worker: long completedTasks>;
        l0 = l0 + $l3;
        $z1 = virtualinvoke r3.<java.util.concurrent.ThreadPoolExecutor$Worker: boolean isLocked()>();
        if $z1 == 0 goto label2;

        i1 = i1 + 1;

     label2:
        goto label1;

     label3:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        goto label7;

     label4:
        $r8 := @caughtexception;

     label5:
        r4 = $r8;

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
        throw r4;

     label7:
        $r9 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;
        i4 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: int get()>();
        $z2 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateLessThan(int,int)>(i4, 0);
        if $z2 == 0 goto label8;

        $r10 = "Running";
        goto label10;

     label8:
        $z3 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>(i4, 1610612736);
        if $z3 == 0 goto label9;

        $r10 = "Terminated";
        goto label10;

     label9:
        $r10 = "Shutting down";

     label10:
        r11 = $r10;
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();
        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pool size = ");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", active threads = ");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", queued tasks = ");
        $r22 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;
        $i5 = interfaceinvoke $r22.<java.util.concurrent.BlockingQueue: int size()>();
        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", completed tasks = ");
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r27;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    protected void beforeExecute(java.lang.Thread, java.lang.Runnable)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.Thread r1;
        java.lang.Runnable r2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 := @parameter0: java.lang.Thread;
        r2 := @parameter1: java.lang.Runnable;
        return;
    }

    protected void afterExecute(java.lang.Runnable, java.lang.Throwable)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.Runnable r1;
        java.lang.Throwable r2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        r1 := @parameter0: java.lang.Runnable;
        r2 := @parameter1: java.lang.Throwable;
        return;
    }

    protected void terminated()
    {
        java.util.concurrent.ThreadPoolExecutor r0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;
        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.ThreadPoolExecutor$AbortPolicy $r0;
        java.lang.RuntimePermission $r1;

        $r0 = new java.util.concurrent.ThreadPoolExecutor$AbortPolicy;
        specialinvoke $r0.<java.util.concurrent.ThreadPoolExecutor$AbortPolicy: void <init>()>();
        <java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler defaultHandler> = $r0;
        $r1 = new java.lang.RuntimePermission;
        specialinvoke $r1.<java.lang.RuntimePermission: void <init>(java.lang.String)>("modifyThread");
        <java.util.concurrent.ThreadPoolExecutor: java.lang.RuntimePermission shutdownPerm> = $r1;
        return;
    }
}
