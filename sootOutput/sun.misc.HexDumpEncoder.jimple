public class sun.misc.HexDumpEncoder extends sun.misc.CharacterEncoder
{
    private int offset;
    private int thisLineLength;
    private int currentByte;
    private byte[] thisLine;

    public void <init>()
    {
        sun.misc.HexDumpEncoder r0;
        byte[] $r1;

        r0 := @this: sun.misc.HexDumpEncoder;
        specialinvoke r0.<sun.misc.CharacterEncoder: void <init>()>();
        $r1 = newarray (byte)[16];
        r0.<sun.misc.HexDumpEncoder: byte[] thisLine> = $r1;
        return;
    }

    static void hexDigit(java.io.PrintStream, byte)
    {
        java.io.PrintStream r0;
        byte b0, $b2, $b3, $b8;
        char c1, c6, c9, c12;
        int $i4, $i5, $i7, $i10, $i11, $i13;

        r0 := @parameter0: java.io.PrintStream;
        b0 := @parameter1: byte;
        $b2 = b0 >> 4;
        $b3 = $b2 & 15;
        c1 = (char) $b3;
        if c1 <= 9 goto label0;

        $i4 = c1 - 10;
        $i5 = $i4 + 65;
        c6 = (char) $i5;
        goto label1;

     label0:
        $i7 = c1 + 48;
        c6 = (char) $i7;

     label1:
        virtualinvoke r0.<java.io.PrintStream: void write(int)>(c6);
        $b8 = b0 & 15;
        c9 = (char) $b8;
        if c9 <= 9 goto label2;

        $i10 = c9 - 10;
        $i11 = $i10 + 65;
        c12 = (char) $i11;
        goto label3;

     label2:
        $i13 = c9 + 48;
        c12 = (char) $i13;

     label3:
        virtualinvoke r0.<java.io.PrintStream: void write(int)>(c12);
        return;
    }

    protected int bytesPerAtom()
    {
        sun.misc.HexDumpEncoder r0;

        r0 := @this: sun.misc.HexDumpEncoder;
        return 1;
    }

    protected int bytesPerLine()
    {
        sun.misc.HexDumpEncoder r0;

        r0 := @this: sun.misc.HexDumpEncoder;
        return 16;
    }

    protected void encodeBufferPrefix(java.io.OutputStream) throws java.io.IOException
    {
        sun.misc.HexDumpEncoder r0;
        java.io.OutputStream r1;

        r0 := @this: sun.misc.HexDumpEncoder;
        r1 := @parameter0: java.io.OutputStream;
        r0.<sun.misc.HexDumpEncoder: int offset> = 0;
        specialinvoke r0.<sun.misc.CharacterEncoder: void encodeBufferPrefix(java.io.OutputStream)>(r1);
        return;
    }

    protected void encodeLinePrefix(java.io.OutputStream, int) throws java.io.IOException
    {
        sun.misc.HexDumpEncoder r0;
        java.io.OutputStream r1;
        int i0, $i1, $i2, $i3, $i5, $i6;
        java.io.PrintStream $r2, $r3, $r4;
        byte $b4, $b7;

        r0 := @this: sun.misc.HexDumpEncoder;
        r1 := @parameter0: java.io.OutputStream;
        i0 := @parameter1: int;
        $r2 = r0.<sun.misc.HexDumpEncoder: java.io.PrintStream pStream>;
        $i1 = r0.<sun.misc.HexDumpEncoder: int offset>;
        $i2 = $i1 >>> 8;
        $i3 = $i2 & 255;
        $b4 = (byte) $i3;
        staticinvoke <sun.misc.HexDumpEncoder: void hexDigit(java.io.PrintStream,byte)>($r2, $b4);
        $r3 = r0.<sun.misc.HexDumpEncoder: java.io.PrintStream pStream>;
        $i5 = r0.<sun.misc.HexDumpEncoder: int offset>;
        $i6 = $i5 & 255;
        $b7 = (byte) $i6;
        staticinvoke <sun.misc.HexDumpEncoder: void hexDigit(java.io.PrintStream,byte)>($r3, $b7);
        $r4 = r0.<sun.misc.HexDumpEncoder: java.io.PrintStream pStream>;
        virtualinvoke $r4.<java.io.PrintStream: void print(java.lang.String)>(": ");
        r0.<sun.misc.HexDumpEncoder: int currentByte> = 0;
        r0.<sun.misc.HexDumpEncoder: int thisLineLength> = i0;
        return;
    }

    protected void encodeAtom(java.io.OutputStream, byte[], int, int) throws java.io.IOException
    {
        sun.misc.HexDumpEncoder r0;
        java.io.OutputStream r1;
        byte[] r2, $r3;
        int i0, i1, $i2, $i5, $i6, $i7;
        byte $b3, $b4;
        java.io.PrintStream $r4, $r5, $r7;

        r0 := @this: sun.misc.HexDumpEncoder;
        r1 := @parameter0: java.io.OutputStream;
        r2 := @parameter1: byte[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        $r3 = r0.<sun.misc.HexDumpEncoder: byte[] thisLine>;
        $i2 = r0.<sun.misc.HexDumpEncoder: int currentByte>;
        $b3 = r2[i0];
        $r3[$i2] = $b3;
        $r4 = r0.<sun.misc.HexDumpEncoder: java.io.PrintStream pStream>;
        $b4 = r2[i0];
        staticinvoke <sun.misc.HexDumpEncoder: void hexDigit(java.io.PrintStream,byte)>($r4, $b4);
        $r5 = r0.<sun.misc.HexDumpEncoder: java.io.PrintStream pStream>;
        virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>(" ");
        $i5 = r0.<sun.misc.HexDumpEncoder: int currentByte>;
        $i6 = $i5 + 1;
        r0.<sun.misc.HexDumpEncoder: int currentByte> = $i6;
        $i7 = r0.<sun.misc.HexDumpEncoder: int currentByte>;
        if $i7 != 8 goto label0;

        $r7 = r0.<sun.misc.HexDumpEncoder: java.io.PrintStream pStream>;
        virtualinvoke $r7.<java.io.PrintStream: void print(java.lang.String)>("  ");

     label0:
        return;
    }

    protected void encodeLineSuffix(java.io.OutputStream) throws java.io.IOException
    {
        sun.misc.HexDumpEncoder r0;
        java.io.OutputStream r1;
        int i0, $i1, i2, $i3, $i7, $i8, $i9;
        java.io.PrintStream $r2, $r3, $r4, $r7, $r8, $r10;
        byte[] $r5, $r6, $r9;
        byte $b4, $b5, $b6;

        r0 := @this: sun.misc.HexDumpEncoder;
        r1 := @parameter0: java.io.OutputStream;
        $i1 = r0.<sun.misc.HexDumpEncoder: int thisLineLength>;
        if $i1 >= 16 goto label2;

        i0 = r0.<sun.misc.HexDumpEncoder: int thisLineLength>;

     label0:
        if i0 >= 16 goto label2;

        $r2 = r0.<sun.misc.HexDumpEncoder: java.io.PrintStream pStream>;
        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>("   ");
        if i0 != 7 goto label1;

        $r3 = r0.<sun.misc.HexDumpEncoder: java.io.PrintStream pStream>;
        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>("  ");

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        $r4 = r0.<sun.misc.HexDumpEncoder: java.io.PrintStream pStream>;
        virtualinvoke $r4.<java.io.PrintStream: void print(java.lang.String)>(" ");
        i2 = 0;

     label3:
        $i3 = r0.<sun.misc.HexDumpEncoder: int thisLineLength>;
        if i2 >= $i3 goto label7;

        $r5 = r0.<sun.misc.HexDumpEncoder: byte[] thisLine>;
        $b4 = $r5[i2];
        if $b4 < 32 goto label4;

        $r6 = r0.<sun.misc.HexDumpEncoder: byte[] thisLine>;
        $b5 = $r6[i2];
        if $b5 <= 122 goto label5;

     label4:
        $r7 = r0.<sun.misc.HexDumpEncoder: java.io.PrintStream pStream>;
        virtualinvoke $r7.<java.io.PrintStream: void print(java.lang.String)>(".");
        goto label6;

     label5:
        $r8 = r0.<sun.misc.HexDumpEncoder: java.io.PrintStream pStream>;
        $r9 = r0.<sun.misc.HexDumpEncoder: byte[] thisLine>;
        $b6 = $r9[i2];
        virtualinvoke $r8.<java.io.PrintStream: void write(int)>($b6);

     label6:
        i2 = i2 + 1;
        goto label3;

     label7:
        $r10 = r0.<sun.misc.HexDumpEncoder: java.io.PrintStream pStream>;
        virtualinvoke $r10.<java.io.PrintStream: void println()>();
        $i7 = r0.<sun.misc.HexDumpEncoder: int offset>;
        $i8 = r0.<sun.misc.HexDumpEncoder: int thisLineLength>;
        $i9 = $i7 + $i8;
        r0.<sun.misc.HexDumpEncoder: int offset> = $i9;
        return;
    }
}
