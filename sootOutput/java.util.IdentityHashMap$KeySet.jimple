class java.util.IdentityHashMap$KeySet extends java.util.AbstractSet
{
    final java.util.IdentityHashMap this$0;

    private void <init>(java.util.IdentityHashMap)
    {
        java.util.IdentityHashMap$KeySet r0;
        java.util.IdentityHashMap r1;

        r0 := @this: java.util.IdentityHashMap$KeySet;
        r1 := @parameter0: java.util.IdentityHashMap;
        r0.<java.util.IdentityHashMap$KeySet: java.util.IdentityHashMap this$0> = r1;
        specialinvoke r0.<java.util.AbstractSet: void <init>()>();
        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.IdentityHashMap$KeySet r0;
        java.util.IdentityHashMap$KeyIterator $r1;
        java.util.IdentityHashMap $r2;

        r0 := @this: java.util.IdentityHashMap$KeySet;
        $r1 = new java.util.IdentityHashMap$KeyIterator;
        $r2 = r0.<java.util.IdentityHashMap$KeySet: java.util.IdentityHashMap this$0>;
        specialinvoke $r1.<java.util.IdentityHashMap$KeyIterator: void <init>(java.util.IdentityHashMap,java.util.IdentityHashMap$1)>($r2, null);
        return $r1;
    }

    public int size()
    {
        java.util.IdentityHashMap$KeySet r0;
        java.util.IdentityHashMap $r1;
        int $i0;

        r0 := @this: java.util.IdentityHashMap$KeySet;
        $r1 = r0.<java.util.IdentityHashMap$KeySet: java.util.IdentityHashMap this$0>;
        $i0 = staticinvoke <java.util.IdentityHashMap: int access$000(java.util.IdentityHashMap)>($r1);
        return $i0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.IdentityHashMap$KeySet r0;
        java.lang.Object r1;
        java.util.IdentityHashMap $r2;
        boolean $z0;

        r0 := @this: java.util.IdentityHashMap$KeySet;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.IdentityHashMap$KeySet: java.util.IdentityHashMap this$0>;
        $z0 = virtualinvoke $r2.<java.util.IdentityHashMap: boolean containsKey(java.lang.Object)>(r1);
        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.IdentityHashMap$KeySet r0;
        java.lang.Object r1;
        int i0, $i1;
        java.util.IdentityHashMap $r2, $r3, $r5;
        boolean $z0;

        r0 := @this: java.util.IdentityHashMap$KeySet;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.IdentityHashMap$KeySet: java.util.IdentityHashMap this$0>;
        i0 = staticinvoke <java.util.IdentityHashMap: int access$000(java.util.IdentityHashMap)>($r2);
        $r3 = r0.<java.util.IdentityHashMap$KeySet: java.util.IdentityHashMap this$0>;
        virtualinvoke $r3.<java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>(r1);
        $r5 = r0.<java.util.IdentityHashMap$KeySet: java.util.IdentityHashMap this$0>;
        $i1 = staticinvoke <java.util.IdentityHashMap: int access$000(java.util.IdentityHashMap)>($r5);
        if $i1 == i0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.IdentityHashMap$KeySet r0;
        java.util.Collection r1;
        boolean z0, $z1, $z2;
        java.util.Iterator r2;
        java.lang.Object $r3;

        r0 := @this: java.util.IdentityHashMap$KeySet;
        r1 := @parameter0: java.util.Collection;
        z0 = 0;
        r2 = virtualinvoke r0.<java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>();

     label0:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label1;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        $z2 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r3);
        if $z2 == 0 goto label0;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();
        z0 = 1;
        goto label0;

     label1:
        return z0;
    }

    public void clear()
    {
        java.util.IdentityHashMap$KeySet r0;
        java.util.IdentityHashMap $r1;

        r0 := @this: java.util.IdentityHashMap$KeySet;
        $r1 = r0.<java.util.IdentityHashMap$KeySet: java.util.IdentityHashMap this$0>;
        virtualinvoke $r1.<java.util.IdentityHashMap: void clear()>();
        return;
    }

    public int hashCode()
    {
        java.util.IdentityHashMap$KeySet r0;
        int i0, $i1;
        java.util.Iterator r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: java.util.IdentityHashMap$KeySet;
        i0 = 0;
        r1 = virtualinvoke r0.<java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r2);
        i0 = i0 + $i1;
        goto label0;

     label1:
        return i0;
    }

    void <init>(java.util.IdentityHashMap, java.util.IdentityHashMap$1)
    {
        java.util.IdentityHashMap$KeySet r0;
        java.util.IdentityHashMap r1;
        java.util.IdentityHashMap$1 r2;

        r0 := @this: java.util.IdentityHashMap$KeySet;
        r1 := @parameter0: java.util.IdentityHashMap;
        r2 := @parameter1: java.util.IdentityHashMap$1;
        specialinvoke r0.<java.util.IdentityHashMap$KeySet: void <init>(java.util.IdentityHashMap)>(r1);
        return;
    }
}
