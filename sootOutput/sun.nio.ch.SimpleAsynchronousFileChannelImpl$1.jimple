class sun.nio.ch.SimpleAsynchronousFileChannelImpl$1 extends java.lang.Object implements java.lang.Runnable
{
    final long val$position;
    final long val$size;
    final boolean val$shared;
    final sun.nio.ch.FileLockImpl val$fli;
    final java.nio.channels.CompletionHandler val$handler;
    final sun.nio.ch.PendingFuture val$result;
    final java.lang.Object val$attachment;
    final sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0;

    void <init>(sun.nio.ch.SimpleAsynchronousFileChannelImpl, long, long, boolean, sun.nio.ch.FileLockImpl, java.nio.channels.CompletionHandler, sun.nio.ch.PendingFuture, java.lang.Object)
    {
        sun.nio.ch.SimpleAsynchronousFileChannelImpl$1 r0;
        sun.nio.ch.SimpleAsynchronousFileChannelImpl r1;
        long l0, l1;
        boolean z0;
        sun.nio.ch.FileLockImpl r2;
        java.nio.channels.CompletionHandler r3;
        sun.nio.ch.PendingFuture r4;
        java.lang.Object r5;

        r0 := @this: sun.nio.ch.SimpleAsynchronousFileChannelImpl$1;
        r1 := @parameter0: sun.nio.ch.SimpleAsynchronousFileChannelImpl;
        l0 := @parameter1: long;
        l1 := @parameter2: long;
        z0 := @parameter3: boolean;
        r2 := @parameter4: sun.nio.ch.FileLockImpl;
        r3 := @parameter5: java.nio.channels.CompletionHandler;
        r4 := @parameter6: sun.nio.ch.PendingFuture;
        r5 := @parameter7: java.lang.Object;
        r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0> = r1;
        r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: long val$position> = l0;
        r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: long val$size> = l1;
        r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: boolean val$shared> = z0;
        r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.FileLockImpl val$fli> = r2;
        r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: java.nio.channels.CompletionHandler val$handler> = r3;
        r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.PendingFuture val$result> = r4;
        r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: java.lang.Object val$attachment> = r5;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public void run()
    {
        sun.nio.ch.SimpleAsynchronousFileChannelImpl$1 r0;
        java.io.IOException r1, r2, $r15;
        int i0, i1;
        java.lang.Throwable r3, r4, $r21, $r25;
        sun.nio.ch.SimpleAsynchronousFileChannelImpl $r5, $r7, $r9, $r11, $r12, $r14, $r16, $r18, $r20, $r22, $r23, $r26;
        sun.nio.ch.NativeThreadSet $r6, $r24, $r27;
        sun.nio.ch.FileDispatcher $r8;
        java.io.FileDescriptor $r10;
        long $l2, $l3;
        boolean $z0, $z1, $z2, $z3;
        java.nio.channels.AsynchronousCloseException $r13, $r19;
        sun.nio.ch.FileLockImpl $r17, $r30, $r33;
        java.nio.channels.CompletionHandler $r28, $r31;
        sun.nio.ch.PendingFuture $r29;
        java.lang.Object $r32;

        r0 := @this: sun.nio.ch.SimpleAsynchronousFileChannelImpl$1;
        r1 = null;
        $r5 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        $r6 = staticinvoke <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet access$000(sun.nio.ch.SimpleAsynchronousFileChannelImpl)>($r5);
        i0 = virtualinvoke $r6.<sun.nio.ch.NativeThreadSet: int add()>();

     label0:
        $r7 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        virtualinvoke $r7.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void begin()>();

     label1:
        $r8 = staticinvoke <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.FileDispatcher access$100()>();
        $r9 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        $r10 = $r9.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: java.io.FileDescriptor fdObj>;
        $l2 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: long val$position>;
        $l3 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: long val$size>;
        $z0 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: boolean val$shared>;
        i1 = virtualinvoke $r8.<sun.nio.ch.FileDispatcher: int lock(java.io.FileDescriptor,boolean,long,long,boolean)>($r10, 1, $l2, $l3, $z0);
        if i1 != 2 goto label2;

        $r11 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        $z1 = virtualinvoke $r11.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label1;

     label2:
        if i1 != 0 goto label3;

        $r12 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        $z2 = virtualinvoke $r12.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean isOpen()>();
        if $z2 != 0 goto label4;

     label3:
        $r13 = new java.nio.channels.AsynchronousCloseException;
        specialinvoke $r13.<java.nio.channels.AsynchronousCloseException: void <init>()>();
        throw $r13;

     label4:
        $r14 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        virtualinvoke $r14.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void end()>();
        goto label12;

     label5:
        $r15 := @caughtexception;

     label6:
        r2 = $r15;
        $r16 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        $r17 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.FileLockImpl val$fli>;
        virtualinvoke $r16.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void removeFromFileLockTable(sun.nio.ch.FileLockImpl)>($r17);
        $r18 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        $z3 = virtualinvoke $r18.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: boolean isOpen()>();
        if $z3 != 0 goto label7;

        $r19 = new java.nio.channels.AsynchronousCloseException;
        specialinvoke $r19.<java.nio.channels.AsynchronousCloseException: void <init>()>();
        r2 = $r19;

     label7:
        r1 = r2;

     label8:
        $r20 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        virtualinvoke $r20.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void end()>();
        goto label12;

     label9:
        $r21 := @caughtexception;

     label10:
        r3 = $r21;

     label11:
        $r22 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        virtualinvoke $r22.<sun.nio.ch.SimpleAsynchronousFileChannelImpl: void end()>();
        throw r3;

     label12:
        $r23 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        $r24 = staticinvoke <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet access$000(sun.nio.ch.SimpleAsynchronousFileChannelImpl)>($r23);
        virtualinvoke $r24.<sun.nio.ch.NativeThreadSet: void remove(int)>(i0);
        goto label16;

     label13:
        $r25 := @caughtexception;

     label14:
        r4 = $r25;

     label15:
        $r26 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.SimpleAsynchronousFileChannelImpl this$0>;
        $r27 = staticinvoke <sun.nio.ch.SimpleAsynchronousFileChannelImpl: sun.nio.ch.NativeThreadSet access$000(sun.nio.ch.SimpleAsynchronousFileChannelImpl)>($r26);
        virtualinvoke $r27.<sun.nio.ch.NativeThreadSet: void remove(int)>(i0);
        throw r4;

     label16:
        $r28 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: java.nio.channels.CompletionHandler val$handler>;
        if $r28 != null goto label17;

        $r29 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.PendingFuture val$result>;
        $r30 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.FileLockImpl val$fli>;
        virtualinvoke $r29.<sun.nio.ch.PendingFuture: void setResult(java.lang.Object,java.lang.Throwable)>($r30, r1);
        goto label18;

     label17:
        $r31 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: java.nio.channels.CompletionHandler val$handler>;
        $r32 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: java.lang.Object val$attachment>;
        $r33 = r0.<sun.nio.ch.SimpleAsynchronousFileChannelImpl$1: sun.nio.ch.FileLockImpl val$fli>;
        staticinvoke <sun.nio.ch.Invoker: void invokeUnchecked(java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object,java.lang.Throwable)>($r31, $r32, $r33, r1);

     label18:
        return;

        catch java.io.IOException from label0 to label4 with label5;
        catch java.lang.Throwable from label0 to label4 with label9;
        catch java.lang.Throwable from label6 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
        catch java.lang.Throwable from label0 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }
}
