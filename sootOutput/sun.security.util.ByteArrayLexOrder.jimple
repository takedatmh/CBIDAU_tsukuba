public class sun.security.util.ByteArrayLexOrder extends java.lang.Object implements java.util.Comparator
{

    public void <init>()
    {
        sun.security.util.ByteArrayLexOrder r0;

        r0 := @this: sun.security.util.ByteArrayLexOrder;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public final int compare(byte[], byte[])
    {
        sun.security.util.ByteArrayLexOrder r0;
        byte[] r1, r2;
        int i0, i1, $i2, $i3, $i8, $i9, $i10;
        byte $b4, $b6;
        short $s5, $s7;

        r0 := @this: sun.security.util.ByteArrayLexOrder;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        i0 = 0;

     label0:
        $i2 = lengthof r1;
        if i0 >= $i2 goto label2;

        $i3 = lengthof r2;
        if i0 >= $i3 goto label2;

        $b4 = r1[i0];
        $s5 = $b4 & 255;
        $b6 = r2[i0];
        $s7 = $b6 & 255;
        i1 = $s5 - $s7;
        if i1 == 0 goto label1;

        return i1;

     label1:
        i0 = i0 + 1;
        goto label0;

     label2:
        $i8 = lengthof r1;
        $i9 = lengthof r2;
        $i10 = $i8 - $i9;
        return $i10;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        sun.security.util.ByteArrayLexOrder r0;
        java.lang.Object r1, r2;
        byte[] $r3, $r4;
        int $i0;

        r0 := @this: sun.security.util.ByteArrayLexOrder;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r3 = (byte[]) r1;
        $r4 = (byte[]) r2;
        $i0 = virtualinvoke r0.<sun.security.util.ByteArrayLexOrder: int compare(byte[],byte[])>($r3, $r4);
        return $i0;
    }
}
