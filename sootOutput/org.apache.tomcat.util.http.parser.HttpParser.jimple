public class org.apache.tomcat.util.http.parser.HttpParser extends java.lang.Object
{
    private static final java.lang.Integer FIELD_TYPE_TOKEN;
    private static final java.lang.Integer FIELD_TYPE_QUOTED_STRING;
    private static final java.lang.Integer FIELD_TYPE_TOKEN_OR_QUOTED_STRING;
    private static final java.lang.Integer FIELD_TYPE_LHEX;
    private static final java.lang.Integer FIELD_TYPE_QUOTED_TOKEN;
    private static final java.util.Map fieldTypes;
    private static final org.apache.tomcat.util.res.StringManager sm;
    private static final org.apache.juli.logging.Log log;
    private static final int ARRAY_SIZE;
    private static final boolean[] IS_CONTROL;
    private static final boolean[] IS_SEPARATOR;
    private static final boolean[] IS_TOKEN;
    private static final boolean[] IS_HEX;
    private static final boolean[] IS_HTTP_PROTOCOL;
    private static final boolean[] IS_ALPHA;
    private static final boolean[] IS_NUMERIC;
    private static final boolean[] REQUEST_TARGET_ALLOW;
    private static final boolean[] IS_UNRESERVED;
    private static final boolean[] IS_SUBDELIM;
    private static final boolean[] IS_USERINFO;
    private static final boolean[] IS_RELAXABLE;
    private static final org.apache.tomcat.util.http.parser.HttpParser DEFAULT;
    private final boolean[] IS_NOT_REQUEST_TARGET;
    private final boolean[] IS_ABSOLUTEPATH_RELAXED;
    private final boolean[] IS_QUERY_RELAXED;

    static void <clinit>()
    {
        java.lang.Integer $r0, $r1, $r2, $r3, $r4, $r5, $r24, $r27, $r30, $r33, $r36, $r39, $r42, $r45, $r48;
        int i0, i1, $i3;
        char c2;
        java.util.HashMap $r6;
        org.apache.tomcat.util.res.StringManager $r7, $r70;
        org.apache.juli.logging.Log $r8, $r69;
        boolean[] $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r68;
        java.util.Map $r21, $r23, $r26, $r29, $r32, $r35, $r38, $r41, $r44, $r47;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.String r67, $r73;
        java.lang.Object[] $r71;
        java.lang.Character $r72;
        org.apache.tomcat.util.http.parser.HttpParser $r74;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
        <org.apache.tomcat.util.http.parser.HttpParser: java.lang.Integer FIELD_TYPE_TOKEN> = $r1;
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
        <org.apache.tomcat.util.http.parser.HttpParser: java.lang.Integer FIELD_TYPE_QUOTED_STRING> = $r2;
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);
        <org.apache.tomcat.util.http.parser.HttpParser: java.lang.Integer FIELD_TYPE_TOKEN_OR_QUOTED_STRING> = $r3;
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);
        <org.apache.tomcat.util.http.parser.HttpParser: java.lang.Integer FIELD_TYPE_LHEX> = $r4;
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);
        <org.apache.tomcat.util.http.parser.HttpParser: java.lang.Integer FIELD_TYPE_QUOTED_TOKEN> = $r5;
        $r6 = new java.util.HashMap;
        specialinvoke $r6.<java.util.HashMap: void <init>()>();
        <org.apache.tomcat.util.http.parser.HttpParser: java.util.Map fieldTypes> = $r6;
        $r7 = staticinvoke <org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.Class)>(class "org/apache/tomcat/util/http/parser/HttpParser");
        <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm> = $r7;
        $r8 = staticinvoke <org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>(class "org/apache/tomcat/util/http/parser/HttpParser");
        <org.apache.tomcat.util.http.parser.HttpParser: org.apache.juli.logging.Log log> = $r8;
        $r9 = newarray (boolean)[128];
        <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_CONTROL> = $r9;
        $r10 = newarray (boolean)[128];
        <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_SEPARATOR> = $r10;
        $r11 = newarray (boolean)[128];
        <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_TOKEN> = $r11;
        $r12 = newarray (boolean)[128];
        <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_HEX> = $r12;
        $r13 = newarray (boolean)[128];
        <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_HTTP_PROTOCOL> = $r13;
        $r14 = newarray (boolean)[128];
        <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_ALPHA> = $r14;
        $r15 = newarray (boolean)[128];
        <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_NUMERIC> = $r15;
        $r16 = newarray (boolean)[128];
        <org.apache.tomcat.util.http.parser.HttpParser: boolean[] REQUEST_TARGET_ALLOW> = $r16;
        $r17 = newarray (boolean)[128];
        <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_UNRESERVED> = $r17;
        $r18 = newarray (boolean)[128];
        <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_SUBDELIM> = $r18;
        $r19 = newarray (boolean)[128];
        <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_USERINFO> = $r19;
        $r20 = newarray (boolean)[128];
        <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_RELAXABLE> = $r20;
        $r21 = <org.apache.tomcat.util.http.parser.HttpParser: java.util.Map fieldTypes>;
        $r0 = <org.apache.tomcat.util.http.parser.HttpParser: java.lang.Integer FIELD_TYPE_QUOTED_STRING>;
        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("username", $r0);
        $r23 = <org.apache.tomcat.util.http.parser.HttpParser: java.util.Map fieldTypes>;
        $r24 = <org.apache.tomcat.util.http.parser.HttpParser: java.lang.Integer FIELD_TYPE_QUOTED_STRING>;
        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("realm", $r24);
        $r26 = <org.apache.tomcat.util.http.parser.HttpParser: java.util.Map fieldTypes>;
        $r27 = <org.apache.tomcat.util.http.parser.HttpParser: java.lang.Integer FIELD_TYPE_QUOTED_STRING>;
        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("nonce", $r27);
        $r29 = <org.apache.tomcat.util.http.parser.HttpParser: java.util.Map fieldTypes>;
        $r30 = <org.apache.tomcat.util.http.parser.HttpParser: java.lang.Integer FIELD_TYPE_QUOTED_STRING>;
        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("digest-uri", $r30);
        $r32 = <org.apache.tomcat.util.http.parser.HttpParser: java.util.Map fieldTypes>;
        $r33 = <org.apache.tomcat.util.http.parser.HttpParser: java.lang.Integer FIELD_TYPE_LHEX>;
        interfaceinvoke $r32.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("response", $r33);
        $r35 = <org.apache.tomcat.util.http.parser.HttpParser: java.util.Map fieldTypes>;
        $r36 = <org.apache.tomcat.util.http.parser.HttpParser: java.lang.Integer FIELD_TYPE_QUOTED_TOKEN>;
        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("algorithm", $r36);
        $r38 = <org.apache.tomcat.util.http.parser.HttpParser: java.util.Map fieldTypes>;
        $r39 = <org.apache.tomcat.util.http.parser.HttpParser: java.lang.Integer FIELD_TYPE_QUOTED_STRING>;
        interfaceinvoke $r38.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cnonce", $r39);
        $r41 = <org.apache.tomcat.util.http.parser.HttpParser: java.util.Map fieldTypes>;
        $r42 = <org.apache.tomcat.util.http.parser.HttpParser: java.lang.Integer FIELD_TYPE_QUOTED_STRING>;
        interfaceinvoke $r41.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("opaque", $r42);
        $r44 = <org.apache.tomcat.util.http.parser.HttpParser: java.util.Map fieldTypes>;
        $r45 = <org.apache.tomcat.util.http.parser.HttpParser: java.lang.Integer FIELD_TYPE_QUOTED_TOKEN>;
        interfaceinvoke $r44.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("qop", $r45);
        $r47 = <org.apache.tomcat.util.http.parser.HttpParser: java.util.Map fieldTypes>;
        $r48 = <org.apache.tomcat.util.http.parser.HttpParser: java.lang.Integer FIELD_TYPE_LHEX>;
        interfaceinvoke $r47.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("nc", $r48);
        i0 = 0;
        goto label24;

     label0:
        if i0 < 32 goto label1;

        if i0 != 127 goto label2;

     label1:
        $r50 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_CONTROL>;
        $r50[i0] = 1;

     label2:
        if i0 == 40 goto label3;

        if i0 == 41 goto label3;

        if i0 == 60 goto label3;

        if i0 == 62 goto label3;

        if i0 == 64 goto label3;

        if i0 == 44 goto label3;

        if i0 == 59 goto label3;

        if i0 == 58 goto label3;

        if i0 == 92 goto label3;

        if i0 == 34 goto label3;

        if i0 == 47 goto label3;

        if i0 == 91 goto label3;

        if i0 == 93 goto label3;

        if i0 == 63 goto label3;

        if i0 == 61 goto label3;

        if i0 == 123 goto label3;

        if i0 == 125 goto label3;

        if i0 == 32 goto label3;

        if i0 != 9 goto label4;

     label3:
        $r51 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_SEPARATOR>;
        $r51[i0] = 1;

     label4:
        $r52 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_CONTROL>;
        $z0 = $r52[i0];
        if $z0 != 0 goto label5;

        $r53 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_SEPARATOR>;
        $z1 = $r53[i0];
        if $z1 != 0 goto label5;

        if i0 >= 128 goto label5;

        $r54 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_TOKEN>;
        $r54[i0] = 1;

     label5:
        if i0 < 48 goto label6;

        if i0 <= 57 goto label8;

     label6:
        if i0 < 97 goto label7;

        if i0 <= 102 goto label8;

     label7:
        if i0 < 65 goto label9;

        if i0 > 70 goto label9;

     label8:
        $r55 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_HEX>;
        $r55[i0] = 1;

     label9:
        if i0 == 72 goto label10;

        if i0 == 84 goto label10;

        if i0 == 80 goto label10;

        if i0 == 47 goto label10;

        if i0 == 46 goto label10;

        if i0 < 48 goto label11;

        if i0 > 57 goto label11;

     label10:
        $r56 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_HTTP_PROTOCOL>;
        $r56[i0] = 1;

     label11:
        if i0 < 48 goto label12;

        if i0 > 57 goto label12;

        $r57 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_NUMERIC>;
        $r57[i0] = 1;

     label12:
        if i0 < 97 goto label13;

        if i0 <= 122 goto label14;

     label13:
        if i0 < 65 goto label15;

        if i0 > 90 goto label15;

     label14:
        $r58 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_ALPHA>;
        $r58[i0] = 1;

     label15:
        $r59 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_ALPHA>;
        $z2 = $r59[i0];
        if $z2 != 0 goto label16;

        $r60 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_NUMERIC>;
        $z3 = $r60[i0];
        if $z3 != 0 goto label16;

        if i0 == 45 goto label16;

        if i0 == 46 goto label16;

        if i0 == 95 goto label16;

        if i0 != 126 goto label17;

     label16:
        $r61 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_UNRESERVED>;
        $r61[i0] = 1;

     label17:
        if i0 == 33 goto label18;

        if i0 == 36 goto label18;

        if i0 == 38 goto label18;

        if i0 == 39 goto label18;

        if i0 == 40 goto label18;

        if i0 == 41 goto label18;

        if i0 == 42 goto label18;

        if i0 == 43 goto label18;

        if i0 == 44 goto label18;

        if i0 == 59 goto label18;

        if i0 != 61 goto label19;

     label18:
        $r62 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_SUBDELIM>;
        $r62[i0] = 1;

     label19:
        $r63 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_UNRESERVED>;
        $z4 = $r63[i0];
        if $z4 != 0 goto label20;

        if i0 == 37 goto label20;

        $r64 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_SUBDELIM>;
        $z5 = $r64[i0];
        if $z5 != 0 goto label20;

        if i0 != 58 goto label21;

     label20:
        $r65 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_USERINFO>;
        $r65[i0] = 1;

     label21:
        if i0 == 34 goto label22;

        if i0 == 60 goto label22;

        if i0 == 62 goto label22;

        if i0 == 91 goto label22;

        if i0 == 92 goto label22;

        if i0 == 93 goto label22;

        if i0 == 94 goto label22;

        if i0 == 96 goto label22;

        if i0 == 123 goto label22;

        if i0 == 124 goto label22;

        if i0 != 125 goto label23;

     label22:
        $r66 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_RELAXABLE>;
        $r66[i0] = 1;

     label23:
        i0 = i0 + 1;

     label24:
        if i0 < 128 goto label0;

        r67 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("tomcat.util.http.parser.HttpParser.requestTargetAllow");
        if r67 == null goto label30;

        i1 = 0;
        goto label29;

     label25:
        c2 = virtualinvoke r67.<java.lang.String: char charAt(int)>(i1);
        if c2 == 123 goto label26;

        if c2 == 125 goto label26;

        if c2 != 124 goto label27;

     label26:
        $r68 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] REQUEST_TARGET_ALLOW>;
        $r68[c2] = 1;
        goto label28;

     label27:
        $r69 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.juli.logging.Log log>;
        $r70 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm>;
        $r71 = newarray (java.lang.Object)[1];
        $r72 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2);
        $r71[0] = $r72;
        $r73 = virtualinvoke $r70.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("http.invalidRequestTargetCharacter", $r71);
        interfaceinvoke $r69.<org.apache.juli.logging.Log: void warn(java.lang.Object)>($r73);

     label28:
        i1 = i1 + 1;

     label29:
        $i3 = virtualinvoke r67.<java.lang.String: int length()>();
        if i1 < $i3 goto label25;

     label30:
        $r74 = new org.apache.tomcat.util.http.parser.HttpParser;
        specialinvoke $r74.<org.apache.tomcat.util.http.parser.HttpParser: void <init>(java.lang.String,java.lang.String)>(null, null);
        <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.HttpParser DEFAULT> = $r74;
        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        org.apache.tomcat.util.http.parser.HttpParser r0;
        java.lang.String r1, r2;
        int i0;
        boolean[] $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.tomcat.util.http.parser.HttpParser;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r3 = newarray (boolean)[128];
        r0.<org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_NOT_REQUEST_TARGET> = $r3;
        $r4 = newarray (boolean)[128];
        r0.<org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_ABSOLUTEPATH_RELAXED> = $r4;
        $r5 = newarray (boolean)[128];
        r0.<org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_QUERY_RELAXED> = $r5;
        i0 = 0;
        goto label7;

     label0:
        $r6 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_CONTROL>;
        $z0 = $r6[i0];
        if $z0 != 0 goto label1;

        if i0 > 127 goto label1;

        if i0 == 32 goto label1;

        if i0 == 34 goto label1;

        if i0 == 35 goto label1;

        if i0 == 60 goto label1;

        if i0 == 62 goto label1;

        if i0 == 92 goto label1;

        if i0 == 94 goto label1;

        if i0 == 96 goto label1;

        if i0 == 123 goto label1;

        if i0 == 124 goto label1;

        if i0 != 125 goto label2;

     label1:
        $r7 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] REQUEST_TARGET_ALLOW>;
        $z1 = $r7[i0];
        if $z1 != 0 goto label2;

        $r8 = r0.<org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_NOT_REQUEST_TARGET>;
        $r8[i0] = 1;

     label2:
        $r9 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_USERINFO>;
        $z2 = $r9[i0];
        if $z2 != 0 goto label3;

        if i0 == 64 goto label3;

        if i0 == 47 goto label3;

        $r10 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] REQUEST_TARGET_ALLOW>;
        $z3 = $r10[i0];
        if $z3 == 0 goto label4;

     label3:
        $r11 = r0.<org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_ABSOLUTEPATH_RELAXED>;
        $r11[i0] = 1;

     label4:
        $r12 = r0.<org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_ABSOLUTEPATH_RELAXED>;
        $z4 = $r12[i0];
        if $z4 != 0 goto label5;

        if i0 == 63 goto label5;

        $r13 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] REQUEST_TARGET_ALLOW>;
        $z5 = $r13[i0];
        if $z5 == 0 goto label6;

     label5:
        $r14 = r0.<org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_QUERY_RELAXED>;
        $r14[i0] = 1;

     label6:
        i0 = i0 + 1;

     label7:
        if i0 < 128 goto label0;

        $r15 = r0.<org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_ABSOLUTEPATH_RELAXED>;
        specialinvoke r0.<org.apache.tomcat.util.http.parser.HttpParser: void relax(boolean[],java.lang.String)>($r15, r1);
        $r16 = r0.<org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_QUERY_RELAXED>;
        specialinvoke r0.<org.apache.tomcat.util.http.parser.HttpParser: void relax(boolean[],java.lang.String)>($r16, r2);
        return;
    }

    public static java.util.Map parseAuthorizationDigest(java.io.StringReader) throws java.lang.IllegalArgumentException, java.io.IOException
    {
        java.io.StringReader r0;
        java.util.HashMap $r1, r2;
        java.lang.String r3, $r11, r13;
        null_type n0;
        java.util.Locale $r4;
        java.lang.Integer r5;
        org.apache.tomcat.util.http.parser.HttpParser$SkipResult $r6, $r7, $r8, $r9, $r16, $r17;
        java.util.Map $r10;
        java.lang.Object $r12;
        int $i0;
        java.lang.IllegalArgumentException $r14;
        boolean $z0;

        r0 := @parameter0: java.io.StringReader;
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>()>();
        r2 = $r1;
        $r6 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.HttpParser$SkipResult skipConstant(java.io.Reader,java.lang.String)>(r0, "Digest");
        $r7 = <org.apache.tomcat.util.http.parser.HttpParser$SkipResult: org.apache.tomcat.util.http.parser.HttpParser$SkipResult FOUND>;
        if $r6 == $r7 goto label0;

        return null;

     label0:
        r3 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>(r0);
        if r3 != null goto label13;

        return null;

     label1:
        $r8 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.HttpParser$SkipResult skipConstant(java.io.Reader,java.lang.String)>(r0, "=");
        $r9 = <org.apache.tomcat.util.http.parser.HttpParser$SkipResult: org.apache.tomcat.util.http.parser.HttpParser$SkipResult FOUND>;
        if $r8 == $r9 goto label2;

        return null;

     label2:
        n0 = null;
        $r10 = <org.apache.tomcat.util.http.parser.HttpParser: java.util.Map fieldTypes>;
        $r4 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r11 = virtualinvoke r3.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4);
        $r12 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);
        r5 = (java.lang.Integer) $r12;
        if r5 != null goto label3;

        r5 = <org.apache.tomcat.util.http.parser.HttpParser: java.lang.Integer FIELD_TYPE_TOKEN_OR_QUOTED_STRING>;

     label3:
        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();
        tableswitch($i0)
        {
            case 0: goto label4;
            case 1: goto label5;
            case 2: goto label6;
            case 3: goto label7;
            case 4: goto label8;
            default: goto label9;
        };

     label4:
        r13 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>(r0);
        goto label10;

     label5:
        r13 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>(r0, 0);
        goto label10;

     label6:
        r13 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readTokenOrQuotedString(java.io.Reader,boolean)>(r0, 0);
        goto label10;

     label7:
        r13 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readLhex(java.io.Reader)>(r0);
        goto label10;

     label8:
        r13 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedToken(java.io.Reader)>(r0);
        goto label10;

     label9:
        $r14 = new java.lang.IllegalArgumentException;
        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TODO i18n: Unsupported type");
        throw $r14;

     label10:
        if r13 != null goto label11;

        return null;

     label11:
        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r13);
        $r16 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.HttpParser$SkipResult skipConstant(java.io.Reader,java.lang.String)>(r0, ",");
        $r17 = <org.apache.tomcat.util.http.parser.HttpParser$SkipResult: org.apache.tomcat.util.http.parser.HttpParser$SkipResult NOT_FOUND>;
        if $r16 != $r17 goto label12;

        return null;

     label12:
        r3 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>(r0);
        if r3 != null goto label13;

        return null;

     label13:
        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("");
        if $z0 == 0 goto label1;

        return r2;
    }

    public static org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader) throws java.io.IOException
    {
        java.io.StringReader r0;
        java.lang.String r1, r2, r5, r6, $r14;
        java.util.LinkedHashMap r3, $r10;
        org.apache.tomcat.util.http.parser.HttpParser$SkipResult r4, $r8, $r9, $r11, $r12, $r13, $r16, $r17;
        java.util.Locale $r7;
        int $i0, $i1;
        org.apache.tomcat.util.http.parser.MediaType $r18;

        r0 := @parameter0: java.io.StringReader;
        r1 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>(r0);
        if r1 == null goto label0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i0 != 0 goto label1;

     label0:
        return null;

     label1:
        $r8 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.HttpParser$SkipResult skipConstant(java.io.Reader,java.lang.String)>(r0, "/");
        $r9 = <org.apache.tomcat.util.http.parser.HttpParser$SkipResult: org.apache.tomcat.util.http.parser.HttpParser$SkipResult NOT_FOUND>;
        if $r8 != $r9 goto label2;

        return null;

     label2:
        r2 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>(r0);
        if r2 == null goto label3;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i1 != 0 goto label4;

     label3:
        return null;

     label4:
        $r10 = new java.util.LinkedHashMap;
        specialinvoke $r10.<java.util.LinkedHashMap: void <init>()>();
        r3 = $r10;
        r4 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.HttpParser$SkipResult skipConstant(java.io.Reader,java.lang.String)>(r0, ";");
        $r11 = <org.apache.tomcat.util.http.parser.HttpParser$SkipResult: org.apache.tomcat.util.http.parser.HttpParser$SkipResult NOT_FOUND>;
        if r4 != $r11 goto label8;

        return null;

     label5:
        r5 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>(r0);
        r6 = "";
        $r12 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.HttpParser$SkipResult skipConstant(java.io.Reader,java.lang.String)>(r0, "=");
        $r13 = <org.apache.tomcat.util.http.parser.HttpParser$SkipResult: org.apache.tomcat.util.http.parser.HttpParser$SkipResult FOUND>;
        if $r12 != $r13 goto label6;

        r6 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readTokenOrQuotedString(java.io.Reader,boolean)>(r0, 1);

     label6:
        if r5 == null goto label7;

        $r7 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r14 = virtualinvoke r5.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r7);
        virtualinvoke r3.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r6);

     label7:
        r4 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.HttpParser$SkipResult skipConstant(java.io.Reader,java.lang.String)>(r0, ";");
        $r16 = <org.apache.tomcat.util.http.parser.HttpParser$SkipResult: org.apache.tomcat.util.http.parser.HttpParser$SkipResult NOT_FOUND>;
        if r4 != $r16 goto label8;

        return null;

     label8:
        $r17 = <org.apache.tomcat.util.http.parser.HttpParser$SkipResult: org.apache.tomcat.util.http.parser.HttpParser$SkipResult FOUND>;
        if r4 == $r17 goto label5;

        $r18 = new org.apache.tomcat.util.http.parser.MediaType;
        specialinvoke $r18.<org.apache.tomcat.util.http.parser.MediaType: void <init>(java.lang.String,java.lang.String,java.util.LinkedHashMap)>(r1, r2, r3);
        return $r18;
    }

    public boolean isNotRequestTargetRelaxed(int)
    {
        org.apache.tomcat.util.http.parser.HttpParser r0;
        int i0;
        java.lang.ArrayIndexOutOfBoundsException r1, $r3;
        boolean[] $r2;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.http.parser.HttpParser;
        i0 := @parameter0: int;

     label0:
        $r2 = r0.<org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_NOT_REQUEST_TARGET>;
        $z0 = $r2[i0];

     label1:
        return $z0;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        return 1;

        catch java.lang.ArrayIndexOutOfBoundsException from label0 to label1 with label2;
    }

    public boolean isAbsolutePathRelaxed(int)
    {
        org.apache.tomcat.util.http.parser.HttpParser r0;
        int i0;
        java.lang.ArrayIndexOutOfBoundsException r1, $r3;
        boolean[] $r2;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.http.parser.HttpParser;
        i0 := @parameter0: int;

     label0:
        $r2 = r0.<org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_ABSOLUTEPATH_RELAXED>;
        $z0 = $r2[i0];

     label1:
        return $z0;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        return 0;

        catch java.lang.ArrayIndexOutOfBoundsException from label0 to label1 with label2;
    }

    public boolean isQueryRelaxed(int)
    {
        org.apache.tomcat.util.http.parser.HttpParser r0;
        int i0;
        java.lang.ArrayIndexOutOfBoundsException r1, $r3;
        boolean[] $r2;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.http.parser.HttpParser;
        i0 := @parameter0: int;

     label0:
        $r2 = r0.<org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_QUERY_RELAXED>;
        $z0 = $r2[i0];

     label1:
        return $z0;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        return 0;

        catch java.lang.ArrayIndexOutOfBoundsException from label0 to label1 with label2;
    }

    public static java.lang.String unquote(java.lang.String)
    {
        java.lang.String r0, $r5;
        byte b0;
        int i1, i2, $i4, $i6;
        java.lang.StringBuilder r1, $r2;
        char c3, $c5, $c7, $c8;

        r0 := @parameter0: java.lang.String;
        if r0 == null goto label0;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i4 >= 2 goto label1;

     label0:
        return r0;

     label1:
        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);
        if $c5 != 34 goto label2;

        b0 = 1;
        $i6 = virtualinvoke r0.<java.lang.String: int length()>();
        i1 = $i6 - 1;
        goto label3;

     label2:
        b0 = 0;
        i1 = virtualinvoke r0.<java.lang.String: int length()>();

     label3:
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        r1 = $r2;
        i2 = b0;
        goto label7;

     label4:
        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        if $c7 != 92 goto label5;

        i2 = i2 + 1;
        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);
        goto label6;

     label5:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

     label6:
        i2 = i2 + 1;

     label7:
        if i2 < i1 goto label4;

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r5;
    }

    public static boolean isToken(int)
    {
        int i0;
        boolean[] $r0;
        java.lang.ArrayIndexOutOfBoundsException r1, $r2;
        boolean $z0;

        i0 := @parameter0: int;

     label0:
        $r0 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_TOKEN>;
        $z0 = $r0[i0];

     label1:
        return $z0;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;
        return 0;

        catch java.lang.ArrayIndexOutOfBoundsException from label0 to label1 with label2;
    }

    public static boolean isHex(int)
    {
        int i0;
        boolean[] $r0;
        java.lang.ArrayIndexOutOfBoundsException r1, $r2;
        boolean $z0;

        i0 := @parameter0: int;

     label0:
        $r0 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_HEX>;
        $z0 = $r0[i0];

     label1:
        return $z0;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;
        return 0;

        catch java.lang.ArrayIndexOutOfBoundsException from label0 to label1 with label2;
    }

    public static boolean isNotRequestTarget(int)
    {
        int i0;
        org.apache.tomcat.util.http.parser.HttpParser $r0;
        boolean $z0;

        i0 := @parameter0: int;
        $r0 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.HttpParser DEFAULT>;
        $z0 = virtualinvoke $r0.<org.apache.tomcat.util.http.parser.HttpParser: boolean isNotRequestTargetRelaxed(int)>(i0);
        return $z0;
    }

    public static boolean isHttpProtocol(int)
    {
        int i0;
        boolean[] $r0;
        java.lang.ArrayIndexOutOfBoundsException r1, $r2;
        boolean $z0;

        i0 := @parameter0: int;

     label0:
        $r0 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_HTTP_PROTOCOL>;
        $z0 = $r0[i0];

     label1:
        return $z0;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;
        return 0;

        catch java.lang.ArrayIndexOutOfBoundsException from label0 to label1 with label2;
    }

    public static boolean isAlpha(int)
    {
        int i0;
        boolean[] $r0;
        java.lang.ArrayIndexOutOfBoundsException r1, $r2;
        boolean $z0;

        i0 := @parameter0: int;

     label0:
        $r0 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_ALPHA>;
        $z0 = $r0[i0];

     label1:
        return $z0;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;
        return 0;

        catch java.lang.ArrayIndexOutOfBoundsException from label0 to label1 with label2;
    }

    public static boolean isNumeric(int)
    {
        int i0;
        boolean[] $r0;
        java.lang.ArrayIndexOutOfBoundsException r1, $r2;
        boolean $z0;

        i0 := @parameter0: int;

     label0:
        $r0 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_NUMERIC>;
        $z0 = $r0[i0];

     label1:
        return $z0;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;
        return 0;

        catch java.lang.ArrayIndexOutOfBoundsException from label0 to label1 with label2;
    }

    public static boolean isUserInfo(int)
    {
        int i0;
        boolean[] $r0;
        java.lang.ArrayIndexOutOfBoundsException r1, $r2;
        boolean $z0;

        i0 := @parameter0: int;

     label0:
        $r0 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_USERINFO>;
        $z0 = $r0[i0];

     label1:
        return $z0;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;
        return 0;

        catch java.lang.ArrayIndexOutOfBoundsException from label0 to label1 with label2;
    }

    private static boolean isRelaxable(int)
    {
        int i0;
        boolean[] $r0;
        java.lang.ArrayIndexOutOfBoundsException r1, $r2;
        boolean $z0;

        i0 := @parameter0: int;

     label0:
        $r0 = <org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_RELAXABLE>;
        $z0 = $r0[i0];

     label1:
        return $z0;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;
        return 0;

        catch java.lang.ArrayIndexOutOfBoundsException from label0 to label1 with label2;
    }

    public static boolean isAbsolutePath(int)
    {
        int i0;
        org.apache.tomcat.util.http.parser.HttpParser $r0;
        boolean $z0;

        i0 := @parameter0: int;
        $r0 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.HttpParser DEFAULT>;
        $z0 = virtualinvoke $r0.<org.apache.tomcat.util.http.parser.HttpParser: boolean isAbsolutePathRelaxed(int)>(i0);
        return $z0;
    }

    public static boolean isQuery(int)
    {
        int i0;
        org.apache.tomcat.util.http.parser.HttpParser $r0;
        boolean $z0;

        i0 := @parameter0: int;
        $r0 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.http.parser.HttpParser DEFAULT>;
        $z0 = virtualinvoke $r0.<org.apache.tomcat.util.http.parser.HttpParser: boolean isQueryRelaxed(int)>(i0);
        return $z0;
    }

    private static int skipLws(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        int i0;

        r0 := @parameter0: java.io.Reader;
        virtualinvoke r0.<java.io.Reader: void mark(int)>(1);
        i0 = virtualinvoke r0.<java.io.Reader: int read()>();
        goto label1;

     label0:
        virtualinvoke r0.<java.io.Reader: void mark(int)>(1);
        i0 = virtualinvoke r0.<java.io.Reader: int read()>();

     label1:
        if i0 == 32 goto label0;

        if i0 == 9 goto label0;

        if i0 == 10 goto label0;

        if i0 == 13 goto label0;

        virtualinvoke r0.<java.io.Reader: void reset()>();
        return i0;
    }

    static org.apache.tomcat.util.http.parser.HttpParser$SkipResult skipConstant(java.io.Reader, java.lang.String) throws java.io.IOException
    {
        java.io.Reader r0;
        java.lang.String r1;
        int i0, i1, i2, $i5;
        org.apache.tomcat.util.http.parser.HttpParser$SkipResult $r2, $r3, $r4;
        char $c4;

        r0 := @parameter0: java.io.Reader;
        r1 := @parameter1: java.lang.String;
        i0 = virtualinvoke r1.<java.lang.String: int length()>();
        staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>(r0);
        virtualinvoke r0.<java.io.Reader: void mark(int)>(i0);
        i1 = virtualinvoke r0.<java.io.Reader: int read()>();
        i2 = 0;
        goto label4;

     label0:
        if i2 != 0 goto label1;

        if i1 != -1 goto label1;

        $r2 = <org.apache.tomcat.util.http.parser.HttpParser$SkipResult: org.apache.tomcat.util.http.parser.HttpParser$SkipResult EOF>;
        return $r2;

     label1:
        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);
        if i1 == $c4 goto label2;

        virtualinvoke r0.<java.io.Reader: void reset()>();
        $r3 = <org.apache.tomcat.util.http.parser.HttpParser$SkipResult: org.apache.tomcat.util.http.parser.HttpParser$SkipResult NOT_FOUND>;
        return $r3;

     label2:
        $i5 = i0 - 1;
        if i2 == $i5 goto label3;

        i1 = virtualinvoke r0.<java.io.Reader: int read()>();

     label3:
        i2 = i2 + 1;

     label4:
        if i2 < i0 goto label0;

        $r4 = <org.apache.tomcat.util.http.parser.HttpParser$SkipResult: org.apache.tomcat.util.http.parser.HttpParser$SkipResult FOUND>;
        return $r4;
    }

    static java.lang.String readToken(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        java.lang.StringBuilder $r1, r2;
        int i0, $i3;
        char $c2;
        boolean $z0;
        java.lang.String $r4;

        r0 := @parameter0: java.io.Reader;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        r2 = $r1;
        staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>(r0);
        virtualinvoke r0.<java.io.Reader: void mark(int)>(1);
        i0 = virtualinvoke r0.<java.io.Reader: int read()>();
        goto label1;

     label0:
        $c2 = (char) i0;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);
        virtualinvoke r0.<java.io.Reader: void mark(int)>(1);
        i0 = virtualinvoke r0.<java.io.Reader: int read()>();

     label1:
        if i0 == -1 goto label2;

        $z0 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: boolean isToken(int)>(i0);
        if $z0 != 0 goto label0;

     label2:
        virtualinvoke r0.<java.io.Reader: void reset()>();
        if i0 == -1 goto label3;

        $i3 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();
        if $i3 != 0 goto label3;

        return null;

     label3:
        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r4;
    }

    private static java.lang.String readQuotedString(java.io.Reader, boolean) throws java.io.IOException
    {
        java.io.Reader r0;
        boolean z0;
        int i0, i2, i3;
        java.lang.StringBuilder r1, $r2;
        char $c4, $c5;
        java.lang.String $r8;

        r0 := @parameter0: java.io.Reader;
        z0 := @parameter1: boolean;
        staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>(r0);
        i0 = virtualinvoke r0.<java.io.Reader: int read()>();
        if i0 == 34 goto label0;

        return null;

     label0:
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        r1 = $r2;
        if z0 == 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

     label1:
        i2 = virtualinvoke r0.<java.io.Reader: int read()>();
        goto label7;

     label2:
        if i2 != -1 goto label3;

        return null;

     label3:
        if i2 != 92 goto label5;

        i3 = virtualinvoke r0.<java.io.Reader: int read()>();
        if z0 == 0 goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

     label4:
        $c4 = (char) i3;
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);
        goto label6;

     label5:
        $c5 = (char) i2;
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

     label6:
        i2 = virtualinvoke r0.<java.io.Reader: int read()>();

     label7:
        if i2 != 34 goto label2;

        if z0 == 0 goto label8;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

     label8:
        $r8 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r8;
    }

    private static java.lang.String readTokenOrQuotedString(java.io.Reader, boolean) throws java.io.IOException
    {
        java.io.Reader r0;
        boolean z0;
        int i0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.io.Reader;
        z0 := @parameter1: boolean;
        i0 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>(r0);
        if i0 != 34 goto label0;

        $r1 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readQuotedString(java.io.Reader,boolean)>(r0, z0);
        return $r1;

     label0:
        $r2 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: java.lang.String readToken(java.io.Reader)>(r0);
        return $r2;
    }

    private static java.lang.String readQuotedToken(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        java.lang.StringBuilder $r1, r2;
        boolean z0, $z1, $z2;
        int i0, i3, $i5;
        char $c2, $c4;
        java.lang.String $r5;

        r0 := @parameter0: java.io.Reader;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        r2 = $r1;
        z0 = 0;
        staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>(r0);
        virtualinvoke r0.<java.io.Reader: void mark(int)>(1);
        i0 = virtualinvoke r0.<java.io.Reader: int read()>();
        if i0 != 34 goto label0;

        z0 = 1;
        goto label3;

     label0:
        if i0 == -1 goto label1;

        $z1 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: boolean isToken(int)>(i0);
        if $z1 != 0 goto label2;

     label1:
        return null;

     label2:
        $c2 = (char) i0;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

     label3:
        virtualinvoke r0.<java.io.Reader: void mark(int)>(1);
        i3 = virtualinvoke r0.<java.io.Reader: int read()>();
        goto label5;

     label4:
        $c4 = (char) i3;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);
        virtualinvoke r0.<java.io.Reader: void mark(int)>(1);
        i3 = virtualinvoke r0.<java.io.Reader: int read()>();

     label5:
        if i3 == -1 goto label6;

        $z2 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: boolean isToken(int)>(i3);
        if $z2 != 0 goto label4;

     label6:
        if z0 == 0 goto label7;

        if i3 == 34 goto label8;

        return null;

     label7:
        virtualinvoke r0.<java.io.Reader: void reset()>();

     label8:
        if i3 == -1 goto label9;

        $i5 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();
        if $i5 != 0 goto label9;

        return null;

     label9:
        $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r5;
    }

    private static java.lang.String readLhex(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        java.lang.StringBuilder $r1, r2;
        boolean z0, $z1, $z2;
        int i0, i3, $i5;
        char $c2, $c4;
        java.lang.String $r5;

        r0 := @parameter0: java.io.Reader;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        r2 = $r1;
        z0 = 0;
        staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: int skipLws(java.io.Reader)>(r0);
        virtualinvoke r0.<java.io.Reader: void mark(int)>(1);
        i0 = virtualinvoke r0.<java.io.Reader: int read()>();
        if i0 != 34 goto label0;

        z0 = 1;
        goto label4;

     label0:
        if i0 == -1 goto label1;

        $z1 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: boolean isHex(int)>(i0);
        if $z1 != 0 goto label2;

     label1:
        return null;

     label2:
        if 65 > i0 goto label3;

        if i0 > 70 goto label3;

        i0 = i0 + 32;

     label3:
        $c2 = (char) i0;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

     label4:
        virtualinvoke r0.<java.io.Reader: void mark(int)>(1);
        i3 = virtualinvoke r0.<java.io.Reader: int read()>();
        goto label7;

     label5:
        if 65 > i3 goto label6;

        if i3 > 70 goto label6;

        i3 = i3 + 32;

     label6:
        $c4 = (char) i3;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);
        virtualinvoke r0.<java.io.Reader: void mark(int)>(1);
        i3 = virtualinvoke r0.<java.io.Reader: int read()>();

     label7:
        if i3 == -1 goto label8;

        $z2 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: boolean isHex(int)>(i3);
        if $z2 != 0 goto label5;

     label8:
        if z0 == 0 goto label9;

        if i3 == 34 goto label10;

        return null;

     label9:
        virtualinvoke r0.<java.io.Reader: void reset()>();

     label10:
        if i3 == -1 goto label11;

        $i5 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();
        if $i5 != 0 goto label11;

        return null;

     label11:
        $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r5;
    }

    static int readHostIPv4(java.io.Reader, boolean) throws java.io.IOException
    {
        java.io.Reader r0;
        boolean z0, $z1, $z2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i10;
        org.apache.tomcat.util.res.StringManager $r1, $r7, $r10, $r13, $r16;
        java.lang.IllegalArgumentException $r2, $r6, $r9, $r12, $r15;
        java.lang.Object[] $r3, $r17;
        java.lang.String $r4, $r5, $r8, $r11, $r14, $r18, $r19;
        char $c9;

        r0 := @parameter0: java.io.Reader;
        z0 := @parameter1: boolean;
        i0 = -1;
        i1 = 1;
        i2 = 0;
        virtualinvoke r0.<java.io.Reader: void mark(int)>(1);

     label0:
        i3 = virtualinvoke r0.<java.io.Reader: int read()>();
        if i3 != 46 goto label4;

        if i0 <= -1 goto label1;

        if i0 >= 256 goto label1;

        i1 = i1 + 1;
        i0 = -1;
        goto label16;

     label1:
        if z0 != 0 goto label2;

        if i0 != -1 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;
        $r1 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm>;
        $r3 = newarray (java.lang.Object)[1];
        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);
        $r3[0] = $r4;
        $r5 = virtualinvoke $r1.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("http.invalidOctet", $r3);
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r2;

     label3:
        virtualinvoke r0.<java.io.Reader: void reset()>();
        $i4 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: int readHostDomainName(java.io.Reader)>(r0);
        return $i4;

     label4:
        $z1 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: boolean isNumeric(int)>(i3);
        if $z1 == 0 goto label8;

        if i0 != -1 goto label5;

        i0 = i3 - 48;
        goto label16;

     label5:
        if i0 != 0 goto label7;

        if z0 == 0 goto label6;

        $r6 = new java.lang.IllegalArgumentException;
        $r7 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm>;
        $r8 = virtualinvoke $r7.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("http.invalidLeadingZero");
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);
        throw $r6;

     label6:
        virtualinvoke r0.<java.io.Reader: void reset()>();
        $i5 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: int readHostDomainName(java.io.Reader)>(r0);
        return $i5;

     label7:
        $i6 = i0 * 10;
        $i7 = $i6 + i3;
        i0 = $i7 - 48;
        goto label16;

     label8:
        if i3 != 58 goto label9;

        goto label17;

     label9:
        if i3 != -1 goto label11;

        if z0 == 0 goto label10;

        $r9 = new java.lang.IllegalArgumentException;
        $r10 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm>;
        $r11 = virtualinvoke $r10.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("http.noClosingBracket");
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);
        throw $r9;

     label10:
        i2 = -1;
        goto label17;

     label11:
        if i3 != 93 goto label13;

        if z0 == 0 goto label12;

        i2 = i2 + 1;
        goto label17;

     label12:
        $r12 = new java.lang.IllegalArgumentException;
        $r13 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm>;
        $r14 = virtualinvoke $r13.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("http.closingBracket");
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);
        throw $r12;

     label13:
        if z0 != 0 goto label15;

        $z2 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: boolean isAlpha(int)>(i3);
        if $z2 != 0 goto label14;

        if i3 != 45 goto label15;

     label14:
        virtualinvoke r0.<java.io.Reader: void reset()>();
        $i8 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: int readHostDomainName(java.io.Reader)>(r0);
        return $i8;

     label15:
        $r15 = new java.lang.IllegalArgumentException;
        $r16 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm>;
        $r17 = newarray (java.lang.Object)[1];
        $c9 = (char) i3;
        $r18 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c9);
        $r17[0] = $r18;
        $r19 = virtualinvoke $r16.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("http.illegalCharacterIpv4", $r17);
        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);
        throw $r15;

     label16:
        i2 = i2 + 1;
        goto label0;

     label17:
        if i1 != 4 goto label18;

        if i0 < 0 goto label18;

        if i0 <= 255 goto label19;

     label18:
        virtualinvoke r0.<java.io.Reader: void reset()>();
        $i10 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: int readHostDomainName(java.io.Reader)>(r0);
        return $i10;

     label19:
        return i2;
    }

    static int readHostIPv6(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, i10;
        org.apache.tomcat.util.res.StringManager $r1, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r28, $r33, $r38;
        boolean z0, $z1;
        java.lang.IllegalArgumentException $r2, $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r27, $r32, $r37;
        java.lang.String $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r25, $r26, $r30, $r31, $r35, $r36, $r40, $r41;
        java.lang.Object[] $r24, $r29, $r34, $r39;
        char $c9, $c11;

        r0 := @parameter0: java.io.Reader;
        i0 = virtualinvoke r0.<java.io.Reader: int read()>();
        if i0 == 91 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        $r1 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm>;
        $r3 = virtualinvoke $r1.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("http.noOpeningBracket");
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);
        throw $r2;

     label0:
        i1 = 0;
        i2 = 0;
        i3 = 1;
        z0 = 0;
        i4 = 0;

     label1:
        i5 = virtualinvoke r0.<java.io.Reader: int read()>();
        if i1 != 0 goto label2;

        if i4 != 1 goto label2;

        if i5 == 58 goto label2;

        $r4 = new java.lang.IllegalArgumentException;
        $r5 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm>;
        $r6 = virtualinvoke $r5.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("http.singleColonStart");
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);
        throw $r4;

     label2:
        $z1 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: boolean isHex(int)>(i5);
        if $z1 == 0 goto label4;

        if i2 != 0 goto label3;

        i4 = 0;
        i1 = i1 + 1;

     label3:
        i2 = i2 + 1;
        if i2 <= 4 goto label14;

        $r7 = new java.lang.IllegalArgumentException;
        $r8 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm>;
        $r9 = virtualinvoke $r8.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("http.invalidHextet");
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);
        throw $r7;

     label4:
        if i5 != 58 goto label8;

        if i4 < 2 goto label5;

        $r10 = new java.lang.IllegalArgumentException;
        $r11 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm>;
        $r12 = virtualinvoke $r11.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("http.tooManyColons");
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);
        throw $r10;

     label5:
        if i4 != 1 goto label7;

        if z0 == 0 goto label6;

        $r13 = new java.lang.IllegalArgumentException;
        $r14 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm>;
        $r15 = virtualinvoke $r14.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("http.tooManyDoubleColons");
        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);
        throw $r13;

     label6:
        z0 = 1;
        i1 = i1 + 1;

     label7:
        i4 = i4 + 1;
        virtualinvoke r0.<java.io.Reader: void mark(int)>(4);
        i2 = 0;
        goto label14;

     label8:
        if i5 != 93 goto label10;

        if i4 != 1 goto label9;

        $r16 = new java.lang.IllegalArgumentException;
        $r17 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm>;
        $r18 = virtualinvoke $r17.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("http.singleColonEnd");
        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);
        throw $r16;

     label9:
        i6 = i3 + 1;
        goto label15;

     label10:
        if i5 != 46 goto label13;

        if i1 == 7 goto label11;

        if i1 >= 7 goto label12;

        if z0 == 0 goto label12;

     label11:
        virtualinvoke r0.<java.io.Reader: void reset()>();
        i7 = i3 - i2;
        $i8 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: int readHostIPv4(java.io.Reader,boolean)>(r0, 1);
        i6 = i7 + $i8;
        i1 = i1 + 1;
        goto label15;

     label12:
        $r19 = new java.lang.IllegalArgumentException;
        $r20 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm>;
        $r21 = virtualinvoke $r20.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("http.invalidIpv4Location");
        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);
        throw $r19;

     label13:
        $r22 = new java.lang.IllegalArgumentException;
        $r23 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm>;
        $r24 = newarray (java.lang.Object)[1];
        $c9 = (char) i5;
        $r25 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c9);
        $r24[0] = $r25;
        $r26 = virtualinvoke $r23.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("http.illegalCharacterIpv6", $r24);
        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);
        throw $r22;

     label14:
        i3 = i3 + 1;
        goto label1;

     label15:
        if i1 <= 8 goto label16;

        $r27 = new java.lang.IllegalArgumentException;
        $r28 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm>;
        $r29 = newarray (java.lang.Object)[1];
        $r30 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);
        $r29[0] = $r30;
        $r31 = virtualinvoke $r28.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("http.tooManyHextets", $r29);
        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r31);
        throw $r27;

     label16:
        if i1 == 8 goto label17;

        if z0 != 0 goto label17;

        $r32 = new java.lang.IllegalArgumentException;
        $r33 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm>;
        $r34 = newarray (java.lang.Object)[1];
        $r35 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);
        $r34[0] = $r35;
        $r36 = virtualinvoke $r33.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("http.tooFewHextets", $r34);
        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r36);
        throw $r32;

     label17:
        i10 = virtualinvoke r0.<java.io.Reader: int read()>();
        if i10 != 58 goto label18;

        return i6;

     label18:
        if i10 != -1 goto label19;

        return -1;

     label19:
        $r37 = new java.lang.IllegalArgumentException;
        $r38 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm>;
        $r39 = newarray (java.lang.Object)[1];
        $c11 = (char) i10;
        $r40 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c11);
        $r39[0] = $r40;
        $r41 = virtualinvoke $r38.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String,java.lang.Object[])>("http.illegalAfterIpv6", $r39);
        specialinvoke $r37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r41);
        throw $r37;
    }

    static int readHostDomainName(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        org.apache.tomcat.util.http.parser.HttpParser$DomainParseState r1, $r2;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @parameter0: java.io.Reader;
        r1 = <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState NEW>;
        i0 = 0;
        goto label1;

     label0:
        $i1 = virtualinvoke r0.<java.io.Reader: int read()>();
        r1 = virtualinvoke r1.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState next(int)>($i1);
        i0 = i0 + 1;

     label1:
        $z0 = virtualinvoke r1.<org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: boolean mayContinue()>();
        if $z0 != 0 goto label0;

        $r2 = <org.apache.tomcat.util.http.parser.HttpParser$DomainParseState: org.apache.tomcat.util.http.parser.HttpParser$DomainParseState COLON>;
        if $r2 != r1 goto label2;

        $i2 = i0 - 1;
        return $i2;

     label2:
        return -1;
    }

    static org.apache.tomcat.util.http.parser.HttpParser$SkipResult skipUntil(java.io.Reader, int, char) throws java.io.IOException
    {
        java.io.Reader r0;
        int i0;
        char c1;
        org.apache.tomcat.util.http.parser.HttpParser$SkipResult $r1, $r2;

        r0 := @parameter0: java.io.Reader;
        i0 := @parameter1: int;
        c1 := @parameter2: char;
        goto label1;

     label0:
        i0 = virtualinvoke r0.<java.io.Reader: int read()>();

     label1:
        if i0 == -1 goto label2;

        if i0 != c1 goto label0;

     label2:
        if i0 != -1 goto label3;

        $r1 = <org.apache.tomcat.util.http.parser.HttpParser$SkipResult: org.apache.tomcat.util.http.parser.HttpParser$SkipResult EOF>;
        return $r1;

     label3:
        $r2 = <org.apache.tomcat.util.http.parser.HttpParser$SkipResult: org.apache.tomcat.util.http.parser.HttpParser$SkipResult FOUND>;
        return $r2;
    }

    private void relax(boolean[], java.lang.String)
    {
        org.apache.tomcat.util.http.parser.HttpParser r0;
        boolean[] r1, $r6;
        java.lang.String r2;
        char[] r3, r4;
        int i0, i1, $i3;
        char c2;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.http.parser.HttpParser;
        r1 := @parameter0: boolean[];
        r2 := @parameter1: java.lang.String;
        if r2 == null goto label3;

        $i3 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i3 <= 0 goto label3;

        r3 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();
        r4 = r3;
        i0 = lengthof r3;
        i1 = 0;
        goto label2;

     label0:
        c2 = r4[i1];
        $z0 = staticinvoke <org.apache.tomcat.util.http.parser.HttpParser: boolean isRelaxable(int)>(c2);
        if $z0 == 0 goto label1;

        r1[c2] = 1;
        $r6 = r0.<org.apache.tomcat.util.http.parser.HttpParser: boolean[] IS_NOT_REQUEST_TARGET>;
        $r6[c2] = 0;

     label1:
        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label0;

     label3:
        return;
    }

    static org.apache.tomcat.util.res.StringManager access$0()
    {
        org.apache.tomcat.util.res.StringManager $r0;

        $r0 = <org.apache.tomcat.util.http.parser.HttpParser: org.apache.tomcat.util.res.StringManager sm>;
        return $r0;
    }
}
