public class sun.security.krb5.internal.crypto.Crc32CksumType extends sun.security.krb5.internal.crypto.CksumType
{

    public void <init>()
    {
        sun.security.krb5.internal.crypto.Crc32CksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.Crc32CksumType;
        specialinvoke r0.<sun.security.krb5.internal.crypto.CksumType: void <init>()>();
        return;
    }

    public int confounderSize()
    {
        sun.security.krb5.internal.crypto.Crc32CksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.Crc32CksumType;
        return 0;
    }

    public int cksumType()
    {
        sun.security.krb5.internal.crypto.Crc32CksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.Crc32CksumType;
        return 1;
    }

    public boolean isSafe()
    {
        sun.security.krb5.internal.crypto.Crc32CksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.Crc32CksumType;
        return 0;
    }

    public int cksumSize()
    {
        sun.security.krb5.internal.crypto.Crc32CksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.Crc32CksumType;
        return 4;
    }

    public int keyType()
    {
        sun.security.krb5.internal.crypto.Crc32CksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.Crc32CksumType;
        return 0;
    }

    public int keySize()
    {
        sun.security.krb5.internal.crypto.Crc32CksumType r0;

        r0 := @this: sun.security.krb5.internal.crypto.Crc32CksumType;
        return 0;
    }

    public byte[] calculateChecksum(byte[], int)
    {
        sun.security.krb5.internal.crypto.Crc32CksumType r0;
        byte[] r1, $r2;
        int i0;

        r0 := @this: sun.security.krb5.internal.crypto.Crc32CksumType;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        $r2 = staticinvoke <sun.security.krb5.internal.crypto.crc32: byte[] byte2crc32sum_bytes(byte[],int)>(r1, i0);
        return $r2;
    }

    public byte[] calculateKeyedChecksum(byte[], int, byte[], int)
    {
        sun.security.krb5.internal.crypto.Crc32CksumType r0;
        byte[] r1, r2;
        int i0, i1;

        r0 := @this: sun.security.krb5.internal.crypto.Crc32CksumType;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: byte[];
        i1 := @parameter3: int;
        return null;
    }

    public boolean verifyKeyedChecksum(byte[], int, byte[], byte[], int)
    {
        sun.security.krb5.internal.crypto.Crc32CksumType r0;
        byte[] r1, r2, r3;
        int i0, i1;

        r0 := @this: sun.security.krb5.internal.crypto.Crc32CksumType;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: byte[];
        r3 := @parameter3: byte[];
        i1 := @parameter4: int;
        return 0;
    }

    public static byte[] int2quad(long)
    {
        long l0, $l3, $l4;
        byte[] r0;
        int i1, $i2, $i5;
        byte $b6;

        l0 := @parameter0: long;
        r0 = newarray (byte)[4];
        i1 = 0;

     label0:
        if i1 >= 4 goto label1;

        $i2 = i1 * 8;
        $l3 = l0 >>> $i2;
        $l4 = $l3 & 255L;
        $i5 = (int) $l4;
        $b6 = (byte) $i5;
        r0[i1] = $b6;
        i1 = i1 + 1;
        goto label0;

     label1:
        return r0;
    }

    public static long bytes2long(byte[])
    {
        byte[] r0;
        long l0, $l2, $l3, $l4, l5, $l7, $l8, $l9, l10, $l12, $l13, $l14, l15, $l17, $l18, l19;
        byte $b1, $b6, $b11, $b16;

        r0 := @parameter0: byte[];
        l0 = 0L;
        $b1 = r0[0];
        $l2 = (long) $b1;
        $l3 = $l2 & 255L;
        $l4 = $l3 << 24;
        l5 = l0 | $l4;
        $b6 = r0[1];
        $l7 = (long) $b6;
        $l8 = $l7 & 255L;
        $l9 = $l8 << 16;
        l10 = l5 | $l9;
        $b11 = r0[2];
        $l12 = (long) $b11;
        $l13 = $l12 & 255L;
        $l14 = $l13 << 8;
        l15 = l10 | $l14;
        $b16 = r0[3];
        $l17 = (long) $b16;
        $l18 = $l17 & 255L;
        l19 = l15 | $l18;
        return l19;
    }
}
