public class sun.security.krb5.EncryptionKey extends java.lang.Object implements java.lang.Cloneable
{
    public static final sun.security.krb5.EncryptionKey NULL_KEY;
    private int keyType;
    private byte[] keyValue;
    private java.lang.Integer kvno;
    private static final boolean DEBUG;

    public synchronized int getEType()
    {
        sun.security.krb5.EncryptionKey r0;
        int $i0;

        r0 := @this: sun.security.krb5.EncryptionKey;
        $i0 = r0.<sun.security.krb5.EncryptionKey: int keyType>;
        return $i0;
    }

    public final java.lang.Integer getKeyVersionNumber()
    {
        sun.security.krb5.EncryptionKey r0;
        java.lang.Integer $r1;

        r0 := @this: sun.security.krb5.EncryptionKey;
        $r1 = r0.<sun.security.krb5.EncryptionKey: java.lang.Integer kvno>;
        return $r1;
    }

    public final byte[] getBytes()
    {
        sun.security.krb5.EncryptionKey r0;
        byte[] $r1;

        r0 := @this: sun.security.krb5.EncryptionKey;
        $r1 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        return $r1;
    }

    public synchronized java.lang.Object clone()
    {
        sun.security.krb5.EncryptionKey r0, $r1;
        byte[] $r2;
        int $i0;
        java.lang.Integer $r3;

        r0 := @this: sun.security.krb5.EncryptionKey;
        $r1 = new sun.security.krb5.EncryptionKey;
        $r2 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $i0 = r0.<sun.security.krb5.EncryptionKey: int keyType>;
        $r3 = r0.<sun.security.krb5.EncryptionKey: java.lang.Integer kvno>;
        specialinvoke $r1.<sun.security.krb5.EncryptionKey: void <init>(byte[],int,java.lang.Integer)>($r2, $i0, $r3);
        return $r1;
    }

    public static sun.security.krb5.EncryptionKey[] acquireSecretKeys(sun.security.krb5.PrincipalName, java.lang.String)
    {
        sun.security.krb5.PrincipalName r0;
        java.lang.String r1;
        sun.security.krb5.internal.ktab.KeyTab r2;
        java.lang.IllegalArgumentException $r3;
        sun.security.krb5.EncryptionKey[] $r4;

        r0 := @parameter0: sun.security.krb5.PrincipalName;
        r1 := @parameter1: java.lang.String;
        if r0 != null goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot have null pricipal name to look in keytab.");
        throw $r3;

     label0:
        r2 = staticinvoke <sun.security.krb5.internal.ktab.KeyTab: sun.security.krb5.internal.ktab.KeyTab getInstance(java.lang.String)>(r1);
        $r4 = virtualinvoke r2.<sun.security.krb5.internal.ktab.KeyTab: sun.security.krb5.EncryptionKey[] readServiceKeys(sun.security.krb5.PrincipalName)>(r0);
        return $r4;
    }

    public static sun.security.krb5.EncryptionKey acquireSecretKey(sun.security.krb5.PrincipalName, char[], int, sun.security.krb5.internal.PAData$SaltAndParams) throws sun.security.krb5.KrbException
    {
        sun.security.krb5.PrincipalName r0;
        char[] r1;
        int i0;
        sun.security.krb5.internal.PAData$SaltAndParams r2;
        java.lang.String r3, $r5, $r6;
        byte[] r4;
        sun.security.krb5.EncryptionKey $r7;

        r0 := @parameter0: sun.security.krb5.PrincipalName;
        r1 := @parameter1: char[];
        i0 := @parameter2: int;
        r2 := @parameter3: sun.security.krb5.internal.PAData$SaltAndParams;
        if r2 == null goto label2;

        $r5 = r2.<sun.security.krb5.internal.PAData$SaltAndParams: java.lang.String salt>;
        if $r5 == null goto label0;

        $r6 = r2.<sun.security.krb5.internal.PAData$SaltAndParams: java.lang.String salt>;
        goto label1;

     label0:
        $r6 = virtualinvoke r0.<sun.security.krb5.PrincipalName: java.lang.String getSalt()>();

     label1:
        r3 = $r6;
        r4 = r2.<sun.security.krb5.internal.PAData$SaltAndParams: byte[] params>;
        goto label3;

     label2:
        r3 = virtualinvoke r0.<sun.security.krb5.PrincipalName: java.lang.String getSalt()>();
        r4 = null;

     label3:
        $r7 = staticinvoke <sun.security.krb5.EncryptionKey: sun.security.krb5.EncryptionKey acquireSecretKey(char[],java.lang.String,int,byte[])>(r1, r3, i0, r4);
        return $r7;
    }

    public static sun.security.krb5.EncryptionKey acquireSecretKey(char[], java.lang.String, int, byte[]) throws sun.security.krb5.KrbException
    {
        char[] r0;
        java.lang.String r1;
        int i0;
        byte[] r2, $r4;
        sun.security.krb5.EncryptionKey $r3;

        r0 := @parameter0: char[];
        r1 := @parameter1: java.lang.String;
        i0 := @parameter2: int;
        r2 := @parameter3: byte[];
        $r3 = new sun.security.krb5.EncryptionKey;
        $r4 = staticinvoke <sun.security.krb5.EncryptionKey: byte[] stringToKey(char[],java.lang.String,byte[],int)>(r0, r1, r2, i0);
        specialinvoke $r3.<sun.security.krb5.EncryptionKey: void <init>(byte[],int,java.lang.Integer)>($r4, i0, null);
        return $r3;
    }

    public static sun.security.krb5.EncryptionKey[] acquireSecretKeys(char[], java.lang.String) throws sun.security.krb5.KrbException
    {
        char[] r0;
        java.lang.String r1, $r9, $r12;
        int[] r2;
        sun.security.krb5.EncryptionKey[] r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        sun.security.krb5.EncryptionKey $r4;
        boolean $z0, $z1;
        byte[] $r5;
        java.io.PrintStream $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;

        r0 := @parameter0: char[];
        r1 := @parameter1: java.lang.String;
        r2 = staticinvoke <sun.security.krb5.internal.crypto.EType: int[] getDefaults(java.lang.String)>("default_tkt_enctypes");
        if r2 != null goto label0;

        r2 = staticinvoke <sun.security.krb5.internal.crypto.EType: int[] getBuiltInDefaults()>();

     label0:
        $i1 = lengthof r2;
        r3 = newarray (sun.security.krb5.EncryptionKey)[$i1];
        i0 = 0;

     label1:
        $i2 = lengthof r2;
        if i0 >= $i2 goto label4;

        $i3 = r2[i0];
        $z0 = staticinvoke <sun.security.krb5.internal.crypto.EType: boolean isSupported(int)>($i3);
        if $z0 == 0 goto label2;

        $r4 = new sun.security.krb5.EncryptionKey;
        $i4 = r2[i0];
        $r5 = staticinvoke <sun.security.krb5.EncryptionKey: byte[] stringToKey(char[],java.lang.String,byte[],int)>(r0, r1, null, $i4);
        $i5 = r2[i0];
        specialinvoke $r4.<sun.security.krb5.EncryptionKey: void <init>(byte[],int,java.lang.Integer)>($r5, $i5, null);
        r3[i0] = $r4;
        goto label3;

     label2:
        $z1 = <sun.security.krb5.EncryptionKey: boolean DEBUG>;
        if $z1 == 0 goto label3;

        $r6 = <java.lang.System: java.io.PrintStream out>;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encryption Type ");
        $i6 = r2[i0];
        $r9 = staticinvoke <sun.security.krb5.internal.crypto.EType: java.lang.String toString(int)>($i6);
        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported/enabled");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label3:
        i0 = i0 + 1;
        goto label1;

     label4:
        return r3;
    }

    public void <init>(byte[], int, java.lang.Integer)
    {
        sun.security.krb5.EncryptionKey r0;
        byte[] r1, $r3, $r4;
        int i0, $i1, $i2;
        java.lang.Integer r2;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: sun.security.krb5.EncryptionKey;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.Integer;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r1 == null goto label0;

        $i1 = lengthof r1;
        $r3 = newarray (byte)[$i1];
        r0.<sun.security.krb5.EncryptionKey: byte[] keyValue> = $r3;
        $r4 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $i2 = lengthof r1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, 0, $i2);
        goto label1;

     label0:
        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("EncryptionKey: Key bytes cannot be null!");
        throw $r5;

     label1:
        r0.<sun.security.krb5.EncryptionKey: int keyType> = i0;
        r0.<sun.security.krb5.EncryptionKey: java.lang.Integer kvno> = r2;
        return;
    }

    public void <init>(int, byte[])
    {
        sun.security.krb5.EncryptionKey r0;
        int i0;
        byte[] r1;

        r0 := @this: sun.security.krb5.EncryptionKey;
        i0 := @parameter0: int;
        r1 := @parameter1: byte[];
        specialinvoke r0.<sun.security.krb5.EncryptionKey: void <init>(byte[],int,java.lang.Integer)>(r1, i0, null);
        return;
    }

    private static byte[] stringToKey(char[], java.lang.String, byte[], int) throws sun.security.krb5.KrbCryptoException
    {
        char[] r0, r3, r4;
        java.lang.String r1, $r15, $r18, $r22;
        byte[] r2, r5, r8, r9, r10, r11;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        sun.security.krb5.KrbCryptoException r6, $r21;
        java.lang.Throwable r7, $r24;
        java.lang.IllegalArgumentException $r12;
        java.lang.StringBuilder $r13, $r14, $r16, $r17;
        java.security.GeneralSecurityException $r19, r20;

        r0 := @parameter0: char[];
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: byte[];
        i0 := @parameter3: int;
        r3 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();
        $i1 = lengthof r0;
        $i2 = lengthof r3;
        $i3 = $i1 + $i2;
        r4 = newarray (char)[$i3];
        $i4 = lengthof r0;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r4, 0, $i4);
        $i5 = lengthof r0;
        $i6 = lengthof r3;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, $i5, $i6);
        staticinvoke <java.util.Arrays: void fill(char[],char)>(r3, 48);

     label0:
        lookupswitch(i0)
        {
            case 1: goto label1;
            case 3: goto label1;
            case 16: goto label3;
            case 17: goto label7;
            case 18: goto label9;
            case 23: goto label5;
            default: goto label11;
        };

     label1:
        r5 = staticinvoke <sun.security.krb5.internal.crypto.Des: byte[] string_to_key_bytes(char[])>(r4);

     label2:
        staticinvoke <java.util.Arrays: void fill(char[],char)>(r4, 48);
        return r5;

     label3:
        r8 = staticinvoke <sun.security.krb5.internal.crypto.Des3: byte[] stringToKey(char[])>(r4);

     label4:
        staticinvoke <java.util.Arrays: void fill(char[],char)>(r4, 48);
        return r8;

     label5:
        r9 = staticinvoke <sun.security.krb5.internal.crypto.ArcFourHmac: byte[] stringToKey(char[])>(r0);

     label6:
        staticinvoke <java.util.Arrays: void fill(char[],char)>(r4, 48);
        return r9;

     label7:
        r10 = staticinvoke <sun.security.krb5.internal.crypto.Aes128: byte[] stringToKey(char[],java.lang.String,byte[])>(r0, r1, r2);

     label8:
        staticinvoke <java.util.Arrays: void fill(char[],char)>(r4, 48);
        return r10;

     label9:
        r11 = staticinvoke <sun.security.krb5.internal.crypto.Aes256: byte[] stringToKey(char[],java.lang.String,byte[])>(r0, r1, r2);

     label10:
        staticinvoke <java.util.Arrays: void fill(char[],char)>(r4, 48);
        return r11;

     label11:
        $r12 = new java.lang.IllegalArgumentException;
        $r13 = new java.lang.StringBuilder;
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("encryption type ");
        $r15 = staticinvoke <sun.security.krb5.internal.crypto.EType: java.lang.String toString(int)>(i0);
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);
        throw $r12;

     label12:
        $r19 := @caughtexception;
        r20 = $r19;
        $r21 = new sun.security.krb5.KrbCryptoException;
        $r22 = virtualinvoke r20.<java.security.GeneralSecurityException: java.lang.String getMessage()>();
        specialinvoke $r21.<sun.security.krb5.KrbCryptoException: void <init>(java.lang.String)>($r22);
        r6 = $r21;
        virtualinvoke r6.<sun.security.krb5.KrbCryptoException: java.lang.Throwable initCause(java.lang.Throwable)>(r20);
        throw r6;

     label13:
        $r24 := @caughtexception;
        r7 = $r24;

     label14:
        staticinvoke <java.util.Arrays: void fill(char[],char)>(r4, 48);
        throw r7;

        catch java.security.GeneralSecurityException from label0 to label2 with label12;
        catch java.security.GeneralSecurityException from label3 to label4 with label12;
        catch java.security.GeneralSecurityException from label5 to label6 with label12;
        catch java.security.GeneralSecurityException from label7 to label8 with label12;
        catch java.security.GeneralSecurityException from label9 to label10 with label12;
        catch java.security.GeneralSecurityException from label11 to label12 with label12;
        catch java.lang.Throwable from label0 to label2 with label13;
        catch java.lang.Throwable from label3 to label4 with label13;
        catch java.lang.Throwable from label5 to label6 with label13;
        catch java.lang.Throwable from label7 to label8 with label13;
        catch java.lang.Throwable from label9 to label10 with label13;
        catch java.lang.Throwable from label11 to label14 with label13;
    }

    public void <init>(char[], java.lang.String, java.lang.String) throws sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.EncryptionKey r0;
        char[] r1;
        java.lang.String r2, r3, $r9, $r15;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r11, $r12, $r13, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r5, $r10;
        byte[] $r16;

        r0 := @this: sun.security.krb5.EncryptionKey;
        r1 := @parameter0: char[];
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r3 == null goto label0;

        $z0 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("DES");
        if $z0 == 0 goto label1;

     label0:
        r0.<sun.security.krb5.EncryptionKey: int keyType> = 3;
        goto label6;

     label1:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("DESede");
        if $z1 == 0 goto label2;

        r0.<sun.security.krb5.EncryptionKey: int keyType> = 16;
        goto label6;

     label2:
        $z2 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("AES128");
        if $z2 == 0 goto label3;

        r0.<sun.security.krb5.EncryptionKey: int keyType> = 17;
        goto label6;

     label3:
        $z3 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ArcFourHmac");
        if $z3 == 0 goto label4;

        r0.<sun.security.krb5.EncryptionKey: int keyType> = 23;
        goto label6;

     label4:
        $z4 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("AES256");
        if $z4 == 0 goto label5;

        r0.<sun.security.krb5.EncryptionKey: int keyType> = 18;
        $i0 = r0.<sun.security.krb5.EncryptionKey: int keyType>;
        $z5 = staticinvoke <sun.security.krb5.internal.crypto.EType: boolean isSupported(int)>($i0);
        if $z5 != 0 goto label6;

        $r5 = new java.lang.IllegalArgumentException;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Algorithm ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not enabled");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);
        throw $r5;

     label5:
        $r10 = new java.lang.IllegalArgumentException;
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Algorithm ");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);
        throw $r10;

     label6:
        $i1 = r0.<sun.security.krb5.EncryptionKey: int keyType>;
        $r16 = staticinvoke <sun.security.krb5.EncryptionKey: byte[] stringToKey(char[],java.lang.String,byte[],int)>(r1, r2, null, $i1);
        r0.<sun.security.krb5.EncryptionKey: byte[] keyValue> = $r16;
        r0.<sun.security.krb5.EncryptionKey: java.lang.Integer kvno> = null;
        return;
    }

    void <init>(sun.security.krb5.EncryptionKey) throws sun.security.krb5.KrbCryptoException
    {
        sun.security.krb5.EncryptionKey r0, r1;
        int i0, i1, $i2, $i3, $i9, $i10, $i11, $i15, $i16, $i17, $i18;
        byte[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, r16, $r17, $r18, $r19, $r20;
        byte $b5, $b6, $b7, $b8, $b12, $b14, $b19, $b21;
        boolean $z0, $z1, $z2, $z3;
        short $s13, $s20;
        java.security.GeneralSecurityException $r21, r22;
        sun.security.krb5.KrbCryptoException $r23, r25;
        java.lang.String $r24;

        r0 := @this: sun.security.krb5.EncryptionKey;
        r1 := @parameter0: sun.security.krb5.EncryptionKey;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = r1.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $i2 = lengthof $r2;
        $r3 = staticinvoke <sun.security.krb5.Confounder: byte[] bytes(int)>($i2);
        r0.<sun.security.krb5.EncryptionKey: byte[] keyValue> = $r3;
        i0 = 0;

     label0:
        $r4 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $i3 = lengthof $r4;
        if i0 >= $i3 goto label1;

        $r5 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $b5 = $r5[i0];
        $r6 = r1.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $b6 = $r6[i0];
        $b7 = $b5 ^ $b6;
        $b8 = (byte) $b7;
        $r5[i0] = $b8;
        i0 = i0 + 1;
        goto label0;

     label1:
        $i9 = r1.<sun.security.krb5.EncryptionKey: int keyType>;
        r0.<sun.security.krb5.EncryptionKey: int keyType> = $i9;

     label2:
        $i10 = r0.<sun.security.krb5.EncryptionKey: int keyType>;
        if $i10 == 3 goto label3;

        $i11 = r0.<sun.security.krb5.EncryptionKey: int keyType>;
        if $i11 != 1 goto label5;

     label3:
        $r7 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $z0 = staticinvoke <javax.crypto.spec.DESKeySpec: boolean isParityAdjusted(byte[],int)>($r7, 0);
        if $z0 != 0 goto label4;

        $r8 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $r9 = staticinvoke <sun.security.krb5.internal.crypto.Des: byte[] set_parity(byte[])>($r8);
        r0.<sun.security.krb5.EncryptionKey: byte[] keyValue> = $r9;

     label4:
        $r10 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $z1 = staticinvoke <javax.crypto.spec.DESKeySpec: boolean isWeak(byte[],int)>($r10, 0);
        if $z1 == 0 goto label5;

        $r11 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $r12 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $b12 = $r12[7];
        $s13 = $b12 ^ 240;
        $b14 = (byte) $s13;
        $r11[7] = $b14;

     label5:
        $i15 = r0.<sun.security.krb5.EncryptionKey: int keyType>;
        if $i15 != 16 goto label9;

        $r13 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $z2 = staticinvoke <javax.crypto.spec.DESedeKeySpec: boolean isParityAdjusted(byte[],int)>($r13, 0);
        if $z2 != 0 goto label6;

        $r14 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $r15 = staticinvoke <sun.security.krb5.internal.crypto.Des3: byte[] parityFix(byte[])>($r14);
        r0.<sun.security.krb5.EncryptionKey: byte[] keyValue> = $r15;

     label6:
        r16 = newarray (byte)[8];
        i1 = 0;

     label7:
        $r17 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $i16 = lengthof $r17;
        if i1 >= $i16 goto label9;

        $r18 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r18, i1, r16, 0, 8);
        $z3 = staticinvoke <javax.crypto.spec.DESKeySpec: boolean isWeak(byte[],int)>(r16, 0);
        if $z3 == 0 goto label8;

        $r19 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $i17 = i1 + 7;
        $r20 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $i18 = i1 + 7;
        $b19 = $r20[$i18];
        $s20 = $b19 ^ 240;
        $b21 = (byte) $s20;
        $r19[$i17] = $b21;

     label8:
        i1 = i1 + 8;
        goto label7;

     label9:
        goto label11;

     label10:
        $r21 := @caughtexception;
        r22 = $r21;
        $r23 = new sun.security.krb5.KrbCryptoException;
        $r24 = virtualinvoke r22.<java.security.GeneralSecurityException: java.lang.String getMessage()>();
        specialinvoke $r23.<sun.security.krb5.KrbCryptoException: void <init>(java.lang.String)>($r24);
        r25 = $r23;
        virtualinvoke r25.<sun.security.krb5.KrbCryptoException: java.lang.Throwable initCause(java.lang.Throwable)>(r22);
        throw r25;

     label11:
        return;

        catch java.security.GeneralSecurityException from label2 to label9 with label10;
    }

    public void <init>(sun.security.util.DerValue) throws sun.security.krb5.Asn1Exception, java.io.IOException
    {
        sun.security.krb5.EncryptionKey r0;
        sun.security.util.DerValue r1, r2, r9;
        byte $b0, $b1, $b2, $b4, $b5;
        sun.security.krb5.Asn1Exception $r3, $r7, $r12, $r14;
        sun.security.util.DerInputStream $r4, $r5, $r8, $r10, $r13;
        java.math.BigInteger $r6;
        int $i3, $i6;
        byte[] $r11;

        r0 := @this: sun.security.krb5.EncryptionKey;
        r1 := @parameter0: sun.security.util.DerValue;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $b0 = virtualinvoke r1.<sun.security.util.DerValue: byte getTag()>();
        if $b0 == 48 goto label0;

        $r3 = new sun.security.krb5.Asn1Exception;
        specialinvoke $r3.<sun.security.krb5.Asn1Exception: void <init>(int)>(906);
        throw $r3;

     label0:
        $r4 = virtualinvoke r1.<sun.security.util.DerValue: sun.security.util.DerInputStream getData()>();
        r2 = virtualinvoke $r4.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $b1 = virtualinvoke r2.<sun.security.util.DerValue: byte getTag()>();
        $b2 = $b1 & 31;
        if $b2 != 0 goto label1;

        $r5 = virtualinvoke r2.<sun.security.util.DerValue: sun.security.util.DerInputStream getData()>();
        $r6 = virtualinvoke $r5.<sun.security.util.DerInputStream: java.math.BigInteger getBigInteger()>();
        $i3 = virtualinvoke $r6.<java.math.BigInteger: int intValue()>();
        r0.<sun.security.krb5.EncryptionKey: int keyType> = $i3;
        goto label2;

     label1:
        $r7 = new sun.security.krb5.Asn1Exception;
        specialinvoke $r7.<sun.security.krb5.Asn1Exception: void <init>(int)>(906);
        throw $r7;

     label2:
        $r8 = virtualinvoke r1.<sun.security.util.DerValue: sun.security.util.DerInputStream getData()>();
        r9 = virtualinvoke $r8.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $b4 = virtualinvoke r9.<sun.security.util.DerValue: byte getTag()>();
        $b5 = $b4 & 31;
        if $b5 != 1 goto label3;

        $r10 = virtualinvoke r9.<sun.security.util.DerValue: sun.security.util.DerInputStream getData()>();
        $r11 = virtualinvoke $r10.<sun.security.util.DerInputStream: byte[] getOctetString()>();
        r0.<sun.security.krb5.EncryptionKey: byte[] keyValue> = $r11;
        goto label4;

     label3:
        $r12 = new sun.security.krb5.Asn1Exception;
        specialinvoke $r12.<sun.security.krb5.Asn1Exception: void <init>(int)>(906);
        throw $r12;

     label4:
        $r13 = virtualinvoke r9.<sun.security.util.DerValue: sun.security.util.DerInputStream getData()>();
        $i6 = virtualinvoke $r13.<sun.security.util.DerInputStream: int available()>();
        if $i6 <= 0 goto label5;

        $r14 = new sun.security.krb5.Asn1Exception;
        specialinvoke $r14.<sun.security.krb5.Asn1Exception: void <init>(int)>(906);
        throw $r14;

     label5:
        return;
    }

    public synchronized byte[] asn1Encode() throws sun.security.krb5.Asn1Exception, java.io.IOException
    {
        sun.security.krb5.EncryptionKey r0;
        sun.security.util.DerOutputStream $r1, r2, r3, $r4, $r5, r6, $r8, r9;
        int $i0;
        byte $b1, $b2;
        byte[] $r7, $r10;

        r0 := @this: sun.security.krb5.EncryptionKey;
        $r1 = new sun.security.util.DerOutputStream;
        specialinvoke $r1.<sun.security.util.DerOutputStream: void <init>()>();
        r2 = $r1;
        $r4 = new sun.security.util.DerOutputStream;
        specialinvoke $r4.<sun.security.util.DerOutputStream: void <init>()>();
        r3 = $r4;
        $i0 = r0.<sun.security.krb5.EncryptionKey: int keyType>;
        virtualinvoke r3.<sun.security.util.DerOutputStream: void putInteger(int)>($i0);
        $b1 = staticinvoke <sun.security.util.DerValue: byte createTag(byte,boolean,byte)>(-128, 1, 0);
        virtualinvoke r2.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>($b1, r3);
        $r5 = new sun.security.util.DerOutputStream;
        specialinvoke $r5.<sun.security.util.DerOutputStream: void <init>()>();
        r6 = $r5;
        $r7 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        virtualinvoke r6.<sun.security.util.DerOutputStream: void putOctetString(byte[])>($r7);
        $b2 = staticinvoke <sun.security.util.DerValue: byte createTag(byte,boolean,byte)>(-128, 1, 1);
        virtualinvoke r2.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>($b2, r6);
        $r8 = new sun.security.util.DerOutputStream;
        specialinvoke $r8.<sun.security.util.DerOutputStream: void <init>()>();
        r9 = $r8;
        virtualinvoke r9.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>(48, r2);
        $r10 = virtualinvoke r9.<sun.security.util.DerOutputStream: byte[] toByteArray()>();
        return $r10;
    }

    public synchronized void destroy()
    {
        sun.security.krb5.EncryptionKey r0;
        int i0, $i1;
        byte[] $r1, $r2, $r3;

        r0 := @this: sun.security.krb5.EncryptionKey;
        $r1 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        if $r1 == null goto label1;

        i0 = 0;

     label0:
        $r2 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $i1 = lengthof $r2;
        if i0 >= $i1 goto label1;

        $r3 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $r3[i0] = 0;
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    public static sun.security.krb5.EncryptionKey parse(sun.security.util.DerInputStream, byte, boolean) throws sun.security.krb5.Asn1Exception, java.io.IOException
    {
        sun.security.util.DerInputStream r0, $r4;
        byte b0, $b2, $b3, $b4, $b5;
        boolean z0;
        sun.security.util.DerValue r1, r2;
        int $i1;
        sun.security.krb5.Asn1Exception $r3;
        sun.security.krb5.EncryptionKey $r5;

        r0 := @parameter0: sun.security.util.DerInputStream;
        b0 := @parameter1: byte;
        z0 := @parameter2: boolean;
        if z0 == 0 goto label0;

        $i1 = virtualinvoke r0.<sun.security.util.DerInputStream: int peekByte()>();
        $b2 = (byte) $i1;
        $b3 = $b2 & 31;
        if $b3 == b0 goto label0;

        return null;

     label0:
        r1 = virtualinvoke r0.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $b4 = virtualinvoke r1.<sun.security.util.DerValue: byte getTag()>();
        $b5 = $b4 & 31;
        if b0 == $b5 goto label1;

        $r3 = new sun.security.krb5.Asn1Exception;
        specialinvoke $r3.<sun.security.krb5.Asn1Exception: void <init>(int)>(906);
        throw $r3;

     label1:
        $r4 = virtualinvoke r1.<sun.security.util.DerValue: sun.security.util.DerInputStream getData()>();
        r2 = virtualinvoke $r4.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $r5 = new sun.security.krb5.EncryptionKey;
        specialinvoke $r5.<sun.security.krb5.EncryptionKey: void <init>(sun.security.util.DerValue)>(r2);
        return $r5;
    }

    public synchronized void writeKey(sun.security.krb5.internal.ccache.CCacheOutputStream) throws java.io.IOException
    {
        sun.security.krb5.EncryptionKey r0;
        sun.security.krb5.internal.ccache.CCacheOutputStream r1;
        int i0, $i1, $i2, $i3, $i4;
        byte[] $r2, $r3, $r4;
        byte $b5;

        r0 := @this: sun.security.krb5.EncryptionKey;
        r1 := @parameter0: sun.security.krb5.internal.ccache.CCacheOutputStream;
        $i1 = r0.<sun.security.krb5.EncryptionKey: int keyType>;
        virtualinvoke r1.<sun.security.krb5.internal.ccache.CCacheOutputStream: void write16(int)>($i1);
        $i2 = r0.<sun.security.krb5.EncryptionKey: int keyType>;
        virtualinvoke r1.<sun.security.krb5.internal.ccache.CCacheOutputStream: void write16(int)>($i2);
        $r2 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $i3 = lengthof $r2;
        virtualinvoke r1.<sun.security.krb5.internal.ccache.CCacheOutputStream: void write32(int)>($i3);
        i0 = 0;

     label0:
        $r3 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $i4 = lengthof $r3;
        if i0 >= $i4 goto label1;

        $r4 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $b5 = $r4[i0];
        virtualinvoke r1.<sun.security.krb5.internal.ccache.CCacheOutputStream: void write8(int)>($b5);
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    public java.lang.String toString()
    {
        sun.security.krb5.EncryptionKey r0;
        java.lang.String $r1, $r12, $r17, $r21;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r9, $r13, $r14, $r18, $r19, $r20;
        int $i0, $i1;
        java.lang.Integer $r7;
        byte[] $r10, $r11, $r16;
        sun.misc.HexDumpEncoder $r15;

        r0 := @this: sun.security.krb5.EncryptionKey;
        $r1 = new java.lang.String;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EncryptionKey: keyType=");
        $i0 = r0.<sun.security.krb5.EncryptionKey: int keyType>;
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" kvno=");
        $r7 = r0.<sun.security.krb5.EncryptionKey: java.lang.Integer kvno>;
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" keyValue (hex dump)=");
        $r10 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        if $r10 == null goto label0;

        $r11 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $i1 = lengthof $r11;
        if $i1 != 0 goto label1;

     label0:
        $r12 = " Empty Key";
        goto label2;

     label1:
        $r13 = new java.lang.StringBuilder;
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);
        $r15 = <sun.security.krb5.internal.Krb5: sun.misc.HexDumpEncoder hexDumper>;
        $r16 = r0.<sun.security.krb5.EncryptionKey: byte[] keyValue>;
        $r17 = virtualinvoke $r15.<sun.misc.HexDumpEncoder: java.lang.String encodeBuffer(byte[])>($r16);
        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);
        $r12 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r20 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r1.<java.lang.String: void <init>(java.lang.String)>($r21);
        return $r1;
    }

    public static sun.security.krb5.EncryptionKey findKey(int, sun.security.krb5.EncryptionKey[]) throws sun.security.krb5.KrbException
    {
        int i0;
        sun.security.krb5.EncryptionKey[] r0;
        sun.security.krb5.EncryptionKey $r1;

        i0 := @parameter0: int;
        r0 := @parameter1: sun.security.krb5.EncryptionKey[];
        $r1 = staticinvoke <sun.security.krb5.EncryptionKey: sun.security.krb5.EncryptionKey findKey(int,java.lang.Integer,sun.security.krb5.EncryptionKey[])>(i0, null, r0);
        return $r1;
    }

    private static boolean versionMatches(java.lang.Integer, java.lang.Integer)
    {
        java.lang.Integer r0, r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.lang.Integer;
        r1 := @parameter1: java.lang.Integer;
        if r0 == null goto label0;

        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();
        if $i0 == 0 goto label0;

        if r1 == null goto label0;

        $i1 = virtualinvoke r1.<java.lang.Integer: int intValue()>();
        if $i1 != 0 goto label1;

     label0:
        return 1;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Integer: boolean equals(java.lang.Object)>(r1);
        return $z0;
    }

    public static sun.security.krb5.EncryptionKey findKey(int, java.lang.Integer, sun.security.krb5.EncryptionKey[]) throws sun.security.krb5.KrbException
    {
        int i0, i1, i2, $i3, i4, $i5, i6;
        java.lang.Integer r0, r3, r15;
        sun.security.krb5.EncryptionKey[] r1;
        java.lang.StringBuilder $r2, $r5, $r7, $r8;
        boolean z0, $z1, $z2, $z3, $z4;
        sun.security.krb5.KrbException $r4, $r19;
        java.lang.String $r6, $r9;
        sun.security.krb5.EncryptionKey $r10, $r11, $r12, $r13, $r14, $r16, $r17;
        byte[] $r18;

        i0 := @parameter0: int;
        r0 := @parameter1: java.lang.Integer;
        r1 := @parameter2: sun.security.krb5.EncryptionKey[];
        $z1 = staticinvoke <sun.security.krb5.internal.crypto.EType: boolean isSupported(int)>(i0);
        if $z1 != 0 goto label0;

        $r4 = new sun.security.krb5.KrbException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encryption type ");
        $r6 = staticinvoke <sun.security.krb5.internal.crypto.EType: java.lang.String toString(int)>(i0);
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported/enabled");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<sun.security.krb5.KrbException: void <init>(java.lang.String)>($r9);
        throw $r4;

     label0:
        z0 = 0;
        i1 = 0;

     label1:
        $i3 = lengthof r1;
        if i1 >= $i3 goto label3;

        $r10 = r1[i1];
        i2 = virtualinvoke $r10.<sun.security.krb5.EncryptionKey: int getEType()>();
        $z2 = staticinvoke <sun.security.krb5.internal.crypto.EType: boolean isSupported(int)>(i2);
        if $z2 == 0 goto label2;

        $r11 = r1[i1];
        r3 = virtualinvoke $r11.<sun.security.krb5.EncryptionKey: java.lang.Integer getKeyVersionNumber()>();
        if i0 != i2 goto label2;

        z0 = 1;
        $z3 = staticinvoke <sun.security.krb5.EncryptionKey: boolean versionMatches(java.lang.Integer,java.lang.Integer)>(r0, r3);
        if $z3 == 0 goto label2;

        $r12 = r1[i1];
        return $r12;

     label2:
        i1 = i1 + 1;
        goto label1;

     label3:
        if i0 == 1 goto label4;

        if i0 != 3 goto label8;

     label4:
        i4 = 0;

     label5:
        $i5 = lengthof r1;
        if i4 >= $i5 goto label8;

        $r13 = r1[i4];
        i6 = virtualinvoke $r13.<sun.security.krb5.EncryptionKey: int getEType()>();
        if i6 == 1 goto label6;

        if i6 != 3 goto label7;

     label6:
        $r14 = r1[i4];
        r15 = virtualinvoke $r14.<sun.security.krb5.EncryptionKey: java.lang.Integer getKeyVersionNumber()>();
        z0 = 1;
        $z4 = staticinvoke <sun.security.krb5.EncryptionKey: boolean versionMatches(java.lang.Integer,java.lang.Integer)>(r0, r15);
        if $z4 == 0 goto label7;

        $r16 = new sun.security.krb5.EncryptionKey;
        $r17 = r1[i4];
        $r18 = virtualinvoke $r17.<sun.security.krb5.EncryptionKey: byte[] getBytes()>();
        specialinvoke $r16.<sun.security.krb5.EncryptionKey: void <init>(int,byte[])>(i0, $r18);
        return $r16;

     label7:
        i4 = i4 + 1;
        goto label5;

     label8:
        if z0 == 0 goto label9;

        $r19 = new sun.security.krb5.KrbException;
        specialinvoke $r19.<sun.security.krb5.KrbException: void <init>(int)>(44);
        throw $r19;

     label9:
        return null;
    }

    static void <clinit>()
    {
        sun.security.krb5.EncryptionKey $r0;
        byte[] $r1;
        boolean $z0;

        $r0 = new sun.security.krb5.EncryptionKey;
        $r1 = newarray (byte)[0];
        specialinvoke $r0.<sun.security.krb5.EncryptionKey: void <init>(byte[],int,java.lang.Integer)>($r1, 0, null);
        <sun.security.krb5.EncryptionKey: sun.security.krb5.EncryptionKey NULL_KEY> = $r0;
        $z0 = <sun.security.krb5.internal.Krb5: boolean DEBUG>;
        <sun.security.krb5.EncryptionKey: boolean DEBUG> = $z0;
        return;
    }
}
