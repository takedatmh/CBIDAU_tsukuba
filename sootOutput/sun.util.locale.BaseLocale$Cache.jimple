class sun.util.locale.BaseLocale$Cache extends sun.util.locale.LocaleObjectCache
{
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        sun.util.locale.BaseLocale$Cache r0;

        r0 := @this: sun.util.locale.BaseLocale$Cache;
        specialinvoke r0.<sun.util.locale.LocaleObjectCache: void <init>()>();
        return;
    }

    protected sun.util.locale.BaseLocale$Key normalizeKey(sun.util.locale.BaseLocale$Key)
    {
        sun.util.locale.BaseLocale$Cache r0;
        sun.util.locale.BaseLocale$Key r1, $r11;
        boolean $z0;
        java.lang.ref.SoftReference $r2, $r4, $r6, $r8;
        java.lang.Object $r3, $r5, $r7, $r9;
        java.lang.AssertionError $r10;

        r0 := @this: sun.util.locale.BaseLocale$Cache;
        r1 := @parameter0: sun.util.locale.BaseLocale$Key;
        $z0 = <sun.util.locale.BaseLocale$Cache: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        $r2 = staticinvoke <sun.util.locale.BaseLocale$Key: java.lang.ref.SoftReference access$100(sun.util.locale.BaseLocale$Key)>(r1);
        $r3 = virtualinvoke $r2.<java.lang.ref.SoftReference: java.lang.Object get()>();
        if $r3 == null goto label0;

        $r4 = staticinvoke <sun.util.locale.BaseLocale$Key: java.lang.ref.SoftReference access$200(sun.util.locale.BaseLocale$Key)>(r1);
        $r5 = virtualinvoke $r4.<java.lang.ref.SoftReference: java.lang.Object get()>();
        if $r5 == null goto label0;

        $r6 = staticinvoke <sun.util.locale.BaseLocale$Key: java.lang.ref.SoftReference access$300(sun.util.locale.BaseLocale$Key)>(r1);
        $r7 = virtualinvoke $r6.<java.lang.ref.SoftReference: java.lang.Object get()>();
        if $r7 == null goto label0;

        $r8 = staticinvoke <sun.util.locale.BaseLocale$Key: java.lang.ref.SoftReference access$400(sun.util.locale.BaseLocale$Key)>(r1);
        $r9 = virtualinvoke $r8.<java.lang.ref.SoftReference: java.lang.Object get()>();
        if $r9 != null goto label1;

     label0:
        $r10 = new java.lang.AssertionError;
        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();
        throw $r10;

     label1:
        $r11 = staticinvoke <sun.util.locale.BaseLocale$Key: sun.util.locale.BaseLocale$Key normalize(sun.util.locale.BaseLocale$Key)>(r1);
        return $r11;
    }

    protected sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)
    {
        sun.util.locale.BaseLocale$Cache r0;
        sun.util.locale.BaseLocale$Key r1;
        sun.util.locale.BaseLocale $r2;
        java.lang.ref.SoftReference $r3, $r6, $r9, $r12;
        java.lang.Object $r4, $r7, $r10, $r13;
        java.lang.String $r5, $r8, $r11, $r14;

        r0 := @this: sun.util.locale.BaseLocale$Cache;
        r1 := @parameter0: sun.util.locale.BaseLocale$Key;
        $r2 = new sun.util.locale.BaseLocale;
        $r3 = staticinvoke <sun.util.locale.BaseLocale$Key: java.lang.ref.SoftReference access$100(sun.util.locale.BaseLocale$Key)>(r1);
        $r4 = virtualinvoke $r3.<java.lang.ref.SoftReference: java.lang.Object get()>();
        $r5 = (java.lang.String) $r4;
        $r6 = staticinvoke <sun.util.locale.BaseLocale$Key: java.lang.ref.SoftReference access$200(sun.util.locale.BaseLocale$Key)>(r1);
        $r7 = virtualinvoke $r6.<java.lang.ref.SoftReference: java.lang.Object get()>();
        $r8 = (java.lang.String) $r7;
        $r9 = staticinvoke <sun.util.locale.BaseLocale$Key: java.lang.ref.SoftReference access$300(sun.util.locale.BaseLocale$Key)>(r1);
        $r10 = virtualinvoke $r9.<java.lang.ref.SoftReference: java.lang.Object get()>();
        $r11 = (java.lang.String) $r10;
        $r12 = staticinvoke <sun.util.locale.BaseLocale$Key: java.lang.ref.SoftReference access$400(sun.util.locale.BaseLocale$Key)>(r1);
        $r13 = virtualinvoke $r12.<java.lang.ref.SoftReference: java.lang.Object get()>();
        $r14 = (java.lang.String) $r13;
        specialinvoke $r2.<sun.util.locale.BaseLocale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,sun.util.locale.BaseLocale$1)>($r5, $r8, $r11, $r14, null);
        return $r2;
    }

    protected volatile java.lang.Object normalizeKey(java.lang.Object)
    {
        sun.util.locale.BaseLocale$Cache r0;
        java.lang.Object r1;
        sun.util.locale.BaseLocale$Key $r2, $r3;

        r0 := @this: sun.util.locale.BaseLocale$Cache;
        r1 := @parameter0: java.lang.Object;
        $r2 = (sun.util.locale.BaseLocale$Key) r1;
        $r3 = virtualinvoke r0.<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale$Key normalizeKey(sun.util.locale.BaseLocale$Key)>($r2);
        return $r3;
    }

    protected volatile java.lang.Object createObject(java.lang.Object)
    {
        sun.util.locale.BaseLocale$Cache r0;
        java.lang.Object r1;
        sun.util.locale.BaseLocale$Key $r2;
        sun.util.locale.BaseLocale $r3;

        r0 := @this: sun.util.locale.BaseLocale$Cache;
        r1 := @parameter0: java.lang.Object;
        $r2 = (sun.util.locale.BaseLocale$Key) r1;
        $r3 = virtualinvoke r0.<sun.util.locale.BaseLocale$Cache: sun.util.locale.BaseLocale createObject(sun.util.locale.BaseLocale$Key)>($r2);
        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/util/locale/BaseLocale";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.util.locale.BaseLocale$Cache: boolean $assertionsDisabled> = $z1;
        return;
    }
}
