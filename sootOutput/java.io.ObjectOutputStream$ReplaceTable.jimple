class java.io.ObjectOutputStream$ReplaceTable extends java.lang.Object
{
    private final java.io.ObjectOutputStream$HandleTable htab;
    private java.lang.Object[] reps;

    void <init>(int, float)
    {
        java.io.ObjectOutputStream$ReplaceTable r0;
        int i0;
        float f0;
        java.io.ObjectOutputStream$HandleTable $r1;
        java.lang.Object[] $r2;

        r0 := @this: java.io.ObjectOutputStream$ReplaceTable;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new java.io.ObjectOutputStream$HandleTable;
        specialinvoke $r1.<java.io.ObjectOutputStream$HandleTable: void <init>(int,float)>(i0, f0);
        r0.<java.io.ObjectOutputStream$ReplaceTable: java.io.ObjectOutputStream$HandleTable htab> = $r1;
        $r2 = newarray (java.lang.Object)[i0];
        r0.<java.io.ObjectOutputStream$ReplaceTable: java.lang.Object[] reps> = $r2;
        return;
    }

    void assign(java.lang.Object, java.lang.Object)
    {
        java.io.ObjectOutputStream$ReplaceTable r0;
        java.lang.Object r1, r2;
        int i0, $i1;
        java.io.ObjectOutputStream$HandleTable $r3;
        java.lang.Object[] $r4, $r5;

        r0 := @this: java.io.ObjectOutputStream$ReplaceTable;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r3 = r0.<java.io.ObjectOutputStream$ReplaceTable: java.io.ObjectOutputStream$HandleTable htab>;
        i0 = virtualinvoke $r3.<java.io.ObjectOutputStream$HandleTable: int assign(java.lang.Object)>(r1);

     label0:
        $r4 = r0.<java.io.ObjectOutputStream$ReplaceTable: java.lang.Object[] reps>;
        $i1 = lengthof $r4;
        if i0 < $i1 goto label1;

        specialinvoke r0.<java.io.ObjectOutputStream$ReplaceTable: void grow()>();
        goto label0;

     label1:
        $r5 = r0.<java.io.ObjectOutputStream$ReplaceTable: java.lang.Object[] reps>;
        $r5[i0] = r2;
        return;
    }

    java.lang.Object lookup(java.lang.Object)
    {
        java.io.ObjectOutputStream$ReplaceTable r0;
        java.lang.Object r1, $r4;
        int i0;
        java.io.ObjectOutputStream$HandleTable $r2;
        java.lang.Object[] $r3;

        r0 := @this: java.io.ObjectOutputStream$ReplaceTable;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.io.ObjectOutputStream$ReplaceTable: java.io.ObjectOutputStream$HandleTable htab>;
        i0 = virtualinvoke $r2.<java.io.ObjectOutputStream$HandleTable: int lookup(java.lang.Object)>(r1);
        if i0 < 0 goto label0;

        $r3 = r0.<java.io.ObjectOutputStream$ReplaceTable: java.lang.Object[] reps>;
        $r4 = $r3[i0];
        goto label1;

     label0:
        $r4 = r1;

     label1:
        return $r4;
    }

    void clear()
    {
        java.io.ObjectOutputStream$ReplaceTable r0;
        java.lang.Object[] $r1;
        java.io.ObjectOutputStream$HandleTable $r2, $r3;
        int $i0;

        r0 := @this: java.io.ObjectOutputStream$ReplaceTable;
        $r1 = r0.<java.io.ObjectOutputStream$ReplaceTable: java.lang.Object[] reps>;
        $r2 = r0.<java.io.ObjectOutputStream$ReplaceTable: java.io.ObjectOutputStream$HandleTable htab>;
        $i0 = virtualinvoke $r2.<java.io.ObjectOutputStream$HandleTable: int size()>();
        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r1, 0, $i0, null);
        $r3 = r0.<java.io.ObjectOutputStream$ReplaceTable: java.io.ObjectOutputStream$HandleTable htab>;
        virtualinvoke $r3.<java.io.ObjectOutputStream$HandleTable: void clear()>();
        return;
    }

    int size()
    {
        java.io.ObjectOutputStream$ReplaceTable r0;
        java.io.ObjectOutputStream$HandleTable $r1;
        int $i0;

        r0 := @this: java.io.ObjectOutputStream$ReplaceTable;
        $r1 = r0.<java.io.ObjectOutputStream$ReplaceTable: java.io.ObjectOutputStream$HandleTable htab>;
        $i0 = virtualinvoke $r1.<java.io.ObjectOutputStream$HandleTable: int size()>();
        return $i0;
    }

    private void grow()
    {
        java.io.ObjectOutputStream$ReplaceTable r0;
        java.lang.Object[] r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.io.ObjectOutputStream$ReplaceTable;
        $r2 = r0.<java.io.ObjectOutputStream$ReplaceTable: java.lang.Object[] reps>;
        $i0 = lengthof $r2;
        $i1 = $i0 << 1;
        $i2 = $i1 + 1;
        r1 = newarray (java.lang.Object)[$i2];
        $r3 = r0.<java.io.ObjectOutputStream$ReplaceTable: java.lang.Object[] reps>;
        $r4 = r0.<java.io.ObjectOutputStream$ReplaceTable: java.lang.Object[] reps>;
        $i3 = lengthof $r4;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i3);
        r0.<java.io.ObjectOutputStream$ReplaceTable: java.lang.Object[] reps> = r1;
        return;
    }
}
