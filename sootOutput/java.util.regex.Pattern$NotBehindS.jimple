final class java.util.regex.Pattern$NotBehindS extends java.util.regex.Pattern$NotBehind
{

    void <init>(java.util.regex.Pattern$Node, int, int)
    {
        java.util.regex.Pattern$NotBehindS r0;
        java.util.regex.Pattern$Node r1;
        int i0, i1;

        r0 := @this: java.util.regex.Pattern$NotBehindS;
        r1 := @parameter0: java.util.regex.Pattern$Node;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.util.regex.Pattern$NotBehind: void <init>(java.util.regex.Pattern$Node,int,int)>(r1, i0, i1);
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$NotBehindS r0;
        java.util.regex.Matcher r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.CharSequence r2;
        boolean z0, $z1, $z2, $z3, $z4;
        java.util.regex.Pattern$Node $r3, $r4;

        r0 := @this: java.util.regex.Pattern$NotBehindS;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $i8 = r0.<java.util.regex.Pattern$NotBehindS: int rmax>;
        $i9 = neg $i8;
        i1 = staticinvoke <java.util.regex.Pattern: int access$300(java.lang.CharSequence,int,int)>(r2, i0, $i9);
        $i10 = r0.<java.util.regex.Pattern$NotBehindS: int rmin>;
        $i11 = neg $i10;
        i2 = staticinvoke <java.util.regex.Pattern: int access$300(java.lang.CharSequence,int,int)>(r2, i0, $i11);
        i3 = r1.<java.util.regex.Matcher: int 'from'>;
        i4 = r1.<java.util.regex.Matcher: int lookbehindTo>;
        z0 = 0;
        $z1 = r1.<java.util.regex.Matcher: boolean transparentBounds>;
        if $z1 != 0 goto label0;

        $i12 = r1.<java.util.regex.Matcher: int 'from'>;
        goto label1;

     label0:
        $i12 = 0;

     label1:
        i5 = $i12;
        $i13 = i0 - i1;
        i6 = staticinvoke <java.lang.Math: int max(int,int)>($i13, i5);
        r1.<java.util.regex.Matcher: int lookbehindTo> = i0;
        $z2 = r1.<java.util.regex.Matcher: boolean transparentBounds>;
        if $z2 == 0 goto label2;

        r1.<java.util.regex.Matcher: int 'from'> = 0;

     label2:
        i7 = i0 - i2;

     label3:
        if z0 != 0 goto label6;

        if i7 < i6 goto label6;

        $r3 = r0.<java.util.regex.Pattern$NotBehindS: java.util.regex.Pattern$Node cond>;
        z0 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i7, r2);
        $i14 = i7;
        if i7 <= i6 goto label4;

        $i15 = staticinvoke <java.util.regex.Pattern: int access$300(java.lang.CharSequence,int,int)>(r2, i7, -1);
        goto label5;

     label4:
        $i15 = 1;

     label5:
        i7 = $i14 - $i15;
        goto label3;

     label6:
        r1.<java.util.regex.Matcher: int 'from'> = i3;
        r1.<java.util.regex.Matcher: int lookbehindTo> = i4;
        if z0 != 0 goto label7;

        $r4 = r0.<java.util.regex.Pattern$NotBehindS: java.util.regex.Pattern$Node next>;
        $z3 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z3 == 0 goto label7;

        $z4 = 1;
        goto label8;

     label7:
        $z4 = 0;

     label8:
        return $z4;
    }
}
