class java.util.Collections$CheckedMap extends java.lang.Object implements java.util.Map, java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.Map m;
    final java.lang.Class keyType;
    final java.lang.Class valueType;
    private transient java.util.Set entrySet;

    private void typeCheck(java.lang.Object, java.lang.Object)
    {
        java.util.Collections$CheckedMap r0;
        java.lang.Object r1, r2;
        java.lang.Class $r3, $r6;
        boolean $z0, $z1;
        java.lang.ClassCastException $r4, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: java.util.Collections$CheckedMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        if r1 == null goto label0;

        $r3 = r0.<java.util.Collections$CheckedMap: java.lang.Class keyType>;
        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);
        if $z0 != 0 goto label0;

        $r4 = new java.lang.ClassCastException;
        $r5 = specialinvoke r0.<java.util.Collections$CheckedMap: java.lang.String badKeyMsg(java.lang.Object)>(r1);
        specialinvoke $r4.<java.lang.ClassCastException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label0:
        if r2 == null goto label1;

        $r6 = r0.<java.util.Collections$CheckedMap: java.lang.Class valueType>;
        $z1 = virtualinvoke $r6.<java.lang.Class: boolean isInstance(java.lang.Object)>(r2);
        if $z1 != 0 goto label1;

        $r7 = new java.lang.ClassCastException;
        $r8 = specialinvoke r0.<java.util.Collections$CheckedMap: java.lang.String badValueMsg(java.lang.Object)>(r2);
        specialinvoke $r7.<java.lang.ClassCastException: void <init>(java.lang.String)>($r8);
        throw $r7;

     label1:
        return;
    }

    private java.lang.String badKeyMsg(java.lang.Object)
    {
        java.util.Collections$CheckedMap r0;
        java.lang.Object r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8;
        java.lang.Class $r4, $r7;
        java.lang.String $r9;

        r0 := @this: java.util.Collections$CheckedMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to insert ");
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key into map with key type ");
        $r7 = r0.<java.util.Collections$CheckedMap: java.lang.Class keyType>;
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r9;
    }

    private java.lang.String badValueMsg(java.lang.Object)
    {
        java.util.Collections$CheckedMap r0;
        java.lang.Object r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8;
        java.lang.Class $r4, $r7;
        java.lang.String $r9;

        r0 := @this: java.util.Collections$CheckedMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to insert ");
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" value into map with value type ");
        $r7 = r0.<java.util.Collections$CheckedMap: java.lang.Class valueType>;
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r9;
    }

    void <init>(java.util.Map, java.lang.Class, java.lang.Class)
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map r1;
        java.lang.Class r2, r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.Collections$CheckedMap;
        r1 := @parameter0: java.util.Map;
        r2 := @parameter1: java.lang.Class;
        r3 := @parameter2: java.lang.Class;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.Collections$CheckedMap: java.util.Set entrySet> = null;
        if r1 == null goto label0;

        if r2 == null goto label0;

        if r3 != null goto label1;

     label0:
        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label1:
        r0.<java.util.Collections$CheckedMap: java.util.Map m> = r1;
        r0.<java.util.Collections$CheckedMap: java.lang.Class keyType> = r2;
        r0.<java.util.Collections$CheckedMap: java.lang.Class valueType> = r3;
        return;
    }

    public int size()
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: java.util.Collections$CheckedMap;
        $r1 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;
        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();
        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap;
        $r1 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;
        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();
        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.Collections$CheckedMap r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;
        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);
        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Collections$CheckedMap r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;
        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r1);
        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.Collections$CheckedMap r0;
        java.lang.Object r1, $r3;
        java.util.Map $r2;

        r0 := @this: java.util.Collections$CheckedMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;
        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        return $r3;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.Collections$CheckedMap r0;
        java.lang.Object r1, $r3;
        java.util.Map $r2;

        r0 := @this: java.util.Collections$CheckedMap;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;
        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);
        return $r3;
    }

    public void clear()
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map $r1;

        r0 := @this: java.util.Collections$CheckedMap;
        $r1 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;
        interfaceinvoke $r1.<java.util.Map: void clear()>();
        return;
    }

    public java.util.Set keySet()
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: java.util.Collections$CheckedMap;
        $r1 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;
        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();
        return $r2;
    }

    public java.util.Collection values()
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: java.util.Collections$CheckedMap;
        $r1 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;
        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();
        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Collections$CheckedMap r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0, $z1;

        r0 := @this: java.util.Collections$CheckedMap;
        r1 := @parameter0: java.lang.Object;
        if r1 == r0 goto label0;

        $r2 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;
        $z0 = interfaceinvoke $r2.<java.util.Map: boolean equals(java.lang.Object)>(r1);
        if $z0 == 0 goto label1;

     label0:
        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int hashCode()
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: java.util.Collections$CheckedMap;
        $r1 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;
        $i0 = interfaceinvoke $r1.<java.util.Map: int hashCode()>();
        return $i0;
    }

    public java.lang.String toString()
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Collections$CheckedMap;
        $r1 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();
        return $r2;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.Collections$CheckedMap r0;
        java.lang.Object r1, r2, $r4;
        java.util.Map $r3;

        r0 := @this: java.util.Collections$CheckedMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        specialinvoke r0.<java.util.Collections$CheckedMap: void typeCheck(java.lang.Object,java.lang.Object)>(r1, r2);
        $r3 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;
        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);
        return $r4;
    }

    public void putAll(java.util.Map)
    {
        java.util.Collections$CheckedMap r0;
        java.util.Map r1, $r15;
        java.lang.Object[] r2, r4;
        java.util.ArrayList r3, $r10;
        int i0, i1, $i2;
        java.lang.Object r5, r7, r8, $r13, $r16, $r17;
        java.util.Map$Entry r6, r14;
        java.util.Set $r9;
        java.util.AbstractMap$SimpleImmutableEntry $r11;
        java.util.Iterator r12;
        boolean $z1;

        r0 := @this: java.util.Collections$CheckedMap;
        r1 := @parameter0: java.util.Map;
        $r9 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();
        r2 = interfaceinvoke $r9.<java.util.Set: java.lang.Object[] toArray()>();
        $r10 = new java.util.ArrayList;
        $i2 = lengthof r2;
        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>($i2);
        r3 = $r10;
        r4 = r2;
        i0 = lengthof r4;
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        r5 = r4[i1];
        r6 = (java.util.Map$Entry) r5;
        r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();
        r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();
        specialinvoke r0.<java.util.Collections$CheckedMap: void typeCheck(java.lang.Object,java.lang.Object)>(r7, r8);
        $r11 = new java.util.AbstractMap$SimpleImmutableEntry;
        specialinvoke $r11.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>(r7, r8);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r11);
        i1 = i1 + 1;
        goto label0;

     label1:
        r12 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label3;

        $r13 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();
        r14 = (java.util.Map$Entry) $r13;
        $r15 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;
        $r16 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r17 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getValue()>();
        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r17);
        goto label2;

     label3:
        return;
    }

    public java.util.Set entrySet()
    {
        java.util.Collections$CheckedMap r0;
        java.util.Collections$CheckedMap$CheckedEntrySet $r1;
        java.util.Set $r2, $r4, $r6;
        java.util.Map $r3;
        java.lang.Class $r5;

        r0 := @this: java.util.Collections$CheckedMap;
        $r2 = r0.<java.util.Collections$CheckedMap: java.util.Set entrySet>;
        if $r2 != null goto label0;

        $r1 = new java.util.Collections$CheckedMap$CheckedEntrySet;
        $r3 = r0.<java.util.Collections$CheckedMap: java.util.Map m>;
        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();
        $r5 = r0.<java.util.Collections$CheckedMap: java.lang.Class valueType>;
        specialinvoke $r1.<java.util.Collections$CheckedMap$CheckedEntrySet: void <init>(java.util.Set,java.lang.Class)>($r4, $r5);
        r0.<java.util.Collections$CheckedMap: java.util.Set entrySet> = $r1;

     label0:
        $r6 = r0.<java.util.Collections$CheckedMap: java.util.Set entrySet>;
        return $r6;
    }
}
