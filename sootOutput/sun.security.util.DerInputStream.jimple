public class sun.security.util.DerInputStream extends java.lang.Object
{
    sun.security.util.DerInputBuffer buffer;
    public byte tag;

    public void <init>(byte[]) throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        byte[] r1;
        int $i0;

        r0 := @this: sun.security.util.DerInputStream;
        r1 := @parameter0: byte[];
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $i0 = lengthof r1;
        specialinvoke r0.<sun.security.util.DerInputStream: void init(byte[],int,int)>(r1, 0, $i0);
        return;
    }

    public void <init>(byte[], int, int) throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        byte[] r1;
        int i0, i1;

        r0 := @this: sun.security.util.DerInputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        specialinvoke r0.<sun.security.util.DerInputStream: void init(byte[],int,int)>(r1, i0, i1);
        return;
    }

    private void init(byte[], int, int) throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        byte[] r1, r2, $r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        sun.security.util.DerIndefLenConverter r3, $r5;
        java.io.IOException $r4;
        byte $b7;
        boolean $z0;
        sun.security.util.DerInputBuffer $r6, $r8, $r9;

        r0 := @this: sun.security.util.DerInputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = i0 + 2;
        $i3 = lengthof r1;
        if $i2 > $i3 goto label0;

        $i4 = i0 + i1;
        $i5 = lengthof r1;
        if $i4 <= $i5 goto label1;

     label0:
        $r4 = new java.io.IOException;
        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Encoding bytes too short");
        throw $r4;

     label1:
        $i6 = i0 + 1;
        $b7 = r1[$i6];
        $z0 = staticinvoke <sun.security.util.DerIndefLenConverter: boolean isIndefinite(int)>($b7);
        if $z0 == 0 goto label2;

        r2 = newarray (byte)[i1];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, r2, 0, i1);
        $r5 = new sun.security.util.DerIndefLenConverter;
        specialinvoke $r5.<sun.security.util.DerIndefLenConverter: void <init>()>();
        r3 = $r5;
        $r6 = new sun.security.util.DerInputBuffer;
        $r7 = virtualinvoke r3.<sun.security.util.DerIndefLenConverter: byte[] convert(byte[])>(r2);
        specialinvoke $r6.<sun.security.util.DerInputBuffer: void <init>(byte[])>($r7);
        r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer> = $r6;
        goto label3;

     label2:
        $r8 = new sun.security.util.DerInputBuffer;
        specialinvoke $r8.<sun.security.util.DerInputBuffer: void <init>(byte[],int,int)>(r1, i0, i1);
        r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer> = $r8;

     label3:
        $r9 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        virtualinvoke $r9.<sun.security.util.DerInputBuffer: void mark(int)>(2147483647);
        return;
    }

    void <init>(sun.security.util.DerInputBuffer)
    {
        sun.security.util.DerInputStream r0;
        sun.security.util.DerInputBuffer r1, $r2;

        r0 := @this: sun.security.util.DerInputStream;
        r1 := @parameter0: sun.security.util.DerInputBuffer;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer> = r1;
        $r2 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        virtualinvoke $r2.<sun.security.util.DerInputBuffer: void mark(int)>(2147483647);
        return;
    }

    public sun.security.util.DerInputStream subStream(int, boolean) throws java.io.IOException
    {
        sun.security.util.DerInputStream r0, $r4;
        int i0;
        boolean z0;
        sun.security.util.DerInputBuffer r1, $r2, $r3;
        long $l1;

        r0 := @this: sun.security.util.DerInputStream;
        i0 := @parameter0: int;
        z0 := @parameter1: boolean;
        $r2 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        r1 = virtualinvoke $r2.<sun.security.util.DerInputBuffer: sun.security.util.DerInputBuffer dup()>();
        virtualinvoke r1.<sun.security.util.DerInputBuffer: void truncate(int)>(i0);
        if z0 == 0 goto label0;

        $r3 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $l1 = (long) i0;
        virtualinvoke $r3.<sun.security.util.DerInputBuffer: long skip(long)>($l1);

     label0:
        $r4 = new sun.security.util.DerInputStream;
        specialinvoke $r4.<sun.security.util.DerInputStream: void <init>(sun.security.util.DerInputBuffer)>(r1);
        return $r4;
    }

    public byte[] toByteArray()
    {
        sun.security.util.DerInputStream r0;
        sun.security.util.DerInputBuffer $r1;
        byte[] $r2;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $r2 = virtualinvoke $r1.<sun.security.util.DerInputBuffer: byte[] toByteArray()>();
        return $r2;
    }

    public int getInteger() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        sun.security.util.DerInputBuffer $r1, $r3, $r4;
        int $i0, $i1, $i2;
        java.io.IOException $r2;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i0 = virtualinvoke $r1.<sun.security.util.DerInputBuffer: int read()>();
        if $i0 == 2 goto label0;

        $r2 = new java.io.IOException;
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("DER input, Integer tag error");
        throw $r2;

     label0:
        $r3 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $r4 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i1 = staticinvoke <sun.security.util.DerInputStream: int getLength(java.io.InputStream)>($r4);
        $i2 = virtualinvoke $r3.<sun.security.util.DerInputBuffer: int getInteger(int)>($i1);
        return $i2;
    }

    public java.math.BigInteger getBigInteger() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        sun.security.util.DerInputBuffer $r1, $r3, $r4;
        int $i0, $i1;
        java.io.IOException $r2;
        java.math.BigInteger $r5;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i0 = virtualinvoke $r1.<sun.security.util.DerInputBuffer: int read()>();
        if $i0 == 2 goto label0;

        $r2 = new java.io.IOException;
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("DER input, Integer tag error");
        throw $r2;

     label0:
        $r3 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $r4 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i1 = staticinvoke <sun.security.util.DerInputStream: int getLength(java.io.InputStream)>($r4);
        $r5 = virtualinvoke $r3.<sun.security.util.DerInputBuffer: java.math.BigInteger getBigInteger(int,boolean)>($i1, 0);
        return $r5;
    }

    public java.math.BigInteger getPositiveBigInteger() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        sun.security.util.DerInputBuffer $r1, $r3, $r4;
        int $i0, $i1;
        java.io.IOException $r2;
        java.math.BigInteger $r5;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i0 = virtualinvoke $r1.<sun.security.util.DerInputBuffer: int read()>();
        if $i0 == 2 goto label0;

        $r2 = new java.io.IOException;
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("DER input, Integer tag error");
        throw $r2;

     label0:
        $r3 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $r4 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i1 = staticinvoke <sun.security.util.DerInputStream: int getLength(java.io.InputStream)>($r4);
        $r5 = virtualinvoke $r3.<sun.security.util.DerInputBuffer: java.math.BigInteger getBigInteger(int,boolean)>($i1, 1);
        return $r5;
    }

    public int getEnumerated() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        sun.security.util.DerInputBuffer $r1, $r3, $r4;
        int $i0, $i1, $i2;
        java.io.IOException $r2;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i0 = virtualinvoke $r1.<sun.security.util.DerInputBuffer: int read()>();
        if $i0 == 10 goto label0;

        $r2 = new java.io.IOException;
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("DER input, Enumerated tag error");
        throw $r2;

     label0:
        $r3 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $r4 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i1 = staticinvoke <sun.security.util.DerInputStream: int getLength(java.io.InputStream)>($r4);
        $i2 = virtualinvoke $r3.<sun.security.util.DerInputBuffer: int getInteger(int)>($i1);
        return $i2;
    }

    public byte[] getBitString() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        sun.security.util.DerInputBuffer $r1, $r3, $r4;
        int $i0, $i1;
        java.io.IOException $r2;
        byte[] $r5;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i0 = virtualinvoke $r1.<sun.security.util.DerInputBuffer: int read()>();
        if $i0 == 3 goto label0;

        $r2 = new java.io.IOException;
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("DER input not an bit string");
        throw $r2;

     label0:
        $r3 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $r4 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i1 = staticinvoke <sun.security.util.DerInputStream: int getLength(java.io.InputStream)>($r4);
        $r5 = virtualinvoke $r3.<sun.security.util.DerInputBuffer: byte[] getBitString(int)>($i1);
        return $r5;
    }

    public sun.security.util.BitArray getUnalignedBitString() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        byte[] r1;
        sun.security.util.DerInputBuffer $r2, $r4, $r5, $r6;
        java.io.IOException $r3, $r7;
        sun.security.util.BitArray $r8;

        r0 := @this: sun.security.util.DerInputStream;
        $r2 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i2 = virtualinvoke $r2.<sun.security.util.DerInputBuffer: int read()>();
        if $i2 == 3 goto label0;

        $r3 = new java.io.IOException;
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("DER input not a bit string");
        throw $r3;

     label0:
        $r4 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i3 = staticinvoke <sun.security.util.DerInputStream: int getLength(java.io.InputStream)>($r4);
        i0 = $i3 - 1;
        $i4 = i0 * 8;
        $r5 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i5 = virtualinvoke $r5.<sun.security.util.DerInputBuffer: int read()>();
        i1 = $i4 - $i5;
        r1 = newarray (byte)[i0];
        if i0 == 0 goto label1;

        $r6 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i6 = virtualinvoke $r6.<sun.security.util.DerInputBuffer: int read(byte[])>(r1);
        if $i6 == i0 goto label1;

        $r7 = new java.io.IOException;
        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("short read of DER bit string");
        throw $r7;

     label1:
        $r8 = new sun.security.util.BitArray;
        specialinvoke $r8.<sun.security.util.BitArray: void <init>(int,byte[])>(i1, r1);
        return $r8;
    }

    public byte[] getOctetString() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        int i0, $i1, $i2;
        byte[] r1;
        sun.security.util.DerInputBuffer $r2, $r4, $r5;
        java.io.IOException $r3, $r6;

        r0 := @this: sun.security.util.DerInputStream;
        $r2 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i1 = virtualinvoke $r2.<sun.security.util.DerInputBuffer: int read()>();
        if $i1 == 4 goto label0;

        $r3 = new java.io.IOException;
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("DER input not an octet string");
        throw $r3;

     label0:
        $r4 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        i0 = staticinvoke <sun.security.util.DerInputStream: int getLength(java.io.InputStream)>($r4);
        r1 = newarray (byte)[i0];
        if i0 == 0 goto label1;

        $r5 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i2 = virtualinvoke $r5.<sun.security.util.DerInputBuffer: int read(byte[])>(r1);
        if $i2 == i0 goto label1;

        $r6 = new java.io.IOException;
        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("short read of DER octet string");
        throw $r6;

     label1:
        return r1;
    }

    public void getBytes(byte[]) throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        byte[] r1;
        int $i0, $i1, $i2;
        sun.security.util.DerInputBuffer $r2;
        java.io.IOException $r3;

        r0 := @this: sun.security.util.DerInputStream;
        r1 := @parameter0: byte[];
        $i0 = lengthof r1;
        if $i0 == 0 goto label0;

        $r2 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i1 = virtualinvoke $r2.<sun.security.util.DerInputBuffer: int read(byte[])>(r1);
        $i2 = lengthof r1;
        if $i1 == $i2 goto label0;

        $r3 = new java.io.IOException;
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("short read of DER octet string");
        throw $r3;

     label0:
        return;
    }

    public void getNull() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        sun.security.util.DerInputBuffer $r1, $r2;
        int $i0, $i1;
        java.io.IOException $r3;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i0 = virtualinvoke $r1.<sun.security.util.DerInputBuffer: int read()>();
        if $i0 != 5 goto label0;

        $r2 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i1 = virtualinvoke $r2.<sun.security.util.DerInputBuffer: int read()>();
        if $i1 == 0 goto label1;

     label0:
        $r3 = new java.io.IOException;
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("getNull, bad data");
        throw $r3;

     label1:
        return;
    }

    public sun.security.util.ObjectIdentifier getOID() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        sun.security.util.ObjectIdentifier $r1;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = new sun.security.util.ObjectIdentifier;
        specialinvoke $r1.<sun.security.util.ObjectIdentifier: void <init>(sun.security.util.DerInputStream)>(r0);
        return $r1;
    }

    public sun.security.util.DerValue[] getSequence(int) throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        int i0, $i1;
        sun.security.util.DerInputBuffer $r1;
        byte $b2, $b3;
        java.io.IOException $r2;
        sun.security.util.DerValue[] $r3;

        r0 := @this: sun.security.util.DerInputStream;
        i0 := @parameter0: int;
        $r1 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i1 = virtualinvoke $r1.<sun.security.util.DerInputBuffer: int read()>();
        $b2 = (byte) $i1;
        r0.<sun.security.util.DerInputStream: byte tag> = $b2;
        $b3 = r0.<sun.security.util.DerInputStream: byte tag>;
        if $b3 == 48 goto label0;

        $r2 = new java.io.IOException;
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Sequence tag error");
        throw $r2;

     label0:
        $r3 = virtualinvoke r0.<sun.security.util.DerInputStream: sun.security.util.DerValue[] readVector(int)>(i0);
        return $r3;
    }

    public sun.security.util.DerValue[] getSet(int) throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        int i0, $i1;
        sun.security.util.DerInputBuffer $r1;
        byte $b2, $b3;
        java.io.IOException $r2;
        sun.security.util.DerValue[] $r3;

        r0 := @this: sun.security.util.DerInputStream;
        i0 := @parameter0: int;
        $r1 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i1 = virtualinvoke $r1.<sun.security.util.DerInputBuffer: int read()>();
        $b2 = (byte) $i1;
        r0.<sun.security.util.DerInputStream: byte tag> = $b2;
        $b3 = r0.<sun.security.util.DerInputStream: byte tag>;
        if $b3 == 49 goto label0;

        $r2 = new java.io.IOException;
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Set tag error");
        throw $r2;

     label0:
        $r3 = virtualinvoke r0.<sun.security.util.DerInputStream: sun.security.util.DerValue[] readVector(int)>(i0);
        return $r3;
    }

    public sun.security.util.DerValue[] getSet(int, boolean) throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        int i0, $i1;
        boolean z0;
        sun.security.util.DerInputBuffer $r1;
        byte $b2, $b3;
        java.io.IOException $r2;
        sun.security.util.DerValue[] $r3;

        r0 := @this: sun.security.util.DerInputStream;
        i0 := @parameter0: int;
        z0 := @parameter1: boolean;
        $r1 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i1 = virtualinvoke $r1.<sun.security.util.DerInputBuffer: int read()>();
        $b2 = (byte) $i1;
        r0.<sun.security.util.DerInputStream: byte tag> = $b2;
        if z0 != 0 goto label0;

        $b3 = r0.<sun.security.util.DerInputStream: byte tag>;
        if $b3 == 49 goto label0;

        $r2 = new java.io.IOException;
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Set tag error");
        throw $r2;

     label0:
        $r3 = virtualinvoke r0.<sun.security.util.DerInputStream: sun.security.util.DerValue[] readVector(int)>(i0);
        return $r3;
    }

    protected sun.security.util.DerValue[] readVector(int) throws java.io.IOException
    {
        sun.security.util.DerInputStream r0, r4;
        int i0, i2, i3, $i5, $i7, $i10, $i11, $i12, $i13, i14, i15;
        byte b1, b4, $b8, $b9;
        byte[] r1, $r12;
        java.io.DataInputStream r2, $r8;
        sun.security.util.DerIndefLenConverter r3, $r10;
        sun.security.util.DerInputBuffer $r5, $r6, $r7, $r9, $r11, $r13, $r15, $r17, $r21;
        short $s6;
        java.io.IOException $r14, $r23;
        sun.security.util.DerValue[] $r16, r24;
        java.util.Vector $r18, r19;
        sun.security.util.DerValue $r20, r22, $r26;
        java.lang.Object $r25;

        r0 := @this: sun.security.util.DerInputStream;
        i0 := @parameter0: int;
        $r5 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i5 = virtualinvoke $r5.<sun.security.util.DerInputBuffer: int read()>();
        b1 = (byte) $i5;
        $s6 = b1 & 255;
        $r6 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        i2 = staticinvoke <sun.security.util.DerInputStream: int getLength(int,java.io.InputStream)>($s6, $r6);
        if i2 != -1 goto label1;

        $r7 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        i3 = virtualinvoke $r7.<sun.security.util.DerInputBuffer: int available()>();
        b4 = 2;
        $i7 = i3 + b4;
        r1 = newarray (byte)[$i7];
        $b8 = r0.<sun.security.util.DerInputStream: byte tag>;
        r1[0] = $b8;
        r1[1] = b1;
        $r8 = new java.io.DataInputStream;
        $r9 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        specialinvoke $r8.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r9);
        r2 = $r8;
        virtualinvoke r2.<java.io.DataInputStream: void readFully(byte[],int,int)>(r1, b4, i3);
        virtualinvoke r2.<java.io.DataInputStream: void close()>();
        $r10 = new sun.security.util.DerIndefLenConverter;
        specialinvoke $r10.<sun.security.util.DerIndefLenConverter: void <init>()>();
        r3 = $r10;
        $r11 = new sun.security.util.DerInputBuffer;
        $r12 = virtualinvoke r3.<sun.security.util.DerIndefLenConverter: byte[] convert(byte[])>(r1);
        specialinvoke $r11.<sun.security.util.DerInputBuffer: void <init>(byte[])>($r12);
        r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer> = $r11;
        $b9 = r0.<sun.security.util.DerInputStream: byte tag>;
        $r13 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i10 = virtualinvoke $r13.<sun.security.util.DerInputBuffer: int read()>();
        if $b9 == $i10 goto label0;

        $r14 = new java.io.IOException;
        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Indefinite length encoding not supported");
        throw $r14;

     label0:
        $r15 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        i2 = staticinvoke <sun.security.util.DerInputStream: int getLength(java.io.InputStream)>($r15);

     label1:
        if i2 != 0 goto label2;

        $r16 = newarray (sun.security.util.DerValue)[0];
        return $r16;

     label2:
        $r17 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i11 = virtualinvoke $r17.<sun.security.util.DerInputBuffer: int available()>();
        if $i11 != i2 goto label3;

        r4 = r0;
        goto label4;

     label3:
        r4 = virtualinvoke r0.<sun.security.util.DerInputStream: sun.security.util.DerInputStream subStream(int,boolean)>(i2, 1);

     label4:
        $r18 = new java.util.Vector;
        specialinvoke $r18.<java.util.Vector: void <init>(int)>(i0);
        r19 = $r18;

     label5:
        $r20 = new sun.security.util.DerValue;
        $r21 = r4.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        specialinvoke $r20.<sun.security.util.DerValue: void <init>(sun.security.util.DerInputBuffer)>($r21);
        r22 = $r20;
        virtualinvoke r19.<java.util.Vector: void addElement(java.lang.Object)>(r22);
        $i12 = virtualinvoke r4.<sun.security.util.DerInputStream: int available()>();
        if $i12 > 0 goto label5;

        $i13 = virtualinvoke r4.<sun.security.util.DerInputStream: int available()>();
        if $i13 == 0 goto label6;

        $r23 = new java.io.IOException;
        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>("extra data at end of vector");
        throw $r23;

     label6:
        i14 = virtualinvoke r19.<java.util.Vector: int size()>();
        r24 = newarray (sun.security.util.DerValue)[i14];
        i15 = 0;

     label7:
        if i15 >= i14 goto label8;

        $r25 = virtualinvoke r19.<java.util.Vector: java.lang.Object elementAt(int)>(i15);
        $r26 = (sun.security.util.DerValue) $r25;
        r24[i15] = $r26;
        i15 = i15 + 1;
        goto label7;

     label8:
        return r24;
    }

    public sun.security.util.DerValue getDerValue() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        sun.security.util.DerValue $r1;
        sun.security.util.DerInputBuffer $r2;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = new sun.security.util.DerValue;
        $r2 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        specialinvoke $r1.<sun.security.util.DerValue: void <init>(sun.security.util.DerInputBuffer)>($r2);
        return $r1;
    }

    public java.lang.String getUTF8String() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        java.lang.String $r1;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = specialinvoke r0.<sun.security.util.DerInputStream: java.lang.String readString(byte,java.lang.String,java.lang.String)>(12, "UTF-8", "UTF8");
        return $r1;
    }

    public java.lang.String getPrintableString() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        java.lang.String $r1;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = specialinvoke r0.<sun.security.util.DerInputStream: java.lang.String readString(byte,java.lang.String,java.lang.String)>(19, "Printable", "ASCII");
        return $r1;
    }

    public java.lang.String getT61String() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        java.lang.String $r1;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = specialinvoke r0.<sun.security.util.DerInputStream: java.lang.String readString(byte,java.lang.String,java.lang.String)>(20, "T61", "ISO-8859-1");
        return $r1;
    }

    public java.lang.String getIA5String() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        java.lang.String $r1;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = specialinvoke r0.<sun.security.util.DerInputStream: java.lang.String readString(byte,java.lang.String,java.lang.String)>(22, "IA5", "ASCII");
        return $r1;
    }

    public java.lang.String getBMPString() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        java.lang.String $r1;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = specialinvoke r0.<sun.security.util.DerInputStream: java.lang.String readString(byte,java.lang.String,java.lang.String)>(30, "BMP", "UnicodeBigUnmarked");
        return $r1;
    }

    public java.lang.String getGeneralString() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        java.lang.String $r1;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = specialinvoke r0.<sun.security.util.DerInputStream: java.lang.String readString(byte,java.lang.String,java.lang.String)>(27, "General", "ASCII");
        return $r1;
    }

    private java.lang.String readString(byte, java.lang.String, java.lang.String) throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        byte b0;
        java.lang.String r1, r2, $r10, $r18, $r19;
        java.lang.StringBuilder $r3, $r7, $r8, $r9, $r14, $r15, $r16, $r17;
        int i1, $i2, $i3;
        byte[] r4;
        sun.security.util.DerInputBuffer $r5, $r11, $r12;
        java.io.IOException $r6, $r13;

        r0 := @this: sun.security.util.DerInputStream;
        b0 := @parameter0: byte;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        $r5 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i2 = virtualinvoke $r5.<sun.security.util.DerInputBuffer: int read()>();
        if $i2 == b0 goto label0;

        $r6 = new java.io.IOException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DER input not a ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" string");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r10);
        throw $r6;

     label0:
        $r11 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        i1 = staticinvoke <sun.security.util.DerInputStream: int getLength(java.io.InputStream)>($r11);
        r4 = newarray (byte)[i1];
        if i1 == 0 goto label1;

        $r12 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i3 = virtualinvoke $r12.<sun.security.util.DerInputBuffer: int read(byte[])>(r4);
        if $i3 == i1 goto label1;

        $r13 = new java.io.IOException;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("short read of DER ");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" string");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r18);
        throw $r13;

     label1:
        $r19 = new java.lang.String;
        specialinvoke $r19.<java.lang.String: void <init>(byte[],java.lang.String)>(r4, r2);
        return $r19;
    }

    public java.util.Date getUTCTime() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        sun.security.util.DerInputBuffer $r1, $r3, $r4;
        int $i0, $i1;
        java.io.IOException $r2;
        java.util.Date $r5;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i0 = virtualinvoke $r1.<sun.security.util.DerInputBuffer: int read()>();
        if $i0 == 23 goto label0;

        $r2 = new java.io.IOException;
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("DER input, UTCtime tag invalid ");
        throw $r2;

     label0:
        $r3 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $r4 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i1 = staticinvoke <sun.security.util.DerInputStream: int getLength(java.io.InputStream)>($r4);
        $r5 = virtualinvoke $r3.<sun.security.util.DerInputBuffer: java.util.Date getUTCTime(int)>($i1);
        return $r5;
    }

    public java.util.Date getGeneralizedTime() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        sun.security.util.DerInputBuffer $r1, $r3, $r4;
        int $i0, $i1;
        java.io.IOException $r2;
        java.util.Date $r5;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i0 = virtualinvoke $r1.<sun.security.util.DerInputBuffer: int read()>();
        if $i0 == 24 goto label0;

        $r2 = new java.io.IOException;
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("DER input, GeneralizedTime tag invalid ");
        throw $r2;

     label0:
        $r3 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $r4 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i1 = staticinvoke <sun.security.util.DerInputStream: int getLength(java.io.InputStream)>($r4);
        $r5 = virtualinvoke $r3.<sun.security.util.DerInputBuffer: java.util.Date getGeneralizedTime(int)>($i1);
        return $r5;
    }

    int getByte() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        sun.security.util.DerInputBuffer $r1;
        int $i0, $i1;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i0 = virtualinvoke $r1.<sun.security.util.DerInputBuffer: int read()>();
        $i1 = 255 & $i0;
        return $i1;
    }

    public int peekByte() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        sun.security.util.DerInputBuffer $r1;
        int $i0;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i0 = virtualinvoke $r1.<sun.security.util.DerInputBuffer: int peek()>();
        return $i0;
    }

    int getLength() throws java.io.IOException
    {
        sun.security.util.DerInputStream r0;
        sun.security.util.DerInputBuffer $r1;
        int $i0;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i0 = staticinvoke <sun.security.util.DerInputStream: int getLength(java.io.InputStream)>($r1);
        return $i0;
    }

    static int getLength(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        int $i0, $i1;

        r0 := @parameter0: java.io.InputStream;
        $i0 = virtualinvoke r0.<java.io.InputStream: int read()>();
        $i1 = staticinvoke <sun.security.util.DerInputStream: int getLength(int,java.io.InputStream)>($i0, r0);
        return $i1;
    }

    static int getLength(int, java.io.InputStream) throws java.io.IOException
    {
        int i0, i1, i2, $i3, i4, i5, $i6, $i7;
        java.io.InputStream r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r6, $r8;
        java.io.IOException $r2, $r10;
        java.lang.String $r7, $r9;

        i0 := @parameter0: int;
        r0 := @parameter1: java.io.InputStream;
        i1 = i0;
        $i3 = i1 & 128;
        if $i3 != 0 goto label0;

        i2 = i1;
        goto label8;

     label0:
        i4 = i1 & 127;
        if i4 != 0 goto label1;

        return -1;

     label1:
        if i4 < 0 goto label2;

        if i4 <= 4 goto label5;

     label2:
        $r2 = new java.io.IOException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DerInputStream.getLength(): lengthTag=");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
        if i4 >= 0 goto label3;

        $r7 = "incorrect DER encoding.";
        goto label4;

     label3:
        $r7 = "too big.";

     label4:
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r9);
        throw $r2;

     label5:
        i2 = 0;

     label6:
        if i4 <= 0 goto label7;

        i5 = i2 << 8;
        $i6 = virtualinvoke r0.<java.io.InputStream: int read()>();
        $i7 = 255 & $i6;
        i2 = i5 + $i7;
        i4 = i4 + -1;
        goto label6;

     label7:
        if i2 >= 0 goto label8;

        $r10 = new java.io.IOException;
        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("DerInputStream.getLength(): Invalid length bytes");
        throw $r10;

     label8:
        return i2;
    }

    public void mark(int)
    {
        sun.security.util.DerInputStream r0;
        int i0;
        sun.security.util.DerInputBuffer $r1;

        r0 := @this: sun.security.util.DerInputStream;
        i0 := @parameter0: int;
        $r1 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        virtualinvoke $r1.<sun.security.util.DerInputBuffer: void mark(int)>(i0);
        return;
    }

    public void reset()
    {
        sun.security.util.DerInputStream r0;
        sun.security.util.DerInputBuffer $r1;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        virtualinvoke $r1.<sun.security.util.DerInputBuffer: void reset()>();
        return;
    }

    public int available()
    {
        sun.security.util.DerInputStream r0;
        sun.security.util.DerInputBuffer $r1;
        int $i0;

        r0 := @this: sun.security.util.DerInputStream;
        $r1 = r0.<sun.security.util.DerInputStream: sun.security.util.DerInputBuffer buffer>;
        $i0 = virtualinvoke $r1.<sun.security.util.DerInputBuffer: int available()>();
        return $i0;
    }
}
