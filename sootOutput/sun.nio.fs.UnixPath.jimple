class sun.nio.fs.UnixPath extends sun.nio.fs.AbstractPath
{
    private static java.lang.ThreadLocal encoder;
    private final sun.nio.fs.UnixFileSystem fs;
    private final byte[] path;
    private volatile java.lang.String stringValue;
    private int hash;
    private volatile int[] offsets;
    static final boolean $assertionsDisabled;

    void <init>(sun.nio.fs.UnixFileSystem, byte[])
    {
        sun.nio.fs.UnixPath r0;
        sun.nio.fs.UnixFileSystem r1;
        byte[] r2;

        r0 := @this: sun.nio.fs.UnixPath;
        r1 := @parameter0: sun.nio.fs.UnixFileSystem;
        r2 := @parameter1: byte[];
        specialinvoke r0.<sun.nio.fs.AbstractPath: void <init>()>();
        r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem fs> = r1;
        r0.<sun.nio.fs.UnixPath: byte[] path> = r2;
        return;
    }

    void <init>(sun.nio.fs.UnixFileSystem, java.lang.String)
    {
        sun.nio.fs.UnixPath r0;
        sun.nio.fs.UnixFileSystem r1;
        java.lang.String r2, $r3;
        byte[] $r4;

        r0 := @this: sun.nio.fs.UnixPath;
        r1 := @parameter0: sun.nio.fs.UnixFileSystem;
        r2 := @parameter1: java.lang.String;
        $r3 = staticinvoke <sun.nio.fs.UnixPath: java.lang.String normalizeAndCheck(java.lang.String)>(r2);
        $r4 = staticinvoke <sun.nio.fs.UnixPath: byte[] encode(sun.nio.fs.UnixFileSystem,java.lang.String)>(r1, $r3);
        specialinvoke r0.<sun.nio.fs.UnixPath: void <init>(sun.nio.fs.UnixFileSystem,byte[])>(r1, $r4);
        return;
    }

    static java.lang.String normalizeAndCheck(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;
        int i0, i2, $i4, $i5;
        char c1, c3;

        r0 := @parameter0: java.lang.String;
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        c1 = 0;
        i2 = 0;

     label0:
        if i2 >= i0 goto label2;

        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        if c3 != 47 goto label1;

        if c1 != 47 goto label1;

        $i4 = i2 - 1;
        $r1 = staticinvoke <sun.nio.fs.UnixPath: java.lang.String normalize(java.lang.String,int,int)>(r0, i0, $i4);
        return $r1;

     label1:
        staticinvoke <sun.nio.fs.UnixPath: void checkNotNul(java.lang.String,char)>(r0, c3);
        c1 = c3;
        i2 = i2 + 1;
        goto label0;

     label2:
        if c1 != 47 goto label3;

        $i5 = i0 - 1;
        $r2 = staticinvoke <sun.nio.fs.UnixPath: java.lang.String normalize(java.lang.String,int,int)>(r0, i0, $i5);
        return $r2;

     label3:
        return r0;
    }

    private static void checkNotNul(java.lang.String, char)
    {
        java.lang.String r0;
        char c0;
        java.nio.file.InvalidPathException $r1;

        r0 := @parameter0: java.lang.String;
        c0 := @parameter1: char;
        if c0 != 0 goto label0;

        $r1 = new java.nio.file.InvalidPathException;
        specialinvoke $r1.<java.nio.file.InvalidPathException: void <init>(java.lang.String,java.lang.String)>(r0, "Nul character not allowed");
        throw $r1;

     label0:
        return;
    }

    private static java.lang.String normalize(java.lang.String, int, int)
    {
        java.lang.String r0, $r3, $r6;
        int i0, i1, i2, i4, $i6, $i8;
        java.lang.StringBuilder r1, $r2;
        char c3, c5, $c7;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i0 != 0 goto label0;

        return r0;

     label0:
        i2 = i0;

     label1:
        if i2 <= 0 goto label2;

        $i6 = i2 - 1;
        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6);
        if $c7 != 47 goto label2;

        i2 = i2 + -1;
        goto label1;

     label2:
        if i2 != 0 goto label3;

        return "/";

     label3:
        $r2 = new java.lang.StringBuilder;
        $i8 = virtualinvoke r0.<java.lang.String: int length()>();
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i8);
        r1 = $r2;
        if i1 <= 0 goto label4;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i1);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label4:
        c3 = 0;
        i4 = i1;

     label5:
        if i4 >= i2 goto label8;

        c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);
        if c5 != 47 goto label6;

        if c3 != 47 goto label6;

        goto label7;

     label6:
        staticinvoke <sun.nio.fs.UnixPath: void checkNotNul(java.lang.String,char)>(r0, c5);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c5);
        c3 = c5;

     label7:
        i4 = i4 + 1;
        goto label5;

     label8:
        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r6;
    }

    private static byte[] encode(sun.nio.fs.UnixFileSystem, java.lang.String)
    {
        sun.nio.fs.UnixFileSystem r0;
        java.lang.String r1;
        java.lang.ThreadLocal $r2, $r18;
        java.lang.ref.SoftReference r3, $r19;
        java.nio.charset.CharsetEncoder r4, $r13, $r15, $r16;
        java.nio.charset.CodingErrorAction $r5, $r17;
        char[] r6, $r20;
        byte[] r7;
        java.nio.ByteBuffer r8;
        java.nio.CharBuffer r9;
        java.nio.charset.CoderResult r10, r22;
        boolean z0, $z1, $z2, $z3;
        int i0, $i1, $i2, $i3;
        java.lang.Object $r11, $r12;
        java.nio.charset.Charset $r14;
        double $d0, $d1, $d2;
        float $f0;
        java.nio.file.InvalidPathException $r23;

        r0 := @parameter0: sun.nio.fs.UnixFileSystem;
        r1 := @parameter1: java.lang.String;
        $r2 = <sun.nio.fs.UnixPath: java.lang.ThreadLocal encoder>;
        $r11 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();
        r3 = (java.lang.ref.SoftReference) $r11;
        if r3 == null goto label0;

        $r12 = virtualinvoke r3.<java.lang.ref.SoftReference: java.lang.Object get()>();
        $r13 = (java.nio.charset.CharsetEncoder) $r12;
        goto label1;

     label0:
        $r13 = null;

     label1:
        r4 = $r13;
        if r4 != null goto label2;

        $r14 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
        $r15 = virtualinvoke $r14.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();
        $r5 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;
        $r16 = virtualinvoke $r15.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r5);
        $r17 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;
        r4 = virtualinvoke $r16.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r17);
        $r18 = <sun.nio.fs.UnixPath: java.lang.ThreadLocal encoder>;
        $r19 = new java.lang.ref.SoftReference;
        specialinvoke $r19.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r4);
        virtualinvoke $r18.<java.lang.ThreadLocal: void set(java.lang.Object)>($r19);

     label2:
        $r20 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();
        r6 = virtualinvoke r0.<sun.nio.fs.UnixFileSystem: char[] normalizeNativePath(char[])>($r20);
        $i1 = lengthof r6;
        $d0 = (double) $i1;
        $f0 = virtualinvoke r4.<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>();
        $d1 = (double) $f0;
        $d2 = $d0 * $d1;
        $i2 = (int) $d2;
        r7 = newarray (byte)[$i2];
        r8 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r7);
        r9 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(r6);
        virtualinvoke r4.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>();
        r10 = virtualinvoke r4.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>(r9, r8, 1);
        $z1 = virtualinvoke r10.<java.nio.charset.CoderResult: boolean isUnderflow()>();
        if $z1 != 0 goto label3;

        z0 = 1;
        goto label6;

     label3:
        r22 = virtualinvoke r4.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>(r8);
        $z2 = virtualinvoke r22.<java.nio.charset.CoderResult: boolean isUnderflow()>();
        if $z2 != 0 goto label4;

        $z3 = 1;
        goto label5;

     label4:
        $z3 = 0;

     label5:
        z0 = $z3;

     label6:
        if z0 == 0 goto label7;

        $r23 = new java.nio.file.InvalidPathException;
        specialinvoke $r23.<java.nio.file.InvalidPathException: void <init>(java.lang.String,java.lang.String)>(r1, "Malformed input or input contains unmappable chacraters");
        throw $r23;

     label7:
        i0 = virtualinvoke r8.<java.nio.ByteBuffer: int position()>();
        $i3 = lengthof r7;
        if i0 == $i3 goto label8;

        r7 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r7, i0);

     label8:
        return r7;
    }

    byte[] asByteArray()
    {
        sun.nio.fs.UnixPath r0;
        byte[] $r1;

        r0 := @this: sun.nio.fs.UnixPath;
        $r1 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        return $r1;
    }

    byte[] getByteArrayForSysCalls()
    {
        sun.nio.fs.UnixPath r0;
        byte[] r1, $r4, $r5, $r6, $r7, $r8;
        sun.nio.fs.UnixFileSystem $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: sun.nio.fs.UnixPath;
        $r2 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        $z0 = virtualinvoke $r2.<sun.nio.fs.UnixFileSystem: boolean needToResolveAgainstDefaultDirectory()>();
        if $z0 == 0 goto label0;

        $r3 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        $r4 = virtualinvoke $r3.<sun.nio.fs.UnixFileSystem: byte[] defaultDirectory()>();
        $r5 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $r6 = staticinvoke <sun.nio.fs.UnixPath: byte[] resolve(byte[],byte[])>($r4, $r5);
        return $r6;

     label0:
        $z1 = specialinvoke r0.<sun.nio.fs.UnixPath: boolean isEmpty()>();
        if $z1 != 0 goto label1;

        $r7 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        return $r7;

     label1:
        $r8 = newarray (byte)[1];
        $r8[0] = 46;
        r1 = $r8;
        return r1;
    }

    java.lang.String getPathForExceptionMessage()
    {
        sun.nio.fs.UnixPath r0;
        java.lang.String $r1;

        r0 := @this: sun.nio.fs.UnixPath;
        $r1 = virtualinvoke r0.<sun.nio.fs.UnixPath: java.lang.String toString()>();
        return $r1;
    }

    java.lang.String getPathForPermissionCheck()
    {
        sun.nio.fs.UnixPath r0;
        sun.nio.fs.UnixFileSystem $r1;
        boolean $z0;
        java.lang.String $r2, $r4;
        byte[] $r3;

        r0 := @this: sun.nio.fs.UnixPath;
        $r1 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        $z0 = virtualinvoke $r1.<sun.nio.fs.UnixFileSystem: boolean needToResolveAgainstDefaultDirectory()>();
        if $z0 == 0 goto label0;

        $r2 = new java.lang.String;
        $r3 = virtualinvoke r0.<sun.nio.fs.UnixPath: byte[] getByteArrayForSysCalls()>();
        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r3);
        return $r2;

     label0:
        $r4 = virtualinvoke r0.<sun.nio.fs.UnixPath: java.lang.String toString()>();
        return $r4;
    }

    static sun.nio.fs.UnixPath toUnixPath(java.nio.file.Path)
    {
        java.nio.file.Path r0;
        java.lang.NullPointerException $r1;
        boolean $z0;
        java.nio.file.ProviderMismatchException $r2;
        sun.nio.fs.UnixPath $r3;

        r0 := @parameter0: java.nio.file.Path;
        if r0 != null goto label0;

        $r1 = new java.lang.NullPointerException;
        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();
        throw $r1;

     label0:
        $z0 = r0 instanceof sun.nio.fs.UnixPath;
        if $z0 != 0 goto label1;

        $r2 = new java.nio.file.ProviderMismatchException;
        specialinvoke $r2.<java.nio.file.ProviderMismatchException: void <init>()>();
        throw $r2;

     label1:
        $r3 = (sun.nio.fs.UnixPath) r0;
        return $r3;
    }

    private void initOffsets()
    {
        sun.nio.fs.UnixPath r0, r13;
        int i0, i1, $i4, $i5, $i6, $i7, i9, i10, $i11, $i12, $i13;
        byte b2, b3, $b8, $b14;
        java.lang.Throwable r1, $r15;
        int[] $r2, r7, $r14;
        boolean $z0;
        byte[] $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11;

        r0 := @this: sun.nio.fs.UnixPath;
        $r2 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        if $r2 != null goto label15;

        i0 = 0;
        i1 = 0;
        $z0 = specialinvoke r0.<sun.nio.fs.UnixPath: boolean isEmpty()>();
        if $z0 == 0 goto label0;

        i0 = 1;
        goto label3;

     label0:
        $r3 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i5 = lengthof $r3;
        if i1 >= $i5 goto label3;

        $r4 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i6 = i1;
        i1 = i1 + 1;
        b2 = $r4[$i6];
        if b2 == 47 goto label2;

        i0 = i0 + 1;

     label1:
        $r5 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i7 = lengthof $r5;
        if i1 >= $i7 goto label2;

        $r6 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $b8 = $r6[i1];
        if $b8 == 47 goto label2;

        i1 = i1 + 1;
        goto label1;

     label2:
        goto label0;

     label3:
        r7 = newarray (int)[i0];
        i9 = 0;
        i10 = 0;

     label4:
        $r8 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i11 = lengthof $r8;
        if i10 >= $i11 goto label8;

        $r9 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        b3 = $r9[i10];
        if b3 != 47 goto label5;

        i10 = i10 + 1;
        goto label7;

     label5:
        $i12 = i9;
        i9 = i9 + 1;
        $i4 = i10;
        i10 = i10 + 1;
        r7[$i12] = $i4;

     label6:
        $r10 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i13 = lengthof $r10;
        if i10 >= $i13 goto label7;

        $r11 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $b14 = $r11[i10];
        if $b14 == 47 goto label7;

        i10 = i10 + 1;
        goto label6;

     label7:
        goto label4;

     label8:
        r13 = r0;
        entermonitor r0;

     label9:
        $r14 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        if $r14 != null goto label10;

        r0.<sun.nio.fs.UnixPath: int[] offsets> = r7;

     label10:
        exitmonitor r13;

     label11:
        goto label15;

     label12:
        $r15 := @caughtexception;

     label13:
        r1 = $r15;
        exitmonitor r13;

     label14:
        throw r1;

     label15:
        return;

        catch java.lang.Throwable from label9 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private boolean isEmpty()
    {
        sun.nio.fs.UnixPath r0;
        byte[] $r1;
        int $i0;
        boolean $z0;

        r0 := @this: sun.nio.fs.UnixPath;
        $r1 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i0 = lengthof $r1;
        if $i0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private sun.nio.fs.UnixPath emptyPath()
    {
        sun.nio.fs.UnixPath r0, $r1;
        sun.nio.fs.UnixFileSystem $r2;
        byte[] $r3;

        r0 := @this: sun.nio.fs.UnixPath;
        $r1 = new sun.nio.fs.UnixPath;
        $r2 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        $r3 = newarray (byte)[0];
        specialinvoke $r1.<sun.nio.fs.UnixPath: void <init>(sun.nio.fs.UnixFileSystem,byte[])>($r2, $r3);
        return $r1;
    }

    public sun.nio.fs.UnixFileSystem getFileSystem()
    {
        sun.nio.fs.UnixPath r0;
        sun.nio.fs.UnixFileSystem $r1;

        r0 := @this: sun.nio.fs.UnixPath;
        $r1 = r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem fs>;
        return $r1;
    }

    public sun.nio.fs.UnixPath getRoot()
    {
        sun.nio.fs.UnixPath r0, $r4;
        byte[] $r1, $r2;
        int $i0;
        byte $b1;
        sun.nio.fs.UnixFileSystem $r3;

        r0 := @this: sun.nio.fs.UnixPath;
        $r1 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i0 = lengthof $r1;
        if $i0 <= 0 goto label0;

        $r2 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $b1 = $r2[0];
        if $b1 != 47 goto label0;

        $r3 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        $r4 = virtualinvoke $r3.<sun.nio.fs.UnixFileSystem: sun.nio.fs.UnixPath rootDirectory()>();
        return $r4;

     label0:
        return null;
    }

    public sun.nio.fs.UnixPath getFileName()
    {
        sun.nio.fs.UnixPath r0, $r8;
        int i0, i1, i2, $i3, $i5, $i6;
        byte[] r1, $r3, $r4, $r6, $r7;
        int[] $r2, $r5;
        byte $b4;
        sun.nio.fs.UnixFileSystem $r9;

        r0 := @this: sun.nio.fs.UnixPath;
        specialinvoke r0.<sun.nio.fs.UnixPath: void initOffsets()>();
        $r2 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        i0 = lengthof $r2;
        if i0 != 0 goto label0;

        return null;

     label0:
        if i0 != 1 goto label1;

        $r3 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i3 = lengthof $r3;
        if $i3 <= 0 goto label1;

        $r4 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $b4 = $r4[0];
        if $b4 == 47 goto label1;

        return r0;

     label1:
        $r5 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        $i5 = i0 - 1;
        i1 = $r5[$i5];
        $r6 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i6 = lengthof $r6;
        i2 = $i6 - i1;
        r1 = newarray (byte)[i2];
        $r7 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, i1, r1, 0, i2);
        $r8 = new sun.nio.fs.UnixPath;
        $r9 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        specialinvoke $r8.<sun.nio.fs.UnixPath: void <init>(sun.nio.fs.UnixFileSystem,byte[])>($r9, r1);
        return $r8;
    }

    public sun.nio.fs.UnixPath getParent()
    {
        sun.nio.fs.UnixPath r0, $r4, $r6;
        int i0, i1, $i2, $i3;
        byte[] r1, $r5;
        int[] $r2, $r3;
        sun.nio.fs.UnixFileSystem $r7;

        r0 := @this: sun.nio.fs.UnixPath;
        specialinvoke r0.<sun.nio.fs.UnixPath: void initOffsets()>();
        $r2 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        i0 = lengthof $r2;
        if i0 != 0 goto label0;

        return null;

     label0:
        $r3 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        $i2 = i0 - 1;
        $i3 = $r3[$i2];
        i1 = $i3 - 1;
        if i1 > 0 goto label1;

        $r4 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getRoot()>();
        return $r4;

     label1:
        r1 = newarray (byte)[i1];
        $r5 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, 0, i1);
        $r6 = new sun.nio.fs.UnixPath;
        $r7 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        specialinvoke $r6.<sun.nio.fs.UnixPath: void <init>(sun.nio.fs.UnixFileSystem,byte[])>($r7, r1);
        return $r6;
    }

    public int getNameCount()
    {
        sun.nio.fs.UnixPath r0;
        int[] $r1;
        int $i0;

        r0 := @this: sun.nio.fs.UnixPath;
        specialinvoke r0.<sun.nio.fs.UnixPath: void initOffsets()>();
        $r1 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        $i0 = lengthof $r1;
        return $i0;
    }

    public sun.nio.fs.UnixPath getName(int)
    {
        sun.nio.fs.UnixPath r0, $r10;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        byte[] r1, $r7, $r9;
        java.lang.IllegalArgumentException $r2, $r4;
        int[] $r3, $r5, $r6, $r8;
        sun.nio.fs.UnixFileSystem $r11;

        r0 := @this: sun.nio.fs.UnixPath;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.nio.fs.UnixPath: void initOffsets()>();
        if i0 >= 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        $i3 = lengthof $r3;
        if i0 < $i3 goto label1;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r4;

     label1:
        $r5 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        i1 = $r5[i0];
        $r6 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        $i4 = lengthof $r6;
        $i5 = $i4 - 1;
        if i0 != $i5 goto label2;

        $r7 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i6 = lengthof $r7;
        i2 = $i6 - i1;
        goto label3;

     label2:
        $r8 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        $i7 = i0 + 1;
        $i8 = $r8[$i7];
        $i9 = $i8 - i1;
        i2 = $i9 - 1;

     label3:
        r1 = newarray (byte)[i2];
        $r9 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, i1, r1, 0, i2);
        $r10 = new sun.nio.fs.UnixPath;
        $r11 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        specialinvoke $r10.<sun.nio.fs.UnixPath: void <init>(sun.nio.fs.UnixFileSystem,byte[])>($r11, r1);
        return $r10;
    }

    public sun.nio.fs.UnixPath subpath(int, int)
    {
        sun.nio.fs.UnixPath r0, $r13;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        byte[] r1, $r10, $r12;
        java.lang.IllegalArgumentException $r2, $r4, $r6, $r7;
        int[] $r3, $r5, $r8, $r9, $r11;
        sun.nio.fs.UnixFileSystem $r14;

        r0 := @this: sun.nio.fs.UnixPath;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        specialinvoke r0.<sun.nio.fs.UnixPath: void initOffsets()>();
        if i0 >= 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        $i4 = lengthof $r3;
        if i0 < $i4 goto label1;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r4;

     label1:
        $r5 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        $i5 = lengthof $r5;
        if i1 <= $i5 goto label2;

        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r6;

     label2:
        if i0 < i1 goto label3;

        $r7 = new java.lang.IllegalArgumentException;
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r7;

     label3:
        $r8 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        i2 = $r8[i0];
        $r9 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        $i6 = lengthof $r9;
        if i1 != $i6 goto label4;

        $r10 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i7 = lengthof $r10;
        i3 = $i7 - i2;
        goto label5;

     label4:
        $r11 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        $i8 = $r11[i1];
        $i9 = $i8 - i2;
        i3 = $i9 - 1;

     label5:
        r1 = newarray (byte)[i3];
        $r12 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, i2, r1, 0, i3);
        $r13 = new sun.nio.fs.UnixPath;
        $r14 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        specialinvoke $r13.<sun.nio.fs.UnixPath: void <init>(sun.nio.fs.UnixFileSystem,byte[])>($r14, r1);
        return $r13;
    }

    public boolean isAbsolute()
    {
        sun.nio.fs.UnixPath r0;
        byte[] $r1, $r2;
        int $i0;
        byte $b1;
        boolean $z0;

        r0 := @this: sun.nio.fs.UnixPath;
        $r1 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i0 = lengthof $r1;
        if $i0 <= 0 goto label0;

        $r2 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $b1 = $r2[0];
        if $b1 != 47 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private static byte[] resolve(byte[], byte[])
    {
        byte[] r0, r1, r2;
        int i0, i1, $i4, $i5, $i6, $i7, $i8;
        byte $b2, $b3;

        r0 := @parameter0: byte[];
        r1 := @parameter1: byte[];
        i0 = lengthof r0;
        i1 = lengthof r1;
        if i1 != 0 goto label0;

        return r0;

     label0:
        if i0 == 0 goto label1;

        $b2 = r1[0];
        if $b2 != 47 goto label2;

     label1:
        return r1;

     label2:
        if i0 != 1 goto label3;

        $b3 = r0[0];
        if $b3 != 47 goto label3;

        $i4 = i1 + 1;
        r2 = newarray (byte)[$i4];
        r2[0] = 47;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 1, i1);
        goto label4;

     label3:
        $i5 = i0 + 1;
        $i6 = $i5 + i1;
        r2 = newarray (byte)[$i6];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, i0);
        $i7 = lengthof r0;
        r2[$i7] = 47;
        $i8 = i0 + 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i8, i1);

     label4:
        return r2;
    }

    public sun.nio.fs.UnixPath resolve(java.nio.file.Path)
    {
        sun.nio.fs.UnixPath r0, $r4, $r5, $r7;
        java.nio.file.Path r1;
        byte[] r2, r3, $r6;
        int $i0;
        byte $b1;
        sun.nio.fs.UnixFileSystem $r8;

        r0 := @this: sun.nio.fs.UnixPath;
        r1 := @parameter0: java.nio.file.Path;
        $r4 = staticinvoke <sun.nio.fs.UnixPath: sun.nio.fs.UnixPath toUnixPath(java.nio.file.Path)>(r1);
        r2 = $r4.<sun.nio.fs.UnixPath: byte[] path>;
        $i0 = lengthof r2;
        if $i0 <= 0 goto label0;

        $b1 = r2[0];
        if $b1 != 47 goto label0;

        $r5 = (sun.nio.fs.UnixPath) r1;
        return $r5;

     label0:
        $r6 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        r3 = staticinvoke <sun.nio.fs.UnixPath: byte[] resolve(byte[],byte[])>($r6, r2);
        $r7 = new sun.nio.fs.UnixPath;
        $r8 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        specialinvoke $r7.<sun.nio.fs.UnixPath: void <init>(sun.nio.fs.UnixFileSystem,byte[])>($r8, r3);
        return $r7;
    }

    sun.nio.fs.UnixPath resolve(byte[])
    {
        sun.nio.fs.UnixPath r0, $r2, $r4;
        byte[] r1;
        sun.nio.fs.UnixFileSystem $r3;

        r0 := @this: sun.nio.fs.UnixPath;
        r1 := @parameter0: byte[];
        $r2 = new sun.nio.fs.UnixPath;
        $r3 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        specialinvoke $r2.<sun.nio.fs.UnixPath: void <init>(sun.nio.fs.UnixFileSystem,byte[])>($r3, r1);
        $r4 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(java.nio.file.Path)>($r2);
        return $r4;
    }

    public sun.nio.fs.UnixPath relativize(java.nio.file.Path)
    {
        sun.nio.fs.UnixPath r0, r2, r3, $r5, $r7, $r8, $r13, $r16;
        java.nio.file.Path r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, $i15, i16, i17, $i18;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        byte[] r4, $r9, $r11, $r12, r15;
        java.lang.IllegalArgumentException $r6;
        java.lang.AssertionError $r10;
        sun.nio.fs.UnixFileSystem $r14, $r17;

        r0 := @this: sun.nio.fs.UnixPath;
        r1 := @parameter0: java.nio.file.Path;
        r2 = staticinvoke <sun.nio.fs.UnixPath: sun.nio.fs.UnixPath toUnixPath(java.nio.file.Path)>(r1);
        $z1 = virtualinvoke r2.<sun.nio.fs.UnixPath: boolean equals(java.lang.Object)>(r0);
        if $z1 == 0 goto label0;

        $r5 = specialinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath emptyPath()>();
        return $r5;

     label0:
        $z2 = virtualinvoke r0.<sun.nio.fs.UnixPath: boolean isAbsolute()>();
        $z3 = virtualinvoke r2.<sun.nio.fs.UnixPath: boolean isAbsolute()>();
        if $z2 == $z3 goto label1;

        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'other\' is different type of Path");
        throw $r6;

     label1:
        $z4 = specialinvoke r0.<sun.nio.fs.UnixPath: boolean isEmpty()>();
        if $z4 == 0 goto label2;

        return r2;

     label2:
        i0 = virtualinvoke r0.<sun.nio.fs.UnixPath: int getNameCount()>();
        i1 = virtualinvoke r2.<sun.nio.fs.UnixPath: int getNameCount()>();
        if i0 <= i1 goto label3;

        $i7 = i1;
        goto label4;

     label3:
        $i7 = i0;

     label4:
        i2 = $i7;
        i3 = 0;

     label5:
        if i3 >= i2 goto label7;

        $r7 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getName(int)>(i3);
        $r8 = virtualinvoke r2.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getName(int)>(i3);
        $z5 = virtualinvoke $r7.<sun.nio.fs.UnixPath: boolean equals(java.lang.Object)>($r8);
        if $z5 != 0 goto label6;

        goto label7;

     label6:
        i3 = i3 + 1;
        goto label5;

     label7:
        i4 = i0 - i3;
        if i3 >= i1 goto label15;

        r3 = virtualinvoke r2.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath subpath(int,int)>(i3, i1);
        if i4 != 0 goto label8;

        return r3;

     label8:
        z0 = specialinvoke r2.<sun.nio.fs.UnixPath: boolean isEmpty()>();
        $i8 = i4 * 3;
        $r9 = r3.<sun.nio.fs.UnixPath: byte[] path>;
        $i9 = lengthof $r9;
        i5 = $i8 + $i9;
        if z0 == 0 goto label10;

        $z6 = <sun.nio.fs.UnixPath: boolean $assertionsDisabled>;
        if $z6 != 0 goto label9;

        $z7 = specialinvoke r3.<sun.nio.fs.UnixPath: boolean isEmpty()>();
        if $z7 != 0 goto label9;

        $r10 = new java.lang.AssertionError;
        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();
        throw $r10;

     label9:
        i5 = i5 + -1;

     label10:
        r4 = newarray (byte)[i5];
        i6 = 0;

     label11:
        if i4 <= 0 goto label14;

        i10 = i6 + 1;
        r4[i6] = 46;
        i6 = i10 + 1;
        r4[i10] = 46;
        if z0 == 0 goto label12;

        if i4 <= 1 goto label13;

        $i11 = i6;
        i6 = i6 + 1;
        r4[$i11] = 47;
        goto label13;

     label12:
        $i12 = i6;
        i6 = i6 + 1;
        r4[$i12] = 47;

     label13:
        i4 = i4 + -1;
        goto label11;

     label14:
        $r11 = r3.<sun.nio.fs.UnixPath: byte[] path>;
        $r12 = r3.<sun.nio.fs.UnixPath: byte[] path>;
        $i13 = lengthof $r12;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r4, i6, $i13);
        $r13 = new sun.nio.fs.UnixPath;
        $r14 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        specialinvoke $r13.<sun.nio.fs.UnixPath: void <init>(sun.nio.fs.UnixFileSystem,byte[])>($r14, r4);
        return $r13;

     label15:
        $i14 = i4 * 3;
        $i15 = $i14 - 1;
        r15 = newarray (byte)[$i15];
        i16 = 0;

     label16:
        if i4 <= 0 goto label18;

        i17 = i16 + 1;
        r15[i16] = 46;
        i16 = i17 + 1;
        r15[i17] = 46;
        if i4 <= 1 goto label17;

        $i18 = i16;
        i16 = i16 + 1;
        r15[$i18] = 47;

     label17:
        i4 = i4 + -1;
        goto label16;

     label18:
        $r16 = new sun.nio.fs.UnixPath;
        $r17 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        specialinvoke $r16.<sun.nio.fs.UnixPath: void <init>(sun.nio.fs.UnixFileSystem,byte[])>($r17, r15);
        return $r16;
    }

    public java.nio.file.Path normalize()
    {
        sun.nio.fs.UnixPath r0, $r13, $r17;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, i16, i17, i18, $i19, $i21, i23, i24, $i25, i26, $i27, i28, $i29, $i30, $i31, $i32;
        boolean[] r1;
        int[] r2, $r3, $r4, $r6, $r9, $r16;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7;
        byte[] $r5, $r7, $r8, $r10, $r11, r14, $r15;
        byte $b13, $b15, $b20, $b22;
        sun.nio.fs.UnixFileSystem $r12, $r18;

        r0 := @this: sun.nio.fs.UnixPath;
        i0 = virtualinvoke r0.<sun.nio.fs.UnixPath: int getNameCount()>();
        if i0 == 0 goto label0;

        $z3 = specialinvoke r0.<sun.nio.fs.UnixPath: boolean isEmpty()>();
        if $z3 == 0 goto label1;

     label0:
        return r0;

     label1:
        r1 = newarray (boolean)[i0];
        r2 = newarray (int)[i0];
        i1 = i0;
        z0 = 0;
        z1 = virtualinvoke r0.<sun.nio.fs.UnixPath: boolean isAbsolute()>();
        i2 = 0;

     label2:
        if i2 >= i0 goto label7;

        $r3 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        i3 = $r3[i2];
        $r4 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        $i7 = lengthof $r4;
        $i8 = $i7 - 1;
        if i2 != $i8 goto label3;

        $r5 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i9 = lengthof $r5;
        i4 = $i9 - i3;
        goto label4;

     label3:
        $r6 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        $i10 = i2 + 1;
        $i11 = $r6[$i10];
        $i12 = $i11 - i3;
        i4 = $i12 - 1;

     label4:
        r2[i2] = i4;
        $r7 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $b13 = $r7[i3];
        if $b13 != 46 goto label6;

        if i4 != 1 goto label5;

        r1[i2] = 1;
        i1 = i1 + -1;
        goto label6;

     label5:
        $r8 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i14 = i3 + 1;
        $b15 = $r8[$i14];
        if $b15 != 46 goto label6;

        z0 = 1;

     label6:
        i2 = i2 + 1;
        goto label2;

     label7:
        if z0 == 0 goto label20;

     label8:
        i16 = i1;
        i17 = -1;
        i18 = 0;

     label9:
        if i18 >= i0 goto label19;

        $z4 = r1[i18];
        if $z4 == 0 goto label10;

        goto label18;

     label10:
        $i19 = r2[i18];
        if $i19 == 2 goto label11;

        i17 = i18;
        goto label18;

     label11:
        $r9 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        i5 = $r9[i18];
        $r10 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $b20 = $r10[i5];
        if $b20 != 46 goto label12;

        $r11 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i21 = i5 + 1;
        $b22 = $r11[$i21];
        if $b22 == 46 goto label13;

     label12:
        i17 = i18;
        goto label18;

     label13:
        if i17 < 0 goto label14;

        r1[i17] = 1;
        r1[i18] = 1;
        i1 = i1 - 2;
        i17 = -1;
        goto label18;

     label14:
        if z1 == 0 goto label18;

        z2 = 0;
        i6 = 0;

     label15:
        if i6 >= i18 goto label17;

        $z5 = r1[i6];
        if $z5 != 0 goto label16;

        z2 = 1;
        goto label17;

     label16:
        i6 = i6 + 1;
        goto label15;

     label17:
        if z2 != 0 goto label18;

        r1[i18] = 1;
        i1 = i1 + -1;

     label18:
        i18 = i18 + 1;
        goto label9;

     label19:
        if i16 > i1 goto label8;

     label20:
        if i1 != i0 goto label21;

        return r0;

     label21:
        if i1 != 0 goto label24;

        if z1 == 0 goto label22;

        $r12 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        $r13 = virtualinvoke $r12.<sun.nio.fs.UnixFileSystem: sun.nio.fs.UnixPath rootDirectory()>();
        goto label23;

     label22:
        $r13 = specialinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath emptyPath()>();

     label23:
        return $r13;

     label24:
        i23 = i1 - 1;
        if z1 == 0 goto label25;

        i23 = i23 + 1;

     label25:
        i24 = 0;

     label26:
        if i24 >= i0 goto label28;

        $z6 = r1[i24];
        if $z6 != 0 goto label27;

        $i25 = r2[i24];
        i23 = i23 + $i25;

     label27:
        i24 = i24 + 1;
        goto label26;

     label28:
        r14 = newarray (byte)[i23];
        i26 = 0;
        if z1 == 0 goto label29;

        $i27 = i26;
        i26 = i26 + 1;
        r14[$i27] = 47;

     label29:
        i28 = 0;

     label30:
        if i28 >= i0 goto label32;

        $z7 = r1[i28];
        if $z7 != 0 goto label31;

        $r15 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $r16 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        $i29 = $r16[i28];
        $i30 = r2[i28];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, $i29, r14, i26, $i30);
        $i31 = r2[i28];
        i26 = i26 + $i31;
        i1 = i1 + -1;
        if i1 <= 0 goto label31;

        $i32 = i26;
        i26 = i26 + 1;
        r14[$i32] = 47;

     label31:
        i28 = i28 + 1;
        goto label30;

     label32:
        $r17 = new sun.nio.fs.UnixPath;
        $r18 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        specialinvoke $r17.<sun.nio.fs.UnixPath: void <init>(sun.nio.fs.UnixFileSystem,byte[])>($r18, r14);
        return $r17;
    }

    public boolean startsWith(java.nio.file.Path)
    {
        sun.nio.fs.UnixPath r0, r2;
        java.nio.file.Path r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i13;
        java.lang.Integer r3, r4;
        java.lang.Object $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        byte[] $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r15, $r16;
        int[] $r10, $r11;
        byte $b11, $b12, $b14;

        r0 := @this: sun.nio.fs.UnixPath;
        r1 := @parameter0: java.nio.file.Path;
        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);
        $z0 = $r5 instanceof sun.nio.fs.UnixPath;
        if $z0 != 0 goto label0;

        return 0;

     label0:
        r2 = (sun.nio.fs.UnixPath) r1;
        $r6 = r2.<sun.nio.fs.UnixPath: byte[] path>;
        $i3 = lengthof $r6;
        $r7 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i4 = lengthof $r7;
        if $i3 <= $i4 goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<sun.nio.fs.UnixPath: int getNameCount()>();
        i1 = virtualinvoke r2.<sun.nio.fs.UnixPath: int getNameCount()>();
        if i1 != 0 goto label4;

        $z1 = virtualinvoke r0.<sun.nio.fs.UnixPath: boolean isAbsolute()>();
        if $z1 == 0 goto label4;

        $z2 = specialinvoke r2.<sun.nio.fs.UnixPath: boolean isEmpty()>();
        if $z2 == 0 goto label2;

        $z3 = 0;
        goto label3;

     label2:
        $z3 = 1;

     label3:
        return $z3;

     label4:
        if i1 <= i0 goto label5;

        return 0;

     label5:
        if i1 != i0 goto label6;

        $r8 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i5 = lengthof $r8;
        $r9 = r2.<sun.nio.fs.UnixPath: byte[] path>;
        $i6 = lengthof $r9;
        if $i5 == $i6 goto label6;

        return 0;

     label6:
        i2 = 0;

     label7:
        if i2 >= i1 goto label9;

        $r10 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        $i7 = $r10[i2];
        r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);
        $r11 = r2.<sun.nio.fs.UnixPath: int[] offsets>;
        $i8 = $r11[i2];
        r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);
        $z4 = virtualinvoke r3.<java.lang.Integer: boolean equals(java.lang.Object)>(r4);
        if $z4 != 0 goto label8;

        return 0;

     label8:
        i2 = i2 + 1;
        goto label7;

     label9:
        i9 = 0;

     label10:
        $r12 = r2.<sun.nio.fs.UnixPath: byte[] path>;
        $i10 = lengthof $r12;
        if i9 >= $i10 goto label12;

        $r13 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $b11 = $r13[i9];
        $r14 = r2.<sun.nio.fs.UnixPath: byte[] path>;
        $b12 = $r14[i9];
        if $b11 == $b12 goto label11;

        return 0;

     label11:
        i9 = i9 + 1;
        goto label10;

     label12:
        $r15 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i13 = lengthof $r15;
        if i9 >= $i13 goto label13;

        $r16 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $b14 = $r16[i9];
        if $b14 == 47 goto label13;

        return 0;

     label13:
        return 1;
    }

    public boolean endsWith(java.nio.file.Path)
    {
        sun.nio.fs.UnixPath r0, r2;
        java.nio.file.Path r1;
        int i0, i1, i2, i3, i4, i5, $i6, i7, $i8, $i9, $i10, $i12;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        byte[] $r4, $r5, $r8, $r9;
        int[] $r6, $r7;
        byte $b11, $b13;

        r0 := @this: sun.nio.fs.UnixPath;
        r1 := @parameter0: java.nio.file.Path;
        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);
        $z0 = $r3 instanceof sun.nio.fs.UnixPath;
        if $z0 != 0 goto label0;

        return 0;

     label0:
        r2 = (sun.nio.fs.UnixPath) r1;
        $r4 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        i0 = lengthof $r4;
        $r5 = r2.<sun.nio.fs.UnixPath: byte[] path>;
        i1 = lengthof $r5;
        if i1 <= i0 goto label1;

        return 0;

     label1:
        if i0 <= 0 goto label2;

        if i1 != 0 goto label2;

        return 0;

     label2:
        $z1 = virtualinvoke r2.<sun.nio.fs.UnixPath: boolean isAbsolute()>();
        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r0.<sun.nio.fs.UnixPath: boolean isAbsolute()>();
        if $z2 != 0 goto label3;

        return 0;

     label3:
        i2 = virtualinvoke r0.<sun.nio.fs.UnixPath: int getNameCount()>();
        i3 = virtualinvoke r2.<sun.nio.fs.UnixPath: int getNameCount()>();
        if i3 <= i2 goto label4;

        return 0;

     label4:
        if i3 != i2 goto label8;

        if i2 != 0 goto label5;

        return 1;

     label5:
        i4 = i0;
        $z3 = virtualinvoke r0.<sun.nio.fs.UnixPath: boolean isAbsolute()>();
        if $z3 == 0 goto label6;

        $z4 = virtualinvoke r2.<sun.nio.fs.UnixPath: boolean isAbsolute()>();
        if $z4 != 0 goto label6;

        i4 = i4 + -1;

     label6:
        if i1 == i4 goto label7;

        return 0;

     label7:
        goto label9;

     label8:
        $z5 = virtualinvoke r2.<sun.nio.fs.UnixPath: boolean isAbsolute()>();
        if $z5 == 0 goto label9;

        return 0;

     label9:
        $r6 = r0.<sun.nio.fs.UnixPath: int[] offsets>;
        $i6 = i2 - i3;
        i7 = $r6[$i6];
        $r7 = r2.<sun.nio.fs.UnixPath: int[] offsets>;
        i5 = $r7[0];
        $i8 = i1 - i5;
        $i9 = i0 - i7;
        if $i8 == $i9 goto label10;

        return 0;

     label10:
        if i5 >= i1 goto label11;

        $r8 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i10 = i7;
        i7 = i7 + 1;
        $b11 = $r8[$i10];
        $r9 = r2.<sun.nio.fs.UnixPath: byte[] path>;
        $i12 = i5;
        i5 = i5 + 1;
        $b13 = $r9[$i12];
        if $b11 == $b13 goto label10;

        return 0;

     label11:
        return 1;
    }

    public int compareTo(java.nio.file.Path)
    {
        sun.nio.fs.UnixPath r0, $r5, $r7;
        java.nio.file.Path r1;
        int i0, i1, i2, i3, $i8, $i9;
        byte[] r2, r3, $r4, $r6;
        short s4, s5;
        byte $b6, $b7;

        r0 := @this: sun.nio.fs.UnixPath;
        r1 := @parameter0: java.nio.file.Path;
        $r4 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        i0 = lengthof $r4;
        $r5 = (sun.nio.fs.UnixPath) r1;
        $r6 = $r5.<sun.nio.fs.UnixPath: byte[] path>;
        i1 = lengthof $r6;
        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);
        r2 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $r7 = (sun.nio.fs.UnixPath) r1;
        r3 = $r7.<sun.nio.fs.UnixPath: byte[] path>;
        i3 = 0;

     label0:
        if i3 >= i2 goto label2;

        $b6 = r2[i3];
        s4 = $b6 & 255;
        $b7 = r3[i3];
        s5 = $b7 & 255;
        if s4 == s5 goto label1;

        $i8 = s4 - s5;
        return $i8;

     label1:
        i3 = i3 + 1;
        goto label0;

     label2:
        $i9 = i0 - i1;
        return $i9;
    }

    public boolean equals(java.lang.Object)
    {
        sun.nio.fs.UnixPath r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.nio.file.Path $r2;
        int $i0;

        r0 := @this: sun.nio.fs.UnixPath;
        r1 := @parameter0: java.lang.Object;
        if r1 == null goto label2;

        $z0 = r1 instanceof sun.nio.fs.UnixPath;
        if $z0 == 0 goto label2;

        $r2 = (java.nio.file.Path) r1;
        $i0 = virtualinvoke r0.<sun.nio.fs.UnixPath: int compareTo(java.nio.file.Path)>($r2);
        if $i0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        sun.nio.fs.UnixPath r0;
        int i0, i1, $i2, $i3;
        byte[] $r1, $r2;
        byte $b4;
        short $s5;

        r0 := @this: sun.nio.fs.UnixPath;
        i0 = r0.<sun.nio.fs.UnixPath: int hash>;
        if i0 != 0 goto label2;

        i1 = 0;

     label0:
        $r1 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $i2 = lengthof $r1;
        if i1 >= $i2 goto label1;

        $i3 = 31 * i0;
        $r2 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $b4 = $r2[i1];
        $s5 = $b4 & 255;
        i0 = $i3 + $s5;
        i1 = i1 + 1;
        goto label0;

     label1:
        r0.<sun.nio.fs.UnixPath: int hash> = i0;

     label2:
        return i0;
    }

    public java.lang.String toString()
    {
        sun.nio.fs.UnixPath r0;
        java.lang.String $r1, $r2, $r5, $r6;
        sun.nio.fs.UnixFileSystem $r3;
        byte[] $r4;

        r0 := @this: sun.nio.fs.UnixPath;
        $r2 = r0.<sun.nio.fs.UnixPath: java.lang.String stringValue>;
        if $r2 != null goto label0;

        $r3 = r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem fs>;
        $r1 = new java.lang.String;
        $r4 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r4);
        $r5 = virtualinvoke $r3.<sun.nio.fs.UnixFileSystem: java.lang.String normalizeJavaPath(java.lang.String)>($r1);
        r0.<sun.nio.fs.UnixPath: java.lang.String stringValue> = $r5;

     label0:
        $r6 = r0.<sun.nio.fs.UnixPath: java.lang.String stringValue>;
        return $r6;
    }

    int openForAttributeAccess(boolean) throws java.io.IOException
    {
        sun.nio.fs.UnixPath r0;
        boolean z0, $z1, $z2;
        short s0;
        sun.nio.fs.UnixException r1, $r4;
        java.lang.StringBuilder $r2, $r9, $r10;
        java.io.IOException $r3;
        int $i1, $i2, $i3;
        sun.nio.fs.UnixFileSystem $r5;
        java.nio.file.FileSystemException $r6;
        java.lang.String $r7, $r8, $r11;

        r0 := @this: sun.nio.fs.UnixPath;
        z0 := @parameter0: boolean;
        s0 = 0;
        if z0 != 0 goto label1;

        $z1 = staticinvoke <sun.nio.fs.UnixNativeDispatcher: boolean supportsNoFollowLinks()>();
        if $z1 != 0 goto label0;

        $r3 = new java.io.IOException;
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("NOFOLLOW_LINKS is not supported on this platform");
        throw $r3;

     label0:
        s0 = s0 | 256;

     label1:
        $i1 = staticinvoke <sun.nio.fs.UnixNativeDispatcher: int open(sun.nio.fs.UnixPath,int,int)>(r0, s0, 0);

     label2:
        return $i1;

     label3:
        $r4 := @caughtexception;
        r1 = $r4;
        $r5 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        $z2 = virtualinvoke $r5.<sun.nio.fs.UnixFileSystem: boolean isSolaris()>();
        if $z2 == 0 goto label4;

        $i2 = virtualinvoke r1.<sun.nio.fs.UnixException: int errno()>();
        if $i2 != 22 goto label4;

        virtualinvoke r1.<sun.nio.fs.UnixException: void setError(int)>(62);

     label4:
        $i3 = virtualinvoke r1.<sun.nio.fs.UnixException: int errno()>();
        if $i3 != 62 goto label5;

        $r6 = new java.nio.file.FileSystemException;
        $r7 = virtualinvoke r0.<sun.nio.fs.UnixPath: java.lang.String getPathForExceptionMessage()>();
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke r1.<sun.nio.fs.UnixException: java.lang.String getMessage()>();
        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or unable to access attributes of symbolic link");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.nio.file.FileSystemException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r7, null, $r11);
        throw $r6;

     label5:
        virtualinvoke r1.<sun.nio.fs.UnixException: void rethrowAsIOException(sun.nio.fs.UnixPath)>(r0);
        return -1;

        catch sun.nio.fs.UnixException from label1 to label2 with label3;
    }

    void checkRead()
    {
        sun.nio.fs.UnixPath r0;
        java.lang.SecurityManager r1;
        java.lang.String $r2;

        r0 := @this: sun.nio.fs.UnixPath;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = virtualinvoke r0.<sun.nio.fs.UnixPath: java.lang.String getPathForPermissionCheck()>();
        virtualinvoke r1.<java.lang.SecurityManager: void checkRead(java.lang.String)>($r2);

     label0:
        return;
    }

    void checkWrite()
    {
        sun.nio.fs.UnixPath r0;
        java.lang.SecurityManager r1;
        java.lang.String $r2;

        r0 := @this: sun.nio.fs.UnixPath;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = virtualinvoke r0.<sun.nio.fs.UnixPath: java.lang.String getPathForPermissionCheck()>();
        virtualinvoke r1.<java.lang.SecurityManager: void checkWrite(java.lang.String)>($r2);

     label0:
        return;
    }

    void checkDelete()
    {
        sun.nio.fs.UnixPath r0;
        java.lang.SecurityManager r1;
        java.lang.String $r2;

        r0 := @this: sun.nio.fs.UnixPath;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = virtualinvoke r0.<sun.nio.fs.UnixPath: java.lang.String getPathForPermissionCheck()>();
        virtualinvoke r1.<java.lang.SecurityManager: void checkDelete(java.lang.String)>($r2);

     label0:
        return;
    }

    public sun.nio.fs.UnixPath toAbsolutePath()
    {
        sun.nio.fs.UnixPath r0, $r2;
        java.lang.SecurityManager r1;
        boolean $z0;
        sun.nio.fs.UnixFileSystem $r3, $r4;
        byte[] $r5, $r6, $r7;

        r0 := @this: sun.nio.fs.UnixPath;
        $z0 = virtualinvoke r0.<sun.nio.fs.UnixPath: boolean isAbsolute()>();
        if $z0 == 0 goto label0;

        return r0;

     label0:
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label1;

        virtualinvoke r1.<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>("user.dir");

     label1:
        $r2 = new sun.nio.fs.UnixPath;
        $r3 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        $r4 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        $r5 = virtualinvoke $r4.<sun.nio.fs.UnixFileSystem: byte[] defaultDirectory()>();
        $r6 = r0.<sun.nio.fs.UnixPath: byte[] path>;
        $r7 = staticinvoke <sun.nio.fs.UnixPath: byte[] resolve(byte[],byte[])>($r5, $r6);
        specialinvoke $r2.<sun.nio.fs.UnixPath: void <init>(sun.nio.fs.UnixFileSystem,byte[])>($r3, $r7);
        return $r2;
    }

    public transient java.nio.file.Path toRealPath(java.nio.file.LinkOption[]) throws java.io.IOException
    {
        sun.nio.fs.UnixPath r0, r2, r4, $r7, r12;
        java.nio.file.LinkOption[] r1;
        byte[] r3, $r13, $r14, $r15, $r16, $r17;
        int i0, $i1, $i2, $i4;
        sun.nio.fs.UnixFileAttributes r5;
        sun.nio.fs.UnixException r6, $r9, r10, $r18, $r21, r22;
        boolean $z0, $z1;
        sun.nio.fs.UnixFileSystem $r8, $r11, $r19;
        byte $b3, $b5, $b6;

        r0 := @this: sun.nio.fs.UnixPath;
        r1 := @parameter0: java.nio.file.LinkOption[];
        virtualinvoke r0.<sun.nio.fs.UnixPath: void checkRead()>();
        r2 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath toAbsolutePath()>();
        $z0 = staticinvoke <sun.nio.fs.Util: boolean followLinks(java.nio.file.LinkOption[])>(r1);
        if $z0 == 0 goto label3;

     label0:
        r3 = staticinvoke <sun.nio.fs.UnixNativeDispatcher: byte[] realpath(sun.nio.fs.UnixPath)>(r2);
        $r7 = new sun.nio.fs.UnixPath;
        $r8 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        specialinvoke $r7.<sun.nio.fs.UnixPath: void <init>(sun.nio.fs.UnixFileSystem,byte[])>($r8, r3);

     label1:
        return $r7;

     label2:
        $r9 := @caughtexception;
        r10 = $r9;
        virtualinvoke r10.<sun.nio.fs.UnixException: void rethrowAsIOException(sun.nio.fs.UnixPath)>(r0);

     label3:
        $r11 = r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem fs>;
        r12 = virtualinvoke $r11.<sun.nio.fs.UnixFileSystem: sun.nio.fs.UnixPath rootDirectory()>();
        i0 = 0;

     label4:
        $i1 = virtualinvoke r2.<sun.nio.fs.UnixPath: int getNameCount()>();
        if i0 >= $i1 goto label12;

        r4 = virtualinvoke r2.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getName(int)>(i0);
        $r13 = virtualinvoke r4.<sun.nio.fs.UnixPath: byte[] asByteArray()>();
        $i2 = lengthof $r13;
        if $i2 != 1 goto label5;

        $r14 = virtualinvoke r4.<sun.nio.fs.UnixPath: byte[] asByteArray()>();
        $b3 = $r14[0];
        if $b3 != 46 goto label5;

        goto label11;

     label5:
        $r15 = virtualinvoke r4.<sun.nio.fs.UnixPath: byte[] asByteArray()>();
        $i4 = lengthof $r15;
        if $i4 != 2 goto label10;

        $r16 = virtualinvoke r4.<sun.nio.fs.UnixPath: byte[] asByteArray()>();
        $b5 = $r16[0];
        if $b5 != 46 goto label10;

        $r17 = virtualinvoke r4.<sun.nio.fs.UnixPath: byte[] asByteArray()>();
        $b6 = $r17[1];
        if $b6 != 46 goto label10;

        r5 = null;

     label6:
        r5 = staticinvoke <sun.nio.fs.UnixFileAttributes: sun.nio.fs.UnixFileAttributes get(sun.nio.fs.UnixPath,boolean)>(r12, 0);

     label7:
        goto label9;

     label8:
        $r18 := @caughtexception;
        r6 = $r18;
        virtualinvoke r6.<sun.nio.fs.UnixException: void rethrowAsIOException(sun.nio.fs.UnixPath)>(r12);

     label9:
        $z1 = virtualinvoke r5.<sun.nio.fs.UnixFileAttributes: boolean isSymbolicLink()>();
        if $z1 != 0 goto label10;

        r12 = virtualinvoke r12.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getParent()>();
        if r12 != null goto label11;

        $r19 = r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem fs>;
        r12 = virtualinvoke $r19.<sun.nio.fs.UnixFileSystem: sun.nio.fs.UnixPath rootDirectory()>();
        goto label11;

     label10:
        r12 = virtualinvoke r12.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(java.nio.file.Path)>(r4);

     label11:
        i0 = i0 + 1;
        goto label4;

     label12:
        staticinvoke <sun.nio.fs.UnixFileAttributes: sun.nio.fs.UnixFileAttributes get(sun.nio.fs.UnixPath,boolean)>(r12, 0);

     label13:
        goto label15;

     label14:
        $r21 := @caughtexception;
        r22 = $r21;
        virtualinvoke r22.<sun.nio.fs.UnixException: void rethrowAsIOException(sun.nio.fs.UnixPath)>(r12);

     label15:
        return r12;

        catch sun.nio.fs.UnixException from label0 to label1 with label2;
        catch sun.nio.fs.UnixException from label6 to label7 with label8;
        catch sun.nio.fs.UnixException from label12 to label13 with label14;
    }

    public java.net.URI toUri()
    {
        sun.nio.fs.UnixPath r0;
        java.net.URI $r1;

        r0 := @this: sun.nio.fs.UnixPath;
        $r1 = staticinvoke <sun.nio.fs.UnixUriUtils: java.net.URI toUri(sun.nio.fs.UnixPath)>(r0);
        return $r1;
    }

    public transient java.nio.file.WatchKey register(java.nio.file.WatchService, java.nio.file.WatchEvent$Kind[], java.nio.file.WatchEvent$Modifier[]) throws java.io.IOException
    {
        sun.nio.fs.UnixPath r0;
        java.nio.file.WatchService r1;
        java.nio.file.WatchEvent$Kind[] r2;
        java.nio.file.WatchEvent$Modifier[] r3;
        java.lang.NullPointerException $r4;
        boolean $z0;
        java.nio.file.ProviderMismatchException $r5;
        sun.nio.fs.AbstractWatchService $r6;
        java.nio.file.WatchKey $r7;

        r0 := @this: sun.nio.fs.UnixPath;
        r1 := @parameter0: java.nio.file.WatchService;
        r2 := @parameter1: java.nio.file.WatchEvent$Kind[];
        r3 := @parameter2: java.nio.file.WatchEvent$Modifier[];
        if r1 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label0:
        $z0 = r1 instanceof sun.nio.fs.AbstractWatchService;
        if $z0 != 0 goto label1;

        $r5 = new java.nio.file.ProviderMismatchException;
        specialinvoke $r5.<java.nio.file.ProviderMismatchException: void <init>()>();
        throw $r5;

     label1:
        virtualinvoke r0.<sun.nio.fs.UnixPath: void checkRead()>();
        $r6 = (sun.nio.fs.AbstractWatchService) r1;
        $r7 = virtualinvoke $r6.<sun.nio.fs.AbstractWatchService: java.nio.file.WatchKey register(java.nio.file.Path,java.nio.file.WatchEvent$Kind[],java.nio.file.WatchEvent$Modifier[])>(r0, r2, r3);
        return $r7;
    }

    public volatile java.nio.file.Path toAbsolutePath()
    {
        sun.nio.fs.UnixPath r0, $r1;

        r0 := @this: sun.nio.fs.UnixPath;
        $r1 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath toAbsolutePath()>();
        return $r1;
    }

    public volatile java.nio.file.Path relativize(java.nio.file.Path)
    {
        sun.nio.fs.UnixPath r0, $r2;
        java.nio.file.Path r1;

        r0 := @this: sun.nio.fs.UnixPath;
        r1 := @parameter0: java.nio.file.Path;
        $r2 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath relativize(java.nio.file.Path)>(r1);
        return $r2;
    }

    public volatile java.nio.file.Path resolve(java.nio.file.Path)
    {
        sun.nio.fs.UnixPath r0, $r2;
        java.nio.file.Path r1;

        r0 := @this: sun.nio.fs.UnixPath;
        r1 := @parameter0: java.nio.file.Path;
        $r2 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(java.nio.file.Path)>(r1);
        return $r2;
    }

    public volatile java.nio.file.Path subpath(int, int)
    {
        sun.nio.fs.UnixPath r0, $r1;
        int i0, i1;

        r0 := @this: sun.nio.fs.UnixPath;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath subpath(int,int)>(i0, i1);
        return $r1;
    }

    public volatile java.nio.file.Path getName(int)
    {
        sun.nio.fs.UnixPath r0, $r1;
        int i0;

        r0 := @this: sun.nio.fs.UnixPath;
        i0 := @parameter0: int;
        $r1 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getName(int)>(i0);
        return $r1;
    }

    public volatile java.nio.file.Path getParent()
    {
        sun.nio.fs.UnixPath r0, $r1;

        r0 := @this: sun.nio.fs.UnixPath;
        $r1 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getParent()>();
        return $r1;
    }

    public volatile java.nio.file.Path getFileName()
    {
        sun.nio.fs.UnixPath r0, $r1;

        r0 := @this: sun.nio.fs.UnixPath;
        $r1 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getFileName()>();
        return $r1;
    }

    public volatile java.nio.file.Path getRoot()
    {
        sun.nio.fs.UnixPath r0, $r1;

        r0 := @this: sun.nio.fs.UnixPath;
        $r1 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath getRoot()>();
        return $r1;
    }

    public volatile java.nio.file.FileSystem getFileSystem()
    {
        sun.nio.fs.UnixPath r0;
        sun.nio.fs.UnixFileSystem $r1;

        r0 := @this: sun.nio.fs.UnixPath;
        $r1 = virtualinvoke r0.<sun.nio.fs.UnixPath: sun.nio.fs.UnixFileSystem getFileSystem()>();
        return $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        sun.nio.fs.UnixPath r0;
        java.lang.Object r1;
        java.nio.file.Path $r2;
        int $i0;

        r0 := @this: sun.nio.fs.UnixPath;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.nio.file.Path) r1;
        $i0 = virtualinvoke r0.<sun.nio.fs.UnixPath: int compareTo(java.nio.file.Path)>($r2);
        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.lang.ThreadLocal $r1;

        $r0 = class "sun/nio/fs/UnixPath";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.fs.UnixPath: boolean $assertionsDisabled> = $z1;
        $r1 = new java.lang.ThreadLocal;
        specialinvoke $r1.<java.lang.ThreadLocal: void <init>()>();
        <sun.nio.fs.UnixPath: java.lang.ThreadLocal encoder> = $r1;
        return;
    }
}
