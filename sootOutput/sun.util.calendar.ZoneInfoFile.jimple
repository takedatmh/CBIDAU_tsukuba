public class sun.util.calendar.ZoneInfoFile extends java.lang.Object
{
    public static final byte[] JAVAZI_LABEL;
    private static final int JAVAZI_LABEL_LENGTH;
    public static final byte JAVAZI_VERSION;
    public static final byte TAG_RawOffset;
    public static final byte TAG_LastDSTSaving;
    public static final byte TAG_CRC32;
    public static final byte TAG_Transition;
    public static final byte TAG_Offset;
    public static final byte TAG_SimpleTimeZone;
    public static final byte TAG_GMTOffsetWillChange;
    public static final java.lang.String JAVAZM_FILE_NAME;
    public static final byte[] JAVAZM_LABEL;
    private static final int JAVAZM_LABEL_LENGTH;
    public static final byte JAVAZM_VERSION;
    public static final byte TAG_ZoneIDs;
    public static final byte TAG_RawOffsets;
    public static final byte TAG_RawOffsetIndices;
    public static final byte TAG_ZoneAliases;
    public static final byte TAG_TZDataVersion;
    public static final byte TAG_ExcludedZones;
    private static java.util.Map zoneInfoObjects;
    private static final sun.util.calendar.ZoneInfo GMT;
    private static final java.lang.String ziDir;
    private static volatile java.lang.ref.SoftReference zoneIDs;
    private static volatile java.lang.ref.SoftReference excludedIDs;
    private static volatile boolean hasNoExcludeList;
    private static volatile java.lang.ref.SoftReference rawOffsetIndices;
    private static volatile java.lang.ref.SoftReference rawOffsets;
    private static volatile java.lang.ref.SoftReference zoneInfoMappings;

    public void <init>()
    {
        sun.util.calendar.ZoneInfoFile r0;

        r0 := @this: sun.util.calendar.ZoneInfoFile;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static java.lang.String getFileName(java.lang.String)
    {
        java.lang.String r0, $r1;
        char $c0, $c1;

        r0 := @parameter0: java.lang.String;
        $c0 = <java.io.File: char separatorChar>;
        if $c0 != 47 goto label0;

        return r0;

     label0:
        $c1 = <java.io.File: char separatorChar>;
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(47, $c1);
        return $r1;
    }

    public static sun.util.calendar.ZoneInfo getCustomTimeZone(java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0;
        sun.util.calendar.ZoneInfo r2, $r3, r4, $r6;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r1 = staticinvoke <sun.util.calendar.ZoneInfoFile: java.lang.String toCustomID(int)>(i0);
        r2 = staticinvoke <sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo getFromCache(java.lang.String)>(r1);
        if r2 != null goto label0;

        $r3 = new sun.util.calendar.ZoneInfo;
        specialinvoke $r3.<sun.util.calendar.ZoneInfo: void <init>(java.lang.String,int)>(r1, i0);
        r4 = $r3;
        r2 = staticinvoke <sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo addToCache(java.lang.String,sun.util.calendar.ZoneInfo)>(r1, r4);
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);
        if $z0 != 0 goto label0;

        r2 = staticinvoke <sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo addToCache(java.lang.String,sun.util.calendar.ZoneInfo)>(r0, r2);

     label0:
        $r5 = virtualinvoke r2.<sun.util.calendar.ZoneInfo: java.lang.Object clone()>();
        $r6 = (sun.util.calendar.ZoneInfo) $r5;
        return $r6;
    }

    public static java.lang.String toCustomID(int)
    {
        int i0, i1, i3, i4, $i7, $i8, $i12, $i13, $i17, $i18, $i22, $i23;
        char c2, $c6, $c9, $c11, $c14, $c16, $c19, $c21, $c24;
        char[] r0, $r1;
        byte $b5, $b10, $b15, $b20;
        java.lang.String $r6;

        i0 := @parameter0: int;
        i1 = i0 / 60000;
        if i1 < 0 goto label0;

        c2 = 43;
        goto label1;

     label0:
        c2 = 45;
        i1 = neg i1;

     label1:
        i3 = i1 / 60;
        i4 = i1 % 60;
        $r1 = newarray (char)[9];
        $r1[0] = 71;
        $r1[1] = 77;
        $r1[2] = 84;
        $r1[3] = c2;
        $r1[4] = 48;
        $r1[5] = 48;
        $r1[6] = 58;
        $r1[7] = 48;
        $r1[8] = 48;
        r0 = $r1;
        if i3 < 10 goto label2;

        $b5 = 4;
        $c6 = r0[$b5];
        $i7 = i3 / 10;
        $i8 = $c6 + $i7;
        $c9 = (char) $i8;
        r0[$b5] = $c9;

     label2:
        $b10 = 5;
        $c11 = r0[$b10];
        $i12 = i3 % 10;
        $i13 = $c11 + $i12;
        $c14 = (char) $i13;
        r0[$b10] = $c14;
        if i4 == 0 goto label3;

        $b15 = 7;
        $c16 = r0[$b15];
        $i17 = i4 / 10;
        $i18 = $c16 + $i17;
        $c19 = (char) $i18;
        r0[$b15] = $c19;
        $b20 = 8;
        $c21 = r0[$b20];
        $i22 = i4 % 10;
        $i23 = $c21 + $i22;
        $c24 = (char) $i23;
        r0[$b20] = $c24;

     label3:
        $r6 = new java.lang.String;
        specialinvoke $r6.<java.lang.String: void <init>(char[])>(r0);
        return $r6;
    }

    public static sun.util.calendar.ZoneInfo getZoneInfo(java.lang.String)
    {
        java.lang.String r0, $r1;
        sun.util.calendar.ZoneInfo r2, $r4, $r6, r8, $r10;
        java.util.Map r3;
        boolean $z0;
        java.lang.Object $r5, $r7, $r9;

        r0 := @parameter0: java.lang.String;
        $r1 = "GMT";
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);
        if $z0 == 0 goto label0;

        $r4 = <sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo GMT>;
        $r5 = virtualinvoke $r4.<sun.util.calendar.ZoneInfo: java.lang.Object clone()>();
        $r6 = (sun.util.calendar.ZoneInfo) $r5;
        return $r6;

     label0:
        r2 = staticinvoke <sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo getFromCache(java.lang.String)>(r0);
        if r2 != null goto label3;

        r3 = staticinvoke <sun.util.calendar.ZoneInfo: java.util.Map getCachedAliasTable()>();
        if r3 == null goto label1;

        $r7 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);
        if $r7 == null goto label1;

        return null;

     label1:
        r8 = staticinvoke <sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo createZoneInfo(java.lang.String)>(r0);
        if r8 != null goto label2;

        return null;

     label2:
        r2 = staticinvoke <sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo addToCache(java.lang.String,sun.util.calendar.ZoneInfo)>(r0, r8);

     label3:
        $r9 = virtualinvoke r2.<sun.util.calendar.ZoneInfo: java.lang.Object clone()>();
        $r10 = (sun.util.calendar.ZoneInfo) $r9;
        return $r10;
    }

    static synchronized sun.util.calendar.ZoneInfo getFromCache(java.lang.String)
    {
        java.lang.String r0;
        java.util.Map $r1, $r2;
        java.lang.Object $r3;
        sun.util.calendar.ZoneInfo $r4;

        r0 := @parameter0: java.lang.String;
        $r1 = <sun.util.calendar.ZoneInfoFile: java.util.Map zoneInfoObjects>;
        if $r1 != null goto label0;

        return null;

     label0:
        $r2 = <sun.util.calendar.ZoneInfoFile: java.util.Map zoneInfoObjects>;
        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);
        $r4 = (sun.util.calendar.ZoneInfo) $r3;
        return $r4;
    }

    static synchronized sun.util.calendar.ZoneInfo addToCache(java.lang.String, sun.util.calendar.ZoneInfo)
    {
        java.lang.String r0;
        sun.util.calendar.ZoneInfo r1, r3;
        java.util.Map $r2, $r5, $r7;
        java.util.HashMap $r4;
        java.lang.Object $r6;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: sun.util.calendar.ZoneInfo;
        $r2 = <sun.util.calendar.ZoneInfoFile: java.util.Map zoneInfoObjects>;
        if $r2 != null goto label0;

        $r4 = new java.util.HashMap;
        specialinvoke $r4.<java.util.HashMap: void <init>()>();
        <sun.util.calendar.ZoneInfoFile: java.util.Map zoneInfoObjects> = $r4;
        goto label1;

     label0:
        $r5 = <sun.util.calendar.ZoneInfoFile: java.util.Map zoneInfoObjects>;
        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);
        r3 = (sun.util.calendar.ZoneInfo) $r6;
        if r3 == null goto label1;

        return r3;

     label1:
        $r7 = <sun.util.calendar.ZoneInfoFile: java.util.Map zoneInfoObjects>;
        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);
        return r1;
    }

    private static sun.util.calendar.ZoneInfo createZoneInfo(java.lang.String)
    {
        java.lang.String r0, $r6, $r12, $r19, $r27, $r34, $r39;
        byte[] r1, $r5, $r7;
        boolean z0, z1, $z2;
        int i0, i1, i2, i3, i5, i7, i9, $i10, i13, $i15, i17, i18, $i21, $i24, i25, $i27, i28, i31, $i32, i33, i36, $i37, i40, i41, $i45, $i48, i50, $i53, i54, i57, $i58, i59, i62, $i63, i66, i67, i68, i72, i78, i84, i90, i96, i102, i112, i113, i114, $i117, i118, i121, $i122, i123, i126, $i127, i130, i131, i132, i133, $i136, i137, i140, $i141, i142, i145, $i146, i149, $i150;
        long[] r2;
        int[] r3, r4;
        byte b4, $b11, $b12, $b14, $b16, $b19, $b22, $b26, $b29, $b34, $b38, $b42, $b46, $b51, $b55, $b60, $b64, $b69, $b73, $b79, $b85, $b91, $b97, $b103, $b108, $b115, $b119, $b124, $b128, $b134, $b138, $b143, $b147, $b151;
        short s6, $s20, $s23, $s30, $s35, $s39, $s43, s44, $s47, s49, s52, $s56, $s61, $s65, $s70, $s74, $s80, $s86, $s92, $s98, $s104, $s109, s116, $s120, $s125, $s129, s135, $s139, $s144, $s148;
        long l8, $l71, $l75, l76, $l77, $l81, l82, $l83, $l87, l88, $l89, $l93, l94, $l95, $l99, l100, $l101, $l105, l106, $l107, $l110, l111;
        java.io.PrintStream $r8, $r13, $r20, $r21, $r22, $r30, $r35;
        java.lang.StringBuilder $r9, $r10, $r11, $r14, $r15, $r16, $r17, $r18, $r23, $r24, $r25, $r26, $r31, $r32, $r33, $r36, $r37, $r38;
        null_type $n0, $n1, $n2;
        java.lang.Exception $r28, r29;
        sun.util.calendar.ZoneInfo $r40;

        r0 := @parameter0: java.lang.String;
        $r6 = staticinvoke <sun.util.calendar.ZoneInfoFile: java.lang.String getFileName(java.lang.String)>(r0);
        r1 = staticinvoke <sun.util.calendar.ZoneInfoFile: byte[] readZoneInfoFile(java.lang.String)>($r6);
        if r1 != null goto label0;

        return null;

     label0:
        z0 = 0;
        i0 = lengthof r1;
        i1 = 0;
        i2 = 0;
        i3 = 0;
        z1 = 0;
        r2 = null;
        r3 = null;
        r4 = null;

     label1:
        i9 = 0;

     label2:
        $r5 = <sun.util.calendar.ZoneInfoFile: byte[] JAVAZI_LABEL>;
        $i10 = lengthof $r5;
        if i9 >= $i10 goto label5;

        $b11 = r1[i9];
        $r7 = <sun.util.calendar.ZoneInfoFile: byte[] JAVAZI_LABEL>;
        $b12 = $r7[i9];
        if $b11 == $b12 goto label4;

        $r8 = <java.lang.System: java.io.PrintStream err>;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ZoneInfo: wrong magic number: ");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r12);
        $n0 = null;

     label3:
        return $n0;

     label4:
        i9 = i9 + 1;
        goto label2;

     label5:
        i13 = i9 + 1;
        $b14 = r1[i9];
        if $b14 <= 1 goto label7;

        $r13 = <java.lang.System: java.io.PrintStream err>;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ZoneInfo: incompatible version (");
        $i15 = i13 - 1;
        $b16 = r1[$i15];
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b16);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r19);
        $n1 = null;

     label6:
        return $n1;

     label7:
        if i13 >= i0 goto label29;

        i17 = i13 + 1;
        b4 = r1[i13];
        i18 = i17 + 1;
        $b19 = r1[i17];
        $s20 = $b19 & 255;
        $i21 = $s20 << 8;
        i13 = i18 + 1;
        $b22 = r1[i18];
        $s23 = $b22 & 255;
        i5 = $i21 + $s23;
        $i24 = i13 + i5;
        if i0 >= $i24 goto label8;

        goto label29;

     label8:
        tableswitch(b4)
        {
            case 1: goto label11;
            case 2: goto label10;
            case 3: goto label9;
            case 4: goto label12;
            case 5: goto label15;
            case 6: goto label18;
            case 7: goto label23;
            default: goto label27;
        };

     label9:
        i25 = i13 + 1;
        $b26 = r1[i13];
        s6 = $b26 & 255;
        $i27 = s6 << 8;
        i28 = i25 + 1;
        $b29 = r1[i25];
        $s30 = $b29 & 255;
        i31 = $i27 + $s30;
        $i32 = i31 << 8;
        i33 = i28 + 1;
        $b34 = r1[i28];
        $s35 = $b34 & 255;
        i36 = $i32 + $s35;
        $i37 = i36 << 8;
        i13 = i33 + 1;
        $b38 = r1[i33];
        $s39 = $b38 & 255;
        i40 = $i37 + $s39;
        i3 = i40;
        goto label28;

     label10:
        i41 = i13 + 1;
        $b42 = r1[i13];
        $s43 = $b42 & 255;
        s44 = (short) $s43;
        $i45 = s44 << 8;
        i13 = i41 + 1;
        $b46 = r1[i41];
        $s47 = $b46 & 255;
        $i48 = $i45 + $s47;
        s49 = (short) $i48;
        i2 = s49 * 1000;
        goto label28;

     label11:
        i50 = i13 + 1;
        $b51 = r1[i13];
        s52 = $b51 & 255;
        $i53 = s52 << 8;
        i54 = i50 + 1;
        $b55 = r1[i50];
        $s56 = $b55 & 255;
        i57 = $i53 + $s56;
        $i58 = i57 << 8;
        i59 = i54 + 1;
        $b60 = r1[i54];
        $s61 = $b60 & 255;
        i62 = $i58 + $s61;
        $i63 = i62 << 8;
        i13 = i59 + 1;
        $b64 = r1[i59];
        $s65 = $b64 & 255;
        i66 = $i63 + $s65;
        i1 = i66;
        goto label28;

     label12:
        i67 = i5 / 8;
        r2 = newarray (long)[i67];
        i7 = 0;

     label13:
        if i7 >= i67 goto label14;

        i68 = i13 + 1;
        $b69 = r1[i13];
        $s70 = $b69 & 255;
        l8 = (long) $s70;
        $l71 = l8 << 8;
        i72 = i68 + 1;
        $b73 = r1[i68];
        $s74 = $b73 & 255;
        $l75 = (long) $s74;
        l76 = $l71 + $l75;
        $l77 = l76 << 8;
        i78 = i72 + 1;
        $b79 = r1[i72];
        $s80 = $b79 & 255;
        $l81 = (long) $s80;
        l82 = $l77 + $l81;
        $l83 = l82 << 8;
        i84 = i78 + 1;
        $b85 = r1[i78];
        $s86 = $b85 & 255;
        $l87 = (long) $s86;
        l88 = $l83 + $l87;
        $l89 = l88 << 8;
        i90 = i84 + 1;
        $b91 = r1[i84];
        $s92 = $b91 & 255;
        $l93 = (long) $s92;
        l94 = $l89 + $l93;
        $l95 = l94 << 8;
        i96 = i90 + 1;
        $b97 = r1[i90];
        $s98 = $b97 & 255;
        $l99 = (long) $s98;
        l100 = $l95 + $l99;
        $l101 = l100 << 8;
        i102 = i96 + 1;
        $b103 = r1[i96];
        $s104 = $b103 & 255;
        $l105 = (long) $s104;
        l106 = $l101 + $l105;
        $l107 = l106 << 8;
        i13 = i102 + 1;
        $b108 = r1[i102];
        $s109 = $b108 & 255;
        $l110 = (long) $s109;
        l111 = $l107 + $l110;
        r2[i7] = l111;
        i7 = i7 + 1;
        goto label13;

     label14:
        goto label28;

     label15:
        i112 = i5 / 4;
        r3 = newarray (int)[i112];
        i113 = 0;

     label16:
        if i113 >= i112 goto label17;

        i114 = i13 + 1;
        $b115 = r1[i13];
        s116 = $b115 & 255;
        $i117 = s116 << 8;
        i118 = i114 + 1;
        $b119 = r1[i114];
        $s120 = $b119 & 255;
        i121 = $i117 + $s120;
        $i122 = i121 << 8;
        i123 = i118 + 1;
        $b124 = r1[i118];
        $s125 = $b124 & 255;
        i126 = $i122 + $s125;
        $i127 = i126 << 8;
        i13 = i123 + 1;
        $b128 = r1[i123];
        $s129 = $b128 & 255;
        i130 = $i127 + $s129;
        r3[i113] = i130;
        i113 = i113 + 1;
        goto label16;

     label17:
        goto label28;

     label18:
        if i5 == 32 goto label20;

        if i5 == 40 goto label20;

        $r20 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>("ZoneInfo: wrong SimpleTimeZone parameter size");
        $n2 = null;

     label19:
        return $n2;

     label20:
        i131 = i5 / 4;
        r4 = newarray (int)[i131];
        i132 = 0;

     label21:
        if i132 >= i131 goto label22;

        i133 = i13 + 1;
        $b134 = r1[i13];
        s135 = $b134 & 255;
        $i136 = s135 << 8;
        i137 = i133 + 1;
        $b138 = r1[i133];
        $s139 = $b138 & 255;
        i140 = $i136 + $s139;
        $i141 = i140 << 8;
        i142 = i137 + 1;
        $b143 = r1[i137];
        $s144 = $b143 & 255;
        i145 = $i141 + $s144;
        $i146 = i145 << 8;
        i13 = i142 + 1;
        $b147 = r1[i142];
        $s148 = $b147 & 255;
        i149 = $i146 + $s148;
        r4[i132] = i149;
        i132 = i132 + 1;
        goto label21;

     label22:
        goto label28;

     label23:
        if i5 == 1 goto label24;

        $r21 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>("ZoneInfo: wrong byte length for TAG_GMTOffsetWillChange");

     label24:
        $i150 = i13;
        i13 = i13 + 1;
        $b151 = r1[$i150];
        if $b151 != 1 goto label25;

        $z2 = 1;
        goto label26;

     label25:
        $z2 = 0;

     label26:
        z1 = $z2;
        goto label28;

     label27:
        $r22 = <java.lang.System: java.io.PrintStream err>;
        $r23 = new java.lang.StringBuilder;
        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ZoneInfo: unknown tag < ");
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b4);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">. ignored.");
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r27);
        i13 = i13 + i5;

     label28:
        goto label7;

     label29:
        goto label31;

     label30:
        $r28 := @caughtexception;
        r29 = $r28;
        $r30 = <java.lang.System: java.io.PrintStream err>;
        $r31 = new java.lang.StringBuilder;
        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ZoneInfo: corrupted zoneinfo file: ");
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r34);
        return null;

     label31:
        if i13 == i0 goto label32;

        $r35 = <java.lang.System: java.io.PrintStream err>;
        $r36 = new java.lang.StringBuilder;
        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ZoneInfo: wrong file size: ");
        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r35.<java.io.PrintStream: void println(java.lang.String)>($r39);
        return null;

     label32:
        $r40 = new sun.util.calendar.ZoneInfo;
        specialinvoke $r40.<sun.util.calendar.ZoneInfo: void <init>(java.lang.String,int,int,int,long[],int[],int[],boolean)>(r0, i1, i2, i3, r2, r3, r4, z1);
        return $r40;

        catch java.lang.Exception from label1 to label3 with label30;
        catch java.lang.Exception from label4 to label6 with label30;
        catch java.lang.Exception from label7 to label19 with label30;
        catch java.lang.Exception from label20 to label29 with label30;
    }

    static java.util.List getZoneIDs()
    {
        java.util.List r0;
        java.lang.ref.SoftReference r1, $r9;
        null_type n0;
        int i0, i1, i3, i4, i5, $i7, i8, i9, $i12, i13, i16, $i18, i19, i22;
        byte b2, b6, $b10, $b14, $b17, $b20;
        java.lang.Object $r2;
        byte[] r3;
        short $s11, $s15, $s21;
        java.util.ArrayList $r4;
        java.lang.String $r5;
        java.lang.Exception $r6, r7;
        java.io.PrintStream $r8;

        r0 = null;
        r1 = <sun.util.calendar.ZoneInfoFile: java.lang.ref.SoftReference zoneIDs>;
        if r1 == null goto label0;

        $r2 = virtualinvoke r1.<java.lang.ref.SoftReference: java.lang.Object get()>();
        r0 = (java.util.List) $r2;
        if r0 == null goto label0;

        return r0;

     label0:
        n0 = null;
        r3 = staticinvoke <sun.util.calendar.ZoneInfoFile: byte[] getZoneInfoMappings()>();
        $i7 = <sun.util.calendar.ZoneInfoFile: int JAVAZM_LABEL_LENGTH>;
        i0 = $i7 + 1;
        i1 = lengthof r3;

     label1:
        if i0 >= i1 goto label6;

        i8 = i0 + 1;
        b2 = r3[i0];
        i9 = i8 + 1;
        $b10 = r3[i8];
        $s11 = $b10 & 255;
        $i12 = $s11 << 8;
        i13 = i9 + 1;
        $b14 = r3[i9];
        $s15 = $b14 & 255;
        i3 = $i12 + $s15;
        lookupswitch(b2)
        {
            case 64: goto label2;
            default: goto label5;
        };

     label2:
        i16 = i13 + 1;
        $b17 = r3[i13];
        $i18 = $b17 << 8;
        i19 = i16 + 1;
        $b20 = r3[i16];
        $s21 = $b20 & 255;
        i4 = $i18 + $s21;
        $r4 = new java.util.ArrayList;
        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(i4);
        r0 = $r4;
        i5 = 0;

     label3:
        if i5 >= i4 goto label4;

        i22 = i19 + 1;
        b6 = r3[i19];
        $r5 = new java.lang.String;
        specialinvoke $r5.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r3, i22, b6, "UTF-8");
        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r5);
        i19 = i22 + b6;
        i5 = i5 + 1;
        goto label3;

     label4:
        goto label6;

     label5:
        i0 = i13 + i3;
        goto label1;

     label6:
        goto label8;

     label7:
        $r6 := @caughtexception;
        r7 = $r6;
        $r8 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("ZoneInfo: corrupted ZoneInfoMappings");

     label8:
        $r9 = new java.lang.ref.SoftReference;
        specialinvoke $r9.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r0);
        <sun.util.calendar.ZoneInfoFile: java.lang.ref.SoftReference zoneIDs> = $r9;
        return r0;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    static java.util.Map getZoneAliases()
    {
        byte[] r0;
        int i0, i1, i3, i4, i5, $i7, i8, i9, $i12, i13, i16, $i18, i19, i22, i23, i24;
        java.util.HashMap r1, $r4;
        byte b2, b6, $b10, $b14, $b17, $b20, b25;
        java.lang.String r2, r3, $r5, $r6;
        short $s11, $s15, $s21;
        java.lang.Exception $r8, r9;
        java.io.PrintStream $r10;

        r0 = staticinvoke <sun.util.calendar.ZoneInfoFile: byte[] getZoneInfoMappings()>();
        $i7 = <sun.util.calendar.ZoneInfoFile: int JAVAZM_LABEL_LENGTH>;
        i0 = $i7 + 1;
        i1 = lengthof r0;
        r1 = null;

     label0:
        if i0 >= i1 goto label5;

        i8 = i0 + 1;
        b2 = r0[i0];
        i9 = i8 + 1;
        $b10 = r0[i8];
        $s11 = $b10 & 255;
        $i12 = $s11 << 8;
        i13 = i9 + 1;
        $b14 = r0[i9];
        $s15 = $b14 & 255;
        i3 = $i12 + $s15;
        lookupswitch(b2)
        {
            case 67: goto label1;
            default: goto label4;
        };

     label1:
        i16 = i13 + 1;
        $b17 = r0[i13];
        $i18 = $b17 << 8;
        i19 = i16 + 1;
        $b20 = r0[i16];
        $s21 = $b20 & 255;
        i4 = $i18 + $s21;
        $r4 = new java.util.HashMap;
        specialinvoke $r4.<java.util.HashMap: void <init>(int)>(i4);
        r1 = $r4;
        i5 = 0;

     label2:
        if i5 >= i4 goto label3;

        i22 = i19 + 1;
        b6 = r0[i19];
        $r5 = new java.lang.String;
        specialinvoke $r5.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r0, i22, b6, "UTF-8");
        r2 = $r5;
        i23 = i22 + b6;
        i24 = i23 + 1;
        b25 = r0[i23];
        $r6 = new java.lang.String;
        specialinvoke $r6.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r0, i24, b25, "UTF-8");
        r3 = $r6;
        i19 = i24 + b25;
        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);
        i5 = i5 + 1;
        goto label2;

     label3:
        goto label5;

     label4:
        i0 = i13 + i3;
        goto label0;

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;
        r9 = $r8;
        $r10 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("ZoneInfo: corrupted ZoneInfoMappings");
        return null;

     label7:
        return r1;

        catch java.lang.Exception from label0 to label5 with label6;
    }

    static java.util.List getExcludedZones()
    {
        boolean $z0;
        java.util.List r0;
        java.lang.ref.SoftReference r1, $r10;
        byte[] r2;
        int i0, i1, i3, i4, i5, $i7, i8, i9, $i12, i13, i16, $i18, i19, i22;
        byte b2, b6, $b10, $b14, $b17, $b20;
        java.lang.String r3, $r6;
        java.lang.Object $r4;
        short $s11, $s15, $s21;
        java.util.ArrayList $r5;
        java.lang.Exception $r7, r8;
        java.io.PrintStream $r9;

        $z0 = <sun.util.calendar.ZoneInfoFile: boolean hasNoExcludeList>;
        if $z0 == 0 goto label0;

        return null;

     label0:
        r0 = null;
        r1 = <sun.util.calendar.ZoneInfoFile: java.lang.ref.SoftReference excludedIDs>;
        if r1 == null goto label1;

        $r4 = virtualinvoke r1.<java.lang.ref.SoftReference: java.lang.Object get()>();
        r0 = (java.util.List) $r4;
        if r0 == null goto label1;

        return r0;

     label1:
        r2 = staticinvoke <sun.util.calendar.ZoneInfoFile: byte[] getZoneInfoMappings()>();
        $i7 = <sun.util.calendar.ZoneInfoFile: int JAVAZM_LABEL_LENGTH>;
        i0 = $i7 + 1;
        i1 = lengthof r2;

     label2:
        if i0 >= i1 goto label7;

        i8 = i0 + 1;
        b2 = r2[i0];
        i9 = i8 + 1;
        $b10 = r2[i8];
        $s11 = $b10 & 255;
        $i12 = $s11 << 8;
        i13 = i9 + 1;
        $b14 = r2[i9];
        $s15 = $b14 & 255;
        i3 = $i12 + $s15;
        lookupswitch(b2)
        {
            case 69: goto label3;
            default: goto label6;
        };

     label3:
        i16 = i13 + 1;
        $b17 = r2[i13];
        $i18 = $b17 << 8;
        i19 = i16 + 1;
        $b20 = r2[i16];
        $s21 = $b20 & 255;
        i4 = $i18 + $s21;
        $r5 = new java.util.ArrayList;
        specialinvoke $r5.<java.util.ArrayList: void <init>()>();
        r0 = $r5;
        i5 = 0;

     label4:
        if i5 >= i4 goto label5;

        i22 = i19 + 1;
        b6 = r2[i19];
        $r6 = new java.lang.String;
        specialinvoke $r6.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r2, i22, b6, "UTF-8");
        r3 = $r6;
        i19 = i22 + b6;
        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(r3);
        i5 = i5 + 1;
        goto label4;

     label5:
        goto label7;

     label6:
        i0 = i13 + i3;
        goto label2;

     label7:
        goto label9;

     label8:
        $r7 := @caughtexception;
        r8 = $r7;
        $r9 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("ZoneInfo: corrupted ZoneInfoMappings");
        return null;

     label9:
        if r0 == null goto label10;

        $r10 = new java.lang.ref.SoftReference;
        specialinvoke $r10.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r0);
        <sun.util.calendar.ZoneInfoFile: java.lang.ref.SoftReference excludedIDs> = $r10;
        goto label11;

     label10:
        <sun.util.calendar.ZoneInfoFile: boolean hasNoExcludeList> = 1;

     label11:
        return r0;

        catch java.lang.Exception from label2 to label7 with label8;
    }

    static byte[] getRawOffsetIndices()
    {
        byte[] r0, r2;
        java.lang.ref.SoftReference r1, $r7;
        int i0, i1, i3, i4, $i5, $i6, i7, i8, $i11, i12;
        byte b2, $b9, $b13, $b15;
        java.lang.Object $r3;
        short $s10, $s14;
        java.lang.ArrayIndexOutOfBoundsException $r4, r5;
        java.io.PrintStream $r6;

        r0 = null;
        r1 = <sun.util.calendar.ZoneInfoFile: java.lang.ref.SoftReference rawOffsetIndices>;
        if r1 == null goto label0;

        $r3 = virtualinvoke r1.<java.lang.ref.SoftReference: java.lang.Object get()>();
        r0 = (byte[]) $r3;
        if r0 == null goto label0;

        return r0;

     label0:
        r2 = staticinvoke <sun.util.calendar.ZoneInfoFile: byte[] getZoneInfoMappings()>();
        $i6 = <sun.util.calendar.ZoneInfoFile: int JAVAZM_LABEL_LENGTH>;
        i0 = $i6 + 1;
        i1 = lengthof r2;

     label1:
        if i0 >= i1 goto label6;

        i7 = i0 + 1;
        b2 = r2[i0];
        i8 = i7 + 1;
        $b9 = r2[i7];
        $s10 = $b9 & 255;
        $i11 = $s10 << 8;
        i12 = i8 + 1;
        $b13 = r2[i8];
        $s14 = $b13 & 255;
        i3 = $i11 + $s14;
        lookupswitch(b2)
        {
            case 66: goto label2;
            default: goto label5;
        };

     label2:
        r0 = newarray (byte)[i3];
        i4 = 0;

     label3:
        if i4 >= i3 goto label4;

        $i5 = i12;
        i12 = i12 + 1;
        $b15 = r2[$i5];
        r0[i4] = $b15;
        i4 = i4 + 1;
        goto label3;

     label4:
        goto label6;

     label5:
        i0 = i12 + i3;
        goto label1;

     label6:
        goto label8;

     label7:
        $r4 := @caughtexception;
        r5 = $r4;
        $r6 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("ZoneInfo: corrupted ZoneInfoMappings");

     label8:
        $r7 = new java.lang.ref.SoftReference;
        specialinvoke $r7.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r0);
        <sun.util.calendar.ZoneInfoFile: java.lang.ref.SoftReference rawOffsetIndices> = $r7;
        return r0;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label6 with label7;
    }

    static int[] getRawOffsets()
    {
        int[] r0;
        java.lang.ref.SoftReference r1, $r7;
        byte[] r2;
        int i0, i1, i3, i4, i5, $i7, i8, i9, $i12, i13, i16, $i18, i19, i22, $i23, i24, i27, $i28, i31;
        byte b2, $b10, $b14, $b17, $b20, $b25, $b29;
        short s6, $s11, $s15, $s21, $s26, $s30;
        java.lang.Object $r3;
        java.lang.ArrayIndexOutOfBoundsException $r4, r5;
        java.io.PrintStream $r6;

        r0 = null;
        r1 = <sun.util.calendar.ZoneInfoFile: java.lang.ref.SoftReference rawOffsets>;
        if r1 == null goto label0;

        $r3 = virtualinvoke r1.<java.lang.ref.SoftReference: java.lang.Object get()>();
        r0 = (int[]) $r3;
        if r0 == null goto label0;

        return r0;

     label0:
        r2 = staticinvoke <sun.util.calendar.ZoneInfoFile: byte[] getZoneInfoMappings()>();
        $i7 = <sun.util.calendar.ZoneInfoFile: int JAVAZM_LABEL_LENGTH>;
        i0 = $i7 + 1;
        i1 = lengthof r2;

     label1:
        if i0 >= i1 goto label6;

        i8 = i0 + 1;
        b2 = r2[i0];
        i9 = i8 + 1;
        $b10 = r2[i8];
        $s11 = $b10 & 255;
        $i12 = $s11 << 8;
        i13 = i9 + 1;
        $b14 = r2[i9];
        $s15 = $b14 & 255;
        i3 = $i12 + $s15;
        lookupswitch(b2)
        {
            case 65: goto label2;
            default: goto label5;
        };

     label2:
        i4 = i3 / 4;
        r0 = newarray (int)[i4];
        i5 = 0;

     label3:
        if i5 >= i4 goto label4;

        i16 = i13 + 1;
        $b17 = r2[i13];
        s6 = $b17 & 255;
        $i18 = s6 << 8;
        i19 = i16 + 1;
        $b20 = r2[i16];
        $s21 = $b20 & 255;
        i22 = $i18 + $s21;
        $i23 = i22 << 8;
        i24 = i19 + 1;
        $b25 = r2[i19];
        $s26 = $b25 & 255;
        i27 = $i23 + $s26;
        $i28 = i27 << 8;
        i13 = i24 + 1;
        $b29 = r2[i24];
        $s30 = $b29 & 255;
        i31 = $i28 + $s30;
        r0[i5] = i31;
        i5 = i5 + 1;
        goto label3;

     label4:
        goto label6;

     label5:
        i0 = i13 + i3;
        goto label1;

     label6:
        goto label8;

     label7:
        $r4 := @caughtexception;
        r5 = $r4;
        $r6 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("ZoneInfo: corrupted ZoneInfoMappings");

     label8:
        $r7 = new java.lang.ref.SoftReference;
        specialinvoke $r7.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r0);
        <sun.util.calendar.ZoneInfoFile: java.lang.ref.SoftReference rawOffsets> = $r7;
        return r0;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label6 with label7;
    }

    private static byte[] getZoneInfoMappings()
    {
        java.lang.ref.SoftReference r0, $r14;
        byte[] r1, $r2, r4, $r5;
        int i0, $i1, i4, $i6;
        java.lang.Object $r3;
        byte $b2, $b3, $b5, $b7;
        java.io.PrintStream $r6, $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12;
        java.lang.String $r13;

        r0 = <sun.util.calendar.ZoneInfoFile: java.lang.ref.SoftReference zoneInfoMappings>;
        if r0 == null goto label0;

        $r3 = virtualinvoke r0.<java.lang.ref.SoftReference: java.lang.Object get()>();
        r1 = (byte[]) $r3;
        if r1 == null goto label0;

        return r1;

     label0:
        r4 = staticinvoke <sun.util.calendar.ZoneInfoFile: byte[] readZoneInfoFile(java.lang.String)>("ZoneInfoMappings");
        if r4 != null goto label1;

        return null;

     label1:
        i0 = 0;

     label2:
        $r2 = <sun.util.calendar.ZoneInfoFile: byte[] JAVAZM_LABEL>;
        $i1 = lengthof $r2;
        if i0 >= $i1 goto label4;

        $b2 = r4[i0];
        $r5 = <sun.util.calendar.ZoneInfoFile: byte[] JAVAZM_LABEL>;
        $b3 = $r5[i0];
        if $b2 == $b3 goto label3;

        $r6 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("ZoneInfo: wrong magic number: ZoneInfoMappings");
        return null;

     label3:
        i0 = i0 + 1;
        goto label2;

     label4:
        i4 = i0 + 1;
        $b5 = r4[i0];
        if $b5 <= 1 goto label5;

        $r7 = <java.lang.System: java.io.PrintStream err>;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ZoneInfo: incompatible version (");
        $i6 = i4 - 1;
        $b7 = r4[$i6];
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b7);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ZoneInfoMappings");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r13);
        return null;

     label5:
        $r14 = new java.lang.ref.SoftReference;
        specialinvoke $r14.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r4);
        <sun.util.calendar.ZoneInfoFile: java.lang.ref.SoftReference zoneInfoMappings> = $r14;
        return r4;
    }

    private static byte[] readZoneInfoFile(java.lang.String)
    {
        java.lang.String r0, $r8, $r12, $r14;
        byte[] r1, $r6;
        java.security.PrivilegedActionException r2, $r7;
        java.lang.Exception r3;
        int $i0;
        sun.util.calendar.ZoneInfoFile$2 $r4;
        java.lang.Object $r5;
        boolean $z0, $z1;
        java.io.PrintStream $r9;
        java.lang.StringBuilder $r10, $r11, $r13;

        r0 := @parameter0: java.lang.String;
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("..");
        if $i0 < 0 goto label0;

        return null;

     label0:
        r1 = null;

     label1:
        $r4 = new sun.util.calendar.ZoneInfoFile$2;
        specialinvoke $r4.<sun.util.calendar.ZoneInfoFile$2: void <init>(java.lang.String)>(r0);
        $r5 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r4);
        $r6 = (byte[]) $r5;
        r1 = (byte[]) $r6;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;
        r2 = $r7;
        r3 = virtualinvoke r2.<java.security.PrivilegedActionException: java.lang.Exception getException()>();
        $z0 = r3 instanceof java.io.FileNotFoundException;
        if $z0 == 0 goto label4;

        $r8 = "ZoneInfoMappings";
        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r0);
        if $z1 == 0 goto label5;

     label4:
        $r9 = <java.lang.System: java.io.PrintStream err>;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ZoneInfo: ");
        $r12 = virtualinvoke r3.<java.lang.Exception: java.lang.String getMessage()>();
        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r14);

     label5:
        return r1;

        catch java.security.PrivilegedActionException from label1 to label2 with label3;
    }

    static java.lang.String access$000()
    {
        java.lang.String $r0;

        $r0 = <sun.util.calendar.ZoneInfoFile: java.lang.String ziDir>;
        return $r0;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2, $r3;
        int $i0, $i1;
        sun.util.calendar.ZoneInfo $r4;
        sun.util.calendar.ZoneInfoFile$1 $r5;
        java.lang.Object $r6;
        java.lang.String $r7;

        $r0 = newarray (byte)[7];
        $r0[0] = 106;
        $r0[1] = 97;
        $r0[2] = 118;
        $r0[3] = 97;
        $r0[4] = 122;
        $r0[5] = 105;
        $r0[6] = 0;
        <sun.util.calendar.ZoneInfoFile: byte[] JAVAZI_LABEL> = $r0;
        $r1 = <sun.util.calendar.ZoneInfoFile: byte[] JAVAZI_LABEL>;
        $i0 = lengthof $r1;
        <sun.util.calendar.ZoneInfoFile: int JAVAZI_LABEL_LENGTH> = $i0;
        $r2 = newarray (byte)[7];
        $r2[0] = 106;
        $r2[1] = 97;
        $r2[2] = 118;
        $r2[3] = 97;
        $r2[4] = 122;
        $r2[5] = 109;
        $r2[6] = 0;
        <sun.util.calendar.ZoneInfoFile: byte[] JAVAZM_LABEL> = $r2;
        $r3 = <sun.util.calendar.ZoneInfoFile: byte[] JAVAZM_LABEL>;
        $i1 = lengthof $r3;
        <sun.util.calendar.ZoneInfoFile: int JAVAZM_LABEL_LENGTH> = $i1;
        <sun.util.calendar.ZoneInfoFile: java.util.Map zoneInfoObjects> = null;
        $r4 = new sun.util.calendar.ZoneInfo;
        specialinvoke $r4.<sun.util.calendar.ZoneInfo: void <init>(java.lang.String,int)>("GMT", 0);
        <sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo GMT> = $r4;
        $r5 = new sun.util.calendar.ZoneInfoFile$1;
        specialinvoke $r5.<sun.util.calendar.ZoneInfoFile$1: void <init>()>();
        $r6 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r5);
        $r7 = (java.lang.String) $r6;
        <sun.util.calendar.ZoneInfoFile: java.lang.String ziDir> = $r7;
        <sun.util.calendar.ZoneInfoFile: java.lang.ref.SoftReference zoneIDs> = null;
        <sun.util.calendar.ZoneInfoFile: java.lang.ref.SoftReference excludedIDs> = null;
        <sun.util.calendar.ZoneInfoFile: boolean hasNoExcludeList> = 0;
        <sun.util.calendar.ZoneInfoFile: java.lang.ref.SoftReference rawOffsetIndices> = null;
        <sun.util.calendar.ZoneInfoFile: java.lang.ref.SoftReference rawOffsets> = null;
        <sun.util.calendar.ZoneInfoFile: java.lang.ref.SoftReference zoneInfoMappings> = null;
        return;
    }
}
