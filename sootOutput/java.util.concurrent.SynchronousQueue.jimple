public class java.util.concurrent.SynchronousQueue extends java.util.AbstractQueue implements java.util.concurrent.BlockingQueue, java.io.Serializable
{
    private static final long serialVersionUID;
    static final int NCPUS;
    static final int maxTimedSpins;
    static final int maxUntimedSpins;
    static final long spinForTimeoutThreshold;
    private transient volatile java.util.concurrent.SynchronousQueue$Transferer transferer;
    private java.util.concurrent.locks.ReentrantLock qlock;
    private java.util.concurrent.SynchronousQueue$WaitQueue waitingProducers;
    private java.util.concurrent.SynchronousQueue$WaitQueue waitingConsumers;

    public void <init>()
    {
        java.util.concurrent.SynchronousQueue r0;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        specialinvoke r0.<java.util.concurrent.SynchronousQueue: void <init>(boolean)>(0);
        return;
    }

    public void <init>(boolean)
    {
        java.util.concurrent.SynchronousQueue r0;
        boolean z0;
        java.util.concurrent.SynchronousQueue$Transferer $r2;
        java.util.concurrent.SynchronousQueue$TransferQueue r3;
        java.util.concurrent.SynchronousQueue$TransferStack r4;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        z0 := @parameter0: boolean;
        specialinvoke r0.<java.util.AbstractQueue: void <init>()>();
        if z0 == 0 goto label0;

        r3 = new java.util.concurrent.SynchronousQueue$TransferQueue;
        $r2 = r3;
        specialinvoke r3.<java.util.concurrent.SynchronousQueue$TransferQueue: void <init>()>();
        goto label1;

     label0:
        r4 = new java.util.concurrent.SynchronousQueue$TransferStack;
        $r2 = r4;
        specialinvoke r4.<java.util.concurrent.SynchronousQueue$TransferStack: void <init>()>();

     label1:
        r0.<java.util.concurrent.SynchronousQueue: java.util.concurrent.SynchronousQueue$Transferer transferer> = $r2;
        return;
    }

    public void put(java.lang.Object) throws java.lang.InterruptedException
    {
        java.util.concurrent.SynchronousQueue r0;
        java.lang.Object r1, $r4;
        java.lang.NullPointerException $r2;
        java.util.concurrent.SynchronousQueue$Transferer $r3;
        java.lang.InterruptedException $r5;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.util.concurrent.SynchronousQueue: java.util.concurrent.SynchronousQueue$Transferer transferer>;
        $r4 = virtualinvoke $r3.<java.util.concurrent.SynchronousQueue$Transferer: java.lang.Object transfer(java.lang.Object,boolean,long)>(r1, 0, 0L);
        if $r4 != null goto label1;

        staticinvoke <java.lang.Thread: boolean interrupted()>();
        $r5 = new java.lang.InterruptedException;
        specialinvoke $r5.<java.lang.InterruptedException: void <init>()>();
        throw $r5;

     label1:
        return;
    }

    public boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.SynchronousQueue r0;
        java.lang.Object r1, $r5;
        long l0, $l1;
        java.util.concurrent.TimeUnit r2;
        java.lang.NullPointerException $r3;
        java.util.concurrent.SynchronousQueue$Transferer $r4;
        boolean $z0;
        java.lang.InterruptedException $r6;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        r1 := @parameter0: java.lang.Object;
        l0 := @parameter1: long;
        r2 := @parameter2: java.util.concurrent.TimeUnit;
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        $r4 = r0.<java.util.concurrent.SynchronousQueue: java.util.concurrent.SynchronousQueue$Transferer transferer>;
        $l1 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);
        $r5 = virtualinvoke $r4.<java.util.concurrent.SynchronousQueue$Transferer: java.lang.Object transfer(java.lang.Object,boolean,long)>(r1, 1, $l1);
        if $r5 == null goto label1;

        return 1;

     label1:
        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();
        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r6 = new java.lang.InterruptedException;
        specialinvoke $r6.<java.lang.InterruptedException: void <init>()>();
        throw $r6;
    }

    public boolean offer(java.lang.Object)
    {
        java.util.concurrent.SynchronousQueue r0;
        java.lang.Object r1, $r4;
        java.lang.NullPointerException $r2;
        java.util.concurrent.SynchronousQueue$Transferer $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        r1 := @parameter0: java.lang.Object;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.util.concurrent.SynchronousQueue: java.util.concurrent.SynchronousQueue$Transferer transferer>;
        $r4 = virtualinvoke $r3.<java.util.concurrent.SynchronousQueue$Transferer: java.lang.Object transfer(java.lang.Object,boolean,long)>(r1, 1, 0L);
        if $r4 == null goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object take() throws java.lang.InterruptedException
    {
        java.util.concurrent.SynchronousQueue r0;
        java.lang.Object r1;
        java.util.concurrent.SynchronousQueue$Transferer $r2;
        java.lang.InterruptedException $r3;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        $r2 = r0.<java.util.concurrent.SynchronousQueue: java.util.concurrent.SynchronousQueue$Transferer transferer>;
        r1 = virtualinvoke $r2.<java.util.concurrent.SynchronousQueue$Transferer: java.lang.Object transfer(java.lang.Object,boolean,long)>(null, 0, 0L);
        if r1 == null goto label0;

        return r1;

     label0:
        staticinvoke <java.lang.Thread: boolean interrupted()>();
        $r3 = new java.lang.InterruptedException;
        specialinvoke $r3.<java.lang.InterruptedException: void <init>()>();
        throw $r3;
    }

    public java.lang.Object poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.SynchronousQueue r0;
        long l0, $l1;
        java.util.concurrent.TimeUnit r1;
        java.lang.Object r2;
        java.util.concurrent.SynchronousQueue$Transferer $r3;
        boolean $z0;
        java.lang.InterruptedException $r4;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.concurrent.TimeUnit;
        $r3 = r0.<java.util.concurrent.SynchronousQueue: java.util.concurrent.SynchronousQueue$Transferer transferer>;
        $l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);
        r2 = virtualinvoke $r3.<java.util.concurrent.SynchronousQueue$Transferer: java.lang.Object transfer(java.lang.Object,boolean,long)>(null, 1, $l1);
        if r2 != null goto label0;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();
        if $z0 != 0 goto label1;

     label0:
        return r2;

     label1:
        $r4 = new java.lang.InterruptedException;
        specialinvoke $r4.<java.lang.InterruptedException: void <init>()>();
        throw $r4;
    }

    public java.lang.Object poll()
    {
        java.util.concurrent.SynchronousQueue r0;
        java.util.concurrent.SynchronousQueue$Transferer $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        $r1 = r0.<java.util.concurrent.SynchronousQueue: java.util.concurrent.SynchronousQueue$Transferer transferer>;
        $r2 = virtualinvoke $r1.<java.util.concurrent.SynchronousQueue$Transferer: java.lang.Object transfer(java.lang.Object,boolean,long)>(null, 1, 0L);
        return $r2;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.SynchronousQueue r0;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        return 1;
    }

    public int size()
    {
        java.util.concurrent.SynchronousQueue r0;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        return 0;
    }

    public int remainingCapacity()
    {
        java.util.concurrent.SynchronousQueue r0;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        return 0;
    }

    public void clear()
    {
        java.util.concurrent.SynchronousQueue r0;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.SynchronousQueue r0;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        r1 := @parameter0: java.lang.Object;
        return 0;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.SynchronousQueue r0;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        r1 := @parameter0: java.lang.Object;
        return 0;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.concurrent.SynchronousQueue r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        r1 := @parameter0: java.util.Collection;
        $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();
        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.concurrent.SynchronousQueue r0;
        java.util.Collection r1;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        r1 := @parameter0: java.util.Collection;
        return 0;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.concurrent.SynchronousQueue r0;
        java.util.Collection r1;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        r1 := @parameter0: java.util.Collection;
        return 0;
    }

    public java.lang.Object peek()
    {
        java.util.concurrent.SynchronousQueue r0;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        return null;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.SynchronousQueue r0;
        java.util.Iterator $r1;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        $r1 = staticinvoke <java.util.Collections: java.util.Iterator emptyIterator()>();
        return $r1;
    }

    public java.lang.Object[] toArray()
    {
        java.util.concurrent.SynchronousQueue r0;
        java.lang.Object[] $r1;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        $r1 = newarray (java.lang.Object)[0];
        return $r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.concurrent.SynchronousQueue r0;
        java.lang.Object[] r1;
        int $i0;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        r1 := @parameter0: java.lang.Object[];
        $i0 = lengthof r1;
        if $i0 <= 0 goto label0;

        r1[0] = null;

     label0:
        return r1;
    }

    public int drainTo(java.util.Collection)
    {
        java.util.concurrent.SynchronousQueue r0;
        java.util.Collection r1;
        int i0;
        java.lang.Object r2, $r5;
        java.lang.NullPointerException $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        r1 := @parameter0: java.util.Collection;
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        if r1 != r0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r4;

     label1:
        i0 = 0;

     label2:
        $r5 = virtualinvoke r0.<java.util.concurrent.SynchronousQueue: java.lang.Object poll()>();
        r2 = $r5;
        if $r5 == null goto label3;

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>(r2);
        i0 = i0 + 1;
        goto label2;

     label3:
        return i0;
    }

    public int drainTo(java.util.Collection, int)
    {
        java.util.concurrent.SynchronousQueue r0;
        java.util.Collection r1;
        int i0, i1;
        java.lang.Object r2, $r5;
        java.lang.NullPointerException $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        r1 := @parameter0: java.util.Collection;
        i0 := @parameter1: int;
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        if r1 != r0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r4;

     label1:
        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r5 = virtualinvoke r0.<java.util.concurrent.SynchronousQueue: java.lang.Object poll()>();
        r2 = $r5;
        if $r5 == null goto label3;

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>(r2);
        i1 = i1 + 1;
        goto label2;

     label3:
        return i1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.concurrent.SynchronousQueue r0;
        java.io.ObjectOutputStream r1;
        boolean z0;
        java.util.concurrent.locks.ReentrantLock $r2, $r6;
        java.util.concurrent.SynchronousQueue$Transferer $r3;
        java.util.concurrent.SynchronousQueue$FifoWaitQueue $r4, $r5;
        java.util.concurrent.SynchronousQueue$LifoWaitQueue $r7, $r8;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        r1 := @parameter0: java.io.ObjectOutputStream;
        $r3 = r0.<java.util.concurrent.SynchronousQueue: java.util.concurrent.SynchronousQueue$Transferer transferer>;
        z0 = $r3 instanceof java.util.concurrent.SynchronousQueue$TransferQueue;
        if z0 == 0 goto label0;

        $r2 = new java.util.concurrent.locks.ReentrantLock;
        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>(1);
        r0.<java.util.concurrent.SynchronousQueue: java.util.concurrent.locks.ReentrantLock qlock> = $r2;
        $r4 = new java.util.concurrent.SynchronousQueue$FifoWaitQueue;
        specialinvoke $r4.<java.util.concurrent.SynchronousQueue$FifoWaitQueue: void <init>()>();
        r0.<java.util.concurrent.SynchronousQueue: java.util.concurrent.SynchronousQueue$WaitQueue waitingProducers> = $r4;
        $r5 = new java.util.concurrent.SynchronousQueue$FifoWaitQueue;
        specialinvoke $r5.<java.util.concurrent.SynchronousQueue$FifoWaitQueue: void <init>()>();
        r0.<java.util.concurrent.SynchronousQueue: java.util.concurrent.SynchronousQueue$WaitQueue waitingConsumers> = $r5;
        goto label1;

     label0:
        $r6 = new java.util.concurrent.locks.ReentrantLock;
        specialinvoke $r6.<java.util.concurrent.locks.ReentrantLock: void <init>()>();
        r0.<java.util.concurrent.SynchronousQueue: java.util.concurrent.locks.ReentrantLock qlock> = $r6;
        $r7 = new java.util.concurrent.SynchronousQueue$LifoWaitQueue;
        specialinvoke $r7.<java.util.concurrent.SynchronousQueue$LifoWaitQueue: void <init>()>();
        r0.<java.util.concurrent.SynchronousQueue: java.util.concurrent.SynchronousQueue$WaitQueue waitingProducers> = $r7;
        $r8 = new java.util.concurrent.SynchronousQueue$LifoWaitQueue;
        specialinvoke $r8.<java.util.concurrent.SynchronousQueue$LifoWaitQueue: void <init>()>();
        r0.<java.util.concurrent.SynchronousQueue: java.util.concurrent.SynchronousQueue$WaitQueue waitingConsumers> = $r8;

     label1:
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.concurrent.SynchronousQueue r0;
        java.io.ObjectInputStream r1;
        java.util.concurrent.SynchronousQueue$TransferQueue $r2;
        java.util.concurrent.SynchronousQueue$WaitQueue $r3;
        boolean $z0;
        java.util.concurrent.SynchronousQueue$TransferStack $r4;

        r0 := @this: java.util.concurrent.SynchronousQueue;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        $r3 = r0.<java.util.concurrent.SynchronousQueue: java.util.concurrent.SynchronousQueue$WaitQueue waitingProducers>;
        $z0 = $r3 instanceof java.util.concurrent.SynchronousQueue$FifoWaitQueue;
        if $z0 == 0 goto label0;

        $r2 = new java.util.concurrent.SynchronousQueue$TransferQueue;
        specialinvoke $r2.<java.util.concurrent.SynchronousQueue$TransferQueue: void <init>()>();
        r0.<java.util.concurrent.SynchronousQueue: java.util.concurrent.SynchronousQueue$Transferer transferer> = $r2;
        goto label1;

     label0:
        $r4 = new java.util.concurrent.SynchronousQueue$TransferStack;
        specialinvoke $r4.<java.util.concurrent.SynchronousQueue$TransferStack: void <init>()>();
        r0.<java.util.concurrent.SynchronousQueue: java.util.concurrent.SynchronousQueue$Transferer transferer> = $r4;

     label1:
        return;
    }

    static long objectFieldOffset(sun.misc.Unsafe, java.lang.String, java.lang.Class)
    {
        sun.misc.Unsafe r0;
        java.lang.String r1;
        java.lang.Class r2;
        java.lang.NoSuchFieldException r3, $r6;
        java.lang.NoSuchFieldError r4, $r7;
        java.lang.reflect.Field $r5;
        long $l0;

        r0 := @parameter0: sun.misc.Unsafe;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.Class;

     label0:
        $r5 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1);
        $l0 = virtualinvoke r0.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r5);

     label1:
        return $l0;

     label2:
        $r6 := @caughtexception;
        r3 = $r6;
        $r7 = new java.lang.NoSuchFieldError;
        specialinvoke $r7.<java.lang.NoSuchFieldError: void <init>(java.lang.String)>(r1);
        r4 = $r7;
        virtualinvoke r4.<java.lang.NoSuchFieldError: java.lang.Throwable initCause(java.lang.Throwable)>(r3);
        throw r4;

        catch java.lang.NoSuchFieldException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Runtime $r0;
        int $i0, $i1, $i3, $i4;
        byte $b2;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
        $i0 = virtualinvoke $r0.<java.lang.Runtime: int availableProcessors()>();
        <java.util.concurrent.SynchronousQueue: int NCPUS> = $i0;
        $i1 = <java.util.concurrent.SynchronousQueue: int NCPUS>;
        if $i1 >= 2 goto label0;

        $b2 = 0;
        goto label1;

     label0:
        $b2 = 32;

     label1:
        <java.util.concurrent.SynchronousQueue: int maxTimedSpins> = $b2;
        $i3 = <java.util.concurrent.SynchronousQueue: int maxTimedSpins>;
        $i4 = $i3 * 16;
        <java.util.concurrent.SynchronousQueue: int maxUntimedSpins> = $i4;
        return;
    }
}
