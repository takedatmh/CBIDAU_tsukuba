final class java.util.concurrent.ConcurrentHashMap$HashEntry extends java.lang.Object
{
    final int hash;
    final java.lang.Object key;
    volatile java.lang.Object value;
    volatile java.util.concurrent.ConcurrentHashMap$HashEntry next;
    static final sun.misc.Unsafe UNSAFE;
    static final long nextOffset;

    void <init>(int, java.lang.Object, java.lang.Object, java.util.concurrent.ConcurrentHashMap$HashEntry)
    {
        java.util.concurrent.ConcurrentHashMap$HashEntry r0, r3;
        int i0;
        java.lang.Object r1, r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$HashEntry;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.lang.Object;
        r3 := @parameter3: java.util.concurrent.ConcurrentHashMap$HashEntry;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash> = i0;
        r0.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key> = r1;
        r0.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value> = r2;
        r0.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next> = r3;
        return;
    }

    final void setNext(java.util.concurrent.ConcurrentHashMap$HashEntry)
    {
        java.util.concurrent.ConcurrentHashMap$HashEntry r0, r1;
        sun.misc.Unsafe $r2;
        long $l0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$HashEntry;
        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap$HashEntry;
        $r2 = <java.util.concurrent.ConcurrentHashMap$HashEntry: sun.misc.Unsafe UNSAFE>;
        $l0 = <java.util.concurrent.ConcurrentHashMap$HashEntry: long nextOffset>;
        virtualinvoke $r2.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r0, $l0, r1);
        return;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0, $r2;
        java.lang.Class r1;
        java.lang.reflect.Field $r3;
        long $l0;
        java.lang.Exception $r4, r5;
        java.lang.Error $r6;

     label0:
        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <java.util.concurrent.ConcurrentHashMap$HashEntry: sun.misc.Unsafe UNSAFE> = $r0;
        r1 = class "java/util/concurrent/ConcurrentHashMap$HashEntry";
        $r2 = <java.util.concurrent.ConcurrentHashMap$HashEntry: sun.misc.Unsafe UNSAFE>;
        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("next");
        $l0 = virtualinvoke $r2.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);
        <java.util.concurrent.ConcurrentHashMap$HashEntry: long nextOffset> = $l0;

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r5 = $r4;
        $r6 = new java.lang.Error;
        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.Throwable)>(r5);
        throw $r6;

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }
}
