public class java.io.StringReader extends java.io.Reader
{
    private java.lang.String str;
    private int length;
    private int next;
    private int mark;

    public void <init>(java.lang.String)
    {
        java.io.StringReader r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: java.io.StringReader;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.io.Reader: void <init>()>();
        r0.<java.io.StringReader: int next> = 0;
        r0.<java.io.StringReader: int mark> = 0;
        r0.<java.io.StringReader: java.lang.String str> = r1;
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        r0.<java.io.StringReader: int length> = $i0;
        return;
    }

    private void ensureOpen() throws java.io.IOException
    {
        java.io.StringReader r0;
        java.lang.String $r1;
        java.io.IOException $r2;

        r0 := @this: java.io.StringReader;
        $r1 = r0.<java.io.StringReader: java.lang.String str>;
        if $r1 != null goto label0;

        $r2 = new java.io.IOException;
        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Stream closed");
        throw $r2;

     label0:
        return;
    }

    public int read() throws java.io.IOException
    {
        java.io.StringReader r0;
        java.lang.Object r1, $r3;
        int $i0, $i1, $i2, $i4;
        java.lang.Throwable r2, $r6;
        byte $b3;
        java.lang.String $r4;
        char $c5;

        r0 := @this: java.io.StringReader;
        $r3 = r0.<java.io.StringReader: java.lang.Object lock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        specialinvoke r0.<java.io.StringReader: void ensureOpen()>();
        $i1 = r0.<java.io.StringReader: int next>;
        $i2 = r0.<java.io.StringReader: int length>;
        if $i1 < $i2 goto label2;

        $b3 = -1;
        exitmonitor r1;

     label1:
        return $b3;

     label2:
        $r4 = r0.<java.io.StringReader: java.lang.String str>;
        $i0 = r0.<java.io.StringReader: int next>;
        $i4 = $i0 + 1;
        r0.<java.io.StringReader: int next> = $i4;
        $c5 = virtualinvoke $r4.<java.lang.String: char charAt(int)>($i0);
        exitmonitor r1;

     label3:
        return $c5;

     label4:
        $r6 := @caughtexception;

     label5:
        r2 = $r6;
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int read(char[], int, int) throws java.io.IOException
    {
        java.io.StringReader r0;
        char[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r8;
        java.lang.IndexOutOfBoundsException $r5;
        byte $b7, $b10;
        java.lang.String $r6;

        r0 := @this: java.io.StringReader;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r4 = r0.<java.io.StringReader: java.lang.Object lock>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        specialinvoke r0.<java.io.StringReader: void ensureOpen()>();
        if i0 < 0 goto label1;

        $i3 = lengthof r1;
        if i0 > $i3 goto label1;

        if i1 < 0 goto label1;

        $i4 = i0 + i1;
        $i5 = lengthof r1;
        if $i4 > $i5 goto label1;

        $i6 = i0 + i1;
        if $i6 >= 0 goto label2;

     label1:
        $r5 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r5;

     label2:
        if i1 != 0 goto label4;

        $b7 = 0;
        exitmonitor r2;

     label3:
        return $b7;

     label4:
        $i8 = r0.<java.io.StringReader: int next>;
        $i9 = r0.<java.io.StringReader: int length>;
        if $i8 < $i9 goto label6;

        $b10 = -1;
        exitmonitor r2;

     label5:
        return $b10;

     label6:
        $i11 = r0.<java.io.StringReader: int length>;
        $i12 = r0.<java.io.StringReader: int next>;
        $i13 = $i11 - $i12;
        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i13, i1);
        $r6 = r0.<java.io.StringReader: java.lang.String str>;
        $i14 = r0.<java.io.StringReader: int next>;
        $i15 = r0.<java.io.StringReader: int next>;
        $i16 = $i15 + i2;
        virtualinvoke $r6.<java.lang.String: void getChars(int,int,char[],int)>($i14, $i16, r1, i0);
        $i17 = r0.<java.io.StringReader: int next>;
        $i18 = $i17 + i2;
        r0.<java.io.StringReader: int next> = $i18;
        exitmonitor r2;

     label7:
        return i2;

     label8:
        $r8 := @caughtexception;

     label9:
        r3 = $r8;
        exitmonitor r2;

     label10:
        throw r3;

        catch java.lang.Throwable from label0 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    public long skip(long) throws java.io.IOException
    {
        java.io.StringReader r0;
        long l0, l1, $l4, $l8, $l11, l12, $l14, $l15;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        int $i2, $i3, $i5, $i6, $i7, $i9, $i10, $i13, $i16;

        r0 := @this: java.io.StringReader;
        l0 := @parameter0: long;
        $r3 = r0.<java.io.StringReader: java.lang.Object lock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        specialinvoke r0.<java.io.StringReader: void ensureOpen()>();
        $i2 = r0.<java.io.StringReader: int next>;
        $i3 = r0.<java.io.StringReader: int length>;
        if $i2 < $i3 goto label2;

        $l4 = 0L;
        exitmonitor r1;

     label1:
        return $l4;

     label2:
        $i5 = r0.<java.io.StringReader: int length>;
        $i6 = r0.<java.io.StringReader: int next>;
        $i7 = $i5 - $i6;
        $l8 = (long) $i7;
        l1 = staticinvoke <java.lang.Math: long min(long,long)>($l8, l0);
        $i9 = r0.<java.io.StringReader: int next>;
        $i10 = neg $i9;
        $l11 = (long) $i10;
        l12 = staticinvoke <java.lang.Math: long max(long,long)>($l11, l1);
        $i13 = r0.<java.io.StringReader: int next>;
        $l14 = (long) $i13;
        $l15 = $l14 + l12;
        $i16 = (int) $l15;
        r0.<java.io.StringReader: int next> = $i16;
        exitmonitor r1;

     label3:
        return l12;

     label4:
        $r5 := @caughtexception;

     label5:
        r2 = $r5;
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean ready() throws java.io.IOException
    {
        java.io.StringReader r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: java.io.StringReader;
        $r3 = r0.<java.io.StringReader: java.lang.Object lock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        specialinvoke r0.<java.io.StringReader: void ensureOpen()>();
        $z0 = 1;
        exitmonitor r1;

     label1:
        return $z0;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public boolean markSupported()
    {
        java.io.StringReader r0;

        r0 := @this: java.io.StringReader;
        return 1;
    }

    public void mark(int) throws java.io.IOException
    {
        java.io.StringReader r0;
        int i0, $i1;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r5;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: java.io.StringReader;
        i0 := @parameter0: int;
        if i0 >= 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Read-ahead limit < 0");
        throw $r3;

     label0:
        $r4 = r0.<java.io.StringReader: java.lang.Object lock>;
        r1 = $r4;
        entermonitor $r4;

     label1:
        specialinvoke r0.<java.io.StringReader: void ensureOpen()>();
        $i1 = r0.<java.io.StringReader: int next>;
        r0.<java.io.StringReader: int mark> = $i1;
        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        r2 = $r5;
        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void reset() throws java.io.IOException
    {
        java.io.StringReader r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;

        r0 := @this: java.io.StringReader;
        $r3 = r0.<java.io.StringReader: java.lang.Object lock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        specialinvoke r0.<java.io.StringReader: void ensureOpen()>();
        $i0 = r0.<java.io.StringReader: int mark>;
        r0.<java.io.StringReader: int next> = $i0;
        exitmonitor r1;

     label1:
        goto label5;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;
        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void close()
    {
        java.io.StringReader r0;

        r0 := @this: java.io.StringReader;
        r0.<java.io.StringReader: java.lang.String str> = null;
        return;
    }
}
