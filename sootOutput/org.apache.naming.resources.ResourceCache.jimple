public class org.apache.naming.resources.ResourceCache extends java.lang.Object
{
    protected java.util.Random random;
    protected org.apache.naming.resources.CacheEntry[] cache;
    protected java.util.HashMap notFoundCache;
    protected int cacheMaxSize;
    protected int maxAllocateIterations;
    protected long desiredEntryAccessRatio;
    protected int spareNotFoundEntries;
    protected int cacheSize;
    protected long accessCount;
    protected long hitsCount;

    public void <init>()
    {
        org.apache.naming.resources.ResourceCache r0;
        java.util.Random $r1;
        org.apache.naming.resources.CacheEntry[] $r2;
        java.util.HashMap $r3;

        r0 := @this: org.apache.naming.resources.ResourceCache;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new java.util.Random;
        specialinvoke $r1.<java.util.Random: void <init>()>();
        r0.<org.apache.naming.resources.ResourceCache: java.util.Random random> = $r1;
        $r2 = newarray (org.apache.naming.resources.CacheEntry)[0];
        r0.<org.apache.naming.resources.ResourceCache: org.apache.naming.resources.CacheEntry[] cache> = $r2;
        $r3 = new java.util.HashMap;
        specialinvoke $r3.<java.util.HashMap: void <init>()>();
        r0.<org.apache.naming.resources.ResourceCache: java.util.HashMap notFoundCache> = $r3;
        r0.<org.apache.naming.resources.ResourceCache: int cacheMaxSize> = 10240;
        r0.<org.apache.naming.resources.ResourceCache: int maxAllocateIterations> = 20;
        r0.<org.apache.naming.resources.ResourceCache: long desiredEntryAccessRatio> = 3L;
        r0.<org.apache.naming.resources.ResourceCache: int spareNotFoundEntries> = 500;
        r0.<org.apache.naming.resources.ResourceCache: int cacheSize> = 0;
        r0.<org.apache.naming.resources.ResourceCache: long accessCount> = 0L;
        r0.<org.apache.naming.resources.ResourceCache: long hitsCount> = 0L;
        return;
    }

    public long getAccessCount()
    {
        org.apache.naming.resources.ResourceCache r0;
        long $l0;

        r0 := @this: org.apache.naming.resources.ResourceCache;
        $l0 = r0.<org.apache.naming.resources.ResourceCache: long accessCount>;
        return $l0;
    }

    public int getCacheMaxSize()
    {
        org.apache.naming.resources.ResourceCache r0;
        int $i0;

        r0 := @this: org.apache.naming.resources.ResourceCache;
        $i0 = r0.<org.apache.naming.resources.ResourceCache: int cacheMaxSize>;
        return $i0;
    }

    public void setCacheMaxSize(int)
    {
        org.apache.naming.resources.ResourceCache r0;
        int i0;

        r0 := @this: org.apache.naming.resources.ResourceCache;
        i0 := @parameter0: int;
        r0.<org.apache.naming.resources.ResourceCache: int cacheMaxSize> = i0;
        return;
    }

    public int getCacheSize()
    {
        org.apache.naming.resources.ResourceCache r0;
        int $i0;

        r0 := @this: org.apache.naming.resources.ResourceCache;
        $i0 = r0.<org.apache.naming.resources.ResourceCache: int cacheSize>;
        return $i0;
    }

    public long getDesiredEntryAccessRatio()
    {
        org.apache.naming.resources.ResourceCache r0;
        long $l0;

        r0 := @this: org.apache.naming.resources.ResourceCache;
        $l0 = r0.<org.apache.naming.resources.ResourceCache: long desiredEntryAccessRatio>;
        return $l0;
    }

    public void setDesiredEntryAccessRatio(long)
    {
        org.apache.naming.resources.ResourceCache r0;
        long l0;

        r0 := @this: org.apache.naming.resources.ResourceCache;
        l0 := @parameter0: long;
        r0.<org.apache.naming.resources.ResourceCache: long desiredEntryAccessRatio> = l0;
        return;
    }

    public long getHitsCount()
    {
        org.apache.naming.resources.ResourceCache r0;
        long $l0;

        r0 := @this: org.apache.naming.resources.ResourceCache;
        $l0 = r0.<org.apache.naming.resources.ResourceCache: long hitsCount>;
        return $l0;
    }

    public int getMaxAllocateIterations()
    {
        org.apache.naming.resources.ResourceCache r0;
        int $i0;

        r0 := @this: org.apache.naming.resources.ResourceCache;
        $i0 = r0.<org.apache.naming.resources.ResourceCache: int maxAllocateIterations>;
        return $i0;
    }

    public void setMaxAllocateIterations(int)
    {
        org.apache.naming.resources.ResourceCache r0;
        int i0;

        r0 := @this: org.apache.naming.resources.ResourceCache;
        i0 := @parameter0: int;
        r0.<org.apache.naming.resources.ResourceCache: int maxAllocateIterations> = i0;
        return;
    }

    public int getSpareNotFoundEntries()
    {
        org.apache.naming.resources.ResourceCache r0;
        int $i0;

        r0 := @this: org.apache.naming.resources.ResourceCache;
        $i0 = r0.<org.apache.naming.resources.ResourceCache: int spareNotFoundEntries>;
        return $i0;
    }

    public void setSpareNotFoundEntries(int)
    {
        org.apache.naming.resources.ResourceCache r0;
        int i0;

        r0 := @this: org.apache.naming.resources.ResourceCache;
        i0 := @parameter0: int;
        r0.<org.apache.naming.resources.ResourceCache: int spareNotFoundEntries> = i0;
        return;
    }

    public boolean allocate(int)
    {
        org.apache.naming.resources.ResourceCache r0;
        int i0, i1, i2, i3, i4, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i28, $i30, $i31, $i32, i33, i35, $i36, $i37, $i38, $i39, $i40, $i43;
        long l5, $l22, $l23, $l24, l25, $l26, $l29, $l41, $l42;
        int[] r1;
        boolean z0;
        java.util.HashMap $r2, $r3;
        java.util.Random $r5;
        org.apache.naming.resources.CacheEntry[] $r6, $r7, $r9, $r11, $r13, r14, $r15, $r17;
        org.apache.naming.resources.CacheEntry $r8, $r10, $r12, $r16;
        byte $b27, b34;

        r0 := @this: org.apache.naming.resources.ResourceCache;
        i0 := @parameter0: int;
        $i9 = r0.<org.apache.naming.resources.ResourceCache: int cacheMaxSize>;
        $i10 = r0.<org.apache.naming.resources.ResourceCache: int cacheSize>;
        $i11 = $i9 - $i10;
        i1 = i0 - $i11;
        if i1 > 0 goto label0;

        return 1;

     label0:
        $i12 = r0.<org.apache.naming.resources.ResourceCache: int cacheMaxSize>;
        $i13 = $i12 / 20;
        i14 = i1 + $i13;
        $r2 = r0.<org.apache.naming.resources.ResourceCache: java.util.HashMap notFoundCache>;
        i2 = virtualinvoke $r2.<java.util.HashMap: int size()>();
        $i15 = r0.<org.apache.naming.resources.ResourceCache: int spareNotFoundEntries>;
        if i2 <= $i15 goto label1;

        $r3 = r0.<org.apache.naming.resources.ResourceCache: java.util.HashMap notFoundCache>;
        virtualinvoke $r3.<java.util.HashMap: void clear()>();
        $i16 = r0.<org.apache.naming.resources.ResourceCache: int cacheSize>;
        $i17 = $i16 - i2;
        r0.<org.apache.naming.resources.ResourceCache: int cacheSize> = $i17;
        i14 = i14 - i2;

     label1:
        if i14 > 0 goto label2;

        return 1;

     label2:
        i3 = 0;
        i4 = 0;
        l5 = 0L;
        $i18 = r0.<org.apache.naming.resources.ResourceCache: int maxAllocateIterations>;
        r1 = newarray (int)[$i18];
        goto label11;

     label3:
        $i19 = r0.<org.apache.naming.resources.ResourceCache: int maxAllocateIterations>;
        if i3 != $i19 goto label4;

        return 0;

     label4:
        i6 = -1;
        z0 = 0;
        goto label9;

     label5:
        z0 = 1;
        $r5 = r0.<org.apache.naming.resources.ResourceCache: java.util.Random random>;
        $r6 = r0.<org.apache.naming.resources.ResourceCache: org.apache.naming.resources.CacheEntry[] cache>;
        $i20 = lengthof $r6;
        i6 = virtualinvoke $r5.<java.util.Random: int nextInt(int)>($i20);
        i7 = 0;
        goto label8;

     label6:
        $i21 = r1[i7];
        if $i21 != i6 goto label7;

        z0 = 0;

     label7:
        i7 = i7 + 1;

     label8:
        if i7 < i4 goto label6;

     label9:
        if z0 == 0 goto label5;

        $r7 = r0.<org.apache.naming.resources.ResourceCache: org.apache.naming.resources.CacheEntry[] cache>;
        $r8 = $r7[i6];
        $l22 = $r8.<org.apache.naming.resources.CacheEntry: long accessCount>;
        $l23 = $l22 * 100L;
        $l24 = r0.<org.apache.naming.resources.ResourceCache: long accessCount>;
        l25 = $l23 / $l24;
        $l26 = r0.<org.apache.naming.resources.ResourceCache: long desiredEntryAccessRatio>;
        $b27 = l25 cmp $l26;
        if $b27 >= 0 goto label10;

        r1[i4] = i6;
        $r9 = r0.<org.apache.naming.resources.ResourceCache: org.apache.naming.resources.CacheEntry[] cache>;
        $r10 = $r9[i6];
        $i28 = $r10.<org.apache.naming.resources.CacheEntry: int size>;
        $l29 = (long) $i28;
        l5 = l5 + $l29;
        $r11 = r0.<org.apache.naming.resources.ResourceCache: org.apache.naming.resources.CacheEntry[] cache>;
        $r12 = $r11[i6];
        $i30 = $r12.<org.apache.naming.resources.CacheEntry: int size>;
        i14 = i14 - $i30;
        i4 = i4 + 1;

     label10:
        i3 = i3 + 1;

     label11:
        if i14 > 0 goto label3;

        staticinvoke <java.util.Arrays: void sort(int[],int,int)>(r1, 0, i4);
        $r13 = r0.<org.apache.naming.resources.ResourceCache: org.apache.naming.resources.CacheEntry[] cache>;
        $i31 = lengthof $r13;
        $i32 = $i31 - i4;
        r14 = newarray (org.apache.naming.resources.CacheEntry)[$i32];
        i33 = 0;
        b34 = -1;
        if i4 <= 0 goto label17;

        i35 = r1[0];
        i8 = 0;
        goto label16;

     label12:
        if i8 != i35 goto label14;

        $i36 = i33 + 1;
        if $i36 >= i4 goto label13;

        $i37 = i33 + 1;
        i35 = r1[$i37];
        i33 = i33 + 1;
        goto label15;

     label13:
        i33 = i33 + 1;
        i35 = -1;
        goto label15;

     label14:
        $i38 = i8 - i33;
        $r15 = r0.<org.apache.naming.resources.ResourceCache: org.apache.naming.resources.CacheEntry[] cache>;
        $r16 = $r15[i8];
        r14[$i38] = $r16;

     label15:
        i8 = i8 + 1;

     label16:
        $r17 = r0.<org.apache.naming.resources.ResourceCache: org.apache.naming.resources.CacheEntry[] cache>;
        $i39 = lengthof $r17;
        if i8 < $i39 goto label12;

     label17:
        r0.<org.apache.naming.resources.ResourceCache: org.apache.naming.resources.CacheEntry[] cache> = r14;
        $i40 = r0.<org.apache.naming.resources.ResourceCache: int cacheSize>;
        $l41 = (long) $i40;
        $l42 = $l41 - l5;
        $i43 = (int) $l42;
        r0.<org.apache.naming.resources.ResourceCache: int cacheSize> = $i43;
        return 1;
    }

    public org.apache.naming.resources.CacheEntry lookup(java.lang.String)
    {
        org.apache.naming.resources.ResourceCache r0;
        java.lang.String r1, $r7;
        org.apache.naming.resources.CacheEntry r2, $r6;
        org.apache.naming.resources.CacheEntry[] r3;
        int i0;
        java.lang.Exception r4, $r10;
        long $l1, $l2, $l3, $l4;
        boolean $z0;
        java.util.HashMap $r8;
        java.lang.Object $r9;

        r0 := @this: org.apache.naming.resources.ResourceCache;
        r1 := @parameter0: java.lang.String;
        r2 = null;
        r3 = r0.<org.apache.naming.resources.ResourceCache: org.apache.naming.resources.CacheEntry[] cache>;
        $l1 = r0.<org.apache.naming.resources.ResourceCache: long accessCount>;
        $l2 = $l1 + 1L;
        r0.<org.apache.naming.resources.ResourceCache: long accessCount> = $l2;
        i0 = staticinvoke <org.apache.naming.resources.ResourceCache: int find(org.apache.naming.resources.CacheEntry[],java.lang.String)>(r3, r1);
        if i0 == -1 goto label0;

        $r6 = r3[i0];
        $r7 = $r6.<org.apache.naming.resources.CacheEntry: java.lang.String name>;
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r7);
        if $z0 == 0 goto label0;

        r2 = r3[i0];

     label0:
        if r2 != null goto label4;

     label1:
        $r8 = r0.<org.apache.naming.resources.ResourceCache: java.util.HashMap notFoundCache>;
        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);
        r2 = (org.apache.naming.resources.CacheEntry) $r9;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;
        r4 = $r10;

     label4:
        if r2 == null goto label5;

        $l3 = r0.<org.apache.naming.resources.ResourceCache: long hitsCount>;
        $l4 = $l3 + 1L;
        r0.<org.apache.naming.resources.ResourceCache: long hitsCount> = $l4;

     label5:
        return r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void load(org.apache.naming.resources.CacheEntry)
    {
        org.apache.naming.resources.ResourceCache r0;
        org.apache.naming.resources.CacheEntry r1;
        byte b0, $b4;
        boolean $z0, $z1;
        int $i1, $i2, $i3, $i5, $i6;
        java.util.HashMap $r3, $r6;
        java.lang.String $r4, $r7;
        java.lang.Object $r5;

        r0 := @this: org.apache.naming.resources.ResourceCache;
        r1 := @parameter0: org.apache.naming.resources.CacheEntry;
        $z0 = r1.<org.apache.naming.resources.CacheEntry: boolean exists>;
        if $z0 == 0 goto label0;

        $z1 = specialinvoke r0.<org.apache.naming.resources.ResourceCache: boolean insertCache(org.apache.naming.resources.CacheEntry)>(r1);
        if $z1 == 0 goto label3;

        $i1 = r0.<org.apache.naming.resources.ResourceCache: int cacheSize>;
        $i2 = r1.<org.apache.naming.resources.CacheEntry: int size>;
        $i3 = $i1 + $i2;
        r0.<org.apache.naming.resources.ResourceCache: int cacheSize> = $i3;
        goto label3;

     label0:
        $r3 = r0.<org.apache.naming.resources.ResourceCache: java.util.HashMap notFoundCache>;
        $r4 = r1.<org.apache.naming.resources.CacheEntry: java.lang.String name>;
        $r5 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);
        if $r5 != null goto label1;

        $b4 = 1;
        goto label2;

     label1:
        $b4 = 0;

     label2:
        b0 = $b4;
        $r6 = r0.<org.apache.naming.resources.ResourceCache: java.util.HashMap notFoundCache>;
        $r7 = r1.<org.apache.naming.resources.CacheEntry: java.lang.String name>;
        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r1);
        $i5 = r0.<org.apache.naming.resources.ResourceCache: int cacheSize>;
        $i6 = $i5 + b0;
        r0.<org.apache.naming.resources.ResourceCache: int cacheSize> = $i6;

     label3:
        return;
    }

    public boolean unload(java.lang.String)
    {
        org.apache.naming.resources.ResourceCache r0;
        java.lang.String r1;
        org.apache.naming.resources.CacheEntry r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.HashMap $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.naming.resources.ResourceCache;
        r1 := @parameter0: java.lang.String;
        r2 = specialinvoke r0.<org.apache.naming.resources.ResourceCache: org.apache.naming.resources.CacheEntry removeCache(java.lang.String)>(r1);
        if r2 == null goto label0;

        $i0 = r0.<org.apache.naming.resources.ResourceCache: int cacheSize>;
        $i1 = r2.<org.apache.naming.resources.CacheEntry: int size>;
        $i2 = $i0 - $i1;
        r0.<org.apache.naming.resources.ResourceCache: int cacheSize> = $i2;
        return 1;

     label0:
        $r4 = r0.<org.apache.naming.resources.ResourceCache: java.util.HashMap notFoundCache>;
        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);
        if $r5 == null goto label1;

        $i3 = r0.<org.apache.naming.resources.ResourceCache: int cacheSize>;
        $i4 = $i3 - 1;
        r0.<org.apache.naming.resources.ResourceCache: int cacheSize> = $i4;
        return 1;

     label1:
        return 0;
    }

    private static final int find(org.apache.naming.resources.CacheEntry[], java.lang.String)
    {
        org.apache.naming.resources.CacheEntry[] r0;
        java.lang.String r1, $r3, $r5, $r7;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7, $i8;
        boolean z0;
        org.apache.naming.resources.CacheEntry $r2, $r4, $r6;

        r0 := @parameter0: org.apache.naming.resources.CacheEntry[];
        r1 := @parameter1: java.lang.String;
        i0 = 0;
        $i4 = lengthof r0;
        i1 = $i4 - 1;
        if i1 != -1 goto label0;

        return -1;

     label0:
        $r2 = r0[0];
        $r3 = $r2.<org.apache.naming.resources.CacheEntry: java.lang.String name>;
        $i5 = virtualinvoke r1.<java.lang.String: int compareTo(java.lang.String)>($r3);
        if $i5 >= 0 goto label1;

        return -1;

     label1:
        if i1 != 0 goto label2;

        return 0;

     label2:
        z0 = 0;

     label3:
        $i6 = i1 + i0;
        i7 = $i6 >>> 1;
        $r4 = r0[i7];
        $r5 = $r4.<org.apache.naming.resources.CacheEntry: java.lang.String name>;
        i2 = virtualinvoke r1.<java.lang.String: int compareTo(java.lang.String)>($r5);
        if i2 <= 0 goto label4;

        i0 = i7;
        goto label6;

     label4:
        if i2 != 0 goto label5;

        return i7;

     label5:
        i1 = i7;

     label6:
        $i8 = i1 - i0;
        if $i8 != 1 goto label3;

        $r6 = r0[i1];
        $r7 = $r6.<org.apache.naming.resources.CacheEntry: java.lang.String name>;
        i3 = virtualinvoke r1.<java.lang.String: int compareTo(java.lang.String)>($r7);
        if i3 >= 0 goto label7;

        return i0;

     label7:
        return i1;
    }

    private final boolean insertCache(org.apache.naming.resources.CacheEntry)
    {
        org.apache.naming.resources.ResourceCache r0;
        org.apache.naming.resources.CacheEntry r1, $r6;
        org.apache.naming.resources.CacheEntry[] r2, r3, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r4, $r5, $r7;
        boolean $z0;

        r0 := @this: org.apache.naming.resources.ResourceCache;
        r1 := @parameter0: org.apache.naming.resources.CacheEntry;
        r2 = r0.<org.apache.naming.resources.ResourceCache: org.apache.naming.resources.CacheEntry[] cache>;
        $r4 = r1.<org.apache.naming.resources.CacheEntry: java.lang.String name>;
        i0 = staticinvoke <org.apache.naming.resources.ResourceCache: int find(org.apache.naming.resources.CacheEntry[],java.lang.String)>(r2, $r4);
        if i0 == -1 goto label0;

        $r5 = r1.<org.apache.naming.resources.CacheEntry: java.lang.String name>;
        $r6 = r2[i0];
        $r7 = $r6.<org.apache.naming.resources.CacheEntry: java.lang.String name>;
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r7);
        if $z0 == 0 goto label0;

        return 0;

     label0:
        $r8 = r0.<org.apache.naming.resources.ResourceCache: org.apache.naming.resources.CacheEntry[] cache>;
        $i1 = lengthof $r8;
        $i2 = $i1 + 1;
        r3 = newarray (org.apache.naming.resources.CacheEntry)[$i2];
        $i3 = i0 + 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, $i3);
        $i4 = i0 + 1;
        r3[$i4] = r1;
        $i5 = i0 + 1;
        $i6 = i0 + 2;
        $i7 = lengthof r2;
        $i8 = $i7 - i0;
        $i9 = $i8 - 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i5, r3, $i6, $i9);
        r0.<org.apache.naming.resources.ResourceCache: org.apache.naming.resources.CacheEntry[] cache> = r3;
        return 1;
    }

    private final org.apache.naming.resources.CacheEntry removeCache(java.lang.String)
    {
        org.apache.naming.resources.ResourceCache r0;
        java.lang.String r1, $r5;
        org.apache.naming.resources.CacheEntry[] r2, r3, $r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.naming.resources.CacheEntry $r4, $r7;
        boolean $z0;

        r0 := @this: org.apache.naming.resources.ResourceCache;
        r1 := @parameter0: java.lang.String;
        r2 = r0.<org.apache.naming.resources.ResourceCache: org.apache.naming.resources.CacheEntry[] cache>;
        i0 = staticinvoke <org.apache.naming.resources.ResourceCache: int find(org.apache.naming.resources.CacheEntry[],java.lang.String)>(r2, r1);
        if i0 == -1 goto label0;

        $r4 = r2[i0];
        $r5 = $r4.<org.apache.naming.resources.CacheEntry: java.lang.String name>;
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);
        if $z0 == 0 goto label0;

        $r6 = r0.<org.apache.naming.resources.ResourceCache: org.apache.naming.resources.CacheEntry[] cache>;
        $i1 = lengthof $r6;
        $i2 = $i1 - 1;
        r3 = newarray (org.apache.naming.resources.CacheEntry)[$i2];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, i0);
        $i3 = i0 + 1;
        $i4 = lengthof r2;
        $i5 = $i4 - i0;
        $i6 = $i5 - 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i3, r3, i0, $i6);
        r0.<org.apache.naming.resources.ResourceCache: org.apache.naming.resources.CacheEntry[] cache> = r3;
        $r7 = r2[i0];
        return $r7;

     label0:
        return null;
    }
}
