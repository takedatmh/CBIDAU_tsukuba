public class javax.naming.CompositeName extends java.lang.Object implements javax.naming.Name
{
    private transient javax.naming.NameImpl impl;
    private static final long serialVersionUID;

    protected void <init>(java.util.Enumeration)
    {
        javax.naming.CompositeName r0;
        java.util.Enumeration r1;
        javax.naming.NameImpl $r2;

        r0 := @this: javax.naming.CompositeName;
        r1 := @parameter0: java.util.Enumeration;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = new javax.naming.NameImpl;
        specialinvoke $r2.<javax.naming.NameImpl: void <init>(java.util.Properties,java.util.Enumeration)>(null, r1);
        r0.<javax.naming.CompositeName: javax.naming.NameImpl impl> = $r2;
        return;
    }

    public void <init>(java.lang.String) throws javax.naming.InvalidNameException
    {
        javax.naming.CompositeName r0;
        java.lang.String r1;
        javax.naming.NameImpl $r2;

        r0 := @this: javax.naming.CompositeName;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = new javax.naming.NameImpl;
        specialinvoke $r2.<javax.naming.NameImpl: void <init>(java.util.Properties,java.lang.String)>(null, r1);
        r0.<javax.naming.CompositeName: javax.naming.NameImpl impl> = $r2;
        return;
    }

    public void <init>()
    {
        javax.naming.CompositeName r0;
        javax.naming.NameImpl $r1;

        r0 := @this: javax.naming.CompositeName;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new javax.naming.NameImpl;
        specialinvoke $r1.<javax.naming.NameImpl: void <init>(java.util.Properties)>(null);
        r0.<javax.naming.CompositeName: javax.naming.NameImpl impl> = $r1;
        return;
    }

    public java.lang.String toString()
    {
        javax.naming.CompositeName r0;
        javax.naming.NameImpl $r1;
        java.lang.String $r2;

        r0 := @this: javax.naming.CompositeName;
        $r1 = r0.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        $r2 = virtualinvoke $r1.<javax.naming.NameImpl: java.lang.String toString()>();
        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        javax.naming.CompositeName r0, $r3;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        javax.naming.NameImpl $r2, $r4;

        r0 := @this: javax.naming.CompositeName;
        r1 := @parameter0: java.lang.Object;
        if r1 == null goto label0;

        $z0 = r1 instanceof javax.naming.CompositeName;
        if $z0 == 0 goto label0;

        $r2 = r0.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        $r3 = (javax.naming.CompositeName) r1;
        $r4 = $r3.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        $z1 = virtualinvoke $r2.<javax.naming.NameImpl: boolean equals(java.lang.Object)>($r4);
        if $z1 == 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;
    }

    public int hashCode()
    {
        javax.naming.CompositeName r0;
        javax.naming.NameImpl $r1;
        int $i0;

        r0 := @this: javax.naming.CompositeName;
        $r1 = r0.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        $i0 = virtualinvoke $r1.<javax.naming.NameImpl: int hashCode()>();
        return $i0;
    }

    public int compareTo(java.lang.Object)
    {
        javax.naming.CompositeName r0, $r4;
        java.lang.Object r1;
        boolean $z0;
        java.lang.ClassCastException $r2;
        javax.naming.NameImpl $r3, $r5;
        int $i0;

        r0 := @this: javax.naming.CompositeName;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof javax.naming.CompositeName;
        if $z0 != 0 goto label0;

        $r2 = new java.lang.ClassCastException;
        specialinvoke $r2.<java.lang.ClassCastException: void <init>(java.lang.String)>("Not a CompositeName");
        throw $r2;

     label0:
        $r3 = r0.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        $r4 = (javax.naming.CompositeName) r1;
        $r5 = $r4.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        $i0 = virtualinvoke $r3.<javax.naming.NameImpl: int compareTo(javax.naming.NameImpl)>($r5);
        return $i0;
    }

    public java.lang.Object clone()
    {
        javax.naming.CompositeName r0, $r1;
        java.util.Enumeration $r2;

        r0 := @this: javax.naming.CompositeName;
        $r1 = new javax.naming.CompositeName;
        $r2 = virtualinvoke r0.<javax.naming.CompositeName: java.util.Enumeration getAll()>();
        specialinvoke $r1.<javax.naming.CompositeName: void <init>(java.util.Enumeration)>($r2);
        return $r1;
    }

    public int size()
    {
        javax.naming.CompositeName r0;
        javax.naming.NameImpl $r1;
        int $i0;

        r0 := @this: javax.naming.CompositeName;
        $r1 = r0.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        $i0 = virtualinvoke $r1.<javax.naming.NameImpl: int size()>();
        return $i0;
    }

    public boolean isEmpty()
    {
        javax.naming.CompositeName r0;
        javax.naming.NameImpl $r1;
        boolean $z0;

        r0 := @this: javax.naming.CompositeName;
        $r1 = r0.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        $z0 = virtualinvoke $r1.<javax.naming.NameImpl: boolean isEmpty()>();
        return $z0;
    }

    public java.util.Enumeration getAll()
    {
        javax.naming.CompositeName r0;
        javax.naming.NameImpl $r1;
        java.util.Enumeration $r2;

        r0 := @this: javax.naming.CompositeName;
        $r1 = r0.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        $r2 = virtualinvoke $r1.<javax.naming.NameImpl: java.util.Enumeration getAll()>();
        return $r2;
    }

    public java.lang.String get(int)
    {
        javax.naming.CompositeName r0;
        int i0;
        javax.naming.NameImpl $r1;
        java.lang.String $r2;

        r0 := @this: javax.naming.CompositeName;
        i0 := @parameter0: int;
        $r1 = r0.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        $r2 = virtualinvoke $r1.<javax.naming.NameImpl: java.lang.String get(int)>(i0);
        return $r2;
    }

    public javax.naming.Name getPrefix(int)
    {
        javax.naming.CompositeName r0, $r3;
        int i0;
        java.util.Enumeration r1;
        javax.naming.NameImpl $r2;

        r0 := @this: javax.naming.CompositeName;
        i0 := @parameter0: int;
        $r2 = r0.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        r1 = virtualinvoke $r2.<javax.naming.NameImpl: java.util.Enumeration getPrefix(int)>(i0);
        $r3 = new javax.naming.CompositeName;
        specialinvoke $r3.<javax.naming.CompositeName: void <init>(java.util.Enumeration)>(r1);
        return $r3;
    }

    public javax.naming.Name getSuffix(int)
    {
        javax.naming.CompositeName r0, $r3;
        int i0;
        java.util.Enumeration r1;
        javax.naming.NameImpl $r2;

        r0 := @this: javax.naming.CompositeName;
        i0 := @parameter0: int;
        $r2 = r0.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        r1 = virtualinvoke $r2.<javax.naming.NameImpl: java.util.Enumeration getSuffix(int)>(i0);
        $r3 = new javax.naming.CompositeName;
        specialinvoke $r3.<javax.naming.CompositeName: void <init>(java.util.Enumeration)>(r1);
        return $r3;
    }

    public boolean startsWith(javax.naming.Name)
    {
        javax.naming.CompositeName r0;
        javax.naming.Name r1;
        boolean $z0, $z1;
        javax.naming.NameImpl $r2;
        int $i0;
        java.util.Enumeration $r3;

        r0 := @this: javax.naming.CompositeName;
        r1 := @parameter0: javax.naming.Name;
        $z0 = r1 instanceof javax.naming.CompositeName;
        if $z0 == 0 goto label0;

        $r2 = r0.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        $i0 = interfaceinvoke r1.<javax.naming.Name: int size()>();
        $r3 = interfaceinvoke r1.<javax.naming.Name: java.util.Enumeration getAll()>();
        $z1 = virtualinvoke $r2.<javax.naming.NameImpl: boolean startsWith(int,java.util.Enumeration)>($i0, $r3);
        return $z1;

     label0:
        return 0;
    }

    public boolean endsWith(javax.naming.Name)
    {
        javax.naming.CompositeName r0;
        javax.naming.Name r1;
        boolean $z0, $z1;
        javax.naming.NameImpl $r2;
        int $i0;
        java.util.Enumeration $r3;

        r0 := @this: javax.naming.CompositeName;
        r1 := @parameter0: javax.naming.Name;
        $z0 = r1 instanceof javax.naming.CompositeName;
        if $z0 == 0 goto label0;

        $r2 = r0.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        $i0 = interfaceinvoke r1.<javax.naming.Name: int size()>();
        $r3 = interfaceinvoke r1.<javax.naming.Name: java.util.Enumeration getAll()>();
        $z1 = virtualinvoke $r2.<javax.naming.NameImpl: boolean endsWith(int,java.util.Enumeration)>($i0, $r3);
        return $z1;

     label0:
        return 0;
    }

    public javax.naming.Name addAll(javax.naming.Name) throws javax.naming.InvalidNameException
    {
        javax.naming.CompositeName r0;
        javax.naming.Name r1;
        java.lang.StringBuilder $r2, $r6, $r8;
        boolean $z0;
        javax.naming.NameImpl $r3;
        java.util.Enumeration $r4;
        javax.naming.InvalidNameException $r5;
        java.lang.String $r7, $r9;

        r0 := @this: javax.naming.CompositeName;
        r1 := @parameter0: javax.naming.Name;
        $z0 = r1 instanceof javax.naming.CompositeName;
        if $z0 == 0 goto label0;

        $r3 = r0.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        $r4 = interfaceinvoke r1.<javax.naming.Name: java.util.Enumeration getAll()>();
        virtualinvoke $r3.<javax.naming.NameImpl: boolean addAll(java.util.Enumeration)>($r4);
        return r0;

     label0:
        $r5 = new javax.naming.InvalidNameException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a composite name: ");
        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<javax.naming.InvalidNameException: void <init>(java.lang.String)>($r9);
        throw $r5;
    }

    public javax.naming.Name addAll(int, javax.naming.Name) throws javax.naming.InvalidNameException
    {
        javax.naming.CompositeName r0;
        int i0;
        javax.naming.Name r1;
        boolean $z0;
        javax.naming.NameImpl $r2;
        java.util.Enumeration $r3;
        javax.naming.InvalidNameException $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;

        r0 := @this: javax.naming.CompositeName;
        i0 := @parameter0: int;
        r1 := @parameter1: javax.naming.Name;
        $z0 = r1 instanceof javax.naming.CompositeName;
        if $z0 == 0 goto label0;

        $r2 = r0.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        $r3 = interfaceinvoke r1.<javax.naming.Name: java.util.Enumeration getAll()>();
        virtualinvoke $r2.<javax.naming.NameImpl: boolean addAll(int,java.util.Enumeration)>(i0, $r3);
        return r0;

     label0:
        $r4 = new javax.naming.InvalidNameException;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a composite name: ");
        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<javax.naming.InvalidNameException: void <init>(java.lang.String)>($r9);
        throw $r4;
    }

    public javax.naming.Name add(java.lang.String) throws javax.naming.InvalidNameException
    {
        javax.naming.CompositeName r0;
        java.lang.String r1;
        javax.naming.NameImpl $r2;

        r0 := @this: javax.naming.CompositeName;
        r1 := @parameter0: java.lang.String;
        $r2 = r0.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        virtualinvoke $r2.<javax.naming.NameImpl: void add(java.lang.String)>(r1);
        return r0;
    }

    public javax.naming.Name add(int, java.lang.String) throws javax.naming.InvalidNameException
    {
        javax.naming.CompositeName r0;
        int i0;
        java.lang.String r1;
        javax.naming.NameImpl $r2;

        r0 := @this: javax.naming.CompositeName;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        $r2 = r0.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        virtualinvoke $r2.<javax.naming.NameImpl: void add(int,java.lang.String)>(i0, r1);
        return r0;
    }

    public java.lang.Object remove(int) throws javax.naming.InvalidNameException
    {
        javax.naming.CompositeName r0;
        int i0;
        javax.naming.NameImpl $r1;
        java.lang.Object $r2;

        r0 := @this: javax.naming.CompositeName;
        i0 := @parameter0: int;
        $r1 = r0.<javax.naming.CompositeName: javax.naming.NameImpl impl>;
        $r2 = virtualinvoke $r1.<javax.naming.NameImpl: java.lang.Object remove(int)>(i0);
        return $r2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        javax.naming.CompositeName r0;
        java.io.ObjectOutputStream r1;
        java.util.Enumeration r2;
        int $i0;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: javax.naming.CompositeName;
        r1 := @parameter0: java.io.ObjectOutputStream;
        $i0 = virtualinvoke r0.<javax.naming.CompositeName: int size()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);
        r2 = virtualinvoke r0.<javax.naming.CompositeName: java.util.Enumeration getAll()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);
        goto label0;

     label1:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        javax.naming.CompositeName r0;
        java.io.ObjectInputStream r1;
        javax.naming.NameImpl $r2;
        int i0;
        javax.naming.InvalidNameException r3, $r7;
        java.lang.Object $r4;
        java.lang.String $r5;
        java.io.StreamCorruptedException $r8;

        r0 := @this: javax.naming.CompositeName;
        r1 := @parameter0: java.io.ObjectInputStream;
        $r2 = new javax.naming.NameImpl;
        specialinvoke $r2.<javax.naming.NameImpl: void <init>(java.util.Properties)>(null);
        r0.<javax.naming.CompositeName: javax.naming.NameImpl impl> = $r2;
        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

     label0:
        i0 = i0 + -1;
        if i0 < 0 goto label1;

        $r4 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        $r5 = (java.lang.String) $r4;
        virtualinvoke r0.<javax.naming.CompositeName: javax.naming.Name add(java.lang.String)>($r5);
        goto label0;

     label1:
        goto label3;

     label2:
        $r7 := @caughtexception;
        r3 = $r7;
        $r8 = new java.io.StreamCorruptedException;
        specialinvoke $r8.<java.io.StreamCorruptedException: void <init>(java.lang.String)>("Invalid name");
        throw $r8;

     label3:
        return;

        catch javax.naming.InvalidNameException from label0 to label1 with label2;
    }
}
