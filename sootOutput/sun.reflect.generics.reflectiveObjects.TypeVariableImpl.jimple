public class sun.reflect.generics.reflectiveObjects.TypeVariableImpl extends sun.reflect.generics.reflectiveObjects.LazyReflectiveObjectGenerator implements java.lang.reflect.TypeVariable
{
    java.lang.reflect.GenericDeclaration genericDeclaration;
    private java.lang.String name;
    private java.lang.reflect.Type[] bounds;
    private sun.reflect.generics.tree.FieldTypeSignature[] boundASTs;
    static final boolean $assertionsDisabled;

    private void <init>(java.lang.reflect.GenericDeclaration, java.lang.String, sun.reflect.generics.tree.FieldTypeSignature[], sun.reflect.generics.factory.GenericsFactory)
    {
        sun.reflect.generics.reflectiveObjects.TypeVariableImpl r0;
        java.lang.reflect.GenericDeclaration r1;
        java.lang.String r2;
        sun.reflect.generics.tree.FieldTypeSignature[] r3;
        sun.reflect.generics.factory.GenericsFactory r4;

        r0 := @this: sun.reflect.generics.reflectiveObjects.TypeVariableImpl;
        r1 := @parameter0: java.lang.reflect.GenericDeclaration;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: sun.reflect.generics.tree.FieldTypeSignature[];
        r4 := @parameter3: sun.reflect.generics.factory.GenericsFactory;
        specialinvoke r0.<sun.reflect.generics.reflectiveObjects.LazyReflectiveObjectGenerator: void <init>(sun.reflect.generics.factory.GenericsFactory)>(r4);
        r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration> = r1;
        r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String name> = r2;
        r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: sun.reflect.generics.tree.FieldTypeSignature[] boundASTs> = r3;
        return;
    }

    private sun.reflect.generics.tree.FieldTypeSignature[] getBoundASTs()
    {
        sun.reflect.generics.reflectiveObjects.TypeVariableImpl r0;
        boolean $z0;
        java.lang.reflect.Type[] $r1;
        java.lang.AssertionError $r2;
        sun.reflect.generics.tree.FieldTypeSignature[] $r3;

        r0 := @this: sun.reflect.generics.reflectiveObjects.TypeVariableImpl;
        $z0 = <sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r1 = r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.Type[] bounds>;
        if $r1 == null goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: sun.reflect.generics.tree.FieldTypeSignature[] boundASTs>;
        return $r3;
    }

    public static sun.reflect.generics.reflectiveObjects.TypeVariableImpl make(java.lang.reflect.GenericDeclaration, java.lang.String, sun.reflect.generics.tree.FieldTypeSignature[], sun.reflect.generics.factory.GenericsFactory)
    {
        java.lang.reflect.GenericDeclaration r0;
        java.lang.String r1, $r8, $r10;
        sun.reflect.generics.tree.FieldTypeSignature[] r2;
        sun.reflect.generics.factory.GenericsFactory r3;
        java.lang.StringBuilder $r4, $r6, $r9;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r5;
        java.lang.Class $r7;
        sun.reflect.generics.reflectiveObjects.TypeVariableImpl $r11;

        r0 := @parameter0: java.lang.reflect.GenericDeclaration;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: sun.reflect.generics.tree.FieldTypeSignature[];
        r3 := @parameter3: sun.reflect.generics.factory.GenericsFactory;
        $z0 = r0 instanceof java.lang.Class;
        if $z0 != 0 goto label0;

        $z1 = r0 instanceof java.lang.reflect.Method;
        if $z1 != 0 goto label0;

        $z2 = r0 instanceof java.lang.reflect.Constructor;
        if $z2 != 0 goto label0;

        $r5 = new java.lang.AssertionError;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected kind of GenericDeclaration");
        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String toString()>();
        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);
        throw $r5;

     label0:
        $r11 = new sun.reflect.generics.reflectiveObjects.TypeVariableImpl;
        specialinvoke $r11.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: void <init>(java.lang.reflect.GenericDeclaration,java.lang.String,sun.reflect.generics.tree.FieldTypeSignature[],sun.reflect.generics.factory.GenericsFactory)>(r0, r1, r2, r3);
        return $r11;
    }

    public java.lang.reflect.Type[] getBounds()
    {
        sun.reflect.generics.reflectiveObjects.TypeVariableImpl r0;
        sun.reflect.generics.tree.FieldTypeSignature[] r1;
        java.lang.reflect.Type[] r2, $r4, $r7, $r9;
        int i0, $i1, $i2;
        sun.reflect.generics.visitor.Reifier r3;
        sun.reflect.generics.tree.FieldTypeSignature $r5;
        java.lang.reflect.Type $r6;
        java.lang.Object $r8;

        r0 := @this: sun.reflect.generics.reflectiveObjects.TypeVariableImpl;
        $r4 = r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.Type[] bounds>;
        if $r4 != null goto label2;

        r1 = specialinvoke r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: sun.reflect.generics.tree.FieldTypeSignature[] getBoundASTs()>();
        $i1 = lengthof r1;
        r2 = newarray (java.lang.reflect.Type)[$i1];
        i0 = 0;

     label0:
        $i2 = lengthof r1;
        if i0 >= $i2 goto label1;

        r3 = virtualinvoke r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: sun.reflect.generics.visitor.Reifier getReifier()>();
        $r5 = r1[i0];
        interfaceinvoke $r5.<sun.reflect.generics.tree.FieldTypeSignature: void accept(sun.reflect.generics.visitor.TypeTreeVisitor)>(r3);
        $r6 = virtualinvoke r3.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type getResult()>();
        r2[i0] = $r6;
        i0 = i0 + 1;
        goto label0;

     label1:
        r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.Type[] bounds> = r2;

     label2:
        $r7 = r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.Type[] bounds>;
        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>();
        $r9 = (java.lang.reflect.Type[]) $r8;
        return $r9;
    }

    public java.lang.reflect.GenericDeclaration getGenericDeclaration()
    {
        sun.reflect.generics.reflectiveObjects.TypeVariableImpl r0;
        java.lang.reflect.GenericDeclaration $r1, $r2, $r4, $r5, $r6, $r9;
        boolean $z0, $z1, $z2;
        java.lang.Class $r3;
        java.lang.reflect.Member $r7;
        java.lang.AssertionError $r8;

        r0 := @this: sun.reflect.generics.reflectiveObjects.TypeVariableImpl;
        $r1 = r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration>;
        $z0 = $r1 instanceof java.lang.Class;
        if $z0 == 0 goto label0;

        $r2 = r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration>;
        $r3 = (java.lang.Class) $r2;
        staticinvoke <sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.Class)>($r3);
        goto label3;

     label0:
        $r4 = r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration>;
        $z1 = $r4 instanceof java.lang.reflect.Method;
        if $z1 != 0 goto label1;

        $r5 = r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration>;
        $z2 = $r5 instanceof java.lang.reflect.Constructor;
        if $z2 == 0 goto label2;

     label1:
        $r6 = r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration>;
        $r7 = (java.lang.reflect.Member) $r6;
        staticinvoke <sun.reflect.misc.ReflectUtil: void conservativeCheckMemberAccess(java.lang.reflect.Member)>($r7);
        goto label3;

     label2:
        $r8 = new java.lang.AssertionError;
        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>("Unexpected kind of GenericDeclaration");
        throw $r8;

     label3:
        $r9 = r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration>;
        return $r9;
    }

    public java.lang.String getName()
    {
        sun.reflect.generics.reflectiveObjects.TypeVariableImpl r0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.generics.reflectiveObjects.TypeVariableImpl;
        $r1 = r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String name>;
        return $r1;
    }

    public java.lang.String toString()
    {
        sun.reflect.generics.reflectiveObjects.TypeVariableImpl r0;
        java.lang.String $r1;

        r0 := @this: sun.reflect.generics.reflectiveObjects.TypeVariableImpl;
        $r1 = virtualinvoke r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String getName()>();
        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        sun.reflect.generics.reflectiveObjects.TypeVariableImpl r0;
        java.lang.Object r1;
        java.lang.reflect.TypeVariable r2;
        java.lang.reflect.GenericDeclaration r3, $r6, $r7;
        java.lang.String r4, $r8, $r9;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class $r5;

        r0 := @this: sun.reflect.generics.reflectiveObjects.TypeVariableImpl;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.lang.reflect.TypeVariable;
        if $z0 == 0 goto label6;

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        if $r5 != class "sun/reflect/generics/reflectiveObjects/TypeVariableImpl" goto label6;

        r2 = (java.lang.reflect.TypeVariable) r1;
        r3 = interfaceinvoke r2.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();
        r4 = interfaceinvoke r2.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
        $r6 = r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration>;
        if $r6 != null goto label0;

        if r3 != null goto label4;

        goto label1;

     label0:
        $r7 = r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration>;
        $z1 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(r3);
        if $z1 == 0 goto label4;

     label1:
        $r8 = r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String name>;
        if $r8 != null goto label2;

        if r4 != null goto label4;

        goto label3;

     label2:
        $r9 = r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String name>;
        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r4);
        if $z2 == 0 goto label4;

     label3:
        $z3 = 1;
        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;

     label6:
        return 0;
    }

    public int hashCode()
    {
        sun.reflect.generics.reflectiveObjects.TypeVariableImpl r0;
        java.lang.reflect.GenericDeclaration $r1;
        int $i0, $i1, $i2;
        java.lang.String $r2;

        r0 := @this: sun.reflect.generics.reflectiveObjects.TypeVariableImpl;
        $r1 = r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration>;
        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();
        $r2 = r0.<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: java.lang.String name>;
        $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>();
        $i2 = $i0 ^ $i1;
        return $i2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/reflect/generics/reflectiveObjects/TypeVariableImpl";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean $assertionsDisabled> = $z1;
        return;
    }
}
