public class java.text.SimpleDateFormat extends java.text.DateFormat
{
    static final long serialVersionUID;
    static final int currentSerialVersion;
    private int serialVersionOnStream;
    private java.lang.String pattern;
    private transient java.text.NumberFormat originalNumberFormat;
    private transient java.lang.String originalNumberPattern;
    private transient char minusSign;
    private transient boolean hasFollowingMinusSign;
    private transient char[] compiledPattern;
    private static final int TAG_QUOTE_ASCII_CHAR;
    private static final int TAG_QUOTE_CHARS;
    private transient char zeroDigit;
    private java.text.DateFormatSymbols formatData;
    private java.util.Date defaultCenturyStart;
    private transient int defaultCenturyStartYear;
    private static final int MILLIS_PER_MINUTE;
    private static final java.lang.String GMT;
    private static final java.util.concurrent.ConcurrentMap cachedLocaleData;
    private static final java.util.concurrent.ConcurrentMap cachedNumberFormatData;
    private java.util.Locale locale;
    transient boolean useDateFormatSymbols;
    private static final int[] PATTERN_INDEX_TO_CALENDAR_FIELD;
    private static final int[] PATTERN_INDEX_TO_DATE_FORMAT_FIELD;
    private static final java.text.DateFormat$Field[] PATTERN_INDEX_TO_DATE_FORMAT_FIELD_ID;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        java.text.SimpleDateFormat r0;
        java.util.Locale$Category $r1;
        java.util.Locale $r2;

        r0 := @this: java.text.SimpleDateFormat;
        $r1 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r1);
        specialinvoke r0.<java.text.SimpleDateFormat: void <init>(int,int,java.util.Locale)>(3, 3, $r2);
        return;
    }

    public void <init>(java.lang.String)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1;
        java.util.Locale$Category $r2;
        java.util.Locale $r3;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.lang.String;
        $r2 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r2);
        specialinvoke r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>(r1, $r3);
        return;
    }

    public void <init>(java.lang.String, java.util.Locale)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1;
        java.util.Locale r2;
        java.lang.NullPointerException $r3;
        java.text.DateFormatSymbols $r4;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.util.Locale;
        specialinvoke r0.<java.text.DateFormat: void <init>()>();
        r0.<java.text.SimpleDateFormat: int serialVersionOnStream> = 1;
        r0.<java.text.SimpleDateFormat: char minusSign> = 45;
        r0.<java.text.SimpleDateFormat: boolean hasFollowingMinusSign> = 0;
        if r1 == null goto label0;

        if r2 != null goto label1;

     label0:
        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label1:
        specialinvoke r0.<java.text.SimpleDateFormat: void initializeCalendar(java.util.Locale)>(r2);
        r0.<java.text.SimpleDateFormat: java.lang.String pattern> = r1;
        $r4 = staticinvoke <java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstanceRef(java.util.Locale)>(r2);
        r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData> = $r4;
        r0.<java.text.SimpleDateFormat: java.util.Locale locale> = r2;
        specialinvoke r0.<java.text.SimpleDateFormat: void initialize(java.util.Locale)>(r2);
        return;
    }

    public void <init>(java.lang.String, java.text.DateFormatSymbols)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1;
        java.text.DateFormatSymbols r2, $r5;
        java.lang.NullPointerException $r3;
        java.lang.Object $r4;
        java.util.Locale$Category $r6;
        java.util.Locale $r7, $r8, $r9;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.text.DateFormatSymbols;
        specialinvoke r0.<java.text.DateFormat: void <init>()>();
        r0.<java.text.SimpleDateFormat: int serialVersionOnStream> = 1;
        r0.<java.text.SimpleDateFormat: char minusSign> = 45;
        r0.<java.text.SimpleDateFormat: boolean hasFollowingMinusSign> = 0;
        if r1 == null goto label0;

        if r2 != null goto label1;

     label0:
        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label1:
        r0.<java.text.SimpleDateFormat: java.lang.String pattern> = r1;
        $r4 = virtualinvoke r2.<java.text.DateFormatSymbols: java.lang.Object clone()>();
        $r5 = (java.text.DateFormatSymbols) $r4;
        r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData> = $r5;
        $r6 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r7 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r6);
        r0.<java.text.SimpleDateFormat: java.util.Locale locale> = $r7;
        $r8 = r0.<java.text.SimpleDateFormat: java.util.Locale locale>;
        specialinvoke r0.<java.text.SimpleDateFormat: void initializeCalendar(java.util.Locale)>($r8);
        $r9 = r0.<java.text.SimpleDateFormat: java.util.Locale locale>;
        specialinvoke r0.<java.text.SimpleDateFormat: void initialize(java.util.Locale)>($r9);
        r0.<java.text.SimpleDateFormat: boolean useDateFormatSymbols> = 1;
        return;
    }

    void <init>(int, int, java.util.Locale)
    {
        java.text.SimpleDateFormat r0;
        int i0, i1, $i2, $i3;
        java.util.Locale r1;
        java.lang.String[] r2;
        java.util.ResourceBundle r3;
        java.util.MissingResourceException r4, $r13;
        java.lang.NullPointerException $r5;
        java.util.concurrent.ConcurrentMap $r6, $r14;
        java.lang.Object $r7;
        boolean $z0;
        java.lang.StringBuilder $r8, $r10, $r11;
        java.lang.String $r9, $r12, $r18, $r19, $r21, $r22, $r23, $r24;
        java.text.DateFormatSymbols $r16;
        java.lang.Object[] $r17, r20;
        java.lang.IllegalArgumentException $r25;

        r0 := @this: java.text.SimpleDateFormat;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.util.Locale;
        specialinvoke r0.<java.text.DateFormat: void <init>()>();
        r0.<java.text.SimpleDateFormat: int serialVersionOnStream> = 1;
        r0.<java.text.SimpleDateFormat: char minusSign> = 45;
        r0.<java.text.SimpleDateFormat: boolean hasFollowingMinusSign> = 0;
        if r1 != null goto label0;

        $r5 = new java.lang.NullPointerException;
        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();
        throw $r5;

     label0:
        r0.<java.text.SimpleDateFormat: java.util.Locale locale> = r1;
        specialinvoke r0.<java.text.SimpleDateFormat: void initializeCalendar(java.util.Locale)>(r1);
        $r6 = <java.text.SimpleDateFormat: java.util.concurrent.ConcurrentMap cachedLocaleData>;
        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);
        r2 = (java.lang.String[]) $r7;
        if r2 != null goto label6;

        r3 = staticinvoke <sun.util.resources.LocaleData: java.util.ResourceBundle getDateFormatData(java.util.Locale)>(r1);
        $z0 = specialinvoke r0.<java.text.SimpleDateFormat: boolean isGregorianCalendar()>();
        if $z0 != 0 goto label4;

     label1:
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = specialinvoke r0.<java.text.SimpleDateFormat: java.lang.String getCalendarName()>();
        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".DateTimePatterns");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        r2 = virtualinvoke r3.<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>($r12);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;
        r4 = $r13;

     label4:
        if r2 != null goto label5;

        r2 = virtualinvoke r3.<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>("DateTimePatterns");

     label5:
        $r14 = <java.text.SimpleDateFormat: java.util.concurrent.ConcurrentMap cachedLocaleData>;
        interfaceinvoke $r14.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, r2);

     label6:
        $r16 = staticinvoke <java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstanceRef(java.util.Locale)>(r1);
        r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData> = $r16;
        if i0 < 0 goto label7;

        if i1 < 0 goto label7;

        $r17 = newarray (java.lang.Object)[2];
        $r18 = r2[i0];
        $r17[0] = $r18;
        $i2 = i1 + 4;
        $r19 = r2[$i2];
        $r17[1] = $r19;
        r20 = $r17;
        $r21 = r2[8];
        $r22 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r21, r20);
        r0.<java.text.SimpleDateFormat: java.lang.String pattern> = $r22;
        goto label10;

     label7:
        if i0 < 0 goto label8;

        $r23 = r2[i0];
        r0.<java.text.SimpleDateFormat: java.lang.String pattern> = $r23;
        goto label10;

     label8:
        if i1 < 0 goto label9;

        $i3 = i1 + 4;
        $r24 = r2[$i3];
        r0.<java.text.SimpleDateFormat: java.lang.String pattern> = $r24;
        goto label10;

     label9:
        $r25 = new java.lang.IllegalArgumentException;
        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No date or time style specified");
        throw $r25;

     label10:
        specialinvoke r0.<java.text.SimpleDateFormat: void initialize(java.util.Locale)>(r1);
        return;

        catch java.util.MissingResourceException from label1 to label2 with label3;
    }

    private void initialize(java.util.Locale)
    {
        java.text.SimpleDateFormat r0;
        java.util.Locale r1;
        java.lang.String $r2;
        char[] $r3;
        java.util.concurrent.ConcurrentMap $r4, $r10;
        java.lang.Object $r5, $r14;
        java.text.NumberFormat $r6, $r7, $r8, $r9, $r11, $r13, $r15;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.util.Locale;
        $r2 = r0.<java.text.SimpleDateFormat: java.lang.String pattern>;
        $r3 = specialinvoke r0.<java.text.SimpleDateFormat: char[] compile(java.lang.String)>($r2);
        r0.<java.text.SimpleDateFormat: char[] compiledPattern> = $r3;
        $r4 = <java.text.SimpleDateFormat: java.util.concurrent.ConcurrentMap cachedNumberFormatData>;
        $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);
        $r6 = (java.text.NumberFormat) $r5;
        r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat> = $r6;
        $r7 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;
        if $r7 != null goto label0;

        $r8 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getIntegerInstance(java.util.Locale)>(r1);
        r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat> = $r8;
        $r9 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;
        virtualinvoke $r9.<java.text.NumberFormat: void setGroupingUsed(boolean)>(0);
        $r10 = <java.text.SimpleDateFormat: java.util.concurrent.ConcurrentMap cachedNumberFormatData>;
        $r11 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;
        interfaceinvoke $r10.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r11);

     label0:
        $r13 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;
        $r14 = virtualinvoke $r13.<java.text.NumberFormat: java.lang.Object clone()>();
        $r15 = (java.text.NumberFormat) $r14;
        r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat> = $r15;
        specialinvoke r0.<java.text.SimpleDateFormat: void initializeDefaultCentury()>();
        return;
    }

    private void initializeCalendar(java.util.Locale)
    {
        java.text.SimpleDateFormat r0;
        java.util.Locale r1;
        java.util.Calendar $r2, $r5;
        boolean $z0;
        java.lang.AssertionError $r3;
        java.util.TimeZone $r4;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.util.Locale;
        $r2 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        if $r2 != null goto label1;

        $z0 = <java.text.SimpleDateFormat: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if r1 != null goto label0;

        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label0:
        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();
        $r5 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>($r4, r1);
        r0.<java.text.SimpleDateFormat: java.util.Calendar calendar> = $r5;

     label1:
        return;
    }

    private char[] compile(java.lang.String)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1, $r16, $r22;
        int i0, i1, i2, i3, i5, $i7, $i8, $i9, i17, $i19, $i20, $i23, i24, i25;
        boolean z0;
        java.lang.StringBuilder r2, r3, $r4, $r7, $r18, $r19, $r20, $r21;
        char c4, c6, c10, $c11, $c12, $c13, $c14, $c15, $c16, c18, $c21, $c22;
        java.lang.IllegalArgumentException $r17, $r23;
        char[] r24;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.lang.String;
        i0 = virtualinvoke r1.<java.lang.String: int length()>();
        z0 = 0;
        $r4 = new java.lang.StringBuilder;
        $i7 = i0 * 2;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i7);
        r2 = $r4;
        r3 = null;
        i1 = 0;
        i2 = -1;
        i3 = 0;

     label0:
        if i3 >= i0 goto label29;

        c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);
        if c4 != 39 goto label12;

        $i8 = i3 + 1;
        if $i8 >= i0 goto label3;

        $i9 = i3 + 1;
        c10 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i9);
        if c10 != 39 goto label3;

        i3 = i3 + 1;
        if i1 == 0 goto label1;

        staticinvoke <java.text.SimpleDateFormat: void encode(int,int,java.lang.StringBuilder)>(i2, i1, r2);
        i2 = -1;
        i1 = 0;

     label1:
        if z0 == 0 goto label2;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c10);
        goto label28;

     label2:
        $c11 = 25600 | c10;
        $c12 = (char) $c11;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c12);
        goto label28;

     label3:
        if z0 != 0 goto label7;

        if i1 == 0 goto label4;

        staticinvoke <java.text.SimpleDateFormat: void encode(int,int,java.lang.StringBuilder)>(i2, i1, r2);
        i2 = -1;
        i1 = 0;

     label4:
        if r3 != null goto label5;

        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>(i0);
        r3 = $r7;
        goto label6;

     label5:
        virtualinvoke r3.<java.lang.StringBuilder: void setLength(int)>(0);

     label6:
        z0 = 1;
        goto label28;

     label7:
        i5 = virtualinvoke r3.<java.lang.StringBuilder: int length()>();
        if i5 != 1 goto label10;

        c6 = virtualinvoke r3.<java.lang.StringBuilder: char charAt(int)>(0);
        if c6 >= 128 goto label8;

        $c13 = 25600 | c6;
        $c14 = (char) $c13;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c14);
        goto label9;

     label8:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(25857);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c6);

     label9:
        goto label11;

     label10:
        staticinvoke <java.text.SimpleDateFormat: void encode(int,int,java.lang.StringBuilder)>(101, i5, r2);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r3);

     label11:
        z0 = 0;
        goto label28;

     label12:
        if z0 == 0 goto label13;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c4);
        goto label28;

     label13:
        if c4 < 97 goto label14;

        if c4 <= 122 goto label24;

     label14:
        if c4 < 65 goto label15;

        if c4 <= 90 goto label24;

     label15:
        if i1 == 0 goto label16;

        staticinvoke <java.text.SimpleDateFormat: void encode(int,int,java.lang.StringBuilder)>(i2, i1, r2);
        i2 = -1;
        i1 = 0;

     label16:
        if c4 >= 128 goto label17;

        $c15 = 25600 | c4;
        $c16 = (char) $c15;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c16);
        goto label28;

     label17:
        i17 = i3 + 1;

     label18:
        if i17 >= i0 goto label21;

        c18 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i17);
        if c18 == 39 goto label21;

        if c18 < 97 goto label19;

        if c18 <= 122 goto label21;

     label19:
        if c18 < 65 goto label20;

        if c18 > 90 goto label20;

        goto label21;

     label20:
        i17 = i17 + 1;
        goto label18;

     label21:
        $i19 = i17 - i3;
        $i20 = 25856 | $i19;
        $c21 = (char) $i20;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c21);

     label22:
        if i3 >= i17 goto label23;

        $c22 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c22);
        i3 = i3 + 1;
        goto label22;

     label23:
        i3 = i3 + -1;
        goto label28;

     label24:
        $r16 = "GyMdkHmsSEDFwWahKzZYuX";
        $i23 = virtualinvoke $r16.<java.lang.String: int indexOf(int)>(c4);
        i24 = $i23;
        if $i23 != -1 goto label25;

        $r17 = new java.lang.IllegalArgumentException;
        $r18 = new java.lang.StringBuilder;
        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal pattern character \'");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c4);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);
        throw $r17;

     label25:
        if i2 == -1 goto label26;

        if i2 != i24 goto label27;

     label26:
        i2 = i24;
        i1 = i1 + 1;
        goto label28;

     label27:
        staticinvoke <java.text.SimpleDateFormat: void encode(int,int,java.lang.StringBuilder)>(i2, i1, r2);
        i2 = i24;
        i1 = 1;

     label28:
        i3 = i3 + 1;
        goto label0;

     label29:
        if z0 == 0 goto label30;

        $r23 = new java.lang.IllegalArgumentException;
        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unterminated quote");
        throw $r23;

     label30:
        if i1 == 0 goto label31;

        staticinvoke <java.text.SimpleDateFormat: void encode(int,int,java.lang.StringBuilder)>(i2, i1, r2);

     label31:
        i25 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();
        r24 = newarray (char)[i25];
        virtualinvoke r2.<java.lang.StringBuilder: void getChars(int,int,char[],int)>(0, i25, r24, 0);
        return r24;
    }

    private static final void encode(int, int, java.lang.StringBuilder)
    {
        int i0, i1, $i2, $i3, $i5, $i6, $i8, $i10;
        java.lang.StringBuilder r0, $r1, $r3, $r4;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r5;
        char $c4, $c7, $c9, $c11;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r0 := @parameter2: java.lang.StringBuilder;
        if i0 != 21 goto label0;

        if i1 < 4 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid ISO 8601 format: length=");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r2;

     label0:
        if i1 >= 255 goto label1;

        $i2 = i0 << 8;
        $i3 = $i2 | i1;
        $c4 = (char) $i3;
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);
        goto label2;

     label1:
        $i5 = i0 << 8;
        $i6 = $i5 | 255;
        $c7 = (char) $i6;
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);
        $i8 = i1 >>> 16;
        $c9 = (char) $i8;
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c9);
        $i10 = i1 & 65535;
        $c11 = (char) $i10;
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c11);

     label2:
        return;
    }

    private void initializeDefaultCentury()
    {
        java.text.SimpleDateFormat r0;
        long $l0;
        java.util.Calendar $r1, $r2, $r3;
        java.util.Date $r4;

        r0 := @this: java.text.SimpleDateFormat;
        $r1 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        virtualinvoke $r1.<java.util.Calendar: void setTimeInMillis(long)>($l0);
        $r2 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        virtualinvoke $r2.<java.util.Calendar: void add(int,int)>(1, -80);
        $r3 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $r4 = virtualinvoke $r3.<java.util.Calendar: java.util.Date getTime()>();
        specialinvoke r0.<java.text.SimpleDateFormat: void parseAmbiguousDatesAsAfter(java.util.Date)>($r4);
        return;
    }

    private void parseAmbiguousDatesAsAfter(java.util.Date)
    {
        java.text.SimpleDateFormat r0;
        java.util.Date r1;
        java.util.Calendar $r2, $r3;
        int $i0;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.util.Date;
        r0.<java.text.SimpleDateFormat: java.util.Date defaultCenturyStart> = r1;
        $r2 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        virtualinvoke $r2.<java.util.Calendar: void setTime(java.util.Date)>(r1);
        $r3 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $i0 = virtualinvoke $r3.<java.util.Calendar: int get(int)>(1);
        r0.<java.text.SimpleDateFormat: int defaultCenturyStartYear> = $i0;
        return;
    }

    public void set2DigitYearStart(java.util.Date)
    {
        java.text.SimpleDateFormat r0;
        java.util.Date r1, $r2;
        long $l0;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.util.Date;
        $r2 = new java.util.Date;
        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();
        specialinvoke $r2.<java.util.Date: void <init>(long)>($l0);
        specialinvoke r0.<java.text.SimpleDateFormat: void parseAmbiguousDatesAsAfter(java.util.Date)>($r2);
        return;
    }

    public java.util.Date get2DigitYearStart()
    {
        java.text.SimpleDateFormat r0;
        java.util.Date $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.text.SimpleDateFormat;
        $r1 = r0.<java.text.SimpleDateFormat: java.util.Date defaultCenturyStart>;
        $r2 = virtualinvoke $r1.<java.util.Date: java.lang.Object clone()>();
        $r3 = (java.util.Date) $r2;
        return $r3;
    }

    public java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition)
    {
        java.text.SimpleDateFormat r0;
        java.util.Date r1;
        java.lang.StringBuffer r2, $r5;
        java.text.FieldPosition r3;
        byte $b0;
        java.text.Format$FieldDelegate $r4;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.util.Date;
        r2 := @parameter1: java.lang.StringBuffer;
        r3 := @parameter2: java.text.FieldPosition;
        $b0 = 0;
        r3.<java.text.FieldPosition: int endIndex> = $b0;
        r3.<java.text.FieldPosition: int beginIndex> = $b0;
        $r4 = virtualinvoke r3.<java.text.FieldPosition: java.text.Format$FieldDelegate getFieldDelegate()>();
        $r5 = specialinvoke r0.<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.Format$FieldDelegate)>(r1, r2, $r4);
        return $r5;
    }

    private java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer, java.text.Format$FieldDelegate)
    {
        java.text.SimpleDateFormat r0;
        java.util.Date r1;
        java.lang.StringBuffer r2;
        java.text.Format$FieldDelegate r3;
        boolean z0;
        int i0, i2, $i3, $i5, i7, i9;
        char c1, $c4, $c6, $c8, $c10, $c11;
        java.util.Calendar $r4;
        char[] $r5, $r6, $r7, $r8, $r9, $r11;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.util.Date;
        r2 := @parameter1: java.lang.StringBuffer;
        r3 := @parameter2: java.text.Format$FieldDelegate;
        $r4 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        virtualinvoke $r4.<java.util.Calendar: void setTime(java.util.Date)>(r1);
        z0 = specialinvoke r0.<java.text.SimpleDateFormat: boolean useDateFormatSymbols()>();
        i0 = 0;

     label0:
        $r5 = r0.<java.text.SimpleDateFormat: char[] compiledPattern>;
        $i3 = lengthof $r5;
        if i0 >= $i3 goto label6;

        $r6 = r0.<java.text.SimpleDateFormat: char[] compiledPattern>;
        $c4 = $r6[i0];
        c1 = $c4 >>> 8;
        $r7 = r0.<java.text.SimpleDateFormat: char[] compiledPattern>;
        $i5 = i0;
        i0 = i0 + 1;
        $c6 = $r7[$i5];
        i2 = $c6 & 255;
        if i2 != 255 goto label1;

        $r8 = r0.<java.text.SimpleDateFormat: char[] compiledPattern>;
        i7 = i0 + 1;
        $c8 = $r8[i0];
        i9 = $c8 << 16;
        $r9 = r0.<java.text.SimpleDateFormat: char[] compiledPattern>;
        i0 = i7 + 1;
        $c10 = $r9[i7];
        i2 = i9 | $c10;

     label1:
        lookupswitch(c1)
        {
            case 100: goto label2;
            case 101: goto label3;
            default: goto label4;
        };

     label2:
        $c11 = (char) i2;
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c11);
        goto label5;

     label3:
        $r11 = r0.<java.text.SimpleDateFormat: char[] compiledPattern>;
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r11, i0, i2);
        i0 = i0 + i2;
        goto label5;

     label4:
        specialinvoke r0.<java.text.SimpleDateFormat: void subFormat(int,int,java.text.Format$FieldDelegate,java.lang.StringBuffer,boolean)>(c1, i2, r3, r2, z0);

     label5:
        goto label0;

     label6:
        return r2;
    }

    public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)
    {
        java.text.SimpleDateFormat r0;
        java.lang.Object r1;
        java.lang.StringBuffer $r2, r3;
        java.text.CharacterIteratorFieldDelegate r4, $r5;
        boolean $z0, $z1;
        java.util.Date $r6, $r8;
        java.lang.Number $r9;
        long $l0;
        java.lang.NullPointerException $r11;
        java.lang.IllegalArgumentException $r12;
        java.lang.String $r13;
        java.text.AttributedCharacterIterator $r14;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.lang.Object;
        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        r3 = $r2;
        $r5 = new java.text.CharacterIteratorFieldDelegate;
        specialinvoke $r5.<java.text.CharacterIteratorFieldDelegate: void <init>()>();
        r4 = $r5;
        $z0 = r1 instanceof java.util.Date;
        if $z0 == 0 goto label0;

        $r6 = (java.util.Date) r1;
        specialinvoke r0.<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.Format$FieldDelegate)>($r6, r3, r4);
        goto label3;

     label0:
        $z1 = r1 instanceof java.lang.Number;
        if $z1 == 0 goto label1;

        $r8 = new java.util.Date;
        $r9 = (java.lang.Number) r1;
        $l0 = virtualinvoke $r9.<java.lang.Number: long longValue()>();
        specialinvoke $r8.<java.util.Date: void <init>(long)>($l0);
        specialinvoke r0.<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.Format$FieldDelegate)>($r8, r3, r4);
        goto label3;

     label1:
        if r1 != null goto label2;

        $r11 = new java.lang.NullPointerException;
        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("formatToCharacterIterator must be passed non-null object");
        throw $r11;

     label2:
        $r12 = new java.lang.IllegalArgumentException;
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot format given Object as a Date");
        throw $r12;

     label3:
        $r13 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();
        $r14 = virtualinvoke r4.<java.text.CharacterIteratorFieldDelegate: java.text.AttributedCharacterIterator getIterator(java.lang.String)>($r13);
        return $r14;
    }

    private void subFormat(int, int, java.text.Format$FieldDelegate, java.lang.StringBuffer, boolean)
    {
        java.text.SimpleDateFormat r0;
        int i0, i1, i2, i3, i4, i5, i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, $i19, $i20, i21, $i22, $i24, $i27, $i28, $i29, i30, i31, $i32, $i33, $i34, i35, $i36, $i37, i38, i39, $i40, $i41, i42, $i43;
        java.text.Format$FieldDelegate r1;
        java.lang.StringBuffer r2;
        boolean z0, $z1, $z2, $z3, $z4, z5;
        java.lang.String r3, $r36, $r39, $r44, $r51;
        byte b6, $b9, $b23, $b25, b26;
        java.lang.String[] r4, r19, r21, r24, r26, r28, $r43;
        java.lang.String[][] r5;
        int[] $r6, $r9, $r66;
        java.util.Calendar $r7, $r8, $r10, $r11, $r12, $r13, $r16, $r22, $r29, $r34, $r37, $r38, $r41, $r46, $r48, $r53, $r54, $r57, $r58;
        java.util.Locale $r14, $r31, $r50;
        java.text.DateFormatSymbols $r15, $r18, $r20, $r23, $r25, $r27, $r30, $r32, $r33, $r42, $r49;
        java.util.TimeZone $r35, r47;
        java.text.DateFormat$Field[] $r67;
        java.text.DateFormat$Field r68;

        r0 := @this: java.text.SimpleDateFormat;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.text.Format$FieldDelegate;
        r2 := @parameter3: java.lang.StringBuffer;
        z0 := @parameter4: boolean;
        i2 = 2147483647;
        r3 = null;
        i3 = virtualinvoke r2.<java.lang.StringBuffer: int length()>();
        $r6 = <java.text.SimpleDateFormat: int[] PATTERN_INDEX_TO_CALENDAR_FIELD>;
        i4 = $r6[i0];
        if i4 != 17 goto label1;

        $r7 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $z1 = virtualinvoke $r7.<java.util.Calendar: boolean isWeekDateSupported()>();
        if $z1 == 0 goto label0;

        $r8 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        i5 = virtualinvoke $r8.<java.util.Calendar: int getWeekYear()>();
        goto label3;

     label0:
        i0 = 1;
        $r9 = <java.text.SimpleDateFormat: int[] PATTERN_INDEX_TO_CALENDAR_FIELD>;
        i4 = $r9[i0];
        $r10 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        i5 = virtualinvoke $r10.<java.util.Calendar: int get(int)>(i4);
        goto label3;

     label1:
        if i4 != 1000 goto label2;

        $r11 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $i8 = virtualinvoke $r11.<java.util.Calendar: int get(int)>(7);
        i5 = staticinvoke <java.text.CalendarBuilder: int toISODayOfWeek(int)>($i8);
        goto label3;

     label2:
        $r12 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        i5 = virtualinvoke $r12.<java.util.Calendar: int get(int)>(i4);

     label3:
        if i1 < 4 goto label4;

        $b9 = 2;
        goto label5;

     label4:
        $b9 = 1;

     label5:
        b6 = $b9;
        if z0 != 0 goto label6;

        if i4 == 1000 goto label6;

        $r13 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $r14 = r0.<java.text.SimpleDateFormat: java.util.Locale locale>;
        r3 = virtualinvoke $r13.<java.util.Calendar: java.lang.String getDisplayName(int,int,java.util.Locale)>(i4, b6, $r14);

     label6:
        tableswitch(i0)
        {
            case 0: goto label7;
            case 1: goto label9;
            case 2: goto label14;
            case 3: goto label48;
            case 4: goto label19;
            case 5: goto label48;
            case 6: goto label48;
            case 7: goto label48;
            case 8: goto label48;
            case 9: goto label21;
            case 10: goto label48;
            case 11: goto label48;
            case 12: goto label48;
            case 13: goto label48;
            case 14: goto label24;
            case 15: goto label25;
            case 16: goto label48;
            case 17: goto label27;
            case 18: goto label39;
            case 19: goto label9;
            case 20: goto label48;
            case 21: goto label42;
            default: goto label48;
        };

     label7:
        if z0 == 0 goto label8;

        $r15 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        r4 = virtualinvoke $r15.<java.text.DateFormatSymbols: java.lang.String[] getEras()>();
        $i10 = lengthof r4;
        if i5 >= $i10 goto label8;

        r3 = r4[i5];

     label8:
        if r3 != null goto label49;

        r3 = "";
        goto label49;

     label9:
        $r16 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $z2 = $r16 instanceof java.util.GregorianCalendar;
        if $z2 == 0 goto label11;

        if i1 == 2 goto label10;

        specialinvoke r0.<java.text.SimpleDateFormat: void zeroPaddingNumber(int,int,int,java.lang.StringBuffer)>(i5, i1, i2, r2);
        goto label49;

     label10:
        specialinvoke r0.<java.text.SimpleDateFormat: void zeroPaddingNumber(int,int,int,java.lang.StringBuffer)>(i5, 2, 2, r2);
        goto label49;

     label11:
        if r3 != null goto label49;

        $i11 = i5;
        if b6 != 2 goto label12;

        $i12 = 1;
        goto label13;

     label12:
        $i12 = i1;

     label13:
        specialinvoke r0.<java.text.SimpleDateFormat: void zeroPaddingNumber(int,int,int,java.lang.StringBuffer)>($i11, $i12, i2, r2);
        goto label49;

     label14:
        if z0 == 0 goto label17;

        if i1 < 4 goto label15;

        $r18 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        r19 = virtualinvoke $r18.<java.text.DateFormatSymbols: java.lang.String[] getMonths()>();
        r3 = r19[i5];
        goto label16;

     label15:
        if i1 != 3 goto label16;

        $r20 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        r21 = virtualinvoke $r20.<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>();
        r3 = r21[i5];

     label16:
        goto label18;

     label17:
        if i1 >= 3 goto label18;

        r3 = null;

     label18:
        if r3 != null goto label49;

        $i13 = i5 + 1;
        specialinvoke r0.<java.text.SimpleDateFormat: void zeroPaddingNumber(int,int,int,java.lang.StringBuffer)>($i13, i1, i2, r2);
        goto label49;

     label19:
        if r3 != null goto label49;

        if i5 != 0 goto label20;

        $r22 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $i14 = virtualinvoke $r22.<java.util.Calendar: int getMaximum(int)>(11);
        $i15 = $i14 + 1;
        specialinvoke r0.<java.text.SimpleDateFormat: void zeroPaddingNumber(int,int,int,java.lang.StringBuffer)>($i15, i1, i2, r2);
        goto label49;

     label20:
        specialinvoke r0.<java.text.SimpleDateFormat: void zeroPaddingNumber(int,int,int,java.lang.StringBuffer)>(i5, i1, i2, r2);
        goto label49;

     label21:
        if z0 == 0 goto label49;

        if i1 < 4 goto label22;

        $r23 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        r24 = virtualinvoke $r23.<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>();
        r3 = r24[i5];
        goto label23;

     label22:
        $r25 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        r26 = virtualinvoke $r25.<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>();
        r3 = r26[i5];

     label23:
        goto label49;

     label24:
        if z0 == 0 goto label49;

        $r27 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        r28 = virtualinvoke $r27.<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>();
        r3 = r28[i5];
        goto label49;

     label25:
        if r3 != null goto label49;

        if i5 != 0 goto label26;

        $r29 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $i16 = virtualinvoke $r29.<java.util.Calendar: int getLeastMaximum(int)>(10);
        $i17 = $i16 + 1;
        specialinvoke r0.<java.text.SimpleDateFormat: void zeroPaddingNumber(int,int,int,java.lang.StringBuffer)>($i17, i1, i2, r2);
        goto label49;

     label26:
        specialinvoke r0.<java.text.SimpleDateFormat: void zeroPaddingNumber(int,int,int,java.lang.StringBuffer)>(i5, i1, i2, r2);
        goto label49;

     label27:
        if r3 != null goto label49;

        $r30 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        $r31 = $r30.<java.text.DateFormatSymbols: java.util.Locale locale>;
        if $r31 == null goto label28;

        $r32 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        $z3 = $r32.<java.text.DateFormatSymbols: boolean isZoneStringsSet>;
        if $z3 == 0 goto label34;

     label28:
        $r33 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        $r34 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $r35 = virtualinvoke $r34.<java.util.Calendar: java.util.TimeZone getTimeZone()>();
        $r36 = virtualinvoke $r35.<java.util.TimeZone: java.lang.String getID()>();
        i18 = virtualinvoke $r33.<java.text.DateFormatSymbols: int getZoneIndex(java.lang.String)>($r36);
        if i18 != -1 goto label29;

        $r37 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $i19 = virtualinvoke $r37.<java.util.Calendar: int get(int)>(15);
        $r38 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $i20 = virtualinvoke $r38.<java.util.Calendar: int get(int)>(16);
        i21 = $i19 + $i20;
        $r39 = staticinvoke <sun.util.calendar.ZoneInfoFile: java.lang.String toCustomID(int)>(i21);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);
        goto label33;

     label29:
        $r41 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $i22 = virtualinvoke $r41.<java.util.Calendar: int get(int)>(16);
        if $i22 != 0 goto label30;

        $b23 = 1;
        goto label31;

     label30:
        $b23 = 3;

     label31:
        i7 = $b23;
        if i1 >= 4 goto label32;

        i7 = i7 + 1;

     label32:
        $r42 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        r5 = virtualinvoke $r42.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStringsWrapper()>();
        $r43 = r5[i18];
        $r44 = $r43[i7];
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r44);

     label33:
        goto label49;

     label34:
        $r46 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        r47 = virtualinvoke $r46.<java.util.Calendar: java.util.TimeZone getTimeZone()>();
        $r48 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $i24 = virtualinvoke $r48.<java.util.Calendar: int get(int)>(16);
        if $i24 == 0 goto label35;

        $z4 = 1;
        goto label36;

     label35:
        $z4 = 0;

     label36:
        z5 = $z4;
        if i1 >= 4 goto label37;

        $b25 = 0;
        goto label38;

     label37:
        $b25 = 1;

     label38:
        b26 = $b25;
        $r49 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        $r50 = $r49.<java.text.DateFormatSymbols: java.util.Locale locale>;
        $r51 = virtualinvoke r47.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>(z5, b26, $r50);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r51);
        goto label49;

     label39:
        $r53 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $i27 = virtualinvoke $r53.<java.util.Calendar: int get(int)>(15);
        $r54 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $i28 = virtualinvoke $r54.<java.util.Calendar: int get(int)>(16);
        $i29 = $i27 + $i28;
        i30 = $i29 / 60000;
        i31 = 4;
        if i30 < 0 goto label40;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43);
        goto label41;

     label40:
        i31 = i31 + 1;

     label41:
        $i32 = i30 / 60;
        $i33 = $i32 * 100;
        $i34 = i30 % 60;
        i35 = $i33 + $i34;
        staticinvoke <sun.util.calendar.CalendarUtils: java.lang.StringBuffer sprintf0d(java.lang.StringBuffer,int,int)>(r2, i35, i31);
        goto label49;

     label42:
        $r57 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $i36 = virtualinvoke $r57.<java.util.Calendar: int get(int)>(15);
        $r58 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $i37 = virtualinvoke $r58.<java.util.Calendar: int get(int)>(16);
        i38 = $i36 + $i37;
        if i38 != 0 goto label43;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(90);
        goto label49;

     label43:
        i39 = i38 / 60000;
        if i39 < 0 goto label44;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43);
        goto label45;

     label44:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);
        i39 = neg i39;

     label45:
        $i40 = i39 / 60;
        staticinvoke <sun.util.calendar.CalendarUtils: java.lang.StringBuffer sprintf0d(java.lang.StringBuffer,int,int)>(r2, $i40, 2);
        if i1 != 1 goto label46;

        goto label49;

     label46:
        if i1 != 3 goto label47;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

     label47:
        $i41 = i39 % 60;
        staticinvoke <sun.util.calendar.CalendarUtils: java.lang.StringBuffer sprintf0d(java.lang.StringBuffer,int,int)>(r2, $i41, 2);
        goto label49;

     label48:
        if r3 != null goto label49;

        specialinvoke r0.<java.text.SimpleDateFormat: void zeroPaddingNumber(int,int,int,java.lang.StringBuffer)>(i5, i1, i2, r2);

     label49:
        if r3 == null goto label50;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

     label50:
        $r66 = <java.text.SimpleDateFormat: int[] PATTERN_INDEX_TO_DATE_FORMAT_FIELD>;
        i42 = $r66[i0];
        $r67 = <java.text.SimpleDateFormat: java.text.DateFormat$Field[] PATTERN_INDEX_TO_DATE_FORMAT_FIELD_ID>;
        r68 = $r67[i0];
        $i43 = virtualinvoke r2.<java.lang.StringBuffer: int length()>();
        interfaceinvoke r1.<java.text.Format$FieldDelegate: void formatted(int,java.text.Format$Field,java.lang.Object,int,int,java.lang.StringBuffer)>(i42, r68, r68, i3, $i43, r2);
        return;
    }

    private final void zeroPaddingNumber(int, int, int, java.lang.StringBuffer)
    {
        java.text.SimpleDateFormat r0;
        int i0, i1, i2, $i7, $i10, $i11, $i14, $i15, $i18, $i19, $i22, $i23, $i26, $i27, $i30, $i31, $i33;
        java.lang.StringBuffer r1;
        java.lang.Exception r2, $r14;
        char $c3, $c4, $c5, $c6, $c8, $c9, $c12, $c13, $c16, $c17, $c20, $c21, $c24, $c25, $c28, $c29, $c32;
        java.text.NumberFormat $r3, $r15, $r16, $r17;
        java.text.DecimalFormat $r4;
        java.text.DecimalFormatSymbols $r5;
        long $l34;
        java.text.FieldPosition $r18;

        r0 := @this: java.text.SimpleDateFormat;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        r1 := @parameter3: java.lang.StringBuffer;

     label0:
        $c3 = r0.<java.text.SimpleDateFormat: char zeroDigit>;
        if $c3 != 0 goto label1;

        $r3 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;
        $r4 = (java.text.DecimalFormat) $r3;
        $r5 = virtualinvoke $r4.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>();
        $c4 = virtualinvoke $r5.<java.text.DecimalFormatSymbols: char getZeroDigit()>();
        r0.<java.text.SimpleDateFormat: char zeroDigit> = $c4;

     label1:
        if i0 < 0 goto label9;

        if i0 >= 100 goto label5;

        if i1 < 1 goto label5;

        if i1 > 2 goto label5;

        if i0 >= 10 goto label3;

        if i1 != 2 goto label2;

        $c5 = r0.<java.text.SimpleDateFormat: char zeroDigit>;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c5);

     label2:
        $c6 = r0.<java.text.SimpleDateFormat: char zeroDigit>;
        $i7 = $c6 + i0;
        $c8 = (char) $i7;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8);
        goto label4;

     label3:
        $c9 = r0.<java.text.SimpleDateFormat: char zeroDigit>;
        $i10 = i0 / 10;
        $i11 = $c9 + $i10;
        $c12 = (char) $i11;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c12);
        $c13 = r0.<java.text.SimpleDateFormat: char zeroDigit>;
        $i14 = i0 % 10;
        $i15 = $c13 + $i14;
        $c16 = (char) $i15;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c16);

     label4:
        return;

     label5:
        if i0 < 1000 goto label9;

        if i0 >= 10000 goto label9;

        if i1 != 4 goto label7;

        $c17 = r0.<java.text.SimpleDateFormat: char zeroDigit>;
        $i18 = i0 / 1000;
        $i19 = $c17 + $i18;
        $c20 = (char) $i19;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c20);
        i0 = i0 % 1000;
        $c21 = r0.<java.text.SimpleDateFormat: char zeroDigit>;
        $i22 = i0 / 100;
        $i23 = $c21 + $i22;
        $c24 = (char) $i23;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c24);
        i0 = i0 % 100;
        $c25 = r0.<java.text.SimpleDateFormat: char zeroDigit>;
        $i26 = i0 / 10;
        $i27 = $c25 + $i26;
        $c28 = (char) $i27;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c28);
        $c29 = r0.<java.text.SimpleDateFormat: char zeroDigit>;
        $i30 = i0 % 10;
        $i31 = $c29 + $i30;
        $c32 = (char) $i31;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c32);

     label6:
        return;

     label7:
        if i1 != 2 goto label9;

        if i2 != 2 goto label9;

        $i33 = i0 % 100;
        specialinvoke r0.<java.text.SimpleDateFormat: void zeroPaddingNumber(int,int,int,java.lang.StringBuffer)>($i33, 2, 2, r1);

     label8:
        return;

     label9:
        goto label11;

     label10:
        $r14 := @caughtexception;
        r2 = $r14;

     label11:
        $r15 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;
        virtualinvoke $r15.<java.text.NumberFormat: void setMinimumIntegerDigits(int)>(i1);
        $r16 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;
        virtualinvoke $r16.<java.text.NumberFormat: void setMaximumIntegerDigits(int)>(i2);
        $r17 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;
        $l34 = (long) i0;
        $r18 = <java.text.DontCareFieldPosition: java.text.FieldPosition INSTANCE>;
        virtualinvoke $r17.<java.text.NumberFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>($l34, r1, $r18);
        return;

        catch java.lang.Exception from label0 to label4 with label10;
        catch java.lang.Exception from label5 to label6 with label10;
        catch java.lang.Exception from label7 to label8 with label10;
    }

    public java.util.Date parse(java.lang.String, java.text.ParsePosition)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1;
        java.text.ParsePosition r2;
        int i0, i1, i2, i3, i5, $i8, $i10, i12, i14, $i18, $i20, $i22, $i25;
        boolean[] r3, $r5;
        java.text.CalendarBuilder r4, $r6, $r21;
        char c4, c6, c7, $c9, $c11, $c13, $c15, $c16, $c17, $c19, $c21, $c23, $c24, $c26;
        boolean z0, z1, $z2, $z3, $z4;
        char[] $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.util.Calendar $r17, $r18, $r22, $r23;
        java.util.Date r19, $r20;
        java.lang.IllegalArgumentException $r24, r25;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.text.ParsePosition;
        specialinvoke r0.<java.text.SimpleDateFormat: void checkNegativeNumberExpression()>();
        i0 = r2.<java.text.ParsePosition: int index>;
        i1 = i0;
        i2 = virtualinvoke r1.<java.lang.String: int length()>();
        $r5 = newarray (boolean)[1];
        $r5[0] = 0;
        r3 = $r5;
        $r6 = new java.text.CalendarBuilder;
        specialinvoke $r6.<java.text.CalendarBuilder: void <init>()>();
        r4 = $r6;
        i3 = 0;

     label0:
        $r7 = r0.<java.text.SimpleDateFormat: char[] compiledPattern>;
        $i8 = lengthof $r7;
        if i3 >= $i8 goto label15;

        $r8 = r0.<java.text.SimpleDateFormat: char[] compiledPattern>;
        $c9 = $r8[i3];
        c4 = $c9 >>> 8;
        $r9 = r0.<java.text.SimpleDateFormat: char[] compiledPattern>;
        $i10 = i3;
        i3 = i3 + 1;
        $c11 = $r9[$i10];
        i5 = $c11 & 255;
        if i5 != 255 goto label1;

        $r10 = r0.<java.text.SimpleDateFormat: char[] compiledPattern>;
        i12 = i3 + 1;
        $c13 = $r10[i3];
        i14 = $c13 << 16;
        $r11 = r0.<java.text.SimpleDateFormat: char[] compiledPattern>;
        i3 = i12 + 1;
        $c15 = $r11[i12];
        i5 = i14 | $c15;

     label1:
        lookupswitch(c4)
        {
            case 100: goto label2;
            case 101: goto label5;
            default: goto label8;
        };

     label2:
        if i0 >= i2 goto label3;

        $c16 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);
        $c17 = (char) i5;
        if $c16 == $c17 goto label4;

     label3:
        r2.<java.text.ParsePosition: int index> = i1;
        r2.<java.text.ParsePosition: int errorIndex> = i0;
        return null;

     label4:
        i0 = i0 + 1;
        goto label14;

     label5:
        $i18 = i5;
        i5 = i5 + -1;
        if $i18 <= 0 goto label14;

        if i0 >= i2 goto label6;

        $c19 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);
        $r12 = r0.<java.text.SimpleDateFormat: char[] compiledPattern>;
        $i20 = i3;
        i3 = i3 + 1;
        $c21 = $r12[$i20];
        if $c19 == $c21 goto label7;

     label6:
        r2.<java.text.ParsePosition: int index> = i1;
        r2.<java.text.ParsePosition: int errorIndex> = i0;
        return null;

     label7:
        i0 = i0 + 1;
        goto label5;

     label8:
        z0 = 0;
        z1 = 0;
        $r13 = r0.<java.text.SimpleDateFormat: char[] compiledPattern>;
        $i22 = lengthof $r13;
        if i3 >= $i22 goto label13;

        $r14 = r0.<java.text.SimpleDateFormat: char[] compiledPattern>;
        $c23 = $r14[i3];
        c6 = $c23 >>> 8;
        if c6 == 100 goto label9;

        if c6 == 101 goto label9;

        z0 = 1;

     label9:
        $z2 = r0.<java.text.SimpleDateFormat: boolean hasFollowingMinusSign>;
        if $z2 == 0 goto label13;

        if c6 == 100 goto label10;

        if c6 != 101 goto label13;

     label10:
        if c6 != 100 goto label11;

        $r15 = r0.<java.text.SimpleDateFormat: char[] compiledPattern>;
        $c24 = $r15[i3];
        c7 = $c24 & 255;
        goto label12;

     label11:
        $r16 = r0.<java.text.SimpleDateFormat: char[] compiledPattern>;
        $i25 = i3 + 1;
        c7 = $r16[$i25];

     label12:
        $c26 = r0.<java.text.SimpleDateFormat: char minusSign>;
        if c7 != $c26 goto label13;

        z1 = 1;

     label13:
        i0 = specialinvoke r0.<java.text.SimpleDateFormat: int subParse(java.lang.String,int,int,int,boolean,boolean[],java.text.ParsePosition,boolean,java.text.CalendarBuilder)>(r1, i0, c4, i5, z0, r3, r2, z1, r4);
        if i0 >= 0 goto label14;

        r2.<java.text.ParsePosition: int index> = i1;
        return null;

     label14:
        goto label0;

     label15:
        r2.<java.text.ParsePosition: int index> = i0;

     label16:
        $r17 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $r18 = virtualinvoke r4.<java.text.CalendarBuilder: java.util.Calendar establish(java.util.Calendar)>($r17);
        r19 = virtualinvoke $r18.<java.util.Calendar: java.util.Date getTime()>();
        $z3 = r3[0];
        if $z3 == 0 goto label17;

        $r20 = r0.<java.text.SimpleDateFormat: java.util.Date defaultCenturyStart>;
        $z4 = virtualinvoke r19.<java.util.Date: boolean before(java.util.Date)>($r20);
        if $z4 == 0 goto label17;

        $r21 = virtualinvoke r4.<java.text.CalendarBuilder: java.text.CalendarBuilder addYear(int)>(100);
        $r22 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $r23 = virtualinvoke $r21.<java.text.CalendarBuilder: java.util.Calendar establish(java.util.Calendar)>($r22);
        r19 = virtualinvoke $r23.<java.util.Calendar: java.util.Date getTime()>();

     label17:
        goto label19;

     label18:
        $r24 := @caughtexception;
        r25 = $r24;
        r2.<java.text.ParsePosition: int errorIndex> = i0;
        r2.<java.text.ParsePosition: int index> = i1;
        return null;

     label19:
        return r19;

        catch java.lang.IllegalArgumentException from label16 to label17 with label18;
    }

    private int matchString(java.lang.String, int, int, java.lang.String[], java.text.CalendarBuilder)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1, $r4, $r5;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8;
        java.lang.String[] r2;
        java.text.CalendarBuilder r3;
        boolean $z0;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: java.lang.String[];
        r3 := @parameter4: java.text.CalendarBuilder;
        i2 = 0;
        i3 = lengthof r2;
        if i1 != 7 goto label0;

        i2 = 1;

     label0:
        i4 = 0;
        i5 = -1;

     label1:
        if i2 >= i3 goto label3;

        $r4 = r2[i2];
        i6 = virtualinvoke $r4.<java.lang.String: int length()>();
        if i6 <= i4 goto label2;

        $r5 = r2[i2];
        $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, $r5, 0, i6);
        if $z0 == 0 goto label2;

        i5 = i2;
        i4 = i6;

     label2:
        i2 = i2 + 1;
        goto label1;

     label3:
        if i5 < 0 goto label4;

        virtualinvoke r3.<java.text.CalendarBuilder: java.text.CalendarBuilder set(int,int)>(i1, i5);
        $i7 = i0 + i4;
        return $i7;

     label4:
        $i8 = neg i0;
        return $i8;
    }

    private int matchString(java.lang.String, int, int, java.util.Map, java.text.CalendarBuilder)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1, r4, r6;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.util.Map r2;
        java.text.CalendarBuilder r3;
        java.util.Iterator r5;
        java.util.Set $r7;
        boolean $z0, $z1;
        java.lang.Object $r8, $r9;
        java.lang.Integer $r10;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: java.util.Map;
        r3 := @parameter4: java.text.CalendarBuilder;
        if r2 == null goto label4;

        r4 = null;
        $r7 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>();
        r5 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        r6 = (java.lang.String) $r8;
        i2 = virtualinvoke r6.<java.lang.String: int length()>();
        if r4 == null goto label1;

        $i3 = virtualinvoke r4.<java.lang.String: int length()>();
        if i2 <= $i3 goto label2;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, r6, 0, i2);
        if $z1 == 0 goto label2;

        r4 = r6;

     label2:
        goto label0;

     label3:
        if r4 == null goto label4;

        $r9 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);
        $r10 = (java.lang.Integer) $r9;
        $i4 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();
        virtualinvoke r3.<java.text.CalendarBuilder: java.text.CalendarBuilder set(int,int)>(i1, $i4);
        $i5 = virtualinvoke r4.<java.lang.String: int length()>();
        $i6 = i0 + $i5;
        return $i6;

     label4:
        $i7 = neg i0;
        return $i7;
    }

    private int matchZoneString(java.lang.String, int, java.lang.String[])
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1, r3;
        int i0, i1, $i2;
        java.lang.String[] r2;
        boolean $z0;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.String[];
        i1 = 1;

     label0:
        if i1 > 4 goto label2;

        r3 = r2[i1];
        $i2 = virtualinvoke r3.<java.lang.String: int length()>();
        $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, r3, 0, $i2);
        if $z0 == 0 goto label1;

        return i1;

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        return -1;
    }

    private boolean matchDSTString(java.lang.String, int, int, int, java.lang.String[][])
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1, r3;
        int i0, i1, i2, i3, $i4;
        java.lang.String[][] r2;
        java.lang.String[] $r4;
        boolean $z0;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        r2 := @parameter4: java.lang.String[][];
        i3 = i2 + 2;
        $r4 = r2[i1];
        r3 = $r4[i3];
        $i4 = virtualinvoke r3.<java.lang.String: int length()>();
        $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, r3, 0, $i4);
        if $z0 == 0 goto label0;

        return 1;

     label0:
        return 0;
    }

    private int subParseZoneString(java.lang.String, int, java.text.CalendarBuilder)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1, $r8, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r24;
        int i0, i1, i2, i3, i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, $i15;
        java.text.CalendarBuilder r2, $r22;
        boolean z0, $z1;
        java.util.TimeZone r3, r4, $r14;
        java.lang.String[][] r5;
        java.lang.String[] r6;
        java.text.DateFormatSymbols $r7, $r9, $r13;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r2 := @parameter2: java.text.CalendarBuilder;
        z0 = 0;
        r3 = virtualinvoke r0.<java.text.SimpleDateFormat: java.util.TimeZone getTimeZone()>();
        $r7 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        $r8 = virtualinvoke r3.<java.util.TimeZone: java.lang.String getID()>();
        i1 = virtualinvoke $r7.<java.text.DateFormatSymbols: int getZoneIndex(java.lang.String)>($r8);
        r4 = null;
        $r9 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        r5 = virtualinvoke $r9.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStringsWrapper()>();
        r6 = null;
        i2 = 0;
        if i1 == -1 goto label1;

        r6 = r5[i1];
        $i5 = specialinvoke r0.<java.text.SimpleDateFormat: int matchZoneString(java.lang.String,int,java.lang.String[])>(r1, i0, r6);
        i2 = $i5;
        if $i5 <= 0 goto label1;

        if i2 > 2 goto label0;

        $r10 = r6[i2];
        $i6 = i2 + 2;
        $r11 = r6[$i6];
        z0 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r11);

     label0:
        $r12 = r6[0];
        r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r12);

     label1:
        if r4 != null goto label3;

        $r13 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        $r14 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();
        $r15 = virtualinvoke $r14.<java.util.TimeZone: java.lang.String getID()>();
        i7 = virtualinvoke $r13.<java.text.DateFormatSymbols: int getZoneIndex(java.lang.String)>($r15);
        if i7 == -1 goto label3;

        r6 = r5[i7];
        $i8 = specialinvoke r0.<java.text.SimpleDateFormat: int matchZoneString(java.lang.String,int,java.lang.String[])>(r1, i0, r6);
        i2 = $i8;
        if $i8 <= 0 goto label3;

        if i2 > 2 goto label2;

        $r16 = r6[i2];
        $i9 = i2 + 2;
        $r17 = r6[$i9];
        z0 = virtualinvoke $r16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r17);

     label2:
        $r18 = r6[0];
        r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r18);

     label3:
        if r4 != null goto label7;

        i3 = lengthof r5;
        i4 = 0;

     label4:
        if i4 >= i3 goto label7;

        r6 = r5[i4];
        $i10 = specialinvoke r0.<java.text.SimpleDateFormat: int matchZoneString(java.lang.String,int,java.lang.String[])>(r1, i0, r6);
        i2 = $i10;
        if $i10 <= 0 goto label6;

        if i2 > 2 goto label5;

        $r19 = r6[i2];
        $i11 = i2 + 2;
        $r20 = r6[$i11];
        z0 = virtualinvoke $r19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r20);

     label5:
        $r21 = r6[0];
        r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r21);
        goto label7;

     label6:
        i4 = i4 + 1;
        goto label4;

     label7:
        if r4 == null goto label13;

        $z1 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(r3);
        if $z1 != 0 goto label8;

        virtualinvoke r0.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>(r4);

     label8:
        if i2 < 3 goto label9;

        $i12 = virtualinvoke r4.<java.util.TimeZone: int getDSTSavings()>();
        goto label10;

     label9:
        $i12 = 0;

     label10:
        i13 = $i12;
        if z0 != 0 goto label12;

        if i2 < 3 goto label11;

        if i13 == 0 goto label12;

     label11:
        $r22 = virtualinvoke r2.<java.text.CalendarBuilder: java.text.CalendarBuilder clear(int)>(15);
        virtualinvoke $r22.<java.text.CalendarBuilder: java.text.CalendarBuilder set(int,int)>(16, i13);

     label12:
        $r24 = r6[i2];
        $i14 = virtualinvoke $r24.<java.lang.String: int length()>();
        $i15 = i0 + $i14;
        return $i15;

     label13:
        return 0;
    }

    private int subParseNumericZone(java.lang.String, int, int, int, boolean, java.text.CalendarBuilder)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1;
        int i0, i1, i2, i3, $i4, i6, i7, $i8, $i10, $i11, $i12, $i14, i15, $i16, $i18, $i19, $i20, i21, $i22, $i23, $i25;
        boolean z0, $z1, $z2, $z3, $z4;
        java.text.CalendarBuilder r2, $r3;
        char c5, c9, c13, c17;
        java.lang.IndexOutOfBoundsException $r5, r6;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        z0 := @parameter4: boolean;
        r2 := @parameter5: java.text.CalendarBuilder;
        i3 = i0;

     label0:
        $i4 = i3;
        i3 = i3 + 1;
        c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i4);
        $z1 = specialinvoke r0.<java.text.SimpleDateFormat: boolean isDigit(char)>(c5);
        if $z1 != 0 goto label2;

     label1:
        goto label20;

     label2:
        i6 = c5 - 48;
        $i8 = i3;
        i3 = i3 + 1;
        c9 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i8);
        $z2 = specialinvoke r0.<java.text.SimpleDateFormat: boolean isDigit(char)>(c9);
        if $z2 == 0 goto label3;

        $i10 = i6 * 10;
        $i11 = c9 - 48;
        i6 = $i10 + $i11;
        goto label6;

     label3:
        if i2 > 0 goto label4;

        if z0 != 0 goto label5;

     label4:
        goto label20;

     label5:
        i3 = i3 + -1;

     label6:
        if i6 <= 23 goto label8;

     label7:
        goto label20;

     label8:
        i7 = 0;
        if i2 == 1 goto label17;

        $i12 = i3;
        i3 = i3 + 1;
        c13 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i12);
        if z0 == 0 goto label11;

        if c13 == 58 goto label10;

     label9:
        goto label20;

     label10:
        $i14 = i3;
        i3 = i3 + 1;
        c13 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i14);

     label11:
        $z3 = specialinvoke r0.<java.text.SimpleDateFormat: boolean isDigit(char)>(c13);
        if $z3 != 0 goto label13;

     label12:
        goto label20;

     label13:
        i15 = c13 - 48;
        $i16 = i3;
        i3 = i3 + 1;
        c17 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i16);
        $z4 = specialinvoke r0.<java.text.SimpleDateFormat: boolean isDigit(char)>(c17);
        if $z4 != 0 goto label15;

     label14:
        goto label20;

     label15:
        $i18 = i15 * 10;
        $i19 = c17 - 48;
        i7 = $i18 + $i19;
        if i7 <= 59 goto label17;

     label16:
        goto label20;

     label17:
        $i20 = i6 * 60;
        i21 = i7 + $i20;
        $i22 = i21 * 60000;
        $i23 = $i22 * i1;
        $r3 = virtualinvoke r2.<java.text.CalendarBuilder: java.text.CalendarBuilder set(int,int)>(15, $i23);
        virtualinvoke $r3.<java.text.CalendarBuilder: java.text.CalendarBuilder set(int,int)>(16, 0);

     label18:
        return i3;

     label19:
        $r5 := @caughtexception;
        r6 = $r5;

     label20:
        $i25 = 1 - i3;
        return $i25;

        catch java.lang.IndexOutOfBoundsException from label0 to label1 with label19;
        catch java.lang.IndexOutOfBoundsException from label2 to label4 with label19;
        catch java.lang.IndexOutOfBoundsException from label5 to label7 with label19;
        catch java.lang.IndexOutOfBoundsException from label8 to label9 with label19;
        catch java.lang.IndexOutOfBoundsException from label10 to label12 with label19;
        catch java.lang.IndexOutOfBoundsException from label13 to label14 with label19;
        catch java.lang.IndexOutOfBoundsException from label15 to label16 with label19;
        catch java.lang.IndexOutOfBoundsException from label17 to label18 with label19;
    }

    private boolean isDigit(char)
    {
        java.text.SimpleDateFormat r0;
        char c0;
        boolean $z0;

        r0 := @this: java.text.SimpleDateFormat;
        c0 := @parameter0: char;
        if c0 < 48 goto label0;

        if c0 > 57 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private int subParse(java.lang.String, int, int, int, boolean, boolean[], java.text.ParsePosition, boolean, java.text.CalendarBuilder)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1, $r14, $r55, $r56, $r57, $r72;
        int i0, i1, i2, i3, i4, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i23, $i24, $i25, $i26, $i29, $i30, $i31, $i32, i33, $i36, i37, $i38, $i39, $i40, $i42, $i44, i45, $i47, $i48, $i49, $i50, $i52, $i53, $i54, $i55, $i56, i57, $i58, i59, $i60, i61, $i62, $i63, $i64, $i65, i66, $i67, i68, $i69, i70, $i71, i72, $i73, i74, $i75, $i76, $i77, $i79, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i92, $i93, $i94, i95, $i97, $i98, i99, $i101, $i102, $i103, i104, $i106, $i107, $i108, $i109, $i110, $i112, $i113, $i115, $i116, $i117, $i118, i122, $i123, $i124, $i125, $i126, i127, $i128, $i129, $i130, $i133, $i134, $i135, $i136, $i139, $i140, $i141, $i142;
        boolean z0, z1, $z2, $z3, z4, $z5, $z6, $z7, $z8, z9, $z10, z11, $z12, $z13, z14, $z15;
        boolean[] r2;
        java.text.ParsePosition r3, r5, $r9;
        java.text.CalendarBuilder r4, $r58, $r64;
        null_type n0;
        char c5, $c21, $c22, $c27, $c28, $c41, $c43, c80, c91, c111, $c131, $c132, $c137, $c138;
        java.util.Map r6, r7, r8, r36, r52;
        java.util.Calendar $r10, $r17, $r21, $r23, $r24, $r34, $r37, $r46, $r50, $r53;
        int[] $r11, $r43, r44, r45;
        java.text.NumberFormat $r13, $r16, $r71, $r74;
        java.lang.Number r15, r73;
        java.text.DateFormatSymbols $r19, $r30, $r32, $r39, $r41, $r48;
        java.lang.String[] $r20, $r31, $r33, $r40, $r42, $r49;
        java.util.Locale $r22, $r25, $r35, $r47, $r51;
        byte $b34, b35, $b46, $b51, b78, b114, $b120;
        java.lang.IndexOutOfBoundsException $r62, r63;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        z0 := @parameter4: boolean;
        r2 := @parameter5: boolean[];
        r3 := @parameter6: java.text.ParsePosition;
        z1 := @parameter7: boolean;
        r4 := @parameter8: java.text.CalendarBuilder;
        n0 = null;
        i3 = 0;
        $r9 = new java.text.ParsePosition;
        specialinvoke $r9.<java.text.ParsePosition: void <init>(int)>(0);
        r5 = $r9;
        r5.<java.text.ParsePosition: int index> = i0;
        if i1 != 19 goto label0;

        $r10 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $z2 = virtualinvoke $r10.<java.util.Calendar: boolean isWeekDateSupported()>();
        if $z2 != 0 goto label0;

        i1 = 1;

     label0:
        $r11 = <java.text.SimpleDateFormat: int[] PATTERN_INDEX_TO_CALENDAR_FIELD>;
        i4 = $r11[i1];

     label1:
        $i10 = r5.<java.text.ParsePosition: int index>;
        $i11 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i10 < $i11 goto label2;

        r3.<java.text.ParsePosition: int errorIndex> = i0;
        return -1;

     label2:
        $i12 = r5.<java.text.ParsePosition: int index>;
        c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i12);
        if c5 == 32 goto label3;

        if c5 == 9 goto label3;

        goto label4;

     label3:
        $i13 = r5.<java.text.ParsePosition: int index>;
        $i14 = $i13 + 1;
        r5.<java.text.ParsePosition: int index> = $i14;
        goto label1;

     label4:
        if i1 == 4 goto label6;

        if i1 == 15 goto label6;

        if i1 != 2 goto label5;

        if i2 <= 2 goto label6;

     label5:
        if i1 == 1 goto label6;

        if i1 != 19 goto label13;

     label6:
        if z0 == 0 goto label8;

        $i15 = i0 + i2;
        $i16 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i15 <= $i16 goto label7;

        goto label85;

     label7:
        $r13 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;
        $i17 = i0 + i2;
        $r14 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i17);
        r15 = virtualinvoke $r13.<java.text.NumberFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>($r14, r5);
        goto label9;

     label8:
        $r16 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;
        r15 = virtualinvoke $r16.<java.text.NumberFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>(r1, r5);

     label9:
        if r15 != null goto label10;

        if i1 != 1 goto label85;

        $r17 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $z3 = $r17 instanceof java.util.GregorianCalendar;
        if $z3 == 0 goto label13;

        goto label85;

     label10:
        i3 = virtualinvoke r15.<java.lang.Number: int intValue()>();
        if z1 == 0 goto label13;

        if i3 >= 0 goto label13;

        $i18 = r5.<java.text.ParsePosition: int index>;
        $i19 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i18 >= $i19 goto label11;

        $i20 = r5.<java.text.ParsePosition: int index>;
        $c21 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i20);
        $c22 = r0.<java.text.SimpleDateFormat: char minusSign>;
        if $c21 != $c22 goto label12;

     label11:
        $i23 = r5.<java.text.ParsePosition: int index>;
        $i24 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i23 != $i24 goto label13;

        $i25 = r5.<java.text.ParsePosition: int index>;
        $i26 = $i25 - 1;
        $c27 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i26);
        $c28 = r0.<java.text.SimpleDateFormat: char minusSign>;
        if $c27 != $c28 goto label13;

     label12:
        i3 = neg i3;
        $i29 = r5.<java.text.ParsePosition: int index>;
        $i30 = $i29 - 1;
        r5.<java.text.ParsePosition: int index> = $i30;

     label13:
        z4 = specialinvoke r0.<java.text.SimpleDateFormat: boolean useDateFormatSymbols()>();
        tableswitch(i1)
        {
            case 0: goto label14;
            case 1: goto label17;
            case 2: goto label27;
            case 3: goto label78;
            case 4: goto label33;
            case 5: goto label78;
            case 6: goto label78;
            case 7: goto label78;
            case 8: goto label78;
            case 9: goto label36;
            case 10: goto label78;
            case 11: goto label78;
            case 12: goto label78;
            case 13: goto label78;
            case 14: goto label43;
            case 15: goto label46;
            case 16: goto label78;
            case 17: goto label49;
            case 18: goto label49;
            case 19: goto label17;
            case 20: goto label78;
            case 21: goto label69;
            default: goto label78;
        };

     label14:
        if z4 == 0 goto label15;

        $r19 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        $r20 = virtualinvoke $r19.<java.text.DateFormatSymbols: java.lang.String[] getEras()>();
        $i31 = specialinvoke r0.<java.text.SimpleDateFormat: int matchString(java.lang.String,int,int,java.lang.String[],java.text.CalendarBuilder)>(r1, i0, 0, $r20, r4);
        i6 = $i31;
        if $i31 <= 0 goto label85;

        return i6;

     label15:
        $r21 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $r22 = r0.<java.text.SimpleDateFormat: java.util.Locale locale>;
        r6 = virtualinvoke $r21.<java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)>(i4, 0, $r22);
        $i32 = specialinvoke r0.<java.text.SimpleDateFormat: int matchString(java.lang.String,int,int,java.util.Map,java.text.CalendarBuilder)>(r1, i0, i4, r6, r4);
        i33 = $i32;
        if $i32 <= 0 goto label16;

        return i33;

     label16:
        goto label85;

     label17:
        $r23 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $z5 = $r23 instanceof java.util.GregorianCalendar;
        if $z5 != 0 goto label21;

        if i2 < 4 goto label18;

        $b34 = 2;
        goto label19;

     label18:
        $b34 = 1;

     label19:
        b35 = $b34;
        $r24 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $r25 = r0.<java.text.SimpleDateFormat: java.util.Locale locale>;
        r7 = virtualinvoke $r24.<java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)>(i4, b35, $r25);
        if r7 == null goto label20;

        $i36 = specialinvoke r0.<java.text.SimpleDateFormat: int matchString(java.lang.String,int,int,java.util.Map,java.text.CalendarBuilder)>(r1, i0, i4, r7, r4);
        i37 = $i36;
        if $i36 <= 0 goto label20;

        return i37;

     label20:
        virtualinvoke r4.<java.text.CalendarBuilder: java.text.CalendarBuilder set(int,int)>(i4, i3);
        $i38 = r5.<java.text.ParsePosition: int index>;
        return $i38;

     label21:
        if i2 > 2 goto label26;

        $i39 = r5.<java.text.ParsePosition: int index>;
        $i40 = $i39 - i0;
        if $i40 != 2 goto label26;

        $c41 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);
        $z6 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c41);
        if $z6 == 0 goto label26;

        $i42 = i0 + 1;
        $c43 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i42);
        $z7 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c43);
        if $z7 == 0 goto label26;

        $i44 = r0.<java.text.SimpleDateFormat: int defaultCenturyStartYear>;
        i45 = $i44 % 100;
        $b46 = 0;
        if i3 != i45 goto label22;

        $z8 = 1;
        goto label23;

     label22:
        $z8 = 0;

     label23:
        r2[$b46] = $z8;
        $i47 = i3;
        $i48 = r0.<java.text.SimpleDateFormat: int defaultCenturyStartYear>;
        $i49 = $i48 / 100;
        $i50 = $i49 * 100;
        if i3 >= i45 goto label24;

        $b51 = 100;
        goto label25;

     label24:
        $b51 = 0;

     label25:
        $i52 = $i50 + $b51;
        i3 = $i47 + $i52;

     label26:
        virtualinvoke r4.<java.text.CalendarBuilder: java.text.CalendarBuilder set(int,int)>(i4, i3);
        $i53 = r5.<java.text.ParsePosition: int index>;
        return $i53;

     label27:
        if i2 > 2 goto label28;

        $i54 = i3 - 1;
        virtualinvoke r4.<java.text.CalendarBuilder: java.text.CalendarBuilder set(int,int)>(2, $i54);
        $i55 = r5.<java.text.ParsePosition: int index>;
        return $i55;

     label28:
        if z4 == 0 goto label31;

        z9 = 0;
        $r30 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        $r31 = virtualinvoke $r30.<java.text.DateFormatSymbols: java.lang.String[] getMonths()>();
        $i56 = specialinvoke r0.<java.text.SimpleDateFormat: int matchString(java.lang.String,int,int,java.lang.String[],java.text.CalendarBuilder)>(r1, i0, 2, $r31, r4);
        i57 = $i56;
        if $i56 <= 0 goto label29;

        return i57;

     label29:
        $r32 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        $r33 = virtualinvoke $r32.<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>();
        $i58 = specialinvoke r0.<java.text.SimpleDateFormat: int matchString(java.lang.String,int,int,java.lang.String[],java.text.CalendarBuilder)>(r1, i0, 2, $r33, r4);
        i59 = $i58;
        if $i58 <= 0 goto label30;

        return i59;

     label30:
        goto label85;

     label31:
        $r34 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $r35 = r0.<java.text.SimpleDateFormat: java.util.Locale locale>;
        r36 = virtualinvoke $r34.<java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)>(i4, 0, $r35);
        $i60 = specialinvoke r0.<java.text.SimpleDateFormat: int matchString(java.lang.String,int,int,java.util.Map,java.text.CalendarBuilder)>(r1, i0, i4, r36, r4);
        i61 = $i60;
        if $i60 <= 0 goto label32;

        return i61;

     label32:
        goto label85;

     label33:
        $z10 = virtualinvoke r0.<java.text.SimpleDateFormat: boolean isLenient()>();
        if $z10 != 0 goto label34;

        if i3 < 1 goto label85;

        if i3 <= 24 goto label34;

        goto label85;

     label34:
        $r37 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $i62 = virtualinvoke $r37.<java.util.Calendar: int getMaximum(int)>(11);
        $i63 = $i62 + 1;
        if i3 != $i63 goto label35;

        i3 = 0;

     label35:
        virtualinvoke r4.<java.text.CalendarBuilder: java.text.CalendarBuilder set(int,int)>(11, i3);
        $i64 = r5.<java.text.ParsePosition: int index>;
        return $i64;

     label36:
        if z4 == 0 goto label39;

        z11 = 0;
        $r39 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        $r40 = virtualinvoke $r39.<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>();
        $i65 = specialinvoke r0.<java.text.SimpleDateFormat: int matchString(java.lang.String,int,int,java.lang.String[],java.text.CalendarBuilder)>(r1, i0, 7, $r40, r4);
        i66 = $i65;
        if $i65 <= 0 goto label37;

        return i66;

     label37:
        $r41 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        $r42 = virtualinvoke $r41.<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>();
        $i67 = specialinvoke r0.<java.text.SimpleDateFormat: int matchString(java.lang.String,int,int,java.lang.String[],java.text.CalendarBuilder)>(r1, i0, 7, $r42, r4);
        i68 = $i67;
        if $i67 <= 0 goto label38;

        return i68;

     label38:
        goto label85;

     label39:
        $r43 = newarray (int)[2];
        $r43[0] = 2;
        $r43[1] = 1;
        r44 = $r43;
        r45 = r44;
        i7 = lengthof r45;
        i8 = 0;

     label40:
        if i8 >= i7 goto label42;

        i9 = r45[i8];
        $r46 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $r47 = r0.<java.text.SimpleDateFormat: java.util.Locale locale>;
        r8 = virtualinvoke $r46.<java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)>(i4, i9, $r47);
        $i69 = specialinvoke r0.<java.text.SimpleDateFormat: int matchString(java.lang.String,int,int,java.util.Map,java.text.CalendarBuilder)>(r1, i0, i4, r8, r4);
        i70 = $i69;
        if $i69 <= 0 goto label41;

        return i70;

     label41:
        i8 = i8 + 1;
        goto label40;

     label42:
        goto label85;

     label43:
        if z4 == 0 goto label44;

        $r48 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        $r49 = virtualinvoke $r48.<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>();
        $i71 = specialinvoke r0.<java.text.SimpleDateFormat: int matchString(java.lang.String,int,int,java.lang.String[],java.text.CalendarBuilder)>(r1, i0, 9, $r49, r4);
        i72 = $i71;
        if $i71 <= 0 goto label85;

        return i72;

     label44:
        $r50 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $r51 = r0.<java.text.SimpleDateFormat: java.util.Locale locale>;
        r52 = virtualinvoke $r50.<java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)>(i4, 0, $r51);
        $i73 = specialinvoke r0.<java.text.SimpleDateFormat: int matchString(java.lang.String,int,int,java.util.Map,java.text.CalendarBuilder)>(r1, i0, i4, r52, r4);
        i74 = $i73;
        if $i73 <= 0 goto label45;

        return i74;

     label45:
        goto label85;

     label46:
        $z12 = virtualinvoke r0.<java.text.SimpleDateFormat: boolean isLenient()>();
        if $z12 != 0 goto label47;

        if i3 < 1 goto label85;

        if i3 <= 12 goto label47;

        goto label85;

     label47:
        $r53 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $i75 = virtualinvoke $r53.<java.util.Calendar: int getLeastMaximum(int)>(10);
        $i76 = $i75 + 1;
        if i3 != $i76 goto label48;

        i3 = 0;

     label48:
        virtualinvoke r4.<java.text.CalendarBuilder: java.text.CalendarBuilder set(int,int)>(10, i3);
        $i77 = r5.<java.text.ParsePosition: int index>;
        return $i77;

     label49:
        b78 = 0;

     label50:
        $i79 = r5.<java.text.ParsePosition: int index>;
        c80 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i79);
        if c80 != 43 goto label51;

        b78 = 1;
        goto label52;

     label51:
        if c80 != 45 goto label52;

        b78 = -1;

     label52:
        if b78 != 0 goto label63;

        if c80 == 71 goto label53;

        if c80 != 103 goto label60;

     label53:
        $i81 = virtualinvoke r1.<java.lang.String: int length()>();
        $i82 = $i81 - i0;
        $r55 = "GMT";
        $i83 = virtualinvoke $r55.<java.lang.String: int length()>();
        if $i82 < $i83 goto label60;

        $r56 = "GMT";
        $i84 = virtualinvoke $r56.<java.lang.String: int length()>();
        $z13 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, "GMT", 0, $i84);
        if $z13 == 0 goto label60;

        $r57 = "GMT";
        $i85 = virtualinvoke $r57.<java.lang.String: int length()>();
        $i86 = i0 + $i85;
        r5.<java.text.ParsePosition: int index> = $i86;
        $i87 = virtualinvoke r1.<java.lang.String: int length()>();
        $i88 = r5.<java.text.ParsePosition: int index>;
        $i89 = $i87 - $i88;
        if $i89 <= 0 goto label55;

        $i90 = r5.<java.text.ParsePosition: int index>;
        c91 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i90);
        if c91 != 43 goto label54;

        b78 = 1;
        goto label55;

     label54:
        if c91 != 45 goto label55;

        b78 = -1;

     label55:
        if b78 != 0 goto label57;

        $r58 = virtualinvoke r4.<java.text.CalendarBuilder: java.text.CalendarBuilder set(int,int)>(15, 0);
        virtualinvoke $r58.<java.text.CalendarBuilder: java.text.CalendarBuilder set(int,int)>(16, 0);
        $i92 = r5.<java.text.ParsePosition: int index>;

     label56:
        return $i92;

     label57:
        $i93 = r5.<java.text.ParsePosition: int index>;
        $i94 = $i93 + 1;
        r5.<java.text.ParsePosition: int index> = $i94;
        i95 = specialinvoke r0.<java.text.SimpleDateFormat: int subParseNumericZone(java.lang.String,int,int,int,boolean,java.text.CalendarBuilder)>(r1, $i94, b78, 0, 1, r4);
        if i95 <= 0 goto label59;

     label58:
        return i95;

     label59:
        $i97 = neg i95;
        r5.<java.text.ParsePosition: int index> = $i97;
        goto label66;

     label60:
        $i98 = r5.<java.text.ParsePosition: int index>;
        i99 = specialinvoke r0.<java.text.SimpleDateFormat: int subParseZoneString(java.lang.String,int,java.text.CalendarBuilder)>(r1, $i98, r4);
        if i99 <= 0 goto label62;

     label61:
        return i99;

     label62:
        $i101 = neg i99;
        r5.<java.text.ParsePosition: int index> = $i101;
        goto label66;

     label63:
        $i102 = r5.<java.text.ParsePosition: int index>;
        $i103 = $i102 + 1;
        r5.<java.text.ParsePosition: int index> = $i103;
        i104 = specialinvoke r0.<java.text.SimpleDateFormat: int subParseNumericZone(java.lang.String,int,int,int,boolean,java.text.CalendarBuilder)>(r1, $i103, b78, 0, 0, r4);
        if i104 <= 0 goto label65;

     label64:
        return i104;

     label65:
        $i106 = neg i104;
        r5.<java.text.ParsePosition: int index> = $i106;

     label66:
        goto label68;

     label67:
        $r62 := @caughtexception;
        r63 = $r62;

     label68:
        goto label85;

     label69:
        $i107 = virtualinvoke r1.<java.lang.String: int length()>();
        $i108 = r5.<java.text.ParsePosition: int index>;
        $i109 = $i107 - $i108;
        if $i109 > 0 goto label70;

        goto label85;

     label70:
        z14 = 0;
        $i110 = r5.<java.text.ParsePosition: int index>;
        c111 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i110);
        if c111 != 90 goto label71;

        $r64 = virtualinvoke r4.<java.text.CalendarBuilder: java.text.CalendarBuilder set(int,int)>(15, 0);
        virtualinvoke $r64.<java.text.CalendarBuilder: java.text.CalendarBuilder set(int,int)>(16, 0);
        $i112 = r5.<java.text.ParsePosition: int index>;
        $i113 = $i112 + 1;
        r5.<java.text.ParsePosition: int index> = $i113;
        return $i113;

     label71:
        if c111 != 43 goto label72;

        b114 = 1;
        goto label74;

     label72:
        if c111 != 45 goto label73;

        b114 = -1;
        goto label74;

     label73:
        $i115 = r5.<java.text.ParsePosition: int index>;
        $i116 = $i115 + 1;
        r5.<java.text.ParsePosition: int index> = $i116;
        goto label85;

     label74:
        $i117 = r5.<java.text.ParsePosition: int index>;
        $i118 = $i117 + 1;
        r5.<java.text.ParsePosition: int index> = $i118;
        $b120 = b114;
        if i2 != 3 goto label75;

        $z15 = 1;
        goto label76;

     label75:
        $z15 = 0;

     label76:
        i122 = specialinvoke r0.<java.text.SimpleDateFormat: int subParseNumericZone(java.lang.String,int,int,int,boolean,java.text.CalendarBuilder)>(r1, $i118, $b120, i2, $z15, r4);
        if i122 <= 0 goto label77;

        return i122;

     label77:
        $i123 = neg i122;
        r5.<java.text.ParsePosition: int index> = $i123;
        goto label85;

     label78:
        if z0 == 0 goto label80;

        $i124 = i0 + i2;
        $i125 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i124 <= $i125 goto label79;

        goto label85;

     label79:
        $r71 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;
        $i126 = i0 + i2;
        $r72 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i126);
        r73 = virtualinvoke $r71.<java.text.NumberFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>($r72, r5);
        goto label81;

     label80:
        $r74 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;
        r73 = virtualinvoke $r74.<java.text.NumberFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>(r1, r5);

     label81:
        if r73 == null goto label85;

        i127 = virtualinvoke r73.<java.lang.Number: int intValue()>();
        if z1 == 0 goto label84;

        if i127 >= 0 goto label84;

        $i128 = r5.<java.text.ParsePosition: int index>;
        $i129 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i128 >= $i129 goto label82;

        $i130 = r5.<java.text.ParsePosition: int index>;
        $c131 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i130);
        $c132 = r0.<java.text.SimpleDateFormat: char minusSign>;
        if $c131 != $c132 goto label83;

     label82:
        $i133 = r5.<java.text.ParsePosition: int index>;
        $i134 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i133 != $i134 goto label84;

        $i135 = r5.<java.text.ParsePosition: int index>;
        $i136 = $i135 - 1;
        $c137 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i136);
        $c138 = r0.<java.text.SimpleDateFormat: char minusSign>;
        if $c137 != $c138 goto label84;

     label83:
        i127 = neg i127;
        $i139 = r5.<java.text.ParsePosition: int index>;
        $i140 = $i139 - 1;
        r5.<java.text.ParsePosition: int index> = $i140;

     label84:
        virtualinvoke r4.<java.text.CalendarBuilder: java.text.CalendarBuilder set(int,int)>(i4, i127);
        $i141 = r5.<java.text.ParsePosition: int index>;
        return $i141;

     label85:
        $i142 = r5.<java.text.ParsePosition: int index>;
        r3.<java.text.ParsePosition: int errorIndex> = $i142;
        return -1;

        catch java.lang.IndexOutOfBoundsException from label50 to label56 with label67;
        catch java.lang.IndexOutOfBoundsException from label57 to label58 with label67;
        catch java.lang.IndexOutOfBoundsException from label59 to label61 with label67;
        catch java.lang.IndexOutOfBoundsException from label62 to label64 with label67;
        catch java.lang.IndexOutOfBoundsException from label65 to label66 with label67;
    }

    private final java.lang.String getCalendarName()
    {
        java.text.SimpleDateFormat r0;
        java.util.Calendar $r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: java.text.SimpleDateFormat;
        $r1 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();
        return $r3;
    }

    private boolean useDateFormatSymbols()
    {
        java.text.SimpleDateFormat r0;
        boolean $z0, $z1, $z2;
        java.util.Locale $r1;

        r0 := @this: java.text.SimpleDateFormat;
        $z0 = r0.<java.text.SimpleDateFormat: boolean useDateFormatSymbols>;
        if $z0 == 0 goto label0;

        return 1;

     label0:
        $z1 = specialinvoke r0.<java.text.SimpleDateFormat: boolean isGregorianCalendar()>();
        if $z1 != 0 goto label1;

        $r1 = r0.<java.text.SimpleDateFormat: java.util.Locale locale>;
        if $r1 != null goto label2;

     label1:
        $z2 = 1;
        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private boolean isGregorianCalendar()
    {
        java.text.SimpleDateFormat r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: java.text.SimpleDateFormat;
        $r1 = "java.util.GregorianCalendar";
        $r2 = specialinvoke r0.<java.text.SimpleDateFormat: java.lang.String getCalendarName()>();
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);
        return $z0;
    }

    private java.lang.String translatePattern(java.lang.String, java.lang.String, java.lang.String)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1, r2, r3, $r11, $r14;
        java.lang.StringBuilder $r4, r5, $r6, $r8, $r9, $r10;
        boolean z0;
        int i0, i2, $i3, $i4;
        char c1;
        java.lang.IllegalArgumentException $r7, $r13;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        r5 = $r4;
        z0 = 0;
        i0 = 0;

     label0:
        $i3 = virtualinvoke r1.<java.lang.String: int length()>();
        if i0 >= $i3 goto label7;

        c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);
        if z0 == 0 goto label1;

        if c1 != 39 goto label6;

        z0 = 0;
        goto label6;

     label1:
        if c1 != 39 goto label2;

        z0 = 1;
        goto label6;

     label2:
        if c1 < 97 goto label3;

        if c1 <= 122 goto label4;

     label3:
        if c1 < 65 goto label6;

        if c1 > 90 goto label6;

     label4:
        i2 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(c1);
        if i2 < 0 goto label5;

        $i4 = virtualinvoke r3.<java.lang.String: int length()>();
        if i2 >= $i4 goto label6;

        c1 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i2);
        goto label6;

     label5:
        $r7 = new java.lang.IllegalArgumentException;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal pattern  character \'");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);
        throw $r7;

     label6:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);
        i0 = i0 + 1;
        goto label0;

     label7:
        if z0 == 0 goto label8;

        $r13 = new java.lang.IllegalArgumentException;
        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unfinished quote in pattern");
        throw $r13;

     label8:
        $r14 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r14;
    }

    public java.lang.String toPattern()
    {
        java.text.SimpleDateFormat r0;
        java.lang.String $r1;

        r0 := @this: java.text.SimpleDateFormat;
        $r1 = r0.<java.text.SimpleDateFormat: java.lang.String pattern>;
        return $r1;
    }

    public java.lang.String toLocalizedPattern()
    {
        java.text.SimpleDateFormat r0;
        java.lang.String $r1, $r3, $r4;
        java.text.DateFormatSymbols $r2;

        r0 := @this: java.text.SimpleDateFormat;
        $r1 = r0.<java.text.SimpleDateFormat: java.lang.String pattern>;
        $r2 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        $r3 = virtualinvoke $r2.<java.text.DateFormatSymbols: java.lang.String getLocalPatternChars()>();
        $r4 = specialinvoke r0.<java.text.SimpleDateFormat: java.lang.String translatePattern(java.lang.String,java.lang.String,java.lang.String)>($r1, "GyMdkHmsSEDFwWahKzZYuX", $r3);
        return $r4;
    }

    public void applyPattern(java.lang.String)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1;
        char[] $r2;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.lang.String;
        $r2 = specialinvoke r0.<java.text.SimpleDateFormat: char[] compile(java.lang.String)>(r1);
        r0.<java.text.SimpleDateFormat: char[] compiledPattern> = $r2;
        r0.<java.text.SimpleDateFormat: java.lang.String pattern> = r1;
        return;
    }

    public void applyLocalizedPattern(java.lang.String)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1, r2, $r4;
        java.text.DateFormatSymbols $r3;
        char[] $r5;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.lang.String;
        $r3 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        $r4 = virtualinvoke $r3.<java.text.DateFormatSymbols: java.lang.String getLocalPatternChars()>();
        r2 = specialinvoke r0.<java.text.SimpleDateFormat: java.lang.String translatePattern(java.lang.String,java.lang.String,java.lang.String)>(r1, $r4, "GyMdkHmsSEDFwWahKzZYuX");
        $r5 = specialinvoke r0.<java.text.SimpleDateFormat: char[] compile(java.lang.String)>(r2);
        r0.<java.text.SimpleDateFormat: char[] compiledPattern> = $r5;
        r0.<java.text.SimpleDateFormat: java.lang.String pattern> = r2;
        return;
    }

    public java.text.DateFormatSymbols getDateFormatSymbols()
    {
        java.text.SimpleDateFormat r0;
        java.text.DateFormatSymbols $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.text.SimpleDateFormat;
        $r1 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        $r2 = virtualinvoke $r1.<java.text.DateFormatSymbols: java.lang.Object clone()>();
        $r3 = (java.text.DateFormatSymbols) $r2;
        return $r3;
    }

    public void setDateFormatSymbols(java.text.DateFormatSymbols)
    {
        java.text.SimpleDateFormat r0;
        java.text.DateFormatSymbols r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.text.DateFormatSymbols;
        $r2 = virtualinvoke r1.<java.text.DateFormatSymbols: java.lang.Object clone()>();
        $r3 = (java.text.DateFormatSymbols) $r2;
        r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData> = $r3;
        r0.<java.text.SimpleDateFormat: boolean useDateFormatSymbols> = 1;
        return;
    }

    public java.lang.Object clone()
    {
        java.text.SimpleDateFormat r0, r1;
        java.lang.Object $r2, $r4;
        java.text.DateFormatSymbols $r3, $r5;

        r0 := @this: java.text.SimpleDateFormat;
        $r2 = specialinvoke r0.<java.text.DateFormat: java.lang.Object clone()>();
        r1 = (java.text.SimpleDateFormat) $r2;
        $r3 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        $r4 = virtualinvoke $r3.<java.text.DateFormatSymbols: java.lang.Object clone()>();
        $r5 = (java.text.DateFormatSymbols) $r4;
        r1.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData> = $r5;
        return r1;
    }

    public int hashCode()
    {
        java.text.SimpleDateFormat r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: java.text.SimpleDateFormat;
        $r1 = r0.<java.text.SimpleDateFormat: java.lang.String pattern>;
        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();
        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.text.SimpleDateFormat r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r3, $r4;
        java.text.DateFormatSymbols $r5, $r6;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.lang.Object;
        $z0 = specialinvoke r0.<java.text.DateFormat: boolean equals(java.lang.Object)>(r1);
        if $z0 != 0 goto label0;

        return 0;

     label0:
        r2 = (java.text.SimpleDateFormat) r1;
        $r3 = r0.<java.text.SimpleDateFormat: java.lang.String pattern>;
        $r4 = r2.<java.text.SimpleDateFormat: java.lang.String pattern>;
        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);
        if $z1 == 0 goto label1;

        $r5 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        $r6 = r2.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;
        $z2 = virtualinvoke $r5.<java.text.DateFormatSymbols: boolean equals(java.lang.Object)>($r6);
        if $z2 == 0 goto label1;

        $z3 = 1;
        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.text.SimpleDateFormat r0;
        java.io.ObjectInputStream r1;
        java.lang.Exception r2, $r7;
        java.lang.String r3, $r5, $r11;
        java.util.TimeZone r4, r10;
        char[] $r6;
        java.io.InvalidObjectException $r8;
        int $i0;
        java.util.Date $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: java.text.SimpleDateFormat;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

     label0:
        $r5 = r0.<java.text.SimpleDateFormat: java.lang.String pattern>;
        $r6 = specialinvoke r0.<java.text.SimpleDateFormat: char[] compile(java.lang.String)>($r5);
        r0.<java.text.SimpleDateFormat: char[] compiledPattern> = $r6;

     label1:
        goto label3;

     label2:
        $r7 := @caughtexception;
        r2 = $r7;
        $r8 = new java.io.InvalidObjectException;
        specialinvoke $r8.<java.io.InvalidObjectException: void <init>(java.lang.String)>("invalid pattern");
        throw $r8;

     label3:
        $i0 = r0.<java.text.SimpleDateFormat: int serialVersionOnStream>;
        if $i0 >= 1 goto label4;

        specialinvoke r0.<java.text.SimpleDateFormat: void initializeDefaultCentury()>();
        goto label5;

     label4:
        $r9 = r0.<java.text.SimpleDateFormat: java.util.Date defaultCenturyStart>;
        specialinvoke r0.<java.text.SimpleDateFormat: void parseAmbiguousDatesAsAfter(java.util.Date)>($r9);

     label5:
        r0.<java.text.SimpleDateFormat: int serialVersionOnStream> = 1;
        r10 = virtualinvoke r0.<java.text.SimpleDateFormat: java.util.TimeZone getTimeZone()>();
        $z0 = r10 instanceof java.util.SimpleTimeZone;
        if $z0 == 0 goto label6;

        r3 = virtualinvoke r10.<java.util.TimeZone: java.lang.String getID()>();
        r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>(r3);
        if r4 == null goto label6;

        $z1 = virtualinvoke r4.<java.util.TimeZone: boolean hasSameRules(java.util.TimeZone)>(r10);
        if $z1 == 0 goto label6;

        $r11 = virtualinvoke r4.<java.util.TimeZone: java.lang.String getID()>();
        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r3);
        if $z2 == 0 goto label6;

        virtualinvoke r0.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>(r4);

     label6:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    private void checkNegativeNumberExpression()
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1, $r7;
        int i0, i1, $i2, $i3;
        java.text.NumberFormat $r2, $r3, $r4, $r5, $r8, $r11;
        boolean $z0, $z1, $z2;
        java.text.DecimalFormat $r6, $r9;
        java.text.DecimalFormatSymbols $r10;
        char $c4;

        r0 := @this: java.text.SimpleDateFormat;
        $r2 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;
        $z0 = $r2 instanceof java.text.DecimalFormat;
        if $z0 == 0 goto label2;

        $r3 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;
        $r4 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat originalNumberFormat>;
        $z1 = virtualinvoke $r3.<java.text.NumberFormat: boolean equals(java.lang.Object)>($r4);
        if $z1 != 0 goto label2;

        $r5 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;
        $r6 = (java.text.DecimalFormat) $r5;
        r1 = virtualinvoke $r6.<java.text.DecimalFormat: java.lang.String toPattern()>();
        $r7 = r0.<java.text.SimpleDateFormat: java.lang.String originalNumberPattern>;
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r7);
        if $z2 != 0 goto label1;

        r0.<java.text.SimpleDateFormat: boolean hasFollowingMinusSign> = 0;
        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(59);
        if i0 <= -1 goto label0;

        i1 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(45, i0);
        $i2 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(48);
        if i1 <= $i2 goto label0;

        $i3 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(35);
        if i1 <= $i3 goto label0;

        r0.<java.text.SimpleDateFormat: boolean hasFollowingMinusSign> = 1;
        $r8 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;
        $r9 = (java.text.DecimalFormat) $r8;
        $r10 = virtualinvoke $r9.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>();
        $c4 = virtualinvoke $r10.<java.text.DecimalFormatSymbols: char getMinusSign()>();
        r0.<java.text.SimpleDateFormat: char minusSign> = $c4;

     label0:
        r0.<java.text.SimpleDateFormat: java.lang.String originalNumberPattern> = r1;

     label1:
        $r11 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;
        r0.<java.text.SimpleDateFormat: java.text.NumberFormat originalNumberFormat> = $r11;

     label2:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentHashMap $r1, $r2;
        int[] $r3, $r4;
        java.text.DateFormat$Field[] $r5;
        java.text.DateFormat$Field $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        $r0 = class "java/text/SimpleDateFormat";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.text.SimpleDateFormat: boolean $assertionsDisabled> = $z1;
        $r1 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(3);
        <java.text.SimpleDateFormat: java.util.concurrent.ConcurrentMap cachedLocaleData> = $r1;
        $r2 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(3);
        <java.text.SimpleDateFormat: java.util.concurrent.ConcurrentMap cachedNumberFormatData> = $r2;
        $r3 = newarray (int)[22];
        $r3[0] = 0;
        $r3[1] = 1;
        $r3[2] = 2;
        $r3[3] = 5;
        $r3[4] = 11;
        $r3[5] = 11;
        $r3[6] = 12;
        $r3[7] = 13;
        $r3[8] = 14;
        $r3[9] = 7;
        $r3[10] = 6;
        $r3[11] = 8;
        $r3[12] = 3;
        $r3[13] = 4;
        $r3[14] = 9;
        $r3[15] = 10;
        $r3[16] = 10;
        $r3[17] = 15;
        $r3[18] = 15;
        $r3[19] = 17;
        $r3[20] = 1000;
        $r3[21] = 15;
        <java.text.SimpleDateFormat: int[] PATTERN_INDEX_TO_CALENDAR_FIELD> = $r3;
        $r4 = newarray (int)[22];
        $r4[0] = 0;
        $r4[1] = 1;
        $r4[2] = 2;
        $r4[3] = 3;
        $r4[4] = 4;
        $r4[5] = 5;
        $r4[6] = 6;
        $r4[7] = 7;
        $r4[8] = 8;
        $r4[9] = 9;
        $r4[10] = 10;
        $r4[11] = 11;
        $r4[12] = 12;
        $r4[13] = 13;
        $r4[14] = 14;
        $r4[15] = 15;
        $r4[16] = 16;
        $r4[17] = 17;
        $r4[18] = 17;
        $r4[19] = 1;
        $r4[20] = 9;
        $r4[21] = 17;
        <java.text.SimpleDateFormat: int[] PATTERN_INDEX_TO_DATE_FORMAT_FIELD> = $r4;
        $r5 = newarray (java.text.DateFormat$Field)[22];
        $r6 = <java.text.DateFormat$Field: java.text.DateFormat$Field ERA>;
        $r5[0] = $r6;
        $r7 = <java.text.DateFormat$Field: java.text.DateFormat$Field YEAR>;
        $r5[1] = $r7;
        $r8 = <java.text.DateFormat$Field: java.text.DateFormat$Field MONTH>;
        $r5[2] = $r8;
        $r9 = <java.text.DateFormat$Field: java.text.DateFormat$Field DAY_OF_MONTH>;
        $r5[3] = $r9;
        $r10 = <java.text.DateFormat$Field: java.text.DateFormat$Field HOUR_OF_DAY1>;
        $r5[4] = $r10;
        $r11 = <java.text.DateFormat$Field: java.text.DateFormat$Field HOUR_OF_DAY0>;
        $r5[5] = $r11;
        $r12 = <java.text.DateFormat$Field: java.text.DateFormat$Field MINUTE>;
        $r5[6] = $r12;
        $r13 = <java.text.DateFormat$Field: java.text.DateFormat$Field SECOND>;
        $r5[7] = $r13;
        $r14 = <java.text.DateFormat$Field: java.text.DateFormat$Field MILLISECOND>;
        $r5[8] = $r14;
        $r15 = <java.text.DateFormat$Field: java.text.DateFormat$Field DAY_OF_WEEK>;
        $r5[9] = $r15;
        $r16 = <java.text.DateFormat$Field: java.text.DateFormat$Field DAY_OF_YEAR>;
        $r5[10] = $r16;
        $r17 = <java.text.DateFormat$Field: java.text.DateFormat$Field DAY_OF_WEEK_IN_MONTH>;
        $r5[11] = $r17;
        $r18 = <java.text.DateFormat$Field: java.text.DateFormat$Field WEEK_OF_YEAR>;
        $r5[12] = $r18;
        $r19 = <java.text.DateFormat$Field: java.text.DateFormat$Field WEEK_OF_MONTH>;
        $r5[13] = $r19;
        $r20 = <java.text.DateFormat$Field: java.text.DateFormat$Field AM_PM>;
        $r5[14] = $r20;
        $r21 = <java.text.DateFormat$Field: java.text.DateFormat$Field HOUR1>;
        $r5[15] = $r21;
        $r22 = <java.text.DateFormat$Field: java.text.DateFormat$Field HOUR0>;
        $r5[16] = $r22;
        $r23 = <java.text.DateFormat$Field: java.text.DateFormat$Field TIME_ZONE>;
        $r5[17] = $r23;
        $r24 = <java.text.DateFormat$Field: java.text.DateFormat$Field TIME_ZONE>;
        $r5[18] = $r24;
        $r25 = <java.text.DateFormat$Field: java.text.DateFormat$Field YEAR>;
        $r5[19] = $r25;
        $r26 = <java.text.DateFormat$Field: java.text.DateFormat$Field DAY_OF_WEEK>;
        $r5[20] = $r26;
        $r27 = <java.text.DateFormat$Field: java.text.DateFormat$Field TIME_ZONE>;
        $r5[21] = $r27;
        <java.text.SimpleDateFormat: java.text.DateFormat$Field[] PATTERN_INDEX_TO_DATE_FORMAT_FIELD_ID> = $r5;
        return;
    }
}
