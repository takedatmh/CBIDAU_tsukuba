public class org.apache.tomcat.util.threads.TaskQueue extends java.util.concurrent.LinkedBlockingQueue
{
    private static final long serialVersionUID;
    private org.apache.tomcat.util.threads.ThreadPoolExecutor parent;
    private java.lang.Integer forcedRemainingCapacity;

    public void <init>()
    {
        org.apache.tomcat.util.threads.TaskQueue r0;

        r0 := @this: org.apache.tomcat.util.threads.TaskQueue;
        specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();
        r0.<org.apache.tomcat.util.threads.TaskQueue: org.apache.tomcat.util.threads.ThreadPoolExecutor parent> = null;
        r0.<org.apache.tomcat.util.threads.TaskQueue: java.lang.Integer forcedRemainingCapacity> = null;
        return;
    }

    public void <init>(int)
    {
        org.apache.tomcat.util.threads.TaskQueue r0;
        int i0;

        r0 := @this: org.apache.tomcat.util.threads.TaskQueue;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(i0);
        r0.<org.apache.tomcat.util.threads.TaskQueue: org.apache.tomcat.util.threads.ThreadPoolExecutor parent> = null;
        r0.<org.apache.tomcat.util.threads.TaskQueue: java.lang.Integer forcedRemainingCapacity> = null;
        return;
    }

    public void <init>(java.util.Collection)
    {
        org.apache.tomcat.util.threads.TaskQueue r0;
        java.util.Collection r1;

        r0 := @this: org.apache.tomcat.util.threads.TaskQueue;
        r1 := @parameter0: java.util.Collection;
        specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: void <init>(java.util.Collection)>(r1);
        r0.<org.apache.tomcat.util.threads.TaskQueue: org.apache.tomcat.util.threads.ThreadPoolExecutor parent> = null;
        r0.<org.apache.tomcat.util.threads.TaskQueue: java.lang.Integer forcedRemainingCapacity> = null;
        return;
    }

    public void setParent(org.apache.tomcat.util.threads.ThreadPoolExecutor)
    {
        org.apache.tomcat.util.threads.TaskQueue r0;
        org.apache.tomcat.util.threads.ThreadPoolExecutor r1;

        r0 := @this: org.apache.tomcat.util.threads.TaskQueue;
        r1 := @parameter0: org.apache.tomcat.util.threads.ThreadPoolExecutor;
        r0.<org.apache.tomcat.util.threads.TaskQueue: org.apache.tomcat.util.threads.ThreadPoolExecutor parent> = r1;
        return;
    }

    public boolean force(java.lang.Runnable)
    {
        org.apache.tomcat.util.threads.TaskQueue r0;
        java.lang.Runnable r1;
        org.apache.tomcat.util.threads.ThreadPoolExecutor $r2;
        boolean $z0, $z1;
        java.util.concurrent.RejectedExecutionException $r3;

        r0 := @this: org.apache.tomcat.util.threads.TaskQueue;
        r1 := @parameter0: java.lang.Runnable;
        $r2 = r0.<org.apache.tomcat.util.threads.TaskQueue: org.apache.tomcat.util.threads.ThreadPoolExecutor parent>;
        $z0 = virtualinvoke $r2.<org.apache.tomcat.util.threads.ThreadPoolExecutor: boolean isShutdown()>();
        if $z0 == 0 goto label0;

        $r3 = new java.util.concurrent.RejectedExecutionException;
        specialinvoke $r3.<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String)>("Executor not running, can\'t force a command into the queue");
        throw $r3;

     label0:
        $z1 = specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: boolean offer(java.lang.Object)>(r1);
        return $z1;
    }

    public boolean force(java.lang.Runnable, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        org.apache.tomcat.util.threads.TaskQueue r0;
        java.lang.Runnable r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        org.apache.tomcat.util.threads.ThreadPoolExecutor $r3;
        boolean $z0, $z1;
        java.util.concurrent.RejectedExecutionException $r4;

        r0 := @this: org.apache.tomcat.util.threads.TaskQueue;
        r1 := @parameter0: java.lang.Runnable;
        l0 := @parameter1: long;
        r2 := @parameter2: java.util.concurrent.TimeUnit;
        $r3 = r0.<org.apache.tomcat.util.threads.TaskQueue: org.apache.tomcat.util.threads.ThreadPoolExecutor parent>;
        $z0 = virtualinvoke $r3.<org.apache.tomcat.util.threads.ThreadPoolExecutor: boolean isShutdown()>();
        if $z0 == 0 goto label0;

        $r4 = new java.util.concurrent.RejectedExecutionException;
        specialinvoke $r4.<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String)>("Executor not running, can\'t force a command into the queue");
        throw $r4;

     label0:
        $z1 = specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>(r1, l0, r2);
        return $z1;
    }

    public boolean offer(java.lang.Runnable)
    {
        org.apache.tomcat.util.threads.TaskQueue r0;
        java.lang.Runnable r1;
        org.apache.tomcat.util.threads.ThreadPoolExecutor $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.tomcat.util.threads.TaskQueue;
        r1 := @parameter0: java.lang.Runnable;
        $r2 = r0.<org.apache.tomcat.util.threads.TaskQueue: org.apache.tomcat.util.threads.ThreadPoolExecutor parent>;
        if $r2 != null goto label0;

        $z0 = specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: boolean offer(java.lang.Object)>(r1);
        return $z0;

     label0:
        $r3 = r0.<org.apache.tomcat.util.threads.TaskQueue: org.apache.tomcat.util.threads.ThreadPoolExecutor parent>;
        $i0 = virtualinvoke $r3.<org.apache.tomcat.util.threads.ThreadPoolExecutor: int getPoolSize()>();
        $r4 = r0.<org.apache.tomcat.util.threads.TaskQueue: org.apache.tomcat.util.threads.ThreadPoolExecutor parent>;
        $i1 = virtualinvoke $r4.<org.apache.tomcat.util.threads.ThreadPoolExecutor: int getMaximumPoolSize()>();
        if $i0 != $i1 goto label1;

        $z1 = specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: boolean offer(java.lang.Object)>(r1);
        return $z1;

     label1:
        $r5 = r0.<org.apache.tomcat.util.threads.TaskQueue: org.apache.tomcat.util.threads.ThreadPoolExecutor parent>;
        $i2 = virtualinvoke $r5.<org.apache.tomcat.util.threads.ThreadPoolExecutor: int getSubmittedCount()>();
        $r6 = r0.<org.apache.tomcat.util.threads.TaskQueue: org.apache.tomcat.util.threads.ThreadPoolExecutor parent>;
        $i3 = virtualinvoke $r6.<org.apache.tomcat.util.threads.ThreadPoolExecutor: int getPoolSize()>();
        if $i2 > $i3 goto label2;

        $z2 = specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: boolean offer(java.lang.Object)>(r1);
        return $z2;

     label2:
        $r7 = r0.<org.apache.tomcat.util.threads.TaskQueue: org.apache.tomcat.util.threads.ThreadPoolExecutor parent>;
        $i4 = virtualinvoke $r7.<org.apache.tomcat.util.threads.ThreadPoolExecutor: int getPoolSize()>();
        $r8 = r0.<org.apache.tomcat.util.threads.TaskQueue: org.apache.tomcat.util.threads.ThreadPoolExecutor parent>;
        $i5 = virtualinvoke $r8.<org.apache.tomcat.util.threads.ThreadPoolExecutor: int getMaximumPoolSize()>();
        if $i4 >= $i5 goto label3;

        return 0;

     label3:
        $z3 = specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: boolean offer(java.lang.Object)>(r1);
        return $z3;
    }

    public java.lang.Runnable poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        org.apache.tomcat.util.threads.TaskQueue r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        java.lang.Runnable r2;
        java.lang.Object $r3;
        org.apache.tomcat.util.threads.ThreadPoolExecutor $r4, $r5;

        r0 := @this: org.apache.tomcat.util.threads.TaskQueue;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.concurrent.TimeUnit;
        $r3 = specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>(l0, r1);
        r2 = (java.lang.Runnable) $r3;
        if r2 != null goto label0;

        $r4 = r0.<org.apache.tomcat.util.threads.TaskQueue: org.apache.tomcat.util.threads.ThreadPoolExecutor parent>;
        if $r4 == null goto label0;

        $r5 = r0.<org.apache.tomcat.util.threads.TaskQueue: org.apache.tomcat.util.threads.ThreadPoolExecutor parent>;
        virtualinvoke $r5.<org.apache.tomcat.util.threads.ThreadPoolExecutor: void stopCurrentThreadIfNeeded()>();

     label0:
        return r2;
    }

    public java.lang.Runnable take() throws java.lang.InterruptedException
    {
        org.apache.tomcat.util.threads.TaskQueue r0;
        java.util.concurrent.TimeUnit $r1, $r2;
        org.apache.tomcat.util.threads.ThreadPoolExecutor $r3, $r4, $r5;
        boolean $z0;
        long $l0;
        java.lang.Runnable $r6, $r8;
        java.lang.Object $r7;

        r0 := @this: org.apache.tomcat.util.threads.TaskQueue;
        $r3 = r0.<org.apache.tomcat.util.threads.TaskQueue: org.apache.tomcat.util.threads.ThreadPoolExecutor parent>;
        if $r3 == null goto label0;

        $r4 = r0.<org.apache.tomcat.util.threads.TaskQueue: org.apache.tomcat.util.threads.ThreadPoolExecutor parent>;
        $z0 = virtualinvoke $r4.<org.apache.tomcat.util.threads.ThreadPoolExecutor: boolean currentThreadShouldBeStopped()>();
        if $z0 == 0 goto label0;

        $r5 = r0.<org.apache.tomcat.util.threads.TaskQueue: org.apache.tomcat.util.threads.ThreadPoolExecutor parent>;
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
        $l0 = virtualinvoke $r5.<org.apache.tomcat.util.threads.ThreadPoolExecutor: long getKeepAliveTime(java.util.concurrent.TimeUnit)>($r1);
        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
        $r6 = virtualinvoke r0.<org.apache.tomcat.util.threads.TaskQueue: java.lang.Runnable poll(long,java.util.concurrent.TimeUnit)>($l0, $r2);
        return $r6;

     label0:
        $r7 = specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: java.lang.Object take()>();
        $r8 = (java.lang.Runnable) $r7;
        return $r8;
    }

    public int remainingCapacity()
    {
        org.apache.tomcat.util.threads.TaskQueue r0;
        java.lang.Integer $r1, $r2;
        int $i0, $i1;

        r0 := @this: org.apache.tomcat.util.threads.TaskQueue;
        $r1 = r0.<org.apache.tomcat.util.threads.TaskQueue: java.lang.Integer forcedRemainingCapacity>;
        if $r1 == null goto label0;

        $r2 = r0.<org.apache.tomcat.util.threads.TaskQueue: java.lang.Integer forcedRemainingCapacity>;
        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();
        return $i0;

     label0:
        $i1 = specialinvoke r0.<java.util.concurrent.LinkedBlockingQueue: int remainingCapacity()>();
        return $i1;
    }

    public void setForcedRemainingCapacity(java.lang.Integer)
    {
        org.apache.tomcat.util.threads.TaskQueue r0;
        java.lang.Integer r1;

        r0 := @this: org.apache.tomcat.util.threads.TaskQueue;
        r1 := @parameter0: java.lang.Integer;
        r0.<org.apache.tomcat.util.threads.TaskQueue: java.lang.Integer forcedRemainingCapacity> = r1;
        return;
    }

    public volatile java.lang.Object poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        org.apache.tomcat.util.threads.TaskQueue r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        java.lang.Runnable $r2;

        r0 := @this: org.apache.tomcat.util.threads.TaskQueue;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.concurrent.TimeUnit;
        $r2 = virtualinvoke r0.<org.apache.tomcat.util.threads.TaskQueue: java.lang.Runnable poll(long,java.util.concurrent.TimeUnit)>(l0, r1);
        return $r2;
    }

    public volatile java.lang.Object take() throws java.lang.InterruptedException
    {
        org.apache.tomcat.util.threads.TaskQueue r0;
        java.lang.Runnable $r1;

        r0 := @this: org.apache.tomcat.util.threads.TaskQueue;
        $r1 = virtualinvoke r0.<org.apache.tomcat.util.threads.TaskQueue: java.lang.Runnable take()>();
        return $r1;
    }

    public volatile boolean offer(java.lang.Object)
    {
        org.apache.tomcat.util.threads.TaskQueue r0;
        java.lang.Object r1;
        java.lang.Runnable $r2;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.threads.TaskQueue;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.lang.Runnable) r1;
        $z0 = virtualinvoke r0.<org.apache.tomcat.util.threads.TaskQueue: boolean offer(java.lang.Runnable)>($r2);
        return $z0;
    }
}
