class java.lang.ClassValue$ClassValueMap extends java.util.WeakHashMap
{
    private final java.lang.Class type;
    private java.lang.ClassValue$Entry[] cacheArray;
    private int cacheLoad;
    private int cacheLoadLimit;
    private static final int INITIAL_ENTRIES;
    private static final int CACHE_LOAD_LIMIT;
    private static final int PROBE_LIMIT;
    static final boolean $assertionsDisabled;

    void <init>(java.lang.Class)
    {
        java.lang.ClassValue$ClassValueMap r0;
        java.lang.Class r1;

        r0 := @this: java.lang.ClassValue$ClassValueMap;
        r1 := @parameter0: java.lang.Class;
        specialinvoke r0.<java.util.WeakHashMap: void <init>()>();
        r0.<java.lang.ClassValue$ClassValueMap: java.lang.Class type> = r1;
        specialinvoke r0.<java.lang.ClassValue$ClassValueMap: void sizeCache(int)>(32);
        return;
    }

    java.lang.ClassValue$Entry[] getCache()
    {
        java.lang.ClassValue$ClassValueMap r0;
        java.lang.ClassValue$Entry[] $r1;

        r0 := @this: java.lang.ClassValue$ClassValueMap;
        $r1 = r0.<java.lang.ClassValue$ClassValueMap: java.lang.ClassValue$Entry[] cacheArray>;
        return $r1;
    }

    synchronized java.lang.ClassValue$Entry startEntry(java.lang.ClassValue)
    {
        java.lang.ClassValue$ClassValueMap r0;
        java.lang.ClassValue r1;
        java.lang.ClassValue$Entry r2, r6;
        java.lang.ClassValue$Version r3, $r9, $r12;
        java.lang.ClassValue$Identity $r4, $r7, $r10, $r13;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: java.lang.ClassValue$ClassValueMap;
        r1 := @parameter0: java.lang.ClassValue;
        $r4 = r1.<java.lang.ClassValue: java.lang.ClassValue$Identity identity>;
        $r5 = virtualinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.Object get(java.lang.Object)>($r4);
        r2 = (java.lang.ClassValue$Entry) $r5;
        r3 = virtualinvoke r1.<java.lang.ClassValue: java.lang.ClassValue$Version version()>();
        if r2 != null goto label0;

        r6 = virtualinvoke r3.<java.lang.ClassValue$Version: java.lang.ClassValue$Entry promise()>();
        $r7 = r1.<java.lang.ClassValue: java.lang.ClassValue$Identity identity>;
        virtualinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r6);
        return r6;

     label0:
        $z0 = virtualinvoke r2.<java.lang.ClassValue$Entry: boolean isPromise()>();
        if $z0 == 0 goto label2;

        $r9 = virtualinvoke r2.<java.lang.ClassValue$Entry: java.lang.ClassValue$Version version()>();
        if $r9 == r3 goto label1;

        r2 = virtualinvoke r3.<java.lang.ClassValue$Version: java.lang.ClassValue$Entry promise()>();
        $r10 = r1.<java.lang.ClassValue: java.lang.ClassValue$Identity identity>;
        virtualinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r2);

     label1:
        return r2;

     label2:
        $r12 = virtualinvoke r2.<java.lang.ClassValue$Entry: java.lang.ClassValue$Version version()>();
        if $r12 == r3 goto label3;

        r2 = virtualinvoke r2.<java.lang.ClassValue$Entry: java.lang.ClassValue$Entry refreshVersion(java.lang.ClassValue$Version)>(r3);
        $r13 = r1.<java.lang.ClassValue: java.lang.ClassValue$Identity identity>;
        virtualinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r2);

     label3:
        specialinvoke r0.<java.lang.ClassValue$ClassValueMap: void checkCacheLoad()>();
        specialinvoke r0.<java.lang.ClassValue$ClassValueMap: void addToCache(java.lang.ClassValue,java.lang.ClassValue$Entry)>(r1, r2);
        return r2;
    }

    synchronized java.lang.ClassValue$Entry finishEntry(java.lang.ClassValue, java.lang.ClassValue$Entry)
    {
        java.lang.ClassValue$ClassValueMap r0;
        java.lang.ClassValue r1;
        java.lang.ClassValue$Entry r2, r3;
        java.lang.ClassValue$Version r4, $r10, $r11, $r12;
        java.lang.ClassValue$Identity $r5, $r8, $r13;
        java.lang.Object $r6;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r7;

        r0 := @this: java.lang.ClassValue$ClassValueMap;
        r1 := @parameter0: java.lang.ClassValue;
        r2 := @parameter1: java.lang.ClassValue$Entry;
        $r5 = r1.<java.lang.ClassValue: java.lang.ClassValue$Identity identity>;
        $r6 = virtualinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.Object get(java.lang.Object)>($r5);
        r3 = (java.lang.ClassValue$Entry) $r6;
        if r2 != r3 goto label1;

        $z0 = <java.lang.ClassValue$ClassValueMap: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r2.<java.lang.ClassValue$Entry: boolean isPromise()>();
        if $z1 != 0 goto label0;

        $r7 = new java.lang.AssertionError;
        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();
        throw $r7;

     label0:
        $r8 = r1.<java.lang.ClassValue: java.lang.ClassValue$Identity identity>;
        virtualinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.Object remove(java.lang.Object)>($r8);
        return null;

     label1:
        if r3 == null goto label3;

        $z2 = virtualinvoke r3.<java.lang.ClassValue$Entry: boolean isPromise()>();
        if $z2 == 0 goto label3;

        $r10 = virtualinvoke r3.<java.lang.ClassValue$Entry: java.lang.ClassValue$Version version()>();
        $r11 = virtualinvoke r2.<java.lang.ClassValue$Entry: java.lang.ClassValue$Version version()>();
        if $r10 != $r11 goto label3;

        r4 = virtualinvoke r1.<java.lang.ClassValue: java.lang.ClassValue$Version version()>();
        $r12 = virtualinvoke r2.<java.lang.ClassValue$Entry: java.lang.ClassValue$Version version()>();
        if $r12 == r4 goto label2;

        r2 = virtualinvoke r2.<java.lang.ClassValue$Entry: java.lang.ClassValue$Entry refreshVersion(java.lang.ClassValue$Version)>(r4);

     label2:
        $r13 = r1.<java.lang.ClassValue: java.lang.ClassValue$Identity identity>;
        virtualinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r2);
        specialinvoke r0.<java.lang.ClassValue$ClassValueMap: void checkCacheLoad()>();
        specialinvoke r0.<java.lang.ClassValue$ClassValueMap: void addToCache(java.lang.ClassValue,java.lang.ClassValue$Entry)>(r1, r2);
        return r2;

     label3:
        return null;
    }

    synchronized void removeEntry(java.lang.ClassValue)
    {
        java.lang.ClassValue$ClassValueMap r0;
        java.lang.ClassValue r1;
        java.lang.ClassValue$Entry r2;
        java.lang.ClassValue$Identity $r3, $r5;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: java.lang.ClassValue$ClassValueMap;
        r1 := @parameter0: java.lang.ClassValue;
        $r3 = r1.<java.lang.ClassValue: java.lang.ClassValue$Identity identity>;
        $r4 = virtualinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.Object remove(java.lang.Object)>($r3);
        r2 = (java.lang.ClassValue$Entry) $r4;
        if r2 != null goto label0;

        goto label2;

     label0:
        $z0 = virtualinvoke r2.<java.lang.ClassValue$Entry: boolean isPromise()>();
        if $z0 == 0 goto label1;

        $r5 = r1.<java.lang.ClassValue: java.lang.ClassValue$Identity identity>;
        virtualinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r2);
        goto label2;

     label1:
        virtualinvoke r1.<java.lang.ClassValue: void bumpVersion()>();
        specialinvoke r0.<java.lang.ClassValue$ClassValueMap: void removeStaleEntries(java.lang.ClassValue)>(r1);

     label2:
        return;
    }

    synchronized void changeEntry(java.lang.ClassValue, java.lang.Object)
    {
        java.lang.ClassValue$ClassValueMap r0;
        java.lang.ClassValue r1;
        java.lang.Object r2, $r7, $r9;
        java.lang.ClassValue$Entry r3, r5;
        java.lang.ClassValue$Version r4, $r8;
        java.lang.ClassValue$Identity $r6, $r10;

        r0 := @this: java.lang.ClassValue$ClassValueMap;
        r1 := @parameter0: java.lang.ClassValue;
        r2 := @parameter1: java.lang.Object;
        $r6 = r1.<java.lang.ClassValue: java.lang.ClassValue$Identity identity>;
        $r7 = virtualinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.Object get(java.lang.Object)>($r6);
        r3 = (java.lang.ClassValue$Entry) $r7;
        r4 = virtualinvoke r1.<java.lang.ClassValue: java.lang.ClassValue$Version version()>();
        if r3 == null goto label1;

        $r8 = virtualinvoke r3.<java.lang.ClassValue$Entry: java.lang.ClassValue$Version version()>();
        if $r8 != r4 goto label0;

        $r9 = virtualinvoke r3.<java.lang.ClassValue$Entry: java.lang.Object value()>();
        if $r9 != r2 goto label0;

        return;

     label0:
        virtualinvoke r1.<java.lang.ClassValue: void bumpVersion()>();
        specialinvoke r0.<java.lang.ClassValue$ClassValueMap: void removeStaleEntries(java.lang.ClassValue)>(r1);

     label1:
        r5 = staticinvoke <java.lang.ClassValue: java.lang.ClassValue$Entry makeEntry(java.lang.ClassValue$Version,java.lang.Object)>(r4, r2);
        $r10 = r1.<java.lang.ClassValue: java.lang.ClassValue$Identity identity>;
        virtualinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r5);
        specialinvoke r0.<java.lang.ClassValue$ClassValueMap: void checkCacheLoad()>();
        specialinvoke r0.<java.lang.ClassValue$ClassValueMap: void addToCache(java.lang.ClassValue,java.lang.ClassValue$Entry)>(r1, r5);
        return;
    }

    static java.lang.ClassValue$Entry loadFromCache(java.lang.ClassValue$Entry[], int)
    {
        java.lang.ClassValue$Entry[] r0;
        int i0, $i1, $i2, $i3;
        java.lang.ClassValue$Entry $r1;

        r0 := @parameter0: java.lang.ClassValue$Entry[];
        i0 := @parameter1: int;
        $i1 = lengthof r0;
        $i2 = $i1 - 1;
        $i3 = i0 & $i2;
        $r1 = r0[$i3];
        return $r1;
    }

    static java.lang.ClassValue$Entry probeHomeLocation(java.lang.ClassValue$Entry[], java.lang.ClassValue)
    {
        java.lang.ClassValue$Entry[] r0;
        java.lang.ClassValue r1;
        int $i0;
        java.lang.ClassValue$Entry $r2, $r3;

        r0 := @parameter0: java.lang.ClassValue$Entry[];
        r1 := @parameter1: java.lang.ClassValue;
        $i0 = r1.<java.lang.ClassValue: int hashCodeForCache>;
        $r2 = staticinvoke <java.lang.ClassValue$ClassValueMap: java.lang.ClassValue$Entry loadFromCache(java.lang.ClassValue$Entry[],int)>(r0, $i0);
        $r3 = virtualinvoke r1.<java.lang.ClassValue: java.lang.ClassValue$Entry castEntry(java.lang.ClassValue$Entry)>($r2);
        return $r3;
    }

    static java.lang.ClassValue$Entry probeBackupLocations(java.lang.ClassValue$Entry[], java.lang.ClassValue)
    {
        java.lang.ClassValue$Entry[] r0;
        java.lang.ClassValue r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.ClassValue$Entry r2, r3, $r4, $r6, $r7;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.ClassValue$Entry[];
        r1 := @parameter1: java.lang.ClassValue;
        $i4 = lengthof r0;
        i0 = $i4 - 1;
        $i5 = r1.<java.lang.ClassValue: int hashCodeForCache>;
        i1 = $i5 & i0;
        r2 = r0[i1];
        if r2 != null goto label0;

        return null;

     label0:
        i2 = -1;
        i3 = i1 + 1;

     label1:
        $i6 = i1 + 6;
        if i3 >= $i6 goto label9;

        $i7 = i3 & i0;
        r3 = r0[$i7];
        if r3 != null goto label2;

        goto label9;

     label2:
        $z0 = virtualinvoke r1.<java.lang.ClassValue: boolean match(java.lang.ClassValue$Entry)>(r3);
        if $z0 == 0 goto label7;

        r0[i1] = r3;
        if i2 < 0 goto label3;

        $i8 = i3 & i0;
        $r4 = <java.lang.ClassValue$Entry: java.lang.ClassValue$Entry DEAD_ENTRY>;
        r0[$i8] = $r4;
        goto label4;

     label3:
        i2 = i3;

     label4:
        $i9 = i2 & i0;
        $i10 = staticinvoke <java.lang.ClassValue$ClassValueMap: int entryDislocation(java.lang.ClassValue$Entry[],int,java.lang.ClassValue$Entry)>(r0, i2, r2);
        if $i10 >= 6 goto label5;

        $r6 = r2;
        goto label6;

     label5:
        $r6 = <java.lang.ClassValue$Entry: java.lang.ClassValue$Entry DEAD_ENTRY>;

     label6:
        r0[$i9] = $r6;
        $r7 = virtualinvoke r1.<java.lang.ClassValue: java.lang.ClassValue$Entry castEntry(java.lang.ClassValue$Entry)>(r3);
        return $r7;

     label7:
        $z1 = virtualinvoke r3.<java.lang.ClassValue$Entry: boolean isLive()>();
        if $z1 != 0 goto label8;

        if i2 >= 0 goto label8;

        i2 = i3;

     label8:
        i3 = i3 + 1;
        goto label1;

     label9:
        return null;
    }

    private static int entryDislocation(java.lang.ClassValue$Entry[], int, java.lang.ClassValue$Entry)
    {
        java.lang.ClassValue$Entry[] r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.ClassValue$Entry r1;
        java.lang.ClassValue r2;

        r0 := @parameter0: java.lang.ClassValue$Entry[];
        i0 := @parameter1: int;
        r1 := @parameter2: java.lang.ClassValue$Entry;
        r2 = virtualinvoke r1.<java.lang.ClassValue$Entry: java.lang.ClassValue classValueOrNull()>();
        if r2 != null goto label0;

        return 0;

     label0:
        $i2 = lengthof r0;
        i1 = $i2 - 1;
        $i3 = r2.<java.lang.ClassValue: int hashCodeForCache>;
        $i4 = i0 - $i3;
        $i5 = $i4 & i1;
        return $i5;
    }

    private void sizeCache(int)
    {
        java.lang.ClassValue$ClassValueMap r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.AssertionError $r1;
        double $d0, $d1, $d2;
        java.lang.ClassValue$Entry[] $r2;

        r0 := @this: java.lang.ClassValue$ClassValueMap;
        i0 := @parameter0: int;
        $z0 = <java.lang.ClassValue$ClassValueMap: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $i1 = i0 - 1;
        $i2 = i0 & $i1;
        if $i2 == 0 goto label0;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label0:
        r0.<java.lang.ClassValue$ClassValueMap: int cacheLoad> = 0;
        $d0 = (double) i0;
        $d1 = $d0 * 67.0;
        $d2 = $d1 / 100.0;
        $i3 = (int) $d2;
        r0.<java.lang.ClassValue$ClassValueMap: int cacheLoadLimit> = $i3;
        $r2 = newarray (java.lang.ClassValue$Entry)[i0];
        r0.<java.lang.ClassValue$ClassValueMap: java.lang.ClassValue$Entry[] cacheArray> = $r2;
        return;
    }

    private void checkCacheLoad()
    {
        java.lang.ClassValue$ClassValueMap r0;
        int $i0, $i1;

        r0 := @this: java.lang.ClassValue$ClassValueMap;
        $i0 = r0.<java.lang.ClassValue$ClassValueMap: int cacheLoad>;
        $i1 = r0.<java.lang.ClassValue$ClassValueMap: int cacheLoadLimit>;
        if $i0 < $i1 goto label0;

        specialinvoke r0.<java.lang.ClassValue$ClassValueMap: void reduceCacheLoad()>();

     label0:
        return;
    }

    private void reduceCacheLoad()
    {
        java.lang.ClassValue$ClassValueMap r0;
        java.lang.ClassValue$Entry[] r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.ClassValue$Entry r3;
        boolean $z0;

        r0 := @this: java.lang.ClassValue$ClassValueMap;
        specialinvoke r0.<java.lang.ClassValue$ClassValueMap: void removeStaleEntries()>();
        $i2 = r0.<java.lang.ClassValue$ClassValueMap: int cacheLoad>;
        $i3 = r0.<java.lang.ClassValue$ClassValueMap: int cacheLoadLimit>;
        if $i2 >= $i3 goto label0;

        return;

     label0:
        r1 = virtualinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.ClassValue$Entry[] getCache()>();
        $i4 = lengthof r1;
        if $i4 <= 1073741823 goto label1;

        return;

     label1:
        $i5 = lengthof r1;
        $i6 = $i5 * 2;
        specialinvoke r0.<java.lang.ClassValue$ClassValueMap: void sizeCache(int)>($i6);
        r2 = r1;
        i0 = lengthof r2;
        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r3 = r2[i1];
        if r3 == null goto label3;

        $z0 = virtualinvoke r3.<java.lang.ClassValue$Entry: boolean isLive()>();
        if $z0 == 0 goto label3;

        specialinvoke r0.<java.lang.ClassValue$ClassValueMap: void addToCache(java.lang.ClassValue$Entry)>(r3);

     label3:
        i1 = i1 + 1;
        goto label2;

     label4:
        return;
    }

    private void removeStaleEntries(java.lang.ClassValue$Entry[], int, int)
    {
        java.lang.ClassValue$ClassValueMap r0;
        java.lang.ClassValue$Entry[] r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.ClassValue$Entry r2, r3;
        null_type n0;
        boolean $z0;

        r0 := @this: java.lang.ClassValue$ClassValueMap;
        r1 := @parameter0: java.lang.ClassValue$Entry[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i5 = lengthof r1;
        i2 = $i5 - 1;
        i3 = 0;
        i4 = i0;

     label0:
        $i6 = i0 + i1;
        if i4 >= $i6 goto label3;

        $i7 = i4 & i2;
        r2 = r1[$i7];
        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<java.lang.ClassValue$Entry: boolean isLive()>();
        if $z0 == 0 goto label1;

        goto label2;

     label1:
        n0 = null;
        r3 = specialinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.ClassValue$Entry findReplacement(java.lang.ClassValue$Entry[],int)>(r1, i4);
        $i8 = i4 & i2;
        r1[$i8] = r3;
        if r3 != null goto label2;

        i3 = i3 + 1;

     label2:
        i4 = i4 + 1;
        goto label0;

     label3:
        $i9 = r0.<java.lang.ClassValue$ClassValueMap: int cacheLoad>;
        $i10 = $i9 - i3;
        $i11 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i10);
        r0.<java.lang.ClassValue$ClassValueMap: int cacheLoad> = $i11;
        return;
    }

    private java.lang.ClassValue$Entry findReplacement(java.lang.ClassValue$Entry[], int)
    {
        java.lang.ClassValue$ClassValueMap r0;
        java.lang.ClassValue$Entry[] r1;
        int i0, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.ClassValue$Entry r2, r3, $r4, $r5;
        byte b1;
        boolean $z0;

        r0 := @this: java.lang.ClassValue$ClassValueMap;
        r1 := @parameter0: java.lang.ClassValue$Entry[];
        i0 := @parameter1: int;
        r2 = null;
        b1 = -1;
        i2 = 0;
        $i7 = lengthof r1;
        i3 = $i7 - 1;
        i4 = i0 + 1;

     label0:
        $i8 = i0 + 6;
        if i4 >= $i8 goto label6;

        $i9 = i4 & i3;
        r3 = r1[$i9];
        if r3 != null goto label1;

        goto label6;

     label1:
        $z0 = virtualinvoke r3.<java.lang.ClassValue$Entry: boolean isLive()>();
        if $z0 != 0 goto label2;

        goto label5;

     label2:
        i5 = staticinvoke <java.lang.ClassValue$ClassValueMap: int entryDislocation(java.lang.ClassValue$Entry[],int,java.lang.ClassValue$Entry)>(r1, i4, r3);
        if i5 != 0 goto label3;

        goto label5;

     label3:
        i6 = i4 - i5;
        if i6 > i0 goto label5;

        if i6 != i0 goto label4;

        b1 = 1;
        i2 = i4;
        r2 = r3;
        goto label5;

     label4:
        if b1 > 0 goto label5;

        b1 = 0;
        i2 = i4;
        r2 = r3;

     label5:
        i4 = i4 + 1;
        goto label0;

     label6:
        if b1 < 0 goto label8;

        $i10 = i2 + 1;
        $i11 = $i10 & i3;
        $r4 = r1[$i11];
        if $r4 == null goto label7;

        $i12 = i2 & i3;
        $r5 = <java.lang.ClassValue$Entry: java.lang.ClassValue$Entry DEAD_ENTRY>;
        r1[$i12] = $r5;
        goto label8;

     label7:
        $i13 = i2 & i3;
        r1[$i13] = null;
        $i14 = r0.<java.lang.ClassValue$ClassValueMap: int cacheLoad>;
        $i15 = $i14 - 1;
        r0.<java.lang.ClassValue$ClassValueMap: int cacheLoad> = $i15;

     label8:
        return r2;
    }

    private void removeStaleEntries(java.lang.ClassValue)
    {
        java.lang.ClassValue$ClassValueMap r0;
        java.lang.ClassValue r1;
        java.lang.ClassValue$Entry[] $r2;
        int $i0;

        r0 := @this: java.lang.ClassValue$ClassValueMap;
        r1 := @parameter0: java.lang.ClassValue;
        $r2 = virtualinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.ClassValue$Entry[] getCache()>();
        $i0 = r1.<java.lang.ClassValue: int hashCodeForCache>;
        specialinvoke r0.<java.lang.ClassValue$ClassValueMap: void removeStaleEntries(java.lang.ClassValue$Entry[],int,int)>($r2, $i0, 6);
        return;
    }

    private void removeStaleEntries()
    {
        java.lang.ClassValue$ClassValueMap r0;
        java.lang.ClassValue$Entry[] r1;
        int $i0, $i1, $i2;

        r0 := @this: java.lang.ClassValue$ClassValueMap;
        r1 = virtualinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.ClassValue$Entry[] getCache()>();
        $i0 = lengthof r1;
        $i1 = $i0 + 6;
        $i2 = $i1 - 1;
        specialinvoke r0.<java.lang.ClassValue$ClassValueMap: void removeStaleEntries(java.lang.ClassValue$Entry[],int,int)>(r1, 0, $i2);
        return;
    }

    private void addToCache(java.lang.ClassValue$Entry)
    {
        java.lang.ClassValue$ClassValueMap r0;
        java.lang.ClassValue$Entry r1;
        java.lang.ClassValue r2;

        r0 := @this: java.lang.ClassValue$ClassValueMap;
        r1 := @parameter0: java.lang.ClassValue$Entry;
        r2 = virtualinvoke r1.<java.lang.ClassValue$Entry: java.lang.ClassValue classValueOrNull()>();
        if r2 == null goto label0;

        specialinvoke r0.<java.lang.ClassValue$ClassValueMap: void addToCache(java.lang.ClassValue,java.lang.ClassValue$Entry)>(r2, r1);

     label0:
        return;
    }

    private void addToCache(java.lang.ClassValue, java.lang.ClassValue$Entry)
    {
        java.lang.ClassValue$ClassValueMap r0;
        java.lang.ClassValue r1;
        java.lang.ClassValue$Entry r2, r4, $r5;
        java.lang.ClassValue$Entry[] r3;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8;

        r0 := @this: java.lang.ClassValue$ClassValueMap;
        r1 := @parameter0: java.lang.ClassValue;
        r2 := @parameter1: java.lang.ClassValue$Entry;
        r3 = virtualinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.ClassValue$Entry[] getCache()>();
        $i5 = lengthof r3;
        i0 = $i5 - 1;
        $i6 = r1.<java.lang.ClassValue: int hashCodeForCache>;
        i1 = $i6 & i0;
        r4 = specialinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.ClassValue$Entry placeInCache(java.lang.ClassValue$Entry[],int,java.lang.ClassValue$Entry,boolean)>(r3, i1, r2, 0);
        if r4 != null goto label0;

        return;

     label0:
        i2 = staticinvoke <java.lang.ClassValue$ClassValueMap: int entryDislocation(java.lang.ClassValue$Entry[],int,java.lang.ClassValue$Entry)>(r3, i1, r4);
        i3 = i1 - i2;
        i4 = i3;

     label1:
        $i7 = i3 + 6;
        if i4 >= $i7 goto label3;

        $i8 = i4 & i0;
        $r5 = specialinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.ClassValue$Entry placeInCache(java.lang.ClassValue$Entry[],int,java.lang.ClassValue$Entry,boolean)>(r3, $i8, r4, 1);
        if $r5 != null goto label2;

        return;

     label2:
        i4 = i4 + 1;
        goto label1;

     label3:
        return;
    }

    private java.lang.ClassValue$Entry placeInCache(java.lang.ClassValue$Entry[], int, java.lang.ClassValue$Entry, boolean)
    {
        java.lang.ClassValue$ClassValueMap r0;
        java.lang.ClassValue$Entry[] r1;
        int i0;
        java.lang.ClassValue$Entry r2, r3, $r4;
        boolean z0;

        r0 := @this: java.lang.ClassValue$ClassValueMap;
        r1 := @parameter0: java.lang.ClassValue$Entry[];
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.ClassValue$Entry;
        z0 := @parameter3: boolean;
        $r4 = r1[i0];
        r3 = specialinvoke r0.<java.lang.ClassValue$ClassValueMap: java.lang.ClassValue$Entry overwrittenEntry(java.lang.ClassValue$Entry)>($r4);
        if z0 == 0 goto label0;

        if r3 == null goto label0;

        return r2;

     label0:
        r1[i0] = r2;
        return r3;
    }

    private java.lang.ClassValue$Entry overwrittenEntry(java.lang.ClassValue$Entry)
    {
        java.lang.ClassValue$ClassValueMap r0;
        java.lang.ClassValue$Entry r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.lang.ClassValue$ClassValueMap;
        r1 := @parameter0: java.lang.ClassValue$Entry;
        if r1 != null goto label0;

        $i0 = r0.<java.lang.ClassValue$ClassValueMap: int cacheLoad>;
        $i1 = $i0 + 1;
        r0.<java.lang.ClassValue$ClassValueMap: int cacheLoad> = $i1;
        goto label1;

     label0:
        $z0 = virtualinvoke r1.<java.lang.ClassValue$Entry: boolean isLive()>();
        if $z0 == 0 goto label1;

        return r1;

     label1:
        return null;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/lang/ClassValue";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.lang.ClassValue$ClassValueMap: boolean $assertionsDisabled> = $z1;
        return;
    }
}
