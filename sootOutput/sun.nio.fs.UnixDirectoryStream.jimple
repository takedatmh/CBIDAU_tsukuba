class sun.nio.fs.UnixDirectoryStream extends java.lang.Object implements java.nio.file.DirectoryStream
{
    private final sun.nio.fs.UnixPath dir;
    private final long dp;
    private final java.nio.file.DirectoryStream$Filter filter;
    private final java.util.concurrent.locks.ReentrantReadWriteLock streamLock;
    private volatile boolean isClosed;
    private java.util.Iterator iterator;

    void <init>(sun.nio.fs.UnixPath, long, java.nio.file.DirectoryStream$Filter)
    {
        sun.nio.fs.UnixDirectoryStream r0;
        sun.nio.fs.UnixPath r1;
        long l0;
        java.nio.file.DirectoryStream$Filter r2;
        java.util.concurrent.locks.ReentrantReadWriteLock $r3;

        r0 := @this: sun.nio.fs.UnixDirectoryStream;
        r1 := @parameter0: sun.nio.fs.UnixPath;
        l0 := @parameter1: long;
        r2 := @parameter2: java.nio.file.DirectoryStream$Filter;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r3 = new java.util.concurrent.locks.ReentrantReadWriteLock;
        specialinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>(1);
        r0.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.ReentrantReadWriteLock streamLock> = $r3;
        r0.<sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath dir> = r1;
        r0.<sun.nio.fs.UnixDirectoryStream: long dp> = l0;
        r0.<sun.nio.fs.UnixDirectoryStream: java.nio.file.DirectoryStream$Filter filter> = r2;
        return;
    }

    protected final sun.nio.fs.UnixPath directory()
    {
        sun.nio.fs.UnixDirectoryStream r0;
        sun.nio.fs.UnixPath $r1;

        r0 := @this: sun.nio.fs.UnixDirectoryStream;
        $r1 = r0.<sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath dir>;
        return $r1;
    }

    protected final java.util.concurrent.locks.Lock readLock()
    {
        sun.nio.fs.UnixDirectoryStream r0;
        java.util.concurrent.locks.ReentrantReadWriteLock $r1;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r2;

        r0 := @this: sun.nio.fs.UnixDirectoryStream;
        $r1 = r0.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.ReentrantReadWriteLock streamLock>;
        $r2 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();
        return $r2;
    }

    protected final java.util.concurrent.locks.Lock writeLock()
    {
        sun.nio.fs.UnixDirectoryStream r0;
        java.util.concurrent.locks.ReentrantReadWriteLock $r1;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r2;

        r0 := @this: sun.nio.fs.UnixDirectoryStream;
        $r1 = r0.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.ReentrantReadWriteLock streamLock>;
        $r2 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();
        return $r2;
    }

    protected final boolean isOpen()
    {
        sun.nio.fs.UnixDirectoryStream r0;
        boolean $z0, $z1;

        r0 := @this: sun.nio.fs.UnixDirectoryStream;
        $z0 = r0.<sun.nio.fs.UnixDirectoryStream: boolean isClosed>;
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    protected final boolean closeImpl() throws java.io.IOException
    {
        sun.nio.fs.UnixDirectoryStream r0;
        sun.nio.fs.UnixException r1, $r2;
        boolean $z0;
        long $l0;
        java.io.IOException $r3;
        java.lang.String $r4;

        r0 := @this: sun.nio.fs.UnixDirectoryStream;
        $z0 = r0.<sun.nio.fs.UnixDirectoryStream: boolean isClosed>;
        if $z0 != 0 goto label4;

        r0.<sun.nio.fs.UnixDirectoryStream: boolean isClosed> = 1;

     label0:
        $l0 = r0.<sun.nio.fs.UnixDirectoryStream: long dp>;
        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void closedir(long)>($l0);

     label1:
        goto label3;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;
        $r3 = new java.io.IOException;
        $r4 = virtualinvoke r1.<sun.nio.fs.UnixException: java.lang.String errorString()>();
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r4);
        throw $r3;

     label3:
        return 1;

     label4:
        return 0;

        catch sun.nio.fs.UnixException from label0 to label1 with label2;
    }

    public void close() throws java.io.IOException
    {
        sun.nio.fs.UnixDirectoryStream r0;
        java.lang.Throwable r1, $r4;
        java.util.concurrent.locks.Lock $r2, $r3, $r5;

        r0 := @this: sun.nio.fs.UnixDirectoryStream;
        $r2 = virtualinvoke r0.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        virtualinvoke r0.<sun.nio.fs.UnixDirectoryStream: boolean closeImpl()>();

     label1:
        $r3 = virtualinvoke r0.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();
        goto label5;

     label2:
        $r4 := @caughtexception;

     label3:
        r1 = $r4;

     label4:
        $r5 = virtualinvoke r0.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock writeLock()>();
        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    protected final java.util.Iterator iterator(java.nio.file.DirectoryStream)
    {
        sun.nio.fs.UnixDirectoryStream r0, r2;
        java.nio.file.DirectoryStream r1;
        java.lang.Throwable r3, $r10;
        boolean $z0;
        java.lang.IllegalStateException $r4, $r7;
        java.util.Iterator $r6, $r9;
        sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator $r8;

        r0 := @this: sun.nio.fs.UnixDirectoryStream;
        r1 := @parameter0: java.nio.file.DirectoryStream;
        $z0 = r0.<sun.nio.fs.UnixDirectoryStream: boolean isClosed>;
        if $z0 == 0 goto label0;

        $r4 = new java.lang.IllegalStateException;
        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Directory stream is closed");
        throw $r4;

     label0:
        r2 = r0;
        entermonitor r0;

     label1:
        $r6 = r0.<sun.nio.fs.UnixDirectoryStream: java.util.Iterator iterator>;
        if $r6 == null goto label2;

        $r7 = new java.lang.IllegalStateException;
        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Iterator already obtained");
        throw $r7;

     label2:
        $r8 = new sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator;
        specialinvoke $r8.<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: void <init>(sun.nio.fs.UnixDirectoryStream,java.nio.file.DirectoryStream)>(r0, r1);
        r0.<sun.nio.fs.UnixDirectoryStream: java.util.Iterator iterator> = $r8;
        $r9 = r0.<sun.nio.fs.UnixDirectoryStream: java.util.Iterator iterator>;
        exitmonitor r2;

     label3:
        return $r9;

     label4:
        $r10 := @caughtexception;

     label5:
        r3 = $r10;
        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.util.Iterator iterator()
    {
        sun.nio.fs.UnixDirectoryStream r0;
        java.util.Iterator $r1;

        r0 := @this: sun.nio.fs.UnixDirectoryStream;
        $r1 = virtualinvoke r0.<sun.nio.fs.UnixDirectoryStream: java.util.Iterator iterator(java.nio.file.DirectoryStream)>(r0);
        return $r1;
    }

    static long access$000(sun.nio.fs.UnixDirectoryStream)
    {
        sun.nio.fs.UnixDirectoryStream r0;
        long $l0;

        r0 := @parameter0: sun.nio.fs.UnixDirectoryStream;
        $l0 = r0.<sun.nio.fs.UnixDirectoryStream: long dp>;
        return $l0;
    }

    static sun.nio.fs.UnixPath access$100(sun.nio.fs.UnixDirectoryStream)
    {
        sun.nio.fs.UnixDirectoryStream r0;
        sun.nio.fs.UnixPath $r1;

        r0 := @parameter0: sun.nio.fs.UnixDirectoryStream;
        $r1 = r0.<sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath dir>;
        return $r1;
    }

    static java.nio.file.DirectoryStream$Filter access$200(sun.nio.fs.UnixDirectoryStream)
    {
        sun.nio.fs.UnixDirectoryStream r0;
        java.nio.file.DirectoryStream$Filter $r1;

        r0 := @parameter0: sun.nio.fs.UnixDirectoryStream;
        $r1 = r0.<sun.nio.fs.UnixDirectoryStream: java.nio.file.DirectoryStream$Filter filter>;
        return $r1;
    }
}
