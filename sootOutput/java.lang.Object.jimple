public class java.lang.Object
{

    public void <init>()
    {
        java.lang.Object r0;

        r0 := @this: java.lang.Object;
        return;
    }

    private static native void registerNatives();

    public final native java.lang.Class getClass();

    public native int hashCode();

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @this: java.lang.Object;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    protected native java.lang.Object clone() throws java.lang.CloneNotSupportedException;

    public java.lang.String toString()
    {
        java.lang.Object r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7;
        java.lang.Class $r2;
        java.lang.String $r3, $r6, $r8;
        int $i0;

        r0 := @this: java.lang.Object;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");
        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();
        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r8;
    }

    public final native void notify();

    public final native void notifyAll();

    public final native void wait(long) throws java.lang.InterruptedException;

    public final void wait(long, int) throws java.lang.InterruptedException
    {
        java.lang.Object r0;
        long l0;
        int i1;
        byte $b2, $b3;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @this: java.lang.Object;
        l0 := @parameter0: long;
        i1 := @parameter1: int;
        $b2 = l0 cmp 0L;
        if $b2 >= 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout value is negative");
        throw $r1;

     label0:
        if i1 < 0 goto label1;

        if i1 <= 999999 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("nanosecond timeout value out of range");
        throw $r2;

     label2:
        if i1 >= 500000 goto label3;

        if i1 == 0 goto label4;

        $b3 = l0 cmp 0L;
        if $b3 != 0 goto label4;

     label3:
        l0 = l0 + 1L;

     label4:
        virtualinvoke r0.<java.lang.Object: void wait(long)>(l0);
        return;
    }

    public final void wait() throws java.lang.InterruptedException
    {
        java.lang.Object r0;

        r0 := @this: java.lang.Object;
        virtualinvoke r0.<java.lang.Object: void wait(long)>(0L);
        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        java.lang.Object r0;

        r0 := @this: java.lang.Object;
        return;
    }

    static void <clinit>()
    {
        staticinvoke <java.lang.Object: void registerNatives()>();
        return;
    }
}
