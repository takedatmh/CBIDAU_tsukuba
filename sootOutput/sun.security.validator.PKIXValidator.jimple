public final class sun.security.validator.PKIXValidator extends sun.security.validator.Validator
{
    private static final boolean checkTLSRevocation;
    private static final boolean TRY_VALIDATOR;
    private final java.util.Set trustedCerts;
    private final java.security.cert.PKIXBuilderParameters parameterTemplate;
    private int certPathLength;
    private final java.util.Map trustedSubjects;
    private final java.security.cert.CertificateFactory factory;
    private final boolean plugin;

    void <init>(java.lang.String, java.util.Collection)
    {
        sun.security.validator.PKIXValidator r0;
        java.lang.String r1, $r19, $r21;
        java.util.Collection r2;
        java.util.HashSet r3, $r9, $r10;
        java.util.Iterator r4, r23;
        java.security.cert.X509Certificate r5, r25;
        javax.security.auth.x500.X500Principal r6;
        java.util.List r7;
        boolean $z0, $z1, $z3, $z4, $z6;
        java.util.Set $r8;
        java.lang.Object $r11, $r24, $r28;
        java.security.cert.TrustAnchor $r12;
        java.security.cert.PKIXBuilderParameters $r13;
        java.security.InvalidAlgorithmParameterException $r14, r15;
        java.lang.RuntimeException $r16, $r36;
        java.lang.StringBuilder $r17, $r18, $r20;
        java.util.HashMap $r22;
        java.util.Map $r26, $r27, $r30;
        java.util.ArrayList $r29;
        java.security.PublicKey $r32;
        java.security.cert.CertificateFactory $r33;
        java.security.cert.CertificateException $r34, r35;

        r0 := @this: sun.security.validator.PKIXValidator;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.util.Collection;
        specialinvoke r0.<sun.security.validator.Validator: void <init>(java.lang.String,java.lang.String)>("PKIX", r1);
        r0.<sun.security.validator.PKIXValidator: int certPathLength> = -1;
        $z0 = r2 instanceof java.util.Set;
        if $z0 == 0 goto label0;

        $r8 = (java.util.Set) r2;
        r0.<sun.security.validator.PKIXValidator: java.util.Set trustedCerts> = $r8;
        goto label1;

     label0:
        $r9 = new java.util.HashSet;
        specialinvoke $r9.<java.util.HashSet: void <init>(java.util.Collection)>(r2);
        r0.<sun.security.validator.PKIXValidator: java.util.Set trustedCerts> = $r9;

     label1:
        $r10 = new java.util.HashSet;
        specialinvoke $r10.<java.util.HashSet: void <init>()>();
        r3 = $r10;
        r4 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label3;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.security.cert.X509Certificate) $r11;
        $r12 = new java.security.cert.TrustAnchor;
        specialinvoke $r12.<java.security.cert.TrustAnchor: void <init>(java.security.cert.X509Certificate,byte[])>(r5, null);
        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r12);
        goto label2;

     label3:
        $r13 = new java.security.cert.PKIXBuilderParameters;
        specialinvoke $r13.<java.security.cert.PKIXBuilderParameters: void <init>(java.util.Set,java.security.cert.CertSelector)>(r3, null);
        r0.<sun.security.validator.PKIXValidator: java.security.cert.PKIXBuilderParameters parameterTemplate> = $r13;

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;
        r15 = $r14;
        $r16 = new java.lang.RuntimeException;
        $r17 = new java.lang.StringBuilder;
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected error: ");
        $r19 = virtualinvoke r15.<java.security.InvalidAlgorithmParameterException: java.lang.String toString()>();
        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r21, r15);
        throw $r16;

     label6:
        specialinvoke r0.<sun.security.validator.PKIXValidator: void setDefaultParameters(java.lang.String)>(r1);
        $r22 = new java.util.HashMap;
        specialinvoke $r22.<java.util.HashMap: void <init>()>();
        r0.<sun.security.validator.PKIXValidator: java.util.Map trustedSubjects> = $r22;
        r23 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label7:
        $z3 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();
        if $z3 == 0 goto label10;

        $r24 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();
        r25 = (java.security.cert.X509Certificate) $r24;
        r6 = virtualinvoke r25.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();
        $r26 = r0.<sun.security.validator.PKIXValidator: java.util.Map trustedSubjects>;
        $z4 = interfaceinvoke $r26.<java.util.Map: boolean containsKey(java.lang.Object)>(r6);
        if $z4 == 0 goto label8;

        $r27 = r0.<sun.security.validator.PKIXValidator: java.util.Map trustedSubjects>;
        $r28 = interfaceinvoke $r27.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);
        r7 = (java.util.List) $r28;
        goto label9;

     label8:
        $r29 = new java.util.ArrayList;
        specialinvoke $r29.<java.util.ArrayList: void <init>()>();
        r7 = $r29;
        $r30 = r0.<sun.security.validator.PKIXValidator: java.util.Map trustedSubjects>;
        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7);

     label9:
        $r32 = virtualinvoke r25.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();
        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>($r32);
        goto label7;

     label10:
        $r33 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");
        r0.<sun.security.validator.PKIXValidator: java.security.cert.CertificateFactory factory> = $r33;

     label11:
        goto label13;

     label12:
        $r34 := @caughtexception;
        r35 = $r34;
        $r36 = new java.lang.RuntimeException;
        specialinvoke $r36.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Internal error", r35);
        throw $r36;

     label13:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("plugin code signing");
        r0.<sun.security.validator.PKIXValidator: boolean plugin> = $z6;
        return;

        catch java.security.InvalidAlgorithmParameterException from label3 to label4 with label5;
        catch java.security.cert.CertificateException from label10 to label11 with label12;
    }

    void <init>(java.lang.String, java.security.cert.PKIXBuilderParameters)
    {
        sun.security.validator.PKIXValidator r0;
        java.lang.String r1;
        java.security.cert.PKIXBuilderParameters r2;
        java.util.Iterator r3, r13;
        java.security.cert.TrustAnchor r4;
        java.security.cert.X509Certificate r5, r15;
        java.util.List r6;
        java.util.HashSet $r7;
        java.util.Set $r8, $r10, $r12;
        boolean $z0, $z2, $z3, $z5;
        java.lang.Object $r9, $r14, $r19;
        java.util.HashMap $r11;
        javax.security.auth.x500.X500Principal r16;
        java.util.Map $r17, $r18, $r21;
        java.util.ArrayList $r20;
        java.security.PublicKey $r23;
        java.security.cert.CertificateFactory $r24;
        java.security.cert.CertificateException $r25, r26;
        java.lang.RuntimeException $r27;

        r0 := @this: sun.security.validator.PKIXValidator;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.security.cert.PKIXBuilderParameters;
        specialinvoke r0.<sun.security.validator.Validator: void <init>(java.lang.String,java.lang.String)>("PKIX", r1);
        r0.<sun.security.validator.PKIXValidator: int certPathLength> = -1;
        $r7 = new java.util.HashSet;
        specialinvoke $r7.<java.util.HashSet: void <init>()>();
        r0.<sun.security.validator.PKIXValidator: java.util.Set trustedCerts> = $r7;
        $r8 = virtualinvoke r2.<java.security.cert.PKIXBuilderParameters: java.util.Set getTrustAnchors()>();
        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.security.cert.TrustAnchor) $r9;
        r5 = virtualinvoke r4.<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>();
        if r5 == null goto label1;

        $r10 = r0.<sun.security.validator.PKIXValidator: java.util.Set trustedCerts>;
        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r5);

     label1:
        goto label0;

     label2:
        r0.<sun.security.validator.PKIXValidator: java.security.cert.PKIXBuilderParameters parameterTemplate> = r2;
        $r11 = new java.util.HashMap;
        specialinvoke $r11.<java.util.HashMap: void <init>()>();
        r0.<sun.security.validator.PKIXValidator: java.util.Map trustedSubjects> = $r11;
        $r12 = r0.<sun.security.validator.PKIXValidator: java.util.Set trustedCerts>;
        r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label6;

        $r14 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();
        r15 = (java.security.cert.X509Certificate) $r14;
        r16 = virtualinvoke r15.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();
        $r17 = r0.<sun.security.validator.PKIXValidator: java.util.Map trustedSubjects>;
        $z3 = interfaceinvoke $r17.<java.util.Map: boolean containsKey(java.lang.Object)>(r16);
        if $z3 == 0 goto label4;

        $r18 = r0.<sun.security.validator.PKIXValidator: java.util.Map trustedSubjects>;
        $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16);
        r6 = (java.util.List) $r19;
        goto label5;

     label4:
        $r20 = new java.util.ArrayList;
        specialinvoke $r20.<java.util.ArrayList: void <init>()>();
        r6 = $r20;
        $r21 = r0.<sun.security.validator.PKIXValidator: java.util.Map trustedSubjects>;
        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r16, r6);

     label5:
        $r23 = virtualinvoke r15.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();
        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r23);
        goto label3;

     label6:
        $r24 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");
        r0.<sun.security.validator.PKIXValidator: java.security.cert.CertificateFactory factory> = $r24;

     label7:
        goto label9;

     label8:
        $r25 := @caughtexception;
        r26 = $r25;
        $r27 = new java.lang.RuntimeException;
        specialinvoke $r27.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Internal error", r26);
        throw $r27;

     label9:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("plugin code signing");
        r0.<sun.security.validator.PKIXValidator: boolean plugin> = $z5;
        return;

        catch java.security.cert.CertificateException from label6 to label7 with label8;
    }

    public java.util.Collection getTrustedCertificates()
    {
        sun.security.validator.PKIXValidator r0;
        java.util.Set $r1;

        r0 := @this: sun.security.validator.PKIXValidator;
        $r1 = r0.<sun.security.validator.PKIXValidator: java.util.Set trustedCerts>;
        return $r1;
    }

    public int getCertPathLength()
    {
        sun.security.validator.PKIXValidator r0;
        int $i0;

        r0 := @this: sun.security.validator.PKIXValidator;
        $i0 = r0.<sun.security.validator.PKIXValidator: int certPathLength>;
        return $i0;
    }

    private void setDefaultParameters(java.lang.String)
    {
        sun.security.validator.PKIXValidator r0;
        java.lang.String r1;
        java.security.cert.PKIXBuilderParameters $r2, $r3;
        boolean $z0;

        r0 := @this: sun.security.validator.PKIXValidator;
        r1 := @parameter0: java.lang.String;
        if r1 == "tls server" goto label0;

        if r1 != "tls client" goto label1;

     label0:
        $r2 = r0.<sun.security.validator.PKIXValidator: java.security.cert.PKIXBuilderParameters parameterTemplate>;
        $z0 = <sun.security.validator.PKIXValidator: boolean checkTLSRevocation>;
        virtualinvoke $r2.<java.security.cert.PKIXBuilderParameters: void setRevocationEnabled(boolean)>($z0);
        goto label2;

     label1:
        $r3 = r0.<sun.security.validator.PKIXValidator: java.security.cert.PKIXBuilderParameters parameterTemplate>;
        virtualinvoke $r3.<java.security.cert.PKIXBuilderParameters: void setRevocationEnabled(boolean)>(0);

     label2:
        return;
    }

    public java.security.cert.PKIXBuilderParameters getParameters()
    {
        sun.security.validator.PKIXValidator r0;
        java.security.cert.PKIXBuilderParameters $r1;

        r0 := @this: sun.security.validator.PKIXValidator;
        $r1 = r0.<sun.security.validator.PKIXValidator: java.security.cert.PKIXBuilderParameters parameterTemplate>;
        return $r1;
    }

    java.security.cert.X509Certificate[] engineValidate(java.security.cert.X509Certificate[], java.util.Collection, java.security.AlgorithmConstraints, java.lang.Object) throws java.security.cert.CertificateException
    {
        sun.security.validator.PKIXValidator r0;
        java.security.cert.X509Certificate[] r1, r9, $r16, $r23, $r25, $r33, r34, $r43;
        java.util.Collection r2;
        java.security.AlgorithmConstraints r3;
        java.lang.Object r4, $r13, $r20, $r31, $r42;
        java.security.cert.PKIXBuilderParameters r5, $r12;
        null_type n0;
        javax.security.auth.x500.X500Principal r6, r8, r27;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.security.cert.X509Certificate r7, $r24, r26, $r36;
        java.security.InvalidAlgorithmParameterException r10, $r38;
        java.security.cert.CertificateException $r11, $r39;
        sun.security.provider.certpath.AlgorithmChecker $r14, r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Set $r17, $r37;
        java.util.Map $r18, $r19, $r29, $r30;
        java.util.List $r21, $r32;
        java.security.PublicKey $r22;
        java.security.cert.TrustAnchor $r35;
        sun.security.validator.ValidatorException $r41;

        r0 := @this: sun.security.validator.PKIXValidator;
        r1 := @parameter0: java.security.cert.X509Certificate[];
        r2 := @parameter1: java.util.Collection;
        r3 := @parameter2: java.security.AlgorithmConstraints;
        r4 := @parameter3: java.lang.Object;
        if r1 == null goto label0;

        $i1 = lengthof r1;
        if $i1 != 0 goto label1;

     label0:
        $r11 = new java.security.cert.CertificateException;
        specialinvoke $r11.<java.security.cert.CertificateException: void <init>(java.lang.String)>("null or zero-length certificate chain");
        throw $r11;

     label1:
        $r12 = r0.<sun.security.validator.PKIXValidator: java.security.cert.PKIXBuilderParameters parameterTemplate>;
        $r13 = virtualinvoke $r12.<java.security.cert.PKIXBuilderParameters: java.lang.Object clone()>();
        r5 = (java.security.cert.PKIXBuilderParameters) $r13;
        n0 = null;
        if r3 == null goto label2;

        $r14 = new sun.security.provider.certpath.AlgorithmChecker;
        specialinvoke $r14.<sun.security.provider.certpath.AlgorithmChecker: void <init>(java.security.AlgorithmConstraints)>(r3);
        r15 = $r14;
        virtualinvoke r5.<java.security.cert.PKIXBuilderParameters: void addCertPathChecker(java.security.cert.PKIXCertPathChecker)>(r15);

     label2:
        r6 = null;
        i0 = 0;

     label3:
        $i2 = lengthof r1;
        if i0 >= $i2 goto label8;

        r7 = r1[i0];
        r8 = virtualinvoke r7.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();
        if i0 == 0 goto label4;

        $z0 = virtualinvoke r8.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>(r6);
        if $z0 != 0 goto label4;

        $r16 = specialinvoke r0.<sun.security.validator.PKIXValidator: java.security.cert.X509Certificate[] doBuild(java.security.cert.X509Certificate[],java.util.Collection,java.security.cert.PKIXBuilderParameters)>(r1, r2, r5);
        return $r16;

     label4:
        $r17 = r0.<sun.security.validator.PKIXValidator: java.util.Set trustedCerts>;
        $z1 = interfaceinvoke $r17.<java.util.Set: boolean contains(java.lang.Object)>(r7);
        if $z1 != 0 goto label5;

        $r18 = r0.<sun.security.validator.PKIXValidator: java.util.Map trustedSubjects>;
        $z2 = interfaceinvoke $r18.<java.util.Map: boolean containsKey(java.lang.Object)>(r8);
        if $z2 == 0 goto label7;

        $r19 = r0.<sun.security.validator.PKIXValidator: java.util.Map trustedSubjects>;
        $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);
        $r21 = (java.util.List) $r20;
        $r22 = virtualinvoke r7.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();
        $z3 = interfaceinvoke $r21.<java.util.List: boolean contains(java.lang.Object)>($r22);
        if $z3 == 0 goto label7;

     label5:
        if i0 != 0 goto label6;

        $r23 = newarray (java.security.cert.X509Certificate)[1];
        $r24 = r1[0];
        $r23[0] = $r24;
        return $r23;

     label6:
        r9 = newarray (java.security.cert.X509Certificate)[i0];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r9, 0, i0);
        $r25 = specialinvoke r0.<sun.security.validator.PKIXValidator: java.security.cert.X509Certificate[] doValidate(java.security.cert.X509Certificate[],java.security.cert.PKIXBuilderParameters)>(r9, r5);
        return $r25;

     label7:
        r6 = virtualinvoke r7.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();
        i0 = i0 + 1;
        goto label3;

     label8:
        $i3 = lengthof r1;
        $i4 = $i3 - 1;
        r26 = r1[$i4];
        r27 = virtualinvoke r26.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();
        virtualinvoke r26.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();
        $r29 = r0.<sun.security.validator.PKIXValidator: java.util.Map trustedSubjects>;
        $z4 = interfaceinvoke $r29.<java.util.Map: boolean containsKey(java.lang.Object)>(r27);
        if $z4 == 0 goto label9;

        $r30 = r0.<sun.security.validator.PKIXValidator: java.util.Map trustedSubjects>;
        $r31 = interfaceinvoke $r30.<java.util.Map: java.lang.Object get(java.lang.Object)>(r27);
        $r32 = (java.util.List) $r31;
        $z5 = specialinvoke r0.<sun.security.validator.PKIXValidator: boolean isSignatureValid(java.util.List,java.security.cert.X509Certificate)>($r32, r26);
        if $z5 == 0 goto label9;

        $r33 = specialinvoke r0.<sun.security.validator.PKIXValidator: java.security.cert.X509Certificate[] doValidate(java.security.cert.X509Certificate[],java.security.cert.PKIXBuilderParameters)>(r1, r5);
        return $r33;

     label9:
        $z6 = r0.<sun.security.validator.PKIXValidator: boolean plugin>;
        if $z6 == 0 goto label15;

        $i5 = lengthof r1;
        if $i5 <= 1 goto label14;

        $i6 = lengthof r1;
        $i7 = $i6 - 1;
        r34 = newarray (java.security.cert.X509Certificate)[$i7];
        $i8 = lengthof r34;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r34, 0, $i8);

     label10:
        $r35 = new java.security.cert.TrustAnchor;
        $i9 = lengthof r1;
        $i10 = $i9 - 1;
        $r36 = r1[$i10];
        specialinvoke $r35.<java.security.cert.TrustAnchor: void <init>(java.security.cert.X509Certificate,byte[])>($r36, null);
        $r37 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r35);
        virtualinvoke r5.<java.security.cert.PKIXBuilderParameters: void setTrustAnchors(java.util.Set)>($r37);

     label11:
        goto label13;

     label12:
        $r38 := @caughtexception;
        r10 = $r38;
        $r39 = new java.security.cert.CertificateException;
        specialinvoke $r39.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r10);
        throw $r39;

     label13:
        specialinvoke r0.<sun.security.validator.PKIXValidator: java.security.cert.X509Certificate[] doValidate(java.security.cert.X509Certificate[],java.security.cert.PKIXBuilderParameters)>(r34, r5);

     label14:
        $r41 = new sun.security.validator.ValidatorException;
        $r42 = <sun.security.validator.ValidatorException: java.lang.Object T_NO_TRUST_ANCHOR>;
        specialinvoke $r41.<sun.security.validator.ValidatorException: void <init>(java.lang.Object)>($r42);
        throw $r41;

     label15:
        $r43 = specialinvoke r0.<sun.security.validator.PKIXValidator: java.security.cert.X509Certificate[] doBuild(java.security.cert.X509Certificate[],java.util.Collection,java.security.cert.PKIXBuilderParameters)>(r1, r2, r5);
        return $r43;

        catch java.security.InvalidAlgorithmParameterException from label10 to label11 with label12;
    }

    private boolean isSignatureValid(java.util.List, java.security.cert.X509Certificate)
    {
        sun.security.validator.PKIXValidator r0;
        java.util.List r1;
        java.security.cert.X509Certificate r2;
        java.util.Iterator r3;
        java.security.PublicKey r4;
        java.lang.Exception r5, $r7;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6;

        r0 := @this: sun.security.validator.PKIXValidator;
        r1 := @parameter0: java.util.List;
        r2 := @parameter1: java.security.cert.X509Certificate;
        $z0 = r0.<sun.security.validator.PKIXValidator: boolean plugin>;
        if $z0 == 0 goto label5;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.security.PublicKey) $r6;

     label1:
        virtualinvoke r2.<java.security.cert.X509Certificate: void verify(java.security.PublicKey)>(r4);
        $z2 = 1;

     label2:
        return $z2;

     label3:
        $r7 := @caughtexception;
        r5 = $r7;
        goto label0;

     label4:
        return 0;

     label5:
        return 1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static java.security.cert.X509Certificate[] toArray(java.security.cert.CertPath, java.security.cert.TrustAnchor) throws java.security.cert.CertificateException
    {
        java.security.cert.CertPath r0;
        java.security.cert.TrustAnchor r1;
        java.util.List r2;
        java.security.cert.X509Certificate[] r3;
        java.security.cert.X509Certificate r4;
        int $i0, $i1, $i2, $i3;
        sun.security.validator.ValidatorException $r6;

        r0 := @parameter0: java.security.cert.CertPath;
        r1 := @parameter1: java.security.cert.TrustAnchor;
        r2 = virtualinvoke r0.<java.security.cert.CertPath: java.util.List getCertificates()>();
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();
        $i1 = $i0 + 1;
        r3 = newarray (java.security.cert.X509Certificate)[$i1];
        interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r3);
        r4 = virtualinvoke r1.<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>();
        if r4 != null goto label0;

        $r6 = new sun.security.validator.ValidatorException;
        specialinvoke $r6.<sun.security.validator.ValidatorException: void <init>(java.lang.String)>("TrustAnchor must be specified as certificate");
        throw $r6;

     label0:
        $i2 = lengthof r3;
        $i3 = $i2 - 1;
        r3[$i3] = r4;
        return r3;
    }

    private void setDate(java.security.cert.PKIXBuilderParameters)
    {
        sun.security.validator.PKIXValidator r0;
        java.security.cert.PKIXBuilderParameters r1;
        java.util.Date r2;

        r0 := @this: sun.security.validator.PKIXValidator;
        r1 := @parameter0: java.security.cert.PKIXBuilderParameters;
        r2 = r0.<sun.security.validator.PKIXValidator: java.util.Date validationDate>;
        if r2 == null goto label0;

        virtualinvoke r1.<java.security.cert.PKIXBuilderParameters: void setDate(java.util.Date)>(r2);

     label0:
        return;
    }

    private java.security.cert.X509Certificate[] doValidate(java.security.cert.X509Certificate[], java.security.cert.PKIXBuilderParameters) throws java.security.cert.CertificateException
    {
        sun.security.validator.PKIXValidator r0;
        java.security.cert.X509Certificate[] r1, $r10;
        java.security.cert.PKIXBuilderParameters r2;
        java.security.cert.CertPathValidator r3;
        java.security.cert.CertPath r4;
        java.security.cert.PKIXCertPathValidatorResult r5;
        java.security.cert.CertificateFactory $r6;
        java.util.List $r7;
        int $i0;
        java.security.cert.CertPathValidatorResult $r8;
        java.security.cert.TrustAnchor $r9;
        java.security.GeneralSecurityException $r11, r12;
        sun.security.validator.ValidatorException $r13;
        java.lang.StringBuilder $r14, $r15, $r17;
        java.lang.String $r16, $r18;

        r0 := @this: sun.security.validator.PKIXValidator;
        r1 := @parameter0: java.security.cert.X509Certificate[];
        r2 := @parameter1: java.security.cert.PKIXBuilderParameters;

     label0:
        specialinvoke r0.<sun.security.validator.PKIXValidator: void setDate(java.security.cert.PKIXBuilderParameters)>(r2);
        r3 = staticinvoke <java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String)>("PKIX");
        $r6 = r0.<sun.security.validator.PKIXValidator: java.security.cert.CertificateFactory factory>;
        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);
        r4 = virtualinvoke $r6.<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.util.List)>($r7);
        $i0 = lengthof r1;
        r0.<sun.security.validator.PKIXValidator: int certPathLength> = $i0;
        $r8 = virtualinvoke r3.<java.security.cert.CertPathValidator: java.security.cert.CertPathValidatorResult validate(java.security.cert.CertPath,java.security.cert.CertPathParameters)>(r4, r2);
        r5 = (java.security.cert.PKIXCertPathValidatorResult) $r8;
        $r9 = virtualinvoke r5.<java.security.cert.PKIXCertPathValidatorResult: java.security.cert.TrustAnchor getTrustAnchor()>();
        $r10 = staticinvoke <sun.security.validator.PKIXValidator: java.security.cert.X509Certificate[] toArray(java.security.cert.CertPath,java.security.cert.TrustAnchor)>(r4, $r9);

     label1:
        return $r10;

     label2:
        $r11 := @caughtexception;
        r12 = $r11;
        $r13 = new sun.security.validator.ValidatorException;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PKIX path validation failed: ");
        $r16 = virtualinvoke r12.<java.security.GeneralSecurityException: java.lang.String toString()>();
        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r13.<sun.security.validator.ValidatorException: void <init>(java.lang.String,java.lang.Throwable)>($r18, r12);
        throw $r13;

        catch java.security.GeneralSecurityException from label0 to label1 with label2;
    }

    private java.security.cert.X509Certificate[] doBuild(java.security.cert.X509Certificate[], java.util.Collection, java.security.cert.PKIXBuilderParameters) throws java.security.cert.CertificateException
    {
        sun.security.validator.PKIXValidator r0;
        java.security.cert.X509Certificate[] r1, $r17;
        java.util.Collection r2;
        java.security.cert.PKIXBuilderParameters r3;
        java.security.cert.X509CertSelector r4, $r9;
        java.util.ArrayList r5, $r11;
        java.security.cert.CertStore r6;
        java.security.cert.CertPathBuilder r7;
        java.security.cert.PKIXCertPathBuilderResult r8;
        java.security.cert.X509Certificate $r10;
        java.util.List $r12;
        java.security.cert.CollectionCertStoreParameters $r13;
        java.security.cert.CertPathBuilderResult $r14;
        java.security.cert.CertPath $r15;
        java.security.cert.TrustAnchor $r16;
        java.security.GeneralSecurityException $r18, r19;
        sun.security.validator.ValidatorException $r20;
        java.lang.StringBuilder $r21, $r22, $r24;
        java.lang.String $r23, $r25;

        r0 := @this: sun.security.validator.PKIXValidator;
        r1 := @parameter0: java.security.cert.X509Certificate[];
        r2 := @parameter1: java.util.Collection;
        r3 := @parameter2: java.security.cert.PKIXBuilderParameters;

     label0:
        specialinvoke r0.<sun.security.validator.PKIXValidator: void setDate(java.security.cert.PKIXBuilderParameters)>(r3);
        $r9 = new java.security.cert.X509CertSelector;
        specialinvoke $r9.<java.security.cert.X509CertSelector: void <init>()>();
        r4 = $r9;
        $r10 = r1[0];
        virtualinvoke r4.<java.security.cert.X509CertSelector: void setCertificate(java.security.cert.X509Certificate)>($r10);
        virtualinvoke r3.<java.security.cert.PKIXBuilderParameters: void setTargetCertConstraints(java.security.cert.CertSelector)>(r4);
        $r11 = new java.util.ArrayList;
        specialinvoke $r11.<java.util.ArrayList: void <init>()>();
        r5 = $r11;
        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);
        interfaceinvoke r5.<java.util.Collection: boolean addAll(java.util.Collection)>($r12);
        if r2 == null goto label1;

        interfaceinvoke r5.<java.util.Collection: boolean addAll(java.util.Collection)>(r2);

     label1:
        $r13 = new java.security.cert.CollectionCertStoreParameters;
        specialinvoke $r13.<java.security.cert.CollectionCertStoreParameters: void <init>(java.util.Collection)>(r5);
        r6 = staticinvoke <java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters)>("Collection", $r13);
        virtualinvoke r3.<java.security.cert.PKIXBuilderParameters: void addCertStore(java.security.cert.CertStore)>(r6);
        r7 = staticinvoke <java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String)>("PKIX");
        $r14 = virtualinvoke r7.<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilderResult build(java.security.cert.CertPathParameters)>(r3);
        r8 = (java.security.cert.PKIXCertPathBuilderResult) $r14;
        $r15 = virtualinvoke r8.<java.security.cert.PKIXCertPathBuilderResult: java.security.cert.CertPath getCertPath()>();
        $r16 = virtualinvoke r8.<java.security.cert.PKIXCertPathBuilderResult: java.security.cert.TrustAnchor getTrustAnchor()>();
        $r17 = staticinvoke <sun.security.validator.PKIXValidator: java.security.cert.X509Certificate[] toArray(java.security.cert.CertPath,java.security.cert.TrustAnchor)>($r15, $r16);

     label2:
        return $r17;

     label3:
        $r18 := @caughtexception;
        r19 = $r18;
        $r20 = new sun.security.validator.ValidatorException;
        $r21 = new java.lang.StringBuilder;
        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PKIX path building failed: ");
        $r23 = virtualinvoke r19.<java.security.GeneralSecurityException: java.lang.String toString()>();
        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r20.<sun.security.validator.ValidatorException: void <init>(java.lang.String,java.lang.Throwable)>($r25, r19);
        throw $r20;

        catch java.security.GeneralSecurityException from label0 to label2 with label3;
    }

    static void <clinit>()
    {
        sun.security.action.GetBooleanAction $r0;
        java.lang.Object $r1;
        java.lang.Boolean $r2;
        boolean $z0;

        $r0 = new sun.security.action.GetBooleanAction;
        specialinvoke $r0.<sun.security.action.GetBooleanAction: void <init>(java.lang.String)>("com.sun.net.ssl.checkRevocation");
        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        $r2 = (java.lang.Boolean) $r1;
        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();
        <sun.security.validator.PKIXValidator: boolean checkTLSRevocation> = $z0;
        return;
    }
}
