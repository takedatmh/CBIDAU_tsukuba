public class javax.crypto.ExemptionMechanism extends java.lang.Object
{
    private java.security.Provider provider;
    private javax.crypto.ExemptionMechanismSpi exmechSpi;
    private java.lang.String mechanism;
    private boolean done;
    private boolean initialized;
    private java.security.Key keyStored;

    protected void <init>(javax.crypto.ExemptionMechanismSpi, java.security.Provider, java.lang.String)
    {
        javax.crypto.ExemptionMechanism r0;
        javax.crypto.ExemptionMechanismSpi r1;
        java.security.Provider r2;
        java.lang.String r3;

        r0 := @this: javax.crypto.ExemptionMechanism;
        r1 := @parameter0: javax.crypto.ExemptionMechanismSpi;
        r2 := @parameter1: java.security.Provider;
        r3 := @parameter2: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<javax.crypto.ExemptionMechanism: boolean done> = 0;
        r0.<javax.crypto.ExemptionMechanism: boolean initialized> = 0;
        r0.<javax.crypto.ExemptionMechanism: java.security.Key keyStored> = null;
        r0.<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanismSpi exmechSpi> = r1;
        r0.<javax.crypto.ExemptionMechanism: java.security.Provider provider> = r2;
        r0.<javax.crypto.ExemptionMechanism: java.lang.String mechanism> = r3;
        return;
    }

    public final java.lang.String getName()
    {
        javax.crypto.ExemptionMechanism r0;
        java.lang.String $r1;

        r0 := @this: javax.crypto.ExemptionMechanism;
        $r1 = r0.<javax.crypto.ExemptionMechanism: java.lang.String mechanism>;
        return $r1;
    }

    public static final javax.crypto.ExemptionMechanism getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        sun.security.jca.GetInstance$Instance r1;
        javax.crypto.ExemptionMechanism $r2;
        java.lang.Object $r3;
        javax.crypto.ExemptionMechanismSpi $r4;
        java.security.Provider $r5;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <javax.crypto.JceSecurity: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>("ExemptionMechanism", class "javax/crypto/ExemptionMechanismSpi", r0);
        $r2 = new javax.crypto.ExemptionMechanism;
        $r3 = r1.<sun.security.jca.GetInstance$Instance: java.lang.Object impl>;
        $r4 = (javax.crypto.ExemptionMechanismSpi) $r3;
        $r5 = r1.<sun.security.jca.GetInstance$Instance: java.security.Provider provider>;
        specialinvoke $r2.<javax.crypto.ExemptionMechanism: void <init>(javax.crypto.ExemptionMechanismSpi,java.security.Provider,java.lang.String)>($r4, $r5, r0);
        return $r2;
    }

    public static final javax.crypto.ExemptionMechanism getInstance(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        java.lang.String r0, r1;
        sun.security.jca.GetInstance$Instance r2;
        javax.crypto.ExemptionMechanism $r3;
        java.lang.Object $r4;
        javax.crypto.ExemptionMechanismSpi $r5;
        java.security.Provider $r6;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 = staticinvoke <javax.crypto.JceSecurity: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.lang.String)>("ExemptionMechanism", class "javax/crypto/ExemptionMechanismSpi", r0, r1);
        $r3 = new javax.crypto.ExemptionMechanism;
        $r4 = r2.<sun.security.jca.GetInstance$Instance: java.lang.Object impl>;
        $r5 = (javax.crypto.ExemptionMechanismSpi) $r4;
        $r6 = r2.<sun.security.jca.GetInstance$Instance: java.security.Provider provider>;
        specialinvoke $r3.<javax.crypto.ExemptionMechanism: void <init>(javax.crypto.ExemptionMechanismSpi,java.security.Provider,java.lang.String)>($r5, $r6, r0);
        return $r3;
    }

    public static final javax.crypto.ExemptionMechanism getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        java.security.Provider r1, $r6;
        sun.security.jca.GetInstance$Instance r2;
        javax.crypto.ExemptionMechanism $r3;
        java.lang.Object $r4;
        javax.crypto.ExemptionMechanismSpi $r5;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.security.Provider;
        r2 = staticinvoke <javax.crypto.JceSecurity: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)>("ExemptionMechanism", class "javax/crypto/ExemptionMechanismSpi", r0, r1);
        $r3 = new javax.crypto.ExemptionMechanism;
        $r4 = r2.<sun.security.jca.GetInstance$Instance: java.lang.Object impl>;
        $r5 = (javax.crypto.ExemptionMechanismSpi) $r4;
        $r6 = r2.<sun.security.jca.GetInstance$Instance: java.security.Provider provider>;
        specialinvoke $r3.<javax.crypto.ExemptionMechanism: void <init>(javax.crypto.ExemptionMechanismSpi,java.security.Provider,java.lang.String)>($r5, $r6, r0);
        return $r3;
    }

    public final java.security.Provider getProvider()
    {
        javax.crypto.ExemptionMechanism r0;
        java.security.Provider $r1;

        r0 := @this: javax.crypto.ExemptionMechanism;
        $r1 = r0.<javax.crypto.ExemptionMechanism: java.security.Provider provider>;
        return $r1;
    }

    public final boolean isCryptoAllowed(java.security.Key) throws javax.crypto.ExemptionMechanismException
    {
        javax.crypto.ExemptionMechanism r0;
        java.security.Key r1, $r2;
        boolean z0, $z1;

        r0 := @this: javax.crypto.ExemptionMechanism;
        r1 := @parameter0: java.security.Key;
        z0 = 0;
        $z1 = r0.<javax.crypto.ExemptionMechanism: boolean done>;
        if $z1 == 0 goto label0;

        if r1 == null goto label0;

        $r2 = r0.<javax.crypto.ExemptionMechanism: java.security.Key keyStored>;
        z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

     label0:
        return z0;
    }

    public final int getOutputSize(int) throws java.lang.IllegalStateException
    {
        javax.crypto.ExemptionMechanism r0;
        int i0, $i1;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        java.lang.IllegalArgumentException $r2;
        javax.crypto.ExemptionMechanismSpi $r3;

        r0 := @this: javax.crypto.ExemptionMechanism;
        i0 := @parameter0: int;
        $z0 = r0.<javax.crypto.ExemptionMechanism: boolean initialized>;
        if $z0 != 0 goto label0;

        $r1 = new java.lang.IllegalStateException;
        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ExemptionMechanism not initialized");
        throw $r1;

     label0:
        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input size must be equal to or greater than zero");
        throw $r2;

     label1:
        $r3 = r0.<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanismSpi exmechSpi>;
        $i1 = virtualinvoke $r3.<javax.crypto.ExemptionMechanismSpi: int engineGetOutputSize(int)>(i0);
        return $i1;
    }

    public final void init(java.security.Key) throws java.security.InvalidKeyException, javax.crypto.ExemptionMechanismException
    {
        javax.crypto.ExemptionMechanism r0;
        java.security.Key r1;
        javax.crypto.ExemptionMechanismSpi $r2;

        r0 := @this: javax.crypto.ExemptionMechanism;
        r1 := @parameter0: java.security.Key;
        r0.<javax.crypto.ExemptionMechanism: boolean done> = 0;
        r0.<javax.crypto.ExemptionMechanism: boolean initialized> = 0;
        r0.<javax.crypto.ExemptionMechanism: java.security.Key keyStored> = r1;
        $r2 = r0.<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanismSpi exmechSpi>;
        virtualinvoke $r2.<javax.crypto.ExemptionMechanismSpi: void engineInit(java.security.Key)>(r1);
        r0.<javax.crypto.ExemptionMechanism: boolean initialized> = 1;
        return;
    }

    public final void init(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException, javax.crypto.ExemptionMechanismException
    {
        javax.crypto.ExemptionMechanism r0;
        java.security.Key r1;
        java.security.spec.AlgorithmParameterSpec r2;
        javax.crypto.ExemptionMechanismSpi $r3;

        r0 := @this: javax.crypto.ExemptionMechanism;
        r1 := @parameter0: java.security.Key;
        r2 := @parameter1: java.security.spec.AlgorithmParameterSpec;
        r0.<javax.crypto.ExemptionMechanism: boolean done> = 0;
        r0.<javax.crypto.ExemptionMechanism: boolean initialized> = 0;
        r0.<javax.crypto.ExemptionMechanism: java.security.Key keyStored> = r1;
        $r3 = r0.<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanismSpi exmechSpi>;
        virtualinvoke $r3.<javax.crypto.ExemptionMechanismSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)>(r1, r2);
        r0.<javax.crypto.ExemptionMechanism: boolean initialized> = 1;
        return;
    }

    public final void init(java.security.Key, java.security.AlgorithmParameters) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException, javax.crypto.ExemptionMechanismException
    {
        javax.crypto.ExemptionMechanism r0;
        java.security.Key r1;
        java.security.AlgorithmParameters r2;
        javax.crypto.ExemptionMechanismSpi $r3;

        r0 := @this: javax.crypto.ExemptionMechanism;
        r1 := @parameter0: java.security.Key;
        r2 := @parameter1: java.security.AlgorithmParameters;
        r0.<javax.crypto.ExemptionMechanism: boolean done> = 0;
        r0.<javax.crypto.ExemptionMechanism: boolean initialized> = 0;
        r0.<javax.crypto.ExemptionMechanism: java.security.Key keyStored> = r1;
        $r3 = r0.<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanismSpi exmechSpi>;
        virtualinvoke $r3.<javax.crypto.ExemptionMechanismSpi: void engineInit(java.security.Key,java.security.AlgorithmParameters)>(r1, r2);
        r0.<javax.crypto.ExemptionMechanism: boolean initialized> = 1;
        return;
    }

    public final byte[] genExemptionBlob() throws java.lang.IllegalStateException, javax.crypto.ExemptionMechanismException
    {
        javax.crypto.ExemptionMechanism r0;
        byte[] r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        javax.crypto.ExemptionMechanismSpi $r3;

        r0 := @this: javax.crypto.ExemptionMechanism;
        $z0 = r0.<javax.crypto.ExemptionMechanism: boolean initialized>;
        if $z0 != 0 goto label0;

        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ExemptionMechanism not initialized");
        throw $r2;

     label0:
        $r3 = r0.<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanismSpi exmechSpi>;
        r1 = virtualinvoke $r3.<javax.crypto.ExemptionMechanismSpi: byte[] engineGenExemptionBlob()>();
        r0.<javax.crypto.ExemptionMechanism: boolean done> = 1;
        return r1;
    }

    public final int genExemptionBlob(byte[]) throws java.lang.IllegalStateException, javax.crypto.ShortBufferException, javax.crypto.ExemptionMechanismException
    {
        javax.crypto.ExemptionMechanism r0;
        byte[] r1;
        int i0;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        javax.crypto.ExemptionMechanismSpi $r3;

        r0 := @this: javax.crypto.ExemptionMechanism;
        r1 := @parameter0: byte[];
        $z0 = r0.<javax.crypto.ExemptionMechanism: boolean initialized>;
        if $z0 != 0 goto label0;

        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ExemptionMechanism not initialized");
        throw $r2;

     label0:
        $r3 = r0.<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanismSpi exmechSpi>;
        i0 = virtualinvoke $r3.<javax.crypto.ExemptionMechanismSpi: int engineGenExemptionBlob(byte[],int)>(r1, 0);
        r0.<javax.crypto.ExemptionMechanism: boolean done> = 1;
        return i0;
    }

    public final int genExemptionBlob(byte[], int) throws java.lang.IllegalStateException, javax.crypto.ShortBufferException, javax.crypto.ExemptionMechanismException
    {
        javax.crypto.ExemptionMechanism r0;
        byte[] r1;
        int i0, i1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        javax.crypto.ExemptionMechanismSpi $r3;

        r0 := @this: javax.crypto.ExemptionMechanism;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        $z0 = r0.<javax.crypto.ExemptionMechanism: boolean initialized>;
        if $z0 != 0 goto label0;

        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ExemptionMechanism not initialized");
        throw $r2;

     label0:
        $r3 = r0.<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanismSpi exmechSpi>;
        i1 = virtualinvoke $r3.<javax.crypto.ExemptionMechanismSpi: int engineGenExemptionBlob(byte[],int)>(r1, i0);
        r0.<javax.crypto.ExemptionMechanism: boolean done> = 1;
        return i1;
    }

    protected void finalize()
    {
        javax.crypto.ExemptionMechanism r0;

        r0 := @this: javax.crypto.ExemptionMechanism;
        r0.<javax.crypto.ExemptionMechanism: java.security.Key keyStored> = null;
        return;
    }
}
