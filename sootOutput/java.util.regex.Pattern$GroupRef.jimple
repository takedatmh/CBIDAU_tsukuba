final class java.util.regex.Pattern$GroupRef extends java.util.regex.Pattern$Node
{
    java.util.regex.Pattern$GroupHead head;

    void <init>(java.util.regex.Pattern$GroupHead)
    {
        java.util.regex.Pattern$GroupRef r0;
        java.util.regex.Pattern$GroupHead r1;

        r0 := @this: java.util.regex.Pattern$GroupRef;
        r1 := @parameter0: java.util.regex.Pattern$GroupHead;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        r0.<java.util.regex.Pattern$GroupRef: java.util.regex.Pattern$GroupHead head> = r1;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$GroupRef r0;
        java.util.regex.Matcher r1;
        int i0, $i1;
        java.lang.CharSequence r2;
        java.util.regex.Pattern$GroupHead $r3;
        boolean $z0, $z1, $z2;
        java.util.regex.Pattern$Node $r4;

        r0 := @this: java.util.regex.Pattern$GroupRef;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $r3 = r0.<java.util.regex.Pattern$GroupRef: java.util.regex.Pattern$GroupHead head>;
        $z0 = virtualinvoke $r3.<java.util.regex.Pattern$GroupHead: boolean matchRef(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z0 == 0 goto label0;

        $r4 = r0.<java.util.regex.Pattern$GroupRef: java.util.regex.Pattern$Node next>;
        $i1 = r1.<java.util.regex.Matcher: int last>;
        $z1 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, $i1, r2);
        if $z1 == 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;
    }

    boolean study(java.util.regex.Pattern$TreeInfo)
    {
        java.util.regex.Pattern$GroupRef r0;
        java.util.regex.Pattern$TreeInfo r1;
        java.util.regex.Pattern$Node $r2;
        boolean $z0;

        r0 := @this: java.util.regex.Pattern$GroupRef;
        r1 := @parameter0: java.util.regex.Pattern$TreeInfo;
        r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid> = 0;
        r1.<java.util.regex.Pattern$TreeInfo: boolean deterministic> = 0;
        $r2 = r0.<java.util.regex.Pattern$GroupRef: java.util.regex.Pattern$Node next>;
        $z0 = virtualinvoke $r2.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        return $z0;
    }
}
