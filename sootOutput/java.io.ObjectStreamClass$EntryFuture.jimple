class java.io.ObjectStreamClass$EntryFuture extends java.lang.Object
{
    private static final java.lang.Object unset;
    private final java.lang.Thread owner;
    private java.lang.Object entry;

    private void <init>()
    {
        java.io.ObjectStreamClass$EntryFuture r0;
        java.lang.Thread $r1;
        java.lang.Object $r2;

        r0 := @this: java.io.ObjectStreamClass$EntryFuture;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r0.<java.io.ObjectStreamClass$EntryFuture: java.lang.Thread owner> = $r1;
        $r2 = <java.io.ObjectStreamClass$EntryFuture: java.lang.Object unset>;
        r0.<java.io.ObjectStreamClass$EntryFuture: java.lang.Object entry> = $r2;
        return;
    }

    synchronized boolean set(java.lang.Object)
    {
        java.io.ObjectStreamClass$EntryFuture r0;
        java.lang.Object r1, $r2, $r3;

        r0 := @this: java.io.ObjectStreamClass$EntryFuture;
        r1 := @parameter0: java.lang.Object;
        $r3 = r0.<java.io.ObjectStreamClass$EntryFuture: java.lang.Object entry>;
        $r2 = <java.io.ObjectStreamClass$EntryFuture: java.lang.Object unset>;
        if $r3 == $r2 goto label0;

        return 0;

     label0:
        r0.<java.io.ObjectStreamClass$EntryFuture: java.lang.Object entry> = r1;
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();
        return 1;
    }

    synchronized java.lang.Object get()
    {
        java.io.ObjectStreamClass$EntryFuture r0;
        boolean z0;
        java.lang.Object $r1, $r3, $r7;
        java.lang.InterruptedException r2, $r4;
        java.io.ObjectStreamClass$EntryFuture$1 $r5;

        r0 := @this: java.io.ObjectStreamClass$EntryFuture;
        z0 = 0;

     label0:
        $r3 = r0.<java.io.ObjectStreamClass$EntryFuture: java.lang.Object entry>;
        $r1 = <java.io.ObjectStreamClass$EntryFuture: java.lang.Object unset>;
        if $r3 != $r1 goto label4;

     label1:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label2:
        goto label0;

     label3:
        $r4 := @caughtexception;
        r2 = $r4;
        z0 = 1;
        goto label0;

     label4:
        if z0 == 0 goto label5;

        $r5 = new java.io.ObjectStreamClass$EntryFuture$1;
        specialinvoke $r5.<java.io.ObjectStreamClass$EntryFuture$1: void <init>(java.io.ObjectStreamClass$EntryFuture)>(r0);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r5);

     label5:
        $r7 = r0.<java.io.ObjectStreamClass$EntryFuture: java.lang.Object entry>;
        return $r7;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    java.lang.Thread getOwner()
    {
        java.io.ObjectStreamClass$EntryFuture r0;
        java.lang.Thread $r1;

        r0 := @this: java.io.ObjectStreamClass$EntryFuture;
        $r1 = r0.<java.io.ObjectStreamClass$EntryFuture: java.lang.Thread owner>;
        return $r1;
    }

    void <init>(java.io.ObjectStreamClass$1)
    {
        java.io.ObjectStreamClass$EntryFuture r0;
        java.io.ObjectStreamClass$1 r1;

        r0 := @this: java.io.ObjectStreamClass$EntryFuture;
        r1 := @parameter0: java.io.ObjectStreamClass$1;
        specialinvoke r0.<java.io.ObjectStreamClass$EntryFuture: void <init>()>();
        return;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;
        specialinvoke $r0.<java.lang.Object: void <init>()>();
        <java.io.ObjectStreamClass$EntryFuture: java.lang.Object unset> = $r0;
        return;
    }
}
