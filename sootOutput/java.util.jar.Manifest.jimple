public class java.util.jar.Manifest extends java.lang.Object implements java.lang.Cloneable
{
    private java.util.jar.Attributes attr;
    private java.util.Map entries;

    public void <init>()
    {
        java.util.jar.Manifest r0;
        java.util.jar.Attributes $r1;
        java.util.HashMap $r2;

        r0 := @this: java.util.jar.Manifest;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new java.util.jar.Attributes;
        specialinvoke $r1.<java.util.jar.Attributes: void <init>()>();
        r0.<java.util.jar.Manifest: java.util.jar.Attributes attr> = $r1;
        $r2 = new java.util.HashMap;
        specialinvoke $r2.<java.util.HashMap: void <init>()>();
        r0.<java.util.jar.Manifest: java.util.Map entries> = $r2;
        return;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        java.util.jar.Manifest r0;
        java.io.InputStream r1;
        java.util.jar.Attributes $r2;
        java.util.HashMap $r3;

        r0 := @this: java.util.jar.Manifest;
        r1 := @parameter0: java.io.InputStream;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = new java.util.jar.Attributes;
        specialinvoke $r2.<java.util.jar.Attributes: void <init>()>();
        r0.<java.util.jar.Manifest: java.util.jar.Attributes attr> = $r2;
        $r3 = new java.util.HashMap;
        specialinvoke $r3.<java.util.HashMap: void <init>()>();
        r0.<java.util.jar.Manifest: java.util.Map entries> = $r3;
        virtualinvoke r0.<java.util.jar.Manifest: void read(java.io.InputStream)>(r1);
        return;
    }

    public void <init>(java.util.jar.Manifest)
    {
        java.util.jar.Manifest r0, r1;
        java.util.jar.Attributes $r2, $r4, $r5;
        java.util.HashMap $r3;
        java.util.Map $r6, $r7;

        r0 := @this: java.util.jar.Manifest;
        r1 := @parameter0: java.util.jar.Manifest;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = new java.util.jar.Attributes;
        specialinvoke $r2.<java.util.jar.Attributes: void <init>()>();
        r0.<java.util.jar.Manifest: java.util.jar.Attributes attr> = $r2;
        $r3 = new java.util.HashMap;
        specialinvoke $r3.<java.util.HashMap: void <init>()>();
        r0.<java.util.jar.Manifest: java.util.Map entries> = $r3;
        $r4 = r0.<java.util.jar.Manifest: java.util.jar.Attributes attr>;
        $r5 = virtualinvoke r1.<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>();
        virtualinvoke $r4.<java.util.jar.Attributes: void putAll(java.util.Map)>($r5);
        $r6 = r0.<java.util.jar.Manifest: java.util.Map entries>;
        $r7 = virtualinvoke r1.<java.util.jar.Manifest: java.util.Map getEntries()>();
        interfaceinvoke $r6.<java.util.Map: void putAll(java.util.Map)>($r7);
        return;
    }

    public java.util.jar.Attributes getMainAttributes()
    {
        java.util.jar.Manifest r0;
        java.util.jar.Attributes $r1;

        r0 := @this: java.util.jar.Manifest;
        $r1 = r0.<java.util.jar.Manifest: java.util.jar.Attributes attr>;
        return $r1;
    }

    public java.util.Map getEntries()
    {
        java.util.jar.Manifest r0;
        java.util.Map $r1;

        r0 := @this: java.util.jar.Manifest;
        $r1 = r0.<java.util.jar.Manifest: java.util.Map entries>;
        return $r1;
    }

    public java.util.jar.Attributes getAttributes(java.lang.String)
    {
        java.util.jar.Manifest r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.util.jar.Attributes $r4;

        r0 := @this: java.util.jar.Manifest;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<java.util.jar.Manifest: java.util.Map getEntries()>();
        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        $r4 = (java.util.jar.Attributes) $r3;
        return $r4;
    }

    public void clear()
    {
        java.util.jar.Manifest r0;
        java.util.jar.Attributes $r1;
        java.util.Map $r2;

        r0 := @this: java.util.jar.Manifest;
        $r1 = r0.<java.util.jar.Manifest: java.util.jar.Attributes attr>;
        virtualinvoke $r1.<java.util.jar.Attributes: void clear()>();
        $r2 = r0.<java.util.jar.Manifest: java.util.Map entries>;
        interfaceinvoke $r2.<java.util.Map: void clear()>();
        return;
    }

    public void write(java.io.OutputStream) throws java.io.IOException
    {
        java.util.jar.Manifest r0;
        java.io.OutputStream r1;
        java.io.DataOutputStream $r2, r3;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        java.lang.StringBuffer r6, $r13;
        java.lang.String r7, $r15, $r18;
        byte[] r8;
        java.util.jar.Attributes $r9, $r20;
        java.util.Map $r10;
        java.util.Set $r11;
        boolean $z0;
        java.lang.Object $r12, $r14, $r19;
        int $i0;

        r0 := @this: java.util.jar.Manifest;
        r1 := @parameter0: java.io.OutputStream;
        $r2 = new java.io.DataOutputStream;
        specialinvoke $r2.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r1);
        r3 = $r2;
        $r9 = r0.<java.util.jar.Manifest: java.util.jar.Attributes attr>;
        virtualinvoke $r9.<java.util.jar.Attributes: void writeMain(java.io.DataOutputStream)>(r3);
        $r10 = r0.<java.util.jar.Manifest: java.util.Map entries>;
        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set entrySet()>();
        r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.util.Map$Entry) $r12;
        $r13 = new java.lang.StringBuffer;
        specialinvoke $r13.<java.lang.StringBuffer: void <init>(java.lang.String)>("Name: ");
        r6 = $r13;
        $r14 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();
        r7 = (java.lang.String) $r14;
        if r7 == null goto label1;

        r8 = virtualinvoke r7.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");
        $r15 = new java.lang.String;
        $i0 = lengthof r8;
        specialinvoke $r15.<java.lang.String: void <init>(byte[],int,int,int)>(r8, 0, 0, $i0);
        r7 = $r15;

     label1:
        virtualinvoke r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);
        virtualinvoke r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");
        staticinvoke <java.util.jar.Manifest: void make72Safe(java.lang.StringBuffer)>(r6);
        $r18 = virtualinvoke r6.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke r3.<java.io.DataOutputStream: void writeBytes(java.lang.String)>($r18);
        $r19 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();
        $r20 = (java.util.jar.Attributes) $r19;
        virtualinvoke $r20.<java.util.jar.Attributes: void write(java.io.DataOutputStream)>(r3);
        goto label0;

     label2:
        virtualinvoke r3.<java.io.DataOutputStream: void flush()>();
        return;
    }

    static void make72Safe(java.lang.StringBuffer)
    {
        java.lang.StringBuffer r0;
        int i0, i1, $i2;

        r0 := @parameter0: java.lang.StringBuffer;
        i0 = virtualinvoke r0.<java.lang.StringBuffer: int length()>();
        if i0 <= 72 goto label1;

        i1 = 70;

     label0:
        $i2 = i0 - 2;
        if i1 >= $i2 goto label1;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(i1, "\r\n ");
        i1 = i1 + 72;
        i0 = i0 + 3;
        goto label0;

     label1:
        return;
    }

    public void read(java.io.InputStream) throws java.io.IOException
    {
        java.util.jar.Manifest r0;
        java.io.InputStream r1;
        java.util.jar.Manifest$FastInputStream $r2, r3;
        byte[] r4, r6, r7;
        int i0, i1, i2, i3, $i4, i5, $i7, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21;
        java.lang.String r5, $r11;
        boolean z0;
        java.util.jar.Attributes $r8, r12, $r13;
        byte $b6, $b8, $b9, $b18;
        java.io.IOException $r9, $r10;
        java.util.Map $r14;

        r0 := @this: java.util.jar.Manifest;
        r1 := @parameter0: java.io.InputStream;
        $r2 = new java.util.jar.Manifest$FastInputStream;
        specialinvoke $r2.<java.util.jar.Manifest$FastInputStream: void <init>(java.io.InputStream)>(r1);
        r3 = $r2;
        r4 = newarray (byte)[512];
        $r8 = r0.<java.util.jar.Manifest: java.util.jar.Attributes attr>;
        virtualinvoke $r8.<java.util.jar.Attributes: void read(java.util.jar.Manifest$FastInputStream,byte[])>(r3, r4);
        i0 = 0;
        i1 = 0;
        i2 = 2;
        r5 = null;
        z0 = 1;
        r6 = null;

     label0:
        $i4 = virtualinvoke r3.<java.util.jar.Manifest$FastInputStream: int readLine(byte[])>(r4);
        i3 = $i4;
        if $i4 == -1 goto label9;

        i5 = i3 + -1;
        $b6 = r4[i5];
        if $b6 == 10 goto label1;

        $r9 = new java.io.IOException;
        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("manifest line too long");
        throw $r9;

     label1:
        if i5 <= 0 goto label2;

        $i7 = i5 - 1;
        $b8 = r4[$i7];
        if $b8 != 13 goto label2;

        i5 = i5 + -1;

     label2:
        if i5 != 0 goto label3;

        if z0 == 0 goto label3;

        goto label0;

     label3:
        z0 = 0;
        if r5 != null goto label5;

        r5 = specialinvoke r0.<java.util.jar.Manifest: java.lang.String parseName(byte[],int)>(r4, i5);
        if r5 != null goto label4;

        $r10 = new java.io.IOException;
        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("invalid manifest format");
        throw $r10;

     label4:
        $b9 = virtualinvoke r3.<java.util.jar.Manifest$FastInputStream: byte peek()>();
        if $b9 != 32 goto label7;

        $i10 = i5 - 6;
        r6 = newarray (byte)[$i10];
        $i11 = i5 - 6;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 6, r6, 0, $i11);
        goto label0;

     label5:
        $i12 = lengthof r6;
        $i13 = $i12 + i5;
        $i14 = $i13 - 1;
        r7 = newarray (byte)[$i14];
        $i15 = lengthof r6;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r7, 0, $i15);
        $i16 = lengthof r6;
        $i17 = i5 - 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 1, r7, $i16, $i17);
        $b18 = virtualinvoke r3.<java.util.jar.Manifest$FastInputStream: byte peek()>();
        if $b18 != 32 goto label6;

        r6 = r7;
        goto label0;

     label6:
        $r11 = new java.lang.String;
        $i19 = lengthof r7;
        specialinvoke $r11.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r7, 0, $i19, "UTF8");
        r5 = $r11;
        r6 = null;

     label7:
        r12 = virtualinvoke r0.<java.util.jar.Manifest: java.util.jar.Attributes getAttributes(java.lang.String)>(r5);
        if r12 != null goto label8;

        $r13 = new java.util.jar.Attributes;
        specialinvoke $r13.<java.util.jar.Attributes: void <init>(int)>(i2);
        r12 = $r13;
        $r14 = r0.<java.util.jar.Manifest: java.util.Map entries>;
        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r12);

     label8:
        virtualinvoke r12.<java.util.jar.Attributes: void read(java.util.jar.Manifest$FastInputStream,byte[])>(r3, r4);
        i0 = i0 + 1;
        $i20 = virtualinvoke r12.<java.util.jar.Attributes: int size()>();
        i1 = i1 + $i20;
        $i21 = i1 / i0;
        i2 = staticinvoke <java.lang.Math: int max(int,int)>(2, $i21);
        r5 = null;
        z0 = 1;
        goto label0;

     label9:
        return;
    }

    private java.lang.String parseName(byte[], int)
    {
        java.util.jar.Manifest r0;
        byte[] r1;
        int i0, $i2, $i4, $i6, $i8, $i11;
        java.lang.Exception r2, $r4;
        byte $b1, $b3, $b5, $b7, $b9, $b10;
        java.lang.String $r3;

        r0 := @this: java.util.jar.Manifest;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        $b1 = r1[0];
        $i2 = specialinvoke r0.<java.util.jar.Manifest: int toLower(int)>($b1);
        if $i2 != 110 goto label3;

        $b3 = r1[1];
        $i4 = specialinvoke r0.<java.util.jar.Manifest: int toLower(int)>($b3);
        if $i4 != 97 goto label3;

        $b5 = r1[2];
        $i6 = specialinvoke r0.<java.util.jar.Manifest: int toLower(int)>($b5);
        if $i6 != 109 goto label3;

        $b7 = r1[3];
        $i8 = specialinvoke r0.<java.util.jar.Manifest: int toLower(int)>($b7);
        if $i8 != 101 goto label3;

        $b9 = r1[4];
        if $b9 != 58 goto label3;

        $b10 = r1[5];
        if $b10 != 32 goto label3;

     label0:
        $r3 = new java.lang.String;
        $i11 = i0 - 6;
        specialinvoke $r3.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r1, 6, $i11, "UTF8");

     label1:
        return $r3;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;

     label3:
        return null;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    private int toLower(int)
    {
        java.util.jar.Manifest r0;
        int i0, $i1, $i2;

        r0 := @this: java.util.jar.Manifest;
        i0 := @parameter0: int;
        if i0 < 65 goto label0;

        if i0 > 90 goto label0;

        $i1 = i0 - 65;
        $i2 = 97 + $i1;
        goto label1;

     label0:
        $i2 = i0;

     label1:
        return $i2;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.jar.Manifest r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        java.util.jar.Attributes $r3, $r4;
        java.util.Map $r5, $r6;

        r0 := @this: java.util.jar.Manifest;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.util.jar.Manifest;
        if $z0 == 0 goto label2;

        r2 = (java.util.jar.Manifest) r1;
        $r3 = r0.<java.util.jar.Manifest: java.util.jar.Attributes attr>;
        $r4 = virtualinvoke r2.<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>();
        $z1 = virtualinvoke $r3.<java.util.jar.Attributes: boolean equals(java.lang.Object)>($r4);
        if $z1 == 0 goto label0;

        $r5 = r0.<java.util.jar.Manifest: java.util.Map entries>;
        $r6 = virtualinvoke r2.<java.util.jar.Manifest: java.util.Map getEntries()>();
        $z2 = interfaceinvoke $r5.<java.util.Map: boolean equals(java.lang.Object)>($r6);
        if $z2 == 0 goto label0;

        $z3 = 1;
        goto label1;

     label0:
        $z3 = 0;

     label1:
        return $z3;

     label2:
        return 0;
    }

    public int hashCode()
    {
        java.util.jar.Manifest r0;
        java.util.jar.Attributes $r1;
        int $i0, $i1, $i2;
        java.util.Map $r2;

        r0 := @this: java.util.jar.Manifest;
        $r1 = r0.<java.util.jar.Manifest: java.util.jar.Attributes attr>;
        $i0 = virtualinvoke $r1.<java.util.jar.Attributes: int hashCode()>();
        $r2 = r0.<java.util.jar.Manifest: java.util.Map entries>;
        $i1 = interfaceinvoke $r2.<java.util.Map: int hashCode()>();
        $i2 = $i0 + $i1;
        return $i2;
    }

    public java.lang.Object clone()
    {
        java.util.jar.Manifest r0, $r1;

        r0 := @this: java.util.jar.Manifest;
        $r1 = new java.util.jar.Manifest;
        specialinvoke $r1.<java.util.jar.Manifest: void <init>(java.util.jar.Manifest)>(r0);
        return $r1;
    }
}
