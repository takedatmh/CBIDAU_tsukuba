final class java.lang.ProcessEnvironment extends java.lang.Object
{
    private static final java.util.HashMap theEnvironment;
    private static final java.util.Map theUnmodifiableEnvironment;
    static final int MIN_NAME_LENGTH;

    static java.lang.String getenv(java.lang.String)
    {
        java.lang.String r0, $r3;
        java.util.Map $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.String;
        $r1 = <java.lang.ProcessEnvironment: java.util.Map theUnmodifiableEnvironment>;
        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);
        $r3 = (java.lang.String) $r2;
        return $r3;
    }

    static java.util.Map getenv()
    {
        java.util.Map $r0;

        $r0 = <java.lang.ProcessEnvironment: java.util.Map theUnmodifiableEnvironment>;
        return $r0;
    }

    static java.util.Map environment()
    {
        java.lang.ProcessEnvironment$StringEnvironment $r0;
        java.util.HashMap $r1;
        java.lang.Object $r2;
        java.util.Map $r3, $r4;

        $r0 = new java.lang.ProcessEnvironment$StringEnvironment;
        $r1 = <java.lang.ProcessEnvironment: java.util.HashMap theEnvironment>;
        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object clone()>();
        $r3 = (java.util.Map) $r2;
        $r4 = (java.util.Map) $r3;
        specialinvoke $r0.<java.lang.ProcessEnvironment$StringEnvironment: void <init>(java.util.Map)>($r4);
        return $r0;
    }

    static java.util.Map emptyEnvironment(int)
    {
        int i0;
        java.lang.ProcessEnvironment$StringEnvironment $r0;
        java.util.HashMap $r1;

        i0 := @parameter0: int;
        $r0 = new java.lang.ProcessEnvironment$StringEnvironment;
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(i0);
        specialinvoke $r0.<java.lang.ProcessEnvironment$StringEnvironment: void <init>(java.util.Map)>($r1);
        return $r0;
    }

    private static native byte[][] environ();

    private void <init>()
    {
        java.lang.ProcessEnvironment r0;

        r0 := @this: java.lang.ProcessEnvironment;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    private static void validateVariable(java.lang.String)
    {
        java.lang.String r0, $r6;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.lang.String;
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(61);
        if $i0 != -1 goto label0;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(0);
        if $i1 == -1 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid environment variable name: \"");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);
        throw $r2;

     label1:
        return;
    }

    private static void validateValue(java.lang.String)
    {
        java.lang.String r0, $r6;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.lang.String;
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(0);
        if $i0 == -1 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid environment variable value: \"");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);
        throw $r2;

     label0:
        return;
    }

    static byte[] toEnvironmentBlock(java.util.Map, int[])
    {
        java.util.Map r0;
        int[] r1;
        byte[] $r2;
        java.lang.ProcessEnvironment$StringEnvironment $r3;

        r0 := @parameter0: java.util.Map;
        r1 := @parameter1: int[];
        if r0 != null goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r3 = (java.lang.ProcessEnvironment$StringEnvironment) r0;
        $r2 = virtualinvoke $r3.<java.lang.ProcessEnvironment$StringEnvironment: byte[] toEnvironmentBlock(int[])>(r1);

     label1:
        return $r2;
    }

    private static int arrayCompare(byte[], byte[])
    {
        byte[] r0, r1;
        int i0, i1, $i2, $i3, $i4, $i9, $i10, $i11, $i12;
        byte $b5, $b6, $b7, $b8;

        r0 := @parameter0: byte[];
        r1 := @parameter1: byte[];
        $i2 = lengthof r0;
        $i3 = lengthof r1;
        if $i2 >= $i3 goto label0;

        $i4 = lengthof r0;
        goto label1;

     label0:
        $i4 = lengthof r1;

     label1:
        i0 = $i4;
        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        $b5 = r0[i1];
        $b6 = r1[i1];
        if $b5 == $b6 goto label3;

        $b7 = r0[i1];
        $b8 = r1[i1];
        $i9 = $b7 - $b8;
        return $i9;

     label3:
        i1 = i1 + 1;
        goto label2;

     label4:
        $i10 = lengthof r0;
        $i11 = lengthof r1;
        $i12 = $i10 - $i11;
        return $i12;
    }

    private static boolean arrayEquals(byte[], byte[])
    {
        byte[] r0, r1;
        int i0, $i1, $i2, $i3;
        byte $b4, $b5;

        r0 := @parameter0: byte[];
        r1 := @parameter1: byte[];
        $i1 = lengthof r0;
        $i2 = lengthof r1;
        if $i1 == $i2 goto label0;

        return 0;

     label0:
        i0 = 0;

     label1:
        $i3 = lengthof r0;
        if i0 >= $i3 goto label3;

        $b4 = r0[i0];
        $b5 = r1[i0];
        if $b4 == $b5 goto label2;

        return 0;

     label2:
        i0 = i0 + 1;
        goto label1;

     label3:
        return 1;
    }

    private static int arrayHash(byte[])
    {
        byte[] r0;
        int i0, i1, $i2, $i3;
        byte $b4;

        r0 := @parameter0: byte[];
        i0 = 0;
        i1 = 0;

     label0:
        $i2 = lengthof r0;
        if i1 >= $i2 goto label1;

        $i3 = 31 * i0;
        $b4 = r0[i1];
        i0 = $i3 + $b4;
        i1 = i1 + 1;
        goto label0;

     label1:
        return i0;
    }

    static boolean access$000(byte[], byte[])
    {
        byte[] r0, r1;
        boolean $z0;

        r0 := @parameter0: byte[];
        r1 := @parameter1: byte[];
        $z0 = staticinvoke <java.lang.ProcessEnvironment: boolean arrayEquals(byte[],byte[])>(r0, r1);
        return $z0;
    }

    static int access$100(byte[])
    {
        byte[] r0;
        int $i0;

        r0 := @parameter0: byte[];
        $i0 = staticinvoke <java.lang.ProcessEnvironment: int arrayHash(byte[])>(r0);
        return $i0;
    }

    static void access$200(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;
        staticinvoke <java.lang.ProcessEnvironment: void validateVariable(java.lang.String)>(r0);
        return;
    }

    static int access$300(byte[], byte[])
    {
        byte[] r0, r1;
        int $i0;

        r0 := @parameter0: byte[];
        r1 := @parameter1: byte[];
        $i0 = staticinvoke <java.lang.ProcessEnvironment: int arrayCompare(byte[],byte[])>(r0, r1);
        return $i0;
    }

    static void access$400(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;
        staticinvoke <java.lang.ProcessEnvironment: void validateValue(java.lang.String)>(r0);
        return;
    }

    static void <clinit>()
    {
        byte[][] r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.HashMap $r1, $r2, $r9;
        byte[] $r3, $r5;
        java.lang.ProcessEnvironment$Variable $r4;
        java.lang.ProcessEnvironment$Value $r6;
        java.lang.ProcessEnvironment$StringEnvironment $r8;
        java.util.Map $r10;

        r0 = staticinvoke <java.lang.ProcessEnvironment: byte[][] environ()>();
        $r1 = new java.util.HashMap;
        $i1 = lengthof r0;
        $i2 = $i1 / 2;
        $i3 = $i2 + 3;
        specialinvoke $r1.<java.util.HashMap: void <init>(int)>($i3);
        <java.lang.ProcessEnvironment: java.util.HashMap theEnvironment> = $r1;
        $i4 = lengthof r0;
        i0 = $i4 - 1;

     label0:
        if i0 <= 0 goto label1;

        $r2 = <java.lang.ProcessEnvironment: java.util.HashMap theEnvironment>;
        $i5 = i0 - 1;
        $r3 = r0[$i5];
        $r4 = staticinvoke <java.lang.ProcessEnvironment$Variable: java.lang.ProcessEnvironment$Variable valueOf(byte[])>($r3);
        $r5 = r0[i0];
        $r6 = staticinvoke <java.lang.ProcessEnvironment$Value: java.lang.ProcessEnvironment$Value valueOf(byte[])>($r5);
        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);
        i0 = i0 + -2;
        goto label0;

     label1:
        $r8 = new java.lang.ProcessEnvironment$StringEnvironment;
        $r9 = <java.lang.ProcessEnvironment: java.util.HashMap theEnvironment>;
        specialinvoke $r8.<java.lang.ProcessEnvironment$StringEnvironment: void <init>(java.util.Map)>($r9);
        $r10 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r8);
        <java.lang.ProcessEnvironment: java.util.Map theUnmodifiableEnvironment> = $r10;
        return;
    }
}
