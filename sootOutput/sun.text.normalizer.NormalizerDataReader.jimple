final class sun.text.normalizer.NormalizerDataReader extends java.lang.Object implements sun.text.normalizer.ICUBinary$Authenticate
{
    private java.io.DataInputStream dataInputStream;
    private byte[] unicodeVersion;
    private static final byte[] DATA_FORMAT_ID;
    private static final byte[] DATA_FORMAT_VERSION;

    protected void <init>(java.io.InputStream) throws java.io.IOException
    {
        sun.text.normalizer.NormalizerDataReader r0;
        java.io.InputStream r1;
        byte[] $r2, $r3;
        java.io.DataInputStream $r4;

        r0 := @this: sun.text.normalizer.NormalizerDataReader;
        r1 := @parameter0: java.io.InputStream;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = <sun.text.normalizer.NormalizerDataReader: byte[] DATA_FORMAT_ID>;
        $r3 = staticinvoke <sun.text.normalizer.ICUBinary: byte[] readHeader(java.io.InputStream,byte[],sun.text.normalizer.ICUBinary$Authenticate)>(r1, $r2, r0);
        r0.<sun.text.normalizer.NormalizerDataReader: byte[] unicodeVersion> = $r3;
        $r4 = new java.io.DataInputStream;
        specialinvoke $r4.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r1);
        r0.<sun.text.normalizer.NormalizerDataReader: java.io.DataInputStream dataInputStream> = $r4;
        return;
    }

    protected int[] readIndexes(int) throws java.io.IOException
    {
        sun.text.normalizer.NormalizerDataReader r0;
        int i0, i1, $i2;
        int[] r1;
        java.io.DataInputStream $r2;

        r0 := @this: sun.text.normalizer.NormalizerDataReader;
        i0 := @parameter0: int;
        r1 = newarray (int)[i0];
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        $r2 = r0.<sun.text.normalizer.NormalizerDataReader: java.io.DataInputStream dataInputStream>;
        $i2 = virtualinvoke $r2.<java.io.DataInputStream: int readInt()>();
        r1[i1] = $i2;
        i1 = i1 + 1;
        goto label0;

     label1:
        return r1;
    }

    protected void read(byte[], byte[], byte[], char[], char[]) throws java.io.IOException
    {
        sun.text.normalizer.NormalizerDataReader r0;
        byte[] r1, r2, r3;
        char[] r4, r5;
        int i0, $i1, i3, $i4;
        java.io.DataInputStream $r6, $r7, $r8, $r9, $r10;
        char $c2, $c5;

        r0 := @this: sun.text.normalizer.NormalizerDataReader;
        r1 := @parameter0: byte[];
        r2 := @parameter1: byte[];
        r3 := @parameter2: byte[];
        r4 := @parameter3: char[];
        r5 := @parameter4: char[];
        $r6 = r0.<sun.text.normalizer.NormalizerDataReader: java.io.DataInputStream dataInputStream>;
        virtualinvoke $r6.<java.io.DataInputStream: void readFully(byte[])>(r1);
        i0 = 0;

     label0:
        $i1 = lengthof r4;
        if i0 >= $i1 goto label1;

        $r7 = r0.<sun.text.normalizer.NormalizerDataReader: java.io.DataInputStream dataInputStream>;
        $c2 = virtualinvoke $r7.<java.io.DataInputStream: char readChar()>();
        r4[i0] = $c2;
        i0 = i0 + 1;
        goto label0;

     label1:
        i3 = 0;

     label2:
        $i4 = lengthof r5;
        if i3 >= $i4 goto label3;

        $r8 = r0.<sun.text.normalizer.NormalizerDataReader: java.io.DataInputStream dataInputStream>;
        $c5 = virtualinvoke $r8.<java.io.DataInputStream: char readChar()>();
        r5[i3] = $c5;
        i3 = i3 + 1;
        goto label2;

     label3:
        $r9 = r0.<sun.text.normalizer.NormalizerDataReader: java.io.DataInputStream dataInputStream>;
        virtualinvoke $r9.<java.io.DataInputStream: void readFully(byte[])>(r2);
        $r10 = r0.<sun.text.normalizer.NormalizerDataReader: java.io.DataInputStream dataInputStream>;
        virtualinvoke $r10.<java.io.DataInputStream: void readFully(byte[])>(r3);
        return;
    }

    public byte[] getDataFormatVersion()
    {
        sun.text.normalizer.NormalizerDataReader r0;
        byte[] $r1;

        r0 := @this: sun.text.normalizer.NormalizerDataReader;
        $r1 = <sun.text.normalizer.NormalizerDataReader: byte[] DATA_FORMAT_VERSION>;
        return $r1;
    }

    public boolean isDataVersionAcceptable(byte[])
    {
        sun.text.normalizer.NormalizerDataReader r0;
        byte[] r1, $r2, $r3, $r4;
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        boolean $z0;

        r0 := @this: sun.text.normalizer.NormalizerDataReader;
        r1 := @parameter0: byte[];
        $b0 = r1[0];
        $r2 = <sun.text.normalizer.NormalizerDataReader: byte[] DATA_FORMAT_VERSION>;
        $b1 = $r2[0];
        if $b0 != $b1 goto label0;

        $b2 = r1[2];
        $r3 = <sun.text.normalizer.NormalizerDataReader: byte[] DATA_FORMAT_VERSION>;
        $b3 = $r3[2];
        if $b2 != $b3 goto label0;

        $b4 = r1[3];
        $r4 = <sun.text.normalizer.NormalizerDataReader: byte[] DATA_FORMAT_VERSION>;
        $b5 = $r4[3];
        if $b4 != $b5 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public byte[] getUnicodeVersion()
    {
        sun.text.normalizer.NormalizerDataReader r0;
        byte[] $r1;

        r0 := @this: sun.text.normalizer.NormalizerDataReader;
        $r1 = r0.<sun.text.normalizer.NormalizerDataReader: byte[] unicodeVersion>;
        return $r1;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1;

        $r0 = newarray (byte)[4];
        $r0[0] = 78;
        $r0[1] = 111;
        $r0[2] = 114;
        $r0[3] = 109;
        <sun.text.normalizer.NormalizerDataReader: byte[] DATA_FORMAT_ID> = $r0;
        $r1 = newarray (byte)[4];
        $r1[0] = 2;
        $r1[1] = 2;
        $r1[2] = 5;
        $r1[3] = 2;
        <sun.text.normalizer.NormalizerDataReader: byte[] DATA_FORMAT_VERSION> = $r1;
        return;
    }
}
