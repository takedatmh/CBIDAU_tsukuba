final class java.security.PermissionsHash extends java.security.PermissionCollection implements java.io.Serializable
{
    private transient java.util.Map permsMap;
    private static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;

    void <init>()
    {
        java.security.PermissionsHash r0;
        java.util.HashMap $r1;

        r0 := @this: java.security.PermissionsHash;
        specialinvoke r0.<java.security.PermissionCollection: void <init>()>();
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(11);
        r0.<java.security.PermissionsHash: java.util.Map permsMap> = $r1;
        return;
    }

    public void add(java.security.Permission)
    {
        java.security.PermissionsHash r0, r3;
        java.security.Permission r1;
        java.lang.Throwable r4, $r7;
        java.util.Map $r5;

        r0 := @this: java.security.PermissionsHash;
        r1 := @parameter0: java.security.Permission;
        r3 = r0;
        entermonitor r0;

     label0:
        $r5 = r0.<java.security.PermissionsHash: java.util.Map permsMap>;
        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r1);
        exitmonitor r3;

     label1:
        goto label5;

     label2:
        $r7 := @caughtexception;

     label3:
        r4 = $r7;
        exitmonitor r3;

     label4:
        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public boolean implies(java.security.Permission)
    {
        java.security.PermissionsHash r0, r3;
        java.security.Permission r1, r4, r6;
        java.util.Iterator r5;
        java.lang.Throwable r7, $r13;
        java.util.Map $r8, $r10;
        java.lang.Object $r9, $r12;
        java.util.Collection $r11;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: java.security.PermissionsHash;
        r1 := @parameter0: java.security.Permission;
        r3 = r0;
        entermonitor r0;

     label0:
        $r8 = r0.<java.security.PermissionsHash: java.util.Map permsMap>;
        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        r4 = (java.security.Permission) $r9;
        if r4 != null goto label6;

        $r10 = r0.<java.security.PermissionsHash: java.util.Map permsMap>;
        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Collection values()>();
        r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        r6 = (java.security.Permission) $r12;
        $z1 = virtualinvoke r6.<java.security.Permission: boolean implies(java.security.Permission)>(r1);
        if $z1 == 0 goto label3;

        $z2 = 1;
        exitmonitor r3;

     label2:
        return $z2;

     label3:
        goto label1;

     label4:
        $z3 = 0;
        exitmonitor r3;

     label5:
        return $z3;

     label6:
        $z4 = 1;
        exitmonitor r3;

     label7:
        return $z4;

     label8:
        $r13 := @caughtexception;

     label9:
        r7 = $r13;
        exitmonitor r3;

     label10:
        throw r7;

        catch java.lang.Throwable from label0 to label2 with label8;
        catch java.lang.Throwable from label3 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    public java.util.Enumeration elements()
    {
        java.security.PermissionsHash r0, r2;
        java.lang.Throwable r3, $r7;
        java.util.Map $r4;
        java.util.Collection $r5;
        java.util.Enumeration $r6;

        r0 := @this: java.security.PermissionsHash;
        r2 = r0;
        entermonitor r0;

     label0:
        $r4 = r0.<java.security.PermissionsHash: java.util.Map permsMap>;
        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();
        $r6 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>($r5);
        exitmonitor r2;

     label1:
        return $r6;

     label2:
        $r7 := @caughtexception;

     label3:
        r3 = $r7;
        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.security.PermissionsHash r0, r4;
        java.io.ObjectOutputStream r1;
        java.util.Hashtable $r2, r3;
        java.lang.Throwable r5, $r9;
        java.util.Map $r6, $r8;
        int $i0, $i1;
        java.io.ObjectOutputStream$PutField r10;

        r0 := @this: java.security.PermissionsHash;
        r1 := @parameter0: java.io.ObjectOutputStream;
        $r2 = new java.util.Hashtable;
        $r6 = r0.<java.security.PermissionsHash: java.util.Map permsMap>;
        $i0 = interfaceinvoke $r6.<java.util.Map: int size()>();
        $i1 = $i0 * 2;
        specialinvoke $r2.<java.util.Hashtable: void <init>(int)>($i1);
        r3 = $r2;
        r4 = r0;
        entermonitor r0;

     label0:
        $r8 = r0.<java.security.PermissionsHash: java.util.Map permsMap>;
        virtualinvoke r3.<java.util.Hashtable: void putAll(java.util.Map)>($r8);
        exitmonitor r4;

     label1:
        goto label5;

     label2:
        $r9 := @caughtexception;

     label3:
        r5 = $r9;
        exitmonitor r4;

     label4:
        throw r5;

     label5:
        r10 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();
        virtualinvoke r10.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("perms", r3);
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.security.PermissionsHash r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectInputStream$GetField r2;
        java.util.Hashtable r3;
        java.lang.Object $r4;
        java.util.HashMap $r5;
        int $i0, $i1;
        java.util.Map $r6;

        r0 := @this: java.security.PermissionsHash;
        r1 := @parameter0: java.io.ObjectInputStream;
        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();
        $r4 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("perms", null);
        r3 = (java.util.Hashtable) $r4;
        $r5 = new java.util.HashMap;
        $i0 = virtualinvoke r3.<java.util.Hashtable: int size()>();
        $i1 = $i0 * 2;
        specialinvoke $r5.<java.util.HashMap: void <init>(int)>($i1);
        r0.<java.security.PermissionsHash: java.util.Map permsMap> = $r5;
        $r6 = r0.<java.security.PermissionsHash: java.util.Map permsMap>;
        interfaceinvoke $r6.<java.util.Map: void putAll(java.util.Map)>(r3);
        return;
    }

    static void <clinit>()
    {
        java.io.ObjectStreamField $r0;
        java.io.ObjectStreamField[] $r1;

        $r1 = newarray (java.io.ObjectStreamField)[1];
        $r0 = new java.io.ObjectStreamField;
        specialinvoke $r0.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("perms", class "java/util/Hashtable");
        $r1[0] = $r0;
        <java.security.PermissionsHash: java.io.ObjectStreamField[] serialPersistentFields> = $r1;
        return;
    }
}
