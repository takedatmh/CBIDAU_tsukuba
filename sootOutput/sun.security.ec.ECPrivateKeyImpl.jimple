public final class sun.security.ec.ECPrivateKeyImpl extends sun.security.pkcs.PKCS8Key implements java.security.interfaces.ECPrivateKey
{
    private static final long serialVersionUID;
    private java.math.BigInteger s;
    private java.security.spec.ECParameterSpec params;

    public void <init>(byte[]) throws java.security.InvalidKeyException
    {
        sun.security.ec.ECPrivateKeyImpl r0;
        byte[] r1;

        r0 := @this: sun.security.ec.ECPrivateKeyImpl;
        r1 := @parameter0: byte[];
        specialinvoke r0.<sun.security.pkcs.PKCS8Key: void <init>()>();
        virtualinvoke r0.<sun.security.ec.ECPrivateKeyImpl: void decode(byte[])>(r1);
        return;
    }

    public void <init>(java.math.BigInteger, java.security.spec.ECParameterSpec) throws java.security.InvalidKeyException
    {
        sun.security.ec.ECPrivateKeyImpl r0;
        java.math.BigInteger r1;
        java.security.spec.ECParameterSpec r2;
        sun.security.util.ObjectIdentifier $r3;
        sun.security.util.DerOutputStream r4, $r9;
        byte[] r5, $r10, $r12, $r13;
        sun.security.util.DerValue r6, $r11;
        sun.security.x509.AlgorithmId $r7;
        java.security.AlgorithmParameters $r8;
        java.io.IOException $r14, r15;
        java.security.InvalidKeyException $r16;

        r0 := @this: sun.security.ec.ECPrivateKeyImpl;
        r1 := @parameter0: java.math.BigInteger;
        r2 := @parameter1: java.security.spec.ECParameterSpec;
        specialinvoke r0.<sun.security.pkcs.PKCS8Key: void <init>()>();
        r0.<sun.security.ec.ECPrivateKeyImpl: java.math.BigInteger s> = r1;
        r0.<sun.security.ec.ECPrivateKeyImpl: java.security.spec.ECParameterSpec params> = r2;
        $r7 = new sun.security.x509.AlgorithmId;
        $r3 = <sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier EC_oid>;
        $r8 = staticinvoke <sun.security.ec.ECParameters: java.security.AlgorithmParameters getAlgorithmParameters(java.security.spec.ECParameterSpec)>(r2);
        specialinvoke $r7.<sun.security.x509.AlgorithmId: void <init>(sun.security.util.ObjectIdentifier,java.security.AlgorithmParameters)>($r3, $r8);
        r0.<sun.security.ec.ECPrivateKeyImpl: sun.security.x509.AlgorithmId algid> = $r7;

     label0:
        $r9 = new sun.security.util.DerOutputStream;
        specialinvoke $r9.<sun.security.util.DerOutputStream: void <init>()>();
        r4 = $r9;
        virtualinvoke r4.<sun.security.util.DerOutputStream: void putInteger(int)>(1);
        $r10 = virtualinvoke r1.<java.math.BigInteger: byte[] toByteArray()>();
        r5 = staticinvoke <sun.security.ec.ECParameters: byte[] trimZeroes(byte[])>($r10);
        virtualinvoke r4.<sun.security.util.DerOutputStream: void putOctetString(byte[])>(r5);
        $r11 = new sun.security.util.DerValue;
        $r12 = virtualinvoke r4.<sun.security.util.DerOutputStream: byte[] toByteArray()>();
        specialinvoke $r11.<sun.security.util.DerValue: void <init>(byte,byte[])>(48, $r12);
        r6 = $r11;
        $r13 = virtualinvoke r6.<sun.security.util.DerValue: byte[] toByteArray()>();
        r0.<sun.security.ec.ECPrivateKeyImpl: byte[] key> = $r13;

     label1:
        goto label3;

     label2:
        $r14 := @caughtexception;
        r15 = $r14;
        $r16 = new java.security.InvalidKeyException;
        specialinvoke $r16.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r15);
        throw $r16;

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public java.lang.String getAlgorithm()
    {
        sun.security.ec.ECPrivateKeyImpl r0;

        r0 := @this: sun.security.ec.ECPrivateKeyImpl;
        return "EC";
    }

    public java.math.BigInteger getS()
    {
        sun.security.ec.ECPrivateKeyImpl r0;
        java.math.BigInteger $r1;

        r0 := @this: sun.security.ec.ECPrivateKeyImpl;
        $r1 = r0.<sun.security.ec.ECPrivateKeyImpl: java.math.BigInteger s>;
        return $r1;
    }

    public java.security.spec.ECParameterSpec getParams()
    {
        sun.security.ec.ECPrivateKeyImpl r0;
        java.security.spec.ECParameterSpec $r1;

        r0 := @this: sun.security.ec.ECPrivateKeyImpl;
        $r1 = r0.<sun.security.ec.ECPrivateKeyImpl: java.security.spec.ECParameterSpec params>;
        return $r1;
    }

    protected void parseKeyBits() throws java.security.InvalidKeyException
    {
        sun.security.ec.ECPrivateKeyImpl r0;
        sun.security.util.DerInputStream $r1, r2, r4;
        sun.security.util.DerValue r3, r6;
        int i0, $i2;
        byte[] r5, $r7;
        byte $b1;
        java.io.IOException $r8, $r9, $r21, r22;
        java.math.BigInteger $r10;
        boolean $z0, $z1;
        java.security.InvalidKeyException $r11, $r18, $r23, $r26;
        java.lang.StringBuilder $r12, $r13, $r14;
        java.lang.String $r15;
        sun.security.x509.AlgorithmId $r16;
        java.security.AlgorithmParameters r17;
        java.security.spec.AlgorithmParameterSpec $r19;
        java.security.spec.ECParameterSpec $r20;
        java.security.spec.InvalidParameterSpecException $r24, r25;

        r0 := @this: sun.security.ec.ECPrivateKeyImpl;

     label0:
        $r1 = new sun.security.util.DerInputStream;
        $r7 = r0.<sun.security.ec.ECPrivateKeyImpl: byte[] key>;
        specialinvoke $r1.<sun.security.util.DerInputStream: void <init>(byte[])>($r7);
        r2 = $r1;
        r3 = virtualinvoke r2.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $b1 = r3.<sun.security.util.DerValue: byte tag>;
        if $b1 == 48 goto label1;

        $r8 = new java.io.IOException;
        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Not a SEQUENCE");
        throw $r8;

     label1:
        r4 = r3.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        i0 = virtualinvoke r4.<sun.security.util.DerInputStream: int getInteger()>();
        if i0 == 1 goto label2;

        $r9 = new java.io.IOException;
        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Version must be 1");
        throw $r9;

     label2:
        r5 = virtualinvoke r4.<sun.security.util.DerInputStream: byte[] getOctetString()>();
        $r10 = new java.math.BigInteger;
        specialinvoke $r10.<java.math.BigInteger: void <init>(int,byte[])>(1, r5);
        r0.<sun.security.ec.ECPrivateKeyImpl: java.math.BigInteger s> = $r10;

     label3:
        $i2 = virtualinvoke r4.<sun.security.util.DerInputStream: int available()>();
        if $i2 == 0 goto label7;

        r6 = virtualinvoke r4.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $z0 = virtualinvoke r6.<sun.security.util.DerValue: boolean isContextSpecific(byte)>(0);
        if $z0 == 0 goto label4;

        goto label6;

     label4:
        $z1 = virtualinvoke r6.<sun.security.util.DerValue: boolean isContextSpecific(byte)>(1);
        if $z1 == 0 goto label5;

        goto label6;

     label5:
        $r11 = new java.security.InvalidKeyException;
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected value: ");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r11.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r15);
        throw $r11;

     label6:
        goto label3;

     label7:
        $r16 = r0.<sun.security.ec.ECPrivateKeyImpl: sun.security.x509.AlgorithmId algid>;
        r17 = virtualinvoke $r16.<sun.security.x509.AlgorithmId: java.security.AlgorithmParameters getParameters()>();
        if r17 != null goto label8;

        $r18 = new java.security.InvalidKeyException;
        specialinvoke $r18.<java.security.InvalidKeyException: void <init>(java.lang.String)>("EC domain parameters must be encoded in the algorithm identifier");
        throw $r18;

     label8:
        $r19 = virtualinvoke r17.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>(class "java/security/spec/ECParameterSpec");
        $r20 = (java.security.spec.ECParameterSpec) $r19;
        r0.<sun.security.ec.ECPrivateKeyImpl: java.security.spec.ECParameterSpec params> = $r20;

     label9:
        goto label12;

     label10:
        $r21 := @caughtexception;
        r22 = $r21;
        $r23 = new java.security.InvalidKeyException;
        specialinvoke $r23.<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid EC private key", r22);
        throw $r23;

     label11:
        $r24 := @caughtexception;
        r25 = $r24;
        $r26 = new java.security.InvalidKeyException;
        specialinvoke $r26.<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid EC private key", r25);
        throw $r26;

     label12:
        return;

        catch java.io.IOException from label0 to label9 with label10;
        catch java.security.spec.InvalidParameterSpecException from label0 to label9 with label11;
    }
}
