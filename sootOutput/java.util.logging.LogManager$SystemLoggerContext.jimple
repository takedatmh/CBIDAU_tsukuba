class java.util.logging.LogManager$SystemLoggerContext extends java.util.logging.LogManager$LoggerContext
{

    void <init>()
    {
        java.util.logging.LogManager$SystemLoggerContext r0;

        r0 := @this: java.util.logging.LogManager$SystemLoggerContext;
        specialinvoke r0.<java.util.logging.LogManager$LoggerContext: void <init>(java.util.logging.LogManager$1)>(null);
        return;
    }

    java.util.logging.Logger demandLogger(java.lang.String, java.lang.String)
    {
        java.util.logging.LogManager$SystemLoggerContext r0;
        java.lang.String r1, r2;
        java.util.logging.Logger r3, r4, $r5;
        boolean $z0;

        r0 := @this: java.util.logging.LogManager$SystemLoggerContext;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 = virtualinvoke r0.<java.util.logging.LogManager$SystemLoggerContext: java.util.logging.Logger findLogger(java.lang.String)>(r1);
        if r3 != null goto label3;

        $r5 = new java.util.logging.Logger;
        specialinvoke $r5.<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String,java.lang.Class,boolean)>(r1, r2, null, 1);
        r4 = $r5;

     label0:
        $z0 = virtualinvoke r0.<java.util.logging.LogManager$SystemLoggerContext: boolean addLocalLogger(java.util.logging.Logger)>(r4);
        if $z0 == 0 goto label1;

        r3 = r4;
        goto label2;

     label1:
        r3 = virtualinvoke r0.<java.util.logging.LogManager$SystemLoggerContext: java.util.logging.Logger findLogger(java.lang.String)>(r1);

     label2:
        if r3 == null goto label0;

     label3:
        return r3;
    }
}
