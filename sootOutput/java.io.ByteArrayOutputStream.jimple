public class java.io.ByteArrayOutputStream extends java.io.OutputStream
{
    protected byte[] buf;
    protected int count;
    private static final int MAX_ARRAY_SIZE;

    public void <init>()
    {
        java.io.ByteArrayOutputStream r0;

        r0 := @this: java.io.ByteArrayOutputStream;
        specialinvoke r0.<java.io.ByteArrayOutputStream: void <init>(int)>(32);
        return;
    }

    public void <init>(int)
    {
        java.io.ByteArrayOutputStream r0;
        int i0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r5;
        byte[] $r6;

        r0 := @this: java.io.ByteArrayOutputStream;
        i0 := @parameter0: int;
        specialinvoke r0.<java.io.OutputStream: void <init>()>();
        if i0 >= 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative initial size: ");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r2;

     label0:
        $r6 = newarray (byte)[i0];
        r0.<java.io.ByteArrayOutputStream: byte[] buf> = $r6;
        return;
    }

    private void ensureCapacity(int)
    {
        java.io.ByteArrayOutputStream r0;
        int i0, $i1, $i2;
        byte[] $r1;

        r0 := @this: java.io.ByteArrayOutputStream;
        i0 := @parameter0: int;
        $r1 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;
        $i1 = lengthof $r1;
        $i2 = i0 - $i1;
        if $i2 <= 0 goto label0;

        specialinvoke r0.<java.io.ByteArrayOutputStream: void grow(int)>(i0);

     label0:
        return;
    }

    private void grow(int)
    {
        java.io.ByteArrayOutputStream r0;
        int i0, i1, i2, $i3, $i4;
        byte[] $r1, $r2, $r3;

        r0 := @this: java.io.ByteArrayOutputStream;
        i0 := @parameter0: int;
        $r1 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;
        i1 = lengthof $r1;
        i2 = i1 << 1;
        $i3 = i2 - i0;
        if $i3 >= 0 goto label0;

        i2 = i0;

     label0:
        $i4 = i2 - 2147483639;
        if $i4 <= 0 goto label1;

        i2 = staticinvoke <java.io.ByteArrayOutputStream: int hugeCapacity(int)>(i0);

     label1:
        $r2 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;
        $r3 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r2, i2);
        r0.<java.io.ByteArrayOutputStream: byte[] buf> = $r3;
        return;
    }

    private static int hugeCapacity(int)
    {
        int i0, $i1;
        java.lang.OutOfMemoryError $r0;

        i0 := @parameter0: int;
        if i0 >= 0 goto label0;

        $r0 = new java.lang.OutOfMemoryError;
        specialinvoke $r0.<java.lang.OutOfMemoryError: void <init>()>();
        throw $r0;

     label0:
        if i0 <= 2147483639 goto label1;

        $i1 = 2147483647;
        goto label2;

     label1:
        $i1 = 2147483639;

     label2:
        return $i1;
    }

    public synchronized void write(int)
    {
        java.io.ByteArrayOutputStream r0;
        int i0, $i1, $i2, $i3, $i5, $i6;
        byte[] $r1;
        byte $b4;

        r0 := @this: java.io.ByteArrayOutputStream;
        i0 := @parameter0: int;
        $i1 = r0.<java.io.ByteArrayOutputStream: int count>;
        $i2 = $i1 + 1;
        specialinvoke r0.<java.io.ByteArrayOutputStream: void ensureCapacity(int)>($i2);
        $r1 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;
        $i3 = r0.<java.io.ByteArrayOutputStream: int count>;
        $b4 = (byte) i0;
        $r1[$i3] = $b4;
        $i5 = r0.<java.io.ByteArrayOutputStream: int count>;
        $i6 = $i5 + 1;
        r0.<java.io.ByteArrayOutputStream: int count> = $i6;
        return;
    }

    public synchronized void write(byte[], int, int)
    {
        java.io.ByteArrayOutputStream r0;
        byte[] r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.IndexOutOfBoundsException $r2;

        r0 := @this: java.io.ByteArrayOutputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i0 < 0 goto label0;

        $i2 = lengthof r1;
        if i0 > $i2 goto label0;

        if i1 < 0 goto label0;

        $i3 = i0 + i1;
        $i4 = lengthof r1;
        $i5 = $i3 - $i4;
        if $i5 <= 0 goto label1;

     label0:
        $r2 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r2;

     label1:
        $i6 = r0.<java.io.ByteArrayOutputStream: int count>;
        $i7 = $i6 + i1;
        specialinvoke r0.<java.io.ByteArrayOutputStream: void ensureCapacity(int)>($i7);
        $r3 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;
        $i8 = r0.<java.io.ByteArrayOutputStream: int count>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r3, $i8, i1);
        $i9 = r0.<java.io.ByteArrayOutputStream: int count>;
        $i10 = $i9 + i1;
        r0.<java.io.ByteArrayOutputStream: int count> = $i10;
        return;
    }

    public synchronized void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        java.io.ByteArrayOutputStream r0;
        java.io.OutputStream r1;
        byte[] $r2;
        int $i0;

        r0 := @this: java.io.ByteArrayOutputStream;
        r1 := @parameter0: java.io.OutputStream;
        $r2 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;
        $i0 = r0.<java.io.ByteArrayOutputStream: int count>;
        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i0);
        return;
    }

    public synchronized void reset()
    {
        java.io.ByteArrayOutputStream r0;

        r0 := @this: java.io.ByteArrayOutputStream;
        r0.<java.io.ByteArrayOutputStream: int count> = 0;
        return;
    }

    public synchronized byte[] toByteArray()
    {
        java.io.ByteArrayOutputStream r0;
        byte[] $r1, $r2;
        int $i0;

        r0 := @this: java.io.ByteArrayOutputStream;
        $r1 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;
        $i0 = r0.<java.io.ByteArrayOutputStream: int count>;
        $r2 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r1, $i0);
        return $r2;
    }

    public synchronized int size()
    {
        java.io.ByteArrayOutputStream r0;
        int $i0;

        r0 := @this: java.io.ByteArrayOutputStream;
        $i0 = r0.<java.io.ByteArrayOutputStream: int count>;
        return $i0;
    }

    public synchronized java.lang.String toString()
    {
        java.io.ByteArrayOutputStream r0;
        java.lang.String $r1;
        byte[] $r2;
        int $i0;

        r0 := @this: java.io.ByteArrayOutputStream;
        $r1 = new java.lang.String;
        $r2 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;
        $i0 = r0.<java.io.ByteArrayOutputStream: int count>;
        specialinvoke $r1.<java.lang.String: void <init>(byte[],int,int)>($r2, 0, $i0);
        return $r1;
    }

    public synchronized java.lang.String toString(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.io.ByteArrayOutputStream r0;
        java.lang.String r1, $r2;
        byte[] $r3;
        int $i0;

        r0 := @this: java.io.ByteArrayOutputStream;
        r1 := @parameter0: java.lang.String;
        $r2 = new java.lang.String;
        $r3 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;
        $i0 = r0.<java.io.ByteArrayOutputStream: int count>;
        specialinvoke $r2.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r3, 0, $i0, r1);
        return $r2;
    }

    public synchronized java.lang.String toString(int)
    {
        java.io.ByteArrayOutputStream r0;
        int i0, $i1;
        java.lang.String $r1;
        byte[] $r2;

        r0 := @this: java.io.ByteArrayOutputStream;
        i0 := @parameter0: int;
        $r1 = new java.lang.String;
        $r2 = r0.<java.io.ByteArrayOutputStream: byte[] buf>;
        $i1 = r0.<java.io.ByteArrayOutputStream: int count>;
        specialinvoke $r1.<java.lang.String: void <init>(byte[],int,int,int)>($r2, i0, 0, $i1);
        return $r1;
    }

    public void close() throws java.io.IOException
    {
        java.io.ByteArrayOutputStream r0;

        r0 := @this: java.io.ByteArrayOutputStream;
        return;
    }
}
