public final class java.security.AccessController extends java.lang.Object
{

    private void <init>()
    {
        java.security.AccessController r0;

        r0 := @this: java.security.AccessController;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static native java.lang.Object doPrivileged(java.security.PrivilegedAction);

    public static java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedAction)
    {
        java.security.PrivilegedAction r0;
        java.security.AccessControlContext r1, $r5;
        java.security.DomainCombiner r2;
        java.lang.Class $r3;
        java.lang.Object $r4, $r6;

        r0 := @parameter0: java.security.PrivilegedAction;
        r1 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getStackAccessControlContext()>();
        if r1 != null goto label0;

        $r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(r0);
        return $r4;

     label0:
        r2 = virtualinvoke r1.<java.security.AccessControlContext: java.security.DomainCombiner getAssignedCombiner()>();
        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r5 = staticinvoke <java.security.AccessController: java.security.AccessControlContext preserveCombiner(java.security.DomainCombiner,java.lang.Class)>(r2, $r3);
        $r6 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>(r0, $r5);
        return $r6;
    }

    public static native java.lang.Object doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext);

    public static native java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction) throws java.security.PrivilegedActionException;

    public static java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction) throws java.security.PrivilegedActionException
    {
        java.security.PrivilegedExceptionAction r0;
        java.security.AccessControlContext r1, $r5;
        java.security.DomainCombiner r2;
        java.lang.Class $r3;
        java.lang.Object $r4, $r6;

        r0 := @parameter0: java.security.PrivilegedExceptionAction;
        r1 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getStackAccessControlContext()>();
        if r1 != null goto label0;

        $r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(r0);
        return $r4;

     label0:
        r2 = virtualinvoke r1.<java.security.AccessControlContext: java.security.DomainCombiner getAssignedCombiner()>();
        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r5 = staticinvoke <java.security.AccessController: java.security.AccessControlContext preserveCombiner(java.security.DomainCombiner,java.lang.Class)>(r2, $r3);
        $r6 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>(r0, $r5);
        return $r6;
    }

    private static java.security.AccessControlContext preserveCombiner(java.security.DomainCombiner, java.lang.Class)
    {
        java.security.DomainCombiner r0;
        java.lang.Class r1;
        java.security.AccessController$1 $r2;
        java.security.ProtectionDomain r3;
        java.security.ProtectionDomain[] r4, $r6, $r9;
        java.lang.Object $r5;
        java.security.AccessControlContext $r7, $r8;

        r0 := @parameter0: java.security.DomainCombiner;
        r1 := @parameter1: java.lang.Class;
        $r2 = new java.security.AccessController$1;
        specialinvoke $r2.<java.security.AccessController$1: void <init>(java.lang.Class)>(r1);
        $r5 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);
        r3 = (java.security.ProtectionDomain) $r5;
        $r6 = newarray (java.security.ProtectionDomain)[1];
        $r6[0] = r3;
        r4 = $r6;
        if r0 != null goto label0;

        $r7 = new java.security.AccessControlContext;
        specialinvoke $r7.<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[])>(r4);
        return $r7;

     label0:
        $r8 = new java.security.AccessControlContext;
        $r9 = interfaceinvoke r0.<java.security.DomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>(r4, null);
        specialinvoke $r8.<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[],java.security.DomainCombiner)>($r9, r0);
        return $r8;
    }

    public static native java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction, java.security.AccessControlContext) throws java.security.PrivilegedActionException;

    private static native java.security.AccessControlContext getStackAccessControlContext();

    static native java.security.AccessControlContext getInheritedAccessControlContext();

    public static java.security.AccessControlContext getContext()
    {
        java.security.AccessControlContext r0, $r1, $r2;

        r0 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getStackAccessControlContext()>();
        if r0 != null goto label0;

        $r1 = new java.security.AccessControlContext;
        specialinvoke $r1.<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[],boolean)>(null, 1);
        return $r1;

     label0:
        $r2 = virtualinvoke r0.<java.security.AccessControlContext: java.security.AccessControlContext optimize()>();
        return $r2;
    }

    public static void checkPermission(java.security.Permission) throws java.security.AccessControlException
    {
        java.security.Permission r0;
        java.security.AccessControlContext r1, r15;
        sun.security.util.Debug r2;
        boolean z0, $z1, $z2, z3, $z5, $z6, $z7, $z8, $z9;
        java.lang.NullPointerException $r3;
        java.lang.StringBuilder $r4, $r5, $r8, $r11, $r12, $r13;
        java.lang.Class $r6;
        java.lang.String $r7, $r9, $r14;

        r0 := @parameter0: java.security.Permission;
        if r0 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("permission can\'t be null");
        throw $r3;

     label0:
        r1 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getStackAccessControlContext()>();
        if r1 != null goto label10;

        r2 = staticinvoke <java.security.AccessControlContext: sun.security.util.Debug getDebug()>();
        z0 = 0;
        if r2 == null goto label6;

        $z1 = staticinvoke <sun.security.util.Debug: boolean isOn(java.lang.String)>("codebase=");
        if $z1 != 0 goto label1;

        $z2 = 1;
        goto label2;

     label1:
        $z2 = 0;

     label2:
        z3 = $z2;
        $z5 = staticinvoke <sun.security.util.Debug: boolean isOn(java.lang.String)>("permission=");
        if $z5 == 0 goto label3;

        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("permission=");
        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getCanonicalName()>();
        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        $z6 = staticinvoke <sun.security.util.Debug: boolean isOn(java.lang.String)>($r9);
        if $z6 == 0 goto label4;

     label3:
        $z7 = 1;
        goto label5;

     label4:
        $z7 = 0;

     label5:
        z0 = z3 & $z7;

     label6:
        if z0 == 0 goto label7;

        $z8 = staticinvoke <sun.security.util.Debug: boolean isOn(java.lang.String)>("stack");
        if $z8 == 0 goto label7;

        staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        staticinvoke <java.lang.Thread: void dumpStack()>();

     label7:
        if z0 == 0 goto label8;

        $z9 = staticinvoke <sun.security.util.Debug: boolean isOn(java.lang.String)>("domain");
        if $z9 == 0 goto label8;

        virtualinvoke r2.<sun.security.util.Debug: void println(java.lang.String)>("domain (context is null)");

     label8:
        if z0 == 0 goto label9;

        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("access allowed ");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<sun.security.util.Debug: void println(java.lang.String)>($r14);

     label9:
        return;

     label10:
        r15 = virtualinvoke r1.<java.security.AccessControlContext: java.security.AccessControlContext optimize()>();
        virtualinvoke r15.<java.security.AccessControlContext: void checkPermission(java.security.Permission)>(r0);
        return;
    }
}
