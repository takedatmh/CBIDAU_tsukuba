public final class java.lang.Integer extends java.lang.Number implements java.lang.Comparable
{
    public static final int MIN_VALUE;
    public static final int MAX_VALUE;
    public static final java.lang.Class TYPE;
    static final char[] digits;
    static final char[] DigitTens;
    static final char[] DigitOnes;
    static final int[] sizeTable;
    private final int value;
    public static final int SIZE;
    private static final long serialVersionUID;
    static final boolean $assertionsDisabled;

    public static java.lang.String toString(int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i8, $i10;
        char[] r0, $r1, $r3;
        boolean z0, $z1;
        java.lang.String $r2, $r4;
        char $c7, $c9;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i1 < 2 goto label0;

        if i1 <= 36 goto label1;

     label0:
        i1 = 10;

     label1:
        if i1 != 10 goto label2;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);
        return $r2;

     label2:
        r0 = newarray (char)[33];
        if i0 >= 0 goto label3;

        $z1 = 1;
        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;
        i2 = 32;
        if z0 != 0 goto label5;

        i0 = neg i0;

     label5:
        $i3 = neg i1;
        if i0 > $i3 goto label6;

        $i4 = i2;
        i2 = i2 + -1;
        $r1 = <java.lang.Integer: char[] digits>;
        $i5 = i0 % i1;
        $i6 = neg $i5;
        $c7 = $r1[$i6];
        r0[$i4] = $c7;
        i0 = i0 / i1;
        goto label5;

     label6:
        $r3 = <java.lang.Integer: char[] digits>;
        $i8 = neg i0;
        $c9 = $r3[$i8];
        r0[i2] = $c9;
        if z0 == 0 goto label7;

        i2 = i2 + -1;
        r0[i2] = 45;

     label7:
        $r4 = new java.lang.String;
        $i10 = 33 - i2;
        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r0, i2, $i10);
        return $r4;
    }

    public static java.lang.String toHexString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toUnsignedString(int,int)>(i0, 4);
        return $r0;
    }

    public static java.lang.String toOctalString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toUnsignedString(int,int)>(i0, 3);
        return $r0;
    }

    public static java.lang.String toBinaryString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toUnsignedString(int,int)>(i0, 1);
        return $r0;
    }

    private static java.lang.String toUnsignedString(int, int)
    {
        int i0, i1, i2, i3, i4, $i5, $i7;
        char[] r0, $r1;
        char $c6;
        java.lang.String $r2;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r0 = newarray (char)[32];
        i2 = 32;
        i3 = 1 << i1;
        i4 = i3 - 1;

     label0:
        i2 = i2 + -1;
        $r1 = <java.lang.Integer: char[] digits>;
        $i5 = i0 & i4;
        $c6 = $r1[$i5];
        r0[i2] = $c6;
        i0 = i0 >>> i1;
        if i0 != 0 goto label0;

        $r2 = new java.lang.String;
        $i7 = 32 - i2;
        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>(r0, i2, $i7);
        return $r2;
    }

    public static java.lang.String toString(int)
    {
        int i0, i1, $i2, $i3, $i4;
        char[] r0;
        java.lang.String $r1;

        i0 := @parameter0: int;
        if i0 != -2147483648 goto label0;

        return "-2147483648";

     label0:
        if i0 >= 0 goto label1;

        $i2 = neg i0;
        $i3 = staticinvoke <java.lang.Integer: int stringSize(int)>($i2);
        $i4 = $i3 + 1;
        goto label2;

     label1:
        $i4 = staticinvoke <java.lang.Integer: int stringSize(int)>(i0);

     label2:
        i1 = $i4;
        r0 = newarray (char)[i1];
        staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(i0, i1, r0);
        $r1 = new java.lang.String;
        specialinvoke $r1.<java.lang.String: void <init>(char[],boolean)>(r0, 1);
        return $r1;
    }

    static void getChars(int, int, char[])
    {
        int i0, i1, i2, i4, i5, $i6, $i7, $i8, $i9, $i10, i11, $i14, i15, $i16, $i17, $i18, i19, i21;
        char[] r0, $r1, $r2, $r3;
        char c3, $c12, $c13, $c20;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r0 := @parameter2: char[];
        i2 = i1;
        c3 = 0;
        if i0 >= 0 goto label0;

        c3 = 45;
        i0 = neg i0;

     label0:
        if i0 < 65536 goto label1;

        i4 = i0 / 100;
        $i6 = i4 << 6;
        $i7 = i4 << 5;
        $i8 = $i6 + $i7;
        $i9 = i4 << 2;
        $i10 = $i8 + $i9;
        i5 = i0 - $i10;
        i0 = i4;
        i11 = i2 + -1;
        $r1 = <java.lang.Integer: char[] DigitOnes>;
        $c12 = $r1[i5];
        r0[i11] = $c12;
        i2 = i11 + -1;
        $r2 = <java.lang.Integer: char[] DigitTens>;
        $c13 = $r2[i5];
        r0[i2] = $c13;
        goto label0;

     label1:
        $i14 = i0 * 52429;
        i15 = $i14 >>> 19;
        $i16 = i15 << 3;
        $i17 = i15 << 1;
        $i18 = $i16 + $i17;
        i19 = i0 - $i18;
        i2 = i2 + -1;
        $r3 = <java.lang.Integer: char[] digits>;
        $c20 = $r3[i19];
        r0[i2] = $c20;
        i0 = i15;
        if i0 != 0 goto label1;

        goto label2;

     label2:
        if c3 == 0 goto label3;

        i21 = i2 + -1;
        r0[i21] = c3;

     label3:
        return;
    }

    static int stringSize(int)
    {
        int i0, i1, $i2, $i3;
        int[] $r0;

        i0 := @parameter0: int;
        i1 = 0;

     label0:
        $r0 = <java.lang.Integer: int[] sizeTable>;
        $i2 = $r0[i1];
        if i0 > $i2 goto label1;

        $i3 = i1 + 1;
        return $i3;

     label1:
        i1 = i1 + 1;
        goto label0;
    }

    public static int parseInt(java.lang.String, int) throws java.lang.NumberFormatException
    {
        java.lang.String r0, $r7, $r13;
        int i0, i1, i2, i3, i4, i6, i7, $i8, i10, $i11, $i12;
        boolean z0;
        char c5, $c9;
        java.lang.NumberFormatException $r1, $r2, $r8, $r14, $r15, $r16, $r17, $r18, $r19;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        if r0 != null goto label0;

        $r1 = new java.lang.NumberFormatException;
        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>("null");
        throw $r1;

     label0:
        if i0 >= 2 goto label1;

        $r2 = new java.lang.NumberFormatException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("radix ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" less than Character.MIN_RADIX");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r7);
        throw $r2;

     label1:
        if i0 <= 36 goto label2;

        $r8 = new java.lang.NumberFormatException;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("radix ");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" greater than Character.MAX_RADIX");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r13);
        throw $r8;

     label2:
        i1 = 0;
        z0 = 0;
        i2 = 0;
        i3 = virtualinvoke r0.<java.lang.String: int length()>();
        i4 = -2147483647;
        if i3 <= 0 goto label12;

        c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);
        if c5 >= 48 goto label6;

        if c5 != 45 goto label3;

        z0 = 1;
        i4 = -2147483648;
        goto label4;

     label3:
        if c5 == 43 goto label4;

        $r14 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(r0);
        throw $r14;

     label4:
        if i3 != 1 goto label5;

        $r15 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(r0);
        throw $r15;

     label5:
        i2 = i2 + 1;

     label6:
        i6 = i4 / i0;

     label7:
        if i2 >= i3 goto label11;

        $i8 = i2;
        i2 = i2 + 1;
        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i8);
        i7 = staticinvoke <java.lang.Character: int digit(char,int)>($c9, i0);
        if i7 >= 0 goto label8;

        $r16 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(r0);
        throw $r16;

     label8:
        if i1 >= i6 goto label9;

        $r17 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(r0);
        throw $r17;

     label9:
        i10 = i1 * i0;
        $i11 = i4 + i7;
        if i10 >= $i11 goto label10;

        $r18 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(r0);
        throw $r18;

     label10:
        i1 = i10 - i7;
        goto label7;

     label11:
        goto label13;

     label12:
        $r19 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(r0);
        throw $r19;

     label13:
        if z0 == 0 goto label14;

        $i12 = i1;
        goto label15;

     label14:
        $i12 = neg i1;

     label15:
        return $i12;
    }

    public static int parseInt(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        int $i0;

        r0 := @parameter0: java.lang.String;
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r0, 10);
        return $i0;
    }

    public static java.lang.Integer valueOf(java.lang.String, int) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        int i0, $i1;
        java.lang.Integer $r1;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r0, i0);
        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
        return $r1;
    }

    public static java.lang.Integer valueOf(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @parameter0: java.lang.String;
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r0, 10);
        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
        return $r1;
    }

    public static java.lang.Integer valueOf(int)
    {
        int i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.AssertionError $r0;
        java.lang.Integer[] $r1;
        java.lang.Integer $r2, $r3;

        i0 := @parameter0: int;
        $z0 = <java.lang.Integer: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $i1 = <java.lang.Integer$IntegerCache: int high>;
        if $i1 >= 127 goto label0;

        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label0:
        if i0 < -128 goto label1;

        $i2 = <java.lang.Integer$IntegerCache: int high>;
        if i0 > $i2 goto label1;

        $r1 = <java.lang.Integer$IntegerCache: java.lang.Integer[] cache>;
        $i3 = i0 + 128;
        $r2 = $r1[$i3];
        return $r2;

     label1:
        $r3 = new java.lang.Integer;
        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i0);
        return $r3;
    }

    public void <init>(int)
    {
        java.lang.Integer r0;
        int i0;

        r0 := @this: java.lang.Integer;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.Number: void <init>()>();
        r0.<java.lang.Integer: int value> = i0;
        return;
    }

    public void <init>(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.Integer r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: java.lang.Integer;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.lang.Number: void <init>()>();
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r1, 10);
        r0.<java.lang.Integer: int value> = $i0;
        return;
    }

    public byte byteValue()
    {
        java.lang.Integer r0;
        int $i0;
        byte $b1;

        r0 := @this: java.lang.Integer;
        $i0 = r0.<java.lang.Integer: int value>;
        $b1 = (byte) $i0;
        return $b1;
    }

    public short shortValue()
    {
        java.lang.Integer r0;
        int $i0;
        short $s1;

        r0 := @this: java.lang.Integer;
        $i0 = r0.<java.lang.Integer: int value>;
        $s1 = (short) $i0;
        return $s1;
    }

    public int intValue()
    {
        java.lang.Integer r0;
        int $i0;

        r0 := @this: java.lang.Integer;
        $i0 = r0.<java.lang.Integer: int value>;
        return $i0;
    }

    public long longValue()
    {
        java.lang.Integer r0;
        int $i0;
        long $l1;

        r0 := @this: java.lang.Integer;
        $i0 = r0.<java.lang.Integer: int value>;
        $l1 = (long) $i0;
        return $l1;
    }

    public float floatValue()
    {
        java.lang.Integer r0;
        int $i0;
        float $f0;

        r0 := @this: java.lang.Integer;
        $i0 = r0.<java.lang.Integer: int value>;
        $f0 = (float) $i0;
        return $f0;
    }

    public double doubleValue()
    {
        java.lang.Integer r0;
        int $i0;
        double $d0;

        r0 := @this: java.lang.Integer;
        $i0 = r0.<java.lang.Integer: int value>;
        $d0 = (double) $i0;
        return $d0;
    }

    public java.lang.String toString()
    {
        java.lang.Integer r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: java.lang.Integer;
        $i0 = r0.<java.lang.Integer: int value>;
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);
        return $r1;
    }

    public int hashCode()
    {
        java.lang.Integer r0;
        int $i0;

        r0 := @this: java.lang.Integer;
        $i0 = r0.<java.lang.Integer: int value>;
        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Integer r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        int $i0, $i1;

        r0 := @this: java.lang.Integer;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.lang.Integer;
        if $z0 == 0 goto label2;

        $i0 = r0.<java.lang.Integer: int value>;
        $r2 = (java.lang.Integer) r1;
        $i1 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();
        if $i0 != $i1 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;

     label2:
        return 0;
    }

    public static java.lang.Integer getInteger(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Integer $r1;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>(r0, null);
        return $r1;
    }

    public static java.lang.Integer getInteger(java.lang.String, int)
    {
        java.lang.String r0;
        int i0;
        java.lang.Integer r1, $r2;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r1 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>(r0, null);
        if r1 != null goto label0;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        goto label1;

     label0:
        $r2 = r1;

     label1:
        return $r2;
    }

    public static java.lang.Integer getInteger(java.lang.String, java.lang.Integer)
    {
        java.lang.String r0, r2;
        java.lang.Integer r1, $r7;
        java.lang.IllegalArgumentException r3, $r4;
        java.lang.NullPointerException $r5, r6;
        java.lang.NumberFormatException $r8, r9;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.Integer;
        r2 = null;

     label0:
        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0);

     label1:
        goto label4;

     label2:
        $r4 := @caughtexception;
        r3 = $r4;
        goto label4;

     label3:
        $r5 := @caughtexception;
        r6 = $r5;

     label4:
        if r2 == null goto label8;

     label5:
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(r2);

     label6:
        return $r7;

     label7:
        $r8 := @caughtexception;
        r9 = $r8;

     label8:
        return r1;

        catch java.lang.IllegalArgumentException from label0 to label1 with label2;
        catch java.lang.NullPointerException from label0 to label1 with label3;
        catch java.lang.NumberFormatException from label5 to label6 with label7;
    }

    public static java.lang.Integer decode(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0, r3, $r6, $r12, $r14;
        byte b0;
        int i1, $i3, $i4, $i5, $i6, $i7;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        char c2;
        java.lang.Integer r1, $r7, r8;
        java.lang.NumberFormatException r2, $r4, $r5, $r9;
        java.lang.StringBuilder $r10, $r11, $r13;

        r0 := @parameter0: java.lang.String;
        b0 = 10;
        i1 = 0;
        z0 = 0;
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();
        if $i3 != 0 goto label0;

        $r4 = new java.lang.NumberFormatException;
        specialinvoke $r4.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Zero length string");
        throw $r4;

     label0:
        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);
        if c2 != 45 goto label1;

        z0 = 1;
        i1 = i1 + 1;
        goto label2;

     label1:
        if c2 != 43 goto label2;

        i1 = i1 + 1;

     label2:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0x", i1);
        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0X", i1);
        if $z2 == 0 goto label4;

     label3:
        i1 = i1 + 2;
        b0 = 16;
        goto label6;

     label4:
        $z3 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("#", i1);
        if $z3 == 0 goto label5;

        i1 = i1 + 1;
        b0 = 16;
        goto label6;

     label5:
        $z4 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("0", i1);
        if $z4 == 0 goto label6;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();
        $i5 = 1 + i1;
        if $i4 <= $i5 goto label6;

        i1 = i1 + 1;
        b0 = 8;

     label6:
        $z5 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("-", i1);
        if $z5 != 0 goto label7;

        $z6 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("+", i1);
        if $z6 == 0 goto label8;

     label7:
        $r5 = new java.lang.NumberFormatException;
        specialinvoke $r5.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Sign character in wrong position");
        throw $r5;

     label8:
        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i1);
        r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>($r6, b0);
        if z0 == 0 goto label9;

        $i6 = virtualinvoke r1.<java.lang.Integer: int intValue()>();
        $i7 = neg $i6;
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);
        goto label10;

     label9:
        $r7 = r1;

     label10:
        r8 = $r7;

     label11:
        goto label15;

     label12:
        $r9 := @caughtexception;
        r2 = $r9;
        if z0 == 0 goto label13;

        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");
        $r12 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i1);
        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        goto label14;

     label13:
        $r14 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i1);

     label14:
        r3 = $r14;
        r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>(r3, b0);

     label15:
        return r8;

        catch java.lang.NumberFormatException from label8 to label11 with label12;
    }

    public int compareTo(java.lang.Integer)
    {
        java.lang.Integer r0, r1;
        int $i0, $i1, $i2;

        r0 := @this: java.lang.Integer;
        r1 := @parameter0: java.lang.Integer;
        $i0 = r0.<java.lang.Integer: int value>;
        $i1 = r1.<java.lang.Integer: int value>;
        $i2 = staticinvoke <java.lang.Integer: int compare(int,int)>($i0, $i1);
        return $i2;
    }

    public static int compare(int, int)
    {
        int i0, i1;
        byte $b2;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i0 >= i1 goto label0;

        $b2 = -1;
        goto label2;

     label0:
        if i0 != i1 goto label1;

        $b2 = 0;
        goto label2;

     label1:
        $b2 = 1;

     label2:
        return $b2;
    }

    public static int highestOneBit(int)
    {
        int i0, $i1, i2, $i3, i4, $i5, i6, $i7, i8, $i9, i10, $i11, $i12;

        i0 := @parameter0: int;
        $i1 = i0 >> 1;
        i2 = i0 | $i1;
        $i3 = i2 >> 2;
        i4 = i2 | $i3;
        $i5 = i4 >> 4;
        i6 = i4 | $i5;
        $i7 = i6 >> 8;
        i8 = i6 | $i7;
        $i9 = i8 >> 16;
        i10 = i8 | $i9;
        $i11 = i10 >>> 1;
        $i12 = i10 - $i11;
        return $i12;
    }

    public static int lowestOneBit(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;
        $i1 = neg i0;
        $i2 = i0 & $i1;
        return $i2;
    }

    public static int numberOfLeadingZeros(int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;

        i0 := @parameter0: int;
        if i0 != 0 goto label0;

        return 32;

     label0:
        i1 = 1;
        $i2 = i0 >>> 16;
        if $i2 != 0 goto label1;

        i1 = i1 + 16;
        i0 = i0 << 16;

     label1:
        $i3 = i0 >>> 24;
        if $i3 != 0 goto label2;

        i1 = i1 + 8;
        i0 = i0 << 8;

     label2:
        $i4 = i0 >>> 28;
        if $i4 != 0 goto label3;

        i1 = i1 + 4;
        i0 = i0 << 4;

     label3:
        $i5 = i0 >>> 30;
        if $i5 != 0 goto label4;

        i1 = i1 + 2;
        i0 = i0 << 2;

     label4:
        $i6 = i0 >>> 31;
        i7 = i1 - $i6;
        return i7;
    }

    public static int numberOfTrailingZeros(int)
    {
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8;

        i0 := @parameter0: int;
        if i0 != 0 goto label0;

        return 32;

     label0:
        i1 = 31;
        i2 = i0 << 16;
        if i2 == 0 goto label1;

        i1 = i1 - 16;
        i0 = i2;

     label1:
        i3 = i0 << 8;
        if i3 == 0 goto label2;

        i1 = i1 - 8;
        i0 = i3;

     label2:
        i4 = i0 << 4;
        if i4 == 0 goto label3;

        i1 = i1 - 4;
        i0 = i4;

     label3:
        i5 = i0 << 2;
        if i5 == 0 goto label4;

        i1 = i1 - 2;
        i0 = i5;

     label4:
        $i6 = i0 << 1;
        $i7 = $i6 >>> 31;
        $i8 = i1 - $i7;
        return $i8;
    }

    public static int bitCount(int)
    {
        int i0, $i1, $i2, i3, $i4, $i5, $i6, i7, $i8, $i9, i10, $i11, i12, $i13, i14, $i15;

        i0 := @parameter0: int;
        $i1 = i0 >>> 1;
        $i2 = $i1 & 1431655765;
        i3 = i0 - $i2;
        $i4 = i3 & 858993459;
        $i5 = i3 >>> 2;
        $i6 = $i5 & 858993459;
        i7 = $i4 + $i6;
        $i8 = i7 >>> 4;
        $i9 = i7 + $i8;
        i10 = $i9 & 252645135;
        $i11 = i10 >>> 8;
        i12 = i10 + $i11;
        $i13 = i12 >>> 16;
        i14 = i12 + $i13;
        $i15 = i14 & 63;
        return $i15;
    }

    public static int rotateLeft(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i2 = i0 << i1;
        $i3 = neg i1;
        $i4 = i0 >>> $i3;
        $i5 = $i2 | $i4;
        return $i5;
    }

    public static int rotateRight(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i2 = i0 >>> i1;
        $i3 = neg i1;
        $i4 = i0 << $i3;
        $i5 = $i2 | $i4;
        return $i5;
    }

    public static int reverse(int)
    {
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24;

        i0 := @parameter0: int;
        $i1 = i0 & 1431655765;
        $i2 = $i1 << 1;
        $i3 = i0 >>> 1;
        $i4 = $i3 & 1431655765;
        i5 = $i2 | $i4;
        $i6 = i5 & 858993459;
        $i7 = $i6 << 2;
        $i8 = i5 >>> 2;
        $i9 = $i8 & 858993459;
        i10 = $i7 | $i9;
        $i11 = i10 & 252645135;
        $i12 = $i11 << 4;
        $i13 = i10 >>> 4;
        $i14 = $i13 & 252645135;
        i15 = $i12 | $i14;
        $i16 = i15 << 24;
        $i17 = i15 & 65280;
        $i18 = $i17 << 8;
        $i19 = $i16 | $i18;
        $i20 = i15 >>> 8;
        $i21 = $i20 & 65280;
        $i22 = $i19 | $i21;
        $i23 = i15 >>> 24;
        i24 = $i22 | $i23;
        return i24;
    }

    public static int signum(int)
    {
        int i0, $i1, $i2, $i3, $i4;

        i0 := @parameter0: int;
        $i1 = i0 >> 31;
        $i2 = neg i0;
        $i3 = $i2 >>> 31;
        $i4 = $i1 | $i3;
        return $i4;
    }

    public static int reverseBytes(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        i0 := @parameter0: int;
        $i1 = i0 >>> 24;
        $i2 = i0 >> 8;
        $i3 = $i2 & 65280;
        $i4 = $i1 | $i3;
        $i5 = i0 << 8;
        $i6 = $i5 & 16711680;
        $i7 = $i4 | $i6;
        $i8 = i0 << 24;
        $i9 = $i7 | $i8;
        return $i9;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Integer r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.lang.Integer;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.lang.Integer) r1;
        $i0 = virtualinvoke r0.<java.lang.Integer: int compareTo(java.lang.Integer)>($r2);
        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;
        char[] $r2, $r3, $r4;
        int[] $r5;

        $r0 = class "java/lang/Integer";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.lang.Integer: boolean $assertionsDisabled> = $z1;
        $r1 = staticinvoke <java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>("int");
        <java.lang.Integer: java.lang.Class TYPE> = $r1;
        $r2 = newarray (char)[36];
        $r2[0] = 48;
        $r2[1] = 49;
        $r2[2] = 50;
        $r2[3] = 51;
        $r2[4] = 52;
        $r2[5] = 53;
        $r2[6] = 54;
        $r2[7] = 55;
        $r2[8] = 56;
        $r2[9] = 57;
        $r2[10] = 97;
        $r2[11] = 98;
        $r2[12] = 99;
        $r2[13] = 100;
        $r2[14] = 101;
        $r2[15] = 102;
        $r2[16] = 103;
        $r2[17] = 104;
        $r2[18] = 105;
        $r2[19] = 106;
        $r2[20] = 107;
        $r2[21] = 108;
        $r2[22] = 109;
        $r2[23] = 110;
        $r2[24] = 111;
        $r2[25] = 112;
        $r2[26] = 113;
        $r2[27] = 114;
        $r2[28] = 115;
        $r2[29] = 116;
        $r2[30] = 117;
        $r2[31] = 118;
        $r2[32] = 119;
        $r2[33] = 120;
        $r2[34] = 121;
        $r2[35] = 122;
        <java.lang.Integer: char[] digits> = $r2;
        $r3 = newarray (char)[100];
        $r3[0] = 48;
        $r3[1] = 48;
        $r3[2] = 48;
        $r3[3] = 48;
        $r3[4] = 48;
        $r3[5] = 48;
        $r3[6] = 48;
        $r3[7] = 48;
        $r3[8] = 48;
        $r3[9] = 48;
        $r3[10] = 49;
        $r3[11] = 49;
        $r3[12] = 49;
        $r3[13] = 49;
        $r3[14] = 49;
        $r3[15] = 49;
        $r3[16] = 49;
        $r3[17] = 49;
        $r3[18] = 49;
        $r3[19] = 49;
        $r3[20] = 50;
        $r3[21] = 50;
        $r3[22] = 50;
        $r3[23] = 50;
        $r3[24] = 50;
        $r3[25] = 50;
        $r3[26] = 50;
        $r3[27] = 50;
        $r3[28] = 50;
        $r3[29] = 50;
        $r3[30] = 51;
        $r3[31] = 51;
        $r3[32] = 51;
        $r3[33] = 51;
        $r3[34] = 51;
        $r3[35] = 51;
        $r3[36] = 51;
        $r3[37] = 51;
        $r3[38] = 51;
        $r3[39] = 51;
        $r3[40] = 52;
        $r3[41] = 52;
        $r3[42] = 52;
        $r3[43] = 52;
        $r3[44] = 52;
        $r3[45] = 52;
        $r3[46] = 52;
        $r3[47] = 52;
        $r3[48] = 52;
        $r3[49] = 52;
        $r3[50] = 53;
        $r3[51] = 53;
        $r3[52] = 53;
        $r3[53] = 53;
        $r3[54] = 53;
        $r3[55] = 53;
        $r3[56] = 53;
        $r3[57] = 53;
        $r3[58] = 53;
        $r3[59] = 53;
        $r3[60] = 54;
        $r3[61] = 54;
        $r3[62] = 54;
        $r3[63] = 54;
        $r3[64] = 54;
        $r3[65] = 54;
        $r3[66] = 54;
        $r3[67] = 54;
        $r3[68] = 54;
        $r3[69] = 54;
        $r3[70] = 55;
        $r3[71] = 55;
        $r3[72] = 55;
        $r3[73] = 55;
        $r3[74] = 55;
        $r3[75] = 55;
        $r3[76] = 55;
        $r3[77] = 55;
        $r3[78] = 55;
        $r3[79] = 55;
        $r3[80] = 56;
        $r3[81] = 56;
        $r3[82] = 56;
        $r3[83] = 56;
        $r3[84] = 56;
        $r3[85] = 56;
        $r3[86] = 56;
        $r3[87] = 56;
        $r3[88] = 56;
        $r3[89] = 56;
        $r3[90] = 57;
        $r3[91] = 57;
        $r3[92] = 57;
        $r3[93] = 57;
        $r3[94] = 57;
        $r3[95] = 57;
        $r3[96] = 57;
        $r3[97] = 57;
        $r3[98] = 57;
        $r3[99] = 57;
        <java.lang.Integer: char[] DigitTens> = $r3;
        $r4 = newarray (char)[100];
        $r4[0] = 48;
        $r4[1] = 49;
        $r4[2] = 50;
        $r4[3] = 51;
        $r4[4] = 52;
        $r4[5] = 53;
        $r4[6] = 54;
        $r4[7] = 55;
        $r4[8] = 56;
        $r4[9] = 57;
        $r4[10] = 48;
        $r4[11] = 49;
        $r4[12] = 50;
        $r4[13] = 51;
        $r4[14] = 52;
        $r4[15] = 53;
        $r4[16] = 54;
        $r4[17] = 55;
        $r4[18] = 56;
        $r4[19] = 57;
        $r4[20] = 48;
        $r4[21] = 49;
        $r4[22] = 50;
        $r4[23] = 51;
        $r4[24] = 52;
        $r4[25] = 53;
        $r4[26] = 54;
        $r4[27] = 55;
        $r4[28] = 56;
        $r4[29] = 57;
        $r4[30] = 48;
        $r4[31] = 49;
        $r4[32] = 50;
        $r4[33] = 51;
        $r4[34] = 52;
        $r4[35] = 53;
        $r4[36] = 54;
        $r4[37] = 55;
        $r4[38] = 56;
        $r4[39] = 57;
        $r4[40] = 48;
        $r4[41] = 49;
        $r4[42] = 50;
        $r4[43] = 51;
        $r4[44] = 52;
        $r4[45] = 53;
        $r4[46] = 54;
        $r4[47] = 55;
        $r4[48] = 56;
        $r4[49] = 57;
        $r4[50] = 48;
        $r4[51] = 49;
        $r4[52] = 50;
        $r4[53] = 51;
        $r4[54] = 52;
        $r4[55] = 53;
        $r4[56] = 54;
        $r4[57] = 55;
        $r4[58] = 56;
        $r4[59] = 57;
        $r4[60] = 48;
        $r4[61] = 49;
        $r4[62] = 50;
        $r4[63] = 51;
        $r4[64] = 52;
        $r4[65] = 53;
        $r4[66] = 54;
        $r4[67] = 55;
        $r4[68] = 56;
        $r4[69] = 57;
        $r4[70] = 48;
        $r4[71] = 49;
        $r4[72] = 50;
        $r4[73] = 51;
        $r4[74] = 52;
        $r4[75] = 53;
        $r4[76] = 54;
        $r4[77] = 55;
        $r4[78] = 56;
        $r4[79] = 57;
        $r4[80] = 48;
        $r4[81] = 49;
        $r4[82] = 50;
        $r4[83] = 51;
        $r4[84] = 52;
        $r4[85] = 53;
        $r4[86] = 54;
        $r4[87] = 55;
        $r4[88] = 56;
        $r4[89] = 57;
        $r4[90] = 48;
        $r4[91] = 49;
        $r4[92] = 50;
        $r4[93] = 51;
        $r4[94] = 52;
        $r4[95] = 53;
        $r4[96] = 54;
        $r4[97] = 55;
        $r4[98] = 56;
        $r4[99] = 57;
        <java.lang.Integer: char[] DigitOnes> = $r4;
        $r5 = newarray (int)[10];
        $r5[0] = 9;
        $r5[1] = 99;
        $r5[2] = 999;
        $r5[3] = 9999;
        $r5[4] = 99999;
        $r5[5] = 999999;
        $r5[6] = 9999999;
        $r5[7] = 99999999;
        $r5[8] = 999999999;
        $r5[9] = 2147483647;
        <java.lang.Integer: int[] sizeTable> = $r5;
        return;
    }
}
