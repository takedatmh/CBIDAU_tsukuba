class java.util.SubList$1 extends java.lang.Object implements java.util.ListIterator
{
    private final java.util.ListIterator i;
    final int val$index;
    final java.util.SubList this$0;

    void <init>(java.util.SubList, int)
    {
        java.util.SubList$1 r0;
        java.util.SubList r1, $r2, $r4;
        int i0, $i1, $i2, $i3;
        java.util.AbstractList $r3;
        java.util.ListIterator $r5;

        r0 := @this: java.util.SubList$1;
        r1 := @parameter0: java.util.SubList;
        i0 := @parameter1: int;
        r0.<java.util.SubList$1: java.util.SubList this$0> = r1;
        r0.<java.util.SubList$1: int val$index> = i0;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = r0.<java.util.SubList$1: java.util.SubList this$0>;
        $r3 = staticinvoke <java.util.SubList: java.util.AbstractList access$100(java.util.SubList)>($r2);
        $i1 = r0.<java.util.SubList$1: int val$index>;
        $r4 = r0.<java.util.SubList$1: java.util.SubList this$0>;
        $i2 = staticinvoke <java.util.SubList: int access$000(java.util.SubList)>($r4);
        $i3 = $i1 + $i2;
        $r5 = virtualinvoke $r3.<java.util.AbstractList: java.util.ListIterator listIterator(int)>($i3);
        r0.<java.util.SubList$1: java.util.ListIterator i> = $r5;
        return;
    }

    public boolean hasNext()
    {
        java.util.SubList$1 r0;
        int $i0, $i1;
        java.util.SubList $r1;
        boolean $z0;

        r0 := @this: java.util.SubList$1;
        $i0 = virtualinvoke r0.<java.util.SubList$1: int nextIndex()>();
        $r1 = r0.<java.util.SubList$1: java.util.SubList this$0>;
        $i1 = staticinvoke <java.util.SubList: int access$200(java.util.SubList)>($r1);
        if $i0 >= $i1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.Object next()
    {
        java.util.SubList$1 r0;
        boolean $z0;
        java.util.ListIterator $r1;
        java.lang.Object $r2;
        java.util.NoSuchElementException $r3;

        r0 := @this: java.util.SubList$1;
        $z0 = virtualinvoke r0.<java.util.SubList$1: boolean hasNext()>();
        if $z0 == 0 goto label0;

        $r1 = r0.<java.util.SubList$1: java.util.ListIterator i>;
        $r2 = interfaceinvoke $r1.<java.util.ListIterator: java.lang.Object next()>();
        return $r2;

     label0:
        $r3 = new java.util.NoSuchElementException;
        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();
        throw $r3;
    }

    public boolean hasPrevious()
    {
        java.util.SubList$1 r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.SubList$1;
        $i0 = virtualinvoke r0.<java.util.SubList$1: int previousIndex()>();
        if $i0 < 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.Object previous()
    {
        java.util.SubList$1 r0;
        boolean $z0;
        java.util.ListIterator $r1;
        java.lang.Object $r2;
        java.util.NoSuchElementException $r3;

        r0 := @this: java.util.SubList$1;
        $z0 = virtualinvoke r0.<java.util.SubList$1: boolean hasPrevious()>();
        if $z0 == 0 goto label0;

        $r1 = r0.<java.util.SubList$1: java.util.ListIterator i>;
        $r2 = interfaceinvoke $r1.<java.util.ListIterator: java.lang.Object previous()>();
        return $r2;

     label0:
        $r3 = new java.util.NoSuchElementException;
        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();
        throw $r3;
    }

    public int nextIndex()
    {
        java.util.SubList$1 r0;
        java.util.ListIterator $r1;
        int $i0, $i1, $i2;
        java.util.SubList $r2;

        r0 := @this: java.util.SubList$1;
        $r1 = r0.<java.util.SubList$1: java.util.ListIterator i>;
        $i0 = interfaceinvoke $r1.<java.util.ListIterator: int nextIndex()>();
        $r2 = r0.<java.util.SubList$1: java.util.SubList this$0>;
        $i1 = staticinvoke <java.util.SubList: int access$000(java.util.SubList)>($r2);
        $i2 = $i0 - $i1;
        return $i2;
    }

    public int previousIndex()
    {
        java.util.SubList$1 r0;
        java.util.ListIterator $r1;
        int $i0, $i1, $i2;
        java.util.SubList $r2;

        r0 := @this: java.util.SubList$1;
        $r1 = r0.<java.util.SubList$1: java.util.ListIterator i>;
        $i0 = interfaceinvoke $r1.<java.util.ListIterator: int previousIndex()>();
        $r2 = r0.<java.util.SubList$1: java.util.SubList this$0>;
        $i1 = staticinvoke <java.util.SubList: int access$000(java.util.SubList)>($r2);
        $i2 = $i0 - $i1;
        return $i2;
    }

    public void remove()
    {
        java.util.SubList$1 r0;
        java.util.ListIterator $r1;
        java.util.SubList $r2, $r3, $r5;
        java.util.AbstractList $r4;
        int $i0;

        r0 := @this: java.util.SubList$1;
        $r1 = r0.<java.util.SubList$1: java.util.ListIterator i>;
        interfaceinvoke $r1.<java.util.ListIterator: void remove()>();
        $r2 = r0.<java.util.SubList$1: java.util.SubList this$0>;
        $r3 = r0.<java.util.SubList$1: java.util.SubList this$0>;
        $r4 = staticinvoke <java.util.SubList: java.util.AbstractList access$100(java.util.SubList)>($r3);
        $i0 = $r4.<java.util.AbstractList: int modCount>;
        $r2.<java.util.SubList: int modCount> = $i0;
        $r5 = r0.<java.util.SubList$1: java.util.SubList this$0>;
        staticinvoke <java.util.SubList: int access$210(java.util.SubList)>($r5);
        return;
    }

    public void set(java.lang.Object)
    {
        java.util.SubList$1 r0;
        java.lang.Object r1;
        java.util.ListIterator $r2;

        r0 := @this: java.util.SubList$1;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.SubList$1: java.util.ListIterator i>;
        interfaceinvoke $r2.<java.util.ListIterator: void set(java.lang.Object)>(r1);
        return;
    }

    public void add(java.lang.Object)
    {
        java.util.SubList$1 r0;
        java.lang.Object r1;
        java.util.ListIterator $r2;
        java.util.SubList $r3, $r4, $r6;
        java.util.AbstractList $r5;
        int $i0;

        r0 := @this: java.util.SubList$1;
        r1 := @parameter0: java.lang.Object;
        $r2 = r0.<java.util.SubList$1: java.util.ListIterator i>;
        interfaceinvoke $r2.<java.util.ListIterator: void add(java.lang.Object)>(r1);
        $r3 = r0.<java.util.SubList$1: java.util.SubList this$0>;
        $r4 = r0.<java.util.SubList$1: java.util.SubList this$0>;
        $r5 = staticinvoke <java.util.SubList: java.util.AbstractList access$100(java.util.SubList)>($r4);
        $i0 = $r5.<java.util.AbstractList: int modCount>;
        $r3.<java.util.SubList: int modCount> = $i0;
        $r6 = r0.<java.util.SubList$1: java.util.SubList this$0>;
        staticinvoke <java.util.SubList: int access$208(java.util.SubList)>($r6);
        return;
    }
}
