public abstract class java.util.ResourceBundle extends java.lang.Object
{
    private static final int INITIAL_CACHE_SIZE;
    private static final java.util.ResourceBundle NONEXISTENT_BUNDLE;
    private static final java.util.concurrent.ConcurrentMap cacheList;
    private static final java.lang.ref.ReferenceQueue referenceQueue;
    protected java.util.ResourceBundle parent;
    private java.util.Locale locale;
    private java.lang.String name;
    private volatile boolean expired;
    private volatile java.util.ResourceBundle$CacheKey cacheKey;
    private volatile java.util.Set keySet;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        java.util.ResourceBundle r0;

        r0 := @this: java.util.ResourceBundle;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.ResourceBundle: java.util.ResourceBundle parent> = null;
        r0.<java.util.ResourceBundle: java.util.Locale locale> = null;
        return;
    }

    public final java.lang.String getString(java.lang.String)
    {
        java.util.ResourceBundle r0;
        java.lang.String r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.util.ResourceBundle;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>(r1);
        $r3 = (java.lang.String) $r2;
        return $r3;
    }

    public final java.lang.String[] getStringArray(java.lang.String)
    {
        java.util.ResourceBundle r0;
        java.lang.String r1;
        java.lang.Object $r2;
        java.lang.String[] $r3, $r4;

        r0 := @this: java.util.ResourceBundle;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>(r1);
        $r3 = (java.lang.String[]) $r2;
        $r4 = (java.lang.String[]) $r3;
        return $r4;
    }

    public final java.lang.Object getObject(java.lang.String)
    {
        java.util.ResourceBundle r0, $r4, $r5;
        java.lang.String r1, $r9, $r13, $r15;
        java.lang.Object r2;
        java.lang.StringBuilder $r3, $r7, $r10, $r11, $r12;
        java.util.MissingResourceException $r6;
        java.lang.Class $r8, $r14;

        r0 := @this: java.util.ResourceBundle;
        r1 := @parameter0: java.lang.String;
        r2 = virtualinvoke r0.<java.util.ResourceBundle: java.lang.Object handleGetObject(java.lang.String)>(r1);
        if r2 != null goto label1;

        $r4 = r0.<java.util.ResourceBundle: java.util.ResourceBundle parent>;
        if $r4 == null goto label0;

        $r5 = r0.<java.util.ResourceBundle: java.util.ResourceBundle parent>;
        r2 = virtualinvoke $r5.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>(r1);

     label0:
        if r2 != null goto label1;

        $r6 = new java.util.MissingResourceException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find resource for bundle ");
        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();
        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", key ");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        $r14 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();
        specialinvoke $r6.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r13, $r15, r1);
        throw $r6;

     label1:
        return r2;
    }

    public java.util.Locale getLocale()
    {
        java.util.ResourceBundle r0;
        java.util.Locale $r1;

        r0 := @this: java.util.ResourceBundle;
        $r1 = r0.<java.util.ResourceBundle: java.util.Locale locale>;
        return $r1;
    }

    private static java.lang.ClassLoader getLoader(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.ClassLoader r1, $r2;

        r0 := @parameter0: java.lang.Class;
        if r0 != null goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label1:
        r1 = $r2;
        if r1 != null goto label2;

        r1 = staticinvoke <java.util.ResourceBundle$RBClassLoader: java.util.ResourceBundle$RBClassLoader access$000()>();

     label2:
        return r1;
    }

    protected void setParent(java.util.ResourceBundle)
    {
        java.util.ResourceBundle r0, r1, $r2;
        boolean $z0;
        java.lang.AssertionError $r3;

        r0 := @this: java.util.ResourceBundle;
        r1 := @parameter0: java.util.ResourceBundle;
        $z0 = <java.util.ResourceBundle: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r2 = <java.util.ResourceBundle: java.util.ResourceBundle NONEXISTENT_BUNDLE>;
        if r1 != $r2 goto label0;

        $r3 = new java.lang.AssertionError;
        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();
        throw $r3;

     label0:
        r0.<java.util.ResourceBundle: java.util.ResourceBundle parent> = r1;
        return;
    }

    public static final java.util.ResourceBundle getBundle(java.lang.String)
    {
        java.lang.String r0;
        java.util.Locale $r1;
        java.lang.Class $r2;
        java.util.ResourceBundle$Control $r3;
        java.lang.ClassLoader $r4;
        java.util.ResourceBundle $r5;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();
        $r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = staticinvoke <java.util.ResourceBundle: java.lang.ClassLoader getLoader(java.lang.Class)>($r2);
        $r3 = staticinvoke <java.util.ResourceBundle$Control: java.util.ResourceBundle$Control access$300()>();
        $r5 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>(r0, $r1, $r4, $r3);
        return $r5;
    }

    public static final java.util.ResourceBundle getBundle(java.lang.String, java.util.ResourceBundle$Control)
    {
        java.lang.String r0;
        java.util.ResourceBundle$Control r1;
        java.util.Locale $r2;
        java.lang.Class $r3;
        java.lang.ClassLoader $r4;
        java.util.ResourceBundle $r5;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.util.ResourceBundle$Control;
        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();
        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = staticinvoke <java.util.ResourceBundle: java.lang.ClassLoader getLoader(java.lang.Class)>($r3);
        $r5 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>(r0, $r2, $r4, r1);
        return $r5;
    }

    public static final java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale)
    {
        java.lang.String r0;
        java.util.Locale r1;
        java.lang.Class $r2;
        java.util.ResourceBundle$Control $r3;
        java.lang.ClassLoader $r4;
        java.util.ResourceBundle $r5;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.util.Locale;
        $r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = staticinvoke <java.util.ResourceBundle: java.lang.ClassLoader getLoader(java.lang.Class)>($r2);
        $r3 = staticinvoke <java.util.ResourceBundle$Control: java.util.ResourceBundle$Control access$300()>();
        $r5 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>(r0, r1, $r4, $r3);
        return $r5;
    }

    public static final java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.util.ResourceBundle$Control)
    {
        java.lang.String r0;
        java.util.Locale r1;
        java.util.ResourceBundle$Control r2;
        java.lang.Class $r3;
        java.lang.ClassLoader $r4;
        java.util.ResourceBundle $r5;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.util.Locale;
        r2 := @parameter2: java.util.ResourceBundle$Control;
        $r3 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r4 = staticinvoke <java.util.ResourceBundle: java.lang.ClassLoader getLoader(java.lang.Class)>($r3);
        $r5 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>(r0, r1, $r4, r2);
        return $r5;
    }

    public static java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader)
    {
        java.lang.String r0;
        java.util.Locale r1;
        java.lang.ClassLoader r2;
        java.util.ResourceBundle$Control $r3;
        java.lang.NullPointerException $r4;
        java.util.ResourceBundle $r5;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.util.Locale;
        r2 := @parameter2: java.lang.ClassLoader;
        if r2 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label0:
        $r3 = staticinvoke <java.util.ResourceBundle$Control: java.util.ResourceBundle$Control access$300()>();
        $r5 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>(r0, r1, r2, $r3);
        return $r5;
    }

    public static java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader, java.util.ResourceBundle$Control)
    {
        java.lang.String r0;
        java.util.Locale r1;
        java.lang.ClassLoader r2;
        java.util.ResourceBundle$Control r3;
        java.lang.NullPointerException $r4;
        java.util.ResourceBundle $r5;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.util.Locale;
        r2 := @parameter2: java.lang.ClassLoader;
        r3 := @parameter3: java.util.ResourceBundle$Control;
        if r2 == null goto label0;

        if r3 != null goto label1;

     label0:
        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label1:
        $r5 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>(r0, r1, r2, r3);
        return $r5;
    }

    private static java.util.ResourceBundle getBundleImpl(java.lang.String, java.util.Locale, java.lang.ClassLoader, java.util.ResourceBundle$Control)
    {
        java.lang.String r0;
        java.util.Locale r1, r9, $r19, $r20, $r21, $r22;
        java.lang.ClassLoader r2;
        java.util.ResourceBundle$Control r3, $r16;
        java.util.ResourceBundle$CacheKey r4, $r12;
        java.util.ResourceBundle r5, r8;
        java.util.ResourceBundle$BundleReference r6;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.util.List r7, r10;
        java.lang.NullPointerException $r11;
        java.util.concurrent.ConcurrentMap $r13;
        java.lang.Object $r14, $r15, $r23;
        null_type n0;
        java.lang.IllegalArgumentException $r17, $r18;
        int $i0;
        java.lang.Throwable $r24;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.util.Locale;
        r2 := @parameter2: java.lang.ClassLoader;
        r3 := @parameter3: java.util.ResourceBundle$Control;
        if r1 == null goto label0;

        if r3 != null goto label1;

     label0:
        $r11 = new java.lang.NullPointerException;
        specialinvoke $r11.<java.lang.NullPointerException: void <init>()>();
        throw $r11;

     label1:
        $r12 = new java.util.ResourceBundle$CacheKey;
        specialinvoke $r12.<java.util.ResourceBundle$CacheKey: void <init>(java.lang.String,java.util.Locale,java.lang.ClassLoader)>(r0, r1, r2);
        r4 = $r12;
        r5 = null;
        $r13 = <java.util.ResourceBundle: java.util.concurrent.ConcurrentMap cacheList>;
        $r14 = interfaceinvoke $r13.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r4);
        r6 = (java.util.ResourceBundle$BundleReference) $r14;
        if r6 == null goto label2;

        $r15 = virtualinvoke r6.<java.util.ResourceBundle$BundleReference: java.lang.Object get()>();
        r5 = (java.util.ResourceBundle) $r15;
        n0 = null;

     label2:
        $z2 = staticinvoke <java.util.ResourceBundle: boolean isValidBundle(java.util.ResourceBundle)>(r5);
        if $z2 == 0 goto label3;

        $z3 = staticinvoke <java.util.ResourceBundle: boolean hasValidParentChain(java.util.ResourceBundle)>(r5);
        if $z3 == 0 goto label3;

        return r5;

     label3:
        $r16 = staticinvoke <java.util.ResourceBundle$Control: java.util.ResourceBundle$Control access$300()>();
        if r3 == $r16 goto label4;

        $z4 = r3 instanceof java.util.ResourceBundle$SingleFormatControl;
        if $z4 == 0 goto label5;

     label4:
        $z5 = 1;
        goto label6;

     label5:
        $z5 = 0;

     label6:
        z0 = $z5;
        r7 = virtualinvoke r3.<java.util.ResourceBundle$Control: java.util.List getFormats(java.lang.String)>(r0);
        if z0 != 0 goto label7;

        $z6 = staticinvoke <java.util.ResourceBundle: boolean checkList(java.util.List)>(r7);
        if $z6 != 0 goto label7;

        $r17 = new java.lang.IllegalArgumentException;
        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid Control: getFormats");
        throw $r17;

     label7:
        r8 = null;
        r9 = r1;

     label8:
        if r9 == null goto label12;

        r10 = virtualinvoke r3.<java.util.ResourceBundle$Control: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>(r0, r9);
        if z0 != 0 goto label9;

        $z7 = staticinvoke <java.util.ResourceBundle: boolean checkList(java.util.List)>(r10);
        if $z7 != 0 goto label9;

        $r18 = new java.lang.IllegalArgumentException;
        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid Control: getCandidateLocales");
        throw $r18;

     label9:
        r5 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle findBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.List,int,java.util.ResourceBundle$Control,java.util.ResourceBundle)>(r4, r10, r7, 0, r3, r8);
        $z8 = staticinvoke <java.util.ResourceBundle: boolean isValidBundle(java.util.ResourceBundle)>(r5);
        if $z8 == 0 goto label11;

        $r19 = <java.util.Locale: java.util.Locale ROOT>;
        $r20 = r5.<java.util.ResourceBundle: java.util.Locale locale>;
        z1 = virtualinvoke $r19.<java.util.Locale: boolean equals(java.lang.Object)>($r20);
        if z1 == 0 goto label12;

        $r21 = r5.<java.util.ResourceBundle: java.util.Locale locale>;
        $z9 = virtualinvoke $r21.<java.util.Locale: boolean equals(java.lang.Object)>(r1);
        if $z9 != 0 goto label12;

        $i0 = interfaceinvoke r10.<java.util.List: int size()>();
        if $i0 != 1 goto label10;

        $r22 = r5.<java.util.ResourceBundle: java.util.Locale locale>;
        $r23 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(0);
        $z10 = virtualinvoke $r22.<java.util.Locale: boolean equals(java.lang.Object)>($r23);
        if $z10 == 0 goto label10;

        goto label12;

     label10:
        if z1 == 0 goto label11;

        if r8 != null goto label11;

        r8 = r5;

     label11:
        r9 = virtualinvoke r3.<java.util.ResourceBundle$Control: java.util.Locale getFallbackLocale(java.lang.String,java.util.Locale)>(r0, r9);
        goto label8;

     label12:
        if r5 != null goto label14;

        if r8 != null goto label13;

        $r24 = staticinvoke <java.util.ResourceBundle$CacheKey: java.lang.Throwable access$400(java.util.ResourceBundle$CacheKey)>(r4);
        staticinvoke <java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>(r0, r1, $r24);

     label13:
        r5 = r8;

     label14:
        return r5;
    }

    private static final boolean checkList(java.util.List)
    {
        java.util.List r0;
        boolean z0, $z1, $z2;
        int i0, i1, $i2;
        java.lang.Object $r1;

        r0 := @parameter0: java.util.List;
        if r0 == null goto label0;

        $i2 = interfaceinvoke r0.<java.util.List: int size()>();
        if $i2 == 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        z0 = $z1;
        if z0 == 0 goto label5;

        i0 = interfaceinvoke r0.<java.util.List: int size()>();
        i1 = 0;

     label2:
        if z0 == 0 goto label5;

        if i1 >= i0 goto label5;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);
        if $r1 == null goto label3;

        $z2 = 1;
        goto label4;

     label3:
        $z2 = 0;

     label4:
        z0 = $z2;
        i1 = i1 + 1;
        goto label2;

     label5:
        return z0;
    }

    private static final java.util.ResourceBundle findBundle(java.util.ResourceBundle$CacheKey, java.util.List, java.util.List, int, java.util.ResourceBundle$Control, java.util.ResourceBundle)
    {
        java.util.ResourceBundle$CacheKey r0, $r18, r28;
        java.util.List r1, r2;
        int i0, $i1, $i2, $i3;
        java.util.ResourceBundle$Control r3;
        java.util.ResourceBundle r4, r6, r8, r10, $r21, $r26, r29, $r30, r31, $r34;
        java.util.Locale r5, $r13;
        java.lang.ref.Reference r7, $r15;
        boolean z0, $z1, $z2, $z4, $z5, $z6;
        java.util.ResourceBundle$BundleReference r9;
        java.lang.Throwable r11, $r32, $r36, $r38, $r39;
        java.lang.Object $r12, $r23, $r24, $r27;
        java.lang.ref.ReferenceQueue $r14;
        java.util.concurrent.ConcurrentMap $r16, $r22, $r25;
        java.util.ResourceBundle$CacheKeyReference $r17;
        java.lang.Thread $r33, $r37, $r40;

        r0 := @parameter0: java.util.ResourceBundle$CacheKey;
        r1 := @parameter1: java.util.List;
        r2 := @parameter2: java.util.List;
        i0 := @parameter3: int;
        r3 := @parameter4: java.util.ResourceBundle$Control;
        r4 := @parameter5: java.util.ResourceBundle;
        $r12 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);
        r5 = (java.util.Locale) $r12;
        r6 = null;
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();
        $i2 = $i1 - 1;
        if i0 == $i2 goto label0;

        $i3 = i0 + 1;
        r6 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle findBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.List,int,java.util.ResourceBundle$Control,java.util.ResourceBundle)>(r0, r1, r2, $i3, r3, r4);
        goto label1;

     label0:
        if r4 == null goto label1;

        $r13 = <java.util.Locale: java.util.Locale ROOT>;
        $z1 = virtualinvoke $r13.<java.util.Locale: boolean equals(java.lang.Object)>(r5);
        if $z1 == 0 goto label1;

        return r4;

     label1:
        $r14 = <java.util.ResourceBundle: java.lang.ref.ReferenceQueue referenceQueue>;
        $r15 = virtualinvoke $r14.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();
        r7 = $r15;
        if $r15 == null goto label2;

        $r16 = <java.util.ResourceBundle: java.util.concurrent.ConcurrentMap cacheList>;
        $r17 = (java.util.ResourceBundle$CacheKeyReference) r7;
        $r18 = interfaceinvoke $r17.<java.util.ResourceBundle$CacheKeyReference: java.util.ResourceBundle$CacheKey getCacheKey()>();
        interfaceinvoke $r16.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r18);
        goto label1;

     label2:
        z0 = 0;
        virtualinvoke r0.<java.util.ResourceBundle$CacheKey: java.util.ResourceBundle$CacheKey setLocale(java.util.Locale)>(r5);
        r8 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle findBundleInCache(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)>(r0, r3);
        $z2 = staticinvoke <java.util.ResourceBundle: boolean isValidBundle(java.util.ResourceBundle)>(r8);
        if $z2 == 0 goto label4;

        z0 = r8.<java.util.ResourceBundle: boolean expired>;
        if z0 != 0 goto label4;

        $r21 = r8.<java.util.ResourceBundle: java.util.ResourceBundle parent>;
        if $r21 != r6 goto label3;

        return r8;

     label3:
        $r22 = <java.util.ResourceBundle: java.util.concurrent.ConcurrentMap cacheList>;
        $r23 = interfaceinvoke $r22.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0);
        r9 = (java.util.ResourceBundle$BundleReference) $r23;
        if r9 == null goto label4;

        $r24 = virtualinvoke r9.<java.util.ResourceBundle$BundleReference: java.lang.Object get()>();
        if $r24 != r8 goto label4;

        $r25 = <java.util.ResourceBundle: java.util.concurrent.ConcurrentMap cacheList>;
        interfaceinvoke $r25.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r0, r9);

     label4:
        $r26 = <java.util.ResourceBundle: java.util.ResourceBundle NONEXISTENT_BUNDLE>;
        if r8 == $r26 goto label15;

        $r27 = virtualinvoke r0.<java.util.ResourceBundle$CacheKey: java.lang.Object clone()>();
        r28 = (java.util.ResourceBundle$CacheKey) $r27;

     label5:
        r29 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,boolean)>(r0, r2, r3, z0);
        if r29 == null goto label9;

        $r30 = r29.<java.util.ResourceBundle: java.util.ResourceBundle parent>;
        if $r30 != null goto label6;

        virtualinvoke r29.<java.util.ResourceBundle: void setParent(java.util.ResourceBundle)>(r6);

     label6:
        r29.<java.util.ResourceBundle: java.util.Locale locale> = r5;
        r31 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle putBundleInCache(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle,java.util.ResourceBundle$Control)>(r0, r29, r3);
        r10 = r31;

     label7:
        $r32 = staticinvoke <java.util.ResourceBundle$CacheKey: java.lang.Throwable access$400(java.util.ResourceBundle$CacheKey)>(r28);
        $z4 = $r32 instanceof java.lang.InterruptedException;
        if $z4 == 0 goto label8;

        $r33 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        virtualinvoke $r33.<java.lang.Thread: void interrupt()>();

     label8:
        return r10;

     label9:
        $r34 = <java.util.ResourceBundle: java.util.ResourceBundle NONEXISTENT_BUNDLE>;
        staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle putBundleInCache(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle,java.util.ResourceBundle$Control)>(r0, $r34, r3);

     label10:
        $r36 = staticinvoke <java.util.ResourceBundle$CacheKey: java.lang.Throwable access$400(java.util.ResourceBundle$CacheKey)>(r28);
        $z5 = $r36 instanceof java.lang.InterruptedException;
        if $z5 == 0 goto label15;

        $r37 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        virtualinvoke $r37.<java.lang.Thread: void interrupt()>();
        goto label15;

     label11:
        $r38 := @caughtexception;

     label12:
        r11 = $r38;

     label13:
        $r39 = staticinvoke <java.util.ResourceBundle$CacheKey: java.lang.Throwable access$400(java.util.ResourceBundle$CacheKey)>(r28);
        $z6 = $r39 instanceof java.lang.InterruptedException;
        if $z6 == 0 goto label14;

        $r40 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        virtualinvoke $r40.<java.lang.Thread: void interrupt()>();

     label14:
        throw r11;

     label15:
        return r6;

        catch java.lang.Throwable from label5 to label7 with label11;
        catch java.lang.Throwable from label9 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private static final java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey, java.util.List, java.util.ResourceBundle$Control, boolean)
    {
        java.util.ResourceBundle$CacheKey r0;
        java.util.List r1;
        java.util.ResourceBundle$Control r2;
        boolean z0;
        java.util.Locale r3;
        java.util.ResourceBundle r4;
        int i0, i1;
        java.lang.String r5, $r8, $r13;
        java.lang.LinkageError r6, $r10;
        java.lang.Object $r7;
        java.lang.ClassLoader $r9;
        java.lang.Exception $r11, r12;

        r0 := @parameter0: java.util.ResourceBundle$CacheKey;
        r1 := @parameter1: java.util.List;
        r2 := @parameter2: java.util.ResourceBundle$Control;
        z0 := @parameter3: boolean;
        r3 = virtualinvoke r0.<java.util.ResourceBundle$CacheKey: java.util.Locale getLocale()>();
        r4 = null;
        i0 = interfaceinvoke r1.<java.util.List: int size()>();
        i1 = 0;

     label0:
        if i1 >= i0 goto label7;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);
        r5 = (java.lang.String) $r7;

     label1:
        $r8 = virtualinvoke r0.<java.util.ResourceBundle$CacheKey: java.lang.String getName()>();
        $r9 = virtualinvoke r0.<java.util.ResourceBundle$CacheKey: java.lang.ClassLoader getLoader()>();
        r4 = virtualinvoke r2.<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>($r8, r3, r5, $r9, z0);

     label2:
        goto label5;

     label3:
        $r10 := @caughtexception;
        r6 = $r10;
        staticinvoke <java.util.ResourceBundle$CacheKey: void access$500(java.util.ResourceBundle$CacheKey,java.lang.Throwable)>(r0, r6);
        goto label5;

     label4:
        $r11 := @caughtexception;
        r12 = $r11;
        staticinvoke <java.util.ResourceBundle$CacheKey: void access$500(java.util.ResourceBundle$CacheKey,java.lang.Throwable)>(r0, r12);

     label5:
        if r4 == null goto label6;

        virtualinvoke r0.<java.util.ResourceBundle$CacheKey: void setFormat(java.lang.String)>(r5);
        $r13 = virtualinvoke r0.<java.util.ResourceBundle$CacheKey: java.lang.String getName()>();
        r4.<java.util.ResourceBundle: java.lang.String name> = $r13;
        r4.<java.util.ResourceBundle: java.util.Locale locale> = r3;
        r4.<java.util.ResourceBundle: boolean expired> = 0;
        goto label7;

     label6:
        i1 = i1 + 1;
        goto label0;

     label7:
        return r4;

        catch java.lang.LinkageError from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    private static final boolean isValidBundle(java.util.ResourceBundle)
    {
        java.util.ResourceBundle r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.util.ResourceBundle;
        if r0 == null goto label0;

        $r1 = <java.util.ResourceBundle: java.util.ResourceBundle NONEXISTENT_BUNDLE>;
        if r0 == $r1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private static final boolean hasValidParentChain(java.util.ResourceBundle)
    {
        java.util.ResourceBundle r0;
        long l0, l1;
        java.util.ResourceBundle$CacheKey r1;
        boolean $z0;
        byte $b2, $b3;

        r0 := @parameter0: java.util.ResourceBundle;
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label0:
        if r0 == null goto label3;

        $z0 = r0.<java.util.ResourceBundle: boolean expired>;
        if $z0 == 0 goto label1;

        return 0;

     label1:
        r1 = r0.<java.util.ResourceBundle: java.util.ResourceBundle$CacheKey cacheKey>;
        if r1 == null goto label2;

        l1 = staticinvoke <java.util.ResourceBundle$CacheKey: long access$600(java.util.ResourceBundle$CacheKey)>(r1);
        $b2 = l1 cmp 0L;
        if $b2 < 0 goto label2;

        $b3 = l1 cmp l0;
        if $b3 > 0 goto label2;

        return 0;

     label2:
        r0 = r0.<java.util.ResourceBundle: java.util.ResourceBundle parent>;
        goto label0;

     label3:
        return 1;
    }

    private static final void throwMissingResourceException(java.lang.String, java.util.Locale, java.lang.Throwable)
    {
        java.lang.String r0, $r9, $r14;
        java.util.Locale r1;
        java.lang.Throwable r2;
        java.lang.StringBuilder $r3, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13;
        boolean $z0;
        java.util.MissingResourceException $r4;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.util.Locale;
        r2 := @parameter2: java.lang.Throwable;
        $z0 = r2 instanceof java.util.MissingResourceException;
        if $z0 == 0 goto label0;

        r2 = null;

     label0:
        $r4 = new java.util.MissingResourceException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find bundle for base name ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", locale ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r9, $r14, "", r2);
        throw $r4;
    }

    private static final java.util.ResourceBundle findBundleInCache(java.util.ResourceBundle$CacheKey, java.util.ResourceBundle$Control)
    {
        java.util.ResourceBundle$CacheKey r0, r6;
        java.util.ResourceBundle$Control r1;
        java.util.concurrent.ConcurrentMap $r2, $r16, $r24, $r26;
        java.util.ResourceBundle$BundleReference r3;
        java.util.ResourceBundle r4, r5, r7, $r12, $r14, $r17;
        long l0, $l2, l4, $l6, $l8;
        java.lang.Exception r8, $r23;
        java.lang.Throwable r9, $r25;
        java.lang.Object $r10, $r11;
        boolean $z0, $z1, $z2, $z4, $z5, $z6, $z7;
        java.lang.AssertionError $r13, $r15;
        byte $b1, $b3, $b5, $b7;
        java.lang.String $r19, $r21;
        java.util.Locale $r20;
        java.lang.ClassLoader $r22;

        r0 := @parameter0: java.util.ResourceBundle$CacheKey;
        r1 := @parameter1: java.util.ResourceBundle$Control;
        $r2 = <java.util.ResourceBundle: java.util.concurrent.ConcurrentMap cacheList>;
        $r10 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0);
        r3 = (java.util.ResourceBundle$BundleReference) $r10;
        if r3 != null goto label0;

        return null;

     label0:
        $r11 = virtualinvoke r3.<java.util.ResourceBundle$BundleReference: java.lang.Object get()>();
        r4 = (java.util.ResourceBundle) $r11;
        if r4 != null goto label1;

        return null;

     label1:
        r5 = r4.<java.util.ResourceBundle: java.util.ResourceBundle parent>;
        $z0 = <java.util.ResourceBundle: boolean $assertionsDisabled>;
        if $z0 != 0 goto label2;

        $r12 = <java.util.ResourceBundle: java.util.ResourceBundle NONEXISTENT_BUNDLE>;
        if r5 != $r12 goto label2;

        $r13 = new java.lang.AssertionError;
        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();
        throw $r13;

     label2:
        if r5 == null goto label4;

        $z1 = r5.<java.util.ResourceBundle: boolean expired>;
        if $z1 == 0 goto label4;

        $z2 = <java.util.ResourceBundle: boolean $assertionsDisabled>;
        if $z2 != 0 goto label3;

        $r14 = <java.util.ResourceBundle: java.util.ResourceBundle NONEXISTENT_BUNDLE>;
        if r4 != $r14 goto label3;

        $r15 = new java.lang.AssertionError;
        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();
        throw $r15;

     label3:
        r4.<java.util.ResourceBundle: boolean expired> = 1;
        r4.<java.util.ResourceBundle: java.util.ResourceBundle$CacheKey cacheKey> = null;
        $r16 = <java.util.ResourceBundle: java.util.concurrent.ConcurrentMap cacheList>;
        interfaceinvoke $r16.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r0, r3);
        r4 = null;
        goto label18;

     label4:
        r6 = virtualinvoke r3.<java.util.ResourceBundle$BundleReference: java.util.ResourceBundle$CacheKey getCacheKey()>();
        l0 = staticinvoke <java.util.ResourceBundle$CacheKey: long access$600(java.util.ResourceBundle$CacheKey)>(r6);
        $z4 = r4.<java.util.ResourceBundle: boolean expired>;
        if $z4 != 0 goto label18;

        $b1 = l0 cmp 0L;
        if $b1 < 0 goto label18;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $b3 = l0 cmp $l2;
        if $b3 > 0 goto label18;

        $r17 = <java.util.ResourceBundle: java.util.ResourceBundle NONEXISTENT_BUNDLE>;
        if r4 == $r17 goto label17;

        r7 = r4;
        entermonitor r4;

     label5:
        l4 = staticinvoke <java.util.ResourceBundle$CacheKey: long access$600(java.util.ResourceBundle$CacheKey)>(r6);
        $z5 = r4.<java.util.ResourceBundle: boolean expired>;
        if $z5 != 0 goto label11;

        $b5 = l4 cmp 0L;
        if $b5 < 0 goto label11;

        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $b7 = l4 cmp $l6;
        if $b7 > 0 goto label11;

     label6:
        $r19 = virtualinvoke r6.<java.util.ResourceBundle$CacheKey: java.lang.String getName()>();
        $r20 = virtualinvoke r6.<java.util.ResourceBundle$CacheKey: java.util.Locale getLocale()>();
        $r21 = virtualinvoke r6.<java.util.ResourceBundle$CacheKey: java.lang.String getFormat()>();
        $r22 = virtualinvoke r6.<java.util.ResourceBundle$CacheKey: java.lang.ClassLoader getLoader()>();
        $l8 = staticinvoke <java.util.ResourceBundle$CacheKey: long access$700(java.util.ResourceBundle$CacheKey)>(r6);
        $z6 = virtualinvoke r1.<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>($r19, $r20, $r21, $r22, r4, $l8);
        r4.<java.util.ResourceBundle: boolean expired> = $z6;

     label7:
        goto label9;

     label8:
        $r23 := @caughtexception;
        r8 = $r23;
        staticinvoke <java.util.ResourceBundle$CacheKey: void access$500(java.util.ResourceBundle$CacheKey,java.lang.Throwable)>(r0, r8);

     label9:
        $z7 = r4.<java.util.ResourceBundle: boolean expired>;
        if $z7 == 0 goto label10;

        r4.<java.util.ResourceBundle: java.util.ResourceBundle$CacheKey cacheKey> = null;
        $r24 = <java.util.ResourceBundle: java.util.concurrent.ConcurrentMap cacheList>;
        interfaceinvoke $r24.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r0, r3);
        goto label11;

     label10:
        staticinvoke <java.util.ResourceBundle: void setExpirationTime(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)>(r6, r1);

     label11:
        exitmonitor r7;

     label12:
        goto label16;

     label13:
        $r25 := @caughtexception;

     label14:
        r9 = $r25;
        exitmonitor r7;

     label15:
        throw r9;

     label16:
        goto label18;

     label17:
        $r26 = <java.util.ResourceBundle: java.util.concurrent.ConcurrentMap cacheList>;
        interfaceinvoke $r26.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r0, r3);
        r4 = null;

     label18:
        return r4;

        catch java.lang.Exception from label6 to label7 with label8;
        catch java.lang.Throwable from label5 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private static final java.util.ResourceBundle putBundleInCache(java.util.ResourceBundle$CacheKey, java.util.ResourceBundle, java.util.ResourceBundle$Control)
    {
        java.util.ResourceBundle$CacheKey r0, r3;
        java.util.ResourceBundle r1, r7;
        java.util.ResourceBundle$Control r2;
        java.lang.ref.ReferenceQueue $r4;
        java.util.ResourceBundle$BundleReference r5, r6, $r9;
        long $l0;
        byte $b1;
        java.lang.Object $r8, $r11, $r12;
        java.util.concurrent.ConcurrentMap $r10, $r13;
        boolean $z0;

        r0 := @parameter0: java.util.ResourceBundle$CacheKey;
        r1 := @parameter1: java.util.ResourceBundle;
        r2 := @parameter2: java.util.ResourceBundle$Control;
        staticinvoke <java.util.ResourceBundle: void setExpirationTime(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)>(r0, r2);
        $l0 = staticinvoke <java.util.ResourceBundle$CacheKey: long access$600(java.util.ResourceBundle$CacheKey)>(r0);
        $b1 = $l0 cmp -1L;
        if $b1 == 0 goto label1;

        $r8 = virtualinvoke r0.<java.util.ResourceBundle$CacheKey: java.lang.Object clone()>();
        r3 = (java.util.ResourceBundle$CacheKey) $r8;
        $r9 = new java.util.ResourceBundle$BundleReference;
        $r4 = <java.util.ResourceBundle: java.lang.ref.ReferenceQueue referenceQueue>;
        specialinvoke $r9.<java.util.ResourceBundle$BundleReference: void <init>(java.util.ResourceBundle,java.lang.ref.ReferenceQueue,java.util.ResourceBundle$CacheKey)>(r1, $r4, r3);
        r5 = $r9;
        r1.<java.util.ResourceBundle: java.util.ResourceBundle$CacheKey cacheKey> = r3;
        $r10 = <java.util.ResourceBundle: java.util.concurrent.ConcurrentMap cacheList>;
        $r11 = interfaceinvoke $r10.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r3, r5);
        r6 = (java.util.ResourceBundle$BundleReference) $r11;
        if r6 == null goto label1;

        $r12 = virtualinvoke r6.<java.util.ResourceBundle$BundleReference: java.lang.Object get()>();
        r7 = (java.util.ResourceBundle) $r12;
        if r7 == null goto label0;

        $z0 = r7.<java.util.ResourceBundle: boolean expired>;
        if $z0 != 0 goto label0;

        r1.<java.util.ResourceBundle: java.util.ResourceBundle$CacheKey cacheKey> = null;
        r1 = r7;
        virtualinvoke r5.<java.util.ResourceBundle$BundleReference: void clear()>();
        goto label1;

     label0:
        $r13 = <java.util.ResourceBundle: java.util.concurrent.ConcurrentMap cacheList>;
        interfaceinvoke $r13.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r5);

     label1:
        return r1;
    }

    private static final void setExpirationTime(java.util.ResourceBundle$CacheKey, java.util.ResourceBundle$Control)
    {
        java.util.ResourceBundle$CacheKey r0;
        java.util.ResourceBundle$Control r1;
        long l0, l1, $l4;
        java.lang.String $r2, $r8;
        java.util.Locale $r3;
        byte $b2, $b6;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @parameter0: java.util.ResourceBundle$CacheKey;
        r1 := @parameter1: java.util.ResourceBundle$Control;
        $r2 = virtualinvoke r0.<java.util.ResourceBundle$CacheKey: java.lang.String getName()>();
        $r3 = virtualinvoke r0.<java.util.ResourceBundle$CacheKey: java.util.Locale getLocale()>();
        l0 = virtualinvoke r1.<java.util.ResourceBundle$Control: long getTimeToLive(java.lang.String,java.util.Locale)>($r2, $r3);
        $b2 = l0 cmp 0L;
        if $b2 < 0 goto label0;

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        staticinvoke <java.util.ResourceBundle$CacheKey: long access$702(java.util.ResourceBundle$CacheKey,long)>(r0, l1);
        $l4 = l1 + l0;
        staticinvoke <java.util.ResourceBundle$CacheKey: long access$602(java.util.ResourceBundle$CacheKey,long)>(r0, $l4);
        goto label2;

     label0:
        $b6 = l0 cmp -2L;
        if $b6 < 0 goto label1;

        staticinvoke <java.util.ResourceBundle$CacheKey: long access$602(java.util.ResourceBundle$CacheKey,long)>(r0, l0);
        goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Control: TTL=");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);
        throw $r4;

     label2:
        return;
    }

    public static final void clearCache()
    {
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;

        $r0 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        $r1 = staticinvoke <java.util.ResourceBundle: java.lang.ClassLoader getLoader(java.lang.Class)>($r0);
        staticinvoke <java.util.ResourceBundle: void clearCache(java.lang.ClassLoader)>($r1);
        return;
    }

    public static final void clearCache(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0, $r7;
        java.util.Set r1;
        java.util.Iterator r2;
        java.util.ResourceBundle$CacheKey r3;
        java.lang.NullPointerException $r4;
        java.util.concurrent.ConcurrentMap $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @parameter0: java.lang.ClassLoader;
        if r0 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label0:
        $r5 = <java.util.ResourceBundle: java.util.concurrent.ConcurrentMap cacheList>;
        r1 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();
        r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.ResourceBundle$CacheKey) $r6;
        $r7 = virtualinvoke r3.<java.util.ResourceBundle$CacheKey: java.lang.ClassLoader getLoader()>();
        if $r7 != r0 goto label2;

        interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>(r3);

     label2:
        goto label1;

     label3:
        return;
    }

    protected abstract java.lang.Object handleGetObject(java.lang.String);

    public abstract java.util.Enumeration getKeys();

    public boolean containsKey(java.lang.String)
    {
        java.util.ResourceBundle r0, r2;
        java.lang.String r1;
        java.lang.NullPointerException $r3;
        java.util.Set $r4;
        boolean $z0;

        r0 := @this: java.util.ResourceBundle;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        r2 = r0;

     label1:
        if r2 == null goto label3;

        $r4 = virtualinvoke r2.<java.util.ResourceBundle: java.util.Set handleKeySet()>();
        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r1);
        if $z0 == 0 goto label2;

        return 1;

     label2:
        r2 = r2.<java.util.ResourceBundle: java.util.ResourceBundle parent>;
        goto label1;

     label3:
        return 0;
    }

    public java.util.Set keySet()
    {
        java.util.ResourceBundle r0, r3;
        java.util.HashSet $r1, r2;
        java.util.Set $r4;

        r0 := @this: java.util.ResourceBundle;
        $r1 = new java.util.HashSet;
        specialinvoke $r1.<java.util.HashSet: void <init>()>();
        r2 = $r1;
        r3 = r0;

     label0:
        if r3 == null goto label1;

        $r4 = virtualinvoke r3.<java.util.ResourceBundle: java.util.Set handleKeySet()>();
        interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>($r4);
        r3 = r3.<java.util.ResourceBundle: java.util.ResourceBundle parent>;
        goto label0;

     label1:
        return r2;
    }

    protected java.util.Set handleKeySet()
    {
        java.util.ResourceBundle r0, r1;
        java.util.HashSet r2, $r9;
        java.util.Enumeration r3;
        java.lang.String r4;
        java.lang.Throwable r5, $r12;
        java.util.Set $r6, $r8, $r13;
        boolean $z0;
        java.lang.Object $r10, $r11;

        r0 := @this: java.util.ResourceBundle;
        $r6 = r0.<java.util.ResourceBundle: java.util.Set keySet>;
        if $r6 != null goto label9;

        r1 = r0;
        entermonitor r0;

     label0:
        $r8 = r0.<java.util.ResourceBundle: java.util.Set keySet>;
        if $r8 != null goto label4;

        $r9 = new java.util.HashSet;
        specialinvoke $r9.<java.util.HashSet: void <init>()>();
        r2 = $r9;
        r3 = virtualinvoke r0.<java.util.ResourceBundle: java.util.Enumeration getKeys()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>();
        r4 = (java.lang.String) $r10;
        $r11 = virtualinvoke r0.<java.util.ResourceBundle: java.lang.Object handleGetObject(java.lang.String)>(r4);
        if $r11 == null goto label2;

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r4);

     label2:
        goto label1;

     label3:
        r0.<java.util.ResourceBundle: java.util.Set keySet> = r2;

     label4:
        exitmonitor r1;

     label5:
        goto label9;

     label6:
        $r12 := @caughtexception;

     label7:
        r5 = $r12;
        exitmonitor r1;

     label8:
        throw r5;

     label9:
        $r13 = r0.<java.util.ResourceBundle: java.util.Set keySet>;
        return $r13;

        catch java.lang.Throwable from label0 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    static java.lang.ref.ReferenceQueue access$200()
    {
        java.lang.ref.ReferenceQueue $r0;

        $r0 = <java.util.ResourceBundle: java.lang.ref.ReferenceQueue referenceQueue>;
        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.util.ResourceBundle$1 $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.ref.ReferenceQueue $r3;

        $r0 = class "java/util/ResourceBundle";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.util.ResourceBundle: boolean $assertionsDisabled> = $z1;
        $r1 = new java.util.ResourceBundle$1;
        specialinvoke $r1.<java.util.ResourceBundle$1: void <init>()>();
        <java.util.ResourceBundle: java.util.ResourceBundle NONEXISTENT_BUNDLE> = $r1;
        $r2 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(32);
        <java.util.ResourceBundle: java.util.concurrent.ConcurrentMap cacheList> = $r2;
        $r3 = new java.lang.ref.ReferenceQueue;
        specialinvoke $r3.<java.lang.ref.ReferenceQueue: void <init>()>();
        <java.util.ResourceBundle: java.lang.ref.ReferenceQueue referenceQueue> = $r3;
        return;
    }
}
