class java.nio.DirectByteBuffer extends java.nio.MappedByteBuffer implements sun.nio.ch.DirectBuffer
{
    protected static final sun.misc.Unsafe unsafe;
    private static final long arrayBaseOffset;
    protected static final boolean unaligned;
    private final java.lang.Object att;
    private final sun.misc.Cleaner cleaner;
    static final boolean $assertionsDisabled;

    public java.lang.Object attachment()
    {
        java.nio.DirectByteBuffer r0;
        java.lang.Object $r1;

        r0 := @this: java.nio.DirectByteBuffer;
        $r1 = r0.<java.nio.DirectByteBuffer: java.lang.Object att>;
        return $r1;
    }

    public sun.misc.Cleaner cleaner()
    {
        java.nio.DirectByteBuffer r0;
        sun.misc.Cleaner $r1;

        r0 := @this: java.nio.DirectByteBuffer;
        $r1 = r0.<java.nio.DirectByteBuffer: sun.misc.Cleaner cleaner>;
        return $r1;
    }

    void <init>(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, i1, $i6, $i15;
        boolean z0;
        long l2, l3, $l4, $l5, $l7, $l8, l9, $l10, $l11, $l13, $l14, $l16, $l17, $l18;
        java.lang.OutOfMemoryError r1, $r3;
        sun.misc.Unsafe $r2, $r4;
        byte $b12;
        java.nio.DirectByteBuffer$Deallocator $r5;
        sun.misc.Cleaner $r6;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        specialinvoke r0.<java.nio.MappedByteBuffer: void <init>(int,int,int,int)>(-1, 0, i0, i0);
        z0 = staticinvoke <sun.misc.VM: boolean isDirectMemoryPageAligned()>();
        i1 = staticinvoke <java.nio.Bits: int pageSize()>();
        $l4 = 1L;
        $l5 = (long) i0;
        if z0 == 0 goto label0;

        $i6 = i1;
        goto label1;

     label0:
        $i6 = 0;

     label1:
        $l7 = (long) $i6;
        $l8 = $l5 + $l7;
        l2 = staticinvoke <java.lang.Math: long max(long,long)>($l4, $l8);
        staticinvoke <java.nio.Bits: void reserveMemory(long,int)>(l2, i0);
        l3 = 0L;

     label2:
        $r2 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        l9 = virtualinvoke $r2.<sun.misc.Unsafe: long allocateMemory(long)>(l2);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;
        r1 = $r3;
        staticinvoke <java.nio.Bits: void unreserveMemory(long,int)>(l2, i0);
        throw r1;

     label5:
        $r4 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        virtualinvoke $r4.<sun.misc.Unsafe: void setMemory(long,long,byte)>(l9, l2, 0);
        if z0 == 0 goto label6;

        $l10 = (long) i1;
        $l11 = l9 % $l10;
        $b12 = $l11 cmp 0L;
        if $b12 == 0 goto label6;

        $l13 = (long) i1;
        $l14 = l9 + $l13;
        $i15 = i1 - 1;
        $l16 = (long) $i15;
        $l17 = l9 & $l16;
        $l18 = $l14 - $l17;
        r0.<java.nio.DirectByteBuffer: long address> = $l18;
        goto label7;

     label6:
        r0.<java.nio.DirectByteBuffer: long address> = l9;

     label7:
        $r5 = new java.nio.DirectByteBuffer$Deallocator;
        specialinvoke $r5.<java.nio.DirectByteBuffer$Deallocator: void <init>(long,long,int,java.nio.DirectByteBuffer$1)>(l9, l2, i0, null);
        $r6 = staticinvoke <sun.misc.Cleaner: sun.misc.Cleaner create(java.lang.Object,java.lang.Runnable)>(r0, $r5);
        r0.<java.nio.DirectByteBuffer: sun.misc.Cleaner cleaner> = $r6;
        r0.<java.nio.DirectByteBuffer: java.lang.Object att> = null;
        return;

        catch java.lang.OutOfMemoryError from label2 to label3 with label4;
    }

    void <init>(long, int, java.lang.Object)
    {
        java.nio.DirectByteBuffer r0;
        long l0;
        int i1;
        java.lang.Object r1;

        r0 := @this: java.nio.DirectByteBuffer;
        l0 := @parameter0: long;
        i1 := @parameter1: int;
        r1 := @parameter2: java.lang.Object;
        specialinvoke r0.<java.nio.MappedByteBuffer: void <init>(int,int,int,int)>(-1, 0, i1, i1);
        r0.<java.nio.DirectByteBuffer: long address> = l0;
        r0.<java.nio.DirectByteBuffer: sun.misc.Cleaner cleaner> = null;
        r0.<java.nio.DirectByteBuffer: java.lang.Object att> = r1;
        return;
    }

    private void <init>(long, int)
    {
        java.nio.DirectByteBuffer r0;
        long l0;
        int i1;

        r0 := @this: java.nio.DirectByteBuffer;
        l0 := @parameter0: long;
        i1 := @parameter1: int;
        specialinvoke r0.<java.nio.MappedByteBuffer: void <init>(int,int,int,int)>(-1, 0, i1, i1);
        r0.<java.nio.DirectByteBuffer: long address> = l0;
        r0.<java.nio.DirectByteBuffer: sun.misc.Cleaner cleaner> = null;
        r0.<java.nio.DirectByteBuffer: java.lang.Object att> = null;
        return;
    }

    protected void <init>(int, long, java.io.FileDescriptor, java.lang.Runnable)
    {
        java.nio.DirectByteBuffer r0;
        int i0;
        long l1;
        java.io.FileDescriptor r1;
        java.lang.Runnable r2;
        sun.misc.Cleaner $r3;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        l1 := @parameter1: long;
        r1 := @parameter2: java.io.FileDescriptor;
        r2 := @parameter3: java.lang.Runnable;
        specialinvoke r0.<java.nio.MappedByteBuffer: void <init>(int,int,int,int,java.io.FileDescriptor)>(-1, 0, i0, i0, r1);
        r0.<java.nio.DirectByteBuffer: long address> = l1;
        $r3 = staticinvoke <sun.misc.Cleaner: sun.misc.Cleaner create(java.lang.Object,java.lang.Runnable)>(r0, r2);
        r0.<java.nio.DirectByteBuffer: sun.misc.Cleaner cleaner> = $r3;
        r0.<java.nio.DirectByteBuffer: java.lang.Object att> = null;
        return;
    }

    void <init>(sun.nio.ch.DirectBuffer, int, int, int, int, int)
    {
        java.nio.DirectByteBuffer r0;
        sun.nio.ch.DirectBuffer r1;
        int i0, i1, i2, i3, i4;
        long $l5, $l6, $l7;

        r0 := @this: java.nio.DirectByteBuffer;
        r1 := @parameter0: sun.nio.ch.DirectBuffer;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        specialinvoke r0.<java.nio.MappedByteBuffer: void <init>(int,int,int,int)>(i0, i1, i2, i3);
        $l5 = interfaceinvoke r1.<sun.nio.ch.DirectBuffer: long address()>();
        $l6 = (long) i4;
        $l7 = $l5 + $l6;
        r0.<java.nio.DirectByteBuffer: long address> = $l7;
        r0.<java.nio.DirectByteBuffer: sun.misc.Cleaner cleaner> = null;
        r0.<java.nio.DirectByteBuffer: java.lang.Object att> = r1;
        return;
    }

    public java.nio.ByteBuffer slice()
    {
        java.nio.DirectByteBuffer r0, $r3;
        int i0, i1, i2, i3, $i4;
        boolean $z0, $z1;
        java.lang.AssertionError $r1, $r2;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int position()>();
        i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int limit()>();
        $z0 = <java.nio.DirectByteBuffer: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label0:
        if i0 > i1 goto label1;

        $i4 = i1 - i0;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i2 = $i4;
        i3 = i0 << 0;
        $z1 = <java.nio.DirectByteBuffer: boolean $assertionsDisabled>;
        if $z1 != 0 goto label3;

        if i3 >= 0 goto label3;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label3:
        $r3 = new java.nio.DirectByteBuffer;
        specialinvoke $r3.<java.nio.DirectByteBuffer: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i2, i2, i3);
        return $r3;
    }

    public java.nio.ByteBuffer duplicate()
    {
        java.nio.DirectByteBuffer r0, $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.nio.DirectByteBuffer;
        $r1 = new java.nio.DirectByteBuffer;
        $i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int position()>();
        $i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.DirectByteBuffer: int capacity()>();
        specialinvoke $r1.<java.nio.DirectByteBuffer: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, $i0, $i1, $i2, $i3, 0);
        return $r1;
    }

    public java.nio.ByteBuffer asReadOnlyBuffer()
    {
        java.nio.DirectByteBuffer r0;
        java.nio.DirectByteBufferR $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.nio.DirectByteBuffer;
        $r1 = new java.nio.DirectByteBufferR;
        $i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int position()>();
        $i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.DirectByteBuffer: int capacity()>();
        specialinvoke $r1.<java.nio.DirectByteBufferR: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, $i0, $i1, $i2, $i3, 0);
        return $r1;
    }

    public long address()
    {
        java.nio.DirectByteBuffer r0;
        long $l0;

        r0 := @this: java.nio.DirectByteBuffer;
        $l0 = r0.<java.nio.DirectByteBuffer: long address>;
        return $l0;
    }

    private long ix(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i2;
        long $l1, $l3, $l4;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        $l1 = r0.<java.nio.DirectByteBuffer: long address>;
        $i2 = i0 << 0;
        $l3 = (long) $i2;
        $l4 = $l1 + $l3;
        return $l4;
    }

    public byte get()
    {
        java.nio.DirectByteBuffer r0;
        sun.misc.Unsafe $r1;
        int $i0;
        long $l1;
        byte $b2;

        r0 := @this: java.nio.DirectByteBuffer;
        $r1 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        $i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int nextGetIndex()>();
        $l1 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i0);
        $b2 = virtualinvoke $r1.<sun.misc.Unsafe: byte getByte(long)>($l1);
        return $b2;
    }

    public byte get(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1;
        sun.misc.Unsafe $r1;
        long $l2;
        byte $b3;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        $r1 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        $i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkIndex(int)>(i0);
        $l2 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i1);
        $b3 = virtualinvoke $r1.<sun.misc.Unsafe: byte getByte(long)>($l2);
        return $b3;
    }

    public java.nio.ByteBuffer get(byte[], int, int)
    {
        java.nio.DirectByteBuffer r0;
        byte[] r1;
        int i0, i1, i2, i3, i4, $i6, $i7, $i8, $i10, $i12, $i14;
        long $l5, $l9, $l11, $l13;
        boolean $z0;
        java.lang.AssertionError $r2;
        java.nio.BufferUnderflowException $r3;

        r0 := @this: java.nio.DirectByteBuffer;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i6 = i1 << 0;
        if $i6 <= 6 goto label4;

        $i7 = lengthof r1;
        staticinvoke <java.nio.DirectByteBuffer: void checkBounds(int,int,int)>(i0, i1, $i7);
        i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int position()>();
        i3 = virtualinvoke r0.<java.nio.DirectByteBuffer: int limit()>();
        $z0 = <java.nio.DirectByteBuffer: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i2 <= i3 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        if i2 > i3 goto label1;

        $i8 = i3 - i2;
        goto label2;

     label1:
        $i8 = 0;

     label2:
        i4 = $i8;
        if i1 <= i4 goto label3;

        $r3 = new java.nio.BufferUnderflowException;
        specialinvoke $r3.<java.nio.BufferUnderflowException: void <init>()>();
        throw $r3;

     label3:
        $l9 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>(i2);
        $l5 = <java.nio.DirectByteBuffer: long arrayBaseOffset>;
        $i10 = i0 << 0;
        $l11 = (long) $i10;
        $i12 = i1 << 0;
        $l13 = (long) $i12;
        staticinvoke <java.nio.Bits: void copyToArray(long,java.lang.Object,long,long,long)>($l9, r1, $l5, $l11, $l13);
        $i14 = i2 + i1;
        virtualinvoke r0.<java.nio.DirectByteBuffer: java.nio.Buffer position(int)>($i14);
        goto label5;

     label4:
        specialinvoke r0.<java.nio.MappedByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, i0, i1);

     label5:
        return r0;
    }

    public java.nio.ByteBuffer put(byte)
    {
        java.nio.DirectByteBuffer r0;
        byte b0;
        sun.misc.Unsafe $r1;
        int $i1;
        long $l2;

        r0 := @this: java.nio.DirectByteBuffer;
        b0 := @parameter0: byte;
        $r1 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        $i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int nextPutIndex()>();
        $l2 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i1);
        virtualinvoke $r1.<sun.misc.Unsafe: void putByte(long,byte)>($l2, b0);
        return r0;
    }

    public java.nio.ByteBuffer put(int, byte)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i2;
        byte b1;
        sun.misc.Unsafe $r1;
        long $l3;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        b1 := @parameter1: byte;
        $r1 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        $i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkIndex(int)>(i0);
        $l3 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i2);
        virtualinvoke $r1.<sun.misc.Unsafe: void putByte(long,byte)>($l3, b1);
        return r0;
    }

    public java.nio.ByteBuffer put(java.nio.ByteBuffer)
    {
        java.nio.DirectByteBuffer r0, r2;
        java.nio.ByteBuffer r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i10, $i12, $i13, i14, i15, $i16, i17, $i18, $i19, $i20;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r3;
        java.lang.AssertionError $r4, $r5, $r11;
        java.nio.BufferOverflowException $r6;
        sun.misc.Unsafe $r7;
        long $l8, $l9, $l11;
        byte[] $r10, $r12;

        r0 := @this: java.nio.DirectByteBuffer;
        r1 := @parameter0: java.nio.ByteBuffer;
        $z0 = r1 instanceof java.nio.DirectByteBuffer;
        if $z0 == 0 goto label8;

        if r1 != r0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r3;

     label0:
        r2 = (java.nio.DirectByteBuffer) r1;
        i0 = virtualinvoke r2.<java.nio.DirectByteBuffer: int position()>();
        i1 = virtualinvoke r2.<java.nio.DirectByteBuffer: int limit()>();
        $z1 = <java.nio.DirectByteBuffer: boolean $assertionsDisabled>;
        if $z1 != 0 goto label1;

        if i0 <= i1 goto label1;

        $r4 = new java.lang.AssertionError;
        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();
        throw $r4;

     label1:
        if i0 > i1 goto label2;

        $i6 = i1 - i0;
        goto label3;

     label2:
        $i6 = 0;

     label3:
        i2 = $i6;
        i3 = virtualinvoke r0.<java.nio.DirectByteBuffer: int position()>();
        i4 = virtualinvoke r0.<java.nio.DirectByteBuffer: int limit()>();
        $z2 = <java.nio.DirectByteBuffer: boolean $assertionsDisabled>;
        if $z2 != 0 goto label4;

        if i3 <= i4 goto label4;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label4:
        if i3 > i4 goto label5;

        $i7 = i4 - i3;
        goto label6;

     label5:
        $i7 = 0;

     label6:
        i5 = $i7;
        if i2 <= i5 goto label7;

        $r6 = new java.nio.BufferOverflowException;
        specialinvoke $r6.<java.nio.BufferOverflowException: void <init>()>();
        throw $r6;

     label7:
        $r7 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        $l8 = specialinvoke r2.<java.nio.DirectByteBuffer: long ix(int)>(i0);
        $l9 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>(i3);
        $i10 = i2 << 0;
        $l11 = (long) $i10;
        virtualinvoke $r7.<sun.misc.Unsafe: void copyMemory(long,long,long)>($l8, $l9, $l11);
        $i12 = i0 + i2;
        virtualinvoke r2.<java.nio.DirectByteBuffer: java.nio.Buffer position(int)>($i12);
        $i13 = i3 + i2;
        virtualinvoke r0.<java.nio.DirectByteBuffer: java.nio.Buffer position(int)>($i13);
        goto label13;

     label8:
        $r10 = r1.<java.nio.ByteBuffer: byte[] hb>;
        if $r10 == null goto label12;

        i14 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();
        i15 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();
        $z3 = <java.nio.DirectByteBuffer: boolean $assertionsDisabled>;
        if $z3 != 0 goto label9;

        if i14 <= i15 goto label9;

        $r11 = new java.lang.AssertionError;
        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();
        throw $r11;

     label9:
        if i14 > i15 goto label10;

        $i16 = i15 - i14;
        goto label11;

     label10:
        $i16 = 0;

     label11:
        i17 = $i16;
        $r12 = r1.<java.nio.ByteBuffer: byte[] hb>;
        $i18 = r1.<java.nio.ByteBuffer: int offset>;
        $i19 = $i18 + i14;
        virtualinvoke r0.<java.nio.DirectByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r12, $i19, i17);
        $i20 = i14 + i17;
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i20);
        goto label13;

     label12:
        specialinvoke r0.<java.nio.MappedByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r1);

     label13:
        return r0;
    }

    public java.nio.ByteBuffer put(byte[], int, int)
    {
        java.nio.DirectByteBuffer r0;
        byte[] r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i9, $i12, $i14;
        boolean $z0;
        java.lang.AssertionError $r2;
        java.nio.BufferOverflowException $r3;
        long $l8, $l10, $l11, $l13;

        r0 := @this: java.nio.DirectByteBuffer;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i5 = i1 << 0;
        if $i5 <= 6 goto label4;

        $i6 = lengthof r1;
        staticinvoke <java.nio.DirectByteBuffer: void checkBounds(int,int,int)>(i0, i1, $i6);
        i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int position()>();
        i3 = virtualinvoke r0.<java.nio.DirectByteBuffer: int limit()>();
        $z0 = <java.nio.DirectByteBuffer: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i2 <= i3 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        if i2 > i3 goto label1;

        $i7 = i3 - i2;
        goto label2;

     label1:
        $i7 = 0;

     label2:
        i4 = $i7;
        if i1 <= i4 goto label3;

        $r3 = new java.nio.BufferOverflowException;
        specialinvoke $r3.<java.nio.BufferOverflowException: void <init>()>();
        throw $r3;

     label3:
        $l8 = <java.nio.DirectByteBuffer: long arrayBaseOffset>;
        $i9 = i0 << 0;
        $l10 = (long) $i9;
        $l11 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>(i2);
        $i12 = i1 << 0;
        $l13 = (long) $i12;
        staticinvoke <java.nio.Bits: void copyFromArray(java.lang.Object,long,long,long,long)>(r1, $l8, $l10, $l11, $l13);
        $i14 = i2 + i1;
        virtualinvoke r0.<java.nio.DirectByteBuffer: java.nio.Buffer position(int)>($i14);
        goto label5;

     label4:
        specialinvoke r0.<java.nio.MappedByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r1, i0, i1);

     label5:
        return r0;
    }

    public java.nio.ByteBuffer compact()
    {
        java.nio.DirectByteBuffer r0;
        int i0, i1, i2, $i3, $i6, $i8;
        boolean $z0;
        java.lang.AssertionError $r1;
        sun.misc.Unsafe $r2;
        long $l4, $l5, $l7;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int position()>();
        i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int limit()>();
        $z0 = <java.nio.DirectByteBuffer: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        $r1 = new java.lang.AssertionError;
        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();
        throw $r1;

     label0:
        if i0 > i1 goto label1;

        $i3 = i1 - i0;
        goto label2;

     label1:
        $i3 = 0;

     label2:
        i2 = $i3;
        $r2 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        $l4 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>(i0);
        $l5 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>(0);
        $i6 = i2 << 0;
        $l7 = (long) $i6;
        virtualinvoke $r2.<sun.misc.Unsafe: void copyMemory(long,long,long)>($l4, $l5, $l7);
        virtualinvoke r0.<java.nio.DirectByteBuffer: java.nio.Buffer position(int)>(i2);
        $i8 = virtualinvoke r0.<java.nio.DirectByteBuffer: int capacity()>();
        virtualinvoke r0.<java.nio.DirectByteBuffer: java.nio.Buffer limit(int)>($i8);
        virtualinvoke r0.<java.nio.DirectByteBuffer: void discardMark()>();
        return r0;
    }

    public boolean isDirect()
    {
        java.nio.DirectByteBuffer r0;

        r0 := @this: java.nio.DirectByteBuffer;
        return 1;
    }

    public boolean isReadOnly()
    {
        java.nio.DirectByteBuffer r0;

        r0 := @this: java.nio.DirectByteBuffer;
        return 0;
    }

    byte _get(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0;
        sun.misc.Unsafe $r1;
        long $l1, $l2, $l3;
        byte $b4;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        $r1 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        $l1 = r0.<java.nio.DirectByteBuffer: long address>;
        $l2 = (long) i0;
        $l3 = $l1 + $l2;
        $b4 = virtualinvoke $r1.<sun.misc.Unsafe: byte getByte(long)>($l3);
        return $b4;
    }

    void _put(int, byte)
    {
        java.nio.DirectByteBuffer r0;
        int i0;
        byte b1;
        sun.misc.Unsafe $r1;
        long $l2, $l3, $l4;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        b1 := @parameter1: byte;
        $r1 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        $l2 = r0.<java.nio.DirectByteBuffer: long address>;
        $l3 = (long) i0;
        $l4 = $l2 + $l3;
        virtualinvoke $r1.<sun.misc.Unsafe: void putByte(long,byte)>($l4, b1);
        return;
    }

    private char getChar(long)
    {
        java.nio.DirectByteBuffer r0;
        long l0;
        boolean $z0, $z1, $z2;
        char c1, $c2, $c3;
        sun.misc.Unsafe $r1;

        r0 := @this: java.nio.DirectByteBuffer;
        l0 := @parameter0: long;
        $z0 = <java.nio.DirectByteBuffer: boolean unaligned>;
        if $z0 == 0 goto label2;

        $r1 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        c1 = virtualinvoke $r1.<sun.misc.Unsafe: char getChar(long)>(l0);
        $z1 = r0.<java.nio.DirectByteBuffer: boolean nativeByteOrder>;
        if $z1 == 0 goto label0;

        $c2 = c1;
        goto label1;

     label0:
        $c2 = staticinvoke <java.nio.Bits: char swap(char)>(c1);

     label1:
        return $c2;

     label2:
        $z2 = r0.<java.nio.DirectByteBuffer: boolean bigEndian>;
        $c3 = staticinvoke <java.nio.Bits: char getChar(long,boolean)>(l0, $z2);
        return $c3;
    }

    public char getChar()
    {
        java.nio.DirectByteBuffer r0;
        int $i0;
        long $l1;
        char $c2;

        r0 := @this: java.nio.DirectByteBuffer;
        $i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int nextGetIndex(int)>(2);
        $l1 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i0);
        $c2 = specialinvoke r0.<java.nio.DirectByteBuffer: char getChar(long)>($l1);
        return $c2;
    }

    public char getChar(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1;
        long $l2;
        char $c3;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        $i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkIndex(int,int)>(i0, 2);
        $l2 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i1);
        $c3 = specialinvoke r0.<java.nio.DirectByteBuffer: char getChar(long)>($l2);
        return $c3;
    }

    private java.nio.ByteBuffer putChar(long, char)
    {
        java.nio.DirectByteBuffer r0;
        long l0;
        char c1, c2, $c4;
        boolean $z0, $z1, $z2;
        sun.misc.Unsafe $r1;

        r0 := @this: java.nio.DirectByteBuffer;
        l0 := @parameter0: long;
        c1 := @parameter1: char;
        $z0 = <java.nio.DirectByteBuffer: boolean unaligned>;
        if $z0 == 0 goto label2;

        c2 = c1;
        $r1 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        $z1 = r0.<java.nio.DirectByteBuffer: boolean nativeByteOrder>;
        if $z1 == 0 goto label0;

        $c4 = c2;
        goto label1;

     label0:
        $c4 = staticinvoke <java.nio.Bits: char swap(char)>(c2);

     label1:
        virtualinvoke $r1.<sun.misc.Unsafe: void putChar(long,char)>(l0, $c4);
        goto label3;

     label2:
        $z2 = r0.<java.nio.DirectByteBuffer: boolean bigEndian>;
        staticinvoke <java.nio.Bits: void putChar(long,char,boolean)>(l0, c1, $z2);

     label3:
        return r0;
    }

    public java.nio.ByteBuffer putChar(char)
    {
        java.nio.DirectByteBuffer r0;
        char c0;
        int $i1;
        long $l2;

        r0 := @this: java.nio.DirectByteBuffer;
        c0 := @parameter0: char;
        $i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int nextPutIndex(int)>(2);
        $l2 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i1);
        specialinvoke r0.<java.nio.DirectByteBuffer: java.nio.ByteBuffer putChar(long,char)>($l2, c0);
        return r0;
    }

    public java.nio.ByteBuffer putChar(int, char)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i2;
        char c1;
        long $l3;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        c1 := @parameter1: char;
        $i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkIndex(int,int)>(i0, 2);
        $l3 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i2);
        specialinvoke r0.<java.nio.DirectByteBuffer: java.nio.ByteBuffer putChar(long,char)>($l3, c1);
        return r0;
    }

    public java.nio.CharBuffer asCharBuffer()
    {
        java.nio.DirectByteBuffer r0;
        int i0, i1, i2, i3, $i4;
        boolean $z0, $z1, $z2, $z3;
        long $l5, $l6, $l7, $l8;
        byte $b9;
        java.nio.CharBuffer $r2, $r3;
        java.lang.AssertionError r4;
        java.nio.ByteBufferAsCharBufferB r5;
        java.nio.ByteBufferAsCharBufferL r6;
        java.nio.DirectCharBufferU r7;
        java.nio.DirectCharBufferS r8;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int position()>();
        i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int limit()>();
        $z0 = <java.nio.DirectByteBuffer: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        r4 = new java.lang.AssertionError;
        specialinvoke r4.<java.lang.AssertionError: void <init>()>();
        throw r4;

     label0:
        if i0 > i1 goto label1;

        $i4 = i1 - i0;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i2 = $i4;
        i3 = i2 >> 1;
        $z1 = <java.nio.DirectByteBuffer: boolean unaligned>;
        if $z1 != 0 goto label5;

        $l5 = r0.<java.nio.DirectByteBuffer: long address>;
        $l6 = (long) i0;
        $l7 = $l5 + $l6;
        $l8 = $l7 % 2L;
        $b9 = $l8 cmp 0L;
        if $b9 == 0 goto label5;

        $z2 = r0.<java.nio.DirectByteBuffer: boolean bigEndian>;
        if $z2 == 0 goto label3;

        r5 = new java.nio.ByteBufferAsCharBufferB;
        $r2 = r5;
        specialinvoke r5.<java.nio.ByteBufferAsCharBufferB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label4;

     label3:
        r6 = new java.nio.ByteBufferAsCharBufferL;
        $r2 = r6;
        specialinvoke r6.<java.nio.ByteBufferAsCharBufferL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label4:
        return $r2;

     label5:
        $z3 = r0.<java.nio.DirectByteBuffer: boolean nativeByteOrder>;
        if $z3 == 0 goto label6;

        r7 = new java.nio.DirectCharBufferU;
        $r3 = r7;
        specialinvoke r7.<java.nio.DirectCharBufferU: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label7;

     label6:
        r8 = new java.nio.DirectCharBufferS;
        $r3 = r8;
        specialinvoke r8.<java.nio.DirectCharBufferS: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label7:
        return $r3;
    }

    private short getShort(long)
    {
        java.nio.DirectByteBuffer r0;
        long l0;
        boolean $z0, $z1, $z2;
        short s1, $s2, $s3;
        sun.misc.Unsafe $r1;

        r0 := @this: java.nio.DirectByteBuffer;
        l0 := @parameter0: long;
        $z0 = <java.nio.DirectByteBuffer: boolean unaligned>;
        if $z0 == 0 goto label2;

        $r1 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        s1 = virtualinvoke $r1.<sun.misc.Unsafe: short getShort(long)>(l0);
        $z1 = r0.<java.nio.DirectByteBuffer: boolean nativeByteOrder>;
        if $z1 == 0 goto label0;

        $s2 = s1;
        goto label1;

     label0:
        $s2 = staticinvoke <java.nio.Bits: short swap(short)>(s1);

     label1:
        return $s2;

     label2:
        $z2 = r0.<java.nio.DirectByteBuffer: boolean bigEndian>;
        $s3 = staticinvoke <java.nio.Bits: short getShort(long,boolean)>(l0, $z2);
        return $s3;
    }

    public short getShort()
    {
        java.nio.DirectByteBuffer r0;
        int $i0;
        long $l1;
        short $s2;

        r0 := @this: java.nio.DirectByteBuffer;
        $i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int nextGetIndex(int)>(2);
        $l1 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i0);
        $s2 = specialinvoke r0.<java.nio.DirectByteBuffer: short getShort(long)>($l1);
        return $s2;
    }

    public short getShort(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1;
        long $l2;
        short $s3;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        $i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkIndex(int,int)>(i0, 2);
        $l2 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i1);
        $s3 = specialinvoke r0.<java.nio.DirectByteBuffer: short getShort(long)>($l2);
        return $s3;
    }

    private java.nio.ByteBuffer putShort(long, short)
    {
        java.nio.DirectByteBuffer r0;
        long l0;
        short s1, s2, $s4;
        boolean $z0, $z1, $z2;
        sun.misc.Unsafe $r1;

        r0 := @this: java.nio.DirectByteBuffer;
        l0 := @parameter0: long;
        s1 := @parameter1: short;
        $z0 = <java.nio.DirectByteBuffer: boolean unaligned>;
        if $z0 == 0 goto label2;

        s2 = s1;
        $r1 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        $z1 = r0.<java.nio.DirectByteBuffer: boolean nativeByteOrder>;
        if $z1 == 0 goto label0;

        $s4 = s2;
        goto label1;

     label0:
        $s4 = staticinvoke <java.nio.Bits: short swap(short)>(s2);

     label1:
        virtualinvoke $r1.<sun.misc.Unsafe: void putShort(long,short)>(l0, $s4);
        goto label3;

     label2:
        $z2 = r0.<java.nio.DirectByteBuffer: boolean bigEndian>;
        staticinvoke <java.nio.Bits: void putShort(long,short,boolean)>(l0, s1, $z2);

     label3:
        return r0;
    }

    public java.nio.ByteBuffer putShort(short)
    {
        java.nio.DirectByteBuffer r0;
        short s0;
        int $i1;
        long $l2;

        r0 := @this: java.nio.DirectByteBuffer;
        s0 := @parameter0: short;
        $i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int nextPutIndex(int)>(2);
        $l2 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i1);
        specialinvoke r0.<java.nio.DirectByteBuffer: java.nio.ByteBuffer putShort(long,short)>($l2, s0);
        return r0;
    }

    public java.nio.ByteBuffer putShort(int, short)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i2;
        short s1;
        long $l3;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        s1 := @parameter1: short;
        $i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkIndex(int,int)>(i0, 2);
        $l3 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i2);
        specialinvoke r0.<java.nio.DirectByteBuffer: java.nio.ByteBuffer putShort(long,short)>($l3, s1);
        return r0;
    }

    public java.nio.ShortBuffer asShortBuffer()
    {
        java.nio.DirectByteBuffer r0;
        int i0, i1, i2, i3, $i4;
        boolean $z0, $z1, $z2, $z3;
        long $l5, $l6, $l7, $l8;
        byte $b9;
        java.nio.ShortBuffer $r2, $r3;
        java.lang.AssertionError r4;
        java.nio.ByteBufferAsShortBufferB r5;
        java.nio.ByteBufferAsShortBufferL r6;
        java.nio.DirectShortBufferU r7;
        java.nio.DirectShortBufferS r8;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int position()>();
        i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int limit()>();
        $z0 = <java.nio.DirectByteBuffer: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        r4 = new java.lang.AssertionError;
        specialinvoke r4.<java.lang.AssertionError: void <init>()>();
        throw r4;

     label0:
        if i0 > i1 goto label1;

        $i4 = i1 - i0;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i2 = $i4;
        i3 = i2 >> 1;
        $z1 = <java.nio.DirectByteBuffer: boolean unaligned>;
        if $z1 != 0 goto label5;

        $l5 = r0.<java.nio.DirectByteBuffer: long address>;
        $l6 = (long) i0;
        $l7 = $l5 + $l6;
        $l8 = $l7 % 2L;
        $b9 = $l8 cmp 0L;
        if $b9 == 0 goto label5;

        $z2 = r0.<java.nio.DirectByteBuffer: boolean bigEndian>;
        if $z2 == 0 goto label3;

        r5 = new java.nio.ByteBufferAsShortBufferB;
        $r2 = r5;
        specialinvoke r5.<java.nio.ByteBufferAsShortBufferB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label4;

     label3:
        r6 = new java.nio.ByteBufferAsShortBufferL;
        $r2 = r6;
        specialinvoke r6.<java.nio.ByteBufferAsShortBufferL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label4:
        return $r2;

     label5:
        $z3 = r0.<java.nio.DirectByteBuffer: boolean nativeByteOrder>;
        if $z3 == 0 goto label6;

        r7 = new java.nio.DirectShortBufferU;
        $r3 = r7;
        specialinvoke r7.<java.nio.DirectShortBufferU: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label7;

     label6:
        r8 = new java.nio.DirectShortBufferS;
        $r3 = r8;
        specialinvoke r8.<java.nio.DirectShortBufferS: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label7:
        return $r3;
    }

    private int getInt(long)
    {
        java.nio.DirectByteBuffer r0;
        long l0;
        boolean $z0, $z1, $z2;
        int i1, $i2, $i3;
        sun.misc.Unsafe $r1;

        r0 := @this: java.nio.DirectByteBuffer;
        l0 := @parameter0: long;
        $z0 = <java.nio.DirectByteBuffer: boolean unaligned>;
        if $z0 == 0 goto label2;

        $r1 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        i1 = virtualinvoke $r1.<sun.misc.Unsafe: int getInt(long)>(l0);
        $z1 = r0.<java.nio.DirectByteBuffer: boolean nativeByteOrder>;
        if $z1 == 0 goto label0;

        $i2 = i1;
        goto label1;

     label0:
        $i2 = staticinvoke <java.nio.Bits: int swap(int)>(i1);

     label1:
        return $i2;

     label2:
        $z2 = r0.<java.nio.DirectByteBuffer: boolean bigEndian>;
        $i3 = staticinvoke <java.nio.Bits: int getInt(long,boolean)>(l0, $z2);
        return $i3;
    }

    public int getInt()
    {
        java.nio.DirectByteBuffer r0;
        int $i0, $i2;
        long $l1;

        r0 := @this: java.nio.DirectByteBuffer;
        $i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int nextGetIndex(int)>(4);
        $l1 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i0);
        $i2 = specialinvoke r0.<java.nio.DirectByteBuffer: int getInt(long)>($l1);
        return $i2;
    }

    public int getInt(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1, $i3;
        long $l2;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        $i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkIndex(int,int)>(i0, 4);
        $l2 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i1);
        $i3 = specialinvoke r0.<java.nio.DirectByteBuffer: int getInt(long)>($l2);
        return $i3;
    }

    private java.nio.ByteBuffer putInt(long, int)
    {
        java.nio.DirectByteBuffer r0;
        long l0;
        int i1, i2, $i4;
        boolean $z0, $z1, $z2;
        sun.misc.Unsafe $r1;

        r0 := @this: java.nio.DirectByteBuffer;
        l0 := @parameter0: long;
        i1 := @parameter1: int;
        $z0 = <java.nio.DirectByteBuffer: boolean unaligned>;
        if $z0 == 0 goto label2;

        i2 = i1;
        $r1 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        $z1 = r0.<java.nio.DirectByteBuffer: boolean nativeByteOrder>;
        if $z1 == 0 goto label0;

        $i4 = i2;
        goto label1;

     label0:
        $i4 = staticinvoke <java.nio.Bits: int swap(int)>(i2);

     label1:
        virtualinvoke $r1.<sun.misc.Unsafe: void putInt(long,int)>(l0, $i4);
        goto label3;

     label2:
        $z2 = r0.<java.nio.DirectByteBuffer: boolean bigEndian>;
        staticinvoke <java.nio.Bits: void putInt(long,int,boolean)>(l0, i1, $z2);

     label3:
        return r0;
    }

    public java.nio.ByteBuffer putInt(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1;
        long $l2;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        $i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int nextPutIndex(int)>(4);
        $l2 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i1);
        specialinvoke r0.<java.nio.DirectByteBuffer: java.nio.ByteBuffer putInt(long,int)>($l2, i0);
        return r0;
    }

    public java.nio.ByteBuffer putInt(int, int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, i1, $i2;
        long $l3;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkIndex(int,int)>(i0, 4);
        $l3 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i2);
        specialinvoke r0.<java.nio.DirectByteBuffer: java.nio.ByteBuffer putInt(long,int)>($l3, i1);
        return r0;
    }

    public java.nio.IntBuffer asIntBuffer()
    {
        java.nio.DirectByteBuffer r0;
        int i0, i1, i2, i3, $i4;
        boolean $z0, $z1, $z2, $z3;
        long $l5, $l6, $l7, $l8;
        byte $b9;
        java.nio.IntBuffer $r2, $r3;
        java.lang.AssertionError r4;
        java.nio.ByteBufferAsIntBufferB r5;
        java.nio.ByteBufferAsIntBufferL r6;
        java.nio.DirectIntBufferU r7;
        java.nio.DirectIntBufferS r8;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int position()>();
        i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int limit()>();
        $z0 = <java.nio.DirectByteBuffer: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        r4 = new java.lang.AssertionError;
        specialinvoke r4.<java.lang.AssertionError: void <init>()>();
        throw r4;

     label0:
        if i0 > i1 goto label1;

        $i4 = i1 - i0;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i2 = $i4;
        i3 = i2 >> 2;
        $z1 = <java.nio.DirectByteBuffer: boolean unaligned>;
        if $z1 != 0 goto label5;

        $l5 = r0.<java.nio.DirectByteBuffer: long address>;
        $l6 = (long) i0;
        $l7 = $l5 + $l6;
        $l8 = $l7 % 4L;
        $b9 = $l8 cmp 0L;
        if $b9 == 0 goto label5;

        $z2 = r0.<java.nio.DirectByteBuffer: boolean bigEndian>;
        if $z2 == 0 goto label3;

        r5 = new java.nio.ByteBufferAsIntBufferB;
        $r2 = r5;
        specialinvoke r5.<java.nio.ByteBufferAsIntBufferB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label4;

     label3:
        r6 = new java.nio.ByteBufferAsIntBufferL;
        $r2 = r6;
        specialinvoke r6.<java.nio.ByteBufferAsIntBufferL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label4:
        return $r2;

     label5:
        $z3 = r0.<java.nio.DirectByteBuffer: boolean nativeByteOrder>;
        if $z3 == 0 goto label6;

        r7 = new java.nio.DirectIntBufferU;
        $r3 = r7;
        specialinvoke r7.<java.nio.DirectIntBufferU: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label7;

     label6:
        r8 = new java.nio.DirectIntBufferS;
        $r3 = r8;
        specialinvoke r8.<java.nio.DirectIntBufferS: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label7:
        return $r3;
    }

    private long getLong(long)
    {
        java.nio.DirectByteBuffer r0;
        long l0, l1, $l2, $l3;
        boolean $z0, $z1, $z2;
        sun.misc.Unsafe $r1;

        r0 := @this: java.nio.DirectByteBuffer;
        l0 := @parameter0: long;
        $z0 = <java.nio.DirectByteBuffer: boolean unaligned>;
        if $z0 == 0 goto label2;

        $r1 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        l1 = virtualinvoke $r1.<sun.misc.Unsafe: long getLong(long)>(l0);
        $z1 = r0.<java.nio.DirectByteBuffer: boolean nativeByteOrder>;
        if $z1 == 0 goto label0;

        $l2 = l1;
        goto label1;

     label0:
        $l2 = staticinvoke <java.nio.Bits: long swap(long)>(l1);

     label1:
        return $l2;

     label2:
        $z2 = r0.<java.nio.DirectByteBuffer: boolean bigEndian>;
        $l3 = staticinvoke <java.nio.Bits: long getLong(long,boolean)>(l0, $z2);
        return $l3;
    }

    public long getLong()
    {
        java.nio.DirectByteBuffer r0;
        int $i0;
        long $l1, $l2;

        r0 := @this: java.nio.DirectByteBuffer;
        $i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int nextGetIndex(int)>(8);
        $l1 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i0);
        $l2 = specialinvoke r0.<java.nio.DirectByteBuffer: long getLong(long)>($l1);
        return $l2;
    }

    public long getLong(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1;
        long $l2, $l3;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        $i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkIndex(int,int)>(i0, 8);
        $l2 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i1);
        $l3 = specialinvoke r0.<java.nio.DirectByteBuffer: long getLong(long)>($l2);
        return $l3;
    }

    private java.nio.ByteBuffer putLong(long, long)
    {
        java.nio.DirectByteBuffer r0;
        long l0, l1, l2, $l4;
        boolean $z0, $z1, $z2;
        sun.misc.Unsafe $r1;

        r0 := @this: java.nio.DirectByteBuffer;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        $z0 = <java.nio.DirectByteBuffer: boolean unaligned>;
        if $z0 == 0 goto label2;

        l2 = l1;
        $r1 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        $z1 = r0.<java.nio.DirectByteBuffer: boolean nativeByteOrder>;
        if $z1 == 0 goto label0;

        $l4 = l2;
        goto label1;

     label0:
        $l4 = staticinvoke <java.nio.Bits: long swap(long)>(l2);

     label1:
        virtualinvoke $r1.<sun.misc.Unsafe: void putLong(long,long)>(l0, $l4);
        goto label3;

     label2:
        $z2 = r0.<java.nio.DirectByteBuffer: boolean bigEndian>;
        staticinvoke <java.nio.Bits: void putLong(long,long,boolean)>(l0, l1, $z2);

     label3:
        return r0;
    }

    public java.nio.ByteBuffer putLong(long)
    {
        java.nio.DirectByteBuffer r0;
        long l0, $l2;
        int $i1;

        r0 := @this: java.nio.DirectByteBuffer;
        l0 := @parameter0: long;
        $i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int nextPutIndex(int)>(8);
        $l2 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i1);
        specialinvoke r0.<java.nio.DirectByteBuffer: java.nio.ByteBuffer putLong(long,long)>($l2, l0);
        return r0;
    }

    public java.nio.ByteBuffer putLong(int, long)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i2;
        long l1, $l3;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        l1 := @parameter1: long;
        $i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkIndex(int,int)>(i0, 8);
        $l3 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i2);
        specialinvoke r0.<java.nio.DirectByteBuffer: java.nio.ByteBuffer putLong(long,long)>($l3, l1);
        return r0;
    }

    public java.nio.LongBuffer asLongBuffer()
    {
        java.nio.DirectByteBuffer r0;
        int i0, i1, i2, i3, $i4;
        boolean $z0, $z1, $z2, $z3;
        long $l5, $l6, $l7, $l8;
        byte $b9;
        java.nio.LongBuffer $r2, $r3;
        java.lang.AssertionError r4;
        java.nio.ByteBufferAsLongBufferB r5;
        java.nio.ByteBufferAsLongBufferL r6;
        java.nio.DirectLongBufferU r7;
        java.nio.DirectLongBufferS r8;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int position()>();
        i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int limit()>();
        $z0 = <java.nio.DirectByteBuffer: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        r4 = new java.lang.AssertionError;
        specialinvoke r4.<java.lang.AssertionError: void <init>()>();
        throw r4;

     label0:
        if i0 > i1 goto label1;

        $i4 = i1 - i0;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i2 = $i4;
        i3 = i2 >> 3;
        $z1 = <java.nio.DirectByteBuffer: boolean unaligned>;
        if $z1 != 0 goto label5;

        $l5 = r0.<java.nio.DirectByteBuffer: long address>;
        $l6 = (long) i0;
        $l7 = $l5 + $l6;
        $l8 = $l7 % 8L;
        $b9 = $l8 cmp 0L;
        if $b9 == 0 goto label5;

        $z2 = r0.<java.nio.DirectByteBuffer: boolean bigEndian>;
        if $z2 == 0 goto label3;

        r5 = new java.nio.ByteBufferAsLongBufferB;
        $r2 = r5;
        specialinvoke r5.<java.nio.ByteBufferAsLongBufferB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label4;

     label3:
        r6 = new java.nio.ByteBufferAsLongBufferL;
        $r2 = r6;
        specialinvoke r6.<java.nio.ByteBufferAsLongBufferL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label4:
        return $r2;

     label5:
        $z3 = r0.<java.nio.DirectByteBuffer: boolean nativeByteOrder>;
        if $z3 == 0 goto label6;

        r7 = new java.nio.DirectLongBufferU;
        $r3 = r7;
        specialinvoke r7.<java.nio.DirectLongBufferU: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label7;

     label6:
        r8 = new java.nio.DirectLongBufferS;
        $r3 = r8;
        specialinvoke r8.<java.nio.DirectLongBufferS: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label7:
        return $r3;
    }

    private float getFloat(long)
    {
        java.nio.DirectByteBuffer r0;
        long l0;
        boolean $z0, $z1, $z2;
        int i1, $i2;
        sun.misc.Unsafe $r1;
        float $f0, $f1;

        r0 := @this: java.nio.DirectByteBuffer;
        l0 := @parameter0: long;
        $z0 = <java.nio.DirectByteBuffer: boolean unaligned>;
        if $z0 == 0 goto label2;

        $r1 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        i1 = virtualinvoke $r1.<sun.misc.Unsafe: int getInt(long)>(l0);
        $z1 = r0.<java.nio.DirectByteBuffer: boolean nativeByteOrder>;
        if $z1 == 0 goto label0;

        $i2 = i1;
        goto label1;

     label0:
        $i2 = staticinvoke <java.nio.Bits: int swap(int)>(i1);

     label1:
        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i2);
        return $f0;

     label2:
        $z2 = r0.<java.nio.DirectByteBuffer: boolean bigEndian>;
        $f1 = staticinvoke <java.nio.Bits: float getFloat(long,boolean)>(l0, $z2);
        return $f1;
    }

    public float getFloat()
    {
        java.nio.DirectByteBuffer r0;
        int $i0;
        long $l1;
        float $f0;

        r0 := @this: java.nio.DirectByteBuffer;
        $i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int nextGetIndex(int)>(4);
        $l1 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i0);
        $f0 = specialinvoke r0.<java.nio.DirectByteBuffer: float getFloat(long)>($l1);
        return $f0;
    }

    public float getFloat(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1;
        long $l2;
        float $f0;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        $i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkIndex(int,int)>(i0, 4);
        $l2 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i1);
        $f0 = specialinvoke r0.<java.nio.DirectByteBuffer: float getFloat(long)>($l2);
        return $f0;
    }

    private java.nio.ByteBuffer putFloat(long, float)
    {
        java.nio.DirectByteBuffer r0;
        long l0;
        float f0;
        boolean $z0, $z1, $z2;
        int i1, $i3;
        sun.misc.Unsafe $r1;

        r0 := @this: java.nio.DirectByteBuffer;
        l0 := @parameter0: long;
        f0 := @parameter1: float;
        $z0 = <java.nio.DirectByteBuffer: boolean unaligned>;
        if $z0 == 0 goto label2;

        i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);
        $r1 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        $z1 = r0.<java.nio.DirectByteBuffer: boolean nativeByteOrder>;
        if $z1 == 0 goto label0;

        $i3 = i1;
        goto label1;

     label0:
        $i3 = staticinvoke <java.nio.Bits: int swap(int)>(i1);

     label1:
        virtualinvoke $r1.<sun.misc.Unsafe: void putInt(long,int)>(l0, $i3);
        goto label3;

     label2:
        $z2 = r0.<java.nio.DirectByteBuffer: boolean bigEndian>;
        staticinvoke <java.nio.Bits: void putFloat(long,float,boolean)>(l0, f0, $z2);

     label3:
        return r0;
    }

    public java.nio.ByteBuffer putFloat(float)
    {
        java.nio.DirectByteBuffer r0;
        float f0;
        int $i0;
        long $l1;

        r0 := @this: java.nio.DirectByteBuffer;
        f0 := @parameter0: float;
        $i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int nextPutIndex(int)>(4);
        $l1 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i0);
        specialinvoke r0.<java.nio.DirectByteBuffer: java.nio.ByteBuffer putFloat(long,float)>($l1, f0);
        return r0;
    }

    public java.nio.ByteBuffer putFloat(int, float)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1;
        float f0;
        long $l2;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        $i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkIndex(int,int)>(i0, 4);
        $l2 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i1);
        specialinvoke r0.<java.nio.DirectByteBuffer: java.nio.ByteBuffer putFloat(long,float)>($l2, f0);
        return r0;
    }

    public java.nio.FloatBuffer asFloatBuffer()
    {
        java.nio.DirectByteBuffer r0;
        int i0, i1, i2, i3, $i4;
        boolean $z0, $z1, $z2, $z3;
        long $l5, $l6, $l7, $l8;
        byte $b9;
        java.nio.FloatBuffer $r2, $r3;
        java.lang.AssertionError r4;
        java.nio.ByteBufferAsFloatBufferB r5;
        java.nio.ByteBufferAsFloatBufferL r6;
        java.nio.DirectFloatBufferU r7;
        java.nio.DirectFloatBufferS r8;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int position()>();
        i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int limit()>();
        $z0 = <java.nio.DirectByteBuffer: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        r4 = new java.lang.AssertionError;
        specialinvoke r4.<java.lang.AssertionError: void <init>()>();
        throw r4;

     label0:
        if i0 > i1 goto label1;

        $i4 = i1 - i0;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i2 = $i4;
        i3 = i2 >> 2;
        $z1 = <java.nio.DirectByteBuffer: boolean unaligned>;
        if $z1 != 0 goto label5;

        $l5 = r0.<java.nio.DirectByteBuffer: long address>;
        $l6 = (long) i0;
        $l7 = $l5 + $l6;
        $l8 = $l7 % 4L;
        $b9 = $l8 cmp 0L;
        if $b9 == 0 goto label5;

        $z2 = r0.<java.nio.DirectByteBuffer: boolean bigEndian>;
        if $z2 == 0 goto label3;

        r5 = new java.nio.ByteBufferAsFloatBufferB;
        $r2 = r5;
        specialinvoke r5.<java.nio.ByteBufferAsFloatBufferB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label4;

     label3:
        r6 = new java.nio.ByteBufferAsFloatBufferL;
        $r2 = r6;
        specialinvoke r6.<java.nio.ByteBufferAsFloatBufferL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label4:
        return $r2;

     label5:
        $z3 = r0.<java.nio.DirectByteBuffer: boolean nativeByteOrder>;
        if $z3 == 0 goto label6;

        r7 = new java.nio.DirectFloatBufferU;
        $r3 = r7;
        specialinvoke r7.<java.nio.DirectFloatBufferU: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label7;

     label6:
        r8 = new java.nio.DirectFloatBufferS;
        $r3 = r8;
        specialinvoke r8.<java.nio.DirectFloatBufferS: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label7:
        return $r3;
    }

    private double getDouble(long)
    {
        java.nio.DirectByteBuffer r0;
        long l0, l1, $l2;
        boolean $z0, $z1, $z2;
        sun.misc.Unsafe $r1;
        double $d0, $d1;

        r0 := @this: java.nio.DirectByteBuffer;
        l0 := @parameter0: long;
        $z0 = <java.nio.DirectByteBuffer: boolean unaligned>;
        if $z0 == 0 goto label2;

        $r1 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        l1 = virtualinvoke $r1.<sun.misc.Unsafe: long getLong(long)>(l0);
        $z1 = r0.<java.nio.DirectByteBuffer: boolean nativeByteOrder>;
        if $z1 == 0 goto label0;

        $l2 = l1;
        goto label1;

     label0:
        $l2 = staticinvoke <java.nio.Bits: long swap(long)>(l1);

     label1:
        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l2);
        return $d0;

     label2:
        $z2 = r0.<java.nio.DirectByteBuffer: boolean bigEndian>;
        $d1 = staticinvoke <java.nio.Bits: double getDouble(long,boolean)>(l0, $z2);
        return $d1;
    }

    public double getDouble()
    {
        java.nio.DirectByteBuffer r0;
        int $i0;
        long $l1;
        double $d0;

        r0 := @this: java.nio.DirectByteBuffer;
        $i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int nextGetIndex(int)>(8);
        $l1 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i0);
        $d0 = specialinvoke r0.<java.nio.DirectByteBuffer: double getDouble(long)>($l1);
        return $d0;
    }

    public double getDouble(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1;
        long $l2;
        double $d0;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        $i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkIndex(int,int)>(i0, 8);
        $l2 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i1);
        $d0 = specialinvoke r0.<java.nio.DirectByteBuffer: double getDouble(long)>($l2);
        return $d0;
    }

    private java.nio.ByteBuffer putDouble(long, double)
    {
        java.nio.DirectByteBuffer r0;
        long l0, l1, $l3;
        double d0;
        boolean $z0, $z1, $z2;
        sun.misc.Unsafe $r1;

        r0 := @this: java.nio.DirectByteBuffer;
        l0 := @parameter0: long;
        d0 := @parameter1: double;
        $z0 = <java.nio.DirectByteBuffer: boolean unaligned>;
        if $z0 == 0 goto label2;

        l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);
        $r1 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        $z1 = r0.<java.nio.DirectByteBuffer: boolean nativeByteOrder>;
        if $z1 == 0 goto label0;

        $l3 = l1;
        goto label1;

     label0:
        $l3 = staticinvoke <java.nio.Bits: long swap(long)>(l1);

     label1:
        virtualinvoke $r1.<sun.misc.Unsafe: void putLong(long,long)>(l0, $l3);
        goto label3;

     label2:
        $z2 = r0.<java.nio.DirectByteBuffer: boolean bigEndian>;
        staticinvoke <java.nio.Bits: void putDouble(long,double,boolean)>(l0, d0, $z2);

     label3:
        return r0;
    }

    public java.nio.ByteBuffer putDouble(double)
    {
        java.nio.DirectByteBuffer r0;
        double d0;
        int $i0;
        long $l1;

        r0 := @this: java.nio.DirectByteBuffer;
        d0 := @parameter0: double;
        $i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int nextPutIndex(int)>(8);
        $l1 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i0);
        specialinvoke r0.<java.nio.DirectByteBuffer: java.nio.ByteBuffer putDouble(long,double)>($l1, d0);
        return r0;
    }

    public java.nio.ByteBuffer putDouble(int, double)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1;
        double d0;
        long $l2;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 := @parameter0: int;
        d0 := @parameter1: double;
        $i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkIndex(int,int)>(i0, 8);
        $l2 = specialinvoke r0.<java.nio.DirectByteBuffer: long ix(int)>($i1);
        specialinvoke r0.<java.nio.DirectByteBuffer: java.nio.ByteBuffer putDouble(long,double)>($l2, d0);
        return r0;
    }

    public java.nio.DoubleBuffer asDoubleBuffer()
    {
        java.nio.DirectByteBuffer r0;
        int i0, i1, i2, i3, $i4;
        boolean $z0, $z1, $z2, $z3;
        long $l5, $l6, $l7, $l8;
        byte $b9;
        java.nio.DoubleBuffer $r2, $r3;
        java.lang.AssertionError r4;
        java.nio.ByteBufferAsDoubleBufferB r5;
        java.nio.ByteBufferAsDoubleBufferL r6;
        java.nio.DirectDoubleBufferU r7;
        java.nio.DirectDoubleBufferS r8;

        r0 := @this: java.nio.DirectByteBuffer;
        i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int position()>();
        i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int limit()>();
        $z0 = <java.nio.DirectByteBuffer: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if i0 <= i1 goto label0;

        r4 = new java.lang.AssertionError;
        specialinvoke r4.<java.lang.AssertionError: void <init>()>();
        throw r4;

     label0:
        if i0 > i1 goto label1;

        $i4 = i1 - i0;
        goto label2;

     label1:
        $i4 = 0;

     label2:
        i2 = $i4;
        i3 = i2 >> 3;
        $z1 = <java.nio.DirectByteBuffer: boolean unaligned>;
        if $z1 != 0 goto label5;

        $l5 = r0.<java.nio.DirectByteBuffer: long address>;
        $l6 = (long) i0;
        $l7 = $l5 + $l6;
        $l8 = $l7 % 8L;
        $b9 = $l8 cmp 0L;
        if $b9 == 0 goto label5;

        $z2 = r0.<java.nio.DirectByteBuffer: boolean bigEndian>;
        if $z2 == 0 goto label3;

        r5 = new java.nio.ByteBufferAsDoubleBufferB;
        $r2 = r5;
        specialinvoke r5.<java.nio.ByteBufferAsDoubleBufferB: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label4;

     label3:
        r6 = new java.nio.ByteBufferAsDoubleBufferL;
        $r2 = r6;
        specialinvoke r6.<java.nio.ByteBufferAsDoubleBufferL: void <init>(java.nio.ByteBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label4:
        return $r2;

     label5:
        $z3 = r0.<java.nio.DirectByteBuffer: boolean nativeByteOrder>;
        if $z3 == 0 goto label6;

        r7 = new java.nio.DirectDoubleBufferU;
        $r3 = r7;
        specialinvoke r7.<java.nio.DirectDoubleBufferU: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);
        goto label7;

     label6:
        r8 = new java.nio.DirectDoubleBufferS;
        $r3 = r8;
        specialinvoke r8.<java.nio.DirectDoubleBufferS: void <init>(sun.nio.ch.DirectBuffer,int,int,int,int,int)>(r0, -1, 0, i3, i3, i0);

     label7:
        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1, $z2;
        sun.misc.Unsafe $r1, $r2;
        int $i0;
        long $l1;

        $r0 = class "java/nio/DirectByteBuffer";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.nio.DirectByteBuffer: boolean $assertionsDisabled> = $z1;
        $r1 = staticinvoke <java.nio.Bits: sun.misc.Unsafe unsafe()>();
        <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe> = $r1;
        $r2 = <java.nio.DirectByteBuffer: sun.misc.Unsafe unsafe>;
        $i0 = virtualinvoke $r2.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[B");
        $l1 = (long) $i0;
        <java.nio.DirectByteBuffer: long arrayBaseOffset> = $l1;
        $z2 = staticinvoke <java.nio.Bits: boolean unaligned()>();
        <java.nio.DirectByteBuffer: boolean unaligned> = $z2;
        return;
    }
}
