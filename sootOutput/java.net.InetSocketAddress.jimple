public class java.net.InetSocketAddress extends java.net.SocketAddress
{
    private final transient java.net.InetSocketAddress$InetSocketAddressHolder holder;
    private static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private static final long FIELDS_OFFSET;
    private static final sun.misc.Unsafe UNSAFE;

    private static int checkPort(int)
    {
        int i0;
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r4;

        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        if i0 <= 65535 goto label1;

     label0:
        $r1 = new java.lang.IllegalArgumentException;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("port out of range:");
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);
        throw $r1;

     label1:
        return i0;
    }

    private static java.lang.String checkHost(java.lang.String)
    {
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.String;
        if r0 != null goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("hostname can\'t be null");
        throw $r1;

     label0:
        return r0;
    }

    public void <init>(int)
    {
        java.net.InetSocketAddress r0;
        int i0;
        java.net.InetAddress $r1;

        r0 := @this: java.net.InetSocketAddress;
        i0 := @parameter0: int;
        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress anyLocalAddress()>();
        specialinvoke r0.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r1, i0);
        return;
    }

    public void <init>(java.net.InetAddress, int)
    {
        java.net.InetSocketAddress r0;
        java.net.InetAddress r1, $r5;
        int i0, $i1;
        java.net.InetSocketAddress$InetSocketAddressHolder $r2;
        null_type $n0;

        r0 := @this: java.net.InetSocketAddress;
        r1 := @parameter0: java.net.InetAddress;
        i0 := @parameter1: int;
        specialinvoke r0.<java.net.SocketAddress: void <init>()>();
        $r2 = new java.net.InetSocketAddress$InetSocketAddressHolder;
        $n0 = null;
        if r1 != null goto label0;

        $r5 = staticinvoke <java.net.InetAddress: java.net.InetAddress anyLocalAddress()>();
        goto label1;

     label0:
        $r5 = r1;

     label1:
        $i1 = staticinvoke <java.net.InetSocketAddress: int checkPort(int)>(i0);
        specialinvoke $r2.<java.net.InetSocketAddress$InetSocketAddressHolder: void <init>(java.lang.String,java.net.InetAddress,int,java.net.InetSocketAddress$1)>($n0, $r5, $i1, null);
        r0.<java.net.InetSocketAddress: java.net.InetSocketAddress$InetSocketAddressHolder holder> = $r2;
        return;
    }

    public void <init>(java.lang.String, int)
    {
        java.net.InetSocketAddress r0;
        java.lang.String r1, r3;
        int i0, $i1;
        java.net.InetAddress r2;
        java.net.UnknownHostException r4, $r7;
        java.net.InetSocketAddress$InetSocketAddressHolder $r5;

        r0 := @this: java.net.InetSocketAddress;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        specialinvoke r0.<java.net.SocketAddress: void <init>()>();
        staticinvoke <java.net.InetSocketAddress: java.lang.String checkHost(java.lang.String)>(r1);
        r2 = null;
        r3 = null;

     label0:
        r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r1);

     label1:
        goto label3;

     label2:
        $r7 := @caughtexception;
        r4 = $r7;
        r3 = r1;

     label3:
        $r5 = new java.net.InetSocketAddress$InetSocketAddressHolder;
        $i1 = staticinvoke <java.net.InetSocketAddress: int checkPort(int)>(i0);
        specialinvoke $r5.<java.net.InetSocketAddress$InetSocketAddressHolder: void <init>(java.lang.String,java.net.InetAddress,int,java.net.InetSocketAddress$1)>(r3, r2, $i1, null);
        r0.<java.net.InetSocketAddress: java.net.InetSocketAddress$InetSocketAddressHolder holder> = $r5;
        return;

        catch java.net.UnknownHostException from label0 to label1 with label2;
    }

    private void <init>(int, java.lang.String)
    {
        java.net.InetSocketAddress r0;
        int i0;
        java.lang.String r1;
        java.net.InetSocketAddress$InetSocketAddressHolder $r2;

        r0 := @this: java.net.InetSocketAddress;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        specialinvoke r0.<java.net.SocketAddress: void <init>()>();
        $r2 = new java.net.InetSocketAddress$InetSocketAddressHolder;
        specialinvoke $r2.<java.net.InetSocketAddress$InetSocketAddressHolder: void <init>(java.lang.String,java.net.InetAddress,int,java.net.InetSocketAddress$1)>(r1, null, i0, null);
        r0.<java.net.InetSocketAddress: java.net.InetSocketAddress$InetSocketAddressHolder holder> = $r2;
        return;
    }

    public static java.net.InetSocketAddress createUnresolved(java.lang.String, int)
    {
        java.lang.String r0, $r2;
        int i0, $i1;
        java.net.InetSocketAddress $r1;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        $r1 = new java.net.InetSocketAddress;
        $i1 = staticinvoke <java.net.InetSocketAddress: int checkPort(int)>(i0);
        $r2 = staticinvoke <java.net.InetSocketAddress: java.lang.String checkHost(java.lang.String)>(r0);
        specialinvoke $r1.<java.net.InetSocketAddress: void <init>(int,java.lang.String)>($i1, $r2);
        return $r1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.net.InetSocketAddress r0;
        java.io.ObjectOutputStream r1;
        java.io.ObjectOutputStream$PutField r2;
        java.net.InetSocketAddress$InetSocketAddressHolder $r3, $r5, $r7;
        java.lang.String $r4;
        java.net.InetAddress $r6;
        int $i0;

        r0 := @this: java.net.InetSocketAddress;
        r1 := @parameter0: java.io.ObjectOutputStream;
        r2 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();
        $r3 = r0.<java.net.InetSocketAddress: java.net.InetSocketAddress$InetSocketAddressHolder holder>;
        $r4 = staticinvoke <java.net.InetSocketAddress$InetSocketAddressHolder: java.lang.String access$100(java.net.InetSocketAddress$InetSocketAddressHolder)>($r3);
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("hostname", $r4);
        $r5 = r0.<java.net.InetSocketAddress: java.net.InetSocketAddress$InetSocketAddressHolder holder>;
        $r6 = staticinvoke <java.net.InetSocketAddress$InetSocketAddressHolder: java.net.InetAddress access$200(java.net.InetSocketAddress$InetSocketAddressHolder)>($r5);
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("addr", $r6);
        $r7 = r0.<java.net.InetSocketAddress: java.net.InetSocketAddress$InetSocketAddressHolder holder>;
        $i0 = staticinvoke <java.net.InetSocketAddress$InetSocketAddressHolder: int access$300(java.net.InetSocketAddress$InetSocketAddressHolder)>($r7);
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("port", $i0);
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.net.InetSocketAddress r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectInputStream$GetField r2;
        java.lang.String r3;
        java.net.InetAddress r4;
        int i0;
        java.net.InetSocketAddress$InetSocketAddressHolder r5, $r9;
        java.lang.Object $r6, $r7;
        java.io.InvalidObjectException $r8;
        sun.misc.Unsafe $r10;
        long $l2;

        r0 := @this: java.net.InetSocketAddress;
        r1 := @parameter0: java.io.ObjectInputStream;
        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();
        $r6 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("hostname", null);
        r3 = (java.lang.String) $r6;
        $r7 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("addr", null);
        r4 = (java.net.InetAddress) $r7;
        i0 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("port", -1);
        staticinvoke <java.net.InetSocketAddress: int checkPort(int)>(i0);
        if r3 != null goto label0;

        if r4 != null goto label0;

        $r8 = new java.io.InvalidObjectException;
        specialinvoke $r8.<java.io.InvalidObjectException: void <init>(java.lang.String)>("hostname and addr can\'t both be null");
        throw $r8;

     label0:
        $r9 = new java.net.InetSocketAddress$InetSocketAddressHolder;
        specialinvoke $r9.<java.net.InetSocketAddress$InetSocketAddressHolder: void <init>(java.lang.String,java.net.InetAddress,int,java.net.InetSocketAddress$1)>(r3, r4, i0, null);
        r5 = $r9;
        $r10 = <java.net.InetSocketAddress: sun.misc.Unsafe UNSAFE>;
        $l2 = <java.net.InetSocketAddress: long FIELDS_OFFSET>;
        virtualinvoke $r10.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r0, $l2, r5);
        return;
    }

    private void readObjectNoData() throws java.io.ObjectStreamException
    {
        java.net.InetSocketAddress r0;
        java.io.InvalidObjectException $r1;

        r0 := @this: java.net.InetSocketAddress;
        $r1 = new java.io.InvalidObjectException;
        specialinvoke $r1.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Stream data required");
        throw $r1;
    }

    public final int getPort()
    {
        java.net.InetSocketAddress r0;
        java.net.InetSocketAddress$InetSocketAddressHolder $r1;
        int $i0;

        r0 := @this: java.net.InetSocketAddress;
        $r1 = r0.<java.net.InetSocketAddress: java.net.InetSocketAddress$InetSocketAddressHolder holder>;
        $i0 = staticinvoke <java.net.InetSocketAddress$InetSocketAddressHolder: int access$400(java.net.InetSocketAddress$InetSocketAddressHolder)>($r1);
        return $i0;
    }

    public final java.net.InetAddress getAddress()
    {
        java.net.InetSocketAddress r0;
        java.net.InetSocketAddress$InetSocketAddressHolder $r1;
        java.net.InetAddress $r2;

        r0 := @this: java.net.InetSocketAddress;
        $r1 = r0.<java.net.InetSocketAddress: java.net.InetSocketAddress$InetSocketAddressHolder holder>;
        $r2 = staticinvoke <java.net.InetSocketAddress$InetSocketAddressHolder: java.net.InetAddress access$500(java.net.InetSocketAddress$InetSocketAddressHolder)>($r1);
        return $r2;
    }

    public final java.lang.String getHostName()
    {
        java.net.InetSocketAddress r0;
        java.net.InetSocketAddress$InetSocketAddressHolder $r1;
        java.lang.String $r2;

        r0 := @this: java.net.InetSocketAddress;
        $r1 = r0.<java.net.InetSocketAddress: java.net.InetSocketAddress$InetSocketAddressHolder holder>;
        $r2 = staticinvoke <java.net.InetSocketAddress$InetSocketAddressHolder: java.lang.String access$600(java.net.InetSocketAddress$InetSocketAddressHolder)>($r1);
        return $r2;
    }

    public final java.lang.String getHostString()
    {
        java.net.InetSocketAddress r0;
        java.net.InetSocketAddress$InetSocketAddressHolder $r1;
        java.lang.String $r2;

        r0 := @this: java.net.InetSocketAddress;
        $r1 = r0.<java.net.InetSocketAddress: java.net.InetSocketAddress$InetSocketAddressHolder holder>;
        $r2 = staticinvoke <java.net.InetSocketAddress$InetSocketAddressHolder: java.lang.String access$700(java.net.InetSocketAddress$InetSocketAddressHolder)>($r1);
        return $r2;
    }

    public final boolean isUnresolved()
    {
        java.net.InetSocketAddress r0;
        java.net.InetSocketAddress$InetSocketAddressHolder $r1;
        boolean $z0;

        r0 := @this: java.net.InetSocketAddress;
        $r1 = r0.<java.net.InetSocketAddress: java.net.InetSocketAddress$InetSocketAddressHolder holder>;
        $z0 = staticinvoke <java.net.InetSocketAddress$InetSocketAddressHolder: boolean access$800(java.net.InetSocketAddress$InetSocketAddressHolder)>($r1);
        return $z0;
    }

    public java.lang.String toString()
    {
        java.net.InetSocketAddress r0;
        java.net.InetSocketAddress$InetSocketAddressHolder $r1;
        java.lang.String $r2;

        r0 := @this: java.net.InetSocketAddress;
        $r1 = r0.<java.net.InetSocketAddress: java.net.InetSocketAddress$InetSocketAddressHolder holder>;
        $r2 = virtualinvoke $r1.<java.net.InetSocketAddress$InetSocketAddressHolder: java.lang.String toString()>();
        return $r2;
    }

    public final boolean equals(java.lang.Object)
    {
        java.net.InetSocketAddress r0, $r3;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.net.InetSocketAddress$InetSocketAddressHolder $r2, $r4;

        r0 := @this: java.net.InetSocketAddress;
        r1 := @parameter0: java.lang.Object;
        if r1 == null goto label0;

        $z0 = r1 instanceof java.net.InetSocketAddress;
        if $z0 != 0 goto label1;

     label0:
        return 0;

     label1:
        $r2 = r0.<java.net.InetSocketAddress: java.net.InetSocketAddress$InetSocketAddressHolder holder>;
        $r3 = (java.net.InetSocketAddress) r1;
        $r4 = $r3.<java.net.InetSocketAddress: java.net.InetSocketAddress$InetSocketAddressHolder holder>;
        $z1 = virtualinvoke $r2.<java.net.InetSocketAddress$InetSocketAddressHolder: boolean equals(java.lang.Object)>($r4);
        return $z1;
    }

    public final int hashCode()
    {
        java.net.InetSocketAddress r0;
        java.net.InetSocketAddress$InetSocketAddressHolder $r1;
        int $i0;

        r0 := @this: java.net.InetSocketAddress;
        $r1 = r0.<java.net.InetSocketAddress: java.net.InetSocketAddress$InetSocketAddressHolder holder>;
        $i0 = virtualinvoke $r1.<java.net.InetSocketAddress$InetSocketAddressHolder: int hashCode()>();
        return $i0;
    }

    static void <clinit>()
    {
        java.io.ObjectStreamField $r0, $r3, $r4;
        sun.misc.Unsafe r1;
        java.io.ObjectStreamField[] $r2;
        java.lang.Class $r5, $r6;
        java.lang.reflect.Field $r7;
        long $l0;
        java.lang.ReflectiveOperationException $r8, r9;
        java.lang.Error $r10;

        $r2 = newarray (java.io.ObjectStreamField)[3];
        $r0 = new java.io.ObjectStreamField;
        specialinvoke $r0.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("hostname", class "java/lang/String");
        $r2[0] = $r0;
        $r3 = new java.io.ObjectStreamField;
        specialinvoke $r3.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("addr", class "java/net/InetAddress");
        $r2[1] = $r3;
        $r4 = new java.io.ObjectStreamField;
        $r5 = <java.lang.Integer: java.lang.Class TYPE>;
        specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("port", $r5);
        $r2[2] = $r4;
        <java.net.InetSocketAddress: java.io.ObjectStreamField[] serialPersistentFields> = $r2;

     label0:
        r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        $r6 = class "java/net/InetSocketAddress";
        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("holder");
        $l0 = virtualinvoke r1.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r7);
        <java.net.InetSocketAddress: long FIELDS_OFFSET> = $l0;
        <java.net.InetSocketAddress: sun.misc.Unsafe UNSAFE> = r1;

     label1:
        goto label3;

     label2:
        $r8 := @caughtexception;
        r9 = $r8;
        $r10 = new java.lang.Error;
        specialinvoke $r10.<java.lang.Error: void <init>(java.lang.Throwable)>(r9);
        throw $r10;

     label3:
        return;

        catch java.lang.ReflectiveOperationException from label0 to label1 with label2;
    }
}
