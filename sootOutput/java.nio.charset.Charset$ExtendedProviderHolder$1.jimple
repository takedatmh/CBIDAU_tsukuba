final class java.nio.charset.Charset$ExtendedProviderHolder$1 extends java.lang.Object implements java.security.PrivilegedAction
{

    void <init>()
    {
        java.nio.charset.Charset$ExtendedProviderHolder$1 r0;

        r0 := @this: java.nio.charset.Charset$ExtendedProviderHolder$1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public java.nio.charset.spi.CharsetProvider run()
    {
        java.nio.charset.Charset$ExtendedProviderHolder$1 r0;
        java.lang.Class r1;
        java.lang.Object $r2;
        java.nio.charset.spi.CharsetProvider $r3;
        java.lang.ClassNotFoundException $r4, r5;
        java.lang.ReflectiveOperationException $r6, r7;
        java.lang.Error $r8;

        r0 := @this: java.nio.charset.Charset$ExtendedProviderHolder$1;

     label0:
        r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("sun.nio.cs.ext.ExtendedCharsets");
        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.Object newInstance()>();
        $r3 = (java.nio.charset.spi.CharsetProvider) $r2;

     label1:
        return $r3;

     label2:
        $r4 := @caughtexception;
        r5 = $r4;
        goto label4;

     label3:
        $r6 := @caughtexception;
        r7 = $r6;
        $r8 = new java.lang.Error;
        specialinvoke $r8.<java.lang.Error: void <init>(java.lang.Throwable)>(r7);
        throw $r8;

     label4:
        return null;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
        catch java.lang.InstantiationException from label0 to label1 with label3;
        catch java.lang.IllegalAccessException from label0 to label1 with label3;
    }

    public volatile java.lang.Object run()
    {
        java.nio.charset.Charset$ExtendedProviderHolder$1 r0;
        java.nio.charset.spi.CharsetProvider $r1;

        r0 := @this: java.nio.charset.Charset$ExtendedProviderHolder$1;
        $r1 = virtualinvoke r0.<java.nio.charset.Charset$ExtendedProviderHolder$1: java.nio.charset.spi.CharsetProvider run()>();
        return $r1;
    }
}
