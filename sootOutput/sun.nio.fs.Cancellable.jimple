abstract class sun.nio.fs.Cancellable extends java.lang.Object implements java.lang.Runnable
{
    private static final sun.misc.Unsafe unsafe;
    private final long pollingAddress;
    private final java.lang.Object lock;
    private boolean completed;
    private java.lang.Throwable exception;

    protected void <init>()
    {
        sun.nio.fs.Cancellable r0;
        java.lang.Object $r1;
        sun.misc.Unsafe $r2, $r3;
        long $l0, $l1;

        r0 := @this: sun.nio.fs.Cancellable;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new java.lang.Object;
        specialinvoke $r1.<java.lang.Object: void <init>()>();
        r0.<sun.nio.fs.Cancellable: java.lang.Object lock> = $r1;
        $r2 = <sun.nio.fs.Cancellable: sun.misc.Unsafe unsafe>;
        $l0 = virtualinvoke $r2.<sun.misc.Unsafe: long allocateMemory(long)>(4L);
        r0.<sun.nio.fs.Cancellable: long pollingAddress> = $l0;
        $r3 = <sun.nio.fs.Cancellable: sun.misc.Unsafe unsafe>;
        $l1 = r0.<sun.nio.fs.Cancellable: long pollingAddress>;
        virtualinvoke $r3.<sun.misc.Unsafe: void putIntVolatile(java.lang.Object,long,int)>(null, $l1, 0);
        return;
    }

    protected long addressToPollForCancel()
    {
        sun.nio.fs.Cancellable r0;
        long $l0;

        r0 := @this: sun.nio.fs.Cancellable;
        $l0 = r0.<sun.nio.fs.Cancellable: long pollingAddress>;
        return $l0;
    }

    protected int cancelValue()
    {
        sun.nio.fs.Cancellable r0;

        r0 := @this: sun.nio.fs.Cancellable;
        return 2147483647;
    }

    final void cancel()
    {
        sun.nio.fs.Cancellable r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        boolean $z0;
        sun.misc.Unsafe $r4;
        long $l0;
        int $i1;

        r0 := @this: sun.nio.fs.Cancellable;
        $r3 = r0.<sun.nio.fs.Cancellable: java.lang.Object lock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z0 = r0.<sun.nio.fs.Cancellable: boolean completed>;
        if $z0 != 0 goto label1;

        $r4 = <sun.nio.fs.Cancellable: sun.misc.Unsafe unsafe>;
        $l0 = r0.<sun.nio.fs.Cancellable: long pollingAddress>;
        $i1 = virtualinvoke r0.<sun.nio.fs.Cancellable: int cancelValue()>();
        virtualinvoke $r4.<sun.misc.Unsafe: void putIntVolatile(java.lang.Object,long,int)>(null, $l0, $i1);

     label1:
        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        r2 = $r5;
        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private java.lang.Throwable exception()
    {
        sun.nio.fs.Cancellable r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4, $r5;

        r0 := @this: sun.nio.fs.Cancellable;
        $r3 = r0.<sun.nio.fs.Cancellable: java.lang.Object lock>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = r0.<sun.nio.fs.Cancellable: java.lang.Throwable exception>;
        exitmonitor r1;

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;

     label3:
        r2 = $r5;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public final void run()
    {
        sun.nio.fs.Cancellable r0;
        java.lang.Object r1, r6, $r8, $r13, r14, $r16, r17, $r21;
        java.lang.Throwable r2, r3, r4, r5, r7, $r10, $r11, r12, $r15, $r19, $r20, $r23;
        sun.misc.Unsafe $r9, $r18, $r22;
        long $l0, $l1, $l2;

        r0 := @this: sun.nio.fs.Cancellable;

     label0:
        virtualinvoke r0.<sun.nio.fs.Cancellable: void implRun()>();

     label1:
        $r8 = r0.<sun.nio.fs.Cancellable: java.lang.Object lock>;
        r1 = $r8;
        entermonitor $r8;

     label2:
        r0.<sun.nio.fs.Cancellable: boolean completed> = 1;
        $r9 = <sun.nio.fs.Cancellable: sun.misc.Unsafe unsafe>;
        $l0 = r0.<sun.nio.fs.Cancellable: long pollingAddress>;
        virtualinvoke $r9.<sun.misc.Unsafe: void freeMemory(long)>($l0);
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r10 := @caughtexception;

     label5:
        r2 = $r10;
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        goto label31;

     label8:
        $r11 := @caughtexception;

     label9:
        r12 = $r11;
        $r13 = r0.<sun.nio.fs.Cancellable: java.lang.Object lock>;
        r14 = $r13;
        entermonitor $r13;

     label10:
        r0.<sun.nio.fs.Cancellable: java.lang.Throwable exception> = r12;
        exitmonitor r14;

     label11:
        goto label15;

     label12:
        $r15 := @caughtexception;

     label13:
        r3 = $r15;
        exitmonitor r14;

     label14:
        throw r3;

     label15:
        $r16 = r0.<sun.nio.fs.Cancellable: java.lang.Object lock>;
        r17 = $r16;
        entermonitor $r16;

     label16:
        r0.<sun.nio.fs.Cancellable: boolean completed> = 1;
        $r18 = <sun.nio.fs.Cancellable: sun.misc.Unsafe unsafe>;
        $l1 = r0.<sun.nio.fs.Cancellable: long pollingAddress>;
        virtualinvoke $r18.<sun.misc.Unsafe: void freeMemory(long)>($l1);
        exitmonitor r17;

     label17:
        goto label21;

     label18:
        $r19 := @caughtexception;

     label19:
        r4 = $r19;
        exitmonitor r17;

     label20:
        throw r4;

     label21:
        goto label31;

     label22:
        $r20 := @caughtexception;

     label23:
        r5 = $r20;

     label24:
        $r21 = r0.<sun.nio.fs.Cancellable: java.lang.Object lock>;
        r6 = $r21;
        entermonitor $r21;

     label25:
        r0.<sun.nio.fs.Cancellable: boolean completed> = 1;
        $r22 = <sun.nio.fs.Cancellable: sun.misc.Unsafe unsafe>;
        $l2 = r0.<sun.nio.fs.Cancellable: long pollingAddress>;
        virtualinvoke $r22.<sun.misc.Unsafe: void freeMemory(long)>($l2);
        exitmonitor r6;

     label26:
        goto label30;

     label27:
        $r23 := @caughtexception;

     label28:
        r7 = $r23;
        exitmonitor r6;

     label29:
        throw r7;

     label30:
        throw r5;

     label31:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label0 to label1 with label8;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Throwable from label0 to label1 with label22;
        catch java.lang.Throwable from label9 to label15 with label22;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label28 to label29 with label27;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    abstract void implRun() throws java.lang.Throwable;

    static void runInterruptibly(sun.nio.fs.Cancellable) throws java.util.concurrent.ExecutionException
    {
        sun.nio.fs.Cancellable r0;
        java.lang.Thread $r1, r2, $r5;
        boolean z0, $z1;
        java.lang.InterruptedException r3, $r4;
        java.lang.Throwable r6;
        java.util.concurrent.ExecutionException $r7;

        r0 := @parameter0: sun.nio.fs.Cancellable;
        $r1 = new java.lang.Thread;
        specialinvoke $r1.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0);
        r2 = $r1;
        virtualinvoke r2.<java.lang.Thread: void start()>();
        z0 = 0;

     label0:
        $z1 = virtualinvoke r2.<java.lang.Thread: boolean isAlive()>();
        if $z1 == 0 goto label4;

     label1:
        virtualinvoke r2.<java.lang.Thread: void join()>();

     label2:
        goto label0;

     label3:
        $r4 := @caughtexception;
        r3 = $r4;
        z0 = 1;
        virtualinvoke r0.<sun.nio.fs.Cancellable: void cancel()>();
        goto label0;

     label4:
        if z0 == 0 goto label5;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        virtualinvoke $r5.<java.lang.Thread: void interrupt()>();

     label5:
        r6 = specialinvoke r0.<sun.nio.fs.Cancellable: java.lang.Throwable exception()>();
        if r6 == null goto label6;

        $r7 = new java.util.concurrent.ExecutionException;
        specialinvoke $r7.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>(r6);
        throw $r7;

     label6:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0;

        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <sun.nio.fs.Cancellable: sun.misc.Unsafe unsafe> = $r0;
        return;
    }
}
