public abstract class java.nio.channels.AsynchronousChannelGroup extends java.lang.Object
{
    private final java.nio.channels.spi.AsynchronousChannelProvider provider;

    protected void <init>(java.nio.channels.spi.AsynchronousChannelProvider)
    {
        java.nio.channels.AsynchronousChannelGroup r0;
        java.nio.channels.spi.AsynchronousChannelProvider r1;

        r0 := @this: java.nio.channels.AsynchronousChannelGroup;
        r1 := @parameter0: java.nio.channels.spi.AsynchronousChannelProvider;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.nio.channels.AsynchronousChannelGroup: java.nio.channels.spi.AsynchronousChannelProvider provider> = r1;
        return;
    }

    public final java.nio.channels.spi.AsynchronousChannelProvider provider()
    {
        java.nio.channels.AsynchronousChannelGroup r0;
        java.nio.channels.spi.AsynchronousChannelProvider $r1;

        r0 := @this: java.nio.channels.AsynchronousChannelGroup;
        $r1 = r0.<java.nio.channels.AsynchronousChannelGroup: java.nio.channels.spi.AsynchronousChannelProvider provider>;
        return $r1;
    }

    public static java.nio.channels.AsynchronousChannelGroup withFixedThreadPool(int, java.util.concurrent.ThreadFactory) throws java.io.IOException
    {
        int i0;
        java.util.concurrent.ThreadFactory r0;
        java.nio.channels.spi.AsynchronousChannelProvider $r1;
        java.nio.channels.AsynchronousChannelGroup $r2;

        i0 := @parameter0: int;
        r0 := @parameter1: java.util.concurrent.ThreadFactory;
        $r1 = staticinvoke <java.nio.channels.spi.AsynchronousChannelProvider: java.nio.channels.spi.AsynchronousChannelProvider provider()>();
        $r2 = virtualinvoke $r1.<java.nio.channels.spi.AsynchronousChannelProvider: java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(int,java.util.concurrent.ThreadFactory)>(i0, r0);
        return $r2;
    }

    public static java.nio.channels.AsynchronousChannelGroup withCachedThreadPool(java.util.concurrent.ExecutorService, int) throws java.io.IOException
    {
        java.util.concurrent.ExecutorService r0;
        int i0;
        java.nio.channels.spi.AsynchronousChannelProvider $r1;
        java.nio.channels.AsynchronousChannelGroup $r2;

        r0 := @parameter0: java.util.concurrent.ExecutorService;
        i0 := @parameter1: int;
        $r1 = staticinvoke <java.nio.channels.spi.AsynchronousChannelProvider: java.nio.channels.spi.AsynchronousChannelProvider provider()>();
        $r2 = virtualinvoke $r1.<java.nio.channels.spi.AsynchronousChannelProvider: java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(java.util.concurrent.ExecutorService,int)>(r0, i0);
        return $r2;
    }

    public static java.nio.channels.AsynchronousChannelGroup withThreadPool(java.util.concurrent.ExecutorService) throws java.io.IOException
    {
        java.util.concurrent.ExecutorService r0;
        java.nio.channels.spi.AsynchronousChannelProvider $r1;
        java.nio.channels.AsynchronousChannelGroup $r2;

        r0 := @parameter0: java.util.concurrent.ExecutorService;
        $r1 = staticinvoke <java.nio.channels.spi.AsynchronousChannelProvider: java.nio.channels.spi.AsynchronousChannelProvider provider()>();
        $r2 = virtualinvoke $r1.<java.nio.channels.spi.AsynchronousChannelProvider: java.nio.channels.AsynchronousChannelGroup openAsynchronousChannelGroup(java.util.concurrent.ExecutorService,int)>(r0, 0);
        return $r2;
    }

    public abstract boolean isShutdown();

    public abstract boolean isTerminated();

    public abstract void shutdown();

    public abstract void shutdownNow() throws java.io.IOException;

    public abstract boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
}
