class java.nio.HeapCharBuffer extends java.nio.CharBuffer
{

    void <init>(int, int)
    {
        java.nio.HeapCharBuffer r0;
        int i0, i1;
        char[] $r1;

        r0 := @this: java.nio.HeapCharBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = newarray (char)[i0];
        specialinvoke r0.<java.nio.CharBuffer: void <init>(int,int,int,int,char[],int)>(-1, 0, i1, i0, $r1, 0);
        return;
    }

    void <init>(char[], int, int)
    {
        java.nio.HeapCharBuffer r0;
        char[] r1;
        int i0, i1, $i2, $i3;

        r0 := @this: java.nio.HeapCharBuffer;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = i0 + i1;
        $i3 = lengthof r1;
        specialinvoke r0.<java.nio.CharBuffer: void <init>(int,int,int,int,char[],int)>(-1, i0, $i2, $i3, r1, 0);
        return;
    }

    protected void <init>(char[], int, int, int, int, int)
    {
        java.nio.HeapCharBuffer r0;
        char[] r1;
        int i0, i1, i2, i3, i4;

        r0 := @this: java.nio.HeapCharBuffer;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        specialinvoke r0.<java.nio.CharBuffer: void <init>(int,int,int,int,char[],int)>(i0, i1, i2, i3, r1, i4);
        return;
    }

    public java.nio.CharBuffer slice()
    {
        java.nio.HeapCharBuffer r0, $r1;
        char[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapCharBuffer;
        $r1 = new java.nio.HeapCharBuffer;
        $r2 = r0.<java.nio.HeapCharBuffer: char[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapCharBuffer: int remaining()>();
        $i1 = virtualinvoke r0.<java.nio.HeapCharBuffer: int remaining()>();
        $i2 = virtualinvoke r0.<java.nio.HeapCharBuffer: int position()>();
        $i3 = r0.<java.nio.HeapCharBuffer: int offset>;
        $i4 = $i2 + $i3;
        specialinvoke $r1.<java.nio.HeapCharBuffer: void <init>(char[],int,int,int,int,int)>($r2, -1, 0, $i0, $i1, $i4);
        return $r1;
    }

    public java.nio.CharBuffer duplicate()
    {
        java.nio.HeapCharBuffer r0, $r1;
        char[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapCharBuffer;
        $r1 = new java.nio.HeapCharBuffer;
        $r2 = r0.<java.nio.HeapCharBuffer: char[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapCharBuffer: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.HeapCharBuffer: int position()>();
        $i2 = virtualinvoke r0.<java.nio.HeapCharBuffer: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.HeapCharBuffer: int capacity()>();
        $i4 = r0.<java.nio.HeapCharBuffer: int offset>;
        specialinvoke $r1.<java.nio.HeapCharBuffer: void <init>(char[],int,int,int,int,int)>($r2, $i0, $i1, $i2, $i3, $i4);
        return $r1;
    }

    public java.nio.CharBuffer asReadOnlyBuffer()
    {
        java.nio.HeapCharBuffer r0;
        java.nio.HeapCharBufferR $r1;
        char[] $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: java.nio.HeapCharBuffer;
        $r1 = new java.nio.HeapCharBufferR;
        $r2 = r0.<java.nio.HeapCharBuffer: char[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapCharBuffer: int markValue()>();
        $i1 = virtualinvoke r0.<java.nio.HeapCharBuffer: int position()>();
        $i2 = virtualinvoke r0.<java.nio.HeapCharBuffer: int limit()>();
        $i3 = virtualinvoke r0.<java.nio.HeapCharBuffer: int capacity()>();
        $i4 = r0.<java.nio.HeapCharBuffer: int offset>;
        specialinvoke $r1.<java.nio.HeapCharBufferR: void <init>(char[],int,int,int,int,int)>($r2, $i0, $i1, $i2, $i3, $i4);
        return $r1;
    }

    protected int ix(int)
    {
        java.nio.HeapCharBuffer r0;
        int i0, $i1, $i2;

        r0 := @this: java.nio.HeapCharBuffer;
        i0 := @parameter0: int;
        $i1 = r0.<java.nio.HeapCharBuffer: int offset>;
        $i2 = i0 + $i1;
        return $i2;
    }

    public char get()
    {
        java.nio.HeapCharBuffer r0;
        char[] $r1;
        int $i0, $i1;
        char $c2;

        r0 := @this: java.nio.HeapCharBuffer;
        $r1 = r0.<java.nio.HeapCharBuffer: char[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapCharBuffer: int nextGetIndex()>();
        $i1 = virtualinvoke r0.<java.nio.HeapCharBuffer: int ix(int)>($i0);
        $c2 = $r1[$i1];
        return $c2;
    }

    public char get(int)
    {
        java.nio.HeapCharBuffer r0;
        int i0, $i1, $i2;
        char[] $r1;
        char $c3;

        r0 := @this: java.nio.HeapCharBuffer;
        i0 := @parameter0: int;
        $r1 = r0.<java.nio.HeapCharBuffer: char[] hb>;
        $i1 = virtualinvoke r0.<java.nio.HeapCharBuffer: int checkIndex(int)>(i0);
        $i2 = virtualinvoke r0.<java.nio.HeapCharBuffer: int ix(int)>($i1);
        $c3 = $r1[$i2];
        return $c3;
    }

    public java.nio.CharBuffer get(char[], int, int)
    {
        java.nio.HeapCharBuffer r0;
        char[] r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.nio.BufferUnderflowException $r2;

        r0 := @this: java.nio.HeapCharBuffer;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = lengthof r1;
        staticinvoke <java.nio.HeapCharBuffer: void checkBounds(int,int,int)>(i0, i1, $i2);
        $i3 = virtualinvoke r0.<java.nio.HeapCharBuffer: int remaining()>();
        if i1 <= $i3 goto label0;

        $r2 = new java.nio.BufferUnderflowException;
        specialinvoke $r2.<java.nio.BufferUnderflowException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.nio.HeapCharBuffer: char[] hb>;
        $i4 = virtualinvoke r0.<java.nio.HeapCharBuffer: int position()>();
        $i5 = virtualinvoke r0.<java.nio.HeapCharBuffer: int ix(int)>($i4);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i5, r1, i0, i1);
        $i6 = virtualinvoke r0.<java.nio.HeapCharBuffer: int position()>();
        $i7 = $i6 + i1;
        virtualinvoke r0.<java.nio.HeapCharBuffer: java.nio.Buffer position(int)>($i7);
        return r0;
    }

    public boolean isDirect()
    {
        java.nio.HeapCharBuffer r0;

        r0 := @this: java.nio.HeapCharBuffer;
        return 0;
    }

    public boolean isReadOnly()
    {
        java.nio.HeapCharBuffer r0;

        r0 := @this: java.nio.HeapCharBuffer;
        return 0;
    }

    public java.nio.CharBuffer put(char)
    {
        java.nio.HeapCharBuffer r0;
        char c0;
        char[] $r1;
        int $i1, $i2;

        r0 := @this: java.nio.HeapCharBuffer;
        c0 := @parameter0: char;
        $r1 = r0.<java.nio.HeapCharBuffer: char[] hb>;
        $i1 = virtualinvoke r0.<java.nio.HeapCharBuffer: int nextPutIndex()>();
        $i2 = virtualinvoke r0.<java.nio.HeapCharBuffer: int ix(int)>($i1);
        $r1[$i2] = c0;
        return r0;
    }

    public java.nio.CharBuffer put(int, char)
    {
        java.nio.HeapCharBuffer r0;
        int i0, $i2, $i3;
        char c1;
        char[] $r1;

        r0 := @this: java.nio.HeapCharBuffer;
        i0 := @parameter0: int;
        c1 := @parameter1: char;
        $r1 = r0.<java.nio.HeapCharBuffer: char[] hb>;
        $i2 = virtualinvoke r0.<java.nio.HeapCharBuffer: int checkIndex(int)>(i0);
        $i3 = virtualinvoke r0.<java.nio.HeapCharBuffer: int ix(int)>($i2);
        $r1[$i3] = c1;
        return r0;
    }

    public java.nio.CharBuffer put(char[], int, int)
    {
        java.nio.HeapCharBuffer r0;
        char[] r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.nio.BufferOverflowException $r2;

        r0 := @this: java.nio.HeapCharBuffer;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = lengthof r1;
        staticinvoke <java.nio.HeapCharBuffer: void checkBounds(int,int,int)>(i0, i1, $i2);
        $i3 = virtualinvoke r0.<java.nio.HeapCharBuffer: int remaining()>();
        if i1 <= $i3 goto label0;

        $r2 = new java.nio.BufferOverflowException;
        specialinvoke $r2.<java.nio.BufferOverflowException: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<java.nio.HeapCharBuffer: char[] hb>;
        $i4 = virtualinvoke r0.<java.nio.HeapCharBuffer: int position()>();
        $i5 = virtualinvoke r0.<java.nio.HeapCharBuffer: int ix(int)>($i4);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r3, $i5, i1);
        $i6 = virtualinvoke r0.<java.nio.HeapCharBuffer: int position()>();
        $i7 = $i6 + i1;
        virtualinvoke r0.<java.nio.HeapCharBuffer: java.nio.Buffer position(int)>($i7);
        return r0;
    }

    public java.nio.CharBuffer put(java.nio.CharBuffer)
    {
        java.nio.HeapCharBuffer r0, r2;
        java.nio.CharBuffer r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, $i15;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;
        java.nio.BufferOverflowException $r4, $r9;
        char[] $r5, $r6, $r10;

        r0 := @this: java.nio.HeapCharBuffer;
        r1 := @parameter0: java.nio.CharBuffer;
        $z0 = r1 instanceof java.nio.HeapCharBuffer;
        if $z0 == 0 goto label2;

        if r1 != r0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r3;

     label0:
        r2 = (java.nio.HeapCharBuffer) r1;
        i0 = virtualinvoke r2.<java.nio.HeapCharBuffer: int remaining()>();
        $i1 = virtualinvoke r0.<java.nio.HeapCharBuffer: int remaining()>();
        if i0 <= $i1 goto label1;

        $r4 = new java.nio.BufferOverflowException;
        specialinvoke $r4.<java.nio.BufferOverflowException: void <init>()>();
        throw $r4;

     label1:
        $r5 = r2.<java.nio.HeapCharBuffer: char[] hb>;
        $i2 = virtualinvoke r2.<java.nio.HeapCharBuffer: int position()>();
        $i3 = virtualinvoke r2.<java.nio.HeapCharBuffer: int ix(int)>($i2);
        $r6 = r0.<java.nio.HeapCharBuffer: char[] hb>;
        $i4 = virtualinvoke r0.<java.nio.HeapCharBuffer: int position()>();
        $i5 = virtualinvoke r0.<java.nio.HeapCharBuffer: int ix(int)>($i4);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i3, $r6, $i5, i0);
        $i6 = virtualinvoke r2.<java.nio.HeapCharBuffer: int position()>();
        $i7 = $i6 + i0;
        virtualinvoke r2.<java.nio.HeapCharBuffer: java.nio.Buffer position(int)>($i7);
        $i8 = virtualinvoke r0.<java.nio.HeapCharBuffer: int position()>();
        $i9 = $i8 + i0;
        virtualinvoke r0.<java.nio.HeapCharBuffer: java.nio.Buffer position(int)>($i9);
        goto label5;

     label2:
        $z1 = virtualinvoke r1.<java.nio.CharBuffer: boolean isDirect()>();
        if $z1 == 0 goto label4;

        i10 = virtualinvoke r1.<java.nio.CharBuffer: int remaining()>();
        $i11 = virtualinvoke r0.<java.nio.HeapCharBuffer: int remaining()>();
        if i10 <= $i11 goto label3;

        $r9 = new java.nio.BufferOverflowException;
        specialinvoke $r9.<java.nio.BufferOverflowException: void <init>()>();
        throw $r9;

     label3:
        $r10 = r0.<java.nio.HeapCharBuffer: char[] hb>;
        $i12 = virtualinvoke r0.<java.nio.HeapCharBuffer: int position()>();
        $i13 = virtualinvoke r0.<java.nio.HeapCharBuffer: int ix(int)>($i12);
        virtualinvoke r1.<java.nio.CharBuffer: java.nio.CharBuffer get(char[],int,int)>($r10, $i13, i10);
        $i14 = virtualinvoke r0.<java.nio.HeapCharBuffer: int position()>();
        $i15 = $i14 + i10;
        virtualinvoke r0.<java.nio.HeapCharBuffer: java.nio.Buffer position(int)>($i15);
        goto label5;

     label4:
        specialinvoke r0.<java.nio.CharBuffer: java.nio.CharBuffer put(java.nio.CharBuffer)>(r1);

     label5:
        return r0;
    }

    public java.nio.CharBuffer compact()
    {
        java.nio.HeapCharBuffer r0;
        char[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: java.nio.HeapCharBuffer;
        $r1 = r0.<java.nio.HeapCharBuffer: char[] hb>;
        $i0 = virtualinvoke r0.<java.nio.HeapCharBuffer: int position()>();
        $i1 = virtualinvoke r0.<java.nio.HeapCharBuffer: int ix(int)>($i0);
        $r2 = r0.<java.nio.HeapCharBuffer: char[] hb>;
        $i2 = virtualinvoke r0.<java.nio.HeapCharBuffer: int ix(int)>(0);
        $i3 = virtualinvoke r0.<java.nio.HeapCharBuffer: int remaining()>();
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, $r2, $i2, $i3);
        $i4 = virtualinvoke r0.<java.nio.HeapCharBuffer: int remaining()>();
        virtualinvoke r0.<java.nio.HeapCharBuffer: java.nio.Buffer position(int)>($i4);
        $i5 = virtualinvoke r0.<java.nio.HeapCharBuffer: int capacity()>();
        virtualinvoke r0.<java.nio.HeapCharBuffer: java.nio.Buffer limit(int)>($i5);
        virtualinvoke r0.<java.nio.HeapCharBuffer: void discardMark()>();
        return r0;
    }

    java.lang.String toString(int, int)
    {
        java.nio.HeapCharBuffer r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.String $r1;
        java.lang.StringIndexOutOfBoundsException r2, $r4;
        char[] $r3;
        java.lang.IndexOutOfBoundsException $r5;

        r0 := @this: java.nio.HeapCharBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;

     label0:
        $r1 = new java.lang.String;
        $r3 = r0.<java.nio.HeapCharBuffer: char[] hb>;
        $i2 = r0.<java.nio.HeapCharBuffer: int offset>;
        $i3 = i0 + $i2;
        $i4 = i1 - i0;
        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r3, $i3, $i4);

     label1:
        return $r1;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        $r5 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r5;

        catch java.lang.StringIndexOutOfBoundsException from label0 to label1 with label2;
    }

    public java.nio.CharBuffer subSequence(int, int)
    {
        java.nio.HeapCharBuffer r0, $r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.IndexOutOfBoundsException $r1;
        char[] $r3;

        r0 := @this: java.nio.HeapCharBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i0 < 0 goto label0;

        $i3 = virtualinvoke r0.<java.nio.HeapCharBuffer: int length()>();
        if i1 > $i3 goto label0;

        if i0 <= i1 goto label1;

     label0:
        $r1 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r1;

     label1:
        i2 = virtualinvoke r0.<java.nio.HeapCharBuffer: int position()>();
        $r2 = new java.nio.HeapCharBuffer;
        $r3 = r0.<java.nio.HeapCharBuffer: char[] hb>;
        $i4 = i2 + i0;
        $i5 = i2 + i1;
        $i6 = virtualinvoke r0.<java.nio.HeapCharBuffer: int capacity()>();
        $i7 = r0.<java.nio.HeapCharBuffer: int offset>;
        specialinvoke $r2.<java.nio.HeapCharBuffer: void <init>(char[],int,int,int,int,int)>($r3, -1, $i4, $i5, $i6, $i7);
        return $r2;
    }

    public java.nio.ByteOrder order()
    {
        java.nio.HeapCharBuffer r0;
        java.nio.ByteOrder $r1;

        r0 := @this: java.nio.HeapCharBuffer;
        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();
        return $r1;
    }

    public volatile java.lang.CharSequence subSequence(int, int)
    {
        java.nio.HeapCharBuffer r0;
        int i0, i1;
        java.nio.CharBuffer $r1;

        r0 := @this: java.nio.HeapCharBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = virtualinvoke r0.<java.nio.HeapCharBuffer: java.nio.CharBuffer subSequence(int,int)>(i0, i1);
        return $r1;
    }
}
