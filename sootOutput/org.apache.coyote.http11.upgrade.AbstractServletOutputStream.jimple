public abstract class org.apache.coyote.http11.upgrade.AbstractServletOutputStream extends javax.servlet.ServletOutputStream
{
    protected static final org.apache.tomcat.util.res.StringManager sm;
    private final java.lang.Object fireListenerLock;
    private final java.lang.Object writeLock;
    private volatile boolean closeRequired;
    private volatile org.apache.coyote.http11.upgrade.servlet31.WriteListener listener;
    private volatile boolean fireListener;
    private volatile java.lang.ClassLoader applicationLoader;
    private volatile byte[] buffer;
    private volatile int bufferPos;
    private volatile int bufferLimit;
    private final int asyncWriteBufferSize;

    static void <clinit>()
    {
        org.apache.tomcat.util.res.StringManager $r0;

        $r0 = staticinvoke <org.apache.tomcat.util.res.StringManager: org.apache.tomcat.util.res.StringManager getManager(java.lang.String)>("org.apache.coyote.http11.upgrade");
        <org.apache.coyote.http11.upgrade.AbstractServletOutputStream: org.apache.tomcat.util.res.StringManager sm> = $r0;
        return;
    }

    public void <init>(int)
    {
        org.apache.coyote.http11.upgrade.AbstractServletOutputStream r0;
        int i0;
        java.lang.Object $r1, $r2;
        byte[] $r3;

        r0 := @this: org.apache.coyote.http11.upgrade.AbstractServletOutputStream;
        i0 := @parameter0: int;
        specialinvoke r0.<javax.servlet.ServletOutputStream: void <init>()>();
        $r1 = new java.lang.Object;
        specialinvoke $r1.<java.lang.Object: void <init>()>();
        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: java.lang.Object fireListenerLock> = $r1;
        $r2 = new java.lang.Object;
        specialinvoke $r2.<java.lang.Object: void <init>()>();
        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: java.lang.Object writeLock> = $r2;
        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: boolean closeRequired> = 0;
        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: org.apache.coyote.http11.upgrade.servlet31.WriteListener listener> = null;
        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: boolean fireListener> = 0;
        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: java.lang.ClassLoader applicationLoader> = null;
        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int asyncWriteBufferSize> = i0;
        $r3 = newarray (byte)[i0];
        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: byte[] buffer> = $r3;
        return;
    }

    public final boolean isReady()
    {
        org.apache.coyote.http11.upgrade.AbstractServletOutputStream r0;
        org.apache.tomcat.util.res.StringManager $r1;
        java.lang.Object r2, $r6;
        boolean z0, $z1, $z2;
        org.apache.coyote.http11.upgrade.servlet31.WriteListener $r3;
        java.lang.IllegalStateException $r4;
        java.lang.String $r5;
        int $i0;
        java.lang.Throwable $r8;

        r0 := @this: org.apache.coyote.http11.upgrade.AbstractServletOutputStream;
        $r3 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: org.apache.coyote.http11.upgrade.servlet31.WriteListener listener>;
        if $r3 != null goto label0;

        $r4 = new java.lang.IllegalStateException;
        $r1 = <org.apache.coyote.http11.upgrade.AbstractServletOutputStream: org.apache.tomcat.util.res.StringManager sm>;
        $r5 = virtualinvoke $r1.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("upgrade.sos.canWrite.ise");
        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);
        throw $r4;

     label0:
        $r6 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: java.lang.Object fireListenerLock>;
        r2 = $r6;
        entermonitor $r6;

     label1:
        $i0 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int bufferLimit>;
        if $i0 != 0 goto label2;

        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;
        if z0 == 0 goto label4;

        $z2 = 0;
        goto label5;

     label4:
        $z2 = 1;

     label5:
        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: boolean fireListener> = $z2;
        exitmonitor r2;

     label6:
        return z0;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r2;

     label9:
        throw $r8;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public final void setWriteListener(org.apache.coyote.http11.upgrade.servlet31.WriteListener)
    {
        org.apache.coyote.http11.upgrade.AbstractServletOutputStream r0;
        org.apache.coyote.http11.upgrade.servlet31.WriteListener r1, $r5;
        org.apache.tomcat.util.res.StringManager $r2, $r7;
        java.lang.IllegalArgumentException $r3, $r6;
        java.lang.String $r4, $r8;
        java.lang.Thread $r9;
        java.lang.ClassLoader $r10;

        r0 := @this: org.apache.coyote.http11.upgrade.AbstractServletOutputStream;
        r1 := @parameter0: org.apache.coyote.http11.upgrade.servlet31.WriteListener;
        if r1 != null goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        $r2 = <org.apache.coyote.http11.upgrade.AbstractServletOutputStream: org.apache.tomcat.util.res.StringManager sm>;
        $r4 = virtualinvoke $r2.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("upgrade.sos.writeListener.null");
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);
        throw $r3;

     label0:
        $r5 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: org.apache.coyote.http11.upgrade.servlet31.WriteListener listener>;
        if $r5 == null goto label1;

        $r6 = new java.lang.IllegalArgumentException;
        $r7 = <org.apache.coyote.http11.upgrade.AbstractServletOutputStream: org.apache.tomcat.util.res.StringManager sm>;
        $r8 = virtualinvoke $r7.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("upgrade.sos.writeListener.set");
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);
        throw $r6;

     label1:
        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: org.apache.coyote.http11.upgrade.servlet31.WriteListener listener> = r1;
        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $r10 = virtualinvoke $r9.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: java.lang.ClassLoader applicationLoader> = $r10;
        return;
    }

    protected final boolean isCloseRequired()
    {
        org.apache.coyote.http11.upgrade.AbstractServletOutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.coyote.http11.upgrade.AbstractServletOutputStream;
        $z0 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: boolean closeRequired>;
        return $z0;
    }

    public void write(int) throws java.io.IOException
    {
        org.apache.coyote.http11.upgrade.AbstractServletOutputStream r0;
        int i0;
        java.lang.Object r1, $r2;
        byte[] $r3;
        byte $b1;
        java.lang.Throwable $r4;

        r0 := @this: org.apache.coyote.http11.upgrade.AbstractServletOutputStream;
        i0 := @parameter0: int;
        $r2 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: java.lang.Object writeLock>;
        r1 = $r2;
        entermonitor $r2;

     label0:
        specialinvoke r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: void preWriteChecks()>();
        $r3 = newarray (byte)[1];
        $b1 = (byte) i0;
        $r3[0] = $b1;
        specialinvoke r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: void writeInternal(byte[],int,int)>($r3, 0, 1);
        exitmonitor r1;

     label1:
        goto label5;

     label2:
        $r4 := @caughtexception;

     label3:
        exitmonitor r1;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        org.apache.coyote.http11.upgrade.AbstractServletOutputStream r0;
        byte[] r1;
        int i0, i1;
        java.lang.Object r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: org.apache.coyote.http11.upgrade.AbstractServletOutputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r3 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: java.lang.Object writeLock>;
        r2 = $r3;
        entermonitor $r3;

     label0:
        specialinvoke r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: void preWriteChecks()>();
        specialinvoke r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: void writeInternal(byte[],int,int)>(r1, i0, i1);
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r4 := @caughtexception;

     label3:
        exitmonitor r2;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void close() throws java.io.IOException
    {
        org.apache.coyote.http11.upgrade.AbstractServletOutputStream r0;

        r0 := @this: org.apache.coyote.http11.upgrade.AbstractServletOutputStream;
        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: boolean closeRequired> = 1;
        virtualinvoke r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: void doClose()>();
        return;
    }

    private void preWriteChecks()
    {
        org.apache.coyote.http11.upgrade.AbstractServletOutputStream r0;
        org.apache.tomcat.util.res.StringManager $r1;
        int $i0;
        java.lang.IllegalStateException $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.coyote.http11.upgrade.AbstractServletOutputStream;
        $i0 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int bufferLimit>;
        if $i0 == 0 goto label0;

        $r2 = new java.lang.IllegalStateException;
        $r1 = <org.apache.coyote.http11.upgrade.AbstractServletOutputStream: org.apache.tomcat.util.res.StringManager sm>;
        $r3 = virtualinvoke $r1.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("upgrade.sis.write.ise");
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);
        throw $r2;

     label0:
        return;
    }

    private void writeInternal(byte[], int, int) throws java.io.IOException
    {
        org.apache.coyote.http11.upgrade.AbstractServletOutputStream r0;
        byte[] r1, $r3, $r5, $r6, $r7, $r8, $r9;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        org.apache.coyote.http11.upgrade.servlet31.WriteListener $r2;

        r0 := @this: org.apache.coyote.http11.upgrade.AbstractServletOutputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: org.apache.coyote.http11.upgrade.servlet31.WriteListener listener>;
        if $r2 != null goto label0;

        virtualinvoke r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int doWrite(boolean,byte[],int,int)>(1, r1, i0, i1);
        goto label5;

     label0:
        i2 = virtualinvoke r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int doWrite(boolean,byte[],int,int)>(0, r1, i0, i1);
        if i2 >= i1 goto label4;

        $r3 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: byte[] buffer>;
        if r1 != $r3 goto label1;

        $i5 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int bufferPos>;
        $i6 = $i5 + i2;
        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int bufferPos> = $i6;
        goto label5;

     label1:
        i3 = i1 - i2;
        $r5 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: byte[] buffer>;
        $i7 = lengthof $r5;
        if i3 <= $i7 goto label2;

        $r6 = newarray (byte)[i3];
        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: byte[] buffer> = $r6;
        goto label3;

     label2:
        $i8 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int asyncWriteBufferSize>;
        if i3 >= $i8 goto label3;

        $r7 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: byte[] buffer>;
        $i9 = lengthof $r7;
        $i10 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int asyncWriteBufferSize>;
        if $i9 <= $i10 goto label3;

        $i11 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int asyncWriteBufferSize>;
        $r8 = newarray (byte)[$i11];
        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: byte[] buffer> = $r8;

     label3:
        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int bufferPos> = 0;
        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int bufferLimit> = i3;
        $i12 = i0 + i2;
        $r9 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: byte[] buffer>;
        $i13 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int bufferPos>;
        $i14 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int bufferLimit>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i12, $r9, $i13, $i14);
        goto label5;

     label4:
        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int bufferLimit> = 0;

     label5:
        return;
    }

    protected final void onWritePossible() throws java.io.IOException
    {
        org.apache.coyote.http11.upgrade.AbstractServletOutputStream r0;
        java.lang.Object r1, r2, $r5, $r12;
        java.lang.ClassLoader r3, $r15;
        java.lang.Throwable r4, $r7, $r8, r9, $r13, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        byte[] $r6;
        boolean $z0, z1, $z2;
        java.io.IOException $r10, $r11;
        java.lang.Thread r14;
        org.apache.coyote.http11.upgrade.servlet31.WriteListener $r16;

        r0 := @this: org.apache.coyote.http11.upgrade.AbstractServletOutputStream;

     label0:
        $r5 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: java.lang.Object writeLock>;
        r1 = $r5;
        entermonitor $r5;

     label1:
        $i0 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int bufferLimit>;
        if $i0 <= 0 goto label2;

        $r6 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: byte[] buffer>;
        $i1 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int bufferPos>;
        $i2 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int bufferLimit>;
        $i3 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int bufferPos>;
        $i4 = $i2 - $i3;
        specialinvoke r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: void writeInternal(byte[],int,int)>($r6, $i1, $i4);

     label2:
        exitmonitor r1;

     label3:
        goto label9;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r7;

     label7:
        $r8 := @caughtexception;
        r9 = $r8;
        staticinvoke <org.apache.tomcat.util.ExceptionUtils: void handleThrowable(java.lang.Throwable)>(r9);
        virtualinvoke r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: void onError(java.lang.Throwable)>(r9);
        $z0 = r9 instanceof java.io.IOException;
        if $z0 == 0 goto label8;

        $r10 = (java.io.IOException) r9;
        throw $r10;

     label8:
        $r11 = new java.io.IOException;
        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.Throwable)>(r9);
        throw $r11;

     label9:
        z1 = 0;
        $r12 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: java.lang.Object fireListenerLock>;
        r2 = $r12;
        entermonitor $r12;

     label10:
        $i5 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: int bufferLimit>;
        if $i5 != 0 goto label11;

        $z2 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: boolean fireListener>;
        if $z2 == 0 goto label11;

        r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: boolean fireListener> = 0;
        z1 = 1;

     label11:
        exitmonitor r2;

     label12:
        goto label16;

     label13:
        $r13 := @caughtexception;

     label14:
        exitmonitor r2;

     label15:
        throw $r13;

     label16:
        if z1 == 0 goto label20;

        r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r3 = virtualinvoke r14.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label17:
        $r15 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: java.lang.ClassLoader applicationLoader>;
        virtualinvoke r14.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r15);
        $r16 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: org.apache.coyote.http11.upgrade.servlet31.WriteListener listener>;
        interfaceinvoke $r16.<org.apache.coyote.http11.upgrade.servlet31.WriteListener: void onWritePossible()>();
        goto label19;

     label18:
        $r17 := @caughtexception;
        r4 = $r17;
        virtualinvoke r14.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r3);
        throw r4;

     label19:
        virtualinvoke r14.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r3);

     label20:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label0 to label7 with label7;
        catch java.lang.Throwable from label10 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label17 to label18 with label18;
    }

    protected final void onError(java.lang.Throwable)
    {
        org.apache.coyote.http11.upgrade.AbstractServletOutputStream r0;
        java.lang.Throwable r1, r4, $r8;
        java.lang.Thread r2;
        java.lang.ClassLoader r3, $r6;
        org.apache.coyote.http11.upgrade.servlet31.WriteListener $r5, $r7;

        r0 := @this: org.apache.coyote.http11.upgrade.AbstractServletOutputStream;
        r1 := @parameter0: java.lang.Throwable;
        $r5 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: org.apache.coyote.http11.upgrade.servlet31.WriteListener listener>;
        if $r5 != null goto label0;

        return;

     label0:
        r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r3 = virtualinvoke r2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label1:
        $r6 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: java.lang.ClassLoader applicationLoader>;
        virtualinvoke r2.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r6);
        $r7 = r0.<org.apache.coyote.http11.upgrade.AbstractServletOutputStream: org.apache.coyote.http11.upgrade.servlet31.WriteListener listener>;
        interfaceinvoke $r7.<org.apache.coyote.http11.upgrade.servlet31.WriteListener: void onError(java.lang.Throwable)>(r1);
        goto label3;

     label2:
        $r8 := @caughtexception;
        r4 = $r8;
        virtualinvoke r2.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r3);
        throw r4;

     label3:
        virtualinvoke r2.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r3);
        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    protected abstract int doWrite(boolean, byte[], int, int) throws java.io.IOException;

    protected abstract void doFlush() throws java.io.IOException;

    protected abstract void doClose() throws java.io.IOException;
}
