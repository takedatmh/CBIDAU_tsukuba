class sun.nio.ch.Util extends java.lang.Object
{
    private static final int TEMP_BUF_POOL_SIZE;
    private static java.lang.ThreadLocal bufferCache;
    private static java.lang.ThreadLocal localSelector;
    private static java.lang.ThreadLocal localSelectorWrapper;
    private static sun.misc.Unsafe unsafe;
    private static int pageSize;
    private static volatile java.lang.reflect.Constructor directByteBufferConstructor;
    private static volatile java.lang.reflect.Constructor directByteBufferRConstructor;
    private static volatile java.lang.String bugLevel;
    private static boolean loaded;
    static final boolean $assertionsDisabled;

    void <init>()
    {
        sun.nio.ch.Util r0;

        r0 := @this: sun.nio.ch.Util;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    static java.nio.ByteBuffer getTemporaryDirectBuffer(int)
    {
        int i0;
        java.lang.ThreadLocal $r0;
        sun.nio.ch.Util$BufferCache r1;
        java.nio.ByteBuffer r2, r4, $r5;
        java.lang.Object $r3;
        boolean $z0;

        i0 := @parameter0: int;
        $r0 = <sun.nio.ch.Util: java.lang.ThreadLocal bufferCache>;
        $r3 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();
        r1 = (sun.nio.ch.Util$BufferCache) $r3;
        r2 = virtualinvoke r1.<sun.nio.ch.Util$BufferCache: java.nio.ByteBuffer get(int)>(i0);
        if r2 == null goto label0;

        return r2;

     label0:
        $z0 = virtualinvoke r1.<sun.nio.ch.Util$BufferCache: boolean isEmpty()>();
        if $z0 != 0 goto label1;

        r4 = virtualinvoke r1.<sun.nio.ch.Util$BufferCache: java.nio.ByteBuffer removeFirst()>();
        staticinvoke <sun.nio.ch.Util: void free(java.nio.ByteBuffer)>(r4);

     label1:
        $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i0);
        return $r5;
    }

    static void releaseTemporaryDirectBuffer(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;

        r0 := @parameter0: java.nio.ByteBuffer;
        staticinvoke <sun.nio.ch.Util: void offerFirstTemporaryDirectBuffer(java.nio.ByteBuffer)>(r0);
        return;
    }

    static void offerFirstTemporaryDirectBuffer(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        boolean $z0, $z1;
        sun.nio.ch.Util$BufferCache r1;
        java.lang.AssertionError $r2;
        java.lang.ThreadLocal $r3;
        java.lang.Object $r4;

        r0 := @parameter0: java.nio.ByteBuffer;
        $z0 = <sun.nio.ch.Util: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if r0 != null goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $r3 = <sun.nio.ch.Util: java.lang.ThreadLocal bufferCache>;
        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();
        r1 = (sun.nio.ch.Util$BufferCache) $r4;
        $z1 = virtualinvoke r1.<sun.nio.ch.Util$BufferCache: boolean offerFirst(java.nio.ByteBuffer)>(r0);
        if $z1 != 0 goto label1;

        staticinvoke <sun.nio.ch.Util: void free(java.nio.ByteBuffer)>(r0);

     label1:
        return;
    }

    static void offerLastTemporaryDirectBuffer(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        boolean $z0, $z1;
        sun.nio.ch.Util$BufferCache r1;
        java.lang.AssertionError $r2;
        java.lang.ThreadLocal $r3;
        java.lang.Object $r4;

        r0 := @parameter0: java.nio.ByteBuffer;
        $z0 = <sun.nio.ch.Util: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if r0 != null goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $r3 = <sun.nio.ch.Util: java.lang.ThreadLocal bufferCache>;
        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();
        r1 = (sun.nio.ch.Util$BufferCache) $r4;
        $z1 = virtualinvoke r1.<sun.nio.ch.Util$BufferCache: boolean offerLast(java.nio.ByteBuffer)>(r0);
        if $z1 != 0 goto label1;

        staticinvoke <sun.nio.ch.Util: void free(java.nio.ByteBuffer)>(r0);

     label1:
        return;
    }

    private static void free(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        sun.nio.ch.DirectBuffer $r1;
        sun.misc.Cleaner $r2;

        r0 := @parameter0: java.nio.ByteBuffer;
        $r1 = (sun.nio.ch.DirectBuffer) r0;
        $r2 = interfaceinvoke $r1.<sun.nio.ch.DirectBuffer: sun.misc.Cleaner cleaner()>();
        virtualinvoke $r2.<sun.misc.Cleaner: void clean()>();
        return;
    }

    static java.nio.channels.Selector getTemporarySelector(java.nio.channels.SelectableChannel) throws java.io.IOException
    {
        java.nio.channels.SelectableChannel r0;
        java.lang.ThreadLocal $r1, $r13, $r15;
        java.lang.ref.SoftReference r2, $r14;
        null_type n0, n1;
        java.lang.Object $r3, $r4;
        sun.nio.ch.Util$SelectorWrapper $r5, r6, $r12;
        java.nio.channels.Selector $r7, r8;
        java.nio.channels.spi.SelectorProvider $r9, $r10, $r11;

        r0 := @parameter0: java.nio.channels.SelectableChannel;
        $r1 = <sun.nio.ch.Util: java.lang.ThreadLocal localSelector>;
        $r3 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();
        r2 = (java.lang.ref.SoftReference) $r3;
        n0 = null;
        n1 = null;
        if r2 == null goto label0;

        $r4 = virtualinvoke r2.<java.lang.ref.SoftReference: java.lang.Object get()>();
        $r5 = (sun.nio.ch.Util$SelectorWrapper) $r4;
        r6 = $r5;
        if $r5 == null goto label0;

        $r7 = virtualinvoke r6.<sun.nio.ch.Util$SelectorWrapper: java.nio.channels.Selector get()>();
        r8 = $r7;
        if $r7 == null goto label0;

        $r9 = virtualinvoke r8.<java.nio.channels.Selector: java.nio.channels.spi.SelectorProvider provider()>();
        $r10 = virtualinvoke r0.<java.nio.channels.SelectableChannel: java.nio.channels.spi.SelectorProvider provider()>();
        if $r9 == $r10 goto label1;

     label0:
        $r11 = virtualinvoke r0.<java.nio.channels.SelectableChannel: java.nio.channels.spi.SelectorProvider provider()>();
        r8 = virtualinvoke $r11.<java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.AbstractSelector openSelector()>();
        $r12 = new sun.nio.ch.Util$SelectorWrapper;
        specialinvoke $r12.<sun.nio.ch.Util$SelectorWrapper: void <init>(java.nio.channels.Selector,sun.nio.ch.Util$1)>(r8, null);
        r6 = $r12;
        $r13 = <sun.nio.ch.Util: java.lang.ThreadLocal localSelector>;
        $r14 = new java.lang.ref.SoftReference;
        specialinvoke $r14.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r6);
        virtualinvoke $r13.<java.lang.ThreadLocal: void set(java.lang.Object)>($r14);

     label1:
        $r15 = <sun.nio.ch.Util: java.lang.ThreadLocal localSelectorWrapper>;
        virtualinvoke $r15.<java.lang.ThreadLocal: void set(java.lang.Object)>(r6);
        return r8;
    }

    static void releaseTemporarySelector(java.nio.channels.Selector) throws java.io.IOException
    {
        java.nio.channels.Selector r0;
        boolean $z0, $z1;
        java.util.Set $r1;
        java.lang.AssertionError $r2;
        java.lang.ThreadLocal $r3;

        r0 := @parameter0: java.nio.channels.Selector;
        virtualinvoke r0.<java.nio.channels.Selector: int selectNow()>();
        $z0 = <sun.nio.ch.Util: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r1 = virtualinvoke r0.<java.nio.channels.Selector: java.util.Set keys()>();
        $z1 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();
        if $z1 != 0 goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("Temporary selector not empty");
        throw $r2;

     label0:
        $r3 = <sun.nio.ch.Util: java.lang.ThreadLocal localSelectorWrapper>;
        virtualinvoke $r3.<java.lang.ThreadLocal: void set(java.lang.Object)>(null);
        return;
    }

    static java.nio.ByteBuffer[] subsequence(java.nio.ByteBuffer[], int, int)
    {
        java.nio.ByteBuffer[] r0, r1;
        int i0, i1, i2, i3, $i4, $i5;
        java.nio.ByteBuffer $r2;

        r0 := @parameter0: java.nio.ByteBuffer[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if i0 != 0 goto label0;

        $i4 = lengthof r0;
        if i1 != $i4 goto label0;

        return r0;

     label0:
        i2 = i1;
        r1 = newarray (java.nio.ByteBuffer)[i2];
        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        $i5 = i0 + i3;
        $r2 = r0[$i5];
        r1[i3] = $r2;
        i3 = i3 + 1;
        goto label1;

     label2:
        return r1;
    }

    static java.util.Set ungrowableSet(java.util.Set)
    {
        java.util.Set r0;
        sun.nio.ch.Util$2 $r1;

        r0 := @parameter0: java.util.Set;
        $r1 = new sun.nio.ch.Util$2;
        specialinvoke $r1.<sun.nio.ch.Util$2: void <init>(java.util.Set)>(r0);
        return $r1;
    }

    private static byte _get(long)
    {
        long l0;
        sun.misc.Unsafe $r0;
        byte $b1;

        l0 := @parameter0: long;
        $r0 = <sun.nio.ch.Util: sun.misc.Unsafe unsafe>;
        $b1 = virtualinvoke $r0.<sun.misc.Unsafe: byte getByte(long)>(l0);
        return $b1;
    }

    private static void _put(long, byte)
    {
        long l0;
        byte b1;
        sun.misc.Unsafe $r0;

        l0 := @parameter0: long;
        b1 := @parameter1: byte;
        $r0 = <sun.nio.ch.Util: sun.misc.Unsafe unsafe>;
        virtualinvoke $r0.<sun.misc.Unsafe: void putByte(long,byte)>(l0, b1);
        return;
    }

    static void erase(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        sun.misc.Unsafe $r1;
        sun.nio.ch.DirectBuffer $r2;
        long $l0, $l2;
        int $i1;

        r0 := @parameter0: java.nio.ByteBuffer;
        $r1 = <sun.nio.ch.Util: sun.misc.Unsafe unsafe>;
        $r2 = (sun.nio.ch.DirectBuffer) r0;
        $l0 = interfaceinvoke $r2.<sun.nio.ch.DirectBuffer: long address()>();
        $i1 = virtualinvoke r0.<java.nio.ByteBuffer: int capacity()>();
        $l2 = (long) $i1;
        virtualinvoke $r1.<sun.misc.Unsafe: void setMemory(long,long,byte)>($l0, $l2, 0);
        return;
    }

    static sun.misc.Unsafe unsafe()
    {
        sun.misc.Unsafe $r0;

        $r0 = <sun.nio.ch.Util: sun.misc.Unsafe unsafe>;
        return $r0;
    }

    static int pageSize()
    {
        int $i0, $i1, $i2;
        sun.misc.Unsafe $r0;

        $i0 = <sun.nio.ch.Util: int pageSize>;
        if $i0 != -1 goto label0;

        $r0 = staticinvoke <sun.nio.ch.Util: sun.misc.Unsafe unsafe()>();
        $i1 = virtualinvoke $r0.<sun.misc.Unsafe: int pageSize()>();
        <sun.nio.ch.Util: int pageSize> = $i1;

     label0:
        $i2 = <sun.nio.ch.Util: int pageSize>;
        return $i2;
    }

    private static void initDBBConstructor()
    {
        sun.nio.ch.Util$3 $r0;

        $r0 = new sun.nio.ch.Util$3;
        specialinvoke $r0.<sun.nio.ch.Util$3: void <init>()>();
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        return;
    }

    static java.nio.MappedByteBuffer newMappedByteBuffer(int, long, java.io.FileDescriptor, java.lang.Runnable)
    {
        int i0;
        long l1;
        java.io.FileDescriptor r0;
        java.lang.Runnable r1;
        java.lang.reflect.Constructor $r2, $r6;
        java.lang.Integer $r3;
        java.nio.MappedByteBuffer r4;
        java.lang.InstantiationException r5, $r10;
        java.lang.Object[] $r7;
        java.lang.Long $r8;
        java.lang.Object $r9;
        java.lang.InternalError $r11, $r14, $r17;
        java.lang.IllegalAccessException $r12, r13;
        java.lang.reflect.InvocationTargetException $r15, r16;

        i0 := @parameter0: int;
        l1 := @parameter1: long;
        r0 := @parameter2: java.io.FileDescriptor;
        r1 := @parameter3: java.lang.Runnable;
        $r2 = <sun.nio.ch.Util: java.lang.reflect.Constructor directByteBufferConstructor>;
        if $r2 != null goto label0;

        staticinvoke <sun.nio.ch.Util: void initDBBConstructor()>();

     label0:
        $r6 = <sun.nio.ch.Util: java.lang.reflect.Constructor directByteBufferConstructor>;
        $r7 = newarray (java.lang.Object)[4];
        $r3 = new java.lang.Integer;
        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i0);
        $r7[0] = $r3;
        $r8 = new java.lang.Long;
        specialinvoke $r8.<java.lang.Long: void <init>(long)>(l1);
        $r7[1] = $r8;
        $r7[2] = r0;
        $r7[3] = r1;
        $r9 = virtualinvoke $r6.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r7);
        r4 = (java.nio.MappedByteBuffer) $r9;

     label1:
        goto label5;

     label2:
        $r10 := @caughtexception;
        r5 = $r10;
        $r11 = new java.lang.InternalError;
        specialinvoke $r11.<java.lang.InternalError: void <init>()>();
        throw $r11;

     label3:
        $r12 := @caughtexception;
        r13 = $r12;
        $r14 = new java.lang.InternalError;
        specialinvoke $r14.<java.lang.InternalError: void <init>()>();
        throw $r14;

     label4:
        $r15 := @caughtexception;
        r16 = $r15;
        $r17 = new java.lang.InternalError;
        specialinvoke $r17.<java.lang.InternalError: void <init>()>();
        throw $r17;

     label5:
        return r4;

        catch java.lang.InstantiationException from label0 to label1 with label2;
        catch java.lang.IllegalAccessException from label0 to label1 with label3;
        catch java.lang.reflect.InvocationTargetException from label0 to label1 with label4;
    }

    private static void initDBBRConstructor()
    {
        sun.nio.ch.Util$4 $r0;

        $r0 = new sun.nio.ch.Util$4;
        specialinvoke $r0.<sun.nio.ch.Util$4: void <init>()>();
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        return;
    }

    static java.nio.MappedByteBuffer newMappedByteBufferR(int, long, java.io.FileDescriptor, java.lang.Runnable)
    {
        int i0;
        long l1;
        java.io.FileDescriptor r0;
        java.lang.Runnable r1;
        java.lang.reflect.Constructor $r2, $r6;
        java.lang.Integer $r3;
        java.nio.MappedByteBuffer r4;
        java.lang.InstantiationException r5, $r10;
        java.lang.Object[] $r7;
        java.lang.Long $r8;
        java.lang.Object $r9;
        java.lang.InternalError $r11, $r14, $r17;
        java.lang.IllegalAccessException $r12, r13;
        java.lang.reflect.InvocationTargetException $r15, r16;

        i0 := @parameter0: int;
        l1 := @parameter1: long;
        r0 := @parameter2: java.io.FileDescriptor;
        r1 := @parameter3: java.lang.Runnable;
        $r2 = <sun.nio.ch.Util: java.lang.reflect.Constructor directByteBufferRConstructor>;
        if $r2 != null goto label0;

        staticinvoke <sun.nio.ch.Util: void initDBBRConstructor()>();

     label0:
        $r6 = <sun.nio.ch.Util: java.lang.reflect.Constructor directByteBufferRConstructor>;
        $r7 = newarray (java.lang.Object)[4];
        $r3 = new java.lang.Integer;
        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i0);
        $r7[0] = $r3;
        $r8 = new java.lang.Long;
        specialinvoke $r8.<java.lang.Long: void <init>(long)>(l1);
        $r7[1] = $r8;
        $r7[2] = r0;
        $r7[3] = r1;
        $r9 = virtualinvoke $r6.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r7);
        r4 = (java.nio.MappedByteBuffer) $r9;

     label1:
        goto label5;

     label2:
        $r10 := @caughtexception;
        r5 = $r10;
        $r11 = new java.lang.InternalError;
        specialinvoke $r11.<java.lang.InternalError: void <init>()>();
        throw $r11;

     label3:
        $r12 := @caughtexception;
        r13 = $r12;
        $r14 = new java.lang.InternalError;
        specialinvoke $r14.<java.lang.InternalError: void <init>()>();
        throw $r14;

     label4:
        $r15 := @caughtexception;
        r16 = $r15;
        $r17 = new java.lang.InternalError;
        specialinvoke $r17.<java.lang.InternalError: void <init>()>();
        throw $r17;

     label5:
        return r4;

        catch java.lang.InstantiationException from label0 to label1 with label2;
        catch java.lang.IllegalAccessException from label0 to label1 with label3;
        catch java.lang.reflect.InvocationTargetException from label0 to label1 with label4;
    }

    static boolean atBugLevel(java.lang.String)
    {
        java.lang.String r0, $r1, r2, $r5, $r6;
        boolean $z0, $z1;
        sun.security.action.GetPropertyAction $r3;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.String;
        $r1 = <sun.nio.ch.Util: java.lang.String bugLevel>;
        if $r1 != null goto label3;

        $z0 = staticinvoke <sun.misc.VM: boolean isBooted()>();
        if $z0 != 0 goto label0;

        return 0;

     label0:
        $r3 = new sun.security.action.GetPropertyAction;
        specialinvoke $r3.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("sun.nio.ch.bugLevel");
        $r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r3);
        r2 = (java.lang.String) $r4;
        if r2 == null goto label1;

        $r5 = r2;
        goto label2;

     label1:
        $r5 = "";

     label2:
        <sun.nio.ch.Util: java.lang.String bugLevel> = $r5;

     label3:
        $r6 = <sun.nio.ch.Util: java.lang.String bugLevel>;
        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r0);
        return $z1;
    }

    static void load()
    {
        java.lang.Class $r0, r1;
        java.lang.Throwable r2, $r7;
        boolean $z0;
        sun.security.action.LoadLibraryAction $r3, $r5;

        $r0 = class "sun/nio/ch/Util";
        r1 = $r0;
        entermonitor $r0;

     label0:
        $z0 = <sun.nio.ch.Util: boolean loaded>;
        if $z0 == 0 goto label2;

        exitmonitor r1;

     label1:
        return;

     label2:
        <sun.nio.ch.Util: boolean loaded> = 1;
        $r3 = new sun.security.action.LoadLibraryAction;
        specialinvoke $r3.<sun.security.action.LoadLibraryAction: void <init>(java.lang.String)>("net");
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r3);
        $r5 = new sun.security.action.LoadLibraryAction;
        specialinvoke $r5.<sun.security.action.LoadLibraryAction: void <init>(java.lang.String)>("nio");
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r5);
        staticinvoke <sun.nio.ch.IOUtil: void initIDs()>();
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r7 := @caughtexception;

     label5:
        r2 = $r7;
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    static int access$000()
    {
        int $i0;

        $i0 = <sun.nio.ch.Util: int TEMP_BUF_POOL_SIZE>;
        return $i0;
    }

    static java.lang.reflect.Constructor access$302(java.lang.reflect.Constructor)
    {
        java.lang.reflect.Constructor r0;

        r0 := @parameter0: java.lang.reflect.Constructor;
        <sun.nio.ch.Util: java.lang.reflect.Constructor directByteBufferConstructor> = r0;
        return r0;
    }

    static java.lang.reflect.Constructor access$402(java.lang.reflect.Constructor)
    {
        java.lang.reflect.Constructor r0;

        r0 := @parameter0: java.lang.reflect.Constructor;
        <sun.nio.ch.Util: java.lang.reflect.Constructor directByteBufferRConstructor> = r0;
        return r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        int $i0;
        sun.nio.ch.Util$1 $r1;
        java.lang.ThreadLocal $r2, $r3;
        sun.misc.Unsafe $r4;

        $r0 = class "sun/nio/ch/Util";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.ch.Util: boolean $assertionsDisabled> = $z1;
        $i0 = <sun.nio.ch.IOUtil: int IOV_MAX>;
        <sun.nio.ch.Util: int TEMP_BUF_POOL_SIZE> = $i0;
        $r1 = new sun.nio.ch.Util$1;
        specialinvoke $r1.<sun.nio.ch.Util$1: void <init>()>();
        <sun.nio.ch.Util: java.lang.ThreadLocal bufferCache> = $r1;
        $r2 = new java.lang.ThreadLocal;
        specialinvoke $r2.<java.lang.ThreadLocal: void <init>()>();
        <sun.nio.ch.Util: java.lang.ThreadLocal localSelector> = $r2;
        $r3 = new java.lang.ThreadLocal;
        specialinvoke $r3.<java.lang.ThreadLocal: void <init>()>();
        <sun.nio.ch.Util: java.lang.ThreadLocal localSelectorWrapper> = $r3;
        $r4 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        <sun.nio.ch.Util: sun.misc.Unsafe unsafe> = $r4;
        <sun.nio.ch.Util: int pageSize> = -1;
        <sun.nio.ch.Util: java.lang.reflect.Constructor directByteBufferConstructor> = null;
        <sun.nio.ch.Util: java.lang.reflect.Constructor directByteBufferRConstructor> = null;
        <sun.nio.ch.Util: java.lang.String bugLevel> = null;
        <sun.nio.ch.Util: boolean loaded> = 0;
        return;
    }
}
