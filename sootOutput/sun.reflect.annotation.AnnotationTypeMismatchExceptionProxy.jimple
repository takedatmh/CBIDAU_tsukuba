class sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy extends sun.reflect.annotation.ExceptionProxy
{
    private static final long serialVersionUID;
    private java.lang.reflect.Method member;
    private java.lang.String foundType;

    void <init>(java.lang.String)
    {
        sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy r0;
        java.lang.String r1;

        r0 := @this: sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<sun.reflect.annotation.ExceptionProxy: void <init>()>();
        r0.<sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy: java.lang.String foundType> = r1;
        return;
    }

    sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy setMember(java.lang.reflect.Method)
    {
        sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy r0;
        java.lang.reflect.Method r1;

        r0 := @this: sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy;
        r1 := @parameter0: java.lang.reflect.Method;
        r0.<sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy: java.lang.reflect.Method member> = r1;
        return r0;
    }

    protected java.lang.RuntimeException generateException()
    {
        sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy r0;
        java.lang.annotation.AnnotationTypeMismatchException $r1;
        java.lang.reflect.Method $r2;
        java.lang.String $r3;

        r0 := @this: sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy;
        $r1 = new java.lang.annotation.AnnotationTypeMismatchException;
        $r2 = r0.<sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy: java.lang.reflect.Method member>;
        $r3 = r0.<sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy: java.lang.String foundType>;
        specialinvoke $r1.<java.lang.annotation.AnnotationTypeMismatchException: void <init>(java.lang.reflect.Method,java.lang.String)>($r2, $r3);
        return $r1;
    }
}
