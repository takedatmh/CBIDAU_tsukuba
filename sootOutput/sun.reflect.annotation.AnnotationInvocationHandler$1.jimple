class sun.reflect.annotation.AnnotationInvocationHandler$1 extends java.lang.Object implements java.security.PrivilegedAction
{
    final sun.reflect.annotation.AnnotationInvocationHandler this$0;

    void <init>(sun.reflect.annotation.AnnotationInvocationHandler)
    {
        sun.reflect.annotation.AnnotationInvocationHandler$1 r0;
        sun.reflect.annotation.AnnotationInvocationHandler r1;

        r0 := @this: sun.reflect.annotation.AnnotationInvocationHandler$1;
        r1 := @parameter0: sun.reflect.annotation.AnnotationInvocationHandler;
        r0.<sun.reflect.annotation.AnnotationInvocationHandler$1: sun.reflect.annotation.AnnotationInvocationHandler this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public java.lang.reflect.Method[] run()
    {
        sun.reflect.annotation.AnnotationInvocationHandler$1 r0;
        java.lang.reflect.Method[] r1;
        sun.reflect.annotation.AnnotationInvocationHandler $r2, $r4;
        java.lang.Class $r3;

        r0 := @this: sun.reflect.annotation.AnnotationInvocationHandler$1;
        $r2 = r0.<sun.reflect.annotation.AnnotationInvocationHandler$1: sun.reflect.annotation.AnnotationInvocationHandler this$0>;
        $r3 = staticinvoke <sun.reflect.annotation.AnnotationInvocationHandler: java.lang.Class access$000(sun.reflect.annotation.AnnotationInvocationHandler)>($r2);
        r1 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();
        $r4 = r0.<sun.reflect.annotation.AnnotationInvocationHandler$1: sun.reflect.annotation.AnnotationInvocationHandler this$0>;
        staticinvoke <sun.reflect.annotation.AnnotationInvocationHandler: void access$100(sun.reflect.annotation.AnnotationInvocationHandler,java.lang.reflect.Method[])>($r4, r1);
        staticinvoke <java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>(r1, 1);
        return r1;
    }

    public volatile java.lang.Object run()
    {
        sun.reflect.annotation.AnnotationInvocationHandler$1 r0;
        java.lang.reflect.Method[] $r1;

        r0 := @this: sun.reflect.annotation.AnnotationInvocationHandler$1;
        $r1 = virtualinvoke r0.<sun.reflect.annotation.AnnotationInvocationHandler$1: java.lang.reflect.Method[] run()>();
        return $r1;
    }
}
