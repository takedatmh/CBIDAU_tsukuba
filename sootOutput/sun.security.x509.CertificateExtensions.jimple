public class sun.security.x509.CertificateExtensions extends java.lang.Object implements sun.security.x509.CertAttrSet
{
    public static final java.lang.String IDENT;
    public static final java.lang.String NAME;
    private static final sun.security.util.Debug debug;
    private java.util.Map map;
    private boolean unsupportedCritExt;
    private java.util.Map unparseableExtensions;
    private static java.lang.Class[] PARAMS;

    public void <init>()
    {
        sun.security.x509.CertificateExtensions r0;
        java.util.TreeMap $r1;
        java.util.Map $r2;

        r0 := @this: sun.security.x509.CertificateExtensions;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new java.util.TreeMap;
        specialinvoke $r1.<java.util.TreeMap: void <init>()>();
        $r2 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r1);
        r0.<sun.security.x509.CertificateExtensions: java.util.Map map> = $r2;
        r0.<sun.security.x509.CertificateExtensions: boolean unsupportedCritExt> = 0;
        return;
    }

    public void <init>(sun.security.util.DerInputStream) throws java.io.IOException
    {
        sun.security.x509.CertificateExtensions r0;
        sun.security.util.DerInputStream r1;
        java.util.TreeMap $r2;
        java.util.Map $r3;

        r0 := @this: sun.security.x509.CertificateExtensions;
        r1 := @parameter0: sun.security.util.DerInputStream;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = new java.util.TreeMap;
        specialinvoke $r2.<java.util.TreeMap: void <init>()>();
        $r3 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r2);
        r0.<sun.security.x509.CertificateExtensions: java.util.Map map> = $r3;
        r0.<sun.security.x509.CertificateExtensions: boolean unsupportedCritExt> = 0;
        specialinvoke r0.<sun.security.x509.CertificateExtensions: void init(sun.security.util.DerInputStream)>(r1);
        return;
    }

    private void init(sun.security.util.DerInputStream) throws java.io.IOException
    {
        sun.security.x509.CertificateExtensions r0;
        sun.security.util.DerInputStream r1;
        sun.security.util.DerValue[] r2;
        int i0, $i1;
        sun.security.x509.Extension r3, $r4;
        sun.security.util.DerValue $r5;

        r0 := @this: sun.security.x509.CertificateExtensions;
        r1 := @parameter0: sun.security.util.DerInputStream;
        r2 = virtualinvoke r1.<sun.security.util.DerInputStream: sun.security.util.DerValue[] getSequence(int)>(5);
        i0 = 0;

     label0:
        $i1 = lengthof r2;
        if i0 >= $i1 goto label1;

        $r4 = new sun.security.x509.Extension;
        $r5 = r2[i0];
        specialinvoke $r4.<sun.security.x509.Extension: void <init>(sun.security.util.DerValue)>($r5);
        r3 = $r4;
        specialinvoke r0.<sun.security.x509.CertificateExtensions: void parseExtension(sun.security.x509.Extension)>(r3);
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    private void parseExtension(sun.security.x509.Extension) throws java.io.IOException
    {
        sun.security.x509.CertificateExtensions r0;
        sun.security.x509.Extension r1, $r19;
        java.lang.Class r2;
        java.lang.reflect.Constructor r3;
        java.lang.Object[] r4, $r13;
        sun.security.x509.CertAttrSet r5;
        sun.security.util.ObjectIdentifier $r6, $r8, $r28;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map $r7, $r17, $r25, $r27;
        java.lang.String $r9, $r18, $r29, $r37, $r42, $r45, $r53;
        java.lang.Object $r10, $r16, $r20;
        java.io.IOException $r11, $r21, $r43, $r44, $r47, $r48, r49, $r52, $r55;
        java.lang.Class[] $r12;
        java.lang.Boolean $r14;
        byte[] $r15, $r41;
        java.lang.reflect.InvocationTargetException $r22, r23;
        java.lang.Throwable r24, $r46, $r54;
        java.util.TreeMap $r26;
        sun.security.x509.UnparseableExtension $r30;
        sun.security.util.Debug $r32, $r33;
        java.lang.StringBuilder $r34, $r35, $r36;
        sun.misc.HexDumpEncoder $r38, r39;
        java.io.PrintStream $r40;
        java.lang.Exception $r50, r51;

        r0 := @this: sun.security.x509.CertificateExtensions;
        r1 := @parameter0: sun.security.x509.Extension;

     label0:
        $r6 = virtualinvoke r1.<sun.security.x509.Extension: sun.security.util.ObjectIdentifier getExtensionId()>();
        r2 = staticinvoke <sun.security.x509.OIDMap: java.lang.Class getClass(sun.security.util.ObjectIdentifier)>($r6);
        if r2 != null goto label4;

        $z0 = virtualinvoke r1.<sun.security.x509.Extension: boolean isCritical()>();
        if $z0 == 0 goto label1;

        r0.<sun.security.x509.CertificateExtensions: boolean unsupportedCritExt> = 1;

     label1:
        $r7 = r0.<sun.security.x509.CertificateExtensions: java.util.Map map>;
        $r8 = virtualinvoke r1.<sun.security.x509.Extension: sun.security.util.ObjectIdentifier getExtensionId()>();
        $r9 = virtualinvoke $r8.<sun.security.util.ObjectIdentifier: java.lang.String toString()>();
        $r10 = interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r1);
        if $r10 != null goto label3;

     label2:
        return;

     label3:
        $r11 = new java.io.IOException;
        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Duplicate extensions not allowed");
        throw $r11;

     label4:
        $r12 = <sun.security.x509.CertificateExtensions: java.lang.Class[] PARAMS>;
        r3 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r12);
        $r13 = newarray (java.lang.Object)[2];
        $z1 = virtualinvoke r1.<sun.security.x509.Extension: boolean isCritical()>();
        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);
        $r13[0] = $r14;
        $r15 = virtualinvoke r1.<sun.security.x509.Extension: byte[] getExtensionValue()>();
        $r13[1] = $r15;
        r4 = $r13;
        $r16 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r4);
        r5 = (sun.security.x509.CertAttrSet) $r16;
        $r17 = r0.<sun.security.x509.CertificateExtensions: java.util.Map map>;
        $r18 = interfaceinvoke r5.<sun.security.x509.CertAttrSet: java.lang.String getName()>();
        $r19 = (sun.security.x509.Extension) r5;
        $r20 = interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r19);
        if $r20 == null goto label5;

        $r21 = new java.io.IOException;
        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>("Duplicate extensions not allowed");
        throw $r21;

     label5:
        goto label13;

     label6:
        $r22 := @caughtexception;
        r23 = $r22;
        r24 = virtualinvoke r23.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();
        $z2 = virtualinvoke r1.<sun.security.x509.Extension: boolean isCritical()>();
        if $z2 != 0 goto label9;

        $r25 = r0.<sun.security.x509.CertificateExtensions: java.util.Map unparseableExtensions>;
        if $r25 != null goto label7;

        $r26 = new java.util.TreeMap;
        specialinvoke $r26.<java.util.TreeMap: void <init>()>();
        r0.<sun.security.x509.CertificateExtensions: java.util.Map unparseableExtensions> = $r26;

     label7:
        $r27 = r0.<sun.security.x509.CertificateExtensions: java.util.Map unparseableExtensions>;
        $r28 = virtualinvoke r1.<sun.security.x509.Extension: sun.security.util.ObjectIdentifier getExtensionId()>();
        $r29 = virtualinvoke $r28.<sun.security.util.ObjectIdentifier: java.lang.String toString()>();
        $r30 = new sun.security.x509.UnparseableExtension;
        specialinvoke $r30.<sun.security.x509.UnparseableExtension: void <init>(sun.security.x509.Extension,java.lang.Throwable)>(r1, r24);
        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, $r30);
        $r32 = <sun.security.x509.CertificateExtensions: sun.security.util.Debug debug>;
        if $r32 == null goto label8;

        $r33 = <sun.security.x509.CertificateExtensions: sun.security.util.Debug debug>;
        $r34 = new java.lang.StringBuilder;
        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();
        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing extension: ");
        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r33.<sun.security.util.Debug: void println(java.lang.String)>($r37);
        virtualinvoke r24.<java.lang.Throwable: void printStackTrace()>();
        $r38 = new sun.misc.HexDumpEncoder;
        specialinvoke $r38.<sun.misc.HexDumpEncoder: void <init>()>();
        r39 = $r38;
        $r40 = <java.lang.System: java.io.PrintStream err>;
        $r41 = virtualinvoke r1.<sun.security.x509.Extension: byte[] getExtensionValue()>();
        $r42 = virtualinvoke r39.<sun.misc.HexDumpEncoder: java.lang.String encodeBuffer(byte[])>($r41);
        virtualinvoke $r40.<java.io.PrintStream: void println(java.lang.String)>($r42);

     label8:
        return;

     label9:
        $z3 = r24 instanceof java.io.IOException;
        if $z3 == 0 goto label10;

        $r43 = (java.io.IOException) r24;
        throw $r43;

     label10:
        $r44 = new java.io.IOException;
        $r45 = virtualinvoke r24.<java.lang.Throwable: java.lang.String toString()>();
        specialinvoke $r44.<java.io.IOException: void <init>(java.lang.String)>($r45);
        $r46 = virtualinvoke $r44.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(r24);
        $r47 = (java.io.IOException) $r46;
        throw $r47;

     label11:
        $r48 := @caughtexception;
        r49 = $r48;
        throw r49;

     label12:
        $r50 := @caughtexception;
        r51 = $r50;
        $r52 = new java.io.IOException;
        $r53 = virtualinvoke r51.<java.lang.Exception: java.lang.String toString()>();
        specialinvoke $r52.<java.io.IOException: void <init>(java.lang.String)>($r53);
        $r54 = virtualinvoke $r52.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(r51);
        $r55 = (java.io.IOException) $r54;
        throw $r55;

     label13:
        return;

        catch java.lang.reflect.InvocationTargetException from label0 to label2 with label6;
        catch java.lang.reflect.InvocationTargetException from label3 to label5 with label6;
        catch java.io.IOException from label0 to label2 with label11;
        catch java.io.IOException from label3 to label5 with label11;
        catch java.lang.Exception from label0 to label2 with label12;
        catch java.lang.Exception from label3 to label5 with label12;
    }

    public void encode(java.io.OutputStream) throws java.security.cert.CertificateException, java.io.IOException
    {
        sun.security.x509.CertificateExtensions r0;
        java.io.OutputStream r1;

        r0 := @this: sun.security.x509.CertificateExtensions;
        r1 := @parameter0: java.io.OutputStream;
        virtualinvoke r0.<sun.security.x509.CertificateExtensions: void encode(java.io.OutputStream,boolean)>(r1, 0);
        return;
    }

    public void encode(java.io.OutputStream, boolean) throws java.security.cert.CertificateException, java.io.IOException
    {
        sun.security.x509.CertificateExtensions r0;
        java.io.OutputStream r1;
        boolean z0, $z1, $z2;
        sun.security.util.DerOutputStream $r2, r3, r6, $r15, r16, $r17;
        java.util.Collection r4;
        java.lang.Object[] r5;
        int i0, $i1;
        java.util.Map $r7;
        java.lang.Object $r8, $r9, $r11, $r12;
        sun.security.x509.CertAttrSet $r10;
        sun.security.x509.Extension $r13;
        java.security.cert.CertificateException $r14;
        byte $b2;
        byte[] $r18;

        r0 := @this: sun.security.x509.CertificateExtensions;
        r1 := @parameter0: java.io.OutputStream;
        z0 := @parameter1: boolean;
        $r2 = new sun.security.util.DerOutputStream;
        specialinvoke $r2.<sun.security.util.DerOutputStream: void <init>()>();
        r3 = $r2;
        $r7 = r0.<sun.security.x509.CertificateExtensions: java.util.Map map>;
        r4 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>();
        r5 = interfaceinvoke r4.<java.util.Collection: java.lang.Object[] toArray()>();
        i0 = 0;

     label0:
        $i1 = lengthof r5;
        if i0 >= $i1 goto label4;

        $r8 = r5[i0];
        $z1 = $r8 instanceof sun.security.x509.CertAttrSet;
        if $z1 == 0 goto label1;

        $r9 = r5[i0];
        $r10 = (sun.security.x509.CertAttrSet) $r9;
        interfaceinvoke $r10.<sun.security.x509.CertAttrSet: void encode(java.io.OutputStream)>(r3);
        goto label3;

     label1:
        $r11 = r5[i0];
        $z2 = $r11 instanceof sun.security.x509.Extension;
        if $z2 == 0 goto label2;

        $r12 = r5[i0];
        $r13 = (sun.security.x509.Extension) $r12;
        virtualinvoke $r13.<sun.security.x509.Extension: void encode(sun.security.util.DerOutputStream)>(r3);
        goto label3;

     label2:
        $r14 = new java.security.cert.CertificateException;
        specialinvoke $r14.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Illegal extension object");
        throw $r14;

     label3:
        i0 = i0 + 1;
        goto label0;

     label4:
        $r15 = new sun.security.util.DerOutputStream;
        specialinvoke $r15.<sun.security.util.DerOutputStream: void <init>()>();
        r16 = $r15;
        virtualinvoke r16.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>(48, r3);
        if z0 != 0 goto label5;

        $r17 = new sun.security.util.DerOutputStream;
        specialinvoke $r17.<sun.security.util.DerOutputStream: void <init>()>();
        r6 = $r17;
        $b2 = staticinvoke <sun.security.util.DerValue: byte createTag(byte,boolean,byte)>(-128, 1, 3);
        virtualinvoke r6.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>($b2, r16);
        goto label6;

     label5:
        r6 = r16;

     label6:
        $r18 = virtualinvoke r6.<sun.security.util.DerOutputStream: byte[] toByteArray()>();
        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r18);
        return;
    }

    public void set(java.lang.String, java.lang.Object) throws java.io.IOException
    {
        sun.security.x509.CertificateExtensions r0;
        java.lang.String r1;
        java.lang.Object r2;
        boolean $z0;
        java.util.Map $r3;
        sun.security.x509.Extension $r4;
        java.io.IOException $r6;

        r0 := @this: sun.security.x509.CertificateExtensions;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object;
        $z0 = r2 instanceof sun.security.x509.Extension;
        if $z0 == 0 goto label0;

        $r3 = r0.<sun.security.x509.CertificateExtensions: java.util.Map map>;
        $r4 = (sun.security.x509.Extension) r2;
        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);
        goto label1;

     label0:
        $r6 = new java.io.IOException;
        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Unknown extension type.");
        throw $r6;

     label1:
        return;
    }

    public java.lang.Object get(java.lang.String) throws java.io.IOException
    {
        sun.security.x509.CertificateExtensions r0;
        java.lang.String r1, $r8;
        java.lang.Object r2;
        java.lang.StringBuilder $r3, $r6, $r7;
        java.util.Map $r4;
        java.io.IOException $r5;

        r0 := @this: sun.security.x509.CertificateExtensions;
        r1 := @parameter0: java.lang.String;
        $r4 = r0.<sun.security.x509.CertificateExtensions: java.util.Map map>;
        r2 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        if r2 != null goto label0;

        $r5 = new java.io.IOException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No extension found with name ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r8);
        throw $r5;

     label0:
        return r2;
    }

    sun.security.x509.Extension getExtension(java.lang.String)
    {
        sun.security.x509.CertificateExtensions r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        sun.security.x509.Extension $r4;

        r0 := @this: sun.security.x509.CertificateExtensions;
        r1 := @parameter0: java.lang.String;
        $r2 = r0.<sun.security.x509.CertificateExtensions: java.util.Map map>;
        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        $r4 = (sun.security.x509.Extension) $r3;
        return $r4;
    }

    public void delete(java.lang.String) throws java.io.IOException
    {
        sun.security.x509.CertificateExtensions r0;
        java.lang.String r1, $r8;
        java.lang.Object r2;
        java.lang.StringBuilder $r3, $r6, $r7;
        java.util.Map $r4, $r9;
        java.io.IOException $r5;

        r0 := @this: sun.security.x509.CertificateExtensions;
        r1 := @parameter0: java.lang.String;
        $r4 = r0.<sun.security.x509.CertificateExtensions: java.util.Map map>;
        r2 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        if r2 != null goto label0;

        $r5 = new java.io.IOException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No extension found with name ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r8);
        throw $r5;

     label0:
        $r9 = r0.<sun.security.x509.CertificateExtensions: java.util.Map map>;
        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);
        return;
    }

    public java.lang.String getNameByOid(sun.security.util.ObjectIdentifier) throws java.io.IOException
    {
        sun.security.x509.CertificateExtensions r0;
        sun.security.util.ObjectIdentifier r1, $r10;
        java.util.Iterator r2;
        java.lang.String r3;
        java.util.Map $r4, $r7;
        java.util.Set $r5;
        boolean $z0, $z1;
        java.lang.Object $r6, $r8;
        sun.security.x509.Extension $r9;

        r0 := @this: sun.security.x509.CertificateExtensions;
        r1 := @parameter0: sun.security.util.ObjectIdentifier;
        $r4 = r0.<sun.security.x509.CertificateExtensions: java.util.Map map>;
        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();
        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.lang.String) $r6;
        $r7 = r0.<sun.security.x509.CertificateExtensions: java.util.Map map>;
        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);
        $r9 = (sun.security.x509.Extension) $r8;
        $r10 = virtualinvoke $r9.<sun.security.x509.Extension: sun.security.util.ObjectIdentifier getExtensionId()>();
        $z1 = virtualinvoke $r10.<sun.security.util.ObjectIdentifier: boolean equals(sun.security.util.ObjectIdentifier)>(r1);
        if $z1 == 0 goto label1;

        return r3;

     label1:
        goto label0;

     label2:
        return null;
    }

    public java.util.Enumeration getElements()
    {
        sun.security.x509.CertificateExtensions r0;
        java.util.Map $r1;
        java.util.Collection $r2;
        java.util.Enumeration $r3;

        r0 := @this: sun.security.x509.CertificateExtensions;
        $r1 = r0.<sun.security.x509.CertificateExtensions: java.util.Map map>;
        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();
        $r3 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>($r2);
        return $r3;
    }

    public java.util.Collection getAllExtensions()
    {
        sun.security.x509.CertificateExtensions r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: sun.security.x509.CertificateExtensions;
        $r1 = r0.<sun.security.x509.CertificateExtensions: java.util.Map map>;
        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();
        return $r2;
    }

    public java.util.Map getUnparseableExtensions()
    {
        sun.security.x509.CertificateExtensions r0;
        java.util.Map $r1, $r2, $r3;

        r0 := @this: sun.security.x509.CertificateExtensions;
        $r1 = r0.<sun.security.x509.CertificateExtensions: java.util.Map unparseableExtensions>;
        if $r1 != null goto label0;

        $r2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
        return $r2;

     label0:
        $r3 = r0.<sun.security.x509.CertificateExtensions: java.util.Map unparseableExtensions>;
        return $r3;
    }

    public java.lang.String getName()
    {
        sun.security.x509.CertificateExtensions r0;

        r0 := @this: sun.security.x509.CertificateExtensions;
        return "extensions";
    }

    public boolean hasUnsupportedCriticalExtension()
    {
        sun.security.x509.CertificateExtensions r0;
        boolean $z0;

        r0 := @this: sun.security.x509.CertificateExtensions;
        $z0 = r0.<sun.security.x509.CertificateExtensions: boolean unsupportedCritExt>;
        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        sun.security.x509.CertificateExtensions r0, $r7, $r17;
        java.lang.Object r1, $r9, $r10, $r12, $r15;
        java.util.Collection r2;
        java.lang.Object[] r3;
        int i0, i1, $i2;
        java.lang.String r4;
        sun.security.x509.Extension r5, r6;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map $r8, $r14, $r16, $r18;
        sun.security.x509.CertAttrSet $r11;
        sun.security.util.ObjectIdentifier $r13;

        r0 := @this: sun.security.x509.CertificateExtensions;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof sun.security.x509.CertificateExtensions;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r7 = (sun.security.x509.CertificateExtensions) r1;
        r2 = virtualinvoke $r7.<sun.security.x509.CertificateExtensions: java.util.Collection getAllExtensions()>();
        r3 = interfaceinvoke r2.<java.util.Collection: java.lang.Object[] toArray()>();
        i0 = lengthof r3;
        $r8 = r0.<sun.security.x509.CertificateExtensions: java.util.Map map>;
        $i2 = interfaceinvoke $r8.<java.util.Map: int size()>();
        if i0 == $i2 goto label2;

        return 0;

     label2:
        r4 = null;
        i1 = 0;

     label3:
        if i1 >= i0 goto label8;

        $r9 = r3[i1];
        $z1 = $r9 instanceof sun.security.x509.CertAttrSet;
        if $z1 == 0 goto label4;

        $r10 = r3[i1];
        $r11 = (sun.security.x509.CertAttrSet) $r10;
        r4 = interfaceinvoke $r11.<sun.security.x509.CertAttrSet: java.lang.String getName()>();

     label4:
        $r12 = r3[i1];
        r5 = (sun.security.x509.Extension) $r12;
        if r4 != null goto label5;

        $r13 = virtualinvoke r5.<sun.security.x509.Extension: sun.security.util.ObjectIdentifier getExtensionId()>();
        r4 = virtualinvoke $r13.<sun.security.util.ObjectIdentifier: java.lang.String toString()>();

     label5:
        $r14 = r0.<sun.security.x509.CertificateExtensions: java.util.Map map>;
        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);
        r6 = (sun.security.x509.Extension) $r15;
        if r6 != null goto label6;

        return 0;

     label6:
        $z2 = virtualinvoke r6.<sun.security.x509.Extension: boolean equals(java.lang.Object)>(r5);
        if $z2 != 0 goto label7;

        return 0;

     label7:
        i1 = i1 + 1;
        goto label3;

     label8:
        $r16 = virtualinvoke r0.<sun.security.x509.CertificateExtensions: java.util.Map getUnparseableExtensions()>();
        $r17 = (sun.security.x509.CertificateExtensions) r1;
        $r18 = virtualinvoke $r17.<sun.security.x509.CertificateExtensions: java.util.Map getUnparseableExtensions()>();
        $z3 = interfaceinvoke $r16.<java.util.Map: boolean equals(java.lang.Object)>($r18);
        return $z3;
    }

    public int hashCode()
    {
        sun.security.x509.CertificateExtensions r0;
        java.util.Map $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: sun.security.x509.CertificateExtensions;
        $r1 = r0.<sun.security.x509.CertificateExtensions: java.util.Map map>;
        $i0 = interfaceinvoke $r1.<java.util.Map: int hashCode()>();
        $r2 = virtualinvoke r0.<sun.security.x509.CertificateExtensions: java.util.Map getUnparseableExtensions()>();
        $i1 = interfaceinvoke $r2.<java.util.Map: int hashCode()>();
        $i2 = $i0 + $i1;
        return $i2;
    }

    public java.lang.String toString()
    {
        sun.security.x509.CertificateExtensions r0;
        java.util.Map $r1;
        java.lang.String $r2;

        r0 := @this: sun.security.x509.CertificateExtensions;
        $r1 = r0.<sun.security.x509.CertificateExtensions: java.util.Map map>;
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();
        return $r2;
    }

    static void <clinit>()
    {
        sun.security.util.Debug $r0;
        java.lang.Class[] $r1;

        $r0 = staticinvoke <sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String)>("x509");
        <sun.security.x509.CertificateExtensions: sun.security.util.Debug debug> = $r0;
        $r1 = newarray (java.lang.Class)[2];
        $r1[0] = class "java/lang/Boolean";
        $r1[1] = class "java/lang/Object";
        <sun.security.x509.CertificateExtensions: java.lang.Class[] PARAMS> = $r1;
        return;
    }
}
