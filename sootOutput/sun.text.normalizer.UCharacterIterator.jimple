public abstract class sun.text.normalizer.UCharacterIterator extends java.lang.Object implements java.lang.Cloneable
{
    public static final int DONE;

    protected void <init>()
    {
        sun.text.normalizer.UCharacterIterator r0;

        r0 := @this: sun.text.normalizer.UCharacterIterator;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static final sun.text.normalizer.UCharacterIterator getInstance(java.lang.String)
    {
        java.lang.String r0;
        sun.text.normalizer.ReplaceableUCharacterIterator $r1;

        r0 := @parameter0: java.lang.String;
        $r1 = new sun.text.normalizer.ReplaceableUCharacterIterator;
        specialinvoke $r1.<sun.text.normalizer.ReplaceableUCharacterIterator: void <init>(java.lang.String)>(r0);
        return $r1;
    }

    public static final sun.text.normalizer.UCharacterIterator getInstance(java.lang.StringBuffer)
    {
        java.lang.StringBuffer r0;
        sun.text.normalizer.ReplaceableUCharacterIterator $r1;

        r0 := @parameter0: java.lang.StringBuffer;
        $r1 = new sun.text.normalizer.ReplaceableUCharacterIterator;
        specialinvoke $r1.<sun.text.normalizer.ReplaceableUCharacterIterator: void <init>(java.lang.StringBuffer)>(r0);
        return $r1;
    }

    public static final sun.text.normalizer.UCharacterIterator getInstance(java.text.CharacterIterator)
    {
        java.text.CharacterIterator r0;
        sun.text.normalizer.CharacterIteratorWrapper $r1;

        r0 := @parameter0: java.text.CharacterIterator;
        $r1 = new sun.text.normalizer.CharacterIteratorWrapper;
        specialinvoke $r1.<sun.text.normalizer.CharacterIteratorWrapper: void <init>(java.text.CharacterIterator)>(r0);
        return $r1;
    }

    public abstract int current();

    public abstract int getLength();

    public abstract int getIndex();

    public abstract int next();

    public int nextCodePoint()
    {
        sun.text.normalizer.UCharacterIterator r0;
        int i0, i1, $i6;
        char $c2, $c3, $c4, $c5;
        boolean $z0, $z1;

        r0 := @this: sun.text.normalizer.UCharacterIterator;
        i0 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int next()>();
        $c2 = (char) i0;
        $z0 = staticinvoke <sun.text.normalizer.UTF16: boolean isLeadSurrogate(char)>($c2);
        if $z0 == 0 goto label1;

        i1 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int next()>();
        $c3 = (char) i1;
        $z1 = staticinvoke <sun.text.normalizer.UTF16: boolean isTrailSurrogate(char)>($c3);
        if $z1 == 0 goto label0;

        $c4 = (char) i0;
        $c5 = (char) i1;
        $i6 = staticinvoke <sun.text.normalizer.UCharacterProperty: int getRawSupplementary(char,char)>($c4, $c5);
        return $i6;

     label0:
        if i1 == -1 goto label1;

        virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int previous()>();

     label1:
        return i0;
    }

    public abstract int previous();

    public abstract void setIndex(int);

    public abstract int getText(char[], int);

    public final int getText(char[])
    {
        sun.text.normalizer.UCharacterIterator r0;
        char[] r1;
        int $i0;

        r0 := @this: sun.text.normalizer.UCharacterIterator;
        r1 := @parameter0: char[];
        $i0 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int getText(char[],int)>(r1, 0);
        return $i0;
    }

    public java.lang.String getText()
    {
        sun.text.normalizer.UCharacterIterator r0;
        char[] r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: sun.text.normalizer.UCharacterIterator;
        $i0 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int getLength()>();
        r1 = newarray (char)[$i0];
        virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int getText(char[])>(r1);
        $r2 = new java.lang.String;
        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);
        return $r2;
    }

    public int moveIndex(int)
    {
        sun.text.normalizer.UCharacterIterator r0;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: sun.text.normalizer.UCharacterIterator;
        i0 := @parameter0: int;
        $i2 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int getIndex()>();
        $i3 = $i2 + i0;
        $i4 = virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: int getLength()>();
        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i4);
        i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i5);
        virtualinvoke r0.<sun.text.normalizer.UCharacterIterator: void setIndex(int)>(i1);
        return i1;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        sun.text.normalizer.UCharacterIterator r0;
        java.lang.Object $r1;

        r0 := @this: sun.text.normalizer.UCharacterIterator;
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        return $r1;
    }
}
