class java.util.regex.Pattern$BackRef extends java.util.regex.Pattern$Node
{
    int groupIndex;

    void <init>(int)
    {
        java.util.regex.Pattern$BackRef r0;
        int i0, $i1;

        r0 := @this: java.util.regex.Pattern$BackRef;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        $i1 = i0 + i0;
        r0.<java.util.regex.Pattern$BackRef: int groupIndex> = $i1;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$BackRef r0;
        java.util.regex.Matcher r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i14;
        java.lang.CharSequence r2;
        int[] $r3, $r4;
        char $c11, $c13;
        java.util.regex.Pattern$Node $r5;
        boolean $z0;

        r0 := @this: java.util.regex.Pattern$BackRef;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $r3 = r1.<java.util.regex.Matcher: int[] groups>;
        $i5 = r0.<java.util.regex.Pattern$BackRef: int groupIndex>;
        i1 = $r3[$i5];
        $r4 = r1.<java.util.regex.Matcher: int[] groups>;
        $i6 = r0.<java.util.regex.Pattern$BackRef: int groupIndex>;
        $i7 = $i6 + 1;
        i2 = $r4[$i7];
        i3 = i2 - i1;
        if i1 >= 0 goto label0;

        return 0;

     label0:
        $i8 = i0 + i3;
        $i9 = r1.<java.util.regex.Matcher: int 'to'>;
        if $i8 <= $i9 goto label1;

        r1.<java.util.regex.Matcher: boolean hitEnd> = 1;
        return 0;

     label1:
        i4 = 0;

     label2:
        if i4 >= i3 goto label4;

        $i10 = i0 + i4;
        $c11 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i10);
        $i12 = i1 + i4;
        $c13 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i12);
        if $c11 == $c13 goto label3;

        return 0;

     label3:
        i4 = i4 + 1;
        goto label2;

     label4:
        $r5 = r0.<java.util.regex.Pattern$BackRef: java.util.regex.Pattern$Node next>;
        $i14 = i0 + i3;
        $z0 = virtualinvoke $r5.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, $i14, r2);
        return $z0;
    }

    boolean study(java.util.regex.Pattern$TreeInfo)
    {
        java.util.regex.Pattern$BackRef r0;
        java.util.regex.Pattern$TreeInfo r1;
        java.util.regex.Pattern$Node $r2;
        boolean $z0;

        r0 := @this: java.util.regex.Pattern$BackRef;
        r1 := @parameter0: java.util.regex.Pattern$TreeInfo;
        r1.<java.util.regex.Pattern$TreeInfo: boolean maxValid> = 0;
        $r2 = r0.<java.util.regex.Pattern$BackRef: java.util.regex.Pattern$Node next>;
        $z0 = virtualinvoke $r2.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        return $z0;
    }
}
