public final class java.util.regex.Matcher extends java.lang.Object implements java.util.regex.MatchResult
{
    java.util.regex.Pattern parentPattern;
    int[] groups;
    int 'from';
    int 'to';
    int lookbehindTo;
    java.lang.CharSequence text;
    static final int ENDANCHOR;
    static final int NOANCHOR;
    int acceptMode;
    int first;
    int last;
    int oldLast;
    int lastAppendPosition;
    int[] locals;
    boolean hitEnd;
    boolean requireEnd;
    boolean transparentBounds;
    boolean anchoringBounds;

    void <init>()
    {
        java.util.regex.Matcher r0;

        r0 := @this: java.util.regex.Matcher;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.regex.Matcher: int acceptMode> = 0;
        r0.<java.util.regex.Matcher: int first> = -1;
        r0.<java.util.regex.Matcher: int last> = 0;
        r0.<java.util.regex.Matcher: int oldLast> = -1;
        r0.<java.util.regex.Matcher: int lastAppendPosition> = 0;
        r0.<java.util.regex.Matcher: boolean transparentBounds> = 0;
        r0.<java.util.regex.Matcher: boolean anchoringBounds> = 1;
        return;
    }

    void <init>(java.util.regex.Pattern, java.lang.CharSequence)
    {
        java.util.regex.Matcher r0;
        java.util.regex.Pattern r1;
        java.lang.CharSequence r2;
        int i0, $i1, $i2, $i3;
        int[] $r3, $r4;

        r0 := @this: java.util.regex.Matcher;
        r1 := @parameter0: java.util.regex.Pattern;
        r2 := @parameter1: java.lang.CharSequence;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.regex.Matcher: int acceptMode> = 0;
        r0.<java.util.regex.Matcher: int first> = -1;
        r0.<java.util.regex.Matcher: int last> = 0;
        r0.<java.util.regex.Matcher: int oldLast> = -1;
        r0.<java.util.regex.Matcher: int lastAppendPosition> = 0;
        r0.<java.util.regex.Matcher: boolean transparentBounds> = 0;
        r0.<java.util.regex.Matcher: boolean anchoringBounds> = 1;
        r0.<java.util.regex.Matcher: java.util.regex.Pattern parentPattern> = r1;
        r0.<java.util.regex.Matcher: java.lang.CharSequence text> = r2;
        $i1 = r1.<java.util.regex.Pattern: int capturingGroupCount>;
        i0 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 10);
        $i2 = i0 * 2;
        $r3 = newarray (int)[$i2];
        r0.<java.util.regex.Matcher: int[] groups> = $r3;
        $i3 = r1.<java.util.regex.Pattern: int localCount>;
        $r4 = newarray (int)[$i3];
        r0.<java.util.regex.Matcher: int[] locals> = $r4;
        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset()>();
        return;
    }

    public java.util.regex.Pattern pattern()
    {
        java.util.regex.Matcher r0;
        java.util.regex.Pattern $r1;

        r0 := @this: java.util.regex.Matcher;
        $r1 = r0.<java.util.regex.Matcher: java.util.regex.Pattern parentPattern>;
        return $r1;
    }

    public java.util.regex.MatchResult toMatchResult()
    {
        java.util.regex.Matcher r0, $r1, r2;
        java.util.regex.Pattern $r3;
        java.lang.CharSequence $r4;
        java.lang.String $r5;
        int $i0, $i1;
        int[] $r6, $r8;
        java.lang.Object $r7;

        r0 := @this: java.util.regex.Matcher;
        $r1 = new java.util.regex.Matcher;
        $r3 = r0.<java.util.regex.Matcher: java.util.regex.Pattern parentPattern>;
        $r4 = r0.<java.util.regex.Matcher: java.lang.CharSequence text>;
        $r5 = interfaceinvoke $r4.<java.lang.CharSequence: java.lang.String toString()>();
        specialinvoke $r1.<java.util.regex.Matcher: void <init>(java.util.regex.Pattern,java.lang.CharSequence)>($r3, $r5);
        r2 = $r1;
        $i0 = r0.<java.util.regex.Matcher: int first>;
        r2.<java.util.regex.Matcher: int first> = $i0;
        $i1 = r0.<java.util.regex.Matcher: int last>;
        r2.<java.util.regex.Matcher: int last> = $i1;
        $r6 = r0.<java.util.regex.Matcher: int[] groups>;
        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Object clone()>();
        $r8 = (int[]) $r7;
        r2.<java.util.regex.Matcher: int[] groups> = $r8;
        return r2;
    }

    public java.util.regex.Matcher usePattern(java.util.regex.Pattern)
    {
        java.util.regex.Matcher r0;
        java.util.regex.Pattern r1;
        int i0, i1, $i2, $i3, $i4, $i5, i6, $i7;
        java.lang.IllegalArgumentException $r2;
        int[] $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: java.util.regex.Matcher;
        r1 := @parameter0: java.util.regex.Pattern;
        if r1 != null goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Pattern cannot be null");
        throw $r2;

     label0:
        r0.<java.util.regex.Matcher: java.util.regex.Pattern parentPattern> = r1;
        $i2 = r1.<java.util.regex.Pattern: int capturingGroupCount>;
        i0 = staticinvoke <java.lang.Math: int max(int,int)>($i2, 10);
        $i3 = i0 * 2;
        $r3 = newarray (int)[$i3];
        r0.<java.util.regex.Matcher: int[] groups> = $r3;
        $i4 = r1.<java.util.regex.Pattern: int localCount>;
        $r4 = newarray (int)[$i4];
        r0.<java.util.regex.Matcher: int[] locals> = $r4;
        i1 = 0;

     label1:
        $r5 = r0.<java.util.regex.Matcher: int[] groups>;
        $i5 = lengthof $r5;
        if i1 >= $i5 goto label2;

        $r6 = r0.<java.util.regex.Matcher: int[] groups>;
        $r6[i1] = -1;
        i1 = i1 + 1;
        goto label1;

     label2:
        i6 = 0;

     label3:
        $r7 = r0.<java.util.regex.Matcher: int[] locals>;
        $i7 = lengthof $r7;
        if i6 >= $i7 goto label4;

        $r8 = r0.<java.util.regex.Matcher: int[] locals>;
        $r8[i6] = -1;
        i6 = i6 + 1;
        goto label3;

     label4:
        return r0;
    }

    public java.util.regex.Matcher reset()
    {
        java.util.regex.Matcher r0;
        int i0, $i1, i2, $i3, $i4;
        int[] $r1, $r2, $r3, $r4;

        r0 := @this: java.util.regex.Matcher;
        r0.<java.util.regex.Matcher: int first> = -1;
        r0.<java.util.regex.Matcher: int last> = 0;
        r0.<java.util.regex.Matcher: int oldLast> = -1;
        i0 = 0;

     label0:
        $r1 = r0.<java.util.regex.Matcher: int[] groups>;
        $i1 = lengthof $r1;
        if i0 >= $i1 goto label1;

        $r2 = r0.<java.util.regex.Matcher: int[] groups>;
        $r2[i0] = -1;
        i0 = i0 + 1;
        goto label0;

     label1:
        i2 = 0;

     label2:
        $r3 = r0.<java.util.regex.Matcher: int[] locals>;
        $i3 = lengthof $r3;
        if i2 >= $i3 goto label3;

        $r4 = r0.<java.util.regex.Matcher: int[] locals>;
        $r4[i2] = -1;
        i2 = i2 + 1;
        goto label2;

     label3:
        r0.<java.util.regex.Matcher: int lastAppendPosition> = 0;
        r0.<java.util.regex.Matcher: int 'from'> = 0;
        $i4 = virtualinvoke r0.<java.util.regex.Matcher: int getTextLength()>();
        r0.<java.util.regex.Matcher: int 'to'> = $i4;
        return r0;
    }

    public java.util.regex.Matcher reset(java.lang.CharSequence)
    {
        java.util.regex.Matcher r0, $r2;
        java.lang.CharSequence r1;

        r0 := @this: java.util.regex.Matcher;
        r1 := @parameter0: java.lang.CharSequence;
        r0.<java.util.regex.Matcher: java.lang.CharSequence text> = r1;
        $r2 = virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset()>();
        return $r2;
    }

    public int start()
    {
        java.util.regex.Matcher r0;
        int $i0, $i1;
        java.lang.IllegalStateException $r1;

        r0 := @this: java.util.regex.Matcher;
        $i0 = r0.<java.util.regex.Matcher: int first>;
        if $i0 >= 0 goto label0;

        $r1 = new java.lang.IllegalStateException;
        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No match available");
        throw $r1;

     label0:
        $i1 = r0.<java.util.regex.Matcher: int first>;
        return $i1;
    }

    public int start(int)
    {
        java.util.regex.Matcher r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.IllegalStateException $r1;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        int[] $r7;

        r0 := @this: java.util.regex.Matcher;
        i0 := @parameter0: int;
        $i1 = r0.<java.util.regex.Matcher: int first>;
        if $i1 >= 0 goto label0;

        $r1 = new java.lang.IllegalStateException;
        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No match available");
        throw $r1;

     label0:
        $i2 = virtualinvoke r0.<java.util.regex.Matcher: int groupCount()>();
        if i0 <= $i2 goto label1;

        $r2 = new java.lang.IndexOutOfBoundsException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No group ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);
        throw $r2;

     label1:
        $r7 = r0.<java.util.regex.Matcher: int[] groups>;
        $i3 = i0 * 2;
        $i4 = $r7[$i3];
        return $i4;
    }

    public int end()
    {
        java.util.regex.Matcher r0;
        int $i0, $i1;
        java.lang.IllegalStateException $r1;

        r0 := @this: java.util.regex.Matcher;
        $i0 = r0.<java.util.regex.Matcher: int first>;
        if $i0 >= 0 goto label0;

        $r1 = new java.lang.IllegalStateException;
        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No match available");
        throw $r1;

     label0:
        $i1 = r0.<java.util.regex.Matcher: int last>;
        return $i1;
    }

    public int end(int)
    {
        java.util.regex.Matcher r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalStateException $r1;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        int[] $r7;

        r0 := @this: java.util.regex.Matcher;
        i0 := @parameter0: int;
        $i1 = r0.<java.util.regex.Matcher: int first>;
        if $i1 >= 0 goto label0;

        $r1 = new java.lang.IllegalStateException;
        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No match available");
        throw $r1;

     label0:
        $i2 = virtualinvoke r0.<java.util.regex.Matcher: int groupCount()>();
        if i0 <= $i2 goto label1;

        $r2 = new java.lang.IndexOutOfBoundsException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No group ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);
        throw $r2;

     label1:
        $r7 = r0.<java.util.regex.Matcher: int[] groups>;
        $i3 = i0 * 2;
        $i4 = $i3 + 1;
        $i5 = $r7[$i4];
        return $i5;
    }

    public java.lang.String group()
    {
        java.util.regex.Matcher r0;
        java.lang.String $r1;

        r0 := @this: java.util.regex.Matcher;
        $r1 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group(int)>(0);
        return $r1;
    }

    public java.lang.String group(int)
    {
        java.util.regex.Matcher r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.IllegalStateException $r1;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6, $r12;
        int[] $r7, $r8, $r9, $r10;
        java.lang.CharSequence $r11;

        r0 := @this: java.util.regex.Matcher;
        i0 := @parameter0: int;
        $i1 = r0.<java.util.regex.Matcher: int first>;
        if $i1 >= 0 goto label0;

        $r1 = new java.lang.IllegalStateException;
        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No match found");
        throw $r1;

     label0:
        if i0 < 0 goto label1;

        $i2 = virtualinvoke r0.<java.util.regex.Matcher: int groupCount()>();
        if i0 <= $i2 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No group ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);
        throw $r2;

     label2:
        $r7 = r0.<java.util.regex.Matcher: int[] groups>;
        $i3 = i0 * 2;
        $i4 = $r7[$i3];
        if $i4 == -1 goto label3;

        $r8 = r0.<java.util.regex.Matcher: int[] groups>;
        $i5 = i0 * 2;
        $i6 = $i5 + 1;
        $i7 = $r8[$i6];
        if $i7 != -1 goto label4;

     label3:
        return null;

     label4:
        $r9 = r0.<java.util.regex.Matcher: int[] groups>;
        $i8 = i0 * 2;
        $i9 = $r9[$i8];
        $r10 = r0.<java.util.regex.Matcher: int[] groups>;
        $i10 = i0 * 2;
        $i11 = $i10 + 1;
        $i12 = $r10[$i11];
        $r11 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.CharSequence getSubSequence(int,int)>($i9, $i12);
        $r12 = interfaceinvoke $r11.<java.lang.CharSequence: java.lang.String toString()>();
        return $r12;
    }

    public java.lang.String group(java.lang.String)
    {
        java.util.regex.Matcher r0;
        java.lang.String r1, $r11, $r21;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.NullPointerException $r2;
        java.lang.IllegalStateException $r3;
        java.util.regex.Pattern $r4, $r12;
        java.util.Map $r5, $r13;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.Object $r14;
        java.lang.Integer $r15;
        int[] $r16, $r17, $r18, $r19;
        java.lang.CharSequence $r20;

        r0 := @this: java.util.regex.Matcher;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null group name");
        throw $r2;

     label0:
        $i1 = r0.<java.util.regex.Matcher: int first>;
        if $i1 >= 0 goto label1;

        $r3 = new java.lang.IllegalStateException;
        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No match found");
        throw $r3;

     label1:
        $r4 = r0.<java.util.regex.Matcher: java.util.regex.Pattern parentPattern>;
        $r5 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.Map namedGroups()>();
        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);
        if $z0 != 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No group with name <");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);
        throw $r6;

     label2:
        $r12 = r0.<java.util.regex.Matcher: java.util.regex.Pattern parentPattern>;
        $r13 = virtualinvoke $r12.<java.util.regex.Pattern: java.util.Map namedGroups()>();
        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        $r15 = (java.lang.Integer) $r14;
        i0 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();
        $r16 = r0.<java.util.regex.Matcher: int[] groups>;
        $i2 = i0 * 2;
        $i3 = $r16[$i2];
        if $i3 == -1 goto label3;

        $r17 = r0.<java.util.regex.Matcher: int[] groups>;
        $i4 = i0 * 2;
        $i5 = $i4 + 1;
        $i6 = $r17[$i5];
        if $i6 != -1 goto label4;

     label3:
        return null;

     label4:
        $r18 = r0.<java.util.regex.Matcher: int[] groups>;
        $i7 = i0 * 2;
        $i8 = $r18[$i7];
        $r19 = r0.<java.util.regex.Matcher: int[] groups>;
        $i9 = i0 * 2;
        $i10 = $i9 + 1;
        $i11 = $r19[$i10];
        $r20 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.CharSequence getSubSequence(int,int)>($i8, $i11);
        $r21 = interfaceinvoke $r20.<java.lang.CharSequence: java.lang.String toString()>();
        return $r21;
    }

    public int groupCount()
    {
        java.util.regex.Matcher r0;
        java.util.regex.Pattern $r1;
        int $i0, $i1;

        r0 := @this: java.util.regex.Matcher;
        $r1 = r0.<java.util.regex.Matcher: java.util.regex.Pattern parentPattern>;
        $i0 = $r1.<java.util.regex.Pattern: int capturingGroupCount>;
        $i1 = $i0 - 1;
        return $i1;
    }

    public boolean matches()
    {
        java.util.regex.Matcher r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.regex.Matcher;
        $i0 = r0.<java.util.regex.Matcher: int 'from'>;
        $z0 = virtualinvoke r0.<java.util.regex.Matcher: boolean match(int,int)>($i0, 1);
        return $z0;
    }

    public boolean find()
    {
        java.util.regex.Matcher r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        int[] $r1, $r2;
        boolean $z0;

        r0 := @this: java.util.regex.Matcher;
        i0 = r0.<java.util.regex.Matcher: int last>;
        $i2 = r0.<java.util.regex.Matcher: int first>;
        if i0 != $i2 goto label0;

        i0 = i0 + 1;

     label0:
        $i3 = r0.<java.util.regex.Matcher: int 'from'>;
        if i0 >= $i3 goto label1;

        i0 = r0.<java.util.regex.Matcher: int 'from'>;

     label1:
        $i4 = r0.<java.util.regex.Matcher: int 'to'>;
        if i0 <= $i4 goto label4;

        i1 = 0;

     label2:
        $r1 = r0.<java.util.regex.Matcher: int[] groups>;
        $i5 = lengthof $r1;
        if i1 >= $i5 goto label3;

        $r2 = r0.<java.util.regex.Matcher: int[] groups>;
        $r2[i1] = -1;
        i1 = i1 + 1;
        goto label2;

     label3:
        return 0;

     label4:
        $z0 = virtualinvoke r0.<java.util.regex.Matcher: boolean search(int)>(i0);
        return $z0;
    }

    public boolean find(int)
    {
        java.util.regex.Matcher r0;
        int i0, i1;
        java.lang.IndexOutOfBoundsException $r1;
        boolean $z0;

        r0 := @this: java.util.regex.Matcher;
        i0 := @parameter0: int;
        i1 = virtualinvoke r0.<java.util.regex.Matcher: int getTextLength()>();
        if i0 < 0 goto label0;

        if i0 <= i1 goto label1;

     label0:
        $r1 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Illegal start index");
        throw $r1;

     label1:
        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset()>();
        $z0 = virtualinvoke r0.<java.util.regex.Matcher: boolean search(int)>(i0);
        return $z0;
    }

    public boolean lookingAt()
    {
        java.util.regex.Matcher r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.regex.Matcher;
        $i0 = r0.<java.util.regex.Matcher: int 'from'>;
        $z0 = virtualinvoke r0.<java.util.regex.Matcher: boolean match(int,int)>($i0, 0);
        return $z0;
    }

    public static java.lang.String quoteReplacement(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.StringBuilder r1, $r2;
        int i0, $i2, $i3, $i4;
        char c1;

        r0 := @parameter0: java.lang.String;
        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(92);
        if $i2 != -1 goto label0;

        $i3 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(36);
        if $i3 != -1 goto label0;

        return r0;

     label0:
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        r1 = $r2;
        i0 = 0;

     label1:
        $i4 = virtualinvoke r0.<java.lang.String: int length()>();
        if i0 >= $i4 goto label4;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);
        if c1 == 92 goto label2;

        if c1 != 36 goto label3;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);
        i0 = i0 + 1;
        goto label1;

     label4:
        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r5;
    }

    public java.util.regex.Matcher appendReplacement(java.lang.StringBuffer, java.lang.String)
    {
        java.util.regex.Matcher r0;
        java.lang.StringBuffer r1;
        java.lang.String r2, r5, $r18, $r26;
        int i0, i3, $i4, $i5, i6, i8, i10, $i11, $i12, i14, $i15, i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26;
        java.lang.StringBuilder r3, r4, $r7, $r9, $r14, $r15, $r16, $r17, $r22, $r23, $r24, $r25;
        char c1, c7, c9, $c13, $c16;
        byte b2;
        java.lang.IllegalStateException $r6;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.lang.IllegalArgumentException $r11, $r12, $r13, $r21, $r31;
        java.util.regex.Pattern $r19, $r27;
        java.util.Map $r20, $r28;
        java.lang.Object $r29;
        java.lang.Integer $r30;
        java.lang.CharSequence $r32, $r35;

        r0 := @this: java.util.regex.Matcher;
        r1 := @parameter0: java.lang.StringBuffer;
        r2 := @parameter1: java.lang.String;
        $i4 = r0.<java.util.regex.Matcher: int first>;
        if $i4 >= 0 goto label0;

        $r6 = new java.lang.IllegalStateException;
        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No match available");
        throw $r6;

     label0:
        i0 = 0;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        r3 = $r7;

     label1:
        $i5 = virtualinvoke r2.<java.lang.String: int length()>();
        if i0 >= $i5 goto label22;

        c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0);
        if c1 != 92 goto label2;

        i6 = i0 + 1;
        c7 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i6);
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c7);
        i0 = i6 + 1;
        goto label21;

     label2:
        if c1 != 36 goto label20;

        i8 = i0 + 1;
        c9 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i8);
        b2 = -1;
        if c9 != 123 goto label10;

        i10 = i8 + 1;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        r4 = $r9;

     label3:
        $i11 = virtualinvoke r2.<java.lang.String: int length()>();
        if i10 >= $i11 goto label5;

        c9 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i10);
        $z0 = staticinvoke <java.util.regex.ASCII: boolean isLower(int)>(c9);
        if $z0 != 0 goto label4;

        $z1 = staticinvoke <java.util.regex.ASCII: boolean isUpper(int)>(c9);
        if $z1 != 0 goto label4;

        $z2 = staticinvoke <java.util.regex.ASCII: boolean isDigit(int)>(c9);
        if $z2 == 0 goto label5;

     label4:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9);
        i10 = i10 + 1;
        goto label3;

     label5:
        $i12 = virtualinvoke r4.<java.lang.StringBuilder: int length()>();
        if $i12 != 0 goto label6;

        $r11 = new java.lang.IllegalArgumentException;
        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("named capturing group has 0 length name");
        throw $r11;

     label6:
        if c9 == 125 goto label7;

        $r12 = new java.lang.IllegalArgumentException;
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("named capturing group is missing trailing \'}\'");
        throw $r12;

     label7:
        r5 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();
        $c13 = virtualinvoke r5.<java.lang.String: char charAt(int)>(0);
        $z3 = staticinvoke <java.util.regex.ASCII: boolean isDigit(int)>($c13);
        if $z3 == 0 goto label8;

        $r13 = new java.lang.IllegalArgumentException;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("capturing group name {");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} starts with digit character");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);
        throw $r13;

     label8:
        $r19 = r0.<java.util.regex.Matcher: java.util.regex.Pattern parentPattern>;
        $r20 = virtualinvoke $r19.<java.util.regex.Pattern: java.util.Map namedGroups()>();
        $z4 = interfaceinvoke $r20.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);
        if $z4 != 0 goto label9;

        $r21 = new java.lang.IllegalArgumentException;
        $r22 = new java.lang.StringBuilder;
        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No group with name {");
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);
        throw $r21;

     label9:
        $r27 = r0.<java.util.regex.Matcher: java.util.regex.Pattern parentPattern>;
        $r28 = virtualinvoke $r27.<java.util.regex.Pattern: java.util.Map namedGroups()>();
        $r29 = interfaceinvoke $r28.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);
        $r30 = (java.lang.Integer) $r29;
        i14 = virtualinvoke $r30.<java.lang.Integer: int intValue()>();
        i0 = i10 + 1;
        goto label18;

     label10:
        i14 = c9 - 48;
        if i14 < 0 goto label11;

        if i14 <= 9 goto label12;

     label11:
        $r31 = new java.lang.IllegalArgumentException;
        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal group reference");
        throw $r31;

     label12:
        i0 = i8 + 1;
        z5 = 0;

     label13:
        if z5 != 0 goto label18;

        $i15 = virtualinvoke r2.<java.lang.String: int length()>();
        if i0 < $i15 goto label14;

        goto label18;

     label14:
        $c16 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0);
        i17 = $c16 - 48;
        if i17 < 0 goto label18;

        if i17 <= 9 goto label15;

        goto label18;

     label15:
        $i18 = i14 * 10;
        i3 = $i18 + i17;
        $i19 = virtualinvoke r0.<java.util.regex.Matcher: int groupCount()>();
        if $i19 >= i3 goto label16;

        z5 = 1;
        goto label17;

     label16:
        i14 = i3;
        i0 = i0 + 1;

     label17:
        goto label13;

     label18:
        $i20 = virtualinvoke r0.<java.util.regex.Matcher: int start(int)>(i14);
        if $i20 == -1 goto label19;

        $i21 = virtualinvoke r0.<java.util.regex.Matcher: int end(int)>(i14);
        if $i21 == -1 goto label19;

        $r32 = r0.<java.util.regex.Matcher: java.lang.CharSequence text>;
        $i22 = virtualinvoke r0.<java.util.regex.Matcher: int start(int)>(i14);
        $i23 = virtualinvoke r0.<java.util.regex.Matcher: int end(int)>(i14);
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r32, $i22, $i23);

     label19:
        goto label21;

     label20:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);
        i0 = i0 + 1;

     label21:
        goto label1;

     label22:
        $r35 = r0.<java.util.regex.Matcher: java.lang.CharSequence text>;
        $i24 = r0.<java.util.regex.Matcher: int lastAppendPosition>;
        $i25 = r0.<java.util.regex.Matcher: int first>;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>($r35, $i24, $i25);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r3);
        $i26 = r0.<java.util.regex.Matcher: int last>;
        r0.<java.util.regex.Matcher: int lastAppendPosition> = $i26;
        return r0;
    }

    public java.lang.StringBuffer appendTail(java.lang.StringBuffer)
    {
        java.util.regex.Matcher r0;
        java.lang.StringBuffer r1;
        java.lang.CharSequence $r2;
        int $i0, $i1;

        r0 := @this: java.util.regex.Matcher;
        r1 := @parameter0: java.lang.StringBuffer;
        $r2 = r0.<java.util.regex.Matcher: java.lang.CharSequence text>;
        $i0 = r0.<java.util.regex.Matcher: int lastAppendPosition>;
        $i1 = virtualinvoke r0.<java.util.regex.Matcher: int getTextLength()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>($r2, $i0, $i1);
        return r1;
    }

    public java.lang.String replaceAll(java.lang.String)
    {
        java.util.regex.Matcher r0;
        java.lang.String r1, $r7, $r9;
        boolean z0, z1;
        java.lang.StringBuffer r2, $r4;
        java.lang.CharSequence $r8;

        r0 := @this: java.util.regex.Matcher;
        r1 := @parameter0: java.lang.String;
        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset()>();
        z0 = virtualinvoke r0.<java.util.regex.Matcher: boolean find()>();
        if z0 == 0 goto label1;

        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();
        r2 = $r4;

     label0:
        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>(r2, r1);
        z1 = virtualinvoke r0.<java.util.regex.Matcher: boolean find()>();
        if z1 != 0 goto label0;

        virtualinvoke r0.<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>(r2);
        $r7 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r7;

     label1:
        $r8 = r0.<java.util.regex.Matcher: java.lang.CharSequence text>;
        $r9 = interfaceinvoke $r8.<java.lang.CharSequence: java.lang.String toString()>();
        return $r9;
    }

    public java.lang.String replaceFirst(java.lang.String)
    {
        java.util.regex.Matcher r0;
        java.lang.String r1, $r6, $r10;
        java.lang.StringBuffer r2, $r7;
        java.lang.NullPointerException $r3;
        boolean $z0;
        java.lang.CharSequence $r5;

        r0 := @this: java.util.regex.Matcher;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("replacement");
        throw $r3;

     label0:
        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset()>();
        $z0 = virtualinvoke r0.<java.util.regex.Matcher: boolean find()>();
        if $z0 != 0 goto label1;

        $r5 = r0.<java.util.regex.Matcher: java.lang.CharSequence text>;
        $r6 = interfaceinvoke $r5.<java.lang.CharSequence: java.lang.String toString()>();
        return $r6;

     label1:
        $r7 = new java.lang.StringBuffer;
        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();
        r2 = $r7;
        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>(r2, r1);
        virtualinvoke r0.<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>(r2);
        $r10 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r10;
    }

    public java.util.regex.Matcher region(int, int)
    {
        java.util.regex.Matcher r0;
        int i0, i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r1, $r2, $r3;

        r0 := @this: java.util.regex.Matcher;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        if i0 < 0 goto label0;

        $i2 = virtualinvoke r0.<java.util.regex.Matcher: int getTextLength()>();
        if i0 <= $i2 goto label1;

     label0:
        $r1 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("start");
        throw $r1;

     label1:
        if i1 < 0 goto label2;

        $i3 = virtualinvoke r0.<java.util.regex.Matcher: int getTextLength()>();
        if i1 <= $i3 goto label3;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("end");
        throw $r2;

     label3:
        if i0 <= i1 goto label4;

        $r3 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("start > end");
        throw $r3;

     label4:
        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset()>();
        r0.<java.util.regex.Matcher: int 'from'> = i0;
        r0.<java.util.regex.Matcher: int 'to'> = i1;
        return r0;
    }

    public int regionStart()
    {
        java.util.regex.Matcher r0;
        int $i0;

        r0 := @this: java.util.regex.Matcher;
        $i0 = r0.<java.util.regex.Matcher: int 'from'>;
        return $i0;
    }

    public int regionEnd()
    {
        java.util.regex.Matcher r0;
        int $i0;

        r0 := @this: java.util.regex.Matcher;
        $i0 = r0.<java.util.regex.Matcher: int 'to'>;
        return $i0;
    }

    public boolean hasTransparentBounds()
    {
        java.util.regex.Matcher r0;
        boolean $z0;

        r0 := @this: java.util.regex.Matcher;
        $z0 = r0.<java.util.regex.Matcher: boolean transparentBounds>;
        return $z0;
    }

    public java.util.regex.Matcher useTransparentBounds(boolean)
    {
        java.util.regex.Matcher r0;
        boolean z0;

        r0 := @this: java.util.regex.Matcher;
        z0 := @parameter0: boolean;
        r0.<java.util.regex.Matcher: boolean transparentBounds> = z0;
        return r0;
    }

    public boolean hasAnchoringBounds()
    {
        java.util.regex.Matcher r0;
        boolean $z0;

        r0 := @this: java.util.regex.Matcher;
        $z0 = r0.<java.util.regex.Matcher: boolean anchoringBounds>;
        return $z0;
    }

    public java.util.regex.Matcher useAnchoringBounds(boolean)
    {
        java.util.regex.Matcher r0;
        boolean z0;

        r0 := @this: java.util.regex.Matcher;
        z0 := @parameter0: boolean;
        r0.<java.util.regex.Matcher: boolean anchoringBounds> = z0;
        return r0;
    }

    public java.lang.String toString()
    {
        java.util.regex.Matcher r0;
        java.lang.StringBuilder $r1, r2, $r4, $r5, $r7, $r11, $r12, $r13, $r14;
        java.util.regex.Pattern $r6;
        java.lang.String $r8, $r15, $r18, $r19, $r22;
        int $i0, $i1, $i2;

        r0 := @this: java.util.regex.Matcher;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("java.util.regex.Matcher");
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[pattern=");
        $r6 = virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Pattern pattern()>();
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" region=");
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $i0 = virtualinvoke r0.<java.util.regex.Matcher: int regionStart()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");
        $i1 = virtualinvoke r0.<java.util.regex.Matcher: int regionEnd()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lastmatch=");
        $i2 = r0.<java.util.regex.Matcher: int first>;
        if $i2 < 0 goto label0;

        $r18 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group()>();
        if $r18 == null goto label0;

        $r19 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

     label0:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r22 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r22;
    }

    public boolean hitEnd()
    {
        java.util.regex.Matcher r0;
        boolean $z0;

        r0 := @this: java.util.regex.Matcher;
        $z0 = r0.<java.util.regex.Matcher: boolean hitEnd>;
        return $z0;
    }

    public boolean requireEnd()
    {
        java.util.regex.Matcher r0;
        boolean $z0;

        r0 := @this: java.util.regex.Matcher;
        $z0 = r0.<java.util.regex.Matcher: boolean requireEnd>;
        return $z0;
    }

    boolean search(int)
    {
        java.util.regex.Matcher r0;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7;
        int[] $r2, $r3;
        java.util.regex.Pattern $r4;
        java.util.regex.Pattern$Node $r5;
        java.lang.CharSequence $r6;
        boolean z0;

        r0 := @this: java.util.regex.Matcher;
        i0 := @parameter0: int;
        r0.<java.util.regex.Matcher: boolean hitEnd> = 0;
        r0.<java.util.regex.Matcher: boolean requireEnd> = 0;
        if i0 >= 0 goto label0;

        $i2 = 0;
        goto label1;

     label0:
        $i2 = i0;

     label1:
        i3 = $i2;
        r0.<java.util.regex.Matcher: int first> = i3;
        $i4 = r0.<java.util.regex.Matcher: int oldLast>;
        if $i4 >= 0 goto label2;

        $i5 = i3;
        goto label3;

     label2:
        $i5 = r0.<java.util.regex.Matcher: int oldLast>;

     label3:
        r0.<java.util.regex.Matcher: int oldLast> = $i5;
        i1 = 0;

     label4:
        $r2 = r0.<java.util.regex.Matcher: int[] groups>;
        $i6 = lengthof $r2;
        if i1 >= $i6 goto label5;

        $r3 = r0.<java.util.regex.Matcher: int[] groups>;
        $r3[i1] = -1;
        i1 = i1 + 1;
        goto label4;

     label5:
        r0.<java.util.regex.Matcher: int acceptMode> = 0;
        $r4 = r0.<java.util.regex.Matcher: java.util.regex.Pattern parentPattern>;
        $r5 = $r4.<java.util.regex.Pattern: java.util.regex.Pattern$Node root>;
        $r6 = r0.<java.util.regex.Matcher: java.lang.CharSequence text>;
        z0 = virtualinvoke $r5.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r0, i3, $r6);
        if z0 != 0 goto label6;

        r0.<java.util.regex.Matcher: int first> = -1;

     label6:
        $i7 = r0.<java.util.regex.Matcher: int last>;
        r0.<java.util.regex.Matcher: int oldLast> = $i7;
        return z0;
    }

    boolean match(int, int)
    {
        java.util.regex.Matcher r0;
        int i0, i1, i2, $i3, i4, $i5, $i6, $i7, $i8;
        int[] $r2, $r3;
        java.util.regex.Pattern $r4;
        java.util.regex.Pattern$Node $r5;
        java.lang.CharSequence $r6;
        boolean z0;

        r0 := @this: java.util.regex.Matcher;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r0.<java.util.regex.Matcher: boolean hitEnd> = 0;
        r0.<java.util.regex.Matcher: boolean requireEnd> = 0;
        if i0 >= 0 goto label0;

        $i3 = 0;
        goto label1;

     label0:
        $i3 = i0;

     label1:
        i4 = $i3;
        r0.<java.util.regex.Matcher: int first> = i4;
        $i5 = r0.<java.util.regex.Matcher: int oldLast>;
        if $i5 >= 0 goto label2;

        $i6 = i4;
        goto label3;

     label2:
        $i6 = r0.<java.util.regex.Matcher: int oldLast>;

     label3:
        r0.<java.util.regex.Matcher: int oldLast> = $i6;
        i2 = 0;

     label4:
        $r2 = r0.<java.util.regex.Matcher: int[] groups>;
        $i7 = lengthof $r2;
        if i2 >= $i7 goto label5;

        $r3 = r0.<java.util.regex.Matcher: int[] groups>;
        $r3[i2] = -1;
        i2 = i2 + 1;
        goto label4;

     label5:
        r0.<java.util.regex.Matcher: int acceptMode> = i1;
        $r4 = r0.<java.util.regex.Matcher: java.util.regex.Pattern parentPattern>;
        $r5 = $r4.<java.util.regex.Pattern: java.util.regex.Pattern$Node matchRoot>;
        $r6 = r0.<java.util.regex.Matcher: java.lang.CharSequence text>;
        z0 = virtualinvoke $r5.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r0, i4, $r6);
        if z0 != 0 goto label6;

        r0.<java.util.regex.Matcher: int first> = -1;

     label6:
        $i8 = r0.<java.util.regex.Matcher: int last>;
        r0.<java.util.regex.Matcher: int oldLast> = $i8;
        return z0;
    }

    int getTextLength()
    {
        java.util.regex.Matcher r0;
        java.lang.CharSequence $r1;
        int $i0;

        r0 := @this: java.util.regex.Matcher;
        $r1 = r0.<java.util.regex.Matcher: java.lang.CharSequence text>;
        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();
        return $i0;
    }

    java.lang.CharSequence getSubSequence(int, int)
    {
        java.util.regex.Matcher r0;
        int i0, i1;
        java.lang.CharSequence $r1, $r2;

        r0 := @this: java.util.regex.Matcher;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = r0.<java.util.regex.Matcher: java.lang.CharSequence text>;
        $r2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i0, i1);
        return $r2;
    }

    char charAt(int)
    {
        java.util.regex.Matcher r0;
        int i0;
        java.lang.CharSequence $r1;
        char $c1;

        r0 := @this: java.util.regex.Matcher;
        i0 := @parameter0: int;
        $r1 = r0.<java.util.regex.Matcher: java.lang.CharSequence text>;
        $c1 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(i0);
        return $c1;
    }
}
