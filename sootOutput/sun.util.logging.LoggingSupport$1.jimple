final class sun.util.logging.LoggingSupport$1 extends java.lang.Object implements java.security.PrivilegedAction
{

    void <init>()
    {
        sun.util.logging.LoggingSupport$1 r0;

        r0 := @this: sun.util.logging.LoggingSupport$1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public sun.util.logging.LoggingProxy run()
    {
        sun.util.logging.LoggingSupport$1 r0;
        java.lang.Class r1;
        java.lang.reflect.Field r2;
        java.lang.Object $r3;
        sun.util.logging.LoggingProxy $r4;
        java.lang.ClassNotFoundException $r5, r6;
        java.lang.NoSuchFieldException $r7, r8;
        java.lang.AssertionError $r9, $r12;
        java.lang.IllegalAccessException $r10, r11;

        r0 := @this: sun.util.logging.LoggingSupport$1;

     label0:
        r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("java.util.logging.LoggingProxyImpl", 1, null);
        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("INSTANCE");
        virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);
        $r3 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);
        $r4 = (sun.util.logging.LoggingProxy) $r3;

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;
        r6 = $r5;
        return null;

     label3:
        $r7 := @caughtexception;
        r8 = $r7;
        $r9 = new java.lang.AssertionError;
        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>(r8);
        throw $r9;

     label4:
        $r10 := @caughtexception;
        r11 = $r10;
        $r12 = new java.lang.AssertionError;
        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>(r11);
        throw $r12;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
        catch java.lang.NoSuchFieldException from label0 to label1 with label3;
        catch java.lang.IllegalAccessException from label0 to label1 with label4;
    }

    public volatile java.lang.Object run()
    {
        sun.util.logging.LoggingSupport$1 r0;
        sun.util.logging.LoggingProxy $r1;

        r0 := @this: sun.util.logging.LoggingSupport$1;
        $r1 = virtualinvoke r0.<sun.util.logging.LoggingSupport$1: sun.util.logging.LoggingProxy run()>();
        return $r1;
    }
}
