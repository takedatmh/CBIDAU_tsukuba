public class java.util.IdentityHashMap extends java.util.AbstractMap implements java.util.Map, java.io.Serializable, java.lang.Cloneable
{
    private static final int DEFAULT_CAPACITY;
    private static final int MINIMUM_CAPACITY;
    private static final int MAXIMUM_CAPACITY;
    private transient java.lang.Object[] table;
    private int size;
    private transient int modCount;
    private transient int threshold;
    private static final java.lang.Object NULL_KEY;
    private transient java.util.Set entrySet;
    private static final long serialVersionUID;

    private static java.lang.Object maskNull(java.lang.Object)
    {
        java.lang.Object r0, $r1;

        r0 := @parameter0: java.lang.Object;
        if r0 != null goto label0;

        $r1 = <java.util.IdentityHashMap: java.lang.Object NULL_KEY>;
        goto label1;

     label0:
        $r1 = r0;

     label1:
        return $r1;
    }

    private static java.lang.Object unmaskNull(java.lang.Object)
    {
        java.lang.Object r0, $r1, $r2;

        r0 := @parameter0: java.lang.Object;
        $r1 = <java.util.IdentityHashMap: java.lang.Object NULL_KEY>;
        if r0 != $r1 goto label0;

        $r2 = null;
        goto label1;

     label0:
        $r2 = r0;

     label1:
        return $r2;
    }

    public void <init>()
    {
        java.util.IdentityHashMap r0;

        r0 := @this: java.util.IdentityHashMap;
        specialinvoke r0.<java.util.AbstractMap: void <init>()>();
        r0.<java.util.IdentityHashMap: java.util.Set entrySet> = null;
        specialinvoke r0.<java.util.IdentityHashMap: void init(int)>(32);
        return;
    }

    public void <init>(int)
    {
        java.util.IdentityHashMap r0;
        int i0, $i1;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r5;

        r0 := @this: java.util.IdentityHashMap;
        i0 := @parameter0: int;
        specialinvoke r0.<java.util.AbstractMap: void <init>()>();
        r0.<java.util.IdentityHashMap: java.util.Set entrySet> = null;
        if i0 >= 0 goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expectedMaxSize is negative: ");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);
        throw $r2;

     label0:
        $i1 = specialinvoke r0.<java.util.IdentityHashMap: int capacity(int)>(i0);
        specialinvoke r0.<java.util.IdentityHashMap: void init(int)>($i1);
        return;
    }

    private int capacity(int)
    {
        java.util.IdentityHashMap r0;
        int i0, i1, i2, $i3;

        r0 := @this: java.util.IdentityHashMap;
        i0 := @parameter0: int;
        $i3 = 3 * i0;
        i1 = $i3 / 2;
        if i1 > 536870912 goto label0;

        if i1 >= 0 goto label1;

     label0:
        i2 = 536870912;
        goto label3;

     label1:
        i2 = 4;

     label2:
        if i2 >= i1 goto label3;

        i2 = i2 << 1;
        goto label2;

     label3:
        return i2;
    }

    private void init(int)
    {
        java.util.IdentityHashMap r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object[] $r1;

        r0 := @this: java.util.IdentityHashMap;
        i0 := @parameter0: int;
        $i1 = i0 * 2;
        $i2 = $i1 / 3;
        r0.<java.util.IdentityHashMap: int threshold> = $i2;
        $i3 = 2 * i0;
        $r1 = newarray (java.lang.Object)[$i3];
        r0.<java.util.IdentityHashMap: java.lang.Object[] table> = $r1;
        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.IdentityHashMap r0;
        java.util.Map r1;
        int $i0, $i1, $i2;
        double $d0, $d1;

        r0 := @this: java.util.IdentityHashMap;
        r1 := @parameter0: java.util.Map;
        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();
        $i1 = 1 + $i0;
        $d0 = (double) $i1;
        $d1 = $d0 * 1.1;
        $i2 = (int) $d1;
        specialinvoke r0.<java.util.IdentityHashMap: void <init>(int)>($i2);
        virtualinvoke r0.<java.util.IdentityHashMap: void putAll(java.util.Map)>(r1);
        return;
    }

    public int size()
    {
        java.util.IdentityHashMap r0;
        int $i0;

        r0 := @this: java.util.IdentityHashMap;
        $i0 = r0.<java.util.IdentityHashMap: int size>;
        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.IdentityHashMap r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.IdentityHashMap;
        $i0 = r0.<java.util.IdentityHashMap: int size>;
        if $i0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private static int hash(java.lang.Object, int)
    {
        java.lang.Object r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);
        $i2 = i1 << 1;
        $i3 = i1 << 8;
        $i4 = $i2 - $i3;
        $i5 = i0 - 1;
        $i6 = $i4 & $i5;
        return $i6;
    }

    private static int nextKeyIndex(int, int)
    {
        int i0, i1, $i2, $i3;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i2 = i0 + 2;
        if $i2 >= i1 goto label0;

        $i3 = i0 + 2;
        goto label1;

     label0:
        $i3 = 0;

     label1:
        return $i3;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1, r2, r4, $r5;
        java.lang.Object[] r3;
        int i0, i1, $i2;

        r0 := @this: java.util.IdentityHashMap;
        r1 := @parameter0: java.lang.Object;
        r2 = staticinvoke <java.util.IdentityHashMap: java.lang.Object maskNull(java.lang.Object)>(r1);
        r3 = r0.<java.util.IdentityHashMap: java.lang.Object[] table>;
        i0 = lengthof r3;
        i1 = staticinvoke <java.util.IdentityHashMap: int hash(java.lang.Object,int)>(r2, i0);

     label0:
        r4 = r3[i1];
        if r4 != r2 goto label1;

        $i2 = i1 + 1;
        $r5 = r3[$i2];
        return $r5;

     label1:
        if r4 != null goto label2;

        return null;

     label2:
        i1 = staticinvoke <java.util.IdentityHashMap: int nextKeyIndex(int,int)>(i1, i0);
        goto label0;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1, r2, r4;
        java.lang.Object[] r3;
        int i0, i1;

        r0 := @this: java.util.IdentityHashMap;
        r1 := @parameter0: java.lang.Object;
        r2 = staticinvoke <java.util.IdentityHashMap: java.lang.Object maskNull(java.lang.Object)>(r1);
        r3 = r0.<java.util.IdentityHashMap: java.lang.Object[] table>;
        i0 = lengthof r3;
        i1 = staticinvoke <java.util.IdentityHashMap: int hash(java.lang.Object,int)>(r2, i0);

     label0:
        r4 = r3[i1];
        if r4 != r2 goto label1;

        return 1;

     label1:
        if r4 != null goto label2;

        return 0;

     label2:
        i1 = staticinvoke <java.util.IdentityHashMap: int nextKeyIndex(int,int)>(i1, i0);
        goto label0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1, $r3, $r4;
        java.lang.Object[] r2;
        int i0, $i1, $i2;

        r0 := @this: java.util.IdentityHashMap;
        r1 := @parameter0: java.lang.Object;
        r2 = r0.<java.util.IdentityHashMap: java.lang.Object[] table>;
        i0 = 1;

     label0:
        $i1 = lengthof r2;
        if i0 >= $i1 goto label2;

        $r3 = r2[i0];
        if $r3 != r1 goto label1;

        $i2 = i0 - 1;
        $r4 = r2[$i2];
        if $r4 == null goto label1;

        return 1;

     label1:
        i0 = i0 + 2;
        goto label0;

     label2:
        return 0;
    }

    private boolean containsMapping(java.lang.Object, java.lang.Object)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1, r2, r3, r5, $r6;
        java.lang.Object[] r4;
        int i0, i1, $i2;
        boolean $z0;

        r0 := @this: java.util.IdentityHashMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        r3 = staticinvoke <java.util.IdentityHashMap: java.lang.Object maskNull(java.lang.Object)>(r1);
        r4 = r0.<java.util.IdentityHashMap: java.lang.Object[] table>;
        i0 = lengthof r4;
        i1 = staticinvoke <java.util.IdentityHashMap: int hash(java.lang.Object,int)>(r3, i0);

     label0:
        r5 = r4[i1];
        if r5 != r3 goto label3;

        $i2 = i1 + 1;
        $r6 = r4[$i2];
        if $r6 != r2 goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        if r5 != null goto label4;

        return 0;

     label4:
        i1 = staticinvoke <java.util.IdentityHashMap: int nextKeyIndex(int,int)>(i1, i0);
        goto label0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1, r2, r3, r5, r6, $r7;
        java.lang.Object[] r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: java.util.IdentityHashMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        r3 = staticinvoke <java.util.IdentityHashMap: java.lang.Object maskNull(java.lang.Object)>(r1);
        r4 = r0.<java.util.IdentityHashMap: java.lang.Object[] table>;
        i0 = lengthof r4;
        i1 = staticinvoke <java.util.IdentityHashMap: int hash(java.lang.Object,int)>(r3, i0);

     label0:
        $r7 = r4[i1];
        r5 = $r7;
        if $r7 == null goto label2;

        if r5 != r3 goto label1;

        $i2 = i1 + 1;
        r6 = r4[$i2];
        $i3 = i1 + 1;
        r4[$i3] = r2;
        return r6;

     label1:
        i1 = staticinvoke <java.util.IdentityHashMap: int nextKeyIndex(int,int)>(i1, i0);
        goto label0;

     label2:
        $i4 = r0.<java.util.IdentityHashMap: int modCount>;
        $i5 = $i4 + 1;
        r0.<java.util.IdentityHashMap: int modCount> = $i5;
        r4[i1] = r3;
        $i6 = i1 + 1;
        r4[$i6] = r2;
        $i7 = r0.<java.util.IdentityHashMap: int size>;
        $i8 = $i7 + 1;
        r0.<java.util.IdentityHashMap: int size> = $i8;
        $i9 = r0.<java.util.IdentityHashMap: int threshold>;
        if $i8 < $i9 goto label3;

        specialinvoke r0.<java.util.IdentityHashMap: void resize(int)>(i0);

     label3:
        return null;
    }

    private void resize(int)
    {
        java.util.IdentityHashMap r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.Object[] r1, r2;
        java.lang.Object r3, r4, $r6;
        java.lang.IllegalStateException $r5;

        r0 := @this: java.util.IdentityHashMap;
        i0 := @parameter0: int;
        i1 = i0 * 2;
        r1 = r0.<java.util.IdentityHashMap: java.lang.Object[] table>;
        i2 = lengthof r1;
        if i2 != 1073741824 goto label1;

        $i5 = r0.<java.util.IdentityHashMap: int threshold>;
        if $i5 != 536870911 goto label0;

        $r5 = new java.lang.IllegalStateException;
        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Capacity exhausted.");
        throw $r5;

     label0:
        r0.<java.util.IdentityHashMap: int threshold> = 536870911;
        return;

     label1:
        if i2 < i1 goto label2;

        return;

     label2:
        r2 = newarray (java.lang.Object)[i1];
        $i6 = i1 / 3;
        r0.<java.util.IdentityHashMap: int threshold> = $i6;
        i3 = 0;

     label3:
        if i3 >= i2 goto label7;

        r3 = r1[i3];
        if r3 == null goto label6;

        $i7 = i3 + 1;
        r4 = r1[$i7];
        r1[i3] = null;
        $i8 = i3 + 1;
        r1[$i8] = null;
        i4 = staticinvoke <java.util.IdentityHashMap: int hash(java.lang.Object,int)>(r3, i1);

     label4:
        $r6 = r2[i4];
        if $r6 == null goto label5;

        i4 = staticinvoke <java.util.IdentityHashMap: int nextKeyIndex(int,int)>(i4, i1);
        goto label4;

     label5:
        r2[i4] = r3;
        $i9 = i4 + 1;
        r2[$i9] = r4;

     label6:
        i3 = i3 + 2;
        goto label3;

     label7:
        r0.<java.util.IdentityHashMap: java.lang.Object[] table> = r2;
        return;
    }

    public void putAll(java.util.Map)
    {
        java.util.IdentityHashMap r0;
        java.util.Map r1;
        int i0, $i1, $i2;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: java.util.IdentityHashMap;
        r1 := @parameter0: java.util.Map;
        i0 = interfaceinvoke r1.<java.util.Map: int size()>();
        if i0 != 0 goto label0;

        return;

     label0:
        $i1 = r0.<java.util.IdentityHashMap: int threshold>;
        if i0 <= $i1 goto label1;

        $i2 = specialinvoke r0.<java.util.IdentityHashMap: int capacity(int)>(i0);
        specialinvoke r0.<java.util.IdentityHashMap: void resize(int)>($i2);

     label1:
        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();
        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.Map$Entry) $r5;
        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();
        virtualinvoke r0.<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);
        goto label2;

     label3:
        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1, r2, r4, r5;
        java.lang.Object[] r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: java.util.IdentityHashMap;
        r1 := @parameter0: java.lang.Object;
        r2 = staticinvoke <java.util.IdentityHashMap: java.lang.Object maskNull(java.lang.Object)>(r1);
        r3 = r0.<java.util.IdentityHashMap: java.lang.Object[] table>;
        i0 = lengthof r3;
        i1 = staticinvoke <java.util.IdentityHashMap: int hash(java.lang.Object,int)>(r2, i0);

     label0:
        r4 = r3[i1];
        if r4 != r2 goto label1;

        $i2 = r0.<java.util.IdentityHashMap: int modCount>;
        $i3 = $i2 + 1;
        r0.<java.util.IdentityHashMap: int modCount> = $i3;
        $i4 = r0.<java.util.IdentityHashMap: int size>;
        $i5 = $i4 - 1;
        r0.<java.util.IdentityHashMap: int size> = $i5;
        $i6 = i1 + 1;
        r5 = r3[$i6];
        $i7 = i1 + 1;
        r3[$i7] = null;
        r3[i1] = null;
        specialinvoke r0.<java.util.IdentityHashMap: void closeDeletion(int)>(i1);
        return r5;

     label1:
        if r4 != null goto label2;

        return null;

     label2:
        i1 = staticinvoke <java.util.IdentityHashMap: int nextKeyIndex(int,int)>(i1, i0);
        goto label0;
    }

    private boolean removeMapping(java.lang.Object, java.lang.Object)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1, r2, r3, r5, $r6;
        java.lang.Object[] r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: java.util.IdentityHashMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        r3 = staticinvoke <java.util.IdentityHashMap: java.lang.Object maskNull(java.lang.Object)>(r1);
        r4 = r0.<java.util.IdentityHashMap: java.lang.Object[] table>;
        i0 = lengthof r4;
        i1 = staticinvoke <java.util.IdentityHashMap: int hash(java.lang.Object,int)>(r3, i0);

     label0:
        r5 = r4[i1];
        if r5 != r3 goto label2;

        $i2 = i1 + 1;
        $r6 = r4[$i2];
        if $r6 == r2 goto label1;

        return 0;

     label1:
        $i3 = r0.<java.util.IdentityHashMap: int modCount>;
        $i4 = $i3 + 1;
        r0.<java.util.IdentityHashMap: int modCount> = $i4;
        $i5 = r0.<java.util.IdentityHashMap: int size>;
        $i6 = $i5 - 1;
        r0.<java.util.IdentityHashMap: int size> = $i6;
        r4[i1] = null;
        $i7 = i1 + 1;
        r4[$i7] = null;
        specialinvoke r0.<java.util.IdentityHashMap: void closeDeletion(int)>(i1);
        return 1;

     label2:
        if r5 != null goto label3;

        return 0;

     label3:
        i1 = staticinvoke <java.util.IdentityHashMap: int nextKeyIndex(int,int)>(i1, i0);
        goto label0;
    }

    private void closeDeletion(int)
    {
        java.util.IdentityHashMap r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        java.lang.Object[] r1;
        java.lang.Object r2, $r3, $r4;

        r0 := @this: java.util.IdentityHashMap;
        i0 := @parameter0: int;
        r1 = r0.<java.util.IdentityHashMap: java.lang.Object[] table>;
        i1 = lengthof r1;
        i2 = staticinvoke <java.util.IdentityHashMap: int nextKeyIndex(int,int)>(i0, i1);

     label0:
        $r3 = r1[i2];
        r2 = $r3;
        if $r3 == null goto label4;

        i3 = staticinvoke <java.util.IdentityHashMap: int hash(java.lang.Object,int)>(r2, i1);
        if i2 >= i3 goto label1;

        if i3 <= i0 goto label2;

        if i0 <= i2 goto label2;

     label1:
        if i3 > i0 goto label3;

        if i0 > i2 goto label3;

     label2:
        r1[i0] = r2;
        $i4 = i0 + 1;
        $i5 = i2 + 1;
        $r4 = r1[$i5];
        r1[$i4] = $r4;
        r1[i2] = null;
        $i6 = i2 + 1;
        r1[$i6] = null;
        i0 = i2;

     label3:
        i2 = staticinvoke <java.util.IdentityHashMap: int nextKeyIndex(int,int)>(i2, i1);
        goto label0;

     label4:
        return;
    }

    public void clear()
    {
        java.util.IdentityHashMap r0;
        java.lang.Object[] r2;
        int i0, $i1, $i2, $i3;

        r0 := @this: java.util.IdentityHashMap;
        $i1 = r0.<java.util.IdentityHashMap: int modCount>;
        $i2 = $i1 + 1;
        r0.<java.util.IdentityHashMap: int modCount> = $i2;
        r2 = r0.<java.util.IdentityHashMap: java.lang.Object[] table>;
        i0 = 0;

     label0:
        $i3 = lengthof r2;
        if i0 >= $i3 goto label1;

        r2[i0] = null;
        i0 = i0 + 1;
        goto label0;

     label1:
        r0.<java.util.IdentityHashMap: int size> = 0;
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.IdentityHashMap r0, r2;
        java.lang.Object r1, r4, $r5;
        java.lang.Object[] r3;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map r6;
        java.util.Set $r7, $r8;

        r0 := @this: java.util.IdentityHashMap;
        r1 := @parameter0: java.lang.Object;
        if r1 != r0 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof java.util.IdentityHashMap;
        if $z0 == 0 goto label5;

        r2 = (java.util.IdentityHashMap) r1;
        $i1 = virtualinvoke r2.<java.util.IdentityHashMap: int size()>();
        $i2 = r0.<java.util.IdentityHashMap: int size>;
        if $i1 == $i2 goto label1;

        return 0;

     label1:
        r3 = r2.<java.util.IdentityHashMap: java.lang.Object[] table>;
        i0 = 0;

     label2:
        $i3 = lengthof r3;
        if i0 >= $i3 goto label4;

        r4 = r3[i0];
        if r4 == null goto label3;

        $i4 = i0 + 1;
        $r5 = r3[$i4];
        $z1 = specialinvoke r0.<java.util.IdentityHashMap: boolean containsMapping(java.lang.Object,java.lang.Object)>(r4, $r5);
        if $z1 != 0 goto label3;

        return 0;

     label3:
        i0 = i0 + 2;
        goto label2;

     label4:
        return 1;

     label5:
        $z2 = r1 instanceof java.util.Map;
        if $z2 == 0 goto label6;

        r6 = (java.util.Map) r1;
        $r7 = virtualinvoke r0.<java.util.IdentityHashMap: java.util.Set entrySet()>();
        $r8 = interfaceinvoke r6.<java.util.Map: java.util.Set entrySet()>();
        $z3 = interfaceinvoke $r7.<java.util.Set: boolean equals(java.lang.Object)>($r8);
        return $z3;

     label6:
        return 0;
    }

    public int hashCode()
    {
        java.util.IdentityHashMap r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object[] r1;
        java.lang.Object r2, r3, $r4;

        r0 := @this: java.util.IdentityHashMap;
        i0 = 0;
        r1 = r0.<java.util.IdentityHashMap: java.lang.Object[] table>;
        i1 = 0;

     label0:
        $i2 = lengthof r1;
        if i1 >= $i2 goto label2;

        r2 = r1[i1];
        if r2 == null goto label1;

        r3 = staticinvoke <java.util.IdentityHashMap: java.lang.Object unmaskNull(java.lang.Object)>(r2);
        $i3 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r3);
        $i4 = i1 + 1;
        $r4 = r1[$i4];
        $i5 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r4);
        $i6 = $i3 ^ $i5;
        i0 = i0 + $i6;

     label1:
        i1 = i1 + 2;
        goto label0;

     label2:
        return i0;
    }

    public java.lang.Object clone()
    {
        java.util.IdentityHashMap r0, r1;
        java.lang.Object $r2, $r4;
        java.lang.Object[] $r3, $r5;
        java.lang.CloneNotSupportedException $r7, r8;
        java.lang.InternalError $r9;

        r0 := @this: java.util.IdentityHashMap;

     label0:
        $r2 = specialinvoke r0.<java.util.AbstractMap: java.lang.Object clone()>();
        r1 = (java.util.IdentityHashMap) $r2;
        r1.<java.util.IdentityHashMap: java.util.Set entrySet> = null;
        $r3 = r0.<java.util.IdentityHashMap: java.lang.Object[] table>;
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();
        $r5 = (java.lang.Object[]) $r4;
        r1.<java.util.IdentityHashMap: java.lang.Object[] table> = $r5;

     label1:
        return r1;

     label2:
        $r7 := @caughtexception;
        r8 = $r7;
        $r9 = new java.lang.InternalError;
        specialinvoke $r9.<java.lang.InternalError: void <init>()>();
        throw $r9;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    public java.util.Set keySet()
    {
        java.util.IdentityHashMap r0;
        java.util.Set r1;
        java.util.IdentityHashMap$KeySet $r2;

        r0 := @this: java.util.IdentityHashMap;
        r1 = r0.<java.util.IdentityHashMap: java.util.Set keySet>;
        if r1 == null goto label0;

        return r1;

     label0:
        $r2 = new java.util.IdentityHashMap$KeySet;
        specialinvoke $r2.<java.util.IdentityHashMap$KeySet: void <init>(java.util.IdentityHashMap,java.util.IdentityHashMap$1)>(r0, null);
        r0.<java.util.IdentityHashMap: java.util.Set keySet> = $r2;
        return $r2;
    }

    public java.util.Collection values()
    {
        java.util.IdentityHashMap r0;
        java.util.Collection r1;
        java.util.IdentityHashMap$Values $r2;

        r0 := @this: java.util.IdentityHashMap;
        r1 = r0.<java.util.IdentityHashMap: java.util.Collection values>;
        if r1 == null goto label0;

        return r1;

     label0:
        $r2 = new java.util.IdentityHashMap$Values;
        specialinvoke $r2.<java.util.IdentityHashMap$Values: void <init>(java.util.IdentityHashMap,java.util.IdentityHashMap$1)>(r0, null);
        r0.<java.util.IdentityHashMap: java.util.Collection values> = $r2;
        return $r2;
    }

    public java.util.Set entrySet()
    {
        java.util.IdentityHashMap r0;
        java.util.Set r1;
        java.util.IdentityHashMap$EntrySet $r2;

        r0 := @this: java.util.IdentityHashMap;
        r1 = r0.<java.util.IdentityHashMap: java.util.Set entrySet>;
        if r1 == null goto label0;

        return r1;

     label0:
        $r2 = new java.util.IdentityHashMap$EntrySet;
        specialinvoke $r2.<java.util.IdentityHashMap$EntrySet: void <init>(java.util.IdentityHashMap,java.util.IdentityHashMap$1)>(r0, null);
        r0.<java.util.IdentityHashMap: java.util.Set entrySet> = $r2;
        return $r2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.IdentityHashMap r0;
        java.io.ObjectOutputStream r1;
        java.lang.Object[] r2;
        int i0, $i1, $i2, $i3;
        java.lang.Object r3, $r4, $r5;

        r0 := @this: java.util.IdentityHashMap;
        r1 := @parameter0: java.io.ObjectOutputStream;
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        $i1 = r0.<java.util.IdentityHashMap: int size>;
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i1);
        r2 = r0.<java.util.IdentityHashMap: java.lang.Object[] table>;
        i0 = 0;

     label0:
        $i2 = lengthof r2;
        if i0 >= $i2 goto label2;

        r3 = r2[i0];
        if r3 == null goto label1;

        $r4 = staticinvoke <java.util.IdentityHashMap: java.lang.Object unmaskNull(java.lang.Object)>(r3);
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r4);
        $i3 = i0 + 1;
        $r5 = r2[$i3];
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r5);

     label1:
        i0 = i0 + 2;
        goto label0;

     label2:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.IdentityHashMap r0;
        java.io.ObjectInputStream r1;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Object r2, r3;

        r0 := @this: java.util.IdentityHashMap;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();
        $i2 = i0 * 4;
        $i3 = $i2 / 3;
        $i4 = specialinvoke r0.<java.util.IdentityHashMap: int capacity(int)>($i3);
        specialinvoke r0.<java.util.IdentityHashMap: void init(int)>($i4);
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        specialinvoke r0.<java.util.IdentityHashMap: void putForCreate(java.lang.Object,java.lang.Object)>(r2, r3);
        i1 = i1 + 1;
        goto label0;

     label1:
        return;
    }

    private void putForCreate(java.lang.Object, java.lang.Object) throws java.io.IOException
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1, r2, r3, r5, $r6;
        java.lang.Object[] r4;
        int i0, i1, $i2;
        java.io.StreamCorruptedException $r7;

        r0 := @this: java.util.IdentityHashMap;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        r3 = staticinvoke <java.util.IdentityHashMap: java.lang.Object maskNull(java.lang.Object)>(r1);
        r4 = r0.<java.util.IdentityHashMap: java.lang.Object[] table>;
        i0 = lengthof r4;
        i1 = staticinvoke <java.util.IdentityHashMap: int hash(java.lang.Object,int)>(r3, i0);

     label0:
        $r6 = r4[i1];
        r5 = $r6;
        if $r6 == null goto label2;

        if r5 != r3 goto label1;

        $r7 = new java.io.StreamCorruptedException;
        specialinvoke $r7.<java.io.StreamCorruptedException: void <init>()>();
        throw $r7;

     label1:
        i1 = staticinvoke <java.util.IdentityHashMap: int nextKeyIndex(int,int)>(i1, i0);
        goto label0;

     label2:
        r4[i1] = r3;
        $i2 = i1 + 1;
        r4[$i2] = r2;
        return;
    }

    static int access$000(java.util.IdentityHashMap)
    {
        java.util.IdentityHashMap r0;
        int $i0;

        r0 := @parameter0: java.util.IdentityHashMap;
        $i0 = r0.<java.util.IdentityHashMap: int size>;
        return $i0;
    }

    static java.lang.Object[] access$100(java.util.IdentityHashMap)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object[] $r1;

        r0 := @parameter0: java.util.IdentityHashMap;
        $r1 = r0.<java.util.IdentityHashMap: java.lang.Object[] table>;
        return $r1;
    }

    static int access$200(java.util.IdentityHashMap)
    {
        java.util.IdentityHashMap r0;
        int $i0;

        r0 := @parameter0: java.util.IdentityHashMap;
        $i0 = r0.<java.util.IdentityHashMap: int modCount>;
        return $i0;
    }

    static int access$204(java.util.IdentityHashMap)
    {
        java.util.IdentityHashMap r0;
        int $i0, $i1;

        r0 := @parameter0: java.util.IdentityHashMap;
        $i0 = r0.<java.util.IdentityHashMap: int modCount>;
        $i1 = $i0 + 1;
        r0.<java.util.IdentityHashMap: int modCount> = $i1;
        return $i1;
    }

    static int access$010(java.util.IdentityHashMap)
    {
        java.util.IdentityHashMap r0;
        int $i0, $i1;

        r0 := @parameter0: java.util.IdentityHashMap;
        $i0 = r0.<java.util.IdentityHashMap: int size>;
        $i1 = $i0 - 1;
        r0.<java.util.IdentityHashMap: int size> = $i1;
        return $i0;
    }

    static int access$300(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i2 = staticinvoke <java.util.IdentityHashMap: int nextKeyIndex(int,int)>(i0, i1);
        return $i2;
    }

    static int access$400(java.lang.Object, int)
    {
        java.lang.Object r0;
        int i0, $i1;

        r0 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        $i1 = staticinvoke <java.util.IdentityHashMap: int hash(java.lang.Object,int)>(r0, i0);
        return $i1;
    }

    static java.lang.Object access$600(java.lang.Object)
    {
        java.lang.Object r0, $r1;

        r0 := @parameter0: java.lang.Object;
        $r1 = staticinvoke <java.util.IdentityHashMap: java.lang.Object unmaskNull(java.lang.Object)>(r0);
        return $r1;
    }

    static boolean access$1500(java.util.IdentityHashMap, java.lang.Object, java.lang.Object)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @parameter0: java.util.IdentityHashMap;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.lang.Object;
        $z0 = specialinvoke r0.<java.util.IdentityHashMap: boolean containsMapping(java.lang.Object,java.lang.Object)>(r1, r2);
        return $z0;
    }

    static boolean access$1600(java.util.IdentityHashMap, java.lang.Object, java.lang.Object)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @parameter0: java.util.IdentityHashMap;
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.lang.Object;
        $z0 = specialinvoke r0.<java.util.IdentityHashMap: boolean removeMapping(java.lang.Object,java.lang.Object)>(r1, r2);
        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;
        specialinvoke $r0.<java.lang.Object: void <init>()>();
        <java.util.IdentityHashMap: java.lang.Object NULL_KEY> = $r0;
        return;
    }
}
