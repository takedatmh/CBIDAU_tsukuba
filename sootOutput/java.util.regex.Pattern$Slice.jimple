final class java.util.regex.Pattern$Slice extends java.util.regex.Pattern$SliceNode
{

    void <init>(int[])
    {
        java.util.regex.Pattern$Slice r0;
        int[] r1;

        r0 := @this: java.util.regex.Pattern$Slice;
        r1 := @parameter0: int[];
        specialinvoke r0.<java.util.regex.Pattern$SliceNode: void <init>(int[])>(r1);
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$Slice r0;
        java.util.regex.Matcher r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i8;
        java.lang.CharSequence r2;
        int[] r3;
        char $c7;
        java.util.regex.Pattern$Node $r4;
        boolean $z0;

        r0 := @this: java.util.regex.Pattern$Slice;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        r3 = r0.<java.util.regex.Pattern$Slice: int[] buffer>;
        i1 = lengthof r3;
        i2 = 0;

     label0:
        if i2 >= i1 goto label3;

        $i3 = i0 + i2;
        $i4 = r1.<java.util.regex.Matcher: int 'to'>;
        if $i3 < $i4 goto label1;

        r1.<java.util.regex.Matcher: boolean hitEnd> = 1;
        return 0;

     label1:
        $i5 = r3[i2];
        $i6 = i0 + i2;
        $c7 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i6);
        if $i5 == $c7 goto label2;

        return 0;

     label2:
        i2 = i2 + 1;
        goto label0;

     label3:
        $r4 = r0.<java.util.regex.Pattern$Slice: java.util.regex.Pattern$Node next>;
        $i8 = i0 + i1;
        $z0 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, $i8, r2);
        return $z0;
    }
}
