public abstract class java.security.cert.X509Certificate extends java.security.cert.Certificate implements java.security.cert.X509Extension
{
    private static final long serialVersionUID;
    private transient javax.security.auth.x500.X500Principal subjectX500Principal;
    private transient javax.security.auth.x500.X500Principal issuerX500Principal;

    protected void <init>()
    {
        java.security.cert.X509Certificate r0;

        r0 := @this: java.security.cert.X509Certificate;
        specialinvoke r0.<java.security.cert.Certificate: void <init>(java.lang.String)>("X.509");
        return;
    }

    public abstract void checkValidity() throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException;

    public abstract void checkValidity(java.util.Date) throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException;

    public abstract int getVersion();

    public abstract java.math.BigInteger getSerialNumber();

    public abstract java.security.Principal getIssuerDN();

    public javax.security.auth.x500.X500Principal getIssuerX500Principal()
    {
        java.security.cert.X509Certificate r0;
        javax.security.auth.x500.X500Principal $r1, $r2, $r3;

        r0 := @this: java.security.cert.X509Certificate;
        $r1 = r0.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal issuerX500Principal>;
        if $r1 != null goto label0;

        $r2 = staticinvoke <sun.security.x509.X509CertImpl: javax.security.auth.x500.X500Principal getIssuerX500Principal(java.security.cert.X509Certificate)>(r0);
        r0.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal issuerX500Principal> = $r2;

     label0:
        $r3 = r0.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal issuerX500Principal>;
        return $r3;
    }

    public abstract java.security.Principal getSubjectDN();

    public javax.security.auth.x500.X500Principal getSubjectX500Principal()
    {
        java.security.cert.X509Certificate r0;
        javax.security.auth.x500.X500Principal $r1, $r2, $r3;

        r0 := @this: java.security.cert.X509Certificate;
        $r1 = r0.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal subjectX500Principal>;
        if $r1 != null goto label0;

        $r2 = staticinvoke <sun.security.x509.X509CertImpl: javax.security.auth.x500.X500Principal getSubjectX500Principal(java.security.cert.X509Certificate)>(r0);
        r0.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal subjectX500Principal> = $r2;

     label0:
        $r3 = r0.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal subjectX500Principal>;
        return $r3;
    }

    public abstract java.util.Date getNotBefore();

    public abstract java.util.Date getNotAfter();

    public abstract byte[] getTBSCertificate() throws java.security.cert.CertificateEncodingException;

    public abstract byte[] getSignature();

    public abstract java.lang.String getSigAlgName();

    public abstract java.lang.String getSigAlgOID();

    public abstract byte[] getSigAlgParams();

    public abstract boolean[] getIssuerUniqueID();

    public abstract boolean[] getSubjectUniqueID();

    public abstract boolean[] getKeyUsage();

    public java.util.List getExtendedKeyUsage() throws java.security.cert.CertificateParsingException
    {
        java.security.cert.X509Certificate r0;
        java.util.List $r1;

        r0 := @this: java.security.cert.X509Certificate;
        $r1 = staticinvoke <sun.security.x509.X509CertImpl: java.util.List getExtendedKeyUsage(java.security.cert.X509Certificate)>(r0);
        return $r1;
    }

    public abstract int getBasicConstraints();

    public java.util.Collection getSubjectAlternativeNames() throws java.security.cert.CertificateParsingException
    {
        java.security.cert.X509Certificate r0;
        java.util.Collection $r1;

        r0 := @this: java.security.cert.X509Certificate;
        $r1 = staticinvoke <sun.security.x509.X509CertImpl: java.util.Collection getSubjectAlternativeNames(java.security.cert.X509Certificate)>(r0);
        return $r1;
    }

    public java.util.Collection getIssuerAlternativeNames() throws java.security.cert.CertificateParsingException
    {
        java.security.cert.X509Certificate r0;
        java.util.Collection $r1;

        r0 := @this: java.security.cert.X509Certificate;
        $r1 = staticinvoke <sun.security.x509.X509CertImpl: java.util.Collection getIssuerAlternativeNames(java.security.cert.X509Certificate)>(r0);
        return $r1;
    }
}
