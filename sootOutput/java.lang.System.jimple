public final class java.lang.System extends java.lang.Object
{
    public static final java.io.InputStream in;
    public static final java.io.PrintStream out;
    public static final java.io.PrintStream err;
    private static volatile java.lang.SecurityManager security;
    private static volatile java.io.Console cons;
    private static java.util.Properties props;
    private static java.lang.String lineSeparator;

    private static native void registerNatives();

    private void <init>()
    {
        java.lang.System r0;

        r0 := @this: java.lang.System;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static void setIn(java.io.InputStream)
    {
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;
        staticinvoke <java.lang.System: void checkIO()>();
        staticinvoke <java.lang.System: void setIn0(java.io.InputStream)>(r0);
        return;
    }

    public static void setOut(java.io.PrintStream)
    {
        java.io.PrintStream r0;

        r0 := @parameter0: java.io.PrintStream;
        staticinvoke <java.lang.System: void checkIO()>();
        staticinvoke <java.lang.System: void setOut0(java.io.PrintStream)>(r0);
        return;
    }

    public static void setErr(java.io.PrintStream)
    {
        java.io.PrintStream r0;

        r0 := @parameter0: java.io.PrintStream;
        staticinvoke <java.lang.System: void checkIO()>();
        staticinvoke <java.lang.System: void setErr0(java.io.PrintStream)>(r0);
        return;
    }

    public static java.io.Console console()
    {
        java.io.Console $r0, $r5, $r7;
        java.lang.Class r1, $r3;
        java.lang.Throwable r2, $r6;
        sun.misc.JavaIOAccess $r4;

        $r0 = <java.lang.System: java.io.Console cons>;
        if $r0 != null goto label5;

        $r3 = class "java/lang/System";
        r1 = $r3;
        entermonitor $r3;

     label0:
        $r4 = staticinvoke <sun.misc.SharedSecrets: sun.misc.JavaIOAccess getJavaIOAccess()>();
        $r5 = interfaceinvoke $r4.<sun.misc.JavaIOAccess: java.io.Console console()>();
        <java.lang.System: java.io.Console cons> = $r5;
        exitmonitor r1;

     label1:
        goto label5;

     label2:
        $r6 := @caughtexception;

     label3:
        r2 = $r6;
        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r7 = <java.lang.System: java.io.Console cons>;
        return $r7;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public static java.nio.channels.Channel inheritedChannel() throws java.io.IOException
    {
        java.nio.channels.spi.SelectorProvider $r0;
        java.nio.channels.Channel $r1;

        $r0 = staticinvoke <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>();
        $r1 = virtualinvoke $r0.<java.nio.channels.spi.SelectorProvider: java.nio.channels.Channel inheritedChannel()>();
        return $r1;
    }

    private static void checkIO()
    {
        java.lang.SecurityManager r0;
        java.lang.RuntimePermission $r1;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r0 == null goto label0;

        $r1 = new java.lang.RuntimePermission;
        specialinvoke $r1.<java.lang.RuntimePermission: void <init>(java.lang.String)>("setIO");
        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r1);

     label0:
        return;
    }

    private static native void setIn0(java.io.InputStream);

    private static native void setOut0(java.io.PrintStream);

    private static native void setErr0(java.io.PrintStream);

    public static void setSecurityManager(java.lang.SecurityManager)
    {
        java.lang.SecurityManager r0;
        java.lang.Exception r1, $r2;

        r0 := @parameter0: java.lang.SecurityManager;

     label0:
        virtualinvoke r0.<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>("java.lang");

     label1:
        goto label3;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;

     label3:
        staticinvoke <java.lang.System: void setSecurityManager0(java.lang.SecurityManager)>(r0);
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    private static synchronized void setSecurityManager0(java.lang.SecurityManager)
    {
        java.lang.SecurityManager r0, r1;
        java.lang.RuntimePermission $r2;
        java.lang.Class $r3;
        java.lang.ClassLoader $r4;
        java.lang.System$1 $r5;

        r0 := @parameter0: java.lang.SecurityManager;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = new java.lang.RuntimePermission;
        specialinvoke $r2.<java.lang.RuntimePermission: void <init>(java.lang.String)>("setSecurityManager");
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label0:
        if r0 == null goto label1;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        if $r4 == null goto label1;

        $r5 = new java.lang.System$1;
        specialinvoke $r5.<java.lang.System$1: void <init>(java.lang.SecurityManager)>(r0);
        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r5);

     label1:
        <java.lang.System: java.lang.SecurityManager security> = r0;
        return;
    }

    public static java.lang.SecurityManager getSecurityManager()
    {
        java.lang.SecurityManager $r0;

        $r0 = <java.lang.System: java.lang.SecurityManager security>;
        return $r0;
    }

    public static native long currentTimeMillis();

    public static native long nanoTime();

    public static native void arraycopy(java.lang.Object, int, java.lang.Object, int, int);

    public static native int identityHashCode(java.lang.Object);

    private static native java.util.Properties initProperties(java.util.Properties);

    public static java.util.Properties getProperties()
    {
        java.lang.SecurityManager r0;
        java.util.Properties $r1;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r0 == null goto label0;

        virtualinvoke r0.<java.lang.SecurityManager: void checkPropertiesAccess()>();

     label0:
        $r1 = <java.lang.System: java.util.Properties props>;
        return $r1;
    }

    public static java.lang.String lineSeparator()
    {
        java.lang.String $r0;

        $r0 = <java.lang.System: java.lang.String lineSeparator>;
        return $r0;
    }

    public static void setProperties(java.util.Properties)
    {
        java.util.Properties r0, $r2;
        java.lang.SecurityManager r1;

        r0 := @parameter0: java.util.Properties;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        virtualinvoke r1.<java.lang.SecurityManager: void checkPropertiesAccess()>();

     label0:
        if r0 != null goto label1;

        $r2 = new java.util.Properties;
        specialinvoke $r2.<java.util.Properties: void <init>()>();
        r0 = $r2;
        staticinvoke <java.lang.System: java.util.Properties initProperties(java.util.Properties)>(r0);

     label1:
        <java.lang.System: java.util.Properties props> = r0;
        return;
    }

    public static java.lang.String getProperty(java.lang.String)
    {
        java.lang.String r0, $r3;
        java.lang.SecurityManager r1;
        java.util.Properties $r2;

        r0 := @parameter0: java.lang.String;
        staticinvoke <java.lang.System: void checkKey(java.lang.String)>(r0);
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        virtualinvoke r1.<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>(r0);

     label0:
        $r2 = <java.lang.System: java.util.Properties props>;
        $r3 = virtualinvoke $r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r0);
        return $r3;
    }

    public static java.lang.String getProperty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r4;
        java.lang.SecurityManager r2;
        java.util.Properties $r3;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        staticinvoke <java.lang.System: void checkKey(java.lang.String)>(r0);
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label0;

        virtualinvoke r2.<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>(r0);

     label0:
        $r3 = <java.lang.System: java.util.Properties props>;
        $r4 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>(r0, r1);
        return $r4;
    }

    public static java.lang.String setProperty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r6;
        java.lang.SecurityManager r2;
        java.util.PropertyPermission $r3;
        java.util.Properties $r4;
        java.lang.Object $r5;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        staticinvoke <java.lang.System: void checkKey(java.lang.String)>(r0);
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label0;

        $r3 = new java.util.PropertyPermission;
        specialinvoke $r3.<java.util.PropertyPermission: void <init>(java.lang.String,java.lang.String)>(r0, "write");
        virtualinvoke r2.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r3);

     label0:
        $r4 = <java.lang.System: java.util.Properties props>;
        $r5 = virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>(r0, r1);
        $r6 = (java.lang.String) $r5;
        return $r6;
    }

    public static java.lang.String clearProperty(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.SecurityManager r1;
        java.util.PropertyPermission $r2;
        java.util.Properties $r3;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.String;
        staticinvoke <java.lang.System: void checkKey(java.lang.String)>(r0);
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = new java.util.PropertyPermission;
        specialinvoke $r2.<java.util.PropertyPermission: void <init>(java.lang.String,java.lang.String)>(r0, "write");
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label0:
        $r3 = <java.lang.System: java.util.Properties props>;
        $r4 = virtualinvoke $r3.<java.util.Properties: java.lang.Object remove(java.lang.Object)>(r0);
        $r5 = (java.lang.String) $r4;
        return $r5;
    }

    private static void checkKey(java.lang.String)
    {
        java.lang.String r0;
        java.lang.NullPointerException $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.lang.String;
        if r0 != null goto label0;

        $r1 = new java.lang.NullPointerException;
        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("key can\'t be null");
        throw $r1;

     label0:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("");
        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key can\'t be empty");
        throw $r2;

     label1:
        return;
    }

    public static java.lang.String getenv(java.lang.String)
    {
        java.lang.String r0, $r6, $r7;
        java.lang.SecurityManager r1;
        java.lang.RuntimePermission $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = new java.lang.RuntimePermission;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getenv.");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.lang.RuntimePermission: void <init>(java.lang.String)>($r6);
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label0:
        $r7 = staticinvoke <java.lang.ProcessEnvironment: java.lang.String getenv(java.lang.String)>(r0);
        return $r7;
    }

    public static java.util.Map getenv()
    {
        java.lang.SecurityManager r0;
        java.lang.RuntimePermission $r1;
        java.util.Map $r2;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r0 == null goto label0;

        $r1 = new java.lang.RuntimePermission;
        specialinvoke $r1.<java.lang.RuntimePermission: void <init>(java.lang.String)>("getenv.*");
        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r1);

     label0:
        $r2 = staticinvoke <java.lang.ProcessEnvironment: java.util.Map getenv()>();
        return $r2;
    }

    public static void exit(int)
    {
        int i0;
        java.lang.Runtime $r0;

        i0 := @parameter0: int;
        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
        virtualinvoke $r0.<java.lang.Runtime: void exit(int)>(i0);
        return;
    }

    public static void gc()
    {
        java.lang.Runtime $r0;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
        virtualinvoke $r0.<java.lang.Runtime: void gc()>();
        return;
    }

    public static void runFinalization()
    {
        java.lang.Runtime $r0;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
        virtualinvoke $r0.<java.lang.Runtime: void runFinalization()>();
        return;
    }

    public static void runFinalizersOnExit(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;
        staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
        staticinvoke <java.lang.Runtime: void runFinalizersOnExit(boolean)>(z0);
        return;
    }

    public static void load(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Runtime $r1;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
        $r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        virtualinvoke $r1.<java.lang.Runtime: void load0(java.lang.Class,java.lang.String)>($r2, r0);
        return;
    }

    public static void loadLibrary(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Runtime $r1;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
        $r2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();
        virtualinvoke $r1.<java.lang.Runtime: void loadLibrary0(java.lang.Class,java.lang.String)>($r2, r0);
        return;
    }

    public static native java.lang.String mapLibraryName(java.lang.String);

    private static void initializeSystemClass()
    {
        java.util.Properties $r0, $r6, $r8, $r9;
        java.io.FileDescriptor $r1, $r13, $r15;
        java.io.FileInputStream r2, $r11;
        java.io.FileOutputStream r3, r4, $r12, $r14;
        java.lang.Thread r5;
        java.lang.String $r10;
        java.io.BufferedInputStream $r16;
        java.io.PrintStream $r17, $r19;
        java.io.BufferedOutputStream $r18, $r20;
        java.lang.ThreadGroup $r21;

        $r0 = new java.util.Properties;
        specialinvoke $r0.<java.util.Properties: void <init>()>();
        <java.lang.System: java.util.Properties props> = $r0;
        $r6 = <java.lang.System: java.util.Properties props>;
        staticinvoke <java.lang.System: java.util.Properties initProperties(java.util.Properties)>($r6);
        $r8 = <java.lang.System: java.util.Properties props>;
        staticinvoke <sun.misc.VM: void saveAndRemoveProperties(java.util.Properties)>($r8);
        $r9 = <java.lang.System: java.util.Properties props>;
        $r10 = virtualinvoke $r9.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("line.separator");
        <java.lang.System: java.lang.String lineSeparator> = $r10;
        staticinvoke <sun.misc.Version: void init()>();
        $r11 = new java.io.FileInputStream;
        $r1 = <java.io.FileDescriptor: java.io.FileDescriptor in>;
        specialinvoke $r11.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r1);
        r2 = $r11;
        $r12 = new java.io.FileOutputStream;
        $r13 = <java.io.FileDescriptor: java.io.FileDescriptor out>;
        specialinvoke $r12.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>($r13);
        r3 = $r12;
        $r14 = new java.io.FileOutputStream;
        $r15 = <java.io.FileDescriptor: java.io.FileDescriptor err>;
        specialinvoke $r14.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>($r15);
        r4 = $r14;
        $r16 = new java.io.BufferedInputStream;
        specialinvoke $r16.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r2);
        staticinvoke <java.lang.System: void setIn0(java.io.InputStream)>($r16);
        $r17 = new java.io.PrintStream;
        $r18 = new java.io.BufferedOutputStream;
        specialinvoke $r18.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>(r3, 128);
        specialinvoke $r17.<java.io.PrintStream: void <init>(java.io.OutputStream,boolean)>($r18, 1);
        staticinvoke <java.lang.System: void setOut0(java.io.PrintStream)>($r17);
        $r19 = new java.io.PrintStream;
        $r20 = new java.io.BufferedOutputStream;
        specialinvoke $r20.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>(r4, 128);
        specialinvoke $r19.<java.io.PrintStream: void <init>(java.io.OutputStream,boolean)>($r20, 1);
        staticinvoke <java.lang.System: void setErr0(java.io.PrintStream)>($r19);
        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("zip");
        staticinvoke <java.lang.Terminator: void setup()>();
        staticinvoke <sun.misc.VM: void initializeOSEnvironment()>();
        r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $r21 = virtualinvoke r5.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();
        virtualinvoke $r21.<java.lang.ThreadGroup: void add(java.lang.Thread)>(r5);
        staticinvoke <java.lang.System: void setJavaLangAccess()>();
        staticinvoke <sun.misc.VM: void booted()>();
        return;
    }

    private static void setJavaLangAccess()
    {
        java.lang.System$2 $r0;

        $r0 = new java.lang.System$2;
        specialinvoke $r0.<java.lang.System$2: void <init>()>();
        staticinvoke <sun.misc.SharedSecrets: void setJavaLangAccess(sun.misc.JavaLangAccess)>($r0);
        return;
    }

    static void <clinit>()
    {
        staticinvoke <java.lang.System: void registerNatives()>();
        <java.lang.System: java.io.InputStream in> = null;
        <java.lang.System: java.io.PrintStream out> = null;
        <java.lang.System: java.io.PrintStream err> = null;
        <java.lang.System: java.lang.SecurityManager security> = null;
        <java.lang.System: java.io.Console cons> = null;
        return;
    }
}
