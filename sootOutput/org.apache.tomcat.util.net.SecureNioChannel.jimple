public class org.apache.tomcat.util.net.SecureNioChannel extends org.apache.tomcat.util.net.NioChannel
{
    protected static final org.apache.juli.logging.Log log;
    protected java.nio.ByteBuffer netInBuffer;
    protected java.nio.ByteBuffer netOutBuffer;
    protected javax.net.ssl.SSLEngine sslEngine;
    protected boolean handshakeComplete;
    protected javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus;
    protected boolean closed;
    protected boolean closing;
    protected org.apache.tomcat.util.net.NioSelectorPool pool;
    private static int[] $SWITCH_TABLE$javax$net$ssl$SSLEngineResult$HandshakeStatus;

    static void <clinit>()
    {
        org.apache.juli.logging.Log $r0;

        $r0 = staticinvoke <org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>(class "org/apache/tomcat/util/net/SecureNioChannel");
        <org.apache.tomcat.util.net.SecureNioChannel: org.apache.juli.logging.Log log> = $r0;
        return;
    }

    public void <init>(java.nio.channels.SocketChannel, javax.net.ssl.SSLEngine, org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler, org.apache.tomcat.util.net.NioSelectorPool) throws java.io.IOException
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        java.nio.channels.SocketChannel r1;
        javax.net.ssl.SSLEngine r2, $r5, $r7;
        org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler r3;
        org.apache.tomcat.util.net.NioSelectorPool r4;
        int i0, i1;
        javax.net.ssl.SSLSession $r6, $r8;
        java.nio.ByteBuffer $r9, $r10, $r11, $r12, $r13, $r15;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        r1 := @parameter0: java.nio.channels.SocketChannel;
        r2 := @parameter1: javax.net.ssl.SSLEngine;
        r3 := @parameter2: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler;
        r4 := @parameter3: org.apache.tomcat.util.net.NioSelectorPool;
        specialinvoke r0.<org.apache.tomcat.util.net.NioChannel: void <init>(java.nio.channels.SocketChannel,org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler)>(r1, r3);
        r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean handshakeComplete> = 0;
        r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean closed> = 0;
        r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean closing> = 0;
        r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngine sslEngine> = r2;
        $r5 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngine sslEngine>;
        $r6 = virtualinvoke $r5.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLSession getSession()>();
        i0 = interfaceinvoke $r6.<javax.net.ssl.SSLSession: int getApplicationBufferSize()>();
        $r7 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngine sslEngine>;
        $r8 = virtualinvoke $r7.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLSession getSession()>();
        i1 = interfaceinvoke $r8.<javax.net.ssl.SSLSession: int getPacketBufferSize()>();
        $r9 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        if $r9 != null goto label0;

        $r10 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i1);
        r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer> = $r10;

     label0:
        $r11 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        if $r11 != null goto label1;

        $r12 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i1);
        r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer> = $r12;

     label1:
        r0.<org.apache.tomcat.util.net.SecureNioChannel: org.apache.tomcat.util.net.NioSelectorPool pool> = r4;
        $r13 = interfaceinvoke r3.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getReadBuffer()>();
        interfaceinvoke r3.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer expand(java.nio.ByteBuffer,int)>($r13, i0);
        $r15 = interfaceinvoke r3.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getWriteBuffer()>();
        interfaceinvoke r3.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer expand(java.nio.ByteBuffer,int)>($r15, i0);
        virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: void reset()>();
        return;
    }

    public void reset(javax.net.ssl.SSLEngine) throws java.io.IOException
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        javax.net.ssl.SSLEngine r1;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        r1 := @parameter0: javax.net.ssl.SSLEngine;
        r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngine sslEngine> = r1;
        virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: void reset()>();
        return;
    }

    public void reset() throws java.io.IOException
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        java.nio.ByteBuffer $r1, $r3, $r5, $r7;
        javax.net.ssl.SSLEngine $r9, $r10;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r11;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        specialinvoke r0.<org.apache.tomcat.util.net.NioChannel: void reset()>();
        $r1 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);
        $r3 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(0);
        $r5 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);
        $r7 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(0);
        r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean handshakeComplete> = 0;
        r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean closed> = 0;
        r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean closing> = 0;
        $r9 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngine sslEngine>;
        virtualinvoke $r9.<javax.net.ssl.SSLEngine: void beginHandshake()>();
        $r10 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngine sslEngine>;
        $r11 = virtualinvoke $r10.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();
        r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus> = $r11;
        return;
    }

    public int getBufferSize()
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        int i0, $i2, i3, $i5, i6;
        java.nio.ByteBuffer $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        i0 = specialinvoke r0.<org.apache.tomcat.util.net.NioChannel: int getBufferSize()>();
        $r1 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        if $r1 == null goto label0;

        $r2 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        $i2 = virtualinvoke $r2.<java.nio.ByteBuffer: int capacity()>();
        goto label1;

     label0:
        $i2 = 0;

     label1:
        i3 = i0 + $i2;
        $r3 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        if $r3 == null goto label2;

        $r4 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        $i5 = virtualinvoke $r4.<java.nio.ByteBuffer: int capacity()>();
        goto label3;

     label2:
        $i5 = 0;

     label3:
        i6 = i3 + $i5;
        return i6;
    }

    public boolean flush(boolean, java.nio.channels.Selector, long) throws java.io.IOException
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        boolean z0, $z2, $z3;
        java.nio.channels.Selector r1;
        long l0;
        java.nio.ByteBuffer $r2, $r4, $r5;
        org.apache.tomcat.util.net.NioSelectorPool $r3;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        z0 := @parameter0: boolean;
        r1 := @parameter1: java.nio.channels.Selector;
        l0 := @parameter2: long;
        if z0 != 0 goto label0;

        $r2 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean flush(java.nio.ByteBuffer)>($r2);
        goto label1;

     label0:
        $r3 = r0.<org.apache.tomcat.util.net.SecureNioChannel: org.apache.tomcat.util.net.NioSelectorPool pool>;
        $r4 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        virtualinvoke $r3.<org.apache.tomcat.util.net.NioSelectorPool: int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)>($r4, r0, r1, l0, z0);

     label1:
        $r5 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        $z2 = virtualinvoke $r5.<java.nio.ByteBuffer: boolean hasRemaining()>();
        if $z2 == 0 goto label2;

        $z3 = 0;
        goto label3;

     label2:
        $z3 = 1;

     label3:
        return $z3;
    }

    protected boolean flush(java.nio.ByteBuffer) throws java.io.IOException
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        java.nio.ByteBuffer r1;
        int i0, i1;
        java.nio.channels.SocketChannel $r2;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        r1 := @parameter0: java.nio.ByteBuffer;
        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();
        if i0 <= 0 goto label1;

        $r2 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.channels.SocketChannel sc>;
        i1 = virtualinvoke $r2.<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)>(r1);
        if i1 < i0 goto label0;

        return 1;

     label0:
        return 0;

     label1:
        return 1;
    }

    public int handshake(boolean, boolean) throws java.io.IOException
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z9, $z10;
        null_type n0;
        javax.net.ssl.SSLException r1, $r9;
        java.nio.ByteBuffer $r2, $r7, $r21, $r30;
        int[] $r3;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r4, $r16, $r17, $r18, $r28, $r29, $r34, $r35, $r36, $r41, $r45, $r48;
        int $i0, $i1;
        java.io.IOException $r5, $r22, $r39;
        byte $b2;
        javax.net.ssl.SSLEngineResult r8, r31;
        org.apache.juli.logging.Log $r10, $r11;
        org.apache.tomcat.util.res.StringManager $r12;
        java.lang.String $r13, $r27, $r44, $r50;
        javax.net.ssl.SSLEngineResult$Status $r14, $r15, $r19, $r20, $r24, $r32, $r33, $r37, $r38;
        java.lang.StringBuilder $r23, $r25, $r26, $r40, $r42, $r43, $r47, $r49;
        java.lang.IllegalStateException $r46;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        z0 := @parameter0: boolean;
        z1 := @parameter1: boolean;
        $z2 = r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean handshakeComplete>;
        if $z2 == 0 goto label0;

        return 0;

     label0:
        $r2 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        $z3 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean flush(java.nio.ByteBuffer)>($r2);
        if $z3 != 0 goto label1;

        return 4;

     label1:
        n0 = null;
        goto label23;

     label2:
        $r3 = staticinvoke <org.apache.tomcat.util.net.SecureNioChannel: int[] $SWITCH_TABLE$javax$net$ssl$SSLEngineResult$HandshakeStatus()>();
        $r4 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus>;
        $i0 = virtualinvoke $r4.<javax.net.ssl.SSLEngineResult$HandshakeStatus: int ordinal()>();
        $i1 = $r3[$i0];
        tableswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label21;
            case 4: goto label9;
            case 5: goto label18;
            default: goto label22;
        };

     label3:
        $r5 = new java.io.IOException;
        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("NOT_HANDSHAKING during handshake");
        throw $r5;

     label4:
        $r7 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        $z4 = virtualinvoke $r7.<java.nio.ByteBuffer: boolean hasRemaining()>();
        if $z4 == 0 goto label5;

        $z5 = 0;
        goto label6;

     label5:
        $z5 = 1;

     label6:
        r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean handshakeComplete> = $z5;
        $z6 = r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean handshakeComplete>;
        if $z6 == 0 goto label7;

        $b2 = 0;
        goto label8;

     label7:
        $b2 = 4;

     label8:
        return $b2;

     label9:
        r8 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult handshakeWrap(boolean)>(z1);

     label10:
        goto label13;

     label11:
        $r9 := @caughtexception;
        r1 = $r9;
        $r10 = <org.apache.tomcat.util.net.SecureNioChannel: org.apache.juli.logging.Log log>;
        $z7 = interfaceinvoke $r10.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z7 == 0 goto label12;

        $r11 = <org.apache.tomcat.util.net.SecureNioChannel: org.apache.juli.logging.Log log>;
        $r12 = <org.apache.tomcat.util.net.SecureNioChannel: org.apache.tomcat.util.res.StringManager sm>;
        $r13 = virtualinvoke $r12.<org.apache.tomcat.util.res.StringManager: java.lang.String getString(java.lang.String)>("channel.nio.ssl.wrapException");
        interfaceinvoke $r11.<org.apache.juli.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r13, r1);

     label12:
        r8 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult handshakeWrap(boolean)>(z1);

     label13:
        $r14 = virtualinvoke r8.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>();
        $r15 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status OK>;
        if $r14 != $r15 goto label14;

        $r16 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus>;
        $r17 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_TASK>;
        if $r16 != $r17 goto label16;

        $r18 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()>();
        r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus> = $r18;
        goto label16;

     label14:
        $r19 = virtualinvoke r8.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>();
        $r20 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status CLOSED>;
        if $r19 != $r20 goto label15;

        $r21 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean flush(java.nio.ByteBuffer)>($r21);
        return -1;

     label15:
        $r22 = new java.io.IOException;
        $r23 = new java.lang.StringBuilder;
        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected status:");
        $r24 = virtualinvoke r8.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>();
        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" during handshake WRAP.");
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r27);
        throw $r22;

     label16:
        $r28 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus>;
        $r29 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_UNWRAP>;
        if $r28 != $r29 goto label17;

        $r30 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        $z9 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean flush(java.nio.ByteBuffer)>($r30);
        if $z9 != 0 goto label18;

     label17:
        return 4;

     label18:
        r31 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult handshakeUnwrap(boolean)>(z0);
        $r32 = virtualinvoke r31.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>();
        $r33 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status OK>;
        if $r32 != $r33 goto label19;

        $r34 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus>;
        $r35 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_TASK>;
        if $r34 != $r35 goto label23;

        $r36 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()>();
        r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus> = $r36;
        goto label23;

     label19:
        $r37 = virtualinvoke r31.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>();
        $r38 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_UNDERFLOW>;
        if $r37 != $r38 goto label20;

        return 1;

     label20:
        $r39 = new java.io.IOException;
        $r40 = new java.lang.StringBuilder;
        specialinvoke $r40.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid handshake status:");
        $r41 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus>;
        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r41);
        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" during handshake UNWRAP.");
        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r39.<java.io.IOException: void <init>(java.lang.String)>($r44);
        throw $r39;

     label21:
        $r45 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()>();
        r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus> = $r45;
        goto label23;

     label22:
        $r46 = new java.lang.IllegalStateException;
        $r47 = new java.lang.StringBuilder;
        specialinvoke $r47.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid handshake status:");
        $r48 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus>;
        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r48);
        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r46.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r50);
        throw $r46;

     label23:
        $z10 = r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean handshakeComplete>;
        if $z10 == 0 goto label2;

        return 0;

        catch javax.net.ssl.SSLException from label9 to label10 with label11;
    }

    public void rehandshake(long) throws java.io.IOException
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        long l0, l2, $l16, $l17;
        boolean z0, z1, z2;
        java.nio.channels.Selector r1;
        java.nio.channels.SelectionKey r2;
        int i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        java.lang.Class r3, $r29;
        java.lang.Throwable r4, $r30, $r40;
        java.lang.Exception r5, $r36, r37, $r41, $r42, r43, $r44, r45, $r46, r47;
        java.nio.ByteBuffer $r6, $r7, $r8, $r10, $r11, $r12, $r15, $r17, $r19, $r22, $r24, $r26;
        java.io.IOException $r9, $r13, $r20, $r27, $r34, r35, $r38, r39;
        org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler $r14, $r16, $r18, $r21, $r23, $r25;
        java.io.EOFException $r28;
        java.nio.channels.SocketChannel $r31;
        byte $b18;
        java.net.SocketTimeoutException $r33;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        l0 := @parameter0: long;
        $r6 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        $i3 = virtualinvoke $r6.<java.nio.ByteBuffer: int position()>();
        if $i3 <= 0 goto label0;

        $r7 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        $i4 = virtualinvoke $r7.<java.nio.ByteBuffer: int position()>();
        $r8 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        $i5 = virtualinvoke $r8.<java.nio.ByteBuffer: int limit()>();
        if $i4 >= $i5 goto label0;

        $r9 = new java.io.IOException;
        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Network input buffer still contains data. Handshake will fail.");
        throw $r9;

     label0:
        $r10 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        $i6 = virtualinvoke $r10.<java.nio.ByteBuffer: int position()>();
        if $i6 <= 0 goto label1;

        $r11 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        $i7 = virtualinvoke $r11.<java.nio.ByteBuffer: int position()>();
        $r12 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        $i8 = virtualinvoke $r12.<java.nio.ByteBuffer: int limit()>();
        if $i7 >= $i8 goto label1;

        $r13 = new java.io.IOException;
        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>("Network output buffer still contains data. Handshake will fail.");
        throw $r13;

     label1:
        $r14 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r15 = interfaceinvoke $r14.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getReadBuffer()>();
        $i9 = virtualinvoke $r15.<java.nio.ByteBuffer: int position()>();
        if $i9 <= 0 goto label2;

        $r16 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r17 = interfaceinvoke $r16.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getReadBuffer()>();
        $i10 = virtualinvoke $r17.<java.nio.ByteBuffer: int position()>();
        $r18 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r19 = interfaceinvoke $r18.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getReadBuffer()>();
        $i11 = virtualinvoke $r19.<java.nio.ByteBuffer: int limit()>();
        if $i10 >= $i11 goto label2;

        $r20 = new java.io.IOException;
        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>("Application input buffer still contains data. Data would have been lost.");
        throw $r20;

     label2:
        $r21 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r22 = interfaceinvoke $r21.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getWriteBuffer()>();
        $i12 = virtualinvoke $r22.<java.nio.ByteBuffer: int position()>();
        if $i12 <= 0 goto label3;

        $r23 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r24 = interfaceinvoke $r23.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getWriteBuffer()>();
        $i13 = virtualinvoke $r24.<java.nio.ByteBuffer: int position()>();
        $r25 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()>();
        $r26 = interfaceinvoke $r25.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getWriteBuffer()>();
        $i14 = virtualinvoke $r26.<java.nio.ByteBuffer: int limit()>();
        if $i13 >= $i14 goto label3;

        $r27 = new java.io.IOException;
        specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>("Application output buffer still contains data. Data would have been lost.");
        throw $r27;

     label3:
        virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: void reset()>();
        z0 = 1;
        z1 = 1;
        z2 = 1;
        r1 = null;
        r2 = null;

     label4:
        goto label18;

     label5:
        i1 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: int handshake(boolean,boolean)>(z0, z1);
        tableswitch(i1)
        {
            case -1: goto label6;
            case 0: goto label7;
            default: goto label8;
        };

     label6:
        $r28 = new java.io.EOFException;
        specialinvoke $r28.<java.io.EOFException: void <init>(java.lang.String)>("EOF during handshake.");
        throw $r28;

     label7:
        z2 = 0;
        goto label18;

     label8:
        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        if r1 != null goto label15;

        $r29 = class "java/nio/channels/Selector";
        r3 = $r29;
        entermonitor $r29;

     label9:
        r1 = staticinvoke <java.nio.channels.Selector: java.nio.channels.Selector open()>();
        exitmonitor r3;

     label10:
        goto label14;

     label11:
        $r30 := @caughtexception;

     label12:
        exitmonitor r3;

     label13:
        throw $r30;

     label14:
        $r31 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.channels.SocketChannel getIOChannel()>();
        r2 = virtualinvoke $r31.<java.nio.channels.SocketChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>(r1, i1);
        goto label16;

     label15:
        virtualinvoke r2.<java.nio.channels.SelectionKey: java.nio.channels.SelectionKey interestOps(int)>(i1);

     label16:
        i15 = virtualinvoke r1.<java.nio.channels.Selector: int select(long)>(l0);
        if i15 != 0 goto label17;

        $l16 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l17 = $l16 - l2;
        $b18 = $l17 cmp l0;
        if $b18 < 0 goto label17;

        $r33 = new java.net.SocketTimeoutException;
        specialinvoke $r33.<java.net.SocketTimeoutException: void <init>(java.lang.String)>("Handshake operation timed out.");
        throw $r33;

     label17:
        z0 = virtualinvoke r2.<java.nio.channels.SelectionKey: boolean isReadable()>();
        z1 = virtualinvoke r2.<java.nio.channels.SelectionKey: boolean isWritable()>();

     label18:
        if z2 != 0 goto label5;

     label19:
        goto label31;

     label20:
        $r34 := @caughtexception;
        r35 = $r34;
        throw r35;

     label21:
        $r36 := @caughtexception;
        r37 = $r36;
        $r38 = new java.io.IOException;
        specialinvoke $r38.<java.io.IOException: void <init>(java.lang.Throwable)>(r37);
        r39 = $r38;
        throw r39;

     label22:
        $r40 := @caughtexception;
        r4 = $r40;
        if r2 == null goto label26;

     label23:
        virtualinvoke r2.<java.nio.channels.SelectionKey: void cancel()>();

     label24:
        goto label26;

     label25:
        $r41 := @caughtexception;
        r5 = $r41;

     label26:
        if r1 == null goto label30;

     label27:
        virtualinvoke r1.<java.nio.channels.Selector: void close()>();

     label28:
        goto label30;

     label29:
        $r42 := @caughtexception;
        r43 = $r42;

     label30:
        throw r4;

     label31:
        if r2 == null goto label35;

     label32:
        virtualinvoke r2.<java.nio.channels.SelectionKey: void cancel()>();

     label33:
        goto label35;

     label34:
        $r44 := @caughtexception;
        r45 = $r44;

     label35:
        if r1 == null goto label39;

     label36:
        virtualinvoke r1.<java.nio.channels.Selector: void close()>();

     label37:
        goto label39;

     label38:
        $r46 := @caughtexception;
        r47 = $r46;

     label39:
        return;

        catch java.lang.Throwable from label9 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.io.IOException from label4 to label19 with label20;
        catch java.lang.Exception from label4 to label19 with label21;
        catch java.lang.Throwable from label4 to label22 with label22;
        catch java.lang.Exception from label23 to label24 with label25;
        catch java.lang.Exception from label27 to label28 with label29;
        catch java.lang.Exception from label32 to label33 with label34;
        catch java.lang.Exception from label36 to label37 with label38;
    }

    protected javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        null_type n0;
        javax.net.ssl.SSLEngine $r1, $r4;
        java.lang.Runnable $r2, r3;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r5;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        n0 = null;
        goto label1;

     label0:
        interfaceinvoke r3.<java.lang.Runnable: void run()>();

     label1:
        $r1 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngine sslEngine>;
        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLEngine: java.lang.Runnable getDelegatedTask()>();
        r3 = $r2;
        if $r2 != null goto label0;

        $r4 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngine sslEngine>;
        $r5 = virtualinvoke $r4.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();
        return $r5;
    }

    protected javax.net.ssl.SSLEngineResult handshakeWrap(boolean) throws java.io.IOException
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        boolean z0;
        javax.net.ssl.SSLEngineResult r1;
        java.nio.ByteBuffer $r2, $r6, $r7, $r8, $r11;
        javax.net.ssl.SSLEngine $r4;
        org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler $r5;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r10;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        z0 := @parameter0: boolean;
        $r2 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();
        $r4 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngine sslEngine>;
        $r5 = r0.<org.apache.tomcat.util.net.SecureNioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler bufHandler>;
        $r6 = interfaceinvoke $r5.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getWriteBuffer()>();
        $r7 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        r1 = virtualinvoke $r4.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>($r6, $r7);
        $r8 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        $r10 = virtualinvoke r1.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();
        r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus> = $r10;
        if z0 == 0 goto label0;

        $r11 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean flush(java.nio.ByteBuffer)>($r11);

     label0:
        return r1;
    }

    protected javax.net.ssl.SSLEngineResult handshakeUnwrap(boolean) throws java.io.IOException
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        boolean z0, z1, $z2, z3;
        int i0, $i1, $i2;
        java.nio.ByteBuffer $r1, $r2, $r3, $r6, $r8, $r11, $r13, $r15;
        java.nio.channels.SocketChannel $r5;
        java.io.IOException $r7;
        javax.net.ssl.SSLEngine $r10;
        org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler $r12;
        javax.net.ssl.SSLEngineResult r14;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r17, $r20, $r21, $r22, $r25, $r26;
        javax.net.ssl.SSLEngineResult$Status $r18, $r19, $r23, $r24;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        z0 := @parameter0: boolean;
        $r1 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();
        $r2 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        $i2 = virtualinvoke $r2.<java.nio.ByteBuffer: int limit()>();
        if $i1 != $i2 goto label0;

        $r3 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label0:
        if z0 == 0 goto label1;

        $r5 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.channels.SocketChannel sc>;
        $r6 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        i0 = virtualinvoke $r5.<java.nio.channels.SocketChannel: int read(java.nio.ByteBuffer)>($r6);
        if i0 != -1 goto label1;

        $r7 = new java.io.IOException;
        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("EOF encountered during handshake.");
        throw $r7;

     label1:
        z1 = 0;

     label2:
        $r8 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        $r10 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngine sslEngine>;
        $r11 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        $r12 = r0.<org.apache.tomcat.util.net.SecureNioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler bufHandler>;
        $r13 = interfaceinvoke $r12.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getReadBuffer()>();
        r14 = virtualinvoke $r10.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>($r11, $r13);
        $r15 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        virtualinvoke $r15.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>();
        $r17 = virtualinvoke r14.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();
        r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus> = $r17;
        $r18 = virtualinvoke r14.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>();
        $r19 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status OK>;
        if $r18 != $r19 goto label3;

        $r20 = virtualinvoke r14.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();
        $r21 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_TASK>;
        if $r20 != $r21 goto label3;

        $r22 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()>();
        r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus> = $r22;

     label3:
        $r23 = virtualinvoke r14.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>();
        $r24 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status OK>;
        if $r23 != $r24 goto label4;

        $r25 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus handshakeStatus>;
        $r26 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_UNWRAP>;
        if $r25 != $r26 goto label4;

        $z2 = 1;
        goto label5;

     label4:
        $z2 = 0;

     label5:
        z3 = $z2;
        if z3 != 0 goto label2;

        return r14;
    }

    public void close() throws java.io.IOException
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        javax.net.ssl.SSLEngineResult r1;
        boolean $z0, $z1, $z3, $z4;
        javax.net.ssl.SSLEngine $r2, $r7;
        java.nio.ByteBuffer $r3, $r5, $r8, $r9, $r13, $r15, $r17;
        java.io.IOException $r4, $r12;
        javax.net.ssl.SSLEngineResult$Status $r10, $r11;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r18, $r19;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        $z0 = r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean closing>;
        if $z0 == 0 goto label0;

        return;

     label0:
        r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean closing> = 1;
        $r2 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngine sslEngine>;
        virtualinvoke $r2.<javax.net.ssl.SSLEngine: void closeOutbound()>();
        $r3 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        $z1 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean flush(java.nio.ByteBuffer)>($r3);
        if $z1 != 0 goto label1;

        $r4 = new java.io.IOException;
        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Remaining data in the network buffer, can\'t send SSL close message, force a close with close(true) instead");
        throw $r4;

     label1:
        $r5 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.Buffer clear()>();
        $r7 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngine sslEngine>;
        $r8 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer getEmptyBuf()>();
        $r9 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        r1 = virtualinvoke $r7.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>($r8, $r9);
        $r10 = virtualinvoke r1.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>();
        $r11 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status CLOSED>;
        if $r10 == $r11 goto label2;

        $r12 = new java.io.IOException;
        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("Invalid close state, will not send network data.");
        throw $r12;

     label2:
        $r13 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        virtualinvoke $r13.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        $r15 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean flush(java.nio.ByteBuffer)>($r15);
        $r17 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        $z3 = virtualinvoke $r17.<java.nio.ByteBuffer: boolean hasRemaining()>();
        if $z3 != 0 goto label3;

        $r18 = virtualinvoke r1.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();
        $r19 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP>;
        if $r18 == $r19 goto label3;

        $z4 = 1;
        goto label4;

     label3:
        $z4 = 0;

     label4:
        r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean closed> = $z4;
        return;
    }

    public void close(boolean) throws java.io.IOException
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        boolean z0, $z1, $z2;
        java.lang.Throwable r1, $r2;
        java.nio.channels.SocketChannel $r3, $r5, $r6, $r8;
        java.net.Socket $r4, $r7;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        z0 := @parameter0: boolean;

     label0:
        virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: void close()>();
        goto label4;

     label1:
        $r2 := @caughtexception;
        r1 = $r2;
        if z0 != 0 goto label2;

        $z1 = r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean closed>;
        if $z1 == 0 goto label3;

     label2:
        r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean closed> = 1;
        $r3 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.channels.SocketChannel sc>;
        $r4 = virtualinvoke $r3.<java.nio.channels.SocketChannel: java.net.Socket socket()>();
        virtualinvoke $r4.<java.net.Socket: void close()>();
        $r5 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.channels.SocketChannel sc>;
        virtualinvoke $r5.<java.nio.channels.SocketChannel: void close()>();

     label3:
        throw r1;

     label4:
        if z0 != 0 goto label5;

        $z2 = r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean closed>;
        if $z2 == 0 goto label6;

     label5:
        r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean closed> = 1;
        $r6 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.channels.SocketChannel sc>;
        $r7 = virtualinvoke $r6.<java.nio.channels.SocketChannel: java.net.Socket socket()>();
        virtualinvoke $r7.<java.net.Socket: void close()>();
        $r8 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.channels.SocketChannel sc>;
        virtualinvoke $r8.<java.nio.channels.SocketChannel: void close()>();

     label6:
        return;

        catch java.lang.Throwable from label0 to label1 with label1;
    }

    public int read(java.nio.ByteBuffer) throws java.io.IOException
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        java.nio.ByteBuffer r1, $r4, $r8, $r9, $r12, $r13, $r31;
        int i0, i1, $i2, $i3;
        javax.net.ssl.SSLEngineResult r2;
        org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler $r3;
        java.lang.IllegalArgumentException $r5;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r6;
        java.nio.channels.SocketChannel $r7;
        javax.net.ssl.SSLEngine $r11;
        javax.net.ssl.SSLEngineResult$Status $r15, $r16, $r17, $r18, $r22, $r23, $r24, $r25, $r28;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r19, $r20;
        java.io.IOException $r26;
        java.lang.StringBuilder $r27, $r29;
        java.lang.String $r30;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        r1 := @parameter0: java.nio.ByteBuffer;
        $r3 = r0.<org.apache.tomcat.util.net.SecureNioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler bufHandler>;
        $r4 = interfaceinvoke $r3.<org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler: java.nio.ByteBuffer getReadBuffer()>();
        if r1 == $r4 goto label0;

        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You can only read using the application read buffer provided by the handler.");
        throw $r5;

     label0:
        $z0 = r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean closing>;
        if $z0 != 0 goto label1;

        $z1 = r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean closed>;
        if $z1 == 0 goto label2;

     label1:
        return -1;

     label2:
        $z2 = r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean handshakeComplete>;
        if $z2 != 0 goto label3;

        $r6 = new java.lang.IllegalStateException;
        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Handshake incomplete, you must complete handshake before reading data.");
        throw $r6;

     label3:
        $r7 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.channels.SocketChannel sc>;
        $r8 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        i0 = virtualinvoke $r7.<java.nio.channels.SocketChannel: int read(java.nio.ByteBuffer)>($r8);
        if i0 != -1 goto label4;

        return -1;

     label4:
        i1 = 0;

     label5:
        $r9 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        virtualinvoke $r9.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        $r11 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngine sslEngine>;
        $r12 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        r2 = virtualinvoke $r11.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>($r12, r1);
        $r13 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        virtualinvoke $r13.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>();
        $r15 = virtualinvoke r2.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>();
        $r16 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status OK>;
        if $r15 == $r16 goto label6;

        $r17 = virtualinvoke r2.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>();
        $r18 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_UNDERFLOW>;
        if $r17 != $r18 goto label8;

     label6:
        $i2 = virtualinvoke r2.<javax.net.ssl.SSLEngineResult: int bytesProduced()>();
        i1 = i1 + $i2;
        $r19 = virtualinvoke r2.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();
        $r20 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_TASK>;
        if $r19 != $r20 goto label7;

        virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()>();

     label7:
        $r22 = virtualinvoke r2.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>();
        $r23 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_UNDERFLOW>;
        if $r22 != $r23 goto label10;

        goto label11;

     label8:
        $r24 = virtualinvoke r2.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>();
        $r25 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW>;
        if $r24 != $r25 goto label9;

        if i1 <= 0 goto label9;

        goto label11;

     label9:
        $r26 = new java.io.IOException;
        $r27 = new java.lang.StringBuilder;
        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to unwrap data, invalid status: ");
        $r28 = virtualinvoke r2.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>();
        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r26.<java.io.IOException: void <init>(java.lang.String)>($r30);
        throw $r26;

     label10:
        $r31 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netInBuffer>;
        $i3 = virtualinvoke $r31.<java.nio.ByteBuffer: int position()>();
        if $i3 != 0 goto label5;

     label11:
        return i1;
    }

    public int write(java.nio.ByteBuffer) throws java.io.IOException
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        java.nio.ByteBuffer r1, $r3, $r6, $r7, $r10, $r11, $r23;
        int i0, i2;
        javax.net.ssl.SSLEngineResult r2;
        java.nio.channels.SocketChannel $r4;
        boolean $z0, $z1, $z2;
        java.io.IOException $r5, $r18;
        byte b1;
        javax.net.ssl.SSLEngine $r9;
        javax.net.ssl.SSLEngineResult$Status $r13, $r14, $r20;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r15, $r16;
        java.lang.StringBuilder $r19, $r21;
        java.lang.String $r22;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        r1 := @parameter0: java.nio.ByteBuffer;
        virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: void checkInterruptStatus()>();
        $r3 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        if r1 != $r3 goto label0;

        $r4 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.channels.SocketChannel sc>;
        i0 = virtualinvoke $r4.<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)>(r1);
        return i0;

     label0:
        $z0 = r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean closing>;
        if $z0 != 0 goto label1;

        $z1 = r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean closed>;
        if $z1 == 0 goto label2;

     label1:
        $r5 = new java.io.IOException;
        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Channel is in closing state.");
        throw $r5;

     label2:
        b1 = 0;
        $r6 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        $z2 = virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean flush(java.nio.ByteBuffer)>($r6);
        if $z2 != 0 goto label3;

        return b1;

     label3:
        $r7 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer clear()>();
        $r9 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngine sslEngine>;
        $r10 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        r2 = virtualinvoke $r9.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>(r1, $r10);
        i2 = virtualinvoke r2.<javax.net.ssl.SSLEngineResult: int bytesConsumed()>();
        $r11 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        $r13 = virtualinvoke r2.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>();
        $r14 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status OK>;
        if $r13 != $r14 goto label4;

        $r15 = virtualinvoke r2.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();
        $r16 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_TASK>;
        if $r15 != $r16 goto label5;

        virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()>();
        goto label5;

     label4:
        $r18 = new java.io.IOException;
        $r19 = new java.lang.StringBuilder;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to wrap data, invalid engine state: ");
        $r20 = virtualinvoke r2.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>();
        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r22);
        throw $r18;

     label5:
        $r23 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean flush(java.nio.ByteBuffer)>($r23);
        return i2;
    }

    public int getOutboundRemaining()
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        java.nio.ByteBuffer $r1;
        int $i0;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        $r1 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();
        return $i0;
    }

    public boolean flushOutbound() throws java.io.IOException
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        int i0, i1;
        java.nio.ByteBuffer $r1, $r2, $r3;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        $r1 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();
        $r2 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        virtualinvoke r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean flush(java.nio.ByteBuffer)>($r2);
        $r3 = r0.<org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer netOutBuffer>;
        i1 = virtualinvoke $r3.<java.nio.ByteBuffer: int remaining()>();
        if i1 >= i0 goto label0;

        return 1;

     label0:
        return 0;
    }

    public org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler $r1;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        $r1 = r0.<org.apache.tomcat.util.net.SecureNioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler bufHandler>;
        return $r1;
    }

    public boolean isHandshakeComplete()
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        $z0 = r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean handshakeComplete>;
        return $z0;
    }

    public boolean isClosing()
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        $z0 = r0.<org.apache.tomcat.util.net.SecureNioChannel: boolean closing>;
        return $z0;
    }

    public javax.net.ssl.SSLEngine getSslEngine()
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        javax.net.ssl.SSLEngine $r1;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        $r1 = r0.<org.apache.tomcat.util.net.SecureNioChannel: javax.net.ssl.SSLEngine sslEngine>;
        return $r1;
    }

    public java.nio.ByteBuffer getEmptyBuf()
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        java.nio.ByteBuffer $r1;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        $r1 = <org.apache.tomcat.util.net.SecureNioChannel: java.nio.ByteBuffer emptyBuf>;
        return $r1;
    }

    public void setBufHandler(org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler)
    {
        org.apache.tomcat.util.net.SecureNioChannel r0;
        org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler r1;

        r0 := @this: org.apache.tomcat.util.net.SecureNioChannel;
        r1 := @parameter0: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler;
        r0.<org.apache.tomcat.util.net.SecureNioChannel: org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler bufHandler> = r1;
        return;
    }

    static int[] $SWITCH_TABLE$javax$net$ssl$SSLEngineResult$HandshakeStatus()
    {
        int[] $r0, r1;
        javax.net.ssl.SSLEngineResult$HandshakeStatus[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r3, $r5, $r7, $r9, $r11;
        java.lang.NoSuchFieldError $r4, $r6, $r8, $r10, $r12;

        $r0 = <org.apache.tomcat.util.net.SecureNioChannel: int[] $SWITCH_TABLE$javax$net$ssl$SSLEngineResult$HandshakeStatus>;
        if $r0 == null goto label0;

        return $r0;

     label0:
        $r2 = staticinvoke <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus[] values()>();
        $i0 = lengthof $r2;
        r1 = newarray (int)[$i0];

     label1:
        $r3 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus FINISHED>;
        $i1 = virtualinvoke $r3.<javax.net.ssl.SSLEngineResult$HandshakeStatus: int ordinal()>();
        r1[$i1] = 2;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r5 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_TASK>;
        $i2 = virtualinvoke $r5.<javax.net.ssl.SSLEngineResult$HandshakeStatus: int ordinal()>();
        r1[$i2] = 3;

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

     label7:
        $r7 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_UNWRAP>;
        $i3 = virtualinvoke $r7.<javax.net.ssl.SSLEngineResult$HandshakeStatus: int ordinal()>();
        r1[$i3] = 5;

     label8:
        goto label10;

     label9:
        $r8 := @caughtexception;

     label10:
        $r9 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP>;
        $i4 = virtualinvoke $r9.<javax.net.ssl.SSLEngineResult$HandshakeStatus: int ordinal()>();
        r1[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r10 := @caughtexception;

     label13:
        $r11 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING>;
        $i5 = virtualinvoke $r11.<javax.net.ssl.SSLEngineResult$HandshakeStatus: int ordinal()>();
        r1[$i5] = 1;

     label14:
        goto label16;

     label15:
        $r12 := @caughtexception;

     label16:
        <org.apache.tomcat.util.net.SecureNioChannel: int[] $SWITCH_TABLE$javax$net$ssl$SSLEngineResult$HandshakeStatus> = r1;
        return r1;

        catch java.lang.NoSuchFieldError from label1 to label2 with label3;
        catch java.lang.NoSuchFieldError from label4 to label5 with label6;
        catch java.lang.NoSuchFieldError from label7 to label8 with label9;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
    }
}
