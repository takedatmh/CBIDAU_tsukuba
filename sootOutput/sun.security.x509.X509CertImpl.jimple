public class sun.security.x509.X509CertImpl extends java.security.cert.X509Certificate implements sun.security.util.DerEncoder
{
    private static final long serialVersionUID;
    private static final java.lang.String DOT;
    public static final java.lang.String NAME;
    public static final java.lang.String INFO;
    public static final java.lang.String ALG_ID;
    public static final java.lang.String SIGNATURE;
    public static final java.lang.String SIGNED_CERT;
    public static final java.lang.String SUBJECT_DN;
    public static final java.lang.String ISSUER_DN;
    public static final java.lang.String SERIAL_ID;
    public static final java.lang.String PUBLIC_KEY;
    public static final java.lang.String VERSION;
    public static final java.lang.String SIG_ALG;
    public static final java.lang.String SIG;
    private boolean readOnly;
    private byte[] signedCert;
    protected sun.security.x509.X509CertInfo info;
    protected sun.security.x509.AlgorithmId algId;
    protected byte[] signature;
    private static final java.lang.String KEY_USAGE_OID;
    private static final java.lang.String EXTENDED_KEY_USAGE_OID;
    private static final java.lang.String BASIC_CONSTRAINT_OID;
    private static final java.lang.String SUBJECT_ALT_NAME_OID;
    private static final java.lang.String ISSUER_ALT_NAME_OID;
    private static final java.lang.String AUTH_INFO_ACCESS_OID;
    private static final int NUM_STANDARD_KEY_USAGE;
    private java.util.Collection subjectAlternativeNames;
    private java.util.Collection issuerAlternativeNames;
    private java.util.List extKeyUsage;
    private java.util.Set authInfoAccess;
    private java.security.PublicKey verifiedPublicKey;
    private java.lang.String verifiedProvider;
    private boolean verificationResult;

    public void <init>()
    {
        sun.security.x509.X509CertImpl r0;

        r0 := @this: sun.security.x509.X509CertImpl;
        specialinvoke r0.<java.security.cert.X509Certificate: void <init>()>();
        r0.<sun.security.x509.X509CertImpl: boolean readOnly> = 0;
        r0.<sun.security.x509.X509CertImpl: byte[] signedCert> = null;
        r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info> = null;
        r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId> = null;
        r0.<sun.security.x509.X509CertImpl: byte[] signature> = null;
        return;
    }

    public void <init>(byte[]) throws java.security.cert.CertificateException
    {
        sun.security.x509.X509CertImpl r0;
        byte[] r1;
        java.io.IOException r2, $r4;
        sun.security.util.DerValue $r3;
        java.security.cert.CertificateException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: byte[];
        specialinvoke r0.<java.security.cert.X509Certificate: void <init>()>();
        r0.<sun.security.x509.X509CertImpl: boolean readOnly> = 0;
        r0.<sun.security.x509.X509CertImpl: byte[] signedCert> = null;
        r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info> = null;
        r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId> = null;
        r0.<sun.security.x509.X509CertImpl: byte[] signature> = null;

     label0:
        $r3 = new sun.security.util.DerValue;
        specialinvoke $r3.<sun.security.util.DerValue: void <init>(byte[])>(r1);
        specialinvoke r0.<sun.security.x509.X509CertImpl: void parse(sun.security.util.DerValue)>($r3);

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        r0.<sun.security.x509.X509CertImpl: byte[] signedCert> = null;
        $r5 = new java.security.cert.CertificateException;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to initialize, ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>($r9, r2);
        throw $r5;

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public void <init>(java.io.InputStream) throws java.security.cert.CertificateException
    {
        sun.security.x509.X509CertImpl r0;
        java.io.InputStream r1;
        null_type n0;
        java.io.BufferedInputStream r2, $r5;
        java.io.IOException r3, r4, $r7, $r9, $r16, r17;
        sun.security.util.DerValue r6, $r8;
        java.security.cert.CertificateException $r10, $r18;
        java.lang.StringBuilder $r11, $r12, $r14, $r19, $r20, $r21;
        java.lang.String $r13, $r15, $r22;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: java.io.InputStream;
        specialinvoke r0.<java.security.cert.X509Certificate: void <init>()>();
        r0.<sun.security.x509.X509CertImpl: boolean readOnly> = 0;
        r0.<sun.security.x509.X509CertImpl: byte[] signedCert> = null;
        r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info> = null;
        r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId> = null;
        r0.<sun.security.x509.X509CertImpl: byte[] signature> = null;
        n0 = null;
        $r5 = new java.io.BufferedInputStream;
        specialinvoke $r5.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r1);
        r2 = $r5;

     label0:
        virtualinvoke r2.<java.io.BufferedInputStream: void mark(int)>(2147483647);
        r6 = specialinvoke r0.<sun.security.x509.X509CertImpl: sun.security.util.DerValue readRFC1421Cert(java.io.InputStream)>(r2);

     label1:
        goto label6;

     label2:
        $r7 := @caughtexception;
        r3 = $r7;

     label3:
        virtualinvoke r2.<java.io.BufferedInputStream: void reset()>();
        $r8 = new sun.security.util.DerValue;
        specialinvoke $r8.<sun.security.util.DerValue: void <init>(java.io.InputStream)>(r2);
        r6 = $r8;

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;
        r4 = $r9;
        $r10 = new java.security.cert.CertificateException;
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input stream must be either DER-encoded bytes or RFC1421 hex-encoded DER-encoded bytes: ");
        $r13 = virtualinvoke r4.<java.io.IOException: java.lang.String getMessage()>();
        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r10.<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>($r15, r4);
        throw $r10;

     label6:
        specialinvoke r0.<sun.security.x509.X509CertImpl: void parse(sun.security.util.DerValue)>(r6);

     label7:
        goto label9;

     label8:
        $r16 := @caughtexception;
        r17 = $r16;
        r0.<sun.security.x509.X509CertImpl: byte[] signedCert> = null;
        $r18 = new java.security.cert.CertificateException;
        $r19 = new java.lang.StringBuilder;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse DER value of certificate, ");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r18.<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>($r22, r17);
        throw $r18;

     label9:
        return;

        catch java.io.IOException from label0 to label1 with label2;
        catch java.io.IOException from label3 to label4 with label5;
        catch java.io.IOException from label6 to label7 with label8;
    }

    private sun.security.util.DerValue readRFC1421Cert(java.io.InputStream) throws java.io.IOException
    {
        sun.security.x509.X509CertImpl r0;
        java.io.InputStream r1;
        sun.security.util.DerValue r2, $r22;
        null_type n0;
        java.io.InputStreamReader $r3;
        java.io.BufferedReader r4, $r8;
        java.io.IOException r5, r7, $r10, $r11, $r25, $r26, $r32;
        java.io.ByteArrayOutputStream r6, $r19;
        java.lang.String r9, $r14, $r16, $r20, r21, $r29, $r31;
        java.lang.StringBuilder $r12, $r13, $r15, $r27, $r28, $r30;
        boolean $z0, $z1;
        sun.misc.BASE64Decoder $r17, r18;
        byte[] $r23, $r24;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: java.io.InputStream;
        r2 = null;
        n0 = null;
        $r8 = new java.io.BufferedReader;
        $r3 = new java.io.InputStreamReader;
        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r1, "ASCII");
        specialinvoke $r8.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);
        r4 = $r8;

     label0:
        r9 = virtualinvoke r4.<java.io.BufferedReader: java.lang.String readLine()>();

     label1:
        goto label3;

     label2:
        $r10 := @caughtexception;
        r5 = $r10;
        $r11 = new java.io.IOException;
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to read InputStream: ");
        $r14 = virtualinvoke r5.<java.io.IOException: java.lang.String getMessage()>();
        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r16);
        throw $r11;

     label3:
        $z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("-----BEGIN CERTIFICATE-----");
        if $z0 == 0 goto label9;

        $r17 = new sun.misc.BASE64Decoder;
        specialinvoke $r17.<sun.misc.BASE64Decoder: void <init>()>();
        r18 = $r17;
        $r19 = new java.io.ByteArrayOutputStream;
        specialinvoke $r19.<java.io.ByteArrayOutputStream: void <init>()>();
        r6 = $r19;

     label4:
        $r20 = virtualinvoke r4.<java.io.BufferedReader: java.lang.String readLine()>();
        r21 = $r20;
        if $r20 == null goto label6;

        $z1 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("-----END CERTIFICATE-----");
        if $z1 == 0 goto label5;

        $r22 = new sun.security.util.DerValue;
        $r23 = virtualinvoke r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
        specialinvoke $r22.<sun.security.util.DerValue: void <init>(byte[])>($r23);
        r2 = $r22;
        goto label6;

     label5:
        $r24 = virtualinvoke r18.<sun.misc.BASE64Decoder: byte[] decodeBuffer(java.lang.String)>(r21);
        virtualinvoke r6.<java.io.ByteArrayOutputStream: void write(byte[])>($r24);
        goto label4;

     label6:
        goto label8;

     label7:
        $r25 := @caughtexception;
        r7 = $r25;
        $r26 = new java.io.IOException;
        $r27 = new java.lang.StringBuilder;
        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to read InputStream: ");
        $r29 = virtualinvoke r7.<java.io.IOException: java.lang.String getMessage()>();
        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r26.<java.io.IOException: void <init>(java.lang.String)>($r31);
        throw $r26;

     label8:
        goto label10;

     label9:
        $r32 = new java.io.IOException;
        specialinvoke $r32.<java.io.IOException: void <init>(java.lang.String)>("InputStream is not RFC1421 hex-encoded DER bytes");
        throw $r32;

     label10:
        return r2;

        catch java.io.IOException from label0 to label1 with label2;
        catch java.io.IOException from label4 to label6 with label7;
    }

    public void <init>(sun.security.x509.X509CertInfo)
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.x509.X509CertInfo r1;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: sun.security.x509.X509CertInfo;
        specialinvoke r0.<java.security.cert.X509Certificate: void <init>()>();
        r0.<sun.security.x509.X509CertImpl: boolean readOnly> = 0;
        r0.<sun.security.x509.X509CertImpl: byte[] signedCert> = null;
        r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info> = null;
        r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId> = null;
        r0.<sun.security.x509.X509CertImpl: byte[] signature> = null;
        r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info> = r1;
        return;
    }

    public void <init>(sun.security.util.DerValue) throws java.security.cert.CertificateException
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.DerValue r1;
        java.io.IOException r2, $r4;
        java.lang.StringBuilder $r3, $r6, $r7;
        java.security.cert.CertificateException $r5;
        java.lang.String $r8;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: sun.security.util.DerValue;
        specialinvoke r0.<java.security.cert.X509Certificate: void <init>()>();
        r0.<sun.security.x509.X509CertImpl: boolean readOnly> = 0;
        r0.<sun.security.x509.X509CertImpl: byte[] signedCert> = null;
        r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info> = null;
        r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId> = null;
        r0.<sun.security.x509.X509CertImpl: byte[] signature> = null;

     label0:
        specialinvoke r0.<sun.security.x509.X509CertImpl: void parse(sun.security.util.DerValue)>(r1);

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        r0.<sun.security.x509.X509CertImpl: byte[] signedCert> = null;
        $r5 = new java.security.cert.CertificateException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to initialize, ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>($r8, r2);
        throw $r5;

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public void encode(java.io.OutputStream) throws java.security.cert.CertificateEncodingException
    {
        sun.security.x509.X509CertImpl r0;
        java.io.OutputStream r1;
        java.io.IOException r2, $r8;
        byte[] $r3, $r5, $r7;
        java.security.cert.CertificateEncodingException $r4, $r9;
        java.lang.Object $r6;
        java.lang.String $r10;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: java.io.OutputStream;
        $r3 = r0.<sun.security.x509.X509CertImpl: byte[] signedCert>;
        if $r3 != null goto label0;

        $r4 = new java.security.cert.CertificateEncodingException;
        specialinvoke $r4.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>("Null certificate to encode");
        throw $r4;

     label0:
        $r5 = r0.<sun.security.x509.X509CertImpl: byte[] signedCert>;
        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Object clone()>();
        $r7 = (byte[]) $r6;
        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r7);

     label1:
        goto label3;

     label2:
        $r8 := @caughtexception;
        r2 = $r8;
        $r9 = new java.security.cert.CertificateEncodingException;
        $r10 = virtualinvoke r2.<java.io.IOException: java.lang.String toString()>();
        specialinvoke $r9.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>($r10);
        throw $r9;

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public void derEncode(java.io.OutputStream) throws java.io.IOException
    {
        sun.security.x509.X509CertImpl r0;
        java.io.OutputStream r1;
        byte[] $r2, $r4, $r6;
        java.io.IOException $r3;
        java.lang.Object $r5;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: java.io.OutputStream;
        $r2 = r0.<sun.security.x509.X509CertImpl: byte[] signedCert>;
        if $r2 != null goto label0;

        $r3 = new java.io.IOException;
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Null certificate to encode");
        throw $r3;

     label0:
        $r4 = r0.<sun.security.x509.X509CertImpl: byte[] signedCert>;
        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();
        $r6 = (byte[]) $r5;
        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r6);
        return;
    }

    public byte[] getEncoded() throws java.security.cert.CertificateEncodingException
    {
        sun.security.x509.X509CertImpl r0;
        byte[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = virtualinvoke r0.<sun.security.x509.X509CertImpl: byte[] getEncodedInternal()>();
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();
        $r3 = (byte[]) $r2;
        return $r3;
    }

    public byte[] getEncodedInternal() throws java.security.cert.CertificateEncodingException
    {
        sun.security.x509.X509CertImpl r0;
        byte[] $r1, $r3;
        java.security.cert.CertificateEncodingException $r2;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = r0.<sun.security.x509.X509CertImpl: byte[] signedCert>;
        if $r1 != null goto label0;

        $r2 = new java.security.cert.CertificateEncodingException;
        specialinvoke $r2.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>("Null certificate to encode");
        throw $r2;

     label0:
        $r3 = r0.<sun.security.x509.X509CertImpl: byte[] signedCert>;
        return $r3;
    }

    public void verify(java.security.PublicKey) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        sun.security.x509.X509CertImpl r0;
        java.security.PublicKey r1;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: java.security.PublicKey;
        virtualinvoke r0.<sun.security.x509.X509CertImpl: void verify(java.security.PublicKey,java.lang.String)>(r1, "");
        return;
    }

    public synchronized void verify(java.security.PublicKey, java.lang.String) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        sun.security.x509.X509CertImpl r0;
        java.security.PublicKey r1, $r4, $r5;
        java.lang.String r2, $r6, $r11, $r14;
        null_type n0;
        byte[] r3, $r8, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.security.SignatureException $r7, $r17;
        java.security.cert.CertificateEncodingException $r9;
        int $i0, $i1;
        sun.security.x509.AlgorithmId $r10, $r13;
        java.security.Signature r12;
        sun.security.x509.X509CertInfo $r15;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: java.security.PublicKey;
        r2 := @parameter1: java.lang.String;
        if r2 != null goto label0;

        r2 = "";

     label0:
        $r4 = r0.<sun.security.x509.X509CertImpl: java.security.PublicKey verifiedPublicKey>;
        if $r4 == null goto label2;

        $r5 = r0.<sun.security.x509.X509CertImpl: java.security.PublicKey verifiedPublicKey>;
        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>(r1);
        if $z0 == 0 goto label2;

        $r6 = r0.<sun.security.x509.X509CertImpl: java.lang.String verifiedProvider>;
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r6);
        if $z1 == 0 goto label2;

        $z2 = r0.<sun.security.x509.X509CertImpl: boolean verificationResult>;
        if $z2 == 0 goto label1;

        return;

     label1:
        $r7 = new java.security.SignatureException;
        specialinvoke $r7.<java.security.SignatureException: void <init>(java.lang.String)>("Signature does not match.");
        throw $r7;

     label2:
        $r8 = r0.<sun.security.x509.X509CertImpl: byte[] signedCert>;
        if $r8 != null goto label3;

        $r9 = new java.security.cert.CertificateEncodingException;
        specialinvoke $r9.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>("Uninitialized certificate");
        throw $r9;

     label3:
        n0 = null;
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i0 != 0 goto label4;

        $r10 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId>;
        $r11 = virtualinvoke $r10.<sun.security.x509.AlgorithmId: java.lang.String getName()>();
        r12 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r11);
        goto label5;

     label4:
        $r13 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId>;
        $r14 = virtualinvoke $r13.<sun.security.x509.AlgorithmId: java.lang.String getName()>();
        r12 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>($r14, r2);

     label5:
        virtualinvoke r12.<java.security.Signature: void initVerify(java.security.PublicKey)>(r1);
        $r15 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        r3 = virtualinvoke $r15.<sun.security.x509.X509CertInfo: byte[] getEncodedInfo()>();
        $i1 = lengthof r3;
        virtualinvoke r12.<java.security.Signature: void update(byte[],int,int)>(r3, 0, $i1);
        $r16 = r0.<sun.security.x509.X509CertImpl: byte[] signature>;
        $z3 = virtualinvoke r12.<java.security.Signature: boolean verify(byte[])>($r16);
        r0.<sun.security.x509.X509CertImpl: boolean verificationResult> = $z3;
        r0.<sun.security.x509.X509CertImpl: java.security.PublicKey verifiedPublicKey> = r1;
        r0.<sun.security.x509.X509CertImpl: java.lang.String verifiedProvider> = r2;
        $z4 = r0.<sun.security.x509.X509CertImpl: boolean verificationResult>;
        if $z4 != 0 goto label6;

        $r17 = new java.security.SignatureException;
        specialinvoke $r17.<java.security.SignatureException: void <init>(java.lang.String)>("Signature does not match.");
        throw $r17;

     label6:
        return;
    }

    public void sign(java.security.PrivateKey, java.lang.String) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        sun.security.x509.X509CertImpl r0;
        java.security.PrivateKey r1;
        java.lang.String r2;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: java.security.PrivateKey;
        r2 := @parameter1: java.lang.String;
        virtualinvoke r0.<sun.security.x509.X509CertImpl: void sign(java.security.PrivateKey,java.lang.String,java.lang.String)>(r1, r2, null);
        return;
    }

    public void sign(java.security.PrivateKey, java.lang.String, java.lang.String) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        sun.security.x509.X509CertImpl r0;
        java.security.PrivateKey r1;
        java.lang.String r2, r3, $r9, $r21;
        null_type n0;
        sun.security.util.DerOutputStream r4, r5, $r11, $r12;
        byte[] r6, $r15, $r16, $r17;
        boolean $z0;
        java.security.cert.CertificateEncodingException $r7, $r20;
        int $i0, $i1;
        java.security.Signature r8;
        sun.security.x509.AlgorithmId $r10, $r14;
        sun.security.x509.X509CertInfo $r13;
        java.io.IOException $r18, r19;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: java.security.PrivateKey;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;

     label0:
        $z0 = r0.<sun.security.x509.X509CertImpl: boolean readOnly>;
        if $z0 == 0 goto label1;

        $r7 = new java.security.cert.CertificateEncodingException;
        specialinvoke $r7.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>("cannot over-write existing certificate");
        throw $r7;

     label1:
        n0 = null;
        if r3 == null goto label2;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();
        if $i0 != 0 goto label3;

     label2:
        r8 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(r2);
        goto label4;

     label3:
        r8 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>(r2, r3);

     label4:
        virtualinvoke r8.<java.security.Signature: void initSign(java.security.PrivateKey)>(r1);
        $r9 = virtualinvoke r8.<java.security.Signature: java.lang.String getAlgorithm()>();
        $r10 = staticinvoke <sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId get(java.lang.String)>($r9);
        r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId> = $r10;
        $r11 = new sun.security.util.DerOutputStream;
        specialinvoke $r11.<sun.security.util.DerOutputStream: void <init>()>();
        r4 = $r11;
        $r12 = new sun.security.util.DerOutputStream;
        specialinvoke $r12.<sun.security.util.DerOutputStream: void <init>()>();
        r5 = $r12;
        $r13 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        virtualinvoke $r13.<sun.security.x509.X509CertInfo: void encode(java.io.OutputStream)>(r5);
        r6 = virtualinvoke r5.<sun.security.util.DerOutputStream: byte[] toByteArray()>();
        $r14 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId>;
        virtualinvoke $r14.<sun.security.x509.AlgorithmId: void encode(sun.security.util.DerOutputStream)>(r5);
        $i1 = lengthof r6;
        virtualinvoke r8.<java.security.Signature: void update(byte[],int,int)>(r6, 0, $i1);
        $r15 = virtualinvoke r8.<java.security.Signature: byte[] sign()>();
        r0.<sun.security.x509.X509CertImpl: byte[] signature> = $r15;
        $r16 = r0.<sun.security.x509.X509CertImpl: byte[] signature>;
        virtualinvoke r5.<sun.security.util.DerOutputStream: void putBitString(byte[])>($r16);
        virtualinvoke r4.<sun.security.util.DerOutputStream: void write(byte,sun.security.util.DerOutputStream)>(48, r5);
        $r17 = virtualinvoke r4.<sun.security.util.DerOutputStream: byte[] toByteArray()>();
        r0.<sun.security.x509.X509CertImpl: byte[] signedCert> = $r17;
        r0.<sun.security.x509.X509CertImpl: boolean readOnly> = 1;

     label5:
        goto label7;

     label6:
        $r18 := @caughtexception;
        r19 = $r18;
        $r20 = new java.security.cert.CertificateEncodingException;
        $r21 = virtualinvoke r19.<java.io.IOException: java.lang.String toString()>();
        specialinvoke $r20.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>($r21);
        throw $r20;

     label7:
        return;

        catch java.io.IOException from label0 to label5 with label6;
    }

    public void checkValidity() throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException
    {
        sun.security.x509.X509CertImpl r0;
        java.util.Date $r1, r2;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = new java.util.Date;
        specialinvoke $r1.<java.util.Date: void <init>()>();
        r2 = $r1;
        virtualinvoke r0.<sun.security.x509.X509CertImpl: void checkValidity(java.util.Date)>(r2);
        return;
    }

    public void checkValidity(java.util.Date) throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException
    {
        sun.security.x509.X509CertImpl r0;
        java.util.Date r1;
        null_type n0;
        java.lang.Exception r2, $r6;
        sun.security.x509.X509CertInfo $r3;
        java.lang.Object $r4;
        sun.security.x509.CertificateValidity r5;
        java.security.cert.CertificateNotYetValidException $r7, $r8;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: java.util.Date;
        n0 = null;

     label0:
        $r3 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r4 = virtualinvoke $r3.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("validity");
        r5 = (sun.security.x509.CertificateValidity) $r4;

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        $r7 = new java.security.cert.CertificateNotYetValidException;
        specialinvoke $r7.<java.security.cert.CertificateNotYetValidException: void <init>(java.lang.String)>("Incorrect validity period");
        throw $r7;

     label3:
        if r5 != null goto label4;

        $r8 = new java.security.cert.CertificateNotYetValidException;
        specialinvoke $r8.<java.security.cert.CertificateNotYetValidException: void <init>(java.lang.String)>("Null validity period");
        throw $r8;

     label4:
        virtualinvoke r5.<sun.security.x509.CertificateValidity: void valid(java.util.Date)>(r1);
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public java.lang.Object get(java.lang.String) throws java.security.cert.CertificateParsingException
    {
        sun.security.x509.X509CertImpl r0;
        java.lang.String r1, r4, $r11, $r13, r15, $r17, $r19, $r23, $r27, $r40;
        sun.security.x509.X509AttributeName $r2, r3, $r12, r14;
        java.io.IOException r5, $r21;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.security.cert.CertificateParsingException $r6, $r22, $r26, $r36;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r37, $r38, $r39;
        sun.security.x509.X509CertInfo $r16, $r18, $r28;
        java.lang.Object $r20, $r32, $r35;
        java.security.cert.CertificateException $r24, r25;
        sun.security.x509.AlgorithmId $r29;
        byte[] $r30, $r31, $r33, $r34;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: java.lang.String;
        $r2 = new sun.security.x509.X509AttributeName;
        specialinvoke $r2.<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>(r1);
        r3 = $r2;
        r4 = virtualinvoke r3.<sun.security.x509.X509AttributeName: java.lang.String getPrefix()>();
        $z0 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("x509");
        if $z0 != 0 goto label0;

        $r6 = new java.security.cert.CertificateParsingException;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid root of attribute name, expected [x509], received [");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>($r11);
        throw $r6;

     label0:
        $r12 = new sun.security.x509.X509AttributeName;
        $r13 = virtualinvoke r3.<sun.security.x509.X509AttributeName: java.lang.String getSuffix()>();
        specialinvoke $r12.<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>($r13);
        r14 = $r12;
        r15 = virtualinvoke r14.<sun.security.x509.X509AttributeName: java.lang.String getPrefix()>();
        $z1 = virtualinvoke r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("info");
        if $z1 == 0 goto label7;

        $r16 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r16 != null goto label1;

        return null;

     label1:
        $r17 = virtualinvoke r14.<sun.security.x509.X509AttributeName: java.lang.String getSuffix()>();
        if $r17 == null goto label6;

     label2:
        $r18 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r19 = virtualinvoke r14.<sun.security.x509.X509AttributeName: java.lang.String getSuffix()>();
        $r20 = virtualinvoke $r18.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>($r19);

     label3:
        return $r20;

     label4:
        $r21 := @caughtexception;
        r5 = $r21;
        $r22 = new java.security.cert.CertificateParsingException;
        $r23 = virtualinvoke r5.<java.io.IOException: java.lang.String toString()>();
        specialinvoke $r22.<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>($r23);
        throw $r22;

     label5:
        $r24 := @caughtexception;
        r25 = $r24;
        $r26 = new java.security.cert.CertificateParsingException;
        $r27 = virtualinvoke r25.<java.security.cert.CertificateException: java.lang.String toString()>();
        specialinvoke $r26.<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>($r27);
        throw $r26;

     label6:
        $r28 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        return $r28;

     label7:
        $z2 = virtualinvoke r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("algorithm");
        if $z2 == 0 goto label8;

        $r29 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId>;
        return $r29;

     label8:
        $z3 = virtualinvoke r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("signature");
        if $z3 == 0 goto label10;

        $r30 = r0.<sun.security.x509.X509CertImpl: byte[] signature>;
        if $r30 == null goto label9;

        $r31 = r0.<sun.security.x509.X509CertImpl: byte[] signature>;
        $r32 = virtualinvoke $r31.<java.lang.Object: java.lang.Object clone()>();
        return $r32;

     label9:
        return null;

     label10:
        $z4 = virtualinvoke r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("signed_cert");
        if $z4 == 0 goto label12;

        $r33 = r0.<sun.security.x509.X509CertImpl: byte[] signedCert>;
        if $r33 == null goto label11;

        $r34 = r0.<sun.security.x509.X509CertImpl: byte[] signedCert>;
        $r35 = virtualinvoke $r34.<java.lang.Object: java.lang.Object clone()>();
        return $r35;

     label11:
        return null;

     label12:
        $r36 = new java.security.cert.CertificateParsingException;
        $r37 = new java.lang.StringBuilder;
        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();
        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attribute name not recognized or get() not allowed for the same: ");
        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);
        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r36.<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>($r40);
        throw $r36;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.security.cert.CertificateException from label2 to label3 with label5;
    }

    public void set(java.lang.String, java.lang.Object) throws java.security.cert.CertificateException, java.io.IOException
    {
        sun.security.x509.X509CertImpl r0;
        java.lang.String r1, r4, $r11, $r13, r15, $r16, $r20, $r25;
        java.lang.Object r2;
        sun.security.x509.X509AttributeName r3, $r6, $r12, r14;
        boolean $z0, $z1, $z2, $z3;
        java.security.cert.CertificateException $r5, $r7, $r17, $r21;
        java.lang.StringBuilder $r8, $r9, $r10, $r22, $r23, $r24;
        sun.security.x509.X509CertInfo $r18, $r19;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object;
        $z0 = r0.<sun.security.x509.X509CertImpl: boolean readOnly>;
        if $z0 == 0 goto label0;

        $r5 = new java.security.cert.CertificateException;
        specialinvoke $r5.<java.security.cert.CertificateException: void <init>(java.lang.String)>("cannot over-write existing certificate");
        throw $r5;

     label0:
        $r6 = new sun.security.x509.X509AttributeName;
        specialinvoke $r6.<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>(r1);
        r3 = $r6;
        r4 = virtualinvoke r3.<sun.security.x509.X509AttributeName: java.lang.String getPrefix()>();
        $z1 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("x509");
        if $z1 != 0 goto label1;

        $r7 = new java.security.cert.CertificateException;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid root of attribute name, expected [x509], received ");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r7.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r11);
        throw $r7;

     label1:
        $r12 = new sun.security.x509.X509AttributeName;
        $r13 = virtualinvoke r3.<sun.security.x509.X509AttributeName: java.lang.String getSuffix()>();
        specialinvoke $r12.<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>($r13);
        r14 = $r12;
        r15 = virtualinvoke r14.<sun.security.x509.X509AttributeName: java.lang.String getPrefix()>();
        $z2 = virtualinvoke r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("info");
        if $z2 == 0 goto label4;

        $r16 = virtualinvoke r14.<sun.security.x509.X509AttributeName: java.lang.String getSuffix()>();
        if $r16 != null goto label3;

        $z3 = r2 instanceof sun.security.x509.X509CertInfo;
        if $z3 != 0 goto label2;

        $r17 = new java.security.cert.CertificateException;
        specialinvoke $r17.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Attribute value should be of type X509CertInfo.");
        throw $r17;

     label2:
        $r18 = (sun.security.x509.X509CertInfo) r2;
        r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info> = $r18;
        r0.<sun.security.x509.X509CertImpl: byte[] signedCert> = null;
        goto label5;

     label3:
        $r19 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r20 = virtualinvoke r14.<sun.security.x509.X509AttributeName: java.lang.String getSuffix()>();
        virtualinvoke $r19.<sun.security.x509.X509CertInfo: void set(java.lang.String,java.lang.Object)>($r20, r2);
        r0.<sun.security.x509.X509CertImpl: byte[] signedCert> = null;
        goto label5;

     label4:
        $r21 = new java.security.cert.CertificateException;
        $r22 = new java.lang.StringBuilder;
        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attribute name not recognized or set() not allowed for the same: ");
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r21.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r25);
        throw $r21;

     label5:
        return;
    }

    public void delete(java.lang.String) throws java.security.cert.CertificateException, java.io.IOException
    {
        sun.security.x509.X509CertImpl r0;
        java.lang.String r1, r3, $r10, $r12, r14, $r15, $r17, $r22;
        sun.security.x509.X509AttributeName r2, $r5, $r11, r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.security.cert.CertificateException $r4, $r6, $r18;
        java.lang.StringBuilder $r7, $r8, $r9, $r19, $r20, $r21;
        sun.security.x509.X509CertInfo $r16;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: java.lang.String;
        $z0 = r0.<sun.security.x509.X509CertImpl: boolean readOnly>;
        if $z0 == 0 goto label0;

        $r4 = new java.security.cert.CertificateException;
        specialinvoke $r4.<java.security.cert.CertificateException: void <init>(java.lang.String)>("cannot over-write existing certificate");
        throw $r4;

     label0:
        $r5 = new sun.security.x509.X509AttributeName;
        specialinvoke $r5.<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>(r1);
        r2 = $r5;
        r3 = virtualinvoke r2.<sun.security.x509.X509AttributeName: java.lang.String getPrefix()>();
        $z1 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("x509");
        if $z1 != 0 goto label1;

        $r6 = new java.security.cert.CertificateException;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid root of attribute name, expected [x509], received ");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r10);
        throw $r6;

     label1:
        $r11 = new sun.security.x509.X509AttributeName;
        $r12 = virtualinvoke r2.<sun.security.x509.X509AttributeName: java.lang.String getSuffix()>();
        specialinvoke $r11.<sun.security.x509.X509AttributeName: void <init>(java.lang.String)>($r12);
        r13 = $r11;
        r14 = virtualinvoke r13.<sun.security.x509.X509AttributeName: java.lang.String getPrefix()>();
        $z2 = virtualinvoke r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("info");
        if $z2 == 0 goto label3;

        $r15 = virtualinvoke r13.<sun.security.x509.X509AttributeName: java.lang.String getSuffix()>();
        if $r15 == null goto label2;

        r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info> = null;
        goto label7;

     label2:
        $r16 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r17 = virtualinvoke r13.<sun.security.x509.X509AttributeName: java.lang.String getSuffix()>();
        virtualinvoke $r16.<sun.security.x509.X509CertInfo: void delete(java.lang.String)>($r17);
        goto label7;

     label3:
        $z3 = virtualinvoke r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("algorithm");
        if $z3 == 0 goto label4;

        r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId> = null;
        goto label7;

     label4:
        $z4 = virtualinvoke r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("signature");
        if $z4 == 0 goto label5;

        r0.<sun.security.x509.X509CertImpl: byte[] signature> = null;
        goto label7;

     label5:
        $z5 = virtualinvoke r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("signed_cert");
        if $z5 == 0 goto label6;

        r0.<sun.security.x509.X509CertImpl: byte[] signedCert> = null;
        goto label7;

     label6:
        $r18 = new java.security.cert.CertificateException;
        $r19 = new java.lang.StringBuilder;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attribute name not recognized or delete() not allowed for the same: ");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r18.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r22);
        throw $r18;

     label7:
        return;
    }

    public java.util.Enumeration getElements()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.x509.AttributeNameEnumeration $r1, r2;
        java.util.Enumeration $r3;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = new sun.security.x509.AttributeNameEnumeration;
        specialinvoke $r1.<sun.security.x509.AttributeNameEnumeration: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<sun.security.x509.AttributeNameEnumeration: void addElement(java.lang.Object)>("x509.info");
        virtualinvoke r2.<sun.security.x509.AttributeNameEnumeration: void addElement(java.lang.Object)>("x509.algorithm");
        virtualinvoke r2.<sun.security.x509.AttributeNameEnumeration: void addElement(java.lang.Object)>("x509.signature");
        virtualinvoke r2.<sun.security.x509.AttributeNameEnumeration: void addElement(java.lang.Object)>("x509.signed_cert");
        $r3 = virtualinvoke r2.<sun.security.x509.AttributeNameEnumeration: java.util.Enumeration elements()>();
        return $r3;
    }

    public java.lang.String getName()
    {
        sun.security.x509.X509CertImpl r0;

        r0 := @this: sun.security.x509.X509CertImpl;
        return "x509";
    }

    public java.lang.String toString()
    {
        sun.security.x509.X509CertImpl r0;
        java.lang.StringBuilder r1, $r6, $r8, $r11, $r12, $r15, $r16, $r19, $r20, $r24, $r25, $r28;
        sun.misc.HexDumpEncoder r2, $r23;
        sun.security.x509.X509CertInfo $r3, $r9;
        sun.security.x509.AlgorithmId $r4, $r17;
        byte[] $r5, $r26;
        java.lang.String $r10, $r13, $r18, $r21, $r27, $r29, $r32;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r3 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r3 == null goto label0;

        $r4 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId>;
        if $r4 == null goto label0;

        $r5 = r0.<sun.security.x509.X509CertImpl: byte[] signature>;
        if $r5 != null goto label1;

     label0:
        return "";

     label1:
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        r1 = $r6;
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[\n");
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r9 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r10 = virtualinvoke $r9.<sun.security.x509.X509CertInfo: java.lang.String toString()>();
        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);
        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Algorithm: [");
        $r17 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId>;
        $r18 = virtualinvoke $r17.<sun.security.x509.AlgorithmId: java.lang.String toString()>();
        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]\n");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);
        $r23 = new sun.misc.HexDumpEncoder;
        specialinvoke $r23.<sun.misc.HexDumpEncoder: void <init>()>();
        r2 = $r23;
        $r24 = new java.lang.StringBuilder;
        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Signature:\n");
        $r26 = r0.<sun.security.x509.X509CertImpl: byte[] signature>;
        $r27 = virtualinvoke r2.<sun.misc.HexDumpEncoder: java.lang.String encodeBuffer(byte[])>($r26);
        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n]");
        $r32 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r32;
    }

    public java.security.PublicKey getPublicKey()
    {
        sun.security.x509.X509CertImpl r0;
        java.security.PublicKey r1;
        sun.security.x509.X509CertInfo $r2, $r3;
        java.lang.Object $r4;
        java.lang.Exception $r6, r7;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r2 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r2 != null goto label0;

        return null;

     label0:
        $r3 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r4 = virtualinvoke $r3.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("key.value");
        r1 = (java.security.PublicKey) $r4;

     label1:
        return r1;

     label2:
        $r6 := @caughtexception;
        r7 = $r6;
        return null;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public int getVersion()
    {
        sun.security.x509.X509CertImpl r0;
        int i0, $i1;
        sun.security.x509.X509CertInfo $r1, $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        java.lang.Exception $r5, r6;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r1 != null goto label0;

        return -1;

     label0:
        $r2 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r3 = virtualinvoke $r2.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("version.number");
        $r4 = (java.lang.Integer) $r3;
        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();
        $i1 = i0 + 1;

     label1:
        return $i1;

     label2:
        $r5 := @caughtexception;
        r6 = $r5;
        return -1;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public java.math.BigInteger getSerialNumber()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.x509.SerialNumber r1;
        java.math.BigInteger $r2;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.SerialNumber getSerialNumberObject()>();
        if r1 == null goto label0;

        $r2 = virtualinvoke r1.<sun.security.x509.SerialNumber: java.math.BigInteger getNumber()>();
        goto label1;

     label0:
        $r2 = null;

     label1:
        return $r2;
    }

    public sun.security.x509.SerialNumber getSerialNumberObject()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.x509.SerialNumber r1;
        sun.security.x509.X509CertInfo $r2, $r3;
        java.lang.Object $r4;
        java.lang.Exception $r6, r7;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r2 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r2 != null goto label0;

        return null;

     label0:
        $r3 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r4 = virtualinvoke $r3.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("serialNumber.number");
        r1 = (sun.security.x509.SerialNumber) $r4;

     label1:
        return r1;

     label2:
        $r6 := @caughtexception;
        r7 = $r6;
        return null;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public java.security.Principal getSubjectDN()
    {
        sun.security.x509.X509CertImpl r0;
        java.security.Principal r1;
        sun.security.x509.X509CertInfo $r2, $r3;
        java.lang.Object $r4;
        java.lang.Exception $r6, r7;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r2 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r2 != null goto label0;

        return null;

     label0:
        $r3 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r4 = virtualinvoke $r3.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("subject.dname");
        r1 = (java.security.Principal) $r4;

     label1:
        return r1;

     label2:
        $r6 := @caughtexception;
        r7 = $r6;
        return null;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public javax.security.auth.x500.X500Principal getSubjectX500Principal()
    {
        sun.security.x509.X509CertImpl r0;
        javax.security.auth.x500.X500Principal r1;
        sun.security.x509.X509CertInfo $r2, $r3;
        java.lang.Object $r4;
        java.lang.Exception $r6, r7;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r2 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r2 != null goto label0;

        return null;

     label0:
        $r3 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r4 = virtualinvoke $r3.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("subject.x500principal");
        r1 = (javax.security.auth.x500.X500Principal) $r4;

     label1:
        return r1;

     label2:
        $r6 := @caughtexception;
        r7 = $r6;
        return null;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public java.security.Principal getIssuerDN()
    {
        sun.security.x509.X509CertImpl r0;
        java.security.Principal r1;
        sun.security.x509.X509CertInfo $r2, $r3;
        java.lang.Object $r4;
        java.lang.Exception $r6, r7;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r2 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r2 != null goto label0;

        return null;

     label0:
        $r3 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r4 = virtualinvoke $r3.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("issuer.dname");
        r1 = (java.security.Principal) $r4;

     label1:
        return r1;

     label2:
        $r6 := @caughtexception;
        r7 = $r6;
        return null;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public javax.security.auth.x500.X500Principal getIssuerX500Principal()
    {
        sun.security.x509.X509CertImpl r0;
        javax.security.auth.x500.X500Principal r1;
        sun.security.x509.X509CertInfo $r2, $r3;
        java.lang.Object $r4;
        java.lang.Exception $r6, r7;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r2 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r2 != null goto label0;

        return null;

     label0:
        $r3 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r4 = virtualinvoke $r3.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("issuer.x500principal");
        r1 = (javax.security.auth.x500.X500Principal) $r4;

     label1:
        return r1;

     label2:
        $r6 := @caughtexception;
        r7 = $r6;
        return null;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public java.util.Date getNotBefore()
    {
        sun.security.x509.X509CertImpl r0;
        java.util.Date r1;
        sun.security.x509.X509CertInfo $r2, $r3;
        java.lang.Object $r4;
        java.lang.Exception $r6, r7;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r2 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r2 != null goto label0;

        return null;

     label0:
        $r3 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r4 = virtualinvoke $r3.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("validity.notBefore");
        r1 = (java.util.Date) $r4;

     label1:
        return r1;

     label2:
        $r6 := @caughtexception;
        r7 = $r6;
        return null;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public java.util.Date getNotAfter()
    {
        sun.security.x509.X509CertImpl r0;
        java.util.Date r1;
        sun.security.x509.X509CertInfo $r2, $r3;
        java.lang.Object $r4;
        java.lang.Exception $r6, r7;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r2 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r2 != null goto label0;

        return null;

     label0:
        $r3 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r4 = virtualinvoke $r3.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("validity.notAfter");
        r1 = (java.util.Date) $r4;

     label1:
        return r1;

     label2:
        $r6 := @caughtexception;
        r7 = $r6;
        return null;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public byte[] getTBSCertificate() throws java.security.cert.CertificateEncodingException
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.x509.X509CertInfo $r1, $r2;
        byte[] $r3;
        java.security.cert.CertificateEncodingException $r4;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r1 == null goto label0;

        $r2 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r3 = virtualinvoke $r2.<sun.security.x509.X509CertInfo: byte[] getEncodedInfo()>();
        return $r3;

     label0:
        $r4 = new java.security.cert.CertificateEncodingException;
        specialinvoke $r4.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>("Uninitialized certificate");
        throw $r4;
    }

    public byte[] getSignature()
    {
        sun.security.x509.X509CertImpl r0;
        byte[] r1, $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r2 = r0.<sun.security.x509.X509CertImpl: byte[] signature>;
        if $r2 != null goto label0;

        return null;

     label0:
        $r3 = r0.<sun.security.x509.X509CertImpl: byte[] signature>;
        $i0 = lengthof $r3;
        r1 = newarray (byte)[$i0];
        $r4 = r0.<sun.security.x509.X509CertImpl: byte[] signature>;
        $i1 = lengthof r1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i1);
        return r1;
    }

    public java.lang.String getSigAlgName()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.x509.AlgorithmId $r1, $r2;
        java.lang.String $r3;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId>;
        if $r1 != null goto label0;

        return null;

     label0:
        $r2 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId>;
        $r3 = virtualinvoke $r2.<sun.security.x509.AlgorithmId: java.lang.String getName()>();
        return $r3;
    }

    public java.lang.String getSigAlgOID()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.ObjectIdentifier r1;
        sun.security.x509.AlgorithmId $r2, $r3;
        java.lang.String $r4;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r2 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId>;
        if $r2 != null goto label0;

        return null;

     label0:
        $r3 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId>;
        r1 = virtualinvoke $r3.<sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier getOID()>();
        $r4 = virtualinvoke r1.<sun.security.util.ObjectIdentifier: java.lang.String toString()>();
        return $r4;
    }

    public byte[] getSigAlgParams()
    {
        sun.security.x509.X509CertImpl r0;
        java.io.IOException r1, $r5;
        sun.security.x509.AlgorithmId $r2, $r3;
        byte[] $r4;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r2 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId>;
        if $r2 != null goto label0;

        return null;

     label0:
        $r3 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId>;
        $r4 = virtualinvoke $r3.<sun.security.x509.AlgorithmId: byte[] getEncodedParams()>();

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;
        r1 = $r5;
        return null;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public boolean[] getIssuerUniqueID()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.x509.UniqueIdentity r1;
        sun.security.x509.X509CertInfo $r2, $r3;
        java.lang.Object $r4;
        null_type $n0;
        boolean[] $r5;
        java.lang.Exception $r6, r7;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r2 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r2 != null goto label0;

        return null;

     label0:
        $r3 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r4 = virtualinvoke $r3.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("issuerID.id");
        r1 = (sun.security.x509.UniqueIdentity) $r4;
        if r1 != null goto label2;

        $n0 = null;

     label1:
        return $n0;

     label2:
        $r5 = virtualinvoke r1.<sun.security.x509.UniqueIdentity: boolean[] getId()>();

     label3:
        return $r5;

     label4:
        $r6 := @caughtexception;
        r7 = $r6;
        return null;

        catch java.lang.Exception from label0 to label1 with label4;
        catch java.lang.Exception from label2 to label3 with label4;
    }

    public boolean[] getSubjectUniqueID()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.x509.UniqueIdentity r1;
        sun.security.x509.X509CertInfo $r2, $r3;
        java.lang.Object $r4;
        null_type $n0;
        boolean[] $r5;
        java.lang.Exception $r6, r7;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r2 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r2 != null goto label0;

        return null;

     label0:
        $r3 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r4 = virtualinvoke $r3.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("subjectID.id");
        r1 = (sun.security.x509.UniqueIdentity) $r4;
        if r1 != null goto label2;

        $n0 = null;

     label1:
        return $n0;

     label2:
        $r5 = virtualinvoke r1.<sun.security.x509.UniqueIdentity: boolean[] getId()>();

     label3:
        return $r5;

     label4:
        $r6 := @caughtexception;
        r7 = $r6;
        return null;

        catch java.lang.Exception from label0 to label1 with label4;
        catch java.lang.Exception from label2 to label3 with label4;
    }

    public sun.security.x509.AuthorityKeyIdentifierExtension getAuthorityKeyIdentifierExtension()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        sun.security.x509.Extension $r2;
        sun.security.x509.AuthorityKeyIdentifierExtension $r3;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier AuthorityKey_Id>;
        $r2 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>($r1);
        $r3 = (sun.security.x509.AuthorityKeyIdentifierExtension) $r2;
        return $r3;
    }

    public byte[] getIssuerKeyIdentifier()
    {
        sun.security.x509.X509CertImpl r0;
        byte[] r1;
        sun.security.x509.AuthorityKeyIdentifierExtension r2;
        sun.security.x509.KeyIdentifier r3;
        java.lang.Object $r4;
        java.io.IOException $r5, r6;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 = null;
        r2 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.AuthorityKeyIdentifierExtension getAuthorityKeyIdentifierExtension()>();
        if r2 == null goto label3;

     label0:
        $r4 = virtualinvoke r2.<sun.security.x509.AuthorityKeyIdentifierExtension: java.lang.Object get(java.lang.String)>("key_id");
        r3 = (sun.security.x509.KeyIdentifier) $r4;
        if r3 == null goto label1;

        r1 = virtualinvoke r3.<sun.security.x509.KeyIdentifier: byte[] getIdentifier()>();

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r6 = $r5;

     label3:
        return r1;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public sun.security.x509.BasicConstraintsExtension getBasicConstraintsExtension()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        sun.security.x509.Extension $r2;
        sun.security.x509.BasicConstraintsExtension $r3;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier BasicConstraints_Id>;
        $r2 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>($r1);
        $r3 = (sun.security.x509.BasicConstraintsExtension) $r2;
        return $r3;
    }

    public sun.security.x509.CertificatePoliciesExtension getCertificatePoliciesExtension()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        sun.security.x509.Extension $r2;
        sun.security.x509.CertificatePoliciesExtension $r3;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier CertificatePolicies_Id>;
        $r2 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>($r1);
        $r3 = (sun.security.x509.CertificatePoliciesExtension) $r2;
        return $r3;
    }

    public sun.security.x509.ExtendedKeyUsageExtension getExtendedKeyUsageExtension()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        sun.security.x509.Extension $r2;
        sun.security.x509.ExtendedKeyUsageExtension $r3;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier ExtendedKeyUsage_Id>;
        $r2 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>($r1);
        $r3 = (sun.security.x509.ExtendedKeyUsageExtension) $r2;
        return $r3;
    }

    public sun.security.x509.IssuerAlternativeNameExtension getIssuerAlternativeNameExtension()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        sun.security.x509.Extension $r2;
        sun.security.x509.IssuerAlternativeNameExtension $r3;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier IssuerAlternativeName_Id>;
        $r2 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>($r1);
        $r3 = (sun.security.x509.IssuerAlternativeNameExtension) $r2;
        return $r3;
    }

    public sun.security.x509.NameConstraintsExtension getNameConstraintsExtension()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        sun.security.x509.Extension $r2;
        sun.security.x509.NameConstraintsExtension $r3;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier NameConstraints_Id>;
        $r2 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>($r1);
        $r3 = (sun.security.x509.NameConstraintsExtension) $r2;
        return $r3;
    }

    public sun.security.x509.PolicyConstraintsExtension getPolicyConstraintsExtension()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        sun.security.x509.Extension $r2;
        sun.security.x509.PolicyConstraintsExtension $r3;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier PolicyConstraints_Id>;
        $r2 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>($r1);
        $r3 = (sun.security.x509.PolicyConstraintsExtension) $r2;
        return $r3;
    }

    public sun.security.x509.PolicyMappingsExtension getPolicyMappingsExtension()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        sun.security.x509.Extension $r2;
        sun.security.x509.PolicyMappingsExtension $r3;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier PolicyMappings_Id>;
        $r2 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>($r1);
        $r3 = (sun.security.x509.PolicyMappingsExtension) $r2;
        return $r3;
    }

    public sun.security.x509.PrivateKeyUsageExtension getPrivateKeyUsageExtension()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        sun.security.x509.Extension $r2;
        sun.security.x509.PrivateKeyUsageExtension $r3;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier PrivateKeyUsage_Id>;
        $r2 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>($r1);
        $r3 = (sun.security.x509.PrivateKeyUsageExtension) $r2;
        return $r3;
    }

    public sun.security.x509.SubjectAlternativeNameExtension getSubjectAlternativeNameExtension()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        sun.security.x509.Extension $r2;
        sun.security.x509.SubjectAlternativeNameExtension $r3;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier SubjectAlternativeName_Id>;
        $r2 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>($r1);
        $r3 = (sun.security.x509.SubjectAlternativeNameExtension) $r2;
        return $r3;
    }

    public sun.security.x509.SubjectKeyIdentifierExtension getSubjectKeyIdentifierExtension()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        sun.security.x509.Extension $r2;
        sun.security.x509.SubjectKeyIdentifierExtension $r3;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier SubjectKey_Id>;
        $r2 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>($r1);
        $r3 = (sun.security.x509.SubjectKeyIdentifierExtension) $r2;
        return $r3;
    }

    public byte[] getSubjectKeyIdentifier()
    {
        sun.security.x509.X509CertImpl r0;
        byte[] r1;
        sun.security.x509.SubjectKeyIdentifierExtension r2;
        sun.security.x509.KeyIdentifier r3;
        java.lang.Object $r4;
        java.io.IOException $r5, r6;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 = null;
        r2 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.SubjectKeyIdentifierExtension getSubjectKeyIdentifierExtension()>();
        if r2 == null goto label3;

     label0:
        $r4 = virtualinvoke r2.<sun.security.x509.SubjectKeyIdentifierExtension: java.lang.Object get(java.lang.String)>("key_id");
        r3 = (sun.security.x509.KeyIdentifier) $r4;
        if r3 == null goto label1;

        r1 = virtualinvoke r3.<sun.security.x509.KeyIdentifier: byte[] getIdentifier()>();

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r6 = $r5;

     label3:
        return r1;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public sun.security.x509.CRLDistributionPointsExtension getCRLDistributionPointsExtension()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        sun.security.x509.Extension $r2;
        sun.security.x509.CRLDistributionPointsExtension $r3;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier CRLDistributionPoints_Id>;
        $r2 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>($r1);
        $r3 = (sun.security.x509.CRLDistributionPointsExtension) $r2;
        return $r3;
    }

    public boolean hasUnsupportedCriticalExtension()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.x509.CertificateExtensions r1;
        sun.security.x509.X509CertInfo $r2, $r3;
        java.lang.Object $r4;
        boolean $z0, $z1;
        java.lang.Exception $r5, r6;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r2 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r2 != null goto label0;

        return 0;

     label0:
        $r3 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r4 = virtualinvoke $r3.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("extensions");
        r1 = (sun.security.x509.CertificateExtensions) $r4;
        if r1 != null goto label2;

        $z0 = 0;

     label1:
        return $z0;

     label2:
        $z1 = virtualinvoke r1.<sun.security.x509.CertificateExtensions: boolean hasUnsupportedCriticalExtension()>();

     label3:
        return $z1;

     label4:
        $r5 := @caughtexception;
        r6 = $r5;
        return 0;

        catch java.lang.Exception from label0 to label1 with label4;
        catch java.lang.Exception from label2 to label3 with label4;
    }

    public java.util.Set getCriticalExtensionOIDs()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.x509.CertificateExtensions r1;
        java.util.TreeSet r2, $r8;
        java.util.Iterator r3;
        sun.security.x509.Extension r4;
        sun.security.x509.X509CertInfo $r5, $r6;
        java.lang.Object $r7, $r10;
        null_type $n0;
        java.util.Collection $r9;
        boolean $z0, $z1;
        sun.security.util.ObjectIdentifier $r11;
        java.lang.String $r12;
        java.lang.Exception $r14, r15;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r5 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r5 != null goto label0;

        return null;

     label0:
        $r6 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r7 = virtualinvoke $r6.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("extensions");
        r1 = (sun.security.x509.CertificateExtensions) $r7;
        if r1 != null goto label2;

        $n0 = null;

     label1:
        return $n0;

     label2:
        $r8 = new java.util.TreeSet;
        specialinvoke $r8.<java.util.TreeSet: void <init>()>();
        r2 = $r8;
        $r9 = virtualinvoke r1.<sun.security.x509.CertificateExtensions: java.util.Collection getAllExtensions()>();
        r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label5;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (sun.security.x509.Extension) $r10;
        $z1 = virtualinvoke r4.<sun.security.x509.Extension: boolean isCritical()>();
        if $z1 == 0 goto label4;

        $r11 = virtualinvoke r4.<sun.security.x509.Extension: sun.security.util.ObjectIdentifier getExtensionId()>();
        $r12 = virtualinvoke $r11.<sun.security.util.ObjectIdentifier: java.lang.String toString()>();
        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r12);

     label4:
        goto label3;

     label5:
        return r2;

     label6:
        $r14 := @caughtexception;
        r15 = $r14;
        return null;

        catch java.lang.Exception from label0 to label1 with label6;
        catch java.lang.Exception from label2 to label5 with label6;
    }

    public java.util.Set getNonCriticalExtensionOIDs()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.x509.CertificateExtensions r1;
        java.util.TreeSet r2, $r8;
        java.util.Iterator r3;
        sun.security.x509.Extension r4;
        sun.security.x509.X509CertInfo $r5, $r6;
        java.lang.Object $r7, $r10;
        null_type $n0;
        java.util.Collection $r9;
        boolean $z0, $z1;
        sun.security.util.ObjectIdentifier $r11;
        java.lang.String $r12;
        java.util.Map $r13;
        java.util.Set $r14;
        java.lang.Exception $r16, r17;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r5 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r5 != null goto label0;

        return null;

     label0:
        $r6 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r7 = virtualinvoke $r6.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("extensions");
        r1 = (sun.security.x509.CertificateExtensions) $r7;
        if r1 != null goto label2;

        $n0 = null;

     label1:
        return $n0;

     label2:
        $r8 = new java.util.TreeSet;
        specialinvoke $r8.<java.util.TreeSet: void <init>()>();
        r2 = $r8;
        $r9 = virtualinvoke r1.<sun.security.x509.CertificateExtensions: java.util.Collection getAllExtensions()>();
        r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label5;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (sun.security.x509.Extension) $r10;
        $z1 = virtualinvoke r4.<sun.security.x509.Extension: boolean isCritical()>();
        if $z1 != 0 goto label4;

        $r11 = virtualinvoke r4.<sun.security.x509.Extension: sun.security.util.ObjectIdentifier getExtensionId()>();
        $r12 = virtualinvoke $r11.<sun.security.util.ObjectIdentifier: java.lang.String toString()>();
        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r12);

     label4:
        goto label3;

     label5:
        $r13 = virtualinvoke r1.<sun.security.x509.CertificateExtensions: java.util.Map getUnparseableExtensions()>();
        $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Set keySet()>();
        interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>($r14);

     label6:
        return r2;

     label7:
        $r16 := @caughtexception;
        r17 = $r16;
        return null;

        catch java.lang.Exception from label0 to label1 with label7;
        catch java.lang.Exception from label2 to label6 with label7;
    }

    public sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.ObjectIdentifier r1, $r15;
        sun.security.x509.CertificateExtensions r2;
        java.security.cert.CertificateException r3, $r9;
        java.util.Iterator r4;
        sun.security.x509.Extension r5, r11;
        sun.security.x509.X509CertInfo $r6, $r7;
        java.lang.Object $r8, $r14;
        null_type $n0, $n1, $n2;
        java.lang.String $r10;
        java.util.Collection $r13;
        boolean $z0, $z1;
        java.io.IOException $r17, r18;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: sun.security.util.ObjectIdentifier;
        $r6 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r6 != null goto label0;

        return null;

     label0:
        $r7 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r8 = virtualinvoke $r7.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("extensions");
        r2 = (sun.security.x509.CertificateExtensions) $r8;

     label1:
        goto label4;

     label2:
        $r9 := @caughtexception;
        r3 = $r9;
        $n0 = null;

     label3:
        return $n0;

     label4:
        if r2 != null goto label6;

        $n1 = null;

     label5:
        return $n1;

     label6:
        $r10 = virtualinvoke r1.<sun.security.util.ObjectIdentifier: java.lang.String toString()>();
        r11 = virtualinvoke r2.<sun.security.x509.CertificateExtensions: sun.security.x509.Extension getExtension(java.lang.String)>($r10);
        if r11 == null goto label8;

     label7:
        return r11;

     label8:
        $r13 = virtualinvoke r2.<sun.security.x509.CertificateExtensions: java.util.Collection getAllExtensions()>();
        r4 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label9:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label12;

        $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (sun.security.x509.Extension) $r14;
        $r15 = virtualinvoke r5.<sun.security.x509.Extension: sun.security.util.ObjectIdentifier getExtensionId()>();
        $z1 = virtualinvoke $r15.<sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>(r1);
        if $z1 == 0 goto label11;

     label10:
        return r5;

     label11:
        goto label9;

     label12:
        $n2 = null;

     label13:
        return $n2;

     label14:
        $r17 := @caughtexception;
        r18 = $r17;
        return null;

        catch java.security.cert.CertificateException from label0 to label1 with label2;
        catch java.io.IOException from label0 to label3 with label14;
        catch java.io.IOException from label4 to label5 with label14;
        catch java.io.IOException from label6 to label7 with label14;
        catch java.io.IOException from label8 to label10 with label14;
        catch java.io.IOException from label11 to label13 with label14;
    }

    public sun.security.x509.Extension getUnparseableExtension(sun.security.util.ObjectIdentifier)
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.ObjectIdentifier r1;
        sun.security.x509.CertificateExtensions r2;
        java.security.cert.CertificateException r3, $r7;
        sun.security.x509.X509CertInfo $r4, $r5;
        java.lang.Object $r6, $r10;
        null_type $n0, $n1;
        java.util.Map $r8;
        java.lang.String $r9;
        sun.security.x509.Extension $r11;
        java.io.IOException $r12, r13;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: sun.security.util.ObjectIdentifier;
        $r4 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        if $r4 != null goto label0;

        return null;

     label0:
        $r5 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r6 = virtualinvoke $r5.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("extensions");
        r2 = (sun.security.x509.CertificateExtensions) $r6;

     label1:
        goto label4;

     label2:
        $r7 := @caughtexception;
        r3 = $r7;
        $n0 = null;

     label3:
        return $n0;

     label4:
        if r2 != null goto label6;

        $n1 = null;

     label5:
        return $n1;

     label6:
        $r8 = virtualinvoke r2.<sun.security.x509.CertificateExtensions: java.util.Map getUnparseableExtensions()>();
        $r9 = virtualinvoke r1.<sun.security.util.ObjectIdentifier: java.lang.String toString()>();
        $r10 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);
        $r11 = (sun.security.x509.Extension) $r10;

     label7:
        return $r11;

     label8:
        $r12 := @caughtexception;
        r13 = $r12;
        return null;

        catch java.security.cert.CertificateException from label0 to label1 with label2;
        catch java.io.IOException from label0 to label3 with label8;
        catch java.io.IOException from label4 to label5 with label8;
        catch java.io.IOException from label6 to label7 with label8;
    }

    public byte[] getExtensionValue(java.lang.String)
    {
        sun.security.x509.X509CertImpl r0;
        java.lang.String r1, r4;
        sun.security.util.ObjectIdentifier $r2, r3, r9;
        sun.security.x509.Extension r5, r8;
        sun.security.x509.CertificateExtensions r6;
        java.util.Iterator r7;
        sun.security.x509.X509CertInfo $r10;
        java.lang.Object $r11, $r13, $r14, $r18;
        null_type $n0, $n1, $n2;
        java.util.Collection $r12;
        boolean $z0, $z1;
        java.security.cert.CertificateException $r15, r16;
        java.util.Map $r17;
        byte[] r19, $r22;
        sun.security.util.DerOutputStream $r20, r21;
        java.lang.Exception $r23, r24;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: java.lang.String;

     label0:
        $r2 = new sun.security.util.ObjectIdentifier;
        specialinvoke $r2.<sun.security.util.ObjectIdentifier: void <init>(java.lang.String)>(r1);
        r3 = $r2;
        r4 = staticinvoke <sun.security.x509.OIDMap: java.lang.String getName(sun.security.util.ObjectIdentifier)>(r3);
        r5 = null;
        $r10 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r11 = virtualinvoke $r10.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("extensions");
        r6 = (sun.security.x509.CertificateExtensions) $r11;
        if r4 != null goto label6;

        if r6 != null goto label2;

        $n0 = null;

     label1:
        return $n0;

     label2:
        $r12 = virtualinvoke r6.<sun.security.x509.CertificateExtensions: java.util.Collection getAllExtensions()>();
        r7 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label5;

        $r13 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();
        r8 = (sun.security.x509.Extension) $r13;
        r9 = virtualinvoke r8.<sun.security.x509.Extension: sun.security.util.ObjectIdentifier getExtensionId()>();
        $z1 = virtualinvoke r9.<sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>(r3);
        if $z1 == 0 goto label4;

        r5 = r8;
        goto label5;

     label4:
        goto label3;

     label5:
        goto label9;

     label6:
        $r14 = virtualinvoke r0.<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>(r4);
        r5 = (sun.security.x509.Extension) $r14;

     label7:
        goto label9;

     label8:
        $r15 := @caughtexception;
        r16 = $r15;

     label9:
        if r5 != null goto label12;

        if r6 == null goto label10;

        $r17 = virtualinvoke r6.<sun.security.x509.CertificateExtensions: java.util.Map getUnparseableExtensions()>();
        $r18 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        r5 = (sun.security.x509.Extension) $r18;

     label10:
        if r5 != null goto label12;

        $n1 = null;

     label11:
        return $n1;

     label12:
        r19 = virtualinvoke r5.<sun.security.x509.Extension: byte[] getExtensionValue()>();
        if r19 != null goto label14;

        $n2 = null;

     label13:
        return $n2;

     label14:
        $r20 = new sun.security.util.DerOutputStream;
        specialinvoke $r20.<sun.security.util.DerOutputStream: void <init>()>();
        r21 = $r20;
        virtualinvoke r21.<sun.security.util.DerOutputStream: void putOctetString(byte[])>(r19);
        $r22 = virtualinvoke r21.<sun.security.util.DerOutputStream: byte[] toByteArray()>();

     label15:
        return $r22;

     label16:
        $r23 := @caughtexception;
        r24 = $r23;
        return null;

        catch java.security.cert.CertificateException from label6 to label7 with label8;
        catch java.lang.Exception from label0 to label1 with label16;
        catch java.lang.Exception from label2 to label11 with label16;
        catch java.lang.Exception from label12 to label13 with label16;
        catch java.lang.Exception from label14 to label15 with label16;
    }

    public boolean[] getKeyUsage()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        java.lang.String r2;
        sun.security.x509.KeyUsageExtension r3;
        boolean[] r4, r5;
        null_type $n0, $n1;
        java.lang.Object $r6;
        int $i0, $i1;
        java.lang.Exception $r8, r9;

        r0 := @this: sun.security.x509.X509CertImpl;

     label0:
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier KeyUsage_Id>;
        r2 = staticinvoke <sun.security.x509.OIDMap: java.lang.String getName(sun.security.util.ObjectIdentifier)>($r1);
        if r2 != null goto label2;

        $n0 = null;

     label1:
        return $n0;

     label2:
        $r6 = virtualinvoke r0.<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>(r2);
        r3 = (sun.security.x509.KeyUsageExtension) $r6;
        if r3 != null goto label4;

        $n1 = null;

     label3:
        return $n1;

     label4:
        r4 = virtualinvoke r3.<sun.security.x509.KeyUsageExtension: boolean[] getBits()>();
        $i0 = lengthof r4;
        if $i0 >= 9 goto label5;

        r5 = newarray (boolean)[9];
        $i1 = lengthof r4;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r5, 0, $i1);
        r4 = r5;

     label5:
        return r4;

     label6:
        $r8 := @caughtexception;
        r9 = $r8;
        return null;

        catch java.lang.Exception from label0 to label1 with label6;
        catch java.lang.Exception from label2 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public synchronized java.util.List getExtendedKeyUsage() throws java.security.cert.CertificateParsingException
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.x509.ExtendedKeyUsageExtension r1;
        boolean $z0;
        java.util.List $r2, $r3, $r4, $r5, $r6;

        r0 := @this: sun.security.x509.X509CertImpl;
        $z0 = r0.<sun.security.x509.X509CertImpl: boolean readOnly>;
        if $z0 == 0 goto label0;

        $r2 = r0.<sun.security.x509.X509CertImpl: java.util.List extKeyUsage>;
        if $r2 == null goto label0;

        $r3 = r0.<sun.security.x509.X509CertImpl: java.util.List extKeyUsage>;
        return $r3;

     label0:
        r1 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.ExtendedKeyUsageExtension getExtendedKeyUsageExtension()>();
        if r1 != null goto label1;

        return null;

     label1:
        $r4 = virtualinvoke r1.<sun.security.x509.ExtendedKeyUsageExtension: java.util.List getExtendedKeyUsage()>();
        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r4);
        r0.<sun.security.x509.X509CertImpl: java.util.List extKeyUsage> = $r5;
        $r6 = r0.<sun.security.x509.X509CertImpl: java.util.List extKeyUsage>;
        return $r6;
    }

    public static java.util.List getExtendedKeyUsage(java.security.cert.X509Certificate) throws java.security.cert.CertificateParsingException
    {
        java.security.cert.X509Certificate r0;
        byte[] r1, r3;
        sun.security.util.DerValue r2, $r5;
        sun.security.x509.ExtendedKeyUsageExtension r4, $r6;
        null_type $n0;
        java.lang.Boolean $r7;
        java.util.List $r8, $r9;
        java.io.IOException $r10, r11;
        java.security.cert.CertificateParsingException $r12;

        r0 := @parameter0: java.security.cert.X509Certificate;

     label0:
        r1 = virtualinvoke r0.<java.security.cert.X509Certificate: byte[] getExtensionValue(java.lang.String)>("2.5.29.37");
        if r1 != null goto label2;

        $n0 = null;

     label1:
        return $n0;

     label2:
        $r5 = new sun.security.util.DerValue;
        specialinvoke $r5.<sun.security.util.DerValue: void <init>(byte[])>(r1);
        r2 = $r5;
        r3 = virtualinvoke r2.<sun.security.util.DerValue: byte[] getOctetString()>();
        $r6 = new sun.security.x509.ExtendedKeyUsageExtension;
        $r7 = <java.lang.Boolean: java.lang.Boolean FALSE>;
        specialinvoke $r6.<sun.security.x509.ExtendedKeyUsageExtension: void <init>(java.lang.Boolean,java.lang.Object)>($r7, r3);
        r4 = $r6;
        $r8 = virtualinvoke r4.<sun.security.x509.ExtendedKeyUsageExtension: java.util.List getExtendedKeyUsage()>();
        $r9 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r8);

     label3:
        return $r9;

     label4:
        $r10 := @caughtexception;
        r11 = $r10;
        $r12 = new java.security.cert.CertificateParsingException;
        specialinvoke $r12.<java.security.cert.CertificateParsingException: void <init>(java.lang.Throwable)>(r11);
        throw $r12;

        catch java.io.IOException from label0 to label1 with label4;
        catch java.io.IOException from label2 to label3 with label4;
    }

    public int getBasicConstraints()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        java.lang.String r2;
        sun.security.x509.BasicConstraintsExtension r3;
        byte $b0, $b1, $b3;
        java.lang.Object $r4, $r5, $r7;
        java.lang.Boolean $r6;
        boolean $z0;
        java.lang.Integer $r8;
        int $i2;
        java.lang.Exception $r9, r10;

        r0 := @this: sun.security.x509.X509CertImpl;

     label0:
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier BasicConstraints_Id>;
        r2 = staticinvoke <sun.security.x509.OIDMap: java.lang.String getName(sun.security.util.ObjectIdentifier)>($r1);
        if r2 != null goto label2;

        $b0 = -1;

     label1:
        return $b0;

     label2:
        $r4 = virtualinvoke r0.<sun.security.x509.X509CertImpl: java.lang.Object get(java.lang.String)>(r2);
        r3 = (sun.security.x509.BasicConstraintsExtension) $r4;
        if r3 != null goto label4;

        $b1 = -1;

     label3:
        return $b1;

     label4:
        $r5 = virtualinvoke r3.<sun.security.x509.BasicConstraintsExtension: java.lang.Object get(java.lang.String)>("is_ca");
        $r6 = (java.lang.Boolean) $r5;
        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();
        if $z0 != 1 goto label6;

        $r7 = virtualinvoke r3.<sun.security.x509.BasicConstraintsExtension: java.lang.Object get(java.lang.String)>("path_len");
        $r8 = (java.lang.Integer) $r7;
        $i2 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

     label5:
        return $i2;

     label6:
        $b3 = -1;

     label7:
        return $b3;

     label8:
        $r9 := @caughtexception;
        r10 = $r9;
        return -1;

        catch java.lang.Exception from label0 to label1 with label8;
        catch java.lang.Exception from label2 to label3 with label8;
        catch java.lang.Exception from label4 to label5 with label8;
        catch java.lang.Exception from label6 to label7 with label8;
    }

    private static java.util.Collection makeAltNames(sun.security.x509.GeneralNames)
    {
        sun.security.x509.GeneralNames r0;
        java.util.ArrayList r1, r5, $r9, $r12;
        java.util.Iterator r2;
        sun.security.x509.GeneralName r3;
        sun.security.x509.GeneralNameInterface r4;
        java.io.IOException r6, r7, $r24, $r31;
        boolean $z0, $z1;
        java.util.Set $r8;
        java.util.List $r10, $r34;
        java.lang.Object $r11;
        int $i0, $i1;
        java.lang.Integer $r13;
        sun.security.x509.RFC822Name $r14;
        java.lang.String $r15, $r17, $r19, $r21, $r23, $r28;
        sun.security.x509.DNSName $r16;
        sun.security.x509.X500Name $r18;
        sun.security.x509.URIName $r20;
        sun.security.x509.IPAddressName $r22;
        java.lang.RuntimeException $r25, $r32;
        sun.security.x509.OIDName $r26;
        sun.security.util.ObjectIdentifier $r27;
        sun.security.util.DerOutputStream $r29, r30;
        byte[] $r33;
        java.util.Collection $r35;

        r0 := @parameter0: sun.security.x509.GeneralNames;
        $z0 = virtualinvoke r0.<sun.security.x509.GeneralNames: boolean isEmpty()>();
        if $z0 == 0 goto label0;

        $r8 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
        return $r8;

     label0:
        $r9 = new java.util.ArrayList;
        specialinvoke $r9.<java.util.ArrayList: void <init>()>();
        r1 = $r9;
        $r10 = virtualinvoke r0.<sun.security.x509.GeneralNames: java.util.List names()>();
        r2 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label16;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (sun.security.x509.GeneralName) $r11;
        r4 = virtualinvoke r3.<sun.security.x509.GeneralName: sun.security.x509.GeneralNameInterface getName()>();
        $r12 = new java.util.ArrayList;
        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>(2);
        r5 = $r12;
        $i0 = interfaceinvoke r4.<sun.security.x509.GeneralNameInterface: int getType()>();
        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r13);
        $i1 = interfaceinvoke r4.<sun.security.x509.GeneralNameInterface: int getType()>();
        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label10;
            case 4: goto label4;
            case 5: goto label10;
            case 6: goto label5;
            case 7: goto label6;
            case 8: goto label9;
            default: goto label10;
        };

     label2:
        $r14 = (sun.security.x509.RFC822Name) r4;
        $r15 = virtualinvoke $r14.<sun.security.x509.RFC822Name: java.lang.String getName()>();
        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r15);
        goto label15;

     label3:
        $r16 = (sun.security.x509.DNSName) r4;
        $r17 = virtualinvoke $r16.<sun.security.x509.DNSName: java.lang.String getName()>();
        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r17);
        goto label15;

     label4:
        $r18 = (sun.security.x509.X500Name) r4;
        $r19 = virtualinvoke $r18.<sun.security.x509.X500Name: java.lang.String getRFC2253Name()>();
        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r19);
        goto label15;

     label5:
        $r20 = (sun.security.x509.URIName) r4;
        $r21 = virtualinvoke $r20.<sun.security.x509.URIName: java.lang.String getName()>();
        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r21);
        goto label15;

     label6:
        $r22 = (sun.security.x509.IPAddressName) r4;
        $r23 = virtualinvoke $r22.<sun.security.x509.IPAddressName: java.lang.String getName()>();
        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r23);

     label7:
        goto label15;

     label8:
        $r24 := @caughtexception;
        r6 = $r24;
        $r25 = new java.lang.RuntimeException;
        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("IPAddress cannot be parsed", r6);
        throw $r25;

     label9:
        $r26 = (sun.security.x509.OIDName) r4;
        $r27 = virtualinvoke $r26.<sun.security.x509.OIDName: sun.security.util.ObjectIdentifier getOID()>();
        $r28 = virtualinvoke $r27.<sun.security.util.ObjectIdentifier: java.lang.String toString()>();
        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r28);
        goto label15;

     label10:
        $r29 = new sun.security.util.DerOutputStream;
        specialinvoke $r29.<sun.security.util.DerOutputStream: void <init>()>();
        r30 = $r29;

     label11:
        interfaceinvoke r4.<sun.security.x509.GeneralNameInterface: void encode(sun.security.util.DerOutputStream)>(r30);

     label12:
        goto label14;

     label13:
        $r31 := @caughtexception;
        r7 = $r31;
        $r32 = new java.lang.RuntimeException;
        specialinvoke $r32.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("name cannot be encoded", r7);
        throw $r32;

     label14:
        $r33 = virtualinvoke r30.<sun.security.util.DerOutputStream: byte[] toByteArray()>();
        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r33);

     label15:
        $r34 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r5);
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r34);
        goto label1;

     label16:
        $r35 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>(r1);
        return $r35;

        catch java.io.IOException from label6 to label7 with label8;
        catch java.io.IOException from label11 to label12 with label13;
    }

    private static java.util.Collection cloneAltNames(java.util.Collection)
    {
        java.util.Collection r0, $r18;
        boolean z0, $z1, $z2, $z3, $z4;
        java.util.Iterator r1, r10;
        java.util.List r2, r3, $r17;
        java.lang.Object r4, $r6, $r7, $r11, $r15;
        java.util.ArrayList r5, $r8, r9, $r12;
        byte[] $r13, $r14;

        r0 := @parameter0: java.util.Collection;
        z0 = 0;
        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label0:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label2;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        r2 = (java.util.List) $r6;
        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(1);
        $z2 = $r7 instanceof byte[];
        if $z2 == 0 goto label1;

        z0 = 1;

     label1:
        goto label0;

     label2:
        if z0 == 0 goto label7;

        $r8 = new java.util.ArrayList;
        specialinvoke $r8.<java.util.ArrayList: void <init>()>();
        r9 = $r8;
        r10 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();
        if $z3 == 0 goto label6;

        $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.util.List) $r11;
        r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(1);
        $z4 = r4 instanceof byte[];
        if $z4 == 0 goto label4;

        $r12 = new java.util.ArrayList;
        specialinvoke $r12.<java.util.ArrayList: void <init>(java.util.Collection)>(r3);
        r5 = $r12;
        $r13 = (byte[]) r4;
        $r14 = (byte[]) $r13;
        $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.Object clone()>();
        interfaceinvoke r5.<java.util.List: java.lang.Object set(int,java.lang.Object)>(1, $r15);
        $r17 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r5);
        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r17);
        goto label5;

     label4:
        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>(r3);

     label5:
        goto label3;

     label6:
        $r18 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>(r9);
        return $r18;

     label7:
        return r0;
    }

    public synchronized java.util.Collection getSubjectAlternativeNames() throws java.security.cert.CertificateParsingException
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.x509.SubjectAlternativeNameExtension r1;
        sun.security.x509.GeneralNames r2;
        java.io.IOException r3, $r8;
        boolean $z0;
        java.util.Collection $r4, $r5, $r6, $r10, $r11;
        java.lang.Object $r7;
        java.util.Set $r9;

        r0 := @this: sun.security.x509.X509CertImpl;
        $z0 = r0.<sun.security.x509.X509CertImpl: boolean readOnly>;
        if $z0 == 0 goto label0;

        $r4 = r0.<sun.security.x509.X509CertImpl: java.util.Collection subjectAlternativeNames>;
        if $r4 == null goto label0;

        $r5 = r0.<sun.security.x509.X509CertImpl: java.util.Collection subjectAlternativeNames>;
        $r6 = staticinvoke <sun.security.x509.X509CertImpl: java.util.Collection cloneAltNames(java.util.Collection)>($r5);
        return $r6;

     label0:
        r1 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.SubjectAlternativeNameExtension getSubjectAlternativeNameExtension()>();
        if r1 != null goto label1;

        return null;

     label1:
        $r7 = virtualinvoke r1.<sun.security.x509.SubjectAlternativeNameExtension: java.lang.Object get(java.lang.String)>("subject_name");
        r2 = (sun.security.x509.GeneralNames) $r7;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;
        r3 = $r8;
        $r9 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
        return $r9;

     label4:
        $r10 = staticinvoke <sun.security.x509.X509CertImpl: java.util.Collection makeAltNames(sun.security.x509.GeneralNames)>(r2);
        r0.<sun.security.x509.X509CertImpl: java.util.Collection subjectAlternativeNames> = $r10;
        $r11 = r0.<sun.security.x509.X509CertImpl: java.util.Collection subjectAlternativeNames>;
        return $r11;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.util.Collection getSubjectAlternativeNames(java.security.cert.X509Certificate) throws java.security.cert.CertificateParsingException
    {
        java.security.cert.X509Certificate r0;
        byte[] r1, r3;
        sun.security.util.DerValue r2, $r7;
        sun.security.x509.SubjectAlternativeNameExtension r4, $r8;
        sun.security.x509.GeneralNames r5;
        java.io.IOException r6, $r11, $r14, r15;
        null_type $n0;
        java.lang.Boolean $r9;
        java.lang.Object $r10;
        java.util.Set $r12;
        java.util.Collection $r13;
        java.security.cert.CertificateParsingException $r16;

        r0 := @parameter0: java.security.cert.X509Certificate;

     label0:
        r1 = virtualinvoke r0.<java.security.cert.X509Certificate: byte[] getExtensionValue(java.lang.String)>("2.5.29.17");
        if r1 != null goto label2;

        $n0 = null;

     label1:
        return $n0;

     label2:
        $r7 = new sun.security.util.DerValue;
        specialinvoke $r7.<sun.security.util.DerValue: void <init>(byte[])>(r1);
        r2 = $r7;
        r3 = virtualinvoke r2.<sun.security.util.DerValue: byte[] getOctetString()>();
        $r8 = new sun.security.x509.SubjectAlternativeNameExtension;
        $r9 = <java.lang.Boolean: java.lang.Boolean FALSE>;
        specialinvoke $r8.<sun.security.x509.SubjectAlternativeNameExtension: void <init>(java.lang.Boolean,java.lang.Object)>($r9, r3);
        r4 = $r8;

     label3:
        $r10 = virtualinvoke r4.<sun.security.x509.SubjectAlternativeNameExtension: java.lang.Object get(java.lang.String)>("subject_name");
        r5 = (sun.security.x509.GeneralNames) $r10;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;
        r6 = $r11;
        $r12 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

     label6:
        return $r12;

     label7:
        $r13 = staticinvoke <sun.security.x509.X509CertImpl: java.util.Collection makeAltNames(sun.security.x509.GeneralNames)>(r5);

     label8:
        return $r13;

     label9:
        $r14 := @caughtexception;
        r15 = $r14;
        $r16 = new java.security.cert.CertificateParsingException;
        specialinvoke $r16.<java.security.cert.CertificateParsingException: void <init>(java.lang.Throwable)>(r15);
        throw $r16;

        catch java.io.IOException from label3 to label4 with label5;
        catch java.io.IOException from label0 to label1 with label9;
        catch java.io.IOException from label2 to label6 with label9;
        catch java.io.IOException from label7 to label8 with label9;
    }

    public synchronized java.util.Collection getIssuerAlternativeNames() throws java.security.cert.CertificateParsingException
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.x509.IssuerAlternativeNameExtension r1;
        sun.security.x509.GeneralNames r2;
        java.io.IOException r3, $r8;
        boolean $z0;
        java.util.Collection $r4, $r5, $r6, $r10, $r11;
        java.lang.Object $r7;
        java.util.Set $r9;

        r0 := @this: sun.security.x509.X509CertImpl;
        $z0 = r0.<sun.security.x509.X509CertImpl: boolean readOnly>;
        if $z0 == 0 goto label0;

        $r4 = r0.<sun.security.x509.X509CertImpl: java.util.Collection issuerAlternativeNames>;
        if $r4 == null goto label0;

        $r5 = r0.<sun.security.x509.X509CertImpl: java.util.Collection issuerAlternativeNames>;
        $r6 = staticinvoke <sun.security.x509.X509CertImpl: java.util.Collection cloneAltNames(java.util.Collection)>($r5);
        return $r6;

     label0:
        r1 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.IssuerAlternativeNameExtension getIssuerAlternativeNameExtension()>();
        if r1 != null goto label1;

        return null;

     label1:
        $r7 = virtualinvoke r1.<sun.security.x509.IssuerAlternativeNameExtension: java.lang.Object get(java.lang.String)>("issuer_name");
        r2 = (sun.security.x509.GeneralNames) $r7;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;
        r3 = $r8;
        $r9 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
        return $r9;

     label4:
        $r10 = staticinvoke <sun.security.x509.X509CertImpl: java.util.Collection makeAltNames(sun.security.x509.GeneralNames)>(r2);
        r0.<sun.security.x509.X509CertImpl: java.util.Collection issuerAlternativeNames> = $r10;
        $r11 = r0.<sun.security.x509.X509CertImpl: java.util.Collection issuerAlternativeNames>;
        return $r11;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.util.Collection getIssuerAlternativeNames(java.security.cert.X509Certificate) throws java.security.cert.CertificateParsingException
    {
        java.security.cert.X509Certificate r0;
        byte[] r1, r3;
        sun.security.util.DerValue r2, $r7;
        sun.security.x509.IssuerAlternativeNameExtension r4, $r8;
        sun.security.x509.GeneralNames r5;
        java.io.IOException r6, $r11, $r14, r15;
        null_type $n0;
        java.lang.Boolean $r9;
        java.lang.Object $r10;
        java.util.Set $r12;
        java.util.Collection $r13;
        java.security.cert.CertificateParsingException $r16;

        r0 := @parameter0: java.security.cert.X509Certificate;

     label0:
        r1 = virtualinvoke r0.<java.security.cert.X509Certificate: byte[] getExtensionValue(java.lang.String)>("2.5.29.18");
        if r1 != null goto label2;

        $n0 = null;

     label1:
        return $n0;

     label2:
        $r7 = new sun.security.util.DerValue;
        specialinvoke $r7.<sun.security.util.DerValue: void <init>(byte[])>(r1);
        r2 = $r7;
        r3 = virtualinvoke r2.<sun.security.util.DerValue: byte[] getOctetString()>();
        $r8 = new sun.security.x509.IssuerAlternativeNameExtension;
        $r9 = <java.lang.Boolean: java.lang.Boolean FALSE>;
        specialinvoke $r8.<sun.security.x509.IssuerAlternativeNameExtension: void <init>(java.lang.Boolean,java.lang.Object)>($r9, r3);
        r4 = $r8;

     label3:
        $r10 = virtualinvoke r4.<sun.security.x509.IssuerAlternativeNameExtension: java.lang.Object get(java.lang.String)>("issuer_name");
        r5 = (sun.security.x509.GeneralNames) $r10;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;
        r6 = $r11;
        $r12 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

     label6:
        return $r12;

     label7:
        $r13 = staticinvoke <sun.security.x509.X509CertImpl: java.util.Collection makeAltNames(sun.security.x509.GeneralNames)>(r5);

     label8:
        return $r13;

     label9:
        $r14 := @caughtexception;
        r15 = $r14;
        $r16 = new java.security.cert.CertificateParsingException;
        specialinvoke $r16.<java.security.cert.CertificateParsingException: void <init>(java.lang.Throwable)>(r15);
        throw $r16;

        catch java.io.IOException from label3 to label4 with label5;
        catch java.io.IOException from label0 to label1 with label9;
        catch java.io.IOException from label2 to label6 with label9;
        catch java.io.IOException from label7 to label8 with label9;
    }

    public sun.security.x509.AuthorityInfoAccessExtension getAuthorityInfoAccessExtension()
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.ObjectIdentifier $r1;
        sun.security.x509.Extension $r2;
        sun.security.x509.AuthorityInfoAccessExtension $r3;

        r0 := @this: sun.security.x509.X509CertImpl;
        $r1 = <sun.security.x509.PKIXExtensions: sun.security.util.ObjectIdentifier AuthInfoAccess_Id>;
        $r2 = virtualinvoke r0.<sun.security.x509.X509CertImpl: sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier)>($r1);
        $r3 = (sun.security.x509.AuthorityInfoAccessExtension) $r2;
        return $r3;
    }

    private void parse(sun.security.util.DerValue) throws java.security.cert.CertificateException, java.io.IOException
    {
        sun.security.x509.X509CertImpl r0;
        sun.security.util.DerValue r1, $r9, $r11, $r13, $r21, $r23, $r25, $r27, $r30, $r34;
        sun.security.util.DerValue[] r2;
        sun.security.x509.AlgorithmId r3, $r24, $r37;
        boolean $z0, $z1;
        java.security.cert.CertificateParsingException $r4, $r6, $r15, $r22, $r29, $r32;
        sun.security.util.DerInputStream $r5, $r8, $r10, $r12, $r14, $r18, $r28, $r31;
        byte $b0, $b3;
        byte[] $r7, $r26;
        int $i1, $i2, $i4, $i5;
        java.lang.StringBuilder $r16, $r17, $r19;
        java.lang.String $r20;
        sun.security.x509.X509CertInfo $r33, $r35;
        java.lang.Object $r36;
        java.security.cert.CertificateException $r38;

        r0 := @this: sun.security.x509.X509CertImpl;
        r1 := @parameter0: sun.security.util.DerValue;
        $z0 = r0.<sun.security.x509.X509CertImpl: boolean readOnly>;
        if $z0 == 0 goto label0;

        $r4 = new java.security.cert.CertificateParsingException;
        specialinvoke $r4.<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>("cannot over-write existing certificate");
        throw $r4;

     label0:
        $r5 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        if $r5 == null goto label1;

        $b0 = r1.<sun.security.util.DerValue: byte tag>;
        if $b0 == 48 goto label2;

     label1:
        $r6 = new java.security.cert.CertificateParsingException;
        specialinvoke $r6.<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>("invalid DER-encoded certificate data");
        throw $r6;

     label2:
        $r7 = virtualinvoke r1.<sun.security.util.DerValue: byte[] toByteArray()>();
        r0.<sun.security.x509.X509CertImpl: byte[] signedCert> = $r7;
        r2 = newarray (sun.security.util.DerValue)[3];
        $r8 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $r9 = virtualinvoke $r8.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        r2[0] = $r9;
        $r10 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $r11 = virtualinvoke $r10.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        r2[1] = $r11;
        $r12 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $r13 = virtualinvoke $r12.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        r2[2] = $r13;
        $r14 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $i1 = virtualinvoke $r14.<sun.security.util.DerInputStream: int available()>();
        if $i1 == 0 goto label3;

        $r15 = new java.security.cert.CertificateParsingException;
        $r16 = new java.lang.StringBuilder;
        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("signed overrun, bytes = ");
        $r18 = r1.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $i2 = virtualinvoke $r18.<sun.security.util.DerInputStream: int available()>();
        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r15.<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>($r20);
        throw $r15;

     label3:
        $r21 = r2[0];
        $b3 = $r21.<sun.security.util.DerValue: byte tag>;
        if $b3 == 48 goto label4;

        $r22 = new java.security.cert.CertificateParsingException;
        specialinvoke $r22.<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>("signed fields invalid");
        throw $r22;

     label4:
        $r23 = r2[1];
        $r24 = staticinvoke <sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId parse(sun.security.util.DerValue)>($r23);
        r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId> = $r24;
        $r25 = r2[2];
        $r26 = virtualinvoke $r25.<sun.security.util.DerValue: byte[] getBitString()>();
        r0.<sun.security.x509.X509CertImpl: byte[] signature> = $r26;
        $r27 = r2[1];
        $r28 = $r27.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $i4 = virtualinvoke $r28.<sun.security.util.DerInputStream: int available()>();
        if $i4 == 0 goto label5;

        $r29 = new java.security.cert.CertificateParsingException;
        specialinvoke $r29.<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>("algid field overrun");
        throw $r29;

     label5:
        $r30 = r2[2];
        $r31 = $r30.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        $i5 = virtualinvoke $r31.<sun.security.util.DerInputStream: int available()>();
        if $i5 == 0 goto label6;

        $r32 = new java.security.cert.CertificateParsingException;
        specialinvoke $r32.<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>("signed fields overrun");
        throw $r32;

     label6:
        $r33 = new sun.security.x509.X509CertInfo;
        $r34 = r2[0];
        specialinvoke $r33.<sun.security.x509.X509CertInfo: void <init>(sun.security.util.DerValue)>($r34);
        r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info> = $r33;
        $r35 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.X509CertInfo info>;
        $r36 = virtualinvoke $r35.<sun.security.x509.X509CertInfo: java.lang.Object get(java.lang.String)>("algorithmID.algorithm");
        r3 = (sun.security.x509.AlgorithmId) $r36;
        $r37 = r0.<sun.security.x509.X509CertImpl: sun.security.x509.AlgorithmId algId>;
        $z1 = virtualinvoke $r37.<sun.security.x509.AlgorithmId: boolean equals(sun.security.x509.AlgorithmId)>(r3);
        if $z1 != 0 goto label7;

        $r38 = new java.security.cert.CertificateException;
        specialinvoke $r38.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Signature algorithm mismatch");
        throw $r38;

     label7:
        r0.<sun.security.x509.X509CertImpl: boolean readOnly> = 1;
        return;
    }

    private static javax.security.auth.x500.X500Principal getX500Principal(java.security.cert.X509Certificate, boolean) throws java.lang.Exception
    {
        java.security.cert.X509Certificate r0;
        boolean z0, $z1;
        byte[] r1, r6;
        sun.security.util.DerInputStream r2, r4, $r7;
        sun.security.util.DerValue r3, r5, r11;
        sun.security.util.DerValue[] $r8;
        javax.security.auth.x500.X500Principal $r13;

        r0 := @parameter0: java.security.cert.X509Certificate;
        z0 := @parameter1: boolean;
        r1 = virtualinvoke r0.<java.security.cert.X509Certificate: byte[] getEncoded()>();
        $r7 = new sun.security.util.DerInputStream;
        specialinvoke $r7.<sun.security.util.DerInputStream: void <init>(byte[])>(r1);
        r2 = $r7;
        $r8 = virtualinvoke r2.<sun.security.util.DerInputStream: sun.security.util.DerValue[] getSequence(int)>(3);
        r3 = $r8[0];
        r4 = r3.<sun.security.util.DerValue: sun.security.util.DerInputStream data>;
        r5 = virtualinvoke r4.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        $z1 = virtualinvoke r5.<sun.security.util.DerValue: boolean isContextSpecific(byte)>(0);
        if $z1 == 0 goto label0;

        virtualinvoke r4.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();

     label0:
        virtualinvoke r4.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        r11 = virtualinvoke r4.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        if z0 != 0 goto label1;

        virtualinvoke r4.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();
        r11 = virtualinvoke r4.<sun.security.util.DerInputStream: sun.security.util.DerValue getDerValue()>();

     label1:
        r6 = virtualinvoke r11.<sun.security.util.DerValue: byte[] toByteArray()>();
        $r13 = new javax.security.auth.x500.X500Principal;
        specialinvoke $r13.<javax.security.auth.x500.X500Principal: void <init>(byte[])>(r6);
        return $r13;
    }

    public static javax.security.auth.x500.X500Principal getSubjectX500Principal(java.security.cert.X509Certificate)
    {
        java.security.cert.X509Certificate r0;
        java.lang.Exception r1, $r3;
        javax.security.auth.x500.X500Principal $r2;
        java.lang.RuntimeException $r4;

        r0 := @parameter0: java.security.cert.X509Certificate;

     label0:
        $r2 = staticinvoke <sun.security.x509.X509CertImpl: javax.security.auth.x500.X500Principal getX500Principal(java.security.cert.X509Certificate,boolean)>(r0, 0);

     label1:
        return $r2;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        $r4 = new java.lang.RuntimeException;
        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not parse subject", r1);
        throw $r4;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public static javax.security.auth.x500.X500Principal getIssuerX500Principal(java.security.cert.X509Certificate)
    {
        java.security.cert.X509Certificate r0;
        java.lang.Exception r1, $r3;
        javax.security.auth.x500.X500Principal $r2;
        java.lang.RuntimeException $r4;

        r0 := @parameter0: java.security.cert.X509Certificate;

     label0:
        $r2 = staticinvoke <sun.security.x509.X509CertImpl: javax.security.auth.x500.X500Principal getX500Principal(java.security.cert.X509Certificate,boolean)>(r0, 1);

     label1:
        return $r2;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        $r4 = new java.lang.RuntimeException;
        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not parse issuer", r1);
        throw $r4;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public static byte[] getEncodedInternal(java.security.cert.Certificate) throws java.security.cert.CertificateEncodingException
    {
        java.security.cert.Certificate r0;
        boolean $z0;
        sun.security.x509.X509CertImpl $r1;
        byte[] $r2, $r3;

        r0 := @parameter0: java.security.cert.Certificate;
        $z0 = r0 instanceof sun.security.x509.X509CertImpl;
        if $z0 == 0 goto label0;

        $r1 = (sun.security.x509.X509CertImpl) r0;
        $r2 = virtualinvoke $r1.<sun.security.x509.X509CertImpl: byte[] getEncodedInternal()>();
        return $r2;

     label0:
        $r3 = virtualinvoke r0.<java.security.cert.Certificate: byte[] getEncoded()>();
        return $r3;
    }

    public static sun.security.x509.X509CertImpl toImpl(java.security.cert.X509Certificate) throws java.security.cert.CertificateException
    {
        java.security.cert.X509Certificate r0;
        boolean $z0;
        sun.security.x509.X509CertImpl $r1, $r2;

        r0 := @parameter0: java.security.cert.X509Certificate;
        $z0 = r0 instanceof sun.security.x509.X509CertImpl;
        if $z0 == 0 goto label0;

        $r1 = (sun.security.x509.X509CertImpl) r0;
        return $r1;

     label0:
        $r2 = staticinvoke <sun.security.provider.X509Factory: sun.security.x509.X509CertImpl intern(java.security.cert.X509Certificate)>(r0);
        return $r2;
    }

    public static boolean isSelfIssued(java.security.cert.X509Certificate)
    {
        java.security.cert.X509Certificate r0;
        javax.security.auth.x500.X500Principal r1, r2;
        boolean $z0;

        r0 := @parameter0: java.security.cert.X509Certificate;
        r1 = virtualinvoke r0.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();
        r2 = virtualinvoke r0.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();
        $z0 = virtualinvoke r1.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>(r2);
        return $z0;
    }

    public static boolean isSelfSigned(java.security.cert.X509Certificate, java.lang.String)
    {
        java.security.cert.X509Certificate r0;
        java.lang.String r1;
        java.lang.Exception r2, $r5;
        boolean $z0, $z1;
        java.security.PublicKey $r3, $r4;

        r0 := @parameter0: java.security.cert.X509Certificate;
        r1 := @parameter1: java.lang.String;
        $z0 = staticinvoke <sun.security.x509.X509CertImpl: boolean isSelfIssued(java.security.cert.X509Certificate)>(r0);
        if $z0 == 0 goto label5;

     label0:
        if r1 != null goto label1;

        $r3 = virtualinvoke r0.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();
        virtualinvoke r0.<java.security.cert.X509Certificate: void verify(java.security.PublicKey)>($r3);
        goto label2;

     label1:
        $r4 = virtualinvoke r0.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();
        virtualinvoke r0.<java.security.cert.X509Certificate: void verify(java.security.PublicKey,java.lang.String)>($r4, r1);

     label2:
        $z1 = 1;

     label3:
        return $z1;

     label4:
        $r5 := @caughtexception;
        r2 = $r5;

     label5:
        return 0;

        catch java.lang.Exception from label0 to label3 with label4;
    }
}
