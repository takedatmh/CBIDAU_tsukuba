public final class java.util.Formatter extends java.lang.Object implements java.io.Closeable, java.io.Flushable
{
    private java.lang.Appendable a;
    private final java.util.Locale l;
    private java.io.IOException lastException;
    private final char zero;
    private static double scaleUp;
    private static final int MAX_FD_CHARS;
    private static final java.lang.String formatSpecifier;
    private static java.util.regex.Pattern fsPattern;

    private static java.nio.charset.Charset toCharset(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.lang.String r0;
        java.lang.IllegalArgumentException r1, $r4;
        java.nio.charset.Charset $r3;
        java.io.UnsupportedEncodingException $r5;

        r0 := @parameter0: java.lang.String;
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, "charsetName");

     label0:
        $r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r0);

     label1:
        return $r3;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        $r5 = new java.io.UnsupportedEncodingException;
        specialinvoke $r5.<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>(r0);
        throw $r5;

        catch java.nio.charset.IllegalCharsetNameException from label0 to label1 with label2;
        catch java.nio.charset.UnsupportedCharsetException from label0 to label1 with label2;
    }

    private static final java.lang.Appendable nonNullAppendable(java.lang.Appendable)
    {
        java.lang.Appendable r0;
        java.lang.StringBuilder $r1;

        r0 := @parameter0: java.lang.Appendable;
        if r0 != null goto label0;

        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        return $r1;

     label0:
        return r0;
    }

    private void <init>(java.util.Locale, java.lang.Appendable)
    {
        java.util.Formatter r0;
        java.util.Locale r1;
        java.lang.Appendable r2;
        char $c0;

        r0 := @this: java.util.Formatter;
        r1 := @parameter0: java.util.Locale;
        r2 := @parameter1: java.lang.Appendable;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.util.Formatter: java.lang.Appendable a> = r2;
        r0.<java.util.Formatter: java.util.Locale l> = r1;
        $c0 = staticinvoke <java.util.Formatter: char getZero(java.util.Locale)>(r1);
        r0.<java.util.Formatter: char zero> = $c0;
        return;
    }

    private void <init>(java.nio.charset.Charset, java.util.Locale, java.io.File) throws java.io.FileNotFoundException
    {
        java.util.Formatter r0;
        java.nio.charset.Charset r1;
        java.util.Locale r2;
        java.io.File r3;
        java.io.BufferedWriter $r4;
        java.io.OutputStreamWriter $r5;
        java.io.FileOutputStream $r6;

        r0 := @this: java.util.Formatter;
        r1 := @parameter0: java.nio.charset.Charset;
        r2 := @parameter1: java.util.Locale;
        r3 := @parameter2: java.io.File;
        $r4 = new java.io.BufferedWriter;
        $r5 = new java.io.OutputStreamWriter;
        $r6 = new java.io.FileOutputStream;
        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>(r3);
        specialinvoke $r5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r6, r1);
        specialinvoke $r4.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r5);
        specialinvoke r0.<java.util.Formatter: void <init>(java.util.Locale,java.lang.Appendable)>(r2, $r4);
        return;
    }

    public void <init>()
    {
        java.util.Formatter r0;
        java.util.Locale$Category $r1;
        java.lang.StringBuilder $r2;
        java.util.Locale $r3;

        r0 := @this: java.util.Formatter;
        $r1 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r1);
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        specialinvoke r0.<java.util.Formatter: void <init>(java.util.Locale,java.lang.Appendable)>($r3, $r2);
        return;
    }

    public void <init>(java.lang.Appendable)
    {
        java.util.Formatter r0;
        java.lang.Appendable r1, $r4;
        java.util.Locale$Category $r2;
        java.util.Locale $r3;

        r0 := @this: java.util.Formatter;
        r1 := @parameter0: java.lang.Appendable;
        $r2 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r2);
        $r4 = staticinvoke <java.util.Formatter: java.lang.Appendable nonNullAppendable(java.lang.Appendable)>(r1);
        specialinvoke r0.<java.util.Formatter: void <init>(java.util.Locale,java.lang.Appendable)>($r3, $r4);
        return;
    }

    public void <init>(java.util.Locale)
    {
        java.util.Formatter r0;
        java.util.Locale r1;
        java.lang.StringBuilder $r2;

        r0 := @this: java.util.Formatter;
        r1 := @parameter0: java.util.Locale;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        specialinvoke r0.<java.util.Formatter: void <init>(java.util.Locale,java.lang.Appendable)>(r1, $r2);
        return;
    }

    public void <init>(java.lang.Appendable, java.util.Locale)
    {
        java.util.Formatter r0;
        java.lang.Appendable r1, $r3;
        java.util.Locale r2;

        r0 := @this: java.util.Formatter;
        r1 := @parameter0: java.lang.Appendable;
        r2 := @parameter1: java.util.Locale;
        $r3 = staticinvoke <java.util.Formatter: java.lang.Appendable nonNullAppendable(java.lang.Appendable)>(r1);
        specialinvoke r0.<java.util.Formatter: void <init>(java.util.Locale,java.lang.Appendable)>(r2, $r3);
        return;
    }

    public void <init>(java.lang.String) throws java.io.FileNotFoundException
    {
        java.util.Formatter r0;
        java.lang.String r1;
        java.util.Locale$Category $r2;
        java.io.BufferedWriter $r3;
        java.io.OutputStreamWriter $r4;
        java.io.FileOutputStream $r5;
        java.util.Locale $r6;

        r0 := @this: java.util.Formatter;
        r1 := @parameter0: java.lang.String;
        $r2 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r6 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r2);
        $r3 = new java.io.BufferedWriter;
        $r4 = new java.io.OutputStreamWriter;
        $r5 = new java.io.FileOutputStream;
        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.lang.String)>(r1);
        specialinvoke $r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5);
        specialinvoke $r3.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r4);
        specialinvoke r0.<java.util.Formatter: void <init>(java.util.Locale,java.lang.Appendable)>($r6, $r3);
        return;
    }

    public void <init>(java.lang.String, java.lang.String) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    {
        java.util.Formatter r0;
        java.lang.String r1, r2;
        java.util.Locale$Category $r3;
        java.util.Locale $r4;

        r0 := @this: java.util.Formatter;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        $r3 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r3);
        specialinvoke r0.<java.util.Formatter: void <init>(java.lang.String,java.lang.String,java.util.Locale)>(r1, r2, $r4);
        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.util.Locale) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    {
        java.util.Formatter r0;
        java.lang.String r1, r2;
        java.util.Locale r3;
        java.io.File $r4;
        java.nio.charset.Charset $r5;

        r0 := @this: java.util.Formatter;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.util.Locale;
        $r5 = staticinvoke <java.util.Formatter: java.nio.charset.Charset toCharset(java.lang.String)>(r2);
        $r4 = new java.io.File;
        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r1);
        specialinvoke r0.<java.util.Formatter: void <init>(java.nio.charset.Charset,java.util.Locale,java.io.File)>($r5, r3, $r4);
        return;
    }

    public void <init>(java.io.File) throws java.io.FileNotFoundException
    {
        java.util.Formatter r0;
        java.io.File r1;
        java.util.Locale$Category $r2;
        java.io.BufferedWriter $r3;
        java.io.OutputStreamWriter $r4;
        java.io.FileOutputStream $r5;
        java.util.Locale $r6;

        r0 := @this: java.util.Formatter;
        r1 := @parameter0: java.io.File;
        $r2 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r6 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r2);
        $r3 = new java.io.BufferedWriter;
        $r4 = new java.io.OutputStreamWriter;
        $r5 = new java.io.FileOutputStream;
        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);
        specialinvoke $r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5);
        specialinvoke $r3.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r4);
        specialinvoke r0.<java.util.Formatter: void <init>(java.util.Locale,java.lang.Appendable)>($r6, $r3);
        return;
    }

    public void <init>(java.io.File, java.lang.String) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    {
        java.util.Formatter r0;
        java.io.File r1;
        java.lang.String r2;
        java.util.Locale$Category $r3;
        java.util.Locale $r4;

        r0 := @this: java.util.Formatter;
        r1 := @parameter0: java.io.File;
        r2 := @parameter1: java.lang.String;
        $r3 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r3);
        specialinvoke r0.<java.util.Formatter: void <init>(java.io.File,java.lang.String,java.util.Locale)>(r1, r2, $r4);
        return;
    }

    public void <init>(java.io.File, java.lang.String, java.util.Locale) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    {
        java.util.Formatter r0;
        java.io.File r1;
        java.lang.String r2;
        java.util.Locale r3;
        java.nio.charset.Charset $r4;

        r0 := @this: java.util.Formatter;
        r1 := @parameter0: java.io.File;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.util.Locale;
        $r4 = staticinvoke <java.util.Formatter: java.nio.charset.Charset toCharset(java.lang.String)>(r2);
        specialinvoke r0.<java.util.Formatter: void <init>(java.nio.charset.Charset,java.util.Locale,java.io.File)>($r4, r3, r1);
        return;
    }

    public void <init>(java.io.PrintStream)
    {
        java.util.Formatter r0;
        java.io.PrintStream r1;
        java.util.Locale$Category $r2;
        java.util.Locale $r3;
        java.lang.Object $r4;
        java.lang.Appendable $r5;

        r0 := @this: java.util.Formatter;
        r1 := @parameter0: java.io.PrintStream;
        $r2 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r2);
        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);
        $r5 = (java.lang.Appendable) $r4;
        specialinvoke r0.<java.util.Formatter: void <init>(java.util.Locale,java.lang.Appendable)>($r3, $r5);
        return;
    }

    public void <init>(java.io.OutputStream)
    {
        java.util.Formatter r0;
        java.io.OutputStream r1;
        java.util.Locale$Category $r2;
        java.io.BufferedWriter $r3;
        java.io.OutputStreamWriter $r4;
        java.util.Locale $r5;

        r0 := @this: java.util.Formatter;
        r1 := @parameter0: java.io.OutputStream;
        $r2 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r5 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r2);
        $r3 = new java.io.BufferedWriter;
        $r4 = new java.io.OutputStreamWriter;
        specialinvoke $r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r1);
        specialinvoke $r3.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r4);
        specialinvoke r0.<java.util.Formatter: void <init>(java.util.Locale,java.lang.Appendable)>($r5, $r3);
        return;
    }

    public void <init>(java.io.OutputStream, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.util.Formatter r0;
        java.io.OutputStream r1;
        java.lang.String r2;
        java.util.Locale$Category $r3;
        java.util.Locale $r4;

        r0 := @this: java.util.Formatter;
        r1 := @parameter0: java.io.OutputStream;
        r2 := @parameter1: java.lang.String;
        $r3 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;
        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r3);
        specialinvoke r0.<java.util.Formatter: void <init>(java.io.OutputStream,java.lang.String,java.util.Locale)>(r1, r2, $r4);
        return;
    }

    public void <init>(java.io.OutputStream, java.lang.String, java.util.Locale) throws java.io.UnsupportedEncodingException
    {
        java.util.Formatter r0;
        java.io.OutputStream r1;
        java.lang.String r2;
        java.util.Locale r3;
        java.io.BufferedWriter $r4;
        java.io.OutputStreamWriter $r5;

        r0 := @this: java.util.Formatter;
        r1 := @parameter0: java.io.OutputStream;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.util.Locale;
        $r4 = new java.io.BufferedWriter;
        $r5 = new java.io.OutputStreamWriter;
        specialinvoke $r5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r1, r2);
        specialinvoke $r4.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r5);
        specialinvoke r0.<java.util.Formatter: void <init>(java.util.Locale,java.lang.Appendable)>(r3, $r4);
        return;
    }

    private static char getZero(java.util.Locale)
    {
        java.util.Locale r0, $r1;
        java.text.DecimalFormatSymbols r2;
        boolean $z0;
        char $c0;

        r0 := @parameter0: java.util.Locale;
        if r0 == null goto label0;

        $r1 = <java.util.Locale: java.util.Locale US>;
        $z0 = virtualinvoke r0.<java.util.Locale: boolean equals(java.lang.Object)>($r1);
        if $z0 != 0 goto label0;

        r2 = staticinvoke <java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>(r0);
        $c0 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getZeroDigit()>();
        return $c0;

     label0:
        return 48;
    }

    public java.util.Locale locale()
    {
        java.util.Formatter r0;
        java.util.Locale $r1;

        r0 := @this: java.util.Formatter;
        specialinvoke r0.<java.util.Formatter: void ensureOpen()>();
        $r1 = r0.<java.util.Formatter: java.util.Locale l>;
        return $r1;
    }

    public java.lang.Appendable out()
    {
        java.util.Formatter r0;
        java.lang.Appendable $r1;

        r0 := @this: java.util.Formatter;
        specialinvoke r0.<java.util.Formatter: void ensureOpen()>();
        $r1 = r0.<java.util.Formatter: java.lang.Appendable a>;
        return $r1;
    }

    public java.lang.String toString()
    {
        java.util.Formatter r0;
        java.lang.Appendable $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Formatter;
        specialinvoke r0.<java.util.Formatter: void ensureOpen()>();
        $r1 = r0.<java.util.Formatter: java.lang.Appendable a>;
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();
        return $r2;
    }

    public void flush()
    {
        java.util.Formatter r0;
        java.io.IOException r1, $r5;
        java.lang.Appendable $r2, $r3;
        boolean $z0;
        java.io.Flushable $r4;

        r0 := @this: java.util.Formatter;
        specialinvoke r0.<java.util.Formatter: void ensureOpen()>();
        $r2 = r0.<java.util.Formatter: java.lang.Appendable a>;
        $z0 = $r2 instanceof java.io.Flushable;
        if $z0 == 0 goto label3;

     label0:
        $r3 = r0.<java.util.Formatter: java.lang.Appendable a>;
        $r4 = (java.io.Flushable) $r3;
        interfaceinvoke $r4.<java.io.Flushable: void flush()>();

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r1 = $r5;
        r0.<java.util.Formatter: java.io.IOException lastException> = r1;

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public void close()
    {
        java.util.Formatter r0;
        java.io.IOException r1, $r7;
        java.lang.Throwable r2, $r8;
        java.lang.Appendable $r3, $r4, $r5;
        boolean $z0;
        java.io.Closeable $r6;

        r0 := @this: java.util.Formatter;
        $r3 = r0.<java.util.Formatter: java.lang.Appendable a>;
        if $r3 != null goto label0;

        return;

     label0:
        $r4 = r0.<java.util.Formatter: java.lang.Appendable a>;
        $z0 = $r4 instanceof java.io.Closeable;
        if $z0 == 0 goto label1;

        $r5 = r0.<java.util.Formatter: java.lang.Appendable a>;
        $r6 = (java.io.Closeable) $r5;
        interfaceinvoke $r6.<java.io.Closeable: void close()>();

     label1:
        r0.<java.util.Formatter: java.lang.Appendable a> = null;
        goto label8;

     label2:
        $r7 := @caughtexception;

     label3:
        r1 = $r7;
        r0.<java.util.Formatter: java.io.IOException lastException> = r1;

     label4:
        r0.<java.util.Formatter: java.lang.Appendable a> = null;
        goto label8;

     label5:
        $r8 := @caughtexception;

     label6:
        r2 = $r8;

     label7:
        r0.<java.util.Formatter: java.lang.Appendable a> = null;
        throw r2;

     label8:
        return;

        catch java.io.IOException from label0 to label1 with label2;
        catch java.lang.Throwable from label0 to label1 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void ensureOpen()
    {
        java.util.Formatter r0;
        java.lang.Appendable $r1;
        java.util.FormatterClosedException $r2;

        r0 := @this: java.util.Formatter;
        $r1 = r0.<java.util.Formatter: java.lang.Appendable a>;
        if $r1 != null goto label0;

        $r2 = new java.util.FormatterClosedException;
        specialinvoke $r2.<java.util.FormatterClosedException: void <init>()>();
        throw $r2;

     label0:
        return;
    }

    public java.io.IOException ioException()
    {
        java.util.Formatter r0;
        java.io.IOException $r1;

        r0 := @this: java.util.Formatter;
        $r1 = r0.<java.util.Formatter: java.io.IOException lastException>;
        return $r1;
    }

    public transient java.util.Formatter format(java.lang.String, java.lang.Object[])
    {
        java.util.Formatter r0, $r4;
        java.lang.String r1;
        java.lang.Object[] r2;
        java.util.Locale $r3;

        r0 := @this: java.util.Formatter;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object[];
        $r3 = r0.<java.util.Formatter: java.util.Locale l>;
        $r4 = virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>($r3, r1, r2);
        return $r4;
    }

    public transient java.util.Formatter format(java.util.Locale, java.lang.String, java.lang.Object[])
    {
        java.util.Formatter r0;
        java.util.Locale r1;
        java.lang.String r2, $r8, $r12, $r16;
        java.lang.Object[] r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.util.Formatter$FormatString[] r4;
        java.util.Formatter$FormatString r5;
        java.io.IOException r6, $r19;
        java.util.MissingFormatArgumentException $r7, $r11, $r15;
        java.lang.Object $r10, $r14, $r18;

        r0 := @this: java.util.Formatter;
        r1 := @parameter0: java.util.Locale;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.Object[];
        specialinvoke r0.<java.util.Formatter: void ensureOpen()>();
        i0 = -1;
        i1 = -1;
        r4 = specialinvoke r0.<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>(r2);
        i2 = 0;

     label0:
        $i4 = lengthof r4;
        if i2 >= $i4 goto label19;

        r5 = r4[i2];
        i3 = interfaceinvoke r5.<java.util.Formatter$FormatString: int index()>();

     label1:
        tableswitch(i3)
        {
            case -2: goto label2;
            case -1: goto label3;
            case 0: goto label8;
            default: goto label12;
        };

     label2:
        interfaceinvoke r5.<java.util.Formatter$FormatString: void print(java.lang.Object,java.util.Locale)>(null, r1);
        goto label16;

     label3:
        if i0 < 0 goto label4;

        if r3 == null goto label5;

        $i5 = lengthof r3;
        $i6 = $i5 - 1;
        if i0 <= $i6 goto label5;

     label4:
        $r7 = new java.util.MissingFormatArgumentException;
        $r8 = interfaceinvoke r5.<java.util.Formatter$FormatString: java.lang.String toString()>();
        specialinvoke $r7.<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>($r8);
        throw $r7;

     label5:
        if r3 != null goto label6;

        $r10 = null;
        goto label7;

     label6:
        $r10 = r3[i0];

     label7:
        interfaceinvoke r5.<java.util.Formatter$FormatString: void print(java.lang.Object,java.util.Locale)>($r10, r1);
        goto label16;

     label8:
        i1 = i1 + 1;
        i0 = i1;
        if r3 == null goto label9;

        $i7 = lengthof r3;
        $i8 = $i7 - 1;
        if i1 <= $i8 goto label9;

        $r11 = new java.util.MissingFormatArgumentException;
        $r12 = interfaceinvoke r5.<java.util.Formatter$FormatString: java.lang.String toString()>();
        specialinvoke $r11.<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>($r12);
        throw $r11;

     label9:
        if r3 != null goto label10;

        $r14 = null;
        goto label11;

     label10:
        $r14 = r3[i1];

     label11:
        interfaceinvoke r5.<java.util.Formatter$FormatString: void print(java.lang.Object,java.util.Locale)>($r14, r1);
        goto label16;

     label12:
        i0 = i3 - 1;
        if r3 == null goto label13;

        $i9 = lengthof r3;
        $i10 = $i9 - 1;
        if i0 <= $i10 goto label13;

        $r15 = new java.util.MissingFormatArgumentException;
        $r16 = interfaceinvoke r5.<java.util.Formatter$FormatString: java.lang.String toString()>();
        specialinvoke $r15.<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>($r16);
        throw $r15;

     label13:
        if r3 != null goto label14;

        $r18 = null;
        goto label15;

     label14:
        $r18 = r3[i0];

     label15:
        interfaceinvoke r5.<java.util.Formatter$FormatString: void print(java.lang.Object,java.util.Locale)>($r18, r1);

     label16:
        goto label18;

     label17:
        $r19 := @caughtexception;
        r6 = $r19;
        r0.<java.util.Formatter: java.io.IOException lastException> = r6;

     label18:
        i2 = i2 + 1;
        goto label0;

     label19:
        return r0;

        catch java.io.IOException from label1 to label16 with label17;
    }

    private java.util.Formatter$FormatString[] parse(java.lang.String)
    {
        java.util.Formatter r0;
        java.lang.String r1, $r7, $r10;
        java.util.ArrayList $r2, r3;
        java.util.regex.Matcher r4;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.util.regex.Pattern $r5;
        boolean $z0;
        java.util.Formatter$FixedString $r6, $r9;
        java.util.Formatter$FormatSpecifier $r8;
        java.util.Formatter$FormatString[] $r11, $r13;
        java.lang.Object[] $r12;

        r0 := @this: java.util.Formatter;
        r1 := @parameter0: java.lang.String;
        $r2 = new java.util.ArrayList;
        specialinvoke $r2.<java.util.ArrayList: void <init>()>();
        r3 = $r2;
        $r5 = <java.util.Formatter: java.util.regex.Pattern fsPattern>;
        r4 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);
        i0 = 0;
        i1 = virtualinvoke r1.<java.lang.String: int length()>();

     label0:
        if i0 >= i1 goto label3;

        $z0 = virtualinvoke r4.<java.util.regex.Matcher: boolean find(int)>(i0);
        if $z0 == 0 goto label2;

        $i2 = virtualinvoke r4.<java.util.regex.Matcher: int start()>();
        if $i2 == i0 goto label1;

        $i3 = virtualinvoke r4.<java.util.regex.Matcher: int start()>();
        staticinvoke <java.util.Formatter: void checkText(java.lang.String,int,int)>(r1, i0, $i3);
        $r6 = new java.util.Formatter$FixedString;
        $i4 = virtualinvoke r4.<java.util.regex.Matcher: int start()>();
        $r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i4);
        specialinvoke $r6.<java.util.Formatter$FixedString: void <init>(java.util.Formatter,java.lang.String)>(r0, $r7);
        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label1:
        $r8 = new java.util.Formatter$FormatSpecifier;
        specialinvoke $r8.<java.util.Formatter$FormatSpecifier: void <init>(java.util.Formatter,java.util.regex.Matcher)>(r0, r4);
        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);
        i0 = virtualinvoke r4.<java.util.regex.Matcher: int end()>();
        goto label0;

     label2:
        staticinvoke <java.util.Formatter: void checkText(java.lang.String,int,int)>(r1, i0, i1);
        $r9 = new java.util.Formatter$FixedString;
        $r10 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i0);
        specialinvoke $r9.<java.util.Formatter$FixedString: void <init>(java.util.Formatter,java.lang.String)>(r0, $r10);
        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);
        goto label3;

     label3:
        $i5 = virtualinvoke r3.<java.util.ArrayList: int size()>();
        $r11 = newarray (java.util.Formatter$FormatString)[$i5];
        $r12 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r11);
        $r13 = (java.util.Formatter$FormatString[]) $r12;
        return $r13;
    }

    private static void checkText(java.lang.String, int, int)
    {
        java.lang.String r0, $r2;
        int i0, i1, i2, $i5, $i7;
        char c3, $c4, $c6;
        java.util.UnknownFormatConversionException $r1;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = i0;

     label0:
        if i2 >= i1 goto label4;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        if $c4 != 37 goto label3;

        $i5 = i1 - 1;
        if i2 != $i5 goto label1;

        $c6 = 37;
        goto label2;

     label1:
        $i7 = i2 + 1;
        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7);

     label2:
        c3 = $c6;
        $r1 = new java.util.UnknownFormatConversionException;
        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c3);
        specialinvoke $r1.<java.util.UnknownFormatConversionException: void <init>(java.lang.String)>($r2);
        throw $r1;

     label3:
        i2 = i2 + 1;
        goto label0;

     label4:
        return;
    }

    static java.lang.Appendable access$000(java.util.Formatter)
    {
        java.util.Formatter r0;
        java.lang.Appendable $r1;

        r0 := @parameter0: java.util.Formatter;
        $r1 = r0.<java.util.Formatter: java.lang.Appendable a>;
        return $r1;
    }

    static double access$202(double)
    {
        double d0;

        d0 := @parameter0: double;
        <java.util.Formatter: double scaleUp> = d0;
        return d0;
    }

    static double access$200()
    {
        double $d0;

        $d0 = <java.util.Formatter: double scaleUp>;
        return $d0;
    }

    static char access$300(java.util.Formatter)
    {
        java.util.Formatter r0;
        char $c0;

        r0 := @parameter0: java.util.Formatter;
        $c0 = r0.<java.util.Formatter: char zero>;
        return $c0;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("%(\\d+\\$)?([-#+ 0,(\\<]*)?(\\d+)?(\\.\\d+)?([tT])?([a-zA-Z%])");
        <java.util.Formatter: java.util.regex.Pattern fsPattern> = $r0;
        return;
    }
}
