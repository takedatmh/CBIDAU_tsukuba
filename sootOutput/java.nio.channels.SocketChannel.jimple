public abstract class java.nio.channels.SocketChannel extends java.nio.channels.spi.AbstractSelectableChannel implements java.nio.channels.ByteChannel, java.nio.channels.ScatteringByteChannel, java.nio.channels.GatheringByteChannel, java.nio.channels.NetworkChannel
{
    static final boolean $assertionsDisabled;

    protected void <init>(java.nio.channels.spi.SelectorProvider)
    {
        java.nio.channels.SocketChannel r0;
        java.nio.channels.spi.SelectorProvider r1;

        r0 := @this: java.nio.channels.SocketChannel;
        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;
        specialinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: void <init>(java.nio.channels.spi.SelectorProvider)>(r1);
        return;
    }

    public static java.nio.channels.SocketChannel open() throws java.io.IOException
    {
        java.nio.channels.spi.SelectorProvider $r0;
        java.nio.channels.SocketChannel $r1;

        $r0 = staticinvoke <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>();
        $r1 = virtualinvoke $r0.<java.nio.channels.spi.SelectorProvider: java.nio.channels.SocketChannel openSocketChannel()>();
        return $r1;
    }

    public static java.nio.channels.SocketChannel open(java.net.SocketAddress) throws java.io.IOException
    {
        java.net.SocketAddress r0;
        java.nio.channels.SocketChannel r1;
        java.lang.Throwable r2, r3, $r4, $r5;
        boolean $z1, $z2;
        java.lang.AssertionError $r6;

        r0 := @parameter0: java.net.SocketAddress;
        r1 = staticinvoke <java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()>();

     label0:
        virtualinvoke r1.<java.nio.channels.SocketChannel: boolean connect(java.net.SocketAddress)>(r0);

     label1:
        goto label7;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;

     label3:
        virtualinvoke r1.<java.nio.channels.SocketChannel: void close()>();

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;
        r3 = $r5;
        virtualinvoke r2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r3);

     label6:
        throw r2;

     label7:
        $z1 = <java.nio.channels.SocketChannel: boolean $assertionsDisabled>;
        if $z1 != 0 goto label8;

        $z2 = virtualinvoke r1.<java.nio.channels.SocketChannel: boolean isConnected()>();
        if $z2 != 0 goto label8;

        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label8:
        return r1;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public final int validOps()
    {
        java.nio.channels.SocketChannel r0;

        r0 := @this: java.nio.channels.SocketChannel;
        return 13;
    }

    public abstract java.nio.channels.SocketChannel bind(java.net.SocketAddress) throws java.io.IOException;

    public abstract java.nio.channels.SocketChannel setOption(java.net.SocketOption, java.lang.Object) throws java.io.IOException;

    public abstract java.nio.channels.SocketChannel shutdownInput() throws java.io.IOException;

    public abstract java.nio.channels.SocketChannel shutdownOutput() throws java.io.IOException;

    public abstract java.net.Socket socket();

    public abstract boolean isConnected();

    public abstract boolean isConnectionPending();

    public abstract boolean connect(java.net.SocketAddress) throws java.io.IOException;

    public abstract boolean finishConnect() throws java.io.IOException;

    public abstract java.net.SocketAddress getRemoteAddress() throws java.io.IOException;

    public abstract int read(java.nio.ByteBuffer) throws java.io.IOException;

    public abstract long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException;

    public final long read(java.nio.ByteBuffer[]) throws java.io.IOException
    {
        java.nio.channels.SocketChannel r0;
        java.nio.ByteBuffer[] r1;
        int $i0;
        long $l1;

        r0 := @this: java.nio.channels.SocketChannel;
        r1 := @parameter0: java.nio.ByteBuffer[];
        $i0 = lengthof r1;
        $l1 = virtualinvoke r0.<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[],int,int)>(r1, 0, $i0);
        return $l1;
    }

    public abstract int write(java.nio.ByteBuffer) throws java.io.IOException;

    public abstract long write(java.nio.ByteBuffer[], int, int) throws java.io.IOException;

    public final long write(java.nio.ByteBuffer[]) throws java.io.IOException
    {
        java.nio.channels.SocketChannel r0;
        java.nio.ByteBuffer[] r1;
        int $i0;
        long $l1;

        r0 := @this: java.nio.channels.SocketChannel;
        r1 := @parameter0: java.nio.ByteBuffer[];
        $i0 = lengthof r1;
        $l1 = virtualinvoke r0.<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[],int,int)>(r1, 0, $i0);
        return $l1;
    }

    public volatile java.nio.channels.NetworkChannel setOption(java.net.SocketOption, java.lang.Object) throws java.io.IOException
    {
        java.nio.channels.SocketChannel r0, $r3;
        java.net.SocketOption r1;
        java.lang.Object r2;

        r0 := @this: java.nio.channels.SocketChannel;
        r1 := @parameter0: java.net.SocketOption;
        r2 := @parameter1: java.lang.Object;
        $r3 = virtualinvoke r0.<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel setOption(java.net.SocketOption,java.lang.Object)>(r1, r2);
        return $r3;
    }

    public volatile java.nio.channels.NetworkChannel bind(java.net.SocketAddress) throws java.io.IOException
    {
        java.nio.channels.SocketChannel r0, $r2;
        java.net.SocketAddress r1;

        r0 := @this: java.nio.channels.SocketChannel;
        r1 := @parameter0: java.net.SocketAddress;
        $r2 = virtualinvoke r0.<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel bind(java.net.SocketAddress)>(r1);
        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/nio/channels/SocketChannel";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.nio.channels.SocketChannel: boolean $assertionsDisabled> = $z1;
        return;
    }
}
