abstract class sun.nio.ch.AsynchronousFileChannelImpl extends java.nio.channels.AsynchronousFileChannel
{
    protected final java.util.concurrent.locks.ReadWriteLock closeLock;
    protected volatile boolean closed;
    protected final java.io.FileDescriptor fdObj;
    protected final boolean reading;
    protected final boolean writing;
    protected final java.util.concurrent.ExecutorService executor;
    private volatile sun.nio.ch.FileLockTable fileLockTable;

    protected void <init>(java.io.FileDescriptor, boolean, boolean, java.util.concurrent.ExecutorService)
    {
        sun.nio.ch.AsynchronousFileChannelImpl r0;
        java.io.FileDescriptor r1;
        boolean z0, z1;
        java.util.concurrent.ExecutorService r2;
        java.util.concurrent.locks.ReentrantReadWriteLock $r3;

        r0 := @this: sun.nio.ch.AsynchronousFileChannelImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        z0 := @parameter1: boolean;
        z1 := @parameter2: boolean;
        r2 := @parameter3: java.util.concurrent.ExecutorService;
        specialinvoke r0.<java.nio.channels.AsynchronousFileChannel: void <init>()>();
        $r3 = new java.util.concurrent.locks.ReentrantReadWriteLock;
        specialinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();
        r0.<sun.nio.ch.AsynchronousFileChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock> = $r3;
        r0.<sun.nio.ch.AsynchronousFileChannelImpl: java.io.FileDescriptor fdObj> = r1;
        r0.<sun.nio.ch.AsynchronousFileChannelImpl: boolean reading> = z0;
        r0.<sun.nio.ch.AsynchronousFileChannelImpl: boolean writing> = z1;
        r0.<sun.nio.ch.AsynchronousFileChannelImpl: java.util.concurrent.ExecutorService executor> = r2;
        return;
    }

    final java.util.concurrent.ExecutorService executor()
    {
        sun.nio.ch.AsynchronousFileChannelImpl r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: sun.nio.ch.AsynchronousFileChannelImpl;
        $r1 = r0.<sun.nio.ch.AsynchronousFileChannelImpl: java.util.concurrent.ExecutorService executor>;
        return $r1;
    }

    public final boolean isOpen()
    {
        sun.nio.ch.AsynchronousFileChannelImpl r0;
        boolean $z0, $z1;

        r0 := @this: sun.nio.ch.AsynchronousFileChannelImpl;
        $z0 = r0.<sun.nio.ch.AsynchronousFileChannelImpl: boolean closed>;
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    protected final void begin() throws java.io.IOException
    {
        sun.nio.ch.AsynchronousFileChannelImpl r0;
        java.util.concurrent.locks.ReadWriteLock $r1;
        java.util.concurrent.locks.Lock $r2;
        boolean $z0;
        java.nio.channels.ClosedChannelException $r3;

        r0 := @this: sun.nio.ch.AsynchronousFileChannelImpl;
        $r1 = r0.<sun.nio.ch.AsynchronousFileChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock>;
        $r2 = interfaceinvoke $r1.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();
        $z0 = r0.<sun.nio.ch.AsynchronousFileChannelImpl: boolean closed>;
        if $z0 == 0 goto label0;

        $r3 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r3.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r3;

     label0:
        return;
    }

    protected final void end()
    {
        sun.nio.ch.AsynchronousFileChannelImpl r0;
        java.util.concurrent.locks.ReadWriteLock $r1;
        java.util.concurrent.locks.Lock $r2;

        r0 := @this: sun.nio.ch.AsynchronousFileChannelImpl;
        $r1 = r0.<sun.nio.ch.AsynchronousFileChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock>;
        $r2 = interfaceinvoke $r1.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();
        return;
    }

    protected final void end(boolean) throws java.io.IOException
    {
        sun.nio.ch.AsynchronousFileChannelImpl r0;
        boolean z0, $z1;
        java.nio.channels.AsynchronousCloseException $r1;

        r0 := @this: sun.nio.ch.AsynchronousFileChannelImpl;
        z0 := @parameter0: boolean;
        virtualinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: void end()>();
        if z0 != 0 goto label0;

        $z1 = virtualinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: boolean isOpen()>();
        if $z1 != 0 goto label0;

        $r1 = new java.nio.channels.AsynchronousCloseException;
        specialinvoke $r1.<java.nio.channels.AsynchronousCloseException: void <init>()>();
        throw $r1;

     label0:
        return;
    }

    abstract java.util.concurrent.Future implLock(long, long, boolean, java.lang.Object, java.nio.channels.CompletionHandler);

    public final java.util.concurrent.Future lock(long, long, boolean)
    {
        sun.nio.ch.AsynchronousFileChannelImpl r0;
        long l0, l1;
        boolean z0;
        java.util.concurrent.Future $r1;

        r0 := @this: sun.nio.ch.AsynchronousFileChannelImpl;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        z0 := @parameter2: boolean;
        $r1 = virtualinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: java.util.concurrent.Future implLock(long,long,boolean,java.lang.Object,java.nio.channels.CompletionHandler)>(l0, l1, z0, null, null);
        return $r1;
    }

    public final void lock(long, long, boolean, java.lang.Object, java.nio.channels.CompletionHandler)
    {
        sun.nio.ch.AsynchronousFileChannelImpl r0;
        long l0, l1;
        boolean z0;
        java.lang.Object r1;
        java.nio.channels.CompletionHandler r2;
        java.lang.NullPointerException $r3;

        r0 := @this: sun.nio.ch.AsynchronousFileChannelImpl;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        z0 := @parameter2: boolean;
        r1 := @parameter3: java.lang.Object;
        r2 := @parameter4: java.nio.channels.CompletionHandler;
        if r2 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("\'handler\' is null");
        throw $r3;

     label0:
        virtualinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: java.util.concurrent.Future implLock(long,long,boolean,java.lang.Object,java.nio.channels.CompletionHandler)>(l0, l1, z0, r1, r2);
        return;
    }

    final void ensureFileLockTableInitialized() throws java.io.IOException
    {
        sun.nio.ch.AsynchronousFileChannelImpl r0, r1;
        java.lang.Throwable r2, $r8;
        sun.nio.ch.FileLockTable $r3, $r5, $r7;
        java.io.FileDescriptor $r6;

        r0 := @this: sun.nio.ch.AsynchronousFileChannelImpl;
        $r3 = r0.<sun.nio.ch.AsynchronousFileChannelImpl: sun.nio.ch.FileLockTable fileLockTable>;
        if $r3 != null goto label6;

        r1 = r0;
        entermonitor r0;

     label0:
        $r5 = r0.<sun.nio.ch.AsynchronousFileChannelImpl: sun.nio.ch.FileLockTable fileLockTable>;
        if $r5 != null goto label1;

        $r6 = r0.<sun.nio.ch.AsynchronousFileChannelImpl: java.io.FileDescriptor fdObj>;
        $r7 = staticinvoke <sun.nio.ch.FileLockTable: sun.nio.ch.FileLockTable newSharedFileLockTable(java.nio.channels.Channel,java.io.FileDescriptor)>(r0, $r6);
        r0.<sun.nio.ch.AsynchronousFileChannelImpl: sun.nio.ch.FileLockTable fileLockTable> = $r7;

     label1:
        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r8 := @caughtexception;

     label4:
        r2 = $r8;
        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    final void invalidateAllLocks() throws java.io.IOException
    {
        sun.nio.ch.AsynchronousFileChannelImpl r0;
        java.util.Iterator r1;
        java.nio.channels.FileLock r2, r3;
        sun.nio.ch.FileLockImpl r4;
        java.lang.Throwable r5, $r11;
        sun.nio.ch.FileLockTable $r6, $r7;
        java.util.List $r8;
        boolean $z0, $z1;
        java.lang.Object $r9;

        r0 := @this: sun.nio.ch.AsynchronousFileChannelImpl;
        $r6 = r0.<sun.nio.ch.AsynchronousFileChannelImpl: sun.nio.ch.FileLockTable fileLockTable>;
        if $r6 == null goto label8;

        $r7 = r0.<sun.nio.ch.AsynchronousFileChannelImpl: sun.nio.ch.FileLockTable fileLockTable>;
        $r8 = virtualinvoke $r7.<sun.nio.ch.FileLockTable: java.util.List removeAll()>();
        r1 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label8;

        $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        r2 = (java.nio.channels.FileLock) $r9;
        r3 = r2;
        entermonitor r2;

     label1:
        $z1 = virtualinvoke r2.<java.nio.channels.FileLock: boolean isValid()>();
        if $z1 == 0 goto label2;

        r4 = (sun.nio.ch.FileLockImpl) r2;
        virtualinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: void implRelease(sun.nio.ch.FileLockImpl)>(r4);
        virtualinvoke r4.<sun.nio.ch.FileLockImpl: void invalidate()>();

     label2:
        exitmonitor r3;

     label3:
        goto label7;

     label4:
        $r11 := @caughtexception;

     label5:
        r5 = $r11;
        exitmonitor r3;

     label6:
        throw r5;

     label7:
        goto label0;

     label8:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    protected final sun.nio.ch.FileLockImpl addToFileLockTable(long, long, boolean)
    {
        sun.nio.ch.AsynchronousFileChannelImpl r0;
        long l0, l1;
        boolean z0, $z1;
        null_type n0;
        sun.nio.ch.FileLockImpl r1, $r8;
        java.lang.Throwable r2, $r10;
        java.util.concurrent.locks.ReadWriteLock $r3;
        java.util.concurrent.locks.Lock $r4;
        java.io.IOException $r5, r6;
        java.lang.AssertionError $r7;
        sun.nio.ch.FileLockTable $r9;

        r0 := @this: sun.nio.ch.AsynchronousFileChannelImpl;
        l0 := @parameter0: long;
        l1 := @parameter1: long;
        z0 := @parameter2: boolean;

     label0:
        $r3 = r0.<sun.nio.ch.AsynchronousFileChannelImpl: java.util.concurrent.locks.ReadWriteLock closeLock>;
        $r4 = interfaceinvoke $r3.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();
        $z1 = r0.<sun.nio.ch.AsynchronousFileChannelImpl: boolean closed>;
        if $z1 == 0 goto label2;

        n0 = null;

     label1:
        virtualinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: void end()>();
        return n0;

     label2:
        virtualinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: void ensureFileLockTableInitialized()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;
        r6 = $r5;
        $r7 = new java.lang.AssertionError;
        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(r6);
        throw $r7;

     label5:
        $r8 = new sun.nio.ch.FileLockImpl;
        specialinvoke $r8.<sun.nio.ch.FileLockImpl: void <init>(java.nio.channels.AsynchronousFileChannel,long,long,boolean)>(r0, l0, l1, z0);
        r1 = $r8;
        $r9 = r0.<sun.nio.ch.AsynchronousFileChannelImpl: sun.nio.ch.FileLockTable fileLockTable>;
        virtualinvoke $r9.<sun.nio.ch.FileLockTable: void add(java.nio.channels.FileLock)>(r1);

     label6:
        virtualinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: void end()>();
        goto label10;

     label7:
        $r10 := @caughtexception;

     label8:
        r2 = $r10;

     label9:
        virtualinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: void end()>();
        throw r2;

     label10:
        return r1;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.lang.Throwable from label0 to label1 with label7;
        catch java.lang.Throwable from label2 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    protected final void removeFromFileLockTable(sun.nio.ch.FileLockImpl)
    {
        sun.nio.ch.AsynchronousFileChannelImpl r0;
        sun.nio.ch.FileLockImpl r1;
        sun.nio.ch.FileLockTable $r2;

        r0 := @this: sun.nio.ch.AsynchronousFileChannelImpl;
        r1 := @parameter0: sun.nio.ch.FileLockImpl;
        $r2 = r0.<sun.nio.ch.AsynchronousFileChannelImpl: sun.nio.ch.FileLockTable fileLockTable>;
        virtualinvoke $r2.<sun.nio.ch.FileLockTable: void remove(java.nio.channels.FileLock)>(r1);
        return;
    }

    protected abstract void implRelease(sun.nio.ch.FileLockImpl) throws java.io.IOException;

    final void release(sun.nio.ch.FileLockImpl) throws java.io.IOException
    {
        sun.nio.ch.AsynchronousFileChannelImpl r0;
        sun.nio.ch.FileLockImpl r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: sun.nio.ch.AsynchronousFileChannelImpl;
        r1 := @parameter0: sun.nio.ch.FileLockImpl;

     label0:
        virtualinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: void begin()>();
        virtualinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: void implRelease(sun.nio.ch.FileLockImpl)>(r1);
        virtualinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: void removeFromFileLockTable(sun.nio.ch.FileLockImpl)>(r1);

     label1:
        virtualinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: void end()>();
        goto label5;

     label2:
        $r3 := @caughtexception;

     label3:
        r2 = $r3;

     label4:
        virtualinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: void end()>();
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    abstract java.util.concurrent.Future implRead(java.nio.ByteBuffer, long, java.lang.Object, java.nio.channels.CompletionHandler);

    public final java.util.concurrent.Future read(java.nio.ByteBuffer, long)
    {
        sun.nio.ch.AsynchronousFileChannelImpl r0;
        java.nio.ByteBuffer r1;
        long l0;
        java.util.concurrent.Future $r2;

        r0 := @this: sun.nio.ch.AsynchronousFileChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        l0 := @parameter1: long;
        $r2 = virtualinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: java.util.concurrent.Future implRead(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler)>(r1, l0, null, null);
        return $r2;
    }

    public final void read(java.nio.ByteBuffer, long, java.lang.Object, java.nio.channels.CompletionHandler)
    {
        sun.nio.ch.AsynchronousFileChannelImpl r0;
        java.nio.ByteBuffer r1;
        long l0;
        java.lang.Object r2;
        java.nio.channels.CompletionHandler r3;
        java.lang.NullPointerException $r4;

        r0 := @this: sun.nio.ch.AsynchronousFileChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        l0 := @parameter1: long;
        r2 := @parameter2: java.lang.Object;
        r3 := @parameter3: java.nio.channels.CompletionHandler;
        if r3 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("\'handler\' is null");
        throw $r4;

     label0:
        virtualinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: java.util.concurrent.Future implRead(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler)>(r1, l0, r2, r3);
        return;
    }

    abstract java.util.concurrent.Future implWrite(java.nio.ByteBuffer, long, java.lang.Object, java.nio.channels.CompletionHandler);

    public final java.util.concurrent.Future write(java.nio.ByteBuffer, long)
    {
        sun.nio.ch.AsynchronousFileChannelImpl r0;
        java.nio.ByteBuffer r1;
        long l0;
        java.util.concurrent.Future $r2;

        r0 := @this: sun.nio.ch.AsynchronousFileChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        l0 := @parameter1: long;
        $r2 = virtualinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: java.util.concurrent.Future implWrite(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler)>(r1, l0, null, null);
        return $r2;
    }

    public final void write(java.nio.ByteBuffer, long, java.lang.Object, java.nio.channels.CompletionHandler)
    {
        sun.nio.ch.AsynchronousFileChannelImpl r0;
        java.nio.ByteBuffer r1;
        long l0;
        java.lang.Object r2;
        java.nio.channels.CompletionHandler r3;
        java.lang.NullPointerException $r4;

        r0 := @this: sun.nio.ch.AsynchronousFileChannelImpl;
        r1 := @parameter0: java.nio.ByteBuffer;
        l0 := @parameter1: long;
        r2 := @parameter2: java.lang.Object;
        r3 := @parameter3: java.nio.channels.CompletionHandler;
        if r3 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("\'handler\' is null");
        throw $r4;

     label0:
        virtualinvoke r0.<sun.nio.ch.AsynchronousFileChannelImpl: java.util.concurrent.Future implWrite(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler)>(r1, l0, r2, r3);
        return;
    }
}
