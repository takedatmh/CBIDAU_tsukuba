final class sun.text.normalizer.NormalizerBase$NFDMode extends sun.text.normalizer.NormalizerBase$Mode
{

    private void <init>(int)
    {
        sun.text.normalizer.NormalizerBase$NFDMode r0;
        int i0;

        r0 := @this: sun.text.normalizer.NormalizerBase$NFDMode;
        i0 := @parameter0: int;
        specialinvoke r0.<sun.text.normalizer.NormalizerBase$Mode: void <init>(int,sun.text.normalizer.NormalizerBase$1)>(i0, null);
        return;
    }

    protected int normalize(char[], int, int, char[], int, int, sun.text.normalizer.UnicodeSet)
    {
        sun.text.normalizer.NormalizerBase$NFDMode r0;
        char[] r1, r2;
        int i0, i1, i2, i3, $i4;
        sun.text.normalizer.UnicodeSet r3;
        int[] r4;

        r0 := @this: sun.text.normalizer.NormalizerBase$NFDMode;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: char[];
        i2 := @parameter4: int;
        i3 := @parameter5: int;
        r3 := @parameter6: sun.text.normalizer.UnicodeSet;
        r4 = newarray (int)[1];
        $i4 = staticinvoke <sun.text.normalizer.NormalizerImpl: int decompose(char[],int,int,char[],int,int,boolean,int[],sun.text.normalizer.UnicodeSet)>(r1, i0, i1, r2, i2, i3, 0, r4, r3);
        return $i4;
    }

    protected java.lang.String normalize(java.lang.String, int)
    {
        sun.text.normalizer.NormalizerBase$NFDMode r0;
        java.lang.String r1, $r2;
        int i0;

        r0 := @this: sun.text.normalizer.NormalizerBase$NFDMode;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        $r2 = staticinvoke <sun.text.normalizer.NormalizerBase: java.lang.String decompose(java.lang.String,boolean,int)>(r1, 0, i0);
        return $r2;
    }

    protected int getMinC()
    {
        sun.text.normalizer.NormalizerBase$NFDMode r0;

        r0 := @this: sun.text.normalizer.NormalizerBase$NFDMode;
        return 768;
    }

    protected sun.text.normalizer.NormalizerBase$IsPrevBoundary getPrevBoundary()
    {
        sun.text.normalizer.NormalizerBase$NFDMode r0;
        sun.text.normalizer.NormalizerBase$IsPrevNFDSafe $r1;

        r0 := @this: sun.text.normalizer.NormalizerBase$NFDMode;
        $r1 = new sun.text.normalizer.NormalizerBase$IsPrevNFDSafe;
        specialinvoke $r1.<sun.text.normalizer.NormalizerBase$IsPrevNFDSafe: void <init>(sun.text.normalizer.NormalizerBase$1)>(null);
        return $r1;
    }

    protected sun.text.normalizer.NormalizerBase$IsNextBoundary getNextBoundary()
    {
        sun.text.normalizer.NormalizerBase$NFDMode r0;
        sun.text.normalizer.NormalizerBase$IsNextNFDSafe $r1;

        r0 := @this: sun.text.normalizer.NormalizerBase$NFDMode;
        $r1 = new sun.text.normalizer.NormalizerBase$IsNextNFDSafe;
        specialinvoke $r1.<sun.text.normalizer.NormalizerBase$IsNextNFDSafe: void <init>(sun.text.normalizer.NormalizerBase$1)>(null);
        return $r1;
    }

    protected int getMask()
    {
        sun.text.normalizer.NormalizerBase$NFDMode r0;

        r0 := @this: sun.text.normalizer.NormalizerBase$NFDMode;
        return 65284;
    }

    protected sun.text.normalizer.NormalizerBase$QuickCheckResult quickCheck(char[], int, int, boolean, sun.text.normalizer.UnicodeSet)
    {
        sun.text.normalizer.NormalizerBase$NFDMode r0;
        char[] r1;
        int i0, i1, $i2;
        boolean z0;
        sun.text.normalizer.UnicodeSet r2;
        sun.text.normalizer.NormalizerBase$QuickCheckResult $r3;

        r0 := @this: sun.text.normalizer.NormalizerBase$NFDMode;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        z0 := @parameter3: boolean;
        r2 := @parameter4: sun.text.normalizer.UnicodeSet;
        $i2 = staticinvoke <sun.text.normalizer.NormalizerImpl: int getFromIndexesArr(int)>(8);
        $r3 = staticinvoke <sun.text.normalizer.NormalizerImpl: sun.text.normalizer.NormalizerBase$QuickCheckResult quickCheck(char[],int,int,int,int,int,boolean,sun.text.normalizer.UnicodeSet)>(r1, i0, i1, $i2, 4, 0, z0, r2);
        return $r3;
    }

    protected boolean isNFSkippable(int)
    {
        sun.text.normalizer.NormalizerBase$NFDMode r0;
        int i0;
        boolean $z0;

        r0 := @this: sun.text.normalizer.NormalizerBase$NFDMode;
        i0 := @parameter0: int;
        $z0 = staticinvoke <sun.text.normalizer.NormalizerImpl: boolean isNFSkippable(int,sun.text.normalizer.NormalizerBase$Mode,long)>(i0, r0, 65284L);
        return $z0;
    }

    void <init>(int, sun.text.normalizer.NormalizerBase$1)
    {
        sun.text.normalizer.NormalizerBase$NFDMode r0;
        int i0;
        sun.text.normalizer.NormalizerBase$1 r1;

        r0 := @this: sun.text.normalizer.NormalizerBase$NFDMode;
        i0 := @parameter0: int;
        r1 := @parameter1: sun.text.normalizer.NormalizerBase$1;
        specialinvoke r0.<sun.text.normalizer.NormalizerBase$NFDMode: void <init>(int)>(i0);
        return;
    }
}
