public abstract class java.util.concurrent.AbstractExecutorService extends java.lang.Object implements java.util.concurrent.ExecutorService
{
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        java.util.concurrent.AbstractExecutorService r0;

        r0 := @this: java.util.concurrent.AbstractExecutorService;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    protected java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable, java.lang.Object)
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.lang.Runnable r1;
        java.lang.Object r2;
        java.util.concurrent.FutureTask $r3;

        r0 := @this: java.util.concurrent.AbstractExecutorService;
        r1 := @parameter0: java.lang.Runnable;
        r2 := @parameter1: java.lang.Object;
        $r3 = new java.util.concurrent.FutureTask;
        specialinvoke $r3.<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>(r1, r2);
        return $r3;
    }

    protected java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.util.concurrent.Callable r1;
        java.util.concurrent.FutureTask $r2;

        r0 := @this: java.util.concurrent.AbstractExecutorService;
        r1 := @parameter0: java.util.concurrent.Callable;
        $r2 = new java.util.concurrent.FutureTask;
        specialinvoke $r2.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r1);
        return $r2;
    }

    public java.util.concurrent.Future submit(java.lang.Runnable)
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.lang.Runnable r1;
        java.util.concurrent.RunnableFuture r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.concurrent.AbstractExecutorService;
        r1 := @parameter0: java.lang.Runnable;
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        r2 = virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)>(r1, null);
        virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: void execute(java.lang.Runnable)>(r2);
        return r2;
    }

    public java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object)
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.lang.Runnable r1;
        java.lang.Object r2;
        java.util.concurrent.RunnableFuture r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.AbstractExecutorService;
        r1 := @parameter0: java.lang.Runnable;
        r2 := @parameter1: java.lang.Object;
        if r1 != null goto label0;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label0:
        r3 = virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)>(r1, r2);
        virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: void execute(java.lang.Runnable)>(r3);
        return r3;
    }

    public java.util.concurrent.Future submit(java.util.concurrent.Callable)
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.util.concurrent.Callable r1;
        java.util.concurrent.RunnableFuture r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.concurrent.AbstractExecutorService;
        r1 := @parameter0: java.util.concurrent.Callable;
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        r2 = virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)>(r1);
        virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: void execute(java.lang.Runnable)>(r2);
        return r2;
    }

    private java.lang.Object doInvokeAny(java.util.Collection, boolean, long) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.util.Collection r1;
        boolean z0, $z3, $z5;
        long l0, l2, l4, $l5, $l7;
        int i1, i3, i6;
        java.util.ArrayList r2, $r15;
        java.util.concurrent.ExecutorCompletionService r3, $r16;
        java.util.concurrent.ExecutionException r4, $r26, r27, $r30, $r31;
        java.util.Iterator r5, r8, r11;
        java.util.concurrent.Future r6, r9, r12, $r19, $r22;
        java.util.concurrent.TimeUnit $r7;
        java.lang.Throwable r10, $r32;
        java.lang.NullPointerException $r13;
        java.lang.IllegalArgumentException $r14;
        java.lang.Object $r17, $r20, r24, $r25, $r33;
        java.util.concurrent.Callable $r18, $r21;
        java.util.concurrent.TimeoutException $r23;
        java.lang.RuntimeException $r28, r29;

        r0 := @this: java.util.concurrent.AbstractExecutorService;
        r1 := @parameter0: java.util.Collection;
        z0 := @parameter1: boolean;
        l0 := @parameter2: long;
        if r1 != null goto label0;

        $r13 = new java.lang.NullPointerException;
        specialinvoke $r13.<java.lang.NullPointerException: void <init>()>();
        throw $r13;

     label0:
        i1 = interfaceinvoke r1.<java.util.Collection: int size()>();
        if i1 != 0 goto label1;

        $r14 = new java.lang.IllegalArgumentException;
        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>()>();
        throw $r14;

     label1:
        $r15 = new java.util.ArrayList;
        specialinvoke $r15.<java.util.ArrayList: void <init>(int)>(i1);
        r2 = $r15;
        $r16 = new java.util.concurrent.ExecutorCompletionService;
        specialinvoke $r16.<java.util.concurrent.ExecutorCompletionService: void <init>(java.util.concurrent.Executor)>(r0);
        r3 = $r16;

     label2:
        r4 = null;
        if z0 == 0 goto label3;

        $l5 = staticinvoke <java.lang.System: long nanoTime()>();
        goto label4;

     label3:
        $l5 = 0L;

     label4:
        l2 = $l5;
        r5 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();
        $r17 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        $r18 = (java.util.concurrent.Callable) $r17;
        $r19 = virtualinvoke r3.<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r18);
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r19);
        i6 = i1 + -1;
        i3 = 1;

     label5:
        r6 = virtualinvoke r3.<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future poll()>();
        if r6 != null goto label10;

        if i6 <= 0 goto label6;

        i6 = i6 + -1;
        $r20 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        $r21 = (java.util.concurrent.Callable) $r20;
        $r22 = virtualinvoke r3.<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r21);
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r22);
        i3 = i3 + 1;
        goto label10;

     label6:
        if i3 != 0 goto label7;

        goto label19;

     label7:
        if z0 == 0 goto label9;

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
        r6 = virtualinvoke r3.<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future poll(long,java.util.concurrent.TimeUnit)>(l0, $r7);
        if r6 != null goto label8;

        $r23 = new java.util.concurrent.TimeoutException;
        specialinvoke $r23.<java.util.concurrent.TimeoutException: void <init>()>();
        throw $r23;

     label8:
        l4 = staticinvoke <java.lang.System: long nanoTime()>();
        $l7 = l4 - l2;
        l0 = l0 - $l7;
        l2 = l4;
        goto label10;

     label9:
        r6 = virtualinvoke r3.<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future take()>();

     label10:
        if r6 == null goto label18;

        i3 = i3 + -1;

     label11:
        r24 = interfaceinvoke r6.<java.util.concurrent.Future: java.lang.Object get()>();

     label12:
        r8 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z3 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();
        if $z3 == 0 goto label14;

        $r25 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();
        r9 = (java.util.concurrent.Future) $r25;
        interfaceinvoke r9.<java.util.concurrent.Future: boolean cancel(boolean)>(1);
        goto label13;

     label14:
        return r24;

     label15:
        $r26 := @caughtexception;

     label16:
        r27 = $r26;
        r4 = r27;
        goto label18;

     label17:
        $r28 := @caughtexception;
        r29 = $r28;
        $r30 = new java.util.concurrent.ExecutionException;
        specialinvoke $r30.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>(r29);
        r4 = $r30;

     label18:
        goto label5;

     label19:
        if r4 != null goto label20;

        $r31 = new java.util.concurrent.ExecutionException;
        specialinvoke $r31.<java.util.concurrent.ExecutionException: void <init>()>();
        r4 = $r31;

     label20:
        throw r4;

     label21:
        $r32 := @caughtexception;
        r10 = $r32;

     label22:
        r11 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label23:
        $z5 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();
        if $z5 == 0 goto label24;

        $r33 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();
        r12 = (java.util.concurrent.Future) $r33;
        interfaceinvoke r12.<java.util.concurrent.Future: boolean cancel(boolean)>(1);
        goto label23;

     label24:
        throw r10;

        catch java.util.concurrent.ExecutionException from label11 to label12 with label15;
        catch java.lang.RuntimeException from label11 to label12 with label17;
        catch java.lang.Throwable from label2 to label12 with label21;
        catch java.lang.Throwable from label16 to label22 with label21;
    }

    public java.lang.Object invokeAny(java.util.Collection) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.util.Collection r1;
        java.util.concurrent.TimeoutException r2, $r4;
        java.lang.Object $r3;
        boolean $z0;
        java.lang.AssertionError $r5;

        r0 := @this: java.util.concurrent.AbstractExecutorService;
        r1 := @parameter0: java.util.Collection;

     label0:
        $r3 = specialinvoke r0.<java.util.concurrent.AbstractExecutorService: java.lang.Object doInvokeAny(java.util.Collection,boolean,long)>(r1, 0, 0L);

     label1:
        return $r3;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        $z0 = <java.util.concurrent.AbstractExecutorService: boolean $assertionsDisabled>;
        if $z0 != 0 goto label3;

        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();
        throw $r5;

     label3:
        return null;

        catch java.util.concurrent.TimeoutException from label0 to label1 with label2;
    }

    public java.lang.Object invokeAny(java.util.Collection, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.util.Collection r1;
        long l0, $l1;
        java.util.concurrent.TimeUnit r2;
        java.lang.Object $r3;

        r0 := @this: java.util.concurrent.AbstractExecutorService;
        r1 := @parameter0: java.util.Collection;
        l0 := @parameter1: long;
        r2 := @parameter2: java.util.concurrent.TimeUnit;
        $l1 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);
        $r3 = specialinvoke r0.<java.util.concurrent.AbstractExecutorService: java.lang.Object doInvokeAny(java.util.Collection,boolean,long)>(r1, 1, $l1);
        return $r3;
    }

    public java.util.List invokeAll(java.util.Collection) throws java.lang.InterruptedException
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.util.Collection r1;
        java.util.ArrayList r2, $r10, r20;
        boolean z0, $z1, $z3, $z4, $z5, $z7;
        java.util.Iterator r3, r7, r12, r21;
        java.util.concurrent.Callable r4;
        java.util.concurrent.RunnableFuture r5;
        java.lang.Throwable r6, $r24;
        java.util.concurrent.Future r8, r14, r23;
        java.lang.NullPointerException $r9;
        int $i0;
        java.lang.Object $r11, $r13, $r22, $r25;
        java.util.concurrent.CancellationException $r16, r17;
        java.util.concurrent.ExecutionException $r18, r19;

        r0 := @this: java.util.concurrent.AbstractExecutorService;
        r1 := @parameter0: java.util.Collection;
        if r1 != null goto label0;

        $r9 = new java.lang.NullPointerException;
        specialinvoke $r9.<java.lang.NullPointerException: void <init>()>();
        throw $r9;

     label0:
        $r10 = new java.util.ArrayList;
        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();
        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>($i0);
        r2 = $r10;
        z0 = 0;

     label1:
        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label3;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (java.util.concurrent.Callable) $r11;
        r5 = virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)>(r4);
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r5);
        virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: void execute(java.lang.Runnable)>(r5);
        goto label2;

     label3:
        r12 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();
        if $z3 == 0 goto label10;

        $r13 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();
        r14 = (java.util.concurrent.Future) $r13;
        $z4 = interfaceinvoke r14.<java.util.concurrent.Future: boolean isDone()>();
        if $z4 != 0 goto label9;

     label5:
        interfaceinvoke r14.<java.util.concurrent.Future: java.lang.Object get()>();

     label6:
        goto label9;

     label7:
        $r16 := @caughtexception;
        r17 = $r16;
        goto label9;

     label8:
        $r18 := @caughtexception;
        r19 = $r18;

     label9:
        goto label4;

     label10:
        z0 = 1;
        r20 = r2;

     label11:
        if z0 != 0 goto label13;

        r21 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z5 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();
        if $z5 == 0 goto label13;

        $r22 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();
        r23 = (java.util.concurrent.Future) $r22;
        interfaceinvoke r23.<java.util.concurrent.Future: boolean cancel(boolean)>(1);
        goto label12;

     label13:
        return r20;

     label14:
        $r24 := @caughtexception;

     label15:
        r6 = $r24;

     label16:
        if z0 != 0 goto label18;

        r7 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $z7 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();
        if $z7 == 0 goto label18;

        $r25 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();
        r8 = (java.util.concurrent.Future) $r25;
        interfaceinvoke r8.<java.util.concurrent.Future: boolean cancel(boolean)>(1);
        goto label17;

     label18:
        throw r6;

        catch java.util.concurrent.CancellationException from label5 to label6 with label7;
        catch java.util.concurrent.ExecutionException from label5 to label6 with label8;
        catch java.lang.Throwable from label1 to label11 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public java.util.List invokeAll(java.util.Collection, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.util.Collection r1;
        long l0, l1, l2, l4, $l5, l8, $l9;
        java.util.concurrent.TimeUnit r2, $r11;
        java.util.ArrayList r3, r7, $r17, r26, r37, r40;
        boolean z0, $z1, $z3, $z4, $z6, $z7, $z8, $z10, $z12, $z14;
        java.util.Iterator r4, r6, r8, r14, r24, r27, r38, r41;
        java.util.concurrent.Callable r5;
        java.util.concurrent.Future r9, r10, r12, r15, r29, r43;
        java.lang.Throwable r13, $r44;
        java.lang.NullPointerException $r16;
        int $i3;
        java.lang.Object $r18, $r20, $r23, $r25, $r28, $r39, $r42, $r45;
        java.util.concurrent.RunnableFuture $r19;
        java.lang.Runnable $r21, $r22;
        byte $b6, $b7;
        java.util.concurrent.CancellationException $r31, r32;
        java.util.concurrent.ExecutionException $r33, r34;
        java.util.concurrent.TimeoutException $r35, r36;

        r0 := @this: java.util.concurrent.AbstractExecutorService;
        r1 := @parameter0: java.util.Collection;
        l0 := @parameter1: long;
        r2 := @parameter2: java.util.concurrent.TimeUnit;
        if r1 == null goto label0;

        if r2 != null goto label1;

     label0:
        $r16 = new java.lang.NullPointerException;
        specialinvoke $r16.<java.lang.NullPointerException: void <init>()>();
        throw $r16;

     label1:
        l1 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);
        $r17 = new java.util.ArrayList;
        $i3 = interfaceinvoke r1.<java.util.Collection: int size()>();
        specialinvoke $r17.<java.util.ArrayList: void <init>(int)>($i3);
        r3 = $r17;
        z0 = 0;

     label2:
        r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label4;

        $r18 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (java.util.concurrent.Callable) $r18;
        $r19 = virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)>(r5);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r19);
        goto label3;

     label4:
        l4 = staticinvoke <java.lang.System: long nanoTime()>();
        r6 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();
        if $z3 == 0 goto label10;

        $r20 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();
        $r21 = (java.lang.Runnable) $r20;
        $r22 = (java.lang.Runnable) $r21;
        virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: void execute(java.lang.Runnable)>($r22);
        l2 = staticinvoke <java.lang.System: long nanoTime()>();
        $l5 = l2 - l4;
        l1 = l1 - $l5;
        l4 = l2;
        $b6 = l1 cmp 0L;
        if $b6 > 0 goto label9;

        r7 = r3;

     label6:
        if z0 != 0 goto label8;

        r8 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z4 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();
        if $z4 == 0 goto label8;

        $r23 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();
        r9 = (java.util.concurrent.Future) $r23;
        interfaceinvoke r9.<java.util.concurrent.Future: boolean cancel(boolean)>(1);
        goto label7;

     label8:
        return r7;

     label9:
        goto label5;

     label10:
        r24 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z6 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();
        if $z6 == 0 goto label25;

        $r25 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();
        r10 = (java.util.concurrent.Future) $r25;
        $z7 = interfaceinvoke r10.<java.util.concurrent.Future: boolean isDone()>();
        if $z7 != 0 goto label24;

        $b7 = l1 cmp 0L;
        if $b7 > 0 goto label15;

        r26 = r3;

     label12:
        if z0 != 0 goto label14;

        r27 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z8 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();
        if $z8 == 0 goto label14;

        $r28 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();
        r29 = (java.util.concurrent.Future) $r28;
        interfaceinvoke r29.<java.util.concurrent.Future: boolean cancel(boolean)>(1);
        goto label13;

     label14:
        return r26;

     label15:
        $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
        interfaceinvoke r10.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(l1, $r11);

     label16:
        goto label23;

     label17:
        $r31 := @caughtexception;
        r32 = $r31;
        goto label23;

     label18:
        $r33 := @caughtexception;
        r34 = $r33;
        goto label23;

     label19:
        $r35 := @caughtexception;
        r36 = $r35;
        r37 = r3;

     label20:
        if z0 != 0 goto label22;

        r38 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label21:
        $z10 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>();
        if $z10 == 0 goto label22;

        $r39 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>();
        r12 = (java.util.concurrent.Future) $r39;
        interfaceinvoke r12.<java.util.concurrent.Future: boolean cancel(boolean)>(1);
        goto label21;

     label22:
        return r37;

     label23:
        l8 = staticinvoke <java.lang.System: long nanoTime()>();
        $l9 = l8 - l4;
        l1 = l1 - $l9;
        l4 = l8;

     label24:
        goto label11;

     label25:
        z0 = 1;
        r40 = r3;

     label26:
        if z0 != 0 goto label28;

        r41 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label27:
        $z12 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>();
        if $z12 == 0 goto label28;

        $r42 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>();
        r43 = (java.util.concurrent.Future) $r42;
        interfaceinvoke r43.<java.util.concurrent.Future: boolean cancel(boolean)>(1);
        goto label27;

     label28:
        return r40;

     label29:
        $r44 := @caughtexception;

     label30:
        r13 = $r44;

     label31:
        if z0 != 0 goto label33;

        r14 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label32:
        $z14 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();
        if $z14 == 0 goto label33;

        $r45 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();
        r15 = (java.util.concurrent.Future) $r45;
        interfaceinvoke r15.<java.util.concurrent.Future: boolean cancel(boolean)>(1);
        goto label32;

     label33:
        throw r13;

        catch java.util.concurrent.CancellationException from label15 to label16 with label17;
        catch java.util.concurrent.ExecutionException from label15 to label16 with label18;
        catch java.util.concurrent.TimeoutException from label15 to label16 with label19;
        catch java.lang.Throwable from label2 to label6 with label29;
        catch java.lang.Throwable from label9 to label12 with label29;
        catch java.lang.Throwable from label15 to label20 with label29;
        catch java.lang.Throwable from label23 to label26 with label29;
        catch java.lang.Throwable from label30 to label31 with label29;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/util/concurrent/AbstractExecutorService";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.util.concurrent.AbstractExecutorService: boolean $assertionsDisabled> = $z1;
        return;
    }
}
