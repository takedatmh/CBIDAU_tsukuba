public class sun.nio.ch.SocketAdaptor extends java.net.Socket
{
    private final sun.nio.ch.SocketChannelImpl sc;
    private volatile int timeout;
    private java.io.InputStream socketInputStream;
    static final boolean $assertionsDisabled;

    private void <init>(sun.nio.ch.SocketChannelImpl) throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        sun.nio.ch.SocketChannelImpl r1;
        java.net.SocketImpl $r2;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        r1 := @parameter0: sun.nio.ch.SocketChannelImpl;
        $r2 = (java.net.SocketImpl) null;
        specialinvoke r0.<java.net.Socket: void <init>(java.net.SocketImpl)>($r2);
        r0.<sun.nio.ch.SocketAdaptor: int timeout> = 0;
        r0.<sun.nio.ch.SocketAdaptor: java.io.InputStream socketInputStream> = null;
        r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc> = r1;
        return;
    }

    public static java.net.Socket create(sun.nio.ch.SocketChannelImpl)
    {
        sun.nio.ch.SocketChannelImpl r0;
        sun.nio.ch.SocketAdaptor $r1;
        java.net.SocketException r2, $r3;
        java.lang.InternalError $r4;

        r0 := @parameter0: sun.nio.ch.SocketChannelImpl;

     label0:
        $r1 = new sun.nio.ch.SocketAdaptor;
        specialinvoke $r1.<sun.nio.ch.SocketAdaptor: void <init>(sun.nio.ch.SocketChannelImpl)>(r0);

     label1:
        return $r1;

     label2:
        $r3 := @caughtexception;
        r2 = $r3;
        $r4 = new java.lang.InternalError;
        specialinvoke $r4.<java.lang.InternalError: void <init>(java.lang.String)>("Should not reach here");
        throw $r4;

        catch java.net.SocketException from label0 to label1 with label2;
    }

    public java.nio.channels.SocketChannel getChannel()
    {
        sun.nio.ch.SocketAdaptor r0;
        sun.nio.ch.SocketChannelImpl $r1;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r1 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        return $r1;
    }

    public void connect(java.net.SocketAddress) throws java.io.IOException
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.SocketAddress r1;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        r1 := @parameter0: java.net.SocketAddress;
        virtualinvoke r0.<sun.nio.ch.SocketAdaptor: void connect(java.net.SocketAddress,int)>(r1, 0);
        return;
    }

    public void connect(java.net.SocketAddress, int) throws java.io.IOException
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.SocketAddress r1;
        int i0, i3;
        java.lang.Object r2, $r11;
        java.nio.channels.SelectionKey r3;
        java.nio.channels.Selector r4;
        long l1, l2, $l4, $l5;
        java.io.IOException r5, $r28;
        java.lang.Throwable r6, r7, $r33, $r39;
        java.lang.IllegalArgumentException $r8, $r9;
        sun.nio.ch.SocketChannelImpl $r10, $r12, $r14, $r15, $r17, $r18, $r19, $r21, $r22, $r23, $r25, $r27, $r30, $r31, $r34, $r35;
        boolean $z0, $z2, $z3, $z4, $z5, $z6, $z8, $z9;
        java.nio.channels.IllegalBlockingModeException $r13;
        java.nio.channels.ClosedChannelException $r24;
        java.util.Set $r26;
        byte $b6;
        java.net.SocketTimeoutException $r29;
        java.lang.Exception $r37, r38;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        r1 := @parameter0: java.net.SocketAddress;
        i0 := @parameter1: int;
        if r1 != null goto label0;

        $r8 = new java.lang.IllegalArgumentException;
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connect: The address can\'t be null");
        throw $r8;

     label0:
        if i0 >= 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connect: timeout can\'t be negative");
        throw $r9;

     label1:
        $r10 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $r11 = virtualinvoke $r10.<sun.nio.ch.SocketChannelImpl: java.lang.Object blockingLock()>();
        r2 = $r11;
        entermonitor $r11;

     label2:
        $r12 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z0 = virtualinvoke $r12.<sun.nio.ch.SocketChannelImpl: boolean isBlocking()>();
        if $z0 != 0 goto label3;

        $r13 = new java.nio.channels.IllegalBlockingModeException;
        specialinvoke $r13.<java.nio.channels.IllegalBlockingModeException: void <init>()>();
        throw $r13;

     label3:
        if i0 != 0 goto label6;

        $r14 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        virtualinvoke $r14.<sun.nio.ch.SocketChannelImpl: boolean connect(java.net.SocketAddress)>(r1);

     label4:
        exitmonitor r2;

     label5:
        return;

     label6:
        r3 = null;
        r4 = null;
        $r15 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        virtualinvoke $r15.<sun.nio.ch.SocketChannelImpl: java.nio.channels.SelectableChannel configureBlocking(boolean)>(0);

     label7:
        $r17 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z2 = virtualinvoke $r17.<sun.nio.ch.SocketChannelImpl: boolean connect(java.net.SocketAddress)>(r1);
        if $z2 == 0 goto label13;

     label8:
        if r3 == null goto label9;

        virtualinvoke r3.<java.nio.channels.SelectionKey: void cancel()>();

     label9:
        $r18 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z3 = virtualinvoke $r18.<sun.nio.ch.SocketChannelImpl: boolean isOpen()>();
        if $z3 == 0 goto label10;

        $r19 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        virtualinvoke $r19.<sun.nio.ch.SocketChannelImpl: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);

     label10:
        if r4 == null goto label11;

        staticinvoke <sun.nio.ch.Util: void releaseTemporarySelector(java.nio.channels.Selector)>(r4);

     label11:
        exitmonitor r2;

     label12:
        return;

     label13:
        $r21 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        r4 = staticinvoke <sun.nio.ch.Util: java.nio.channels.Selector getTemporarySelector(java.nio.channels.SelectableChannel)>($r21);
        $r22 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        r3 = virtualinvoke $r22.<sun.nio.ch.SocketChannelImpl: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>(r4, 8);
        l1 = (long) i0;

     label14:
        $r23 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z4 = virtualinvoke $r23.<sun.nio.ch.SocketChannelImpl: boolean isOpen()>();
        if $z4 != 0 goto label15;

        $r24 = new java.nio.channels.ClosedChannelException;
        specialinvoke $r24.<java.nio.channels.ClosedChannelException: void <init>()>();
        throw $r24;

     label15:
        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        i3 = virtualinvoke r4.<java.nio.channels.Selector: int select(long)>(l1);
        if i3 <= 0 goto label16;

        $z5 = virtualinvoke r3.<java.nio.channels.SelectionKey: boolean isConnectable()>();
        if $z5 == 0 goto label16;

        $r25 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z6 = virtualinvoke $r25.<sun.nio.ch.SocketChannelImpl: boolean finishConnect()>();
        if $z6 == 0 goto label16;

        goto label22;

     label16:
        $r26 = virtualinvoke r4.<java.nio.channels.Selector: java.util.Set selectedKeys()>();
        interfaceinvoke $r26.<java.util.Set: boolean remove(java.lang.Object)>(r3);
        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l5 = $l4 - l2;
        l1 = l1 - $l5;
        $b6 = l1 cmp 0L;
        if $b6 > 0 goto label21;

     label17:
        $r27 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        virtualinvoke $r27.<sun.nio.ch.SocketChannelImpl: void close()>();

     label18:
        goto label20;

     label19:
        $r28 := @caughtexception;
        r5 = $r28;

     label20:
        $r29 = new java.net.SocketTimeoutException;
        specialinvoke $r29.<java.net.SocketTimeoutException: void <init>()>();
        throw $r29;

     label21:
        goto label14;

     label22:
        if r3 == null goto label23;

        virtualinvoke r3.<java.nio.channels.SelectionKey: void cancel()>();

     label23:
        $r30 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z8 = virtualinvoke $r30.<sun.nio.ch.SocketChannelImpl: boolean isOpen()>();
        if $z8 == 0 goto label24;

        $r31 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        virtualinvoke $r31.<sun.nio.ch.SocketChannelImpl: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);

     label24:
        if r4 == null goto label31;

        staticinvoke <sun.nio.ch.Util: void releaseTemporarySelector(java.nio.channels.Selector)>(r4);
        goto label31;

     label25:
        $r33 := @caughtexception;

     label26:
        r6 = $r33;

     label27:
        if r3 == null goto label28;

        virtualinvoke r3.<java.nio.channels.SelectionKey: void cancel()>();

     label28:
        $r34 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z9 = virtualinvoke $r34.<sun.nio.ch.SocketChannelImpl: boolean isOpen()>();
        if $z9 == 0 goto label29;

        $r35 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        virtualinvoke $r35.<sun.nio.ch.SocketChannelImpl: java.nio.channels.SelectableChannel configureBlocking(boolean)>(1);

     label29:
        if r4 == null goto label30;

        staticinvoke <sun.nio.ch.Util: void releaseTemporarySelector(java.nio.channels.Selector)>(r4);

     label30:
        throw r6;

     label31:
        goto label33;

     label32:
        $r37 := @caughtexception;
        r38 = $r37;
        staticinvoke <sun.nio.ch.Net: void translateException(java.lang.Exception,boolean)>(r38, 1);

     label33:
        exitmonitor r2;

     label34:
        goto label38;

     label35:
        $r39 := @caughtexception;

     label36:
        r7 = $r39;
        exitmonitor r2;

     label37:
        throw r7;

     label38:
        return;

        catch java.io.IOException from label17 to label18 with label19;
        catch java.lang.Throwable from label7 to label8 with label25;
        catch java.lang.Throwable from label13 to label22 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
        catch java.lang.Exception from label3 to label4 with label32;
        catch java.lang.Exception from label6 to label11 with label32;
        catch java.lang.Exception from label13 to label31 with label32;
        catch java.lang.Throwable from label2 to label5 with label35;
        catch java.lang.Throwable from label6 to label12 with label35;
        catch java.lang.Throwable from label13 to label34 with label35;
        catch java.lang.Throwable from label36 to label37 with label35;
    }

    public void bind(java.net.SocketAddress) throws java.io.IOException
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.SocketAddress r1;
        java.lang.Exception r2, $r5;
        sun.nio.ch.SocketChannelImpl $r3;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        r1 := @parameter0: java.net.SocketAddress;

     label0:
        $r3 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        virtualinvoke $r3.<sun.nio.ch.SocketChannelImpl: java.nio.channels.SocketChannel bind(java.net.SocketAddress)>(r1);

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r2 = $r5;
        staticinvoke <sun.nio.ch.Net: void translateException(java.lang.Exception)>(r2);

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public java.net.InetAddress getInetAddress()
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.SocketAddress r1;
        sun.nio.ch.SocketChannelImpl $r2;
        java.net.InetSocketAddress $r3;
        java.net.InetAddress $r4;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r2 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        r1 = virtualinvoke $r2.<sun.nio.ch.SocketChannelImpl: java.net.SocketAddress remoteAddress()>();
        if r1 != null goto label0;

        return null;

     label0:
        $r3 = (java.net.InetSocketAddress) r1;
        $r4 = virtualinvoke $r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        return $r4;
    }

    public java.net.InetAddress getLocalAddress()
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.InetSocketAddress r1, $r4, $r6;
        sun.nio.ch.SocketChannelImpl $r2, $r3;
        boolean $z0;
        java.net.InetAddress $r5, $r7;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r2 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z0 = virtualinvoke $r2.<sun.nio.ch.SocketChannelImpl: boolean isOpen()>();
        if $z0 == 0 goto label0;

        $r3 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        r1 = virtualinvoke $r3.<sun.nio.ch.SocketChannelImpl: java.net.InetSocketAddress localAddress()>();
        if r1 == null goto label0;

        $r4 = staticinvoke <sun.nio.ch.Net: java.net.InetSocketAddress getRevealedLocalAddress(java.net.InetSocketAddress)>(r1);
        $r5 = virtualinvoke $r4.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        return $r5;

     label0:
        $r6 = new java.net.InetSocketAddress;
        specialinvoke $r6.<java.net.InetSocketAddress: void <init>(int)>(0);
        $r7 = virtualinvoke $r6.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
        return $r7;
    }

    public int getPort()
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.SocketAddress r1;
        sun.nio.ch.SocketChannelImpl $r2;
        java.net.InetSocketAddress $r3;
        int $i0;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r2 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        r1 = virtualinvoke $r2.<sun.nio.ch.SocketChannelImpl: java.net.SocketAddress remoteAddress()>();
        if r1 != null goto label0;

        return 0;

     label0:
        $r3 = (java.net.InetSocketAddress) r1;
        $i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int getPort()>();
        return $i0;
    }

    public int getLocalPort()
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.InetSocketAddress r1, $r3;
        sun.nio.ch.SocketChannelImpl $r2;
        int $i0;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r2 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        r1 = virtualinvoke $r2.<sun.nio.ch.SocketChannelImpl: java.net.InetSocketAddress localAddress()>();
        if r1 != null goto label0;

        return -1;

     label0:
        $r3 = (java.net.InetSocketAddress) r1;
        $i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int getPort()>();
        return $i0;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        sun.nio.ch.SocketAdaptor r0;
        java.security.PrivilegedActionException r1, $r12;
        sun.nio.ch.SocketChannelImpl $r2, $r4, $r6;
        boolean $z0, $z1, $z2;
        java.net.SocketException $r3, $r5, $r7;
        java.io.InputStream $r8, $r11, $r15;
        sun.nio.ch.SocketAdaptor$1 $r9;
        java.lang.Object $r10;
        java.lang.Exception $r13;
        java.io.IOException $r14;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r2 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z0 = virtualinvoke $r2.<sun.nio.ch.SocketChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label0;

        $r3 = new java.net.SocketException;
        specialinvoke $r3.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r3;

     label0:
        $r4 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z1 = virtualinvoke $r4.<sun.nio.ch.SocketChannelImpl: boolean isConnected()>();
        if $z1 != 0 goto label1;

        $r5 = new java.net.SocketException;
        specialinvoke $r5.<java.net.SocketException: void <init>(java.lang.String)>("Socket is not connected");
        throw $r5;

     label1:
        $r6 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z2 = virtualinvoke $r6.<sun.nio.ch.SocketChannelImpl: boolean isInputOpen()>();
        if $z2 != 0 goto label2;

        $r7 = new java.net.SocketException;
        specialinvoke $r7.<java.net.SocketException: void <init>(java.lang.String)>("Socket input is shutdown");
        throw $r7;

     label2:
        $r8 = r0.<sun.nio.ch.SocketAdaptor: java.io.InputStream socketInputStream>;
        if $r8 != null goto label6;

     label3:
        $r9 = new sun.nio.ch.SocketAdaptor$1;
        specialinvoke $r9.<sun.nio.ch.SocketAdaptor$1: void <init>(sun.nio.ch.SocketAdaptor)>(r0);
        $r10 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r9);
        $r11 = (java.io.InputStream) $r10;
        r0.<sun.nio.ch.SocketAdaptor: java.io.InputStream socketInputStream> = $r11;

     label4:
        goto label6;

     label5:
        $r12 := @caughtexception;
        r1 = $r12;
        $r13 = virtualinvoke r1.<java.security.PrivilegedActionException: java.lang.Exception getException()>();
        $r14 = (java.io.IOException) $r13;
        throw $r14;

     label6:
        $r15 = r0.<sun.nio.ch.SocketAdaptor: java.io.InputStream socketInputStream>;
        return $r15;

        catch java.security.PrivilegedActionException from label3 to label4 with label5;
    }

    public java.io.OutputStream getOutputStream() throws java.io.IOException
    {
        sun.nio.ch.SocketAdaptor r0;
        null_type n0;
        java.security.PrivilegedActionException r1, $r11;
        sun.nio.ch.SocketChannelImpl $r2, $r4, $r6;
        boolean $z0, $z1, $z2;
        java.net.SocketException $r3, $r5, $r7;
        sun.nio.ch.SocketAdaptor$2 $r8;
        java.lang.Object $r9;
        java.io.OutputStream r10;
        java.lang.Exception $r12;
        java.io.IOException $r13;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r2 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z0 = virtualinvoke $r2.<sun.nio.ch.SocketChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label0;

        $r3 = new java.net.SocketException;
        specialinvoke $r3.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");
        throw $r3;

     label0:
        $r4 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z1 = virtualinvoke $r4.<sun.nio.ch.SocketChannelImpl: boolean isConnected()>();
        if $z1 != 0 goto label1;

        $r5 = new java.net.SocketException;
        specialinvoke $r5.<java.net.SocketException: void <init>(java.lang.String)>("Socket is not connected");
        throw $r5;

     label1:
        $r6 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z2 = virtualinvoke $r6.<sun.nio.ch.SocketChannelImpl: boolean isOutputOpen()>();
        if $z2 != 0 goto label2;

        $r7 = new java.net.SocketException;
        specialinvoke $r7.<java.net.SocketException: void <init>(java.lang.String)>("Socket output is shutdown");
        throw $r7;

     label2:
        n0 = null;

     label3:
        $r8 = new sun.nio.ch.SocketAdaptor$2;
        specialinvoke $r8.<sun.nio.ch.SocketAdaptor$2: void <init>(sun.nio.ch.SocketAdaptor)>(r0);
        $r9 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r8);
        r10 = (java.io.OutputStream) $r9;

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;
        r1 = $r11;
        $r12 = virtualinvoke r1.<java.security.PrivilegedActionException: java.lang.Exception getException()>();
        $r13 = (java.io.IOException) $r12;
        throw $r13;

     label6:
        return r10;

        catch java.security.PrivilegedActionException from label3 to label4 with label5;
    }

    private void setBooleanOption(java.net.SocketOption, boolean) throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.SocketOption r1;
        boolean z0;
        java.io.IOException r2, $r6;
        sun.nio.ch.SocketChannelImpl $r3;
        java.lang.Boolean $r4;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        r1 := @parameter0: java.net.SocketOption;
        z0 := @parameter1: boolean;

     label0:
        $r3 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);
        virtualinvoke $r3.<sun.nio.ch.SocketChannelImpl: java.nio.channels.SocketChannel setOption(java.net.SocketOption,java.lang.Object)>(r1, $r4);

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        staticinvoke <sun.nio.ch.Net: void translateToSocketException(java.lang.Exception)>(r2);

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    private void setIntOption(java.net.SocketOption, int) throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.SocketOption r1;
        int i0;
        java.io.IOException r2, $r6;
        sun.nio.ch.SocketChannelImpl $r3;
        java.lang.Integer $r4;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        r1 := @parameter0: java.net.SocketOption;
        i0 := @parameter1: int;

     label0:
        $r3 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        virtualinvoke $r3.<sun.nio.ch.SocketChannelImpl: java.nio.channels.SocketChannel setOption(java.net.SocketOption,java.lang.Object)>(r1, $r4);

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        staticinvoke <sun.nio.ch.Net: void translateToSocketException(java.lang.Exception)>(r2);

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    private boolean getBooleanOption(java.net.SocketOption) throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.SocketOption r1;
        java.io.IOException r2, $r6;
        sun.nio.ch.SocketChannelImpl $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        r1 := @parameter0: java.net.SocketOption;

     label0:
        $r3 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $r4 = virtualinvoke $r3.<sun.nio.ch.SocketChannelImpl: java.lang.Object getOption(java.net.SocketOption)>(r1);
        $r5 = (java.lang.Boolean) $r4;
        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

     label1:
        return $z0;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        staticinvoke <sun.nio.ch.Net: void translateToSocketException(java.lang.Exception)>(r2);
        return 0;

        catch java.io.IOException from label0 to label1 with label2;
    }

    private int getIntOption(java.net.SocketOption) throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.SocketOption r1;
        java.io.IOException r2, $r6;
        sun.nio.ch.SocketChannelImpl $r3;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        r1 := @parameter0: java.net.SocketOption;

     label0:
        $r3 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $r4 = virtualinvoke $r3.<sun.nio.ch.SocketChannelImpl: java.lang.Object getOption(java.net.SocketOption)>(r1);
        $r5 = (java.lang.Integer) $r4;
        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

     label1:
        return $i0;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        staticinvoke <sun.nio.ch.Net: void translateToSocketException(java.lang.Exception)>(r2);
        return -1;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public void setTcpNoDelay(boolean) throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        boolean z0;
        java.net.SocketOption $r1;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        z0 := @parameter0: boolean;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption TCP_NODELAY>;
        specialinvoke r0.<sun.nio.ch.SocketAdaptor: void setBooleanOption(java.net.SocketOption,boolean)>($r1, z0);
        return;
    }

    public boolean getTcpNoDelay() throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.SocketOption $r1;
        boolean $z0;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption TCP_NODELAY>;
        $z0 = specialinvoke r0.<sun.nio.ch.SocketAdaptor: boolean getBooleanOption(java.net.SocketOption)>($r1);
        return $z0;
    }

    public void setSoLinger(boolean, int) throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        boolean z0;
        int i0;
        java.net.SocketOption $r1;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        z0 := @parameter0: boolean;
        i0 := @parameter1: int;
        if z0 != 0 goto label0;

        i0 = -1;

     label0:
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption SO_LINGER>;
        specialinvoke r0.<sun.nio.ch.SocketAdaptor: void setIntOption(java.net.SocketOption,int)>($r1, i0);
        return;
    }

    public int getSoLinger() throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.SocketOption $r1;
        int $i0;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption SO_LINGER>;
        $i0 = specialinvoke r0.<sun.nio.ch.SocketAdaptor: int getIntOption(java.net.SocketOption)>($r1);
        return $i0;
    }

    public void sendUrgentData(int) throws java.io.IOException
    {
        sun.nio.ch.SocketAdaptor r0;
        int i0, i1;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r9;
        sun.nio.ch.SocketChannelImpl $r3, $r5, $r7;
        boolean $z0, $z1;
        java.nio.channels.IllegalBlockingModeException $r6;
        byte $b2;
        java.lang.AssertionError $r8;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        i0 := @parameter0: int;
        $r3 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $r4 = virtualinvoke $r3.<sun.nio.ch.SocketChannelImpl: java.lang.Object blockingLock()>();
        r1 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z0 = virtualinvoke $r5.<sun.nio.ch.SocketChannelImpl: boolean isBlocking()>();
        if $z0 != 0 goto label1;

        $r6 = new java.nio.channels.IllegalBlockingModeException;
        specialinvoke $r6.<java.nio.channels.IllegalBlockingModeException: void <init>()>();
        throw $r6;

     label1:
        $r7 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $b2 = (byte) i0;
        i1 = virtualinvoke $r7.<sun.nio.ch.SocketChannelImpl: int sendOutOfBandData(byte)>($b2);
        $z1 = <sun.nio.ch.SocketAdaptor: boolean $assertionsDisabled>;
        if $z1 != 0 goto label2;

        if i1 == 1 goto label2;

        $r8 = new java.lang.AssertionError;
        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();
        throw $r8;

     label2:
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r9 := @caughtexception;

     label5:
        r2 = $r9;
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setOOBInline(boolean) throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        boolean z0;
        java.net.SocketOption $r1;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        z0 := @parameter0: boolean;
        $r1 = <sun.nio.ch.ExtendedSocketOption: java.net.SocketOption SO_OOBINLINE>;
        specialinvoke r0.<sun.nio.ch.SocketAdaptor: void setBooleanOption(java.net.SocketOption,boolean)>($r1, z0);
        return;
    }

    public boolean getOOBInline() throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.SocketOption $r1;
        boolean $z0;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r1 = <sun.nio.ch.ExtendedSocketOption: java.net.SocketOption SO_OOBINLINE>;
        $z0 = specialinvoke r0.<sun.nio.ch.SocketAdaptor: boolean getBooleanOption(java.net.SocketOption)>($r1);
        return $z0;
    }

    public void setSoTimeout(int) throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        i0 := @parameter0: int;
        if i0 >= 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout can\'t be negative");
        throw $r1;

     label0:
        r0.<sun.nio.ch.SocketAdaptor: int timeout> = i0;
        return;
    }

    public int getSoTimeout() throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        int $i0;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $i0 = r0.<sun.nio.ch.SocketAdaptor: int timeout>;
        return $i0;
    }

    public void setSendBufferSize(int) throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.net.SocketOption $r2;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        i0 := @parameter0: int;
        if i0 > 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid send size");
        throw $r1;

     label0:
        $r2 = <java.net.StandardSocketOptions: java.net.SocketOption SO_SNDBUF>;
        specialinvoke r0.<sun.nio.ch.SocketAdaptor: void setIntOption(java.net.SocketOption,int)>($r2, i0);
        return;
    }

    public int getSendBufferSize() throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.SocketOption $r1;
        int $i0;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption SO_SNDBUF>;
        $i0 = specialinvoke r0.<sun.nio.ch.SocketAdaptor: int getIntOption(java.net.SocketOption)>($r1);
        return $i0;
    }

    public void setReceiveBufferSize(int) throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.net.SocketOption $r2;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        i0 := @parameter0: int;
        if i0 > 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid receive size");
        throw $r1;

     label0:
        $r2 = <java.net.StandardSocketOptions: java.net.SocketOption SO_RCVBUF>;
        specialinvoke r0.<sun.nio.ch.SocketAdaptor: void setIntOption(java.net.SocketOption,int)>($r2, i0);
        return;
    }

    public int getReceiveBufferSize() throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.SocketOption $r1;
        int $i0;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption SO_RCVBUF>;
        $i0 = specialinvoke r0.<sun.nio.ch.SocketAdaptor: int getIntOption(java.net.SocketOption)>($r1);
        return $i0;
    }

    public void setKeepAlive(boolean) throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        boolean z0;
        java.net.SocketOption $r1;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        z0 := @parameter0: boolean;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption SO_KEEPALIVE>;
        specialinvoke r0.<sun.nio.ch.SocketAdaptor: void setBooleanOption(java.net.SocketOption,boolean)>($r1, z0);
        return;
    }

    public boolean getKeepAlive() throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.SocketOption $r1;
        boolean $z0;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption SO_KEEPALIVE>;
        $z0 = specialinvoke r0.<sun.nio.ch.SocketAdaptor: boolean getBooleanOption(java.net.SocketOption)>($r1);
        return $z0;
    }

    public void setTrafficClass(int) throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        int i0;
        java.net.SocketOption $r1;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        i0 := @parameter0: int;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption IP_TOS>;
        specialinvoke r0.<sun.nio.ch.SocketAdaptor: void setIntOption(java.net.SocketOption,int)>($r1, i0);
        return;
    }

    public int getTrafficClass() throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.SocketOption $r1;
        int $i0;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption IP_TOS>;
        $i0 = specialinvoke r0.<sun.nio.ch.SocketAdaptor: int getIntOption(java.net.SocketOption)>($r1);
        return $i0;
    }

    public void setReuseAddress(boolean) throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        boolean z0;
        java.net.SocketOption $r1;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        z0 := @parameter0: boolean;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption SO_REUSEADDR>;
        specialinvoke r0.<sun.nio.ch.SocketAdaptor: void setBooleanOption(java.net.SocketOption,boolean)>($r1, z0);
        return;
    }

    public boolean getReuseAddress() throws java.net.SocketException
    {
        sun.nio.ch.SocketAdaptor r0;
        java.net.SocketOption $r1;
        boolean $z0;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r1 = <java.net.StandardSocketOptions: java.net.SocketOption SO_REUSEADDR>;
        $z0 = specialinvoke r0.<sun.nio.ch.SocketAdaptor: boolean getBooleanOption(java.net.SocketOption)>($r1);
        return $z0;
    }

    public void close() throws java.io.IOException
    {
        sun.nio.ch.SocketAdaptor r0;
        sun.nio.ch.SocketChannelImpl $r1;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r1 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        virtualinvoke $r1.<sun.nio.ch.SocketChannelImpl: void close()>();
        return;
    }

    public void shutdownInput() throws java.io.IOException
    {
        sun.nio.ch.SocketAdaptor r0;
        java.lang.Exception r1, $r4;
        sun.nio.ch.SocketChannelImpl $r2;

        r0 := @this: sun.nio.ch.SocketAdaptor;

     label0:
        $r2 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        virtualinvoke $r2.<sun.nio.ch.SocketChannelImpl: java.nio.channels.SocketChannel shutdownInput()>();

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        staticinvoke <sun.nio.ch.Net: void translateException(java.lang.Exception)>(r1);

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public void shutdownOutput() throws java.io.IOException
    {
        sun.nio.ch.SocketAdaptor r0;
        java.lang.Exception r1, $r4;
        sun.nio.ch.SocketChannelImpl $r2;

        r0 := @this: sun.nio.ch.SocketAdaptor;

     label0:
        $r2 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        virtualinvoke $r2.<sun.nio.ch.SocketChannelImpl: java.nio.channels.SocketChannel shutdownOutput()>();

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;
        staticinvoke <sun.nio.ch.Net: void translateException(java.lang.Exception)>(r1);

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public java.lang.String toString()
    {
        sun.nio.ch.SocketAdaptor r0;
        sun.nio.ch.SocketChannelImpl $r1;
        boolean $z0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10;
        java.net.InetAddress $r4;
        int $i0, $i1;
        java.lang.String $r11;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r1 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z0 = virtualinvoke $r1.<sun.nio.ch.SocketChannelImpl: boolean isConnected()>();
        if $z0 == 0 goto label0;

        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Socket[addr=");
        $r4 = virtualinvoke r0.<sun.nio.ch.SocketAdaptor: java.net.InetAddress getInetAddress()>();
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",port=");
        $i0 = virtualinvoke r0.<sun.nio.ch.SocketAdaptor: int getPort()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",localport=");
        $i1 = virtualinvoke r0.<sun.nio.ch.SocketAdaptor: int getLocalPort()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r11;

     label0:
        return "Socket[unconnected]";
    }

    public boolean isConnected()
    {
        sun.nio.ch.SocketAdaptor r0;
        sun.nio.ch.SocketChannelImpl $r1;
        boolean $z0;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r1 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z0 = virtualinvoke $r1.<sun.nio.ch.SocketChannelImpl: boolean isConnected()>();
        return $z0;
    }

    public boolean isBound()
    {
        sun.nio.ch.SocketAdaptor r0;
        sun.nio.ch.SocketChannelImpl $r1;
        java.net.InetSocketAddress $r2;
        boolean $z0;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r1 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $r2 = virtualinvoke $r1.<sun.nio.ch.SocketChannelImpl: java.net.InetSocketAddress localAddress()>();
        if $r2 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isClosed()
    {
        sun.nio.ch.SocketAdaptor r0;
        sun.nio.ch.SocketChannelImpl $r1;
        boolean $z0, $z1;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r1 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z0 = virtualinvoke $r1.<sun.nio.ch.SocketChannelImpl: boolean isOpen()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    public boolean isInputShutdown()
    {
        sun.nio.ch.SocketAdaptor r0;
        sun.nio.ch.SocketChannelImpl $r1;
        boolean $z0, $z1;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r1 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z0 = virtualinvoke $r1.<sun.nio.ch.SocketChannelImpl: boolean isInputOpen()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    public boolean isOutputShutdown()
    {
        sun.nio.ch.SocketAdaptor r0;
        sun.nio.ch.SocketChannelImpl $r1;
        boolean $z0, $z1;

        r0 := @this: sun.nio.ch.SocketAdaptor;
        $r1 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        $z0 = virtualinvoke $r1.<sun.nio.ch.SocketChannelImpl: boolean isOutputOpen()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    static sun.nio.ch.SocketChannelImpl access$000(sun.nio.ch.SocketAdaptor)
    {
        sun.nio.ch.SocketAdaptor r0;
        sun.nio.ch.SocketChannelImpl $r1;

        r0 := @parameter0: sun.nio.ch.SocketAdaptor;
        $r1 = r0.<sun.nio.ch.SocketAdaptor: sun.nio.ch.SocketChannelImpl sc>;
        return $r1;
    }

    static int access$100(sun.nio.ch.SocketAdaptor)
    {
        sun.nio.ch.SocketAdaptor r0;
        int $i0;

        r0 := @parameter0: sun.nio.ch.SocketAdaptor;
        $i0 = r0.<sun.nio.ch.SocketAdaptor: int timeout>;
        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/nio/ch/SocketAdaptor";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.ch.SocketAdaptor: boolean $assertionsDisabled> = $z1;
        return;
    }
}
