public final class java.lang.Float extends java.lang.Number implements java.lang.Comparable
{
    public static final float POSITIVE_INFINITY;
    public static final float NEGATIVE_INFINITY;
    public static final float NaN;
    public static final float MAX_VALUE;
    public static final float MIN_NORMAL;
    public static final float MIN_VALUE;
    public static final int MAX_EXPONENT;
    public static final int MIN_EXPONENT;
    public static final int SIZE;
    public static final java.lang.Class TYPE;
    private final float value;
    private static final long serialVersionUID;

    public static java.lang.String toString(float)
    {
        float f0;
        sun.misc.FloatingDecimal $r0;
        java.lang.String $r1;

        f0 := @parameter0: float;
        $r0 = new sun.misc.FloatingDecimal;
        specialinvoke $r0.<sun.misc.FloatingDecimal: void <init>(float)>(f0);
        $r1 = virtualinvoke $r0.<sun.misc.FloatingDecimal: java.lang.String toJavaFormatString()>();
        return $r1;
    }

    public static java.lang.String toHexString(float)
    {
        float f0, $f1;
        java.lang.String r0, $r1, $r2;
        byte $b0, $b1;
        double $d0, $d1, $d2;

        f0 := @parameter0: float;
        $f1 = staticinvoke <java.lang.Math: float abs(float)>(f0);
        $b0 = $f1 cmpg 1.17549435E-38F;
        if $b0 >= 0 goto label0;

        $b1 = f0 cmpl 0.0F;
        if $b1 == 0 goto label0;

        $d0 = (double) f0;
        $d1 = staticinvoke <sun.misc.FpUtils: double scalb(double,int)>($d0, -896);
        r0 = staticinvoke <java.lang.Double: java.lang.String toHexString(double)>($d1);
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("p-1022$", "p-126");
        return $r1;

     label0:
        $d2 = (double) f0;
        $r2 = staticinvoke <java.lang.Double: java.lang.String toHexString(double)>($d2);
        return $r2;
    }

    public static java.lang.Float valueOf(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        java.lang.Float $r1;
        sun.misc.FloatingDecimal $r2;
        float $f0;

        r0 := @parameter0: java.lang.String;
        $r1 = new java.lang.Float;
        $r2 = staticinvoke <sun.misc.FloatingDecimal: sun.misc.FloatingDecimal readJavaFormatString(java.lang.String)>(r0);
        $f0 = virtualinvoke $r2.<sun.misc.FloatingDecimal: float floatValue()>();
        specialinvoke $r1.<java.lang.Float: void <init>(float)>($f0);
        return $r1;
    }

    public static java.lang.Float valueOf(float)
    {
        float f0;
        java.lang.Float $r0;

        f0 := @parameter0: float;
        $r0 = new java.lang.Float;
        specialinvoke $r0.<java.lang.Float: void <init>(float)>(f0);
        return $r0;
    }

    public static float parseFloat(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        sun.misc.FloatingDecimal $r1;
        float $f0;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <sun.misc.FloatingDecimal: sun.misc.FloatingDecimal readJavaFormatString(java.lang.String)>(r0);
        $f0 = virtualinvoke $r1.<sun.misc.FloatingDecimal: float floatValue()>();
        return $f0;
    }

    public static boolean isNaN(float)
    {
        float f0;
        byte $b0;
        boolean $z0;

        f0 := @parameter0: float;
        $b0 = f0 cmpl f0;
        if $b0 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public static boolean isInfinite(float)
    {
        float f0;
        byte $b0, $b1;
        boolean $z0;

        f0 := @parameter0: float;
        $b0 = f0 cmpl #InfinityF;
        if $b0 == 0 goto label0;

        $b1 = f0 cmpl #-InfinityF;
        if $b1 != 0 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void <init>(float)
    {
        java.lang.Float r0;
        float f0;

        r0 := @this: java.lang.Float;
        f0 := @parameter0: float;
        specialinvoke r0.<java.lang.Number: void <init>()>();
        r0.<java.lang.Float: float value> = f0;
        return;
    }

    public void <init>(double)
    {
        java.lang.Float r0;
        double d0;
        float $f0;

        r0 := @this: java.lang.Float;
        d0 := @parameter0: double;
        specialinvoke r0.<java.lang.Number: void <init>()>();
        $f0 = (float) d0;
        r0.<java.lang.Float: float value> = $f0;
        return;
    }

    public void <init>(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.Float r0, $r2;
        java.lang.String r1;
        float $f0;

        r0 := @this: java.lang.Float;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(r1);
        $f0 = virtualinvoke $r2.<java.lang.Float: float floatValue()>();
        specialinvoke r0.<java.lang.Float: void <init>(float)>($f0);
        return;
    }

    public boolean isNaN()
    {
        java.lang.Float r0;
        float $f0;
        boolean $z0;

        r0 := @this: java.lang.Float;
        $f0 = r0.<java.lang.Float: float value>;
        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);
        return $z0;
    }

    public boolean isInfinite()
    {
        java.lang.Float r0;
        float $f0;
        boolean $z0;

        r0 := @this: java.lang.Float;
        $f0 = r0.<java.lang.Float: float value>;
        $z0 = staticinvoke <java.lang.Float: boolean isInfinite(float)>($f0);
        return $z0;
    }

    public java.lang.String toString()
    {
        java.lang.Float r0;
        float $f0;
        java.lang.String $r1;

        r0 := @this: java.lang.Float;
        $f0 = r0.<java.lang.Float: float value>;
        $r1 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);
        return $r1;
    }

    public byte byteValue()
    {
        java.lang.Float r0;
        float $f0;
        int $i0;
        byte $b1;

        r0 := @this: java.lang.Float;
        $f0 = r0.<java.lang.Float: float value>;
        $i0 = (int) $f0;
        $b1 = (byte) $i0;
        return $b1;
    }

    public short shortValue()
    {
        java.lang.Float r0;
        float $f0;
        int $i0;
        short $s1;

        r0 := @this: java.lang.Float;
        $f0 = r0.<java.lang.Float: float value>;
        $i0 = (int) $f0;
        $s1 = (short) $i0;
        return $s1;
    }

    public int intValue()
    {
        java.lang.Float r0;
        float $f0;
        int $i0;

        r0 := @this: java.lang.Float;
        $f0 = r0.<java.lang.Float: float value>;
        $i0 = (int) $f0;
        return $i0;
    }

    public long longValue()
    {
        java.lang.Float r0;
        float $f0;
        long $l0;

        r0 := @this: java.lang.Float;
        $f0 = r0.<java.lang.Float: float value>;
        $l0 = (long) $f0;
        return $l0;
    }

    public float floatValue()
    {
        java.lang.Float r0;
        float $f0;

        r0 := @this: java.lang.Float;
        $f0 = r0.<java.lang.Float: float value>;
        return $f0;
    }

    public double doubleValue()
    {
        java.lang.Float r0;
        float $f0;
        double $d0;

        r0 := @this: java.lang.Float;
        $f0 = r0.<java.lang.Float: float value>;
        $d0 = (double) $f0;
        return $d0;
    }

    public int hashCode()
    {
        java.lang.Float r0;
        float $f0;
        int $i0;

        r0 := @this: java.lang.Float;
        $f0 = r0.<java.lang.Float: float value>;
        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);
        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Float r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        float $f0, $f1;
        int $i0, $i1;

        r0 := @this: java.lang.Float;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.lang.Float;
        if $z0 == 0 goto label0;

        $r2 = (java.lang.Float) r1;
        $f0 = $r2.<java.lang.Float: float value>;
        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);
        $f1 = r0.<java.lang.Float: float value>;
        $i1 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f1);
        if $i0 != $i1 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    public static int floatToIntBits(float)
    {
        float f0;
        int i0, $i1, $i2;

        f0 := @parameter0: float;
        i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);
        $i1 = i0 & 2139095040;
        if $i1 != 2139095040 goto label0;

        $i2 = i0 & 8388607;
        if $i2 == 0 goto label0;

        i0 = 2143289344;

     label0:
        return i0;
    }

    public static native int floatToRawIntBits(float);

    public static native float intBitsToFloat(int);

    public int compareTo(java.lang.Float)
    {
        java.lang.Float r0, r1;
        float $f0, $f1;
        int $i0;

        r0 := @this: java.lang.Float;
        r1 := @parameter0: java.lang.Float;
        $f0 = r0.<java.lang.Float: float value>;
        $f1 = r1.<java.lang.Float: float value>;
        $i0 = staticinvoke <java.lang.Float: int compare(float,float)>($f0, $f1);
        return $i0;
    }

    public static int compare(float, float)
    {
        float f0, f1;
        int i0, i1;
        byte $b2, $b3, $b4;

        f0 := @parameter0: float;
        f1 := @parameter1: float;
        $b2 = f0 cmpg f1;
        if $b2 >= 0 goto label0;

        return -1;

     label0:
        $b3 = f0 cmpl f1;
        if $b3 <= 0 goto label1;

        return 1;

     label1:
        i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);
        i1 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f1);
        if i0 != i1 goto label2;

        $b4 = 0;
        goto label4;

     label2:
        if i0 >= i1 goto label3;

        $b4 = -1;
        goto label4;

     label3:
        $b4 = 1;

     label4:
        return $b4;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Float r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.lang.Float;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.lang.Float) r1;
        $i0 = virtualinvoke r0.<java.lang.Float: int compareTo(java.lang.Float)>($r2);
        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;

        $r0 = staticinvoke <java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>("float");
        <java.lang.Float: java.lang.Class TYPE> = $r0;
        return;
    }
}
