public abstract class java.security.cert.X509CRL extends java.security.cert.CRL implements java.security.cert.X509Extension
{
    private transient javax.security.auth.x500.X500Principal issuerPrincipal;

    protected void <init>()
    {
        java.security.cert.X509CRL r0;

        r0 := @this: java.security.cert.X509CRL;
        specialinvoke r0.<java.security.cert.CRL: void <init>(java.lang.String)>("X.509");
        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.security.cert.X509CRL r0, $r4;
        java.lang.Object r1;
        byte[] r2, r3;
        boolean $z0, $z1;
        java.security.cert.CRLException $r5, r6;

        r0 := @this: java.security.cert.X509CRL;
        r1 := @parameter0: java.lang.Object;
        if r0 != r1 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof java.security.cert.X509CRL;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = staticinvoke <sun.security.x509.X509CRLImpl: byte[] getEncodedInternal(java.security.cert.X509CRL)>(r0);
        $r4 = (java.security.cert.X509CRL) r1;
        r3 = staticinvoke <sun.security.x509.X509CRLImpl: byte[] getEncodedInternal(java.security.cert.X509CRL)>($r4);
        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r2, r3);

     label2:
        return $z1;

     label3:
        $r5 := @caughtexception;
        r6 = $r5;
        return 0;

        catch java.security.cert.CRLException from label1 to label2 with label3;
    }

    public int hashCode()
    {
        java.security.cert.X509CRL r0;
        int i0, i1, $i2, $i4;
        byte[] r1;
        byte $b3;
        java.security.cert.CRLException $r2, r3;

        r0 := @this: java.security.cert.X509CRL;
        i0 = 0;

     label0:
        r1 = staticinvoke <sun.security.x509.X509CRLImpl: byte[] getEncodedInternal(java.security.cert.X509CRL)>(r0);
        i1 = 1;

     label1:
        $i2 = lengthof r1;
        if i1 >= $i2 goto label2;

        $b3 = r1[i1];
        $i4 = $b3 * i1;
        i0 = i0 + $i4;
        i1 = i1 + 1;
        goto label1;

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;
        r3 = $r2;
        return i0;

        catch java.security.cert.CRLException from label0 to label2 with label3;
    }

    public abstract byte[] getEncoded() throws java.security.cert.CRLException;

    public abstract void verify(java.security.PublicKey) throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException;

    public abstract void verify(java.security.PublicKey, java.lang.String) throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException;

    public abstract int getVersion();

    public abstract java.security.Principal getIssuerDN();

    public javax.security.auth.x500.X500Principal getIssuerX500Principal()
    {
        java.security.cert.X509CRL r0;
        javax.security.auth.x500.X500Principal $r1, $r2, $r3;

        r0 := @this: java.security.cert.X509CRL;
        $r1 = r0.<java.security.cert.X509CRL: javax.security.auth.x500.X500Principal issuerPrincipal>;
        if $r1 != null goto label0;

        $r2 = staticinvoke <sun.security.x509.X509CRLImpl: javax.security.auth.x500.X500Principal getIssuerX500Principal(java.security.cert.X509CRL)>(r0);
        r0.<java.security.cert.X509CRL: javax.security.auth.x500.X500Principal issuerPrincipal> = $r2;

     label0:
        $r3 = r0.<java.security.cert.X509CRL: javax.security.auth.x500.X500Principal issuerPrincipal>;
        return $r3;
    }

    public abstract java.util.Date getThisUpdate();

    public abstract java.util.Date getNextUpdate();

    public abstract java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger);

    public java.security.cert.X509CRLEntry getRevokedCertificate(java.security.cert.X509Certificate)
    {
        java.security.cert.X509CRL r0;
        java.security.cert.X509Certificate r1;
        javax.security.auth.x500.X500Principal r2, r3;
        boolean $z0;
        java.math.BigInteger $r4;
        java.security.cert.X509CRLEntry $r5;

        r0 := @this: java.security.cert.X509CRL;
        r1 := @parameter0: java.security.cert.X509Certificate;
        r2 = virtualinvoke r1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();
        r3 = virtualinvoke r0.<java.security.cert.X509CRL: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();
        $z0 = virtualinvoke r2.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>(r3);
        if $z0 != 0 goto label0;

        return null;

     label0:
        $r4 = virtualinvoke r1.<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>();
        $r5 = virtualinvoke r0.<java.security.cert.X509CRL: java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger)>($r4);
        return $r5;
    }

    public abstract java.util.Set getRevokedCertificates();

    public abstract byte[] getTBSCertList() throws java.security.cert.CRLException;

    public abstract byte[] getSignature();

    public abstract java.lang.String getSigAlgName();

    public abstract java.lang.String getSigAlgOID();

    public abstract byte[] getSigAlgParams();
}
