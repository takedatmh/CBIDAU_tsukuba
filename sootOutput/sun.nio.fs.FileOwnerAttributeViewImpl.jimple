final class sun.nio.fs.FileOwnerAttributeViewImpl extends java.lang.Object implements java.nio.file.attribute.FileOwnerAttributeView, sun.nio.fs.DynamicFileAttributeView
{
    private static final java.lang.String OWNER_NAME;
    private final java.nio.file.attribute.FileAttributeView view;
    private final boolean isPosixView;

    void <init>(java.nio.file.attribute.PosixFileAttributeView)
    {
        sun.nio.fs.FileOwnerAttributeViewImpl r0;
        java.nio.file.attribute.PosixFileAttributeView r1;

        r0 := @this: sun.nio.fs.FileOwnerAttributeViewImpl;
        r1 := @parameter0: java.nio.file.attribute.PosixFileAttributeView;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.nio.fs.FileOwnerAttributeViewImpl: java.nio.file.attribute.FileAttributeView view> = r1;
        r0.<sun.nio.fs.FileOwnerAttributeViewImpl: boolean isPosixView> = 1;
        return;
    }

    void <init>(java.nio.file.attribute.AclFileAttributeView)
    {
        sun.nio.fs.FileOwnerAttributeViewImpl r0;
        java.nio.file.attribute.AclFileAttributeView r1;

        r0 := @this: sun.nio.fs.FileOwnerAttributeViewImpl;
        r1 := @parameter0: java.nio.file.attribute.AclFileAttributeView;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.nio.fs.FileOwnerAttributeViewImpl: java.nio.file.attribute.FileAttributeView view> = r1;
        r0.<sun.nio.fs.FileOwnerAttributeViewImpl: boolean isPosixView> = 0;
        return;
    }

    public java.lang.String name()
    {
        sun.nio.fs.FileOwnerAttributeViewImpl r0;

        r0 := @this: sun.nio.fs.FileOwnerAttributeViewImpl;
        return "owner";
    }

    public void setAttribute(java.lang.String, java.lang.Object) throws java.io.IOException
    {
        sun.nio.fs.FileOwnerAttributeViewImpl r0;
        java.lang.String r1, $r7, $r12;
        java.lang.Object r2;
        java.lang.StringBuilder $r3, $r6, $r8, $r9, $r10, $r11;
        boolean $z0;
        java.nio.file.attribute.UserPrincipal $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: sun.nio.fs.FileOwnerAttributeViewImpl;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object;
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("owner");
        if $z0 == 0 goto label0;

        $r4 = (java.nio.file.attribute.UserPrincipal) r2;
        virtualinvoke r0.<sun.nio.fs.FileOwnerAttributeViewImpl: void setOwner(java.nio.file.attribute.UserPrincipal)>($r4);
        goto label1;

     label0:
        $r5 = new java.lang.IllegalArgumentException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r7 = virtualinvoke r0.<sun.nio.fs.FileOwnerAttributeViewImpl: java.lang.String name()>();
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not recognized");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);
        throw $r5;

     label1:
        return;
    }

    public java.util.Map readAttributes(java.lang.String[]) throws java.io.IOException
    {
        sun.nio.fs.FileOwnerAttributeViewImpl r0;
        java.lang.String[] r1, r4;
        java.util.HashMap $r2, r3;
        int i0, i1;
        java.lang.String r5, $r11, $r16;
        boolean $z0, $z1;
        java.nio.file.attribute.UserPrincipal $r6;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r12, $r13, $r14, $r15;

        r0 := @this: sun.nio.fs.FileOwnerAttributeViewImpl;
        r1 := @parameter0: java.lang.String[];
        $r2 = new java.util.HashMap;
        specialinvoke $r2.<java.util.HashMap: void <init>()>();
        r3 = $r2;
        r4 = r1;
        i0 = lengthof r4;
        i1 = 0;

     label0:
        if i1 >= i0 goto label4;

        r5 = r4[i1];
        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("*");
        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("owner");
        if $z1 == 0 goto label2;

     label1:
        $r6 = virtualinvoke r0.<sun.nio.fs.FileOwnerAttributeViewImpl: java.nio.file.attribute.UserPrincipal getOwner()>();
        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("owner", $r6);
        goto label3;

     label2:
        $r8 = new java.lang.IllegalArgumentException;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r11 = virtualinvoke r0.<sun.nio.fs.FileOwnerAttributeViewImpl: java.lang.String name()>();
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not recognized");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);
        throw $r8;

     label3:
        i1 = i1 + 1;
        goto label0;

     label4:
        return r3;
    }

    public java.nio.file.attribute.UserPrincipal getOwner() throws java.io.IOException
    {
        sun.nio.fs.FileOwnerAttributeViewImpl r0;
        boolean $z0;
        java.nio.file.attribute.FileAttributeView $r1, $r5;
        java.nio.file.attribute.PosixFileAttributeView $r2;
        java.nio.file.attribute.PosixFileAttributes $r3;
        java.nio.file.attribute.UserPrincipal $r4, $r7;
        java.nio.file.attribute.AclFileAttributeView $r6;

        r0 := @this: sun.nio.fs.FileOwnerAttributeViewImpl;
        $z0 = r0.<sun.nio.fs.FileOwnerAttributeViewImpl: boolean isPosixView>;
        if $z0 == 0 goto label0;

        $r1 = r0.<sun.nio.fs.FileOwnerAttributeViewImpl: java.nio.file.attribute.FileAttributeView view>;
        $r2 = (java.nio.file.attribute.PosixFileAttributeView) $r1;
        $r3 = interfaceinvoke $r2.<java.nio.file.attribute.PosixFileAttributeView: java.nio.file.attribute.PosixFileAttributes readAttributes()>();
        $r4 = interfaceinvoke $r3.<java.nio.file.attribute.PosixFileAttributes: java.nio.file.attribute.UserPrincipal owner()>();
        return $r4;

     label0:
        $r5 = r0.<sun.nio.fs.FileOwnerAttributeViewImpl: java.nio.file.attribute.FileAttributeView view>;
        $r6 = (java.nio.file.attribute.AclFileAttributeView) $r5;
        $r7 = interfaceinvoke $r6.<java.nio.file.attribute.AclFileAttributeView: java.nio.file.attribute.UserPrincipal getOwner()>();
        return $r7;
    }

    public void setOwner(java.nio.file.attribute.UserPrincipal) throws java.io.IOException
    {
        sun.nio.fs.FileOwnerAttributeViewImpl r0;
        java.nio.file.attribute.UserPrincipal r1;
        boolean $z0;
        java.nio.file.attribute.FileAttributeView $r2, $r4;
        java.nio.file.attribute.PosixFileAttributeView $r3;
        java.nio.file.attribute.AclFileAttributeView $r5;

        r0 := @this: sun.nio.fs.FileOwnerAttributeViewImpl;
        r1 := @parameter0: java.nio.file.attribute.UserPrincipal;
        $z0 = r0.<sun.nio.fs.FileOwnerAttributeViewImpl: boolean isPosixView>;
        if $z0 == 0 goto label0;

        $r2 = r0.<sun.nio.fs.FileOwnerAttributeViewImpl: java.nio.file.attribute.FileAttributeView view>;
        $r3 = (java.nio.file.attribute.PosixFileAttributeView) $r2;
        interfaceinvoke $r3.<java.nio.file.attribute.PosixFileAttributeView: void setOwner(java.nio.file.attribute.UserPrincipal)>(r1);
        goto label1;

     label0:
        $r4 = r0.<sun.nio.fs.FileOwnerAttributeViewImpl: java.nio.file.attribute.FileAttributeView view>;
        $r5 = (java.nio.file.attribute.AclFileAttributeView) $r4;
        interfaceinvoke $r5.<java.nio.file.attribute.AclFileAttributeView: void setOwner(java.nio.file.attribute.UserPrincipal)>(r1);

     label1:
        return;
    }
}
