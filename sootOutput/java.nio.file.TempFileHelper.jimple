class java.nio.file.TempFileHelper extends java.lang.Object
{
    private static final java.nio.file.Path tmpdir;
    private static final boolean isPosix;
    private static final java.security.SecureRandom random;

    private void <init>()
    {
        java.nio.file.TempFileHelper r0;

        r0 := @this: java.nio.file.TempFileHelper;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    private static java.nio.file.Path generatePath(java.lang.String, java.lang.String, java.nio.file.Path)
    {
        java.lang.String r0, r1, $r8, $r11;
        java.nio.file.Path r2, r5, $r13, $r15;
        java.security.SecureRandom $r3;
        long l0, $l2, l3;
        java.lang.StringBuilder $r4, $r7, $r9, $r10;
        byte $b1;
        java.nio.file.FileSystem $r6;
        java.lang.String[] $r12;
        java.lang.IllegalArgumentException $r14;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.nio.file.Path;
        $r3 = <java.nio.file.TempFileHelper: java.security.SecureRandom random>;
        l0 = virtualinvoke $r3.<java.security.SecureRandom: long nextLong()>();
        $b1 = l0 cmp -9223372036854775808L;
        if $b1 != 0 goto label0;

        $l2 = 0L;
        goto label1;

     label0:
        $l2 = staticinvoke <java.lang.Math: long abs(long)>(l0);

     label1:
        l3 = $l2;
        $r6 = interfaceinvoke r2.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>();
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r8 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l3);
        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        $r12 = newarray (java.lang.String)[0];
        r5 = virtualinvoke $r6.<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>($r11, $r12);
        $r13 = interfaceinvoke r5.<java.nio.file.Path: java.nio.file.Path getParent()>();
        if $r13 == null goto label2;

        $r14 = new java.lang.IllegalArgumentException;
        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid prefix or suffix");
        throw $r14;

     label2:
        $r15 = interfaceinvoke r2.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(r5);
        return $r15;
    }

    private static java.nio.file.Path create(java.nio.file.Path, java.lang.String, java.lang.String, boolean, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.nio.file.Path r0, r16, $r19, $r20, $r23;
        java.lang.String r1, r2, $r6, $r11;
        boolean z0, z1, $z2, $z3;
        java.nio.file.attribute.FileAttribute[] r3, $r8, r12, $r13;
        java.nio.file.FileSystem $r4, $r7;
        int i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8;
        java.nio.file.InvalidPathException r5, $r17;
        byte $b2;
        java.nio.file.attribute.FileAttribute $r9, $r10, $r14;
        java.lang.SecurityManager r15;
        java.lang.IllegalArgumentException $r18;
        java.lang.SecurityException $r21, r22, $r24;
        java.nio.file.FileAlreadyExistsException $r25, r26;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        z0 := @parameter3: boolean;
        r3 := @parameter4: java.nio.file.attribute.FileAttribute[];
        if r1 != null goto label0;

        r1 = "";

     label0:
        if r2 != null goto label3;

        if z0 == 0 goto label1;

        $r6 = "";
        goto label2;

     label1:
        $r6 = ".tmp";

     label2:
        r2 = $r6;

     label3:
        if r0 != null goto label4;

        r0 = <java.nio.file.TempFileHelper: java.nio.file.Path tmpdir>;

     label4:
        $z2 = <java.nio.file.TempFileHelper: boolean isPosix>;
        if $z2 == 0 goto label13;

        $r7 = interfaceinvoke r0.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>();
        $r4 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>();
        if $r7 != $r4 goto label13;

        $i1 = lengthof r3;
        if $i1 != 0 goto label7;

        r3 = newarray (java.nio.file.attribute.FileAttribute)[1];
        $r8 = r3;
        $b2 = 0;
        if z0 == 0 goto label5;

        $r9 = <java.nio.file.TempFileHelper$PosixPermissions: java.nio.file.attribute.FileAttribute dirPermissions>;
        goto label6;

     label5:
        $r9 = <java.nio.file.TempFileHelper$PosixPermissions: java.nio.file.attribute.FileAttribute filePermissions>;

     label6:
        $r8[$b2] = $r9;
        goto label13;

     label7:
        z1 = 0;
        i0 = 0;

     label8:
        $i3 = lengthof r3;
        if i0 >= $i3 goto label10;

        $r10 = r3[i0];
        $r11 = interfaceinvoke $r10.<java.nio.file.attribute.FileAttribute: java.lang.String name()>();
        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("posix:permissions");
        if $z3 == 0 goto label9;

        z1 = 1;
        goto label10;

     label9:
        i0 = i0 + 1;
        goto label8;

     label10:
        if z1 != 0 goto label13;

        $i4 = lengthof r3;
        $i5 = $i4 + 1;
        r12 = newarray (java.nio.file.attribute.FileAttribute)[$i5];
        $i6 = lengthof r3;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r12, 0, $i6);
        r3 = r12;
        $r13 = r3;
        $i7 = lengthof r3;
        $i8 = $i7 - 1;
        if z0 == 0 goto label11;

        $r14 = <java.nio.file.TempFileHelper$PosixPermissions: java.nio.file.attribute.FileAttribute dirPermissions>;
        goto label12;

     label11:
        $r14 = <java.nio.file.TempFileHelper$PosixPermissions: java.nio.file.attribute.FileAttribute filePermissions>;

     label12:
        $r13[$i8] = $r14;

     label13:
        r15 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

     label14:
        r16 = staticinvoke <java.nio.file.TempFileHelper: java.nio.file.Path generatePath(java.lang.String,java.lang.String,java.nio.file.Path)>(r1, r2, r0);

     label15:
        goto label18;

     label16:
        $r17 := @caughtexception;
        r5 = $r17;
        if r15 == null goto label17;

        $r18 = new java.lang.IllegalArgumentException;
        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid prefix or suffix");
        throw $r18;

     label17:
        throw r5;

     label18:
        if z0 == 0 goto label20;

        $r19 = staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(r16, r3);

     label19:
        return $r19;

     label20:
        $r20 = staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(r16, r3);

     label21:
        return $r20;

     label22:
        $r21 := @caughtexception;
        r22 = $r21;
        $r23 = <java.nio.file.TempFileHelper: java.nio.file.Path tmpdir>;
        if r0 != $r23 goto label23;

        if r15 == null goto label23;

        $r24 = new java.lang.SecurityException;
        specialinvoke $r24.<java.lang.SecurityException: void <init>(java.lang.String)>("Unable to create temporary file or directory");
        throw $r24;

     label23:
        throw r22;

     label24:
        $r25 := @caughtexception;
        r26 = $r25;
        goto label14;

        catch java.nio.file.InvalidPathException from label14 to label15 with label16;
        catch java.lang.SecurityException from label18 to label19 with label22;
        catch java.lang.SecurityException from label20 to label21 with label22;
        catch java.nio.file.FileAlreadyExistsException from label18 to label19 with label24;
        catch java.nio.file.FileAlreadyExistsException from label20 to label21 with label24;
    }

    static java.nio.file.Path createTempFile(java.nio.file.Path, java.lang.String, java.lang.String, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.nio.file.Path r0, $r4;
        java.lang.String r1, r2;
        java.nio.file.attribute.FileAttribute[] r3;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        r3 := @parameter3: java.nio.file.attribute.FileAttribute[];
        $r4 = staticinvoke <java.nio.file.TempFileHelper: java.nio.file.Path create(java.nio.file.Path,java.lang.String,java.lang.String,boolean,java.nio.file.attribute.FileAttribute[])>(r0, r1, r2, 0, r3);
        return $r4;
    }

    static java.nio.file.Path createTempDirectory(java.nio.file.Path, java.lang.String, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.nio.file.Path r0, $r3;
        java.lang.String r1;
        java.nio.file.attribute.FileAttribute[] r2;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.nio.file.attribute.FileAttribute[];
        $r3 = staticinvoke <java.nio.file.TempFileHelper: java.nio.file.Path create(java.nio.file.Path,java.lang.String,java.lang.String,boolean,java.nio.file.attribute.FileAttribute[])>(r0, r1, null, 1, r2);
        return $r3;
    }

    static void <clinit>()
    {
        sun.security.action.GetPropertyAction $r0;
        java.lang.Object $r1;
        java.lang.String $r2;
        java.lang.String[] $r3;
        java.nio.file.Path $r4;
        java.nio.file.FileSystem $r5;
        java.util.Set $r6;
        boolean $z0;
        java.security.SecureRandom $r7;

        $r0 = new sun.security.action.GetPropertyAction;
        specialinvoke $r0.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("java.io.tmpdir");
        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);
        $r2 = (java.lang.String) $r1;
        $r3 = newarray (java.lang.String)[0];
        $r4 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r2, $r3);
        <java.nio.file.TempFileHelper: java.nio.file.Path tmpdir> = $r4;
        $r5 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>();
        $r6 = virtualinvoke $r5.<java.nio.file.FileSystem: java.util.Set supportedFileAttributeViews()>();
        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>("posix");
        <java.nio.file.TempFileHelper: boolean isPosix> = $z0;
        $r7 = new java.security.SecureRandom;
        specialinvoke $r7.<java.security.SecureRandom: void <init>()>();
        <java.nio.file.TempFileHelper: java.security.SecureRandom random> = $r7;
        return;
    }
}
