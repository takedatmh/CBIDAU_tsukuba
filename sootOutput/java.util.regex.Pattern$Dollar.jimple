final class java.util.regex.Pattern$Dollar extends java.util.regex.Pattern$Node
{
    boolean multiline;

    void <init>(boolean)
    {
        java.util.regex.Pattern$Dollar r0;
        boolean z0;

        r0 := @this: java.util.regex.Pattern$Dollar;
        z0 := @parameter0: boolean;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        r0.<java.util.regex.Pattern$Dollar: boolean multiline> = z0;
        return;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$Dollar r0;
        java.util.regex.Matcher r1;
        int i0, i1, $i3, $i4, $i5, $i6, $i9;
        java.lang.CharSequence r2;
        char c2, c7, c8, $c10, $c11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.regex.Pattern$Node $r3, $r4, $r5;

        r0 := @this: java.util.regex.Pattern$Dollar;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $z0 = r1.<java.util.regex.Matcher: boolean anchoringBounds>;
        if $z0 == 0 goto label0;

        $i3 = r1.<java.util.regex.Matcher: int 'to'>;
        goto label1;

     label0:
        $i3 = virtualinvoke r1.<java.util.regex.Matcher: int getTextLength()>();

     label1:
        i1 = $i3;
        $z1 = r0.<java.util.regex.Pattern$Dollar: boolean multiline>;
        if $z1 != 0 goto label4;

        $i4 = i1 - 2;
        if i0 >= $i4 goto label2;

        return 0;

     label2:
        $i5 = i1 - 2;
        if i0 != $i5 goto label4;

        c2 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i0);
        if c2 == 13 goto label3;

        return 0;

     label3:
        $i6 = i0 + 1;
        c7 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i6);
        if c7 == 10 goto label4;

        return 0;

     label4:
        if i0 >= i1 goto label9;

        c8 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i0);
        if c8 != 10 goto label6;

        if i0 <= 0 goto label5;

        $i9 = i0 - 1;
        $c10 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i9);
        if $c10 != 13 goto label5;

        return 0;

     label5:
        $z2 = r0.<java.util.regex.Pattern$Dollar: boolean multiline>;
        if $z2 == 0 goto label9;

        $r3 = r0.<java.util.regex.Pattern$Dollar: java.util.regex.Pattern$Node next>;
        $z3 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        return $z3;

     label6:
        if c8 == 13 goto label7;

        if c8 == 133 goto label7;

        $c11 = c8 | 1;
        if $c11 != 8233 goto label8;

     label7:
        $z4 = r0.<java.util.regex.Pattern$Dollar: boolean multiline>;
        if $z4 == 0 goto label9;

        $r4 = r0.<java.util.regex.Pattern$Dollar: java.util.regex.Pattern$Node next>;
        $z5 = virtualinvoke $r4.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        return $z5;

     label8:
        return 0;

     label9:
        r1.<java.util.regex.Matcher: boolean hitEnd> = 1;
        r1.<java.util.regex.Matcher: boolean requireEnd> = 1;
        $r5 = r0.<java.util.regex.Pattern$Dollar: java.util.regex.Pattern$Node next>;
        $z6 = virtualinvoke $r5.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        return $z6;
    }

    boolean study(java.util.regex.Pattern$TreeInfo)
    {
        java.util.regex.Pattern$Dollar r0;
        java.util.regex.Pattern$TreeInfo r1;
        java.util.regex.Pattern$Node $r2;
        boolean $z1;

        r0 := @this: java.util.regex.Pattern$Dollar;
        r1 := @parameter0: java.util.regex.Pattern$TreeInfo;
        $r2 = r0.<java.util.regex.Pattern$Dollar: java.util.regex.Pattern$Node next>;
        virtualinvoke $r2.<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>(r1);
        $z1 = r1.<java.util.regex.Pattern$TreeInfo: boolean deterministic>;
        return $z1;
    }
}
