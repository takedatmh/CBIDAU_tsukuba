class sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl extends sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl implements java.nio.file.attribute.PosixFileAttributeView
{
    final sun.nio.fs.UnixSecureDirectoryStream this$0;

    void <init>(sun.nio.fs.UnixSecureDirectoryStream, sun.nio.fs.UnixPath, boolean)
    {
        sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl r0;
        sun.nio.fs.UnixSecureDirectoryStream r1;
        sun.nio.fs.UnixPath r2;
        boolean z0;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl;
        r1 := @parameter0: sun.nio.fs.UnixSecureDirectoryStream;
        r2 := @parameter1: sun.nio.fs.UnixPath;
        z0 := @parameter2: boolean;
        r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0> = r1;
        specialinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: void <init>(sun.nio.fs.UnixSecureDirectoryStream,sun.nio.fs.UnixPath,boolean)>(r1, r2, z0);
        return;
    }

    private void checkWriteAndUserAccess()
    {
        sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl r0;
        java.lang.SecurityManager r1;
        java.lang.RuntimePermission $r2;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        staticinvoke <sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: void access$200(sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl)>(r0);
        $r2 = new java.lang.RuntimePermission;
        specialinvoke $r2.<java.lang.RuntimePermission: void <init>(java.lang.String)>("accessUserInformation");
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label0:
        return;
    }

    public java.lang.String name()
    {
        sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl r0;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl;
        return "posix";
    }

    public java.nio.file.attribute.PosixFileAttributes readAttributes() throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl r0;
        java.lang.SecurityManager r1;
        sun.nio.fs.UnixFileAttributes r2, r3, $r23;
        java.lang.Throwable r4, $r35;
        sun.nio.fs.UnixPath $r5, $r8, $r11, $r12, $r13, $r21, $r25, $r31;
        sun.nio.fs.UnixSecureDirectoryStream $r6, $r9, $r15, $r18, $r22, $r24, $r26, $r32, $r36;
        sun.nio.fs.UnixDirectoryStream $r7, $r10, $r16, $r19, $r27, $r33, $r37;
        java.lang.RuntimePermission $r14;
        java.util.concurrent.locks.Lock $r17, $r28, $r34, $r38;
        boolean $z0, $z1;
        java.nio.file.ClosedDirectoryStreamException $r20;
        int $i0, $i1;
        sun.nio.fs.UnixException $r29, r30;
        null_type n0;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label2;

        $r5 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        if $r5 != null goto label0;

        $r6 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r7 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r6);
        $r8 = virtualinvoke $r7.<sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath directory()>();
        virtualinvoke $r8.<sun.nio.fs.UnixPath: void checkRead()>();
        goto label1;

     label0:
        $r9 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r10 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r9);
        $r11 = virtualinvoke $r10.<sun.nio.fs.UnixDirectoryStream: sun.nio.fs.UnixPath directory()>();
        $r12 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        $r13 = virtualinvoke $r11.<sun.nio.fs.UnixPath: sun.nio.fs.UnixPath resolve(java.nio.file.Path)>($r12);
        virtualinvoke $r13.<sun.nio.fs.UnixPath: void checkRead()>();

     label1:
        $r14 = new java.lang.RuntimePermission;
        specialinvoke $r14.<java.lang.RuntimePermission: void <init>(java.lang.String)>("accessUserInformation");
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r14);

     label2:
        $r15 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r16 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r15);
        $r17 = virtualinvoke $r16.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r17.<java.util.concurrent.locks.Lock: void lock()>();

     label3:
        $r18 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r19 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r18);
        $z0 = virtualinvoke $r19.<sun.nio.fs.UnixDirectoryStream: boolean isOpen()>();
        if $z0 != 0 goto label4;

        $r20 = new java.nio.file.ClosedDirectoryStreamException;
        specialinvoke $r20.<java.nio.file.ClosedDirectoryStreamException: void <init>()>();
        throw $r20;

     label4:
        $r21 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        if $r21 != null goto label5;

        $r22 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $i0 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: int access$000(sun.nio.fs.UnixSecureDirectoryStream)>($r22);
        $r23 = staticinvoke <sun.nio.fs.UnixFileAttributes: sun.nio.fs.UnixFileAttributes get(int)>($i0);
        goto label6;

     label5:
        $r24 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $i1 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: int access$000(sun.nio.fs.UnixSecureDirectoryStream)>($r24);
        $r25 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        $z1 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: boolean followLinks>;
        $r23 = staticinvoke <sun.nio.fs.UnixFileAttributes: sun.nio.fs.UnixFileAttributes get(int,sun.nio.fs.UnixPath,boolean)>($i1, $r25, $z1);

     label6:
        r2 = $r23;
        r3 = r2;

     label7:
        $r26 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r27 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r26);
        $r28 = virtualinvoke $r27.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r28.<java.util.concurrent.locks.Lock: void unlock()>();
        return r3;

     label8:
        $r29 := @caughtexception;

     label9:
        r30 = $r29;
        $r31 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        virtualinvoke r30.<sun.nio.fs.UnixException: void rethrowAsIOException(sun.nio.fs.UnixPath)>($r31);
        n0 = null;

     label10:
        $r32 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r33 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r32);
        $r34 = virtualinvoke $r33.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r34.<java.util.concurrent.locks.Lock: void unlock()>();
        return n0;

     label11:
        $r35 := @caughtexception;

     label12:
        r4 = $r35;

     label13:
        $r36 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r37 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r36);
        $r38 = virtualinvoke $r37.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r38.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r4;

        catch sun.nio.fs.UnixException from label4 to label7 with label8;
        catch java.lang.Throwable from label3 to label7 with label11;
        catch java.lang.Throwable from label9 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void setPermissions(java.util.Set) throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl r0;
        java.util.Set r1;
        int i0, $i1, $i2;
        sun.nio.fs.UnixException r2, $r14;
        java.lang.Throwable r3, r4, $r17, $r22;
        sun.nio.fs.UnixSecureDirectoryStream $r5, $r8, $r12, $r19, $r23;
        sun.nio.fs.UnixDirectoryStream $r6, $r9, $r20, $r24;
        java.util.concurrent.locks.Lock $r7, $r21, $r25;
        boolean $z0;
        java.nio.file.ClosedDirectoryStreamException $r10;
        sun.nio.fs.UnixPath $r11, $r13, $r15, $r16, $r18;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl;
        r1 := @parameter0: java.util.Set;
        specialinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: void checkWriteAndUserAccess()>();
        $r5 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r6 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r5);
        $r7 = virtualinvoke $r6.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        $r8 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r9 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r8);
        $z0 = virtualinvoke $r9.<sun.nio.fs.UnixDirectoryStream: boolean isOpen()>();
        if $z0 != 0 goto label1;

        $r10 = new java.nio.file.ClosedDirectoryStreamException;
        specialinvoke $r10.<java.nio.file.ClosedDirectoryStreamException: void <init>()>();
        throw $r10;

     label1:
        $r11 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        if $r11 != null goto label2;

        $r12 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $i1 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: int access$000(sun.nio.fs.UnixSecureDirectoryStream)>($r12);
        goto label3;

     label2:
        $i1 = virtualinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: int open()>();

     label3:
        i0 = $i1;

     label4:
        $i2 = staticinvoke <sun.nio.fs.UnixFileModeAttribute: int toUnixMode(java.util.Set)>(r1);
        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void fchmod(int,int)>(i0, $i2);

     label5:
        $r13 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        if $r13 == null goto label13;

        if i0 < 0 goto label13;

        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void close(int)>(i0);
        goto label13;

     label6:
        $r14 := @caughtexception;

     label7:
        r2 = $r14;
        $r15 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        virtualinvoke r2.<sun.nio.fs.UnixException: void rethrowAsIOException(sun.nio.fs.UnixPath)>($r15);

     label8:
        $r16 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        if $r16 == null goto label13;

        if i0 < 0 goto label13;

        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void close(int)>(i0);
        goto label13;

     label9:
        $r17 := @caughtexception;

     label10:
        r3 = $r17;

     label11:
        $r18 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        if $r18 == null goto label12;

        if i0 < 0 goto label12;

        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void close(int)>(i0);

     label12:
        throw r3;

     label13:
        $r19 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r20 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r19);
        $r21 = virtualinvoke $r20.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r21.<java.util.concurrent.locks.Lock: void unlock()>();
        goto label17;

     label14:
        $r22 := @caughtexception;

     label15:
        r4 = $r22;

     label16:
        $r23 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r24 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r23);
        $r25 = virtualinvoke $r24.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r25.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r4;

     label17:
        return;

        catch sun.nio.fs.UnixException from label4 to label5 with label6;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
        catch java.lang.Throwable from label0 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private void setOwners(int, int) throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl r0;
        int i0, i1, i2, $i3;
        sun.nio.fs.UnixException r1, $r13;
        java.lang.Throwable r2, r3, $r16, $r21;
        sun.nio.fs.UnixSecureDirectoryStream $r4, $r7, $r11, $r18, $r22;
        sun.nio.fs.UnixDirectoryStream $r5, $r8, $r19, $r23;
        java.util.concurrent.locks.Lock $r6, $r20, $r24;
        boolean $z0;
        java.nio.file.ClosedDirectoryStreamException $r9;
        sun.nio.fs.UnixPath $r10, $r12, $r14, $r15, $r17;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        specialinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: void checkWriteAndUserAccess()>();
        $r4 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r5 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r4);
        $r6 = virtualinvoke $r5.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void lock()>();

     label0:
        $r7 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r8 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r7);
        $z0 = virtualinvoke $r8.<sun.nio.fs.UnixDirectoryStream: boolean isOpen()>();
        if $z0 != 0 goto label1;

        $r9 = new java.nio.file.ClosedDirectoryStreamException;
        specialinvoke $r9.<java.nio.file.ClosedDirectoryStreamException: void <init>()>();
        throw $r9;

     label1:
        $r10 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        if $r10 != null goto label2;

        $r11 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $i3 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: int access$000(sun.nio.fs.UnixSecureDirectoryStream)>($r11);
        goto label3;

     label2:
        $i3 = virtualinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: int open()>();

     label3:
        i2 = $i3;

     label4:
        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void fchown(int,int,int)>(i2, i0, i1);

     label5:
        $r12 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        if $r12 == null goto label13;

        if i2 < 0 goto label13;

        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void close(int)>(i2);
        goto label13;

     label6:
        $r13 := @caughtexception;

     label7:
        r1 = $r13;
        $r14 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        virtualinvoke r1.<sun.nio.fs.UnixException: void rethrowAsIOException(sun.nio.fs.UnixPath)>($r14);

     label8:
        $r15 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        if $r15 == null goto label13;

        if i2 < 0 goto label13;

        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void close(int)>(i2);
        goto label13;

     label9:
        $r16 := @caughtexception;

     label10:
        r2 = $r16;

     label11:
        $r17 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixPath file>;
        if $r17 == null goto label12;

        if i2 < 0 goto label12;

        staticinvoke <sun.nio.fs.UnixNativeDispatcher: void close(int)>(i2);

     label12:
        throw r2;

     label13:
        $r18 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r19 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r18);
        $r20 = virtualinvoke $r19.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r20.<java.util.concurrent.locks.Lock: void unlock()>();
        goto label17;

     label14:
        $r21 := @caughtexception;

     label15:
        r3 = $r21;

     label16:
        $r22 = r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: sun.nio.fs.UnixSecureDirectoryStream this$0>;
        $r23 = staticinvoke <sun.nio.fs.UnixSecureDirectoryStream: sun.nio.fs.UnixDirectoryStream access$100(sun.nio.fs.UnixSecureDirectoryStream)>($r22);
        $r24 = virtualinvoke $r23.<sun.nio.fs.UnixDirectoryStream: java.util.concurrent.locks.Lock readLock()>();
        interfaceinvoke $r24.<java.util.concurrent.locks.Lock: void unlock()>();
        throw r3;

     label17:
        return;

        catch sun.nio.fs.UnixException from label4 to label5 with label6;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
        catch java.lang.Throwable from label0 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public java.nio.file.attribute.UserPrincipal getOwner() throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl r0;
        java.nio.file.attribute.PosixFileAttributes $r1;
        java.nio.file.attribute.UserPrincipal $r2;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl;
        $r1 = virtualinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: java.nio.file.attribute.PosixFileAttributes readAttributes()>();
        $r2 = interfaceinvoke $r1.<java.nio.file.attribute.PosixFileAttributes: java.nio.file.attribute.UserPrincipal owner()>();
        return $r2;
    }

    public void setOwner(java.nio.file.attribute.UserPrincipal) throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl r0;
        java.nio.file.attribute.UserPrincipal r1;
        int i0;
        boolean $z0, $z1;
        java.nio.file.ProviderMismatchException $r2;
        java.io.IOException $r3;
        sun.nio.fs.UnixUserPrincipals$User $r4;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl;
        r1 := @parameter0: java.nio.file.attribute.UserPrincipal;
        $z0 = r1 instanceof sun.nio.fs.UnixUserPrincipals$User;
        if $z0 != 0 goto label0;

        $r2 = new java.nio.file.ProviderMismatchException;
        specialinvoke $r2.<java.nio.file.ProviderMismatchException: void <init>()>();
        throw $r2;

     label0:
        $z1 = r1 instanceof sun.nio.fs.UnixUserPrincipals$Group;
        if $z1 == 0 goto label1;

        $r3 = new java.io.IOException;
        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("\'owner\' parameter can\'t be a group");
        throw $r3;

     label1:
        $r4 = (sun.nio.fs.UnixUserPrincipals$User) r1;
        i0 = virtualinvoke $r4.<sun.nio.fs.UnixUserPrincipals$User: int uid()>();
        specialinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: void setOwners(int,int)>(i0, -1);
        return;
    }

    public void setGroup(java.nio.file.attribute.GroupPrincipal) throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl r0;
        java.nio.file.attribute.GroupPrincipal r1;
        int i0;
        boolean $z0;
        java.nio.file.ProviderMismatchException $r2;
        sun.nio.fs.UnixUserPrincipals$Group $r3;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl;
        r1 := @parameter0: java.nio.file.attribute.GroupPrincipal;
        $z0 = r1 instanceof sun.nio.fs.UnixUserPrincipals$Group;
        if $z0 != 0 goto label0;

        $r2 = new java.nio.file.ProviderMismatchException;
        specialinvoke $r2.<java.nio.file.ProviderMismatchException: void <init>()>();
        throw $r2;

     label0:
        $r3 = (sun.nio.fs.UnixUserPrincipals$Group) r1;
        i0 = virtualinvoke $r3.<sun.nio.fs.UnixUserPrincipals$Group: int gid()>();
        specialinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: void setOwners(int,int)>(-1, i0);
        return;
    }

    public volatile java.nio.file.attribute.BasicFileAttributes readAttributes() throws java.io.IOException
    {
        sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl r0;
        java.nio.file.attribute.PosixFileAttributes $r1;

        r0 := @this: sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl;
        $r1 = virtualinvoke r0.<sun.nio.fs.UnixSecureDirectoryStream$PosixFileAttributeViewImpl: java.nio.file.attribute.PosixFileAttributes readAttributes()>();
        return $r1;
    }
}
