abstract class sun.nio.fs.AbstractWatchKey extends java.lang.Object implements java.nio.file.WatchKey
{
    static final int MAX_EVENT_LIST_SIZE;
    static final sun.nio.fs.AbstractWatchKey$Event OVERFLOW_EVENT;
    private final sun.nio.fs.AbstractWatchService watcher;
    private final java.nio.file.Path dir;
    private sun.nio.fs.AbstractWatchKey$State state;
    private java.util.List events;
    private java.util.Map lastModifyEvents;
    static final boolean $assertionsDisabled;

    protected void <init>(java.nio.file.Path, sun.nio.fs.AbstractWatchService)
    {
        sun.nio.fs.AbstractWatchKey r0;
        java.nio.file.Path r1;
        sun.nio.fs.AbstractWatchService r2;
        sun.nio.fs.AbstractWatchKey$State $r3;
        java.util.ArrayList $r4;
        java.util.HashMap $r5;

        r0 := @this: sun.nio.fs.AbstractWatchKey;
        r1 := @parameter0: java.nio.file.Path;
        r2 := @parameter1: sun.nio.fs.AbstractWatchService;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.nio.fs.AbstractWatchKey: sun.nio.fs.AbstractWatchService watcher> = r2;
        r0.<sun.nio.fs.AbstractWatchKey: java.nio.file.Path dir> = r1;
        $r3 = <sun.nio.fs.AbstractWatchKey$State: sun.nio.fs.AbstractWatchKey$State READY>;
        r0.<sun.nio.fs.AbstractWatchKey: sun.nio.fs.AbstractWatchKey$State state> = $r3;
        $r4 = new java.util.ArrayList;
        specialinvoke $r4.<java.util.ArrayList: void <init>()>();
        r0.<sun.nio.fs.AbstractWatchKey: java.util.List events> = $r4;
        $r5 = new java.util.HashMap;
        specialinvoke $r5.<java.util.HashMap: void <init>()>();
        r0.<sun.nio.fs.AbstractWatchKey: java.util.Map lastModifyEvents> = $r5;
        return;
    }

    final sun.nio.fs.AbstractWatchService watcher()
    {
        sun.nio.fs.AbstractWatchKey r0;
        sun.nio.fs.AbstractWatchService $r1;

        r0 := @this: sun.nio.fs.AbstractWatchKey;
        $r1 = r0.<sun.nio.fs.AbstractWatchKey: sun.nio.fs.AbstractWatchService watcher>;
        return $r1;
    }

    public java.nio.file.Path watchable()
    {
        sun.nio.fs.AbstractWatchKey r0;
        java.nio.file.Path $r1;

        r0 := @this: sun.nio.fs.AbstractWatchKey;
        $r1 = r0.<sun.nio.fs.AbstractWatchKey: java.nio.file.Path dir>;
        return $r1;
    }

    final void signal()
    {
        sun.nio.fs.AbstractWatchKey r0, r2;
        java.lang.Throwable r3, $r8;
        sun.nio.fs.AbstractWatchKey$State $r4, $r5, $r6;
        sun.nio.fs.AbstractWatchService $r7;

        r0 := @this: sun.nio.fs.AbstractWatchKey;
        r2 = r0;
        entermonitor r0;

     label0:
        $r4 = r0.<sun.nio.fs.AbstractWatchKey: sun.nio.fs.AbstractWatchKey$State state>;
        $r5 = <sun.nio.fs.AbstractWatchKey$State: sun.nio.fs.AbstractWatchKey$State READY>;
        if $r4 != $r5 goto label1;

        $r6 = <sun.nio.fs.AbstractWatchKey$State: sun.nio.fs.AbstractWatchKey$State SIGNALLED>;
        r0.<sun.nio.fs.AbstractWatchKey: sun.nio.fs.AbstractWatchKey$State state> = $r6;
        $r7 = r0.<sun.nio.fs.AbstractWatchKey: sun.nio.fs.AbstractWatchService watcher>;
        virtualinvoke $r7.<sun.nio.fs.AbstractWatchService: void enqueueKey(java.nio.file.WatchKey)>(r0);

     label1:
        exitmonitor r2;

     label2:
        goto label6;

     label3:
        $r8 := @caughtexception;

     label4:
        r3 = $r8;
        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    final void signalEvent(java.nio.file.WatchEvent$Kind, java.lang.Object)
    {
        sun.nio.fs.AbstractWatchKey r0, r4;
        java.nio.file.WatchEvent$Kind r1, $r3, $r12, $r13, $r14, $r20, $r21, $r30;
        java.lang.Object r2, $r11, $r15, $r19;
        boolean z0, $z1, $z2, $z3, $z4;
        int i0, $i1;
        java.nio.file.WatchEvent r5, r6;
        java.lang.Throwable r7, $r34;
        java.util.List $r9, $r10, $r31, $r33;
        sun.nio.fs.AbstractWatchKey$Event $r16, $r23, $r26, r27;
        java.util.Map $r17, $r18, $r24, $r28, $r32;
        java.lang.AssertionError $r22;

        r0 := @this: sun.nio.fs.AbstractWatchKey;
        r1 := @parameter0: java.nio.file.WatchEvent$Kind;
        r2 := @parameter1: java.lang.Object;
        $r3 = <java.nio.file.StandardWatchEventKinds: java.nio.file.WatchEvent$Kind ENTRY_MODIFY>;
        if r1 != $r3 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        z0 = $z1;
        r4 = r0;
        entermonitor r0;

     label2:
        $r9 = r0.<sun.nio.fs.AbstractWatchKey: java.util.List events>;
        i0 = interfaceinvoke $r9.<java.util.List: int size()>();
        if i0 <= 0 goto label11;

        $r10 = r0.<sun.nio.fs.AbstractWatchKey: java.util.List events>;
        $i1 = i0 - 1;
        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i1);
        r5 = (java.nio.file.WatchEvent) $r11;
        $r12 = interfaceinvoke r5.<java.nio.file.WatchEvent: java.nio.file.WatchEvent$Kind kind()>();
        $r13 = <java.nio.file.StandardWatchEventKinds: java.nio.file.WatchEvent$Kind OVERFLOW>;
        if $r12 == $r13 goto label3;

        $r14 = interfaceinvoke r5.<java.nio.file.WatchEvent: java.nio.file.WatchEvent$Kind kind()>();
        if r1 != $r14 goto label5;

        $r15 = interfaceinvoke r5.<java.nio.file.WatchEvent: java.lang.Object context()>();
        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r2, $r15);
        if $z2 == 0 goto label5;

     label3:
        $r16 = (sun.nio.fs.AbstractWatchKey$Event) r5;
        virtualinvoke $r16.<sun.nio.fs.AbstractWatchKey$Event: void increment()>();
        exitmonitor r4;

     label4:
        return;

     label5:
        $r17 = r0.<sun.nio.fs.AbstractWatchKey: java.util.Map lastModifyEvents>;
        $z3 = interfaceinvoke $r17.<java.util.Map: boolean isEmpty()>();
        if $z3 != 0 goto label10;

        if z0 == 0 goto label9;

        $r18 = r0.<sun.nio.fs.AbstractWatchKey: java.util.Map lastModifyEvents>;
        $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);
        r6 = (java.nio.file.WatchEvent) $r19;
        if r6 == null goto label8;

        $z4 = <sun.nio.fs.AbstractWatchKey: boolean $assertionsDisabled>;
        if $z4 != 0 goto label6;

        $r20 = interfaceinvoke r6.<java.nio.file.WatchEvent: java.nio.file.WatchEvent$Kind kind()>();
        $r21 = <java.nio.file.StandardWatchEventKinds: java.nio.file.WatchEvent$Kind ENTRY_MODIFY>;
        if $r20 == $r21 goto label6;

        $r22 = new java.lang.AssertionError;
        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();
        throw $r22;

     label6:
        $r23 = (sun.nio.fs.AbstractWatchKey$Event) r6;
        virtualinvoke $r23.<sun.nio.fs.AbstractWatchKey$Event: void increment()>();
        exitmonitor r4;

     label7:
        return;

     label8:
        goto label10;

     label9:
        $r24 = r0.<sun.nio.fs.AbstractWatchKey: java.util.Map lastModifyEvents>;
        interfaceinvoke $r24.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

     label10:
        if i0 < 512 goto label11;

        r1 = <java.nio.file.StandardWatchEventKinds: java.nio.file.WatchEvent$Kind OVERFLOW>;
        z0 = 0;
        r2 = null;

     label11:
        $r26 = new sun.nio.fs.AbstractWatchKey$Event;
        specialinvoke $r26.<sun.nio.fs.AbstractWatchKey$Event: void <init>(java.nio.file.WatchEvent$Kind,java.lang.Object)>(r1, r2);
        r27 = $r26;
        if z0 == 0 goto label12;

        $r28 = r0.<sun.nio.fs.AbstractWatchKey: java.util.Map lastModifyEvents>;
        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r27);
        goto label13;

     label12:
        $r30 = <java.nio.file.StandardWatchEventKinds: java.nio.file.WatchEvent$Kind OVERFLOW>;
        if r1 != $r30 goto label13;

        $r31 = r0.<sun.nio.fs.AbstractWatchKey: java.util.List events>;
        interfaceinvoke $r31.<java.util.List: void clear()>();
        $r32 = r0.<sun.nio.fs.AbstractWatchKey: java.util.Map lastModifyEvents>;
        interfaceinvoke $r32.<java.util.Map: void clear()>();

     label13:
        $r33 = r0.<sun.nio.fs.AbstractWatchKey: java.util.List events>;
        interfaceinvoke $r33.<java.util.List: boolean add(java.lang.Object)>(r27);
        virtualinvoke r0.<sun.nio.fs.AbstractWatchKey: void signal()>();
        exitmonitor r4;

     label14:
        goto label18;

     label15:
        $r34 := @caughtexception;

     label16:
        r7 = $r34;
        exitmonitor r4;

     label17:
        throw r7;

     label18:
        return;

        catch java.lang.Throwable from label2 to label4 with label15;
        catch java.lang.Throwable from label5 to label7 with label15;
        catch java.lang.Throwable from label8 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public final java.util.List pollEvents()
    {
        sun.nio.fs.AbstractWatchKey r0, r2;
        java.util.List r3;
        java.lang.Throwable r4, $r8;
        java.util.ArrayList $r5;
        java.util.Map $r6;

        r0 := @this: sun.nio.fs.AbstractWatchKey;
        r2 = r0;
        entermonitor r0;

     label0:
        r3 = r0.<sun.nio.fs.AbstractWatchKey: java.util.List events>;
        $r5 = new java.util.ArrayList;
        specialinvoke $r5.<java.util.ArrayList: void <init>()>();
        r0.<sun.nio.fs.AbstractWatchKey: java.util.List events> = $r5;
        $r6 = r0.<sun.nio.fs.AbstractWatchKey: java.util.Map lastModifyEvents>;
        interfaceinvoke $r6.<java.util.Map: void clear()>();
        exitmonitor r2;

     label1:
        return r3;

     label2:
        $r8 := @caughtexception;

     label3:
        r4 = $r8;
        exitmonitor r2;

     label4:
        throw r4;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public final boolean reset()
    {
        sun.nio.fs.AbstractWatchKey r0, r2;
        java.lang.Throwable r3, $r9;
        sun.nio.fs.AbstractWatchKey$State $r4, $r5, $r7;
        boolean $z0, $z1, $z2;
        java.util.List $r6;
        sun.nio.fs.AbstractWatchService $r8;

        r0 := @this: sun.nio.fs.AbstractWatchKey;
        r2 = r0;
        entermonitor r0;

     label0:
        $r4 = r0.<sun.nio.fs.AbstractWatchKey: sun.nio.fs.AbstractWatchKey$State state>;
        $r5 = <sun.nio.fs.AbstractWatchKey$State: sun.nio.fs.AbstractWatchKey$State SIGNALLED>;
        if $r4 != $r5 goto label2;

        $z0 = virtualinvoke r0.<sun.nio.fs.AbstractWatchKey: boolean isValid()>();
        if $z0 == 0 goto label2;

        $r6 = r0.<sun.nio.fs.AbstractWatchKey: java.util.List events>;
        $z1 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();
        if $z1 == 0 goto label1;

        $r7 = <sun.nio.fs.AbstractWatchKey$State: sun.nio.fs.AbstractWatchKey$State READY>;
        r0.<sun.nio.fs.AbstractWatchKey: sun.nio.fs.AbstractWatchKey$State state> = $r7;
        goto label2;

     label1:
        $r8 = r0.<sun.nio.fs.AbstractWatchKey: sun.nio.fs.AbstractWatchService watcher>;
        virtualinvoke $r8.<sun.nio.fs.AbstractWatchService: void enqueueKey(java.nio.file.WatchKey)>(r0);

     label2:
        $z2 = virtualinvoke r0.<sun.nio.fs.AbstractWatchKey: boolean isValid()>();
        exitmonitor r2;

     label3:
        return $z2;

     label4:
        $r9 := @caughtexception;

     label5:
        r3 = $r9;
        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public volatile java.nio.file.Watchable watchable()
    {
        sun.nio.fs.AbstractWatchKey r0;
        java.nio.file.Path $r1;

        r0 := @this: sun.nio.fs.AbstractWatchKey;
        $r1 = virtualinvoke r0.<sun.nio.fs.AbstractWatchKey: java.nio.file.Path watchable()>();
        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.nio.file.WatchEvent$Kind $r1;
        boolean $z0, $z1;
        sun.nio.fs.AbstractWatchKey$Event $r2;

        $r0 = class "sun/nio/fs/AbstractWatchKey";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.nio.fs.AbstractWatchKey: boolean $assertionsDisabled> = $z1;
        $r2 = new sun.nio.fs.AbstractWatchKey$Event;
        $r1 = <java.nio.file.StandardWatchEventKinds: java.nio.file.WatchEvent$Kind OVERFLOW>;
        specialinvoke $r2.<sun.nio.fs.AbstractWatchKey$Event: void <init>(java.nio.file.WatchEvent$Kind,java.lang.Object)>($r1, null);
        <sun.nio.fs.AbstractWatchKey: sun.nio.fs.AbstractWatchKey$Event OVERFLOW_EVENT> = $r2;
        return;
    }
}
