public abstract class java.nio.MappedByteBuffer extends java.nio.ByteBuffer
{
    private final java.io.FileDescriptor fd;
    private static byte unused;

    void <init>(int, int, int, int, java.io.FileDescriptor)
    {
        java.nio.MappedByteBuffer r0;
        int i0, i1, i2, i3;
        java.io.FileDescriptor r1;

        r0 := @this: java.nio.MappedByteBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        r1 := @parameter4: java.io.FileDescriptor;
        specialinvoke r0.<java.nio.ByteBuffer: void <init>(int,int,int,int)>(i0, i1, i2, i3);
        r0.<java.nio.MappedByteBuffer: java.io.FileDescriptor fd> = r1;
        return;
    }

    void <init>(int, int, int, int)
    {
        java.nio.MappedByteBuffer r0;
        int i0, i1, i2, i3;

        r0 := @this: java.nio.MappedByteBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        specialinvoke r0.<java.nio.ByteBuffer: void <init>(int,int,int,int)>(i0, i1, i2, i3);
        r0.<java.nio.MappedByteBuffer: java.io.FileDescriptor fd> = null;
        return;
    }

    private void checkMapped()
    {
        java.nio.MappedByteBuffer r0;
        java.io.FileDescriptor $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.nio.MappedByteBuffer;
        $r1 = r0.<java.nio.MappedByteBuffer: java.io.FileDescriptor fd>;
        if $r1 != null goto label0;

        $r2 = new java.lang.UnsupportedOperationException;
        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r2;

     label0:
        return;
    }

    private long mappingOffset()
    {
        java.nio.MappedByteBuffer r0;
        int i0;
        long l1, $l2, $l3, $l5, $l6;
        byte $b4;

        r0 := @this: java.nio.MappedByteBuffer;
        i0 = staticinvoke <java.nio.Bits: int pageSize()>();
        $l2 = r0.<java.nio.MappedByteBuffer: long address>;
        $l3 = (long) i0;
        l1 = $l2 % $l3;
        $b4 = l1 cmp 0L;
        if $b4 < 0 goto label0;

        $l5 = l1;
        goto label1;

     label0:
        $l6 = (long) i0;
        $l5 = $l6 + l1;

     label1:
        return $l5;
    }

    private long mappingAddress(long)
    {
        java.nio.MappedByteBuffer r0;
        long l0, $l1, $l2;

        r0 := @this: java.nio.MappedByteBuffer;
        l0 := @parameter0: long;
        $l1 = r0.<java.nio.MappedByteBuffer: long address>;
        $l2 = $l1 - l0;
        return $l2;
    }

    private long mappingLength(long)
    {
        java.nio.MappedByteBuffer r0;
        long l0, $l2, $l3;
        int $i1;

        r0 := @this: java.nio.MappedByteBuffer;
        l0 := @parameter0: long;
        $i1 = virtualinvoke r0.<java.nio.MappedByteBuffer: int capacity()>();
        $l2 = (long) $i1;
        $l3 = $l2 + l0;
        return $l3;
    }

    public final boolean isLoaded()
    {
        java.nio.MappedByteBuffer r0;
        long l0, l1, $l2, $l5;
        byte $b3;
        int $i4, $i6;
        boolean $z0;

        r0 := @this: java.nio.MappedByteBuffer;
        specialinvoke r0.<java.nio.MappedByteBuffer: void checkMapped()>();
        $l2 = r0.<java.nio.MappedByteBuffer: long address>;
        $b3 = $l2 cmp 0L;
        if $b3 == 0 goto label0;

        $i4 = virtualinvoke r0.<java.nio.MappedByteBuffer: int capacity()>();
        if $i4 != 0 goto label1;

     label0:
        return 1;

     label1:
        l0 = specialinvoke r0.<java.nio.MappedByteBuffer: long mappingOffset()>();
        l1 = specialinvoke r0.<java.nio.MappedByteBuffer: long mappingLength(long)>(l0);
        $l5 = specialinvoke r0.<java.nio.MappedByteBuffer: long mappingAddress(long)>(l0);
        $i6 = staticinvoke <java.nio.Bits: int pageCount(long)>(l1);
        $z0 = specialinvoke r0.<java.nio.MappedByteBuffer: boolean isLoaded0(long,long,int)>($l5, l1, $i6);
        return $z0;
    }

    public final java.nio.MappedByteBuffer load()
    {
        java.nio.MappedByteBuffer r0;
        long l0, l1, l4, $l7, $l10, $l13;
        sun.misc.Unsafe r1;
        int i2, i3, i6, $i9;
        byte b5, $b8, $b11, $b12, $b14;

        r0 := @this: java.nio.MappedByteBuffer;
        specialinvoke r0.<java.nio.MappedByteBuffer: void checkMapped()>();
        $l7 = r0.<java.nio.MappedByteBuffer: long address>;
        $b8 = $l7 cmp 0L;
        if $b8 == 0 goto label0;

        $i9 = virtualinvoke r0.<java.nio.MappedByteBuffer: int capacity()>();
        if $i9 != 0 goto label1;

     label0:
        return r0;

     label1:
        l0 = specialinvoke r0.<java.nio.MappedByteBuffer: long mappingOffset()>();
        l1 = specialinvoke r0.<java.nio.MappedByteBuffer: long mappingLength(long)>(l0);
        $l10 = specialinvoke r0.<java.nio.MappedByteBuffer: long mappingAddress(long)>(l0);
        specialinvoke r0.<java.nio.MappedByteBuffer: void load0(long,long)>($l10, l1);
        r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();
        i2 = staticinvoke <java.nio.Bits: int pageSize()>();
        i3 = staticinvoke <java.nio.Bits: int pageCount(long)>(l1);
        l4 = specialinvoke r0.<java.nio.MappedByteBuffer: long mappingAddress(long)>(l0);
        b5 = 0;
        i6 = 0;

     label2:
        if i6 >= i3 goto label3;

        $b11 = virtualinvoke r1.<sun.misc.Unsafe: byte getByte(long)>(l4);
        $b12 = b5 ^ $b11;
        b5 = (byte) $b12;
        $l13 = (long) i2;
        l4 = l4 + $l13;
        i6 = i6 + 1;
        goto label2;

     label3:
        $b14 = <java.nio.MappedByteBuffer: byte unused>;
        if $b14 == 0 goto label4;

        <java.nio.MappedByteBuffer: byte unused> = b5;

     label4:
        return r0;
    }

    public final java.nio.MappedByteBuffer force()
    {
        java.nio.MappedByteBuffer r0;
        long l0, $l1, $l4, $l5;
        byte $b2;
        int $i3;
        java.io.FileDescriptor $r1;

        r0 := @this: java.nio.MappedByteBuffer;
        specialinvoke r0.<java.nio.MappedByteBuffer: void checkMapped()>();
        $l1 = r0.<java.nio.MappedByteBuffer: long address>;
        $b2 = $l1 cmp 0L;
        if $b2 == 0 goto label0;

        $i3 = virtualinvoke r0.<java.nio.MappedByteBuffer: int capacity()>();
        if $i3 == 0 goto label0;

        l0 = specialinvoke r0.<java.nio.MappedByteBuffer: long mappingOffset()>();
        $r1 = r0.<java.nio.MappedByteBuffer: java.io.FileDescriptor fd>;
        $l4 = specialinvoke r0.<java.nio.MappedByteBuffer: long mappingAddress(long)>(l0);
        $l5 = specialinvoke r0.<java.nio.MappedByteBuffer: long mappingLength(long)>(l0);
        specialinvoke r0.<java.nio.MappedByteBuffer: void force0(java.io.FileDescriptor,long,long)>($r1, $l4, $l5);

     label0:
        return r0;
    }

    private native boolean isLoaded0(long, long, int);

    private native void load0(long, long);

    private native void force0(java.io.FileDescriptor, long, long);
}
