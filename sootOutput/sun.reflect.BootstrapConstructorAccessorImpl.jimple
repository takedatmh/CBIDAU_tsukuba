class sun.reflect.BootstrapConstructorAccessorImpl extends sun.reflect.ConstructorAccessorImpl
{
    private java.lang.reflect.Constructor constructor;

    void <init>(java.lang.reflect.Constructor)
    {
        sun.reflect.BootstrapConstructorAccessorImpl r0;
        java.lang.reflect.Constructor r1;

        r0 := @this: sun.reflect.BootstrapConstructorAccessorImpl;
        r1 := @parameter0: java.lang.reflect.Constructor;
        specialinvoke r0.<sun.reflect.ConstructorAccessorImpl: void <init>()>();
        r0.<sun.reflect.BootstrapConstructorAccessorImpl: java.lang.reflect.Constructor constructor> = r1;
        return;
    }

    public java.lang.Object newInstance(java.lang.Object[]) throws java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException
    {
        sun.reflect.BootstrapConstructorAccessorImpl r0;
        java.lang.Object[] r1;
        sun.misc.Unsafe $r2;
        java.lang.InstantiationException r3, $r7;
        java.lang.reflect.Constructor $r4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        java.lang.reflect.InvocationTargetException $r8;

        r0 := @this: sun.reflect.BootstrapConstructorAccessorImpl;
        r1 := @parameter0: java.lang.Object[];

     label0:
        $r2 = <sun.reflect.UnsafeFieldAccessorImpl: sun.misc.Unsafe unsafe>;
        $r4 = r0.<sun.reflect.BootstrapConstructorAccessorImpl: java.lang.reflect.Constructor constructor>;
        $r5 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
        $r6 = virtualinvoke $r2.<sun.misc.Unsafe: java.lang.Object allocateInstance(java.lang.Class)>($r5);

     label1:
        return $r6;

     label2:
        $r7 := @caughtexception;
        r3 = $r7;
        $r8 = new java.lang.reflect.InvocationTargetException;
        specialinvoke $r8.<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable)>(r3);
        throw $r8;

        catch java.lang.InstantiationException from label0 to label1 with label2;
    }
}
