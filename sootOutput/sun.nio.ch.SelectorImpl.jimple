abstract class sun.nio.ch.SelectorImpl extends java.nio.channels.spi.AbstractSelector
{
    protected java.util.Set selectedKeys;
    protected java.util.HashSet keys;
    private java.util.Set publicKeys;
    private java.util.Set publicSelectedKeys;

    protected void <init>(java.nio.channels.spi.SelectorProvider)
    {
        sun.nio.ch.SelectorImpl r0;
        java.nio.channels.spi.SelectorProvider r1;
        java.util.HashSet $r2, $r3, $r4, $r6;
        boolean $z0;
        java.util.Set $r5, $r7, $r8, $r9;

        r0 := @this: sun.nio.ch.SelectorImpl;
        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;
        specialinvoke r0.<java.nio.channels.spi.AbstractSelector: void <init>(java.nio.channels.spi.SelectorProvider)>(r1);
        $r2 = new java.util.HashSet;
        specialinvoke $r2.<java.util.HashSet: void <init>()>();
        r0.<sun.nio.ch.SelectorImpl: java.util.HashSet keys> = $r2;
        $r3 = new java.util.HashSet;
        specialinvoke $r3.<java.util.HashSet: void <init>()>();
        r0.<sun.nio.ch.SelectorImpl: java.util.Set selectedKeys> = $r3;
        $z0 = staticinvoke <sun.nio.ch.Util: boolean atBugLevel(java.lang.String)>("1.4");
        if $z0 == 0 goto label0;

        $r4 = r0.<sun.nio.ch.SelectorImpl: java.util.HashSet keys>;
        r0.<sun.nio.ch.SelectorImpl: java.util.Set publicKeys> = $r4;
        $r5 = r0.<sun.nio.ch.SelectorImpl: java.util.Set selectedKeys>;
        r0.<sun.nio.ch.SelectorImpl: java.util.Set publicSelectedKeys> = $r5;
        goto label1;

     label0:
        $r6 = r0.<sun.nio.ch.SelectorImpl: java.util.HashSet keys>;
        $r7 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r6);
        r0.<sun.nio.ch.SelectorImpl: java.util.Set publicKeys> = $r7;
        $r8 = r0.<sun.nio.ch.SelectorImpl: java.util.Set selectedKeys>;
        $r9 = staticinvoke <sun.nio.ch.Util: java.util.Set ungrowableSet(java.util.Set)>($r8);
        r0.<sun.nio.ch.SelectorImpl: java.util.Set publicSelectedKeys> = $r9;

     label1:
        return;
    }

    public java.util.Set keys()
    {
        sun.nio.ch.SelectorImpl r0;
        boolean $z0, $z1;
        java.nio.channels.ClosedSelectorException $r1;
        java.util.Set $r2;

        r0 := @this: sun.nio.ch.SelectorImpl;
        $z0 = virtualinvoke r0.<sun.nio.ch.SelectorImpl: boolean isOpen()>();
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <sun.nio.ch.Util: boolean atBugLevel(java.lang.String)>("1.4");
        if $z1 != 0 goto label0;

        $r1 = new java.nio.channels.ClosedSelectorException;
        specialinvoke $r1.<java.nio.channels.ClosedSelectorException: void <init>()>();
        throw $r1;

     label0:
        $r2 = r0.<sun.nio.ch.SelectorImpl: java.util.Set publicKeys>;
        return $r2;
    }

    public java.util.Set selectedKeys()
    {
        sun.nio.ch.SelectorImpl r0;
        boolean $z0, $z1;
        java.nio.channels.ClosedSelectorException $r1;
        java.util.Set $r2;

        r0 := @this: sun.nio.ch.SelectorImpl;
        $z0 = virtualinvoke r0.<sun.nio.ch.SelectorImpl: boolean isOpen()>();
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <sun.nio.ch.Util: boolean atBugLevel(java.lang.String)>("1.4");
        if $z1 != 0 goto label0;

        $r1 = new java.nio.channels.ClosedSelectorException;
        specialinvoke $r1.<java.nio.channels.ClosedSelectorException: void <init>()>();
        throw $r1;

     label0:
        $r2 = r0.<sun.nio.ch.SelectorImpl: java.util.Set publicSelectedKeys>;
        return $r2;
    }

    protected abstract int doSelect(long) throws java.io.IOException;

    private int lockAndDoSelect(long) throws java.io.IOException
    {
        sun.nio.ch.SelectorImpl r0, r2;
        long l0;
        java.util.Set r3, r4, $r9, $r10;
        java.lang.Throwable r5, r6, r7, $r11, $r12, $r13;
        boolean $z0;
        java.nio.channels.ClosedSelectorException $r8;
        int $i1;

        r0 := @this: sun.nio.ch.SelectorImpl;
        l0 := @parameter0: long;
        r2 = r0;
        entermonitor r0;

     label0:
        $z0 = virtualinvoke r0.<sun.nio.ch.SelectorImpl: boolean isOpen()>();
        if $z0 != 0 goto label1;

        $r8 = new java.nio.channels.ClosedSelectorException;
        specialinvoke $r8.<java.nio.channels.ClosedSelectorException: void <init>()>();
        throw $r8;

     label1:
        $r9 = r0.<sun.nio.ch.SelectorImpl: java.util.Set publicKeys>;
        r3 = $r9;
        entermonitor $r9;

     label2:
        $r10 = r0.<sun.nio.ch.SelectorImpl: java.util.Set publicSelectedKeys>;
        r4 = $r10;
        entermonitor $r10;

     label3:
        $i1 = virtualinvoke r0.<sun.nio.ch.SelectorImpl: int doSelect(long)>(l0);
        exitmonitor r4;

     label4:
        exitmonitor r3;

     label5:
        exitmonitor r2;

     label6:
        return $i1;

     label7:
        $r11 := @caughtexception;

     label8:
        r5 = $r11;
        exitmonitor r4;

     label9:
        throw r5;

     label10:
        $r12 := @caughtexception;
        r6 = $r12;
        exitmonitor r3;

     label11:
        throw r6;

     label12:
        $r13 := @caughtexception;
        r7 = $r13;
        exitmonitor r2;

     label13:
        throw r7;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
        catch java.lang.Throwable from label2 to label5 with label10;
        catch java.lang.Throwable from label8 to label11 with label10;
        catch java.lang.Throwable from label0 to label6 with label12;
        catch java.lang.Throwable from label8 to label13 with label12;
    }

    public int select(long) throws java.io.IOException
    {
        sun.nio.ch.SelectorImpl r0;
        long l0, $l3;
        byte $b1, $b2;
        java.lang.IllegalArgumentException $r1;
        int $i4;

        r0 := @this: sun.nio.ch.SelectorImpl;
        l0 := @parameter0: long;
        $b1 = l0 cmp 0L;
        if $b1 >= 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative timeout");
        throw $r1;

     label0:
        $b2 = l0 cmp 0L;
        if $b2 != 0 goto label1;

        $l3 = -1L;
        goto label2;

     label1:
        $l3 = l0;

     label2:
        $i4 = specialinvoke r0.<sun.nio.ch.SelectorImpl: int lockAndDoSelect(long)>($l3);
        return $i4;
    }

    public int select() throws java.io.IOException
    {
        sun.nio.ch.SelectorImpl r0;
        int $i0;

        r0 := @this: sun.nio.ch.SelectorImpl;
        $i0 = virtualinvoke r0.<sun.nio.ch.SelectorImpl: int select(long)>(0L);
        return $i0;
    }

    public int selectNow() throws java.io.IOException
    {
        sun.nio.ch.SelectorImpl r0;
        int $i0;

        r0 := @this: sun.nio.ch.SelectorImpl;
        $i0 = specialinvoke r0.<sun.nio.ch.SelectorImpl: int lockAndDoSelect(long)>(0L);
        return $i0;
    }

    public void implCloseSelector() throws java.io.IOException
    {
        sun.nio.ch.SelectorImpl r0, r1;
        java.util.Set r2, r3, $r9, $r10;
        java.lang.Throwable r4, r5, r6, $r11, $r12, $r13;

        r0 := @this: sun.nio.ch.SelectorImpl;
        virtualinvoke r0.<sun.nio.ch.SelectorImpl: java.nio.channels.Selector wakeup()>();
        r1 = r0;
        entermonitor r0;

     label0:
        $r9 = r0.<sun.nio.ch.SelectorImpl: java.util.Set publicKeys>;
        r2 = $r9;
        entermonitor $r9;

     label1:
        $r10 = r0.<sun.nio.ch.SelectorImpl: java.util.Set publicSelectedKeys>;
        r3 = $r10;
        entermonitor $r10;

     label2:
        virtualinvoke r0.<sun.nio.ch.SelectorImpl: void implClose()>();
        exitmonitor r3;

     label3:
        goto label7;

     label4:
        $r11 := @caughtexception;

     label5:
        r4 = $r11;
        exitmonitor r3;

     label6:
        throw r4;

     label7:
        exitmonitor r2;

     label8:
        goto label12;

     label9:
        $r12 := @caughtexception;

     label10:
        r5 = $r12;
        exitmonitor r2;

     label11:
        throw r5;

     label12:
        exitmonitor r1;

     label13:
        goto label17;

     label14:
        $r13 := @caughtexception;

     label15:
        r6 = $r13;
        exitmonitor r1;

     label16:
        throw r6;

     label17:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label1 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
        catch java.lang.Throwable from label0 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    protected abstract void implClose() throws java.io.IOException;

    void putEventOps(sun.nio.ch.SelectionKeyImpl, int)
    {
        sun.nio.ch.SelectorImpl r0;
        sun.nio.ch.SelectionKeyImpl r1;
        int i0;

        r0 := @this: sun.nio.ch.SelectorImpl;
        r1 := @parameter0: sun.nio.ch.SelectionKeyImpl;
        i0 := @parameter1: int;
        return;
    }

    protected final java.nio.channels.SelectionKey register(java.nio.channels.spi.AbstractSelectableChannel, int, java.lang.Object)
    {
        sun.nio.ch.SelectorImpl r0;
        java.nio.channels.spi.AbstractSelectableChannel r1;
        int i0;
        java.lang.Object r2;
        sun.nio.ch.SelectionKeyImpl r3, $r7;
        java.util.Set r4, $r10;
        java.lang.Throwable r5, $r11;
        boolean $z0;
        java.nio.channels.IllegalSelectorException $r6;
        sun.nio.ch.SelChImpl $r8;

        r0 := @this: sun.nio.ch.SelectorImpl;
        r1 := @parameter0: java.nio.channels.spi.AbstractSelectableChannel;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.Object;
        $z0 = r1 instanceof sun.nio.ch.SelChImpl;
        if $z0 != 0 goto label0;

        $r6 = new java.nio.channels.IllegalSelectorException;
        specialinvoke $r6.<java.nio.channels.IllegalSelectorException: void <init>()>();
        throw $r6;

     label0:
        $r7 = new sun.nio.ch.SelectionKeyImpl;
        $r8 = (sun.nio.ch.SelChImpl) r1;
        specialinvoke $r7.<sun.nio.ch.SelectionKeyImpl: void <init>(sun.nio.ch.SelChImpl,sun.nio.ch.SelectorImpl)>($r8, r0);
        r3 = $r7;
        virtualinvoke r3.<sun.nio.ch.SelectionKeyImpl: java.lang.Object attach(java.lang.Object)>(r2);
        $r10 = r0.<sun.nio.ch.SelectorImpl: java.util.Set publicKeys>;
        r4 = $r10;
        entermonitor $r10;

     label1:
        virtualinvoke r0.<sun.nio.ch.SelectorImpl: void implRegister(sun.nio.ch.SelectionKeyImpl)>(r3);
        exitmonitor r4;

     label2:
        goto label6;

     label3:
        $r11 := @caughtexception;

     label4:
        r5 = $r11;
        exitmonitor r4;

     label5:
        throw r5;

     label6:
        virtualinvoke r3.<sun.nio.ch.SelectionKeyImpl: java.nio.channels.SelectionKey interestOps(int)>(i0);
        return r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected abstract void implRegister(sun.nio.ch.SelectionKeyImpl);

    void processDeregisterQueue() throws java.io.IOException
    {
        sun.nio.ch.SelectorImpl r0;
        java.util.Set r1, r2;
        java.util.Iterator r3;
        sun.nio.ch.SelectionKeyImpl r4;
        java.net.SocketException r5, $r11;
        java.io.IOException r6, $r12;
        java.lang.Throwable r7, r8, $r14, $r15;
        boolean $z0, $z1;
        java.lang.Object $r10;

        r0 := @this: sun.nio.ch.SelectorImpl;
        r1 = virtualinvoke r0.<sun.nio.ch.SelectorImpl: java.util.Set cancelledKeys()>();
        r2 = r1;
        entermonitor r1;

     label0:
        $z0 = interfaceinvoke r1.<java.util.Set: boolean isEmpty()>();
        if $z0 != 0 goto label9;

        r3 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label9;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (sun.nio.ch.SelectionKeyImpl) $r10;

     label2:
        virtualinvoke r0.<sun.nio.ch.SelectorImpl: void implDereg(sun.nio.ch.SelectionKeyImpl)>(r4);

     label3:
        interfaceinvoke r3.<java.util.Iterator: void remove()>();
        goto label8;

     label4:
        $r11 := @caughtexception;

     label5:
        r5 = $r11;
        $r12 = new java.io.IOException;
        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("Error deregistering key");
        r6 = $r12;
        virtualinvoke r6.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(r5);
        throw r6;

     label6:
        $r14 := @caughtexception;
        r7 = $r14;

     label7:
        interfaceinvoke r3.<java.util.Iterator: void remove()>();
        throw r7;

     label8:
        goto label1;

     label9:
        exitmonitor r2;

     label10:
        goto label14;

     label11:
        $r15 := @caughtexception;

     label12:
        r8 = $r15;
        exitmonitor r2;

     label13:
        throw r8;

     label14:
        return;

        catch java.net.SocketException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
        catch java.lang.Throwable from label0 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    protected abstract void implDereg(sun.nio.ch.SelectionKeyImpl) throws java.io.IOException;

    public abstract java.nio.channels.Selector wakeup();
}
