public final class java.lang.Double extends java.lang.Number implements java.lang.Comparable
{
    public static final double POSITIVE_INFINITY;
    public static final double NEGATIVE_INFINITY;
    public static final double NaN;
    public static final double MAX_VALUE;
    public static final double MIN_NORMAL;
    public static final double MIN_VALUE;
    public static final int MAX_EXPONENT;
    public static final int MIN_EXPONENT;
    public static final int SIZE;
    public static final java.lang.Class TYPE;
    private final double value;
    private static final long serialVersionUID;

    public static java.lang.String toString(double)
    {
        double d0;
        sun.misc.FloatingDecimal $r0;
        java.lang.String $r1;

        d0 := @parameter0: double;
        $r0 = new sun.misc.FloatingDecimal;
        specialinvoke $r0.<sun.misc.FloatingDecimal: void <init>(double)>(d0);
        $r1 = virtualinvoke $r0.<sun.misc.FloatingDecimal: java.lang.String toJavaFormatString()>();
        return $r1;
    }

    public static java.lang.String toHexString(double)
    {
        double d0, $d1, d2;
        java.lang.StringBuffer r0, $r3;
        boolean z0, $z1, $z2, $z3;
        long l0, $l4, $l5;
        java.lang.String r1, $r2, $r8, $r10, $r12, $r18, $r20;
        byte $b1, $b2, $b3;
        java.lang.StringBuilder $r15, $r16, $r17;
        int $i6;

        d0 := @parameter0: double;
        $z1 = staticinvoke <sun.misc.FpUtils: boolean isFinite(double)>(d0);
        if $z1 != 0 goto label0;

        $r2 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);
        return $r2;

     label0:
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>(24);
        r0 = $r3;
        $d1 = staticinvoke <sun.misc.FpUtils: double rawCopySign(double,double)>(1.0, d0);
        $b1 = $d1 cmpl -1.0;
        if $b1 != 0 goto label1;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

     label1:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0x");
        d2 = staticinvoke <java.lang.Math: double abs(double)>(d0);
        $b2 = d2 cmpl 0.0;
        if $b2 != 0 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0.0p0");
        goto label11;

     label2:
        $b3 = d2 cmpg 2.2250738585072014E-308;
        if $b3 >= 0 goto label3;

        $z2 = 1;
        goto label4;

     label3:
        $z2 = 0;

     label4:
        z0 = $z2;
        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d2);
        $l5 = $l4 & 4503599627370495L;
        l0 = $l5 | 1152921504606846976L;
        if z0 == 0 goto label5;

        $r8 = "0.";
        goto label6;

     label5:
        $r8 = "1.";

     label6:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);
        $r10 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l0);
        r1 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int,int)>(3, 16);
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("0000000000000");
        if $z3 == 0 goto label7;

        $r12 = "0";
        goto label8;

     label7:
        $r12 = virtualinvoke r1.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("0{1,12}$", "");

     label8:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);
        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("p");
        if z0 == 0 goto label9;

        $i6 = -1022;
        goto label10;

     label9:
        $i6 = staticinvoke <sun.misc.FpUtils: int getExponent(double)>(d2);

     label10:
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

     label11:
        $r20 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r20;
    }

    public static java.lang.Double valueOf(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        java.lang.Double $r1;
        sun.misc.FloatingDecimal $r2;
        double $d0;

        r0 := @parameter0: java.lang.String;
        $r1 = new java.lang.Double;
        $r2 = staticinvoke <sun.misc.FloatingDecimal: sun.misc.FloatingDecimal readJavaFormatString(java.lang.String)>(r0);
        $d0 = virtualinvoke $r2.<sun.misc.FloatingDecimal: double doubleValue()>();
        specialinvoke $r1.<java.lang.Double: void <init>(double)>($d0);
        return $r1;
    }

    public static java.lang.Double valueOf(double)
    {
        double d0;
        java.lang.Double $r0;

        d0 := @parameter0: double;
        $r0 = new java.lang.Double;
        specialinvoke $r0.<java.lang.Double: void <init>(double)>(d0);
        return $r0;
    }

    public static double parseDouble(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        sun.misc.FloatingDecimal $r1;
        double $d0;

        r0 := @parameter0: java.lang.String;
        $r1 = staticinvoke <sun.misc.FloatingDecimal: sun.misc.FloatingDecimal readJavaFormatString(java.lang.String)>(r0);
        $d0 = virtualinvoke $r1.<sun.misc.FloatingDecimal: double doubleValue()>();
        return $d0;
    }

    public static boolean isNaN(double)
    {
        double d0;
        byte $b0;
        boolean $z0;

        d0 := @parameter0: double;
        $b0 = d0 cmpl d0;
        if $b0 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public static boolean isInfinite(double)
    {
        double d0;
        byte $b0, $b1;
        boolean $z0;

        d0 := @parameter0: double;
        $b0 = d0 cmpl #Infinity;
        if $b0 == 0 goto label0;

        $b1 = d0 cmpl #-Infinity;
        if $b1 != 0 goto label1;

     label0:
        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void <init>(double)
    {
        java.lang.Double r0;
        double d0;

        r0 := @this: java.lang.Double;
        d0 := @parameter0: double;
        specialinvoke r0.<java.lang.Number: void <init>()>();
        r0.<java.lang.Double: double value> = d0;
        return;
    }

    public void <init>(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.Double r0, $r2;
        java.lang.String r1;
        double $d0;

        r0 := @this: java.lang.Double;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(r1);
        $d0 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();
        specialinvoke r0.<java.lang.Double: void <init>(double)>($d0);
        return;
    }

    public boolean isNaN()
    {
        java.lang.Double r0;
        double $d0;
        boolean $z0;

        r0 := @this: java.lang.Double;
        $d0 = r0.<java.lang.Double: double value>;
        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);
        return $z0;
    }

    public boolean isInfinite()
    {
        java.lang.Double r0;
        double $d0;
        boolean $z0;

        r0 := @this: java.lang.Double;
        $d0 = r0.<java.lang.Double: double value>;
        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);
        return $z0;
    }

    public java.lang.String toString()
    {
        java.lang.Double r0;
        double $d0;
        java.lang.String $r1;

        r0 := @this: java.lang.Double;
        $d0 = r0.<java.lang.Double: double value>;
        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);
        return $r1;
    }

    public byte byteValue()
    {
        java.lang.Double r0;
        double $d0;
        int $i0;
        byte $b1;

        r0 := @this: java.lang.Double;
        $d0 = r0.<java.lang.Double: double value>;
        $i0 = (int) $d0;
        $b1 = (byte) $i0;
        return $b1;
    }

    public short shortValue()
    {
        java.lang.Double r0;
        double $d0;
        int $i0;
        short $s1;

        r0 := @this: java.lang.Double;
        $d0 = r0.<java.lang.Double: double value>;
        $i0 = (int) $d0;
        $s1 = (short) $i0;
        return $s1;
    }

    public int intValue()
    {
        java.lang.Double r0;
        double $d0;
        int $i0;

        r0 := @this: java.lang.Double;
        $d0 = r0.<java.lang.Double: double value>;
        $i0 = (int) $d0;
        return $i0;
    }

    public long longValue()
    {
        java.lang.Double r0;
        double $d0;
        long $l0;

        r0 := @this: java.lang.Double;
        $d0 = r0.<java.lang.Double: double value>;
        $l0 = (long) $d0;
        return $l0;
    }

    public float floatValue()
    {
        java.lang.Double r0;
        double $d0;
        float $f0;

        r0 := @this: java.lang.Double;
        $d0 = r0.<java.lang.Double: double value>;
        $f0 = (float) $d0;
        return $f0;
    }

    public double doubleValue()
    {
        java.lang.Double r0;
        double $d0;

        r0 := @this: java.lang.Double;
        $d0 = r0.<java.lang.Double: double value>;
        return $d0;
    }

    public int hashCode()
    {
        java.lang.Double r0;
        long l0, $l1, $l2;
        double $d0;
        int $i3;

        r0 := @this: java.lang.Double;
        $d0 = r0.<java.lang.Double: double value>;
        l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);
        $l1 = l0 >>> 32;
        $l2 = l0 ^ $l1;
        $i3 = (int) $l2;
        return $i3;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Double r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        double $d0, $d1;
        long $l0, $l1;
        byte $b2;

        r0 := @this: java.lang.Double;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.lang.Double;
        if $z0 == 0 goto label0;

        $r2 = (java.lang.Double) r1;
        $d0 = $r2.<java.lang.Double: double value>;
        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);
        $d1 = r0.<java.lang.Double: double value>;
        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);
        $b2 = $l0 cmp $l1;
        if $b2 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    public static long doubleToLongBits(double)
    {
        double d0;
        long l0, $l1, $l3;
        byte $b2, $b4;

        d0 := @parameter0: double;
        l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);
        $l1 = l0 & 9218868437227405312L;
        $b2 = $l1 cmp 9218868437227405312L;
        if $b2 != 0 goto label0;

        $l3 = l0 & 4503599627370495L;
        $b4 = $l3 cmp 0L;
        if $b4 == 0 goto label0;

        l0 = 9221120237041090560L;

     label0:
        return l0;
    }

    public static native long doubleToRawLongBits(double);

    public static native double longBitsToDouble(long);

    public int compareTo(java.lang.Double)
    {
        java.lang.Double r0, r1;
        double $d0, $d1;
        int $i0;

        r0 := @this: java.lang.Double;
        r1 := @parameter0: java.lang.Double;
        $d0 = r0.<java.lang.Double: double value>;
        $d1 = r1.<java.lang.Double: double value>;
        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);
        return $i0;
    }

    public static int compare(double, double)
    {
        double d0, d1;
        long l0, l1;
        byte $b2, $b3, $b4, $b5, $b6;

        d0 := @parameter0: double;
        d1 := @parameter1: double;
        $b2 = d0 cmpg d1;
        if $b2 >= 0 goto label0;

        return -1;

     label0:
        $b3 = d0 cmpl d1;
        if $b3 <= 0 goto label1;

        return 1;

     label1:
        l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);
        l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d1);
        $b4 = l0 cmp l1;
        if $b4 != 0 goto label2;

        $b5 = 0;
        goto label4;

     label2:
        $b6 = l0 cmp l1;
        if $b6 >= 0 goto label3;

        $b5 = -1;
        goto label4;

     label3:
        $b5 = 1;

     label4:
        return $b5;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Double r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.lang.Double;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.lang.Double) r1;
        $i0 = virtualinvoke r0.<java.lang.Double: int compareTo(java.lang.Double)>($r2);
        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;

        $r0 = staticinvoke <java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>("double");
        <java.lang.Double: java.lang.Class TYPE> = $r0;
        return;
    }
}
