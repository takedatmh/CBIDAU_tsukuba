public final class java.nio.file.Files extends java.lang.Object
{
    private static final int BUFFER_SIZE;
    private static final int MAX_BUFFER_SIZE;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        java.nio.file.Files r0;

        r0 := @this: java.nio.file.Files;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    private static java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)
    {
        java.nio.file.Path r0;
        java.nio.file.FileSystem $r1;
        java.nio.file.spi.FileSystemProvider $r2;

        r0 := @parameter0: java.nio.file.Path;
        $r1 = interfaceinvoke r0.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>();
        $r2 = virtualinvoke $r1.<java.nio.file.FileSystem: java.nio.file.spi.FileSystemProvider provider()>();
        return $r2;
    }

    public static transient java.io.InputStream newInputStream(java.nio.file.Path, java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.OpenOption[] r1;
        java.nio.file.spi.FileSystemProvider $r2;
        java.io.InputStream $r3;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.OpenOption[];
        $r2 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        $r3 = virtualinvoke $r2.<java.nio.file.spi.FileSystemProvider: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(r0, r1);
        return $r3;
    }

    public static transient java.io.OutputStream newOutputStream(java.nio.file.Path, java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.OpenOption[] r1;
        java.nio.file.spi.FileSystemProvider $r2;
        java.io.OutputStream $r3;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.OpenOption[];
        $r2 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        $r3 = virtualinvoke $r2.<java.nio.file.spi.FileSystemProvider: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(r0, r1);
        return $r3;
    }

    public static transient java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path, java.util.Set, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.util.Set r1;
        java.nio.file.attribute.FileAttribute[] r2;
        java.nio.file.spi.FileSystemProvider $r3;
        java.nio.channels.SeekableByteChannel $r4;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.util.Set;
        r2 := @parameter2: java.nio.file.attribute.FileAttribute[];
        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        $r4 = virtualinvoke $r3.<java.nio.file.spi.FileSystemProvider: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>(r0, r1, r2);
        return $r4;
    }

    public static transient java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path, java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.OpenOption[] r1;
        java.util.HashSet $r2, r3;
        int $i0;
        java.nio.file.attribute.FileAttribute[] $r4;
        java.nio.channels.SeekableByteChannel $r5;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.OpenOption[];
        $r2 = new java.util.HashSet;
        $i0 = lengthof r1;
        specialinvoke $r2.<java.util.HashSet: void <init>(int)>($i0);
        r3 = $r2;
        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r3, r1);
        $r4 = newarray (java.nio.file.attribute.FileAttribute)[0];
        $r5 = staticinvoke <java.nio.file.Files: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>(r0, r3, $r4);
        return $r5;
    }

    public static java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.Files$AcceptAllFilter $r1;
        java.nio.file.spi.FileSystemProvider $r2;
        java.nio.file.DirectoryStream $r3;

        r0 := @parameter0: java.nio.file.Path;
        $r2 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        $r1 = <java.nio.file.Files$AcceptAllFilter: java.nio.file.Files$AcceptAllFilter FILTER>;
        $r3 = virtualinvoke $r2.<java.nio.file.spi.FileSystemProvider: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream$Filter)>(r0, $r1);
        return $r3;
    }

    public static java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path, java.lang.String) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.lang.String r1, $r9;
        java.nio.file.FileSystem r2;
        java.nio.file.PathMatcher r3;
        java.nio.file.Files$1 r4, $r10;
        boolean $z0;
        java.nio.file.DirectoryStream $r5, $r12;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.nio.file.spi.FileSystemProvider $r11;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.lang.String;
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("*");
        if $z0 == 0 goto label0;

        $r5 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path)>(r0);
        return $r5;

     label0:
        r2 = interfaceinvoke r0.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>();
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("glob:");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        r3 = virtualinvoke r2.<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>($r9);
        $r10 = new java.nio.file.Files$1;
        specialinvoke $r10.<java.nio.file.Files$1: void <init>(java.nio.file.PathMatcher)>(r3);
        r4 = $r10;
        $r11 = virtualinvoke r2.<java.nio.file.FileSystem: java.nio.file.spi.FileSystemProvider provider()>();
        $r12 = virtualinvoke $r11.<java.nio.file.spi.FileSystemProvider: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream$Filter)>(r0, r4);
        return $r12;
    }

    public static java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path, java.nio.file.DirectoryStream$Filter) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.DirectoryStream$Filter r1;
        java.nio.file.spi.FileSystemProvider $r2;
        java.nio.file.DirectoryStream $r3;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.DirectoryStream$Filter;
        $r2 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        $r3 = virtualinvoke $r2.<java.nio.file.spi.FileSystemProvider: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream$Filter)>(r0, r1);
        return $r3;
    }

    public static transient java.nio.file.Path createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.attribute.FileAttribute[] r1;
        java.nio.file.StandardOpenOption $r2, $r3;
        java.util.EnumSet r4;
        java.nio.channels.SeekableByteChannel $r5;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.attribute.FileAttribute[];
        $r2 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption CREATE_NEW>;
        $r3 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption WRITE>;
        r4 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>($r2, $r3);
        $r5 = staticinvoke <java.nio.file.Files: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>(r0, r4, r1);
        interfaceinvoke $r5.<java.nio.channels.SeekableByteChannel: void close()>();
        return r0;
    }

    public static transient java.nio.file.Path createDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.attribute.FileAttribute[] r1;
        java.nio.file.spi.FileSystemProvider $r2;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.attribute.FileAttribute[];
        $r2 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        virtualinvoke $r2.<java.nio.file.spi.FileSystemProvider: void createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(r0, r1);
        return r0;
    }

    public static transient java.nio.file.Path createDirectories(java.nio.file.Path, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.nio.file.Path r0, r6, r13, r18, $r19;
        java.nio.file.attribute.FileAttribute[] r1;
        java.nio.file.FileAlreadyExistsException r2, $r8;
        java.lang.SecurityException r3, r11, $r12;
        java.nio.file.NoSuchFileException r4, $r16;
        java.util.Iterator r5;
        java.io.IOException $r9, r10, $r17;
        java.nio.file.spi.FileSystemProvider $r14;
        java.nio.file.AccessMode[] $r15;
        boolean $z0;
        java.lang.Object $r20;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.attribute.FileAttribute[];

     label0:
        staticinvoke <java.nio.file.Files: void createAndCheckIsDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(r0, r1);

     label1:
        return r0;

     label2:
        $r8 := @caughtexception;
        r2 = $r8;
        throw r2;

     label3:
        $r9 := @caughtexception;
        r10 = $r9;
        r11 = null;

     label4:
        r0 = interfaceinvoke r0.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

     label5:
        goto label7;

     label6:
        $r12 := @caughtexception;
        r3 = $r12;
        r11 = r3;

     label7:
        r13 = interfaceinvoke r0.<java.nio.file.Path: java.nio.file.Path getParent()>();

     label8:
        if r13 == null goto label12;

     label9:
        $r14 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r13);
        $r15 = newarray (java.nio.file.AccessMode)[0];
        virtualinvoke $r14.<java.nio.file.spi.FileSystemProvider: void checkAccess(java.nio.file.Path,java.nio.file.AccessMode[])>(r13, $r15);

     label10:
        goto label12;

     label11:
        $r16 := @caughtexception;
        r4 = $r16;
        r13 = interfaceinvoke r13.<java.nio.file.Path: java.nio.file.Path getParent()>();
        goto label8;

     label12:
        if r13 != null goto label14;

        if r11 == null goto label13;

        throw r11;

     label13:
        $r17 = new java.io.IOException;
        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>("Root directory does not exist");
        throw $r17;

     label14:
        r18 = r13;
        $r19 = interfaceinvoke r13.<java.nio.file.Path: java.nio.file.Path relativize(java.nio.file.Path)>(r0);
        r5 = interfaceinvoke $r19.<java.nio.file.Path: java.util.Iterator iterator()>();

     label15:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label16;

        $r20 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        r6 = (java.nio.file.Path) $r20;
        r18 = interfaceinvoke r18.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(r6);
        staticinvoke <java.nio.file.Files: void createAndCheckIsDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(r18, r1);
        goto label15;

     label16:
        return r0;

        catch java.nio.file.FileAlreadyExistsException from label0 to label1 with label2;
        catch java.io.IOException from label0 to label1 with label3;
        catch java.lang.SecurityException from label4 to label5 with label6;
        catch java.nio.file.NoSuchFileException from label9 to label10 with label11;
    }

    private static transient void createAndCheckIsDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.attribute.FileAttribute[] r1;
        java.nio.file.FileAlreadyExistsException r2, $r5;
        java.nio.file.LinkOption $r3;
        java.nio.file.LinkOption[] $r6;
        boolean $z0;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.attribute.FileAttribute[];

     label0:
        staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(r0, r1);

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r2 = $r5;
        $r6 = newarray (java.nio.file.LinkOption)[1];
        $r3 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;
        $r6[0] = $r3;
        $z0 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(r0, $r6);
        if $z0 != 0 goto label3;

        throw r2;

     label3:
        return;

        catch java.nio.file.FileAlreadyExistsException from label0 to label1 with label2;
    }

    public static transient java.nio.file.Path createTempFile(java.nio.file.Path, java.lang.String, java.lang.String, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.nio.file.Path r0, $r5, $r6;
        java.lang.String r1, r2;
        java.nio.file.attribute.FileAttribute[] r3;
        java.lang.Object $r4;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        r3 := @parameter3: java.nio.file.attribute.FileAttribute[];
        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);
        $r5 = (java.nio.file.Path) $r4;
        $r6 = staticinvoke <java.nio.file.TempFileHelper: java.nio.file.Path createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>($r5, r1, r2, r3);
        return $r6;
    }

    public static transient java.nio.file.Path createTempFile(java.lang.String, java.lang.String, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.lang.String r0, r1;
        java.nio.file.attribute.FileAttribute[] r2;
        java.nio.file.Path $r3;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.nio.file.attribute.FileAttribute[];
        $r3 = staticinvoke <java.nio.file.TempFileHelper: java.nio.file.Path createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>(null, r0, r1, r2);
        return $r3;
    }

    public static transient java.nio.file.Path createTempDirectory(java.nio.file.Path, java.lang.String, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.nio.file.Path r0, $r4, $r5;
        java.lang.String r1;
        java.nio.file.attribute.FileAttribute[] r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.nio.file.attribute.FileAttribute[];
        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);
        $r4 = (java.nio.file.Path) $r3;
        $r5 = staticinvoke <java.nio.file.TempFileHelper: java.nio.file.Path createTempDirectory(java.nio.file.Path,java.lang.String,java.nio.file.attribute.FileAttribute[])>($r4, r1, r2);
        return $r5;
    }

    public static transient java.nio.file.Path createTempDirectory(java.lang.String, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.lang.String r0;
        java.nio.file.attribute.FileAttribute[] r1;
        java.nio.file.Path $r2;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.nio.file.attribute.FileAttribute[];
        $r2 = staticinvoke <java.nio.file.TempFileHelper: java.nio.file.Path createTempDirectory(java.nio.file.Path,java.lang.String,java.nio.file.attribute.FileAttribute[])>(null, r0, r1);
        return $r2;
    }

    public static transient java.nio.file.Path createSymbolicLink(java.nio.file.Path, java.nio.file.Path, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.nio.file.Path r0, r1;
        java.nio.file.attribute.FileAttribute[] r2;
        java.nio.file.spi.FileSystemProvider $r3;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.Path;
        r2 := @parameter2: java.nio.file.attribute.FileAttribute[];
        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        virtualinvoke $r3.<java.nio.file.spi.FileSystemProvider: void createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(r0, r1, r2);
        return r0;
    }

    public static java.nio.file.Path createLink(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path r0, r1;
        java.nio.file.spi.FileSystemProvider $r2;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.Path;
        $r2 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        virtualinvoke $r2.<java.nio.file.spi.FileSystemProvider: void createLink(java.nio.file.Path,java.nio.file.Path)>(r0, r1);
        return r0;
    }

    public static void delete(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.spi.FileSystemProvider $r1;

        r0 := @parameter0: java.nio.file.Path;
        $r1 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        virtualinvoke $r1.<java.nio.file.spi.FileSystemProvider: void delete(java.nio.file.Path)>(r0);
        return;
    }

    public static boolean deleteIfExists(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.spi.FileSystemProvider $r1;
        boolean $z0;

        r0 := @parameter0: java.nio.file.Path;
        $r1 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        $z0 = virtualinvoke $r1.<java.nio.file.spi.FileSystemProvider: boolean deleteIfExists(java.nio.file.Path)>(r0);
        return $z0;
    }

    public static transient java.nio.file.Path copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]) throws java.io.IOException
    {
        java.nio.file.Path r0, r1;
        java.nio.file.CopyOption[] r2;
        java.nio.file.spi.FileSystemProvider r3, $r4;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.Path;
        r2 := @parameter2: java.nio.file.CopyOption[];
        r3 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        $r4 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r1);
        if $r4 != r3 goto label0;

        virtualinvoke r3.<java.nio.file.spi.FileSystemProvider: void copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(r0, r1, r2);
        goto label1;

     label0:
        staticinvoke <java.nio.file.CopyMoveHelper: void copyToForeignTarget(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(r0, r1, r2);

     label1:
        return r1;
    }

    public static transient java.nio.file.Path move(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]) throws java.io.IOException
    {
        java.nio.file.Path r0, r1;
        java.nio.file.CopyOption[] r2;
        java.nio.file.spi.FileSystemProvider r3, $r4;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.Path;
        r2 := @parameter2: java.nio.file.CopyOption[];
        r3 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        $r4 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r1);
        if $r4 != r3 goto label0;

        virtualinvoke r3.<java.nio.file.spi.FileSystemProvider: void move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(r0, r1, r2);
        goto label1;

     label0:
        staticinvoke <java.nio.file.CopyMoveHelper: void moveToForeignTarget(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(r0, r1, r2);

     label1:
        return r1;
    }

    public static java.nio.file.Path readSymbolicLink(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path r0, $r2;
        java.nio.file.spi.FileSystemProvider $r1;

        r0 := @parameter0: java.nio.file.Path;
        $r1 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        $r2 = virtualinvoke $r1.<java.nio.file.spi.FileSystemProvider: java.nio.file.Path readSymbolicLink(java.nio.file.Path)>(r0);
        return $r2;
    }

    public static java.nio.file.FileStore getFileStore(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.spi.FileSystemProvider $r1;
        java.nio.file.FileStore $r2;

        r0 := @parameter0: java.nio.file.Path;
        $r1 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        $r2 = virtualinvoke $r1.<java.nio.file.spi.FileSystemProvider: java.nio.file.FileStore getFileStore(java.nio.file.Path)>(r0);
        return $r2;
    }

    public static boolean isSameFile(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path r0, r1;
        java.nio.file.spi.FileSystemProvider $r2;
        boolean $z0;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.Path;
        $r2 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        $z0 = virtualinvoke $r2.<java.nio.file.spi.FileSystemProvider: boolean isSameFile(java.nio.file.Path,java.nio.file.Path)>(r0, r1);
        return $z0;
    }

    public static boolean isHidden(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.spi.FileSystemProvider $r1;
        boolean $z0;

        r0 := @parameter0: java.nio.file.Path;
        $r1 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        $z0 = virtualinvoke $r1.<java.nio.file.spi.FileSystemProvider: boolean isHidden(java.nio.file.Path)>(r0);
        return $z0;
    }

    public static java.lang.String probeContentType(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.util.List $r1;
        java.util.Iterator r2;
        java.nio.file.spi.FileTypeDetector r3, $r6;
        java.lang.String r4, $r7;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @parameter0: java.nio.file.Path;
        $r1 = <java.nio.file.Files$FileTypeDetectors: java.util.List installeDetectors>;
        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (java.nio.file.spi.FileTypeDetector) $r5;
        r4 = virtualinvoke r3.<java.nio.file.spi.FileTypeDetector: java.lang.String probeContentType(java.nio.file.Path)>(r0);
        if r4 == null goto label1;

        return r4;

     label1:
        goto label0;

     label2:
        $r6 = <java.nio.file.Files$FileTypeDetectors: java.nio.file.spi.FileTypeDetector defaultFileTypeDetector>;
        $r7 = virtualinvoke $r6.<java.nio.file.spi.FileTypeDetector: java.lang.String probeContentType(java.nio.file.Path)>(r0);
        return $r7;
    }

    public static transient java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path, java.lang.Class, java.nio.file.LinkOption[])
    {
        java.nio.file.Path r0;
        java.lang.Class r1;
        java.nio.file.LinkOption[] r2;
        java.nio.file.spi.FileSystemProvider $r3;
        java.nio.file.attribute.FileAttributeView $r4;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.lang.Class;
        r2 := @parameter2: java.nio.file.LinkOption[];
        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        $r4 = virtualinvoke $r3.<java.nio.file.spi.FileSystemProvider: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r0, r1, r2);
        return $r4;
    }

    public static transient java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path, java.lang.Class, java.nio.file.LinkOption[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.lang.Class r1;
        java.nio.file.LinkOption[] r2;
        java.nio.file.spi.FileSystemProvider $r3;
        java.nio.file.attribute.BasicFileAttributes $r4;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.lang.Class;
        r2 := @parameter2: java.nio.file.LinkOption[];
        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        $r4 = virtualinvoke $r3.<java.nio.file.spi.FileSystemProvider: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r0, r1, r2);
        return $r4;
    }

    public static transient java.nio.file.Path setAttribute(java.nio.file.Path, java.lang.String, java.lang.Object, java.nio.file.LinkOption[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.nio.file.LinkOption[] r3;
        java.nio.file.spi.FileSystemProvider $r4;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.Object;
        r3 := @parameter3: java.nio.file.LinkOption[];
        $r4 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        virtualinvoke $r4.<java.nio.file.spi.FileSystemProvider: void setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption[])>(r0, r1, r2, r3);
        return r0;
    }

    public static transient java.lang.Object getAttribute(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.lang.String r1, r4, $r7;
        java.nio.file.LinkOption[] r2;
        java.util.Map r3;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r5;
        boolean $z0;
        java.lang.AssertionError $r6;
        java.lang.Object $r8;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.nio.file.LinkOption[];
        $i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(42);
        if $i1 >= 0 goto label0;

        $i2 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(44);
        if $i2 < 0 goto label1;

     label0:
        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);
        throw $r5;

     label1:
        r3 = staticinvoke <java.nio.file.Files: java.util.Map readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[])>(r0, r1, r2);
        $z0 = <java.nio.file.Files: boolean $assertionsDisabled>;
        if $z0 != 0 goto label2;

        $i3 = interfaceinvoke r3.<java.util.Map: int size()>();
        if $i3 == 1 goto label2;

        $r6 = new java.lang.AssertionError;
        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();
        throw $r6;

     label2:
        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58);
        if i0 != -1 goto label3;

        r4 = r1;
        goto label6;

     label3:
        $i4 = virtualinvoke r1.<java.lang.String: int length()>();
        if i0 != $i4 goto label4;

        $r7 = "";
        goto label5;

     label4:
        $i5 = i0 + 1;
        $r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i5);

     label5:
        r4 = $r7;

     label6:
        $r8 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);
        return $r8;
    }

    public static transient java.util.Map readAttributes(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.lang.String r1;
        java.nio.file.LinkOption[] r2;
        java.nio.file.spi.FileSystemProvider $r3;
        java.util.Map $r4;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.nio.file.LinkOption[];
        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        $r4 = virtualinvoke $r3.<java.nio.file.spi.FileSystemProvider: java.util.Map readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[])>(r0, r1, r2);
        return $r4;
    }

    public static transient java.util.Set getPosixFilePermissions(java.nio.file.Path, java.nio.file.LinkOption[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.LinkOption[] r1;
        java.nio.file.attribute.BasicFileAttributes $r2;
        java.nio.file.attribute.PosixFileAttributes $r3;
        java.util.Set $r4;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.LinkOption[];
        $r2 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r0, class "java/nio/file/attribute/PosixFileAttributes", r1);
        $r3 = (java.nio.file.attribute.PosixFileAttributes) $r2;
        $r4 = interfaceinvoke $r3.<java.nio.file.attribute.PosixFileAttributes: java.util.Set permissions()>();
        return $r4;
    }

    public static java.nio.file.Path setPosixFilePermissions(java.nio.file.Path, java.util.Set) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.util.Set r1;
        java.nio.file.attribute.PosixFileAttributeView r2;
        java.nio.file.LinkOption[] $r3;
        java.nio.file.attribute.FileAttributeView $r4;
        java.lang.UnsupportedOperationException $r5;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.util.Set;
        $r3 = newarray (java.nio.file.LinkOption)[0];
        $r4 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r0, class "java/nio/file/attribute/PosixFileAttributeView", $r3);
        r2 = (java.nio.file.attribute.PosixFileAttributeView) $r4;
        if r2 != null goto label0;

        $r5 = new java.lang.UnsupportedOperationException;
        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r5;

     label0:
        interfaceinvoke r2.<java.nio.file.attribute.PosixFileAttributeView: void setPermissions(java.util.Set)>(r1);
        return r0;
    }

    public static transient java.nio.file.attribute.UserPrincipal getOwner(java.nio.file.Path, java.nio.file.LinkOption[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.LinkOption[] r1;
        java.nio.file.attribute.FileOwnerAttributeView r2;
        java.nio.file.attribute.FileAttributeView $r3;
        java.lang.UnsupportedOperationException $r4;
        java.nio.file.attribute.UserPrincipal $r5;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.LinkOption[];
        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r0, class "java/nio/file/attribute/FileOwnerAttributeView", r1);
        r2 = (java.nio.file.attribute.FileOwnerAttributeView) $r3;
        if r2 != null goto label0;

        $r4 = new java.lang.UnsupportedOperationException;
        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r4;

     label0:
        $r5 = interfaceinvoke r2.<java.nio.file.attribute.FileOwnerAttributeView: java.nio.file.attribute.UserPrincipal getOwner()>();
        return $r5;
    }

    public static java.nio.file.Path setOwner(java.nio.file.Path, java.nio.file.attribute.UserPrincipal) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.attribute.UserPrincipal r1;
        java.nio.file.attribute.FileOwnerAttributeView r2;
        java.nio.file.LinkOption[] $r3;
        java.nio.file.attribute.FileAttributeView $r4;
        java.lang.UnsupportedOperationException $r5;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.attribute.UserPrincipal;
        $r3 = newarray (java.nio.file.LinkOption)[0];
        $r4 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r0, class "java/nio/file/attribute/FileOwnerAttributeView", $r3);
        r2 = (java.nio.file.attribute.FileOwnerAttributeView) $r4;
        if r2 != null goto label0;

        $r5 = new java.lang.UnsupportedOperationException;
        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>()>();
        throw $r5;

     label0:
        interfaceinvoke r2.<java.nio.file.attribute.FileOwnerAttributeView: void setOwner(java.nio.file.attribute.UserPrincipal)>(r1);
        return r0;
    }

    public static boolean isSymbolicLink(java.nio.file.Path)
    {
        java.nio.file.Path r0;
        java.nio.file.LinkOption $r1;
        java.io.IOException r2, $r5;
        java.nio.file.LinkOption[] $r3;
        java.nio.file.attribute.BasicFileAttributes $r4;
        boolean $z0;

        r0 := @parameter0: java.nio.file.Path;

     label0:
        $r3 = newarray (java.nio.file.LinkOption)[1];
        $r1 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;
        $r3[0] = $r1;
        $r4 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r0, class "java/nio/file/attribute/BasicFileAttributes", $r3);
        $z0 = interfaceinvoke $r4.<java.nio.file.attribute.BasicFileAttributes: boolean isSymbolicLink()>();

     label1:
        return $z0;

     label2:
        $r5 := @caughtexception;
        r2 = $r5;
        return 0;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public static transient boolean isDirectory(java.nio.file.Path, java.nio.file.LinkOption[])
    {
        java.nio.file.Path r0;
        java.nio.file.LinkOption[] r1;
        java.io.IOException r2, $r4;
        java.nio.file.attribute.BasicFileAttributes $r3;
        boolean $z0;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.LinkOption[];

     label0:
        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r0, class "java/nio/file/attribute/BasicFileAttributes", r1);
        $z0 = interfaceinvoke $r3.<java.nio.file.attribute.BasicFileAttributes: boolean isDirectory()>();

     label1:
        return $z0;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        return 0;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public static transient boolean isRegularFile(java.nio.file.Path, java.nio.file.LinkOption[])
    {
        java.nio.file.Path r0;
        java.nio.file.LinkOption[] r1;
        java.io.IOException r2, $r4;
        java.nio.file.attribute.BasicFileAttributes $r3;
        boolean $z0;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.LinkOption[];

     label0:
        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r0, class "java/nio/file/attribute/BasicFileAttributes", r1);
        $z0 = interfaceinvoke $r3.<java.nio.file.attribute.BasicFileAttributes: boolean isRegularFile()>();

     label1:
        return $z0;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        return 0;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public static transient java.nio.file.attribute.FileTime getLastModifiedTime(java.nio.file.Path, java.nio.file.LinkOption[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.LinkOption[] r1;
        java.nio.file.attribute.BasicFileAttributes $r2;
        java.nio.file.attribute.FileTime $r3;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.LinkOption[];
        $r2 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r0, class "java/nio/file/attribute/BasicFileAttributes", r1);
        $r3 = interfaceinvoke $r2.<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime lastModifiedTime()>();
        return $r3;
    }

    public static java.nio.file.Path setLastModifiedTime(java.nio.file.Path, java.nio.file.attribute.FileTime) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.attribute.FileTime r1;
        java.nio.file.LinkOption[] $r2;
        java.nio.file.attribute.FileAttributeView $r3;
        java.nio.file.attribute.BasicFileAttributeView $r4;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.attribute.FileTime;
        $r2 = newarray (java.nio.file.LinkOption)[0];
        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r0, class "java/nio/file/attribute/BasicFileAttributeView", $r2);
        $r4 = (java.nio.file.attribute.BasicFileAttributeView) $r3;
        interfaceinvoke $r4.<java.nio.file.attribute.BasicFileAttributeView: void setTimes(java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime)>(r1, null, null);
        return r0;
    }

    public static long size(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.file.LinkOption[] $r1;
        java.nio.file.attribute.BasicFileAttributes $r2;
        long $l0;

        r0 := @parameter0: java.nio.file.Path;
        $r1 = newarray (java.nio.file.LinkOption)[0];
        $r2 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r0, class "java/nio/file/attribute/BasicFileAttributes", $r1);
        $l0 = interfaceinvoke $r2.<java.nio.file.attribute.BasicFileAttributes: long size()>();
        return $l0;
    }

    private static transient boolean followLinks(java.nio.file.LinkOption[])
    {
        java.nio.file.LinkOption[] r0, r1;
        boolean z0;
        int i0, i1;
        java.nio.file.LinkOption r2, $r3;
        java.lang.NullPointerException $r4;
        java.lang.AssertionError $r5;

        r0 := @parameter0: java.nio.file.LinkOption[];
        z0 = 1;
        r1 = r0;
        i0 = lengthof r1;
        i1 = 0;

     label0:
        if i1 >= i0 goto label4;

        r2 = r1[i1];
        $r3 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;
        if r2 != $r3 goto label1;

        z0 = 0;
        goto label3;

     label1:
        if r2 != null goto label2;

        $r4 = new java.lang.NullPointerException;
        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();
        throw $r4;

     label2:
        $r5 = new java.lang.AssertionError;
        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Should not get here");
        throw $r5;

     label3:
        i1 = i1 + 1;
        goto label0;

     label4:
        return z0;
    }

    public static transient boolean exists(java.nio.file.Path, java.nio.file.LinkOption[])
    {
        java.nio.file.Path r0;
        java.nio.file.LinkOption[] r1, $r6;
        java.nio.file.LinkOption $r2;
        java.io.IOException r3, $r8;
        boolean $z0, $z1;
        java.nio.file.spi.FileSystemProvider $r4;
        java.nio.file.AccessMode[] $r5;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.LinkOption[];

     label0:
        $z0 = staticinvoke <java.nio.file.Files: boolean followLinks(java.nio.file.LinkOption[])>(r1);
        if $z0 == 0 goto label1;

        $r4 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        $r5 = newarray (java.nio.file.AccessMode)[0];
        virtualinvoke $r4.<java.nio.file.spi.FileSystemProvider: void checkAccess(java.nio.file.Path,java.nio.file.AccessMode[])>(r0, $r5);
        goto label2;

     label1:
        $r6 = newarray (java.nio.file.LinkOption)[1];
        $r2 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;
        $r6[0] = $r2;
        staticinvoke <java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r0, class "java/nio/file/attribute/BasicFileAttributes", $r6);

     label2:
        $z1 = 1;

     label3:
        return $z1;

     label4:
        $r8 := @caughtexception;
        r3 = $r8;
        return 0;

        catch java.io.IOException from label0 to label3 with label4;
    }

    public static transient boolean notExists(java.nio.file.Path, java.nio.file.LinkOption[])
    {
        java.nio.file.Path r0;
        java.nio.file.LinkOption[] r1, $r6;
        java.nio.file.LinkOption $r2;
        java.nio.file.NoSuchFileException r3, $r8;
        boolean $z0, $z1;
        java.nio.file.spi.FileSystemProvider $r4;
        java.nio.file.AccessMode[] $r5;
        java.io.IOException $r9, r10;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.LinkOption[];

     label0:
        $z0 = staticinvoke <java.nio.file.Files: boolean followLinks(java.nio.file.LinkOption[])>(r1);
        if $z0 == 0 goto label1;

        $r4 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        $r5 = newarray (java.nio.file.AccessMode)[0];
        virtualinvoke $r4.<java.nio.file.spi.FileSystemProvider: void checkAccess(java.nio.file.Path,java.nio.file.AccessMode[])>(r0, $r5);
        goto label2;

     label1:
        $r6 = newarray (java.nio.file.LinkOption)[1];
        $r2 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;
        $r6[0] = $r2;
        staticinvoke <java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(r0, class "java/nio/file/attribute/BasicFileAttributes", $r6);

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r8 := @caughtexception;
        r3 = $r8;
        return 1;

     label5:
        $r9 := @caughtexception;
        r10 = $r9;
        return 0;

        catch java.nio.file.NoSuchFileException from label0 to label3 with label4;
        catch java.io.IOException from label0 to label3 with label5;
    }

    private static transient boolean isAccessible(java.nio.file.Path, java.nio.file.AccessMode[])
    {
        java.nio.file.Path r0;
        java.nio.file.AccessMode[] r1;
        java.io.IOException r2, $r4;
        java.nio.file.spi.FileSystemProvider $r3;
        boolean $z0;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.AccessMode[];

     label0:
        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.spi.FileSystemProvider provider(java.nio.file.Path)>(r0);
        virtualinvoke $r3.<java.nio.file.spi.FileSystemProvider: void checkAccess(java.nio.file.Path,java.nio.file.AccessMode[])>(r0, r1);
        $z0 = 1;

     label1:
        return $z0;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        return 0;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public static boolean isReadable(java.nio.file.Path)
    {
        java.nio.file.Path r0;
        java.nio.file.AccessMode $r1;
        java.nio.file.AccessMode[] $r2;
        boolean $z0;

        r0 := @parameter0: java.nio.file.Path;
        $r2 = newarray (java.nio.file.AccessMode)[1];
        $r1 = <java.nio.file.AccessMode: java.nio.file.AccessMode READ>;
        $r2[0] = $r1;
        $z0 = staticinvoke <java.nio.file.Files: boolean isAccessible(java.nio.file.Path,java.nio.file.AccessMode[])>(r0, $r2);
        return $z0;
    }

    public static boolean isWritable(java.nio.file.Path)
    {
        java.nio.file.Path r0;
        java.nio.file.AccessMode $r1;
        java.nio.file.AccessMode[] $r2;
        boolean $z0;

        r0 := @parameter0: java.nio.file.Path;
        $r2 = newarray (java.nio.file.AccessMode)[1];
        $r1 = <java.nio.file.AccessMode: java.nio.file.AccessMode WRITE>;
        $r2[0] = $r1;
        $z0 = staticinvoke <java.nio.file.Files: boolean isAccessible(java.nio.file.Path,java.nio.file.AccessMode[])>(r0, $r2);
        return $z0;
    }

    public static boolean isExecutable(java.nio.file.Path)
    {
        java.nio.file.Path r0;
        java.nio.file.AccessMode $r1;
        java.nio.file.AccessMode[] $r2;
        boolean $z0;

        r0 := @parameter0: java.nio.file.Path;
        $r2 = newarray (java.nio.file.AccessMode)[1];
        $r1 = <java.nio.file.AccessMode: java.nio.file.AccessMode EXECUTE>;
        $r2[0] = $r1;
        $z0 = staticinvoke <java.nio.file.Files: boolean isAccessible(java.nio.file.Path,java.nio.file.AccessMode[])>(r0, $r2);
        return $z0;
    }

    public static java.nio.file.Path walkFileTree(java.nio.file.Path, java.util.Set, int, java.nio.file.FileVisitor) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.util.Set r1;
        int i0;
        java.nio.file.FileVisitor r2;
        java.lang.IllegalArgumentException $r3;
        java.nio.file.FileTreeWalker $r4;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.util.Set;
        i0 := @parameter2: int;
        r2 := @parameter3: java.nio.file.FileVisitor;
        if i0 >= 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'maxDepth\' is negative");
        throw $r3;

     label0:
        $r4 = new java.nio.file.FileTreeWalker;
        specialinvoke $r4.<java.nio.file.FileTreeWalker: void <init>(java.util.Set,java.nio.file.FileVisitor,int)>(r1, r2, i0);
        virtualinvoke $r4.<java.nio.file.FileTreeWalker: void walk(java.nio.file.Path)>(r0);
        return r0;
    }

    public static java.nio.file.Path walkFileTree(java.nio.file.Path, java.nio.file.FileVisitor) throws java.io.IOException
    {
        java.nio.file.Path r0, $r3;
        java.nio.file.FileVisitor r1;
        java.util.EnumSet $r2;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.file.FileVisitor;
        $r2 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(class "java/nio/file/FileVisitOption");
        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.util.Set,int,java.nio.file.FileVisitor)>(r0, $r2, 2147483647, r1);
        return $r3;
    }

    public static java.io.BufferedReader newBufferedReader(java.nio.file.Path, java.nio.charset.Charset) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.charset.Charset r1;
        java.nio.charset.CharsetDecoder r2;
        java.io.InputStreamReader r3, $r4;
        java.nio.file.OpenOption[] $r5;
        java.io.InputStream $r6;
        java.io.BufferedReader $r7;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.charset.Charset;
        r2 = virtualinvoke r1.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();
        $r4 = new java.io.InputStreamReader;
        $r5 = newarray (java.nio.file.OpenOption)[0];
        $r6 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(r0, $r5);
        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)>($r6, r2);
        r3 = $r4;
        $r7 = new java.io.BufferedReader;
        specialinvoke $r7.<java.io.BufferedReader: void <init>(java.io.Reader)>(r3);
        return $r7;
    }

    public static transient java.io.BufferedWriter newBufferedWriter(java.nio.file.Path, java.nio.charset.Charset, java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.charset.Charset r1;
        java.nio.file.OpenOption[] r2;
        java.nio.charset.CharsetEncoder r3;
        java.io.OutputStreamWriter r4, $r5;
        java.io.OutputStream $r6;
        java.io.BufferedWriter $r7;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.charset.Charset;
        r2 := @parameter2: java.nio.file.OpenOption[];
        r3 = virtualinvoke r1.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();
        $r5 = new java.io.OutputStreamWriter;
        $r6 = staticinvoke <java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(r0, r2);
        specialinvoke $r5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.CharsetEncoder)>($r6, r3);
        r4 = $r5;
        $r7 = new java.io.BufferedWriter;
        specialinvoke $r7.<java.io.BufferedWriter: void <init>(java.io.Writer)>(r4);
        return $r7;
    }

    private static long copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;
        long l0, $l3;
        byte[] r2;
        int i1, $i2;

        r0 := @parameter0: java.io.InputStream;
        r1 := @parameter1: java.io.OutputStream;
        l0 = 0L;
        r2 = newarray (byte)[8192];

     label0:
        $i2 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2);
        i1 = $i2;
        if $i2 <= 0 goto label1;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i1);
        $l3 = (long) i1;
        l0 = l0 + $l3;
        goto label0;

     label1:
        return l0;
    }

    public static transient long copy(java.io.InputStream, java.nio.file.Path, java.nio.file.CopyOption[]) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.nio.file.Path r1;
        java.nio.file.CopyOption[] r2, r3;
        boolean z0;
        int i0, i1;
        java.nio.file.CopyOption r4;
        java.nio.file.StandardOpenOption $r5, $r21;
        long l2;
        java.lang.Throwable r6, r7, r8, r26, $r27, $r28, r29, $r30, $r31;
        java.nio.file.StandardCopyOption $r10;
        java.lang.NullPointerException $r11;
        java.lang.UnsupportedOperationException $r12;
        java.lang.StringBuilder $r13, $r14, $r15;
        java.lang.String $r16;
        java.lang.SecurityException r17, $r18, r19;
        java.nio.file.OpenOption[] $r20;
        java.io.OutputStream r22, r25;
        java.nio.file.FileAlreadyExistsException $r23, r24;

        r0 := @parameter0: java.io.InputStream;
        r1 := @parameter1: java.nio.file.Path;
        r2 := @parameter2: java.nio.file.CopyOption[];
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);
        z0 = 0;
        r3 = r2;
        i0 = lengthof r3;
        i1 = 0;

     label0:
        if i1 >= i0 goto label4;

        r4 = r3[i1];
        $r10 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption REPLACE_EXISTING>;
        if r4 != $r10 goto label1;

        z0 = 1;
        goto label3;

     label1:
        if r4 != null goto label2;

        $r11 = new java.lang.NullPointerException;
        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("options contains \'null\'");
        throw $r11;

     label2:
        $r12 = new java.lang.UnsupportedOperationException;
        $r13 = new java.lang.StringBuilder;
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r12.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r16);
        throw $r12;

     label3:
        i1 = i1 + 1;
        goto label0;

     label4:
        r17 = null;
        if z0 == 0 goto label8;

     label5:
        staticinvoke <java.nio.file.Files: boolean deleteIfExists(java.nio.file.Path)>(r1);

     label6:
        goto label8;

     label7:
        $r18 := @caughtexception;
        r19 = $r18;
        r17 = r19;

     label8:
        $r20 = newarray (java.nio.file.OpenOption)[2];
        $r5 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption CREATE_NEW>;
        $r20[0] = $r5;
        $r21 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption WRITE>;
        $r20[1] = $r21;
        r22 = staticinvoke <java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(r1, $r20);

     label9:
        goto label12;

     label10:
        $r23 := @caughtexception;
        r24 = $r23;
        if r17 == null goto label11;

        throw r17;

     label11:
        throw r24;

     label12:
        r25 = r22;
        r26 = null;

     label13:
        l2 = staticinvoke <java.nio.file.Files: long copy(java.io.InputStream,java.io.OutputStream)>(r0, r25);

     label14:
        if r25 == null goto label19;

        if r26 == null goto label18;

     label15:
        virtualinvoke r25.<java.io.OutputStream: void close()>();

     label16:
        goto label19;

     label17:
        $r27 := @caughtexception;
        r6 = $r27;
        virtualinvoke r26.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r6);
        goto label19;

     label18:
        virtualinvoke r25.<java.io.OutputStream: void close()>();

     label19:
        return l2;

     label20:
        $r28 := @caughtexception;

     label21:
        r29 = $r28;
        r26 = r29;
        throw r29;

     label22:
        $r30 := @caughtexception;
        r7 = $r30;

     label23:
        if r25 == null goto label28;

        if r26 == null goto label27;

     label24:
        virtualinvoke r25.<java.io.OutputStream: void close()>();

     label25:
        goto label28;

     label26:
        $r31 := @caughtexception;
        r8 = $r31;
        virtualinvoke r26.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r8);
        goto label28;

     label27:
        virtualinvoke r25.<java.io.OutputStream: void close()>();

     label28:
        throw r7;

        catch java.lang.SecurityException from label5 to label6 with label7;
        catch java.nio.file.FileAlreadyExistsException from label8 to label9 with label10;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label13 to label14 with label22;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label21 to label23 with label22;
    }

    public static long copy(java.nio.file.Path, java.io.OutputStream) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.io.OutputStream r1;
        java.io.InputStream r2;
        java.lang.Throwable r3, r4, r5, r6, $r9, $r10, r11, $r12, $r13;
        long l0;
        java.nio.file.OpenOption[] $r8;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.io.OutputStream;
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);
        $r8 = newarray (java.nio.file.OpenOption)[0];
        r2 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(r0, $r8);
        r3 = null;

     label0:
        l0 = staticinvoke <java.nio.file.Files: long copy(java.io.InputStream,java.io.OutputStream)>(r2, r1);

     label1:
        if r2 == null goto label6;

        if r3 == null goto label5;

     label2:
        virtualinvoke r2.<java.io.InputStream: void close()>();

     label3:
        goto label6;

     label4:
        $r9 := @caughtexception;
        r4 = $r9;
        virtualinvoke r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r4);
        goto label6;

     label5:
        virtualinvoke r2.<java.io.InputStream: void close()>();

     label6:
        return l0;

     label7:
        $r10 := @caughtexception;

     label8:
        r11 = $r10;
        r3 = r11;
        throw r11;

     label9:
        $r12 := @caughtexception;
        r5 = $r12;

     label10:
        if r2 == null goto label15;

        if r3 == null goto label14;

     label11:
        virtualinvoke r2.<java.io.InputStream: void close()>();

     label12:
        goto label15;

     label13:
        $r13 := @caughtexception;
        r6 = $r13;
        virtualinvoke r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r6);
        goto label15;

     label14:
        virtualinvoke r2.<java.io.InputStream: void close()>();

     label15:
        throw r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label0 to label1 with label7;
        catch java.lang.Throwable from label0 to label1 with label9;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label8 to label10 with label9;
    }

    private static byte[] read(java.io.InputStream, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7, $i8, $i9, $i10;
        byte[] r1, $r3;
        java.lang.OutOfMemoryError $r2;
        byte $b11;

        r0 := @parameter0: java.io.InputStream;
        i0 := @parameter1: int;
        i1 = i0;
        r1 = newarray (byte)[i1];
        i2 = 0;

     label0:
        $i4 = i1 - i2;
        $i5 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i2, $i4);
        i3 = $i5;
        if $i5 <= 0 goto label1;

        i2 = i2 + i3;
        goto label0;

     label1:
        if i3 < 0 goto label6;

        $i6 = virtualinvoke r0.<java.io.InputStream: int read()>();
        i7 = $i6;
        if $i6 >= 0 goto label2;

        goto label6;

     label2:
        $i8 = 2147483639 - i1;
        if i1 > $i8 goto label3;

        $i9 = i1 << 1;
        i1 = staticinvoke <java.lang.Math: int max(int,int)>($i9, 8192);
        goto label5;

     label3:
        if i1 != 2147483639 goto label4;

        $r2 = new java.lang.OutOfMemoryError;
        specialinvoke $r2.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("Required array size too large");
        throw $r2;

     label4:
        i1 = 2147483639;

     label5:
        r1 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r1, i1);
        $i10 = i2;
        i2 = i2 + 1;
        $b11 = (byte) i7;
        r1[$i10] = $b11;
        goto label0;

     label6:
        if i1 != i2 goto label7;

        $r3 = r1;
        goto label8;

     label7:
        $r3 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r1, i2);

     label8:
        return $r3;
    }

    public static byte[] readAllBytes(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.channels.SeekableByteChannel r1;
        java.lang.Throwable r2, r4, r6, r7, r8, r9, r10, $r13, $r14, r15, $r16, r17, $r18, $r19, $r20, r21, $r22, $r23;
        java.io.InputStream r3;
        long l0;
        byte[] r5;
        java.nio.file.OpenOption[] $r11;
        byte $b1;
        java.lang.OutOfMemoryError $r12;
        int $i2;

        r0 := @parameter0: java.nio.file.Path;
        $r11 = newarray (java.nio.file.OpenOption)[0];
        r1 = staticinvoke <java.nio.file.Files: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.nio.file.OpenOption[])>(r0, $r11);
        r2 = null;

     label0:
        r3 = staticinvoke <java.nio.channels.Channels: java.io.InputStream newInputStream(java.nio.channels.ReadableByteChannel)>(r1);
        r4 = null;

     label1:
        l0 = interfaceinvoke r1.<java.nio.channels.SeekableByteChannel: long size()>();
        $b1 = l0 cmp 2147483639L;
        if $b1 <= 0 goto label2;

        $r12 = new java.lang.OutOfMemoryError;
        specialinvoke $r12.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("Required array size too large");
        throw $r12;

     label2:
        $i2 = (int) l0;
        r5 = staticinvoke <java.nio.file.Files: byte[] read(java.io.InputStream,int)>(r3, $i2);

     label3:
        if r3 == null goto label8;

        if r4 == null goto label7;

     label4:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label5:
        goto label8;

     label6:
        $r13 := @caughtexception;
        r6 = $r13;
        virtualinvoke r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r6);
        goto label8;

     label7:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label8:
        if r1 == null goto label13;

        if r2 == null goto label12;

     label9:
        interfaceinvoke r1.<java.nio.channels.SeekableByteChannel: void close()>();

     label10:
        goto label13;

     label11:
        $r14 := @caughtexception;
        r15 = $r14;
        virtualinvoke r2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r15);
        goto label13;

     label12:
        interfaceinvoke r1.<java.nio.channels.SeekableByteChannel: void close()>();

     label13:
        return r5;

     label14:
        $r16 := @caughtexception;

     label15:
        r17 = $r16;
        r4 = r17;
        throw r17;

     label16:
        $r18 := @caughtexception;
        r7 = $r18;

     label17:
        if r3 == null goto label22;

        if r4 == null goto label21;

     label18:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label19:
        goto label22;

     label20:
        $r19 := @caughtexception;
        r8 = $r19;
        virtualinvoke r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r8);
        goto label22;

     label21:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label22:
        throw r7;

     label23:
        $r20 := @caughtexception;
        r21 = $r20;
        r2 = r21;
        throw r21;

     label24:
        $r22 := @caughtexception;
        r9 = $r22;

     label25:
        if r1 == null goto label30;

        if r2 == null goto label29;

     label26:
        interfaceinvoke r1.<java.nio.channels.SeekableByteChannel: void close()>();

     label27:
        goto label30;

     label28:
        $r23 := @caughtexception;
        r10 = $r23;
        virtualinvoke r2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r10);
        goto label30;

     label29:
        interfaceinvoke r1.<java.nio.channels.SeekableByteChannel: void close()>();

     label30:
        throw r9;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label9 to label10 with label11;
        catch java.lang.Throwable from label1 to label3 with label14;
        catch java.lang.Throwable from label1 to label3 with label16;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label15 to label17 with label16;
        catch java.lang.Throwable from label0 to label8 with label23;
        catch java.lang.Throwable from label15 to label23 with label23;
        catch java.lang.Throwable from label0 to label8 with label24;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label15 to label25 with label24;
    }

    public static java.util.List readAllLines(java.nio.file.Path, java.nio.charset.Charset) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.charset.Charset r1;
        java.io.BufferedReader r2;
        java.lang.Throwable r3, r6, r7, r8, $r11, $r12, r13, $r14, $r15;
        java.util.ArrayList r4, $r9, r10;
        java.lang.String r5;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.nio.charset.Charset;
        r2 = staticinvoke <java.nio.file.Files: java.io.BufferedReader newBufferedReader(java.nio.file.Path,java.nio.charset.Charset)>(r0, r1);
        r3 = null;

     label0:
        $r9 = new java.util.ArrayList;
        specialinvoke $r9.<java.util.ArrayList: void <init>()>();
        r4 = $r9;

     label1:
        r5 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>();
        if r5 != null goto label2;

        goto label3;

     label2:
        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r5);
        goto label1;

     label3:
        r10 = r4;

     label4:
        if r2 == null goto label9;

        if r3 == null goto label8;

     label5:
        virtualinvoke r2.<java.io.BufferedReader: void close()>();

     label6:
        goto label9;

     label7:
        $r11 := @caughtexception;
        r6 = $r11;
        virtualinvoke r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r6);
        goto label9;

     label8:
        virtualinvoke r2.<java.io.BufferedReader: void close()>();

     label9:
        return r10;

     label10:
        $r12 := @caughtexception;

     label11:
        r13 = $r12;
        r3 = r13;
        throw r13;

     label12:
        $r14 := @caughtexception;
        r7 = $r14;

     label13:
        if r2 == null goto label18;

        if r3 == null goto label17;

     label14:
        virtualinvoke r2.<java.io.BufferedReader: void close()>();

     label15:
        goto label18;

     label16:
        $r15 := @caughtexception;
        r8 = $r15;
        virtualinvoke r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r8);
        goto label18;

     label17:
        virtualinvoke r2.<java.io.BufferedReader: void close()>();

     label18:
        throw r7;

        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label0 to label4 with label10;
        catch java.lang.Throwable from label0 to label4 with label12;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label11 to label13 with label12;
    }

    public static transient java.nio.file.Path write(java.nio.file.Path, byte[], java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        byte[] r1;
        java.nio.file.OpenOption[] r2;
        java.io.OutputStream r3;
        java.lang.Throwable r4, r5, r6, $r8, r9, $r10, r11, $r12, $r13;
        int i0, i1, i2, $i3;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: byte[];
        r2 := @parameter2: java.nio.file.OpenOption[];
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);
        r3 = staticinvoke <java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(r0, r2);
        r4 = null;

     label0:
        i0 = lengthof r1;
        i1 = i0;

     label1:
        if i1 <= 0 goto label2;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i1, 8192);
        $i3 = i0 - i1;
        virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r1, $i3, i2);
        i1 = i1 - i2;
        goto label1;

     label2:
        if r3 == null goto label16;

        if r4 == null goto label6;

     label3:
        virtualinvoke r3.<java.io.OutputStream: void close()>();

     label4:
        goto label16;

     label5:
        $r8 := @caughtexception;
        r9 = $r8;
        virtualinvoke r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r9);
        goto label16;

     label6:
        virtualinvoke r3.<java.io.OutputStream: void close()>();
        goto label16;

     label7:
        $r10 := @caughtexception;

     label8:
        r11 = $r10;
        r4 = r11;
        throw r11;

     label9:
        $r12 := @caughtexception;
        r5 = $r12;

     label10:
        if r3 == null goto label15;

        if r4 == null goto label14;

     label11:
        virtualinvoke r3.<java.io.OutputStream: void close()>();

     label12:
        goto label15;

     label13:
        $r13 := @caughtexception;
        r6 = $r13;
        virtualinvoke r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r6);
        goto label15;

     label14:
        virtualinvoke r3.<java.io.OutputStream: void close()>();

     label15:
        throw r5;

     label16:
        return r0;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label0 to label2 with label7;
        catch java.lang.Throwable from label0 to label2 with label9;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label8 to label10 with label9;
    }

    public static transient java.nio.file.Path write(java.nio.file.Path, java.lang.Iterable, java.nio.charset.Charset, java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.lang.Iterable r1;
        java.nio.charset.Charset r2;
        java.nio.file.OpenOption[] r3;
        java.nio.charset.CharsetEncoder r4;
        java.io.OutputStream r5;
        java.io.OutputStreamWriter $r6;
        java.io.BufferedWriter r7, $r14;
        java.lang.Throwable r8, r11, r12, $r17, r18, $r19, r20, $r21, $r22;
        java.util.Iterator r9;
        java.lang.CharSequence r10;
        boolean $z0;
        java.lang.Object $r15;

        r0 := @parameter0: java.nio.file.Path;
        r1 := @parameter1: java.lang.Iterable;
        r2 := @parameter2: java.nio.charset.Charset;
        r3 := @parameter3: java.nio.file.OpenOption[];
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);
        r4 = virtualinvoke r2.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();
        r5 = staticinvoke <java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(r0, r3);
        $r14 = new java.io.BufferedWriter;
        $r6 = new java.io.OutputStreamWriter;
        specialinvoke $r6.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.CharsetEncoder)>(r5, r4);
        specialinvoke $r14.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r6);
        r7 = $r14;
        r8 = null;

     label0:
        r9 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r15 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();
        r10 = (java.lang.CharSequence) $r15;
        virtualinvoke r7.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>(r10);
        virtualinvoke r7.<java.io.BufferedWriter: void newLine()>();
        goto label1;

     label2:
        if r7 == null goto label16;

        if r8 == null goto label6;

     label3:
        virtualinvoke r7.<java.io.BufferedWriter: void close()>();

     label4:
        goto label16;

     label5:
        $r17 := @caughtexception;
        r18 = $r17;
        virtualinvoke r8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r18);
        goto label16;

     label6:
        virtualinvoke r7.<java.io.BufferedWriter: void close()>();
        goto label16;

     label7:
        $r19 := @caughtexception;

     label8:
        r20 = $r19;
        r8 = r20;
        throw r20;

     label9:
        $r21 := @caughtexception;
        r11 = $r21;

     label10:
        if r7 == null goto label15;

        if r8 == null goto label14;

     label11:
        virtualinvoke r7.<java.io.BufferedWriter: void close()>();

     label12:
        goto label15;

     label13:
        $r22 := @caughtexception;
        r12 = $r22;
        virtualinvoke r8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r12);
        goto label15;

     label14:
        virtualinvoke r7.<java.io.BufferedWriter: void close()>();

     label15:
        throw r11;

     label16:
        return r0;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label0 to label2 with label7;
        catch java.lang.Throwable from label0 to label2 with label9;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label8 to label10 with label9;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/nio/file/Files";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.nio.file.Files: boolean $assertionsDisabled> = $z1;
        return;
    }
}
