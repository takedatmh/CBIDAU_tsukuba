final class java.util.regex.Pattern$Bound extends java.util.regex.Pattern$Node
{
    static int LEFT;
    static int RIGHT;
    static int BOTH;
    static int NONE;
    int type;
    boolean useUWORD;

    void <init>(int, boolean)
    {
        java.util.regex.Pattern$Bound r0;
        int i0;
        boolean z0;

        r0 := @this: java.util.regex.Pattern$Bound;
        i0 := @parameter0: int;
        z0 := @parameter1: boolean;
        specialinvoke r0.<java.util.regex.Pattern$Node: void <init>()>();
        r0.<java.util.regex.Pattern$Bound: int type> = i0;
        r0.<java.util.regex.Pattern$Bound: boolean useUWORD> = z0;
        return;
    }

    boolean isWord(int)
    {
        java.util.regex.Pattern$Bound r0;
        int i0;
        boolean $z0, $z1, $z2;
        java.util.regex.UnicodeProp $r1;

        r0 := @this: java.util.regex.Pattern$Bound;
        i0 := @parameter0: int;
        $z0 = r0.<java.util.regex.Pattern$Bound: boolean useUWORD>;
        if $z0 == 0 goto label0;

        $r1 = <java.util.regex.UnicodeProp: java.util.regex.UnicodeProp WORD>;
        $z1 = virtualinvoke $r1.<java.util.regex.UnicodeProp: boolean is(int)>(i0);
        goto label3;

     label0:
        if i0 == 95 goto label1;

        $z2 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(int)>(i0);
        if $z2 == 0 goto label2;

     label1:
        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    int check(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$Bound r0;
        java.util.regex.Matcher r1;
        int i0, i1, i2, i3, $i4, $i5, i6, $i7, $i8;
        java.lang.CharSequence r2;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;

        r0 := @this: java.util.regex.Pattern$Bound;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        z0 = 0;
        i1 = r1.<java.util.regex.Matcher: int 'from'>;
        i2 = r1.<java.util.regex.Matcher: int 'to'>;
        $z2 = r1.<java.util.regex.Matcher: boolean transparentBounds>;
        if $z2 == 0 goto label0;

        i1 = 0;
        i2 = virtualinvoke r1.<java.util.regex.Matcher: int getTextLength()>();

     label0:
        if i0 <= i1 goto label4;

        i3 = staticinvoke <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)>(r2, i0);
        $z3 = virtualinvoke r0.<java.util.regex.Pattern$Bound: boolean isWord(int)>(i3);
        if $z3 != 0 goto label1;

        $i4 = staticinvoke <java.lang.Character: int getType(int)>(i3);
        if $i4 != 6 goto label2;

        $i5 = i0 - 1;
        $z4 = staticinvoke <java.util.regex.Pattern: boolean access$400(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, $i5, r2);
        if $z4 == 0 goto label2;

     label1:
        $z5 = 1;
        goto label3;

     label2:
        $z5 = 0;

     label3:
        z0 = $z5;

     label4:
        z1 = 0;
        if i0 >= i2 goto label8;

        i6 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r2, i0);
        $z6 = virtualinvoke r0.<java.util.regex.Pattern$Bound: boolean isWord(int)>(i6);
        if $z6 != 0 goto label5;

        $i7 = staticinvoke <java.lang.Character: int getType(int)>(i6);
        if $i7 != 6 goto label6;

        $z7 = staticinvoke <java.util.regex.Pattern: boolean access$400(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z7 == 0 goto label6;

     label5:
        $z8 = 1;
        goto label7;

     label6:
        $z8 = 0;

     label7:
        z1 = $z8;
        goto label9;

     label8:
        r1.<java.util.regex.Matcher: boolean hitEnd> = 1;
        r1.<java.util.regex.Matcher: boolean requireEnd> = 1;

     label9:
        $z9 = z0 ^ z1;
        if $z9 == 0 goto label11;

        if z1 == 0 goto label10;

        $i8 = <java.util.regex.Pattern$Bound: int LEFT>;
        goto label12;

     label10:
        $i8 = <java.util.regex.Pattern$Bound: int RIGHT>;
        goto label12;

     label11:
        $i8 = <java.util.regex.Pattern$Bound: int NONE>;

     label12:
        return $i8;
    }

    boolean match(java.util.regex.Matcher, int, java.lang.CharSequence)
    {
        java.util.regex.Pattern$Bound r0;
        java.util.regex.Matcher r1;
        int i0, $i1, $i2, $i3;
        java.lang.CharSequence r2;
        java.util.regex.Pattern$Node $r3;
        boolean $z0, $z1;

        r0 := @this: java.util.regex.Pattern$Bound;
        r1 := @parameter0: java.util.regex.Matcher;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.CharSequence;
        $i1 = virtualinvoke r0.<java.util.regex.Pattern$Bound: int check(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        $i2 = r0.<java.util.regex.Pattern$Bound: int type>;
        $i3 = $i1 & $i2;
        if $i3 <= 0 goto label0;

        $r3 = r0.<java.util.regex.Pattern$Bound: java.util.regex.Pattern$Node next>;
        $z0 = virtualinvoke $r3.<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>(r1, i0, r2);
        if $z0 == 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    static void <clinit>()
    {
        <java.util.regex.Pattern$Bound: int LEFT> = 1;
        <java.util.regex.Pattern$Bound: int RIGHT> = 2;
        <java.util.regex.Pattern$Bound: int BOTH> = 3;
        <java.util.regex.Pattern$Bound: int NONE> = 4;
        return;
    }
}
