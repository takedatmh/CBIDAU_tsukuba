final class sun.nio.ch.PendingFuture extends java.lang.Object implements java.util.concurrent.Future
{
    private static final java.util.concurrent.CancellationException CANCELLED;
    private final java.nio.channels.AsynchronousChannel channel;
    private final java.nio.channels.CompletionHandler handler;
    private final java.lang.Object attachment;
    private volatile boolean haveResult;
    private volatile java.lang.Object result;
    private volatile java.lang.Throwable exc;
    private java.util.concurrent.CountDownLatch latch;
    private java.util.concurrent.Future timeoutTask;
    private volatile java.lang.Object context;

    void <init>(java.nio.channels.AsynchronousChannel, java.nio.channels.CompletionHandler, java.lang.Object, java.lang.Object)
    {
        sun.nio.ch.PendingFuture r0;
        java.nio.channels.AsynchronousChannel r1;
        java.nio.channels.CompletionHandler r2;
        java.lang.Object r3, r4;

        r0 := @this: sun.nio.ch.PendingFuture;
        r1 := @parameter0: java.nio.channels.AsynchronousChannel;
        r2 := @parameter1: java.nio.channels.CompletionHandler;
        r3 := @parameter2: java.lang.Object;
        r4 := @parameter3: java.lang.Object;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.PendingFuture: java.nio.channels.AsynchronousChannel channel> = r1;
        r0.<sun.nio.ch.PendingFuture: java.nio.channels.CompletionHandler handler> = r2;
        r0.<sun.nio.ch.PendingFuture: java.lang.Object attachment> = r3;
        r0.<sun.nio.ch.PendingFuture: java.lang.Object context> = r4;
        return;
    }

    void <init>(java.nio.channels.AsynchronousChannel, java.nio.channels.CompletionHandler, java.lang.Object)
    {
        sun.nio.ch.PendingFuture r0;
        java.nio.channels.AsynchronousChannel r1;
        java.nio.channels.CompletionHandler r2;
        java.lang.Object r3;

        r0 := @this: sun.nio.ch.PendingFuture;
        r1 := @parameter0: java.nio.channels.AsynchronousChannel;
        r2 := @parameter1: java.nio.channels.CompletionHandler;
        r3 := @parameter2: java.lang.Object;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.PendingFuture: java.nio.channels.AsynchronousChannel channel> = r1;
        r0.<sun.nio.ch.PendingFuture: java.nio.channels.CompletionHandler handler> = r2;
        r0.<sun.nio.ch.PendingFuture: java.lang.Object attachment> = r3;
        return;
    }

    void <init>(java.nio.channels.AsynchronousChannel)
    {
        sun.nio.ch.PendingFuture r0;
        java.nio.channels.AsynchronousChannel r1;

        r0 := @this: sun.nio.ch.PendingFuture;
        r1 := @parameter0: java.nio.channels.AsynchronousChannel;
        specialinvoke r0.<sun.nio.ch.PendingFuture: void <init>(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object)>(r1, null, null);
        return;
    }

    void <init>(java.nio.channels.AsynchronousChannel, java.lang.Object)
    {
        sun.nio.ch.PendingFuture r0;
        java.nio.channels.AsynchronousChannel r1;
        java.lang.Object r2;

        r0 := @this: sun.nio.ch.PendingFuture;
        r1 := @parameter0: java.nio.channels.AsynchronousChannel;
        r2 := @parameter1: java.lang.Object;
        specialinvoke r0.<sun.nio.ch.PendingFuture: void <init>(java.nio.channels.AsynchronousChannel,java.nio.channels.CompletionHandler,java.lang.Object,java.lang.Object)>(r1, null, null, r2);
        return;
    }

    java.nio.channels.AsynchronousChannel channel()
    {
        sun.nio.ch.PendingFuture r0;
        java.nio.channels.AsynchronousChannel $r1;

        r0 := @this: sun.nio.ch.PendingFuture;
        $r1 = r0.<sun.nio.ch.PendingFuture: java.nio.channels.AsynchronousChannel channel>;
        return $r1;
    }

    java.nio.channels.CompletionHandler handler()
    {
        sun.nio.ch.PendingFuture r0;
        java.nio.channels.CompletionHandler $r1;

        r0 := @this: sun.nio.ch.PendingFuture;
        $r1 = r0.<sun.nio.ch.PendingFuture: java.nio.channels.CompletionHandler handler>;
        return $r1;
    }

    java.lang.Object attachment()
    {
        sun.nio.ch.PendingFuture r0;
        java.lang.Object $r1;

        r0 := @this: sun.nio.ch.PendingFuture;
        $r1 = r0.<sun.nio.ch.PendingFuture: java.lang.Object attachment>;
        return $r1;
    }

    void setContext(java.lang.Object)
    {
        sun.nio.ch.PendingFuture r0;
        java.lang.Object r1;

        r0 := @this: sun.nio.ch.PendingFuture;
        r1 := @parameter0: java.lang.Object;
        r0.<sun.nio.ch.PendingFuture: java.lang.Object context> = r1;
        return;
    }

    java.lang.Object getContext()
    {
        sun.nio.ch.PendingFuture r0;
        java.lang.Object $r1;

        r0 := @this: sun.nio.ch.PendingFuture;
        $r1 = r0.<sun.nio.ch.PendingFuture: java.lang.Object context>;
        return $r1;
    }

    void setTimeoutTask(java.util.concurrent.Future)
    {
        sun.nio.ch.PendingFuture r0, r3;
        java.util.concurrent.Future r1;
        java.lang.Throwable r4, $r5;
        boolean $z0;

        r0 := @this: sun.nio.ch.PendingFuture;
        r1 := @parameter0: java.util.concurrent.Future;
        r3 = r0;
        entermonitor r0;

     label0:
        $z0 = r0.<sun.nio.ch.PendingFuture: boolean haveResult>;
        if $z0 == 0 goto label1;

        interfaceinvoke r1.<java.util.concurrent.Future: boolean cancel(boolean)>(0);
        goto label2;

     label1:
        r0.<sun.nio.ch.PendingFuture: java.util.concurrent.Future timeoutTask> = r1;

     label2:
        exitmonitor r3;

     label3:
        goto label7;

     label4:
        $r5 := @caughtexception;

     label5:
        r4 = $r5;
        exitmonitor r3;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean prepareForWait()
    {
        sun.nio.ch.PendingFuture r0, r2;
        java.lang.Throwable r3, $r6;
        boolean $z0, $z1, $z2;
        java.util.concurrent.CountDownLatch $r4, $r5;

        r0 := @this: sun.nio.ch.PendingFuture;
        r2 = r0;
        entermonitor r0;

     label0:
        $z0 = r0.<sun.nio.ch.PendingFuture: boolean haveResult>;
        if $z0 == 0 goto label2;

        $z1 = 0;
        exitmonitor r2;

     label1:
        return $z1;

     label2:
        $r4 = r0.<sun.nio.ch.PendingFuture: java.util.concurrent.CountDownLatch latch>;
        if $r4 != null goto label3;

        $r5 = new java.util.concurrent.CountDownLatch;
        specialinvoke $r5.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);
        r0.<sun.nio.ch.PendingFuture: java.util.concurrent.CountDownLatch latch> = $r5;

     label3:
        $z2 = 1;
        exitmonitor r2;

     label4:
        return $z2;

     label5:
        $r6 := @caughtexception;

     label6:
        r3 = $r6;
        exitmonitor r2;

     label7:
        throw r3;

        catch java.lang.Throwable from label0 to label1 with label5;
        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void setResult(java.lang.Object)
    {
        sun.nio.ch.PendingFuture r0, r3;
        java.lang.Object r1;
        java.lang.Throwable r4, $r9;
        boolean $z0;
        java.util.concurrent.Future $r5, $r6;
        java.util.concurrent.CountDownLatch $r7, $r8;

        r0 := @this: sun.nio.ch.PendingFuture;
        r1 := @parameter0: java.lang.Object;
        r3 = r0;
        entermonitor r0;

     label0:
        $z0 = r0.<sun.nio.ch.PendingFuture: boolean haveResult>;
        if $z0 == 0 goto label2;

        exitmonitor r3;

     label1:
        return;

     label2:
        r0.<sun.nio.ch.PendingFuture: java.lang.Object result> = r1;
        r0.<sun.nio.ch.PendingFuture: boolean haveResult> = 1;
        $r5 = r0.<sun.nio.ch.PendingFuture: java.util.concurrent.Future timeoutTask>;
        if $r5 == null goto label3;

        $r6 = r0.<sun.nio.ch.PendingFuture: java.util.concurrent.Future timeoutTask>;
        interfaceinvoke $r6.<java.util.concurrent.Future: boolean cancel(boolean)>(0);

     label3:
        $r7 = r0.<sun.nio.ch.PendingFuture: java.util.concurrent.CountDownLatch latch>;
        if $r7 == null goto label4;

        $r8 = r0.<sun.nio.ch.PendingFuture: java.util.concurrent.CountDownLatch latch>;
        virtualinvoke $r8.<java.util.concurrent.CountDownLatch: void countDown()>();

     label4:
        exitmonitor r3;

     label5:
        goto label9;

     label6:
        $r9 := @caughtexception;

     label7:
        r4 = $r9;
        exitmonitor r3;

     label8:
        throw r4;

     label9:
        return;

        catch java.lang.Throwable from label0 to label1 with label6;
        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void setFailure(java.lang.Throwable)
    {
        sun.nio.ch.PendingFuture r0, r2;
        java.lang.Throwable r1, r3, $r10;
        boolean $z0, $z1, $z2;
        java.io.IOException $r4;
        java.util.concurrent.Future $r6, $r7;
        java.util.concurrent.CountDownLatch $r8, $r9;

        r0 := @this: sun.nio.ch.PendingFuture;
        r1 := @parameter0: java.lang.Throwable;
        $z0 = r1 instanceof java.io.IOException;
        if $z0 != 0 goto label0;

        $z1 = r1 instanceof java.lang.SecurityException;
        if $z1 != 0 goto label0;

        $r4 = new java.io.IOException;
        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.Throwable)>(r1);
        r1 = $r4;

     label0:
        r2 = r0;
        entermonitor r0;

     label1:
        $z2 = r0.<sun.nio.ch.PendingFuture: boolean haveResult>;
        if $z2 == 0 goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        r0.<sun.nio.ch.PendingFuture: java.lang.Throwable exc> = r1;
        r0.<sun.nio.ch.PendingFuture: boolean haveResult> = 1;
        $r6 = r0.<sun.nio.ch.PendingFuture: java.util.concurrent.Future timeoutTask>;
        if $r6 == null goto label4;

        $r7 = r0.<sun.nio.ch.PendingFuture: java.util.concurrent.Future timeoutTask>;
        interfaceinvoke $r7.<java.util.concurrent.Future: boolean cancel(boolean)>(0);

     label4:
        $r8 = r0.<sun.nio.ch.PendingFuture: java.util.concurrent.CountDownLatch latch>;
        if $r8 == null goto label5;

        $r9 = r0.<sun.nio.ch.PendingFuture: java.util.concurrent.CountDownLatch latch>;
        virtualinvoke $r9.<java.util.concurrent.CountDownLatch: void countDown()>();

     label5:
        exitmonitor r2;

     label6:
        goto label10;

     label7:
        $r10 := @caughtexception;

     label8:
        r3 = $r10;
        exitmonitor r2;

     label9:
        throw r3;

     label10:
        return;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    void setResult(java.lang.Object, java.lang.Throwable)
    {
        sun.nio.ch.PendingFuture r0;
        java.lang.Object r1;
        java.lang.Throwable r2;

        r0 := @this: sun.nio.ch.PendingFuture;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Throwable;
        if r2 != null goto label0;

        virtualinvoke r0.<sun.nio.ch.PendingFuture: void setResult(java.lang.Object)>(r1);
        goto label1;

     label0:
        virtualinvoke r0.<sun.nio.ch.PendingFuture: void setFailure(java.lang.Throwable)>(r2);

     label1:
        return;
    }

    public java.lang.Object get() throws java.util.concurrent.ExecutionException, java.lang.InterruptedException
    {
        sun.nio.ch.PendingFuture r0;
        boolean z0, $z1;
        java.util.concurrent.CancellationException $r1, $r5;
        java.util.concurrent.CountDownLatch $r2;
        java.lang.Throwable $r3, $r4, $r7;
        java.util.concurrent.ExecutionException $r6;
        java.lang.Object $r8;

        r0 := @this: sun.nio.ch.PendingFuture;
        $z1 = r0.<sun.nio.ch.PendingFuture: boolean haveResult>;
        if $z1 != 0 goto label0;

        z0 = specialinvoke r0.<sun.nio.ch.PendingFuture: boolean prepareForWait()>();
        if z0 == 0 goto label0;

        $r2 = r0.<sun.nio.ch.PendingFuture: java.util.concurrent.CountDownLatch latch>;
        virtualinvoke $r2.<java.util.concurrent.CountDownLatch: void await()>();

     label0:
        $r3 = r0.<sun.nio.ch.PendingFuture: java.lang.Throwable exc>;
        if $r3 == null goto label2;

        $r4 = r0.<sun.nio.ch.PendingFuture: java.lang.Throwable exc>;
        $r1 = <sun.nio.ch.PendingFuture: java.util.concurrent.CancellationException CANCELLED>;
        if $r4 != $r1 goto label1;

        $r5 = new java.util.concurrent.CancellationException;
        specialinvoke $r5.<java.util.concurrent.CancellationException: void <init>()>();
        throw $r5;

     label1:
        $r6 = new java.util.concurrent.ExecutionException;
        $r7 = r0.<sun.nio.ch.PendingFuture: java.lang.Throwable exc>;
        specialinvoke $r6.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>($r7);
        throw $r6;

     label2:
        $r8 = r0.<sun.nio.ch.PendingFuture: java.lang.Object result>;
        return $r8;
    }

    public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.ExecutionException, java.lang.InterruptedException, java.util.concurrent.TimeoutException
    {
        sun.nio.ch.PendingFuture r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        boolean z0, $z1, $z2;
        java.util.concurrent.CountDownLatch $r2;
        java.util.concurrent.TimeoutException $r3;
        java.lang.Throwable $r4, $r5, $r9;
        java.util.concurrent.CancellationException $r6, $r7;
        java.util.concurrent.ExecutionException $r8;
        java.lang.Object $r10;

        r0 := @this: sun.nio.ch.PendingFuture;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.concurrent.TimeUnit;
        $z1 = r0.<sun.nio.ch.PendingFuture: boolean haveResult>;
        if $z1 != 0 goto label0;

        z0 = specialinvoke r0.<sun.nio.ch.PendingFuture: boolean prepareForWait()>();
        if z0 == 0 goto label0;

        $r2 = r0.<sun.nio.ch.PendingFuture: java.util.concurrent.CountDownLatch latch>;
        $z2 = virtualinvoke $r2.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(l0, r1);
        if $z2 != 0 goto label0;

        $r3 = new java.util.concurrent.TimeoutException;
        specialinvoke $r3.<java.util.concurrent.TimeoutException: void <init>()>();
        throw $r3;

     label0:
        $r4 = r0.<sun.nio.ch.PendingFuture: java.lang.Throwable exc>;
        if $r4 == null goto label2;

        $r5 = r0.<sun.nio.ch.PendingFuture: java.lang.Throwable exc>;
        $r6 = <sun.nio.ch.PendingFuture: java.util.concurrent.CancellationException CANCELLED>;
        if $r5 != $r6 goto label1;

        $r7 = new java.util.concurrent.CancellationException;
        specialinvoke $r7.<java.util.concurrent.CancellationException: void <init>()>();
        throw $r7;

     label1:
        $r8 = new java.util.concurrent.ExecutionException;
        $r9 = r0.<sun.nio.ch.PendingFuture: java.lang.Throwable exc>;
        specialinvoke $r8.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>($r9);
        throw $r8;

     label2:
        $r10 = r0.<sun.nio.ch.PendingFuture: java.lang.Object result>;
        return $r10;
    }

    java.lang.Throwable exception()
    {
        sun.nio.ch.PendingFuture r0;
        java.util.concurrent.CancellationException $r1;
        java.lang.Throwable $r2, $r3;

        r0 := @this: sun.nio.ch.PendingFuture;
        $r2 = r0.<sun.nio.ch.PendingFuture: java.lang.Throwable exc>;
        $r1 = <sun.nio.ch.PendingFuture: java.util.concurrent.CancellationException CANCELLED>;
        if $r2 == $r1 goto label0;

        $r3 = r0.<sun.nio.ch.PendingFuture: java.lang.Throwable exc>;
        goto label1;

     label0:
        $r3 = null;

     label1:
        return $r3;
    }

    java.lang.Object value()
    {
        sun.nio.ch.PendingFuture r0;
        java.lang.Object $r1;

        r0 := @this: sun.nio.ch.PendingFuture;
        $r1 = r0.<sun.nio.ch.PendingFuture: java.lang.Object result>;
        return $r1;
    }

    public boolean isCancelled()
    {
        sun.nio.ch.PendingFuture r0;
        java.util.concurrent.CancellationException $r1;
        java.lang.Throwable $r2;
        boolean $z0;

        r0 := @this: sun.nio.ch.PendingFuture;
        $r2 = r0.<sun.nio.ch.PendingFuture: java.lang.Throwable exc>;
        $r1 = <sun.nio.ch.PendingFuture: java.util.concurrent.CancellationException CANCELLED>;
        if $r2 != $r1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isDone()
    {
        sun.nio.ch.PendingFuture r0;
        boolean $z0;

        r0 := @this: sun.nio.ch.PendingFuture;
        $z0 = r0.<sun.nio.ch.PendingFuture: boolean haveResult>;
        return $z0;
    }

    public boolean cancel(boolean)
    {
        sun.nio.ch.PendingFuture r0, r2;
        boolean z0, $z1, $z2, $z3;
        java.lang.Throwable r3, $r10;
        java.nio.channels.AsynchronousChannel $r4, $r5, $r11;
        sun.nio.ch.Cancellable $r6;
        java.util.concurrent.CancellationException $r7;
        java.util.concurrent.Future $r8, $r9;
        java.io.IOException $r12, r13;
        java.util.concurrent.CountDownLatch $r14, $r15;

        r0 := @this: sun.nio.ch.PendingFuture;
        z0 := @parameter0: boolean;
        r2 = r0;
        entermonitor r0;

     label0:
        $z1 = r0.<sun.nio.ch.PendingFuture: boolean haveResult>;
        if $z1 == 0 goto label2;

        $z2 = 0;
        exitmonitor r2;

     label1:
        return $z2;

     label2:
        $r4 = virtualinvoke r0.<sun.nio.ch.PendingFuture: java.nio.channels.AsynchronousChannel channel()>();
        $z3 = $r4 instanceof sun.nio.ch.Cancellable;
        if $z3 == 0 goto label3;

        $r5 = virtualinvoke r0.<sun.nio.ch.PendingFuture: java.nio.channels.AsynchronousChannel channel()>();
        $r6 = (sun.nio.ch.Cancellable) $r5;
        interfaceinvoke $r6.<sun.nio.ch.Cancellable: void onCancel(sun.nio.ch.PendingFuture)>(r0);

     label3:
        $r7 = <sun.nio.ch.PendingFuture: java.util.concurrent.CancellationException CANCELLED>;
        r0.<sun.nio.ch.PendingFuture: java.lang.Throwable exc> = $r7;
        r0.<sun.nio.ch.PendingFuture: boolean haveResult> = 1;
        $r8 = r0.<sun.nio.ch.PendingFuture: java.util.concurrent.Future timeoutTask>;
        if $r8 == null goto label4;

        $r9 = r0.<sun.nio.ch.PendingFuture: java.util.concurrent.Future timeoutTask>;
        interfaceinvoke $r9.<java.util.concurrent.Future: boolean cancel(boolean)>(0);

     label4:
        exitmonitor r2;

     label5:
        goto label9;

     label6:
        $r10 := @caughtexception;

     label7:
        r3 = $r10;
        exitmonitor r2;

     label8:
        throw r3;

     label9:
        if z0 == 0 goto label13;

     label10:
        $r11 = virtualinvoke r0.<sun.nio.ch.PendingFuture: java.nio.channels.AsynchronousChannel channel()>();
        interfaceinvoke $r11.<java.nio.channels.AsynchronousChannel: void close()>();

     label11:
        goto label13;

     label12:
        $r12 := @caughtexception;
        r13 = $r12;

     label13:
        $r14 = r0.<sun.nio.ch.PendingFuture: java.util.concurrent.CountDownLatch latch>;
        if $r14 == null goto label14;

        $r15 = r0.<sun.nio.ch.PendingFuture: java.util.concurrent.CountDownLatch latch>;
        virtualinvoke $r15.<java.util.concurrent.CountDownLatch: void countDown()>();

     label14:
        return 1;

        catch java.lang.Throwable from label0 to label1 with label6;
        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.io.IOException from label10 to label11 with label12;
    }

    static void <clinit>()
    {
        java.util.concurrent.CancellationException $r0;

        $r0 = new java.util.concurrent.CancellationException;
        specialinvoke $r0.<java.util.concurrent.CancellationException: void <init>()>();
        <sun.nio.ch.PendingFuture: java.util.concurrent.CancellationException CANCELLED> = $r0;
        return;
    }
}
