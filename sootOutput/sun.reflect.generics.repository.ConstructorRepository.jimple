public class sun.reflect.generics.repository.ConstructorRepository extends sun.reflect.generics.repository.GenericDeclRepository
{
    private java.lang.reflect.Type[] paramTypes;
    private java.lang.reflect.Type[] exceptionTypes;

    protected void <init>(java.lang.String, sun.reflect.generics.factory.GenericsFactory)
    {
        sun.reflect.generics.repository.ConstructorRepository r0;
        java.lang.String r1;
        sun.reflect.generics.factory.GenericsFactory r2;

        r0 := @this: sun.reflect.generics.repository.ConstructorRepository;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: sun.reflect.generics.factory.GenericsFactory;
        specialinvoke r0.<sun.reflect.generics.repository.GenericDeclRepository: void <init>(java.lang.String,sun.reflect.generics.factory.GenericsFactory)>(r1, r2);
        return;
    }

    protected sun.reflect.generics.tree.MethodTypeSignature parse(java.lang.String)
    {
        sun.reflect.generics.repository.ConstructorRepository r0;
        java.lang.String r1;
        sun.reflect.generics.parser.SignatureParser $r2;
        sun.reflect.generics.tree.MethodTypeSignature $r3;

        r0 := @this: sun.reflect.generics.repository.ConstructorRepository;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.parser.SignatureParser make()>();
        $r3 = virtualinvoke $r2.<sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.MethodTypeSignature parseMethodSig(java.lang.String)>(r1);
        return $r3;
    }

    public static sun.reflect.generics.repository.ConstructorRepository make(java.lang.String, sun.reflect.generics.factory.GenericsFactory)
    {
        java.lang.String r0;
        sun.reflect.generics.factory.GenericsFactory r1;
        sun.reflect.generics.repository.ConstructorRepository $r2;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: sun.reflect.generics.factory.GenericsFactory;
        $r2 = new sun.reflect.generics.repository.ConstructorRepository;
        specialinvoke $r2.<sun.reflect.generics.repository.ConstructorRepository: void <init>(java.lang.String,sun.reflect.generics.factory.GenericsFactory)>(r0, r1);
        return $r2;
    }

    public java.lang.reflect.Type[] getParameterTypes()
    {
        sun.reflect.generics.repository.ConstructorRepository r0;
        sun.reflect.generics.tree.TypeSignature[] r1;
        java.lang.reflect.Type[] r2, $r4, $r9, $r11;
        int i0, $i1, $i2;
        sun.reflect.generics.visitor.Reifier r3;
        sun.reflect.generics.tree.Tree $r5;
        sun.reflect.generics.tree.MethodTypeSignature $r6;
        sun.reflect.generics.tree.TypeSignature $r7;
        java.lang.reflect.Type $r8;
        java.lang.Object $r10;

        r0 := @this: sun.reflect.generics.repository.ConstructorRepository;
        $r4 = r0.<sun.reflect.generics.repository.ConstructorRepository: java.lang.reflect.Type[] paramTypes>;
        if $r4 != null goto label2;

        $r5 = virtualinvoke r0.<sun.reflect.generics.repository.ConstructorRepository: sun.reflect.generics.tree.Tree getTree()>();
        $r6 = (sun.reflect.generics.tree.MethodTypeSignature) $r5;
        r1 = virtualinvoke $r6.<sun.reflect.generics.tree.MethodTypeSignature: sun.reflect.generics.tree.TypeSignature[] getParameterTypes()>();
        $i1 = lengthof r1;
        r2 = newarray (java.lang.reflect.Type)[$i1];
        i0 = 0;

     label0:
        $i2 = lengthof r1;
        if i0 >= $i2 goto label1;

        r3 = virtualinvoke r0.<sun.reflect.generics.repository.ConstructorRepository: sun.reflect.generics.visitor.Reifier getReifier()>();
        $r7 = r1[i0];
        interfaceinvoke $r7.<sun.reflect.generics.tree.TypeSignature: void accept(sun.reflect.generics.visitor.TypeTreeVisitor)>(r3);
        $r8 = virtualinvoke r3.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type getResult()>();
        r2[i0] = $r8;
        i0 = i0 + 1;
        goto label0;

     label1:
        r0.<sun.reflect.generics.repository.ConstructorRepository: java.lang.reflect.Type[] paramTypes> = r2;

     label2:
        $r9 = r0.<sun.reflect.generics.repository.ConstructorRepository: java.lang.reflect.Type[] paramTypes>;
        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.Object clone()>();
        $r11 = (java.lang.reflect.Type[]) $r10;
        return $r11;
    }

    public java.lang.reflect.Type[] getExceptionTypes()
    {
        sun.reflect.generics.repository.ConstructorRepository r0;
        sun.reflect.generics.tree.FieldTypeSignature[] r1;
        java.lang.reflect.Type[] r2, $r4, $r9, $r11;
        int i0, $i1, $i2;
        sun.reflect.generics.visitor.Reifier r3;
        sun.reflect.generics.tree.Tree $r5;
        sun.reflect.generics.tree.MethodTypeSignature $r6;
        sun.reflect.generics.tree.FieldTypeSignature $r7;
        java.lang.reflect.Type $r8;
        java.lang.Object $r10;

        r0 := @this: sun.reflect.generics.repository.ConstructorRepository;
        $r4 = r0.<sun.reflect.generics.repository.ConstructorRepository: java.lang.reflect.Type[] exceptionTypes>;
        if $r4 != null goto label2;

        $r5 = virtualinvoke r0.<sun.reflect.generics.repository.ConstructorRepository: sun.reflect.generics.tree.Tree getTree()>();
        $r6 = (sun.reflect.generics.tree.MethodTypeSignature) $r5;
        r1 = virtualinvoke $r6.<sun.reflect.generics.tree.MethodTypeSignature: sun.reflect.generics.tree.FieldTypeSignature[] getExceptionTypes()>();
        $i1 = lengthof r1;
        r2 = newarray (java.lang.reflect.Type)[$i1];
        i0 = 0;

     label0:
        $i2 = lengthof r1;
        if i0 >= $i2 goto label1;

        r3 = virtualinvoke r0.<sun.reflect.generics.repository.ConstructorRepository: sun.reflect.generics.visitor.Reifier getReifier()>();
        $r7 = r1[i0];
        interfaceinvoke $r7.<sun.reflect.generics.tree.FieldTypeSignature: void accept(sun.reflect.generics.visitor.TypeTreeVisitor)>(r3);
        $r8 = virtualinvoke r3.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type getResult()>();
        r2[i0] = $r8;
        i0 = i0 + 1;
        goto label0;

     label1:
        r0.<sun.reflect.generics.repository.ConstructorRepository: java.lang.reflect.Type[] exceptionTypes> = r2;

     label2:
        $r9 = r0.<sun.reflect.generics.repository.ConstructorRepository: java.lang.reflect.Type[] exceptionTypes>;
        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.Object clone()>();
        $r11 = (java.lang.reflect.Type[]) $r10;
        return $r11;
    }

    protected volatile sun.reflect.generics.tree.Tree parse(java.lang.String)
    {
        sun.reflect.generics.repository.ConstructorRepository r0;
        java.lang.String r1;
        sun.reflect.generics.tree.MethodTypeSignature $r2;

        r0 := @this: sun.reflect.generics.repository.ConstructorRepository;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<sun.reflect.generics.repository.ConstructorRepository: sun.reflect.generics.tree.MethodTypeSignature parse(java.lang.String)>(r1);
        return $r2;
    }
}
