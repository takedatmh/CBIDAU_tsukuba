abstract class sun.nio.fs.AbstractBasicFileAttributeView extends java.lang.Object implements java.nio.file.attribute.BasicFileAttributeView, sun.nio.fs.DynamicFileAttributeView
{
    private static final java.lang.String SIZE_NAME;
    private static final java.lang.String CREATION_TIME_NAME;
    private static final java.lang.String LAST_ACCESS_TIME_NAME;
    private static final java.lang.String LAST_MODIFIED_TIME_NAME;
    private static final java.lang.String FILE_KEY_NAME;
    private static final java.lang.String IS_DIRECTORY_NAME;
    private static final java.lang.String IS_REGULAR_FILE_NAME;
    private static final java.lang.String IS_SYMBOLIC_LINK_NAME;
    private static final java.lang.String IS_OTHER_NAME;
    static final java.util.Set basicAttributeNames;

    protected void <init>()
    {
        sun.nio.fs.AbstractBasicFileAttributeView r0;

        r0 := @this: sun.nio.fs.AbstractBasicFileAttributeView;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public java.lang.String name()
    {
        sun.nio.fs.AbstractBasicFileAttributeView r0;

        r0 := @this: sun.nio.fs.AbstractBasicFileAttributeView;
        return "basic";
    }

    public void setAttribute(java.lang.String, java.lang.Object) throws java.io.IOException
    {
        sun.nio.fs.AbstractBasicFileAttributeView r0;
        java.lang.String r1, $r9, $r14;
        java.lang.Object r2;
        boolean $z0, $z1, $z2;
        java.nio.file.attribute.FileTime $r3, $r4, $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r12, $r13;

        r0 := @this: sun.nio.fs.AbstractBasicFileAttributeView;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object;
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lastModifiedTime");
        if $z0 == 0 goto label0;

        $r3 = (java.nio.file.attribute.FileTime) r2;
        virtualinvoke r0.<sun.nio.fs.AbstractBasicFileAttributeView: void setTimes(java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime)>($r3, null, null);
        return;

     label0:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lastAccessTime");
        if $z1 == 0 goto label1;

        $r4 = (java.nio.file.attribute.FileTime) r2;
        virtualinvoke r0.<sun.nio.fs.AbstractBasicFileAttributeView: void setTimes(java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime)>(null, $r4, null);
        return;

     label1:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("creationTime");
        if $z2 == 0 goto label2;

        $r5 = (java.nio.file.attribute.FileTime) r2;
        virtualinvoke r0.<sun.nio.fs.AbstractBasicFileAttributeView: void setTimes(java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime)>(null, null, $r5);
        return;

     label2:
        $r6 = new java.lang.IllegalArgumentException;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r9 = virtualinvoke r0.<sun.nio.fs.AbstractBasicFileAttributeView: java.lang.String name()>();
        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not recognized");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);
        throw $r6;
    }

    final void addRequestedBasicAttributes(java.nio.file.attribute.BasicFileAttributes, sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder)
    {
        sun.nio.fs.AbstractBasicFileAttributeView r0;
        java.nio.file.attribute.BasicFileAttributes r1;
        sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        long $l0;
        java.lang.Long $r3;
        java.nio.file.attribute.FileTime $r4, $r5, $r6;
        java.lang.Object $r7;
        java.lang.Boolean $r8, $r9, $r10, $r11;

        r0 := @this: sun.nio.fs.AbstractBasicFileAttributeView;
        r1 := @parameter0: java.nio.file.attribute.BasicFileAttributes;
        r2 := @parameter1: sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder;
        $z0 = virtualinvoke r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: boolean match(java.lang.String)>("size");
        if $z0 == 0 goto label0;

        $l0 = interfaceinvoke r1.<java.nio.file.attribute.BasicFileAttributes: long size()>();
        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);
        virtualinvoke r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: void add(java.lang.String,java.lang.Object)>("size", $r3);

     label0:
        $z1 = virtualinvoke r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: boolean match(java.lang.String)>("creationTime");
        if $z1 == 0 goto label1;

        $r4 = interfaceinvoke r1.<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime creationTime()>();
        virtualinvoke r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: void add(java.lang.String,java.lang.Object)>("creationTime", $r4);

     label1:
        $z2 = virtualinvoke r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: boolean match(java.lang.String)>("lastAccessTime");
        if $z2 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime lastAccessTime()>();
        virtualinvoke r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: void add(java.lang.String,java.lang.Object)>("lastAccessTime", $r5);

     label2:
        $z3 = virtualinvoke r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: boolean match(java.lang.String)>("lastModifiedTime");
        if $z3 == 0 goto label3;

        $r6 = interfaceinvoke r1.<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime lastModifiedTime()>();
        virtualinvoke r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: void add(java.lang.String,java.lang.Object)>("lastModifiedTime", $r6);

     label3:
        $z4 = virtualinvoke r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: boolean match(java.lang.String)>("fileKey");
        if $z4 == 0 goto label4;

        $r7 = interfaceinvoke r1.<java.nio.file.attribute.BasicFileAttributes: java.lang.Object fileKey()>();
        virtualinvoke r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: void add(java.lang.String,java.lang.Object)>("fileKey", $r7);

     label4:
        $z5 = virtualinvoke r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: boolean match(java.lang.String)>("isDirectory");
        if $z5 == 0 goto label5;

        $z6 = interfaceinvoke r1.<java.nio.file.attribute.BasicFileAttributes: boolean isDirectory()>();
        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);
        virtualinvoke r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: void add(java.lang.String,java.lang.Object)>("isDirectory", $r8);

     label5:
        $z7 = virtualinvoke r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: boolean match(java.lang.String)>("isRegularFile");
        if $z7 == 0 goto label6;

        $z8 = interfaceinvoke r1.<java.nio.file.attribute.BasicFileAttributes: boolean isRegularFile()>();
        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z8);
        virtualinvoke r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: void add(java.lang.String,java.lang.Object)>("isRegularFile", $r9);

     label6:
        $z9 = virtualinvoke r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: boolean match(java.lang.String)>("isSymbolicLink");
        if $z9 == 0 goto label7;

        $z10 = interfaceinvoke r1.<java.nio.file.attribute.BasicFileAttributes: boolean isSymbolicLink()>();
        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z10);
        virtualinvoke r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: void add(java.lang.String,java.lang.Object)>("isSymbolicLink", $r10);

     label7:
        $z11 = virtualinvoke r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: boolean match(java.lang.String)>("isOther");
        if $z11 == 0 goto label8;

        $z12 = interfaceinvoke r1.<java.nio.file.attribute.BasicFileAttributes: boolean isOther()>();
        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z12);
        virtualinvoke r2.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: void add(java.lang.String,java.lang.Object)>("isOther", $r11);

     label8:
        return;
    }

    public java.util.Map readAttributes(java.lang.String[]) throws java.io.IOException
    {
        sun.nio.fs.AbstractBasicFileAttributeView r0;
        java.lang.String[] r1;
        java.util.Set $r2;
        sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder r3;
        java.nio.file.attribute.BasicFileAttributes $r4;
        java.util.Map $r5;

        r0 := @this: sun.nio.fs.AbstractBasicFileAttributeView;
        r1 := @parameter0: java.lang.String[];
        $r2 = <sun.nio.fs.AbstractBasicFileAttributeView: java.util.Set basicAttributeNames>;
        r3 = staticinvoke <sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder create(java.util.Set,java.lang.String[])>($r2, r1);
        $r4 = virtualinvoke r0.<sun.nio.fs.AbstractBasicFileAttributeView: java.nio.file.attribute.BasicFileAttributes readAttributes()>();
        virtualinvoke r0.<sun.nio.fs.AbstractBasicFileAttributeView: void addRequestedBasicAttributes(java.nio.file.attribute.BasicFileAttributes,sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder)>($r4, r3);
        $r5 = virtualinvoke r3.<sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder: java.util.Map unmodifiableMap()>();
        return $r5;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.Set $r1;

        $r0 = newarray (java.lang.String)[9];
        $r0[0] = "size";
        $r0[1] = "creationTime";
        $r0[2] = "lastAccessTime";
        $r0[3] = "lastModifiedTime";
        $r0[4] = "fileKey";
        $r0[5] = "isDirectory";
        $r0[6] = "isRegularFile";
        $r0[7] = "isSymbolicLink";
        $r0[8] = "isOther";
        $r1 = staticinvoke <sun.nio.fs.Util: java.util.Set newSet(java.lang.Object[])>($r0);
        <sun.nio.fs.AbstractBasicFileAttributeView: java.util.Set basicAttributeNames> = $r1;
        return;
    }
}
