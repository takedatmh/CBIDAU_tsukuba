public class javax.crypto.Cipher extends java.lang.Object
{
    private static final sun.security.util.Debug debug;
    public static final int ENCRYPT_MODE;
    public static final int DECRYPT_MODE;
    public static final int WRAP_MODE;
    public static final int UNWRAP_MODE;
    public static final int PUBLIC_KEY;
    public static final int PRIVATE_KEY;
    public static final int SECRET_KEY;
    private java.security.Provider provider;
    private javax.crypto.CipherSpi spi;
    private java.lang.String transformation;
    private javax.crypto.CryptoPermission cryptoPerm;
    private javax.crypto.ExemptionMechanism exmech;
    private boolean initialized;
    private int opmode;
    private static final java.lang.String KEY_USAGE_EXTENSION_OID;
    private javax.crypto.CipherSpi firstSpi;
    private java.security.Provider$Service firstService;
    private java.util.Iterator serviceIterator;
    private java.util.List transforms;
    private final java.lang.Object lock;
    private static final java.lang.String ATTR_MODE;
    private static final java.lang.String ATTR_PAD;
    private static final int S_NO;
    private static final int S_MAYBE;
    private static final int S_YES;
    private static int warnCount;
    private static final int I_KEY;
    private static final int I_PARAMSPEC;
    private static final int I_PARAMS;
    private static final int I_CERT;

    protected void <init>(javax.crypto.CipherSpi, java.security.Provider, java.lang.String)
    {
        javax.crypto.Cipher r0;
        javax.crypto.CipherSpi r1;
        java.security.Provider r2;
        java.lang.String r3;
        javax.crypto.JceSecurityManager $r4;
        boolean $z0;
        java.lang.NullPointerException $r5;
        javax.crypto.CryptoAllPermission $r6;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: javax.crypto.CipherSpi;
        r2 := @parameter1: java.security.Provider;
        r3 := @parameter2: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<javax.crypto.Cipher: boolean initialized> = 0;
        r0.<javax.crypto.Cipher: int opmode> = 0;
        $r4 = <javax.crypto.JceSecurityManager: javax.crypto.JceSecurityManager INSTANCE>;
        $z0 = virtualinvoke $r4.<javax.crypto.JceSecurityManager: boolean isCallerTrusted()>();
        if $z0 != 0 goto label0;

        $r5 = new java.lang.NullPointerException;
        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();
        throw $r5;

     label0:
        r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi> = r1;
        r0.<javax.crypto.Cipher: java.security.Provider provider> = r2;
        r0.<javax.crypto.Cipher: java.lang.String transformation> = r3;
        $r6 = <javax.crypto.CryptoAllPermission: javax.crypto.CryptoAllPermission INSTANCE>;
        r0.<javax.crypto.Cipher: javax.crypto.CryptoPermission cryptoPerm> = $r6;
        r0.<javax.crypto.Cipher: java.lang.Object lock> = null;
        return;
    }

    void <init>(javax.crypto.CipherSpi, java.lang.String)
    {
        javax.crypto.Cipher r0;
        javax.crypto.CipherSpi r1;
        java.lang.String r2;
        javax.crypto.CryptoAllPermission $r3;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: javax.crypto.CipherSpi;
        r2 := @parameter1: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<javax.crypto.Cipher: boolean initialized> = 0;
        r0.<javax.crypto.Cipher: int opmode> = 0;
        r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi> = r1;
        r0.<javax.crypto.Cipher: java.lang.String transformation> = r2;
        $r3 = <javax.crypto.CryptoAllPermission: javax.crypto.CryptoAllPermission INSTANCE>;
        r0.<javax.crypto.Cipher: javax.crypto.CryptoPermission cryptoPerm> = $r3;
        r0.<javax.crypto.Cipher: java.lang.Object lock> = null;
        return;
    }

    private void <init>(javax.crypto.CipherSpi, java.security.Provider$Service, java.util.Iterator, java.lang.String, java.util.List)
    {
        javax.crypto.Cipher r0;
        javax.crypto.CipherSpi r1;
        java.security.Provider$Service r2;
        java.util.Iterator r3;
        java.lang.String r4;
        java.util.List r5;
        java.lang.Object $r6;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: javax.crypto.CipherSpi;
        r2 := @parameter1: java.security.Provider$Service;
        r3 := @parameter2: java.util.Iterator;
        r4 := @parameter3: java.lang.String;
        r5 := @parameter4: java.util.List;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<javax.crypto.Cipher: boolean initialized> = 0;
        r0.<javax.crypto.Cipher: int opmode> = 0;
        r0.<javax.crypto.Cipher: javax.crypto.CipherSpi firstSpi> = r1;
        r0.<javax.crypto.Cipher: java.security.Provider$Service firstService> = r2;
        r0.<javax.crypto.Cipher: java.util.Iterator serviceIterator> = r3;
        r0.<javax.crypto.Cipher: java.util.List transforms> = r5;
        r0.<javax.crypto.Cipher: java.lang.String transformation> = r4;
        $r6 = new java.lang.Object;
        specialinvoke $r6.<java.lang.Object: void <init>()>();
        r0.<javax.crypto.Cipher: java.lang.Object lock> = $r6;
        return;
    }

    private static java.lang.String[] tokenizeTransformation(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0, $r6, $r7, $r12, $r18, $r19, $r20, $r25;
        java.lang.String[] r1;
        int i0, $i1, $i2;
        java.util.StringTokenizer r2, $r5;
        java.util.NoSuchElementException r3, $r13;
        java.security.NoSuchAlgorithmException $r4, $r8, $r14, $r21;
        boolean $z0, $z1;
        java.lang.StringBuilder $r9, $r10, $r11, $r15, $r16, $r17, $r22, $r23, $r24;

        r0 := @parameter0: java.lang.String;
        if r0 != null goto label0;

        $r4 = new java.security.NoSuchAlgorithmException;
        specialinvoke $r4.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>("No transformation given");
        throw $r4;

     label0:
        r1 = newarray (java.lang.String)[3];
        i0 = 0;
        $r5 = new java.util.StringTokenizer;
        specialinvoke $r5.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r0, "/");
        r2 = $r5;

     label1:
        $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z0 == 0 goto label2;

        if i0 >= 3 goto label2;

        $i1 = i0;
        i0 = i0 + 1;
        $r6 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();
        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();
        r1[$i1] = $r7;
        goto label1;

     label2:
        if i0 == 0 goto label3;

        if i0 == 2 goto label3;

        $z1 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z1 == 0 goto label4;

     label3:
        $r8 = new java.security.NoSuchAlgorithmException;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid transformation format:");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r12);
        throw $r8;

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;
        r3 = $r13;
        $r14 = new java.security.NoSuchAlgorithmException;
        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid transformation format:");
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r14.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r18);
        throw $r14;

     label6:
        $r19 = r1[0];
        if $r19 == null goto label7;

        $r20 = r1[0];
        $i2 = virtualinvoke $r20.<java.lang.String: int length()>();
        if $i2 != 0 goto label8;

     label7:
        $r21 = new java.security.NoSuchAlgorithmException;
        $r22 = new java.lang.StringBuilder;
        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid transformation:algorithm not specified-");
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r21.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r25);
        throw $r21;

     label8:
        return r1;

        catch java.util.NoSuchElementException from label1 to label4 with label5;
    }

    private static java.util.List getTransforms(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0, r2, r3, r4, $r16, $r21, $r26;
        java.lang.String[] r1;
        javax.crypto.Cipher$Transform r5, $r6, $r10, $r17, $r22, $r27;
        int $i0, $i1;
        java.util.List $r7;
        java.util.ArrayList $r8, r9;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15, $r18, $r19, $r20, $r23, $r24, $r25;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>(r0);
        r2 = r1[0];
        r3 = r1[1];
        r4 = r1[2];
        if r3 == null goto label0;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();
        if $i0 != 0 goto label0;

        r3 = null;

     label0:
        if r4 == null goto label1;

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();
        if $i1 != 0 goto label1;

        r4 = null;

     label1:
        if r3 != null goto label2;

        if r4 != null goto label2;

        $r6 = new javax.crypto.Cipher$Transform;
        specialinvoke $r6.<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r2, "", null, null);
        r5 = $r6;
        $r7 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r5);
        return $r7;

     label2:
        $r8 = new java.util.ArrayList;
        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(4);
        r9 = $r8;
        $r10 = new javax.crypto.Cipher$Transform;
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r10.<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r2, $r16, null, null);
        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r10);
        $r17 = new javax.crypto.Cipher$Transform;
        $r18 = new java.lang.StringBuilder;
        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r17.<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r2, $r21, null, r4);
        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r17);
        $r22 = new javax.crypto.Cipher$Transform;
        $r23 = new java.lang.StringBuilder;
        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("//");
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r22.<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r2, $r26, r3, null);
        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r22);
        $r27 = new javax.crypto.Cipher$Transform;
        specialinvoke $r27.<javax.crypto.Cipher$Transform: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r2, "", r3, r4);
        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r27);
        return r9;
    }

    private static javax.crypto.Cipher$Transform getTransform(java.security.Provider$Service, java.util.List)
    {
        java.security.Provider$Service r0;
        java.util.List r1;
        java.util.Locale $r2;
        java.lang.String r3, $r6, $r8;
        java.util.Iterator r4;
        javax.crypto.Cipher$Transform r5;
        boolean $z0, $z1;
        java.lang.Object $r7;

        r0 := @parameter0: java.security.Provider$Service;
        r1 := @parameter1: java.util.List;
        $r6 = virtualinvoke r0.<java.security.Provider$Service: java.lang.String getAlgorithm()>();
        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;
        r3 = virtualinvoke $r6.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);
        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (javax.crypto.Cipher$Transform) $r7;
        $r8 = r5.<javax.crypto.Cipher$Transform: java.lang.String suffix>;
        $z1 = virtualinvoke r3.<java.lang.String: boolean endsWith(java.lang.String)>($r8);
        if $z1 == 0 goto label1;

        return r5;

     label1:
        goto label0;

     label2:
        return null;
    }

    public static final javax.crypto.Cipher getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException
    {
        java.lang.String r0, $r12, $r26;
        java.util.List r1, r13;
        java.util.ArrayList r2, $r9;
        java.util.Iterator r3, r14;
        javax.crypto.Cipher$Transform r4, r7;
        java.lang.Exception r5, $r20, r21;
        java.security.Provider$Service r6;
        int i0, $i1;
        javax.crypto.CipherSpi r8;
        boolean $z0, $z2, $z3;
        java.lang.Object $r10, $r15, $r18;
        sun.security.jca.ServiceId $r11;
        java.security.Provider $r16;
        javax.crypto.Cipher $r17, $r19;
        java.security.NoSuchAlgorithmException $r22;
        java.lang.StringBuilder $r23, $r24, $r25;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>(r0);
        $r9 = new java.util.ArrayList;
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();
        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i1);
        r2 = $r9;
        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (javax.crypto.Cipher$Transform) $r10;
        $r11 = new sun.security.jca.ServiceId;
        $r12 = r4.<javax.crypto.Cipher$Transform: java.lang.String transform>;
        specialinvoke $r11.<sun.security.jca.ServiceId: void <init>(java.lang.String,java.lang.String)>("Cipher", $r12);
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r11);
        goto label0;

     label1:
        r13 = staticinvoke <sun.security.jca.GetInstance: java.util.List getServices(java.util.List)>(r2);
        r14 = interfaceinvoke r13.<java.util.List: java.util.Iterator iterator()>();
        r5 = null;

     label2:
        $z2 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();
        if $z2 == 0 goto label9;

        $r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();
        r6 = (java.security.Provider$Service) $r15;
        $r16 = virtualinvoke r6.<java.security.Provider$Service: java.security.Provider getProvider()>();
        $z3 = staticinvoke <javax.crypto.JceSecurity: boolean canUseProvider(java.security.Provider)>($r16);
        if $z3 != 0 goto label3;

        goto label2;

     label3:
        r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher$Transform getTransform(java.security.Provider$Service,java.util.List)>(r6, r1);
        if r7 != null goto label4;

        goto label2;

     label4:
        i0 = virtualinvoke r7.<javax.crypto.Cipher$Transform: int supportsModePadding(java.security.Provider$Service)>(r6);
        if i0 != 0 goto label5;

        goto label2;

     label5:
        if i0 != 2 goto label6;

        $r17 = new javax.crypto.Cipher;
        specialinvoke $r17.<javax.crypto.Cipher: void <init>(javax.crypto.CipherSpi,java.security.Provider$Service,java.util.Iterator,java.lang.String,java.util.List)>(null, r6, r14, r0, r1);
        return $r17;

     label6:
        $r18 = virtualinvoke r6.<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>(null);
        r8 = (javax.crypto.CipherSpi) $r18;
        virtualinvoke r7.<javax.crypto.Cipher$Transform: void setModePadding(javax.crypto.CipherSpi)>(r8);
        $r19 = new javax.crypto.Cipher;
        specialinvoke $r19.<javax.crypto.Cipher: void <init>(javax.crypto.CipherSpi,java.security.Provider$Service,java.util.Iterator,java.lang.String,java.util.List)>(r8, r6, r14, r0, r1);

     label7:
        return $r19;

     label8:
        $r20 := @caughtexception;
        r21 = $r20;
        r5 = r21;
        goto label2;

     label9:
        $r22 = new java.security.NoSuchAlgorithmException;
        $r23 = new java.lang.StringBuilder;
        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find any provider supporting ");
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r22.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>($r26, r5);
        throw $r22;

        catch java.lang.Exception from label6 to label7 with label8;
    }

    public static final javax.crypto.Cipher getInstance(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, javax.crypto.NoSuchPaddingException
    {
        java.lang.String r0, r1, $r8;
        java.security.Provider r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        java.security.NoSuchProviderException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        javax.crypto.Cipher $r9;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        if r1 == null goto label0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i0 != 0 goto label1;

     label0:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Missing provider");
        throw $r3;

     label1:
        r2 = staticinvoke <java.security.Security: java.security.Provider getProvider(java.lang.String)>(r1);
        if r2 != null goto label2;

        $r4 = new java.security.NoSuchProviderException;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such provider: ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.security.NoSuchProviderException: void <init>(java.lang.String)>($r8);
        throw $r4;

     label2:
        $r9 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>(r0, r2);
        return $r9;
    }

    public static final javax.crypto.Cipher getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException
    {
        java.lang.String r0, r4, r9, $r12, $r15, $r31, $r36;
        java.security.Provider r1, $r22;
        java.lang.Exception r2, r8, $r24, r25;
        java.util.List r3;
        boolean z0, $z1, $z2;
        java.util.Iterator r5;
        javax.crypto.Cipher$Transform r6;
        java.security.Provider$Service r7;
        java.lang.IllegalArgumentException $r10;
        java.lang.Object $r11, $r18;
        java.lang.StringBuilder $r13, $r14, $r16, $r28, $r29, $r30, $r33, $r34, $r35;
        java.lang.SecurityException $r17;
        int $i0, $i1;
        javax.crypto.CipherSpi r19;
        javax.crypto.Cipher $r20, r21;
        javax.crypto.NoSuchPaddingException $r26, $r27;
        java.security.NoSuchAlgorithmException $r32;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.security.Provider;
        if r1 != null goto label0;

        $r10 = new java.lang.IllegalArgumentException;
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Missing provider");
        throw $r10;

     label0:
        r2 = null;
        r3 = staticinvoke <javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)>(r0);
        z0 = 0;
        r4 = null;
        r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
        if $z1 == 0 goto label9;

        $r11 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        r6 = (javax.crypto.Cipher$Transform) $r11;
        $r12 = r6.<javax.crypto.Cipher$Transform: java.lang.String transform>;
        r7 = virtualinvoke r1.<java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>("Cipher", $r12);
        if r7 != null goto label2;

        goto label1;

     label2:
        if z0 != 0 goto label4;

        r8 = staticinvoke <javax.crypto.JceSecurity: java.lang.Exception getVerificationResult(java.security.Provider)>(r1);
        if r8 == null goto label3;

        $r13 = new java.lang.StringBuilder;
        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JCE cannot authenticate the provider ");
        $r15 = virtualinvoke r1.<java.security.Provider: java.lang.String getName()>();
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);
        r9 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        $r17 = new java.lang.SecurityException;
        specialinvoke $r17.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>(r9, r8);
        throw $r17;

     label3:
        z0 = 1;

     label4:
        $i0 = virtualinvoke r6.<javax.crypto.Cipher$Transform: int supportsMode(java.security.Provider$Service)>(r7);
        if $i0 != 0 goto label5;

        goto label1;

     label5:
        $i1 = virtualinvoke r6.<javax.crypto.Cipher$Transform: int supportsPadding(java.security.Provider$Service)>(r7);
        if $i1 != 0 goto label6;

        r4 = r6.<javax.crypto.Cipher$Transform: java.lang.String pad>;
        goto label1;

     label6:
        $r18 = virtualinvoke r7.<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>(null);
        r19 = (javax.crypto.CipherSpi) $r18;
        virtualinvoke r6.<javax.crypto.Cipher$Transform: void setModePadding(javax.crypto.CipherSpi)>(r19);
        $r20 = new javax.crypto.Cipher;
        specialinvoke $r20.<javax.crypto.Cipher: void <init>(javax.crypto.CipherSpi,java.lang.String)>(r19, r0);
        r21 = $r20;
        $r22 = virtualinvoke r7.<java.security.Provider$Service: java.security.Provider getProvider()>();
        r21.<javax.crypto.Cipher: java.security.Provider provider> = $r22;
        specialinvoke r21.<javax.crypto.Cipher: void initCryptoPermission()>();

     label7:
        return r21;

     label8:
        $r24 := @caughtexception;
        r25 = $r24;
        r2 = r25;
        goto label1;

     label9:
        $z2 = r2 instanceof javax.crypto.NoSuchPaddingException;
        if $z2 == 0 goto label10;

        $r26 = (javax.crypto.NoSuchPaddingException) r2;
        throw $r26;

     label10:
        if r4 == null goto label11;

        $r27 = new javax.crypto.NoSuchPaddingException;
        $r28 = new java.lang.StringBuilder;
        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Padding not supported: ");
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r27.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r31);
        throw $r27;

     label11:
        $r32 = new java.security.NoSuchAlgorithmException;
        $r33 = new java.lang.StringBuilder;
        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such algorithm: ");
        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r32.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>($r36, r2);
        throw $r32;

        catch java.lang.Exception from label6 to label7 with label8;
    }

    private void initCryptoPermission() throws java.security.NoSuchAlgorithmException
    {
        javax.crypto.Cipher r0;
        boolean $z0;
        javax.crypto.CryptoAllPermission $r1;
        java.lang.String r2, $r3;
        javax.crypto.CryptoPermission $r4, $r5;
        javax.crypto.ExemptionMechanism $r6;

        r0 := @this: javax.crypto.Cipher;
        $z0 = staticinvoke <javax.crypto.JceSecurity: boolean isRestricted()>();
        if $z0 != 0 goto label0;

        $r1 = <javax.crypto.CryptoAllPermission: javax.crypto.CryptoAllPermission INSTANCE>;
        r0.<javax.crypto.Cipher: javax.crypto.CryptoPermission cryptoPerm> = $r1;
        r0.<javax.crypto.Cipher: javax.crypto.ExemptionMechanism exmech> = null;
        return;

     label0:
        $r3 = r0.<javax.crypto.Cipher: java.lang.String transformation>;
        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.CryptoPermission getConfiguredPermission(java.lang.String)>($r3);
        r0.<javax.crypto.Cipher: javax.crypto.CryptoPermission cryptoPerm> = $r4;
        $r5 = r0.<javax.crypto.Cipher: javax.crypto.CryptoPermission cryptoPerm>;
        r2 = virtualinvoke $r5.<javax.crypto.CryptoPermission: java.lang.String getExemptionMechanism()>();
        if r2 == null goto label1;

        $r6 = staticinvoke <javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String)>(r2);
        r0.<javax.crypto.Cipher: javax.crypto.ExemptionMechanism exmech> = $r6;

     label1:
        return;
    }

    void chooseFirstProvider()
    {
        javax.crypto.Cipher r0;
        java.lang.Object r1, r5, $r8, $r19;
        int i0, $i1, $i2, $i3;
        java.security.Provider$Service r2, $r15, $r17;
        javax.crypto.CipherSpi r3, $r7, $r9;
        javax.crypto.Cipher$Transform r4;
        java.lang.Throwable r6, $r28;
        sun.security.util.Debug $r10, $r11, $r12;
        java.lang.Exception $r13, r14, $r23, r24;
        java.util.Iterator $r16, $r18;
        boolean $z0, $z1, $z2;
        java.security.Provider $r20, $r22;
        java.util.List $r21;
        java.security.ProviderException $r25, r26;

        r0 := @this: javax.crypto.Cipher;
        $r7 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        if $r7 == null goto label0;

        return;

     label0:
        $r8 = r0.<javax.crypto.Cipher: java.lang.Object lock>;
        r1 = $r8;
        entermonitor $r8;

     label1:
        $r9 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        if $r9 == null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r10 = <javax.crypto.Cipher: sun.security.util.Debug debug>;
        if $r10 == null goto label5;

        $i1 = <javax.crypto.Cipher: int warnCount>;
        $i2 = $i1 - 1;
        <javax.crypto.Cipher: int warnCount> = $i2;
        i0 = $i2;
        if i0 < 0 goto label5;

        $r11 = <javax.crypto.Cipher: sun.security.util.Debug debug>;
        virtualinvoke $r11.<sun.security.util.Debug: void println(java.lang.String)>("Cipher.init() not first method called, disabling delayed provider selection");
        if i0 != 0 goto label4;

        $r12 = <javax.crypto.Cipher: sun.security.util.Debug debug>;
        virtualinvoke $r12.<sun.security.util.Debug: void println(java.lang.String)>("Further warnings of this type will be suppressed");

     label4:
        $r13 = new java.lang.Exception;
        specialinvoke $r13.<java.lang.Exception: void <init>(java.lang.String)>("Call trace");
        virtualinvoke $r13.<java.lang.Exception: void printStackTrace()>();

     label5:
        r14 = null;

     label6:
        $r15 = r0.<javax.crypto.Cipher: java.security.Provider$Service firstService>;
        if $r15 != null goto label7;

        $r16 = r0.<javax.crypto.Cipher: java.util.Iterator serviceIterator>;
        $z0 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label20;

     label7:
        $r17 = r0.<javax.crypto.Cipher: java.security.Provider$Service firstService>;
        if $r17 == null goto label8;

        r2 = r0.<javax.crypto.Cipher: java.security.Provider$Service firstService>;
        r3 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi firstSpi>;
        r0.<javax.crypto.Cipher: java.security.Provider$Service firstService> = null;
        r0.<javax.crypto.Cipher: javax.crypto.CipherSpi firstSpi> = null;
        goto label9;

     label8:
        $r18 = r0.<javax.crypto.Cipher: java.util.Iterator serviceIterator>;
        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();
        r2 = (java.security.Provider$Service) $r19;
        r3 = null;

     label9:
        $r20 = virtualinvoke r2.<java.security.Provider$Service: java.security.Provider getProvider()>();
        $z1 = staticinvoke <javax.crypto.JceSecurity: boolean canUseProvider(java.security.Provider)>($r20);
        if $z1 != 0 goto label10;

        goto label6;

     label10:
        $r21 = r0.<javax.crypto.Cipher: java.util.List transforms>;
        r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher$Transform getTransform(java.security.Provider$Service,java.util.List)>(r2, $r21);
        if r4 != null goto label11;

        goto label6;

     label11:
        $i3 = virtualinvoke r4.<javax.crypto.Cipher$Transform: int supportsModePadding(java.security.Provider$Service)>(r2);
        if $i3 != 0 goto label12;

        goto label6;

     label12:
        if r3 != null goto label15;

        r5 = virtualinvoke r2.<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>(null);
        $z2 = r5 instanceof javax.crypto.CipherSpi;
        if $z2 != 0 goto label14;

     label13:
        goto label6;

     label14:
        r3 = (javax.crypto.CipherSpi) r5;

     label15:
        virtualinvoke r4.<javax.crypto.Cipher$Transform: void setModePadding(javax.crypto.CipherSpi)>(r3);
        specialinvoke r0.<javax.crypto.Cipher: void initCryptoPermission()>();
        r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi> = r3;
        $r22 = virtualinvoke r2.<java.security.Provider$Service: java.security.Provider getProvider()>();
        r0.<javax.crypto.Cipher: java.security.Provider provider> = $r22;
        r0.<javax.crypto.Cipher: java.security.Provider$Service firstService> = null;
        r0.<javax.crypto.Cipher: java.util.Iterator serviceIterator> = null;
        r0.<javax.crypto.Cipher: java.util.List transforms> = null;

     label16:
        exitmonitor r1;

     label17:
        return;

     label18:
        $r23 := @caughtexception;

     label19:
        r24 = $r23;
        r14 = r24;
        goto label6;

     label20:
        $r25 = new java.security.ProviderException;
        specialinvoke $r25.<java.security.ProviderException: void <init>(java.lang.String)>("Could not construct CipherSpi instance");
        r26 = $r25;
        if r14 == null goto label21;

        virtualinvoke r26.<java.security.ProviderException: java.lang.Throwable initCause(java.lang.Throwable)>(r14);

     label21:
        throw r26;

     label22:
        $r28 := @caughtexception;
        r6 = $r28;
        exitmonitor r1;

     label23:
        throw r6;

        catch java.lang.Exception from label12 to label13 with label18;
        catch java.lang.Exception from label14 to label16 with label18;
        catch java.lang.Throwable from label1 to label2 with label22;
        catch java.lang.Throwable from label3 to label17 with label22;
        catch java.lang.Throwable from label19 to label23 with label22;
    }

    private void implInit(javax.crypto.CipherSpi, int, int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        javax.crypto.Cipher r0;
        javax.crypto.CipherSpi r1;
        int i0, i1;
        java.security.Key r2;
        java.security.spec.AlgorithmParameterSpec r3;
        java.security.AlgorithmParameters r4;
        java.security.SecureRandom r5;
        java.lang.AssertionError $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: javax.crypto.CipherSpi;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: java.security.Key;
        r3 := @parameter4: java.security.spec.AlgorithmParameterSpec;
        r4 := @parameter5: java.security.AlgorithmParameters;
        r5 := @parameter6: java.security.SecureRandom;
        tableswitch(i0)
        {
            case 1: goto label0;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label3;
            default: goto label4;
        };

     label0:
        specialinvoke r0.<javax.crypto.Cipher: void checkCryptoPerm(javax.crypto.CipherSpi,java.security.Key)>(r1, r2);
        virtualinvoke r1.<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.SecureRandom)>(i1, r2, r5);
        goto label5;

     label1:
        specialinvoke r0.<javax.crypto.Cipher: void checkCryptoPerm(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(r1, r2, r3);
        virtualinvoke r1.<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(i1, r2, r3, r5);
        goto label5;

     label2:
        specialinvoke r0.<javax.crypto.Cipher: void checkCryptoPerm(javax.crypto.CipherSpi,java.security.Key,java.security.AlgorithmParameters)>(r1, r2, r4);
        virtualinvoke r1.<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)>(i1, r2, r4, r5);
        goto label5;

     label3:
        specialinvoke r0.<javax.crypto.Cipher: void checkCryptoPerm(javax.crypto.CipherSpi,java.security.Key)>(r1, r2);
        virtualinvoke r1.<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.SecureRandom)>(i1, r2, r5);
        goto label5;

     label4:
        $r6 = new java.lang.AssertionError;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal Cipher error: ");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);
        throw $r6;

     label5:
        return;
    }

    private void chooseProvider(int, int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        javax.crypto.Cipher r0;
        int i0, i1, $i2;
        java.security.Key r1;
        java.security.spec.AlgorithmParameterSpec r2;
        java.security.AlgorithmParameters r3;
        java.security.SecureRandom r4;
        java.lang.Object r5, $r12, $r19, $r22;
        java.lang.Exception r6, r10, $r24;
        java.security.Provider$Service r7, $r15, $r17;
        javax.crypto.CipherSpi r8, $r13, $r14;
        javax.crypto.Cipher$Transform r9;
        java.lang.Throwable r11, $r36;
        java.util.Iterator $r16, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.security.Provider $r20, $r23;
        java.util.List $r21;
        java.security.InvalidKeyException $r25, $r31;
        java.security.InvalidAlgorithmParameterException $r26;
        java.lang.RuntimeException $r27;
        java.lang.Class $r28;
        java.lang.String $r29, r30, $r35;
        java.lang.StringBuilder $r32, $r33, $r34;

        r0 := @this: javax.crypto.Cipher;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.security.Key;
        r2 := @parameter3: java.security.spec.AlgorithmParameterSpec;
        r3 := @parameter4: java.security.AlgorithmParameters;
        r4 := @parameter5: java.security.SecureRandom;
        $r12 = r0.<javax.crypto.Cipher: java.lang.Object lock>;
        r5 = $r12;
        entermonitor $r12;

     label0:
        $r13 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        if $r13 == null goto label2;

        $r14 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        specialinvoke r0.<javax.crypto.Cipher: void implInit(javax.crypto.CipherSpi,int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>($r14, i0, i1, r1, r2, r3, r4);
        exitmonitor r5;

     label1:
        return;

     label2:
        r6 = null;

     label3:
        $r15 = r0.<javax.crypto.Cipher: java.security.Provider$Service firstService>;
        if $r15 != null goto label4;

        $r16 = r0.<javax.crypto.Cipher: java.util.Iterator serviceIterator>;
        $z0 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label17;

     label4:
        $r17 = r0.<javax.crypto.Cipher: java.security.Provider$Service firstService>;
        if $r17 == null goto label5;

        r7 = r0.<javax.crypto.Cipher: java.security.Provider$Service firstService>;
        r8 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi firstSpi>;
        r0.<javax.crypto.Cipher: java.security.Provider$Service firstService> = null;
        r0.<javax.crypto.Cipher: javax.crypto.CipherSpi firstSpi> = null;
        goto label6;

     label5:
        $r18 = r0.<javax.crypto.Cipher: java.util.Iterator serviceIterator>;
        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();
        r7 = (java.security.Provider$Service) $r19;
        r8 = null;

     label6:
        $z1 = virtualinvoke r7.<java.security.Provider$Service: boolean supportsParameter(java.lang.Object)>(r1);
        if $z1 != 0 goto label7;

        goto label3;

     label7:
        $r20 = virtualinvoke r7.<java.security.Provider$Service: java.security.Provider getProvider()>();
        $z2 = staticinvoke <javax.crypto.JceSecurity: boolean canUseProvider(java.security.Provider)>($r20);
        if $z2 != 0 goto label8;

        goto label3;

     label8:
        $r21 = r0.<javax.crypto.Cipher: java.util.List transforms>;
        r9 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher$Transform getTransform(java.security.Provider$Service,java.util.List)>(r7, $r21);
        if r9 != null goto label9;

        goto label3;

     label9:
        $i2 = virtualinvoke r9.<javax.crypto.Cipher$Transform: int supportsModePadding(java.security.Provider$Service)>(r7);
        if $i2 != 0 goto label10;

        goto label3;

     label10:
        if r8 != null goto label11;

        $r22 = virtualinvoke r7.<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>(null);
        r8 = (javax.crypto.CipherSpi) $r22;

     label11:
        virtualinvoke r9.<javax.crypto.Cipher$Transform: void setModePadding(javax.crypto.CipherSpi)>(r8);
        specialinvoke r0.<javax.crypto.Cipher: void initCryptoPermission()>();
        specialinvoke r0.<javax.crypto.Cipher: void implInit(javax.crypto.CipherSpi,int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>(r8, i0, i1, r1, r2, r3, r4);
        $r23 = virtualinvoke r7.<java.security.Provider$Service: java.security.Provider getProvider()>();
        r0.<javax.crypto.Cipher: java.security.Provider provider> = $r23;
        r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi> = r8;
        r0.<javax.crypto.Cipher: java.security.Provider$Service firstService> = null;
        r0.<javax.crypto.Cipher: java.util.Iterator serviceIterator> = null;
        r0.<javax.crypto.Cipher: java.util.List transforms> = null;

     label12:
        exitmonitor r5;

     label13:
        return;

     label14:
        $r24 := @caughtexception;

     label15:
        r10 = $r24;
        if r6 != null goto label16;

        r6 = r10;

     label16:
        goto label3;

     label17:
        $z3 = r6 instanceof java.security.InvalidKeyException;
        if $z3 == 0 goto label18;

        $r25 = (java.security.InvalidKeyException) r6;
        throw $r25;

     label18:
        $z4 = r6 instanceof java.security.InvalidAlgorithmParameterException;
        if $z4 == 0 goto label19;

        $r26 = (java.security.InvalidAlgorithmParameterException) r6;
        throw $r26;

     label19:
        $z5 = r6 instanceof java.lang.RuntimeException;
        if $z5 == 0 goto label20;

        $r27 = (java.lang.RuntimeException) r6;
        throw $r27;

     label20:
        if r1 == null goto label21;

        $r28 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        $r29 = virtualinvoke $r28.<java.lang.Class: java.lang.String getName()>();
        goto label22;

     label21:
        $r29 = "(null)";

     label22:
        r30 = $r29;
        $r31 = new java.security.InvalidKeyException;
        $r32 = new java.lang.StringBuilder;
        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No installed provider supports this key: ");
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);
        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r31.<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>($r35, r6);
        throw $r31;

     label23:
        $r36 := @caughtexception;
        r11 = $r36;
        exitmonitor r5;

     label24:
        throw r11;

        catch java.lang.Exception from label10 to label12 with label14;
        catch java.lang.Throwable from label0 to label1 with label23;
        catch java.lang.Throwable from label2 to label13 with label23;
        catch java.lang.Throwable from label15 to label24 with label23;
    }

    public final java.security.Provider getProvider()
    {
        javax.crypto.Cipher r0;
        java.security.Provider $r1;

        r0 := @this: javax.crypto.Cipher;
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        $r1 = r0.<javax.crypto.Cipher: java.security.Provider provider>;
        return $r1;
    }

    public final java.lang.String getAlgorithm()
    {
        javax.crypto.Cipher r0;
        java.lang.String $r1;

        r0 := @this: javax.crypto.Cipher;
        $r1 = r0.<javax.crypto.Cipher: java.lang.String transformation>;
        return $r1;
    }

    public final int getBlockSize()
    {
        javax.crypto.Cipher r0;
        javax.crypto.CipherSpi $r1;
        int $i0;

        r0 := @this: javax.crypto.Cipher;
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        $r1 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        $i0 = virtualinvoke $r1.<javax.crypto.CipherSpi: int engineGetBlockSize()>();
        return $i0;
    }

    public final int getOutputSize(int)
    {
        javax.crypto.Cipher r0;
        int i0, $i1;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r1;
        java.lang.IllegalArgumentException $r2;
        javax.crypto.CipherSpi $r3;

        r0 := @this: javax.crypto.Cipher;
        i0 := @parameter0: int;
        $z0 = r0.<javax.crypto.Cipher: boolean initialized>;
        if $z0 != 0 goto label0;

        $z1 = r0 instanceof javax.crypto.NullCipher;
        if $z1 != 0 goto label0;

        $r1 = new java.lang.IllegalStateException;
        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cipher not initialized");
        throw $r1;

     label0:
        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input size must be equal to or greater than zero");
        throw $r2;

     label1:
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        $r3 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        $i1 = virtualinvoke $r3.<javax.crypto.CipherSpi: int engineGetOutputSize(int)>(i0);
        return $i1;
    }

    public final byte[] getIV()
    {
        javax.crypto.Cipher r0;
        javax.crypto.CipherSpi $r1;
        byte[] $r2;

        r0 := @this: javax.crypto.Cipher;
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        $r1 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        $r2 = virtualinvoke $r1.<javax.crypto.CipherSpi: byte[] engineGetIV()>();
        return $r2;
    }

    public final java.security.AlgorithmParameters getParameters()
    {
        javax.crypto.Cipher r0;
        javax.crypto.CipherSpi $r1;
        java.security.AlgorithmParameters $r2;

        r0 := @this: javax.crypto.Cipher;
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        $r1 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        $r2 = virtualinvoke $r1.<javax.crypto.CipherSpi: java.security.AlgorithmParameters engineGetParameters()>();
        return $r2;
    }

    public final javax.crypto.ExemptionMechanism getExemptionMechanism()
    {
        javax.crypto.Cipher r0;
        javax.crypto.ExemptionMechanism $r1;

        r0 := @this: javax.crypto.Cipher;
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        $r1 = r0.<javax.crypto.Cipher: javax.crypto.ExemptionMechanism exmech>;
        return $r1;
    }

    private void checkCryptoPerm(javax.crypto.CipherSpi, java.security.Key) throws java.security.InvalidKeyException
    {
        javax.crypto.Cipher r0;
        javax.crypto.CipherSpi r1;
        java.security.Key r2;
        javax.crypto.CryptoAllPermission $r3;
        java.security.spec.AlgorithmParameterSpec r4;
        java.security.spec.InvalidParameterSpecException r5, $r8;
        javax.crypto.CryptoPermission $r6;
        java.security.AlgorithmParameters $r7;
        java.security.InvalidKeyException $r9, $r10;
        boolean $z0;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: javax.crypto.CipherSpi;
        r2 := @parameter1: java.security.Key;
        $r6 = r0.<javax.crypto.Cipher: javax.crypto.CryptoPermission cryptoPerm>;
        $r3 = <javax.crypto.CryptoAllPermission: javax.crypto.CryptoAllPermission INSTANCE>;
        if $r6 != $r3 goto label0;

        return;

     label0:
        $r7 = virtualinvoke r1.<javax.crypto.CipherSpi: java.security.AlgorithmParameters engineGetParameters()>();
        r4 = specialinvoke r0.<javax.crypto.Cipher: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec(java.security.AlgorithmParameters)>($r7);

     label1:
        goto label3;

     label2:
        $r8 := @caughtexception;
        r5 = $r8;
        $r9 = new java.security.InvalidKeyException;
        specialinvoke $r9.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Unsupported default algorithm parameters");
        throw $r9;

     label3:
        $z0 = specialinvoke r0.<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(r1, r2, r4);
        if $z0 != 0 goto label4;

        $r10 = new java.security.InvalidKeyException;
        specialinvoke $r10.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Illegal key size or default parameters");
        throw $r10;

     label4:
        return;

        catch java.security.spec.InvalidParameterSpecException from label0 to label1 with label2;
    }

    private void checkCryptoPerm(javax.crypto.CipherSpi, java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        javax.crypto.Cipher r0;
        javax.crypto.CipherSpi r1;
        java.security.Key r2;
        java.security.spec.AlgorithmParameterSpec r3;
        javax.crypto.CryptoAllPermission $r4;
        javax.crypto.CryptoPermission $r5;
        boolean $z0, $z1;
        java.security.InvalidKeyException $r6;
        java.security.InvalidAlgorithmParameterException $r7;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: javax.crypto.CipherSpi;
        r2 := @parameter1: java.security.Key;
        r3 := @parameter2: java.security.spec.AlgorithmParameterSpec;
        $r5 = r0.<javax.crypto.Cipher: javax.crypto.CryptoPermission cryptoPerm>;
        $r4 = <javax.crypto.CryptoAllPermission: javax.crypto.CryptoAllPermission INSTANCE>;
        if $r5 != $r4 goto label0;

        return;

     label0:
        $z0 = specialinvoke r0.<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(r1, r2, null);
        if $z0 != 0 goto label1;

        $r6 = new java.security.InvalidKeyException;
        specialinvoke $r6.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Illegal key size");
        throw $r6;

     label1:
        if r3 == null goto label2;

        $z1 = specialinvoke r0.<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(r1, r2, r3);
        if $z1 != 0 goto label2;

        $r7 = new java.security.InvalidAlgorithmParameterException;
        specialinvoke $r7.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("Illegal parameters");
        throw $r7;

     label2:
        return;
    }

    private void checkCryptoPerm(javax.crypto.CipherSpi, java.security.Key, java.security.AlgorithmParameters) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        javax.crypto.Cipher r0;
        javax.crypto.CipherSpi r1;
        java.security.Key r2;
        java.security.AlgorithmParameters r3;
        javax.crypto.CryptoAllPermission $r4;
        java.security.spec.AlgorithmParameterSpec r5;
        java.security.spec.InvalidParameterSpecException r6, $r8;
        javax.crypto.CryptoPermission $r7;
        java.security.InvalidAlgorithmParameterException $r9;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: javax.crypto.CipherSpi;
        r2 := @parameter1: java.security.Key;
        r3 := @parameter2: java.security.AlgorithmParameters;
        $r7 = r0.<javax.crypto.Cipher: javax.crypto.CryptoPermission cryptoPerm>;
        $r4 = <javax.crypto.CryptoAllPermission: javax.crypto.CryptoAllPermission INSTANCE>;
        if $r7 != $r4 goto label0;

        return;

     label0:
        r5 = specialinvoke r0.<javax.crypto.Cipher: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec(java.security.AlgorithmParameters)>(r3);

     label1:
        goto label3;

     label2:
        $r8 := @caughtexception;
        r6 = $r8;
        $r9 = new java.security.InvalidAlgorithmParameterException;
        specialinvoke $r9.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("Failed to retrieve algorithm parameter specification");
        throw $r9;

     label3:
        specialinvoke r0.<javax.crypto.Cipher: void checkCryptoPerm(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(r1, r2, r5);
        return;

        catch java.security.spec.InvalidParameterSpecException from label0 to label1 with label2;
    }

    private boolean passCryptoPermCheck(javax.crypto.CipherSpi, java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException
    {
        javax.crypto.Cipher r0;
        javax.crypto.CipherSpi r1;
        java.security.Key r2;
        java.security.spec.AlgorithmParameterSpec r3;
        java.lang.String r4, r5, $r9, $r10, $r20, $r25, $r32, $r35, $r42, $r45;
        int i0, i1;
        javax.crypto.CryptoPermission r6, $r8, $r11, $r12, $r18;
        javax.crypto.ExemptionMechanismException r7, $r36;
        boolean $z0, $z1, $z2;
        sun.security.util.Debug $r13, $r14, $r15, $r21, $r28, $r29, $r37, $r38;
        java.lang.StringBuilder $r16, $r17, $r19, $r22, $r23, $r24, $r30, $r33, $r34, $r39, $r40, $r43, $r44;
        javax.crypto.ExemptionMechanism $r26, $r27, $r31, $r41;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: javax.crypto.CipherSpi;
        r2 := @parameter1: java.security.Key;
        r3 := @parameter2: java.security.spec.AlgorithmParameterSpec;
        $r8 = r0.<javax.crypto.Cipher: javax.crypto.CryptoPermission cryptoPerm>;
        r4 = virtualinvoke $r8.<javax.crypto.CryptoPermission: java.lang.String getExemptionMechanism()>();
        i0 = virtualinvoke r1.<javax.crypto.CipherSpi: int engineGetKeySize(java.security.Key)>(r2);
        $r9 = r0.<javax.crypto.Cipher: java.lang.String transformation>;
        i1 = virtualinvoke $r9.<java.lang.String: int indexOf(int)>(47);
        if i1 == -1 goto label0;

        $r10 = r0.<javax.crypto.Cipher: java.lang.String transformation>;
        r5 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int,int)>(0, i1);
        goto label1;

     label0:
        r5 = r0.<javax.crypto.Cipher: java.lang.String transformation>;

     label1:
        $r11 = new javax.crypto.CryptoPermission;
        specialinvoke $r11.<javax.crypto.CryptoPermission: void <init>(java.lang.String,int,java.security.spec.AlgorithmParameterSpec,java.lang.String)>(r5, i0, r3, r4);
        r6 = $r11;
        $r12 = r0.<javax.crypto.Cipher: javax.crypto.CryptoPermission cryptoPerm>;
        $z0 = virtualinvoke $r12.<javax.crypto.CryptoPermission: boolean implies(java.security.Permission)>(r6);
        if $z0 != 0 goto label3;

        $r13 = <javax.crypto.Cipher: sun.security.util.Debug debug>;
        if $r13 == null goto label2;

        $r14 = <javax.crypto.Cipher: sun.security.util.Debug debug>;
        virtualinvoke $r14.<sun.security.util.Debug: void println(java.lang.String)>("Crypto Permission check failed");
        $r15 = <javax.crypto.Cipher: sun.security.util.Debug debug>;
        $r16 = new java.lang.StringBuilder;
        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("granted: ");
        $r18 = r0.<javax.crypto.Cipher: javax.crypto.CryptoPermission cryptoPerm>;
        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r15.<sun.security.util.Debug: void println(java.lang.String)>($r20);
        $r21 = <javax.crypto.Cipher: sun.security.util.Debug debug>;
        $r22 = new java.lang.StringBuilder;
        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requesting: ");
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r21.<sun.security.util.Debug: void println(java.lang.String)>($r25);

     label2:
        return 0;

     label3:
        $r26 = r0.<javax.crypto.Cipher: javax.crypto.ExemptionMechanism exmech>;
        if $r26 != null goto label4;

        return 1;

     label4:
        $r27 = r0.<javax.crypto.Cipher: javax.crypto.ExemptionMechanism exmech>;
        $z1 = virtualinvoke $r27.<javax.crypto.ExemptionMechanism: boolean isCryptoAllowed(java.security.Key)>(r2);
        if $z1 != 0 goto label7;

        $r28 = <javax.crypto.Cipher: sun.security.util.Debug debug>;
        if $r28 == null goto label5;

        $r29 = <javax.crypto.Cipher: sun.security.util.Debug debug>;
        $r30 = new java.lang.StringBuilder;
        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
        $r31 = r0.<javax.crypto.Cipher: javax.crypto.ExemptionMechanism exmech>;
        $r32 = virtualinvoke $r31.<javax.crypto.ExemptionMechanism: java.lang.String getName()>();
        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isn\'t enforced");
        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r29.<sun.security.util.Debug: void println(java.lang.String)>($r35);

     label5:
        $z2 = 0;

     label6:
        return $z2;

     label7:
        goto label10;

     label8:
        $r36 := @caughtexception;
        r7 = $r36;
        $r37 = <javax.crypto.Cipher: sun.security.util.Debug debug>;
        if $r37 == null goto label9;

        $r38 = <javax.crypto.Cipher: sun.security.util.Debug debug>;
        $r39 = new java.lang.StringBuilder;
        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();
        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot determine whether ");
        $r41 = r0.<javax.crypto.Cipher: javax.crypto.ExemptionMechanism exmech>;
        $r42 = virtualinvoke $r41.<javax.crypto.ExemptionMechanism: java.lang.String getName()>();
        $r43 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);
        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been enforced");
        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r38.<sun.security.util.Debug: void println(java.lang.String)>($r45);
        virtualinvoke r7.<javax.crypto.ExemptionMechanismException: void printStackTrace()>();

     label9:
        return 0;

     label10:
        return 1;

        catch javax.crypto.ExemptionMechanismException from label4 to label6 with label8;
    }

    private static void checkOpmode(int)
    {
        int i0;
        java.security.InvalidParameterException $r0;

        i0 := @parameter0: int;
        if i0 < 1 goto label0;

        if i0 <= 4 goto label1;

     label0:
        $r0 = new java.security.InvalidParameterException;
        specialinvoke $r0.<java.security.InvalidParameterException: void <init>(java.lang.String)>("Invalid operation mode");
        throw $r0;

     label1:
        return;
    }

    public final void init(int, java.security.Key) throws java.security.InvalidKeyException
    {
        javax.crypto.Cipher r0;
        int i0;
        java.security.Key r1;
        java.security.SecureRandom $r2;

        r0 := @this: javax.crypto.Cipher;
        i0 := @parameter0: int;
        r1 := @parameter1: java.security.Key;
        $r2 = <javax.crypto.JceSecurity: java.security.SecureRandom RANDOM>;
        virtualinvoke r0.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(i0, r1, $r2);
        return;
    }

    public final void init(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        javax.crypto.Cipher r0;
        int i0;
        java.security.Key r1;
        java.security.SecureRandom r2;
        java.security.InvalidAlgorithmParameterException r3, $r7;
        javax.crypto.CipherSpi $r4, $r5, $r6;
        java.security.InvalidKeyException $r8;

        r0 := @this: javax.crypto.Cipher;
        i0 := @parameter0: int;
        r1 := @parameter1: java.security.Key;
        r2 := @parameter2: java.security.SecureRandom;
        r0.<javax.crypto.Cipher: boolean initialized> = 0;
        staticinvoke <javax.crypto.Cipher: void checkOpmode(int)>(i0);
        $r4 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        if $r4 == null goto label0;

        $r5 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        specialinvoke r0.<javax.crypto.Cipher: void checkCryptoPerm(javax.crypto.CipherSpi,java.security.Key)>($r5, r1);
        $r6 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        virtualinvoke $r6.<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.SecureRandom)>(i0, r1, r2);
        goto label3;

     label0:
        specialinvoke r0.<javax.crypto.Cipher: void chooseProvider(int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>(1, i0, r1, null, null, r2);

     label1:
        goto label3;

     label2:
        $r7 := @caughtexception;
        r3 = $r7;
        $r8 = new java.security.InvalidKeyException;
        specialinvoke $r8.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r3);
        throw $r8;

     label3:
        r0.<javax.crypto.Cipher: boolean initialized> = 1;
        r0.<javax.crypto.Cipher: int opmode> = i0;
        return;

        catch java.security.InvalidAlgorithmParameterException from label0 to label1 with label2;
    }

    public final void init(int, java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        javax.crypto.Cipher r0;
        int i0;
        java.security.Key r1;
        java.security.spec.AlgorithmParameterSpec r2;
        java.security.SecureRandom $r3;

        r0 := @this: javax.crypto.Cipher;
        i0 := @parameter0: int;
        r1 := @parameter1: java.security.Key;
        r2 := @parameter2: java.security.spec.AlgorithmParameterSpec;
        $r3 = <javax.crypto.JceSecurity: java.security.SecureRandom RANDOM>;
        virtualinvoke r0.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(i0, r1, r2, $r3);
        return;
    }

    public final void init(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        javax.crypto.Cipher r0;
        int i0;
        java.security.Key r1;
        java.security.spec.AlgorithmParameterSpec r2;
        java.security.SecureRandom r3;
        javax.crypto.CipherSpi $r4, $r5, $r6;

        r0 := @this: javax.crypto.Cipher;
        i0 := @parameter0: int;
        r1 := @parameter1: java.security.Key;
        r2 := @parameter2: java.security.spec.AlgorithmParameterSpec;
        r3 := @parameter3: java.security.SecureRandom;
        r0.<javax.crypto.Cipher: boolean initialized> = 0;
        staticinvoke <javax.crypto.Cipher: void checkOpmode(int)>(i0);
        $r4 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        if $r4 == null goto label0;

        $r5 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        specialinvoke r0.<javax.crypto.Cipher: void checkCryptoPerm(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)>($r5, r1, r2);
        $r6 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        virtualinvoke $r6.<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(i0, r1, r2, r3);
        goto label1;

     label0:
        specialinvoke r0.<javax.crypto.Cipher: void chooseProvider(int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>(2, i0, r1, r2, null, r3);

     label1:
        r0.<javax.crypto.Cipher: boolean initialized> = 1;
        r0.<javax.crypto.Cipher: int opmode> = i0;
        return;
    }

    public final void init(int, java.security.Key, java.security.AlgorithmParameters) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        javax.crypto.Cipher r0;
        int i0;
        java.security.Key r1;
        java.security.AlgorithmParameters r2;
        java.security.SecureRandom $r3;

        r0 := @this: javax.crypto.Cipher;
        i0 := @parameter0: int;
        r1 := @parameter1: java.security.Key;
        r2 := @parameter2: java.security.AlgorithmParameters;
        $r3 = <javax.crypto.JceSecurity: java.security.SecureRandom RANDOM>;
        virtualinvoke r0.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)>(i0, r1, r2, $r3);
        return;
    }

    public final void init(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        javax.crypto.Cipher r0;
        int i0;
        java.security.Key r1;
        java.security.AlgorithmParameters r2;
        java.security.SecureRandom r3;
        javax.crypto.CipherSpi $r4, $r5, $r6;

        r0 := @this: javax.crypto.Cipher;
        i0 := @parameter0: int;
        r1 := @parameter1: java.security.Key;
        r2 := @parameter2: java.security.AlgorithmParameters;
        r3 := @parameter3: java.security.SecureRandom;
        r0.<javax.crypto.Cipher: boolean initialized> = 0;
        staticinvoke <javax.crypto.Cipher: void checkOpmode(int)>(i0);
        $r4 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        if $r4 == null goto label0;

        $r5 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        specialinvoke r0.<javax.crypto.Cipher: void checkCryptoPerm(javax.crypto.CipherSpi,java.security.Key,java.security.AlgorithmParameters)>($r5, r1, r2);
        $r6 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        virtualinvoke $r6.<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)>(i0, r1, r2, r3);
        goto label1;

     label0:
        specialinvoke r0.<javax.crypto.Cipher: void chooseProvider(int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>(3, i0, r1, null, r2, r3);

     label1:
        r0.<javax.crypto.Cipher: boolean initialized> = 1;
        r0.<javax.crypto.Cipher: int opmode> = i0;
        return;
    }

    public final void init(int, java.security.cert.Certificate) throws java.security.InvalidKeyException
    {
        javax.crypto.Cipher r0;
        int i0;
        java.security.cert.Certificate r1;
        java.security.SecureRandom $r2;

        r0 := @this: javax.crypto.Cipher;
        i0 := @parameter0: int;
        r1 := @parameter1: java.security.cert.Certificate;
        $r2 = <javax.crypto.JceSecurity: java.security.SecureRandom RANDOM>;
        virtualinvoke r0.<javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom)>(i0, r1, $r2);
        return;
    }

    public final void init(int, java.security.cert.Certificate, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        javax.crypto.Cipher r0;
        int i0, $i1, $i2;
        java.security.cert.Certificate r1;
        java.security.SecureRandom r2;
        java.security.cert.X509Certificate r3;
        java.util.Set r4;
        boolean[] r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.security.InvalidKeyException $r6, $r14;
        java.security.PublicKey $r7, r8;
        javax.crypto.CipherSpi $r9, $r10, $r11;
        java.security.InvalidAlgorithmParameterException $r12, r13;

        r0 := @this: javax.crypto.Cipher;
        i0 := @parameter0: int;
        r1 := @parameter1: java.security.cert.Certificate;
        r2 := @parameter2: java.security.SecureRandom;
        r0.<javax.crypto.Cipher: boolean initialized> = 0;
        staticinvoke <javax.crypto.Cipher: void checkOpmode(int)>(i0);
        $z0 = r1 instanceof java.security.cert.X509Certificate;
        if $z0 == 0 goto label2;

        r3 = (java.security.cert.X509Certificate) r1;
        r4 = virtualinvoke r3.<java.security.cert.X509Certificate: java.util.Set getCriticalExtensionOIDs()>();
        if r4 == null goto label2;

        $z1 = interfaceinvoke r4.<java.util.Set: boolean isEmpty()>();
        if $z1 != 0 goto label2;

        $z2 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("2.5.29.15");
        if $z2 == 0 goto label2;

        r5 = virtualinvoke r3.<java.security.cert.X509Certificate: boolean[] getKeyUsage()>();
        if r5 == null goto label2;

        if i0 != 1 goto label0;

        $i1 = lengthof r5;
        if $i1 <= 3 goto label0;

        $z3 = r5[3];
        if $z3 == 0 goto label1;

     label0:
        if i0 != 3 goto label2;

        $i2 = lengthof r5;
        if $i2 <= 2 goto label2;

        $z4 = r5[2];
        if $z4 != 0 goto label2;

     label1:
        $r6 = new java.security.InvalidKeyException;
        specialinvoke $r6.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Wrong key usage");
        throw $r6;

     label2:
        if r1 != null goto label3;

        $r7 = null;
        goto label4;

     label3:
        $r7 = virtualinvoke r1.<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>();

     label4:
        r8 = $r7;
        $r9 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        if $r9 == null goto label5;

        $r10 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        specialinvoke r0.<javax.crypto.Cipher: void checkCryptoPerm(javax.crypto.CipherSpi,java.security.Key)>($r10, r8);
        $r11 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        virtualinvoke $r11.<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.SecureRandom)>(i0, r8, r2);
        goto label8;

     label5:
        specialinvoke r0.<javax.crypto.Cipher: void chooseProvider(int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)>(4, i0, r8, null, null, r2);

     label6:
        goto label8;

     label7:
        $r12 := @caughtexception;
        r13 = $r12;
        $r14 = new java.security.InvalidKeyException;
        specialinvoke $r14.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r13);
        throw $r14;

     label8:
        r0.<javax.crypto.Cipher: boolean initialized> = 1;
        r0.<javax.crypto.Cipher: int opmode> = i0;
        return;

        catch java.security.InvalidAlgorithmParameterException from label5 to label6 with label7;
    }

    private void checkCipherState()
    {
        javax.crypto.Cipher r0;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r1, $r2;
        int $i0, $i1;

        r0 := @this: javax.crypto.Cipher;
        $z0 = r0 instanceof javax.crypto.NullCipher;
        if $z0 != 0 goto label1;

        $z1 = r0.<javax.crypto.Cipher: boolean initialized>;
        if $z1 != 0 goto label0;

        $r1 = new java.lang.IllegalStateException;
        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cipher not initialized");
        throw $r1;

     label0:
        $i0 = r0.<javax.crypto.Cipher: int opmode>;
        if $i0 == 1 goto label1;

        $i1 = r0.<javax.crypto.Cipher: int opmode>;
        if $i1 == 2 goto label1;

        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cipher not initialized for encryption/decryption");
        throw $r2;

     label1:
        return;
    }

    public final byte[] update(byte[])
    {
        javax.crypto.Cipher r0;
        byte[] r1, $r4;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1;
        javax.crypto.CipherSpi $r3;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: byte[];
        specialinvoke r0.<javax.crypto.Cipher: void checkCipherState()>();
        if r1 != null goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null input buffer");
        throw $r2;

     label0:
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        $i0 = lengthof r1;
        if $i0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        $i1 = lengthof r1;
        $r4 = virtualinvoke $r3.<javax.crypto.CipherSpi: byte[] engineUpdate(byte[],int,int)>(r1, 0, $i1);
        return $r4;
    }

    public final byte[] update(byte[], int, int)
    {
        javax.crypto.Cipher r0;
        byte[] r1, $r4;
        int i0, i1, $i2, $i3;
        java.lang.IllegalArgumentException $r2;
        javax.crypto.CipherSpi $r3;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<javax.crypto.Cipher: void checkCipherState()>();
        if r1 == null goto label0;

        if i0 < 0 goto label0;

        $i2 = lengthof r1;
        $i3 = $i2 - i0;
        if i1 > $i3 goto label0;

        if i1 >= 0 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad arguments");
        throw $r2;

     label1:
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        if i1 != 0 goto label2;

        return null;

     label2:
        $r3 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        $r4 = virtualinvoke $r3.<javax.crypto.CipherSpi: byte[] engineUpdate(byte[],int,int)>(r1, i0, i1);
        return $r4;
    }

    public final int update(byte[], int, int, byte[]) throws javax.crypto.ShortBufferException
    {
        javax.crypto.Cipher r0;
        byte[] r1, r2;
        int i0, i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r3;
        javax.crypto.CipherSpi $r4;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: byte[];
        specialinvoke r0.<javax.crypto.Cipher: void checkCipherState()>();
        if r1 == null goto label0;

        if i0 < 0 goto label0;

        $i2 = lengthof r1;
        $i3 = $i2 - i0;
        if i1 > $i3 goto label0;

        if i1 >= 0 goto label1;

     label0:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad arguments");
        throw $r3;

     label1:
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        if i1 != 0 goto label2;

        return 0;

     label2:
        $r4 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        $i4 = virtualinvoke $r4.<javax.crypto.CipherSpi: int engineUpdate(byte[],int,int,byte[],int)>(r1, i0, i1, r2, 0);
        return $i4;
    }

    public final int update(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException
    {
        javax.crypto.Cipher r0;
        byte[] r1, r2;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r3;
        javax.crypto.CipherSpi $r4;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: byte[];
        i2 := @parameter4: int;
        specialinvoke r0.<javax.crypto.Cipher: void checkCipherState()>();
        if r1 == null goto label0;

        if i0 < 0 goto label0;

        $i3 = lengthof r1;
        $i4 = $i3 - i0;
        if i1 > $i4 goto label0;

        if i1 < 0 goto label0;

        if i2 >= 0 goto label1;

     label0:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad arguments");
        throw $r3;

     label1:
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        if i1 != 0 goto label2;

        return 0;

     label2:
        $r4 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        $i5 = virtualinvoke $r4.<javax.crypto.CipherSpi: int engineUpdate(byte[],int,int,byte[],int)>(r1, i0, i1, r2, i2);
        return $i5;
    }

    public final int update(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.crypto.ShortBufferException
    {
        javax.crypto.Cipher r0;
        java.nio.ByteBuffer r1, r2;
        java.lang.IllegalArgumentException $r3, $r4;
        boolean $z0;
        java.nio.ReadOnlyBufferException $r5;
        javax.crypto.CipherSpi $r6;
        int $i0;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: java.nio.ByteBuffer;
        r2 := @parameter1: java.nio.ByteBuffer;
        specialinvoke r0.<javax.crypto.Cipher: void checkCipherState()>();
        if r1 == null goto label0;

        if r2 != null goto label1;

     label0:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Buffers must not be null");
        throw $r3;

     label1:
        if r1 != r2 goto label2;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input and output buffers must not be the same object, consider using buffer.duplicate()");
        throw $r4;

     label2:
        $z0 = virtualinvoke r2.<java.nio.ByteBuffer: boolean isReadOnly()>();
        if $z0 == 0 goto label3;

        $r5 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r5.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r5;

     label3:
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        $r6 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        $i0 = virtualinvoke $r6.<javax.crypto.CipherSpi: int engineUpdate(java.nio.ByteBuffer,java.nio.ByteBuffer)>(r1, r2);
        return $i0;
    }

    public final byte[] doFinal() throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        javax.crypto.Cipher r0;
        javax.crypto.CipherSpi $r1;
        byte[] $r2;

        r0 := @this: javax.crypto.Cipher;
        specialinvoke r0.<javax.crypto.Cipher: void checkCipherState()>();
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        $r1 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        $r2 = virtualinvoke $r1.<javax.crypto.CipherSpi: byte[] engineDoFinal(byte[],int,int)>(null, 0, 0);
        return $r2;
    }

    public final int doFinal(byte[], int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.ShortBufferException, javax.crypto.BadPaddingException
    {
        javax.crypto.Cipher r0;
        byte[] r1;
        int i0, $i1;
        java.lang.IllegalArgumentException $r2;
        javax.crypto.CipherSpi $r3;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        specialinvoke r0.<javax.crypto.Cipher: void checkCipherState()>();
        if r1 == null goto label0;

        if i0 >= 0 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad arguments");
        throw $r2;

     label1:
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        $r3 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        $i1 = virtualinvoke $r3.<javax.crypto.CipherSpi: int engineDoFinal(byte[],int,int,byte[],int)>(null, 0, 0, r1, i0);
        return $i1;
    }

    public final byte[] doFinal(byte[]) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        javax.crypto.Cipher r0;
        byte[] r1, $r4;
        java.lang.IllegalArgumentException $r2;
        javax.crypto.CipherSpi $r3;
        int $i0;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: byte[];
        specialinvoke r0.<javax.crypto.Cipher: void checkCipherState()>();
        if r1 != null goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null input buffer");
        throw $r2;

     label0:
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        $r3 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        $i0 = lengthof r1;
        $r4 = virtualinvoke $r3.<javax.crypto.CipherSpi: byte[] engineDoFinal(byte[],int,int)>(r1, 0, $i0);
        return $r4;
    }

    public final byte[] doFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        javax.crypto.Cipher r0;
        byte[] r1, $r4;
        int i0, i1, $i2, $i3;
        java.lang.IllegalArgumentException $r2;
        javax.crypto.CipherSpi $r3;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<javax.crypto.Cipher: void checkCipherState()>();
        if r1 == null goto label0;

        if i0 < 0 goto label0;

        $i2 = lengthof r1;
        $i3 = $i2 - i0;
        if i1 > $i3 goto label0;

        if i1 >= 0 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad arguments");
        throw $r2;

     label1:
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        $r3 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        $r4 = virtualinvoke $r3.<javax.crypto.CipherSpi: byte[] engineDoFinal(byte[],int,int)>(r1, i0, i1);
        return $r4;
    }

    public final int doFinal(byte[], int, int, byte[]) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        javax.crypto.Cipher r0;
        byte[] r1, r2;
        int i0, i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r3;
        javax.crypto.CipherSpi $r4;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: byte[];
        specialinvoke r0.<javax.crypto.Cipher: void checkCipherState()>();
        if r1 == null goto label0;

        if i0 < 0 goto label0;

        $i2 = lengthof r1;
        $i3 = $i2 - i0;
        if i1 > $i3 goto label0;

        if i1 >= 0 goto label1;

     label0:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad arguments");
        throw $r3;

     label1:
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        $r4 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        $i4 = virtualinvoke $r4.<javax.crypto.CipherSpi: int engineDoFinal(byte[],int,int,byte[],int)>(r1, i0, i1, r2, 0);
        return $i4;
    }

    public final int doFinal(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        javax.crypto.Cipher r0;
        byte[] r1, r2;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r3;
        javax.crypto.CipherSpi $r4;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r2 := @parameter3: byte[];
        i2 := @parameter4: int;
        specialinvoke r0.<javax.crypto.Cipher: void checkCipherState()>();
        if r1 == null goto label0;

        if i0 < 0 goto label0;

        $i3 = lengthof r1;
        $i4 = $i3 - i0;
        if i1 > $i4 goto label0;

        if i1 < 0 goto label0;

        if i2 >= 0 goto label1;

     label0:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad arguments");
        throw $r3;

     label1:
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        $r4 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        $i5 = virtualinvoke $r4.<javax.crypto.CipherSpi: int engineDoFinal(byte[],int,int,byte[],int)>(r1, i0, i1, r2, i2);
        return $i5;
    }

    public final int doFinal(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        javax.crypto.Cipher r0;
        java.nio.ByteBuffer r1, r2;
        java.lang.IllegalArgumentException $r3, $r4;
        boolean $z0;
        java.nio.ReadOnlyBufferException $r5;
        javax.crypto.CipherSpi $r6;
        int $i0;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: java.nio.ByteBuffer;
        r2 := @parameter1: java.nio.ByteBuffer;
        specialinvoke r0.<javax.crypto.Cipher: void checkCipherState()>();
        if r1 == null goto label0;

        if r2 != null goto label1;

     label0:
        $r3 = new java.lang.IllegalArgumentException;
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Buffers must not be null");
        throw $r3;

     label1:
        if r1 != r2 goto label2;

        $r4 = new java.lang.IllegalArgumentException;
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input and output buffers must not be the same object, consider using buffer.duplicate()");
        throw $r4;

     label2:
        $z0 = virtualinvoke r2.<java.nio.ByteBuffer: boolean isReadOnly()>();
        if $z0 == 0 goto label3;

        $r5 = new java.nio.ReadOnlyBufferException;
        specialinvoke $r5.<java.nio.ReadOnlyBufferException: void <init>()>();
        throw $r5;

     label3:
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        $r6 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        $i0 = virtualinvoke $r6.<javax.crypto.CipherSpi: int engineDoFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)>(r1, r2);
        return $i0;
    }

    public final byte[] wrap(java.security.Key) throws javax.crypto.IllegalBlockSizeException, java.security.InvalidKeyException
    {
        javax.crypto.Cipher r0;
        java.security.Key r1;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r2, $r3;
        int $i0;
        javax.crypto.CipherSpi $r4;
        byte[] $r5;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: java.security.Key;
        $z0 = r0 instanceof javax.crypto.NullCipher;
        if $z0 != 0 goto label1;

        $z1 = r0.<javax.crypto.Cipher: boolean initialized>;
        if $z1 != 0 goto label0;

        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cipher not initialized");
        throw $r2;

     label0:
        $i0 = r0.<javax.crypto.Cipher: int opmode>;
        if $i0 == 3 goto label1;

        $r3 = new java.lang.IllegalStateException;
        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cipher not initialized for wrapping keys");
        throw $r3;

     label1:
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        $r4 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        $r5 = virtualinvoke $r4.<javax.crypto.CipherSpi: byte[] engineWrap(java.security.Key)>(r1);
        return $r5;
    }

    public final java.security.Key unwrap(byte[], java.lang.String, int) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException
    {
        javax.crypto.Cipher r0;
        byte[] r1;
        java.lang.String r2;
        int i0, $i1;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r3, $r4;
        java.security.InvalidParameterException $r5;
        javax.crypto.CipherSpi $r6;
        java.security.Key $r7;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: byte[];
        r2 := @parameter1: java.lang.String;
        i0 := @parameter2: int;
        $z0 = r0 instanceof javax.crypto.NullCipher;
        if $z0 != 0 goto label1;

        $z1 = r0.<javax.crypto.Cipher: boolean initialized>;
        if $z1 != 0 goto label0;

        $r3 = new java.lang.IllegalStateException;
        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cipher not initialized");
        throw $r3;

     label0:
        $i1 = r0.<javax.crypto.Cipher: int opmode>;
        if $i1 == 4 goto label1;

        $r4 = new java.lang.IllegalStateException;
        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cipher not initialized for unwrapping keys");
        throw $r4;

     label1:
        if i0 == 3 goto label2;

        if i0 == 2 goto label2;

        if i0 == 1 goto label2;

        $r5 = new java.security.InvalidParameterException;
        specialinvoke $r5.<java.security.InvalidParameterException: void <init>(java.lang.String)>("Invalid key type");
        throw $r5;

     label2:
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        $r6 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        $r7 = virtualinvoke $r6.<javax.crypto.CipherSpi: java.security.Key engineUnwrap(byte[],java.lang.String,int)>(r1, r2, i0);
        return $r7;
    }

    private java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec(java.security.AlgorithmParameters) throws java.security.spec.InvalidParameterSpecException
    {
        javax.crypto.Cipher r0;
        java.security.AlgorithmParameters r1;
        java.util.Locale $r2;
        java.lang.String r3, $r4;
        boolean $z0, $z1, $z2, $z3;
        java.security.spec.AlgorithmParameterSpec $r5, $r6, $r7, $r8;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: java.security.AlgorithmParameters;
        if r1 != null goto label0;

        return null;

     label0:
        $r4 = virtualinvoke r1.<java.security.AlgorithmParameters: java.lang.String getAlgorithm()>();
        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;
        r3 = virtualinvoke $r4.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);
        $z0 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("RC2");
        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r1.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>(class "javax/crypto/spec/RC2ParameterSpec");
        return $r5;

     label1:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("RC5");
        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r1.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>(class "javax/crypto/spec/RC5ParameterSpec");
        return $r6;

     label2:
        $z2 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("PBE");
        if $z2 == 0 goto label3;

        $r7 = virtualinvoke r1.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>(class "javax/crypto/spec/PBEParameterSpec");
        return $r7;

     label3:
        $z3 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("DES");
        if $z3 == 0 goto label4;

        $r8 = virtualinvoke r1.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>(class "javax/crypto/spec/IvParameterSpec");
        return $r8;

     label4:
        return null;
    }

    private static javax.crypto.CryptoPermission getConfiguredPermission(java.lang.String) throws java.lang.NullPointerException, java.security.NoSuchAlgorithmException
    {
        java.lang.String r0, $r4;
        java.lang.String[] r1;
        java.lang.NullPointerException $r2;
        javax.crypto.JceSecurityManager $r3;
        javax.crypto.CryptoPermission $r5;

        r0 := @parameter0: java.lang.String;
        if r0 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        r1 = staticinvoke <javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)>(r0);
        $r3 = <javax.crypto.JceSecurityManager: javax.crypto.JceSecurityManager INSTANCE>;
        $r4 = r1[0];
        $r5 = virtualinvoke $r3.<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)>($r4);
        return $r5;
    }

    public static final int getMaxAllowedKeyLength(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        javax.crypto.CryptoPermission r1;
        int $i0;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <javax.crypto.Cipher: javax.crypto.CryptoPermission getConfiguredPermission(java.lang.String)>(r0);
        $i0 = virtualinvoke r1.<javax.crypto.CryptoPermission: int getMaxKeySize()>();
        return $i0;
    }

    public static final java.security.spec.AlgorithmParameterSpec getMaxAllowedParameterSpec(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        javax.crypto.CryptoPermission r1;
        java.security.spec.AlgorithmParameterSpec $r2;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <javax.crypto.Cipher: javax.crypto.CryptoPermission getConfiguredPermission(java.lang.String)>(r0);
        $r2 = virtualinvoke r1.<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()>();
        return $r2;
    }

    public final void updateAAD(byte[])
    {
        javax.crypto.Cipher r0;
        byte[] r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: byte[];
        if r1 != null goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("src buffer is null");
        throw $r2;

     label0:
        $i0 = lengthof r1;
        virtualinvoke r0.<javax.crypto.Cipher: void updateAAD(byte[],int,int)>(r1, 0, $i0);
        return;
    }

    public final void updateAAD(byte[], int, int)
    {
        javax.crypto.Cipher r0;
        byte[] r1;
        int i0, i1, $i2, $i3;
        java.lang.IllegalArgumentException $r2;
        javax.crypto.CipherSpi $r3;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<javax.crypto.Cipher: void checkCipherState()>();
        if r1 == null goto label0;

        if i0 < 0 goto label0;

        if i1 < 0 goto label0;

        $i2 = i1 + i0;
        $i3 = lengthof r1;
        if $i2 <= $i3 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad arguments");
        throw $r2;

     label1:
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        if i1 != 0 goto label2;

        return;

     label2:
        $r3 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        virtualinvoke $r3.<javax.crypto.CipherSpi: void engineUpdateAAD(byte[],int,int)>(r1, i0, i1);
        return;
    }

    public final void updateAAD(java.nio.ByteBuffer)
    {
        javax.crypto.Cipher r0;
        java.nio.ByteBuffer r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;
        javax.crypto.CipherSpi $r3;

        r0 := @this: javax.crypto.Cipher;
        r1 := @parameter0: java.nio.ByteBuffer;
        specialinvoke r0.<javax.crypto.Cipher: void checkCipherState()>();
        if r1 != null goto label0;

        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("src ByteBuffer is null");
        throw $r2;

     label0:
        virtualinvoke r0.<javax.crypto.Cipher: void chooseFirstProvider()>();
        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();
        if $i0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spi>;
        virtualinvoke $r3.<javax.crypto.CipherSpi: void engineUpdateAAD(java.nio.ByteBuffer)>(r1);
        return;
    }

    static void <clinit>()
    {
        sun.security.util.Debug $r0;

        $r0 = staticinvoke <sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String,java.lang.String)>("jca", "Cipher");
        <javax.crypto.Cipher: sun.security.util.Debug debug> = $r0;
        <javax.crypto.Cipher: int warnCount> = 10;
        return;
    }
}
