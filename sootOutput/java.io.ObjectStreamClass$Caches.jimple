class java.io.ObjectStreamClass$Caches extends java.lang.Object
{
    static final java.util.concurrent.ConcurrentMap localDescs;
    static final java.util.concurrent.ConcurrentMap reflectors;
    private static final java.lang.ref.ReferenceQueue localDescsQueue;
    private static final java.lang.ref.ReferenceQueue reflectorsQueue;

    private void <init>()
    {
        java.io.ObjectStreamClass$Caches r0;

        r0 := @this: java.io.ObjectStreamClass$Caches;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    static java.lang.ref.ReferenceQueue access$200()
    {
        java.lang.ref.ReferenceQueue $r0;

        $r0 = <java.io.ObjectStreamClass$Caches: java.lang.ref.ReferenceQueue localDescsQueue>;
        return $r0;
    }

    static java.lang.ref.ReferenceQueue access$2600()
    {
        java.lang.ref.ReferenceQueue $r0;

        $r0 = <java.io.ObjectStreamClass$Caches: java.lang.ref.ReferenceQueue reflectorsQueue>;
        return $r0;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0, $r1;
        java.lang.ref.ReferenceQueue $r2, $r3;

        $r0 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
        <java.io.ObjectStreamClass$Caches: java.util.concurrent.ConcurrentMap localDescs> = $r0;
        $r1 = new java.util.concurrent.ConcurrentHashMap;
        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
        <java.io.ObjectStreamClass$Caches: java.util.concurrent.ConcurrentMap reflectors> = $r1;
        $r2 = new java.lang.ref.ReferenceQueue;
        specialinvoke $r2.<java.lang.ref.ReferenceQueue: void <init>()>();
        <java.io.ObjectStreamClass$Caches: java.lang.ref.ReferenceQueue localDescsQueue> = $r2;
        $r3 = new java.lang.ref.ReferenceQueue;
        specialinvoke $r3.<java.lang.ref.ReferenceQueue: void <init>()>();
        <java.io.ObjectStreamClass$Caches: java.lang.ref.ReferenceQueue reflectorsQueue> = $r3;
        return;
    }
}
