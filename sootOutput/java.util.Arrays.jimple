public class java.util.Arrays extends java.lang.Object
{
    private static final int INSERTIONSORT_THRESHOLD;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        java.util.Arrays r0;

        r0 := @this: java.util.Arrays;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static void sort(int[])
    {
        int[] r0;

        r0 := @parameter0: int[];
        staticinvoke <java.util.DualPivotQuicksort: void sort(int[])>(r0);
        return;
    }

    public static void sort(int[], int, int)
    {
        int[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: int[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i2, i0, i1);
        $i3 = i1 - 1;
        staticinvoke <java.util.DualPivotQuicksort: void sort(int[],int,int)>(r0, i0, $i3);
        return;
    }

    public static void sort(long[])
    {
        long[] r0;

        r0 := @parameter0: long[];
        staticinvoke <java.util.DualPivotQuicksort: void sort(long[])>(r0);
        return;
    }

    public static void sort(long[], int, int)
    {
        long[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: long[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i2, i0, i1);
        $i3 = i1 - 1;
        staticinvoke <java.util.DualPivotQuicksort: void sort(long[],int,int)>(r0, i0, $i3);
        return;
    }

    public static void sort(short[])
    {
        short[] r0;

        r0 := @parameter0: short[];
        staticinvoke <java.util.DualPivotQuicksort: void sort(short[])>(r0);
        return;
    }

    public static void sort(short[], int, int)
    {
        short[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: short[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i2, i0, i1);
        $i3 = i1 - 1;
        staticinvoke <java.util.DualPivotQuicksort: void sort(short[],int,int)>(r0, i0, $i3);
        return;
    }

    public static void sort(char[])
    {
        char[] r0;

        r0 := @parameter0: char[];
        staticinvoke <java.util.DualPivotQuicksort: void sort(char[])>(r0);
        return;
    }

    public static void sort(char[], int, int)
    {
        char[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i2, i0, i1);
        $i3 = i1 - 1;
        staticinvoke <java.util.DualPivotQuicksort: void sort(char[],int,int)>(r0, i0, $i3);
        return;
    }

    public static void sort(byte[])
    {
        byte[] r0;

        r0 := @parameter0: byte[];
        staticinvoke <java.util.DualPivotQuicksort: void sort(byte[])>(r0);
        return;
    }

    public static void sort(byte[], int, int)
    {
        byte[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i2, i0, i1);
        $i3 = i1 - 1;
        staticinvoke <java.util.DualPivotQuicksort: void sort(byte[],int,int)>(r0, i0, $i3);
        return;
    }

    public static void sort(float[])
    {
        float[] r0;

        r0 := @parameter0: float[];
        staticinvoke <java.util.DualPivotQuicksort: void sort(float[])>(r0);
        return;
    }

    public static void sort(float[], int, int)
    {
        float[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: float[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i2, i0, i1);
        $i3 = i1 - 1;
        staticinvoke <java.util.DualPivotQuicksort: void sort(float[],int,int)>(r0, i0, $i3);
        return;
    }

    public static void sort(double[])
    {
        double[] r0;

        r0 := @parameter0: double[];
        staticinvoke <java.util.DualPivotQuicksort: void sort(double[])>(r0);
        return;
    }

    public static void sort(double[], int, int)
    {
        double[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: double[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i2, i0, i1);
        $i3 = i1 - 1;
        staticinvoke <java.util.DualPivotQuicksort: void sort(double[],int,int)>(r0, i0, $i3);
        return;
    }

    public static void sort(java.lang.Object[])
    {
        java.lang.Object[] r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];
        $z0 = staticinvoke <java.util.Arrays$LegacyMergeSort: boolean access$000()>();
        if $z0 == 0 goto label0;

        staticinvoke <java.util.Arrays: void legacyMergeSort(java.lang.Object[])>(r0);
        goto label1;

     label0:
        staticinvoke <java.util.ComparableTimSort: void sort(java.lang.Object[])>(r0);

     label1:
        return;
    }

    private static void legacyMergeSort(java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        java.lang.Object $r2;
        int $i0;

        r0 := @parameter0: java.lang.Object[];
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        r1 = (java.lang.Object[]) $r2;
        $i0 = lengthof r0;
        staticinvoke <java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)>(r1, r0, 0, $i0, 0);
        return;
    }

    public static void sort(java.lang.Object[], int, int)
    {
        java.lang.Object[] r0;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $z0 = staticinvoke <java.util.Arrays$LegacyMergeSort: boolean access$000()>();
        if $z0 == 0 goto label0;

        staticinvoke <java.util.Arrays: void legacyMergeSort(java.lang.Object[],int,int)>(r0, i0, i1);
        goto label1;

     label0:
        staticinvoke <java.util.ComparableTimSort: void sort(java.lang.Object[],int,int)>(r0, i0, i1);

     label1:
        return;
    }

    private static void legacyMergeSort(java.lang.Object[], int, int)
    {
        java.lang.Object[] r0, r1;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $i2 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i2, i0, i1);
        r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>(r0, i0, i1);
        $i3 = neg i0;
        staticinvoke <java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)>(r1, r0, i0, i1, $i3);
        return;
    }

    private static void mergeSort(java.lang.Object[], java.lang.Object[], int, int, int)
    {
        java.lang.Object[] r0, r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, i13, i14, i15, i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.lang.Object $r2, $r4, $r5, $r7, $r8, $r10, $r11, $r12;
        java.lang.Comparable $r3, $r6, $r9;

        r0 := @parameter0: java.lang.Object[];
        r1 := @parameter1: java.lang.Object[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        i2 := @parameter4: int;
        i3 = i1 - i0;
        if i3 >= 7 goto label4;

        i4 = i0;

     label0:
        if i4 >= i1 goto label3;

        i5 = i4;

     label1:
        if i5 <= i0 goto label2;

        $i10 = i5 - 1;
        $r2 = r1[$i10];
        $r3 = (java.lang.Comparable) $r2;
        $r4 = r1[i5];
        $i11 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4);
        if $i11 <= 0 goto label2;

        $i12 = i5 - 1;
        staticinvoke <java.util.Arrays: void swap(java.lang.Object[],int,int)>(r1, i5, $i12);
        i5 = i5 + -1;
        goto label1;

     label2:
        i4 = i4 + 1;
        goto label0;

     label3:
        return;

     label4:
        i13 = i0;
        i14 = i1;
        i15 = i0 + i2;
        i16 = i1 + i2;
        $i17 = i15 + i16;
        i6 = $i17 >>> 1;
        $i18 = neg i2;
        staticinvoke <java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)>(r1, r0, i15, i6, $i18);
        $i19 = neg i2;
        staticinvoke <java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)>(r1, r0, i6, i16, $i19);
        $i20 = i6 - 1;
        $r5 = r0[$i20];
        $r6 = (java.lang.Comparable) $r5;
        $r7 = r0[i6];
        $i21 = interfaceinvoke $r6.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);
        if $i21 > 0 goto label5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i15, r1, i13, i3);
        return;

     label5:
        i7 = i13;
        i8 = i15;
        i9 = i6;

     label6:
        if i7 >= i14 goto label10;

        if i9 >= i16 goto label7;

        if i8 >= i6 goto label8;

        $r8 = r0[i8];
        $r9 = (java.lang.Comparable) $r8;
        $r10 = r0[i9];
        $i22 = interfaceinvoke $r9.<java.lang.Comparable: int compareTo(java.lang.Object)>($r10);
        if $i22 > 0 goto label8;

     label7:
        $i23 = i8;
        i8 = i8 + 1;
        $r11 = r0[$i23];
        r1[i7] = $r11;
        goto label9;

     label8:
        $i24 = i9;
        i9 = i9 + 1;
        $r12 = r0[$i24];
        r1[i7] = $r12;

     label9:
        i7 = i7 + 1;
        goto label6;

     label10:
        return;
    }

    private static void swap(java.lang.Object[], int, int)
    {
        java.lang.Object[] r0;
        int i0, i1;
        java.lang.Object r1, $r2;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 = r0[i0];
        $r2 = r0[i1];
        r0[i0] = $r2;
        r0[i1] = r1;
        return;
    }

    public static void sort(java.lang.Object[], java.util.Comparator)
    {
        java.lang.Object[] r0;
        java.util.Comparator r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];
        r1 := @parameter1: java.util.Comparator;
        $z0 = staticinvoke <java.util.Arrays$LegacyMergeSort: boolean access$000()>();
        if $z0 == 0 goto label0;

        staticinvoke <java.util.Arrays: void legacyMergeSort(java.lang.Object[],java.util.Comparator)>(r0, r1);
        goto label1;

     label0:
        staticinvoke <java.util.TimSort: void sort(java.lang.Object[],java.util.Comparator)>(r0, r1);

     label1:
        return;
    }

    private static void legacyMergeSort(java.lang.Object[], java.util.Comparator)
    {
        java.lang.Object[] r0, r2;
        java.util.Comparator r1;
        java.lang.Object $r3;
        int $i0, $i1;

        r0 := @parameter0: java.lang.Object[];
        r1 := @parameter1: java.util.Comparator;
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();
        r2 = (java.lang.Object[]) $r3;
        if r1 != null goto label0;

        $i0 = lengthof r0;
        staticinvoke <java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)>(r2, r0, 0, $i0, 0);
        goto label1;

     label0:
        $i1 = lengthof r0;
        staticinvoke <java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int,java.util.Comparator)>(r2, r0, 0, $i1, 0, r1);

     label1:
        return;
    }

    public static void sort(java.lang.Object[], int, int, java.util.Comparator)
    {
        java.lang.Object[] r0;
        int i0, i1;
        java.util.Comparator r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 := @parameter3: java.util.Comparator;
        $z0 = staticinvoke <java.util.Arrays$LegacyMergeSort: boolean access$000()>();
        if $z0 == 0 goto label0;

        staticinvoke <java.util.Arrays: void legacyMergeSort(java.lang.Object[],int,int,java.util.Comparator)>(r0, i0, i1, r1);
        goto label1;

     label0:
        staticinvoke <java.util.TimSort: void sort(java.lang.Object[],int,int,java.util.Comparator)>(r0, i0, i1, r1);

     label1:
        return;
    }

    private static void legacyMergeSort(java.lang.Object[], int, int, java.util.Comparator)
    {
        java.lang.Object[] r0, r2;
        int i0, i1, $i2, $i3, $i4;
        java.util.Comparator r1;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 := @parameter3: java.util.Comparator;
        $i2 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i2, i0, i1);
        r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>(r0, i0, i1);
        if r1 != null goto label0;

        $i3 = neg i0;
        staticinvoke <java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)>(r2, r0, i0, i1, $i3);
        goto label1;

     label0:
        $i4 = neg i0;
        staticinvoke <java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int,java.util.Comparator)>(r2, r0, i0, i1, $i4, r1);

     label1:
        return;
    }

    private static void mergeSort(java.lang.Object[], java.lang.Object[], int, int, int, java.util.Comparator)
    {
        java.lang.Object[] r0, r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, i13, i14, i15, i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.util.Comparator r2;
        java.lang.Object $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @parameter0: java.lang.Object[];
        r1 := @parameter1: java.lang.Object[];
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        i2 := @parameter4: int;
        r2 := @parameter5: java.util.Comparator;
        i3 = i1 - i0;
        if i3 >= 7 goto label4;

        i4 = i0;

     label0:
        if i4 >= i1 goto label3;

        i5 = i4;

     label1:
        if i5 <= i0 goto label2;

        $i10 = i5 - 1;
        $r3 = r1[$i10];
        $r4 = r1[i5];
        $i11 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r4);
        if $i11 <= 0 goto label2;

        $i12 = i5 - 1;
        staticinvoke <java.util.Arrays: void swap(java.lang.Object[],int,int)>(r1, i5, $i12);
        i5 = i5 + -1;
        goto label1;

     label2:
        i4 = i4 + 1;
        goto label0;

     label3:
        return;

     label4:
        i13 = i0;
        i14 = i1;
        i15 = i0 + i2;
        i16 = i1 + i2;
        $i17 = i15 + i16;
        i6 = $i17 >>> 1;
        $i18 = neg i2;
        staticinvoke <java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int,java.util.Comparator)>(r1, r0, i15, i6, $i18, r2);
        $i19 = neg i2;
        staticinvoke <java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int,java.util.Comparator)>(r1, r0, i6, i16, $i19, r2);
        $i20 = i6 - 1;
        $r5 = r0[$i20];
        $r6 = r0[i6];
        $i21 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r5, $r6);
        if $i21 > 0 goto label5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i15, r1, i13, i3);
        return;

     label5:
        i7 = i13;
        i8 = i15;
        i9 = i6;

     label6:
        if i7 >= i14 goto label10;

        if i9 >= i16 goto label7;

        if i8 >= i6 goto label8;

        $r7 = r0[i8];
        $r8 = r0[i9];
        $i22 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r7, $r8);
        if $i22 > 0 goto label8;

     label7:
        $i23 = i8;
        i8 = i8 + 1;
        $r9 = r0[$i23];
        r1[i7] = $r9;
        goto label9;

     label8:
        $i24 = i9;
        i9 = i9 + 1;
        $r10 = r0[$i24];
        r1[i7] = $r10;

     label9:
        i7 = i7 + 1;
        goto label6;

     label10:
        return;
    }

    private static void rangeCheck(int, int, int)
    {
        int i0, i1, i2;
        java.lang.StringBuilder $r0, $r2, $r3, $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r7;
        java.lang.ArrayIndexOutOfBoundsException $r8, $r9;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        if i1 <= i2 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromIndex(");
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") > toIndex(");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r1;

     label0:
        if i1 >= 0 goto label1;

        $r8 = new java.lang.ArrayIndexOutOfBoundsException;
        specialinvoke $r8.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>(i1);
        throw $r8;

     label1:
        if i2 <= i0 goto label2;

        $r9 = new java.lang.ArrayIndexOutOfBoundsException;
        specialinvoke $r9.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>(i2);
        throw $r9;

     label2:
        return;
    }

    public static int binarySearch(long[], long)
    {
        long[] r0;
        long l0;
        int $i1, $i2;

        r0 := @parameter0: long[];
        l0 := @parameter1: long;
        $i1 = lengthof r0;
        $i2 = staticinvoke <java.util.Arrays: int binarySearch0(long[],int,int,long)>(r0, 0, $i1, l0);
        return $i2;
    }

    public static int binarySearch(long[], int, int, long)
    {
        long[] r0;
        int i0, i1, $i3, $i4;
        long l2;

        r0 := @parameter0: long[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        l2 := @parameter3: long;
        $i3 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i3, i0, i1);
        $i4 = staticinvoke <java.util.Arrays: int binarySearch0(long[],int,int,long)>(r0, i0, i1, l2);
        return $i4;
    }

    private static int binarySearch0(long[], int, int, long)
    {
        long[] r0;
        int i0, i1, i3, i4, i5, $i7, $i10, $i11;
        long l2, l6;
        byte $b8, $b9;

        r0 := @parameter0: long[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        l2 := @parameter3: long;
        i3 = i0;
        i4 = i1 - 1;

     label0:
        if i3 > i4 goto label4;

        $i7 = i3 + i4;
        i5 = $i7 >>> 1;
        l6 = r0[i5];
        $b8 = l6 cmp l2;
        if $b8 >= 0 goto label1;

        i3 = i5 + 1;
        goto label3;

     label1:
        $b9 = l6 cmp l2;
        if $b9 <= 0 goto label2;

        i4 = i5 - 1;
        goto label3;

     label2:
        return i5;

     label3:
        goto label0;

     label4:
        $i10 = i3 + 1;
        $i11 = neg $i10;
        return $i11;
    }

    public static int binarySearch(int[], int)
    {
        int[] r0;
        int i0, $i1, $i2;

        r0 := @parameter0: int[];
        i0 := @parameter1: int;
        $i1 = lengthof r0;
        $i2 = staticinvoke <java.util.Arrays: int binarySearch0(int[],int,int,int)>(r0, 0, $i1, i0);
        return $i2;
    }

    public static int binarySearch(int[], int, int, int)
    {
        int[] r0;
        int i0, i1, i2, $i3, $i4;

        r0 := @parameter0: int[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        $i3 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i3, i0, i1);
        $i4 = staticinvoke <java.util.Arrays: int binarySearch0(int[],int,int,int)>(r0, i0, i1, i2);
        return $i4;
    }

    private static int binarySearch0(int[], int, int, int)
    {
        int[] r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9;

        r0 := @parameter0: int[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 = i0;
        i4 = i1 - 1;

     label0:
        if i3 > i4 goto label4;

        $i7 = i3 + i4;
        i5 = $i7 >>> 1;
        i6 = r0[i5];
        if i6 >= i2 goto label1;

        i3 = i5 + 1;
        goto label3;

     label1:
        if i6 <= i2 goto label2;

        i4 = i5 - 1;
        goto label3;

     label2:
        return i5;

     label3:
        goto label0;

     label4:
        $i8 = i3 + 1;
        $i9 = neg $i8;
        return $i9;
    }

    public static int binarySearch(short[], short)
    {
        short[] r0;
        short s0;
        int $i1, $i2;

        r0 := @parameter0: short[];
        s0 := @parameter1: short;
        $i1 = lengthof r0;
        $i2 = staticinvoke <java.util.Arrays: int binarySearch0(short[],int,int,short)>(r0, 0, $i1, s0);
        return $i2;
    }

    public static int binarySearch(short[], int, int, short)
    {
        short[] r0;
        int i0, i1, $i3, $i4;
        short s2;

        r0 := @parameter0: short[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        s2 := @parameter3: short;
        $i3 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i3, i0, i1);
        $i4 = staticinvoke <java.util.Arrays: int binarySearch0(short[],int,int,short)>(r0, i0, i1, s2);
        return $i4;
    }

    private static int binarySearch0(short[], int, int, short)
    {
        short[] r0;
        int i0, i1, i3, i4, i5, $i7, $i8, $i9;
        short s2, s6;

        r0 := @parameter0: short[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        s2 := @parameter3: short;
        i3 = i0;
        i4 = i1 - 1;

     label0:
        if i3 > i4 goto label4;

        $i7 = i3 + i4;
        i5 = $i7 >>> 1;
        s6 = r0[i5];
        if s6 >= s2 goto label1;

        i3 = i5 + 1;
        goto label3;

     label1:
        if s6 <= s2 goto label2;

        i4 = i5 - 1;
        goto label3;

     label2:
        return i5;

     label3:
        goto label0;

     label4:
        $i8 = i3 + 1;
        $i9 = neg $i8;
        return $i9;
    }

    public static int binarySearch(char[], char)
    {
        char[] r0;
        char c0;
        int $i1, $i2;

        r0 := @parameter0: char[];
        c0 := @parameter1: char;
        $i1 = lengthof r0;
        $i2 = staticinvoke <java.util.Arrays: int binarySearch0(char[],int,int,char)>(r0, 0, $i1, c0);
        return $i2;
    }

    public static int binarySearch(char[], int, int, char)
    {
        char[] r0;
        int i0, i1, $i3, $i4;
        char c2;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        c2 := @parameter3: char;
        $i3 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i3, i0, i1);
        $i4 = staticinvoke <java.util.Arrays: int binarySearch0(char[],int,int,char)>(r0, i0, i1, c2);
        return $i4;
    }

    private static int binarySearch0(char[], int, int, char)
    {
        char[] r0;
        int i0, i1, i3, i4, i5, $i7, $i8, $i9;
        char c2, c6;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        c2 := @parameter3: char;
        i3 = i0;
        i4 = i1 - 1;

     label0:
        if i3 > i4 goto label4;

        $i7 = i3 + i4;
        i5 = $i7 >>> 1;
        c6 = r0[i5];
        if c6 >= c2 goto label1;

        i3 = i5 + 1;
        goto label3;

     label1:
        if c6 <= c2 goto label2;

        i4 = i5 - 1;
        goto label3;

     label2:
        return i5;

     label3:
        goto label0;

     label4:
        $i8 = i3 + 1;
        $i9 = neg $i8;
        return $i9;
    }

    public static int binarySearch(byte[], byte)
    {
        byte[] r0;
        byte b0;
        int $i1, $i2;

        r0 := @parameter0: byte[];
        b0 := @parameter1: byte;
        $i1 = lengthof r0;
        $i2 = staticinvoke <java.util.Arrays: int binarySearch0(byte[],int,int,byte)>(r0, 0, $i1, b0);
        return $i2;
    }

    public static int binarySearch(byte[], int, int, byte)
    {
        byte[] r0;
        int i0, i1, $i3, $i4;
        byte b2;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        b2 := @parameter3: byte;
        $i3 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i3, i0, i1);
        $i4 = staticinvoke <java.util.Arrays: int binarySearch0(byte[],int,int,byte)>(r0, i0, i1, b2);
        return $i4;
    }

    private static int binarySearch0(byte[], int, int, byte)
    {
        byte[] r0;
        int i0, i1, i3, i4, i5, $i7, $i8, $i9;
        byte b2, b6;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        b2 := @parameter3: byte;
        i3 = i0;
        i4 = i1 - 1;

     label0:
        if i3 > i4 goto label4;

        $i7 = i3 + i4;
        i5 = $i7 >>> 1;
        b6 = r0[i5];
        if b6 >= b2 goto label1;

        i3 = i5 + 1;
        goto label3;

     label1:
        if b6 <= b2 goto label2;

        i4 = i5 - 1;
        goto label3;

     label2:
        return i5;

     label3:
        goto label0;

     label4:
        $i8 = i3 + 1;
        $i9 = neg $i8;
        return $i9;
    }

    public static int binarySearch(double[], double)
    {
        double[] r0;
        double d0;
        int $i0, $i1;

        r0 := @parameter0: double[];
        d0 := @parameter1: double;
        $i0 = lengthof r0;
        $i1 = staticinvoke <java.util.Arrays: int binarySearch0(double[],int,int,double)>(r0, 0, $i0, d0);
        return $i1;
    }

    public static int binarySearch(double[], int, int, double)
    {
        double[] r0;
        int i0, i1, $i2, $i3;
        double d0;

        r0 := @parameter0: double[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        d0 := @parameter3: double;
        $i2 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i2, i0, i1);
        $i3 = staticinvoke <java.util.Arrays: int binarySearch0(double[],int,int,double)>(r0, i0, i1, d0);
        return $i3;
    }

    private static int binarySearch0(double[], int, int, double)
    {
        double[] r0;
        int i0, i1, i2, i3, i4, $i7, $i12, $i13;
        double d0, d1;
        long l5, l6;
        byte $b8, $b9, $b10, $b11;

        r0 := @parameter0: double[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        d0 := @parameter3: double;
        i2 = i0;
        i3 = i1 - 1;

     label0:
        if i2 > i3 goto label6;

        $i7 = i2 + i3;
        i4 = $i7 >>> 1;
        d1 = r0[i4];
        $b8 = d1 cmpg d0;
        if $b8 >= 0 goto label1;

        i2 = i4 + 1;
        goto label5;

     label1:
        $b9 = d1 cmpl d0;
        if $b9 <= 0 goto label2;

        i3 = i4 - 1;
        goto label5;

     label2:
        l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d1);
        l6 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);
        $b10 = l5 cmp l6;
        if $b10 != 0 goto label3;

        return i4;

     label3:
        $b11 = l5 cmp l6;
        if $b11 >= 0 goto label4;

        i2 = i4 + 1;
        goto label5;

     label4:
        i3 = i4 - 1;

     label5:
        goto label0;

     label6:
        $i12 = i2 + 1;
        $i13 = neg $i12;
        return $i13;
    }

    public static int binarySearch(float[], float)
    {
        float[] r0;
        float f0;
        int $i0, $i1;

        r0 := @parameter0: float[];
        f0 := @parameter1: float;
        $i0 = lengthof r0;
        $i1 = staticinvoke <java.util.Arrays: int binarySearch0(float[],int,int,float)>(r0, 0, $i0, f0);
        return $i1;
    }

    public static int binarySearch(float[], int, int, float)
    {
        float[] r0;
        int i0, i1, $i2, $i3;
        float f0;

        r0 := @parameter0: float[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        f0 := @parameter3: float;
        $i2 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i2, i0, i1);
        $i3 = staticinvoke <java.util.Arrays: int binarySearch0(float[],int,int,float)>(r0, i0, i1, f0);
        return $i3;
    }

    private static int binarySearch0(float[], int, int, float)
    {
        float[] r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i10, $i11;
        float f0, f1;
        byte $b8, $b9;

        r0 := @parameter0: float[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        f0 := @parameter3: float;
        i2 = i0;
        i3 = i1 - 1;

     label0:
        if i2 > i3 goto label6;

        $i7 = i2 + i3;
        i4 = $i7 >>> 1;
        f1 = r0[i4];
        $b8 = f1 cmpg f0;
        if $b8 >= 0 goto label1;

        i2 = i4 + 1;
        goto label5;

     label1:
        $b9 = f1 cmpl f0;
        if $b9 <= 0 goto label2;

        i3 = i4 - 1;
        goto label5;

     label2:
        i5 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f1);
        i6 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);
        if i5 != i6 goto label3;

        return i4;

     label3:
        if i5 >= i6 goto label4;

        i2 = i4 + 1;
        goto label5;

     label4:
        i3 = i4 - 1;

     label5:
        goto label0;

     label6:
        $i10 = i2 + 1;
        $i11 = neg $i10;
        return $i11;
    }

    public static int binarySearch(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0;
        java.lang.Object r1;
        int $i0, $i1;

        r0 := @parameter0: java.lang.Object[];
        r1 := @parameter1: java.lang.Object;
        $i0 = lengthof r0;
        $i1 = staticinvoke <java.util.Arrays: int binarySearch0(java.lang.Object[],int,int,java.lang.Object)>(r0, 0, $i0, r1);
        return $i1;
    }

    public static int binarySearch(java.lang.Object[], int, int, java.lang.Object)
    {
        java.lang.Object[] r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r1;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 := @parameter3: java.lang.Object;
        $i2 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i2, i0, i1);
        $i3 = staticinvoke <java.util.Arrays: int binarySearch0(java.lang.Object[],int,int,java.lang.Object)>(r0, i0, i1, r1);
        return $i3;
    }

    private static int binarySearch0(java.lang.Object[], int, int, java.lang.Object)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8;
        java.lang.Object r1, $r3;
        java.lang.Comparable r2;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 := @parameter3: java.lang.Object;
        i2 = i0;
        i3 = i1 - 1;

     label0:
        if i2 > i3 goto label4;

        $i6 = i2 + i3;
        i4 = $i6 >>> 1;
        $r3 = r0[i4];
        r2 = (java.lang.Comparable) $r3;
        i5 = interfaceinvoke r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);
        if i5 >= 0 goto label1;

        i2 = i4 + 1;
        goto label3;

     label1:
        if i5 <= 0 goto label2;

        i3 = i4 - 1;
        goto label3;

     label2:
        return i4;

     label3:
        goto label0;

     label4:
        $i7 = i2 + 1;
        $i8 = neg $i7;
        return $i8;
    }

    public static int binarySearch(java.lang.Object[], java.lang.Object, java.util.Comparator)
    {
        java.lang.Object[] r0;
        java.lang.Object r1;
        java.util.Comparator r2;
        int $i0, $i1;

        r0 := @parameter0: java.lang.Object[];
        r1 := @parameter1: java.lang.Object;
        r2 := @parameter2: java.util.Comparator;
        $i0 = lengthof r0;
        $i1 = staticinvoke <java.util.Arrays: int binarySearch0(java.lang.Object[],int,int,java.lang.Object,java.util.Comparator)>(r0, 0, $i0, r1, r2);
        return $i1;
    }

    public static int binarySearch(java.lang.Object[], int, int, java.lang.Object, java.util.Comparator)
    {
        java.lang.Object[] r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r1;
        java.util.Comparator r2;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 := @parameter3: java.lang.Object;
        r2 := @parameter4: java.util.Comparator;
        $i2 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i2, i0, i1);
        $i3 = staticinvoke <java.util.Arrays: int binarySearch0(java.lang.Object[],int,int,java.lang.Object,java.util.Comparator)>(r0, i0, i1, r1, r2);
        return $i3;
    }

    private static int binarySearch0(java.lang.Object[], int, int, java.lang.Object, java.util.Comparator)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        java.lang.Object r1, r3;
        java.util.Comparator r2;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 := @parameter3: java.lang.Object;
        r2 := @parameter4: java.util.Comparator;
        if r2 != null goto label0;

        $i6 = staticinvoke <java.util.Arrays: int binarySearch0(java.lang.Object[],int,int,java.lang.Object)>(r0, i0, i1, r1);
        return $i6;

     label0:
        i2 = i0;
        i3 = i1 - 1;

     label1:
        if i2 > i3 goto label5;

        $i7 = i2 + i3;
        i4 = $i7 >>> 1;
        r3 = r0[i4];
        i5 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r3, r1);
        if i5 >= 0 goto label2;

        i2 = i4 + 1;
        goto label4;

     label2:
        if i5 <= 0 goto label3;

        i3 = i4 - 1;
        goto label4;

     label3:
        return i4;

     label4:
        goto label1;

     label5:
        $i8 = i2 + 1;
        $i9 = neg $i8;
        return $i9;
    }

    public static boolean equals(long[], long[])
    {
        long[] r0, r1;
        int i0, i1, $i2;
        long $l3, $l4;
        byte $b5;

        r0 := @parameter0: long[];
        r1 := @parameter1: long[];
        if r0 != r1 goto label0;

        return 1;

     label0:
        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        i0 = lengthof r0;
        $i2 = lengthof r1;
        if $i2 == i0 goto label3;

        return 0;

     label3:
        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        $l3 = r0[i1];
        $l4 = r1[i1];
        $b5 = $l3 cmp $l4;
        if $b5 == 0 goto label5;

        return 0;

     label5:
        i1 = i1 + 1;
        goto label4;

     label6:
        return 1;
    }

    public static boolean equals(int[], int[])
    {
        int[] r0, r1;
        int i0, i1, $i2, $i3, $i4;

        r0 := @parameter0: int[];
        r1 := @parameter1: int[];
        if r0 != r1 goto label0;

        return 1;

     label0:
        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        i0 = lengthof r0;
        $i2 = lengthof r1;
        if $i2 == i0 goto label3;

        return 0;

     label3:
        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        $i3 = r0[i1];
        $i4 = r1[i1];
        if $i3 == $i4 goto label5;

        return 0;

     label5:
        i1 = i1 + 1;
        goto label4;

     label6:
        return 1;
    }

    public static boolean equals(short[], short[])
    {
        short[] r0, r1;
        int i0, i1, $i2;
        short $s3, $s4;

        r0 := @parameter0: short[];
        r1 := @parameter1: short[];
        if r0 != r1 goto label0;

        return 1;

     label0:
        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        i0 = lengthof r0;
        $i2 = lengthof r1;
        if $i2 == i0 goto label3;

        return 0;

     label3:
        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        $s3 = r0[i1];
        $s4 = r1[i1];
        if $s3 == $s4 goto label5;

        return 0;

     label5:
        i1 = i1 + 1;
        goto label4;

     label6:
        return 1;
    }

    public static boolean equals(char[], char[])
    {
        char[] r0, r1;
        int i0, i1, $i2;
        char $c3, $c4;

        r0 := @parameter0: char[];
        r1 := @parameter1: char[];
        if r0 != r1 goto label0;

        return 1;

     label0:
        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        i0 = lengthof r0;
        $i2 = lengthof r1;
        if $i2 == i0 goto label3;

        return 0;

     label3:
        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        $c3 = r0[i1];
        $c4 = r1[i1];
        if $c3 == $c4 goto label5;

        return 0;

     label5:
        i1 = i1 + 1;
        goto label4;

     label6:
        return 1;
    }

    public static boolean equals(byte[], byte[])
    {
        byte[] r0, r1;
        int i0, i1, $i2;
        byte $b3, $b4;

        r0 := @parameter0: byte[];
        r1 := @parameter1: byte[];
        if r0 != r1 goto label0;

        return 1;

     label0:
        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        i0 = lengthof r0;
        $i2 = lengthof r1;
        if $i2 == i0 goto label3;

        return 0;

     label3:
        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        $b3 = r0[i1];
        $b4 = r1[i1];
        if $b3 == $b4 goto label5;

        return 0;

     label5:
        i1 = i1 + 1;
        goto label4;

     label6:
        return 1;
    }

    public static boolean equals(boolean[], boolean[])
    {
        boolean[] r0, r1;
        int i0, i1, $i2;
        boolean $z0, $z1;

        r0 := @parameter0: boolean[];
        r1 := @parameter1: boolean[];
        if r0 != r1 goto label0;

        return 1;

     label0:
        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        i0 = lengthof r0;
        $i2 = lengthof r1;
        if $i2 == i0 goto label3;

        return 0;

     label3:
        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        $z0 = r0[i1];
        $z1 = r1[i1];
        if $z0 == $z1 goto label5;

        return 0;

     label5:
        i1 = i1 + 1;
        goto label4;

     label6:
        return 1;
    }

    public static boolean equals(double[], double[])
    {
        double[] r0, r1;
        int i0, i1, $i2;
        double $d0, $d1;
        long $l3, $l4;
        byte $b5;

        r0 := @parameter0: double[];
        r1 := @parameter1: double[];
        if r0 != r1 goto label0;

        return 1;

     label0:
        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        i0 = lengthof r0;
        $i2 = lengthof r1;
        if $i2 == i0 goto label3;

        return 0;

     label3:
        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        $d0 = r0[i1];
        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);
        $d1 = r1[i1];
        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);
        $b5 = $l3 cmp $l4;
        if $b5 == 0 goto label5;

        return 0;

     label5:
        i1 = i1 + 1;
        goto label4;

     label6:
        return 1;
    }

    public static boolean equals(float[], float[])
    {
        float[] r0, r1;
        int i0, i1, $i2, $i3, $i4;
        float $f0, $f1;

        r0 := @parameter0: float[];
        r1 := @parameter1: float[];
        if r0 != r1 goto label0;

        return 1;

     label0:
        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        i0 = lengthof r0;
        $i2 = lengthof r1;
        if $i2 == i0 goto label3;

        return 0;

     label3:
        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        $f0 = r0[i1];
        $i3 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);
        $f1 = r1[i1];
        $i4 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f1);
        if $i3 == $i4 goto label5;

        return 0;

     label5:
        i1 = i1 + 1;
        goto label4;

     label6:
        return 1;
    }

    public static boolean equals(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        int i0, i1, $i2;
        java.lang.Object r2, r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];
        r1 := @parameter1: java.lang.Object[];
        if r0 != r1 goto label0;

        return 1;

     label0:
        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        i0 = lengthof r0;
        $i2 = lengthof r1;
        if $i2 == i0 goto label3;

        return 0;

     label3:
        i1 = 0;

     label4:
        if i1 >= i0 goto label8;

        r2 = r0[i1];
        r3 = r1[i1];
        if r2 != null goto label5;

        if r3 != null goto label6;

        goto label7;

     label5:
        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3);
        if $z0 != 0 goto label7;

     label6:
        return 0;

     label7:
        i1 = i1 + 1;
        goto label4;

     label8:
        return 1;
    }

    public static void fill(long[], long)
    {
        long[] r0;
        long l0;
        int i1, i2;

        r0 := @parameter0: long[];
        l0 := @parameter1: long;
        i1 = 0;
        i2 = lengthof r0;

     label0:
        if i1 >= i2 goto label1;

        r0[i1] = l0;
        i1 = i1 + 1;
        goto label0;

     label1:
        return;
    }

    public static void fill(long[], int, int, long)
    {
        long[] r0;
        int i0, i1, i3, $i4;
        long l2;

        r0 := @parameter0: long[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        l2 := @parameter3: long;
        $i4 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i4, i0, i1);
        i3 = i0;

     label0:
        if i3 >= i1 goto label1;

        r0[i3] = l2;
        i3 = i3 + 1;
        goto label0;

     label1:
        return;
    }

    public static void fill(int[], int)
    {
        int[] r0;
        int i0, i1, i2;

        r0 := @parameter0: int[];
        i0 := @parameter1: int;
        i1 = 0;
        i2 = lengthof r0;

     label0:
        if i1 >= i2 goto label1;

        r0[i1] = i0;
        i1 = i1 + 1;
        goto label0;

     label1:
        return;
    }

    public static void fill(int[], int, int, int)
    {
        int[] r0;
        int i0, i1, i2, i3, $i4;

        r0 := @parameter0: int[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        $i4 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i4, i0, i1);
        i3 = i0;

     label0:
        if i3 >= i1 goto label1;

        r0[i3] = i2;
        i3 = i3 + 1;
        goto label0;

     label1:
        return;
    }

    public static void fill(short[], short)
    {
        short[] r0;
        short s0;
        int i1, i2;

        r0 := @parameter0: short[];
        s0 := @parameter1: short;
        i1 = 0;
        i2 = lengthof r0;

     label0:
        if i1 >= i2 goto label1;

        r0[i1] = s0;
        i1 = i1 + 1;
        goto label0;

     label1:
        return;
    }

    public static void fill(short[], int, int, short)
    {
        short[] r0;
        int i0, i1, i3, $i4;
        short s2;

        r0 := @parameter0: short[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        s2 := @parameter3: short;
        $i4 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i4, i0, i1);
        i3 = i0;

     label0:
        if i3 >= i1 goto label1;

        r0[i3] = s2;
        i3 = i3 + 1;
        goto label0;

     label1:
        return;
    }

    public static void fill(char[], char)
    {
        char[] r0;
        char c0;
        int i1, i2;

        r0 := @parameter0: char[];
        c0 := @parameter1: char;
        i1 = 0;
        i2 = lengthof r0;

     label0:
        if i1 >= i2 goto label1;

        r0[i1] = c0;
        i1 = i1 + 1;
        goto label0;

     label1:
        return;
    }

    public static void fill(char[], int, int, char)
    {
        char[] r0;
        int i0, i1, i3, $i4;
        char c2;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        c2 := @parameter3: char;
        $i4 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i4, i0, i1);
        i3 = i0;

     label0:
        if i3 >= i1 goto label1;

        r0[i3] = c2;
        i3 = i3 + 1;
        goto label0;

     label1:
        return;
    }

    public static void fill(byte[], byte)
    {
        byte[] r0;
        byte b0;
        int i1, i2;

        r0 := @parameter0: byte[];
        b0 := @parameter1: byte;
        i1 = 0;
        i2 = lengthof r0;

     label0:
        if i1 >= i2 goto label1;

        r0[i1] = b0;
        i1 = i1 + 1;
        goto label0;

     label1:
        return;
    }

    public static void fill(byte[], int, int, byte)
    {
        byte[] r0;
        int i0, i1, i3, $i4;
        byte b2;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        b2 := @parameter3: byte;
        $i4 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i4, i0, i1);
        i3 = i0;

     label0:
        if i3 >= i1 goto label1;

        r0[i3] = b2;
        i3 = i3 + 1;
        goto label0;

     label1:
        return;
    }

    public static void fill(boolean[], boolean)
    {
        boolean[] r0;
        boolean z0;
        int i0, i1;

        r0 := @parameter0: boolean[];
        z0 := @parameter1: boolean;
        i0 = 0;
        i1 = lengthof r0;

     label0:
        if i0 >= i1 goto label1;

        r0[i0] = z0;
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    public static void fill(boolean[], int, int, boolean)
    {
        boolean[] r0;
        int i0, i1, i2, $i3;
        boolean z0;

        r0 := @parameter0: boolean[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        z0 := @parameter3: boolean;
        $i3 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i3, i0, i1);
        i2 = i0;

     label0:
        if i2 >= i1 goto label1;

        r0[i2] = z0;
        i2 = i2 + 1;
        goto label0;

     label1:
        return;
    }

    public static void fill(double[], double)
    {
        double[] r0;
        double d0;
        int i0, i1;

        r0 := @parameter0: double[];
        d0 := @parameter1: double;
        i0 = 0;
        i1 = lengthof r0;

     label0:
        if i0 >= i1 goto label1;

        r0[i0] = d0;
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    public static void fill(double[], int, int, double)
    {
        double[] r0;
        int i0, i1, i2, $i3;
        double d0;

        r0 := @parameter0: double[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        d0 := @parameter3: double;
        $i3 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i3, i0, i1);
        i2 = i0;

     label0:
        if i2 >= i1 goto label1;

        r0[i2] = d0;
        i2 = i2 + 1;
        goto label0;

     label1:
        return;
    }

    public static void fill(float[], float)
    {
        float[] r0;
        float f0;
        int i0, i1;

        r0 := @parameter0: float[];
        f0 := @parameter1: float;
        i0 = 0;
        i1 = lengthof r0;

     label0:
        if i0 >= i1 goto label1;

        r0[i0] = f0;
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    public static void fill(float[], int, int, float)
    {
        float[] r0;
        int i0, i1, i2, $i3;
        float f0;

        r0 := @parameter0: float[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        f0 := @parameter3: float;
        $i3 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i3, i0, i1);
        i2 = i0;

     label0:
        if i2 >= i1 goto label1;

        r0[i2] = f0;
        i2 = i2 + 1;
        goto label0;

     label1:
        return;
    }

    public static void fill(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0;
        java.lang.Object r1;
        int i0, i1;

        r0 := @parameter0: java.lang.Object[];
        r1 := @parameter1: java.lang.Object;
        i0 = 0;
        i1 = lengthof r0;

     label0:
        if i0 >= i1 goto label1;

        r0[i0] = r1;
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    public static void fill(java.lang.Object[], int, int, java.lang.Object)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, $i3;
        java.lang.Object r1;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 := @parameter3: java.lang.Object;
        $i3 = lengthof r0;
        staticinvoke <java.util.Arrays: void rangeCheck(int,int,int)>($i3, i0, i1);
        i2 = i0;

     label0:
        if i2 >= i1 goto label1;

        r0[i2] = r1;
        i2 = i2 + 1;
        goto label0;

     label1:
        return;
    }

    public static java.lang.Object[] copyOf(java.lang.Object[], int)
    {
        java.lang.Object[] r0, $r2, $r3;
        int i0;
        java.lang.Class $r1;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>(r0, i0, $r1);
        $r3 = (java.lang.Object[]) $r2;
        return $r3;
    }

    public static java.lang.Object[] copyOf(java.lang.Object[], int, java.lang.Class)
    {
        java.lang.Object[] r0, r2, $r3, $r4, $r7;
        int i0, $i1, $i2;
        java.lang.Class r1, $r5;
        java.lang.Object $r6;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        r1 := @parameter2: java.lang.Class;
        if r1 != class "[Ljava/lang/Object;" goto label0;

        $r3 = newarray (java.lang.Object)[i0];
        $r4 = (java.lang.Object[]) $r3;
        goto label1;

     label0:
        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>();
        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r5, i0);
        $r7 = (java.lang.Object[]) $r6;
        $r4 = (java.lang.Object[]) $r7;

     label1:
        r2 = $r4;
        $i1 = lengthof r0;
        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, $i2);
        return r2;
    }

    public static byte[] copyOf(byte[], int)
    {
        byte[] r0, r1;
        int i0, $i1, $i2;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        r1 = newarray (byte)[i0];
        $i1 = lengthof r0;
        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);
        return r1;
    }

    public static short[] copyOf(short[], int)
    {
        short[] r0, r1;
        int i0, $i1, $i2;

        r0 := @parameter0: short[];
        i0 := @parameter1: int;
        r1 = newarray (short)[i0];
        $i1 = lengthof r0;
        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);
        return r1;
    }

    public static int[] copyOf(int[], int)
    {
        int[] r0, r1;
        int i0, $i1, $i2;

        r0 := @parameter0: int[];
        i0 := @parameter1: int;
        r1 = newarray (int)[i0];
        $i1 = lengthof r0;
        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);
        return r1;
    }

    public static long[] copyOf(long[], int)
    {
        long[] r0, r1;
        int i0, $i1, $i2;

        r0 := @parameter0: long[];
        i0 := @parameter1: int;
        r1 = newarray (long)[i0];
        $i1 = lengthof r0;
        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);
        return r1;
    }

    public static char[] copyOf(char[], int)
    {
        char[] r0, r1;
        int i0, $i1, $i2;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        r1 = newarray (char)[i0];
        $i1 = lengthof r0;
        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);
        return r1;
    }

    public static float[] copyOf(float[], int)
    {
        float[] r0, r1;
        int i0, $i1, $i2;

        r0 := @parameter0: float[];
        i0 := @parameter1: int;
        r1 = newarray (float)[i0];
        $i1 = lengthof r0;
        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);
        return r1;
    }

    public static double[] copyOf(double[], int)
    {
        double[] r0, r1;
        int i0, $i1, $i2;

        r0 := @parameter0: double[];
        i0 := @parameter1: int;
        r1 = newarray (double)[i0];
        $i1 = lengthof r0;
        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);
        return r1;
    }

    public static boolean[] copyOf(boolean[], int)
    {
        boolean[] r0, r1;
        int i0, $i1, $i2;

        r0 := @parameter0: boolean[];
        i0 := @parameter1: int;
        r1 = newarray (boolean)[i0];
        $i1 = lengthof r0;
        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);
        return r1;
    }

    public static java.lang.Object[] copyOfRange(java.lang.Object[], int, int)
    {
        java.lang.Object[] r0, $r2;
        int i0, i1;
        java.lang.Class $r1;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>(r0, i0, i1, $r1);
        return $r2;
    }

    public static java.lang.Object[] copyOfRange(java.lang.Object[], int, int, java.lang.Class)
    {
        java.lang.Object[] r0, r3, $r9, $r10, $r13;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.Class r1, $r11;
        java.lang.StringBuilder $r2, $r5, $r6, $r7;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r8;
        java.lang.Object $r12;

        r0 := @parameter0: java.lang.Object[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        r1 := @parameter3: java.lang.Class;
        i2 = i1 - i0;
        if i2 >= 0 goto label0;

        $r4 = new java.lang.IllegalArgumentException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);
        throw $r4;

     label0:
        if r1 != class "[Ljava/lang/Object;" goto label1;

        $r9 = newarray (java.lang.Object)[i2];
        $r10 = (java.lang.Object[]) $r9;
        goto label2;

     label1:
        $r11 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>();
        $r12 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r11, i2);
        $r13 = (java.lang.Object[]) $r12;
        $r10 = (java.lang.Object[]) $r13;

     label2:
        r3 = $r10;
        $i3 = lengthof r0;
        $i4 = $i3 - i0;
        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i2);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r3, 0, $i5);
        return r3;
    }

    public static byte[] copyOfRange(byte[], int, int)
    {
        byte[] r0, r2;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r1, $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r7;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = i1 - i0;
        if i2 >= 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r3;

     label0:
        r2 = newarray (byte)[i2];
        $i3 = lengthof r0;
        $i4 = $i3 - i0;
        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i2);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r2, 0, $i5);
        return r2;
    }

    public static short[] copyOfRange(short[], int, int)
    {
        short[] r0, r2;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r1, $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r7;

        r0 := @parameter0: short[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = i1 - i0;
        if i2 >= 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r3;

     label0:
        r2 = newarray (short)[i2];
        $i3 = lengthof r0;
        $i4 = $i3 - i0;
        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i2);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r2, 0, $i5);
        return r2;
    }

    public static int[] copyOfRange(int[], int, int)
    {
        int[] r0, r2;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r1, $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r7;

        r0 := @parameter0: int[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = i1 - i0;
        if i2 >= 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r3;

     label0:
        r2 = newarray (int)[i2];
        $i3 = lengthof r0;
        $i4 = $i3 - i0;
        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i2);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r2, 0, $i5);
        return r2;
    }

    public static long[] copyOfRange(long[], int, int)
    {
        long[] r0, r2;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r1, $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r7;

        r0 := @parameter0: long[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = i1 - i0;
        if i2 >= 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r3;

     label0:
        r2 = newarray (long)[i2];
        $i3 = lengthof r0;
        $i4 = $i3 - i0;
        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i2);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r2, 0, $i5);
        return r2;
    }

    public static char[] copyOfRange(char[], int, int)
    {
        char[] r0, r2;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r1, $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r7;

        r0 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = i1 - i0;
        if i2 >= 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r3;

     label0:
        r2 = newarray (char)[i2];
        $i3 = lengthof r0;
        $i4 = $i3 - i0;
        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i2);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r2, 0, $i5);
        return r2;
    }

    public static float[] copyOfRange(float[], int, int)
    {
        float[] r0, r2;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r1, $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r7;

        r0 := @parameter0: float[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = i1 - i0;
        if i2 >= 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r3;

     label0:
        r2 = newarray (float)[i2];
        $i3 = lengthof r0;
        $i4 = $i3 - i0;
        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i2);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r2, 0, $i5);
        return r2;
    }

    public static double[] copyOfRange(double[], int, int)
    {
        double[] r0, r2;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r1, $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r7;

        r0 := @parameter0: double[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = i1 - i0;
        if i2 >= 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r3;

     label0:
        r2 = newarray (double)[i2];
        $i3 = lengthof r0;
        $i4 = $i3 - i0;
        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i2);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r2, 0, $i5);
        return r2;
    }

    public static boolean[] copyOfRange(boolean[], int, int)
    {
        boolean[] r0, r2;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r1, $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r7;

        r0 := @parameter0: boolean[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = i1 - i0;
        if i2 >= 0 goto label0;

        $r3 = new java.lang.IllegalArgumentException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);
        throw $r3;

     label0:
        r2 = newarray (boolean)[i2];
        $i3 = lengthof r0;
        $i4 = $i3 - i0;
        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i2);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r2, 0, $i5);
        return r2;
    }

    public static transient java.util.List asList(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.util.Arrays$ArrayList $r1;

        r0 := @parameter0: java.lang.Object[];
        $r1 = new java.util.Arrays$ArrayList;
        specialinvoke $r1.<java.util.Arrays$ArrayList: void <init>(java.lang.Object[])>(r0);
        return $r1;
    }

    public static int hashCode(long[])
    {
        long[] r0, r1;
        int i0, i1, i2, i4, $i7;
        long l3, $l5, $l6;

        r0 := @parameter0: long[];
        if r0 != null goto label0;

        return 0;

     label0:
        i0 = 1;
        r1 = r0;
        i1 = lengthof r1;
        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        l3 = r1[i2];
        $l5 = l3 >>> 32;
        $l6 = l3 ^ $l5;
        i4 = (int) $l6;
        $i7 = 31 * i0;
        i0 = $i7 + i4;
        i2 = i2 + 1;
        goto label1;

     label2:
        return i0;
    }

    public static int hashCode(int[])
    {
        int[] r0, r1;
        int i0, i1, i2, i3, $i4;

        r0 := @parameter0: int[];
        if r0 != null goto label0;

        return 0;

     label0:
        i0 = 1;
        r1 = r0;
        i1 = lengthof r1;
        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        i3 = r1[i2];
        $i4 = 31 * i0;
        i0 = $i4 + i3;
        i2 = i2 + 1;
        goto label1;

     label2:
        return i0;
    }

    public static int hashCode(short[])
    {
        short[] r0, r1;
        int i0, i1, i2, $i4;
        short s3;

        r0 := @parameter0: short[];
        if r0 != null goto label0;

        return 0;

     label0:
        i0 = 1;
        r1 = r0;
        i1 = lengthof r1;
        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        s3 = r1[i2];
        $i4 = 31 * i0;
        i0 = $i4 + s3;
        i2 = i2 + 1;
        goto label1;

     label2:
        return i0;
    }

    public static int hashCode(char[])
    {
        char[] r0, r1;
        int i0, i1, i2, $i4;
        char c3;

        r0 := @parameter0: char[];
        if r0 != null goto label0;

        return 0;

     label0:
        i0 = 1;
        r1 = r0;
        i1 = lengthof r1;
        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        c3 = r1[i2];
        $i4 = 31 * i0;
        i0 = $i4 + c3;
        i2 = i2 + 1;
        goto label1;

     label2:
        return i0;
    }

    public static int hashCode(byte[])
    {
        byte[] r0, r1;
        int i0, i1, i2, $i4;
        byte b3;

        r0 := @parameter0: byte[];
        if r0 != null goto label0;

        return 0;

     label0:
        i0 = 1;
        r1 = r0;
        i1 = lengthof r1;
        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        b3 = r1[i2];
        $i4 = 31 * i0;
        i0 = $i4 + b3;
        i2 = i2 + 1;
        goto label1;

     label2:
        return i0;
    }

    public static int hashCode(boolean[])
    {
        boolean[] r0, r1;
        int i0, i1, i2, $i3;
        boolean z0;
        short $s4;

        r0 := @parameter0: boolean[];
        if r0 != null goto label0;

        return 0;

     label0:
        i0 = 1;
        r1 = r0;
        i1 = lengthof r1;
        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        z0 = r1[i2];
        $i3 = 31 * i0;
        if z0 == 0 goto label2;

        $s4 = 1231;
        goto label3;

     label2:
        $s4 = 1237;

     label3:
        i0 = $i3 + $s4;
        i2 = i2 + 1;
        goto label1;

     label4:
        return i0;
    }

    public static int hashCode(float[])
    {
        float[] r0, r1;
        int i0, i1, i2, $i3, $i4;
        float f0;

        r0 := @parameter0: float[];
        if r0 != null goto label0;

        return 0;

     label0:
        i0 = 1;
        r1 = r0;
        i1 = lengthof r1;
        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        f0 = r1[i2];
        $i3 = 31 * i0;
        $i4 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);
        i0 = $i3 + $i4;
        i2 = i2 + 1;
        goto label1;

     label2:
        return i0;
    }

    public static int hashCode(double[])
    {
        double[] r0, r1;
        int i0, i1, i2, $i4, $i7;
        double d0;
        long l3, $l5, $l6;

        r0 := @parameter0: double[];
        if r0 != null goto label0;

        return 0;

     label0:
        i0 = 1;
        r1 = r0;
        i1 = lengthof r1;
        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        d0 = r1[i2];
        l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);
        $i4 = 31 * i0;
        $l5 = l3 >>> 32;
        $l6 = l3 ^ $l5;
        $i7 = (int) $l6;
        i0 = $i4 + $i7;
        i2 = i2 + 1;
        goto label1;

     label2:
        return i0;
    }

    public static int hashCode(java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        int i0, i1, i2, $i3, $i4;
        java.lang.Object r2;

        r0 := @parameter0: java.lang.Object[];
        if r0 != null goto label0;

        return 0;

     label0:
        i0 = 1;
        r1 = r0;
        i1 = lengthof r1;
        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        r2 = r1[i2];
        $i3 = 31 * i0;
        if r2 != null goto label2;

        $i4 = 0;
        goto label3;

     label2:
        $i4 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

     label3:
        i0 = $i3 + $i4;
        i2 = i2 + 1;
        goto label1;

     label4:
        return i0;
    }

    public static int deepHashCode(java.lang.Object[])
    {
        java.lang.Object[] r0, r1, $r3, $r4;
        int i0, i1, i2, i3, $i4;
        java.lang.Object r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        byte[] $r5, $r6;
        short[] $r7, $r8;
        int[] $r9, $r10;
        long[] $r11, $r12;
        char[] $r13, $r14;
        float[] $r15, $r16;
        double[] $r17, $r18;
        boolean[] $r19, $r20;

        r0 := @parameter0: java.lang.Object[];
        if r0 != null goto label0;

        return 0;

     label0:
        i0 = 1;
        r1 = r0;
        i1 = lengthof r1;
        i2 = 0;

     label1:
        if i2 >= i1 goto label12;

        r2 = r1[i2];
        i3 = 0;
        $z0 = r2 instanceof java.lang.Object[];
        if $z0 == 0 goto label2;

        $r3 = (java.lang.Object[]) r2;
        $r4 = (java.lang.Object[]) $r3;
        i3 = staticinvoke <java.util.Arrays: int deepHashCode(java.lang.Object[])>($r4);
        goto label11;

     label2:
        $z1 = r2 instanceof byte[];
        if $z1 == 0 goto label3;

        $r5 = (byte[]) r2;
        $r6 = (byte[]) $r5;
        i3 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r6);
        goto label11;

     label3:
        $z2 = r2 instanceof short[];
        if $z2 == 0 goto label4;

        $r7 = (short[]) r2;
        $r8 = (short[]) $r7;
        i3 = staticinvoke <java.util.Arrays: int hashCode(short[])>($r8);
        goto label11;

     label4:
        $z3 = r2 instanceof int[];
        if $z3 == 0 goto label5;

        $r9 = (int[]) r2;
        $r10 = (int[]) $r9;
        i3 = staticinvoke <java.util.Arrays: int hashCode(int[])>($r10);
        goto label11;

     label5:
        $z4 = r2 instanceof long[];
        if $z4 == 0 goto label6;

        $r11 = (long[]) r2;
        $r12 = (long[]) $r11;
        i3 = staticinvoke <java.util.Arrays: int hashCode(long[])>($r12);
        goto label11;

     label6:
        $z5 = r2 instanceof char[];
        if $z5 == 0 goto label7;

        $r13 = (char[]) r2;
        $r14 = (char[]) $r13;
        i3 = staticinvoke <java.util.Arrays: int hashCode(char[])>($r14);
        goto label11;

     label7:
        $z6 = r2 instanceof float[];
        if $z6 == 0 goto label8;

        $r15 = (float[]) r2;
        $r16 = (float[]) $r15;
        i3 = staticinvoke <java.util.Arrays: int hashCode(float[])>($r16);
        goto label11;

     label8:
        $z7 = r2 instanceof double[];
        if $z7 == 0 goto label9;

        $r17 = (double[]) r2;
        $r18 = (double[]) $r17;
        i3 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r18);
        goto label11;

     label9:
        $z8 = r2 instanceof boolean[];
        if $z8 == 0 goto label10;

        $r19 = (boolean[]) r2;
        $r20 = (boolean[]) $r19;
        i3 = staticinvoke <java.util.Arrays: int hashCode(boolean[])>($r20);
        goto label11;

     label10:
        if r2 == null goto label11;

        i3 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

     label11:
        $i4 = 31 * i0;
        i0 = $i4 + i3;
        i2 = i2 + 1;
        goto label1;

     label12:
        return i0;
    }

    public static boolean deepEquals(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        int i0, i1, $i2;
        java.lang.Object r2, r3;
        boolean z0;

        r0 := @parameter0: java.lang.Object[];
        r1 := @parameter1: java.lang.Object[];
        if r0 != r1 goto label0;

        return 1;

     label0:
        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        i0 = lengthof r0;
        $i2 = lengthof r1;
        if $i2 == i0 goto label3;

        return 0;

     label3:
        i1 = 0;

     label4:
        if i1 >= i0 goto label8;

        r2 = r0[i1];
        r3 = r1[i1];
        if r2 != r3 goto label5;

        goto label7;

     label5:
        if r2 != null goto label6;

        return 0;

     label6:
        z0 = staticinvoke <java.util.Arrays: boolean deepEquals0(java.lang.Object,java.lang.Object)>(r2, r3);
        if z0 != 0 goto label7;

        return 0;

     label7:
        i1 = i1 + 1;
        goto label4;

     label8:
        return 1;
    }

    static boolean deepEquals0(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        java.lang.AssertionError $r2;
        java.lang.Object[] $r3, $r4, $r5, $r6;
        byte[] $r7, $r8, $r9, $r10;
        short[] $r11, $r12, $r13, $r14;
        int[] $r15, $r16, $r17, $r18;
        long[] $r19, $r20, $r21, $r22;
        char[] $r23, $r24, $r25, $r26;
        float[] $r27, $r28, $r29, $r30;
        double[] $r31, $r32, $r33, $r34;
        boolean[] $r35, $r36, $r37, $r38;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        $z0 = <java.util.Arrays: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if r0 != null goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $z2 = r0 instanceof java.lang.Object[];
        if $z2 == 0 goto label1;

        $z3 = r1 instanceof java.lang.Object[];
        if $z3 == 0 goto label1;

        $r3 = (java.lang.Object[]) r0;
        $r4 = (java.lang.Object[]) $r3;
        $r5 = (java.lang.Object[]) r1;
        $r6 = (java.lang.Object[]) $r5;
        z1 = staticinvoke <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>($r4, $r6);
        goto label10;

     label1:
        $z4 = r0 instanceof byte[];
        if $z4 == 0 goto label2;

        $z5 = r1 instanceof byte[];
        if $z5 == 0 goto label2;

        $r7 = (byte[]) r0;
        $r8 = (byte[]) $r7;
        $r9 = (byte[]) r1;
        $r10 = (byte[]) $r9;
        z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r8, $r10);
        goto label10;

     label2:
        $z6 = r0 instanceof short[];
        if $z6 == 0 goto label3;

        $z7 = r1 instanceof short[];
        if $z7 == 0 goto label3;

        $r11 = (short[]) r0;
        $r12 = (short[]) $r11;
        $r13 = (short[]) r1;
        $r14 = (short[]) $r13;
        z1 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($r12, $r14);
        goto label10;

     label3:
        $z8 = r0 instanceof int[];
        if $z8 == 0 goto label4;

        $z9 = r1 instanceof int[];
        if $z9 == 0 goto label4;

        $r15 = (int[]) r0;
        $r16 = (int[]) $r15;
        $r17 = (int[]) r1;
        $r18 = (int[]) $r17;
        z1 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r16, $r18);
        goto label10;

     label4:
        $z10 = r0 instanceof long[];
        if $z10 == 0 goto label5;

        $z11 = r1 instanceof long[];
        if $z11 == 0 goto label5;

        $r19 = (long[]) r0;
        $r20 = (long[]) $r19;
        $r21 = (long[]) r1;
        $r22 = (long[]) $r21;
        z1 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r20, $r22);
        goto label10;

     label5:
        $z12 = r0 instanceof char[];
        if $z12 == 0 goto label6;

        $z13 = r1 instanceof char[];
        if $z13 == 0 goto label6;

        $r23 = (char[]) r0;
        $r24 = (char[]) $r23;
        $r25 = (char[]) r1;
        $r26 = (char[]) $r25;
        z1 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($r24, $r26);
        goto label10;

     label6:
        $z14 = r0 instanceof float[];
        if $z14 == 0 goto label7;

        $z15 = r1 instanceof float[];
        if $z15 == 0 goto label7;

        $r27 = (float[]) r0;
        $r28 = (float[]) $r27;
        $r29 = (float[]) r1;
        $r30 = (float[]) $r29;
        z1 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($r28, $r30);
        goto label10;

     label7:
        $z16 = r0 instanceof double[];
        if $z16 == 0 goto label8;

        $z17 = r1 instanceof double[];
        if $z17 == 0 goto label8;

        $r31 = (double[]) r0;
        $r32 = (double[]) $r31;
        $r33 = (double[]) r1;
        $r34 = (double[]) $r33;
        z1 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r32, $r34);
        goto label10;

     label8:
        $z18 = r0 instanceof boolean[];
        if $z18 == 0 goto label9;

        $z19 = r1 instanceof boolean[];
        if $z19 == 0 goto label9;

        $r35 = (boolean[]) r0;
        $r36 = (boolean[]) $r35;
        $r37 = (boolean[]) r1;
        $r38 = (boolean[]) $r37;
        z1 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($r36, $r38);
        goto label10;

     label9:
        z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

     label10:
        return z1;
    }

    public static java.lang.String toString(long[])
    {
        long[] r0;
        int i0, i1, $i2;
        java.lang.StringBuilder r1, $r2, $r5;
        long $l3;
        java.lang.String $r6;

        r0 := @parameter0: long[];
        if r0 != null goto label0;

        return "null";

     label0:
        $i2 = lengthof r0;
        i0 = $i2 - 1;
        if i0 != -1 goto label1;

        return "[]";

     label1:
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        r1 = $r2;
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
        i1 = 0;

     label2:
        $l3 = r0[i1];
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);
        if i1 != i0 goto label3;

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r6;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
        i1 = i1 + 1;
        goto label2;
    }

    public static java.lang.String toString(int[])
    {
        int[] r0;
        int i0, i1, $i2, $i3;
        java.lang.StringBuilder r1, $r2, $r5;
        java.lang.String $r6;

        r0 := @parameter0: int[];
        if r0 != null goto label0;

        return "null";

     label0:
        $i2 = lengthof r0;
        i0 = $i2 - 1;
        if i0 != -1 goto label1;

        return "[]";

     label1:
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        r1 = $r2;
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
        i1 = 0;

     label2:
        $i3 = r0[i1];
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
        if i1 != i0 goto label3;

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r6;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
        i1 = i1 + 1;
        goto label2;
    }

    public static java.lang.String toString(short[])
    {
        short[] r0;
        int i0, i1, $i2;
        java.lang.StringBuilder r1, $r2, $r5;
        short $s3;
        java.lang.String $r6;

        r0 := @parameter0: short[];
        if r0 != null goto label0;

        return "null";

     label0:
        $i2 = lengthof r0;
        i0 = $i2 - 1;
        if i0 != -1 goto label1;

        return "[]";

     label1:
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        r1 = $r2;
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
        i1 = 0;

     label2:
        $s3 = r0[i1];
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s3);
        if i1 != i0 goto label3;

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r6;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
        i1 = i1 + 1;
        goto label2;
    }

    public static java.lang.String toString(char[])
    {
        char[] r0;
        int i0, i1, $i2;
        java.lang.StringBuilder r1, $r2, $r5;
        char $c3;
        java.lang.String $r6;

        r0 := @parameter0: char[];
        if r0 != null goto label0;

        return "null";

     label0:
        $i2 = lengthof r0;
        i0 = $i2 - 1;
        if i0 != -1 goto label1;

        return "[]";

     label1:
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        r1 = $r2;
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
        i1 = 0;

     label2:
        $c3 = r0[i1];
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);
        if i1 != i0 goto label3;

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r6;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
        i1 = i1 + 1;
        goto label2;
    }

    public static java.lang.String toString(byte[])
    {
        byte[] r0;
        int i0, i1, $i2;
        java.lang.StringBuilder r1, $r2, $r5;
        byte $b3;
        java.lang.String $r6;

        r0 := @parameter0: byte[];
        if r0 != null goto label0;

        return "null";

     label0:
        $i2 = lengthof r0;
        i0 = $i2 - 1;
        if i0 != -1 goto label1;

        return "[]";

     label1:
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        r1 = $r2;
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
        i1 = 0;

     label2:
        $b3 = r0[i1];
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b3);
        if i1 != i0 goto label3;

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r6;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
        i1 = i1 + 1;
        goto label2;
    }

    public static java.lang.String toString(boolean[])
    {
        boolean[] r0;
        int i0, i1, $i2;
        java.lang.StringBuilder r1, $r2, $r5;
        boolean $z0;
        java.lang.String $r6;

        r0 := @parameter0: boolean[];
        if r0 != null goto label0;

        return "null";

     label0:
        $i2 = lengthof r0;
        i0 = $i2 - 1;
        if i0 != -1 goto label1;

        return "[]";

     label1:
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        r1 = $r2;
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
        i1 = 0;

     label2:
        $z0 = r0[i1];
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);
        if i1 != i0 goto label3;

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r6;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
        i1 = i1 + 1;
        goto label2;
    }

    public static java.lang.String toString(float[])
    {
        float[] r0;
        int i0, i1, $i2;
        java.lang.StringBuilder r1, $r2, $r5;
        float $f0;
        java.lang.String $r6;

        r0 := @parameter0: float[];
        if r0 != null goto label0;

        return "null";

     label0:
        $i2 = lengthof r0;
        i0 = $i2 - 1;
        if i0 != -1 goto label1;

        return "[]";

     label1:
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        r1 = $r2;
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
        i1 = 0;

     label2:
        $f0 = r0[i1];
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);
        if i1 != i0 goto label3;

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r6;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
        i1 = i1 + 1;
        goto label2;
    }

    public static java.lang.String toString(double[])
    {
        double[] r0;
        int i0, i1, $i2;
        java.lang.StringBuilder r1, $r2, $r5;
        double $d0;
        java.lang.String $r6;

        r0 := @parameter0: double[];
        if r0 != null goto label0;

        return "null";

     label0:
        $i2 = lengthof r0;
        i0 = $i2 - 1;
        if i0 != -1 goto label1;

        return "[]";

     label1:
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        r1 = $r2;
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
        i1 = 0;

     label2:
        $d0 = r0[i1];
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);
        if i1 != i0 goto label3;

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r6;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
        i1 = i1 + 1;
        goto label2;
    }

    public static java.lang.String toString(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int i0, i1, $i2;
        java.lang.StringBuilder r1, $r2, $r7;
        java.lang.Object $r4;
        java.lang.String $r5, $r8;

        r0 := @parameter0: java.lang.Object[];
        if r0 != null goto label0;

        return "null";

     label0:
        $i2 = lengthof r0;
        i0 = $i2 - 1;
        if i0 != -1 goto label1;

        return "[]";

     label1:
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        r1 = $r2;
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
        i1 = 0;

     label2:
        $r4 = r0[i1];
        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        if i1 != i0 goto label3;

        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r8;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
        i1 = i1 + 1;
        goto label2;
    }

    public static java.lang.String deepToString(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int i0, $i1, $i2;
        java.lang.StringBuilder r1, $r2;
        java.util.HashSet $r3;
        java.lang.String $r4;

        r0 := @parameter0: java.lang.Object[];
        if r0 != null goto label0;

        return "null";

     label0:
        $i1 = lengthof r0;
        i0 = 20 * $i1;
        $i2 = lengthof r0;
        if $i2 == 0 goto label1;

        if i0 > 0 goto label1;

        i0 = 2147483647;

     label1:
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(i0);
        r1 = $r2;
        $r3 = new java.util.HashSet;
        specialinvoke $r3.<java.util.HashSet: void <init>()>();
        staticinvoke <java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>(r0, r1, $r3);
        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r4;
    }

    private static void deepToString(java.lang.Object[], java.lang.StringBuilder, java.util.Set)
    {
        java.lang.Object[] r0, $r42, $r43;
        java.lang.StringBuilder r1;
        java.util.Set r2;
        int i0, i1, $i2;
        java.lang.Object r3;
        java.lang.Class r4;
        boolean $z1, $z2;
        byte[] $r9, $r10;
        java.lang.String $r11, $r15, $r19, $r23, $r27, $r31, $r35, $r39, $r44;
        short[] $r13, $r14;
        int[] $r17, $r18;
        long[] $r21, $r22;
        char[] $r25, $r26;
        float[] $r29, $r30;
        double[] $r33, $r34;
        boolean[] $r37, $r38;

        r0 := @parameter0: java.lang.Object[];
        r1 := @parameter1: java.lang.StringBuilder;
        r2 := @parameter2: java.util.Set;
        if r0 != null goto label0;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");
        return;

     label0:
        $i2 = lengthof r0;
        i0 = $i2 - 1;
        if i0 != -1 goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");
        return;

     label1:
        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r0);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
        i1 = 0;

     label2:
        r3 = r0[i1];
        if r3 != null goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");
        goto label14;

     label3:
        r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();
        $z1 = virtualinvoke r4.<java.lang.Class: boolean isArray()>();
        if $z1 == 0 goto label13;

        if r4 != class "[B" goto label4;

        $r9 = (byte[]) r3;
        $r10 = (byte[]) $r9;
        $r11 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>($r10);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        goto label14;

     label4:
        if r4 != class "[S" goto label5;

        $r13 = (short[]) r3;
        $r14 = (short[]) $r13;
        $r15 = staticinvoke <java.util.Arrays: java.lang.String toString(short[])>($r14);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);
        goto label14;

     label5:
        if r4 != class "[I" goto label6;

        $r17 = (int[]) r3;
        $r18 = (int[]) $r17;
        $r19 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>($r18);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);
        goto label14;

     label6:
        if r4 != class "[J" goto label7;

        $r21 = (long[]) r3;
        $r22 = (long[]) $r21;
        $r23 = staticinvoke <java.util.Arrays: java.lang.String toString(long[])>($r22);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);
        goto label14;

     label7:
        if r4 != class "[C" goto label8;

        $r25 = (char[]) r3;
        $r26 = (char[]) $r25;
        $r27 = staticinvoke <java.util.Arrays: java.lang.String toString(char[])>($r26);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);
        goto label14;

     label8:
        if r4 != class "[F" goto label9;

        $r29 = (float[]) r3;
        $r30 = (float[]) $r29;
        $r31 = staticinvoke <java.util.Arrays: java.lang.String toString(float[])>($r30);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);
        goto label14;

     label9:
        if r4 != class "[D" goto label10;

        $r33 = (double[]) r3;
        $r34 = (double[]) $r33;
        $r35 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r34);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);
        goto label14;

     label10:
        if r4 != class "[Z" goto label11;

        $r37 = (boolean[]) r3;
        $r38 = (boolean[]) $r37;
        $r39 = staticinvoke <java.util.Arrays: java.lang.String toString(boolean[])>($r38);
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);
        goto label14;

     label11:
        $z2 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>(r3);
        if $z2 == 0 goto label12;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[...]");
        goto label14;

     label12:
        $r42 = (java.lang.Object[]) r3;
        $r43 = (java.lang.Object[]) $r42;
        staticinvoke <java.util.Arrays: void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set)>($r43, r1, r2);
        goto label14;

     label13:
        $r44 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

     label14:
        if i1 != i0 goto label15;

        goto label16;

     label15:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
        i1 = i1 + 1;
        goto label2;

     label16:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
        interfaceinvoke r2.<java.util.Set: boolean remove(java.lang.Object)>(r0);
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/util/Arrays";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.util.Arrays: boolean $assertionsDisabled> = $z1;
        return;
    }
}
