final class java.util.logging.Logger$1 extends java.lang.Object implements java.security.PrivilegedAction
{
    final java.util.Locale val$locale;

    void <init>(java.util.Locale)
    {
        java.util.logging.Logger$1 r0;
        java.util.Locale r1;

        r0 := @this: java.util.logging.Logger$1;
        r1 := @parameter0: java.util.Locale;
        r0.<java.util.logging.Logger$1: java.util.Locale val$locale> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public java.util.ResourceBundle run()
    {
        java.util.logging.Logger$1 r0;
        java.lang.ClassLoader $r1;
        java.util.MissingResourceException r2, $r5;
        java.util.Locale $r3;
        java.util.ResourceBundle $r4;
        java.lang.InternalError $r6;
        java.lang.String $r7;

        r0 := @this: java.util.logging.Logger$1;

     label0:
        $r3 = r0.<java.util.logging.Logger$1: java.util.Locale val$locale>;
        $r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
        $r4 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)>("sun.util.logging.resources.logging", $r3, $r1);

     label1:
        return $r4;

     label2:
        $r5 := @caughtexception;
        r2 = $r5;
        $r6 = new java.lang.InternalError;
        $r7 = virtualinvoke r2.<java.util.MissingResourceException: java.lang.String toString()>();
        specialinvoke $r6.<java.lang.InternalError: void <init>(java.lang.String)>($r7);
        throw $r6;

        catch java.util.MissingResourceException from label0 to label1 with label2;
    }

    public volatile java.lang.Object run()
    {
        java.util.logging.Logger$1 r0;
        java.util.ResourceBundle $r1;

        r0 := @this: java.util.logging.Logger$1;
        $r1 = virtualinvoke r0.<java.util.logging.Logger$1: java.util.ResourceBundle run()>();
        return $r1;
    }
}
