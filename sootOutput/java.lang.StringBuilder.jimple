public final class java.lang.StringBuilder extends java.lang.AbstractStringBuilder implements java.io.Serializable, java.lang.CharSequence
{
    static final long serialVersionUID;

    public void <init>()
    {
        java.lang.StringBuilder r0;

        r0 := @this: java.lang.StringBuilder;
        specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>(int)>(16);
        return;
    }

    public void <init>(int)
    {
        java.lang.StringBuilder r0;
        int i0;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>(int)>(i0);
        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1;
        int $i0, $i1;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.String;
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        $i1 = $i0 + 16;
        specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>(int)>($i1);
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        return;
    }

    public void <init>(java.lang.CharSequence)
    {
        java.lang.StringBuilder r0;
        java.lang.CharSequence r1;
        int $i0, $i1;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.CharSequence;
        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();
        $i1 = $i0 + 16;
        specialinvoke r0.<java.lang.StringBuilder: void <init>(int)>($i1);
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r1);
        return;
    }

    public java.lang.StringBuilder append(java.lang.Object)
    {
        java.lang.StringBuilder r0, $r3;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.Object;
        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);
        $r3 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        return $r3;
    }

    public java.lang.StringBuilder append(java.lang.String)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>(r1);
        return r0;
    }

    private java.lang.StringBuilder append(java.lang.StringBuilder)
    {
        java.lang.StringBuilder r0, r1, $r2;
        int i0, i1, $i2, $i3, $i4;
        char[] $r3, $r4;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.StringBuilder;
        if r1 != null goto label0;

        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");
        return $r2;

     label0:
        i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();
        $i2 = r0.<java.lang.StringBuilder: int count>;
        i1 = $i2 + i0;
        $r3 = r0.<java.lang.StringBuilder: char[] value>;
        $i3 = lengthof $r3;
        if i1 <= $i3 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: void expandCapacity(int)>(i1);

     label1:
        $r4 = r0.<java.lang.StringBuilder: char[] value>;
        $i4 = r0.<java.lang.StringBuilder: int count>;
        virtualinvoke r1.<java.lang.StringBuilder: void getChars(int,int,char[],int)>(0, i0, $r4, $i4);
        r0.<java.lang.StringBuilder: int count> = i1;
        return r0;
    }

    public java.lang.StringBuilder append(java.lang.StringBuffer)
    {
        java.lang.StringBuilder r0;
        java.lang.StringBuffer r1;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.StringBuffer;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.StringBuffer)>(r1);
        return r0;
    }

    public java.lang.StringBuilder append(java.lang.CharSequence)
    {
        java.lang.StringBuilder r0, $r3, $r5, $r6, $r7, $r8;
        java.lang.CharSequence r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r2;
        java.lang.StringBuffer $r4;
        int $i0;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.CharSequence;
        if r1 != null goto label0;

        r1 = "null";

     label0:
        $z0 = r1 instanceof java.lang.String;
        if $z0 == 0 goto label1;

        $r2 = (java.lang.String) r1;
        $r3 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        return $r3;

     label1:
        $z1 = r1 instanceof java.lang.StringBuffer;
        if $z1 == 0 goto label2;

        $r4 = (java.lang.StringBuffer) r1;
        $r5 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuffer)>($r4);
        return $r5;

     label2:
        $z2 = r1 instanceof java.lang.StringBuilder;
        if $z2 == 0 goto label3;

        $r6 = (java.lang.StringBuilder) r1;
        $r7 = specialinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuilder)>($r6);
        return $r7;

     label3:
        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();
        $r8 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r1, 0, $i0);
        return $r8;
    }

    public java.lang.StringBuilder append(java.lang.CharSequence, int, int)
    {
        java.lang.StringBuilder r0;
        java.lang.CharSequence r1;
        int i0, i1;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.CharSequence;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence,int,int)>(r1, i0, i1);
        return r0;
    }

    public java.lang.StringBuilder append(char[])
    {
        java.lang.StringBuilder r0;
        char[] r1;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: char[];
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(char[])>(r1);
        return r0;
    }

    public java.lang.StringBuilder append(char[], int, int)
    {
        java.lang.StringBuilder r0;
        char[] r1;
        int i0, i1;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(char[],int,int)>(r1, i0, i1);
        return r0;
    }

    public java.lang.StringBuilder append(boolean)
    {
        java.lang.StringBuilder r0;
        boolean z0;

        r0 := @this: java.lang.StringBuilder;
        z0 := @parameter0: boolean;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(boolean)>(z0);
        return r0;
    }

    public java.lang.StringBuilder append(char)
    {
        java.lang.StringBuilder r0;
        char c0;

        r0 := @this: java.lang.StringBuilder;
        c0 := @parameter0: char;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(char)>(c0);
        return r0;
    }

    public java.lang.StringBuilder append(int)
    {
        java.lang.StringBuilder r0;
        int i0;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(int)>(i0);
        return r0;
    }

    public java.lang.StringBuilder append(long)
    {
        java.lang.StringBuilder r0;
        long l0;

        r0 := @this: java.lang.StringBuilder;
        l0 := @parameter0: long;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(long)>(l0);
        return r0;
    }

    public java.lang.StringBuilder append(float)
    {
        java.lang.StringBuilder r0;
        float f0;

        r0 := @this: java.lang.StringBuilder;
        f0 := @parameter0: float;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(float)>(f0);
        return r0;
    }

    public java.lang.StringBuilder append(double)
    {
        java.lang.StringBuilder r0;
        double d0;

        r0 := @this: java.lang.StringBuilder;
        d0 := @parameter0: double;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(double)>(d0);
        return r0;
    }

    public java.lang.StringBuilder appendCodePoint(int)
    {
        java.lang.StringBuilder r0;
        int i0;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder appendCodePoint(int)>(i0);
        return r0;
    }

    public java.lang.StringBuilder delete(int, int)
    {
        java.lang.StringBuilder r0;
        int i0, i1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder delete(int,int)>(i0, i1);
        return r0;
    }

    public java.lang.StringBuilder deleteCharAt(int)
    {
        java.lang.StringBuilder r0;
        int i0;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder deleteCharAt(int)>(i0);
        return r0;
    }

    public java.lang.StringBuilder replace(int, int, java.lang.String)
    {
        java.lang.StringBuilder r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.lang.String;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder replace(int,int,java.lang.String)>(i0, i1, r1);
        return r0;
    }

    public java.lang.StringBuilder insert(int, char[], int, int)
    {
        java.lang.StringBuilder r0;
        int i0, i1, i2;
        char[] r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        r1 := @parameter1: char[];
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder insert(int,char[],int,int)>(i0, r1, i1, i2);
        return r0;
    }

    public java.lang.StringBuilder insert(int, java.lang.Object)
    {
        java.lang.StringBuilder r0, $r3;
        int i0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);
        $r3 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(i0, $r2);
        return $r3;
    }

    public java.lang.StringBuilder insert(int, java.lang.String)
    {
        java.lang.StringBuilder r0;
        int i0;
        java.lang.String r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder insert(int,java.lang.String)>(i0, r1);
        return r0;
    }

    public java.lang.StringBuilder insert(int, char[])
    {
        java.lang.StringBuilder r0;
        int i0;
        char[] r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        r1 := @parameter1: char[];
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder insert(int,char[])>(i0, r1);
        return r0;
    }

    public java.lang.StringBuilder insert(int, java.lang.CharSequence)
    {
        java.lang.StringBuilder r0, $r3, $r4;
        int i0, $i1;
        java.lang.CharSequence r1;
        boolean $z0;
        java.lang.String $r2;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.CharSequence;
        if r1 != null goto label0;

        r1 = "null";

     label0:
        $z0 = r1 instanceof java.lang.String;
        if $z0 == 0 goto label1;

        $r2 = (java.lang.String) r1;
        $r3 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(i0, $r2);
        return $r3;

     label1:
        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();
        $r4 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence,int,int)>(i0, r1, 0, $i1);
        return $r4;
    }

    public java.lang.StringBuilder insert(int, java.lang.CharSequence, int, int)
    {
        java.lang.StringBuilder r0;
        int i0, i1, i2;
        java.lang.CharSequence r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.CharSequence;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder insert(int,java.lang.CharSequence,int,int)>(i0, r1, i1, i2);
        return r0;
    }

    public java.lang.StringBuilder insert(int, boolean)
    {
        java.lang.StringBuilder r0;
        int i0;
        boolean z0;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        z0 := @parameter1: boolean;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder insert(int,boolean)>(i0, z0);
        return r0;
    }

    public java.lang.StringBuilder insert(int, char)
    {
        java.lang.StringBuilder r0;
        int i0;
        char c1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        c1 := @parameter1: char;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder insert(int,char)>(i0, c1);
        return r0;
    }

    public java.lang.StringBuilder insert(int, int)
    {
        java.lang.StringBuilder r0, $r2;
        int i0, i1;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(i0, $r1);
        return $r2;
    }

    public java.lang.StringBuilder insert(int, long)
    {
        java.lang.StringBuilder r0, $r2;
        int i0;
        long l1;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        l1 := @parameter1: long;
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(i0, $r1);
        return $r2;
    }

    public java.lang.StringBuilder insert(int, float)
    {
        java.lang.StringBuilder r0, $r2;
        int i0;
        float f0;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(f0);
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(i0, $r1);
        return $r2;
    }

    public java.lang.StringBuilder insert(int, double)
    {
        java.lang.StringBuilder r0, $r2;
        int i0;
        double d0;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        d0 := @parameter1: double;
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0);
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(i0, $r1);
        return $r2;
    }

    public int indexOf(java.lang.String)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.String;
        $i0 = virtualinvoke r0.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>(r1, 0);
        return $i0;
    }

    public int indexOf(java.lang.String, int)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3;
        char[] $r2, $r3;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        $r2 = r0.<java.lang.StringBuilder: char[] value>;
        $i1 = r0.<java.lang.StringBuilder: int count>;
        $r3 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();
        $i3 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($r2, 0, $i1, $r3, 0, $i2, i0);
        return $i3;
    }

    public int lastIndexOf(java.lang.String)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1;
        int $i0, $i1;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.String;
        $i0 = r0.<java.lang.StringBuilder: int count>;
        $i1 = virtualinvoke r0.<java.lang.StringBuilder: int lastIndexOf(java.lang.String,int)>(r1, $i0);
        return $i1;
    }

    public int lastIndexOf(java.lang.String, int)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3;
        char[] $r2, $r3;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        $r2 = r0.<java.lang.StringBuilder: char[] value>;
        $i1 = r0.<java.lang.StringBuilder: int count>;
        $r3 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();
        $i3 = staticinvoke <java.lang.String: int lastIndexOf(char[],int,int,char[],int,int,int)>($r2, 0, $i1, $r3, 0, $i2, i0);
        return $i3;
    }

    public java.lang.StringBuilder reverse()
    {
        java.lang.StringBuilder r0;

        r0 := @this: java.lang.StringBuilder;
        specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder reverse()>();
        return r0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder r0;
        java.lang.String $r1;
        char[] $r2;
        int $i0;

        r0 := @this: java.lang.StringBuilder;
        $r1 = new java.lang.String;
        $r2 = r0.<java.lang.StringBuilder: char[] value>;
        $i0 = r0.<java.lang.StringBuilder: int count>;
        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, 0, $i0);
        return $r1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.lang.StringBuilder r0;
        java.io.ObjectOutputStream r1;
        int $i0;
        char[] $r2;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.io.ObjectOutputStream;
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        $i0 = r0.<java.lang.StringBuilder: int count>;
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);
        $r2 = r0.<java.lang.StringBuilder: char[] value>;
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r2);
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.StringBuilder r0;
        java.io.ObjectInputStream r1;
        int $i0;
        java.lang.Object $r2;
        char[] $r3, $r4;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.io.ObjectInputStream;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        $i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();
        r0.<java.lang.StringBuilder: int count> = $i0;
        $r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
        $r3 = (char[]) $r2;
        $r4 = (char[]) $r3;
        r0.<java.lang.StringBuilder: char[] value> = $r4;
        return;
    }

    public volatile java.lang.AbstractStringBuilder reverse()
    {
        java.lang.StringBuilder r0, $r1;

        r0 := @this: java.lang.StringBuilder;
        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder reverse()>();
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, double)
    {
        java.lang.StringBuilder r0, $r1;
        int i0;
        double d0;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        d0 := @parameter1: double;
        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,double)>(i0, d0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, float)
    {
        java.lang.StringBuilder r0, $r1;
        int i0;
        float f0;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,float)>(i0, f0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, long)
    {
        java.lang.StringBuilder r0, $r1;
        int i0;
        long l1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        l1 := @parameter1: long;
        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,long)>(i0, l1);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, int)
    {
        java.lang.StringBuilder r0, $r1;
        int i0, i1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>(i0, i1);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, char)
    {
        java.lang.StringBuilder r0, $r1;
        int i0;
        char c1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        c1 := @parameter1: char;
        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(i0, c1);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, boolean)
    {
        java.lang.StringBuilder r0, $r1;
        int i0;
        boolean z0;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        z0 := @parameter1: boolean;
        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,boolean)>(i0, z0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, java.lang.CharSequence, int, int)
    {
        java.lang.StringBuilder r0, $r2;
        int i0, i1, i2;
        java.lang.CharSequence r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.CharSequence;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence,int,int)>(i0, r1, i1, i2);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, java.lang.CharSequence)
    {
        java.lang.StringBuilder r0, $r2;
        int i0;
        java.lang.CharSequence r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.CharSequence;
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence)>(i0, r1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, char[])
    {
        java.lang.StringBuilder r0, $r2;
        int i0;
        char[] r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        r1 := @parameter1: char[];
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[])>(i0, r1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, java.lang.String)
    {
        java.lang.StringBuilder r0, $r2;
        int i0;
        java.lang.String r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(i0, r1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, java.lang.Object)
    {
        java.lang.StringBuilder r0, $r2;
        int i0;
        java.lang.Object r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.Object)>(i0, r1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder insert(int, char[], int, int)
    {
        java.lang.StringBuilder r0, $r2;
        int i0, i1, i2;
        char[] r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        r1 := @parameter1: char[];
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[],int,int)>(i0, r1, i1, i2);
        return $r2;
    }

    public volatile java.lang.String substring(int, int)
    {
        java.lang.StringBuilder r0;
        int i0, i1;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)>(i0, i1);
        return $r1;
    }

    public volatile java.lang.CharSequence subSequence(int, int)
    {
        java.lang.StringBuilder r0;
        int i0, i1;
        java.lang.CharSequence $r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.CharSequence subSequence(int,int)>(i0, i1);
        return $r1;
    }

    public volatile java.lang.String substring(int)
    {
        java.lang.StringBuilder r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        $r1 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.String substring(int)>(i0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder replace(int, int, java.lang.String)
    {
        java.lang.StringBuilder r0, $r2;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.lang.String;
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>(i0, i1, r1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder deleteCharAt(int)
    {
        java.lang.StringBuilder r0, $r1;
        int i0;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>(i0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder appendCodePoint(int)
    {
        java.lang.StringBuilder r0, $r1;
        int i0;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>(i0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder delete(int, int)
    {
        java.lang.StringBuilder r0, $r1;
        int i0, i1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(i0, i1);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder append(double)
    {
        java.lang.StringBuilder r0, $r1;
        double d0;

        r0 := @this: java.lang.StringBuilder;
        d0 := @parameter0: double;
        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder append(float)
    {
        java.lang.StringBuilder r0, $r1;
        float f0;

        r0 := @this: java.lang.StringBuilder;
        f0 := @parameter0: float;
        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder append(long)
    {
        java.lang.StringBuilder r0, $r1;
        long l0;

        r0 := @this: java.lang.StringBuilder;
        l0 := @parameter0: long;
        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder append(int)
    {
        java.lang.StringBuilder r0, $r1;
        int i0;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder append(char)
    {
        java.lang.StringBuilder r0, $r1;
        char c0;

        r0 := @this: java.lang.StringBuilder;
        c0 := @parameter0: char;
        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder append(boolean)
    {
        java.lang.StringBuilder r0, $r1;
        boolean z0;

        r0 := @this: java.lang.StringBuilder;
        z0 := @parameter0: boolean;
        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);
        return $r1;
    }

    public volatile java.lang.AbstractStringBuilder append(char[], int, int)
    {
        java.lang.StringBuilder r0, $r2;
        char[] r1;
        int i0, i1;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r1, i0, i1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder append(char[])
    {
        java.lang.StringBuilder r0, $r2;
        char[] r1;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: char[];
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>(r1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder append(java.lang.CharSequence, int, int)
    {
        java.lang.StringBuilder r0, $r2;
        java.lang.CharSequence r1;
        int i0, i1;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.CharSequence;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r1, i0, i1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder append(java.lang.CharSequence)
    {
        java.lang.StringBuilder r0, $r2;
        java.lang.CharSequence r1;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.CharSequence;
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder append(java.lang.StringBuffer)
    {
        java.lang.StringBuilder r0, $r2;
        java.lang.StringBuffer r1;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.StringBuffer;
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuffer)>(r1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder append(java.lang.String)
    {
        java.lang.StringBuilder r0, $r2;
        java.lang.String r1;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        return $r2;
    }

    public volatile java.lang.AbstractStringBuilder append(java.lang.Object)
    {
        java.lang.StringBuilder r0, $r2;
        java.lang.Object r1;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.Object;
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        return $r2;
    }

    public volatile void setCharAt(int, char)
    {
        java.lang.StringBuilder r0;
        int i0;
        char c1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        c1 := @parameter1: char;
        specialinvoke r0.<java.lang.AbstractStringBuilder: void setCharAt(int,char)>(i0, c1);
        return;
    }

    public volatile void getChars(int, int, char[], int)
    {
        java.lang.StringBuilder r0;
        int i0, i1, i2;
        char[] r1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: char[];
        i2 := @parameter3: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: void getChars(int,int,char[],int)>(i0, i1, r1, i2);
        return;
    }

    public volatile int offsetByCodePoints(int, int)
    {
        java.lang.StringBuilder r0;
        int i0, i1, $i2;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i2 = specialinvoke r0.<java.lang.AbstractStringBuilder: int offsetByCodePoints(int,int)>(i0, i1);
        return $i2;
    }

    public volatile int codePointCount(int, int)
    {
        java.lang.StringBuilder r0;
        int i0, i1, $i2;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        $i2 = specialinvoke r0.<java.lang.AbstractStringBuilder: int codePointCount(int,int)>(i0, i1);
        return $i2;
    }

    public volatile int codePointBefore(int)
    {
        java.lang.StringBuilder r0;
        int i0, $i1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        $i1 = specialinvoke r0.<java.lang.AbstractStringBuilder: int codePointBefore(int)>(i0);
        return $i1;
    }

    public volatile int codePointAt(int)
    {
        java.lang.StringBuilder r0;
        int i0, $i1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        $i1 = specialinvoke r0.<java.lang.AbstractStringBuilder: int codePointAt(int)>(i0);
        return $i1;
    }

    public volatile char charAt(int)
    {
        java.lang.StringBuilder r0;
        int i0;
        char $c1;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        $c1 = specialinvoke r0.<java.lang.AbstractStringBuilder: char charAt(int)>(i0);
        return $c1;
    }

    public volatile void setLength(int)
    {
        java.lang.StringBuilder r0;
        int i0;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: void setLength(int)>(i0);
        return;
    }

    public volatile void trimToSize()
    {
        java.lang.StringBuilder r0;

        r0 := @this: java.lang.StringBuilder;
        specialinvoke r0.<java.lang.AbstractStringBuilder: void trimToSize()>();
        return;
    }

    public volatile void ensureCapacity(int)
    {
        java.lang.StringBuilder r0;
        int i0;

        r0 := @this: java.lang.StringBuilder;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.AbstractStringBuilder: void ensureCapacity(int)>(i0);
        return;
    }

    public volatile int capacity()
    {
        java.lang.StringBuilder r0;
        int $i0;

        r0 := @this: java.lang.StringBuilder;
        $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int capacity()>();
        return $i0;
    }

    public volatile int length()
    {
        java.lang.StringBuilder r0;
        int $i0;

        r0 := @this: java.lang.StringBuilder;
        $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int length()>();
        return $i0;
    }

    public volatile java.lang.Appendable append(char) throws java.io.IOException
    {
        java.lang.StringBuilder r0, $r1;
        char c0;

        r0 := @this: java.lang.StringBuilder;
        c0 := @parameter0: char;
        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);
        return $r1;
    }

    public volatile java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException
    {
        java.lang.StringBuilder r0, $r2;
        java.lang.CharSequence r1;
        int i0, i1;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.CharSequence;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r1, i0, i1);
        return $r2;
    }

    public volatile java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException
    {
        java.lang.StringBuilder r0, $r2;
        java.lang.CharSequence r1;

        r0 := @this: java.lang.StringBuilder;
        r1 := @parameter0: java.lang.CharSequence;
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r1);
        return $r2;
    }
}
