class java.io.ObjectOutputStream$HandleTable extends java.lang.Object
{
    private int size;
    private int threshold;
    private final float loadFactor;
    private int[] spine;
    private int[] next;
    private java.lang.Object[] objs;

    void <init>(int, float)
    {
        java.io.ObjectOutputStream$HandleTable r0;
        int i0, $i1;
        float f0, $f1, $f2;
        int[] $r1, $r2;
        java.lang.Object[] $r3;

        r0 := @this: java.io.ObjectOutputStream$HandleTable;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.io.ObjectOutputStream$HandleTable: float loadFactor> = f0;
        $r1 = newarray (int)[i0];
        r0.<java.io.ObjectOutputStream$HandleTable: int[] spine> = $r1;
        $r2 = newarray (int)[i0];
        r0.<java.io.ObjectOutputStream$HandleTable: int[] next> = $r2;
        $r3 = newarray (java.lang.Object)[i0];
        r0.<java.io.ObjectOutputStream$HandleTable: java.lang.Object[] objs> = $r3;
        $f1 = (float) i0;
        $f2 = $f1 * f0;
        $i1 = (int) $f2;
        r0.<java.io.ObjectOutputStream$HandleTable: int threshold> = $i1;
        virtualinvoke r0.<java.io.ObjectOutputStream$HandleTable: void clear()>();
        return;
    }

    int assign(java.lang.Object)
    {
        java.io.ObjectOutputStream$HandleTable r0;
        java.lang.Object r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r2;

        r0 := @this: java.io.ObjectOutputStream$HandleTable;
        r1 := @parameter0: java.lang.Object;
        $i0 = r0.<java.io.ObjectOutputStream$HandleTable: int size>;
        $r2 = r0.<java.io.ObjectOutputStream$HandleTable: int[] next>;
        $i1 = lengthof $r2;
        if $i0 < $i1 goto label0;

        specialinvoke r0.<java.io.ObjectOutputStream$HandleTable: void growEntries()>();

     label0:
        $i2 = r0.<java.io.ObjectOutputStream$HandleTable: int size>;
        $i3 = r0.<java.io.ObjectOutputStream$HandleTable: int threshold>;
        if $i2 < $i3 goto label1;

        specialinvoke r0.<java.io.ObjectOutputStream$HandleTable: void growSpine()>();

     label1:
        $i4 = r0.<java.io.ObjectOutputStream$HandleTable: int size>;
        specialinvoke r0.<java.io.ObjectOutputStream$HandleTable: void insert(java.lang.Object,int)>(r1, $i4);
        $i5 = r0.<java.io.ObjectOutputStream$HandleTable: int size>;
        $i6 = $i5 + 1;
        r0.<java.io.ObjectOutputStream$HandleTable: int size> = $i6;
        return $i5;
    }

    int lookup(java.lang.Object)
    {
        java.io.ObjectOutputStream$HandleTable r0;
        java.lang.Object r1, $r5;
        int i0, i1, $i2, $i3, $i4;
        int[] $r2, $r3, $r6;
        java.lang.Object[] $r4;

        r0 := @this: java.io.ObjectOutputStream$HandleTable;
        r1 := @parameter0: java.lang.Object;
        $i2 = r0.<java.io.ObjectOutputStream$HandleTable: int size>;
        if $i2 != 0 goto label0;

        return -1;

     label0:
        $i3 = specialinvoke r0.<java.io.ObjectOutputStream$HandleTable: int hash(java.lang.Object)>(r1);
        $r2 = r0.<java.io.ObjectOutputStream$HandleTable: int[] spine>;
        $i4 = lengthof $r2;
        i0 = $i3 % $i4;
        $r3 = r0.<java.io.ObjectOutputStream$HandleTable: int[] spine>;
        i1 = $r3[i0];

     label1:
        if i1 < 0 goto label3;

        $r4 = r0.<java.io.ObjectOutputStream$HandleTable: java.lang.Object[] objs>;
        $r5 = $r4[i1];
        if $r5 != r1 goto label2;

        return i1;

     label2:
        $r6 = r0.<java.io.ObjectOutputStream$HandleTable: int[] next>;
        i1 = $r6[i1];
        goto label1;

     label3:
        return -1;
    }

    void clear()
    {
        java.io.ObjectOutputStream$HandleTable r0;
        int[] $r1;
        java.lang.Object[] $r2;
        int $i0;

        r0 := @this: java.io.ObjectOutputStream$HandleTable;
        $r1 = r0.<java.io.ObjectOutputStream$HandleTable: int[] spine>;
        staticinvoke <java.util.Arrays: void fill(int[],int)>($r1, -1);
        $r2 = r0.<java.io.ObjectOutputStream$HandleTable: java.lang.Object[] objs>;
        $i0 = r0.<java.io.ObjectOutputStream$HandleTable: int size>;
        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r2, 0, $i0, null);
        r0.<java.io.ObjectOutputStream$HandleTable: int size> = 0;
        return;
    }

    int size()
    {
        java.io.ObjectOutputStream$HandleTable r0;
        int $i0;

        r0 := @this: java.io.ObjectOutputStream$HandleTable;
        $i0 = r0.<java.io.ObjectOutputStream$HandleTable: int size>;
        return $i0;
    }

    private void insert(java.lang.Object, int)
    {
        java.io.ObjectOutputStream$HandleTable r0;
        java.lang.Object r1;
        int i0, i1, $i2, $i3, $i4;
        int[] $r2, $r4, $r5, $r6;
        java.lang.Object[] $r3;

        r0 := @this: java.io.ObjectOutputStream$HandleTable;
        r1 := @parameter0: java.lang.Object;
        i0 := @parameter1: int;
        $i2 = specialinvoke r0.<java.io.ObjectOutputStream$HandleTable: int hash(java.lang.Object)>(r1);
        $r2 = r0.<java.io.ObjectOutputStream$HandleTable: int[] spine>;
        $i3 = lengthof $r2;
        i1 = $i2 % $i3;
        $r3 = r0.<java.io.ObjectOutputStream$HandleTable: java.lang.Object[] objs>;
        $r3[i0] = r1;
        $r4 = r0.<java.io.ObjectOutputStream$HandleTable: int[] next>;
        $r5 = r0.<java.io.ObjectOutputStream$HandleTable: int[] spine>;
        $i4 = $r5[i1];
        $r4[i0] = $i4;
        $r6 = r0.<java.io.ObjectOutputStream$HandleTable: int[] spine>;
        $r6[i1] = i0;
        return;
    }

    private void growSpine()
    {
        java.io.ObjectOutputStream$HandleTable r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r1, $r2, $r3, $r4;
        float $f0, $f1, $f2;
        java.lang.Object[] $r5;
        java.lang.Object $r6;

        r0 := @this: java.io.ObjectOutputStream$HandleTable;
        $r1 = r0.<java.io.ObjectOutputStream$HandleTable: int[] spine>;
        $i1 = lengthof $r1;
        $i2 = $i1 << 1;
        $i3 = $i2 + 1;
        $r2 = newarray (int)[$i3];
        r0.<java.io.ObjectOutputStream$HandleTable: int[] spine> = $r2;
        $r3 = r0.<java.io.ObjectOutputStream$HandleTable: int[] spine>;
        $i4 = lengthof $r3;
        $f0 = (float) $i4;
        $f1 = r0.<java.io.ObjectOutputStream$HandleTable: float loadFactor>;
        $f2 = $f0 * $f1;
        $i5 = (int) $f2;
        r0.<java.io.ObjectOutputStream$HandleTable: int threshold> = $i5;
        $r4 = r0.<java.io.ObjectOutputStream$HandleTable: int[] spine>;
        staticinvoke <java.util.Arrays: void fill(int[],int)>($r4, -1);
        i0 = 0;

     label0:
        $i6 = r0.<java.io.ObjectOutputStream$HandleTable: int size>;
        if i0 >= $i6 goto label1;

        $r5 = r0.<java.io.ObjectOutputStream$HandleTable: java.lang.Object[] objs>;
        $r6 = $r5[i0];
        specialinvoke r0.<java.io.ObjectOutputStream$HandleTable: void insert(java.lang.Object,int)>($r6, i0);
        i0 = i0 + 1;
        goto label0;

     label1:
        return;
    }

    private void growEntries()
    {
        java.io.ObjectOutputStream$HandleTable r0;
        int i0, $i1, $i2, $i3, $i4;
        int[] r1, $r3, $r4;
        java.lang.Object[] r2, $r5;

        r0 := @this: java.io.ObjectOutputStream$HandleTable;
        $r3 = r0.<java.io.ObjectOutputStream$HandleTable: int[] next>;
        $i1 = lengthof $r3;
        $i2 = $i1 << 1;
        i0 = $i2 + 1;
        r1 = newarray (int)[i0];
        $r4 = r0.<java.io.ObjectOutputStream$HandleTable: int[] next>;
        $i3 = r0.<java.io.ObjectOutputStream$HandleTable: int size>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i3);
        r0.<java.io.ObjectOutputStream$HandleTable: int[] next> = r1;
        r2 = newarray (java.lang.Object)[i0];
        $r5 = r0.<java.io.ObjectOutputStream$HandleTable: java.lang.Object[] objs>;
        $i4 = r0.<java.io.ObjectOutputStream$HandleTable: int size>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r2, 0, $i4);
        r0.<java.io.ObjectOutputStream$HandleTable: java.lang.Object[] objs> = r2;
        return;
    }

    private int hash(java.lang.Object)
    {
        java.io.ObjectOutputStream$HandleTable r0;
        java.lang.Object r1;
        int $i0, $i1;

        r0 := @this: java.io.ObjectOutputStream$HandleTable;
        r1 := @parameter0: java.lang.Object;
        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1);
        $i1 = $i0 & 2147483647;
        return $i1;
    }
}
