public class sun.reflect.generics.visitor.Reifier extends java.lang.Object implements sun.reflect.generics.visitor.TypeTreeVisitor
{
    private java.lang.reflect.Type resultType;
    private sun.reflect.generics.factory.GenericsFactory factory;
    static final boolean $assertionsDisabled;

    private void <init>(sun.reflect.generics.factory.GenericsFactory)
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.factory.GenericsFactory r1;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        r1 := @parameter0: sun.reflect.generics.factory.GenericsFactory;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory factory> = r1;
        return;
    }

    private sun.reflect.generics.factory.GenericsFactory getFactory()
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.factory.GenericsFactory $r1;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        $r1 = r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory factory>;
        return $r1;
    }

    public static sun.reflect.generics.visitor.Reifier make(sun.reflect.generics.factory.GenericsFactory)
    {
        sun.reflect.generics.factory.GenericsFactory r0;
        sun.reflect.generics.visitor.Reifier $r1;

        r0 := @parameter0: sun.reflect.generics.factory.GenericsFactory;
        $r1 = new sun.reflect.generics.visitor.Reifier;
        specialinvoke $r1.<sun.reflect.generics.visitor.Reifier: void <init>(sun.reflect.generics.factory.GenericsFactory)>(r0);
        return $r1;
    }

    private java.lang.reflect.Type[] reifyTypeArguments(sun.reflect.generics.tree.TypeArgument[])
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.tree.TypeArgument[] r1;
        java.lang.reflect.Type[] r2;
        int i0, $i1, $i2;
        sun.reflect.generics.tree.TypeArgument $r3;
        java.lang.reflect.Type $r4;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        r1 := @parameter0: sun.reflect.generics.tree.TypeArgument[];
        $i1 = lengthof r1;
        r2 = newarray (java.lang.reflect.Type)[$i1];
        i0 = 0;

     label0:
        $i2 = lengthof r1;
        if i0 >= $i2 goto label1;

        $r3 = r1[i0];
        interfaceinvoke $r3.<sun.reflect.generics.tree.TypeArgument: void accept(sun.reflect.generics.visitor.TypeTreeVisitor)>(r0);
        $r4 = r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType>;
        r2[i0] = $r4;
        i0 = i0 + 1;
        goto label0;

     label1:
        return r2;
    }

    public java.lang.reflect.Type getResult()
    {
        sun.reflect.generics.visitor.Reifier r0;
        boolean $z0;
        java.lang.reflect.Type $r1, $r3;
        java.lang.AssertionError $r2;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        $z0 = <sun.reflect.generics.visitor.Reifier: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $r1 = r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType>;
        if $r1 != null goto label0;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label0:
        $r3 = r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType>;
        return $r3;
    }

    public void visitFormalTypeParameter(sun.reflect.generics.tree.FormalTypeParameter)
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.tree.FormalTypeParameter r1;
        sun.reflect.generics.factory.GenericsFactory $r2;
        java.lang.String $r3;
        sun.reflect.generics.tree.FieldTypeSignature[] $r4;
        java.lang.reflect.TypeVariable $r5;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        r1 := @parameter0: sun.reflect.generics.tree.FormalTypeParameter;
        $r2 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r3 = virtualinvoke r1.<sun.reflect.generics.tree.FormalTypeParameter: java.lang.String getName()>();
        $r4 = virtualinvoke r1.<sun.reflect.generics.tree.FormalTypeParameter: sun.reflect.generics.tree.FieldTypeSignature[] getBounds()>();
        $r5 = interfaceinvoke $r2.<sun.reflect.generics.factory.GenericsFactory: java.lang.reflect.TypeVariable makeTypeVariable(java.lang.String,sun.reflect.generics.tree.FieldTypeSignature[])>($r3, $r4);
        r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType> = $r5;
        return;
    }

    public void visitClassTypeSignature(sun.reflect.generics.tree.ClassTypeSignature)
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.tree.ClassTypeSignature r1;
        java.util.List r2;
        java.util.Iterator r3;
        sun.reflect.generics.tree.SimpleClassTypeSignature r4, r31;
        java.lang.StringBuilder r5, $r11, $r17, $r34;
        java.lang.reflect.Type r6, r39;
        java.lang.reflect.Type[] r7, r41;
        java.lang.reflect.ParameterizedType r8;
        boolean $z1, $z2, $z3, z4, $z5, $z6, $z7, $z8, $z9, z10, $z11, z12;
        java.lang.AssertionError $r9, $r21, $r25, $r27;
        java.lang.Object $r10, $r14, $r30;
        java.lang.String $r12, $r16, $r18, $r23, $r33, $r35, $r38;
        sun.reflect.generics.tree.TypeArgument[] $r13, $r20, $r24, $r26, $r28, $r40;
        int $i0, $i1, $i2, $i3;
        sun.reflect.generics.factory.GenericsFactory $r22, $r29, $r37, $r42;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        r1 := @parameter0: sun.reflect.generics.tree.ClassTypeSignature;
        r2 = virtualinvoke r1.<sun.reflect.generics.tree.ClassTypeSignature: java.util.List getPath()>();
        $z1 = <sun.reflect.generics.visitor.Reifier: boolean $assertionsDisabled>;
        if $z1 != 0 goto label0;

        $z2 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();
        if $z2 == 0 goto label0;

        $r9 = new java.lang.AssertionError;
        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();
        throw $r9;

     label0:
        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();
        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (sun.reflect.generics.tree.SimpleClassTypeSignature) $r10;
        $r11 = new java.lang.StringBuilder;
        $r12 = virtualinvoke r4.<sun.reflect.generics.tree.SimpleClassTypeSignature: java.lang.String getName()>();
        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);
        r5 = $r11;
        virtualinvoke r4.<sun.reflect.generics.tree.SimpleClassTypeSignature: boolean getDollar()>();

     label1:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z3 == 0 goto label4;

        $r13 = virtualinvoke r4.<sun.reflect.generics.tree.SimpleClassTypeSignature: sun.reflect.generics.tree.TypeArgument[] getTypeArguments()>();
        $i0 = lengthof $r13;
        if $i0 != 0 goto label4;

        $r14 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (sun.reflect.generics.tree.SimpleClassTypeSignature) $r14;
        z4 = virtualinvoke r4.<sun.reflect.generics.tree.SimpleClassTypeSignature: boolean getDollar()>();
        if z4 == 0 goto label2;

        $r16 = "$";
        goto label3;

     label2:
        $r16 = ".";

     label3:
        $r17 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);
        $r18 = virtualinvoke r4.<sun.reflect.generics.tree.SimpleClassTypeSignature: java.lang.String getName()>();
        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
        goto label1;

     label4:
        $z5 = <sun.reflect.generics.visitor.Reifier: boolean $assertionsDisabled>;
        if $z5 != 0 goto label5;

        $z6 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z6 == 0 goto label5;

        $r20 = virtualinvoke r4.<sun.reflect.generics.tree.SimpleClassTypeSignature: sun.reflect.generics.tree.TypeArgument[] getTypeArguments()>();
        $i1 = lengthof $r20;
        if $i1 > 0 goto label5;

        $r21 = new java.lang.AssertionError;
        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();
        throw $r21;

     label5:
        $r22 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r23 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();
        r6 = interfaceinvoke $r22.<sun.reflect.generics.factory.GenericsFactory: java.lang.reflect.Type makeNamedType(java.lang.String)>($r23);
        $r24 = virtualinvoke r4.<sun.reflect.generics.tree.SimpleClassTypeSignature: sun.reflect.generics.tree.TypeArgument[] getTypeArguments()>();
        $i2 = lengthof $r24;
        if $i2 != 0 goto label7;

        $z7 = <sun.reflect.generics.visitor.Reifier: boolean $assertionsDisabled>;
        if $z7 != 0 goto label6;

        $z8 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z8 == 0 goto label6;

        $r25 = new java.lang.AssertionError;
        specialinvoke $r25.<java.lang.AssertionError: void <init>()>();
        throw $r25;

     label6:
        r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType> = r6;
        goto label13;

     label7:
        $z9 = <sun.reflect.generics.visitor.Reifier: boolean $assertionsDisabled>;
        if $z9 != 0 goto label8;

        $r26 = virtualinvoke r4.<sun.reflect.generics.tree.SimpleClassTypeSignature: sun.reflect.generics.tree.TypeArgument[] getTypeArguments()>();
        $i3 = lengthof $r26;
        if $i3 > 0 goto label8;

        $r27 = new java.lang.AssertionError;
        specialinvoke $r27.<java.lang.AssertionError: void <init>()>();
        throw $r27;

     label8:
        $r28 = virtualinvoke r4.<sun.reflect.generics.tree.SimpleClassTypeSignature: sun.reflect.generics.tree.TypeArgument[] getTypeArguments()>();
        r7 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type[] reifyTypeArguments(sun.reflect.generics.tree.TypeArgument[])>($r28);
        $r29 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        r8 = interfaceinvoke $r29.<sun.reflect.generics.factory.GenericsFactory: java.lang.reflect.ParameterizedType makeParameterizedType(java.lang.reflect.Type,java.lang.reflect.Type[],java.lang.reflect.Type)>(r6, r7, null);
        z10 = 0;

     label9:
        $z11 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z11 == 0 goto label12;

        $r30 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r31 = (sun.reflect.generics.tree.SimpleClassTypeSignature) $r30;
        z12 = virtualinvoke r31.<sun.reflect.generics.tree.SimpleClassTypeSignature: boolean getDollar()>();
        if z12 == 0 goto label10;

        $r33 = "$";
        goto label11;

     label10:
        $r33 = ".";

     label11:
        $r34 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);
        $r35 = virtualinvoke r31.<sun.reflect.generics.tree.SimpleClassTypeSignature: java.lang.String getName()>();
        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);
        $r37 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r38 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();
        r39 = interfaceinvoke $r37.<sun.reflect.generics.factory.GenericsFactory: java.lang.reflect.Type makeNamedType(java.lang.String)>($r38);
        $r40 = virtualinvoke r31.<sun.reflect.generics.tree.SimpleClassTypeSignature: sun.reflect.generics.tree.TypeArgument[] getTypeArguments()>();
        r41 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type[] reifyTypeArguments(sun.reflect.generics.tree.TypeArgument[])>($r40);
        $r42 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        r8 = interfaceinvoke $r42.<sun.reflect.generics.factory.GenericsFactory: java.lang.reflect.ParameterizedType makeParameterizedType(java.lang.reflect.Type,java.lang.reflect.Type[],java.lang.reflect.Type)>(r39, r41, r8);
        goto label9;

     label12:
        r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType> = r8;

     label13:
        return;
    }

    public void visitArrayTypeSignature(sun.reflect.generics.tree.ArrayTypeSignature)
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.tree.ArrayTypeSignature r1;
        java.lang.reflect.Type r2, $r5;
        sun.reflect.generics.tree.TypeSignature $r3;
        sun.reflect.generics.factory.GenericsFactory $r4;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        r1 := @parameter0: sun.reflect.generics.tree.ArrayTypeSignature;
        $r3 = virtualinvoke r1.<sun.reflect.generics.tree.ArrayTypeSignature: sun.reflect.generics.tree.TypeSignature getComponentType()>();
        interfaceinvoke $r3.<sun.reflect.generics.tree.TypeSignature: void accept(sun.reflect.generics.visitor.TypeTreeVisitor)>(r0);
        r2 = r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType>;
        $r4 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r5 = interfaceinvoke $r4.<sun.reflect.generics.factory.GenericsFactory: java.lang.reflect.Type makeArrayType(java.lang.reflect.Type)>(r2);
        r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType> = $r5;
        return;
    }

    public void visitTypeVariableSignature(sun.reflect.generics.tree.TypeVariableSignature)
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.tree.TypeVariableSignature r1;
        sun.reflect.generics.factory.GenericsFactory $r2;
        java.lang.String $r3;
        java.lang.reflect.TypeVariable $r4;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        r1 := @parameter0: sun.reflect.generics.tree.TypeVariableSignature;
        $r2 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r3 = virtualinvoke r1.<sun.reflect.generics.tree.TypeVariableSignature: java.lang.String getIdentifier()>();
        $r4 = interfaceinvoke $r2.<sun.reflect.generics.factory.GenericsFactory: java.lang.reflect.TypeVariable findTypeVariable(java.lang.String)>($r3);
        r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType> = $r4;
        return;
    }

    public void visitWildcard(sun.reflect.generics.tree.Wildcard)
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.tree.Wildcard r1;
        sun.reflect.generics.factory.GenericsFactory $r2;
        sun.reflect.generics.tree.FieldTypeSignature[] $r3, $r4;
        java.lang.reflect.WildcardType $r5;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        r1 := @parameter0: sun.reflect.generics.tree.Wildcard;
        $r2 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r3 = virtualinvoke r1.<sun.reflect.generics.tree.Wildcard: sun.reflect.generics.tree.FieldTypeSignature[] getUpperBounds()>();
        $r4 = virtualinvoke r1.<sun.reflect.generics.tree.Wildcard: sun.reflect.generics.tree.FieldTypeSignature[] getLowerBounds()>();
        $r5 = interfaceinvoke $r2.<sun.reflect.generics.factory.GenericsFactory: java.lang.reflect.WildcardType makeWildcard(sun.reflect.generics.tree.FieldTypeSignature[],sun.reflect.generics.tree.FieldTypeSignature[])>($r3, $r4);
        r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType> = $r5;
        return;
    }

    public void visitSimpleClassTypeSignature(sun.reflect.generics.tree.SimpleClassTypeSignature)
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.tree.SimpleClassTypeSignature r1;
        sun.reflect.generics.factory.GenericsFactory $r2;
        java.lang.String $r3;
        java.lang.reflect.Type $r4;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        r1 := @parameter0: sun.reflect.generics.tree.SimpleClassTypeSignature;
        $r2 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r3 = virtualinvoke r1.<sun.reflect.generics.tree.SimpleClassTypeSignature: java.lang.String getName()>();
        $r4 = interfaceinvoke $r2.<sun.reflect.generics.factory.GenericsFactory: java.lang.reflect.Type makeNamedType(java.lang.String)>($r3);
        r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType> = $r4;
        return;
    }

    public void visitBottomSignature(sun.reflect.generics.tree.BottomSignature)
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.tree.BottomSignature r1;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        r1 := @parameter0: sun.reflect.generics.tree.BottomSignature;
        return;
    }

    public void visitByteSignature(sun.reflect.generics.tree.ByteSignature)
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.tree.ByteSignature r1;
        sun.reflect.generics.factory.GenericsFactory $r2;
        java.lang.reflect.Type $r3;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        r1 := @parameter0: sun.reflect.generics.tree.ByteSignature;
        $r2 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r3 = interfaceinvoke $r2.<sun.reflect.generics.factory.GenericsFactory: java.lang.reflect.Type makeByte()>();
        r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType> = $r3;
        return;
    }

    public void visitBooleanSignature(sun.reflect.generics.tree.BooleanSignature)
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.tree.BooleanSignature r1;
        sun.reflect.generics.factory.GenericsFactory $r2;
        java.lang.reflect.Type $r3;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        r1 := @parameter0: sun.reflect.generics.tree.BooleanSignature;
        $r2 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r3 = interfaceinvoke $r2.<sun.reflect.generics.factory.GenericsFactory: java.lang.reflect.Type makeBool()>();
        r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType> = $r3;
        return;
    }

    public void visitShortSignature(sun.reflect.generics.tree.ShortSignature)
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.tree.ShortSignature r1;
        sun.reflect.generics.factory.GenericsFactory $r2;
        java.lang.reflect.Type $r3;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        r1 := @parameter0: sun.reflect.generics.tree.ShortSignature;
        $r2 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r3 = interfaceinvoke $r2.<sun.reflect.generics.factory.GenericsFactory: java.lang.reflect.Type makeShort()>();
        r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType> = $r3;
        return;
    }

    public void visitCharSignature(sun.reflect.generics.tree.CharSignature)
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.tree.CharSignature r1;
        sun.reflect.generics.factory.GenericsFactory $r2;
        java.lang.reflect.Type $r3;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        r1 := @parameter0: sun.reflect.generics.tree.CharSignature;
        $r2 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r3 = interfaceinvoke $r2.<sun.reflect.generics.factory.GenericsFactory: java.lang.reflect.Type makeChar()>();
        r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType> = $r3;
        return;
    }

    public void visitIntSignature(sun.reflect.generics.tree.IntSignature)
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.tree.IntSignature r1;
        sun.reflect.generics.factory.GenericsFactory $r2;
        java.lang.reflect.Type $r3;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        r1 := @parameter0: sun.reflect.generics.tree.IntSignature;
        $r2 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r3 = interfaceinvoke $r2.<sun.reflect.generics.factory.GenericsFactory: java.lang.reflect.Type makeInt()>();
        r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType> = $r3;
        return;
    }

    public void visitLongSignature(sun.reflect.generics.tree.LongSignature)
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.tree.LongSignature r1;
        sun.reflect.generics.factory.GenericsFactory $r2;
        java.lang.reflect.Type $r3;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        r1 := @parameter0: sun.reflect.generics.tree.LongSignature;
        $r2 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r3 = interfaceinvoke $r2.<sun.reflect.generics.factory.GenericsFactory: java.lang.reflect.Type makeLong()>();
        r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType> = $r3;
        return;
    }

    public void visitFloatSignature(sun.reflect.generics.tree.FloatSignature)
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.tree.FloatSignature r1;
        sun.reflect.generics.factory.GenericsFactory $r2;
        java.lang.reflect.Type $r3;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        r1 := @parameter0: sun.reflect.generics.tree.FloatSignature;
        $r2 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r3 = interfaceinvoke $r2.<sun.reflect.generics.factory.GenericsFactory: java.lang.reflect.Type makeFloat()>();
        r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType> = $r3;
        return;
    }

    public void visitDoubleSignature(sun.reflect.generics.tree.DoubleSignature)
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.tree.DoubleSignature r1;
        sun.reflect.generics.factory.GenericsFactory $r2;
        java.lang.reflect.Type $r3;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        r1 := @parameter0: sun.reflect.generics.tree.DoubleSignature;
        $r2 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r3 = interfaceinvoke $r2.<sun.reflect.generics.factory.GenericsFactory: java.lang.reflect.Type makeDouble()>();
        r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType> = $r3;
        return;
    }

    public void visitVoidDescriptor(sun.reflect.generics.tree.VoidDescriptor)
    {
        sun.reflect.generics.visitor.Reifier r0;
        sun.reflect.generics.tree.VoidDescriptor r1;
        sun.reflect.generics.factory.GenericsFactory $r2;
        java.lang.reflect.Type $r3;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        r1 := @parameter0: sun.reflect.generics.tree.VoidDescriptor;
        $r2 = specialinvoke r0.<sun.reflect.generics.visitor.Reifier: sun.reflect.generics.factory.GenericsFactory getFactory()>();
        $r3 = interfaceinvoke $r2.<sun.reflect.generics.factory.GenericsFactory: java.lang.reflect.Type makeVoid()>();
        r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type resultType> = $r3;
        return;
    }

    public volatile java.lang.Object getResult()
    {
        sun.reflect.generics.visitor.Reifier r0;
        java.lang.reflect.Type $r1;

        r0 := @this: sun.reflect.generics.visitor.Reifier;
        $r1 = virtualinvoke r0.<sun.reflect.generics.visitor.Reifier: java.lang.reflect.Type getResult()>();
        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "sun/reflect/generics/visitor/Reifier";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <sun.reflect.generics.visitor.Reifier: boolean $assertionsDisabled> = $z1;
        return;
    }
}
