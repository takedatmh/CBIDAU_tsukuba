public class org.apache.tomcat.util.modeler.Registry extends java.lang.Object implements org.apache.tomcat.util.modeler.RegistryMBean, javax.management.MBeanRegistration
{
    private static final org.apache.juli.logging.Log log;
    private static java.util.HashMap perLoaderRegistries;
    private static org.apache.tomcat.util.modeler.Registry registry;
    private javax.management.MBeanServer server;
    private java.util.HashMap descriptors;
    private java.util.HashMap descriptorsByClass;
    private java.util.HashMap searchedPaths;
    private java.lang.Object guard;
    private java.util.Hashtable idDomains;
    private java.util.Hashtable ids;

    static void <clinit>()
    {
        org.apache.juli.logging.Log $r0;

        $r0 = staticinvoke <org.apache.juli.logging.LogFactory: org.apache.juli.logging.Log getLog(java.lang.Class)>(class "org/apache/tomcat/util/modeler/Registry");
        <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log> = $r0;
        <org.apache.tomcat.util.modeler.Registry: java.util.HashMap perLoaderRegistries> = null;
        <org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.Registry registry> = null;
        return;
    }

    public void <init>()
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.util.HashMap $r1, $r2, $r3;
        java.util.Hashtable $r4, $r5;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer server> = null;
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>()>();
        r0.<org.apache.tomcat.util.modeler.Registry: java.util.HashMap descriptors> = $r1;
        $r2 = new java.util.HashMap;
        specialinvoke $r2.<java.util.HashMap: void <init>()>();
        r0.<org.apache.tomcat.util.modeler.Registry: java.util.HashMap descriptorsByClass> = $r2;
        $r3 = new java.util.HashMap;
        specialinvoke $r3.<java.util.HashMap: void <init>()>();
        r0.<org.apache.tomcat.util.modeler.Registry: java.util.HashMap searchedPaths> = $r3;
        $r4 = new java.util.Hashtable;
        specialinvoke $r4.<java.util.Hashtable: void <init>()>();
        r0.<org.apache.tomcat.util.modeler.Registry: java.util.Hashtable idDomains> = $r4;
        $r5 = new java.util.Hashtable;
        specialinvoke $r5.<java.util.Hashtable: void <init>()>();
        r0.<org.apache.tomcat.util.modeler.Registry: java.util.Hashtable ids> = $r5;
        return;
    }

    public static synchronized org.apache.tomcat.util.modeler.Registry getRegistry(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1, $r6, $r11, $r12, $r16, $r18;
        java.util.HashMap $r2, $r5, $r9;
        org.apache.tomcat.util.modeler.Registry r3, $r7, r8, $r13, $r14, $r15, $r17, $r19;
        java.lang.Thread $r4;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.Object;
        $r2 = <org.apache.tomcat.util.modeler.Registry: java.util.HashMap perLoaderRegistries>;
        if $r2 == null goto label3;

        if r0 != null goto label0;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r0 = virtualinvoke $r4.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label0:
        if r0 == null goto label3;

        $r5 = <org.apache.tomcat.util.modeler.Registry: java.util.HashMap perLoaderRegistries>;
        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);
        r3 = (org.apache.tomcat.util.modeler.Registry) $r6;
        if r3 != null goto label1;

        $r7 = new org.apache.tomcat.util.modeler.Registry;
        specialinvoke $r7.<org.apache.tomcat.util.modeler.Registry: void <init>()>();
        r8 = $r7;
        r8.<org.apache.tomcat.util.modeler.Registry: java.lang.Object guard> = r1;
        $r9 = <org.apache.tomcat.util.modeler.Registry: java.util.HashMap perLoaderRegistries>;
        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r8);
        return r8;

     label1:
        $r11 = r3.<org.apache.tomcat.util.modeler.Registry: java.lang.Object guard>;
        if $r11 == null goto label2;

        $r12 = r3.<org.apache.tomcat.util.modeler.Registry: java.lang.Object guard>;
        if $r12 == r1 goto label2;

        return null;

     label2:
        return r3;

     label3:
        $r13 = <org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.Registry registry>;
        if $r13 != null goto label4;

        $r14 = new org.apache.tomcat.util.modeler.Registry;
        specialinvoke $r14.<org.apache.tomcat.util.modeler.Registry: void <init>()>();
        <org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.Registry registry> = $r14;

     label4:
        $r15 = <org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.Registry registry>;
        $r16 = $r15.<org.apache.tomcat.util.modeler.Registry: java.lang.Object guard>;
        if $r16 == null goto label5;

        $r17 = <org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.Registry registry>;
        $r18 = $r17.<org.apache.tomcat.util.modeler.Registry: java.lang.Object guard>;
        if $r18 == r1 goto label5;

        return null;

     label5:
        $r19 = <org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.Registry registry>;
        return $r19;
    }

    public static void setUseContextClassLoader(boolean)
    {
        boolean z0;
        java.util.HashMap $r0;

        z0 := @parameter0: boolean;
        if z0 == 0 goto label0;

        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        <org.apache.tomcat.util.modeler.Registry: java.util.HashMap perLoaderRegistries> = $r0;

     label0:
        return;
    }

    public void stop()
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.util.HashMap $r1, $r2, $r3;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>()>();
        r0.<org.apache.tomcat.util.modeler.Registry: java.util.HashMap descriptorsByClass> = $r1;
        $r2 = new java.util.HashMap;
        specialinvoke $r2.<java.util.HashMap: void <init>()>();
        r0.<org.apache.tomcat.util.modeler.Registry: java.util.HashMap descriptors> = $r2;
        $r3 = new java.util.HashMap;
        specialinvoke $r3.<java.util.HashMap: void <init>()>();
        r0.<org.apache.tomcat.util.modeler.Registry: java.util.HashMap searchedPaths> = $r3;
        return;
    }

    public java.util.List loadMBeans(java.lang.Object, java.lang.ClassLoader) throws java.lang.Exception
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.lang.Object r1;
        java.lang.ClassLoader r2;
        java.util.List $r3;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.ClassLoader;
        $r3 = virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>("MbeansSource", r1, null);
        return $r3;
    }

    public void loadMetadata(java.lang.Object) throws java.lang.Exception
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.lang.Object r1;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.lang.Object;
        specialinvoke r0.<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.Object,java.lang.String)>(null, r1, null);
        return;
    }

    public void registerComponent(java.lang.Object, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.lang.Object r1;
        java.lang.String r2, r3;
        javax.management.ObjectName $r4;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        $r4 = new javax.management.ObjectName;
        specialinvoke $r4.<javax.management.ObjectName: void <init>(java.lang.String)>(r2);
        virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: void registerComponent(java.lang.Object,javax.management.ObjectName,java.lang.String)>(r1, $r4, r3);
        return;
    }

    public void unregisterComponent(java.lang.String)
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.lang.String r1, $r8;
        javax.management.ObjectName $r2;
        javax.management.MalformedObjectNameException r3, $r4;
        org.apache.juli.logging.Log $r5;
        java.lang.StringBuilder $r6, $r7;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.lang.String;

     label0:
        $r2 = new javax.management.ObjectName;
        specialinvoke $r2.<javax.management.ObjectName: void <init>(java.lang.String)>(r1);
        virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: void unregisterComponent(javax.management.ObjectName)>($r2);

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r3 = $r4;
        $r5 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error creating object name ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r5.<org.apache.juli.logging.Log: void info(java.lang.Object)>($r8);

     label3:
        return;

        catch javax.management.MalformedObjectNameException from label0 to label1 with label2;
    }

    public void invoke(java.util.List, java.lang.String, boolean) throws java.lang.Exception
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.util.List r1;
        java.lang.String r2, $r17, $r19;
        boolean z0, $z1;
        java.util.Iterator r3;
        javax.management.ObjectName r4;
        java.lang.Exception r5, $r12;
        java.lang.Object $r6;
        javax.management.MBeanOperationInfo $r7;
        javax.management.MBeanServer $r8;
        java.lang.Object[] $r9;
        java.lang.String[] $r10;
        org.apache.juli.logging.Log $r13;
        java.lang.StringBuilder $r14, $r15, $r16, $r18;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.util.List;
        r2 := @parameter1: java.lang.String;
        z0 := @parameter2: boolean;
        if r1 != null goto label0;

        return;

     label0:
        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();
        goto label10;

     label1:
        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        r4 = (javax.management.ObjectName) $r6;

     label2:
        if r4 != null goto label4;

     label3:
        goto label10;

     label4:
        $r7 = virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanOperationInfo getMethodInfo(javax.management.ObjectName,java.lang.String)>(r4, r2);
        if $r7 != null goto label6;

     label5:
        goto label10;

     label6:
        $r8 = virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>();
        $r9 = newarray (java.lang.Object)[0];
        $r10 = newarray (java.lang.String)[0];
        interfaceinvoke $r8.<javax.management.MBeanServer: java.lang.Object invoke(javax.management.ObjectName,java.lang.String,java.lang.Object[],java.lang.String[])>(r4, r2, $r9, $r10);

     label7:
        goto label10;

     label8:
        $r12 := @caughtexception;
        r5 = $r12;
        if z0 == 0 goto label9;

        throw r5;

     label9:
        $r13 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error initializing ");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r17 = virtualinvoke r5.<java.lang.Exception: java.lang.String toString()>();
        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r13.<org.apache.juli.logging.Log: void info(java.lang.Object)>($r19);

     label10:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z1 != 0 goto label1;

        return;

        catch java.lang.Exception from label2 to label3 with label8;
        catch java.lang.Exception from label4 to label5 with label8;
        catch java.lang.Exception from label6 to label7 with label8;
    }

    public synchronized int getId(java.lang.String, java.lang.String)
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.lang.String r1, r2;
        java.util.Hashtable r3, $r6, $r8, $r9, $r12, $r14;
        java.lang.Integer r4, $r17;
        int[] r5;
        int i0, $i1, $i3, $i4;
        java.lang.Object $r7, $r11, $r13;
        byte $b2;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        if r1 != null goto label0;

        r1 = "";

     label0:
        $r6 = r0.<org.apache.tomcat.util.modeler.Registry: java.util.Hashtable idDomains>;
        $r7 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);
        r3 = (java.util.Hashtable) $r7;
        if r3 != null goto label1;

        $r8 = new java.util.Hashtable;
        specialinvoke $r8.<java.util.Hashtable: void <init>()>();
        r3 = $r8;
        $r9 = r0.<org.apache.tomcat.util.modeler.Registry: java.util.Hashtable idDomains>;
        virtualinvoke $r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

     label1:
        if r2 != null goto label2;

        r2 = "";

     label2:
        $r11 = virtualinvoke r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);
        r4 = (java.lang.Integer) $r11;
        if r4 == null goto label3;

        $i1 = virtualinvoke r4.<java.lang.Integer: int intValue()>();
        return $i1;

     label3:
        $r12 = r0.<org.apache.tomcat.util.modeler.Registry: java.util.Hashtable ids>;
        $r13 = virtualinvoke $r12.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);
        r5 = (int[]) $r13;
        if r5 != null goto label4;

        r5 = newarray (int)[1];
        $r14 = r0.<org.apache.tomcat.util.modeler.Registry: java.util.Hashtable ids>;
        virtualinvoke $r14.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5);

     label4:
        $b2 = 0;
        $i3 = r5[$b2];
        $i4 = $i3 + 1;
        r5[$b2] = $i4;
        i0 = $i3;
        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        virtualinvoke r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r17);
        return i0;
    }

    public void addManagedBean(org.apache.tomcat.util.modeler.ManagedBean)
    {
        org.apache.tomcat.util.modeler.Registry r0;
        org.apache.tomcat.util.modeler.ManagedBean r1;
        java.util.HashMap $r2, $r6;
        java.lang.String $r3, $r5, $r7;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: org.apache.tomcat.util.modeler.ManagedBean;
        $r2 = r0.<org.apache.tomcat.util.modeler.Registry: java.util.HashMap descriptors>;
        $r3 = virtualinvoke r1.<org.apache.tomcat.util.modeler.ManagedBean: java.lang.String getName()>();
        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);
        $r5 = virtualinvoke r1.<org.apache.tomcat.util.modeler.ManagedBean: java.lang.String getType()>();
        if $r5 == null goto label0;

        $r6 = r0.<org.apache.tomcat.util.modeler.Registry: java.util.HashMap descriptorsByClass>;
        $r7 = virtualinvoke r1.<org.apache.tomcat.util.modeler.ManagedBean: java.lang.String getType()>();
        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r1);

     label0:
        return;
    }

    public org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.String)
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.lang.String r1;
        org.apache.tomcat.util.modeler.ManagedBean r2;
        java.util.HashMap $r3, $r5;
        java.lang.Object $r4, $r6;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.lang.String;
        $r3 = r0.<org.apache.tomcat.util.modeler.Registry: java.util.HashMap descriptors>;
        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);
        r2 = (org.apache.tomcat.util.modeler.ManagedBean) $r4;
        if r2 != null goto label0;

        $r5 = r0.<org.apache.tomcat.util.modeler.Registry: java.util.HashMap descriptorsByClass>;
        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);
        r2 = (org.apache.tomcat.util.modeler.ManagedBean) $r6;

     label0:
        return r2;
    }

    public java.lang.String[] findManagedBeans()
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.util.HashMap $r1;
        java.util.Set $r2;
        java.lang.String[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        $r1 = r0.<org.apache.tomcat.util.modeler.Registry: java.util.HashMap descriptors>;
        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();
        $r3 = newarray (java.lang.String)[0];
        $r4 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);
        $r5 = (java.lang.String[]) $r4;
        return $r5;
    }

    public java.lang.String[] findManagedBeans(java.lang.String)
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.lang.String r1, $r9, $r10, $r11, $r12;
        java.util.ArrayList $r2, r3;
        java.util.Iterator r4;
        org.apache.tomcat.util.modeler.ManagedBean r5;
        java.util.HashMap $r6;
        java.util.Collection $r7;
        java.lang.Object $r8;
        boolean $z1, $z3;
        int $i0;
        java.lang.String[] r13, $r15;
        java.lang.Object[] $r14;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.lang.String;
        $r2 = new java.util.ArrayList;
        specialinvoke $r2.<java.util.ArrayList: void <init>()>();
        r3 = $r2;
        $r6 = r0.<org.apache.tomcat.util.modeler.Registry: java.util.HashMap descriptors>;
        $r7 = virtualinvoke $r6.<java.util.HashMap: java.util.Collection values()>();
        r4 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();
        goto label2;

     label0:
        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        r5 = (org.apache.tomcat.util.modeler.ManagedBean) $r8;
        if r1 != null goto label1;

        $r9 = virtualinvoke r5.<org.apache.tomcat.util.modeler.ManagedBean: java.lang.String getGroup()>();
        if $r9 != null goto label2;

        $r10 = virtualinvoke r5.<org.apache.tomcat.util.modeler.ManagedBean: java.lang.String getName()>();
        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);
        goto label2;

     label1:
        $r11 = virtualinvoke r5.<org.apache.tomcat.util.modeler.ManagedBean: java.lang.String getGroup()>();
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r11);
        if $z1 == 0 goto label2;

        $r12 = virtualinvoke r5.<org.apache.tomcat.util.modeler.ManagedBean: java.lang.String getName()>();
        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

     label2:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        if $z3 != 0 goto label0;

        $i0 = virtualinvoke r3.<java.util.ArrayList: int size()>();
        r13 = newarray (java.lang.String)[$i0];
        $r14 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r13);
        $r15 = (java.lang.String[]) $r14;
        return $r15;
    }

    public void removeManagedBean(org.apache.tomcat.util.modeler.ManagedBean)
    {
        org.apache.tomcat.util.modeler.Registry r0;
        org.apache.tomcat.util.modeler.ManagedBean r1;
        java.util.HashMap $r2, $r5;
        java.lang.String $r3, $r6;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: org.apache.tomcat.util.modeler.ManagedBean;
        $r2 = r0.<org.apache.tomcat.util.modeler.Registry: java.util.HashMap descriptors>;
        $r3 = virtualinvoke r1.<org.apache.tomcat.util.modeler.ManagedBean: java.lang.String getName()>();
        virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r3);
        $r5 = r0.<org.apache.tomcat.util.modeler.Registry: java.util.HashMap descriptorsByClass>;
        $r6 = virtualinvoke r1.<org.apache.tomcat.util.modeler.ManagedBean: java.lang.String getType()>();
        virtualinvoke $r5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r6);
        return;
    }

    public java.lang.String getType(javax.management.ObjectName, java.lang.String)
    {
        org.apache.tomcat.util.modeler.Registry r0;
        javax.management.ObjectName r1;
        java.lang.String r2, $r10, $r13, r15;
        null_type n0, n1;
        java.lang.Exception r3, $r6;
        int i0, $i1;
        javax.management.MBeanServer $r4;
        javax.management.MBeanInfo r5;
        org.apache.juli.logging.Log $r7;
        java.lang.StringBuilder $r8, $r9;
        javax.management.MBeanAttributeInfo[] r11;
        javax.management.MBeanAttributeInfo $r12, $r14;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: javax.management.ObjectName;
        r2 := @parameter1: java.lang.String;
        n0 = null;
        n1 = null;

     label0:
        $r4 = r0.<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer server>;
        r5 = interfaceinvoke $r4.<javax.management.MBeanServer: javax.management.MBeanInfo getMBeanInfo(javax.management.ObjectName)>(r1);

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r3 = $r6;
        $r7 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Can\'t find metadata for object");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r7.<org.apache.juli.logging.Log: void info(java.lang.Object)>($r10);
        return null;

     label3:
        r11 = virtualinvoke r5.<javax.management.MBeanInfo: javax.management.MBeanAttributeInfo[] getAttributes()>();
        i0 = 0;
        goto label6;

     label4:
        $r12 = r11[i0];
        $r13 = virtualinvoke $r12.<javax.management.MBeanAttributeInfo: java.lang.String getName()>();
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r13);
        if $z0 == 0 goto label5;

        $r14 = r11[i0];
        r15 = virtualinvoke $r14.<javax.management.MBeanAttributeInfo: java.lang.String getType()>();
        return r15;

     label5:
        i0 = i0 + 1;

     label6:
        $i1 = lengthof r11;
        if i0 < $i1 goto label4;

        return null;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public javax.management.MBeanOperationInfo getMethodInfo(javax.management.ObjectName, java.lang.String)
    {
        org.apache.tomcat.util.modeler.Registry r0;
        javax.management.ObjectName r1;
        java.lang.String r2, $r10, $r13;
        null_type n0;
        java.lang.Exception r3, $r6;
        int i0, $i1;
        javax.management.MBeanServer $r4;
        javax.management.MBeanInfo r5;
        org.apache.juli.logging.Log $r7;
        java.lang.StringBuilder $r8, $r9;
        javax.management.MBeanOperationInfo[] r11;
        javax.management.MBeanOperationInfo $r12, $r14;
        boolean $z0;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: javax.management.ObjectName;
        r2 := @parameter1: java.lang.String;
        n0 = null;

     label0:
        $r4 = r0.<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer server>;
        r5 = interfaceinvoke $r4.<javax.management.MBeanServer: javax.management.MBeanInfo getMBeanInfo(javax.management.ObjectName)>(r1);

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r3 = $r6;
        $r7 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Can\'t find metadata ");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r7.<org.apache.juli.logging.Log: void info(java.lang.Object)>($r10);
        return null;

     label3:
        r11 = virtualinvoke r5.<javax.management.MBeanInfo: javax.management.MBeanOperationInfo[] getOperations()>();
        i0 = 0;
        goto label6;

     label4:
        $r12 = r11[i0];
        $r13 = virtualinvoke $r12.<javax.management.MBeanOperationInfo: java.lang.String getName()>();
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r13);
        if $z0 == 0 goto label5;

        $r14 = r11[i0];
        return $r14;

     label5:
        i0 = i0 + 1;

     label6:
        $i1 = lengthof r11;
        if i0 < $i1 goto label4;

        return null;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public void unregisterComponent(javax.management.ObjectName)
    {
        org.apache.tomcat.util.modeler.Registry r0;
        javax.management.ObjectName r1;
        java.lang.Throwable r2, $r5;
        javax.management.MBeanServer $r3, $r4;
        boolean $z0;
        org.apache.juli.logging.Log $r6;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: javax.management.ObjectName;

     label0:
        $r3 = virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>();
        $z0 = interfaceinvoke $r3.<javax.management.MBeanServer: boolean isRegistered(javax.management.ObjectName)>(r1);
        if $z0 == 0 goto label3;

        $r4 = virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>();
        interfaceinvoke $r4.<javax.management.MBeanServer: void unregisterMBean(javax.management.ObjectName)>(r1);

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r2 = $r5;
        $r6 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        interfaceinvoke $r6.<org.apache.juli.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Error unregistering mbean ", r2);

     label3:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
    }

    public synchronized javax.management.MBeanServer getMBeanServer()
    {
        org.apache.tomcat.util.modeler.Registry r0;
        long l0, $l2, $l3, $l4, $l5;
        javax.management.MBeanServer $r1, $r5, $r11, $r17;
        java.util.ArrayList $r2, $r3;
        int $i1;
        java.lang.Object $r4;
        org.apache.juli.logging.Log $r6, $r7, $r12, $r13;
        boolean $z0, $z1;
        java.lang.StringBuilder $r8, $r9, $r14, $r15;
        java.lang.String $r10, $r16;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $r1 = r0.<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer server>;
        if $r1 != null goto label1;

        $r2 = staticinvoke <javax.management.MBeanServerFactory: java.util.ArrayList findMBeanServer(java.lang.String)>(null);
        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();
        if $i1 <= 0 goto label0;

        $r3 = staticinvoke <javax.management.MBeanServerFactory: java.util.ArrayList findMBeanServer(java.lang.String)>(null);
        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(0);
        $r5 = (javax.management.MBeanServer) $r4;
        r0.<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer server> = $r5;
        $r6 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $z0 = interfaceinvoke $r6.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label1;

        $r7 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Using existing MBeanServer ");
        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l3 = $l2 - l0;
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r7.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r10);
        goto label1;

     label0:
        $r11 = staticinvoke <java.lang.management.ManagementFactory: javax.management.MBeanServer getPlatformMBeanServer()>();
        r0.<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer server> = $r11;
        $r12 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $z1 = interfaceinvoke $r12.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z1 == 0 goto label1;

        $r13 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Creating MBeanServer");
        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l5 = $l4 - l0;
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r13.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r16);

     label1:
        $r17 = r0.<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer server>;
        return $r17;
    }

    public org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object, java.lang.Class, java.lang.String) throws java.lang.Exception
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.lang.Object r1;
        java.lang.Class r2;
        java.lang.String r3, $r12;
        org.apache.tomcat.util.modeler.ManagedBean r4;
        org.apache.juli.logging.Log $r5, $r6, $r7, $r8, $r9;
        boolean $z0, $z1;
        java.lang.StringBuilder $r10, $r11;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Class;
        r3 := @parameter2: java.lang.String;
        if r1 == null goto label0;

        if r2 != null goto label0;

        r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

     label0:
        if r3 != null goto label1;

        r3 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

     label1:
        r4 = virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.String)>(r3);
        if r4 != null goto label3;

        $r5 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $z0 = interfaceinvoke $r5.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label2;

        $r6 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        interfaceinvoke $r6.<org.apache.juli.logging.Log: void debug(java.lang.Object)>("Looking for descriptor ");

     label2:
        specialinvoke r0.<org.apache.tomcat.util.modeler.Registry: void findDescriptor(java.lang.Class,java.lang.String)>(r2, r3);
        r4 = virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.String)>(r3);

     label3:
        if r4 != null goto label6;

        $r7 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $z1 = interfaceinvoke $r7.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z1 == 0 goto label4;

        $r8 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        interfaceinvoke $r8.<org.apache.juli.logging.Log: void debug(java.lang.Object)>("Introspecting ");

     label4:
        specialinvoke r0.<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.Object,java.lang.String)>("MbeansDescriptorsIntrospectionSource", r2, r3);
        r4 = virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.String)>(r3);
        if r4 != null goto label5;

        $r9 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $r10 = new java.lang.StringBuilder;
        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("No metadata found for ");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r9.<org.apache.juli.logging.Log: void warn(java.lang.Object)>($r12);
        return null;

     label5:
        virtualinvoke r4.<org.apache.tomcat.util.modeler.ManagedBean: void setName(java.lang.String)>(r3);
        virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: void addManagedBean(org.apache.tomcat.util.modeler.ManagedBean)>(r4);

     label6:
        return r4;
    }

    public java.lang.Object convertValue(java.lang.String, java.lang.String)
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.lang.String r1, r2, $r5, $r6, $r7, $r10, $r11, $r12, $r13, $r14, $r15;
        java.io.Serializable r3;
        javax.management.MalformedObjectNameException r4, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        javax.management.ObjectName $r8;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 = r2;
        if r1 == null goto label0;

        $r5 = "java.lang.String";
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z0 == 0 goto label1;

     label0:
        r3 = r2;
        goto label11;

     label1:
        $r6 = "javax.management.ObjectName";
        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z1 != 0 goto label2;

        $r7 = "ObjectName";
        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z2 == 0 goto label5;

     label2:
        $r8 = new javax.management.ObjectName;
        specialinvoke $r8.<javax.management.ObjectName: void <init>(java.lang.String)>(r2);
        r3 = $r8;

     label3:
        goto label11;

     label4:
        $r9 := @caughtexception;
        r4 = $r9;
        return null;

     label5:
        $r10 = "java.lang.Integer";
        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z3 != 0 goto label6;

        $r11 = "int";
        $z4 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z4 == 0 goto label7;

     label6:
        r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r2);
        goto label11;

     label7:
        $r12 = "java.lang.Long";
        $z5 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z5 != 0 goto label8;

        $r13 = "long";
        $z6 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z6 == 0 goto label9;

     label8:
        r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r2);
        goto label11;

     label9:
        $r14 = "java.lang.Boolean";
        $z7 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z7 != 0 goto label10;

        $r15 = "boolean";
        $z8 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z8 == 0 goto label11;

     label10:
        r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r2);

     label11:
        return r3;

        catch javax.management.MalformedObjectNameException from label2 to label3 with label4;
    }

    public java.util.List load(java.lang.String, java.lang.Object, java.lang.String) throws java.lang.Exception
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.lang.String r1, r3, r6, $r12, r13, r15;
        java.lang.Object r2, r7;
        org.apache.juli.logging.Log $r4, $r10;
        java.lang.StringBuilder $r5, $r11;
        null_type n0;
        java.net.URL r8;
        java.util.List r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.File $r14, $r17;
        java.io.FileInputStream $r16;
        java.lang.Class $r18;
        org.apache.tomcat.util.modeler.modules.ModelerSource r20;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object;
        r3 := @parameter2: java.lang.String;
        $r4 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $z0 = interfaceinvoke $r4.<org.apache.juli.logging.Log: boolean isTraceEnabled()>();
        if $z0 == 0 goto label0;

        $r10 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("load ");
        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r10.<org.apache.juli.logging.Log: void trace(java.lang.Object)>($r12);

     label0:
        n0 = null;
        r6 = null;
        r7 = null;
        $z1 = r2 instanceof java.net.URL;
        if $z1 == 0 goto label1;

        r8 = (java.net.URL) r2;
        r13 = virtualinvoke r8.<java.net.URL: java.lang.String toString()>();
        r6 = r3;
        r7 = virtualinvoke r8.<java.net.URL: java.io.InputStream openStream()>();
        if r1 != null goto label4;

        r1 = specialinvoke r0.<org.apache.tomcat.util.modeler.Registry: java.lang.String sourceTypeFromExt(java.lang.String)>(r13);
        goto label4;

     label1:
        $z2 = r2 instanceof java.io.File;
        if $z2 == 0 goto label2;

        $r14 = (java.io.File) r2;
        r15 = virtualinvoke $r14.<java.io.File: java.lang.String getAbsolutePath()>();
        $r16 = new java.io.FileInputStream;
        $r17 = (java.io.File) r2;
        specialinvoke $r16.<java.io.FileInputStream: void <init>(java.io.File)>($r17);
        r7 = $r16;
        r6 = r3;
        if r1 != null goto label4;

        r1 = specialinvoke r0.<org.apache.tomcat.util.modeler.Registry: java.lang.String sourceTypeFromExt(java.lang.String)>(r15);
        goto label4;

     label2:
        $z3 = r2 instanceof java.io.InputStream;
        if $z3 == 0 goto label3;

        r6 = r3;
        r7 = r2;
        goto label4;

     label3:
        $z4 = r2 instanceof java.lang.Class;
        if $z4 == 0 goto label4;

        $r18 = (java.lang.Class) r2;
        virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();
        r6 = r3;
        r7 = r2;
        if r1 != null goto label4;

        r1 = "MbeansDescriptorsIntrospectionSource";

     label4:
        if r1 != null goto label5;

        r1 = "MbeansDescriptorsDigesterSource";

     label5:
        r20 = specialinvoke r0.<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.modules.ModelerSource getModelerSource(java.lang.String)>(r1);
        r9 = virtualinvoke r20.<org.apache.tomcat.util.modeler.modules.ModelerSource: java.util.List loadDescriptors(org.apache.tomcat.util.modeler.Registry,java.lang.String,java.lang.Object)>(r0, r6, r7);
        return r9;
    }

    private java.lang.String sourceTypeFromExt(java.lang.String)
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.lang.String;
        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".ser");
        if $z0 == 0 goto label0;

        return "MbeansDescriptorsSerSource";

     label0:
        $z1 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");
        if $z1 == 0 goto label1;

        return "MbeansDescriptorsDigesterSource";

     label1:
        return null;
    }

    public void registerComponent(java.lang.Object, javax.management.ObjectName, java.lang.String) throws java.lang.Exception
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.lang.Object r1;
        javax.management.ObjectName r2;
        java.lang.String r3, $r10, $r14, $r22, $r31;
        org.apache.juli.logging.Log $r4, $r8, $r11, $r18, $r19, $r28;
        java.lang.StringBuilder $r5, $r9, $r12, $r13, $r20, $r21, $r29, $r30;
        org.apache.tomcat.util.modeler.ManagedBean r6;
        javax.management.DynamicMBean r7;
        boolean $z0, $z1, $z2;
        java.lang.Class $r15, $r16;
        javax.management.MBeanServer $r17, $r23, $r24;
        java.lang.Exception $r26, r27;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: javax.management.ObjectName;
        r3 := @parameter2: java.lang.String;
        $r4 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $z0 = interfaceinvoke $r4.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z0 == 0 goto label0;

        $r8 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Managed= ");
        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r8.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r10);

     label0:
        if r1 != null goto label1;

        $r11 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Null component ");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r11.<org.apache.juli.logging.Log: void error(java.lang.Object)>($r14);
        return;

     label1:
        if r3 != null goto label2;

        $r15 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        r3 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

     label2:
        $r16 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();
        r6 = virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Class,java.lang.String)>($r16, r3);
        r7 = virtualinvoke r6.<org.apache.tomcat.util.modeler.ManagedBean: javax.management.DynamicMBean createMBean(java.lang.Object)>(r1);
        $r17 = virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>();
        $z1 = interfaceinvoke $r17.<javax.management.MBeanServer: boolean isRegistered(javax.management.ObjectName)>(r2);
        if $z1 == 0 goto label4;

        $r18 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $z2 = interfaceinvoke $r18.<org.apache.juli.logging.Log: boolean isDebugEnabled()>();
        if $z2 == 0 goto label3;

        $r19 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $r20 = new java.lang.StringBuilder;
        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unregistering existing component ");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r19.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r22);

     label3:
        $r23 = virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>();
        interfaceinvoke $r23.<javax.management.MBeanServer: void unregisterMBean(javax.management.ObjectName)>(r2);

     label4:
        $r24 = virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer getMBeanServer()>();
        interfaceinvoke $r24.<javax.management.MBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>(r7, r2);

     label5:
        goto label7;

     label6:
        $r26 := @caughtexception;
        r27 = $r26;
        $r28 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $r29 = new java.lang.StringBuilder;
        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error registering ");
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r28.<org.apache.juli.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r31, r27);
        throw r27;

     label7:
        return;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    public void loadDescriptors(java.lang.String, java.lang.ClassLoader)
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.lang.String r1, r3, r4, $r11, $r15, $r18, $r23, $r30;
        java.lang.ClassLoader r2;
        java.net.URL r5;
        java.lang.Exception r6, $r26;
        org.apache.juli.logging.Log $r7, $r8, $r20, $r27;
        boolean $z0, $z1;
        java.lang.StringBuilder $r9, $r10, $r14, $r16, $r17, $r19, $r21, $r22, $r28, $r29;
        java.util.HashMap $r12, $r24;
        java.lang.Object $r13;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.ClassLoader;
        r3 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(46, 47);
        $r7 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $z0 = interfaceinvoke $r7.<org.apache.juli.logging.Log: boolean isTraceEnabled()>();
        if $z0 == 0 goto label0;

        $r8 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Finding descriptor ");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r8.<org.apache.juli.logging.Log: void trace(java.lang.Object)>($r11);

     label0:
        $r12 = r0.<org.apache.tomcat.util.modeler.Registry: java.util.HashMap searchedPaths>;
        $r13 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);
        if $r13 == null goto label1;

        return;

     label1:
        $r14 = new java.lang.StringBuilder;
        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);
        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15);
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/mbeans-descriptors.ser");
        r4 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        r5 = virtualinvoke r2.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r4);
        if r5 != null goto label2;

        $r17 = new java.lang.StringBuilder;
        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);
        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>($r18);
        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/mbeans-descriptors.xml");
        r4 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        r5 = virtualinvoke r2.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r4);

     label2:
        if r5 != null goto label3;

        return;

     label3:
        $r20 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $r21 = new java.lang.StringBuilder;
        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Found ");
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r20.<org.apache.juli.logging.Log: void debug(java.lang.Object)>($r23);
        $r24 = r0.<org.apache.tomcat.util.modeler.Registry: java.util.HashMap searchedPaths>;
        virtualinvoke $r24.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5);

     label4:
        $z1 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");
        if $z1 == 0 goto label5;

        specialinvoke r0.<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.Object,java.lang.String)>("MbeansDescriptorsDigesterSource", r5, null);
        goto label6;

     label5:
        specialinvoke r0.<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.Object,java.lang.String)>("MbeansDescriptorsSerSource", r5, null);

     label6:
        return;

     label7:
        $r26 := @caughtexception;
        r6 = $r26;
        $r27 = <org.apache.tomcat.util.modeler.Registry: org.apache.juli.logging.Log log>;
        $r28 = new java.lang.StringBuilder;
        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error loading ");
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r27.<org.apache.juli.logging.Log: void error(java.lang.Object)>($r30);
        return;

        catch java.lang.Exception from label4 to label6 with label7;
    }

    private void loadDescriptors(java.lang.String, java.lang.Object, java.lang.String) throws java.lang.Exception
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.lang.String r1, r3;
        java.lang.Object r2;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Object;
        r3 := @parameter2: java.lang.String;
        virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: java.util.List load(java.lang.String,java.lang.Object,java.lang.String)>(r1, r2, r3);
        return;
    }

    private void findDescriptor(java.lang.Class, java.lang.String)
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.lang.Class r1, $r7;
        java.lang.String r2, r4, r5;
        java.lang.ClassLoader r3;
        int i0, $i1;
        java.lang.Thread $r6;
        java.util.HashMap $r8;
        java.lang.Object $r9;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.String;
        if r2 != null goto label0;

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

     label0:
        r3 = null;
        if r1 == null goto label1;

        r3 = virtualinvoke r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label1:
        if r3 != null goto label2;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r3 = virtualinvoke $r6.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label2:
        if r3 != null goto label3;

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r3 = virtualinvoke $r7.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label3:
        r4 = r2;
        r5 = r4;
        goto label7;

     label4:
        i0 = virtualinvoke r5.<java.lang.String: int lastIndexOf(java.lang.String)>(".");
        if i0 > 0 goto label5;

        return;

     label5:
        r5 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        $r8 = r0.<org.apache.tomcat.util.modeler.Registry: java.util.HashMap searchedPaths>;
        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);
        if $r9 == null goto label6;

        return;

     label6:
        virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: void loadDescriptors(java.lang.String,java.lang.ClassLoader)>(r5, r3);

     label7:
        $i1 = virtualinvoke r5.<java.lang.String: int indexOf(java.lang.String)>(".");
        if $i1 > 0 goto label4;

        return;
    }

    private org.apache.tomcat.util.modeler.modules.ModelerSource getModelerSource(java.lang.String) throws java.lang.Exception
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.lang.String r1;
        java.lang.Class r2;
        org.apache.tomcat.util.modeler.modules.ModelerSource r3;
        int $i0;
        java.lang.StringBuilder $r4, $r5;
        java.lang.Object $r6;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        r1 = "MbeansDescriptorsDigesterSource";

     label0:
        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(".");
        if $i0 >= 0 goto label1;

        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("org.apache.tomcat.util.modeler.modules.");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);
        $r6 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();
        r3 = (org.apache.tomcat.util.modeler.modules.ModelerSource) $r6;
        return r3;
    }

    public javax.management.ObjectName preRegister(javax.management.MBeanServer, javax.management.ObjectName) throws java.lang.Exception
    {
        org.apache.tomcat.util.modeler.Registry r0;
        javax.management.MBeanServer r1;
        javax.management.ObjectName r2;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: javax.management.MBeanServer;
        r2 := @parameter1: javax.management.ObjectName;
        r0.<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer server> = r1;
        return r2;
    }

    public void postRegister(java.lang.Boolean)
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.lang.Boolean r1;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.lang.Boolean;
        return;
    }

    public void preDeregister() throws java.lang.Exception
    {
        org.apache.tomcat.util.modeler.Registry r0;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        return;
    }

    public void postDeregister()
    {
        org.apache.tomcat.util.modeler.Registry r0;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        return;
    }

    public org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Class, java.lang.String) throws java.lang.Exception
    {
        org.apache.tomcat.util.modeler.Registry r0;
        java.lang.Class r1;
        java.lang.String r2;
        org.apache.tomcat.util.modeler.ManagedBean $r3;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: java.lang.Class;
        r2 := @parameter1: java.lang.String;
        $r3 = virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object,java.lang.Class,java.lang.String)>(null, r1, r2);
        return $r3;
    }

    public void setMBeanServer(javax.management.MBeanServer)
    {
        org.apache.tomcat.util.modeler.Registry r0;
        javax.management.MBeanServer r1;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        r1 := @parameter0: javax.management.MBeanServer;
        r0.<org.apache.tomcat.util.modeler.Registry: javax.management.MBeanServer server> = r1;
        return;
    }

    public void resetMetadata()
    {
        org.apache.tomcat.util.modeler.Registry r0;

        r0 := @this: org.apache.tomcat.util.modeler.Registry;
        virtualinvoke r0.<org.apache.tomcat.util.modeler.Registry: void stop()>();
        return;
    }
}
