class java.lang.String$CaseInsensitiveComparator extends java.lang.Object implements java.util.Comparator, java.io.Serializable
{
    private static final long serialVersionUID;

    private void <init>()
    {
        java.lang.String$CaseInsensitiveComparator r0;

        r0 := @this: java.lang.String$CaseInsensitiveComparator;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public int compare(java.lang.String, java.lang.String)
    {
        java.lang.String$CaseInsensitiveComparator r0;
        java.lang.String r1, r2;
        int i0, i1, i2, i3, $i10, $i11;
        char c4, c5, c6, c7, c8, c9;

        r0 := @this: java.lang.String$CaseInsensitiveComparator;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        i0 = virtualinvoke r1.<java.lang.String: int length()>();
        i1 = virtualinvoke r2.<java.lang.String: int length()>();
        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);
        i3 = 0;

     label0:
        if i3 >= i2 goto label2;

        c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);
        c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i3);
        if c4 == c5 goto label1;

        c6 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c4);
        c7 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c5);
        if c6 == c7 goto label1;

        c8 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c6);
        c9 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c7);
        if c8 == c9 goto label1;

        $i10 = c8 - c9;
        return $i10;

     label1:
        i3 = i3 + 1;
        goto label0;

     label2:
        $i11 = i0 - i1;
        return $i11;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        java.lang.String$CaseInsensitiveComparator r0;
        java.lang.Object r1, r2;
        java.lang.String $r3, $r4;
        int $i0;

        r0 := @this: java.lang.String$CaseInsensitiveComparator;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.lang.Object;
        $r3 = (java.lang.String) r1;
        $r4 = (java.lang.String) r2;
        $i0 = virtualinvoke r0.<java.lang.String$CaseInsensitiveComparator: int compare(java.lang.String,java.lang.String)>($r3, $r4);
        return $i0;
    }

    void <init>(java.lang.String$1)
    {
        java.lang.String$CaseInsensitiveComparator r0;
        java.lang.String$1 r1;

        r0 := @this: java.lang.String$CaseInsensitiveComparator;
        r1 := @parameter0: java.lang.String$1;
        specialinvoke r0.<java.lang.String$CaseInsensitiveComparator: void <init>()>();
        return;
    }
}
