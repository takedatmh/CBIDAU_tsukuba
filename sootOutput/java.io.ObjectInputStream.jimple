public class java.io.ObjectInputStream extends java.io.InputStream implements java.io.ObjectInput, java.io.ObjectStreamConstants
{
    private static final int NULL_HANDLE;
    private static final java.lang.Object unsharedMarker;
    private static final java.util.HashMap primClasses;
    private final java.io.ObjectInputStream$BlockDataInputStream bin;
    private final java.io.ObjectInputStream$ValidationList vlist;
    private int depth;
    private boolean closed;
    private final java.io.ObjectInputStream$HandleTable handles;
    private int passHandle;
    private boolean defaultDataEnd;
    private byte[] primVals;
    private final boolean enableOverride;
    private boolean enableResolve;
    private java.io.SerialCallbackContext curContext;

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.InputStream r1;
        java.io.ObjectInputStream$BlockDataInputStream $r2, $r5;
        java.io.ObjectInputStream$HandleTable $r3;
        java.io.ObjectInputStream$ValidationList $r4;

        r0 := @this: java.io.ObjectInputStream;
        r1 := @parameter0: java.io.InputStream;
        specialinvoke r0.<java.io.InputStream: void <init>()>();
        r0.<java.io.ObjectInputStream: int passHandle> = -1;
        r0.<java.io.ObjectInputStream: boolean defaultDataEnd> = 0;
        specialinvoke r0.<java.io.ObjectInputStream: void verifySubclass()>();
        $r2 = new java.io.ObjectInputStream$BlockDataInputStream;
        specialinvoke $r2.<java.io.ObjectInputStream$BlockDataInputStream: void <init>(java.io.ObjectInputStream,java.io.InputStream)>(r0, r1);
        r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin> = $r2;
        $r3 = new java.io.ObjectInputStream$HandleTable;
        specialinvoke $r3.<java.io.ObjectInputStream$HandleTable: void <init>(int)>(10);
        r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles> = $r3;
        $r4 = new java.io.ObjectInputStream$ValidationList;
        specialinvoke $r4.<java.io.ObjectInputStream$ValidationList: void <init>()>();
        r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$ValidationList vlist> = $r4;
        r0.<java.io.ObjectInputStream: boolean enableOverride> = 0;
        virtualinvoke r0.<java.io.ObjectInputStream: void readStreamHeader()>();
        $r5 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r5.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(1);
        return;
    }

    protected void <init>() throws java.io.IOException, java.lang.SecurityException
    {
        java.io.ObjectInputStream r0;
        java.lang.SecurityManager r1;
        java.io.SerializablePermission $r2;

        r0 := @this: java.io.ObjectInputStream;
        specialinvoke r0.<java.io.InputStream: void <init>()>();
        r0.<java.io.ObjectInputStream: int passHandle> = -1;
        r0.<java.io.ObjectInputStream: boolean defaultDataEnd> = 0;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label0;

        $r2 = <java.io.ObjectInputStream: java.io.SerializablePermission SUBCLASS_IMPLEMENTATION_PERMISSION>;
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label0:
        r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin> = null;
        r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles> = null;
        r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$ValidationList vlist> = null;
        r0.<java.io.ObjectInputStream: boolean enableOverride> = 1;
        return;
    }

    public final java.lang.Object readObject() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object r1, r3, $r5;
        java.lang.ClassNotFoundException r2;
        java.lang.Throwable r4, $r9;
        boolean $z0, $z1, $z2;
        java.io.ObjectInputStream$HandleTable $r6, $r7;
        java.io.ObjectInputStream$ValidationList $r8;

        r0 := @this: java.io.ObjectInputStream;
        $z0 = r0.<java.io.ObjectInputStream: boolean enableOverride>;
        if $z0 == 0 goto label0;

        $r5 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObjectOverride()>();
        return $r5;

     label0:
        i0 = r0.<java.io.ObjectInputStream: int passHandle>;

     label1:
        r1 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject0(boolean)>(0);
        $r6 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i1 = r0.<java.io.ObjectInputStream: int passHandle>;
        virtualinvoke $r6.<java.io.ObjectInputStream$HandleTable: void markDependency(int,int)>(i0, $i1);
        $r7 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i2 = r0.<java.io.ObjectInputStream: int passHandle>;
        r2 = virtualinvoke $r7.<java.io.ObjectInputStream$HandleTable: java.lang.ClassNotFoundException lookupException(int)>($i2);
        if r2 == null goto label2;

        throw r2;

     label2:
        $i3 = r0.<java.io.ObjectInputStream: int depth>;
        if $i3 != 0 goto label3;

        $r8 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$ValidationList vlist>;
        virtualinvoke $r8.<java.io.ObjectInputStream$ValidationList: void doCallbacks()>();

     label3:
        r3 = r1;

     label4:
        r0.<java.io.ObjectInputStream: int passHandle> = i0;
        $z1 = r0.<java.io.ObjectInputStream: boolean closed>;
        if $z1 == 0 goto label5;

        $i4 = r0.<java.io.ObjectInputStream: int depth>;
        if $i4 != 0 goto label5;

        specialinvoke r0.<java.io.ObjectInputStream: void clear()>();

     label5:
        return r3;

     label6:
        $r9 := @caughtexception;

     label7:
        r4 = $r9;

     label8:
        r0.<java.io.ObjectInputStream: int passHandle> = i0;
        $z2 = r0.<java.io.ObjectInputStream: boolean closed>;
        if $z2 == 0 goto label9;

        $i5 = r0.<java.io.ObjectInputStream: int depth>;
        if $i5 != 0 goto label9;

        specialinvoke r0.<java.io.ObjectInputStream: void clear()>();

     label9:
        throw r4;

        catch java.lang.Throwable from label1 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    protected java.lang.Object readObjectOverride() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;

        r0 := @this: java.io.ObjectInputStream;
        return null;
    }

    public java.lang.Object readUnshared() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object r1, r3;
        java.lang.ClassNotFoundException r2;
        java.lang.Throwable r4, $r8;
        java.io.ObjectInputStream$HandleTable $r5, $r6;
        java.io.ObjectInputStream$ValidationList $r7;
        boolean $z0, $z1;

        r0 := @this: java.io.ObjectInputStream;
        i0 = r0.<java.io.ObjectInputStream: int passHandle>;

     label0:
        r1 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject0(boolean)>(1);
        $r5 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i1 = r0.<java.io.ObjectInputStream: int passHandle>;
        virtualinvoke $r5.<java.io.ObjectInputStream$HandleTable: void markDependency(int,int)>(i0, $i1);
        $r6 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i2 = r0.<java.io.ObjectInputStream: int passHandle>;
        r2 = virtualinvoke $r6.<java.io.ObjectInputStream$HandleTable: java.lang.ClassNotFoundException lookupException(int)>($i2);
        if r2 == null goto label1;

        throw r2;

     label1:
        $i3 = r0.<java.io.ObjectInputStream: int depth>;
        if $i3 != 0 goto label2;

        $r7 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$ValidationList vlist>;
        virtualinvoke $r7.<java.io.ObjectInputStream$ValidationList: void doCallbacks()>();

     label2:
        r3 = r1;

     label3:
        r0.<java.io.ObjectInputStream: int passHandle> = i0;
        $z0 = r0.<java.io.ObjectInputStream: boolean closed>;
        if $z0 == 0 goto label4;

        $i4 = r0.<java.io.ObjectInputStream: int depth>;
        if $i4 != 0 goto label4;

        specialinvoke r0.<java.io.ObjectInputStream: void clear()>();

     label4:
        return r3;

     label5:
        $r8 := @caughtexception;

     label6:
        r4 = $r8;

     label7:
        r0.<java.io.ObjectInputStream: int passHandle> = i0;
        $z1 = r0.<java.io.ObjectInputStream: boolean closed>;
        if $z1 == 0 goto label8;

        $i5 = r0.<java.io.ObjectInputStream: int depth>;
        if $i5 != 0 goto label8;

        specialinvoke r0.<java.io.ObjectInputStream: void clear()>();

     label8:
        throw r4;

        catch java.lang.Throwable from label0 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void defaultReadObject() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        java.io.SerialCallbackContext r1;
        java.lang.Object r2;
        java.io.ObjectStreamClass r3;
        java.lang.ClassNotFoundException r4;
        java.io.NotActiveException $r5;
        java.io.ObjectInputStream$BlockDataInputStream $r6, $r7;
        boolean $z2;
        java.io.ObjectInputStream$HandleTable $r8;
        int $i0;

        r0 := @this: java.io.ObjectInputStream;
        r1 = r0.<java.io.ObjectInputStream: java.io.SerialCallbackContext curContext>;
        if r1 != null goto label0;

        $r5 = new java.io.NotActiveException;
        specialinvoke $r5.<java.io.NotActiveException: void <init>(java.lang.String)>("not in call to readObject");
        throw $r5;

     label0:
        r2 = virtualinvoke r1.<java.io.SerialCallbackContext: java.lang.Object getObj()>();
        r3 = virtualinvoke r1.<java.io.SerialCallbackContext: java.io.ObjectStreamClass getDesc()>();
        $r6 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r6.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(0);
        specialinvoke r0.<java.io.ObjectInputStream: void defaultReadFields(java.lang.Object,java.io.ObjectStreamClass)>(r2, r3);
        $r7 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r7.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(1);
        $z2 = virtualinvoke r3.<java.io.ObjectStreamClass: boolean hasWriteObjectData()>();
        if $z2 != 0 goto label1;

        r0.<java.io.ObjectInputStream: boolean defaultDataEnd> = 1;

     label1:
        $r8 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i0 = r0.<java.io.ObjectInputStream: int passHandle>;
        r4 = virtualinvoke $r8.<java.io.ObjectInputStream$HandleTable: java.lang.ClassNotFoundException lookupException(int)>($i0);
        if r4 == null goto label2;

        throw r4;

     label2:
        return;
    }

    public java.io.ObjectInputStream$GetField readFields() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        java.io.SerialCallbackContext r1;
        java.io.ObjectStreamClass r3;
        java.io.ObjectInputStream$GetFieldImpl r4, $r7;
        java.io.NotActiveException $r5;
        java.io.ObjectInputStream$BlockDataInputStream $r6, $r8;
        boolean $z2;

        r0 := @this: java.io.ObjectInputStream;
        r1 = r0.<java.io.ObjectInputStream: java.io.SerialCallbackContext curContext>;
        if r1 != null goto label0;

        $r5 = new java.io.NotActiveException;
        specialinvoke $r5.<java.io.NotActiveException: void <init>(java.lang.String)>("not in call to readObject");
        throw $r5;

     label0:
        virtualinvoke r1.<java.io.SerialCallbackContext: java.lang.Object getObj()>();
        r3 = virtualinvoke r1.<java.io.SerialCallbackContext: java.io.ObjectStreamClass getDesc()>();
        $r6 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r6.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(0);
        $r7 = new java.io.ObjectInputStream$GetFieldImpl;
        specialinvoke $r7.<java.io.ObjectInputStream$GetFieldImpl: void <init>(java.io.ObjectInputStream,java.io.ObjectStreamClass)>(r0, r3);
        r4 = $r7;
        virtualinvoke r4.<java.io.ObjectInputStream$GetFieldImpl: void readFields()>();
        $r8 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r8.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(1);
        $z2 = virtualinvoke r3.<java.io.ObjectStreamClass: boolean hasWriteObjectData()>();
        if $z2 != 0 goto label1;

        r0.<java.io.ObjectInputStream: boolean defaultDataEnd> = 1;

     label1:
        return r4;
    }

    public void registerValidation(java.io.ObjectInputValidation, int) throws java.io.NotActiveException, java.io.InvalidObjectException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputValidation r1;
        int i0, $i1;
        java.io.NotActiveException $r2;
        java.io.ObjectInputStream$ValidationList $r3;

        r0 := @this: java.io.ObjectInputStream;
        r1 := @parameter0: java.io.ObjectInputValidation;
        i0 := @parameter1: int;
        $i1 = r0.<java.io.ObjectInputStream: int depth>;
        if $i1 != 0 goto label0;

        $r2 = new java.io.NotActiveException;
        specialinvoke $r2.<java.io.NotActiveException: void <init>(java.lang.String)>("stream inactive");
        throw $r2;

     label0:
        $r3 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$ValidationList vlist>;
        virtualinvoke $r3.<java.io.ObjectInputStream$ValidationList: void register(java.io.ObjectInputValidation,int)>(r1, i0);
        return;
    }

    protected java.lang.Class resolveClass(java.io.ObjectStreamClass) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectStreamClass r1;
        java.lang.String r2;
        java.lang.ClassLoader $r3;
        java.lang.ClassNotFoundException r4, $r7;
        java.lang.Class r5, $r6;
        java.util.HashMap $r8;
        java.lang.Object $r9;

        r0 := @this: java.io.ObjectInputStream;
        r1 := @parameter0: java.io.ObjectStreamClass;
        r2 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.String getName()>();

     label0:
        $r3 = staticinvoke <java.io.ObjectInputStream: java.lang.ClassLoader latestUserDefinedLoader()>();
        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r2, 0, $r3);

     label1:
        return $r6;

     label2:
        $r7 := @caughtexception;
        r4 = $r7;
        $r8 = <java.io.ObjectInputStream: java.util.HashMap primClasses>;
        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);
        r5 = (java.lang.Class) $r9;
        if r5 == null goto label3;

        return r5;

     label3:
        throw r4;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    protected java.lang.Class resolveProxyClass(java.lang.String[]) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        java.lang.String[] r1;
        java.lang.ClassLoader r2, r3, $r7, $r9;
        boolean z0;
        java.lang.Class[] r4;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Class r5, $r10;
        java.lang.String $r6;
        java.lang.IllegalAccessError $r8;
        java.lang.IllegalArgumentException $r11, r12;
        java.lang.ClassNotFoundException $r13;

        r0 := @this: java.io.ObjectInputStream;
        r1 := @parameter0: java.lang.String[];
        r2 = staticinvoke <java.io.ObjectInputStream: java.lang.ClassLoader latestUserDefinedLoader()>();
        r3 = null;
        z0 = 0;
        $i1 = lengthof r1;
        r4 = newarray (java.lang.Class)[$i1];
        i0 = 0;

     label0:
        $i2 = lengthof r1;
        if i0 >= $i2 goto label3;

        $r6 = r1[i0];
        r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r6, 0, r2);
        $i3 = virtualinvoke r5.<java.lang.Class: int getModifiers()>();
        $i4 = $i3 & 1;
        if $i4 != 0 goto label2;

        if z0 == 0 goto label1;

        $r7 = virtualinvoke r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        if r3 == $r7 goto label2;

        $r8 = new java.lang.IllegalAccessError;
        specialinvoke $r8.<java.lang.IllegalAccessError: void <init>(java.lang.String)>("conflicting non-public interface class loaders");
        throw $r8;

     label1:
        r3 = virtualinvoke r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        z0 = 1;

     label2:
        r4[i0] = r5;
        i0 = i0 + 1;
        goto label0;

     label3:
        if z0 == 0 goto label4;

        $r9 = r3;
        goto label5;

     label4:
        $r9 = r2;

     label5:
        $r10 = staticinvoke <java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>($r9, r4);

     label6:
        return $r10;

     label7:
        $r11 := @caughtexception;
        r12 = $r11;
        $r13 = new java.lang.ClassNotFoundException;
        specialinvoke $r13.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>(null, r12);
        throw $r13;

        catch java.lang.IllegalArgumentException from label3 to label6 with label7;
    }

    protected java.lang.Object resolveObject(java.lang.Object) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.lang.Object r1;

        r0 := @this: java.io.ObjectInputStream;
        r1 := @parameter0: java.lang.Object;
        return r1;
    }

    protected boolean enableResolveObject(boolean) throws java.lang.SecurityException
    {
        java.io.ObjectInputStream r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.SecurityManager r1;
        java.io.SerializablePermission $r2;

        r0 := @this: java.io.ObjectInputStream;
        z0 := @parameter0: boolean;
        $z1 = r0.<java.io.ObjectInputStream: boolean enableResolve>;
        if z0 != $z1 goto label0;

        return z0;

     label0:
        if z0 == 0 goto label1;

        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label1;

        $r2 = <java.io.ObjectInputStream: java.io.SerializablePermission SUBSTITUTION_PERMISSION>;
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label1:
        r0.<java.io.ObjectInputStream: boolean enableResolve> = z0;
        $z2 = r0.<java.io.ObjectInputStream: boolean enableResolve>;
        if $z2 != 0 goto label2;

        $z3 = 1;
        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    protected void readStreamHeader() throws java.io.IOException, java.io.StreamCorruptedException
    {
        java.io.ObjectInputStream r0;
        short s0, s1;
        java.io.ObjectInputStream$BlockDataInputStream $r1, $r2;
        java.io.StreamCorruptedException $r3;
        java.lang.Object[] $r4;
        java.lang.Short $r5, $r6;
        java.lang.String $r7;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        s0 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: short readShort()>();
        $r2 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        s1 = virtualinvoke $r2.<java.io.ObjectInputStream$BlockDataInputStream: short readShort()>();
        if s0 != -21267 goto label0;

        if s1 == 5 goto label1;

     label0:
        $r3 = new java.io.StreamCorruptedException;
        $r4 = newarray (java.lang.Object)[2];
        $r5 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s0);
        $r4[0] = $r5;
        $r6 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s1);
        $r4[1] = $r6;
        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("invalid stream header: %04X%04X", $r4);
        specialinvoke $r3.<java.io.StreamCorruptedException: void <init>(java.lang.String)>($r7);
        throw $r3;

     label1:
        return;
    }

    protected java.io.ObjectStreamClass readClassDescriptor() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectStreamClass $r1, r2;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = new java.io.ObjectStreamClass;
        specialinvoke $r1.<java.io.ObjectStreamClass: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<java.io.ObjectStreamClass: void readNonProxy(java.io.ObjectInputStream)>(r0);
        return r2;
    }

    public int read() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;
        int $i0;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: int read()>();
        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4;
        java.lang.NullPointerException $r2;
        java.lang.IndexOutOfBoundsException $r3;
        java.io.ObjectInputStream$BlockDataInputStream $r4;

        r0 := @this: java.io.ObjectInputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        if r1 != null goto label0;

        $r2 = new java.lang.NullPointerException;
        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();
        throw $r2;

     label0:
        i2 = i0 + i1;
        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i3 = lengthof r1;
        if i2 > $i3 goto label1;

        if i2 >= 0 goto label2;

     label1:
        $r3 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r3;

     label2:
        $r4 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $i4 = virtualinvoke $r4.<java.io.ObjectInputStream$BlockDataInputStream: int read(byte[],int,int,boolean)>(r1, i0, i1, 0);
        return $i4;
    }

    public int available() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;
        int $i0;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: int available()>();
        return $i0;
    }

    public void close() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        int $i0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;

        r0 := @this: java.io.ObjectInputStream;
        r0.<java.io.ObjectInputStream: boolean closed> = 1;
        $i0 = r0.<java.io.ObjectInputStream: int depth>;
        if $i0 != 0 goto label0;

        specialinvoke r0.<java.io.ObjectInputStream: void clear()>();

     label0:
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: void close()>();
        return;
    }

    public boolean readBoolean() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;
        boolean $z0;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $z0 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: boolean readBoolean()>();
        return $z0;
    }

    public byte readByte() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;
        byte $b0;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $b0 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: byte readByte()>();
        return $b0;
    }

    public int readUnsignedByte() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;
        int $i0;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: int readUnsignedByte()>();
        return $i0;
    }

    public char readChar() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;
        char $c0;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $c0 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: char readChar()>();
        return $c0;
    }

    public short readShort() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;
        short $s0;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $s0 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: short readShort()>();
        return $s0;
    }

    public int readUnsignedShort() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;
        int $i0;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: int readUnsignedShort()>();
        return $i0;
    }

    public int readInt() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;
        int $i0;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: int readInt()>();
        return $i0;
    }

    public long readLong() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;
        long $l0;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $l0 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: long readLong()>();
        return $l0;
    }

    public float readFloat() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;
        float $f0;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $f0 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: float readFloat()>();
        return $f0;
    }

    public double readDouble() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;
        double $d0;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $d0 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: double readDouble()>();
        return $d0;
    }

    public void readFully(byte[]) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        byte[] r1;
        java.io.ObjectInputStream$BlockDataInputStream $r2;
        int $i0;

        r0 := @this: java.io.ObjectInputStream;
        r1 := @parameter0: byte[];
        $r2 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $i0 = lengthof r1;
        virtualinvoke $r2.<java.io.ObjectInputStream$BlockDataInputStream: void readFully(byte[],int,int,boolean)>(r1, 0, $i0, 0);
        return;
    }

    public void readFully(byte[], int, int) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        byte[] r1;
        int i0, i1, i2, $i3;
        java.lang.IndexOutOfBoundsException $r2;
        java.io.ObjectInputStream$BlockDataInputStream $r3;

        r0 := @this: java.io.ObjectInputStream;
        r1 := @parameter0: byte[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 = i0 + i1;
        if i0 < 0 goto label0;

        if i1 < 0 goto label0;

        $i3 = lengthof r1;
        if i2 > $i3 goto label0;

        if i2 >= 0 goto label1;

     label0:
        $r2 = new java.lang.IndexOutOfBoundsException;
        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();
        throw $r2;

     label1:
        $r3 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r3.<java.io.ObjectInputStream$BlockDataInputStream: void readFully(byte[],int,int,boolean)>(r1, i0, i1, 0);
        return;
    }

    public int skipBytes(int) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        int i0, $i1;
        java.io.ObjectInputStream$BlockDataInputStream $r1;

        r0 := @this: java.io.ObjectInputStream;
        i0 := @parameter0: int;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $i1 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: int skipBytes(int)>(i0);
        return $i1;
    }

    public java.lang.String readLine() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;
        java.lang.String $r2;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $r2 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: java.lang.String readLine()>();
        return $r2;
    }

    public java.lang.String readUTF() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;
        java.lang.String $r2;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $r2 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: java.lang.String readUTF()>();
        return $r2;
    }

    private void verifySubclass()
    {
        java.io.ObjectInputStream r0;
        java.lang.Class r1;
        java.lang.SecurityManager r2;
        java.lang.ref.ReferenceQueue $r3, $r6;
        java.io.ObjectStreamClass$WeakClassKey r4, $r8;
        java.lang.Boolean r5;
        java.util.concurrent.ConcurrentMap $r7, $r9, $r11;
        java.lang.Object $r10;
        boolean $z0, $z1;
        java.io.SerializablePermission $r13;

        r0 := @this: java.io.ObjectInputStream;
        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        if r1 != class "java/io/ObjectInputStream" goto label0;

        return;

     label0:
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 != null goto label1;

        return;

     label1:
        $r6 = <java.io.ObjectInputStream$Caches: java.lang.ref.ReferenceQueue subclassAuditsQueue>;
        $r7 = <java.io.ObjectInputStream$Caches: java.util.concurrent.ConcurrentMap subclassAudits>;
        staticinvoke <java.io.ObjectStreamClass: void processQueue(java.lang.ref.ReferenceQueue,java.util.concurrent.ConcurrentMap)>($r6, $r7);
        $r8 = new java.io.ObjectStreamClass$WeakClassKey;
        $r3 = <java.io.ObjectInputStream$Caches: java.lang.ref.ReferenceQueue subclassAuditsQueue>;
        specialinvoke $r8.<java.io.ObjectStreamClass$WeakClassKey: void <init>(java.lang.Class,java.lang.ref.ReferenceQueue)>(r1, $r3);
        r4 = $r8;
        $r9 = <java.io.ObjectInputStream$Caches: java.util.concurrent.ConcurrentMap subclassAudits>;
        $r10 = interfaceinvoke $r9.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r4);
        r5 = (java.lang.Boolean) $r10;
        if r5 != null goto label2;

        $z0 = staticinvoke <java.io.ObjectInputStream: boolean auditSubclass(java.lang.Class)>(r1);
        r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);
        $r11 = <java.io.ObjectInputStream$Caches: java.util.concurrent.ConcurrentMap subclassAudits>;
        interfaceinvoke $r11.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r4, r5);

     label2:
        $z1 = virtualinvoke r5.<java.lang.Boolean: boolean booleanValue()>();
        if $z1 == 0 goto label3;

        return;

     label3:
        $r13 = <java.io.ObjectInputStream: java.io.SerializablePermission SUBCLASS_IMPLEMENTATION_PERMISSION>;
        virtualinvoke r2.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r13);
        return;
    }

    private static boolean auditSubclass(java.lang.Class)
    {
        java.lang.Class r0;
        java.io.ObjectInputStream$1 $r1;
        java.lang.Boolean r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;
        $r1 = new java.io.ObjectInputStream$1;
        specialinvoke $r1.<java.io.ObjectInputStream$1: void <init>(java.lang.Class)>(r0);
        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        r2 = (java.lang.Boolean) $r3;
        $z0 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();
        return $z0;
    }

    private void clear()
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$HandleTable $r1;
        java.io.ObjectInputStream$ValidationList $r2;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        virtualinvoke $r1.<java.io.ObjectInputStream$HandleTable: void clear()>();
        $r2 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$ValidationList vlist>;
        virtualinvoke $r2.<java.io.ObjectInputStream$ValidationList: void clear()>();
        return;
    }

    private java.lang.Object readObject0(boolean) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0, z1, $z2;
        int i0, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25;
        java.lang.Object r1, r13, r23, $r26, r27, r31, $r34, r35;
        java.lang.Throwable r2, $r51;
        java.io.ObjectInputStream$BlockDataInputStream $r3, $r4, $r7, $r8, $r9, $r12, $r15, $r18, $r21, $r25, $r29, $r33, $r37, $r40, $r41, $r43, $r53;
        java.io.OptionalDataException $r5, $r6, $r42, $r45;
        byte $b1, b2;
        java.lang.Class r16;
        java.io.ObjectStreamClass r19;
        java.lang.String $r22, $r50;
        java.lang.Enum $r30;
        java.io.IOException r38;
        java.io.WriteAbortedException $r39;
        java.io.StreamCorruptedException $r44, $r46, $r47;
        java.lang.Object[] $r48;
        java.lang.Byte $r49;

        r0 := @this: java.io.ObjectInputStream;
        z0 := @parameter0: boolean;
        $r3 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        z1 = virtualinvoke $r3.<java.io.ObjectInputStream$BlockDataInputStream: boolean getBlockDataMode()>();
        if z1 == 0 goto label2;

        $r4 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        i0 = virtualinvoke $r4.<java.io.ObjectInputStream$BlockDataInputStream: int currentBlockRemaining()>();
        if i0 <= 0 goto label0;

        $r5 = new java.io.OptionalDataException;
        specialinvoke $r5.<java.io.OptionalDataException: void <init>(int)>(i0);
        throw $r5;

     label0:
        $z2 = r0.<java.io.ObjectInputStream: boolean defaultDataEnd>;
        if $z2 == 0 goto label1;

        $r6 = new java.io.OptionalDataException;
        specialinvoke $r6.<java.io.OptionalDataException: void <init>(boolean)>(1);
        throw $r6;

     label1:
        $r7 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r7.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(0);

     label2:
        $r8 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $b1 = virtualinvoke $r8.<java.io.ObjectInputStream$BlockDataInputStream: byte peekByte()>();
        b2 = $b1;
        if $b1 != 121 goto label3;

        $r9 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r9.<java.io.ObjectInputStream$BlockDataInputStream: byte readByte()>();
        specialinvoke r0.<java.io.ObjectInputStream: void handleReset()>();
        goto label2;

     label3:
        $i4 = r0.<java.io.ObjectInputStream: int depth>;
        $i5 = $i4 + 1;
        r0.<java.io.ObjectInputStream: int depth> = $i5;

     label4:
        tableswitch(b2)
        {
            case 112: goto label5;
            case 113: goto label7;
            case 114: goto label11;
            case 115: goto label19;
            case 116: goto label13;
            case 117: goto label15;
            case 118: goto label9;
            case 119: goto label22;
            case 120: goto label24;
            case 121: goto label26;
            case 122: goto label22;
            case 123: goto label21;
            case 124: goto label13;
            case 125: goto label11;
            case 126: goto label17;
            default: goto label26;
        };

     label5:
        r1 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readNull()>();

     label6:
        $i6 = r0.<java.io.ObjectInputStream: int depth>;
        $i7 = $i6 - 1;
        r0.<java.io.ObjectInputStream: int depth> = $i7;
        $r12 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r12.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(z1);
        return r1;

     label7:
        r13 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readHandle(boolean)>(z0);

     label8:
        $i8 = r0.<java.io.ObjectInputStream: int depth>;
        $i9 = $i8 - 1;
        r0.<java.io.ObjectInputStream: int depth> = $i9;
        $r15 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r15.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(z1);
        return r13;

     label9:
        r16 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Class readClass(boolean)>(z0);

     label10:
        $i10 = r0.<java.io.ObjectInputStream: int depth>;
        $i11 = $i10 - 1;
        r0.<java.io.ObjectInputStream: int depth> = $i11;
        $r18 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r18.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(z1);
        return r16;

     label11:
        r19 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDesc(boolean)>(z0);

     label12:
        $i12 = r0.<java.io.ObjectInputStream: int depth>;
        $i13 = $i12 - 1;
        r0.<java.io.ObjectInputStream: int depth> = $i13;
        $r21 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r21.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(z1);
        return r19;

     label13:
        $r22 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.String readString(boolean)>(z0);
        r23 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object checkResolve(java.lang.Object)>($r22);

     label14:
        $i14 = r0.<java.io.ObjectInputStream: int depth>;
        $i15 = $i14 - 1;
        r0.<java.io.ObjectInputStream: int depth> = $i15;
        $r25 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r25.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(z1);
        return r23;

     label15:
        $r26 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readArray(boolean)>(z0);
        r27 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object checkResolve(java.lang.Object)>($r26);

     label16:
        $i16 = r0.<java.io.ObjectInputStream: int depth>;
        $i17 = $i16 - 1;
        r0.<java.io.ObjectInputStream: int depth> = $i17;
        $r29 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r29.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(z1);
        return r27;

     label17:
        $r30 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Enum readEnum(boolean)>(z0);
        r31 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object checkResolve(java.lang.Object)>($r30);

     label18:
        $i18 = r0.<java.io.ObjectInputStream: int depth>;
        $i19 = $i18 - 1;
        r0.<java.io.ObjectInputStream: int depth> = $i19;
        $r33 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r33.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(z1);
        return r31;

     label19:
        $r34 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readOrdinaryObject(boolean)>(z0);
        r35 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object checkResolve(java.lang.Object)>($r34);

     label20:
        $i20 = r0.<java.io.ObjectInputStream: int depth>;
        $i21 = $i20 - 1;
        r0.<java.io.ObjectInputStream: int depth> = $i21;
        $r37 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r37.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(z1);
        return r35;

     label21:
        r38 = specialinvoke r0.<java.io.ObjectInputStream: java.io.IOException readFatalException()>();
        $r39 = new java.io.WriteAbortedException;
        specialinvoke $r39.<java.io.WriteAbortedException: void <init>(java.lang.String,java.lang.Exception)>("writing aborted", r38);
        throw $r39;

     label22:
        if z1 == 0 goto label23;

        $r40 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r40.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(1);
        $r41 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r41.<java.io.ObjectInputStream$BlockDataInputStream: int peek()>();
        $r42 = new java.io.OptionalDataException;
        $r43 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $i23 = virtualinvoke $r43.<java.io.ObjectInputStream$BlockDataInputStream: int currentBlockRemaining()>();
        specialinvoke $r42.<java.io.OptionalDataException: void <init>(int)>($i23);
        throw $r42;

     label23:
        $r44 = new java.io.StreamCorruptedException;
        specialinvoke $r44.<java.io.StreamCorruptedException: void <init>(java.lang.String)>("unexpected block data");
        throw $r44;

     label24:
        if z1 == 0 goto label25;

        $r45 = new java.io.OptionalDataException;
        specialinvoke $r45.<java.io.OptionalDataException: void <init>(boolean)>(1);
        throw $r45;

     label25:
        $r46 = new java.io.StreamCorruptedException;
        specialinvoke $r46.<java.io.StreamCorruptedException: void <init>(java.lang.String)>("unexpected end of block data");
        throw $r46;

     label26:
        $r47 = new java.io.StreamCorruptedException;
        $r48 = newarray (java.lang.Object)[1];
        $r49 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b2);
        $r48[0] = $r49;
        $r50 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("invalid type code: %02X", $r48);
        specialinvoke $r47.<java.io.StreamCorruptedException: void <init>(java.lang.String)>($r50);
        throw $r47;

     label27:
        $r51 := @caughtexception;
        r2 = $r51;

     label28:
        $i24 = r0.<java.io.ObjectInputStream: int depth>;
        $i25 = $i24 - 1;
        r0.<java.io.ObjectInputStream: int depth> = $i25;
        $r53 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r53.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(z1);
        throw r2;

        catch java.lang.Throwable from label4 to label6 with label27;
        catch java.lang.Throwable from label7 to label8 with label27;
        catch java.lang.Throwable from label9 to label10 with label27;
        catch java.lang.Throwable from label11 to label12 with label27;
        catch java.lang.Throwable from label13 to label14 with label27;
        catch java.lang.Throwable from label15 to label16 with label27;
        catch java.lang.Throwable from label17 to label18 with label27;
        catch java.lang.Throwable from label19 to label20 with label27;
        catch java.lang.Throwable from label21 to label28 with label27;
    }

    private java.lang.Object checkResolve(java.lang.Object) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.lang.Object r1, r2;
        boolean $z0;
        java.io.ObjectInputStream$HandleTable $r3, $r5;
        int $i0, $i1;
        java.lang.ClassNotFoundException $r4;

        r0 := @this: java.io.ObjectInputStream;
        r1 := @parameter0: java.lang.Object;
        $z0 = r0.<java.io.ObjectInputStream: boolean enableResolve>;
        if $z0 == 0 goto label0;

        $r3 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i0 = r0.<java.io.ObjectInputStream: int passHandle>;
        $r4 = virtualinvoke $r3.<java.io.ObjectInputStream$HandleTable: java.lang.ClassNotFoundException lookupException(int)>($i0);
        if $r4 == null goto label1;

     label0:
        return r1;

     label1:
        r2 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object resolveObject(java.lang.Object)>(r1);
        if r2 == r1 goto label2;

        $r5 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i1 = r0.<java.io.ObjectInputStream: int passHandle>;
        virtualinvoke $r5.<java.io.ObjectInputStream$HandleTable: void setObject(int,java.lang.Object)>($i1, r2);

     label2:
        return r2;
    }

    java.lang.String readTypeString() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        int i0;
        byte b1;
        java.lang.String r1, r6, r7, $r11;
        java.lang.Throwable r2, $r12;
        java.io.ObjectInputStream$BlockDataInputStream $r3;
        java.lang.Object $r4, $r5;
        java.io.StreamCorruptedException $r8;
        java.lang.Object[] $r9;
        java.lang.Byte $r10;

        r0 := @this: java.io.ObjectInputStream;
        i0 = r0.<java.io.ObjectInputStream: int passHandle>;

     label0:
        $r3 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        b1 = virtualinvoke $r3.<java.io.ObjectInputStream$BlockDataInputStream: byte peekByte()>();
        lookupswitch(b1)
        {
            case 112: goto label1;
            case 113: goto label3;
            case 116: goto label5;
            case 124: goto label5;
            default: goto label7;
        };

     label1:
        $r4 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readNull()>();
        r1 = (java.lang.String) $r4;

     label2:
        r0.<java.io.ObjectInputStream: int passHandle> = i0;
        return r1;

     label3:
        $r5 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readHandle(boolean)>(0);
        r6 = (java.lang.String) $r5;

     label4:
        r0.<java.io.ObjectInputStream: int passHandle> = i0;
        return r6;

     label5:
        r7 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.String readString(boolean)>(0);

     label6:
        r0.<java.io.ObjectInputStream: int passHandle> = i0;
        return r7;

     label7:
        $r8 = new java.io.StreamCorruptedException;
        $r9 = newarray (java.lang.Object)[1];
        $r10 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b1);
        $r9[0] = $r10;
        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("invalid type code: %02X", $r9);
        specialinvoke $r8.<java.io.StreamCorruptedException: void <init>(java.lang.String)>($r11);
        throw $r8;

     label8:
        $r12 := @caughtexception;
        r2 = $r12;

     label9:
        r0.<java.io.ObjectInputStream: int passHandle> = i0;
        throw r2;

        catch java.lang.Throwable from label0 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
        catch java.lang.Throwable from label7 to label9 with label8;
    }

    private java.lang.Object readNull() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;
        byte $b0;
        java.lang.InternalError $r2;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $b0 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: byte readByte()>();
        if $b0 == 112 goto label0;

        $r2 = new java.lang.InternalError;
        specialinvoke $r2.<java.lang.InternalError: void <init>()>();
        throw $r2;

     label0:
        r0.<java.io.ObjectInputStream: int passHandle> = -1;
        return null;
    }

    private java.lang.Object readHandle(boolean) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0;
        java.lang.Object r1, $r12;
        java.io.ObjectInputStream$BlockDataInputStream $r2, $r4;
        byte $b0;
        java.lang.InternalError $r3;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.io.ObjectInputStream$HandleTable $r5, $r11;
        java.io.StreamCorruptedException $r6;
        java.lang.Object[] $r7;
        java.lang.Integer $r8;
        java.lang.String $r9;
        java.io.InvalidObjectException $r10, $r13;

        r0 := @this: java.io.ObjectInputStream;
        z0 := @parameter0: boolean;
        $r2 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $b0 = virtualinvoke $r2.<java.io.ObjectInputStream$BlockDataInputStream: byte readByte()>();
        if $b0 == 113 goto label0;

        $r3 = new java.lang.InternalError;
        specialinvoke $r3.<java.lang.InternalError: void <init>()>();
        throw $r3;

     label0:
        $r4 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $i1 = virtualinvoke $r4.<java.io.ObjectInputStream$BlockDataInputStream: int readInt()>();
        $i2 = $i1 - 8257536;
        r0.<java.io.ObjectInputStream: int passHandle> = $i2;
        $i3 = r0.<java.io.ObjectInputStream: int passHandle>;
        if $i3 < 0 goto label1;

        $i4 = r0.<java.io.ObjectInputStream: int passHandle>;
        $r5 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i5 = virtualinvoke $r5.<java.io.ObjectInputStream$HandleTable: int size()>();
        if $i4 < $i5 goto label2;

     label1:
        $r6 = new java.io.StreamCorruptedException;
        $r7 = newarray (java.lang.Object)[1];
        $i6 = r0.<java.io.ObjectInputStream: int passHandle>;
        $i7 = $i6 + 8257536;
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);
        $r7[0] = $r8;
        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("invalid handle value: %08X", $r7);
        specialinvoke $r6.<java.io.StreamCorruptedException: void <init>(java.lang.String)>($r9);
        throw $r6;

     label2:
        if z0 == 0 goto label3;

        $r10 = new java.io.InvalidObjectException;
        specialinvoke $r10.<java.io.InvalidObjectException: void <init>(java.lang.String)>("cannot read back reference as unshared");
        throw $r10;

     label3:
        $r11 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i8 = r0.<java.io.ObjectInputStream: int passHandle>;
        r1 = virtualinvoke $r11.<java.io.ObjectInputStream$HandleTable: java.lang.Object lookupObject(int)>($i8);
        $r12 = <java.io.ObjectInputStream: java.lang.Object unsharedMarker>;
        if r1 != $r12 goto label4;

        $r13 = new java.io.InvalidObjectException;
        specialinvoke $r13.<java.io.InvalidObjectException: void <init>(java.lang.String)>("cannot read back reference to unshared object");
        throw $r13;

     label4:
        return r1;
    }

    private java.lang.Class readClass(boolean) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0;
        java.io.ObjectStreamClass r1;
        java.lang.Class r2;
        java.lang.ClassNotFoundException r3;
        java.io.ObjectInputStream$BlockDataInputStream $r4;
        byte $b0;
        java.lang.InternalError $r5;
        java.io.ObjectInputStream$HandleTable $r7, $r9, $r10;
        java.lang.Object $r8;
        int $i1, $i2, $i3;

        r0 := @this: java.io.ObjectInputStream;
        z0 := @parameter0: boolean;
        $r4 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $b0 = virtualinvoke $r4.<java.io.ObjectInputStream$BlockDataInputStream: byte readByte()>();
        if $b0 == 118 goto label0;

        $r5 = new java.lang.InternalError;
        specialinvoke $r5.<java.lang.InternalError: void <init>()>();
        throw $r5;

     label0:
        r1 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDesc(boolean)>(0);
        r2 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Class forClass()>();
        $r7 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        if z0 == 0 goto label1;

        $r8 = <java.io.ObjectInputStream: java.lang.Object unsharedMarker>;
        goto label2;

     label1:
        $r8 = r2;

     label2:
        $i1 = virtualinvoke $r7.<java.io.ObjectInputStream$HandleTable: int assign(java.lang.Object)>($r8);
        r0.<java.io.ObjectInputStream: int passHandle> = $i1;
        r3 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.ClassNotFoundException getResolveException()>();
        if r3 == null goto label3;

        $r9 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i2 = r0.<java.io.ObjectInputStream: int passHandle>;
        virtualinvoke $r9.<java.io.ObjectInputStream$HandleTable: void markException(int,java.lang.ClassNotFoundException)>($i2, r3);

     label3:
        $r10 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i3 = r0.<java.io.ObjectInputStream: int passHandle>;
        virtualinvoke $r10.<java.io.ObjectInputStream$HandleTable: void finish(int)>($i3);
        return r2;
    }

    private java.io.ObjectStreamClass readClassDesc(boolean) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0;
        byte b0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;
        java.lang.Object $r2, $r4;
        java.io.ObjectStreamClass $r3, $r5, $r6, $r7;
        java.io.StreamCorruptedException $r8;
        java.lang.Object[] $r9;
        java.lang.Byte $r10;
        java.lang.String $r11;

        r0 := @this: java.io.ObjectInputStream;
        z0 := @parameter0: boolean;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        b0 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: byte peekByte()>();
        lookupswitch(b0)
        {
            case 112: goto label0;
            case 113: goto label1;
            case 114: goto label3;
            case 125: goto label2;
            default: goto label4;
        };

     label0:
        $r2 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readNull()>();
        $r3 = (java.io.ObjectStreamClass) $r2;
        return $r3;

     label1:
        $r4 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readHandle(boolean)>(z0);
        $r5 = (java.io.ObjectStreamClass) $r4;
        return $r5;

     label2:
        $r6 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readProxyDesc(boolean)>(z0);
        return $r6;

     label3:
        $r7 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readNonProxyDesc(boolean)>(z0);
        return $r7;

     label4:
        $r8 = new java.io.StreamCorruptedException;
        $r9 = newarray (java.lang.Object)[1];
        $r10 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);
        $r9[0] = $r10;
        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("invalid type code: %02X", $r9);
        specialinvoke $r8.<java.io.StreamCorruptedException: void <init>(java.lang.String)>($r11);
        throw $r8;
    }

    private boolean isCustomSubclass()
    {
        java.io.ObjectInputStream r0;
        java.lang.Class $r1, $r2;
        java.lang.ClassLoader $r3, $r4;
        boolean $z0;

        r0 := @this: java.io.ObjectInputStream;
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        $r1 = class "java/io/ObjectInputStream";
        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        if $r3 == $r4 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private java.io.ObjectStreamClass readProxyDesc(boolean) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0, $z2;
        java.io.ObjectStreamClass r1, $r7, $r22;
        int i0, i1, i2;
        java.lang.String[] r2;
        java.lang.ClassNotFoundException r3, r4, $r16, $r21;
        java.io.ObjectInputStream$BlockDataInputStream $r5, $r10, $r11, $r14;
        byte $b3;
        java.lang.InternalError $r6;
        java.io.ObjectInputStream$HandleTable $r8, $r23;
        java.lang.Object $r9;
        java.lang.String $r12;
        java.lang.Class r13, $r15, $r18;
        java.io.InvalidClassException $r17;
        java.lang.ClassLoader $r19;
        java.lang.Class[] $r20;

        r0 := @this: java.io.ObjectInputStream;
        z0 := @parameter0: boolean;
        $r5 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $b3 = virtualinvoke $r5.<java.io.ObjectInputStream$BlockDataInputStream: byte readByte()>();
        if $b3 == 125 goto label0;

        $r6 = new java.lang.InternalError;
        specialinvoke $r6.<java.lang.InternalError: void <init>()>();
        throw $r6;

     label0:
        $r7 = new java.io.ObjectStreamClass;
        specialinvoke $r7.<java.io.ObjectStreamClass: void <init>()>();
        r1 = $r7;
        $r8 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        if z0 == 0 goto label1;

        $r9 = <java.io.ObjectInputStream: java.lang.Object unsharedMarker>;
        goto label2;

     label1:
        $r9 = r1;

     label2:
        i0 = virtualinvoke $r8.<java.io.ObjectInputStream$HandleTable: int assign(java.lang.Object)>($r9);
        r0.<java.io.ObjectInputStream: int passHandle> = -1;
        $r10 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        i1 = virtualinvoke $r10.<java.io.ObjectInputStream$BlockDataInputStream: int readInt()>();
        r2 = newarray (java.lang.String)[i1];
        i2 = 0;

     label3:
        if i2 >= i1 goto label4;

        $r11 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $r12 = virtualinvoke $r11.<java.io.ObjectInputStream$BlockDataInputStream: java.lang.String readUTF()>();
        r2[i2] = $r12;
        i2 = i2 + 1;
        goto label3;

     label4:
        r13 = null;
        r3 = null;
        $r14 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r14.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(1);

     label5:
        $r15 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>(r2);
        r13 = $r15;
        if $r15 != null goto label6;

        $r16 = new java.lang.ClassNotFoundException;
        specialinvoke $r16.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>("null class");
        r3 = $r16;
        goto label8;

     label6:
        $z2 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(r13);
        if $z2 != 0 goto label7;

        $r17 = new java.io.InvalidClassException;
        specialinvoke $r17.<java.io.InvalidClassException: void <init>(java.lang.String)>("Not a proxy");
        throw $r17;

     label7:
        $r18 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        $r20 = virtualinvoke r13.<java.lang.Class: java.lang.Class[] getInterfaces()>();
        staticinvoke <sun.reflect.misc.ReflectUtil: void checkProxyPackageAccess(java.lang.ClassLoader,java.lang.Class[])>($r19, $r20);

     label8:
        goto label10;

     label9:
        $r21 := @caughtexception;
        r4 = $r21;
        r3 = r4;

     label10:
        specialinvoke r0.<java.io.ObjectInputStream: void skipCustomData()>();
        $r22 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDesc(boolean)>(0);
        virtualinvoke r1.<java.io.ObjectStreamClass: void initProxy(java.lang.Class,java.lang.ClassNotFoundException,java.io.ObjectStreamClass)>(r13, r3, $r22);
        $r23 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        virtualinvoke $r23.<java.io.ObjectInputStream$HandleTable: void finish(int)>(i0);
        r0.<java.io.ObjectInputStream: int passHandle> = i0;
        return r1;

        catch java.lang.ClassNotFoundException from label5 to label8 with label9;
    }

    private java.io.ObjectStreamClass readNonProxyDesc(boolean) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0, z1;
        java.io.ObjectStreamClass r1, $r7, r10, $r20;
        int i0;
        null_type n0;
        java.lang.ClassNotFoundException r2, r3, r4, $r11, $r18, $r19;
        java.io.ObjectInputStream$BlockDataInputStream $r5, $r16;
        byte $b1;
        java.lang.InternalError $r6;
        java.io.ObjectInputStream$HandleTable $r8, $r21;
        java.lang.Object $r9;
        java.io.InvalidClassException $r12;
        java.lang.Throwable $r13;
        java.io.IOException $r14;
        java.lang.Class r15, $r17;

        r0 := @this: java.io.ObjectInputStream;
        z0 := @parameter0: boolean;
        $r5 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $b1 = virtualinvoke $r5.<java.io.ObjectInputStream$BlockDataInputStream: byte readByte()>();
        if $b1 == 114 goto label0;

        $r6 = new java.lang.InternalError;
        specialinvoke $r6.<java.lang.InternalError: void <init>()>();
        throw $r6;

     label0:
        $r7 = new java.io.ObjectStreamClass;
        specialinvoke $r7.<java.io.ObjectStreamClass: void <init>()>();
        r1 = $r7;
        $r8 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        if z0 == 0 goto label1;

        $r9 = <java.io.ObjectInputStream: java.lang.Object unsharedMarker>;
        goto label2;

     label1:
        $r9 = r1;

     label2:
        i0 = virtualinvoke $r8.<java.io.ObjectInputStream$HandleTable: int assign(java.lang.Object)>($r9);
        r0.<java.io.ObjectInputStream: int passHandle> = -1;
        n0 = null;

     label3:
        r10 = virtualinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDescriptor()>();

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;
        r2 = $r11;
        $r12 = new java.io.InvalidClassException;
        specialinvoke $r12.<java.io.InvalidClassException: void <init>(java.lang.String)>("failed to read class descriptor");
        $r13 = virtualinvoke $r12.<java.io.InvalidClassException: java.lang.Throwable initCause(java.lang.Throwable)>(r2);
        $r14 = (java.io.IOException) $r13;
        throw $r14;

     label6:
        r15 = null;
        r3 = null;
        $r16 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r16.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(1);
        z1 = specialinvoke r0.<java.io.ObjectInputStream: boolean isCustomSubclass()>();

     label7:
        $r17 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>(r10);
        r15 = $r17;
        if $r17 != null goto label8;

        $r18 = new java.lang.ClassNotFoundException;
        specialinvoke $r18.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>("null class");
        r3 = $r18;
        goto label9;

     label8:
        if z1 == 0 goto label9;

        staticinvoke <sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.Class)>(r15);

     label9:
        goto label11;

     label10:
        $r19 := @caughtexception;
        r4 = $r19;
        r3 = r4;

     label11:
        specialinvoke r0.<java.io.ObjectInputStream: void skipCustomData()>();
        $r20 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDesc(boolean)>(0);
        virtualinvoke r1.<java.io.ObjectStreamClass: void initNonProxy(java.io.ObjectStreamClass,java.lang.Class,java.lang.ClassNotFoundException,java.io.ObjectStreamClass)>(r10, r15, r3, $r20);
        $r21 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        virtualinvoke $r21.<java.io.ObjectInputStream$HandleTable: void finish(int)>(i0);
        r0.<java.io.ObjectInputStream: int passHandle> = i0;
        return r1;

        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
        catch java.lang.ClassNotFoundException from label7 to label9 with label10;
    }

    private java.lang.String readString(boolean) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0;
        byte b0;
        java.lang.String r1, $r8;
        java.io.ObjectInputStream$BlockDataInputStream $r2, $r3, $r4;
        java.io.StreamCorruptedException $r5;
        java.lang.Object[] $r6;
        java.lang.Byte $r7;
        java.io.ObjectInputStream$HandleTable $r10, $r12;
        java.lang.Object $r11;
        int $i1, $i2;

        r0 := @this: java.io.ObjectInputStream;
        z0 := @parameter0: boolean;
        $r2 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        b0 = virtualinvoke $r2.<java.io.ObjectInputStream$BlockDataInputStream: byte readByte()>();
        lookupswitch(b0)
        {
            case 116: goto label0;
            case 124: goto label1;
            default: goto label2;
        };

     label0:
        $r3 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        r1 = virtualinvoke $r3.<java.io.ObjectInputStream$BlockDataInputStream: java.lang.String readUTF()>();
        goto label3;

     label1:
        $r4 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        r1 = virtualinvoke $r4.<java.io.ObjectInputStream$BlockDataInputStream: java.lang.String readLongUTF()>();
        goto label3;

     label2:
        $r5 = new java.io.StreamCorruptedException;
        $r6 = newarray (java.lang.Object)[1];
        $r7 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);
        $r6[0] = $r7;
        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("invalid type code: %02X", $r6);
        specialinvoke $r5.<java.io.StreamCorruptedException: void <init>(java.lang.String)>($r8);
        throw $r5;

     label3:
        $r10 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        if z0 == 0 goto label4;

        $r11 = <java.io.ObjectInputStream: java.lang.Object unsharedMarker>;
        goto label5;

     label4:
        $r11 = r1;

     label5:
        $i1 = virtualinvoke $r10.<java.io.ObjectInputStream$HandleTable: int assign(java.lang.Object)>($r11);
        r0.<java.io.ObjectInputStream: int passHandle> = $i1;
        $r12 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i2 = r0.<java.io.ObjectInputStream: int passHandle>;
        virtualinvoke $r12.<java.io.ObjectInputStream$HandleTable: void finish(int)>($i2);
        return r1;
    }

    private java.lang.Object readArray(boolean) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0, $z1;
        java.io.ObjectStreamClass r1;
        int i0, i1, i2, i3, $i5;
        java.lang.Object r2, $r11, $r49;
        java.lang.Class r3, r4, $r9, $r14, $r18, $r22, $r26, $r30, $r34, $r38, $r42;
        java.lang.ClassNotFoundException r5;
        java.io.ObjectInputStream$BlockDataInputStream $r6, $r8, $r15, $r19, $r23, $r27, $r31, $r35, $r39, $r43;
        byte $b4;
        java.lang.InternalError $r7, $r46;
        java.io.ObjectInputStream$HandleTable $r10, $r12, $r50, $r51;
        int[] $r16, $r17;
        byte[] $r20, $r21;
        long[] $r24, $r25;
        float[] $r28, $r29;
        double[] $r32, $r33;
        short[] $r36, $r37;
        char[] $r40, $r41;
        boolean[] $r44, $r45;
        java.lang.Object[] $r47, r48;

        r0 := @this: java.io.ObjectInputStream;
        z0 := @parameter0: boolean;
        $r6 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $b4 = virtualinvoke $r6.<java.io.ObjectInputStream$BlockDataInputStream: byte readByte()>();
        if $b4 == 117 goto label0;

        $r7 = new java.lang.InternalError;
        specialinvoke $r7.<java.lang.InternalError: void <init>()>();
        throw $r7;

     label0:
        r1 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDesc(boolean)>(0);
        $r8 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        i0 = virtualinvoke $r8.<java.io.ObjectInputStream$BlockDataInputStream: int readInt()>();
        r2 = null;
        r3 = null;
        $r9 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Class forClass()>();
        r4 = $r9;
        if $r9 == null goto label1;

        r3 = virtualinvoke r4.<java.lang.Class: java.lang.Class getComponentType()>();
        r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r3, i0);

     label1:
        $r10 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        if z0 == 0 goto label2;

        $r11 = <java.io.ObjectInputStream: java.lang.Object unsharedMarker>;
        goto label3;

     label2:
        $r11 = r2;

     label3:
        i1 = virtualinvoke $r10.<java.io.ObjectInputStream$HandleTable: int assign(java.lang.Object)>($r11);
        r5 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.ClassNotFoundException getResolveException()>();
        if r5 == null goto label4;

        $r12 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        virtualinvoke $r12.<java.io.ObjectInputStream$HandleTable: void markException(int,java.lang.ClassNotFoundException)>(i1, r5);

     label4:
        if r3 != null goto label7;

        i2 = 0;

     label5:
        if i2 >= i0 goto label6;

        specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject0(boolean)>(0);
        i2 = i2 + 1;
        goto label5;

     label6:
        goto label18;

     label7:
        $z1 = virtualinvoke r3.<java.lang.Class: boolean isPrimitive()>();
        if $z1 == 0 goto label16;

        $r14 = <java.lang.Integer: java.lang.Class TYPE>;
        if r3 != $r14 goto label8;

        $r15 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $r16 = (int[]) r2;
        $r17 = (int[]) $r16;
        virtualinvoke $r15.<java.io.ObjectInputStream$BlockDataInputStream: void readInts(int[],int,int)>($r17, 0, i0);
        goto label18;

     label8:
        $r18 = <java.lang.Byte: java.lang.Class TYPE>;
        if r3 != $r18 goto label9;

        $r19 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $r20 = (byte[]) r2;
        $r21 = (byte[]) $r20;
        virtualinvoke $r19.<java.io.ObjectInputStream$BlockDataInputStream: void readFully(byte[],int,int,boolean)>($r21, 0, i0, 1);
        goto label18;

     label9:
        $r22 = <java.lang.Long: java.lang.Class TYPE>;
        if r3 != $r22 goto label10;

        $r23 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $r24 = (long[]) r2;
        $r25 = (long[]) $r24;
        virtualinvoke $r23.<java.io.ObjectInputStream$BlockDataInputStream: void readLongs(long[],int,int)>($r25, 0, i0);
        goto label18;

     label10:
        $r26 = <java.lang.Float: java.lang.Class TYPE>;
        if r3 != $r26 goto label11;

        $r27 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $r28 = (float[]) r2;
        $r29 = (float[]) $r28;
        virtualinvoke $r27.<java.io.ObjectInputStream$BlockDataInputStream: void readFloats(float[],int,int)>($r29, 0, i0);
        goto label18;

     label11:
        $r30 = <java.lang.Double: java.lang.Class TYPE>;
        if r3 != $r30 goto label12;

        $r31 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $r32 = (double[]) r2;
        $r33 = (double[]) $r32;
        virtualinvoke $r31.<java.io.ObjectInputStream$BlockDataInputStream: void readDoubles(double[],int,int)>($r33, 0, i0);
        goto label18;

     label12:
        $r34 = <java.lang.Short: java.lang.Class TYPE>;
        if r3 != $r34 goto label13;

        $r35 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $r36 = (short[]) r2;
        $r37 = (short[]) $r36;
        virtualinvoke $r35.<java.io.ObjectInputStream$BlockDataInputStream: void readShorts(short[],int,int)>($r37, 0, i0);
        goto label18;

     label13:
        $r38 = <java.lang.Character: java.lang.Class TYPE>;
        if r3 != $r38 goto label14;

        $r39 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $r40 = (char[]) r2;
        $r41 = (char[]) $r40;
        virtualinvoke $r39.<java.io.ObjectInputStream$BlockDataInputStream: void readChars(char[],int,int)>($r41, 0, i0);
        goto label18;

     label14:
        $r42 = <java.lang.Boolean: java.lang.Class TYPE>;
        if r3 != $r42 goto label15;

        $r43 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $r44 = (boolean[]) r2;
        $r45 = (boolean[]) $r44;
        virtualinvoke $r43.<java.io.ObjectInputStream$BlockDataInputStream: void readBooleans(boolean[],int,int)>($r45, 0, i0);
        goto label18;

     label15:
        $r46 = new java.lang.InternalError;
        specialinvoke $r46.<java.lang.InternalError: void <init>()>();
        throw $r46;

     label16:
        $r47 = (java.lang.Object[]) r2;
        r48 = (java.lang.Object[]) $r47;
        i3 = 0;

     label17:
        if i3 >= i0 goto label18;

        $r49 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject0(boolean)>(0);
        r48[i3] = $r49;
        $r50 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i5 = r0.<java.io.ObjectInputStream: int passHandle>;
        virtualinvoke $r50.<java.io.ObjectInputStream$HandleTable: void markDependency(int,int)>(i1, $i5);
        i3 = i3 + 1;
        goto label17;

     label18:
        $r51 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        virtualinvoke $r51.<java.io.ObjectInputStream$HandleTable: void finish(int)>(i1);
        r0.<java.io.ObjectInputStream: int passHandle> = i1;
        return r2;
    }

    private java.lang.Enum readEnum(boolean) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0, $z1;
        java.io.ObjectStreamClass r1;
        java.lang.StringBuilder $r2, $r11, $r12, $r19, $r20, $r21, $r22, $r23;
        int i0;
        java.lang.ClassNotFoundException r3;
        java.lang.String r4, $r13, $r24;
        java.lang.Enum r5;
        java.lang.Class r6;
        java.lang.IllegalArgumentException r7, $r17;
        java.io.ObjectInputStream$BlockDataInputStream $r8;
        byte $b1;
        java.lang.InternalError $r9;
        java.io.InvalidClassException $r10;
        java.io.ObjectInputStream$HandleTable $r14, $r16, $r27, $r28;
        java.lang.Object $r15;
        java.io.InvalidObjectException $r18;
        java.lang.Throwable $r25;
        java.io.IOException $r26;

        r0 := @this: java.io.ObjectInputStream;
        z0 := @parameter0: boolean;
        $r8 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $b1 = virtualinvoke $r8.<java.io.ObjectInputStream$BlockDataInputStream: byte readByte()>();
        if $b1 == 126 goto label0;

        $r9 = new java.lang.InternalError;
        specialinvoke $r9.<java.lang.InternalError: void <init>()>();
        throw $r9;

     label0:
        r1 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDesc(boolean)>(0);
        $z1 = virtualinvoke r1.<java.io.ObjectStreamClass: boolean isEnum()>();
        if $z1 != 0 goto label1;

        $r10 = new java.io.InvalidClassException;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("non-enum class: ");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r10.<java.io.InvalidClassException: void <init>(java.lang.String)>($r13);
        throw $r10;

     label1:
        $r14 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        if z0 == 0 goto label2;

        $r15 = <java.io.ObjectInputStream: java.lang.Object unsharedMarker>;
        goto label3;

     label2:
        $r15 = null;

     label3:
        i0 = virtualinvoke $r14.<java.io.ObjectInputStream$HandleTable: int assign(java.lang.Object)>($r15);
        r3 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.ClassNotFoundException getResolveException()>();
        if r3 == null goto label4;

        $r16 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        virtualinvoke $r16.<java.io.ObjectInputStream$HandleTable: void markException(int,java.lang.ClassNotFoundException)>(i0, r3);

     label4:
        r4 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.String readString(boolean)>(0);
        r5 = null;
        r6 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Class forClass()>();
        if r6 == null goto label9;

     label5:
        r5 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(r6, r4);

     label6:
        goto label8;

     label7:
        $r17 := @caughtexception;
        r7 = $r17;
        $r18 = new java.io.InvalidObjectException;
        $r19 = new java.lang.StringBuilder;
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("enum constant ");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist in ");
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r18.<java.io.InvalidObjectException: void <init>(java.lang.String)>($r24);
        $r25 = virtualinvoke $r18.<java.io.InvalidObjectException: java.lang.Throwable initCause(java.lang.Throwable)>(r7);
        $r26 = (java.io.IOException) $r25;
        throw $r26;

     label8:
        if z0 != 0 goto label9;

        $r27 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        virtualinvoke $r27.<java.io.ObjectInputStream$HandleTable: void setObject(int,java.lang.Object)>(i0, r5);

     label9:
        $r28 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        virtualinvoke $r28.<java.io.ObjectInputStream$HandleTable: void finish(int)>(i0);
        r0.<java.io.ObjectInputStream: int passHandle> = i0;
        return r5;

        catch java.lang.IllegalArgumentException from label5 to label6 with label7;
    }

    private java.lang.Object readOrdinaryObject(boolean) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0, $z1, $z2, $z3, $z4;
        java.io.ObjectStreamClass r1;
        java.lang.Class r2, $r12, $r25;
        java.lang.Object r3, r5, $r9, $r18;
        java.lang.Exception r4, $r10;
        java.io.ObjectInputStream$BlockDataInputStream $r6;
        byte $b0;
        java.lang.InternalError $r7;
        java.io.InvalidClassException $r8, $r11;
        java.lang.String $r13;
        java.lang.Throwable $r14;
        java.io.IOException $r15;
        java.io.ObjectInputStream$HandleTable $r17, $r20, $r22, $r23, $r26;
        int $i1, $i2, $i3, $i4, $i5;
        java.lang.ClassNotFoundException r19, $r24;
        java.io.Externalizable $r21;

        r0 := @this: java.io.ObjectInputStream;
        z0 := @parameter0: boolean;
        $r6 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $b0 = virtualinvoke $r6.<java.io.ObjectInputStream$BlockDataInputStream: byte readByte()>();
        if $b0 == 115 goto label0;

        $r7 = new java.lang.InternalError;
        specialinvoke $r7.<java.lang.InternalError: void <init>()>();
        throw $r7;

     label0:
        r1 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDesc(boolean)>(0);
        virtualinvoke r1.<java.io.ObjectStreamClass: void checkDeserialize()>();
        r2 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Class forClass()>();
        if r2 == class "java/lang/String" goto label1;

        if r2 == class "java/lang/Class" goto label1;

        if r2 != class "java/io/ObjectStreamClass" goto label2;

     label1:
        $r8 = new java.io.InvalidClassException;
        specialinvoke $r8.<java.io.InvalidClassException: void <init>(java.lang.String)>("invalid class descriptor");
        throw $r8;

     label2:
        $z1 = virtualinvoke r1.<java.io.ObjectStreamClass: boolean isInstantiable()>();
        if $z1 == 0 goto label3;

        $r9 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Object newInstance()>();
        goto label4;

     label3:
        $r9 = null;

     label4:
        r3 = $r9;

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;
        r4 = $r10;
        $r11 = new java.io.InvalidClassException;
        $r12 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Class forClass()>();
        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();
        specialinvoke $r11.<java.io.InvalidClassException: void <init>(java.lang.String,java.lang.String)>($r13, "unable to create instance");
        $r14 = virtualinvoke $r11.<java.io.InvalidClassException: java.lang.Throwable initCause(java.lang.Throwable)>(r4);
        $r15 = (java.io.IOException) $r14;
        throw $r15;

     label7:
        $r17 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        if z0 == 0 goto label8;

        $r18 = <java.io.ObjectInputStream: java.lang.Object unsharedMarker>;
        goto label9;

     label8:
        $r18 = r3;

     label9:
        $i1 = virtualinvoke $r17.<java.io.ObjectInputStream$HandleTable: int assign(java.lang.Object)>($r18);
        r0.<java.io.ObjectInputStream: int passHandle> = $i1;
        r19 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.ClassNotFoundException getResolveException()>();
        if r19 == null goto label10;

        $r20 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i2 = r0.<java.io.ObjectInputStream: int passHandle>;
        virtualinvoke $r20.<java.io.ObjectInputStream$HandleTable: void markException(int,java.lang.ClassNotFoundException)>($i2, r19);

     label10:
        $z2 = virtualinvoke r1.<java.io.ObjectStreamClass: boolean isExternalizable()>();
        if $z2 == 0 goto label11;

        $r21 = (java.io.Externalizable) r3;
        specialinvoke r0.<java.io.ObjectInputStream: void readExternalData(java.io.Externalizable,java.io.ObjectStreamClass)>($r21, r1);
        goto label12;

     label11:
        specialinvoke r0.<java.io.ObjectInputStream: void readSerialData(java.lang.Object,java.io.ObjectStreamClass)>(r3, r1);

     label12:
        $r22 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i3 = r0.<java.io.ObjectInputStream: int passHandle>;
        virtualinvoke $r22.<java.io.ObjectInputStream$HandleTable: void finish(int)>($i3);
        if r3 == null goto label14;

        $r23 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i4 = r0.<java.io.ObjectInputStream: int passHandle>;
        $r24 = virtualinvoke $r23.<java.io.ObjectInputStream$HandleTable: java.lang.ClassNotFoundException lookupException(int)>($i4);
        if $r24 != null goto label14;

        $z3 = virtualinvoke r1.<java.io.ObjectStreamClass: boolean hasReadResolveMethod()>();
        if $z3 == 0 goto label14;

        r5 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Object invokeReadResolve(java.lang.Object)>(r3);
        if z0 == 0 goto label13;

        $r25 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();
        $z4 = virtualinvoke $r25.<java.lang.Class: boolean isArray()>();
        if $z4 == 0 goto label13;

        r5 = staticinvoke <java.io.ObjectInputStream: java.lang.Object cloneArray(java.lang.Object)>(r5);

     label13:
        if r5 == r3 goto label14;

        $r26 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i5 = r0.<java.io.ObjectInputStream: int passHandle>;
        r3 = r5;
        virtualinvoke $r26.<java.io.ObjectInputStream$HandleTable: void setObject(int,java.lang.Object)>($i5, r5);

     label14:
        return r3;

        catch java.lang.Exception from label2 to label5 with label6;
    }

    private void readExternalData(java.io.Externalizable, java.io.ObjectStreamClass) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.Externalizable r1;
        java.io.ObjectStreamClass r2;
        java.io.SerialCallbackContext r3;
        boolean z0;
        java.lang.ClassNotFoundException r4, $r7;
        java.lang.Throwable r5, $r9;
        java.io.ObjectInputStream$BlockDataInputStream $r6;
        java.io.ObjectInputStream$HandleTable $r8;
        int $i0;

        r0 := @this: java.io.ObjectInputStream;
        r1 := @parameter0: java.io.Externalizable;
        r2 := @parameter1: java.io.ObjectStreamClass;
        r3 = r0.<java.io.ObjectInputStream: java.io.SerialCallbackContext curContext>;
        r0.<java.io.ObjectInputStream: java.io.SerialCallbackContext curContext> = null;

     label0:
        z0 = virtualinvoke r2.<java.io.ObjectStreamClass: boolean hasBlockExternalData()>();
        if z0 == 0 goto label1;

        $r6 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r6.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(1);

     label1:
        if r1 == null goto label5;

     label2:
        interfaceinvoke r1.<java.io.Externalizable: void readExternal(java.io.ObjectInput)>(r0);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;
        r4 = $r7;
        $r8 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i0 = r0.<java.io.ObjectInputStream: int passHandle>;
        virtualinvoke $r8.<java.io.ObjectInputStream$HandleTable: void markException(int,java.lang.ClassNotFoundException)>($i0, r4);

     label5:
        if z0 == 0 goto label6;

        specialinvoke r0.<java.io.ObjectInputStream: void skipCustomData()>();

     label6:
        r0.<java.io.ObjectInputStream: java.io.SerialCallbackContext curContext> = r3;
        goto label10;

     label7:
        $r9 := @caughtexception;

     label8:
        r5 = $r9;

     label9:
        r0.<java.io.ObjectInputStream: java.io.SerialCallbackContext curContext> = r3;
        throw r5;

     label10:
        return;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
        catch java.lang.Throwable from label0 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void readSerialData(java.lang.Object, java.io.ObjectStreamClass) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.lang.Object r1;
        java.io.ObjectStreamClass r2, r4;
        java.io.ObjectStreamClass$ClassDataSlot[] r3;
        int i0, $i1, $i2, $i3, $i4;
        java.io.SerialCallbackContext r5, $r12, $r14, $r17, $r19;
        java.lang.ClassNotFoundException r6, $r11, $r15, $r22;
        java.lang.Throwable r7, $r18;
        java.io.ObjectStreamClass$ClassDataSlot $r8, $r9;
        boolean $z0, $z1, $z3, $z5;
        java.io.ObjectInputStream$HandleTable $r10, $r16, $r21;
        java.io.ObjectInputStream$BlockDataInputStream $r13, $r20;

        r0 := @this: java.io.ObjectInputStream;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.io.ObjectStreamClass;
        r3 = virtualinvoke r2.<java.io.ObjectStreamClass: java.io.ObjectStreamClass$ClassDataSlot[] getClassDataLayout()>();
        i0 = 0;

     label0:
        $i1 = lengthof r3;
        if i0 >= $i1 goto label15;

        $r8 = r3[i0];
        r4 = $r8.<java.io.ObjectStreamClass$ClassDataSlot: java.io.ObjectStreamClass desc>;
        $r9 = r3[i0];
        $z0 = $r9.<java.io.ObjectStreamClass$ClassDataSlot: boolean hasData>;
        if $z0 == 0 goto label13;

        if r1 == null goto label10;

        $z1 = virtualinvoke r4.<java.io.ObjectStreamClass: boolean hasReadObjectMethod()>();
        if $z1 == 0 goto label10;

        $r10 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i2 = r0.<java.io.ObjectInputStream: int passHandle>;
        $r11 = virtualinvoke $r10.<java.io.ObjectInputStream$HandleTable: java.lang.ClassNotFoundException lookupException(int)>($i2);
        if $r11 != null goto label10;

        r5 = r0.<java.io.ObjectInputStream: java.io.SerialCallbackContext curContext>;

     label1:
        $r12 = new java.io.SerialCallbackContext;
        specialinvoke $r12.<java.io.SerialCallbackContext: void <init>(java.lang.Object,java.io.ObjectStreamClass)>(r1, r4);
        r0.<java.io.ObjectInputStream: java.io.SerialCallbackContext curContext> = $r12;
        $r13 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r13.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(1);
        virtualinvoke r4.<java.io.ObjectStreamClass: void invokeReadObject(java.lang.Object,java.io.ObjectInputStream)>(r1, r0);

     label2:
        $r14 = r0.<java.io.ObjectInputStream: java.io.SerialCallbackContext curContext>;
        virtualinvoke $r14.<java.io.SerialCallbackContext: void setUsed()>();
        r0.<java.io.ObjectInputStream: java.io.SerialCallbackContext curContext> = r5;
        goto label9;

     label3:
        $r15 := @caughtexception;

     label4:
        r6 = $r15;
        $r16 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i3 = r0.<java.io.ObjectInputStream: int passHandle>;
        virtualinvoke $r16.<java.io.ObjectInputStream$HandleTable: void markException(int,java.lang.ClassNotFoundException)>($i3, r6);

     label5:
        $r17 = r0.<java.io.ObjectInputStream: java.io.SerialCallbackContext curContext>;
        virtualinvoke $r17.<java.io.SerialCallbackContext: void setUsed()>();
        r0.<java.io.ObjectInputStream: java.io.SerialCallbackContext curContext> = r5;
        goto label9;

     label6:
        $r18 := @caughtexception;

     label7:
        r7 = $r18;

     label8:
        $r19 = r0.<java.io.ObjectInputStream: java.io.SerialCallbackContext curContext>;
        virtualinvoke $r19.<java.io.SerialCallbackContext: void setUsed()>();
        r0.<java.io.ObjectInputStream: java.io.SerialCallbackContext curContext> = r5;
        throw r7;

     label9:
        r0.<java.io.ObjectInputStream: boolean defaultDataEnd> = 0;
        goto label11;

     label10:
        specialinvoke r0.<java.io.ObjectInputStream: void defaultReadFields(java.lang.Object,java.io.ObjectStreamClass)>(r1, r4);

     label11:
        $z3 = virtualinvoke r4.<java.io.ObjectStreamClass: boolean hasWriteObjectData()>();
        if $z3 == 0 goto label12;

        specialinvoke r0.<java.io.ObjectInputStream: void skipCustomData()>();
        goto label14;

     label12:
        $r20 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r20.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(0);
        goto label14;

     label13:
        if r1 == null goto label14;

        $z5 = virtualinvoke r4.<java.io.ObjectStreamClass: boolean hasReadObjectNoDataMethod()>();
        if $z5 == 0 goto label14;

        $r21 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i4 = r0.<java.io.ObjectInputStream: int passHandle>;
        $r22 = virtualinvoke $r21.<java.io.ObjectInputStream$HandleTable: java.lang.ClassNotFoundException lookupException(int)>($i4);
        if $r22 != null goto label14;

        virtualinvoke r4.<java.io.ObjectStreamClass: void invokeReadObjectNoData(java.lang.Object)>(r1);

     label14:
        i0 = i0 + 1;
        goto label0;

     label15:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void skipCustomData() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        int i0;
        java.io.ObjectInputStream$BlockDataInputStream $r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0;
        byte $b1;

        r0 := @this: java.io.ObjectInputStream;
        i0 = r0.<java.io.ObjectInputStream: int passHandle>;

     label0:
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $z0 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: boolean getBlockDataMode()>();
        if $z0 == 0 goto label1;

        $r2 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r2.<java.io.ObjectInputStream$BlockDataInputStream: void skipBlockData()>();
        $r3 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r3.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(0);

     label1:
        $r4 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $b1 = virtualinvoke $r4.<java.io.ObjectInputStream$BlockDataInputStream: byte peekByte()>();
        tableswitch($b1)
        {
            case 119: goto label2;
            case 120: goto label3;
            case 121: goto label4;
            case 122: goto label2;
            default: goto label4;
        };

     label2:
        $r5 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r5.<java.io.ObjectInputStream$BlockDataInputStream: boolean setBlockDataMode(boolean)>(1);
        goto label0;

     label3:
        $r6 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        virtualinvoke $r6.<java.io.ObjectInputStream$BlockDataInputStream: byte readByte()>();
        r0.<java.io.ObjectInputStream: int passHandle> = i0;
        return;

     label4:
        specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject0(boolean)>(0);
        goto label0;
    }

    private void defaultReadFields(java.lang.Object, java.io.ObjectStreamClass) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.lang.Object r1, $r14;
        java.io.ObjectStreamClass r2;
        java.lang.Class r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.io.ObjectStreamField[] r4;
        java.lang.Object[] r5;
        java.io.ObjectStreamField r6;
        boolean $z0, $z1;
        java.lang.ClassCastException $r7;
        byte[] $r8, $r9, $r10, $r12, $r13;
        java.io.ObjectInputStream$BlockDataInputStream $r11;
        java.lang.reflect.Field $r15;
        java.io.ObjectInputStream$HandleTable $r16;

        r0 := @this: java.io.ObjectInputStream;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.io.ObjectStreamClass;
        r3 = virtualinvoke r2.<java.io.ObjectStreamClass: java.lang.Class forClass()>();
        if r3 == null goto label0;

        if r1 == null goto label0;

        $z0 = virtualinvoke r3.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);
        if $z0 != 0 goto label0;

        $r7 = new java.lang.ClassCastException;
        specialinvoke $r7.<java.lang.ClassCastException: void <init>()>();
        throw $r7;

     label0:
        i0 = virtualinvoke r2.<java.io.ObjectStreamClass: int getPrimDataSize()>();
        $r8 = r0.<java.io.ObjectInputStream: byte[] primVals>;
        if $r8 == null goto label1;

        $r9 = r0.<java.io.ObjectInputStream: byte[] primVals>;
        $i4 = lengthof $r9;
        if $i4 >= i0 goto label2;

     label1:
        $r10 = newarray (byte)[i0];
        r0.<java.io.ObjectInputStream: byte[] primVals> = $r10;

     label2:
        $r11 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $r12 = r0.<java.io.ObjectInputStream: byte[] primVals>;
        virtualinvoke $r11.<java.io.ObjectInputStream$BlockDataInputStream: void readFully(byte[],int,int,boolean)>($r12, 0, i0, 0);
        if r1 == null goto label3;

        $r13 = r0.<java.io.ObjectInputStream: byte[] primVals>;
        virtualinvoke r2.<java.io.ObjectStreamClass: void setPrimFieldValues(java.lang.Object,byte[])>(r1, $r13);

     label3:
        i1 = r0.<java.io.ObjectInputStream: int passHandle>;
        r4 = virtualinvoke r2.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getFields(boolean)>(0);
        $i5 = virtualinvoke r2.<java.io.ObjectStreamClass: int getNumObjFields()>();
        r5 = newarray (java.lang.Object)[$i5];
        $i6 = lengthof r4;
        $i7 = lengthof r5;
        i2 = $i6 - $i7;
        i3 = 0;

     label4:
        $i8 = lengthof r5;
        if i3 >= $i8 goto label6;

        $i9 = i2 + i3;
        r6 = r4[$i9];
        $z1 = virtualinvoke r6.<java.io.ObjectStreamField: boolean isUnshared()>();
        $r14 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject0(boolean)>($z1);
        r5[i3] = $r14;
        $r15 = virtualinvoke r6.<java.io.ObjectStreamField: java.lang.reflect.Field getField()>();
        if $r15 == null goto label5;

        $r16 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        $i10 = r0.<java.io.ObjectInputStream: int passHandle>;
        virtualinvoke $r16.<java.io.ObjectInputStream$HandleTable: void markDependency(int,int)>(i1, $i10);

     label5:
        i3 = i3 + 1;
        goto label4;

     label6:
        if r1 == null goto label7;

        virtualinvoke r2.<java.io.ObjectStreamClass: void setObjFieldValues(java.lang.Object,java.lang.Object[])>(r1, r5);

     label7:
        r0.<java.io.ObjectInputStream: int passHandle> = i1;
        return;
    }

    private java.io.IOException readFatalException() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;
        byte $b0;
        java.lang.InternalError $r2;
        java.lang.Object $r3;
        java.io.IOException $r4;

        r0 := @this: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        $b0 = virtualinvoke $r1.<java.io.ObjectInputStream$BlockDataInputStream: byte readByte()>();
        if $b0 == 123 goto label0;

        $r2 = new java.lang.InternalError;
        specialinvoke $r2.<java.lang.InternalError: void <init>()>();
        throw $r2;

     label0:
        specialinvoke r0.<java.io.ObjectInputStream: void clear()>();
        $r3 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject0(boolean)>(0);
        $r4 = (java.io.IOException) $r3;
        return $r4;
    }

    private void handleReset() throws java.io.StreamCorruptedException
    {
        java.io.ObjectInputStream r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        int $i0, $i1;
        java.io.StreamCorruptedException $r2;
        java.lang.String $r5;

        r0 := @this: java.io.ObjectInputStream;
        $i0 = r0.<java.io.ObjectInputStream: int depth>;
        if $i0 <= 0 goto label0;

        $r2 = new java.io.StreamCorruptedException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected reset; recursion depth: ");
        $i1 = r0.<java.io.ObjectInputStream: int depth>;
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.io.StreamCorruptedException: void <init>(java.lang.String)>($r5);
        throw $r2;

     label0:
        specialinvoke r0.<java.io.ObjectInputStream: void clear()>();
        return;
    }

    private static native void bytesToFloats(byte[], int, float[], int, int);

    private static native void bytesToDoubles(byte[], int, double[], int, int);

    private static java.lang.ClassLoader latestUserDefinedLoader()
    {
        java.lang.ClassLoader $r0;

        $r0 = staticinvoke <sun.misc.VM: java.lang.ClassLoader latestUserDefinedLoader()>();
        return $r0;
    }

    private static java.lang.Object cloneArray(java.lang.Object)
    {
        java.lang.Object r0, $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Object[] $r1, $r2;
        boolean[] $r4, $r5;
        byte[] $r7, $r8;
        char[] $r10, $r11;
        double[] $r13, $r14;
        float[] $r16, $r17;
        int[] $r19, $r20;
        long[] $r22, $r23;
        short[] $r25, $r26;
        java.lang.AssertionError $r28;

        r0 := @parameter0: java.lang.Object;
        $z0 = r0 instanceof java.lang.Object[];
        if $z0 == 0 goto label0;

        $r1 = (java.lang.Object[]) r0;
        $r2 = (java.lang.Object[]) $r1;
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();
        return $r3;

     label0:
        $z1 = r0 instanceof boolean[];
        if $z1 == 0 goto label1;

        $r4 = (boolean[]) r0;
        $r5 = (boolean[]) $r4;
        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Object clone()>();
        return $r6;

     label1:
        $z2 = r0 instanceof byte[];
        if $z2 == 0 goto label2;

        $r7 = (byte[]) r0;
        $r8 = (byte[]) $r7;
        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.Object clone()>();
        return $r9;

     label2:
        $z3 = r0 instanceof char[];
        if $z3 == 0 goto label3;

        $r10 = (char[]) r0;
        $r11 = (char[]) $r10;
        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.Object clone()>();
        return $r12;

     label3:
        $z4 = r0 instanceof double[];
        if $z4 == 0 goto label4;

        $r13 = (double[]) r0;
        $r14 = (double[]) $r13;
        $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.Object clone()>();
        return $r15;

     label4:
        $z5 = r0 instanceof float[];
        if $z5 == 0 goto label5;

        $r16 = (float[]) r0;
        $r17 = (float[]) $r16;
        $r18 = virtualinvoke $r17.<java.lang.Object: java.lang.Object clone()>();
        return $r18;

     label5:
        $z6 = r0 instanceof int[];
        if $z6 == 0 goto label6;

        $r19 = (int[]) r0;
        $r20 = (int[]) $r19;
        $r21 = virtualinvoke $r20.<java.lang.Object: java.lang.Object clone()>();
        return $r21;

     label6:
        $z7 = r0 instanceof long[];
        if $z7 == 0 goto label7;

        $r22 = (long[]) r0;
        $r23 = (long[]) $r22;
        $r24 = virtualinvoke $r23.<java.lang.Object: java.lang.Object clone()>();
        return $r24;

     label7:
        $z8 = r0 instanceof short[];
        if $z8 == 0 goto label8;

        $r25 = (short[]) r0;
        $r26 = (short[]) $r25;
        $r27 = virtualinvoke $r26.<java.lang.Object: java.lang.Object clone()>();
        return $r27;

     label8:
        $r28 = new java.lang.AssertionError;
        specialinvoke $r28.<java.lang.AssertionError: void <init>()>();
        throw $r28;
    }

    static int access$000(java.io.ObjectInputStream)
    {
        java.io.ObjectInputStream r0;
        int $i0;

        r0 := @parameter0: java.io.ObjectInputStream;
        $i0 = r0.<java.io.ObjectInputStream: int passHandle>;
        return $i0;
    }

    static java.io.ObjectInputStream$HandleTable access$100(java.io.ObjectInputStream)
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$HandleTable $r1;

        r0 := @parameter0: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$HandleTable handles>;
        return $r1;
    }

    static java.io.ObjectInputStream$BlockDataInputStream access$200(java.io.ObjectInputStream)
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputStream$BlockDataInputStream $r1;

        r0 := @parameter0: java.io.ObjectInputStream;
        $r1 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$BlockDataInputStream bin>;
        return $r1;
    }

    static java.lang.Object access$300(java.io.ObjectInputStream, boolean) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0;
        java.lang.Object $r1;

        r0 := @parameter0: java.io.ObjectInputStream;
        z0 := @parameter1: boolean;
        $r1 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject0(boolean)>(z0);
        return $r1;
    }

    static int access$002(java.io.ObjectInputStream, int)
    {
        java.io.ObjectInputStream r0;
        int i0;

        r0 := @parameter0: java.io.ObjectInputStream;
        i0 := @parameter1: int;
        r0.<java.io.ObjectInputStream: int passHandle> = i0;
        return i0;
    }

    static boolean access$500(java.io.ObjectInputStream)
    {
        java.io.ObjectInputStream r0;
        boolean $z0;

        r0 := @parameter0: java.io.ObjectInputStream;
        $z0 = r0.<java.io.ObjectInputStream: boolean defaultDataEnd>;
        return $z0;
    }

    static void access$600(java.io.ObjectInputStream) throws java.io.StreamCorruptedException
    {
        java.io.ObjectInputStream r0;

        r0 := @parameter0: java.io.ObjectInputStream;
        specialinvoke r0.<java.io.ObjectInputStream: void handleReset()>();
        return;
    }

    static void access$700(byte[], int, float[], int, int)
    {
        byte[] r0;
        int i0, i1, i2;
        float[] r1;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        r1 := @parameter2: float[];
        i1 := @parameter3: int;
        i2 := @parameter4: int;
        staticinvoke <java.io.ObjectInputStream: void bytesToFloats(byte[],int,float[],int,int)>(r0, i0, r1, i1, i2);
        return;
    }

    static void access$800(byte[], int, double[], int, int)
    {
        byte[] r0;
        int i0, i1, i2;
        double[] r1;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        r1 := @parameter2: double[];
        i1 := @parameter3: int;
        i2 := @parameter4: int;
        staticinvoke <java.io.ObjectInputStream: void bytesToDoubles(byte[],int,double[],int,int)>(r0, i0, r1, i1, i2);
        return;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;
        java.util.HashMap $r1, $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26;
        java.lang.Class $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27;

        $r0 = new java.lang.Object;
        specialinvoke $r0.<java.lang.Object: void <init>()>();
        <java.io.ObjectInputStream: java.lang.Object unsharedMarker> = $r0;
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>(int,float)>(8, 1.0F);
        <java.io.ObjectInputStream: java.util.HashMap primClasses> = $r1;
        $r2 = <java.io.ObjectInputStream: java.util.HashMap primClasses>;
        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;
        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", $r3);
        $r5 = <java.io.ObjectInputStream: java.util.HashMap primClasses>;
        $r6 = <java.lang.Byte: java.lang.Class TYPE>;
        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", $r6);
        $r8 = <java.io.ObjectInputStream: java.util.HashMap primClasses>;
        $r9 = <java.lang.Character: java.lang.Class TYPE>;
        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("char", $r9);
        $r11 = <java.io.ObjectInputStream: java.util.HashMap primClasses>;
        $r12 = <java.lang.Short: java.lang.Class TYPE>;
        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", $r12);
        $r14 = <java.io.ObjectInputStream: java.util.HashMap primClasses>;
        $r15 = <java.lang.Integer: java.lang.Class TYPE>;
        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", $r15);
        $r17 = <java.io.ObjectInputStream: java.util.HashMap primClasses>;
        $r18 = <java.lang.Long: java.lang.Class TYPE>;
        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", $r18);
        $r20 = <java.io.ObjectInputStream: java.util.HashMap primClasses>;
        $r21 = <java.lang.Float: java.lang.Class TYPE>;
        virtualinvoke $r20.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", $r21);
        $r23 = <java.io.ObjectInputStream: java.util.HashMap primClasses>;
        $r24 = <java.lang.Double: java.lang.Class TYPE>;
        virtualinvoke $r23.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", $r24);
        $r26 = <java.io.ObjectInputStream: java.util.HashMap primClasses>;
        $r27 = <java.lang.Void: java.lang.Class TYPE>;
        virtualinvoke $r26.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("void", $r27);
        return;
    }
}
