class java.util.Collections$CheckedMap$CheckedEntrySet$1 extends java.lang.Object implements java.util.Iterator
{
    final java.util.Iterator val$i;
    final java.lang.Class val$valueType;
    final java.util.Collections$CheckedMap$CheckedEntrySet this$0;

    void <init>(java.util.Collections$CheckedMap$CheckedEntrySet, java.util.Iterator, java.lang.Class)
    {
        java.util.Collections$CheckedMap$CheckedEntrySet$1 r0;
        java.util.Collections$CheckedMap$CheckedEntrySet r1;
        java.util.Iterator r2;
        java.lang.Class r3;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet$1;
        r1 := @parameter0: java.util.Collections$CheckedMap$CheckedEntrySet;
        r2 := @parameter1: java.util.Iterator;
        r3 := @parameter2: java.lang.Class;
        r0.<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.util.Collections$CheckedMap$CheckedEntrySet this$0> = r1;
        r0.<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.util.Iterator val$i> = r2;
        r0.<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.lang.Class val$valueType> = r3;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public boolean hasNext()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet$1 r0;
        java.util.Iterator $r1;
        boolean $z0;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet$1;
        $r1 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.util.Iterator val$i>;
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();
        return $z0;
    }

    public void remove()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet$1 r0;
        java.util.Iterator $r1;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet$1;
        $r1 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.util.Iterator val$i>;
        interfaceinvoke $r1.<java.util.Iterator: void remove()>();
        return;
    }

    public java.util.Map$Entry next()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet$1 r0;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        java.util.Map$Entry $r3;
        java.lang.Class $r4;
        java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry $r5;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet$1;
        $r1 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.util.Iterator val$i>;
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();
        $r3 = (java.util.Map$Entry) $r2;
        $r4 = r0.<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.lang.Class val$valueType>;
        $r5 = staticinvoke <java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry checkedEntry(java.util.Map$Entry,java.lang.Class)>($r3, $r4);
        return $r5;
    }

    public volatile java.lang.Object next()
    {
        java.util.Collections$CheckedMap$CheckedEntrySet$1 r0;
        java.util.Map$Entry $r1;

        r0 := @this: java.util.Collections$CheckedMap$CheckedEntrySet$1;
        $r1 = virtualinvoke r0.<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.util.Map$Entry next()>();
        return $r1;
    }
}
