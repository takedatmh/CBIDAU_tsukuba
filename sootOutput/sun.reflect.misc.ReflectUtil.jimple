public final class sun.reflect.misc.ReflectUtil extends java.lang.Object
{
    public static final java.lang.String PROXY_PACKAGE;

    private void <init>()
    {
        sun.reflect.misc.ReflectUtil r0;

        r0 := @this: sun.reflect.misc.ReflectUtil;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static java.lang.Class forName(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.String r0;
        java.lang.Class $r1;

        r0 := @parameter0: java.lang.String;
        staticinvoke <sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.String)>(r0);
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);
        return $r1;
    }

    public static java.lang.Object newInstance(java.lang.Class) throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        java.lang.Class r0;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.Class;
        staticinvoke <sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.Class)>(r0);
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();
        return $r1;
    }

    public static void ensureMemberAccess(java.lang.Class, java.lang.Class, java.lang.Object, int) throws java.lang.IllegalAccessException
    {
        java.lang.Class r0, r1;
        java.lang.Object r2;
        int i0, i1, i2, i3, i4;
        java.lang.IllegalAccessException r3, $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.Class;
        r2 := @parameter2: java.lang.Object;
        i0 := @parameter3: int;
        if r2 != null goto label4;

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>(i0);
        if $z0 == 0 goto label4;

        i1 = i0;
        i2 = i1 & -5;
        i3 = i2 | 1;
        staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(r0, r1, r2, i3);

     label0:
        i4 = i3 & -2;
        staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(r0, r1, r2, i4);

     label1:
        return;

     label2:
        $r4 := @caughtexception;
        r3 = $r4;
        $z1 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isSubclassOf(java.lang.Class,java.lang.Class)>(r0, r1);
        if $z1 == 0 goto label3;

        return;

     label3:
        throw r3;

     label4:
        staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(r0, r1, r2, i0);
        return;

        catch java.lang.IllegalAccessException from label0 to label1 with label2;
    }

    private static boolean isSubclassOf(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.Class;

     label0:
        if r0 == null goto label2;

        if r0 != r1 goto label1;

        return 1;

     label1:
        r0 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();
        goto label0;

     label2:
        return 0;
    }

    public static void conservativeCheckMemberAccess(java.lang.reflect.Member) throws java.lang.SecurityException
    {
        java.lang.reflect.Member r0;
        java.lang.SecurityManager r1;
        java.lang.Class r2;
        java.lang.RuntimePermission $r3;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.reflect.Member;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 != null goto label0;

        return;

     label0:
        r2 = interfaceinvoke r0.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();
        staticinvoke <sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.Class)>(r2);
        $i0 = interfaceinvoke r0.<java.lang.reflect.Member: int getModifiers()>();
        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);
        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r2.<java.lang.Class: int getModifiers()>();
        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);
        if $z1 == 0 goto label1;

        return;

     label1:
        $r3 = <sun.security.util.SecurityConstants: java.lang.RuntimePermission CHECK_MEMBER_ACCESS_PERMISSION>;
        virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r3);
        return;
    }

    public static void checkPackageAccess(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        staticinvoke <sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.String)>($r1);
        $z0 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(r0);
        if $z0 == 0 goto label0;

        staticinvoke <sun.reflect.misc.ReflectUtil: void checkProxyPackageAccess(java.lang.Class)>(r0);

     label0:
        return;
    }

    public static void checkPackageAccess(java.lang.String)
    {
        java.lang.String r0, r2, $r3;
        java.lang.SecurityManager r1;
        int i0, $i1, $i2, i3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label1;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(47, 46);
        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("[");
        if $z0 == 0 goto label0;

        $i1 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int)>(91);
        i0 = $i1 + 2;
        if i0 <= 1 goto label0;

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();
        if i0 >= $i2 goto label0;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(i0);

     label0:
        i3 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int)>(46);
        if i3 == -1 goto label1;

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i3);
        virtualinvoke r1.<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>($r3);

     label1:
        return;
    }

    public static boolean isPackageAccessible(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.SecurityException r1, $r2;

        r0 := @parameter0: java.lang.Class;

     label0:
        staticinvoke <sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.Class)>(r0);

     label1:
        goto label3;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;
        return 0;

     label3:
        return 1;

        catch java.lang.SecurityException from label0 to label1 with label2;
    }

    private static boolean isAncestor(java.lang.ClassLoader, java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0, r1, r2;

        r0 := @parameter0: java.lang.ClassLoader;
        r1 := @parameter1: java.lang.ClassLoader;
        r2 = r1;

     label0:
        r2 = virtualinvoke r2.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();
        if r0 != r2 goto label1;

        return 1;

     label1:
        if r2 != null goto label0;

        return 0;
    }

    public static boolean needsPackageAccessCheck(java.lang.ClassLoader, java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.ClassLoader;
        r1 := @parameter1: java.lang.ClassLoader;
        if r0 == null goto label0;

        if r0 != r1 goto label1;

     label0:
        return 0;

     label1:
        if r1 != null goto label2;

        return 1;

     label2:
        $z0 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isAncestor(java.lang.ClassLoader,java.lang.ClassLoader)>(r0, r1);
        if $z0 != 0 goto label3;

        $z1 = 1;
        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public static void checkProxyPackageAccess(java.lang.Class)
    {
        java.lang.Class r0, r3;
        java.lang.SecurityManager r1;
        java.lang.Class[] r2;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;
        r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r1 == null goto label1;

        $z0 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(r0);
        if $z0 == 0 goto label1;

        r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();
        i0 = lengthof r2;
        i1 = 0;

     label0:
        if i1 >= i0 goto label1;

        r3 = r2[i1];
        staticinvoke <sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.Class)>(r3);
        i1 = i1 + 1;
        goto label0;

     label1:
        return;
    }

    public static transient void checkProxyPackageAccess(java.lang.ClassLoader, java.lang.Class[])
    {
        java.lang.ClassLoader r0, r5;
        java.lang.Class[] r1, r3;
        java.lang.SecurityManager r2;
        int i0, i1;
        java.lang.Class r4;
        boolean $z0;

        r0 := @parameter0: java.lang.ClassLoader;
        r1 := @parameter1: java.lang.Class[];
        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
        if r2 == null goto label2;

        r3 = r1;
        i0 = lengthof r3;
        i1 = 0;

     label0:
        if i1 >= i0 goto label2;

        r4 = r3[i1];
        r5 = virtualinvoke r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
        $z0 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(r0, r5);
        if $z0 == 0 goto label1;

        staticinvoke <sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.Class)>(r4);

     label1:
        i1 = i1 + 1;
        goto label0;

     label2:
        return;
    }

    public static boolean isNonPublicProxyClass(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String r1, r2, $r3;
        int i0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Class;
        r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();
        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);
        if i0 == -1 goto label0;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        goto label1;

     label0:
        $r3 = "";

     label1:
        r2 = $r3;
        $z0 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(r0);
        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("com.sun.proxy");
        if $z1 != 0 goto label2;

        $z2 = 1;
        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static void checkProxyMethod(java.lang.Object, java.lang.reflect.Method)
    {
        java.lang.Object r0;
        java.lang.reflect.Method r1;
        java.lang.Class r2, $r4, $r7;
        java.lang.String r3, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalArgumentException $r5, $r6, $r8;
        int $i0;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: java.lang.reflect.Method;
        if r0 == null goto label0;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $z0 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>($r4);
        if $z0 != 0 goto label1;

     label0:
        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not a Proxy instance");
        throw $r5;

     label1:
        $i0 = virtualinvoke r1.<java.lang.reflect.Method: int getModifiers()>();
        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);
        if $z1 == 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t handle static method");
        throw $r6;

     label2:
        r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
        if r2 != class "java/lang/Object" goto label4;

        r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();
        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("hashCode");
        if $z2 != 0 goto label3;

        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("equals");
        if $z3 != 0 goto label3;

        $z4 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("toString");
        if $z4 == 0 goto label4;

     label3:
        return;

     label4:
        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $z5 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isSuperInterface(java.lang.Class,java.lang.Class)>($r7, r2);
        if $z5 == 0 goto label5;

        return;

     label5:
        $r8 = new java.lang.IllegalArgumentException;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t handle: ");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);
        throw $r8;
    }

    private static boolean isSuperInterface(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1, r3;
        java.lang.Class[] r2;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;
        r1 := @parameter1: java.lang.Class;
        r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();
        i0 = lengthof r2;
        i1 = 0;

     label0:
        if i1 >= i0 goto label3;

        r3 = r2[i1];
        if r3 != r1 goto label1;

        return 1;

     label1:
        $z0 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isSuperInterface(java.lang.Class,java.lang.Class)>(r3, r1);
        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;
        goto label0;

     label3:
        return 0;
    }
}
