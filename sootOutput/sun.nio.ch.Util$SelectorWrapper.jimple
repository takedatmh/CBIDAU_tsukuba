class sun.nio.ch.Util$SelectorWrapper extends java.lang.Object
{
    private java.nio.channels.Selector sel;

    private void <init>(java.nio.channels.Selector)
    {
        sun.nio.ch.Util$SelectorWrapper r0;
        java.nio.channels.Selector r1;
        sun.nio.ch.Util$SelectorWrapper$Closer $r2;

        r0 := @this: sun.nio.ch.Util$SelectorWrapper;
        r1 := @parameter0: java.nio.channels.Selector;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<sun.nio.ch.Util$SelectorWrapper: java.nio.channels.Selector sel> = r1;
        $r2 = new sun.nio.ch.Util$SelectorWrapper$Closer;
        specialinvoke $r2.<sun.nio.ch.Util$SelectorWrapper$Closer: void <init>(java.nio.channels.Selector,sun.nio.ch.Util$1)>(r1, null);
        staticinvoke <sun.misc.Cleaner: sun.misc.Cleaner create(java.lang.Object,java.lang.Runnable)>(r0, $r2);
        return;
    }

    public java.nio.channels.Selector get()
    {
        sun.nio.ch.Util$SelectorWrapper r0;
        java.nio.channels.Selector $r1;

        r0 := @this: sun.nio.ch.Util$SelectorWrapper;
        $r1 = r0.<sun.nio.ch.Util$SelectorWrapper: java.nio.channels.Selector sel>;
        return $r1;
    }

    void <init>(java.nio.channels.Selector, sun.nio.ch.Util$1)
    {
        sun.nio.ch.Util$SelectorWrapper r0;
        java.nio.channels.Selector r1;
        sun.nio.ch.Util$1 r2;

        r0 := @this: sun.nio.ch.Util$SelectorWrapper;
        r1 := @parameter0: java.nio.channels.Selector;
        r2 := @parameter1: sun.nio.ch.Util$1;
        specialinvoke r0.<sun.nio.ch.Util$SelectorWrapper: void <init>(java.nio.channels.Selector)>(r1);
        return;
    }
}
