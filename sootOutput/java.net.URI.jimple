public final class java.net.URI extends java.lang.Object implements java.lang.Comparable, java.io.Serializable
{
    static final long serialVersionUID;
    private transient java.lang.String scheme;
    private transient java.lang.String fragment;
    private transient java.lang.String authority;
    private transient java.lang.String userInfo;
    private transient java.lang.String host;
    private transient int port;
    private transient java.lang.String path;
    private transient java.lang.String query;
    private transient volatile java.lang.String schemeSpecificPart;
    private transient volatile int hash;
    private transient volatile java.lang.String decodedUserInfo;
    private transient volatile java.lang.String decodedAuthority;
    private transient volatile java.lang.String decodedPath;
    private transient volatile java.lang.String decodedQuery;
    private transient volatile java.lang.String decodedFragment;
    private transient volatile java.lang.String decodedSchemeSpecificPart;
    private volatile java.lang.String string;
    private static final long L_DIGIT;
    private static final long H_DIGIT;
    private static final long L_UPALPHA;
    private static final long H_UPALPHA;
    private static final long L_LOWALPHA;
    private static final long H_LOWALPHA;
    private static final long L_ALPHA;
    private static final long H_ALPHA;
    private static final long L_ALPHANUM;
    private static final long H_ALPHANUM;
    private static final long L_HEX;
    private static final long H_HEX;
    private static final long L_MARK;
    private static final long H_MARK;
    private static final long L_UNRESERVED;
    private static final long H_UNRESERVED;
    private static final long L_RESERVED;
    private static final long H_RESERVED;
    private static final long L_ESCAPED;
    private static final long H_ESCAPED;
    private static final long L_URIC;
    private static final long H_URIC;
    private static final long L_PCHAR;
    private static final long H_PCHAR;
    private static final long L_PATH;
    private static final long H_PATH;
    private static final long L_DASH;
    private static final long H_DASH;
    private static final long L_DOT;
    private static final long H_DOT;
    private static final long L_USERINFO;
    private static final long H_USERINFO;
    private static final long L_REG_NAME;
    private static final long H_REG_NAME;
    private static final long L_SERVER;
    private static final long H_SERVER;
    private static final long L_SERVER_PERCENT;
    private static final long H_SERVER_PERCENT;
    private static final long L_LEFT_BRACKET;
    private static final long H_LEFT_BRACKET;
    private static final long L_SCHEME;
    private static final long H_SCHEME;
    private static final long L_URIC_NO_SLASH;
    private static final long H_URIC_NO_SLASH;
    private static final char[] hexDigits;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        java.net.URI r0;

        r0 := @this: java.net.URI;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.net.URI: int port> = -1;
        r0.<java.net.URI: java.lang.String decodedUserInfo> = null;
        r0.<java.net.URI: java.lang.String decodedAuthority> = null;
        r0.<java.net.URI: java.lang.String decodedPath> = null;
        r0.<java.net.URI: java.lang.String decodedQuery> = null;
        r0.<java.net.URI: java.lang.String decodedFragment> = null;
        r0.<java.net.URI: java.lang.String decodedSchemeSpecificPart> = null;
        return;
    }

    public void <init>(java.lang.String) throws java.net.URISyntaxException
    {
        java.net.URI r0;
        java.lang.String r1;
        java.net.URI$Parser $r2;

        r0 := @this: java.net.URI;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.net.URI: int port> = -1;
        r0.<java.net.URI: java.lang.String decodedUserInfo> = null;
        r0.<java.net.URI: java.lang.String decodedAuthority> = null;
        r0.<java.net.URI: java.lang.String decodedPath> = null;
        r0.<java.net.URI: java.lang.String decodedQuery> = null;
        r0.<java.net.URI: java.lang.String decodedFragment> = null;
        r0.<java.net.URI: java.lang.String decodedSchemeSpecificPart> = null;
        $r2 = new java.net.URI$Parser;
        specialinvoke $r2.<java.net.URI$Parser: void <init>(java.net.URI,java.lang.String)>(r0, r1);
        virtualinvoke $r2.<java.net.URI$Parser: void parse(boolean)>(0);
        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String) throws java.net.URISyntaxException
    {
        java.net.URI r0;
        java.lang.String r1, r2, r3, r4, r5, r6, r7;
        int i0;
        java.net.URI$Parser $r8;

        r0 := @this: java.net.URI;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        i0 := @parameter3: int;
        r4 := @parameter4: java.lang.String;
        r5 := @parameter5: java.lang.String;
        r6 := @parameter6: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.net.URI: int port> = -1;
        r0.<java.net.URI: java.lang.String decodedUserInfo> = null;
        r0.<java.net.URI: java.lang.String decodedAuthority> = null;
        r0.<java.net.URI: java.lang.String decodedPath> = null;
        r0.<java.net.URI: java.lang.String decodedQuery> = null;
        r0.<java.net.URI: java.lang.String decodedFragment> = null;
        r0.<java.net.URI: java.lang.String decodedSchemeSpecificPart> = null;
        r7 = specialinvoke r0.<java.net.URI: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>(r1, null, null, r2, r3, i0, r4, r5, r6);
        staticinvoke <java.net.URI: void checkPath(java.lang.String,java.lang.String,java.lang.String)>(r7, r1, r4);
        $r8 = new java.net.URI$Parser;
        specialinvoke $r8.<java.net.URI$Parser: void <init>(java.net.URI,java.lang.String)>(r0, r7);
        virtualinvoke $r8.<java.net.URI$Parser: void parse(boolean)>(1);
        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.net.URISyntaxException
    {
        java.net.URI r0;
        java.lang.String r1, r2, r3, r4, r5, r6;
        java.net.URI$Parser $r7;

        r0 := @this: java.net.URI;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: java.lang.String;
        r5 := @parameter4: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.net.URI: int port> = -1;
        r0.<java.net.URI: java.lang.String decodedUserInfo> = null;
        r0.<java.net.URI: java.lang.String decodedAuthority> = null;
        r0.<java.net.URI: java.lang.String decodedPath> = null;
        r0.<java.net.URI: java.lang.String decodedQuery> = null;
        r0.<java.net.URI: java.lang.String decodedFragment> = null;
        r0.<java.net.URI: java.lang.String decodedSchemeSpecificPart> = null;
        r6 = specialinvoke r0.<java.net.URI: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>(r1, null, r2, null, null, -1, r3, r4, r5);
        staticinvoke <java.net.URI: void checkPath(java.lang.String,java.lang.String,java.lang.String)>(r6, r1, r3);
        $r7 = new java.net.URI$Parser;
        specialinvoke $r7.<java.net.URI$Parser: void <init>(java.net.URI,java.lang.String)>(r0, r6);
        virtualinvoke $r7.<java.net.URI$Parser: void parse(boolean)>(0);
        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.net.URISyntaxException
    {
        java.net.URI r0;
        java.lang.String r1, r2, r3, r4;

        r0 := @this: java.net.URI;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: java.lang.String;
        specialinvoke r0.<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>(r1, null, r2, -1, r3, null, r4);
        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String) throws java.net.URISyntaxException
    {
        java.net.URI r0;
        java.lang.String r1, r2, r3, $r5;
        java.net.URI$Parser $r4;

        r0 := @this: java.net.URI;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<java.net.URI: int port> = -1;
        r0.<java.net.URI: java.lang.String decodedUserInfo> = null;
        r0.<java.net.URI: java.lang.String decodedAuthority> = null;
        r0.<java.net.URI: java.lang.String decodedPath> = null;
        r0.<java.net.URI: java.lang.String decodedQuery> = null;
        r0.<java.net.URI: java.lang.String decodedFragment> = null;
        r0.<java.net.URI: java.lang.String decodedSchemeSpecificPart> = null;
        $r4 = new java.net.URI$Parser;
        $r5 = specialinvoke r0.<java.net.URI: java.lang.String toString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, null, null, null, -1, null, null, r3);
        specialinvoke $r4.<java.net.URI$Parser: void <init>(java.net.URI,java.lang.String)>(r0, $r5);
        virtualinvoke $r4.<java.net.URI$Parser: void parse(boolean)>(0);
        return;
    }

    public static java.net.URI create(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.net.URI $r1;
        java.net.URISyntaxException r2, $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: java.lang.String;

     label0:
        $r1 = new java.net.URI;
        specialinvoke $r1.<java.net.URI: void <init>(java.lang.String)>(r0);

     label1:
        return $r1;

     label2:
        $r3 := @caughtexception;
        r2 = $r3;
        $r4 = new java.lang.IllegalArgumentException;
        $r5 = virtualinvoke r2.<java.net.URISyntaxException: java.lang.String getMessage()>();
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r5, r2);
        throw $r4;

        catch java.net.URISyntaxException from label0 to label1 with label2;
    }

    public java.net.URI parseServerAuthority() throws java.net.URISyntaxException
    {
        java.net.URI r0;
        java.lang.String $r1, $r2, $r4;
        java.net.URI$Parser $r3;

        r0 := @this: java.net.URI;
        $r1 = r0.<java.net.URI: java.lang.String host>;
        if $r1 != null goto label0;

        $r2 = r0.<java.net.URI: java.lang.String authority>;
        if $r2 != null goto label1;

     label0:
        return r0;

     label1:
        specialinvoke r0.<java.net.URI: void defineString()>();
        $r3 = new java.net.URI$Parser;
        $r4 = r0.<java.net.URI: java.lang.String string>;
        specialinvoke $r3.<java.net.URI$Parser: void <init>(java.net.URI,java.lang.String)>(r0, $r4);
        virtualinvoke $r3.<java.net.URI$Parser: void parse(boolean)>(1);
        return r0;
    }

    public java.net.URI normalize()
    {
        java.net.URI r0, $r1;

        r0 := @this: java.net.URI;
        $r1 = staticinvoke <java.net.URI: java.net.URI normalize(java.net.URI)>(r0);
        return $r1;
    }

    public java.net.URI resolve(java.net.URI)
    {
        java.net.URI r0, r1, $r2;

        r0 := @this: java.net.URI;
        r1 := @parameter0: java.net.URI;
        $r2 = staticinvoke <java.net.URI: java.net.URI resolve(java.net.URI,java.net.URI)>(r0, r1);
        return $r2;
    }

    public java.net.URI resolve(java.lang.String)
    {
        java.net.URI r0, $r2, $r3;
        java.lang.String r1;

        r0 := @this: java.net.URI;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>(r1);
        $r3 = virtualinvoke r0.<java.net.URI: java.net.URI resolve(java.net.URI)>($r2);
        return $r3;
    }

    public java.net.URI relativize(java.net.URI)
    {
        java.net.URI r0, r1, $r2;

        r0 := @this: java.net.URI;
        r1 := @parameter0: java.net.URI;
        $r2 = staticinvoke <java.net.URI: java.net.URI relativize(java.net.URI,java.net.URI)>(r0, r1);
        return $r2;
    }

    public java.net.URL toURL() throws java.net.MalformedURLException
    {
        java.net.URI r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.net.URL $r2;
        java.lang.String $r3;

        r0 := @this: java.net.URI;
        $z0 = virtualinvoke r0.<java.net.URI: boolean isAbsolute()>();
        if $z0 != 0 goto label0;

        $r1 = new java.lang.IllegalArgumentException;
        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("URI is not absolute");
        throw $r1;

     label0:
        $r2 = new java.net.URL;
        $r3 = virtualinvoke r0.<java.net.URI: java.lang.String toString()>();
        specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>($r3);
        return $r2;
    }

    public java.lang.String getScheme()
    {
        java.net.URI r0;
        java.lang.String $r1;

        r0 := @this: java.net.URI;
        $r1 = r0.<java.net.URI: java.lang.String scheme>;
        return $r1;
    }

    public boolean isAbsolute()
    {
        java.net.URI r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: java.net.URI;
        $r1 = r0.<java.net.URI: java.lang.String scheme>;
        if $r1 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean isOpaque()
    {
        java.net.URI r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: java.net.URI;
        $r1 = r0.<java.net.URI: java.lang.String path>;
        if $r1 != null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public java.lang.String getRawSchemeSpecificPart()
    {
        java.net.URI r0;
        java.lang.String $r1;

        r0 := @this: java.net.URI;
        specialinvoke r0.<java.net.URI: void defineSchemeSpecificPart()>();
        $r1 = r0.<java.net.URI: java.lang.String schemeSpecificPart>;
        return $r1;
    }

    public java.lang.String getSchemeSpecificPart()
    {
        java.net.URI r0;
        java.lang.String $r1, $r2, $r3, $r4;

        r0 := @this: java.net.URI;
        $r1 = r0.<java.net.URI: java.lang.String decodedSchemeSpecificPart>;
        if $r1 != null goto label0;

        $r2 = virtualinvoke r0.<java.net.URI: java.lang.String getRawSchemeSpecificPart()>();
        $r3 = staticinvoke <java.net.URI: java.lang.String decode(java.lang.String)>($r2);
        r0.<java.net.URI: java.lang.String decodedSchemeSpecificPart> = $r3;

     label0:
        $r4 = r0.<java.net.URI: java.lang.String decodedSchemeSpecificPart>;
        return $r4;
    }

    public java.lang.String getRawAuthority()
    {
        java.net.URI r0;
        java.lang.String $r1;

        r0 := @this: java.net.URI;
        $r1 = r0.<java.net.URI: java.lang.String authority>;
        return $r1;
    }

    public java.lang.String getAuthority()
    {
        java.net.URI r0;
        java.lang.String $r1, $r2, $r3, $r4;

        r0 := @this: java.net.URI;
        $r1 = r0.<java.net.URI: java.lang.String decodedAuthority>;
        if $r1 != null goto label0;

        $r2 = r0.<java.net.URI: java.lang.String authority>;
        $r3 = staticinvoke <java.net.URI: java.lang.String decode(java.lang.String)>($r2);
        r0.<java.net.URI: java.lang.String decodedAuthority> = $r3;

     label0:
        $r4 = r0.<java.net.URI: java.lang.String decodedAuthority>;
        return $r4;
    }

    public java.lang.String getRawUserInfo()
    {
        java.net.URI r0;
        java.lang.String $r1;

        r0 := @this: java.net.URI;
        $r1 = r0.<java.net.URI: java.lang.String userInfo>;
        return $r1;
    }

    public java.lang.String getUserInfo()
    {
        java.net.URI r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5;

        r0 := @this: java.net.URI;
        $r1 = r0.<java.net.URI: java.lang.String decodedUserInfo>;
        if $r1 != null goto label0;

        $r2 = r0.<java.net.URI: java.lang.String userInfo>;
        if $r2 == null goto label0;

        $r3 = r0.<java.net.URI: java.lang.String userInfo>;
        $r4 = staticinvoke <java.net.URI: java.lang.String decode(java.lang.String)>($r3);
        r0.<java.net.URI: java.lang.String decodedUserInfo> = $r4;

     label0:
        $r5 = r0.<java.net.URI: java.lang.String decodedUserInfo>;
        return $r5;
    }

    public java.lang.String getHost()
    {
        java.net.URI r0;
        java.lang.String $r1;

        r0 := @this: java.net.URI;
        $r1 = r0.<java.net.URI: java.lang.String host>;
        return $r1;
    }

    public int getPort()
    {
        java.net.URI r0;
        int $i0;

        r0 := @this: java.net.URI;
        $i0 = r0.<java.net.URI: int port>;
        return $i0;
    }

    public java.lang.String getRawPath()
    {
        java.net.URI r0;
        java.lang.String $r1;

        r0 := @this: java.net.URI;
        $r1 = r0.<java.net.URI: java.lang.String path>;
        return $r1;
    }

    public java.lang.String getPath()
    {
        java.net.URI r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5;

        r0 := @this: java.net.URI;
        $r1 = r0.<java.net.URI: java.lang.String decodedPath>;
        if $r1 != null goto label0;

        $r2 = r0.<java.net.URI: java.lang.String path>;
        if $r2 == null goto label0;

        $r3 = r0.<java.net.URI: java.lang.String path>;
        $r4 = staticinvoke <java.net.URI: java.lang.String decode(java.lang.String)>($r3);
        r0.<java.net.URI: java.lang.String decodedPath> = $r4;

     label0:
        $r5 = r0.<java.net.URI: java.lang.String decodedPath>;
        return $r5;
    }

    public java.lang.String getRawQuery()
    {
        java.net.URI r0;
        java.lang.String $r1;

        r0 := @this: java.net.URI;
        $r1 = r0.<java.net.URI: java.lang.String query>;
        return $r1;
    }

    public java.lang.String getQuery()
    {
        java.net.URI r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5;

        r0 := @this: java.net.URI;
        $r1 = r0.<java.net.URI: java.lang.String decodedQuery>;
        if $r1 != null goto label0;

        $r2 = r0.<java.net.URI: java.lang.String query>;
        if $r2 == null goto label0;

        $r3 = r0.<java.net.URI: java.lang.String query>;
        $r4 = staticinvoke <java.net.URI: java.lang.String decode(java.lang.String)>($r3);
        r0.<java.net.URI: java.lang.String decodedQuery> = $r4;

     label0:
        $r5 = r0.<java.net.URI: java.lang.String decodedQuery>;
        return $r5;
    }

    public java.lang.String getRawFragment()
    {
        java.net.URI r0;
        java.lang.String $r1;

        r0 := @this: java.net.URI;
        $r1 = r0.<java.net.URI: java.lang.String fragment>;
        return $r1;
    }

    public java.lang.String getFragment()
    {
        java.net.URI r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5;

        r0 := @this: java.net.URI;
        $r1 = r0.<java.net.URI: java.lang.String decodedFragment>;
        if $r1 != null goto label0;

        $r2 = r0.<java.net.URI: java.lang.String fragment>;
        if $r2 == null goto label0;

        $r3 = r0.<java.net.URI: java.lang.String fragment>;
        $r4 = staticinvoke <java.net.URI: java.lang.String decode(java.lang.String)>($r3);
        r0.<java.net.URI: java.lang.String decodedFragment> = $r4;

     label0:
        $r5 = r0.<java.net.URI: java.lang.String decodedFragment>;
        return $r5;
    }

    public boolean equals(java.lang.Object)
    {
        java.net.URI r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        int $i0, $i1;

        r0 := @this: java.net.URI;
        r1 := @parameter0: java.lang.Object;
        if r1 != r0 goto label0;

        return 1;

     label0:
        $z0 = r1 instanceof java.net.URI;
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.net.URI) r1;
        $z1 = virtualinvoke r0.<java.net.URI: boolean isOpaque()>();
        $z2 = virtualinvoke r2.<java.net.URI: boolean isOpaque()>();
        if $z1 == $z2 goto label2;

        return 0;

     label2:
        $r3 = r0.<java.net.URI: java.lang.String scheme>;
        $r4 = r2.<java.net.URI: java.lang.String scheme>;
        $z3 = staticinvoke <java.net.URI: boolean equalIgnoringCase(java.lang.String,java.lang.String)>($r3, $r4);
        if $z3 != 0 goto label3;

        return 0;

     label3:
        $r5 = r0.<java.net.URI: java.lang.String fragment>;
        $r6 = r2.<java.net.URI: java.lang.String fragment>;
        $z4 = staticinvoke <java.net.URI: boolean equal(java.lang.String,java.lang.String)>($r5, $r6);
        if $z4 != 0 goto label4;

        return 0;

     label4:
        $z5 = virtualinvoke r0.<java.net.URI: boolean isOpaque()>();
        if $z5 == 0 goto label5;

        $r7 = r0.<java.net.URI: java.lang.String schemeSpecificPart>;
        $r8 = r2.<java.net.URI: java.lang.String schemeSpecificPart>;
        $z6 = staticinvoke <java.net.URI: boolean equal(java.lang.String,java.lang.String)>($r7, $r8);
        return $z6;

     label5:
        $r9 = r0.<java.net.URI: java.lang.String path>;
        $r10 = r2.<java.net.URI: java.lang.String path>;
        $z7 = staticinvoke <java.net.URI: boolean equal(java.lang.String,java.lang.String)>($r9, $r10);
        if $z7 != 0 goto label6;

        return 0;

     label6:
        $r11 = r0.<java.net.URI: java.lang.String query>;
        $r12 = r2.<java.net.URI: java.lang.String query>;
        $z8 = staticinvoke <java.net.URI: boolean equal(java.lang.String,java.lang.String)>($r11, $r12);
        if $z8 != 0 goto label7;

        return 0;

     label7:
        $r13 = r0.<java.net.URI: java.lang.String authority>;
        $r14 = r2.<java.net.URI: java.lang.String authority>;
        if $r13 != $r14 goto label8;

        return 1;

     label8:
        $r15 = r0.<java.net.URI: java.lang.String host>;
        if $r15 == null goto label11;

        $r16 = r0.<java.net.URI: java.lang.String userInfo>;
        $r17 = r2.<java.net.URI: java.lang.String userInfo>;
        $z9 = staticinvoke <java.net.URI: boolean equal(java.lang.String,java.lang.String)>($r16, $r17);
        if $z9 != 0 goto label9;

        return 0;

     label9:
        $r18 = r0.<java.net.URI: java.lang.String host>;
        $r19 = r2.<java.net.URI: java.lang.String host>;
        $z10 = staticinvoke <java.net.URI: boolean equalIgnoringCase(java.lang.String,java.lang.String)>($r18, $r19);
        if $z10 != 0 goto label10;

        return 0;

     label10:
        $i0 = r0.<java.net.URI: int port>;
        $i1 = r2.<java.net.URI: int port>;
        if $i0 == $i1 goto label13;

        return 0;

     label11:
        $r20 = r0.<java.net.URI: java.lang.String authority>;
        if $r20 == null goto label12;

        $r21 = r0.<java.net.URI: java.lang.String authority>;
        $r22 = r2.<java.net.URI: java.lang.String authority>;
        $z11 = staticinvoke <java.net.URI: boolean equal(java.lang.String,java.lang.String)>($r21, $r22);
        if $z11 != 0 goto label13;

        return 0;

     label12:
        $r23 = r0.<java.net.URI: java.lang.String authority>;
        $r24 = r2.<java.net.URI: java.lang.String authority>;
        if $r23 == $r24 goto label13;

        return 0;

     label13:
        return 1;
    }

    public int hashCode()
    {
        java.net.URI r0;
        int i0, $i1, $i2, i3, i4, i5, i6, i7, i8, $i9, $i10;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0;

        r0 := @this: java.net.URI;
        $i1 = r0.<java.net.URI: int hash>;
        if $i1 == 0 goto label0;

        $i2 = r0.<java.net.URI: int hash>;
        return $i2;

     label0:
        $r1 = r0.<java.net.URI: java.lang.String scheme>;
        i0 = staticinvoke <java.net.URI: int hashIgnoringCase(int,java.lang.String)>(0, $r1);
        $r2 = r0.<java.net.URI: java.lang.String fragment>;
        i3 = staticinvoke <java.net.URI: int hash(int,java.lang.String)>(i0, $r2);
        $z0 = virtualinvoke r0.<java.net.URI: boolean isOpaque()>();
        if $z0 == 0 goto label1;

        $r3 = r0.<java.net.URI: java.lang.String schemeSpecificPart>;
        i4 = staticinvoke <java.net.URI: int hash(int,java.lang.String)>(i3, $r3);
        goto label3;

     label1:
        $r4 = r0.<java.net.URI: java.lang.String path>;
        i5 = staticinvoke <java.net.URI: int hash(int,java.lang.String)>(i3, $r4);
        $r5 = r0.<java.net.URI: java.lang.String query>;
        i6 = staticinvoke <java.net.URI: int hash(int,java.lang.String)>(i5, $r5);
        $r6 = r0.<java.net.URI: java.lang.String host>;
        if $r6 == null goto label2;

        $r7 = r0.<java.net.URI: java.lang.String userInfo>;
        i7 = staticinvoke <java.net.URI: int hash(int,java.lang.String)>(i6, $r7);
        $r8 = r0.<java.net.URI: java.lang.String host>;
        i8 = staticinvoke <java.net.URI: int hashIgnoringCase(int,java.lang.String)>(i7, $r8);
        $i9 = r0.<java.net.URI: int port>;
        $i10 = 1949 * $i9;
        i4 = i8 + $i10;
        goto label3;

     label2:
        $r9 = r0.<java.net.URI: java.lang.String authority>;
        i4 = staticinvoke <java.net.URI: int hash(int,java.lang.String)>(i6, $r9);

     label3:
        r0.<java.net.URI: int hash> = i4;
        return i4;
    }

    public int compareTo(java.net.URI)
    {
        java.net.URI r0, r1;
        int i0, $i1, $i2, i3, $i4, $i5, i6, $i7, i8, $i9, $i10, $i11, i12, $i13, i14, $i15, i16, $i17, i18, $i19;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        boolean $z0, $z1, $z2;

        r0 := @this: java.net.URI;
        r1 := @parameter0: java.net.URI;
        $r2 = r0.<java.net.URI: java.lang.String scheme>;
        $r3 = r1.<java.net.URI: java.lang.String scheme>;
        $i1 = staticinvoke <java.net.URI: int compareIgnoringCase(java.lang.String,java.lang.String)>($r2, $r3);
        i0 = $i1;
        if $i1 == 0 goto label0;

        return i0;

     label0:
        $z0 = virtualinvoke r0.<java.net.URI: boolean isOpaque()>();
        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r1.<java.net.URI: boolean isOpaque()>();
        if $z1 == 0 goto label2;

        $r4 = r0.<java.net.URI: java.lang.String schemeSpecificPart>;
        $r5 = r1.<java.net.URI: java.lang.String schemeSpecificPart>;
        $i2 = staticinvoke <java.net.URI: int compare(java.lang.String,java.lang.String)>($r4, $r5);
        i3 = $i2;
        if $i2 == 0 goto label1;

        return i3;

     label1:
        $r6 = r0.<java.net.URI: java.lang.String fragment>;
        $r7 = r1.<java.net.URI: java.lang.String fragment>;
        $i4 = staticinvoke <java.net.URI: int compare(java.lang.String,java.lang.String)>($r6, $r7);
        return $i4;

     label2:
        return 1;

     label3:
        $z2 = virtualinvoke r1.<java.net.URI: boolean isOpaque()>();
        if $z2 == 0 goto label4;

        return -1;

     label4:
        $r8 = r0.<java.net.URI: java.lang.String host>;
        if $r8 == null goto label7;

        $r9 = r1.<java.net.URI: java.lang.String host>;
        if $r9 == null goto label7;

        $r10 = r0.<java.net.URI: java.lang.String userInfo>;
        $r11 = r1.<java.net.URI: java.lang.String userInfo>;
        $i5 = staticinvoke <java.net.URI: int compare(java.lang.String,java.lang.String)>($r10, $r11);
        i6 = $i5;
        if $i5 == 0 goto label5;

        return i6;

     label5:
        $r12 = r0.<java.net.URI: java.lang.String host>;
        $r13 = r1.<java.net.URI: java.lang.String host>;
        $i7 = staticinvoke <java.net.URI: int compareIgnoringCase(java.lang.String,java.lang.String)>($r12, $r13);
        i8 = $i7;
        if $i7 == 0 goto label6;

        return i8;

     label6:
        $i9 = r0.<java.net.URI: int port>;
        $i10 = r1.<java.net.URI: int port>;
        $i11 = $i9 - $i10;
        i12 = $i11;
        if $i11 == 0 goto label8;

        return i12;

     label7:
        $r14 = r0.<java.net.URI: java.lang.String authority>;
        $r15 = r1.<java.net.URI: java.lang.String authority>;
        $i13 = staticinvoke <java.net.URI: int compare(java.lang.String,java.lang.String)>($r14, $r15);
        i14 = $i13;
        if $i13 == 0 goto label8;

        return i14;

     label8:
        $r16 = r0.<java.net.URI: java.lang.String path>;
        $r17 = r1.<java.net.URI: java.lang.String path>;
        $i15 = staticinvoke <java.net.URI: int compare(java.lang.String,java.lang.String)>($r16, $r17);
        i16 = $i15;
        if $i15 == 0 goto label9;

        return i16;

     label9:
        $r18 = r0.<java.net.URI: java.lang.String query>;
        $r19 = r1.<java.net.URI: java.lang.String query>;
        $i17 = staticinvoke <java.net.URI: int compare(java.lang.String,java.lang.String)>($r18, $r19);
        i18 = $i17;
        if $i17 == 0 goto label10;

        return i18;

     label10:
        $r20 = r0.<java.net.URI: java.lang.String fragment>;
        $r21 = r1.<java.net.URI: java.lang.String fragment>;
        $i19 = staticinvoke <java.net.URI: int compare(java.lang.String,java.lang.String)>($r20, $r21);
        return $i19;
    }

    public java.lang.String toString()
    {
        java.net.URI r0;
        java.lang.String $r1;

        r0 := @this: java.net.URI;
        specialinvoke r0.<java.net.URI: void defineString()>();
        $r1 = r0.<java.net.URI: java.lang.String string>;
        return $r1;
    }

    public java.lang.String toASCIIString()
    {
        java.net.URI r0;
        java.lang.String $r1, $r2;

        r0 := @this: java.net.URI;
        specialinvoke r0.<java.net.URI: void defineString()>();
        $r1 = r0.<java.net.URI: java.lang.String string>;
        $r2 = staticinvoke <java.net.URI: java.lang.String encode(java.lang.String)>($r1);
        return $r2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.net.URI r0;
        java.io.ObjectOutputStream r1;

        r0 := @this: java.net.URI;
        r1 := @parameter0: java.io.ObjectOutputStream;
        specialinvoke r0.<java.net.URI: void defineString()>();
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        java.net.URI r0;
        java.io.ObjectInputStream r1;
        java.net.URISyntaxException r2, $r6;
        java.io.InvalidObjectException r3, $r7;
        java.net.URI$Parser $r4;
        java.lang.String $r5;

        r0 := @this: java.net.URI;
        r1 := @parameter0: java.io.ObjectInputStream;
        r0.<java.net.URI: int port> = -1;
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

     label0:
        $r4 = new java.net.URI$Parser;
        $r5 = r0.<java.net.URI: java.lang.String string>;
        specialinvoke $r4.<java.net.URI$Parser: void <init>(java.net.URI,java.lang.String)>(r0, $r5);
        virtualinvoke $r4.<java.net.URI$Parser: void parse(boolean)>(0);

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        $r7 = new java.io.InvalidObjectException;
        specialinvoke $r7.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Invalid URI");
        r3 = $r7;
        virtualinvoke r3.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(r2);
        throw r3;

     label3:
        return;

        catch java.net.URISyntaxException from label0 to label1 with label2;
    }

    private static int toLower(char)
    {
        char c0;
        int $i1;

        c0 := @parameter0: char;
        if c0 < 65 goto label0;

        if c0 > 90 goto label0;

        $i1 = c0 + 32;
        return $i1;

     label0:
        return c0;
    }

    private static boolean equal(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int i0, i1, $i4, $i5, $i6, i7, $i9, $i11, i12, $i14, $i16;
        char c2, c3, $c8, $c10, $c13, $c15;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        if r0 != r1 goto label0;

        return 1;

     label0:
        if r0 == null goto label10;

        if r1 == null goto label10;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();
        $i5 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i4 == $i5 goto label1;

        return 0;

     label1:
        $i6 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(37);
        if $i6 >= 0 goto label2;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        return $z0;

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        i1 = 0;

     label3:
        if i1 >= i0 goto label9;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);
        c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);
        if c2 == 37 goto label5;

        if c2 == c3 goto label4;

        return 0;

     label4:
        i1 = i1 + 1;
        goto label3;

     label5:
        if c3 == 37 goto label6;

        return 0;

     label6:
        i7 = i1 + 1;
        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);
        $i9 = staticinvoke <java.net.URI: int toLower(char)>($c8);
        $c10 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i7);
        $i11 = staticinvoke <java.net.URI: int toLower(char)>($c10);
        if $i9 == $i11 goto label7;

        return 0;

     label7:
        i12 = i7 + 1;
        $c13 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);
        $i14 = staticinvoke <java.net.URI: int toLower(char)>($c13);
        $c15 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i12);
        $i16 = staticinvoke <java.net.URI: int toLower(char)>($c15);
        if $i14 == $i16 goto label8;

        return 0;

     label8:
        i1 = i12 + 1;
        goto label3;

     label9:
        return 1;

     label10:
        return 0;
    }

    private static boolean equalIgnoringCase(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int i0, i1, $i2, $i4, $i6;
        char $c3, $c5;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        if r0 != r1 goto label0;

        return 1;

     label0:
        if r0 == null goto label5;

        if r1 == null goto label5;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i2 == i0 goto label1;

        return 0;

     label1:
        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);
        $i4 = staticinvoke <java.net.URI: int toLower(char)>($c3);
        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);
        $i6 = staticinvoke <java.net.URI: int toLower(char)>($c5);
        if $i4 == $i6 goto label3;

        return 0;

     label3:
        i1 = i1 + 1;
        goto label2;

     label4:
        return 1;

     label5:
        return 0;
    }

    private static int hash(int, java.lang.String)
    {
        int i0, $i1, $i2, $i3;
        java.lang.String r0;

        i0 := @parameter0: int;
        r0 := @parameter1: java.lang.String;
        if r0 != null goto label0;

        return i0;

     label0:
        $i1 = i0 * 127;
        $i2 = virtualinvoke r0.<java.lang.String: int hashCode()>();
        $i3 = $i1 + $i2;
        return $i3;
    }

    private static int hashIgnoringCase(int, java.lang.String)
    {
        int i0, i1, i2, i3, $i4, $i6;
        java.lang.String r0;
        char $c5;

        i0 := @parameter0: int;
        r0 := @parameter1: java.lang.String;
        if r0 != null goto label0;

        return i0;

     label0:
        i1 = i0;
        i2 = virtualinvoke r0.<java.lang.String: int length()>();
        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        $i4 = 31 * i1;
        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);
        $i6 = staticinvoke <java.net.URI: int toLower(char)>($c5);
        i1 = $i4 + $i6;
        i3 = i3 + 1;
        goto label1;

     label2:
        return i1;
    }

    private static int compare(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int $i0;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        if r0 != r1 goto label0;

        return 0;

     label0:
        if r0 == null goto label2;

        if r1 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>(r1);
        return $i0;

     label1:
        return 1;

     label2:
        return -1;
    }

    private static int compareIgnoringCase(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int i0, i1, i2, i3, i4, $i5, $i7, $i9, $i10;
        char $c6, $c8;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        if r0 != r1 goto label0;

        return 0;

     label0:
        if r0 == null goto label7;

        if r1 == null goto label6;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if i0 >= i1 goto label1;

        $i5 = i0;
        goto label2;

     label1:
        $i5 = i1;

     label2:
        i2 = $i5;
        i3 = 0;

     label3:
        if i3 >= i2 goto label5;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);
        $i7 = staticinvoke <java.net.URI: int toLower(char)>($c6);
        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);
        $i9 = staticinvoke <java.net.URI: int toLower(char)>($c8);
        i4 = $i7 - $i9;
        if i4 == 0 goto label4;

        return i4;

     label4:
        i3 = i3 + 1;
        goto label3;

     label5:
        $i10 = i0 - i1;
        return $i10;

     label6:
        return 1;

     label7:
        return -1;
    }

    private static void checkPath(java.lang.String, java.lang.String, java.lang.String) throws java.net.URISyntaxException
    {
        java.lang.String r0, r1, r2;
        int $i0;
        char $c1;
        java.net.URISyntaxException $r3;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        r2 := @parameter2: java.lang.String;
        if r1 == null goto label0;

        if r2 == null goto label0;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i0 <= 0 goto label0;

        $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0);
        if $c1 == 47 goto label0;

        $r3 = new java.net.URISyntaxException;
        specialinvoke $r3.<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>(r0, "Relative path in absolute URI");
        throw $r3;

     label0:
        return;
    }

    private void appendAuthority(java.lang.StringBuffer, java.lang.String, java.lang.String, java.lang.String, int)
    {
        java.net.URI r0;
        java.lang.StringBuffer r1;
        java.lang.String r2, r3, r4, r5, r6, $r8, $r18, $r20;
        int i0, $i4, i5, $i6, $i7, $i8, $i9;
        long $l1, $l2, $l3, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20;
        boolean z0, $z1, $z2, $z3, $z4;

        r0 := @this: java.net.URI;
        r1 := @parameter0: java.lang.StringBuffer;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: java.lang.String;
        i0 := @parameter4: int;
        if r4 == null goto label6;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("//");
        if r3 == null goto label0;

        $l1 = <java.net.URI: long L_USERINFO>;
        $l2 = <java.net.URI: long H_USERINFO>;
        $r8 = staticinvoke <java.net.URI: java.lang.String quote(java.lang.String,long,long)>(r3, $l1, $l2);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(64);

     label0:
        $i4 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(58);
        if $i4 < 0 goto label1;

        $z1 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("[");
        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>("]");
        if $z2 != 0 goto label1;

        $z3 = 1;
        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;
        if z0 == 0 goto label3;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

     label3:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);
        if z0 == 0 goto label4;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

     label4:
        if i0 == -1 goto label5;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

     label5:
        goto label10;

     label6:
        if r2 == null goto label10;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("//");
        $z4 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("[");
        if $z4 == 0 goto label9;

        i5 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>("]");
        r5 = r2;
        r6 = "";
        if i5 == -1 goto label8;

        $i6 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>(":");
        if $i6 == -1 goto label8;

        $i7 = virtualinvoke r2.<java.lang.String: int length()>();
        if i5 != $i7 goto label7;

        r6 = r2;
        r5 = "";
        goto label8;

     label7:
        $i8 = i5 + 1;
        r6 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i8);
        $i9 = i5 + 1;
        r5 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i9);

     label8:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);
        $l10 = <java.net.URI: long L_REG_NAME>;
        $l11 = <java.net.URI: long L_SERVER>;
        $l12 = $l10 | $l11;
        $l13 = <java.net.URI: long H_REG_NAME>;
        $l3 = <java.net.URI: long H_SERVER>;
        $l14 = $l13 | $l3;
        $r18 = staticinvoke <java.net.URI: java.lang.String quote(java.lang.String,long,long)>(r5, $l12, $l14);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);
        goto label10;

     label9:
        $l15 = <java.net.URI: long L_REG_NAME>;
        $l16 = <java.net.URI: long L_SERVER>;
        $l17 = $l15 | $l16;
        $l18 = <java.net.URI: long H_REG_NAME>;
        $l19 = <java.net.URI: long H_SERVER>;
        $l20 = $l18 | $l19;
        $r20 = staticinvoke <java.net.URI: java.lang.String quote(java.lang.String,long,long)>(r2, $l17, $l20);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

     label10:
        return;
    }

    private void appendSchemeSpecificPart(java.lang.StringBuffer, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.String)
    {
        java.net.URI r0;
        java.lang.StringBuffer r1;
        java.lang.String r2, r3, r4, r5, r6, r7, r8, r9, $r11, $r13, $r15, $r18;
        int i0, i1, $i3, $i4, $i5, $i6;
        long $l2, $l7, $l8, $l9, $l10, $l11, $l12, $l13;
        boolean $z0;

        r0 := @this: java.net.URI;
        r1 := @parameter0: java.lang.StringBuffer;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: java.lang.String;
        r5 := @parameter4: java.lang.String;
        i0 := @parameter5: int;
        r6 := @parameter6: java.lang.String;
        r7 := @parameter7: java.lang.String;
        if r2 == null goto label4;

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("//[");
        if $z0 == 0 goto label3;

        i1 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>("]");
        if i1 == -1 goto label2;

        $i3 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>(":");
        if $i3 == -1 goto label2;

        $i4 = virtualinvoke r2.<java.lang.String: int length()>();
        if i1 != $i4 goto label0;

        r8 = r2;
        r9 = "";
        goto label1;

     label0:
        $i5 = i1 + 1;
        r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);
        $i6 = i1 + 1;
        r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i6);

     label1:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r8);
        $l7 = <java.net.URI: long L_URIC>;
        $l2 = <java.net.URI: long H_URIC>;
        $r11 = staticinvoke <java.net.URI: java.lang.String quote(java.lang.String,long,long)>(r9, $l7, $l2);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

     label2:
        goto label6;

     label3:
        $l8 = <java.net.URI: long L_URIC>;
        $l9 = <java.net.URI: long H_URIC>;
        $r13 = staticinvoke <java.net.URI: java.lang.String quote(java.lang.String,long,long)>(r2, $l8, $l9);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);
        goto label6;

     label4:
        specialinvoke r0.<java.net.URI: void appendAuthority(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,int)>(r1, r3, r4, r5, i0);
        if r6 == null goto label5;

        $l10 = <java.net.URI: long L_PATH>;
        $l11 = <java.net.URI: long H_PATH>;
        $r15 = staticinvoke <java.net.URI: java.lang.String quote(java.lang.String,long,long)>(r6, $l10, $l11);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

     label5:
        if r7 == null goto label6;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(63);
        $l12 = <java.net.URI: long L_URIC>;
        $l13 = <java.net.URI: long H_URIC>;
        $r18 = staticinvoke <java.net.URI: java.lang.String quote(java.lang.String,long,long)>(r7, $l12, $l13);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

     label6:
        return;
    }

    private void appendFragment(java.lang.StringBuffer, java.lang.String)
    {
        java.net.URI r0;
        java.lang.StringBuffer r1;
        java.lang.String r2, $r4;
        long $l0, $l1;

        r0 := @this: java.net.URI;
        r1 := @parameter0: java.lang.StringBuffer;
        r2 := @parameter1: java.lang.String;
        if r2 == null goto label0;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(35);
        $l0 = <java.net.URI: long L_URIC>;
        $l1 = <java.net.URI: long H_URIC>;
        $r4 = staticinvoke <java.net.URI: java.lang.String quote(java.lang.String,long,long)>(r2, $l0, $l1);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label0:
        return;
    }

    private java.lang.String toString(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String)
    {
        java.net.URI r0;
        java.lang.String r1, r2, r3, r4, r5, r6, r7, r8, $r13;
        int i0;
        java.lang.StringBuffer $r9, r10;

        r0 := @this: java.net.URI;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.lang.String;
        r4 := @parameter3: java.lang.String;
        r5 := @parameter4: java.lang.String;
        i0 := @parameter5: int;
        r6 := @parameter6: java.lang.String;
        r7 := @parameter7: java.lang.String;
        r8 := @parameter8: java.lang.String;
        $r9 = new java.lang.StringBuffer;
        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();
        r10 = $r9;
        if r1 == null goto label0;

        virtualinvoke r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);
        virtualinvoke r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

     label0:
        specialinvoke r0.<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>(r10, r2, r3, r4, r5, i0, r6, r7);
        specialinvoke r0.<java.net.URI: void appendFragment(java.lang.StringBuffer,java.lang.String)>(r10, r8);
        $r13 = virtualinvoke r10.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r13;
    }

    private void defineSchemeSpecificPart()
    {
        java.net.URI r0;
        java.lang.StringBuffer r1, $r3;
        java.lang.String $r2, $r4, $r5, $r6, $r7, $r8, $r9;
        int $i0, $i1;

        r0 := @this: java.net.URI;
        $r2 = r0.<java.net.URI: java.lang.String schemeSpecificPart>;
        if $r2 == null goto label0;

        return;

     label0:
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        r1 = $r3;
        $r4 = virtualinvoke r0.<java.net.URI: java.lang.String getAuthority()>();
        $r5 = virtualinvoke r0.<java.net.URI: java.lang.String getUserInfo()>();
        $r6 = r0.<java.net.URI: java.lang.String host>;
        $i0 = r0.<java.net.URI: int port>;
        $r7 = virtualinvoke r0.<java.net.URI: java.lang.String getPath()>();
        $r8 = virtualinvoke r0.<java.net.URI: java.lang.String getQuery()>();
        specialinvoke r0.<java.net.URI: void appendSchemeSpecificPart(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>(r1, null, $r4, $r5, $r6, $i0, $r7, $r8);
        $i1 = virtualinvoke r1.<java.lang.StringBuffer: int length()>();
        if $i1 != 0 goto label1;

        return;

     label1:
        $r9 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();
        r0.<java.net.URI: java.lang.String schemeSpecificPart> = $r9;
        return;
    }

    private void defineString()
    {
        java.net.URI r0;
        java.lang.StringBuffer r1, $r3;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.String $r2, $r4, $r5, $r8, $r10, $r12, $r13, $r16, $r17, $r18, $r20, $r25, $r27, $r29, $r30, $r32, $r34, $r36, $r38, $r40;
        int $i0, $i1, $i2;

        r0 := @this: java.net.URI;
        $r2 = r0.<java.net.URI: java.lang.String string>;
        if $r2 == null goto label0;

        return;

     label0:
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        r1 = $r3;
        $r4 = r0.<java.net.URI: java.lang.String scheme>;
        if $r4 == null goto label1;

        $r5 = r0.<java.net.URI: java.lang.String scheme>;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

     label1:
        $z1 = virtualinvoke r0.<java.net.URI: boolean isOpaque()>();
        if $z1 == 0 goto label2;

        $r8 = r0.<java.net.URI: java.lang.String schemeSpecificPart>;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);
        goto label12;

     label2:
        $r10 = r0.<java.net.URI: java.lang.String host>;
        if $r10 == null goto label9;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("//");
        $r12 = r0.<java.net.URI: java.lang.String userInfo>;
        if $r12 == null goto label3;

        $r13 = r0.<java.net.URI: java.lang.String userInfo>;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(64);

     label3:
        $r16 = r0.<java.net.URI: java.lang.String host>;
        $i0 = virtualinvoke $r16.<java.lang.String: int indexOf(int)>(58);
        if $i0 < 0 goto label4;

        $r17 = r0.<java.net.URI: java.lang.String host>;
        $z2 = virtualinvoke $r17.<java.lang.String: boolean startsWith(java.lang.String)>("[");
        if $z2 != 0 goto label4;

        $r18 = r0.<java.net.URI: java.lang.String host>;
        $z3 = virtualinvoke $r18.<java.lang.String: boolean endsWith(java.lang.String)>("]");
        if $z3 != 0 goto label4;

        $z4 = 1;
        goto label5;

     label4:
        $z4 = 0;

     label5:
        z0 = $z4;
        if z0 == 0 goto label6;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

     label6:
        $r20 = r0.<java.net.URI: java.lang.String host>;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);
        if z0 == 0 goto label7;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

     label7:
        $i1 = r0.<java.net.URI: int port>;
        if $i1 == -1 goto label8;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);
        $i2 = r0.<java.net.URI: int port>;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

     label8:
        goto label10;

     label9:
        $r25 = r0.<java.net.URI: java.lang.String authority>;
        if $r25 == null goto label10;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("//");
        $r27 = r0.<java.net.URI: java.lang.String authority>;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

     label10:
        $r29 = r0.<java.net.URI: java.lang.String path>;
        if $r29 == null goto label11;

        $r30 = r0.<java.net.URI: java.lang.String path>;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

     label11:
        $r32 = r0.<java.net.URI: java.lang.String query>;
        if $r32 == null goto label12;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(63);
        $r34 = r0.<java.net.URI: java.lang.String query>;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34);

     label12:
        $r36 = r0.<java.net.URI: java.lang.String fragment>;
        if $r36 == null goto label13;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(35);
        $r38 = r0.<java.net.URI: java.lang.String fragment>;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

     label13:
        $r40 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();
        r0.<java.net.URI: java.lang.String string> = $r40;
        return;
    }

    private static java.lang.String resolvePath(java.lang.String, java.lang.String, boolean)
    {
        java.lang.String r0, r1, r2, $r5, r8;
        boolean z0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuffer r3, $r4;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        z0 := @parameter2: boolean;
        i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(47);
        i1 = virtualinvoke r1.<java.lang.String: int length()>();
        r2 = "";
        if i1 != 0 goto label0;

        if i0 < 0 goto label2;

        $i2 = i0 + 1;
        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);
        goto label2;

     label0:
        $r4 = new java.lang.StringBuffer;
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();
        $i4 = $i3 + i1;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i4);
        r3 = $r4;
        if i0 < 0 goto label1;

        $i5 = i0 + 1;
        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

     label1:
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);
        r2 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        r8 = staticinvoke <java.net.URI: java.lang.String normalize(java.lang.String)>(r2);
        return r8;
    }

    private static java.net.URI resolve(java.net.URI, java.net.URI)
    {
        java.net.URI r0, r1, r2, $r12, $r21, r22;
        java.lang.String r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i1, $i2, $i4;
        char $c3;

        r0 := @parameter0: java.net.URI;
        r1 := @parameter1: java.net.URI;
        $z0 = virtualinvoke r1.<java.net.URI: boolean isOpaque()>();
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r0.<java.net.URI: boolean isOpaque()>();
        if $z1 == 0 goto label1;

     label0:
        return r1;

     label1:
        $r4 = r1.<java.net.URI: java.lang.String scheme>;
        if $r4 != null goto label3;

        $r5 = r1.<java.net.URI: java.lang.String authority>;
        if $r5 != null goto label3;

        $r6 = r1.<java.net.URI: java.lang.String path>;
        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("");
        if $z2 == 0 goto label3;

        $r7 = r1.<java.net.URI: java.lang.String fragment>;
        if $r7 == null goto label3;

        $r8 = r1.<java.net.URI: java.lang.String query>;
        if $r8 != null goto label3;

        $r9 = r0.<java.net.URI: java.lang.String fragment>;
        if $r9 == null goto label2;

        $r10 = r1.<java.net.URI: java.lang.String fragment>;
        $r11 = r0.<java.net.URI: java.lang.String fragment>;
        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);
        if $z3 == 0 goto label2;

        return r0;

     label2:
        $r12 = new java.net.URI;
        specialinvoke $r12.<java.net.URI: void <init>()>();
        r2 = $r12;
        $r13 = r0.<java.net.URI: java.lang.String scheme>;
        r2.<java.net.URI: java.lang.String scheme> = $r13;
        $r14 = r0.<java.net.URI: java.lang.String authority>;
        r2.<java.net.URI: java.lang.String authority> = $r14;
        $r15 = r0.<java.net.URI: java.lang.String userInfo>;
        r2.<java.net.URI: java.lang.String userInfo> = $r15;
        $r16 = r0.<java.net.URI: java.lang.String host>;
        r2.<java.net.URI: java.lang.String host> = $r16;
        $i0 = r0.<java.net.URI: int port>;
        r2.<java.net.URI: int port> = $i0;
        $r17 = r0.<java.net.URI: java.lang.String path>;
        r2.<java.net.URI: java.lang.String path> = $r17;
        $r18 = r1.<java.net.URI: java.lang.String fragment>;
        r2.<java.net.URI: java.lang.String fragment> = $r18;
        $r19 = r0.<java.net.URI: java.lang.String query>;
        r2.<java.net.URI: java.lang.String query> = $r19;
        return r2;

     label3:
        $r20 = r1.<java.net.URI: java.lang.String scheme>;
        if $r20 == null goto label4;

        return r1;

     label4:
        $r21 = new java.net.URI;
        specialinvoke $r21.<java.net.URI: void <init>()>();
        r22 = $r21;
        $r23 = r0.<java.net.URI: java.lang.String scheme>;
        r22.<java.net.URI: java.lang.String scheme> = $r23;
        $r24 = r1.<java.net.URI: java.lang.String query>;
        r22.<java.net.URI: java.lang.String query> = $r24;
        $r25 = r1.<java.net.URI: java.lang.String fragment>;
        r22.<java.net.URI: java.lang.String fragment> = $r25;
        $r26 = r1.<java.net.URI: java.lang.String authority>;
        if $r26 != null goto label9;

        $r27 = r0.<java.net.URI: java.lang.String authority>;
        r22.<java.net.URI: java.lang.String authority> = $r27;
        $r28 = r0.<java.net.URI: java.lang.String host>;
        r22.<java.net.URI: java.lang.String host> = $r28;
        $r29 = r0.<java.net.URI: java.lang.String userInfo>;
        r22.<java.net.URI: java.lang.String userInfo> = $r29;
        $i1 = r0.<java.net.URI: int port>;
        r22.<java.net.URI: int port> = $i1;
        $r30 = r1.<java.net.URI: java.lang.String path>;
        if $r30 != null goto label5;

        $r31 = "";
        goto label6;

     label5:
        $r31 = r1.<java.net.URI: java.lang.String path>;

     label6:
        r3 = $r31;
        $i2 = virtualinvoke r3.<java.lang.String: int length()>();
        if $i2 <= 0 goto label7;

        $c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0);
        if $c3 != 47 goto label7;

        $r32 = r1.<java.net.URI: java.lang.String path>;
        r22.<java.net.URI: java.lang.String path> = $r32;
        goto label8;

     label7:
        $r33 = r0.<java.net.URI: java.lang.String path>;
        $z4 = virtualinvoke r0.<java.net.URI: boolean isAbsolute()>();
        $r34 = staticinvoke <java.net.URI: java.lang.String resolvePath(java.lang.String,java.lang.String,boolean)>($r33, r3, $z4);
        r22.<java.net.URI: java.lang.String path> = $r34;

     label8:
        goto label10;

     label9:
        $r35 = r1.<java.net.URI: java.lang.String authority>;
        r22.<java.net.URI: java.lang.String authority> = $r35;
        $r36 = r1.<java.net.URI: java.lang.String host>;
        r22.<java.net.URI: java.lang.String host> = $r36;
        $r37 = r1.<java.net.URI: java.lang.String userInfo>;
        r22.<java.net.URI: java.lang.String userInfo> = $r37;
        $r38 = r1.<java.net.URI: java.lang.String host>;
        r22.<java.net.URI: java.lang.String host> = $r38;
        $i4 = r1.<java.net.URI: int port>;
        r22.<java.net.URI: int port> = $i4;
        $r39 = r1.<java.net.URI: java.lang.String path>;
        r22.<java.net.URI: java.lang.String path> = $r39;

     label10:
        return r22;
    }

    private static java.net.URI normalize(java.net.URI)
    {
        java.net.URI r0, r2, $r7;
        java.lang.String r1, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13;
        boolean $z0;
        int $i0, $i1;

        r0 := @parameter0: java.net.URI;
        $z0 = virtualinvoke r0.<java.net.URI: boolean isOpaque()>();
        if $z0 != 0 goto label0;

        $r3 = r0.<java.net.URI: java.lang.String path>;
        if $r3 == null goto label0;

        $r4 = r0.<java.net.URI: java.lang.String path>;
        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();
        if $i0 != 0 goto label1;

     label0:
        return r0;

     label1:
        $r5 = r0.<java.net.URI: java.lang.String path>;
        r1 = staticinvoke <java.net.URI: java.lang.String normalize(java.lang.String)>($r5);
        $r6 = r0.<java.net.URI: java.lang.String path>;
        if r1 != $r6 goto label2;

        return r0;

     label2:
        $r7 = new java.net.URI;
        specialinvoke $r7.<java.net.URI: void <init>()>();
        r2 = $r7;
        $r8 = r0.<java.net.URI: java.lang.String scheme>;
        r2.<java.net.URI: java.lang.String scheme> = $r8;
        $r9 = r0.<java.net.URI: java.lang.String fragment>;
        r2.<java.net.URI: java.lang.String fragment> = $r9;
        $r10 = r0.<java.net.URI: java.lang.String authority>;
        r2.<java.net.URI: java.lang.String authority> = $r10;
        $r11 = r0.<java.net.URI: java.lang.String userInfo>;
        r2.<java.net.URI: java.lang.String userInfo> = $r11;
        $r12 = r0.<java.net.URI: java.lang.String host>;
        r2.<java.net.URI: java.lang.String host> = $r12;
        $i1 = r0.<java.net.URI: int port>;
        r2.<java.net.URI: int port> = $i1;
        r2.<java.net.URI: java.lang.String path> = r1;
        $r13 = r0.<java.net.URI: java.lang.String query>;
        r2.<java.net.URI: java.lang.String query> = $r13;
        return r2;
    }

    private static java.net.URI relativize(java.net.URI, java.net.URI)
    {
        java.net.URI r0, r1, r4, $r14;
        java.lang.String r2, r3, $r5, $r6, $r7, $r8, $r9, $r10, $r15, $r16, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r11, $r12, $r13;
        int $i0;

        r0 := @parameter0: java.net.URI;
        r1 := @parameter1: java.net.URI;
        $z0 = virtualinvoke r1.<java.net.URI: boolean isOpaque()>();
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r0.<java.net.URI: boolean isOpaque()>();
        if $z1 == 0 goto label1;

     label0:
        return r1;

     label1:
        $r5 = r0.<java.net.URI: java.lang.String scheme>;
        $r6 = r1.<java.net.URI: java.lang.String scheme>;
        $z2 = staticinvoke <java.net.URI: boolean equalIgnoringCase(java.lang.String,java.lang.String)>($r5, $r6);
        if $z2 == 0 goto label2;

        $r7 = r0.<java.net.URI: java.lang.String authority>;
        $r8 = r1.<java.net.URI: java.lang.String authority>;
        $z3 = staticinvoke <java.net.URI: boolean equal(java.lang.String,java.lang.String)>($r7, $r8);
        if $z3 != 0 goto label3;

     label2:
        return r1;

     label3:
        $r9 = r0.<java.net.URI: java.lang.String path>;
        r2 = staticinvoke <java.net.URI: java.lang.String normalize(java.lang.String)>($r9);
        $r10 = r1.<java.net.URI: java.lang.String path>;
        r3 = staticinvoke <java.net.URI: java.lang.String normalize(java.lang.String)>($r10);
        $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);
        if $z4 != 0 goto label5;

        $z5 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>("/");
        if $z5 != 0 goto label4;

        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");
        r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $z6 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>(r2);
        if $z6 != 0 goto label5;

        return r1;

     label5:
        $r14 = new java.net.URI;
        specialinvoke $r14.<java.net.URI: void <init>()>();
        r4 = $r14;
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();
        $r15 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i0);
        r4.<java.net.URI: java.lang.String path> = $r15;
        $r16 = r1.<java.net.URI: java.lang.String query>;
        r4.<java.net.URI: java.lang.String query> = $r16;
        $r17 = r1.<java.net.URI: java.lang.String fragment>;
        r4.<java.net.URI: java.lang.String fragment> = $r17;
        return r4;
    }

    private static int needsNormalization(java.lang.String)
    {
        java.lang.String r0;
        boolean z0;
        int i0, i1, i2, $i3, $i6, $i8, $i10, $i11, $i13, $i16;
        char $c4, $c5, $c7, $c9, $c12, $c14, $c15;

        r0 := @parameter0: java.lang.String;
        z0 = 1;
        i0 = 0;
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();
        i1 = $i3 - 1;
        i2 = 0;

     label0:
        if i2 > i1 goto label2;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        if $c4 == 47 goto label1;

        goto label2;

     label1:
        i2 = i2 + 1;
        goto label0;

     label2:
        if i2 <= 1 goto label3;

        z0 = 0;

     label3:
        if i2 > i1 goto label9;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        if $c5 != 46 goto label5;

        if i2 == i1 goto label4;

        $i6 = i2 + 1;
        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6);
        if $c7 == 47 goto label4;

        $i8 = i2 + 1;
        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i8);
        if $c9 != 46 goto label5;

        $i10 = i2 + 1;
        if $i10 == i1 goto label4;

        $i11 = i2 + 2;
        $c12 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i11);
        if $c12 != 47 goto label5;

     label4:
        z0 = 0;

     label5:
        i0 = i0 + 1;

     label6:
        if i2 > i1 goto label3;

        $i13 = i2;
        i2 = i2 + 1;
        $c14 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i13);
        if $c14 == 47 goto label7;

        goto label6;

     label7:
        if i2 > i1 goto label3;

        $c15 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        if $c15 == 47 goto label8;

        goto label3;

     label8:
        z0 = 0;
        i2 = i2 + 1;
        goto label7;

     label9:
        if z0 == 0 goto label10;

        $i16 = -1;
        goto label11;

     label10:
        $i16 = i0;

     label11:
        return $i16;
    }

    private static void split(char[], int[])
    {
        char[] r0;
        int[] r1;
        int i0, i1, i2, $i3, $i5, $i6, $i7, $i9, $i11, $i12;
        char $c4, $c8, $c10;
        java.lang.InternalError $r2;

        r0 := @parameter0: char[];
        r1 := @parameter1: int[];
        $i3 = lengthof r0;
        i0 = $i3 - 1;
        i1 = 0;
        i2 = 0;

     label0:
        if i1 > i0 goto label2;

        $c4 = r0[i1];
        if $c4 == 47 goto label1;

        goto label2;

     label1:
        r0[i1] = 0;
        i1 = i1 + 1;
        goto label0;

     label2:
        if i1 > i0 goto label7;

        $i5 = i2;
        i2 = i2 + 1;
        $i6 = i1;
        i1 = i1 + 1;
        r1[$i5] = $i6;

     label3:
        if i1 > i0 goto label2;

        $i7 = i1;
        i1 = i1 + 1;
        $c8 = r0[$i7];
        if $c8 == 47 goto label4;

        goto label3;

     label4:
        $i9 = i1 - 1;
        r0[$i9] = 0;

     label5:
        if i1 > i0 goto label2;

        $c10 = r0[i1];
        if $c10 == 47 goto label6;

        goto label2;

     label6:
        $i11 = i1;
        i1 = i1 + 1;
        r0[$i11] = 0;
        goto label5;

     label7:
        $i12 = lengthof r1;
        if i2 == $i12 goto label8;

        $r2 = new java.lang.InternalError;
        specialinvoke $r2.<java.lang.InternalError: void <init>()>();
        throw $r2;

     label8:
        return;
    }

    private static int join(char[], int[])
    {
        char[] r0;
        int[] r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i8, $i10, $i12, $i14;
        char $c7, $c9, $c11, $c13;
        java.lang.InternalError $r2;

        r0 := @parameter0: char[];
        r1 := @parameter1: int[];
        i0 = lengthof r1;
        $i6 = lengthof r0;
        i1 = $i6 - 1;
        i2 = 0;
        $c7 = r0[i2];
        if $c7 != 0 goto label0;

        $i8 = i2;
        i2 = i2 + 1;
        r0[$i8] = 47;

     label0:
        i3 = 0;

     label1:
        if i3 >= i0 goto label10;

        i4 = r1[i3];
        if i4 != -1 goto label2;

        goto label9;

     label2:
        if i2 != i4 goto label5;

     label3:
        if i2 > i1 goto label4;

        $c9 = r0[i2];
        if $c9 == 0 goto label4;

        i2 = i2 + 1;
        goto label3;

     label4:
        if i2 > i1 goto label9;

        $i10 = i2;
        i2 = i2 + 1;
        r0[$i10] = 47;
        goto label9;

     label5:
        if i2 >= i4 goto label8;

     label6:
        if i4 > i1 goto label7;

        $c11 = r0[i4];
        if $c11 == 0 goto label7;

        $i12 = i2;
        i2 = i2 + 1;
        $i5 = i4;
        i4 = i4 + 1;
        $c13 = r0[$i5];
        r0[$i12] = $c13;
        goto label6;

     label7:
        if i4 > i1 goto label9;

        $i14 = i2;
        i2 = i2 + 1;
        r0[$i14] = 47;
        goto label9;

     label8:
        $r2 = new java.lang.InternalError;
        specialinvoke $r2.<java.lang.InternalError: void <init>()>();
        throw $r2;

     label9:
        i3 = i3 + 1;
        goto label1;

     label10:
        return i2;
    }

    private static void removeDots(char[], int[])
    {
        char[] r0;
        int[] r1;
        int i0, i1, i2, i4, i5, $i6, $i8, $i10, $i12, $i13, i15, $i16, $i18, $i20;
        byte b3;
        char $c7, $c9, $c11, $c14, $c17, $c19, $c21;

        r0 := @parameter0: char[];
        r1 := @parameter1: int[];
        i0 = lengthof r1;
        $i6 = lengthof r0;
        i1 = $i6 - 1;
        i2 = 0;

     label0:
        if i2 >= i0 goto label14;

        b3 = 0;

     label1:
        i4 = r1[i2];
        $c7 = r0[i4];
        if $c7 != 46 goto label5;

        if i4 != i1 goto label2;

        b3 = 1;
        goto label6;

     label2:
        $i8 = i4 + 1;
        $c9 = r0[$i8];
        if $c9 != 0 goto label3;

        b3 = 1;
        goto label6;

     label3:
        $i10 = i4 + 1;
        $c11 = r0[$i10];
        if $c11 != 46 goto label5;

        $i12 = i4 + 1;
        if $i12 == i1 goto label4;

        $i13 = i4 + 2;
        $c14 = r0[$i13];
        if $c14 != 0 goto label5;

     label4:
        b3 = 2;
        goto label6;

     label5:
        i2 = i2 + 1;
        if i2 < i0 goto label1;

     label6:
        if i2 > i0 goto label14;

        if b3 != 0 goto label7;

        goto label14;

     label7:
        if b3 != 1 goto label8;

        r1[i2] = -1;
        goto label13;

     label8:
        i15 = i2 - 1;

     label9:
        if i15 < 0 goto label11;

        $i16 = r1[i15];
        if $i16 == -1 goto label10;

        goto label11;

     label10:
        i15 = i15 + -1;
        goto label9;

     label11:
        if i15 < 0 goto label13;

        i5 = r1[i15];
        $c17 = r0[i5];
        if $c17 != 46 goto label12;

        $i18 = i5 + 1;
        $c19 = r0[$i18];
        if $c19 != 46 goto label12;

        $i20 = i5 + 2;
        $c21 = r0[$i20];
        if $c21 == 0 goto label13;

     label12:
        r1[i2] = -1;
        r1[i15] = -1;

     label13:
        i2 = i2 + 1;
        goto label0;

     label14:
        return;
    }

    private static void maybeAddLeadingDot(char[], int[])
    {
        char[] r0;
        int[] r1;
        int i0, i1, i2, $i4, $i5, $i8;
        char $c3, $c6, $c7, $c9;

        r0 := @parameter0: char[];
        r1 := @parameter1: int[];
        $c3 = r0[0];
        if $c3 != 0 goto label0;

        return;

     label0:
        i0 = lengthof r1;
        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $i4 = r1[i1];
        if $i4 < 0 goto label2;

        goto label3;

     label2:
        i1 = i1 + 1;
        goto label1;

     label3:
        if i1 >= i0 goto label4;

        if i1 != 0 goto label5;

     label4:
        return;

     label5:
        i2 = r1[i1];

     label6:
        $i5 = lengthof r0;
        if i2 >= $i5 goto label7;

        $c6 = r0[i2];
        if $c6 == 58 goto label7;

        $c7 = r0[i2];
        if $c7 == 0 goto label7;

        i2 = i2 + 1;
        goto label6;

     label7:
        $i8 = lengthof r0;
        if i2 >= $i8 goto label8;

        $c9 = r0[i2];
        if $c9 != 0 goto label9;

     label8:
        return;

     label9:
        r0[0] = 46;
        r0[1] = 0;
        r1[0] = 0;
        return;
    }

    private static java.lang.String normalize(java.lang.String)
    {
        java.lang.String r0, r3, $r4;
        int i0, $i1;
        char[] r1;
        int[] r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        i0 = staticinvoke <java.net.URI: int needsNormalization(java.lang.String)>(r0);
        if i0 >= 0 goto label0;

        return r0;

     label0:
        r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();
        r2 = newarray (int)[i0];
        staticinvoke <java.net.URI: void split(char[],int[])>(r1, r2);
        staticinvoke <java.net.URI: void removeDots(char[],int[])>(r1, r2);
        staticinvoke <java.net.URI: void maybeAddLeadingDot(char[],int[])>(r1, r2);
        $r4 = new java.lang.String;
        $i1 = staticinvoke <java.net.URI: int join(char[],int[])>(r1, r2);
        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r1, 0, $i1);
        r3 = $r4;
        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);
        if $z0 == 0 goto label1;

        return r0;

     label1:
        return r3;
    }

    private static long lowMask(java.lang.String)
    {
        java.lang.String r0;
        int i0, i2;
        long l1, $l4;
        char c3;

        r0 := @parameter0: java.lang.String;
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        l1 = 0L;
        i2 = 0;

     label0:
        if i2 >= i0 goto label2;

        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        if c3 >= 64 goto label1;

        $l4 = 1L << c3;
        l1 = l1 | $l4;

     label1:
        i2 = i2 + 1;
        goto label0;

     label2:
        return l1;
    }

    private static long highMask(java.lang.String)
    {
        java.lang.String r0;
        int i0, i2, $i4;
        long l1, $l5;
        char c3;

        r0 := @parameter0: java.lang.String;
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        l1 = 0L;
        i2 = 0;

     label0:
        if i2 >= i0 goto label2;

        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        if c3 < 64 goto label1;

        if c3 >= 128 goto label1;

        $i4 = c3 - 64;
        $l5 = 1L << $i4;
        l1 = l1 | $l5;

     label1:
        i2 = i2 + 1;
        goto label0;

     label2:
        return l1;
    }

    private static long lowMask(char, char)
    {
        char c0, c1;
        long l2, $l8;
        int i3, i4, i5, $i6, $i7;

        c0 := @parameter0: char;
        c1 := @parameter1: char;
        l2 = 0L;
        $i6 = staticinvoke <java.lang.Math: int min(int,int)>(c0, 63);
        i3 = staticinvoke <java.lang.Math: int max(int,int)>($i6, 0);
        $i7 = staticinvoke <java.lang.Math: int min(int,int)>(c1, 63);
        i4 = staticinvoke <java.lang.Math: int max(int,int)>($i7, 0);
        i5 = i3;

     label0:
        if i5 > i4 goto label1;

        $l8 = 1L << i5;
        l2 = l2 | $l8;
        i5 = i5 + 1;
        goto label0;

     label1:
        return l2;
    }

    private static long highMask(char, char)
    {
        char c0, c1;
        long l2, $l10;
        int i3, i4, i5, $i6, $i7, $i8, $i9;

        c0 := @parameter0: char;
        c1 := @parameter1: char;
        l2 = 0L;
        $i6 = staticinvoke <java.lang.Math: int min(int,int)>(c0, 127);
        $i7 = staticinvoke <java.lang.Math: int max(int,int)>($i6, 64);
        i3 = $i7 - 64;
        $i8 = staticinvoke <java.lang.Math: int min(int,int)>(c1, 127);
        $i9 = staticinvoke <java.lang.Math: int max(int,int)>($i8, 64);
        i4 = $i9 - 64;
        i5 = i3;

     label0:
        if i5 > i4 goto label1;

        $l10 = 1L << i5;
        l2 = l2 | $l10;
        i5 = i5 + 1;
        goto label0;

     label1:
        return l2;
    }

    private static boolean match(char, long, long)
    {
        char c0;
        long l1, l2, $l3, $l4, $l7, $l8;
        byte $b5, $b9;
        boolean $z0, $z1;
        int $i6;

        c0 := @parameter0: char;
        l1 := @parameter1: long;
        l2 := @parameter2: long;
        if c0 != 0 goto label0;

        return 0;

     label0:
        if c0 >= 64 goto label3;

        $l3 = 1L << c0;
        $l4 = $l3 & l1;
        $b5 = $l4 cmp 0L;
        if $b5 == 0 goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        if c0 >= 128 goto label6;

        $i6 = c0 - 64;
        $l7 = 1L << $i6;
        $l8 = $l7 & l2;
        $b9 = $l8 cmp 0L;
        if $b9 == 0 goto label4;

        $z1 = 1;
        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;

     label6:
        return 0;
    }

    private static void appendEscape(java.lang.StringBuffer, byte)
    {
        java.lang.StringBuffer r0;
        byte b0, $b1, $b2, $b4, $b5;
        char[] $r2, $r4;
        char $c3, $c6;

        r0 := @parameter0: java.lang.StringBuffer;
        b0 := @parameter1: byte;
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(37);
        $r2 = <java.net.URI: char[] hexDigits>;
        $b1 = b0 >> 4;
        $b2 = $b1 & 15;
        $c3 = $r2[$b2];
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);
        $r4 = <java.net.URI: char[] hexDigits>;
        $b4 = b0 >> 0;
        $b5 = $b4 & 15;
        $c6 = $r4[$b5];
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c6);
        return;
    }

    private static void appendEncoded(java.lang.StringBuffer, char)
    {
        java.lang.StringBuffer r0;
        char c0, $c4;
        java.nio.ByteBuffer r1;
        java.lang.StringBuilder $r2, $r5, $r6;
        java.nio.charset.CharacterCodingException r3, $r9;
        java.nio.charset.CharsetEncoder $r4;
        java.lang.String $r7;
        java.nio.CharBuffer $r8;
        boolean $z0, $z1;
        java.lang.AssertionError $r10;
        byte $b1, $b3;
        short s2;

        r0 := @parameter0: java.lang.StringBuffer;
        c0 := @parameter1: char;
        r1 = null;

     label0:
        $r4 = staticinvoke <sun.nio.cs.ThreadLocalCoders: java.nio.charset.CharsetEncoder encoderFor(java.lang.Object)>("UTF-8");
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        $r8 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>($r7);
        r1 = virtualinvoke $r4.<java.nio.charset.CharsetEncoder: java.nio.ByteBuffer encode(java.nio.CharBuffer)>($r8);

     label1:
        goto label3;

     label2:
        $r9 := @caughtexception;
        r3 = $r9;
        $z0 = <java.net.URI: boolean $assertionsDisabled>;
        if $z0 != 0 goto label3;

        $r10 = new java.lang.AssertionError;
        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();
        throw $r10;

     label3:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();
        if $z1 == 0 goto label6;

        $b1 = virtualinvoke r1.<java.nio.ByteBuffer: byte get()>();
        s2 = $b1 & 255;
        if s2 < 128 goto label4;

        $b3 = (byte) s2;
        staticinvoke <java.net.URI: void appendEscape(java.lang.StringBuffer,byte)>(r0, $b3);
        goto label5;

     label4:
        $c4 = (char) s2;
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

     label5:
        goto label3;

     label6:
        return;

        catch java.nio.charset.CharacterCodingException from label0 to label1 with label2;
    }

    private static java.lang.String quote(java.lang.String, long, long)
    {
        java.lang.String r0, $r3, $r7, $r10;
        long l0, l1, $l5;
        java.lang.StringBuffer r1, $r2, $r6;
        boolean z0, $z1, $z2, $z3, $z4;
        int i3, $i7;
        char c4;
        byte $b6, $b8;

        r0 := @parameter0: java.lang.String;
        l0 := @parameter1: long;
        l1 := @parameter2: long;
        virtualinvoke r0.<java.lang.String: int length()>();
        r1 = null;
        $l5 = l0 & 1L;
        $b6 = $l5 cmp 0L;
        if $b6 == 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        z0 = $z1;
        i3 = 0;

     label2:
        $i7 = virtualinvoke r0.<java.lang.String: int length()>();
        if i3 >= $i7 goto label10;

        c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);
        if c4 >= 128 goto label5;

        $z2 = staticinvoke <java.net.URI: boolean match(char,long,long)>(c4, l0, l1);
        if $z2 != 0 goto label4;

        if r1 != null goto label3;

        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        r1 = $r2;
        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i3);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label3:
        $b8 = (byte) c4;
        staticinvoke <java.net.URI: void appendEscape(java.lang.StringBuffer,byte)>(r1, $b8);
        goto label9;

     label4:
        if r1 == null goto label9;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c4);
        goto label9;

     label5:
        if z0 == 0 goto label8;

        $z3 = staticinvoke <java.lang.Character: boolean isSpaceChar(char)>(c4);
        if $z3 != 0 goto label6;

        $z4 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(c4);
        if $z4 == 0 goto label8;

     label6:
        if r1 != null goto label7;

        $r6 = new java.lang.StringBuffer;
        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();
        r1 = $r6;
        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i3);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

     label7:
        staticinvoke <java.net.URI: void appendEncoded(java.lang.StringBuffer,char)>(r1, c4);
        goto label9;

     label8:
        if r1 == null goto label9;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c4);

     label9:
        i3 = i3 + 1;
        goto label2;

     label10:
        if r1 != null goto label11;

        $r10 = r0;
        goto label12;

     label11:
        $r10 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

     label12:
        return $r10;
    }

    private static java.lang.String encode(java.lang.String)
    {
        java.lang.String r0, r4, $r12;
        int i0, i1;
        java.nio.ByteBuffer r1;
        java.nio.charset.CharacterCodingException r2, $r7;
        short s2;
        char $c3, $c6;
        java.text.Normalizer$Form $r3;
        java.nio.charset.CharsetEncoder $r5;
        java.nio.CharBuffer $r6;
        boolean $z0, $z1;
        java.lang.AssertionError $r8;
        java.lang.StringBuffer $r9, r10;
        byte $b4, $b5;

        r0 := @parameter0: java.lang.String;
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        if i0 != 0 goto label0;

        return r0;

     label0:
        i1 = 0;

     label1:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);
        if $c3 < 128 goto label2;

        goto label3;

     label2:
        i1 = i1 + 1;
        if i1 < i0 goto label1;

        return r0;

     label3:
        $r3 = <java.text.Normalizer$Form: java.text.Normalizer$Form NFC>;
        r4 = staticinvoke <java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>(r0, $r3);
        r1 = null;

     label4:
        $r5 = staticinvoke <sun.nio.cs.ThreadLocalCoders: java.nio.charset.CharsetEncoder encoderFor(java.lang.Object)>("UTF-8");
        $r6 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>(r4);
        r1 = virtualinvoke $r5.<java.nio.charset.CharsetEncoder: java.nio.ByteBuffer encode(java.nio.CharBuffer)>($r6);

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;
        r2 = $r7;
        $z0 = <java.net.URI: boolean $assertionsDisabled>;
        if $z0 != 0 goto label7;

        $r8 = new java.lang.AssertionError;
        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();
        throw $r8;

     label7:
        $r9 = new java.lang.StringBuffer;
        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();
        r10 = $r9;

     label8:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();
        if $z1 == 0 goto label11;

        $b4 = virtualinvoke r1.<java.nio.ByteBuffer: byte get()>();
        s2 = $b4 & 255;
        if s2 < 128 goto label9;

        $b5 = (byte) s2;
        staticinvoke <java.net.URI: void appendEscape(java.lang.StringBuffer,byte)>(r10, $b5);
        goto label10;

     label9:
        $c6 = (char) s2;
        virtualinvoke r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c6);

     label10:
        goto label8;

     label11:
        $r12 = virtualinvoke r10.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r12;

        catch java.nio.charset.CharacterCodingException from label4 to label5 with label6;
    }

    private static int decode(char)
    {
        char c0;
        int $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        java.lang.AssertionError $r0;

        c0 := @parameter0: char;
        if c0 < 48 goto label0;

        if c0 > 57 goto label0;

        $i1 = c0 - 48;
        return $i1;

     label0:
        if c0 < 97 goto label1;

        if c0 > 102 goto label1;

        $i2 = c0 - 97;
        $i3 = $i2 + 10;
        return $i3;

     label1:
        if c0 < 65 goto label2;

        if c0 > 70 goto label2;

        $i4 = c0 - 65;
        $i5 = $i4 + 10;
        return $i5;

     label2:
        $z0 = <java.net.URI: boolean $assertionsDisabled>;
        if $z0 != 0 goto label3;

        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label3:
        return -1;
    }

    private static byte decode(char, char)
    {
        char c0, c1;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        byte $b9;

        c0 := @parameter0: char;
        c1 := @parameter1: char;
        $i2 = staticinvoke <java.net.URI: int decode(char)>(c0);
        $i3 = $i2 & 15;
        $i4 = $i3 << 4;
        $i5 = staticinvoke <java.net.URI: int decode(char)>(c1);
        $i6 = $i5 & 15;
        $i7 = $i6 << 0;
        $i8 = $i4 | $i7;
        $b9 = (byte) $i8;
        return $b9;
    }

    private static java.lang.String decode(java.lang.String)
    {
        java.lang.String r0, $r23, $r25;
        int i0, i2, i3, $i4, $i6, i7, i9;
        java.lang.StringBuffer r1, $r6;
        java.nio.ByteBuffer r2;
        java.nio.CharBuffer r3;
        java.nio.charset.CharsetDecoder r4, $r7, $r9;
        char c1, $c5, $c8, $c10;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.nio.charset.CoderResult r5, r20;
        java.nio.charset.CodingErrorAction $r8, $r10;
        java.lang.AssertionError $r11, $r14, $r19, $r21;
        byte $b11;
        java.nio.Buffer $r22;

        r0 := @parameter0: java.lang.String;
        if r0 != null goto label0;

        return r0;

     label0:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();
        if i0 != 0 goto label1;

        return r0;

     label1:
        $i4 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(37);
        if $i4 >= 0 goto label2;

        return r0;

     label2:
        $r6 = new java.lang.StringBuffer;
        specialinvoke $r6.<java.lang.StringBuffer: void <init>(int)>(i0);
        r1 = $r6;
        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i0);
        r3 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(i0);
        $r7 = staticinvoke <sun.nio.cs.ThreadLocalCoders: java.nio.charset.CharsetDecoder decoderFor(java.lang.Object)>("UTF-8");
        $r8 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
        $r9 = virtualinvoke $r7.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r8);
        $r10 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
        r4 = virtualinvoke $r9.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r10);
        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);
        z0 = 0;
        i2 = 0;

     label3:
        if i2 >= i0 goto label16;

        $z1 = <java.net.URI: boolean $assertionsDisabled>;
        if $z1 != 0 goto label4;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        if c1 == $c5 goto label4;

        $r11 = new java.lang.AssertionError;
        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();
        throw $r11;

     label4:
        if c1 != 91 goto label5;

        z0 = 1;
        goto label6;

     label5:
        if z0 == 0 goto label6;

        if c1 != 93 goto label6;

        z0 = 0;

     label6:
        if c1 != 37 goto label7;

        if z0 == 0 goto label9;

     label7:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);
        i2 = i2 + 1;
        if i2 < i0 goto label8;

        goto label16;

     label8:
        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        goto label3;

     label9:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();
        i3 = i2;

     label10:
        $z2 = <java.net.URI: boolean $assertionsDisabled>;
        if $z2 != 0 goto label11;

        $i6 = i0 - i2;
        if $i6 >= 2 goto label11;

        $r14 = new java.lang.AssertionError;
        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();
        throw $r14;

     label11:
        i7 = i2 + 1;
        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);
        i9 = i7 + 1;
        $c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9);
        $b11 = staticinvoke <java.net.URI: byte decode(char,char)>($c8, $c10);
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b11);
        i2 = i9 + 1;
        if i2 < i0 goto label12;

        goto label13;

     label12:
        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);
        if c1 == 37 goto label10;

        goto label13;

     label13:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();
        virtualinvoke r3.<java.nio.CharBuffer: java.nio.Buffer clear()>();
        virtualinvoke r4.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>();
        r5 = virtualinvoke r4.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>(r2, r3, 1);
        $z3 = <java.net.URI: boolean $assertionsDisabled>;
        if $z3 != 0 goto label14;

        $z4 = virtualinvoke r5.<java.nio.charset.CoderResult: boolean isUnderflow()>();
        if $z4 != 0 goto label14;

        $r19 = new java.lang.AssertionError;
        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();
        throw $r19;

     label14:
        r20 = virtualinvoke r4.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>(r3);
        $z5 = <java.net.URI: boolean $assertionsDisabled>;
        if $z5 != 0 goto label15;

        $z6 = virtualinvoke r20.<java.nio.charset.CoderResult: boolean isUnderflow()>();
        if $z6 != 0 goto label15;

        $r21 = new java.lang.AssertionError;
        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();
        throw $r21;

     label15:
        $r22 = virtualinvoke r3.<java.nio.CharBuffer: java.nio.Buffer flip()>();
        $r23 = virtualinvoke $r22.<java.lang.Object: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);
        goto label3;

     label16:
        $r25 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r25;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.net.URI r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.net.URI;
        r1 := @parameter0: java.lang.Object;
        $r2 = (java.net.URI) r1;
        $i0 = virtualinvoke r0.<java.net.URI: int compareTo(java.net.URI)>($r2);
        return $i0;
    }

    static java.lang.String access$002(java.net.URI, java.lang.String)
    {
        java.net.URI r0;
        java.lang.String r1;

        r0 := @parameter0: java.net.URI;
        r1 := @parameter1: java.lang.String;
        r0.<java.net.URI: java.lang.String string> = r1;
        return r1;
    }

    static long access$100()
    {
        long $l0;

        $l0 = <java.net.URI: long L_HEX>;
        return $l0;
    }

    static long access$200()
    {
        long $l0;

        $l0 = <java.net.URI: long H_HEX>;
        return $l0;
    }

    static boolean access$300(char, long, long)
    {
        char c0;
        long l1, l2;
        boolean $z0;

        c0 := @parameter0: char;
        l1 := @parameter1: long;
        l2 := @parameter2: long;
        $z0 = staticinvoke <java.net.URI: boolean match(char,long,long)>(c0, l1, l2);
        return $z0;
    }

    static long access$400()
    {
        long $l0;

        $l0 = <java.net.URI: long H_ALPHA>;
        return $l0;
    }

    static long access$500()
    {
        long $l0;

        $l0 = <java.net.URI: long L_SCHEME>;
        return $l0;
    }

    static long access$600()
    {
        long $l0;

        $l0 = <java.net.URI: long H_SCHEME>;
        return $l0;
    }

    static java.lang.String access$702(java.net.URI, java.lang.String)
    {
        java.net.URI r0;
        java.lang.String r1;

        r0 := @parameter0: java.net.URI;
        r1 := @parameter1: java.lang.String;
        r0.<java.net.URI: java.lang.String scheme> = r1;
        return r1;
    }

    static long access$800()
    {
        long $l0;

        $l0 = <java.net.URI: long L_URIC>;
        return $l0;
    }

    static long access$900()
    {
        long $l0;

        $l0 = <java.net.URI: long H_URIC>;
        return $l0;
    }

    static java.lang.String access$1002(java.net.URI, java.lang.String)
    {
        java.net.URI r0;
        java.lang.String r1;

        r0 := @parameter0: java.net.URI;
        r1 := @parameter1: java.lang.String;
        r0.<java.net.URI: java.lang.String schemeSpecificPart> = r1;
        return r1;
    }

    static java.lang.String access$1102(java.net.URI, java.lang.String)
    {
        java.net.URI r0;
        java.lang.String r1;

        r0 := @parameter0: java.net.URI;
        r1 := @parameter1: java.lang.String;
        r0.<java.net.URI: java.lang.String fragment> = r1;
        return r1;
    }

    static long access$1200()
    {
        long $l0;

        $l0 = <java.net.URI: long L_PATH>;
        return $l0;
    }

    static long access$1300()
    {
        long $l0;

        $l0 = <java.net.URI: long H_PATH>;
        return $l0;
    }

    static java.lang.String access$1402(java.net.URI, java.lang.String)
    {
        java.net.URI r0;
        java.lang.String r1;

        r0 := @parameter0: java.net.URI;
        r1 := @parameter1: java.lang.String;
        r0.<java.net.URI: java.lang.String path> = r1;
        return r1;
    }

    static java.lang.String access$1502(java.net.URI, java.lang.String)
    {
        java.net.URI r0;
        java.lang.String r1;

        r0 := @parameter0: java.net.URI;
        r1 := @parameter1: java.lang.String;
        r0.<java.net.URI: java.lang.String query> = r1;
        return r1;
    }

    static long access$1600()
    {
        long $l0;

        $l0 = <java.net.URI: long L_SERVER_PERCENT>;
        return $l0;
    }

    static long access$1700()
    {
        long $l0;

        $l0 = <java.net.URI: long H_SERVER_PERCENT>;
        return $l0;
    }

    static long access$1800()
    {
        long $l0;

        $l0 = <java.net.URI: long L_SERVER>;
        return $l0;
    }

    static long access$1900()
    {
        long $l0;

        $l0 = <java.net.URI: long H_SERVER>;
        return $l0;
    }

    static long access$2000()
    {
        long $l0;

        $l0 = <java.net.URI: long L_REG_NAME>;
        return $l0;
    }

    static long access$2100()
    {
        long $l0;

        $l0 = <java.net.URI: long H_REG_NAME>;
        return $l0;
    }

    static java.lang.String access$2202(java.net.URI, java.lang.String)
    {
        java.net.URI r0;
        java.lang.String r1;

        r0 := @parameter0: java.net.URI;
        r1 := @parameter1: java.lang.String;
        r0.<java.net.URI: java.lang.String authority> = r1;
        return r1;
    }

    static java.lang.String access$2302(java.net.URI, java.lang.String)
    {
        java.net.URI r0;
        java.lang.String r1;

        r0 := @parameter0: java.net.URI;
        r1 := @parameter1: java.lang.String;
        r0.<java.net.URI: java.lang.String userInfo> = r1;
        return r1;
    }

    static java.lang.String access$2402(java.net.URI, java.lang.String)
    {
        java.net.URI r0;
        java.lang.String r1;

        r0 := @parameter0: java.net.URI;
        r1 := @parameter1: java.lang.String;
        r0.<java.net.URI: java.lang.String host> = r1;
        return r1;
    }

    static int access$2502(java.net.URI, int)
    {
        java.net.URI r0;
        int i0;

        r0 := @parameter0: java.net.URI;
        i0 := @parameter1: int;
        r0.<java.net.URI: int port> = i0;
        return i0;
    }

    static long access$2600()
    {
        long $l0;

        $l0 = <java.net.URI: long L_USERINFO>;
        return $l0;
    }

    static long access$2700()
    {
        long $l0;

        $l0 = <java.net.URI: long H_USERINFO>;
        return $l0;
    }

    static long access$2800()
    {
        long $l0;

        $l0 = <java.net.URI: long L_ALPHANUM>;
        return $l0;
    }

    static long access$2900()
    {
        long $l0;

        $l0 = <java.net.URI: long H_ALPHANUM>;
        return $l0;
    }

    static long access$3000()
    {
        long $l0;

        $l0 = <java.net.URI: long L_DIGIT>;
        return $l0;
    }

    static long access$3100()
    {
        long $l0;

        $l0 = <java.net.URI: long L_DOT>;
        return $l0;
    }

    static long access$3200()
    {
        long $l0;

        $l0 = <java.net.URI: long H_DOT>;
        return $l0;
    }

    static long access$3300()
    {
        long $l0;

        $l0 = <java.net.URI: long L_DASH>;
        return $l0;
    }

    static long access$3400()
    {
        long $l0;

        $l0 = <java.net.URI: long H_DASH>;
        return $l0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l24, $l25, $l26, $l27, $l28, $l29, $l30, $l31, $l32, $l33, $l34, $l35, $l36, $l37, $l38, $l39, $l40, $l41, $l42, $l43, $l44, $l45, $l46, $l47, $l48, $l49, $l50, $l51, $l52, $l53, $l54, $l55, $l56, $l57, $l58, $l59, $l60, $l61, $l62, $l63, $l64, $l65, $l66, $l67, $l68, $l69, $l70, $l71, $l72, $l73, $l74, $l75, $l76, $l77, $l78, $l79, $l80, $l81, $l82, $l83, $l84, $l85, $l86, $l87, $l88, $l89, $l90, $l91, $l92, $l93, $l94, $l95, $l96, $l97, $l98, $l99, $l100, $l101, $l102, $l103;
        boolean $z0, $z1;
        char[] $r1;

        $r0 = class "java/net/URI";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        <java.net.URI: boolean $assertionsDisabled> = $z1;
        $l1 = staticinvoke <java.net.URI: long lowMask(char,char)>(48, 57);
        <java.net.URI: long L_DIGIT> = $l1;
        $l2 = staticinvoke <java.net.URI: long highMask(char,char)>(65, 90);
        <java.net.URI: long H_UPALPHA> = $l2;
        $l3 = staticinvoke <java.net.URI: long highMask(char,char)>(97, 122);
        <java.net.URI: long H_LOWALPHA> = $l3;
        $l4 = <java.net.URI: long H_LOWALPHA>;
        $l0 = <java.net.URI: long H_UPALPHA>;
        $l5 = $l4 | $l0;
        <java.net.URI: long H_ALPHA> = $l5;
        $l6 = <java.net.URI: long L_DIGIT>;
        $l7 = $l6 | 0L;
        <java.net.URI: long L_ALPHANUM> = $l7;
        $l8 = <java.net.URI: long H_ALPHA>;
        $l9 = 0L | $l8;
        <java.net.URI: long H_ALPHANUM> = $l9;
        $l10 = <java.net.URI: long L_DIGIT>;
        <java.net.URI: long L_HEX> = $l10;
        $l11 = staticinvoke <java.net.URI: long highMask(char,char)>(65, 70);
        $l12 = staticinvoke <java.net.URI: long highMask(char,char)>(97, 102);
        $l13 = $l11 | $l12;
        <java.net.URI: long H_HEX> = $l13;
        $l14 = staticinvoke <java.net.URI: long lowMask(java.lang.String)>("-_.!~*\'()");
        <java.net.URI: long L_MARK> = $l14;
        $l15 = staticinvoke <java.net.URI: long highMask(java.lang.String)>("-_.!~*\'()");
        <java.net.URI: long H_MARK> = $l15;
        $l16 = <java.net.URI: long L_ALPHANUM>;
        $l17 = <java.net.URI: long L_MARK>;
        $l18 = $l16 | $l17;
        <java.net.URI: long L_UNRESERVED> = $l18;
        $l19 = <java.net.URI: long H_ALPHANUM>;
        $l20 = <java.net.URI: long H_MARK>;
        $l21 = $l19 | $l20;
        <java.net.URI: long H_UNRESERVED> = $l21;
        $l22 = staticinvoke <java.net.URI: long lowMask(java.lang.String)>(";/?:@&=+$,[]");
        <java.net.URI: long L_RESERVED> = $l22;
        $l23 = staticinvoke <java.net.URI: long highMask(java.lang.String)>(";/?:@&=+$,[]");
        <java.net.URI: long H_RESERVED> = $l23;
        $l24 = <java.net.URI: long L_RESERVED>;
        $l25 = <java.net.URI: long L_UNRESERVED>;
        $l26 = $l24 | $l25;
        $l27 = $l26 | 1L;
        <java.net.URI: long L_URIC> = $l27;
        $l28 = <java.net.URI: long H_RESERVED>;
        $l29 = <java.net.URI: long H_UNRESERVED>;
        $l30 = $l28 | $l29;
        $l31 = $l30 | 0L;
        <java.net.URI: long H_URIC> = $l31;
        $l32 = <java.net.URI: long L_UNRESERVED>;
        $l33 = $l32 | 1L;
        $l34 = staticinvoke <java.net.URI: long lowMask(java.lang.String)>(":@&=+$,");
        $l35 = $l33 | $l34;
        <java.net.URI: long L_PCHAR> = $l35;
        $l36 = <java.net.URI: long H_UNRESERVED>;
        $l37 = $l36 | 0L;
        $l38 = staticinvoke <java.net.URI: long highMask(java.lang.String)>(":@&=+$,");
        $l39 = $l37 | $l38;
        <java.net.URI: long H_PCHAR> = $l39;
        $l40 = <java.net.URI: long L_PCHAR>;
        $l41 = staticinvoke <java.net.URI: long lowMask(java.lang.String)>(";/");
        $l42 = $l40 | $l41;
        <java.net.URI: long L_PATH> = $l42;
        $l43 = <java.net.URI: long H_PCHAR>;
        $l44 = staticinvoke <java.net.URI: long highMask(java.lang.String)>(";/");
        $l45 = $l43 | $l44;
        <java.net.URI: long H_PATH> = $l45;
        $l46 = staticinvoke <java.net.URI: long lowMask(java.lang.String)>("-");
        <java.net.URI: long L_DASH> = $l46;
        $l47 = staticinvoke <java.net.URI: long highMask(java.lang.String)>("-");
        <java.net.URI: long H_DASH> = $l47;
        $l48 = staticinvoke <java.net.URI: long lowMask(java.lang.String)>(".");
        <java.net.URI: long L_DOT> = $l48;
        $l49 = staticinvoke <java.net.URI: long highMask(java.lang.String)>(".");
        <java.net.URI: long H_DOT> = $l49;
        $l50 = <java.net.URI: long L_UNRESERVED>;
        $l51 = $l50 | 1L;
        $l52 = staticinvoke <java.net.URI: long lowMask(java.lang.String)>(";:&=+$,");
        $l53 = $l51 | $l52;
        <java.net.URI: long L_USERINFO> = $l53;
        $l54 = <java.net.URI: long H_UNRESERVED>;
        $l55 = $l54 | 0L;
        $l56 = staticinvoke <java.net.URI: long highMask(java.lang.String)>(";:&=+$,");
        $l57 = $l55 | $l56;
        <java.net.URI: long H_USERINFO> = $l57;
        $l58 = <java.net.URI: long L_UNRESERVED>;
        $l59 = $l58 | 1L;
        $l60 = staticinvoke <java.net.URI: long lowMask(java.lang.String)>("$,;:@&=+");
        $l61 = $l59 | $l60;
        <java.net.URI: long L_REG_NAME> = $l61;
        $l62 = <java.net.URI: long H_UNRESERVED>;
        $l63 = $l62 | 0L;
        $l64 = staticinvoke <java.net.URI: long highMask(java.lang.String)>("$,;:@&=+");
        $l65 = $l63 | $l64;
        <java.net.URI: long H_REG_NAME> = $l65;
        $l66 = <java.net.URI: long L_USERINFO>;
        $l67 = <java.net.URI: long L_ALPHANUM>;
        $l68 = $l66 | $l67;
        $l69 = <java.net.URI: long L_DASH>;
        $l70 = $l68 | $l69;
        $l71 = staticinvoke <java.net.URI: long lowMask(java.lang.String)>(".:@[]");
        $l72 = $l70 | $l71;
        <java.net.URI: long L_SERVER> = $l72;
        $l73 = <java.net.URI: long H_USERINFO>;
        $l74 = <java.net.URI: long H_ALPHANUM>;
        $l75 = $l73 | $l74;
        $l76 = <java.net.URI: long H_DASH>;
        $l77 = $l75 | $l76;
        $l78 = staticinvoke <java.net.URI: long highMask(java.lang.String)>(".:@[]");
        $l79 = $l77 | $l78;
        <java.net.URI: long H_SERVER> = $l79;
        $l80 = <java.net.URI: long L_SERVER>;
        $l81 = staticinvoke <java.net.URI: long lowMask(java.lang.String)>("%");
        $l82 = $l80 | $l81;
        <java.net.URI: long L_SERVER_PERCENT> = $l82;
        $l83 = <java.net.URI: long H_SERVER>;
        $l84 = staticinvoke <java.net.URI: long highMask(java.lang.String)>("%");
        $l85 = $l83 | $l84;
        <java.net.URI: long H_SERVER_PERCENT> = $l85;
        $l86 = staticinvoke <java.net.URI: long lowMask(java.lang.String)>("[");
        <java.net.URI: long L_LEFT_BRACKET> = $l86;
        $l87 = staticinvoke <java.net.URI: long highMask(java.lang.String)>("[");
        <java.net.URI: long H_LEFT_BRACKET> = $l87;
        $l88 = <java.net.URI: long L_DIGIT>;
        $l89 = 0L | $l88;
        $l90 = staticinvoke <java.net.URI: long lowMask(java.lang.String)>("+-.");
        $l91 = $l89 | $l90;
        <java.net.URI: long L_SCHEME> = $l91;
        $l92 = <java.net.URI: long H_ALPHA>;
        $l93 = $l92 | 0L;
        $l94 = staticinvoke <java.net.URI: long highMask(java.lang.String)>("+-.");
        $l95 = $l93 | $l94;
        <java.net.URI: long H_SCHEME> = $l95;
        $l96 = <java.net.URI: long L_UNRESERVED>;
        $l97 = $l96 | 1L;
        $l98 = staticinvoke <java.net.URI: long lowMask(java.lang.String)>(";?:@&=+$,");
        $l99 = $l97 | $l98;
        <java.net.URI: long L_URIC_NO_SLASH> = $l99;
        $l100 = <java.net.URI: long H_UNRESERVED>;
        $l101 = $l100 | 0L;
        $l102 = staticinvoke <java.net.URI: long highMask(java.lang.String)>(";?:@&=+$,");
        $l103 = $l101 | $l102;
        <java.net.URI: long H_URIC_NO_SLASH> = $l103;
        $r1 = newarray (char)[16];
        $r1[0] = 48;
        $r1[1] = 49;
        $r1[2] = 50;
        $r1[3] = 51;
        $r1[4] = 52;
        $r1[5] = 53;
        $r1[6] = 54;
        $r1[7] = 55;
        $r1[8] = 56;
        $r1[9] = 57;
        $r1[10] = 65;
        $r1[11] = 66;
        $r1[12] = 67;
        $r1[13] = 68;
        $r1[14] = 69;
        $r1[15] = 70;
        <java.net.URI: char[] hexDigits> = $r1;
        return;
    }
}
