public class java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject extends java.lang.Object implements java.util.concurrent.locks.Condition, java.io.Serializable
{
    private static final long serialVersionUID;
    private transient java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter;
    private transient java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter;
    private static final int REINTERRUPT;
    private static final int THROW_IE;
    final java.util.concurrent.locks.AbstractQueuedSynchronizer this$0;

    public void <init>(java.util.concurrent.locks.AbstractQueuedSynchronizer)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;
        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer;
        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0> = r1;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    private java.util.concurrent.locks.AbstractQueuedSynchronizer$Node addConditionWaiter()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1, r3, $r4;
        java.lang.Thread $r2;
        int $i0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;
        r1 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter>;
        if r1 == null goto label0;

        $i0 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;
        if $i0 == -2 goto label0;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void unlinkCancelledWaiters()>();
        r1 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter>;

     label0:
        $r4 = new java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        specialinvoke $r4.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: void <init>(java.lang.Thread,int)>($r2, -2);
        r3 = $r4;
        if r1 != null goto label1;

        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter> = r3;
        goto label2;

     label1:
        r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter> = r3;

     label2:
        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter> = r3;
        return r3;
    }

    private void doSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1, $r2, $r4;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;
        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

     label0:
        $r2 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;
        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter> = $r2;
        if $r2 != null goto label1;

        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter> = null;

     label1:
        r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter> = null;
        $r3 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        $z0 = virtualinvoke $r3.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferForSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);
        if $z0 != 0 goto label2;

        $r4 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter>;
        r1 = $r4;
        if $r4 != null goto label0;

     label2:
        return;
    }

    private void doSignalAll(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1, r2;
        null_type $n0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r3;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;
        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;
        $n0 = null;
        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter> = $n0;
        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter> = $n0;

     label0:
        r2 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;
        r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter> = null;
        $r3 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        virtualinvoke $r3.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferForSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);
        r1 = r2;
        if r1 != null goto label0;

        return;
    }

    private void unlinkCancelledWaiters()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1, r2, r3;
        int $i0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;
        r1 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter>;
        r2 = null;

     label0:
        if r1 == null goto label5;

        r3 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;
        $i0 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;
        if $i0 == -2 goto label3;

        r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter> = null;
        if r2 != null goto label1;

        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter> = r3;
        goto label2;

     label1:
        r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter> = r3;

     label2:
        if r3 != null goto label4;

        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter> = r2;
        goto label4;

     label3:
        r2 = r1;

     label4:
        r1 = r3;
        goto label0;

     label5:
        return;
    }

    public final void signal()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r2;
        boolean $z0;
        java.lang.IllegalMonitorStateException $r3;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;
        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        $z0 = virtualinvoke $r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isHeldExclusively()>();
        if $z0 != 0 goto label0;

        $r3 = new java.lang.IllegalMonitorStateException;
        specialinvoke $r3.<java.lang.IllegalMonitorStateException: void <init>()>();
        throw $r3;

     label0:
        r1 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter>;
        if r1 == null goto label1;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void doSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);

     label1:
        return;
    }

    public final void signalAll()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r2;
        boolean $z0;
        java.lang.IllegalMonitorStateException $r3;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;
        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        $z0 = virtualinvoke $r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isHeldExclusively()>();
        if $z0 != 0 goto label0;

        $r3 = new java.lang.IllegalMonitorStateException;
        specialinvoke $r3.<java.lang.IllegalMonitorStateException: void <init>()>();
        throw $r3;

     label0:
        r1 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter>;
        if r1 == null goto label1;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void doSignalAll(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);

     label1:
        return;
    }

    public final void awaitUninterruptibly()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1;
        int i0;
        boolean z0, $z1, $z2, $z3;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r2, $r3, $r4;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;
        r1 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node addConditionWaiter()>();
        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        i0 = virtualinvoke $r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer: int fullyRelease(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);
        z0 = 0;

     label0:
        $r3 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        $z1 = virtualinvoke $r3.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);
        if $z1 != 0 goto label1;

        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(r0);
        $z2 = staticinvoke <java.lang.Thread: boolean interrupted()>();
        if $z2 == 0 goto label0;

        z0 = 1;
        goto label0;

     label1:
        $r4 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        $z3 = virtualinvoke $r4.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int)>(r1, i0);
        if $z3 != 0 goto label2;

        if z0 == 0 goto label3;

     label2:
        staticinvoke <java.util.concurrent.locks.AbstractQueuedSynchronizer: void access$000()>();

     label3:
        return;
    }

    private int checkInterruptWhileWaiting(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1;
        boolean $z0, $z1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r2;
        byte $b0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;
        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;
        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();
        if $z0 == 0 goto label1;

        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        $z1 = virtualinvoke $r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);
        if $z1 == 0 goto label0;

        $b0 = -1;
        goto label2;

     label0:
        $b0 = 1;
        goto label2;

     label1:
        $b0 = 0;

     label2:
        return $b0;
    }

    private void reportInterruptAfterWait(int) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        int i0;
        java.lang.InterruptedException $r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;
        i0 := @parameter0: int;
        if i0 != -1 goto label0;

        $r1 = new java.lang.InterruptedException;
        specialinvoke $r1.<java.lang.InterruptedException: void <init>()>();
        throw $r1;

     label0:
        if i0 != 1 goto label1;

        staticinvoke <java.util.concurrent.locks.AbstractQueuedSynchronizer: void access$000()>();

     label1:
        return;
    }

    public final void await() throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        boolean $z0, $z1, $z2;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1, $r6;
        int i0, i1, $i2;
        java.lang.InterruptedException $r2;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r3, $r4, $r5;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;
        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();
        if $z0 == 0 goto label0;

        $r2 = new java.lang.InterruptedException;
        specialinvoke $r2.<java.lang.InterruptedException: void <init>()>();
        throw $r2;

     label0:
        r1 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node addConditionWaiter()>();
        $r3 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        i0 = virtualinvoke $r3.<java.util.concurrent.locks.AbstractQueuedSynchronizer: int fullyRelease(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);
        i1 = 0;

     label1:
        $r4 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        $z1 = virtualinvoke $r4.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);
        if $z1 != 0 goto label2;

        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(r0);
        $i2 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: int checkInterruptWhileWaiting(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);
        i1 = $i2;
        if $i2 == 0 goto label1;

        goto label2;

     label2:
        $r5 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        $z2 = virtualinvoke $r5.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int)>(r1, i0);
        if $z2 == 0 goto label3;

        if i1 == -1 goto label3;

        i1 = 1;

     label3:
        $r6 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;
        if $r6 == null goto label4;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void unlinkCancelledWaiters()>();

     label4:
        if i1 == 0 goto label5;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void reportInterruptAfterWait(int)>(i1);

     label5:
        return;
    }

    public final long awaitNanos(long) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        long l0, l2, l4, $l7, $l8, $l9, $l10;
        boolean $z0, $z1, $z3;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1, $r7;
        int i1, i3, $i6;
        java.lang.InterruptedException $r2;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r3, $r4, $r5, $r6;
        byte $b5;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;
        l0 := @parameter0: long;
        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();
        if $z0 == 0 goto label0;

        $r2 = new java.lang.InterruptedException;
        specialinvoke $r2.<java.lang.InterruptedException: void <init>()>();
        throw $r2;

     label0:
        r1 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node addConditionWaiter()>();
        $r3 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        i1 = virtualinvoke $r3.<java.util.concurrent.locks.AbstractQueuedSynchronizer: int fullyRelease(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);
        l2 = staticinvoke <java.lang.System: long nanoTime()>();
        i3 = 0;

     label1:
        $r4 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        $z1 = virtualinvoke $r4.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);
        if $z1 != 0 goto label4;

        $b5 = l0 cmp 0L;
        if $b5 > 0 goto label2;

        $r5 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        virtualinvoke $r5.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);
        goto label4;

     label2:
        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, l0);
        $i6 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: int checkInterruptWhileWaiting(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r1);
        i3 = $i6;
        if $i6 == 0 goto label3;

        goto label4;

     label3:
        l4 = staticinvoke <java.lang.System: long nanoTime()>();
        $l7 = l4 - l2;
        l0 = l0 - $l7;
        l2 = l4;
        goto label1;

     label4:
        $r6 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        $z3 = virtualinvoke $r6.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int)>(r1, i1);
        if $z3 == 0 goto label5;

        if i3 == -1 goto label5;

        i3 = 1;

     label5:
        $r7 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;
        if $r7 == null goto label6;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void unlinkCancelledWaiters()>();

     label6:
        if i3 == 0 goto label7;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void reportInterruptAfterWait(int)>(i3);

     label7:
        $l8 = staticinvoke <java.lang.System: long nanoTime()>();
        $l9 = $l8 - l2;
        $l10 = l0 - $l9;
        return $l10;
    }

    public final boolean awaitUntil(java.util.Date) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.Date r1;
        long l0, $l3;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r2, $r9;
        int i1, i2, $i5;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.NullPointerException $r3;
        java.lang.InterruptedException $r4;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r5, $r6, $r7, $r8;
        byte $b4;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;
        r1 := @parameter0: java.util.Date;
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        l0 = virtualinvoke r1.<java.util.Date: long getTime()>();
        $z1 = staticinvoke <java.lang.Thread: boolean interrupted()>();
        if $z1 == 0 goto label1;

        $r4 = new java.lang.InterruptedException;
        specialinvoke $r4.<java.lang.InterruptedException: void <init>()>();
        throw $r4;

     label1:
        r2 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node addConditionWaiter()>();
        $r5 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        i1 = virtualinvoke $r5.<java.util.concurrent.locks.AbstractQueuedSynchronizer: int fullyRelease(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r2);
        z0 = 0;
        i2 = 0;

     label2:
        $r6 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        $z2 = virtualinvoke $r6.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r2);
        if $z2 != 0 goto label4;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $b4 = $l3 cmp l0;
        if $b4 <= 0 goto label3;

        $r7 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        z0 = virtualinvoke $r7.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r2);
        goto label4;

     label3:
        staticinvoke <java.util.concurrent.locks.LockSupport: void parkUntil(java.lang.Object,long)>(r0, l0);
        $i5 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: int checkInterruptWhileWaiting(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r2);
        i2 = $i5;
        if $i5 == 0 goto label2;

        goto label4;

     label4:
        $r8 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        $z3 = virtualinvoke $r8.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int)>(r2, i1);
        if $z3 == 0 goto label5;

        if i2 == -1 goto label5;

        i2 = 1;

     label5:
        $r9 = r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;
        if $r9 == null goto label6;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void unlinkCancelledWaiters()>();

     label6:
        if i2 == 0 goto label7;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void reportInterruptAfterWait(int)>(i2);

     label7:
        if z0 != 0 goto label8;

        $z4 = 1;
        goto label9;

     label8:
        $z4 = 0;

     label9:
        return $z4;
    }

    public final boolean await(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        long l0, l1, l3, l5, $l9;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r2, $r9;
        int i2, i4, $i8;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.NullPointerException $r3;
        java.lang.InterruptedException $r4;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r5, $r6, $r7, $r8;
        byte $b6, $b7;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;
        l0 := @parameter0: long;
        r1 := @parameter1: java.util.concurrent.TimeUnit;
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);
        $z1 = staticinvoke <java.lang.Thread: boolean interrupted()>();
        if $z1 == 0 goto label1;

        $r4 = new java.lang.InterruptedException;
        specialinvoke $r4.<java.lang.InterruptedException: void <init>()>();
        throw $r4;

     label1:
        r2 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node addConditionWaiter()>();
        $r5 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        i2 = virtualinvoke $r5.<java.util.concurrent.locks.AbstractQueuedSynchronizer: int fullyRelease(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r2);
        l3 = staticinvoke <java.lang.System: long nanoTime()>();
        z0 = 0;
        i4 = 0;

     label2:
        $r6 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        $z2 = virtualinvoke $r6.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r2);
        if $z2 != 0 goto label6;

        $b6 = l1 cmp 0L;
        if $b6 > 0 goto label3;

        $r7 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        z0 = virtualinvoke $r7.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r2);
        goto label6;

     label3:
        $b7 = l1 cmp 1000L;
        if $b7 < 0 goto label4;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, l1);

     label4:
        $i8 = specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: int checkInterruptWhileWaiting(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(r2);
        i4 = $i8;
        if $i8 == 0 goto label5;

        goto label6;

     label5:
        l5 = staticinvoke <java.lang.System: long nanoTime()>();
        $l9 = l5 - l3;
        l1 = l1 - $l9;
        l3 = l5;
        goto label2;

     label6:
        $r8 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        $z3 = virtualinvoke $r8.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int)>(r2, i2);
        if $z3 == 0 goto label7;

        if i4 == -1 goto label7;

        i4 = 1;

     label7:
        $r9 = r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;
        if $r9 == null goto label8;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void unlinkCancelledWaiters()>();

     label8:
        if i4 == 0 goto label9;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void reportInterruptAfterWait(int)>(i4);

     label9:
        if z0 != 0 goto label10;

        $z4 = 1;
        goto label11;

     label10:
        $z4 = 0;

     label11:
        return $z4;
    }

    final boolean isOwnedBy(java.util.concurrent.locks.AbstractQueuedSynchronizer)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer r1, $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;
        r1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer;
        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        if r1 != $r2 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    protected final boolean hasWaiters()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r2;
        boolean $z0;
        java.lang.IllegalMonitorStateException $r3;
        int $i0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;
        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        $z0 = virtualinvoke $r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isHeldExclusively()>();
        if $z0 != 0 goto label0;

        $r3 = new java.lang.IllegalMonitorStateException;
        specialinvoke $r3.<java.lang.IllegalMonitorStateException: void <init>()>();
        throw $r3;

     label0:
        r1 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter>;

     label1:
        if r1 == null goto label3;

        $i0 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;
        if $i0 != -2 goto label2;

        return 1;

     label2:
        r1 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;
        goto label1;

     label3:
        return 0;
    }

    protected final int getWaitQueueLength()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        int i0, $i1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r2;
        boolean $z0;
        java.lang.IllegalMonitorStateException $r3;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;
        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        $z0 = virtualinvoke $r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isHeldExclusively()>();
        if $z0 != 0 goto label0;

        $r3 = new java.lang.IllegalMonitorStateException;
        specialinvoke $r3.<java.lang.IllegalMonitorStateException: void <init>()>();
        throw $r3;

     label0:
        i0 = 0;
        r1 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter>;

     label1:
        if r1 == null goto label3;

        $i1 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;
        if $i1 != -2 goto label2;

        i0 = i0 + 1;

     label2:
        r1 = r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;
        goto label1;

     label3:
        return i0;
    }

    protected final java.util.Collection getWaitingThreads()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject r0;
        java.util.ArrayList r1, $r6;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r2;
        java.lang.Thread r3;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r4;
        boolean $z0;
        java.lang.IllegalMonitorStateException $r5;
        int $i0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;
        $r4 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;
        $z0 = virtualinvoke $r4.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isHeldExclusively()>();
        if $z0 != 0 goto label0;

        $r5 = new java.lang.IllegalMonitorStateException;
        specialinvoke $r5.<java.lang.IllegalMonitorStateException: void <init>()>();
        throw $r5;

     label0:
        $r6 = new java.util.ArrayList;
        specialinvoke $r6.<java.util.ArrayList: void <init>()>();
        r1 = $r6;
        r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter>;

     label1:
        if r2 == null goto label3;

        $i0 = r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;
        if $i0 != -2 goto label2;

        r3 = r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.lang.Thread thread>;
        if r3 == null goto label2;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label2:
        r2 = r2.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;
        goto label1;

     label3:
        return r1;
    }
}
