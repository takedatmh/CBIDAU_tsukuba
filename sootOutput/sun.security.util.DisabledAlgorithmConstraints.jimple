public class sun.security.util.DisabledAlgorithmConstraints extends java.lang.Object implements java.security.AlgorithmConstraints
{
    public static final java.lang.String PROPERTY_CERTPATH_DISABLED_ALGS;
    public static final java.lang.String PROPERTY_TLS_DISABLED_ALGS;
    private static java.util.Map disabledAlgorithmsMap;
    private static java.util.Map keySizeConstraintsMap;
    private java.lang.String[] disabledAlgorithms;
    private sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraints keySizeConstraints;

    public void <init>(java.lang.String)
    {
        sun.security.util.DisabledAlgorithmConstraints r0;
        java.lang.String r1;
        java.util.Map r2, $r4, $r5, $r6, $r9;
        java.lang.Throwable r3, $r12;
        boolean $z0;
        java.lang.Object $r7, $r10;
        java.lang.String[] $r8;
        sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraints $r11;

        r0 := @this: sun.security.util.DisabledAlgorithmConstraints;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r4 = <sun.security.util.DisabledAlgorithmConstraints: java.util.Map disabledAlgorithmsMap>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $r5 = <sun.security.util.DisabledAlgorithmConstraints: java.util.Map disabledAlgorithmsMap>;
        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);
        if $z0 != 0 goto label1;

        staticinvoke <sun.security.util.DisabledAlgorithmConstraints: void loadDisabledAlgorithmsMap(java.lang.String)>(r1);

     label1:
        $r6 = <sun.security.util.DisabledAlgorithmConstraints: java.util.Map disabledAlgorithmsMap>;
        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        $r8 = (java.lang.String[]) $r7;
        r0.<sun.security.util.DisabledAlgorithmConstraints: java.lang.String[] disabledAlgorithms> = $r8;
        $r9 = <sun.security.util.DisabledAlgorithmConstraints: java.util.Map keySizeConstraintsMap>;
        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        $r11 = (sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraints) $r10;
        r0.<sun.security.util.DisabledAlgorithmConstraints: sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraints keySizeConstraints> = $r11;
        exitmonitor r2;

     label2:
        goto label6;

     label3:
        $r12 := @caughtexception;

     label4:
        r3 = $r12;
        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final boolean permits(java.util.Set, java.lang.String, java.security.AlgorithmParameters)
    {
        sun.security.util.DisabledAlgorithmConstraints r0;
        java.util.Set r1, r4;
        java.lang.String r2, r6, r8;
        java.security.AlgorithmParameters r3;
        java.lang.String[] r5;
        int i0, i1, $i2;
        java.util.Iterator r7;
        java.lang.IllegalArgumentException $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r11;

        r0 := @this: sun.security.util.DisabledAlgorithmConstraints;
        r1 := @parameter0: java.util.Set;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.security.AlgorithmParameters;
        if r2 == null goto label0;

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i2 != 0 goto label1;

     label0:
        $r9 = new java.lang.IllegalArgumentException;
        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No algorithm name specified");
        throw $r9;

     label1:
        if r1 == null goto label2;

        $z0 = interfaceinvoke r1.<java.util.Set: boolean isEmpty()>();
        if $z0 == 0 goto label3;

     label2:
        $r10 = new java.lang.IllegalArgumentException;
        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No cryptographic primitive specified");
        throw $r10;

     label3:
        r4 = null;
        r5 = r0.<sun.security.util.DisabledAlgorithmConstraints: java.lang.String[] disabledAlgorithms>;
        i0 = lengthof r5;
        i1 = 0;

     label4:
        if i1 >= i0 goto label11;

        r6 = r5[i1];
        if r6 == null goto label10;

        $z1 = virtualinvoke r6.<java.lang.String: boolean isEmpty()>();
        if $z1 == 0 goto label5;

        goto label10;

     label5:
        $z2 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);
        if $z2 == 0 goto label6;

        return 0;

     label6:
        if r4 != null goto label7;

        r4 = virtualinvoke r0.<sun.security.util.DisabledAlgorithmConstraints: java.util.Set decomposes(java.lang.String)>(r2);

     label7:
        r7 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();

     label8:
        $z3 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();
        if $z3 == 0 goto label10;

        $r11 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();
        r8 = (java.lang.String) $r11;
        $z4 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r8);
        if $z4 == 0 goto label9;

        return 0;

     label9:
        goto label8;

     label10:
        i1 = i1 + 1;
        goto label4;

     label11:
        return 1;
    }

    public final boolean permits(java.util.Set, java.security.Key)
    {
        sun.security.util.DisabledAlgorithmConstraints r0;
        java.util.Set r1;
        java.security.Key r2;
        boolean $z0;

        r0 := @this: sun.security.util.DisabledAlgorithmConstraints;
        r1 := @parameter0: java.util.Set;
        r2 := @parameter1: java.security.Key;
        $z0 = specialinvoke r0.<sun.security.util.DisabledAlgorithmConstraints: boolean checkConstraints(java.util.Set,java.lang.String,java.security.Key,java.security.AlgorithmParameters)>(r1, "", r2, null);
        return $z0;
    }

    public final boolean permits(java.util.Set, java.lang.String, java.security.Key, java.security.AlgorithmParameters)
    {
        sun.security.util.DisabledAlgorithmConstraints r0;
        java.util.Set r1;
        java.lang.String r2;
        java.security.Key r3;
        java.security.AlgorithmParameters r4;
        int $i0;
        java.lang.IllegalArgumentException $r5;
        boolean $z0;

        r0 := @this: sun.security.util.DisabledAlgorithmConstraints;
        r1 := @parameter0: java.util.Set;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.security.Key;
        r4 := @parameter3: java.security.AlgorithmParameters;
        if r2 == null goto label0;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i0 != 0 goto label1;

     label0:
        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No algorithm name specified");
        throw $r5;

     label1:
        $z0 = specialinvoke r0.<sun.security.util.DisabledAlgorithmConstraints: boolean checkConstraints(java.util.Set,java.lang.String,java.security.Key,java.security.AlgorithmParameters)>(r1, r2, r3, r4);
        return $z0;
    }

    protected java.util.Set decomposes(java.lang.String)
    {
        sun.security.util.DisabledAlgorithmConstraints r0;
        java.lang.String r1, r6, r10;
        java.util.regex.Pattern r2, r7;
        java.lang.String[] r3, r5, r8, r9;
        java.util.HashSet r4, $r11, $r12;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        boolean $z1, $z2, $z4, $z5, $z7, $z8, $z10, $z11, $z13, $z14, $z16, $z17, $z19, $z20, $z22, $z23, $z25, $z26, $z28, $z29;

        r0 := @this: sun.security.util.DisabledAlgorithmConstraints;
        r1 := @parameter0: java.lang.String;
        if r1 == null goto label0;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i4 != 0 goto label1;

     label0:
        $r11 = new java.util.HashSet;
        specialinvoke $r11.<java.util.HashSet: void <init>()>();
        return $r11;

     label1:
        r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("/");
        r3 = virtualinvoke r2.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>(r1);
        $r12 = new java.util.HashSet;
        specialinvoke $r12.<java.util.HashSet: void <init>()>();
        r4 = $r12;
        r5 = r3;
        i0 = lengthof r5;
        i1 = 0;

     label2:
        if i1 >= i0 goto label8;

        r6 = r5[i1];
        if r6 == null goto label7;

        $i5 = virtualinvoke r6.<java.lang.String: int length()>();
        if $i5 != 0 goto label3;

        goto label7;

     label3:
        r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("with|and", 2);
        r8 = virtualinvoke r7.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>(r6);
        r9 = r8;
        i2 = lengthof r9;
        i3 = 0;

     label4:
        if i3 >= i2 goto label7;

        r10 = r9[i3];
        if r10 == null goto label6;

        $i6 = virtualinvoke r10.<java.lang.String: int length()>();
        if $i6 != 0 goto label5;

        goto label6;

     label5:
        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>(r10);

     label6:
        i3 = i3 + 1;
        goto label4;

     label7:
        i1 = i1 + 1;
        goto label2;

     label8:
        $z1 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA1");
        if $z1 == 0 goto label9;

        $z2 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA-1");
        if $z2 != 0 goto label9;

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>("SHA-1");

     label9:
        $z4 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA-1");
        if $z4 == 0 goto label10;

        $z5 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA1");
        if $z5 != 0 goto label10;

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>("SHA1");

     label10:
        $z7 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA224");
        if $z7 == 0 goto label11;

        $z8 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA-224");
        if $z8 != 0 goto label11;

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>("SHA-224");

     label11:
        $z10 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA-224");
        if $z10 == 0 goto label12;

        $z11 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA224");
        if $z11 != 0 goto label12;

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>("SHA224");

     label12:
        $z13 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA256");
        if $z13 == 0 goto label13;

        $z14 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA-256");
        if $z14 != 0 goto label13;

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>("SHA-256");

     label13:
        $z16 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA-256");
        if $z16 == 0 goto label14;

        $z17 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA256");
        if $z17 != 0 goto label14;

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>("SHA256");

     label14:
        $z19 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA384");
        if $z19 == 0 goto label15;

        $z20 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA-384");
        if $z20 != 0 goto label15;

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>("SHA-384");

     label15:
        $z22 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA-384");
        if $z22 == 0 goto label16;

        $z23 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA384");
        if $z23 != 0 goto label16;

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>("SHA384");

     label16:
        $z25 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA512");
        if $z25 == 0 goto label17;

        $z26 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA-512");
        if $z26 != 0 goto label17;

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>("SHA-512");

     label17:
        $z28 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA-512");
        if $z28 == 0 goto label18;

        $z29 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>("SHA512");
        if $z29 != 0 goto label18;

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>("SHA512");

     label18:
        return r4;
    }

    private boolean checkConstraints(java.util.Set, java.lang.String, java.security.Key, java.security.AlgorithmParameters)
    {
        sun.security.util.DisabledAlgorithmConstraints r0;
        java.util.Set r1;
        java.lang.String r2, $r6;
        java.security.Key r3;
        java.security.AlgorithmParameters r4;
        java.lang.IllegalArgumentException $r5;
        int $i0;
        boolean $z0, $z1, $z2;
        sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraints $r7;

        r0 := @this: sun.security.util.DisabledAlgorithmConstraints;
        r1 := @parameter0: java.util.Set;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.security.Key;
        r4 := @parameter3: java.security.AlgorithmParameters;
        if r3 != null goto label0;

        $r5 = new java.lang.IllegalArgumentException;
        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The key cannot be null");
        throw $r5;

     label0:
        if r2 == null goto label1;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i0 == 0 goto label1;

        $z0 = virtualinvoke r0.<sun.security.util.DisabledAlgorithmConstraints: boolean permits(java.util.Set,java.lang.String,java.security.AlgorithmParameters)>(r1, r2, r4);
        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r6 = interfaceinvoke r3.<java.security.Key: java.lang.String getAlgorithm()>();
        $z1 = virtualinvoke r0.<sun.security.util.DisabledAlgorithmConstraints: boolean permits(java.util.Set,java.lang.String,java.security.AlgorithmParameters)>(r1, $r6, null);
        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r7 = r0.<sun.security.util.DisabledAlgorithmConstraints: sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraints keySizeConstraints>;
        $z2 = virtualinvoke $r7.<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraints: boolean disables(java.security.Key)>(r3);
        if $z2 == 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    private static void loadDisabledAlgorithmsMap(java.lang.String)
    {
        java.lang.String r0, r2, $r5, $r6;
        sun.security.util.DisabledAlgorithmConstraints$1 $r1;
        java.lang.String[] r3;
        int i0, $i2, $i3, $i5, $i6, $i7;
        java.lang.Object $r4;
        boolean $z0;
        char $c1, $c4;
        java.util.Map $r7, $r11;
        sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraints $r9, r10;

        r0 := @parameter0: java.lang.String;
        $r1 = new sun.security.util.DisabledAlgorithmConstraints$1;
        specialinvoke $r1.<sun.security.util.DisabledAlgorithmConstraints$1: void <init>(java.lang.String)>(r0);
        $r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);
        r2 = (java.lang.String) $r4;
        r3 = null;
        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();
        if $z0 != 0 goto label2;

        $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0);
        if $c1 != 34 goto label0;

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();
        $i3 = $i2 - 1;
        $c4 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i3);
        if $c4 != 34 goto label0;

        $i5 = virtualinvoke r2.<java.lang.String: int length()>();
        $i6 = $i5 - 1;
        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(1, $i6);

     label0:
        r3 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");
        i0 = 0;

     label1:
        $i7 = lengthof r3;
        if i0 >= $i7 goto label2;

        $r5 = r3[i0];
        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();
        r3[i0] = $r6;
        i0 = i0 + 1;
        goto label1;

     label2:
        if r3 != null goto label3;

        r3 = newarray (java.lang.String)[0];

     label3:
        $r7 = <sun.security.util.DisabledAlgorithmConstraints: java.util.Map disabledAlgorithmsMap>;
        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r3);
        $r9 = new sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraints;
        specialinvoke $r9.<sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraints: void <init>(java.lang.String[])>(r3);
        r10 = $r9;
        $r11 = <sun.security.util.DisabledAlgorithmConstraints: java.util.Map keySizeConstraintsMap>;
        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r10);
        return;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0, $r2;
        java.util.Map $r1, $r3;

        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        $r1 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r0);
        <sun.security.util.DisabledAlgorithmConstraints: java.util.Map disabledAlgorithmsMap> = $r1;
        $r2 = new java.util.HashMap;
        specialinvoke $r2.<java.util.HashMap: void <init>()>();
        $r3 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r2);
        <sun.security.util.DisabledAlgorithmConstraints: java.util.Map keySizeConstraintsMap> = $r3;
        return;
    }
}
