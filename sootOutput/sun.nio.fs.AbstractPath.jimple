abstract class sun.nio.fs.AbstractPath extends java.lang.Object implements java.nio.file.Path
{

    protected void <init>()
    {
        sun.nio.fs.AbstractPath r0;

        r0 := @this: sun.nio.fs.AbstractPath;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public final boolean startsWith(java.lang.String)
    {
        sun.nio.fs.AbstractPath r0;
        java.lang.String r1;
        java.nio.file.FileSystem $r2;
        java.lang.String[] $r3;
        java.nio.file.Path $r4;
        boolean $z0;

        r0 := @this: sun.nio.fs.AbstractPath;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<sun.nio.fs.AbstractPath: java.nio.file.FileSystem getFileSystem()>();
        $r3 = newarray (java.lang.String)[0];
        $r4 = virtualinvoke $r2.<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>(r1, $r3);
        $z0 = virtualinvoke r0.<sun.nio.fs.AbstractPath: boolean startsWith(java.nio.file.Path)>($r4);
        return $z0;
    }

    public final boolean endsWith(java.lang.String)
    {
        sun.nio.fs.AbstractPath r0;
        java.lang.String r1;
        java.nio.file.FileSystem $r2;
        java.lang.String[] $r3;
        java.nio.file.Path $r4;
        boolean $z0;

        r0 := @this: sun.nio.fs.AbstractPath;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<sun.nio.fs.AbstractPath: java.nio.file.FileSystem getFileSystem()>();
        $r3 = newarray (java.lang.String)[0];
        $r4 = virtualinvoke $r2.<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>(r1, $r3);
        $z0 = virtualinvoke r0.<sun.nio.fs.AbstractPath: boolean endsWith(java.nio.file.Path)>($r4);
        return $z0;
    }

    public final java.nio.file.Path resolve(java.lang.String)
    {
        sun.nio.fs.AbstractPath r0;
        java.lang.String r1;
        java.nio.file.FileSystem $r2;
        java.lang.String[] $r3;
        java.nio.file.Path $r4, $r5;

        r0 := @this: sun.nio.fs.AbstractPath;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<sun.nio.fs.AbstractPath: java.nio.file.FileSystem getFileSystem()>();
        $r3 = newarray (java.lang.String)[0];
        $r4 = virtualinvoke $r2.<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>(r1, $r3);
        $r5 = virtualinvoke r0.<sun.nio.fs.AbstractPath: java.nio.file.Path resolve(java.nio.file.Path)>($r4);
        return $r5;
    }

    public final java.nio.file.Path resolveSibling(java.nio.file.Path)
    {
        sun.nio.fs.AbstractPath r0;
        java.nio.file.Path r1, r2, $r4;
        java.lang.NullPointerException $r3;

        r0 := @this: sun.nio.fs.AbstractPath;
        r1 := @parameter0: java.nio.file.Path;
        if r1 != null goto label0;

        $r3 = new java.lang.NullPointerException;
        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();
        throw $r3;

     label0:
        r2 = virtualinvoke r0.<sun.nio.fs.AbstractPath: java.nio.file.Path getParent()>();
        if r2 != null goto label1;

        $r4 = r1;
        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(r1);

     label2:
        return $r4;
    }

    public final java.nio.file.Path resolveSibling(java.lang.String)
    {
        sun.nio.fs.AbstractPath r0;
        java.lang.String r1;
        java.nio.file.FileSystem $r2;
        java.lang.String[] $r3;
        java.nio.file.Path $r4, $r5;

        r0 := @this: sun.nio.fs.AbstractPath;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<sun.nio.fs.AbstractPath: java.nio.file.FileSystem getFileSystem()>();
        $r3 = newarray (java.lang.String)[0];
        $r4 = virtualinvoke $r2.<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>(r1, $r3);
        $r5 = virtualinvoke r0.<sun.nio.fs.AbstractPath: java.nio.file.Path resolveSibling(java.nio.file.Path)>($r4);
        return $r5;
    }

    public final java.util.Iterator iterator()
    {
        sun.nio.fs.AbstractPath r0;
        sun.nio.fs.AbstractPath$1 $r1;

        r0 := @this: sun.nio.fs.AbstractPath;
        $r1 = new sun.nio.fs.AbstractPath$1;
        specialinvoke $r1.<sun.nio.fs.AbstractPath$1: void <init>(sun.nio.fs.AbstractPath)>(r0);
        return $r1;
    }

    public final java.io.File toFile()
    {
        sun.nio.fs.AbstractPath r0;
        java.io.File $r1;
        java.lang.String $r2;

        r0 := @this: sun.nio.fs.AbstractPath;
        $r1 = new java.io.File;
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();
        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2);
        return $r1;
    }

    public final transient java.nio.file.WatchKey register(java.nio.file.WatchService, java.nio.file.WatchEvent$Kind[]) throws java.io.IOException
    {
        sun.nio.fs.AbstractPath r0;
        java.nio.file.WatchService r1;
        java.nio.file.WatchEvent$Kind[] r2;
        java.nio.file.WatchEvent$Modifier[] $r3;
        java.nio.file.WatchKey $r4;

        r0 := @this: sun.nio.fs.AbstractPath;
        r1 := @parameter0: java.nio.file.WatchService;
        r2 := @parameter1: java.nio.file.WatchEvent$Kind[];
        $r3 = newarray (java.nio.file.WatchEvent$Modifier)[0];
        $r4 = virtualinvoke r0.<sun.nio.fs.AbstractPath: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[],java.nio.file.WatchEvent$Modifier[])>(r1, r2, $r3);
        return $r4;
    }
}
