class sun.nio.ch.FileDispatcherImpl extends sun.nio.ch.FileDispatcher
{

    void <init>(boolean)
    {
        sun.nio.ch.FileDispatcherImpl r0;
        boolean z0;

        r0 := @this: sun.nio.ch.FileDispatcherImpl;
        z0 := @parameter0: boolean;
        specialinvoke r0.<sun.nio.ch.FileDispatcher: void <init>()>();
        return;
    }

    void <init>()
    {
        sun.nio.ch.FileDispatcherImpl r0;

        r0 := @this: sun.nio.ch.FileDispatcherImpl;
        specialinvoke r0.<sun.nio.ch.FileDispatcher: void <init>()>();
        return;
    }

    int read(java.io.FileDescriptor, long, int) throws java.io.IOException
    {
        sun.nio.ch.FileDispatcherImpl r0;
        java.io.FileDescriptor r1;
        long l0;
        int i1, $i2;

        r0 := @this: sun.nio.ch.FileDispatcherImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        l0 := @parameter1: long;
        i1 := @parameter2: int;
        $i2 = staticinvoke <sun.nio.ch.FileDispatcherImpl: int read0(java.io.FileDescriptor,long,int)>(r1, l0, i1);
        return $i2;
    }

    int pread(java.io.FileDescriptor, long, int, long) throws java.io.IOException
    {
        sun.nio.ch.FileDispatcherImpl r0;
        java.io.FileDescriptor r1;
        long l0, l2;
        int i1, $i3;

        r0 := @this: sun.nio.ch.FileDispatcherImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        l0 := @parameter1: long;
        i1 := @parameter2: int;
        l2 := @parameter3: long;
        $i3 = staticinvoke <sun.nio.ch.FileDispatcherImpl: int pread0(java.io.FileDescriptor,long,int,long)>(r1, l0, i1, l2);
        return $i3;
    }

    long readv(java.io.FileDescriptor, long, int) throws java.io.IOException
    {
        sun.nio.ch.FileDispatcherImpl r0;
        java.io.FileDescriptor r1;
        long l0, $l2;
        int i1;

        r0 := @this: sun.nio.ch.FileDispatcherImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        l0 := @parameter1: long;
        i1 := @parameter2: int;
        $l2 = staticinvoke <sun.nio.ch.FileDispatcherImpl: long readv0(java.io.FileDescriptor,long,int)>(r1, l0, i1);
        return $l2;
    }

    int write(java.io.FileDescriptor, long, int) throws java.io.IOException
    {
        sun.nio.ch.FileDispatcherImpl r0;
        java.io.FileDescriptor r1;
        long l0;
        int i1, $i2;

        r0 := @this: sun.nio.ch.FileDispatcherImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        l0 := @parameter1: long;
        i1 := @parameter2: int;
        $i2 = staticinvoke <sun.nio.ch.FileDispatcherImpl: int write0(java.io.FileDescriptor,long,int)>(r1, l0, i1);
        return $i2;
    }

    int pwrite(java.io.FileDescriptor, long, int, long) throws java.io.IOException
    {
        sun.nio.ch.FileDispatcherImpl r0;
        java.io.FileDescriptor r1;
        long l0, l2;
        int i1, $i3;

        r0 := @this: sun.nio.ch.FileDispatcherImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        l0 := @parameter1: long;
        i1 := @parameter2: int;
        l2 := @parameter3: long;
        $i3 = staticinvoke <sun.nio.ch.FileDispatcherImpl: int pwrite0(java.io.FileDescriptor,long,int,long)>(r1, l0, i1, l2);
        return $i3;
    }

    long writev(java.io.FileDescriptor, long, int) throws java.io.IOException
    {
        sun.nio.ch.FileDispatcherImpl r0;
        java.io.FileDescriptor r1;
        long l0, $l2;
        int i1;

        r0 := @this: sun.nio.ch.FileDispatcherImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        l0 := @parameter1: long;
        i1 := @parameter2: int;
        $l2 = staticinvoke <sun.nio.ch.FileDispatcherImpl: long writev0(java.io.FileDescriptor,long,int)>(r1, l0, i1);
        return $l2;
    }

    int force(java.io.FileDescriptor, boolean) throws java.io.IOException
    {
        sun.nio.ch.FileDispatcherImpl r0;
        java.io.FileDescriptor r1;
        boolean z0;
        int $i0;

        r0 := @this: sun.nio.ch.FileDispatcherImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        z0 := @parameter1: boolean;
        $i0 = staticinvoke <sun.nio.ch.FileDispatcherImpl: int force0(java.io.FileDescriptor,boolean)>(r1, z0);
        return $i0;
    }

    int truncate(java.io.FileDescriptor, long) throws java.io.IOException
    {
        sun.nio.ch.FileDispatcherImpl r0;
        java.io.FileDescriptor r1;
        long l0;
        int $i1;

        r0 := @this: sun.nio.ch.FileDispatcherImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        l0 := @parameter1: long;
        $i1 = staticinvoke <sun.nio.ch.FileDispatcherImpl: int truncate0(java.io.FileDescriptor,long)>(r1, l0);
        return $i1;
    }

    long size(java.io.FileDescriptor) throws java.io.IOException
    {
        sun.nio.ch.FileDispatcherImpl r0;
        java.io.FileDescriptor r1;
        long $l0;

        r0 := @this: sun.nio.ch.FileDispatcherImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        $l0 = staticinvoke <sun.nio.ch.FileDispatcherImpl: long size0(java.io.FileDescriptor)>(r1);
        return $l0;
    }

    int lock(java.io.FileDescriptor, boolean, long, long, boolean) throws java.io.IOException
    {
        sun.nio.ch.FileDispatcherImpl r0;
        java.io.FileDescriptor r1;
        boolean z0, z1;
        long l0, l1;
        int $i2;

        r0 := @this: sun.nio.ch.FileDispatcherImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        z0 := @parameter1: boolean;
        l0 := @parameter2: long;
        l1 := @parameter3: long;
        z1 := @parameter4: boolean;
        $i2 = staticinvoke <sun.nio.ch.FileDispatcherImpl: int lock0(java.io.FileDescriptor,boolean,long,long,boolean)>(r1, z0, l0, l1, z1);
        return $i2;
    }

    void release(java.io.FileDescriptor, long, long) throws java.io.IOException
    {
        sun.nio.ch.FileDispatcherImpl r0;
        java.io.FileDescriptor r1;
        long l0, l1;

        r0 := @this: sun.nio.ch.FileDispatcherImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        l0 := @parameter1: long;
        l1 := @parameter2: long;
        staticinvoke <sun.nio.ch.FileDispatcherImpl: void release0(java.io.FileDescriptor,long,long)>(r1, l0, l1);
        return;
    }

    void close(java.io.FileDescriptor) throws java.io.IOException
    {
        sun.nio.ch.FileDispatcherImpl r0;
        java.io.FileDescriptor r1;

        r0 := @this: sun.nio.ch.FileDispatcherImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        staticinvoke <sun.nio.ch.FileDispatcherImpl: void close0(java.io.FileDescriptor)>(r1);
        return;
    }

    void preClose(java.io.FileDescriptor) throws java.io.IOException
    {
        sun.nio.ch.FileDispatcherImpl r0;
        java.io.FileDescriptor r1;

        r0 := @this: sun.nio.ch.FileDispatcherImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        staticinvoke <sun.nio.ch.FileDispatcherImpl: void preClose0(java.io.FileDescriptor)>(r1);
        return;
    }

    java.io.FileDescriptor duplicateForMapping(java.io.FileDescriptor)
    {
        sun.nio.ch.FileDispatcherImpl r0;
        java.io.FileDescriptor r1, $r2;

        r0 := @this: sun.nio.ch.FileDispatcherImpl;
        r1 := @parameter0: java.io.FileDescriptor;
        $r2 = new java.io.FileDescriptor;
        specialinvoke $r2.<java.io.FileDescriptor: void <init>()>();
        return $r2;
    }

    static native int read0(java.io.FileDescriptor, long, int) throws java.io.IOException;

    static native int pread0(java.io.FileDescriptor, long, int, long) throws java.io.IOException;

    static native long readv0(java.io.FileDescriptor, long, int) throws java.io.IOException;

    static native int write0(java.io.FileDescriptor, long, int) throws java.io.IOException;

    static native int pwrite0(java.io.FileDescriptor, long, int, long) throws java.io.IOException;

    static native long writev0(java.io.FileDescriptor, long, int) throws java.io.IOException;

    static native int force0(java.io.FileDescriptor, boolean) throws java.io.IOException;

    static native int truncate0(java.io.FileDescriptor, long) throws java.io.IOException;

    static native long size0(java.io.FileDescriptor) throws java.io.IOException;

    static native int lock0(java.io.FileDescriptor, boolean, long, long, boolean) throws java.io.IOException;

    static native void release0(java.io.FileDescriptor, long, long) throws java.io.IOException;

    static native void close0(java.io.FileDescriptor) throws java.io.IOException;

    static native void preClose0(java.io.FileDescriptor) throws java.io.IOException;

    static native void closeIntFD(int) throws java.io.IOException;

    static native void init();

    static void <clinit>()
    {
        staticinvoke <sun.nio.ch.Util: void load()>();
        staticinvoke <sun.nio.ch.FileDispatcherImpl: void init()>();
        return;
    }
}
